#
# PySNMP MIB module HM2-MGMTACCESS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HM2-MGMTACCESS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:31:41 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint")
hm2ConfigurationMibs, HmLargeDisplayString, HmEnabledStatus = mibBuilder.importSymbols("HM2-TC-MIB", "hm2ConfigurationMibs", "HmLargeDisplayString", "HmEnabledStatus")
InetAddress, InetAddressPrefixLength, InetPortNumber, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressPrefixLength", "InetPortNumber", "InetAddressType")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Unsigned32, MibIdentifier, NotificationType, ObjectIdentity, Counter64, ModuleIdentity, iso, Counter32, IpAddress, TimeTicks, Bits, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Unsigned32", "MibIdentifier", "NotificationType", "ObjectIdentity", "Counter64", "ModuleIdentity", "iso", "Counter32", "IpAddress", "TimeTicks", "Bits", "Integer32")
TextualConvention, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "DisplayString")
hm2MgmtAccessMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 248, 11, 25))
hm2MgmtAccessMib.setRevisions(('2011-03-16 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hm2MgmtAccessMib.setRevisionsDescriptions(('Initial version.',))
if mibBuilder.loadTexts: hm2MgmtAccessMib.setLastUpdated('201103160000Z')
if mibBuilder.loadTexts: hm2MgmtAccessMib.setOrganization('Hirschmann Automation and Control GmbH')
if mibBuilder.loadTexts: hm2MgmtAccessMib.setContactInfo('Postal: Stuttgarter Str. 45-51 72654 Neckartenzlingen Germany Phone: +49 7127 140 E-mail: hac.support@belden.com')
if mibBuilder.loadTexts: hm2MgmtAccessMib.setDescription('Hirschmann Management Access MIB. Copyright (C) 2012. All Rights Reserved.')
class Hm2RestartAction(TextualConvention, Integer32):
    description = '.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("other", 1), ("restart", 2))

class Hm2TlsVersions(TextualConvention, Bits):
    description = 'The Transport Layer Security versions available on the device.'
    status = 'current'
    namedValues = NamedValues(("tlsv1-0", 0), ("tlsv1-1", 1), ("tlsv1-2", 2))

class Hm2TlsCipherSuites(TextualConvention, Bits):
    description = 'The Transport Layer Security ciphers available on the device.'
    status = 'current'
    namedValues = NamedValues(("tls-rsa-with-rc4-128-sha", 0), ("tls-rsa-with-aes-128-cbc-sha", 1), ("tls-dhe-rsa-with-aes-128-cbc-sha", 2), ("tls-dhe-rsa-with-aes-256-cbc-sha", 3), ("tls-ecdhe-rsa-with-aes-128-cbc-sha", 4), ("tls-ecdhe-rsa-with-aes-256-cbc-sha", 5), ("tls-ecdhe-rsa-with-aes-128-gcm-sha256", 6), ("tls-ecdhe-rsa-with-aes-256-gcm-sha384", 7))

hm2MgmtAccessMibNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 25, 0))
hm2MgmtAccessMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 25, 1))
hm2MgmtAccessMibSNMPExtensionGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 25, 3))
hm2MgmtAccessSnmpGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 25, 1, 1))
hm2MgmtAccessWebGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 25, 1, 2))
hm2MgmtAccessTelnetGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 25, 1, 3))
hm2MgmtAccessSshGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 25, 1, 4))
hm2MgmtAccessPreLoginBannerGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 25, 1, 5))
hm2MgmtAccessCliGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 25, 1, 6))
hm2RestrictedMgmtAccessGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 25, 1, 7))
hm2SnmpV1AdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 25, 1, 1, 1), HmEnabledStatus().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2SnmpV1AdminStatus.setStatus('current')
if mibBuilder.loadTexts: hm2SnmpV1AdminStatus.setDescription('Enables/disables the SNMP version 1 protocol.')
hm2SnmpV2AdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 25, 1, 1, 2), HmEnabledStatus().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2SnmpV2AdminStatus.setStatus('current')
if mibBuilder.loadTexts: hm2SnmpV2AdminStatus.setDescription('Enables/disables the SNMP version 2c protocol.')
hm2SnmpV3AdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 25, 1, 1, 3), HmEnabledStatus().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2SnmpV3AdminStatus.setStatus('current')
if mibBuilder.loadTexts: hm2SnmpV3AdminStatus.setDescription('Enables/disables the SNMP version 3 protocol.')
hm2SnmpPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 25, 1, 1, 4), InetPortNumber().clone(161)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2SnmpPortNumber.setStatus('current')
if mibBuilder.loadTexts: hm2SnmpPortNumber.setDescription('The port number of the snmp server. To activate the port number the device has to be restarted. Setting the port to zero is not allowed.')
hm2SnmpOver802AdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 25, 1, 1, 5), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2SnmpOver802AdminStatus.setStatus('current')
if mibBuilder.loadTexts: hm2SnmpOver802AdminStatus.setDescription('Enables/disables SNMP over IEEE 802 networks.')
hm2SnmpTrapServiceAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 25, 1, 1, 6), HmEnabledStatus().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2SnmpTrapServiceAdminStatus.setStatus('current')
if mibBuilder.loadTexts: hm2SnmpTrapServiceAdminStatus.setDescription('Enables/disables the SNMP trap sending service globally on the device.')
hm2WebHttpAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 25, 1, 2, 1), HmEnabledStatus().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2WebHttpAdminStatus.setStatus('current')
if mibBuilder.loadTexts: hm2WebHttpAdminStatus.setDescription('Enables/Disables HTTP access to the device.')
hm2WebHttpsAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 25, 1, 2, 2), HmEnabledStatus().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2WebHttpsAdminStatus.setStatus('current')
if mibBuilder.loadTexts: hm2WebHttpsAdminStatus.setDescription('Enables/Disables HTTPS access to the device.')
hm2WebHttpPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 25, 1, 2, 3), InetPortNumber().clone(80)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2WebHttpPortNumber.setStatus('current')
if mibBuilder.loadTexts: hm2WebHttpPortNumber.setDescription('The port number of the HTTP web server. Setting the port to zero is not allowed.')
hm2WebHttpsPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 25, 1, 2, 4), InetPortNumber().clone(443)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2WebHttpsPortNumber.setStatus('current')
if mibBuilder.loadTexts: hm2WebHttpsPortNumber.setDescription('The port number of the HTTPS web server. Setting the port to zero is not allowed.')
hm2WebHttpsCertPresent = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 25, 1, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pem", 1), ("none", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2WebHttpsCertPresent.setStatus('current')
if mibBuilder.loadTexts: hm2WebHttpsCertPresent.setDescription('Indicates what HTTP certificate files are present on the device, if any.')
hm2WebHttpsCertControl = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 25, 1, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noop", 1), ("generate", 2), ("delete", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2WebHttpsCertControl.setStatus('current')
if mibBuilder.loadTexts: hm2WebHttpsCertControl.setDescription('Controls HTTPS certificate generation and deletion. Always returns noop(1).')
hm2WebHttpsCertOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 25, 1, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("generate", 1), ("delete", 2), ("none", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2WebHttpsCertOperStatus.setStatus('current')
if mibBuilder.loadTexts: hm2WebHttpsCertOperStatus.setDescription('Indicates what key files are currently being generated, if any.')
hm2WebIntfTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 25, 1, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 160)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2WebIntfTimeOut.setStatus('current')
if mibBuilder.loadTexts: hm2WebIntfTimeOut.setDescription('Web interface idle timeout value for this switch in minutes. If the value is set to 0 the idle logout is disabled.')
hm2WebTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 25, 1, 2, 9), HmEnabledStatus().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2WebTrapEnable.setStatus('current')
if mibBuilder.loadTexts: hm2WebTrapEnable.setDescription('Indicates whether login success, login failed or logout traps should be generated for this application.')
hm2WebLastLogoutUserName = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 25, 1, 2, 10), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2WebLastLogoutUserName.setStatus('current')
if mibBuilder.loadTexts: hm2WebLastLogoutUserName.setDescription('User name of last logout for this application.')
hm2WebLastLoginUserName = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 25, 1, 2, 11), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2WebLastLoginUserName.setStatus('current')
if mibBuilder.loadTexts: hm2WebLastLoginUserName.setDescription('User name of last login for this application.')
hm2WebLastLoginInetAddressType = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 25, 1, 2, 12), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2WebLastLoginInetAddressType.setStatus('current')
if mibBuilder.loadTexts: hm2WebLastLoginInetAddressType.setDescription('InetAddressType of the last login used for this application.')
hm2WebLastLoginInetAddress = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 25, 1, 2, 13), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2WebLastLoginInetAddress.setStatus('current')
if mibBuilder.loadTexts: hm2WebLastLoginInetAddress.setDescription('IP address or DNS name specified in the last request for this application.')
hm2WebHttpsCertFingerPrintType = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 25, 1, 2, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sha1", 1), ("sha256", 2))).clone('sha256')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2WebHttpsCertFingerPrintType.setStatus('current')
if mibBuilder.loadTexts: hm2WebHttpsCertFingerPrintType.setDescription("Controls HTTPS certificate fingerprint generation. If set to 'sha1' hm2WebHttpsCertFingerPrint will show the SHA1 fingerprint of the certificate.")
hm2WebHttpsCertFingerPrint = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 25, 1, 2, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2WebHttpsCertFingerPrint.setStatus('current')
if mibBuilder.loadTexts: hm2WebHttpsCertFingerPrint.setDescription('The HTTPS certificate fingerprint as hash. The type of the hash is defined with hm2WebHttpsCertFingerPrintType.')
hm2WebHttpsServerRestart = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 25, 1, 2, 16), Hm2RestartAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2WebHttpsServerRestart.setStatus('current')
if mibBuilder.loadTexts: hm2WebHttpsServerRestart.setDescription('Setting the object to restart will have the effect of restarting the HTTPS server. The server will load the new settings.')
hm2WebHttpsServerTlsVersions = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 25, 1, 2, 17), Hm2TlsVersions().clone(namedValues=NamedValues(("tlsv1-0", 0), ("tlsv1-2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2WebHttpsServerTlsVersions.setStatus('current')
if mibBuilder.loadTexts: hm2WebHttpsServerTlsVersions.setDescription('The TLS version supported by the HTTPS server. Changing the value has only effect after restarting the HTTPS Server.')
hm2WebHttpsServerTlsCipherSuites = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 25, 1, 2, 18), Hm2TlsCipherSuites().clone(namedValues=NamedValues(("tls-rsa-with-rc4-128-sha", 0), ("tls-dhe-rsa-with-aes-128-cbc-sha", 2), ("tls-ecdhe-rsa-with-aes-128-cbc-sha", 4), ("tls-ecdhe-rsa-with-aes-128-gcm-sha256", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2WebHttpsServerTlsCipherSuites.setStatus('current')
if mibBuilder.loadTexts: hm2WebHttpsServerTlsCipherSuites.setDescription('The cipher suite used by the HTTPS server. Changing the value has only effect after restarting the HTTPS server.')
hm2TelnetServerAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 25, 1, 3, 1), HmEnabledStatus().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2TelnetServerAdminStatus.setStatus('current')
if mibBuilder.loadTexts: hm2TelnetServerAdminStatus.setDescription('Enable/Disable telnet operation. A (1) enables, a (2) disables. When disabled, no telnet sessions are allowed by the system.')
hm2TelnetServerPort = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 25, 1, 3, 2), InetPortNumber().clone(23)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2TelnetServerPort.setStatus('current')
if mibBuilder.loadTexts: hm2TelnetServerPort.setDescription('Telnet port operation. Default telnet port is 23. Setting the port to zero is not allowed.')
hm2TelnetServerSessionsCount = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 25, 1, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2TelnetServerSessionsCount.setStatus('current')
if mibBuilder.loadTexts: hm2TelnetServerSessionsCount.setDescription('Current number of active telnet sessions on this switch.')
hm2TelnetServerMaxSessions = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 25, 1, 3, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2TelnetServerMaxSessions.setStatus('current')
if mibBuilder.loadTexts: hm2TelnetServerMaxSessions.setDescription('Maximum number of telnet sessions. An integer value from 1 to 5 specifies the maximum number of telnet sessions that can be established. The full range is not supported by all variants.')
hm2TelnetServerSessionsTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 25, 1, 3, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 160)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2TelnetServerSessionsTimeOut.setStatus('current')
if mibBuilder.loadTexts: hm2TelnetServerSessionsTimeOut.setDescription('Telnet login timeout (minutes) Config telnet timeout will set the telnet session timeout value. A session is active as long as the session has not remained idle for the value set. Specify a value from 0 to 160. Note: Changing the timeout value for active sessions does not become effective until the session is re-established.')
hm2TelnetTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 25, 1, 3, 6), HmEnabledStatus().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2TelnetTrapEnable.setStatus('current')
if mibBuilder.loadTexts: hm2TelnetTrapEnable.setDescription('Indicates whether login success, login failed or logout traps should be generated for this application.')
hm2TelnetLastLogoutUserName = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 25, 1, 3, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2TelnetLastLogoutUserName.setStatus('current')
if mibBuilder.loadTexts: hm2TelnetLastLogoutUserName.setDescription('User name of last logout for this application.')
hm2TelnetLastLoginUserName = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 25, 1, 3, 8), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2TelnetLastLoginUserName.setStatus('current')
if mibBuilder.loadTexts: hm2TelnetLastLoginUserName.setDescription('User name of last login for this application.')
hm2TelnetLastLoginInetAddressType = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 25, 1, 3, 9), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2TelnetLastLoginInetAddressType.setStatus('current')
if mibBuilder.loadTexts: hm2TelnetLastLoginInetAddressType.setDescription('InetAddressType of the last login used for this application.')
hm2TelnetLastLoginInetAddress = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 25, 1, 3, 10), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2TelnetLastLoginInetAddress.setStatus('current')
if mibBuilder.loadTexts: hm2TelnetLastLoginInetAddress.setDescription('IP address or DNS name specified in the last request for this application.')
hm2SshAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 25, 1, 4, 1), HmEnabledStatus().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2SshAdminStatus.setStatus('current')
if mibBuilder.loadTexts: hm2SshAdminStatus.setDescription('Configures whether the SSH service is enabled on this switch. The default value is enable(1).')
hm2SshProtocolLevel = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 25, 1, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("ssh20", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2SshProtocolLevel.setStatus('current')
if mibBuilder.loadTexts: hm2SshProtocolLevel.setDescription('Configures which protocol versions of SSH are enabled on this switch. Currently only SSHv2 is supported.')
hm2SshPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 25, 1, 4, 3), InetPortNumber().clone(22)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2SshPortNumber.setStatus('current')
if mibBuilder.loadTexts: hm2SshPortNumber.setDescription('The port number of the SSH server. Setting the port to zero is not allowed.')
hm2SshSessionsCount = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 25, 1, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2SshSessionsCount.setStatus('current')
if mibBuilder.loadTexts: hm2SshSessionsCount.setDescription('Current number of active SSH sessions on this switch.')
hm2SshMaxSessionsCount = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 25, 1, 4, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2SshMaxSessionsCount.setStatus('current')
if mibBuilder.loadTexts: hm2SshMaxSessionsCount.setDescription('Max number of SSH sessions permitted on this switch. The full range is not supported by all variants.')
hm2SshSessionTimeout = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 25, 1, 4, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 160)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2SshSessionTimeout.setStatus('current')
if mibBuilder.loadTexts: hm2SshSessionTimeout.setDescription('SSH idle timeout value for this switch in minutes. If the value is set to 0 the idle logout is disabled.')
hm2SshKeysPresent = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 25, 1, 4, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("dsa", 1), ("rsa", 2), ("both", 3), ("none", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2SshKeysPresent.setStatus('current')
if mibBuilder.loadTexts: hm2SshKeysPresent.setDescription('Indicates what key files are present on the device, if any.')
hm2SshKeyOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 25, 1, 4, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("dsa", 1), ("rsa", 2), ("both", 3), ("none", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2SshKeyOperStatus.setStatus('current')
if mibBuilder.loadTexts: hm2SshKeyOperStatus.setDescription('Indicates what key files are currently being generated or deleted, if any.')
hm2SshRSAKeyControl = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 25, 1, 4, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noop", 1), ("generate", 2), ("delete", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2SshRSAKeyControl.setStatus('current')
if mibBuilder.loadTexts: hm2SshRSAKeyControl.setDescription('Controls RSA key generation and deletion. Always returns noop(1).')
hm2SshDSAKeyControl = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 25, 1, 4, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noop", 1), ("generate", 2), ("delete", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2SshDSAKeyControl.setStatus('current')
if mibBuilder.loadTexts: hm2SshDSAKeyControl.setDescription('Controls DSA key generation and deletion. Always returns noop(1).')
hm2SshFingerPrintDSA = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 25, 1, 4, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2SshFingerPrintDSA.setStatus('current')
if mibBuilder.loadTexts: hm2SshFingerPrintDSA.setDescription('The local DSA fingerprint for SSH connections.')
hm2SshFingerPrintRSA = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 25, 1, 4, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2SshFingerPrintRSA.setStatus('current')
if mibBuilder.loadTexts: hm2SshFingerPrintRSA.setDescription('The local RSA fingerprint for SSH connections.')
hm2SshTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 25, 1, 4, 13), HmEnabledStatus().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2SshTrapEnable.setStatus('current')
if mibBuilder.loadTexts: hm2SshTrapEnable.setDescription('Indicates whether login success, login failed or logout traps should be generated for this application.')
hm2SshLastLogoutUserName = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 25, 1, 4, 14), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2SshLastLogoutUserName.setStatus('current')
if mibBuilder.loadTexts: hm2SshLastLogoutUserName.setDescription('User name of last logout for this application.')
hm2SshLastLoginUserName = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 25, 1, 4, 15), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2SshLastLoginUserName.setStatus('current')
if mibBuilder.loadTexts: hm2SshLastLoginUserName.setDescription('User name of last login for this application.')
hm2SshLastLoginInetAddressType = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 25, 1, 4, 16), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2SshLastLoginInetAddressType.setStatus('current')
if mibBuilder.loadTexts: hm2SshLastLoginInetAddressType.setDescription('InetAddressType of the last login used for this application.')
hm2SshLastLoginInetAddress = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 25, 1, 4, 17), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2SshLastLoginInetAddress.setStatus('current')
if mibBuilder.loadTexts: hm2SshLastLoginInetAddress.setDescription('IP address or DNS name specified in the last request for this application.')
hm2SshOutboundSessionsCount = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 25, 1, 4, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2SshOutboundSessionsCount.setStatus('current')
if mibBuilder.loadTexts: hm2SshOutboundSessionsCount.setDescription('Current number of active outbound SSH sessions from this switch.')
hm2SshOutboundMaxSessionsCount = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 25, 1, 4, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2SshOutboundMaxSessionsCount.setStatus('current')
if mibBuilder.loadTexts: hm2SshOutboundMaxSessionsCount.setDescription('Max number of outbound SSH sessions permitted on this switch.')
hm2SshOutboundSessionTimeout = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 25, 1, 4, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 160)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2SshOutboundSessionTimeout.setStatus('current')
if mibBuilder.loadTexts: hm2SshOutboundSessionTimeout.setDescription('SSH outbound idle timeout value for this switch in minutes. If the value is set to 0 the idle logout is disabled.')
hm2PreLoginBannerAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 25, 1, 5, 1), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2PreLoginBannerAdminStatus.setStatus('current')
if mibBuilder.loadTexts: hm2PreLoginBannerAdminStatus.setDescription('Enables/disables the NERC CIP-005-1 R2.6 compliant use banner')
hm2PreLoginBannerText = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 25, 1, 5, 2), HmLargeDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2PreLoginBannerText.setStatus('current')
if mibBuilder.loadTexts: hm2PreLoginBannerText.setDescription("The text added in this variable by the user will be displayed in the system login page as banner before login into the CLI (local or remote) or before login into the web interface. The default value is an empty string. Special meaning have the sequences '\\t' and '\\n' which allow the user to format the string with tabulator (\\t) and newline (\\n) format instructions. The use case is to provide a NERC CIP-005-1 R2.6 compliant use banner. The banner must be enabled using hm2PreLoginBannerAdminStatus")
hm2CliLoginPrompt = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 25, 1, 6, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2CliLoginPrompt.setStatus('current')
if mibBuilder.loadTexts: hm2CliLoginPrompt.setDescription('Prompt string for the command line interface.')
hm2CliLoginTimeoutSerial = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 25, 1, 6, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 160)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2CliLoginTimeoutSerial.setStatus('current')
if mibBuilder.loadTexts: hm2CliLoginTimeoutSerial.setDescription('Timeout for serial connections in minutes. If the value is set to 0, there will be no idle logout at all.')
hm2CliLoginBannerAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 25, 1, 6, 10), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2CliLoginBannerAdminStatus.setStatus('current')
if mibBuilder.loadTexts: hm2CliLoginBannerAdminStatus.setDescription('Enables/disables the display of the cli login banner text instead of the standard login banner.')
hm2CliLoginBannerText = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 25, 1, 6, 11), HmLargeDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2CliLoginBannerText.setStatus('current')
if mibBuilder.loadTexts: hm2CliLoginBannerText.setDescription("The text added in this variable by the user will be displayed in the system login page (local or remote) instead of the systemoverview. The default value is an empty string. Special meaning have the sequences '\\t' and '\\n' which allow the user to format the string with tabulator (\\t) and newline (\\n) format instructions. The Banner must be enabled using CliLoginBannerAdminStatus.")
hm2ConsoleTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 25, 1, 6, 12), HmEnabledStatus().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2ConsoleTrapEnable.setStatus('current')
if mibBuilder.loadTexts: hm2ConsoleTrapEnable.setDescription('Indicates whether login success, login failed or logout traps should be generated for console (V.24).')
hm2ConsoleLastLogoutUserName = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 25, 1, 6, 13), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2ConsoleLastLogoutUserName.setStatus('current')
if mibBuilder.loadTexts: hm2ConsoleLastLogoutUserName.setDescription('User name of last logout for this application.')
hm2ConsoleLastLoginUserName = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 25, 1, 6, 14), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2ConsoleLastLoginUserName.setStatus('current')
if mibBuilder.loadTexts: hm2ConsoleLastLoginUserName.setDescription('User name of last login for console (V.24).')
hm2ConsoleServiceShellAdminState = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 25, 1, 6, 15), HmEnabledStatus().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2ConsoleServiceShellAdminState.setStatus('current')
if mibBuilder.loadTexts: hm2ConsoleServiceShellAdminState.setDescription('Admin State of service shell. (1=enable, 2=disable).')
hm2RmaTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 25, 1, 7, 1), )
if mibBuilder.loadTexts: hm2RmaTable.setStatus('current')
if mibBuilder.loadTexts: hm2RmaTable.setDescription('A list of management access entries (rules) to increase security.')
hm2RmaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 25, 1, 7, 1, 1), ).setIndexNames((0, "HM2-MGMTACCESS-MIB", "hm2RmaIndex"))
if mibBuilder.loadTexts: hm2RmaEntry.setStatus('current')
if mibBuilder.loadTexts: hm2RmaEntry.setDescription('An entry contains a rule for the management access.')
hm2RmaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 25, 1, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2RmaIndex.setStatus('current')
if mibBuilder.loadTexts: hm2RmaIndex.setDescription('The unique index used for each row in the RMA table.')
hm2RmaRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 25, 1, 7, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2RmaRowStatus.setStatus('current')
if mibBuilder.loadTexts: hm2RmaRowStatus.setDescription('Describes the status of a row in this table if it is active or not available.')
hm2RmaIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 25, 1, 7, 1, 1, 3), InetAddressType().clone('ipv4')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2RmaIpAddrType.setStatus('current')
if mibBuilder.loadTexts: hm2RmaIpAddrType.setDescription('Type of allowed IP address.')
hm2RmaIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 25, 1, 7, 1, 1, 4), InetAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2RmaIpAddr.setStatus('current')
if mibBuilder.loadTexts: hm2RmaIpAddr.setDescription('Allowed IP address in IPv4 or IPv6 style.')
hm2RmaPrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 25, 1, 7, 1, 1, 5), InetAddressPrefixLength()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2RmaPrefixLength.setStatus('current')
if mibBuilder.loadTexts: hm2RmaPrefixLength.setDescription('The length of the IP netmask.')
hm2RmaSrvHttp = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 25, 1, 7, 1, 1, 6), HmEnabledStatus().clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2RmaSrvHttp.setStatus('current')
if mibBuilder.loadTexts: hm2RmaSrvHttp.setDescription('Enables/disables HTTP access.')
hm2RmaSrvHttps = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 25, 1, 7, 1, 1, 7), HmEnabledStatus().clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2RmaSrvHttps.setStatus('current')
if mibBuilder.loadTexts: hm2RmaSrvHttps.setDescription('Enables/disables HTTPS access.')
hm2RmaSrvSnmp = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 25, 1, 7, 1, 1, 8), HmEnabledStatus().clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2RmaSrvSnmp.setStatus('current')
if mibBuilder.loadTexts: hm2RmaSrvSnmp.setDescription('Enables/disbales SNMP access.')
hm2RmaSrvTelnet = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 25, 1, 7, 1, 1, 9), HmEnabledStatus().clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2RmaSrvTelnet.setStatus('current')
if mibBuilder.loadTexts: hm2RmaSrvTelnet.setDescription('Enables/disables telnet access.')
hm2RmaSrvSsh = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 25, 1, 7, 1, 1, 10), HmEnabledStatus().clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2RmaSrvSsh.setStatus('current')
if mibBuilder.loadTexts: hm2RmaSrvSsh.setDescription('Enables/disables SSH access.')
hm2RmaSrvIEC61850 = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 25, 1, 7, 1, 1, 11), HmEnabledStatus().clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2RmaSrvIEC61850.setStatus('current')
if mibBuilder.loadTexts: hm2RmaSrvIEC61850.setDescription('Enables/disables IEC61850-MMS access.')
hm2RmaSrvModbusTcp = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 25, 1, 7, 1, 1, 12), HmEnabledStatus().clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2RmaSrvModbusTcp.setStatus('current')
if mibBuilder.loadTexts: hm2RmaSrvModbusTcp.setDescription('Enables/disables Modbus/TCP access.')
hm2RmaSrvEthernetIP = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 25, 1, 7, 1, 1, 13), HmEnabledStatus().clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2RmaSrvEthernetIP.setStatus('current')
if mibBuilder.loadTexts: hm2RmaSrvEthernetIP.setDescription('Enables/disables EtherNet/IP access.')
hm2RmaSrvProfinetIO = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 25, 1, 7, 1, 1, 14), HmEnabledStatus().clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2RmaSrvProfinetIO.setStatus('current')
if mibBuilder.loadTexts: hm2RmaSrvProfinetIO.setDescription('Enables/disables PROFINET access.')
hm2RmaOperation = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 25, 1, 7, 2), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2RmaOperation.setStatus('current')
if mibBuilder.loadTexts: hm2RmaOperation.setDescription('Enables/disables management access globally.')
hm2WebLoginSuccessTrap = NotificationType((1, 3, 6, 1, 4, 1, 248, 11, 25, 0, 1)).setObjects(("HM2-MGMTACCESS-MIB", "hm2WebLastLoginUserName"), ("HM2-MGMTACCESS-MIB", "hm2WebLastLoginInetAddressType"), ("HM2-MGMTACCESS-MIB", "hm2WebLastLoginInetAddress"))
if mibBuilder.loadTexts: hm2WebLoginSuccessTrap.setStatus('current')
if mibBuilder.loadTexts: hm2WebLoginSuccessTrap.setDescription('This trap is sent if a user successfully grants access via web to the device. hm2WebLastLoginInetAddress contains the IP address or DNS name of the login request. hm2WebLastLoginUserName contains the user name of the last user who logged in into the device.')
hm2WebLoginFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 248, 11, 25, 0, 2)).setObjects(("HM2-MGMTACCESS-MIB", "hm2WebLastLoginUserName"), ("HM2-MGMTACCESS-MIB", "hm2WebLastLoginInetAddressType"), ("HM2-MGMTACCESS-MIB", "hm2WebLastLoginInetAddress"))
if mibBuilder.loadTexts: hm2WebLoginFailedTrap.setStatus('current')
if mibBuilder.loadTexts: hm2WebLoginFailedTrap.setDescription('This trap is sent if a user tried to grant access via web to the device. hm2WebLastLoginInetAddress contains the IP address or the DNS name of the login request. hm2WebLastLoginUserName contains the user name of the user who tried to login into the device.')
hm2WebLogoutTrap = NotificationType((1, 3, 6, 1, 4, 1, 248, 11, 25, 0, 3)).setObjects(("HM2-MGMTACCESS-MIB", "hm2WebLastLogoutUserName"))
if mibBuilder.loadTexts: hm2WebLogoutTrap.setStatus('current')
if mibBuilder.loadTexts: hm2WebLogoutTrap.setDescription('This trap is sent when a user logs out a web session. hm2WebLastLogoutUserName contains the user name of the last user who logged out of the device.')
hm2TelnetLoginSuccessTrap = NotificationType((1, 3, 6, 1, 4, 1, 248, 11, 25, 0, 4)).setObjects(("HM2-MGMTACCESS-MIB", "hm2TelnetLastLoginUserName"), ("HM2-MGMTACCESS-MIB", "hm2TelnetLastLoginInetAddressType"), ("HM2-MGMTACCESS-MIB", "hm2TelnetLastLoginInetAddress"))
if mibBuilder.loadTexts: hm2TelnetLoginSuccessTrap.setStatus('current')
if mibBuilder.loadTexts: hm2TelnetLoginSuccessTrap.setDescription('This trap is sent if a user successfully grants access via telnet to the device. hm2TelnetLoginLastInetAddress contains the IP address or DNS name of the login request. hm2TelnetLastLoginUserName contains the user name of the last user who logged in into the device.')
hm2TelnetLoginFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 248, 11, 25, 0, 5)).setObjects(("HM2-MGMTACCESS-MIB", "hm2TelnetLastLoginUserName"), ("HM2-MGMTACCESS-MIB", "hm2TelnetLastLoginInetAddressType"), ("HM2-MGMTACCESS-MIB", "hm2TelnetLastLoginInetAddress"))
if mibBuilder.loadTexts: hm2TelnetLoginFailedTrap.setStatus('current')
if mibBuilder.loadTexts: hm2TelnetLoginFailedTrap.setDescription('This trap is sent if a user tried to grant access via telnet to the device. hm2TelnetLastLoginInetAddress contains the IP address or the DNS name of the login request. hm2TelnetLastLoginUserName contains the user name of the last user who tried to log in into the device.')
hm2TelnetLogoutTrap = NotificationType((1, 3, 6, 1, 4, 1, 248, 11, 25, 0, 6)).setObjects(("HM2-MGMTACCESS-MIB", "hm2TelnetLastLogoutUserName"))
if mibBuilder.loadTexts: hm2TelnetLogoutTrap.setStatus('current')
if mibBuilder.loadTexts: hm2TelnetLogoutTrap.setDescription('This trap is sent when a user logs out a telnet session. hm2TelnetLastLogoutUserName contains the user name of the last user who logged out of the device.')
hm2SshLoginSuccessTrap = NotificationType((1, 3, 6, 1, 4, 1, 248, 11, 25, 0, 7)).setObjects(("HM2-MGMTACCESS-MIB", "hm2SshLastLoginUserName"), ("HM2-MGMTACCESS-MIB", "hm2SshLastLoginInetAddressType"), ("HM2-MGMTACCESS-MIB", "hm2SshLastLoginInetAddress"))
if mibBuilder.loadTexts: hm2SshLoginSuccessTrap.setStatus('current')
if mibBuilder.loadTexts: hm2SshLoginSuccessTrap.setDescription('This trap is sent if a user successfully grants access via SSH to the device. hm2SshLastLoginInetAddress contains the IP address or DNS name of the login request. hm2SshLastLoginUserName contains the user name of the last user logged in into the device.')
hm2SshLoginFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 248, 11, 25, 0, 8)).setObjects(("HM2-MGMTACCESS-MIB", "hm2SshLastLoginUserName"), ("HM2-MGMTACCESS-MIB", "hm2SshLastLoginInetAddressType"), ("HM2-MGMTACCESS-MIB", "hm2SshLastLoginInetAddress"))
if mibBuilder.loadTexts: hm2SshLoginFailedTrap.setStatus('current')
if mibBuilder.loadTexts: hm2SshLoginFailedTrap.setDescription('This trap is sent if a user tried to grant access via SSH to the device. hm2SshLastLoginInetAddress contains the IP address or the DNS name of the login request. hm2SshLastLoginUserName contains the user name of the last user who tried to login into the device.')
hm2SshLogoutTrap = NotificationType((1, 3, 6, 1, 4, 1, 248, 11, 25, 0, 9)).setObjects(("HM2-MGMTACCESS-MIB", "hm2SshLastLogoutUserName"))
if mibBuilder.loadTexts: hm2SshLogoutTrap.setStatus('current')
if mibBuilder.loadTexts: hm2SshLogoutTrap.setDescription('This trap is sent when a user logs out a SSH session. hm2SshLastLogoutUserName contains the user name of the last user who logged out of the device.')
hm2ConsoleLoginSuccessTrap = NotificationType((1, 3, 6, 1, 4, 1, 248, 11, 25, 0, 10)).setObjects(("HM2-MGMTACCESS-MIB", "hm2ConsoleLastLoginUserName"))
if mibBuilder.loadTexts: hm2ConsoleLoginSuccessTrap.setStatus('current')
if mibBuilder.loadTexts: hm2ConsoleLoginSuccessTrap.setDescription('This trap is sent if a user successfully grants access via console (V.24) to the device. hm2ConsoleLastLoginUserName contains the user name of the last user who logged in into the device.')
hm2ConsoleLoginFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 248, 11, 25, 0, 11)).setObjects(("HM2-MGMTACCESS-MIB", "hm2ConsoleLastLoginUserName"))
if mibBuilder.loadTexts: hm2ConsoleLoginFailedTrap.setStatus('current')
if mibBuilder.loadTexts: hm2ConsoleLoginFailedTrap.setDescription('This trap is sent if a user tried to grant access via console (V.24) to the device. hm2ConsoleLastLoginUserName contains the user name of the last user who tried to login into the device.')
hm2ConsoleLogoutTrap = NotificationType((1, 3, 6, 1, 4, 1, 248, 11, 25, 0, 12)).setObjects(("HM2-MGMTACCESS-MIB", "hm2ConsoleLastLogoutUserName"))
if mibBuilder.loadTexts: hm2ConsoleLogoutTrap.setStatus('current')
if mibBuilder.loadTexts: hm2ConsoleLogoutTrap.setDescription('This trap is sent when a user logs out a console (V.24) session. hm2ConsoleLastLogoutUserName contains the user name of the last user who logged out of the device.')
hm2MgmtAccessSnmpSESGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 25, 3, 1))
hm2MgmtAccessWebSESGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 25, 3, 2))
hm2MgmtAccessTelnetSESGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 25, 3, 3))
hm2MgmtAccessSshSESGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 25, 3, 4))
hm2MgmtAccessPreLoginBannerSESGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 25, 3, 5))
hm2MgmtAccessCliSESGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 25, 3, 6))
hm2RestrictedMgmtAccessSESGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 25, 3, 7))
hm2MgmtAccessWebSESCertGenInProgress = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 11, 25, 3, 2, 1))
if mibBuilder.loadTexts: hm2MgmtAccessWebSESCertGenInProgress.setStatus('current')
if mibBuilder.loadTexts: hm2MgmtAccessWebSESCertGenInProgress.setDescription('Indicates that the certificate generation is already in progress.')
hm2MgmtAccessWebSESCertNotPresent = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 11, 25, 3, 2, 2))
if mibBuilder.loadTexts: hm2MgmtAccessWebSESCertNotPresent.setStatus('current')
if mibBuilder.loadTexts: hm2MgmtAccessWebSESCertNotPresent.setDescription('Indicates that no certificate is available.')
hm2MgmtAccessSshSESServerEnabled = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 11, 25, 3, 4, 1))
if mibBuilder.loadTexts: hm2MgmtAccessSshSESServerEnabled.setStatus('current')
if mibBuilder.loadTexts: hm2MgmtAccessSshSESServerEnabled.setDescription('Indicates that the SSH server is running.')
hm2MgmtAccessSshSESKeyGenInProgress = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 11, 25, 3, 4, 2))
if mibBuilder.loadTexts: hm2MgmtAccessSshSESKeyGenInProgress.setStatus('current')
if mibBuilder.loadTexts: hm2MgmtAccessSshSESKeyGenInProgress.setDescription('Indicates that the SSH key generation is in progress.')
hm2MgmtAccessSshSESKeyNotAvailable = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 11, 25, 3, 4, 3))
if mibBuilder.loadTexts: hm2MgmtAccessSshSESKeyNotAvailable.setStatus('current')
if mibBuilder.loadTexts: hm2MgmtAccessSshSESKeyNotAvailable.setDescription('Indicates that the SSH key is not available.')
mibBuilder.exportSymbols("HM2-MGMTACCESS-MIB", hm2TelnetLogoutTrap=hm2TelnetLogoutTrap, hm2ConsoleLoginFailedTrap=hm2ConsoleLoginFailedTrap, hm2WebHttpAdminStatus=hm2WebHttpAdminStatus, hm2RmaSrvSsh=hm2RmaSrvSsh, hm2MgmtAccessSshSESGroup=hm2MgmtAccessSshSESGroup, PYSNMP_MODULE_ID=hm2MgmtAccessMib, hm2TelnetLastLoginUserName=hm2TelnetLastLoginUserName, hm2MgmtAccessPreLoginBannerSESGroup=hm2MgmtAccessPreLoginBannerSESGroup, hm2RestrictedMgmtAccessSESGroup=hm2RestrictedMgmtAccessSESGroup, hm2WebHttpsCertControl=hm2WebHttpsCertControl, hm2SshLoginSuccessTrap=hm2SshLoginSuccessTrap, hm2MgmtAccessTelnetGroup=hm2MgmtAccessTelnetGroup, hm2SshSessionsCount=hm2SshSessionsCount, hm2RmaSrvEthernetIP=hm2RmaSrvEthernetIP, hm2WebHttpsCertFingerPrint=hm2WebHttpsCertFingerPrint, hm2MgmtAccessWebSESGroup=hm2MgmtAccessWebSESGroup, hm2RmaSrvProfinetIO=hm2RmaSrvProfinetIO, hm2WebHttpPortNumber=hm2WebHttpPortNumber, hm2RmaSrvHttps=hm2RmaSrvHttps, Hm2TlsCipherSuites=Hm2TlsCipherSuites, hm2SshOutboundSessionTimeout=hm2SshOutboundSessionTimeout, hm2ConsoleLastLoginUserName=hm2ConsoleLastLoginUserName, hm2SnmpPortNumber=hm2SnmpPortNumber, hm2SshMaxSessionsCount=hm2SshMaxSessionsCount, hm2SshLastLoginUserName=hm2SshLastLoginUserName, hm2TelnetServerSessionsTimeOut=hm2TelnetServerSessionsTimeOut, hm2RmaEntry=hm2RmaEntry, hm2RmaRowStatus=hm2RmaRowStatus, hm2MgmtAccessSnmpGroup=hm2MgmtAccessSnmpGroup, hm2TelnetLoginSuccessTrap=hm2TelnetLoginSuccessTrap, hm2ConsoleLoginSuccessTrap=hm2ConsoleLoginSuccessTrap, hm2MgmtAccessMibObjects=hm2MgmtAccessMibObjects, hm2TelnetLastLogoutUserName=hm2TelnetLastLogoutUserName, hm2RmaIpAddr=hm2RmaIpAddr, hm2SshRSAKeyControl=hm2SshRSAKeyControl, hm2SshLogoutTrap=hm2SshLogoutTrap, hm2CliLoginPrompt=hm2CliLoginPrompt, hm2ConsoleLastLogoutUserName=hm2ConsoleLastLogoutUserName, hm2MgmtAccessMibNotifications=hm2MgmtAccessMibNotifications, hm2SshAdminStatus=hm2SshAdminStatus, hm2WebHttpsCertOperStatus=hm2WebHttpsCertOperStatus, hm2CliLoginBannerAdminStatus=hm2CliLoginBannerAdminStatus, hm2RmaPrefixLength=hm2RmaPrefixLength, hm2SshLoginFailedTrap=hm2SshLoginFailedTrap, hm2MgmtAccessPreLoginBannerGroup=hm2MgmtAccessPreLoginBannerGroup, hm2WebHttpsServerTlsCipherSuites=hm2WebHttpsServerTlsCipherSuites, hm2MgmtAccessMib=hm2MgmtAccessMib, hm2MgmtAccessSshGroup=hm2MgmtAccessSshGroup, hm2MgmtAccessSshSESKeyGenInProgress=hm2MgmtAccessSshSESKeyGenInProgress, hm2WebLastLoginInetAddress=hm2WebLastLoginInetAddress, hm2WebLogoutTrap=hm2WebLogoutTrap, hm2SshFingerPrintRSA=hm2SshFingerPrintRSA, hm2RmaTable=hm2RmaTable, hm2WebHttpsServerRestart=hm2WebHttpsServerRestart, hm2SshSessionTimeout=hm2SshSessionTimeout, hm2WebHttpsPortNumber=hm2WebHttpsPortNumber, hm2WebLastLogoutUserName=hm2WebLastLogoutUserName, hm2TelnetLastLoginInetAddressType=hm2TelnetLastLoginInetAddressType, hm2WebLastLoginInetAddressType=hm2WebLastLoginInetAddressType, hm2WebTrapEnable=hm2WebTrapEnable, hm2SshOutboundMaxSessionsCount=hm2SshOutboundMaxSessionsCount, hm2WebLastLoginUserName=hm2WebLastLoginUserName, hm2MgmtAccessSshSESKeyNotAvailable=hm2MgmtAccessSshSESKeyNotAvailable, hm2SshDSAKeyControl=hm2SshDSAKeyControl, hm2TelnetLoginFailedTrap=hm2TelnetLoginFailedTrap, hm2SshOutboundSessionsCount=hm2SshOutboundSessionsCount, hm2RmaSrvModbusTcp=hm2RmaSrvModbusTcp, hm2SshLastLoginInetAddressType=hm2SshLastLoginInetAddressType, hm2SnmpV2AdminStatus=hm2SnmpV2AdminStatus, hm2TelnetTrapEnable=hm2TelnetTrapEnable, hm2ConsoleLogoutTrap=hm2ConsoleLogoutTrap, hm2CliLoginBannerText=hm2CliLoginBannerText, hm2TelnetServerMaxSessions=hm2TelnetServerMaxSessions, hm2SnmpV3AdminStatus=hm2SnmpV3AdminStatus, hm2PreLoginBannerText=hm2PreLoginBannerText, hm2SnmpV1AdminStatus=hm2SnmpV1AdminStatus, hm2TelnetServerPort=hm2TelnetServerPort, hm2MgmtAccessSshSESServerEnabled=hm2MgmtAccessSshSESServerEnabled, hm2WebHttpsAdminStatus=hm2WebHttpsAdminStatus, Hm2TlsVersions=Hm2TlsVersions, hm2MgmtAccessCliGroup=hm2MgmtAccessCliGroup, hm2WebHttpsServerTlsVersions=hm2WebHttpsServerTlsVersions, hm2WebIntfTimeOut=hm2WebIntfTimeOut, hm2WebHttpsCertPresent=hm2WebHttpsCertPresent, hm2ConsoleServiceShellAdminState=hm2ConsoleServiceShellAdminState, hm2TelnetServerSessionsCount=hm2TelnetServerSessionsCount, hm2MgmtAccessWebSESCertNotPresent=hm2MgmtAccessWebSESCertNotPresent, hm2RestrictedMgmtAccessGroup=hm2RestrictedMgmtAccessGroup, hm2MgmtAccessMibSNMPExtensionGroup=hm2MgmtAccessMibSNMPExtensionGroup, hm2TelnetServerAdminStatus=hm2TelnetServerAdminStatus, hm2RmaIndex=hm2RmaIndex, hm2SshProtocolLevel=hm2SshProtocolLevel, hm2ConsoleTrapEnable=hm2ConsoleTrapEnable, hm2TelnetLastLoginInetAddress=hm2TelnetLastLoginInetAddress, hm2RmaSrvIEC61850=hm2RmaSrvIEC61850, hm2RmaIpAddrType=hm2RmaIpAddrType, hm2SshPortNumber=hm2SshPortNumber, hm2SshLastLogoutUserName=hm2SshLastLogoutUserName, hm2RmaSrvSnmp=hm2RmaSrvSnmp, hm2SnmpTrapServiceAdminStatus=hm2SnmpTrapServiceAdminStatus, hm2RmaSrvHttp=hm2RmaSrvHttp, hm2WebLoginFailedTrap=hm2WebLoginFailedTrap, hm2MgmtAccessWebSESCertGenInProgress=hm2MgmtAccessWebSESCertGenInProgress, hm2SshKeysPresent=hm2SshKeysPresent, hm2SshTrapEnable=hm2SshTrapEnable, Hm2RestartAction=Hm2RestartAction, hm2RmaOperation=hm2RmaOperation, hm2RmaSrvTelnet=hm2RmaSrvTelnet, hm2CliLoginTimeoutSerial=hm2CliLoginTimeoutSerial, hm2SshLastLoginInetAddress=hm2SshLastLoginInetAddress, hm2MgmtAccessTelnetSESGroup=hm2MgmtAccessTelnetSESGroup, hm2SshKeyOperStatus=hm2SshKeyOperStatus, hm2PreLoginBannerAdminStatus=hm2PreLoginBannerAdminStatus, hm2MgmtAccessSnmpSESGroup=hm2MgmtAccessSnmpSESGroup, hm2MgmtAccessCliSESGroup=hm2MgmtAccessCliSESGroup, hm2SshFingerPrintDSA=hm2SshFingerPrintDSA, hm2WebHttpsCertFingerPrintType=hm2WebHttpsCertFingerPrintType, hm2SnmpOver802AdminStatus=hm2SnmpOver802AdminStatus, hm2WebLoginSuccessTrap=hm2WebLoginSuccessTrap, hm2MgmtAccessWebGroup=hm2MgmtAccessWebGroup)
