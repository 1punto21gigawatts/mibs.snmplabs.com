#
# PySNMP MIB module HPICF-AMP-SERVER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HPICF-AMP-SERVER-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:37:10 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint")
hpSwitch, = mibBuilder.importSymbols("HP-ICF-OID", "hpSwitch")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, Unsigned32, NotificationType, Gauge32, Integer32, Counter32, Counter64, MibIdentifier, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Bits, TimeTicks, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Unsigned32", "NotificationType", "Gauge32", "Integer32", "Counter32", "Counter64", "MibIdentifier", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Bits", "TimeTicks", "ObjectIdentity")
RowStatus, DisplayString, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "TextualConvention", "TruthValue")
hpicfAMPServerMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 125))
hpicfAMPServerMIB.setRevisions(('2017-03-07 00:00', '2017-01-04 00:00', '2016-12-16 00:00', '2016-09-15 00:00', '2016-04-19 00:00', '2016-03-03 00:00', '2015-12-14 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hpicfAMPServerMIB.setRevisionsDescriptions(('Updated the description of the hpicfArubaVPNRowStatus mib to specify not supported row status states.', 'Added support to specify optional backup controller ip in, hpicfArubaVPNBkpIP and hpicfArubaVPNBkpIPType.', 'New type any added in HpicfArubaVPNType.', 'To support the Airwave controller default gateway added hpicfArubaVPNGateway object.', 'To support the Airwave Controller two mib entries are added for tos and ttl, a table is added.', 'To support the Airwave Controller in the Configuration, a table is added.', 'Initial version',))
if mibBuilder.loadTexts: hpicfAMPServerMIB.setLastUpdated('201703070000Z')
if mibBuilder.loadTexts: hpicfAMPServerMIB.setOrganization('HP Networking')
if mibBuilder.loadTexts: hpicfAMPServerMIB.setContactInfo('Hewlett Packard Enterprise Company 8000 Foothills Blvd. Roseville, CA 95747')
if mibBuilder.loadTexts: hpicfAMPServerMIB.setDescription('This MIB defines HP proprietary objects used to configure the device with AirWave Management Platform (AMP).')
hpicfAMPServerObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 125, 1))
hpicfAMPServerConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 125, 2))
hpicfArubaVPNObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 125, 3))
hpicfArubaVPNDefaultGateway = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 125, 4))
class HpicfArubaVPNType(TextualConvention, Integer32):
    description = 'This textual convention is an enum that contains the types of Aruba VPNs supported.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("none", 1), ("amp", 2), ("any", 3))

hpicfArubaVPNTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 125, 3, 1), )
if mibBuilder.loadTexts: hpicfArubaVPNTable.setStatus('current')
if mibBuilder.loadTexts: hpicfArubaVPNTable.setDescription('The Aruba VPN configuration table.')
hpicfArubaVPNEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 125, 3, 1, 1), ).setIndexNames((0, "HPICF-AMP-SERVER-MIB", "hpicfArubaVPNIndex"))
if mibBuilder.loadTexts: hpicfArubaVPNEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfArubaVPNEntry.setDescription('The Aruba VPN configuration entry.')
hpicfArubaVPNIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 125, 3, 1, 1, 1), HpicfArubaVPNType())
if mibBuilder.loadTexts: hpicfArubaVPNIndex.setStatus('current')
if mibBuilder.loadTexts: hpicfArubaVPNIndex.setDescription('The index value which uniquely identifies a row in the configuration table.')
hpicfArubaVPNRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 125, 3, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfArubaVPNRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfArubaVPNRowStatus.setDescription('The row status of this Aruba VPN configuration entry. The value of this object allows the creation/deletion of the Controller configuration entry. Row statuses createAndWait(5), notReady(3) and notInService(2) are not supported.')
hpicfArubaVPNIPType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 125, 3, 1, 1, 3), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfArubaVPNIPType.setStatus('current')
if mibBuilder.loadTexts: hpicfArubaVPNIPType.setDescription('IPv4 address type of Aruba VPN Peer IP.')
hpicfArubaVPNIP = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 125, 3, 1, 1, 4), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfArubaVPNIP.setStatus('current')
if mibBuilder.loadTexts: hpicfArubaVPNIP.setDescription('IPv4 address of Aruba VPN Peer IP.')
hpicfArubaVPNTos = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 125, 3, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfArubaVPNTos.setStatus('current')
if mibBuilder.loadTexts: hpicfArubaVPNTos.setDescription('Configure Type-of-Service (ToS) for the tunnel.')
hpicfArubaVPNTtl = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 125, 3, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfArubaVPNTtl.setStatus('current')
if mibBuilder.loadTexts: hpicfArubaVPNTtl.setDescription('Configure Time-to-Live (TTL) for the tunnel.')
hpicfArubaVPNBkpIPType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 125, 3, 1, 1, 7), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfArubaVPNBkpIPType.setStatus('current')
if mibBuilder.loadTexts: hpicfArubaVPNBkpIPType.setDescription('IP address type of Aruba VPN Backup Peer.')
hpicfArubaVPNBkpIP = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 125, 3, 1, 1, 8), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfArubaVPNBkpIP.setStatus('current')
if mibBuilder.loadTexts: hpicfArubaVPNBkpIP.setDescription('IPv4 address of Aruba VPN Backup peer IP.')
hpicfArubaVPNGateway = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 125, 4, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfArubaVPNGateway.setStatus('current')
if mibBuilder.loadTexts: hpicfArubaVPNGateway.setDescription('This object when set to TRUE will allow the Aruba controller to be reached through the default-gateway.')
hpicfAMPServerIPType = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 125, 1, 1), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfAMPServerIPType.setStatus('current')
if mibBuilder.loadTexts: hpicfAMPServerIPType.setDescription('IP address type of AMP server.')
hpicfAMPServerIP = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 125, 1, 2), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfAMPServerIP.setStatus('current')
if mibBuilder.loadTexts: hpicfAMPServerIP.setDescription('IP address of AMP server.')
hpicfAMPServerGroup = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 125, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfAMPServerGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfAMPServerGroup.setDescription('Group name in AMP server where the switch will be grouped into, after device registration.')
hpicfAMPServerFolder = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 125, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfAMPServerFolder.setStatus('current')
if mibBuilder.loadTexts: hpicfAMPServerFolder.setDescription('Folder name in AMP server where the switch will be configured into after device registration. Folder name string will be in colon separated values. Each value separated by colon will be a sub folder of previous value.')
hpicfAMPServerSecret = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 125, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfAMPServerSecret.setStatus('current')
if mibBuilder.loadTexts: hpicfAMPServerSecret.setDescription('Secret name for the registering group to verify the device by AMP server.')
hpicfAMPServerConfigStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 125, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("configured", 1), ("notConfigured", 2))).clone('notConfigured')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfAMPServerConfigStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfAMPServerConfigStatus.setDescription('The object is to show the AMP server configuration staus.')
hpicfAMPServerMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 125, 2, 1))
hpicfAMPServerMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 125, 2, 2))
hpicfAMPServerMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 125, 2, 1, 1)).setObjects(("HPICF-AMP-SERVER-MIB", "hpicfAMPServerConfigGroup"), ("HPICF-AMP-SERVER-MIB", "hpicfArubaVPNConfigGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfAMPServerMIBCompliance = hpicfAMPServerMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfAMPServerMIBCompliance.setDescription('The compliance statement for HP switches implementing the HPICF-AMP-SERVER MIB.')
hpicfAMPServerMIBCompliance1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 125, 2, 1, 2)).setObjects(("HPICF-AMP-SERVER-MIB", "hpicfAMPServerConfigGroup"), ("HPICF-AMP-SERVER-MIB", "hpicfArubaVPNConfigGroup"), ("HPICF-AMP-SERVER-MIB", "hpicfDefaultGatewayGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfAMPServerMIBCompliance1 = hpicfAMPServerMIBCompliance1.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfAMPServerMIBCompliance1.setDescription('The compliance statement for HP switches implementing the HPICF-AMP-SERVER MIB.')
hpicfAMPServerMIBCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 125, 2, 1, 3)).setObjects(("HPICF-AMP-SERVER-MIB", "hpicfAMPServerConfigGroup"), ("HPICF-AMP-SERVER-MIB", "hpicfArubaVPNConfigGroup1"), ("HPICF-AMP-SERVER-MIB", "hpicfDefaultGatewayGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfAMPServerMIBCompliance2 = hpicfAMPServerMIBCompliance2.setStatus('current')
if mibBuilder.loadTexts: hpicfAMPServerMIBCompliance2.setDescription('The compliance statement for HP switches implementing the HPICF-AMP-SERVER MIB.')
hpicfAMPServerConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 125, 2, 2, 1)).setObjects(("HPICF-AMP-SERVER-MIB", "hpicfAMPServerIP"), ("HPICF-AMP-SERVER-MIB", "hpicfAMPServerIPType"), ("HPICF-AMP-SERVER-MIB", "hpicfAMPServerGroup"), ("HPICF-AMP-SERVER-MIB", "hpicfAMPServerFolder"), ("HPICF-AMP-SERVER-MIB", "hpicfAMPServerSecret"), ("HPICF-AMP-SERVER-MIB", "hpicfAMPServerConfigStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfAMPServerConfigGroup = hpicfAMPServerConfigGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfAMPServerConfigGroup.setDescription('A collection of objects to support the AMP server.')
hpicfArubaVPNConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 125, 2, 2, 2)).setObjects(("HPICF-AMP-SERVER-MIB", "hpicfArubaVPNRowStatus"), ("HPICF-AMP-SERVER-MIB", "hpicfArubaVPNIPType"), ("HPICF-AMP-SERVER-MIB", "hpicfArubaVPNIP"), ("HPICF-AMP-SERVER-MIB", "hpicfArubaVPNTos"), ("HPICF-AMP-SERVER-MIB", "hpicfArubaVPNTtl"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfArubaVPNConfigGroup = hpicfArubaVPNConfigGroup.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfArubaVPNConfigGroup.setDescription('A collection of objects to support the Controller.')
hpicfDefaultGatewayGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 125, 2, 2, 3)).setObjects(("HPICF-AMP-SERVER-MIB", "hpicfArubaVPNGateway"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDefaultGatewayGroup = hpicfDefaultGatewayGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfDefaultGatewayGroup.setDescription('A collection of objects to support default gateway.')
hpicfArubaVPNConfigGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 125, 2, 2, 4)).setObjects(("HPICF-AMP-SERVER-MIB", "hpicfArubaVPNRowStatus"), ("HPICF-AMP-SERVER-MIB", "hpicfArubaVPNIPType"), ("HPICF-AMP-SERVER-MIB", "hpicfArubaVPNIP"), ("HPICF-AMP-SERVER-MIB", "hpicfArubaVPNTos"), ("HPICF-AMP-SERVER-MIB", "hpicfArubaVPNTtl"), ("HPICF-AMP-SERVER-MIB", "hpicfArubaVPNBkpIPType"), ("HPICF-AMP-SERVER-MIB", "hpicfArubaVPNBkpIP"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfArubaVPNConfigGroup1 = hpicfArubaVPNConfigGroup1.setStatus('current')
if mibBuilder.loadTexts: hpicfArubaVPNConfigGroup1.setDescription('A collection of objects to support the Controller.')
mibBuilder.exportSymbols("HPICF-AMP-SERVER-MIB", hpicfAMPServerIPType=hpicfAMPServerIPType, hpicfArubaVPNTable=hpicfArubaVPNTable, hpicfAMPServerFolder=hpicfAMPServerFolder, HpicfArubaVPNType=HpicfArubaVPNType, hpicfAMPServerSecret=hpicfAMPServerSecret, hpicfAMPServerConfigStatus=hpicfAMPServerConfigStatus, hpicfArubaVPNConfigGroup1=hpicfArubaVPNConfigGroup1, hpicfAMPServerIP=hpicfAMPServerIP, hpicfArubaVPNIPType=hpicfArubaVPNIPType, hpicfArubaVPNIP=hpicfArubaVPNIP, hpicfAMPServerMIBCompliances=hpicfAMPServerMIBCompliances, hpicfArubaVPNObjects=hpicfArubaVPNObjects, hpicfAMPServerGroup=hpicfAMPServerGroup, hpicfArubaVPNConfigGroup=hpicfArubaVPNConfigGroup, hpicfArubaVPNBkpIP=hpicfArubaVPNBkpIP, hpicfArubaVPNIndex=hpicfArubaVPNIndex, hpicfArubaVPNTtl=hpicfArubaVPNTtl, hpicfArubaVPNBkpIPType=hpicfArubaVPNBkpIPType, hpicfAMPServerConformance=hpicfAMPServerConformance, hpicfAMPServerMIB=hpicfAMPServerMIB, PYSNMP_MODULE_ID=hpicfAMPServerMIB, hpicfArubaVPNRowStatus=hpicfArubaVPNRowStatus, hpicfArubaVPNTos=hpicfArubaVPNTos, hpicfAMPServerMIBCompliance1=hpicfAMPServerMIBCompliance1, hpicfArubaVPNGateway=hpicfArubaVPNGateway, hpicfAMPServerObjects=hpicfAMPServerObjects, hpicfAMPServerMIBGroups=hpicfAMPServerMIBGroups, hpicfDefaultGatewayGroup=hpicfDefaultGatewayGroup, hpicfAMPServerMIBCompliance=hpicfAMPServerMIBCompliance, hpicfAMPServerConfigGroup=hpicfAMPServerConfigGroup, hpicfArubaVPNEntry=hpicfArubaVPNEntry, hpicfArubaVPNDefaultGateway=hpicfArubaVPNDefaultGateway, hpicfAMPServerMIBCompliance2=hpicfAMPServerMIBCompliance2)
