#
# PySNMP MIB module AIPPP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/AIPPP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:16:11 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, Gauge32, IpAddress, TimeTicks, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, enterprises, Counter32, ObjectIdentity, NotificationType, Unsigned32, iso, Integer32, Counter64, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Gauge32", "IpAddress", "TimeTicks", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "enterprises", "Counter32", "ObjectIdentity", "NotificationType", "Unsigned32", "iso", "Integer32", "Counter64", "MibIdentifier")
TextualConvention, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "TruthValue")
class PositiveInteger(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 2147483647)

aii = MibIdentifier((1, 3, 6, 1, 4, 1, 539))
aiPPP = ModuleIdentity((1, 3, 6, 1, 4, 1, 539, 25))
if mibBuilder.loadTexts: aiPPP.setLastUpdated('9909151700Z')
if mibBuilder.loadTexts: aiPPP.setOrganization('Applied Innovation Inc.')
if mibBuilder.loadTexts: aiPPP.setContactInfo('Engineering MIB Administrator Postal: Applied Innovation Inc. 5800 Innovation Drive Dublin, Ohio 43017-3271 Tel: 614-798-2000 Fax: 614-798-1770 Email: snmp@aiinet.com')
if mibBuilder.loadTexts: aiPPP.setDescription('MIB module for PPP options not covered in the standard PPP MIBS')
aiPPPTable = MibTable((1, 3, 6, 1, 4, 1, 539, 25, 1), )
if mibBuilder.loadTexts: aiPPPTable.setStatus('current')
if mibBuilder.loadTexts: aiPPPTable.setDescription('Table of PPP information indexed by link number. Includes enable/disable for each NCP Type (IPCP and BCP), and IP interface parameters.')
aiPPPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 539, 25, 1, 1), ).setIndexNames((0, "AIPPP-MIB", "aipppLinkNumber"))
if mibBuilder.loadTexts: aiPPPEntry.setStatus('current')
if mibBuilder.loadTexts: aiPPPEntry.setDescription('Entry of aiPPPTable.')
aipppLinkNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 25, 1, 1, 1), PositiveInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aipppLinkNumber.setStatus('current')
if mibBuilder.loadTexts: aipppLinkNumber.setDescription('Link number to which this table row applies.')
aipppNCPProtoOption = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 25, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ipcp", 1), ("bcp", 2), ("ipcpbcp", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aipppNCPProtoOption.setStatus('current')
if mibBuilder.loadTexts: aipppNCPProtoOption.setDescription('NCP Protocol(s) option for this link: ipcp(1): Link will attempt to negotiate IPCP bcp(2): Link will attempt to negotiate BCP. ipcp_bcp(3): Link will attempt to negotiate IPCP and BCP.')
aipppLocalSecurityOption = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 25, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("pap", 2), ("chap", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aipppLocalSecurityOption.setStatus('current')
if mibBuilder.loadTexts: aipppLocalSecurityOption.setDescription('Authentication protocol enabled for this link: none(1): Link will not attempt authentication. pap(2): Link will attempt PAP authentication. chap(3): Link will attempt CHAP authentication.')
aipppIpSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 25, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aipppIpSrcAddr.setStatus('current')
if mibBuilder.loadTexts: aipppIpSrcAddr.setDescription('The source IP address for the IP interface.')
aipppIpDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 25, 1, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aipppIpDestAddr.setStatus('current')
if mibBuilder.loadTexts: aipppIpDestAddr.setDescription('The destination IP address for the IP interface.')
aipppIpSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 25, 1, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aipppIpSubnetMask.setStatus('current')
if mibBuilder.loadTexts: aipppIpSubnetMask.setDescription('The subnet mask associated with the IP address of this entry. The value of the mask is an IP address with all the network bits set to 1 and all the hosts bits set to 0.')
aipppIpBcastAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 25, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aipppIpBcastAddr.setStatus('current')
if mibBuilder.loadTexts: aipppIpBcastAddr.setDescription('The value of the least-significant bit in the IP broadcast address used for sending datagrams on the (logical) interface associated with the IP address of this entry. For example, when the Internet standard all-ones broadcast address is used, the value will be 1. This value applies to both the subnet and network broadcast addresses used by the entity on this (logical) interface.')
aipppLocalRadiusOption = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 25, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("localfallback", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aipppLocalRadiusOption.setStatus('current')
if mibBuilder.loadTexts: aipppLocalRadiusOption.setDescription('Authentication protocol enabled for this link: disabled(1): Authenticate using local security settings for the link. enabled(2): Authenticate using remote Radius server(s), and if Radius server(s) do not respond, the connection will fail. localfallback(3): Authenticate using remote Radius server(s), and if Radius server(s) do not respond, authentication will be attempted using local security settings for the link.')
aipppRemoteSecurityOption = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 25, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("pap", 2), ("chap", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aipppRemoteSecurityOption.setStatus('current')
if mibBuilder.loadTexts: aipppRemoteSecurityOption.setDescription('Authentication protocol enabled for this link: none(1): Link will not attempt authentication. pap(2): Link will attempt PAP authentication. chap(3): Link will attempt CHAP authentication.')
aipppMultilinkOption = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 25, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reject", 1), ("request", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aipppMultilinkOption.setStatus('current')
if mibBuilder.loadTexts: aipppMultilinkOption.setDescription('Multilink options for this link: reject(1): Attempts from the remote host to configure this link as a bundled link will be rejected. request(2): The host will request that this link be bundled with other links with the same multilink group identifier.')
aipppMLGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 25, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aipppMLGroup.setStatus('current')
if mibBuilder.loadTexts: aipppMLGroup.setDescription('The multilink group to assign this link to. Links with the same multilink group identifier will be bundled together.')
mibBuilder.exportSymbols("AIPPP-MIB", aiPPP=aiPPP, aiPPPTable=aiPPPTable, aipppIpDestAddr=aipppIpDestAddr, aipppNCPProtoOption=aipppNCPProtoOption, PYSNMP_MODULE_ID=aiPPP, aipppIpSrcAddr=aipppIpSrcAddr, aipppLinkNumber=aipppLinkNumber, aipppIpBcastAddr=aipppIpBcastAddr, aipppMultilinkOption=aipppMultilinkOption, aiPPPEntry=aiPPPEntry, aii=aii, aipppLocalSecurityOption=aipppLocalSecurityOption, aipppMLGroup=aipppMLGroup, aipppLocalRadiusOption=aipppLocalRadiusOption, PositiveInteger=PositiveInteger, aipppIpSubnetMask=aipppIpSubnetMask, aipppRemoteSecurityOption=aipppRemoteSecurityOption)
