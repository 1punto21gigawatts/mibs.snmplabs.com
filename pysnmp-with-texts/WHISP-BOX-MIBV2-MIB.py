#
# PySNMP MIB module WHISP-BOX-MIBV2-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/WHISP-BOX-MIBV2-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:36:25 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
ModuleIdentity, Counter64, ObjectIdentity, Integer32, Gauge32, Bits, Unsigned32, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, NotificationType, IpAddress, MibIdentifier, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Counter64", "ObjectIdentity", "Integer32", "Gauge32", "Bits", "Unsigned32", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "NotificationType", "IpAddress", "MibIdentifier", "TimeTicks")
DisplayString, MacAddress, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "MacAddress", "TextualConvention")
whispBox, whispModules = mibBuilder.importSymbols("WHISP-GLOBAL-REG-MIB", "whispBox", "whispModules")
WhispLUID, EventString, WhispMACAddress = mibBuilder.importSymbols("WHISP-TCV2-MIB", "WhispLUID", "EventString", "WhispMACAddress")
whispBoxLevelMibModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 161, 19, 1, 1, 8))
if mibBuilder.loadTexts: whispBoxLevelMibModule.setLastUpdated('200304150000Z')
if mibBuilder.loadTexts: whispBoxLevelMibModule.setOrganization('Cambium Networks')
if mibBuilder.loadTexts: whispBoxLevelMibModule.setContactInfo('Canopy Technical Support email: technical-support@canopywireless.com')
if mibBuilder.loadTexts: whispBoxLevelMibModule.setDescription('This module contains generic Box-Level MIB definitions for Canopy Radios.')
whispBoxStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1))
whispBoxConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2))
whispBoxControls = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 3))
whispBoxEventLog = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 5))
whispBoxConf = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 6))
whispBoxGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 6, 1))
whispBoxBridgeVar = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 7))
whispBoxCPVar = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9))
whispBoxEvent = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 12))
whispBoxDHCPClientEvent = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 12, 1))
whispBoxDNS = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 13))
whispBoxRFPhysical = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 15))
whispBoxRFConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 16))
whispBoxSoftwareVer = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: whispBoxSoftwareVer.setStatus('current')
if mibBuilder.loadTexts: whispBoxSoftwareVer.setDescription('Version of software. Should be noted in the event customer has technical difficulties and need to contact technical support.')
whispBoxFPGAVer = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: whispBoxFPGAVer.setStatus('current')
if mibBuilder.loadTexts: whispBoxFPGAVer.setDescription('Version of FPGA.')
whispBoxEsn = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: whispBoxEsn.setStatus('current')
if mibBuilder.loadTexts: whispBoxEsn.setDescription('Electronic serial number(MAC address) assigned to Radio.')
whispBoxBoot = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: whispBoxBoot.setStatus('current')
if mibBuilder.loadTexts: whispBoxBoot.setDescription('Software boot version.')
boxTemperature = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boxTemperature.setStatus('obsolete')
if mibBuilder.loadTexts: boxTemperature.setDescription('Radio temperature.')
boxDeviceType = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boxDeviceType.setStatus('current')
if mibBuilder.loadTexts: boxDeviceType.setDescription('The type of the device.')
boxDeviceTypeID = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boxDeviceTypeID.setStatus('current')
if mibBuilder.loadTexts: boxDeviceTypeID.setDescription('Device type ID.')
boxEncryption = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boxEncryption.setStatus('current')
if mibBuilder.loadTexts: boxEncryption.setDescription('Device encryption type.')
etherLinkStatus = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherLinkStatus.setStatus('current')
if mibBuilder.loadTexts: etherLinkStatus.setDescription('Ethernet link status.')
boxFrequency = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boxFrequency.setStatus('current')
if mibBuilder.loadTexts: boxFrequency.setDescription('Frequency band of the device.')
platformVer = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: platformVer.setStatus('current')
if mibBuilder.loadTexts: platformVer.setDescription('Hardware platform version. For internal use.')
platformType = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: platformType.setStatus('current')
if mibBuilder.loadTexts: platformType.setDescription('Platform type: Canopy, Canopy Lite, Canopy Lite - Advantage, Advantage, Russian, Russian - Advantage.')
dhcpLanIp = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 13), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpLanIp.setStatus('current')
if mibBuilder.loadTexts: dhcpLanIp.setDescription('LAN interface IP obtained through DHCP.')
dhcpLanSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 14), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpLanSubnetMask.setStatus('current')
if mibBuilder.loadTexts: dhcpLanSubnetMask.setDescription('LAN interface Subnet Mask obtained through DHCP.')
dhcpLanGateway = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 15), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpLanGateway.setStatus('current')
if mibBuilder.loadTexts: dhcpLanGateway.setDescription('LAN interface Gateway obtained through DHCP.')
dhcpRfPublicIp = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 16), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpRfPublicIp.setStatus('current')
if mibBuilder.loadTexts: dhcpRfPublicIp.setDescription('RF Public interface IP obtained through DHCP.')
dhcpRfPublicSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 17), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpRfPublicSubnetMask.setStatus('current')
if mibBuilder.loadTexts: dhcpRfPublicSubnetMask.setDescription('RF Public interface Subnet Mask obtained through DHCP.')
dhcpRfPublicGateway = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 18), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpRfPublicGateway.setStatus('current')
if mibBuilder.loadTexts: dhcpRfPublicGateway.setDescription('RF Public interface Gateway obtained through DHCP.')
lanDhcpStatus = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanDhcpStatus.setStatus('current')
if mibBuilder.loadTexts: lanDhcpStatus.setDescription('Display LAN interface current DHPC status.')
rfPublicDhcpStatus = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfPublicDhcpStatus.setStatus('current')
if mibBuilder.loadTexts: rfPublicDhcpStatus.setDescription('Display RF Public interface current DHPC status.')
inSyncCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inSyncCount.setStatus('current')
if mibBuilder.loadTexts: inSyncCount.setDescription('Counter for number of In Synchronization.')
outSyncCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outSyncCount.setStatus('current')
if mibBuilder.loadTexts: outSyncCount.setDescription('Counter for number of Out of Synchronization.')
pllOutLockCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pllOutLockCount.setStatus('current')
if mibBuilder.loadTexts: pllOutLockCount.setDescription('Counter for number of PLL out of Lock.')
txCalFailure = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txCalFailure.setStatus('current')
if mibBuilder.loadTexts: txCalFailure.setDescription('Counter for number of TX Calibration failure.')
swVersion = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 25), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swVersion.setStatus('current')
if mibBuilder.loadTexts: swVersion.setDescription('Software version information.')
pldVersion = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 26), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pldVersion.setStatus('current')
if mibBuilder.loadTexts: pldVersion.setDescription('PLD version information.')
platformInfo = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 27), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: platformInfo.setStatus('current')
if mibBuilder.loadTexts: platformInfo.setDescription('Platform information.')
antPolarization = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 28), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: antPolarization.setStatus('current')
if mibBuilder.loadTexts: antPolarization.setDescription('Antenna polarization for FSK radios.')
packetOverloadCounter = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: packetOverloadCounter.setStatus('current')
if mibBuilder.loadTexts: packetOverloadCounter.setDescription('Total packet overload count.')
whispBoxP11Personality = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 30), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: whispBoxP11Personality.setStatus('current')
if mibBuilder.loadTexts: whispBoxP11Personality.setDescription('Board Personality Configuration of P11 and P12 radios.')
whispBoxP11FPGAType = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 31), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: whispBoxP11FPGAType.setStatus('current')
if mibBuilder.loadTexts: whispBoxP11FPGAType.setDescription('FPGA Type on P11 and P12 radios.')
whispBoxP11BstrapFPGAVer = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 32), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: whispBoxP11BstrapFPGAVer.setStatus('current')
if mibBuilder.loadTexts: whispBoxP11BstrapFPGAVer.setDescription('P11 Bootstrap FPGA Version.')
numDFSDetections = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numDFSDetections.setStatus('current')
if mibBuilder.loadTexts: numDFSDetections.setDescription('Number of DFS/LBT Detections since last boot.')
rxOverrunPkts = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxOverrunPkts.setStatus('current')
if mibBuilder.loadTexts: rxOverrunPkts.setDescription('Counter for number of received overrun packets error.')
boxTemperatureC = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boxTemperatureC.setStatus('current')
if mibBuilder.loadTexts: boxTemperatureC.setDescription('Radio temperature in Celsius.')
boxTemperatureF = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boxTemperatureF.setStatus('current')
if mibBuilder.loadTexts: boxTemperatureF.setDescription('Radio temperature in Fahrenheit.')
bridgeCbFecStatbin = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeCbFecStatbin.setStatus('current')
if mibBuilder.loadTexts: bridgeCbFecStatbin.setDescription('Bridge CB FEC Stats bin')
bridgeCbFecStatbout = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeCbFecStatbout.setStatus('current')
if mibBuilder.loadTexts: bridgeCbFecStatbout.setDescription('Bridge CB FEC Stats bout')
bridgeCbFecStatbtoss = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeCbFecStatbtoss.setStatus('current')
if mibBuilder.loadTexts: bridgeCbFecStatbtoss.setDescription('Bridge CB FEC Stats btoss')
bridgeCbFecStatbtosscap = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeCbFecStatbtosscap.setStatus('current')
if mibBuilder.loadTexts: bridgeCbFecStatbtosscap.setDescription('Bridge CB FEC Stats btosscap')
bridgeCbFecStatuin = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeCbFecStatuin.setStatus('current')
if mibBuilder.loadTexts: bridgeCbFecStatuin.setDescription('Bridge CB FEC Stats uin')
bridgeCbFecStatuout = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeCbFecStatuout.setStatus('current')
if mibBuilder.loadTexts: bridgeCbFecStatuout.setDescription('Bridge CB FEC Stats uout')
bridgeCbFecStatutoss = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeCbFecStatutoss.setStatus('current')
if mibBuilder.loadTexts: bridgeCbFecStatutoss.setDescription('Bridge CB FEC Stats utoss')
bridgeCbFecStatutosscap = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeCbFecStatutosscap.setStatus('current')
if mibBuilder.loadTexts: bridgeCbFecStatutosscap.setDescription('Bridge CB FEC Stats utosscap')
bridgeCbRFStatbin = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeCbRFStatbin.setStatus('current')
if mibBuilder.loadTexts: bridgeCbRFStatbin.setDescription('Bridge CB RF Stats bin')
bridgeCbRFStatbout = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeCbRFStatbout.setStatus('current')
if mibBuilder.loadTexts: bridgeCbRFStatbout.setDescription('Bridge CB RF Stats bout')
bridgeCbRFStatbtoss = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeCbRFStatbtoss.setStatus('current')
if mibBuilder.loadTexts: bridgeCbRFStatbtoss.setDescription('Bridge CB RF Stats btoss')
bridgeCbRFStatbtosscap = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeCbRFStatbtosscap.setStatus('current')
if mibBuilder.loadTexts: bridgeCbRFStatbtosscap.setDescription('Bridge CB RF Stats btosscap')
bridgeCbRFStatuin = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeCbRFStatuin.setStatus('current')
if mibBuilder.loadTexts: bridgeCbRFStatuin.setDescription('Bridge CB RF Stats uin')
bridgeCbRFStatuout = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeCbRFStatuout.setStatus('current')
if mibBuilder.loadTexts: bridgeCbRFStatuout.setDescription('Bridge CB RF Stats uout')
bridgeCbRFStatutoss = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeCbRFStatutoss.setStatus('current')
if mibBuilder.loadTexts: bridgeCbRFStatutoss.setDescription('Bridge CB RF Stats utoss')
bridgeCbRFStatutosscap = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeCbRFStatutosscap.setStatus('current')
if mibBuilder.loadTexts: bridgeCbRFStatutosscap.setDescription('Bridge CB RF Stats utosscap')
bridgeCbErrStatNI1QSend = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeCbErrStatNI1QSend.setStatus('current')
if mibBuilder.loadTexts: bridgeCbErrStatNI1QSend.setDescription('Bridge CB Error Stats ErrNI1QSend')
bridgeCbErrStatNI2QSend = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeCbErrStatNI2QSend.setStatus('current')
if mibBuilder.loadTexts: bridgeCbErrStatNI2QSend.setDescription('Bridge CB Error Stats ErrNI2QSend')
bridgeCbErrStatBridgeFull = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeCbErrStatBridgeFull.setStatus('current')
if mibBuilder.loadTexts: bridgeCbErrStatBridgeFull.setDescription('Bridge CB Error Stats BridgeFull')
bridgeCbErrStatSendMsg = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeCbErrStatSendMsg.setStatus('current')
if mibBuilder.loadTexts: bridgeCbErrStatSendMsg.setDescription('Bridge CB Error Stats SendMsg')
bridgeCbErrStatAPFecQSend = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 57), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeCbErrStatAPFecQSend.setStatus('current')
if mibBuilder.loadTexts: bridgeCbErrStatAPFecQSend.setDescription('Bridge CB Error Stats APFecQSend')
bridgeCbErrStatApRfQSend = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 58), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeCbErrStatApRfQSend.setStatus('current')
if mibBuilder.loadTexts: bridgeCbErrStatApRfQSend.setDescription('Bridge CB Error Stats ApRfQSend')
rfStatXmtUDataCnt = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 59), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfStatXmtUDataCnt.setStatus('current')
if mibBuilder.loadTexts: rfStatXmtUDataCnt.setDescription('RF Scheduler Stats Transmit Unicast Data Count')
rfStatXmtBDataCnt = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfStatXmtBDataCnt.setStatus('current')
if mibBuilder.loadTexts: rfStatXmtBDataCnt.setDescription('RF Scheduler Stats Transmit Broadcast Data Count')
rfStatRcvUDataCnt = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 61), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfStatRcvUDataCnt.setStatus('current')
if mibBuilder.loadTexts: rfStatRcvUDataCnt.setDescription('RF Scheduler Stats Receive Unicast Data Count')
rfStatRcvBDataCnt = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 62), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfStatRcvBDataCnt.setStatus('current')
if mibBuilder.loadTexts: rfStatRcvBDataCnt.setDescription('RF Scheduler Stats Receive Broadcast Data Count')
rfStatXmtCntlCnt = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 63), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfStatXmtCntlCnt.setStatus('current')
if mibBuilder.loadTexts: rfStatXmtCntlCnt.setDescription('RF Scheduler Stats Transmit Control Count')
rfStatRcvCntlCnt = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 64), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfStatRcvCntlCnt.setStatus('current')
if mibBuilder.loadTexts: rfStatRcvCntlCnt.setDescription('RF Scheduler Stats Receive Control Count')
rfStatInSyncCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 65), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfStatInSyncCount.setStatus('current')
if mibBuilder.loadTexts: rfStatInSyncCount.setDescription('RF Scheduler Stats In Sync Count')
rfStatOutSyncCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 66), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfStatOutSyncCount.setStatus('current')
if mibBuilder.loadTexts: rfStatOutSyncCount.setDescription('RF Scheduler Stats Out Sync Count')
rfStatOverrunCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 67), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfStatOverrunCount.setStatus('current')
if mibBuilder.loadTexts: rfStatOverrunCount.setDescription('RF Scheduler Stats Overrun Count')
rfStatUnderrunCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 68), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfStatUnderrunCount.setStatus('current')
if mibBuilder.loadTexts: rfStatUnderrunCount.setDescription('RF Scheduler Stats Underrun Count')
rfStatRcvCorruptDataCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 69), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfStatRcvCorruptDataCount.setStatus('current')
if mibBuilder.loadTexts: rfStatRcvCorruptDataCount.setDescription('RF Scheduler Stats Receive Corrupt Data Count')
rfStatBadBcastCtlCnt = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 70), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfStatBadBcastCtlCnt.setStatus('current')
if mibBuilder.loadTexts: rfStatBadBcastCtlCnt.setDescription('RF Scheduler Stats Bad Broadcast Control Count')
rfStatPLLOutOfLockCnt = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 71), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfStatPLLOutOfLockCnt.setStatus('current')
if mibBuilder.loadTexts: rfStatPLLOutOfLockCnt.setDescription('RF Scheduler Stats PLL Out of Lock Count')
rfStatBeaconVerMismatchCnt = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 72), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfStatBeaconVerMismatchCnt.setStatus('current')
if mibBuilder.loadTexts: rfStatBeaconVerMismatchCnt.setDescription('RF Scheduler Stats Beacon version Mismatch Count')
rfStatBadFreqBcnRcvCnt = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 73), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfStatBadFreqBcnRcvCnt.setStatus('current')
if mibBuilder.loadTexts: rfStatBadFreqBcnRcvCnt.setDescription('RF Scheduler Stats Wrong Frequency Beacon Received Count')
rfStatnonLiteBcnRcvCnt = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 74), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfStatnonLiteBcnRcvCnt.setStatus('current')
if mibBuilder.loadTexts: rfStatnonLiteBcnRcvCnt.setDescription('RF Scheduler Stats Non Lite Beacon Received Count')
rfStatUnsupFeatBcnRcvCnt = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 75), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfStatUnsupFeatBcnRcvCnt.setStatus('current')
if mibBuilder.loadTexts: rfStatUnsupFeatBcnRcvCnt.setDescription('RF Scheduler Stats Unsupported Feature Beacon Received Count')
rfStatUnkwnFeatBcnRcvCnt = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 76), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfStatUnkwnFeatBcnRcvCnt.setStatus('current')
if mibBuilder.loadTexts: rfStatUnkwnFeatBcnRcvCnt.setDescription('RF Scheduler Stats Unknown Feature Beacon Received Count')
rfStatTxCalFailCnt = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 77), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfStatTxCalFailCnt.setStatus('current')
if mibBuilder.loadTexts: rfStatTxCalFailCnt.setDescription('RF Scheduler Stats TX Calibration Failures Count')
rfStatBadInSyncIDRcv = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 78), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfStatBadInSyncIDRcv.setStatus('current')
if mibBuilder.loadTexts: rfStatBadInSyncIDRcv.setDescription('RF Scheduler Stats Bad In Sync ID Received Count')
rfStatTempOutOfRange = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 79), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfStatTempOutOfRange.setStatus('current')
if mibBuilder.loadTexts: rfStatTempOutOfRange.setDescription('RF Scheduler Stats Temperature Out of Range Count')
rfStatRSSIOutOfRange = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 80), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfStatRSSIOutOfRange.setStatus('current')
if mibBuilder.loadTexts: rfStatRSSIOutOfRange.setDescription('RF Scheduler Stats RSSI Out of Range Count')
rfStatRangeCapEnf = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 81), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfStatRangeCapEnf.setStatus('current')
if mibBuilder.loadTexts: rfStatRangeCapEnf.setDescription('RF Scheduler Stats Range Cap Enforced Count')
rfStatRcvLTStart = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 82), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfStatRcvLTStart.setStatus('current')
if mibBuilder.loadTexts: rfStatRcvLTStart.setDescription('RF Scheduler Stats Rcv LT Start Count')
rfStatRcvLTStartHS = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 83), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfStatRcvLTStartHS.setStatus('current')
if mibBuilder.loadTexts: rfStatRcvLTStartHS.setDescription('RF Scheduler Stats Rcv LT Start HS Count')
rfStatRcvLTResult = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 84), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfStatRcvLTResult.setStatus('current')
if mibBuilder.loadTexts: rfStatRcvLTResult.setDescription('RF Scheduler Stats Rcv LT Result Count')
rfStatXmtLTResult = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 85), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfStatXmtLTResult.setStatus('current')
if mibBuilder.loadTexts: rfStatXmtLTResult.setDescription('RF Scheduler Stats Xmt LT Result Count')
whispFeatureKeyOrigin = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 86), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: whispFeatureKeyOrigin.setStatus('current')
if mibBuilder.loadTexts: whispFeatureKeyOrigin.setDescription('Origin of Feature Key which includes GMT time and location of the Key programming (if time is 0 the key was converted locally)')
radioMSN = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 87), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioMSN.setStatus('current')
if mibBuilder.loadTexts: radioMSN.setDescription('MSN of the radio.')
updateStatus = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 88), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: updateStatus.setStatus('current')
if mibBuilder.loadTexts: updateStatus.setDescription('Current Status of Device Update')
syslogStatTxSuccesses = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 89), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: syslogStatTxSuccesses.setStatus('current')
if mibBuilder.loadTexts: syslogStatTxSuccesses.setDescription('The count of Syslog messages sent to UDP layer.')
syslogStatDropped = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 90), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: syslogStatDropped.setStatus('current')
if mibBuilder.loadTexts: syslogStatDropped.setDescription('Number of dropped syslog messages due to device overload and/or resource limitations.')
fecStatLinkLost = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 91), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fecStatLinkLost.setStatus('current')
if mibBuilder.loadTexts: fecStatLinkLost.setDescription('Ethernet link lost count')
fecStatLinkDetected = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 92), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fecStatLinkDetected.setStatus('current')
if mibBuilder.loadTexts: fecStatLinkDetected.setDescription('Ethernet link detected count')
natDhcpStatus = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 93), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: natDhcpStatus.setStatus('current')
if mibBuilder.loadTexts: natDhcpStatus.setDescription('Display NAT Public interface current DHPC status.')
fecInDiscardsCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 94), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fecInDiscardsCount.setStatus('current')
if mibBuilder.loadTexts: fecInDiscardsCount.setDescription('Ethernet in discards count.')
fecInErrorsCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 95), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fecInErrorsCount.setStatus('current')
if mibBuilder.loadTexts: fecInErrorsCount.setDescription('Ethernet in errors count.')
fecOutDiscardsCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 96), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fecOutDiscardsCount.setStatus('current')
if mibBuilder.loadTexts: fecOutDiscardsCount.setDescription('Ethernet out discards count.')
fecOutErrorsCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 97), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fecOutErrorsCount.setStatus('current')
if mibBuilder.loadTexts: fecOutErrorsCount.setDescription('Ethernet out errors count.')
rfInDiscardsCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 98), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfInDiscardsCount.setStatus('current')
if mibBuilder.loadTexts: rfInDiscardsCount.setDescription('RF in discards count.')
rfInErrorsCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 99), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfInErrorsCount.setStatus('current')
if mibBuilder.loadTexts: rfInErrorsCount.setDescription('RF in errors count.')
rfOutDiscardsCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 100), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfOutDiscardsCount.setStatus('current')
if mibBuilder.loadTexts: rfOutDiscardsCount.setDescription('RF out discards count.')
rfOutErrorsCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 101), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfOutErrorsCount.setStatus('current')
if mibBuilder.loadTexts: rfOutErrorsCount.setDescription('RF out errors count.')
fecInDiscardsOverloadCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 102), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fecInDiscardsOverloadCount.setStatus('current')
if mibBuilder.loadTexts: fecInDiscardsOverloadCount.setDescription('Ethernet in discards overload.')
fecOutDiscardsOverloadCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 103), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fecOutDiscardsOverloadCount.setStatus('current')
if mibBuilder.loadTexts: fecOutDiscardsOverloadCount.setDescription('Ethernet out discards overload.')
rfInDiscardsOverloadCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 104), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfInDiscardsOverloadCount.setStatus('current')
if mibBuilder.loadTexts: rfInDiscardsOverloadCount.setDescription('Rf in discards overload.')
rfOutDiscardsOverloadCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 105), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfOutDiscardsOverloadCount.setStatus('current')
if mibBuilder.loadTexts: rfOutDiscardsOverloadCount.setDescription('Rf out discards overload.')
fpgaCompileInfo = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 106), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpgaCompileInfo.setStatus('current')
if mibBuilder.loadTexts: fpgaCompileInfo.setDescription('Display the fpga compiled attributes. (Engineering Only)')
fpgaBuildDate = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 107), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpgaBuildDate.setStatus('current')
if mibBuilder.loadTexts: fpgaBuildDate.setDescription('Display the entire fpga build date string. (Engineering Only)')
aggregateBandwidthCap = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 108), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggregateBandwidthCap.setStatus('current')
if mibBuilder.loadTexts: aggregateBandwidthCap.setDescription('The maximum aggregate (uplink + downlink) the radio is capable of.')
calibrationStatusBool = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 109), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notCalibrated", 0), ("calibrated", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: calibrationStatusBool.setStatus('current')
if mibBuilder.loadTexts: calibrationStatusBool.setDescription('Boolean OID to show if device is calibrated. Applicable to FSK and MIMO radios only.')
calibrationStatusBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 110), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: calibrationStatusBox.setStatus('current')
if mibBuilder.loadTexts: calibrationStatusBox.setDescription('String to show if radio is calibrated. Applicable to FSK and MIMO radios only.')
radioEngKeyed = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 111), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioEngKeyed.setStatus('current')
if mibBuilder.loadTexts: radioEngKeyed.setDescription('This will be set either as 0 if the engineering key patch is not applied to the radio or 1 if it is applied.')
bridgeCbFecStatfloods = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 112), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeCbFecStatfloods.setStatus('current')
if mibBuilder.loadTexts: bridgeCbFecStatfloods.setDescription('Bridge CB RF Stats Floods (Multipoint AP only)')
bridgeCbRFStatfloods = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 113), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeCbRFStatfloods.setStatus('current')
if mibBuilder.loadTexts: bridgeCbRFStatfloods.setDescription('Bridge CB RF Stats Floods (Multipoint AP only)')
agcGainRxCH1 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 114), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agcGainRxCH1.setStatus('current')
if mibBuilder.loadTexts: agcGainRxCH1.setDescription('Rcv Gain on Catalina Rx CH1 of SM.')
agcGainRxCH2 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 115), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agcGainRxCH2.setStatus('current')
if mibBuilder.loadTexts: agcGainRxCH2.setDescription('Rcv Gain on Catalina Rx CH2 of SM.')
antType = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 116), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("integrated", 0), ("external", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: antType.setStatus('current')
if mibBuilder.loadTexts: antType.setDescription('Indicates whether the antenna is integrated or external (connectorized).')
rfStatRcvCorruptControlCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 117), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfStatRcvCorruptControlCount.setStatus('current')
if mibBuilder.loadTexts: rfStatRcvCorruptControlCount.setDescription('RF Scheduler Stats Receive Corrupt Control Data Count')
rfStatXmtMDataCnt = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 217), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfStatXmtMDataCnt.setStatus('current')
if mibBuilder.loadTexts: rfStatXmtMDataCnt.setDescription('RF Scheduler Stats Transmit Multicast Data Count')
rfStatRcvMDataCnt = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 218), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfStatRcvMDataCnt.setStatus('current')
if mibBuilder.loadTexts: rfStatRcvMDataCnt.setDescription('RF Scheduler Stats Receive Multicast Data Count')
linkNegoSpeed = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkNegoSpeed.setStatus('obsolete')
if mibBuilder.loadTexts: linkNegoSpeed.setDescription('Link negotiation speeds. H10BT -- 10 Base T Half Duplex, F10BT -- 10 Base T Full Duplex, H100BT -- 100 Base T Half Duplex, F100BT -- 100 Base T Full Duplex. Separate the values with comma when doing a set. e.g. H10BT,F10BT,H100BT,F100BT')
colorCode = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: colorCode.setStatus('current')
if mibBuilder.loadTexts: colorCode.setDescription('Color code.')
displayOnlyAccess = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: displayOnlyAccess.setStatus('obsolete')
if mibBuilder.loadTexts: displayOnlyAccess.setDescription('This variable is deprecated.')
fullAccess = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fullAccess.setStatus('current')
if mibBuilder.loadTexts: fullAccess.setDescription('Full access password.')
webAutoUpdate = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 5), Integer32()).setUnits('Seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: webAutoUpdate.setStatus('current')
if mibBuilder.loadTexts: webAutoUpdate.setDescription('Web page auto update in seconds. 0 means disabled.')
pass1Status = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pass1Status.setStatus('current')
if mibBuilder.loadTexts: pass1Status.setDescription('Password 1(display only) status.')
pass2Status = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pass2Status.setStatus('current')
if mibBuilder.loadTexts: pass2Status.setDescription('Password 2(full access) status.')
bridgeEntryTimeout = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(25, 1440))).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeEntryTimeout.setStatus('current')
if mibBuilder.loadTexts: bridgeEntryTimeout.setDescription('Bridge table time out Range : 25 -- 1440 Minutes.')
snmpMibPerm = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("readWrite", 0), ("readOnly", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpMibPerm.setStatus('current')
if mibBuilder.loadTexts: snmpMibPerm.setDescription('Read/Write permission for MIB groups.')
bhTimingMode = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("timingMaster", 1), ("timeingSlave", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bhTimingMode.setStatus('current')
if mibBuilder.loadTexts: bhTimingMode.setDescription('Variable to switch between Timing Master and Timing Slave. For Backhaul units only.')
bhModulation = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("tenMbitsPerSecond", 0), ("twentyMbitsPerSecond", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bhModulation.setStatus('obsolete')
if mibBuilder.loadTexts: bhModulation.setDescription('Modulation scheme. For Backhaul units only. Only level 4 backhaul can be changed to 20Mbits/Second.')
powerControl = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("low", 0), ("normal", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerControl.setStatus('current')
if mibBuilder.loadTexts: powerControl.setDescription('Power control.')
extFilterDelay = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 13), Integer32()).setUnits('nanoseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: extFilterDelay.setStatus('current')
if mibBuilder.loadTexts: extFilterDelay.setDescription('External Filters Delay. For 900MHz radios only.')
antennaGain = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 14), Integer32()).setUnits('dBi').setMaxAccess("readwrite")
if mibBuilder.loadTexts: antennaGain.setStatus('current')
if mibBuilder.loadTexts: antennaGain.setDescription('External Antenna Gain. For radios that uses an external antenna or the DFS feature.')
eirp = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 15), Integer32()).setUnits('dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: eirp.setStatus('obsolete')
if mibBuilder.loadTexts: eirp.setDescription('This variable is deprecated.')
dynamicLearning = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dynamicLearning.setStatus('current')
if mibBuilder.loadTexts: dynamicLearning.setDescription('To enable VLAN dynamic learning.')
managementVID = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: managementVID.setStatus('current')
if mibBuilder.loadTexts: managementVID.setDescription('Management VLAN VID.')
agingTimeout = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agingTimeout.setStatus('current')
if mibBuilder.loadTexts: agingTimeout.setDescription('Aging timeout.')
frameType = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("allframes", 0), ("taggedonly", 1), ("untaggedonly", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frameType.setStatus('current')
if mibBuilder.loadTexts: frameType.setDescription('Allow only tagged frame.')
addVlanMember = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: addVlanMember.setStatus('current')
if mibBuilder.loadTexts: addVlanMember.setDescription('Add VLAN memeber.')
removeVlanMember = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: removeVlanMember.setStatus('current')
if mibBuilder.loadTexts: removeVlanMember.setDescription('Remove VLAN memeber.')
scheduling = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("hardware", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scheduling.setStatus('current')
if mibBuilder.loadTexts: scheduling.setDescription('To use hardware or software scheduling')
transmitterOP = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 23), Integer32()).setUnits('dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: transmitterOP.setStatus('current')
if mibBuilder.loadTexts: transmitterOP.setDescription('Transmitter output power. This is not available on OFDM SMs.')
bridgeEnable = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeEnable.setStatus('current')
if mibBuilder.loadTexts: bridgeEnable.setDescription('Disable or enable bridging functionality for a BH unit.')
fecEnable = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fecEnable.setStatus('current')
if mibBuilder.loadTexts: fecEnable.setDescription('Disable or enable FEC error correction functionality for multipoint units.')
trapIP1 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 26), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapIP1.setStatus('obsolete')
if mibBuilder.loadTexts: trapIP1.setDescription('Obsoleted. Configure with whispBoxDNS.trap1.')
trapIP2 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 27), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapIP2.setStatus('obsolete')
if mibBuilder.loadTexts: trapIP2.setDescription('Obsoleted. Configure with whispBoxDNS.trap2.')
trapIP3 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 28), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapIP3.setStatus('obsolete')
if mibBuilder.loadTexts: trapIP3.setDescription('Obsoleted. Configure with whispBoxDNS.trap3.')
trapIP4 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 29), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapIP4.setStatus('obsolete')
if mibBuilder.loadTexts: trapIP4.setDescription('Obsoleted. Configure with whispBoxDNS.trap4.')
trapIP5 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 30), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapIP5.setStatus('obsolete')
if mibBuilder.loadTexts: trapIP5.setDescription('Obsoleted. Configure with whispBoxDNS.trap5.')
trapIP6 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 31), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapIP6.setStatus('obsolete')
if mibBuilder.loadTexts: trapIP6.setDescription('Obsoleted. Configure with whispBoxDNS.trap6.')
trapIP7 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 32), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapIP7.setStatus('obsolete')
if mibBuilder.loadTexts: trapIP7.setDescription('Obsoleted. Configure with whispBoxDNS.trap7.')
trapIP8 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 33), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapIP8.setStatus('obsolete')
if mibBuilder.loadTexts: trapIP8.setDescription('Obsoleted. Configure with whispBoxDNS.trap8.')
trapIP9 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 34), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapIP9.setStatus('obsolete')
if mibBuilder.loadTexts: trapIP9.setDescription('Obsoleted. Configure with whispBoxDNS.trap9.')
trapIP10 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 35), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapIP10.setStatus('obsolete')
if mibBuilder.loadTexts: trapIP10.setDescription('Obsoleted. Configure with whispBoxDNS.trap10.')
commStringRWrite = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 36), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commStringRWrite.setStatus('current')
if mibBuilder.loadTexts: commStringRWrite.setDescription('Read/Write Community string. This is a write-only OID.')
subnetMask = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 37), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subnetMask.setStatus('current')
if mibBuilder.loadTexts: subnetMask.setDescription('Subnet mask for the management IP 1.')
mngtIP = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 38), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mngtIP.setStatus('current')
if mibBuilder.loadTexts: mngtIP.setDescription('Management IP address 1.')
allowVIDAccess = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: allowVIDAccess.setStatus('current')
if mibBuilder.loadTexts: allowVIDAccess.setDescription('Allow or disallow local SM management VID access.')
setDefaultPlug = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setDefaultPlug.setStatus('current')
if mibBuilder.loadTexts: setDefaultPlug.setDescription('If enable parameters are set to Factory Defaults upon default plug detection.')
hwsCompatibility = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwsCompatibility.setStatus('obsolete')
if mibBuilder.loadTexts: hwsCompatibility.setDescription('If enable, it ensures 6.0 compatibility with HWS.')
gpsInput = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("generateSyncSignal", 0), ("syncToReceivedSignalTimingPort", 1), ("syncToReceivedSignalPowerPort", 2), ("syncToiGPS", 3), ("autoSync", 4), ("autoSyncFreeRun", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gpsInput.setStatus('current')
if mibBuilder.loadTexts: gpsInput.setDescription('Values 1, 2, 3 have been deprecated. (0) Generate AP sync signal. (1) Deprecated. Sync AP to received signal (Timing Port/UGPS). It will set AutoSync. (2) Deprecated. Sync AP to received signal (Power Port). It will set AutoSync plus Free Run. (3) Deprecated. Sync AP using iGPS (Only on devices which support it). It will set AutoSync plus Free Run. (4) AutoSync. (5) AutoSync plus Free Run.')
ism = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ism.setStatus('current')
if mibBuilder.loadTexts: ism.setDescription('Enable ISM on 5.7GHz frequency band radios.')
hiPriority = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hiPriority.setStatus('obsolete')
if mibBuilder.loadTexts: hiPriority.setDescription('Enable Hi Priority Data Queue on BH radios.')
userName = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 45), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userName.setStatus('current')
if mibBuilder.loadTexts: userName.setDescription('User name.')
userPassword = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userPassword.setStatus('current')
if mibBuilder.loadTexts: userPassword.setDescription('User password.')
userAccessLevel = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 47), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userAccessLevel.setStatus('current')
if mibBuilder.loadTexts: userAccessLevel.setDescription('User access level.')
deleteUser = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deleteUser.setStatus('current')
if mibBuilder.loadTexts: deleteUser.setDescription('User name to remove.')
twoXRate = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: twoXRate.setStatus('obsolete')
if mibBuilder.loadTexts: twoXRate.setDescription('To enable or disable double rate.')
lanDhcpState = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lanDhcpState.setStatus('current')
if mibBuilder.loadTexts: lanDhcpState.setDescription('To enable or disable LAN Interface DHCP feature.')
sessionTimeout = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 51), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sessionTimeout.setStatus('current')
if mibBuilder.loadTexts: sessionTimeout.setDescription('Timer for Telnet, Web and FTP sessions.')
vlanMemberSource = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("configured", 0), ("active", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanMemberSource.setStatus('current')
if mibBuilder.loadTexts: vlanMemberSource.setDescription('Specified the VLAN member source to display. 0=configured, 1=active configuration. Note that this OID is internal to SNMP and is not available at the Web Interface.')
addCustomFreqList = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 53), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: addCustomFreqList.setStatus('current')
if mibBuilder.loadTexts: addCustomFreqList.setDescription('Add Custom Frequencies. Frequencies can be added in a list separated by commas. Example: 355000, 345000 Frequencies must be in increments of .05 MHz. Examples: 340025, 340050 A get will return the current custom frequency list. Max string length entered cannot exceed 128 character. Note if there is not enough room for all the frequencies none will be added. For use on 3.5/3.6 GHz MIMO OFDM Radios only.')
removeCustomFreqList = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 54), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: removeCustomFreqList.setStatus('current')
if mibBuilder.loadTexts: removeCustomFreqList.setDescription('Remove Custom Frequencies. Frequencies can be removed in a list separated by commas. Example: 355000, 345000 A get will return the current custom frequencies. For use on 3.5 GHz OFDM Radios only.')
allowColocation = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: allowColocation.setStatus('obsolete')
if mibBuilder.loadTexts: allowColocation.setDescription('Allow or disallow Colocation for software scheduling Backhaul Timing Masters with hardware scheduling Backhaul Timing Masters.')
changeUsrPwd = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 56), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeUsrPwd.setStatus('current')
if mibBuilder.loadTexts: changeUsrPwd.setDescription('Allow to change the password of a given user of a given user. Usage: userName,password.')
mngtIP2 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 57), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mngtIP2.setStatus('current')
if mibBuilder.loadTexts: mngtIP2.setDescription('Management IP address 2.')
subnetMask2 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 58), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subnetMask2.setStatus('current')
if mibBuilder.loadTexts: subnetMask2.setDescription('Subnet mask for the management IP 2.')
mngtIP3 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 59), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mngtIP3.setStatus('current')
if mibBuilder.loadTexts: mngtIP3.setDescription('Management IP address 3.')
subnetMask3 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 60), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subnetMask3.setStatus('current')
if mibBuilder.loadTexts: subnetMask3.setDescription('Subnet mask for the management IP 3.')
mngtIP4 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 61), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mngtIP4.setStatus('current')
if mibBuilder.loadTexts: mngtIP4.setDescription('Management IP address 4.')
subnetMask4 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 62), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subnetMask4.setStatus('current')
if mibBuilder.loadTexts: subnetMask4.setDescription('Subnet mask for the management IP 4.')
mngtIP5 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 63), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mngtIP5.setStatus('current')
if mibBuilder.loadTexts: mngtIP5.setDescription('Management IP address 5.')
subnetMask5 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 64), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subnetMask5.setStatus('current')
if mibBuilder.loadTexts: subnetMask5.setDescription('Subnet mask for the management IP 5.')
mngtIP6 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 65), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mngtIP6.setStatus('current')
if mibBuilder.loadTexts: mngtIP6.setDescription('Management IP address 6.')
subnetMask6 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 66), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subnetMask6.setStatus('current')
if mibBuilder.loadTexts: subnetMask6.setDescription('Subnet mask for the management IP 6.')
mngtIP7 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 67), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mngtIP7.setStatus('current')
if mibBuilder.loadTexts: mngtIP7.setDescription('Management IP address 7.')
subnetMask7 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 68), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subnetMask7.setStatus('current')
if mibBuilder.loadTexts: subnetMask7.setDescription('Subnet mask for the management IP 7.')
mngtIP8 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 69), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mngtIP8.setStatus('current')
if mibBuilder.loadTexts: mngtIP8.setDescription('Management IP address 8.')
subnetMask8 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 70), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subnetMask8.setStatus('current')
if mibBuilder.loadTexts: subnetMask8.setDescription('Subnet mask for the management IP 8.')
mngtIP9 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 71), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mngtIP9.setStatus('current')
if mibBuilder.loadTexts: mngtIP9.setDescription('Management IP address 9.')
subnetMask9 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 72), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subnetMask9.setStatus('current')
if mibBuilder.loadTexts: subnetMask9.setDescription('Subnet mask for the management IP 9.')
mngtIP10 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 73), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mngtIP10.setStatus('current')
if mibBuilder.loadTexts: mngtIP10.setDescription('Management IP address 10.')
subnetMask10 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 74), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subnetMask10.setStatus('current')
if mibBuilder.loadTexts: subnetMask10.setDescription('Subnet mask for the management IP 10.')
bhvlanEnable = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 75), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bhvlanEnable.setStatus('current')
if mibBuilder.loadTexts: bhvlanEnable.setDescription('To enable or disable VLAN for Backhaul Master/Slave.')
lldpBroadcastEnable = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 76), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpBroadcastEnable.setStatus('current')
if mibBuilder.loadTexts: lldpBroadcastEnable.setDescription('To enable Broadcast of LLDP message, if disabled LLDP uses multicast')
regionCode = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 77), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 6, 5, 3, 8, 10, 11, 7, 9, 2, 1, 4))).clone(namedValues=NamedValues(("none", 0), ("australia", 6), ("brazil", 5), ("canada", 3), ("india", 8), ("indonesia", 10), ("ireland", 11), ("russia", 7), ("spain", 9), ("us", 2), ("other", 1), ("europe", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: regionCode.setStatus('deprecated')
if mibBuilder.loadTexts: regionCode.setDescription('Set Region Code for the Unit. Used the individual region[Region] OIDs instead.')
russiaRegion = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 78), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("category1", 1), ("category2", 2), ("category3", 3), ("category4", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: russiaRegion.setStatus('deprecated')
if mibBuilder.loadTexts: russiaRegion.setDescription('Set Category Region for Russian 5.9/6.05 GHz Radio Only. Use setting under regionAsia now.')
commStringROnly = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 79), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commStringROnly.setStatus('current')
if mibBuilder.loadTexts: commStringROnly.setDescription('Set Read Only commnunity string.')
ethernetLinkSpeed = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 80), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 3, 5, 7, 12, 13, 15, 63))).clone(namedValues=NamedValues(("forced10H", 1), ("forced10F", 2), ("forced100H", 4), ("forced100F", 8), ("auto10F-10H", 3), ("auto100H-10H", 5), ("auto100H-10F-10H", 7), ("auto100F-100H", 12), ("auto100F-100H-10H", 13), ("auto100F-100H-10F-10H", 15), ("auto1000F-100F-100H-10F-10H", 63)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetLinkSpeed.setStatus('current')
if mibBuilder.loadTexts: ethernetLinkSpeed.setDescription('Set/Get Ethernet link speed and duplex settings. Note that the Gigabit options are only valid for boards that support Gigabit speeds.')
cyclicPrefix = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 81), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("one-quarter", 0), ("one-eighth", 1), ("one-sixteenth", 2), ("one-quarter-one-eighth", 3), ("one-quarter-one-sixteenth", 4), ("one-eighth-one-sixteenth", 5), ("one-quarter-one-eighth-one-sixteenth", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cyclicPrefix.setStatus('current')
if mibBuilder.loadTexts: cyclicPrefix.setDescription('Cyclic Prefix value, for OFDM Radios only. Deprecated for MIMO SMs. For PMP430 SMs, this value is only used while in PMP430 mode (1/16 is forced in PMP450 mode).')
numberCustomFreq = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 82), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numberCustomFreq.setStatus('current')
if mibBuilder.loadTexts: numberCustomFreq.setDescription('Number of custom frequencies added. There is a maximum of 100. For use on 3.5 GHz OFDM Radios only.')
channelBandwidth = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 83), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelBandwidth.setStatus('current')
if mibBuilder.loadTexts: channelBandwidth.setDescription('The current channel bandwidth in MHz. For use on OFDM Radios only. Obsoleted for MIMO SMs.')
setDefaults = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 84), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("noChangeOrUndoFactoryDefaults", 0), ("setToFactoryDefaults", 1), ("factoryDefaultsSet-AwaitingReboot", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setDefaults.setStatus('current')
if mibBuilder.loadTexts: setDefaults.setDescription('Setting this to 1 will set the radio to Factory Defaults after the next reboot. Setting this to 0 will undo Factory Defaults if and only if Factory Defaults have been set previously without rebooting. Reading this OID will return 0 if Factory Defaults are not set, or a 2 if Factory Defaults are set and we are now awaiting a reboot. NOTE: this operation is reversible as long as you write a 0 to this OID prior to reboot. As a security measure, this OID is only valid when the radio was booted with the default plug inserted. If the default plug was not inserted on boot, then attempting to set this OID will fail.')
radioRateAdapt = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 85), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 1, 5, 2, 3, 7, 8, 9))).clone(namedValues=NamedValues(("onex", 0), ("onexmimo", 4), ("onextwox", 1), ("onextwoxmimo", 5), ("onextwoxthreex", 2), ("onextwoxthreexfourx", 3), ("onextwoxfourx", 7), ("onextwoxfourxsixx", 8), ("onextwoxfourxsixxeightx", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioRateAdapt.setStatus('current')
if mibBuilder.loadTexts: radioRateAdapt.setDescription('Rate adaptation parameter. 0: no rate adaptation. 1: 1x and 2x adaptation. 2: 1x, 2x and 3x adaptation (OFDM only). 3: 1x, 2x, 3x and 4x adaption (OFDM only). 4: 1x (MIMO duplicate on both paths). 5: 1x/2x (MIMO). 7: 1x/2x/4x (MIMO). 8: 1x/2x/4x/6x (MIMO). 9: 1x/2x/4x/6x/8x (MIMO). For PMP430 radios this applies to Downlink Rate Adapt only. Use radioRateAdaptUL for setting uplink rate adapt on PMP430 radios.')
siteInfoViewable = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 86), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteInfoViewable.setStatus('current')
if mibBuilder.loadTexts: siteInfoViewable.setDescription('Enable non login users the ability to view Site Information')
largeVCQ = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 87), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: largeVCQ.setStatus('current')
if mibBuilder.loadTexts: largeVCQ.setDescription('Enable or disable Large VC Qs for SM or PTP radios. Enable when Uplink is being used for camera video feed.')
latitude = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 88), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: latitude.setStatus('current')
if mibBuilder.loadTexts: latitude.setDescription('The latitude setting of this unit in decimal degrees.')
longitude = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 89), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: longitude.setStatus('current')
if mibBuilder.loadTexts: longitude.setDescription('The longitude setting of this unit in decimal degrees.')
height = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 90), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483647, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: height.setStatus('current')
if mibBuilder.loadTexts: height.setDescription('The height setting of this unit in meters.')
bandwidth = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 91), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 5, 8, 9, 10, 11))).clone(namedValues=NamedValues(("bandwidth5mhz", 1), ("bandwidth10mhz", 3), ("bandwidth20mhz", 5), ("bandwidth5-10mhz", 8), ("bandwidth5-20mhz", 9), ("bandwidth10-20mhz", 10), ("bandwidth5-10-20mhz", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bandwidth.setStatus('current')
if mibBuilder.loadTexts: bandwidth.setDescription('Radio bandwidth setting. Deprecated for MIMO SMs. Instead use bandwidthScan.')
dataScramblingMethod = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 92), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("legacyDataScrambling", 0), ("r10DataScrambling", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataScramblingMethod.setStatus('obsolete')
if mibBuilder.loadTexts: dataScramblingMethod.setDescription('This OID is for OFDM only and is obsolete.')
portVID = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 93), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portVID.setStatus('current')
if mibBuilder.loadTexts: portVID.setDescription('Backhaul Port VID (PVID).')
radioRateAdaptUL = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 94), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 1, 5, 2, 3, 7, 8, 9))).clone(namedValues=NamedValues(("onex", 0), ("onexmimo", 4), ("onextwox", 1), ("onextwoxmimo", 5), ("onextwoxthreex", 2), ("onextwoxthreexfourx", 3), ("onextwoxfourx", 7), ("onextwoxfourxsixx", 8), ("onextwoxfourxsixxeightx", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioRateAdaptUL.setStatus('current')
if mibBuilder.loadTexts: radioRateAdaptUL.setDescription('Uplink Rate adaptation parameter (OFDM PMP430 only). 0: no rate adaptation. 1: 1x and 2x adaptation. 2: 1x, 2x and 3x adaptation. 3: 1x, 2x, 3x and 4x adaption. For PMP430 radios this applies to Uplink Rate Adapt only. Use radioRateAdapt for setting downlink rate adapt. 4x rate adapt not permitted on AES, 20MHz, 1/16 CP radios.')
providerVID = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 95), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: providerVID.setStatus('current')
if mibBuilder.loadTexts: providerVID.setDescription('Provider VID for QinQ VLAN.')
mac1VIDMapAddr = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 96), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mac1VIDMapAddr.setStatus('current')
if mibBuilder.loadTexts: mac1VIDMapAddr.setDescription('MAC Address for Entry 1 in MAC Address VID Mapping Table.')
mac1VIDMapVid = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 97), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mac1VIDMapVid.setStatus('current')
if mibBuilder.loadTexts: mac1VIDMapVid.setDescription('VID for Entry 1 in MAC Address VID Mapping Table.')
mac2VIDMapAddr = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 98), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mac2VIDMapAddr.setStatus('current')
if mibBuilder.loadTexts: mac2VIDMapAddr.setDescription('MAC Address for Entry 2 in MAC Address VID Mapping Table.')
mac2VIDMapVid = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 99), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mac2VIDMapVid.setStatus('current')
if mibBuilder.loadTexts: mac2VIDMapVid.setDescription('VID for Entry 2 in MAC Address VID Mapping Table.')
mac3VIDMapAddr = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 100), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mac3VIDMapAddr.setStatus('current')
if mibBuilder.loadTexts: mac3VIDMapAddr.setDescription('MAC Address for Entry 3 in MAC Address VID Mapping Table.')
mac3VIDMapVid = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 101), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mac3VIDMapVid.setStatus('current')
if mibBuilder.loadTexts: mac3VIDMapVid.setDescription('VID for Entry 3 in MAC Address VID Mapping Table.')
mac4VIDMapAddr = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 102), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mac4VIDMapAddr.setStatus('current')
if mibBuilder.loadTexts: mac4VIDMapAddr.setDescription('MAC Address for Entry 4 in MAC Address VID Mapping Table.')
mac4VIDMapVid = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 103), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mac4VIDMapVid.setStatus('current')
if mibBuilder.loadTexts: mac4VIDMapVid.setDescription('VID for Entry 4 in MAC Address VID Mapping Table.')
mac5VIDMapAddr = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 104), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mac5VIDMapAddr.setStatus('current')
if mibBuilder.loadTexts: mac5VIDMapAddr.setDescription('MAC Address for Entry 5 in MAC Address VID Mapping Table.')
mac5VIDMapVid = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 105), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mac5VIDMapVid.setStatus('current')
if mibBuilder.loadTexts: mac5VIDMapVid.setDescription('VID for Entry 5 in MAC Address VID Mapping Table.')
mac6VIDMapAddr = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 106), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mac6VIDMapAddr.setStatus('current')
if mibBuilder.loadTexts: mac6VIDMapAddr.setDescription('MAC Address for Entry 6 in MAC Address VID Mapping Table.')
mac6VIDMapVid = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 107), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mac6VIDMapVid.setStatus('current')
if mibBuilder.loadTexts: mac6VIDMapVid.setDescription('VID for Entry 6 in MAC Address VID Mapping Table.')
mac7VIDMapAddr = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 108), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mac7VIDMapAddr.setStatus('current')
if mibBuilder.loadTexts: mac7VIDMapAddr.setDescription('MAC Address for Entry 7 in MAC Address VID Mapping Table.')
mac7VIDMapVid = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 109), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mac7VIDMapVid.setStatus('current')
if mibBuilder.loadTexts: mac7VIDMapVid.setDescription('VID for Entry 7 in MAC Address VID Mapping Table.')
mac8VIDMapAddr = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 110), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mac8VIDMapAddr.setStatus('current')
if mibBuilder.loadTexts: mac8VIDMapAddr.setDescription('MAC Address for Entry 8 in MAC Address VID Mapping Table.')
mac8VIDMapVid = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 111), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mac8VIDMapVid.setStatus('current')
if mibBuilder.loadTexts: mac8VIDMapVid.setDescription('VID for Entry 8 in MAC Address VID Mapping Table.')
mac9VIDMapAddr = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 112), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mac9VIDMapAddr.setStatus('current')
if mibBuilder.loadTexts: mac9VIDMapAddr.setDescription('MAC Address for Entry 9 in MAC Address VID Mapping Table.')
mac9VIDMapVid = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 113), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mac9VIDMapVid.setStatus('current')
if mibBuilder.loadTexts: mac9VIDMapVid.setDescription('VID for Entry 9 in MAC Address VID Mapping Table.')
mac10VIDMapAddr = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 114), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mac10VIDMapAddr.setStatus('current')
if mibBuilder.loadTexts: mac10VIDMapAddr.setDescription('MAC Address for Entry 10 in MAC Address VID Mapping Table.')
mac10VIDMapVid = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 115), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mac10VIDMapVid.setStatus('current')
if mibBuilder.loadTexts: mac10VIDMapVid.setDescription('VID for Entry 10 in MAC Address VID Mapping Table.')
vlanPortType = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 116), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("q", 0), ("qinq", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanPortType.setStatus('current')
if mibBuilder.loadTexts: vlanPortType.setDescription('VLAN Port Type for VLAN interface. Default is Q.')
vlanAcceptQinQFrames = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 117), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanAcceptQinQFrames.setStatus('current')
if mibBuilder.loadTexts: vlanAcceptQinQFrames.setDescription('Allow/Disallow packets already doubly-tagged (QinQ) to ingress the FEC of BHM, BHS, or MP SM. Not configurable on MP AP.')
whispWebUserAccessMode = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 118), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("local", 0), ("remote", 1), ("remotethenlocal", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: whispWebUserAccessMode.setStatus('current')
if mibBuilder.loadTexts: whispWebUserAccessMode.setDescription('This variable selects if web page users for the radio should be authenticated locally or via a centralised remote Radius server')
usrAccountEnableAccounting = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 119), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disable", 0), ("deviceAccess", 1), ("dataUsage", 2), ("all", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usrAccountEnableAccounting.setStatus('current')
if mibBuilder.loadTexts: usrAccountEnableAccounting.setDescription('Select the level of accounting information to be reported to the server')
allowRejectThenLocal = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 120), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("doNotAllowLocalAuthifAAAReject", 0), ("allowLocalAuthIfAAAReject", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: allowRejectThenLocal.setStatus('current')
if mibBuilder.loadTexts: allowRejectThenLocal.setDescription('Control for allowing local authenication if the AAA remote server')
snrCalculation = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 121), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snrCalculation.setStatus('deprecated')
if mibBuilder.loadTexts: snrCalculation.setDescription('This OID is deprecated. Receive quality calulation is always on since it no longer affects packet per second performance.')
priorityPrecedence = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 122), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("eight021pThenDiffServ", 0), ("diffservThenEight021p", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: priorityPrecedence.setStatus('current')
if mibBuilder.loadTexts: priorityPrecedence.setDescription('Allows user to decide if 802.1p or DiffServ priority bits should be used first when making priority decisions.')
installationColorCode = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 123), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: installationColorCode.setStatus('current')
if mibBuilder.loadTexts: installationColorCode.setDescription('Installation Color Code. Allows non-configured SMs to register to an AP with UCC enabled in order to facilitate remote provisioning.')
apSmMode = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 124), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("sm", 1), ("ap", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apSmMode.setStatus('current')
if mibBuilder.loadTexts: apSmMode.setDescription('Set AP to SM or SM to AP. Useful for facillitating scripting of running Spectrum Analyzer on an AP. Radio must have AP Feature Key. 1 - Set to SM, 0 - Set to AP.')
pppoeFilter = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 125), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("filterOff", 0), ("filterOn", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppoeFilter.setStatus('current')
if mibBuilder.loadTexts: pppoeFilter.setDescription('To set PPPoE packet filter.')
smbFilter = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 126), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("filterOff", 0), ("filterOn", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smbFilter.setStatus('current')
if mibBuilder.loadTexts: smbFilter.setDescription('To set SMB packet filter.')
snmpFilter = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 127), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("filterOff", 0), ("filterOn", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpFilter.setStatus('current')
if mibBuilder.loadTexts: snmpFilter.setDescription('To set SNMP packet filter.')
userP1Filter = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 128), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("filterOff", 0), ("filterOn", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userP1Filter.setStatus('current')
if mibBuilder.loadTexts: userP1Filter.setDescription('To set user defined port 1 packet filter.')
userP2Filter = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 129), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("filterOff", 0), ("filterOn", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userP2Filter.setStatus('current')
if mibBuilder.loadTexts: userP2Filter.setDescription('To set user defined port 2 packet filter.')
userP3Filter = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 130), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("filterOff", 0), ("filterOn", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userP3Filter.setStatus('current')
if mibBuilder.loadTexts: userP3Filter.setDescription('To set user defined port 3 packet filter.')
allOtherIpFilter = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 131), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("filterOff", 0), ("filterOn", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: allOtherIpFilter.setStatus('current')
if mibBuilder.loadTexts: allOtherIpFilter.setDescription('To set all other IPv4 packet filter.')
allIpv4Filter = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 132), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("filterOff", 0), ("filterOn", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: allIpv4Filter.setStatus('current')
if mibBuilder.loadTexts: allIpv4Filter.setDescription('To set all IPv4 packet filter. Enabling this will automatically enable all of the known IP filters (SMB, SNMP, Bootp, IPv4 Mcast, User Defined Ports, and All Other IPv4).')
arpFilter = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 133), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("filterOff", 0), ("filterOn", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: arpFilter.setStatus('current')
if mibBuilder.loadTexts: arpFilter.setDescription('To set ARP packet filter.')
allOthersFilter = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 134), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("filterOff", 0), ("filterOn", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: allOthersFilter.setStatus('current')
if mibBuilder.loadTexts: allOthersFilter.setDescription('To set all other packet filter when.')
userDefinedPort1 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 135), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userDefinedPort1.setStatus('current')
if mibBuilder.loadTexts: userDefinedPort1.setDescription('An integer value of number one user defined port. Range:0-65535')
port1TCPFilter = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 136), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("filterOff", 0), ("filterOn", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: port1TCPFilter.setStatus('current')
if mibBuilder.loadTexts: port1TCPFilter.setDescription('To set user defined port 1 TCP traffic filter.')
port1UDPFilter = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 137), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("filterOff", 0), ("filterOn", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: port1UDPFilter.setStatus('current')
if mibBuilder.loadTexts: port1UDPFilter.setDescription('To set user defined port 1 UDP traffic filter.')
userDefinedPort2 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 138), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userDefinedPort2.setStatus('current')
if mibBuilder.loadTexts: userDefinedPort2.setDescription('An integer value of number two user defined port. Range:0-65535')
port2TCPFilter = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 139), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("filterOff", 0), ("filterOn", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: port2TCPFilter.setStatus('current')
if mibBuilder.loadTexts: port2TCPFilter.setDescription('To set user defined port 2 TCP traffic filter.')
port2UDPFilter = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 140), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("filterOff", 0), ("filterOn", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: port2UDPFilter.setStatus('current')
if mibBuilder.loadTexts: port2UDPFilter.setDescription('To set user defined port 2 UDP traffic filter.')
userDefinedPort3 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 141), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userDefinedPort3.setStatus('current')
if mibBuilder.loadTexts: userDefinedPort3.setDescription('An integer value of number three user defined port. Range:0-65535')
port3TCPFilter = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 142), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("filterOff", 0), ("filterOn", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: port3TCPFilter.setStatus('current')
if mibBuilder.loadTexts: port3TCPFilter.setDescription('To set user defined port 3 TCP traffic filter.')
port3UDPFilter = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 143), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("filterOff", 0), ("filterOn", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: port3UDPFilter.setStatus('current')
if mibBuilder.loadTexts: port3UDPFilter.setDescription('To set user defined port 3 UDP traffic filter.')
bootpcFilter = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 144), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("filterOff", 0), ("filterOn", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootpcFilter.setStatus('current')
if mibBuilder.loadTexts: bootpcFilter.setDescription('To set bootp client sourced packets filter.')
bootpsFilter = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 145), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("filterOff", 0), ("filterOn", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootpsFilter.setStatus('current')
if mibBuilder.loadTexts: bootpsFilter.setDescription('To set bootp server sourced packets filter.')
ip4MultFilter = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 146), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("filterOff", 0), ("filterOn", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ip4MultFilter.setStatus('current')
if mibBuilder.loadTexts: ip4MultFilter.setDescription('To set IPv4 MultiCast packets filter when NAT is disabled.')
packetFilterDirection = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 147), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("upstream", 1), ("downstream", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: packetFilterDirection.setStatus('current')
if mibBuilder.loadTexts: packetFilterDirection.setDescription('To set packet filter direction. Upstream is default.')
encryptionConfig = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 148), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("des", 0), ("aes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: encryptionConfig.setStatus('current')
if mibBuilder.loadTexts: encryptionConfig.setDescription('For supported radio, set the encryption algorithm to use. DES by default. Cannot be set if encryption is disabled.')
pppoeCtlPriority = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 149), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("high", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppoeCtlPriority.setStatus('current')
if mibBuilder.loadTexts: pppoeCtlPriority.setDescription('Prioritization of PPPoE Control packets.')
ftpPort = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 150), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpPort.setStatus('current')
if mibBuilder.loadTexts: ftpPort.setDescription('Port used to for FTP. Default is 21.')
httpPort = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 151), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpPort.setStatus('current')
if mibBuilder.loadTexts: httpPort.setDescription('Port used to for HTTP. Default is 80.')
snmpPort = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 153), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpPort.setStatus('current')
if mibBuilder.loadTexts: snmpPort.setDescription('Port used to for SNMP. Default is 161.')
snmpTrapPort = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 154), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapPort.setStatus('current')
if mibBuilder.loadTexts: snmpTrapPort.setDescription('Port used to for SNMP Traps. Default is 162.')
syslogDomainNameAppend = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 156), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disableDomain", 0), ("appendDomain", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogDomainNameAppend.setStatus('current')
if mibBuilder.loadTexts: syslogDomainNameAppend.setDescription("Select whether to append the configured management domain name to the Syslog server name. For example, if dnsMgmtDomainName is set to 'example.com', syslogServerAddr is set to 'syslog1', and syslogDomainNameAppend is set to appendDomain, the Syslog Server name used would be 'syslog1.example.com'.")
syslogServerAddr = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 157), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogServerAddr.setStatus('current')
if mibBuilder.loadTexts: syslogServerAddr.setDescription('Syslog server address either in dotted decimal notation or a Fully Qualified Domain Name')
syslogServerPort = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 158), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogServerPort.setStatus('current')
if mibBuilder.loadTexts: syslogServerPort.setDescription('Listening port on the Syslog server. Default is 514.')
syslogMinLevel = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 159), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("fatal", 0), ("alert", 1), ("critical", 2), ("error", 3), ("warning", 4), ("notice", 5), ("info", 6), ("debug", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogMinLevel.setStatus('current')
if mibBuilder.loadTexts: syslogMinLevel.setDescription('Sets the minimum syslog severity to transmit. Messages with a lower severity value (i.e. numerically higher) than this will not be transmitted.')
lan1DhcpRelease = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 201), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("releaseIP", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lan1DhcpRelease.setStatus('current')
if mibBuilder.loadTexts: lan1DhcpRelease.setDescription("Setting the variable to '1' will release LAN1's IP address and send a DHCP Release Message to the DHCP server. Applicable only when NAT is disabled.")
lan1DhcpRenew = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 202), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("renewIP", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lan1DhcpRenew.setStatus('current')
if mibBuilder.loadTexts: lan1DhcpRenew.setDescription("Setting the variable to '1' will renew LAN1's lease time for its current IP address. Applicable only when NAT is disabled.")
lan3DhcpRelease = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 203), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("releaseIP", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lan3DhcpRelease.setStatus('current')
if mibBuilder.loadTexts: lan3DhcpRelease.setDescription("Setting the variable to '1' will release LAN3's (RF Public) IP address and send a DHCP Release Message to the DHCP server. Applicable only when NAT is enabled.")
lan3DhcpRenew = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 204), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("renewIP", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lan3DhcpRenew.setStatus('current')
if mibBuilder.loadTexts: lan3DhcpRenew.setDescription("Setting the variable to '1' will renew LAN3's (RF Public) lease time for its current IP address. Applicable only when NAT is enabled.")
natDhcpRelease = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 205), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("releaseIP", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: natDhcpRelease.setStatus('current')
if mibBuilder.loadTexts: natDhcpRelease.setDescription("Setting the variable to '1' will release WAN's (NAT Public) IP address and send a DHCP Release Message to the DHCP server. Applicable only when NAT is enabled.")
natDhcpRenew = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 206), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("renewIP", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: natDhcpRenew.setStatus('current')
if mibBuilder.loadTexts: natDhcpRenew.setDescription("Setting the variable to '1' will renew WAN's (NAT Public) lease time for its current IP address. Applicable only when NAT is enabled.")
region = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 207), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 6, 3, 2, 5, 4, 7))).clone(namedValues=NamedValues(("none", 0), ("otherRegulatory", 1), ("asia", 6), ("europe", 3), ("northAmerica", 2), ("oceania", 5), ("southAmerica", 4), ("africa", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: region.setStatus('current')
if mibBuilder.loadTexts: region.setDescription('Set Region Code for the Unit.')
regionAsia = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 208), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("none", 0), ("india", 2), ("indonesia", 3), ("russiacategory1", 4), ("russiacategory2", 5), ("russiacategory3", 6), ("russiacategory4", 7), ("vietnam", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: regionAsia.setStatus('current')
if mibBuilder.loadTexts: regionAsia.setDescription('Country Code for Asia.')
regionEurope = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 209), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("none", 0), ("spain", 2), ("ireland", 3), ("denmark", 4), ("finland", 5), ("germany", 6), ("greece", 7), ("iceland", 8), ("liechtenstein", 9), ("norway", 10), ("portugal", 11), ("switzerland", 12), ("serbia", 13), ("unitedkingdom", 14)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: regionEurope.setStatus('current')
if mibBuilder.loadTexts: regionEurope.setDescription('Country Code for Europe.')
regionNorthAmerica = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 210), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 2, 4))).clone(namedValues=NamedValues(("none", 0), ("canada", 3), ("unitedStates", 2), ("mexico", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: regionNorthAmerica.setStatus('current')
if mibBuilder.loadTexts: regionNorthAmerica.setDescription('Country Code for North America.')
regionOceania = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 211), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("none", 0), ("australia", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: regionOceania.setStatus('current')
if mibBuilder.loadTexts: regionOceania.setDescription('Country Code for Oceania.')
regionSouthAmerica = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 212), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("none", 0), ("brazil", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: regionSouthAmerica.setStatus('current')
if mibBuilder.loadTexts: regionSouthAmerica.setDescription('Country Code for South America.')
regionOtherRegulatory = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 213), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("other", 1), ("otherFCC", 2), ("otherETSI", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: regionOtherRegulatory.setStatus('current')
if mibBuilder.loadTexts: regionOtherRegulatory.setDescription('Regulatory setting for governing regulatory body.')
interleave = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 214), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("default", 0), ("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: interleave.setStatus('current')
if mibBuilder.loadTexts: interleave.setDescription('Engineering use only.')
receiveQualityDebug = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 215), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: receiveQualityDebug.setStatus('current')
if mibBuilder.loadTexts: receiveQualityDebug.setDescription('Enable or disable receive quality calculations for every packet. Enabling(1) will calulate receive quality on all receiving packets. Due to load on CPU, will slightly packet per second capabilities on AP/BH. Default to disabled for all radios. Only applicable to GenII OFDM products and up.')
apType = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 216), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("standardAP", 0), ("remoteAP", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apType.setStatus('current')
if mibBuilder.loadTexts: apType.setDescription("AP Mode of Operation. In standardAP mode, all possible sync sources will be made availble and used for autoSync operation. In remoteAP mode, sync over power port will not be available as a sync source. Remote AP mode is where the AP's timing port is connected to an SM's timing port via a sync cable. In this mode, GPS data is unavailable and sync over power port shouldn't be used. If sync over power is desired, and a CMM or other sync over power device is in use, then select standardAP mode.")
regionAfrica = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 217), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("none", 0), ("algeria", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: regionAfrica.setStatus('current')
if mibBuilder.loadTexts: regionAfrica.setDescription('Country Code for Africa.')
addCustomFreqMimo = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 218), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: addCustomFreqMimo.setStatus('current')
if mibBuilder.loadTexts: addCustomFreqMimo.setDescription('Adds a particular frequency, applicable for both the AP and SM.')
removeCustomFreqMimo = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 219), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: removeCustomFreqMimo.setStatus('current')
if mibBuilder.loadTexts: removeCustomFreqMimo.setDescription('Removes a particular frequency, applicable for both the AP and SM.')
timedSpectrumAnalysisDurationBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 220), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timedSpectrumAnalysisDurationBox.setStatus('current')
if mibBuilder.loadTexts: timedSpectrumAnalysisDurationBox.setDescription('Value in seconds for a timed spectrum analysis. Range is 10-1000 seconds.')
spectrumAnalysisActionBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 221), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("stopSpectrumAnalysis", 0), ("startTimedSpectrumAnalysis", 1), ("startContinuousSpectrumAnalysis", 2), ("idleNoSpectrumAnalysis", 3), ("idleCompleteSpectrumAnalysis", 4), ("inProgressTimedSpectrumAnalysis", 5), ("inProgressContinuousSpectrumAnalysis", 6), ("notReady", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spectrumAnalysisActionBox.setStatus('current')
if mibBuilder.loadTexts: spectrumAnalysisActionBox.setDescription('Start or stop timed or continuous Spectrum Analysis and also give status. (0) - Stop Spectrum Analysis (1) - Start Timed Spectrum Analysis (2) - Start Continuous Spectrum Analysis (3) - Idle, no Spectrum Analysis results. (4) - Idle, Spectrum Analysis results available. (5) - Timed or Remote Spectrum Analysis in progress. (6) - Continuous Spectrum Analysis in progress. Note: Continuous mode has a max of 24 hours. (7) - Spectrum Analyzer not ready.')
saveFlash = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("doNotSaveToFlash", 0), ("saveToFlash", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: saveFlash.setStatus('obsolete')
if mibBuilder.loadTexts: saveFlash.setDescription('This variable is currently deprecated.')
reboot = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("finishedReboot", 0), ("reboot", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reboot.setStatus('current')
if mibBuilder.loadTexts: reboot.setDescription('Setting the variable to 1 will reboot the unit. When the unit finishes rebooting, it will be in finishedReboot state.')
clearEventLog = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notClear", 0), ("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clearEventLog.setStatus('current')
if mibBuilder.loadTexts: clearEventLog.setDescription('Setting the variable to 1 will clear the event log.')
rebootIfRequired = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("rebootNotRequired", 0), ("rebootRequired", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rebootIfRequired.setStatus('current')
if mibBuilder.loadTexts: rebootIfRequired.setDescription('Setting the variable to 1 will reboot the unit if reboot is required.')
clearBERStats = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("doNotClearBERStats", 0), ("clearBERStats", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clearBERStats.setStatus('current')
if mibBuilder.loadTexts: clearBERStats.setDescription("Set to clear the BER statistics by sending a 'clearBERStats'. Value is set back to 'doNotClearBERStats' When action is complete.")
updateDevice = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: updateDevice.setStatus('current')
if mibBuilder.loadTexts: updateDevice.setDescription('Use to update the software on the device')
whispBoxEvntLog = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 5, 1), EventString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: whispBoxEvntLog.setStatus('current')
if mibBuilder.loadTexts: whispBoxEvntLog.setDescription('Event log for AP and SM.')
whispBoxAttributesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 6, 1, 1))
for _whispBoxAttributesGroup_obj in [[("WHISP-BOX-MIBV2-MIB", "vlanAcceptQinQFrames"), ("WHISP-BOX-MIBV2-MIB", "providerVID"), ("WHISP-BOX-MIBV2-MIB", "mac1VIDMapAddr"), ("WHISP-BOX-MIBV2-MIB", "mac1VIDMapVid"), ("WHISP-BOX-MIBV2-MIB", "mac2VIDMapAddr"), ("WHISP-BOX-MIBV2-MIB", "mac2VIDMapVid"), ("WHISP-BOX-MIBV2-MIB", "mac3VIDMapAddr"), ("WHISP-BOX-MIBV2-MIB", "mac3VIDMapVid"), ("WHISP-BOX-MIBV2-MIB", "mac4VIDMapAddr"), ("WHISP-BOX-MIBV2-MIB", "mac4VIDMapVid"), ("WHISP-BOX-MIBV2-MIB", "mac5VIDMapAddr"), ("WHISP-BOX-MIBV2-MIB", "mac5VIDMapVid"), ("WHISP-BOX-MIBV2-MIB", "mac6VIDMapAddr"), ("WHISP-BOX-MIBV2-MIB", "mac6VIDMapVid"), ("WHISP-BOX-MIBV2-MIB", "mac7VIDMapAddr"), ("WHISP-BOX-MIBV2-MIB", "mac7VIDMapVid"), ("WHISP-BOX-MIBV2-MIB", "mac8VIDMapAddr"), ("WHISP-BOX-MIBV2-MIB", "mac8VIDMapVid"), ("WHISP-BOX-MIBV2-MIB", "mac9VIDMapAddr"), ("WHISP-BOX-MIBV2-MIB", "mac9VIDMapVid"), ("WHISP-BOX-MIBV2-MIB", "mac10VIDMapAddr"), ("WHISP-BOX-MIBV2-MIB", "mac10VIDMapVid"), ("WHISP-BOX-MIBV2-MIB", "vlanPortType"), ("WHISP-BOX-MIBV2-MIB", "portVID"), ("WHISP-BOX-MIBV2-MIB", "timedSpectrumAnalysisDurationBox"), ("WHISP-BOX-MIBV2-MIB", "spectrumAnalysisActionBox"), ("WHISP-BOX-MIBV2-MIB", "calibrationStatusBox"), ("WHISP-BOX-MIBV2-MIB", "calibrationStatusBool"), ("WHISP-BOX-MIBV2-MIB", "agcGainRxCH1"), ("WHISP-BOX-MIBV2-MIB", "agcGainRxCH2"), ("WHISP-BOX-MIBV2-MIB", "whispBoxSoftwareVer"), ("WHISP-BOX-MIBV2-MIB", "whispBoxFPGAVer"), ("WHISP-BOX-MIBV2-MIB", "whispBoxEsn"), ("WHISP-BOX-MIBV2-MIB", "whispBoxBoot"), ("WHISP-BOX-MIBV2-MIB", "boxTemperature"), ("WHISP-BOX-MIBV2-MIB", "boxDeviceType"), ("WHISP-BOX-MIBV2-MIB", "boxDeviceTypeID"), ("WHISP-BOX-MIBV2-MIB", "boxEncryption"), ("WHISP-BOX-MIBV2-MIB", "etherLinkStatus"), ("WHISP-BOX-MIBV2-MIB", "boxFrequency"), ("WHISP-BOX-MIBV2-MIB", "platformVer"), ("WHISP-BOX-MIBV2-MIB", "platformType"), ("WHISP-BOX-MIBV2-MIB", "dhcpLanIp"), ("WHISP-BOX-MIBV2-MIB", "dhcpLanSubnetMask"), ("WHISP-BOX-MIBV2-MIB", "dhcpLanGateway"), ("WHISP-BOX-MIBV2-MIB", "dhcpRfPublicIp"), ("WHISP-BOX-MIBV2-MIB", "dhcpRfPublicSubnetMask"), ("WHISP-BOX-MIBV2-MIB", "dhcpRfPublicGateway"), ("WHISP-BOX-MIBV2-MIB", "lanDhcpStatus"), ("WHISP-BOX-MIBV2-MIB", "rfPublicDhcpStatus"), ("WHISP-BOX-MIBV2-MIB", "natDhcpStatus"), ("WHISP-BOX-MIBV2-MIB", "inSyncCount"), ("WHISP-BOX-MIBV2-MIB", "outSyncCount"), ("WHISP-BOX-MIBV2-MIB", "pllOutLockCount"), ("WHISP-BOX-MIBV2-MIB", "txCalFailure"), ("WHISP-BOX-MIBV2-MIB", "swVersion"), ("WHISP-BOX-MIBV2-MIB", "pldVersion"), ("WHISP-BOX-MIBV2-MIB", "platformInfo"), ("WHISP-BOX-MIBV2-MIB", "antType"), ("WHISP-BOX-MIBV2-MIB", "antPolarization"), ("WHISP-BOX-MIBV2-MIB", "packetOverloadCounter"), ("WHISP-BOX-MIBV2-MIB", "whispBoxP11Personality"), ("WHISP-BOX-MIBV2-MIB", "whispBoxP11FPGAType"), ("WHISP-BOX-MIBV2-MIB", "whispBoxP11BstrapFPGAVer"), ("WHISP-BOX-MIBV2-MIB", "numDFSDetections"), ("WHISP-BOX-MIBV2-MIB", "rxOverrunPkts"), ("WHISP-BOX-MIBV2-MIB", "boxTemperatureC"), ("WHISP-BOX-MIBV2-MIB", "boxTemperatureF"), ("WHISP-BOX-MIBV2-MIB", "linkNegoSpeed"), ("WHISP-BOX-MIBV2-MIB", "installationColorCode"), ("WHISP-BOX-MIBV2-MIB", "colorCode"), ("WHISP-BOX-MIBV2-MIB", "displayOnlyAccess"), ("WHISP-BOX-MIBV2-MIB", "fullAccess"), ("WHISP-BOX-MIBV2-MIB", "webAutoUpdate"), ("WHISP-BOX-MIBV2-MIB", "pass1Status"), ("WHISP-BOX-MIBV2-MIB", "pass2Status"), ("WHISP-BOX-MIBV2-MIB", "bridgeEntryTimeout"), ("WHISP-BOX-MIBV2-MIB", "snmpMibPerm"), ("WHISP-BOX-MIBV2-MIB", "bhTimingMode"), ("WHISP-BOX-MIBV2-MIB", "powerControl"), ("WHISP-BOX-MIBV2-MIB", "extFilterDelay"), ("WHISP-BOX-MIBV2-MIB", "antennaGain"), ("WHISP-BOX-MIBV2-MIB", "eirp"), ("WHISP-BOX-MIBV2-MIB", "dynamicLearning"), ("WHISP-BOX-MIBV2-MIB", "managementVID"), ("WHISP-BOX-MIBV2-MIB", "agingTimeout"), ("WHISP-BOX-MIBV2-MIB", "frameType"), ("WHISP-BOX-MIBV2-MIB", "addVlanMember"), ("WHISP-BOX-MIBV2-MIB", "removeVlanMember"), ("WHISP-BOX-MIBV2-MIB", "scheduling"), ("WHISP-BOX-MIBV2-MIB", "transmitterOP"), ("WHISP-BOX-MIBV2-MIB", "bridgeEnable"), ("WHISP-BOX-MIBV2-MIB", "fecEnable"), ("WHISP-BOX-MIBV2-MIB", "trapIP1"), ("WHISP-BOX-MIBV2-MIB", "trapIP2"), ("WHISP-BOX-MIBV2-MIB", "trapIP3"), ("WHISP-BOX-MIBV2-MIB", "trapIP4"), ("WHISP-BOX-MIBV2-MIB", "trapIP5"), ("WHISP-BOX-MIBV2-MIB", "trapIP6"), ("WHISP-BOX-MIBV2-MIB", "trapIP7"), ("WHISP-BOX-MIBV2-MIB", "trapIP8"), ("WHISP-BOX-MIBV2-MIB", "trapIP9"), ("WHISP-BOX-MIBV2-MIB", "trapIP10"), ("WHISP-BOX-MIBV2-MIB", "commStringRWrite"), ("WHISP-BOX-MIBV2-MIB", "subnetMask"), ("WHISP-BOX-MIBV2-MIB", "mngtIP"), ("WHISP-BOX-MIBV2-MIB", "allowVIDAccess"), ("WHISP-BOX-MIBV2-MIB", "setDefaultPlug"), ("WHISP-BOX-MIBV2-MIB", "hwsCompatibility"), ("WHISP-BOX-MIBV2-MIB", "gpsInput"), ("WHISP-BOX-MIBV2-MIB", "ism"), ("WHISP-BOX-MIBV2-MIB", "hiPriority"), ("WHISP-BOX-MIBV2-MIB", "userName"), ("WHISP-BOX-MIBV2-MIB", "userPassword"), ("WHISP-BOX-MIBV2-MIB", "userAccessLevel"), ("WHISP-BOX-MIBV2-MIB", "deleteUser"), ("WHISP-BOX-MIBV2-MIB", "twoXRate"), ("WHISP-BOX-MIBV2-MIB", "lanDhcpState"), ("WHISP-BOX-MIBV2-MIB", "dnsIpState"), ("WHISP-BOX-MIBV2-MIB", "sessionTimeout"), ("WHISP-BOX-MIBV2-MIB", "vlanMemberSource"), ("WHISP-BOX-MIBV2-MIB", "addCustomFreqList"), ("WHISP-BOX-MIBV2-MIB", "removeCustomFreqList"), ("WHISP-BOX-MIBV2-MIB", "allowColocation"), ("WHISP-BOX-MIBV2-MIB", "changeUsrPwd"), ("WHISP-BOX-MIBV2-MIB", "mngtIP2"), ("WHISP-BOX-MIBV2-MIB", "subnetMask2"), ("WHISP-BOX-MIBV2-MIB", "mngtIP3"), ("WHISP-BOX-MIBV2-MIB", "subnetMask3"), ("WHISP-BOX-MIBV2-MIB", "mngtIP4"), ("WHISP-BOX-MIBV2-MIB", "subnetMask4"), ("WHISP-BOX-MIBV2-MIB", "mngtIP5"), ("WHISP-BOX-MIBV2-MIB", "subnetMask5"), ("WHISP-BOX-MIBV2-MIB", "mngtIP6"), ("WHISP-BOX-MIBV2-MIB", "subnetMask6"), ("WHISP-BOX-MIBV2-MIB", "mngtIP7"), ("WHISP-BOX-MIBV2-MIB", "subnetMask7"), ("WHISP-BOX-MIBV2-MIB", "mngtIP8"), ("WHISP-BOX-MIBV2-MIB", "subnetMask8"), ("WHISP-BOX-MIBV2-MIB", "mngtIP9"), ("WHISP-BOX-MIBV2-MIB", "subnetMask9"), ("WHISP-BOX-MIBV2-MIB", "mngtIP10"), ("WHISP-BOX-MIBV2-MIB", "subnetMask10"), ("WHISP-BOX-MIBV2-MIB", "bhvlanEnable"), ("WHISP-BOX-MIBV2-MIB", "lldpBroadcastEnable"), ("WHISP-BOX-MIBV2-MIB", "radioRateAdapt"), ("WHISP-BOX-MIBV2-MIB", "fpgaBuildDate"), ("WHISP-BOX-MIBV2-MIB", "fpgaCompileInfo"), ("WHISP-BOX-MIBV2-MIB", "syslogDomainNameAppend"), ("WHISP-BOX-MIBV2-MIB", "syslogServerAddr"), ("WHISP-BOX-MIBV2-MIB", "syslogServerPort"), ("WHISP-BOX-MIBV2-MIB", "syslogMinLevel"), ("WHISP-BOX-MIBV2-MIB", "syslogStatTxSuccesses"), ("WHISP-BOX-MIBV2-MIB", "syslogStatDropped"), ("WHISP-BOX-MIBV2-MIB", "apType"), ("WHISP-BOX-MIBV2-MIB", "apSmMode"), ("WHISP-BOX-MIBV2-MIB", "region"), ("WHISP-BOX-MIBV2-MIB", "regionCode"), ("WHISP-BOX-MIBV2-MIB", "regionAsia"), ("WHISP-BOX-MIBV2-MIB", "regionEurope"), ("WHISP-BOX-MIBV2-MIB", "regionNorthAmerica"), ("WHISP-BOX-MIBV2-MIB", "regionOceania"), ("WHISP-BOX-MIBV2-MIB", "regionSouthAmerica"), ("WHISP-BOX-MIBV2-MIB", "regionAfrica"), ("WHISP-BOX-MIBV2-MIB", "regionOtherRegulatory"), ("WHISP-BOX-MIBV2-MIB", "radioRateAdaptUL"), ("WHISP-BOX-MIBV2-MIB", "dnsPrimaryMgmtIP"), ("WHISP-BOX-MIBV2-MIB", "dnsAlternateMgmtIP"), ("WHISP-BOX-MIBV2-MIB", "dnsMgmtDomainName"), ("WHISP-BOX-MIBV2-MIB", "addCustomFreqMimo"), ("WHISP-BOX-MIBV2-MIB", "removeCustomFreqMimo"), ("WHISP-BOX-MIBV2-MIB", "ftpPort"), ("WHISP-BOX-MIBV2-MIB", "httpPort"), ("WHISP-BOX-MIBV2-MIB", "snmpPort"), ("WHISP-BOX-MIBV2-MIB", "snmpTrapPort"), ("WHISP-BOX-MIBV2-MIB", "lan1DhcpRelease"), ("WHISP-BOX-MIBV2-MIB", "lan1DhcpRenew"), ("WHISP-BOX-MIBV2-MIB", "lan3DhcpRelease"), ("WHISP-BOX-MIBV2-MIB", "lan3DhcpRenew"), ("WHISP-BOX-MIBV2-MIB", "natDhcpRelease"), ("WHISP-BOX-MIBV2-MIB", "natDhcpRenew"), ("WHISP-BOX-MIBV2-MIB", "radioEngKeyed"), ("WHISP-BOX-MIBV2-MIB", "priorityPrecedence"), ("WHISP-BOX-MIBV2-MIB", "pppoeCtlPriority"), ("WHISP-BOX-MIBV2-MIB", "rfStatXmtUDataCnt"), ("WHISP-BOX-MIBV2-MIB", "rfStatXmtBDataCnt"), ("WHISP-BOX-MIBV2-MIB", "rfStatXmtMDataCnt"), ("WHISP-BOX-MIBV2-MIB", "rfStatRcvUDataCnt"), ("WHISP-BOX-MIBV2-MIB", "rfStatRcvBDataCnt"), ("WHISP-BOX-MIBV2-MIB", "rfStatRcvMDataCnt"), ("WHISP-BOX-MIBV2-MIB", "rfStatXmtCntlCnt"), ("WHISP-BOX-MIBV2-MIB", "rfStatRcvCntlCnt"), ("WHISP-BOX-MIBV2-MIB", "rfStatInSyncCount"), ("WHISP-BOX-MIBV2-MIB", "rfStatOutSyncCount"), ("WHISP-BOX-MIBV2-MIB", "rfStatOverrunCount"), ("WHISP-BOX-MIBV2-MIB", "rfStatUnderrunCount"), ("WHISP-BOX-MIBV2-MIB", "rfStatRcvCorruptDataCount"), ("WHISP-BOX-MIBV2-MIB", "rfStatRcvCorruptControlCount"), ("WHISP-BOX-MIBV2-MIB", "rfStatBadBcastCtlCnt"), ("WHISP-BOX-MIBV2-MIB", "rfStatPLLOutOfLockCnt"), ("WHISP-BOX-MIBV2-MIB", "rfStatBeaconVerMismatchCnt"), ("WHISP-BOX-MIBV2-MIB", "rfStatBadFreqBcnRcvCnt"), ("WHISP-BOX-MIBV2-MIB", "rfStatnonLiteBcnRcvCnt"), ("WHISP-BOX-MIBV2-MIB", "rfStatUnsupFeatBcnRcvCnt"), ("WHISP-BOX-MIBV2-MIB", "rfStatUnkwnFeatBcnRcvCnt"), ("WHISP-BOX-MIBV2-MIB", "rfStatTxCalFailCnt"), ("WHISP-BOX-MIBV2-MIB", "rfStatBadInSyncIDRcv"), ("WHISP-BOX-MIBV2-MIB", "rfStatTempOutOfRange"), ("WHISP-BOX-MIBV2-MIB", "rfStatRSSIOutOfRange"), ("WHISP-BOX-MIBV2-MIB", "rfStatRangeCapEnf"), ("WHISP-BOX-MIBV2-MIB", "rfStatRcvLTStart"), ("WHISP-BOX-MIBV2-MIB", "rfStatRcvLTStartHS"), ("WHISP-BOX-MIBV2-MIB", "rfStatRcvLTResult"), ("WHISP-BOX-MIBV2-MIB", "rfStatXmtLTResult"), ("WHISP-BOX-MIBV2-MIB", "whispFeatureKeyOrigin"), ("WHISP-BOX-MIBV2-MIB", "updateStatus"), ("WHISP-BOX-MIBV2-MIB", "bridgeCbFecStatbin"), ("WHISP-BOX-MIBV2-MIB", "bridgeCbFecStatbout"), ("WHISP-BOX-MIBV2-MIB", "bridgeCbFecStatbtoss"), ("WHISP-BOX-MIBV2-MIB", "bridgeCbFecStatbtosscap"), ("WHISP-BOX-MIBV2-MIB", "bridgeCbFecStatuin"), ("WHISP-BOX-MIBV2-MIB", "bridgeCbFecStatuout"), ("WHISP-BOX-MIBV2-MIB", "bridgeCbFecStatutoss"), ("WHISP-BOX-MIBV2-MIB", "bridgeCbFecStatutosscap"), ("WHISP-BOX-MIBV2-MIB", "bridgeCbRFStatbin"), ("WHISP-BOX-MIBV2-MIB", "bridgeCbRFStatbout"), ("WHISP-BOX-MIBV2-MIB", "bridgeCbFecStatfloods"), ("WHISP-BOX-MIBV2-MIB", "bridgeCbRFStatfloods"), ("WHISP-BOX-MIBV2-MIB", "bridgeCbRFStatbtoss"), ("WHISP-BOX-MIBV2-MIB", "bridgeCbRFStatbtosscap"), ("WHISP-BOX-MIBV2-MIB", "bridgeCbRFStatuin"), ("WHISP-BOX-MIBV2-MIB", "bridgeCbRFStatuout"), ("WHISP-BOX-MIBV2-MIB", "bridgeCbRFStatutoss"), ("WHISP-BOX-MIBV2-MIB", "bridgeCbRFStatutosscap"), ("WHISP-BOX-MIBV2-MIB", "bridgeCbErrStatNI1QSend"), ("WHISP-BOX-MIBV2-MIB", "bridgeCbErrStatNI2QSend"), ("WHISP-BOX-MIBV2-MIB", "bridgeCbErrStatBridgeFull"), ("WHISP-BOX-MIBV2-MIB", "bridgeCbErrStatSendMsg"), ("WHISP-BOX-MIBV2-MIB", "bridgeCbErrStatAPFecQSend"), ("WHISP-BOX-MIBV2-MIB", "bridgeCbErrStatApRfQSend"), ("WHISP-BOX-MIBV2-MIB", "fecStatLinkDetected"), ("WHISP-BOX-MIBV2-MIB", "fecStatLinkLost"), ("WHISP-BOX-MIBV2-MIB", "fecInDiscardsCount"), ("WHISP-BOX-MIBV2-MIB", "fecInErrorsCount"), ("WHISP-BOX-MIBV2-MIB", "fecOutDiscardsCount"), ("WHISP-BOX-MIBV2-MIB", "fecOutErrorsCount"), ("WHISP-BOX-MIBV2-MIB", "rfInDiscardsCount"), ("WHISP-BOX-MIBV2-MIB", "rfInErrorsCount"), ("WHISP-BOX-MIBV2-MIB", "rfOutDiscardsCount"), ("WHISP-BOX-MIBV2-MIB", "rfOutErrorsCount"), ("WHISP-BOX-MIBV2-MIB", "fecInDiscardsOverloadCount"), ("WHISP-BOX-MIBV2-MIB", "fecOutDiscardsOverloadCount"), ("WHISP-BOX-MIBV2-MIB", "rfInDiscardsOverloadCount"), ("WHISP-BOX-MIBV2-MIB", "rfOutDiscardsOverloadCount"), ("WHISP-BOX-MIBV2-MIB", "interleave")], [("WHISP-BOX-MIBV2-MIB", "radioMSN"), ("WHISP-BOX-MIBV2-MIB", "latitude"), ("WHISP-BOX-MIBV2-MIB", "longitude"), ("WHISP-BOX-MIBV2-MIB", "height"), ("WHISP-BOX-MIBV2-MIB", "bandwidth"), ("WHISP-BOX-MIBV2-MIB", "dataScramblingMethod"), ("WHISP-BOX-MIBV2-MIB", "whispWebUserAccessMode"), ("WHISP-BOX-MIBV2-MIB", "usrAccountEnableAccounting"), ("WHISP-BOX-MIBV2-MIB", "allowRejectThenLocal"), ("WHISP-BOX-MIBV2-MIB", "pppoeFilter"), ("WHISP-BOX-MIBV2-MIB", "smbFilter"), ("WHISP-BOX-MIBV2-MIB", "snmpFilter"), ("WHISP-BOX-MIBV2-MIB", "userP1Filter"), ("WHISP-BOX-MIBV2-MIB", "userP2Filter"), ("WHISP-BOX-MIBV2-MIB", "userP3Filter"), ("WHISP-BOX-MIBV2-MIB", "allOtherIpFilter"), ("WHISP-BOX-MIBV2-MIB", "allIpv4Filter"), ("WHISP-BOX-MIBV2-MIB", "arpFilter"), ("WHISP-BOX-MIBV2-MIB", "allOthersFilter"), ("WHISP-BOX-MIBV2-MIB", "userDefinedPort1"), ("WHISP-BOX-MIBV2-MIB", "port1TCPFilter"), ("WHISP-BOX-MIBV2-MIB", "port1UDPFilter"), ("WHISP-BOX-MIBV2-MIB", "userDefinedPort2"), ("WHISP-BOX-MIBV2-MIB", "port2TCPFilter"), ("WHISP-BOX-MIBV2-MIB", "port2UDPFilter"), ("WHISP-BOX-MIBV2-MIB", "userDefinedPort3"), ("WHISP-BOX-MIBV2-MIB", "port3TCPFilter"), ("WHISP-BOX-MIBV2-MIB", "port3UDPFilter"), ("WHISP-BOX-MIBV2-MIB", "bootpcFilter"), ("WHISP-BOX-MIBV2-MIB", "bootpsFilter"), ("WHISP-BOX-MIBV2-MIB", "ip4MultFilter"), ("WHISP-BOX-MIBV2-MIB", "packetFilterDirection"), ("WHISP-BOX-MIBV2-MIB", "encryptionConfig")]]:
    if getattr(mibBuilder, 'version', 0) < (4, 4, 2):
        # WARNING: leading objects get lost here!
        whispBoxAttributesGroup = whispBoxAttributesGroup.setObjects(*_whispBoxAttributesGroup_obj)
    else:
        whispBoxAttributesGroup = whispBoxAttributesGroup.setObjects(*_whispBoxAttributesGroup_obj, **dict(append=True))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    whispBoxAttributesGroup = whispBoxAttributesGroup.setStatus('current')
if mibBuilder.loadTexts: whispBoxAttributesGroup.setDescription('Canopy Box Level Attributes group.')
whispBoxControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 6, 1, 2)).setObjects(("WHISP-BOX-MIBV2-MIB", "saveFlash"), ("WHISP-BOX-MIBV2-MIB", "reboot"), ("WHISP-BOX-MIBV2-MIB", "clearEventLog"), ("WHISP-BOX-MIBV2-MIB", "rebootIfRequired"), ("WHISP-BOX-MIBV2-MIB", "clearBERStats"), ("WHISP-BOX-MIBV2-MIB", "updateDevice"), ("WHISP-BOX-MIBV2-MIB", "siteInfoViewable"), ("WHISP-BOX-MIBV2-MIB", "largeVCQ"), ("WHISP-BOX-MIBV2-MIB", "snrCalculation"), ("WHISP-BOX-MIBV2-MIB", "receiveQualityDebug"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    whispBoxControlGroup = whispBoxControlGroup.setStatus('current')
if mibBuilder.loadTexts: whispBoxControlGroup.setDescription('Canopy Box Level control group.')
whispBoxBTGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 6, 1, 3)).setObjects(("WHISP-BOX-MIBV2-MIB", "whispBridgeMacAddr"), ("WHISP-BOX-MIBV2-MIB", "whispBridgeDesLuid"), ("WHISP-BOX-MIBV2-MIB", "whispBridgeAge"), ("WHISP-BOX-MIBV2-MIB", "whispBridgeExt"), ("WHISP-BOX-MIBV2-MIB", "whispBridgeHash"), ("WHISP-BOX-MIBV2-MIB", "whispBridgeCAM"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    whispBoxBTGroup = whispBoxBTGroup.setStatus('current')
if mibBuilder.loadTexts: whispBoxBTGroup.setDescription('Canopy Box Bridging Table group.')
whispBoxVLANTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 6, 1, 4)).setObjects(("WHISP-BOX-MIBV2-MIB", "whispVID"), ("WHISP-BOX-MIBV2-MIB", "whispVType"), ("WHISP-BOX-MIBV2-MIB", "whispVAge"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    whispBoxVLANTableGroup = whispBoxVLANTableGroup.setStatus('current')
if mibBuilder.loadTexts: whispBoxVLANTableGroup.setDescription('Canopy Box VLAN member Table group.')
whispBoxCPTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 6, 1, 5)).setObjects(("WHISP-BOX-MIBV2-MIB", "codePoint0"), ("WHISP-BOX-MIBV2-MIB", "codePoint1"), ("WHISP-BOX-MIBV2-MIB", "codePoint2"), ("WHISP-BOX-MIBV2-MIB", "codePoint3"), ("WHISP-BOX-MIBV2-MIB", "codePoint4"), ("WHISP-BOX-MIBV2-MIB", "codePoint5"), ("WHISP-BOX-MIBV2-MIB", "codePoint6"), ("WHISP-BOX-MIBV2-MIB", "codePoint7"), ("WHISP-BOX-MIBV2-MIB", "codePoint8"), ("WHISP-BOX-MIBV2-MIB", "codePoint9"), ("WHISP-BOX-MIBV2-MIB", "codePoint10"), ("WHISP-BOX-MIBV2-MIB", "codePoint11"), ("WHISP-BOX-MIBV2-MIB", "codePoint12"), ("WHISP-BOX-MIBV2-MIB", "codePoint13"), ("WHISP-BOX-MIBV2-MIB", "codePoint14"), ("WHISP-BOX-MIBV2-MIB", "codePoint15"), ("WHISP-BOX-MIBV2-MIB", "codePoint16"), ("WHISP-BOX-MIBV2-MIB", "codePoint17"), ("WHISP-BOX-MIBV2-MIB", "codePoint18"), ("WHISP-BOX-MIBV2-MIB", "codePoint19"), ("WHISP-BOX-MIBV2-MIB", "codePoint20"), ("WHISP-BOX-MIBV2-MIB", "codePoint21"), ("WHISP-BOX-MIBV2-MIB", "codePoint22"), ("WHISP-BOX-MIBV2-MIB", "codePoint23"), ("WHISP-BOX-MIBV2-MIB", "codePoint24"), ("WHISP-BOX-MIBV2-MIB", "codePoint25"), ("WHISP-BOX-MIBV2-MIB", "codePoint26"), ("WHISP-BOX-MIBV2-MIB", "codePoint27"), ("WHISP-BOX-MIBV2-MIB", "codePoint28"), ("WHISP-BOX-MIBV2-MIB", "codePoint29"), ("WHISP-BOX-MIBV2-MIB", "codePoint30"), ("WHISP-BOX-MIBV2-MIB", "codePoint31"), ("WHISP-BOX-MIBV2-MIB", "codePoint32"), ("WHISP-BOX-MIBV2-MIB", "codePoint33"), ("WHISP-BOX-MIBV2-MIB", "codePoint34"), ("WHISP-BOX-MIBV2-MIB", "codePoint35"), ("WHISP-BOX-MIBV2-MIB", "codePoint36"), ("WHISP-BOX-MIBV2-MIB", "codePoint37"), ("WHISP-BOX-MIBV2-MIB", "codePoint38"), ("WHISP-BOX-MIBV2-MIB", "codePoint39"), ("WHISP-BOX-MIBV2-MIB", "codePoint40"), ("WHISP-BOX-MIBV2-MIB", "codePoint41"), ("WHISP-BOX-MIBV2-MIB", "codePoint42"), ("WHISP-BOX-MIBV2-MIB", "codePoint43"), ("WHISP-BOX-MIBV2-MIB", "codePoint44"), ("WHISP-BOX-MIBV2-MIB", "codePoint45"), ("WHISP-BOX-MIBV2-MIB", "codePoint46"), ("WHISP-BOX-MIBV2-MIB", "codePoint47"), ("WHISP-BOX-MIBV2-MIB", "codePoint48"), ("WHISP-BOX-MIBV2-MIB", "codePoint49"), ("WHISP-BOX-MIBV2-MIB", "codePoint50"), ("WHISP-BOX-MIBV2-MIB", "codePoint51"), ("WHISP-BOX-MIBV2-MIB", "codePoint52"), ("WHISP-BOX-MIBV2-MIB", "codePoint53"), ("WHISP-BOX-MIBV2-MIB", "codePoint54"), ("WHISP-BOX-MIBV2-MIB", "codePoint55"), ("WHISP-BOX-MIBV2-MIB", "codePoint56"), ("WHISP-BOX-MIBV2-MIB", "codePoint57"), ("WHISP-BOX-MIBV2-MIB", "codePoint58"), ("WHISP-BOX-MIBV2-MIB", "codePoint59"), ("WHISP-BOX-MIBV2-MIB", "codePoint60"), ("WHISP-BOX-MIBV2-MIB", "codePoint61"), ("WHISP-BOX-MIBV2-MIB", "codePoint62"), ("WHISP-BOX-MIBV2-MIB", "codePoint63"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    whispBoxCPTableGroup = whispBoxCPTableGroup.setStatus('current')
if mibBuilder.loadTexts: whispBoxCPTableGroup.setDescription('Code Point Table group.')
whispBoxUserTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 6, 1, 6)).setObjects(("WHISP-BOX-MIBV2-MIB", "entryIndex"), ("WHISP-BOX-MIBV2-MIB", "userLoginName"), ("WHISP-BOX-MIBV2-MIB", "userPswd"), ("WHISP-BOX-MIBV2-MIB", "accessLevel"), ("WHISP-BOX-MIBV2-MIB", "loginStatus"), ("WHISP-BOX-MIBV2-MIB", "loginMethod"), ("WHISP-BOX-MIBV2-MIB", "sessionTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    whispBoxUserTableGroup = whispBoxUserTableGroup.setStatus('current')
if mibBuilder.loadTexts: whispBoxUserTableGroup.setDescription('Canopy Box User Information Table group.')
whispLayer2NeighborTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 6, 1, 7)).setObjects(("WHISP-BOX-MIBV2-MIB", "entryL2Index"), ("WHISP-BOX-MIBV2-MIB", "neighborMAC"), ("WHISP-BOX-MIBV2-MIB", "neighborIP"), ("WHISP-BOX-MIBV2-MIB", "neighborSiteName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    whispLayer2NeighborTableGroup = whispLayer2NeighborTableGroup.setStatus('current')
if mibBuilder.loadTexts: whispLayer2NeighborTableGroup.setDescription('Canopy Box Layer 2 Neighbor information.')
whispBoxNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 6, 1, 8)).setObjects(("WHISP-BOX-MIBV2-MIB", "boxLan1DHCPClientEvent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    whispBoxNotifGroup = whispBoxNotifGroup.setStatus('current')
if mibBuilder.loadTexts: whispBoxNotifGroup.setDescription('Canopy Box Notification Group.')
whispBridgeTbUsed = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: whispBridgeTbUsed.setStatus('current')
if mibBuilder.loadTexts: whispBridgeTbUsed.setDescription('Number of used entries in bridging table.')
whispBridgeTbFree = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: whispBridgeTbFree.setStatus('current')
if mibBuilder.loadTexts: whispBridgeTbFree.setDescription('Number of free entries in bridging table.')
whispBridgeTbErr = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 7, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: whispBridgeTbErr.setStatus('current')
if mibBuilder.loadTexts: whispBridgeTbErr.setDescription('Bridging table errors.')
codePoint0 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: codePoint0.setStatus('current')
if mibBuilder.loadTexts: codePoint0.setDescription('Code Point 0.')
codePoint1 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint1.setStatus('current')
if mibBuilder.loadTexts: codePoint1.setDescription('Code Point 1.')
codePoint2 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint2.setStatus('current')
if mibBuilder.loadTexts: codePoint2.setDescription('Code Point 2.')
codePoint3 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint3.setStatus('current')
if mibBuilder.loadTexts: codePoint3.setDescription('Code Point 3.')
codePoint4 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint4.setStatus('current')
if mibBuilder.loadTexts: codePoint4.setDescription('Code Point 4.')
codePoint5 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint5.setStatus('current')
if mibBuilder.loadTexts: codePoint5.setDescription('Code Point 5.')
codePoint6 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint6.setStatus('current')
if mibBuilder.loadTexts: codePoint6.setDescription('Code Point 6.')
codePoint7 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint7.setStatus('current')
if mibBuilder.loadTexts: codePoint7.setDescription('Code Point 7.')
codePoint8 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint8.setStatus('current')
if mibBuilder.loadTexts: codePoint8.setDescription('Code Point 8.')
codePoint9 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint9.setStatus('current')
if mibBuilder.loadTexts: codePoint9.setDescription('Code Point 9.')
codePoint10 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint10.setStatus('current')
if mibBuilder.loadTexts: codePoint10.setDescription('Code Point 10.')
codePoint11 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint11.setStatus('current')
if mibBuilder.loadTexts: codePoint11.setDescription('Code Point 11.')
codePoint12 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint12.setStatus('current')
if mibBuilder.loadTexts: codePoint12.setDescription('Code Point 12.')
codePoint13 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint13.setStatus('current')
if mibBuilder.loadTexts: codePoint13.setDescription('Code Point 13.')
codePoint14 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint14.setStatus('current')
if mibBuilder.loadTexts: codePoint14.setDescription('Code Point 14.')
codePoint15 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint15.setStatus('current')
if mibBuilder.loadTexts: codePoint15.setDescription('Code Point 15.')
codePoint16 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint16.setStatus('current')
if mibBuilder.loadTexts: codePoint16.setDescription('Code Point 16.')
codePoint17 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint17.setStatus('current')
if mibBuilder.loadTexts: codePoint17.setDescription('Code Point 17.')
codePoint18 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint18.setStatus('current')
if mibBuilder.loadTexts: codePoint18.setDescription('Code Point 18.')
codePoint19 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint19.setStatus('current')
if mibBuilder.loadTexts: codePoint19.setDescription('Code Point 19.')
codePoint20 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint20.setStatus('current')
if mibBuilder.loadTexts: codePoint20.setDescription('Code Point 20.')
codePoint21 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint21.setStatus('current')
if mibBuilder.loadTexts: codePoint21.setDescription('Code Point 21.')
codePoint22 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint22.setStatus('current')
if mibBuilder.loadTexts: codePoint22.setDescription('Code Point 22.')
codePoint23 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint23.setStatus('current')
if mibBuilder.loadTexts: codePoint23.setDescription('Code Point 23.')
codePoint24 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint24.setStatus('current')
if mibBuilder.loadTexts: codePoint24.setDescription('Code Point 24.')
codePoint25 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 26), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint25.setStatus('current')
if mibBuilder.loadTexts: codePoint25.setDescription('Code Point 25.')
codePoint26 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 27), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint26.setStatus('current')
if mibBuilder.loadTexts: codePoint26.setDescription('Code Point 26.')
codePoint27 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint27.setStatus('current')
if mibBuilder.loadTexts: codePoint27.setDescription('Code Point 27.')
codePoint28 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 29), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint28.setStatus('current')
if mibBuilder.loadTexts: codePoint28.setDescription('Code Point 28.')
codePoint29 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 30), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint29.setStatus('current')
if mibBuilder.loadTexts: codePoint29.setDescription('Code Point 29.')
codePoint30 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 31), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint30.setStatus('current')
if mibBuilder.loadTexts: codePoint30.setDescription('Code Point 30.')
codePoint31 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint31.setStatus('current')
if mibBuilder.loadTexts: codePoint31.setDescription('Code Point 31.')
codePoint32 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 33), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint32.setStatus('current')
if mibBuilder.loadTexts: codePoint32.setDescription('Code Point 32.')
codePoint33 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 34), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint33.setStatus('current')
if mibBuilder.loadTexts: codePoint33.setDescription('Code Point 33.')
codePoint34 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 35), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint34.setStatus('current')
if mibBuilder.loadTexts: codePoint34.setDescription('Code Point 34.')
codePoint35 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 36), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint35.setStatus('current')
if mibBuilder.loadTexts: codePoint35.setDescription('Code Point 35.')
codePoint36 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 37), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint36.setStatus('current')
if mibBuilder.loadTexts: codePoint36.setDescription('Code Point 36.')
codePoint37 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 38), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint37.setStatus('current')
if mibBuilder.loadTexts: codePoint37.setDescription('Code Point 37.')
codePoint38 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 39), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint38.setStatus('current')
if mibBuilder.loadTexts: codePoint38.setDescription('Code Point 38.')
codePoint39 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 40), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint39.setStatus('current')
if mibBuilder.loadTexts: codePoint39.setDescription('Code Point 39.')
codePoint40 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 41), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint40.setStatus('current')
if mibBuilder.loadTexts: codePoint40.setDescription('Code Point 40.')
codePoint41 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 42), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint41.setStatus('current')
if mibBuilder.loadTexts: codePoint41.setDescription('Code Point 41.')
codePoint42 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 43), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint42.setStatus('current')
if mibBuilder.loadTexts: codePoint42.setDescription('Code Point 42.')
codePoint43 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 44), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint43.setStatus('current')
if mibBuilder.loadTexts: codePoint43.setDescription('Code Point 43.')
codePoint44 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 45), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint44.setStatus('current')
if mibBuilder.loadTexts: codePoint44.setDescription('Code Point 44.')
codePoint45 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 46), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint45.setStatus('current')
if mibBuilder.loadTexts: codePoint45.setDescription('Code Point 45.')
codePoint46 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 47), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint46.setStatus('current')
if mibBuilder.loadTexts: codePoint46.setDescription('Code Point 46.')
codePoint47 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 48), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint47.setStatus('current')
if mibBuilder.loadTexts: codePoint47.setDescription('Code Point 47.')
codePoint48 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 49), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: codePoint48.setStatus('current')
if mibBuilder.loadTexts: codePoint48.setDescription('Code Point 48.')
codePoint49 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 50), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint49.setStatus('current')
if mibBuilder.loadTexts: codePoint49.setDescription('Code Point 49.')
codePoint50 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 51), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint50.setStatus('current')
if mibBuilder.loadTexts: codePoint50.setDescription('Code Point 50.')
codePoint51 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 52), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint51.setStatus('current')
if mibBuilder.loadTexts: codePoint51.setDescription('Code Point 51.')
codePoint52 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 53), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint52.setStatus('current')
if mibBuilder.loadTexts: codePoint52.setDescription('Code Point 52.')
codePoint53 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint53.setStatus('current')
if mibBuilder.loadTexts: codePoint53.setDescription('Code Point 53.')
codePoint54 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 55), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint54.setStatus('current')
if mibBuilder.loadTexts: codePoint54.setDescription('Code Point 54.')
codePoint55 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint55.setStatus('current')
if mibBuilder.loadTexts: codePoint55.setDescription('Code Point 55.')
codePoint56 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 57), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: codePoint56.setStatus('current')
if mibBuilder.loadTexts: codePoint56.setDescription('Code Point 56.')
codePoint57 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 58), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint57.setStatus('current')
if mibBuilder.loadTexts: codePoint57.setDescription('Code Point 57.')
codePoint58 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 59), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint58.setStatus('current')
if mibBuilder.loadTexts: codePoint58.setDescription('Code Point 58.')
codePoint59 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 60), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint59.setStatus('current')
if mibBuilder.loadTexts: codePoint59.setDescription('Code Point 59.')
codePoint60 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 61), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint60.setStatus('current')
if mibBuilder.loadTexts: codePoint60.setDescription('Code Point 60.')
codePoint61 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 62), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint61.setStatus('current')
if mibBuilder.loadTexts: codePoint61.setDescription('Code Point 61.')
codePoint62 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 63), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint62.setStatus('current')
if mibBuilder.loadTexts: codePoint62.setDescription('Code Point 62.')
codePoint63 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 64), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint63.setStatus('current')
if mibBuilder.loadTexts: codePoint63.setDescription('Code Point 63.')
boxLan1DHCPClientEvent = NotificationType((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 12, 1, 1)).setObjects(("WHISP-BOX-MIBV2-MIB", "dhcpLanIp"), ("WHISP-BOX-MIBV2-MIB", "whispBoxEsn"))
if mibBuilder.loadTexts: boxLan1DHCPClientEvent.setStatus('current')
if mibBuilder.loadTexts: boxLan1DHCPClientEvent.setDescription('Lan1 DHCP Client has received a new address via DHCP')
dnsIpState = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 13, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("manual", 0), ("automatic", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsIpState.setStatus('current')
if mibBuilder.loadTexts: dnsIpState.setDescription('Configuration for DNS server IP addresses of the management interface are learned: 0 : Manual, must configure dnsPrimaryMgmtIP and dnsAlternateMgmtIP 1 : Automatic, DNS servers IP addresses are learned from DHCP response of the interface')
dnsPrimaryMgmtIP = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 13, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsPrimaryMgmtIP.setStatus('current')
if mibBuilder.loadTexts: dnsPrimaryMgmtIP.setDescription('Primary DNS IP address for the management interface.')
dnsAlternateMgmtIP = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 13, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsAlternateMgmtIP.setStatus('current')
if mibBuilder.loadTexts: dnsAlternateMgmtIP.setDescription('Secondary DNS IP address for the management interface.')
dnsMgmtDomainName = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 13, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsMgmtDomainName.setStatus('current')
if mibBuilder.loadTexts: dnsMgmtDomainName.setDescription('Domain Name to use for management DNS configuration. This domain name may be concatonated to DNS names used configured for the management interface.')
trapDomainNameAppend = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 13, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disableDomain", 0), ("appendDomain", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapDomainNameAppend.setStatus('current')
if mibBuilder.loadTexts: trapDomainNameAppend.setDescription("Select whether to append the configured management domain name to the configured trap names. For example, if dnsMgmtDomainName is set to 'example.com', trap1 is set to 'trap1', and trapDomainNameAppend is set to appendDomain, the trap1 name used would be 'trap1.example.com'.")
trap1 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 13, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trap1.setStatus('current')
if mibBuilder.loadTexts: trap1.setDescription('SNMP Trap IP Address 1. Format is either an IP address or DNS name.')
trap2 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 13, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trap2.setStatus('current')
if mibBuilder.loadTexts: trap2.setDescription('SNMP Trap IP Address 2. Format is either an IP address or DNS name.')
trap3 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 13, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trap3.setStatus('current')
if mibBuilder.loadTexts: trap3.setDescription('SNMP Trap IP Address 3. Format is either an IP address or DNS name.')
trap4 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 13, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trap4.setStatus('current')
if mibBuilder.loadTexts: trap4.setDescription('SNMP Trap IP Address 4. Format is either an IP address or DNS name.')
trap5 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 13, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trap5.setStatus('current')
if mibBuilder.loadTexts: trap5.setDescription('SNMP Trap IP Address 5. Format is either an IP address or DNS name.')
trap6 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 13, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trap6.setStatus('current')
if mibBuilder.loadTexts: trap6.setDescription('SNMP Trap IP Address 6. Format is either an IP address or DNS name.')
trap7 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 13, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trap7.setStatus('current')
if mibBuilder.loadTexts: trap7.setDescription('SNMP Trap IP Address 7. Format is either an IP address or DNS name.')
trap8 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 13, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trap8.setStatus('current')
if mibBuilder.loadTexts: trap8.setDescription('SNMP Trap IP Address 8. Format is either an IP address or DNS name.')
trap9 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 13, 14), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trap9.setStatus('current')
if mibBuilder.loadTexts: trap9.setDescription('SNMP Trap IP Address 9. Format is either an IP address or DNS name.')
trap10 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 13, 15), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trap10.setStatus('current')
if mibBuilder.loadTexts: trap10.setDescription('SNMP Trap IP Address 10. Format is either an IP address or DNS name.')
whispBoxRFPhysicalRadios = MibTable((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 15, 1), )
if mibBuilder.loadTexts: whispBoxRFPhysicalRadios.setStatus('current')
if mibBuilder.loadTexts: whispBoxRFPhysicalRadios.setDescription('Radio information table.')
whispBoxRFPhysicalRadioEntry = MibTableRow((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 15, 1, 1), ).setIndexNames((0, "WHISP-BOX-MIBV2-MIB", "radioIndex"))
if mibBuilder.loadTexts: whispBoxRFPhysicalRadioEntry.setStatus('current')
if mibBuilder.loadTexts: whispBoxRFPhysicalRadioEntry.setDescription('Radio information table entry.')
radioIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 15, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioIndex.setStatus('current')
if mibBuilder.loadTexts: radioIndex.setDescription('Radio Index.')
radioType = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 15, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("fsk", 0), ("ofdm", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioType.setStatus('current')
if mibBuilder.loadTexts: radioType.setDescription('Indicates if the radio is FSK or OFDM.')
radioPaths = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 15, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioPaths.setStatus('current')
if mibBuilder.loadTexts: radioPaths.setDescription('Indicates number of paths. For FSK or OFDM (non-MIMO), this is 1. For MIMO, it can be greater (with a current maximum of 2).')
whispBoxRFPhysicalRadioPaths = MibTable((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 15, 2), )
if mibBuilder.loadTexts: whispBoxRFPhysicalRadioPaths.setStatus('current')
if mibBuilder.loadTexts: whispBoxRFPhysicalRadioPaths.setDescription('Radio path information table.')
whispBoxRFPhysicalRadioPathEntry = MibTableRow((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 15, 2, 1), ).setIndexNames((0, "WHISP-BOX-MIBV2-MIB", "radioIndex"), (0, "WHISP-BOX-MIBV2-MIB", "pathIndex"))
if mibBuilder.loadTexts: whispBoxRFPhysicalRadioPathEntry.setStatus('current')
if mibBuilder.loadTexts: whispBoxRFPhysicalRadioPathEntry.setDescription('Radio path table entry.')
pathIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 15, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathIndex.setStatus('current')
if mibBuilder.loadTexts: pathIndex.setDescription('Path Index.')
whispBoxRFPhysicalRadioFrequencies = MibTable((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 15, 3), )
if mibBuilder.loadTexts: whispBoxRFPhysicalRadioFrequencies.setStatus('current')
if mibBuilder.loadTexts: whispBoxRFPhysicalRadioFrequencies.setDescription('Available frequency information table.')
whispBoxRFPhysicalRadioFrequencyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 15, 3, 1), ).setIndexNames((0, "WHISP-BOX-MIBV2-MIB", "radioIndex"), (0, "WHISP-BOX-MIBV2-MIB", "frequency"))
if mibBuilder.loadTexts: whispBoxRFPhysicalRadioFrequencyEntry.setStatus('current')
if mibBuilder.loadTexts: whispBoxRFPhysicalRadioFrequencyEntry.setDescription('Available frequency table entry.')
frequency = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 15, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 900000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frequency.setStatus('current')
if mibBuilder.loadTexts: frequency.setDescription('Frequency.')
whispBoxRFConfigRadios = MibTable((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 16, 1), )
if mibBuilder.loadTexts: whispBoxRFConfigRadios.setStatus('current')
if mibBuilder.loadTexts: whispBoxRFConfigRadios.setDescription('Radio configuration table.')
whispBoxRFConfigRadioEntry = MibTableRow((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 16, 1, 1), ).setIndexNames((0, "WHISP-BOX-MIBV2-MIB", "radioConfigIndex"))
if mibBuilder.loadTexts: whispBoxRFConfigRadioEntry.setStatus('current')
if mibBuilder.loadTexts: whispBoxRFConfigRadioEntry.setDescription('Radio config table entry.')
radioConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 16, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioConfigIndex.setStatus('current')
if mibBuilder.loadTexts: radioConfigIndex.setDescription('Radio Config Index.')
radioFrequencyBand = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 16, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("band700", 0), ("band900", 1), ("band2400", 2), ("band3500", 3), ("band3700", 4), ("band4900", 5), ("band5100", 6), ("band5200", 7), ("band5400", 8), ("band5700", 9), ("band5800", 10), ("band5900", 11), ("band6050", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioFrequencyBand.setStatus('current')
if mibBuilder.loadTexts: radioFrequencyBand.setDescription('Currently configured radio band.')
whispBoxBridgeTable = MibTable((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 4), )
if mibBuilder.loadTexts: whispBoxBridgeTable.setStatus('current')
if mibBuilder.loadTexts: whispBoxBridgeTable.setDescription('Bridge table.')
whispBoxBridgeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 4, 1), ).setIndexNames((0, "WHISP-BOX-MIBV2-MIB", "whispBridgeMacAddr"))
if mibBuilder.loadTexts: whispBoxBridgeEntry.setStatus('current')
if mibBuilder.loadTexts: whispBoxBridgeEntry.setDescription('Bridge entry.')
whispBridgeMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 4, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: whispBridgeMacAddr.setStatus('current')
if mibBuilder.loadTexts: whispBridgeMacAddr.setDescription('MAC Address of the registered enity.')
whispBridgeDesLuid = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 4, 1, 2), WhispLUID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: whispBridgeDesLuid.setStatus('current')
if mibBuilder.loadTexts: whispBridgeDesLuid.setDescription('This is the Local Unit Identifier assigned to Subscriber Modems.')
whispBridgeAge = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: whispBridgeAge.setStatus('current')
if mibBuilder.loadTexts: whispBridgeAge.setDescription('Table entry last access age in minutes.')
whispBridgeExt = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: whispBridgeExt.setStatus('current')
if mibBuilder.loadTexts: whispBridgeExt.setDescription('Timeout extension flag for entries which also reside in the PNA APR cache.')
whispBridgeHash = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: whispBridgeHash.setStatus('current')
if mibBuilder.loadTexts: whispBridgeHash.setDescription('Hash table array index.')
whispBridgeCAM = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: whispBridgeCAM.setStatus('obsolete')
if mibBuilder.loadTexts: whispBridgeCAM.setDescription('This entry is deprecated.')
whispVLANTable = MibTable((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 8), )
if mibBuilder.loadTexts: whispVLANTable.setStatus('current')
if mibBuilder.loadTexts: whispVLANTable.setDescription('VLAN member table.')
whispVLANEntry = MibTableRow((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 8, 1), ).setIndexNames((0, "WHISP-BOX-MIBV2-MIB", "whispVID"))
if mibBuilder.loadTexts: whispVLANEntry.setStatus('current')
if mibBuilder.loadTexts: whispVLANEntry.setDescription('VLAN entry.')
whispVID = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: whispVID.setStatus('current')
if mibBuilder.loadTexts: whispVID.setDescription('VLAN member ID.')
whispVType = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 8, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: whispVType.setStatus('current')
if mibBuilder.loadTexts: whispVType.setDescription('VLAN member type.')
whispVAge = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 8, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: whispVAge.setStatus('current')
if mibBuilder.loadTexts: whispVAge.setDescription('VLAN member age.')
whispUserTable = MibTable((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 10), )
if mibBuilder.loadTexts: whispUserTable.setStatus('current')
if mibBuilder.loadTexts: whispUserTable.setDescription('User information table.')
whispUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 10, 1), ).setIndexNames((0, "WHISP-BOX-MIBV2-MIB", "entryIndex"))
if mibBuilder.loadTexts: whispUserEntry.setStatus('current')
if mibBuilder.loadTexts: whispUserEntry.setDescription('User entry.')
entryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: entryIndex.setStatus('current')
if mibBuilder.loadTexts: entryIndex.setDescription('User information table index.')
userLoginName = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 10, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userLoginName.setStatus('current')
if mibBuilder.loadTexts: userLoginName.setDescription('User name.')
userPswd = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 10, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userPswd.setStatus('current')
if mibBuilder.loadTexts: userPswd.setDescription('User password.')
accessLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 10, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessLevel.setStatus('current')
if mibBuilder.loadTexts: accessLevel.setDescription('User access level.')
loginStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 10, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loginStatus.setStatus('current')
if mibBuilder.loadTexts: loginStatus.setDescription('User current status.')
loginMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 10, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loginMethod.setStatus('current')
if mibBuilder.loadTexts: loginMethod.setDescription('User login method.')
sessionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 10, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionTime.setStatus('current')
if mibBuilder.loadTexts: sessionTime.setDescription('Users logged in session time.')
whispLayer2NeighborTable = MibTable((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 11), )
if mibBuilder.loadTexts: whispLayer2NeighborTable.setStatus('current')
if mibBuilder.loadTexts: whispLayer2NeighborTable.setDescription('Neighbor information table.')
whispLayer2NeighborEntry = MibTableRow((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 11, 1), ).setIndexNames((0, "WHISP-BOX-MIBV2-MIB", "entryL2Index"))
if mibBuilder.loadTexts: whispLayer2NeighborEntry.setStatus('current')
if mibBuilder.loadTexts: whispLayer2NeighborEntry.setDescription('Neighbor Entry.')
entryL2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: entryL2Index.setStatus('current')
if mibBuilder.loadTexts: entryL2Index.setDescription('Neighbor information table index.')
neighborMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 11, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neighborMAC.setStatus('current')
if mibBuilder.loadTexts: neighborMAC.setDescription('Neighbor MAC.')
neighborIP = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 11, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neighborIP.setStatus('current')
if mibBuilder.loadTexts: neighborIP.setDescription('Neighbor IP.')
neighborSiteName = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 11, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neighborSiteName.setStatus('current')
if mibBuilder.loadTexts: neighborSiteName.setDescription('Neighbor Site Name.')
mibBuilder.exportSymbols("WHISP-BOX-MIBV2-MIB", largeVCQ=largeVCQ, whispBoxCPVar=whispBoxCPVar, dnsPrimaryMgmtIP=dnsPrimaryMgmtIP, commStringRWrite=commStringRWrite, mngtIP=mngtIP, rfStatOutSyncCount=rfStatOutSyncCount, dnsMgmtDomainName=dnsMgmtDomainName, trap3=trap3, bridgeEnable=bridgeEnable, platformInfo=platformInfo, siteInfoViewable=siteInfoViewable, codePoint17=codePoint17, codePoint34=codePoint34, trap10=trap10, bridgeCbFecStatuin=bridgeCbFecStatuin, whispVLANEntry=whispVLANEntry, regionOtherRegulatory=regionOtherRegulatory, platformType=platformType, transmitterOP=transmitterOP, codePoint53=codePoint53, trap5=trap5, rfInDiscardsCount=rfInDiscardsCount, calibrationStatusBool=calibrationStatusBool, codePoint31=codePoint31, boxDeviceTypeID=boxDeviceTypeID, smbFilter=smbFilter, bridgeCbFecStatbout=bridgeCbFecStatbout, dhcpRfPublicSubnetMask=dhcpRfPublicSubnetMask, codePoint9=codePoint9, whispBoxRFPhysicalRadioEntry=whispBoxRFPhysicalRadioEntry, bridgeEntryTimeout=bridgeEntryTimeout, mngtIP8=mngtIP8, codePoint0=codePoint0, dhcpLanGateway=dhcpLanGateway, boxTemperatureC=boxTemperatureC, rfStatXmtCntlCnt=rfStatXmtCntlCnt, codePoint44=codePoint44, userP3Filter=userP3Filter, fecOutDiscardsCount=fecOutDiscardsCount, rfStatnonLiteBcnRcvCnt=rfStatnonLiteBcnRcvCnt, rfStatBadInSyncIDRcv=rfStatBadInSyncIDRcv, codePoint21=codePoint21, natDhcpRelease=natDhcpRelease, portVID=portVID, syslogServerPort=syslogServerPort, codePoint43=codePoint43, rfStatBadBcastCtlCnt=rfStatBadBcastCtlCnt, codePoint20=codePoint20, trapIP10=trapIP10, entryL2Index=entryL2Index, snmpFilter=snmpFilter, syslogDomainNameAppend=syslogDomainNameAppend, whispBoxGroups=whispBoxGroups, userDefinedPort1=userDefinedPort1, pldVersion=pldVersion, userName=userName, codePoint37=codePoint37, dnsIpState=dnsIpState, regionNorthAmerica=regionNorthAmerica, pllOutLockCount=pllOutLockCount, spectrumAnalysisActionBox=spectrumAnalysisActionBox, codePoint18=codePoint18, mac3VIDMapVid=mac3VIDMapVid, bridgeCbRFStatutosscap=bridgeCbRFStatutosscap, hiPriority=hiPriority, whispBoxP11FPGAType=whispBoxP11FPGAType, trapIP6=trapIP6, ethernetLinkSpeed=ethernetLinkSpeed, receiveQualityDebug=receiveQualityDebug, arpFilter=arpFilter, mngtIP5=mngtIP5, priorityPrecedence=priorityPrecedence, fpgaBuildDate=fpgaBuildDate, codePoint10=codePoint10, codePoint49=codePoint49, rfStatXmtMDataCnt=rfStatXmtMDataCnt, httpPort=httpPort, radioRateAdapt=radioRateAdapt, channelBandwidth=channelBandwidth, subnetMask9=subnetMask9, bridgeCbRFStatutoss=bridgeCbRFStatutoss, providerVID=providerVID, fecInDiscardsOverloadCount=fecInDiscardsOverloadCount, codePoint59=codePoint59, antPolarization=antPolarization, mac5VIDMapAddr=mac5VIDMapAddr, rfStatOverrunCount=rfStatOverrunCount, trapIP9=trapIP9, userAccessLevel=userAccessLevel, mac2VIDMapAddr=mac2VIDMapAddr, rfStatRcvBDataCnt=rfStatRcvBDataCnt, natDhcpStatus=natDhcpStatus, whispBoxVLANTableGroup=whispBoxVLANTableGroup, userDefinedPort2=userDefinedPort2, codePoint63=codePoint63, whispFeatureKeyOrigin=whispFeatureKeyOrigin, longitude=longitude, bridgeCbErrStatNI2QSend=bridgeCbErrStatNI2QSend, trapIP7=trapIP7, codePoint6=codePoint6, rfStatRcvMDataCnt=rfStatRcvMDataCnt, whispWebUserAccessMode=whispWebUserAccessMode, rfOutErrorsCount=rfOutErrorsCount, subnetMask=subnetMask, neighborIP=neighborIP, trap1=trap1, updateStatus=updateStatus, ip4MultFilter=ip4MultFilter, subnetMask5=subnetMask5, rfStatRcvUDataCnt=rfStatRcvUDataCnt, whispBoxEsn=whispBoxEsn, bridgeCbErrStatAPFecQSend=bridgeCbErrStatAPFecQSend, bridgeCbRFStatbtoss=bridgeCbRFStatbtoss, latitude=latitude, inSyncCount=inSyncCount, whispBoxRFConfig=whispBoxRFConfig, userP1Filter=userP1Filter, codePoint15=codePoint15, height=height, codePoint45=codePoint45, removeCustomFreqList=removeCustomFreqList, syslogServerAddr=syslogServerAddr, fpgaCompileInfo=fpgaCompileInfo, codePoint55=codePoint55, sessionTimeout=sessionTimeout, codePoint46=codePoint46, whispBoxRFPhysical=whispBoxRFPhysical, extFilterDelay=extFilterDelay, lldpBroadcastEnable=lldpBroadcastEnable, changeUsrPwd=changeUsrPwd, codePoint7=codePoint7, whispBoxRFPhysicalRadioFrequencies=whispBoxRFPhysicalRadioFrequencies, russiaRegion=russiaRegion, codePoint32=codePoint32, rfStatXmtBDataCnt=rfStatXmtBDataCnt, clearBERStats=clearBERStats, powerControl=powerControl, codePoint61=codePoint61, linkNegoSpeed=linkNegoSpeed, regionAfrica=regionAfrica, fecStatLinkDetected=fecStatLinkDetected, codePoint24=codePoint24, boxTemperature=boxTemperature, codePoint56=codePoint56, rfInDiscardsOverloadCount=rfInDiscardsOverloadCount, twoXRate=twoXRate, removeCustomFreqMimo=removeCustomFreqMimo, loginStatus=loginStatus, userPassword=userPassword, rfPublicDhcpStatus=rfPublicDhcpStatus, ism=ism, radioIndex=radioIndex, calibrationStatusBox=calibrationStatusBox, clearEventLog=clearEventLog, dhcpLanIp=dhcpLanIp, vlanAcceptQinQFrames=vlanAcceptQinQFrames, radioFrequencyBand=radioFrequencyBand, whispBridgeTbUsed=whispBridgeTbUsed, codePoint4=codePoint4, trap8=trap8, bridgeCbRFStatbout=bridgeCbRFStatbout, radioMSN=radioMSN, rfStatInSyncCount=rfStatInSyncCount, bridgeCbFecStatfloods=bridgeCbFecStatfloods, whispVLANTable=whispVLANTable, mngtIP10=mngtIP10, whispBridgeCAM=whispBridgeCAM, whispBoxConf=whispBoxConf, platformVer=platformVer, port3UDPFilter=port3UDPFilter, agcGainRxCH2=agcGainRxCH2, codePoint26=codePoint26, addVlanMember=addVlanMember, bandwidth=bandwidth, codePoint27=codePoint27, mac7VIDMapVid=mac7VIDMapVid, snmpPort=snmpPort, fullAccess=fullAccess, neighborMAC=neighborMAC, boxEncryption=boxEncryption, bhvlanEnable=bhvlanEnable, codePoint58=codePoint58, bhModulation=bhModulation, rfStatRcvLTResult=rfStatRcvLTResult, regionOceania=regionOceania, whispBoxNotifGroup=whispBoxNotifGroup, fecEnable=fecEnable, trapIP5=trapIP5, allIpv4Filter=allIpv4Filter, boxLan1DHCPClientEvent=boxLan1DHCPClientEvent, updateDevice=updateDevice, frameType=frameType, fecStatLinkLost=fecStatLinkLost, whispBoxP11BstrapFPGAVer=whispBoxP11BstrapFPGAVer, trap6=trap6, sessionTime=sessionTime, mac1VIDMapAddr=mac1VIDMapAddr, boxDeviceType=boxDeviceType, bridgeCbFecStatbin=bridgeCbFecStatbin, codePoint40=codePoint40, regionSouthAmerica=regionSouthAmerica, colorCode=colorCode, mngtIP3=mngtIP3, whispBoxP11Personality=whispBoxP11Personality, rfStatXmtUDataCnt=rfStatXmtUDataCnt, snrCalculation=snrCalculation, codePoint41=codePoint41, pass1Status=pass1Status, commStringROnly=commStringROnly, whispBoxRFPhysicalRadioPathEntry=whispBoxRFPhysicalRadioPathEntry, whispBoxConfig=whispBoxConfig, rfInErrorsCount=rfInErrorsCount, codePoint39=codePoint39, rfStatRangeCapEnf=rfStatRangeCapEnf, boxFrequency=boxFrequency, whispVType=whispVType, txCalFailure=txCalFailure, encryptionConfig=encryptionConfig, whispBridgeExt=whispBridgeExt, fecOutDiscardsOverloadCount=fecOutDiscardsOverloadCount, bridgeCbRFStatuin=bridgeCbRFStatuin, trap4=trap4, etherLinkStatus=etherLinkStatus, port2TCPFilter=port2TCPFilter, whispBoxDNS=whispBoxDNS, whispLayer2NeighborEntry=whispLayer2NeighborEntry, userDefinedPort3=userDefinedPort3, rfStatRcvCntlCnt=rfStatRcvCntlCnt, boxTemperatureF=boxTemperatureF, radioType=radioType, rfStatRcvLTStartHS=rfStatRcvLTStartHS, dhcpRfPublicGateway=dhcpRfPublicGateway, mac9VIDMapAddr=mac9VIDMapAddr, mac1VIDMapVid=mac1VIDMapVid, syslogStatDropped=syslogStatDropped, bridgeCbFecStatuout=bridgeCbFecStatuout, numberCustomFreq=numberCustomFreq, accessLevel=accessLevel, apSmMode=apSmMode, setDefaultPlug=setDefaultPlug, rfStatRcvCorruptDataCount=rfStatRcvCorruptDataCount, codePoint60=codePoint60, loginMethod=loginMethod, usrAccountEnableAccounting=usrAccountEnableAccounting, eirp=eirp, codePoint22=codePoint22, whispBoxEvent=whispBoxEvent, bridgeCbFecStatutoss=bridgeCbFecStatutoss, PYSNMP_MODULE_ID=whispBoxLevelMibModule, whispBoxEventLog=whispBoxEventLog, whispBoxAttributesGroup=whispBoxAttributesGroup, trap2=trap2, whispBoxDHCPClientEvent=whispBoxDHCPClientEvent, codePoint48=codePoint48)
mibBuilder.exportSymbols("WHISP-BOX-MIBV2-MIB", whispBoxFPGAVer=whispBoxFPGAVer, dataScramblingMethod=dataScramblingMethod, rfStatTxCalFailCnt=rfStatTxCalFailCnt, codePoint12=codePoint12, pass2Status=pass2Status, codePoint52=codePoint52, mac6VIDMapAddr=mac6VIDMapAddr, dynamicLearning=dynamicLearning, lan3DhcpRelease=lan3DhcpRelease, dnsAlternateMgmtIP=dnsAlternateMgmtIP, trapIP8=trapIP8, setDefaults=setDefaults, vlanPortType=vlanPortType, codePoint29=codePoint29, neighborSiteName=neighborSiteName, trapIP1=trapIP1, mac9VIDMapVid=mac9VIDMapVid, lan1DhcpRenew=lan1DhcpRenew, codePoint1=codePoint1, lan1DhcpRelease=lan1DhcpRelease, codePoint51=codePoint51, bridgeCbRFStatfloods=bridgeCbRFStatfloods, codePoint35=codePoint35, lanDhcpStatus=lanDhcpStatus, codePoint13=codePoint13, subnetMask10=subnetMask10, rfStatXmtLTResult=rfStatXmtLTResult, port2UDPFilter=port2UDPFilter, mac4VIDMapVid=mac4VIDMapVid, whispLayer2NeighborTable=whispLayer2NeighborTable, numDFSDetections=numDFSDetections, whispBoxRFConfigRadios=whispBoxRFConfigRadios, packetFilterDirection=packetFilterDirection, codePoint3=codePoint3, cyclicPrefix=cyclicPrefix, mac6VIDMapVid=mac6VIDMapVid, mngtIP7=mngtIP7, allowColocation=allowColocation, port3TCPFilter=port3TCPFilter, allOtherIpFilter=allOtherIpFilter, port1UDPFilter=port1UDPFilter, codePoint28=codePoint28, subnetMask6=subnetMask6, codePoint57=codePoint57, pppoeCtlPriority=pppoeCtlPriority, reboot=reboot, timedSpectrumAnalysisDurationBox=timedSpectrumAnalysisDurationBox, rfStatUnkwnFeatBcnRcvCnt=rfStatUnkwnFeatBcnRcvCnt, installationColorCode=installationColorCode, fecOutErrorsCount=fecOutErrorsCount, apType=apType, bridgeCbRFStatuout=bridgeCbRFStatuout, bridgeCbRFStatbin=bridgeCbRFStatbin, codePoint5=codePoint5, codePoint42=codePoint42, antType=antType, trapIP2=trapIP2, codePoint47=codePoint47, whispBoxSoftwareVer=whispBoxSoftwareVer, rfOutDiscardsCount=rfOutDiscardsCount, pppoeFilter=pppoeFilter, bridgeCbRFStatbtosscap=bridgeCbRFStatbtosscap, subnetMask7=subnetMask7, rfStatRSSIOutOfRange=rfStatRSSIOutOfRange, bridgeCbErrStatApRfQSend=bridgeCbErrStatApRfQSend, codePoint36=codePoint36, mac2VIDMapVid=mac2VIDMapVid, trap7=trap7, radioPaths=radioPaths, mac5VIDMapVid=mac5VIDMapVid, region=region, aggregateBandwidthCap=aggregateBandwidthCap, trapDomainNameAppend=trapDomainNameAppend, whispBoxEvntLog=whispBoxEvntLog, codePoint62=codePoint62, whispBridgeDesLuid=whispBridgeDesLuid, snmpTrapPort=snmpTrapPort, whispBridgeHash=whispBridgeHash, bridgeCbFecStatbtoss=bridgeCbFecStatbtoss, bridgeCbFecStatutosscap=bridgeCbFecStatutosscap, rebootIfRequired=rebootIfRequired, whispBoxBridgeEntry=whispBoxBridgeEntry, whispUserTable=whispUserTable, whispBoxCPTableGroup=whispBoxCPTableGroup, whispBridgeTbFree=whispBridgeTbFree, subnetMask3=subnetMask3, regionAsia=regionAsia, whispVID=whispVID, whispBoxLevelMibModule=whispBoxLevelMibModule, agingTimeout=agingTimeout, radioConfigIndex=radioConfigIndex, bridgeCbErrStatSendMsg=bridgeCbErrStatSendMsg, mngtIP2=mngtIP2, allowVIDAccess=allowVIDAccess, codePoint2=codePoint2, frequency=frequency, mngtIP4=mngtIP4, rfStatRcvLTStart=rfStatRcvLTStart, managementVID=managementVID, bootpcFilter=bootpcFilter, dhcpLanSubnetMask=dhcpLanSubnetMask, bridgeCbErrStatNI1QSend=bridgeCbErrStatNI1QSend, deleteUser=deleteUser, displayOnlyAccess=displayOnlyAccess, port1TCPFilter=port1TCPFilter, whispBoxRFConfigRadioEntry=whispBoxRFConfigRadioEntry, rfStatPLLOutOfLockCnt=rfStatPLLOutOfLockCnt, allowRejectThenLocal=allowRejectThenLocal, addCustomFreqList=addCustomFreqList, whispBoxBridgeTable=whispBoxBridgeTable, rfOutDiscardsOverloadCount=rfOutDiscardsOverloadCount, bootpsFilter=bootpsFilter, hwsCompatibility=hwsCompatibility, pathIndex=pathIndex, codePoint50=codePoint50, whispUserEntry=whispUserEntry, lanDhcpState=lanDhcpState, userLoginName=userLoginName, radioEngKeyed=radioEngKeyed, mngtIP6=mngtIP6, regionCode=regionCode, swVersion=swVersion, interleave=interleave, mac3VIDMapAddr=mac3VIDMapAddr, rfStatTempOutOfRange=rfStatTempOutOfRange, snmpMibPerm=snmpMibPerm, whispBoxBTGroup=whispBoxBTGroup, rfStatUnsupFeatBcnRcvCnt=rfStatUnsupFeatBcnRcvCnt, whispBoxUserTableGroup=whispBoxUserTableGroup, codePoint14=codePoint14, mac10VIDMapAddr=mac10VIDMapAddr, whispLayer2NeighborTableGroup=whispLayer2NeighborTableGroup, whispVAge=whispVAge, trapIP4=trapIP4, dhcpRfPublicIp=dhcpRfPublicIp, codePoint23=codePoint23, whispBoxRFPhysicalRadioFrequencyEntry=whispBoxRFPhysicalRadioFrequencyEntry, whispBoxStatus=whispBoxStatus, rxOverrunPkts=rxOverrunPkts, radioRateAdaptUL=radioRateAdaptUL, syslogMinLevel=syslogMinLevel, saveFlash=saveFlash, webAutoUpdate=webAutoUpdate, whispBoxBoot=whispBoxBoot, fecInDiscardsCount=fecInDiscardsCount, trap9=trap9, mac10VIDMapVid=mac10VIDMapVid, agcGainRxCH1=agcGainRxCH1, codePoint54=codePoint54, entryIndex=entryIndex, removeVlanMember=removeVlanMember, whispBridgeAge=whispBridgeAge, trapIP3=trapIP3, natDhcpRenew=natDhcpRenew, packetOverloadCounter=packetOverloadCounter, fecInErrorsCount=fecInErrorsCount, antennaGain=antennaGain, subnetMask4=subnetMask4, codePoint11=codePoint11, bhTimingMode=bhTimingMode, mac7VIDMapAddr=mac7VIDMapAddr, userP2Filter=userP2Filter, whispBridgeTbErr=whispBridgeTbErr, userPswd=userPswd, codePoint16=codePoint16, outSyncCount=outSyncCount, whispBoxControlGroup=whispBoxControlGroup, whispBoxControls=whispBoxControls, mac8VIDMapVid=mac8VIDMapVid, codePoint30=codePoint30, whispBoxRFPhysicalRadioPaths=whispBoxRFPhysicalRadioPaths, rfStatUnderrunCount=rfStatUnderrunCount, lan3DhcpRenew=lan3DhcpRenew, bridgeCbFecStatbtosscap=bridgeCbFecStatbtosscap, codePoint8=codePoint8, mac4VIDMapAddr=mac4VIDMapAddr, subnetMask2=subnetMask2, rfStatRcvCorruptControlCount=rfStatRcvCorruptControlCount, scheduling=scheduling, ftpPort=ftpPort, subnetMask8=subnetMask8, allOthersFilter=allOthersFilter, codePoint25=codePoint25, regionEurope=regionEurope, codePoint38=codePoint38, whispBridgeMacAddr=whispBridgeMacAddr, mngtIP9=mngtIP9, mac8VIDMapAddr=mac8VIDMapAddr, rfStatBadFreqBcnRcvCnt=rfStatBadFreqBcnRcvCnt, whispBoxBridgeVar=whispBoxBridgeVar, rfStatBeaconVerMismatchCnt=rfStatBeaconVerMismatchCnt, whispBoxRFPhysicalRadios=whispBoxRFPhysicalRadios, bridgeCbErrStatBridgeFull=bridgeCbErrStatBridgeFull, addCustomFreqMimo=addCustomFreqMimo, codePoint33=codePoint33, gpsInput=gpsInput, syslogStatTxSuccesses=syslogStatTxSuccesses, vlanMemberSource=vlanMemberSource, codePoint19=codePoint19)
