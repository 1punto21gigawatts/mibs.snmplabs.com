#
# PySNMP MIB module PROM-LAYER3-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PROM-LAYER3-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:42:14 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
MacAddress, promSwitching = mibBuilder.importSymbols("PROMINET-MIB", "MacAddress", "promSwitching")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, ModuleIdentity, Bits, Counter32, ObjectIdentity, NotificationType, Gauge32, IpAddress, TimeTicks, Counter64, MibIdentifier, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "ModuleIdentity", "Bits", "Counter32", "ObjectIdentity", "NotificationType", "Gauge32", "IpAddress", "TimeTicks", "Counter64", "MibIdentifier", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
promSwitchingLayerIII = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 5, 6))
promL3AddrFwdMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 5, 6, 1))
class IPIPXNetNumber(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(4, 4)
    fixedLength = 4

class PromL3AddrFwdTblType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("ipunicast", 1), ("ipmulticast", 2), ("ipx", 3))

promL3AddrFwdDataBaseMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 5, 6, 1, 1))
promL3AddrFwdIPUnicastStatus = MibScalar((1, 3, 6, 1, 4, 1, 2167, 5, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipunicastEnabled", 1), ("ipunicastDisabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promL3AddrFwdIPUnicastStatus.setStatus('mandatory')
if mibBuilder.loadTexts: promL3AddrFwdIPUnicastStatus.setDescription('The operational state for the IP unicast forwarding table. ipunicastEnabled(1) - Table forwarding is enabled. ipunicastDisabled(2) - Table forwarding is disabled.')
promL3AddrFwdIPUnicastMode = MibScalar((1, 3, 6, 1, 4, 1, 2167, 5, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipunicastDA", 1), ("ipunicastSADA", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promL3AddrFwdIPUnicastMode.setStatus('mandatory')
if mibBuilder.loadTexts: promL3AddrFwdIPUnicastMode.setDescription('The table hash lookup mode for the IP unicast forwarding table. ipunicastDA(1) - Hash into table using protocol destination address only. ipunicastSADA(2) - Hash into table using protocol destination and source address only.')
promL3AddrFwdIPUnicastHash = MibScalar((1, 3, 6, 1, 4, 1, 2167, 5, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ipunicast8bit", 1), ("ipunicast10bit", 2), ("ipunicast12bit", 3))).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promL3AddrFwdIPUnicastHash.setStatus('mandatory')
if mibBuilder.loadTexts: promL3AddrFwdIPUnicastHash.setDescription('The hashing lookup key size for the IP unicast forwarding table. ipunicast8bit(1) - 8 bit hash key. ipunicast10bit(2) - 10 bit hash key. ipunicast12bit(3) - 12 bit hash key.')
promL3AddrFwdIPUnicastAgeStatus = MibScalar((1, 3, 6, 1, 4, 1, 2167, 5, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipunicastAgeEnabled", 1), ("ipunicastAgeDisabled", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promL3AddrFwdIPUnicastAgeStatus.setStatus('mandatory')
if mibBuilder.loadTexts: promL3AddrFwdIPUnicastAgeStatus.setDescription('The IP unicast forwarding table entry aging status. ipunicastAgeEnabled(1) - Table aging is enabled. ipunicastAgeDisabled(2) - Table aging is disabled.')
promL3AddrFwdIPUnicastAgePeriod = MibScalar((1, 3, 6, 1, 4, 1, 2167, 5, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 360)).clone(120)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promL3AddrFwdIPUnicastAgePeriod.setStatus('mandatory')
if mibBuilder.loadTexts: promL3AddrFwdIPUnicastAgePeriod.setDescription('The IP unicast forwarding table entry aging period in seconds.')
promL3AddrFwdIPUnicastMaxEntries = MibScalar((1, 3, 6, 1, 4, 1, 2167, 5, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99999)).clone(15000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promL3AddrFwdIPUnicastMaxEntries.setStatus('mandatory')
if mibBuilder.loadTexts: promL3AddrFwdIPUnicastMaxEntries.setDescription('The maximum cache entries for IP unicast (Cajun1 1 - 43007, Cajun2 1 - 82174).')
promL3AddrFwdIPUnicastActiveEntries = MibScalar((1, 3, 6, 1, 4, 1, 2167, 5, 6, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promL3AddrFwdIPUnicastActiveEntries.setStatus('mandatory')
if mibBuilder.loadTexts: promL3AddrFwdIPUnicastActiveEntries.setDescription('The count of active entries in the IP unicast forwarding table.')
promL3AddrFwdIPUnicastAddedEntries = MibScalar((1, 3, 6, 1, 4, 1, 2167, 5, 6, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promL3AddrFwdIPUnicastAddedEntries.setStatus('mandatory')
if mibBuilder.loadTexts: promL3AddrFwdIPUnicastAddedEntries.setDescription('The count of active entries which have been added to the IP unicast forwarding table.')
promL3AddrFwdIPUnicastRemovedEntries = MibScalar((1, 3, 6, 1, 4, 1, 2167, 5, 6, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promL3AddrFwdIPUnicastRemovedEntries.setStatus('mandatory')
if mibBuilder.loadTexts: promL3AddrFwdIPUnicastRemovedEntries.setDescription('The count of active entries which have been removed from the IP unicast forwarding table.')
promL3AddrFwdIPUnicastAgedEntries = MibScalar((1, 3, 6, 1, 4, 1, 2167, 5, 6, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promL3AddrFwdIPUnicastAgedEntries.setStatus('mandatory')
if mibBuilder.loadTexts: promL3AddrFwdIPUnicastAgedEntries.setDescription('The count of active entries which have aged away in the IP unicast forwarding table.')
promL3AddrFwdIPMulticastStatus = MibScalar((1, 3, 6, 1, 4, 1, 2167, 5, 6, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipmulticastEnabled", 1), ("ipmulticastDisabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promL3AddrFwdIPMulticastStatus.setStatus('mandatory')
if mibBuilder.loadTexts: promL3AddrFwdIPMulticastStatus.setDescription('The operational state for the IP multicast forwarding table. ipmulticastEnabled(1) - Table forwarding is enabled. ipmulticastDisabled(2) - Table forwarding is disabled.')
promL3AddrFwdIPMulticastMode = MibScalar((1, 3, 6, 1, 4, 1, 2167, 5, 6, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipmulticastDA", 1), ("ipmulticastSADA", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promL3AddrFwdIPMulticastMode.setStatus('mandatory')
if mibBuilder.loadTexts: promL3AddrFwdIPMulticastMode.setDescription('The table hash lookup mode for the IP multicast forwarding table. ipmulticastDA(1) - Hash into table using protocol destination address only. ipmulticastSADA(2) - Hash into table using protocol destination and source address only.')
promL3AddrFwdIPMulticastHash = MibScalar((1, 3, 6, 1, 4, 1, 2167, 5, 6, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ipmulticast8bit", 1), ("ipmulticast10bit", 2), ("ipmulticast12bit", 3))).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promL3AddrFwdIPMulticastHash.setStatus('mandatory')
if mibBuilder.loadTexts: promL3AddrFwdIPMulticastHash.setDescription('The hashing lookup key size for the IP multicast forwarding table. ipmulticast8bit(1) - 8 bit hash key. ipmulticast10bit(2) - 10 bit hash key. ipmulticast12bit(3) - 12 bit hash key.')
promL3AddrFwdIPMulticastAgeStatus = MibScalar((1, 3, 6, 1, 4, 1, 2167, 5, 6, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipmulticastAgeEnabled", 1), ("ipmulticastAgeDisabled", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promL3AddrFwdIPMulticastAgeStatus.setStatus('mandatory')
if mibBuilder.loadTexts: promL3AddrFwdIPMulticastAgeStatus.setDescription('The IP multicast forwarding table entry aging status. ipmulticastAgeEnabled(1) - Table aging enabled. ipmulticastAgeDisabled(2) - Table aging disabled.')
promL3AddrFwdIPMulticastAgePeriod = MibScalar((1, 3, 6, 1, 4, 1, 2167, 5, 6, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 360)).clone(120)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promL3AddrFwdIPMulticastAgePeriod.setStatus('mandatory')
if mibBuilder.loadTexts: promL3AddrFwdIPMulticastAgePeriod.setDescription('The IP multicast forwarding table entry aging period in seconds.')
promL3AddrFwdIPMulticastMaxEntries = MibScalar((1, 3, 6, 1, 4, 1, 2167, 5, 6, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99999)).clone(15000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promL3AddrFwdIPMulticastMaxEntries.setStatus('mandatory')
if mibBuilder.loadTexts: promL3AddrFwdIPMulticastMaxEntries.setDescription('The maximum cache entries for IP multicast (Cajun1 1 - 43007, Cajun2 1 - 82174).')
promL3AddrFwdIPMulticastActiveEntries = MibScalar((1, 3, 6, 1, 4, 1, 2167, 5, 6, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promL3AddrFwdIPMulticastActiveEntries.setStatus('mandatory')
if mibBuilder.loadTexts: promL3AddrFwdIPMulticastActiveEntries.setDescription('The count of active entries in the IP multicast forwarding table.')
promL3AddrFwdIPMulticastAddedEntries = MibScalar((1, 3, 6, 1, 4, 1, 2167, 5, 6, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promL3AddrFwdIPMulticastAddedEntries.setStatus('mandatory')
if mibBuilder.loadTexts: promL3AddrFwdIPMulticastAddedEntries.setDescription('The count of active entries which have been added to the IP multicast forwarding table.')
promL3AddrFwdIPMulticastRemovedEntries = MibScalar((1, 3, 6, 1, 4, 1, 2167, 5, 6, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promL3AddrFwdIPMulticastRemovedEntries.setStatus('mandatory')
if mibBuilder.loadTexts: promL3AddrFwdIPMulticastRemovedEntries.setDescription('The count of active entries which have been removed from the IP multicast forwarding table.')
promL3AddrFwdIPMulticastAgedEntries = MibScalar((1, 3, 6, 1, 4, 1, 2167, 5, 6, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promL3AddrFwdIPMulticastAgedEntries.setStatus('mandatory')
if mibBuilder.loadTexts: promL3AddrFwdIPMulticastAgedEntries.setDescription('The count of active entries which have aged away in the IP Multicast forwarding table.')
promL3AddrFwdIPXStatus = MibScalar((1, 3, 6, 1, 4, 1, 2167, 5, 6, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipxEnabled", 1), ("ipxDisabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promL3AddrFwdIPXStatus.setStatus('mandatory')
if mibBuilder.loadTexts: promL3AddrFwdIPXStatus.setDescription('The operational state for the IPX forwarding table. ipxEnabled(1) - Table forwarding is enabled. ipxDisabled(2) - Table forwarding is disabled.')
promL3AddrFwdIPXMode = MibScalar((1, 3, 6, 1, 4, 1, 2167, 5, 6, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipxDA", 1), ("ipxSADA", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promL3AddrFwdIPXMode.setStatus('mandatory')
if mibBuilder.loadTexts: promL3AddrFwdIPXMode.setDescription('The table hashing lookup mode for the IPX forwarding table. ipxDA(1) - Hash into table using protocol destination address only. ipxSADA(2) - Hash into table using protocol destination and source address only.')
promL3AddrFwdIPXHash = MibScalar((1, 3, 6, 1, 4, 1, 2167, 5, 6, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ipx8bit", 1), ("ipx10bit", 2), ("ipx12bit", 3))).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promL3AddrFwdIPXHash.setStatus('mandatory')
if mibBuilder.loadTexts: promL3AddrFwdIPXHash.setDescription('The hashing lookup key size for the IPX forwarding table. ipx8bit(1) - 8 bit hash key. ipx10bit(2) - 10 bit hash key. ipx12bit(3) - 12 bit hash key.')
promL3AddrFwdIPXAgeStatus = MibScalar((1, 3, 6, 1, 4, 1, 2167, 5, 6, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipxAgeEnabled", 1), ("ipxAgeDisabled", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promL3AddrFwdIPXAgeStatus.setStatus('mandatory')
if mibBuilder.loadTexts: promL3AddrFwdIPXAgeStatus.setDescription('The IPX forwarding table entry aging status. ipxAgeEnabled(1) - Table aging is enabled. ipxAgeDisabled(2) - Table aging is disabled.')
promL3AddrFwdIPXAgePeriod = MibScalar((1, 3, 6, 1, 4, 1, 2167, 5, 6, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 360)).clone(120)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promL3AddrFwdIPXAgePeriod.setStatus('mandatory')
if mibBuilder.loadTexts: promL3AddrFwdIPXAgePeriod.setDescription('The IPX forwarding table entry aging period in seconds.')
promL3AddrFwdIPXMaxEntries = MibScalar((1, 3, 6, 1, 4, 1, 2167, 5, 6, 1, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99999)).clone(15000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promL3AddrFwdIPXMaxEntries.setStatus('mandatory')
if mibBuilder.loadTexts: promL3AddrFwdIPXMaxEntries.setDescription('The maximum cache entries for IPX (Cajun1 1 - 43007, Cajun2 1 - 82174).')
promL3AddrFwdIPXActiveEntries = MibScalar((1, 3, 6, 1, 4, 1, 2167, 5, 6, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promL3AddrFwdIPXActiveEntries.setStatus('mandatory')
if mibBuilder.loadTexts: promL3AddrFwdIPXActiveEntries.setDescription('The count of active entries in the IPX forwarding table.')
promL3AddrFwdIPXAddedEntries = MibScalar((1, 3, 6, 1, 4, 1, 2167, 5, 6, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promL3AddrFwdIPXAddedEntries.setStatus('mandatory')
if mibBuilder.loadTexts: promL3AddrFwdIPXAddedEntries.setDescription('The count of active entries which have been added to the IPX forwarding table.')
promL3AddrFwdIPXRemovedEntries = MibScalar((1, 3, 6, 1, 4, 1, 2167, 5, 6, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promL3AddrFwdIPXRemovedEntries.setStatus('mandatory')
if mibBuilder.loadTexts: promL3AddrFwdIPXRemovedEntries.setDescription('The count of active entries which have been removed from the IPX forwarding table.')
promL3AddrFwdIPXAgedEntries = MibScalar((1, 3, 6, 1, 4, 1, 2167, 5, 6, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promL3AddrFwdIPXAgedEntries.setStatus('mandatory')
if mibBuilder.loadTexts: promL3AddrFwdIPXAgedEntries.setDescription('The count of active entries which have aged away in the IPX forwarding table.')
promL3AddrFwdSysMaxEntries = MibScalar((1, 3, 6, 1, 4, 1, 2167, 5, 6, 1, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 999999)).clone(130000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promL3AddrFwdSysMaxEntries.setStatus('mandatory')
if mibBuilder.loadTexts: promL3AddrFwdSysMaxEntries.setDescription('The maximum number of system forwarding cache entries.')
promL3AddrFwdCacheTable = MibTable((1, 3, 6, 1, 4, 1, 2167, 5, 6, 1, 1, 32), )
if mibBuilder.loadTexts: promL3AddrFwdCacheTable.setStatus('mandatory')
if mibBuilder.loadTexts: promL3AddrFwdCacheTable.setDescription('A table of L3 address forwarding entries. The address table is used by the routing function to perform forwarding and filtering decisions. Each of the three tables are indexed by the table type, IP unicast, IP multicast or IPX.')
promL3AddrFwdCacheEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2167, 5, 6, 1, 1, 32, 1), ).setIndexNames((0, "PROM-LAYER3-MIB", "promL3AddrFwdCacheFabricPortID"), (0, "PROM-LAYER3-MIB", "promL3AddrFwdCacheTblType"), (0, "PROM-LAYER3-MIB", "promL3AddrFwdCacheDstAddr"), (0, "PROM-LAYER3-MIB", "promL3AddrFwdCacheSrcAddr"), (0, "PROM-LAYER3-MIB", "promL3AddrFwdCacheDstVlanID"), (0, "PROM-LAYER3-MIB", "promL3AddrFwdCacheSrcVlanID"), (0, "PROM-LAYER3-MIB", "promL3AddrFwdCacheDstPort"), (0, "PROM-LAYER3-MIB", "promL3AddrFwdCacheSrcPort"), (0, "PROM-LAYER3-MIB", "promL3AddrFwdCacheComp"))
if mibBuilder.loadTexts: promL3AddrFwdCacheEntry.setStatus('mandatory')
if mibBuilder.loadTexts: promL3AddrFwdCacheEntry.setDescription('A particular address table entry. Each entry is indexed by concatenating some, not all, of the variables found in the forwarding entry.')
promL3AddrFwdCacheFabricPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 6, 1, 1, 32, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promL3AddrFwdCacheFabricPortID.setStatus('mandatory')
if mibBuilder.loadTexts: promL3AddrFwdCacheFabricPortID.setDescription('')
promL3AddrFwdCacheTblType = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 6, 1, 1, 32, 1, 2), PromL3AddrFwdTblType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promL3AddrFwdCacheTblType.setStatus('mandatory')
if mibBuilder.loadTexts: promL3AddrFwdCacheTblType.setDescription('')
promL3AddrFwdCacheDstAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 6, 1, 1, 32, 1, 3), IPIPXNetNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promL3AddrFwdCacheDstAddr.setStatus('mandatory')
if mibBuilder.loadTexts: promL3AddrFwdCacheDstAddr.setDescription('The destination outbound flow protocol host or network address.')
promL3AddrFwdCacheSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 6, 1, 1, 32, 1, 4), IPIPXNetNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promL3AddrFwdCacheSrcAddr.setStatus('mandatory')
if mibBuilder.loadTexts: promL3AddrFwdCacheSrcAddr.setDescription('The source inbound flow protocol host or network address.')
promL3AddrFwdCacheDstVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 6, 1, 1, 32, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promL3AddrFwdCacheDstVlanID.setStatus('mandatory')
if mibBuilder.loadTexts: promL3AddrFwdCacheDstVlanID.setDescription('The destination outbound flow VLAN ID.')
promL3AddrFwdCacheSrcVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 6, 1, 1, 32, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promL3AddrFwdCacheSrcVlanID.setStatus('mandatory')
if mibBuilder.loadTexts: promL3AddrFwdCacheSrcVlanID.setDescription('The source inbound flow VLAN ID.')
promL3AddrFwdCacheDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 6, 1, 1, 32, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promL3AddrFwdCacheDstPort.setStatus('mandatory')
if mibBuilder.loadTexts: promL3AddrFwdCacheDstPort.setDescription('The destination outbound flow TCP/UDP port or IPX socket number.')
promL3AddrFwdCacheSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 6, 1, 1, 32, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promL3AddrFwdCacheSrcPort.setStatus('mandatory')
if mibBuilder.loadTexts: promL3AddrFwdCacheSrcPort.setDescription('The source inbound flow TCP/UDP port or IPX socket number.')
promL3AddrFwdCacheComp = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 6, 1, 1, 32, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("da", 1), ("da-sa", 2), ("da-prot", 3), ("da-dp", 4), ("da-sa-prot", 5), ("da-sa-dp-sp", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promL3AddrFwdCacheComp.setStatus('mandatory')
if mibBuilder.loadTexts: promL3AddrFwdCacheComp.setDescription('Describes outbound frame format. da(1) - DA compare. da-sa(2) - DA and SA compare. da-prot(3) - DA and protocol type compare. da-dp(4) - DA and destination port compare. da-sa-prot(5) - DA and SA and protocol compare. da-sa-dp-sp(6) - DA and SA and destination and source port compare.')
promL3AddrFwdCacheNxtHopMac = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 6, 1, 1, 32, 1, 10), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promL3AddrFwdCacheNxtHopMac.setStatus('mandatory')
if mibBuilder.loadTexts: promL3AddrFwdCacheNxtHopMac.setDescription('The destination outbound next hop MAC address.')
promL3AddrFwdCacheIPXUse = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 6, 1, 1, 32, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("usePDUhost", 1), ("useFWDhost", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promL3AddrFwdCacheIPXUse.setStatus('mandatory')
if mibBuilder.loadTexts: promL3AddrFwdCacheIPXUse.setDescription('USE IPX PDU host address (DNODE) as next hop MAC. usePDUhost(1) - Use the host DNODE address as next hop MAC address. useFWDhost(2) - Use the forwarding entry next hop MAC address as next hop.')
promL3AddrFwdCacheFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 6, 1, 1, 32, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("etherV2", 1), ("etherIPXDSAP", 2), ("etherSNAP", 3), ("etherIPXRAW", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promL3AddrFwdCacheFormat.setStatus('mandatory')
if mibBuilder.loadTexts: promL3AddrFwdCacheFormat.setDescription('Describes network outbound frame format. etherV2(1) - Ethernet version 2 - IP and IPX. etherIPXDSAP(2) - DSAP and SSAP = 0xE0, IPX only. etherSNAP(3) - SAP/SNAP - IP and IPX. etherIPXRAW(4) - DSAP and SSAP = 0xFF, IPX only.')
promL3AddrFwdCacheTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 6, 1, 1, 32, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ttl-IGNORE", 1), ("ttl-GT32", 2), ("ttl-GT64", 3), ("ttl-GT128", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promL3AddrFwdCacheTTL.setStatus('mandatory')
if mibBuilder.loadTexts: promL3AddrFwdCacheTTL.setDescription('IP multicast TTL scope ranges. ttl-IGNORE(1) - ignore TTL checks for ip multicast. ttl-GT32(2) - forward if TTL greater than 32 decimal. ttl-GT64(3) - forward if TTL greater than 64 decimal. ttl-GT128(4) - forward if TTL greater than 128 decimal.')
promL3AddrFwdCacheFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 6, 1, 1, 32, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("filterON", 1), ("filterOFF", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promL3AddrFwdCacheFilter.setStatus('mandatory')
if mibBuilder.loadTexts: promL3AddrFwdCacheFilter.setDescription('Filter flow(s) based on entry. filterON(1) - Filter is enabled. filterOFF(2) - Filter is disabled.')
promL3AddrFwdCachePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 6, 1, 1, 32, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promL3AddrFwdCachePriority.setStatus('mandatory')
if mibBuilder.loadTexts: promL3AddrFwdCachePriority.setDescription('Flow priority.')
promL3AddrFwdCachePersistence = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 6, 1, 1, 32, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("invalid", 1), ("permanent", 2), ("deleteOnTimeout", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promL3AddrFwdCachePersistence.setStatus('mandatory')
if mibBuilder.loadTexts: promL3AddrFwdCachePersistence.setDescription('This object indicates the persistence of this entry: invalid(1) - Writing this value to the object deletes the entry from the table. permanent(2) - Address is not aged out. deleteOnTimeout(3) - Typically, address entries are learned dynamically by the switch. These entries are aged out of the table if they are not active on the network.')
promL3AddrFwdCacheStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 6, 1, 1, 32, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("learned", 1), ("mgmt", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promL3AddrFwdCacheStatus.setStatus('mandatory')
if mibBuilder.loadTexts: promL3AddrFwdCacheStatus.setDescription('This object indicates the status of the entry: learned(1) - This entry was learned dynamically. mgmt(2) - This entry was added or modified by management. Entries that have been added by management and made permanent')
promL3AddrFwdControlTable = MibTable((1, 3, 6, 1, 4, 1, 2167, 5, 6, 1, 1, 33), )
if mibBuilder.loadTexts: promL3AddrFwdControlTable.setStatus('mandatory')
if mibBuilder.loadTexts: promL3AddrFwdControlTable.setDescription('A table of L3 address forwarding entries. The address table is used by the routing function to perform forwarding and filtering decisions. Each of the three tables are indexed by the table type, IP unicast, IP multicast or IPX.')
promL3AddrFwdControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2167, 5, 6, 1, 1, 33, 1), ).setIndexNames((0, "PROM-LAYER3-MIB", "promL3AddrFwdControlFabricPortID"), (0, "PROM-LAYER3-MIB", "promL3AddrFwdControlTblType"), (0, "PROM-LAYER3-MIB", "promL3AddrFwdControlDstAddr"), (0, "PROM-LAYER3-MIB", "promL3AddrFwdControlSrcAddr"), (0, "PROM-LAYER3-MIB", "promL3AddrFwdControlDstVlanID"), (0, "PROM-LAYER3-MIB", "promL3AddrFwdControlSrcVlanID"), (0, "PROM-LAYER3-MIB", "promL3AddrFwdControlDstPort"), (0, "PROM-LAYER3-MIB", "promL3AddrFwdControlSrcPort"), (0, "PROM-LAYER3-MIB", "promL3AddrFwdControlComp"))
if mibBuilder.loadTexts: promL3AddrFwdControlEntry.setStatus('mandatory')
if mibBuilder.loadTexts: promL3AddrFwdControlEntry.setDescription('A particular address table entry. Each entry is indexed by concatenating some, not all, of the variables found in the forwarding entry.')
promL3AddrFwdControlFabricPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 6, 1, 1, 33, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promL3AddrFwdControlFabricPortID.setStatus('mandatory')
if mibBuilder.loadTexts: promL3AddrFwdControlFabricPortID.setDescription('')
promL3AddrFwdControlTblType = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 6, 1, 1, 33, 1, 2), PromL3AddrFwdTblType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promL3AddrFwdControlTblType.setStatus('mandatory')
if mibBuilder.loadTexts: promL3AddrFwdControlTblType.setDescription('')
promL3AddrFwdControlDstAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 6, 1, 1, 33, 1, 3), IPIPXNetNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promL3AddrFwdControlDstAddr.setStatus('mandatory')
if mibBuilder.loadTexts: promL3AddrFwdControlDstAddr.setDescription('The destination outbound flow protocol host or network address.')
promL3AddrFwdControlSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 6, 1, 1, 33, 1, 4), IPIPXNetNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promL3AddrFwdControlSrcAddr.setStatus('mandatory')
if mibBuilder.loadTexts: promL3AddrFwdControlSrcAddr.setDescription('The source inbound flow protocol host or network address.')
promL3AddrFwdControlDstVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 6, 1, 1, 33, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promL3AddrFwdControlDstVlanID.setStatus('mandatory')
if mibBuilder.loadTexts: promL3AddrFwdControlDstVlanID.setDescription('The destination outbound flow VLAN ID.')
promL3AddrFwdControlSrcVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 6, 1, 1, 33, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promL3AddrFwdControlSrcVlanID.setStatus('mandatory')
if mibBuilder.loadTexts: promL3AddrFwdControlSrcVlanID.setDescription('The source inbound flow VLAN ID.')
promL3AddrFwdControlDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 6, 1, 1, 33, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promL3AddrFwdControlDstPort.setStatus('mandatory')
if mibBuilder.loadTexts: promL3AddrFwdControlDstPort.setDescription('The destination outbound flow TCP/UDP port or IPX socket number.')
promL3AddrFwdControlSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 6, 1, 1, 33, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promL3AddrFwdControlSrcPort.setStatus('mandatory')
if mibBuilder.loadTexts: promL3AddrFwdControlSrcPort.setDescription('The source inbound flow TCP/UDP port or IPX socket number.')
promL3AddrFwdControlComp = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 6, 1, 1, 33, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("da", 1), ("da-sa", 2), ("da-prot", 3), ("da-dp", 4), ("da-sa-prot", 5), ("da-sa-dp-sp", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promL3AddrFwdControlComp.setStatus('mandatory')
if mibBuilder.loadTexts: promL3AddrFwdControlComp.setDescription('Describes outbound frame format. da(1) - DA compare. da-sa(2) - DA and SA compare. da-prot(3) - DA and protocol type compare. da-dp(4) - DA and destination port compare. da-sa-prot(5) - DA and SA and protocol compare. da-sa-dp-sp(6) - DA and SA and destination and source port compare.')
promL3AddrFwdControlNxtHopMac = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 6, 1, 1, 33, 1, 10), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promL3AddrFwdControlNxtHopMac.setStatus('mandatory')
if mibBuilder.loadTexts: promL3AddrFwdControlNxtHopMac.setDescription('The destination outbound next hop MAC address.')
promL3AddrFwdControlIPXUse = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 6, 1, 1, 33, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("usePDUhost", 1), ("useFWDhost", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promL3AddrFwdControlIPXUse.setStatus('mandatory')
if mibBuilder.loadTexts: promL3AddrFwdControlIPXUse.setDescription('USE IPX PDU host address (DNODE) as next hop MAC. usePDUhost(1) - Use the host DNODE address as next hop MAC address. useFWDhost(2) - Use the forwarding entry next hop MAC address as next hop.')
promL3AddrFwdControlFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 6, 1, 1, 33, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("etherV2", 1), ("etherIPXDSAP", 2), ("etherSNAP", 3), ("etherIPXRAW", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promL3AddrFwdControlFormat.setStatus('mandatory')
if mibBuilder.loadTexts: promL3AddrFwdControlFormat.setDescription('Describes network outbound frame format. etherV2(1) - Ethernet version 2 - IP and IPX. etherIPXDSAP(2) - DSAP and SSAP = 0xE0, IPX only. etherSNAP(3) - SAP/SNAP - IP and IPX. etherIPXRAW(4) - DSAP and SSAP = 0xFF, IPX only.')
promL3AddrFwdControlTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 6, 1, 1, 33, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ttl-IGNORE", 1), ("ttl-GT32", 2), ("ttl-GT64", 3), ("ttl-GT128", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promL3AddrFwdControlTTL.setStatus('mandatory')
if mibBuilder.loadTexts: promL3AddrFwdControlTTL.setDescription('IP multicast TTL scope ranges. ttl-IGNORE(1) - ignore TTL checks for ip multicast. ttl-GT32(2) - forward if TTL greater than 32 decimal. ttl-GT64(3) - forward if TTL greater than 64 decimal. ttl-GT128(4) - forward if TTL greater than 128 decimal.')
promL3AddrFwdControlFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 6, 1, 1, 33, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("filterON", 1), ("filterOFF", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promL3AddrFwdControlFilter.setStatus('mandatory')
if mibBuilder.loadTexts: promL3AddrFwdControlFilter.setDescription('Filter flow(s) based on entry. filterON(1) - Filter is enabled. filterOFF(2) - Filter is disabled.')
promL3AddrFwdControlPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 6, 1, 1, 33, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promL3AddrFwdControlPriority.setStatus('mandatory')
if mibBuilder.loadTexts: promL3AddrFwdControlPriority.setDescription('Flow priority.')
promL3AddrFwdControlPersistence = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 6, 1, 1, 33, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("invalid", 1), ("permanent", 2), ("deleteOnTimeout", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promL3AddrFwdControlPersistence.setStatus('mandatory')
if mibBuilder.loadTexts: promL3AddrFwdControlPersistence.setDescription('This object indicates the persistence of this entry: invalid(1) - Writing this value to the object deletes the entry from the table. permanent(2) - Address is not aged out. deleteOnTimeout(3) - Typically, address entries are learned dynamically by the switch. These entries are aged out of the table if they are not active on the network.')
mibBuilder.exportSymbols("PROM-LAYER3-MIB", promL3AddrFwdIPUnicastAgedEntries=promL3AddrFwdIPUnicastAgedEntries, promL3AddrFwdCacheDstAddr=promL3AddrFwdCacheDstAddr, PromL3AddrFwdTblType=PromL3AddrFwdTblType, promL3AddrFwdCacheSrcAddr=promL3AddrFwdCacheSrcAddr, promL3AddrFwdControlComp=promL3AddrFwdControlComp, promL3AddrFwdCacheFilter=promL3AddrFwdCacheFilter, promL3AddrFwdIPMulticastMode=promL3AddrFwdIPMulticastMode, promL3AddrFwdControlTTL=promL3AddrFwdControlTTL, promL3AddrFwdControlDstVlanID=promL3AddrFwdControlDstVlanID, promL3AddrFwdCacheTTL=promL3AddrFwdCacheTTL, promL3AddrFwdControlTblType=promL3AddrFwdControlTblType, promL3AddrFwdIPXAddedEntries=promL3AddrFwdIPXAddedEntries, promL3AddrFwdSysMaxEntries=promL3AddrFwdSysMaxEntries, promL3AddrFwdIPUnicastAgePeriod=promL3AddrFwdIPUnicastAgePeriod, promL3AddrFwdIPUnicastAgeStatus=promL3AddrFwdIPUnicastAgeStatus, promSwitchingLayerIII=promSwitchingLayerIII, promL3AddrFwdIPUnicastHash=promL3AddrFwdIPUnicastHash, promL3AddrFwdControlPriority=promL3AddrFwdControlPriority, promL3AddrFwdIPMulticastStatus=promL3AddrFwdIPMulticastStatus, promL3AddrFwdIPUnicastStatus=promL3AddrFwdIPUnicastStatus, promL3AddrFwdCacheTable=promL3AddrFwdCacheTable, promL3AddrFwdIPXAgedEntries=promL3AddrFwdIPXAgedEntries, promL3AddrFwdMgmt=promL3AddrFwdMgmt, promL3AddrFwdCacheNxtHopMac=promL3AddrFwdCacheNxtHopMac, promL3AddrFwdCacheIPXUse=promL3AddrFwdCacheIPXUse, promL3AddrFwdCachePriority=promL3AddrFwdCachePriority, promL3AddrFwdCacheFabricPortID=promL3AddrFwdCacheFabricPortID, promL3AddrFwdCachePersistence=promL3AddrFwdCachePersistence, promL3AddrFwdControlEntry=promL3AddrFwdControlEntry, promL3AddrFwdControlNxtHopMac=promL3AddrFwdControlNxtHopMac, promL3AddrFwdControlPersistence=promL3AddrFwdControlPersistence, promL3AddrFwdIPMulticastAgedEntries=promL3AddrFwdIPMulticastAgedEntries, promL3AddrFwdIPXAgePeriod=promL3AddrFwdIPXAgePeriod, promL3AddrFwdCacheDstVlanID=promL3AddrFwdCacheDstVlanID, promL3AddrFwdIPXRemovedEntries=promL3AddrFwdIPXRemovedEntries, promL3AddrFwdControlSrcAddr=promL3AddrFwdControlSrcAddr, promL3AddrFwdIPMulticastAgeStatus=promL3AddrFwdIPMulticastAgeStatus, promL3AddrFwdIPXAgeStatus=promL3AddrFwdIPXAgeStatus, promL3AddrFwdIPMulticastHash=promL3AddrFwdIPMulticastHash, promL3AddrFwdControlSrcVlanID=promL3AddrFwdControlSrcVlanID, promL3AddrFwdIPMulticastRemovedEntries=promL3AddrFwdIPMulticastRemovedEntries, promL3AddrFwdDataBaseMgmt=promL3AddrFwdDataBaseMgmt, promL3AddrFwdControlFabricPortID=promL3AddrFwdControlFabricPortID, promL3AddrFwdControlFilter=promL3AddrFwdControlFilter, promL3AddrFwdIPMulticastAgePeriod=promL3AddrFwdIPMulticastAgePeriod, promL3AddrFwdIPUnicastActiveEntries=promL3AddrFwdIPUnicastActiveEntries, promL3AddrFwdIPMulticastActiveEntries=promL3AddrFwdIPMulticastActiveEntries, promL3AddrFwdCacheFormat=promL3AddrFwdCacheFormat, promL3AddrFwdIPXStatus=promL3AddrFwdIPXStatus, promL3AddrFwdControlFormat=promL3AddrFwdControlFormat, IPIPXNetNumber=IPIPXNetNumber, promL3AddrFwdControlIPXUse=promL3AddrFwdControlIPXUse, promL3AddrFwdControlDstPort=promL3AddrFwdControlDstPort, promL3AddrFwdIPUnicastAddedEntries=promL3AddrFwdIPUnicastAddedEntries, promL3AddrFwdIPUnicastMaxEntries=promL3AddrFwdIPUnicastMaxEntries, promL3AddrFwdCacheSrcVlanID=promL3AddrFwdCacheSrcVlanID, promL3AddrFwdCacheDstPort=promL3AddrFwdCacheDstPort, promL3AddrFwdControlSrcPort=promL3AddrFwdControlSrcPort, promL3AddrFwdIPXActiveEntries=promL3AddrFwdIPXActiveEntries, promL3AddrFwdCacheEntry=promL3AddrFwdCacheEntry, promL3AddrFwdIPUnicastMode=promL3AddrFwdIPUnicastMode, promL3AddrFwdIPUnicastRemovedEntries=promL3AddrFwdIPUnicastRemovedEntries, promL3AddrFwdIPXMode=promL3AddrFwdIPXMode, promL3AddrFwdIPMulticastAddedEntries=promL3AddrFwdIPMulticastAddedEntries, promL3AddrFwdIPXHash=promL3AddrFwdIPXHash, promL3AddrFwdIPXMaxEntries=promL3AddrFwdIPXMaxEntries, promL3AddrFwdCacheTblType=promL3AddrFwdCacheTblType, promL3AddrFwdCacheComp=promL3AddrFwdCacheComp, promL3AddrFwdCacheStatus=promL3AddrFwdCacheStatus, promL3AddrFwdCacheSrcPort=promL3AddrFwdCacheSrcPort, promL3AddrFwdControlDstAddr=promL3AddrFwdControlDstAddr, promL3AddrFwdIPMulticastMaxEntries=promL3AddrFwdIPMulticastMaxEntries, promL3AddrFwdControlTable=promL3AddrFwdControlTable)
