#
# PySNMP MIB module HM2-PLATFORM-QOS-DIFFSERV-PRIVATE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HM2-PLATFORM-QOS-DIFFSERV-PRIVATE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:32:07 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint")
HmEnabledStatus, hm2PlatformMibs = mibBuilder.importSymbols("HM2-TC-MIB", "HmEnabledStatus", "hm2PlatformMibs")
ifIndex, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "ifIndex", "InterfaceIndex")
InetPortNumber, = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetPortNumber")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Gauge32, TimeTicks, iso, Counter32, Counter64, NotificationType, Unsigned32, Integer32, MibIdentifier, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, IpAddress, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "TimeTicks", "iso", "Counter32", "Counter64", "NotificationType", "Unsigned32", "Integer32", "MibIdentifier", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "IpAddress", "ObjectIdentity")
StorageType, DisplayString, TextualConvention, RowStatus, MacAddress, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "StorageType", "DisplayString", "TextualConvention", "RowStatus", "MacAddress", "TruthValue")
hm2PlatformQOSDiffServPrivate = ModuleIdentity((1, 3, 6, 1, 4, 1, 248, 12, 7))
hm2PlatformQOSDiffServPrivate.setRevisions(('2011-10-28 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hm2PlatformQOSDiffServPrivate.setRevisionsDescriptions(('Initial version.',))
if mibBuilder.loadTexts: hm2PlatformQOSDiffServPrivate.setLastUpdated('201110280000Z')
if mibBuilder.loadTexts: hm2PlatformQOSDiffServPrivate.setOrganization('Hirschmann Automation and Control GmbH')
if mibBuilder.loadTexts: hm2PlatformQOSDiffServPrivate.setContactInfo('Postal: Stuttgarter Str. 45-51 72654 Neckartenzlingen Germany Phone: +49 7127 140 E-mail: hac.support@belden.com')
if mibBuilder.loadTexts: hm2PlatformQOSDiffServPrivate.setDescription('The Hirschmann Private Platform2 MIB for QoS DiffServ. Copyright (C) 2011. All Rights Reserved.')
class QosBurstSize(TextualConvention, Unsigned32):
    description = 'The number of kilobytes (Kbytes) in a packet that may be sent in a traffic stream without regard for other traffic streams.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 128)

class IntfDirection(TextualConvention, Integer32):
    description = "IntfDirection specifies a direction of data travel on an interface. 'inbound' traffic is operated on during reception from the interface, while 'outbound' traffic is operated on prior to transmission on the interface."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("in", 1), ("out", 2))

class EtypeValue(TextualConvention, Unsigned32):
    description = 'Ethertype value of a packet. The allowed value is 0x0600 to 0xFFFF.'
    status = 'current'
    displayHint = 'x'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1536, 65535)

class Ipv6AddressPrefix(TextualConvention, OctetString):
    description = 'This data type is used to model IPv6 address prefixes. This is a binary string of up to 16 octets in network byte-order.'
    status = 'current'
    displayHint = '2x:'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 16)

hm2AgentDiffServGenStatusGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 12, 7, 1))
hm2AgentDiffServGenStatusAdminMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 7, 1, 1), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentDiffServGenStatusAdminMode.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServGenStatusAdminMode.setDescription(' DiffServ Admin Mode')
hm2AgentDiffServGenStatusClassTableSize = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 7, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDiffServGenStatusClassTableSize.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServGenStatusClassTableSize.setDescription(' Current size of the Class Table')
hm2AgentDiffServGenStatusClassTableMax = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 7, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDiffServGenStatusClassTableMax.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServGenStatusClassTableMax.setDescription(' Max size of the Class Table')
hm2AgentDiffServGenStatusClassRuleTableSize = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 7, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDiffServGenStatusClassRuleTableSize.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServGenStatusClassRuleTableSize.setDescription(' Current size of Class Rule Table')
hm2AgentDiffServGenStatusClassRuleTableMax = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 7, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDiffServGenStatusClassRuleTableMax.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServGenStatusClassRuleTableMax.setDescription(' Max size of the Class Rule Table.')
hm2AgentDiffServGenStatusPolicyTableSize = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 7, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDiffServGenStatusPolicyTableSize.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServGenStatusPolicyTableSize.setDescription(' Current Size of the Policy Table.')
hm2AgentDiffServGenStatusPolicyTableMax = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 7, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDiffServGenStatusPolicyTableMax.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServGenStatusPolicyTableMax.setDescription(' Max size of the Policy Table')
hm2AgentDiffServGenStatusPolicyInstTableSize = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 7, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDiffServGenStatusPolicyInstTableSize.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServGenStatusPolicyInstTableSize.setDescription(' Current size of the Policy-Class Instance Table')
hm2AgentDiffServGenStatusPolicyInstTableMax = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 7, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDiffServGenStatusPolicyInstTableMax.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServGenStatusPolicyInstTableMax.setDescription(' Max size of the Policy-Class Instance Table')
hm2AgentDiffServGenStatusPolicyAttrTableSize = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 7, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDiffServGenStatusPolicyAttrTableSize.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServGenStatusPolicyAttrTableSize.setDescription(' Current size of the Policy Attribute Table')
hm2AgentDiffServGenStatusPolicyAttrTableMax = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 7, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDiffServGenStatusPolicyAttrTableMax.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServGenStatusPolicyAttrTableMax.setDescription(' Max size of the Policy Attribute Table')
hm2AgentDiffServGenStatusServiceTableSize = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 7, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDiffServGenStatusServiceTableSize.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServGenStatusServiceTableSize.setDescription(' Current size of the Service Table')
hm2AgentDiffServGenStatusServiceTableMax = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 7, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDiffServGenStatusServiceTableMax.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServGenStatusServiceTableMax.setDescription(' Max size of the Service Table')
hm2AgentDiffServClassGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 12, 7, 2))
hm2AgentDiffServClassIndexNextFree = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 7, 2, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDiffServClassIndexNextFree.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServClassIndexNextFree.setDescription('This object contains an unused value for classIndex, or a zero to indicate that none exists.')
hm2AgentDiffServClassTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 7, 2, 2), )
if mibBuilder.loadTexts: hm2AgentDiffServClassTable.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServClassTable.setDescription('A table of the DiffServ class entries')
hm2AgentDiffServClassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 7, 2, 2, 1), ).setIndexNames((0, "HM2-PLATFORM-QOS-DIFFSERV-PRIVATE-MIB", "hm2AgentDiffServClassIndex"))
if mibBuilder.loadTexts: hm2AgentDiffServClassEntry.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServClassEntry.setDescription('Represents entry for a DiffServ traffic class')
hm2AgentDiffServClassIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 7, 2, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hm2AgentDiffServClassIndex.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServClassIndex.setDescription('The identifier for DiffServ Class entry ')
hm2AgentDiffServClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 7, 2, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentDiffServClassName.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServClassName.setDescription('Name of the DiffServ traffic class')
hm2AgentDiffServClassType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 7, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("all", 1), ("any", 2), ("acl", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentDiffServClassType.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServClassType.setDescription('The class type indicates how the individual class match criteria are evaluated. For type all, all of the individual match conditions must be true for a packet to be considered a member of the class. For types any and acl, only one of the match criteria must be true for a packet to belong to the class; multiple matching criteria are evaluated in a sequential order, with the highest precedence awarded to the first criterion defined for the class. An acl class type copies its set of match criteria from the current rule definition of the specified ACL number.')
hm2AgentDiffServClassRuleIndexNextFree = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 7, 2, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDiffServClassRuleIndexNextFree.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServClassRuleIndexNextFree.setDescription('This object contains an unused value for classRuleIndex, or a zero to indicate that none exists. This index is maintained on a per-class basis.')
hm2AgentDiffServClassStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 7, 2, 2, 1, 6), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentDiffServClassStorageType.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServClassStorageType.setDescription('Storage-type for this conceptual row')
hm2AgentDiffServClassRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 7, 2, 2, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentDiffServClassRowStatus.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServClassRowStatus.setDescription("The status of this conceptual row. All RowStatus operations are permitted. Other columns in this row may be modified when the status is 'active'. Entries can not be deleted until all rows in hm2AgentDiffServClassRuleTable with corresponding values of hm2AgentDiffServClassIndex have been deleted.")
hm2AgentDiffServClassProtoType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 7, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentDiffServClassProtoType.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServClassProtoType.setDescription('The diffserv class protocol type used to indicate how to interpret any layer 3. This attribute is only valid if the value of hm2AgentDiffServClassProtoType is set to all(1) or any(2).')
hm2AgentDiffServClassRuleTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 7, 2, 3), )
if mibBuilder.loadTexts: hm2AgentDiffServClassRuleTable.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServClassRuleTable.setDescription('A table of the DiffServ Class Rule entries')
hm2AgentDiffServClassRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 7, 2, 3, 1), ).setIndexNames((0, "HM2-PLATFORM-QOS-DIFFSERV-PRIVATE-MIB", "hm2AgentDiffServClassIndex"), (0, "HM2-PLATFORM-QOS-DIFFSERV-PRIVATE-MIB", "hm2AgentDiffServClassRuleIndex"))
if mibBuilder.loadTexts: hm2AgentDiffServClassRuleEntry.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServClassRuleEntry.setDescription('Represents entry for a set of class-match rules')
hm2AgentDiffServClassRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 7, 2, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hm2AgentDiffServClassRuleIndex.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServClassRuleIndex.setDescription('The identifier for DiffServ Class Rule Table entry within a class')
hm2AgentDiffServClassRuleMatchEntryType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 7, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))).clone(namedValues=NamedValues(("cos", 1), ("dstip", 2), ("dstl4port", 3), ("dstmac", 4), ("every", 5), ("ipdscp", 6), ("ipprecedence", 7), ("iptos", 8), ("protocol", 9), ("refclass", 10), ("srcip", 11), ("srcl4port", 12), ("srcmac", 13), ("vlan", 14), ("cos2", 15), ("etype", 16), ("vlanid", 17), ("vlanid2", 18), ("flowLabel", 19), ("srcPrefix", 20), ("dstPrefix", 21)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentDiffServClassRuleMatchEntryType.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServClassRuleMatchEntryType.setDescription('Class Rule match entry type, it determines which one of the individual match conditions is defined for the present class rule. This object must be created before any other match object in this row.')
hm2AgentDiffServClassRuleMatchCos = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 7, 2, 3, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentDiffServClassRuleMatchCos.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServClassRuleMatchCos.setDescription('Three-bit user priority field in the 802.1Q tag header of a tagged Ethernet frame used as a class-match parameter - only valid if the hm2AgentDiffServClassRuleMatchEntryType is set to cos(1). For frames containing a double VLAN tag, this field is located in the first/outer tag.')
hm2AgentDiffServClassRuleMatchDstIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 7, 2, 3, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentDiffServClassRuleMatchDstIpAddr.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServClassRuleMatchDstIpAddr.setDescription('Destination IP address match value for the class - only valid if the hm2AgentDiffServClassRuleMatchEntryType is set to dstip(2).')
hm2AgentDiffServClassRuleMatchDstIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 7, 2, 3, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentDiffServClassRuleMatchDstIpMask.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServClassRuleMatchDstIpMask.setDescription('Destination IP address mask match value for the class - only valid if the hm2AgentDiffServClassRuleMatchEntryType is set to dstip(2). This mask value identifies the portion of hm2AgentDiffServClassRuleMatchDstIpAddr that is compared against a packet. A non-contiguous mask value is permitted.')
hm2AgentDiffServClassRuleMatchDstL4PortStart = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 7, 2, 3, 1, 6), InetPortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentDiffServClassRuleMatchDstL4PortStart.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServClassRuleMatchDstL4PortStart.setDescription('Destination layer 4 port range start match value for the class - only valid if the hm2AgentDiffServClassRuleMatchEntryType is set to dstl4port(3).')
hm2AgentDiffServClassRuleMatchDstL4PortEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 7, 2, 3, 1, 7), InetPortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentDiffServClassRuleMatchDstL4PortEnd.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServClassRuleMatchDstL4PortEnd.setDescription('Destination layer 4 port range end match value for the class - only valid if the hm2AgentDiffServClassRuleMatchEntryType is set to dstl4port(3).')
hm2AgentDiffServClassRuleMatchDstMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 7, 2, 3, 1, 8), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentDiffServClassRuleMatchDstMacAddr.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServClassRuleMatchDstMacAddr.setDescription('Destination MAC address match value for the class - only valid if the hm2AgentDiffServClassRuleMatchEntryType is set to dstmac(4).')
hm2AgentDiffServClassRuleMatchDstMacMask = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 7, 2, 3, 1, 9), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentDiffServClassRuleMatchDstMacMask.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServClassRuleMatchDstMacMask.setDescription('Destination MAC address mask match value for the class - only valid if the hm2AgentDiffServClassRuleMatchEntryType is set to dstmac(4). This mask value identifies the portion of hm2AgentDiffServClassRuleMatchDstMacAddr that is compared against a packet. A non-contiguous mask value is permitted.')
hm2AgentDiffServClassRuleMatchEvery = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 7, 2, 3, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDiffServClassRuleMatchEvery.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServClassRuleMatchEvery.setDescription('Flag to indicate that the class rule is defined to match on every packet, regardless of content. - only valid if the hm2AgentDiffServClassRuleMatchEntryType is set to every(5).')
hm2AgentDiffServClassRuleMatchIpDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 7, 2, 3, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentDiffServClassRuleMatchIpDscp.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServClassRuleMatchIpDscp.setDescription('IP DiffServ Code Point (DSCP) match value for the class - only valid if the hm2AgentDiffServClassRuleMatchEntryType is set to ipdscp(6). The DSCP is defined as the high-order six bits of the Service Type octet in the IPv4 header.')
hm2AgentDiffServClassRuleMatchIpPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 7, 2, 3, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentDiffServClassRuleMatchIpPrecedence.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServClassRuleMatchIpPrecedence.setDescription('IP Precedence match value for the class - only valid if the hm2AgentDiffServClassRuleMatchEntryType is set to ipprecedence(7). The Precedence bits are defined as the high-order three bits of the Service Type octed in the IPv4 header.')
hm2AgentDiffServClassRuleMatchIpTosBits = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 7, 2, 3, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentDiffServClassRuleMatchIpTosBits.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServClassRuleMatchIpTosBits.setDescription('IP TOS bits match value for the class - only valid if the hm2AgentDiffServClassRuleMatchEntryType is set to iptos(8). The TOS bits are defined as all eight bits of the Service Type octet in the IPv4 header.')
hm2AgentDiffServClassRuleMatchIpTosMask = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 7, 2, 3, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentDiffServClassRuleMatchIpTosMask.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServClassRuleMatchIpTosMask.setDescription('IP TOS bits mask match value for the class - only valid if the hm2AgentDiffServClassRuleMatchEntryType is set to iptos(8). This mask value identifies the portion of hm2AgentDiffServClassRuleMatchIpTosBits that is compared against a packet. A non-contiguous mask value is permitted.')
hm2AgentDiffServClassRuleMatchProtocolNum = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 7, 2, 3, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentDiffServClassRuleMatchProtocolNum.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServClassRuleMatchProtocolNum.setDescription('Protocol number match value for the class - only valid if the hm2AgentDiffServClassRuleMatchEntryType is set to protocol(9).')
hm2AgentDiffServClassRuleMatchRefClassIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 7, 2, 3, 1, 16), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentDiffServClassRuleMatchRefClassIndex.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServClassRuleMatchRefClassIndex.setDescription('Index of the corresponding referenced class - only valid if the hm2AgentDiffServClassRuleMatchEntryType is set to refclass(10). The set of match conditions defined for the reference class are directly inherited by the current class. Restrictions: 1) The class types of both, current class and the reference class must be identical (i.e., any vs. any, or all vs. all). 2) Self-referencing of class-name is not allowed. 3) Any attempt to delete the reference class while still referenced by any class shall fail. 4) The combined match criteria of classname and reference class name must be an allowed combination based on the class type. Any subsequent changes to the reference class name match criteria must maintain this validity, or the change attempt shall fail.')
hm2AgentDiffServClassRuleMatchSrcIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 7, 2, 3, 1, 17), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentDiffServClassRuleMatchSrcIpAddr.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServClassRuleMatchSrcIpAddr.setDescription('Source IP address match value for the class - only valid if the hm2AgentDiffServClassRuleMatchEntryType is set to srcip(11).')
hm2AgentDiffServClassRuleMatchSrcIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 7, 2, 3, 1, 18), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentDiffServClassRuleMatchSrcIpMask.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServClassRuleMatchSrcIpMask.setDescription('Source IP address mask match value for the class - only valid if the hm2AgentDiffServClassRuleMatchEntryType is set to srcip(11). This mask value identifies the portion of hm2AgentDiffServClassRuleMatchSrcIpAddr that is compared against a packet. A non-contiguous mask value is permitted.')
hm2AgentDiffServClassRuleMatchSrcL4PortStart = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 7, 2, 3, 1, 19), InetPortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentDiffServClassRuleMatchSrcL4PortStart.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServClassRuleMatchSrcL4PortStart.setDescription('Source layer 4 port range start match value for the class - only valid if the hm2AgentDiffServClassRuleMatchEntryType is set to srcl4port(12).')
hm2AgentDiffServClassRuleMatchSrcL4PortEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 7, 2, 3, 1, 20), InetPortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentDiffServClassRuleMatchSrcL4PortEnd.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServClassRuleMatchSrcL4PortEnd.setDescription('Source layer 4 port range end match value for the class - only valid if the hm2AgentDiffServClassRuleMatchEntryType is set to srcl4port(12).')
hm2AgentDiffServClassRuleMatchSrcMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 7, 2, 3, 1, 21), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentDiffServClassRuleMatchSrcMacAddr.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServClassRuleMatchSrcMacAddr.setDescription('Source MAC address match value for the class - only valid if the hm2AgentDiffServClassRuleMatchEntryType is set to srcmac(13).')
hm2AgentDiffServClassRuleMatchSrcMacMask = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 7, 2, 3, 1, 22), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentDiffServClassRuleMatchSrcMacMask.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServClassRuleMatchSrcMacMask.setDescription('Source MAC address mask match value for the class - only valid if the hm2AgentDiffServClassRuleMatchEntryType is set to srcmac(13). This mask value identifies the portion of hm2AgentDiffServClassRuleMatchSrcMacAddr that is compared against a packet. A non-contiguous mask value is permitted.')
hm2AgentDiffServClassRuleMatchExcludeFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 7, 2, 3, 1, 24), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentDiffServClassRuleMatchExcludeFlag.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServClassRuleMatchExcludeFlag.setDescription('Class Rule exclude flag - when set to true(1), the match condition identified by hm2AgentDiffServClassRuleMatchEntryType is negated. This means that for a given field, every value is considered to be a match EXCEPT for the value specified in the class rule. This flag must be false(2) for an agendDiffServClassRuleMatchEntryType of refClass(10). This object must be set after the hm2AgentDiffServClassRuleMatchEntryType object, but before any other match object in this row')
hm2AgentDiffServClassRuleStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 7, 2, 3, 1, 25), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentDiffServClassRuleStorageType.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServClassRuleStorageType.setDescription('Storage-type for this conceptual row')
hm2AgentDiffServClassRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 7, 2, 3, 1, 26), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentDiffServClassRuleRowStatus.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServClassRuleRowStatus.setDescription("The status of this conceptual row. All RowStatus operations are permitted. Other columns in this row may be modified when the status is 'active'.")
hm2AgentDiffServClassRuleMatchCos2 = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 7, 2, 3, 1, 27), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentDiffServClassRuleMatchCos2.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServClassRuleMatchCos2.setDescription('Three-bit user priority field in the second/inner 802.1Q tag header of a double VLAN tagged Ethernet frame used as a class-match parameter - only valid if the hm2AgentDiffServClassRuleMatchEntryType is set to cos2(15).')
hm2AgentDiffServClassRuleMatchEtypeKey = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 7, 2, 3, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("custom", 1), ("appletalk", 2), ("arp", 3), ("ibmsna", 4), ("ipv4", 5), ("ipv6", 6), ("ipx", 7), ("mplsmcast", 8), ("mplsucast", 9), ("netbios", 10), ("novell", 11), ("pppoe", 12), ("rarp", 13)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentDiffServClassRuleMatchEtypeKey.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServClassRuleMatchEtypeKey.setDescription('Ethertype keyword match value for the class - only valid if the hm2AgentDiffServClassRuleMatchEntryType is set to etype(16). A keyword of custom(1) requires that the hm2AgentDiffServClassRuleMatchEtypeValue object also be set.')
hm2AgentDiffServClassRuleMatchEtypeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 7, 2, 3, 1, 29), EtypeValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentDiffServClassRuleMatchEtypeValue.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServClassRuleMatchEtypeValue.setDescription('Ethertype match value for the class - only valid if the hm2AgentDiffServClassRuleMatchEntryType is set to etype(16) and the hm2AgentDiffServClassRuleMatchEtypeKey is set to custom(1). The allowed value for this object is 0x0600 to 0xFFFF.')
hm2AgentDiffServClassRuleMatchVlanIdStart = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 7, 2, 3, 1, 30), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4042))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentDiffServClassRuleMatchVlanIdStart.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServClassRuleMatchVlanIdStart.setDescription('VLAN ID range start match value for the class - only valid if the hm2AgentDiffServClassRuleMatchEntryType is set to vlanid(17). The VLAN ID field is defined as the 12-bit VLAN identifier in the 802.1Q tag header of a tagged Ethernet frame. This is contained in the first/outer tag of a double VLAN tagged frame.')
hm2AgentDiffServClassRuleMatchVlanIdEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 7, 2, 3, 1, 31), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4042))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentDiffServClassRuleMatchVlanIdEnd.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServClassRuleMatchVlanIdEnd.setDescription('VLAN ID range end match value for the class - only valid if the hm2AgentDiffServClassRuleMatchEntryType is set to vlanid(17). The VLAN ID field is defined as the 12-bit VLAN identifier in the 802.1Q tag header of a tagged Ethernet frame. This is contained in the first/outer tag of a double VLAN tagged frame.')
hm2AgentDiffServClassRuleMatchVlanId2Start = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 7, 2, 3, 1, 32), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4042))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentDiffServClassRuleMatchVlanId2Start.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServClassRuleMatchVlanId2Start.setDescription('Secondary VLAN ID range start match value for the class - only valid if the hm2AgentDiffServClassRuleMatchEntryType is set to vlanid2(18). The Secondary VLAN ID field is defined as the 12-bit VLAN identifier in the second/inner 802.1Q tag header of a double VLAN tagged Ethernet frame.')
hm2AgentDiffServClassRuleMatchVlanId2End = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 7, 2, 3, 1, 33), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4042))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentDiffServClassRuleMatchVlanId2End.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServClassRuleMatchVlanId2End.setDescription('Secondary VLAN ID range end match value for the class - only valid if the hm2AgentDiffServClassRuleMatchEntryType is set to vlanid2(18). The Secondary VLAN ID field is defined as the 12-bit VLAN identifier in the second/inner 802.1Q tag header of a double VLAN tagged Ethernet frame.')
hm2AgentDiffServPolicyGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 12, 7, 3))
hm2AgentDiffServPolicyIndexNextFree = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 7, 3, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDiffServPolicyIndexNextFree.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServPolicyIndexNextFree.setDescription('This object contains an unused value for hm2AgentDiffServPolicyIndex, or a zero to indicate that none exists.')
hm2AgentDiffServPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 7, 3, 2), )
if mibBuilder.loadTexts: hm2AgentDiffServPolicyTable.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServPolicyTable.setDescription('A table of the DiffServ policy entries.')
hm2AgentDiffServPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 7, 3, 2, 1), ).setIndexNames((0, "HM2-PLATFORM-QOS-DIFFSERV-PRIVATE-MIB", "hm2AgentDiffServPolicyIndex"))
if mibBuilder.loadTexts: hm2AgentDiffServPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServPolicyEntry.setDescription('Represents entry for a DiffServ policy.')
hm2AgentDiffServPolicyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 7, 3, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hm2AgentDiffServPolicyIndex.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServPolicyIndex.setDescription('The identifier for DiffServ Policy table entry.')
hm2AgentDiffServPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 7, 3, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentDiffServPolicyName.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServPolicyName.setDescription('Name of the policy')
hm2AgentDiffServPolicyType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 7, 3, 2, 1, 3), IntfDirection()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentDiffServPolicyType.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServPolicyType.setDescription(' The policy type dictates whether inbound or outbound policy attribute statements are used in the policy definition.')
hm2AgentDiffServPolicyInstIndexNextFree = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 7, 3, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDiffServPolicyInstIndexNextFree.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServPolicyInstIndexNextFree.setDescription('This object contains an unused value for hm2AgentDiffServPolicyInstIndex, or a zero to indicate that none exists. This index is maintained on a per-policy basis.')
hm2AgentDiffServPolicyStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 7, 3, 2, 1, 5), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentDiffServPolicyStorageType.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServPolicyStorageType.setDescription('Storage-type for this conceptual row')
hm2AgentDiffServPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 7, 3, 2, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentDiffServPolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServPolicyRowStatus.setDescription("The status of this conceptual row. active(1) - this Diffserv Policy is active createAndGo(4) - set to this value to create an instance destroy(6) - set to this value to delete an instance All RowStatus operations are permitted. Other columns in this row may be modified when the status is 'active'. Entries can not be deleted until all rows in hm2AgentDiffServPolicyInstTable with corresponding values of hm2AgentDiffServPolicyIndex have been deleted.")
hm2AgentDiffServPolicyInstTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 7, 3, 3), )
if mibBuilder.loadTexts: hm2AgentDiffServPolicyInstTable.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServPolicyInstTable.setDescription('A table of the policy-class instance entries.')
hm2AgentDiffServPolicyInstEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 7, 3, 3, 1), ).setIndexNames((0, "HM2-PLATFORM-QOS-DIFFSERV-PRIVATE-MIB", "hm2AgentDiffServPolicyIndex"), (0, "HM2-PLATFORM-QOS-DIFFSERV-PRIVATE-MIB", "hm2AgentDiffServPolicyInstIndex"))
if mibBuilder.loadTexts: hm2AgentDiffServPolicyInstEntry.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServPolicyInstEntry.setDescription('Represents entry for a policy-class instance.')
hm2AgentDiffServPolicyInstIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 7, 3, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hm2AgentDiffServPolicyInstIndex.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServPolicyInstIndex.setDescription('The identifier for policy-class Instance table entry within a policy.')
hm2AgentDiffServPolicyInstClassIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 7, 3, 3, 1, 2), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentDiffServPolicyInstClassIndex.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServPolicyInstClassIndex.setDescription('Index of the DiffServ Class Table row, whose class definition is used as the policy class instance. The class index identifies the classifier definition used by the policy to establish an instance of that class (to which policy attributes can be attached). This is what connects a class (instance) to a policy.')
hm2AgentDiffServPolicyInstAttrIndexNextFree = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 7, 3, 3, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDiffServPolicyInstAttrIndexNextFree.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServPolicyInstAttrIndexNextFree.setDescription('This object contains an unused value for hm2AgentDiffServPolicyAttrIndex, or a zero to indicate that none exists. This index is maintained on a per-policy-class-instance basis.')
hm2AgentDiffServPolicyInstStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 7, 3, 3, 1, 4), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentDiffServPolicyInstStorageType.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServPolicyInstStorageType.setDescription('Storage-type for this conceptual row.')
hm2AgentDiffServPolicyInstRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 7, 3, 3, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentDiffServPolicyInstRowStatus.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServPolicyInstRowStatus.setDescription("The status of this conceptual row. active(1) - this Diffserv Policy Instance is active createAndGo(4) - set to this value to create an instance destroy(6) - set to this value to delete an instance All RowStatus operations are permitted. Other columns in this row may be modified when the status is 'active'. Entries can not be deleted until all rows in hm2AgentDiffServPolicyAttrTable with corresponding values of hm2AgentDiffServPolicyIndex and hm2AgentDiffServPolicyInstIndex have been deleted.")
hm2AgentDiffServPolicyAttrTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 7, 3, 4), )
if mibBuilder.loadTexts: hm2AgentDiffServPolicyAttrTable.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServPolicyAttrTable.setDescription('A table of policy attribute entries')
hm2AgentDiffServPolicyAttrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 7, 3, 4, 1), ).setIndexNames((0, "HM2-PLATFORM-QOS-DIFFSERV-PRIVATE-MIB", "hm2AgentDiffServPolicyIndex"), (0, "HM2-PLATFORM-QOS-DIFFSERV-PRIVATE-MIB", "hm2AgentDiffServPolicyInstIndex"), (0, "HM2-PLATFORM-QOS-DIFFSERV-PRIVATE-MIB", "hm2AgentDiffServPolicyAttrIndex"))
if mibBuilder.loadTexts: hm2AgentDiffServPolicyAttrEntry.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServPolicyAttrEntry.setDescription('Represents entry for policy attributes')
hm2AgentDiffServPolicyAttrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 7, 3, 4, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hm2AgentDiffServPolicyAttrIndex.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServPolicyAttrIndex.setDescription('The identifier for policy-attribute entry ')
hm2AgentDiffServPolicyAttrStmtEntryType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 7, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("bandwidth", 1), ("expedite", 2), ("markCosVal", 3), ("markIpDscpVal", 4), ("markIpPrecedenceVal", 5), ("policeSimple", 6), ("policeSinglerate", 7), ("policeTworate", 8), ("randomdrop", 9), ("shapeAverage", 10), ("shapePeak", 11), ("assignQueue", 12), ("drop", 13), ("markCos2Val", 14), ("redirect", 15), ("mirror", 16), ("markCosAsSecCos", 17)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentDiffServPolicyAttrStmtEntryType.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServPolicyAttrStmtEntryType.setDescription('Policy attribute statement entry type -- this entry type is essential to determine which of the individual object(s) is defined for this policy attribute statement. This object must be created before any other policy attribute statement object in the row. The markIpDscpVal(4), markIpPrecedenceVal(5), policeSimple(6), policeSinglerate(7) and policeTworate(8) values are only allowed for an hm2AgentDiffServPolicyType of in(1). The remaining values are only allowed for an hm2AgentDiffServPolicyType of out(2).')
hm2AgentDiffServPolicyAttrStmtMarkCosVal = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 7, 3, 4, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentDiffServPolicyAttrStmtMarkCosVal.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServPolicyAttrStmtMarkCosVal.setDescription('Three-bit user priority field value in the 802.1Q tag header of a tagged Ethernet frame, marked as part of the inbound policy for a class instance. For frames containing a double VLAN tag, this field is located in the first/outer tag. This attribute is only valid if the value of hm2AgentDiffServPolicyAttrStmtEntryType is set to markCosVal(3).')
hm2AgentDiffServPolicyAttrStmtMarkIpDscpVal = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 7, 3, 4, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentDiffServPolicyAttrStmtMarkIpDscpVal.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServPolicyAttrStmtMarkIpDscpVal.setDescription('Specified IP DSCP value to mark in all inbound packets belonging to the class-instance. This attribute is only valid if the value of hm2AgentDiffServPolicyAttrStmtEntryType is set to markIpDscpVal(4).')
hm2AgentDiffServPolicyAttrStmtMarkIpPrecedenceVal = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 7, 3, 4, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentDiffServPolicyAttrStmtMarkIpPrecedenceVal.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServPolicyAttrStmtMarkIpPrecedenceVal.setDescription('Specified IP Precedence value to mark in all inbound packets belonging to the class-instance. This attribute is only valid if the value of hm2AgentDiffServPolicyAttrStmtEntryType is set to markIpPrecedenceVal(5).')
hm2AgentDiffServPolicyAttrStmtPoliceConformAct = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 7, 3, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("drop", 1), ("markdscp", 2), ("markprec", 3), ("send", 4), ("markcos", 5), ("markcos2", 6), ("markcosAsSecCos", 7))).clone('send')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentDiffServPolicyAttrStmtPoliceConformAct.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServPolicyAttrStmtPoliceConformAct.setDescription('Policing conform action attribute statement value -- determines the action taken on conforming traffic for the policing style (simple,singlerate,tworate) currently configured for the specified class instance within the policy. The default conform action is send(3). This attribute is only valid if the value of hm2AgentDiffServPolicyAttrStmtEntryType is policeSimple(6), policeSinglerate(7), or policeTworate(8).')
hm2AgentDiffServPolicyAttrStmtPoliceConformVal = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 7, 3, 4, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentDiffServPolicyAttrStmtPoliceConformVal.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServPolicyAttrStmtPoliceConformVal.setDescription('Policing conform value attribute statement -- used to mark conforming packets when the conform action is one of the following: markdscp(2) - mark IP DSCP field markprec(3) - mark IP Precedence field markcos(5) - mark 802.1p CoS field (first/only tag) markcos2(6) - mark secondary 802.1p CoS field (inner tag) markcosAsSecCos(7) - mark CoS as Secondary CoS value This attribute is only valid if the value of hm2AgentDiffServPolicyAttrStmtEntryType is policeSimple(6), policeSinglerate(7), or policeTworate(8).')
hm2AgentDiffServPolicyAttrStmtPoliceExceedAct = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 7, 3, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("drop", 1), ("markdscp", 2), ("markprec", 3), ("send", 4), ("markcos", 5), ("markcos2", 6), ("markcosAsSecCos", 7))).clone('drop')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentDiffServPolicyAttrStmtPoliceExceedAct.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServPolicyAttrStmtPoliceExceedAct.setDescription('Policing exceed action attribute statement value -- determines the action taken on excess traffic for the policing style (singlerate, tworate) currently configured for the specified class instance within the policy. The default exceed action is drop(1). This attribute is only valid if the value of hm2AgentDiffServPolicyAttrStmtEntryType is policeSinglerate(7) or policeTworate(8).')
hm2AgentDiffServPolicyAttrStmtPoliceExceedVal = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 7, 3, 4, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentDiffServPolicyAttrStmtPoliceExceedVal.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServPolicyAttrStmtPoliceExceedVal.setDescription('Policing exceed value attribute statement -- used to mark excess packets when the exceed action is one of the following: markdscp(2) - mark IP DSCP field markprec(3) - mark IP Precedence field markcos(5) - mark 802.1p CoS field (first/only tag) markcos2(6) - mark secondary 802.1p CoS field (inner tag) markcosAsSecCos(7) - mark CoS as Secondary CoS value This is only valid if the value of hm2AgentDiffServPolicyAttrStmtEntryType is policeSinglerate(7) or policeTworate(8).')
hm2AgentDiffServPolicyAttrStmtPoliceNonconformAct = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 7, 3, 4, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("drop", 1), ("markdscp", 2), ("markprec", 3), ("send", 4), ("markcos", 5), ("markcos2", 6), ("markcosAsSecCos", 7))).clone('drop')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentDiffServPolicyAttrStmtPoliceNonconformAct.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServPolicyAttrStmtPoliceNonconformAct.setDescription('Policing non-conform action attribute statement value -- determines the action taken on nonconforming traffic for the policing style (simple, singlerate,tworate) currently configured for the specified class instance within the policy. The default non-conform action is drop(1). This attribute is only valid if the value of hm2AgentDiffServPolicyAttrStmtEntryType is policeSimple(6), policeSinglerate(7), or policeTworate(8).')
hm2AgentDiffServPolicyAttrStmtPoliceNonconformVal = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 7, 3, 4, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentDiffServPolicyAttrStmtPoliceNonconformVal.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServPolicyAttrStmtPoliceNonconformVal.setDescription('Policing non-conform value attribute statement -- used to mark nonconforming packets when the nonconform action is one of the following: markdscp(2) - mark IP DSCP field markprec(3) - mark IP Precedence field markcos(5) - mark 802.1p CoS field (first/only tag) markcos2(6) - mark secondary 802.1p CoS field (inner tag) markcosAsSecCos(7) - mark CoS as Secondary CoS value This attribute is only valid if the value of hm2AgentDiffServPolicyAttrStmtEntryType is policeSimple(6), policeSinglerate(7), or policeTworate(8).')
hm2AgentDiffServPolicyAttrStmtPoliceSimpleCrate = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 7, 3, 4, 1, 17), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentDiffServPolicyAttrStmtPoliceSimpleCrate.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServPolicyAttrStmtPoliceSimpleCrate.setDescription('Simple policing committed rate attribute statement value, specified in kbps. This attribute is only valid if the value of hm2AgentDiffServPolicyAttrStmtEntryType is set to policeSimple(6).')
hm2AgentDiffServPolicyAttrStmtPoliceSimpleCburst = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 7, 3, 4, 1, 18), QosBurstSize()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentDiffServPolicyAttrStmtPoliceSimpleCburst.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServPolicyAttrStmtPoliceSimpleCburst.setDescription('Simple policing committed burst size attribute statement value, specified in Kbytes. This attribute is only valid if the value of hm2AgentDiffServPolicyAttrStmtEntryType is set to policeSimple(6).')
hm2AgentDiffServPolicyAttrStmtPoliceSinglerateCrate = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 7, 3, 4, 1, 19), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentDiffServPolicyAttrStmtPoliceSinglerateCrate.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServPolicyAttrStmtPoliceSinglerateCrate.setDescription('Single-rate policing committed rate attribute statement value, specified in kbps. This attribute is only valid if the value of hm2AgentDiffServPolicyAttrStmtEntryType is set to policeSinglerate(7).')
hm2AgentDiffServPolicyAttrStmtPoliceSinglerateCburst = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 7, 3, 4, 1, 20), QosBurstSize()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentDiffServPolicyAttrStmtPoliceSinglerateCburst.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServPolicyAttrStmtPoliceSinglerateCburst.setDescription('Single-rate policing committed burst size attribute statement value, specified in Kbytes. This attribute is only valid if the value of hm2AgentDiffServPolicyAttrStmtEntryType is set to policeSinglerate(7).')
hm2AgentDiffServPolicyAttrStmtPoliceSinglerateEburst = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 7, 3, 4, 1, 21), QosBurstSize()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentDiffServPolicyAttrStmtPoliceSinglerateEburst.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServPolicyAttrStmtPoliceSinglerateEburst.setDescription('Single-rate policing excess burst size attribute statement value, specified in Kbytes. This attribute is only valid if the value of hm2AgentDiffServPolicyAttrStmtEntryType is set to policeSinglerate(7).')
hm2AgentDiffServPolicyAttrStmtPoliceTworateCrate = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 7, 3, 4, 1, 22), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentDiffServPolicyAttrStmtPoliceTworateCrate.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServPolicyAttrStmtPoliceTworateCrate.setDescription('Two-rate policing committed rate attribute statement value, specified in kbps. This attribute is only valid if the value of hm2AgentDiffServPolicyAttrStmtEntryType is set to policeTworate(8).')
hm2AgentDiffServPolicyAttrStmtPoliceTworateCburst = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 7, 3, 4, 1, 23), QosBurstSize()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentDiffServPolicyAttrStmtPoliceTworateCburst.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServPolicyAttrStmtPoliceTworateCburst.setDescription('Two-rate policing committed burst size attribute statement value, specified in Kbytes. This attribute is only valid if the value of hm2AgentDiffServPolicyAttrStmtEntryType is set to policeTworate(8).')
hm2AgentDiffServPolicyAttrStmtPoliceTworatePrate = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 7, 3, 4, 1, 24), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentDiffServPolicyAttrStmtPoliceTworatePrate.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServPolicyAttrStmtPoliceTworatePrate.setDescription('Two-rate policing peak rate attribute statement value, specified in kbps. This attribute is only valid if the value of hm2AgentDiffServPolicyAttrStmtEntryType is set to policeTworate(8).')
hm2AgentDiffServPolicyAttrStmtPoliceTworatePburst = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 7, 3, 4, 1, 25), QosBurstSize()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentDiffServPolicyAttrStmtPoliceTworatePburst.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServPolicyAttrStmtPoliceTworatePburst.setDescription('Two-rate policing peak burst size attribute statement value, specified in Kbytes. This attribute is only valid if the value of hm2AgentDiffServPolicyAttrStmtEntryType is set to policeTworate(8).')
hm2AgentDiffServPolicyAttrStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 7, 3, 4, 1, 34), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentDiffServPolicyAttrStorageType.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServPolicyAttrStorageType.setDescription('Storage-type for this conceptual row.')
hm2AgentDiffServPolicyAttrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 7, 3, 4, 1, 35), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentDiffServPolicyAttrRowStatus.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServPolicyAttrRowStatus.setDescription("The status of this conceptual row. active(1) - this Diffserv Policy Attribute is active createAndGo(4) - set to this value to create an instance destroy(6) - set to this value to delete an instance All RowStatus operations are permitted. Other columns in this row may be modified when the status is 'active'.")
hm2AgentDiffServPolicyAttrStmtAssignQueueId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 7, 3, 4, 1, 36), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentDiffServPolicyAttrStmtAssignQueueId.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServPolicyAttrStmtAssignQueueId.setDescription('Queue identifier to which all inbound packets belonging to this class-instance are directed. This attribute is only valid if the value of hm2AgentDiffServPolicyAttrStmtEntryType is set to assignQueue(12).')
hm2AgentDiffServPolicyAttrStmtDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 7, 3, 4, 1, 37), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDiffServPolicyAttrStmtDrop.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServPolicyAttrStmtDrop.setDescription('Flag to indicate that all inbound packets belonging to this class-instance are dropped at ingress. This attribute is only valid if the hm2AgentDiffServPolicyAttrStmtEntryType is set to drop(13).')
hm2AgentDiffServPolicyAttrStmtMarkCos2Val = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 7, 3, 4, 1, 38), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentDiffServPolicyAttrStmtMarkCos2Val.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServPolicyAttrStmtMarkCos2Val.setDescription('Three-bit user priority field value in the second/inner 802.1Q tag header of a double VLAN tagged Ethernet frame, marked as part of the inbound policy for a class instance. This attribute is only valid if the value of hm2AgentDiffServPolicyAttrStmtEntryType is set to markCos2Val(14).')
hm2AgentDiffServPolicyAttrStmtPoliceColorConformIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 7, 3, 4, 1, 39), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentDiffServPolicyAttrStmtPoliceColorConformIndex.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServPolicyAttrStmtPoliceColorConformIndex.setDescription("Index of the DiffServ Class Table row whose class definition is used to specify the policing color conform mode and value. This identifies incoming traffic categorized as 'green' packets in the network. This attribute is only valid if the value of hm2AgentDiffServPolicyAttrStmtEntryType is policeSimple(6), policeSinglerate(7), or policeTworate(8). The DiffServ class referred to by this object must comply with the following restrictions: 1) Contains only a single, non-excluded match condition identifying one of the following fields: COS, IP DSCP, IP Precedence, or Secondary COS, in accordance with platform support capabilities. This is represented by an hm2AgentDiffServClassRuleMatchEntryType value of cos(1), ipdscp(6), ipprecedence(7), or cos2(15), respectively. 2) Must not conflict with any (non-excluded) match conditions in the classifier used for this policy-class instance, as indicated by the hm2AgentDiffServPolicyInstClassIndex object. 3) The color conform mode and value identified by this class index must not be the same as an existing color-aware exceed mode and value defined by the hm2AgentDiffServPolicyAttrStmtPoliceColorExceedIndex object. A class index value of 0 for this object indicates conform color awareness is not being used (e.g. color-blind mode). Setting this object to 0 causes the hm2AgentDiffServPolicyAttrStmtPoliceColorExceedIndex object to be set to 0 as well.")
hm2AgentDiffServPolicyAttrStmtPoliceColorConformMode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 7, 3, 4, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("blind", 1), ("cos", 2), ("cos2", 3), ("ipdscp", 4), ("ipprec", 5))).clone('blind')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDiffServPolicyAttrStmtPoliceColorConformMode.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServPolicyAttrStmtPoliceColorConformMode.setDescription("Policing color conform mode -- indicates the color awareness mode of conforming traffic for the policing style (simple, singlerate, or tworate) currently configured for the specified class instance within the policy. The default value is blind(1). Any value other than blind(1) denotes the packet field to check for the existing conform color marking, which is compared to the hm2AgentDiffServPolicyAttrStmtPoliceColorConformVal object value. Packets matching this specification are considered to be colored 'green'. This read-only object reflects the DiffServ class definition as indicated by hm2AgentDiffServPolicyAttrStmtPoliceColorConformIndex. This attribute is only valid for hm2AgentDiffServPolicyAttrStmtEntryType values of policeSimple(6), policeSinglerate(7), or policeTworate(8).")
hm2AgentDiffServPolicyAttrStmtPoliceColorConformVal = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 7, 3, 4, 1, 41), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDiffServPolicyAttrStmtPoliceColorConformVal.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServPolicyAttrStmtPoliceColorConformVal.setDescription("Policing color conform value -- indicates the color awareness packet mark value of conforming traffic for the policing style (simple, singlerate, or tworate) currently configured for the specified class instance within the policy. For the color conform field indicated by hm2AgentDiffServPolicyAttrStmtPoliceColorConformMode, packets containing this value are considered to be colored 'green'. This read-only object reflects the DiffServ class definition as indicated by hm2AgentDiffServPolicyAttrStmtPoliceColorConformIndex. This attribute is only valid for hm2AgentDiffServPolicyAttrStmtEntryType values of policeSimple(6), policeSinglerate(7), or policeTworate(8), and hm2AgentDiffServPolicyAttrStmtPoliceColorConformMode values of cos(2), cos2(3), ipdscp(4), or ipprec(5).")
hm2AgentDiffServPolicyAttrStmtPoliceColorExceedIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 7, 3, 4, 1, 42), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentDiffServPolicyAttrStmtPoliceColorExceedIndex.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServPolicyAttrStmtPoliceColorExceedIndex.setDescription("Index of the DiffServ Class Table row whose class definition is used to specify the policing color exceed mode and value. This identifies incoming traffic categorized as 'yellow' packets in the network. This attribute is only valid if the value of hm2AgentDiffServPolicyAttrStmtEntryType is policeSinglerate(7) or policeTworate(8). The DiffServ class referred to by this object must comply with the following restrictions: 1) Contains only a single, non-excluded match condition identifying one of the following fields: COS, IP DSCP, IP Precedence, or Secondary COS, in accordance with platform support capabilities. This is represented by an hm2AgentDiffServClassRuleMatchEntryType value of cos(1), ipdscp(6), ipprecedence(7), or cos2(15), respectively. 2) Must not conflict with any (non-excluded) match conditions in the classifier used for this policy-class instance, as indicated by the hm2AgentDiffServPolicyInstClassIndex object. 3) The color exceed mode and value identified by this class index must not be the same as an existing color-aware exceed mode and value defined by the hm2AgentDiffServPolicyAttrStmtPoliceColorConformIndex object. A class index value of 0 for this object indicates exceed color awareness is not being used. When the hm2AgentDiffServPolicyAttrStmtPoliceColorConformIndex object is 0, indicating color-blind operation, this object must also be 0. When a non-0 value is used for the hm2AgentDiffServPolicyAttrStmtPoliceColorConformIndex object, this object may remain set to 0 if exceed color awareness is not desired, or may be set to an appropriate class index value to activate exceed color aware mode.")
hm2AgentDiffServPolicyAttrStmtPoliceColorExceedMode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 7, 3, 4, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("blind", 1), ("cos", 2), ("cos2", 3), ("ipdscp", 4), ("ipprec", 5), ("unused", 6))).clone('blind')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDiffServPolicyAttrStmtPoliceColorExceedMode.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServPolicyAttrStmtPoliceColorExceedMode.setDescription("Policing color exceed mode -- indicates the color awareness mode of exceeding traffic for the policing style (singlerate or tworate) currently configured for the specified class instance within the policy. The default value is blind(1). Any value other than blind(1) or unused(6) denotes the packet field to check for the existing exceed color marking, which is compared to the hm2AgentDiffServPolicyAttrStmtPoliceColorExceedVal object value. Packets matching this specification are considered to be colored 'yellow'. Use of exceed color awareness is optional, and this field is set to unused(6) when color conform aware policing is used but the color exceed value is not used. When hm2AgentDiffServPolicyAttrStmtPoliceColorConformMode value is blind(1), this object is blind(1) as well. This read-only object reflects the DiffServ class definition as indicated by hm2AgentDiffServPolicyAttrStmtPoliceColorExceedIndex. This attribute is only valid for hm2AgentDiffServPolicyAttrStmtEntryType values of policeSinglerate(7) or policeTworate(8).")
hm2AgentDiffServPolicyAttrStmtPoliceColorExceedVal = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 7, 3, 4, 1, 44), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDiffServPolicyAttrStmtPoliceColorExceedVal.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServPolicyAttrStmtPoliceColorExceedVal.setDescription("Policing color exceed value -- indicates the color awareness packet mark value of exceeding traffic for the policing style (singlerate or tworate) currently configured for the specified class instance within the policy. For the color exceed field indicated by hm2AgentDiffServPolicyAttrStmtPoliceColorExceedMode, packets containing this value are considered to be colored 'yellow'. This read-only object reflects the DiffServ class definition as indicated by hm2AgentDiffServPolicyAttrStmtPoliceColorExceedIndex. This attribute is only valid for hm2AgentDiffServPolicyAttrStmtEntryType values of policeSinglerate(7) or policeTworate(8), and hm2AgentDiffServPolicyAttrStmtPoliceColorExceedMode values of cos(2), cos2(3), ipdscp(4), or ipprec(5).")
hm2AgentDiffServPolicyAttrStmtRedirectIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 7, 3, 4, 1, 45), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentDiffServPolicyAttrStmtRedirectIntf.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServPolicyAttrStmtRedirectIntf.setDescription('External interface number to which all inbound packets belonging to this class-instance are redirected. This attribute is only valid if the value of hm2AgentDiffServPolicyAttrStmtEntryType is set to redirect(15).')
hm2AgentDiffServPolicyAttrStmtMirrorIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 7, 3, 4, 1, 46), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentDiffServPolicyAttrStmtMirrorIntf.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServPolicyAttrStmtMirrorIntf.setDescription('External interface number to which all inbound packets belonging to this class-instance are mirrored. This attribute is only valid if the value of hm2AgentDiffServPolicyAttrStmtEntryType is set to mirror(16).')
hm2AgentDiffServPolicyAttrStmtMarkCosAsSecCos = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 7, 3, 4, 1, 47), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentDiffServPolicyAttrStmtMarkCosAsSecCos.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServPolicyAttrStmtMarkCosAsSecCos.setDescription('Flag to indicate that all inbound packets belonging to this class-instance are marked with secondary cos at ingress. This attribute is only valid if the hm2AgentDiffServPolicyAttrStmtEntryType is set to markCosAsSecCos(17).')
hm2AgentDiffServPolicyPerfInTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 7, 3, 5), )
if mibBuilder.loadTexts: hm2AgentDiffServPolicyPerfInTable.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServPolicyPerfInTable.setDescription('A table of inbound policy-class performance entries')
hm2AgentDiffServPolicyPerfInEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 7, 3, 5, 1), ).setIndexNames((0, "HM2-PLATFORM-QOS-DIFFSERV-PRIVATE-MIB", "hm2AgentDiffServPolicyIndex"), (0, "HM2-PLATFORM-QOS-DIFFSERV-PRIVATE-MIB", "hm2AgentDiffServPolicyInstIndex"), (0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hm2AgentDiffServPolicyPerfInEntry.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServPolicyPerfInEntry.setDescription('Represents entry for the performance attributes of the associated inbound policy-class instance')
hm2AgentDiffServPolicyPerfInOfferedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 7, 3, 5, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDiffServPolicyPerfInOfferedPackets.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServPolicyPerfInOfferedPackets.setDescription('Offered packets count for the inbound policy-class instance performance entry.')
hm2AgentDiffServPolicyPerfInDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 7, 3, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDiffServPolicyPerfInDiscardedPackets.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServPolicyPerfInDiscardedPackets.setDescription('Discarded packets count for the inbound policy-class instance performance entry.')
hm2AgentDiffServPolicyPerfInHCOfferedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 7, 3, 5, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDiffServPolicyPerfInHCOfferedPackets.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServPolicyPerfInHCOfferedPackets.setDescription('Offered packets high capacity count for the inbound policy-class instance performance entry.')
hm2AgentDiffServPolicyPerfInHCDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 7, 3, 5, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDiffServPolicyPerfInHCDiscardedPackets.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServPolicyPerfInHCDiscardedPackets.setDescription('Discarded packets high capacity count for the inbound policy-class instance performance entry.')
hm2AgentDiffServPolicyPerfInStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 7, 3, 5, 1, 9), StorageType().clone('nonVolatile')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDiffServPolicyPerfInStorageType.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServPolicyPerfInStorageType.setDescription('Storage-type for this conceptual row.')
hm2AgentDiffServPolicyPerfInRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 7, 3, 5, 1, 10), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDiffServPolicyPerfInRowStatus.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServPolicyPerfInRowStatus.setDescription('The status of this conceptual row.')
hm2AgentDiffServPolicyPerfOutTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 7, 3, 6), )
if mibBuilder.loadTexts: hm2AgentDiffServPolicyPerfOutTable.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServPolicyPerfOutTable.setDescription('A table of outbound policy-class performance entries')
hm2AgentDiffServPolicyPerfOutEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 7, 3, 6, 1), ).setIndexNames((0, "HM2-PLATFORM-QOS-DIFFSERV-PRIVATE-MIB", "hm2AgentDiffServPolicyIndex"), (0, "HM2-PLATFORM-QOS-DIFFSERV-PRIVATE-MIB", "hm2AgentDiffServPolicyInstIndex"), (0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hm2AgentDiffServPolicyPerfOutEntry.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServPolicyPerfOutEntry.setDescription('Represents entry for the performance attributes of the associated outbound policy-class instance')
hm2AgentDiffServPolicyPerfOutOfferedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 7, 3, 6, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDiffServPolicyPerfOutOfferedPackets.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServPolicyPerfOutOfferedPackets.setDescription('Offered packets count for the outbound policy-class instance performance entry.')
hm2AgentDiffServPolicyPerfOutDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 7, 3, 6, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDiffServPolicyPerfOutDiscardedPackets.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServPolicyPerfOutDiscardedPackets.setDescription('Discarded packets count for the outbound policy-class instance performance entry.')
hm2AgentDiffServPolicyPerfOutHCOfferedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 7, 3, 6, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDiffServPolicyPerfOutHCOfferedPackets.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServPolicyPerfOutHCOfferedPackets.setDescription('Offered packets high capacity count for the outbound policy-class instance performance entry.')
hm2AgentDiffServPolicyPerfOutHCDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 7, 3, 6, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDiffServPolicyPerfOutHCDiscardedPackets.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServPolicyPerfOutHCDiscardedPackets.setDescription('Discarded packets high capacity count for the outbound policy-class instance performance entry.')
hm2AgentDiffServPolicyPerfOutStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 7, 3, 6, 1, 25), StorageType().clone('nonVolatile')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDiffServPolicyPerfOutStorageType.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServPolicyPerfOutStorageType.setDescription('Storage-type for this conceptual row.')
hm2AgentDiffServPolicyPerfOutRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 7, 3, 6, 1, 26), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDiffServPolicyPerfOutRowStatus.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServPolicyPerfOutRowStatus.setDescription('The status of this conceptual row.')
hm2AgentDiffServServiceGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 12, 7, 4))
hm2AgentDiffServServiceTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 7, 4, 1), )
if mibBuilder.loadTexts: hm2AgentDiffServServiceTable.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServServiceTable.setDescription('A table of the service entries.')
hm2AgentDiffServServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 7, 4, 1, 1), ).setIndexNames((0, "HM2-PLATFORM-QOS-DIFFSERV-PRIVATE-MIB", "hm2AgentDiffServServiceIfIndex"), (0, "HM2-PLATFORM-QOS-DIFFSERV-PRIVATE-MIB", "hm2AgentDiffServServiceIfDirection"))
if mibBuilder.loadTexts: hm2AgentDiffServServiceEntry.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServServiceEntry.setDescription('Represents entry for policy assigned to an interface in a particular direction.')
hm2AgentDiffServServiceIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 7, 4, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hm2AgentDiffServServiceIfIndex.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServServiceIfIndex.setDescription('External interface number of the interface to which policy is assigned.')
hm2AgentDiffServServiceIfDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 7, 4, 1, 1, 2), IntfDirection())
if mibBuilder.loadTexts: hm2AgentDiffServServiceIfDirection.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServServiceIfDirection.setDescription('Interface direction to which the policy is assigned.')
hm2AgentDiffServServicePolicyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 7, 4, 1, 1, 3), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentDiffServServicePolicyIndex.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServServicePolicyIndex.setDescription('Index of the Policy Table row whose policy definition is attached to the interface in the specified direction.')
hm2AgentDiffServServiceIfOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 7, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDiffServServiceIfOperStatus.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServServiceIfOperStatus.setDescription('The current operational state of the DiffServ service interface. If hm2AgentDiffServGenStatusAdminMode is disable(2) then hm2AgentDiffServServiceIfOperStatus should be down(2). If hm2AgentDiffServServiceGenStatusAdminMode is changed to enable(1) then hm2AgentDiffServServiceIfOperStatus should change to up(1) if the service interface is ready to send and receive DiffServ traffic; it should remain in the down(2) state if the underlying interface hardware is not in a link up condition, if the policy definition represented by hm2AgentDiffServServicePolicyIndex is incompatible with the interface (e.g., requires more bandwidth than the current capacity of the interface), or if the policy definition is considered to be incomplete (e.g., one or more composite rows is not in the active(1) state).')
hm2AgentDiffServServiceStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 7, 4, 1, 1, 5), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentDiffServServiceStorageType.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServServiceStorageType.setDescription('Storage-type for this conceptual row')
hm2AgentDiffServServiceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 7, 4, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentDiffServServiceRowStatus.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServServiceRowStatus.setDescription("The status of this conceptual row. active(1) - Diffserv is active createAndGo(4) - set to this value to create an instance destroy(6) - set to this value to delete an instance All RowStatus operations are permitted. Other columns in this row may be modified when the status is 'active'.")
hm2AgentDiffServSNMPExtensionGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 12, 7, 248))
hm2AgentDiffServClassNameInUseErrorReturn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 7, 248, 1))
if mibBuilder.loadTexts: hm2AgentDiffServClassNameInUseErrorReturn.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServClassNameInUseErrorReturn.setDescription('Indicates that the name is already used by another class')
hm2AgentDiffServClassHasRulesErrorReturn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 7, 248, 2))
if mibBuilder.loadTexts: hm2AgentDiffServClassHasRulesErrorReturn.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServClassHasRulesErrorReturn.setDescription('Indicates that the class has one or more rules and can not be deleted')
hm2AgentDiffServClassHasReferencesErrorReturn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 7, 248, 3))
if mibBuilder.loadTexts: hm2AgentDiffServClassHasReferencesErrorReturn.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServClassHasReferencesErrorReturn.setDescription('Indicates that the class has one or more references and can not be deleted')
hm2AgentDiffServClassTableFullErrorReturn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 7, 248, 4))
if mibBuilder.loadTexts: hm2AgentDiffServClassTableFullErrorReturn.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServClassTableFullErrorReturn.setDescription('Indicates that the class table is full and no other classes can be added or index is out of range')
hm2AgentDiffServClassRuleTableFullErrorReturn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 7, 248, 5))
if mibBuilder.loadTexts: hm2AgentDiffServClassRuleTableFullErrorReturn.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServClassRuleTableFullErrorReturn.setDescription('Indicates that the class rule table is full and no other rules can be added')
hm2AgentDiffServClassIndexOutOfRangeErrorReturn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 7, 248, 6))
if mibBuilder.loadTexts: hm2AgentDiffServClassIndexOutOfRangeErrorReturn.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServClassIndexOutOfRangeErrorReturn.setDescription('Indicates that the class index is out of range')
hm2AgentDiffServClassRuleIndexOutOfRangeErrorReturn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 7, 248, 7))
if mibBuilder.loadTexts: hm2AgentDiffServClassRuleIndexOutOfRangeErrorReturn.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServClassRuleIndexOutOfRangeErrorReturn.setDescription('Indicates that the class rule index is out of range')
hm2AgentDiffServClassRuleColorRefErrorReturn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 7, 248, 8))
if mibBuilder.loadTexts: hm2AgentDiffServClassRuleColorRefErrorReturn.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServClassRuleColorRefErrorReturn.setDescription('Indicates that the class is referenced by a policy policing color awareness attribute and new rules can not be added')
hm2AgentDiffServClassRuleInUseErrorReturn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 7, 248, 9))
if mibBuilder.loadTexts: hm2AgentDiffServClassRuleInUseErrorReturn.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServClassRuleInUseErrorReturn.setDescription('Indicates that the class already has a rule of this type. IP DSCP, IP Precedence and IP TOS rule types are considered of same type')
hm2AgentDiffServClassRuleInvalidReferenceErrorReturn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 7, 248, 10))
if mibBuilder.loadTexts: hm2AgentDiffServClassRuleInvalidReferenceErrorReturn.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServClassRuleInvalidReferenceErrorReturn.setDescription('Indicates that the reference class does not exist or is invalid')
hm2AgentDiffServClassRuleReferenceLoopErrorReturn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 7, 248, 11))
if mibBuilder.loadTexts: hm2AgentDiffServClassRuleReferenceLoopErrorReturn.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServClassRuleReferenceLoopErrorReturn.setDescription('Indicates that a loop was detected in the reference chain')
hm2AgentDiffServClassRuleMatchSecCosErrorReturn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 7, 248, 12))
if mibBuilder.loadTexts: hm2AgentDiffServClassRuleMatchSecCosErrorReturn.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServClassRuleMatchSecCosErrorReturn.setDescription('Indicates that the class is already associated with an outbound policy and a macht secondary cos rule can not be added, or the class already has a match secondary cos rule and it can not be associated with an outbound policy')
hm2AgentDiffServPolicyTableFullErrorReturn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 7, 248, 13))
if mibBuilder.loadTexts: hm2AgentDiffServPolicyTableFullErrorReturn.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServPolicyTableFullErrorReturn.setDescription('Indicates that the policy table is full and no other policies can be added or index is out of range')
hm2AgentDiffServPolicyNameInUseErrorReturn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 7, 248, 14))
if mibBuilder.loadTexts: hm2AgentDiffServPolicyNameInUseErrorReturn.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServPolicyNameInUseErrorReturn.setDescription('Indicates that the name is already used by another policy')
hm2AgentDiffServPolicyHasInstancesErrorReturn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 7, 248, 15))
if mibBuilder.loadTexts: hm2AgentDiffServPolicyHasInstancesErrorReturn.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServPolicyHasInstancesErrorReturn.setDescription('Indicates that the policy has one or more instances and can not be deleted')
hm2AgentDiffServPolicyHasReferencesErrorReturn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 7, 248, 16))
if mibBuilder.loadTexts: hm2AgentDiffServPolicyHasReferencesErrorReturn.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServPolicyHasReferencesErrorReturn.setDescription('Indicates that the policy is used by one or more service-policies and can not be deleted')
hm2AgentDiffServPolicyIndexOutOfRangeErrorReturn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 7, 248, 17))
if mibBuilder.loadTexts: hm2AgentDiffServPolicyIndexOutOfRangeErrorReturn.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServPolicyIndexOutOfRangeErrorReturn.setDescription('Indicates that the policy is out of range')
hm2AgentDiffServInstanceIndexOutOfRangeErrorReturn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 7, 248, 18))
if mibBuilder.loadTexts: hm2AgentDiffServInstanceIndexOutOfRangeErrorReturn.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServInstanceIndexOutOfRangeErrorReturn.setDescription('Indicates that the instance index is out of range')
hm2AgentDiffServInstanceTableFullErrorReturn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 7, 248, 19))
if mibBuilder.loadTexts: hm2AgentDiffServInstanceTableFullErrorReturn.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServInstanceTableFullErrorReturn.setDescription('Indicates that the instance table is full and no other instances can be added')
hm2AgentDiffServInstanceHasAttributesErrorReturn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 7, 248, 20))
if mibBuilder.loadTexts: hm2AgentDiffServInstanceHasAttributesErrorReturn.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServInstanceHasAttributesErrorReturn.setDescription('Indicates that the instance has one or more attributes and can not be deleted')
hm2AgentDiffServAttributeIndexOutOfRangeErrorReturn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 7, 248, 21))
if mibBuilder.loadTexts: hm2AgentDiffServAttributeIndexOutOfRangeErrorReturn.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServAttributeIndexOutOfRangeErrorReturn.setDescription('Indicates that the attribute index is out of range')
hm2AgentDiffServAttributeTableFullErrorReturn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 7, 248, 22))
if mibBuilder.loadTexts: hm2AgentDiffServAttributeTableFullErrorReturn.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServAttributeTableFullErrorReturn.setDescription('Indicates that the attribute table is full')
hm2AgentDiffServAttributeIncompatibilityErrorReturn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 7, 248, 23))
if mibBuilder.loadTexts: hm2AgentDiffServAttributeIncompatibilityErrorReturn.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServAttributeIncompatibilityErrorReturn.setDescription('Indicates that the attribute type is incompatible with other existing attributes of this instance or with the policy type and can not be added')
hm2AgentDiffServAttributeActionSetCosAsSecCosErrorReturn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 7, 248, 24))
if mibBuilder.loadTexts: hm2AgentDiffServAttributeActionSetCosAsSecCosErrorReturn.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServAttributeActionSetCosAsSecCosErrorReturn.setDescription('Indicates that the set cos as secondary cos action is supported only for inbound policies')
hm2AgentDiffServAttributeConformColorClassIndexErrorReturn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 7, 248, 25))
if mibBuilder.loadTexts: hm2AgentDiffServAttributeConformColorClassIndexErrorReturn.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServAttributeConformColorClassIndexErrorReturn.setDescription('Indicates that the class is not valid for color-aware use')
hm2AgentDiffServServiceInvalidInterfaceErrorReturn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 7, 248, 26))
if mibBuilder.loadTexts: hm2AgentDiffServServiceInvalidInterfaceErrorReturn.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServServiceInvalidInterfaceErrorReturn.setDescription('Indicates that the interface number is not valid')
hm2AgentDiffServServiceInvalidDirectionErrorReturn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 7, 248, 27))
if mibBuilder.loadTexts: hm2AgentDiffServServiceInvalidDirectionErrorReturn.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServServiceInvalidDirectionErrorReturn.setDescription('Indicates that the direction is not valid')
hm2AgentDiffServServiceTableFullErrorReturn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 7, 248, 28))
if mibBuilder.loadTexts: hm2AgentDiffServServiceTableFullErrorReturn.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServServiceTableFullErrorReturn.setDescription('Indicates that the service table is full')
hm2AgentDiffServServiceInvalidPolicyTypeErrorReturn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 7, 248, 29))
if mibBuilder.loadTexts: hm2AgentDiffServServiceInvalidPolicyTypeErrorReturn.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServServiceInvalidPolicyTypeErrorReturn.setDescription('Indicates that the policy type does not correspond with the service type')
hm2AgentDiffServInstanceExistsErrorReturn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 7, 248, 30))
if mibBuilder.loadTexts: hm2AgentDiffServInstanceExistsErrorReturn.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServInstanceExistsErrorReturn.setDescription('Indicates that the policy already has an instance of the class')
hm2AgentDiffServInstanceInvalidClassErrorReturn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 7, 248, 31))
if mibBuilder.loadTexts: hm2AgentDiffServInstanceInvalidClassErrorReturn.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDiffServInstanceInvalidClassErrorReturn.setDescription('Indicates that the class does not exist or is invalid and the instance can not be created')
mibBuilder.exportSymbols("HM2-PLATFORM-QOS-DIFFSERV-PRIVATE-MIB", hm2AgentDiffServClassRuleIndexNextFree=hm2AgentDiffServClassRuleIndexNextFree, hm2AgentDiffServClassRuleMatchDstIpMask=hm2AgentDiffServClassRuleMatchDstIpMask, hm2AgentDiffServClassRuleMatchEvery=hm2AgentDiffServClassRuleMatchEvery, hm2AgentDiffServServiceTableFullErrorReturn=hm2AgentDiffServServiceTableFullErrorReturn, hm2AgentDiffServPolicyPerfOutEntry=hm2AgentDiffServPolicyPerfOutEntry, hm2AgentDiffServPolicyAttrStmtPoliceTworateCburst=hm2AgentDiffServPolicyAttrStmtPoliceTworateCburst, hm2AgentDiffServServiceTable=hm2AgentDiffServServiceTable, hm2AgentDiffServClassRuleIndex=hm2AgentDiffServClassRuleIndex, hm2AgentDiffServPolicyIndexNextFree=hm2AgentDiffServPolicyIndexNextFree, hm2AgentDiffServPolicyInstStorageType=hm2AgentDiffServPolicyInstStorageType, hm2AgentDiffServServicePolicyIndex=hm2AgentDiffServServicePolicyIndex, hm2AgentDiffServSNMPExtensionGroup=hm2AgentDiffServSNMPExtensionGroup, hm2AgentDiffServPolicyAttrStmtMarkCosAsSecCos=hm2AgentDiffServPolicyAttrStmtMarkCosAsSecCos, hm2AgentDiffServGenStatusClassRuleTableMax=hm2AgentDiffServGenStatusClassRuleTableMax, hm2AgentDiffServGenStatusClassTableMax=hm2AgentDiffServGenStatusClassTableMax, hm2AgentDiffServPolicyAttrStmtPoliceTworatePrate=hm2AgentDiffServPolicyAttrStmtPoliceTworatePrate, hm2AgentDiffServClassRuleMatchExcludeFlag=hm2AgentDiffServClassRuleMatchExcludeFlag, hm2AgentDiffServPolicyTableFullErrorReturn=hm2AgentDiffServPolicyTableFullErrorReturn, hm2AgentDiffServPolicyAttrStmtDrop=hm2AgentDiffServPolicyAttrStmtDrop, hm2AgentDiffServClassHasRulesErrorReturn=hm2AgentDiffServClassHasRulesErrorReturn, hm2AgentDiffServClassIndexNextFree=hm2AgentDiffServClassIndexNextFree, hm2AgentDiffServPolicyAttrStmtPoliceSimpleCrate=hm2AgentDiffServPolicyAttrStmtPoliceSimpleCrate, hm2AgentDiffServInstanceExistsErrorReturn=hm2AgentDiffServInstanceExistsErrorReturn, hm2AgentDiffServPolicyPerfOutStorageType=hm2AgentDiffServPolicyPerfOutStorageType, hm2AgentDiffServPolicyAttrStmtPoliceExceedAct=hm2AgentDiffServPolicyAttrStmtPoliceExceedAct, hm2AgentDiffServClassEntry=hm2AgentDiffServClassEntry, hm2AgentDiffServGenStatusAdminMode=hm2AgentDiffServGenStatusAdminMode, hm2AgentDiffServClassRuleMatchVlanId2Start=hm2AgentDiffServClassRuleMatchVlanId2Start, hm2AgentDiffServClassRuleMatchCos=hm2AgentDiffServClassRuleMatchCos, hm2AgentDiffServGenStatusGroup=hm2AgentDiffServGenStatusGroup, hm2AgentDiffServClassIndexOutOfRangeErrorReturn=hm2AgentDiffServClassIndexOutOfRangeErrorReturn, hm2AgentDiffServInstanceTableFullErrorReturn=hm2AgentDiffServInstanceTableFullErrorReturn, hm2AgentDiffServPolicyPerfOutHCDiscardedPackets=hm2AgentDiffServPolicyPerfOutHCDiscardedPackets, hm2AgentDiffServClassRuleMatchProtocolNum=hm2AgentDiffServClassRuleMatchProtocolNum, PYSNMP_MODULE_ID=hm2PlatformQOSDiffServPrivate, hm2AgentDiffServClassRuleMatchEtypeValue=hm2AgentDiffServClassRuleMatchEtypeValue, hm2AgentDiffServPolicyAttrEntry=hm2AgentDiffServPolicyAttrEntry, hm2AgentDiffServServiceInvalidInterfaceErrorReturn=hm2AgentDiffServServiceInvalidInterfaceErrorReturn, hm2AgentDiffServClassRuleMatchSrcMacMask=hm2AgentDiffServClassRuleMatchSrcMacMask, hm2AgentDiffServClassName=hm2AgentDiffServClassName, hm2AgentDiffServPolicyGroup=hm2AgentDiffServPolicyGroup, hm2AgentDiffServPolicyAttrStmtMirrorIntf=hm2AgentDiffServPolicyAttrStmtMirrorIntf, hm2AgentDiffServPolicyPerfInTable=hm2AgentDiffServPolicyPerfInTable, hm2AgentDiffServClassRuleInvalidReferenceErrorReturn=hm2AgentDiffServClassRuleInvalidReferenceErrorReturn, hm2AgentDiffServPolicyPerfInRowStatus=hm2AgentDiffServPolicyPerfInRowStatus, hm2AgentDiffServClassRuleReferenceLoopErrorReturn=hm2AgentDiffServClassRuleReferenceLoopErrorReturn, hm2AgentDiffServClassRuleMatchSrcL4PortStart=hm2AgentDiffServClassRuleMatchSrcL4PortStart, hm2AgentDiffServClassTableFullErrorReturn=hm2AgentDiffServClassTableFullErrorReturn, hm2AgentDiffServClassRuleEntry=hm2AgentDiffServClassRuleEntry, hm2AgentDiffServInstanceInvalidClassErrorReturn=hm2AgentDiffServInstanceInvalidClassErrorReturn, hm2AgentDiffServClassTable=hm2AgentDiffServClassTable, hm2AgentDiffServPolicyInstIndex=hm2AgentDiffServPolicyInstIndex, hm2AgentDiffServServiceIfIndex=hm2AgentDiffServServiceIfIndex, hm2AgentDiffServClassRuleTableFullErrorReturn=hm2AgentDiffServClassRuleTableFullErrorReturn, hm2AgentDiffServPolicyPerfOutRowStatus=hm2AgentDiffServPolicyPerfOutRowStatus, hm2AgentDiffServInstanceIndexOutOfRangeErrorReturn=hm2AgentDiffServInstanceIndexOutOfRangeErrorReturn, hm2AgentDiffServPolicyInstRowStatus=hm2AgentDiffServPolicyInstRowStatus, hm2AgentDiffServPolicyAttrStmtEntryType=hm2AgentDiffServPolicyAttrStmtEntryType, hm2AgentDiffServPolicyAttrStmtRedirectIntf=hm2AgentDiffServPolicyAttrStmtRedirectIntf, hm2AgentDiffServClassRuleMatchRefClassIndex=hm2AgentDiffServClassRuleMatchRefClassIndex, hm2AgentDiffServPolicyAttrIndex=hm2AgentDiffServPolicyAttrIndex, hm2AgentDiffServPolicyAttrStmtPoliceSinglerateEburst=hm2AgentDiffServPolicyAttrStmtPoliceSinglerateEburst, hm2AgentDiffServGenStatusPolicyTableSize=hm2AgentDiffServGenStatusPolicyTableSize, hm2AgentDiffServPolicyAttrStmtPoliceConformAct=hm2AgentDiffServPolicyAttrStmtPoliceConformAct, hm2AgentDiffServClassProtoType=hm2AgentDiffServClassProtoType, hm2AgentDiffServPolicyAttrStmtPoliceSinglerateCburst=hm2AgentDiffServPolicyAttrStmtPoliceSinglerateCburst, hm2AgentDiffServClassRuleMatchEntryType=hm2AgentDiffServClassRuleMatchEntryType, hm2AgentDiffServAttributeIndexOutOfRangeErrorReturn=hm2AgentDiffServAttributeIndexOutOfRangeErrorReturn, hm2AgentDiffServPolicyAttrStmtPoliceColorExceedMode=hm2AgentDiffServPolicyAttrStmtPoliceColorExceedMode, hm2AgentDiffServPolicyHasInstancesErrorReturn=hm2AgentDiffServPolicyHasInstancesErrorReturn, hm2AgentDiffServGenStatusPolicyTableMax=hm2AgentDiffServGenStatusPolicyTableMax, hm2AgentDiffServPolicyPerfInEntry=hm2AgentDiffServPolicyPerfInEntry, hm2AgentDiffServClassRuleMatchSrcL4PortEnd=hm2AgentDiffServClassRuleMatchSrcL4PortEnd, hm2AgentDiffServPolicyInstAttrIndexNextFree=hm2AgentDiffServPolicyInstAttrIndexNextFree, hm2AgentDiffServClassRuleMatchDstMacAddr=hm2AgentDiffServClassRuleMatchDstMacAddr, hm2AgentDiffServClassRowStatus=hm2AgentDiffServClassRowStatus, hm2AgentDiffServPolicyAttrRowStatus=hm2AgentDiffServPolicyAttrRowStatus, hm2AgentDiffServPolicyAttrStmtPoliceNonconformAct=hm2AgentDiffServPolicyAttrStmtPoliceNonconformAct, hm2AgentDiffServGenStatusPolicyAttrTableMax=hm2AgentDiffServGenStatusPolicyAttrTableMax, hm2AgentDiffServPolicyPerfInDiscardedPackets=hm2AgentDiffServPolicyPerfInDiscardedPackets, hm2AgentDiffServPolicyHasReferencesErrorReturn=hm2AgentDiffServPolicyHasReferencesErrorReturn, hm2AgentDiffServClassRuleMatchDstIpAddr=hm2AgentDiffServClassRuleMatchDstIpAddr, hm2AgentDiffServClassRuleMatchSrcMacAddr=hm2AgentDiffServClassRuleMatchSrcMacAddr, hm2AgentDiffServPolicyAttrStmtPoliceConformVal=hm2AgentDiffServPolicyAttrStmtPoliceConformVal, hm2AgentDiffServClassRuleMatchVlanId2End=hm2AgentDiffServClassRuleMatchVlanId2End, hm2AgentDiffServPolicyInstClassIndex=hm2AgentDiffServPolicyInstClassIndex, hm2AgentDiffServPolicyAttrStmtMarkIpPrecedenceVal=hm2AgentDiffServPolicyAttrStmtMarkIpPrecedenceVal, hm2AgentDiffServPolicyPerfOutTable=hm2AgentDiffServPolicyPerfOutTable, hm2AgentDiffServGenStatusClassRuleTableSize=hm2AgentDiffServGenStatusClassRuleTableSize, hm2AgentDiffServPolicyRowStatus=hm2AgentDiffServPolicyRowStatus, hm2AgentDiffServClassRuleMatchIpTosMask=hm2AgentDiffServClassRuleMatchIpTosMask, hm2AgentDiffServClassType=hm2AgentDiffServClassType, hm2AgentDiffServClassRuleMatchDstMacMask=hm2AgentDiffServClassRuleMatchDstMacMask, hm2AgentDiffServClassStorageType=hm2AgentDiffServClassStorageType, hm2AgentDiffServPolicyInstIndexNextFree=hm2AgentDiffServPolicyInstIndexNextFree, hm2AgentDiffServServiceIfDirection=hm2AgentDiffServServiceIfDirection, hm2AgentDiffServPolicyTable=hm2AgentDiffServPolicyTable, hm2AgentDiffServServiceIfOperStatus=hm2AgentDiffServServiceIfOperStatus, hm2AgentDiffServServiceInvalidPolicyTypeErrorReturn=hm2AgentDiffServServiceInvalidPolicyTypeErrorReturn, hm2AgentDiffServPolicyAttrStmtMarkIpDscpVal=hm2AgentDiffServPolicyAttrStmtMarkIpDscpVal, hm2AgentDiffServClassRuleMatchIpDscp=hm2AgentDiffServClassRuleMatchIpDscp, hm2AgentDiffServClassRuleMatchDstL4PortStart=hm2AgentDiffServClassRuleMatchDstL4PortStart, hm2AgentDiffServClassRuleIndexOutOfRangeErrorReturn=hm2AgentDiffServClassRuleIndexOutOfRangeErrorReturn, hm2AgentDiffServPolicyName=hm2AgentDiffServPolicyName, hm2AgentDiffServAttributeTableFullErrorReturn=hm2AgentDiffServAttributeTableFullErrorReturn, hm2AgentDiffServClassRuleColorRefErrorReturn=hm2AgentDiffServClassRuleColorRefErrorReturn, hm2AgentDiffServClassRuleMatchSecCosErrorReturn=hm2AgentDiffServClassRuleMatchSecCosErrorReturn, hm2AgentDiffServPolicyPerfInOfferedPackets=hm2AgentDiffServPolicyPerfInOfferedPackets, QosBurstSize=QosBurstSize, hm2AgentDiffServClassRuleMatchCos2=hm2AgentDiffServClassRuleMatchCos2, hm2AgentDiffServGenStatusClassTableSize=hm2AgentDiffServGenStatusClassTableSize, hm2AgentDiffServPolicyAttrStmtPoliceColorExceedIndex=hm2AgentDiffServPolicyAttrStmtPoliceColorExceedIndex, hm2AgentDiffServClassRuleMatchIpPrecedence=hm2AgentDiffServClassRuleMatchIpPrecedence, hm2AgentDiffServPolicyAttrStmtPoliceColorConformMode=hm2AgentDiffServPolicyAttrStmtPoliceColorConformMode, hm2AgentDiffServClassRuleMatchDstL4PortEnd=hm2AgentDiffServClassRuleMatchDstL4PortEnd, hm2AgentDiffServPolicyPerfInStorageType=hm2AgentDiffServPolicyPerfInStorageType, IntfDirection=IntfDirection, hm2AgentDiffServClassRuleMatchSrcIpAddr=hm2AgentDiffServClassRuleMatchSrcIpAddr, hm2AgentDiffServPolicyPerfOutHCOfferedPackets=hm2AgentDiffServPolicyPerfOutHCOfferedPackets, hm2AgentDiffServPolicyAttrStmtPoliceColorExceedVal=hm2AgentDiffServPolicyAttrStmtPoliceColorExceedVal, hm2AgentDiffServGenStatusPolicyAttrTableSize=hm2AgentDiffServGenStatusPolicyAttrTableSize, hm2AgentDiffServPolicyInstEntry=hm2AgentDiffServPolicyInstEntry, hm2AgentDiffServClassRuleStorageType=hm2AgentDiffServClassRuleStorageType, hm2AgentDiffServAttributeIncompatibilityErrorReturn=hm2AgentDiffServAttributeIncompatibilityErrorReturn, hm2AgentDiffServAttributeActionSetCosAsSecCosErrorReturn=hm2AgentDiffServAttributeActionSetCosAsSecCosErrorReturn, hm2AgentDiffServClassRuleInUseErrorReturn=hm2AgentDiffServClassRuleInUseErrorReturn, hm2AgentDiffServGenStatusServiceTableMax=hm2AgentDiffServGenStatusServiceTableMax, hm2AgentDiffServClassRuleRowStatus=hm2AgentDiffServClassRuleRowStatus, hm2AgentDiffServPolicyPerfOutDiscardedPackets=hm2AgentDiffServPolicyPerfOutDiscardedPackets, hm2AgentDiffServPolicyAttrStmtPoliceSinglerateCrate=hm2AgentDiffServPolicyAttrStmtPoliceSinglerateCrate, hm2AgentDiffServPolicyStorageType=hm2AgentDiffServPolicyStorageType, hm2AgentDiffServAttributeConformColorClassIndexErrorReturn=hm2AgentDiffServAttributeConformColorClassIndexErrorReturn, hm2AgentDiffServClassRuleMatchSrcIpMask=hm2AgentDiffServClassRuleMatchSrcIpMask, hm2AgentDiffServPolicyPerfInHCDiscardedPackets=hm2AgentDiffServPolicyPerfInHCDiscardedPackets, hm2AgentDiffServPolicyAttrStmtPoliceTworatePburst=hm2AgentDiffServPolicyAttrStmtPoliceTworatePburst, hm2AgentDiffServPolicyAttrStmtPoliceExceedVal=hm2AgentDiffServPolicyAttrStmtPoliceExceedVal, hm2AgentDiffServClassRuleMatchVlanIdEnd=hm2AgentDiffServClassRuleMatchVlanIdEnd, hm2AgentDiffServPolicyType=hm2AgentDiffServPolicyType, hm2AgentDiffServPolicyAttrStmtAssignQueueId=hm2AgentDiffServPolicyAttrStmtAssignQueueId, hm2AgentDiffServPolicyAttrStmtPoliceColorConformVal=hm2AgentDiffServPolicyAttrStmtPoliceColorConformVal, hm2AgentDiffServPolicyPerfInHCOfferedPackets=hm2AgentDiffServPolicyPerfInHCOfferedPackets, hm2AgentDiffServGenStatusServiceTableSize=hm2AgentDiffServGenStatusServiceTableSize, hm2AgentDiffServPolicyAttrTable=hm2AgentDiffServPolicyAttrTable, hm2AgentDiffServPolicyInstTable=hm2AgentDiffServPolicyInstTable, hm2AgentDiffServClassRuleTable=hm2AgentDiffServClassRuleTable, hm2AgentDiffServClassRuleMatchEtypeKey=hm2AgentDiffServClassRuleMatchEtypeKey, hm2AgentDiffServPolicyIndexOutOfRangeErrorReturn=hm2AgentDiffServPolicyIndexOutOfRangeErrorReturn, hm2AgentDiffServServiceInvalidDirectionErrorReturn=hm2AgentDiffServServiceInvalidDirectionErrorReturn, hm2AgentDiffServPolicyAttrStmtMarkCosVal=hm2AgentDiffServPolicyAttrStmtMarkCosVal, hm2AgentDiffServServiceStorageType=hm2AgentDiffServServiceStorageType, hm2AgentDiffServClassNameInUseErrorReturn=hm2AgentDiffServClassNameInUseErrorReturn, hm2AgentDiffServPolicyIndex=hm2AgentDiffServPolicyIndex, hm2AgentDiffServClassIndex=hm2AgentDiffServClassIndex, Ipv6AddressPrefix=Ipv6AddressPrefix, hm2AgentDiffServServiceEntry=hm2AgentDiffServServiceEntry, hm2AgentDiffServPolicyNameInUseErrorReturn=hm2AgentDiffServPolicyNameInUseErrorReturn, hm2AgentDiffServGenStatusPolicyInstTableSize=hm2AgentDiffServGenStatusPolicyInstTableSize, hm2AgentDiffServPolicyAttrStmtPoliceSimpleCburst=hm2AgentDiffServPolicyAttrStmtPoliceSimpleCburst, hm2AgentDiffServClassHasReferencesErrorReturn=hm2AgentDiffServClassHasReferencesErrorReturn, hm2AgentDiffServServiceRowStatus=hm2AgentDiffServServiceRowStatus, hm2AgentDiffServInstanceHasAttributesErrorReturn=hm2AgentDiffServInstanceHasAttributesErrorReturn, hm2AgentDiffServPolicyAttrStmtPoliceColorConformIndex=hm2AgentDiffServPolicyAttrStmtPoliceColorConformIndex, hm2AgentDiffServGenStatusPolicyInstTableMax=hm2AgentDiffServGenStatusPolicyInstTableMax, hm2AgentDiffServClassRuleMatchVlanIdStart=hm2AgentDiffServClassRuleMatchVlanIdStart, hm2AgentDiffServPolicyAttrStorageType=hm2AgentDiffServPolicyAttrStorageType, hm2AgentDiffServPolicyAttrStmtPoliceNonconformVal=hm2AgentDiffServPolicyAttrStmtPoliceNonconformVal, hm2AgentDiffServServiceGroup=hm2AgentDiffServServiceGroup, EtypeValue=EtypeValue, hm2AgentDiffServPolicyEntry=hm2AgentDiffServPolicyEntry, hm2AgentDiffServPolicyPerfOutOfferedPackets=hm2AgentDiffServPolicyPerfOutOfferedPackets, hm2AgentDiffServPolicyAttrStmtMarkCos2Val=hm2AgentDiffServPolicyAttrStmtMarkCos2Val, hm2AgentDiffServClassRuleMatchIpTosBits=hm2AgentDiffServClassRuleMatchIpTosBits, hm2AgentDiffServPolicyAttrStmtPoliceTworateCrate=hm2AgentDiffServPolicyAttrStmtPoliceTworateCrate, hm2AgentDiffServClassGroup=hm2AgentDiffServClassGroup, hm2PlatformQOSDiffServPrivate=hm2PlatformQOSDiffServPrivate)
