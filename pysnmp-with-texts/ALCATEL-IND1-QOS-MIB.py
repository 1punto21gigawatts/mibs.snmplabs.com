#
# PySNMP MIB module ALCATEL-IND1-QOS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ALCATEL-IND1-QOS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:19:08 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
softentIND1QoS, = mibBuilder.importSymbols("ALCATEL-IND1-BASE", "softentIND1QoS")
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
Ipv6Address, = mibBuilder.importSymbols("IPV6-TC", "Ipv6Address")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Gauge32, Unsigned32, ModuleIdentity, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Integer32, Counter64, MibIdentifier, Counter32, iso, IpAddress, ObjectIdentity, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Unsigned32", "ModuleIdentity", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Integer32", "Counter64", "MibIdentifier", "Counter32", "iso", "IpAddress", "ObjectIdentity", "TimeTicks")
TextualConvention, MacAddress, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "MacAddress", "DisplayString", "RowStatus")
alaQoSMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1))
if mibBuilder.loadTexts: alaQoSMIB.setLastUpdated('200704030000Z')
if mibBuilder.loadTexts: alaQoSMIB.setOrganization('Alcatel IND')
if mibBuilder.loadTexts: alaQoSMIB.setContactInfo('David Morgan E-Mail: David.Morgan@ind.alcatel.com')
if mibBuilder.loadTexts: alaQoSMIB.setDescription('QoS and Filtering MIB')
alaQoSMIBObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1))
if mibBuilder.loadTexts: alaQoSMIBObjects.setStatus('current')
if mibBuilder.loadTexts: alaQoSMIBObjects.setDescription('Branch for QoS Managed Objects.')
alaQoSRuleTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 1), )
if mibBuilder.loadTexts: alaQoSRuleTable.setStatus('current')
if mibBuilder.loadTexts: alaQoSRuleTable.setDescription('Table of QoS Rule definitions')
alaQoSRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-QOS-MIB", "alaQoSRuleName"))
if mibBuilder.loadTexts: alaQoSRuleEntry.setStatus('current')
if mibBuilder.loadTexts: alaQoSRuleEntry.setDescription('Definition of QoS Rule')
alaQoSRuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31)))
if mibBuilder.loadTexts: alaQoSRuleName.setStatus('current')
if mibBuilder.loadTexts: alaQoSRuleName.setDescription('Name of rule')
alaQoSRuleEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSRuleEnabled.setStatus('current')
if mibBuilder.loadTexts: alaQoSRuleEnabled.setDescription('Is this rule enabled or not')
alaQoSRuleSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ldap", 1), ("cli", 2), ("blt", 3), ("api", 4), ("imp", 5))).clone('cli')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSRuleSource.setStatus('current')
if mibBuilder.loadTexts: alaQoSRuleSource.setDescription('What entity created the rule.')
alaQoSRulePrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSRulePrecedence.setStatus('current')
if mibBuilder.loadTexts: alaQoSRulePrecedence.setDescription('Precedence value for rule. Rules are evaluated from higher precedence to lower. If rules have equal precedence, they are evaluated in the order they are received.')
alaQoSRuleCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSRuleCondition.setStatus('current')
if mibBuilder.loadTexts: alaQoSRuleCondition.setDescription('Name of the condition to use')
alaQoSRuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSRuleAction.setStatus('current')
if mibBuilder.loadTexts: alaQoSRuleAction.setDescription('Name of the action to use')
alaQoSRuleReflexive = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('no')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSRuleReflexive.setStatus('current')
if mibBuilder.loadTexts: alaQoSRuleReflexive.setDescription('Indicator to tell if the rule is reflexive. Reflexive rules allow specific return connections that would normally be denied.')
alaQoSRuleSave = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('yes')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSRuleSave.setStatus('current')
if mibBuilder.loadTexts: alaQoSRuleSave.setDescription('Indicator to tell whether to write out the rule during snapshot commands.')
alaQoSRuleLog = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('no')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSRuleLog.setStatus('current')
if mibBuilder.loadTexts: alaQoSRuleLog.setDescription('Indicator to tell whether to log matches to this rule in the QoS log.')
alaQoSRuleMatches = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSRuleMatches.setStatus('current')
if mibBuilder.loadTexts: alaQoSRuleMatches.setDescription('Number of times this rule has been matched.')
alaQoSRuleEnforced = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSRuleEnforced.setStatus('current')
if mibBuilder.loadTexts: alaQoSRuleEnforced.setDescription('Is this rule currenly being enforced on the switch.')
alaQoSRuleActive = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSRuleActive.setStatus('current')
if mibBuilder.loadTexts: alaQoSRuleActive.setDescription('Is this rule enforcable by the switch.')
alaQoSRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 1, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSRuleRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSRuleRowStatus.setDescription('Used to create/delete rules according to the RowStatus convention')
alaQoSRuleValidityPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSRuleValidityPeriod.setStatus('current')
if mibBuilder.loadTexts: alaQoSRuleValidityPeriod.setDescription('Name of the validity period to use')
alaQoSRuleValidityPeriodStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSRuleValidityPeriodStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSRuleValidityPeriodStatus.setDescription('Status field indicating whether there is a validity period associated with this rule')
alaQoSRuleLogInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600)).clone(30)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSRuleLogInterval.setStatus('current')
if mibBuilder.loadTexts: alaQoSRuleLogInterval.setDescription('How often to look for packets matching this rule when logging. When 0 log as many as possible.')
alaQoSRuleCountType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("packets", 1), ("bytes", 2))).clone('packets')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSRuleCountType.setStatus('current')
if mibBuilder.loadTexts: alaQoSRuleCountType.setDescription('Which rule statistics counters to update if not all are available')
alaQoSRulePacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 1, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSRulePacketCount.setStatus('current')
if mibBuilder.loadTexts: alaQoSRulePacketCount.setDescription('Counter for packets patching this rule')
alaQoSRuleByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 1, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSRuleByteCount.setStatus('current')
if mibBuilder.loadTexts: alaQoSRuleByteCount.setDescription('Counter for bytes matching this rule')
alaQoSRuleExcessPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 1, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSRuleExcessPacketCount.setStatus('current')
if mibBuilder.loadTexts: alaQoSRuleExcessPacketCount.setDescription('Counter for packets out of bandwidth parameters')
alaQoSRuleExcessByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 1, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSRuleExcessByteCount.setStatus('current')
if mibBuilder.loadTexts: alaQoSRuleExcessByteCount.setDescription('Counter for bytes out of bandwidth parameters')
alaQoSRuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSRuleType.setStatus('current')
if mibBuilder.loadTexts: alaQoSRuleType.setDescription('The type of rule this is. Each bit represents the following: 0x1 = bridged 0x2 = routed 0x4 = multicast')
alaQoSRuleTrapEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('yes')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSRuleTrapEvents.setStatus('current')
if mibBuilder.loadTexts: alaQoSRuleTrapEvents.setDescription("Send SNMP trap when 'qos user-port shutdown' param or rule having action=port-disable is matched/invoked?")
alaQoSRuleDefaultList = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('yes')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSRuleDefaultList.setStatus('current')
if mibBuilder.loadTexts: alaQoSRuleDefaultList.setDescription('This rule belongs to the default policy list. ')
alaQoSRuleGreenCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 1, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSRuleGreenCount.setStatus('current')
if mibBuilder.loadTexts: alaQoSRuleGreenCount.setDescription('Counter for the number of packets being green compliant.')
alaQoSRuleYellowCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 1, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSRuleYellowCount.setStatus('current')
if mibBuilder.loadTexts: alaQoSRuleYellowCount.setDescription('Counter for the number of packets being yellow compliant.')
alaQoSRuleRedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 1, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSRuleRedCount.setStatus('current')
if mibBuilder.loadTexts: alaQoSRuleRedCount.setDescription('Counter for the number of packets being red compliant.')
alaQoSRuleNonGreenCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 1, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSRuleNonGreenCount.setStatus('current')
if mibBuilder.loadTexts: alaQoSRuleNonGreenCount.setDescription('Counter for the number of packets being non-green compliant.')
alaQoSRuleNonRedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 1, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSRuleNonRedCount.setStatus('current')
if mibBuilder.loadTexts: alaQoSRuleNonRedCount.setDescription('Counter for the number of packets being non-red compliant.')
alaQoSAppliedRuleTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 2), )
if mibBuilder.loadTexts: alaQoSAppliedRuleTable.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedRuleTable.setDescription('Table of QoS AppliedRule definitions')
alaQoSAppliedRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 2, 1), ).setIndexNames((0, "ALCATEL-IND1-QOS-MIB", "alaQoSAppliedRuleName"))
if mibBuilder.loadTexts: alaQoSAppliedRuleEntry.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedRuleEntry.setDescription('Definition of QoS AppliedRule')
alaQoSAppliedRuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31)))
if mibBuilder.loadTexts: alaQoSAppliedRuleName.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedRuleName.setDescription('Name of rule')
alaQoSAppliedRuleEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedRuleEnabled.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedRuleEnabled.setDescription('Is this rule enabled or not')
alaQoSAppliedRuleSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ldap", 1), ("cli", 2), ("blt", 3), ("api", 4), ("imp", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedRuleSource.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedRuleSource.setDescription('What entity created the rule.')
alaQoSAppliedRulePrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedRulePrecedence.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedRulePrecedence.setDescription('Precedence value for rule. Rules are evaluated from higher precedence to lower. If rules have equal precedence, they are evaluated in the order they are received.')
alaQoSAppliedRuleCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedRuleCondition.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedRuleCondition.setDescription('Name of the condition to use')
alaQoSAppliedRuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedRuleAction.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedRuleAction.setDescription('Name of the action to use')
alaQoSAppliedRuleReflexive = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedRuleReflexive.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedRuleReflexive.setDescription('Indicator to tell if the rule is reflexive. Reflexive rules allow specific return connections that would normally be denied.')
alaQoSAppliedRuleSave = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedRuleSave.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedRuleSave.setDescription('Indicator to tell whether to write out the rule during snapshot commands.')
alaQoSAppliedRuleLog = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedRuleLog.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedRuleLog.setDescription('Indicator to tell whether to log matches to this rule in the QoS log.')
alaQoSAppliedRuleMatches = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedRuleMatches.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedRuleMatches.setDescription('Number of times this rule has been matched.')
alaQoSAppliedRuleEnforced = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedRuleEnforced.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedRuleEnforced.setDescription('Is this rule currenly being enforced on the switch.')
alaQoSAppliedRuleActive = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedRuleActive.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedRuleActive.setDescription('Is this rule enforcable by the switch.')
alaQoSAppliedRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 2, 1, 13), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedRuleRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedRuleRowStatus.setDescription('Used to create/delete rules according to the RowStatus convention')
alaQoSAppliedRuleValidityPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 2, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedRuleValidityPeriod.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedRuleValidityPeriod.setDescription('Name of the validity period to use')
alaQoSAppliedRuleValidityPeriodStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedRuleValidityPeriodStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedRuleValidityPeriodStatus.setDescription('Status field indicating whether there is a validity period associated with this rule')
alaQoSAppliedRuleLogInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedRuleLogInterval.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedRuleLogInterval.setDescription('How often to look for packets matching this rule when logging. When 0 log as many as possible.')
alaQoSAppliedRuleCountType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("packets", 1), ("bytes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedRuleCountType.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedRuleCountType.setDescription('Which rule statistics counters to update if not all are available')
alaQoSAppliedRulePacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 2, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedRulePacketCount.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedRulePacketCount.setDescription('Counter for packets patching this rule')
alaQoSAppliedRuleByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 2, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedRuleByteCount.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedRuleByteCount.setDescription('Counter for bytes matching this rule')
alaQoSAppliedRuleExcessPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 2, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedRuleExcessPacketCount.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedRuleExcessPacketCount.setDescription('Counter for packets out of bandwidth parameters')
alaQoSAppliedRuleExcessByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 2, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedRuleExcessByteCount.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedRuleExcessByteCount.setDescription('Counter for bytes out of bandwidth parameters')
alaQoSAppliedRuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 2, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedRuleType.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedRuleType.setDescription('The type of rule this is. Each bit represents the following: 0x1 = bridged 0x2 = routed 0x4 = multicast')
alaQoSAppliedRuleTrapEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('yes')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSAppliedRuleTrapEvents.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedRuleTrapEvents.setDescription("Send SNMP trap when 'qos user-port shutdown' param or rule having action=port-disable is matched/invoked?")
alaQoSAppliedRuleDefaultList = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('yes')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSAppliedRuleDefaultList.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedRuleDefaultList.setDescription('This rule belongs to the default policy list. ')
alaQoSAppliedRuleGreenCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 2, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedRuleGreenCount.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedRuleGreenCount.setDescription('Counter for the number of packets being green compliant.')
alaQoSAppliedRuleYellowCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 2, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedRuleYellowCount.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedRuleYellowCount.setDescription('Counter for the number of packets being yellow compliant.')
alaQoSAppliedRuleRedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 2, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedRuleRedCount.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedRuleRedCount.setDescription('Counter for the number of packets being red compliant.')
alaQoSAppliedRuleNonGreenCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 2, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedRuleNonGreenCount.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedRuleNonGreenCount.setDescription('Counter for the number of packets being non-green compliant.')
alaQoSAppliedRuleNonRedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 2, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedRuleNonRedCount.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedRuleNonRedCount.setDescription('Counter for the number of packets being non-red compliant.')
alaQoSConditionTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3), )
if mibBuilder.loadTexts: alaQoSConditionTable.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionTable.setDescription('Table of QoS Condition definitions')
alaQoSConditionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1), ).setIndexNames((0, "ALCATEL-IND1-QOS-MIB", "alaQoSConditionName"))
if mibBuilder.loadTexts: alaQoSConditionEntry.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionEntry.setDescription('Definition of QoS Condition')
alaQoSConditionName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31)))
if mibBuilder.loadTexts: alaQoSConditionName.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionName.setDescription('Name of condition')
alaQoSConditionSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ldap", 1), ("cli", 2), ("blt", 3), ("api", 4), ("imp", 5))).clone('cli')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionSource.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionSource.setDescription('What entity created the condition.')
alaQoSConditionSourceSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionSourceSlot.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionSourceSlot.setDescription('Source physical slot used for traffic classification When 0, the port identifies an aggregate')
alaQoSConditionSourceSlotStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionSourceSlotStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionSourceSlotStatus.setDescription('Status field indicating whether the source physical slot and port range needs to be matched(enabled) or not(disabled).')
alaQoSConditionSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionSourcePort.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionSourcePort.setDescription('Source physical port range start to use for traffic classification')
alaQoSConditionSourcePortGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionSourcePortGroup.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionSourcePortGroup.setDescription('Source physical port group to use for traffic classification')
alaQoSConditionSourcePortGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionSourcePortGroupStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionSourcePortGroupStatus.setDescription('Status field indicating whether the source physical port group needs to be matched(enabled) or not(disabled).')
alaQoSConditionDestinationSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionDestinationSlot.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionDestinationSlot.setDescription('Destination physical slot used for traffic classification When 0, the port identifies an aggregate')
alaQoSConditionDestinationSlotStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionDestinationSlotStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionDestinationSlotStatus.setDescription('Status field indicating whether the destination physical slot and port range needs to be matched(enabled) or not(disabled).')
alaQoSConditionDestinationPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionDestinationPort.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionDestinationPort.setDescription('Destination physical port range start to use for traffic classification')
alaQoSConditionDestinationPortGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionDestinationPortGroup.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionDestinationPortGroup.setDescription('Destination physical port group to use for traffic classification')
alaQoSConditionDestinationPortGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionDestinationPortGroupStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionDestinationPortGroupStatus.setDescription('Status field indicating whether the destination physical port group needs to be matched(enabled) or not(disabled).')
alaQoSConditionSourceInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("ethernet", 1), ("wan", 2), ("ethernet10", 3), ("ethernet100", 4), ("ethernet1G", 5), ("ethernet10G", 6), ("aggregate", 7))).clone('ethernet')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionSourceInterfaceType.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionSourceInterfaceType.setDescription('Source physical interface type to use for traffic classification')
alaQoSConditionSourceInterfaceTypeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionSourceInterfaceTypeStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionSourceInterfaceTypeStatus.setDescription('Status field indicating whether the source physical interface type needs to be matched(enabled) or not(disabled).')
alaQoSConditionDestinationInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("ethernet", 1), ("wan", 2), ("ethernet10", 3), ("ethernet100", 4), ("ethernet1G", 5), ("ethernet10G", 6), ("aggregate", 7))).clone('ethernet')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionDestinationInterfaceType.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionDestinationInterfaceType.setDescription('Destination physical interface type to use for traffic classification')
alaQoSConditionDestinationInterfaceTypeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionDestinationInterfaceTypeStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionDestinationInterfaceTypeStatus.setDescription('Status field indicating whether the destination physical interface type needs to be matched(enabled) or not(disabled).')
alaQoSConditionSourceMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 17), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionSourceMacAddr.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionSourceMacAddr.setDescription('Source MAC address to use for traffic classification')
alaQoSConditionSourceMacAddrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionSourceMacAddrStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionSourceMacAddrStatus.setDescription('Status field indicating whether the source MAC address & mask needs to be matched(enabled) or not(disabled).')
alaQoSConditionSourceMacMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 19), MacAddress().clone(hexValue="ffffffffffff")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionSourceMacMask.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionSourceMacMask.setDescription('Source MAC mask to use for traffic classification')
alaQoSConditionSourceMacGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionSourceMacGroup.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionSourceMacGroup.setDescription('Source MAC group to use for traffic classification')
alaQoSConditionSourceMacGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionSourceMacGroupStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionSourceMacGroupStatus.setDescription('Status field indicating whether the source MAC group needs to be matched(enabled) or not(disabled).')
alaQoSConditionDestinationMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 22), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionDestinationMacAddr.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionDestinationMacAddr.setDescription('Destination MAC address to use for traffic classification')
alaQoSConditionDestinationMacAddrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionDestinationMacAddrStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionDestinationMacAddrStatus.setDescription('Status field indicating whether the destination MAC address & mask needs to be matched(enabled) or not(disabled).')
alaQoSConditionDestinationMacMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 24), MacAddress().clone(hexValue="ffffffffffff")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionDestinationMacMask.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionDestinationMacMask.setDescription('Destination MAC mask to use for traffic classification')
alaQoSConditionDestinationMacGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionDestinationMacGroup.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionDestinationMacGroup.setDescription('Destination MAC group to use for traffic classification')
alaQoSConditionDestinationMacGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionDestinationMacGroupStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionDestinationMacGroupStatus.setDescription('Status field indicating whether the destination MAC group needs to be matched(enabled) or not(disabled).')
alaQoSConditionSourceVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionSourceVlan.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionSourceVlan.setDescription('Source VLAN to use for traffic classification')
alaQoSConditionSourceVlanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionSourceVlanStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionSourceVlanStatus.setDescription('Status field indicating whether the source VLAN needs to be matched(enabled) or not(disabled).')
alaQoSConditionDestinationVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionDestinationVlan.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionDestinationVlan.setDescription('Destination VLAN to use for traffic classification')
alaQoSConditionDestinationVlanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionDestinationVlanStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionDestinationVlanStatus.setDescription('Status field indicating whether the destination VLAN needs to be matched(enabled) or not(disabled).')
alaQoSCondition8021p = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSCondition8021p.setStatus('current')
if mibBuilder.loadTexts: alaQoSCondition8021p.setDescription('802.1p value to use for traffic classification')
alaQoSCondition8021pStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSCondition8021pStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSCondition8021pStatus.setDescription('Status field indicating whether the 802.1p value needs to be matched(enabled) or not(disabled).')
alaQoSConditionSourceIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 33), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionSourceIpAddr.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionSourceIpAddr.setDescription('Source IP address to use for traffic classification')
alaQoSConditionSourceIpAddrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionSourceIpAddrStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionSourceIpAddrStatus.setDescription('Status field indicating whether the source IP address & mask needs to be matched(enabled) or not(disabled).')
alaQoSConditionSourceIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 35), IpAddress().clone(hexValue="ffffffff")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionSourceIpMask.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionSourceIpMask.setDescription('Source IP mask to use for traffic classification')
alaQoSConditionSourceNetworkGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 36), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionSourceNetworkGroup.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionSourceNetworkGroup.setDescription('Source network group to use for traffic classification')
alaQoSConditionSourceNetworkGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionSourceNetworkGroupStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionSourceNetworkGroupStatus.setDescription('Status field indicating whether the source network group needs to be matched(enabled) or not(disabled).')
alaQoSConditionDestinationIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 38), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionDestinationIpAddr.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionDestinationIpAddr.setDescription('Destination IP address to use for traffic classification')
alaQoSConditionDestinationIpAddrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionDestinationIpAddrStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionDestinationIpAddrStatus.setDescription('Status field indicating whether the destination IP address & mask needs to be matched(enabled) or not(disabled).')
alaQoSConditionDestinationIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 40), IpAddress().clone(hexValue="ffffffff")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionDestinationIpMask.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionDestinationIpMask.setDescription('Destination IP mask to use for traffic classification')
alaQoSConditionDestinationNetworkGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 41), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionDestinationNetworkGroup.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionDestinationNetworkGroup.setDescription('Destination network group to use for traffic classification')
alaQoSConditionDestinationNetworkGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionDestinationNetworkGroupStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionDestinationNetworkGroupStatus.setDescription('Status field indicating whether the destination network group needs to be matched(enabled) or not(disabled).')
alaQoSConditionMulticastIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 43), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionMulticastIpAddr.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionMulticastIpAddr.setDescription('Multicast IP address to use for traffic classification')
alaQoSConditionMulticastIpAddrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionMulticastIpAddrStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionMulticastIpAddrStatus.setDescription('Status field indicating whether the multicast IP address & mask needs to be matched(enabled) or not(disabled).')
alaQoSConditionMulticastIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 45), IpAddress().clone(hexValue="ffffffff")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionMulticastIpMask.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionMulticastIpMask.setDescription('Multicast IP mask to use for traffic classification')
alaQoSConditionMulticastNetworkGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 46), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionMulticastNetworkGroup.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionMulticastNetworkGroup.setDescription('Multicast network group to use for traffic classification')
alaQoSConditionMulticastNetworkGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionMulticastNetworkGroupStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionMulticastNetworkGroupStatus.setDescription('Status field indicating whether the multicast network group needs to be matched(enabled) or not(disabled).')
alaQoSConditionTos = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionTos.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionTos.setDescription('TOS value to use for traffic classification')
alaQoSConditionTosStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionTosStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionTosStatus.setDescription('Status field indicating whether the TOS value & mask needs to be matched(enabled) or not(disabled).')
alaQoSConditionTosMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(7)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionTosMask.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionTosMask.setDescription('TOS mask to use for traffic classification')
alaQoSConditionDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionDscp.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionDscp.setDescription('DSCP value to use for traffic classification')
alaQoSConditionDscpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionDscpStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionDscpStatus.setDescription('Status field indicating whether the DSCP value & mask needs to be matched(enabled) or not(disabled).')
alaQoSConditionDscpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 53), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63)).clone(63)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionDscpMask.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionDscpMask.setDescription('DSCP mask to use for traffic classification')
alaQoSConditionIpProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 54), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionIpProtocol.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionIpProtocol.setDescription('IP protocol to use for traffic classification.')
alaQoSConditionIpProtocolStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionIpProtocolStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionIpProtocolStatus.setDescription('Status field indicating whether the IP protocol needs to be matched(enabled) or not(disabled).')
alaQoSConditionSourceIpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 56), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionSourceIpPort.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionSourceIpPort.setDescription('Source IP port range start to use for traffic classification.')
alaQoSConditionSourceIpPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 57), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionSourceIpPortStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionSourceIpPortStatus.setDescription('Status field indicating whether the source IP port range needs to be matched(enabled) or not(disabled).')
alaQoSConditionDestinationIpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 58), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionDestinationIpPort.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionDestinationIpPort.setDescription('Destination IP port range start to use for traffic classification.')
alaQoSConditionDestinationIpPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 59), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionDestinationIpPortStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionDestinationIpPortStatus.setDescription('Status field indicating whether the destination IP port range needs to be matched(enabled) or not(disabled).')
alaQoSConditionService = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 60), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionService.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionService.setDescription('Name of service to use for traffic classification')
alaQoSConditionServiceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionServiceStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionServiceStatus.setDescription('Status field indicating whether the service needs to be matched(enabled) or not(disabled).')
alaQoSConditionServiceGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 62), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionServiceGroup.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionServiceGroup.setDescription('Name of service group to use for traffic classification')
alaQoSConditionServiceGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 63), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionServiceGroupStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionServiceGroupStatus.setDescription('Status field indicating whether the service group needs to be matched(enabled) or not(disabled).')
alaQoSConditionIcmpType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 64), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionIcmpType.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionIcmpType.setDescription('ICMP type to use for traffic classification')
alaQoSConditionIcmpTypeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 65), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionIcmpTypeStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionIcmpTypeStatus.setDescription('Status field indicating whether the ICMP type needs to be matched(enabled) or not(disabled).')
alaQoSConditionIcmpCode = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 66), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionIcmpCode.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionIcmpCode.setDescription('ICMP code to use for traffic classification')
alaQoSConditionIcmpCodeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 67), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionIcmpCodeStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionIcmpCodeStatus.setDescription('Status field indicating whether the ICMP code needs to be matched(enabled) or not(disabled).')
alaQoSConditionDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 68), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 512))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionDlci.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionDlci.setDescription('DLCI to use to traffic classification')
alaQoSConditionDlciStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 69), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionDlciStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionDlciStatus.setDescription('Status field indicating whether the DLCI needs to be matched(enabled) or not(disabled).')
alaQoSConditionRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 70), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionRowStatus.setDescription('Used to create/delete conditions according to the RowStatus convention')
alaQoSConditionSourcePortEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 71), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionSourcePortEnd.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionSourcePortEnd.setDescription("Source physical port range end to use for traffic classification. Must be greater than port range start to indicate a range. When '1', use source port as a single port.")
alaQoSConditionDestinationPortEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 72), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionDestinationPortEnd.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionDestinationPortEnd.setDescription("Destination physical port range end to use for traffic classification. Must be greater than port range start to indicate a range. When '1', use destination port as a single port.")
alaQoSConditionSourceIpPortEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 73), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionSourceIpPortEnd.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionSourceIpPortEnd.setDescription("Source IP port range end to use for traffic classification. Must be greater than source IP port range start to indicate a range. When '0', use source IP port as a single IP port.")
alaQoSConditionDestinationIpPortEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 74), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionDestinationIpPortEnd.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionDestinationIpPortEnd.setDescription("Destination IP port range end to use for traffic classification. Must be greater than destination IP port range start to indicate a range. When '0', use destination IP port as a single IP port.")
alaQoSConditionSourceTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 75), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionSourceTcpPort.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionSourceTcpPort.setDescription('Source TCP port range start to use for traffic classification.')
alaQoSConditionSourceTcpPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 76), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionSourceTcpPortStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionSourceTcpPortStatus.setDescription('Status field indicating whether the source TCP port range needs to be matched(enabled) or not(disabled).')
alaQoSConditionSourceTcpPortEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 77), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionSourceTcpPortEnd.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionSourceTcpPortEnd.setDescription("Source TCP port range end to use for traffic classification. Must be greater than source TCP port range start to indicate a range. When '0', use source TCP port as a single TCP port.")
alaQoSConditionDestinationTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 78), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionDestinationTcpPort.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionDestinationTcpPort.setDescription('Destination TCP port range start to use for traffic classification.')
alaQoSConditionDestinationTcpPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 79), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionDestinationTcpPortStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionDestinationTcpPortStatus.setDescription('Status field indicating whether the destination TCP port range needs to be matched(enabled) or not(disabled).')
alaQoSConditionDestinationTcpPortEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 80), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionDestinationTcpPortEnd.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionDestinationTcpPortEnd.setDescription("Destination TCP port range end to use for traffic classification. Must be greater than destination TCP port range start to indicate a range. When '0', use destination TCP port as a single TCP port.")
alaQoSConditionSourceUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 81), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionSourceUdpPort.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionSourceUdpPort.setDescription('Source UDP port range start to use for traffic classification.')
alaQoSConditionSourceUdpPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 82), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionSourceUdpPortStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionSourceUdpPortStatus.setDescription('Status field indicating whether the source UDP port range needs to be matched(enabled) or not(disabled).')
alaQoSConditionSourceUdpPortEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 83), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionSourceUdpPortEnd.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionSourceUdpPortEnd.setDescription("Source UDP port range end to use for traffic classification. Must be greater than source UDP port range start to indicate a range. When '0', use source UDP port as a single UDP port.")
alaQoSConditionDestinationUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 84), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionDestinationUdpPort.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionDestinationUdpPort.setDescription('Destination UDP port range start to use for traffic classification.')
alaQoSConditionDestinationUdpPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 85), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionDestinationUdpPortStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionDestinationUdpPortStatus.setDescription('Status field indicating whether the destination UDP port range needs to be matched(enabled) or not(disabled).')
alaQoSConditionDestinationUdpPortEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 86), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionDestinationUdpPortEnd.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionDestinationUdpPortEnd.setDescription("Destination UDP port range end to use for traffic classification. Must be greater than destination UDP port range start to indicate a range. When '0', use destination UDP port as a single TCP port.")
alaQoSConditionEthertype = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 87), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionEthertype.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionEthertype.setDescription('Ethertype value to use for traffic classification')
alaQoSConditionEthertypeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 88), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionEthertypeStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionEthertypeStatus.setDescription('Status field indicating whether the ethertype value needs to be matched(enabled) or not(disabled).')
alaQoSConditionTcpFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 89), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("all", 1), ("any", 2))).clone('all')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionTcpFlags.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionTcpFlags.setDescription('Use any/all specifieid TCP flags for traffic classification')
alaQoSConditionTcpFlagsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 90), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionTcpFlagsStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionTcpFlagsStatus.setDescription('Status field indicating whether the TCP flag bits needs to be matched(enabled) or not(disabled).')
alaQoSConditionTcpFlagsVal = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 91), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionTcpFlagsVal.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionTcpFlagsVal.setDescription('TCP flags values used for traffic classification')
alaQoSConditionTcpFlagsValStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 92), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionTcpFlagsValStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionTcpFlagsValStatus.setDescription('Not used')
alaQoSConditionTcpFlagsMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 93), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionTcpFlagsMask.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionTcpFlagsMask.setDescription('Mask of TCP flags bits used for traffic classification')
alaQoSConditionTcpFlagsMaskStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 94), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionTcpFlagsMaskStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionTcpFlagsMaskStatus.setDescription('Not used')
alaQoSConditionTcpEstablished = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 95), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('no')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionTcpEstablished.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionTcpEstablished.setDescription('Look for established TCP sessions in classification')
alaQoSConditionSourceIpv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 96), Ipv6Address().clone(hexValue="00000000000000000000000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionSourceIpv6Addr.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionSourceIpv6Addr.setDescription('Source IPv6 address to use for traffic classification')
alaQoSConditionSourceIpv6AddrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 97), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionSourceIpv6AddrStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionSourceIpv6AddrStatus.setDescription('Status field indicating whether the source IPv6 address & mask needs to be matched(enabled) or not(disabled).')
alaQoSConditionSourceIpv6Mask = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 98), Ipv6Address().clone(hexValue="ffffffffffffffffffffffffffffffff")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionSourceIpv6Mask.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionSourceIpv6Mask.setDescription('Source IPv6 mask to use for traffic classification')
alaQoSConditionDestinationIpv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 99), Ipv6Address().clone(hexValue="00000000000000000000000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionDestinationIpv6Addr.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionDestinationIpv6Addr.setDescription('Destination IPv6 address to use for traffic classification')
alaQoSConditionDestinationIpv6AddrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 100), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionDestinationIpv6AddrStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionDestinationIpv6AddrStatus.setDescription('Status field indicating whether the destination IPv6 address & mask needs to be matched(enabled) or not(disabled).')
alaQoSConditionDestinationIpv6Mask = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 101), Ipv6Address().clone(hexValue="ffffffffffffffffffffffffffffffff")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionDestinationIpv6Mask.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionDestinationIpv6Mask.setDescription('Destination IPv6 mask to use for traffic classification')
alaQoSConditionIpv6Traffic = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 102), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionIpv6Traffic.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionIpv6Traffic.setDescription('classify IPV6 traffic ')
alaQoSConditionIpv6NH = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 103), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionIpv6NH.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionIpv6NH.setDescription('NH value to use for traffic classification')
alaQoSConditionIpv6NHStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 104), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionIpv6NHStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionIpv6NHStatus.setDescription('Status field indicating whether the NH value needs to be matched(enabled) or not(disabled).')
alaQoSConditionIpv6FlowLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 105), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1048575))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionIpv6FlowLabel.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionIpv6FlowLabel.setDescription('FL value to use for traffic classification')
alaQoSConditionIpv6FlowLabelStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 106), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionIpv6FlowLabelStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionIpv6FlowLabelStatus.setDescription('Status field indicating whether the flow label value needs to be matched(enabled) or not(disabled).')
alaQoSConditionMcastIpv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 107), Ipv6Address().clone(hexValue="00000000000000000000000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionMcastIpv6Addr.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionMcastIpv6Addr.setDescription('Multicast IPv6 address to use for traffic classification')
alaQoSConditionMcastIpv6AddrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 108), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionMcastIpv6AddrStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionMcastIpv6AddrStatus.setDescription('Status field indicating whether the multicast IPv6 address & mask needs to be matched(enabled) or not(disabled).')
alaQoSConditionMcastIpv6Mask = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 109), Ipv6Address().clone(hexValue="ffffffffffffffffffffffffffffffff")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionMcastIpv6Mask.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionMcastIpv6Mask.setDescription('Multicast IPv6 mask to use for traffic classification')
alaQoSConditionDscpEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 110), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionDscpEnd.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionDscpEnd.setDescription('DSCP value to use for traffic classification')
alaQoSConditionInnerSourceVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 111), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionInnerSourceVlan.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionInnerSourceVlan.setDescription('Customer VLAN to use for traffic classification')
alaQoSConditionInnerSourceVlanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 112), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionInnerSourceVlanStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionInnerSourceVlanStatus.setDescription('Status field indicating whether the inner VLAN needs to be matched(enabled) or not(disabled).')
alaQoSConditionInner8021p = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 113), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionInner8021p.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionInner8021p.setDescription('Customer 802.1p to use for traffic classification')
alaQoSConditionInner8021pStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 114), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionInner8021pStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionInner8021pStatus.setDescription('Status field indicating whether the inner 802.1p needs to be matched(enabled) or not(disabled).')
alaQoSConditionVrfName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 115), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionVrfName.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionVrfName.setDescription('Name of Vrf to match traffic in')
alaQoSConditionVrfNameStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 116), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionVrfNameStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionVrfNameStatus.setDescription('Status field indicating whether the traffic from a specific vrf needs to be matched(enabled) or not(disabled).')
alaQoSCondition8021pEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 117), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSCondition8021pEnd.setStatus('current')
if mibBuilder.loadTexts: alaQoSCondition8021pEnd.setDescription('802.1p range end value to use for traffic classification.')
alaQoSConditionInner8021pEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 118), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionInner8021pEnd.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionInner8021pEnd.setDescription('Inner 802.1p range end value to use for traffic classification.')
alaQoSConditionSourceVlanGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 119), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionSourceVlanGroup.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionSourceVlanGroup.setDescription('Source vlan group to use for traffic classification')
alaQoSConditionSourceVlanGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 120), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionSourceVlanGroupStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionSourceVlanGroupStatus.setDescription('Status field indicating whether to use for traffic classification (enabled) or not (disabled) for source vlan group.')
alaQoSConditionInnerSourceVlanGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 121), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionInnerSourceVlanGroup.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionInnerSourceVlanGroup.setDescription('Inner Source vlan group to use for traffic classification')
alaQoSConditionInnerSourceVlanGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 122), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionInnerSourceVlanGroupStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionInnerSourceVlanGroupStatus.setDescription('Status field indicating whether to use for traffic classification (enabled) or not (disabled) for inner source vlan group.')
alaQoSAppliedConditionTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4), )
if mibBuilder.loadTexts: alaQoSAppliedConditionTable.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionTable.setDescription('Table of QoS AppliedCondition definitions')
alaQoSAppliedConditionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1), ).setIndexNames((0, "ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionName"))
if mibBuilder.loadTexts: alaQoSAppliedConditionEntry.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionEntry.setDescription('Definition of QoS AppliedCondition')
alaQoSAppliedConditionName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31)))
if mibBuilder.loadTexts: alaQoSAppliedConditionName.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionName.setDescription('Name of condition')
alaQoSAppliedConditionSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ldap", 1), ("cli", 2), ("blt", 3), ("api", 4), ("imp", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionSource.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionSource.setDescription('What entity created the condition.')
alaQoSAppliedConditionSourceSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionSourceSlot.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionSourceSlot.setDescription('Source physical slot used for traffic classification When 0, the port identifies an aggregate')
alaQoSAppliedConditionSourceSlotStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionSourceSlotStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionSourceSlotStatus.setDescription('Status field indicating whether the source physical slot and port range needs to be matched(enabled) or not(disabled).')
alaQoSAppliedConditionSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionSourcePort.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionSourcePort.setDescription('Source physical port range start to use for traffic classification')
alaQoSAppliedConditionSourcePortGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionSourcePortGroup.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionSourcePortGroup.setDescription('Source physical port group to use for traffic classification')
alaQoSAppliedConditionSourcePortGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionSourcePortGroupStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionSourcePortGroupStatus.setDescription('Status field indicating whether the source physical port group needs to be matched(enabled) or not(disabled).')
alaQoSAppliedConditionDestinationSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationSlot.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationSlot.setDescription('Destination physical slot used for traffic classification When 0, the port identifies an aggregate')
alaQoSAppliedConditionDestinationSlotStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationSlotStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationSlotStatus.setDescription('Status field indicating whether the destination physical slot and port range needs to be matched(enabled) or not(disabled).')
alaQoSAppliedConditionDestinationPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationPort.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationPort.setDescription('Destination physical port range start to use for traffic classification')
alaQoSAppliedConditionDestinationPortGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationPortGroup.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationPortGroup.setDescription('Destination physical port group to use for traffic classification')
alaQoSAppliedConditionDestinationPortGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationPortGroupStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationPortGroupStatus.setDescription('Status field indicating whether the destination physical port group needs to be matched(enabled) or not(disabled).')
alaQoSAppliedConditionSourceInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("ethernet", 1), ("wan", 2), ("ethernet10", 3), ("ethernet100", 4), ("ethernet1G", 5), ("ethernet10G", 6), ("aggregate", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionSourceInterfaceType.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionSourceInterfaceType.setDescription('Source physical interface type to use for traffic classification')
alaQoSAppliedConditionSourceInterfaceTypeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionSourceInterfaceTypeStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionSourceInterfaceTypeStatus.setDescription('Status field indicating whether the source physical interface type needs to be matched(enabled) or not(disabled).')
alaQoSAppliedConditionDestinationInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("ethernet", 1), ("wan", 2), ("ethernet10", 3), ("ethernet100", 4), ("ethernet1G", 5), ("ethernet10G", 6), ("aggregate", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationInterfaceType.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationInterfaceType.setDescription('Destination physical interface type to use for traffic classification')
alaQoSAppliedConditionDestinationInterfaceTypeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationInterfaceTypeStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationInterfaceTypeStatus.setDescription('Status field indicating whether the destination physical interface type needs to be matched(enabled) or not(disabled).')
alaQoSAppliedConditionSourceMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 17), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionSourceMacAddr.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionSourceMacAddr.setDescription('Source MAC address to use for traffic classification')
alaQoSAppliedConditionSourceMacAddrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionSourceMacAddrStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionSourceMacAddrStatus.setDescription('Status field indicating whether the source MAC address & mask needs to be matched(enabled) or not(disabled).')
alaQoSAppliedConditionSourceMacMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 19), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionSourceMacMask.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionSourceMacMask.setDescription('Source MAC mask to use for traffic classification')
alaQoSAppliedConditionSourceMacGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionSourceMacGroup.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionSourceMacGroup.setDescription('Source MAC group to use for traffic classification')
alaQoSAppliedConditionSourceMacGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionSourceMacGroupStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionSourceMacGroupStatus.setDescription('Status field indicating whether the source MAC group needs to be matched(enabled) or not(disabled).')
alaQoSAppliedConditionDestinationMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 22), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationMacAddr.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationMacAddr.setDescription('Destination MAC address to use for traffic classification')
alaQoSAppliedConditionDestinationMacAddrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationMacAddrStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationMacAddrStatus.setDescription('Status field indicating whether the destination MAC address & mask needs to be matched(enabled) or not(disabled).')
alaQoSAppliedConditionDestinationMacMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 24), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationMacMask.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationMacMask.setDescription('Destination MAC mask to use for traffic classification')
alaQoSAppliedConditionDestinationMacGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationMacGroup.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationMacGroup.setDescription('Destination MAC group to use for traffic classification')
alaQoSAppliedConditionDestinationMacGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationMacGroupStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationMacGroupStatus.setDescription('Status field indicating whether the destination MAC group needs to be matched(enabled) or not(disabled).')
alaQoSAppliedConditionSourceVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionSourceVlan.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionSourceVlan.setDescription('Source VLAN to use for traffic classification')
alaQoSAppliedConditionSourceVlanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionSourceVlanStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionSourceVlanStatus.setDescription('Status field indicating whether the source VLAN needs to be matched(enabled) or not(disabled).')
alaQoSAppliedConditionDestinationVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationVlan.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationVlan.setDescription('Destination VLAN to use for traffic classification')
alaQoSAppliedConditionDestinationVlanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationVlanStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationVlanStatus.setDescription('Status field indicating whether the destination VLAN needs to be matched(enabled) or not(disabled).')
alaQoSAppliedCondition8021p = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedCondition8021p.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedCondition8021p.setDescription('802.1p value to use for traffic classification')
alaQoSAppliedCondition8021pStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedCondition8021pStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedCondition8021pStatus.setDescription('Status field indicating whether the 802.1p value needs to be matched(enabled) or not(disabled).')
alaQoSAppliedConditionSourceIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 33), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionSourceIpAddr.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionSourceIpAddr.setDescription('Source IP address to use for traffic classification')
alaQoSAppliedConditionSourceIpAddrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionSourceIpAddrStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionSourceIpAddrStatus.setDescription('Status field indicating whether the source IP address & mask needs to be matched(enabled) or not(disabled).')
alaQoSAppliedConditionSourceIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 35), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionSourceIpMask.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionSourceIpMask.setDescription('Source IP mask to use for traffic classification')
alaQoSAppliedConditionSourceNetworkGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 36), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionSourceNetworkGroup.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionSourceNetworkGroup.setDescription('Source network group to use for traffic classification')
alaQoSAppliedConditionSourceNetworkGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionSourceNetworkGroupStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionSourceNetworkGroupStatus.setDescription('Status field indicating whether the source network group needs to be matched(enabled) or not(disabled).')
alaQoSAppliedConditionDestinationIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 38), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationIpAddr.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationIpAddr.setDescription('Destination IP address to use for traffic classification')
alaQoSAppliedConditionDestinationIpAddrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationIpAddrStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationIpAddrStatus.setDescription('Status field indicating whether the destination IP address & mask needs to be matched(enabled) or not(disabled).')
alaQoSAppliedConditionDestinationIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 40), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationIpMask.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationIpMask.setDescription('Destination IP mask to use for traffic classification')
alaQoSAppliedConditionDestinationNetworkGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 41), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationNetworkGroup.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationNetworkGroup.setDescription('Destination network group to use for traffic classification')
alaQoSAppliedConditionDestinationNetworkGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationNetworkGroupStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationNetworkGroupStatus.setDescription('Status field indicating whether the destination network group needs to be matched(enabled) or not(disabled).')
alaQoSAppliedConditionMulticastIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 43), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionMulticastIpAddr.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionMulticastIpAddr.setDescription('Multicast IP address to use for traffic classification')
alaQoSAppliedConditionMulticastIpAddrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionMulticastIpAddrStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionMulticastIpAddrStatus.setDescription('Status field indicating whether the multicast IP address & mask needs to be matched(enabled) or not(disabled).')
alaQoSAppliedConditionMulticastIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 45), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionMulticastIpMask.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionMulticastIpMask.setDescription('Multicast IP mask to use for traffic classification')
alaQoSAppliedConditionMulticastNetworkGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 46), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionMulticastNetworkGroup.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionMulticastNetworkGroup.setDescription('Multicast network group to use for traffic classification')
alaQoSAppliedConditionMulticastNetworkGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionMulticastNetworkGroupStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionMulticastNetworkGroupStatus.setDescription('Status field indicating whether the multicast network group needs to be matched(enabled) or not(disabled).')
alaQoSAppliedConditionTos = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionTos.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionTos.setDescription('TOS value to use for traffic classification')
alaQoSAppliedConditionTosStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionTosStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionTosStatus.setDescription('Status field indicating whether the TOS value & mask needs to be matched(enabled) or not(disabled).')
alaQoSAppliedConditionTosMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionTosMask.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionTosMask.setDescription('TOS mask to use for traffic classification')
alaQoSAppliedConditionDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionDscp.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionDscp.setDescription('DSCP value to use for traffic classification')
alaQoSAppliedConditionDscpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionDscpStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionDscpStatus.setDescription('Status field indicating whether the DSCP value & mask needs to be matched(enabled) or not(disabled).')
alaQoSAppliedConditionDscpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 53), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionDscpMask.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionDscpMask.setDescription('DSCP mask to use for traffic classification')
alaQoSAppliedConditionIpProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 54), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionIpProtocol.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionIpProtocol.setDescription('IP protocol to use for traffic classification.')
alaQoSAppliedConditionIpProtocolStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionIpProtocolStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionIpProtocolStatus.setDescription('Status field indicating whether the IP protocol needs to be matched(enabled) or not(disabled).')
alaQoSAppliedConditionSourceIpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 56), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionSourceIpPort.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionSourceIpPort.setDescription('Source IP port range start to use for traffic classification.')
alaQoSAppliedConditionSourceIpPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 57), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionSourceIpPortStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionSourceIpPortStatus.setDescription('Status field indicating whether the source IP port range needs to be matched(enabled) or not(disabled).')
alaQoSAppliedConditionDestinationIpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 58), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationIpPort.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationIpPort.setDescription('Destination IP port range start to use for traffic classification.')
alaQoSAppliedConditionDestinationIpPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 59), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationIpPortStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationIpPortStatus.setDescription('Status field indicating whether the destination IP port range needs to be matched(enabled) or not(disabled).')
alaQoSAppliedConditionService = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 60), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionService.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionService.setDescription('Name of service to use for traffic classification')
alaQoSAppliedConditionServiceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionServiceStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionServiceStatus.setDescription('Status field indicating whether the service needs to be matched(enabled) or not(disabled).')
alaQoSAppliedConditionServiceGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 62), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionServiceGroup.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionServiceGroup.setDescription('Name of service group to use for traffic classification')
alaQoSAppliedConditionServiceGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 63), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionServiceGroupStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionServiceGroupStatus.setDescription('Status field indicating whether the service group needs to be matched(enabled) or not(disabled).')
alaQoSAppliedConditionIcmpType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 64), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionIcmpType.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionIcmpType.setDescription('ICMP type to use for traffic classification')
alaQoSAppliedConditionIcmpTypeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 65), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionIcmpTypeStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionIcmpTypeStatus.setDescription('Status field indicating whether the ICMP type needs to be matched(enabled) or not(disabled).')
alaQoSAppliedConditionIcmpCode = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 66), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionIcmpCode.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionIcmpCode.setDescription('ICMP code to use for traffic classification')
alaQoSAppliedConditionIcmpCodeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 67), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionIcmpCodeStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionIcmpCodeStatus.setDescription('Status field indicating whether the ICMP code needs to be matched(enabled) or not(disabled).')
alaQoSAppliedConditionDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 68), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionDlci.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionDlci.setDescription('DLCI to use to traffic classification')
alaQoSAppliedConditionDlciStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 69), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionDlciStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionDlciStatus.setDescription('Status field indicating whether the DLCI needs to be matched(enabled) or not(disabled).')
alaQoSAppliedConditionRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 70), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionRowStatus.setDescription('Used to create/delete conditions according to the RowStatus convention')
alaQoSAppliedConditionSourcePortEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 71), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionSourcePortEnd.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionSourcePortEnd.setDescription("Source physical port range end to use for traffic classification. Must be greater than port range start to indicate a range. When '1', use source port as a single port.")
alaQoSAppliedConditionDestinationPortEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 72), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationPortEnd.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationPortEnd.setDescription("Destination physical port range end to use for traffic classification. Must be greater than port range start to indicate a range. When '1', use destination port as a single port.")
alaQoSAppliedConditionSourceIpPortEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 73), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionSourceIpPortEnd.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionSourceIpPortEnd.setDescription("Source IP port range end to use for traffic classification. Must be greater than source IP port range start to indicate a range. When '0', use source IP port as a single IP port.")
alaQoSAppliedConditionDestinationIpPortEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 74), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationIpPortEnd.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationIpPortEnd.setDescription("Destination IP port range end to use for traffic classification. Must be greater than destination IP port range start to indicate a range. When '0', use destination IP port as a single IP port.")
alaQoSAppliedConditionSourceTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 75), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionSourceTcpPort.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionSourceTcpPort.setDescription('Source TCP port range start to use for traffic classification.')
alaQoSAppliedConditionSourceTcpPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 76), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionSourceTcpPortStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionSourceTcpPortStatus.setDescription('Status field indicating whether the source TCP port range needs to be matched(enabled) or not(disabled).')
alaQoSAppliedConditionSourceTcpPortEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 77), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionSourceTcpPortEnd.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionSourceTcpPortEnd.setDescription("Source TCP port range end to use for traffic classification. Must be greater than source TCP port range start to indicate a range. When '0', use source TCP port as a single TCP port.")
alaQoSAppliedConditionDestinationTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 78), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationTcpPort.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationTcpPort.setDescription('Destination TCP port range start to use for traffic classification.')
alaQoSAppliedConditionDestinationTcpPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 79), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationTcpPortStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationTcpPortStatus.setDescription('Status field indicating whether the destination TCP port range needs to be matched(enabled) or not(disabled).')
alaQoSAppliedConditionDestinationTcpPortEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 80), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationTcpPortEnd.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationTcpPortEnd.setDescription("Destination TCP port range end to use for traffic classification. Must be greater than destination TCP port range start to indicate a range. When '0', use destination TCP port as a single TCP port.")
alaQoSAppliedConditionSourceUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 81), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionSourceUdpPort.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionSourceUdpPort.setDescription('Source UDP port range start to use for traffic classification.')
alaQoSAppliedConditionSourceUdpPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 82), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionSourceUdpPortStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionSourceUdpPortStatus.setDescription('Status field indicating whether the source UDP port range needs to be matched(enabled) or not(disabled).')
alaQoSAppliedConditionSourceUdpPortEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 83), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionSourceUdpPortEnd.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionSourceUdpPortEnd.setDescription("Source UDP port range end to use for traffic classification. Must be greater than source UDP port range start to indicate a range. When '0', use source UDP port as a single UDP port.")
alaQoSAppliedConditionDestinationUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 84), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationUdpPort.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationUdpPort.setDescription('Destination UDP port range start to use for traffic classification.')
alaQoSAppliedConditionDestinationUdpPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 85), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationUdpPortStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationUdpPortStatus.setDescription('Status field indicating whether the destination UDP port range needs to be matched(enabled) or not(disabled).')
alaQoSAppliedConditionDestinationUdpPortEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 86), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationUdpPortEnd.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationUdpPortEnd.setDescription("Destination UDP port range end to use for traffic classification. Must be greater than destination UDP port range start to indicate a range. When '0', use destination UDP port as a single TCP port.")
alaQoSAppliedConditionEthertype = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 87), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionEthertype.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionEthertype.setDescription('Ethertype value to use for traffic classification')
alaQoSAppliedConditionEthertypeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 88), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionEthertypeStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionEthertypeStatus.setDescription('Status field indicating whether the ethertype value needs to be matched(enabled) or not(disabled).')
alaQoSAppliedConditionTcpFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 89), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("all", 1), ("any", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionTcpFlags.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionTcpFlags.setDescription('Use any/all specifieid TCP flags for traffic classification')
alaQoSAppliedConditionTcpFlagsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 90), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionTcpFlagsStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionTcpFlagsStatus.setDescription('Status field indicating whether the TCP flag bits needs to be matched(enabled) or not(disabled).')
alaQoSAppliedConditionTcpFlagsVal = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 91), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionTcpFlagsVal.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionTcpFlagsVal.setDescription('TCP flags values used for traffic classification')
alaQoSAppliedConditionTcpFlagsValStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 92), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionTcpFlagsValStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionTcpFlagsValStatus.setDescription('Not used')
alaQoSAppliedConditionTcpFlagsMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 93), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionTcpFlagsMask.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionTcpFlagsMask.setDescription('Mask of TCP flags bits used for traffic classification')
alaQoSAppliedConditionTcpFlagsMaskStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 94), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionTcpFlagsMaskStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionTcpFlagsMaskStatus.setDescription('Not used')
alaQoSAppliedConditionTcpEstablished = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 95), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionTcpEstablished.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionTcpEstablished.setDescription('Look for established TCP sessions in classification')
alaQoSAppliedConditionSourceIpv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 96), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionSourceIpv6Addr.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionSourceIpv6Addr.setDescription('Source IPv6 address to use for traffic classification')
alaQoSAppliedConditionSourceIpv6AddrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 97), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionSourceIpv6AddrStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionSourceIpv6AddrStatus.setDescription('Status field indicating whether the source IPv6 address & mask needs to be matched(enabled) or not(disabled).')
alaQoSAppliedConditionSourceIpv6Mask = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 98), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionSourceIpv6Mask.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionSourceIpv6Mask.setDescription('Source IPv6 mask to use for traffic classification')
alaQoSAppliedConditionDestinationIpv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 99), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationIpv6Addr.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationIpv6Addr.setDescription('Destination IPv6 address to use for traffic classification')
alaQoSAppliedConditionDestinationIpv6AddrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 100), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationIpv6AddrStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationIpv6AddrStatus.setDescription('Status field indicating whether the destination IPv6 address & mask needs to be matched(enabled) or not(disabled).')
alaQoSAppliedConditionDestinationIpv6Mask = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 101), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationIpv6Mask.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationIpv6Mask.setDescription('Destination IPv6 mask to use for traffic classification')
alaQoSAppliedConditionIpv6Traffic = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 102), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionIpv6Traffic.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionIpv6Traffic.setDescription('classify IPV6 traffic ')
alaQoSAppliedConditionIpv6NH = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 103), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionIpv6NH.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionIpv6NH.setDescription('NH value to use for traffic classification')
alaQoSAppliedConditionIpv6NHStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 104), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionIpv6NHStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionIpv6NHStatus.setDescription('Status field indicating whether the NH value needs to be matched(enabled) or not(disabled).')
alaQoSAppliedConditionIpv6FlowLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 105), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1048575))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionIpv6FlowLabel.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionIpv6FlowLabel.setDescription('FL value to use for traffic classification')
alaQoSAppliedConditionIpv6FlowLabelStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 106), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionIpv6FlowLabelStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionIpv6FlowLabelStatus.setDescription('Status field indicating whether the flow label value needs to be matched(enabled) or not(disabled).')
alaQoSAppliedConditionMcastIpv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 107), Ipv6Address().clone(hexValue="00000000000000000000000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSAppliedConditionMcastIpv6Addr.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionMcastIpv6Addr.setDescription('Multicast IPv6 address to use for traffic classification')
alaQoSAppliedConditionMcastIpv6AddrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 108), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSAppliedConditionMcastIpv6AddrStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionMcastIpv6AddrStatus.setDescription('Status field indicating whether the multicast IPv6 address & mask needs to be matched(enabled) or not(disabled).')
alaQoSAppliedConditionMcastIpv6Mask = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 109), Ipv6Address().clone(hexValue="ffffffffffffffffffffffffffffffff")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSAppliedConditionMcastIpv6Mask.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionMcastIpv6Mask.setDescription('Multicast IPv6 mask to use for traffic classification')
alaQoSAppliedConditionDscpEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 110), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionDscpEnd.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionDscpEnd.setDescription('DSCP value to use for traffic classification')
alaQoSAppliedConditionInnerSourceVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 111), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionInnerSourceVlan.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionInnerSourceVlan.setDescription('Customer VLAN to use for traffic classification')
alaQoSAppliedConditionInnerSourceVlanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 112), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionInnerSourceVlanStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionInnerSourceVlanStatus.setDescription('Status field indicating whether the inner VLAN needs to be matched(enabled) or not(disabled).')
alaQoSAppliedConditionInner8021p = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 113), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionInner8021p.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionInner8021p.setDescription('Customer 802.1p to use for traffic classification')
alaQoSAppliedConditionInner8021pStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 114), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionInner8021pStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionInner8021pStatus.setDescription('Status field indicating whether the inner 802.1p needs to be matched(enabled) or not(disabled).')
alaQoSAppliedConditionVrfName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 115), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSAppliedConditionVrfName.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionVrfName.setDescription('Name of Vrf to match traffic in')
alaQoSAppliedConditionVrfNameStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 116), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSAppliedConditionVrfNameStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionVrfNameStatus.setDescription('Status field indicating whether the traffic from a specific vrf needs to be matched(enabled) or not(disabled).')
alaQoSAppliedCondition8021pEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 117), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSAppliedCondition8021pEnd.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedCondition8021pEnd.setDescription('802.1p range end value to use for traffic classification.')
alaQoSAppliedConditionInner8021pEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 118), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSAppliedConditionInner8021pEnd.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionInner8021pEnd.setDescription('Inner 802.1p range end value to use for traffic classification.')
alaQoSAppliedConditionSourceVlanGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 119), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSAppliedConditionSourceVlanGroup.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionSourceVlanGroup.setDescription('Source vlan group to use for traffic classification')
alaQoSAppliedConditionSourceVlanGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 120), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSAppliedConditionSourceVlanGroupStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionSourceVlanGroupStatus.setDescription('Status field indicating whether to use for traffic classification (enabled) or not (disabled) for source vlan group.')
alaQoSAppliedConditionInnerSourceVlanGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 121), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSAppliedConditionInnerSourceVlanGroup.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionInnerSourceVlanGroup.setDescription('Inner Source vlan group to use for traffic classification')
alaQoSAppliedConditionInnerSourceVlanGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 122), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSAppliedConditionInnerSourceVlanGroupStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionInnerSourceVlanGroupStatus.setDescription('Status field indicating whether to use for traffic classification (enabled) or not (disabled) for inner source vlan group.')
alaQoSServiceTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 5), )
if mibBuilder.loadTexts: alaQoSServiceTable.setStatus('current')
if mibBuilder.loadTexts: alaQoSServiceTable.setDescription('Table of QoS Service definitions')
alaQoSServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 5, 1), ).setIndexNames((0, "ALCATEL-IND1-QOS-MIB", "alaQoSServiceName"))
if mibBuilder.loadTexts: alaQoSServiceEntry.setStatus('current')
if mibBuilder.loadTexts: alaQoSServiceEntry.setDescription('Definition of QoS Service')
alaQoSServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 5, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31)))
if mibBuilder.loadTexts: alaQoSServiceName.setStatus('current')
if mibBuilder.loadTexts: alaQoSServiceName.setDescription('Name of the service')
alaQoSServiceSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ldap", 1), ("cli", 2), ("blt", 3), ("api", 4), ("imp", 5))).clone('cli')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSServiceSource.setStatus('current')
if mibBuilder.loadTexts: alaQoSServiceSource.setDescription('What entity created the service.')
alaQoSServiceProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSServiceProtocol.setStatus('current')
if mibBuilder.loadTexts: alaQoSServiceProtocol.setDescription('protocol field for Service')
alaQoSServiceSourceIpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSServiceSourceIpPort.setStatus('current')
if mibBuilder.loadTexts: alaQoSServiceSourceIpPort.setDescription('Source IP port range start to use for traffic classification.')
alaQoSServiceSourceIpPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSServiceSourceIpPortStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSServiceSourceIpPortStatus.setDescription('Status field indicating whether the source IP port range needs to be matched(enabled) or not(disabled).')
alaQoSServiceDestinationIpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSServiceDestinationIpPort.setStatus('current')
if mibBuilder.loadTexts: alaQoSServiceDestinationIpPort.setDescription('Destination IP port range start to use for traffic classification.')
alaQoSServiceDestinationIpPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSServiceDestinationIpPortStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSServiceDestinationIpPortStatus.setDescription('Status field indicating whether the destination IP port range needs to be matched(enabled) or not(disabled).')
alaQoSServiceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 5, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSServiceRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSServiceRowStatus.setDescription('Used to create/delete services according to the RowStatus convention')
alaQoSServiceSourceIpPortEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 5, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSServiceSourceIpPortEnd.setStatus('current')
if mibBuilder.loadTexts: alaQoSServiceSourceIpPortEnd.setDescription("Source IP port range end to use for traffic classification. Must be greater than source IP port range start to indicate a range. When '0', use source IP port as a single IP port.")
alaQoSServiceDestinationIpPortEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 5, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSServiceDestinationIpPortEnd.setStatus('current')
if mibBuilder.loadTexts: alaQoSServiceDestinationIpPortEnd.setDescription("Destination IP port range end to use for traffic classification. Must be greater than destination IP port range start to indicate a range. When '0', use destination IP port as a single IP port.")
alaQoSServiceSourceTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 5, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSServiceSourceTcpPort.setStatus('current')
if mibBuilder.loadTexts: alaQoSServiceSourceTcpPort.setDescription('Source TCP port range start to use for traffic classification.')
alaQoSServiceSourceTcpPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 5, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSServiceSourceTcpPortStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSServiceSourceTcpPortStatus.setDescription('Status field indicating whether the source TCP port range needs to be matched(enabled) or not(disabled).')
alaQoSServiceSourceTcpPortEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 5, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSServiceSourceTcpPortEnd.setStatus('current')
if mibBuilder.loadTexts: alaQoSServiceSourceTcpPortEnd.setDescription("Source TCP port range end to use for traffic classification. Must be greater than source TCP port range start to indicate a range. When '0', use source TCP port as a single TCP port.")
alaQoSServiceDestinationTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 5, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSServiceDestinationTcpPort.setStatus('current')
if mibBuilder.loadTexts: alaQoSServiceDestinationTcpPort.setDescription('Destination TCP port range start to use for traffic classification.')
alaQoSServiceDestinationTcpPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 5, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSServiceDestinationTcpPortStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSServiceDestinationTcpPortStatus.setDescription('Status field indicating whether the destination TCP port range needs to be matched(enabled) or not(disabled).')
alaQoSServiceDestinationTcpPortEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 5, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSServiceDestinationTcpPortEnd.setStatus('current')
if mibBuilder.loadTexts: alaQoSServiceDestinationTcpPortEnd.setDescription("Destination TCP port range end to use for traffic classification. Must be greater than destination TCP port range start to indicate a range. When '0', use destination TCP port as a single TCP port.")
alaQoSServiceSourceUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 5, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSServiceSourceUdpPort.setStatus('current')
if mibBuilder.loadTexts: alaQoSServiceSourceUdpPort.setDescription('Source UDP port range start to use for traffic classification.')
alaQoSServiceSourceUdpPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 5, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSServiceSourceUdpPortStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSServiceSourceUdpPortStatus.setDescription('Status field indicating whether the source UDP port range needs to be matched(enabled) or not(disabled).')
alaQoSServiceSourceUdpPortEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 5, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSServiceSourceUdpPortEnd.setStatus('current')
if mibBuilder.loadTexts: alaQoSServiceSourceUdpPortEnd.setDescription("Source UDP port range end to use for traffic classification. Must be greater than source UDP port range start to indicate a range. When '0', use source UDP port as a single UDP port.")
alaQoSServiceDestinationUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 5, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSServiceDestinationUdpPort.setStatus('current')
if mibBuilder.loadTexts: alaQoSServiceDestinationUdpPort.setDescription('Destination UDP port range start to use for traffic classification.')
alaQoSServiceDestinationUdpPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 5, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSServiceDestinationUdpPortStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSServiceDestinationUdpPortStatus.setDescription('Status field indicating whether the destination UDP port range needs to be matched(enabled) or not(disabled).')
alaQoSServiceDestinationUdpPortEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 5, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSServiceDestinationUdpPortEnd.setStatus('current')
if mibBuilder.loadTexts: alaQoSServiceDestinationUdpPortEnd.setDescription("Destination UDP port range end to use for traffic classification. Must be greater than destination UDP port range start to indicate a range. When '0', use destination UDP port as a single UDP port.")
alaQoSAppliedServiceTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 6), )
if mibBuilder.loadTexts: alaQoSAppliedServiceTable.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedServiceTable.setDescription('Table of QoS AppliedService definitions')
alaQoSAppliedServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 6, 1), ).setIndexNames((0, "ALCATEL-IND1-QOS-MIB", "alaQoSAppliedServiceName"))
if mibBuilder.loadTexts: alaQoSAppliedServiceEntry.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedServiceEntry.setDescription('Definition of QoS AppliedService')
alaQoSAppliedServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 6, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31)))
if mibBuilder.loadTexts: alaQoSAppliedServiceName.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedServiceName.setDescription('Name of the service')
alaQoSAppliedServiceSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ldap", 1), ("cli", 2), ("blt", 3), ("api", 4), ("imp", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedServiceSource.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedServiceSource.setDescription('What entity created the service.')
alaQoSAppliedServiceProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedServiceProtocol.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedServiceProtocol.setDescription('protocol field for AppliedService')
alaQoSAppliedServiceSourceIpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedServiceSourceIpPort.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedServiceSourceIpPort.setDescription('Source IP port range start to use for traffic classification.')
alaQoSAppliedServiceSourceIpPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedServiceSourceIpPortStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedServiceSourceIpPortStatus.setDescription('Status field indicating whether the source IP port range needs to be matched(enabled) or not(disabled).')
alaQoSAppliedServiceDestinationIpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedServiceDestinationIpPort.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedServiceDestinationIpPort.setDescription('Destination IP port range start to use for traffic classification.')
alaQoSAppliedServiceDestinationIpPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedServiceDestinationIpPortStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedServiceDestinationIpPortStatus.setDescription('Status field indicating whether the destination IP port range needs to be matched(enabled) or not(disabled).')
alaQoSAppliedServiceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 6, 1, 8), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedServiceRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedServiceRowStatus.setDescription('Used to create/delete services according to the RowStatus convention')
alaQoSAppliedServiceSourceIpPortEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 6, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedServiceSourceIpPortEnd.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedServiceSourceIpPortEnd.setDescription("Source IP port range end to use for traffic classification. Must be greater than source IP port range start to indicate a range. When '0', use source IP port as a single IP port.")
alaQoSAppliedServiceDestinationIpPortEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 6, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedServiceDestinationIpPortEnd.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedServiceDestinationIpPortEnd.setDescription("Destination IP port range end to use for traffic classification. Must be greater than destination IP port range start to indicate a range. When '0', use destination IP port as a single IP port.")
alaQoSAppliedServiceSourceTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 6, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedServiceSourceTcpPort.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedServiceSourceTcpPort.setDescription('Source TCP port range start to use for traffic classification.')
alaQoSAppliedServiceSourceTcpPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 6, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedServiceSourceTcpPortStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedServiceSourceTcpPortStatus.setDescription('Status field indicating whether the source TCP port range needs to be matched(enabled) or not(disabled).')
alaQoSAppliedServiceSourceTcpPortEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 6, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedServiceSourceTcpPortEnd.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedServiceSourceTcpPortEnd.setDescription("Source TCP port range end to use for traffic classification. Must be greater than source TCP port range start to indicate a range. When '0', use source TCP port as a single TCP port.")
alaQoSAppliedServiceDestinationTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 6, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedServiceDestinationTcpPort.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedServiceDestinationTcpPort.setDescription('Destination TCP port range start to use for traffic classification.')
alaQoSAppliedServiceDestinationTcpPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 6, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedServiceDestinationTcpPortStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedServiceDestinationTcpPortStatus.setDescription('Status field indicating whether the destination TCP port range needs to be matched(enabled) or not(disabled).')
alaQoSAppliedServiceDestinationTcpPortEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 6, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedServiceDestinationTcpPortEnd.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedServiceDestinationTcpPortEnd.setDescription("Destination TCP port range end to use for traffic classification. Must be greater than destination TCP port range start to indicate a range. When '0', use destination TCP port as a single TCP port.")
alaQoSAppliedServiceSourceUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 6, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedServiceSourceUdpPort.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedServiceSourceUdpPort.setDescription('Source UDP port range start to use for traffic classification.')
alaQoSAppliedServiceSourceUdpPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 6, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedServiceSourceUdpPortStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedServiceSourceUdpPortStatus.setDescription('Status field indicating whether the source UDP port range needs to be matched(enabled) or not(disabled).')
alaQoSAppliedServiceSourceUdpPortEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 6, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedServiceSourceUdpPortEnd.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedServiceSourceUdpPortEnd.setDescription("Source UDP port range end to use for traffic classification. Must be greater than source UDP port range start to indicate a range. When '0', use source UDP port as a single UDP port.")
alaQoSAppliedServiceDestinationUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 6, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedServiceDestinationUdpPort.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedServiceDestinationUdpPort.setDescription('Destination UDP port range start to use for traffic classification.')
alaQoSAppliedServiceDestinationUdpPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 6, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedServiceDestinationUdpPortStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedServiceDestinationUdpPortStatus.setDescription('Status field indicating whether the destination UDP port range needs to be matched(enabled) or not(disabled).')
alaQoSAppliedServiceDestinationUdpPortEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 6, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedServiceDestinationUdpPortEnd.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedServiceDestinationUdpPortEnd.setDescription("Destination UDP port range end to use for traffic classification. Must be greater than destination UDP port range start to indicate a range. When '0', use destination UDP port as a single UDP port.")
alaQoSServiceGroupsTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 7), )
if mibBuilder.loadTexts: alaQoSServiceGroupsTable.setStatus('current')
if mibBuilder.loadTexts: alaQoSServiceGroupsTable.setDescription('Table of QoS ServiceGroups definitions')
alaQoSServiceGroupsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 7, 1), ).setIndexNames((0, "ALCATEL-IND1-QOS-MIB", "alaQoSServiceGroupsName"))
if mibBuilder.loadTexts: alaQoSServiceGroupsEntry.setStatus('current')
if mibBuilder.loadTexts: alaQoSServiceGroupsEntry.setDescription('Definition of QoS ServiceGroups')
alaQoSServiceGroupsName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 7, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31)))
if mibBuilder.loadTexts: alaQoSServiceGroupsName.setStatus('current')
if mibBuilder.loadTexts: alaQoSServiceGroupsName.setDescription('Name of service group')
alaQoSServiceGroupsSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ldap", 1), ("cli", 2), ("blt", 3), ("api", 4), ("imp", 5))).clone('cli')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSServiceGroupsSource.setStatus('current')
if mibBuilder.loadTexts: alaQoSServiceGroupsSource.setDescription('What entity created the service group.')
alaQoSServiceGroupsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 7, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSServiceGroupsStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSServiceGroupsStatus.setDescription('Used to create/delete service groups according to the RowStatus convention')
alaQoSAppliedServiceGroupsTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 8), )
if mibBuilder.loadTexts: alaQoSAppliedServiceGroupsTable.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedServiceGroupsTable.setDescription('Table of QoS AppliedServiceGroups definitions')
alaQoSAppliedServiceGroupsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 8, 1), ).setIndexNames((0, "ALCATEL-IND1-QOS-MIB", "alaQoSAppliedServiceGroupsName"))
if mibBuilder.loadTexts: alaQoSAppliedServiceGroupsEntry.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedServiceGroupsEntry.setDescription('Definition of QoS AppliedServiceGroups')
alaQoSAppliedServiceGroupsName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 8, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31)))
if mibBuilder.loadTexts: alaQoSAppliedServiceGroupsName.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedServiceGroupsName.setDescription('Name of service group')
alaQoSAppliedServiceGroupsSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ldap", 1), ("cli", 2), ("blt", 3), ("api", 4), ("imp", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedServiceGroupsSource.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedServiceGroupsSource.setDescription('What entity created the service group.')
alaQoSAppliedServiceGroupsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 8, 1, 3), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedServiceGroupsStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedServiceGroupsStatus.setDescription('Used to create/delete service groups according to the RowStatus convention')
alaQoSServiceGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 9), )
if mibBuilder.loadTexts: alaQoSServiceGroupTable.setStatus('current')
if mibBuilder.loadTexts: alaQoSServiceGroupTable.setDescription('Table of QoS ServiceGroup definitions')
alaQoSServiceGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 9, 1), ).setIndexNames((0, "ALCATEL-IND1-QOS-MIB", "alaQoSServiceGroupsName"), (0, "ALCATEL-IND1-QOS-MIB", "alaQoSServiceGroupServiceName"))
if mibBuilder.loadTexts: alaQoSServiceGroupEntry.setStatus('current')
if mibBuilder.loadTexts: alaQoSServiceGroupEntry.setDescription('Definition of QoS ServiceGroup')
alaQoSServiceGroupServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 9, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31)))
if mibBuilder.loadTexts: alaQoSServiceGroupServiceName.setStatus('current')
if mibBuilder.loadTexts: alaQoSServiceGroupServiceName.setDescription('Name of service in service group entry')
alaQoSServiceGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 9, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSServiceGroupStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSServiceGroupStatus.setDescription('Used to create/delete service group entries according to the RowStatus convention')
alaQoSAppliedServiceGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 10), )
if mibBuilder.loadTexts: alaQoSAppliedServiceGroupTable.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedServiceGroupTable.setDescription('Table of QoS AppliedServiceGroup definitions')
alaQoSAppliedServiceGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 10, 1), ).setIndexNames((0, "ALCATEL-IND1-QOS-MIB", "alaQoSAppliedServiceGroupsName"), (0, "ALCATEL-IND1-QOS-MIB", "alaQoSAppliedServiceGroupServiceName"))
if mibBuilder.loadTexts: alaQoSAppliedServiceGroupEntry.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedServiceGroupEntry.setDescription('Definition of QoS AppliedServiceGroup')
alaQoSAppliedServiceGroupServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 10, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31)))
if mibBuilder.loadTexts: alaQoSAppliedServiceGroupServiceName.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedServiceGroupServiceName.setDescription('Name of service in service group entry')
alaQoSAppliedServiceGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 10, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedServiceGroupStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedServiceGroupStatus.setDescription('Used to create/delete service group entries according to the RowStatus convention')
alaQoSNetworkGroupsTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 11), )
if mibBuilder.loadTexts: alaQoSNetworkGroupsTable.setStatus('current')
if mibBuilder.loadTexts: alaQoSNetworkGroupsTable.setDescription('Table of QoS NetworkGroups definitions')
alaQoSNetworkGroupsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 11, 1), ).setIndexNames((0, "ALCATEL-IND1-QOS-MIB", "alaQoSNetworkGroupsName"))
if mibBuilder.loadTexts: alaQoSNetworkGroupsEntry.setStatus('current')
if mibBuilder.loadTexts: alaQoSNetworkGroupsEntry.setDescription('Definition of QoS NetworkGroups')
alaQoSNetworkGroupsName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 11, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31)))
if mibBuilder.loadTexts: alaQoSNetworkGroupsName.setStatus('current')
if mibBuilder.loadTexts: alaQoSNetworkGroupsName.setDescription('Name of network group')
alaQoSNetworkGroupsSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ldap", 1), ("cli", 2), ("blt", 3), ("api", 4), ("imp", 5))).clone('cli')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSNetworkGroupsSource.setStatus('current')
if mibBuilder.loadTexts: alaQoSNetworkGroupsSource.setDescription('What entity created the network group.')
alaQoSNetworkGroupsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 11, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSNetworkGroupsStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSNetworkGroupsStatus.setDescription('Used to create/delete network groups according to the RowStatus convention')
alaQoSAppliedNetworkGroupsTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 12), )
if mibBuilder.loadTexts: alaQoSAppliedNetworkGroupsTable.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedNetworkGroupsTable.setDescription('Table of QoS AppliedNetworkGroups definitions')
alaQoSAppliedNetworkGroupsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 12, 1), ).setIndexNames((0, "ALCATEL-IND1-QOS-MIB", "alaQoSAppliedNetworkGroupsName"))
if mibBuilder.loadTexts: alaQoSAppliedNetworkGroupsEntry.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedNetworkGroupsEntry.setDescription('Definition of QoS AppliedNetworkGroups')
alaQoSAppliedNetworkGroupsName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 12, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31)))
if mibBuilder.loadTexts: alaQoSAppliedNetworkGroupsName.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedNetworkGroupsName.setDescription('Name of network group')
alaQoSAppliedNetworkGroupsSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ldap", 1), ("cli", 2), ("blt", 3), ("api", 4), ("imp", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedNetworkGroupsSource.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedNetworkGroupsSource.setDescription('What entity created the network group.')
alaQoSAppliedNetworkGroupsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 12, 1, 3), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedNetworkGroupsStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedNetworkGroupsStatus.setDescription('Used to create/delete network groups according to the RowStatus convention')
alaQoSNetworkGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 13), )
if mibBuilder.loadTexts: alaQoSNetworkGroupTable.setStatus('current')
if mibBuilder.loadTexts: alaQoSNetworkGroupTable.setDescription('Table of QoS NetworkGroup definitions')
alaQoSNetworkGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 13, 1), ).setIndexNames((0, "ALCATEL-IND1-QOS-MIB", "alaQoSNetworkGroupsName"), (0, "ALCATEL-IND1-QOS-MIB", "alaQoSNetworkGroupIpAddr"), (0, "ALCATEL-IND1-QOS-MIB", "alaQoSNetworkGroupIpMask"))
if mibBuilder.loadTexts: alaQoSNetworkGroupEntry.setStatus('current')
if mibBuilder.loadTexts: alaQoSNetworkGroupEntry.setDescription('Definition of QoS NetworkGroup')
alaQoSNetworkGroupIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 13, 1, 1), IpAddress())
if mibBuilder.loadTexts: alaQoSNetworkGroupIpAddr.setStatus('current')
if mibBuilder.loadTexts: alaQoSNetworkGroupIpAddr.setDescription('IP address for network group entry.')
alaQoSNetworkGroupIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 13, 1, 2), IpAddress())
if mibBuilder.loadTexts: alaQoSNetworkGroupIpMask.setStatus('current')
if mibBuilder.loadTexts: alaQoSNetworkGroupIpMask.setDescription('IP mask for network group entry.')
alaQoSNetworkGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 13, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSNetworkGroupStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSNetworkGroupStatus.setDescription('Used to create/delete network group entries according to the RowStatus convention')
alaQoSAppliedNetworkGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 14), )
if mibBuilder.loadTexts: alaQoSAppliedNetworkGroupTable.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedNetworkGroupTable.setDescription('Table of QoS AppliedNetworkGroup definitions')
alaQoSAppliedNetworkGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 14, 1), ).setIndexNames((0, "ALCATEL-IND1-QOS-MIB", "alaQoSAppliedNetworkGroupsName"), (0, "ALCATEL-IND1-QOS-MIB", "alaQoSAppliedNetworkGroupIpAddr"), (0, "ALCATEL-IND1-QOS-MIB", "alaQoSAppliedNetworkGroupIpMask"))
if mibBuilder.loadTexts: alaQoSAppliedNetworkGroupEntry.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedNetworkGroupEntry.setDescription('Definition of QoS AppliedNetworkGroup')
alaQoSAppliedNetworkGroupIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 14, 1, 1), IpAddress())
if mibBuilder.loadTexts: alaQoSAppliedNetworkGroupIpAddr.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedNetworkGroupIpAddr.setDescription('IP address for network group entry.')
alaQoSAppliedNetworkGroupIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 14, 1, 2), IpAddress())
if mibBuilder.loadTexts: alaQoSAppliedNetworkGroupIpMask.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedNetworkGroupIpMask.setDescription('IP mask for network group entry.')
alaQoSAppliedNetworkGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 14, 1, 3), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedNetworkGroupStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedNetworkGroupStatus.setDescription('Used to create/delete network group entries according to the RowStatus convention')
alaQoSMACGroupsTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 15), )
if mibBuilder.loadTexts: alaQoSMACGroupsTable.setStatus('current')
if mibBuilder.loadTexts: alaQoSMACGroupsTable.setDescription('Table of QoS MACGroups definitions')
alaQoSMACGroupsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 15, 1), ).setIndexNames((0, "ALCATEL-IND1-QOS-MIB", "alaQoSMACGroupsName"))
if mibBuilder.loadTexts: alaQoSMACGroupsEntry.setStatus('current')
if mibBuilder.loadTexts: alaQoSMACGroupsEntry.setDescription('Definition of QoS MACGroups')
alaQoSMACGroupsName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 15, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31)))
if mibBuilder.loadTexts: alaQoSMACGroupsName.setStatus('current')
if mibBuilder.loadTexts: alaQoSMACGroupsName.setDescription('Name of MAC group')
alaQoSMACGroupsSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ldap", 1), ("cli", 2), ("blt", 3), ("api", 4), ("imp", 5))).clone('cli')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSMACGroupsSource.setStatus('current')
if mibBuilder.loadTexts: alaQoSMACGroupsSource.setDescription('What entity created the MAC group.')
alaQoSMACGroupsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 15, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSMACGroupsStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSMACGroupsStatus.setDescription('Used to create/delete MAC groups according to the RowStatus convention')
alaQoSAppliedMACGroupsTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 16), )
if mibBuilder.loadTexts: alaQoSAppliedMACGroupsTable.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedMACGroupsTable.setDescription('Table of QoS AppliedMACGroups definitions')
alaQoSAppliedMACGroupsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 16, 1), ).setIndexNames((0, "ALCATEL-IND1-QOS-MIB", "alaQoSAppliedMACGroupsName"))
if mibBuilder.loadTexts: alaQoSAppliedMACGroupsEntry.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedMACGroupsEntry.setDescription('Definition of QoS AppliedMACGroups')
alaQoSAppliedMACGroupsName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 16, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31)))
if mibBuilder.loadTexts: alaQoSAppliedMACGroupsName.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedMACGroupsName.setDescription('Name of MAC group')
alaQoSAppliedMACGroupsSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ldap", 1), ("cli", 2), ("blt", 3), ("api", 4), ("imp", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedMACGroupsSource.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedMACGroupsSource.setDescription('What entity created the MAC group.')
alaQoSAppliedMACGroupsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 16, 1, 3), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedMACGroupsStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedMACGroupsStatus.setDescription('Used to create/delete MAC groups according to the RowStatus convention')
alaQoSMACGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 17), )
if mibBuilder.loadTexts: alaQoSMACGroupTable.setStatus('current')
if mibBuilder.loadTexts: alaQoSMACGroupTable.setDescription('Table of QoS MACGroup definitions')
alaQoSMACGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 17, 1), ).setIndexNames((0, "ALCATEL-IND1-QOS-MIB", "alaQoSMACGroupsName"), (0, "ALCATEL-IND1-QOS-MIB", "alaQoSMACGroupMacAddr"), (0, "ALCATEL-IND1-QOS-MIB", "alaQoSMACGroupMacMask"))
if mibBuilder.loadTexts: alaQoSMACGroupEntry.setStatus('current')
if mibBuilder.loadTexts: alaQoSMACGroupEntry.setDescription('Definition of QoS MACGroup')
alaQoSMACGroupMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 17, 1, 1), MacAddress())
if mibBuilder.loadTexts: alaQoSMACGroupMacAddr.setStatus('current')
if mibBuilder.loadTexts: alaQoSMACGroupMacAddr.setDescription('MAC address for MAC group entry')
alaQoSMACGroupMacMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 17, 1, 2), MacAddress())
if mibBuilder.loadTexts: alaQoSMACGroupMacMask.setStatus('current')
if mibBuilder.loadTexts: alaQoSMACGroupMacMask.setDescription('MAC mask for MAC group entry')
alaQoSMACGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 17, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSMACGroupStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSMACGroupStatus.setDescription('Used to create/delete MAC group entries according to the RowStatus convention')
alaQoSAppliedMACGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 18), )
if mibBuilder.loadTexts: alaQoSAppliedMACGroupTable.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedMACGroupTable.setDescription('Table of QoS AppliedMACGroup definitions')
alaQoSAppliedMACGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 18, 1), ).setIndexNames((0, "ALCATEL-IND1-QOS-MIB", "alaQoSAppliedMACGroupsName"), (0, "ALCATEL-IND1-QOS-MIB", "alaQoSAppliedMACGroupMacAddr"), (0, "ALCATEL-IND1-QOS-MIB", "alaQoSAppliedMACGroupMacMask"))
if mibBuilder.loadTexts: alaQoSAppliedMACGroupEntry.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedMACGroupEntry.setDescription('Definition of QoS AppliedMACGroup')
alaQoSAppliedMACGroupMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 18, 1, 1), MacAddress())
if mibBuilder.loadTexts: alaQoSAppliedMACGroupMacAddr.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedMACGroupMacAddr.setDescription('MAC address for MAC group entry')
alaQoSAppliedMACGroupMacMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 18, 1, 2), MacAddress())
if mibBuilder.loadTexts: alaQoSAppliedMACGroupMacMask.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedMACGroupMacMask.setDescription('MAC mask for MAC group entry')
alaQoSAppliedMACGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 18, 1, 3), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedMACGroupStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedMACGroupStatus.setDescription('Used to create/delete MAC group entries according to the RowStatus convention')
alaQoSPortGroupsTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 19), )
if mibBuilder.loadTexts: alaQoSPortGroupsTable.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortGroupsTable.setDescription('Table of QoS PortGroups definitions')
alaQoSPortGroupsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 19, 1), ).setIndexNames((0, "ALCATEL-IND1-QOS-MIB", "alaQoSPortGroupsName"))
if mibBuilder.loadTexts: alaQoSPortGroupsEntry.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortGroupsEntry.setDescription('Definition of QoS PortGroups')
alaQoSPortGroupsName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 19, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31)))
if mibBuilder.loadTexts: alaQoSPortGroupsName.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortGroupsName.setDescription('Name of port group')
alaQoSPortGroupsSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 19, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ldap", 1), ("cli", 2), ("blt", 3), ("api", 4), ("imp", 5))).clone('cli')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSPortGroupsSource.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortGroupsSource.setDescription('What entity created the port group.')
alaQoSPortGroupsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 19, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSPortGroupsStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortGroupsStatus.setDescription('Used to create/delete port groups according to the RowStatus convention')
alaQoSAppliedPortGroupsTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 20), )
if mibBuilder.loadTexts: alaQoSAppliedPortGroupsTable.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedPortGroupsTable.setDescription('Table of QoS AppliedPortGroups definitions')
alaQoSAppliedPortGroupsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 20, 1), ).setIndexNames((0, "ALCATEL-IND1-QOS-MIB", "alaQoSAppliedPortGroupsName"))
if mibBuilder.loadTexts: alaQoSAppliedPortGroupsEntry.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedPortGroupsEntry.setDescription('Definition of QoS AppliedPortGroups')
alaQoSAppliedPortGroupsName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 20, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31)))
if mibBuilder.loadTexts: alaQoSAppliedPortGroupsName.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedPortGroupsName.setDescription('Name of port group')
alaQoSAppliedPortGroupsSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 20, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ldap", 1), ("cli", 2), ("blt", 3), ("api", 4), ("imp", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedPortGroupsSource.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedPortGroupsSource.setDescription('What entity created the port group.')
alaQoSAppliedPortGroupsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 20, 1, 3), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedPortGroupsStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedPortGroupsStatus.setDescription('Used to create/delete port groups according to the RowStatus convention')
alaQoSPortGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 21), )
if mibBuilder.loadTexts: alaQoSPortGroupTable.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortGroupTable.setDescription('Table of QoS PortGroup definitions')
alaQoSPortGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 21, 1), ).setIndexNames((0, "ALCATEL-IND1-QOS-MIB", "alaQoSPortGroupsName"), (0, "ALCATEL-IND1-QOS-MIB", "alaQoSPortGroupSlot"), (0, "ALCATEL-IND1-QOS-MIB", "alaQoSPortGroupPort"), (0, "ALCATEL-IND1-QOS-MIB", "alaQoSPortGroupPortEnd"))
if mibBuilder.loadTexts: alaQoSPortGroupEntry.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortGroupEntry.setDescription('Definition of QoS PortGroup')
alaQoSPortGroupSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 21, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: alaQoSPortGroupSlot.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortGroupSlot.setDescription('Physical slot for port group entry')
alaQoSPortGroupPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 21, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: alaQoSPortGroupPort.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortGroupPort.setDescription('Physical port range start for port group entry')
alaQoSPortGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 21, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSPortGroupStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortGroupStatus.setDescription('Used to create/delete port group entries according to the RowStatus convention')
alaQoSPortGroupPortEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 21, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 52)))
if mibBuilder.loadTexts: alaQoSPortGroupPortEnd.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortGroupPortEnd.setDescription("Physical port range end for port group entry Must be greater than port range start to indicate a range. When '1', use port as a single port.")
alaQoSAppliedPortGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 22), )
if mibBuilder.loadTexts: alaQoSAppliedPortGroupTable.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedPortGroupTable.setDescription('Table of QoS AppliedPortGroup definitions')
alaQoSAppliedPortGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 22, 1), ).setIndexNames((0, "ALCATEL-IND1-QOS-MIB", "alaQoSAppliedPortGroupsName"), (0, "ALCATEL-IND1-QOS-MIB", "alaQoSAppliedPortGroupSlot"), (0, "ALCATEL-IND1-QOS-MIB", "alaQoSAppliedPortGroupPort"), (0, "ALCATEL-IND1-QOS-MIB", "alaQoSAppliedPortGroupPortEnd"))
if mibBuilder.loadTexts: alaQoSAppliedPortGroupEntry.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedPortGroupEntry.setDescription('Definition of QoS AppliedPortGroup')
alaQoSAppliedPortGroupSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 22, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: alaQoSAppliedPortGroupSlot.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedPortGroupSlot.setDescription('Physical slot for port group entry')
alaQoSAppliedPortGroupPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 22, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: alaQoSAppliedPortGroupPort.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedPortGroupPort.setDescription('Physical port range start for port group entry')
alaQoSAppliedPortGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 22, 1, 3), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedPortGroupStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedPortGroupStatus.setDescription('Used to create/delete port group entries according to the RowStatus convention')
alaQoSAppliedPortGroupPortEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 22, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 52)))
if mibBuilder.loadTexts: alaQoSAppliedPortGroupPortEnd.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedPortGroupPortEnd.setDescription("Physical port range end for port group entry Must be greater than port range start to indicate a range. When '1', use port as a single port.")
alaQoSMapGroupsTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 23), )
if mibBuilder.loadTexts: alaQoSMapGroupsTable.setStatus('current')
if mibBuilder.loadTexts: alaQoSMapGroupsTable.setDescription('Table of QoS MapGroups definitions')
alaQoSMapGroupsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 23, 1), ).setIndexNames((0, "ALCATEL-IND1-QOS-MIB", "alaQoSMapGroupsName"))
if mibBuilder.loadTexts: alaQoSMapGroupsEntry.setStatus('current')
if mibBuilder.loadTexts: alaQoSMapGroupsEntry.setDescription('Definition of QoS MapGroups')
alaQoSMapGroupsName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 23, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31)))
if mibBuilder.loadTexts: alaQoSMapGroupsName.setStatus('current')
if mibBuilder.loadTexts: alaQoSMapGroupsName.setDescription('Name of map group')
alaQoSMapGroupsSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 23, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ldap", 1), ("cli", 2), ("blt", 3), ("api", 4), ("imp", 5))).clone('cli')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSMapGroupsSource.setStatus('current')
if mibBuilder.loadTexts: alaQoSMapGroupsSource.setDescription('What entity created the map group.')
alaQoSMapGroupsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 23, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSMapGroupsStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSMapGroupsStatus.setDescription('Used to create/delete map groups according to the RowStatus convention')
alaQoSAppliedMapGroupsTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 24), )
if mibBuilder.loadTexts: alaQoSAppliedMapGroupsTable.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedMapGroupsTable.setDescription('Table of QoS AppliedMapGroups definitions')
alaQoSAppliedMapGroupsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 24, 1), ).setIndexNames((0, "ALCATEL-IND1-QOS-MIB", "alaQoSAppliedMapGroupsName"))
if mibBuilder.loadTexts: alaQoSAppliedMapGroupsEntry.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedMapGroupsEntry.setDescription('Definition of QoS AppliedMapGroups')
alaQoSAppliedMapGroupsName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 24, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31)))
if mibBuilder.loadTexts: alaQoSAppliedMapGroupsName.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedMapGroupsName.setDescription('Name of map group')
alaQoSAppliedMapGroupsSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 24, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ldap", 1), ("cli", 2), ("blt", 3), ("api", 4), ("imp", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedMapGroupsSource.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedMapGroupsSource.setDescription('What entity created the map group.')
alaQoSAppliedMapGroupsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 24, 1, 3), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedMapGroupsStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedMapGroupsStatus.setDescription('Used to create/delete map groups according to the RowStatus convention')
alaQoSMapGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 25), )
if mibBuilder.loadTexts: alaQoSMapGroupTable.setStatus('current')
if mibBuilder.loadTexts: alaQoSMapGroupTable.setDescription('Table of QoS MapGroup definitions')
alaQoSMapGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 25, 1), ).setIndexNames((0, "ALCATEL-IND1-QOS-MIB", "alaQoSMapGroupsName"), (0, "ALCATEL-IND1-QOS-MIB", "alaQoSMapGroupKey"), (0, "ALCATEL-IND1-QOS-MIB", "alaQoSMapGroupKeyEnd"), (0, "ALCATEL-IND1-QOS-MIB", "alaQoSMapGroupValue"))
if mibBuilder.loadTexts: alaQoSMapGroupEntry.setStatus('current')
if mibBuilder.loadTexts: alaQoSMapGroupEntry.setDescription('Definition of QoS MapGroup')
alaQoSMapGroupKey = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 25, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63)))
if mibBuilder.loadTexts: alaQoSMapGroupKey.setStatus('current')
if mibBuilder.loadTexts: alaQoSMapGroupKey.setDescription('Key range start of map group entry.')
alaQoSMapGroupKeyEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 25, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63)))
if mibBuilder.loadTexts: alaQoSMapGroupKeyEnd.setStatus('current')
if mibBuilder.loadTexts: alaQoSMapGroupKeyEnd.setDescription("Key range end for map group entries. Key range end must be greater than key range start to indicate a range. When '0', use key range start as a single key.")
alaQoSMapGroupValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 25, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63)))
if mibBuilder.loadTexts: alaQoSMapGroupValue.setStatus('current')
if mibBuilder.loadTexts: alaQoSMapGroupValue.setDescription('Value for map group entries. Value to stamp on traffic when keys in the proper range are seen.')
alaQoSMapGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 25, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSMapGroupStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSMapGroupStatus.setDescription('Used to create/delete map group entries according to the RowStatus convention')
alaQoSAppliedMapGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 26), )
if mibBuilder.loadTexts: alaQoSAppliedMapGroupTable.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedMapGroupTable.setDescription('Table of QoS AppliedMapGroup definitions')
alaQoSAppliedMapGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 26, 1), ).setIndexNames((0, "ALCATEL-IND1-QOS-MIB", "alaQoSAppliedMapGroupsName"), (0, "ALCATEL-IND1-QOS-MIB", "alaQoSAppliedMapGroupKey"), (0, "ALCATEL-IND1-QOS-MIB", "alaQoSAppliedMapGroupKeyEnd"), (0, "ALCATEL-IND1-QOS-MIB", "alaQoSAppliedMapGroupValue"))
if mibBuilder.loadTexts: alaQoSAppliedMapGroupEntry.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedMapGroupEntry.setDescription('Definition of QoS AppliedMapGroup')
alaQoSAppliedMapGroupKey = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 26, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63)))
if mibBuilder.loadTexts: alaQoSAppliedMapGroupKey.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedMapGroupKey.setDescription('Key range start of map group entry.')
alaQoSAppliedMapGroupKeyEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 26, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63)))
if mibBuilder.loadTexts: alaQoSAppliedMapGroupKeyEnd.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedMapGroupKeyEnd.setDescription("Key range end for map group entries. Key range end must be greater than key range start to indicate a range. When '0', use key range start as a single key.")
alaQoSAppliedMapGroupValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 26, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63)))
if mibBuilder.loadTexts: alaQoSAppliedMapGroupValue.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedMapGroupValue.setDescription('Value for map group entries. Value to stamp on traffic when keys in the proper range are seen.')
alaQoSAppliedMapGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 26, 1, 4), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedMapGroupStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedMapGroupStatus.setDescription('Used to create/delete map group entries according to the RowStatus convention')
alaQoSActionTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27), )
if mibBuilder.loadTexts: alaQoSActionTable.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionTable.setDescription('Table of QoS Action definitions')
alaQoSActionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1), ).setIndexNames((0, "ALCATEL-IND1-QOS-MIB", "alaQoSActionName"))
if mibBuilder.loadTexts: alaQoSActionEntry.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionEntry.setDescription('Definition of QoS Action')
alaQoSActionName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31)))
if mibBuilder.loadTexts: alaQoSActionName.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionName.setDescription('Name of action')
alaQoSActionSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ldap", 1), ("cli", 2), ("blt", 3), ("api", 4), ("imp", 5))).clone('cli')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionSource.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionSource.setDescription('What entity created the action.')
alaQoSActionDisposition = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("accept", 1), ("drop", 2), ("deny", 3))).clone('accept')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionDisposition.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionDisposition.setDescription('Disposition of traffic using the action. Use to filter out unwanted traffic.')
alaQoSActionDropAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tail", 1), ("wred", 2))).clone('tail')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionDropAlgorithm.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionDropAlgorithm.setDescription('Which drop algorithm should be used to discard traffic when oversubscribed.')
alaQoSActionWredMaximumThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionWredMaximumThreshold.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionWredMaximumThreshold.setDescription('Bandwidth at which WRED should discard most traffic.')
alaQoSActionWredMaximumThresholdStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionWredMaximumThresholdStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionWredMaximumThresholdStatus.setDescription('Status field indicating whether WRED maximum threshold is specified(enabled) or not(disabled).')
alaQoSActionWredMinimumThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionWredMinimumThreshold.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionWredMinimumThreshold.setDescription('Bandwidth at which WRED should start to discard traffic.')
alaQoSActionWredMinimumThresholdStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionWredMinimumThresholdStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionWredMinimumThresholdStatus.setDescription('Status field indicating whether WRED minimum threshold is specified(enabled) or not(disabled).')
alaQoSActionWredMaximumProbability = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 9), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionWredMaximumProbability.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionWredMaximumProbability.setDescription('Probabilty that traffic will be dropped at WRED maximum threshold.')
alaQoSActionWredMaximumProbabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionWredMaximumProbabilityStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionWredMaximumProbabilityStatus.setDescription('Status field indicating whether WRED maximum probability is specified(enabled) or not(disabled).')
alaQoSActionMinimumBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 11), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionMinimumBandwidth.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionMinimumBandwidth.setDescription('Minimum bandwidth (Kbits/sec) to guarantee for traffic')
alaQoSActionMinimumBandwidthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionMinimumBandwidthStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionMinimumBandwidthStatus.setDescription('Status field indicating whether minimum bandwidth is specified(enabled) or not(disabled).')
alaQoSActionMaximumBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 13), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionMaximumBandwidth.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionMaximumBandwidth.setDescription('Maximum bandwidth (Kbits/sec) allowed for traffic')
alaQoSActionMaximumBandwidthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionMaximumBandwidthStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionMaximumBandwidthStatus.setDescription('Status field indicating whether maximum bandwidth is specified(enabled) or not(disabled).')
alaQoSActionPeakBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 15), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionPeakBandwidth.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionPeakBandwidth.setDescription('Peak bandwidth (Kbits/sec) allowed for traffic')
alaQoSActionPeakBandwidthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionPeakBandwidthStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionPeakBandwidthStatus.setDescription('Status field indicating whether peak bandwidth is specified(enabled) or not(disabled).')
alaQoSActionPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionPriority.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionPriority.setDescription('Internal and queueing priority to use for traffic.')
alaQoSActionPriorityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionPriorityStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionPriorityStatus.setDescription('Status field indicating whether priority is specified(enabled) or not(disabled).')
alaQoSActionShared = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('no')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionShared.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionShared.setDescription('When enabled, try and share any resources (queues/limiters/descriptors) when more than one policy uses the same action.')
alaQoSActionJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 20), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionJitter.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionJitter.setDescription('Maximum jitter to allow for traffic.')
alaQoSActionJitterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionJitterStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionJitterStatus.setDescription('Status field indicating whether jitter is specified(enabled) or not(disabled).')
alaQoSActionLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 22), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionLatency.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionLatency.setDescription('Maximum latency to allow for traffic.')
alaQoSActionLatencyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionLatencyStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionLatencyStatus.setDescription('Status field indicating whether latency is specified(enabled) or not(disabled).')
alaQoSActionMaximumDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 24), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionMaximumDepth.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionMaximumDepth.setDescription('Maximum depth (Kbytes) of queues for traffic. Used for EBS in tri-color marker applications.')
alaQoSActionMaximumDepthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionMaximumDepthStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionMaximumDepthStatus.setDescription('Status field indicating whether maximum depth is specified(enabled) or not(disabled).')
alaQoSActionMaximumBuffers = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2047))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionMaximumBuffers.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionMaximumBuffers.setDescription('Maxmimum buffers for queues for traffic.')
alaQoSActionMaximumBuffersStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionMaximumBuffersStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionMaximumBuffersStatus.setDescription('Status field indicating whether maximum buffers is specified(enabled) or not(disabled).')
alaQoSAction8021p = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSAction8021p.setStatus('current')
if mibBuilder.loadTexts: alaQoSAction8021p.setDescription('802.1p value to stamp on traffic.')
alaQoSAction8021pStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSAction8021pStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAction8021pStatus.setDescription('Status field indicating whether 802.1p is specified(enabled) or not(disabled).')
alaQoSActionTos = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionTos.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionTos.setDescription('TOS value to stamp on traffic. (High 3 bits of TOS byte)')
alaQoSActionTosStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionTosStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionTosStatus.setDescription('Status field indicating whether TOS is specified(enabled) or not(disabled).')
alaQoSActionDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionDscp.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionDscp.setDescription('TOS value to stamp on traffic. (High 6 bits of TOS byte)')
alaQoSActionDscpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionDscpStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionDscpStatus.setDescription('Status field indicating whether DSCP is specified(enabled) or not(disabled).')
alaQoSActionMapFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("b8021p", 1), ("tos", 2), ("dscp", 3))).clone('b8021p')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionMapFrom.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionMapFrom.setDescription('What field to use as key for mapping 802.1p/TOS/DSCP priorities')
alaQoSActionMapTo = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("b8021p", 1), ("tos", 2), ("dscp", 3))).clone('b8021p')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionMapTo.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionMapTo.setDescription('What field to rewrite due to remapping 802.1p/TOS/DSCP priorities')
alaQoSActionMapGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 36), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionMapGroup.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionMapGroup.setDescription('Name of the map group to use when remapping 802.1p/TOS/DSCP priorities.')
alaQoSActionMapGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionMapGroupStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionMapGroupStatus.setDescription('Status field indicating whether a map group is specified(enabled) or not(disabled).')
alaQoSActionSourceRewriteIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 38), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionSourceRewriteIpAddr.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionSourceRewriteIpAddr.setDescription('Source IP address to rewrite on traffic.')
alaQoSActionSourceRewriteIpAddrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionSourceRewriteIpAddrStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionSourceRewriteIpAddrStatus.setDescription('Status field indicating whether source rewrite IP address & mask is specified(enabled) or not(disabled).')
alaQoSActionSourceRewriteIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 40), IpAddress().clone(hexValue="ffffffff")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionSourceRewriteIpMask.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionSourceRewriteIpMask.setDescription('Source rewrite IP mask to determine how much of source IP to rewrite.')
alaQoSActionSourceRewriteNetworkGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 41), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionSourceRewriteNetworkGroup.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionSourceRewriteNetworkGroup.setDescription('Name of network group containing source address/masks to rewrite on traffic. Must be a one to on correspondence with source network group entries in the condition.')
alaQoSActionSourceRewriteNetworkGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionSourceRewriteNetworkGroupStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionSourceRewriteNetworkGroupStatus.setDescription('Status field indicating whether source rewrite network group is specified(enabled) or not(disabled).')
alaQoSActionDestinationRewriteIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 43), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionDestinationRewriteIpAddr.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionDestinationRewriteIpAddr.setDescription('Destination IP address to rewrite on traffic.')
alaQoSActionDestinationRewriteIpAddrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionDestinationRewriteIpAddrStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionDestinationRewriteIpAddrStatus.setDescription('Status field indicating whether destination rewrite IP address & mask is specified(enabled) or not(disabled).')
alaQoSActionDestinationRewriteIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 45), IpAddress().clone(hexValue="ffffffff")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionDestinationRewriteIpMask.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionDestinationRewriteIpMask.setDescription('Destination rewrite IP mask to determine how much of destination IP to rewrite.')
alaQoSActionDestinationRewriteNetworkGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 46), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionDestinationRewriteNetworkGroup.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionDestinationRewriteNetworkGroup.setDescription('Name of network group containing destination address/masks to rewrite on traffic. Must be a one to on correspondence with destination network group entries in the condition.')
alaQoSActionDestinationRewriteNetworkGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionDestinationRewriteNetworkGroupStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionDestinationRewriteNetworkGroupStatus.setDescription('Status field indicating whether destination rewrite network group is specified(enabled) or not(disabled).')
alaQoSActionLoadBalanceGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 48), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 23))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionLoadBalanceGroup.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionLoadBalanceGroup.setDescription('Name of load balance group to use for traffic')
alaQoSActionLoadBalanceGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionLoadBalanceGroupStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionLoadBalanceGroupStatus.setDescription('Status field indicating whether load balanace group is specified(enabled) or not(disabled).')
alaQoSActionPermanentGatewayIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 50), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionPermanentGatewayIpAddr.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionPermanentGatewayIpAddr.setDescription('Next hop gateway to use for traffic')
alaQoSActionPermanentGatewayIpAddrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionPermanentGatewayIpAddrStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionPermanentGatewayIpAddrStatus.setDescription('Status field indicating whether permanent gateway IP address is specified(enabled) or not(disabled).')
alaQoSActionAlternateGatewayIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 52), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionAlternateGatewayIpAddr.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionAlternateGatewayIpAddr.setDescription("Next hop gateway to use for traffic that doesn't have an explicit route. Use this gateway instead of default routes.")
alaQoSActionAlternateGatewayIpAddrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionAlternateGatewayIpAddrStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionAlternateGatewayIpAddrStatus.setDescription('Status field indicating whether alternate gateway IP address is specified(enabled) or not(disabled).')
alaQoSActionRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 54), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionRowStatus.setDescription('Used to create/delete actions according to the RowStatus convention')
alaQoSActionMinimumDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 55), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionMinimumDepth.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionMinimumDepth.setDescription('Minimum depth (Kbytes) of queues for traffic. Used for CBS in tri-color marker applications.')
alaQoSActionMinimumDepthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionMinimumDepthStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionMinimumDepthStatus.setDescription('Status field indicating whether minimum depth is specified(enabled) or not(disabled).')
alaQoSActionVPNAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 57), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("protect", 1), ("bypass", 2), ("drop", 3))).clone('bypass')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionVPNAccess.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionVPNAccess.setDescription('How to encrypt traffic')
alaQoSActionNocache = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 58), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('no')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionNocache.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionNocache.setDescription("When enabled, don't make hardware entries for matching flows.")
alaQoSActionPortdisable = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 59), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('no')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionPortdisable.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionPortdisable.setDescription('When enabled, disable the physical source port of the traffic.')
alaQoSActionRedirectSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 60), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionRedirectSlot.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionRedirectSlot.setDescription('Destination physical slot for redirected traffic')
alaQoSActionRedirectSlotStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionRedirectSlotStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionRedirectSlotStatus.setDescription('Status for alaQoSActionRedirectSlotStatus field')
alaQoSActionRedirectPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 62), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionRedirectPort.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionRedirectPort.setDescription('Destination physical port for redirected traffic')
alaQoSActionRedirectAgg = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 63), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionRedirectAgg.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionRedirectAgg.setDescription('Destination linkagg for redirected traffic')
alaQoSActionRedirectAggStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 64), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionRedirectAggStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionRedirectAggStatus.setDescription('Status for alaQoSActionRedirectAggStatus field')
alaQoSActionMirrorSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 65), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionMirrorSlot.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionMirrorSlot.setDescription('Destination physical slot for mirrored traffic')
alaQoSActionMirrorPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 66), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionMirrorPort.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionMirrorPort.setDescription('Destination physical port for mirrored traffic')
alaQoSActionMirrorMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 67), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ingress", 1), ("egress", 2), ("both", 3))).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionMirrorMode.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionMirrorMode.setDescription('Mirroring mode')
alaQoSActionMirrorModeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 68), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionMirrorModeStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionMirrorModeStatus.setDescription('Status for alaQoSActionMirrorMode field')
alaQoSActionCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 69), Integer32()).setUnits('kilobits per second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionCIR.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionCIR.setDescription('Committed Information Rate - bandwidth values in kilobits per second.')
alaQoSActionCIRStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionCIRStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionCIRStatus.setDescription('Status field indicating whether CIR value is specified(enabled) or not(disabled).')
alaQoSActionCBS = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 71), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147450880))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionCBS.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionCBS.setDescription('Committed Burst Size - bucket size in byte.')
alaQoSActionCBSStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 72), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionCBSStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionCBSStatus.setDescription('Status field indicating whether CBS value is specified(enabled) or not(disabled).')
alaQoSActionPIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 73), Integer32()).setUnits('kilobits per second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionPIR.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionPIR.setDescription('Peak Information Rate - bandwidth values in kilobits per second.')
alaQoSActionPIRStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 74), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionPIRStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionPIRStatus.setDescription('Status field indicating whether PIR value is specified(enabled) or not(disabled).')
alaQoSActionPBS = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 75), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147450880))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionPBS.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionPBS.setDescription('Peak Burst Size - bucket size in byte.')
alaQoSActionPBSStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 76), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionPBSStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionPBSStatus.setDescription('Status field indicating whether PBS value is specified(enabled) or not(disabled).')
alaQoSActionCounterColor = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 77), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("rednonred", 1), ("greennongreen", 2), ("greenred", 3), ("greenyellow", 4), ("redyellow", 5))).clone('redyellow')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionCounterColor.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionCounterColor.setDescription('Specifies the color mode for the counters which will be used for sr/trTCM.')
alaQoSAppliedActionTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28), )
if mibBuilder.loadTexts: alaQoSAppliedActionTable.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionTable.setDescription('Table of QoS AppliedAction definitions')
alaQoSAppliedActionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1), ).setIndexNames((0, "ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionName"))
if mibBuilder.loadTexts: alaQoSAppliedActionEntry.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionEntry.setDescription('Definition of QoS AppliedAction')
alaQoSAppliedActionName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31)))
if mibBuilder.loadTexts: alaQoSAppliedActionName.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionName.setDescription('Name of action')
alaQoSAppliedActionSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ldap", 1), ("cli", 2), ("blt", 3), ("api", 4), ("imp", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedActionSource.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionSource.setDescription('What entity created the action.')
alaQoSAppliedActionDisposition = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("accept", 1), ("drop", 2), ("deny", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedActionDisposition.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionDisposition.setDescription('Disposition of traffic using the action. Use to filter out unwanted traffic.')
alaQoSAppliedActionDropAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tail", 1), ("wred", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedActionDropAlgorithm.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionDropAlgorithm.setDescription('Which drop algorithm should be used to discard traffic when oversubscribed.')
alaQoSAppliedActionWredMaximumThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedActionWredMaximumThreshold.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionWredMaximumThreshold.setDescription('Bandwidth at which WRED should discard most traffic.')
alaQoSAppliedActionWredMaximumThresholdStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedActionWredMaximumThresholdStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionWredMaximumThresholdStatus.setDescription('Status field indicating whether WRED maximum threshold is specified(enabled) or not(disabled).')
alaQoSAppliedActionWredMinimumThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedActionWredMinimumThreshold.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionWredMinimumThreshold.setDescription('Bandwidth at which WRED should start to discard traffic.')
alaQoSAppliedActionWredMinimumThresholdStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedActionWredMinimumThresholdStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionWredMinimumThresholdStatus.setDescription('Status field indicating whether WRED minimum threshold is specified(enabled) or not(disabled).')
alaQoSAppliedActionWredMaximumProbability = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedActionWredMaximumProbability.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionWredMaximumProbability.setDescription('Probabilty that traffic will be dropped at WRED maximum threshold.')
alaQoSAppliedActionWredMaximumProbabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedActionWredMaximumProbabilityStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionWredMaximumProbabilityStatus.setDescription('Status field indicating whether WRED maximum probability is specified(enabled) or not(disabled).')
alaQoSAppliedActionMinimumBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedActionMinimumBandwidth.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionMinimumBandwidth.setDescription('Minimum bandwidth (Kbits/sec) to guarantee for traffic')
alaQoSAppliedActionMinimumBandwidthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedActionMinimumBandwidthStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionMinimumBandwidthStatus.setDescription('Status field indicating whether minimum bandwidth is specified(enabled) or not(disabled).')
alaQoSAppliedActionMaximumBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedActionMaximumBandwidth.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionMaximumBandwidth.setDescription('Maximum bandwidth (Kbits/sec) allowed for traffic')
alaQoSAppliedActionMaximumBandwidthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedActionMaximumBandwidthStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionMaximumBandwidthStatus.setDescription('Status field indicating whether maximum bandwidth is specified(enabled) or not(disabled).')
alaQoSAppliedActionPeakBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedActionPeakBandwidth.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionPeakBandwidth.setDescription('Peak bandwidth (Kbits/sec) allowed for traffic')
alaQoSAppliedActionPeakBandwidthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedActionPeakBandwidthStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionPeakBandwidthStatus.setDescription('Status field indicating whether peak bandwidth is specified(enabled) or not(disabled).')
alaQoSAppliedActionPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedActionPriority.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionPriority.setDescription('Internal and queueing priority to use for traffic.')
alaQoSAppliedActionPriorityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedActionPriorityStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionPriorityStatus.setDescription('Status field indicating whether priority is specified(enabled) or not(disabled).')
alaQoSAppliedActionShared = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedActionShared.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionShared.setDescription('When enabled, try and share any resources (queues/limiters/descriptors) when more than one policy uses the same action.')
alaQoSAppliedActionJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedActionJitter.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionJitter.setDescription('Maximum jitter to allow for traffic.')
alaQoSAppliedActionJitterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedActionJitterStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionJitterStatus.setDescription('Status field indicating whether jitter is specified(enabled) or not(disabled).')
alaQoSAppliedActionLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedActionLatency.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionLatency.setDescription('Maximum latency to allow for traffic.')
alaQoSAppliedActionLatencyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedActionLatencyStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionLatencyStatus.setDescription('Status field indicating whether latency is specified(enabled) or not(disabled).')
alaQoSAppliedActionMaximumDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedActionMaximumDepth.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionMaximumDepth.setDescription('Maximum depth (Kbytes) of queues for traffic. Used for EBS in tri-color marker applications.')
alaQoSAppliedActionMaximumDepthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedActionMaximumDepthStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionMaximumDepthStatus.setDescription('Status field indicating whether maximum depth is specified(enabled) or not(disabled).')
alaQoSAppliedActionMaximumBuffers = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2047))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedActionMaximumBuffers.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionMaximumBuffers.setDescription('Maxmimum buffers for queues for traffic.')
alaQoSAppliedActionMaximumBuffersStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedActionMaximumBuffersStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionMaximumBuffersStatus.setDescription('Status field indicating whether maximum buffers is specified(enabled) or not(disabled).')
alaQoSAppliedAction8021p = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedAction8021p.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedAction8021p.setDescription('802.1p value to stamp on traffic.')
alaQoSAppliedAction8021pStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedAction8021pStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedAction8021pStatus.setDescription('Status field indicating whether 802.1p is specified(enabled) or not(disabled).')
alaQoSAppliedActionTos = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedActionTos.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionTos.setDescription('TOS value to stamp on traffic. (High 3 bits of TOS byte)')
alaQoSAppliedActionTosStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedActionTosStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionTosStatus.setDescription('Status field indicating whether TOS is specified(enabled) or not(disabled).')
alaQoSAppliedActionDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedActionDscp.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionDscp.setDescription('TOS value to stamp on traffic. (High 6 bits of TOS byte)')
alaQoSAppliedActionDscpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedActionDscpStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionDscpStatus.setDescription('Status field indicating whether DSCP is specified(enabled) or not(disabled).')
alaQoSAppliedActionMapFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("b8021p", 1), ("tos", 2), ("dscp", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedActionMapFrom.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionMapFrom.setDescription('What field to use as key for mapping 802.1p/TOS/DSCP priorities')
alaQoSAppliedActionMapTo = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("b8021p", 1), ("tos", 2), ("dscp", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedActionMapTo.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionMapTo.setDescription('What field to rewrite due to remapping 802.1p/TOS/DSCP priorities')
alaQoSAppliedActionMapGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 36), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedActionMapGroup.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionMapGroup.setDescription('Name of the map group to use when remapping 802.1p/TOS/DSCP priorities.')
alaQoSAppliedActionMapGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedActionMapGroupStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionMapGroupStatus.setDescription('Status field indicating whether a map group is specified(enabled) or not(disabled).')
alaQoSAppliedActionSourceRewriteIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 38), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedActionSourceRewriteIpAddr.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionSourceRewriteIpAddr.setDescription('Source IP address to rewrite on traffic.')
alaQoSAppliedActionSourceRewriteIpAddrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedActionSourceRewriteIpAddrStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionSourceRewriteIpAddrStatus.setDescription('Status field indicating whether source rewrite IP address & mask is specified(enabled) or not(disabled).')
alaQoSAppliedActionSourceRewriteIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 40), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedActionSourceRewriteIpMask.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionSourceRewriteIpMask.setDescription('Source rewrite IP mask to determine how much of source IP to rewrite.')
alaQoSAppliedActionSourceRewriteNetworkGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 41), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedActionSourceRewriteNetworkGroup.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionSourceRewriteNetworkGroup.setDescription('Name of network group containing source address/masks to rewrite on traffic. Must be a one to on correspondence with source network group entries in the condition.')
alaQoSAppliedActionSourceRewriteNetworkGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedActionSourceRewriteNetworkGroupStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionSourceRewriteNetworkGroupStatus.setDescription('Status field indicating whether source rewrite network group is specified(enabled) or not(disabled).')
alaQoSAppliedActionDestinationRewriteIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 43), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedActionDestinationRewriteIpAddr.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionDestinationRewriteIpAddr.setDescription('Destination IP address to rewrite on traffic.')
alaQoSAppliedActionDestinationRewriteIpAddrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedActionDestinationRewriteIpAddrStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionDestinationRewriteIpAddrStatus.setDescription('Status field indicating whether destination rewrite IP address & mask is specified(enabled) or not(disabled).')
alaQoSAppliedActionDestinationRewriteIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 45), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedActionDestinationRewriteIpMask.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionDestinationRewriteIpMask.setDescription('Destination rewrite IP mask to determine how much of destination IP to rewrite.')
alaQoSAppliedActionDestinationRewriteNetworkGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 46), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedActionDestinationRewriteNetworkGroup.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionDestinationRewriteNetworkGroup.setDescription('Name of network group containing destination address/masks to rewrite on traffic. Must be a one to on correspondence with destination network group entries in the condition.')
alaQoSAppliedActionDestinationRewriteNetworkGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedActionDestinationRewriteNetworkGroupStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionDestinationRewriteNetworkGroupStatus.setDescription('Status field indicating whether destination rewrite network group is specified(enabled) or not(disabled).')
alaQoSAppliedActionLoadBalanceGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 48), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 23))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedActionLoadBalanceGroup.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionLoadBalanceGroup.setDescription('Name of load balance group to use for traffic')
alaQoSAppliedActionLoadBalanceGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedActionLoadBalanceGroupStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionLoadBalanceGroupStatus.setDescription('Status field indicating whether load balanace group is specified(enabled) or not(disabled).')
alaQoSAppliedActionPermanentGatewayIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 50), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedActionPermanentGatewayIpAddr.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionPermanentGatewayIpAddr.setDescription('Next hop gateway to use for traffic')
alaQoSAppliedActionPermanentGatewayIpAddrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedActionPermanentGatewayIpAddrStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionPermanentGatewayIpAddrStatus.setDescription('Status field indicating whether permanent gateway IP address is specified(enabled) or not(disabled).')
alaQoSAppliedActionAlternateGatewayIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 52), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedActionAlternateGatewayIpAddr.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionAlternateGatewayIpAddr.setDescription("Next hop gateway to use for traffic that doesn't have an explicit route. Use this gateway instead of default routes.")
alaQoSAppliedActionAlternateGatewayIpAddrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedActionAlternateGatewayIpAddrStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionAlternateGatewayIpAddrStatus.setDescription('Status field indicating whether alternate gateway IP address is specified(enabled) or not(disabled).')
alaQoSAppliedActionRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 54), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedActionRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionRowStatus.setDescription('Used to create/delete actions according to the RowStatus convention')
alaQoSAppliedActionMinimumDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 55), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedActionMinimumDepth.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionMinimumDepth.setDescription('Minimum depth (Kbytes) of queues for traffic. Used for CBS in tri-color marker applications.')
alaQoSAppliedActionMinimumDepthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedActionMinimumDepthStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionMinimumDepthStatus.setDescription('Status field indicating whether minimum depth is specified(enabled) or not(disabled).')
alaQoSAppliedActionVPNAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 57), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("protect", 1), ("bypass", 2), ("drop", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedActionVPNAccess.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionVPNAccess.setDescription('How to encrypt traffic')
alaQoSAppliedActionNocache = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 58), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedActionNocache.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionNocache.setDescription("When enabled, don't make hardware entries for matching flows.")
alaQoSAppliedActionPortdisable = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 59), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedActionPortdisable.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionPortdisable.setDescription('When enabled, disable the physical source port of the traffic.')
alaQoSAppliedActionRedirectSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 60), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedActionRedirectSlot.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionRedirectSlot.setDescription('Destination physical slot for redirected traffic')
alaQoSAppliedActionRedirectSlotStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedActionRedirectSlotStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionRedirectSlotStatus.setDescription('Status for alaQoSAppliedActionRedirectSlotStatus field')
alaQoSAppliedActionRedirectPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 62), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedActionRedirectPort.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionRedirectPort.setDescription('Destination physical port for redirected traffic')
alaQoSAppliedActionRedirectAgg = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 63), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedActionRedirectAgg.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionRedirectAgg.setDescription('Destination linkagg for redirected traffic')
alaQoSAppliedActionRedirectAggStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 64), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedActionRedirectAggStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionRedirectAggStatus.setDescription('Status for alaQoSAppliedActionRedirectAggStatus field')
alaQoSAppliedActionMirrorSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 65), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedActionMirrorSlot.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionMirrorSlot.setDescription('Destination physical slot for mirrored traffic')
alaQoSAppliedActionMirrorPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 66), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedActionMirrorPort.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionMirrorPort.setDescription('Destination physical port for mirrored traffic')
alaQoSAppliedActionMirrorMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 67), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ingress", 1), ("egress", 2), ("both", 3))).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedActionMirrorMode.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionMirrorMode.setDescription('Mirroring mode')
alaQoSAppliedActionMirrorModeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 68), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedActionMirrorModeStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionMirrorModeStatus.setDescription('Status for alaQoSAppliedActionMirrorMode field')
alaQoSAppliedActionCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 69), Integer32()).setUnits('kilobits per second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSAppliedActionCIR.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionCIR.setDescription('Committed Information Rate - bandwidth values in kilobits per second.')
alaQoSAppliedActionCIRStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSAppliedActionCIRStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionCIRStatus.setDescription('Status field indicating whether CIR value is specified(enabled) or not(disabled).')
alaQoSAppliedActionCBS = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 71), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147450880))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSAppliedActionCBS.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionCBS.setDescription('Committed Burst Size - bucket size in byte.')
alaQoSAppliedActionCBSStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 72), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSAppliedActionCBSStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionCBSStatus.setDescription('Status field indicating whether CBS value is specified(enabled) or not(disabled).')
alaQoSAppliedActionPIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 73), Integer32()).setUnits('kilobits per second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSAppliedActionPIR.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionPIR.setDescription('Peak Information Rate - bandwidth values in kilobits per second.')
alaQoSAppliedActionPIRStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 74), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSAppliedActionPIRStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionPIRStatus.setDescription('Status field indicating whether PIR value is specified(enabled) or not(disabled).')
alaQoSAppliedActionPBS = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 75), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147450880))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSAppliedActionPBS.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionPBS.setDescription('Peak Burst Size - bucket size in byte.')
alaQoSAppliedActionPBSStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 76), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSAppliedActionPBSStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionPBSStatus.setDescription('Status field indicating whether PBS value is specified(enabled) or not(disabled).')
alaQoSAppliedActionCounterColor = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 77), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("rednonred", 1), ("greennongreen", 2), ("greenred", 3), ("greenyellow", 4), ("redyellow", 5))).clone('redyellow')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSAppliedActionCounterColor.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionCounterColor.setDescription('Specifies the color mode for the counters which will be used for sr/trTCM.')
alaQoSPortTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29), )
if mibBuilder.loadTexts: alaQoSPortTable.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortTable.setDescription('Table of QoS Port definitions')
alaQoSPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1), ).setIndexNames((0, "ALCATEL-IND1-QOS-MIB", "alaQoSPortSlot"), (0, "ALCATEL-IND1-QOS-MIB", "alaQoSPortPort"))
if mibBuilder.loadTexts: alaQoSPortEntry.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortEntry.setDescription('Definition of QoS Port')
alaQoSPortSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16)))
if mibBuilder.loadTexts: alaQoSPortSlot.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortSlot.setDescription('Physical slot port resides on')
alaQoSPortPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 52)))
if mibBuilder.loadTexts: alaQoSPortPort.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortPort.setDescription('Physical port number')
alaQoSPortEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSPortEnabled.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortEnabled.setDescription("Pending QoS enable status for the physical port Does not take effect until an 'Apply' command is issued")
alaQoSPortAppliedEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSPortAppliedEnabled.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortAppliedEnabled.setDescription('Current QoS enable status for the physical port ')
alaQoSPortInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("ethernet", 1), ("wan", 2), ("ethernet10", 3), ("ethernet100", 4), ("ethernet1G", 5), ("ethernet10G", 6), ("aggregate", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSPortInterfaceType.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortInterfaceType.setDescription('The type of interface QoS matches for this physical port')
alaQoSPortTrusted = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('no')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSPortTrusted.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortTrusted.setDescription('Status of trusting 802.1p/TOS/DSCP values. When trusted, 802.1p/DSCP values in the packet are passed through the switch. When untrusted, 802.1p/DSCP values are set to the port defaults.')
alaQoSPortDefault8021p = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSPortDefault8021p.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortDefault8021p.setDescription('802.1p priority value to use for untagged frames arriving on the port and tagged frames when the port is untrusted.')
alaQoSPortDefaultDSCP = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSPortDefaultDSCP.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortDefaultDSCP.setDescription('DSCP value to stamp in frames arriving on the port when the port is untrusted')
alaQoSPortMaximumReservedBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 9), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSPortMaximumReservedBandwidth.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortMaximumReservedBandwidth.setDescription("Pending maximum reservable bandwidth on the port. Policies can reserve up to this much bandwidth. Does not take effect until an 'Apply' is issued")
alaQoSPortMaximumReservedBandwidthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSPortMaximumReservedBandwidthStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortMaximumReservedBandwidthStatus.setDescription("Pending status field indicating whether to enforce maximum reservable bandwidth on next 'Apply'")
alaQoSPortAppliedMaximumReservedBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSPortAppliedMaximumReservedBandwidth.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortAppliedMaximumReservedBandwidth.setDescription('Current maximum reservable bandwidth on the port. Policies can reserve up to this much bandwidth. ')
alaQoSPortAppliedMaximumReservedBandwidthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSPortAppliedMaximumReservedBandwidthStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortAppliedMaximumReservedBandwidthStatus.setDescription('Current status field indicating whether to enforce maximum reservable bandwidth.')
alaQoSPortMaximumSignalledBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 13), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSPortMaximumSignalledBandwidth.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortMaximumSignalledBandwidth.setDescription("Pending maximum signalled bandwidth on the port. Signalling protocols can reserve up to this much bandwidth. Does not take effect until an 'Apply' is issued")
alaQoSPortMaximumSignalledBandwidthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSPortMaximumSignalledBandwidthStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortMaximumSignalledBandwidthStatus.setDescription("Pending status field indicating whether to enforce maximum signalled bandwidth on next 'Apply'")
alaQoSPortAppliedMaximumSignalledBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSPortAppliedMaximumSignalledBandwidth.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortAppliedMaximumSignalledBandwidth.setDescription('Current maximum signalled bandwidth on the port. Signalling protocols can reserve up to this much bandwidth. ')
alaQoSPortAppliedMaximumSignalledBandwidthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSPortAppliedMaximumSignalledBandwidthStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortAppliedMaximumSignalledBandwidthStatus.setDescription('Current status field indicating whether to enforce maximum signalled bandwidth.')
alaQoSPortDefaultQueues = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8, 8)).clone(8)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSPortDefaultQueues.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortDefaultQueues.setDescription('Pending number of default queues for the port Overrides any switch-wide default queue setting')
alaQoSPortAppliedDefaultQueues = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSPortAppliedDefaultQueues.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortAppliedDefaultQueues.setDescription('Current number of default queues for the port Overrides any switch-wide default queue setting')
alaQoSPortMaximumDefaultBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 19), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSPortMaximumDefaultBandwidth.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortMaximumDefaultBandwidth.setDescription("Pending maximum default bandwidth (Kbits/sec). Maximum rate for default queues on this port Does not take effect until an 'Apply' command is issued")
alaQoSPortMaximumDefaultBandwidthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSPortMaximumDefaultBandwidthStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortMaximumDefaultBandwidthStatus.setDescription("Pending status field indicating whether to enforce maximum default bandwidth on next 'Apply'")
alaQoSPortAppliedMaximumDefaultBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSPortAppliedMaximumDefaultBandwidth.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortAppliedMaximumDefaultBandwidth.setDescription('Current maximum default bandwidth (Kbits/sec). Maximum rate for default queues this port ')
alaQoSPortAppliedMaximumDefaultBandwidthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSPortAppliedMaximumDefaultBandwidthStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortAppliedMaximumDefaultBandwidthStatus.setDescription('Current status field indicating whether to enforce maximum default bandwidth.')
alaQoSPortMaximumDefaultDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 23), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSPortMaximumDefaultDepth.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortMaximumDefaultDepth.setDescription("Pending maximum depth of egress queues (Kbytes). Maximum depth of queues on this port Does not take effect until an 'Apply' command is issued")
alaQoSPortMaximumDefaultDepthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSPortMaximumDefaultDepthStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortMaximumDefaultDepthStatus.setDescription("Pending status field indicating whether to enforce maximum depth on next 'Apply'")
alaQoSPortAppliedMaximumDefaultDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSPortAppliedMaximumDefaultDepth.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortAppliedMaximumDefaultDepth.setDescription('Current maximum depth of egress queues (Kbytes). Maximum depth of queues on this port ')
alaQoSPortAppliedMaximumDefaultDepthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSPortAppliedMaximumDefaultDepthStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortAppliedMaximumDefaultDepthStatus.setDescription('Current status field indicating whether to enforce maximum depth.')
alaQoSPortMaximumDefaultBuffers = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 27), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSPortMaximumDefaultBuffers.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortMaximumDefaultBuffers.setDescription("Pending maximum buffers for egress queues. Maximum number of buffers for queues on this port Does not take effect until an 'Apply' command is issued")
alaQoSPortMaximumDefaultBuffersStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSPortMaximumDefaultBuffersStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortMaximumDefaultBuffersStatus.setDescription("Pending status field indicating whether to enforce maximum buffers on next 'Apply'")
alaQoSPortAppliedMaximumDefaultBuffers = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSPortAppliedMaximumDefaultBuffers.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortAppliedMaximumDefaultBuffers.setDescription('Current maximum buffers for egress queues. Maximum number of buffers for queues on this port ')
alaQoSPortAppliedMaximumDefaultBuffersStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSPortAppliedMaximumDefaultBuffersStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortAppliedMaximumDefaultBuffersStatus.setDescription('Current status field indicating whether to enforce maximum buffers.')
alaQoSPortReset = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('no')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSPortReset.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortReset.setDescription('Reset all QoS parameters to default values')
alaQoSPortPhysicalBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSPortPhysicalBandwidth.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortPhysicalBandwidth.setDescription('Physical bandwidth of port (Kbit/sec)')
alaQoSPortReservedBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSPortReservedBandwidth.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortReservedBandwidth.setDescription('Bandwidth reserved by policies on port (Kbit/sec)')
alaQoSPortSignalledBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSPortSignalledBandwidth.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortSignalledBandwidth.setDescription('Bandwidth reserved by signalling on port (Kbit/sec)')
alaQoSPortCurrentBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSPortCurrentBandwidth.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortCurrentBandwidth.setDescription('Current measured bandwidth of port (Kbits/sec)')
alaQoSPortDefaultQidLow = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSPortDefaultQidLow.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortDefaultQidLow.setDescription('Default low queue ID')
alaQoSPortDefaultQidMedium = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSPortDefaultQidMedium.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortDefaultQidMedium.setDescription('Default medium queue ID')
alaQoSPortDefaultQidHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSPortDefaultQidHigh.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortDefaultQidHigh.setDescription('Default high queue ID')
alaQoSPortDefaultQidUrgent = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSPortDefaultQidUrgent.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortDefaultQidUrgent.setDescription('Default urgent queue ID')
alaQoSPortFloodQid = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSPortFloodQid.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortFloodQid.setDescription('ID of the flood queue')
alaQoSPortQueues = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSPortQueues.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortQueues.setDescription('Number of queues currently on the port')
alaQoSPortQueuesCreated = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSPortQueuesCreated.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortQueuesCreated.setDescription('Number of queue requests on the port')
alaQoSPortQueuesFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSPortQueuesFailed.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortQueuesFailed.setDescription('Number of queue requests that failed on the port')
alaQoSPortQueuesPreempted = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSPortQueuesPreempted.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortQueuesPreempted.setDescription('Number of queues preempted on the port')
alaQoSPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 45), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSPortRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortRowStatus.setDescription('Used to create/delete ports according to the RowStatus convention')
alaQoSPortFirPrio0EnqBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 46), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSPortFirPrio0EnqBytes.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortFirPrio0EnqBytes.setDescription('Firenze priority 0 enqueue byte count')
alaQoSPortFirPrio0DeqBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 47), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSPortFirPrio0DeqBytes.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortFirPrio0DeqBytes.setDescription('Firenze priority 0 dequeue byte count')
alaQoSPortFirPrio0EnqPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 48), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSPortFirPrio0EnqPkts.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortFirPrio0EnqPkts.setDescription('Firenze priority 0 enqueue packet count')
alaQoSPortFirPrio0DeqPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 49), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSPortFirPrio0DeqPkts.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortFirPrio0DeqPkts.setDescription('Firenze priority 0 dequeue packet count')
alaQoSPortFirPrio0QidDiscardPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 50), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSPortFirPrio0QidDiscardPkts.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortFirPrio0QidDiscardPkts.setDescription('Firenze priority 0 QID discard packet count')
alaQoSPortFirPrio0WredDiscardPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 51), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSPortFirPrio0WredDiscardPkts.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortFirPrio0WredDiscardPkts.setDescription('Firenze priority 0 WRED discard packet count')
alaQoSPortFirPrio0OverflowDiscardPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 52), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSPortFirPrio0OverflowDiscardPkts.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortFirPrio0OverflowDiscardPkts.setDescription('Firenze priority 0 overflow discard packet count')
alaQoSPortFirPrio1EnqBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 53), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSPortFirPrio1EnqBytes.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortFirPrio1EnqBytes.setDescription('Firenze priority 1 enqueue byte count')
alaQoSPortFirPrio1DeqBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 54), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSPortFirPrio1DeqBytes.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortFirPrio1DeqBytes.setDescription('Firenze priority 1 dequeue byte count')
alaQoSPortFirPrio1EnqPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 55), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSPortFirPrio1EnqPkts.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortFirPrio1EnqPkts.setDescription('Firenze priority 1 enqueue packet count')
alaQoSPortFirPrio1DeqPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 56), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSPortFirPrio1DeqPkts.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortFirPrio1DeqPkts.setDescription('Firenze priority 1 dequeue packet count')
alaQoSPortFirPrio1QidDiscardPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 57), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSPortFirPrio1QidDiscardPkts.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortFirPrio1QidDiscardPkts.setDescription('Firenze priority 1 QID discard packet count')
alaQoSPortFirPrio1WredDiscardPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 58), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSPortFirPrio1WredDiscardPkts.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortFirPrio1WredDiscardPkts.setDescription('Firenze priority 1 WRED discard packet count')
alaQoSPortFirPrio1OverflowDiscardPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 59), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSPortFirPrio1OverflowDiscardPkts.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortFirPrio1OverflowDiscardPkts.setDescription('Firenze priority 1 overflow discard packet count')
alaQoSPortFirPrio2EnqBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 60), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSPortFirPrio2EnqBytes.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortFirPrio2EnqBytes.setDescription('Firenze priority 2 enqueue byte count')
alaQoSPortFirPrio2DeqBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 61), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSPortFirPrio2DeqBytes.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortFirPrio2DeqBytes.setDescription('Firenze priority 2 dequeue byte count')
alaQoSPortFirPrio2EnqPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 62), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSPortFirPrio2EnqPkts.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortFirPrio2EnqPkts.setDescription('Firenze priority 2 enqueue packet count')
alaQoSPortFirPrio2DeqPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 63), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSPortFirPrio2DeqPkts.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortFirPrio2DeqPkts.setDescription('Firenze priority 2 dequeue packet count')
alaQoSPortFirPrio2QidDiscardPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 64), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSPortFirPrio2QidDiscardPkts.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortFirPrio2QidDiscardPkts.setDescription('Firenze priority 2 QID discard packet count')
alaQoSPortFirPrio2WredDiscardPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 65), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSPortFirPrio2WredDiscardPkts.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortFirPrio2WredDiscardPkts.setDescription('Firenze priority 2 WRED discard packet count')
alaQoSPortFirPrio2OverflowDiscardPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 66), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSPortFirPrio2OverflowDiscardPkts.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortFirPrio2OverflowDiscardPkts.setDescription('Firenze priority 2 overflow discard packet count')
alaQoSPortFirPrio3EnqBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 67), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSPortFirPrio3EnqBytes.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortFirPrio3EnqBytes.setDescription('Firenze priority 3 enqueue byte count')
alaQoSPortFirPrio3DeqBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 68), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSPortFirPrio3DeqBytes.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortFirPrio3DeqBytes.setDescription('Firenze priority 3 dequeue byte count')
alaQoSPortFirPrio3EnqPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 69), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSPortFirPrio3EnqPkts.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortFirPrio3EnqPkts.setDescription('Firenze priority 3 enqueue packet count')
alaQoSPortFirPrio3DeqPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 70), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSPortFirPrio3DeqPkts.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortFirPrio3DeqPkts.setDescription('Firenze priority 3 dequeue packet count')
alaQoSPortFirPrio3QidDiscardPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 71), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSPortFirPrio3QidDiscardPkts.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortFirPrio3QidDiscardPkts.setDescription('Firenze priority 3 QID discard packet count')
alaQoSPortFirPrio3WredDiscardPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 72), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSPortFirPrio3WredDiscardPkts.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortFirPrio3WredDiscardPkts.setDescription('Firenze priority 3 WRED discard packet count')
alaQoSPortFirPrio3OverflowDiscardPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 73), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSPortFirPrio3OverflowDiscardPkts.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortFirPrio3OverflowDiscardPkts.setDescription('Firenze priority 3 overflow discard packet count')
alaQoSPortDefaultClassification = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 74), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("b8021p", 1), ("tos", 2), ("dscp", 3))).clone('tos')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSPortDefaultClassification.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortDefaultClassification.setDescription('Ingress traffic classification parameter for Firenze port What field to interpret as priority for WRED')
alaQoSPortLowPriorityWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 75), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSPortLowPriorityWeight.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortLowPriorityWeight.setDescription('Weight to use for low priority egress queue on fixed queue blades.')
alaQoSPortMediumPriorityWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 76), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSPortMediumPriorityWeight.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortMediumPriorityWeight.setDescription('Weight to use for medium priority egress queue on fixed queue blades.')
alaQoSPortHighPriorityWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 77), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSPortHighPriorityWeight.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortHighPriorityWeight.setDescription('Weight to use for high priority egress queue on fixed queue blades.')
alaQoSPortUrgentPriorityWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 78), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSPortUrgentPriorityWeight.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortUrgentPriorityWeight.setDescription('Weight to use for urgent priority egress queue on fixed queue blades.')
alaQoSPortMaximumBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 79), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSPortMaximumBandwidth.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortMaximumBandwidth.setDescription('Maximum egress bandwidth (Kbits/sec). Maximum rate to send traffic out this port')
alaQoSPortMaximumBandwidthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 80), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSPortMaximumBandwidthStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortMaximumBandwidthStatus.setDescription('Status field indicating whether to enforce maximum bandwidth on port.')
alaQoSPortEnqueuingThresholdP0Lower = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 81), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)).clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSPortEnqueuingThresholdP0Lower.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortEnqueuingThresholdP0Lower.setDescription('Priority 0 FIFO lower threshold for high density module')
alaQoSPortEnqueuingThresholdP0Upper = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 82), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)).clone(30)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSPortEnqueuingThresholdP0Upper.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortEnqueuingThresholdP0Upper.setDescription('Priority 0 FIFO upper threshold for high density module')
alaQoSPortEnqueuingThresholdP1Lower = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 83), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)).clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSPortEnqueuingThresholdP1Lower.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortEnqueuingThresholdP1Lower.setDescription('Priority 1 FIFO lower threshold for high density module')
alaQoSPortEnqueuingThresholdP1Upper = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 84), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)).clone(35)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSPortEnqueuingThresholdP1Upper.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortEnqueuingThresholdP1Upper.setDescription('Priority 1 FIFO upper threshold for high density module')
alaQoSPortEnqueuingThresholdP2Lower = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 85), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)).clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSPortEnqueuingThresholdP2Lower.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortEnqueuingThresholdP2Lower.setDescription('Priority 2 FIFO lower threshold for high density module')
alaQoSPortEnqueuingThresholdP2Upper = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 86), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)).clone(40)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSPortEnqueuingThresholdP2Upper.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortEnqueuingThresholdP2Upper.setDescription('Priority 2 FIFO upper threshold for high density module')
alaQoSPortEnqueuingThresholdP3Lower = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 87), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)).clone(260)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSPortEnqueuingThresholdP3Lower.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortEnqueuingThresholdP3Lower.setDescription('Priority 3 FIFO lower threshold for high density module')
alaQoSPortEnqueuingThresholdP3Upper = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 88), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)).clone(575)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSPortEnqueuingThresholdP3Upper.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortEnqueuingThresholdP3Upper.setDescription('Priority 3 FIFO upper threshold for high density module')
alaQoSPortEnqueuingThresholdStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 89), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSPortEnqueuingThresholdStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortEnqueuingThresholdStatus.setDescription('Status field indicating whether enqueuing thresholds need to be enforced on high density module.')
alaQoSPortHighDensity = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 90), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSPortHighDensity.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortHighDensity.setDescription('Indicates whether this is a high-density port or not.')
alaQoSPortServicingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 91), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("default", 0), ("strictpriority", 1), ("prioritywrr", 2), ("wrr", 3), ("drr", 4))).clone('default')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSPortServicingMode.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortServicingMode.setDescription('Servicing mode for the port')
alaQoSPortFreeFFPRules = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 92), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSPortFreeFFPRules.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortFreeFFPRules.setDescription('Number of Free FPP rule entries')
alaQoSPortUsedFFPRules = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 93), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSPortUsedFFPRules.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortUsedFFPRules.setDescription('Number of Used FPP rule entries')
alaQoSPortFreeFFPMasks = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 94), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSPortFreeFFPMasks.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortFreeFFPMasks.setDescription('Number of Free FPP mask entries')
alaQoSPortUsedFFPMasks = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 95), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSPortUsedFFPMasks.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortUsedFFPMasks.setDescription('Number of Free FPP mask enries')
alaQoSPortSpoofedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 96), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSPortSpoofedCount.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortSpoofedCount.setDescription('Spoofed packet count')
alaQoSPortNonSpoofedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 97), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSPortNonSpoofedCount.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortNonSpoofedCount.setDescription('Non-spoofed packet count')
alaQoSPortQ4PriorityWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 98), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSPortQ4PriorityWeight.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortQ4PriorityWeight.setDescription('Weight to use for cos queue 4.')
alaQoSPortQ5PriorityWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 99), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSPortQ5PriorityWeight.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortQ5PriorityWeight.setDescription('Weight to use for cos queue 5.')
alaQoSPortQ6PriorityWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 100), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSPortQ6PriorityWeight.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortQ6PriorityWeight.setDescription('Weight to use for cos queue 6.')
alaQoSPortQ7PriorityWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 101), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSPortQ7PriorityWeight.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortQ7PriorityWeight.setDescription('Weight to use for cos queue 7.')
alaQoSPortCOS0MaximumBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 102), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSPortCOS0MaximumBandwidth.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortCOS0MaximumBandwidth.setDescription('Maximum egress bandwidth (Kbits/sec). Maximum rate to send traffic out this queue')
alaQoSPortCOS0MaximumBandwidthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 103), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSPortCOS0MaximumBandwidthStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortCOS0MaximumBandwidthStatus.setDescription('Status field indicating whether to enforce maximum bandwidth on queue.')
alaQoSPortCOS1MaximumBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 104), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSPortCOS1MaximumBandwidth.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortCOS1MaximumBandwidth.setDescription('Maximum egress bandwidth (Kbits/sec). Maximum rate to send traffic out this queue')
alaQoSPortCOS1MaximumBandwidthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 105), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSPortCOS1MaximumBandwidthStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortCOS1MaximumBandwidthStatus.setDescription('Status field indicating whether to enforce maximum bandwidth on queue.')
alaQoSPortCOS2MaximumBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 106), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSPortCOS2MaximumBandwidth.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortCOS2MaximumBandwidth.setDescription('Maximum egress bandwidth (Kbits/sec). Maximum rate to send traffic out this queue')
alaQoSPortCOS2MaximumBandwidthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 107), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSPortCOS2MaximumBandwidthStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortCOS2MaximumBandwidthStatus.setDescription('Status field indicating whether to enforce maximum bandwidth on queue.')
alaQoSPortCOS3MaximumBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 108), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSPortCOS3MaximumBandwidth.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortCOS3MaximumBandwidth.setDescription('Maximum egress bandwidth (Kbits/sec). Maximum rate to send traffic out this queue')
alaQoSPortCOS3MaximumBandwidthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 109), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSPortCOS3MaximumBandwidthStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortCOS3MaximumBandwidthStatus.setDescription('Status field indicating whether to enforce maximum bandwidth on queue.')
alaQoSPortCOS4MaximumBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 110), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSPortCOS4MaximumBandwidth.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortCOS4MaximumBandwidth.setDescription('Maximum egress bandwidth (Kbits/sec). Maximum rate to send traffic out this queue')
alaQoSPortCOS4MaximumBandwidthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 111), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSPortCOS4MaximumBandwidthStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortCOS4MaximumBandwidthStatus.setDescription('Status field indicating whether to enforce maximum bandwidth on queue.')
alaQoSPortCOS5MaximumBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 112), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSPortCOS5MaximumBandwidth.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortCOS5MaximumBandwidth.setDescription('Maximum egress bandwidth (Kbits/sec). Maximum rate to send traffic out this queue')
alaQoSPortCOS5MaximumBandwidthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 113), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSPortCOS5MaximumBandwidthStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortCOS5MaximumBandwidthStatus.setDescription('Status field indicating whether to enforce maximum bandwidth on queue.')
alaQoSPortCOS6MaximumBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 114), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSPortCOS6MaximumBandwidth.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortCOS6MaximumBandwidth.setDescription('Maximum egress bandwidth (Kbits/sec). Maximum rate to send traffic out this queue')
alaQoSPortCOS6MaximumBandwidthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 115), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSPortCOS6MaximumBandwidthStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortCOS6MaximumBandwidthStatus.setDescription('Status field indicating whether to enforce maximum bandwidth on queue.')
alaQoSPortCOS7MaximumBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 116), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSPortCOS7MaximumBandwidth.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortCOS7MaximumBandwidth.setDescription('Maximum egress bandwidth (Kbits/sec). Maximum rate to send traffic out this queue')
alaQoSPortCOS7MaximumBandwidthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 117), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSPortCOS7MaximumBandwidthStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortCOS7MaximumBandwidthStatus.setDescription('Status field indicating whether to enforce maximum bandwidth on queue.')
alaQoSPortCOS0MinimumBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 118), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSPortCOS0MinimumBandwidth.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortCOS0MinimumBandwidth.setDescription('Minimum egress bandwidth (Kbits/sec). Minimum rate to send traffic out this queue')
alaQoSPortCOS0MinimumBandwidthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 119), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSPortCOS0MinimumBandwidthStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortCOS0MinimumBandwidthStatus.setDescription('Status field indicating whether to enforce minimum bandwidth on queue.')
alaQoSPortCOS1MinimumBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 120), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSPortCOS1MinimumBandwidth.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortCOS1MinimumBandwidth.setDescription('Minimum egress bandwidth (Kbits/sec). Minimum rate to send traffic out this queue')
alaQoSPortCOS1MinimumBandwidthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 121), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSPortCOS1MinimumBandwidthStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortCOS1MinimumBandwidthStatus.setDescription('Status field indicating whether to enforce minimum bandwidth on queue.')
alaQoSPortCOS2MinimumBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 122), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSPortCOS2MinimumBandwidth.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortCOS2MinimumBandwidth.setDescription('Minimum egress bandwidth (Kbits/sec). Minimum rate to send traffic out this queue')
alaQoSPortCOS2MinimumBandwidthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 123), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSPortCOS2MinimumBandwidthStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortCOS2MinimumBandwidthStatus.setDescription('Status field indicating whether to enforce minimum bandwidth on queue.')
alaQoSPortCOS3MinimumBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 124), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSPortCOS3MinimumBandwidth.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortCOS3MinimumBandwidth.setDescription('Minimum egress bandwidth (Kbits/sec). Minimum rate to send traffic out this queue')
alaQoSPortCOS3MinimumBandwidthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 125), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSPortCOS3MinimumBandwidthStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortCOS3MinimumBandwidthStatus.setDescription('Status field indicating whether to enforce minimum bandwidth on queue.')
alaQoSPortCOS4MinimumBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 126), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSPortCOS4MinimumBandwidth.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortCOS4MinimumBandwidth.setDescription('Minimum egress bandwidth (Kbits/sec). Minimum rate to send traffic out this queue')
alaQoSPortCOS4MinimumBandwidthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 127), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSPortCOS4MinimumBandwidthStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortCOS4MinimumBandwidthStatus.setDescription('Status field indicating whether to enforce minimum bandwidth on queue.')
alaQoSPortCOS5MinimumBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 128), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSPortCOS5MinimumBandwidth.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortCOS5MinimumBandwidth.setDescription('Minimum egress bandwidth (Kbits/sec). Minimum rate to send traffic out this queue')
alaQoSPortCOS5MinimumBandwidthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 129), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSPortCOS5MinimumBandwidthStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortCOS5MinimumBandwidthStatus.setDescription('Status field indicating whether to enforce minimum bandwidth on queue.')
alaQoSPortCOS6MinimumBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 130), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSPortCOS6MinimumBandwidth.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortCOS6MinimumBandwidth.setDescription('Minimum egress bandwidth (Kbits/sec). Minimum rate to send traffic out this queue')
alaQoSPortCOS6MinimumBandwidthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 131), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSPortCOS6MinimumBandwidthStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortCOS6MinimumBandwidthStatus.setDescription('Status field indicating whether to enforce minimum bandwidth on queue.')
alaQoSPortCOS7MinimumBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 132), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSPortCOS7MinimumBandwidth.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortCOS7MinimumBandwidth.setDescription('Minimum egress bandwidth (Kbits/sec). Minimum rate to send traffic out this queue')
alaQoSPortCOS7MinimumBandwidthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 133), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSPortCOS7MinimumBandwidthStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortCOS7MinimumBandwidthStatus.setDescription('Status field indicating whether to enforce minimum bandwidth on queue.')
alaQoSPortMaximumIngBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 134), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSPortMaximumIngBandwidth.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortMaximumIngBandwidth.setDescription('Maximum igress bandwidth (Kbits/sec). Maximum rate to recieve traffic in on this port')
alaQoSPortMaximumIngBandwidthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 135), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSPortMaximumIngBandwidthStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortMaximumIngBandwidthStatus.setDescription('Status field indicating whether to enforce maximum bandwidth on port.')
alaQoSPortDEIMarking = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 136), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSPortDEIMarking.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortDEIMarking.setDescription('This object specifies if, in egress traffic, the DEI/CFI bit will be set or not for the traffic which is not conformant to SLA (Yellow color packets). enabled(1) -- the DEI/CFI bit will be set in egress traffic. disabled(2) -- the DEI/CFI bit will not be set in egress traffic.')
alaQoSPortMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 137), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSPortMonitor.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortMonitor.setDescription('This object is used to monitor a slot/port on which user is interested to get the cos egress statistics. enabled(1) -- monitor the slot/port to gather per port cos egress statistics. disabled(2) -- reset the previously monitored slot/port.')
alaQoSPortDEIMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 138), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSPortDEIMapping.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortDEIMapping.setDescription('This object specifies if, in ingress traffic, the DEI/CFI bit will be set or not for the traffic which is not conformant to SLA (Yellow color packets). enabled(1) -- the DEI/CFI bit will be set in ingress traffic. disabled(2) -- the DEI/CFI bit will not be set in ingress traffic.')
alaQoSConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 30))
alaQoSConfigEnabled = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 30, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaQoSConfigEnabled.setStatus('current')
if mibBuilder.loadTexts: alaQoSConfigEnabled.setDescription('Is QoS enabled on the switch')
alaQoSConfigDefaultQueues = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 30, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaQoSConfigDefaultQueues.setStatus('current')
if mibBuilder.loadTexts: alaQoSConfigDefaultQueues.setDescription("Pending number of default queues to create for each port. Can be overridden on a port by port basis. Does not take affect until an 'Apply' command is issued.")
alaQoSConfigAppliedDefaultQueues = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 30, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSConfigAppliedDefaultQueues.setStatus('current')
if mibBuilder.loadTexts: alaQoSConfigAppliedDefaultQueues.setDescription("Number of default queues configured at last 'Apply' command.")
alaQoSConfigTrustPorts = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 30, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaQoSConfigTrustPorts.setStatus('current')
if mibBuilder.loadTexts: alaQoSConfigTrustPorts.setDescription('Flag to indicate whether to trust the 802.1p/TOS values on incoming traffic by default. Can be overridden on a port by port basis.')
alaQoSConfigFlowTimeout = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 30, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaQoSConfigFlowTimeout.setStatus('current')
if mibBuilder.loadTexts: alaQoSConfigFlowTimeout.setDescription("Pending flow timeout (seconds). Flows are removed from hardware/software if no traffic is seen for this many seconds. Does not take effect until an 'Apply' command is issued")
alaQoSConfigAppliedFlowTimeout = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 30, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 3600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSConfigAppliedFlowTimeout.setStatus('current')
if mibBuilder.loadTexts: alaQoSConfigAppliedFlowTimeout.setDescription('Current flow timeout (seconds). Flows are removed from hardware/software if no traffic is seen for this many seconds.')
alaQoSConfigFragmentTimeout = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 30, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaQoSConfigFragmentTimeout.setStatus('current')
if mibBuilder.loadTexts: alaQoSConfigFragmentTimeout.setDescription("Pending fragment timeout (seconds). Packet fragments are remembered for this many seconds. Does not take effect until an 'Apply' command is issued")
alaQoSConfigAppliedFragmentTimeout = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 30, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSConfigAppliedFragmentTimeout.setStatus('current')
if mibBuilder.loadTexts: alaQoSConfigAppliedFragmentTimeout.setDescription('Current fragment timeout (seconds). Packet fragments are remembered for this many seconds.')
alaQoSConfigReflexiveTimeout = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 30, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 3000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaQoSConfigReflexiveTimeout.setStatus('current')
if mibBuilder.loadTexts: alaQoSConfigReflexiveTimeout.setDescription("Pending reflexive timeout (seconds). Anticipate reverse flows for reflexive and NAT connections for this long until we see a response. Does not take effect until an 'Apply' command is issued")
alaQoSConfigAppliedReflfexiveTimeout = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 30, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 3000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSConfigAppliedReflfexiveTimeout.setStatus('current')
if mibBuilder.loadTexts: alaQoSConfigAppliedReflfexiveTimeout.setDescription('Current reflexive timeout (seconds). Anticipate reverse flows for reflexive and NAT connections for this long until we see a response. ')
alaQoSConfigNatTimeout = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 30, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 200000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaQoSConfigNatTimeout.setStatus('current')
if mibBuilder.loadTexts: alaQoSConfigNatTimeout.setDescription("Pending nat timeout (seconds). Once traffic is seen in both directions for anticipated flows, length of time to remember the flow without seeing traffic in either direction. Does not take effect until an 'Apply' command is issued")
alaQoSConfigAppliedNatTimeout = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 30, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 200000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSConfigAppliedNatTimeout.setStatus('current')
if mibBuilder.loadTexts: alaQoSConfigAppliedNatTimeout.setDescription('Current nat timeout (seconds). Once traffic is seen in both directions for anticipated flows, length of time to remember the flow without seeing traffic in either direction.')
alaQoSConfigClassifyl3Bridged = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 30, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaQoSConfigClassifyl3Bridged.setStatus('current')
if mibBuilder.loadTexts: alaQoSConfigClassifyl3Bridged.setDescription("Pending indicator for looking at L3/L4 parameters of bridged traffic. Does not take effect until an 'Apply' command is issued.")
alaQoSConfigAppliedClassifyl3Bridged = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 30, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSConfigAppliedClassifyl3Bridged.setStatus('current')
if mibBuilder.loadTexts: alaQoSConfigAppliedClassifyl3Bridged.setDescription('Current indicator for looking at L3/L4 parameters of bridged traffic.')
alaQoSConfigClassifyFragments = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 30, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaQoSConfigClassifyFragments.setStatus('current')
if mibBuilder.loadTexts: alaQoSConfigClassifyFragments.setDescription("Pending indicator for classifying fragmented traffic at L4 Does not take effect until an 'Apply' command is issued")
alaQoSConfigAppliedClassifyFragments = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 30, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSConfigAppliedClassifyFragments.setStatus('current')
if mibBuilder.loadTexts: alaQoSConfigAppliedClassifyFragments.setDescription("Current indicator for classifying fragmented traffic at L4 Does not take effect until an 'Apply' command is issued")
alaQoSConfigDefaultBridgedDisposition = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 30, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("accept", 1), ("drop", 2), ("deny", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaQoSConfigDefaultBridgedDisposition.setStatus('current')
if mibBuilder.loadTexts: alaQoSConfigDefaultBridgedDisposition.setDescription("Pending disposition of bridged traffic that doesn't match a policy. Does not take effect until an 'Apply' command is issued.")
alaQoSConfigAppliedDefaultBridgedDisposition = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 30, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("accept", 1), ("drop", 2), ("deny", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSConfigAppliedDefaultBridgedDisposition.setStatus('current')
if mibBuilder.loadTexts: alaQoSConfigAppliedDefaultBridgedDisposition.setDescription("Current disposition of bridged traffic that doesn't match a policy.")
alaQoSConfigDefaultRoutedDisposition = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 30, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("accept", 1), ("drop", 2), ("deny", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaQoSConfigDefaultRoutedDisposition.setStatus('current')
if mibBuilder.loadTexts: alaQoSConfigDefaultRoutedDisposition.setDescription("Pending disposition of routed traffic that doesn't match a policy. Does not take effect until an 'Apply' command is issued.")
alaQoSConfigAppliedDefaultRoutedDisposition = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 30, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("accept", 1), ("drop", 2), ("deny", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSConfigAppliedDefaultRoutedDisposition.setStatus('current')
if mibBuilder.loadTexts: alaQoSConfigAppliedDefaultRoutedDisposition.setDescription("Current disposition of routed traffic that doesn't match a policy ")
alaQoSConfigDefaultMulticastDisposition = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 30, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("accept", 1), ("drop", 2), ("deny", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaQoSConfigDefaultMulticastDisposition.setStatus('current')
if mibBuilder.loadTexts: alaQoSConfigDefaultMulticastDisposition.setDescription("Pending disposition of IGMP requests that don't match a policy Does not take effect until an 'Apply' command is issued")
alaQoSConfigAppliedDefaultMulticastDisposition = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 30, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("accept", 1), ("drop", 2), ("deny", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSConfigAppliedDefaultMulticastDisposition.setStatus('current')
if mibBuilder.loadTexts: alaQoSConfigAppliedDefaultMulticastDisposition.setDescription("Current disposition of IGMP requests that don't match a policy ")
alaQoSConfigStatsInterval = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 30, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaQoSConfigStatsInterval.setStatus('current')
if mibBuilder.loadTexts: alaQoSConfigStatsInterval.setDescription('Interval in seconds for how often statistics are updated')
alaQoSConfigLogLines = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 30, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaQoSConfigLogLines.setStatus('current')
if mibBuilder.loadTexts: alaQoSConfigLogLines.setDescription('Number of log lines to maintain in the QoS log')
alaQoSConfigLogLevel = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 30, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 9))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaQoSConfigLogLevel.setStatus('current')
if mibBuilder.loadTexts: alaQoSConfigLogLevel.setDescription('The level of logging desired. The higher the level, the more verbose the logging')
alaQoSConfigLogConsole = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 30, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaQoSConfigLogConsole.setStatus('current')
if mibBuilder.loadTexts: alaQoSConfigLogConsole.setDescription('Whether QoS log events are logged to the console')
alaQoSConfigForwardLog = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 30, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaQoSConfigForwardLog.setStatus('current')
if mibBuilder.loadTexts: alaQoSConfigForwardLog.setDescription('Whether QoS forwards logging events to PolicyManager')
alaQoSConfigClearLog = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 30, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaQoSConfigClearLog.setStatus('current')
if mibBuilder.loadTexts: alaQoSConfigClearLog.setDescription('Clear the QoS log')
alaQoSConfigApply = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 30, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaQoSConfigApply.setStatus('current')
if mibBuilder.loadTexts: alaQoSConfigApply.setDescription('Set to apply all pending QoS configuration/policy changes')
alaQoSConfigRevert = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 30, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaQoSConfigRevert.setStatus('current')
if mibBuilder.loadTexts: alaQoSConfigRevert.setDescription('Set to revert all pending QoS configuration/policy changes')
alaQoSConfigReset = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 30, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaQoSConfigReset.setStatus('current')
if mibBuilder.loadTexts: alaQoSConfigReset.setDescription('Set to reset global QoS configuration parameters to their default values')
alaQoSConfigStatsReset = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 30, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaQoSConfigStatsReset.setStatus('current')
if mibBuilder.loadTexts: alaQoSConfigStatsReset.setDescription('Set to reset global QoS statistics counters')
alaQoSConfigFlush = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 30, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaQoSConfigFlush.setStatus('current')
if mibBuilder.loadTexts: alaQoSConfigFlush.setDescription('Flush all pending policy objects')
alaQoSConfigDebug = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 30, 34), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaQoSConfigDebug.setStatus('current')
if mibBuilder.loadTexts: alaQoSConfigDebug.setDescription('Possible debug flags for QoS')
alaQoSConfigServicingMode = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 30, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("strictpriority", 1), ("prioritywrr", 2), ("wrr", 3), ("drr", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConfigServicingMode.setStatus('current')
if mibBuilder.loadTexts: alaQoSConfigServicingMode.setDescription('Servicing mode for the system')
alaQoSConfigLowPriorityWeight = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 30, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConfigLowPriorityWeight.setStatus('current')
if mibBuilder.loadTexts: alaQoSConfigLowPriorityWeight.setDescription('Weight to use for low priority queue(0) on fixed queue blades')
alaQoSConfigMediumPriorityWeight = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 30, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConfigMediumPriorityWeight.setStatus('current')
if mibBuilder.loadTexts: alaQoSConfigMediumPriorityWeight.setDescription('Weight to use for medium priority queue(1) on fixed queue blades')
alaQoSConfigHighPriorityWeight = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 30, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConfigHighPriorityWeight.setStatus('current')
if mibBuilder.loadTexts: alaQoSConfigHighPriorityWeight.setDescription('Weight to use for high priority queue(2) on fixed queue blades')
alaQoSConfigUrgentPriorityWeight = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 30, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConfigUrgentPriorityWeight.setStatus('current')
if mibBuilder.loadTexts: alaQoSConfigUrgentPriorityWeight.setDescription('Weight to use for urgent priority queue(3) on fixed queue blades')
alaQoSConfigQ4PriorityWeight = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 30, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConfigQ4PriorityWeight.setStatus('current')
if mibBuilder.loadTexts: alaQoSConfigQ4PriorityWeight.setDescription('Weight to use for COS 4 priority queue(4) on fixed queue blades')
alaQoSConfigQ5PriorityWeight = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 30, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConfigQ5PriorityWeight.setStatus('current')
if mibBuilder.loadTexts: alaQoSConfigQ5PriorityWeight.setDescription('Weight to use for COS 5 priority queue(5) on fixed queue blades')
alaQoSConfigQ6PriorityWeight = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 30, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConfigQ6PriorityWeight.setStatus('current')
if mibBuilder.loadTexts: alaQoSConfigQ6PriorityWeight.setDescription('Weight to use for COS 6 priority queue(6) on fixed queue blades')
alaQoSConfigQ7PriorityWeight = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 30, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConfigQ7PriorityWeight.setStatus('current')
if mibBuilder.loadTexts: alaQoSConfigQ7PriorityWeight.setDescription('Weight to use for COS 7 priority queue(7) on fixed queue blades')
alaQoSConfigUserportFilter = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 30, 44), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConfigUserportFilter.setStatus('current')
if mibBuilder.loadTexts: alaQoSConfigUserportFilter.setDescription('Events/protocols to filter on a Userport. Event bits values are: spoof = 1 bpdu = 2 bgp = 4 ospf = 8 rip = 16 vrrp = 32 dhcp-server = 64 pim = 128 dvmrp = 256 is-is = 512 dnsreply = 1024')
alaQoSConfigAppliedUserportFilter = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 30, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSConfigAppliedUserportFilter.setStatus('current')
if mibBuilder.loadTexts: alaQoSConfigAppliedUserportFilter.setDescription('Events/protocols to filter on a Userport. Event bits values are: spoof = 1 bpdu = 2 bgp = 4 ospf = 8 rip = 16 vrrp = 32 dhcp-server = 64 pim = 128 dvmrp = 256 is-is = 512 dnsreply = 1024')
alaQoSConfigUserportShutdown = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 30, 46), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConfigUserportShutdown.setStatus('current')
if mibBuilder.loadTexts: alaQoSConfigUserportShutdown.setDescription('Events/protocols that trigger admin down of a Userport. Event bits values are: spoof = 1 bpdu = 2 bgp = 4 ospf = 8 rip = 16 vrrp = 32 dhcp-server = 64 pim = 128 dvmrp = 256 is-is = 512 dnsreply = 1024')
alaQoSConfigAppliedUserportShutdown = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 30, 47), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSConfigAppliedUserportShutdown.setStatus('current')
if mibBuilder.loadTexts: alaQoSConfigAppliedUserportShutdown.setDescription('Events/protocols that trigger admin down of a Userport. Event bits values are: spoof = 1 bpdu = 2 bgp = 4 ospf = 8 rip = 16 vrrp = 32 dhcp-server = 64 pim = 128 dvmrp = 256 is-is = 512 dnsreply = 1024')
alaQoSConfigAutoNMS = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 30, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaQoSConfigAutoNMS.setStatus('current')
if mibBuilder.loadTexts: alaQoSConfigAutoNMS.setDescription('Flag to indicate whether to Prioritize NMS traffic by default.')
alaQoSConfigAutoPhones = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 30, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("pri0", 0), ("pri1", 1), ("pri2", 2), ("pri3", 3), ("pri4", 4), ("pri5", 5), ("pri6", 6), ("pri7", 7), ("trusted", 8), ("disable", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaQoSConfigAutoPhones.setStatus('current')
if mibBuilder.loadTexts: alaQoSConfigAutoPhones.setDescription('Auto configure CSBU Phones pri0-7 - will replace the priority. trusted - will allow priority from the orginator to be used. disable - will unconfigure to feature.')
alaQoSConfigQMPage = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 30, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaQoSConfigQMPage.setStatus('current')
if mibBuilder.loadTexts: alaQoSConfigQMPage.setDescription('Flag to indicate whether to send back a quarantined page when a client is quarantined but a remediation URL is not specified.')
alaQoSConfigQMMACGroup = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 30, 51), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaQoSConfigQMMACGroup.setStatus('current')
if mibBuilder.loadTexts: alaQoSConfigQMMACGroup.setDescription('Group name for quarantine manager quarantined MACs.')
alaQoSConfigQMPath = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 30, 52), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaQoSConfigQMPath.setStatus('current')
if mibBuilder.loadTexts: alaQoSConfigQMPath.setDescription('Default path for remediation server redirect.')
alaQoSConfigDEIMapping = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 30, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConfigDEIMapping.setStatus('current')
if mibBuilder.loadTexts: alaQoSConfigDEIMapping.setDescription('This object specifies, in ingress traffic, the DEI/CFI bit is mapped or not to internal drop precedence or yellow color. enabled(1) -- the DEI/CFI bit is mapped to internal drop precedence or yellow color if that bit is set. disabled(2) -- the DEI/CFI bit is not mapped to drop precedence or yellow color.')
alaQoSConfigDEIMarking = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 30, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConfigDEIMarking.setStatus('current')
if mibBuilder.loadTexts: alaQoSConfigDEIMarking.setDescription('This object specifies, in egress traffic, the DEI/CFI bit is mapped or not to internal drop precedence or yellow color. enabled(1) -- the DEI/CFI bit is mapped to internal drop precedence or yellow color if that bit is set. disabled(2) -- the DEI/CFI bit is not mapped to drop precedence or yellow color.')
alaQoSConfigStatsResetEgress = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 30, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaQoSConfigStatsResetEgress.setStatus('current')
if mibBuilder.loadTexts: alaQoSConfigStatsResetEgress.setDescription('Set to reset global Egress QoS statistics counters')
alaQoSQueueTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 32), )
if mibBuilder.loadTexts: alaQoSQueueTable.setStatus('current')
if mibBuilder.loadTexts: alaQoSQueueTable.setDescription('Table of QoS Queue definitions')
alaQoSQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 32, 1), ).setIndexNames((0, "ALCATEL-IND1-QOS-MIB", "alaQoSQueueId"))
if mibBuilder.loadTexts: alaQoSQueueEntry.setStatus('current')
if mibBuilder.loadTexts: alaQoSQueueEntry.setDescription('Definition of QoS Queue')
alaQoSQueueId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 32, 1, 1), Integer32())
if mibBuilder.loadTexts: alaQoSQueueId.setStatus('current')
if mibBuilder.loadTexts: alaQoSQueueId.setDescription('Internal queue identifier')
alaQoSQueueSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 32, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSQueueSlot.setStatus('current')
if mibBuilder.loadTexts: alaQoSQueueSlot.setDescription('Physical slot queue is destined to')
alaQoSQueuePort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 32, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSQueuePort.setStatus('current')
if mibBuilder.loadTexts: alaQoSQueuePort.setDescription('Physical port queue is destined to')
alaQoSQueuePortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 32, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSQueuePortId.setStatus('current')
if mibBuilder.loadTexts: alaQoSQueuePortId.setDescription('Internal global port id of destination port')
alaQoSQueueType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 32, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("mammoth", 1), ("priority", 2), ("spwrr", 3), ("wrr", 4), ("drr", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSQueueType.setStatus('current')
if mibBuilder.loadTexts: alaQoSQueueType.setDescription('Type of queueing done on this queue')
alaQoSQueuePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 32, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSQueuePriority.setStatus('current')
if mibBuilder.loadTexts: alaQoSQueuePriority.setDescription('Queueing priority for the queue')
alaQoSQueueMinimumBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 32, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSQueueMinimumBandwidth.setStatus('current')
if mibBuilder.loadTexts: alaQoSQueueMinimumBandwidth.setDescription('Minimum bandwidth (Kbits/sec) given to the queue')
alaQoSQueueMaximumBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 32, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSQueueMaximumBandwidth.setStatus('current')
if mibBuilder.loadTexts: alaQoSQueueMaximumBandwidth.setDescription('Maximum bandwidth (Kbits/sec) given to the queue')
alaQoSQueueAverageBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 32, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSQueueAverageBandwidth.setStatus('current')
if mibBuilder.loadTexts: alaQoSQueueAverageBandwidth.setDescription('Average measured bandwidth (Kbits/sec) for the queue')
alaQoSQueueMinimumDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 32, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSQueueMinimumDepth.setStatus('current')
if mibBuilder.loadTexts: alaQoSQueueMinimumDepth.setDescription('Minimum depth (Kbytes) of the queue')
alaQoSQueueMaximumDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 32, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSQueueMaximumDepth.setStatus('current')
if mibBuilder.loadTexts: alaQoSQueueMaximumDepth.setDescription('Maximum depth (Kbytes) of the queue')
alaQoSQueueMaximumBuffers = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 32, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSQueueMaximumBuffers.setStatus('current')
if mibBuilder.loadTexts: alaQoSQueueMaximumBuffers.setDescription('Maximum number of buffers for the queue')
alaQoSQueue8021p = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 32, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSQueue8021p.setStatus('current')
if mibBuilder.loadTexts: alaQoSQueue8021p.setDescription('802.1p value queue places on traffic')
alaQoSQueuePacketsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 32, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSQueuePacketsSent.setStatus('current')
if mibBuilder.loadTexts: alaQoSQueuePacketsSent.setDescription('Number of packets sent through the queue')
alaQoSQueuePacketsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 32, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSQueuePacketsDropped.setStatus('current')
if mibBuilder.loadTexts: alaQoSQueuePacketsDropped.setDescription('Number of packets dropped trying to queue into this queue')
alaQoSQueueMaxLength = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 32, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSQueueMaxLength.setStatus('current')
if mibBuilder.loadTexts: alaQoSQueueMaxLength.setDescription('Maximum measured length the queue has reached in buffers')
alaQoSQueueAverageLength = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 32, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSQueueAverageLength.setStatus('current')
if mibBuilder.loadTexts: alaQoSQueueAverageLength.setDescription('Average measured length of the queue in buffers')
alaQoSQueueCurrentLength = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 32, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSQueueCurrentLength.setStatus('current')
if mibBuilder.loadTexts: alaQoSQueueCurrentLength.setDescription('Current measured length of the queue in buffers')
alaQoSQueueAction = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 32, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSQueueAction.setStatus('current')
if mibBuilder.loadTexts: alaQoSQueueAction.setDescription('Name of the action this queue was created from')
alaQoSStats = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 31))
alaQoSStatsL2Events = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 31, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSStatsL2Events.setStatus('current')
if mibBuilder.loadTexts: alaQoSStatsL2Events.setDescription('Number of L2 classification events')
alaQoSStatsL2Matches = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 31, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSStatsL2Matches.setStatus('current')
if mibBuilder.loadTexts: alaQoSStatsL2Matches.setDescription('Number of L2 classifications matching a policy')
alaQoSStatsL2Drops = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 31, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSStatsL2Drops.setStatus('current')
if mibBuilder.loadTexts: alaQoSStatsL2Drops.setDescription('Number of L2 classifications matching a drop policy')
alaQoSStatsL3IngressEvents = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 31, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSStatsL3IngressEvents.setStatus('current')
if mibBuilder.loadTexts: alaQoSStatsL3IngressEvents.setDescription('Number of L3/L4 ingress classification events')
alaQoSStatsL3IngressMatches = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 31, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSStatsL3IngressMatches.setStatus('current')
if mibBuilder.loadTexts: alaQoSStatsL3IngressMatches.setDescription('Number of L3 ingress classifications matching a policy')
alaQoSStatsL3IngressDrops = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 31, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSStatsL3IngressDrops.setStatus('current')
if mibBuilder.loadTexts: alaQoSStatsL3IngressDrops.setDescription('Number of L3 ingress classifications matching a drop policy')
alaQoSStatsL3EgressEvents = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 31, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSStatsL3EgressEvents.setStatus('current')
if mibBuilder.loadTexts: alaQoSStatsL3EgressEvents.setDescription('Number of L3/L4 egress classification events')
alaQoSStatsL3EgressMatches = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 31, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSStatsL3EgressMatches.setStatus('current')
if mibBuilder.loadTexts: alaQoSStatsL3EgressMatches.setDescription('Number of L3 egress classifications matching a policy')
alaQoSStatsL3EgressDrops = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 31, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSStatsL3EgressDrops.setStatus('current')
if mibBuilder.loadTexts: alaQoSStatsL3EgressDrops.setDescription('Number of L3 egress classifications matching a drop policy')
alaQoSStatsMulticastEvents = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 31, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSStatsMulticastEvents.setStatus('current')
if mibBuilder.loadTexts: alaQoSStatsMulticastEvents.setDescription('Number of IGMP classification events')
alaQoSStatsMulticastMatches = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 31, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSStatsMulticastMatches.setStatus('current')
if mibBuilder.loadTexts: alaQoSStatsMulticastMatches.setDescription('Number of IGMP classifications matching a policy')
alaQoSStatsMulticastDrops = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 31, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSStatsMulticastDrops.setStatus('current')
if mibBuilder.loadTexts: alaQoSStatsMulticastDrops.setDescription('Number of IGMP classifications matching a drop policy')
alaQoSStatsFragments = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 31, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSStatsFragments.setStatus('current')
if mibBuilder.loadTexts: alaQoSStatsFragments.setDescription('Number of fragments processed by QoS')
alaQoSStatsBadFragments = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 31, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSStatsBadFragments.setStatus('current')
if mibBuilder.loadTexts: alaQoSStatsBadFragments.setDescription('Number of illegal (offset = 1) fragments')
alaQoSStatsUnknownFragments = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 31, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSStatsUnknownFragments.setStatus('current')
if mibBuilder.loadTexts: alaQoSStatsUnknownFragments.setDescription('Number of out of order fragment pieces')
alaQoSStatsReflexiveFlows = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 31, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSStatsReflexiveFlows.setStatus('current')
if mibBuilder.loadTexts: alaQoSStatsReflexiveFlows.setDescription('Number of reflexive flow entries')
alaQoSStatsReflexiveCorrections = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 31, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSStatsReflexiveCorrections.setStatus('current')
if mibBuilder.loadTexts: alaQoSStatsReflexiveCorrections.setDescription('Number of reflexive flow corrections')
alaQoSStatsLoadBalanceFlows = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 31, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSStatsLoadBalanceFlows.setStatus('current')
if mibBuilder.loadTexts: alaQoSStatsLoadBalanceFlows.setDescription('Number of server load balanced flow entries')
alaQoSStatsClassifierMaxNodes = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 31, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSStatsClassifierMaxNodes.setStatus('current')
if mibBuilder.loadTexts: alaQoSStatsClassifierMaxNodes.setDescription('Highest number of nodes in classifier tree')
alaQoSStatsClassifierMaxDepth = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 31, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSStatsClassifierMaxDepth.setStatus('current')
if mibBuilder.loadTexts: alaQoSStatsClassifierMaxDepth.setDescription('Length of longest path in classifier tree')
alaQoSStatsFlowLookups = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 31, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSStatsFlowLookups.setStatus('current')
if mibBuilder.loadTexts: alaQoSStatsFlowLookups.setDescription('Number of flow table lookups')
alaQoSStatsFlowHits = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 31, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSStatsFlowHits.setStatus('current')
if mibBuilder.loadTexts: alaQoSStatsFlowHits.setDescription('Number of flow table lookup hits')
alaQoSStatsSentNIMessages = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 31, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSStatsSentNIMessages.setStatus('current')
if mibBuilder.loadTexts: alaQoSStatsSentNIMessages.setDescription('Number of messages sent to NIs')
alaQoSStatsReceivedNIMessages = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 31, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSStatsReceivedNIMessages.setStatus('current')
if mibBuilder.loadTexts: alaQoSStatsReceivedNIMessages.setDescription('Number of messages received from NIs')
alaQoSStatsFailedNIMessages = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 31, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSStatsFailedNIMessages.setStatus('current')
if mibBuilder.loadTexts: alaQoSStatsFailedNIMessages.setDescription('Number of failed message attemptes to NIs')
alaQoSStatsSpoofedEvents = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 31, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSStatsSpoofedEvents.setStatus('current')
if mibBuilder.loadTexts: alaQoSStatsSpoofedEvents.setDescription('Total Number of spoofed events')
alaQoSStatsNonSpoofedEvents = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 31, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSStatsNonSpoofedEvents.setStatus('current')
if mibBuilder.loadTexts: alaQoSStatsNonSpoofedEvents.setDescription('Total number of non-spoofed events')
alaQoSStatsDropServicesEvents = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 31, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSStatsDropServicesEvents.setStatus('current')
if mibBuilder.loadTexts: alaQoSStatsDropServicesEvents.setDescription('Total number of packets matching the DropServices group')
alaQoSSlotTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 33), )
if mibBuilder.loadTexts: alaQoSSlotTable.setStatus('current')
if mibBuilder.loadTexts: alaQoSSlotTable.setDescription('Table of QoS Slot definitions')
alaQoSSlotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 33, 1), ).setIndexNames((0, "ALCATEL-IND1-QOS-MIB", "alaQoSSlotSlot"), (0, "ALCATEL-IND1-QOS-MIB", "alaQoSSlotSlice"))
if mibBuilder.loadTexts: alaQoSSlotEntry.setStatus('current')
if mibBuilder.loadTexts: alaQoSSlotEntry.setDescription('Definition of QoS Slot')
alaQoSSlotSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 33, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: alaQoSSlotSlot.setStatus('current')
if mibBuilder.loadTexts: alaQoSSlotSlot.setDescription('Physical slot number')
alaQoSSlotSlice = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 33, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4)))
if mibBuilder.loadTexts: alaQoSSlotSlice.setStatus('current')
if mibBuilder.loadTexts: alaQoSSlotSlice.setDescription('Physical device number on slot')
alaQoSSlotType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 33, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("mammoth", 1), ("kodiak", 2), ("mailbox", 3), ("coronado", 4), ("ixe2424", 5), ("kite", 6), ("fuji", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSSlotType.setStatus('current')
if mibBuilder.loadTexts: alaQoSSlotType.setDescription('Type of hardware in this slot/slice')
alaQoSSlotMaxBuffers = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 33, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSSlotMaxBuffers.setStatus('current')
if mibBuilder.loadTexts: alaQoSSlotMaxBuffers.setDescription('Maximum total buffers on this slot/slice')
alaQoSSlotFreeBuffers1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 33, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSSlotFreeBuffers1.setStatus('current')
if mibBuilder.loadTexts: alaQoSSlotFreeBuffers1.setDescription('Current free buffers in list 1')
alaQoSSlotFreeBuffers2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 33, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSSlotFreeBuffers2.setStatus('current')
if mibBuilder.loadTexts: alaQoSSlotFreeBuffers2.setDescription('Current free buffers in list 2')
alaQoSSlotThreshold1Low = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 33, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSSlotThreshold1Low.setStatus('current')
if mibBuilder.loadTexts: alaQoSSlotThreshold1Low.setDescription('Buffer are not given to low priority traffic from list 1 when free buffers in list 1 is less than this threshold.')
alaQoSSlotThreshold1Medium = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 33, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSSlotThreshold1Medium.setStatus('current')
if mibBuilder.loadTexts: alaQoSSlotThreshold1Medium.setDescription('Buffer are not given to medium priority traffic from list 1 when free buffers in list 1 is less than this threshold.')
alaQoSSlotThreshold1High = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 33, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSSlotThreshold1High.setStatus('current')
if mibBuilder.loadTexts: alaQoSSlotThreshold1High.setDescription('Buffer are not given to high priority traffic from list 1 when free buffers in list 1 is less than this threshold.')
alaQoSSlotThreshold1Urgent = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 33, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSSlotThreshold1Urgent.setStatus('current')
if mibBuilder.loadTexts: alaQoSSlotThreshold1Urgent.setDescription('Buffer are not given to urgent priority traffic from list 1 when free buffers in list 1 is less than this threshold.')
alaQoSSlotThreshold2Low = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 33, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSSlotThreshold2Low.setStatus('current')
if mibBuilder.loadTexts: alaQoSSlotThreshold2Low.setDescription('Buffer are not given to low priority traffic from list 2 when free buffers in list 2 is less than this threshold.')
alaQoSSlotThreshold2Medium = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 33, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSSlotThreshold2Medium.setStatus('current')
if mibBuilder.loadTexts: alaQoSSlotThreshold2Medium.setDescription('Buffer are not given to medium priority traffic from list 2 when free buffers in list 2 is less than this threshold.')
alaQoSSlotThreshold2High = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 33, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSSlotThreshold2High.setStatus('current')
if mibBuilder.loadTexts: alaQoSSlotThreshold2High.setDescription('Buffer are not given to high priority traffic from list 2 when free buffers in list 2 is less than this threshold.')
alaQoSSlotThreshold2Urgent = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 33, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSSlotThreshold2Urgent.setStatus('current')
if mibBuilder.loadTexts: alaQoSSlotThreshold2Urgent.setDescription('Buffer are not given to urgent priority traffic from list 2 when free buffers in list 2 is less than this threshold.')
alaQoSSlotBuffersDenied = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 33, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSSlotBuffersDenied.setStatus('current')
if mibBuilder.loadTexts: alaQoSSlotBuffersDenied.setDescription('Buffers denied on this slot')
alaQoSSlotBuffersDeniedAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 33, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSSlotBuffersDeniedAverage.setStatus('current')
if mibBuilder.loadTexts: alaQoSSlotBuffersDeniedAverage.setDescription('Average number of denied buffers over time')
alaQoSSlotBuffersDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 33, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSSlotBuffersDropped.setStatus('current')
if mibBuilder.loadTexts: alaQoSSlotBuffersDropped.setDescription('Buffers dropped on this slot')
alaQoSSlotBuffersDroppedAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 33, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSSlotBuffersDroppedAverage.setStatus('current')
if mibBuilder.loadTexts: alaQoSSlotBuffersDroppedAverage.setDescription('Average number of dropped buffers over time')
alaQoSSlotWredThresholdP0Lower = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 33, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)).clone(4095)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSSlotWredThresholdP0Lower.setStatus('current')
if mibBuilder.loadTexts: alaQoSSlotWredThresholdP0Lower.setDescription('Priority 0 WRED lower threshold for high density module')
alaQoSSlotWredThresholdP0Upper = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 33, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)).clone(4095)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSSlotWredThresholdP0Upper.setStatus('current')
if mibBuilder.loadTexts: alaQoSSlotWredThresholdP0Upper.setDescription('Priority 0 WRED upper threshold for high density module')
alaQoSSlotWredThresholdP1Lower = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 33, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)).clone(4095)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSSlotWredThresholdP1Lower.setStatus('current')
if mibBuilder.loadTexts: alaQoSSlotWredThresholdP1Lower.setDescription('Priority 1 WRED lower threshold for high density module')
alaQoSSlotWredThresholdP1Upper = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 33, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)).clone(4095)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSSlotWredThresholdP1Upper.setStatus('current')
if mibBuilder.loadTexts: alaQoSSlotWredThresholdP1Upper.setDescription('Priority 1 WRED upper threshold for high density module')
alaQoSSlotWredThresholdP2Lower = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 33, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)).clone(4095)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSSlotWredThresholdP2Lower.setStatus('current')
if mibBuilder.loadTexts: alaQoSSlotWredThresholdP2Lower.setDescription('Priority 2 WRED lower threshold for high density module')
alaQoSSlotWredThresholdP2Upper = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 33, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)).clone(4095)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSSlotWredThresholdP2Upper.setStatus('current')
if mibBuilder.loadTexts: alaQoSSlotWredThresholdP2Upper.setDescription('Priority 2 WRED upper threshold for high density module')
alaQoSSlotWredThresholdP3Lower = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 33, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)).clone(4095)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSSlotWredThresholdP3Lower.setStatus('current')
if mibBuilder.loadTexts: alaQoSSlotWredThresholdP3Lower.setDescription('Priority 3 WRED lower threshold for high density module')
alaQoSSlotWredThresholdP3Upper = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 33, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)).clone(4095)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSSlotWredThresholdP3Upper.setStatus('current')
if mibBuilder.loadTexts: alaQoSSlotWredThresholdP3Upper.setDescription('Priority 3 WRED upper threshold for high density module')
alaQoSSlotWredAverageCounterWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 33, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(4)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSSlotWredAverageCounterWeight.setStatus('current')
if mibBuilder.loadTexts: alaQoSSlotWredAverageCounterWeight.setDescription('The weight used in the WRED algorithm. It is used as a negative power of 2')
alaQoSSlotWredThresholdStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 33, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSSlotWredThresholdStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSSlotWredThresholdStatus.setDescription('Status field indicating whether WRED maximum thresholds are specified(enable) or not(disable).')
alaQoSSlotCbqThresholdMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 33, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("prioritywrr", 1), ("wrr", 2), ("strictpriority", 3))).clone('prioritywrr')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSSlotCbqThresholdMode.setStatus('current')
if mibBuilder.loadTexts: alaQoSSlotCbqThresholdMode.setDescription('Servicing mode for the CBQ thresholds for high density modules')
alaQoSSlotCbqThresholdP1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 33, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSSlotCbqThresholdP1.setStatus('current')
if mibBuilder.loadTexts: alaQoSSlotCbqThresholdP1.setDescription('Priority 1 CBQ threshold for high density module')
alaQoSSlotCbqThresholdP2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 33, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSSlotCbqThresholdP2.setStatus('current')
if mibBuilder.loadTexts: alaQoSSlotCbqThresholdP2.setDescription('Priority 2 CBQ threshold for high density module')
alaQoSSlotCbqThresholdP3 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 33, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSSlotCbqThresholdP3.setStatus('current')
if mibBuilder.loadTexts: alaQoSSlotCbqThresholdP3.setDescription('Priority 3 CBQ threshold for high density module')
alaQoSSlotHighDensity = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 33, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSSlotHighDensity.setStatus('current')
if mibBuilder.loadTexts: alaQoSSlotHighDensity.setDescription('Indicates whether this is a high-density slice or not.')
alaQoSClassify = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 34))
alaQoSClassifyClassify = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 34, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("l2", 1), ("l3", 2), ("multicast", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaQoSClassifyClassify.setStatus('current')
if mibBuilder.loadTexts: alaQoSClassifyClassify.setDescription('Which classification routine to run on the sample packet')
alaQoSClassifyApplied = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 34, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaQoSClassifyApplied.setStatus('current')
if mibBuilder.loadTexts: alaQoSClassifyApplied.setDescription('What set of policies QoS uses when testing the classifier. When yes(1) the applied policies are used. When no(2) the pending policies are used.')
alaQoSClassifySourceSlot = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 34, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaQoSClassifySourceSlot.setStatus('current')
if mibBuilder.loadTexts: alaQoSClassifySourceSlot.setDescription('Source physical slot to submit when testing classifier.')
alaQoSClassifySourcePort = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 34, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 52))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaQoSClassifySourcePort.setStatus('current')
if mibBuilder.loadTexts: alaQoSClassifySourcePort.setDescription('Source physical port to submit when testing classifier.')
alaQoSClassifySourceInterfaceType = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 34, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("any", 0), ("ethernet", 1), ("wan", 2), ("ethernet10", 3), ("ethernet100", 4), ("ethernet1G", 5), ("ethernet10G", 6), ("aggregate", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaQoSClassifySourceInterfaceType.setStatus('current')
if mibBuilder.loadTexts: alaQoSClassifySourceInterfaceType.setDescription('Source interface type to submit when testing classifier.')
alaQoSClassifyDestinationSlot = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 34, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaQoSClassifyDestinationSlot.setStatus('current')
if mibBuilder.loadTexts: alaQoSClassifyDestinationSlot.setDescription('Destination physical slot to submit when testing classifier.')
alaQoSClassifyDestinationPort = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 34, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 52))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaQoSClassifyDestinationPort.setStatus('current')
if mibBuilder.loadTexts: alaQoSClassifyDestinationPort.setDescription('Destination physical port to submit when testing classifier.')
alaQoSClassifyDestinationInterfaceType = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 34, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("any", 0), ("ethernet", 1), ("wan", 2), ("ethernet10", 3), ("ethernet100", 4), ("ethernet1G", 5), ("ethernet10G", 6), ("aggregate", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaQoSClassifyDestinationInterfaceType.setStatus('current')
if mibBuilder.loadTexts: alaQoSClassifyDestinationInterfaceType.setDescription('Destination interface type to submit when testing classifier.')
alaQoSClassifySourceMac = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 34, 9), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaQoSClassifySourceMac.setStatus('current')
if mibBuilder.loadTexts: alaQoSClassifySourceMac.setDescription('Source MAC address to submit when testing classifier.')
alaQoSClassifyDestinationMac = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 34, 10), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaQoSClassifyDestinationMac.setStatus('current')
if mibBuilder.loadTexts: alaQoSClassifyDestinationMac.setDescription('Destination MAC address to submit when testing classifier.')
alaQoSClassifySourceVlan = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 34, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaQoSClassifySourceVlan.setStatus('current')
if mibBuilder.loadTexts: alaQoSClassifySourceVlan.setDescription('Source VLAN to submit when testing classifier.')
alaQoSClassifyDestinationVlan = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 34, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaQoSClassifyDestinationVlan.setStatus('current')
if mibBuilder.loadTexts: alaQoSClassifyDestinationVlan.setDescription('Destination VLAN to submit when testing classifier.')
alaQoSClassify8021p = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 34, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaQoSClassify8021p.setStatus('current')
if mibBuilder.loadTexts: alaQoSClassify8021p.setDescription('802.1p value to submit when testing classifier.')
alaQoSClassifySourceIp = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 34, 14), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaQoSClassifySourceIp.setStatus('current')
if mibBuilder.loadTexts: alaQoSClassifySourceIp.setDescription('Source IP address to submit when testing classifier.')
alaQoSClassifyDestinationIp = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 34, 15), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaQoSClassifyDestinationIp.setStatus('current')
if mibBuilder.loadTexts: alaQoSClassifyDestinationIp.setDescription('Destination IP address to submit when testing classifier.')
alaQoSClassifyMulticastIp = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 34, 16), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaQoSClassifyMulticastIp.setStatus('current')
if mibBuilder.loadTexts: alaQoSClassifyMulticastIp.setDescription('Multicast IP address to submit when testing classifier.')
alaQoSClassifyTos = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 34, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaQoSClassifyTos.setStatus('current')
if mibBuilder.loadTexts: alaQoSClassifyTos.setDescription('TOS value to submit when testing classifier.')
alaQoSClassifyDscp = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 34, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaQoSClassifyDscp.setStatus('current')
if mibBuilder.loadTexts: alaQoSClassifyDscp.setDescription('DSCP value to submit when testing classifier.')
alaQoSClassifyIpProtocol = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 34, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaQoSClassifyIpProtocol.setStatus('current')
if mibBuilder.loadTexts: alaQoSClassifyIpProtocol.setDescription('IP protocol value to submit when testing classifier.')
alaQoSClassifySourceIpPort = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 34, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaQoSClassifySourceIpPort.setStatus('current')
if mibBuilder.loadTexts: alaQoSClassifySourceIpPort.setDescription('Source IP port to submit when testing classifier.')
alaQoSClassifyDestinationIpPort = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 34, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaQoSClassifyDestinationIpPort.setStatus('current')
if mibBuilder.loadTexts: alaQoSClassifyDestinationIpPort.setDescription('Destination IP port to submit when testing classifier.')
alaQoSClassifyExecute = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 34, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaQoSClassifyExecute.setStatus('current')
if mibBuilder.loadTexts: alaQoSClassifyExecute.setDescription("Writing to this field tells QoS to run the classifier on the current packet headers. The classifier stores the results in result fields. The next 'set' to the table will clear all fields before actually performing the set.")
alaQoSClassifyL2SourceResultRule = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 34, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSClassifyL2SourceResultRule.setStatus('current')
if mibBuilder.loadTexts: alaQoSClassifyL2SourceResultRule.setDescription('Matching rule for L2 (source)')
alaQoSClassifyL2SourceResultDisposition = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 34, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("accept", 1), ("drop", 2), ("deny", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSClassifyL2SourceResultDisposition.setStatus('current')
if mibBuilder.loadTexts: alaQoSClassifyL2SourceResultDisposition.setDescription('Result disposition for L2 (source)')
alaQoSClassifyL2DestinationResultRule = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 34, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSClassifyL2DestinationResultRule.setStatus('current')
if mibBuilder.loadTexts: alaQoSClassifyL2DestinationResultRule.setDescription('Matching rule for L2 (destination)')
alaQoSClassifyL2DestinationResultDisposition = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 34, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("accept", 1), ("drop", 2), ("deny", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSClassifyL2DestinationResultDisposition.setStatus('current')
if mibBuilder.loadTexts: alaQoSClassifyL2DestinationResultDisposition.setDescription('Result disposition for L2 (destination)')
alaQoSClassifyL3ResultRule = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 34, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSClassifyL3ResultRule.setStatus('current')
if mibBuilder.loadTexts: alaQoSClassifyL3ResultRule.setDescription('Matching rule for L3')
alaQoSClassifyL3ResultDisposition = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 34, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("accept", 1), ("drop", 2), ("deny", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSClassifyL3ResultDisposition.setStatus('current')
if mibBuilder.loadTexts: alaQoSClassifyL3ResultDisposition.setDescription('Result disposition for L3')
alaQoSClassifyIGMPResultRule = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 34, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSClassifyIGMPResultRule.setStatus('current')
if mibBuilder.loadTexts: alaQoSClassifyIGMPResultRule.setDescription('Matching rule for IGMP request')
alaQoSClassifyIGMPResultDisposition = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 34, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("accept", 1), ("drop", 2), ("deny", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSClassifyIGMPResultDisposition.setStatus('current')
if mibBuilder.loadTexts: alaQoSClassifyIGMPResultDisposition.setDescription('Result disposition for IGMP')
alaQoSClassifyMulticastResultRule = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 34, 31), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSClassifyMulticastResultRule.setStatus('current')
if mibBuilder.loadTexts: alaQoSClassifyMulticastResultRule.setDescription('Matching rule for multicast')
alaQoSClassifyMulticastResultDisposition = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 34, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("accept", 1), ("drop", 2), ("deny", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSClassifyMulticastResultDisposition.setStatus('current')
if mibBuilder.loadTexts: alaQoSClassifyMulticastResultDisposition.setDescription('Result disposition for multicast')
alaQoSSlotProtocolTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 35), )
if mibBuilder.loadTexts: alaQoSSlotProtocolTable.setStatus('current')
if mibBuilder.loadTexts: alaQoSSlotProtocolTable.setDescription('Table of QoS SlotProtocol definitions')
alaQoSSlotProtocolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 35, 1), ).setIndexNames((0, "ALCATEL-IND1-QOS-MIB", "alaQoSSlotSlot"), (0, "ALCATEL-IND1-QOS-MIB", "alaQoSSlotSlice"), (0, "ALCATEL-IND1-QOS-MIB", "alaQoSSlotProtocolId"))
if mibBuilder.loadTexts: alaQoSSlotProtocolEntry.setStatus('current')
if mibBuilder.loadTexts: alaQoSSlotProtocolEntry.setDescription('Definition of QoS SlotProtocol')
alaQoSSlotProtocolId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 35, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("user1", 1), ("user2", 2), ("user3", 3), ("user4", 4), ("unknown", 5))))
if mibBuilder.loadTexts: alaQoSSlotProtocolId.setStatus('current')
if mibBuilder.loadTexts: alaQoSSlotProtocolId.setDescription('Used on high density module classification in the MAC. This is the protocol ID used between the CAM and priority descriptors.')
alaQoSSlotProtocolEthertype = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 35, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSSlotProtocolEthertype.setStatus('current')
if mibBuilder.loadTexts: alaQoSSlotProtocolEthertype.setDescription('Used on high density module classification in the MAC. This is the Ethernet type used between the CAM for classification.')
alaQoSSlotProtocolDsap = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 35, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSSlotProtocolDsap.setStatus('current')
if mibBuilder.loadTexts: alaQoSSlotProtocolDsap.setDescription('Used on high density module classification in the MAC. This is the destination SAP in an 802.3 packet.')
alaQoSSlotProtocolSsap = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 35, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSSlotProtocolSsap.setStatus('current')
if mibBuilder.loadTexts: alaQoSSlotProtocolSsap.setDescription('Used on high density module classification in the MAC. This is the source SAP in an 802.3 packet.')
alaQoSSlotProtocol8023Enabled = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 35, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSSlotProtocol8023Enabled.setStatus('current')
if mibBuilder.loadTexts: alaQoSSlotProtocol8023Enabled.setDescription('Used on high density module classification in the MAC. This will enable 802.3 checking on the CAM entry.')
alaQoSSlotProtocolType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 35, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("priority", 1), ("fallback", 2))).clone('fallback')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSSlotProtocolType.setStatus('current')
if mibBuilder.loadTexts: alaQoSSlotProtocolType.setDescription('Used on high density module classification in the MAC. This positions the CAM entry in the list. Priority will put the entries in the front of the CAM, giving it priority. fallback will put the entry at the end.')
alaQoSSlotProtocolRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 35, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSSlotProtocolRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSSlotProtocolRowStatus.setDescription('Used to create/delete slot protoocols according to the RowStatus convention')
alaQoSPortProtocolTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 36), )
if mibBuilder.loadTexts: alaQoSPortProtocolTable.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortProtocolTable.setDescription('Table of QoS PortProtocol definitions')
alaQoSPortProtocolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 36, 1), ).setIndexNames((0, "ALCATEL-IND1-QOS-MIB", "alaQoSPortSlot"), (0, "ALCATEL-IND1-QOS-MIB", "alaQoSPortPort"), (0, "ALCATEL-IND1-QOS-MIB", "alaQoSPortProtocolId"))
if mibBuilder.loadTexts: alaQoSPortProtocolEntry.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortProtocolEntry.setDescription('Definition of QoS PortProtocol')
alaQoSPortProtocolId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 36, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("bpdu", 1), ("lcpsnap", 2), ("lcpeth", 3), ("ipv4", 4), ("arp", 5), ("rarp", 6), ("ipv6", 7), ("ipx", 8), ("apple", 9), ("sna", 10), ("decnet", 11), ("user1", 12), ("user2", 13), ("user3", 14), ("user4", 15))))
if mibBuilder.loadTexts: alaQoSPortProtocolId.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortProtocolId.setDescription('Used on high density module classification in the MAC. This is the protocol id that needs to be changed.')
alaQoSPortProtocolClassification = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 36, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("b8021p", 1), ("tos", 2), ("dscp", 3))).clone('b8021p')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSPortProtocolClassification.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortProtocolClassification.setDescription('Used on high density module classification in the MAC. This determines what type of classification is used to find priority.')
alaQoSPortProtocolPriorityP0 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 36, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSPortProtocolPriorityP0.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortProtocolPriorityP0.setDescription('Used on high density module classification in the MAC. This is the new priority for P0 to be mapped to.')
alaQoSPortProtocolPriorityP1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 36, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSPortProtocolPriorityP1.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortProtocolPriorityP1.setDescription('Used on high density module classification in the MAC. This is the new priority for P1 to be mapped to.')
alaQoSPortProtocolPriorityP2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 36, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSPortProtocolPriorityP2.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortProtocolPriorityP2.setDescription('Used on high density module classification in the MAC. This is the new priority for P2 to be mapped to.')
alaQoSPortProtocolPriorityP3 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 36, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSPortProtocolPriorityP3.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortProtocolPriorityP3.setDescription('Used on high density module classification in the MAC. This is the new priority for P3 to be mapped to.')
alaQoSPortProtocolPriorityP4 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 36, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3)).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSPortProtocolPriorityP4.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortProtocolPriorityP4.setDescription('Used on high density module classification in the MAC. This is the new priority for P4 to be mapped to.')
alaQoSPortProtocolPriorityP5 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 36, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3)).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSPortProtocolPriorityP5.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortProtocolPriorityP5.setDescription('Used on high density module classification in the MAC. This is the new priority for P5 to be mapped to.')
alaQoSPortProtocolPriorityP6 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 36, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3)).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSPortProtocolPriorityP6.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortProtocolPriorityP6.setDescription('Used on high density module classification in the MAC. This is the new priority for P6 to be mapped to.')
alaQoSPortProtocolPriorityP7 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 36, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3)).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSPortProtocolPriorityP7.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortProtocolPriorityP7.setDescription('Used on high density module classification in the MAC. This is the new priority for P7 to be mapped to.')
alaQoSPortProtocolRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 36, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSPortProtocolRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortProtocolRowStatus.setDescription('Used to create/delete rows according to RowStatus convention')
alaQoSSlotDscpTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 37), )
if mibBuilder.loadTexts: alaQoSSlotDscpTable.setStatus('current')
if mibBuilder.loadTexts: alaQoSSlotDscpTable.setDescription('Table of QoS SlotDscp definitions')
alaQoSSlotDscpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 37, 1), ).setIndexNames((0, "ALCATEL-IND1-QOS-MIB", "alaQoSSlotSlot"), (0, "ALCATEL-IND1-QOS-MIB", "alaQoSSlotSlice"), (0, "ALCATEL-IND1-QOS-MIB", "alaQoSSlotDscpIndex"))
if mibBuilder.loadTexts: alaQoSSlotDscpEntry.setStatus('current')
if mibBuilder.loadTexts: alaQoSSlotDscpEntry.setDescription('Definition of QoS SlotDscp')
alaQoSSlotDscpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 37, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63)))
if mibBuilder.loadTexts: alaQoSSlotDscpIndex.setStatus('current')
if mibBuilder.loadTexts: alaQoSSlotDscpIndex.setDescription('Used on high density module classification in the MAC This is the index into the DSCP table to access.')
alaQoSSlotDscpPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 37, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSSlotDscpPriority.setStatus('current')
if mibBuilder.loadTexts: alaQoSSlotDscpPriority.setDescription('Used on high density module classification in the MAC. This is the priority of the index of the DSCP table.')
alaQoSSlotPcamTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 38), )
if mibBuilder.loadTexts: alaQoSSlotPcamTable.setStatus('current')
if mibBuilder.loadTexts: alaQoSSlotPcamTable.setDescription('Table of QoS SlotPcam definitions')
alaQoSSlotPcamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 38, 1), ).setIndexNames((0, "ALCATEL-IND1-QOS-MIB", "alaQoSSlotSlot"), (0, "ALCATEL-IND1-QOS-MIB", "alaQoSSlotSlice"), (0, "ALCATEL-IND1-QOS-MIB", "alaQoSSlotPcamId"))
if mibBuilder.loadTexts: alaQoSSlotPcamEntry.setStatus('current')
if mibBuilder.loadTexts: alaQoSSlotPcamEntry.setDescription('Definition of QoS SlotPcam')
alaQoSSlotPcamId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 38, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 24)))
if mibBuilder.loadTexts: alaQoSSlotPcamId.setStatus('current')
if mibBuilder.loadTexts: alaQoSSlotPcamId.setDescription('Used on high density module classification in the MAC. This is the index used in the PCAM.')
alaQoSSlotPcamEthertype = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 38, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSSlotPcamEthertype.setStatus('current')
if mibBuilder.loadTexts: alaQoSSlotPcamEthertype.setDescription('Used on high density module classification in the MAC. This is the Ethernet type in the CAM.')
alaQoSSlotPcamDsap = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 38, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSSlotPcamDsap.setStatus('current')
if mibBuilder.loadTexts: alaQoSSlotPcamDsap.setDescription('Used on high density module classification in the MAC. This is the destination SAP in an 802.3 packet.')
alaQoSSlotPcamSsap = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 38, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSSlotPcamSsap.setStatus('current')
if mibBuilder.loadTexts: alaQoSSlotPcamSsap.setDescription('Used on high density module classification in the MAC. This is the source SAP in an 802.3 packet.')
alaQoSSlotPcam8023Enabled = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 38, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSSlotPcam8023Enabled.setStatus('current')
if mibBuilder.loadTexts: alaQoSSlotPcam8023Enabled.setDescription('Used on high density module classification in the MAC. This will enable 802.3 checking on the CAM entry.')
alaQoSSlotPcamProtocolNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 38, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSSlotPcamProtocolNumber.setStatus('current')
if mibBuilder.loadTexts: alaQoSSlotPcamProtocolNumber.setDescription('Used on high density module classification in the MAC. This identifies the protocol number of the CAM entry.')
alaQoSSlotPcamEnableEntry = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 38, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSSlotPcamEnableEntry.setStatus('current')
if mibBuilder.loadTexts: alaQoSSlotPcamEnableEntry.setDescription('Used on high density module to enable the pcam entry.')
alaQoSSlotPcamEnable8023 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 38, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSSlotPcamEnable8023.setStatus('current')
if mibBuilder.loadTexts: alaQoSSlotPcamEnable8023.setDescription('Used on high density module to indiciate if 802.3 is enabled in the pcam entry.')
alaQoSSlotPcamEnableDsap = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 38, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSSlotPcamEnableDsap.setStatus('current')
if mibBuilder.loadTexts: alaQoSSlotPcamEnableDsap.setDescription('Used on high density module to indiciate if DSAP is enabled in the pcam entry.')
alaQoSSlotPcamEnableSsap = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 38, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSSlotPcamEnableSsap.setStatus('current')
if mibBuilder.loadTexts: alaQoSSlotPcamEnableSsap.setDescription('Used on high density module to indiciate if SSAP is enabled in the pcam entry.')
alaQoSSlotPcamEnableEthertype = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 38, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSSlotPcamEnableEthertype.setStatus('current')
if mibBuilder.loadTexts: alaQoSSlotPcamEnableEthertype.setDescription('Used on high density module to indiciate if Ethertype is enabled in the pcam entry.')
alaQoSPortPdiTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 39), )
if mibBuilder.loadTexts: alaQoSPortPdiTable.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortPdiTable.setDescription('Table of QoS PortPdi definitions')
alaQoSPortPdiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 39, 1), ).setIndexNames((0, "ALCATEL-IND1-QOS-MIB", "alaQoSPortSlot"), (0, "ALCATEL-IND1-QOS-MIB", "alaQoSPortPort"), (0, "ALCATEL-IND1-QOS-MIB", "alaQoSPortPdiId"))
if mibBuilder.loadTexts: alaQoSPortPdiEntry.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortPdiEntry.setDescription('Definition of QoS PortPdi')
alaQoSPortPdiId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 39, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16)))
if mibBuilder.loadTexts: alaQoSPortPdiId.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortPdiId.setDescription('Used on high density module classification in the MAC. This is the index used in the PDI.')
alaQoSPortPdiPriorityType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 39, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSPortPdiPriorityType.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortPdiPriorityType.setDescription('Used on high density module classification in the MAC. This is the classification type on the port.')
alaQoSPortPdiPriorityP0 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 39, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSPortPdiPriorityP0.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortPdiPriorityP0.setDescription('Used on high density module classification in the MAC. This is the internal priority mapping for a P0 packet.')
alaQoSPortPdiPriorityP1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 39, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSPortPdiPriorityP1.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortPdiPriorityP1.setDescription('Used on high density module classification in the MAC. This is the internal priority mapping for a P1 packet.')
alaQoSPortPdiPriorityP2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 39, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSPortPdiPriorityP2.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortPdiPriorityP2.setDescription('Used on high density module classification in the MAC. This is the internal priority mapping for a P2 packet.')
alaQoSPortPdiPriorityP3 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 39, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSPortPdiPriorityP3.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortPdiPriorityP3.setDescription('Used on high density module classification in the MAC. This is the internal priority mapping for a P3 packet.')
alaQoSPortPdiPriorityP4 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 39, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSPortPdiPriorityP4.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortPdiPriorityP4.setDescription('Used on high density module classification in the MAC. This is the internal priority mapping for a P4 packet.')
alaQoSPortPdiPriorityP5 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 39, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSPortPdiPriorityP5.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortPdiPriorityP5.setDescription('Used on high density module classification in the MAC. This is the internal priority mapping for a P5 packet.')
alaQoSPortPdiPriorityP6 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 39, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSPortPdiPriorityP6.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortPdiPriorityP6.setDescription('Used on high density module classification in the MAC. This is the internal priority mapping for a P6 packet.')
alaQoSPortPdiPriorityP7 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 39, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSPortPdiPriorityP7.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortPdiPriorityP7.setDescription('Used on high density module classification in the MAC. This is the internal priority mapping for a P7 packet.')
alaQoSValidityPeriodTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 40), )
if mibBuilder.loadTexts: alaQoSValidityPeriodTable.setStatus('current')
if mibBuilder.loadTexts: alaQoSValidityPeriodTable.setDescription('Table of QoS ValidityPeriod definitions')
alaQoSValidityPeriodEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 40, 1), ).setIndexNames((0, "ALCATEL-IND1-QOS-MIB", "alaQoSValidityPeriodName"))
if mibBuilder.loadTexts: alaQoSValidityPeriodEntry.setStatus('current')
if mibBuilder.loadTexts: alaQoSValidityPeriodEntry.setDescription('Definition of QoS ValidityPeriod')
alaQoSValidityPeriodName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 40, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31)))
if mibBuilder.loadTexts: alaQoSValidityPeriodName.setStatus('current')
if mibBuilder.loadTexts: alaQoSValidityPeriodName.setDescription('Name of validity period')
alaQoSValidityPeriodSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 40, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ldap", 1), ("cli", 2), ("blt", 3), ("api", 4), ("imp", 5))).clone('cli')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSValidityPeriodSource.setStatus('current')
if mibBuilder.loadTexts: alaQoSValidityPeriodSource.setDescription('What entity created the validity period.')
alaQoSValidityPeriodDays = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 40, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSValidityPeriodDays.setStatus('current')
if mibBuilder.loadTexts: alaQoSValidityPeriodDays.setDescription('Bitfield for each day of the week this validity period is active. Monday is least significant, Sunday is most significant.')
alaQoSValidityPeriodDaysStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 40, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSValidityPeriodDaysStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSValidityPeriodDaysStatus.setDescription('Status field indicating whether the validity period has specific active days of the month.')
alaQoSValidityPeriodMonths = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 40, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSValidityPeriodMonths.setStatus('current')
if mibBuilder.loadTexts: alaQoSValidityPeriodMonths.setDescription('Bitfield for each month this validity period is active. January is least significant. Decemeber is most significant.')
alaQoSValidityPeriodMonthsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 40, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSValidityPeriodMonthsStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSValidityPeriodMonthsStatus.setDescription('Status field indicating whether the validity period has specific active days of the week.')
alaQoSValidityPeriodHour = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 40, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSValidityPeriodHour.setStatus('current')
if mibBuilder.loadTexts: alaQoSValidityPeriodHour.setDescription("Time of day this period becomes active. Format is 'hh:mm'")
alaQoSValidityPeriodHourStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 40, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSValidityPeriodHourStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSValidityPeriodHourStatus.setDescription('Status field indicating whether the validity period has specific active hours of the day.')
alaQoSValidityPeriodEndHour = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 40, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSValidityPeriodEndHour.setStatus('current')
if mibBuilder.loadTexts: alaQoSValidityPeriodEndHour.setDescription("Time of day this period becomes inactive. Format is 'hh:mm'")
alaQoSValidityPeriodInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 40, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 19))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSValidityPeriodInterval.setStatus('current')
if mibBuilder.loadTexts: alaQoSValidityPeriodInterval.setDescription("Date/time when the validity period begins. Format is 'mm/dd/yyyy hh:mm'")
alaQoSValidityPeriodIntervalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 40, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSValidityPeriodIntervalStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSValidityPeriodIntervalStatus.setDescription('Status field indicating whether the validity period has a specific active date-time interval.')
alaQoSValidityPeriodEndInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 40, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 19))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSValidityPeriodEndInterval.setStatus('current')
if mibBuilder.loadTexts: alaQoSValidityPeriodEndInterval.setDescription("Date/time when the validity period ends. Format is 'mm/dd/yyyy hh:mm'")
alaQoSValidityPeriodRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 40, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSValidityPeriodRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSValidityPeriodRowStatus.setDescription('Used to create/delete validity periods according to the RowStatus convention')
alaQoSAppliedValidityPeriodTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 41), )
if mibBuilder.loadTexts: alaQoSAppliedValidityPeriodTable.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedValidityPeriodTable.setDescription('Table of QoS AppliedValidityPeriod definitions')
alaQoSAppliedValidityPeriodEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 41, 1), ).setIndexNames((0, "ALCATEL-IND1-QOS-MIB", "alaQoSAppliedValidityPeriodName"))
if mibBuilder.loadTexts: alaQoSAppliedValidityPeriodEntry.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedValidityPeriodEntry.setDescription('Definition of QoS AppliedValidityPeriod')
alaQoSAppliedValidityPeriodName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 41, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31)))
if mibBuilder.loadTexts: alaQoSAppliedValidityPeriodName.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedValidityPeriodName.setDescription('Name of validity period')
alaQoSAppliedValidityPeriodSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 41, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ldap", 1), ("cli", 2), ("blt", 3), ("api", 4), ("imp", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedValidityPeriodSource.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedValidityPeriodSource.setDescription('What entity created the validity period.')
alaQoSAppliedValidityPeriodDays = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 41, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedValidityPeriodDays.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedValidityPeriodDays.setDescription('Bitfield for each day of the week this validity period is active. Monday is least significant, Sunday is most significant.')
alaQoSAppliedValidityPeriodDaysStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 41, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedValidityPeriodDaysStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedValidityPeriodDaysStatus.setDescription('Status field indicating whether the validity period has specific active days of the month.')
alaQoSAppliedValidityPeriodMonths = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 41, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedValidityPeriodMonths.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedValidityPeriodMonths.setDescription('Bitfield for each month this validity period is active. January is least significant. Decemeber is most significant.')
alaQoSAppliedValidityPeriodMonthsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 41, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedValidityPeriodMonthsStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedValidityPeriodMonthsStatus.setDescription('Status field indicating whether the validity period has specific active days of the week.')
alaQoSAppliedValidityPeriodHour = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 41, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedValidityPeriodHour.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedValidityPeriodHour.setDescription("Time of day this period becomes active. Format is 'hh:mm'")
alaQoSAppliedValidityPeriodHourStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 41, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedValidityPeriodHourStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedValidityPeriodHourStatus.setDescription('Status field indicating whether the validity period has specific active hours of the day.')
alaQoSAppliedValidityPeriodEndHour = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 41, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedValidityPeriodEndHour.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedValidityPeriodEndHour.setDescription("Time of day this period becomes inactive. Format is 'hh:mm'")
alaQoSAppliedValidityPeriodInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 41, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 19))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedValidityPeriodInterval.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedValidityPeriodInterval.setDescription("Date/time when the validity period begins. Format is 'mm/dd/yyyy hh:mm'")
alaQoSAppliedValidityPeriodIntervalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 41, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedValidityPeriodIntervalStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedValidityPeriodIntervalStatus.setDescription('Status field indicating whether the validity period has a specific active date-time interval.')
alaQoSAppliedValidityPeriodEndInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 41, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 19))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedValidityPeriodEndInterval.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedValidityPeriodEndInterval.setDescription("Date/time when the validity period ends. Format is 'mm/dd/yyyy hh:mm'")
alaQoSAppliedValidityPeriodRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 41, 1, 13), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedValidityPeriodRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedValidityPeriodRowStatus.setDescription('Used to create/delete validity periods according to the RowStatus convention')
alaQoSImportTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 42), )
if mibBuilder.loadTexts: alaQoSImportTable.setStatus('current')
if mibBuilder.loadTexts: alaQoSImportTable.setDescription('Table of QoS Import definitions')
alaQoSImportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 42, 1), ).setIndexNames((0, "ALCATEL-IND1-QOS-MIB", "alaQoSImportIndex"), (0, "ALCATEL-IND1-QOS-MIB", "alaQoSImportText"))
if mibBuilder.loadTexts: alaQoSImportEntry.setStatus('current')
if mibBuilder.loadTexts: alaQoSImportEntry.setDescription('Definition of QoS Import')
alaQoSImportIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 42, 1, 1), Integer32())
if mibBuilder.loadTexts: alaQoSImportIndex.setStatus('current')
if mibBuilder.loadTexts: alaQoSImportIndex.setDescription('Index of entry in import list')
alaQoSImportText = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 42, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63)))
if mibBuilder.loadTexts: alaQoSImportText.setStatus('current')
if mibBuilder.loadTexts: alaQoSImportText.setDescription('Text or filename to import')
alaQoSImportPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 42, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSImportPrecedence.setStatus('current')
if mibBuilder.loadTexts: alaQoSImportPrecedence.setDescription('Precedence to use for policies imported from file')
alaQoSImportPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 42, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSImportPrefix.setStatus('current')
if mibBuilder.loadTexts: alaQoSImportPrefix.setDescription('Prefix for policy names that are imported')
alaQoSImportSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 42, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 52))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSImportSlot.setStatus('current')
if mibBuilder.loadTexts: alaQoSImportSlot.setDescription('Slot on which to apply imported policy(s)')
alaQoSImportPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 42, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSImportPort.setStatus('current')
if mibBuilder.loadTexts: alaQoSImportPort.setDescription('Starting port on which to apply imported policy(s)')
alaQoSImportPortend = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 42, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSImportPortend.setStatus('current')
if mibBuilder.loadTexts: alaQoSImportPortend.setDescription('Ending port on which to apply imported policy(s)')
alaQoSImportPortgroup = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 42, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSImportPortgroup.setStatus('current')
if mibBuilder.loadTexts: alaQoSImportPortgroup.setDescription('Portgroup on which to apply imported policy(s)')
alaQoSImportRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 42, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSImportRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSImportRowStatus.setDescription('Used to create/delete imports according to the RowStatus convention')
alaQoSAppliedImportTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 43), )
if mibBuilder.loadTexts: alaQoSAppliedImportTable.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedImportTable.setDescription('Table of QoS AppliedImport definitions')
alaQoSAppliedImportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 43, 1), ).setIndexNames((0, "ALCATEL-IND1-QOS-MIB", "alaQoSAppliedImportIndex"), (0, "ALCATEL-IND1-QOS-MIB", "alaQoSAppliedImportText"))
if mibBuilder.loadTexts: alaQoSAppliedImportEntry.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedImportEntry.setDescription('Definition of QoS AppliedImport')
alaQoSAppliedImportIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 43, 1, 1), Integer32())
if mibBuilder.loadTexts: alaQoSAppliedImportIndex.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedImportIndex.setDescription('Index of entry in import list')
alaQoSAppliedImportText = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 43, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63)))
if mibBuilder.loadTexts: alaQoSAppliedImportText.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedImportText.setDescription('Text or filename to import')
alaQoSAppliedImportPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 43, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedImportPrecedence.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedImportPrecedence.setDescription('Precedence to use for policies imported from file')
alaQoSAppliedImportPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 43, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedImportPrefix.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedImportPrefix.setDescription('Prefix for policy names that are imported')
alaQoSAppliedImportSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 43, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedImportSlot.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedImportSlot.setDescription('Slot on which to apply imported policy(s)')
alaQoSAppliedImportPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 43, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedImportPort.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedImportPort.setDescription('Starting port on which to apply imported policy(s)')
alaQoSAppliedImportPortend = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 43, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedImportPortend.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedImportPortend.setDescription('Ending port on which to apply imported policy(s)')
alaQoSAppliedImportPortgroup = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 43, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedImportPortgroup.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedImportPortgroup.setDescription('Portgroup on which to apply imported policy(s)')
alaQoSAppliedImportRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 43, 1, 9), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedImportRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedImportRowStatus.setDescription('Used to create/delete imports according to the RowStatus convention')
alaQoSRuleGroupsTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 44), )
if mibBuilder.loadTexts: alaQoSRuleGroupsTable.setStatus('current')
if mibBuilder.loadTexts: alaQoSRuleGroupsTable.setDescription('Table of QoS RuleGroups definitions')
alaQoSRuleGroupsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 44, 1), ).setIndexNames((0, "ALCATEL-IND1-QOS-MIB", "alaQoSRuleGroupsName"))
if mibBuilder.loadTexts: alaQoSRuleGroupsEntry.setStatus('current')
if mibBuilder.loadTexts: alaQoSRuleGroupsEntry.setDescription('Definition of QoS RuleGroups')
alaQoSRuleGroupsName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 44, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31)))
if mibBuilder.loadTexts: alaQoSRuleGroupsName.setStatus('current')
if mibBuilder.loadTexts: alaQoSRuleGroupsName.setDescription('Name of rule group')
alaQoSRuleGroupsSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 44, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ldap", 1), ("cli", 2), ("blt", 3), ("api", 4), ("imp", 5))).clone('cli')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSRuleGroupsSource.setStatus('current')
if mibBuilder.loadTexts: alaQoSRuleGroupsSource.setDescription('What entity created the rule group.')
alaQoSRuleGroupsType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 44, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("default", 1), ("unp", 2), ("vrf", 3), ("ingress", 4), ("egress", 5), ("slb", 6))).clone('unp')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSRuleGroupsType.setStatus('current')
if mibBuilder.loadTexts: alaQoSRuleGroupsType.setDescription('Type of rule group.')
alaQoSRuleGroupsEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 44, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSRuleGroupsEnabled.setStatus('current')
if mibBuilder.loadTexts: alaQoSRuleGroupsEnabled.setDescription('Is this rule grop enabled or not')
alaQoSRuleGroupsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 44, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSRuleGroupsStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSRuleGroupsStatus.setDescription('Used to create/delete rule groups according to the RowStatus convention')
alaQoSAppliedRuleGroupsTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 45), )
if mibBuilder.loadTexts: alaQoSAppliedRuleGroupsTable.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedRuleGroupsTable.setDescription('Table of QoS AppliedRuleGroups definitions')
alaQoSAppliedRuleGroupsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 45, 1), ).setIndexNames((0, "ALCATEL-IND1-QOS-MIB", "alaQoSAppliedRuleGroupsName"))
if mibBuilder.loadTexts: alaQoSAppliedRuleGroupsEntry.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedRuleGroupsEntry.setDescription('Definition of QoS AppliedRuleGroups')
alaQoSAppliedRuleGroupsName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 45, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31)))
if mibBuilder.loadTexts: alaQoSAppliedRuleGroupsName.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedRuleGroupsName.setDescription('Name of rule group')
alaQoSAppliedRuleGroupsSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 45, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ldap", 1), ("cli", 2), ("blt", 3), ("api", 4), ("imp", 5))).clone('cli')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSAppliedRuleGroupsSource.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedRuleGroupsSource.setDescription('What entity created the service group.')
alaQoSAppliedRuleGroupsType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 45, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("defualt", 1), ("unp", 2), ("vrf", 3), ("ingress", 4), ("egress", 5), ("slb", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedRuleGroupsType.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedRuleGroupsType.setDescription('What entity created the rule group.')
alaQoSAppliedRuleGroupsEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 45, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSAppliedRuleGroupsEnabled.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedRuleGroupsEnabled.setDescription('Is this rule grop enabled or not')
alaQoSAppliedRuleGroupsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 45, 1, 5), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedRuleGroupsStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedRuleGroupsStatus.setDescription('Used to create/delete rule groups according to the RowStatus convention')
alaQoSRuleGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 46), )
if mibBuilder.loadTexts: alaQoSRuleGroupTable.setStatus('current')
if mibBuilder.loadTexts: alaQoSRuleGroupTable.setDescription('Table of QoS RuleGroup definitions')
alaQoSRuleGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 46, 1), ).setIndexNames((0, "ALCATEL-IND1-QOS-MIB", "alaQoSRuleGroupsName"), (0, "ALCATEL-IND1-QOS-MIB", "alaQoSRuleGroupRuleName"))
if mibBuilder.loadTexts: alaQoSRuleGroupEntry.setStatus('current')
if mibBuilder.loadTexts: alaQoSRuleGroupEntry.setDescription('Definition of QoS RuleGroup')
alaQoSRuleGroupRuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 46, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31)))
if mibBuilder.loadTexts: alaQoSRuleGroupRuleName.setStatus('current')
if mibBuilder.loadTexts: alaQoSRuleGroupRuleName.setDescription('Name of rule in rule group entry')
alaQoSRuleGroupMatches = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 46, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSRuleGroupMatches.setStatus('current')
if mibBuilder.loadTexts: alaQoSRuleGroupMatches.setDescription('Number of times this rule has been matched.')
alaQoSRuleGroupCountType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 46, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("packets", 1), ("bytes", 2))).clone('packets')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSRuleGroupCountType.setStatus('current')
if mibBuilder.loadTexts: alaQoSRuleGroupCountType.setDescription('Which rule statistics counters to update if not all are available')
alaQoSRuleGroupPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 46, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSRuleGroupPacketCount.setStatus('current')
if mibBuilder.loadTexts: alaQoSRuleGroupPacketCount.setDescription('Counter for packets patching this rule')
alaQoSRuleGroupByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 46, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSRuleGroupByteCount.setStatus('current')
if mibBuilder.loadTexts: alaQoSRuleGroupByteCount.setDescription('Counter for bytes matching this rule')
alaQoSRuleGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 46, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSRuleGroupStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSRuleGroupStatus.setDescription('Used to create/delete rule group entries according to the RowStatus convention')
alaQoSAppliedRuleGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 47), )
if mibBuilder.loadTexts: alaQoSAppliedRuleGroupTable.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedRuleGroupTable.setDescription('Table of QoS AppliedRuleGroup definitions')
alaQoSAppliedRuleGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 47, 1), ).setIndexNames((0, "ALCATEL-IND1-QOS-MIB", "alaQoSAppliedRuleGroupsName"), (0, "ALCATEL-IND1-QOS-MIB", "alaQoSAppliedRuleGroupRuleName"))
if mibBuilder.loadTexts: alaQoSAppliedRuleGroupEntry.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedRuleGroupEntry.setDescription('Definition of QoS AppliedRuleGroup')
alaQoSAppliedRuleGroupRuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 47, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31)))
if mibBuilder.loadTexts: alaQoSAppliedRuleGroupRuleName.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedRuleGroupRuleName.setDescription('Name of rule in rule group entry')
alaQoSAppliedRuleGroupMatches = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 47, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedRuleGroupMatches.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedRuleGroupMatches.setDescription('Number of times this rule has been matched.')
alaQoSAppliedRuleGroupCountType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 47, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("packets", 1), ("bytes", 2))).clone('packets')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSAppliedRuleGroupCountType.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedRuleGroupCountType.setDescription('Which rule statistics counters to update if not all are available')
alaQoSAppliedRuleGroupPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 47, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedRuleGroupPacketCount.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedRuleGroupPacketCount.setDescription('Counter for packets patching this rule')
alaQoSAppliedRuleGroupByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 47, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedRuleGroupByteCount.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedRuleGroupByteCount.setDescription('Counter for bytes matching this rule')
alaQoSAppliedRuleGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 47, 1, 6), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedRuleGroupStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedRuleGroupStatus.setDescription('Used to create/delete rule group entries according to the RowStatus convention')
alaQoSVlanGroupsTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 48), )
if mibBuilder.loadTexts: alaQoSVlanGroupsTable.setStatus('current')
if mibBuilder.loadTexts: alaQoSVlanGroupsTable.setDescription('Table of QoS Vlan Groups definitions')
alaQoSVlanGroupsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 48, 1), ).setIndexNames((0, "ALCATEL-IND1-QOS-MIB", "alaQoSVlanGroupsName"))
if mibBuilder.loadTexts: alaQoSVlanGroupsEntry.setStatus('current')
if mibBuilder.loadTexts: alaQoSVlanGroupsEntry.setDescription('Definition of QoS Vlan Groups')
alaQoSVlanGroupsName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 48, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31)))
if mibBuilder.loadTexts: alaQoSVlanGroupsName.setStatus('current')
if mibBuilder.loadTexts: alaQoSVlanGroupsName.setDescription('Name of Vlan group')
alaQoSVlanGroupsSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 48, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ldap", 1), ("cli", 2), ("blt", 3), ("api", 4), ("imp", 5))).clone('cli')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSVlanGroupsSource.setStatus('current')
if mibBuilder.loadTexts: alaQoSVlanGroupsSource.setDescription('What entity created the Vlan group.')
alaQoSVlanGroupsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 48, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSVlanGroupsStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSVlanGroupsStatus.setDescription('Used to create/delete Vlan groups according to the RowStatus convention')
alaQoSAppliedVlanGroupsTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 49), )
if mibBuilder.loadTexts: alaQoSAppliedVlanGroupsTable.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedVlanGroupsTable.setDescription('Table of QoS Applied Vlan Groups definitions')
alaQoSAppliedVlanGroupsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 49, 1), ).setIndexNames((0, "ALCATEL-IND1-QOS-MIB", "alaQoSAppliedVlanGroupsName"))
if mibBuilder.loadTexts: alaQoSAppliedVlanGroupsEntry.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedVlanGroupsEntry.setDescription('Definition of QoS Applied Vlan Groups')
alaQoSAppliedVlanGroupsName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 49, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31)))
if mibBuilder.loadTexts: alaQoSAppliedVlanGroupsName.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedVlanGroupsName.setDescription('Name of Applied Vlan group')
alaQoSAppliedVlanGroupsSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 49, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ldap", 1), ("cli", 2), ("blt", 3), ("api", 4), ("imp", 5))).clone('cli')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSAppliedVlanGroupsSource.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedVlanGroupsSource.setDescription('What entity created the Vlan group.')
alaQoSAppliedVlanGroupsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 49, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSAppliedVlanGroupsStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedVlanGroupsStatus.setDescription('Used to create/delete Vlan groups according to the RowStatus convention')
alaQoSVlanGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 50), )
if mibBuilder.loadTexts: alaQoSVlanGroupTable.setStatus('current')
if mibBuilder.loadTexts: alaQoSVlanGroupTable.setDescription('Table of QoS Vlan Group definitions')
alaQoSVlanGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 50, 1), ).setIndexNames((0, "ALCATEL-IND1-QOS-MIB", "alaQoSVlanGroupsName"), (0, "ALCATEL-IND1-QOS-MIB", "alaQoSVlanGroupVlan"), (0, "ALCATEL-IND1-QOS-MIB", "alaQoSVlanGroupVlanEnd"))
if mibBuilder.loadTexts: alaQoSVlanGroupEntry.setStatus('current')
if mibBuilder.loadTexts: alaQoSVlanGroupEntry.setDescription('Definition of QoS Vlan Group')
alaQoSVlanGroupVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 50, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: alaQoSVlanGroupVlan.setStatus('current')
if mibBuilder.loadTexts: alaQoSVlanGroupVlan.setDescription('Vlan range start for vlan group entry')
alaQoSVlanGroupVlanEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 50, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: alaQoSVlanGroupVlanEnd.setStatus('current')
if mibBuilder.loadTexts: alaQoSVlanGroupVlanEnd.setDescription('Vlan range end for vlan group entry')
alaQoSVlanGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 50, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSVlanGroupStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSVlanGroupStatus.setDescription('Used to create/delete vlan group entries according to the RowStatus convention')
alaQoSAppliedVlanGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 51), )
if mibBuilder.loadTexts: alaQoSAppliedVlanGroupTable.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedVlanGroupTable.setDescription('Table of QoS Applied Vlan Group definitions')
alaQoSAppliedVlanGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 51, 1), ).setIndexNames((0, "ALCATEL-IND1-QOS-MIB", "alaQoSAppliedVlanGroupsName"), (0, "ALCATEL-IND1-QOS-MIB", "alaQoSAppliedVlanGroupVlan"), (0, "ALCATEL-IND1-QOS-MIB", "alaQoSAppliedVlanGroupVlanEnd"))
if mibBuilder.loadTexts: alaQoSAppliedVlanGroupEntry.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedVlanGroupEntry.setDescription('Definition of QoS Applied Vlan Group')
alaQoSAppliedVlanGroupVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 51, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095)))
if mibBuilder.loadTexts: alaQoSAppliedVlanGroupVlan.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedVlanGroupVlan.setDescription('Vlan range start for vlan group entry')
alaQoSAppliedVlanGroupVlanEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 51, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095)))
if mibBuilder.loadTexts: alaQoSAppliedVlanGroupVlanEnd.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedVlanGroupVlanEnd.setDescription('Vlan range end for vlan group entry')
alaQoSAppliedVlanGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 51, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSAppliedVlanGroupStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedVlanGroupStatus.setDescription('Used to create/delete vlan group entries according to the RowStatus convention')
alaQoSHwLoopbackProfileTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 52), )
if mibBuilder.loadTexts: alaQoSHwLoopbackProfileTable.setStatus('current')
if mibBuilder.loadTexts: alaQoSHwLoopbackProfileTable.setDescription('Table of QoS Hw Loopback Profiles')
alaQoSHwLoopbackProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 52, 1), ).setIndexNames((0, "ALCATEL-IND1-QOS-MIB", "alaQoSHwLoopbackProfileName"))
if mibBuilder.loadTexts: alaQoSHwLoopbackProfileEntry.setStatus('current')
if mibBuilder.loadTexts: alaQoSHwLoopbackProfileEntry.setDescription('Definition of QoS Hw Loopback Profiles ')
alaQoSHwLoopbackProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 52, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31)))
if mibBuilder.loadTexts: alaQoSHwLoopbackProfileName.setStatus('current')
if mibBuilder.loadTexts: alaQoSHwLoopbackProfileName.setDescription('Name of Profile Name')
alaQoSHwLoopbackSourceMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 52, 1, 2), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSHwLoopbackSourceMac.setStatus('current')
if mibBuilder.loadTexts: alaQoSHwLoopbackSourceMac.setDescription('Source MAC address to use for Hardware Loopback profile configuration')
alaQoSHwLoopbackDestinationMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 52, 1, 3), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSHwLoopbackDestinationMac.setStatus('current')
if mibBuilder.loadTexts: alaQoSHwLoopbackDestinationMac.setDescription('Destination MAC address to use for Hardware Loopback profile configuration')
alaQoSHwLoopbackVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 52, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSHwLoopbackVlan.setStatus('current')
if mibBuilder.loadTexts: alaQoSHwLoopbackVlan.setDescription('Vlan used in Hardware Loopback Profile Config')
alaQoSHwLoopbackPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 52, 1, 5), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSHwLoopbackPort.setStatus('current')
if mibBuilder.loadTexts: alaQoSHwLoopbackPort.setDescription('Loopback Port ifindex used in Hardware Loopback Profile Config')
alaQoSHwLoopbackType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 52, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inward", 1), ("outward", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSHwLoopbackType.setStatus('current')
if mibBuilder.loadTexts: alaQoSHwLoopbackType.setDescription('The type of Hardware Profile Config, inward and outward')
alaQoSHwLoopbackProfileStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 52, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("config", 0), ("start", 1), ("stop", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSHwLoopbackProfileStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSHwLoopbackProfileStatus.setDescription('The status of the Hardware Profile Config')
alaQoSHwLoopbackProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 52, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSHwLoopbackProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSHwLoopbackProfileRowStatus.setDescription('Used to create/delete the Profile Config')
alaQoSMIBConformance = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 2))
if mibBuilder.loadTexts: alaQoSMIBConformance.setStatus('current')
if mibBuilder.loadTexts: alaQoSMIBConformance.setDescription('Branch for QoS Managed Conformance Information.')
alaQoSMIBGroups = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 2, 1))
if mibBuilder.loadTexts: alaQoSMIBGroups.setStatus('current')
if mibBuilder.loadTexts: alaQoSMIBGroups.setDescription('Branch for QoS Units of Conformance.')
alaQoSMIBCompliances = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 2, 2))
if mibBuilder.loadTexts: alaQoSMIBCompliances.setStatus('current')
if mibBuilder.loadTexts: alaQoSMIBCompliances.setDescription('Branch for QoS Compliance Statements.')
alaQoSMIBRuleObjects = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 2, 1, 1)).setObjects(("ALCATEL-IND1-QOS-MIB", "alaQoSRuleEnabled"), ("ALCATEL-IND1-QOS-MIB", "alaQoSRuleSource"), ("ALCATEL-IND1-QOS-MIB", "alaQoSRulePrecedence"), ("ALCATEL-IND1-QOS-MIB", "alaQoSRuleCondition"), ("ALCATEL-IND1-QOS-MIB", "alaQoSRuleAction"), ("ALCATEL-IND1-QOS-MIB", "alaQoSRuleReflexive"), ("ALCATEL-IND1-QOS-MIB", "alaQoSRuleSave"), ("ALCATEL-IND1-QOS-MIB", "alaQoSRuleLog"), ("ALCATEL-IND1-QOS-MIB", "alaQoSRuleMatches"), ("ALCATEL-IND1-QOS-MIB", "alaQoSRuleEnforced"), ("ALCATEL-IND1-QOS-MIB", "alaQoSRuleActive"), ("ALCATEL-IND1-QOS-MIB", "alaQoSRuleRowStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSRuleValidityPeriod"), ("ALCATEL-IND1-QOS-MIB", "alaQoSRuleValidityPeriodStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSRuleLogInterval"), ("ALCATEL-IND1-QOS-MIB", "alaQoSRuleCountType"), ("ALCATEL-IND1-QOS-MIB", "alaQoSRulePacketCount"), ("ALCATEL-IND1-QOS-MIB", "alaQoSRuleByteCount"), ("ALCATEL-IND1-QOS-MIB", "alaQoSRuleExcessPacketCount"), ("ALCATEL-IND1-QOS-MIB", "alaQoSRuleExcessByteCount"), ("ALCATEL-IND1-QOS-MIB", "alaQoSRuleType"), ("ALCATEL-IND1-QOS-MIB", "alaQoSRuleTrapEvents"), ("ALCATEL-IND1-QOS-MIB", "alaQoSRuleDefaultList"), ("ALCATEL-IND1-QOS-MIB", "alaQoSRuleGreenCount"), ("ALCATEL-IND1-QOS-MIB", "alaQoSRuleYellowCount"), ("ALCATEL-IND1-QOS-MIB", "alaQoSRuleRedCount"), ("ALCATEL-IND1-QOS-MIB", "alaQoSRuleNonGreenCount"), ("ALCATEL-IND1-QOS-MIB", "alaQoSRuleNonRedCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaQoSMIBRuleObjects = alaQoSMIBRuleObjects.setStatus('current')
if mibBuilder.loadTexts: alaQoSMIBRuleObjects.setDescription('Collections of objects providing information for Rules')
alaQoSMIBAppliedRuleObjects = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 2, 1, 2)).setObjects(("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedRuleEnabled"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedRuleSource"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedRulePrecedence"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedRuleCondition"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedRuleAction"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedRuleReflexive"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedRuleSave"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedRuleLog"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedRuleMatches"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedRuleEnforced"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedRuleActive"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedRuleRowStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedRuleValidityPeriod"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedRuleValidityPeriodStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedRuleLogInterval"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedRuleCountType"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedRulePacketCount"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedRuleByteCount"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedRuleExcessPacketCount"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedRuleExcessByteCount"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedRuleType"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedRuleTrapEvents"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedRuleDefaultList"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedRuleGreenCount"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedRuleYellowCount"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedRuleRedCount"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedRuleNonGreenCount"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedRuleNonRedCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaQoSMIBAppliedRuleObjects = alaQoSMIBAppliedRuleObjects.setStatus('current')
if mibBuilder.loadTexts: alaQoSMIBAppliedRuleObjects.setDescription('Collections of objects providing information for applied Rules')
alaQoSMIBConditionObjects = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 2, 1, 3)).setObjects(("ALCATEL-IND1-QOS-MIB", "alaQoSConditionSource"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionSourceSlot"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionSourceSlotStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionSourcePort"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionSourcePortGroup"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionSourcePortGroupStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionDestinationSlot"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionDestinationSlotStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionDestinationPort"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionDestinationPortGroup"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionDestinationPortGroupStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionSourceInterfaceType"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionSourceInterfaceTypeStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionDestinationInterfaceType"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionDestinationInterfaceTypeStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionSourceMacAddr"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionSourceMacAddrStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionSourceMacMask"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionSourceMacGroup"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionSourceMacGroupStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionDestinationMacAddr"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionDestinationMacAddrStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionDestinationMacMask"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionDestinationMacGroup"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionDestinationMacGroupStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionSourceVlan"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionSourceVlanStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionDestinationVlan"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionDestinationVlanStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSCondition8021p"), ("ALCATEL-IND1-QOS-MIB", "alaQoSCondition8021pStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionSourceIpAddr"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionSourceIpAddrStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionSourceIpMask"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionSourceNetworkGroup"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionSourceNetworkGroupStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionDestinationIpAddr"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionDestinationIpAddrStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionDestinationIpMask"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionDestinationNetworkGroup"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionDestinationNetworkGroupStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionMulticastIpAddr"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionMulticastIpAddrStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionMulticastIpMask"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionMulticastNetworkGroup"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionMulticastNetworkGroupStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionTos"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionTosStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionTosMask"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionDscp"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionDscpStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionDscpMask"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionIpProtocol"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionIpProtocolStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionSourceIpPort"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionSourceIpPortStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionDestinationIpPort"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionDestinationIpPortStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionService"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionServiceStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionServiceGroup"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionServiceGroupStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionIcmpType"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionIcmpTypeStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionIcmpCode"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionIcmpCodeStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionDlci"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionDlciStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionRowStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionSourcePortEnd"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionDestinationPortEnd"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionSourceIpPortEnd"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionDestinationIpPortEnd"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionSourceTcpPort"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionSourceTcpPortStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionSourceTcpPortEnd"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionDestinationTcpPort"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionDestinationTcpPortStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionDestinationTcpPortEnd"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionSourceUdpPort"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionSourceUdpPortStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionSourceUdpPortEnd"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionDestinationUdpPort"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionDestinationUdpPortStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionDestinationUdpPortEnd"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionEthertype"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionEthertypeStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionTcpFlags"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionTcpFlagsStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionTcpFlagsVal"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionTcpFlagsValStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionTcpFlagsMask"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionTcpFlagsMaskStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionTcpEstablished"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionSourceIpv6Addr"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionSourceIpv6AddrStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionSourceIpv6Mask"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionDestinationIpv6Addr"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionDestinationIpv6AddrStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionDestinationIpv6Mask"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionIpv6Traffic"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionIpv6NH"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionIpv6NHStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionIpv6FlowLabel"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionIpv6FlowLabelStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionMcastIpv6Addr"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionMcastIpv6AddrStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionMcastIpv6Mask"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionDscpEnd"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionInnerSourceVlan"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionInnerSourceVlanStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionInner8021p"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionInner8021pStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionVrfName"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionVrfNameStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSCondition8021pEnd"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionInner8021pEnd"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionSourceVlanGroup"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionSourceVlanGroupStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionInnerSourceVlanGroup"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionInnerSourceVlanGroupStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaQoSMIBConditionObjects = alaQoSMIBConditionObjects.setStatus('current')
if mibBuilder.loadTexts: alaQoSMIBConditionObjects.setDescription('Collections of objects providing information for Conditions')
alaQoSMIBAppliedConditionObjects = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 2, 1, 4)).setObjects(("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionSource"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionSourceSlot"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionSourceSlotStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionSourcePort"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionSourcePortGroup"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionSourcePortGroupStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionDestinationSlot"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionDestinationSlotStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionDestinationPort"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionDestinationPortGroup"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionDestinationPortGroupStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionSourceInterfaceType"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionSourceInterfaceTypeStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionDestinationInterfaceType"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionDestinationInterfaceTypeStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionSourceMacAddr"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionSourceMacAddrStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionSourceMacMask"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionSourceMacGroup"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionSourceMacGroupStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionDestinationMacAddr"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionDestinationMacAddrStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionDestinationMacMask"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionDestinationMacGroup"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionDestinationMacGroupStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionSourceVlan"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionSourceVlanStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionDestinationVlan"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionDestinationVlanStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedCondition8021p"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedCondition8021pStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionSourceIpAddr"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionSourceIpAddrStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionSourceIpMask"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionSourceNetworkGroup"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionSourceNetworkGroupStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionDestinationIpAddr"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionDestinationIpAddrStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionDestinationIpMask"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionDestinationNetworkGroup"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionDestinationNetworkGroupStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionMulticastIpAddr"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionMulticastIpAddrStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionMulticastIpMask"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionMulticastNetworkGroup"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionMulticastNetworkGroupStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionTos"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionTosStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionTosMask"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionDscp"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionDscpStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionDscpMask"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionIpProtocol"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionIpProtocolStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionSourceIpPort"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionSourceIpPortStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionDestinationIpPort"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionDestinationIpPortStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionService"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionServiceStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionServiceGroup"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionServiceGroupStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionIcmpType"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionIcmpTypeStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionIcmpCode"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionIcmpCodeStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionDlci"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionDlciStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionRowStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionSourcePortEnd"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionDestinationPortEnd"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionSourceIpPortEnd"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionDestinationIpPortEnd"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionSourceTcpPort"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionSourceTcpPortStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionSourceTcpPortEnd"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionDestinationTcpPort"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionDestinationTcpPortStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionDestinationTcpPortEnd"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionSourceUdpPort"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionSourceUdpPortStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionSourceUdpPortEnd"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionDestinationUdpPort"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionDestinationUdpPortStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionDestinationUdpPortEnd"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionEthertype"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionEthertypeStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionTcpFlags"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionTcpFlagsStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionTcpFlagsVal"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionTcpFlagsValStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionTcpFlagsMask"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionTcpFlagsMaskStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionTcpEstablished"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionSourceIpv6Addr"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionSourceIpv6AddrStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionSourceIpv6Mask"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionDestinationIpv6Addr"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionDestinationIpv6AddrStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionDestinationIpv6Mask"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionIpv6Traffic"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionIpv6NH"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionIpv6NHStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionIpv6FlowLabel"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionIpv6FlowLabelStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionMcastIpv6Addr"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionMcastIpv6AddrStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionMcastIpv6Mask"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionDscpEnd"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionInnerSourceVlan"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionInnerSourceVlanStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionInner8021p"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionInner8021pStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionVrfName"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionVrfNameStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedCondition8021pEnd"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionInner8021pEnd"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionSourceVlanGroup"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionSourceVlanGroupStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionInnerSourceVlanGroup"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionInnerSourceVlanGroupStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaQoSMIBAppliedConditionObjects = alaQoSMIBAppliedConditionObjects.setStatus('current')
if mibBuilder.loadTexts: alaQoSMIBAppliedConditionObjects.setDescription('Collections of objects providing information for applied Conditions')
alaQoSMIBServiceObjects = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 2, 1, 5)).setObjects(("ALCATEL-IND1-QOS-MIB", "alaQoSServiceSource"), ("ALCATEL-IND1-QOS-MIB", "alaQoSServiceProtocol"), ("ALCATEL-IND1-QOS-MIB", "alaQoSServiceSourceIpPort"), ("ALCATEL-IND1-QOS-MIB", "alaQoSServiceSourceIpPortStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSServiceDestinationIpPort"), ("ALCATEL-IND1-QOS-MIB", "alaQoSServiceDestinationIpPortStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSServiceRowStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSServiceSourceIpPortEnd"), ("ALCATEL-IND1-QOS-MIB", "alaQoSServiceDestinationIpPortEnd"), ("ALCATEL-IND1-QOS-MIB", "alaQoSServiceSourceTcpPort"), ("ALCATEL-IND1-QOS-MIB", "alaQoSServiceSourceTcpPortStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSServiceSourceTcpPortEnd"), ("ALCATEL-IND1-QOS-MIB", "alaQoSServiceDestinationTcpPort"), ("ALCATEL-IND1-QOS-MIB", "alaQoSServiceDestinationTcpPortStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSServiceDestinationTcpPortEnd"), ("ALCATEL-IND1-QOS-MIB", "alaQoSServiceSourceUdpPort"), ("ALCATEL-IND1-QOS-MIB", "alaQoSServiceSourceUdpPortStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSServiceSourceUdpPortEnd"), ("ALCATEL-IND1-QOS-MIB", "alaQoSServiceDestinationUdpPort"), ("ALCATEL-IND1-QOS-MIB", "alaQoSServiceDestinationUdpPortStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSServiceDestinationUdpPortEnd"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaQoSMIBServiceObjects = alaQoSMIBServiceObjects.setStatus('current')
if mibBuilder.loadTexts: alaQoSMIBServiceObjects.setDescription('Collections of objects providing information for Services')
alaQoSMIBAppliedServiceObjects = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 2, 1, 6)).setObjects(("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedServiceSource"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedServiceProtocol"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedServiceSourceIpPort"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedServiceSourceIpPortStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedServiceDestinationIpPort"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedServiceDestinationIpPortStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedServiceRowStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedServiceSourceIpPortEnd"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedServiceDestinationIpPortEnd"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedServiceSourceTcpPort"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedServiceSourceTcpPortStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedServiceSourceTcpPortEnd"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedServiceDestinationTcpPort"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedServiceDestinationTcpPortStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedServiceDestinationTcpPortEnd"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedServiceSourceUdpPort"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedServiceSourceUdpPortStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedServiceSourceUdpPortEnd"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedServiceDestinationUdpPort"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedServiceDestinationUdpPortStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedServiceDestinationUdpPortEnd"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaQoSMIBAppliedServiceObjects = alaQoSMIBAppliedServiceObjects.setStatus('current')
if mibBuilder.loadTexts: alaQoSMIBAppliedServiceObjects.setDescription('Collections of objects providing information for applied Services')
alaQoSMIBServiceGroupsObjects = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 2, 1, 7)).setObjects(("ALCATEL-IND1-QOS-MIB", "alaQoSServiceGroupsSource"), ("ALCATEL-IND1-QOS-MIB", "alaQoSServiceGroupsStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaQoSMIBServiceGroupsObjects = alaQoSMIBServiceGroupsObjects.setStatus('current')
if mibBuilder.loadTexts: alaQoSMIBServiceGroupsObjects.setDescription('Collections of objects providing information for ServiceGroupss')
alaQoSMIBAppliedServiceGroupsObjects = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 2, 1, 8)).setObjects(("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedServiceGroupsSource"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedServiceGroupsStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaQoSMIBAppliedServiceGroupsObjects = alaQoSMIBAppliedServiceGroupsObjects.setStatus('current')
if mibBuilder.loadTexts: alaQoSMIBAppliedServiceGroupsObjects.setDescription('Collections of objects providing information for applied ServiceGroupss')
alaQoSMIBServiceGroupObjects = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 2, 1, 9)).setObjects(("ALCATEL-IND1-QOS-MIB", "alaQoSServiceGroupStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaQoSMIBServiceGroupObjects = alaQoSMIBServiceGroupObjects.setStatus('current')
if mibBuilder.loadTexts: alaQoSMIBServiceGroupObjects.setDescription('Collections of objects providing information for ServiceGroups')
alaQoSMIBAppliedServiceGroupObjects = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 2, 1, 10)).setObjects(("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedServiceGroupStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaQoSMIBAppliedServiceGroupObjects = alaQoSMIBAppliedServiceGroupObjects.setStatus('current')
if mibBuilder.loadTexts: alaQoSMIBAppliedServiceGroupObjects.setDescription('Collections of objects providing information for applied ServiceGroups')
alaQoSMIBNetworkGroupsObjects = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 2, 1, 11)).setObjects(("ALCATEL-IND1-QOS-MIB", "alaQoSNetworkGroupsSource"), ("ALCATEL-IND1-QOS-MIB", "alaQoSNetworkGroupsStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaQoSMIBNetworkGroupsObjects = alaQoSMIBNetworkGroupsObjects.setStatus('current')
if mibBuilder.loadTexts: alaQoSMIBNetworkGroupsObjects.setDescription('Collections of objects providing information for NetworkGroupss')
alaQoSMIBAppliedNetworkGroupsObjects = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 2, 1, 12)).setObjects(("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedNetworkGroupsSource"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedNetworkGroupsStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaQoSMIBAppliedNetworkGroupsObjects = alaQoSMIBAppliedNetworkGroupsObjects.setStatus('current')
if mibBuilder.loadTexts: alaQoSMIBAppliedNetworkGroupsObjects.setDescription('Collections of objects providing information for applied NetworkGroupss')
alaQoSMIBNetworkGroupObjects = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 2, 1, 13)).setObjects(("ALCATEL-IND1-QOS-MIB", "alaQoSNetworkGroupStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaQoSMIBNetworkGroupObjects = alaQoSMIBNetworkGroupObjects.setStatus('current')
if mibBuilder.loadTexts: alaQoSMIBNetworkGroupObjects.setDescription('Collections of objects providing information for NetworkGroups')
alaQoSMIBAppliedNetworkGroupObjects = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 2, 1, 14)).setObjects(("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedNetworkGroupStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaQoSMIBAppliedNetworkGroupObjects = alaQoSMIBAppliedNetworkGroupObjects.setStatus('current')
if mibBuilder.loadTexts: alaQoSMIBAppliedNetworkGroupObjects.setDescription('Collections of objects providing information for applied NetworkGroups')
alaQoSMIBMACGroupsObjects = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 2, 1, 15)).setObjects(("ALCATEL-IND1-QOS-MIB", "alaQoSMACGroupsSource"), ("ALCATEL-IND1-QOS-MIB", "alaQoSMACGroupsStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaQoSMIBMACGroupsObjects = alaQoSMIBMACGroupsObjects.setStatus('current')
if mibBuilder.loadTexts: alaQoSMIBMACGroupsObjects.setDescription('Collections of objects providing information for MACGroupss')
alaQoSMIBAppliedMACGroupsObjects = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 2, 1, 16)).setObjects(("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedMACGroupsSource"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedMACGroupsStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaQoSMIBAppliedMACGroupsObjects = alaQoSMIBAppliedMACGroupsObjects.setStatus('current')
if mibBuilder.loadTexts: alaQoSMIBAppliedMACGroupsObjects.setDescription('Collections of objects providing information for applied MACGroupss')
alaQoSMIBMACGroupObjects = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 2, 1, 17)).setObjects(("ALCATEL-IND1-QOS-MIB", "alaQoSMACGroupStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaQoSMIBMACGroupObjects = alaQoSMIBMACGroupObjects.setStatus('current')
if mibBuilder.loadTexts: alaQoSMIBMACGroupObjects.setDescription('Collections of objects providing information for MACGroups')
alaQoSMIBAppliedMACGroupObjects = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 2, 1, 18)).setObjects(("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedMACGroupStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaQoSMIBAppliedMACGroupObjects = alaQoSMIBAppliedMACGroupObjects.setStatus('current')
if mibBuilder.loadTexts: alaQoSMIBAppliedMACGroupObjects.setDescription('Collections of objects providing information for applied MACGroups')
alaQoSMIBPortGroupsObjects = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 2, 1, 19)).setObjects(("ALCATEL-IND1-QOS-MIB", "alaQoSPortGroupsSource"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortGroupsStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaQoSMIBPortGroupsObjects = alaQoSMIBPortGroupsObjects.setStatus('current')
if mibBuilder.loadTexts: alaQoSMIBPortGroupsObjects.setDescription('Collections of objects providing information for PortGroupss')
alaQoSMIBAppliedPortGroupsObjects = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 2, 1, 20)).setObjects(("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedPortGroupsSource"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedPortGroupsStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaQoSMIBAppliedPortGroupsObjects = alaQoSMIBAppliedPortGroupsObjects.setStatus('current')
if mibBuilder.loadTexts: alaQoSMIBAppliedPortGroupsObjects.setDescription('Collections of objects providing information for applied PortGroupss')
alaQoSMIBPortGroupObjects = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 2, 1, 21)).setObjects(("ALCATEL-IND1-QOS-MIB", "alaQoSPortGroupStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaQoSMIBPortGroupObjects = alaQoSMIBPortGroupObjects.setStatus('current')
if mibBuilder.loadTexts: alaQoSMIBPortGroupObjects.setDescription('Collections of objects providing information for PortGroups')
alaQoSMIBAppliedPortGroupObjects = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 2, 1, 22)).setObjects(("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedPortGroupStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaQoSMIBAppliedPortGroupObjects = alaQoSMIBAppliedPortGroupObjects.setStatus('current')
if mibBuilder.loadTexts: alaQoSMIBAppliedPortGroupObjects.setDescription('Collections of objects providing information for applied PortGroups')
alaQoSMIBMapGroupsObjects = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 2, 1, 23)).setObjects(("ALCATEL-IND1-QOS-MIB", "alaQoSMapGroupsSource"), ("ALCATEL-IND1-QOS-MIB", "alaQoSMapGroupsStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaQoSMIBMapGroupsObjects = alaQoSMIBMapGroupsObjects.setStatus('current')
if mibBuilder.loadTexts: alaQoSMIBMapGroupsObjects.setDescription('Collections of objects providing information for MapGroupss')
alaQoSMIBAppliedMapGroupsObjects = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 2, 1, 24)).setObjects(("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedMapGroupsSource"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedMapGroupsStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaQoSMIBAppliedMapGroupsObjects = alaQoSMIBAppliedMapGroupsObjects.setStatus('current')
if mibBuilder.loadTexts: alaQoSMIBAppliedMapGroupsObjects.setDescription('Collections of objects providing information for applied MapGroupss')
alaQoSMIBMapGroupObjects = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 2, 1, 25)).setObjects(("ALCATEL-IND1-QOS-MIB", "alaQoSMapGroupStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaQoSMIBMapGroupObjects = alaQoSMIBMapGroupObjects.setStatus('current')
if mibBuilder.loadTexts: alaQoSMIBMapGroupObjects.setDescription('Collections of objects providing information for MapGroups')
alaQoSMIBAppliedMapGroupObjects = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 2, 1, 26)).setObjects(("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedMapGroupStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaQoSMIBAppliedMapGroupObjects = alaQoSMIBAppliedMapGroupObjects.setStatus('current')
if mibBuilder.loadTexts: alaQoSMIBAppliedMapGroupObjects.setDescription('Collections of objects providing information for applied MapGroups')
alaQoSMIBActionObjects = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 2, 1, 27)).setObjects(("ALCATEL-IND1-QOS-MIB", "alaQoSActionSource"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionDisposition"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionDropAlgorithm"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionWredMaximumThreshold"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionWredMaximumThresholdStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionWredMinimumThreshold"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionWredMinimumThresholdStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionWredMaximumProbability"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionWredMaximumProbabilityStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionMinimumBandwidth"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionMinimumBandwidthStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionMaximumBandwidth"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionMaximumBandwidthStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionPeakBandwidth"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionPeakBandwidthStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionPriority"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionPriorityStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionShared"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionJitter"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionJitterStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionLatency"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionLatencyStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionMaximumDepth"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionMaximumDepthStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionMaximumBuffers"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionMaximumBuffersStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAction8021p"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAction8021pStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionTos"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionTosStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionDscp"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionDscpStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionMapFrom"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionMapTo"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionMapGroup"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionMapGroupStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionSourceRewriteIpAddr"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionSourceRewriteIpAddrStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionSourceRewriteIpMask"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionSourceRewriteNetworkGroup"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionSourceRewriteNetworkGroupStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionDestinationRewriteIpAddr"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionDestinationRewriteIpAddrStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionDestinationRewriteIpMask"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionDestinationRewriteNetworkGroup"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionDestinationRewriteNetworkGroupStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionLoadBalanceGroup"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionLoadBalanceGroupStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionPermanentGatewayIpAddr"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionPermanentGatewayIpAddrStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionAlternateGatewayIpAddr"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionAlternateGatewayIpAddrStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionRowStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionMinimumDepth"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionMinimumDepthStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionVPNAccess"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionNocache"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionPortdisable"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionRedirectSlot"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionRedirectSlotStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionRedirectPort"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionRedirectAgg"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionRedirectAggStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionMirrorSlot"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionMirrorPort"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionMirrorMode"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionMirrorModeStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionCIR"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionCIRStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionCBS"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionCBSStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionPIR"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionPIRStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionPBS"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionPBSStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionCounterColor"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaQoSMIBActionObjects = alaQoSMIBActionObjects.setStatus('current')
if mibBuilder.loadTexts: alaQoSMIBActionObjects.setDescription('Collections of objects providing information for Actions')
alaQoSMIBAppliedActionObjects = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 2, 1, 28)).setObjects(("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionSource"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionDisposition"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionDropAlgorithm"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionWredMaximumThreshold"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionWredMaximumThresholdStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionWredMinimumThreshold"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionWredMinimumThresholdStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionWredMaximumProbability"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionWredMaximumProbabilityStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionMinimumBandwidth"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionMinimumBandwidthStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionMaximumBandwidth"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionMaximumBandwidthStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionPeakBandwidth"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionPeakBandwidthStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionPriority"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionPriorityStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionShared"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionJitter"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionJitterStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionLatency"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionLatencyStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionMaximumDepth"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionMaximumDepthStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionMaximumBuffers"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionMaximumBuffersStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedAction8021p"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedAction8021pStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionTos"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionTosStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionDscp"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionDscpStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionMapFrom"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionMapTo"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionMapGroup"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionMapGroupStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionSourceRewriteIpAddr"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionSourceRewriteIpAddrStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionSourceRewriteIpMask"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionSourceRewriteNetworkGroup"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionSourceRewriteNetworkGroupStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionDestinationRewriteIpAddr"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionDestinationRewriteIpAddrStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionDestinationRewriteIpMask"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionDestinationRewriteNetworkGroup"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionDestinationRewriteNetworkGroupStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionLoadBalanceGroup"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionLoadBalanceGroupStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionPermanentGatewayIpAddr"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionPermanentGatewayIpAddrStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionAlternateGatewayIpAddr"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionAlternateGatewayIpAddrStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionRowStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionMinimumDepth"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionMinimumDepthStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionVPNAccess"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionNocache"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionPortdisable"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionRedirectSlot"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionRedirectSlotStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionRedirectPort"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionRedirectAgg"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionRedirectAggStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionMirrorSlot"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionMirrorPort"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionMirrorMode"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionMirrorModeStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionCIR"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionCIRStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionCBS"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionCBSStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionPIR"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionPIRStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionPBS"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionPBSStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionCounterColor"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaQoSMIBAppliedActionObjects = alaQoSMIBAppliedActionObjects.setStatus('current')
if mibBuilder.loadTexts: alaQoSMIBAppliedActionObjects.setDescription('Collections of objects providing information for applied Actions')
alaQoSMIBPortObjects = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 2, 1, 29)).setObjects(("ALCATEL-IND1-QOS-MIB", "alaQoSPortEnabled"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortAppliedEnabled"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortInterfaceType"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortTrusted"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortDefault8021p"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortDefaultDSCP"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortMaximumReservedBandwidth"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortMaximumReservedBandwidthStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortAppliedMaximumReservedBandwidth"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortAppliedMaximumReservedBandwidthStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortMaximumSignalledBandwidth"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortMaximumSignalledBandwidthStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortAppliedMaximumSignalledBandwidth"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortAppliedMaximumSignalledBandwidthStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortDefaultQueues"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortAppliedDefaultQueues"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortMaximumDefaultBandwidth"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortMaximumDefaultBandwidthStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortAppliedMaximumDefaultBandwidth"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortAppliedMaximumDefaultBandwidthStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortMaximumDefaultDepth"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortMaximumDefaultDepthStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortAppliedMaximumDefaultDepth"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortAppliedMaximumDefaultDepthStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortMaximumDefaultBuffers"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortMaximumDefaultBuffersStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortAppliedMaximumDefaultBuffers"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortAppliedMaximumDefaultBuffersStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortReset"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortPhysicalBandwidth"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortReservedBandwidth"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortSignalledBandwidth"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortCurrentBandwidth"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortDefaultQidLow"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortDefaultQidMedium"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortDefaultQidHigh"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortDefaultQidUrgent"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortFloodQid"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortQueues"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortQueuesCreated"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortQueuesFailed"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortQueuesPreempted"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortRowStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortFirPrio0EnqBytes"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortFirPrio0DeqBytes"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortFirPrio0EnqPkts"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortFirPrio0DeqPkts"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortFirPrio0QidDiscardPkts"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortFirPrio0WredDiscardPkts"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortFirPrio0OverflowDiscardPkts"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortFirPrio1EnqBytes"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortFirPrio1DeqBytes"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortFirPrio1EnqPkts"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortFirPrio1DeqPkts"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortFirPrio1QidDiscardPkts"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortFirPrio1WredDiscardPkts"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortFirPrio1OverflowDiscardPkts"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortFirPrio2EnqBytes"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortFirPrio2DeqBytes"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortFirPrio2EnqPkts"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortFirPrio2DeqPkts"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortFirPrio2QidDiscardPkts"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortFirPrio2WredDiscardPkts"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortFirPrio2OverflowDiscardPkts"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortFirPrio3EnqBytes"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortFirPrio3DeqBytes"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortFirPrio3EnqPkts"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortFirPrio3DeqPkts"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortFirPrio3QidDiscardPkts"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortFirPrio3WredDiscardPkts"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortFirPrio3OverflowDiscardPkts"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortDefaultClassification"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortLowPriorityWeight"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortMediumPriorityWeight"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortHighPriorityWeight"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortUrgentPriorityWeight"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortMaximumBandwidth"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortMaximumBandwidthStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortEnqueuingThresholdP0Lower"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortEnqueuingThresholdP0Upper"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortEnqueuingThresholdP1Lower"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortEnqueuingThresholdP1Upper"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortEnqueuingThresholdP2Lower"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortEnqueuingThresholdP2Upper"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortEnqueuingThresholdP3Lower"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortEnqueuingThresholdP3Upper"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortEnqueuingThresholdStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortServicingMode"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortHighDensity"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortFreeFFPRules"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortUsedFFPRules"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortFreeFFPMasks"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortUsedFFPMasks"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortSpoofedCount"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortNonSpoofedCount"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortQ4PriorityWeight"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortQ5PriorityWeight"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortQ6PriorityWeight"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortQ7PriorityWeight"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortCOS0MaximumBandwidth"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortCOS0MaximumBandwidthStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortCOS1MaximumBandwidth"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortCOS1MaximumBandwidthStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortCOS2MaximumBandwidth"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortCOS2MaximumBandwidthStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortCOS3MaximumBandwidth"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortCOS3MaximumBandwidthStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortCOS4MaximumBandwidth"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortCOS4MaximumBandwidthStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortCOS5MaximumBandwidth"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortCOS5MaximumBandwidthStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortCOS6MaximumBandwidth"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortCOS6MaximumBandwidthStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortCOS7MaximumBandwidth"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortCOS7MaximumBandwidthStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortCOS0MinimumBandwidth"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortCOS0MinimumBandwidthStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortCOS1MinimumBandwidth"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortCOS1MinimumBandwidthStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortCOS2MinimumBandwidth"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortCOS2MinimumBandwidthStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortCOS3MinimumBandwidth"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortCOS3MinimumBandwidthStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortCOS4MinimumBandwidth"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortCOS4MinimumBandwidthStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortCOS5MinimumBandwidth"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortCOS5MinimumBandwidthStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortCOS6MinimumBandwidth"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortCOS6MinimumBandwidthStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortCOS7MinimumBandwidth"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortCOS7MinimumBandwidthStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortMaximumIngBandwidth"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortMaximumIngBandwidthStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortDEIMarking"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortMonitor"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortDEIMapping"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaQoSMIBPortObjects = alaQoSMIBPortObjects.setStatus('current')
if mibBuilder.loadTexts: alaQoSMIBPortObjects.setDescription('Collections of objects providing information for Ports')
alaQoSMIBConfigObjects = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 2, 1, 30)).setObjects(("ALCATEL-IND1-QOS-MIB", "alaQoSConfigEnabled"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConfigDefaultQueues"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConfigAppliedDefaultQueues"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConfigTrustPorts"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConfigFlowTimeout"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConfigAppliedFlowTimeout"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConfigFragmentTimeout"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConfigAppliedFragmentTimeout"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConfigReflexiveTimeout"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConfigAppliedReflfexiveTimeout"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConfigNatTimeout"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConfigAppliedNatTimeout"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConfigClassifyl3Bridged"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConfigAppliedClassifyl3Bridged"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConfigClassifyFragments"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConfigAppliedClassifyFragments"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConfigDefaultBridgedDisposition"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConfigAppliedDefaultBridgedDisposition"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConfigDefaultRoutedDisposition"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConfigAppliedDefaultRoutedDisposition"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConfigDefaultMulticastDisposition"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConfigAppliedDefaultMulticastDisposition"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConfigStatsInterval"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConfigLogLines"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConfigLogLevel"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConfigLogConsole"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConfigForwardLog"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConfigClearLog"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConfigApply"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConfigRevert"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConfigReset"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConfigStatsReset"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConfigFlush"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConfigDebug"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConfigServicingMode"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConfigLowPriorityWeight"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConfigMediumPriorityWeight"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConfigHighPriorityWeight"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConfigUrgentPriorityWeight"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConfigQ4PriorityWeight"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConfigQ5PriorityWeight"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConfigQ6PriorityWeight"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConfigQ7PriorityWeight"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConfigUserportFilter"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConfigAppliedUserportFilter"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConfigUserportShutdown"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConfigAppliedUserportShutdown"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConfigAutoNMS"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConfigAutoPhones"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConfigQMPage"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConfigQMMACGroup"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConfigQMPath"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConfigDEIMapping"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConfigDEIMarking"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConfigStatsResetEgress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaQoSMIBConfigObjects = alaQoSMIBConfigObjects.setStatus('current')
if mibBuilder.loadTexts: alaQoSMIBConfigObjects.setDescription('Collections of objects providing information for Configs')
alaQoSMIBStatsObjects = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 2, 1, 31)).setObjects(("ALCATEL-IND1-QOS-MIB", "alaQoSStatsL2Events"), ("ALCATEL-IND1-QOS-MIB", "alaQoSStatsL2Matches"), ("ALCATEL-IND1-QOS-MIB", "alaQoSStatsL2Drops"), ("ALCATEL-IND1-QOS-MIB", "alaQoSStatsL3IngressEvents"), ("ALCATEL-IND1-QOS-MIB", "alaQoSStatsL3IngressMatches"), ("ALCATEL-IND1-QOS-MIB", "alaQoSStatsL3IngressDrops"), ("ALCATEL-IND1-QOS-MIB", "alaQoSStatsL3EgressEvents"), ("ALCATEL-IND1-QOS-MIB", "alaQoSStatsL3EgressMatches"), ("ALCATEL-IND1-QOS-MIB", "alaQoSStatsL3EgressDrops"), ("ALCATEL-IND1-QOS-MIB", "alaQoSStatsMulticastEvents"), ("ALCATEL-IND1-QOS-MIB", "alaQoSStatsMulticastMatches"), ("ALCATEL-IND1-QOS-MIB", "alaQoSStatsMulticastDrops"), ("ALCATEL-IND1-QOS-MIB", "alaQoSStatsFragments"), ("ALCATEL-IND1-QOS-MIB", "alaQoSStatsBadFragments"), ("ALCATEL-IND1-QOS-MIB", "alaQoSStatsUnknownFragments"), ("ALCATEL-IND1-QOS-MIB", "alaQoSStatsReflexiveFlows"), ("ALCATEL-IND1-QOS-MIB", "alaQoSStatsReflexiveCorrections"), ("ALCATEL-IND1-QOS-MIB", "alaQoSStatsLoadBalanceFlows"), ("ALCATEL-IND1-QOS-MIB", "alaQoSStatsClassifierMaxNodes"), ("ALCATEL-IND1-QOS-MIB", "alaQoSStatsClassifierMaxDepth"), ("ALCATEL-IND1-QOS-MIB", "alaQoSStatsFlowLookups"), ("ALCATEL-IND1-QOS-MIB", "alaQoSStatsFlowHits"), ("ALCATEL-IND1-QOS-MIB", "alaQoSStatsSentNIMessages"), ("ALCATEL-IND1-QOS-MIB", "alaQoSStatsReceivedNIMessages"), ("ALCATEL-IND1-QOS-MIB", "alaQoSStatsFailedNIMessages"), ("ALCATEL-IND1-QOS-MIB", "alaQoSStatsSpoofedEvents"), ("ALCATEL-IND1-QOS-MIB", "alaQoSStatsNonSpoofedEvents"), ("ALCATEL-IND1-QOS-MIB", "alaQoSStatsDropServicesEvents"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaQoSMIBStatsObjects = alaQoSMIBStatsObjects.setStatus('current')
if mibBuilder.loadTexts: alaQoSMIBStatsObjects.setDescription('Collections of objects providing information for Statss')
alaQoSMIBQueueObjects = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 2, 1, 32)).setObjects(("ALCATEL-IND1-QOS-MIB", "alaQoSQueueSlot"), ("ALCATEL-IND1-QOS-MIB", "alaQoSQueuePort"), ("ALCATEL-IND1-QOS-MIB", "alaQoSQueuePortId"), ("ALCATEL-IND1-QOS-MIB", "alaQoSQueueType"), ("ALCATEL-IND1-QOS-MIB", "alaQoSQueuePriority"), ("ALCATEL-IND1-QOS-MIB", "alaQoSQueueMinimumBandwidth"), ("ALCATEL-IND1-QOS-MIB", "alaQoSQueueMaximumBandwidth"), ("ALCATEL-IND1-QOS-MIB", "alaQoSQueueAverageBandwidth"), ("ALCATEL-IND1-QOS-MIB", "alaQoSQueueMinimumDepth"), ("ALCATEL-IND1-QOS-MIB", "alaQoSQueueMaximumDepth"), ("ALCATEL-IND1-QOS-MIB", "alaQoSQueueMaximumBuffers"), ("ALCATEL-IND1-QOS-MIB", "alaQoSQueue8021p"), ("ALCATEL-IND1-QOS-MIB", "alaQoSQueuePacketsSent"), ("ALCATEL-IND1-QOS-MIB", "alaQoSQueuePacketsDropped"), ("ALCATEL-IND1-QOS-MIB", "alaQoSQueueMaxLength"), ("ALCATEL-IND1-QOS-MIB", "alaQoSQueueAverageLength"), ("ALCATEL-IND1-QOS-MIB", "alaQoSQueueCurrentLength"), ("ALCATEL-IND1-QOS-MIB", "alaQoSQueueAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaQoSMIBQueueObjects = alaQoSMIBQueueObjects.setStatus('current')
if mibBuilder.loadTexts: alaQoSMIBQueueObjects.setDescription('Collections of objects providing information for Queues')
alaQoSMIBSlotObjects = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 2, 1, 33)).setObjects(("ALCATEL-IND1-QOS-MIB", "alaQoSSlotType"), ("ALCATEL-IND1-QOS-MIB", "alaQoSSlotMaxBuffers"), ("ALCATEL-IND1-QOS-MIB", "alaQoSSlotFreeBuffers1"), ("ALCATEL-IND1-QOS-MIB", "alaQoSSlotFreeBuffers2"), ("ALCATEL-IND1-QOS-MIB", "alaQoSSlotThreshold1Low"), ("ALCATEL-IND1-QOS-MIB", "alaQoSSlotThreshold1Medium"), ("ALCATEL-IND1-QOS-MIB", "alaQoSSlotThreshold1High"), ("ALCATEL-IND1-QOS-MIB", "alaQoSSlotThreshold1Urgent"), ("ALCATEL-IND1-QOS-MIB", "alaQoSSlotThreshold2Low"), ("ALCATEL-IND1-QOS-MIB", "alaQoSSlotThreshold2Medium"), ("ALCATEL-IND1-QOS-MIB", "alaQoSSlotThreshold2High"), ("ALCATEL-IND1-QOS-MIB", "alaQoSSlotThreshold2Urgent"), ("ALCATEL-IND1-QOS-MIB", "alaQoSSlotBuffersDenied"), ("ALCATEL-IND1-QOS-MIB", "alaQoSSlotBuffersDeniedAverage"), ("ALCATEL-IND1-QOS-MIB", "alaQoSSlotBuffersDropped"), ("ALCATEL-IND1-QOS-MIB", "alaQoSSlotBuffersDroppedAverage"), ("ALCATEL-IND1-QOS-MIB", "alaQoSSlotWredThresholdP0Lower"), ("ALCATEL-IND1-QOS-MIB", "alaQoSSlotWredThresholdP0Upper"), ("ALCATEL-IND1-QOS-MIB", "alaQoSSlotWredThresholdP1Lower"), ("ALCATEL-IND1-QOS-MIB", "alaQoSSlotWredThresholdP1Upper"), ("ALCATEL-IND1-QOS-MIB", "alaQoSSlotWredThresholdP2Lower"), ("ALCATEL-IND1-QOS-MIB", "alaQoSSlotWredThresholdP2Upper"), ("ALCATEL-IND1-QOS-MIB", "alaQoSSlotWredThresholdP3Lower"), ("ALCATEL-IND1-QOS-MIB", "alaQoSSlotWredThresholdP3Upper"), ("ALCATEL-IND1-QOS-MIB", "alaQoSSlotWredAverageCounterWeight"), ("ALCATEL-IND1-QOS-MIB", "alaQoSSlotWredThresholdStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSSlotCbqThresholdMode"), ("ALCATEL-IND1-QOS-MIB", "alaQoSSlotCbqThresholdP1"), ("ALCATEL-IND1-QOS-MIB", "alaQoSSlotCbqThresholdP2"), ("ALCATEL-IND1-QOS-MIB", "alaQoSSlotCbqThresholdP3"), ("ALCATEL-IND1-QOS-MIB", "alaQoSSlotHighDensity"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaQoSMIBSlotObjects = alaQoSMIBSlotObjects.setStatus('current')
if mibBuilder.loadTexts: alaQoSMIBSlotObjects.setDescription('Collections of objects providing information for Slots')
alaQoSMIBClassifyObjects = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 2, 1, 34)).setObjects(("ALCATEL-IND1-QOS-MIB", "alaQoSClassifyExecute"), ("ALCATEL-IND1-QOS-MIB", "alaQoSClassifyL2SourceResultRule"), ("ALCATEL-IND1-QOS-MIB", "alaQoSClassifyL2SourceResultDisposition"), ("ALCATEL-IND1-QOS-MIB", "alaQoSClassifyL2DestinationResultRule"), ("ALCATEL-IND1-QOS-MIB", "alaQoSClassifyL2DestinationResultDisposition"), ("ALCATEL-IND1-QOS-MIB", "alaQoSClassifyL3ResultRule"), ("ALCATEL-IND1-QOS-MIB", "alaQoSClassifyL3ResultDisposition"), ("ALCATEL-IND1-QOS-MIB", "alaQoSClassifyIGMPResultRule"), ("ALCATEL-IND1-QOS-MIB", "alaQoSClassifyIGMPResultDisposition"), ("ALCATEL-IND1-QOS-MIB", "alaQoSClassifyMulticastResultRule"), ("ALCATEL-IND1-QOS-MIB", "alaQoSClassifyMulticastResultDisposition"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaQoSMIBClassifyObjects = alaQoSMIBClassifyObjects.setStatus('current')
if mibBuilder.loadTexts: alaQoSMIBClassifyObjects.setDescription('Collections of objects providing information for Classifys')
alaQoSMIBRuleGroupsObjects = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 2, 1, 35)).setObjects(("ALCATEL-IND1-QOS-MIB", "alaQoSRuleGroupsSource"), ("ALCATEL-IND1-QOS-MIB", "alaQoSRuleGroupsType"), ("ALCATEL-IND1-QOS-MIB", "alaQoSRuleGroupsEnabled"), ("ALCATEL-IND1-QOS-MIB", "alaQoSRuleGroupsStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaQoSMIBRuleGroupsObjects = alaQoSMIBRuleGroupsObjects.setStatus('current')
if mibBuilder.loadTexts: alaQoSMIBRuleGroupsObjects.setDescription('Collections of objects providing information for RuleGroupss')
alaQoSMIBAppliedRuleGroupsObjects = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 2, 1, 36)).setObjects(("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedRuleGroupsSource"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedRuleGroupsType"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedRuleGroupsEnabled"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedRuleGroupsStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaQoSMIBAppliedRuleGroupsObjects = alaQoSMIBAppliedRuleGroupsObjects.setStatus('current')
if mibBuilder.loadTexts: alaQoSMIBAppliedRuleGroupsObjects.setDescription('Collections of objects providing information for applied RuleGroupss')
alaQoSMIBRuleGroupObjects = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 2, 1, 37)).setObjects(("ALCATEL-IND1-QOS-MIB", "alaQoSRuleGroupMatches"), ("ALCATEL-IND1-QOS-MIB", "alaQoSRuleGroupCountType"), ("ALCATEL-IND1-QOS-MIB", "alaQoSRuleGroupPacketCount"), ("ALCATEL-IND1-QOS-MIB", "alaQoSRuleGroupByteCount"), ("ALCATEL-IND1-QOS-MIB", "alaQoSRuleGroupStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaQoSMIBRuleGroupObjects = alaQoSMIBRuleGroupObjects.setStatus('current')
if mibBuilder.loadTexts: alaQoSMIBRuleGroupObjects.setDescription('Collections of objects providing information for RuleGroups')
alaQoSMIBAppliedRuleGroupObjects = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 2, 1, 38)).setObjects(("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedRuleGroupMatches"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedRuleGroupCountType"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedRuleGroupPacketCount"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedRuleGroupByteCount"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedRuleGroupStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaQoSMIBAppliedRuleGroupObjects = alaQoSMIBAppliedRuleGroupObjects.setStatus('current')
if mibBuilder.loadTexts: alaQoSMIBAppliedRuleGroupObjects.setDescription('Collections of objects providing information for applied RuleGroups')
alaQoSVlanGroupsObjects = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 2, 1, 39)).setObjects(("ALCATEL-IND1-QOS-MIB", "alaQoSVlanGroupsSource"), ("ALCATEL-IND1-QOS-MIB", "alaQoSVlanGroupsStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaQoSVlanGroupsObjects = alaQoSVlanGroupsObjects.setStatus('current')
if mibBuilder.loadTexts: alaQoSVlanGroupsObjects.setDescription('Collections of objects providing QoS Vlan Groups definitions.')
alaQoSAppliedVlanGroupsObjects = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 2, 1, 40)).setObjects(("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedVlanGroupsSource"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedVlanGroupsStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaQoSAppliedVlanGroupsObjects = alaQoSAppliedVlanGroupsObjects.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedVlanGroupsObjects.setDescription('Collections of objects providing applied QoS Vlan Groups definitions.')
alaQoSVlanGroupObjects = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 2, 1, 41)).setObjects(("ALCATEL-IND1-QOS-MIB", "alaQoSVlanGroupStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaQoSVlanGroupObjects = alaQoSVlanGroupObjects.setStatus('current')
if mibBuilder.loadTexts: alaQoSVlanGroupObjects.setDescription('Collections of objects providing QoS Vlan Groups definitions.')
alaQoSAppliedVlanGroupObjects = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 2, 1, 42)).setObjects(("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedVlanGroupStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaQoSAppliedVlanGroupObjects = alaQoSAppliedVlanGroupObjects.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedVlanGroupObjects.setDescription('Collections of objects providing applied QoS Vlan Groups definitions.')
alaQoSMIBHwLoopBackProfileObjects = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 2, 1, 43)).setObjects(("ALCATEL-IND1-QOS-MIB", "alaQoSHwLoopbackSourceMac"), ("ALCATEL-IND1-QOS-MIB", "alaQoSHwLoopbackDestinationMac"), ("ALCATEL-IND1-QOS-MIB", "alaQoSHwLoopbackVlan"), ("ALCATEL-IND1-QOS-MIB", "alaQoSHwLoopbackPort"), ("ALCATEL-IND1-QOS-MIB", "alaQoSHwLoopbackType"), ("ALCATEL-IND1-QOS-MIB", "alaQoSHwLoopbackProfileStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSHwLoopbackProfileRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaQoSMIBHwLoopBackProfileObjects = alaQoSMIBHwLoopBackProfileObjects.setStatus('current')
if mibBuilder.loadTexts: alaQoSMIBHwLoopBackProfileObjects.setDescription('Collections of objects providing information for Hardware Loopback')
alaQoSMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 2, 2, 1)).setObjects(("ALCATEL-IND1-QOS-MIB", "alaQoSMIBRuleObjects"), ("ALCATEL-IND1-QOS-MIB", "alaQoSMIBAppliedRuleObjects"), ("ALCATEL-IND1-QOS-MIB", "alaQoSMIBConditionObjects"), ("ALCATEL-IND1-QOS-MIB", "alaQoSMIBAppliedConditionObjects"), ("ALCATEL-IND1-QOS-MIB", "alaQoSMIBServiceObjects"), ("ALCATEL-IND1-QOS-MIB", "alaQoSMIBAppliedServiceObjects"), ("ALCATEL-IND1-QOS-MIB", "alaQoSMIBServiceGroupsObjects"), ("ALCATEL-IND1-QOS-MIB", "alaQoSMIBAppliedServiceGroupsObjects"), ("ALCATEL-IND1-QOS-MIB", "alaQoSMIBServiceGroupObjects"), ("ALCATEL-IND1-QOS-MIB", "alaQoSMIBAppliedServiceGroupObjects"), ("ALCATEL-IND1-QOS-MIB", "alaQoSMIBNetworkGroupsObjects"), ("ALCATEL-IND1-QOS-MIB", "alaQoSMIBAppliedNetworkGroupsObjects"), ("ALCATEL-IND1-QOS-MIB", "alaQoSMIBNetworkGroupObjects"), ("ALCATEL-IND1-QOS-MIB", "alaQoSMIBAppliedNetworkGroupObjects"), ("ALCATEL-IND1-QOS-MIB", "alaQoSMIBMACGroupsObjects"), ("ALCATEL-IND1-QOS-MIB", "alaQoSMIBAppliedMACGroupsObjects"), ("ALCATEL-IND1-QOS-MIB", "alaQoSMIBMACGroupObjects"), ("ALCATEL-IND1-QOS-MIB", "alaQoSMIBAppliedMACGroupObjects"), ("ALCATEL-IND1-QOS-MIB", "alaQoSMIBPortGroupsObjects"), ("ALCATEL-IND1-QOS-MIB", "alaQoSMIBAppliedPortGroupsObjects"), ("ALCATEL-IND1-QOS-MIB", "alaQoSMIBPortGroupObjects"), ("ALCATEL-IND1-QOS-MIB", "alaQoSMIBAppliedPortGroupObjects"), ("ALCATEL-IND1-QOS-MIB", "alaQoSMIBMapGroupsObjects"), ("ALCATEL-IND1-QOS-MIB", "alaQoSMIBAppliedMapGroupsObjects"), ("ALCATEL-IND1-QOS-MIB", "alaQoSMIBMapGroupObjects"), ("ALCATEL-IND1-QOS-MIB", "alaQoSMIBAppliedMapGroupObjects"), ("ALCATEL-IND1-QOS-MIB", "alaQoSMIBActionObjects"), ("ALCATEL-IND1-QOS-MIB", "alaQoSMIBAppliedActionObjects"), ("ALCATEL-IND1-QOS-MIB", "alaQoSMIBPortObjects"), ("ALCATEL-IND1-QOS-MIB", "alaQoSMIBConfigObjects"), ("ALCATEL-IND1-QOS-MIB", "alaQoSMIBStatsObjects"), ("ALCATEL-IND1-QOS-MIB", "alaQoSMIBQueueObjects"), ("ALCATEL-IND1-QOS-MIB", "alaQoSMIBSlotObjects"), ("ALCATEL-IND1-QOS-MIB", "alaQoSMIBClassifyObjects"), ("ALCATEL-IND1-QOS-MIB", "alaQoSMIBRuleGroupsObjects"), ("ALCATEL-IND1-QOS-MIB", "alaQoSMIBAppliedRuleGroupsObjects"), ("ALCATEL-IND1-QOS-MIB", "alaQoSMIBRuleGroupObjects"), ("ALCATEL-IND1-QOS-MIB", "alaQoSMIBAppliedRuleGroupObjects"), ("ALCATEL-IND1-QOS-MIB", "alaQoSVlanGroupsObjects"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedVlanGroupsObjects"), ("ALCATEL-IND1-QOS-MIB", "alaQoSVlanGroupObjects"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedVlanGroupObjects"), ("ALCATEL-IND1-QOS-MIB", "alaQoSMIBHwLoopBackProfileObjects"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaQoSMIBCompliance = alaQoSMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: alaQoSMIBCompliance.setDescription('Compliance statement for QoS.')
mibBuilder.exportSymbols("ALCATEL-IND1-QOS-MIB", alaQoSActionJitter=alaQoSActionJitter, alaQoSPortCOS3MaximumBandwidth=alaQoSPortCOS3MaximumBandwidth, alaQoSSlotThreshold1Medium=alaQoSSlotThreshold1Medium, alaQoSSlotThreshold2Low=alaQoSSlotThreshold2Low, alaQoSConditionServiceGroupStatus=alaQoSConditionServiceGroupStatus, alaQoSMACGroupsStatus=alaQoSMACGroupsStatus, alaQoSConditionSourceMacGroup=alaQoSConditionSourceMacGroup, alaQoSImportSlot=alaQoSImportSlot, alaQoSServiceEntry=alaQoSServiceEntry, alaQoSMIBServiceGroupsObjects=alaQoSMIBServiceGroupsObjects, alaQoSAppliedRuleGroupMatches=alaQoSAppliedRuleGroupMatches, alaQoSPortFirPrio2OverflowDiscardPkts=alaQoSPortFirPrio2OverflowDiscardPkts, alaQoSConditionDscpEnd=alaQoSConditionDscpEnd, alaQoSActionSourceRewriteNetworkGroupStatus=alaQoSActionSourceRewriteNetworkGroupStatus, alaQoSServiceTable=alaQoSServiceTable, alaQoSAppliedActionPBS=alaQoSAppliedActionPBS, alaQoSAppliedConditionSourceTcpPort=alaQoSAppliedConditionSourceTcpPort, alaQoSMapGroupValue=alaQoSMapGroupValue, alaQoSMIBMACGroupObjects=alaQoSMIBMACGroupObjects, alaQoSConditionTable=alaQoSConditionTable, alaQoSActionPBS=alaQoSActionPBS, alaQoSAppliedImportPortgroup=alaQoSAppliedImportPortgroup, alaQoSAppliedActionDestinationRewriteIpAddrStatus=alaQoSAppliedActionDestinationRewriteIpAddrStatus, alaQoSRuleReflexive=alaQoSRuleReflexive, alaQoSConfigQMPath=alaQoSConfigQMPath, alaQoSNetworkGroupsTable=alaQoSNetworkGroupsTable, alaQoSAppliedServiceSourceTcpPortEnd=alaQoSAppliedServiceSourceTcpPortEnd, alaQoSPortAppliedMaximumReservedBandwidth=alaQoSPortAppliedMaximumReservedBandwidth, alaQoSActionDestinationRewriteNetworkGroup=alaQoSActionDestinationRewriteNetworkGroup, alaQoSAppliedActionRedirectSlotStatus=alaQoSAppliedActionRedirectSlotStatus, alaQoSActionMinimumDepthStatus=alaQoSActionMinimumDepthStatus, alaQoSAppliedRuleValidityPeriod=alaQoSAppliedRuleValidityPeriod, alaQoSPortCOS2MaximumBandwidthStatus=alaQoSPortCOS2MaximumBandwidthStatus, alaQoSAppliedConditionSourceMacGroup=alaQoSAppliedConditionSourceMacGroup, alaQoSAppliedActionSourceRewriteIpAddrStatus=alaQoSAppliedActionSourceRewriteIpAddrStatus, alaQoSSlotPcamEthertype=alaQoSSlotPcamEthertype, alaQoSAppliedConditionSourceIpAddr=alaQoSAppliedConditionSourceIpAddr, alaQoSAppliedNetworkGroupIpAddr=alaQoSAppliedNetworkGroupIpAddr, alaQoSSlotBuffersDropped=alaQoSSlotBuffersDropped, alaQoSAppliedConditionSource=alaQoSAppliedConditionSource, alaQoSActionWredMaximumThresholdStatus=alaQoSActionWredMaximumThresholdStatus, alaQoSConfigEnabled=alaQoSConfigEnabled, alaQoSQueueMaxLength=alaQoSQueueMaxLength, alaQoSImportTable=alaQoSImportTable, alaQoSConfigStatsInterval=alaQoSConfigStatsInterval, alaQoSServiceName=alaQoSServiceName, alaQoSConditionSourcePortGroupStatus=alaQoSConditionSourcePortGroupStatus, alaQoSAppliedRuleEnabled=alaQoSAppliedRuleEnabled, alaQoSPortMaximumReservedBandwidthStatus=alaQoSPortMaximumReservedBandwidthStatus, alaQoSAppliedValidityPeriodEndInterval=alaQoSAppliedValidityPeriodEndInterval, alaQoSAppliedActionWredMaximumProbabilityStatus=alaQoSAppliedActionWredMaximumProbabilityStatus, alaQoSSlotDscpTable=alaQoSSlotDscpTable, alaQoSMIB=alaQoSMIB, alaQoSConditionSourceVlanGroupStatus=alaQoSConditionSourceVlanGroupStatus, alaQoSAppliedNetworkGroupIpMask=alaQoSAppliedNetworkGroupIpMask, alaQoSAppliedActionTosStatus=alaQoSAppliedActionTosStatus, alaQoSClassifyIGMPResultRule=alaQoSClassifyIGMPResultRule, alaQoSAppliedActionRowStatus=alaQoSAppliedActionRowStatus, alaQoSActionLatency=alaQoSActionLatency, alaQoSActionPIRStatus=alaQoSActionPIRStatus, alaQoSRuleTrapEvents=alaQoSRuleTrapEvents, alaQoSPortSlot=alaQoSPortSlot, alaQoSPortGroupPort=alaQoSPortGroupPort, alaQoSPortAppliedEnabled=alaQoSPortAppliedEnabled, alaQoSRuleRedCount=alaQoSRuleRedCount, alaQoSStatsSpoofedEvents=alaQoSStatsSpoofedEvents, alaQoSAppliedConditionDestinationPortGroupStatus=alaQoSAppliedConditionDestinationPortGroupStatus, alaQoSVlanGroupVlanEnd=alaQoSVlanGroupVlanEnd, alaQoSConditionDestinationMacAddrStatus=alaQoSConditionDestinationMacAddrStatus, alaQoSAppliedConditionVrfNameStatus=alaQoSAppliedConditionVrfNameStatus, alaQoSPortGroupsName=alaQoSPortGroupsName, alaQoSAction8021pStatus=alaQoSAction8021pStatus, alaQoSConfigUserportFilter=alaQoSConfigUserportFilter, alaQoSConditionDestinationIpPortEnd=alaQoSConditionDestinationIpPortEnd, alaQoSSlotSlice=alaQoSSlotSlice, alaQoSSlotThreshold2High=alaQoSSlotThreshold2High, alaQoSMIBAppliedMACGroupObjects=alaQoSMIBAppliedMACGroupObjects, alaQoSAppliedMapGroupsEntry=alaQoSAppliedMapGroupsEntry, alaQoSAppliedRuleExcessPacketCount=alaQoSAppliedRuleExcessPacketCount, alaQoSPortFirPrio0EnqBytes=alaQoSPortFirPrio0EnqBytes, alaQoSPortFirPrio0EnqPkts=alaQoSPortFirPrio0EnqPkts, alaQoSAppliedCondition8021pStatus=alaQoSAppliedCondition8021pStatus, alaQoSRuleNonGreenCount=alaQoSRuleNonGreenCount, alaQoSConditionMcastIpv6AddrStatus=alaQoSConditionMcastIpv6AddrStatus, alaQoSStatsLoadBalanceFlows=alaQoSStatsLoadBalanceFlows, alaQoSAppliedVlanGroupsEntry=alaQoSAppliedVlanGroupsEntry, alaQoSAppliedActionPIR=alaQoSAppliedActionPIR, alaQoSQueueMinimumBandwidth=alaQoSQueueMinimumBandwidth, alaQoSStatsL3EgressDrops=alaQoSStatsL3EgressDrops, alaQoSServiceGroupEntry=alaQoSServiceGroupEntry, alaQoSSlotCbqThresholdP2=alaQoSSlotCbqThresholdP2, alaQoSActionMaximumBuffersStatus=alaQoSActionMaximumBuffersStatus, alaQoSConfigAppliedDefaultQueues=alaQoSConfigAppliedDefaultQueues, alaQoSStatsL2Drops=alaQoSStatsL2Drops, alaQoSSlotPcamEnableDsap=alaQoSSlotPcamEnableDsap, alaQoSStatsMulticastDrops=alaQoSStatsMulticastDrops, alaQoSStatsUnknownFragments=alaQoSStatsUnknownFragments, alaQoSAppliedMapGroupsStatus=alaQoSAppliedMapGroupsStatus, alaQoSConditionIpv6FlowLabel=alaQoSConditionIpv6FlowLabel, alaQoSAppliedConditionSourceUdpPortEnd=alaQoSAppliedConditionSourceUdpPortEnd, alaQoSAppliedActionMapTo=alaQoSAppliedActionMapTo, alaQoSConditionDscp=alaQoSConditionDscp, alaQoSSlotProtocolId=alaQoSSlotProtocolId, alaQoSConditionSourceTcpPortEnd=alaQoSConditionSourceTcpPortEnd, alaQoSAppliedServiceSource=alaQoSAppliedServiceSource, alaQoSAppliedActionSourceRewriteIpMask=alaQoSAppliedActionSourceRewriteIpMask, alaQoSAppliedImportPortend=alaQoSAppliedImportPortend, alaQoSConditionSourceMacAddrStatus=alaQoSConditionSourceMacAddrStatus, alaQoSConditionSourceVlanStatus=alaQoSConditionSourceVlanStatus, alaQoSAppliedValidityPeriodName=alaQoSAppliedValidityPeriodName, alaQoSMIBNetworkGroupObjects=alaQoSMIBNetworkGroupObjects, alaQoSAppliedConditionMcastIpv6Mask=alaQoSAppliedConditionMcastIpv6Mask, alaQoSConditionDestinationUdpPortEnd=alaQoSConditionDestinationUdpPortEnd, alaQoSImportText=alaQoSImportText, alaQoSRuleGreenCount=alaQoSRuleGreenCount, alaQoSConditionMcastIpv6Mask=alaQoSConditionMcastIpv6Mask, alaQoSPortGroupsEntry=alaQoSPortGroupsEntry, alaQoSAppliedConditionTcpFlagsStatus=alaQoSAppliedConditionTcpFlagsStatus, alaQoSClassifyDestinationIp=alaQoSClassifyDestinationIp, alaQoSMACGroupMacAddr=alaQoSMACGroupMacAddr, alaQoSAppliedConditionDestinationMacMask=alaQoSAppliedConditionDestinationMacMask, alaQoSPortAppliedMaximumDefaultBandwidth=alaQoSPortAppliedMaximumDefaultBandwidth, alaQoSMACGroupsEntry=alaQoSMACGroupsEntry, alaQoSSlotSlot=alaQoSSlotSlot, alaQoSSlotDscpEntry=alaQoSSlotDscpEntry, alaQoSAppliedConditionSourceNetworkGroup=alaQoSAppliedConditionSourceNetworkGroup, alaQoSPortAppliedMaximumSignalledBandwidth=alaQoSPortAppliedMaximumSignalledBandwidth, alaQoSAppliedMACGroupStatus=alaQoSAppliedMACGroupStatus, alaQoSHwLoopbackDestinationMac=alaQoSHwLoopbackDestinationMac, alaQoSActionDscp=alaQoSActionDscp, alaQoSAppliedActionPermanentGatewayIpAddr=alaQoSAppliedActionPermanentGatewayIpAddr, alaQoSAppliedRuleLog=alaQoSAppliedRuleLog, alaQoSActionLoadBalanceGroupStatus=alaQoSActionLoadBalanceGroupStatus, alaQoSConfigAppliedDefaultRoutedDisposition=alaQoSConfigAppliedDefaultRoutedDisposition, alaQoSPortProtocolId=alaQoSPortProtocolId, alaQoSRuleExcessByteCount=alaQoSRuleExcessByteCount, alaQoSConditionIcmpCode=alaQoSConditionIcmpCode, alaQoSServiceSourceTcpPort=alaQoSServiceSourceTcpPort, alaQoSAppliedMACGroupsTable=alaQoSAppliedMACGroupsTable, alaQoSAppliedMACGroupsStatus=alaQoSAppliedMACGroupsStatus, alaQoSActionName=alaQoSActionName, alaQoSHwLoopbackPort=alaQoSHwLoopbackPort, alaQoSAppliedConditionTable=alaQoSAppliedConditionTable, alaQoSPortFirPrio2DeqPkts=alaQoSPortFirPrio2DeqPkts, alaQoSConditionDestinationSlotStatus=alaQoSConditionDestinationSlotStatus, alaQoSAppliedRuleEnforced=alaQoSAppliedRuleEnforced, alaQoSAppliedMapGroupEntry=alaQoSAppliedMapGroupEntry, alaQoSConfigFlowTimeout=alaQoSConfigFlowTimeout, alaQoSServiceSourceTcpPortStatus=alaQoSServiceSourceTcpPortStatus, alaQoSRuleYellowCount=alaQoSRuleYellowCount, alaQoSAppliedActionPermanentGatewayIpAddrStatus=alaQoSAppliedActionPermanentGatewayIpAddrStatus, alaQoSActionWredMaximumProbability=alaQoSActionWredMaximumProbability, alaQoSPortDefaultClassification=alaQoSPortDefaultClassification, alaQoSSlotPcamProtocolNumber=alaQoSSlotPcamProtocolNumber, alaQoSAppliedImportTable=alaQoSAppliedImportTable, alaQoSPortEnqueuingThresholdP1Upper=alaQoSPortEnqueuingThresholdP1Upper, alaQoSAppliedRuleLogInterval=alaQoSAppliedRuleLogInterval, alaQoSActionMaximumBandwidth=alaQoSActionMaximumBandwidth, alaQoSPortEnqueuingThresholdP0Upper=alaQoSPortEnqueuingThresholdP0Upper, alaQoSConfigLogConsole=alaQoSConfigLogConsole, alaQoSPortEnqueuingThresholdStatus=alaQoSPortEnqueuingThresholdStatus, alaQoSPortDefaultQidUrgent=alaQoSPortDefaultQidUrgent, alaQoSConditionDestinationMacAddr=alaQoSConditionDestinationMacAddr, alaQoSConditionSourceMacAddr=alaQoSConditionSourceMacAddr, alaQoSAppliedActionName=alaQoSAppliedActionName, alaQoSAppliedValidityPeriodDaysStatus=alaQoSAppliedValidityPeriodDaysStatus, alaQoSRuleGroupEntry=alaQoSRuleGroupEntry, alaQoSActionRowStatus=alaQoSActionRowStatus, alaQoSPortCOS7MaximumBandwidth=alaQoSPortCOS7MaximumBandwidth, alaQoSStatsReceivedNIMessages=alaQoSStatsReceivedNIMessages, alaQoSAppliedRuleYellowCount=alaQoSAppliedRuleYellowCount, alaQoSAppliedConditionSourceVlan=alaQoSAppliedConditionSourceVlan, alaQoSConditionDestinationPortGroup=alaQoSConditionDestinationPortGroup, alaQoSConditionDlciStatus=alaQoSConditionDlciStatus, alaQoSRuleGroupsType=alaQoSRuleGroupsType, alaQoSAppliedConditionSourcePortGroupStatus=alaQoSAppliedConditionSourcePortGroupStatus, alaQoSMACGroupStatus=alaQoSMACGroupStatus, alaQoSClassifyMulticastResultRule=alaQoSClassifyMulticastResultRule, alaQoSAppliedConditionMulticastIpAddr=alaQoSAppliedConditionMulticastIpAddr, alaQoSServiceGroupStatus=alaQoSServiceGroupStatus, alaQoSAppliedConditionTcpFlagsMask=alaQoSAppliedConditionTcpFlagsMask, alaQoSAppliedServiceSourceTcpPort=alaQoSAppliedServiceSourceTcpPort, alaQoSCondition8021p=alaQoSCondition8021p, alaQoSAppliedConditionSourceIpv6Addr=alaQoSAppliedConditionSourceIpv6Addr, alaQoSConditionIpv6NH=alaQoSConditionIpv6NH, alaQoSServiceProtocol=alaQoSServiceProtocol, alaQoSAppliedActionLoadBalanceGroup=alaQoSAppliedActionLoadBalanceGroup, alaQoSAppliedActionSourceRewriteNetworkGroupStatus=alaQoSAppliedActionSourceRewriteNetworkGroupStatus, alaQoSAppliedPortGroupsSource=alaQoSAppliedPortGroupsSource, alaQoSAppliedPortGroupSlot=alaQoSAppliedPortGroupSlot, alaQoSStatsL3IngressMatches=alaQoSStatsL3IngressMatches, alaQoSConditionSourcePortGroup=alaQoSConditionSourcePortGroup, alaQoSCondition8021pStatus=alaQoSCondition8021pStatus, alaQoSStatsL3EgressEvents=alaQoSStatsL3EgressEvents, alaQoSValidityPeriodMonths=alaQoSValidityPeriodMonths, alaQoSMapGroupsEntry=alaQoSMapGroupsEntry, alaQoSAppliedConditionTcpFlagsMaskStatus=alaQoSAppliedConditionTcpFlagsMaskStatus, alaQoSRuleTable=alaQoSRuleTable, alaQoSSlotWredThresholdP1Lower=alaQoSSlotWredThresholdP1Lower, alaQoSConfigMediumPriorityWeight=alaQoSConfigMediumPriorityWeight, alaQoSPortGroupPortEnd=alaQoSPortGroupPortEnd, alaQoSPortPdiPriorityP2=alaQoSPortPdiPriorityP2, alaQoSPortServicingMode=alaQoSPortServicingMode, alaQoSAppliedValidityPeriodIntervalStatus=alaQoSAppliedValidityPeriodIntervalStatus, alaQoSConfigAppliedFlowTimeout=alaQoSConfigAppliedFlowTimeout, alaQoSAppliedMapGroupStatus=alaQoSAppliedMapGroupStatus, alaQoSAppliedActionWredMaximumThreshold=alaQoSAppliedActionWredMaximumThreshold, alaQoSAppliedConditionSourcePortGroup=alaQoSAppliedConditionSourcePortGroup, alaQoSServiceGroupsStatus=alaQoSServiceGroupsStatus, alaQoSPortPdiPriorityP0=alaQoSPortPdiPriorityP0, alaQoSConditionTcpFlagsMaskStatus=alaQoSConditionTcpFlagsMaskStatus, alaQoSClassifyDestinationSlot=alaQoSClassifyDestinationSlot, alaQoSStatsL2Matches=alaQoSStatsL2Matches, alaQoSAppliedServiceTable=alaQoSAppliedServiceTable, alaQoSAppliedValidityPeriodMonthsStatus=alaQoSAppliedValidityPeriodMonthsStatus, alaQoSAppliedPortGroupsName=alaQoSAppliedPortGroupsName, alaQoSConditionSourceSlot=alaQoSConditionSourceSlot, alaQoSImportPort=alaQoSImportPort, alaQoSActionMirrorSlot=alaQoSActionMirrorSlot, alaQoSMACGroupMacMask=alaQoSMACGroupMacMask, alaQoSActionWredMinimumThreshold=alaQoSActionWredMinimumThreshold, alaQoSPortCOS5MaximumBandwidthStatus=alaQoSPortCOS5MaximumBandwidthStatus, alaQoSSlotPcamEnable8023=alaQoSSlotPcamEnable8023, alaQoSQueueAverageLength=alaQoSQueueAverageLength, alaQoSActionCBSStatus=alaQoSActionCBSStatus, alaQoSConfigAppliedReflfexiveTimeout=alaQoSConfigAppliedReflfexiveTimeout, alaQoSStatsSentNIMessages=alaQoSStatsSentNIMessages, alaQoSAppliedConditionSourceVlanGroup=alaQoSAppliedConditionSourceVlanGroup, alaQoSPortCOS1MaximumBandwidth=alaQoSPortCOS1MaximumBandwidth, alaQoSClassifyL3ResultDisposition=alaQoSClassifyL3ResultDisposition, alaQoSAppliedRuleGroupsEnabled=alaQoSAppliedRuleGroupsEnabled, alaQoSMIBObjects=alaQoSMIBObjects, alaQoSAppliedConditionEthertype=alaQoSAppliedConditionEthertype, alaQoSPortFirPrio0DeqPkts=alaQoSPortFirPrio0DeqPkts, alaQoSServiceGroupTable=alaQoSServiceGroupTable, alaQoSAppliedConditionDestinationMacGroup=alaQoSAppliedConditionDestinationMacGroup, alaQoSMapGroupsSource=alaQoSMapGroupsSource, alaQoSHwLoopbackProfileRowStatus=alaQoSHwLoopbackProfileRowStatus, alaQoSConditionVrfNameStatus=alaQoSConditionVrfNameStatus, alaQoSPortSignalledBandwidth=alaQoSPortSignalledBandwidth, alaQoSMIBQueueObjects=alaQoSMIBQueueObjects, alaQoSConditionSourceIpAddr=alaQoSConditionSourceIpAddr, alaQoSServiceGroupsTable=alaQoSServiceGroupsTable, alaQoSAppliedServiceRowStatus=alaQoSAppliedServiceRowStatus, alaQoSAppliedActionAlternateGatewayIpAddr=alaQoSAppliedActionAlternateGatewayIpAddr, alaQoSPortMaximumIngBandwidth=alaQoSPortMaximumIngBandwidth, alaQoSSlotWredThresholdP0Lower=alaQoSSlotWredThresholdP0Lower, alaQoSValidityPeriodEndInterval=alaQoSValidityPeriodEndInterval, alaQoSMIBServiceGroupObjects=alaQoSMIBServiceGroupObjects, alaQoSSlotDscpPriority=alaQoSSlotDscpPriority, alaQoSMapGroupsStatus=alaQoSMapGroupsStatus, alaQoSAppliedConditionDestinationInterfaceType=alaQoSAppliedConditionDestinationInterfaceType, alaQoSAppliedRuleEntry=alaQoSAppliedRuleEntry, alaQoSAppliedRuleActive=alaQoSAppliedRuleActive)
mibBuilder.exportSymbols("ALCATEL-IND1-QOS-MIB", alaQoSConditionDscpStatus=alaQoSConditionDscpStatus, alaQoSActionDropAlgorithm=alaQoSActionDropAlgorithm, alaQoSPortFirPrio1EnqPkts=alaQoSPortFirPrio1EnqPkts, alaQoSConfigApply=alaQoSConfigApply, alaQoSStatsL3EgressMatches=alaQoSStatsL3EgressMatches, alaQoSActionPIR=alaQoSActionPIR, alaQoSPortMaximumDefaultBandwidth=alaQoSPortMaximumDefaultBandwidth, alaQoSMIBAppliedPortGroupObjects=alaQoSMIBAppliedPortGroupObjects, alaQoSSlotProtocolType=alaQoSSlotProtocolType, alaQoSPortUrgentPriorityWeight=alaQoSPortUrgentPriorityWeight, alaQoSPortFirPrio3OverflowDiscardPkts=alaQoSPortFirPrio3OverflowDiscardPkts, alaQoSAppliedConditionDestinationUdpPortStatus=alaQoSAppliedConditionDestinationUdpPortStatus, alaQoSConditionDestinationIpAddrStatus=alaQoSConditionDestinationIpAddrStatus, alaQoSConfigServicingMode=alaQoSConfigServicingMode, alaQoSAppliedConditionTosMask=alaQoSAppliedConditionTosMask, alaQoSAppliedRuleGroupsSource=alaQoSAppliedRuleGroupsSource, alaQoSConditionTcpFlags=alaQoSConditionTcpFlags, alaQoSConditionDestinationIpv6Addr=alaQoSConditionDestinationIpv6Addr, alaQoSAppliedServiceGroupServiceName=alaQoSAppliedServiceGroupServiceName, alaQoSAppliedConditionDestinationPort=alaQoSAppliedConditionDestinationPort, alaQoSSlotEntry=alaQoSSlotEntry, alaQoSServiceSourceUdpPort=alaQoSServiceSourceUdpPort, alaQoSActionTos=alaQoSActionTos, alaQoSAppliedConditionSourceNetworkGroupStatus=alaQoSAppliedConditionSourceNetworkGroupStatus, alaQoSServiceGroupServiceName=alaQoSServiceGroupServiceName, alaQoSAppliedActionMaximumBuffersStatus=alaQoSAppliedActionMaximumBuffersStatus, alaQoSClassifySourceVlan=alaQoSClassifySourceVlan, alaQoSAppliedImportPrefix=alaQoSAppliedImportPrefix, alaQoSRuleDefaultList=alaQoSRuleDefaultList, alaQoSPortDefaultQidMedium=alaQoSPortDefaultQidMedium, alaQoSAppliedActionAlternateGatewayIpAddrStatus=alaQoSAppliedActionAlternateGatewayIpAddrStatus, alaQoSNetworkGroupsStatus=alaQoSNetworkGroupsStatus, alaQoSPortMaximumDefaultBuffers=alaQoSPortMaximumDefaultBuffers, alaQoSPortFirPrio1DeqBytes=alaQoSPortFirPrio1DeqBytes, alaQoSSlotThreshold2Urgent=alaQoSSlotThreshold2Urgent, alaQoSPortMaximumSignalledBandwidth=alaQoSPortMaximumSignalledBandwidth, alaQoSConditionIcmpTypeStatus=alaQoSConditionIcmpTypeStatus, alaQoSSlotPcamDsap=alaQoSSlotPcamDsap, alaQoSPortCOS6MaximumBandwidthStatus=alaQoSPortCOS6MaximumBandwidthStatus, alaQoSAppliedConditionDscp=alaQoSAppliedConditionDscp, alaQoSConditionInner8021p=alaQoSConditionInner8021p, alaQoSRuleLogInterval=alaQoSRuleLogInterval, alaQoSConditionSourceVlanGroup=alaQoSConditionSourceVlanGroup, alaQoSConditionIpv6FlowLabelStatus=alaQoSConditionIpv6FlowLabelStatus, alaQoSActionMapTo=alaQoSActionMapTo, alaQoSQueue8021p=alaQoSQueue8021p, alaQoSAppliedMapGroupKeyEnd=alaQoSAppliedMapGroupKeyEnd, alaQoSQueueCurrentLength=alaQoSQueueCurrentLength, alaQoSCondition8021pEnd=alaQoSCondition8021pEnd, alaQoSAppliedNetworkGroupTable=alaQoSAppliedNetworkGroupTable, alaQoSStatsMulticastEvents=alaQoSStatsMulticastEvents, alaQoSValidityPeriodMonthsStatus=alaQoSValidityPeriodMonthsStatus, alaQoSAppliedMapGroupsTable=alaQoSAppliedMapGroupsTable, alaQoSMIBStatsObjects=alaQoSMIBStatsObjects, alaQoSAppliedActionEntry=alaQoSAppliedActionEntry, alaQoSActionPermanentGatewayIpAddrStatus=alaQoSActionPermanentGatewayIpAddrStatus, alaQoSActionSource=alaQoSActionSource, alaQoSConditionTcpFlagsValStatus=alaQoSConditionTcpFlagsValStatus, alaQoSAppliedActionMapFrom=alaQoSAppliedActionMapFrom, alaQoSSlotProtocolRowStatus=alaQoSSlotProtocolRowStatus, alaQoSPortQ5PriorityWeight=alaQoSPortQ5PriorityWeight, alaQoSAppliedConditionIpProtocolStatus=alaQoSAppliedConditionIpProtocolStatus, alaQoSAppliedActionShared=alaQoSAppliedActionShared, alaQoSConditionEthertype=alaQoSConditionEthertype, alaQoSAppliedMACGroupMacAddr=alaQoSAppliedMACGroupMacAddr, alaQoSActionDestinationRewriteIpMask=alaQoSActionDestinationRewriteIpMask, alaQoSServiceRowStatus=alaQoSServiceRowStatus, alaQoSAppliedActionJitterStatus=alaQoSAppliedActionJitterStatus, alaQoSAppliedActionMaximumDepthStatus=alaQoSAppliedActionMaximumDepthStatus, alaQoSPortAppliedMaximumDefaultBandwidthStatus=alaQoSPortAppliedMaximumDefaultBandwidthStatus, alaQoSConfigLogLines=alaQoSConfigLogLines, alaQoSActionSourceRewriteIpMask=alaQoSActionSourceRewriteIpMask, alaQoSConfigDEIMarking=alaQoSConfigDEIMarking, alaQoSAppliedConditionDscpMask=alaQoSAppliedConditionDscpMask, alaQoSRuleType=alaQoSRuleType, alaQoSAppliedServiceSourceIpPortEnd=alaQoSAppliedServiceSourceIpPortEnd, alaQoSPortCOS6MinimumBandwidthStatus=alaQoSPortCOS6MinimumBandwidthStatus, alaQoSStatsReflexiveFlows=alaQoSStatsReflexiveFlows, alaQoSPortGroupStatus=alaQoSPortGroupStatus, alaQoSQueueMinimumDepth=alaQoSQueueMinimumDepth, alaQoSConditionVrfName=alaQoSConditionVrfName, alaQoSSlotThreshold1Urgent=alaQoSSlotThreshold1Urgent, alaQoSPortCOS0MaximumBandwidth=alaQoSPortCOS0MaximumBandwidth, alaQoSSlotBuffersDroppedAverage=alaQoSSlotBuffersDroppedAverage, alaQoSAppliedRuleMatches=alaQoSAppliedRuleMatches, alaQoSPortPdiTable=alaQoSPortPdiTable, alaQoSPortHighPriorityWeight=alaQoSPortHighPriorityWeight, alaQoSMIBCompliance=alaQoSMIBCompliance, alaQoSAppliedActionSource=alaQoSAppliedActionSource, alaQoSClassifyDestinationVlan=alaQoSClassifyDestinationVlan, alaQoSAppliedActionRedirectAggStatus=alaQoSAppliedActionRedirectAggStatus, alaQoSServiceGroupsEntry=alaQoSServiceGroupsEntry, alaQoSValidityPeriodHour=alaQoSValidityPeriodHour, alaQoSConditionSourceNetworkGroup=alaQoSConditionSourceNetworkGroup, alaQoSPortCOS7MinimumBandwidth=alaQoSPortCOS7MinimumBandwidth, alaQoSAppliedRuleGroupCountType=alaQoSAppliedRuleGroupCountType, alaQoSAppliedActionNocache=alaQoSAppliedActionNocache, alaQoSSlotPcamEntry=alaQoSSlotPcamEntry, alaQoSAppliedServiceGroupTable=alaQoSAppliedServiceGroupTable, alaQoSConditionMulticastNetworkGroup=alaQoSConditionMulticastNetworkGroup, alaQoSAppliedMACGroupEntry=alaQoSAppliedMACGroupEntry, alaQoSPortAppliedMaximumDefaultBuffersStatus=alaQoSPortAppliedMaximumDefaultBuffersStatus, alaQoSAppliedRulePrecedence=alaQoSAppliedRulePrecedence, alaQoSImportRowStatus=alaQoSImportRowStatus, alaQoSPortProtocolPriorityP5=alaQoSPortProtocolPriorityP5, alaQoSAppliedPortGroupsStatus=alaQoSAppliedPortGroupsStatus, alaQoSConditionSourceIpPortStatus=alaQoSConditionSourceIpPortStatus, alaQoSAppliedConditionSourceInterfaceType=alaQoSAppliedConditionSourceInterfaceType, alaQoSPortDefaultQidLow=alaQoSPortDefaultQidLow, alaQoSAppliedConditionDlci=alaQoSAppliedConditionDlci, alaQoSConfigQ7PriorityWeight=alaQoSConfigQ7PriorityWeight, alaQoSActionRedirectAggStatus=alaQoSActionRedirectAggStatus, alaQoSSlotDscpIndex=alaQoSSlotDscpIndex, alaQoSConditionDestinationMacMask=alaQoSConditionDestinationMacMask, alaQoSPortProtocolClassification=alaQoSPortProtocolClassification, alaQoSImportPrecedence=alaQoSImportPrecedence, alaQoSPortDefaultDSCP=alaQoSPortDefaultDSCP, alaQoSAppliedActionLatencyStatus=alaQoSAppliedActionLatencyStatus, alaQoSAppliedActionVPNAccess=alaQoSAppliedActionVPNAccess, alaQoSPortLowPriorityWeight=alaQoSPortLowPriorityWeight, alaQoSActionRedirectSlotStatus=alaQoSActionRedirectSlotStatus, alaQoSPortFirPrio0DeqBytes=alaQoSPortFirPrio0DeqBytes, alaQoSPortQ6PriorityWeight=alaQoSPortQ6PriorityWeight, alaQoSConditionDestinationVlanStatus=alaQoSConditionDestinationVlanStatus, alaQoSPortTrusted=alaQoSPortTrusted, alaQoSAppliedImportPrecedence=alaQoSAppliedImportPrecedence, alaQoSRuleRowStatus=alaQoSRuleRowStatus, alaQoSAppliedConditionIpv6Traffic=alaQoSAppliedConditionIpv6Traffic, alaQoSMIBConformance=alaQoSMIBConformance, alaQoSAppliedConditionTosStatus=alaQoSAppliedConditionTosStatus, alaQoSConditionDestinationUdpPort=alaQoSConditionDestinationUdpPort, alaQoSPortGroupsTable=alaQoSPortGroupsTable, alaQoSPortProtocolPriorityP0=alaQoSPortProtocolPriorityP0, alaQoSPortPdiPriorityP7=alaQoSPortPdiPriorityP7, alaQoSConditionDestinationInterfaceTypeStatus=alaQoSConditionDestinationInterfaceTypeStatus, alaQoSConditionTosMask=alaQoSConditionTosMask, alaQoSActionWredMaximumProbabilityStatus=alaQoSActionWredMaximumProbabilityStatus, alaQoSConditionService=alaQoSConditionService, alaQoSAppliedActionCBS=alaQoSAppliedActionCBS, alaQoSAppliedConditionIcmpCodeStatus=alaQoSAppliedConditionIcmpCodeStatus, alaQoSAppliedRuleReflexive=alaQoSAppliedRuleReflexive, alaQoSSlotWredAverageCounterWeight=alaQoSSlotWredAverageCounterWeight, alaQoSAppliedActionDestinationRewriteNetworkGroup=alaQoSAppliedActionDestinationRewriteNetworkGroup, alaQoSSlotProtocolEthertype=alaQoSSlotProtocolEthertype, alaQoSConditionSourceInterfaceTypeStatus=alaQoSConditionSourceInterfaceTypeStatus, alaQoSConditionDestinationVlan=alaQoSConditionDestinationVlan, alaQoSAppliedActionMirrorMode=alaQoSAppliedActionMirrorMode, alaQoSPortCOS3MaximumBandwidthStatus=alaQoSPortCOS3MaximumBandwidthStatus, alaQoSAppliedConditionDestinationVlan=alaQoSAppliedConditionDestinationVlan, alaQoSSlotTable=alaQoSSlotTable, alaQoSAppliedConditionDestinationPortGroup=alaQoSAppliedConditionDestinationPortGroup, alaQoSConfigQ5PriorityWeight=alaQoSConfigQ5PriorityWeight, alaQoSAppliedValidityPeriodHour=alaQoSAppliedValidityPeriodHour, alaQoSAppliedConditionDestinationIpAddrStatus=alaQoSAppliedConditionDestinationIpAddrStatus, alaQoSConfigFragmentTimeout=alaQoSConfigFragmentTimeout, alaQoSAppliedMapGroupsSource=alaQoSAppliedMapGroupsSource, alaQoSVlanGroupsStatus=alaQoSVlanGroupsStatus, alaQoSRuleLog=alaQoSRuleLog, alaQoSActionMinimumDepth=alaQoSActionMinimumDepth, alaQoSStatsClassifierMaxDepth=alaQoSStatsClassifierMaxDepth, alaQoSNetworkGroupIpAddr=alaQoSNetworkGroupIpAddr, alaQoSSlotThreshold1Low=alaQoSSlotThreshold1Low, alaQoSAppliedVlanGroupVlanEnd=alaQoSAppliedVlanGroupVlanEnd, alaQoSAppliedConditionSourceIpPort=alaQoSAppliedConditionSourceIpPort, alaQoSConditionEthertypeStatus=alaQoSConditionEthertypeStatus, alaQoSAppliedConditionDlciStatus=alaQoSAppliedConditionDlciStatus, alaQoSConditionDestinationPortEnd=alaQoSConditionDestinationPortEnd, alaQoSActionSourceRewriteIpAddrStatus=alaQoSActionSourceRewriteIpAddrStatus, alaQoSMIBRuleGroupObjects=alaQoSMIBRuleGroupObjects, alaQoSServiceDestinationTcpPort=alaQoSServiceDestinationTcpPort, alaQoSAppliedConditionVrfName=alaQoSAppliedConditionVrfName, alaQoSPortCOS6MaximumBandwidth=alaQoSPortCOS6MaximumBandwidth, alaQoSQueuePortId=alaQoSQueuePortId, alaQoSActionDestinationRewriteIpAddr=alaQoSActionDestinationRewriteIpAddr, alaQoSAppliedServiceSourceUdpPort=alaQoSAppliedServiceSourceUdpPort, alaQoSAppliedConditionDestinationVlanStatus=alaQoSAppliedConditionDestinationVlanStatus, alaQoSPortSpoofedCount=alaQoSPortSpoofedCount, alaQoSPortPdiId=alaQoSPortPdiId, alaQoSHwLoopbackProfileStatus=alaQoSHwLoopbackProfileStatus, alaQoSAppliedMACGroupTable=alaQoSAppliedMACGroupTable, alaQoSAppliedConditionDestinationIpPortStatus=alaQoSAppliedConditionDestinationIpPortStatus, alaQoSConditionDestinationPortGroupStatus=alaQoSConditionDestinationPortGroupStatus, alaQoSAppliedConditionEthertypeStatus=alaQoSAppliedConditionEthertypeStatus, alaQoSVlanGroupsObjects=alaQoSVlanGroupsObjects, alaQoSConditionTcpFlagsVal=alaQoSConditionTcpFlagsVal, alaQoSAppliedNetworkGroupStatus=alaQoSAppliedNetworkGroupStatus, alaQoSHwLoopbackType=alaQoSHwLoopbackType, alaQoSActionSourceRewriteIpAddr=alaQoSActionSourceRewriteIpAddr, alaQoSQueueId=alaQoSQueueId, alaQoSAppliedRuleTable=alaQoSAppliedRuleTable, alaQoSAppliedConditionDestinationTcpPortStatus=alaQoSAppliedConditionDestinationTcpPortStatus, alaQoSAppliedNetworkGroupEntry=alaQoSAppliedNetworkGroupEntry, alaQoSStatsFlowHits=alaQoSStatsFlowHits, alaQoSVlanGroupStatus=alaQoSVlanGroupStatus, alaQoSActionShared=alaQoSActionShared, alaQoSActionMinimumBandwidthStatus=alaQoSActionMinimumBandwidthStatus, alaQoSPortUsedFFPRules=alaQoSPortUsedFFPRules, alaQoSConditionInner8021pStatus=alaQoSConditionInner8021pStatus, alaQoSQueueMaximumBandwidth=alaQoSQueueMaximumBandwidth, alaQoSConfigTrustPorts=alaQoSConfigTrustPorts, alaQoSAppliedMapGroupValue=alaQoSAppliedMapGroupValue, alaQoSAppliedRuleDefaultList=alaQoSAppliedRuleDefaultList, alaQoSAppliedActionWredMaximumThresholdStatus=alaQoSAppliedActionWredMaximumThresholdStatus, alaQoSAppliedActionMapGroup=alaQoSAppliedActionMapGroup, alaQoSPortCOS7MaximumBandwidthStatus=alaQoSPortCOS7MaximumBandwidthStatus, alaQoSPortAppliedMaximumDefaultBuffers=alaQoSPortAppliedMaximumDefaultBuffers, alaQoSConditionSourceMacGroupStatus=alaQoSConditionSourceMacGroupStatus, alaQoSPortPdiPriorityP4=alaQoSPortPdiPriorityP4, alaQoSMIBAppliedRuleObjects=alaQoSMIBAppliedRuleObjects, alaQoSPortDefault8021p=alaQoSPortDefault8021p, alaQoSAppliedConditionDestinationMacAddr=alaQoSAppliedConditionDestinationMacAddr, alaQoSPortMediumPriorityWeight=alaQoSPortMediumPriorityWeight, alaQoSClassifyDscp=alaQoSClassifyDscp, alaQoSValidityPeriodDaysStatus=alaQoSValidityPeriodDaysStatus, alaQoSAppliedServiceDestinationTcpPortStatus=alaQoSAppliedServiceDestinationTcpPortStatus, alaQoSPortDefaultQidHigh=alaQoSPortDefaultQidHigh, alaQoSPortFirPrio2QidDiscardPkts=alaQoSPortFirPrio2QidDiscardPkts, alaQoSAppliedRuleGroupsStatus=alaQoSAppliedRuleGroupsStatus, alaQoSRuleGroupByteCount=alaQoSRuleGroupByteCount, alaQoSConditionDestinationMacGroupStatus=alaQoSConditionDestinationMacGroupStatus, alaQoSRuleSave=alaQoSRuleSave, alaQoSAppliedActionCIR=alaQoSAppliedActionCIR, alaQoSPortPort=alaQoSPortPort, alaQoSRuleEnforced=alaQoSRuleEnforced, alaQoSAppliedCondition8021p=alaQoSAppliedCondition8021p, alaQoSAppliedConditionService=alaQoSAppliedConditionService, alaQoSConfigQ4PriorityWeight=alaQoSConfigQ4PriorityWeight, alaQoSMIBAppliedServiceGroupsObjects=alaQoSMIBAppliedServiceGroupsObjects, alaQoSServiceSource=alaQoSServiceSource, alaQoSMIBClassifyObjects=alaQoSMIBClassifyObjects, alaQoSStatsFlowLookups=alaQoSStatsFlowLookups, alaQoSAppliedActionDestinationRewriteNetworkGroupStatus=alaQoSAppliedActionDestinationRewriteNetworkGroupStatus, alaQoSConditionDestinationIpv6Mask=alaQoSConditionDestinationIpv6Mask, alaQoSMIBAppliedServiceGroupObjects=alaQoSMIBAppliedServiceGroupObjects, alaQoSRuleName=alaQoSRuleName, alaQoSPortEnqueuingThresholdP3Upper=alaQoSPortEnqueuingThresholdP3Upper, alaQoSConditionDestinationIpAddr=alaQoSConditionDestinationIpAddr, alaQoSConditionIcmpCodeStatus=alaQoSConditionIcmpCodeStatus, alaQoSConditionSourceUdpPort=alaQoSConditionSourceUdpPort, alaQoSActionMirrorPort=alaQoSActionMirrorPort, alaQoSAppliedActionJitter=alaQoSAppliedActionJitter, alaQoSMIBRuleObjects=alaQoSMIBRuleObjects, alaQoSPortCurrentBandwidth=alaQoSPortCurrentBandwidth, alaQoSActionTosStatus=alaQoSActionTosStatus, alaQoSMIBServiceObjects=alaQoSMIBServiceObjects, alaQoSActionPriority=alaQoSActionPriority, alaQoSConfigLogLevel=alaQoSConfigLogLevel, alaQoSPortFirPrio1QidDiscardPkts=alaQoSPortFirPrio1QidDiscardPkts, alaQoSAppliedImportRowStatus=alaQoSAppliedImportRowStatus, alaQoSMACGroupsSource=alaQoSMACGroupsSource, alaQoSPortMaximumDefaultBandwidthStatus=alaQoSPortMaximumDefaultBandwidthStatus, alaQoSAppliedRuleGroupPacketCount=alaQoSAppliedRuleGroupPacketCount, alaQoSPortDEIMapping=alaQoSPortDEIMapping, alaQoSConditionSourceIpv6Mask=alaQoSConditionSourceIpv6Mask)
mibBuilder.exportSymbols("ALCATEL-IND1-QOS-MIB", alaQoSAppliedServiceGroupsSource=alaQoSAppliedServiceGroupsSource, alaQoSAppliedActionMaximumBandwidthStatus=alaQoSAppliedActionMaximumBandwidthStatus, alaQoSQueueTable=alaQoSQueueTable, alaQoSQueueType=alaQoSQueueType, alaQoSAppliedRuleGroupStatus=alaQoSAppliedRuleGroupStatus, alaQoSPortQueues=alaQoSPortQueues, alaQoSHwLoopbackProfileName=alaQoSHwLoopbackProfileName, alaQoSAppliedActionDscp=alaQoSAppliedActionDscp, alaQoSAppliedRuleRedCount=alaQoSAppliedRuleRedCount, alaQoSAppliedActionWredMinimumThreshold=alaQoSAppliedActionWredMinimumThreshold, alaQoSActionAlternateGatewayIpAddr=alaQoSActionAlternateGatewayIpAddr, alaQoSConditionMulticastIpAddrStatus=alaQoSConditionMulticastIpAddrStatus, alaQoSServiceDestinationIpPortEnd=alaQoSServiceDestinationIpPortEnd, alaQoSAppliedRuleGroupsTable=alaQoSAppliedRuleGroupsTable, alaQoSAppliedConditionSourcePort=alaQoSAppliedConditionSourcePort, alaQoSAppliedConditionServiceGroupStatus=alaQoSAppliedConditionServiceGroupStatus, alaQoSAppliedActionMaximumDepth=alaQoSAppliedActionMaximumDepth, alaQoSAppliedValidityPeriodHourStatus=alaQoSAppliedValidityPeriodHourStatus, alaQoSValidityPeriodSource=alaQoSValidityPeriodSource, alaQoSAppliedServiceSourceUdpPortStatus=alaQoSAppliedServiceSourceUdpPortStatus, alaQoSClassifyClassify=alaQoSClassifyClassify, alaQoSActionRedirectPort=alaQoSActionRedirectPort, alaQoSQueuePacketsDropped=alaQoSQueuePacketsDropped, alaQoSAppliedValidityPeriodDays=alaQoSAppliedValidityPeriodDays, alaQoSMapGroupKey=alaQoSMapGroupKey, alaQoSActionPortdisable=alaQoSActionPortdisable, alaQoSConfigDEIMapping=alaQoSConfigDEIMapping, alaQoSClassifyL2SourceResultDisposition=alaQoSClassifyL2SourceResultDisposition, alaQoSPortAppliedDefaultQueues=alaQoSPortAppliedDefaultQueues, alaQoSAppliedRuleValidityPeriodStatus=alaQoSAppliedRuleValidityPeriodStatus, alaQoSActionTable=alaQoSActionTable, alaQoSPortPdiPriorityType=alaQoSPortPdiPriorityType, alaQoSAppliedConditionMulticastNetworkGroup=alaQoSAppliedConditionMulticastNetworkGroup, alaQoSAppliedServiceDestinationIpPortEnd=alaQoSAppliedServiceDestinationIpPortEnd, alaQoSAppliedRuleCountType=alaQoSAppliedRuleCountType, alaQoSActionVPNAccess=alaQoSActionVPNAccess, alaQoSConditionTcpFlagsStatus=alaQoSConditionTcpFlagsStatus, alaQoSRuleValidityPeriodStatus=alaQoSRuleValidityPeriodStatus, alaQoSServiceGroupsName=alaQoSServiceGroupsName, alaQoSServiceDestinationIpPortStatus=alaQoSServiceDestinationIpPortStatus, alaQoSNetworkGroupEntry=alaQoSNetworkGroupEntry, alaQoSRulePacketCount=alaQoSRulePacketCount, alaQoSAppliedConditionSourceInterfaceTypeStatus=alaQoSAppliedConditionSourceInterfaceTypeStatus, alaQoSPortFirPrio3EnqPkts=alaQoSPortFirPrio3EnqPkts, alaQoSPortEnqueuingThresholdP1Lower=alaQoSPortEnqueuingThresholdP1Lower, alaQoSAppliedConditionTcpFlagsVal=alaQoSAppliedConditionTcpFlagsVal, alaQoSPortCOS4MaximumBandwidth=alaQoSPortCOS4MaximumBandwidth, alaQoSConfigUserportShutdown=alaQoSConfigUserportShutdown, alaQoSClassifyDestinationPort=alaQoSClassifyDestinationPort, alaQoSAppliedConditionSourceTcpPortStatus=alaQoSAppliedConditionSourceTcpPortStatus, alaQoSAppliedServiceDestinationUdpPortEnd=alaQoSAppliedServiceDestinationUdpPortEnd, alaQoSConditionMcastIpv6Addr=alaQoSConditionMcastIpv6Addr, alaQoSSlotWredThresholdP0Upper=alaQoSSlotWredThresholdP0Upper, alaQoSConditionDlci=alaQoSConditionDlci, alaQoSConditionIcmpType=alaQoSConditionIcmpType, alaQoSMIBAppliedMapGroupsObjects=alaQoSMIBAppliedMapGroupsObjects, alaQoSValidityPeriodIntervalStatus=alaQoSValidityPeriodIntervalStatus, alaQoSRuleGroupMatches=alaQoSRuleGroupMatches, alaQoSAppliedNetworkGroupsSource=alaQoSAppliedNetworkGroupsSource, alaQoSActionDisposition=alaQoSActionDisposition, alaQoSAppliedActionCounterColor=alaQoSAppliedActionCounterColor, alaQoSAppliedConditionTcpEstablished=alaQoSAppliedConditionTcpEstablished, alaQoSConditionName=alaQoSConditionName, alaQoSPortCOS5MaximumBandwidth=alaQoSPortCOS5MaximumBandwidth, alaQoSValidityPeriodName=alaQoSValidityPeriodName, alaQoSConditionSourceIpPortEnd=alaQoSConditionSourceIpPortEnd, alaQoSAppliedActionPortdisable=alaQoSAppliedActionPortdisable, alaQoSAppliedPortGroupStatus=alaQoSAppliedPortGroupStatus, alaQoSConditionDestinationSlot=alaQoSConditionDestinationSlot, alaQoSPortCOS2MaximumBandwidth=alaQoSPortCOS2MaximumBandwidth, alaQoSAppliedActionWredMaximumProbability=alaQoSAppliedActionWredMaximumProbability, alaQoSConfigLowPriorityWeight=alaQoSConfigLowPriorityWeight, alaQoSQueueEntry=alaQoSQueueEntry, alaQoSNetworkGroupsName=alaQoSNetworkGroupsName, alaQoSConfigAppliedFragmentTimeout=alaQoSConfigAppliedFragmentTimeout, alaQoSMIBMapGroupObjects=alaQoSMIBMapGroupObjects, alaQoSAppliedConditionInnerSourceVlanGroup=alaQoSAppliedConditionInnerSourceVlanGroup, alaQoSAppliedConditionDestinationMacGroupStatus=alaQoSAppliedConditionDestinationMacGroupStatus, alaQoSAppliedConditionEntry=alaQoSAppliedConditionEntry, alaQoSAppliedServiceDestinationTcpPortEnd=alaQoSAppliedServiceDestinationTcpPortEnd, alaQoSActionMapGroup=alaQoSActionMapGroup, alaQoSAppliedNetworkGroupsStatus=alaQoSAppliedNetworkGroupsStatus, alaQoSAppliedConditionIpv6NH=alaQoSAppliedConditionIpv6NH, alaQoSSlotType=alaQoSSlotType, alaQoSAppliedActionWredMinimumThresholdStatus=alaQoSAppliedActionWredMinimumThresholdStatus, alaQoSPortCOS1MaximumBandwidthStatus=alaQoSPortCOS1MaximumBandwidthStatus, alaQoSMIBAppliedServiceObjects=alaQoSMIBAppliedServiceObjects, alaQoSServiceSourceIpPort=alaQoSServiceSourceIpPort, alaQoSMIBCompliances=alaQoSMIBCompliances, alaQoSAppliedConditionTos=alaQoSAppliedConditionTos, alaQoSRuleGroupRuleName=alaQoSRuleGroupRuleName, alaQoSPortQueuesPreempted=alaQoSPortQueuesPreempted, alaQoSPortCOS7MinimumBandwidthStatus=alaQoSPortCOS7MinimumBandwidthStatus, alaQoSClassifySourceMac=alaQoSClassifySourceMac, alaQoSClassifyL3ResultRule=alaQoSClassifyL3ResultRule, alaQoSRuleEnabled=alaQoSRuleEnabled, alaQoSSlotThreshold2Medium=alaQoSSlotThreshold2Medium, alaQoSConditionSourceIpv6Addr=alaQoSConditionSourceIpv6Addr, alaQoSAppliedConditionInner8021p=alaQoSAppliedConditionInner8021p, alaQoSStatsFragments=alaQoSStatsFragments, alaQoSConfigDefaultQueues=alaQoSConfigDefaultQueues, alaQoSSlotPcamSsap=alaQoSSlotPcamSsap, alaQoSAppliedRuleAction=alaQoSAppliedRuleAction, alaQoSPortNonSpoofedCount=alaQoSPortNonSpoofedCount, alaQoSMIBMapGroupsObjects=alaQoSMIBMapGroupsObjects, alaQoSPortProtocolPriorityP7=alaQoSPortProtocolPriorityP7, alaQoSPortCOS6MinimumBandwidth=alaQoSPortCOS6MinimumBandwidth, alaQoSVlanGroupTable=alaQoSVlanGroupTable, alaQoSAppliedServiceDestinationUdpPort=alaQoSAppliedServiceDestinationUdpPort, alaQoSConditionSourceIpPort=alaQoSConditionSourceIpPort, alaQoSClassifyExecute=alaQoSClassifyExecute, alaQoSMIBAppliedNetworkGroupObjects=alaQoSMIBAppliedNetworkGroupObjects, alaQoSConfigAppliedDefaultBridgedDisposition=alaQoSConfigAppliedDefaultBridgedDisposition, alaQoSAppliedConditionIcmpCode=alaQoSAppliedConditionIcmpCode, alaQoSPortQ4PriorityWeight=alaQoSPortQ4PriorityWeight, alaQoSConfigStatsReset=alaQoSConfigStatsReset, alaQoSAppliedActionMinimumDepth=alaQoSAppliedActionMinimumDepth, alaQoSServiceSourceUdpPortStatus=alaQoSServiceSourceUdpPortStatus, alaQoSActionCIR=alaQoSActionCIR, alaQoSAppliedConditionDestinationUdpPortEnd=alaQoSAppliedConditionDestinationUdpPortEnd, alaQoSPortDefaultQueues=alaQoSPortDefaultQueues, alaQoSPortFirPrio0QidDiscardPkts=alaQoSPortFirPrio0QidDiscardPkts, alaQoSAppliedConditionServiceStatus=alaQoSAppliedConditionServiceStatus, alaQoSActionPermanentGatewayIpAddr=alaQoSActionPermanentGatewayIpAddr, alaQoSConfigReset=alaQoSConfigReset, alaQoSConfigAppliedUserportFilter=alaQoSConfigAppliedUserportFilter, alaQoSConfigDefaultRoutedDisposition=alaQoSConfigDefaultRoutedDisposition, alaQoSAppliedConditionDestinationNetworkGroup=alaQoSAppliedConditionDestinationNetworkGroup, alaQoSClassifyApplied=alaQoSClassifyApplied, alaQoSAppliedVlanGroupObjects=alaQoSAppliedVlanGroupObjects, alaQoSAppliedActionDestinationRewriteIpMask=alaQoSAppliedActionDestinationRewriteIpMask, alaQoSAppliedConditionIpv6FlowLabelStatus=alaQoSAppliedConditionIpv6FlowLabelStatus, alaQoSAppliedCondition8021pEnd=alaQoSAppliedCondition8021pEnd, alaQoSPortMaximumIngBandwidthStatus=alaQoSPortMaximumIngBandwidthStatus, alaQoSAppliedConditionMulticastNetworkGroupStatus=alaQoSAppliedConditionMulticastNetworkGroupStatus, alaQoSConfigAutoPhones=alaQoSConfigAutoPhones, alaQoSPortProtocolPriorityP1=alaQoSPortProtocolPriorityP1, alaQoSAction8021p=alaQoSAction8021p, alaQoSAppliedRuleGroupEntry=alaQoSAppliedRuleGroupEntry, alaQoSClassifyDestinationIpPort=alaQoSClassifyDestinationIpPort, alaQoSQueueMaximumDepth=alaQoSQueueMaximumDepth, alaQoSActionNocache=alaQoSActionNocache, alaQoSAppliedConditionDscpStatus=alaQoSAppliedConditionDscpStatus, alaQoSActionAlternateGatewayIpAddrStatus=alaQoSActionAlternateGatewayIpAddrStatus, alaQoSAppliedActionPeakBandwidth=alaQoSAppliedActionPeakBandwidth, alaQoSAppliedActionMirrorSlot=alaQoSAppliedActionMirrorSlot, alaQoSPortQueuesFailed=alaQoSPortQueuesFailed, alaQoSAppliedActionSourceRewriteNetworkGroup=alaQoSAppliedActionSourceRewriteNetworkGroup, alaQoSAppliedConditionMulticastIpMask=alaQoSAppliedConditionMulticastIpMask, alaQoSAppliedValidityPeriodTable=alaQoSAppliedValidityPeriodTable, alaQoSActionDestinationRewriteNetworkGroupStatus=alaQoSActionDestinationRewriteNetworkGroupStatus, alaQoSConditionDestinationTcpPortStatus=alaQoSConditionDestinationTcpPortStatus, alaQoSAppliedActionMinimumBandwidth=alaQoSAppliedActionMinimumBandwidth, alaQoSAppliedActionDropAlgorithm=alaQoSAppliedActionDropAlgorithm, alaQoSAppliedConditionDestinationTcpPort=alaQoSAppliedConditionDestinationTcpPort, alaQoSClassifySourceIp=alaQoSClassifySourceIp, alaQoSValidityPeriodTable=alaQoSValidityPeriodTable, alaQoSAppliedValidityPeriodSource=alaQoSAppliedValidityPeriodSource, alaQoSAppliedRuleNonRedCount=alaQoSAppliedRuleNonRedCount, alaQoSClassifySourceInterfaceType=alaQoSClassifySourceInterfaceType, alaQoSRuleGroupsEntry=alaQoSRuleGroupsEntry, alaQoSRuleGroupsEnabled=alaQoSRuleGroupsEnabled, alaQoSAppliedServiceGroupsTable=alaQoSAppliedServiceGroupsTable, alaQoSAppliedVlanGroupsObjects=alaQoSAppliedVlanGroupsObjects, alaQoSConditionSourceMacMask=alaQoSConditionSourceMacMask, alaQoSAppliedConditionInner8021pStatus=alaQoSAppliedConditionInner8021pStatus, alaQoSAppliedActionMaximumBuffers=alaQoSAppliedActionMaximumBuffers, alaQoSConditionEntry=alaQoSConditionEntry, alaQoSPortCOS2MinimumBandwidthStatus=alaQoSPortCOS2MinimumBandwidthStatus, alaQoSClassifySourceIpPort=alaQoSClassifySourceIpPort, alaQoSAppliedConditionSourceTcpPortEnd=alaQoSAppliedConditionSourceTcpPortEnd, alaQoSAppliedVlanGroupVlan=alaQoSAppliedVlanGroupVlan, alaQoSHwLoopbackVlan=alaQoSHwLoopbackVlan, alaQoSConditionMulticastIpAddr=alaQoSConditionMulticastIpAddr, alaQoSAppliedActionCIRStatus=alaQoSAppliedActionCIRStatus, alaQoSPortFirPrio3DeqPkts=alaQoSPortFirPrio3DeqPkts, alaQoSRuleAction=alaQoSRuleAction, alaQoSConditionSourcePortEnd=alaQoSConditionSourcePortEnd, alaQoSPortEnqueuingThresholdP3Lower=alaQoSPortEnqueuingThresholdP3Lower, alaQoSMIBAppliedMACGroupsObjects=alaQoSMIBAppliedMACGroupsObjects, alaQoSConfigClearLog=alaQoSConfigClearLog, alaQoSAppliedConditionDestinationIpv6Mask=alaQoSAppliedConditionDestinationIpv6Mask, alaQoSQueueSlot=alaQoSQueueSlot, alaQoSConditionDestinationTcpPort=alaQoSConditionDestinationTcpPort, alaQoSAppliedVlanGroupEntry=alaQoSAppliedVlanGroupEntry, alaQoSAppliedActionPIRStatus=alaQoSAppliedActionPIRStatus, alaQoSAppliedServiceProtocol=alaQoSAppliedServiceProtocol, alaQoSAppliedConditionDestinationPortEnd=alaQoSAppliedConditionDestinationPortEnd, alaQoSConfigFlush=alaQoSConfigFlush, alaQoSSlotThreshold1High=alaQoSSlotThreshold1High, alaQoSSlotWredThresholdP3Lower=alaQoSSlotWredThresholdP3Lower, alaQoSAppliedActionPBSStatus=alaQoSAppliedActionPBSStatus, alaQoSAppliedConditionSourceMacGroupStatus=alaQoSAppliedConditionSourceMacGroupStatus, alaQoSAppliedValidityPeriodEndHour=alaQoSAppliedValidityPeriodEndHour, alaQoSActionWredMinimumThresholdStatus=alaQoSActionWredMinimumThresholdStatus, alaQoSImportPrefix=alaQoSImportPrefix, alaQoSActionMaximumBandwidthStatus=alaQoSActionMaximumBandwidthStatus, alaQoSClassifyL2DestinationResultRule=alaQoSClassifyL2DestinationResultRule, alaQoSValidityPeriodEntry=alaQoSValidityPeriodEntry, alaQoSPortCOS0MinimumBandwidth=alaQoSPortCOS0MinimumBandwidth, alaQoSRuleCondition=alaQoSRuleCondition, alaQoSClassifySourcePort=alaQoSClassifySourcePort, alaQoSAppliedImportEntry=alaQoSAppliedImportEntry, alaQoSAppliedPortGroupPort=alaQoSAppliedPortGroupPort, alaQoSAppliedConditionInner8021pEnd=alaQoSAppliedConditionInner8021pEnd, alaQoSAppliedConditionSourceSlot=alaQoSAppliedConditionSourceSlot, alaQoSConditionSourceUdpPortStatus=alaQoSConditionSourceUdpPortStatus, alaQoSConfigReflexiveTimeout=alaQoSConfigReflexiveTimeout, alaQoSAppliedValidityPeriodMonths=alaQoSAppliedValidityPeriodMonths, alaQoSMIBHwLoopBackProfileObjects=alaQoSMIBHwLoopBackProfileObjects, alaQoSAppliedConditionDestinationIpAddr=alaQoSAppliedConditionDestinationIpAddr, alaQoSMIBConfigObjects=alaQoSMIBConfigObjects, alaQoSAppliedConditionSourceIpPortStatus=alaQoSAppliedConditionSourceIpPortStatus, alaQoSHwLoopbackProfileEntry=alaQoSHwLoopbackProfileEntry, alaQoSConfigAppliedUserportShutdown=alaQoSConfigAppliedUserportShutdown, alaQoSValidityPeriodDays=alaQoSValidityPeriodDays, alaQoSAppliedConditionSourcePortEnd=alaQoSAppliedConditionSourcePortEnd, alaQoSSlotWredThresholdP1Upper=alaQoSSlotWredThresholdP1Upper, alaQoSMIBPortObjects=alaQoSMIBPortObjects, alaQoSConditionMulticastIpMask=alaQoSConditionMulticastIpMask, alaQoSConditionTos=alaQoSConditionTos, alaQoSAppliedActionDestinationRewriteIpAddr=alaQoSAppliedActionDestinationRewriteIpAddr, alaQoSPortAppliedMaximumReservedBandwidthStatus=alaQoSPortAppliedMaximumReservedBandwidthStatus, alaQoSPortEnqueuingThresholdP2Upper=alaQoSPortEnqueuingThresholdP2Upper, alaQoSMIBAppliedNetworkGroupsObjects=alaQoSMIBAppliedNetworkGroupsObjects, alaQoSAppliedAction8021p=alaQoSAppliedAction8021p, alaQoSAppliedActionTos=alaQoSAppliedActionTos, alaQoSPortGroupTable=alaQoSPortGroupTable, alaQoSStatsL2Events=alaQoSStatsL2Events, alaQoSPortFirPrio1EnqBytes=alaQoSPortFirPrio1EnqBytes, alaQoSAppliedConditionName=alaQoSAppliedConditionName, alaQoSAppliedActionDisposition=alaQoSAppliedActionDisposition, alaQoSValidityPeriodRowStatus=alaQoSValidityPeriodRowStatus, alaQoSPortCOS0MinimumBandwidthStatus=alaQoSPortCOS0MinimumBandwidthStatus, alaQoSSlotProtocolSsap=alaQoSSlotProtocolSsap, alaQoSActionSourceRewriteNetworkGroup=alaQoSActionSourceRewriteNetworkGroup, alaQoSMIBGroups=alaQoSMIBGroups, alaQoSPortCOS5MinimumBandwidthStatus=alaQoSPortCOS5MinimumBandwidthStatus, alaQoSConditionIpv6NHStatus=alaQoSConditionIpv6NHStatus, alaQoSAppliedActionMirrorPort=alaQoSAppliedActionMirrorPort, alaQoSQueuePacketsSent=alaQoSQueuePacketsSent, alaQoSQueueAction=alaQoSQueueAction, alaQoSPortProtocolPriorityP3=alaQoSPortProtocolPriorityP3, alaQoSVlanGroupObjects=alaQoSVlanGroupObjects, alaQoSMapGroupTable=alaQoSMapGroupTable, alaQoSNetworkGroupsSource=alaQoSNetworkGroupsSource, alaQoSPortMonitor=alaQoSPortMonitor, alaQoSPortProtocolPriorityP4=alaQoSPortProtocolPriorityP4, alaQoSConfigRevert=alaQoSConfigRevert, alaQoSSlotPcamEnableSsap=alaQoSSlotPcamEnableSsap, alaQoSSlotWredThresholdP2Upper=alaQoSSlotWredThresholdP2Upper, alaQoSAppliedConditionTcpFlags=alaQoSAppliedConditionTcpFlags, alaQoSAppliedImportSlot=alaQoSAppliedImportSlot, alaQoSPortHighDensity=alaQoSPortHighDensity)
mibBuilder.exportSymbols("ALCATEL-IND1-QOS-MIB", alaQoSConditionInner8021pEnd=alaQoSConditionInner8021pEnd, alaQoSAppliedConditionDestinationIpPort=alaQoSAppliedConditionDestinationIpPort, alaQoSPortFirPrio3EnqBytes=alaQoSPortFirPrio3EnqBytes, alaQoSAppliedRuleGroupsName=alaQoSAppliedRuleGroupsName, alaQoSPortGroupSlot=alaQoSPortGroupSlot, alaQoSConditionInnerSourceVlanStatus=alaQoSConditionInnerSourceVlanStatus, alaQoSConditionSourceNetworkGroupStatus=alaQoSConditionSourceNetworkGroupStatus, alaQoSAppliedConditionDestinationSlot=alaQoSAppliedConditionDestinationSlot, alaQoSAppliedConditionSourceVlanGroupStatus=alaQoSAppliedConditionSourceVlanGroupStatus, alaQoSAppliedServiceDestinationUdpPortStatus=alaQoSAppliedServiceDestinationUdpPortStatus, alaQoSPortUsedFFPMasks=alaQoSPortUsedFFPMasks, alaQoSAppliedConditionSourceIpv6Mask=alaQoSAppliedConditionSourceIpv6Mask, alaQoSConditionDestinationTcpPortEnd=alaQoSConditionDestinationTcpPortEnd, alaQoSClassifyIpProtocol=alaQoSClassifyIpProtocol, alaQoSAppliedConditionDestinationSlotStatus=alaQoSAppliedConditionDestinationSlotStatus, alaQoSAppliedConditionMcastIpv6AddrStatus=alaQoSAppliedConditionMcastIpv6AddrStatus, alaQoSConfigQ6PriorityWeight=alaQoSConfigQ6PriorityWeight, alaQoSPortCOS4MinimumBandwidth=alaQoSPortCOS4MinimumBandwidth, alaQoSConfigStatsResetEgress=alaQoSConfigStatsResetEgress, alaQoSAppliedRuleByteCount=alaQoSAppliedRuleByteCount, alaQoSPortCOS3MinimumBandwidthStatus=alaQoSPortCOS3MinimumBandwidthStatus, alaQoSSlotCbqThresholdP3=alaQoSSlotCbqThresholdP3, alaQoSRuleMatches=alaQoSRuleMatches, alaQoSRuleEntry=alaQoSRuleEntry, alaQoSPortFirPrio3QidDiscardPkts=alaQoSPortFirPrio3QidDiscardPkts, alaQoSMACGroupTable=alaQoSMACGroupTable, alaQoSConfigClassifyl3Bridged=alaQoSConfigClassifyl3Bridged, alaQoSAppliedConditionSourceIpv6AddrStatus=alaQoSAppliedConditionSourceIpv6AddrStatus, alaQoSConditionInnerSourceVlan=alaQoSConditionInnerSourceVlan, alaQoSPortFirPrio3DeqBytes=alaQoSPortFirPrio3DeqBytes, alaQoSClassify8021p=alaQoSClassify8021p, alaQoSValidityPeriodEndHour=alaQoSValidityPeriodEndHour, alaQoSRuleGroupPacketCount=alaQoSRuleGroupPacketCount, alaQoSAppliedActionDscpStatus=alaQoSAppliedActionDscpStatus, alaQoSAppliedRuleGroupRuleName=alaQoSAppliedRuleGroupRuleName, alaQoSAppliedVlanGroupStatus=alaQoSAppliedVlanGroupStatus, alaQoSMIBNetworkGroupsObjects=alaQoSMIBNetworkGroupsObjects, alaQoSMIBAppliedRuleGroupObjects=alaQoSMIBAppliedRuleGroupObjects, alaQoSAppliedRuleCondition=alaQoSAppliedRuleCondition, alaQoSRulePrecedence=alaQoSRulePrecedence, alaQoSRuleByteCount=alaQoSRuleByteCount, alaQoSConditionDestinationInterfaceType=alaQoSConditionDestinationInterfaceType, alaQoSConditionDestinationIpPort=alaQoSConditionDestinationIpPort, alaQoSAppliedConditionSourceUdpPort=alaQoSAppliedConditionSourceUdpPort, alaQoSAppliedServiceSourceUdpPortEnd=alaQoSAppliedServiceSourceUdpPortEnd, alaQoSActionCounterColor=alaQoSActionCounterColor, alaQoSPortProtocolPriorityP6=alaQoSPortProtocolPriorityP6, alaQoSPortPdiPriorityP1=alaQoSPortPdiPriorityP1, alaQoSAppliedServiceDestinationIpPort=alaQoSAppliedServiceDestinationIpPort, alaQoSSlotProtocolEntry=alaQoSSlotProtocolEntry, alaQoSAppliedConditionSourceIpAddrStatus=alaQoSAppliedConditionSourceIpAddrStatus, alaQoSNetworkGroupStatus=alaQoSNetworkGroupStatus, alaQoSPortFirPrio0WredDiscardPkts=alaQoSPortFirPrio0WredDiscardPkts, alaQoSSlotWredThresholdStatus=alaQoSSlotWredThresholdStatus, alaQoSSlotProtocolTable=alaQoSSlotProtocolTable, alaQoSVlanGroupEntry=alaQoSVlanGroupEntry, alaQoSAppliedRuleGroupTable=alaQoSAppliedRuleGroupTable, alaQoSAppliedConditionDestinationNetworkGroupStatus=alaQoSAppliedConditionDestinationNetworkGroupStatus, alaQoSConditionMulticastNetworkGroupStatus=alaQoSConditionMulticastNetworkGroupStatus, alaQoSActionPeakBandwidth=alaQoSActionPeakBandwidth, alaQoSPortFirPrio2WredDiscardPkts=alaQoSPortFirPrio2WredDiscardPkts, PYSNMP_MODULE_ID=alaQoSMIB, alaQoSConditionSourceVlan=alaQoSConditionSourceVlan, alaQoSActionMinimumBandwidth=alaQoSActionMinimumBandwidth, alaQoSStatsReflexiveCorrections=alaQoSStatsReflexiveCorrections, alaQoSSlotBuffersDenied=alaQoSSlotBuffersDenied, alaQoSPortProtocolEntry=alaQoSPortProtocolEntry, alaQoSAppliedMapGroupKey=alaQoSAppliedMapGroupKey, alaQoSAppliedNetworkGroupsTable=alaQoSAppliedNetworkGroupsTable, alaQoSConditionSourceInterfaceType=alaQoSConditionSourceInterfaceType, alaQoSPortEnqueuingThresholdP2Lower=alaQoSPortEnqueuingThresholdP2Lower, alaQoSConfigDefaultMulticastDisposition=alaQoSConfigDefaultMulticastDisposition, alaQoSAppliedPortGroupsTable=alaQoSAppliedPortGroupsTable, alaQoSConditionDestinationMacGroup=alaQoSConditionDestinationMacGroup, alaQoSConditionInnerSourceVlanGroup=alaQoSConditionInnerSourceVlanGroup, alaQoSPortPdiEntry=alaQoSPortPdiEntry, alaQoSAppliedRuleTrapEvents=alaQoSAppliedRuleTrapEvents, alaQoSPortCOS0MaximumBandwidthStatus=alaQoSPortCOS0MaximumBandwidthStatus, alaQoSStatsMulticastMatches=alaQoSStatsMulticastMatches, alaQoSMIBRuleGroupsObjects=alaQoSMIBRuleGroupsObjects, alaQoSAppliedRuleRowStatus=alaQoSAppliedRuleRowStatus, alaQoSAppliedMACGroupsSource=alaQoSAppliedMACGroupsSource, alaQoSMIBPortGroupObjects=alaQoSMIBPortGroupObjects, alaQoSPortDEIMarking=alaQoSPortDEIMarking, alaQoSPortCOS1MinimumBandwidth=alaQoSPortCOS1MinimumBandwidth, alaQoSSlotProtocolDsap=alaQoSSlotProtocolDsap, alaQoSQueuePort=alaQoSQueuePort, alaQoSMACGroupsName=alaQoSMACGroupsName, alaQoSValidityPeriodInterval=alaQoSValidityPeriodInterval, alaQoSAppliedConditionIpProtocol=alaQoSAppliedConditionIpProtocol, alaQoSActionPriorityStatus=alaQoSActionPriorityStatus, alaQoSAppliedConditionDestinationInterfaceTypeStatus=alaQoSAppliedConditionDestinationInterfaceTypeStatus, alaQoSPortInterfaceType=alaQoSPortInterfaceType, alaQoSAppliedValidityPeriodEntry=alaQoSAppliedValidityPeriodEntry, alaQoSAppliedConditionDestinationMacAddrStatus=alaQoSAppliedConditionDestinationMacAddrStatus, alaQoSAppliedConditionIcmpTypeStatus=alaQoSAppliedConditionIcmpTypeStatus, alaQoSConditionInnerSourceVlanGroupStatus=alaQoSConditionInnerSourceVlanGroupStatus, alaQoSAppliedActionRedirectPort=alaQoSAppliedActionRedirectPort, alaQoSPortAppliedMaximumDefaultDepthStatus=alaQoSPortAppliedMaximumDefaultDepthStatus, alaQoSMACGroupsTable=alaQoSMACGroupsTable, alaQoSConditionSourcePort=alaQoSConditionSourcePort, alaQoSNetworkGroupsEntry=alaQoSNetworkGroupsEntry, alaQoSRuleGroupTable=alaQoSRuleGroupTable, alaQoSMapGroupsName=alaQoSMapGroupsName, alaQoSConfigUrgentPriorityWeight=alaQoSConfigUrgentPriorityWeight, alaQoSAppliedActionMapGroupStatus=alaQoSAppliedActionMapGroupStatus, alaQoSSlotBuffersDeniedAverage=alaQoSSlotBuffersDeniedAverage, alaQoSServiceSourceIpPortStatus=alaQoSServiceSourceIpPortStatus, alaQoSPortCOS4MaximumBandwidthStatus=alaQoSPortCOS4MaximumBandwidthStatus, alaQoSStatsL3IngressEvents=alaQoSStatsL3IngressEvents, alaQoSPortFirPrio1WredDiscardPkts=alaQoSPortFirPrio1WredDiscardPkts, alaQoSMIBAppliedActionObjects=alaQoSMIBAppliedActionObjects, alaQoSPortCOS4MinimumBandwidthStatus=alaQoSPortCOS4MinimumBandwidthStatus, alaQoSAppliedMACGroupMacMask=alaQoSAppliedMACGroupMacMask, alaQoSVlanGroupsEntry=alaQoSVlanGroupsEntry, alaQoSVlanGroupsName=alaQoSVlanGroupsName, alaQoSRuleGroupsStatus=alaQoSRuleGroupsStatus, alaQoSAppliedConditionSourceIpPortEnd=alaQoSAppliedConditionSourceIpPortEnd, alaQoSAppliedNetworkGroupsEntry=alaQoSAppliedNetworkGroupsEntry, alaQoSImportIndex=alaQoSImportIndex, alaQoSMIBAppliedPortGroupsObjects=alaQoSMIBAppliedPortGroupsObjects, alaQoSSlotFreeBuffers1=alaQoSSlotFreeBuffers1, alaQoSAppliedConditionInnerSourceVlanStatus=alaQoSAppliedConditionInnerSourceVlanStatus, alaQoSAppliedConditionIpv6NHStatus=alaQoSAppliedConditionIpv6NHStatus, alaQoSActionRedirectAgg=alaQoSActionRedirectAgg, alaQoSValidityPeriodHourStatus=alaQoSValidityPeriodHourStatus, alaQoSAppliedRuleName=alaQoSAppliedRuleName, alaQoSAppliedServiceSourceIpPort=alaQoSAppliedServiceSourceIpPort, alaQoSPortMaximumBandwidth=alaQoSPortMaximumBandwidth, alaQoSConfigAutoNMS=alaQoSConfigAutoNMS, alaQoSHwLoopbackSourceMac=alaQoSHwLoopbackSourceMac, alaQoSAppliedRulePacketCount=alaQoSAppliedRulePacketCount, alaQoSAppliedServiceGroupStatus=alaQoSAppliedServiceGroupStatus, alaQoSAppliedActionSourceRewriteIpAddr=alaQoSAppliedActionSourceRewriteIpAddr, alaQoSAppliedServiceSourceTcpPortStatus=alaQoSAppliedServiceSourceTcpPortStatus, alaQoSPortMaximumReservedBandwidth=alaQoSPortMaximumReservedBandwidth, alaQoSRuleExcessPacketCount=alaQoSRuleExcessPacketCount, alaQoSPortFreeFFPMasks=alaQoSPortFreeFFPMasks, alaQoSPortFirPrio2EnqPkts=alaQoSPortFirPrio2EnqPkts, alaQoSClassifyIGMPResultDisposition=alaQoSClassifyIGMPResultDisposition, alaQoSClassifyDestinationInterfaceType=alaQoSClassifyDestinationInterfaceType, alaQoSVlanGroupsTable=alaQoSVlanGroupsTable, alaQoSConditionSource=alaQoSConditionSource, alaQoSAppliedConditionDestinationIpPortEnd=alaQoSAppliedConditionDestinationIpPortEnd, alaQoSPortReset=alaQoSPortReset, alaQoSConditionIpProtocol=alaQoSConditionIpProtocol, alaQoSStatsFailedNIMessages=alaQoSStatsFailedNIMessages, alaQoSPortFirPrio2EnqBytes=alaQoSPortFirPrio2EnqBytes, alaQoSAppliedServiceDestinationTcpPort=alaQoSAppliedServiceDestinationTcpPort, alaQoSConditionServiceStatus=alaQoSConditionServiceStatus, alaQoSConditionSourceIpMask=alaQoSConditionSourceIpMask, alaQoSSlotCbqThresholdMode=alaQoSSlotCbqThresholdMode, alaQoSAppliedConditionInnerSourceVlanGroupStatus=alaQoSAppliedConditionInnerSourceVlanGroupStatus, alaQoSAppliedMACGroupsEntry=alaQoSAppliedMACGroupsEntry, alaQoSStatsBadFragments=alaQoSStatsBadFragments, alaQoSConditionTcpEstablished=alaQoSConditionTcpEstablished, alaQoSAppliedServiceEntry=alaQoSAppliedServiceEntry, alaQoSNetworkGroupTable=alaQoSNetworkGroupTable, alaQoSAppliedPortGroupPortEnd=alaQoSAppliedPortGroupPortEnd, alaQoSAppliedServiceGroupsEntry=alaQoSAppliedServiceGroupsEntry, alaQoSActionEntry=alaQoSActionEntry, alaQoSPortGroupEntry=alaQoSPortGroupEntry, alaQoSSlotPcamId=alaQoSSlotPcamId, alaQoSPortEntry=alaQoSPortEntry, alaQoSPortEnqueuingThresholdP0Lower=alaQoSPortEnqueuingThresholdP0Lower, alaQoSAppliedRuleGreenCount=alaQoSAppliedRuleGreenCount, alaQoSConditionDestinationIpPortStatus=alaQoSConditionDestinationIpPortStatus, alaQoSAppliedRuleNonGreenCount=alaQoSAppliedRuleNonGreenCount, alaQoSAppliedRuleGroupByteCount=alaQoSAppliedRuleGroupByteCount, alaQoSAppliedActionPeakBandwidthStatus=alaQoSAppliedActionPeakBandwidthStatus, alaQoSPortCOS5MinimumBandwidth=alaQoSPortCOS5MinimumBandwidth, alaQoSAppliedActionRedirectAgg=alaQoSAppliedActionRedirectAgg, alaQoSClassifyL2SourceResultRule=alaQoSClassifyL2SourceResultRule, alaQoSAppliedConditionIpv6FlowLabel=alaQoSAppliedConditionIpv6FlowLabel, alaQoSImportEntry=alaQoSImportEntry, alaQoSConditionDestinationPort=alaQoSConditionDestinationPort, alaQoSAppliedRuleExcessByteCount=alaQoSAppliedRuleExcessByteCount, alaQoSStatsL3IngressDrops=alaQoSStatsL3IngressDrops, alaQoSStats=alaQoSStats, alaQoSImportPortgroup=alaQoSImportPortgroup, alaQoSAppliedConditionSourceMacMask=alaQoSAppliedConditionSourceMacMask, alaQoSAppliedImportIndex=alaQoSAppliedImportIndex, alaQoSMIBAppliedConditionObjects=alaQoSMIBAppliedConditionObjects, alaQoSClassifyTos=alaQoSClassifyTos, alaQoSAppliedActionMinimumBandwidthStatus=alaQoSAppliedActionMinimumBandwidthStatus, alaQoSActionLoadBalanceGroup=alaQoSActionLoadBalanceGroup, alaQoSActionLatencyStatus=alaQoSActionLatencyStatus, alaQoSConfigAppliedNatTimeout=alaQoSConfigAppliedNatTimeout, alaQoSServiceSourceUdpPortEnd=alaQoSServiceSourceUdpPortEnd, alaQoSAppliedConditionSourceSlotStatus=alaQoSAppliedConditionSourceSlotStatus, alaQoSRuleGroupsTable=alaQoSRuleGroupsTable, alaQoSPortPdiPriorityP3=alaQoSPortPdiPriorityP3, alaQoSRuleValidityPeriod=alaQoSRuleValidityPeriod, alaQoSActionMirrorModeStatus=alaQoSActionMirrorModeStatus, alaQoSConditionSourceTcpPortStatus=alaQoSConditionSourceTcpPortStatus, alaQoSAppliedValidityPeriodInterval=alaQoSAppliedValidityPeriodInterval, alaQoSMIBMACGroupsObjects=alaQoSMIBMACGroupsObjects, alaQoSAppliedRuleGroupsType=alaQoSAppliedRuleGroupsType, alaQoSAppliedConditionTcpFlagsValStatus=alaQoSAppliedConditionTcpFlagsValStatus, alaQoSPortFirPrio2DeqBytes=alaQoSPortFirPrio2DeqBytes, alaQoSPortCOS2MinimumBandwidth=alaQoSPortCOS2MinimumBandwidth, alaQoSActionRedirectSlot=alaQoSActionRedirectSlot, alaQoSServiceDestinationUdpPortEnd=alaQoSServiceDestinationUdpPortEnd, alaQoSConfig=alaQoSConfig, alaQoSConditionSourceUdpPortEnd=alaQoSConditionSourceUdpPortEnd, alaQoSServiceDestinationTcpPortEnd=alaQoSServiceDestinationTcpPortEnd, alaQoSAppliedImportPort=alaQoSAppliedImportPort, alaQoSSlotCbqThresholdP1=alaQoSSlotCbqThresholdP1, alaQoSAppliedConditionMcastIpv6Addr=alaQoSAppliedConditionMcastIpv6Addr, alaQoSConditionServiceGroup=alaQoSConditionServiceGroup, alaQoSPortGroupsSource=alaQoSPortGroupsSource, alaQoSClassifyL2DestinationResultDisposition=alaQoSClassifyL2DestinationResultDisposition, alaQoSConditionTcpFlagsMask=alaQoSConditionTcpFlagsMask, alaQoSConditionDestinationNetworkGroup=alaQoSConditionDestinationNetworkGroup, alaQoSServiceDestinationIpPort=alaQoSServiceDestinationIpPort, alaQoSAppliedConditionSourceMacAddr=alaQoSAppliedConditionSourceMacAddr, alaQoSPortQ7PriorityWeight=alaQoSPortQ7PriorityWeight, alaQoSConfigQMMACGroup=alaQoSConfigQMMACGroup, alaQoSConditionDestinationUdpPortStatus=alaQoSConditionDestinationUdpPortStatus, alaQoSActionCIRStatus=alaQoSActionCIRStatus, alaQoSStatsNonSpoofedEvents=alaQoSStatsNonSpoofedEvents, alaQoSAppliedConditionDestinationUdpPort=alaQoSAppliedConditionDestinationUdpPort, alaQoSConfigClassifyFragments=alaQoSConfigClassifyFragments, alaQoSAppliedRuleSave=alaQoSAppliedRuleSave, alaQoSConditionSourceSlotStatus=alaQoSConditionSourceSlotStatus, alaQoSServiceGroupsSource=alaQoSServiceGroupsSource, alaQoSPortFirPrio3WredDiscardPkts=alaQoSPortFirPrio3WredDiscardPkts, alaQoSPortCOS1MinimumBandwidthStatus=alaQoSPortCOS1MinimumBandwidthStatus, alaQoSPortTable=alaQoSPortTable, alaQoSConditionIpProtocolStatus=alaQoSConditionIpProtocolStatus, alaQoSAppliedServiceGroupEntry=alaQoSAppliedServiceGroupEntry, alaQoSAppliedConditionDestinationTcpPortEnd=alaQoSAppliedConditionDestinationTcpPortEnd, alaQoSSlotPcamEnableEntry=alaQoSSlotPcamEnableEntry, alaQoSPortPdiPriorityP5=alaQoSPortPdiPriorityP5, alaQoSAppliedServiceGroupsName=alaQoSAppliedServiceGroupsName, alaQoSRuleGroupStatus=alaQoSRuleGroupStatus, alaQoSAppliedRuleSource=alaQoSAppliedRuleSource, alaQoSClassifyDestinationMac=alaQoSClassifyDestinationMac, alaQoSPortMaximumDefaultDepth=alaQoSPortMaximumDefaultDepth, alaQoSMapGroupKeyEnd=alaQoSMapGroupKeyEnd, alaQoSActionPBSStatus=alaQoSActionPBSStatus, alaQoSSlotHighDensity=alaQoSSlotHighDensity, alaQoSAppliedConditionSourceVlanStatus=alaQoSAppliedConditionSourceVlanStatus, alaQoSVlanGroupsSource=alaQoSVlanGroupsSource, alaQoSAppliedVlanGroupsName=alaQoSAppliedVlanGroupsName, alaQoSAppliedConditionDestinationIpv6Addr=alaQoSAppliedConditionDestinationIpv6Addr, alaQoSServiceSourceIpPortEnd=alaQoSServiceSourceIpPortEnd, alaQoSImportPortend=alaQoSImportPortend, alaQoSSlotPcam8023Enabled=alaQoSSlotPcam8023Enabled, alaQoSRuleGroupsSource=alaQoSRuleGroupsSource, alaQoSAppliedVlanGroupTable=alaQoSAppliedVlanGroupTable, alaQoSPortProtocolRowStatus=alaQoSPortProtocolRowStatus, alaQoSAppliedActionPriorityStatus=alaQoSAppliedActionPriorityStatus, alaQoSMapGroupsTable=alaQoSMapGroupsTable)
mibBuilder.exportSymbols("ALCATEL-IND1-QOS-MIB", alaQoSConditionDestinationIpMask=alaQoSConditionDestinationIpMask, alaQoSAppliedMapGroupsName=alaQoSAppliedMapGroupsName, alaQoSRuleCountType=alaQoSRuleCountType, alaQoSRuleGroupsName=alaQoSRuleGroupsName, alaQoSHwLoopbackProfileTable=alaQoSHwLoopbackProfileTable, alaQoSMIBConditionObjects=alaQoSMIBConditionObjects, alaQoSSlotMaxBuffers=alaQoSSlotMaxBuffers, alaQoSSlotFreeBuffers2=alaQoSSlotFreeBuffers2, alaQoSClassifyMulticastIp=alaQoSClassifyMulticastIp, alaQoSServiceSourceTcpPortEnd=alaQoSServiceSourceTcpPortEnd, alaQoSConditionSourceTcpPort=alaQoSConditionSourceTcpPort, alaQoSConfigAppliedDefaultMulticastDisposition=alaQoSConfigAppliedDefaultMulticastDisposition, alaQoSAppliedPortGroupTable=alaQoSAppliedPortGroupTable, alaQoSConditionSourceIpv6AddrStatus=alaQoSConditionSourceIpv6AddrStatus, alaQoSClassify=alaQoSClassify, alaQoSSlotProtocol8023Enabled=alaQoSSlotProtocol8023Enabled, alaQoSPortMaximumDefaultDepthStatus=alaQoSPortMaximumDefaultDepthStatus, alaQoSAppliedActionMirrorModeStatus=alaQoSAppliedActionMirrorModeStatus, alaQoSMIBSlotObjects=alaQoSMIBSlotObjects, alaQoSPortFirPrio1OverflowDiscardPkts=alaQoSPortFirPrio1OverflowDiscardPkts, alaQoSMIBAppliedMapGroupObjects=alaQoSMIBAppliedMapGroupObjects, alaQoSConfigDefaultBridgedDisposition=alaQoSConfigDefaultBridgedDisposition, alaQoSConfigHighPriorityWeight=alaQoSConfigHighPriorityWeight, alaQoSServiceDestinationUdpPortStatus=alaQoSServiceDestinationUdpPortStatus, alaQoSActionMapFrom=alaQoSActionMapFrom, alaQoSAppliedNetworkGroupsName=alaQoSAppliedNetworkGroupsName, alaQoSAppliedImportText=alaQoSAppliedImportText, alaQoSAppliedVlanGroupsStatus=alaQoSAppliedVlanGroupsStatus, alaQoSAppliedServiceDestinationIpPortStatus=alaQoSAppliedServiceDestinationIpPortStatus, alaQoSPortFreeFFPRules=alaQoSPortFreeFFPRules, alaQoSMACGroupEntry=alaQoSMACGroupEntry, alaQoSAppliedConditionInnerSourceVlan=alaQoSAppliedConditionInnerSourceVlan, alaQoSAppliedMapGroupTable=alaQoSAppliedMapGroupTable, alaQoSActionMaximumDepth=alaQoSActionMaximumDepth, alaQoSPortQueuesCreated=alaQoSPortQueuesCreated, alaQoSAppliedActionMinimumDepthStatus=alaQoSAppliedActionMinimumDepthStatus, alaQoSPortProtocolPriorityP2=alaQoSPortProtocolPriorityP2, alaQoSPortProtocolTable=alaQoSPortProtocolTable, alaQoSAppliedActionTable=alaQoSAppliedActionTable, alaQoSAppliedVlanGroupsSource=alaQoSAppliedVlanGroupsSource, alaQoSServiceDestinationTcpPortStatus=alaQoSServiceDestinationTcpPortStatus, alaQoSAppliedServiceName=alaQoSAppliedServiceName, alaQoSActionCBS=alaQoSActionCBS, alaQoSAppliedActionMaximumBandwidth=alaQoSAppliedActionMaximumBandwidth, alaQoSPortReservedBandwidth=alaQoSPortReservedBandwidth, alaQoSSlotPcamTable=alaQoSSlotPcamTable, alaQoSConditionDestinationNetworkGroupStatus=alaQoSConditionDestinationNetworkGroupStatus, alaQoSAppliedActionLoadBalanceGroupStatus=alaQoSAppliedActionLoadBalanceGroupStatus, alaQoSQueuePriority=alaQoSQueuePriority, alaQoSMapGroupEntry=alaQoSMapGroupEntry, alaQoSAppliedConditionRowStatus=alaQoSAppliedConditionRowStatus, alaQoSActionMaximumBuffers=alaQoSActionMaximumBuffers, alaQoSAppliedActionLatency=alaQoSAppliedActionLatency, alaQoSConditionTosStatus=alaQoSConditionTosStatus, alaQoSConfigAppliedClassifyFragments=alaQoSConfigAppliedClassifyFragments, alaQoSAppliedPortGroupsEntry=alaQoSAppliedPortGroupsEntry, alaQoSActionMirrorMode=alaQoSActionMirrorMode, alaQoSPortAppliedMaximumDefaultDepth=alaQoSPortAppliedMaximumDefaultDepth, alaQoSAppliedConditionIcmpType=alaQoSAppliedConditionIcmpType, alaQoSActionWredMaximumThreshold=alaQoSActionWredMaximumThreshold, alaQoSActionDscpStatus=alaQoSActionDscpStatus, alaQoSConfigAppliedClassifyl3Bridged=alaQoSConfigAppliedClassifyl3Bridged, alaQoSPortPdiPriorityP6=alaQoSPortPdiPriorityP6, alaQoSClassifyMulticastResultDisposition=alaQoSClassifyMulticastResultDisposition, alaQoSRuleActive=alaQoSRuleActive, alaQoSVlanGroupVlan=alaQoSVlanGroupVlan, alaQoSMIBActionObjects=alaQoSMIBActionObjects, alaQoSStatsClassifierMaxNodes=alaQoSStatsClassifierMaxNodes, alaQoSAppliedActionPriority=alaQoSAppliedActionPriority, alaQoSConditionDestinationIpv6AddrStatus=alaQoSConditionDestinationIpv6AddrStatus, alaQoSAppliedConditionSourceIpMask=alaQoSAppliedConditionSourceIpMask, alaQoSAppliedServiceGroupsStatus=alaQoSAppliedServiceGroupsStatus, alaQoSPortEnabled=alaQoSPortEnabled, alaQoSQueueAverageBandwidth=alaQoSQueueAverageBandwidth, alaQoSAppliedConditionDestinationIpMask=alaQoSAppliedConditionDestinationIpMask, alaQoSAppliedConditionDscpEnd=alaQoSAppliedConditionDscpEnd, alaQoSQueueMaximumBuffers=alaQoSQueueMaximumBuffers, alaQoSMIBAppliedRuleGroupsObjects=alaQoSMIBAppliedRuleGroupsObjects, alaQoSPortCOS3MinimumBandwidth=alaQoSPortCOS3MinimumBandwidth, alaQoSAppliedConditionSourceMacAddrStatus=alaQoSAppliedConditionSourceMacAddrStatus, alaQoSAppliedServiceSourceIpPortStatus=alaQoSAppliedServiceSourceIpPortStatus, alaQoSActionPeakBandwidthStatus=alaQoSActionPeakBandwidthStatus, alaQoSNetworkGroupIpMask=alaQoSNetworkGroupIpMask, alaQoSPortMaximumDefaultBuffersStatus=alaQoSPortMaximumDefaultBuffersStatus, alaQoSPortMaximumBandwidthStatus=alaQoSPortMaximumBandwidthStatus, alaQoSConfigForwardLog=alaQoSConfigForwardLog, alaQoSPortMaximumSignalledBandwidthStatus=alaQoSPortMaximumSignalledBandwidthStatus, alaQoSAppliedActionCBSStatus=alaQoSAppliedActionCBSStatus, alaQoSRuleSource=alaQoSRuleSource, alaQoSAppliedRuleType=alaQoSAppliedRuleType, alaQoSPortRowStatus=alaQoSPortRowStatus, alaQoSConditionIpv6Traffic=alaQoSConditionIpv6Traffic, alaQoSConfigDebug=alaQoSConfigDebug, alaQoSAppliedConditionMulticastIpAddrStatus=alaQoSAppliedConditionMulticastIpAddrStatus, alaQoSMIBPortGroupsObjects=alaQoSMIBPortGroupsObjects, alaQoSActionJitterStatus=alaQoSActionJitterStatus, alaQoSAppliedValidityPeriodRowStatus=alaQoSAppliedValidityPeriodRowStatus, alaQoSConditionRowStatus=alaQoSConditionRowStatus, alaQoSAppliedPortGroupEntry=alaQoSAppliedPortGroupEntry, alaQoSConditionDscpMask=alaQoSConditionDscpMask, alaQoSPortGroupsStatus=alaQoSPortGroupsStatus, alaQoSAppliedActionRedirectSlot=alaQoSAppliedActionRedirectSlot, alaQoSConfigNatTimeout=alaQoSConfigNatTimeout, alaQoSStatsDropServicesEvents=alaQoSStatsDropServicesEvents, alaQoSClassifySourceSlot=alaQoSClassifySourceSlot, alaQoSAppliedConditionDestinationIpv6AddrStatus=alaQoSAppliedConditionDestinationIpv6AddrStatus, alaQoSConditionSourceIpAddrStatus=alaQoSConditionSourceIpAddrStatus, alaQoSPortAppliedMaximumSignalledBandwidthStatus=alaQoSPortAppliedMaximumSignalledBandwidthStatus, alaQoSConfigQMPage=alaQoSConfigQMPage, alaQoSRuleNonRedCount=alaQoSRuleNonRedCount, alaQoSSlotPcamEnableEthertype=alaQoSSlotPcamEnableEthertype, alaQoSAppliedVlanGroupsTable=alaQoSAppliedVlanGroupsTable, alaQoSAppliedConditionSourceUdpPortStatus=alaQoSAppliedConditionSourceUdpPortStatus, alaQoSAppliedMACGroupsName=alaQoSAppliedMACGroupsName, alaQoSActionMapGroupStatus=alaQoSActionMapGroupStatus, alaQoSPortPhysicalBandwidth=alaQoSPortPhysicalBandwidth, alaQoSSlotWredThresholdP2Lower=alaQoSSlotWredThresholdP2Lower, alaQoSRuleGroupCountType=alaQoSRuleGroupCountType, alaQoSServiceDestinationUdpPort=alaQoSServiceDestinationUdpPort, alaQoSPortFloodQid=alaQoSPortFloodQid, alaQoSMapGroupStatus=alaQoSMapGroupStatus, alaQoSAppliedAction8021pStatus=alaQoSAppliedAction8021pStatus, alaQoSPortFirPrio1DeqPkts=alaQoSPortFirPrio1DeqPkts, alaQoSAppliedRuleGroupsEntry=alaQoSAppliedRuleGroupsEntry, alaQoSActionDestinationRewriteIpAddrStatus=alaQoSActionDestinationRewriteIpAddrStatus, alaQoSSlotWredThresholdP3Upper=alaQoSSlotWredThresholdP3Upper, alaQoSPortFirPrio0OverflowDiscardPkts=alaQoSPortFirPrio0OverflowDiscardPkts, alaQoSActionMaximumDepthStatus=alaQoSActionMaximumDepthStatus, alaQoSAppliedConditionServiceGroup=alaQoSAppliedConditionServiceGroup)
