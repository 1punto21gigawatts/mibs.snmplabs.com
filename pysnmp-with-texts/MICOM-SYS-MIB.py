#
# PySNMP MIB module MICOM-SYS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MICOM-SYS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:12:08 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint")
micom_oscar, = mibBuilder.importSymbols("MICOM-OSCAR-MIB", "micom-oscar")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Integer32, TimeTicks, Gauge32, Bits, Counter64, ModuleIdentity, MibIdentifier, NotificationType, ObjectIdentity, NotificationType, iso, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Integer32", "TimeTicks", "Gauge32", "Bits", "Counter64", "ModuleIdentity", "MibIdentifier", "NotificationType", "ObjectIdentity", "NotificationType", "iso", "Unsigned32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
micom_system = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 1)).setLabel("micom-system")
sys_configuration = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1)).setLabel("sys-configuration")
sys_control = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 2)).setLabel("sys-control")
sys_statistics = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 3)).setLabel("sys-statistics")
sys_trap = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 4)).setLabel("sys-trap")
mcmSysHWTypeGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 1))
mcmSysHWTypeModelType = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(50, 50)).setFixedLength(50)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysHWTypeModelType.setStatus('deprecated')
if mibBuilder.loadTexts: mcmSysHWTypeModelType.setDescription('NAME = ; DESC = **NOTE: THIS OBJECT HAS BEEN \\ DEPRECATED. Its functionality \\ has been replaced by the \\ mcmSysHWTypeCPUType object \\ located below in this group.**\\ \\ The model name/type of the \\ access device.; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
mcmSysHWTypeRevisionLevel = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysHWTypeRevisionLevel.setStatus('mandatory')
if mibBuilder.loadTexts: mcmSysHWTypeRevisionLevel.setDescription('NAME = ; DESC = The revision level of the \\ access device.; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
mcmSysHWTypeManufRevDate = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(25, 25)).setFixedLength(25)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysHWTypeManufRevDate.setStatus('mandatory')
if mibBuilder.loadTexts: mcmSysHWTypeManufRevDate.setDescription('NAME = ; DESC = The manufacture/revision date \\ of the access device .; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
mcmSysHWTypeSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(9, 9)).setFixedLength(9)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysHWTypeSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: mcmSysHWTypeSerialNumber.setDescription('NAME = ; DESC = The serial number of \\ the access device..; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
mcmSysHWTypeModuleID = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysHWTypeModuleID.setStatus('mandatory')
if mibBuilder.loadTexts: mcmSysHWTypeModuleID.setDescription('NAME = ; DESC = The module ID of the access \\ device.; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
mcmSysHWTypeMACAddress = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysHWTypeMACAddress.setStatus('mandatory')
if mibBuilder.loadTexts: mcmSysHWTypeMACAddress.setDescription('NAME = ; DESC = The base MAC address assigned \\ to the access device.; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
mcmSysHWTypeCPUType = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(50, 50)).setFixedLength(50)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysHWTypeCPUType.setStatus('mandatory')
if mibBuilder.loadTexts: mcmSysHWTypeCPUType.setDescription('NAME = ; DESC = Indicates the CPU type for this \\ access device; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
mcmSysHWTypeGenCfgType = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reserved", 1), ("passport4400", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysHWTypeGenCfgType.setStatus('mandatory')
if mibBuilder.loadTexts: mcmSysHWTypeGenCfgType.setDescription('NAME = ; DESC = Indicates the model type for this \\ access device.; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
mcmSysCfgGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 2))
mcmSysCfgCPUConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("base", 1), ("companion040", 2), ("companion060", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysCfgCPUConfiguration.setStatus('mandatory')
if mibBuilder.loadTexts: mcmSysCfgCPUConfiguration.setDescription('NAME = ; DESC = The CPU configuration for this access device.; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
mcmSysCfgPrimaryWANPort = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("present", 1), ("notPresent", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysCfgPrimaryWANPort.setStatus('mandatory')
if mibBuilder.loadTexts: mcmSysCfgPrimaryWANPort.setDescription('NAME = ; DESC = Indicates the presence of the \\ Primary WAN port.; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
mcmSysCfgPrimaryWANPortPhyMedia = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("unknown", 2), ("link56k", 3), ("generalserial", 4), ("t1e1", 5), ("isdn", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysCfgPrimaryWANPortPhyMedia.setStatus('mandatory')
if mibBuilder.loadTexts: mcmSysCfgPrimaryWANPortPhyMedia.setDescription('NAME = ; DESC = Indicates the physical media of Primary WAN port.; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
mcmSysCfgDCESerialPortPhyMedia = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("unknown", 2), ("rs232", 3), ("v35", 4), ("v36", 5), ("x21", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysCfgDCESerialPortPhyMedia.setStatus('mandatory')
if mibBuilder.loadTexts: mcmSysCfgDCESerialPortPhyMedia.setDescription('NAME = ; DESC = Indicates the detected DCE \\ serial port on the access \\ device.; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
mcmSysCfgQUICCExpansionModule1 = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("present", 1), ("notPresent", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysCfgQUICCExpansionModule1.setStatus('mandatory')
if mibBuilder.loadTexts: mcmSysCfgQUICCExpansionModule1.setDescription('NAME = ; DESC = QUICC Expansion module detected.; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
mcmSysCfgQUICCExpansionModule2 = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("present", 1), ("notPresent", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysCfgQUICCExpansionModule2.setStatus('mandatory')
if mibBuilder.loadTexts: mcmSysCfgQUICCExpansionModule2.setDescription('NAME = ; DESC = QUICC Expansion module-2 is detected.; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
mcmSysCfgFeatureRTCBatteryStatus = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noBattery", 1), ("batteryLow", 2), ("batteryOK", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysCfgFeatureRTCBatteryStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mcmSysCfgFeatureRTCBatteryStatus.setDescription('NAME = ; DESC = TimeOfDay/SRAM module detected.; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
mcmSysCfgDRAMSize = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("size4Mbytes", 1), ("size8Mbytes", 2), ("size16Mbytes", 3), ("size32Mbytes", 4), ("size64Mbytes", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysCfgDRAMSize.setStatus('mandatory')
if mibBuilder.loadTexts: mcmSysCfgDRAMSize.setDescription('NAME = ; DESC = Total installed DRAM memory size in megabytes.; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
mcmSysCfgFlashMemorySize = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("size4Mbytes", 1), ("size8Mbytes", 2), ("size16Mbytes", 3), ("size32Mbytes", 4), ("size64Mbytes", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysCfgFlashMemorySize.setStatus('mandatory')
if mibBuilder.loadTexts: mcmSysCfgFlashMemorySize.setDescription('NAME = ; DESC = Total installed Flash memory size in megabytes.; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
mcmSysLimTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 3), )
if mibBuilder.loadTexts: mcmSysLimTable.setStatus('mandatory')
if mibBuilder.loadTexts: mcmSysLimTable.setDescription('NAME = ; DESC = Table to view an individual Logical \\ Interface Modules(LIM) on the access \\ device.; HELP = Table to view the hardware \\ CAPABILITIES = NET_CFG, VPN_DISP;')
mcmSysLimEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 3, 1), ).setIndexNames((0, "MICOM-SYS-MIB", "mcmSysLimModuleAddress"))
if mibBuilder.loadTexts: mcmSysLimEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mcmSysLimEntry.setDescription('NAME = ; DESC = Entry pertaining to a specific logical module.; HELP = This includes the Name, Part number, and rev. level.; CAPABILITIES = ;')
mcmSysLimModuleAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("limA", 1), ("lim1", 2), ("lim2", 3), ("lim3", 4), ("lim4", 5), ("limB", 6), ("limC", 7), ("limD", 8), ("limE", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysLimModuleAddress.setStatus('mandatory')
if mibBuilder.loadTexts: mcmSysLimModuleAddress.setDescription('NAME = ; DESC = lim (logical interface module) identifies \\ the address of the module within the unit; HELP = ; CAPABILITIES = ;')
mcmSysLimModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysLimModuleName.setStatus('mandatory')
if mibBuilder.loadTexts: mcmSysLimModuleName.setDescription('NAME = ; DESC = Displays the name of the module \\ in the specific location; NOTE : this object was previously named \\ mcmSysCardModuleName.; HELP = ; CAPABILITIES = ;')
mcmSysLimPcbPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysLimPcbPartNumber.setStatus('mandatory')
if mibBuilder.loadTexts: mcmSysLimPcbPartNumber.setDescription('NAME = ; DESC = Displays the part number of the module in \\ the specific location; HELP = ; CAPABILITIES = ;')
mcmSysLimPcbRelease = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysLimPcbRelease.setStatus('mandatory')
if mibBuilder.loadTexts: mcmSysLimPcbRelease.setDescription('NAME = ; DESC = Displays the release level of the module in \\ the specific location.; HELP = ; CAPABILITIES = ;')
mcmSysLimSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 13))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysLimSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: mcmSysLimSerialNumber.setDescription('NAME = ; DESC = Displays the serial number of the module in \\ the specific location.; HELP = ; CAPABILITIES = ;')
mcmSysLimMfgDate = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysLimMfgDate.setStatus('mandatory')
if mibBuilder.loadTexts: mcmSysLimMfgDate.setDescription('NAME = ; DESC = Displays the manufacturing date of the module in \\ the specific location.; HELP = ; CAPABILITIES = ;')
mcmSysPhysTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 16), )
if mibBuilder.loadTexts: mcmSysPhysTable.setStatus('mandatory')
if mibBuilder.loadTexts: mcmSysPhysTable.setDescription('NAME = ; DESC = Table to map physical cards to \\ Logical Interface Modules (LIM) on \\ the access device HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
mcmSysPhysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 16, 1), ).setIndexNames((0, "MICOM-SYS-MIB", "mcmSysPhysModuleAddress"))
if mibBuilder.loadTexts: mcmSysPhysEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mcmSysPhysEntry.setDescription('NAME = ; DESC = Entry pertaining to a specific physical module.; HELP = ; CAPABILITIES = ;')
mcmSysPhysModuleAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 16, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysPhysModuleAddress.setStatus('mandatory')
if mibBuilder.loadTexts: mcmSysPhysModuleAddress.setDescription('NAME = ; DESC = The value of this object identifies \\ the physical slot address of the module \\ within the unit; HELP = ; CAPABILITIES = ;')
mcmSysLogModuleAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("limA", 1), ("lim1", 2), ("lim2", 3), ("lim3", 4), ("lim4", 5), ("limB", 6), ("limC", 7), ("limD", 8), ("limE", 9), ("none", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysLogModuleAddress.setStatus('mandatory')
if mibBuilder.loadTexts: mcmSysLogModuleAddress.setDescription('NAME = ; DESC = The value of this object identifies \\ the logical interface module (lim) address; HELP = ; CAPABILITIES = ;')
mcmSysChassisGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 4))
mcmSysChassisNumberOfModules = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("moduleThree", 1), ("moduleFive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysChassisNumberOfModules.setStatus('mandatory')
if mibBuilder.loadTexts: mcmSysChassisNumberOfModules.setDescription('NAME = ; DESC = Chassis style: number of modules.; NOTE : this object was previously named \\ mcmSysChassisNumberOfSlots.; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
mcmSysChassisCoolingFan = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("running", 1), ("notRunning", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysChassisCoolingFan.setStatus('mandatory')
if mibBuilder.loadTexts: mcmSysChassisCoolingFan.setDescription('NAME = ; DESC =Chassis cooling fan status.; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
mcmSysChassisPowerSupplyType = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("type-A", 1), ("type-B", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysChassisPowerSupplyType.setStatus('mandatory')
if mibBuilder.loadTexts: mcmSysChassisPowerSupplyType.setDescription('NAME = ; DESC = Specifies the type of power supply \\ based on type of voltage; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
mcmSysChassisPowerSupplyStatus = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("fault", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysChassisPowerSupplyStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mcmSysChassisPowerSupplyStatus.setDescription('NAME = ; DESC = Fault indicates that at least one \\ power supply module is down; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
mcmSysChassisPowerSupplyModuleCount = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 4, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysChassisPowerSupplyModuleCount.setStatus('mandatory')
if mibBuilder.loadTexts: mcmSysChassisPowerSupplyModuleCount.setDescription('NAME = ; DESC = Specifies the number of power \\ supply modules installed; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
mcmSysChassisPowerSupplyRedundant = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 4, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysChassisPowerSupplyRedundant.setStatus('mandatory')
if mibBuilder.loadTexts: mcmSysChassisPowerSupplyRedundant.setDescription('NAME = ; DESC = Indicates whether there are \\ redundant power supply modules; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
mcmSysTimeOfDayGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 5))
mcmSysTimeOfDay = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 5, 1))
mcmSysTimeOfDaySec = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmSysTimeOfDaySec.setStatus('mandatory')
if mibBuilder.loadTexts: mcmSysTimeOfDaySec.setDescription('NAME = ; DESC = System Time of day in seconds.; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
mcmSysTimeOfDayMin = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmSysTimeOfDayMin.setStatus('mandatory')
if mibBuilder.loadTexts: mcmSysTimeOfDayMin.setDescription('NAME = ; DESC = System Time of day in minutes.; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
mcmSysTimeOfDayHour = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmSysTimeOfDayHour.setStatus('mandatory')
if mibBuilder.loadTexts: mcmSysTimeOfDayHour.setDescription('NAME = ; DESC = System Time of day in hours.; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
mcmSysTimeOfDayDay = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("sunday", 1), ("monday", 2), ("tuesday", 3), ("wednesday", 4), ("thursday", 5), ("friday", 6), ("saturday", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmSysTimeOfDayDay.setStatus('mandatory')
if mibBuilder.loadTexts: mcmSysTimeOfDayDay.setDescription('NAME = ; DESC = System Time of day, the Day.; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
mcmSysTimeOfDayDate = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmSysTimeOfDayDate.setStatus('mandatory')
if mibBuilder.loadTexts: mcmSysTimeOfDayDate.setDescription('NAME = ; DESC = System Time of day. The date.; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
mcmSysTimeOfDayMonth = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmSysTimeOfDayMonth.setStatus('mandatory')
if mibBuilder.loadTexts: mcmSysTimeOfDayMonth.setDescription('NAME = ; DESC = System Time of day. The Month.; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
mcmSysTimeOfDayYear = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1970, 2070))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmSysTimeOfDayYear.setStatus('mandatory')
if mibBuilder.loadTexts: mcmSysTimeOfDayYear.setDescription('NAME = ; DESC = System Time of day. The Year.; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
mcmSysAsciiTimeOfDay = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 5, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 25))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysAsciiTimeOfDay.setStatus('mandatory')
if mibBuilder.loadTexts: mcmSysAsciiTimeOfDay.setDescription('NAME = ; DESC = This object will give the ascii version of \\ the time of day. This would be the same time \\ as reflected by all the other objects of \\ this group put togther; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
mcmSysFirmwareGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 6))
mcmSysOperationalType = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("accessRouter", 1), ("accessRouterAndNAS", 2), ("nmCoreRouter", 3), ("concentratingRouter", 4), ("backboneRouter", 5), ("other", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmSysOperationalType.setStatus('mandatory')
if mibBuilder.loadTexts: mcmSysOperationalType.setDescription('NAME = ; DESC = Network Operational mode of this \\ access device.; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
mcmSysFirmwareConfigCommitBank = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("bank3", 1), ("bank4", 2), ("none", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmSysFirmwareConfigCommitBank.setStatus('mandatory')
if mibBuilder.loadTexts: mcmSysFirmwareConfigCommitBank.setDescription('NAME = ; DESC = The Default Confi. Image (global).; HELP = Committed Config. Image Bank.; CAPABILITIES = NET_CFG, VPN_DISP;')
mcmSysFirmwareConfigSaveBank = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bank3", 1), ("bank4", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmSysFirmwareConfigSaveBank.setStatus('mandatory')
if mibBuilder.loadTexts: mcmSysFirmwareConfigSaveBank.setDescription('NAME = ; DESC = Default Software Image Bank.; HELP = Committed Code Image (global).; CAPABILITIES = NET_CFG, VPN_DISP;')
mcmSysFirmwareConfigActiveBank = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("bank3", 1), ("bank4", 2), ("none", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmSysFirmwareConfigActiveBank.setStatus('mandatory')
if mibBuilder.loadTexts: mcmSysFirmwareConfigActiveBank.setDescription('NAME = ; DESC = The active Configuration Image Bank.; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
mcmSysFirmwareConfigReadBank = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 6, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bank3", 1), ("bank4", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysFirmwareConfigReadBank.setStatus('mandatory')
if mibBuilder.loadTexts: mcmSysFirmwareConfigReadBank.setDescription('NAME = ; DESC = The Bank that the Configuration Read from.; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
mcmSysFirmwareCodeReadBank = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 6, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bank1", 1), ("bank2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysFirmwareCodeReadBank.setStatus('mandatory')
if mibBuilder.loadTexts: mcmSysFirmwareCodeReadBank.setDescription('NAME = ; DESC =The Bank that the Code Read from.; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
mcmSysFirmwareCodeCommitBank = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 6, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("bank1", 1), ("bank2", 2), ("none", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmSysFirmwareCodeCommitBank.setStatus('mandatory')
if mibBuilder.loadTexts: mcmSysFirmwareCodeCommitBank.setDescription('NAME = ; DESC =The Bank that the Code is committed from.; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
mcmSysFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 6, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysFirmwareVersion.setStatus('mandatory')
if mibBuilder.loadTexts: mcmSysFirmwareVersion.setDescription('NAME = ; DESC = The Code Version that this access \\ device is running on.; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
mcmSysFirmwareConfigVersion = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 6, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysFirmwareConfigVersion.setStatus('mandatory')
if mibBuilder.loadTexts: mcmSysFirmwareConfigVersion.setDescription('NAME = ; DESC = The Configuration Version that this \\ access device is running on.; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
mcmSysFirmwareImageTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 7), )
if mibBuilder.loadTexts: mcmSysFirmwareImageTable.setStatus('mandatory')
if mibBuilder.loadTexts: mcmSysFirmwareImageTable.setDescription('NAME = ; DESC = The Firmware Image Table contains \\ information about the Code Image.; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
mcmSysFirmwareImageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 7, 1), ).setIndexNames((0, "MICOM-SYS-MIB", "mcmSysFirmwareImageIndex"))
if mibBuilder.loadTexts: mcmSysFirmwareImageEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mcmSysFirmwareImageEntry.setDescription('NAME = ; DESC = The entry that pertains to Code Image.; HELP = ; CAPABILITIES = ;')
mcmSysFirmwareImageIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysFirmwareImageIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mcmSysFirmwareImageIndex.setDescription('NAME = ; DESC = The Index value for a specific Image.; HELP = ; CAPABILITIES = ;')
mcmSysFirmwareImageBank = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("bank0", 1), ("bank1", 2), ("bank2", 3), ("bank3", 4), ("bank4", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysFirmwareImageBank.setStatus('mandatory')
if mibBuilder.loadTexts: mcmSysFirmwareImageBank.setDescription('NAME = ; DESC = The Specific ImageBank that holds the Code \\ Image or Config Image.; HELP = ; CAPABILITIES = ;')
mcmSysFirmwareImageSoftware = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("boot", 1), ("code", 2), ("config", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysFirmwareImageSoftware.setStatus('mandatory')
if mibBuilder.loadTexts: mcmSysFirmwareImageSoftware.setDescription('NAME = ; DESC = This indicates that the specific Software \\ is a boot Code, Image Code or a Config Code.; HELP = ; CAPABILITIES = ;')
mcmSysFirmwareImageFilename = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 7, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysFirmwareImageFilename.setStatus('mandatory')
if mibBuilder.loadTexts: mcmSysFirmwareImageFilename.setDescription('NAME = ; DESC =This indicates the File name of the Firmware.; HELP = ; CAPABILITIES = ;')
mcmSysFirmwareImageRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 7, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysFirmwareImageRevision.setStatus('mandatory')
if mibBuilder.loadTexts: mcmSysFirmwareImageRevision.setDescription('NAME = ; DESC = This indicates the Revision level of the \\ specific Firmware.; HELP = ; CAPABILITIES = ;')
mcmSysFirmwareImageSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 7, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysFirmwareImageSize.setStatus('mandatory')
if mibBuilder.loadTexts: mcmSysFirmwareImageSize.setDescription('NAME = ; DESC = This indicates the size of the Firmware in bytes.; HELP = ; CAPABILITIES = ;')
mcmSysFirmwareImageCommitStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("committed", 1), ("notCommitted", 2), ("committedAndActive", 3), ("committedAndNotActive", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysFirmwareImageCommitStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mcmSysFirmwareImageCommitStatus.setDescription('NAME = ; DESC = This indicates the Firmware Image Commit Status.; HELP = ; CAPABILITIES = ;')
mcmSysFirmwareImageBurnCount = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 7, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysFirmwareImageBurnCount.setStatus('mandatory')
if mibBuilder.loadTexts: mcmSysFirmwareImageBurnCount.setDescription('NAME = ; DESC = This indicates the global burn count.; HELP = ; CAPABILITIES = ;')
mcmSysSmartCfgGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 8))
mcmSysSmartCfgAction = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("update", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mcmSysSmartCfgAction.setStatus('mandatory')
if mibBuilder.loadTexts: mcmSysSmartCfgAction.setDescription('NAME = ; DESC = Directs system to update secondary (Flash) storage \\ by saving present configuration. Or directs discard \\ of present re-configures.; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
mcmSysSmartCfgStatus = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("failed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysSmartCfgStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mcmSysSmartCfgStatus.setDescription('NAME = ; DESC = Indicates if system is currently being \\ re-configured.; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
mcmSysCommunityStringTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 9), )
if mibBuilder.loadTexts: mcmSysCommunityStringTable.setStatus('mandatory')
if mibBuilder.loadTexts: mcmSysCommunityStringTable.setDescription('NAME = ; DESC = The System Community String Table.; HELP = ; CAPABILITIES = NET_CFG, VPN_NONE;')
mcmSysCommunityStringEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 9, 1), ).setIndexNames((0, "MICOM-SYS-MIB", "mcmSysCommunityStringIndex"))
if mibBuilder.loadTexts: mcmSysCommunityStringEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mcmSysCommunityStringEntry.setDescription('NAME = ; DESC = Entry that pertains to the Community \\ string.; HELP = ; CAPABILITIES = ;')
mcmSysCommunityStringIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("nSP-Configurator", 1), ("nSP-Operator", 2), ("nSP-Monitor", 3), ("customer-Configurator", 4), ("customer-Operator", 5), ("customer-Monitor", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmSysCommunityStringIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mcmSysCommunityStringIndex.setDescription('NAME = ; DESC = The Index value for each Community Strings.; HELP = ; CAPABILITIES = ;')
mcmSysCommunityStringCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 9, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmSysCommunityStringCommunity.setStatus('mandatory')
if mibBuilder.loadTexts: mcmSysCommunityStringCommunity.setDescription('NAME = ; DESC = Community String used as access password.; HELP = ; CAPABILITIES = ;')
mcmSysValidateCommunityGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 10))
mcmSysValidateCommunity = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 10, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mcmSysValidateCommunity.setStatus('mandatory')
if mibBuilder.loadTexts: mcmSysValidateCommunity.setDescription('NAME = ; DESC = This parameter contains the password \\ obtained by the command line user interface.; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
mcmSysLastCommunityPriviledgeLevel = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 10, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("nspConfigurator", 1), ("nspOperator", 2), ("nspMonitor", 3), ("customerConfigurator", 4), ("customerOperator", 5), ("customerMonitor", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysLastCommunityPriviledgeLevel.setStatus('mandatory')
if mibBuilder.loadTexts: mcmSysLastCommunityPriviledgeLevel.setDescription('NAME = ; DESC = This parameter contains the priviledge \\ level from the last valid password.; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
mcmSysConsolePortGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 11))
mcmSysConsolePortBaudRate = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("bps2400", 1), ("bps4800", 2), ("bps9600", 3), ("bps19200", 4), ("bps38400", 5))).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmSysConsolePortBaudRate.setStatus('mandatory')
if mibBuilder.loadTexts: mcmSysConsolePortBaudRate.setDescription('NAME = ; DESC = Set Console (and Debugger) Speed; HELP = Set Console Speed; CAPABILITIES = NET_CFG, VPN_DISP;')
mcmSysConsolePortStopBits = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 11, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmSysConsolePortStopBits.setStatus('mandatory')
if mibBuilder.loadTexts: mcmSysConsolePortStopBits.setDescription('NAME = ; DESC = Set Console number of stop bits; HELP = Set Console number of stop bits; CAPABILITIES = NET_CFG, VPN_DISP;')
mcmSysConsolePortDataBits = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 11, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 8)).clone(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmSysConsolePortDataBits.setStatus('mandatory')
if mibBuilder.loadTexts: mcmSysConsolePortDataBits.setDescription('NAME = ; DESC = Set Console number of Data bits (excluding start, \\ stop and parity bits); HELP = Set Console number of Data bits (excluding start, \\ stop and parity bits); CAPABILITIES = NET_CFG, VPN_DISP;')
mcmSysConsolePortParity = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 11, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("even", 2), ("odd", 3))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmSysConsolePortParity.setStatus('mandatory')
if mibBuilder.loadTexts: mcmSysConsolePortParity.setDescription('NAME = ; DESC = Set Console parity bit; HELP = Set Console parity bit; CAPABILITIES = NET_CFG, VPN_DISP;')
mcmSysCommitTrackingGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 12))
mcmSysCommitTrackingCounter = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 12, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysCommitTrackingCounter.setStatus('mandatory')
if mibBuilder.loadTexts: mcmSysCommitTrackingCounter.setDescription('NAME = ; DESC = The Counter that pertains to the Commit Tracking.; HELP = ; CAPABILITIES = NET_CFG, VPN_NONE;')
mcmSysCommitTrackingSrcIPAddressOfLastCommit = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 12, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysCommitTrackingSrcIPAddressOfLastCommit.setStatus('mandatory')
if mibBuilder.loadTexts: mcmSysCommitTrackingSrcIPAddressOfLastCommit.setDescription('NAME = ; DESC = The IP address of the SNMP manager that issued \\ the last successful SET operation.; HELP = ; CAPABILITIES = NET_CFG, VPN_NONE;')
mcmSysCommitTrackingCommunityOfLastCommit = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 12, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysCommitTrackingCommunityOfLastCommit.setStatus('mandatory')
if mibBuilder.loadTexts: mcmSysCommitTrackingCommunityOfLastCommit.setDescription('NAME = ; DESC = The community of the last successful SET.; HELP = ; CAPABILITIES = NET_CFG, VPN_NONE;')
mcmSysCommitTrackingTimeOfLastCommit = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 12, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysCommitTrackingTimeOfLastCommit.setStatus('mandatory')
if mibBuilder.loadTexts: mcmSysCommitTrackingTimeOfLastCommit.setDescription('NAME = ; DESC = The system uptime in ticks when the last \\ SET was serviced.; HELP = ; CAPABILITIES = NET_CFG, VPN_NONE;')
mcmSysIfExtTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 13), )
if mibBuilder.loadTexts: mcmSysIfExtTable.setStatus('mandatory')
if mibBuilder.loadTexts: mcmSysIfExtTable.setDescription('NAME = ; DESC = The Interface table that contains \\ information about IfExtension in this \\ access device.; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
mcmSysIfExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 13, 1), ).setIndexNames((0, "MICOM-SYS-MIB", "mcmSysIfExtIfIndex"))
if mibBuilder.loadTexts: mcmSysIfExtEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mcmSysIfExtEntry.setDescription('NAME = ; DESC = The specific Entry that pertains to \\ IfExt in this access device.; HELP = ; CAPABILITIES = ;')
mcmSysIfExtIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysIfExtIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mcmSysIfExtIfIndex.setDescription('NAME = ; DESC = The Index value of the specifc entry.; HELP = ; CAPABILITIES = ;')
mcmSysIfExtName = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 13, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(25, 25)).setFixedLength(25)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysIfExtName.setStatus('mandatory')
if mibBuilder.loadTexts: mcmSysIfExtName.setDescription('NAME = ; DESC = The Name of the specific IfExt entry.; HELP = ; CAPABILITIES = ;')
mcmSysIfExtType = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 63, 75, 76, 77, 81))).clone(namedValues=NamedValues(("other", 1), ("regular1822", 2), ("hdh1822", 3), ("ddnX25", 4), ("rfc877x25", 5), ("ethernetCsmacd", 6), ("iso88023Csmacd", 7), ("iso88024TokenBus", 8), ("iso88025TokenRing", 9), ("iso88026Man", 10), ("starLan", 11), ("proteon10Mbit", 12), ("proteon80Mbit", 13), ("hyperchannel", 14), ("fddi", 15), ("lapb", 16), ("sdlc", 17), ("ds1", 18), ("e1", 19), ("basicISDN", 20), ("primaryISDN", 21), ("propPointToPointSerial", 22), ("ppp", 23), ("softwareLoopback", 24), ("eon", 25), ("ethernet3Mbit", 26), ("nsip", 27), ("slip", 28), ("ultra", 29), ("ds3", 30), ("sip", 31), ("frameRelay", 32), ("rs232", 33), ("para", 34), ("arcnet", 35), ("arcnetPlus", 36), ("atm", 37), ("miox25", 38), ("sonet", 39), ("x25ple", 40), ("iso88022llc", 41), ("localTalk", 42), ("smdsDxi", 43), ("frameRelayService", 44), ("v35", 45), ("hssi", 46), ("hippi", 47), ("modem", 48), ("aal5", 49), ("sonetPath", 50), ("sonetVT", 51), ("smdsIcip", 52), ("propVirtual", 53), ("propMultiplexor", 54), ("isdn", 63), ("isdns", 75), ("isdnu", 76), ("lapd", 77), ("ds0", 81)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysIfExtType.setStatus('mandatory')
if mibBuilder.loadTexts: mcmSysIfExtType.setDescription('NAME = ; DESC = The values of this field are kept \\ the same as the values for the \\ ifExtType defined in \\ the extension to MIB II (RFC1573); HELP = ; CAPABILITIES = ;')
mcmSysIfExtLinkUpDownTrapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmSysIfExtLinkUpDownTrapEnable.setStatus('mandatory')
if mibBuilder.loadTexts: mcmSysIfExtLinkUpDownTrapEnable.setDescription('NAME = ; DESC = This indicates if the LinkUpDownTrap \\ is enabled or not.; HELP = ; CAPABILITIES = ;')
mcmSysIfExtConnectorPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 13, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysIfExtConnectorPresent.setStatus('mandatory')
if mibBuilder.loadTexts: mcmSysIfExtConnectorPresent.setDescription('NAME = ; DESC = This indicates if the IfExt entry \\ has a phisical connector present.; HELP = ; CAPABILITIES = ;')
mcmSysIfExtPersistenceType = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 13, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("volatile", 1), ("non-volatile", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysIfExtPersistenceType.setStatus('mandatory')
if mibBuilder.loadTexts: mcmSysIfExtPersistenceType.setDescription('NAME = ; DESC = This indicates if the Persistence Type \\ is volatile or non-volatile.; HELP = ; CAPABILITIES = ;')
mcmSysIfExtState = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 13, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("configured", 1), ("not-configured", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysIfExtState.setStatus('mandatory')
if mibBuilder.loadTexts: mcmSysIfExtState.setDescription('NAME = ; DESC = This indicates that if the IfExt entry \\ is configured or not.; HELP = ; CAPABILITIES = ;')
mcmSysIfExtPPA = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 13, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysIfExtPPA.setStatus('mandatory')
if mibBuilder.loadTexts: mcmSysIfExtPPA.setDescription('NAME = ; DESC = The PPA of the port; HELP = ; CAPABILITIES = ;')
mcmSysIfExtModule = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 13, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("limA", 1), ("lim1", 2), ("lim2", 3), ("lim3", 4), ("lim4", 5), ("limB", 6), ("limC", 7), ("limD", 8), ("limE", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysIfExtModule.setStatus('mandatory')
if mibBuilder.loadTexts: mcmSysIfExtModule.setDescription('NAME = ; DESC = The logical interface module address \\ of this interface \\ NOTE : this object was previously named \\ mcmSysIfExtSlot.; HELP = ; CAPABILITIES = ;')
mcmSysIfExtChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 13, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysIfExtChannel.setStatus('mandatory')
if mibBuilder.loadTexts: mcmSysIfExtChannel.setDescription('NAME = ; DESC = The channel number of this interface... \\ FR DCE: N/A, WAN Driver: SCC number, \\ WAN Connector: corresponding SCC number; HELP = ; CAPABILITIES = ;')
mcmSysIfExtPPADeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 13, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46))).clone(namedValues=NamedValues(("wanDriver-FRDTE", 1), ("ethDriver", 2), ("loopDriver", 3), ("nullDevice", 4), ("noDevice", 5), ("frDevice-DTE", 6), ("wanConn", 7), ("isdn-B1-ch", 8), ("isdn-B2-ch", 9), ("isdn-D-ch", 10), ("isdn-conn", 11), ("voiceVP", 12), ("nmVP", 13), ("dataVP", 14), ("t1Net", 15), ("t1Loc", 16), ("t1Frac", 17), ("serialDevice", 18), ("euvmCh", 19), ("t1DP1", 20), ("t1DP2", 21), ("e1Net", 22), ("e1Loc", 23), ("e1Frac", 24), ("e1DP1", 25), ("e1DP2", 26), ("iuvmCh", 27), ("dvmCh", 28), ("frDevice-DCE", 29), ("wanDriver-FRDCE", 30), ("wanDriver-FRTDS", 31), ("dce-Conn", 32), ("csu-t1", 33), ("csu-56k", 34), ("isdn-LAPD", 35), ("isdn-BRI", 36), ("csu-e1", 37), ("panlDCE", 38), ("panlDTE", 39), ("standardFR", 40), ("voice-isdn-BRI-ch", 41), ("voice-isdn-BRI", 42), ("voice-isdn-LAPD", 43), ("voice-isdn-D-ch", 44), ("voice-isdn-B1-ch", 45), ("voice-isdn-B2-ch", 46)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysIfExtPPADeviceType.setStatus('mandatory')
if mibBuilder.loadTexts: mcmSysIfExtPPADeviceType.setDescription('NAME = ; DESC = The PPA device type of this interface.; HELP = ; CAPABILITIES = ;')
mcmSysRollbackGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 14))
mcmSysRollbackFeature = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 14, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmSysRollbackFeature.setStatus('mandatory')
if mibBuilder.loadTexts: mcmSysRollbackFeature.setDescription('NAME = ; DESC = This indicates if the RollBack feature is \\ enabled or disabled.; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
mcmSysRollbackStatus = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 14, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("required", 1), ("not-required", 2), ("next-reset", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysRollbackStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mcmSysRollbackStatus.setDescription('NAME = ; DESC = This indicates whether Confirm system \\ Rollback is required or not. Or will \\ Confirm at the next reset.; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
mcmSysRollbackConfirm = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 14, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("confirm", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mcmSysRollbackConfirm.setStatus('mandatory')
if mibBuilder.loadTexts: mcmSysRollbackConfirm.setDescription('NAME = ; DESC = This confirms that previous System Configuration \\ or Code bank changes are accepted and that the \\ System is NOT to timeout, reset and go back to previous Config or Code bank.; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
nvmSysIfExtTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 15), )
if mibBuilder.loadTexts: nvmSysIfExtTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvmSysIfExtTable.setDescription('NAME = ; DESC = The Interface table that contains \\ information about IfExtension in this \\ access device.; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
nvmSysIfExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 15, 1), ).setIndexNames((0, "MICOM-SYS-MIB", "nvmSysIfExtIfIndex"))
if mibBuilder.loadTexts: nvmSysIfExtEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvmSysIfExtEntry.setDescription('NAME = ; DESC = The specific Entry that pertains to \\ IfExt in this access device.; HELP = ; CAPABILITIES = ;')
nvmSysIfExtIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmSysIfExtIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvmSysIfExtIfIndex.setDescription('NAME = ; DESC = The Index value of the specifc entry.; HELP = ; CAPABILITIES = ;')
nvmSysIfExtName = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 15, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(25, 25)).setFixedLength(25)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmSysIfExtName.setStatus('mandatory')
if mibBuilder.loadTexts: nvmSysIfExtName.setDescription('NAME = ; DESC = The Name of the specific IfExt entry.; HELP = ; CAPABILITIES = ;')
nvmSysIfExtType = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 63, 75, 76, 77, 81))).clone(namedValues=NamedValues(("other", 1), ("regular1822", 2), ("hdh1822", 3), ("ddnX25", 4), ("rfc877x25", 5), ("ethernetCsmacd", 6), ("iso88023Csmacd", 7), ("iso88024TokenBus", 8), ("iso88025TokenRing", 9), ("iso88026Man", 10), ("starLan", 11), ("proteon10Mbit", 12), ("proteon80Mbit", 13), ("hyperchannel", 14), ("fddi", 15), ("lapb", 16), ("sdlc", 17), ("ds1", 18), ("e1", 19), ("basicISDN", 20), ("primaryISDN", 21), ("propPointToPointSerial", 22), ("ppp", 23), ("softwareLoopback", 24), ("eon", 25), ("ethernet3Mbit", 26), ("nsip", 27), ("slip", 28), ("ultra", 29), ("ds3", 30), ("sip", 31), ("frameRelay", 32), ("rs232", 33), ("para", 34), ("arcnet", 35), ("arcnetPlus", 36), ("atm", 37), ("miox25", 38), ("sonet", 39), ("x25ple", 40), ("iso88022llc", 41), ("localTalk", 42), ("smdsDxi", 43), ("frameRelayService", 44), ("v35", 45), ("hssi", 46), ("hippi", 47), ("modem", 48), ("aal5", 49), ("sonetPath", 50), ("sonetVT", 51), ("smdsIcip", 52), ("propVirtual", 53), ("propMultiplexor", 54), ("isdn", 63), ("isdns", 75), ("isdnu", 76), ("lapd", 77), ("ds0", 81)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmSysIfExtType.setStatus('mandatory')
if mibBuilder.loadTexts: nvmSysIfExtType.setDescription('NAME = ; DESC = The values of this field are kept \\ the same as the values for the \\ ifExtType defined in \\ the extension to MIB II (RFC1573); HELP = ; CAPABILITIES = ;')
nvmSysIfExtLinkUpDownTrapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 15, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmSysIfExtLinkUpDownTrapEnable.setStatus('mandatory')
if mibBuilder.loadTexts: nvmSysIfExtLinkUpDownTrapEnable.setDescription('NAME = ; DESC = This indicates if the LinkUpDownTrap \\ is enabled or not.; HELP = ; CAPABILITIES = ;')
nvmSysIfExtConnectorPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 15, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmSysIfExtConnectorPresent.setStatus('mandatory')
if mibBuilder.loadTexts: nvmSysIfExtConnectorPresent.setDescription('NAME = ; DESC = This indicates if the IfExt entry \\ has a phisical connector present.; HELP = ; CAPABILITIES = ;')
nvmSysIfExtPersistenceType = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 15, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("volatile", 1), ("non-volatile", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmSysIfExtPersistenceType.setStatus('mandatory')
if mibBuilder.loadTexts: nvmSysIfExtPersistenceType.setDescription('NAME = ; DESC = This indicates if the Persistence Type \\ is volatile or non-volatile.; HELP = ; CAPABILITIES = ;')
nvmSysIfExtState = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 15, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("configured", 1), ("not-configured", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmSysIfExtState.setStatus('mandatory')
if mibBuilder.loadTexts: nvmSysIfExtState.setDescription('NAME = ; DESC = This indicates that if the IfExt entry \\ is configured or not.; HELP = ; CAPABILITIES = ;')
nvmSysIfExtPPA = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 15, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmSysIfExtPPA.setStatus('mandatory')
if mibBuilder.loadTexts: nvmSysIfExtPPA.setDescription('NAME = ; DESC = The PPA of the port; HELP = ; CAPABILITIES = ;')
nvmSysIfExtModule = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 15, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("limA", 1), ("lim1", 2), ("lim2", 3), ("lim3", 4), ("lim4", 5), ("limB", 6), ("limC", 7), ("limD", 8), ("limE", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmSysIfExtModule.setStatus('mandatory')
if mibBuilder.loadTexts: nvmSysIfExtModule.setDescription('NAME = ; DESC = The logical interface module address \\ of this interface \\ NOTE : this object was previously named \\ nvmSysIfExtSlot.; HELP = ; CAPABILITIES = ;')
nvmSysIfExtChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 15, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmSysIfExtChannel.setStatus('mandatory')
if mibBuilder.loadTexts: nvmSysIfExtChannel.setDescription('NAME = ; DESC = The channel number of this interface... \\ FR DCE: N/A, WAN Driver: SCC number, \\ WAN Connector: corresponding SCC number; HELP = ; CAPABILITIES = ;')
nvmSysIfExtPPADeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 15, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46))).clone(namedValues=NamedValues(("wanDriver-FRDTE", 1), ("ethDriver", 2), ("loopDriver", 3), ("nullDevice", 4), ("noDevice", 5), ("frDevice-DTE", 6), ("wanConn", 7), ("isdn-B1-ch", 8), ("isdn-B2-ch", 9), ("isdn-D-ch", 10), ("isdn-conn", 11), ("voiceVP", 12), ("nmVP", 13), ("dataVP", 14), ("t1Net", 15), ("t1Loc", 16), ("t1Frac", 17), ("serialDevice", 18), ("euvmCh", 19), ("t1DP1", 20), ("t1DP2", 21), ("e1Net", 22), ("e1Loc", 23), ("e1Frac", 24), ("e1DP1", 25), ("e1DP2", 26), ("iuvmCh", 27), ("dvmCh", 28), ("frDevice-DCE", 29), ("wanDriver-FRDCE", 30), ("wanDriver-FRTDS", 31), ("dce-Conn", 32), ("csu-t1", 33), ("csu-56k", 34), ("isdn-LAPD", 35), ("isdn-BRI", 36), ("csu-e1", 37), ("panlDCE", 38), ("panlDTE", 39), ("standardFR", 40), ("voice-isdn-BRI-ch", 41), ("voice-isdn-BRI", 42), ("voice-isdn-LAPD", 43), ("voice-isdn-D-ch", 44), ("voice-isdn-B1-ch", 45), ("voice-isdn-B2-ch", 46)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmSysIfExtPPADeviceType.setStatus('mandatory')
if mibBuilder.loadTexts: nvmSysIfExtPPADeviceType.setDescription('NAME = ; DESC = The PPA device type of this interface.; HELP = ; CAPABILITIES = ;')
mcmSysResetGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 2, 1))
mcmSysResetAction = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("cpu-only", 1), ("currentConfig", 2), ("factoryDefaults", 3)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mcmSysResetAction.setStatus('mandatory')
if mibBuilder.loadTexts: mcmSysResetAction.setDescription('NAME = ; DESC = Reset Unit, restart the CPU only, warm start \\ or factory default (cold start).; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
mcmSysRestartReason = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 48, 49, 51, 52, 58, 59))).clone(namedValues=NamedValues(("hwButtonCurrentReset", 1), ("cliCurrentReset", 2), ("hwButtonOrCLICPUReset", 3), ("watchdogTimer", 4), ("noQUICCClock", 5), ("doubleBusFault", 6), ("powerUp", 8), ("unknownHardwareFault", 9), ("switchCodeConfigHWButtonReset", 11), ("switchCodeConfigCLICurrReset", 12), ("switchCodeConfigCPUReset", 13), ("switchCodeConfigwatchdogTimer", 14), ("switchCodeConfigNoQUICCClock", 15), ("switchCodeConfigdoubleBusFault", 16), ("switchCodeConfigRollbackTimer", 17), ("switchCodeConfigPowerUp", 18), ("switchCodeConfigUnknownHWFault", 19), ("switchCodeHWButtonReset", 21), ("switchCodeCLICurrReset", 22), ("switchCodeCPUReset", 23), ("switchCodewatchdogTimer", 24), ("switchCodeNoQUICCClock", 25), ("switchCodedoubleBusFault", 26), ("switchCodeRollbackTimer", 27), ("switchCodePowerUp", 28), ("switchCodeUnknownHWFault", 29), ("switchConfigHWButtonReset", 31), ("switchConfigCLICurrReset", 32), ("switchConfigCPUReset", 33), ("switchConfigwatchdogTimer", 34), ("switchConfigNoQUICCClock", 35), ("switchConfigdoubleBusFault", 36), ("switchConfigRollbackTimer", 37), ("switchConfigPowerUp", 38), ("switchConfigUnknownHWFault", 39), ("hwButtonResetToDefault", 41), ("cliResetToDefault", 42), ("cpuResetWithCommittedCOnfig", 43), ("powerUpWithDefaultedConfig", 48), ("configDefaultUnknownHWFault", 49), ("hwButtonDefaultUnknownSWState", 51), ("cliDefaultResetUnknownSWState", 52), ("powerUpDefaultUnknownSWState", 58), ("configDefaultUnknownSWHWState", 59)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysRestartReason.setStatus('mandatory')
if mibBuilder.loadTexts: mcmSysRestartReason.setDescription('NAME = ; DESC = Reset Restart Reason Codes; HELP = Reason Code for last Reset; CAPABILITIES = NET_CFG, VPN_DISP;')
mcmSysTimeOfLastReset = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 25))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysTimeOfLastReset.setStatus('mandatory')
if mibBuilder.loadTexts: mcmSysTimeOfLastReset.setDescription('NAME = ; DESC = This object will indicate the time of \\ when the access device was last reset. HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
mcmSysCfgLockGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 2, 2))
mcmSysCfgLock = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 2, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmSysCfgLock.setStatus('mandatory')
if mibBuilder.loadTexts: mcmSysCfgLock.setDescription('NAME = ; DESC = Indicates if system config is locked.; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
mcmSysUtilGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 3, 1))
mcmSysCpuUtilization = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 3, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysCpuUtilization.setStatus('mandatory')
if mibBuilder.loadTexts: mcmSysCpuUtilization.setDescription('NAME = ; DESC = Indicates the CPU utilization in percent.; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
mcmSysLinkTransmitBandwidthUtilization = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 3, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysLinkTransmitBandwidthUtilization.setStatus('mandatory')
if mibBuilder.loadTexts: mcmSysLinkTransmitBandwidthUtilization.setDescription('NAME = ; DESC = Indicates the Bandwidth Utilization in percent.; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
mcmSysInternalRAMUtilization = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 3, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysInternalRAMUtilization.setStatus('mandatory')
if mibBuilder.loadTexts: mcmSysInternalRAMUtilization.setDescription('NAME = ; DESC = Indicates internal RAM Utilization in percent.; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
mcmSysLinkReceiveBandwidthUtilization = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 3, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysLinkReceiveBandwidthUtilization.setStatus('mandatory')
if mibBuilder.loadTexts: mcmSysLinkReceiveBandwidthUtilization.setDescription('NAME = ; DESC = Indicates the Link Receive Bandwidth utilization.; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
mcmSysTrapSubscriptionTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 4, 1), )
if mibBuilder.loadTexts: mcmSysTrapSubscriptionTable.setStatus('mandatory')
if mibBuilder.loadTexts: mcmSysTrapSubscriptionTable.setDescription('NAME = ; DESC = This Table displays the System Trap \\ subscription information of this \\ access device.; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
mcmSysTrapSubscriptionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 4, 1, 1), ).setIndexNames((0, "MICOM-SYS-MIB", "mcmSysTrapSubscriptionIPAddress"))
if mibBuilder.loadTexts: mcmSysTrapSubscriptionEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mcmSysTrapSubscriptionEntry.setDescription('NAME = ; DESC = Entry that pertains to a specific TRAP.; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
mcmSysTrapSubscriptionIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 4, 1, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmSysTrapSubscriptionIPAddress.setStatus('mandatory')
if mibBuilder.loadTexts: mcmSysTrapSubscriptionIPAddress.setDescription('NAME = ; DESC = IP address of the SNMP Manager subscribing Traps.; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
mcmSysTrapSubscriptionCommunityString = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 4, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmSysTrapSubscriptionCommunityString.setStatus('mandatory')
if mibBuilder.loadTexts: mcmSysTrapSubscriptionCommunityString.setDescription('NAME = ; DESC = Community string for this subscriber.; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
mcmSysTrapSubscriptionAction = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("subscribe", 1), ("cancel", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmSysTrapSubscriptionAction.setStatus('mandatory')
if mibBuilder.loadTexts: mcmSysTrapSubscriptionAction.setDescription('NAME = ; DESC = Action to take: add or delete subscriber.; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
mcmSysTrapThresholdGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 4, 2))
mcmSysTrapCPUUtilThreshold = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 4, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(90)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmSysTrapCPUUtilThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: mcmSysTrapCPUUtilThreshold.setDescription('NAME = ; DESC = Indicates the configured threshold for \\ CPU Utilization.; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
mcmSysTrapBandwidthUtilThreshold = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 4, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(90)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmSysTrapBandwidthUtilThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: mcmSysTrapBandwidthUtilThreshold.setDescription('NAME = ; DESC = Indicates the configured threshold for \\ bandwidth utilization.; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
mcmSysTrapRAMUtilThreshold = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 4, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(90)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmSysTrapRAMUtilThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: mcmSysTrapRAMUtilThreshold.setDescription('NAME = ; DESC = Indicates the configured threshold for \\ RAM utilization.; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
mcmSysMainPowerSupplyFailure = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 1) + (0,1)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"))
if mibBuilder.loadTexts: mcmSysMainPowerSupplyFailure.setDescription('NAME = ; DESC = System TRAP message: indication of Power Supply \\ failure.\\ Severity Level: CRITICAL.; HELP = Power Supply Jumper may not be set properly.\\ Please contact the System Administrator, or\\ field Personnel.;')
mcmSysChassisFanFailure = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 1) + (0,2)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"))
if mibBuilder.loadTexts: mcmSysChassisFanFailure.setDescription('NAME = ; DESC = System TRAP message: indication of a chassis \\ FAN failure on the access device.\\ Severity Level: MINOR.; HELP = Fan is not running. Please contact the System\\ administrator, or Filed Personnel.;')
mcmSysSystemReset = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 1) + (0,3)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"))
if mibBuilder.loadTexts: mcmSysSystemReset.setDescription('NAME = ; DESC = System TRAP message: indication of system Reset \\ (warm start).\\ Severity Level: INFORMATIVE.; HELP = A system reset has occured. If normal \\ operation did not resume after the Reset, Please \\ contact the System Administrator, or Field \\ Personnel.;')
mcmSysBatteryLow = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 1) + (0,4)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"))
if mibBuilder.loadTexts: mcmSysBatteryLow.setDescription('NAME = ; DESC = System TRAP message: Indication of Battery Low.\\ Severity Level: MINOR.; HELP = The access device is experiencing a Battery \\ Low condition. Please contact the System \\ Administrator or Field Personnel.;')
mcmSysConfigChanged = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 1) + (0,5)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"))
if mibBuilder.loadTexts: mcmSysConfigChanged.setDescription('NAME = ; DESC = An indication of configuration change in \\ the access device.\\ Severity Level: MAJOR.; HELP = Configuration has changed in access device. Please \\ consult the System Administrator, or Field Personnel \\ if the configuration has affected your applications.;')
mcmSysCPUUtilExceeded = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 1) + (0,6)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"))
if mibBuilder.loadTexts: mcmSysCPUUtilExceeded.setDescription('NAME = ; DESC = System TRAP message: Indication of CPU Utilization \\ exceeded for configured threshold.\\ Severity Level: MAJOR.; HELP = The access device has exceeded its configured threshold \\ value for CPU Utilization. This value can be changed using set sys traps cpu 1 - 100.\\ Or Consult your system Administrator, or field Personnel if \\ this value needs to be changed.;')
mcmSysBandwidthUtilExceeded = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 1) + (0,7)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"))
if mibBuilder.loadTexts: mcmSysBandwidthUtilExceeded.setDescription('NAME = ; DESC = System TRAP message: Indication of Bandwidth \\ Utilization exceeded for configured threshold.\\ Severity Level: MAJOR.; HELP = The access device has exceeded its Configured \\ threshold value for its bandwidth utilization. \\ This value can be changed using set sys traps \\ bandwidth 1-100 or Consult your system \\ Administrator, or Field Personnel if this value needs \\ to be changed.;')
mcmSysRAMUtilExceeded = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 1) + (0,8)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"))
if mibBuilder.loadTexts: mcmSysRAMUtilExceeded.setDescription('NAME = ; DESC = System TRAP message: Indication of RAM \\ Utilization exceeded for configured threshold.\\ Severity Level: MAJOR.; HELP = It is an indication of surpassing the configured \\ value for RAM utilization. This value can be changed using set sys traps ram 1-100 or Consult your system \\ administrator, or Field Personnel if this value needs \\ to be changed.;')
mcmSysRollbackEnabled = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 1) + (0,9)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"))
if mibBuilder.loadTexts: mcmSysRollbackEnabled.setDescription('NAME = ; DESC = System TRAP message: Indication of System \\ Rollback Feature enabled.\\ Severity Level: INFORMATIVE.; HELP = This is an indication of the Rollback feature \\ being enabled. Please disable this feature if \\ it is not desired, or consult your System Admin.\\ or Field Personnel.;')
mcmSysRollbackDisabled = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 1) + (0,10)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"))
if mibBuilder.loadTexts: mcmSysRollbackDisabled.setDescription('NAME = ; DESC = System TRAP message: Indication of System \\ Rollback Feature disabled.\\ Severity Level: INFORMATIVE.; HELP = This is an indication of the Rollback feature \\ being disabled. Please enable this feature if \\ it is required. Otherwise, consult your system \\ admin. or Field Personnel.;')
mcmSysRollbackArmed = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 1) + (0,11)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"))
if mibBuilder.loadTexts: mcmSysRollbackArmed.setDescription('NAME = ; DESC = System TRAP message: Indication of System \\ Rollback Feature armed, resulting from User \\ committing/activating Code/Config Bank for \\ next reset.\\ Severity Level: INFORMATIVE.; HELP = This is an indication of user committing a new \\ code bank/Config Bank after the access device \\ is reset the next time around. If this \\ condition is not needed, consult your System \\ Admin. or Field personnel.;')
mcmSysRollbackDisarmed = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 1) + (0,12)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"))
if mibBuilder.loadTexts: mcmSysRollbackDisarmed.setDescription('NAME = ; DESC = System TRAP message: Indication of System \\ Rollback Feature confirmed for this session.\\ Severity Level: INFORMATIVE.; HELP = This is a condition of disarming previously \\ committed Code Bank/config Bank that was going \\ to occur after a reset. If it is not desirable, \\ reverse the condition., ;')
mibBuilder.exportSymbols("MICOM-SYS-MIB", mcmSysConsolePortBaudRate=mcmSysConsolePortBaudRate, mcmSysAsciiTimeOfDay=mcmSysAsciiTimeOfDay, mcmSysFirmwareConfigActiveBank=mcmSysFirmwareConfigActiveBank, mcmSysHWTypeRevisionLevel=mcmSysHWTypeRevisionLevel, mcmSysCommunityStringIndex=mcmSysCommunityStringIndex, mcmSysCfgLockGroup=mcmSysCfgLockGroup, sys_statistics=sys_statistics, mcmSysTimeOfDayYear=mcmSysTimeOfDayYear, mcmSysChassisPowerSupplyRedundant=mcmSysChassisPowerSupplyRedundant, micom_system=micom_system, mcmSysIfExtConnectorPresent=mcmSysIfExtConnectorPresent, mcmSysHWTypeMACAddress=mcmSysHWTypeMACAddress, mcmSysFirmwareImageSize=mcmSysFirmwareImageSize, mcmSysChassisGroup=mcmSysChassisGroup, mcmSysRollbackGroup=mcmSysRollbackGroup, mcmSysBatteryLow=mcmSysBatteryLow, mcmSysChassisNumberOfModules=mcmSysChassisNumberOfModules, mcmSysTrapCPUUtilThreshold=mcmSysTrapCPUUtilThreshold, mcmSysPhysEntry=mcmSysPhysEntry, mcmSysTrapSubscriptionAction=mcmSysTrapSubscriptionAction, mcmSysFirmwareConfigVersion=mcmSysFirmwareConfigVersion, mcmSysChassisCoolingFan=mcmSysChassisCoolingFan, mcmSysCommitTrackingTimeOfLastCommit=mcmSysCommitTrackingTimeOfLastCommit, mcmSysTimeOfDay=mcmSysTimeOfDay, mcmSysFirmwareImageFilename=mcmSysFirmwareImageFilename, nvmSysIfExtType=nvmSysIfExtType, mcmSysTrapSubscriptionTable=mcmSysTrapSubscriptionTable, mcmSysCfgDRAMSize=mcmSysCfgDRAMSize, mcmSysConfigChanged=mcmSysConfigChanged, mcmSysFirmwareImageCommitStatus=mcmSysFirmwareImageCommitStatus, mcmSysLimMfgDate=mcmSysLimMfgDate, mcmSysLimModuleName=mcmSysLimModuleName, mcmSysLimEntry=mcmSysLimEntry, mcmSysLogModuleAddress=mcmSysLogModuleAddress, sys_trap=sys_trap, mcmSysConsolePortDataBits=mcmSysConsolePortDataBits, mcmSysTimeOfDaySec=mcmSysTimeOfDaySec, mcmSysConsolePortStopBits=mcmSysConsolePortStopBits, mcmSysIfExtLinkUpDownTrapEnable=mcmSysIfExtLinkUpDownTrapEnable, mcmSysSystemReset=mcmSysSystemReset, mcmSysCfgQUICCExpansionModule1=mcmSysCfgQUICCExpansionModule1, mcmSysFirmwareImageIndex=mcmSysFirmwareImageIndex, mcmSysIfExtType=mcmSysIfExtType, mcmSysIfExtPPA=mcmSysIfExtPPA, mcmSysOperationalType=mcmSysOperationalType, mcmSysCommitTrackingGroup=mcmSysCommitTrackingGroup, mcmSysChassisFanFailure=mcmSysChassisFanFailure, mcmSysFirmwareGroup=mcmSysFirmwareGroup, mcmSysValidateCommunity=mcmSysValidateCommunity, mcmSysFirmwareImageBank=mcmSysFirmwareImageBank, mcmSysTimeOfDayDay=mcmSysTimeOfDayDay, mcmSysIfExtModule=mcmSysIfExtModule, mcmSysFirmwareVersion=mcmSysFirmwareVersion, mcmSysRollbackDisabled=mcmSysRollbackDisabled, mcmSysCommitTrackingSrcIPAddressOfLastCommit=mcmSysCommitTrackingSrcIPAddressOfLastCommit, mcmSysFirmwareImageTable=mcmSysFirmwareImageTable, nvmSysIfExtPPADeviceType=nvmSysIfExtPPADeviceType, mcmSysCpuUtilization=mcmSysCpuUtilization, mcmSysCommunityStringTable=mcmSysCommunityStringTable, mcmSysSmartCfgStatus=mcmSysSmartCfgStatus, mcmSysLimSerialNumber=mcmSysLimSerialNumber, mcmSysTrapThresholdGroup=mcmSysTrapThresholdGroup, mcmSysTimeOfDayHour=mcmSysTimeOfDayHour, mcmSysTrapSubscriptionCommunityString=mcmSysTrapSubscriptionCommunityString, mcmSysFirmwareImageEntry=mcmSysFirmwareImageEntry, mcmSysLimTable=mcmSysLimTable, nvmSysIfExtPPA=nvmSysIfExtPPA, mcmSysTimeOfDayDate=mcmSysTimeOfDayDate, mcmSysIfExtState=mcmSysIfExtState, nvmSysIfExtChannel=nvmSysIfExtChannel, mcmSysCfgCPUConfiguration=mcmSysCfgCPUConfiguration, mcmSysHWTypeGenCfgType=mcmSysHWTypeGenCfgType, mcmSysRollbackStatus=mcmSysRollbackStatus, sys_control=sys_control, mcmSysTimeOfDayMonth=mcmSysTimeOfDayMonth, nvmSysIfExtModule=nvmSysIfExtModule, mcmSysUtilGroup=mcmSysUtilGroup, mcmSysCfgFeatureRTCBatteryStatus=mcmSysCfgFeatureRTCBatteryStatus, mcmSysLimPcbRelease=mcmSysLimPcbRelease, mcmSysPhysModuleAddress=mcmSysPhysModuleAddress, mcmSysIfExtTable=mcmSysIfExtTable, mcmSysCommunityStringCommunity=mcmSysCommunityStringCommunity, mcmSysRollbackFeature=mcmSysRollbackFeature, mcmSysRestartReason=mcmSysRestartReason, mcmSysRollbackArmed=mcmSysRollbackArmed, mcmSysHWTypeGroup=mcmSysHWTypeGroup, mcmSysMainPowerSupplyFailure=mcmSysMainPowerSupplyFailure, mcmSysFirmwareImageRevision=mcmSysFirmwareImageRevision, mcmSysValidateCommunityGroup=mcmSysValidateCommunityGroup, nvmSysIfExtName=nvmSysIfExtName, mcmSysChassisPowerSupplyStatus=mcmSysChassisPowerSupplyStatus, mcmSysBandwidthUtilExceeded=mcmSysBandwidthUtilExceeded, mcmSysSmartCfgAction=mcmSysSmartCfgAction, mcmSysIfExtChannel=mcmSysIfExtChannel, nvmSysIfExtIfIndex=nvmSysIfExtIfIndex, mcmSysLimPcbPartNumber=mcmSysLimPcbPartNumber, mcmSysCfgFlashMemorySize=mcmSysCfgFlashMemorySize, sys_configuration=sys_configuration, nvmSysIfExtConnectorPresent=nvmSysIfExtConnectorPresent, mcmSysLinkReceiveBandwidthUtilization=mcmSysLinkReceiveBandwidthUtilization, mcmSysTrapRAMUtilThreshold=mcmSysTrapRAMUtilThreshold, mcmSysCfgPrimaryWANPortPhyMedia=mcmSysCfgPrimaryWANPortPhyMedia, mcmSysFirmwareCodeReadBank=mcmSysFirmwareCodeReadBank, mcmSysRollbackEnabled=mcmSysRollbackEnabled, mcmSysFirmwareConfigCommitBank=mcmSysFirmwareConfigCommitBank, mcmSysRollbackConfirm=mcmSysRollbackConfirm, mcmSysCommitTrackingCounter=mcmSysCommitTrackingCounter, mcmSysCfgPrimaryWANPort=mcmSysCfgPrimaryWANPort, mcmSysTrapSubscriptionEntry=mcmSysTrapSubscriptionEntry, mcmSysHWTypeCPUType=mcmSysHWTypeCPUType, mcmSysFirmwareImageSoftware=mcmSysFirmwareImageSoftware, mcmSysCfgQUICCExpansionModule2=mcmSysCfgQUICCExpansionModule2, mcmSysChassisPowerSupplyType=mcmSysChassisPowerSupplyType, mcmSysChassisPowerSupplyModuleCount=mcmSysChassisPowerSupplyModuleCount, mcmSysCommunityStringEntry=mcmSysCommunityStringEntry, mcmSysFirmwareCodeCommitBank=mcmSysFirmwareCodeCommitBank, mcmSysLastCommunityPriviledgeLevel=mcmSysLastCommunityPriviledgeLevel, mcmSysFirmwareConfigReadBank=mcmSysFirmwareConfigReadBank, mcmSysHWTypeModuleID=mcmSysHWTypeModuleID, nvmSysIfExtPersistenceType=nvmSysIfExtPersistenceType, mcmSysHWTypeManufRevDate=mcmSysHWTypeManufRevDate, mcmSysCfgGroup=mcmSysCfgGroup, mcmSysRAMUtilExceeded=mcmSysRAMUtilExceeded, mcmSysIfExtPPADeviceType=mcmSysIfExtPPADeviceType, mcmSysCfgLock=mcmSysCfgLock, mcmSysTimeOfDayMin=mcmSysTimeOfDayMin, mcmSysCPUUtilExceeded=mcmSysCPUUtilExceeded, mcmSysIfExtPersistenceType=mcmSysIfExtPersistenceType, mcmSysCommitTrackingCommunityOfLastCommit=mcmSysCommitTrackingCommunityOfLastCommit, mcmSysConsolePortParity=mcmSysConsolePortParity, nvmSysIfExtState=nvmSysIfExtState, mcmSysLimModuleAddress=mcmSysLimModuleAddress, mcmSysSmartCfgGroup=mcmSysSmartCfgGroup, mcmSysInternalRAMUtilization=mcmSysInternalRAMUtilization, mcmSysTimeOfDayGroup=mcmSysTimeOfDayGroup, mcmSysResetGroup=mcmSysResetGroup, mcmSysIfExtIfIndex=mcmSysIfExtIfIndex, mcmSysTimeOfLastReset=mcmSysTimeOfLastReset, mcmSysCfgDCESerialPortPhyMedia=mcmSysCfgDCESerialPortPhyMedia, mcmSysPhysTable=mcmSysPhysTable, nvmSysIfExtEntry=nvmSysIfExtEntry, nvmSysIfExtLinkUpDownTrapEnable=nvmSysIfExtLinkUpDownTrapEnable, mcmSysResetAction=mcmSysResetAction, nvmSysIfExtTable=nvmSysIfExtTable, mcmSysLinkTransmitBandwidthUtilization=mcmSysLinkTransmitBandwidthUtilization, mcmSysIfExtName=mcmSysIfExtName, mcmSysFirmwareImageBurnCount=mcmSysFirmwareImageBurnCount, mcmSysTrapSubscriptionIPAddress=mcmSysTrapSubscriptionIPAddress, mcmSysRollbackDisarmed=mcmSysRollbackDisarmed, mcmSysIfExtEntry=mcmSysIfExtEntry, mcmSysHWTypeSerialNumber=mcmSysHWTypeSerialNumber, mcmSysFirmwareConfigSaveBank=mcmSysFirmwareConfigSaveBank, mcmSysConsolePortGroup=mcmSysConsolePortGroup, mcmSysTrapBandwidthUtilThreshold=mcmSysTrapBandwidthUtilThreshold, mcmSysHWTypeModelType=mcmSysHWTypeModelType)
