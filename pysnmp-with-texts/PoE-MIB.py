#
# PySNMP MIB module PoE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PoE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:43:07 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint")
dlink_common_mgmt, = mibBuilder.importSymbols("DLINK-ID-REC-MIB", "dlink-common-mgmt")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, ObjectIdentity, Bits, Unsigned32, MibIdentifier, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, TimeTicks, Counter64, Gauge32, Counter32, NotificationType, iso = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "ObjectIdentity", "Bits", "Unsigned32", "MibIdentifier", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "TimeTicks", "Counter64", "Gauge32", "Counter32", "NotificationType", "iso")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
swPoEMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 171, 12, 24))
if mibBuilder.loadTexts: swPoEMIB.setLastUpdated('201007020000Z')
if mibBuilder.loadTexts: swPoEMIB.setOrganization('D-Link Corp.')
if mibBuilder.loadTexts: swPoEMIB.setContactInfo('http://support.dlink.com')
if mibBuilder.loadTexts: swPoEMIB.setDescription('The Structure of PoE management for the proprietary enterprise.')
swPoESystemCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 24, 1))
swPoESystemInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 24, 2))
swPoEPortCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 24, 3))
swPoEPortInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 24, 4))
swPoESystemPowerLimit = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 24, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(37, 370))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPoESystemPowerLimit.setStatus('current')
if mibBuilder.loadTexts: swPoESystemPowerLimit.setDescription('The power budget (in watts) of the PoE sytem. The default setting is 370 W.')
swPoESystemPowerDisconnectMethod = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 24, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("denyNextPort", 1), ("denyLowPriorityPort", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPoESystemPowerDisconnectMethod.setStatus('current')
if mibBuilder.loadTexts: swPoESystemPowerDisconnectMethod.setDescription('The power management disconnection method. When the total consumed power exceeds the power budget, the PoE controller initiates port disconnection, to prevent overloading the power supply. The controller uses one of the following two ways to implement the disconnection. deny_next_port: after the power budget has been exceeded, the next port attempting to power up is denied, regardless of its priority. deny_low_priority_port: after the power budget has been exceeded, the next port attempting to power up causes the port with the lowest priority to shut down to allow high-priority ports to power up. The default setting is deny_next_port.')
swPoESystemManagementMode = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 24, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("power-limit", 1), ("auto", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPoESystemManagementMode.setStatus('current')
if mibBuilder.loadTexts: swPoESystemManagementMode.setDescription('This mode can be either power_limit mode or auto mode. power_limit: If power supplied to the port exceeds the power limit specified for it, this port will be shut down. auto: The system will automatically determine the PD class of the device connected to the port in the first stage. Normally, the PD can be classified as class 1, 2, or 3. If the PD cannot be classified, it will be classified as class 0. For class 0, it will assume that the PD may consume the max power allowed. During the power feeding stage, if the power supplied to the port exceeds the upper limit of the detected PD class, this port will be shut down. For the upper limit for each class, it is 4W for class 1 PD class, 7W for class 2, and 15.4W for class 3 PD and class 0 PD.')
swPoESystemLedMode = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 24, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("poe", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPoESystemLedMode.setStatus('current')
if mibBuilder.loadTexts: swPoESystemLedMode.setDescription('Specifies if the system mode will be POE or NORMAL.')
swPoESystemStackingCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 24, 1, 11), )
if mibBuilder.loadTexts: swPoESystemStackingCtrlTable.setStatus('current')
if mibBuilder.loadTexts: swPoESystemStackingCtrlTable.setDescription('A table that is used to configure PoE system information based on Unit ID. The Unit ID is used for stacking.')
swPoESystemStackingCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 24, 1, 11, 1), ).setIndexNames((0, "PoE-MIB", "swPoESystemStackingCtrlUnitId"))
if mibBuilder.loadTexts: swPoESystemStackingCtrlEntry.setStatus('current')
if mibBuilder.loadTexts: swPoESystemStackingCtrlEntry.setDescription('A list of PoE system information based on Unit ID.')
swPoESystemStackingCtrlUnitId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 24, 1, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPoESystemStackingCtrlUnitId.setStatus('current')
if mibBuilder.loadTexts: swPoESystemStackingCtrlUnitId.setDescription("This object indicates the device's Unit ID. A unit ID of zero denotes a stand-alone device.")
swPoESystemStackingCtrlPowerLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 24, 1, 11, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(37, 370))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPoESystemStackingCtrlPowerLimit.setStatus('current')
if mibBuilder.loadTexts: swPoESystemStackingCtrlPowerLimit.setDescription('The power budget (in watts) of the PoE sytem. The default setting is 370 W.')
swPoESystemStackingCtrlPowerDisconnectMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 24, 1, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("denyNextPort", 1), ("denyLowPriorityPort", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPoESystemStackingCtrlPowerDisconnectMethod.setStatus('current')
if mibBuilder.loadTexts: swPoESystemStackingCtrlPowerDisconnectMethod.setDescription('The power management disconnection method. When the total consumed power exceeds the power budget, the PoE controller initiates port disconnection to prevent overloading the power supply. The controller uses one of the following two ways to implement the disconnection. deny_next_port: after the power budget has been exceeded, the next port attempting to power up is denied, regardless of its priority. deny_low_priority_port: after the power budget has been exceeded, the next port attempting to power up causes the port with the lowest priority to shut down to allow high-priority ports to power up. The default setting is deny_next_port.')
swPoESystemStackingCtrlManagementMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 24, 1, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("power-limit", 1), ("auto", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPoESystemStackingCtrlManagementMode.setStatus('current')
if mibBuilder.loadTexts: swPoESystemStackingCtrlManagementMode.setDescription('This mode can be either power_limit mode or auto mode. power_limit: If power supplied to the port exceeds the power limit specified for it, this port will be shut down. auto: The system will automatically determine the PD class of the device connected to the port in the first stage. Normally, the PD can be classified as class 1, 2, or 3. If the PD can not be classified, it will be classified as class 0. For class 0, it will assume that the PD may consume the max power allowed. At the power feeding stage, if the power supplied to the port exceeds the upper limit of the detected PD class, this port will be shut down. For the upper limit for each class, it is 4W for class 1 PD class, 7W for class 2, and 15.4W for class 3 PD and class 0 PD.')
swPoESystemStackingCtrlLedMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 24, 1, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("poe", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPoESystemStackingCtrlLedMode.setStatus('current')
if mibBuilder.loadTexts: swPoESystemStackingCtrlLedMode.setDescription('Specifies the system mode to be POE or NORMAL.')
swPoESystemStackingCtrlLegacyPD = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 24, 1, 11, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPoESystemStackingCtrlLegacyPD.setStatus('current')
if mibBuilder.loadTexts: swPoESystemStackingCtrlLegacyPD.setDescription('The legacy PD detection state. Enables or disables legacy PD detection on PoE unit.')
swPoESystemCtrlLegacyPD = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 24, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPoESystemCtrlLegacyPD.setStatus('current')
if mibBuilder.loadTexts: swPoESystemCtrlLegacyPD.setDescription('The legacy PD detection state. Enables or disables legacy PD detection on all PoE port.')
swPoESystemInfoTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 24, 2, 1), )
if mibBuilder.loadTexts: swPoESystemInfoTable.setStatus('current')
if mibBuilder.loadTexts: swPoESystemInfoTable.setDescription('A table that contains PoE system information based on Unit ID. The Unit ID is used for stacking.')
swPoESystemInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 24, 2, 1, 1), ).setIndexNames((0, "PoE-MIB", "swPoESystemInfoUnitId"))
if mibBuilder.loadTexts: swPoESystemInfoEntry.setStatus('current')
if mibBuilder.loadTexts: swPoESystemInfoEntry.setDescription('A list of PoE system information based on Unit ID.')
swPoESystemInfoUnitId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 24, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPoESystemInfoUnitId.setStatus('current')
if mibBuilder.loadTexts: swPoESystemInfoUnitId.setDescription("This object indicates the device's Unit ID. A unit ID of zero denotes a stand-alone device.")
swPoESystemInfoPowerConsumption = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 24, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 370))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPoESystemInfoPowerConsumption.setStatus('current')
if mibBuilder.loadTexts: swPoESystemInfoPowerConsumption.setDescription('The actual momentary power consumption (in watts) in the PoE system.')
swPoESystemInfoPowerRemained = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 24, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 370))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPoESystemInfoPowerRemained.setStatus('current')
if mibBuilder.loadTexts: swPoESystemInfoPowerRemained.setDescription('The actual momentary remaining power (in watts) in the PoE system.')
swPoESystemInfoPowerLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 24, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(37, 370))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPoESystemInfoPowerLimit.setStatus('current')
if mibBuilder.loadTexts: swPoESystemInfoPowerLimit.setDescription('The power budget (in watts) of the PoE sytem. The default setting is 370 W.')
swPoESystemInfoPowerDisconnectMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 24, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("denyNextPort", 1), ("denyLowPriorityPort", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPoESystemInfoPowerDisconnectMethod.setStatus('current')
if mibBuilder.loadTexts: swPoESystemInfoPowerDisconnectMethod.setDescription('The power management disconnection method. When the total consumed power exceeds the power budget, the PoE controller initiates port disconnection to prevent overloading the power supply. The controller uses one of the following two ways to implement the disconnection. deny_next_port: after the power budget has been exceeded, the next port attempting to power up is denied, regardless of its priority. deny_low_priority_port: after the power budget has been exceeded, the next port attempting to power up causes the port with the lowest priority to shut down to allow high-priority ports to power up. The default setting is deny_next_port.')
swPoESystemInfoManagementMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 24, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("power-limit", 1), ("auto", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPoESystemInfoManagementMode.setStatus('current')
if mibBuilder.loadTexts: swPoESystemInfoManagementMode.setDescription('This mode can be either power_limit mode or auto mode. power_limit: If power supplied to the port exceeds the power limit specified for it, this port will be shut down. auto: The system will automatically determine the PD class of the device connected to the port in the first stage. Normally, the PD can be classified as class 1, 2, or 3. If the PD can not be classified, it will be classified as class 0. For class 0, it will assume that the PD may consume the max power allowed. At the power feeding stage, if the power supplied to the port exceeds the upper limit of the detected PD class, this port will be shut down. For the upper limit for each class, it is 4W for class 1 PD class, 7W for class 2, and 15.4W for class 3 PD and class 0 PD.')
swPoESystemInfoLegacyPD = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 24, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPoESystemInfoLegacyPD.setStatus('current')
if mibBuilder.loadTexts: swPoESystemInfoLegacyPD.setDescription('The current status of legacy PD detection.')
swPoEPortCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 24, 3, 1), )
if mibBuilder.loadTexts: swPoEPortCtrlTable.setStatus('current')
if mibBuilder.loadTexts: swPoEPortCtrlTable.setDescription('A table that contains PoE configuration about every port in this stack. If a device has N ports, then the 1 -- N ports describe the port number of BoxId 1 device; N+1 -- 2N describe the port number of BoxId 2 device; 2N+1 -- 3N describe the port number of BoxId 2 device; ......')
swPoEPortCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 24, 3, 1, 1), ).setIndexNames((0, "PoE-MIB", "swPoEPortCtrlPortIndex"))
if mibBuilder.loadTexts: swPoEPortCtrlEntry.setStatus('current')
if mibBuilder.loadTexts: swPoEPortCtrlEntry.setDescription('A list of PoE configurations for each port of the device in this stack.')
swPoEPortCtrlPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 24, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPoEPortCtrlPortIndex.setStatus('current')
if mibBuilder.loadTexts: swPoEPortCtrlPortIndex.setDescription("This object indicates the devices' port number in this stack. If a device has N ports, then the 1 -- N ports describe the port number of BoxId 1 device; N+1 -- 2N describe the port number of BoxId 2 device; 2N+1 -- 3N describe the port number of BoxId 2 device; ......")
swPoEPortCtrlState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 24, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enable", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPoEPortCtrlState.setStatus('current')
if mibBuilder.loadTexts: swPoEPortCtrlState.setDescription('The PoE port state. Enables or disables the PoE function on the specific port. The default setting is enable.')
swPoEPortCtrlPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 24, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("critical", 1), ("high", 2), ("low", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPoEPortCtrlPriority.setStatus('current')
if mibBuilder.loadTexts: swPoEPortCtrlPriority.setDescription('The PoE port priority. Port priority affects power-up order (after a rest, the ports are powered up according to their priority) and shutdown order (when exceeding the power budget, the ports are shut down according to their priority if power_disconnect_method is set to deny_low_priority_port) Default setting is low.')
swPoEPortCtrlPowerLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 24, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("class0", 1), ("class1", 2), ("class2", 3), ("class3", 4), ("user-defined", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPoEPortCtrlPowerLimit.setStatus('current')
if mibBuilder.loadTexts: swPoEPortCtrlPowerLimit.setDescription("There are 4 pre-defined values for users' convenience to set the upper power limit for class 0, class 1, class 2, and class 3. class_0: 15400mW (The maximum power provided by PSE (switch) is 12.95 W + power loss on cable) class_1: 4000mW (The maximum power provided by PSE is 3.84 W + power loss on cable) class_2: 7000mW (The maximum power provided by PSE is 6.49 W + power loss on cable) class_3: 15400mW (The maximum power provided by PSE is 12.95 W + power loss on cable) user-defined: User can select this setting and configure the range in swPoEPortCtrlUserDefined.")
swPoEPortCtrlUserDefined = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 24, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1000, 35000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPoEPortCtrlUserDefined.setStatus('current')
if mibBuilder.loadTexts: swPoEPortCtrlUserDefined.setDescription('User defined per-port power limit (in milliwatts). If a port exceeds 10% of its power limit, the PoE system will shut down that port. The default setting is 15400 mW. Note: This object is valid only while the swPoEPortCtrlPowerLimit object is configured as user-defined.')
swPoEPortCtrlTimeRangeName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 24, 3, 1, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPoEPortCtrlTimeRangeName.setStatus('current')
if mibBuilder.loadTexts: swPoEPortCtrlTimeRangeName.setDescription('Specifies the time_range that applies to the port of the POE.If time range is configured, power can only be supplied during the period specified by the time range.')
swPoEPortInfoTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 24, 4, 1), )
if mibBuilder.loadTexts: swPoEPortInfoTable.setStatus('current')
if mibBuilder.loadTexts: swPoEPortInfoTable.setDescription('A table that contains PoE information about every port in this stack. If a device has N ports, then the 1 -- N ports describe the port number of BoxID 1 device; N+1 -- 2N describe the port number of BoxID 2 device; 2N+1 -- 3N describe the port number of BoxID 2 device; ......')
swPoEPortInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 24, 4, 1, 1), ).setIndexNames((0, "PoE-MIB", "swPoEPortInfoPortIndex"))
if mibBuilder.loadTexts: swPoEPortInfoEntry.setStatus('current')
if mibBuilder.loadTexts: swPoEPortInfoEntry.setDescription('A list of PoE information for each port of the device in this stack.')
swPoEPortInfoPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 24, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPoEPortInfoPortIndex.setStatus('current')
if mibBuilder.loadTexts: swPoEPortInfoPortIndex.setDescription("This object indicates the devices' port number in this stack. If a device has N ports, then the 1 -- N ports describe the port number of BoxId 1 device; N+1 -- 2N describe the port number of BoxID 2 device; 2N+1 -- 3N describe the port number of BoxID 2 device; ......")
swPoEPortInfoClass = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 24, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPoEPortInfoClass.setStatus('current')
if mibBuilder.loadTexts: swPoEPortInfoClass.setDescription('The power class of the PD according to 802.3af definitions: class 0: PD power consumption is within 0.44-12.95 watts, class 1: PD power consumption is within 0.44-3.84 watts, class 2: PD power consumption is within 3.84-6.49 watts, class 3: PD power consumption is within 6.49-12.95 watts, class 4: is reserved for future use.')
swPoEPortInfoPower = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 24, 4, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPoEPortInfoPower.setStatus('current')
if mibBuilder.loadTexts: swPoEPortInfoPower.setDescription('The port power consumption (in milliwatts).')
swPoEPortInfoVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 24, 4, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPoEPortInfoVoltage.setStatus('current')
if mibBuilder.loadTexts: swPoEPortInfoVoltage.setDescription('The port input line voltage (in decivolts).')
swPoEPortInfoCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 24, 4, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPoEPortInfoCurrent.setStatus('current')
if mibBuilder.loadTexts: swPoEPortInfoCurrent.setDescription('The port current (calculated in milliamps).')
swPoEPortInfoStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 24, 4, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 76))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPoEPortInfoStatus.setStatus('current')
if mibBuilder.loadTexts: swPoEPortInfoStatus.setDescription('The string describes the PoE port current status.')
swpoEPortInfoLedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 24, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("error", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swpoEPortInfoLedStatus.setStatus('current')
if mibBuilder.loadTexts: swpoEPortInfoLedStatus.setDescription("The LED display for PoE port status. on (1): power is provided to the port on which a 802.3af-compliant or legacy PD is connected, off(2): no power is provided to the port where there aren't any errors, error(3): some error happens on the port, like overload, underload, short,...or power budget exceeded conditions.")
mibBuilder.exportSymbols("PoE-MIB", swPoESystemInfoManagementMode=swPoESystemInfoManagementMode, swPoESystemStackingCtrlTable=swPoESystemStackingCtrlTable, PYSNMP_MODULE_ID=swPoEMIB, swPoESystemInfoLegacyPD=swPoESystemInfoLegacyPD, swPoEPortCtrlTimeRangeName=swPoEPortCtrlTimeRangeName, swPoESystemInfoPowerRemained=swPoESystemInfoPowerRemained, swPoESystemStackingCtrlUnitId=swPoESystemStackingCtrlUnitId, swPoESystemManagementMode=swPoESystemManagementMode, swpoEPortInfoLedStatus=swpoEPortInfoLedStatus, swPoESystemInfo=swPoESystemInfo, swPoESystemCtrlLegacyPD=swPoESystemCtrlLegacyPD, swPoEPortCtrlPowerLimit=swPoEPortCtrlPowerLimit, swPoESystemStackingCtrlLedMode=swPoESystemStackingCtrlLedMode, swPoESystemInfoTable=swPoESystemInfoTable, swPoESystemStackingCtrlPowerDisconnectMethod=swPoESystemStackingCtrlPowerDisconnectMethod, swPoEPortInfoVoltage=swPoEPortInfoVoltage, swPoESystemPowerDisconnectMethod=swPoESystemPowerDisconnectMethod, swPoEPortInfo=swPoEPortInfo, swPoESystemStackingCtrlManagementMode=swPoESystemStackingCtrlManagementMode, swPoESystemInfoPowerDisconnectMethod=swPoESystemInfoPowerDisconnectMethod, swPoEPortInfoTable=swPoEPortInfoTable, swPoESystemStackingCtrlLegacyPD=swPoESystemStackingCtrlLegacyPD, swPoEPortInfoPortIndex=swPoEPortInfoPortIndex, swPoEPortCtrlPriority=swPoEPortCtrlPriority, swPoEPortCtrl=swPoEPortCtrl, swPoESystemInfoPowerConsumption=swPoESystemInfoPowerConsumption, swPoEPortInfoCurrent=swPoEPortInfoCurrent, swPoESystemLedMode=swPoESystemLedMode, swPoEPortCtrlUserDefined=swPoEPortCtrlUserDefined, swPoEPortCtrlState=swPoEPortCtrlState, swPoESystemInfoEntry=swPoESystemInfoEntry, swPoESystemInfoPowerLimit=swPoESystemInfoPowerLimit, swPoEPortInfoEntry=swPoEPortInfoEntry, swPoEPortInfoPower=swPoEPortInfoPower, swPoEPortInfoStatus=swPoEPortInfoStatus, swPoESystemInfoUnitId=swPoESystemInfoUnitId, swPoESystemStackingCtrlEntry=swPoESystemStackingCtrlEntry, swPoESystemCtrl=swPoESystemCtrl, swPoEMIB=swPoEMIB, swPoESystemStackingCtrlPowerLimit=swPoESystemStackingCtrlPowerLimit, swPoEPortCtrlTable=swPoEPortCtrlTable, swPoEPortCtrlPortIndex=swPoEPortCtrlPortIndex, swPoEPortInfoClass=swPoEPortInfoClass, swPoESystemPowerLimit=swPoESystemPowerLimit, swPoEPortCtrlEntry=swPoEPortCtrlEntry)
