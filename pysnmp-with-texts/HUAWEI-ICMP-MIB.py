#
# PySNMP MIB module HUAWEI-ICMP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HUAWEI-ICMP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:44:59 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint")
huawei, hwLocal, hwInternetProtocol = mibBuilder.importSymbols("HUAWEI-3COM-OID-MIB", "huawei", "hwLocal", "hwInternetProtocol")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, ModuleIdentity, Integer32, ObjectIdentity, Counter32, Unsigned32, IpAddress, Bits, Gauge32, enterprises, TimeTicks, Counter64, iso = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "ModuleIdentity", "Integer32", "ObjectIdentity", "Counter32", "Unsigned32", "IpAddress", "Bits", "Gauge32", "enterprises", "TimeTicks", "Counter64", "iso")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
rIcmp = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 1, 3, 2))
icmpInBadCode = MibScalar((1, 3, 6, 1, 4, 1, 2011, 1, 3, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpInBadCode.setStatus('mandatory')
if mibBuilder.loadTexts: icmpInBadCode.setDescription('The number of ICMP messages discarde because of an invalid code.')
icmpInBadLen = MibScalar((1, 3, 6, 1, 4, 1, 2011, 1, 3, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpInBadLen.setStatus('mandatory')
if mibBuilder.loadTexts: icmpInBadLen.setDescription('The number of ICMP messages discarded because of an invalid ICMP body.')
icmpInChecksum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 1, 3, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpInChecksum.setStatus('mandatory')
if mibBuilder.loadTexts: icmpInChecksum.setDescription('The number of ICMP messages discarded because of a bad ICMP checksum.')
icmpInTooShort = MibScalar((1, 3, 6, 1, 4, 1, 2011, 1, 3, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpInTooShort.setStatus('mandatory')
if mibBuilder.loadTexts: icmpInTooShort.setDescription('The number of ICMP messages discarded because of a short ICMP header.')
icmpOutOldIcmp = MibScalar((1, 3, 6, 1, 4, 1, 2011, 1, 3, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpOutOldIcmp.setStatus('mandatory')
if mibBuilder.loadTexts: icmpOutOldIcmp.setDescription('The number of errors discarded because datagram was an ICMP messages.')
icmpOutShort = MibScalar((1, 3, 6, 1, 4, 1, 2011, 1, 3, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpOutShort.setStatus('mandatory')
if mibBuilder.loadTexts: icmpOutShort.setDescription('The number of errors discarded because IP datagram was too short.')
mibBuilder.exportSymbols("HUAWEI-ICMP-MIB", icmpInChecksum=icmpInChecksum, icmpInBadLen=icmpInBadLen, icmpInBadCode=icmpInBadCode, icmpOutShort=icmpOutShort, icmpInTooShort=icmpInTooShort, icmpOutOldIcmp=icmpOutOldIcmp, rIcmp=rIcmp)
