#
# PySNMP MIB module DL5400-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DL5400-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:47:38 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Gauge32, NotificationType, NotificationType, enterprises, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, ModuleIdentity, MibIdentifier, iso, Bits, TimeTicks, Counter64, ObjectIdentity, Unsigned32, Integer32, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "NotificationType", "NotificationType", "enterprises", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "ModuleIdentity", "MibIdentifier", "iso", "Bits", "TimeTicks", "Counter64", "ObjectIdentity", "Unsigned32", "Integer32", "IpAddress")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class DisplayString(OctetString):
    pass

digital_link = MibIdentifier((1, 3, 6, 1, 4, 1, 300)).setLabel("digital-link")
dl5400 = MibIdentifier((1, 3, 6, 1, 4, 1, 300, 110))
configuration = MibIdentifier((1, 3, 6, 1, 4, 1, 300, 110, 1))
alarms = MibIdentifier((1, 3, 6, 1, 4, 1, 300, 110, 2))
events = MibIdentifier((1, 3, 6, 1, 4, 1, 300, 110, 3))
statistics = MibIdentifier((1, 3, 6, 1, 4, 1, 300, 110, 4))
maintenance = MibIdentifier((1, 3, 6, 1, 4, 1, 300, 110, 5))
class DL5400Validation(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("valid", 1), ("invalid", 2))

class DL5400commBaudRate(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("bps1200", 1), ("bps2400", 2), ("bps4800", 3), ("bps9600", 4), ("bps19200", 5), ("bps38400", 6), ("bps57600", 7), ("bps115200", 8))

class DL5400commParity(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("even", 1), ("odd", 2), ("none", 3))

class DL5400commStopBits(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("one", 1), ("oneAndHalf", 2), ("two", 3))

class DL5400commNumDataBits(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(7, 8))
    namedValues = NamedValues(("seven", 7), ("eight", 8))

class DL5400commFlowControl(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("xoffUntilXon", 1), ("xoffUntilAny", 2), ("hwFlowControl", 3), ("none", 4))

class TODYear(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 9999)

class TODMonth(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 12)

class TODDay(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 31)

class TODHour(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 23)

class TODMinute(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 59)

class TODSecond(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 59)

class DL5400CardId(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("mpm", 1), ("pp", 2), ("enet", 3), ("ds1", 4))

class DL5400PortId(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))
    namedValues = NamedValues(("dte", 1), ("nmsEthernet", 2), ("comm1", 3), ("comm2", 4), ("net1", 5), ("net2", 6), ("net3", 7), ("net4", 8), ("net5", 9), ("net6", 10), ("net7", 11), ("net8", 12))

class DL5400TxClkSrc(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("internalClock", 1), ("externalClock", 2), ("rcvrdTiming", 3), ("autoTiming", 4))

class DL5400Event(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175))
    namedValues = NamedValues(("ev-mod-appear", 1), ("ev-mod-disappear", 2), ("ev-system-reset", 3), ("ev-system-initialized", 4), ("ev-timeofday-changed", 5), ("ev-admin-isnr", 6), ("ev-admin-oos", 7), ("ev-admin-oosmt", 8), ("ev-cuisession-inactivitytimeout", 9), ("ev-clkref-configchanged", 10), ("ev-selftest-fail", 11), ("ev-ram-test-fail", 12), ("ev-rom-checksum-fail", 13), ("ev-flash-checksum-fail", 14), ("ev-time-not-set", 15), ("ev-unit-restart", 16), ("ev-lamptest-start", 17), ("ev-lamptest-end", 18), ("ev-mgmt-post-fail", 19), ("ev-mgmt-post-fail-remit", 20), ("ev-front-high-temperature", 21), ("ev-front-high-temperature-remit", 22), ("ev-back-high-temperature", 23), ("ev-back-high-temperature-remit", 24), ("ev-external-major-alarm-input", 25), ("ev-external-major-alarm-input-end", 26), ("ev-external-minor-alarm-input", 27), ("ev-external-minor-alarm-input-end", 28), ("ev-external-status-alarm-input", 29), ("ev-external-status-alarm-input-end", 30), ("ev-primary-clk-fail", 31), ("ev-primary-clk-ok", 32), ("ev-secondary-clk-fail", 33), ("ev-secondary-clk-ok", 34), ("ev-ext-clk-fail", 35), ("ev-ext-clk-ok", 36), ("ev-fan1-fail", 37), ("ev-fan1-ok", 38), ("ev-fan2-fail", 39), ("ev-fan2-ok", 40), ("ev-ps-fan-fail", 41), ("ev-ps-fan-ok", 42), ("ev-packet-processor-post-fail", 43), ("ev-packet-processor-post-ok", 44), ("ev-packet-processor-missing", 45), ("ev-packet-processor-ok", 46), ("ev-voltage-exceeds", 47), ("ev-voltage-ok", 48), ("ev-module-processor-fail", 49), ("ev-module-processor-ok", 50), ("ev-mod-cfg-mismatch", 51), ("ev-mod-cfg-match", 52), ("ev-use-primary-clk", 53), ("ev-use-secondary-clk", 54), ("ev-use-internal-clk", 55), ("ev-use-rx-clk1", 56), ("ev-use-rx-clk2", 57), ("ev-use-rx-clk3", 58), ("ev-use-rx-clk4", 59), ("ev-use-rx-clk5", 60), ("ev-use-rx-clk6", 61), ("ev-use-rx-clk7", 62), ("ev-use-rx-clk8", 63), ("ev-mlppp-post-fail", 64), ("ev-mlppp-post-fail-remit", 65), ("ev-mlppp-module-missing", 66), ("ev-mlppp-module-ok", 67), ("ev-mlppp-insufficient-links", 68), ("ev-mlppp-insufficient-links-remit", 69), ("ev-mod-fail", 70), ("ev-mod-up", 71), ("ev-mod-no-resp", 72), ("ev-mod-hello", 73), ("ev-mod-init-fail", 74), ("ev-mod-init-ok", 75), ("ev-mod-some-ports-failed", 76), ("ev-mod-some-ports-ok", 77), ("ev-mod-all-ports-failed", 78), ("ev-mod-all-ports-ok", 79), ("ev-lost-signal", 100), ("ev-lost-signal-remit", 101), ("ev-lof", 102), ("ev-lof-remit", 103), ("ev-ais", 104), ("ev-ais-remit", 105), ("ev-rai", 106), ("ev-rai-remit", 107), ("ev-red-alarm", 108), ("ev-red-alarm-remit", 109), ("ev-exceeded-cv-consec-sec", 110), ("ev-exceeded-cv-consec-sec-remit", 111), ("ev-exceeded-ses-consec-sec", 112), ("ev-exceeded-ses-consec-sec-remit", 113), ("ev-exceeded-uas-consec-sec", 114), ("ev-exceeded-uas-consec-sec-remit", 115), ("ev-exceeded-pcv-15min-minor-threshold", 116), ("ev-exceeded-pcv-15min-minor-threshold-remit", 117), ("ev-exceeded-pcv-15min-major-threshold", 118), ("ev-exceeded-pcv-15min-major-threshold-remit", 119), ("ev-exceeded-es-15min-minor-threshold", 120), ("ev-exceeded-es-15min-minor-threshold-remit", 121), ("ev-exceeded-es-15min-major-threshold", 122), ("ev-exceeded-es-15min-major-threshold-remit", 123), ("ev-exceeded-ses-15min-minor-threshold", 124), ("ev-exceeded-ses-15min-minor-threshold-remit", 125), ("ev-exceeded-ses-15min-major-threshold", 126), ("ev-exceeded-ses-15min-major-threshold-remit", 127), ("ev-exceeded-sas-15min-minor-threshold", 128), ("ev-exceeded-sas-15min-minor-threshold-remit", 129), ("ev-exceeded-sas-15min-major-threshold", 130), ("ev-exceeded-sas-15min-major-threshold-remit", 131), ("ev-exceeded-uas-15min-minor-threshold", 132), ("ev-exceeded-uas-15min-minor-threshold-remit", 133), ("ev-exceeded-uas-15min-major-threshold", 134), ("ev-exceeded-uas-15min-major-threshold-remit", 135), ("ev-exceeded-pcv-24hr-minor-threshold", 136), ("ev-exceeded-pcv-24hr-minor-threshold-remit", 137), ("ev-exceeded-pcv-24hr-major-threshold", 138), ("ev-exceeded-pcv-24hr-major-threshold-remit", 139), ("ev-exceeded-es-24hr-minor-threshold", 140), ("ev-exceeded-es-24hr-minor-threshold-remit", 141), ("ev-exceeded-es-24hr-major-threshold", 142), ("ev-exceeded-es-24hr-major-threshold-remit", 143), ("ev-exceeded-ses-24hr-minor-threshold", 144), ("ev-exceeded-ses-24hr-minor-threshold-remit", 145), ("ev-exceeded-ses-24hr-major-threshold", 146), ("ev-exceeded-ses-24hr-major-threshold-remit", 147), ("ev-exceeded-sas-24hr-minor-threshold", 148), ("ev-exceeded-sas-24hr-minor-threshold-remit", 149), ("ev-exceeded-sas-24hr-major-threshold", 150), ("ev-exceeded-sas-24hr-major-threshold-remit", 151), ("ev-exceeded-uas-24hr-minor-threshold", 152), ("ev-exceeded-uas-24hr-minor-threshold-remit", 153), ("ev-exceeded-uas-24hr-major-threshold", 154), ("ev-exceeded-uas-24hr-major-threshold-remit", 155), ("ev-net-local-loopback-start", 156), ("ev-net-local-loopback-end", 157), ("ev-net-remote-loopback-start", 158), ("ev-net-remote-loopback-end", 159), ("ev-net-payload-loopback-start", 160), ("ev-net-payload-loopback-end", 161), ("ev-net-BERT-start", 162), ("ev-net-BERT-end", 163), ("ev-ppp-echo-timeout", 164), ("ev-ppp-echo-timeout-remit", 165), ("ev-ppp-loopback-line", 166), ("ev-ppp-loopback-line-remit", 167), ("ev-ppp-link-fallback", 168), ("ev-ppp-link-fallback-remit", 169), ("ev-dte-local-loopback-start", 170), ("ev-dte-local-loopback-end", 171), ("ev-dte-remote-loopback-start", 172), ("ev-dte-remote-loopback-end", 173), ("ev-mlppp-link-down", 174), ("ev-mlppp-link-up", 175))

unitLevelConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 300, 110, 1, 1))
unitSerialNum = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitSerialNum.setStatus('mandatory')
if mibBuilder.loadTexts: unitSerialNum.setDescription('An ID that uniquely and globally identifies the unit. A Serial Number must consist of printable ASCII characters 0x20..0x7E.')
unitName = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitName.setStatus('mandatory')
if mibBuilder.loadTexts: unitName.setDescription('A descriptive name that identifies the DL5400 unit. Use of this parameter is optional, but recommended to aid management.')
unitHwRev = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitHwRev.setStatus('mandatory')
if mibBuilder.loadTexts: unitHwRev.setDescription('The DL5400 hardware revision.')
unitSwRev = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitSwRev.setStatus('mandatory')
if mibBuilder.loadTexts: unitSwRev.setDescription('The DL5400 software revision.')
unitMibRev = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitMibRev.setStatus('mandatory')
if mibBuilder.loadTexts: unitMibRev.setDescription('The DL5400 MIB revision.')
unitFrontPnl = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitFrontPnl.setStatus('mandatory')
if mibBuilder.loadTexts: unitFrontPnl.setDescription('This feature enables (ON) or disables (OFF) the users ability to make changes in the configuration or run tests from the front panel display and buttons.')
unitDateYear = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 1, 1, 7), TODYear()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitDateYear.setStatus('mandatory')
if mibBuilder.loadTexts: unitDateYear.setDescription("The DL5400's date: Year.")
unitDateMonth = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 1, 1, 8), TODMonth()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitDateMonth.setStatus('mandatory')
if mibBuilder.loadTexts: unitDateMonth.setDescription("The DL5400's date: Month.")
unitDateDay = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 1, 1, 9), TODDay()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitDateDay.setStatus('mandatory')
if mibBuilder.loadTexts: unitDateDay.setDescription("The DL5400's date: Day.")
unitTimeHour = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 1, 1, 10), TODHour()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitTimeHour.setStatus('mandatory')
if mibBuilder.loadTexts: unitTimeHour.setDescription("The DL5400's time: Hour.")
unitTimeMinute = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 1, 1, 11), TODMinute()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitTimeMinute.setStatus('mandatory')
if mibBuilder.loadTexts: unitTimeMinute.setDescription("The DL5400's time: Minute.")
unitTimeSecond = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 1, 1, 12), TODSecond()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitTimeSecond.setStatus('mandatory')
if mibBuilder.loadTexts: unitTimeSecond.setDescription("The DL5400's time: Second.")
unitTimezone = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24))).clone(namedValues=NamedValues(("gmtTimezone", 1), ("g01Timezone", 2), ("g02Timezone", 3), ("g03Timezone", 4), ("g04Timezone", 5), ("estTimezone", 6), ("cstTimezone", 7), ("mstTimezone", 8), ("pstTimezone", 9), ("astTimezone", 10), ("hstTimezone", 11), ("g11Timezone", 12), ("g12Timezone", 13), ("g13Timezone", 14), ("g14Timezone", 15), ("g15Timezone", 16), ("g16Timezone", 17), ("g17Timezone", 18), ("g18Timezone", 19), ("g19Timezone", 20), ("g20Timezone", 21), ("g21Timezone", 22), ("g22Timezone", 23), ("g23Timezone", 24))).clone('gmtTimezone')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitTimezone.setStatus('mandatory')
if mibBuilder.loadTexts: unitTimezone.setDescription(' This object is used to indicate the timezone associated with the time of day that exists on DL5400 System. The enumerated values are defined as hours west of Greenwhich, for example, g01Timezone represents the time zone which is 1 hour west of Greenwhich. ')
unitLedStatus = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("off", 1), ("green", 2), ("blink-Green", 3), ("blink-Amber", 4), ("solid-Amber", 5), ("red", 6), ("blink-Red", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitLedStatus.setStatus('mandatory')
if mibBuilder.loadTexts: unitLedStatus.setDescription(' The defined values have the following description Off - The unit is not equipped or is provision in an out of Service state Green - No alarms, status or test conditions exists for the unit Blink Amber - Test conditions are present in the unit Solid Amber - A minor alarm condition persists in the unit or on some interface of the unit, or the unit is powering up. Red - An Alarm condition persists in the unit or on some interface of the unit Blink-Green - reserved Blink-Red - reserved ')
unitTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 1, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitTimeStamp.setStatus('mandatory')
if mibBuilder.loadTexts: unitTimeStamp.setDescription('Time Stamp on the unit of format MM/DD/YYYY HH:MM:SS This will be sent as a varbind along with all the traps to NMS manager')
unitModelType = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("ml-pppNxDs1Enet", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitModelType.setStatus('mandatory')
if mibBuilder.loadTexts: unitModelType.setDescription('The unit model type ')
unitRouteMode = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("staticIp", 1), ("fastForward", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitRouteMode.setStatus('mandatory')
if mibBuilder.loadTexts: unitRouteMode.setDescription('Unit Route Mode')
unitTelnetConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 300, 110, 1, 2))
unitTelnetIdleTimeout = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 1, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitTelnetIdleTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: unitTelnetIdleTimeout.setDescription(' This object is used to indicate number of minutes of inactivity required before setting the telnet access point to auto-logoff. ')
unitDteEnetCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 300, 110, 1, 3))
dteEnetTable = MibTable((1, 3, 6, 1, 4, 1, 300, 110, 1, 3, 1), )
if mibBuilder.loadTexts: dteEnetTable.setStatus('mandatory')
if mibBuilder.loadTexts: dteEnetTable.setDescription('Table of all Dte Ethernet ports in the system ')
dteEnetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 300, 110, 1, 3, 1, 1), ).setIndexNames((0, "DL5400-MIB", "dteEnetIndex"))
if mibBuilder.loadTexts: dteEnetEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dteEnetEntry.setDescription('An entry in the dteEnetTable ')
dteEnetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("dte1", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dteEnetIndex.setStatus('mandatory')
if mibBuilder.loadTexts: dteEnetIndex.setDescription(' The dteEnet port index ')
dteEnetIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 1, 3, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dteEnetIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: dteEnetIpAddress.setDescription('IP address assigned to the DTE port of the DL5400.')
dteEnetSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 1, 3, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dteEnetSubnetMask.setStatus('mandatory')
if mibBuilder.loadTexts: dteEnetSubnetMask.setDescription('IP Subnet mask assigned to the DTE port of the DL5400.')
dteEnetMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 1, 3, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dteEnetMacAddress.setStatus('mandatory')
if mibBuilder.loadTexts: dteEnetMacAddress.setDescription('Ethernet MAC address of this dte port')
dteEnetProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ethernet", 1), ("ieee8023", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dteEnetProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: dteEnetProtocol.setDescription('Ethernet protocol used by the DL5400. dix is also called Ethernet-II.')
dteEnetOper = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 1, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("autodetect", 1), ("tenMb", 2), ("hundredMb", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dteEnetOper.setStatus('mandatory')
if mibBuilder.loadTexts: dteEnetOper.setDescription('Ethernet operation used by the DL5400.')
dteEnetMode = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 1, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("autodetect", 1), ("halfduplex", 2), ("fullduplex", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dteEnetMode.setStatus('mandatory')
if mibBuilder.loadTexts: dteEnetMode.setDescription('Ethernet mode used by the DL5400.')
dteEnetOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 1, 3, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dteEnetOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dteEnetOperStatus.setDescription('Ethernet operation status')
dteEnetModeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 1, 3, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dteEnetModeStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dteEnetModeStatus.setDescription('Ethernet Mode status')
comm1SerialConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 300, 110, 1, 5))
comm1SerialPortState = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 1, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: comm1SerialPortState.setStatus('mandatory')
if mibBuilder.loadTexts: comm1SerialPortState.setDescription(' This object is used to enable or disable port.')
comm1SerialBaudRate = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 1, 5, 2), DL5400commBaudRate()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: comm1SerialBaudRate.setStatus('mandatory')
if mibBuilder.loadTexts: comm1SerialBaudRate.setDescription('COMM 1 Baud Rate.')
comm1SerialBitsPerWord = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 1, 5, 3), DL5400commNumDataBits()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: comm1SerialBitsPerWord.setStatus('mandatory')
if mibBuilder.loadTexts: comm1SerialBitsPerWord.setDescription('COMM 1 Bits Per Word.')
comm1SerialStopBits = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 1, 5, 4), DL5400commStopBits()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: comm1SerialStopBits.setStatus('mandatory')
if mibBuilder.loadTexts: comm1SerialStopBits.setDescription('COMM 1 Stop Bits.')
comm1SerialParity = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 1, 5, 5), DL5400commParity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: comm1SerialParity.setStatus('mandatory')
if mibBuilder.loadTexts: comm1SerialParity.setDescription('COMM 1 Parity.')
comm1SerialFlowControl = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 1, 5, 6), DL5400commFlowControl()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: comm1SerialFlowControl.setStatus('mandatory')
if mibBuilder.loadTexts: comm1SerialFlowControl.setDescription('COMM 1 Flow Control.')
comm1SerialLogoutOnLos = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 1, 5, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: comm1SerialLogoutOnLos.setStatus('mandatory')
if mibBuilder.loadTexts: comm1SerialLogoutOnLos.setDescription(' This object is used to enable or disable auto-logoff on loss of DSR.')
comm1SerialIdleTimeout = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 1, 5, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: comm1SerialIdleTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: comm1SerialIdleTimeout.setDescription(' This object is used to indicate number of minutes of inactivity required before setting this serial access point to auto-logoff. ')
comm2SerialConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 300, 110, 1, 6))
comm2SerialPortState = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 1, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: comm2SerialPortState.setStatus('mandatory')
if mibBuilder.loadTexts: comm2SerialPortState.setDescription(' This object is used to enable or disable port.')
comm2SerialBaudRate = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 1, 6, 2), DL5400commBaudRate()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: comm2SerialBaudRate.setStatus('mandatory')
if mibBuilder.loadTexts: comm2SerialBaudRate.setDescription('COMM 2 Baud Rate.')
comm2SerialBitsPerWord = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 1, 6, 3), DL5400commNumDataBits()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: comm2SerialBitsPerWord.setStatus('mandatory')
if mibBuilder.loadTexts: comm2SerialBitsPerWord.setDescription('COMM 2 Bits Per Word.')
comm2SerialStopBits = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 1, 6, 4), DL5400commStopBits()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: comm2SerialStopBits.setStatus('mandatory')
if mibBuilder.loadTexts: comm2SerialStopBits.setDescription('COMM 2 Stop Bits.')
comm2SerialParity = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 1, 6, 5), DL5400commParity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: comm2SerialParity.setStatus('mandatory')
if mibBuilder.loadTexts: comm2SerialParity.setDescription('COMM 2 Parity.')
comm2SerialFlowControl = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 1, 6, 6), DL5400commFlowControl()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: comm2SerialFlowControl.setStatus('mandatory')
if mibBuilder.loadTexts: comm2SerialFlowControl.setDescription('COMM 2 Flow Control. HwFlowControl option is not applicable for multidrop serial port when in MultiDrop mode')
comm2SerialLogoutOnLos = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 1, 6, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: comm2SerialLogoutOnLos.setStatus('mandatory')
if mibBuilder.loadTexts: comm2SerialLogoutOnLos.setDescription(' This object is used to enable or disable auto-logoff on loss of DSR.')
comm2SerialIdleTimeout = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 1, 6, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: comm2SerialIdleTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: comm2SerialIdleTimeout.setDescription(' This object is used to indicate number of minutes of inactivity required before setting this serial access point to auto-logoff. ')
comm2InMDmode = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 1, 6, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: comm2InMDmode.setStatus('mandatory')
if mibBuilder.loadTexts: comm2InMDmode.setDescription(' This object indicates if this serial port is in multidrop mode or not. ')
comm2InMDId = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 1, 6, 10), DisplayString().clone('0')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: comm2InMDId.setStatus('mandatory')
if mibBuilder.loadTexts: comm2InMDId.setDescription('Identifies the multidrop session ')
netConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 300, 110, 1, 7))
netPriTxClk = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 1, 7, 1), DL5400TxClkSrc()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netPriTxClk.setStatus('mandatory')
if mibBuilder.loadTexts: netPriTxClk.setDescription('The primary transmit clock source for DL5400.')
netPriLoopPort = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 1, 7, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netPriLoopPort.setStatus('mandatory')
if mibBuilder.loadTexts: netPriLoopPort.setDescription('The primary loop port clock source for DL5400.')
netSecTxClk = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 1, 7, 3), DL5400TxClkSrc()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netSecTxClk.setStatus('mandatory')
if mibBuilder.loadTexts: netSecTxClk.setDescription('The secondary transmit clock source for DL5400.')
netSecLoopPort = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 1, 7, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netSecLoopPort.setStatus('mandatory')
if mibBuilder.loadTexts: netSecLoopPort.setDescription('The secondary loop port clock source for DL5400.')
netExtClkFrequency = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 1, 7, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("freq8kHZ", 1), ("freq1544kHZ", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netExtClkFrequency.setStatus('mandatory')
if mibBuilder.loadTexts: netExtClkFrequency.setDescription('The defined parameters are the external clock frequencies. The user must provision what frequency is to be used')
netPriStatus = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 1, 7, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netPriStatus.setStatus('mandatory')
if mibBuilder.loadTexts: netPriStatus.setDescription('Primary clock operation status')
netSecStatus = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 1, 7, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netSecStatus.setStatus('mandatory')
if mibBuilder.loadTexts: netSecStatus.setDescription('Secondary clock operation status')
netActiveStatus = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 1, 7, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netActiveStatus.setStatus('mandatory')
if mibBuilder.loadTexts: netActiveStatus.setDescription('Active clock operation status')
netSuppressYeldet = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 1, 7, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("suppressYelDet", 1), ("allowYelDet", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netSuppressYeldet.setStatus('mandatory')
if mibBuilder.loadTexts: netSuppressYeldet.setDescription('This enables or disables the suppression of Yellow Alarm (RAI) detection. Applicable in SF Framing')
netLineType = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 1, 7, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("t1", 1), ("e1", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netLineType.setStatus('mandatory')
if mibBuilder.loadTexts: netLineType.setDescription('Tells if this is a T1 or E1 device')
netPortTable = MibTable((1, 3, 6, 1, 4, 1, 300, 110, 1, 7, 11), )
if mibBuilder.loadTexts: netPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: netPortTable.setDescription(' Table of all network port in the system. ')
netPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 300, 110, 1, 7, 11, 1), ).setIndexNames((0, "DL5400-MIB", "netPortIndex"))
if mibBuilder.loadTexts: netPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: netPortEntry.setDescription('An entry in the Net Port Table')
netPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 1, 7, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: netPortIndex.setDescription('The network port index.')
netAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 1, 7, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("is", 1), ("oos", 2), ("oos-mt", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netAdmin.setStatus('mandatory')
if mibBuilder.loadTexts: netAdmin.setDescription('Tells the Net DS1 Admin state')
netFramingFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 1, 7, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("esf", 2), ("d4", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netFramingFormat.setStatus('mandatory')
if mibBuilder.loadTexts: netFramingFormat.setDescription('This variable describes the Framing Format option for the network port.')
netLineCode = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 1, 7, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 5))).clone(namedValues=NamedValues(("b8zs", 2), ("ami", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netLineCode.setStatus('mandatory')
if mibBuilder.loadTexts: netLineCode.setDescription('This variable describes the Line Code option for the network port.')
netLBO = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 1, 7, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("ft0To133", 3), ("ft133To266", 4), ("ft266To399", 5), ("ft399To533", 6), ("ft533To655", 7), ("lbo-0dB", 8), ("lbo-7p5dB", 9), ("lbo-15dB", 10), ("lbo-22p5dB", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netLBO.setStatus('mandatory')
if mibBuilder.loadTexts: netLBO.setDescription('This selects the line build out value in dBs and applies to CSU/DSU mode only.')
netEGL = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 1, 7, 11, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("egl-36dB", 1), ("egl-30dB", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netEGL.setStatus('mandatory')
if mibBuilder.loadTexts: netEGL.setDescription('This selects the equalizer gain limit in dBs and applies to CSU mode only.')
netFDL = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 1, 7, 11, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("ansi", 2), ("att", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netFDL.setStatus('mandatory')
if mibBuilder.loadTexts: netFDL.setDescription("'other' indicates that a protocol other than one following is used. 'dsx1Ansi-T1-403' refers to the FDL exchange recommended by ANSI. 'dsx1Att-54016' refers to ESF FDL exchanges. 'dsx1Fdl-none' indicates that the device does not use the FDL.")
netSetCode = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 1, 7, 11, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netSetCode.setStatus('mandatory')
if mibBuilder.loadTexts: netSetCode.setDescription('enabled or disabled setCode feature.')
netClock = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 1, 7, 11, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("loopTiming", 1), ("sysTiming", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netClock.setStatus('mandatory')
if mibBuilder.loadTexts: netClock.setDescription('This selects the source of Transmit clock.')
netFrameStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 1, 7, 11, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netFrameStatus.setStatus('mandatory')
if mibBuilder.loadTexts: netFrameStatus.setDescription('Framing Operational State.')
netFrameUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 1, 7, 11, 1, 11), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netFrameUpTime.setStatus('mandatory')
if mibBuilder.loadTexts: netFrameUpTime.setDescription('Tells the Framing UpTime.')
unitSnmpConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 300, 110, 1, 8))
unitSnmpTrapAddrTable = MibTable((1, 3, 6, 1, 4, 1, 300, 110, 1, 8, 1), )
if mibBuilder.loadTexts: unitSnmpTrapAddrTable.setStatus('mandatory')
if mibBuilder.loadTexts: unitSnmpTrapAddrTable.setDescription(' A list of IP addresses of the management stations along with information on how to direct a trap to that addresss')
unitSnmpTrapAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 300, 110, 1, 8, 1, 1), ).setIndexNames((0, "DL5400-MIB", "unitSnmpTrapHostAddr"))
if mibBuilder.loadTexts: unitSnmpTrapAddrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: unitSnmpTrapAddrEntry.setDescription('An entry in the Snmp trap address table')
unitSnmpTrapHostAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 1, 8, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitSnmpTrapHostAddr.setStatus('mandatory')
if mibBuilder.loadTexts: unitSnmpTrapHostAddr.setDescription('Specifies the IP address of the management station to which this unit sends traps.')
unitSnmpTrapDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 1, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("inBand", 2), ("outBand", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitSnmpTrapDirection.setStatus('mandatory')
if mibBuilder.loadTexts: unitSnmpTrapDirection.setDescription('Specifies the way the trap is to be sent to the host')
unitSnmpTrapDevState = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 1, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("forward", 1), ("block", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitSnmpTrapDevState.setStatus('mandatory')
if mibBuilder.loadTexts: unitSnmpTrapDevState.setDescription('Specifies whether to forward or block SNMP traps on device.')
unitSnmpTrapCommunity = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 1, 8, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitSnmpTrapCommunity.setStatus('mandatory')
if mibBuilder.loadTexts: unitSnmpTrapCommunity.setDescription('Specifies the Community Name of the management station to which this unit sends traps.')
unitPPPConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 300, 110, 1, 9))
pppPortTable = MibTable((1, 3, 6, 1, 4, 1, 300, 110, 1, 9, 1), )
if mibBuilder.loadTexts: pppPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: pppPortTable.setDescription(' Table of all network ports in the system. ')
pppPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 300, 110, 1, 9, 1, 1), ).setIndexNames((0, "DL5400-MIB", "pppPortIndex"))
if mibBuilder.loadTexts: pppPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pppPortEntry.setDescription('An entry in the PPP Port table')
pppPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 1, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("net1", 1), ("net2", 2), ("net3", 3), ("net4", 4), ("net5", 5), ("net6", 6), ("net7", 7), ("net8", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pppPortIndex.setDescription('Port number of the Net port.')
pppPortInitialMRU = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 1, 9, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppPortInitialMRU.setStatus('mandatory')
if mibBuilder.loadTexts: pppPortInitialMRU.setDescription('The initial Maximum Receive Unit (MRU) that the local PPP entity will advertise to the remote entity. If the value of this variable is 0 then the local PPP entity will not advertise any MRU to the remote entity and the default MRU will be assumed. Changing this object will have effect when the link is next restarted.')
pppPortMagicNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 1, 9, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppPortMagicNumber.setStatus('mandatory')
if mibBuilder.loadTexts: pppPortMagicNumber.setDescription('If true(2) then the local node will attempt to perform Magic Number negotiation with the remote node. If false(1) then this negotiation is not performed. In any event, the local node will comply with any magic number negotiations attempted by the remote node, per the PPP specification. Changing this object will have effect when the link is next restarted.')
pppPortFcsSize = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 1, 9, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("size16bits", 1), ("size32bits", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppPortFcsSize.setStatus('mandatory')
if mibBuilder.loadTexts: pppPortFcsSize.setDescription('The size of the FCS, in bits, the local node will attempt to negotiate for use with the remote node. Regardless of the value of this object, the local node will comply with any FCS size negotiations initiated by the remote node, per the PPP specification. Changing this object will have effect when the link is next restarted.')
pppPortRestore = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 1, 9, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("auto", 1), ("manual", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppPortRestore.setStatus('mandatory')
if mibBuilder.loadTexts: pppPortRestore.setDescription('PPP port restore mode, auto or manual.')
unitMLPPPConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 300, 110, 1, 9, 2))
mlPPPIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 1, 9, 2, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mlPPPIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: mlPPPIpAddress.setDescription('IP Address assigned to the ML-PPP port of DL5400.')
mlPPPSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 1, 9, 2, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mlPPPSubnetMask.setStatus('mandatory')
if mibBuilder.loadTexts: mlPPPSubnetMask.setDescription('IP Subnet mask assigned to the ML-PPP link of DL5400.')
mlPPPNumberedInterface = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 1, 9, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mlPPPNumberedInterface.setStatus('mandatory')
if mibBuilder.loadTexts: mlPPPNumberedInterface.setDescription('Numbered Interface enabled or disabled.')
mlPPPMRRU = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 1, 9, 2, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mlPPPMRRU.setStatus('mandatory')
if mibBuilder.loadTexts: mlPPPMRRU.setDescription('Maximum Received Reconstructed Unit of ML-PPP.')
mlPPPBundleStatus = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 1, 9, 2, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlPPPBundleStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mlPPPBundleStatus.setDescription('Tells the current bundle status')
mlPPPBundleUpTime = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 1, 9, 2, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlPPPBundleUpTime.setStatus('mandatory')
if mibBuilder.loadTexts: mlPPPBundleUpTime.setDescription('The time (in hundredths of a second) since the bundle is up.')
mlPPPIPCPState = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 1, 9, 2, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlPPPIPCPState.setStatus('mandatory')
if mibBuilder.loadTexts: mlPPPIPCPState.setDescription('The current state of IPCP.')
mlPPPPortTable = MibTable((1, 3, 6, 1, 4, 1, 300, 110, 1, 9, 3), )
if mibBuilder.loadTexts: mlPPPPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: mlPPPPortTable.setDescription(' Table of all mlppp port in the system. ')
mlPPPPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 300, 110, 1, 9, 3, 1), ).setIndexNames((0, "DL5400-MIB", "mlPPPPortIndex"))
if mibBuilder.loadTexts: mlPPPPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mlPPPPortEntry.setDescription('An entry in the mlppp Port Table')
mlPPPPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 1, 9, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlPPPPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mlPPPPortIndex.setDescription('The network port index.')
mlPPPAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 1, 9, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("is", 1), ("oos", 2), ("oos-mt", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mlPPPAdmin.setStatus('mandatory')
if mibBuilder.loadTexts: mlPPPAdmin.setDescription('Tells the MLPPP Admin State.')
mlPPPStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 1, 9, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlPPPStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mlPPPStatus.setDescription('Tells the MLPPP Operational State.')
mlPPPUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 1, 9, 3, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlPPPUpTime.setStatus('mandatory')
if mibBuilder.loadTexts: mlPPPUpTime.setDescription('The time (in hundredths of a second) since the MLPPP is up.')
mlPPPLCPState = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 1, 9, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlPPPLCPState.setStatus('mandatory')
if mibBuilder.loadTexts: mlPPPLCPState.setDescription('Tells the LCP Operational State.')
unitRouterConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 300, 110, 1, 10))
unitStaticRoutingTable = MibTable((1, 3, 6, 1, 4, 1, 300, 110, 1, 10, 1), )
if mibBuilder.loadTexts: unitStaticRoutingTable.setStatus('mandatory')
if mibBuilder.loadTexts: unitStaticRoutingTable.setDescription(' Table of all static routing entries in the system. ')
staticRoutingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 300, 110, 1, 10, 1, 1), ).setIndexNames((0, "DL5400-MIB", "routeDestination"))
if mibBuilder.loadTexts: staticRoutingEntry.setStatus('mandatory')
if mibBuilder.loadTexts: staticRoutingEntry.setDescription(' An entry in the static routing table. ')
routeDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 1, 10, 1, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: routeDestination.setStatus('mandatory')
if mibBuilder.loadTexts: routeDestination.setDescription('Destination of the static route.')
routeNetworkMask = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 1, 10, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: routeNetworkMask.setStatus('mandatory')
if mibBuilder.loadTexts: routeNetworkMask.setDescription('Network Mask')
routeNextHopAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 1, 10, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: routeNextHopAddress.setStatus('mandatory')
if mibBuilder.loadTexts: routeNextHopAddress.setDescription('Address of the next hop router. The next hop router must be on the same local network as DL5400')
routeMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 1, 10, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: routeMetric.setStatus('mandatory')
if mibBuilder.loadTexts: routeMetric.setDescription('Number of hops between DL5400 and the destination.')
routeDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 1, 10, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("wan", 1), ("num", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: routeDirection.setStatus('mandatory')
if mibBuilder.loadTexts: routeDirection.setDescription('Direction of the Route, Network(NUM) or WAN.')
routeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 1, 10, 1, 1, 6), DL5400Validation()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: routeStatus.setStatus('mandatory')
if mibBuilder.loadTexts: routeStatus.setDescription('Writing invalid has the effect of deleting this interface.')
unitArpConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 300, 110, 1, 11))
unitClearArpTable = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 1, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitClearArpTable.setStatus('mandatory')
if mibBuilder.loadTexts: unitClearArpTable.setDescription(' Clear all arp entries in the system. ')
unitArpTable = MibTable((1, 3, 6, 1, 4, 1, 300, 110, 1, 11, 2), )
if mibBuilder.loadTexts: unitArpTable.setStatus('mandatory')
if mibBuilder.loadTexts: unitArpTable.setDescription(' Table of all arp entries in the system. ')
unitArpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 300, 110, 1, 11, 2, 1), ).setIndexNames((0, "DL5400-MIB", "arpEntryNum"))
if mibBuilder.loadTexts: unitArpEntry.setStatus('mandatory')
if mibBuilder.loadTexts: unitArpEntry.setDescription(' An entry in the arp table. ')
arpEntryNum = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 1, 11, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpEntryNum.setStatus('mandatory')
if mibBuilder.loadTexts: arpEntryNum.setDescription('Entry Number in the arp table.')
arpIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 1, 11, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpIPAddress.setStatus('mandatory')
if mibBuilder.loadTexts: arpIPAddress.setDescription('Entry IpAddress in the arp table.')
arpMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 1, 11, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpMACAddress.setStatus('mandatory')
if mibBuilder.loadTexts: arpMACAddress.setDescription('Entry MAC address in the arp table.')
arpPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 1, 11, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpPortNum.setStatus('mandatory')
if mibBuilder.loadTexts: arpPortNum.setDescription('Entry Port Number in the arp table.')
unitAlarmConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 300, 110, 2, 1))
unitAlarmStatusTable = MibTable((1, 3, 6, 1, 4, 1, 300, 110, 2, 1, 1), )
if mibBuilder.loadTexts: unitAlarmStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: unitAlarmStatusTable.setDescription('The Unit Level alarms and status table.')
unitAlarmStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 300, 110, 2, 1, 1, 1), ).setIndexNames((0, "DL5400-MIB", "unitAlarmIndex"))
if mibBuilder.loadTexts: unitAlarmStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: unitAlarmStatusEntry.setDescription('An Entry in the unit Alarms Table.')
unitAlarmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 2, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitAlarmIndex.setStatus('mandatory')
if mibBuilder.loadTexts: unitAlarmIndex.setDescription('An index value that uniquely identifies a Unit Level alarm entry.')
unitAlarmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 2, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("status", 1), ("minor", 2), ("major", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitAlarmSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: unitAlarmSeverity.setDescription('This parameter indicates the severity of the alarm, or may indicate that the data is status only.')
unitAlarmType = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 2, 1, 1, 1, 3), DL5400Event()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitAlarmType.setStatus('mandatory')
if mibBuilder.loadTexts: unitAlarmType.setDescription('This parameter is the code for the alarm or status type. This code is used to index into an array of text strings to present a message to the human operator.')
unitAlarmOriginCardNum = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 2, 1, 1, 1, 4), DL5400CardId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitAlarmOriginCardNum.setStatus('mandatory')
if mibBuilder.loadTexts: unitAlarmOriginCardNum.setDescription('The card type of the device originating the event.')
unitAlarmOriginPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 2, 1, 1, 1, 5), DL5400PortId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitAlarmOriginPortNum.setStatus('mandatory')
if mibBuilder.loadTexts: unitAlarmOriginPortNum.setDescription('The port number of the device originating the event.')
unitEventTable = MibTable((1, 3, 6, 1, 4, 1, 300, 110, 3, 1), )
if mibBuilder.loadTexts: unitEventTable.setStatus('mandatory')
if mibBuilder.loadTexts: unitEventTable.setDescription('The Unit Level event history table.')
unitEventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 300, 110, 3, 1, 1), ).setIndexNames((0, "DL5400-MIB", "unitEventIndex"))
if mibBuilder.loadTexts: unitEventEntry.setStatus('mandatory')
if mibBuilder.loadTexts: unitEventEntry.setDescription('An entry in the Unit Level event history table.')
unitEventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitEventIndex.setStatus('mandatory')
if mibBuilder.loadTexts: unitEventIndex.setDescription('An index that uniquely identifies a Unit Level event entry.')
unitEventSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("status", 1), ("minor", 2), ("major", 3), ("clear", 4), ("information", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitEventSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: unitEventSeverity.setDescription('This parameter indicates whether an entry is status-only or the severity of an alarm entry.')
unitEventHour = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 3, 1, 1, 3), TODHour()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitEventHour.setStatus('mandatory')
if mibBuilder.loadTexts: unitEventHour.setDescription('The hour that the event occurred.')
unitEventMinute = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 3, 1, 1, 4), TODMinute()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitEventMinute.setStatus('mandatory')
if mibBuilder.loadTexts: unitEventMinute.setDescription('The minute that the event occurred.')
unitEventSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 3, 1, 1, 5), TODSecond()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitEventSecond.setStatus('mandatory')
if mibBuilder.loadTexts: unitEventSecond.setDescription('The second that the event occurred.')
unitEventMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 3, 1, 1, 6), TODMonth()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitEventMonth.setStatus('mandatory')
if mibBuilder.loadTexts: unitEventMonth.setDescription('The month that the event occurred.')
unitEventDay = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 3, 1, 1, 7), TODDay()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitEventDay.setStatus('mandatory')
if mibBuilder.loadTexts: unitEventDay.setDescription('The day that the event occurred.')
unitEventYear = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 3, 1, 1, 8), TODYear()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitEventYear.setStatus('mandatory')
if mibBuilder.loadTexts: unitEventYear.setDescription('The year that the event occurred.')
unitEventOriginCardNum = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 3, 1, 1, 9), DL5400CardId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitEventOriginCardNum.setStatus('mandatory')
if mibBuilder.loadTexts: unitEventOriginCardNum.setDescription('The card type of the device originating the event.')
unitEventOriginPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 3, 1, 1, 10), DL5400PortId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitEventOriginPortNum.setStatus('mandatory')
if mibBuilder.loadTexts: unitEventOriginPortNum.setDescription('The port number of the device originating the event.')
unitEventType = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 3, 1, 1, 11), DL5400Event()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitEventType.setStatus('mandatory')
if mibBuilder.loadTexts: unitEventType.setDescription('This parameter is the code for the event type. This code is used to index into an array of text strings to present a message to the human operator.')
arpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 300, 110, 4, 1))
arpbadLengthField = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpbadLengthField.setStatus('mandatory')
if mibBuilder.loadTexts: arpbadLengthField.setDescription('Bad Length Field')
arpunsupportedHardware = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpunsupportedHardware.setStatus('mandatory')
if mibBuilder.loadTexts: arpunsupportedHardware.setDescription('unsupported Hardware')
arpunsupportedProtocol = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpunsupportedProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: arpunsupportedProtocol.setDescription('unsupported Protocol')
arpinvalidSenderAddr = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpinvalidSenderAddr.setStatus('mandatory')
if mibBuilder.loadTexts: arpinvalidSenderAddr.setDescription('total number of packets with invalid sender protocol address')
arpinvalidTargetAddr = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpinvalidTargetAddr.setStatus('mandatory')
if mibBuilder.loadTexts: arpinvalidTargetAddr.setDescription('total number of packets with invalid target protocol address')
arpbadAddress = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpbadAddress.setStatus('mandatory')
if mibBuilder.loadTexts: arpbadAddress.setDescription('bad address')
arppktsReceived = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arppktsReceived.setStatus('mandatory')
if mibBuilder.loadTexts: arppktsReceived.setDescription('total number of packets recieved')
arpshortPktsReceived = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpshortPktsReceived.setStatus('mandatory')
if mibBuilder.loadTexts: arpshortPktsReceived.setDescription('total number of short packets recieved')
arppktsFromMeReceived = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arppktsFromMeReceived.setStatus('mandatory')
if mibBuilder.loadTexts: arppktsFromMeReceived.setDescription('total number of packets from me received')
arpsrcBcstReceived = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpsrcBcstReceived.setStatus('mandatory')
if mibBuilder.loadTexts: arpsrcBcstReceived.setDescription('total number of source broadcasts received')
arprepliedSent = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arprepliedSent.setStatus('mandatory')
if mibBuilder.loadTexts: arprepliedSent.setDescription('total number of replies sent')
arpincomingRequests = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpincomingRequests.setStatus('mandatory')
if mibBuilder.loadTexts: arpincomingRequests.setDescription('total number of incoming requests')
arprequestSent = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 4, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arprequestSent.setStatus('mandatory')
if mibBuilder.loadTexts: arprequestSent.setDescription('total number of requests sent')
arpnoMACAddr = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 4, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpnoMACAddr.setStatus('mandatory')
if mibBuilder.loadTexts: arpnoMACAddr.setDescription('No MAC address')
hdlcStatsTable = MibTable((1, 3, 6, 1, 4, 1, 300, 110, 4, 2), )
if mibBuilder.loadTexts: hdlcStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: hdlcStatsTable.setDescription('The hdlc statistics table.')
hdlcStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 300, 110, 4, 2, 1), ).setIndexNames((0, "DL5400-MIB", "hdlcPortIndex"))
if mibBuilder.loadTexts: hdlcStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hdlcStatsEntry.setDescription('An entry in the Hdlc statistics table.')
hdlcPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdlcPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: hdlcPortIndex.setDescription('Port Index')
hdlcLinkStatusBadFCSc = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 4, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdlcLinkStatusBadFCSc.setStatus('mandatory')
if mibBuilder.loadTexts: hdlcLinkStatusBadFCSc.setDescription('Bad FCS')
hdlcFramesAborted = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 4, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdlcFramesAborted.setStatus('mandatory')
if mibBuilder.loadTexts: hdlcFramesAborted.setDescription('Frame aborted')
hdlcFramesNotAligned = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 4, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdlcFramesNotAligned.setStatus('mandatory')
if mibBuilder.loadTexts: hdlcFramesNotAligned.setDescription('Frame not aligned')
hdlcOctetsRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 4, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdlcOctetsRcv.setStatus('mandatory')
if mibBuilder.loadTexts: hdlcOctetsRcv.setDescription('Octets Received')
hdlcPctsRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 4, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdlcPctsRcv.setStatus('mandatory')
if mibBuilder.loadTexts: hdlcPctsRcv.setDescription('Packets Received')
hdlcOctetsTrsmt = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 4, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdlcOctetsTrsmt.setStatus('mandatory')
if mibBuilder.loadTexts: hdlcOctetsTrsmt.setDescription('Octets Transmitted')
hdlcPctsTrsmt = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 4, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdlcPctsTrsmt.setStatus('mandatory')
if mibBuilder.loadTexts: hdlcPctsTrsmt.setDescription('Packets Transmitted')
miscStats = MibIdentifier((1, 3, 6, 1, 4, 1, 300, 110, 4, 3))
miscprotocolPctsDumped = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 4, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscprotocolPctsDumped.setStatus('mandatory')
if mibBuilder.loadTexts: miscprotocolPctsDumped.setDescription('Rx packets with IF error on data Ethernet interface')
miscnonroutablePcts = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 4, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscnonroutablePcts.setStatus('mandatory')
if mibBuilder.loadTexts: miscnonroutablePcts.setDescription('Rx packets non routable on data Ehternet interface')
clrStats = MibIdentifier((1, 3, 6, 1, 4, 1, 300, 110, 4, 4))
clearAllStats = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 4, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clearAllStats.setStatus('mandatory')
if mibBuilder.loadTexts: clearAllStats.setDescription('clear all statistics')
clearCur15Min = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 4, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clearCur15Min.setStatus('mandatory')
if mibBuilder.loadTexts: clearCur15Min.setDescription('clear current 15 minutes statistics')
clearCur24Hr = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 4, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clearCur24Hr.setStatus('mandatory')
if mibBuilder.loadTexts: clearCur24Hr.setDescription('clear current 24 hours statistics')
clearOld15Min = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 4, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clearOld15Min.setStatus('mandatory')
if mibBuilder.loadTexts: clearOld15Min.setDescription('clear old 15 minutes statistics')
clearOld24Hr = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 4, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clearOld24Hr.setStatus('mandatory')
if mibBuilder.loadTexts: clearOld24Hr.setDescription('clear old 24 hours statistics')
maintModTable = MibTable((1, 3, 6, 1, 4, 1, 300, 110, 5, 1), )
if mibBuilder.loadTexts: maintModTable.setStatus('mandatory')
if mibBuilder.loadTexts: maintModTable.setDescription('Table of all Module Status in the system ')
maintModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 300, 110, 5, 1, 1), ).setIndexNames((0, "DL5400-MIB", "maintModIndex"))
if mibBuilder.loadTexts: maintModEntry.setStatus('mandatory')
if mibBuilder.loadTexts: maintModEntry.setDescription('An entry in the maintModTable ')
maintModIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("pp", 1), ("ds1", 2), ("enet", 3), ("mpm", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: maintModIndex.setStatus('mandatory')
if mibBuilder.loadTexts: maintModIndex.setDescription(' The module index ')
maintModStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maintModStatus.setStatus('mandatory')
if mibBuilder.loadTexts: maintModStatus.setDescription('Module actual status')
maintOperstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 5, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maintOperstatus.setStatus('mandatory')
if mibBuilder.loadTexts: maintOperstatus.setDescription('Module Operational status')
dl5400ModulesAppear = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,1)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
if mibBuilder.loadTexts: dl5400ModulesAppear.setDescription('There is a module appeared in the device.')
dl5400ModulesDisappear = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,2)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
if mibBuilder.loadTexts: dl5400ModulesDisappear.setDescription('There is a module disappeared in the device.')
dl5400SelfTestFail = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,11)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
if mibBuilder.loadTexts: dl5400SelfTestFail.setDescription('Self Test failed on the unit.')
dl5400RamTestFail = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,12)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
if mibBuilder.loadTexts: dl5400RamTestFail.setDescription('RAM Test failed on the unit.')
dl5400RomChecksumFail = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,13)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
if mibBuilder.loadTexts: dl5400RomChecksumFail.setDescription('ROM Checksum failed on the unit.')
dl5400FlashChecksumFail = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,14)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
if mibBuilder.loadTexts: dl5400FlashChecksumFail.setDescription('Flash Checksum failed on the unit.')
dl5400TimeNotSet = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,15)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
if mibBuilder.loadTexts: dl5400TimeNotSet.setDescription("The Unit's time is not set.")
dl5400UnitRestart = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,16)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
if mibBuilder.loadTexts: dl5400UnitRestart.setDescription('The Unit is resetting.')
dl5400LampTestStart = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,17)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
if mibBuilder.loadTexts: dl5400LampTestStart.setDescription('Lamp Test started.')
dl5400LampTestEnd = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,18)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
if mibBuilder.loadTexts: dl5400LampTestEnd.setDescription('Lamp Test terminated.')
dl5400mgmtPOSTFail = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,19)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
if mibBuilder.loadTexts: dl5400mgmtPOSTFail.setDescription('Management POST failed.')
dl5400mgmtPOSTok = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,20)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
if mibBuilder.loadTexts: dl5400mgmtPOSTok.setDescription('Management Port OK.')
dl5400FrontTemperatureHigh = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,21)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
if mibBuilder.loadTexts: dl5400FrontTemperatureHigh.setDescription("The unit's front temperature is high.")
dl5400FrontTemperatureOK = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,22)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
if mibBuilder.loadTexts: dl5400FrontTemperatureOK.setDescription("The unit's front temperature is OK.")
dl5400BackTemperatureHigh = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,23)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
if mibBuilder.loadTexts: dl5400BackTemperatureHigh.setDescription("The unit's back temperature is high.")
dl5400BackTemperatureOK = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,24)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
if mibBuilder.loadTexts: dl5400BackTemperatureOK.setDescription("The unit's back temperature is OK.")
dl5400ExternalMajorAlarmStart = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,25)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
if mibBuilder.loadTexts: dl5400ExternalMajorAlarmStart.setDescription('The external major alarm input is active on the unit.')
dl5400ExternalMajorAlarmEnd = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,26)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
if mibBuilder.loadTexts: dl5400ExternalMajorAlarmEnd.setDescription('The external major alarm input is de-activated on the unit.')
dl5400ExternalMinorAlarmStart = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,27)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
if mibBuilder.loadTexts: dl5400ExternalMinorAlarmStart.setDescription('The external minor alarm input is active on the unit.')
dl5400ExternalMinorAlarmEnd = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,28)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
if mibBuilder.loadTexts: dl5400ExternalMinorAlarmEnd.setDescription('The external minor alarm input is de-activated on the unit.')
dl5400ExternalStatusAlarmStart = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,29)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
if mibBuilder.loadTexts: dl5400ExternalStatusAlarmStart.setDescription('The external status alarm input is active on the unit.')
dl5400ExternalStatusAlarmEnd = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,30)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
if mibBuilder.loadTexts: dl5400ExternalStatusAlarmEnd.setDescription('The external status alarm input is de-activated on the unit.')
dl5400PrimaryClockFail = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,31)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
if mibBuilder.loadTexts: dl5400PrimaryClockFail.setDescription("Unit's primary clock has failed.")
dl5400PrimaryClockOk = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,32)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
if mibBuilder.loadTexts: dl5400PrimaryClockOk.setDescription("Unit's primary clock is OK.")
dl5400SecondaryClockFail = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,33)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
if mibBuilder.loadTexts: dl5400SecondaryClockFail.setDescription("Unit's Secondary clock has failed.")
dl5400SecondaryClockOk = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,34)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
if mibBuilder.loadTexts: dl5400SecondaryClockOk.setDescription("Unit's Secondary clock is OK.")
dl5400ExternalClockFail = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,35)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
if mibBuilder.loadTexts: dl5400ExternalClockFail.setDescription("Unit's external clock has failed.")
dl5400ExternalClockOk = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,36)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
if mibBuilder.loadTexts: dl5400ExternalClockOk.setDescription("Unit's external clock is OK.")
dl5400Fan1FailAlarm = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,37)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
if mibBuilder.loadTexts: dl5400Fan1FailAlarm.setDescription('A fan 1 failed on the unit.')
dl5400Fan1Ok = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,38)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
if mibBuilder.loadTexts: dl5400Fan1Ok.setDescription('A fan is ok on the unit.')
dl5400Fan2FailAlarm = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,39)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
if mibBuilder.loadTexts: dl5400Fan2FailAlarm.setDescription('A fan 2 failed on the unit.')
dl5400Fan2Ok = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,40)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
if mibBuilder.loadTexts: dl5400Fan2Ok.setDescription('A fan 2 is ok on the unit.')
dl5400PSFanFailed = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,41)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
if mibBuilder.loadTexts: dl5400PSFanFailed.setDescription('Power Supply Fan Failed on the unit.')
dl5400PSFanOK = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,42)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
if mibBuilder.loadTexts: dl5400PSFanOK.setDescription('Power Supply Fan OK on the unit.')
dl5400PktProcessorPostFail = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,43)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
if mibBuilder.loadTexts: dl5400PktProcessorPostFail.setDescription('Packet Processor POST Failed.')
dl5400PktProcessorPostOk = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,44)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
if mibBuilder.loadTexts: dl5400PktProcessorPostOk.setDescription('Packet Processor POST OK.')
dl5400PacketProcessorMissing = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,45)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
if mibBuilder.loadTexts: dl5400PacketProcessorMissing.setDescription('Packet Processor Missing.')
dl5400PacketProcessorOk = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,46)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
if mibBuilder.loadTexts: dl5400PacketProcessorOk.setDescription('Packet Processor OK.')
dl5400VoltageExceeds = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,47)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
if mibBuilder.loadTexts: dl5400VoltageExceeds.setDescription('Voltage has exceeded allowed operating voltage range')
dl5400VoltageOk = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,48)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
if mibBuilder.loadTexts: dl5400VoltageOk.setDescription('Voltage is within allowed limits')
dl5400ModuleProcessorFail = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,49)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
if mibBuilder.loadTexts: dl5400ModuleProcessorFail.setDescription('Module Processor Failed')
dl5400ModuleProcessorOk = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,50)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
if mibBuilder.loadTexts: dl5400ModuleProcessorOk.setDescription('Module Processor OK.')
dl5400ModulesCfgMismatch = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,51)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
if mibBuilder.loadTexts: dl5400ModulesCfgMismatch.setDescription('There is configuration mismatch between equipped modules.')
dl5400ModulesCfgMatch = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,52)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
if mibBuilder.loadTexts: dl5400ModulesCfgMatch.setDescription('There is no configuration mismatch between equipped modules.')
dl5400UsePriClkAlarm = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,53)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
if mibBuilder.loadTexts: dl5400UsePriClkAlarm.setDescription('Using primary clock source on the unit.')
dl5400UseSecClkAlarm = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,54)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
if mibBuilder.loadTexts: dl5400UseSecClkAlarm.setDescription('Using secondary clock source on the unit. Primary clock source failed on the unit.')
dl5400UseIntClkAlarm = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,55)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
if mibBuilder.loadTexts: dl5400UseIntClkAlarm.setDescription('Using internal clock source on the unit. Primary and secondary clock sources failed on the unit.')
dl5400UseRxClk1Alarm = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,56)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
if mibBuilder.loadTexts: dl5400UseRxClk1Alarm.setDescription('Receive multiplexer synced to net 1.')
dl5400UseRxClk2Alarm = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,57)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
if mibBuilder.loadTexts: dl5400UseRxClk2Alarm.setDescription('Receive multiplexer synced to net 2.')
dl5400UseRxClk3Alarm = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,58)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
if mibBuilder.loadTexts: dl5400UseRxClk3Alarm.setDescription('Receive multiplexer synced to net 3.')
dl5400UseRxClk4Alarm = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,59)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
if mibBuilder.loadTexts: dl5400UseRxClk4Alarm.setDescription('Receive multiplexer synced to net 4.')
dl5400UseRxClk5Alarm = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,60)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
if mibBuilder.loadTexts: dl5400UseRxClk5Alarm.setDescription('Receive multiplexer synced to net 5.')
dl5400UseRxClk6Alarm = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,61)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
if mibBuilder.loadTexts: dl5400UseRxClk6Alarm.setDescription('Receive multiplexer synced to net 6.')
dl5400UseRxClk7Alarm = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,62)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
if mibBuilder.loadTexts: dl5400UseRxClk7Alarm.setDescription('Receive multiplexer synced to net 7.')
dl5400UseRxClk8Alarm = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,63)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
if mibBuilder.loadTexts: dl5400UseRxClk8Alarm.setDescription('Receive multiplexer synced to net 8.')
dl5400MLpppPOSTFail = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,64)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
if mibBuilder.loadTexts: dl5400MLpppPOSTFail.setDescription('ML-PPP POST failed.')
dl5400MLpppPOSTok = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,65)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
if mibBuilder.loadTexts: dl5400MLpppPOSTok.setDescription('ML-PPP Port OK.')
dl5400MLpppModuleMissing = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,66)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
if mibBuilder.loadTexts: dl5400MLpppModuleMissing.setDescription('ML-PPP Module is Missing ')
dl5400MLpppModuleOK = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,67)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
if mibBuilder.loadTexts: dl5400MLpppModuleOK.setDescription('ML-PPP Module is OK ')
dl5400MLpppInsufficientLinks = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,68)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
if mibBuilder.loadTexts: dl5400MLpppInsufficientLinks.setDescription('ML-PPP Insufficient links reported.')
dl5400MLpppInsufficientLinksOk = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,69)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
if mibBuilder.loadTexts: dl5400MLpppInsufficientLinksOk.setDescription('Insufficient ML-PPP links alarm remitted.')
dl5400ModulesFail = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,70)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
if mibBuilder.loadTexts: dl5400ModulesFail.setDescription('There is a module failed in the device.')
dl5400ModulesUp = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,71)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
if mibBuilder.loadTexts: dl5400ModulesUp.setDescription('There is a module up in the device.')
dl5400LossOfSignalStart = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,100)).setObjects(("DL5400-MIB", "unitEventOriginPortNum"), ("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
if mibBuilder.loadTexts: dl5400LossOfSignalStart.setDescription('Loss of Signal occured on the specified Network port.')
dl5400LossOfSignalEnd = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,101)).setObjects(("DL5400-MIB", "unitEventOriginPortNum"), ("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
if mibBuilder.loadTexts: dl5400LossOfSignalEnd.setDescription('Loss of Signal ended on the specified Network port.')
dl5400LossOfFrameStart = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,102)).setObjects(("DL5400-MIB", "unitEventOriginPortNum"), ("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
if mibBuilder.loadTexts: dl5400LossOfFrameStart.setDescription('Loss of Frame ended on the specified Network port.')
dl5400LossOfFrameEnd = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,103)).setObjects(("DL5400-MIB", "unitEventOriginPortNum"), ("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
if mibBuilder.loadTexts: dl5400LossOfFrameEnd.setDescription('Loss of Frame ended on the specified Network port.')
dl5400AisStart = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,104)).setObjects(("DL5400-MIB", "unitEventOriginPortNum"), ("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
if mibBuilder.loadTexts: dl5400AisStart.setDescription('AIS Alarm started on the specified Network port.')
dl5400AisEnd = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,105)).setObjects(("DL5400-MIB", "unitEventOriginPortNum"), ("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
if mibBuilder.loadTexts: dl5400AisEnd.setDescription('AIS Alarm started on the specified Network port.')
dl5400RaiStart = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,106)).setObjects(("DL5400-MIB", "unitEventOriginPortNum"), ("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
if mibBuilder.loadTexts: dl5400RaiStart.setDescription('RAI Alarm(Yellow) received on the specified Network port.')
dl5400RaiEnd = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,107)).setObjects(("DL5400-MIB", "unitEventOriginPortNum"), ("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
if mibBuilder.loadTexts: dl5400RaiEnd.setDescription('RAI Alarm(Yellow) Ended on the specified Network port.')
dl5400netLineRemoteLoopbackStart = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,158)).setObjects(("DL5400-MIB", "unitEventOriginPortNum"), ("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
if mibBuilder.loadTexts: dl5400netLineRemoteLoopbackStart.setDescription('Network Line/Remote Loopback on specified Network port .')
dl5400netLineRemoteLoopbackEnd = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,159)).setObjects(("DL5400-MIB", "unitEventOriginPortNum"), ("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
if mibBuilder.loadTexts: dl5400netLineRemoteLoopbackEnd.setDescription('Network Line/Remote Loopback ended on specified Network port .')
dl5400pppEchoTimeout = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,164)).setObjects(("DL5400-MIB", "unitEventOriginPortNum"), ("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
if mibBuilder.loadTexts: dl5400pppEchoTimeout.setDescription('PPP Echo Timeout.')
dl5400pppEchoTimeoutRemit = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,165)).setObjects(("DL5400-MIB", "unitEventOriginPortNum"), ("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
if mibBuilder.loadTexts: dl5400pppEchoTimeoutRemit.setDescription('PPP Echo Timeout Alarm Remitted.')
dl5400pppLineLoopbackStart = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,166)).setObjects(("DL5400-MIB", "unitEventOriginPortNum"), ("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
if mibBuilder.loadTexts: dl5400pppLineLoopbackStart.setDescription('PPP Line Loopback Start.')
dl5400pppLineLoopbackEnd = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,167)).setObjects(("DL5400-MIB", "unitEventOriginPortNum"), ("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
if mibBuilder.loadTexts: dl5400pppLineLoopbackEnd.setDescription('PPP Line Loopback End.')
dl5400pppLinkFallbackStart = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,168)).setObjects(("DL5400-MIB", "unitEventOriginPortNum"), ("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
if mibBuilder.loadTexts: dl5400pppLinkFallbackStart.setDescription('PPP Link FallbackStart.')
dl5400pppLinkFallbackEnd = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,169)).setObjects(("DL5400-MIB", "unitEventOriginPortNum"), ("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
if mibBuilder.loadTexts: dl5400pppLinkFallbackEnd.setDescription('PPP Link Fallback End.')
dl5400dteLocalLoopbackStart = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,170)).setObjects(("DL5400-MIB", "unitEventOriginPortNum"), ("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
if mibBuilder.loadTexts: dl5400dteLocalLoopbackStart.setDescription('Network DTE Local Loopback on specified Network port .')
dl5400dteLocalLoopbackEnd = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,171)).setObjects(("DL5400-MIB", "unitEventOriginPortNum"), ("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
if mibBuilder.loadTexts: dl5400dteLocalLoopbackEnd.setDescription('Network DTE Local Loopback ended on specified Network port .')
dl5400dteRemoteLoopbackStart = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,172)).setObjects(("DL5400-MIB", "unitEventOriginPortNum"), ("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
if mibBuilder.loadTexts: dl5400dteRemoteLoopbackStart.setDescription('Network DTE Remote Loopback on specified Network port .')
dl5400dteRemoteLoopbackEnd = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,173)).setObjects(("DL5400-MIB", "unitEventOriginPortNum"), ("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
if mibBuilder.loadTexts: dl5400dteRemoteLoopbackEnd.setDescription('Network DTE Remote Loopback ended on specified Network port .')
dl5400MLpppLinkDown = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,174)).setObjects(("DL5400-MIB", "unitEventOriginPortNum"), ("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
if mibBuilder.loadTexts: dl5400MLpppLinkDown.setDescription('ML-PPP links down caused by ML-PPP Protocol Layer.')
dl5400MLpppLinkUp = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,175)).setObjects(("DL5400-MIB", "unitEventOriginPortNum"), ("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
if mibBuilder.loadTexts: dl5400MLpppLinkUp.setDescription('ML-PPP links up caused by ML-PPP Protocol Layer.')
mibBuilder.exportSymbols("DL5400-MIB", unitEventSeverity=unitEventSeverity, clearAllStats=clearAllStats, routeMetric=routeMetric, dl5400ModulesCfgMismatch=dl5400ModulesCfgMismatch, dl5400AisStart=dl5400AisStart, unitAlarmOriginCardNum=unitAlarmOriginCardNum, pppPortIndex=pppPortIndex, unitAlarmStatusEntry=unitAlarmStatusEntry, maintOperstatus=maintOperstatus, unitDateYear=unitDateYear, dteEnetTable=dteEnetTable, arppktsFromMeReceived=arppktsFromMeReceived, comm1SerialPortState=comm1SerialPortState, dteEnetMacAddress=dteEnetMacAddress, unitDateMonth=unitDateMonth, TODMinute=TODMinute, pppPortEntry=pppPortEntry, arpincomingRequests=arpincomingRequests, netLineType=netLineType, dl5400pppLineLoopbackStart=dl5400pppLineLoopbackStart, netExtClkFrequency=netExtClkFrequency, hdlcOctetsTrsmt=hdlcOctetsTrsmt, mlPPPLCPState=mlPPPLCPState, arpIPAddress=arpIPAddress, comm2SerialPortState=comm2SerialPortState, events=events, dl5400MLpppPOSTFail=dl5400MLpppPOSTFail, arpunsupportedHardware=arpunsupportedHardware, maintenance=maintenance, TODHour=TODHour, dl5400LossOfSignalStart=dl5400LossOfSignalStart, unitEventMonth=unitEventMonth, comm1SerialBaudRate=comm1SerialBaudRate, netSecTxClk=netSecTxClk, dteEnetSubnetMask=dteEnetSubnetMask, netPortEntry=netPortEntry, unitTelnetIdleTimeout=unitTelnetIdleTimeout, unitLedStatus=unitLedStatus, comm2SerialStopBits=comm2SerialStopBits, arpshortPktsReceived=arpshortPktsReceived, dl5400LampTestEnd=dl5400LampTestEnd, arpPortNum=arpPortNum, unitPPPConfig=unitPPPConfig, DL5400Validation=DL5400Validation, comm2SerialParity=comm2SerialParity, dl5400pppLinkFallbackStart=dl5400pppLinkFallbackStart, dl5400pppEchoTimeoutRemit=dl5400pppEchoTimeoutRemit, dl5400VoltageOk=dl5400VoltageOk, unitModelType=unitModelType, pppPortRestore=pppPortRestore, dl5400ExternalStatusAlarmEnd=dl5400ExternalStatusAlarmEnd, DisplayString=DisplayString, unitArpEntry=unitArpEntry, pppPortMagicNumber=pppPortMagicNumber, arpinvalidSenderAddr=arpinvalidSenderAddr, clearOld24Hr=clearOld24Hr, dl5400MLpppInsufficientLinks=dl5400MLpppInsufficientLinks, dl5400netLineRemoteLoopbackStart=dl5400netLineRemoteLoopbackStart, dl5400RaiStart=dl5400RaiStart, mlPPPAdmin=mlPPPAdmin, unitHwRev=unitHwRev, routeNetworkMask=routeNetworkMask, maintModTable=maintModTable, dl5400ModuleProcessorOk=dl5400ModuleProcessorOk, DL5400commParity=DL5400commParity, comm2SerialFlowControl=comm2SerialFlowControl, mlPPPBundleStatus=mlPPPBundleStatus, comm2SerialBitsPerWord=comm2SerialBitsPerWord, dl5400ExternalClockOk=dl5400ExternalClockOk, netSecStatus=netSecStatus, hdlcOctetsRcv=hdlcOctetsRcv, dl5400ExternalStatusAlarmStart=dl5400ExternalStatusAlarmStart, unitEventHour=unitEventHour, arpbadAddress=arpbadAddress, dl5400ModulesCfgMatch=dl5400ModulesCfgMatch, unitSnmpTrapAddrEntry=unitSnmpTrapAddrEntry, unitArpTable=unitArpTable, clearCur15Min=clearCur15Min, unitDateDay=unitDateDay, unitEventDay=unitEventDay, netFrameStatus=netFrameStatus, comm1SerialFlowControl=comm1SerialFlowControl, dteEnetOperStatus=dteEnetOperStatus, dl5400VoltageExceeds=dl5400VoltageExceeds, dl5400UseRxClk1Alarm=dl5400UseRxClk1Alarm, unitEventEntry=unitEventEntry, arpMACAddress=arpMACAddress, configuration=configuration, unitSerialNum=unitSerialNum, netLineCode=netLineCode, mlPPPPortIndex=mlPPPPortIndex, arpunsupportedProtocol=arpunsupportedProtocol, comm2SerialIdleTimeout=comm2SerialIdleTimeout, unitAlarmIndex=unitAlarmIndex, hdlcPctsTrsmt=hdlcPctsTrsmt, clearCur24Hr=clearCur24Hr, maintModStatus=maintModStatus, dl5400BackTemperatureHigh=dl5400BackTemperatureHigh, dl5400mgmtPOSTFail=dl5400mgmtPOSTFail, mlPPPIPCPState=mlPPPIPCPState, dl5400LampTestStart=dl5400LampTestStart, unitTelnetConfig=unitTelnetConfig, pppPortTable=pppPortTable, maintModIndex=maintModIndex, mlPPPStatus=mlPPPStatus, comm2InMDId=comm2InMDId, unitEventIndex=unitEventIndex, dl5400UseRxClk2Alarm=dl5400UseRxClk2Alarm, dl5400UseRxClk4Alarm=dl5400UseRxClk4Alarm, comm1SerialParity=comm1SerialParity, dl5400ExternalClockFail=dl5400ExternalClockFail, dl5400BackTemperatureOK=dl5400BackTemperatureOK, dl5400ModuleProcessorFail=dl5400ModuleProcessorFail, dl5400dteLocalLoopbackEnd=dl5400dteLocalLoopbackEnd, unitSnmpTrapDevState=unitSnmpTrapDevState, unitSnmpTrapCommunity=unitSnmpTrapCommunity, dl5400Fan1FailAlarm=dl5400Fan1FailAlarm, unitTimezone=unitTimezone, unitEventOriginPortNum=unitEventOriginPortNum, dl5400AisEnd=dl5400AisEnd, unitSnmpTrapAddrTable=unitSnmpTrapAddrTable, dl5400LossOfFrameEnd=dl5400LossOfFrameEnd, netFDL=netFDL, dl5400TimeNotSet=dl5400TimeNotSet, dl5400dteRemoteLoopbackStart=dl5400dteRemoteLoopbackStart, mlPPPIpAddress=mlPPPIpAddress, unitName=unitName, DL5400CardId=DL5400CardId, unitStaticRoutingTable=unitStaticRoutingTable, netPortTable=netPortTable, dl5400MLpppLinkUp=dl5400MLpppLinkUp, arpEntryNum=arpEntryNum, comm2SerialLogoutOnLos=comm2SerialLogoutOnLos, netAdmin=netAdmin, mlPPPSubnetMask=mlPPPSubnetMask, routeStatus=routeStatus, staticRoutingEntry=staticRoutingEntry, arpnoMACAddr=arpnoMACAddr, dl5400UsePriClkAlarm=dl5400UsePriClkAlarm, dl5400ModulesFail=dl5400ModulesFail, dl5400MLpppModuleOK=dl5400MLpppModuleOK, comm2InMDmode=comm2InMDmode, unitLevelConfig=unitLevelConfig, netConfig=netConfig, arpbadLengthField=arpbadLengthField, dl5400RaiEnd=dl5400RaiEnd, unitRouterConfig=unitRouterConfig, dl5400ModulesUp=dl5400ModulesUp, dl5400ExternalMajorAlarmEnd=dl5400ExternalMajorAlarmEnd, dl5400LossOfFrameStart=dl5400LossOfFrameStart, miscprotocolPctsDumped=miscprotocolPctsDumped, dl5400netLineRemoteLoopbackEnd=dl5400netLineRemoteLoopbackEnd, dl5400UseRxClk3Alarm=dl5400UseRxClk3Alarm, netPriTxClk=netPriTxClk, comm1SerialBitsPerWord=comm1SerialBitsPerWord, dl5400UnitRestart=dl5400UnitRestart, dl5400PktProcessorPostFail=dl5400PktProcessorPostFail, dl5400UseRxClk6Alarm=dl5400UseRxClk6Alarm, netSetCode=netSetCode, pppPortFcsSize=pppPortFcsSize, unitArpConfig=unitArpConfig, unitAlarmType=unitAlarmType, dteEnetModeStatus=dteEnetModeStatus, netLBO=netLBO, dl5400ExternalMinorAlarmEnd=dl5400ExternalMinorAlarmEnd, dl5400ExternalMajorAlarmStart=dl5400ExternalMajorAlarmStart, dl5400pppLineLoopbackEnd=dl5400pppLineLoopbackEnd, hdlcFramesNotAligned=hdlcFramesNotAligned, dl5400PacketProcessorMissing=dl5400PacketProcessorMissing, mlPPPPortTable=mlPPPPortTable, dl5400Fan2Ok=dl5400Fan2Ok, TODSecond=TODSecond, unitTimeStamp=unitTimeStamp, DL5400Event=DL5400Event, dl5400PrimaryClockFail=dl5400PrimaryClockFail, unitFrontPnl=unitFrontPnl, hdlcPortIndex=hdlcPortIndex, dteEnetIndex=dteEnetIndex, DL5400PortId=DL5400PortId, unitEventOriginCardNum=unitEventOriginCardNum, hdlcStatsTable=hdlcStatsTable, unitSnmpConfig=unitSnmpConfig, dteEnetProtocol=dteEnetProtocol, dl5400Fan2FailAlarm=dl5400Fan2FailAlarm, dl5400MLpppModuleMissing=dl5400MLpppModuleMissing, arprepliedSent=arprepliedSent, arprequestSent=arprequestSent, dl5400SecondaryClockOk=dl5400SecondaryClockOk, dl5400dteRemoteLoopbackEnd=dl5400dteRemoteLoopbackEnd, dteEnetEntry=dteEnetEntry, unitEventYear=unitEventYear, TODYear=TODYear, DL5400commBaudRate=DL5400commBaudRate, unitTimeSecond=unitTimeSecond, unitSnmpTrapDirection=unitSnmpTrapDirection, dl5400PktProcessorPostOk=dl5400PktProcessorPostOk, DL5400commNumDataBits=DL5400commNumDataBits, routeDestination=routeDestination, dl5400SecondaryClockFail=dl5400SecondaryClockFail, miscStats=miscStats, arpsrcBcstReceived=arpsrcBcstReceived, unitEventSecond=unitEventSecond, clrStats=clrStats, dl5400UseIntClkAlarm=dl5400UseIntClkAlarm, unitEventType=unitEventType, dl5400RamTestFail=dl5400RamTestFail, DL5400commStopBits=DL5400commStopBits, dl5400MLpppInsufficientLinksOk=dl5400MLpppInsufficientLinksOk, unitAlarmConfig=unitAlarmConfig, dteEnetOper=dteEnetOper, netPriLoopPort=netPriLoopPort, netPortIndex=netPortIndex, digital_link=digital_link, dl5400UseSecClkAlarm=dl5400UseSecClkAlarm, dl5400UseRxClk8Alarm=dl5400UseRxClk8Alarm, dl5400FlashChecksumFail=dl5400FlashChecksumFail, comm1SerialIdleTimeout=comm1SerialIdleTimeout, dl5400Fan1Ok=dl5400Fan1Ok, netEGL=netEGL, mlPPPPortEntry=mlPPPPortEntry, unitRouteMode=unitRouteMode, dl5400RomChecksumFail=dl5400RomChecksumFail, dl5400UseRxClk5Alarm=dl5400UseRxClk5Alarm, dl5400PacketProcessorOk=dl5400PacketProcessorOk, dl5400mgmtPOSTok=dl5400mgmtPOSTok, comm1SerialConfig=comm1SerialConfig, dl5400pppEchoTimeout=dl5400pppEchoTimeout, dteEnetMode=dteEnetMode, unitTimeMinute=unitTimeMinute, dl5400PSFanFailed=dl5400PSFanFailed, miscnonroutablePcts=miscnonroutablePcts, hdlcStatsEntry=hdlcStatsEntry, netPriStatus=netPriStatus, netActiveStatus=netActiveStatus, DL5400commFlowControl=DL5400commFlowControl, unitMLPPPConfig=unitMLPPPConfig, hdlcFramesAborted=hdlcFramesAborted, dl5400ModulesDisappear=dl5400ModulesDisappear, dl5400FrontTemperatureOK=dl5400FrontTemperatureOK, dl5400UseRxClk7Alarm=dl5400UseRxClk7Alarm, mlPPPBundleUpTime=mlPPPBundleUpTime, dteEnetIpAddress=dteEnetIpAddress, TODDay=TODDay, arpStats=arpStats, dl5400pppLinkFallbackEnd=dl5400pppLinkFallbackEnd, hdlcLinkStatusBadFCSc=hdlcLinkStatusBadFCSc, netFrameUpTime=netFrameUpTime, unitSnmpTrapHostAddr=unitSnmpTrapHostAddr, DL5400TxClkSrc=DL5400TxClkSrc, comm1SerialStopBits=comm1SerialStopBits, unitEventMinute=unitEventMinute, dl5400ExternalMinorAlarmStart=dl5400ExternalMinorAlarmStart, comm2SerialBaudRate=comm2SerialBaudRate, netSuppressYeldet=netSuppressYeldet)
mibBuilder.exportSymbols("DL5400-MIB", statistics=statistics, unitSwRev=unitSwRev, netFramingFormat=netFramingFormat, mlPPPMRRU=mlPPPMRRU, routeDirection=routeDirection, unitClearArpTable=unitClearArpTable, dl5400dteLocalLoopbackStart=dl5400dteLocalLoopbackStart, dl5400=dl5400, mlPPPNumberedInterface=mlPPPNumberedInterface, unitDteEnetCfg=unitDteEnetCfg, unitEventTable=unitEventTable, hdlcPctsRcv=hdlcPctsRcv, unitTimeHour=unitTimeHour, maintModEntry=maintModEntry, dl5400ModulesAppear=dl5400ModulesAppear, arppktsReceived=arppktsReceived, dl5400MLpppPOSTok=dl5400MLpppPOSTok, comm2SerialConfig=comm2SerialConfig, dl5400LossOfSignalEnd=dl5400LossOfSignalEnd, alarms=alarms, unitAlarmOriginPortNum=unitAlarmOriginPortNum, dl5400MLpppLinkDown=dl5400MLpppLinkDown, unitAlarmSeverity=unitAlarmSeverity, comm1SerialLogoutOnLos=comm1SerialLogoutOnLos, routeNextHopAddress=routeNextHopAddress, netSecLoopPort=netSecLoopPort, unitAlarmStatusTable=unitAlarmStatusTable, mlPPPUpTime=mlPPPUpTime, dl5400PrimaryClockOk=dl5400PrimaryClockOk, dl5400SelfTestFail=dl5400SelfTestFail, unitMibRev=unitMibRev, dl5400PSFanOK=dl5400PSFanOK, arpinvalidTargetAddr=arpinvalidTargetAddr, pppPortInitialMRU=pppPortInitialMRU, TODMonth=TODMonth, dl5400FrontTemperatureHigh=dl5400FrontTemperatureHigh, netClock=netClock, clearOld15Min=clearOld15Min)
