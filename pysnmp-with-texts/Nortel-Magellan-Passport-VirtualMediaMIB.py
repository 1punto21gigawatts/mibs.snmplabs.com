#
# PySNMP MIB module Nortel-Magellan-Passport-VirtualMediaMIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Nortel-Magellan-Passport-VirtualMediaMIB
# Produced by pysmi-0.3.4 at Wed May  1 14:28:37 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
Integer32, Unsigned32, InterfaceIndex, DisplayString, StorageType, RowStatus = mibBuilder.importSymbols("Nortel-Magellan-Passport-StandardTextualConventionsMIB", "Integer32", "Unsigned32", "InterfaceIndex", "DisplayString", "StorageType", "RowStatus")
Link, = mibBuilder.importSymbols("Nortel-Magellan-Passport-TextualConventionsMIB", "Link")
passportMIBs, components = mibBuilder.importSymbols("Nortel-Magellan-Passport-UsefulDefinitionsMIB", "passportMIBs", "components")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, Unsigned32, MibIdentifier, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, TimeTicks, iso, Counter64, ObjectIdentity, NotificationType, ModuleIdentity, Counter32, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Unsigned32", "MibIdentifier", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "TimeTicks", "iso", "Counter64", "ObjectIdentity", "NotificationType", "ModuleIdentity", "Counter32", "IpAddress")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
virtualMediaMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 135))
vm = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 133))
vmRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 133, 1), )
if mibBuilder.loadTexts: vmRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: vmRowStatusTable.setDescription('This entry controls the addition and deletion of vm components.')
vmRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 133, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VirtualMediaMIB", "vmIndex"))
if mibBuilder.loadTexts: vmRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vmRowStatusEntry.setDescription('A single entry in the table represents a single vm component.')
vmRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 133, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vmRowStatus.setDescription('This variable is used as the basis for SNMP naming of vm components. These components can be added and deleted.')
vmComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 133, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: vmComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
vmStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 133, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: vmStorageType.setDescription('This variable represents the storage type value for the vm tables.')
vmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 133, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)))
if mibBuilder.loadTexts: vmIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vmIndex.setDescription('This variable represents the index for the vm tables.')
vmIf = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 133, 2))
vmIfRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 133, 2, 1), )
if mibBuilder.loadTexts: vmIfRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: vmIfRowStatusTable.setDescription('This entry controls the addition and deletion of vmIf components.')
vmIfRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 133, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VirtualMediaMIB", "vmIndex"), (0, "Nortel-Magellan-Passport-VirtualMediaMIB", "vmIfIndex"))
if mibBuilder.loadTexts: vmIfRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vmIfRowStatusEntry.setDescription('A single entry in the table represents a single vmIf component.')
vmIfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 133, 2, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmIfRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vmIfRowStatus.setDescription('This variable is used as the basis for SNMP naming of vmIf components. These components can be added and deleted.')
vmIfComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 133, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmIfComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: vmIfComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
vmIfStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 133, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmIfStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: vmIfStorageType.setDescription('This variable represents the storage type value for the vmIf tables.')
vmIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 133, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)))
if mibBuilder.loadTexts: vmIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vmIfIndex.setDescription('This variable represents the index for the vmIf tables.')
vmIfMpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 133, 2, 10), )
if mibBuilder.loadTexts: vmIfMpTable.setStatus('mandatory')
if mibBuilder.loadTexts: vmIfMpTable.setDescription('This group contains the base provisioning data for the media base component.')
vmIfMpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 133, 2, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VirtualMediaMIB", "vmIndex"), (0, "Nortel-Magellan-Passport-VirtualMediaMIB", "vmIfIndex"))
if mibBuilder.loadTexts: vmIfMpEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vmIfMpEntry.setDescription('An entry in the vmIfMpTable.')
vmIfLinkToProtocolPort = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 133, 2, 10, 1, 1), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmIfLinkToProtocolPort.setStatus('mandatory')
if mibBuilder.loadTexts: vmIfLinkToProtocolPort.setDescription('This attribute specifies the ProtocolPort to which this interface is linked to. The protocol port is the logical interface to the network. The protocol port component describes the logical characteristics of this interface.')
vmIfCidDataTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 133, 2, 11), )
if mibBuilder.loadTexts: vmIfCidDataTable.setStatus('mandatory')
if mibBuilder.loadTexts: vmIfCidDataTable.setDescription("This group contains the attribute for a component's Customer Identifier (CID). Refer to the attribute description for a detailed explanation of CIDs.")
vmIfCidDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 133, 2, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VirtualMediaMIB", "vmIndex"), (0, "Nortel-Magellan-Passport-VirtualMediaMIB", "vmIfIndex"))
if mibBuilder.loadTexts: vmIfCidDataEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vmIfCidDataEntry.setDescription('An entry in the vmIfCidDataTable.')
vmIfCustomerIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 133, 2, 11, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 8191), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmIfCustomerIdentifier.setStatus('mandatory')
if mibBuilder.loadTexts: vmIfCustomerIdentifier.setDescription("This attribute holds the Customer Identifier (CID). Every component has a CID. If a component has a cid attribute, the component's CID is the provisioned value of that attribute; otherwise the component inherits the CID of its parent. The top- level component has a CID of 0. Every operator session also has a CID, which is the CID provisioned for the operator's user ID. An operator will see only the stream data for components having a matching CID. Also, the operator will be allowed to issue commands for only those components which have a matching CID. An operator CID of 0 is used to identify the Network Manager (referred to as 'NetMan' in DPN). This CID matches the CID of any component. Values 1 to 8191 inclusive (equivalent to 'basic CIDs' in DPN) may be assigned to specific customers.")
vmIfIfEntryTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 133, 2, 12), )
if mibBuilder.loadTexts: vmIfIfEntryTable.setStatus('mandatory')
if mibBuilder.loadTexts: vmIfIfEntryTable.setDescription('This group contains the provisionable attributes for the ifEntry.')
vmIfIfEntryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 133, 2, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VirtualMediaMIB", "vmIndex"), (0, "Nortel-Magellan-Passport-VirtualMediaMIB", "vmIfIndex"))
if mibBuilder.loadTexts: vmIfIfEntryEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vmIfIfEntryEntry.setDescription('An entry in the vmIfIfEntryTable.')
vmIfIfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 133, 2, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmIfIfAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vmIfIfAdminStatus.setDescription('The desired state of the interface. The up state indicates the interface is operational. The down state indicates the interface is not operational. The testing state indicates that no operational packets can be passed.')
vmIfIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 133, 2, 12, 1, 2), InterfaceIndex().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmIfIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vmIfIfIndex.setDescription('This is the index for the IfEntry. Its value is automatically initialized during the provisioning process.')
vmIfOperStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 133, 2, 13), )
if mibBuilder.loadTexts: vmIfOperStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: vmIfOperStatusTable.setDescription('This group includes the Operational Status attribute. This attribute defines the current operational state of this component.')
vmIfOperStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 133, 2, 13, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VirtualMediaMIB", "vmIndex"), (0, "Nortel-Magellan-Passport-VirtualMediaMIB", "vmIfIndex"))
if mibBuilder.loadTexts: vmIfOperStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vmIfOperStatusEntry.setDescription('An entry in the vmIfOperStatusTable.')
vmIfSnmpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 133, 2, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmIfSnmpOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vmIfSnmpOperStatus.setDescription('The current state of the interface. The up state indicates the interface is operational and capable of forwarding packets. The down state indicates the interface is not operational, thus unable to forward packets. testing state indicates that no operational packets can be passed.')
vmIfStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 133, 2, 14), )
if mibBuilder.loadTexts: vmIfStateTable.setStatus('mandatory')
if mibBuilder.loadTexts: vmIfStateTable.setDescription('This group contains the three OSI State attributes. The descriptions generically indicate what each state attribute implies about the component. Note that not all the values and state combinations described here are supported by every component which uses this group. For component-specific information and the valid state combinations, refer to NTP 241-7001-150, Passport Operations and Maintenance Guide.')
vmIfStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 133, 2, 14, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VirtualMediaMIB", "vmIndex"), (0, "Nortel-Magellan-Passport-VirtualMediaMIB", "vmIfIndex"))
if mibBuilder.loadTexts: vmIfStateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vmIfStateEntry.setDescription('An entry in the vmIfStateTable.')
vmIfAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 133, 2, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmIfAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: vmIfAdminState.setDescription('This attribute indicates the OSI Administrative State of the component. The value locked indicates that the component is administratively prohibited from providing services for its users. A Lock or Lock - force command has been previously issued for this component. When the value is locked, the value of usageState must be idle. The value shuttingDown indicates that the component is administratively permitted to provide service to its existing users only. A Lock command was issued against the component and it is in the process of shutting down. The value unlocked indicates that the component is administratively permitted to provide services for its users. To enter this state, issue an Unlock command to this component.')
vmIfOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 133, 2, 14, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmIfOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: vmIfOperationalState.setDescription('This attribute indicates the OSI Operational State of the component. The value enabled indicates that the component is available for operation. Note that if adminState is locked, it would still not be providing service. The value disabled indicates that the component is not available for operation. For example, something is wrong with the component itself, or with another component on which this one depends. If the value is disabled, the usageState must be idle.')
vmIfUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 133, 2, 14, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmIfUsageState.setStatus('mandatory')
if mibBuilder.loadTexts: vmIfUsageState.setDescription('This attribute indicates the OSI Usage State of the component. The value idle indicates that the component is not currently in use. The value active indicates that the component is in use and has spare capacity to provide for additional users. The value busy indicates that the component is in use and has no spare operating capacity for additional users at this time.')
vmIfProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 133, 2, 15), )
if mibBuilder.loadTexts: vmIfProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: vmIfProvTable.setDescription('This group contains the provisionable attributes for the If component.')
vmIfProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 133, 2, 15, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VirtualMediaMIB", "vmIndex"), (0, "Nortel-Magellan-Passport-VirtualMediaMIB", "vmIfIndex"))
if mibBuilder.loadTexts: vmIfProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vmIfProvEntry.setDescription('An entry in the vmIfProvTable.')
vmIfMode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 133, 2, 15, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("alwaysUpInterface", 0), ("interVrConnection", 1))).clone('alwaysUpInterface')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmIfMode.setStatus('mandatory')
if mibBuilder.loadTexts: vmIfMode.setDescription("This attribute specifies the mode of operation of the Vm If. Two modes are supported: alwaysUpInterface and interVrConnection. alwaysUpInterface: This mode limits the Vm If to provide the functionality of an 'always up interface' only. Inter-VR communcation is not possible when this mode is selected. Memory consumption by the Vm If is significantly less on FP when this mode is selected. Hence this mode should be used when the sole purpose of the Vm If is to provide an always up interface for application like BGP4. interVrConnection: This mode provides the full capability of VirtualMedia, i.e. 'always up interface' and inter-VR communication.")
virtualMediaGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 135, 1))
virtualMediaGroupBE = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 135, 1, 5))
virtualMediaGroupBE01 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 135, 1, 5, 2))
virtualMediaGroupBE01A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 135, 1, 5, 2, 2))
virtualMediaCapabilities = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 135, 3))
virtualMediaCapabilitiesBE = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 135, 3, 5))
virtualMediaCapabilitiesBE01 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 135, 3, 5, 2))
virtualMediaCapabilitiesBE01A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 135, 3, 5, 2, 2))
mibBuilder.exportSymbols("Nortel-Magellan-Passport-VirtualMediaMIB", vmIfMpTable=vmIfMpTable, vmIfProvEntry=vmIfProvEntry, vmIfStorageType=vmIfStorageType, vmIfRowStatusTable=vmIfRowStatusTable, virtualMediaMIB=virtualMediaMIB, vmIfIfEntryTable=vmIfIfEntryTable, vm=vm, vmIfRowStatus=vmIfRowStatus, vmIfMode=vmIfMode, vmIfIfEntryEntry=vmIfIfEntryEntry, virtualMediaGroup=virtualMediaGroup, vmStorageType=vmStorageType, virtualMediaCapabilitiesBE=virtualMediaCapabilitiesBE, vmIfUsageState=vmIfUsageState, virtualMediaGroupBE01A=virtualMediaGroupBE01A, vmRowStatus=vmRowStatus, vmRowStatusTable=vmRowStatusTable, vmIfStateEntry=vmIfStateEntry, vmIfCidDataEntry=vmIfCidDataEntry, vmIfSnmpOperStatus=vmIfSnmpOperStatus, vmIfIndex=vmIfIndex, virtualMediaGroupBE=virtualMediaGroupBE, vmComponentName=vmComponentName, vmIfMpEntry=vmIfMpEntry, vmIfCustomerIdentifier=vmIfCustomerIdentifier, vmIfIfAdminStatus=vmIfIfAdminStatus, vmIfOperStatusEntry=vmIfOperStatusEntry, vmIfProvTable=vmIfProvTable, vmIfIfIndex=vmIfIfIndex, vmIfRowStatusEntry=vmIfRowStatusEntry, vmIfAdminState=vmIfAdminState, vmIfOperStatusTable=vmIfOperStatusTable, vmIndex=vmIndex, vmIf=vmIf, vmIfOperationalState=vmIfOperationalState, vmRowStatusEntry=vmRowStatusEntry, virtualMediaCapabilitiesBE01=virtualMediaCapabilitiesBE01, vmIfStateTable=vmIfStateTable, virtualMediaCapabilitiesBE01A=virtualMediaCapabilitiesBE01A, vmIfLinkToProtocolPort=vmIfLinkToProtocolPort, virtualMediaGroupBE01=virtualMediaGroupBE01, virtualMediaCapabilities=virtualMediaCapabilities, vmIfComponentName=vmIfComponentName, vmIfCidDataTable=vmIfCidDataTable)
