#
# PySNMP MIB module ADSL2-LINE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ADSL2-LINE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:13:52 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Adsl2PsdMaskUs, Adsl2LConfProfPmMode, Adsl2LineLdsf, Adsl2OperationModes, Adsl2InitResult, Adsl2LastTransmittedState, Adsl2RfiDs, Adsl2TransmissionModeType, Adsl2ChAtmStatus, Adsl2ScMaskUs, Adsl2ChPtmStatus, Adsl2RaMode, Adsl2ConfPmsForce, Adsl2PowerMngState, Adsl2LdsfResult, Adsl2Unit, Adsl2Direction, Adsl2SymbolProtection, Adsl2MaxBer, Adsl2PsdMaskDs, Adsl2ScMaskDs, Adsl2Tssi, Adsl2LineStatus = mibBuilder.importSymbols("ADSL2-LINE-TC-MIB", "Adsl2PsdMaskUs", "Adsl2LConfProfPmMode", "Adsl2LineLdsf", "Adsl2OperationModes", "Adsl2InitResult", "Adsl2LastTransmittedState", "Adsl2RfiDs", "Adsl2TransmissionModeType", "Adsl2ChAtmStatus", "Adsl2ScMaskUs", "Adsl2ChPtmStatus", "Adsl2RaMode", "Adsl2ConfPmsForce", "Adsl2PowerMngState", "Adsl2LdsfResult", "Adsl2Unit", "Adsl2Direction", "Adsl2SymbolProtection", "Adsl2MaxBer", "Adsl2PsdMaskDs", "Adsl2ScMaskDs", "Adsl2Tssi", "Adsl2LineStatus")
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint")
HCPerfIntervalThreshold, HCPerfTimeElapsed = mibBuilder.importSymbols("HC-PerfHist-TC-MIB", "HCPerfIntervalThreshold", "HCPerfTimeElapsed")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, ObjectIdentity, Unsigned32, Integer32, transmission, Bits, IpAddress, TimeTicks, Gauge32, NotificationType, MibIdentifier, Counter32, iso, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "ObjectIdentity", "Unsigned32", "Integer32", "transmission", "Bits", "IpAddress", "TimeTicks", "Gauge32", "NotificationType", "MibIdentifier", "Counter32", "iso", "Counter64")
TruthValue, RowStatus, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "RowStatus", "TextualConvention", "DisplayString")
adsl2MIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 10, 238))
adsl2MIB.setRevisions(('2006-10-04 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: adsl2MIB.setRevisionsDescriptions(('Initial version, published as RFC 4706.',))
if mibBuilder.loadTexts: adsl2MIB.setLastUpdated('200610040000Z')
if mibBuilder.loadTexts: adsl2MIB.setOrganization('ADSLMIB Working Group')
if mibBuilder.loadTexts: adsl2MIB.setContactInfo('WG-email: adslmib@ietf.org Info: https://www1.ietf.org/mailman/listinfo/adslmib Chair: Mike Sneed Sand Channel Systems Postal: P.O. Box 37324 Raleigh NC 27627-732 Email: sneedmike@hotmail.com Phone: +1 206 600 7022 Co-Chair & Co-editor: Menachem Dodge ECI Telecom Ltd. Postal: 30 Hasivim St. Petach Tikva 49517, Israel. Email: mbdodge@ieee.org Phone: +972 3 926 8421 Co-editor: Moti Morgenstern ECI Telecom Ltd. Postal: 30 Hasivim St. Petach Tikva 49517, Israel. Email: moti.morgenstern@ecitele.com Phone: +972 3 926 6258 Co-editor: Scott Baillie NEC Australia Postal: 649-655 Springvale Road, Mulgrave, Victoria 3170, Australia. Email: scott.baillie@nec.com.au Phone: +61 3 9264 3986 Co-editor: Umberto Bonollo NEC Australia Postal: 649-655 Springvale Road, Mulgrave, Victoria 3170, Australia. Email: umberto.bonollo@nec.com.au Phone: +61 3 9264 3385')
if mibBuilder.loadTexts: adsl2MIB.setDescription('This document defines a Management Information Base (MIB) module for use with network management protocols in the Internet community for the purpose of managing ADSL, ADSL2, and ADSL2+ lines. The MIB module described in RFC 2662 [RFC2662] describes objects used for managing Asymmetric Bit-Rate DSL (ADSL) interfaces per [T1E1.413], [G.992.1], and [G.992.2]. These object descriptions are based upon the specifications for the ADSL Embedded Operations Channel (EOC) as defined in American National Standards Institute (ANSI) T1E1.413/1995 [T1E1.413] and International Telecommunication Union (ITU-T) G.992.1 [G.992.1] and G.992.2 [G.992.2]. This document does not obsolete RFC 2662 [RFC2662], but rather provides a more comprehensive management model that includes the ADSL2 and ADSL2+ technologies per G.992.3, G.992.4, and G.992.5 ([G.992.3], [G.992.4], and [G.992.5], respectively). In addition, objects have been added to improve the management of ADSL, ADSL2, and ADSL2+ lines. Additionally, the management framework for New Generation ADSL lines specified by the Digital Subscriber Line Forum (DSLF) has been taken into consideration [TR-90]. That framework is based on ITU-T G.997.1 standard [G.997.1] as well as two amendments: [G.997.1am1] and [G.997.1am2]. Note that the revised ITU-T G.997.1 standard also refers to the next generation of VDSL technology, known as VDSL2, per ITU-T G.993.2 [G.993.2]. However, managing VDSL2 lines is currently beyond the scope of this document. The MIB module is located in the MIB tree under MIB 2 transmission, as discussed in the IANA Considerations section of this document. Copyright (C) The Internet Society (2006). This version of this MIB module is part of RFC 4706: see the RFC itself for full legal notices.')
adsl2 = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 238, 1))
adsl2Line = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 238, 1, 1))
adsl2Status = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 238, 1, 2))
adsl2Inventory = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 238, 1, 3))
adsl2PM = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 238, 1, 4))
adsl2Profile = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 238, 1, 5))
adsl2Scalar = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 238, 1, 6))
adsl2Notifications = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 238, 1, 0))
adsl2Conformance = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 238, 1, 7))
adsl2PMLine = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1))
adsl2PMChannel = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 2))
adsl2ProfileLine = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1))
adsl2ProfileChannel = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 2))
adsl2ProfileAlarmConf = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 3))
adsl2ScalarSC = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 238, 1, 6, 1))
adsl2LineTable = MibTable((1, 3, 6, 1, 2, 1, 10, 238, 1, 1, 1), )
if mibBuilder.loadTexts: adsl2LineTable.setStatus('current')
if mibBuilder.loadTexts: adsl2LineTable.setDescription('The table adsl2LineTable contains configuration, command, and status parameters of the ADSL2 line. The index of this table is an interface index where the interface has an ifType of adsl2plus(238). Several objects in this table MUST be maintained in a persistent manner.')
adsl2LineEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 238, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: adsl2LineEntry.setStatus('current')
if mibBuilder.loadTexts: adsl2LineEntry.setDescription('The table adsl2LineTable contains configuration, commands, and status parameters of the ADSL2 line')
adsl2LineCnfgTemplate = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 1, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)).clone('DEFVAL')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adsl2LineCnfgTemplate.setReference('DSL Forum TR-90, paragraph 5.1.1')
if mibBuilder.loadTexts: adsl2LineCnfgTemplate.setStatus('current')
if mibBuilder.loadTexts: adsl2LineCnfgTemplate.setDescription('The value of this object identifies the row in the ADSL2 Line Configuration Templates Table, (adsl2LineConfTemplateTable), which applies for this ADSL2 line. This object MUST be maintained in a persistent manner.')
adsl2LineAlarmCnfgTemplate = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 1, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)).clone('DEFVAL')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adsl2LineAlarmCnfgTemplate.setReference('DSL Forum TR-90, paragraph 5.1.1')
if mibBuilder.loadTexts: adsl2LineAlarmCnfgTemplate.setStatus('current')
if mibBuilder.loadTexts: adsl2LineAlarmCnfgTemplate.setDescription('The value of this object identifies the row in the ADSL2 Line Alarm Configuration Template Table, (adsl2LineAlarmConfTemplateTable), which applies to this ADSL2 line. This object MUST be maintained in a persistent manner.')
adsl2LineCmndConfPmsf = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 1, 1, 1, 3), Adsl2ConfPmsForce().clone('l3toL0')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adsl2LineCmndConfPmsf.setReference('ITU-T G.997.1, paragraph 7.3.1.1.3')
if mibBuilder.loadTexts: adsl2LineCmndConfPmsf.setStatus('current')
if mibBuilder.loadTexts: adsl2LineCmndConfPmsf.setDescription('Power management state forced. Defines the line states to be forced by the near-end ATU on this line. The various possible values are: l3toL0(0), l0toL2(2), or l0orL2toL3(3). This object MUST be maintained in a persistent manner.')
adsl2LineCmndConfLdsf = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 1, 1, 1, 4), Adsl2LineLdsf().clone('inhibit')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adsl2LineCmndConfLdsf.setReference('ITU-T G.997.1, paragraph 7.3.1.1.8')
if mibBuilder.loadTexts: adsl2LineCmndConfLdsf.setStatus('current')
if mibBuilder.loadTexts: adsl2LineCmndConfLdsf.setDescription('Loop diagnostics mode forced (LDSF). Defines whether the line should be forced into the loop diagnostics mode by the near-end ATU on this line or only be responsive to loop diagnostics initiated by the far-end ATU. This object MUST be maintained in a persistent manner. However, in case the operator forces loop diagnostics mode then the access node should reset the object (inhibit) when loop diagnostics mode procedures are completed.')
adsl2LineCmndConfLdsfFailReason = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 1, 1, 1, 5), Adsl2LdsfResult().clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2LineCmndConfLdsfFailReason.setStatus('current')
if mibBuilder.loadTexts: adsl2LineCmndConfLdsfFailReason.setDescription("The status of the recent occasion the Loop diagnostics mode forced (LDSF) was issued for the associated line. Possible values are: none(1) - The default value in case LDSF was never requested for the associated line. success(2) - The recent command completed successfully. inProgress(3) - The Loop Diagnostics process is in progress. unsupported(4) - The NE or the line card doesn't support LDSF. cannotRun(5) - The NE cannot initiate the command, due to a nonspecific reason. aborted(6) - The Loop Diagnostics process aborted. failed(7) - The Loop Diagnostics process failed. illegalMode(8) - The NE cannot initiate the command, due to the specific mode of the relevant line. adminUp(9) - The NE cannot initiate the command, as the relevant line is administratively 'Up'. tableFull(10) - The NE cannot initiate the command, due to reaching the maximum number of rows in the results table. noResources(11) - The NE cannot initiate the command, due to lack of internal memory resources.")
adsl2LineCmndAutomodeColdStart = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 1, 1, 1, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adsl2LineCmndAutomodeColdStart.setReference('ITU-T G.997.1 (amendment 1), 7.3.1.1.10')
if mibBuilder.loadTexts: adsl2LineCmndAutomodeColdStart.setStatus('current')
if mibBuilder.loadTexts: adsl2LineCmndAutomodeColdStart.setDescription("Automode cold start forced. This parameter is defined in order to improve testing of the performance of ATUs supporting automode when it is enabled in the MIB. Change the value of this parameter to 'true' indicates a change in loop conditions applied to the devices under test. The ATUs shall reset any historical information used for automode and for shortening G.994.1 handshake and initialization. Automode is the case where multiple operation-modes are enabled through the adsl2LConfProfAtuTransSysEna object in the line configuration profile being used for the ADSL line, and where the selection of the actual operation-mode depends not only on the common capabilities of both ATUs (as exchanged in G.994.1), but also on achievable data rates under given loop conditions. This object MUST be maintained in a persistent manner.")
adsl2LineStatusAtuTransSys = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 1, 1, 1, 7), Adsl2TransmissionModeType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2LineStatusAtuTransSys.setReference('ITU-T G.997.1, paragraph 7.3.1.1.1')
if mibBuilder.loadTexts: adsl2LineStatusAtuTransSys.setStatus('current')
if mibBuilder.loadTexts: adsl2LineStatusAtuTransSys.setDescription("The ATU Transmission System (ATS) in use. It is coded in a bit-map representation with only a single bit set to '1' (the selected coding for the ADSL line). This parameter may be derived from the handshaking procedures defined in Recommendation G.994.1. A set of ADSL2 line transmission modes, with one bit per mode.")
adsl2LineStatusPwrMngState = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 1, 1, 1, 8), Adsl2PowerMngState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2LineStatusPwrMngState.setReference('ITU-T G.997.1, paragraph 7.5.1.2')
if mibBuilder.loadTexts: adsl2LineStatusPwrMngState.setStatus('current')
if mibBuilder.loadTexts: adsl2LineStatusPwrMngState.setDescription('The current power management state. One of four possible power management states: L0 - Synchronized and full transmission (i.e., Showtime). L1 - Low Power with reduced net data rate (G.992.2 only). L2 - Low Power with reduced net data rate (G.992.3 and G.992.4 only). L3 - No power. The various possible values are: l0(1), l1(2), l2(3), or l3(4).')
adsl2LineStatusInitResult = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 1, 1, 1, 9), Adsl2InitResult()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2LineStatusInitResult.setReference('ITU-T G.997.1, paragraph 7.5.1.3')
if mibBuilder.loadTexts: adsl2LineStatusInitResult.setStatus('current')
if mibBuilder.loadTexts: adsl2LineStatusInitResult.setDescription('Indicates the result of the last full initialization performed on the line. It is an enumeration type with the following values: noFail(0), configError(1), configNotFeasible(2), commFail(3), noPeerAtu(4), or otherCause(5).')
adsl2LineStatusLastStateDs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 1, 1, 1, 10), Adsl2LastTransmittedState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2LineStatusLastStateDs.setReference('ITU-T G.997.1, paragraph 7.5.1.4')
if mibBuilder.loadTexts: adsl2LineStatusLastStateDs.setStatus('current')
if mibBuilder.loadTexts: adsl2LineStatusLastStateDs.setDescription('The last successful transmitted initialization state in the downstream direction in the last full initialization performed on the line.')
adsl2LineStatusLastStateUs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 1, 1, 1, 11), Adsl2LastTransmittedState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2LineStatusLastStateUs.setReference('ITU-T G.997.1, paragraph 7.5.1.5')
if mibBuilder.loadTexts: adsl2LineStatusLastStateUs.setStatus('current')
if mibBuilder.loadTexts: adsl2LineStatusLastStateUs.setDescription('The last successful transmitted initialization state in the upstream direction in the last full initialization performed on the line.')
adsl2LineStatusAtur = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 1, 1, 1, 12), Adsl2LineStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2LineStatusAtur.setReference('ITU-T G.997.1, paragraph 7.1.1.2')
if mibBuilder.loadTexts: adsl2LineStatusAtur.setStatus('current')
if mibBuilder.loadTexts: adsl2LineStatusAtur.setDescription('Indicates current state (existing failures) of the ATU-R. This is a bit-map of possible conditions.')
adsl2LineStatusAtuc = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 1, 1, 1, 13), Adsl2LineStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2LineStatusAtuc.setReference('ITU-T G.997.1, paragraph 7.1.1.1')
if mibBuilder.loadTexts: adsl2LineStatusAtuc.setStatus('current')
if mibBuilder.loadTexts: adsl2LineStatusAtuc.setDescription('Indicates current state (existing failures) of the ATU-C. This is a bit-map of possible conditions.')
adsl2LineStatusLnAttenDs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 1, 1, 1, 14), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 1270), ValueRangeConstraint(2147483646, 2147483646), ValueRangeConstraint(2147483647, 2147483647), ))).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2LineStatusLnAttenDs.setReference('ITU-T G.997.1, paragraph 7.5.1.6')
if mibBuilder.loadTexts: adsl2LineStatusLnAttenDs.setStatus('current')
if mibBuilder.loadTexts: adsl2LineStatusLnAttenDs.setDescription('The measured difference in the total power transmitted by the ATU-C and the total power received by the ATU-R over all sub- carriers during diagnostics mode and initialization. It ranges from 0 to 1270 units of 0.1 dB (physical values are 0 to 127 dB). A special value of 0x7FFFFFFF (2147483647) indicates the line attenuation is out of range to be represented. A special value of 0x7FFFFFFE (2147483646) indicates the line attenuation measurement is currently unavailable.')
adsl2LineStatusLnAttenUs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 1, 1, 1, 15), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 1270), ValueRangeConstraint(2147483646, 2147483646), ValueRangeConstraint(2147483647, 2147483647), ))).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2LineStatusLnAttenUs.setReference('ITU-T G.997.1, paragraph 7.5.1.7')
if mibBuilder.loadTexts: adsl2LineStatusLnAttenUs.setStatus('current')
if mibBuilder.loadTexts: adsl2LineStatusLnAttenUs.setDescription('The measured difference in the total power transmitted by the ATU-R and the total power received by the ATU-C over all sub- carriers during diagnostics mode and initialization. It ranges from 0 to 1270 units of 0.1 dB (physical values are 0 to 127 dB). A special value of 0x7FFFFFFF (2147483647) indicates the line attenuation is out of range to be represented. A special value of 0x7FFFFFFE (2147483646) indicates the line attenuation measurement is currently unavailable.')
adsl2LineStatusSigAttenDs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 1, 1, 1, 16), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 1270), ValueRangeConstraint(2147483646, 2147483646), ValueRangeConstraint(2147483647, 2147483647), ))).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2LineStatusSigAttenDs.setReference('ITU-T G.997.1, paragraph 7.5.1.8')
if mibBuilder.loadTexts: adsl2LineStatusSigAttenDs.setStatus('current')
if mibBuilder.loadTexts: adsl2LineStatusSigAttenDs.setDescription('The measured difference in the total power transmitted by the ATU-C and the total power received by the ATU-R over all sub- carriers during Showtime. It ranges from 0 to 1270 units of 0.1 dB (physical values are 0 to 127 dB). A special value of 0x7FFFFFFF (2147483647) indicates the signal attenuation is out of range to be represented. A special value of 0x7FFFFFFE (2147483646) indicates the signal attenuation measurement is currently unavailable.')
adsl2LineStatusSigAttenUs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 1, 1, 1, 17), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 1270), ValueRangeConstraint(2147483646, 2147483646), ValueRangeConstraint(2147483647, 2147483647), ))).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2LineStatusSigAttenUs.setReference('ITU-T G.997.1, paragraph 7.5.1.9')
if mibBuilder.loadTexts: adsl2LineStatusSigAttenUs.setStatus('current')
if mibBuilder.loadTexts: adsl2LineStatusSigAttenUs.setDescription('The measured difference in the total power transmitted by the ATU-R and the total power received by the ATU-C over all sub- carriers during Showtime. It ranges from 0 to 1270 units of 0.1 dB (physical values are 0 to 127 dB). A special value of 0x7FFFFFFF (2147483647) indicates the signal attenuation is out of range to be represented. A special value of 0x7FFFFFFE (2147483646) indicates the signal attenuation measurement is currently unavailable.')
adsl2LineStatusSnrMarginDs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-640, 630), ValueRangeConstraint(2147483646, 2147483646), ValueRangeConstraint(2147483647, 2147483647), ))).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2LineStatusSnrMarginDs.setReference('ITU-T G.997.1, paragraph 7.5.1.10')
if mibBuilder.loadTexts: adsl2LineStatusSnrMarginDs.setStatus('current')
if mibBuilder.loadTexts: adsl2LineStatusSnrMarginDs.setDescription('Downstream SNR Margin is the maximum increase in dB of the noise power received at the ATU-R, such that the BER requirements are met for all downstream bearer channels. It ranges from -640 to 630 units of 0.1 dB (physical values are -64 to 63 dB). A special value of 0x7FFFFFFF (2147483647) indicates the SNR Margin is out of range to be represented. A special value of 0x7FFFFFFE (2147483646) indicates the SNR Margin measurement is currently unavailable.')
adsl2LineStatusSnrMarginUs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-640, 630), ValueRangeConstraint(2147483646, 2147483646), ValueRangeConstraint(2147483647, 2147483647), ))).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2LineStatusSnrMarginUs.setReference('ITU-T G.997.1, paragraph 7.5.1.11')
if mibBuilder.loadTexts: adsl2LineStatusSnrMarginUs.setStatus('current')
if mibBuilder.loadTexts: adsl2LineStatusSnrMarginUs.setDescription('Upstream SNR Margin is the maximum increase in dB of the noise power received at the ATU-C, such that the BER requirements are met for all downstream bearer channels. It ranges from -640 to 630 units of 0.1 dB (physical values are -64 to 63 dB). A special value of 0x7FFFFFFF (2147483647) indicates the SNR Margin is out of range to be represented. A special value of 0x7FFFFFFE (2147483646) indicates the SNR Margin measurement is currently unavailable.')
adsl2LineStatusAttainableRateDs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 1, 1, 1, 20), Unsigned32()).setUnits('bits/second').setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2LineStatusAttainableRateDs.setReference('ITU-T G.997.1, paragraph 7.5.1.12')
if mibBuilder.loadTexts: adsl2LineStatusAttainableRateDs.setStatus('current')
if mibBuilder.loadTexts: adsl2LineStatusAttainableRateDs.setDescription('Maximum Attainable Data Rate Downstream. The maximum downstream net data rate currently attainable by the ATU-C transmitter and the ATU-R receiver, coded in bits/second.')
adsl2LineStatusAttainableRateUs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 1, 1, 1, 21), Unsigned32()).setUnits('bits/second').setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2LineStatusAttainableRateUs.setReference('ITU-T G.997.1, paragraph 7.5.1.13')
if mibBuilder.loadTexts: adsl2LineStatusAttainableRateUs.setStatus('current')
if mibBuilder.loadTexts: adsl2LineStatusAttainableRateUs.setDescription('Maximum Attainable Data Rate Upstream. The maximum upstream net data rate currently attainable by the ATU-R transmitter and the ATU-C receiver, coded in bits/second.')
adsl2LineStatusActPsdDs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-900, 0), ValueRangeConstraint(2147483647, 2147483647), ))).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2LineStatusActPsdDs.setReference('ITU-T G.997.1, paragraph 7.5.1.14')
if mibBuilder.loadTexts: adsl2LineStatusActPsdDs.setStatus('current')
if mibBuilder.loadTexts: adsl2LineStatusActPsdDs.setDescription('Actual Power Spectrum Density (PSD) Downstream. The average downstream transmit PSD over the sub-carriers used for downstream. It ranges from -900 to 0 units of 0.1 dB (physical values are -90 to 0 dBm/Hz). A value of 0x7FFFFFFF (2147483647) indicates the measurement is out of range to be represented.')
adsl2LineStatusActPsdUs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 1, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-900, 0), ValueRangeConstraint(2147483647, 2147483647), ))).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2LineStatusActPsdUs.setReference('ITU-T G.997.1, paragraph 7.5.1.15')
if mibBuilder.loadTexts: adsl2LineStatusActPsdUs.setStatus('current')
if mibBuilder.loadTexts: adsl2LineStatusActPsdUs.setDescription('Actual Power Spectrum Density (PSD) Upstream. The average upstream transmit PSD over the sub-carriers used for upstream. It ranges from -900 to 0 units of 0.1 dB (physical values are -90 to 0 dBm/Hz). A value of 0x7FFFFFFF (2147483647) indicates the measurement is out of range to be represented.')
adsl2LineStatusActAtpDs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 1, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-310, 310), ValueRangeConstraint(2147483647, 2147483647), ))).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2LineStatusActAtpDs.setReference('ITU-T G.997.1, paragraph 7.5.1.16')
if mibBuilder.loadTexts: adsl2LineStatusActAtpDs.setStatus('current')
if mibBuilder.loadTexts: adsl2LineStatusActAtpDs.setDescription('Actual Aggregate Transmit Power Downstream. The total amount of transmit power delivered by the ATU-C at the U-C reference point, at the instant of measurement. It ranges from -310 to 310 units of 0.1 dB (physical values are -31 to 31 dBm). A value of 0x7FFFFFFF (2147483647) indicates the measurement is out of range to be represented.')
adsl2LineStatusActAtpUs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 1, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-310, 310), ValueRangeConstraint(2147483647, 2147483647), ))).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2LineStatusActAtpUs.setReference('ITU-T G.997.1, paragraph 7.5.1.17')
if mibBuilder.loadTexts: adsl2LineStatusActAtpUs.setStatus('current')
if mibBuilder.loadTexts: adsl2LineStatusActAtpUs.setDescription('Actual Aggregate Transmit Power Upstream. The total amount of transmit power delivered by the ATU-R at the U-R reference point, at the instant of measurement. It ranges from -310 to 310 units of 0.1 dB (physical values are -31 to 31 dBm). A value of 0x7FFFFFFF (2147483647) indicates the measurement is out of range to be represented.')
adsl2ChannelStatusTable = MibTable((1, 3, 6, 1, 2, 1, 10, 238, 1, 2, 1), )
if mibBuilder.loadTexts: adsl2ChannelStatusTable.setStatus('current')
if mibBuilder.loadTexts: adsl2ChannelStatusTable.setDescription('The table adsl2ChannelStatusTable contains status parameters of the ADSL2 channel. This table contains live data from equipment.')
adsl2ChannelStatusEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 238, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ADSL2-LINE-MIB", "adsl2ChStatusUnit"))
if mibBuilder.loadTexts: adsl2ChannelStatusEntry.setStatus('current')
if mibBuilder.loadTexts: adsl2ChannelStatusEntry.setDescription('The table adsl2ChannelStatusTable contains status parameters of the ADSL2 channel. The index of this table consists of an interface index, where the interface has an ifType value that is applicable for a DSL channel, along with a termination unit.')
adsl2ChStatusUnit = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 2, 1, 1, 1), Adsl2Unit())
if mibBuilder.loadTexts: adsl2ChStatusUnit.setStatus('current')
if mibBuilder.loadTexts: adsl2ChStatusUnit.setDescription('The termination unit atuc(1) or atur(2).')
adsl2ChStatusChannelNum = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 2, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2ChStatusChannelNum.setStatus('current')
if mibBuilder.loadTexts: adsl2ChStatusChannelNum.setDescription('Provides the bearer channel number associated with this row (i.e., the channel ifIndex). This enables determining the channel configuration profile and the channel thresholds profile applicable for this bearer channel.')
adsl2ChStatusActDataRate = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 2, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000000))).setUnits('bits/second').setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2ChStatusActDataRate.setReference('ITU-T G.997.1, paragraph 7.5.2.1')
if mibBuilder.loadTexts: adsl2ChStatusActDataRate.setStatus('current')
if mibBuilder.loadTexts: adsl2ChStatusActDataRate.setDescription('The actual net data rate that the bearer channel is operating at, if in L0 power management state. In L1 or L2 states, it relates to the previous L0 state. The data rate is coded in bits/second.')
adsl2ChStatusPrevDataRate = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 2, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000000))).setUnits('bits/second').setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2ChStatusPrevDataRate.setReference('ITU-T G.997.1, paragraph 7.5.2.2')
if mibBuilder.loadTexts: adsl2ChStatusPrevDataRate.setStatus('current')
if mibBuilder.loadTexts: adsl2ChStatusPrevDataRate.setDescription('The previous net data rate that the bearer channel was operating at just before the latest rate change event. This could be a full or short initialization, fast retrain, DRA or power management transitions, excluding transitions between L0 state and L1 or L2 states. The data rate is coded in bits/second.')
adsl2ChStatusActDelay = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 2, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 8176))).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2ChStatusActDelay.setReference('ITU-T G.997.1, paragraph 7.5.2.3')
if mibBuilder.loadTexts: adsl2ChStatusActDelay.setStatus('current')
if mibBuilder.loadTexts: adsl2ChStatusActDelay.setDescription('The actual one-way interleaving delay introduced by the PMS-TC in the direction of the bearer channel, if in L0 power management state. In L1 or L2 states, it relates to the previous L0 state. It is coded in ms (rounded to the nearest ms).')
adsl2ChStatusAtmStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 2, 1, 1, 6), Adsl2ChAtmStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2ChStatusAtmStatus.setReference('ITU-T G.997.1, paragraph 7.1.4')
if mibBuilder.loadTexts: adsl2ChStatusAtmStatus.setStatus('current')
if mibBuilder.loadTexts: adsl2ChStatusAtmStatus.setDescription("Indicates the current state (existing failures) of the ADSL channel in case its Data Path is ATM. This is a bit-map of possible conditions. The various bit positions are: noDefect(0), noCellDelineation(1), or lossOfCellDelineation(2). In the case where the channel is not an ATM Data Path, the object is set to '0'.")
adsl2ChStatusPtmStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 2, 1, 1, 7), Adsl2ChPtmStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2ChStatusPtmStatus.setReference('ITU-T G.997.1, paragraph 7.1.5')
if mibBuilder.loadTexts: adsl2ChStatusPtmStatus.setStatus('current')
if mibBuilder.loadTexts: adsl2ChStatusPtmStatus.setDescription("Indicates the current state (existing failures) of the ADSL channel in case its Data Path is PTM. This is a bit-map of possible conditions. The various bit positions are: noDefect(0), or outOfSync(1). In the case where the channel is not a PTM Data Path, the object is set to '0'.")
adsl2ScalarSCMaxInterfaces = MibScalar((1, 3, 6, 1, 2, 1, 10, 238, 1, 6, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2ScalarSCMaxInterfaces.setStatus('current')
if mibBuilder.loadTexts: adsl2ScalarSCMaxInterfaces.setDescription('This value determines the upper size of adsl2SCStatusTable. The maximum number of entries in adsl2SCStatusTable is equal to two times the value of this attribute.')
adsl2ScalarSCAvailInterfaces = MibScalar((1, 3, 6, 1, 2, 1, 10, 238, 1, 6, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2ScalarSCAvailInterfaces.setStatus('current')
if mibBuilder.loadTexts: adsl2ScalarSCAvailInterfaces.setDescription('This value determines the amount of space that is currently available in adsl2SCStatusTable. The number of entries available in adsl2SCStatusTable is equal to two times the value of this attribute.')
adsl2SCStatusTable = MibTable((1, 3, 6, 1, 2, 1, 10, 238, 1, 2, 2), )
if mibBuilder.loadTexts: adsl2SCStatusTable.setStatus('current')
if mibBuilder.loadTexts: adsl2SCStatusTable.setDescription('The table adsl2SCStatusTable contains status parameters of the ADSL2 sub-carriers. The following points apply to this table: 1. The main purpose of this table is to hold the results of a DELT. 2. This table also holds parameters obtained at line initialization time. 3. The rows in this table are volatile; that is, they are lost if the SNMP agent is rebooted. 4. Due to the large OCTET STRING attributes in this table, the worst case memory requirements for this table are very high. The manager may use the row status attribute of this table to delete rows in order to reclaim memory. 5. The manager may create rows in this table. The SNMP agent may create rows in this table. Only the manager may delete rows in this table. 6. The maximum number of rows allowable in this table is indicated by the scalar attribute adsl2ScalarSCMaxInterfaces. The number of rows available in this table is indicated by the scalar attribute adsl2ScalarSCAvailInterfaces. 7. The SNMP agent is permitted to create rows in this table when a DELT completes successfully or when line initialization occurs. It is not mandatory for the SNMP agent to create rows in this table; hence, it may be necessary for the manager to create rows in this table before any results can be stored. 8. If the manager attempts to create a row in this table and there are no more rows available, the creation attempt will fail, and the response to the SNMP SET PDU will contain the error noCreation(11). 9. If the SNMP agent attempts to create a row in this table and there are no more rows available, the creation attempt will fail, and the attribute adsl2LineCmndConfLdsfFailReason will indicate the reason for the failure. The failure reason will be either tableFull(10) or noResources(11). 10. An example of use of this table is as follows: Step 1. : The DELT is started by setting the : adsl2LineCmndConfLdsf from inhibit to force. Step 2. : The DELT completes, and valid data is : available. Step 3. : The row in the adsl2SCStatusTable where the : results will be stored does not yet exist so : the SNMP agent attempts to create the row. Step 4. : Due to a low memory condition, a row in the : adsl2SCStatusTable table cannot be created at : this time. Step 5. : The reason for the failure, tableFull(10), is : indicated in the adsl2LineCmndConfLdsfFailReason : attribute. 11. Another example of use of this table is as follows : Step 1. : The DELT is started by setting the : adsl2LineCmndConfLdsf from inhibit to force. Step 2. : The DELT completes and valid data is : available. Step 3. : The row in the adsl2SCStatusTable where the : results will be stored does not yet exist so : the SNMP agent attempts to create the row. Step 4. : The row creation is successful. Step 5. : The value of the attribute : adsl2LineCmndConfLdsfFailReasonreason is set : to success(2). 12. Another example of use of this table is as follows: Step 1. : The manager creates a row in adsl2SCStatusTable : for a particular ADSL2 line. Step 2. : The DELT is started on the above-mentioned : line by setting the adsl2LineCmndConfLdsf from : inhibit to force. Step 3. : The DELT completes, and valid data is : available. Step 4. : The value of the attribute : adsl2LineCmndConfLdsfFailReasonreason is set : to success(2).')
adsl2SCStatusEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 238, 1, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ADSL2-LINE-MIB", "adsl2SCStatusDirection"))
if mibBuilder.loadTexts: adsl2SCStatusEntry.setStatus('current')
if mibBuilder.loadTexts: adsl2SCStatusEntry.setDescription('The table Adsl2SCStatusEntry contains status parameters of the ADSL2 sub-carriers. The index of this table is an interface index where the interface has an ifType of adsl2plus(238).')
adsl2SCStatusDirection = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 2, 2, 1, 1), Adsl2Direction())
if mibBuilder.loadTexts: adsl2SCStatusDirection.setStatus('current')
if mibBuilder.loadTexts: adsl2SCStatusDirection.setDescription('The direction of the sub-carrier is either upstream or downstream.')
adsl2SCStatusMtime = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 2, 2, 1, 2), Unsigned32()).setUnits('symbols').setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2SCStatusMtime.setReference('ITU-T G.997.1, paragraph 7.5.1.20.1 (SNRMTds) and paragraph 7.5.1.20.3 (SNRMTus)')
if mibBuilder.loadTexts: adsl2SCStatusMtime.setStatus('current')
if mibBuilder.loadTexts: adsl2SCStatusMtime.setDescription('SNR Measurement Time. The number of symbols used to measure the SNR values on the respective transmission direction. It should correspond to the value specified in the recommendation (e.g., the number of symbols in 1 second time interval for G.992.3). This parameter corresponds to 1 second in loop diagnostic procedure and should be updated otherwise.')
adsl2SCStatusSnr = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 2, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2SCStatusSnr.setReference('ITU-T G.997.1, paragraph 7.5.1.20.2 (SNRpsds) and paragraph 7.5.1.20.4 (SNRpsus)')
if mibBuilder.loadTexts: adsl2SCStatusSnr.setStatus('current')
if mibBuilder.loadTexts: adsl2SCStatusSnr.setDescription('The SNR Margin per sub-carrier, expressing the ratio between the received signal power and received noise power per subscriber. It is an array of 512 octets, designed for supporting up to 512 (downstream) sub-carriers. The number of utilized octets on downstream direction depends on NSCds, and on upstream direction it depends on NSCus. This value is referred to here as NSC. Octet i (0 <= i < NSC) is set to a value in the range 0 to 254 to indicate that the respective downstream or upstream sub- carrier i has SNR of: (-32 + Adsl2SubcarrierSnr(i)/2) in dB (i.e., -32 to 95dB). The special value 255 means that no measurement could be done for the subcarrier because it is out of the PSD mask passband or that the noise PSD is out of range to be represented. Each value in this array is 8 bits wide.')
adsl2SCStatusBitsAlloc = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 2, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setUnits('bits').setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2SCStatusBitsAlloc.setReference('ITU-T G.997.1, paragraph 7.5.1.21.1 (BITSpsds) and paragraph 7.5.1.21.2 (BITSpsus)')
if mibBuilder.loadTexts: adsl2SCStatusBitsAlloc.setStatus('current')
if mibBuilder.loadTexts: adsl2SCStatusBitsAlloc.setDescription('The bits allocation per sub-carrier. An array of 256 octets (512 nibbles), designed for supporting up to 512 (downstream) sub-carriers. The number of utilized nibbles on downstream direction depends on NSCds, and on upstream direction it depends on NSCus. This value is referred to here as NSC. Nibble i (0 <= i < NSC) is set to a value in the range 0 to 15 to indicate that the respective downstream or upstream sub-carrier i has the same amount of bits allocation.')
adsl2SCStatusGainAlloc = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 2, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2SCStatusGainAlloc.setReference('ITU-T G.997.1, paragraph 7.5.1.21.3 (GAINSpsds) and paragraph 7.5.1.21.4 (GAINSpsus)')
if mibBuilder.loadTexts: adsl2SCStatusGainAlloc.setStatus('current')
if mibBuilder.loadTexts: adsl2SCStatusGainAlloc.setDescription('The gain allocation per sub-carrier. An array of 512 16-bits values, designed for supporting up to 512 (downstream) sub- carriers. The number of utilized octets on downstream direction depends on NSCds, and on upstream direction it depends on NSCus. This value is referred to here as NSC. Value i (0 <= i < NSC) is in the range 0 to 4093 to indicate that the respective downstream or upstream sub-carrier i has the same amount of gain value. The gain value is represented as a multiple of 1/512 on a linear scale. Each value in this array is 16 bits wide and is stored in big endian format.')
adsl2SCStatusTssi = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 2, 2, 1, 6), Adsl2Tssi()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2SCStatusTssi.setReference('ITU-T G.997.1, paragraph 7.5.1.21.5 (TSSpsds) and paragraph 7.5.1.21.6 (TSSpsus)')
if mibBuilder.loadTexts: adsl2SCStatusTssi.setStatus('current')
if mibBuilder.loadTexts: adsl2SCStatusTssi.setDescription('The transmit spectrum shaping (TSSi) breakpoints expressed as the set of breakpoints exchanged during G.994.1. Each breakpoint is a pair of values occupying 3 octets with the following structure: First 2 octets - Index of the subcarrier used in the context of the breakpoint. Third octet - The shaping parameter at the breakpoint. Subcarrier index is an unsigned number in the range 1 to either NSCds (downstream direction) or NSCus (upstream direction). The shaping parameter value is in the range 0 to 127 (units of -0.5dB). The special value 127 indicates that the subcarrier is not transmitted.')
adsl2SCStatusLinScale = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 2, 2, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2SCStatusLinScale.setReference('ITU-T G.997.1, paragraph 7.5.1.18.1 (HLINSCds) and paragraph 7.5.1.18.5 (HLINSCus)')
if mibBuilder.loadTexts: adsl2SCStatusLinScale.setStatus('current')
if mibBuilder.loadTexts: adsl2SCStatusLinScale.setDescription('The scale factor to be applied to the H(f) linear representation values for the respective transmission direction. This parameter is only available after a loop diagnostic procedure.')
adsl2SCStatusLinReal = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 2, 2, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2SCStatusLinReal.setReference('ITU-T G.997.1, paragraph 7.5.1.18.2 (HLINpsds) and paragraph 7.5.1.18.6 (HLINpsds)')
if mibBuilder.loadTexts: adsl2SCStatusLinReal.setStatus('current')
if mibBuilder.loadTexts: adsl2SCStatusLinReal.setDescription('An array of up to 512 complex H(f) linear representation values in linear scale for the respective transmission direction. It is designed to support up to 512 (downstream) sub-carriers. The number of utilized values on downstream direction depends on NSCds, and on upstream direction it depends on NSCus. This value is referred to here as NSC. Each array entry represents the real component [referred to here as a(i)] of Hlin(f = i*Df) value for a particular sub-carrier index i (0 <= i < NSC). Hlin(f) is represented as ((scale/2^15)*((a(i)+j*b(i))/2^15)), where scale is Adsl2SubcarrierLinScale and a(i) and b(i) [provided by the Adsl2SubcarrierLinImg object] are in the range (-2^15+1) to (+2^15-1). A special value a(i)=b(i)= -2^15 indicates that no measurement could be done for the subcarrier because it is out of the passband or that the attenuation is out of range to be represented. This parameter is only available after a loop diagnostic procedure. Each value in this array is 16 bits wide and is stored in big endian format.')
adsl2SCStatusLinImg = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 2, 2, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2SCStatusLinImg.setReference('ITU-T G.997.1, paragraph 7.5.1.18.2 (HLINpsds) and paragraph 7.5.1.18.6 (HLINpsds)')
if mibBuilder.loadTexts: adsl2SCStatusLinImg.setStatus('current')
if mibBuilder.loadTexts: adsl2SCStatusLinImg.setDescription('An array of up to 512 complex H(f) linear representation values in linear scale for the respective transmission direction. It is designed to support up to 512 (downstream) sub-carriers. The number of utilized values on downstream direction depends on NSCds, and on upstream direction it depends on NSCus. This value is referred to here as NSC. Each array entry represents the imaginary component [referred to here as b(i)] of Hlin(f = i*Df) value for a particular sub- carrier index i (0 <= i < NSC). Hlin(f) is represented as ((scale/2^15)*((a(i)+j*b(i))/2^15)), where scale is Adsl2SubcarrierLinScale and a(i) [provided by the Adsl2SubcarrierLinReal object] and b(i) are in the range (-2^15+1) to (+2^15-1). A special value a(i)=b(i)= -2^15 indicates that no measurement could be done for the subcarrier because it is out of the passband or that the attenuation is out of range to be represented. This parameter is only available after a loop diagnostic procedure. Each value in this array is 16 bits wide and is stored in big endian format.')
adsl2SCStatusLogMt = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 2, 2, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2SCStatusLogMt.setReference('ITU-T G.997.1, paragraph 7.5.1.18.3 (HLOGMTds) and paragraph 7.5.1.18.7 (HLOGMTus)')
if mibBuilder.loadTexts: adsl2SCStatusLogMt.setStatus('current')
if mibBuilder.loadTexts: adsl2SCStatusLogMt.setDescription('The number of symbols used to measure the H(f) logarithmic measurement values for the respective transmission direction. This parameter should correspond to the value specified in the recommendation (e.g., the number of symbols in 1 second time interval for G.992.3). This parameter corresponds to 1 second in loop diagnostic procedure and should be updated in initialization')
adsl2SCStatusLog = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 2, 2, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2SCStatusLog.setReference('ITU-T G.997.1, paragraph 7.5.1.18.4 (HLOGpsds) and paragraph 7.5.1.18.8 (HLOGpsus)')
if mibBuilder.loadTexts: adsl2SCStatusLog.setStatus('current')
if mibBuilder.loadTexts: adsl2SCStatusLog.setDescription('An array of up to 512 real H(f) logarithmic representation values in dB for the respective transmission direction. It is designed to support up to 512 (downstream) sub-carriers. The number of utilized values on downstream direction depends on NSCds, and on upstream direction it depends on NSCus. This value is referred to here as NSC. Each array entry represents the real Hlog(f = i*Df) value for a particular sub-carrier index i, (0 <= i < NSC). The real Hlog(f) value is represented as (6-m(i)/10), with m(i) in the range 0 to 1022. A special value m=1023 indicates that no measurement could be done for the subcarrier because it is out of the passband or that the attenuation is out of range to be represented. This parameter is applicable in loop diagnostic procedure and initialization. Each value in this array is 16 bits wide and is stored in big endian format.')
adsl2SCStatusQlnMt = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 2, 2, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2SCStatusQlnMt.setReference('ITU-T G.997.1, paragraph 7.5.1.19.1 (QLNMTds) and paragraph 7.5.1.19.3 (QLNMTus)')
if mibBuilder.loadTexts: adsl2SCStatusQlnMt.setStatus('current')
if mibBuilder.loadTexts: adsl2SCStatusQlnMt.setDescription('The number of symbols used to measure the Quiet Line Noise values on the respective transmission direction. This parameter should correspond to the value specified in the recommendation (e.g., the number of symbols in 1 second time interval for G.992.3). This parameter corresponds to 1 second in loop diagnostic procedure and should be updated in initialization')
adsl2SCStatusQln = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 2, 2, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setUnits('dBm/Hz').setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2SCStatusQln.setReference('ITU-T G.997.1, paragraph 7.5.1.19.2 (QLNpsds) and paragraph 7.5.1.19.4 (QLNpsus)')
if mibBuilder.loadTexts: adsl2SCStatusQln.setStatus('current')
if mibBuilder.loadTexts: adsl2SCStatusQln.setDescription('An array of up to 512 real Quiet Line Noise values in dBm/Hz for the respective transmission direction. It is designed for up to 512 (downstream) sub-carriers. The number of utilized values on downstream direction depends on NSCds, and on upstream direction it depends on NSCus. This value is referred to here as NSC. Each array entry represents the QLN(f = i*Df) value for a particular sub-carrier index i, (0 <= i < NSC). The QLN(f) is represented as ( -23-n(i)/2), with n(i) in the range 0 to 254. A special value n(i)=255 indicates that no measurement could be done for the subcarrier because it is out of the passband or that the noise PSD is out of range to be represented. This parameter is applicable in loop diagnostic procedure and initialization. Each value in this array is 8 bits wide.')
adsl2SCStatusLnAtten = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 2, 2, 1, 14), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 1270), ValueRangeConstraint(2147483646, 2147483646), ValueRangeConstraint(2147483647, 2147483647), ))).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2SCStatusLnAtten.setReference('ITU-T G.997.1, paragraph 7.5.1.6 (LATNds) and paragraph 7.5.1.7 (LATNus)')
if mibBuilder.loadTexts: adsl2SCStatusLnAtten.setStatus('current')
if mibBuilder.loadTexts: adsl2SCStatusLnAtten.setDescription('When referring to the downstream direction, it is the measured difference in the total power transmitted by the ATU-C and the total power received by the ATU-R over all sub-carriers during diagnostics mode. When referring to the upstream direction, it is the measured difference in the total power transmitted by the ATU-R and the total power received by the ATU-C over all sub-carriers during diagnostics mode. It ranges from 0 to 1270 units of 0.1 dB (physical values are 0 to 127 dB). A special value of 0x7FFFFFFF (2147483647) indicates the line attenuation is out of range to be represented. A special value of 0x7FFFFFFE (2147483646) indicates the line attenuation measurement is unavailable. This object reflects the value of the parameter following the most recent DELT performed on the associated line. Once the DELT process is over, the parameter no longer changes until the row is deleted or a new DELT process is initiated.')
adsl2SCStatusSigAtten = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 2, 2, 1, 15), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 1270), ValueRangeConstraint(2147483646, 2147483646), ValueRangeConstraint(2147483647, 2147483647), ))).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2SCStatusSigAtten.setReference('ITU-T G.997.1, paragraph 7.5.1.8 (SATNds) and paragraph 7.5.1.9 (SATNus)')
if mibBuilder.loadTexts: adsl2SCStatusSigAtten.setStatus('current')
if mibBuilder.loadTexts: adsl2SCStatusSigAtten.setDescription('When referring to the downstream direction, it is the measured difference in the total power transmitted by the ATU-C and the total power received by the ATU-R over all sub- carriers during Showtime after the diagnostics mode. When referring to the upstream direction, it is the measured difference in the total power transmitted by the ATU-R and the total power received by the ATU-C over all sub- carriers during Showtime after the diagnostics mode. It ranges from 0 to 1270 units of 0.1 dB (physical values are 0 to 127 dB). A special value of 0x7FFFFFFF (2147483647) indicates the signal attenuation is out of range to be represented. A special value of 0x7FFFFFFE (2147483646) indicates the signal attenuation measurement is unavailable. This object reflects the value of the parameter following the most recent DELT performed on the associated line. Once the DELT process is over, the parameter no longer changes until the row is deleted or a new DELT process is initiated.')
adsl2SCStatusSnrMargin = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 2, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-640, 630), ValueRangeConstraint(2147483646, 2147483646), ValueRangeConstraint(2147483647, 2147483647), ))).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2SCStatusSnrMargin.setReference('ITU-T G.997.1, paragraph 7.5.1.10 (SNRMds) and paragraph 7.5.1.11 (SNRMus)')
if mibBuilder.loadTexts: adsl2SCStatusSnrMargin.setStatus('current')
if mibBuilder.loadTexts: adsl2SCStatusSnrMargin.setDescription('SNR Margin is the maximum increase in dB of the noise power received at the ATU (ATU-R on downstream direction and ATU-C on upstream direction), such that the BER requirements are met for all bearer channels received at the ATU. It ranges from -640 to 630 units of 0.1 dB (physical values are -64 to 63 dB). A special value of 0x7FFFFFFF (2147483647) indicates the SNR Margin is out of range to be represented. A special value of 0x7FFFFFFE (2147483646) indicates the SNR Margin measurement is currently unavailable. This object reflects the value of the parameter following the most recent DELT performed on the associated line. Once the DELT process is over, the parameter no longer changes until the row is deleted or a new DELT process is initiated.')
adsl2SCStatusAttainableRate = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 2, 2, 1, 17), Unsigned32()).setUnits('bits/second').setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2SCStatusAttainableRate.setReference('ITU-T G.997.1, paragraph 7.5.1.12 (ATTNDRds) and paragraph 7.5.1.13 (ATTNDRus)')
if mibBuilder.loadTexts: adsl2SCStatusAttainableRate.setStatus('current')
if mibBuilder.loadTexts: adsl2SCStatusAttainableRate.setDescription('Maximum Attainable Data Rate. The maximum net data rate currently attainable by the ATU-C transmitter and ATU-R receiver (when referring to downstream direction) or by the ATU-R transmitter and ATU-C receiver (when referring to upstream direction). Value is coded in bits/second. This object reflects the value of the parameter following the most recent DELT performed on the associated line. Once the DELT process is over, the parameter no longer changes until the row is deleted or a new DELT process is initiated.')
adsl2SCStatusActAtp = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 2, 2, 1, 18), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2SCStatusActAtp.setReference('ITU-T G.997.1, paragraph 7.5.1.16 (ACTATPds) and paragraph 7.5.1.17 (ACTATPus)')
if mibBuilder.loadTexts: adsl2SCStatusActAtp.setStatus('current')
if mibBuilder.loadTexts: adsl2SCStatusActAtp.setDescription("Actual Aggregate Transmit Power from the ATU (ATU-R on downstream direction and ATU-C on upstream direction), at the instant of measurement. It ranges from -310 to 310 units of 0.1 dB (physical values are -31 to 31 dBm). A value of all 1's indicates the measurement is out of range to be represented. This object reflects the value of the parameter following the most recent DELT performed on the associated line. Once the DELT process is over, the parameter no longer changes until the row is deleted or a new DELT process is initiated.")
adsl2SCStatusRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 2, 2, 1, 19), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2SCStatusRowStatus.setStatus('current')
if mibBuilder.loadTexts: adsl2SCStatusRowStatus.setDescription('Row Status. The manager may create and delete rows of this table. Please see the description of adsl2SCStatusTable above for more details.')
adsl2LineInventoryTable = MibTable((1, 3, 6, 1, 2, 1, 10, 238, 1, 3, 1), )
if mibBuilder.loadTexts: adsl2LineInventoryTable.setStatus('current')
if mibBuilder.loadTexts: adsl2LineInventoryTable.setDescription('The table adsl2LineInventoryTable contains inventory of the ADSL2 units.')
adsl2LineInventoryEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 238, 1, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ADSL2-LINE-MIB", "adsl2LInvUnit"))
if mibBuilder.loadTexts: adsl2LineInventoryEntry.setStatus('current')
if mibBuilder.loadTexts: adsl2LineInventoryEntry.setDescription('The table adsl2LineInventoryTable contains inventory of the ADSL2 units. The index of this table is an interface index where the interface has an ifType of adsl2plus(238).')
adsl2LInvUnit = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 3, 1, 1, 1), Adsl2Unit())
if mibBuilder.loadTexts: adsl2LInvUnit.setStatus('current')
if mibBuilder.loadTexts: adsl2LInvUnit.setDescription('The termination unit atuc(1) or atur(2).')
adsl2LInvG994VendorId = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 3, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2LInvG994VendorId.setReference('ITU-T G.997.1, paragraph 7.4')
if mibBuilder.loadTexts: adsl2LInvG994VendorId.setStatus('current')
if mibBuilder.loadTexts: adsl2LInvG994VendorId.setDescription('The ATU G.994.1 Vendor ID as inserted in the G.994.1 CL/CLR message. It consists of 8 binary octets, including a country code followed by a (regionally allocated) provider code, as defined in Recommendation T.35.')
adsl2LInvSystemVendorId = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 3, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2LInvSystemVendorId.setReference('ITU-T G.997.1, paragraph 7.4')
if mibBuilder.loadTexts: adsl2LInvSystemVendorId.setStatus('current')
if mibBuilder.loadTexts: adsl2LInvSystemVendorId.setDescription('The ATU System Vendor ID (identifies the ATU system integrator) as inserted in the Overhead Messages (both ATUs for G.992.3 and G.992.4) or in the Embedded Operations Channel (only ATU-R in G.992.1 and G.992.2). It consists of 8 binary octets, with the same format as used for Adsl2InvG994VendorId.')
adsl2LInvVersionNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 3, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2LInvVersionNumber.setReference('ITU-T G.997.1, paragraph 7.4')
if mibBuilder.loadTexts: adsl2LInvVersionNumber.setStatus('current')
if mibBuilder.loadTexts: adsl2LInvVersionNumber.setDescription('The ATU version number (vendor-specific information) as inserted in the Overhead Messages (both ATUs for G.992.3 and G.992.4) or in the Embedded Operations Channel (only ATU-R in G.992.1 and G.992.2). It consists of up to 16 binary octets.')
adsl2LInvSerialNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 3, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2LInvSerialNumber.setReference('ITU-T G.997.1, paragraph 7.4')
if mibBuilder.loadTexts: adsl2LInvSerialNumber.setStatus('current')
if mibBuilder.loadTexts: adsl2LInvSerialNumber.setDescription('The ATU serial number (vendor-specific information) as inserted in the Overhead Messages (both ATUs for G.992.3 and G.992.4) or in the Embedded Operations Channel (only ATU-R in G.992.1 and G.992.2). It is vendor-specific information. It consists of up to 32 ASCII characters.')
adsl2LInvSelfTestResult = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 3, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2LInvSelfTestResult.setReference('ITU-T G.997.1, paragraph 7.4')
if mibBuilder.loadTexts: adsl2LInvSelfTestResult.setStatus('current')
if mibBuilder.loadTexts: adsl2LInvSelfTestResult.setDescription("The ATU self-test result, coded as a 32-bit value. The most significant octet of the result is '0' if the self-test passed, and '1' if the self-test failed. The interpretation of the other octets is vendor discretionary.")
adsl2LInvTransmissionCapabilities = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 3, 1, 1, 7), Adsl2TransmissionModeType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2LInvTransmissionCapabilities.setReference('ITU-T G.997.1, paragraph 7.4')
if mibBuilder.loadTexts: adsl2LInvTransmissionCapabilities.setStatus('current')
if mibBuilder.loadTexts: adsl2LInvTransmissionCapabilities.setDescription("The ATU transmission system capability list of the different coding types. It is coded in a bit-map representation with 1 or more bits set. A bit set to '1' means that the ATU supports the respective coding. The value may be derived from the handshaking procedures defined in G.994.1. A set of ADSL2 line transmission modes, with one bit per mode.")
adsl2LineConfTemplateTable = MibTable((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 1), )
if mibBuilder.loadTexts: adsl2LineConfTemplateTable.setStatus('current')
if mibBuilder.loadTexts: adsl2LineConfTemplateTable.setDescription('The table adsl2LineConfTemplateTable contains ADSL2 line configuration templates. Entries in this table MUST be maintained in a persistent manner.')
adsl2LineConfTemplateEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 1, 1), ).setIndexNames((0, "ADSL2-LINE-MIB", "adsl2LConfTempTemplateName"))
if mibBuilder.loadTexts: adsl2LineConfTemplateEntry.setStatus('current')
if mibBuilder.loadTexts: adsl2LineConfTemplateEntry.setDescription("The table adsl2LineConfTemplateTable contains the ADSL2 line configuration template. A default template with an index of 'DEFVAL' will always exist, and its parameters will be set to vendor- specific values, unless otherwise specified in this document.")
adsl2LConfTempTemplateName = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: adsl2LConfTempTemplateName.setReference('DSL Forum TR-90, paragraph 5.1.4')
if mibBuilder.loadTexts: adsl2LConfTempTemplateName.setStatus('current')
if mibBuilder.loadTexts: adsl2LConfTempTemplateName.setDescription('This object identifies a row in this table.')
adsl2LConfTempLineProfile = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)).clone('DEFVAL')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LConfTempLineProfile.setReference('DSL Forum TR-90, paragraph 5.1.4')
if mibBuilder.loadTexts: adsl2LConfTempLineProfile.setStatus('current')
if mibBuilder.loadTexts: adsl2LConfTempLineProfile.setDescription('The value of this object identifies the row in the ADSL2 Line Configuration Profile Table, (adsl2LineConfProfTable), which applies for this ADSL2 line.')
adsl2LConfTempChan1ConfProfile = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 1, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)).clone('DEFVAL')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LConfTempChan1ConfProfile.setStatus('current')
if mibBuilder.loadTexts: adsl2LConfTempChan1ConfProfile.setDescription('The value of this object identifies the row in the ADSL2 Channel Configuration Profile Table, (adsl2ChConfProfileTable) that applies to ADSL2 bearer channel #1. The channel profile name specified here must match the name of an existing row in the adsl2ChConfProfileTable table.')
adsl2LConfTempChan1RaRatioDs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(100)).setUnits('percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LConfTempChan1RaRatioDs.setReference('ITU-T G.997.1, paragraph 7.3.2.1')
if mibBuilder.loadTexts: adsl2LConfTempChan1RaRatioDs.setStatus('current')
if mibBuilder.loadTexts: adsl2LConfTempChan1RaRatioDs.setDescription('Rate Adaptation Ratio. The ratio (in %) that should be taken into account for the bearer channel #1 when performing rate adaptation on Downstream. The ratio refers to the available data rate in excess of the Minimum Data Rate, summed over all bearer channels. Also, the 100 - adsl2LConfTempChan1RaRatioDs is the ratio of excess data rate to be assigned to all other bearer channels on Downstream direction. The sum of rate adaptation ratios over all bearers on the same direction shall be equal to 100%.')
adsl2LConfTempChan1RaRatioUs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(100)).setUnits('percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LConfTempChan1RaRatioUs.setReference('ITU-T G.997.1, paragraph 7.3.2.1')
if mibBuilder.loadTexts: adsl2LConfTempChan1RaRatioUs.setStatus('current')
if mibBuilder.loadTexts: adsl2LConfTempChan1RaRatioUs.setDescription('Rate Adaptation Ratio. The ratio (in %) that should be taken into account for the bearer channel #1 when performing rate adaptation on Upstream. The ratio refers to the available data rate in excess of the Minimum Data Rate, summed over all bearer channels. Also, the 100 - adsl2LConfTempChan1RaRatioUs is the ratio of excess data rate to be assigned to all other bearer channels on Upstream direction. The sum of rate adaptation ratios over all bearers on the same direction shall be equal to 100%.')
adsl2LConfTempChan2ConfProfile = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 1, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LConfTempChan2ConfProfile.setStatus('current')
if mibBuilder.loadTexts: adsl2LConfTempChan2ConfProfile.setDescription('The value of this object identifies the row in the ADSL2 Channel Configuration Profile Table (adsl2ChConfProfileTable) that applies to ADSL2 bearer channel #2. If the channel is unused, then the object is set to a zero-length string. This object may be set to a zero-length string only if adsl2LConfTempChan3ConfProfile contains a zero-length string.')
adsl2LConfTempChan2RaRatioDs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LConfTempChan2RaRatioDs.setReference('ITU-T G.997.1, paragraph 7.3.2.1')
if mibBuilder.loadTexts: adsl2LConfTempChan2RaRatioDs.setStatus('current')
if mibBuilder.loadTexts: adsl2LConfTempChan2RaRatioDs.setDescription('Rate Adaptation Ratio. The ratio (in %) that should be taken into account for the bearer channel #2 when performing rate adaptation on Downstream. The ratio refers to the available data rate in excess of the Minimum Data Rate, summed over all bearer channels. Also, the 100 - adsl2LConfTempChan2RaRatioDs is the ratio of excess data rate to be assigned to all other bearer channels on Downstream direction. The sum of rate adaptation ratios over all bearers on the same direction shall be equal to 100%.')
adsl2LConfTempChan2RaRatioUs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LConfTempChan2RaRatioUs.setReference('ITU-T G.997.1, paragraph 7.3.2.1')
if mibBuilder.loadTexts: adsl2LConfTempChan2RaRatioUs.setStatus('current')
if mibBuilder.loadTexts: adsl2LConfTempChan2RaRatioUs.setDescription('Rate Adaptation Ratio. The ratio (in %) that should be taken into account for the bearer channel #2 when performing rate adaptation on Upstream. The ratio refers to the available data rate in excess of the Minimum Data Rate, summed over all bearer channels. Also, the 100 - adsl2LConfTempChan2RaRatioUs is the ratio of excess data rate to be assigned to all other bearer channels on Upstream direction. The sum of rate adaptation ratios over all bearers on the same direction shall be equal to 100%.')
adsl2LConfTempChan3ConfProfile = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 1, 1, 9), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LConfTempChan3ConfProfile.setStatus('current')
if mibBuilder.loadTexts: adsl2LConfTempChan3ConfProfile.setDescription('The value of this object identifies the row in the ADSL2 Channel Configuration Profile Table (adsl2ChConfProfileTable) that applies to ADSL2 bearer channel #3. If the channel is unused, then the object is set to a zero-length string. This object may be set to a zero-length string only if adsl2LConfTempChan4ConfProfile contains a zero-length string. This object may be set to a non-zero-length string only if adsl2LConfTempChan2ConfProfile contains a non-zero-length string.')
adsl2LConfTempChan3RaRatioDs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 1, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LConfTempChan3RaRatioDs.setReference('ITU-T G.997.1, paragraph 7.3.2.1')
if mibBuilder.loadTexts: adsl2LConfTempChan3RaRatioDs.setStatus('current')
if mibBuilder.loadTexts: adsl2LConfTempChan3RaRatioDs.setDescription('Rate Adaptation Ratio. The ratio (in %) that should be taken into account for the bearer channel #3 when performing rate adaptation on Downstream. The ratio refers to the available data rate in excess of the Minimum Data Rate, summed over all bearer channels. Also, the 100 - adsl2LConfTempChan3RaRatioDs is the ratio of excess data rate to be assigned to all other bearer channels on Downstream direction. The sum of rate adaptation ratios over all bearers on the same direction shall be equal to 100%.')
adsl2LConfTempChan3RaRatioUs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 1, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LConfTempChan3RaRatioUs.setReference('ITU-T G.997.1, paragraph 7.3.2.1')
if mibBuilder.loadTexts: adsl2LConfTempChan3RaRatioUs.setStatus('current')
if mibBuilder.loadTexts: adsl2LConfTempChan3RaRatioUs.setDescription('Rate Adaptation Ratio. The ratio (in %) that should be taken into account for the bearer channel #3 when performing rate adaptation on Upstream. The ratio refers to the available data rate in excess of the Minimum Data Rate, summed over all bearer channels. Also, the 100 - adsl2LConfTempChan3RaRatioUs is the ratio of excess data rate to be assigned to all other bearer channels on Upstream direction. The sum of rate adaptation ratios over all bearers on the same direction shall be equal to 100%.')
adsl2LConfTempChan4ConfProfile = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 1, 1, 12), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LConfTempChan4ConfProfile.setStatus('current')
if mibBuilder.loadTexts: adsl2LConfTempChan4ConfProfile.setDescription('The value of this object identifies the row in the ADSL2 Channel Configuration Profile Table (adsl2ChConfProfileTable) that applies to ADSL2 bearer channel #4. If the channel is unused, then the object is set to a zero-length string. This object may be set to a non-zero-length string only if adsl2LConfTempChan3ConfProfile contains a non-zero-length string.')
adsl2LConfTempChan4RaRatioDs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 1, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LConfTempChan4RaRatioDs.setReference('ITU-T G.997.1, paragraph 7.3.2.1')
if mibBuilder.loadTexts: adsl2LConfTempChan4RaRatioDs.setStatus('current')
if mibBuilder.loadTexts: adsl2LConfTempChan4RaRatioDs.setDescription('Rate Adaptation Ratio. The ratio (in %) that should be taken into account for the bearer channel #4 when performing rate adaptation on Downstream. The ratio refers to the available data rate in excess of the Minimum Data Rate, summed over all bearer channels. Also, the 100 - adsl2LConfTempChan4RaRatioDs is the ratio of excess data rate to be assigned to all other bearer channels. The sum of rate adaptation ratios over all bearers on the same direction shall sum to 100%.')
adsl2LConfTempChan4RaRatioUs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 1, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LConfTempChan4RaRatioUs.setReference('ITU-T G.997.1, paragraph 7.3.2.1')
if mibBuilder.loadTexts: adsl2LConfTempChan4RaRatioUs.setStatus('current')
if mibBuilder.loadTexts: adsl2LConfTempChan4RaRatioUs.setDescription('Rate Adaptation Ratio. The ratio (in %) that should be taken into account for the bearer channel #4 when performing rate adaptation on Upstream. The ratio refers to the available data rate in excess of the Minimum Data Rate, summed over all bearer channels. Also, the 100 - adsl2LConfTempChan4RaRatioUs is the ratio of excess data rate to be assigned to all other bearer channels. The sum of rate adaptation ratios over all bearers on the same direction shall sum to 100%.')
adsl2LConfTempRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 1, 1, 15), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LConfTempRowStatus.setStatus('current')
if mibBuilder.loadTexts: adsl2LConfTempRowStatus.setDescription("This object is used to create a new row or to modify or delete an existing row in this table. A template is activated by setting this object to 'active'. When 'active' is set, the system will validate the template. Before a template can be deleted or taken out of service (by setting this object to 'destroy' or 'notInService'), it must first be unreferenced from all associated lines.")
adsl2LineConfProfTable = MibTable((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 2), )
if mibBuilder.loadTexts: adsl2LineConfProfTable.setStatus('current')
if mibBuilder.loadTexts: adsl2LineConfProfTable.setDescription('The table adsl2LineConfProfTable contains ADSL2 line profile configuration. Entries in this table MUST be maintained in a persistent manner.')
adsl2LineConfProfEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 2, 1), ).setIndexNames((0, "ADSL2-LINE-MIB", "adsl2LConfProfProfileName"))
if mibBuilder.loadTexts: adsl2LineConfProfEntry.setStatus('current')
if mibBuilder.loadTexts: adsl2LineConfProfEntry.setDescription("The table adsl2LineConfProfTable contains ADSL2 line profile configuration. A default profile with an index of 'DEFVAL' will always exist, and its parameters will be set to vendor- specific values, unless otherwise specified in this document.")
adsl2LConfProfProfileName = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 2, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: adsl2LConfProfProfileName.setStatus('current')
if mibBuilder.loadTexts: adsl2LConfProfProfileName.setDescription('This object identifies a row in this table.')
adsl2LConfProfScMaskDs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 2, 1, 2), Adsl2ScMaskDs()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LConfProfScMaskDs.setReference('ITU-T G.997.1, paragraph 7.3.1.2.6')
if mibBuilder.loadTexts: adsl2LConfProfScMaskDs.setStatus('current')
if mibBuilder.loadTexts: adsl2LConfProfScMaskDs.setDescription("Sub-carriers mask. A bitmap of 512 bits that allows masking up to 512 downstream sub-carriers, depending on NSCds. If bit i (0 <= i < NSCds) is set to '1', the respective downstream sub-carrier i is masked, and if set to '0', the respective sub-carrier is unmasked. Note that there should always be unmasked sub-carriers (i.e., the object cannot be all 1's). Also note that if NSCds < 512, all bits i (NSCds < i <= 512) should be set to '1'.")
adsl2LConfProfScMaskUs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 2, 1, 3), Adsl2ScMaskUs()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LConfProfScMaskUs.setReference('ITU-T G.997.1, paragraph 7.3.1.2.7')
if mibBuilder.loadTexts: adsl2LConfProfScMaskUs.setStatus('current')
if mibBuilder.loadTexts: adsl2LConfProfScMaskUs.setDescription("Sub-carriers mask. A bitmap of 64 bits that allows masking up to 64 downstream sub-carriers, depending on NSCds. If bit i (0 <= i < NSCus) is set to '1', the respective upstream sub-carrier i is masked, and if set to '0', the respective sub-carrier is unmasked. Note that there should always be unmasked sub-carriers (i.e., the object cannot be all 1's). Also note that if NSCus < 64, all bits i (NSCus < i <= 64) should be set to '1'.")
adsl2LConfProfRfiBandsDs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 2, 1, 4), Adsl2RfiDs()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LConfProfRfiBandsDs.setReference('ITU-T G.997.1, paragraph 7.3.1.2.9')
if mibBuilder.loadTexts: adsl2LConfProfRfiBandsDs.setStatus('current')
if mibBuilder.loadTexts: adsl2LConfProfRfiBandsDs.setDescription("The subset of downstream PSD mask breakpoints that shall be used to notch an RFI band. The specific interpolation around these points is defined in G.992.5. It is a bitmap of 512 bits that allows referring to up to 512 downstream sub-carriers, depending on NSCds. If bit i (0 <= i < NSCds) is set to '1', the respective downstream sub-carrier i is part of a notch filter, and if set to '0', the respective sub-carrier is not part of a notch filter. This information complements the specification provided by adsl2LConfProfPsdMaskDs. Note that if NSCds < 512, all bits i (NSCds<i<512) should be set to '0'.")
adsl2LConfProfRaModeDs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 2, 1, 5), Adsl2RaMode().clone('manual')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LConfProfRaModeDs.setReference('ITU-T G.997.1, paragraph 7.3.1.4.1')
if mibBuilder.loadTexts: adsl2LConfProfRaModeDs.setStatus('current')
if mibBuilder.loadTexts: adsl2LConfProfRaModeDs.setDescription('The mode of operation of a rate-adaptive ATU-C in the transmit direction. The parameter can take three values: manual(1), raInit(2), or dynamicRa(3).')
adsl2LConfProfRaModeUs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 2, 1, 6), Adsl2RaMode().clone('manual')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LConfProfRaModeUs.setReference('ITU-T G.997.1, paragraph 7.3.1.4.2')
if mibBuilder.loadTexts: adsl2LConfProfRaModeUs.setStatus('current')
if mibBuilder.loadTexts: adsl2LConfProfRaModeUs.setDescription('The mode of operation of a rate-adaptive ATU-R in the transmit direction. The parameter can take three values: manual(1), raInit(2), or dynamicRa(3).')
adsl2LConfProfRaUsNrmDs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 2, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 310)).clone(10)).setUnits('0.1 dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LConfProfRaUsNrmDs.setReference('ITU-T G.997.1, paragraph 7.3.1.4.3')
if mibBuilder.loadTexts: adsl2LConfProfRaUsNrmDs.setStatus('current')
if mibBuilder.loadTexts: adsl2LConfProfRaUsNrmDs.setDescription('The Downstream Up-Shift Noise Margin value, to be used when adsl2LConfProfRaModeDs is set to dynamicRa. If the downstream noise margin is above this value and stays above it for more than the time specified by the adsl2LConfProfRaUsTimeDs, the ATU-R shall attempt to increase the downstream net data rate. The Downstream Up-Shift Noise Margin ranges from 0 to 310 units of 0.1 dB (physical values are 0 to 31 dB).')
adsl2LConfProfRaUsNrmUs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 2, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 310)).clone(10)).setUnits('0.1 dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LConfProfRaUsNrmUs.setReference('ITU-T G.997.1, paragraph 7.3.1.4.4')
if mibBuilder.loadTexts: adsl2LConfProfRaUsNrmUs.setStatus('current')
if mibBuilder.loadTexts: adsl2LConfProfRaUsNrmUs.setDescription('The Upstream Up-Shift Noise Margin value, to be used when adsl2LConfProfRaModeUs is set to dynamicRa. If the upstream noise margin is above this value and stays above it for more than the time specified by the adsl2LConfProfRaUsTimeUs, the ATU-C shall attempt to increase the upstream net data rate. The Upstream Up-Shift Noise Margin ranges from 0 to 310 units of 0.1 dB (physical values are 0 to 31 dB).')
adsl2LConfProfRaUsTimeDs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 2, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16383)).clone(3600)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LConfProfRaUsTimeDs.setReference('ITU-T G.997.1, paragraph 7.3.1.4.5')
if mibBuilder.loadTexts: adsl2LConfProfRaUsTimeDs.setStatus('current')
if mibBuilder.loadTexts: adsl2LConfProfRaUsTimeDs.setDescription('The Downstream Up-Shift Time Interval, to be used when adsl2LConfProfRaModeDs is set to dynamicRa. The interval of time that the downstream noise margin should stay above the Downstream Up-Shift Noise Margin before the ATU-R shall attempt to increase the downstream net data rate. The time interval ranges from 0 to 16383 seconds.')
adsl2LConfProfRaUsTimeUs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 2, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16383)).clone(3600)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LConfProfRaUsTimeUs.setReference('ITU-T G.997.1, paragraph 7.3.1.4.6')
if mibBuilder.loadTexts: adsl2LConfProfRaUsTimeUs.setStatus('current')
if mibBuilder.loadTexts: adsl2LConfProfRaUsTimeUs.setDescription('The Upstream Up-Shift Time Interval, to be used when adsl2LConfProfRaModeUs is set to dynamicRa. The interval of time the upstream noise margin should stay above the Upstream Up-Shift Noise Margin before the ATU-C shall attempt to increase the upstream net data rate. The time interval ranges from 0 to 16383 seconds.')
adsl2LConfProfRaDsNrmsDs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 2, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 310)).clone(10)).setUnits('0.1 dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LConfProfRaDsNrmsDs.setReference('ITU-T G.997.1, paragraph 7.3.1.4.7')
if mibBuilder.loadTexts: adsl2LConfProfRaDsNrmsDs.setStatus('current')
if mibBuilder.loadTexts: adsl2LConfProfRaDsNrmsDs.setDescription('The Downstream Down-Shift Noise Margin value, to be used when adsl2LConfProfRaModeDs is set to dynamicRa. If the downstream noise margin is below this value and stays below that for more than the time specified by the adsl2LConfProfRaDsTimeDs, the ATU-R shall attempt to decrease the downstream net data rate. The Downstream Down-Shift Noise Margin ranges from 0 to 310 units of 0.1 dB (physical values are 0 to 31 dB).')
adsl2LConfProfRaDsNrmsUs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 2, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 310)).clone(10)).setUnits('0.1 dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LConfProfRaDsNrmsUs.setReference('ITU-T G.997.1, paragraph 7.3.1.4.8')
if mibBuilder.loadTexts: adsl2LConfProfRaDsNrmsUs.setStatus('current')
if mibBuilder.loadTexts: adsl2LConfProfRaDsNrmsUs.setDescription('The Upstream Down-Shift Noise Margin value, to be used when adsl2LConfProfRaModeUs is set to dynamicRa. If the upstream noise margin is below this value and stays below that for more than the time specified by the adsl2LConfProfRaDsTimeUs, the ATU-C shall attempt to decrease the upstream net data rate. The Upstream Down-Shift Noise Margin ranges from 0 to 310 units of 0.1 dB (physical values are 0 to 31 dB).')
adsl2LConfProfRaDsTimeDs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 2, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16383)).clone(3600)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LConfProfRaDsTimeDs.setReference('ITU-T G.997.1, paragraph 7.3.1.4.9')
if mibBuilder.loadTexts: adsl2LConfProfRaDsTimeDs.setStatus('current')
if mibBuilder.loadTexts: adsl2LConfProfRaDsTimeDs.setDescription('The Downstream Down-Shift Time Interval, to be used when adsl2LConfProfRaModeDs is set to dynamicRa. The interval of time the downstream noise margin should stay below the Downstream Down-Shift Noise Margin before the ATU-R shall attempt to decrease the downstream net data rate. The time interval ranges from 0 to 16383 seconds.')
adsl2LConfProfRaDsTimeUs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 2, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16383)).clone(3600)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LConfProfRaDsTimeUs.setReference('ITU-T G.997.1, paragraph 7.3.1.4.10')
if mibBuilder.loadTexts: adsl2LConfProfRaDsTimeUs.setStatus('current')
if mibBuilder.loadTexts: adsl2LConfProfRaDsTimeUs.setDescription('The Upstream Down-Shift Time Interval, to be used when adsl2LConfProfRaModeUs is set to dynamicRa. The interval of time the upstream noise margin should stay below the Upstream Down-Shift Noise Margin before the ATU-C shall attempt to decrease the upstream net data rate. The time interval ranges from 0 to 16383 seconds.')
adsl2LConfProfTargetSnrmDs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 2, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 310)).clone(60)).setUnits('0.1 dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LConfProfTargetSnrmDs.setReference('ITU-T G.997.1, paragraph 7.3.1.3.1')
if mibBuilder.loadTexts: adsl2LConfProfTargetSnrmDs.setStatus('current')
if mibBuilder.loadTexts: adsl2LConfProfTargetSnrmDs.setDescription('The minimum Noise Margin the ATU-R receiver shall achieve, relative to the BER requirement for each of the downstream bearer channels, to successfully complete initialization. The target noise margin ranges from 0 to 310 units of 0.1 dB (physical values are 0 to 31 dB).')
adsl2LConfProfTargetSnrmUs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 2, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 310)).clone(60)).setUnits('0.1 dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LConfProfTargetSnrmUs.setReference('ITU-T G.997.1, paragraph 7.3.1.3.2')
if mibBuilder.loadTexts: adsl2LConfProfTargetSnrmUs.setStatus('current')
if mibBuilder.loadTexts: adsl2LConfProfTargetSnrmUs.setDescription('The minimum Noise Margin the ATU-C receiver shall achieve, relative to the BER requirement for each of the upstream bearer channels, to successfully complete initialization. The target noise margin ranges from 0 to 310 units of 0.1 dB (physical values are 0 to 31 dB).')
adsl2LConfProfMaxSnrmDs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 2, 1, 17), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 310), ValueRangeConstraint(2147483647, 2147483647), )).clone(310)).setUnits('0.1 dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LConfProfMaxSnrmDs.setReference('ITU-T G.997.1, paragraph 7.3.1.3.3')
if mibBuilder.loadTexts: adsl2LConfProfMaxSnrmDs.setStatus('current')
if mibBuilder.loadTexts: adsl2LConfProfMaxSnrmDs.setDescription('The maximum Noise Margin the ATU-R receiver shall try to sustain. If the Noise Margin is above this level, the ATU-R shall request that the ATU-C reduce the ATU-C transmit power to get a noise margin below this limit (if this functionality is supported). The maximum noise margin ranges from 0 to 310 units of 0.1 dB (physical values are 0 to 31 dB). A value of 0x7FFFFFFF (2147483647) means that there is no maximum.')
adsl2LConfProfMaxSnrmUs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 2, 1, 18), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 310), ValueRangeConstraint(2147483647, 2147483647), )).clone(310)).setUnits('0.1 dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LConfProfMaxSnrmUs.setReference('ITU-T G.997.1, paragraph 7.3.1.3.4')
if mibBuilder.loadTexts: adsl2LConfProfMaxSnrmUs.setStatus('current')
if mibBuilder.loadTexts: adsl2LConfProfMaxSnrmUs.setDescription('The maximum Noise Margin the ATU-C receiver shall try to sustain. If the Noise Margin is above this level, the ATU-C shall request that the ATU-R reduce the ATU-R transmit power to get a noise margin below this limit (if this functionality is supported). The maximum noise margin ranges from 0 to 310 units of 0.1 dB (physical values are 0 to 31 dB). A value of 0x7FFFFFFF (2147483647) means that there is no maximum.')
adsl2LConfProfMinSnrmDs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 2, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 310)).clone(10)).setUnits('0.1 dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LConfProfMinSnrmDs.setReference('ITU-T G.997.1, paragraph 7.3.1.3.5')
if mibBuilder.loadTexts: adsl2LConfProfMinSnrmDs.setStatus('current')
if mibBuilder.loadTexts: adsl2LConfProfMinSnrmDs.setDescription('The minimum Noise Margin the ATU-R receiver shall tolerate. If the noise margin falls below this level, the ATU-R shall request that the ATU-C increase the ATU-C transmit power. If an increase to ATU-C transmit power is not possible, a loss-of-margin (LOM) defect occurs, the ATU-R shall fail and attempt to reinitialize, and the NMS shall be notified. The minimum noise margin ranges from 0 to 310 units of 0.1 dB (physical values are 0 to 31 dB). A value of 0 means that there is no minimum.')
adsl2LConfProfMinSnrmUs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 2, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 310)).clone(10)).setUnits('0.1 dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LConfProfMinSnrmUs.setReference('ITU-T G.997.1, paragraph 7.3.1.3.6')
if mibBuilder.loadTexts: adsl2LConfProfMinSnrmUs.setStatus('current')
if mibBuilder.loadTexts: adsl2LConfProfMinSnrmUs.setDescription('The minimum Noise Margin the ATU-C receiver shall tolerate. If the noise margin falls below this level, the ATU-C shall request that the ATU-R increase the ATU-R transmit power. If an increase of ATU-R transmit power is not possible, a loss-of-margin (LOM) defect occurs, the ATU-C shall fail and attempt to reinitialize, and the NMS shall be notified. The minimum noise margin ranges from 0 to 310 units of 0.1 dB (physical values are 0 to 31 dB). A value of 0 means that there is no minimum.')
adsl2LConfProfMsgMinUs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 2, 1, 21), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4000, 63000)).clone(4000)).setUnits('bits/second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LConfProfMsgMinUs.setReference('ITU-T G.997.1, paragraph 7.3.1.5.1')
if mibBuilder.loadTexts: adsl2LConfProfMsgMinUs.setStatus('current')
if mibBuilder.loadTexts: adsl2LConfProfMsgMinUs.setDescription('Minimum Overhead Rate Upstream. Defines the minimum rate of the message-based overhead that shall be maintained by the ATU in upstream direction. Expressed in bits per second and ranges from 4000 to 63000 bps.')
adsl2LConfProfMsgMinDs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 2, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4000, 63000)).clone(4000)).setUnits('bits/second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LConfProfMsgMinDs.setReference('ITU-T G.997.1, paragraph 7.3.1.5.2')
if mibBuilder.loadTexts: adsl2LConfProfMsgMinDs.setStatus('current')
if mibBuilder.loadTexts: adsl2LConfProfMsgMinDs.setDescription('Minimum Overhead Rate Downstream. Defines the minimum rate of the message-based overhead that shall be maintained by the ATU in downstream direction. Expressed in bits per second and ranges from 4000 to 63000 bps.')
adsl2LConfProfAtuTransSysEna = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 2, 1, 23), Adsl2TransmissionModeType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LConfProfAtuTransSysEna.setReference('ITU-T G.997.1, paragraph 7.3.1.1.1')
if mibBuilder.loadTexts: adsl2LConfProfAtuTransSysEna.setStatus('current')
if mibBuilder.loadTexts: adsl2LConfProfAtuTransSysEna.setDescription("ATU Transmission System Enabling (ATSE). A list of the different coding types enabled in this profile. It is coded in a bit-map representation with 1 or more bits set. A bit set to '1' means that the ATUs may apply the respective coding for the ADSL line. A bit set to '0' means that the ATUs cannot apply the respective coding for the ADSL line. All 'reserved' bits should be set to '0'.")
adsl2LConfProfPmMode = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 2, 1, 24), Adsl2LConfProfPmMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LConfProfPmMode.setReference('ITU-T G.997.1, paragraph 7.3.1.1.4')
if mibBuilder.loadTexts: adsl2LConfProfPmMode.setStatus('current')
if mibBuilder.loadTexts: adsl2LConfProfPmMode.setDescription("Power management state Enabling. Defines the power states the ATU-C or ATU-R may autonomously transition to on this line. The various bit positions are: allowTransitionsToIdle(0) and allowTransitionsToLowPower(1). A bit with a '1' value means that the ATU is allowed to transit into the respective state, and a '0' value means that the ATU is not allowed to transit into the respective state.")
adsl2LConfProfL0Time = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 2, 1, 25), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(255)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LConfProfL0Time.setReference('ITU-T G.997.1, paragraph 7.3.1.1.5')
if mibBuilder.loadTexts: adsl2LConfProfL0Time.setStatus('current')
if mibBuilder.loadTexts: adsl2LConfProfL0Time.setDescription('This minimum time (in seconds) between an Exit from the L2 state and the next Entry into the L2 state. It ranges from 0 to 255 seconds.')
adsl2LConfProfL2Time = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 2, 1, 26), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(255)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LConfProfL2Time.setReference('ITU-T G.997.1, paragraph 7.3.1.1.6')
if mibBuilder.loadTexts: adsl2LConfProfL2Time.setStatus('current')
if mibBuilder.loadTexts: adsl2LConfProfL2Time.setDescription('This minimum time (in seconds) between an Entry into the L2 state and the first Power Trim in the L2 state and between two consecutive Power Trims in the L2 State. It ranges from 0 to 255 seconds.')
adsl2LConfProfL2Atpr = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 2, 1, 27), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 31)).clone(10)).setUnits('dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LConfProfL2Atpr.setReference('ITU-T G.997.1 (amendment 1), 7.3.1.1.7')
if mibBuilder.loadTexts: adsl2LConfProfL2Atpr.setStatus('current')
if mibBuilder.loadTexts: adsl2LConfProfL2Atpr.setDescription('The maximum aggregate transmit power reduction (in dB) that can be performed at transition of L0 to L2 state or through a single Power Trim in the L2 state. It ranges from 0 dB to 31 dB.')
adsl2LConfProfL2Atprt = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 2, 1, 28), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 31)).clone(31)).setUnits('dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LConfProfL2Atprt.setReference('ITU-T G.997.1 (amendment 1), 7.3.1.1.9')
if mibBuilder.loadTexts: adsl2LConfProfL2Atprt.setStatus('current')
if mibBuilder.loadTexts: adsl2LConfProfL2Atprt.setDescription('The total maximum aggregate transmit power reduction (in dB) that can be performed in an L2 state. This is the sum of all reductions of L2 Request (i.e., at transition of L0 to L2 state) and Power Trims.')
adsl2LConfProfRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 2, 1, 29), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LConfProfRowStatus.setStatus('current')
if mibBuilder.loadTexts: adsl2LConfProfRowStatus.setDescription("This object is used to create a new row or to modify or delete an existing row in this table. A profile is activated by setting this object to 'active'. When 'active' is set, the system will validate the profile. Before a profile can be deleted or taken out of service (by setting this object to 'destroy' or 'notInService'), it must first be unreferenced from all associated templates.")
adsl2LineConfProfModeSpecTable = MibTable((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 3), )
if mibBuilder.loadTexts: adsl2LineConfProfModeSpecTable.setStatus('current')
if mibBuilder.loadTexts: adsl2LineConfProfModeSpecTable.setDescription("The table adsl2LineConfProfModeSpecTable extends the ADSL2 line configuration profile by ADSL Mode Specific parameters. A row in this table that has an index of adsl2LConfProfAdslMode == defMode(1) is called a 'mandatory' row. A row in this table that has an index such that adsl2LConfProfAdslMode is not equal to defMode(1) is called an 'optional' row. When a row in the adsl2LineConfProfTable table (the parent row) is created, the SNMP agent will automatically create a 'mandatory' row in this table. When the parent row is deleted, the SNMP agent will automatically delete all associated rows in this table. Any attempt to delete the 'mandatory' row using the adsl2LConfProfModeSpecRowStatus attribute will be rejected by the SNMP agent. The manager MAY create an 'optional' row in this table using the adsl2LConfProfModeSpecRowStatus attribute if the parent row exists. The manager MAY delete an 'optional' row in this table using the adsl2LConfProfModeSpecRowStatus attribute at any time. If the actual transmission mode of a DSL line does not match one of the 'optional' rows in this table, then the line will use the PSD configuration from the 'mandatory' row. Entries in this table MUST be maintained in a persistent manner.")
adsl2LineConfProfModeSpecEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 3, 1), ).setIndexNames((0, "ADSL2-LINE-MIB", "adsl2LConfProfProfileName"), (0, "ADSL2-LINE-MIB", "adsl2LConfProfAdslMode"))
if mibBuilder.loadTexts: adsl2LineConfProfModeSpecEntry.setStatus('current')
if mibBuilder.loadTexts: adsl2LineConfProfModeSpecEntry.setDescription('The table adsl2LineConfProfModeSpecTable extends the ADSL2 line configuration profile by ADSL Mode Specific parameters.')
adsl2LConfProfAdslMode = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 3, 1, 1), Adsl2OperationModes())
if mibBuilder.loadTexts: adsl2LConfProfAdslMode.setReference('DSL Forum TR-90, paragraph 5.1.8')
if mibBuilder.loadTexts: adsl2LConfProfAdslMode.setStatus('current')
if mibBuilder.loadTexts: adsl2LConfProfAdslMode.setDescription('The ADSL Mode is a way of categorizing the various ADSL transmission modes into groups; each group (ADSL Mode) shares the same PSD configuration. There should be multiple entries in this table for a given line profile in case multiple bits are set in adsl2LConfProfAtuTransSysEna for that profile.')
adsl2LConfProfMaxNomPsdDs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-600, -300)).clone(-300)).setUnits('0.1 dBm/Hz').setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LConfProfMaxNomPsdDs.setReference('ITU-T G.997.1, paragraph 7.3.1.2')
if mibBuilder.loadTexts: adsl2LConfProfMaxNomPsdDs.setStatus('current')
if mibBuilder.loadTexts: adsl2LConfProfMaxNomPsdDs.setDescription('The maximum nominal transmit PSD in the downstream direction during initialization and Showtime. It ranges from -600 to -300 units of 0.1 dBm/Hz (physical values are -60 to -30 dBm/Hz).')
adsl2LConfProfMaxNomPsdUs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-600, -300)).clone(-300)).setUnits('0.1 dBm/Hz').setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LConfProfMaxNomPsdUs.setReference('ITU-T G.997.1, paragraph 7.3.1.2')
if mibBuilder.loadTexts: adsl2LConfProfMaxNomPsdUs.setStatus('current')
if mibBuilder.loadTexts: adsl2LConfProfMaxNomPsdUs.setDescription('The maximum nominal transmit PSD in the upstream direction during initialization and Showtime. It ranges from -600 to -300 units of 0.1 dBm/Hz (physical values are -60 to -30 dBm/Hz).')
adsl2LConfProfMaxNomAtpDs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 3, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(255)).setUnits('0.1 dBm').setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LConfProfMaxNomAtpDs.setReference('ITU-T G.997.1, paragraph 7.3.1.2')
if mibBuilder.loadTexts: adsl2LConfProfMaxNomAtpDs.setStatus('current')
if mibBuilder.loadTexts: adsl2LConfProfMaxNomAtpDs.setDescription('The maximum nominal aggregate transmit power in the downstream direction during initialization and Showtime. It ranges from 0 to 255 units of 0.1 dBm (physical values are 0 to 25.5 dBm).')
adsl2LConfProfMaxNomAtpUs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 3, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(255)).setUnits('0.1 dBm').setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LConfProfMaxNomAtpUs.setReference('ITU-T G.997.1, paragraph 7.3.1.2')
if mibBuilder.loadTexts: adsl2LConfProfMaxNomAtpUs.setStatus('current')
if mibBuilder.loadTexts: adsl2LConfProfMaxNomAtpUs.setDescription('The maximum nominal aggregate transmit power in the upstream direction during initialization and Showtime. It ranges from 0 to 255 units of 0.1 dBm (physical values are 0 to 25.5 dBm).')
adsl2LConfProfMaxAggRxPwrUs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-255, 255), ValueRangeConstraint(2147483647, 2147483647), )).clone(255)).setUnits('0.1 dBm').setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LConfProfMaxAggRxPwrUs.setReference('ITU-T G.997.1, paragraph 7.3.1.2')
if mibBuilder.loadTexts: adsl2LConfProfMaxAggRxPwrUs.setStatus('current')
if mibBuilder.loadTexts: adsl2LConfProfMaxAggRxPwrUs.setDescription('The maximum upstream aggregate receive power over the relevant set of sub-carriers. The ATU-C should verify that the upstream power cutback is such that this maximum aggregate receive power value is honored. It ranges from -255 to 255 units of 0.1 dBm (physical values are -25.5 to 25.5 dBm). A value of 0x7FFFFFFF (2147483647) means that there is no limit.')
adsl2LConfProfPsdMaskDs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 3, 1, 7), Adsl2PsdMaskDs()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LConfProfPsdMaskDs.setReference('ITU-T G.997.1, paragraph 7.3.1.2')
if mibBuilder.loadTexts: adsl2LConfProfPsdMaskDs.setStatus('current')
if mibBuilder.loadTexts: adsl2LConfProfPsdMaskDs.setDescription('The downstream PSD mask applicable at the U-C2 reference point. This parameter is used only for G.992.5, and it may impose PSD restrictions (breakpoints) in addition to the Limit PSD mask defined in G.992.5. This is a string of 32 pairs of values in the following structure: Octets 0+1 - Index of 1st sub-carrier used in the context of a first breakpoint. Octet 2 - The PSD reduction for the sub-carrier indicated in octets 0 and 1. Octets 3-5 - Same, for a 2nd breakpoint. Octets 6-8 - Same, for a 3rd breakpoint. This architecture continues until octets 94-95, which are associated with a 32nd breakpoint. Each subcarrier index is an unsigned number in the range 1 to NSCds. Each PSD reduction value is in the range 0 (0dBm/Hz) to 255 (-127.5dBm/Hz) with steps of 0.5dBm/Hz. Valid values are in the range 0 to 190 (0 to -95dBm/Hz). When the number of breakpoints is less than 32, all remaining octets are set to the value 0. Note that the content of this object should be correlated with the sub-carriers mask and with the RFI setup.')
adsl2LConfProfPsdMaskUs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 3, 1, 8), Adsl2PsdMaskUs()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LConfProfPsdMaskUs.setReference('ITU-T G.997.1, paragraph 7.3.1.2')
if mibBuilder.loadTexts: adsl2LConfProfPsdMaskUs.setStatus('current')
if mibBuilder.loadTexts: adsl2LConfProfPsdMaskUs.setDescription('The upstream PSD mask applicable at the U-R2 reference point. This parameter is used only for G.992.5, and it may impose PSD restrictions (breakpoints) in addition to the Limit PSD mask defined in G.992.5. This is a string of 4 pairs of values in the following structure: Octets 0+1 - Index of 1st sub-carrier used in the context of a first breakpoint. Octet 2 - The PSD reduction for the sub-carrier indicated in octets 0 and 1. Octets 3-5 - Same, for a 2nd breakpoint. Octets 6-8 - Same, for a 3rd breakpoint. This architecture continues until octets 9-11, which are associated with a 4th breakpoint. Each subcarrier index is an unsigned number in the range 1 to NSCus. Each PSD reduction value is in the range 0 (0dBm/Hz) to 255 (-127.5dBm/Hz) with steps of 0.5dBm/Hz. Valid values are in the range 0 to 190 (0 to -95dBm/Hz). When the number of breakpoints is less than 4, all remaining octets are set to the value 0. Note that the content of this object should be correlated with the sub-carriers mask and with the RFI setup.')
adsl2LConfProfPsdMaskSelectUs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 3, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 9)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LConfProfPsdMaskSelectUs.setReference('ITU-T G.997.1 (amendment 1), 7.3.1.2.10')
if mibBuilder.loadTexts: adsl2LConfProfPsdMaskSelectUs.setStatus('current')
if mibBuilder.loadTexts: adsl2LConfProfPsdMaskSelectUs.setDescription('The selected upstream PSD mask. This parameter is used only for annexes J and M of G.992.3 and G.992.5, and the same selection is used for all relevant enabled bits in adsl2LConfProfAtuTransSysEna.')
adsl2LConfProfModeSpecRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 3, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LConfProfModeSpecRowStatus.setStatus('current')
if mibBuilder.loadTexts: adsl2LConfProfModeSpecRowStatus.setDescription("This object is used to create a new row or to modify or delete an existing row in this table. A profile is activated by setting this object to 'active'. When 'active' is set, the system will validate the profile. Before a profile can be deleted or taken out of service (by setting this object to 'destroy' or 'notInService'), it must first be unreferenced from all associated templates.")
adsl2ChConfProfileTable = MibTable((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 2, 1), )
if mibBuilder.loadTexts: adsl2ChConfProfileTable.setStatus('current')
if mibBuilder.loadTexts: adsl2ChConfProfileTable.setDescription('The table adsl2ChConfProfileTable contains ADSL2 channel profile configuration. Entries in this table MUST be maintained in a persistent manner.')
adsl2ChConfProfileEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 2, 1, 1), ).setIndexNames((0, "ADSL2-LINE-MIB", "adsl2ChConfProfProfileName"))
if mibBuilder.loadTexts: adsl2ChConfProfileEntry.setStatus('current')
if mibBuilder.loadTexts: adsl2ChConfProfileEntry.setDescription("The table adsl2ChConfProfileTable contains ADSL2 channel profile configuration. A default profile with an index of 'DEFVAL' will always exist, and its parameters will be set to vendor- specific values, unless otherwise specified in this document.")
adsl2ChConfProfProfileName = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 2, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: adsl2ChConfProfProfileName.setStatus('current')
if mibBuilder.loadTexts: adsl2ChConfProfProfileName.setDescription('This object identifies a row in this table.')
adsl2ChConfProfMinDataRateDs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 2, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000000))).setUnits('bits/second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2ChConfProfMinDataRateDs.setReference('ITU-T G.997.1, paragraph 7.3.2.1')
if mibBuilder.loadTexts: adsl2ChConfProfMinDataRateDs.setStatus('current')
if mibBuilder.loadTexts: adsl2ChConfProfMinDataRateDs.setDescription('Minimum Data Rate on Downstream direction. The minimum net data rate for the bearer channel, coded in bits/second.')
adsl2ChConfProfMinDataRateUs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 2, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000000))).setUnits('bits/second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2ChConfProfMinDataRateUs.setReference('ITU-T G.997.1, paragraph 7.3.2.1')
if mibBuilder.loadTexts: adsl2ChConfProfMinDataRateUs.setStatus('current')
if mibBuilder.loadTexts: adsl2ChConfProfMinDataRateUs.setDescription('Minimum Data Rate on Upstream direction. The minimum net data rate for the bearer channel, coded in bits/second.')
adsl2ChConfProfMinResDataRateDs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 2, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000000))).setUnits('bits/second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2ChConfProfMinResDataRateDs.setReference('ITU-T G.997.1, paragraph 7.3.2.1')
if mibBuilder.loadTexts: adsl2ChConfProfMinResDataRateDs.setStatus('current')
if mibBuilder.loadTexts: adsl2ChConfProfMinResDataRateDs.setDescription('Minimum Reserved Data Rate on Downstream direction. The minimum reserved net data rate for the bearer channel, coded in bits/second. This parameter is used only if the Rate Adaptation Mode in the direction of the bearer channel (i.e., adsl2LConfProfRaModeDs) is set to dynamicRa.')
adsl2ChConfProfMinResDataRateUs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 2, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000000))).setUnits('bits/second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2ChConfProfMinResDataRateUs.setReference('ITU-T G.997.1, paragraph 7.3.2.1')
if mibBuilder.loadTexts: adsl2ChConfProfMinResDataRateUs.setStatus('current')
if mibBuilder.loadTexts: adsl2ChConfProfMinResDataRateUs.setDescription('Minimum Reserved Data Rate on Upstream direction. The minimum reserved net data rate for the bearer channel, coded in bits/second. This parameter is used only if the Rate Adaptation Mode in the direction of the bearer channel (i.e., adsl2LConfProfRaModeUs) is set to dynamicRa.')
adsl2ChConfProfMaxDataRateDs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 2, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000000))).setUnits('bits/second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2ChConfProfMaxDataRateDs.setReference('ITU-T G.997.1, paragraph 7.3.2.1')
if mibBuilder.loadTexts: adsl2ChConfProfMaxDataRateDs.setStatus('current')
if mibBuilder.loadTexts: adsl2ChConfProfMaxDataRateDs.setDescription('Maximum Data Rate on Downstream direction. The maximum net data rate for the bearer channel, coded in bits/second.')
adsl2ChConfProfMaxDataRateUs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 2, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000000))).setUnits('bits/second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2ChConfProfMaxDataRateUs.setReference('ITU-T G.997.1, paragraph 7.3.2.1')
if mibBuilder.loadTexts: adsl2ChConfProfMaxDataRateUs.setStatus('current')
if mibBuilder.loadTexts: adsl2ChConfProfMaxDataRateUs.setDescription('Maximum Data Rate on Upstream direction. The maximum net data rate for the bearer channel, coded in bits/second.')
adsl2ChConfProfMinDataRateLowPwrDs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 2, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000000))).setUnits('bits/second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2ChConfProfMinDataRateLowPwrDs.setReference('ITU-T G.997.1, paragraph 7.3.2.1')
if mibBuilder.loadTexts: adsl2ChConfProfMinDataRateLowPwrDs.setStatus('current')
if mibBuilder.loadTexts: adsl2ChConfProfMinDataRateLowPwrDs.setDescription('Minimum Data Rate in Low Power state on Downstream direction. The minimum net data rate for the bearer channel, coded in bits/second, during the low power state (L1 in G.992.2, L2 in G.992.3).')
adsl2ChConfProfMaxDelayDs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 2, 1, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2ChConfProfMaxDelayDs.setReference('ITU-T G.997.1, paragraph 7.3.2.2')
if mibBuilder.loadTexts: adsl2ChConfProfMaxDelayDs.setStatus('current')
if mibBuilder.loadTexts: adsl2ChConfProfMaxDelayDs.setDescription('Maximum Interleave Delay on Downstream direction. The maximum one-way interleaving delay introduced by the PMS-TC on Downstream direction. The ATUs shall choose the S (factor) and D (depth) values such that the actual one-way interleaving delay (adsl2ChStatusActDelay) is as close as possible to, but less than or equal to, adsl2ChConfProfMaxDelayDs. The delay is coded in ms, with the value 0 indicating no delay bound is being imposed.')
adsl2ChConfProfMaxDelayUs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 2, 1, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2ChConfProfMaxDelayUs.setReference('ITU-T G.997.1, paragraph 7.3.2.2')
if mibBuilder.loadTexts: adsl2ChConfProfMaxDelayUs.setStatus('current')
if mibBuilder.loadTexts: adsl2ChConfProfMaxDelayUs.setDescription('Maximum Interleave Delay on Upstream direction. The maximum one-way interleaving delay introduced by the PMS-TC on Upstream direction. The ATUs shall choose the S (factor) and D (depth) values such that the actual one-way interleaving delay (adsl2ChStatusActDelay) is as close as possible to, but less than or equal to, adsl2ChConfProfMaxDelayUs. The delay is coded in ms, with the value 0 indicating no delay bound is being imposed.')
adsl2ChConfProfMinProtectionDs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 2, 1, 1, 11), Adsl2SymbolProtection().clone('noProtection')).setUnits('symbols').setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2ChConfProfMinProtectionDs.setReference('ITU-T G.997.1, paragraph 7.3.2.3')
if mibBuilder.loadTexts: adsl2ChConfProfMinProtectionDs.setStatus('current')
if mibBuilder.loadTexts: adsl2ChConfProfMinProtectionDs.setDescription('Minimum Impulse Noise Protection on Downstream direction. The minimum impulse noise protection for the bearer channel, expressed in symbols. The parameter can take the following values: noProtection (i.e., INP not required), halfSymbol (i.e., INP length is 1/2 symbol), and 1-16 symbols in steps of 1 symbol.')
adsl2ChConfProfMinProtectionUs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 2, 1, 1, 12), Adsl2SymbolProtection().clone('noProtection')).setUnits('symbols').setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2ChConfProfMinProtectionUs.setReference('ITU-T G.997.1, paragraph 7.3.2.3')
if mibBuilder.loadTexts: adsl2ChConfProfMinProtectionUs.setStatus('current')
if mibBuilder.loadTexts: adsl2ChConfProfMinProtectionUs.setDescription('Minimum Impulse Noise Protection on Upstream direction. The minimum impulse noise protection for the bearer channel, expressed in symbols. The parameter can take the following values: noProtection (i.e., INP not required), halfSymbol (i.e., INP length is 1/2 symbol), and 1-16 symbols in steps of 1 symbol.')
adsl2ChConfProfMaxBerDs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 2, 1, 1, 13), Adsl2MaxBer().clone('eminus5')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2ChConfProfMaxBerDs.setReference('ITU-T G.997.1, paragraph 7.3.2.4')
if mibBuilder.loadTexts: adsl2ChConfProfMaxBerDs.setStatus('current')
if mibBuilder.loadTexts: adsl2ChConfProfMaxBerDs.setDescription('Maximum Bit Error Ratio on Downstream direction. The maximum bit error ratio for the bearer channel. The parameter can take the following values (for 1E-3, 1E-5 or 1E-7): eminus3(1), eminus5(2), or eminus7(3).')
adsl2ChConfProfMaxBerUs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 2, 1, 1, 14), Adsl2MaxBer().clone('eminus5')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2ChConfProfMaxBerUs.setReference('ITU-T G.997.1, paragraph 7.3.2.4')
if mibBuilder.loadTexts: adsl2ChConfProfMaxBerUs.setStatus('current')
if mibBuilder.loadTexts: adsl2ChConfProfMaxBerUs.setDescription('Maximum Bit Error Ratio on Upstream direction. The maximum bit error ratio for the bearer channel. The parameter can take the following values (for 1E-3, 1E-5 or 1E-7): eminus3(1), eminus5(2), or eminus7(3).')
adsl2ChConfProfUsDataRateDs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 2, 1, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000000))).setUnits('bits/second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2ChConfProfUsDataRateDs.setReference('ITU-T G.997.1, paragraph 7.3.2.6')
if mibBuilder.loadTexts: adsl2ChConfProfUsDataRateDs.setStatus('current')
if mibBuilder.loadTexts: adsl2ChConfProfUsDataRateDs.setDescription("Data Rate Threshold Up shift for downstream direction. An 'Up-shift rate change' event is triggered when the actual downstream data rate exceeds, by more than the threshold, the data rate at the last entry into Showtime. The parameter is coded in bits/second.")
adsl2ChConfProfDsDataRateDs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 2, 1, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000000))).setUnits('bits/second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2ChConfProfDsDataRateDs.setReference('ITU-T G.997.1, paragraph 7.3.2.6')
if mibBuilder.loadTexts: adsl2ChConfProfDsDataRateDs.setStatus('current')
if mibBuilder.loadTexts: adsl2ChConfProfDsDataRateDs.setDescription("Data Rate Threshold Down-shift for downstream direction. A 'Down-shift rate change' event is triggered when the actual downstream data rate is below the data rate at the last entry into Showtime, by more than the threshold. The parameter is coded in bits/second.")
adsl2ChConfProfUsDataRateUs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 2, 1, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000000))).setUnits('bits/second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2ChConfProfUsDataRateUs.setReference('ITU-T G.997.1, paragraph 7.3.2.6')
if mibBuilder.loadTexts: adsl2ChConfProfUsDataRateUs.setStatus('current')
if mibBuilder.loadTexts: adsl2ChConfProfUsDataRateUs.setDescription("Data Rate Threshold Up shift for upstream direction. An 'Up-shift rate change' event is triggered when the actual upstream data rate exceeds, by more than the threshold, the data rate at the last entry into Showtime. The parameter is coded in bits/second.")
adsl2ChConfProfDsDataRateUs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 2, 1, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000000))).setUnits('bits/second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2ChConfProfDsDataRateUs.setReference('ITU-T G.997.1, paragraph 7.3.2.6')
if mibBuilder.loadTexts: adsl2ChConfProfDsDataRateUs.setStatus('current')
if mibBuilder.loadTexts: adsl2ChConfProfDsDataRateUs.setDescription("Data Rate Threshold Down-shift for upstream direction. A 'Down-shift rate change' event is triggered when the actual upstream data rate is below the data rate at the last entry into Showtime, by more than the threshold. The parameter is coded in bits/second.")
adsl2ChConfProfImaEnabled = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 2, 1, 1, 19), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2ChConfProfImaEnabled.setReference('ITU-T G.997.1, paragraph 7.3.4.1')
if mibBuilder.loadTexts: adsl2ChConfProfImaEnabled.setStatus('current')
if mibBuilder.loadTexts: adsl2ChConfProfImaEnabled.setDescription("IMA Mode Enable. The parameter enables the IMA operation mode in the ATM Data Path. Relevant only if the channel is an ATM Data Path. When in 'enable' state, the ATM data path should comply with the requirements for IMA transmission.")
adsl2ChConfProfRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 2, 1, 1, 20), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2ChConfProfRowStatus.setStatus('current')
if mibBuilder.loadTexts: adsl2ChConfProfRowStatus.setDescription("This object is used to create a new row or to modify or delete an existing row in this table. A profile is activated by setting this object to 'active'. When 'active' is set, the system will validate the profile. Before a profile can be deleted or taken out of service (by setting this object to 'destroy' or 'notInService'), it must first be unreferenced from all associated templates.")
adsl2LineAlarmConfTemplateTable = MibTable((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 3, 1), )
if mibBuilder.loadTexts: adsl2LineAlarmConfTemplateTable.setStatus('current')
if mibBuilder.loadTexts: adsl2LineAlarmConfTemplateTable.setDescription('The table adsl2LineAlarmConfTemplateTable contains ADSL2 line configuration templates. Entries in this table MUST be maintained in a persistent manner.')
adsl2LineAlarmConfTemplateEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 3, 1, 1), ).setIndexNames((0, "ADSL2-LINE-MIB", "adsl2LAlarmConfTempTemplateName"))
if mibBuilder.loadTexts: adsl2LineAlarmConfTemplateEntry.setStatus('current')
if mibBuilder.loadTexts: adsl2LineAlarmConfTemplateEntry.setDescription("The table adsl2LineAlarmConfTemplateTable contains ADSL2 line PM thresholds templates. A default template with an index of 'DEFVAL' will always exist, and its parameters will be set to vendor- specific values, unless otherwise specified in this document.")
adsl2LAlarmConfTempTemplateName = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 3, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: adsl2LAlarmConfTempTemplateName.setStatus('current')
if mibBuilder.loadTexts: adsl2LAlarmConfTempTemplateName.setDescription('This object identifies a row in this table.')
adsl2LAlarmConfTempLineProfile = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 3, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)).clone('DEFVAL')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LAlarmConfTempLineProfile.setReference('DSL Forum TR-90, paragraph 5.4.1')
if mibBuilder.loadTexts: adsl2LAlarmConfTempLineProfile.setStatus('current')
if mibBuilder.loadTexts: adsl2LAlarmConfTempLineProfile.setDescription('The value of this object identifies the row in the ADSL2 Line Thresholds Configuration Profile Table (adsl2LineAlarmConfProfileTable) that applies to this ADSL2 line.')
adsl2LAlarmConfTempChan1ConfProfile = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 3, 1, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)).clone('DEFVAL')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LAlarmConfTempChan1ConfProfile.setReference('DSL Forum TR-90, paragraph 5.4.1')
if mibBuilder.loadTexts: adsl2LAlarmConfTempChan1ConfProfile.setStatus('current')
if mibBuilder.loadTexts: adsl2LAlarmConfTempChan1ConfProfile.setDescription('The value of this object identifies the row in the ADSL2 Channel Thresholds Configuration Profile Table (adsl2ChAlarmConfProfileTable) that applies for ADSL2 bearer channel #1. The channel profile name specified here must match the name of an existing row in the adsl2ChAlarmConfProfileTable table.')
adsl2LAlarmConfTempChan2ConfProfile = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 3, 1, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LAlarmConfTempChan2ConfProfile.setReference('DSL Forum TR-90, paragraph 5.4.1')
if mibBuilder.loadTexts: adsl2LAlarmConfTempChan2ConfProfile.setStatus('current')
if mibBuilder.loadTexts: adsl2LAlarmConfTempChan2ConfProfile.setDescription('The value of this object identifies the row in the ADSL2 Channel Thresholds Configuration Profile Table (adsl2ChAlarmConfProfileTable) that applies for ADSL2 bearer channel #2. The channel profile name specified here must match the name of an existing row in the adsl2ChAlarmConfProfileTable table. If the channel is unused, then the object is set to a zero-length string.')
adsl2LAlarmConfTempChan3ConfProfile = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 3, 1, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LAlarmConfTempChan3ConfProfile.setReference('DSL Forum TR-90, paragraph 5.4.1')
if mibBuilder.loadTexts: adsl2LAlarmConfTempChan3ConfProfile.setStatus('current')
if mibBuilder.loadTexts: adsl2LAlarmConfTempChan3ConfProfile.setDescription('The value of this object identifies the row in the ADSL2 Channel Thresholds Configuration Profile Table (adsl2ChAlarmConfProfileTable) that applies for ADSL2 bearer channel #3. The channel profile name specified here must match the name of an existing row in the adsl2ChAlarmConfProfileTable table. This object may be set to a non-zero-length string only if adsl2LAlarmConfTempChan2ConfProfile contains a non-zero- length string.')
adsl2LAlarmConfTempChan4ConfProfile = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 3, 1, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LAlarmConfTempChan4ConfProfile.setReference('DSL Forum TR-90, paragraph 5.4.1')
if mibBuilder.loadTexts: adsl2LAlarmConfTempChan4ConfProfile.setStatus('current')
if mibBuilder.loadTexts: adsl2LAlarmConfTempChan4ConfProfile.setDescription('The value of this object identifies the row in the ADSL2 Channel Thresholds Configuration Profile Table (adsl2ChAlarmConfProfileTable) that applies for ADSL2 bearer channel #4. The channel profile name specified here must match the name of an existing row in the adsl2ChAlarmConfProfileTable table. This object may be set to a non-zero-length string only if adsl2LAlarmConfTempChan3ConfProfile contains a non-zero- length string.')
adsl2LAlarmConfTempRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 3, 1, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LAlarmConfTempRowStatus.setStatus('current')
if mibBuilder.loadTexts: adsl2LAlarmConfTempRowStatus.setDescription("This object is used to create a new row or to modify or delete an existing row in this table. A template is activated by setting this object to 'active'. When 'active' is set, the system will validate the template. Before a template can be deleted or taken out of service (by setting this object to 'destroy' or 'notInService'), it must first be unreferenced from all associated lines.")
adsl2LineAlarmConfProfileTable = MibTable((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 3, 2), )
if mibBuilder.loadTexts: adsl2LineAlarmConfProfileTable.setStatus('current')
if mibBuilder.loadTexts: adsl2LineAlarmConfProfileTable.setDescription('The table adsl2LineAlarmConfProfileTable contains ADSL2 line PM thresholds profiles. Entries in this table MUST be maintained in a persistent manner.')
adsl2LineAlarmConfProfileEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 3, 2, 1), ).setIndexNames((0, "ADSL2-LINE-MIB", "adsl2LineAlarmConfProfileName"))
if mibBuilder.loadTexts: adsl2LineAlarmConfProfileEntry.setStatus('current')
if mibBuilder.loadTexts: adsl2LineAlarmConfProfileEntry.setDescription("The table adsl2LineAlarmConfProfileTable contains ADSL2 line PM thresholds profiles. A default profile with an index of 'DEFVAL' will always exist, and its parameters will be set to vendor- specific values, unless otherwise specified in this document.")
adsl2LineAlarmConfProfileName = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 3, 2, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: adsl2LineAlarmConfProfileName.setStatus('current')
if mibBuilder.loadTexts: adsl2LineAlarmConfProfileName.setDescription('This object identifies a row in this table.')
adsl2LineAlarmConfProfileAtucThresh15MinFecs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 3, 2, 1, 2), HCPerfIntervalThreshold()).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LineAlarmConfProfileAtucThresh15MinFecs.setReference('ITU-T G.997.1, paragraph 7.3.1')
if mibBuilder.loadTexts: adsl2LineAlarmConfProfileAtucThresh15MinFecs.setStatus('current')
if mibBuilder.loadTexts: adsl2LineAlarmConfProfileAtucThresh15MinFecs.setDescription('A threshold for the adsl2PMLCurr15MFecs counter, when adsl2PMLCurrUnit is atuc(1). The value 0 means that no threshold is specified for the associated counter.')
adsl2LineAlarmConfProfileAtucThresh15MinEs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 3, 2, 1, 3), HCPerfIntervalThreshold()).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LineAlarmConfProfileAtucThresh15MinEs.setReference('ITU-T G.997.1, paragraph 7.3.1')
if mibBuilder.loadTexts: adsl2LineAlarmConfProfileAtucThresh15MinEs.setStatus('current')
if mibBuilder.loadTexts: adsl2LineAlarmConfProfileAtucThresh15MinEs.setDescription('A threshold for the adsl2PMLCurr15MEs counter, when adsl2PMLCurrUnit is atuc(1). The value 0 means that no threshold is specified for the associated counter.')
adsl2LineAlarmConfProfileAtucThresh15MinSes = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 3, 2, 1, 4), HCPerfIntervalThreshold()).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LineAlarmConfProfileAtucThresh15MinSes.setReference('ITU-T G.997.1, paragraph 7.3.1')
if mibBuilder.loadTexts: adsl2LineAlarmConfProfileAtucThresh15MinSes.setStatus('current')
if mibBuilder.loadTexts: adsl2LineAlarmConfProfileAtucThresh15MinSes.setDescription('A threshold for the adsl2PMLCurr15MSes counter, when adsl2PMLCurrUnit is atuc(1). The value 0 means that no threshold is specified for the associated counter.')
adsl2LineAlarmConfProfileAtucThresh15MinLoss = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 3, 2, 1, 5), HCPerfIntervalThreshold()).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LineAlarmConfProfileAtucThresh15MinLoss.setReference('ITU-T G.997.1, paragraph 7.3.1')
if mibBuilder.loadTexts: adsl2LineAlarmConfProfileAtucThresh15MinLoss.setStatus('current')
if mibBuilder.loadTexts: adsl2LineAlarmConfProfileAtucThresh15MinLoss.setDescription('A threshold for the adsl2PMLCurr15MLoss counter, when adsl2PMLCurrUnit is atuc(1). The value 0 means that no threshold is specified for the associated counter.')
adsl2LineAlarmConfProfileAtucThresh15MinUas = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 3, 2, 1, 6), HCPerfIntervalThreshold()).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LineAlarmConfProfileAtucThresh15MinUas.setReference('ITU-T G.997.1, paragraph 7.3.1')
if mibBuilder.loadTexts: adsl2LineAlarmConfProfileAtucThresh15MinUas.setStatus('current')
if mibBuilder.loadTexts: adsl2LineAlarmConfProfileAtucThresh15MinUas.setDescription('A threshold for the adsl2PMLCurr15MUas counter, when adsl2PMLCurrUnit is atuc(1). The value 0 means that no threshold is specified for the associated counter.')
adsl2LineAlarmConfProfileAturThresh15MinFecs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 3, 2, 1, 7), HCPerfIntervalThreshold()).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LineAlarmConfProfileAturThresh15MinFecs.setReference('ITU-T G.997.1, paragraph 7.3.1')
if mibBuilder.loadTexts: adsl2LineAlarmConfProfileAturThresh15MinFecs.setStatus('current')
if mibBuilder.loadTexts: adsl2LineAlarmConfProfileAturThresh15MinFecs.setDescription('A threshold for the adsl2PMLCurr15MFecs counter, when adsl2PMLCurrUnit is atur(2). The value 0 means that no threshold is specified for the associated counter.')
adsl2LineAlarmConfProfileAturThresh15MinEs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 3, 2, 1, 8), HCPerfIntervalThreshold()).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LineAlarmConfProfileAturThresh15MinEs.setReference('ITU-T G.997.1, paragraph 7.3.1')
if mibBuilder.loadTexts: adsl2LineAlarmConfProfileAturThresh15MinEs.setStatus('current')
if mibBuilder.loadTexts: adsl2LineAlarmConfProfileAturThresh15MinEs.setDescription('A threshold for the adsl2PMLCurr15MEs counter, when adsl2PMLCurrUnit is atur(2). The value 0 means that no threshold is specified for the associated counter.')
adsl2LineAlarmConfProfileAturThresh15MinSes = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 3, 2, 1, 9), HCPerfIntervalThreshold()).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LineAlarmConfProfileAturThresh15MinSes.setReference('ITU-T G.997.1, paragraph 7.3.1')
if mibBuilder.loadTexts: adsl2LineAlarmConfProfileAturThresh15MinSes.setStatus('current')
if mibBuilder.loadTexts: adsl2LineAlarmConfProfileAturThresh15MinSes.setDescription('A threshold for the adsl2PMLCurr15MSes counter, when adsl2PMLCurrUnit is atur(2). The value 0 means that no threshold is specified for the associated counter.')
adsl2LineAlarmConfProfileAturThresh15MinLoss = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 3, 2, 1, 10), HCPerfIntervalThreshold()).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LineAlarmConfProfileAturThresh15MinLoss.setReference('ITU-T G.997.1, paragraph 7.3.1')
if mibBuilder.loadTexts: adsl2LineAlarmConfProfileAturThresh15MinLoss.setStatus('current')
if mibBuilder.loadTexts: adsl2LineAlarmConfProfileAturThresh15MinLoss.setDescription('A threshold for the adsl2PMLCurr15MLoss counter, when adsl2PMLCurrUnit is atur(2). The value 0 means that no threshold is specified for the associated counter.')
adsl2LineAlarmConfProfileAturThresh15MinUas = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 3, 2, 1, 11), HCPerfIntervalThreshold()).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LineAlarmConfProfileAturThresh15MinUas.setReference('ITU-T G.997.1, paragraph 7.3.1')
if mibBuilder.loadTexts: adsl2LineAlarmConfProfileAturThresh15MinUas.setStatus('current')
if mibBuilder.loadTexts: adsl2LineAlarmConfProfileAturThresh15MinUas.setDescription('A threshold for the adsl2PMLCurr15MUas counter, when adsl2PMLCurrUnit is atur(2). The value 0 means that no threshold is specified for the associated counter.')
adsl2LineAlarmConfProfileThresh15MinFailedFullInt = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 3, 2, 1, 12), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LineAlarmConfProfileThresh15MinFailedFullInt.setReference('ITU-T G.997.1, paragraph 7.3.1')
if mibBuilder.loadTexts: adsl2LineAlarmConfProfileThresh15MinFailedFullInt.setStatus('current')
if mibBuilder.loadTexts: adsl2LineAlarmConfProfileThresh15MinFailedFullInt.setDescription('A threshold for the adsl2PMLCurrInit15MfailedFullInits counter. The value 0 means that no threshold is specified for the associated counter.')
adsl2LineAlarmConfProfileThresh15MinFailedShrtInt = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 3, 2, 1, 13), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LineAlarmConfProfileThresh15MinFailedShrtInt.setReference('ITU-T G.997.1, paragraph 7.3.1')
if mibBuilder.loadTexts: adsl2LineAlarmConfProfileThresh15MinFailedShrtInt.setStatus('current')
if mibBuilder.loadTexts: adsl2LineAlarmConfProfileThresh15MinFailedShrtInt.setDescription('A threshold for the adsl2PMLCurrInit15MFailedShortInits counter. The value 0 means that no threshold is specified for the associated counter.')
adsl2LineAlarmConfProfileRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 3, 2, 1, 14), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LineAlarmConfProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: adsl2LineAlarmConfProfileRowStatus.setDescription("This object is used to create a new row or to modify or delete an existing row in this table. A profile is activated by setting this object to 'active'. When 'active' is set, the system will validate the profile. Before a profile can be deleted or taken out of service (by setting this object to 'destroy' or 'notInService'), it must first be unreferenced from all associated templates.")
adsl2ChAlarmConfProfileTable = MibTable((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 3, 3), )
if mibBuilder.loadTexts: adsl2ChAlarmConfProfileTable.setStatus('current')
if mibBuilder.loadTexts: adsl2ChAlarmConfProfileTable.setDescription('The table adsl2ChAlarmConfProfileTable contains ADSL2 channel PM thresholds profiles. Entries in this table MUST be maintained in a persistent manner.')
adsl2ChAlarmConfProfileEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 3, 3, 1), ).setIndexNames((0, "ADSL2-LINE-MIB", "adsl2ChAlarmConfProfileName"))
if mibBuilder.loadTexts: adsl2ChAlarmConfProfileEntry.setStatus('current')
if mibBuilder.loadTexts: adsl2ChAlarmConfProfileEntry.setDescription("The table adsl2ChAlarmConfProfileTable contains ADSL2 channel PM thresholds profiles. A default profile with an index of 'DEFVAL' will always exist, and its parameters will be set to vendor- specific values, unless otherwise specified in this document.")
adsl2ChAlarmConfProfileName = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 3, 3, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: adsl2ChAlarmConfProfileName.setStatus('current')
if mibBuilder.loadTexts: adsl2ChAlarmConfProfileName.setDescription('This object identifies a row in this table.')
adsl2ChAlarmConfProfileAtucThresh15MinCodingViolations = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 3, 3, 1, 2), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2ChAlarmConfProfileAtucThresh15MinCodingViolations.setReference('ITU-T G.997.1, paragraph 7.3.2')
if mibBuilder.loadTexts: adsl2ChAlarmConfProfileAtucThresh15MinCodingViolations.setStatus('current')
if mibBuilder.loadTexts: adsl2ChAlarmConfProfileAtucThresh15MinCodingViolations.setDescription('A threshold for the adsl2PMChCurr15MCodingViolations counter, when adsl2PMChCurrUnit is atuc(1). The value 0 means that no threshold is specified for the associated counter.')
adsl2ChAlarmConfProfileAtucThresh15MinCorrected = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 3, 3, 1, 3), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2ChAlarmConfProfileAtucThresh15MinCorrected.setReference('ITU-T G.997.1, paragraph 7.3.2')
if mibBuilder.loadTexts: adsl2ChAlarmConfProfileAtucThresh15MinCorrected.setStatus('current')
if mibBuilder.loadTexts: adsl2ChAlarmConfProfileAtucThresh15MinCorrected.setDescription('A threshold for the adsl2PMChCurr15MCorrectedBlocks counter, when adsl2PMChCurrUnit is atuc(1). The value 0 means that no threshold is specified for the associated counter.')
adsl2ChAlarmConfProfileAturThresh15MinCodingViolations = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 3, 3, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2ChAlarmConfProfileAturThresh15MinCodingViolations.setReference('ITU-T G.997.1, paragraph 7.3.2')
if mibBuilder.loadTexts: adsl2ChAlarmConfProfileAturThresh15MinCodingViolations.setStatus('current')
if mibBuilder.loadTexts: adsl2ChAlarmConfProfileAturThresh15MinCodingViolations.setDescription('A threshold for the adsl2PMChCurr15MCodingViolations counter, when adsl2PMChCurrUnit is atur(2). The value 0 means that no threshold is specified for the associated counter.')
adsl2ChAlarmConfProfileAturThresh15MinCorrected = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 3, 3, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2ChAlarmConfProfileAturThresh15MinCorrected.setReference('ITU-T G.997.1, paragraph 7.3.2')
if mibBuilder.loadTexts: adsl2ChAlarmConfProfileAturThresh15MinCorrected.setStatus('current')
if mibBuilder.loadTexts: adsl2ChAlarmConfProfileAturThresh15MinCorrected.setDescription('A threshold for the adsl2PMChCurr15MCorrectedBlocks counter, when adsl2PMChCurrUnit is atur(2). The value 0 means that no threshold is specified for the associated counter.')
adsl2ChAlarmConfProfileRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 3, 3, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2ChAlarmConfProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: adsl2ChAlarmConfProfileRowStatus.setDescription("This object is used to create a new row or to modify or delete an existing row in this table. A profile is activated by setting this object to 'active'. When 'active' is set, the system will validate the profile. Before a profile can be deleted or taken out of service (by setting this object to 'destroy' or 'notInService'), it must first be unreferenced from all associated templates.")
adsl2PMLineCurrTable = MibTable((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 1), )
if mibBuilder.loadTexts: adsl2PMLineCurrTable.setStatus('current')
if mibBuilder.loadTexts: adsl2PMLineCurrTable.setDescription('The table adsl2PMLineCurrTable contains current Performance Monitoring results of ADSL2 lines.')
adsl2PMLineCurrEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ADSL2-LINE-MIB", "adsl2PMLCurrUnit"))
if mibBuilder.loadTexts: adsl2PMLineCurrEntry.setStatus('current')
if mibBuilder.loadTexts: adsl2PMLineCurrEntry.setDescription('The table adsl2PMLineCurrTable contains current Performance Monitoring results of ADSL2 lines. The index of this table consists of an interface index, where the interface has an ifType of adsl2plus(238), along with a termination unit. The PM counters in the table are not reset even when the XTU is reinitialized. They are reinitialized only when the agent itself is reset or reinitialized.')
adsl2PMLCurrUnit = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 1, 1, 1), Adsl2Unit())
if mibBuilder.loadTexts: adsl2PMLCurrUnit.setStatus('current')
if mibBuilder.loadTexts: adsl2PMLCurrUnit.setDescription('The termination unit atuc(1) or atur(2).')
adsl2PMLCurrValidIntervals = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMLCurrValidIntervals.setStatus('current')
if mibBuilder.loadTexts: adsl2PMLCurrValidIntervals.setDescription('Valid intervals.')
adsl2PMLCurrInvalidIntervals = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMLCurrInvalidIntervals.setStatus('current')
if mibBuilder.loadTexts: adsl2PMLCurrInvalidIntervals.setDescription('Invalid intervals.')
adsl2PMLCurr15MTimeElapsed = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 1, 1, 4), HCPerfTimeElapsed()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMLCurr15MTimeElapsed.setStatus('current')
if mibBuilder.loadTexts: adsl2PMLCurr15MTimeElapsed.setDescription('Total elapsed seconds since this PM interval began. Note that the PM counters are not reset even when the XTU is reinitialized. They are reinitialized only when the agent itself is reset or reinitialized.')
adsl2PMLCurr15MFecs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 1, 1, 5), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMLCurr15MFecs.setReference('ITU-T G.997.1, paragraph 7.2.1')
if mibBuilder.loadTexts: adsl2PMLCurr15MFecs.setStatus('current')
if mibBuilder.loadTexts: adsl2PMLCurr15MFecs.setDescription('Count of seconds during this interval where there was at least one FEC correction event for one or more bearer channels in this line. This parameter is inhibited during UAS or SES.')
adsl2PMLCurr15MEs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 1, 1, 6), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMLCurr15MEs.setReference('ITU-T G.997.1, paragraph 7.2.1')
if mibBuilder.loadTexts: adsl2PMLCurr15MEs.setStatus('current')
if mibBuilder.loadTexts: adsl2PMLCurr15MEs.setDescription('Count of seconds during this interval where there was: ATU-C: CRC-8 >= 1 for one or more bearer channels OR LOS >= 1 OR SEF >=1 OR LPR >= 1 ATU-R: FEBE >= 1 for one or more bearer channels OR LOS-FE >=1 OR RDI >=1 OR LPR-FE >=1 . This parameter is inhibited during UAS.')
adsl2PMLCurr15MSes = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 1, 1, 7), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMLCurr15MSes.setReference('ITU-T G.997.1, paragraph 7.2.1')
if mibBuilder.loadTexts: adsl2PMLCurr15MSes.setStatus('current')
if mibBuilder.loadTexts: adsl2PMLCurr15MSes.setDescription('Count of seconds during this interval where there was: ATU-C: (CRC-8 summed over all bearer channels) >= 18 OR LOS >= 1 OR SEF >= 1 OR LPR >= 1 ATU-R: (FEBE summed over all bearer channels) >= 18 OR LOS-FE >= 1 OR RDI >= 1 OR LPR-FE >= 1 . This parameter is inhibited during UAS.')
adsl2PMLCurr15MLoss = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 1, 1, 8), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMLCurr15MLoss.setReference('ITU-T G.997.1, paragraph 7.2.1')
if mibBuilder.loadTexts: adsl2PMLCurr15MLoss.setStatus('current')
if mibBuilder.loadTexts: adsl2PMLCurr15MLoss.setDescription('Count of seconds during this interval where there was LOS (or LOS-FE for ATU-R).')
adsl2PMLCurr15MUas = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 1, 1, 9), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMLCurr15MUas.setReference('ITU-T G.997.1, paragraph 7.2.1')
if mibBuilder.loadTexts: adsl2PMLCurr15MUas.setStatus('current')
if mibBuilder.loadTexts: adsl2PMLCurr15MUas.setDescription('Count of seconds in Unavailability State during this interval. Unavailability begins at the onset of 10 contiguous severely-errored seconds, and ends at the onset of 10 contiguous seconds with no severely-errored seconds.')
adsl2PMLCurr1DayValidIntervals = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMLCurr1DayValidIntervals.setStatus('current')
if mibBuilder.loadTexts: adsl2PMLCurr1DayValidIntervals.setDescription('Valid intervals.')
adsl2PMLCurr1DayInvalidIntervals = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 1, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMLCurr1DayInvalidIntervals.setStatus('current')
if mibBuilder.loadTexts: adsl2PMLCurr1DayInvalidIntervals.setDescription('Invalid intervals.')
adsl2PMLCurr1DayTimeElapsed = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 1, 1, 12), HCPerfTimeElapsed()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMLCurr1DayTimeElapsed.setStatus('current')
if mibBuilder.loadTexts: adsl2PMLCurr1DayTimeElapsed.setDescription('Total elapsed seconds since this PM interval began. Note that the PM counters are not reset even when the XTU is reinitialized. They are reinitialized only when the agent itself is reset or reinitialized.')
adsl2PMLCurr1DayFecs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 1, 1, 13), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMLCurr1DayFecs.setReference('ITU-T G.997.1, paragraph 7.2.1')
if mibBuilder.loadTexts: adsl2PMLCurr1DayFecs.setStatus('current')
if mibBuilder.loadTexts: adsl2PMLCurr1DayFecs.setDescription('Count of seconds during this interval where there was at least one FEC correction event for one or more bearer channels in this line. This parameter is inhibited during UAS or SES.')
adsl2PMLCurr1DayEs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 1, 1, 14), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMLCurr1DayEs.setReference('ITU-T G.997.1, paragraph 7.2.1')
if mibBuilder.loadTexts: adsl2PMLCurr1DayEs.setStatus('current')
if mibBuilder.loadTexts: adsl2PMLCurr1DayEs.setDescription('Count of seconds during this interval where there was: ATU-C: CRC-8 >= 1 for one or more bearer channels OR LOS >= 1 OR SEF >= 1 OR LPR >= 1 ATU-R: FEBE >= 1 for one or more bearer channels OR LOS-FE >= 1 OR RDI >= 1 OR LPR-FE >= 1. This parameter is inhibited during UAS.')
adsl2PMLCurr1DaySes = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 1, 1, 15), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMLCurr1DaySes.setReference('ITU-T G.997.1, paragraph 7.2.1')
if mibBuilder.loadTexts: adsl2PMLCurr1DaySes.setStatus('current')
if mibBuilder.loadTexts: adsl2PMLCurr1DaySes.setDescription('Count of seconds during this interval where there was: ATU-C: (CRC-8 summed over all bearer channels) >= 18 OR LOS >= 1 OR SEF >= 1 OR LPR >= 1 ATU-R: (FEBE summed over all bearer channels) >= 18 OR LOS-FE >= 1 OR RDI >= 1 OR LPR-FE >= 1 This parameter is inhibited during UAS.')
adsl2PMLCurr1DayLoss = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 1, 1, 16), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMLCurr1DayLoss.setReference('ITU-T G.997.1, paragraph 7.2.1')
if mibBuilder.loadTexts: adsl2PMLCurr1DayLoss.setStatus('current')
if mibBuilder.loadTexts: adsl2PMLCurr1DayLoss.setDescription('Count of seconds during this interval where there was LOS (or LOS-FE for ATU-R).')
adsl2PMLCurr1DayUas = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 1, 1, 17), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMLCurr1DayUas.setReference('ITU-T G.997.1, paragraph 7.2.1')
if mibBuilder.loadTexts: adsl2PMLCurr1DayUas.setStatus('current')
if mibBuilder.loadTexts: adsl2PMLCurr1DayUas.setDescription('Count of seconds in Unavailability State during this interval. Unavailability begins at the onset of 10 contiguous severely- errored seconds, and ends at the onset of 10 contiguous seconds with no severely-errored seconds.')
adsl2PMLineCurrInitTable = MibTable((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 2), )
if mibBuilder.loadTexts: adsl2PMLineCurrInitTable.setStatus('current')
if mibBuilder.loadTexts: adsl2PMLineCurrInitTable.setDescription('The table adsl2PMLineCurrInitTable contains current initialization counters of the ADSL2 line. The PM counters in the table are not reset even when the XTU is reinitialized. They are reinitialized only when the agent itself is reset or reinitialized.')
adsl2PMLineCurrInitEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: adsl2PMLineCurrInitEntry.setStatus('current')
if mibBuilder.loadTexts: adsl2PMLineCurrInitEntry.setDescription('The table adsl2PMLineCurrInitTable contains current initialization counters of the ADSL2 line. The index of this table consists of an interface index, where the interface has an ifType of adsl2plus(238), and a termination unit.')
adsl2PMLCurrInit15MTimeElapsed = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 2, 1, 1), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMLCurrInit15MTimeElapsed.setStatus('current')
if mibBuilder.loadTexts: adsl2PMLCurrInit15MTimeElapsed.setDescription('Total elapsed seconds since this PM interval began. Note that the PM counters are not reset even when the XTU is reinitialized. They are reinitialized only when the agent itself is reset or reinitialized.')
adsl2PMLCurrInit15MFullInits = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMLCurrInit15MFullInits.setReference('ITU-T G.997.1, paragraph 7.2.1')
if mibBuilder.loadTexts: adsl2PMLCurrInit15MFullInits.setStatus('current')
if mibBuilder.loadTexts: adsl2PMLCurrInit15MFullInits.setDescription('Count of full initializations attempted on the line (successful and failed) during this interval.')
adsl2PMLCurrInit15MFailedFullInits = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMLCurrInit15MFailedFullInits.setReference('ITU-T G.997.1, paragraph 7.2.1')
if mibBuilder.loadTexts: adsl2PMLCurrInit15MFailedFullInits.setStatus('current')
if mibBuilder.loadTexts: adsl2PMLCurrInit15MFailedFullInits.setDescription('Count of failed full initializations on the line during this interval.')
adsl2PMLCurrInit15MShortInits = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMLCurrInit15MShortInits.setReference('ITU-T G.997.1, paragraph 7.2.1')
if mibBuilder.loadTexts: adsl2PMLCurrInit15MShortInits.setStatus('current')
if mibBuilder.loadTexts: adsl2PMLCurrInit15MShortInits.setDescription('Count of short initializations attempted on the line (successful and failed) during this interval.')
adsl2PMLCurrInit15MFailedShortInits = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMLCurrInit15MFailedShortInits.setReference('ITU-T G.997.1, paragraph 7.2.1')
if mibBuilder.loadTexts: adsl2PMLCurrInit15MFailedShortInits.setStatus('current')
if mibBuilder.loadTexts: adsl2PMLCurrInit15MFailedShortInits.setDescription('Count of failed short initializations on the line during this interval.')
adsl2PMLCurrInit1DayTimeElapsed = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 2, 1, 6), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMLCurrInit1DayTimeElapsed.setStatus('current')
if mibBuilder.loadTexts: adsl2PMLCurrInit1DayTimeElapsed.setDescription('Total elapsed seconds since this PM interval began. Note that the PM counters are not reset even when the XTU is reinitialized. They are reinitialized only when the agent itself is reset or reinitialized.')
adsl2PMLCurrInit1DayFullInits = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 2, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMLCurrInit1DayFullInits.setReference('ITU-T G.997.1, paragraph 7.2.1')
if mibBuilder.loadTexts: adsl2PMLCurrInit1DayFullInits.setStatus('current')
if mibBuilder.loadTexts: adsl2PMLCurrInit1DayFullInits.setDescription('Count of full initializations attempted on the line (successful and failed) during this interval.')
adsl2PMLCurrInit1DayFailedFullInits = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 2, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMLCurrInit1DayFailedFullInits.setReference('ITU-T G.997.1, paragraph 7.2.1')
if mibBuilder.loadTexts: adsl2PMLCurrInit1DayFailedFullInits.setStatus('current')
if mibBuilder.loadTexts: adsl2PMLCurrInit1DayFailedFullInits.setDescription('Count of failed full initializations on the line during this interval.')
adsl2PMLCurrInit1DayShortInits = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 2, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMLCurrInit1DayShortInits.setReference('ITU-T G.997.1, paragraph 7.2.1')
if mibBuilder.loadTexts: adsl2PMLCurrInit1DayShortInits.setStatus('current')
if mibBuilder.loadTexts: adsl2PMLCurrInit1DayShortInits.setDescription('Count of short initializations attempted on the line (successful and failed) during this interval.')
adsl2PMLCurrInit1DayFailedShortInits = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 2, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMLCurrInit1DayFailedShortInits.setReference('ITU-T G.997.1, paragraph 7.2.1')
if mibBuilder.loadTexts: adsl2PMLCurrInit1DayFailedShortInits.setStatus('current')
if mibBuilder.loadTexts: adsl2PMLCurrInit1DayFailedShortInits.setDescription('Count of failed short initializations on the line during this interval.')
adsl2PMLineHist15MinTable = MibTable((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 3), )
if mibBuilder.loadTexts: adsl2PMLineHist15MinTable.setStatus('current')
if mibBuilder.loadTexts: adsl2PMLineHist15MinTable.setDescription('The table adsl2PMLineHist15MinTable contains PM line history for 15min intervals of the ADSL2 line.')
adsl2PMLineHist15MinEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ADSL2-LINE-MIB", "adsl2PMLHist15MUnit"), (0, "ADSL2-LINE-MIB", "adsl2PMLHist15MInterval"))
if mibBuilder.loadTexts: adsl2PMLineHist15MinEntry.setStatus('current')
if mibBuilder.loadTexts: adsl2PMLineHist15MinEntry.setDescription('The table adsl2PMLineHist15MinTable contains PM line history for 15min intervals of the ADSL2 line. The index of this table consists of an interface index, where the interface has an ifType of adsl2plus(238), along with a termination unit, and an interval number.')
adsl2PMLHist15MUnit = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 3, 1, 1), Adsl2Unit())
if mibBuilder.loadTexts: adsl2PMLHist15MUnit.setStatus('current')
if mibBuilder.loadTexts: adsl2PMLHist15MUnit.setDescription('The termination unit atuc(1) or atur(2).')
adsl2PMLHist15MInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 3, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: adsl2PMLHist15MInterval.setStatus('current')
if mibBuilder.loadTexts: adsl2PMLHist15MInterval.setDescription('The interval number.')
adsl2PMLHist15MMonitoredTime = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 3, 1, 3), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMLHist15MMonitoredTime.setStatus('current')
if mibBuilder.loadTexts: adsl2PMLHist15MMonitoredTime.setDescription('Total seconds monitored in this interval.')
adsl2PMLHist15MFecs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 3, 1, 4), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMLHist15MFecs.setReference('ITU-T G.997.1, paragraph 7.2.1')
if mibBuilder.loadTexts: adsl2PMLHist15MFecs.setStatus('current')
if mibBuilder.loadTexts: adsl2PMLHist15MFecs.setDescription('Count of seconds during this interval where there was at least one FEC correction event for one or more bearer channels in this line. This parameter is inhibited during UAS or SES.')
adsl2PMLHist15MEs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 3, 1, 5), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMLHist15MEs.setReference('ITU-T G.997.1, paragraph 7.2.1')
if mibBuilder.loadTexts: adsl2PMLHist15MEs.setStatus('current')
if mibBuilder.loadTexts: adsl2PMLHist15MEs.setDescription('Count of seconds during this interval where there was: ATU-C: CRC-8 >= 1 for one or more bearer channels OR LOS >= 1 OR SEF >= 1 OR LPR >= 1 ATU-R: FEBE >= 1 for one or more bearer channels OR LOS-FE >= 1 OR RDI >= 1 OR LPR-FE >= 1. This parameter is inhibited during UAS.')
adsl2PMLHist15MSes = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 3, 1, 6), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMLHist15MSes.setReference('ITU-T G.997.1, paragraph 7.2.1')
if mibBuilder.loadTexts: adsl2PMLHist15MSes.setStatus('current')
if mibBuilder.loadTexts: adsl2PMLHist15MSes.setDescription('Count of seconds during this interval where there was: ATU-C: (CRC-8 summed over all bearer channels) >= 18 OR LOS >= 1 OR SEF >= 1 OR LPR >= 1 ATU-R: (FEBE summed over all bearer channels) >= 18 OR LOS-FE >= 1 OR RDI >= 1 OR LPR-FE >= 1. This parameter is inhibited during UAS.')
adsl2PMLHist15MLoss = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 3, 1, 7), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMLHist15MLoss.setReference('ITU-T G.997.1, paragraph 7.2.1')
if mibBuilder.loadTexts: adsl2PMLHist15MLoss.setStatus('current')
if mibBuilder.loadTexts: adsl2PMLHist15MLoss.setDescription('Count of seconds during this interval where there was LOS (or LOS-FE for ATU-R).')
adsl2PMLHist15MUas = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 3, 1, 8), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMLHist15MUas.setReference('ITU-T G.997.1, paragraph 7.2.1')
if mibBuilder.loadTexts: adsl2PMLHist15MUas.setStatus('current')
if mibBuilder.loadTexts: adsl2PMLHist15MUas.setDescription('Count of seconds in Unavailability State during this interval. Unavailability begins at the onset of 10 contiguous severely- errored seconds, and ends at the onset of 10 contiguous seconds with no severely-errored seconds.')
adsl2PMLHist15MValidInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 3, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMLHist15MValidInterval.setStatus('current')
if mibBuilder.loadTexts: adsl2PMLHist15MValidInterval.setDescription('This variable indicates if the data for this interval is valid.')
adsl2PMLineHist1DayTable = MibTable((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 4), )
if mibBuilder.loadTexts: adsl2PMLineHist1DayTable.setStatus('current')
if mibBuilder.loadTexts: adsl2PMLineHist1DayTable.setDescription('The table adsl2PMLineHist1DayTable contains PM line history for 24-hour intervals of the ADSL2 line.')
adsl2PMLineHist1DayEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ADSL2-LINE-MIB", "adsl2PMLHist1DUnit"), (0, "ADSL2-LINE-MIB", "adsl2PMLHist1DInterval"))
if mibBuilder.loadTexts: adsl2PMLineHist1DayEntry.setStatus('current')
if mibBuilder.loadTexts: adsl2PMLineHist1DayEntry.setDescription('The table adsl2PMLineHist1DayTable contains PM line history for 24-hour intervals of the ADSL2 line. The index of this table consists of an interface index, where the interface has an ifType of adsl2plus(238), along with a termination unit, and an interval number.')
adsl2PMLHist1DUnit = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 4, 1, 1), Adsl2Unit())
if mibBuilder.loadTexts: adsl2PMLHist1DUnit.setStatus('current')
if mibBuilder.loadTexts: adsl2PMLHist1DUnit.setDescription('The termination unit.')
adsl2PMLHist1DInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 4, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 30)))
if mibBuilder.loadTexts: adsl2PMLHist1DInterval.setStatus('current')
if mibBuilder.loadTexts: adsl2PMLHist1DInterval.setDescription('The interval number.')
adsl2PMLHist1DMonitoredTime = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 4, 1, 3), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMLHist1DMonitoredTime.setStatus('current')
if mibBuilder.loadTexts: adsl2PMLHist1DMonitoredTime.setDescription('Total seconds monitored in this interval.')
adsl2PMLHist1DFecs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 4, 1, 4), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMLHist1DFecs.setReference('ITU-T G.997.1, paragraph 7.2.1')
if mibBuilder.loadTexts: adsl2PMLHist1DFecs.setStatus('current')
if mibBuilder.loadTexts: adsl2PMLHist1DFecs.setDescription('Count of seconds during this interval where there was at least one FEC correction event for one or more bearer channels in this line. This parameter is inhibited during UAS or SES.')
adsl2PMLHist1DEs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 4, 1, 5), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMLHist1DEs.setReference('ITU-T G.997.1, paragraph 7.2.1')
if mibBuilder.loadTexts: adsl2PMLHist1DEs.setStatus('current')
if mibBuilder.loadTexts: adsl2PMLHist1DEs.setDescription('Count of seconds during this interval where there was: ATU-C: CRC-8 >= 1 for one or more bearer channels OR LOS >= 1 OR SEF >= 1 OR LPR >= 1 ATU-R: FEBE >= 1 for one or more bearer channels OR LOS-FE >= 1 OR RDI >= 1 OR LPR-FE >= 1. This parameter is inhibited during UAS.')
adsl2PMLHist1DSes = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 4, 1, 6), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMLHist1DSes.setReference('ITU-T G.997.1, paragraph 7.2.1')
if mibBuilder.loadTexts: adsl2PMLHist1DSes.setStatus('current')
if mibBuilder.loadTexts: adsl2PMLHist1DSes.setDescription('Count of seconds during this interval where there was: ATU-C: (CRC-8 summed over all bearer channels) >= 18 OR LOS >= 1 OR SEF >> 1 OR LPR >= 1 ATU-R: (FEBE summed over all bearer channels) >= 18 OR LOS-FE >= 1 OR RDI >= 1 OR LPR-FE >= 1. This parameter is inhibited during UAS.')
adsl2PMLHist1DLoss = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 4, 1, 7), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMLHist1DLoss.setReference('ITU-T G.997.1, paragraph 7.2.1')
if mibBuilder.loadTexts: adsl2PMLHist1DLoss.setStatus('current')
if mibBuilder.loadTexts: adsl2PMLHist1DLoss.setDescription('Count of seconds during this interval where there was LOS (or LOS-FE for ATU-R).')
adsl2PMLHist1DUas = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 4, 1, 8), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMLHist1DUas.setReference('ITU-T G.997.1, paragraph 7.2.1')
if mibBuilder.loadTexts: adsl2PMLHist1DUas.setStatus('current')
if mibBuilder.loadTexts: adsl2PMLHist1DUas.setDescription('Count of seconds in Unavailability State during this interval. Unavailability begins at the onset of 10 contiguous severely- errored seconds, and ends at the onset of 10 contiguous seconds with no severely-errored seconds.')
adsl2PMLHist1DValidInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 4, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMLHist1DValidInterval.setStatus('current')
if mibBuilder.loadTexts: adsl2PMLHist1DValidInterval.setDescription('This variable indicates if the data for this interval is valid.')
adsl2PMLineInitHist15MinTable = MibTable((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 5), )
if mibBuilder.loadTexts: adsl2PMLineInitHist15MinTable.setStatus('current')
if mibBuilder.loadTexts: adsl2PMLineInitHist15MinTable.setDescription('The table adsl2PMLineInitHist15MinTable contains PM line initialization history for 15-minute intervals of the ADSL2 line.')
adsl2PMLineInitHist15MinEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ADSL2-LINE-MIB", "adsl2PMLHistInit15MInterval"))
if mibBuilder.loadTexts: adsl2PMLineInitHist15MinEntry.setStatus('current')
if mibBuilder.loadTexts: adsl2PMLineInitHist15MinEntry.setDescription('The table adsl2PMLineInitHist15MinTable contains PM line initialization history for 15 minutes intervals of the ADSL2 line. The index of this table consists of an interface index, where the interface has an ifType of adsl2plus(238), and an interval number.')
adsl2PMLHistInit15MInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 5, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: adsl2PMLHistInit15MInterval.setStatus('current')
if mibBuilder.loadTexts: adsl2PMLHistInit15MInterval.setDescription('The interval number.')
adsl2PMLHistInit15MMonitoredTime = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 5, 1, 2), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMLHistInit15MMonitoredTime.setStatus('current')
if mibBuilder.loadTexts: adsl2PMLHistInit15MMonitoredTime.setDescription('Total seconds monitored in this interval.')
adsl2PMLHistInit15MFullInits = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 5, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMLHistInit15MFullInits.setReference('ITU-T G.997.1, paragraph 7.2.1')
if mibBuilder.loadTexts: adsl2PMLHistInit15MFullInits.setStatus('current')
if mibBuilder.loadTexts: adsl2PMLHistInit15MFullInits.setDescription('Count of full initializations attempted on the line (successful and failed) during this interval.')
adsl2PMLHistInit15MFailedFullInits = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 5, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMLHistInit15MFailedFullInits.setReference('ITU-T G.997.1, paragraph 7.2.1')
if mibBuilder.loadTexts: adsl2PMLHistInit15MFailedFullInits.setStatus('current')
if mibBuilder.loadTexts: adsl2PMLHistInit15MFailedFullInits.setDescription('Count of failed full initializations on the line during this interval.')
adsl2PMLHistInit15MShortInits = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 5, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMLHistInit15MShortInits.setReference('ITU-T G.997.1, paragraph 7.2.1')
if mibBuilder.loadTexts: adsl2PMLHistInit15MShortInits.setStatus('current')
if mibBuilder.loadTexts: adsl2PMLHistInit15MShortInits.setDescription('Count of short initializations attempted on the line (successful and failed) during this interval.')
adsl2PMLHistInit15MFailedShortInits = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 5, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMLHistInit15MFailedShortInits.setReference('ITU-T G.997.1, paragraph 7.2.1')
if mibBuilder.loadTexts: adsl2PMLHistInit15MFailedShortInits.setStatus('current')
if mibBuilder.loadTexts: adsl2PMLHistInit15MFailedShortInits.setDescription('Count of failed short initializations on the line during this interval.')
adsl2PMLHistInit15MValidInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 5, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMLHistInit15MValidInterval.setStatus('current')
if mibBuilder.loadTexts: adsl2PMLHistInit15MValidInterval.setDescription('This variable indicates if the data for this interval is valid.')
adsl2PMLineInitHist1DayTable = MibTable((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 6), )
if mibBuilder.loadTexts: adsl2PMLineInitHist1DayTable.setStatus('current')
if mibBuilder.loadTexts: adsl2PMLineInitHist1DayTable.setDescription('The table adsl2PMLineInitHist1DayTable contains PM line initialization history for 24-hour intervals of the ADSL2 line.')
adsl2PMLineInitHist1DayEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ADSL2-LINE-MIB", "adsl2PMLHistinit1DInterval"))
if mibBuilder.loadTexts: adsl2PMLineInitHist1DayEntry.setStatus('current')
if mibBuilder.loadTexts: adsl2PMLineInitHist1DayEntry.setDescription('The table adsl2PMLineInitHist1DayTable contains PM line initialization history for 24-hour intervals of the ADSL2 line. The index of this table consists of an interface index, where the interface has an ifType of adsl2plus(238), and an interval number.')
adsl2PMLHistinit1DInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 6, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 30)))
if mibBuilder.loadTexts: adsl2PMLHistinit1DInterval.setStatus('current')
if mibBuilder.loadTexts: adsl2PMLHistinit1DInterval.setDescription('The interval number.')
adsl2PMLHistinit1DMonitoredTime = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 6, 1, 2), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMLHistinit1DMonitoredTime.setStatus('current')
if mibBuilder.loadTexts: adsl2PMLHistinit1DMonitoredTime.setDescription('Total seconds monitored in this interval.')
adsl2PMLHistinit1DFullInits = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 6, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMLHistinit1DFullInits.setReference('ITU-T G.997.1, paragraph 7.2.1')
if mibBuilder.loadTexts: adsl2PMLHistinit1DFullInits.setStatus('current')
if mibBuilder.loadTexts: adsl2PMLHistinit1DFullInits.setDescription('Count of full initializations attempted on the line (successful and failed) during this interval.')
adsl2PMLHistinit1DFailedFullInits = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 6, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMLHistinit1DFailedFullInits.setReference('ITU-T G.997.1, paragraph 7.2.1')
if mibBuilder.loadTexts: adsl2PMLHistinit1DFailedFullInits.setStatus('current')
if mibBuilder.loadTexts: adsl2PMLHistinit1DFailedFullInits.setDescription('Count of failed full initializations on the line during this interval.')
adsl2PMLHistinit1DShortInits = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 6, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMLHistinit1DShortInits.setReference('ITU-T G.997.1, paragraph 7.2.1')
if mibBuilder.loadTexts: adsl2PMLHistinit1DShortInits.setStatus('current')
if mibBuilder.loadTexts: adsl2PMLHistinit1DShortInits.setDescription('Count of short initializations attempted on the line (successful and failed) during this interval.')
adsl2PMLHistinit1DFailedShortInits = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 6, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMLHistinit1DFailedShortInits.setReference('ITU-T G.997.1, paragraph 7.2.1')
if mibBuilder.loadTexts: adsl2PMLHistinit1DFailedShortInits.setStatus('current')
if mibBuilder.loadTexts: adsl2PMLHistinit1DFailedShortInits.setDescription('Count of failed short initializations on the line during this interval.')
adsl2PMLHistinit1DValidInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 6, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMLHistinit1DValidInterval.setStatus('current')
if mibBuilder.loadTexts: adsl2PMLHistinit1DValidInterval.setDescription('This variable indicates if the data for this interval is valid.')
adsl2PMChCurrTable = MibTable((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 2, 1), )
if mibBuilder.loadTexts: adsl2PMChCurrTable.setStatus('current')
if mibBuilder.loadTexts: adsl2PMChCurrTable.setDescription('The table adsl2PMChCurrTable contains current Performance Monitoring results of the ADSL2 channel. The PM counters in the table are not reset even when the XTU is reinitialized. They are reinitialized only when the agent itself is reset or reinitialized.')
adsl2PMChCurrEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ADSL2-LINE-MIB", "adsl2PMChCurrUnit"))
if mibBuilder.loadTexts: adsl2PMChCurrEntry.setStatus('current')
if mibBuilder.loadTexts: adsl2PMChCurrEntry.setDescription('The table adsl2PMChCurrTable contains current Performance Monitoring results of the ADSL2 channel. The index of this table consists of an interface index, where the interface has an ifType value that is applicable for a DSL channel, along with a termination unit.')
adsl2PMChCurrUnit = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 2, 1, 1, 1), Adsl2Unit())
if mibBuilder.loadTexts: adsl2PMChCurrUnit.setStatus('current')
if mibBuilder.loadTexts: adsl2PMChCurrUnit.setDescription('The termination unit.')
adsl2PMChCurrValidIntervals = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 2, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMChCurrValidIntervals.setStatus('current')
if mibBuilder.loadTexts: adsl2PMChCurrValidIntervals.setDescription('Valid intervals.')
adsl2PMChCurrInvalidIntervals = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 2, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMChCurrInvalidIntervals.setStatus('current')
if mibBuilder.loadTexts: adsl2PMChCurrInvalidIntervals.setDescription('Invalid intervals.')
adsl2PMChCurr15MTimeElapsed = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 2, 1, 1, 4), HCPerfTimeElapsed()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMChCurr15MTimeElapsed.setStatus('current')
if mibBuilder.loadTexts: adsl2PMChCurr15MTimeElapsed.setDescription('Total elapsed seconds since this PM interval began. Note that the PM counters are not reset even when the XTU is reinitialized. They are reinitialized only when the agent itself is reset or reinitialized.')
adsl2PMChCurr15MCodingViolations = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 2, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMChCurr15MCodingViolations.setReference('ITU-T G.997.1, paragraph 7.2.2')
if mibBuilder.loadTexts: adsl2PMChCurr15MCodingViolations.setStatus('current')
if mibBuilder.loadTexts: adsl2PMChCurr15MCodingViolations.setDescription('Count of CRC-8 (FEBE for ATU-R) anomalies occurring in the channel during the interval. This parameter is inhibited during UAS or SES. If the CRC is applied over multiple channels, then each related CRC-8 (or FEBE) anomaly should increment each of the counters related to the individual channels.')
adsl2PMChCurr15MCorrectedBlocks = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 2, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMChCurr15MCorrectedBlocks.setReference('ITU-T G.997.1, paragraph 7.2.2')
if mibBuilder.loadTexts: adsl2PMChCurr15MCorrectedBlocks.setStatus('current')
if mibBuilder.loadTexts: adsl2PMChCurr15MCorrectedBlocks.setDescription('Count of FEC (FFEC for ATU-R) anomalies (corrected code words) occurring in the channel during the interval. This parameter is inhibited during UAS or SES. If the FEC is applied over multiple channels, then each related FEC (or FFEC) anomaly should increment each of the counters related to the individual channels.')
adsl2PMChCurr1DayValidIntervals = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 2, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMChCurr1DayValidIntervals.setStatus('current')
if mibBuilder.loadTexts: adsl2PMChCurr1DayValidIntervals.setDescription('Valid intervals.')
adsl2PMChCurr1DayInvalidIntervals = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 2, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMChCurr1DayInvalidIntervals.setStatus('current')
if mibBuilder.loadTexts: adsl2PMChCurr1DayInvalidIntervals.setDescription('Invalid intervals.')
adsl2PMChCurr1DayTimeElapsed = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 2, 1, 1, 9), HCPerfTimeElapsed()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMChCurr1DayTimeElapsed.setStatus('current')
if mibBuilder.loadTexts: adsl2PMChCurr1DayTimeElapsed.setDescription('Total elapsed seconds since this PM interval began. Note that the PM counters are not reset even when the XTU is reinitialized. They are reinitialized only when the agent itself is reset or reinitialized.')
adsl2PMChCurr1DayCodingViolations = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 2, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMChCurr1DayCodingViolations.setReference('ITU-T G.997.1, paragraph 7.2.2')
if mibBuilder.loadTexts: adsl2PMChCurr1DayCodingViolations.setStatus('current')
if mibBuilder.loadTexts: adsl2PMChCurr1DayCodingViolations.setDescription('Count of CRC-8 (FEBE for ATU-R) anomalies occurring in the channel during the interval. This parameter is inhibited during UAS or SES. If the CRC is applied over multiple channels, then each related CRC-8 (or FEBE) anomaly should increment each of the counters related to the individual channels.')
adsl2PMChCurr1DayCorrectedBlocks = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 2, 1, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMChCurr1DayCorrectedBlocks.setReference('ITU-T G.997.1, paragraph 7.2.2')
if mibBuilder.loadTexts: adsl2PMChCurr1DayCorrectedBlocks.setStatus('current')
if mibBuilder.loadTexts: adsl2PMChCurr1DayCorrectedBlocks.setDescription('Count of FEC (FFEC for ATU-R) anomalies (corrected code words) occurring in the channel during the interval. This parameter is inhibited during UAS or SES. If the FEC is applied over multiple channels, then each related FEC (or FFEC) anomaly should increment each of the counters related to the individual channels.')
adsl2PMChHist15MinTable = MibTable((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 2, 2), )
if mibBuilder.loadTexts: adsl2PMChHist15MinTable.setStatus('current')
if mibBuilder.loadTexts: adsl2PMChHist15MinTable.setDescription('The table adsl2PMChCurrTable contains current Performance Monitoring results of the ADSL2 channel.')
adsl2PMChHist15MinEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ADSL2-LINE-MIB", "adsl2PMChHist15MUnit"), (0, "ADSL2-LINE-MIB", "adsl2PMChHist15MInterval"))
if mibBuilder.loadTexts: adsl2PMChHist15MinEntry.setStatus('current')
if mibBuilder.loadTexts: adsl2PMChHist15MinEntry.setDescription('The table adsl2PMChCurrTable contains current Performance Monitoring results of the ADSL2 channel. The index of this table consists of an interface index, where the interface has an ifType value that is applicable for a DSL channel, along with a termination unit, and the interval number.')
adsl2PMChHist15MUnit = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 2, 2, 1, 1), Adsl2Unit())
if mibBuilder.loadTexts: adsl2PMChHist15MUnit.setStatus('current')
if mibBuilder.loadTexts: adsl2PMChHist15MUnit.setDescription('The termination unit.')
adsl2PMChHist15MInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 2, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: adsl2PMChHist15MInterval.setStatus('current')
if mibBuilder.loadTexts: adsl2PMChHist15MInterval.setDescription('The interval number.')
adsl2PMChHist15MMonitoredTime = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 2, 2, 1, 3), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMChHist15MMonitoredTime.setStatus('current')
if mibBuilder.loadTexts: adsl2PMChHist15MMonitoredTime.setDescription('Total seconds monitored in this interval.')
adsl2PMChHist15MCodingViolations = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 2, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMChHist15MCodingViolations.setReference('ITU-T G.997.1, paragraph 7.2.2')
if mibBuilder.loadTexts: adsl2PMChHist15MCodingViolations.setStatus('current')
if mibBuilder.loadTexts: adsl2PMChHist15MCodingViolations.setDescription('Count of CRC-8 (FEBE for ATU-R) anomalies occurring in the channel during the interval. This parameter is inhibited during UAS or SES. If the CRC is applied over multiple channels, then each related CRC-8 (or FEBE) anomaly should increment each of the counters related to the individual channels.')
adsl2PMChHist15MCorrectedBlocks = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 2, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMChHist15MCorrectedBlocks.setReference('ITU-T G.997.1, paragraph 7.2.2')
if mibBuilder.loadTexts: adsl2PMChHist15MCorrectedBlocks.setStatus('current')
if mibBuilder.loadTexts: adsl2PMChHist15MCorrectedBlocks.setDescription('Count of FEC (FFEC for ATU-R) anomalies (corrected code words) occurring in the channel during the interval. This parameter is inhibited during UAS or SES. If the FEC is applied over multiple channels, then each related FEC (or FFEC) anomaly should increment each of the counters related to the individual channels.')
adsl2PMChHist15MValidInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 2, 2, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMChHist15MValidInterval.setStatus('current')
if mibBuilder.loadTexts: adsl2PMChHist15MValidInterval.setDescription('This variable indicates if the data for this interval is valid.')
adsl2PMChHist1DTable = MibTable((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 2, 3), )
if mibBuilder.loadTexts: adsl2PMChHist1DTable.setStatus('current')
if mibBuilder.loadTexts: adsl2PMChHist1DTable.setDescription('The table adsl2PMChHist1DayTable contains PM channel history for 1-day intervals of ADSL2.')
adsl2PMChHist1DEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 2, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ADSL2-LINE-MIB", "adsl2PMChHist1DUnit"), (0, "ADSL2-LINE-MIB", "adsl2PMChHist1DInterval"))
if mibBuilder.loadTexts: adsl2PMChHist1DEntry.setStatus('current')
if mibBuilder.loadTexts: adsl2PMChHist1DEntry.setDescription('The table adsl2PMChHist1DayTable contains PM channel history for 1-day intervals of ADSL2. The index of this table consists of an interface index, where the interface has an ifType value that is applicable for a DSL channel, along with a termination unit, and the interval number.')
adsl2PMChHist1DUnit = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 2, 3, 1, 1), Adsl2Unit())
if mibBuilder.loadTexts: adsl2PMChHist1DUnit.setStatus('current')
if mibBuilder.loadTexts: adsl2PMChHist1DUnit.setDescription('The termination unit.')
adsl2PMChHist1DInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 2, 3, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 30)))
if mibBuilder.loadTexts: adsl2PMChHist1DInterval.setStatus('current')
if mibBuilder.loadTexts: adsl2PMChHist1DInterval.setDescription('The interval number.')
adsl2PMChHist1DMonitoredTime = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 2, 3, 1, 3), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMChHist1DMonitoredTime.setStatus('current')
if mibBuilder.loadTexts: adsl2PMChHist1DMonitoredTime.setDescription('Total seconds monitored in this interval.')
adsl2PMChHist1DCodingViolations = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 2, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMChHist1DCodingViolations.setReference('ITU-T G.997.1, paragraph 7.2.2')
if mibBuilder.loadTexts: adsl2PMChHist1DCodingViolations.setStatus('current')
if mibBuilder.loadTexts: adsl2PMChHist1DCodingViolations.setDescription('Count of CRC-8 (FEBE for ATU-R) anomalies occurring in the channel during the interval. This parameter is inhibited during UAS or SES. If the CRC is applied over multiple channels, then each related CRC-8 (or FEBE) anomaly should increment each of the counters related to the individual channels.')
adsl2PMChHist1DCorrectedBlocks = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 2, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMChHist1DCorrectedBlocks.setReference('ITU-T G.997.1, paragraph 7.2.2')
if mibBuilder.loadTexts: adsl2PMChHist1DCorrectedBlocks.setStatus('current')
if mibBuilder.loadTexts: adsl2PMChHist1DCorrectedBlocks.setDescription('Count of FEC (FFEC for ATU-R) anomalies (corrected code words) occurring in the channel during the interval. This parameter is inhibited during UAS or SES. If the FEC is applied over multiple channels, then each related FEC (or FFEC) anomaly should increment each of the counters related to the individual channels.')
adsl2PMChHist1DValidInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 2, 3, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMChHist1DValidInterval.setStatus('current')
if mibBuilder.loadTexts: adsl2PMChHist1DValidInterval.setDescription('This variable indicates if the data for this interval is valid.')
adsl2LinePerfFECSThreshAtuc = NotificationType((1, 3, 6, 1, 2, 1, 10, 238, 1, 0, 1)).setObjects(("ADSL2-LINE-MIB", "adsl2PMLCurr15MFecs"), ("ADSL2-LINE-MIB", "adsl2LineAlarmConfProfileAtucThresh15MinFecs"))
if mibBuilder.loadTexts: adsl2LinePerfFECSThreshAtuc.setStatus('current')
if mibBuilder.loadTexts: adsl2LinePerfFECSThreshAtuc.setDescription('This notification indicates that the FEC seconds threshold has been reached/exceeded for the referred ATU-C.')
adsl2LinePerfFECSThreshAtur = NotificationType((1, 3, 6, 1, 2, 1, 10, 238, 1, 0, 2)).setObjects(("ADSL2-LINE-MIB", "adsl2PMLCurr15MFecs"), ("ADSL2-LINE-MIB", "adsl2LineAlarmConfProfileAturThresh15MinFecs"))
if mibBuilder.loadTexts: adsl2LinePerfFECSThreshAtur.setStatus('current')
if mibBuilder.loadTexts: adsl2LinePerfFECSThreshAtur.setDescription('This notification indicates that the FEC seconds threshold has been reached/exceeded for the referred ATU-R.')
adsl2LinePerfESThreshAtuc = NotificationType((1, 3, 6, 1, 2, 1, 10, 238, 1, 0, 3)).setObjects(("ADSL2-LINE-MIB", "adsl2PMLCurr15MEs"), ("ADSL2-LINE-MIB", "adsl2LineAlarmConfProfileAtucThresh15MinEs"))
if mibBuilder.loadTexts: adsl2LinePerfESThreshAtuc.setStatus('current')
if mibBuilder.loadTexts: adsl2LinePerfESThreshAtuc.setDescription('This notification indicates that the errored seconds threshold has been reached/exceeded for the referred ATU-C.')
adsl2LinePerfESThreshAtur = NotificationType((1, 3, 6, 1, 2, 1, 10, 238, 1, 0, 4)).setObjects(("ADSL2-LINE-MIB", "adsl2PMLCurr15MEs"), ("ADSL2-LINE-MIB", "adsl2LineAlarmConfProfileAturThresh15MinEs"))
if mibBuilder.loadTexts: adsl2LinePerfESThreshAtur.setStatus('current')
if mibBuilder.loadTexts: adsl2LinePerfESThreshAtur.setDescription('This notification indicates that the errored seconds threshold has been reached/exceeded for the referred ATU-R.')
adsl2LinePerfSESThreshAtuc = NotificationType((1, 3, 6, 1, 2, 1, 10, 238, 1, 0, 5)).setObjects(("ADSL2-LINE-MIB", "adsl2PMLCurr15MSes"), ("ADSL2-LINE-MIB", "adsl2LineAlarmConfProfileAtucThresh15MinSes"))
if mibBuilder.loadTexts: adsl2LinePerfSESThreshAtuc.setStatus('current')
if mibBuilder.loadTexts: adsl2LinePerfSESThreshAtuc.setDescription('This notification indicates that the severely-errored seconds threshold has been reached/exceeded for the referred ATU-C.')
adsl2LinePerfSESThreshAtur = NotificationType((1, 3, 6, 1, 2, 1, 10, 238, 1, 0, 6)).setObjects(("ADSL2-LINE-MIB", "adsl2PMLCurr15MSes"), ("ADSL2-LINE-MIB", "adsl2LineAlarmConfProfileAturThresh15MinSes"))
if mibBuilder.loadTexts: adsl2LinePerfSESThreshAtur.setStatus('current')
if mibBuilder.loadTexts: adsl2LinePerfSESThreshAtur.setDescription('This notification indicates that the severely-errored seconds threshold has been reached/exceeded for the referred ATU-R.')
adsl2LinePerfLOSSThreshAtuc = NotificationType((1, 3, 6, 1, 2, 1, 10, 238, 1, 0, 7)).setObjects(("ADSL2-LINE-MIB", "adsl2PMLCurr15MLoss"), ("ADSL2-LINE-MIB", "adsl2LineAlarmConfProfileAtucThresh15MinLoss"))
if mibBuilder.loadTexts: adsl2LinePerfLOSSThreshAtuc.setStatus('current')
if mibBuilder.loadTexts: adsl2LinePerfLOSSThreshAtuc.setDescription('This notification indicates that the LOS seconds threshold has been reached/exceeded for the referred ATU-C.')
adsl2LinePerfLOSSThreshAtur = NotificationType((1, 3, 6, 1, 2, 1, 10, 238, 1, 0, 8)).setObjects(("ADSL2-LINE-MIB", "adsl2PMLCurr15MLoss"), ("ADSL2-LINE-MIB", "adsl2LineAlarmConfProfileAturThresh15MinLoss"))
if mibBuilder.loadTexts: adsl2LinePerfLOSSThreshAtur.setStatus('current')
if mibBuilder.loadTexts: adsl2LinePerfLOSSThreshAtur.setDescription('This notification indicates that the LOS seconds threshold has been reached/exceeded for the referred ATU-R.')
adsl2LinePerfUASThreshAtuc = NotificationType((1, 3, 6, 1, 2, 1, 10, 238, 1, 0, 9)).setObjects(("ADSL2-LINE-MIB", "adsl2PMLCurr15MUas"), ("ADSL2-LINE-MIB", "adsl2LineAlarmConfProfileAtucThresh15MinUas"))
if mibBuilder.loadTexts: adsl2LinePerfUASThreshAtuc.setStatus('current')
if mibBuilder.loadTexts: adsl2LinePerfUASThreshAtuc.setDescription('This notification indicates that the unavailable seconds threshold has been reached/exceeded for the referred ATU-C.')
adsl2LinePerfUASThreshAtur = NotificationType((1, 3, 6, 1, 2, 1, 10, 238, 1, 0, 10)).setObjects(("ADSL2-LINE-MIB", "adsl2PMLCurr15MUas"), ("ADSL2-LINE-MIB", "adsl2LineAlarmConfProfileAturThresh15MinUas"))
if mibBuilder.loadTexts: adsl2LinePerfUASThreshAtur.setStatus('current')
if mibBuilder.loadTexts: adsl2LinePerfUASThreshAtur.setDescription('This notification indicates that the unavailable seconds threshold has been reached/exceeded for the referred ATU-R.')
adsl2LinePerfCodingViolationsThreshAtuc = NotificationType((1, 3, 6, 1, 2, 1, 10, 238, 1, 0, 11)).setObjects(("ADSL2-LINE-MIB", "adsl2PMChCurr15MCodingViolations"), ("ADSL2-LINE-MIB", "adsl2ChAlarmConfProfileAtucThresh15MinCodingViolations"))
if mibBuilder.loadTexts: adsl2LinePerfCodingViolationsThreshAtuc.setStatus('current')
if mibBuilder.loadTexts: adsl2LinePerfCodingViolationsThreshAtuc.setDescription('This notification indicates that the coding violations threshold has been reached/exceeded for the referred ATU-C.')
adsl2LinePerfCodingViolationsThreshAtur = NotificationType((1, 3, 6, 1, 2, 1, 10, 238, 1, 0, 12)).setObjects(("ADSL2-LINE-MIB", "adsl2PMChCurr15MCodingViolations"), ("ADSL2-LINE-MIB", "adsl2ChAlarmConfProfileAturThresh15MinCodingViolations"))
if mibBuilder.loadTexts: adsl2LinePerfCodingViolationsThreshAtur.setStatus('current')
if mibBuilder.loadTexts: adsl2LinePerfCodingViolationsThreshAtur.setDescription('This notification indicates that the coding violations threshold has been reached/exceeded for the referred ATU-R.')
adsl2LinePerfCorrectedThreshAtuc = NotificationType((1, 3, 6, 1, 2, 1, 10, 238, 1, 0, 13)).setObjects(("ADSL2-LINE-MIB", "adsl2PMChCurr15MCorrectedBlocks"), ("ADSL2-LINE-MIB", "adsl2ChAlarmConfProfileAtucThresh15MinCorrected"))
if mibBuilder.loadTexts: adsl2LinePerfCorrectedThreshAtuc.setStatus('current')
if mibBuilder.loadTexts: adsl2LinePerfCorrectedThreshAtuc.setDescription('This notification indicates that the corrected blocks (FEC events) threshold has been reached/exceeded for the referred ATU-C.')
adsl2LinePerfCorrectedThreshAtur = NotificationType((1, 3, 6, 1, 2, 1, 10, 238, 1, 0, 14)).setObjects(("ADSL2-LINE-MIB", "adsl2PMChCurr15MCorrectedBlocks"), ("ADSL2-LINE-MIB", "adsl2ChAlarmConfProfileAturThresh15MinCorrected"))
if mibBuilder.loadTexts: adsl2LinePerfCorrectedThreshAtur.setStatus('current')
if mibBuilder.loadTexts: adsl2LinePerfCorrectedThreshAtur.setDescription('This notification indicates that the corrected blocks (FEC events) threshold has been reached/exceeded for the referred ATU-R.')
adsl2LinePerfFailedFullInitThresh = NotificationType((1, 3, 6, 1, 2, 1, 10, 238, 1, 0, 15)).setObjects(("ADSL2-LINE-MIB", "adsl2PMLCurrInit15MFailedFullInits"), ("ADSL2-LINE-MIB", "adsl2LineAlarmConfProfileThresh15MinFailedFullInt"))
if mibBuilder.loadTexts: adsl2LinePerfFailedFullInitThresh.setStatus('current')
if mibBuilder.loadTexts: adsl2LinePerfFailedFullInitThresh.setDescription('This notification indicates that the failed full initializations threshold has been reached/exceeded for the referred ADSL/ADSL2 or ADSL2+ line.')
adsl2LinePerfFailedShortInitThresh = NotificationType((1, 3, 6, 1, 2, 1, 10, 238, 1, 0, 16)).setObjects(("ADSL2-LINE-MIB", "adsl2PMLCurrInit15MFailedShortInits"), ("ADSL2-LINE-MIB", "adsl2LineAlarmConfProfileThresh15MinFailedShrtInt"))
if mibBuilder.loadTexts: adsl2LinePerfFailedShortInitThresh.setStatus('current')
if mibBuilder.loadTexts: adsl2LinePerfFailedShortInitThresh.setDescription('This notification indicates that the failed short initializations threshold has been reached/exceeded for the referred ADSL/ADSL2 or ADSL2+ line.')
adsl2LineStatusChangeAtuc = NotificationType((1, 3, 6, 1, 2, 1, 10, 238, 1, 0, 17)).setObjects(("ADSL2-LINE-MIB", "adsl2LineStatusAtuc"))
if mibBuilder.loadTexts: adsl2LineStatusChangeAtuc.setStatus('current')
if mibBuilder.loadTexts: adsl2LineStatusChangeAtuc.setDescription('This notification indicates that a status change is detected for the referred ATU-C.')
adsl2LineStatusChangeAtur = NotificationType((1, 3, 6, 1, 2, 1, 10, 238, 1, 0, 18)).setObjects(("ADSL2-LINE-MIB", "adsl2LineStatusAtur"))
if mibBuilder.loadTexts: adsl2LineStatusChangeAtur.setStatus('current')
if mibBuilder.loadTexts: adsl2LineStatusChangeAtur.setDescription('This notification indicates that a status change is detected for the referred ATU-R.')
adsl2Groups = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 238, 1, 7, 1))
adsl2Compliances = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 238, 1, 7, 2))
adsl2LineMibCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 10, 238, 1, 7, 2, 1)).setObjects(("ADSL2-LINE-MIB", "adsl2LineGroup"), ("ADSL2-LINE-MIB", "adsl2ChannelStatusGroup"), ("ADSL2-LINE-MIB", "adsl2SCStatusGroup"), ("ADSL2-LINE-MIB", "adsl2LineInventoryGroup"), ("ADSL2-LINE-MIB", "adsl2LineConfTemplateGroup"), ("ADSL2-LINE-MIB", "adsl2LineConfProfGroup"), ("ADSL2-LINE-MIB", "adsl2LineConfProfModeSpecGroup"), ("ADSL2-LINE-MIB", "adsl2ChConfProfileGroup"), ("ADSL2-LINE-MIB", "adsl2LineAlarmConfTemplateGroup"), ("ADSL2-LINE-MIB", "adsl2PMLineCurrGroup"), ("ADSL2-LINE-MIB", "adsl2PMLineCurrInitGroup"), ("ADSL2-LINE-MIB", "adsl2PMLineHist15MinGroup"), ("ADSL2-LINE-MIB", "adsl2PMLineHist1DayGroup"), ("ADSL2-LINE-MIB", "adsl2PMLineInitHist15MinGroup"), ("ADSL2-LINE-MIB", "adsl2PMLineInitHist1DayGroup"), ("ADSL2-LINE-MIB", "adsl2PMChCurrGroup"), ("ADSL2-LINE-MIB", "adsl2PMChHist15MinGroup"), ("ADSL2-LINE-MIB", "adsl2PMChHist1DGroup"), ("ADSL2-LINE-MIB", "adsl2ChannelStatusAtmGroup"), ("ADSL2-LINE-MIB", "adsl2ChannelStatusPtmGroup"), ("ADSL2-LINE-MIB", "adsl2LineConfProfRaGroup"), ("ADSL2-LINE-MIB", "adsl2LineConfProfMsgMinGroup"), ("ADSL2-LINE-MIB", "adsl2LineAlarmConfProfileGroup"), ("ADSL2-LINE-MIB", "adsl2ChAlarmConfProfileGroup"), ("ADSL2-LINE-MIB", "adsl2ChConfProfileAtmGroup"), ("ADSL2-LINE-MIB", "adsl2ChConfProfileMinResGroup"), ("ADSL2-LINE-MIB", "adsl2PMLineCurrInitShortGroup"), ("ADSL2-LINE-MIB", "adsl2PMLineInitHist15MinShortGroup"), ("ADSL2-LINE-MIB", "adsl2PMLineInitHist1DayShortGroup"), ("ADSL2-LINE-MIB", "adsl2ScalarSCGroup"), ("ADSL2-LINE-MIB", "adsl2ThreshNotificationGroup"), ("ADSL2-LINE-MIB", "adsl2StatusChangeNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adsl2LineMibCompliance = adsl2LineMibCompliance.setStatus('current')
if mibBuilder.loadTexts: adsl2LineMibCompliance.setDescription('The compliance statement for SNMP entities that manage ADSL/ADSL2 or ADSL2+ interfaces.')
adsl2LineGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 238, 1, 7, 1, 1)).setObjects(("ADSL2-LINE-MIB", "adsl2LineCnfgTemplate"), ("ADSL2-LINE-MIB", "adsl2LineAlarmCnfgTemplate"), ("ADSL2-LINE-MIB", "adsl2LineCmndConfPmsf"), ("ADSL2-LINE-MIB", "adsl2LineCmndConfLdsf"), ("ADSL2-LINE-MIB", "adsl2LineCmndConfLdsfFailReason"), ("ADSL2-LINE-MIB", "adsl2LineCmndAutomodeColdStart"), ("ADSL2-LINE-MIB", "adsl2LineStatusAtuTransSys"), ("ADSL2-LINE-MIB", "adsl2LineStatusPwrMngState"), ("ADSL2-LINE-MIB", "adsl2LineStatusInitResult"), ("ADSL2-LINE-MIB", "adsl2LineStatusLastStateDs"), ("ADSL2-LINE-MIB", "adsl2LineStatusLastStateUs"), ("ADSL2-LINE-MIB", "adsl2LineStatusAtur"), ("ADSL2-LINE-MIB", "adsl2LineStatusAtuc"), ("ADSL2-LINE-MIB", "adsl2LineStatusLnAttenDs"), ("ADSL2-LINE-MIB", "adsl2LineStatusLnAttenUs"), ("ADSL2-LINE-MIB", "adsl2LineStatusSigAttenDs"), ("ADSL2-LINE-MIB", "adsl2LineStatusSigAttenUs"), ("ADSL2-LINE-MIB", "adsl2LineStatusSnrMarginDs"), ("ADSL2-LINE-MIB", "adsl2LineStatusSnrMarginUs"), ("ADSL2-LINE-MIB", "adsl2LineStatusAttainableRateDs"), ("ADSL2-LINE-MIB", "adsl2LineStatusAttainableRateUs"), ("ADSL2-LINE-MIB", "adsl2LineStatusActPsdDs"), ("ADSL2-LINE-MIB", "adsl2LineStatusActPsdUs"), ("ADSL2-LINE-MIB", "adsl2LineStatusActAtpDs"), ("ADSL2-LINE-MIB", "adsl2LineStatusActAtpUs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adsl2LineGroup = adsl2LineGroup.setStatus('current')
if mibBuilder.loadTexts: adsl2LineGroup.setDescription('The group of configuration, status, and commands objects on the line level.')
adsl2ChannelStatusGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 238, 1, 7, 1, 2)).setObjects(("ADSL2-LINE-MIB", "adsl2ChStatusChannelNum"), ("ADSL2-LINE-MIB", "adsl2ChStatusActDataRate"), ("ADSL2-LINE-MIB", "adsl2ChStatusPrevDataRate"), ("ADSL2-LINE-MIB", "adsl2ChStatusActDelay"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adsl2ChannelStatusGroup = adsl2ChannelStatusGroup.setStatus('current')
if mibBuilder.loadTexts: adsl2ChannelStatusGroup.setDescription('The group of status objects on the channel level.')
adsl2ChannelStatusAtmGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 238, 1, 7, 1, 3)).setObjects(("ADSL2-LINE-MIB", "adsl2ChStatusAtmStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adsl2ChannelStatusAtmGroup = adsl2ChannelStatusAtmGroup.setStatus('current')
if mibBuilder.loadTexts: adsl2ChannelStatusAtmGroup.setDescription('The group of status objects on the data path level when it is ATM.')
adsl2ChannelStatusPtmGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 238, 1, 7, 1, 4)).setObjects(("ADSL2-LINE-MIB", "adsl2ChStatusPtmStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adsl2ChannelStatusPtmGroup = adsl2ChannelStatusPtmGroup.setStatus('current')
if mibBuilder.loadTexts: adsl2ChannelStatusPtmGroup.setDescription('The group of status objects on the data path level when it is PTM.')
adsl2SCStatusGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 238, 1, 7, 1, 5)).setObjects(("ADSL2-LINE-MIB", "adsl2SCStatusMtime"), ("ADSL2-LINE-MIB", "adsl2SCStatusSnr"), ("ADSL2-LINE-MIB", "adsl2SCStatusBitsAlloc"), ("ADSL2-LINE-MIB", "adsl2SCStatusGainAlloc"), ("ADSL2-LINE-MIB", "adsl2SCStatusTssi"), ("ADSL2-LINE-MIB", "adsl2SCStatusLinScale"), ("ADSL2-LINE-MIB", "adsl2SCStatusLinReal"), ("ADSL2-LINE-MIB", "adsl2SCStatusLinImg"), ("ADSL2-LINE-MIB", "adsl2SCStatusLogMt"), ("ADSL2-LINE-MIB", "adsl2SCStatusLog"), ("ADSL2-LINE-MIB", "adsl2SCStatusQlnMt"), ("ADSL2-LINE-MIB", "adsl2SCStatusQln"), ("ADSL2-LINE-MIB", "adsl2SCStatusLnAtten"), ("ADSL2-LINE-MIB", "adsl2SCStatusSigAtten"), ("ADSL2-LINE-MIB", "adsl2SCStatusSnrMargin"), ("ADSL2-LINE-MIB", "adsl2SCStatusAttainableRate"), ("ADSL2-LINE-MIB", "adsl2SCStatusActAtp"), ("ADSL2-LINE-MIB", "adsl2SCStatusRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adsl2SCStatusGroup = adsl2SCStatusGroup.setStatus('current')
if mibBuilder.loadTexts: adsl2SCStatusGroup.setDescription('The group of status objects on the sub-carrier level. They are updated as a result of a DELT process.')
adsl2LineInventoryGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 238, 1, 7, 1, 6)).setObjects(("ADSL2-LINE-MIB", "adsl2LInvG994VendorId"), ("ADSL2-LINE-MIB", "adsl2LInvSystemVendorId"), ("ADSL2-LINE-MIB", "adsl2LInvVersionNumber"), ("ADSL2-LINE-MIB", "adsl2LInvSerialNumber"), ("ADSL2-LINE-MIB", "adsl2LInvSelfTestResult"), ("ADSL2-LINE-MIB", "adsl2LInvTransmissionCapabilities"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adsl2LineInventoryGroup = adsl2LineInventoryGroup.setStatus('current')
if mibBuilder.loadTexts: adsl2LineInventoryGroup.setDescription('The group of inventory objects per XTU.')
adsl2LineConfTemplateGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 238, 1, 7, 1, 7)).setObjects(("ADSL2-LINE-MIB", "adsl2LConfTempLineProfile"), ("ADSL2-LINE-MIB", "adsl2LConfTempChan1ConfProfile"), ("ADSL2-LINE-MIB", "adsl2LConfTempChan1RaRatioDs"), ("ADSL2-LINE-MIB", "adsl2LConfTempChan1RaRatioUs"), ("ADSL2-LINE-MIB", "adsl2LConfTempChan2ConfProfile"), ("ADSL2-LINE-MIB", "adsl2LConfTempChan2RaRatioDs"), ("ADSL2-LINE-MIB", "adsl2LConfTempChan2RaRatioUs"), ("ADSL2-LINE-MIB", "adsl2LConfTempChan3ConfProfile"), ("ADSL2-LINE-MIB", "adsl2LConfTempChan3RaRatioDs"), ("ADSL2-LINE-MIB", "adsl2LConfTempChan3RaRatioUs"), ("ADSL2-LINE-MIB", "adsl2LConfTempChan4ConfProfile"), ("ADSL2-LINE-MIB", "adsl2LConfTempChan4RaRatioDs"), ("ADSL2-LINE-MIB", "adsl2LConfTempChan4RaRatioUs"), ("ADSL2-LINE-MIB", "adsl2LConfTempRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adsl2LineConfTemplateGroup = adsl2LineConfTemplateGroup.setStatus('current')
if mibBuilder.loadTexts: adsl2LineConfTemplateGroup.setDescription('The group of objects in a line configuration template.')
adsl2LineConfProfGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 238, 1, 7, 1, 8)).setObjects(("ADSL2-LINE-MIB", "adsl2LConfProfScMaskDs"), ("ADSL2-LINE-MIB", "adsl2LConfProfScMaskUs"), ("ADSL2-LINE-MIB", "adsl2LConfProfRfiBandsDs"), ("ADSL2-LINE-MIB", "adsl2LConfProfRaModeDs"), ("ADSL2-LINE-MIB", "adsl2LConfProfRaModeUs"), ("ADSL2-LINE-MIB", "adsl2LConfProfTargetSnrmDs"), ("ADSL2-LINE-MIB", "adsl2LConfProfTargetSnrmUs"), ("ADSL2-LINE-MIB", "adsl2LConfProfMaxSnrmDs"), ("ADSL2-LINE-MIB", "adsl2LConfProfMaxSnrmUs"), ("ADSL2-LINE-MIB", "adsl2LConfProfMinSnrmDs"), ("ADSL2-LINE-MIB", "adsl2LConfProfMinSnrmUs"), ("ADSL2-LINE-MIB", "adsl2LConfProfAtuTransSysEna"), ("ADSL2-LINE-MIB", "adsl2LConfProfPmMode"), ("ADSL2-LINE-MIB", "adsl2LConfProfL0Time"), ("ADSL2-LINE-MIB", "adsl2LConfProfL2Time"), ("ADSL2-LINE-MIB", "adsl2LConfProfL2Atpr"), ("ADSL2-LINE-MIB", "adsl2LConfProfL2Atprt"), ("ADSL2-LINE-MIB", "adsl2LConfProfRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adsl2LineConfProfGroup = adsl2LineConfProfGroup.setStatus('current')
if mibBuilder.loadTexts: adsl2LineConfProfGroup.setDescription('The group of objects in a line configuration profile.')
adsl2LineConfProfRaGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 238, 1, 7, 1, 9)).setObjects(("ADSL2-LINE-MIB", "adsl2LConfProfRaUsNrmDs"), ("ADSL2-LINE-MIB", "adsl2LConfProfRaUsNrmUs"), ("ADSL2-LINE-MIB", "adsl2LConfProfRaUsTimeDs"), ("ADSL2-LINE-MIB", "adsl2LConfProfRaUsTimeUs"), ("ADSL2-LINE-MIB", "adsl2LConfProfRaDsNrmsDs"), ("ADSL2-LINE-MIB", "adsl2LConfProfRaDsNrmsUs"), ("ADSL2-LINE-MIB", "adsl2LConfProfRaDsTimeDs"), ("ADSL2-LINE-MIB", "adsl2LConfProfRaDsTimeUs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adsl2LineConfProfRaGroup = adsl2LineConfProfRaGroup.setStatus('current')
if mibBuilder.loadTexts: adsl2LineConfProfRaGroup.setDescription('The group of objects required for controlling the rate- adaptive behavior of the line.')
adsl2LineConfProfMsgMinGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 238, 1, 7, 1, 10)).setObjects(("ADSL2-LINE-MIB", "adsl2LConfProfMsgMinUs"), ("ADSL2-LINE-MIB", "adsl2LConfProfMsgMinDs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adsl2LineConfProfMsgMinGroup = adsl2LineConfProfMsgMinGroup.setStatus('current')
if mibBuilder.loadTexts: adsl2LineConfProfMsgMinGroup.setDescription('The group of objects required for controlling the rate reserved for Overhead traffic.')
adsl2LineConfProfModeSpecGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 238, 1, 7, 1, 11)).setObjects(("ADSL2-LINE-MIB", "adsl2LConfProfMaxNomPsdDs"), ("ADSL2-LINE-MIB", "adsl2LConfProfMaxNomPsdUs"), ("ADSL2-LINE-MIB", "adsl2LConfProfMaxNomAtpDs"), ("ADSL2-LINE-MIB", "adsl2LConfProfMaxNomAtpUs"), ("ADSL2-LINE-MIB", "adsl2LConfProfMaxAggRxPwrUs"), ("ADSL2-LINE-MIB", "adsl2LConfProfPsdMaskDs"), ("ADSL2-LINE-MIB", "adsl2LConfProfPsdMaskUs"), ("ADSL2-LINE-MIB", "adsl2LConfProfPsdMaskSelectUs"), ("ADSL2-LINE-MIB", "adsl2LConfProfModeSpecRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adsl2LineConfProfModeSpecGroup = adsl2LineConfProfModeSpecGroup.setStatus('current')
if mibBuilder.loadTexts: adsl2LineConfProfModeSpecGroup.setDescription('The group of objects in a line configuration profile that have an instance for each operation mode allowed.')
adsl2ChConfProfileGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 238, 1, 7, 1, 12)).setObjects(("ADSL2-LINE-MIB", "adsl2ChConfProfMinDataRateDs"), ("ADSL2-LINE-MIB", "adsl2ChConfProfMinDataRateUs"), ("ADSL2-LINE-MIB", "adsl2ChConfProfMaxDataRateDs"), ("ADSL2-LINE-MIB", "adsl2ChConfProfMaxDataRateUs"), ("ADSL2-LINE-MIB", "adsl2ChConfProfMinDataRateLowPwrDs"), ("ADSL2-LINE-MIB", "adsl2ChConfProfMaxDelayDs"), ("ADSL2-LINE-MIB", "adsl2ChConfProfMaxDelayUs"), ("ADSL2-LINE-MIB", "adsl2ChConfProfMinProtectionDs"), ("ADSL2-LINE-MIB", "adsl2ChConfProfMinProtectionUs"), ("ADSL2-LINE-MIB", "adsl2ChConfProfMaxBerDs"), ("ADSL2-LINE-MIB", "adsl2ChConfProfMaxBerUs"), ("ADSL2-LINE-MIB", "adsl2ChConfProfUsDataRateDs"), ("ADSL2-LINE-MIB", "adsl2ChConfProfDsDataRateDs"), ("ADSL2-LINE-MIB", "adsl2ChConfProfUsDataRateUs"), ("ADSL2-LINE-MIB", "adsl2ChConfProfDsDataRateUs"), ("ADSL2-LINE-MIB", "adsl2ChConfProfRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adsl2ChConfProfileGroup = adsl2ChConfProfileGroup.setStatus('current')
if mibBuilder.loadTexts: adsl2ChConfProfileGroup.setDescription('The group of objects in a channel configuration profile.')
adsl2ChConfProfileAtmGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 238, 1, 7, 1, 13)).setObjects(("ADSL2-LINE-MIB", "adsl2ChConfProfImaEnabled"), ("ADSL2-LINE-MIB", "adsl2ChStatusAtmStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adsl2ChConfProfileAtmGroup = adsl2ChConfProfileAtmGroup.setStatus('current')
if mibBuilder.loadTexts: adsl2ChConfProfileAtmGroup.setDescription('The group of configuration objects required when the data path is ATM.')
adsl2ChConfProfileMinResGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 238, 1, 7, 1, 14)).setObjects(("ADSL2-LINE-MIB", "adsl2ChConfProfMinResDataRateDs"), ("ADSL2-LINE-MIB", "adsl2ChConfProfMinResDataRateUs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adsl2ChConfProfileMinResGroup = adsl2ChConfProfileMinResGroup.setStatus('current')
if mibBuilder.loadTexts: adsl2ChConfProfileMinResGroup.setDescription('The group of configuration objects required for the reserved data rate.')
adsl2LineAlarmConfTemplateGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 238, 1, 7, 1, 15)).setObjects(("ADSL2-LINE-MIB", "adsl2LAlarmConfTempLineProfile"), ("ADSL2-LINE-MIB", "adsl2LAlarmConfTempChan1ConfProfile"), ("ADSL2-LINE-MIB", "adsl2LAlarmConfTempChan2ConfProfile"), ("ADSL2-LINE-MIB", "adsl2LAlarmConfTempChan3ConfProfile"), ("ADSL2-LINE-MIB", "adsl2LAlarmConfTempChan4ConfProfile"), ("ADSL2-LINE-MIB", "adsl2LAlarmConfTempRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adsl2LineAlarmConfTemplateGroup = adsl2LineAlarmConfTemplateGroup.setStatus('current')
if mibBuilder.loadTexts: adsl2LineAlarmConfTemplateGroup.setDescription('The group of objects in a line alarm template.')
adsl2LineAlarmConfProfileGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 238, 1, 7, 1, 16)).setObjects(("ADSL2-LINE-MIB", "adsl2LineAlarmConfProfileAtucThresh15MinFecs"), ("ADSL2-LINE-MIB", "adsl2LineAlarmConfProfileAtucThresh15MinEs"), ("ADSL2-LINE-MIB", "adsl2LineAlarmConfProfileAtucThresh15MinSes"), ("ADSL2-LINE-MIB", "adsl2LineAlarmConfProfileAtucThresh15MinLoss"), ("ADSL2-LINE-MIB", "adsl2LineAlarmConfProfileAtucThresh15MinUas"), ("ADSL2-LINE-MIB", "adsl2LineAlarmConfProfileAturThresh15MinFecs"), ("ADSL2-LINE-MIB", "adsl2LineAlarmConfProfileAturThresh15MinEs"), ("ADSL2-LINE-MIB", "adsl2LineAlarmConfProfileAturThresh15MinSes"), ("ADSL2-LINE-MIB", "adsl2LineAlarmConfProfileAturThresh15MinLoss"), ("ADSL2-LINE-MIB", "adsl2LineAlarmConfProfileAturThresh15MinUas"), ("ADSL2-LINE-MIB", "adsl2LineAlarmConfProfileThresh15MinFailedFullInt"), ("ADSL2-LINE-MIB", "adsl2LineAlarmConfProfileThresh15MinFailedShrtInt"), ("ADSL2-LINE-MIB", "adsl2LineAlarmConfProfileRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adsl2LineAlarmConfProfileGroup = adsl2LineAlarmConfProfileGroup.setStatus('current')
if mibBuilder.loadTexts: adsl2LineAlarmConfProfileGroup.setDescription('The group of objects in a line alarm profile.')
adsl2ChAlarmConfProfileGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 238, 1, 7, 1, 17)).setObjects(("ADSL2-LINE-MIB", "adsl2ChAlarmConfProfileAtucThresh15MinCodingViolations"), ("ADSL2-LINE-MIB", "adsl2ChAlarmConfProfileAtucThresh15MinCorrected"), ("ADSL2-LINE-MIB", "adsl2ChAlarmConfProfileAturThresh15MinCodingViolations"), ("ADSL2-LINE-MIB", "adsl2ChAlarmConfProfileAturThresh15MinCorrected"), ("ADSL2-LINE-MIB", "adsl2ChAlarmConfProfileRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adsl2ChAlarmConfProfileGroup = adsl2ChAlarmConfProfileGroup.setStatus('current')
if mibBuilder.loadTexts: adsl2ChAlarmConfProfileGroup.setDescription('The group of objects in a channel alarm profile.')
adsl2PMLineCurrGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 238, 1, 7, 1, 18)).setObjects(("ADSL2-LINE-MIB", "adsl2PMLCurrValidIntervals"), ("ADSL2-LINE-MIB", "adsl2PMLCurrInvalidIntervals"), ("ADSL2-LINE-MIB", "adsl2PMLCurr15MTimeElapsed"), ("ADSL2-LINE-MIB", "adsl2PMLCurr15MFecs"), ("ADSL2-LINE-MIB", "adsl2PMLCurr15MEs"), ("ADSL2-LINE-MIB", "adsl2PMLCurr15MSes"), ("ADSL2-LINE-MIB", "adsl2PMLCurr15MLoss"), ("ADSL2-LINE-MIB", "adsl2PMLCurr15MUas"), ("ADSL2-LINE-MIB", "adsl2PMLCurr1DayValidIntervals"), ("ADSL2-LINE-MIB", "adsl2PMLCurr1DayInvalidIntervals"), ("ADSL2-LINE-MIB", "adsl2PMLCurr1DayTimeElapsed"), ("ADSL2-LINE-MIB", "adsl2PMLCurr1DayFecs"), ("ADSL2-LINE-MIB", "adsl2PMLCurr1DayEs"), ("ADSL2-LINE-MIB", "adsl2PMLCurr1DaySes"), ("ADSL2-LINE-MIB", "adsl2PMLCurr1DayLoss"), ("ADSL2-LINE-MIB", "adsl2PMLCurr1DayUas"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adsl2PMLineCurrGroup = adsl2PMLineCurrGroup.setStatus('current')
if mibBuilder.loadTexts: adsl2PMLineCurrGroup.setDescription('The group of objects that report the line-level counters for current PM intervals.')
adsl2PMLineCurrInitGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 238, 1, 7, 1, 19)).setObjects(("ADSL2-LINE-MIB", "adsl2PMLCurrInit15MTimeElapsed"), ("ADSL2-LINE-MIB", "adsl2PMLCurrInit15MFullInits"), ("ADSL2-LINE-MIB", "adsl2PMLCurrInit15MFailedFullInits"), ("ADSL2-LINE-MIB", "adsl2PMLCurrInit1DayTimeElapsed"), ("ADSL2-LINE-MIB", "adsl2PMLCurrInit1DayFullInits"), ("ADSL2-LINE-MIB", "adsl2PMLCurrInit1DayFailedFullInits"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adsl2PMLineCurrInitGroup = adsl2PMLineCurrInitGroup.setStatus('current')
if mibBuilder.loadTexts: adsl2PMLineCurrInitGroup.setDescription('The group of objects that report the full initialization counters for current PM intervals.')
adsl2PMLineCurrInitShortGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 238, 1, 7, 1, 20)).setObjects(("ADSL2-LINE-MIB", "adsl2PMLCurrInit15MShortInits"), ("ADSL2-LINE-MIB", "adsl2PMLCurrInit15MFailedShortInits"), ("ADSL2-LINE-MIB", "adsl2PMLCurrInit1DayShortInits"), ("ADSL2-LINE-MIB", "adsl2PMLCurrInit1DayFailedShortInits"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adsl2PMLineCurrInitShortGroup = adsl2PMLineCurrInitShortGroup.setStatus('current')
if mibBuilder.loadTexts: adsl2PMLineCurrInitShortGroup.setDescription('The group of objects that report the short initialization counters for current PM intervals.')
adsl2PMLineHist15MinGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 238, 1, 7, 1, 21)).setObjects(("ADSL2-LINE-MIB", "adsl2PMLHist15MMonitoredTime"), ("ADSL2-LINE-MIB", "adsl2PMLHist15MFecs"), ("ADSL2-LINE-MIB", "adsl2PMLHist15MEs"), ("ADSL2-LINE-MIB", "adsl2PMLHist15MSes"), ("ADSL2-LINE-MIB", "adsl2PMLHist15MLoss"), ("ADSL2-LINE-MIB", "adsl2PMLHist15MUas"), ("ADSL2-LINE-MIB", "adsl2PMLHist15MValidInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adsl2PMLineHist15MinGroup = adsl2PMLineHist15MinGroup.setStatus('current')
if mibBuilder.loadTexts: adsl2PMLineHist15MinGroup.setDescription('The group of line-level PM counters for the previous 15-minute interval.')
adsl2PMLineHist1DayGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 238, 1, 7, 1, 22)).setObjects(("ADSL2-LINE-MIB", "adsl2PMLHist1DMonitoredTime"), ("ADSL2-LINE-MIB", "adsl2PMLHist1DFecs"), ("ADSL2-LINE-MIB", "adsl2PMLHist1DEs"), ("ADSL2-LINE-MIB", "adsl2PMLHist1DSes"), ("ADSL2-LINE-MIB", "adsl2PMLHist1DLoss"), ("ADSL2-LINE-MIB", "adsl2PMLHist1DUas"), ("ADSL2-LINE-MIB", "adsl2PMLHist1DValidInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adsl2PMLineHist1DayGroup = adsl2PMLineHist1DayGroup.setStatus('current')
if mibBuilder.loadTexts: adsl2PMLineHist1DayGroup.setDescription('The group of line-level PM counters for the previous 24-hour interval.')
adsl2PMLineInitHist15MinGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 238, 1, 7, 1, 23)).setObjects(("ADSL2-LINE-MIB", "adsl2PMLHistInit15MMonitoredTime"), ("ADSL2-LINE-MIB", "adsl2PMLHistInit15MFullInits"), ("ADSL2-LINE-MIB", "adsl2PMLHistInit15MFailedFullInits"), ("ADSL2-LINE-MIB", "adsl2PMLHistInit15MValidInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adsl2PMLineInitHist15MinGroup = adsl2PMLineInitHist15MinGroup.setStatus('current')
if mibBuilder.loadTexts: adsl2PMLineInitHist15MinGroup.setDescription("The group of PM counters for the previous 15-minute interval's full initializations.")
adsl2PMLineInitHist15MinShortGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 238, 1, 7, 1, 24)).setObjects(("ADSL2-LINE-MIB", "adsl2PMLHistInit15MShortInits"), ("ADSL2-LINE-MIB", "adsl2PMLHistInit15MFailedShortInits"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adsl2PMLineInitHist15MinShortGroup = adsl2PMLineInitHist15MinShortGroup.setStatus('current')
if mibBuilder.loadTexts: adsl2PMLineInitHist15MinShortGroup.setDescription("The group of PM counters for the previous 15-minute interval's short initializations.")
adsl2PMLineInitHist1DayGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 238, 1, 7, 1, 25)).setObjects(("ADSL2-LINE-MIB", "adsl2PMLHistinit1DMonitoredTime"), ("ADSL2-LINE-MIB", "adsl2PMLHistinit1DFullInits"), ("ADSL2-LINE-MIB", "adsl2PMLHistinit1DFailedFullInits"), ("ADSL2-LINE-MIB", "adsl2PMLHistinit1DValidInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adsl2PMLineInitHist1DayGroup = adsl2PMLineInitHist1DayGroup.setStatus('current')
if mibBuilder.loadTexts: adsl2PMLineInitHist1DayGroup.setDescription("The group of PM counters for the previous 24-hour interval's full initializations.")
adsl2PMLineInitHist1DayShortGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 238, 1, 7, 1, 26)).setObjects(("ADSL2-LINE-MIB", "adsl2PMLHistinit1DShortInits"), ("ADSL2-LINE-MIB", "adsl2PMLHistinit1DFailedShortInits"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adsl2PMLineInitHist1DayShortGroup = adsl2PMLineInitHist1DayShortGroup.setStatus('current')
if mibBuilder.loadTexts: adsl2PMLineInitHist1DayShortGroup.setDescription("The group of PM counters for the previous 24-hour interval's short initializations.")
adsl2PMChCurrGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 238, 1, 7, 1, 27)).setObjects(("ADSL2-LINE-MIB", "adsl2PMChCurrValidIntervals"), ("ADSL2-LINE-MIB", "adsl2PMChCurrInvalidIntervals"), ("ADSL2-LINE-MIB", "adsl2PMChCurr15MTimeElapsed"), ("ADSL2-LINE-MIB", "adsl2PMChCurr15MCodingViolations"), ("ADSL2-LINE-MIB", "adsl2PMChCurr15MCorrectedBlocks"), ("ADSL2-LINE-MIB", "adsl2PMChCurr1DayValidIntervals"), ("ADSL2-LINE-MIB", "adsl2PMChCurr1DayInvalidIntervals"), ("ADSL2-LINE-MIB", "adsl2PMChCurr1DayTimeElapsed"), ("ADSL2-LINE-MIB", "adsl2PMChCurr1DayCodingViolations"), ("ADSL2-LINE-MIB", "adsl2PMChCurr1DayCorrectedBlocks"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adsl2PMChCurrGroup = adsl2PMChCurrGroup.setStatus('current')
if mibBuilder.loadTexts: adsl2PMChCurrGroup.setDescription('The group of objects that report the channel-level counters for current PM intervals.')
adsl2PMChHist15MinGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 238, 1, 7, 1, 28)).setObjects(("ADSL2-LINE-MIB", "adsl2PMChHist15MMonitoredTime"), ("ADSL2-LINE-MIB", "adsl2PMChHist15MCodingViolations"), ("ADSL2-LINE-MIB", "adsl2PMChHist15MCorrectedBlocks"), ("ADSL2-LINE-MIB", "adsl2PMChHist15MValidInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adsl2PMChHist15MinGroup = adsl2PMChHist15MinGroup.setStatus('current')
if mibBuilder.loadTexts: adsl2PMChHist15MinGroup.setDescription('The group of objects that report the channel-level counters for previous 15-minute PM intervals.')
adsl2PMChHist1DGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 238, 1, 7, 1, 29)).setObjects(("ADSL2-LINE-MIB", "adsl2PMChHist1DMonitoredTime"), ("ADSL2-LINE-MIB", "adsl2PMChHist1DCodingViolations"), ("ADSL2-LINE-MIB", "adsl2PMChHist1DCorrectedBlocks"), ("ADSL2-LINE-MIB", "adsl2PMChHist1DValidInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adsl2PMChHist1DGroup = adsl2PMChHist1DGroup.setStatus('current')
if mibBuilder.loadTexts: adsl2PMChHist1DGroup.setDescription('The group of objects that report the channel-level counters for previous 24-hour PM intervals.')
adsl2ScalarSCGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 238, 1, 7, 1, 30)).setObjects(("ADSL2-LINE-MIB", "adsl2ScalarSCMaxInterfaces"), ("ADSL2-LINE-MIB", "adsl2ScalarSCAvailInterfaces"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adsl2ScalarSCGroup = adsl2ScalarSCGroup.setStatus('current')
if mibBuilder.loadTexts: adsl2ScalarSCGroup.setDescription('The group of objects that report the available memory resources for DELT processes.')
adsl2ThreshNotificationGroup = NotificationGroup((1, 3, 6, 1, 2, 1, 10, 238, 1, 7, 1, 31)).setObjects(("ADSL2-LINE-MIB", "adsl2LinePerfFECSThreshAtuc"), ("ADSL2-LINE-MIB", "adsl2LinePerfFECSThreshAtur"), ("ADSL2-LINE-MIB", "adsl2LinePerfESThreshAtuc"), ("ADSL2-LINE-MIB", "adsl2LinePerfESThreshAtur"), ("ADSL2-LINE-MIB", "adsl2LinePerfSESThreshAtuc"), ("ADSL2-LINE-MIB", "adsl2LinePerfSESThreshAtur"), ("ADSL2-LINE-MIB", "adsl2LinePerfLOSSThreshAtuc"), ("ADSL2-LINE-MIB", "adsl2LinePerfLOSSThreshAtur"), ("ADSL2-LINE-MIB", "adsl2LinePerfUASThreshAtuc"), ("ADSL2-LINE-MIB", "adsl2LinePerfUASThreshAtur"), ("ADSL2-LINE-MIB", "adsl2LinePerfCodingViolationsThreshAtuc"), ("ADSL2-LINE-MIB", "adsl2LinePerfCodingViolationsThreshAtur"), ("ADSL2-LINE-MIB", "adsl2LinePerfCorrectedThreshAtuc"), ("ADSL2-LINE-MIB", "adsl2LinePerfCorrectedThreshAtur"), ("ADSL2-LINE-MIB", "adsl2LinePerfFailedFullInitThresh"), ("ADSL2-LINE-MIB", "adsl2LinePerfFailedShortInitThresh"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adsl2ThreshNotificationGroup = adsl2ThreshNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: adsl2ThreshNotificationGroup.setDescription('This group supports notifications of significant conditions associated with ADSL/ADSL2/ADSL2+ lines.')
adsl2StatusChangeNotificationGroup = NotificationGroup((1, 3, 6, 1, 2, 1, 10, 238, 1, 7, 1, 32)).setObjects(("ADSL2-LINE-MIB", "adsl2LineStatusChangeAtuc"), ("ADSL2-LINE-MIB", "adsl2LineStatusChangeAtur"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adsl2StatusChangeNotificationGroup = adsl2StatusChangeNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: adsl2StatusChangeNotificationGroup.setDescription('This group supports notifications of threshold crossing associated with ADSL/ADSL2/ADSL2+ lines.')
mibBuilder.exportSymbols("ADSL2-LINE-MIB", adsl2SCStatusRowStatus=adsl2SCStatusRowStatus, adsl2LConfProfRaDsNrmsDs=adsl2LConfProfRaDsNrmsDs, adsl2LineAlarmConfProfileThresh15MinFailedShrtInt=adsl2LineAlarmConfProfileThresh15MinFailedShrtInt, adsl2PMLHistinit1DFailedFullInits=adsl2PMLHistinit1DFailedFullInits, adsl2PMChHist15MValidInterval=adsl2PMChHist15MValidInterval, adsl2PMChHist15MMonitoredTime=adsl2PMChHist15MMonitoredTime, adsl2SCStatusSnr=adsl2SCStatusSnr, adsl2LConfProfMaxSnrmUs=adsl2LConfProfMaxSnrmUs, adsl2ChConfProfMaxBerDs=adsl2ChConfProfMaxBerDs, adsl2PMChHist15MCorrectedBlocks=adsl2PMChHist15MCorrectedBlocks, adsl2PMLHistInit15MInterval=adsl2PMLHistInit15MInterval, adsl2PMLineInitHist1DayGroup=adsl2PMLineInitHist1DayGroup, adsl2LineConfTemplateGroup=adsl2LineConfTemplateGroup, adsl2LineCnfgTemplate=adsl2LineCnfgTemplate, adsl2LineConfProfModeSpecTable=adsl2LineConfProfModeSpecTable, adsl2LConfProfRaModeDs=adsl2LConfProfRaModeDs, adsl2LConfProfPsdMaskDs=adsl2LConfProfPsdMaskDs, adsl2PMLCurr1DayValidIntervals=adsl2PMLCurr1DayValidIntervals, adsl2PMLHist15MEs=adsl2PMLHist15MEs, adsl2PMLHistInit15MFailedFullInits=adsl2PMLHistInit15MFailedFullInits, adsl2LineGroup=adsl2LineGroup, adsl2PMLHistinit1DMonitoredTime=adsl2PMLHistinit1DMonitoredTime, adsl2PMLHist15MLoss=adsl2PMLHist15MLoss, adsl2LineConfProfModeSpecEntry=adsl2LineConfProfModeSpecEntry, adsl2PMLineInitHist1DayEntry=adsl2PMLineInitHist1DayEntry, adsl2PMLCurr15MTimeElapsed=adsl2PMLCurr15MTimeElapsed, adsl2ScalarSC=adsl2ScalarSC, adsl2LineInventoryGroup=adsl2LineInventoryGroup, adsl2PMChCurr1DayTimeElapsed=adsl2PMChCurr1DayTimeElapsed, adsl2LineStatusInitResult=adsl2LineStatusInitResult, adsl2LineStatusActPsdUs=adsl2LineStatusActPsdUs, adsl2PMLCurr15MEs=adsl2PMLCurr15MEs, adsl2LineConfTemplateEntry=adsl2LineConfTemplateEntry, adsl2PMLHist15MFecs=adsl2PMLHist15MFecs, adsl2LConfProfRaUsTimeDs=adsl2LConfProfRaUsTimeDs, adsl2=adsl2, adsl2LConfProfAtuTransSysEna=adsl2LConfProfAtuTransSysEna, adsl2ChannelStatusPtmGroup=adsl2ChannelStatusPtmGroup, adsl2LineStatusAttainableRateUs=adsl2LineStatusAttainableRateUs, adsl2PMLineHist15MinEntry=adsl2PMLineHist15MinEntry, adsl2LineConfTemplateTable=adsl2LineConfTemplateTable, adsl2LAlarmConfTempLineProfile=adsl2LAlarmConfTempLineProfile, adsl2PMLCurr1DaySes=adsl2PMLCurr1DaySes, adsl2PMChHist1DTable=adsl2PMChHist1DTable, adsl2ProfileChannel=adsl2ProfileChannel, adsl2LConfProfL0Time=adsl2LConfProfL0Time, adsl2ChAlarmConfProfileAtucThresh15MinCorrected=adsl2ChAlarmConfProfileAtucThresh15MinCorrected, adsl2PMLHist1DSes=adsl2PMLHist1DSes, adsl2LineConfProfGroup=adsl2LineConfProfGroup, adsl2PMLineHist1DayTable=adsl2PMLineHist1DayTable, adsl2ProfileLine=adsl2ProfileLine, adsl2LineInventoryTable=adsl2LineInventoryTable, adsl2LConfProfAdslMode=adsl2LConfProfAdslMode, adsl2Profile=adsl2Profile, adsl2LineStatusActAtpDs=adsl2LineStatusActAtpDs, adsl2LineStatusActPsdDs=adsl2LineStatusActPsdDs, adsl2LineStatusAtuTransSys=adsl2LineStatusAtuTransSys, adsl2ChConfProfMinProtectionUs=adsl2ChConfProfMinProtectionUs, adsl2SCStatusQln=adsl2SCStatusQln, adsl2LConfTempChan2ConfProfile=adsl2LConfTempChan2ConfProfile, adsl2PMChHist1DCodingViolations=adsl2PMChHist1DCodingViolations, adsl2PMChCurrInvalidIntervals=adsl2PMChCurrInvalidIntervals, adsl2LineAlarmConfTemplateTable=adsl2LineAlarmConfTemplateTable, adsl2LAlarmConfTempChan2ConfProfile=adsl2LAlarmConfTempChan2ConfProfile, adsl2ScalarSCAvailInterfaces=adsl2ScalarSCAvailInterfaces, adsl2ScalarSCMaxInterfaces=adsl2ScalarSCMaxInterfaces, adsl2PMChHist1DMonitoredTime=adsl2PMChHist1DMonitoredTime, adsl2LineConfProfEntry=adsl2LineConfProfEntry, adsl2SCStatusBitsAlloc=adsl2SCStatusBitsAlloc, adsl2LConfProfRaUsNrmDs=adsl2LConfProfRaUsNrmDs, adsl2ChStatusUnit=adsl2ChStatusUnit, adsl2LConfTempChan3RaRatioDs=adsl2LConfTempChan3RaRatioDs, adsl2ChConfProfileEntry=adsl2ChConfProfileEntry, adsl2PMLCurr1DayUas=adsl2PMLCurr1DayUas, adsl2LineStatusPwrMngState=adsl2LineStatusPwrMngState, adsl2PMLHistInit15MFailedShortInits=adsl2PMLHistInit15MFailedShortInits, adsl2LinePerfCorrectedThreshAtur=adsl2LinePerfCorrectedThreshAtur, adsl2LConfProfScMaskDs=adsl2LConfProfScMaskDs, adsl2LConfProfModeSpecRowStatus=adsl2LConfProfModeSpecRowStatus, adsl2LineAlarmConfProfileAturThresh15MinSes=adsl2LineAlarmConfProfileAturThresh15MinSes, adsl2LInvUnit=adsl2LInvUnit, adsl2LConfTempChan3RaRatioUs=adsl2LConfTempChan3RaRatioUs, adsl2LineAlarmCnfgTemplate=adsl2LineAlarmCnfgTemplate, adsl2LineAlarmConfProfileAtucThresh15MinUas=adsl2LineAlarmConfProfileAtucThresh15MinUas, adsl2LConfProfMsgMinDs=adsl2LConfProfMsgMinDs, adsl2LineAlarmConfProfileAtucThresh15MinEs=adsl2LineAlarmConfProfileAtucThresh15MinEs, adsl2PMChCurr15MCorrectedBlocks=adsl2PMChCurr15MCorrectedBlocks, adsl2PMLineInitHist1DayTable=adsl2PMLineInitHist1DayTable, adsl2PMLineHist15MinGroup=adsl2PMLineHist15MinGroup, adsl2SCStatusLogMt=adsl2SCStatusLogMt, adsl2LinePerfCodingViolationsThreshAtur=adsl2LinePerfCodingViolationsThreshAtur, adsl2ChConfProfMaxDataRateDs=adsl2ChConfProfMaxDataRateDs, adsl2PM=adsl2PM, adsl2PMLHistInit15MShortInits=adsl2PMLHistInit15MShortInits, adsl2LineAlarmConfProfileAtucThresh15MinSes=adsl2LineAlarmConfProfileAtucThresh15MinSes, adsl2PMLHist1DUas=adsl2PMLHist1DUas, adsl2LineAlarmConfProfileEntry=adsl2LineAlarmConfProfileEntry, adsl2ChConfProfRowStatus=adsl2ChConfProfRowStatus, adsl2SCStatusLinReal=adsl2SCStatusLinReal, adsl2PMChHist1DInterval=adsl2PMChHist1DInterval, adsl2LConfProfRfiBandsDs=adsl2LConfProfRfiBandsDs, adsl2PMLHist1DFecs=adsl2PMLHist1DFecs, adsl2PMChCurr1DayCorrectedBlocks=adsl2PMChCurr1DayCorrectedBlocks, adsl2PMChCurrGroup=adsl2PMChCurrGroup, adsl2LConfProfTargetSnrmUs=adsl2LConfProfTargetSnrmUs, adsl2ChConfProfMaxBerUs=adsl2ChConfProfMaxBerUs, adsl2LConfProfMinSnrmDs=adsl2LConfProfMinSnrmDs, adsl2ChConfProfMinProtectionDs=adsl2ChConfProfMinProtectionDs, adsl2PMLineHist1DayEntry=adsl2PMLineHist1DayEntry, adsl2PMChHist1DGroup=adsl2PMChHist1DGroup, adsl2SCStatusLog=adsl2SCStatusLog, adsl2ChConfProfDsDataRateUs=adsl2ChConfProfDsDataRateUs, adsl2PMLHist1DEs=adsl2PMLHist1DEs, adsl2LConfProfMinSnrmUs=adsl2LConfProfMinSnrmUs, adsl2PMLineCurrInitTable=adsl2PMLineCurrInitTable, adsl2SCStatusLinImg=adsl2SCStatusLinImg, adsl2LineAlarmConfProfileTable=adsl2LineAlarmConfProfileTable, adsl2LAlarmConfTempChan4ConfProfile=adsl2LAlarmConfTempChan4ConfProfile, adsl2LineCmndConfLdsfFailReason=adsl2LineCmndConfLdsfFailReason, adsl2LinePerfLOSSThreshAtur=adsl2LinePerfLOSSThreshAtur, adsl2LConfProfRaDsTimeUs=adsl2LConfProfRaDsTimeUs, adsl2SCStatusSigAtten=adsl2SCStatusSigAtten, adsl2PMLCurr1DayInvalidIntervals=adsl2PMLCurr1DayInvalidIntervals, adsl2Notifications=adsl2Notifications, adsl2PMLHist1DValidInterval=adsl2PMLHist1DValidInterval, adsl2LinePerfESThreshAtuc=adsl2LinePerfESThreshAtuc, adsl2PMLHistinit1DShortInits=adsl2PMLHistinit1DShortInits, adsl2PMChHist15MinEntry=adsl2PMChHist15MinEntry, adsl2LineStatusSigAttenUs=adsl2LineStatusSigAttenUs, adsl2LConfProfMaxNomPsdUs=adsl2LConfProfMaxNomPsdUs, adsl2PMLHist15MUas=adsl2PMLHist15MUas, adsl2PMChHist1DEntry=adsl2PMChHist1DEntry, adsl2LConfProfPsdMaskUs=adsl2LConfProfPsdMaskUs, adsl2PMLHistInit15MMonitoredTime=adsl2PMLHistInit15MMonitoredTime, adsl2LConfProfMsgMinUs=adsl2LConfProfMsgMinUs, adsl2LinePerfFailedFullInitThresh=adsl2LinePerfFailedFullInitThresh, adsl2Groups=adsl2Groups, adsl2ChConfProfMinResDataRateUs=adsl2ChConfProfMinResDataRateUs, adsl2PMLineInitHist15MinShortGroup=adsl2PMLineInitHist15MinShortGroup, adsl2SCStatusGroup=adsl2SCStatusGroup, adsl2PMChCurr15MTimeElapsed=adsl2PMChCurr15MTimeElapsed, adsl2SCStatusQlnMt=adsl2SCStatusQlnMt, adsl2PMChHist15MUnit=adsl2PMChHist15MUnit, adsl2LineStatusLastStateDs=adsl2LineStatusLastStateDs, adsl2LineAlarmConfProfileRowStatus=adsl2LineAlarmConfProfileRowStatus, adsl2LConfProfTargetSnrmDs=adsl2LConfProfTargetSnrmDs, adsl2LineMibCompliance=adsl2LineMibCompliance, adsl2PMChHist15MinTable=adsl2PMChHist15MinTable, adsl2LineStatusActAtpUs=adsl2LineStatusActAtpUs, adsl2PMLCurrInit15MFullInits=adsl2PMLCurrInit15MFullInits, adsl2PMChCurrEntry=adsl2PMChCurrEntry, adsl2PMLCurrInit1DayShortInits=adsl2PMLCurrInit1DayShortInits, adsl2LineAlarmConfProfileAtucThresh15MinFecs=adsl2LineAlarmConfProfileAtucThresh15MinFecs, adsl2LineStatusChangeAtuc=adsl2LineStatusChangeAtuc, adsl2PMLCurrInit15MFailedShortInits=adsl2PMLCurrInit15MFailedShortInits, adsl2ChConfProfMinDataRateLowPwrDs=adsl2ChConfProfMinDataRateLowPwrDs, adsl2Inventory=adsl2Inventory, adsl2PMLCurrInit1DayFullInits=adsl2PMLCurrInit1DayFullInits, adsl2ChConfProfMinDataRateUs=adsl2ChConfProfMinDataRateUs, adsl2PMLCurr1DayLoss=adsl2PMLCurr1DayLoss, adsl2LConfProfMaxNomAtpUs=adsl2LConfProfMaxNomAtpUs, adsl2PMLCurrInit15MShortInits=adsl2PMLCurrInit15MShortInits, adsl2LConfProfL2Atpr=adsl2LConfProfL2Atpr, adsl2ThreshNotificationGroup=adsl2ThreshNotificationGroup, adsl2LConfProfMaxSnrmDs=adsl2LConfProfMaxSnrmDs, adsl2PMLCurr15MSes=adsl2PMLCurr15MSes, adsl2LConfTempChan1RaRatioUs=adsl2LConfTempChan1RaRatioUs, PYSNMP_MODULE_ID=adsl2MIB, adsl2LConfTempChan1RaRatioDs=adsl2LConfTempChan1RaRatioDs, adsl2LInvSerialNumber=adsl2LInvSerialNumber, adsl2PMLCurrInvalidIntervals=adsl2PMLCurrInvalidIntervals, adsl2SCStatusLnAtten=adsl2SCStatusLnAtten, adsl2ChConfProfUsDataRateUs=adsl2ChConfProfUsDataRateUs, adsl2PMChHist15MCodingViolations=adsl2PMChHist15MCodingViolations, adsl2PMLHistinit1DInterval=adsl2PMLHistinit1DInterval, adsl2LConfProfScMaskUs=adsl2LConfProfScMaskUs, adsl2LineStatusLnAttenDs=adsl2LineStatusLnAttenDs, adsl2LineConfProfRaGroup=adsl2LineConfProfRaGroup, adsl2PMLineCurrTable=adsl2PMLineCurrTable, adsl2PMChHist1DValidInterval=adsl2PMChHist1DValidInterval, adsl2PMLCurrInit15MFailedFullInits=adsl2PMLCurrInit15MFailedFullInits, adsl2PMChHist15MinGroup=adsl2PMChHist15MinGroup, adsl2PMLHist15MMonitoredTime=adsl2PMLHist15MMonitoredTime, adsl2LConfProfMaxNomAtpDs=adsl2LConfProfMaxNomAtpDs, adsl2PMChCurr1DayValidIntervals=adsl2PMChCurr1DayValidIntervals, adsl2LineStatusAttainableRateDs=adsl2LineStatusAttainableRateDs, adsl2LineStatusAtur=adsl2LineStatusAtur, adsl2LineAlarmConfProfileAtucThresh15MinLoss=adsl2LineAlarmConfProfileAtucThresh15MinLoss, adsl2PMLHistInit15MFullInits=adsl2PMLHistInit15MFullInits, adsl2LConfProfRaUsTimeUs=adsl2LConfProfRaUsTimeUs, adsl2LConfProfPmMode=adsl2LConfProfPmMode, adsl2ChAlarmConfProfileAturThresh15MinCodingViolations=adsl2ChAlarmConfProfileAturThresh15MinCodingViolations, adsl2LinePerfCodingViolationsThreshAtuc=adsl2LinePerfCodingViolationsThreshAtuc, adsl2ChStatusActDataRate=adsl2ChStatusActDataRate, adsl2ChConfProfImaEnabled=adsl2ChConfProfImaEnabled, adsl2ChConfProfileAtmGroup=adsl2ChConfProfileAtmGroup, adsl2LAlarmConfTempRowStatus=adsl2LAlarmConfTempRowStatus, adsl2ChAlarmConfProfileRowStatus=adsl2ChAlarmConfProfileRowStatus, adsl2LineCmndConfLdsf=adsl2LineCmndConfLdsf, adsl2PMLineCurrInitShortGroup=adsl2PMLineCurrInitShortGroup, adsl2LinePerfCorrectedThreshAtuc=adsl2LinePerfCorrectedThreshAtuc, adsl2ScalarSCGroup=adsl2ScalarSCGroup, adsl2LineInventoryEntry=adsl2LineInventoryEntry, adsl2PMChHist15MInterval=adsl2PMChHist15MInterval, adsl2LConfProfRaUsNrmUs=adsl2LConfProfRaUsNrmUs, adsl2ChStatusPtmStatus=adsl2ChStatusPtmStatus, adsl2LinePerfUASThreshAtur=adsl2LinePerfUASThreshAtur, adsl2LinePerfFailedShortInitThresh=adsl2LinePerfFailedShortInitThresh, adsl2LConfTempChan4RaRatioDs=adsl2LConfTempChan4RaRatioDs, adsl2LineConfProfTable=adsl2LineConfProfTable, adsl2PMLHistinit1DFailedShortInits=adsl2PMLHistinit1DFailedShortInits, adsl2LConfTempRowStatus=adsl2LConfTempRowStatus, adsl2ChConfProfMaxDataRateUs=adsl2ChConfProfMaxDataRateUs, adsl2ChConfProfMinResDataRateDs=adsl2ChConfProfMinResDataRateDs, adsl2PMLHist15MInterval=adsl2PMLHist15MInterval, adsl2LConfTempLineProfile=adsl2LConfTempLineProfile, adsl2PMChCurrTable=adsl2PMChCurrTable, adsl2LinePerfFECSThreshAtur=adsl2LinePerfFECSThreshAtur, adsl2LConfProfProfileName=adsl2LConfProfProfileName, adsl2LinePerfLOSSThreshAtuc=adsl2LinePerfLOSSThreshAtuc, adsl2ChannelStatusTable=adsl2ChannelStatusTable, adsl2ChAlarmConfProfileGroup=adsl2ChAlarmConfProfileGroup, adsl2PMLCurrInit1DayFailedShortInits=adsl2PMLCurrInit1DayFailedShortInits, adsl2LineAlarmConfProfileGroup=adsl2LineAlarmConfProfileGroup, adsl2LineAlarmConfProfileAturThresh15MinUas=adsl2LineAlarmConfProfileAturThresh15MinUas, adsl2LConfProfRaModeUs=adsl2LConfProfRaModeUs, adsl2LConfProfRowStatus=adsl2LConfProfRowStatus, adsl2LineStatusLastStateUs=adsl2LineStatusLastStateUs, adsl2PMLCurrUnit=adsl2PMLCurrUnit, adsl2PMLHistInit15MValidInterval=adsl2PMLHistInit15MValidInterval, adsl2PMLCurr1DayEs=adsl2PMLCurr1DayEs, adsl2ChAlarmConfProfileAtucThresh15MinCodingViolations=adsl2ChAlarmConfProfileAtucThresh15MinCodingViolations, adsl2ChConfProfUsDataRateDs=adsl2ChConfProfUsDataRateDs, adsl2ChannelStatusAtmGroup=adsl2ChannelStatusAtmGroup, adsl2Conformance=adsl2Conformance, adsl2PMLineInitHist15MinTable=adsl2PMLineInitHist15MinTable, adsl2PMLCurr1DayFecs=adsl2PMLCurr1DayFecs, adsl2PMChCurr1DayCodingViolations=adsl2PMChCurr1DayCodingViolations, adsl2LConfProfMaxNomPsdDs=adsl2LConfProfMaxNomPsdDs, adsl2LineAlarmConfTemplateEntry=adsl2LineAlarmConfTemplateEntry, adsl2LineAlarmConfTemplateGroup=adsl2LineAlarmConfTemplateGroup, adsl2LineAlarmConfProfileName=adsl2LineAlarmConfProfileName, adsl2SCStatusTssi=adsl2SCStatusTssi, adsl2LAlarmConfTempChan3ConfProfile=adsl2LAlarmConfTempChan3ConfProfile, adsl2PMLHist15MValidInterval=adsl2PMLHist15MValidInterval, adsl2LineStatusChangeAtur=adsl2LineStatusChangeAtur, adsl2SCStatusSnrMargin=adsl2SCStatusSnrMargin, adsl2LineConfProfMsgMinGroup=adsl2LineConfProfMsgMinGroup, adsl2PMLineInitHist15MinGroup=adsl2PMLineInitHist15MinGroup, adsl2ProfileAlarmConf=adsl2ProfileAlarmConf, adsl2PMLCurrValidIntervals=adsl2PMLCurrValidIntervals, adsl2LConfTempChan2RaRatioUs=adsl2LConfTempChan2RaRatioUs, adsl2PMChHist1DUnit=adsl2PMChHist1DUnit, adsl2LConfProfRaDsTimeDs=adsl2LConfProfRaDsTimeDs)
mibBuilder.exportSymbols("ADSL2-LINE-MIB", adsl2LineEntry=adsl2LineEntry, adsl2LConfTempChan2RaRatioDs=adsl2LConfTempChan2RaRatioDs, adsl2LConfTempChan4ConfProfile=adsl2LConfTempChan4ConfProfile, adsl2LInvTransmissionCapabilities=adsl2LInvTransmissionCapabilities, adsl2PMLCurr1DayTimeElapsed=adsl2PMLCurr1DayTimeElapsed, adsl2LConfTempTemplateName=adsl2LConfTempTemplateName, adsl2PMChHist1DCorrectedBlocks=adsl2PMChHist1DCorrectedBlocks, adsl2PMLHist1DLoss=adsl2PMLHist1DLoss, adsl2PMLineCurrEntry=adsl2PMLineCurrEntry, adsl2ChConfProfileTable=adsl2ChConfProfileTable, adsl2LineCmndConfPmsf=adsl2LineCmndConfPmsf, adsl2ChAlarmConfProfileName=adsl2ChAlarmConfProfileName, adsl2ChStatusActDelay=adsl2ChStatusActDelay, adsl2LinePerfSESThreshAtur=adsl2LinePerfSESThreshAtur, adsl2PMChCurrValidIntervals=adsl2PMChCurrValidIntervals, adsl2LineStatusSnrMarginUs=adsl2LineStatusSnrMarginUs, adsl2LineAlarmConfProfileThresh15MinFailedFullInt=adsl2LineAlarmConfProfileThresh15MinFailedFullInt, adsl2LAlarmConfTempTemplateName=adsl2LAlarmConfTempTemplateName, adsl2LConfProfRaDsNrmsUs=adsl2LConfProfRaDsNrmsUs, adsl2LinePerfSESThreshAtuc=adsl2LinePerfSESThreshAtuc, adsl2PMLine=adsl2PMLine, adsl2SCStatusMtime=adsl2SCStatusMtime, adsl2LineStatusAtuc=adsl2LineStatusAtuc, adsl2LConfProfL2Time=adsl2LConfProfL2Time, adsl2LineAlarmConfProfileAturThresh15MinLoss=adsl2LineAlarmConfProfileAturThresh15MinLoss, adsl2LineAlarmConfProfileAturThresh15MinEs=adsl2LineAlarmConfProfileAturThresh15MinEs, adsl2LineAlarmConfProfileAturThresh15MinFecs=adsl2LineAlarmConfProfileAturThresh15MinFecs, adsl2PMLCurr15MUas=adsl2PMLCurr15MUas, adsl2PMChCurr15MCodingViolations=adsl2PMChCurr15MCodingViolations, adsl2PMChCurr1DayInvalidIntervals=adsl2PMChCurr1DayInvalidIntervals, adsl2SCStatusTable=adsl2SCStatusTable, adsl2LConfProfL2Atprt=adsl2LConfProfL2Atprt, adsl2PMChannel=adsl2PMChannel, adsl2LConfTempChan1ConfProfile=adsl2LConfTempChan1ConfProfile, adsl2LineConfProfModeSpecGroup=adsl2LineConfProfModeSpecGroup, adsl2LInvSelfTestResult=adsl2LInvSelfTestResult, adsl2LAlarmConfTempChan1ConfProfile=adsl2LAlarmConfTempChan1ConfProfile, adsl2MIB=adsl2MIB, adsl2ChAlarmConfProfileEntry=adsl2ChAlarmConfProfileEntry, adsl2ChStatusAtmStatus=adsl2ChStatusAtmStatus, adsl2ChConfProfMaxDelayUs=adsl2ChConfProfMaxDelayUs, adsl2LinePerfUASThreshAtuc=adsl2LinePerfUASThreshAtuc, adsl2PMLHistinit1DFullInits=adsl2PMLHistinit1DFullInits, adsl2ChConfProfMinDataRateDs=adsl2ChConfProfMinDataRateDs, adsl2LinePerfESThreshAtur=adsl2LinePerfESThreshAtur, adsl2LInvSystemVendorId=adsl2LInvSystemVendorId, adsl2SCStatusEntry=adsl2SCStatusEntry, adsl2SCStatusLinScale=adsl2SCStatusLinScale, adsl2Compliances=adsl2Compliances, adsl2LConfProfMaxAggRxPwrUs=adsl2LConfProfMaxAggRxPwrUs, adsl2SCStatusGainAlloc=adsl2SCStatusGainAlloc, adsl2PMLCurr15MFecs=adsl2PMLCurr15MFecs, adsl2PMLineCurrInitEntry=adsl2PMLineCurrInitEntry, adsl2LineStatusSnrMarginDs=adsl2LineStatusSnrMarginDs, adsl2LinePerfFECSThreshAtuc=adsl2LinePerfFECSThreshAtuc, adsl2PMLineCurrGroup=adsl2PMLineCurrGroup, adsl2Status=adsl2Status, adsl2LineStatusSigAttenDs=adsl2LineStatusSigAttenDs, adsl2PMChCurrUnit=adsl2PMChCurrUnit, adsl2LInvG994VendorId=adsl2LInvG994VendorId, adsl2ChannelStatusGroup=adsl2ChannelStatusGroup, adsl2PMLineHist15MinTable=adsl2PMLineHist15MinTable, adsl2LConfProfPsdMaskSelectUs=adsl2LConfProfPsdMaskSelectUs, adsl2PMLineHist1DayGroup=adsl2PMLineHist1DayGroup, adsl2LConfTempChan4RaRatioUs=adsl2LConfTempChan4RaRatioUs, adsl2PMLineCurrInitGroup=adsl2PMLineCurrInitGroup, adsl2ChannelStatusEntry=adsl2ChannelStatusEntry, adsl2PMLineInitHist15MinEntry=adsl2PMLineInitHist15MinEntry, adsl2ChConfProfProfileName=adsl2ChConfProfProfileName, adsl2PMLCurr15MLoss=adsl2PMLCurr15MLoss, adsl2SCStatusAttainableRate=adsl2SCStatusAttainableRate, adsl2ChConfProfDsDataRateDs=adsl2ChConfProfDsDataRateDs, adsl2PMLCurrInit1DayFailedFullInits=adsl2PMLCurrInit1DayFailedFullInits, adsl2PMLHist15MUnit=adsl2PMLHist15MUnit, adsl2PMLHistinit1DValidInterval=adsl2PMLHistinit1DValidInterval, adsl2SCStatusDirection=adsl2SCStatusDirection, adsl2PMLCurrInit15MTimeElapsed=adsl2PMLCurrInit15MTimeElapsed, adsl2PMLHist1DInterval=adsl2PMLHist1DInterval, adsl2PMLineInitHist1DayShortGroup=adsl2PMLineInitHist1DayShortGroup, adsl2Scalar=adsl2Scalar, adsl2Line=adsl2Line, adsl2ChConfProfileGroup=adsl2ChConfProfileGroup, adsl2ChStatusChannelNum=adsl2ChStatusChannelNum, adsl2PMLHist15MSes=adsl2PMLHist15MSes, adsl2LConfTempChan3ConfProfile=adsl2LConfTempChan3ConfProfile, adsl2ChConfProfMaxDelayDs=adsl2ChConfProfMaxDelayDs, adsl2LineTable=adsl2LineTable, adsl2PMLHist1DUnit=adsl2PMLHist1DUnit, adsl2ChAlarmConfProfileTable=adsl2ChAlarmConfProfileTable, adsl2PMLCurrInit1DayTimeElapsed=adsl2PMLCurrInit1DayTimeElapsed, adsl2ChStatusPrevDataRate=adsl2ChStatusPrevDataRate, adsl2SCStatusActAtp=adsl2SCStatusActAtp, adsl2LineStatusLnAttenUs=adsl2LineStatusLnAttenUs, adsl2ChConfProfileMinResGroup=adsl2ChConfProfileMinResGroup, adsl2LInvVersionNumber=adsl2LInvVersionNumber, adsl2StatusChangeNotificationGroup=adsl2StatusChangeNotificationGroup, adsl2PMLHist1DMonitoredTime=adsl2PMLHist1DMonitoredTime, adsl2LineCmndAutomodeColdStart=adsl2LineCmndAutomodeColdStart, adsl2ChAlarmConfProfileAturThresh15MinCorrected=adsl2ChAlarmConfProfileAturThresh15MinCorrected)
