#
# PySNMP MIB module F5-BIGIP-LOCAL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/F5-BIGIP-LOCAL-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:11:44 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
bigipGroups, bigipTrafficMgmt, bigipCompliances, LongDisplayString = mibBuilder.importSymbols("F5-BIGIP-COMMON-MIB", "bigipGroups", "bigipTrafficMgmt", "bigipCompliances", "LongDisplayString")
InetAddressType, InetAddress, InetPortNumber = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress", "InetPortNumber")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Gauge32, Counter64, Opaque, Counter32, Unsigned32, IpAddress, NotificationType, iso, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, enterprises, ObjectIdentity, ModuleIdentity, Bits, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Counter64", "Opaque", "Counter32", "Unsigned32", "IpAddress", "NotificationType", "iso", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "enterprises", "ObjectIdentity", "ModuleIdentity", "Bits", "MibIdentifier")
MacAddress, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "TextualConvention", "DisplayString")
bigipLocalTM = ModuleIdentity((1, 3, 6, 1, 4, 1, 3375, 2, 2))
if mibBuilder.loadTexts: bigipLocalTM.setLastUpdated('201508070109Z')
if mibBuilder.loadTexts: bigipLocalTM.setOrganization('F5 Networks, Inc.')
if mibBuilder.loadTexts: bigipLocalTM.setContactInfo('postal: F5 Networks, Inc. 401 Elliott Ave. West Seattle, WA 98119 phone: (206) 272-5555 email: support@f5.com')
if mibBuilder.loadTexts: bigipLocalTM.setDescription('Top-level infrastructure of the F5 enterprise MIB tree.')
ltmGlobals = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1))
ltmMirrors = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 2))
ltmNATs = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 3))
ltmNodes = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4))
ltmPools = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5))
ltmProfiles = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6))
ltmRateFilters = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 7))
ltmRules = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 8))
ltmSNATs = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9))
ltmVirtualServers = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10))
ltmRst = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 11))
ltmDNS = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12))
ltmBWC = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 13))
ltmLSNs = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14))
ltmRouteDomains = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 15))
ltmPolicies = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 16))
ltmOCSPStapling = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 17))
ltmGlobalAttr = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 1))
ltmDosAttackDataStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 2))
ltmFwAdminIpRuleStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 3))
ltmFwIpintGlobalStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 4))
ltmFwRuleStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 5))
ltmMirrorPort = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 2, 1))
ltmMirrorPortMember = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 2, 2))
ltmNat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 3, 1))
ltmNatStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 3, 2))
ltmNatVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 3, 3))
ltmNodeAddr = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 1))
ltmNodeAddrStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 2))
ltmNodeAddrStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 3))
ltmPool = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 1))
ltmPoolStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 2))
ltmPoolMember = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 3))
ltmPoolMemberStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 4))
ltmPoolStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 5))
ltmPoolMemberStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 6))
ltmAuth = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 1))
ltmClientSsl = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2))
ltmServerSsl = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3))
ltmConnPool = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 4))
ltmFastL4 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5))
ltmFtp = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 6))
ltmHttp = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7))
ltmPersist = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 8))
ltmStream = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 9))
ltmTcp = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10))
ltmUdp = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 11))
ltmFastHttp = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12))
ltmXml = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 13))
ltmDns = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14))
ltmHttpClass = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15))
ltmIiop = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 16))
ltmRtsp = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 17))
ltmSctp = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18))
ltmUserStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 19))
ltmSip = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 20))
ltmIsession = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21))
ltmHttpCompression = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22))
ltmWebAcceleration = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23))
ltmDos = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24))
ltmSpdy = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25))
ltmV6rd = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 26))
ltmPptp = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 27))
ltmPcp = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 28))
ltmAlgLog = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 29))
ltmLsnLog = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 30))
ltmAuthProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 1, 1))
ltmAuthProfileStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 1, 2))
ltmClientSslProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1))
ltmClientSslProfileStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2))
ltmClientSslCertKeyChain = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 3))
ltmServerSslProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1))
ltmServerSslProfileStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2))
ltmConnPoolProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 4, 1))
ltmConnPoolProfileStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 4, 2))
ltmFastL4Profile = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 1))
ltmFastL4ProfileStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 2))
ltmFtpProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 6, 1))
ltmFtpProfileStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 6, 2))
ltmHttpProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1))
ltmHttpProfileCompUriIncl = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 2))
ltmHttpProfileCompUriExcl = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 3))
ltmHttpProfileCompContTypeIncl = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 4))
ltmHttpProfileCompContTypeExcl = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 5))
ltmHttpProfileStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6))
ltmHttpProfileRamUriExcl = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 7))
ltmHttpProfileRamUriIncl = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 8))
ltmHttpProfileRamUriPin = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 9))
ltmHttpProfileFallbackStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 10))
ltmHttpProfileRespHeadersPerm = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 11))
ltmHttpProfileEncCookies = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 12))
ltmPersistProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 8, 1))
ltmStreamProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 9, 1))
ltmStreamProfileStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 9, 2))
ltmTcpProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1))
ltmTcpProfileStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 2))
ltmUdpProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 11, 1))
ltmUdpProfileStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 11, 2))
ltmFastHttpProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 1))
ltmFastHttpProfileStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 2))
ltmXmlProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 13, 1))
ltmXmlProfileStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 13, 2))
ltmXmlProfileXpathQueries = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 13, 3))
ltmXmlProfileNamespaceMappings = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 13, 4))
ltmHttpClassProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 1))
ltmHttpClassProfileHost = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 2))
ltmHttpClassProfileUri = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 3))
ltmHttpClassProfileHead = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 4))
ltmHttpClassProfileCook = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 5))
ltmHttpClassProfileStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6))
ltmIiopProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 16, 1))
ltmIiopProfileStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 16, 2))
ltmRtspProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 17, 1))
ltmRtspProfileStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 17, 2))
ltmSctpProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 1))
ltmSctpProfileStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 2))
ltmUserStatProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 19, 1))
ltmUserStatProfileStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 19, 2))
ltmSipProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 20, 1))
ltmSipProfileStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 20, 2))
ltmIsessionProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 1))
ltmIsessionProfileStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2))
ltmHttpCompressionProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 1))
ltmHttpCompressionProfileUriIncl = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 2))
ltmHttpCompressionProfileUriExcl = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 3))
ltmHttpCompressionProfileContTypeIncl = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 4))
ltmHttpCompressionProfileContTypeExcl = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 5))
ltmHttpCompressionProfileStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 6))
ltmWebAccelerationProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 1))
ltmWebAccelerationProfileUriExcl = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 2))
ltmWebAccelerationProfileUriIncl = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 3))
ltmWebAccelerationProfileUriPin = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 4))
ltmWebAccelerationProfileStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 5))
ltmWebAccelerationProfileUriOver = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 6))
ltmDnsProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 1))
ltmDnsProfileStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2))
ltmDosProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 1))
ltmDosApplication = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2))
ltmDosWhiteIp = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 3))
ltmDosApplicationHeavyUrlIncl = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 4))
ltmDosApplicationHeavyUrlExcl = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 5))
ltmRateFilter = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 7, 1))
ltmRateFilterStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 7, 2))
ltmRule = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 8, 1))
ltmRuleEvent = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 8, 2))
ltmRuleEventStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 8, 3))
ltmSnat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 1))
ltmSnatStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 2))
ltmSnatVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 3))
ltmSnatOrigAddr = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 4))
ltmTransAddr = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 5))
ltmTransAddrStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 6))
ltmSnatPool = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 7))
ltmSnatPoolStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 8))
ltmSnatpoolTransAddr = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 9))
ltmVirtualServ = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 1))
ltmVirtualServStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2))
ltmVirtualServAuth = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 3))
ltmVirtualServPersist = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 4))
ltmVirtualServProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 5))
ltmVirtualServPool = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 6))
ltmVirtualServClonePool = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 7))
ltmVirtualServRule = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 8))
ltmVirtualServVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 9))
ltmVirtualAddr = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 10))
ltmVirtualAddrStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 11))
ltmVirtualServHttpClass = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 12))
ltmVirtualServStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 13))
ltmVirtualAddrStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 14))
ltmVirtualModuleScore = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 15))
ltmNetworkAttackDataStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 16))
ltmFwIpintVirtualStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 17))
ltmRstCauseStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 11, 1))
ltmDnsCache = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 1))
ltmDnsCacheStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2))
ltmDnsSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 3))
ltmDnsSecurityStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 4))
ltmDnsQueryFilter = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 5))
ltmDnsHeaderFilter = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 6))
ltmDnsExpressStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 7))
ltmDnsServerStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 8))
ltmDnsCacheForwardZone = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 9))
ltmDnsCacheForwardZoneNameServer = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 10))
ltmBwcPolicyStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 13, 1))
ltmLsnPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 1))
ltmLsnPool = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 2))
ltmLsnPrefixLsnPool = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 3))
ltmLsnPrefixLsnPoolBackup = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 4))
ltmLsnPoolVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 5))
ltmLsnPoolStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 6))
ltmSpdyProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 1))
ltmSpdyProfileProtocolVersions = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 2))
ltmSpdyProfileStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3))
ltmV6rdProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 26, 1))
ltmPptpProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 27, 1))
ltmPptpProfileStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 27, 2))
ltmPcpPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 28, 1))
ltmPcpProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 28, 2))
ltmPcpPrefixProfilePcp = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 28, 3))
ltmPcpProfileStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 28, 4))
ltmFwIpintRouteDomainStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 15, 1))
ltmRouteDomainStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 15, 2))
ltmFlowEvictionPolicyStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 16, 1))
ltmFwPolicyRuleStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 16, 2))
ltmAlgLogProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 29, 1))
ltmAlgLogProfileStartControlElements = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 29, 2))
ltmAlgLogProfileEndControlElements = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 29, 3))
ltmAlgLogProfileStartDataElements = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 29, 4))
ltmAlgLogProfileEndDataElements = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 29, 5))
ltmLsnLogProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 30, 1))
ltmLsnLogProfileStartOutboundElements = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 30, 2))
ltmLsnLogProfileEndOutboundElements = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 30, 3))
ltmOcspStaplingParameters = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 17, 1))
ltmAttrLbmodeFastestMaxIdleTime = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAttrLbmodeFastestMaxIdleTime.setStatus('deprecated')
if mibBuilder.loadTexts: ltmAttrLbmodeFastestMaxIdleTime.setDescription('Deprecated! variable LBMode.FastertMaxIdleTime is purged')
ltmAttrMirrorState = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAttrMirrorState.setStatus('current')
if mibBuilder.loadTexts: ltmAttrMirrorState.setDescription('The state of mirroring in redundant systems.')
ltmAttrPersistDestAddrLimitMode = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("timeout", 0), ("maxcount", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAttrPersistDestAddrLimitMode.setStatus('current')
if mibBuilder.loadTexts: ltmAttrPersistDestAddrLimitMode.setDescription('The method of limiting destination address entries.')
ltmAttrPersistDestAddrMaxCount = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAttrPersistDestAddrMaxCount.setStatus('current')
if mibBuilder.loadTexts: ltmAttrPersistDestAddrMaxCount.setDescription('The maximum number of entries allowed for the destination address entries.')
ltmAttrSnatAnyIpProtocol = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAttrSnatAnyIpProtocol.setStatus('current')
if mibBuilder.loadTexts: ltmAttrSnatAnyIpProtocol.setDescription('The status of the feature that allows any IP traffic through SNATs.')
ltmAttrMirrorPeerIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 1, 6), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAttrMirrorPeerIpAddr.setStatus('current')
if mibBuilder.loadTexts: ltmAttrMirrorPeerIpAddr.setDescription('The IP address of the mirroring peer in redundant systems')
ltmRateFilterNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRateFilterNumber.setStatus('current')
if mibBuilder.loadTexts: ltmRateFilterNumber.setDescription('The number of ltmRateFilter entries in the table.')
ltmRateFilterTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 7, 1, 2), )
if mibBuilder.loadTexts: ltmRateFilterTable.setStatus('current')
if mibBuilder.loadTexts: ltmRateFilterTable.setDescription('A table containing information of rate filters for shaping.')
ltmRateFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 7, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmRateFilterCname"))
if mibBuilder.loadTexts: ltmRateFilterEntry.setStatus('current')
if mibBuilder.loadTexts: ltmRateFilterEntry.setDescription('Columns in the ltmRateFilter Table')
ltmRateFilterCname = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 7, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRateFilterCname.setStatus('current')
if mibBuilder.loadTexts: ltmRateFilterCname.setDescription('The rate class name specified by the user according to the same syntax allowed for rules or pool names')
ltmRateFilterRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 7, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRateFilterRate.setStatus('current')
if mibBuilder.loadTexts: ltmRateFilterRate.setDescription('The base rate. It is a number which may be postfixed with a metric of either bps, Kbps or Mbps, to indicate bits per second, Kilobits per second, or Megabits per second, respectively. Note: these numbers are powers of 10, not powers of 2. If no postfix is specified, the number is interpreted as bps. The rate specifies the maximum throughput to allot to traffic handled by the Rate Class. Packets in excess of the posted rate will be dropped.')
ltmRateFilterCeil = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 7, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRateFilterCeil.setStatus('current')
if mibBuilder.loadTexts: ltmRateFilterCeil.setDescription('The ceiling rate. It is defined like the base rate, but specifies how far beyond the base rate the traffic is allowed to flow when bursting (details on bursting below). The ceiling rate is an absolute limit - it is impossible for traffic to flow at a higher rate than the ceiling rate, even when bursting. If the ceiling rate is omitted or is equal to the base rate, the traffic may not exceed the base rate. It is illegal for the ceiling rate to be less than the base rate.')
ltmRateFilterBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 7, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRateFilterBurst.setStatus('current')
if mibBuilder.loadTexts: ltmRateFilterBurst.setDescription('The burst size. It specifies the maximum number of bytes the traffic is allowed to burst when exceeding the base rate. The burst size is measured in bytes. If omitted, a default burst size is 0.')
ltmRateFilterPname = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 7, 1, 2, 1, 5), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRateFilterPname.setStatus('current')
if mibBuilder.loadTexts: ltmRateFilterPname.setDescription('The parent rate class name. It indicates that the rate class is a child of the named parent. Any child rate class has the ability to borrow bandwidth from its parent. (Borrowing is a feature which allows a child to burst even beyond the burst size by borrowing from the burst size of a parent.) If omitted, the rate class is not a child, but may be a parent if another rate class refers to it as such.')
ltmRateFilterQtype = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 7, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("sfq", 1), ("pfifo", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRateFilterQtype.setStatus('current')
if mibBuilder.loadTexts: ltmRateFilterQtype.setDescription('The queue discipline type. none - invalid state; sfq - stochastic fair queue; pfifo - priority FIFO.')
ltmRateFilterDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 7, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("any", 0), ("client", 1), ("server", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRateFilterDirection.setStatus('current')
if mibBuilder.loadTexts: ltmRateFilterDirection.setDescription('The state of the direction which the filter shapes traffic to. any - shape to the client and server; client - only shape traffic to the client; server - only shape traffic to the server.')
ltmRateFilterStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 7, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmRateFilterStatResetStats.setStatus('current')
if mibBuilder.loadTexts: ltmRateFilterStatResetStats.setDescription('The action to reset resetable statistics data in ltmRateFilterStat. Setting this value to 1 will reset statistics data. Note, some statistics data may not be reset including data that are incremental counters.')
ltmRateFilterStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 7, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRateFilterStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmRateFilterStatNumber.setDescription('The number of ltmRateFilterStat entries in the table.')
ltmRateFilterStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 7, 2, 3), )
if mibBuilder.loadTexts: ltmRateFilterStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmRateFilterStatTable.setDescription('A table containing statistic information of rate filters for shaping.')
ltmRateFilterStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 7, 2, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmRateFilterStatCname"))
if mibBuilder.loadTexts: ltmRateFilterStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmRateFilterStatEntry.setDescription('Columns in the ltmRateFilterStat Table')
ltmRateFilterStatCname = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 7, 2, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRateFilterStatCname.setStatus('current')
if mibBuilder.loadTexts: ltmRateFilterStatCname.setDescription('The rate class name specified by the user according to the same syntax allowed for rules or pool names')
ltmRateFilterStatRateBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 7, 2, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRateFilterStatRateBytes.setStatus('current')
if mibBuilder.loadTexts: ltmRateFilterStatRateBytes.setDescription('The number of bytes at or below base rate - increments by 1 for every byte of every packet handled at or below the base rate.')
ltmRateFilterStatBurstBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 7, 2, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRateFilterStatBurstBytes.setStatus('current')
if mibBuilder.loadTexts: ltmRateFilterStatBurstBytes.setDescription('The number of bytes bursted (above base rate) - increments by 1 for every byte of every packet handled above the base rate (i.e. bursted traffic)')
ltmRateFilterStatDroppedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 7, 2, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRateFilterStatDroppedBytes.setStatus('deprecated')
if mibBuilder.loadTexts: ltmRateFilterStatDroppedBytes.setDescription('Deprecated! Replaced by ltmRateFilterStatDropTotBytes: the number of bytes dropped - increments by 1 for every byte of every packet dropped by the rate class.')
ltmRateFilterStatBytesQueued = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 7, 2, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRateFilterStatBytesQueued.setStatus('current')
if mibBuilder.loadTexts: ltmRateFilterStatBytesQueued.setDescription('The number of bytes queued.')
ltmRateFilterStatBytesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 7, 2, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRateFilterStatBytesPerSec.setStatus('current')
if mibBuilder.loadTexts: ltmRateFilterStatBytesPerSec.setDescription('The average bytes/sec over last 4 sec.')
ltmRateFilterStatDropTailPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 7, 2, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRateFilterStatDropTailPkts.setStatus('current')
if mibBuilder.loadTexts: ltmRateFilterStatDropTailPkts.setDescription('The number of packets dropped - increments by 1 for every packet dropped by the rate class as queue overflow.')
ltmRateFilterStatDropTailBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 7, 2, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRateFilterStatDropTailBytes.setStatus('current')
if mibBuilder.loadTexts: ltmRateFilterStatDropTailBytes.setDescription('The number of bytes dropped - increments by 1 for every byte of every packet dropped by the rate class as queue overflow.')
ltmRateFilterStatDropRandPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 7, 2, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRateFilterStatDropRandPkts.setStatus('current')
if mibBuilder.loadTexts: ltmRateFilterStatDropRandPkts.setDescription('The number of packets dropped - increments by 1 for every packet dropped by the rate class as RED or FRED policy.')
ltmRateFilterStatDropRandBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 7, 2, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRateFilterStatDropRandBytes.setStatus('current')
if mibBuilder.loadTexts: ltmRateFilterStatDropRandBytes.setDescription('The number of bytes dropped - increments by 1 for every byte of every packet dropped by the rate class as RED or FRED policy.')
ltmRateFilterStatDropTotPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 7, 2, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRateFilterStatDropTotPkts.setStatus('current')
if mibBuilder.loadTexts: ltmRateFilterStatDropTotPkts.setDescription('The total number of packets dropped - increments by 1 for every packet dropped by the rate class.')
ltmRateFilterStatDropTotBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 7, 2, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRateFilterStatDropTotBytes.setStatus('current')
if mibBuilder.loadTexts: ltmRateFilterStatDropTotBytes.setDescription('The total number of bytes dropped - increments by 1 for every byte of every packet dropped by the rate class.')
ltmMirrorPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMirrorPortNumber.setStatus('current')
if mibBuilder.loadTexts: ltmMirrorPortNumber.setDescription('The number of ltmMirrorPort entries in the table.')
ltmMirrorPortTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 2, 1, 2), )
if mibBuilder.loadTexts: ltmMirrorPortTable.setStatus('current')
if mibBuilder.loadTexts: ltmMirrorPortTable.setDescription('A table containing information of mirrored ports.')
ltmMirrorPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 2, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmMirrorPortName"))
if mibBuilder.loadTexts: ltmMirrorPortEntry.setStatus('current')
if mibBuilder.loadTexts: ltmMirrorPortEntry.setDescription('Columns in the ltmMirrorPort Table')
ltmMirrorPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 2, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMirrorPortName.setStatus('current')
if mibBuilder.loadTexts: ltmMirrorPortName.setDescription('The name of a port to which is mirrored.')
ltmMirrorPortMemberNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 2, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMirrorPortMemberNumber.setStatus('current')
if mibBuilder.loadTexts: ltmMirrorPortMemberNumber.setDescription('The number of ltmMirrorPortMember entries in the table.')
ltmMirrorPortMemberTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 2, 2, 2), )
if mibBuilder.loadTexts: ltmMirrorPortMemberTable.setStatus('current')
if mibBuilder.loadTexts: ltmMirrorPortMemberTable.setDescription('A table containing information of mirrored port members.')
ltmMirrorPortMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 2, 2, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmMirrorPortMemberToName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmMirrorPortMemberName"))
if mibBuilder.loadTexts: ltmMirrorPortMemberEntry.setStatus('current')
if mibBuilder.loadTexts: ltmMirrorPortMemberEntry.setDescription('Columns in the ltmMirrorPortMember Table')
ltmMirrorPortMemberToName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 2, 2, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMirrorPortMemberToName.setStatus('current')
if mibBuilder.loadTexts: ltmMirrorPortMemberToName.setDescription('The name of a port which it is mirrored to.')
ltmMirrorPortMemberName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 2, 2, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMirrorPortMemberName.setStatus('current')
if mibBuilder.loadTexts: ltmMirrorPortMemberName.setDescription('The name of a mirrored port.')
ltmMirrorPortMemberConduitName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 2, 2, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMirrorPortMemberConduitName.setStatus('current')
if mibBuilder.loadTexts: ltmMirrorPortMemberConduitName.setDescription('This attribute is used to represent a local edge port when a conduit between switch devices is necessary.')
ltmNatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmNatNumber.setDescription('The number of ltmNat entries in the table.')
ltmNatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 3, 1, 2), )
if mibBuilder.loadTexts: ltmNatTable.setStatus('current')
if mibBuilder.loadTexts: ltmNatTable.setDescription('A table containing information of NAT.')
ltmNatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 3, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmNatName"))
if mibBuilder.loadTexts: ltmNatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmNatEntry.setDescription('Columns in the ltmNat Table')
ltmNatTransAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 3, 1, 2, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNatTransAddrType.setStatus('current')
if mibBuilder.loadTexts: ltmNatTransAddrType.setDescription('The IP address type of ltmNatTransAddr')
ltmNatTransAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 3, 1, 2, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNatTransAddr.setStatus('current')
if mibBuilder.loadTexts: ltmNatTransAddr.setDescription('The NAT translation address. It is interpreted within the context of a ltmNatTransAddrType value.')
ltmNatOrigAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 3, 1, 2, 1, 3), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNatOrigAddrType.setStatus('current')
if mibBuilder.loadTexts: ltmNatOrigAddrType.setDescription('The IP address type of ltmNatOrigAddr.')
ltmNatOrigAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 3, 1, 2, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNatOrigAddr.setStatus('current')
if mibBuilder.loadTexts: ltmNatOrigAddr.setDescription('The NAT original address associated with the specified NAT translation address. It is interpreted within the context of a ltmNatOrigAddrType value.')
ltmNatEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 3, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNatEnabled.setStatus('current')
if mibBuilder.loadTexts: ltmNatEnabled.setDescription('The state indicating whether the specified NAT address is enabled or not.')
ltmNatArpEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 3, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNatArpEnabled.setStatus('current')
if mibBuilder.loadTexts: ltmNatArpEnabled.setDescription('The ARP state for the specified NAT, whether it is enabled or not.')
ltmNatUnitId = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 3, 1, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNatUnitId.setStatus('current')
if mibBuilder.loadTexts: ltmNatUnitId.setDescription('The unit number associated with the specified NAT translation address.')
ltmNatListedEnabledVlans = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 3, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNatListedEnabledVlans.setStatus('current')
if mibBuilder.loadTexts: ltmNatListedEnabledVlans.setDescription('The state indicating whether associated VLANs are NAT enabled or not. The associated VLANs are listed in ltmNatVlanTable.')
ltmNatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 3, 1, 2, 1, 9), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNatName.setStatus('current')
if mibBuilder.loadTexts: ltmNatName.setDescription('Name of the nat')
ltmNatStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 3, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmNatStatResetStats.setStatus('current')
if mibBuilder.loadTexts: ltmNatStatResetStats.setDescription('The action to reset resetable statistics data in ltmNatStat. Setting this value to 1 will reset statistics data. Note, some statistics data may not be reset including data that are incremental counters.')
ltmNatStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 3, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNatStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmNatStatNumber.setDescription('The number of ltmNatStat entries in the table.')
ltmNatStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 3, 2, 3), )
if mibBuilder.loadTexts: ltmNatStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmNatStatTable.setDescription('A table containing statistic information of NAT.')
ltmNatStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 3, 2, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmNatStatName"))
if mibBuilder.loadTexts: ltmNatStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmNatStatEntry.setDescription('Columns in the ltmNatStat Table')
ltmNatStatTransAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 3, 2, 3, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNatStatTransAddrType.setStatus('deprecated')
if mibBuilder.loadTexts: ltmNatStatTransAddrType.setDescription('Deprecated! The IP address type of ltmNatStatTransAddr')
ltmNatStatTransAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 3, 2, 3, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNatStatTransAddr.setStatus('deprecated')
if mibBuilder.loadTexts: ltmNatStatTransAddr.setDescription('Deprecated! The NAT translation address. It is interpreted within the context of a ltmNatStatTransAddrType value.')
ltmNatStatServerPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 3, 2, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNatStatServerPktsIn.setStatus('current')
if mibBuilder.loadTexts: ltmNatStatServerPktsIn.setDescription('The number of packets received from server-side.')
ltmNatStatServerBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 3, 2, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNatStatServerBytesIn.setStatus('current')
if mibBuilder.loadTexts: ltmNatStatServerBytesIn.setDescription('The number of bytes received from server-side.')
ltmNatStatServerPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 3, 2, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNatStatServerPktsOut.setStatus('current')
if mibBuilder.loadTexts: ltmNatStatServerPktsOut.setDescription('The number of packets sent to server-side.')
ltmNatStatServerBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 3, 2, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNatStatServerBytesOut.setStatus('current')
if mibBuilder.loadTexts: ltmNatStatServerBytesOut.setDescription('The number of bytes sent to server-side.')
ltmNatStatServerMaxConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 3, 2, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNatStatServerMaxConns.setStatus('current')
if mibBuilder.loadTexts: ltmNatStatServerMaxConns.setDescription('The maximum connections from server-side.')
ltmNatStatServerTotConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 3, 2, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNatStatServerTotConns.setStatus('current')
if mibBuilder.loadTexts: ltmNatStatServerTotConns.setDescription('The total connections from server-side.')
ltmNatStatServerCurConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 3, 2, 3, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNatStatServerCurConns.setStatus('current')
if mibBuilder.loadTexts: ltmNatStatServerCurConns.setDescription('The current connections from server-side.')
ltmNatStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 3, 2, 3, 1, 10), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNatStatName.setStatus('current')
if mibBuilder.loadTexts: ltmNatStatName.setDescription('Name of the nat')
ltmNatVlanNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 3, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNatVlanNumber.setStatus('current')
if mibBuilder.loadTexts: ltmNatVlanNumber.setDescription('The number of ltmNatVlan entries in the table.')
ltmNatVlanTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 3, 3, 2), )
if mibBuilder.loadTexts: ltmNatVlanTable.setStatus('current')
if mibBuilder.loadTexts: ltmNatVlanTable.setDescription('A table containing VLAN information associated with NAT.')
ltmNatVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 3, 3, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmNatVlanNatName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmNatVlanVlanName"))
if mibBuilder.loadTexts: ltmNatVlanEntry.setStatus('current')
if mibBuilder.loadTexts: ltmNatVlanEntry.setDescription('Columns in the ltmNatVlan Table')
ltmNatVlanTransAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 3, 3, 2, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNatVlanTransAddrType.setStatus('deprecated')
if mibBuilder.loadTexts: ltmNatVlanTransAddrType.setDescription('Deprecated! Use nat_name to associate vlan to NAT. The IP address type of ltmNatVlanTransAddr')
ltmNatVlanTransAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 3, 3, 2, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNatVlanTransAddr.setStatus('deprecated')
if mibBuilder.loadTexts: ltmNatVlanTransAddr.setDescription('Deprecated! Use nat_name to associate vlan to NAT. The NAT translation address. It is interpreted within the context of a ltmNatVlanTransAddrType value.')
ltmNatVlanVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 3, 3, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNatVlanVlanName.setStatus('current')
if mibBuilder.loadTexts: ltmNatVlanVlanName.setDescription('The name of a VLAN associated with the specified NAT. Only when ltmNatListedEnabledVlans is set to enable, NAT is enabled on the VLAN. ')
ltmNatVlanNatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 3, 3, 2, 1, 4), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNatVlanNatName.setStatus('current')
if mibBuilder.loadTexts: ltmNatVlanNatName.setDescription('Name of the nat')
ltmNodeAddrNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrNumber.setStatus('current')
if mibBuilder.loadTexts: ltmNodeAddrNumber.setDescription('The number of ltmNodeAddr entries in the table.')
ltmNodeAddrTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 1, 2), )
if mibBuilder.loadTexts: ltmNodeAddrTable.setStatus('current')
if mibBuilder.loadTexts: ltmNodeAddrTable.setDescription('A table containing information of node addresses.')
ltmNodeAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmNodeAddrName"))
if mibBuilder.loadTexts: ltmNodeAddrEntry.setStatus('current')
if mibBuilder.loadTexts: ltmNodeAddrEntry.setDescription('Columns in the ltmNodeAddr Table')
ltmNodeAddrAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 1, 2, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrAddrType.setStatus('current')
if mibBuilder.loadTexts: ltmNodeAddrAddrType.setDescription('The IP address type of ltmNodeAddrAddr.')
ltmNodeAddrAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 1, 2, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrAddr.setStatus('current')
if mibBuilder.loadTexts: ltmNodeAddrAddr.setDescription('The IP address of a node. It is interpreted within the context of a ltmNodeAddrAddrType value.')
ltmNodeAddrConnLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrConnLimit.setStatus('current')
if mibBuilder.loadTexts: ltmNodeAddrConnLimit.setDescription('The maximum number of connections the specified node address is allowed to have open at one time.')
ltmNodeAddrRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrRatio.setStatus('current')
if mibBuilder.loadTexts: ltmNodeAddrRatio.setDescription('The ratio of the specified node address, used in load balance algorithm.')
ltmNodeAddrDynamicRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrDynamicRatio.setStatus('current')
if mibBuilder.loadTexts: ltmNodeAddrDynamicRatio.setDescription('The dynamic ratio of the specified node address, used in load balance algorithm.')
ltmNodeAddrMonitorState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 19, 20, 22, 23, 24, 25))).clone(namedValues=NamedValues(("unchecked", 0), ("checking", 1), ("inband", 2), ("forced-up", 3), ("up", 4), ("down", 19), ("forced-down", 20), ("irule-down", 22), ("inband-down", 23), ("down-manual-resume", 24), ("disabled", 25)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmNodeAddrMonitorState.setStatus('current')
if mibBuilder.loadTexts: ltmNodeAddrMonitorState.setDescription('The internal tmm monitor state for the specified node address.')
ltmNodeAddrMonitorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 18, 19, 20, 21, 22, 23, 24))).clone(namedValues=NamedValues(("unchecked", 0), ("checking", 1), ("inband", 2), ("forced-up", 3), ("up", 4), ("addr-down", 18), ("down", 19), ("forced-down", 20), ("maint", 21), ("irule-down", 22), ("inband-down", 23), ("down-manual-resume", 24)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrMonitorStatus.setStatus('current')
if mibBuilder.loadTexts: ltmNodeAddrMonitorStatus.setDescription('The hierarchical load balance state for the specified node address, including parent status. unchecked - enabled node that is not monitored; checking - initial state until monitor reports; inband - the tmm has marked the node up; forced-up - forced up manually up - enabled node when its monitors succeed; addr-down - node address monitor fails or forced down; down - enabled node when its monitors fail; forced-down - node forced down manually; maint - in maintenance mode; irule-down - an iRule has marked the node down; inband-down - the tmm has marked the node down; down-manual-resume - the node is down and must be manually enabled; ')
ltmNodeAddrMonitorRule = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 1, 2, 1, 8), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrMonitorRule.setStatus('current')
if mibBuilder.loadTexts: ltmNodeAddrMonitorRule.setDescription('The monitor rule used for load balance the specified node address.')
ltmNodeAddrNewSessionEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("user-disabled", 1), ("user-enabled", 2), ("monitor-enabled", 3), ("monitor-disabled", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrNewSessionEnable.setStatus('deprecated')
if mibBuilder.loadTexts: ltmNodeAddrNewSessionEnable.setDescription('Deprecated! This field is not interested to user through SNMP interface. The state indicating whether a new session can be enabled or not for the specified node address.')
ltmNodeAddrSessionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("enabled", 1), ("addrdisabled", 2), ("servdisabled", 3), ("disabled", 4), ("forceddisabled", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrSessionStatus.setStatus('current')
if mibBuilder.loadTexts: ltmNodeAddrSessionStatus.setDescription('The hierarchical status of the session, including parent status, for the specified node address. enabled - new sessions enabled; addrdisabled - new sessions disabled on node address; servdisabled - new sessions disabled on node server; disabled - new sessions disabled; forceddisabled - new sessions forced to be disabled.')
ltmNodeAddrPoolMemberRefCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 1, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrPoolMemberRefCount.setStatus('deprecated')
if mibBuilder.loadTexts: ltmNodeAddrPoolMemberRefCount.setDescription('Deprecated! Node Address tracking method changed. The node address member reference count is no longer used.')
ltmNodeAddrScreenName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 1, 2, 1, 12), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrScreenName.setStatus('deprecated')
if mibBuilder.loadTexts: ltmNodeAddrScreenName.setDescription('Deprecated! This field is removed. The screen names for the specified node address.')
ltmNodeAddrAvailabilityState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("green", 1), ("yellow", 2), ("red", 3), ("blue", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrAvailabilityState.setStatus('deprecated')
if mibBuilder.loadTexts: ltmNodeAddrAvailabilityState.setDescription('Deprecated! Replaced by ltmNodeAddrStatusAvailState under ltmNodeAddrStatus. The state of the specified node address availability indicated in color.')
ltmNodeAddrEnabledState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("enabled", 1), ("disabled", 2), ("disabledbyparent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrEnabledState.setStatus('deprecated')
if mibBuilder.loadTexts: ltmNodeAddrEnabledState.setDescription('Deprecated! Replaced by ltmNodeAddrStatusEnabledState under ltmNodeAddrStatus. The state of the specified node address activity status, as specified by the user.')
ltmNodeAddrDisabledParentType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 1, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrDisabledParentType.setStatus('deprecated')
if mibBuilder.loadTexts: ltmNodeAddrDisabledParentType.setDescription('Deprecated! Replaced by ltmNodeAddrStatusParentType under ltmNodeAddrStatus. The type of parent object which disabled the specified node address.')
ltmNodeAddrStatusReason = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 1, 2, 1, 16), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrStatusReason.setStatus('deprecated')
if mibBuilder.loadTexts: ltmNodeAddrStatusReason.setDescription("Deprecated! Replaced by ltmNodeAddrStatusDetailReason under ltmNodeAddrStatus. The detail description of the node's status of parent object which disabled the specified node address.")
ltmNodeAddrName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 1, 2, 1, 17), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrName.setStatus('current')
if mibBuilder.loadTexts: ltmNodeAddrName.setDescription('node name.')
ltmNodeAddrStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmNodeAddrStatResetStats.setStatus('current')
if mibBuilder.loadTexts: ltmNodeAddrStatResetStats.setDescription('The action to reset resetable statistics data in ltmNodeAddrStat. Setting this value to 1 will reset statistics data. Note, some statistics data may not be reset including data that are incremental counters.')
ltmNodeAddrStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmNodeAddrStatNumber.setDescription('The number of ltmNodeAddrStat entries in the table.')
ltmNodeAddrStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 2, 3), )
if mibBuilder.loadTexts: ltmNodeAddrStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmNodeAddrStatTable.setDescription('A table containing statistic information of node addresses.')
ltmNodeAddrStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 2, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmNodeAddrStatNodeName"))
if mibBuilder.loadTexts: ltmNodeAddrStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmNodeAddrStatEntry.setDescription('Columns in the ltmNodeAddrStat Table')
ltmNodeAddrStatAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 2, 3, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrStatAddrType.setStatus('deprecated')
if mibBuilder.loadTexts: ltmNodeAddrStatAddrType.setDescription('Deprecated! use node_name instead, The IP address type of ltmNodeAddrStatAddr')
ltmNodeAddrStatAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 2, 3, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrStatAddr.setStatus('deprecated')
if mibBuilder.loadTexts: ltmNodeAddrStatAddr.setDescription('Deprecated! use node_name instead, The IP address of a node. It is interpreted within the context of an ltmNodeAddrStatAddrType value.')
ltmNodeAddrStatServerPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 2, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrStatServerPktsIn.setStatus('current')
if mibBuilder.loadTexts: ltmNodeAddrStatServerPktsIn.setDescription('The number of packets received by the specified node address from server-side.')
ltmNodeAddrStatServerBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 2, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrStatServerBytesIn.setStatus('current')
if mibBuilder.loadTexts: ltmNodeAddrStatServerBytesIn.setDescription('The number of bytes received by the specified node address from server-side.')
ltmNodeAddrStatServerPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 2, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrStatServerPktsOut.setStatus('current')
if mibBuilder.loadTexts: ltmNodeAddrStatServerPktsOut.setDescription('The number of packets sent to server-side from the specified node address.')
ltmNodeAddrStatServerBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 2, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrStatServerBytesOut.setStatus('current')
if mibBuilder.loadTexts: ltmNodeAddrStatServerBytesOut.setDescription('The number of bytes sent to server-side from the specified node address.')
ltmNodeAddrStatServerMaxConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 2, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrStatServerMaxConns.setStatus('current')
if mibBuilder.loadTexts: ltmNodeAddrStatServerMaxConns.setDescription('The maximum connections from server-side to the specified node address.')
ltmNodeAddrStatServerTotConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 2, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrStatServerTotConns.setStatus('current')
if mibBuilder.loadTexts: ltmNodeAddrStatServerTotConns.setDescription('The total connections from server-side to the specified node address.')
ltmNodeAddrStatServerCurConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 2, 3, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrStatServerCurConns.setStatus('current')
if mibBuilder.loadTexts: ltmNodeAddrStatServerCurConns.setDescription('The current connections from server-side to the specified node address.')
ltmNodeAddrStatPvaPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 2, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrStatPvaPktsIn.setStatus('current')
if mibBuilder.loadTexts: ltmNodeAddrStatPvaPktsIn.setDescription('The total number of hardware accelerated packets received by the specified node address.')
ltmNodeAddrStatPvaBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 2, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrStatPvaBytesIn.setStatus('current')
if mibBuilder.loadTexts: ltmNodeAddrStatPvaBytesIn.setDescription('The total number of hardware accelerated bytes received by the specified node address.')
ltmNodeAddrStatPvaPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 2, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrStatPvaPktsOut.setStatus('current')
if mibBuilder.loadTexts: ltmNodeAddrStatPvaPktsOut.setDescription('The total number of hardware accelerated packets sent out from the specified node address.')
ltmNodeAddrStatPvaBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 2, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrStatPvaBytesOut.setStatus('current')
if mibBuilder.loadTexts: ltmNodeAddrStatPvaBytesOut.setDescription('The number of hardware accelerated bytes sent out from the specified node address.')
ltmNodeAddrStatPvaMaxConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 2, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrStatPvaMaxConns.setStatus('current')
if mibBuilder.loadTexts: ltmNodeAddrStatPvaMaxConns.setDescription('The maximum hardware accelerated connections to the specified node address.')
ltmNodeAddrStatPvaTotConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 2, 3, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrStatPvaTotConns.setStatus('current')
if mibBuilder.loadTexts: ltmNodeAddrStatPvaTotConns.setDescription('The total hardware accelerated connections to the specified node address.')
ltmNodeAddrStatPvaCurConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 2, 3, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrStatPvaCurConns.setStatus('current')
if mibBuilder.loadTexts: ltmNodeAddrStatPvaCurConns.setDescription('The current hardware accelerated connections to the specified node address.')
ltmNodeAddrStatTotRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 2, 3, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrStatTotRequests.setStatus('current')
if mibBuilder.loadTexts: ltmNodeAddrStatTotRequests.setDescription('The total number of requests going through the specified node address.')
ltmNodeAddrStatTotPvaAssistConn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 2, 3, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrStatTotPvaAssistConn.setStatus('current')
if mibBuilder.loadTexts: ltmNodeAddrStatTotPvaAssistConn.setDescription('The total number of connections to the specified node address, which are partially hardware accelerated.')
ltmNodeAddrStatCurrPvaAssistConn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 2, 3, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrStatCurrPvaAssistConn.setStatus('current')
if mibBuilder.loadTexts: ltmNodeAddrStatCurrPvaAssistConn.setDescription('The current number of connections to the specified node address, which are partially hardware accelerated.')
ltmNodeAddrStatNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 2, 3, 1, 20), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrStatNodeName.setStatus('current')
if mibBuilder.loadTexts: ltmNodeAddrStatNodeName.setDescription('node name')
ltmNodeAddrStatCurSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 2, 3, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrStatCurSessions.setStatus('current')
if mibBuilder.loadTexts: ltmNodeAddrStatCurSessions.setDescription('The number of current sessions going through the specified node address.')
ltmNodeAddrStatCurrentConnsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 2, 3, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrStatCurrentConnsPerSec.setStatus('current')
if mibBuilder.loadTexts: ltmNodeAddrStatCurrentConnsPerSec.setDescription('The number of current connections per second to the specified node address.')
ltmNodeAddrStatDurationRateExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 2, 3, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrStatDurationRateExceeded.setStatus('current')
if mibBuilder.loadTexts: ltmNodeAddrStatDurationRateExceeded.setDescription('Duration of time in seconds the specified node address has exceeded the configured connection rate limit.')
ltmPoolNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolNumber.setStatus('current')
if mibBuilder.loadTexts: ltmPoolNumber.setDescription('The number of ltmPool entries in the table.')
ltmPoolTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 1, 2), )
if mibBuilder.loadTexts: ltmPoolTable.setStatus('current')
if mibBuilder.loadTexts: ltmPoolTable.setDescription('A table containing information of pools.')
ltmPoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmPoolName"))
if mibBuilder.loadTexts: ltmPoolEntry.setStatus('current')
if mibBuilder.loadTexts: ltmPoolEntry.setDescription('Columns in the ltmPool Table')
ltmPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolName.setStatus('current')
if mibBuilder.loadTexts: ltmPoolName.setDescription('The name of a pool.')
ltmPoolLbMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("roundRobin", 0), ("ratioMember", 1), ("leastConnMember", 2), ("observedMember", 3), ("predictiveMember", 4), ("ratioNodeAddress", 5), ("leastConnNodeAddress", 6), ("fastestNodeAddress", 7), ("observedNodeAddress", 8), ("predictiveNodeAddress", 9), ("dynamicRatio", 10), ("fastestAppResponse", 11), ("leastSessions", 12), ("dynamicRatioMember", 13), ("l3Addr", 14), ("weightedLeastConnMember", 15), ("weightedLeastConnNodeAddr", 16), ("ratioSession", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolLbMode.setStatus('current')
if mibBuilder.loadTexts: ltmPoolLbMode.setDescription('The load balance method for this pool')
ltmPoolActionOnServiceDown = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("reset", 1), ("drop", 2), ("reselect", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolActionOnServiceDown.setStatus('current')
if mibBuilder.loadTexts: ltmPoolActionOnServiceDown.setDescription('The action to be taken if the service for the specified pool is down.')
ltmPoolMinUpMembers = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMinUpMembers.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMinUpMembers.setDescription('The minimum number of UP members required for the specified pool before a high availability action to be taken. This is used when ltmPoolMinUpMembersEnable is true.')
ltmPoolMinUpMembersEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMinUpMembersEnable.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMinUpMembersEnable.setDescription('The state indicating whether or not an action will be taken when the minimum number of UP members requirement is not met for the specified pool.')
ltmPoolMinUpMemberAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("unusedhaaction", 0), ("reboot", 1), ("restart", 2), ("failover", 3), ("goactive", 4), ("noaction", 5), ("restartall", 6), ("failoveraborttm", 7), ("gooffline", 8), ("goofflinerestart", 9), ("goofflineaborttm", 10), ("goofflinedownlinks", 11), ("goofflinedownlinksrestart", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMinUpMemberAction.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMinUpMemberAction.setDescription('The action to be taken if the minimum number of UP members requirement is not met for the specified pool. This is used when ltmPoolMinUpMembersEnable is true.')
ltmPoolMinActiveMembers = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 1, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMinActiveMembers.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMinActiveMembers.setDescription('The minimum number of active members required for traffic to be sent to the specified pool. This feature is used for priority pools. The minimum active members take into account both the status of the pool member (up/down) as well as the number of connections present on the pool member. If the number of active members falls below this given threshold, traffic is sent to the next priority pool.')
ltmPoolActiveMemberCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 1, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolActiveMemberCnt.setStatus('current')
if mibBuilder.loadTexts: ltmPoolActiveMemberCnt.setDescription('The number of the current active members in the specified pool.')
ltmPoolDisallowSnat = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("allowed", 0), ("disallowed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolDisallowSnat.setStatus('current')
if mibBuilder.loadTexts: ltmPoolDisallowSnat.setDescription('The state whether SNAT is disallowed or not for the specified pool.')
ltmPoolDisallowNat = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("allowed", 0), ("disallowed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolDisallowNat.setStatus('current')
if mibBuilder.loadTexts: ltmPoolDisallowNat.setDescription('The state whether NAT is disallowed or not for the specified pool.')
ltmPoolSimpleTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 1, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolSimpleTimeout.setStatus('current')
if mibBuilder.loadTexts: ltmPoolSimpleTimeout.setDescription('The timeout (in seconds) in simple persistence for the specified pool.')
ltmPoolIpTosToClient = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 1, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolIpTosToClient.setStatus('current')
if mibBuilder.loadTexts: ltmPoolIpTosToClient.setDescription('The IP ToS value for client traffic for the specified pool.')
ltmPoolIpTosToServer = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 1, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolIpTosToServer.setStatus('current')
if mibBuilder.loadTexts: ltmPoolIpTosToServer.setDescription('The IP ToS value for server traffic for the specified pool.')
ltmPoolLinkQosToClient = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 1, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolLinkQosToClient.setStatus('current')
if mibBuilder.loadTexts: ltmPoolLinkQosToClient.setDescription('The link QoS value for client traffic for the specified pool.')
ltmPoolLinkQosToServer = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 1, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolLinkQosToServer.setStatus('current')
if mibBuilder.loadTexts: ltmPoolLinkQosToServer.setDescription('The link QoS value for server traffic for the specified pool.')
ltmPoolDynamicRatioSum = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 1, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolDynamicRatioSum.setStatus('current')
if mibBuilder.loadTexts: ltmPoolDynamicRatioSum.setDescription('The sum of the dynamic ratio from all the members of the specified pool.')
ltmPoolMonitorRule = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 1, 2, 1, 17), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMonitorRule.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMonitorRule.setDescription('The name of monitor rule used by the specified pool.')
ltmPoolAvailabilityState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 1, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("green", 1), ("yellow", 2), ("red", 3), ("blue", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolAvailabilityState.setStatus('deprecated')
if mibBuilder.loadTexts: ltmPoolAvailabilityState.setDescription('Deprecated! Replaced by ltmPooltatusAvailState under ltmPoolStatus. The state of the specified pool availability indicated in color.')
ltmPoolEnabledState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 1, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("enabled", 1), ("disabled", 2), ("disabledbyparent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolEnabledState.setStatus('deprecated')
if mibBuilder.loadTexts: ltmPoolEnabledState.setDescription('Deprecated! Replaced by ltmPoolStatusEnabledState under ltmPoolStatus. The state of the specified pool activity status, as specified by the user.')
ltmPoolDisabledParentType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 1, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolDisabledParentType.setStatus('deprecated')
if mibBuilder.loadTexts: ltmPoolDisabledParentType.setDescription('Deprecated! Replaced by ltmPoolStatusParentType under ltmPoolStatus. The type of parent object which disabled the specified pool.')
ltmPoolStatusReason = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 1, 2, 1, 21), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatusReason.setStatus('deprecated')
if mibBuilder.loadTexts: ltmPoolStatusReason.setDescription("Deprecated! Replaced by ltmPoolStatusDetailReason under ltmPoolStatus. The detail description of the pool's status of parent object which disabled the specified pool.")
ltmPoolSlowRampTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 1, 2, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolSlowRampTime.setStatus('current')
if mibBuilder.loadTexts: ltmPoolSlowRampTime.setDescription('The ramp-up time (in seconds) to gradually ramp up the load on newly added or freshly detected UP pool members.')
ltmPoolMemberCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 1, 2, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberCnt.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMemberCnt.setDescription('The total number of members in the specified pool.')
ltmPoolQueueOnConnectionLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 1, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("allowed", 0), ("disallowed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolQueueOnConnectionLimit.setStatus('current')
if mibBuilder.loadTexts: ltmPoolQueueOnConnectionLimit.setDescription('Enable or disable queuing based on pool member connection limits.')
ltmPoolQueueDepthLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 1, 2, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolQueueDepthLimit.setStatus('current')
if mibBuilder.loadTexts: ltmPoolQueueDepthLimit.setDescription('Maxiumum number of connections in queue for pool and all members. No limit if unspecified or 0.')
ltmPoolQueueTimeLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 1, 2, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolQueueTimeLimit.setStatus('current')
if mibBuilder.loadTexts: ltmPoolQueueTimeLimit.setDescription('Maximum number of milliseconds a connection may stay queued. No limit if unspecified or 0.')
ltmPoolStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmPoolStatResetStats.setStatus('current')
if mibBuilder.loadTexts: ltmPoolStatResetStats.setDescription('The action to reset resetable statistics data in ltmPoolStat. Setting this value to 1 will reset statistics data. Note, some statistics data may not be reset including data that are incremental counters.')
ltmPoolStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmPoolStatNumber.setDescription('The number of ltmPoolStat entries in the table.')
ltmPoolStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 2, 3), )
if mibBuilder.loadTexts: ltmPoolStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmPoolStatTable.setDescription('A table containing statistic information of pools.')
ltmPoolStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 2, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmPoolStatName"))
if mibBuilder.loadTexts: ltmPoolStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmPoolStatEntry.setDescription('Columns in the ltmPoolStat Table')
ltmPoolStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 2, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatName.setStatus('current')
if mibBuilder.loadTexts: ltmPoolStatName.setDescription('The name of this pool.')
ltmPoolStatServerPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 2, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatServerPktsIn.setStatus('current')
if mibBuilder.loadTexts: ltmPoolStatServerPktsIn.setDescription('The number of packets received by the specified pool from server-side.')
ltmPoolStatServerBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 2, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatServerBytesIn.setStatus('current')
if mibBuilder.loadTexts: ltmPoolStatServerBytesIn.setDescription('The number of bytes received by the specified pool from server-side.')
ltmPoolStatServerPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 2, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatServerPktsOut.setStatus('current')
if mibBuilder.loadTexts: ltmPoolStatServerPktsOut.setDescription('The number of packets sent to server-side from the specified pool.')
ltmPoolStatServerBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 2, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatServerBytesOut.setStatus('current')
if mibBuilder.loadTexts: ltmPoolStatServerBytesOut.setDescription('The number of bytes sent to server-side from the specified pool.')
ltmPoolStatServerMaxConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 2, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatServerMaxConns.setStatus('current')
if mibBuilder.loadTexts: ltmPoolStatServerMaxConns.setDescription('The maximum connections from server-side to the specified pool.')
ltmPoolStatServerTotConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 2, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatServerTotConns.setStatus('current')
if mibBuilder.loadTexts: ltmPoolStatServerTotConns.setDescription('The total connections from server-side to the specified pool.')
ltmPoolStatServerCurConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 2, 3, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatServerCurConns.setStatus('current')
if mibBuilder.loadTexts: ltmPoolStatServerCurConns.setDescription('The current connections from server-side to the specified pool.')
ltmPoolStatPvaPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 2, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatPvaPktsIn.setStatus('current')
if mibBuilder.loadTexts: ltmPoolStatPvaPktsIn.setDescription('The number of hardware accelerated packets received by the specified pool.')
ltmPoolStatPvaBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 2, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatPvaBytesIn.setStatus('current')
if mibBuilder.loadTexts: ltmPoolStatPvaBytesIn.setDescription('The number of hardware accelerated bytes received by the specified pool.')
ltmPoolStatPvaPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 2, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatPvaPktsOut.setStatus('current')
if mibBuilder.loadTexts: ltmPoolStatPvaPktsOut.setDescription('The number of hardware accelerated packets sent out from the specified pool.')
ltmPoolStatPvaBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 2, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatPvaBytesOut.setStatus('current')
if mibBuilder.loadTexts: ltmPoolStatPvaBytesOut.setDescription('The number of hardware accelerated bytes sent out from the specified pool.')
ltmPoolStatPvaMaxConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 2, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatPvaMaxConns.setStatus('current')
if mibBuilder.loadTexts: ltmPoolStatPvaMaxConns.setDescription('The maximum hardware accelerated connections to the specified pool.')
ltmPoolStatPvaTotConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 2, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatPvaTotConns.setStatus('current')
if mibBuilder.loadTexts: ltmPoolStatPvaTotConns.setDescription('The total hardware accelerated connections to the specified pool.')
ltmPoolStatPvaCurConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 2, 3, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatPvaCurConns.setStatus('current')
if mibBuilder.loadTexts: ltmPoolStatPvaCurConns.setDescription('The current hardware accelerated connections to the specified pool.')
ltmPoolStatTotPvaAssistConn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 2, 3, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatTotPvaAssistConn.setStatus('current')
if mibBuilder.loadTexts: ltmPoolStatTotPvaAssistConn.setDescription('The total number of connections to the specified pool, which are partially hardware accelerated.')
ltmPoolStatCurrPvaAssistConn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 2, 3, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatCurrPvaAssistConn.setStatus('current')
if mibBuilder.loadTexts: ltmPoolStatCurrPvaAssistConn.setDescription('The current number of connections to the specified pool, which are partially hardware accelerated.')
ltmPoolStatConnqDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 2, 3, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatConnqDepth.setStatus('current')
if mibBuilder.loadTexts: ltmPoolStatConnqDepth.setDescription('Number of connections currently in queue, sum.')
ltmPoolStatConnqAgeHead = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 2, 3, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatConnqAgeHead.setStatus('current')
if mibBuilder.loadTexts: ltmPoolStatConnqAgeHead.setDescription('Age in milliseconds of the oldest queue entry, max.')
ltmPoolStatConnqAgeMax = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 2, 3, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatConnqAgeMax.setStatus('current')
if mibBuilder.loadTexts: ltmPoolStatConnqAgeMax.setDescription('Maximum queue entry age in milliseconds, max.')
ltmPoolStatConnqAgeEma = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 2, 3, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatConnqAgeEma.setStatus('current')
if mibBuilder.loadTexts: ltmPoolStatConnqAgeEma.setDescription('Exponential moving average queue entry age in milliseconds, max.')
ltmPoolStatConnqAgeEdm = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 2, 3, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatConnqAgeEdm.setStatus('current')
if mibBuilder.loadTexts: ltmPoolStatConnqAgeEdm.setDescription('Exponential decaying maximum queue entry age in milliseconds, max.')
ltmPoolStatConnqServiced = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 2, 3, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatConnqServiced.setStatus('current')
if mibBuilder.loadTexts: ltmPoolStatConnqServiced.setDescription('Number of entries that have been removed from the queue, sum.')
ltmPoolStatConnqAllDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 2, 3, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatConnqAllDepth.setStatus('current')
if mibBuilder.loadTexts: ltmPoolStatConnqAllDepth.setDescription('Number of connections currently in queue of this pool and all its members, sum.')
ltmPoolStatConnqAllAgeHead = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 2, 3, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatConnqAllAgeHead.setStatus('current')
if mibBuilder.loadTexts: ltmPoolStatConnqAllAgeHead.setDescription('Age in milliseconds of the oldest queue entry of this pool and all its members, max.')
ltmPoolStatConnqAllAgeMax = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 2, 3, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatConnqAllAgeMax.setStatus('current')
if mibBuilder.loadTexts: ltmPoolStatConnqAllAgeMax.setDescription('Maximum queue entry age in milliseconds of this pool and all its members, max.')
ltmPoolStatConnqAllAgeEma = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 2, 3, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatConnqAllAgeEma.setStatus('current')
if mibBuilder.loadTexts: ltmPoolStatConnqAllAgeEma.setDescription('Exponential moving average queue entry age in milliseconds of this pool and all its members, max.')
ltmPoolStatConnqAllAgeEdm = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 2, 3, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatConnqAllAgeEdm.setStatus('current')
if mibBuilder.loadTexts: ltmPoolStatConnqAllAgeEdm.setDescription('Exponential decaying maximum queue entry age in milliseconds of this pool and all its members, max.')
ltmPoolStatConnqAllServiced = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 2, 3, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatConnqAllServiced.setStatus('current')
if mibBuilder.loadTexts: ltmPoolStatConnqAllServiced.setDescription('Number of entries that have been removed from the queue of this pool and all its members, sum.')
ltmPoolStatTotRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 2, 3, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatTotRequests.setStatus('current')
if mibBuilder.loadTexts: ltmPoolStatTotRequests.setDescription('The total number of requests to the specified pool.')
ltmPoolStatCurSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 2, 3, 1, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatCurSessions.setStatus('current')
if mibBuilder.loadTexts: ltmPoolStatCurSessions.setDescription('The current number of sessions to the specified pool.')
ltmPoolMemberNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberNumber.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMemberNumber.setDescription('The number of ltmPoolMember entries in the table.')
ltmPoolMemberTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 3, 2), )
if mibBuilder.loadTexts: ltmPoolMemberTable.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMemberTable.setDescription('A table containing information of pool members.')
ltmPoolMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 3, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmPoolMemberPoolName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmPoolMemberNodeName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmPoolMemberPort"))
if mibBuilder.loadTexts: ltmPoolMemberEntry.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMemberEntry.setDescription('Columns in the ltmPoolMember Table')
ltmPoolMemberPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 3, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberPoolName.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMemberPoolName.setDescription('The name of a pool.')
ltmPoolMemberAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 3, 2, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberAddrType.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMemberAddrType.setDescription('The IP address type of ltmPoolMemberAddr.')
ltmPoolMemberAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 3, 2, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberAddr.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMemberAddr.setDescription('The IP address of a pool member in the specified pool. It is interpreted within the context of an ltmPoolMemberAddrType value.')
ltmPoolMemberPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 3, 2, 1, 4), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberPort.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMemberPort.setDescription('The port number of the specified pool member.')
ltmPoolMemberConnLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 3, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberConnLimit.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMemberConnLimit.setDescription('The maximum connections allowed to the specified pool member.')
ltmPoolMemberRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 3, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberRatio.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMemberRatio.setDescription('The load balancing ratio of the specified pool member, used in pool member ratio load balancing mode.')
ltmPoolMemberWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 3, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberWeight.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMemberWeight.setDescription('The weight of the specified pool member, used in dynamic load balancing mode.')
ltmPoolMemberPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 3, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberPriority.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMemberPriority.setDescription('The priority level of the specified pool member, used in priority pool member load balancing mode.')
ltmPoolMemberDynamicRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 3, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberDynamicRatio.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMemberDynamicRatio.setDescription('The dynamic ratio for the specified pool member, used in load balance algorithm.')
ltmPoolMemberMonitorState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 3, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 19, 20, 22, 23, 24, 25))).clone(namedValues=NamedValues(("unchecked", 0), ("checking", 1), ("inband", 2), ("forced-up", 3), ("up", 4), ("down", 19), ("forced-down", 20), ("irule-down", 22), ("inband-down", 23), ("down-manual-resume", 24), ("disabled", 25)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmPoolMemberMonitorState.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMemberMonitorState.setDescription('The internal tmm monitor state for the specified node address.')
ltmPoolMemberMonitorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 3, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 18, 19, 20, 21, 22, 23, 24))).clone(namedValues=NamedValues(("unchecked", 0), ("checking", 1), ("inband", 2), ("forced-up", 3), ("up", 4), ("addr-down", 18), ("down", 19), ("forced-down", 20), ("maint", 21), ("irule-down", 22), ("inband-down", 23), ("down-manual-resume", 24)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberMonitorStatus.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMemberMonitorStatus.setDescription('The hierarchical load balance state for the specified node address, including parent status. unchecked - enabled node that is not monitored; checking - initial state until monitor reports; inband - the tmm has marked the node up; forced-up - forced up manually; up - enabled node when its monitors succeed; addr-down - node address monitor fails or forced down; down - enabled node when its monitors fail; forced-down - node forced down manually; maint - in maintenance mode; irule-down - an iRule has marked the node down; inband-down - the tmm has marked the node down; down-manual-resume - the node is down and must be manually enabled; ')
ltmPoolMemberNewSessionEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 3, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("user-disabled", 1), ("user-enabled", 2), ("monitor-enabled", 3), ("monitor-disabled", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberNewSessionEnable.setStatus('deprecated')
if mibBuilder.loadTexts: ltmPoolMemberNewSessionEnable.setDescription('Deprecated! This field is not interested to user through SNMP interface Whether a new session can be enabled or not for the specified pool member.')
ltmPoolMemberSessionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 3, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("enabled", 1), ("addrdisabled", 2), ("servdisabled", 3), ("disabled", 4), ("forceddisabled", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberSessionStatus.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMemberSessionStatus.setDescription('The hierarchical status of the session, including parent status, for the specified pool member. enabled - new sessions enabled; addrdisabled - new sessions disabled on node address; servdisabled - new sessions disabled on node server; disabled - new sessions disabled; forceddisabled - new sessions forced to be disabled.')
ltmPoolMemberMonitorRule = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 3, 2, 1, 14), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberMonitorRule.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMemberMonitorRule.setDescription('The monitor rule used by the specified pool member. If this value is empty, ltmPoolMonitorRule will be used.')
ltmPoolMemberAvailabilityState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 3, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("green", 1), ("yellow", 2), ("red", 3), ("blue", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberAvailabilityState.setStatus('deprecated')
if mibBuilder.loadTexts: ltmPoolMemberAvailabilityState.setDescription('Deprecated! Replaced by ltmPoolMbrStatusAvailState under ltmPoolMemberStatus. The state of the specified pool member availability indicated in color.')
ltmPoolMemberEnabledState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 3, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("enabled", 1), ("disabled", 2), ("disabledbyparent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberEnabledState.setStatus('deprecated')
if mibBuilder.loadTexts: ltmPoolMemberEnabledState.setDescription('Deprecated! Replaced by ltmPoolMbrStatusEnabledState under ltmPoolMemberStatus. The state of the specified pool member activity status, as specified by the user.')
ltmPoolMemberDisabledParentType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 3, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberDisabledParentType.setStatus('deprecated')
if mibBuilder.loadTexts: ltmPoolMemberDisabledParentType.setDescription('Deprecated! Replaced by ltmPoolMbrStatusParentType under ltmPoolMemberStatus. The type of parent object which disabled the specified pool member.')
ltmPoolMemberStatusReason = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 3, 2, 1, 18), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberStatusReason.setStatus('deprecated')
if mibBuilder.loadTexts: ltmPoolMemberStatusReason.setDescription("Deprecated! Replaced by ltmPoolMbrStatusDetailReason under ltmPoolMemberStatus. The detail description of the pool member's status of parent object which disabled the specified pool member.")
ltmPoolMemberNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 3, 2, 1, 19), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberNodeName.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMemberNodeName.setDescription('Name of associated name.')
ltmPoolMemberStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 4, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmPoolMemberStatResetStats.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMemberStatResetStats.setDescription('The action to reset resetable statistics data in ltmPoolMemberStat. Setting this value to 1 will reset statistics data. Note, some statistics data may not be reset including data that are incremental counters.')
ltmPoolMemberStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMemberStatNumber.setDescription('The number of ltmPoolMemberStat entries in the table.')
ltmPoolMemberStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 4, 3), )
if mibBuilder.loadTexts: ltmPoolMemberStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMemberStatTable.setDescription('A table containing statistic information of pool members.')
ltmPoolMemberStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 4, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmPoolMemberStatPoolName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmPoolMemberStatNodeName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmPoolMemberStatPort"))
if mibBuilder.loadTexts: ltmPoolMemberStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMemberStatEntry.setDescription('Columns in the ltmPoolMemberStat Table')
ltmPoolMemberStatPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 4, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberStatPoolName.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMemberStatPoolName.setDescription('The name of a pool.')
ltmPoolMemberStatAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 4, 3, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberStatAddrType.setStatus('deprecated')
if mibBuilder.loadTexts: ltmPoolMemberStatAddrType.setDescription('Deprecated! use node_name instead, The IP address type of ltmPoolMemberStatAddr.')
ltmPoolMemberStatAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 4, 3, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberStatAddr.setStatus('deprecated')
if mibBuilder.loadTexts: ltmPoolMemberStatAddr.setDescription('Deprecated! use node_name instead, The IP address of a pool member in the specified pool. It is interpreted within the context of an ltmPoolMemberStatAddrType value.')
ltmPoolMemberStatPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 4, 3, 1, 4), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberStatPort.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMemberStatPort.setDescription('The port number of the specified pool member.')
ltmPoolMemberStatServerPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 4, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberStatServerPktsIn.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMemberStatServerPktsIn.setDescription('The number of packets received by the specified pool member from server-side.')
ltmPoolMemberStatServerBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 4, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberStatServerBytesIn.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMemberStatServerBytesIn.setDescription('The number of bytes received by the specified pool member from server-side.')
ltmPoolMemberStatServerPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 4, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberStatServerPktsOut.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMemberStatServerPktsOut.setDescription('The number of packets sent to server-side from the specified pool member.')
ltmPoolMemberStatServerBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 4, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberStatServerBytesOut.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMemberStatServerBytesOut.setDescription('The number of bytes sent to server-side from the specified pool member.')
ltmPoolMemberStatServerMaxConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 4, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberStatServerMaxConns.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMemberStatServerMaxConns.setDescription('The maximum connections from server-side to the specified pool member.')
ltmPoolMemberStatServerTotConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 4, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberStatServerTotConns.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMemberStatServerTotConns.setDescription('The total connections from server-side to the specified pool member.')
ltmPoolMemberStatServerCurConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 4, 3, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberStatServerCurConns.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMemberStatServerCurConns.setDescription('The current connections from server-side to the pool member.')
ltmPoolMemberStatPvaPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 4, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberStatPvaPktsIn.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMemberStatPvaPktsIn.setDescription('The total number of hardware accelerated packets received by the specified pool member.')
ltmPoolMemberStatPvaBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 4, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberStatPvaBytesIn.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMemberStatPvaBytesIn.setDescription('The total number of hardware accelerated bytes received by the specified pool member.')
ltmPoolMemberStatPvaPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 4, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberStatPvaPktsOut.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMemberStatPvaPktsOut.setDescription('The total number of hardware accelerated packets sent out from the specified pool member.')
ltmPoolMemberStatPvaBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 4, 3, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberStatPvaBytesOut.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMemberStatPvaBytesOut.setDescription('The total number of hardware accelerated bytes sent out from the specified pool member.')
ltmPoolMemberStatPvaMaxConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 4, 3, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberStatPvaMaxConns.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMemberStatPvaMaxConns.setDescription('The maximum hardware accelerated connections to the specified pool member.')
ltmPoolMemberStatPvaTotConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 4, 3, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberStatPvaTotConns.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMemberStatPvaTotConns.setDescription('The total hardware accelerated connections to the specified pool member.')
ltmPoolMemberStatPvaCurConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 4, 3, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberStatPvaCurConns.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMemberStatPvaCurConns.setDescription('The current hardware accelerated connections to the specified pool member.')
ltmPoolMemberStatTotRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 4, 3, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberStatTotRequests.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMemberStatTotRequests.setDescription('The total number of requests going through the specified pool member.')
ltmPoolMemberStatTotPvaAssistConn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 4, 3, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberStatTotPvaAssistConn.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMemberStatTotPvaAssistConn.setDescription('The total number of connections to the specified pool member, which are partially hardware accelerated.')
ltmPoolMemberStatCurrPvaAssistConn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 4, 3, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberStatCurrPvaAssistConn.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMemberStatCurrPvaAssistConn.setDescription('The current number of connections to the specified pool member, which are partially hardware accelerated.')
ltmPoolMemberStatConnqDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 4, 3, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberStatConnqDepth.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMemberStatConnqDepth.setDescription('Number of connections currently in queue, sum.')
ltmPoolMemberStatConnqAgeHead = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 4, 3, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberStatConnqAgeHead.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMemberStatConnqAgeHead.setDescription('Age in milliseconds of the oldest queue entry, max.')
ltmPoolMemberStatConnqAgeMax = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 4, 3, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberStatConnqAgeMax.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMemberStatConnqAgeMax.setDescription('Maximum queue entry age in milliseconds, max.')
ltmPoolMemberStatConnqAgeEma = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 4, 3, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberStatConnqAgeEma.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMemberStatConnqAgeEma.setDescription('Exponential moving average queue entry age in milliseconds, max.')
ltmPoolMemberStatConnqAgeEdm = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 4, 3, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberStatConnqAgeEdm.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMemberStatConnqAgeEdm.setDescription('Exponential decaying maximum queue entry age in milliseconds, max.')
ltmPoolMemberStatConnqServiced = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 4, 3, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberStatConnqServiced.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMemberStatConnqServiced.setDescription('Number of entries that have been removed from the queue, sum.')
ltmPoolMemberStatNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 4, 3, 1, 28), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberStatNodeName.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMemberStatNodeName.setDescription('node name.')
ltmPoolMemberStatCurSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 4, 3, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberStatCurSessions.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMemberStatCurSessions.setDescription('The number of current sessions going through the specified pool member.')
ltmPoolMemberStatCurrentConnsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 4, 3, 1, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberStatCurrentConnsPerSec.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMemberStatCurrentConnsPerSec.setDescription('The number of current connections per second to the specified pool member.')
ltmPoolMemberStatDurationRateExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 4, 3, 1, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberStatDurationRateExceeded.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMemberStatDurationRateExceeded.setDescription('Duration of time in seconds the specified pool member has exceeded the configured connection rate limit.')
ltmAuthProfileNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAuthProfileNumber.setStatus('current')
if mibBuilder.loadTexts: ltmAuthProfileNumber.setDescription('The number of ltmAuthProfile entries in the table.')
ltmAuthProfileTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 1, 1, 2), )
if mibBuilder.loadTexts: ltmAuthProfileTable.setStatus('current')
if mibBuilder.loadTexts: ltmAuthProfileTable.setDescription('A table containing information of BIGIP authentication profiles.')
ltmAuthProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 1, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmAuthProfileName"))
if mibBuilder.loadTexts: ltmAuthProfileEntry.setStatus('current')
if mibBuilder.loadTexts: ltmAuthProfileEntry.setDescription('Columns in the ltmAuthProfile Table')
ltmAuthProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 1, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAuthProfileName.setStatus('current')
if mibBuilder.loadTexts: ltmAuthProfileName.setDescription('The name of an authentication profile.')
ltmAuthProfileConfigSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("usercfg", 0), ("basecfg", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAuthProfileConfigSource.setStatus('current')
if mibBuilder.loadTexts: ltmAuthProfileConfigSource.setDescription('The state that specifies whether this is a base/pre-configured profile or user defined profile.')
ltmAuthProfileDefaultName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 1, 1, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAuthProfileDefaultName.setStatus('current')
if mibBuilder.loadTexts: ltmAuthProfileDefaultName.setDescription('The name of the profile from which the specified profile derives its attribute default values.')
ltmAuthProfileConfigName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 1, 1, 2, 1, 4), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAuthProfileConfigName.setStatus('current')
if mibBuilder.loadTexts: ltmAuthProfileConfigName.setDescription('The name of the authentication configuration that the specified profile will be using.')
ltmAuthProfileType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("ldap", 0), ("radius", 1), ("sslccldap", 2), ("sslocsp", 3), ("tacacs", 4), ("generic", 5), ("sslcrldp", 6), ("krbdelegate", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAuthProfileType.setStatus('current')
if mibBuilder.loadTexts: ltmAuthProfileType.setDescription('The authentication type that the specified profile will be using.')
ltmAuthProfileMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 1, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAuthProfileMode.setStatus('current')
if mibBuilder.loadTexts: ltmAuthProfileMode.setDescription('The mode for the specified auth profile.')
ltmAuthProfileCredentialSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 1, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("httpbasicauth", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAuthProfileCredentialSource.setStatus('current')
if mibBuilder.loadTexts: ltmAuthProfileCredentialSource.setDescription('The source of the credentials that the specified profile will be using.')
ltmAuthProfileRuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 1, 1, 2, 1, 8), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAuthProfileRuleName.setStatus('current')
if mibBuilder.loadTexts: ltmAuthProfileRuleName.setDescription('The name of the rule that the specified profile will be using.')
ltmAuthProfileIdleTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 1, 1, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAuthProfileIdleTimeout.setStatus('current')
if mibBuilder.loadTexts: ltmAuthProfileIdleTimeout.setDescription('The idle timeout in seconds for the authentication session.')
ltmAuthProfileStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 1, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmAuthProfileStatResetStats.setStatus('current')
if mibBuilder.loadTexts: ltmAuthProfileStatResetStats.setDescription('The action to reset resetable statistics data in ltmAuthProfileStat. Setting this value to 1 will reset statistics data. Note, some statistics data may not be reset including data that are incremental counters.')
ltmAuthProfileStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 1, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAuthProfileStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmAuthProfileStatNumber.setDescription('The number of ltmAuthProfileStat entries in the table.')
ltmAuthProfileStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 1, 2, 3), )
if mibBuilder.loadTexts: ltmAuthProfileStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmAuthProfileStatTable.setDescription('A table containing statistic information of BIGIP authentication profiles.')
ltmAuthProfileStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 1, 2, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmAuthProfileStatName"))
if mibBuilder.loadTexts: ltmAuthProfileStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmAuthProfileStatEntry.setDescription('Columns in the ltmAuthProfileStat Table')
ltmAuthProfileStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 1, 2, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAuthProfileStatName.setStatus('current')
if mibBuilder.loadTexts: ltmAuthProfileStatName.setDescription('The name of an authentication profile.')
ltmAuthProfileStatTotSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 1, 2, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAuthProfileStatTotSessions.setStatus('current')
if mibBuilder.loadTexts: ltmAuthProfileStatTotSessions.setDescription('The total number of concurrent auth sessions for the specified profile.')
ltmAuthProfileStatCurSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 1, 2, 3, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAuthProfileStatCurSessions.setStatus('current')
if mibBuilder.loadTexts: ltmAuthProfileStatCurSessions.setDescription('The current number of concurrent auth sessions for the specified profile.')
ltmAuthProfileStatMaxSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 1, 2, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAuthProfileStatMaxSessions.setStatus('current')
if mibBuilder.loadTexts: ltmAuthProfileStatMaxSessions.setDescription('The maximum number of concurrent auth sessions for the specified profile')
ltmAuthProfileStatSuccessResults = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 1, 2, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAuthProfileStatSuccessResults.setStatus('current')
if mibBuilder.loadTexts: ltmAuthProfileStatSuccessResults.setDescription('The total number of auth success results (That is when a successful authorization has completed all of the required auth services.) for the specified profile.')
ltmAuthProfileStatFailureResults = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 1, 2, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAuthProfileStatFailureResults.setStatus('current')
if mibBuilder.loadTexts: ltmAuthProfileStatFailureResults.setDescription('The total number of auth failure results (That is when an unsuccessful authorization operation has completed.) for the associated virtual server for the specified profile.')
ltmAuthProfileStatWantcredentialResults = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 1, 2, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAuthProfileStatWantcredentialResults.setStatus('current')
if mibBuilder.loadTexts: ltmAuthProfileStatWantcredentialResults.setDescription('The total number of auth wantcredential results (That is when an authorization operation needs an additional credential.) for the specified profile.')
ltmAuthProfileStatErrorResults = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 1, 2, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAuthProfileStatErrorResults.setStatus('current')
if mibBuilder.loadTexts: ltmAuthProfileStatErrorResults.setDescription('The total number of auth error results (That is when an error occurred during authorization has occurred.) for the specified profile.')
ltmClientSslNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslNumber.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslNumber.setDescription('The number of ltmClientSslProfile entries in the table.')
ltmClientSslTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2), )
if mibBuilder.loadTexts: ltmClientSslTable.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslTable.setDescription('A table containing information of the client-side SSL profiles.(BIG-IP acts as an SSL server)')
ltmClientSslEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmClientSslName"))
if mibBuilder.loadTexts: ltmClientSslEntry.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslEntry.setDescription('Columns in the ltmClientSsl Table')
ltmClientSslName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslName.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslName.setDescription('The name of a client-side SSL profile.')
ltmClientSslConfigSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("usercfg", 0), ("basecfg", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslConfigSource.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslConfigSource.setDescription('The state that specifies whether this is a base/pre-configured profile or user defined profile.')
ltmClientSslDefaultName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslDefaultName.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslDefaultName.setDescription('The name of the profile from which the specified profile derives its attribute default values.')
ltmClientSslMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslMode.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslMode.setDescription('The mode of this profile.')
ltmClientSslKey = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 5), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslKey.setStatus('deprecated')
if mibBuilder.loadTexts: ltmClientSslKey.setDescription('Deprecated! Please refer ltmClientSslCertKeyChain. The key file name.')
ltmClientSslCert = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 6), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslCert.setStatus('deprecated')
if mibBuilder.loadTexts: ltmClientSslCert.setDescription('Deprecated! Please refer ltmClientSslCertKeyChain. The certificate file name.')
ltmClientSslChain = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 7), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslChain.setStatus('deprecated')
if mibBuilder.loadTexts: ltmClientSslChain.setDescription('Deprecated! Please refer ltmClientSslCertKeyChain. The certificate chain file name.')
ltmClientSslCafile = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 8), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslCafile.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslCafile.setDescription('The CA certificate file name.')
ltmClientSslCrlfile = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 9), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslCrlfile.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslCrlfile.setDescription('The CRL file name.')
ltmClientSslClientcertca = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 10), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslClientcertca.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslClientcertca.setDescription('The CA certificate file name.')
ltmClientSslCiphers = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 11), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslCiphers.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslCiphers.setDescription('The set of ciphers available for client-side SSL negotiation.')
ltmClientSslPassphrase = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 12), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslPassphrase.setStatus('deprecated')
if mibBuilder.loadTexts: ltmClientSslPassphrase.setDescription('Deprecated! No longer supported. The key passphrase (if any).')
ltmClientSslOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslOptions.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslOptions.setDescription('The SSL options. SSLOPT_MICROSOFT_SESS_ID_BUG = 1 SSLOPT_NETSCAPE_CHALLENGE_BUG = 2 SSLOPT_NETSCAPE_REUSE_CIPHER_CHANGE_BUG = 8 SSLOPT_SSLREF2_REUSE_CERT_TYPE_BUG = 16 SSLOPT_MICROSOFT_BIG_SSLV3_BUFFER = 32 SSLOPT_MSIE_SSLV2_RSA_PADDING = 64 SSLOPT_SSLEAY_080_CLIENT_DH_BUG = 128 SSLOPT_TLS_D5_BUG = 256 SSLOPT_TLS_BLOCK_PADDING_BUG = 512 SSLOPT_DONT_INSERT_EMPTY_FRAGMENTS = 2048 SSLOPT_ALL_BUGFIXES = 4095 SSLOPT_PASSIVE_CLOSE = 4096 SSLOPT_NO_SESSION_RESUMPTION_ON_RENEGOTIATION = 65536 SSLOPT_SINGLE_DH_USE = 1048576 SSLOPT_EPHEMERAL_RSA = 2097152 SSLOPT_CIPHER_SERVER_PREFERENCE = 4194304 SSLOPT_TLS_ROLLBACK_BUG = 8388608 SSLOPT_NO_SSLv2 = 16777216 SSLOPT_NO_SSLv3 = 33554432 SSLOPT_NO_TLSv1 = 67108864 SSLOPT_PKCS1_CHECK_1 = 134217728 SSLOPT_PKCS1_CHECK_2 = 268435456 SSLOPT_NETSCAPE_CA_DN_BUG = 536870912 SSLOPT_NETSCAPE_DEMO_CIPHER_CHANGE_BUG = 1073741824')
ltmClientSslModsslmethods = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslModsslmethods.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslModsslmethods.setDescription('The ModSSL method emulation.')
ltmClientSslCacheSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslCacheSize.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslCacheSize.setDescription('The SSL session cache size.')
ltmClientSslCacheTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslCacheTimeout.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslCacheTimeout.setDescription('The SSL session cache timeout.')
ltmClientSslRenegotiatePeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslRenegotiatePeriod.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslRenegotiatePeriod.setDescription('Time-based trigger.')
ltmClientSslRenegotiateSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslRenegotiateSize.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslRenegotiateSize.setDescription('Throughput-based trigger MB.')
ltmClientSslRenegotiateMaxRecordDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslRenegotiateMaxRecordDelay.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslRenegotiateMaxRecordDelay.setDescription('The timeout of renegotiation.')
ltmClientSslHandshakeTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslHandshakeTimeout.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslHandshakeTimeout.setDescription('The handshake timeout in seconds.')
ltmClientSslAlertTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslAlertTimeout.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslAlertTimeout.setDescription('The alert timeout in seconds.')
ltmClientSslPeerCertMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("ignore", 0), ("require", 1), ("request", 2), ("auto", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslPeerCertMode.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslPeerCertMode.setDescription('The mode of peer certification.')
ltmClientSslAuthenticateOnce = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslAuthenticateOnce.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslAuthenticateOnce.setDescription('The feature to request client cert once or with each SSL session renegotiation.')
ltmClientSslAuthenticateDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslAuthenticateDepth.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslAuthenticateDepth.setDescription('The maximum traversal depth for client certificate chain.')
ltmClientSslUncleanShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslUncleanShutdown.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslUncleanShutdown.setDescription('The state of shutdown for this SSL, whether it is unclean shutdown (not sending a close notification alert when closing connection.).')
ltmClientSslStrictResume = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStrictResume.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStrictResume.setDescription('Whether to enforce strict SSL session resumption per RFC2246')
ltmClientSslAllowNonssl = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslAllowNonssl.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslAllowNonssl.setDescription('Whether to allow non-SSL connections to pass through as cleartext.')
ltmClientSslSessionTicket = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslSessionTicket.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslSessionTicket.setDescription('Whether to enforce session ticket per RFC5077.')
ltmClientSslFwdpEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslFwdpEnabled.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslFwdpEnabled.setDescription('Whether to enable SSL Forward Proxy.')
ltmClientSslFwdpCaKey = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 30), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslFwdpCaKey.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslFwdpCaKey.setDescription('The CA key object name for Foward Proxy.')
ltmClientSslFwdpCaCert = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 31), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslFwdpCaCert.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslFwdpCaCert.setDescription('The CA certificate object name for Foward Proxy.')
ltmClientSslFwdpCaPassphrase = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 32), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslFwdpCaPassphrase.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslFwdpCaPassphrase.setDescription('The CA key passphrase for Foward Proxy (if any).')
ltmClientSslFwdpCertLifespan = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslFwdpCertLifespan.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslFwdpCertLifespan.setDescription('The lifespan of the generated certificates for Foward Proxy.')
ltmClientSslFwdpCertExtensionIncludes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslFwdpCertExtensionIncludes.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslFwdpCertExtensionIncludes.setDescription('The certificate extensions to include in generated certificates for Forward Proxy. SSL_FWDP_CERT_EXT_AUTHORITY_KEY_IDENTIFIER = 1 SSL_FWDP_CERT_EXT_BASIC_CONSTRAINTS = 2 SSL_FWDP_CERT_EXT_CERTIFICATE_POLICIES = 4 SSL_FWDP_CERT_EXT_CRL_DISTRIBUTION_POINTS = 8 SSL_FWDP_CERT_EXT_EXTENDED_KEY_USAGE = 16 SSL_FWDP_CERT_EXT_FRESH_CRL = 32 SSL_FWDP_CERT_EXT_ISSUER_ALTERNATIVE_NAME = 64 SSL_FWDP_CERT_EXT_KEY_USAGE = 128 SSL_FWDP_CERT_EXT_SUBJECT_ALTERNATIVE_NAME = 256 SSL_FWDP_CERT_EXT_SUBJECT_DIRECTORY_ATTRIBUTES = 512 SSL_FWDP_CERT_EXT_SUBJECT_KEY_IDENTIFIER = 1024')
ltmClientSslFwdpLookupByIpaddrPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslFwdpLookupByIpaddrPort.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslFwdpLookupByIpaddrPort.setDescription('Whether to enable SSL Forward Proxy certificate caching by IPAddr-Port.')
ltmClientSslGenericAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslGenericAlert.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslGenericAlert.setDescription('Whether to use generic alert number in Alert message.')
ltmClientSslSslSignHash = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("any", 0), ("sha1", 1), ("sha256", 2), ("sha384", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslSslSignHash.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslSslSignHash.setDescription('The ssl sign hash algorithm.')
ltmClientSslFwdpBypassEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslFwdpBypassEnabled.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslFwdpBypassEnabled.setDescription('Whether to enable SSL Forward Proxy Bypass.')
ltmClientSslFwdpBypassDipBList = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 39), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslFwdpBypassDipBList.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslFwdpBypassDipBList.setDescription('The Forward Proxy Bypass Destination IP Blacklist (if any).')
ltmClientSslFwdpBypassDipWList = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 40), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslFwdpBypassDipWList.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslFwdpBypassDipWList.setDescription('The Forward Proxy Bypass Destination IP Whitelist (if any).')
ltmClientSslFwdpBypassSipBList = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 41), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslFwdpBypassSipBList.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslFwdpBypassSipBList.setDescription('The Forward Proxy Bypass Source IP Blacklist (if any).')
ltmClientSslFwdpBypassSipWList = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 42), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslFwdpBypassSipWList.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslFwdpBypassSipWList.setDescription('The Forward Proxy Bypass Source IP Whitelist (if any).')
ltmClientSslFwdpBypassHnBList = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 43), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslFwdpBypassHnBList.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslFwdpBypassHnBList.setDescription('The Forward Proxy Bypass Hostname Blacklist (if any).')
ltmClientSslFwdpBypassHnWList = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 44), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslFwdpBypassHnWList.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslFwdpBypassHnWList.setDescription('The Forward Proxy Bypass Hostname Whitelist (if any).')
ltmClientSslProxySsl = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslProxySsl.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslProxySsl.setDescription('Whether to enable Proxy SSL.')
ltmClientSslProxySslPassthrough = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslProxySslPassthrough.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslProxySslPassthrough.setDescription('Whether to enable Proxy SSL passthrough.')
ltmClientSslPeerNoRenegotiateTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 47), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslPeerNoRenegotiateTimeout.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslPeerNoRenegotiateTimeout.setDescription('The peer no-renegotiate timeout in seconds.')
ltmClientSslMaxRenegotiationsPerMin = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 48), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslMaxRenegotiationsPerMin.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslMaxRenegotiationsPerMin.setDescription('Maximum SSL renegotiations per minute.')
ltmClientSslSessionMirroring = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslSessionMirroring.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslSessionMirroring.setDescription('Whether to mirror ssl sessions to HA peer.')
ltmClientSslStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmClientSslStatResetStats.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatResetStats.setDescription('The action to reset resetable statistics data in ltmClientSslProfileStat. Setting this value to 1 will reset statistics data. Note, some statistics data may not be reset including data that are incremental counters.')
ltmClientSslStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatNumber.setDescription('The number of ltmClientSslProfileStat entries in the table.')
ltmClientSslStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3), )
if mibBuilder.loadTexts: ltmClientSslStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatTable.setDescription('A table containing information of the client-side SSL profiles.(BIG-IP acts as an SSL server)')
ltmClientSslStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmClientSslStatName"))
if mibBuilder.loadTexts: ltmClientSslStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatEntry.setDescription('Columns in the ltmClientSslStat Table')
ltmClientSslStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatName.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatName.setDescription('The name of a client-side SSL profile.')
ltmClientSslStatCurConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatCurConns.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatCurConns.setDescription('The current number of concurrent connections with established SSL sessions being maintained by the filter.')
ltmClientSslStatMaxConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatMaxConns.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatMaxConns.setDescription('The maximum number of concurrent connections with established SSL sessions being maintained by the filter.')
ltmClientSslStatCurNativeConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatCurNativeConns.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatCurNativeConns.setDescription('The current number of concurrent native connections with established SSL sessions being maintained by the filter.')
ltmClientSslStatMaxNativeConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatMaxNativeConns.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatMaxNativeConns.setDescription('The maximum number of concurrent native connections with established SSL sessions being maintained by the filter.')
ltmClientSslStatTotNativeConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatTotNativeConns.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatTotNativeConns.setDescription('The total number of concurrent native connections with established SSL sessions being maintained by the filter.')
ltmClientSslStatCurCompatConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatCurCompatConns.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatCurCompatConns.setDescription('The current number of concurrent compat connections with established SSL sessions being maintained by the filter.')
ltmClientSslStatMaxCompatConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatMaxCompatConns.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatMaxCompatConns.setDescription('The maximum number of concurrent compat connections with established SSL sessions being maintained by the filter.')
ltmClientSslStatTotCompatConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatTotCompatConns.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatTotCompatConns.setDescription('The total number of concurrent compat connections with established SSL sessions being maintained by the filter.')
ltmClientSslStatEncryptedBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatEncryptedBytesIn.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatEncryptedBytesIn.setDescription('The total encrypted bytes received.')
ltmClientSslStatEncryptedBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatEncryptedBytesOut.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatEncryptedBytesOut.setDescription('The total encrypted bytes sent.')
ltmClientSslStatDecryptedBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatDecryptedBytesIn.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatDecryptedBytesIn.setDescription('The total decrypted bytes received.')
ltmClientSslStatDecryptedBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatDecryptedBytesOut.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatDecryptedBytesOut.setDescription('The total decrypted bytes sent.')
ltmClientSslStatRecordsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatRecordsIn.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatRecordsIn.setDescription('The total records received.')
ltmClientSslStatRecordsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatRecordsOut.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatRecordsOut.setDescription('The total records sent.')
ltmClientSslStatFullyHwAcceleratedConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatFullyHwAcceleratedConns.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatFullyHwAcceleratedConns.setDescription('Fully hardware-accelerated implies usage of the Cavium Nitrox or similar hardware accelerator such that all significant cryptographic operations are offloaded, including but not limited to the SSL handshake (at least the RSA/DSA/DH operations) and record processing (at least the bulk cipher plus MAC).')
ltmClientSslStatPartiallyHwAcceleratedConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatPartiallyHwAcceleratedConns.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatPartiallyHwAcceleratedConns.setDescription('Partially hardware-accelerated indicates that at least the RSA decryptions are offloaded.')
ltmClientSslStatNonHwAcceleratedConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatNonHwAcceleratedConns.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatNonHwAcceleratedConns.setDescription('Non-accelerated connections are those for which no steady-state hardware acceleration is available (either because no hardware accelerators are available or because the necessary cryptographic operations are unsupported). Because the extent of hardware acceleration may not be known until a connection has closed (mid-stream SSL handshakes might renegotiate an SSL session not supported by hardware acceleration), this statistic will not be updated for a given connection until it has closed.')
ltmClientSslStatPrematureDisconnects = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatPrematureDisconnects.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatPrematureDisconnects.setDescription('The number of connections disconnected before SSL session establishment: the total number of connections that were prematurely closed before an SSL session was established, not including connections in passthrough mode.')
ltmClientSslStatMidstreamRenegotiations = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatMidstreamRenegotiations.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatMidstreamRenegotiations.setDescription('The number of mid-stream SSL re-negotiations, not including initial SSL session establishment.')
ltmClientSslStatSessCacheCurEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatSessCacheCurEntries.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatSessCacheCurEntries.setDescription('The number of the current entries in this cache.')
ltmClientSslStatSessCacheHits = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatSessCacheHits.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatSessCacheHits.setDescription('The total number of the cache hits.')
ltmClientSslStatSessCacheLookups = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatSessCacheLookups.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatSessCacheLookups.setDescription('The total number of the cache lookups.')
ltmClientSslStatSessCacheOverflows = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatSessCacheOverflows.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatSessCacheOverflows.setDescription('The total number of the cache overflows.')
ltmClientSslStatSessCacheInvalidations = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatSessCacheInvalidations.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatSessCacheInvalidations.setDescription('The total number of the session invalidations.')
ltmClientSslStatPeercertValid = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatPeercertValid.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatPeercertValid.setDescription('The total number of the valid certificates.')
ltmClientSslStatPeercertInvalid = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatPeercertInvalid.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatPeercertInvalid.setDescription('The total number of the invalid certificates.')
ltmClientSslStatPeercertNone = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatPeercertNone.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatPeercertNone.setDescription('The total number of connections without certificates.')
ltmClientSslStatHandshakeFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatHandshakeFailures.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatHandshakeFailures.setDescription('The total number of handshake failures.')
ltmClientSslStatBadRecords = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatBadRecords.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatBadRecords.setDescription('The total number of the bad records.')
ltmClientSslStatFatalAlerts = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatFatalAlerts.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatFatalAlerts.setDescription('The total number of the fatal alerts.')
ltmClientSslStatSslv2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatSslv2.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatSslv2.setDescription('The total connections for SSL protocol version 2.')
ltmClientSslStatSslv3 = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatSslv3.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatSslv3.setDescription('The total connections for SSL protocol version 3.')
ltmClientSslStatTlsv1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatTlsv1.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatTlsv1.setDescription('The total connections for SSL TLS protocol version 1.')
ltmClientSslStatAdhKeyxchg = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatAdhKeyxchg.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatAdhKeyxchg.setDescription('The anonymous Diffie-Hellman.')
ltmClientSslStatDhDssKeyxchg = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatDhDssKeyxchg.setStatus('deprecated')
if mibBuilder.loadTexts: ltmClientSslStatDhDssKeyxchg.setDescription('Deprecated! DSS certificate is obsolete in BIGIP. The diffie-Hellman w/ DSS certificate.')
ltmClientSslStatDhRsaKeyxchg = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatDhRsaKeyxchg.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatDhRsaKeyxchg.setDescription('The diffie-Hellman w/ RSA certificate.')
ltmClientSslStatDssKeyxchg = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatDssKeyxchg.setStatus('deprecated')
if mibBuilder.loadTexts: ltmClientSslStatDssKeyxchg.setDescription('Deprecated! DSS certificate is obsolete in BIGIP. The DSS certificate.')
ltmClientSslStatEdhDssKeyxchg = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatEdhDssKeyxchg.setStatus('deprecated')
if mibBuilder.loadTexts: ltmClientSslStatEdhDssKeyxchg.setDescription('Deprecated! DSS certificate is obsolete in BIGIP. The ephemeral Diffie-Hellman w/ DSS cert.')
ltmClientSslStatRsaKeyxchg = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatRsaKeyxchg.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatRsaKeyxchg.setDescription('The RSA certificate.')
ltmClientSslStatNullBulk = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatNullBulk.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatNullBulk.setDescription('No encryption.')
ltmClientSslStatAesBulk = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatAesBulk.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatAesBulk.setDescription('Advanced Encryption Standard (CBC).')
ltmClientSslStatDesBulk = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatDesBulk.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatDesBulk.setDescription('Digital Encryption Standard (CBC).')
ltmClientSslStatIdeaBulk = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 44), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatIdeaBulk.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatIdeaBulk.setDescription('IDEA (old SSLv2 cipher).')
ltmClientSslStatRc2Bulk = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatRc2Bulk.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatRc2Bulk.setDescription('Rivest Cipher 2 (CBC).')
ltmClientSslStatRc4Bulk = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 46), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatRc4Bulk.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatRc4Bulk.setDescription('Rivest Cipher 4 (CBC).')
ltmClientSslStatNullDigest = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 47), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatNullDigest.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatNullDigest.setDescription('No message authentication.')
ltmClientSslStatMd5Digest = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 48), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatMd5Digest.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatMd5Digest.setDescription('Message Digest 5.')
ltmClientSslStatShaDigest = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 49), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatShaDigest.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatShaDigest.setDescription('Secure Hash Algorithm.')
ltmClientSslStatNotssl = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 50), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatNotssl.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatNotssl.setDescription('The total number of the bad client greetings.')
ltmClientSslStatEdhRsaKeyxchg = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 51), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatEdhRsaKeyxchg.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatEdhRsaKeyxchg.setDescription('Ephemeral Diffie-Hellman w/ RSA cert.')
ltmClientSslStatSecureHandshakes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 52), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatSecureHandshakes.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatSecureHandshakes.setDescription('The number of handshakes, including mid-stream re-negotiations, performed with peers supporting SSL secure renegotiation.')
ltmClientSslStatInsecureHandshakeAccepts = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 53), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatInsecureHandshakeAccepts.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatInsecureHandshakeAccepts.setDescription('The number of handshakes, including mid-stream re-negotiations, performed with peers not supporting SSL secure renegotiation.')
ltmClientSslStatInsecureHandshakeRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 54), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatInsecureHandshakeRejects.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatInsecureHandshakeRejects.setDescription('The number of rejected initial handshakes with peers not supporting SSL secure renegotiation.')
ltmClientSslStatInsecureRenegotiationRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 55), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatInsecureRenegotiationRejects.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatInsecureRenegotiationRejects.setDescription('The number of rejected renegotiation attempts by peers not supporting SSL secure renegotiation.')
ltmClientSslStatSniRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 56), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatSniRejects.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatSniRejects.setDescription('The number of rejected handshake attempts by peers not supporting SSL SNI extension or having mismatched server names.')
ltmClientSslStatTlsv11 = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 57), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatTlsv11.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatTlsv11.setDescription('The total connections for SSL TLS protocol version 1.1.')
ltmClientSslStatTlsv12 = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 58), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatTlsv12.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatTlsv12.setDescription('The total connections for SSL TLS protocol version 1.2.')
ltmClientSslStatDtlsv1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 59), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatDtlsv1.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatDtlsv1.setDescription('The total connections for SSL DTLS protocol version 1.0.')
ltmClientSslStatReused = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 60), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatReused.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatReused.setDescription('The total reused session ticket sessions.')
ltmClientSslStatReuseFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 61), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatReuseFailed.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatReuseFailed.setDescription('The total failed reused session ticket sessions.')
ltmClientSslStatEcdheRsaKeyxchg = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 62), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatEcdheRsaKeyxchg.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatEcdheRsaKeyxchg.setDescription('Ephemeral ECDH w/ RSA cert.')
ltmClientSslStatConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 63), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatConns.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatConns.setDescription('The total connections using SSL FWDP feature.')
ltmClientSslStatCachedCerts = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 64), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatCachedCerts.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatCachedCerts.setDescription('The total cached SSL FWDP certificates.')
ltmClientSslStatEcdhRsaKeyxchg = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 65), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatEcdhRsaKeyxchg.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatEcdhRsaKeyxchg.setDescription('Fixed ECDH with RSA signed cert.')
ltmClientSslStatEcdheEcdsaKeyxchg = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 66), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatEcdheEcdsaKeyxchg.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatEcdheEcdsaKeyxchg.setDescription('Ephemeral ECDH with ECDSA cert.')
ltmClientSslStatEcdhEcdsaKeyxchg = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 67), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatEcdhEcdsaKeyxchg.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatEcdhEcdsaKeyxchg.setDescription('Fixed ECDH with ECDSA cert.')
ltmClientSslStatDheDssKeyxchg = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 68), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatDheDssKeyxchg.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatDheDssKeyxchg.setDescription('Ephemeral DH with DSS cert.')
ltmClientSslStatAesGcmBulk = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 69), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatAesGcmBulk.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatAesGcmBulk.setDescription('Advanced Encryption Standard Galois Counter Mode (AES-GCM).')
ltmClientSslStatDestinationIpBypasses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 70), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatDestinationIpBypasses.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatDestinationIpBypasses.setDescription('The total destination IP bypasses using SSL FWDP bypass feature.')
ltmClientSslStatSourceIpBypasses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 71), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatSourceIpBypasses.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatSourceIpBypasses.setDescription('The total source IP bypasses using SSL FWDP bypass feature.')
ltmClientSslStatHostnameBypasses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 72), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatHostnameBypasses.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatHostnameBypasses.setDescription('The total hostname bypasses using SSL FWDP bypass feature.')
ltmClientSslStatRenegotiationsRejected = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 73), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatRenegotiationsRejected.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatRenegotiationsRejected.setDescription('The total number of renegotiations rejected.')
ltmClientSslStatOcspStaplingConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 74), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatOcspStaplingConns.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatOcspStaplingConns.setDescription('The total connections sending the status-request extension in the client hello.')
ltmClientSslStatOcspStaplingResponseStatusErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 75), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatOcspStaplingResponseStatusErrors.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatOcspStaplingResponseStatusErrors.setDescription('The total OCSP response errors.')
ltmClientSslStatOcspStaplingResponseValidationErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 76), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatOcspStaplingResponseValidationErrors.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatOcspStaplingResponseValidationErrors.setDescription('The total OCSP response validation errors.')
ltmClientSslStatOcspStaplingCertStatusErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 77), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatOcspStaplingCertStatusErrors.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatOcspStaplingCertStatusErrors.setDescription('The total certificate status errors (revoked, unknown).')
ltmClientSslStatOcspStaplingOcspConnHttpErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 78), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatOcspStaplingOcspConnHttpErrors.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatOcspStaplingOcspConnHttpErrors.setDescription('The total HTTP errors on the connection made to fetch the OCSP response.')
ltmClientSslStatOcspStaplingOcspConnTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 79), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatOcspStaplingOcspConnTimeouts.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatOcspStaplingOcspConnTimeouts.setDescription('The total timeouts on the connection made to fetch the OCSP response.')
ltmClientSslStatOcspStaplingOcspConnFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 80), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatOcspStaplingOcspConnFailures.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatOcspStaplingOcspConnFailures.setDescription('The total connection failures when fetching OCSP response.')
ltmServerSslNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslNumber.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslNumber.setDescription('The number of ltmServerSslProfile entries in the table.')
ltmServerSslTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2), )
if mibBuilder.loadTexts: ltmServerSslTable.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslTable.setDescription('A table containing statistic information of the server-side SSL profiles.(BIG-IP acts as an SSL client)')
ltmServerSslEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmServerSslName"))
if mibBuilder.loadTexts: ltmServerSslEntry.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslEntry.setDescription('Columns in the ltmServerSsl Table')
ltmServerSslName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslName.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslName.setDescription('The name of a server-side SSL profile.')
ltmServerSslConfigSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("usercfg", 0), ("basecfg", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslConfigSource.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslConfigSource.setDescription('The state that specifies whether this is a base/pre-configured profile or user defined profile.')
ltmServerSslDefaultName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslDefaultName.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslDefaultName.setDescription('The name of the profile from which the specified profile derives its attribute default values.')
ltmServerSslMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslMode.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslMode.setDescription('The status of this profile.')
ltmServerSslKey = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2, 1, 5), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslKey.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslKey.setDescription('The key file name.')
ltmServerSslCert = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2, 1, 6), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslCert.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslCert.setDescription('The certificate file name.')
ltmServerSslChain = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2, 1, 7), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslChain.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslChain.setDescription('The certificate chain file name.')
ltmServerSslCafile = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2, 1, 8), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslCafile.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslCafile.setDescription('The CA certificate file name.')
ltmServerSslCrlfile = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2, 1, 9), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslCrlfile.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslCrlfile.setDescription('The CRL file name.')
ltmServerSslCiphers = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2, 1, 10), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslCiphers.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslCiphers.setDescription('The set of ciphers available for server-side SSL negotiation.')
ltmServerSslPassphrase = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2, 1, 11), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslPassphrase.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslPassphrase.setDescription('The key passphrase (if any).')
ltmServerSslOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslOptions.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslOptions.setDescription('The SSL options. SSLOPT_MICROSOFT_SESS_ID_BUG = 1 SSLOPT_NETSCAPE_CHALLENGE_BUG = 2 SSLOPT_NETSCAPE_REUSE_CIPHER_CHANGE_BUG = 8 SSLOPT_SSLREF2_REUSE_CERT_TYPE_BUG = 16 SSLOPT_MICROSOFT_BIG_SSLV3_BUFFER = 32 SSLOPT_MSIE_SSLV2_RSA_PADDING = 64 SSLOPT_SSLEAY_080_CLIENT_DH_BUG = 128 SSLOPT_TLS_D5_BUG = 256 SSLOPT_TLS_BLOCK_PADDING_BUG = 512 SSLOPT_DONT_INSERT_EMPTY_FRAGMENTS = 2048 SSLOPT_ALL_BUGFIXES = 4095 SSLOPT_PASSIVE_CLOSE = 4096 SSLOPT_NO_SESSION_RESUMPTION_ON_RENEGOTIATION = 65536 SSLOPT_SINGLE_DH_USE = 1048576 SSLOPT_EPHEMERAL_RSA = 2097152 SSLOPT_CIPHER_SERVER_PREFERENCE = 4194304 SSLOPT_TLS_ROLLBACK_BUG = 8388608 SSLOPT_NO_SSLv2 = 16777216 SSLOPT_NO_SSLv3 = 33554432 SSLOPT_NO_TLSv1 = 67108864 SSLOPT_PKCS1_CHECK_1 = 134217728 SSLOPT_PKCS1_CHECK_2 = 268435456 SSLOPT_NETSCAPE_CA_DN_BUG = 536870912 SSLOPT_NETSCAPE_DEMO_CIPHER_CHANGE_BUG = 1073741824')
ltmServerSslModsslmethods = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslModsslmethods.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslModsslmethods.setDescription('The status of using ModSSL method emulation.')
ltmServerSslRenegotiatePeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslRenegotiatePeriod.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslRenegotiatePeriod.setDescription('Time-based trigger.')
ltmServerSslRenegotiateSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslRenegotiateSize.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslRenegotiateSize.setDescription('Throughput-based trigger MB.')
ltmServerSslPeerCertMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ignore", 0), ("require", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslPeerCertMode.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslPeerCertMode.setDescription('The mode of peer certification.')
ltmServerSslAuthenticateOnce = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslAuthenticateOnce.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslAuthenticateOnce.setDescription('The feature to request server cert with each SSL session renegotiation.')
ltmServerSslAuthenticateDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslAuthenticateDepth.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslAuthenticateDepth.setDescription('The max traversal depth for client certificate chain.')
ltmServerSslAuthenticateName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2, 1, 19), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslAuthenticateName.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslAuthenticateName.setDescription('The expected server certificate DN(Domain Name).')
ltmServerSslUncleanShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslUncleanShutdown.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslUncleanShutdown.setDescription('The state of shutdown for this SSL, whether it is unclean shutdown (not sending a close notification alert when closing connection.).')
ltmServerSslStrictResume = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStrictResume.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStrictResume.setDescription('The feature whether to enforce strict SSL session resumption per RFC2246')
ltmServerSslHandshakeTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslHandshakeTimeout.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslHandshakeTimeout.setDescription('The handshake timeout in seconds.')
ltmServerSslAlertTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslAlertTimeout.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslAlertTimeout.setDescription('The alert timeout in seconds.')
ltmServerSslCacheSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslCacheSize.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslCacheSize.setDescription('The SSL session cache size.')
ltmServerSslCacheTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslCacheTimeout.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslCacheTimeout.setDescription('The SSL session cache timeout.')
ltmServerSslSessionTicket = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslSessionTicket.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslSessionTicket.setDescription('Whether to enforce session ticket per RFC5077.')
ltmServerSslFwdpEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslFwdpEnabled.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslFwdpEnabled.setDescription('Whether to enable SSL Forward Proxy.')
ltmServerSslDropExpCert = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslDropExpCert.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslDropExpCert.setDescription('Whether to drop or ignore connection when server certificate is expired.')
ltmServerSslDropUntrustCa = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslDropUntrustCa.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslDropUntrustCa.setDescription('Whether to drop or ignore connection when server certificate has invalid CA.')
ltmServerSslGenericAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslGenericAlert.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslGenericAlert.setDescription('Whether to use generic alert number in Alert message.')
ltmServerSslSslSignHash = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("any", 0), ("sha1", 1), ("sha256", 2), ("sha384", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslSslSignHash.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslSslSignHash.setDescription('The ssl sign hash algorithm.')
ltmServerSslFwdpBypassEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslFwdpBypassEnabled.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslFwdpBypassEnabled.setDescription('Whether to enable SSL Forward Proxy Bypass.')
ltmServerSslProxySsl = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslProxySsl.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslProxySsl.setDescription('Whether to enable Proxy SSL.')
ltmServerSslProxySslPassthrough = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslProxySslPassthrough.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslProxySslPassthrough.setDescription('Whether to enable Proxy SSL passthrough.')
ltmServerSslSessionMirroring = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslSessionMirroring.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslSessionMirroring.setDescription('Whether to mirror ssl sessions to HA peer.')
ltmServerSslStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmServerSslStatResetStats.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatResetStats.setDescription('The action to reset resetable statistics data in ltmServerSslProfileStat. Setting this value to 1 will reset statistics data. Note, some statistics data may not be reset including data that are incremental counters.')
ltmServerSslStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatNumber.setDescription('The number of ltmServerSslProfileStat entries in the table.')
ltmServerSslStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3), )
if mibBuilder.loadTexts: ltmServerSslStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatTable.setDescription('A table containing statistic information of the server-side SSL profiles.(BIG-IP acts as an SSL client)')
ltmServerSslStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmServerSslStatName"))
if mibBuilder.loadTexts: ltmServerSslStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatEntry.setDescription('Columns in the ltmServerSslStat Table')
ltmServerSslStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatName.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatName.setDescription('The name of a server-side SSL profile.')
ltmServerSslStatCurConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatCurConns.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatCurConns.setDescription('The current number of concurrent connections with established SSL sessions being maintained by the filter.')
ltmServerSslStatMaxConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatMaxConns.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatMaxConns.setDescription('The maximum number of concurrent connections with established SSL sessions being maintained by the filter.')
ltmServerSslStatCurNativeConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatCurNativeConns.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatCurNativeConns.setDescription('The current number of concurrent native connections with established SSL sessions being maintained by the filter.')
ltmServerSslStatMaxNativeConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatMaxNativeConns.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatMaxNativeConns.setDescription('The maximum number of concurrent native connections with established SSL sessions being maintained by the filter.')
ltmServerSslStatTotNativeConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatTotNativeConns.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatTotNativeConns.setDescription('The total number of concurrent native connections with established SSL sessions being maintained by the filter.')
ltmServerSslStatCurCompatConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatCurCompatConns.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatCurCompatConns.setDescription('The current number of concurrent compat connections with established SSL sessions being maintained by the filter.')
ltmServerSslStatMaxCompatConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatMaxCompatConns.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatMaxCompatConns.setDescription('The maximum number of concurrent compat connections with established SSL sessions being maintained by the filter.')
ltmServerSslStatTotCompatConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatTotCompatConns.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatTotCompatConns.setDescription('The total number of concurrent compat connections with established SSL sessions being maintained by the filter.')
ltmServerSslStatEncryptedBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatEncryptedBytesIn.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatEncryptedBytesIn.setDescription('The total encrypted bytes received.')
ltmServerSslStatEncryptedBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatEncryptedBytesOut.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatEncryptedBytesOut.setDescription('The total encrypted bytes sent.')
ltmServerSslStatDecryptedBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatDecryptedBytesIn.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatDecryptedBytesIn.setDescription('The total decrypted bytes received.')
ltmServerSslStatDecryptedBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatDecryptedBytesOut.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatDecryptedBytesOut.setDescription('The total decrypted bytes sent.')
ltmServerSslStatRecordsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatRecordsIn.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatRecordsIn.setDescription('The total records received.')
ltmServerSslStatRecordsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatRecordsOut.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatRecordsOut.setDescription('The total records sent.')
ltmServerSslStatFullyHwAcceleratedConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatFullyHwAcceleratedConns.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatFullyHwAcceleratedConns.setDescription('Fully hardware-accelerated implies usage of the Cavium Nitrox or similar hardware accelerator such that all significant cryptographic operations are offloaded, including but not limited to the SSL handshake (at least the RSA/DSA/DH operations) and record processing (at least the bulk cipher plus MAC).')
ltmServerSslStatPartiallyHwAcceleratedConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatPartiallyHwAcceleratedConns.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatPartiallyHwAcceleratedConns.setDescription('Partially hardware-accelerated indicates that at least the RSA decryptions are offloaded.')
ltmServerSslStatNonHwAcceleratedConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatNonHwAcceleratedConns.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatNonHwAcceleratedConns.setDescription('Non-accelerated connections are those for which no steady-state hardware acceleration is available (either because no hardware accelerators are available or because the necessary cryptographic operations are unsupported). Because the extent of hardware acceleration may not be known until a connection has closed (mid-stream SSL handshakes might renegotiate an SSL session not supported by hardware acceleration), this statistic will not be updated for a given connection until it has closed.')
ltmServerSslStatPrematureDisconnects = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatPrematureDisconnects.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatPrematureDisconnects.setDescription('The number of connections disconnected before SSL session establishment: the total number of connections that were prematurely closed before an SSL session was established, not including connections in pass-through mode.')
ltmServerSslStatMidstreamRenegotiations = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatMidstreamRenegotiations.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatMidstreamRenegotiations.setDescription('The number of mid-stream SSL re-negotiations, not including initial SSL session establishment.')
ltmServerSslStatSessCacheCurEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatSessCacheCurEntries.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatSessCacheCurEntries.setDescription('The number of the current entries in this cache.')
ltmServerSslStatSessCacheHits = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatSessCacheHits.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatSessCacheHits.setDescription('The total number of the cache hits.')
ltmServerSslStatSessCacheLookups = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatSessCacheLookups.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatSessCacheLookups.setDescription('The total number of the cache lookups.')
ltmServerSslStatSessCacheOverflows = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatSessCacheOverflows.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatSessCacheOverflows.setDescription('The total number of the cache overflows.')
ltmServerSslStatSessCacheInvalidations = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatSessCacheInvalidations.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatSessCacheInvalidations.setDescription('The total number of the session invalidations.')
ltmServerSslStatPeercertValid = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatPeercertValid.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatPeercertValid.setDescription('The total number of the valid certificates.')
ltmServerSslStatPeercertInvalid = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatPeercertInvalid.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatPeercertInvalid.setDescription('The total number of the invalid certificates.')
ltmServerSslStatPeercertNone = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatPeercertNone.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatPeercertNone.setDescription('The total number of connections without certificates.')
ltmServerSslStatHandshakeFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatHandshakeFailures.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatHandshakeFailures.setDescription('The total number of handshake failures.')
ltmServerSslStatBadRecords = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatBadRecords.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatBadRecords.setDescription('The total number of the bad records.')
ltmServerSslStatFatalAlerts = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatFatalAlerts.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatFatalAlerts.setDescription('The total number of the fatal alerts.')
ltmServerSslStatSslv2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatSslv2.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatSslv2.setDescription('The total connections for SSL protocol version 2.')
ltmServerSslStatSslv3 = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatSslv3.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatSslv3.setDescription('The total connections for SSL protocol version 3.')
ltmServerSslStatTlsv1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatTlsv1.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatTlsv1.setDescription('The total connections for SSL TLS protocol version 1.')
ltmServerSslStatAdhKeyxchg = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatAdhKeyxchg.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatAdhKeyxchg.setDescription('The anonymous Diffie-Hellman.')
ltmServerSslStatDhDssKeyxchg = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatDhDssKeyxchg.setStatus('deprecated')
if mibBuilder.loadTexts: ltmServerSslStatDhDssKeyxchg.setDescription('Deprecated! DSS certificate is obsolete in BIGIP. The diffie-Hellman w/ DSS certificate.')
ltmServerSslStatDhRsaKeyxchg = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatDhRsaKeyxchg.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatDhRsaKeyxchg.setDescription('The diffie-Hellman w/ RSA certificate.')
ltmServerSslStatDssKeyxchg = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatDssKeyxchg.setStatus('deprecated')
if mibBuilder.loadTexts: ltmServerSslStatDssKeyxchg.setDescription('Deprecated! DSS certificate is obsolete in BIGIP. The DSS certificate.')
ltmServerSslStatEdhDssKeyxchg = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatEdhDssKeyxchg.setStatus('deprecated')
if mibBuilder.loadTexts: ltmServerSslStatEdhDssKeyxchg.setDescription('Deprecated! DSS certificate is obsolete in BIGIP. The ephemeral Diffie-Hellman w/ DSS cert.')
ltmServerSslStatRsaKeyxchg = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatRsaKeyxchg.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatRsaKeyxchg.setDescription('The RSA certificate.')
ltmServerSslStatNullBulk = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatNullBulk.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatNullBulk.setDescription('No encryption.')
ltmServerSslStatAesBulk = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatAesBulk.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatAesBulk.setDescription('Advanced Encryption Standard (CBC).')
ltmServerSslStatDesBulk = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatDesBulk.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatDesBulk.setDescription('Digital Encryption Standard (CBC).')
ltmServerSslStatIdeaBulk = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 44), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatIdeaBulk.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatIdeaBulk.setDescription('IDEA (old SSLv2 cipher).')
ltmServerSslStatRc2Bulk = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatRc2Bulk.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatRc2Bulk.setDescription('Rivest Cipher 2 (CBC).')
ltmServerSslStatRc4Bulk = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 46), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatRc4Bulk.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatRc4Bulk.setDescription('Rivest Cipher 4 (CBC).')
ltmServerSslStatNullDigest = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 47), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatNullDigest.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatNullDigest.setDescription('No message authentication.')
ltmServerSslStatMd5Digest = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 48), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatMd5Digest.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatMd5Digest.setDescription('Message Digest 5.')
ltmServerSslStatShaDigest = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 49), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatShaDigest.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatShaDigest.setDescription('Secure Hash Algorithm.')
ltmServerSslStatNotssl = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 50), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatNotssl.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatNotssl.setDescription('The total number of the bad client greetings.')
ltmServerSslStatEdhRsaKeyxchg = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 51), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatEdhRsaKeyxchg.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatEdhRsaKeyxchg.setDescription('Ephemeral Diffie-Hellman w/ RSA cert.')
ltmServerSslStatSecureHandshakes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 52), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatSecureHandshakes.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatSecureHandshakes.setDescription('The number of handshakes, including mid-stream re-negotiations, performed with peers supporting SSL secure renegotiation.')
ltmServerSslStatInsecureHandshakeAccepts = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 53), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatInsecureHandshakeAccepts.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatInsecureHandshakeAccepts.setDescription('The number of handshakes, including mid-stream re-negotiations, performed with peers not supporting SSL secure renegotiation.')
ltmServerSslStatInsecureHandshakeRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 54), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatInsecureHandshakeRejects.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatInsecureHandshakeRejects.setDescription('The number of rejected initial handshakes with peers not supporting SSL secure renegotiation.')
ltmServerSslStatInsecureRenegotiationRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 55), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatInsecureRenegotiationRejects.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatInsecureRenegotiationRejects.setDescription('The number of rejected renegotiation attempts by peers not supporting SSL secure renegotiation.')
ltmServerSslStatSniRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 56), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatSniRejects.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatSniRejects.setDescription('The number of rejected handshake attempts by peers not supporting SSL SNI extension or having mismatched server names.')
ltmServerSslStatTlsv11 = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 57), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatTlsv11.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatTlsv11.setDescription('The total connections for SSL TLS protocol version 1.1.')
ltmServerSslStatTlsv12 = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 58), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatTlsv12.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatTlsv12.setDescription('The total connections for SSL TLS protocol version 1.2.')
ltmServerSslStatDtlsv1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 59), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatDtlsv1.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatDtlsv1.setDescription('The total connections for SSL DTLS protocol version 1.')
ltmServerSslStatReused = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 60), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatReused.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatReused.setDescription('The total reused session ticket sessions.')
ltmServerSslStatReuseFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 61), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatReuseFailed.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatReuseFailed.setDescription('The total failed reused session ticket sessions.')
ltmServerSslStatEcdheRsaKeyxchg = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 62), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatEcdheRsaKeyxchg.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatEcdheRsaKeyxchg.setDescription('Ephemeral ECDH w/ RSA cert.')
ltmServerSslStatConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 63), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatConns.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatConns.setDescription('The total connections using SSL FWDP feature.')
ltmServerSslStatEcdhRsaKeyxchg = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 64), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatEcdhRsaKeyxchg.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatEcdhRsaKeyxchg.setDescription('Fixed ECDH with RSA signed cert.')
ltmServerSslStatEcdheEcdsaKeyxchg = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 65), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatEcdheEcdsaKeyxchg.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatEcdheEcdsaKeyxchg.setDescription('Ephemeral ECDH with ECDSA cert.')
ltmServerSslStatEcdhEcdsaKeyxchg = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 66), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatEcdhEcdsaKeyxchg.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatEcdhEcdsaKeyxchg.setDescription('Fixed ECDH with ECDSA cert.')
ltmServerSslStatDheDssKeyxchg = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 67), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatDheDssKeyxchg.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatDheDssKeyxchg.setDescription('Ephemeral DH with DSS cert.')
ltmServerSslStatAesGcmBulk = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 68), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatAesGcmBulk.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatAesGcmBulk.setDescription('Advanced Encryption Standard Galois Counter Mode (AES-GCM).')
ltmServerSslStatDestinationIpBypasses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 69), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatDestinationIpBypasses.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatDestinationIpBypasses.setDescription('The total destination IP bypasses using SSL FWDP bypass feature.')
ltmServerSslStatSourceIpBypasses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 70), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatSourceIpBypasses.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatSourceIpBypasses.setDescription('The total source IP bypasses using SSL FWDP bypass feature.')
ltmServerSslStatHostnameBypasses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 71), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatHostnameBypasses.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatHostnameBypasses.setDescription('The total hostname bypasses using SSL FWDP bypass feature.')
ltmConnPoolProfileNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmConnPoolProfileNumber.setStatus('current')
if mibBuilder.loadTexts: ltmConnPoolProfileNumber.setDescription('The number of ltmConnPoolProfile entries in the table.')
ltmConnPoolProfileTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 4, 1, 2), )
if mibBuilder.loadTexts: ltmConnPoolProfileTable.setStatus('current')
if mibBuilder.loadTexts: ltmConnPoolProfileTable.setDescription('A table containing information of connection pool profiles.')
ltmConnPoolProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 4, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmConnPoolProfileName"))
if mibBuilder.loadTexts: ltmConnPoolProfileEntry.setStatus('current')
if mibBuilder.loadTexts: ltmConnPoolProfileEntry.setDescription('Columns in the ltmConnPoolProfile Table')
ltmConnPoolProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 4, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmConnPoolProfileName.setStatus('current')
if mibBuilder.loadTexts: ltmConnPoolProfileName.setDescription('The name of a connection pool profile.')
ltmConnPoolProfileConfigSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 4, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("usercfg", 0), ("basecfg", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmConnPoolProfileConfigSource.setStatus('current')
if mibBuilder.loadTexts: ltmConnPoolProfileConfigSource.setDescription('The state that specifies whether this is a base/pre-configured profile or user defined profile.')
ltmConnPoolProfileDefaultName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 4, 1, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmConnPoolProfileDefaultName.setStatus('current')
if mibBuilder.loadTexts: ltmConnPoolProfileDefaultName.setDescription('The name of the profile from which the specified profile derives its attribute default values.')
ltmConnPoolProfileSrcMaskType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 4, 1, 2, 1, 4), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmConnPoolProfileSrcMaskType.setStatus('current')
if mibBuilder.loadTexts: ltmConnPoolProfileSrcMaskType.setDescription('The IP address type of ltmConnPoolSrcMask')
ltmConnPoolProfileSrcMask = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 4, 1, 2, 1, 5), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmConnPoolProfileSrcMask.setStatus('current')
if mibBuilder.loadTexts: ltmConnPoolProfileSrcMask.setDescription('The mask applied to source address to determine eligibility for reuse. It is interpreted within the context of an ltmConnPoolSrcMaskType value.')
ltmConnPoolProfileMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 4, 1, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmConnPoolProfileMaxSize.setStatus('current')
if mibBuilder.loadTexts: ltmConnPoolProfileMaxSize.setDescription('The maximum number of connections in pool.')
ltmConnPoolProfileMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 4, 1, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmConnPoolProfileMaxAge.setStatus('current')
if mibBuilder.loadTexts: ltmConnPoolProfileMaxAge.setDescription("The maximum time in seconds to reuse of connections. Don't reuse connections older than max_age seconds.")
ltmConnPoolProfileMaxReuse = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 4, 1, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmConnPoolProfileMaxReuse.setStatus('current')
if mibBuilder.loadTexts: ltmConnPoolProfileMaxReuse.setDescription("The maximum times to reuse of connections. Don't reuse connections older than max_reuse times.")
ltmConnPoolProfileIdleTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 4, 1, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmConnPoolProfileIdleTimeout.setStatus('current')
if mibBuilder.loadTexts: ltmConnPoolProfileIdleTimeout.setDescription('The idle timeout for connections in the pool.')
ltmConnPoolProfileStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 4, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmConnPoolProfileStatResetStats.setStatus('current')
if mibBuilder.loadTexts: ltmConnPoolProfileStatResetStats.setDescription('The action to reset resetable statistics data in ltmConnPoolProfileStat. Setting this value to 1 will reset statistics data. Note, some statistics data may not be reset including data that are incremental counters.')
ltmConnPoolProfileStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 4, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmConnPoolProfileStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmConnPoolProfileStatNumber.setDescription('The number of ltmConnPoolProfileStat entries in the table.')
ltmConnPoolProfileStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 4, 2, 3), )
if mibBuilder.loadTexts: ltmConnPoolProfileStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmConnPoolProfileStatTable.setDescription('A table containing statistic information of connection pool profiles.')
ltmConnPoolProfileStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 4, 2, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmConnPoolProfileStatName"))
if mibBuilder.loadTexts: ltmConnPoolProfileStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmConnPoolProfileStatEntry.setDescription('Columns in the ltmConnPoolProfileStat Table')
ltmConnPoolProfileStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 4, 2, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmConnPoolProfileStatName.setStatus('current')
if mibBuilder.loadTexts: ltmConnPoolProfileStatName.setDescription('The name of a connection pool profile.')
ltmConnPoolProfileStatCurSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 4, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmConnPoolProfileStatCurSize.setStatus('current')
if mibBuilder.loadTexts: ltmConnPoolProfileStatCurSize.setDescription('The number of currently idle connections in the pool.')
ltmConnPoolProfileStatMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 4, 2, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmConnPoolProfileStatMaxSize.setStatus('current')
if mibBuilder.loadTexts: ltmConnPoolProfileStatMaxSize.setDescription('The number of idle connections in the pool.')
ltmConnPoolProfileStatReuses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 4, 2, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmConnPoolProfileStatReuses.setStatus('current')
if mibBuilder.loadTexts: ltmConnPoolProfileStatReuses.setDescription('The number of times a connection was reused from the pool.')
ltmConnPoolProfileStatConnects = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 4, 2, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmConnPoolProfileStatConnects.setStatus('current')
if mibBuilder.loadTexts: ltmConnPoolProfileStatConnects.setDescription('The number of times a new connection was initiated.')
ltmFastL4ProfileNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileNumber.setStatus('current')
if mibBuilder.loadTexts: ltmFastL4ProfileNumber.setDescription('The number of ltmFastL4Profile entries in the table.')
ltmFastL4ProfileTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 1, 2), )
if mibBuilder.loadTexts: ltmFastL4ProfileTable.setStatus('current')
if mibBuilder.loadTexts: ltmFastL4ProfileTable.setDescription('A table containing information of fast L4 profiles.')
ltmFastL4ProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileName"))
if mibBuilder.loadTexts: ltmFastL4ProfileEntry.setStatus('current')
if mibBuilder.loadTexts: ltmFastL4ProfileEntry.setDescription('Columns in the ltmFastL4Profile Table')
ltmFastL4ProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileName.setStatus('current')
if mibBuilder.loadTexts: ltmFastL4ProfileName.setDescription('The name of a fast L4 profile.')
ltmFastL4ProfileConfigSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("usercfg", 0), ("basecfg", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileConfigSource.setStatus('current')
if mibBuilder.loadTexts: ltmFastL4ProfileConfigSource.setDescription('The state that specifies whether this is a base/pre-configured profile or user defined profile.')
ltmFastL4ProfileDefaultName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 1, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileDefaultName.setStatus('current')
if mibBuilder.loadTexts: ltmFastL4ProfileDefaultName.setDescription('The name of the profile from which the specified profile derives its attribute default values.')
ltmFastL4ProfileResetOnTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileResetOnTimeout.setStatus('current')
if mibBuilder.loadTexts: ltmFastL4ProfileResetOnTimeout.setDescription('The feature of reset for idle timeout. If true and a TCP connection exceeds its idle_timeout, send a reset in addition to deleting the connection.')
ltmFastL4ProfileIpFragReass = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileIpFragReass.setStatus('current')
if mibBuilder.loadTexts: ltmFastL4ProfileIpFragReass.setDescription('The feature for reassembling IP fragments. If true, reassemble IP fragments.')
ltmFastL4ProfileIdleTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 1, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileIdleTimeout.setStatus('current')
if mibBuilder.loadTexts: ltmFastL4ProfileIdleTimeout.setDescription('The number of seconds without traffic before a connection is eligible for deletion.')
ltmFastL4ProfileTcpHandshakeTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 1, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileTcpHandshakeTimeout.setStatus('current')
if mibBuilder.loadTexts: ltmFastL4ProfileTcpHandshakeTimeout.setDescription('The number of seconds without traffic before a connection in the SYN received state is eligible for deletion. If set to 0, ltmFastL4ProfileIdleTimeout will be used.')
ltmFastL4ProfileMssOverride = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 1, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileMssOverride.setStatus('current')
if mibBuilder.loadTexts: ltmFastL4ProfileMssOverride.setDescription('If non-zero and less than the 1460 default, this value overrides the maximum segment size')
ltmFastL4ProfilePvaAccelMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("full", 0), ("partial", 1), ("none", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfilePvaAccelMode.setStatus('current')
if mibBuilder.loadTexts: ltmFastL4ProfilePvaAccelMode.setDescription('The preferred Packet Velocity ASIC (PVA) acceleration mode.')
ltmFastL4ProfileTcpTimestampMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("preserve", 0), ("strip", 1), ("rewrite", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileTcpTimestampMode.setStatus('current')
if mibBuilder.loadTexts: ltmFastL4ProfileTcpTimestampMode.setDescription('The option to preserver, strip or rewrite TCP timestamps.')
ltmFastL4ProfileTcpWscaleMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("preserve", 0), ("strip", 1), ("rewrite", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileTcpWscaleMode.setStatus('current')
if mibBuilder.loadTexts: ltmFastL4ProfileTcpWscaleMode.setDescription('The option to preserver or strip window scale option.')
ltmFastL4ProfileTcpGenerateIsn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileTcpGenerateIsn.setStatus('current')
if mibBuilder.loadTexts: ltmFastL4ProfileTcpGenerateIsn.setDescription('The option to generate own sequence numbers on all SYNs conformant with RFC1948, and hence allowing timestamp recycling.')
ltmFastL4ProfileTcpStripSack = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileTcpStripSack.setStatus('current')
if mibBuilder.loadTexts: ltmFastL4ProfileTcpStripSack.setDescription('The option to block TCP SackOK option from passing to server on an initiating SYN.')
ltmFastL4ProfileIpTosToClient = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 1, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileIpTosToClient.setStatus('current')
if mibBuilder.loadTexts: ltmFastL4ProfileIpTosToClient.setDescription('The IP type of service set in packets sent to the client-side.')
ltmFastL4ProfileIpTosToServer = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 1, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileIpTosToServer.setStatus('current')
if mibBuilder.loadTexts: ltmFastL4ProfileIpTosToServer.setDescription('The IP type of service set in packets sent to the server-side.')
ltmFastL4ProfileLinkQosToClient = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 1, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileLinkQosToClient.setStatus('current')
if mibBuilder.loadTexts: ltmFastL4ProfileLinkQosToClient.setDescription('The link quality of service set in packets sent to the client-side.')
ltmFastL4ProfileLinkQosToServer = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 1, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileLinkQosToServer.setStatus('current')
if mibBuilder.loadTexts: ltmFastL4ProfileLinkQosToServer.setDescription('The link quality of service set in packets sent to the server-side.')
ltmFastL4ProfileRttFromClient = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 1, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileRttFromClient.setStatus('current')
if mibBuilder.loadTexts: ltmFastL4ProfileRttFromClient.setDescription('The option to use TCP timestamp options to measure the round trip time to the client.')
ltmFastL4ProfileRttFromServer = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 1, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileRttFromServer.setStatus('current')
if mibBuilder.loadTexts: ltmFastL4ProfileRttFromServer.setDescription('The option to use TCP timestamp options to measure the round trip time to the server.')
ltmFastL4ProfileTcpCloseTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 1, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileTcpCloseTimeout.setStatus('current')
if mibBuilder.loadTexts: ltmFastL4ProfileTcpCloseTimeout.setDescription('The number of seconds without traffic before a connection in the FIN received state is eligible for deletion. This is only used when ltmFastL4ProfileLooseInitiation or ltmFastL4ProfileLooseClose is enabled.')
ltmFastL4ProfileLooseInitiation = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 1, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileLooseInitiation.setStatus('current')
if mibBuilder.loadTexts: ltmFastL4ProfileLooseInitiation.setDescription('The option to allow any TCP packet to initiate a connection (rather than requiring a SYN.')
ltmFastL4ProfileLooseClose = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 1, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileLooseClose.setStatus('current')
if mibBuilder.loadTexts: ltmFastL4ProfileLooseClose.setDescription('The option to aggressively close out a connection by allowing TMM to switch the ltmFastL4ProfileIdleTimeout to ltmFastL4ProfileTcpCloseTimeout once the first FIN packet has been seen.')
ltmFastL4ProfileHardSyncookie = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 1, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileHardSyncookie.setStatus('current')
if mibBuilder.loadTexts: ltmFastL4ProfileHardSyncookie.setDescription('The option to enable hardware SYN cookie protection using Packet Velocity ASIC (PVA).')
ltmFastL4ProfileSoftSyncookie = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 1, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileSoftSyncookie.setStatus('current')
if mibBuilder.loadTexts: ltmFastL4ProfileSoftSyncookie.setDescription('The state indicating whether or not software SYN cookie protection is enable.')
ltmFastL4ProfileLateBinding = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 1, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileLateBinding.setStatus('current')
if mibBuilder.loadTexts: ltmFastL4ProfileLateBinding.setDescription('The state indicating whether or not Late Binding is enabled.')
ltmFastL4ProfileExplicitFlowMigration = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 1, 2, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileExplicitFlowMigration.setStatus('current')
if mibBuilder.loadTexts: ltmFastL4ProfileExplicitFlowMigration.setDescription('The state indicating whether connections are automatically migrated into the hardware (false) or whether they must be explicitly migrated to hardware by the iRule command BIGTCP::release_flow (true).')
ltmFastL4ProfileClientTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 1, 2, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileClientTimeout.setStatus('current')
if mibBuilder.loadTexts: ltmFastL4ProfileClientTimeout.setDescription('The number of seconds allowed for a client to transmit enough data to select a server when late binding is enabled.')
ltmFastL4ProfileTimeoutRecovery = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 1, 2, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disconnect", 0), ("fallback", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileTimeoutRecovery.setStatus('current')
if mibBuilder.loadTexts: ltmFastL4ProfileTimeoutRecovery.setDescription('The action to take when late binding timeout occurs on a connection.')
ltmFtpProfileNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFtpProfileNumber.setStatus('current')
if mibBuilder.loadTexts: ltmFtpProfileNumber.setDescription('The number of ltmFtpProfile entries in the table.')
ltmFtpProfileTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 6, 1, 2), )
if mibBuilder.loadTexts: ltmFtpProfileTable.setStatus('current')
if mibBuilder.loadTexts: ltmFtpProfileTable.setDescription('A table containing information of FTP profiles.')
ltmFtpProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 6, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmFtpProfileName"))
if mibBuilder.loadTexts: ltmFtpProfileEntry.setStatus('current')
if mibBuilder.loadTexts: ltmFtpProfileEntry.setDescription('Columns in the ltmFtpProfile Table')
ltmFtpProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 6, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFtpProfileName.setStatus('current')
if mibBuilder.loadTexts: ltmFtpProfileName.setDescription('The name of a FTP profile.')
ltmFtpProfileConfigSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 6, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("usercfg", 0), ("basecfg", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFtpProfileConfigSource.setStatus('current')
if mibBuilder.loadTexts: ltmFtpProfileConfigSource.setDescription('The state that specifies whether this is a base/pre-configured profile or user defined profile.')
ltmFtpProfileDefaultName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 6, 1, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFtpProfileDefaultName.setStatus('current')
if mibBuilder.loadTexts: ltmFtpProfileDefaultName.setDescription('The name of the profile from which the specified profile derives its attribute default values.')
ltmFtpProfileTranslateExtended = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 6, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFtpProfileTranslateExtended.setStatus('current')
if mibBuilder.loadTexts: ltmFtpProfileTranslateExtended.setDescription('Whether or not automatically translated RFC2428 extended requests EPSV and EPRT to PASV and PORT when talking to IPv4 servers.')
ltmFtpProfileDataPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 6, 1, 2, 1, 5), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFtpProfileDataPort.setStatus('current')
if mibBuilder.loadTexts: ltmFtpProfileDataPort.setDescription('The data channel port used for this FTP profile. By default, this is 20, but may need to be changed for non-default port FTP.')
ltmFtpProfileLogPublisher = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 6, 1, 2, 1, 6), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFtpProfileLogPublisher.setStatus('current')
if mibBuilder.loadTexts: ltmFtpProfileLogPublisher.setDescription('Specifies the name of the log publisher that logs ALG events, if any.')
ltmFtpProfileLogProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 6, 1, 2, 1, 7), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFtpProfileLogProfile.setStatus('current')
if mibBuilder.loadTexts: ltmFtpProfileLogProfile.setDescription('Specifies the name of the log profile that control the logging of ALG events, if any.')
ltmHttpProfileNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileNumber.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileNumber.setDescription('The number of ltmHttpProfile entries in the table.')
ltmHttpProfileTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2), )
if mibBuilder.loadTexts: ltmHttpProfileTable.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileTable.setDescription('A table containing information of HTTP profiles.')
ltmHttpProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmHttpProfileName"))
if mibBuilder.loadTexts: ltmHttpProfileEntry.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileEntry.setDescription('Columns in the ltmHttpProfile Table')
ltmHttpProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileName.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileName.setDescription('The name of a HTTP profile.')
ltmHttpProfileConfigSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("usercfg", 0), ("basecfg", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileConfigSource.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileConfigSource.setDescription('The state that specifies whether this is a base/pre-configured profile or user defined profile.')
ltmHttpProfileDefaultName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileDefaultName.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileDefaultName.setDescription('The name of the profile from which the specified profile derives its attribute default values.')
ltmHttpProfileBasicAuthRealm = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 4), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileBasicAuthRealm.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileBasicAuthRealm.setDescription('The basic authentication realm of the specified HTTP profile.')
ltmHttpProfileOneConnect = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileOneConnect.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileOneConnect.setDescription('The state that specifies whether OneConnect HTTP header transformation is used for the specified HTTP profile.')
ltmHttpProfileHeaderInsert = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 6), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileHeaderInsert.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileHeaderInsert.setDescription('The header to be inserted into the HTTP header for the specified HTTP profile.')
ltmHttpProfileHeaderErase = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 7), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileHeaderErase.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileHeaderErase.setDescription('The header to be erased into the HTTP header for the specified HTTP profile.')
ltmHttpProfileFallbackHost = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 8), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileFallbackHost.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileFallbackHost.setDescription('The fallback host name used in HTTP redirect for the specified HTTP profile.')
ltmHttpProfileCompressMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1), ("selective", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileCompressMode.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfileCompressMode.setDescription('Deprecated! The state that specifies whether compression is enabled.')
ltmHttpProfileCompressMinSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileCompressMinSize.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfileCompressMinSize.setDescription('Deprecated! The value that specifies the minimum length of the server responses (in bytes) to be considered acceptable for compression.')
ltmHttpProfileCompressBufferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileCompressBufferSize.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfileCompressBufferSize.setDescription("Deprecated! The value that specifies the maximum number of uncompressed bytes that the compression proxy will buffer before it decides whether or not to compress the server's response, in case the server's response headers don't specify the content length of the response.")
ltmHttpProfileCompressVaryHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileCompressVaryHeader.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfileCompressVaryHeader.setDescription("Deprecated! The state that specifies whether to insert the header 'Vary: Accept-Encoding' in the server response for responses that have been compressed. If the 'Vary:' header already exists in the server response, then the value 'Accept-Encoding' will be appended to it.")
ltmHttpProfileCompressAllowHttp10 = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileCompressAllowHttp10.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfileCompressAllowHttp10.setDescription('Deprecated! The state that specifies whether to allow compression on responses to HTTP 1.0 requests.')
ltmHttpProfileCompressGzipMemlevel = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileCompressGzipMemlevel.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfileCompressGzipMemlevel.setDescription('Deprecated! The amount of memory that the proxy will use when doing compression. It must be an integer no less than 1 and no greater than 9. Higher values produce faster compression at the expense of more memory usage. The default memory level will be 8.')
ltmHttpProfileCompressGzipWindowsize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileCompressGzipWindowsize.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfileCompressGzipWindowsize.setDescription('Deprecated! The number of bits in the window size that the compression proxy will use when compressing the server response. It should be an integer no less than 8 and no greater than 15. Higher values produce better compression ratios at the expense of more memory usage. The default window size will be 15.')
ltmHttpProfileCompressGzipLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileCompressGzipLevel.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfileCompressGzipLevel.setDescription('Deprecated! The speed of compression that is applied to the response. Minimum value is 1, maximum is 9. The lower numbers give faster compression with lower ratios, and higher numbers give slower compression with higher ratios.')
ltmHttpProfileCompressKeepAcceptEncoding = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileCompressKeepAcceptEncoding.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfileCompressKeepAcceptEncoding.setDescription('Deprecated! The state of the option to keep client-encoding header.')
ltmHttpProfileCompressBrowserWorkarounds = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileCompressBrowserWorkarounds.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfileCompressBrowserWorkarounds.setDescription("Deprecated! The option to control whether or not to disable compression for known browsers that cannot handle certain types of compressed responses properly. If it's true, compression for known browsers will be disabled.")
ltmHttpProfileResponseChunking = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("preserve", 0), ("selective", 1), ("unchunk", 2), ("rechunk", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileResponseChunking.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileResponseChunking.setDescription('The HTTP chunk mode for the responses.')
ltmHttpProfileLwsMaxColumn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileLwsMaxColumn.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileLwsMaxColumn.setDescription('The linear white space maximum column sizes used to support multi-line header insertion.')
ltmHttpProfileLwsSeparator = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 21), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileLwsSeparator.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileLwsSeparator.setDescription('The linear white space separator strings for the specified HTTP profile.')
ltmHttpProfileRedirectRewrite = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("all", 1), ("matching", 2), ("nodes", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileRedirectRewrite.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileRedirectRewrite.setDescription('The HTTP redirect/rewrite mode for the responses.')
ltmHttpProfileMaxHeaderSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileMaxHeaderSize.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileMaxHeaderSize.setDescription('The maximum size of the headers.')
ltmHttpProfilePipelining = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfilePipelining.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfilePipelining.setDescription('Deprecated! The state indicating whether pipelining is enabled for this profile.')
ltmHttpProfileInsertXforwardedFor = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileInsertXforwardedFor.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileInsertXforwardedFor.setDescription('The state indicating whether inserting X-Forwarded-For is enabled for this profile.')
ltmHttpProfileMaxRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileMaxRequests.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileMaxRequests.setDescription('The maximum connection requests allowed. The connection will be forced closed when this limit is reached.')
ltmHttpProfileCompressCpusaver = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileCompressCpusaver.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfileCompressCpusaver.setDescription('Deprecated! The state indicating whether CPU saving mode is enable or not when doing compression.')
ltmHttpProfileCompressCpusaverHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileCompressCpusaverHigh.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfileCompressCpusaverHigh.setDescription('Deprecated! The CPU saver high threshold. When CPU utilization exceeds this value, compression is switched to NULL compression.')
ltmHttpProfileCompressCpusaverLow = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileCompressCpusaverLow.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfileCompressCpusaverLow.setDescription('Deprecated! The CPU saver low threshold. When CPU utilization drops below this value, compression is switched to full throttle.')
ltmHttpProfileRamcache = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileRamcache.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfileRamcache.setDescription('Deprecated! The state the whether RAM cache is enabled or not.')
ltmHttpProfileRamcacheSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileRamcacheSize.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfileRamcacheSize.setDescription("Deprecated! The maximum cache size in MB's.")
ltmHttpProfileRamcacheMaxEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileRamcacheMaxEntries.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfileRamcacheMaxEntries.setDescription('Deprecated! The maximum cache entries.')
ltmHttpProfileRamcacheMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileRamcacheMaxAge.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfileRamcacheMaxAge.setDescription('Deprecated! The maximum age of cached object.')
ltmHttpProfileRamcacheObjectMinSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileRamcacheObjectMinSize.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfileRamcacheObjectMinSize.setDescription('Deprecated! The minimum size requirement for cached object in bytes.')
ltmHttpProfileRamcacheObjectMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileRamcacheObjectMaxSize.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfileRamcacheObjectMaxSize.setDescription('Deprecated! The maximum size limitation for cached object in bytes.')
ltmHttpProfileRamcacheIgnoreClient = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("maxage", 1), ("all", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileRamcacheIgnoreClient.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfileRamcacheIgnoreClient.setDescription('Deprecated! The state that Ram cache ignores client cache.')
ltmHttpProfileRamcacheAgingRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileRamcacheAgingRate.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfileRamcacheAgingRate.setDescription('Deprecated! The aging rate for the RAM cache.')
ltmHttpProfileRamcacheInsertAgeHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileRamcacheInsertAgeHeader.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfileRamcacheInsertAgeHeader.setDescription('Deprecated! The mode that indicates whether to insert the Age headers for RAM cache.')
ltmHttpProfileCompressPreferredMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("deflate", 0), ("gzip", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileCompressPreferredMethod.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfileCompressPreferredMethod.setDescription('Deprecated! The option for preferred compression method.')
ltmHttpProfileServerAgentName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 40), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileServerAgentName.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileServerAgentName.setDescription('The server header sent in responses that the BIG-IP itself generates. The default value is BigIP. If is no string is set as the value, then no server header will be added to such responses.')
ltmHttpProfilePassthroughPipeline = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("reject", 0), ("allow", 1), ("passthrough", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfilePassthroughPipeline.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfilePassthroughPipeline.setDescription('The state indicating behavior on seeing pipelined data in this profile.')
ltmHttpProfileTruncatedRedirects = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileTruncatedRedirects.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileTruncatedRedirects.setDescription('The state indicating behavior on seeing a truncated redirect in this profile.')
ltmHttpProfilePassthroughOversizeClientHeaders = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfilePassthroughOversizeClientHeaders.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfilePassthroughOversizeClientHeaders.setDescription('The state indicating passthrough behavior on seeing oversize client headers in this profile.')
ltmHttpProfilePassthroughOversizeServerHeaders = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfilePassthroughOversizeServerHeaders.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfilePassthroughOversizeServerHeaders.setDescription('The state indicating passthrough behavior on seeing oversize server headers in this profile.')
ltmHttpProfilePassthroughExcessClientHeaders = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfilePassthroughExcessClientHeaders.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfilePassthroughExcessClientHeaders.setDescription('The state indicating passthrough behavior on seeing excess client headers in this profile.')
ltmHttpProfilePassthroughExcessServerHeaders = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfilePassthroughExcessServerHeaders.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfilePassthroughExcessServerHeaders.setDescription('The state indicating passthrough behavior on seeing excess server headers in this profile.')
ltmHttpProfilePassthroughUnknownMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("reject", 0), ("allow", 1), ("passthrough", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfilePassthroughUnknownMethod.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfilePassthroughUnknownMethod.setDescription('The state indicating behavior on seeing an unknown method in this profile.')
ltmCompUriInclNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmCompUriInclNumber.setStatus('deprecated')
if mibBuilder.loadTexts: ltmCompUriInclNumber.setDescription('Deprecated!. The number of ltmHttpProfileCompUriIncl entries in the table.')
ltmCompUriInclTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 2, 2), )
if mibBuilder.loadTexts: ltmCompUriInclTable.setStatus('deprecated')
if mibBuilder.loadTexts: ltmCompUriInclTable.setDescription("A table containing information of regular expressions used to match the request URI part of the client requests during compression. A match must be found in at least one of the 'include' fields.")
ltmCompUriInclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 2, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmCompUriInclName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmCompUriInclIndex"))
if mibBuilder.loadTexts: ltmCompUriInclEntry.setStatus('deprecated')
if mibBuilder.loadTexts: ltmCompUriInclEntry.setDescription('Columns in the ltmCompUriIncl Table')
ltmCompUriInclName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 2, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmCompUriInclName.setStatus('deprecated')
if mibBuilder.loadTexts: ltmCompUriInclName.setDescription('The name of a HTTP profile.')
ltmCompUriInclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmCompUriInclIndex.setStatus('deprecated')
if mibBuilder.loadTexts: ltmCompUriInclIndex.setDescription("The index of the regular expression used to match the request URI part of the client requests during compression in 'include' fields for the specified HTTP profile.")
ltmCompUriInclUri = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 2, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmCompUriInclUri.setStatus('deprecated')
if mibBuilder.loadTexts: ltmCompUriInclUri.setDescription("The regular expression used to match the request URI part of the client requests during compression in 'include' fields for the specified HTTP profile.")
ltmCompUriExclNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmCompUriExclNumber.setStatus('deprecated')
if mibBuilder.loadTexts: ltmCompUriExclNumber.setDescription('Deprecated!. The number of ltmHttpProfileCompUriExcl entries in the table.')
ltmCompUriExclTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 3, 2), )
if mibBuilder.loadTexts: ltmCompUriExclTable.setStatus('deprecated')
if mibBuilder.loadTexts: ltmCompUriExclTable.setDescription("A table containing information of regular expressions used to match the request URI part of the client requests during compression. A match must be found in at least one of the 'exclude' fields.")
ltmCompUriExclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 3, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmCompUriExclName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmCompUriExclIndex"))
if mibBuilder.loadTexts: ltmCompUriExclEntry.setStatus('deprecated')
if mibBuilder.loadTexts: ltmCompUriExclEntry.setDescription('Columns in the ltmCompUriExcl Table')
ltmCompUriExclName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 3, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmCompUriExclName.setStatus('deprecated')
if mibBuilder.loadTexts: ltmCompUriExclName.setDescription('The name of a HTTP profile.')
ltmCompUriExclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmCompUriExclIndex.setStatus('deprecated')
if mibBuilder.loadTexts: ltmCompUriExclIndex.setDescription("The index of the regular expression used to match the request URI part of the client requests during compression in 'exclude' fields for the specified HTTP profile.")
ltmCompUriExclUri = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 3, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmCompUriExclUri.setStatus('deprecated')
if mibBuilder.loadTexts: ltmCompUriExclUri.setDescription("The regular expression used to match the request URI part of the client requests during compression in 'exclude' fields for the specified HTTP profile.")
ltmCompContTypeInclNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmCompContTypeInclNumber.setStatus('deprecated')
if mibBuilder.loadTexts: ltmCompContTypeInclNumber.setDescription('Deprecated!. The number of ltmHttpProfileCompContTypeIncl entries in the table.')
ltmCompContTypeInclTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 4, 2), )
if mibBuilder.loadTexts: ltmCompContTypeInclTable.setStatus('deprecated')
if mibBuilder.loadTexts: ltmCompContTypeInclTable.setDescription("A table containing information of regular expressions used to match the MIME types in the server response's 'Content-Type:' headers. A match must be found in at least one of the 'include' fields.")
ltmCompContTypeInclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 4, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmCompContTypeInclName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmCompContTypeInclIndex"))
if mibBuilder.loadTexts: ltmCompContTypeInclEntry.setStatus('deprecated')
if mibBuilder.loadTexts: ltmCompContTypeInclEntry.setDescription('Columns in the ltmCompContTypeIncl Table')
ltmCompContTypeInclName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 4, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmCompContTypeInclName.setStatus('deprecated')
if mibBuilder.loadTexts: ltmCompContTypeInclName.setDescription('The name of a HTTP profile.')
ltmCompContTypeInclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmCompContTypeInclIndex.setStatus('deprecated')
if mibBuilder.loadTexts: ltmCompContTypeInclIndex.setDescription("The index of the regular expression to match the MIME types in the server response's 'Content-Type:' headers in 'include' fields for the specified HTTP profile.")
ltmCompContTypeInclContentType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 4, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmCompContTypeInclContentType.setStatus('deprecated')
if mibBuilder.loadTexts: ltmCompContTypeInclContentType.setDescription("The regular expression used to match the MIME types in the server response's 'Content-Type:' headers in 'include' fields for the specified HTTP profile.")
ltmCompContTypeExclNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmCompContTypeExclNumber.setStatus('deprecated')
if mibBuilder.loadTexts: ltmCompContTypeExclNumber.setDescription('Deprecated!. The number of ltmHttpProfileCompContTypeExcl entries in the table.')
ltmCompContTypeExclTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 5, 2), )
if mibBuilder.loadTexts: ltmCompContTypeExclTable.setStatus('deprecated')
if mibBuilder.loadTexts: ltmCompContTypeExclTable.setDescription("A table containing information of regular expressions used to match the MIME types in the server response's 'Content-Type:' headers. A match must be found in at least one of the 'exclude' fields.")
ltmCompContTypeExclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 5, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmCompContTypeExclName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmCompContTypeExclIndex"))
if mibBuilder.loadTexts: ltmCompContTypeExclEntry.setStatus('deprecated')
if mibBuilder.loadTexts: ltmCompContTypeExclEntry.setDescription('Columns in the ltmCompContTypeExcl Table')
ltmCompContTypeExclName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 5, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmCompContTypeExclName.setStatus('deprecated')
if mibBuilder.loadTexts: ltmCompContTypeExclName.setDescription('The name of a HTTP profile.')
ltmCompContTypeExclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmCompContTypeExclIndex.setStatus('deprecated')
if mibBuilder.loadTexts: ltmCompContTypeExclIndex.setDescription("The index of the regular expression to match the MIME types in the server response's 'Content-Type:' headers in 'exclude' fields for the specified HTTP profile.")
ltmCompContTypeExclContentType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 5, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmCompContTypeExclContentType.setStatus('deprecated')
if mibBuilder.loadTexts: ltmCompContTypeExclContentType.setDescription("The regular expression used to match the MIME types in the server response's 'Content-Type:' headers in 'exclude' fields for the specified HTTP profile.")
ltmHttpProfileStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmHttpProfileStatResetStats.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileStatResetStats.setDescription('The action to reset resetable statistics data in ltmHttpProfileStat. Setting this value to 1 will reset statistics data. Note, some statistics data may not be reset including data that are incremental counters.')
ltmHttpProfileStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileStatNumber.setDescription('The number of ltmHttpProfileStat entries in the table.')
ltmHttpProfileStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3), )
if mibBuilder.loadTexts: ltmHttpProfileStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileStatTable.setDescription('A table containing statistic information of HTTP profiles.')
ltmHttpProfileStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatName"))
if mibBuilder.loadTexts: ltmHttpProfileStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileStatEntry.setDescription('Columns in the ltmHttpProfileStat Table')
ltmHttpProfileStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatName.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileStatName.setDescription('The name of a HTTP profile.')
ltmHttpProfileStatCookiePersistInserts = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatCookiePersistInserts.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileStatCookiePersistInserts.setDescription('The number of successful attempts to insert HTTP headers for cookie persistence (set-cookie header insertions).')
ltmHttpProfileStatResp2xxCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatResp2xxCnt.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileStatResp2xxCnt.setDescription('The number of server-side responses in range of 200 to 206 (successful responses)')
ltmHttpProfileStatResp3xxCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatResp3xxCnt.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileStatResp3xxCnt.setDescription('The number of server-side responses in range of 300 to 307 (redirection responses).')
ltmHttpProfileStatResp4xxCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatResp4xxCnt.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileStatResp4xxCnt.setDescription('The number of server-side responses in range of 400 to 417 (client errors).')
ltmHttpProfileStatResp5xxCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatResp5xxCnt.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileStatResp5xxCnt.setDescription('The number of server-side responses in range of 500 to 505 (server errors).')
ltmHttpProfileStatNumberReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatNumberReqs.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileStatNumberReqs.setDescription('The total number of HTTP requests.')
ltmHttpProfileStatGetReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatGetReqs.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileStatGetReqs.setDescription('The total number of HTTP get requests.')
ltmHttpProfileStatPostReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatPostReqs.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileStatPostReqs.setDescription('The total number of HTTP post requests.')
ltmHttpProfileStatV9Reqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatV9Reqs.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileStatV9Reqs.setDescription('The total number of version 9 requests.')
ltmHttpProfileStatV10Reqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatV10Reqs.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileStatV10Reqs.setDescription('The total number of version 10 requests.')
ltmHttpProfileStatV11Reqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatV11Reqs.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileStatV11Reqs.setDescription('The total number of version 11 requests.')
ltmHttpProfileStatV9Resp = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatV9Resp.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileStatV9Resp.setDescription('The total number of version 9 responses.')
ltmHttpProfileStatV10Resp = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatV10Resp.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileStatV10Resp.setDescription('The total number of version 10 responses.')
ltmHttpProfileStatV11Resp = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatV11Resp.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileStatV11Resp.setDescription('The total number of version 11 responses.')
ltmHttpProfileStatMaxKeepaliveReq = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatMaxKeepaliveReq.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileStatMaxKeepaliveReq.setDescription('The maximum number of requests made in a connection.')
ltmHttpProfileStatRespBucket1k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatRespBucket1k.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileStatRespBucket1k.setDescription('The number of responses under 1k.')
ltmHttpProfileStatRespBucket4k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatRespBucket4k.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileStatRespBucket4k.setDescription('The number of responses under 1 - 4k.')
ltmHttpProfileStatRespBucket16k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatRespBucket16k.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileStatRespBucket16k.setDescription('The number of responses under 4 - 16k.')
ltmHttpProfileStatRespBucket32k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatRespBucket32k.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileStatRespBucket32k.setDescription('The number of responses under 16 - 32k.')
ltmHttpProfileStatPrecompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatPrecompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfileStatPrecompressBytes.setDescription('Deprecated! The number of response bytes before compression has taken place.')
ltmHttpProfileStatPostcompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatPostcompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfileStatPostcompressBytes.setDescription('Deprecated! The number of response bytes after compression has taken place.')
ltmHttpProfileStatNullCompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatNullCompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfileStatNullCompressBytes.setDescription('Deprecated! The number of bytes subjected to NULL compression (for license enforcement).')
ltmHttpProfileStatHtmlPrecompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatHtmlPrecompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfileStatHtmlPrecompressBytes.setDescription('Deprecated! The number of pre-compressed bytes for the MIME-Types: HTML.')
ltmHttpProfileStatHtmlPostcompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatHtmlPostcompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfileStatHtmlPostcompressBytes.setDescription('Deprecated! The number of post-compressed bytes for the MIME-Types: HTML.')
ltmHttpProfileStatCssPrecompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatCssPrecompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfileStatCssPrecompressBytes.setDescription('Deprecated! The number of pre-compressed bytes for the MIME-Types: CSS.')
ltmHttpProfileStatCssPostcompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatCssPostcompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfileStatCssPostcompressBytes.setDescription('Deprecated! The number of post-compressed bytes for the MIME-Types: CSS.')
ltmHttpProfileStatJsPrecompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatJsPrecompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfileStatJsPrecompressBytes.setDescription('Deprecated! The number of pre-compressed bytes for the MIME-Types: Javascript.')
ltmHttpProfileStatJsPostcompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatJsPostcompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfileStatJsPostcompressBytes.setDescription('Deprecated! The number of post-compressed bytes for the MIME-Types: Javascript.')
ltmHttpProfileStatXmlPrecompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatXmlPrecompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfileStatXmlPrecompressBytes.setDescription('Deprecated! The number of pre-compressed bytes for the MIME-Types: XML.')
ltmHttpProfileStatXmlPostcompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatXmlPostcompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfileStatXmlPostcompressBytes.setDescription('Deprecated! The number of post-compressed bytes for the MIME-Types: XML.')
ltmHttpProfileStatSgmlPrecompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatSgmlPrecompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfileStatSgmlPrecompressBytes.setDescription('Deprecated! The number of pre-compressed bytes for the MIME-Types: SGML.')
ltmHttpProfileStatSgmlPostcompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatSgmlPostcompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfileStatSgmlPostcompressBytes.setDescription('Deprecated! The number of post-compressed bytes for the MIME-Types: SGML.')
ltmHttpProfileStatPlainPrecompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatPlainPrecompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfileStatPlainPrecompressBytes.setDescription('Deprecated! The number of pre-compressed bytes for the MIME-Types: Plain.')
ltmHttpProfileStatPlainPostcompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatPlainPostcompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfileStatPlainPostcompressBytes.setDescription('Deprecated! The number of post-compressed bytes for the MIME-Types: Plain.')
ltmHttpProfileStatOctetPrecompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatOctetPrecompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfileStatOctetPrecompressBytes.setDescription('Deprecated! The number of pre-compressed bytes for the MIME-Types: Octet stream.')
ltmHttpProfileStatOctetPostcompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatOctetPostcompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfileStatOctetPostcompressBytes.setDescription('Deprecated! The number of post-compressed bytes for the MIME-Types: Octet stream.')
ltmHttpProfileStatImagePrecompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatImagePrecompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfileStatImagePrecompressBytes.setDescription('Deprecated! The number of pre-compressed bytes for the MIME-Types: Images.')
ltmHttpProfileStatImagePostcompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatImagePostcompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfileStatImagePostcompressBytes.setDescription('Deprecated! The number of post-compressed bytes for the MIME-Types: Images.')
ltmHttpProfileStatVideoPrecompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatVideoPrecompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfileStatVideoPrecompressBytes.setDescription('Deprecated! The number of pre-compressed bytes for the MIME-Types: Video files.')
ltmHttpProfileStatVideoPostcompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatVideoPostcompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfileStatVideoPostcompressBytes.setDescription('Deprecated! The number of post-compressed bytes for the MIME-Types: Video files.')
ltmHttpProfileStatAudioPrecompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatAudioPrecompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfileStatAudioPrecompressBytes.setDescription('Deprecated! The number of pre-compressed bytes for the MIME-Types: Audio files.')
ltmHttpProfileStatAudioPostcompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatAudioPostcompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfileStatAudioPostcompressBytes.setDescription('Deprecated! The number of post-compressed bytes for the MIME-Types: Audio files.')
ltmHttpProfileStatOtherPrecompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 44), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatOtherPrecompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfileStatOtherPrecompressBytes.setDescription('Deprecated! The number of pre-compressed bytes for the MIME-Types: other than HTML, CSS, Javascript, XML, SGML, Plain, Images, Video files, Audio files.')
ltmHttpProfileStatOtherPostcompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatOtherPostcompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfileStatOtherPostcompressBytes.setDescription('Deprecated! The number of post-compressed bytes for the MIME-Types: other than HTML, CSS, Javascript, XML, SGML, Plain, Images, Video files, Audio files.')
ltmHttpProfileStatRamcacheHits = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 46), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatRamcacheHits.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfileStatRamcacheHits.setDescription('Deprecated! The number of RAM cache hits.')
ltmHttpProfileStatRamcacheMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 47), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatRamcacheMisses.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfileStatRamcacheMisses.setDescription('Deprecated! The number of RAM cache misses, excluding un-cacheable data.')
ltmHttpProfileStatRamcacheMissesAll = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 48), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatRamcacheMissesAll.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfileStatRamcacheMissesAll.setDescription('Deprecated! The total number of RAM cache misses.')
ltmHttpProfileStatRamcacheHitBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 49), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatRamcacheHitBytes.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfileStatRamcacheHitBytes.setDescription('Deprecated! The number of RAM cache hits in bytes.')
ltmHttpProfileStatRamcacheMissBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 50), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatRamcacheMissBytes.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfileStatRamcacheMissBytes.setDescription('Deprecated! The number of RAM cache misses in bytes, excluding un-cacheable data.')
ltmHttpProfileStatRamcacheMissBytesAll = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 51), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatRamcacheMissBytesAll.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfileStatRamcacheMissBytesAll.setDescription('Deprecated! The total number of RAM cache misses in bytes.')
ltmHttpProfileStatRamcacheSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 52), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatRamcacheSize.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfileStatRamcacheSize.setDescription('Deprecated! The Ram cache current size.')
ltmHttpProfileStatRamcacheCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 53), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatRamcacheCount.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfileStatRamcacheCount.setDescription('Deprecated! The number of items stored in Ram cache.')
ltmHttpProfileStatRamcacheEvictions = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 54), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatRamcacheEvictions.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfileStatRamcacheEvictions.setDescription('Deprecated! The number of Ram cache evictions.')
ltmHttpProfileStatRespBucket64k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 55), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatRespBucket64k.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfileStatRespBucket64k.setDescription('Deprecated! Please see the new larger bucket sizes')
ltmHttpProfileStatPassthroughIrule = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 56), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatPassthroughIrule.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileStatPassthroughIrule.setDescription("The number of HTTP::disable's leading to pass through mode.")
ltmHttpProfileStatPassthroughConnect = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 57), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatPassthroughConnect.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileStatPassthroughConnect.setDescription('The number of CONNECT methods leading to pass through mode.')
ltmHttpProfileStatPassthroughWebSockets = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 58), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatPassthroughWebSockets.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileStatPassthroughWebSockets.setDescription('The number of 100 Switching Protocols leading to pass through mode.')
ltmHttpProfileStatPassthroughOversizeClientHeaders = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 59), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatPassthroughOversizeClientHeaders.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileStatPassthroughOversizeClientHeaders.setDescription('The number of too-large client headers requests causing pass through mode.')
ltmHttpProfileStatPassthroughOversizeServerHeaders = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 60), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatPassthroughOversizeServerHeaders.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileStatPassthroughOversizeServerHeaders.setDescription('The number of too-large server headers responses causing pass through mode.')
ltmHttpProfileStatPassthroughExcessClientHeaders = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 61), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatPassthroughExcessClientHeaders.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileStatPassthroughExcessClientHeaders.setDescription('The number of too many client headers requests causing pass through mode.')
ltmHttpProfileStatPassthroughExcessServerHeaders = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 62), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatPassthroughExcessServerHeaders.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileStatPassthroughExcessServerHeaders.setDescription('The number of too many server headers responses causing pass through mode.')
ltmHttpProfileStatPassthroughUnknownMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 63), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatPassthroughUnknownMethod.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileStatPassthroughUnknownMethod.setDescription('The number of unknown methods leading to pass through mode.')
ltmHttpProfileStatPassthroughPipeline = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 64), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatPassthroughPipeline.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileStatPassthroughPipeline.setDescription('The number of pipelined requests leading to pass through mode.')
ltmPersistProfileNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPersistProfileNumber.setStatus('current')
if mibBuilder.loadTexts: ltmPersistProfileNumber.setDescription('The number of ltmPersistProfile entries in the table.')
ltmPersistProfileTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 8, 1, 2), )
if mibBuilder.loadTexts: ltmPersistProfileTable.setStatus('current')
if mibBuilder.loadTexts: ltmPersistProfileTable.setDescription('A table containing information of persistent profile.')
ltmPersistProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 8, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmPersistProfileName"))
if mibBuilder.loadTexts: ltmPersistProfileEntry.setStatus('current')
if mibBuilder.loadTexts: ltmPersistProfileEntry.setDescription('Columns in the ltmPersistProfile Table')
ltmPersistProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 8, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPersistProfileName.setStatus('current')
if mibBuilder.loadTexts: ltmPersistProfileName.setDescription('The name of a persist profile.')
ltmPersistProfileConfigSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 8, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("usercfg", 0), ("basecfg", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPersistProfileConfigSource.setStatus('current')
if mibBuilder.loadTexts: ltmPersistProfileConfigSource.setDescription('The state that specifies whether this is a base/pre-configured profile or user defined profile.')
ltmPersistProfileDefaultName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 8, 1, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPersistProfileDefaultName.setStatus('current')
if mibBuilder.loadTexts: ltmPersistProfileDefaultName.setDescription('The name of the profile from which the specified profile derives its attribute default values.')
ltmPersistProfileMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 8, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("none", 0), ("srcaddr", 1), ("dstaddr", 2), ("cookie", 3), ("msrdp", 4), ("sslsid", 5), ("sip", 6), ("uie", 7), ("hash", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPersistProfileMode.setStatus('current')
if mibBuilder.loadTexts: ltmPersistProfileMode.setDescription('The type of persistence.')
ltmPersistProfileMirror = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 8, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPersistProfileMirror.setStatus('current')
if mibBuilder.loadTexts: ltmPersistProfileMirror.setDescription('The state of mirror persistence records.')
ltmPersistProfileTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 8, 1, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPersistProfileTimeout.setStatus('current')
if mibBuilder.loadTexts: ltmPersistProfileTimeout.setDescription('The value (in seconds) to timeout persist entry.')
ltmPersistProfileMaskType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 8, 1, 2, 1, 7), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPersistProfileMaskType.setStatus('current')
if mibBuilder.loadTexts: ltmPersistProfileMaskType.setDescription('The IP address type of ltmPersistMask')
ltmPersistProfileMask = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 8, 1, 2, 1, 8), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPersistProfileMask.setStatus('current')
if mibBuilder.loadTexts: ltmPersistProfileMask.setDescription('The source/destination address mask. It is interpreted within the context of a ltmPersistMaskType value.')
ltmPersistProfileCookieMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 8, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unspecified", 0), ("insert", 1), ("rewrite", 2), ("passive", 3), ("hash", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPersistProfileCookieMethod.setStatus('current')
if mibBuilder.loadTexts: ltmPersistProfileCookieMethod.setDescription('The type of cookie persistence.')
ltmPersistProfileCookieName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 8, 1, 2, 1, 10), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPersistProfileCookieName.setStatus('current')
if mibBuilder.loadTexts: ltmPersistProfileCookieName.setDescription('The name of cookie.')
ltmPersistProfileCookieExpiration = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 8, 1, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPersistProfileCookieExpiration.setStatus('current')
if mibBuilder.loadTexts: ltmPersistProfileCookieExpiration.setDescription('The cookie expiration in seconds.')
ltmPersistProfileCookieHashOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 8, 1, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPersistProfileCookieHashOffset.setStatus('current')
if mibBuilder.loadTexts: ltmPersistProfileCookieHashOffset.setDescription('The offset of cookie for hash mode.')
ltmPersistProfileCookieHashLength = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 8, 1, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPersistProfileCookieHashLength.setStatus('current')
if mibBuilder.loadTexts: ltmPersistProfileCookieHashLength.setDescription('The length of cookie for hash mode.')
ltmPersistProfileMsrdpNoSessionDir = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 8, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPersistProfileMsrdpNoSessionDir.setStatus('current')
if mibBuilder.loadTexts: ltmPersistProfileMsrdpNoSessionDir.setDescription('This object indicates MS terminal services has been configured without a session directory and causes the initial MSRDP connection to be load-balanced.')
ltmPersistProfileMapProxies = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 8, 1, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPersistProfileMapProxies.setStatus('current')
if mibBuilder.loadTexts: ltmPersistProfileMapProxies.setDescription('This object indicates whether we should map known proxies when the persistence mode is src_addr.')
ltmPersistProfileAcrossServices = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 8, 1, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPersistProfileAcrossServices.setStatus('current')
if mibBuilder.loadTexts: ltmPersistProfileAcrossServices.setDescription('This object indicates whether the persistence entries added under this profile are available across services.')
ltmPersistProfileAcrossVirtuals = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 8, 1, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPersistProfileAcrossVirtuals.setStatus('current')
if mibBuilder.loadTexts: ltmPersistProfileAcrossVirtuals.setDescription('This object indicates whether the persistence entries added under this profile are available across virtuals.')
ltmPersistProfileAcrossPools = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 8, 1, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPersistProfileAcrossPools.setStatus('current')
if mibBuilder.loadTexts: ltmPersistProfileAcrossPools.setDescription('This object indicates whether the persistence entries added under this profile are available across pools.')
ltmPersistProfileUieRule = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 8, 1, 2, 1, 19), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPersistProfileUieRule.setStatus('current')
if mibBuilder.loadTexts: ltmPersistProfileUieRule.setDescription('The rule name for UIE mode.')
ltmPersistProfileSipInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 8, 1, 2, 1, 20), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPersistProfileSipInfo.setStatus('current')
if mibBuilder.loadTexts: ltmPersistProfileSipInfo.setDescription('The SIP header name for persisting in the specified profile.')
ltmStreamProfileNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmStreamProfileNumber.setStatus('current')
if mibBuilder.loadTexts: ltmStreamProfileNumber.setDescription('The number of ltmStreamProfile entries in the table.')
ltmStreamProfileTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 9, 1, 2), )
if mibBuilder.loadTexts: ltmStreamProfileTable.setStatus('current')
if mibBuilder.loadTexts: ltmStreamProfileTable.setDescription('A table containing information of stream profile.')
ltmStreamProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 9, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmStreamProfileName"))
if mibBuilder.loadTexts: ltmStreamProfileEntry.setStatus('current')
if mibBuilder.loadTexts: ltmStreamProfileEntry.setDescription('Columns in the ltmStreamProfile Table')
ltmStreamProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 9, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmStreamProfileName.setStatus('current')
if mibBuilder.loadTexts: ltmStreamProfileName.setDescription('The name of a stream profile.')
ltmStreamProfileConfigSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 9, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("usercfg", 0), ("basecfg", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmStreamProfileConfigSource.setStatus('current')
if mibBuilder.loadTexts: ltmStreamProfileConfigSource.setDescription('The state that specifies whether this is a base/pre-configured profile or user defined profile.')
ltmStreamProfileDefaultName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 9, 1, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmStreamProfileDefaultName.setStatus('current')
if mibBuilder.loadTexts: ltmStreamProfileDefaultName.setDescription('The name of the profile from which the specified profile derives its attribute default values.')
ltmStreamProfileSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 9, 1, 2, 1, 4), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmStreamProfileSource.setStatus('current')
if mibBuilder.loadTexts: ltmStreamProfileSource.setDescription('The source string to search for.')
ltmStreamProfileTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 9, 1, 2, 1, 5), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmStreamProfileTarget.setStatus('current')
if mibBuilder.loadTexts: ltmStreamProfileTarget.setDescription('The target string to replace.')
ltmStreamProfileStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 9, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmStreamProfileStatResetStats.setStatus('current')
if mibBuilder.loadTexts: ltmStreamProfileStatResetStats.setDescription('The action to reset resetable statistics data in ltmStreamProfileStat. Setting this value to 1 will reset statistics data. Note, some statistics data may not be reset including data that are incremental counters.')
ltmStreamProfileStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 9, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmStreamProfileStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmStreamProfileStatNumber.setDescription('The number of ltmStreamProfileStat entries in the table.')
ltmStreamProfileStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 9, 2, 3), )
if mibBuilder.loadTexts: ltmStreamProfileStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmStreamProfileStatTable.setDescription('A table containing statistic information of stream profile.')
ltmStreamProfileStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 9, 2, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmStreamProfileStatName"))
if mibBuilder.loadTexts: ltmStreamProfileStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmStreamProfileStatEntry.setDescription('Columns in the ltmStreamProfileStat Table')
ltmStreamProfileStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 9, 2, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmStreamProfileStatName.setStatus('current')
if mibBuilder.loadTexts: ltmStreamProfileStatName.setDescription('The name of a stream profile.')
ltmStreamProfileStatReplaces = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 9, 2, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmStreamProfileStatReplaces.setStatus('current')
if mibBuilder.loadTexts: ltmStreamProfileStatReplaces.setDescription('The number of replace operations completed.')
ltmTcpProfileNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileNumber.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileNumber.setDescription('The number of ltmTcpProfile entries in the table.')
ltmTcpProfileTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2), )
if mibBuilder.loadTexts: ltmTcpProfileTable.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileTable.setDescription('A table containing information of TCP profile.')
ltmTcpProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmTcpProfileName"))
if mibBuilder.loadTexts: ltmTcpProfileEntry.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileEntry.setDescription('Columns in the ltmTcpProfile Table')
ltmTcpProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileName.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileName.setDescription('The name of a TCP profile.')
ltmTcpProfileConfigSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("usercfg", 0), ("basecfg", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileConfigSource.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileConfigSource.setDescription('The state that specifies whether this is a base/pre-configured profile or user defined profile.')
ltmTcpProfileDefaultName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileDefaultName.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileDefaultName.setDescription('The name of the profile from which the specified profile derives its attribute default values.')
ltmTcpProfileResetOnTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileResetOnTimeout.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileResetOnTimeout.setDescription('The feature of reset for idle timeout. If true and a TCP connection exceeds its idle_timeout, send a reset in addition to deleting the connection.')
ltmTcpProfileTimeWaitRecycle = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileTimeWaitRecycle.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileTimeWaitRecycle.setDescription('Recycle connection when SYN is received in TIME-WAIT state.')
ltmTcpProfileDelayedAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileDelayedAcks.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileDelayedAcks.setDescription('If true, Enable delayed ACK to allow coalescing of multiple ACK responses.')
ltmTcpProfileProxyMss = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileProxyMss.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileProxyMss.setDescription('Whether or not to proxy maximum segment size. If true, advertise the same mss to the server as was negotiated with the client.')
ltmTcpProfileProxyOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileProxyOptions.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileProxyOptions.setDescription('Whether or not to proxy an option. If true, advertise an option (e.g. time-stamps) to the server only if it was negotiated with the client.')
ltmTcpProfileProxyBufferLow = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileProxyBufferLow.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileProxyBufferLow.setDescription('The proxy buffer level at which the receive window is opened.')
ltmTcpProfileProxyBufferHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileProxyBufferHigh.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileProxyBufferHigh.setDescription('The proxy buffer level at which the receive window is closed.')
ltmTcpProfileIdleTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileIdleTimeout.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileIdleTimeout.setDescription('The number of seconds without traffic before a connection is eligible for deletion.')
ltmTcpProfileTimeWaitTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileTimeWaitTimeout.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileTimeWaitTimeout.setDescription('The milliseconds in TIME-WAIT before entering CLOSED state.')
ltmTcpProfileFinWaitTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileFinWaitTimeout.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileFinWaitTimeout.setDescription('The number of seconds to remain in FIN-WAIT or CLOSING state before giving up. Zero is forever (or until maxrtx of FIN).')
ltmTcpProfileCloseWaitTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileCloseWaitTimeout.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileCloseWaitTimeout.setDescription('The number of seconds to remain in LAST-ACK state before giving up. Zero is forever (or until maxrtx of FIN).')
ltmTcpProfileSndbuf = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileSndbuf.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileSndbuf.setDescription('Send buffer size in bytes.')
ltmTcpProfileRcvwnd = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileRcvwnd.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileRcvwnd.setDescription('Receive window size in bytes.')
ltmTcpProfileKeepAliveInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileKeepAliveInterval.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileKeepAliveInterval.setDescription('Keep alive probe interval in milliseconds.')
ltmTcpProfileSynMaxrtx = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileSynMaxrtx.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileSynMaxrtx.setDescription('The maximum number of retransmissions of SYN segments.')
ltmTcpProfileMaxrtx = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileMaxrtx.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileMaxrtx.setDescription('The maximum number of retransmissions of data segments.')
ltmTcpProfileIpTosToClient = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileIpTosToClient.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileIpTosToClient.setDescription('The IP type of service set in packets sent to client. Default:None.')
ltmTcpProfileLinkQosToClient = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileLinkQosToClient.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileLinkQosToClient.setDescription('The link quality of service set in packets sent to client. Default:None.')
ltmTcpProfileDeferredAccept = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileDeferredAccept.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileDeferredAccept.setDescription('The state that if true, defers allocation of connection chain context until payload from client has been seen.')
ltmTcpProfileSelectiveAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileSelectiveAcks.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileSelectiveAcks.setDescription('The state that if true, enable RFC2018 Selective Acknowledgements.')
ltmTcpProfileEcn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileEcn.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileEcn.setDescription('The state that if true, enable RFC3168 Extended Congestion Notification (ECN).')
ltmTcpProfileLimitedTransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileLimitedTransmit.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileLimitedTransmit.setDescription('The state that if true, enables support for RFC3042 Limited Transmit Recovery')
ltmTcpProfileHighPerfTcpExt = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileHighPerfTcpExt.setStatus('deprecated')
if mibBuilder.loadTexts: ltmTcpProfileHighPerfTcpExt.setDescription('Deprecated! Replaced by ltmTcpProfileTimestamps. The state that if true, enables support for RFC1323 timestamps and window scaling (high bandwidth TCP extensions).')
ltmTcpProfileSlowStart = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileSlowStart.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileSlowStart.setDescription('The state if true, enable TCP slow-start by default. We use RFC3390 to slow-start rather than traditional congestion avoidance mechanisms.')
ltmTcpProfileBandwidthDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileBandwidthDelay.setStatus('deprecated')
if mibBuilder.loadTexts: ltmTcpProfileBandwidthDelay.setDescription("Deprecated! The state if true, attempt to calculate the optimal bandwidth to use to the peer based on throughput and round-trip time, and don't exceed it.")
ltmTcpProfileNagle = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileNagle.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileNagle.setDescription("The state if true, delay sending data < MSS in size unless all prior data has been ACKed. This leads to less in-flight small-data, and less chance for drops, but can harm interactivity. Named after Nagle's algorithm.")
ltmTcpProfileAckOnPush = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileAckOnPush.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileAckOnPush.setDescription('The state if true, data-bearing in-order TCP segments will elicit immediate ACKs from us if they have the PUSH flag set, regardless of the setting of the delayed-ack profile option.')
ltmTcpProfileMd5Sig = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileMd5Sig.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileMd5Sig.setDescription('The state if true, use RFC2385 TCP-MD5 signatures to protect TCP traffic against intermediate tampering.')
ltmTcpProfileMd5SigPass = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 32), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileMd5SigPass.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileMd5SigPass.setDescription('This is a plaintext passphrase which may be between 1 and 80 characters in length, and is used in a shared-secret scheme to implement the spoof-prevention parts of RFC2385.')
ltmTcpProfileAbc = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileAbc.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileAbc.setDescription('The state that if it is true, count the number of bytes acked rather than the number of returning ACKs from the peer when in the linear congestion-window expansion phase of a TCP connection. This algorithm and its benefits are described in RFC3465 (Appropriate Byte Counting).')
ltmTcpProfileCongestionCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("reno", 0), ("newreno", 1), ("scalable", 2), ("highspeed", 3), ("none", 4), ("vegas", 5), ("illinois", 6), ("woodside", 7), ("chd", 8), ("cdg", 9), ("cubic", 10), ("westwood", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileCongestionCtrl.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileCongestionCtrl.setDescription('The TCP congestion control mode, guiding cwnd growth. reno - RENO congestion control mode; newreno - new RENO congestion control mode; scalable - scalable congestion control mode. It will do MIMD on cwnd besides NewReno retransmission; highspeed - high-speed congestion control mode, per RFC3649; none - no congestion control; vegas - vegas congestion control, delay-based; illinois - illinois congestion control, hybrid loss and delay; woodside - woodside congestion control, hybrid loss and delay; chd - chd congestion control, queue-delay based; cdg - cdg congestion control, RTT based; cubic - cubic congestion control, optimzed for high latency, high bandwidth connections; westwood - westwood+ congestion control, bandwidth estimation.')
ltmTcpProfileDsack = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileDsack.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileDsack.setDescription('The state that if true, enable support for RFC2883 D-SACK (Duplicate Selective Acknowledgement).')
ltmTcpProfileCmetricsCache = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileCmetricsCache.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileCmetricsCache.setDescription('The state that if true, use the routing table metrics cache to retrieve the last-known tcp congestion parameters. (Congestion window, round-trip-times, and slow-start threshold.)')
ltmTcpProfileVerifiedAccept = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileVerifiedAccept.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileVerifiedAccept.setDescription('The state that if true, the device must not respond to the clients SYN with a SYN-ACK until it receives a SYN-ACK from the server, indicating that the port is open.')
ltmTcpProfilePktLossIgnoreRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfilePktLossIgnoreRate.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfilePktLossIgnoreRate.setDescription('Specifies the threshold of packets lost per million at which the system should perform congestion control. Measured in packets per million. Valid values are from 0 to 1000000.')
ltmTcpProfilePktLossIgnoreBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfilePktLossIgnoreBurst.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfilePktLossIgnoreBurst.setDescription('Specifies the likelihood of performing congestion control when multiple packets in a row are lost even if the loss threshold has not been exceeded. Valid values are from 0 to 32. Higher values decrease the likelihood of performing congestion control.')
ltmTcpProfileZeroWindowTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileZeroWindowTimeout.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileZeroWindowTimeout.setDescription('Specifies the timeout in milliseconds for terminating a connection with an effective zero length TCP transmit window. The timeout starts when the peer advertises a zero length TCP window or when enough data has been sent to fill the previously advertised window. The timer is canceled when a non-zero length window is received. The default is 20000 milliseconds.')
ltmTcpProfileInitCwnd = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileInitCwnd.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileInitCwnd.setDescription('Initial congestion window size for connections to this destination. Actual window size is this value multiplied by the MSS (Maximal Segment Size) for same connection. The default is zero, meaning to use the values specified in RFC2414. Allowed values are in the range of 0 to 16.')
ltmTcpProfileInitRwnd = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileInitRwnd.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileInitRwnd.setDescription('Initial receive window size for connections to this destination. The actual window size is this value multiplied by the MSS (Maximal Segment Size) of the connection. The default value is zero, meaning to use Slow Start value. Allowed values are in the range of 0 to 16.')
ltmTcpProfileDelayWindowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileDelayWindowControl.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileDelayWindowControl.setDescription('If enabled, uses an estimate of queueing delay as a measure of congestion to control, in addition to the normal loss based control, the amount of data sent.')
ltmTcpProfileSynRtoBase = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileSynRtoBase.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileSynRtoBase.setDescription('Initial RTO (Retransmission TimeOut) base multiplier for SYN retransmission, specified in milliseconds. This value is modified by the exponential backoff table to select the interval for subsequent retransmissions.')
ltmTcpProfileTimestamps = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileTimestamps.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileTimestamps.setDescription('The state that if true, enables support for RFC1323 timestamps (high bandwidth TCP extension).')
ltmTcpProfileMinRto = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileMinRto.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileMinRto.setDescription('Specifies the minimum TCP retransmission timeout in milliseconds. The timeout starts when the sender sends a packet containing data. The timer is canceled when all outstanding data has been acknowledged. The timer restarts when an ACK is received to acknowledge new data. The default is 0 milliseconds; which means using the TCP stack default. Maximum value is 5000 milliseconds.')
ltmTcpProfileMptcp = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileMptcp.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileMptcp.setDescription('The state that, if true, enabled all incoming flows handle by the MPTCP stack allowing for support of multipath enabled connections.')
ltmTcpProfileRatePace = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileRatePace.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileRatePace.setDescription('The state that, when true, enables pacing of data transmission.')
ltmTcpProfileMptcpCsum = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileMptcpCsum.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileMptcpCsum.setDescription('The state that, when true, enabled checksums support by this MPTCP enabled device.')
ltmTcpProfileMptcpCsumVerify = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileMptcpCsumVerify.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileMptcpCsumVerify.setDescription('The state that, when true, enables verifing incoming checksums, and checksum failure causes connection abort.')
ltmTcpProfileMptcpDebug = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileMptcpDebug.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileMptcpDebug.setDescription('The state that, when true, enables debug logging and statistics for MPTCP.')
ltmTcpProfileMptcpFallback = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("reset", 0), ("retransmit", 1), ("activeaccept", 2), ("accept", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileMptcpFallback.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileMptcpFallback.setDescription('The MPTCP fallback control mode, reboot - reboot control mode; retransmit - retransmit control mode; activeaccept - activeaccept control mode; accept - accept control mode.')
ltmTcpProfileMptcpJoinmax = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 53), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileMptcpJoinmax.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileMptcpJoinmax.setDescription('Specifies the maximum number of simultaneous join attempts on a given flow. Default value is 5. Maximum value is 20.')
ltmTcpProfileMptcpNojoindssack = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileMptcpNojoindssack.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileMptcpNojoindssack.setDescription('The state that, when true, the no DSS option is sent on the JOIN ACK.')
ltmTcpProfileMptcpRtomax = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 55), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileMptcpRtomax.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileMptcpRtomax.setDescription('Specifies the the number of RTOs before declaring subflow dead. Default value is 5. Maximum value is 12. Minimum value is 3.')
ltmTcpProfileMptcpRxmitmin = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 56), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileMptcpRxmitmin.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileMptcpRxmitmin.setDescription('Specifies the minimum value (in milliseconds) of retransmission timer for these MPTCP flows. Default value is 1000. Maximum value is 5000. Minimum value is 200.')
ltmTcpProfileMptcpSubflowmax = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 57), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileMptcpSubflowmax.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileMptcpSubflowmax.setDescription('Specifies the maximum number of MPTCP subflows for a single flow. Default value is 6. Maximum value is 10.')
ltmTcpProfileMptcpMakeafterbreak = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 58), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileMptcpMakeafterbreak.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileMptcpMakeafterbreak.setDescription('The state that, when true, causes after break functionality allowing for Long-Lived MPTCP sessions.')
ltmTcpProfileMptcpTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 59), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileMptcpTimeout.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileMptcpTimeout.setDescription('Specifies the timeout value to discard long-lived sessions that do not have an active flow. Default value is 3600 sec. Maximum value is 36000 sec.')
ltmTcpProfileMptcpFastjoin = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileMptcpFastjoin.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileMptcpFastjoin.setDescription('The state that, when true, enables FAST join, allowing data to be sent on the MP_JOIN SYN, which can allow a server response to occur in parallel with the JOIN')
ltmTcpProfileEarlyRetransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileEarlyRetransmit.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileEarlyRetransmit.setDescription('The state that if true, enables support for RFC5827 Early Retransmit')
ltmTcpProfileTailLossProbe = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileTailLossProbe.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileTailLossProbe.setDescription('The state that if true, enables support for Tail Loss Probe')
ltmTcpProfileStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmTcpProfileStatResetStats.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileStatResetStats.setDescription('The action to reset resetable statistics data in ltmTcpProfileStat. Setting this value to 1 will reset statistics data. Note, some statistics data may not be reset including data that are incremental counters.')
ltmTcpProfileStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileStatNumber.setDescription('The number of ltmTcpProfileStat entries in the table.')
ltmTcpProfileStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 2, 3), )
if mibBuilder.loadTexts: ltmTcpProfileStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileStatTable.setDescription('A table containing statistic information of TCP profile.')
ltmTcpProfileStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 2, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmTcpProfileStatName"))
if mibBuilder.loadTexts: ltmTcpProfileStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileStatEntry.setDescription('Columns in the ltmTcpProfileStat Table')
ltmTcpProfileStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 2, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileStatName.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileStatName.setDescription('The name of a TCP profile.')
ltmTcpProfileStatOpen = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileStatOpen.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileStatOpen.setDescription('The number of current open connections.')
ltmTcpProfileStatCloseWait = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 2, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileStatCloseWait.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileStatCloseWait.setDescription('The number of current connections in CLOSE-WAIT/LAST-ACK.')
ltmTcpProfileStatFinWait = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 2, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileStatFinWait.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileStatFinWait.setDescription('The number of current connections in FIN-WAIT/CLOSING.')
ltmTcpProfileStatTimeWait = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 2, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileStatTimeWait.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileStatTimeWait.setDescription('The number of current connections in TIME-WAIT.')
ltmTcpProfileStatAccepts = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 2, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileStatAccepts.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileStatAccepts.setDescription('The number of connections accepted.')
ltmTcpProfileStatAcceptfails = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 2, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileStatAcceptfails.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileStatAcceptfails.setDescription('The number of connections not accepted.')
ltmTcpProfileStatConnects = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 2, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileStatConnects.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileStatConnects.setDescription('The number of connections established.')
ltmTcpProfileStatConnfails = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 2, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileStatConnfails.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileStatConnfails.setDescription('The number of connections failures.')
ltmTcpProfileStatExpires = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 2, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileStatExpires.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileStatExpires.setDescription('The number of connections expired due to idle timeout.')
ltmTcpProfileStatAbandons = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 2, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileStatAbandons.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileStatAbandons.setDescription('The number of connections abandoned connections due to retries/keep-alives.')
ltmTcpProfileStatRxrst = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 2, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileStatRxrst.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileStatRxrst.setDescription('The number of received RST.')
ltmTcpProfileStatRxbadsum = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 2, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileStatRxbadsum.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileStatRxbadsum.setDescription('The number of bad checksum.')
ltmTcpProfileStatRxbadseg = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 2, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileStatRxbadseg.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileStatRxbadseg.setDescription('The number of malformed segments.')
ltmTcpProfileStatRxooseg = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 2, 3, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileStatRxooseg.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileStatRxooseg.setDescription('The number of out of order segments.')
ltmTcpProfileStatRxcookie = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 2, 3, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileStatRxcookie.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileStatRxcookie.setDescription('The number of received SYN-cookies.')
ltmTcpProfileStatRxbadcookie = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 2, 3, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileStatRxbadcookie.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileStatRxbadcookie.setDescription('The number of bad SYN-cookies.')
ltmTcpProfileStatSyncacheover = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 2, 3, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileStatSyncacheover.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileStatSyncacheover.setDescription('The number of SYN-cache overflow.')
ltmTcpProfileStatTxrexmits = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 2, 3, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileStatTxrexmits.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileStatTxrexmits.setDescription('The number of retransmitted segments.')
ltmUdpProfileNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmUdpProfileNumber.setStatus('current')
if mibBuilder.loadTexts: ltmUdpProfileNumber.setDescription('The number of ltmUdpProfile entries in the table.')
ltmUdpProfileTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 11, 1, 2), )
if mibBuilder.loadTexts: ltmUdpProfileTable.setStatus('current')
if mibBuilder.loadTexts: ltmUdpProfileTable.setDescription('A table containing information of UDP profile.')
ltmUdpProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 11, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmUdpProfileName"))
if mibBuilder.loadTexts: ltmUdpProfileEntry.setStatus('current')
if mibBuilder.loadTexts: ltmUdpProfileEntry.setDescription('Columns in the ltmUdpProfile Table')
ltmUdpProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 11, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmUdpProfileName.setStatus('current')
if mibBuilder.loadTexts: ltmUdpProfileName.setDescription('The name of a UDP profile.')
ltmUdpProfileConfigSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 11, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("usercfg", 0), ("basecfg", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmUdpProfileConfigSource.setStatus('current')
if mibBuilder.loadTexts: ltmUdpProfileConfigSource.setDescription('The state that specifies whether this is a base/pre-configured profile or user defined profile.')
ltmUdpProfileDefaultName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 11, 1, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmUdpProfileDefaultName.setStatus('current')
if mibBuilder.loadTexts: ltmUdpProfileDefaultName.setDescription('The name of the profile from which the specified profile derives its attribute default values.')
ltmUdpProfileIdleTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 11, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmUdpProfileIdleTimeout.setStatus('current')
if mibBuilder.loadTexts: ltmUdpProfileIdleTimeout.setDescription('The umber of seconds without traffic before a flow is eligible for deletion.')
ltmUdpProfileIpTosToClient = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 11, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmUdpProfileIpTosToClient.setStatus('current')
if mibBuilder.loadTexts: ltmUdpProfileIpTosToClient.setDescription('The IP type of service set in packets sent to client. Default:None.')
ltmUdpProfileLinkQosToClient = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 11, 1, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmUdpProfileLinkQosToClient.setStatus('current')
if mibBuilder.loadTexts: ltmUdpProfileLinkQosToClient.setDescription('The link quality of service set in packets sent to client. Default:None.')
ltmUdpProfileDatagramLb = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 11, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmUdpProfileDatagramLb.setStatus('current')
if mibBuilder.loadTexts: ltmUdpProfileDatagramLb.setDescription('The state indicating whether or not to load balance each UDP datagram separately.')
ltmUdpProfileAllowNoPayload = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 11, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmUdpProfileAllowNoPayload.setStatus('current')
if mibBuilder.loadTexts: ltmUdpProfileAllowNoPayload.setDescription('The state indicating whether to not allow the passage of datagrams with no payload.')
ltmUdpProfileStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 11, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmUdpProfileStatResetStats.setStatus('current')
if mibBuilder.loadTexts: ltmUdpProfileStatResetStats.setDescription('The action to reset resetable statistics data in ltmUdpProfileStat. Setting this value to 1 will reset statistics data. Note, some statistics data may not be reset including data that are incremental counters.')
ltmUdpProfileStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 11, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmUdpProfileStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmUdpProfileStatNumber.setDescription('The number of ltmUdpProfileStat entries in the table.')
ltmUdpProfileStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 11, 2, 3), )
if mibBuilder.loadTexts: ltmUdpProfileStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmUdpProfileStatTable.setDescription('A table containing information of UDP profile.')
ltmUdpProfileStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 11, 2, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmUdpProfileStatName"))
if mibBuilder.loadTexts: ltmUdpProfileStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmUdpProfileStatEntry.setDescription('Columns in the ltmUdpProfileStat Table')
ltmUdpProfileStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 11, 2, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmUdpProfileStatName.setStatus('current')
if mibBuilder.loadTexts: ltmUdpProfileStatName.setDescription('The name of a UDP profile.')
ltmUdpProfileStatOpen = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 11, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmUdpProfileStatOpen.setStatus('current')
if mibBuilder.loadTexts: ltmUdpProfileStatOpen.setDescription('The number of current open connections.')
ltmUdpProfileStatAccepts = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 11, 2, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmUdpProfileStatAccepts.setStatus('current')
if mibBuilder.loadTexts: ltmUdpProfileStatAccepts.setDescription('The number of connections accepted.')
ltmUdpProfileStatAcceptfails = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 11, 2, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmUdpProfileStatAcceptfails.setStatus('current')
if mibBuilder.loadTexts: ltmUdpProfileStatAcceptfails.setDescription('The number of connections not accepted.')
ltmUdpProfileStatConnects = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 11, 2, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmUdpProfileStatConnects.setStatus('current')
if mibBuilder.loadTexts: ltmUdpProfileStatConnects.setDescription('The number of connections established.')
ltmUdpProfileStatConnfails = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 11, 2, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmUdpProfileStatConnfails.setStatus('current')
if mibBuilder.loadTexts: ltmUdpProfileStatConnfails.setDescription('The number of connections failures.')
ltmUdpProfileStatExpires = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 11, 2, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmUdpProfileStatExpires.setStatus('current')
if mibBuilder.loadTexts: ltmUdpProfileStatExpires.setDescription('The number of connections expired due to idle timeout.')
ltmUdpProfileStatRxdgram = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 11, 2, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmUdpProfileStatRxdgram.setStatus('current')
if mibBuilder.loadTexts: ltmUdpProfileStatRxdgram.setDescription('The number of received datagrams.')
ltmUdpProfileStatRxbaddgram = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 11, 2, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmUdpProfileStatRxbaddgram.setStatus('current')
if mibBuilder.loadTexts: ltmUdpProfileStatRxbaddgram.setDescription('The number of malformed datagrams.')
ltmUdpProfileStatRxunreach = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 11, 2, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmUdpProfileStatRxunreach.setStatus('current')
if mibBuilder.loadTexts: ltmUdpProfileStatRxunreach.setDescription('The number of received ICMP un-reached.')
ltmUdpProfileStatRxbadsum = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 11, 2, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmUdpProfileStatRxbadsum.setStatus('current')
if mibBuilder.loadTexts: ltmUdpProfileStatRxbadsum.setDescription('The number of bad checksum.')
ltmUdpProfileStatRxnosum = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 11, 2, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmUdpProfileStatRxnosum.setStatus('current')
if mibBuilder.loadTexts: ltmUdpProfileStatRxnosum.setDescription('The number of no checksum.')
ltmUdpProfileStatTxdgram = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 11, 2, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmUdpProfileStatTxdgram.setStatus('current')
if mibBuilder.loadTexts: ltmUdpProfileStatTxdgram.setDescription('The number of transmitted datagrams.')
ltmRuleNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRuleNumber.setStatus('current')
if mibBuilder.loadTexts: ltmRuleNumber.setDescription('The number of ltmRule entries in the table.')
ltmRuleTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 8, 1, 2), )
if mibBuilder.loadTexts: ltmRuleTable.setStatus('current')
if mibBuilder.loadTexts: ltmRuleTable.setDescription('A table containing information of rules.')
ltmRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 8, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmRuleName"))
if mibBuilder.loadTexts: ltmRuleEntry.setStatus('current')
if mibBuilder.loadTexts: ltmRuleEntry.setDescription('Columns in the ltmRule Table')
ltmRuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 8, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRuleName.setStatus('current')
if mibBuilder.loadTexts: ltmRuleName.setDescription('The name of a rule.')
ltmRuleDefinition = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 8, 1, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRuleDefinition.setStatus('deprecated')
if mibBuilder.loadTexts: ltmRuleDefinition.setDescription('Deprecated! The definition of the specified rule.')
ltmRuleConfigSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 8, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("usercfg", 0), ("basecfg", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRuleConfigSource.setStatus('current')
if mibBuilder.loadTexts: ltmRuleConfigSource.setDescription('The type of rule that the specified rule is associating with. It is either a base/pre-configured rule or user defined rule.')
ltmRuleEventNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 8, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRuleEventNumber.setStatus('current')
if mibBuilder.loadTexts: ltmRuleEventNumber.setDescription('The number of ltmRuleEvent entries in the table.')
ltmRuleEventTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 8, 2, 2), )
if mibBuilder.loadTexts: ltmRuleEventTable.setStatus('current')
if mibBuilder.loadTexts: ltmRuleEventTable.setDescription('A table containing information of rule events.')
ltmRuleEventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 8, 2, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmRuleEventName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmRuleEventEventType"), (0, "F5-BIGIP-LOCAL-MIB", "ltmRuleEventPriority"))
if mibBuilder.loadTexts: ltmRuleEventEntry.setStatus('current')
if mibBuilder.loadTexts: ltmRuleEventEntry.setDescription('Columns in the ltmRuleEvent Table')
ltmRuleEventName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 8, 2, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRuleEventName.setStatus('current')
if mibBuilder.loadTexts: ltmRuleEventName.setDescription('The name of a rule.')
ltmRuleEventEventType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 8, 2, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRuleEventEventType.setStatus('current')
if mibBuilder.loadTexts: ltmRuleEventEventType.setDescription('The event type which the rule is used for.')
ltmRuleEventPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 8, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRuleEventPriority.setStatus('current')
if mibBuilder.loadTexts: ltmRuleEventPriority.setDescription('The execution priority of this rule event.')
ltmRuleEventScript = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 8, 2, 2, 1, 4), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRuleEventScript.setStatus('deprecated')
if mibBuilder.loadTexts: ltmRuleEventScript.setDescription('Deprecated!. The TCL script for this rule event.')
ltmRuleEventStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 8, 3, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmRuleEventStatResetStats.setStatus('current')
if mibBuilder.loadTexts: ltmRuleEventStatResetStats.setDescription('The action to reset resetable statistics data in ltmRuleEventStat. Setting this value to 1 will reset statistics data. Note, some statistics data may not be reset including data that are incremental counters.')
ltmRuleEventStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 8, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRuleEventStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmRuleEventStatNumber.setDescription('The number of ltmRuleEventStat entries in the table.')
ltmRuleEventStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 8, 3, 3), )
if mibBuilder.loadTexts: ltmRuleEventStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmRuleEventStatTable.setDescription('A table containing statistic information of rules.')
ltmRuleEventStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 8, 3, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmRuleEventStatName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmRuleEventStatEventType"), (0, "F5-BIGIP-LOCAL-MIB", "ltmRuleEventStatPriority"))
if mibBuilder.loadTexts: ltmRuleEventStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmRuleEventStatEntry.setDescription('Columns in the ltmRuleEventStat Table')
ltmRuleEventStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 8, 3, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRuleEventStatName.setStatus('current')
if mibBuilder.loadTexts: ltmRuleEventStatName.setDescription('The name of a rule.')
ltmRuleEventStatEventType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 8, 3, 3, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRuleEventStatEventType.setStatus('current')
if mibBuilder.loadTexts: ltmRuleEventStatEventType.setDescription('The type of the event associated with the specified rule.')
ltmRuleEventStatPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 8, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRuleEventStatPriority.setStatus('current')
if mibBuilder.loadTexts: ltmRuleEventStatPriority.setDescription('The rule execution priority.')
ltmRuleEventStatFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 8, 3, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRuleEventStatFailures.setStatus('current')
if mibBuilder.loadTexts: ltmRuleEventStatFailures.setDescription('The number of failures for executing the specified rule.')
ltmRuleEventStatAborts = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 8, 3, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRuleEventStatAborts.setStatus('current')
if mibBuilder.loadTexts: ltmRuleEventStatAborts.setDescription('The number of aborts when executing the specified rule.')
ltmRuleEventStatTotalExecutions = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 8, 3, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRuleEventStatTotalExecutions.setStatus('current')
if mibBuilder.loadTexts: ltmRuleEventStatTotalExecutions.setDescription('The total number of event executions for the specified rule.')
ltmRuleEventStatAvgCycles = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 8, 3, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRuleEventStatAvgCycles.setStatus('current')
if mibBuilder.loadTexts: ltmRuleEventStatAvgCycles.setDescription('The average of cycles spent during an execution of the specified rule event.')
ltmRuleEventStatMaxCycles = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 8, 3, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRuleEventStatMaxCycles.setStatus('current')
if mibBuilder.loadTexts: ltmRuleEventStatMaxCycles.setDescription('The maximum of cycles spent during an execution of the specified rule event.')
ltmRuleEventStatMinCycles = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 8, 3, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRuleEventStatMinCycles.setStatus('current')
if mibBuilder.loadTexts: ltmRuleEventStatMinCycles.setDescription('The minimum of cycles spent during an execution of the specified rule event.')
ltmSnatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmSnatNumber.setDescription('The number of ltmSnat entries in the table.')
ltmSnatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 1, 2), )
if mibBuilder.loadTexts: ltmSnatTable.setStatus('current')
if mibBuilder.loadTexts: ltmSnatTable.setDescription('A table containing information of SNAT.')
ltmSnatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmSnatName"))
if mibBuilder.loadTexts: ltmSnatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmSnatEntry.setDescription('Columns in the ltmSnat Table')
ltmSnatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatName.setStatus('current')
if mibBuilder.loadTexts: ltmSnatName.setDescription('The name of a SNAT. It is a named object in the definition of a standard or a selective SNAT. Standard SNATs translate to a single address, while selective SNATs translate to a pool of translation addresses.')
ltmSnatSfFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatSfFlags.setStatus('current')
if mibBuilder.loadTexts: ltmSnatSfFlags.setDescription('The state indicating whether connection mirroring is enabled or not for the specified SNAT.')
ltmSnatType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("transaddr", 1), ("snatpool", 2), ("automap", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatType.setStatus('current')
if mibBuilder.loadTexts: ltmSnatType.setDescription('The translation type of the specified SNAT. none - No SNAT (invalid default); transaddr - The SNAT uses a single translation address; snatpool - The SNAT uses a SNAT pool of translation addresses; automap - The SNAT uses self IP addresses.')
ltmSnatTransAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 1, 2, 1, 4), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatTransAddrType.setStatus('current')
if mibBuilder.loadTexts: ltmSnatTransAddrType.setDescription('The IP address type of ltmSnatTransAddr')
ltmSnatTransAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 1, 2, 1, 5), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatTransAddr.setStatus('current')
if mibBuilder.loadTexts: ltmSnatTransAddr.setDescription('The translation address used by the specified SNAT if the SNAT translates to a translation address. It is interpreted within the context of a ltmSnatTransAddrType value.')
ltmSnatSnatpoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 1, 2, 1, 6), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatSnatpoolName.setStatus('current')
if mibBuilder.loadTexts: ltmSnatSnatpoolName.setDescription('The name of a SNAT pool, which is a pool of SNAT translation addresses. It is used by the specified SNAT if the SNAT translates to a pool.')
ltmSnatListedEnabledVlans = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatListedEnabledVlans.setStatus('current')
if mibBuilder.loadTexts: ltmSnatListedEnabledVlans.setDescription('The state indicating whether associated VLANs are SNAT enabled or not. The associated VLANs are listed in ltmSnatVlanTable.')
ltmSnatTransAddrName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 1, 2, 1, 8), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatTransAddrName.setStatus('current')
if mibBuilder.loadTexts: ltmSnatTransAddrName.setDescription('Translation Name')
ltmSnatStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmSnatStatResetStats.setStatus('current')
if mibBuilder.loadTexts: ltmSnatStatResetStats.setDescription('The action to reset resetable statistics data in ltmSnatStat. Setting this value to 1 will reset statistics data. Note, some statistics data may not be reset including data that are incremental counters.')
ltmSnatStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmSnatStatNumber.setDescription('The number of ltmSnatStat entries in the table.')
ltmSnatStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 2, 3), )
if mibBuilder.loadTexts: ltmSnatStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmSnatStatTable.setDescription('A table containing statistic information of SNAT.')
ltmSnatStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 2, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmSnatStatName"))
if mibBuilder.loadTexts: ltmSnatStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmSnatStatEntry.setDescription('Columns in the ltmSnatStat Table')
ltmSnatStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 2, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatStatName.setStatus('current')
if mibBuilder.loadTexts: ltmSnatStatName.setDescription('The name of a SNAT.')
ltmSnatStatClientPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 2, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatStatClientPktsIn.setStatus('current')
if mibBuilder.loadTexts: ltmSnatStatClientPktsIn.setDescription('The number of packets received from client-side.')
ltmSnatStatClientBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 2, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatStatClientBytesIn.setStatus('current')
if mibBuilder.loadTexts: ltmSnatStatClientBytesIn.setDescription('The number of bytes received from client-side.')
ltmSnatStatClientPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 2, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatStatClientPktsOut.setStatus('current')
if mibBuilder.loadTexts: ltmSnatStatClientPktsOut.setDescription('The number of packets sent to client-side.')
ltmSnatStatClientBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 2, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatStatClientBytesOut.setStatus('current')
if mibBuilder.loadTexts: ltmSnatStatClientBytesOut.setDescription('The number of bytes sent to client-side.')
ltmSnatStatClientMaxConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 2, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatStatClientMaxConns.setStatus('current')
if mibBuilder.loadTexts: ltmSnatStatClientMaxConns.setDescription('The maximum connections from client-side.')
ltmSnatStatClientTotConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 2, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatStatClientTotConns.setStatus('current')
if mibBuilder.loadTexts: ltmSnatStatClientTotConns.setDescription('The total connections from client-side.')
ltmSnatStatClientCurConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 2, 3, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatStatClientCurConns.setStatus('current')
if mibBuilder.loadTexts: ltmSnatStatClientCurConns.setDescription('The current connections from client-side.')
ltmSnatVlanNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatVlanNumber.setStatus('current')
if mibBuilder.loadTexts: ltmSnatVlanNumber.setDescription('The number of ltmSnatVlan entries in the table.')
ltmSnatVlanTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 3, 2), )
if mibBuilder.loadTexts: ltmSnatVlanTable.setStatus('current')
if mibBuilder.loadTexts: ltmSnatVlanTable.setDescription('A table containing VLAN information associated with SNAT.')
ltmSnatVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 3, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmSnatVlanSnatName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmSnatVlanVlanName"))
if mibBuilder.loadTexts: ltmSnatVlanEntry.setStatus('current')
if mibBuilder.loadTexts: ltmSnatVlanEntry.setDescription('Columns in the ltmSnatVlan Table')
ltmSnatVlanSnatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 3, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatVlanSnatName.setStatus('current')
if mibBuilder.loadTexts: ltmSnatVlanSnatName.setDescription('The name of a SNAT.')
ltmSnatVlanVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 3, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatVlanVlanName.setStatus('current')
if mibBuilder.loadTexts: ltmSnatVlanVlanName.setDescription('The name of a VLAN associated with the specified SNAT. Only when ltmSnatListedEnabledVlans is set to enable, SNAT is enabled on the VLAN. ')
ltmSnatOrigAddrNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatOrigAddrNumber.setStatus('current')
if mibBuilder.loadTexts: ltmSnatOrigAddrNumber.setDescription('The number of ltmSnatOrigAddr entries in the table.')
ltmSnatOrigAddrTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 4, 2), )
if mibBuilder.loadTexts: ltmSnatOrigAddrTable.setStatus('current')
if mibBuilder.loadTexts: ltmSnatOrigAddrTable.setDescription('A table containing information of SNAT original addresses.')
ltmSnatOrigAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 4, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmSnatOrigAddrSnatName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmSnatOrigAddrAddrType"), (0, "F5-BIGIP-LOCAL-MIB", "ltmSnatOrigAddrAddr"), (0, "F5-BIGIP-LOCAL-MIB", "ltmSnatOrigAddrWildmaskType"), (0, "F5-BIGIP-LOCAL-MIB", "ltmSnatOrigAddrWildmask"))
if mibBuilder.loadTexts: ltmSnatOrigAddrEntry.setStatus('current')
if mibBuilder.loadTexts: ltmSnatOrigAddrEntry.setDescription('Columns in the ltmSnatOrigAddr Table')
ltmSnatOrigAddrSnatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 4, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatOrigAddrSnatName.setStatus('current')
if mibBuilder.loadTexts: ltmSnatOrigAddrSnatName.setDescription('The name of a SNAT.')
ltmSnatOrigAddrAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 4, 2, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatOrigAddrAddrType.setStatus('current')
if mibBuilder.loadTexts: ltmSnatOrigAddrAddrType.setDescription('The IP address type of ltmSnatOrigAddrAddr')
ltmSnatOrigAddrAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 4, 2, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatOrigAddrAddr.setStatus('current')
if mibBuilder.loadTexts: ltmSnatOrigAddrAddr.setDescription('The original client address associated with the specified SNAT. It is interpreted within the context of a ltmSnatOrigAddrAddrType value.')
ltmSnatOrigAddrWildmaskType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 4, 2, 1, 4), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatOrigAddrWildmaskType.setStatus('current')
if mibBuilder.loadTexts: ltmSnatOrigAddrWildmaskType.setDescription('The IP address type of ltmSnatOrigWidemask')
ltmSnatOrigAddrWildmask = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 4, 2, 1, 5), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatOrigAddrWildmask.setStatus('current')
if mibBuilder.loadTexts: ltmSnatOrigAddrWildmask.setDescription('The wildcard netmask associated with the specified SNAT original address. It is interpreted within the context of a ltmSnatOrigAddrWidemaskType value.')
ltmTransAddrNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTransAddrNumber.setStatus('current')
if mibBuilder.loadTexts: ltmTransAddrNumber.setDescription('The number of ltmTransAddr entries in the table.')
ltmTransAddrTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 5, 2), )
if mibBuilder.loadTexts: ltmTransAddrTable.setStatus('current')
if mibBuilder.loadTexts: ltmTransAddrTable.setDescription('A table containing information of SNAT translated addresses.')
ltmTransAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 5, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmTransAddrName"))
if mibBuilder.loadTexts: ltmTransAddrEntry.setStatus('current')
if mibBuilder.loadTexts: ltmTransAddrEntry.setDescription('Columns in the ltmTransAddr Table')
ltmTransAddrAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 5, 2, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTransAddrAddrType.setStatus('current')
if mibBuilder.loadTexts: ltmTransAddrAddrType.setDescription('The IP address type of ltmTransAddrAddr')
ltmTransAddrAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 5, 2, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTransAddrAddr.setStatus('current')
if mibBuilder.loadTexts: ltmTransAddrAddr.setDescription('The SNAT translation address for use as a server-side client address. on the server-side. It is interpreted within the context of an ltmTransAddrAddrType value.')
ltmTransAddrEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTransAddrEnabled.setStatus('current')
if mibBuilder.loadTexts: ltmTransAddrEnabled.setDescription('The state indicating whether the specified SNAT translation address is enabled or not.')
ltmTransAddrConnLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 5, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTransAddrConnLimit.setStatus('current')
if mibBuilder.loadTexts: ltmTransAddrConnLimit.setDescription('The maximum number of connections the specified SNAT translation address is allowed to have open at one time.')
ltmTransAddrTcpIdleTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 5, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTransAddrTcpIdleTimeout.setStatus('current')
if mibBuilder.loadTexts: ltmTransAddrTcpIdleTimeout.setDescription('The TCP idle timeout (in seconds) of the SNAT specified translation address.')
ltmTransAddrUdpIdleTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 5, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTransAddrUdpIdleTimeout.setStatus('current')
if mibBuilder.loadTexts: ltmTransAddrUdpIdleTimeout.setDescription('The UDP idle timeout (in seconds) of the specified SNAT translation address.')
ltmTransAddrIpIdleTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 5, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTransAddrIpIdleTimeout.setStatus('current')
if mibBuilder.loadTexts: ltmTransAddrIpIdleTimeout.setDescription('The IP idle timeout (in seconds) of the specified SNAT translation address.')
ltmTransAddrArpEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 5, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTransAddrArpEnabled.setStatus('current')
if mibBuilder.loadTexts: ltmTransAddrArpEnabled.setDescription('The state indicating whether ARP is enabled or not for the specified SNAT translation address.')
ltmTransAddrUnitId = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 5, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTransAddrUnitId.setStatus('current')
if mibBuilder.loadTexts: ltmTransAddrUnitId.setDescription('The unit number associated with the specified SNAT translation address.')
ltmTransAddrName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 5, 2, 1, 10), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTransAddrName.setStatus('current')
if mibBuilder.loadTexts: ltmTransAddrName.setDescription('name of trans addr')
ltmTransAddrStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 6, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmTransAddrStatResetStats.setStatus('current')
if mibBuilder.loadTexts: ltmTransAddrStatResetStats.setDescription('The action to reset resetable statistics data in ltmTransAddrStat. Setting this value to 1 will reset statistics data. Note, some statistics data may not be reset including data that are incremental counters.')
ltmTransAddrStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTransAddrStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmTransAddrStatNumber.setDescription('The number of ltmTransAddrStat entries in the table.')
ltmTransAddrStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 6, 3), )
if mibBuilder.loadTexts: ltmTransAddrStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmTransAddrStatTable.setDescription('A table containing statistic information of SNAT translated addresses.')
ltmTransAddrStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 6, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmTransAddrStatName"))
if mibBuilder.loadTexts: ltmTransAddrStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmTransAddrStatEntry.setDescription('Columns in the ltmTransAddrStat Table')
ltmTransAddrStatAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 6, 3, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTransAddrStatAddrType.setStatus('deprecated')
if mibBuilder.loadTexts: ltmTransAddrStatAddrType.setDescription('Deprecated! Use name as index The IP address type of ltmTransAddrStatAddr')
ltmTransAddrStatAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 6, 3, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTransAddrStatAddr.setStatus('deprecated')
if mibBuilder.loadTexts: ltmTransAddrStatAddr.setDescription('Deprecated! Use name as index The SNAT translation address for use as a server-side client address. on the server-side. It is interpreted within the context of an ltmTransAddrStatAddrType value.')
ltmTransAddrStatServerPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 6, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTransAddrStatServerPktsIn.setStatus('current')
if mibBuilder.loadTexts: ltmTransAddrStatServerPktsIn.setDescription('The number of packets received from server-side.')
ltmTransAddrStatServerBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 6, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTransAddrStatServerBytesIn.setStatus('current')
if mibBuilder.loadTexts: ltmTransAddrStatServerBytesIn.setDescription('The number of bytes received from server-side.')
ltmTransAddrStatServerPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 6, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTransAddrStatServerPktsOut.setStatus('current')
if mibBuilder.loadTexts: ltmTransAddrStatServerPktsOut.setDescription('The number of packets sent to server-side.')
ltmTransAddrStatServerBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 6, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTransAddrStatServerBytesOut.setStatus('current')
if mibBuilder.loadTexts: ltmTransAddrStatServerBytesOut.setDescription('The number of bytes sent to server-side.')
ltmTransAddrStatServerMaxConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 6, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTransAddrStatServerMaxConns.setStatus('current')
if mibBuilder.loadTexts: ltmTransAddrStatServerMaxConns.setDescription('The maximum connections from server-side.')
ltmTransAddrStatServerTotConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 6, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTransAddrStatServerTotConns.setStatus('current')
if mibBuilder.loadTexts: ltmTransAddrStatServerTotConns.setDescription('The total connections from server-side.')
ltmTransAddrStatServerCurConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 6, 3, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTransAddrStatServerCurConns.setStatus('current')
if mibBuilder.loadTexts: ltmTransAddrStatServerCurConns.setDescription('The current connections from server-side.')
ltmTransAddrStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 6, 3, 1, 10), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTransAddrStatName.setStatus('current')
if mibBuilder.loadTexts: ltmTransAddrStatName.setDescription('name of trans addr stat')
ltmSnatPoolNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatPoolNumber.setStatus('current')
if mibBuilder.loadTexts: ltmSnatPoolNumber.setDescription('The number of ltmSnatPool entries in the table.')
ltmSnatPoolTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 7, 2), )
if mibBuilder.loadTexts: ltmSnatPoolTable.setStatus('current')
if mibBuilder.loadTexts: ltmSnatPoolTable.setDescription('A table containing information of SNAT pools.')
ltmSnatPoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 7, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmSnatPoolName"))
if mibBuilder.loadTexts: ltmSnatPoolEntry.setStatus('current')
if mibBuilder.loadTexts: ltmSnatPoolEntry.setDescription('Columns in the ltmSnatPool Table')
ltmSnatPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 7, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatPoolName.setStatus('current')
if mibBuilder.loadTexts: ltmSnatPoolName.setDescription('The name of a SNAT pool, which is a pool of SNAT translation addresses.')
ltmSnatPoolStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 8, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmSnatPoolStatResetStats.setStatus('current')
if mibBuilder.loadTexts: ltmSnatPoolStatResetStats.setDescription('The action to reset resetable statistics data in ltmSnatPoolStat. Setting this value to 1 will reset statistics data. Note, some statistics data may not be reset including data that are incremental counters.')
ltmSnatPoolStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 8, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatPoolStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmSnatPoolStatNumber.setDescription('The number of ltmSnatPoolStat entries in the table.')
ltmSnatPoolStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 8, 3), )
if mibBuilder.loadTexts: ltmSnatPoolStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmSnatPoolStatTable.setDescription('A table containing statistic information of SNAT pools.')
ltmSnatPoolStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 8, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmSnatPoolStatName"))
if mibBuilder.loadTexts: ltmSnatPoolStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmSnatPoolStatEntry.setDescription('Columns in the ltmSnatPoolStat Table')
ltmSnatPoolStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 8, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatPoolStatName.setStatus('current')
if mibBuilder.loadTexts: ltmSnatPoolStatName.setDescription('The name of the SNAT pool.')
ltmSnatPoolStatServerPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 8, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatPoolStatServerPktsIn.setStatus('current')
if mibBuilder.loadTexts: ltmSnatPoolStatServerPktsIn.setDescription('The number of packets received from server-side.')
ltmSnatPoolStatServerBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 8, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatPoolStatServerBytesIn.setStatus('current')
if mibBuilder.loadTexts: ltmSnatPoolStatServerBytesIn.setDescription('The number of bytes received from server-side.')
ltmSnatPoolStatServerPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 8, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatPoolStatServerPktsOut.setStatus('current')
if mibBuilder.loadTexts: ltmSnatPoolStatServerPktsOut.setDescription('The number of packets sent to server-side.')
ltmSnatPoolStatServerBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 8, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatPoolStatServerBytesOut.setStatus('current')
if mibBuilder.loadTexts: ltmSnatPoolStatServerBytesOut.setDescription('The number of bytes sent to server-side.')
ltmSnatPoolStatServerMaxConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 8, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatPoolStatServerMaxConns.setStatus('current')
if mibBuilder.loadTexts: ltmSnatPoolStatServerMaxConns.setDescription('The maximum connections from server-side.')
ltmSnatPoolStatServerTotConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 8, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatPoolStatServerTotConns.setStatus('current')
if mibBuilder.loadTexts: ltmSnatPoolStatServerTotConns.setDescription('The total connections from server-side.')
ltmSnatPoolStatServerCurConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 8, 3, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatPoolStatServerCurConns.setStatus('current')
if mibBuilder.loadTexts: ltmSnatPoolStatServerCurConns.setDescription('The current connections from server-side.')
ltmSnatpoolTransAddrNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatpoolTransAddrNumber.setStatus('current')
if mibBuilder.loadTexts: ltmSnatpoolTransAddrNumber.setDescription('The number of ltmSnatpoolTransAddr entries in the table.')
ltmSnatpoolTransAddrTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 9, 2), )
if mibBuilder.loadTexts: ltmSnatpoolTransAddrTable.setStatus('current')
if mibBuilder.loadTexts: ltmSnatpoolTransAddrTable.setDescription('A table containing information of joining SnatPool to TransAddr.')
ltmSnatpoolTransAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 9, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmSnatpoolTransAddrSnatpoolName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmSnatpoolTransAddrTransAddrName"))
if mibBuilder.loadTexts: ltmSnatpoolTransAddrEntry.setStatus('current')
if mibBuilder.loadTexts: ltmSnatpoolTransAddrEntry.setDescription('Columns in the ltmSnatpoolTransAddr Table')
ltmSnatpoolTransAddrSnatpoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 9, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatpoolTransAddrSnatpoolName.setStatus('current')
if mibBuilder.loadTexts: ltmSnatpoolTransAddrSnatpoolName.setDescription('The name of a SNAT pool.')
ltmSnatpoolTransAddrTransAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 9, 2, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatpoolTransAddrTransAddrType.setStatus('current')
if mibBuilder.loadTexts: ltmSnatpoolTransAddrTransAddrType.setDescription('The IP address type of ltmTransAddrAddr')
ltmSnatpoolTransAddrTransAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 9, 2, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatpoolTransAddrTransAddr.setStatus('current')
if mibBuilder.loadTexts: ltmSnatpoolTransAddrTransAddr.setDescription('The SNAT translation address associated with the specified SNAT pool., It is interpreted within the context of an ltmSnatpoolTransAddrTransAddrType value.')
ltmSnatpoolTransAddrTransAddrName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 9, 2, 1, 4), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatpoolTransAddrTransAddrName.setStatus('current')
if mibBuilder.loadTexts: ltmSnatpoolTransAddrTransAddrName.setDescription('The name of a trans_addr.')
ltmVirtualServNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServNumber.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServNumber.setDescription('The number of ltmVirtualServ entries in the table.')
ltmVirtualServTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 1, 2), )
if mibBuilder.loadTexts: ltmVirtualServTable.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServTable.setDescription('A table containing information of virtual servers.')
ltmVirtualServEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmVirtualServName"))
if mibBuilder.loadTexts: ltmVirtualServEntry.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServEntry.setDescription('Columns in the ltmVirtualServ Table')
ltmVirtualServName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServName.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServName.setDescription('The name of a virtual server.')
ltmVirtualServAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 1, 2, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServAddrType.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServAddrType.setDescription('The IP address type of ltmVirtualServAddr.')
ltmVirtualServAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 1, 2, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServAddr.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServAddr.setDescription('The IP address of the specified virtual server. It is interpreted within the context of an ltmVitualServAddrType value.')
ltmVirtualServWildmaskType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 1, 2, 1, 4), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServWildmaskType.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServWildmaskType.setDescription('The IP address type of ltmVirtualServWildmask.')
ltmVirtualServWildmask = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 1, 2, 1, 5), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServWildmask.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServWildmask.setDescription('The wildcard netmask of the specified virtual server. It is interpreted within the context of an ltmVitualServWildmaskType value.')
ltmVirtualServPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 1, 2, 1, 6), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServPort.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServPort.setDescription('The port number of the specified virtual server.')
ltmVirtualServIpProto = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 1, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServIpProto.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServIpProto.setDescription('The IP protocol (see RFC 1340) used by the specified virtual server.')
ltmVirtualServListedEnabledVlans = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServListedEnabledVlans.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServListedEnabledVlans.setDescription('The state indicating whether the specified virtual server is listed as enabled or not on associated VLANs. The associated VLANs are defined in ltmVirtualServVlanTable.')
ltmVirtualServEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmVirtualServEnabled.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServEnabled.setDescription('The state indicating whether the specified virtual server is enabled or not.')
ltmVirtualServConnLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 1, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServConnLimit.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServConnLimit.setDescription('The maximum number of connections the specified virtual server is allowed to have open at one time.')
ltmVirtualServRclass = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 1, 2, 1, 11), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServRclass.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServRclass.setDescription('The rate class that will be used to rate limit the traffic in the specified virtual server.')
ltmVirtualServSfFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServSfFlags.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServSfFlags.setDescription('The flag to indicate whether connection mirroring is enabled or not for the specified virtual server.')
ltmVirtualServTranslateAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServTranslateAddr.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServTranslateAddr.setDescription('The state indicating whether the address of the specified virtual server should be translated.')
ltmVirtualServTranslatePort = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServTranslatePort.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServTranslatePort.setDescription('The state indicating whether the port of the specified virtual server should be translated.')
ltmVirtualServType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 1, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("poolbased", 0), ("ipforward", 1), ("l2forward", 2), ("reject", 3), ("fastl4", 4), ("fasthttp", 5), ("stateless", 6), ("dhcp-relay", 7), ("internal", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServType.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServType.setDescription('The type supported by the specified virtual server. poolbased - The virtual server is based on a pool; ipforward - The virtual server only supports IP forwarding. There is no load balancing on this type of virtual server; l2forward - The virtual server only supports L2 forwarding. There is no load balancing on this type of virtual server; reject - All connections going to this virtual server will be rejected, and resets will be sent; fastl4 - The virtual server is associated with a Fast L4 profile; fasthttp - The virtual server is associated with a Fast HTTP profile; stateless - The virtual server accepts traffic matching the virtual server address and load balances the packet to the pool members without attempting to match the packet to a pre-existing connection on the connection table; dhcp-relay - The virtual server relays DHCP client requests for an IP address to one or more DHCP servers and provides DHCP server responses with an available IP address for the client; internal - The virtual server supports modification of HTTP requests and responses.')
ltmVirtualServSnatType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 1, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("transaddr", 1), ("snatpool", 2), ("automap", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServSnatType.setStatus('deprecated')
if mibBuilder.loadTexts: ltmVirtualServSnatType.setDescription('Deprecated! Replaced by Source Address Translation type associated with the specified virtual server. The type of SNAT associated with the specified virtual server. none - No SNAT used by the virtual server; transaddr - The SNAT uses a single translation address (invalid type); snatpool - The SNAT uses a SNAT pool of translation addresses; automap - The SNAT uses self IP addresses.')
ltmVirtualServLasthopPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 1, 2, 1, 17), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServLasthopPoolName.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServLasthopPoolName.setDescription('The last hop pool for the specified virtual server if traffic is transparent.')
ltmVirtualServSnatpoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 1, 2, 1, 18), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServSnatpoolName.setStatus('deprecated')
if mibBuilder.loadTexts: ltmVirtualServSnatpoolName.setDescription('Deprecated! No longer a direct attribute of the virtual server. The name of a SNAT pool used by the specified virtual server.')
ltmVirtualServDefaultPool = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 1, 2, 1, 19), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServDefaultPool.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServDefaultPool.setDescription('The name of a default pool used by the specified virtual server.')
ltmVirtualServFallbackPersist = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 1, 2, 1, 20), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServFallbackPersist.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServFallbackPersist.setDescription('The persist profile name to use for fallback by the specified virtual server.')
ltmVirtualServActualPvaAccel = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 1, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("full", 0), ("partial", 1), ("none", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServActualPvaAccel.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServActualPvaAccel.setDescription('The actual hardware acceleration mode for the specified virtual server.')
ltmVirtualServAvailabilityState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 1, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("green", 1), ("yellow", 2), ("red", 3), ("blue", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServAvailabilityState.setStatus('deprecated')
if mibBuilder.loadTexts: ltmVirtualServAvailabilityState.setDescription('Deprecated! Replaced by ltmVsServStatusAvailState under ltmVirtualServStatus. The state of the specified virtual server availability indicated in color.')
ltmVirtualServEnabledState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 1, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("enabled", 1), ("disabled", 2), ("disabledbyparent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServEnabledState.setStatus('deprecated')
if mibBuilder.loadTexts: ltmVirtualServEnabledState.setDescription('Deprecated! Replaced by ltmVsServStatusEnabledState under ltmVirtualServStatus. The state of the specified virtual server activity status, as specified by the user.')
ltmVirtualServDisabledParentType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 1, 2, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServDisabledParentType.setStatus('deprecated')
if mibBuilder.loadTexts: ltmVirtualServDisabledParentType.setDescription('Deprecated! Replaced by ltmVsServStatusParentType under ltmVirtualServStatus. The type of parent object which disabled the specified virtual server.')
ltmVirtualServStatusReason = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 1, 2, 1, 25), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatusReason.setStatus('deprecated')
if mibBuilder.loadTexts: ltmVirtualServStatusReason.setDescription("Deprecated! Replaced by ltmVsServStatusDetailReason under ltmVirtualServStatus. The detail description of the node's status of parent object which disabled the specified virtual server.")
ltmVirtualServGtmScore = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 1, 2, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServGtmScore.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServGtmScore.setDescription('A user-defined value that specifies the ranking of the virtual server when compared to other virtual servers within the same pool')
ltmVirtualServCmpEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 1, 2, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServCmpEnabled.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServCmpEnabled.setDescription('The state indicating whether CMP (Cluster Multiple Processor) is enabled or not for the specified virtual server.')
ltmVirtualServSrcport = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 1, 2, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("srcportreserve", 0), ("srcportreservestrict", 1), ("srcportchange", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServSrcport.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServSrcport.setDescription('The srcport type. srcportreserve - The srcport reserved; srcportreservestrict - The srcport reserved strict; srcportchange - The srcport changed;')
ltmVirtualServVaName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 1, 2, 1, 29), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServVaName.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServVaName.setDescription('virtual address name.')
ltmVirtualServSourceAddressTranslationType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 1, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("snat", 1), ("lsn", 2), ("automap", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServSourceAddressTranslationType.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServSourceAddressTranslationType.setDescription('The type of Source Address Translation associated with the specified virtual server. none - No Source Address Translation used by the virtual server; snat - The Source Address Translation uses a SNAT pool of translation addresses; lsn - The Source Address Translation uses an LSN pool of translation addresses; automap - The Source Address Translation uses self IP addresses.')
ltmVirtualServSourceAddressTranslationPool = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 1, 2, 1, 31), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServSourceAddressTranslationPool.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServSourceAddressTranslationPool.setDescription('The name of a LSN Source Address Translation pool used by the specified virtual server.')
ltmVirtualServStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmVirtualServStatResetStats.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServStatResetStats.setDescription('The action to reset resetable statistics data in ltmVirtualServStat. Setting this value to 1 will reset statistics data. Note, some statistics data may not be reset including data that are incremental counters.')
ltmVirtualServStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServStatNumber.setDescription('The number of ltmVirtualServStat entries in the table.')
ltmVirtualServStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3), )
if mibBuilder.loadTexts: ltmVirtualServStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServStatTable.setDescription('A table containing statistic information of virtual servers.')
ltmVirtualServStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatName"))
if mibBuilder.loadTexts: ltmVirtualServStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServStatEntry.setDescription('Columns in the ltmVirtualServStat Table')
ltmVirtualServStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatName.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServStatName.setDescription('The name of a virtual server.')
ltmVirtualServStatCsMinConnDur = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatCsMinConnDur.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServStatCsMinConnDur.setDescription('The minimum connection duration in milliseconds among all connections through the specified virtual server.')
ltmVirtualServStatCsMaxConnDur = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatCsMaxConnDur.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServStatCsMaxConnDur.setDescription('The maximum connection duration in milliseconds among all connections through the specified virtual server.')
ltmVirtualServStatCsMeanConnDur = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatCsMeanConnDur.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServStatCsMeanConnDur.setDescription('The average connection duration in milliseconds for all connections through the specified virtual server.')
ltmVirtualServStatNoNodesErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatNoNodesErrors.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServStatNoNodesErrors.setDescription('The number of no-node errors. If active server node is zero, this counter is incremented.')
ltmVirtualServStatClientPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatClientPktsIn.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServStatClientPktsIn.setDescription('The number of packets received by the specified virtual server from client-side.')
ltmVirtualServStatClientBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatClientBytesIn.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServStatClientBytesIn.setDescription('The number of bytes received by the specified virtual server from client-side.')
ltmVirtualServStatClientPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatClientPktsOut.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServStatClientPktsOut.setDescription('The number of packets sent to client-side from the specified virtual server.')
ltmVirtualServStatClientBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatClientBytesOut.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServStatClientBytesOut.setDescription('The number of bytes sent to client-side from the specified virtual server.')
ltmVirtualServStatClientMaxConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatClientMaxConns.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServStatClientMaxConns.setDescription('The maximum connections from client-side to the specified virtual server.')
ltmVirtualServStatClientTotConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatClientTotConns.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServStatClientTotConns.setDescription('The total connections from client-side to the specified virtual server.')
ltmVirtualServStatClientCurConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatClientCurConns.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServStatClientCurConns.setDescription('The current connections from client-side to the specified virtual server.')
ltmVirtualServStatEphemeralPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatEphemeralPktsIn.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServStatEphemeralPktsIn.setDescription('The number of packets received ephemeral by the specified virtual server.')
ltmVirtualServStatEphemeralBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatEphemeralBytesIn.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServStatEphemeralBytesIn.setDescription('The number of bytes received ephemeral by the specified virtual server.')
ltmVirtualServStatEphemeralPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatEphemeralPktsOut.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServStatEphemeralPktsOut.setDescription('The number of packets transmitted ephemeral from the specified virtual server.')
ltmVirtualServStatEphemeralBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatEphemeralBytesOut.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServStatEphemeralBytesOut.setDescription('The number of bytes transmitted ephemeral from the specified virtual server.')
ltmVirtualServStatEphemeralMaxConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatEphemeralMaxConns.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServStatEphemeralMaxConns.setDescription('The maximum ephemeral connections to the specified virtual server.')
ltmVirtualServStatEphemeralTotConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatEphemeralTotConns.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServStatEphemeralTotConns.setDescription('The total ephemeral connections to the specified virtual server.')
ltmVirtualServStatEphemeralCurConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatEphemeralCurConns.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServStatEphemeralCurConns.setDescription('The current ephemeral connections to the specified virtual server.')
ltmVirtualServStatPvaPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatPvaPktsIn.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServStatPvaPktsIn.setDescription('The total number of hardware accelerated packets received by the specified virtual server.')
ltmVirtualServStatPvaBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatPvaBytesIn.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServStatPvaBytesIn.setDescription('The total number of hardware accelerated bytes received by the specified virtual server.')
ltmVirtualServStatPvaPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatPvaPktsOut.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServStatPvaPktsOut.setDescription('The total number of hardware accelerated packets sent out from the specified virtual server.')
ltmVirtualServStatPvaBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatPvaBytesOut.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServStatPvaBytesOut.setDescription('The total number of hardware accelerated bytes sent out from the specified virtual server.')
ltmVirtualServStatPvaMaxConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatPvaMaxConns.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServStatPvaMaxConns.setDescription('The maximum hardware accelerated connections to the specified virtual server.')
ltmVirtualServStatPvaTotConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatPvaTotConns.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServStatPvaTotConns.setDescription('The total hardware accelerated connections to the specified virtual server.')
ltmVirtualServStatPvaCurConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatPvaCurConns.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServStatPvaCurConns.setDescription('The current hardware accelerated connections to the specified virtual server.')
ltmVirtualServStatTotRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatTotRequests.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServStatTotRequests.setDescription('The total number of requests going through the specified virtual server.')
ltmVirtualServStatTotPvaAssistConn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatTotPvaAssistConn.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServStatTotPvaAssistConn.setDescription('The total number of connections to the specified virtual server, which are partially hardware accelerated.')
ltmVirtualServStatCurrPvaAssistConn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatCurrPvaAssistConn.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServStatCurrPvaAssistConn.setDescription('The current number of connections to the specified virtual server, which are partially hardware accelerated.')
ltmVirtualServStatCycleCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatCycleCount.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServStatCycleCount.setDescription('CPU cycle count since last system restart.')
ltmVirtualServStatVsUsageRatio5s = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatVsUsageRatio5s.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServStatVsUsageRatio5s.setDescription('The percentage of time Virtual Server was busy over the last 5 seconds.')
ltmVirtualServStatVsUsageRatio1m = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatVsUsageRatio1m.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServStatVsUsageRatio1m.setDescription('The percentage of time Virtual Server was busy over the last 1 minute.')
ltmVirtualServStatVsUsageRatio5m = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 33), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatVsUsageRatio5m.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServStatVsUsageRatio5m.setDescription('The percentage of time Virtual Server was busy over the last 5 minutes.')
ltmVirtualServStatCurrentConnsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 34), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatCurrentConnsPerSec.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServStatCurrentConnsPerSec.setDescription('The number of current connections per second to the specified virtual server.')
ltmVirtualServStatDurationRateExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 35), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatDurationRateExceeded.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServStatDurationRateExceeded.setDescription('Duration of time in seconds the specified virtual server has exceeded the configured connection rate limit.')
ltmVirtualServStatSwSyncookies = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatSwSyncookies.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServStatSwSyncookies.setDescription('The number of syn cookies received.')
ltmVirtualServStatSwSyncookieAccepts = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatSwSyncookieAccepts.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServStatSwSyncookieAccepts.setDescription('The number of syn cookies received that were accepted.')
ltmVirtualServStatHwSyncookies = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatHwSyncookies.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServStatHwSyncookies.setDescription('The number of hardware syn cookies received.')
ltmVirtualServStatHwSyncookieAccepts = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatHwSyncookieAccepts.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServStatHwSyncookieAccepts.setDescription('The number of hardware syn cookies received that were accepted.')
ltmVirtualServStatClientEvictedConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatClientEvictedConns.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServStatClientEvictedConns.setDescription('The number of client-side connections that have been evicted on the specified virtual server.')
ltmVirtualServStatClientSlowKilled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatClientSlowKilled.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServStatClientSlowKilled.setDescription('The number of slow client-side connections that have been killed on the specified virtual server.')
ltmVirtualServStatWlSyncookieHits = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatWlSyncookieHits.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServStatWlSyncookieHits.setDescription('The number of whitelist syn cookie hits.')
ltmVirtualServStatWlSyncookieAccepts = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatWlSyncookieAccepts.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServStatWlSyncookieAccepts.setDescription('The number of whitelist syn cookies received that were accepted.')
ltmVirtualServStatWlSyncookieRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 44), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatWlSyncookieRejects.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServStatWlSyncookieRejects.setDescription('The number of whitelist syn cookies received that were rejected.')
ltmVirtualServAuthNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServAuthNumber.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServAuthNumber.setDescription('The number of ltmVirtualServAuth entries in the table.')
ltmVirtualServAuthTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 3, 2), )
if mibBuilder.loadTexts: ltmVirtualServAuthTable.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServAuthTable.setDescription('A table containing information of virtual server auth profiles.')
ltmVirtualServAuthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 3, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmVirtualServAuthVsName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmVirtualServAuthProfileName"))
if mibBuilder.loadTexts: ltmVirtualServAuthEntry.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServAuthEntry.setDescription('Columns in the ltmVirtualServAuth Table')
ltmVirtualServAuthVsName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 3, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServAuthVsName.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServAuthVsName.setDescription('The name of a virtual server.')
ltmVirtualServAuthProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 3, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServAuthProfileName.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServAuthProfileName.setDescription('The name of an auth profile associated with the specified virtual server.')
ltmVirtualServPersistNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServPersistNumber.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServPersistNumber.setDescription('The number of ltmVirtualServPersist entries in the table.')
ltmVirtualServPersistTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 4, 2), )
if mibBuilder.loadTexts: ltmVirtualServPersistTable.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServPersistTable.setDescription('A table containing information of virtual server persistence profiles.')
ltmVirtualServPersistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 4, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmVirtualServPersistVsName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmVirtualServPersistProfileName"))
if mibBuilder.loadTexts: ltmVirtualServPersistEntry.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServPersistEntry.setDescription('Columns in the ltmVirtualServPersist Table')
ltmVirtualServPersistVsName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 4, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServPersistVsName.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServPersistVsName.setDescription('The name of a virtual server.')
ltmVirtualServPersistProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 4, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServPersistProfileName.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServPersistProfileName.setDescription('The name of a persist profile associated with the specified virtual server.')
ltmVirtualServPersistUseDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServPersistUseDefault.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServPersistUseDefault.setDescription('The persist profile is to be used if a rule does not select a persist type.')
ltmVirtualServProfileNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServProfileNumber.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServProfileNumber.setDescription('The number of ltmVirtualServProfile entries in the table.')
ltmVirtualServProfileTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 5, 2), )
if mibBuilder.loadTexts: ltmVirtualServProfileTable.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServProfileTable.setDescription('A table containing information of virtual server profiles.')
ltmVirtualServProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 5, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmVirtualServProfileVsName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmVirtualServProfileProfileName"))
if mibBuilder.loadTexts: ltmVirtualServProfileEntry.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServProfileEntry.setDescription('Columns in the ltmVirtualServProfile Table')
ltmVirtualServProfileVsName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 5, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServProfileVsName.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServProfileVsName.setDescription('The name of a virtual server.')
ltmVirtualServProfileProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 5, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServProfileProfileName.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServProfileProfileName.setDescription('The name of a profile associated with the specified virtual server.')
ltmVirtualServProfileType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 62))).clone(namedValues=NamedValues(("auth", 0), ("http", 1), ("serverssl", 2), ("clientssl", 3), ("fastl4", 4), ("tcp", 5), ("udp", 6), ("ftp", 7), ("persist", 8), ("connpool", 9), ("stream", 10), ("xml", 11), ("fasthttp", 12), ("iiop", 13), ("rtsp", 14), ("user", 15), ("httpclass", 16), ("dns", 17), ("sctp", 18), ("instance", 19), ("sipp", 20), ("dos", 21), ("pptp", 62)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServProfileType.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServProfileType.setDescription('The type of the profile used by the specified virtual server.')
ltmVirtualServProfileContext = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("all", 0), ("client", 1), ("server", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServProfileContext.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServProfileContext.setDescription("This is used to determine which side of the proxy a protocol type profile (specifically TCP/UDP) is applied to. none - for profiles that don't need any context; all - profile applies to both client and server; client - profile applies to the client-side; server - profile applies to the server-side.")
ltmVirtualServPoolNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServPoolNumber.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServPoolNumber.setDescription('The number of ltmVirtualServPool entries in the table.')
ltmVirtualServPoolTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 6, 2), )
if mibBuilder.loadTexts: ltmVirtualServPoolTable.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServPoolTable.setDescription('A table containing information of non-default pools related to virtual servers.')
ltmVirtualServPoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 6, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmVirtualServPoolVirtualServerName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmVirtualServPoolPoolName"))
if mibBuilder.loadTexts: ltmVirtualServPoolEntry.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServPoolEntry.setDescription('Columns in the ltmVirtualServPool Table')
ltmVirtualServPoolVirtualServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 6, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServPoolVirtualServerName.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServPoolVirtualServerName.setDescription('The name of a virtual server.')
ltmVirtualServPoolPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 6, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServPoolPoolName.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServPoolPoolName.setDescription('The name of a non-default pool that the specified virtual server is referencing.')
ltmVirtualServPoolRuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 6, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServPoolRuleName.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServPoolRuleName.setDescription('The name of a rule that the specified virtual server is referencing. This is for future use and has not been supported in current version.')
ltmVirtualServClonePoolNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServClonePoolNumber.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServClonePoolNumber.setDescription('The number of ltmVirtualServClonePool entries in the table.')
ltmVirtualServClonePoolTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 7, 2), )
if mibBuilder.loadTexts: ltmVirtualServClonePoolTable.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServClonePoolTable.setDescription('A table containing information of pools related to virtual servers.')
ltmVirtualServClonePoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 7, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmVirtualServClonePoolVirtualServerName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmVirtualServClonePoolPoolName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmVirtualServClonePoolType"))
if mibBuilder.loadTexts: ltmVirtualServClonePoolEntry.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServClonePoolEntry.setDescription('Columns in the ltmVirtualServClonePool Table')
ltmVirtualServClonePoolVirtualServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 7, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServClonePoolVirtualServerName.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServClonePoolVirtualServerName.setDescription('The name of a virtual server.')
ltmVirtualServClonePoolPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 7, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServClonePoolPoolName.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServClonePoolPoolName.setDescription('The name of a clone pool associated with the specified virtual server.')
ltmVirtualServClonePoolType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 7, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unspec", 0), ("clientside", 1), ("serverside", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServClonePoolType.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServClonePoolType.setDescription('The type of the clone pool associated with the specified virtual server.')
ltmVirtualServRuleNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServRuleNumber.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServRuleNumber.setDescription('The number of ltmVirtualServRule entries in the table.')
ltmVirtualServRuleTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 8, 2), )
if mibBuilder.loadTexts: ltmVirtualServRuleTable.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServRuleTable.setDescription('A table containing information of rules related to virtual servers.')
ltmVirtualServRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 8, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmVirtualServRuleVirtualServerName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmVirtualServRuleRuleName"))
if mibBuilder.loadTexts: ltmVirtualServRuleEntry.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServRuleEntry.setDescription('Columns in the ltmVirtualServRule Table')
ltmVirtualServRuleVirtualServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 8, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServRuleVirtualServerName.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServRuleVirtualServerName.setDescription('The name of a virtual server.')
ltmVirtualServRuleRuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 8, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServRuleRuleName.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServRuleRuleName.setDescription('The name of a rule associated with the specified virtual server.')
ltmVirtualServRulePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 8, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServRulePriority.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServRulePriority.setDescription('The priority of the rule among rules used by the specified virtual server.')
ltmVirtualServVlanNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServVlanNumber.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServVlanNumber.setDescription('The number of ltmVirtualServVlan entries in the table.')
ltmVirtualServVlanTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 9, 2), )
if mibBuilder.loadTexts: ltmVirtualServVlanTable.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServVlanTable.setDescription('A table containing VLAN information associated with virtual server.')
ltmVirtualServVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 9, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmVirtualServVlanVsName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmVirtualServVlanVlanName"))
if mibBuilder.loadTexts: ltmVirtualServVlanEntry.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServVlanEntry.setDescription('Columns in the ltmVirtualServVlan Table')
ltmVirtualServVlanVsName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 9, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServVlanVsName.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServVlanVsName.setDescription('The name of a virtual server.')
ltmVirtualServVlanVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 9, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServVlanVlanName.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServVlanVlanName.setDescription('The name of a VLAN which the specified virtual server associated with.')
ltmVirtualAddrNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualAddrNumber.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualAddrNumber.setDescription('The number of ltmVirtualAddr entries in the table.')
ltmVirtualAddrTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 10, 2), )
if mibBuilder.loadTexts: ltmVirtualAddrTable.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualAddrTable.setDescription('A table containing information of virtual server addresses.')
ltmVirtualAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 10, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrName"))
if mibBuilder.loadTexts: ltmVirtualAddrEntry.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualAddrEntry.setDescription('Columns in the ltmVirtualAddr Table')
ltmVirtualAddrAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 10, 2, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualAddrAddrType.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualAddrAddrType.setDescription('The IP address type of ltmVirtualAddrAddr')
ltmVirtualAddrAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 10, 2, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualAddrAddr.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualAddrAddr.setDescription('The IP address of a virtual address. It is interpreted within the context of an ltmVitualAddrAddrType value.')
ltmVirtualAddrEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 10, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmVirtualAddrEnabled.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualAddrEnabled.setDescription('The state indicating whether the specified virtual address is enabled or not.')
ltmVirtualAddrConnLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 10, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualAddrConnLimit.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualAddrConnLimit.setDescription('The maximum number of connections the specified virtual address is allowed to have open at one time.')
ltmVirtualAddrArpEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 10, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualAddrArpEnabled.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualAddrArpEnabled.setDescription('The state indicating whether ARP for the specified virtual address is enabled or not.')
ltmVirtualAddrSfFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 10, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualAddrSfFlags.setStatus('deprecated')
if mibBuilder.loadTexts: ltmVirtualAddrSfFlags.setDescription('Deprecated! This feature has been eliminated. The flag to indicate whether connection mirroring is enabled for the specified virtual address.')
ltmVirtualAddrUnitId = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 10, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualAddrUnitId.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualAddrUnitId.setDescription('The unit number associated with the specified virtual address.')
ltmVirtualAddrRouteAdvertisement = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 10, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualAddrRouteAdvertisement.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualAddrRouteAdvertisement.setDescription('The state to determine if the specified virtual address should be readvertised by the ZebOS routing daemons or not.')
ltmVirtualAddrAvailabilityState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 10, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("green", 1), ("yellow", 2), ("red", 3), ("blue", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualAddrAvailabilityState.setStatus('deprecated')
if mibBuilder.loadTexts: ltmVirtualAddrAvailabilityState.setDescription('Deprecated! Replaced by ltmVsAddrStatusAvailState under ltmVirtualAddrStatus. The state of the specified virtual address availability indicated in color.')
ltmVirtualAddrEnabledState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 10, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("enabled", 1), ("disabled", 2), ("disabledbyparent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualAddrEnabledState.setStatus('deprecated')
if mibBuilder.loadTexts: ltmVirtualAddrEnabledState.setDescription('Deprecated! Replaced by ltmVsAddrStatusEnabledState under ltmVirtualAddrStatus. The state of the specified virtual address activity status, as specified by the user.')
ltmVirtualAddrDisabledParentType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 10, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualAddrDisabledParentType.setStatus('deprecated')
if mibBuilder.loadTexts: ltmVirtualAddrDisabledParentType.setDescription('Deprecated! Replaced by ltmVsAddrStatusParentType under ltmVirtualAddrStatus. The type of parent object which disabled the specified virtual address.')
ltmVirtualAddrStatusReason = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 10, 2, 1, 12), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualAddrStatusReason.setStatus('deprecated')
if mibBuilder.loadTexts: ltmVirtualAddrStatusReason.setDescription("Deprecated! Replaced by ltmVsAddrStatusDetailReason under ltmVirtualAddrStatus. The detail description of the virtual address's status of parent object which disabled the specified virtual address.")
ltmVirtualAddrServer = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 10, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("any", 1), ("all", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualAddrServer.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualAddrServer.setDescription('That state to control how status of virtual address is depending on status of virtual server. none: virtual address is always green regardless of virtual server status. any: any virtual server is green, virtual address is green. all: all virtual servers must be green before virtual address is declared as green.')
ltmVirtualAddrIsFloat = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 10, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualAddrIsFloat.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualAddrIsFloat.setDescription('The state indicating whether the virtual address should be shared between the redundant pair. This is typically used in one-armed Combo pair, where GTM is only licensed on one of the boxes.')
ltmVirtualAddrName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 10, 2, 1, 15), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualAddrName.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualAddrName.setDescription('Virtual Address name')
ltmVirtualAddrStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 11, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmVirtualAddrStatResetStats.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualAddrStatResetStats.setDescription('The action to reset resetable statistics data in ltmVirtualAddrStat. Setting this value to 1 will reset statistics data. Note, some statistics data may not be reset including data that are incremental counters.')
ltmVirtualAddrStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 11, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualAddrStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualAddrStatNumber.setDescription('The number of ltmVirtualAddrStat entries in the table.')
ltmVirtualAddrStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 11, 3), )
if mibBuilder.loadTexts: ltmVirtualAddrStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualAddrStatTable.setDescription('A table containing statistic information of virtual server addresses.')
ltmVirtualAddrStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 11, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrStatName"))
if mibBuilder.loadTexts: ltmVirtualAddrStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualAddrStatEntry.setDescription('Columns in the ltmVirtualAddrStat Table')
ltmVirtualAddrStatAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 11, 3, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualAddrStatAddrType.setStatus('deprecated')
if mibBuilder.loadTexts: ltmVirtualAddrStatAddrType.setDescription('Deprecated! use name instead, The IP address type of ltmVirtualAddrStatAddr')
ltmVirtualAddrStatAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 11, 3, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualAddrStatAddr.setStatus('deprecated')
if mibBuilder.loadTexts: ltmVirtualAddrStatAddr.setDescription('Deprecated! use name instead, The IP address of a virtual address. It is interpreted within the context of a ltmVitualAddrStatAddrType value.')
ltmVirtualAddrStatClientPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 11, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualAddrStatClientPktsIn.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualAddrStatClientPktsIn.setDescription('The number of packets received by the specified virtual address from client-side.')
ltmVirtualAddrStatClientBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 11, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualAddrStatClientBytesIn.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualAddrStatClientBytesIn.setDescription('The number of bytes received by the specified virtual address from client-side.')
ltmVirtualAddrStatClientPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 11, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualAddrStatClientPktsOut.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualAddrStatClientPktsOut.setDescription('The number of packets sent to client-side from the specified virtual address.')
ltmVirtualAddrStatClientBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 11, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualAddrStatClientBytesOut.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualAddrStatClientBytesOut.setDescription('The number of bytes sent to client-side from the specified virtual address.')
ltmVirtualAddrStatClientMaxConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 11, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualAddrStatClientMaxConns.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualAddrStatClientMaxConns.setDescription('The maximum connections to the specified virtual address from client-side.')
ltmVirtualAddrStatClientTotConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 11, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualAddrStatClientTotConns.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualAddrStatClientTotConns.setDescription('The total connections to the specified virtual address from client-side.')
ltmVirtualAddrStatClientCurConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 11, 3, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualAddrStatClientCurConns.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualAddrStatClientCurConns.setDescription('The current connections to the specified virtual address from client-side.')
ltmVirtualAddrStatPvaPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 11, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualAddrStatPvaPktsIn.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualAddrStatPvaPktsIn.setDescription('The number of hardware accelerated packets received by the specified virtual address.')
ltmVirtualAddrStatPvaBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 11, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualAddrStatPvaBytesIn.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualAddrStatPvaBytesIn.setDescription('The number of hardware accelerated bytes received by the specified virtual address.')
ltmVirtualAddrStatPvaPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 11, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualAddrStatPvaPktsOut.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualAddrStatPvaPktsOut.setDescription('The number of hardware accelerated packets sent out from the specified virtual address.')
ltmVirtualAddrStatPvaBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 11, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualAddrStatPvaBytesOut.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualAddrStatPvaBytesOut.setDescription('The number of hardware accelerated bytes sent out from the specified virtual address.')
ltmVirtualAddrStatPvaMaxConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 11, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualAddrStatPvaMaxConns.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualAddrStatPvaMaxConns.setDescription('The maximum hardware accelerated connections to the specified virtual address.')
ltmVirtualAddrStatPvaTotConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 11, 3, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualAddrStatPvaTotConns.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualAddrStatPvaTotConns.setDescription('The total hardware accelerated connections to the specified virtual address.')
ltmVirtualAddrStatPvaCurConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 11, 3, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualAddrStatPvaCurConns.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualAddrStatPvaCurConns.setDescription('The current hardware accelerated connections to the specified virtual address.')
ltmVirtualAddrStatTotPvaAssistConn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 11, 3, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualAddrStatTotPvaAssistConn.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualAddrStatTotPvaAssistConn.setDescription('The total number of connections to the specified virtual address, which are partially hardware accelerated.')
ltmVirtualAddrStatCurrPvaAssistConn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 11, 3, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualAddrStatCurrPvaAssistConn.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualAddrStatCurrPvaAssistConn.setDescription('The current number of connections to the specified virtual address, which are partially hardware accelerated.')
ltmVirtualAddrStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 11, 3, 1, 19), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualAddrStatName.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualAddrStatName.setDescription('Virtual Address name')
ltmFastHttpProfileNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileNumber.setStatus('current')
if mibBuilder.loadTexts: ltmFastHttpProfileNumber.setDescription('The number of ltmFastHttpProfile entries in the table.')
ltmFastHttpProfileTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 1, 2), )
if mibBuilder.loadTexts: ltmFastHttpProfileTable.setStatus('current')
if mibBuilder.loadTexts: ltmFastHttpProfileTable.setDescription('A table containing information of Fast HTTP profile.')
ltmFastHttpProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileName"))
if mibBuilder.loadTexts: ltmFastHttpProfileEntry.setStatus('current')
if mibBuilder.loadTexts: ltmFastHttpProfileEntry.setDescription('Columns in the ltmFastHttpProfile Table')
ltmFastHttpProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileName.setStatus('current')
if mibBuilder.loadTexts: ltmFastHttpProfileName.setDescription('The name of a fast HTTP profile.')
ltmFastHttpProfileConfigSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("usercfg", 0), ("basecfg", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileConfigSource.setStatus('current')
if mibBuilder.loadTexts: ltmFastHttpProfileConfigSource.setDescription('The state that specifies whether this is a base/pre-configured profile or user defined profile.')
ltmFastHttpProfileDefaultName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 1, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileDefaultName.setStatus('current')
if mibBuilder.loadTexts: ltmFastHttpProfileDefaultName.setDescription('The name of the profile from which the specified profile derives its attribute default values.')
ltmFastHttpProfileResetOnTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileResetOnTimeout.setStatus('current')
if mibBuilder.loadTexts: ltmFastHttpProfileResetOnTimeout.setDescription('If true and a TCP connection exceeds its idle_timeout, send a reset in addition to deleting the connection.')
ltmFastHttpProfileIdleTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileIdleTimeout.setStatus('current')
if mibBuilder.loadTexts: ltmFastHttpProfileIdleTimeout.setDescription('Number of seconds without traffic before a connection is eligible for deletion.')
ltmFastHttpProfileMssOverride = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 1, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileMssOverride.setStatus('current')
if mibBuilder.loadTexts: ltmFastHttpProfileMssOverride.setDescription('If non-zero and less than the 1460 default, this value overrides the maximum segment size for server-side flows.')
ltmFastHttpProfileClientCloseTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 1, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileClientCloseTimeout.setStatus('current')
if mibBuilder.loadTexts: ltmFastHttpProfileClientCloseTimeout.setDescription('Idle timeout override when waiting for the client to close. This occurs after a client FIN is received or after a FIN is sent. 0 is immediate, -1 is indefinite.')
ltmFastHttpProfileServerCloseTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 1, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileServerCloseTimeout.setStatus('current')
if mibBuilder.loadTexts: ltmFastHttpProfileServerCloseTimeout.setDescription('Idle timeout override when waiting for the server to close. This occurs if the server flow is not suitable for reuse or after a FIN is received on an unspliced server connection. 0 is immediate, -1 is indefinite.')
ltmFastHttpProfileConnpoolMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 1, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileConnpoolMaxSize.setStatus('current')
if mibBuilder.loadTexts: ltmFastHttpProfileConnpoolMaxSize.setDescription('Maximum number of connections to any given LB pool. 0 for unlimited.')
ltmFastHttpProfileConnpoolMinSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 1, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileConnpoolMinSize.setStatus('current')
if mibBuilder.loadTexts: ltmFastHttpProfileConnpoolMinSize.setDescription('Minimum number of connections to any given LB pool. 0 is an acceptable value.')
ltmFastHttpProfileConnpoolStep = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 1, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileConnpoolStep.setStatus('current')
if mibBuilder.loadTexts: ltmFastHttpProfileConnpoolStep.setDescription('Connection ramp-up increment. Must be greater than 0.')
ltmFastHttpProfileConnpoolMaxReuse = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 1, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileConnpoolMaxReuse.setStatus('current')
if mibBuilder.loadTexts: ltmFastHttpProfileConnpoolMaxReuse.setDescription('Maximum number of times a server-side flow will be reused. 0 for unlimited.')
ltmFastHttpProfileConnpoolIdleTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 1, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileConnpoolIdleTimeout.setStatus('current')
if mibBuilder.loadTexts: ltmFastHttpProfileConnpoolIdleTimeout.setDescription('Idle timeout override for unspliced server-side flows in the reuse pool. 0 is disabled, i.e. use the default idle timeout.')
ltmFastHttpProfileMaxHeaderSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 1, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileMaxHeaderSize.setStatus('current')
if mibBuilder.loadTexts: ltmFastHttpProfileMaxHeaderSize.setDescription('Maximum amount of data that will be buffered in order to make a content-switching decision.')
ltmFastHttpProfileMaxRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 1, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileMaxRequests.setStatus('current')
if mibBuilder.loadTexts: ltmFastHttpProfileMaxRequests.setDescription('Maximum number of requests on a client-side flow before the flow is shutdown. 0 for unlimited.')
ltmFastHttpProfileInsertXforwardedFor = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 1, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileInsertXforwardedFor.setStatus('current')
if mibBuilder.loadTexts: ltmFastHttpProfileInsertXforwardedFor.setDescription('The state whether to insert or replace X-Forwarded-For header with client IP.')
ltmFastHttpProfileHttp11CloseWorkarounds = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 1, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileHttp11CloseWorkarounds.setStatus('current')
if mibBuilder.loadTexts: ltmFastHttpProfileHttp11CloseWorkarounds.setDescription('The state to workaround problems with certain brands of benchmarking software that cannot handle FIN-PUSH on HTTP/1.1 responses.')
ltmFastHttpProfileHeaderInsert = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 1, 2, 1, 18), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileHeaderInsert.setStatus('current')
if mibBuilder.loadTexts: ltmFastHttpProfileHeaderInsert.setDescription('Insert the given string as a header. If the header already exists, it is not replaced. Unlike HTTP, this string does not support rule command expansion.')
ltmFastHttpProfileUncleanShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 1, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1), ("fast", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileUncleanShutdown.setStatus('current')
if mibBuilder.loadTexts: ltmFastHttpProfileUncleanShutdown.setDescription('The mode to indicate whether to do unclean shutdown for client connections.')
ltmFastHttpProfileForceHttp10Response = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 1, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileForceHttp10Response.setStatus('current')
if mibBuilder.loadTexts: ltmFastHttpProfileForceHttp10Response.setDescription("The state to indicate whether to rewrite server's HTTP version to 1.0 in status line in order to dissuade the client from pipelining or chunking.")
ltmFastHttpProfileLayer7 = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 1, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileLayer7.setStatus('current')
if mibBuilder.loadTexts: ltmFastHttpProfileLayer7.setDescription("The state that if false, we don't parse HTTP requests. This is useful for providing SYN-proxy protection for L4 connections through a SNAT where the client sends data to the server before the server responds.")
ltmFastHttpProfileConnpoolReplenish = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 1, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileConnpoolReplenish.setStatus('current')
if mibBuilder.loadTexts: ltmFastHttpProfileConnpoolReplenish.setDescription('The state that specifies whether the connpool should be replenished to its prior number of connections when a connection is closed by the server. If this is disabled, then we will only replenish a closed server side connection residing in the connpool if there are less than ltmFastHttpProfileMinSize (see above) connections in the pool.')
ltmFastHttpProfileStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmFastHttpProfileStatResetStats.setStatus('current')
if mibBuilder.loadTexts: ltmFastHttpProfileStatResetStats.setDescription('The action to reset resetable statistics data in ltmFastHttpProfileStat. Setting this value to 1 will reset statistics data. Note, some statistics data may not be reset including data that are incremental counters.')
ltmFastHttpProfileStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmFastHttpProfileStatNumber.setDescription('The number of ltmFastHttpProfileStat entries in the table.')
ltmFastHttpProfileStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 2, 3), )
if mibBuilder.loadTexts: ltmFastHttpProfileStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmFastHttpProfileStatTable.setDescription('A table containing statistic information of Fast HTTP profile.')
ltmFastHttpProfileStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 2, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileStatName"))
if mibBuilder.loadTexts: ltmFastHttpProfileStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmFastHttpProfileStatEntry.setDescription('Columns in the ltmFastHttpProfileStat Table')
ltmFastHttpProfileStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 2, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileStatName.setStatus('current')
if mibBuilder.loadTexts: ltmFastHttpProfileStatName.setDescription('The name of a fast HTTP profile.')
ltmFastHttpProfileStatClientSyns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 2, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileStatClientSyns.setStatus('current')
if mibBuilder.loadTexts: ltmFastHttpProfileStatClientSyns.setDescription('The total number of client SYN cookies generated.')
ltmFastHttpProfileStatClientAccepts = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 2, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileStatClientAccepts.setStatus('current')
if mibBuilder.loadTexts: ltmFastHttpProfileStatClientAccepts.setDescription('The total number of client TCP accepts.')
ltmFastHttpProfileStatServerConnects = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 2, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileStatServerConnects.setStatus('current')
if mibBuilder.loadTexts: ltmFastHttpProfileStatServerConnects.setDescription('The total number of server TCP connects.')
ltmFastHttpProfileStatConnpoolCurSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 2, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileStatConnpoolCurSize.setStatus('current')
if mibBuilder.loadTexts: ltmFastHttpProfileStatConnpoolCurSize.setDescription('Number of available server-side flows in the reuse pool.')
ltmFastHttpProfileStatConnpoolMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 2, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileStatConnpoolMaxSize.setStatus('current')
if mibBuilder.loadTexts: ltmFastHttpProfileStatConnpoolMaxSize.setDescription('Max number of available server-side flows in the reuse pool.')
ltmFastHttpProfileStatConnpoolReuses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 2, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileStatConnpoolReuses.setStatus('current')
if mibBuilder.loadTexts: ltmFastHttpProfileStatConnpoolReuses.setDescription('Number of times a server-side flow was reused from the pool.')
ltmFastHttpProfileStatConnpoolExhausted = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 2, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileStatConnpoolExhausted.setStatus('current')
if mibBuilder.loadTexts: ltmFastHttpProfileStatConnpoolExhausted.setDescription('Number of times the reuse pool was exhausted.')
ltmFastHttpProfileStatNumberReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 2, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileStatNumberReqs.setStatus('current')
if mibBuilder.loadTexts: ltmFastHttpProfileStatNumberReqs.setDescription('The total number of http requests.')
ltmFastHttpProfileStatUnbufferedReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 2, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileStatUnbufferedReqs.setStatus('current')
if mibBuilder.loadTexts: ltmFastHttpProfileStatUnbufferedReqs.setDescription('The total number of unbuffered requests.')
ltmFastHttpProfileStatGetReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 2, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileStatGetReqs.setStatus('current')
if mibBuilder.loadTexts: ltmFastHttpProfileStatGetReqs.setDescription('The total number of get requests.')
ltmFastHttpProfileStatPostReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 2, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileStatPostReqs.setStatus('current')
if mibBuilder.loadTexts: ltmFastHttpProfileStatPostReqs.setDescription('The total number of post requests.')
ltmFastHttpProfileStatV9Reqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 2, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileStatV9Reqs.setStatus('current')
if mibBuilder.loadTexts: ltmFastHttpProfileStatV9Reqs.setDescription('The total number of version 9 requests.')
ltmFastHttpProfileStatV10Reqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 2, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileStatV10Reqs.setStatus('current')
if mibBuilder.loadTexts: ltmFastHttpProfileStatV10Reqs.setDescription('The total number of version 10 requests.')
ltmFastHttpProfileStatV11Reqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 2, 3, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileStatV11Reqs.setStatus('current')
if mibBuilder.loadTexts: ltmFastHttpProfileStatV11Reqs.setDescription('The total number of version 11 requests.')
ltmFastHttpProfileStatResp2xxCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 2, 3, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileStatResp2xxCnt.setStatus('current')
if mibBuilder.loadTexts: ltmFastHttpProfileStatResp2xxCnt.setDescription('Number of server-side responses in range of 200 to 206 (successful responses).')
ltmFastHttpProfileStatResp3xxCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 2, 3, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileStatResp3xxCnt.setStatus('current')
if mibBuilder.loadTexts: ltmFastHttpProfileStatResp3xxCnt.setDescription('Number of server-side responses in range of 300 to 307 (redirection responses).')
ltmFastHttpProfileStatResp4xxCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 2, 3, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileStatResp4xxCnt.setStatus('current')
if mibBuilder.loadTexts: ltmFastHttpProfileStatResp4xxCnt.setDescription('Number of server-side responses in range of 400 to 417 (client errors). ')
ltmFastHttpProfileStatResp5xxCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 2, 3, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileStatResp5xxCnt.setStatus('current')
if mibBuilder.loadTexts: ltmFastHttpProfileStatResp5xxCnt.setDescription('Number of server-side responses in range of 500 to 505 (server errors).')
ltmFastHttpProfileStatReqParseErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 2, 3, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileStatReqParseErrors.setStatus('current')
if mibBuilder.loadTexts: ltmFastHttpProfileStatReqParseErrors.setDescription('Number of request parse errors.')
ltmFastHttpProfileStatRespParseErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 2, 3, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileStatRespParseErrors.setStatus('current')
if mibBuilder.loadTexts: ltmFastHttpProfileStatRespParseErrors.setDescription('Number of response parse errors.')
ltmFastHttpProfileStatClientRxBad = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 2, 3, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileStatClientRxBad.setStatus('current')
if mibBuilder.loadTexts: ltmFastHttpProfileStatClientRxBad.setDescription('Number of bad TCP segments dropped from client-side.')
ltmFastHttpProfileStatServerRxBad = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 2, 3, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileStatServerRxBad.setStatus('current')
if mibBuilder.loadTexts: ltmFastHttpProfileStatServerRxBad.setDescription('Number of bad TCP segments dropped from server-side.')
ltmFastHttpProfileStatPipelinedReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 2, 3, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileStatPipelinedReqs.setStatus('current')
if mibBuilder.loadTexts: ltmFastHttpProfileStatPipelinedReqs.setDescription('Number of pipelined HTTP requests detected.')
ltmXmlProfileNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 13, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmXmlProfileNumber.setStatus('current')
if mibBuilder.loadTexts: ltmXmlProfileNumber.setDescription('The number of ltmXmlProfile entries in the table.')
ltmXmlProfileTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 13, 1, 2), )
if mibBuilder.loadTexts: ltmXmlProfileTable.setStatus('current')
if mibBuilder.loadTexts: ltmXmlProfileTable.setDescription('A table containing information of XML profile.')
ltmXmlProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 13, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmXmlProfileName"))
if mibBuilder.loadTexts: ltmXmlProfileEntry.setStatus('current')
if mibBuilder.loadTexts: ltmXmlProfileEntry.setDescription('Columns in the ltmXmlProfile Table')
ltmXmlProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 13, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmXmlProfileName.setStatus('current')
if mibBuilder.loadTexts: ltmXmlProfileName.setDescription('The name of a XML profile.')
ltmXmlProfileConfigSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 13, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("usercfg", 0), ("basecfg", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmXmlProfileConfigSource.setStatus('current')
if mibBuilder.loadTexts: ltmXmlProfileConfigSource.setDescription('The state that specifies whether this is a base/pre-configured profile or user defined profile.')
ltmXmlProfileDefaultName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 13, 1, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmXmlProfileDefaultName.setStatus('current')
if mibBuilder.loadTexts: ltmXmlProfileDefaultName.setDescription('The name of the profile from which the specified profile derives its attribute default values.')
ltmXmlProfileAbortOnError = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 13, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmXmlProfileAbortOnError.setStatus('deprecated')
if mibBuilder.loadTexts: ltmXmlProfileAbortOnError.setDescription('Deprecated! The state that if true, abort the connection on errors.')
ltmXmlProfileMaxBufferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 13, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmXmlProfileMaxBufferSize.setStatus('deprecated')
if mibBuilder.loadTexts: ltmXmlProfileMaxBufferSize.setDescription('Deprecated! The value that specifies the maximum buffer size for the specified profile.')
ltmXmlProfileMultipleQueryMatches = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 13, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmXmlProfileMultipleQueryMatches.setStatus('current')
if mibBuilder.loadTexts: ltmXmlProfileMultipleQueryMatches.setDescription('The state that if true, multiple matches for a single XPath query are enabled.')
ltmXmlProfileStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 13, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmXmlProfileStatResetStats.setStatus('current')
if mibBuilder.loadTexts: ltmXmlProfileStatResetStats.setDescription('The action to reset resetable statistics data in ltmXmlProfileStat. Setting this value to 1 will reset statistics data. Note, some statistics data may not be reset including data that are incremental counters.')
ltmXmlProfileStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 13, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmXmlProfileStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmXmlProfileStatNumber.setDescription('The number of ltmXmlProfileStat entries in the table.')
ltmXmlProfileStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 13, 2, 3), )
if mibBuilder.loadTexts: ltmXmlProfileStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmXmlProfileStatTable.setDescription('A table containing statistic information of XML profile.')
ltmXmlProfileStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 13, 2, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmXmlProfileStatName"))
if mibBuilder.loadTexts: ltmXmlProfileStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmXmlProfileStatEntry.setDescription('Columns in the ltmXmlProfileStat Table')
ltmXmlProfileStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 13, 2, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmXmlProfileStatName.setStatus('current')
if mibBuilder.loadTexts: ltmXmlProfileStatName.setDescription('The name of a XML profile.')
ltmXmlProfileStatNumErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 13, 2, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmXmlProfileStatNumErrors.setStatus('deprecated')
if mibBuilder.loadTexts: ltmXmlProfileStatNumErrors.setDescription('Deprecated! The total number of XML parsing errors.')
ltmXmlProfileStatNumInspectedDocuments = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 13, 2, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmXmlProfileStatNumInspectedDocuments.setStatus('current')
if mibBuilder.loadTexts: ltmXmlProfileStatNumInspectedDocuments.setDescription('The total number of inspected XML documents.')
ltmXmlProfileStatNumDocumentsWithOneMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 13, 2, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmXmlProfileStatNumDocumentsWithOneMatch.setStatus('current')
if mibBuilder.loadTexts: ltmXmlProfileStatNumDocumentsWithOneMatch.setDescription('The total number of XML documents in which one XPath query match was found.')
ltmXmlProfileStatNumDocumentsWithTwoMatches = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 13, 2, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmXmlProfileStatNumDocumentsWithTwoMatches.setStatus('current')
if mibBuilder.loadTexts: ltmXmlProfileStatNumDocumentsWithTwoMatches.setDescription('The total number of XML documents in which two XPath query matches were found.')
ltmXmlProfileStatNumDocumentsWithThreeMatches = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 13, 2, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmXmlProfileStatNumDocumentsWithThreeMatches.setStatus('current')
if mibBuilder.loadTexts: ltmXmlProfileStatNumDocumentsWithThreeMatches.setDescription('The total number of XML documents in which three XPath query matches were found.')
ltmXmlProfileStatNumDocumentsWithNoMatches = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 13, 2, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmXmlProfileStatNumDocumentsWithNoMatches.setStatus('current')
if mibBuilder.loadTexts: ltmXmlProfileStatNumDocumentsWithNoMatches.setDescription('The total number of XML documents in which no XPath query matches were found.')
ltmXmlProfileStatNumMalformedDocuments = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 13, 2, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmXmlProfileStatNumMalformedDocuments.setStatus('current')
if mibBuilder.loadTexts: ltmXmlProfileStatNumMalformedDocuments.setDescription('The total number of malformed XML documents.')
ltmRamUriExclNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRamUriExclNumber.setStatus('deprecated')
if mibBuilder.loadTexts: ltmRamUriExclNumber.setDescription('Deprecated!. The number of ltmHttpProfileRamUriExcl entries in the table.')
ltmRamUriExclTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 7, 2), )
if mibBuilder.loadTexts: ltmRamUriExclTable.setStatus('deprecated')
if mibBuilder.loadTexts: ltmRamUriExclTable.setDescription("A table containing information of RAM cached excludes URI's in HTTP profiles.")
ltmRamUriExclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 7, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmRamUriExclName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmRamUriExclIndex"))
if mibBuilder.loadTexts: ltmRamUriExclEntry.setStatus('deprecated')
if mibBuilder.loadTexts: ltmRamUriExclEntry.setDescription('Columns in the ltmRamUriExcl Table')
ltmRamUriExclName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 7, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRamUriExclName.setStatus('deprecated')
if mibBuilder.loadTexts: ltmRamUriExclName.setDescription('The name of a HTTP profile.')
ltmRamUriExclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 7, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRamUriExclIndex.setStatus('deprecated')
if mibBuilder.loadTexts: ltmRamUriExclIndex.setDescription('The index of RAM cached excludes URI for the specified HTTP profile.')
ltmRamUriExclUri = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 7, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRamUriExclUri.setStatus('deprecated')
if mibBuilder.loadTexts: ltmRamUriExclUri.setDescription('The RAM cached excludes URI for the specified profile.')
ltmRamUriInclNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRamUriInclNumber.setStatus('deprecated')
if mibBuilder.loadTexts: ltmRamUriInclNumber.setDescription('Deprecated!. The number of ltmHttpProfileRamUriIncl entries in the table.')
ltmRamUriInclTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 8, 2), )
if mibBuilder.loadTexts: ltmRamUriInclTable.setStatus('deprecated')
if mibBuilder.loadTexts: ltmRamUriInclTable.setDescription("A table containing information of RAM cached includes URI's in HTTP profiles.")
ltmRamUriInclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 8, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmRamUriInclName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmRamUriInclIndex"))
if mibBuilder.loadTexts: ltmRamUriInclEntry.setStatus('deprecated')
if mibBuilder.loadTexts: ltmRamUriInclEntry.setDescription('Columns in the ltmRamUriIncl Table')
ltmRamUriInclName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 8, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRamUriInclName.setStatus('deprecated')
if mibBuilder.loadTexts: ltmRamUriInclName.setDescription('The name of a HTTP profile.')
ltmRamUriInclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 8, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRamUriInclIndex.setStatus('deprecated')
if mibBuilder.loadTexts: ltmRamUriInclIndex.setDescription('The index of RAM cached includes URI for the specified HTTP profile.')
ltmRamUriInclUri = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 8, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRamUriInclUri.setStatus('deprecated')
if mibBuilder.loadTexts: ltmRamUriInclUri.setDescription('The RAM cached includes URI for the specified profile.')
ltmRamUriPinNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRamUriPinNumber.setStatus('deprecated')
if mibBuilder.loadTexts: ltmRamUriPinNumber.setDescription('Deprecated!. The number of ltmHttpProfileRamUriPin entries in the table.')
ltmRamUriPinTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 9, 2), )
if mibBuilder.loadTexts: ltmRamUriPinTable.setStatus('deprecated')
if mibBuilder.loadTexts: ltmRamUriPinTable.setDescription("A table containing information of RAM cached URI's pinned in HTTP profiles.")
ltmRamUriPinEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 9, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmRamUriPinName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmRamUriPinIndex"))
if mibBuilder.loadTexts: ltmRamUriPinEntry.setStatus('deprecated')
if mibBuilder.loadTexts: ltmRamUriPinEntry.setDescription('Columns in the ltmRamUriPin Table')
ltmRamUriPinName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 9, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRamUriPinName.setStatus('deprecated')
if mibBuilder.loadTexts: ltmRamUriPinName.setDescription('The name of a HTTP profile.')
ltmRamUriPinIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 9, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRamUriPinIndex.setStatus('deprecated')
if mibBuilder.loadTexts: ltmRamUriPinIndex.setDescription('The index of RAM cached URI pinned for the specified HTTP profile.')
ltmRamUriPinUri = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 9, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRamUriPinUri.setStatus('deprecated')
if mibBuilder.loadTexts: ltmRamUriPinUri.setDescription('The RAM cached URI pinned for the specified profile.')
ltmDnsProfileNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileNumber.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileNumber.setDescription('The number of ltmDnsProfile entries in the table.')
ltmDnsProfileTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 1, 2), )
if mibBuilder.loadTexts: ltmDnsProfileTable.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileTable.setDescription('A table containing information for DNS profiles.')
ltmDnsProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmDnsProfileName"))
if mibBuilder.loadTexts: ltmDnsProfileEntry.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileEntry.setDescription('Columns in the ltmDnsProfile Table')
ltmDnsProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileName.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileName.setDescription('The name of a DNS profile.')
ltmDnsProfileConfigSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("usercfg", 0), ("basecfg", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileConfigSource.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileConfigSource.setDescription('The state that specifies whether this is a base/pre-configured profile or user defined profile.')
ltmDnsProfileDefaultName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 1, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileDefaultName.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileDefaultName.setDescription('The name of the profile from which the specified profile derives its attribute default values.')
ltmDnsProfileGtmEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileGtmEnabled.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileGtmEnabled.setDescription('The state indicating whether or not to allow GTMD (Global Traffic Management Daemon) to handle DNS resolution for DNS queries and responses that contain Wide IP names.')
ltmDnsProfileDns64Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disable", 0), ("secondary", 1), ("immediate", 2), ("v4only", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileDns64Mode.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileDns64Mode.setDescription('The mode which specifies whether to perform DNS64 translation, and how to perform it. disable - no DNS64 translation is performed; secondary - send AAAA first, if no result send another A; immediate - send both AAAA and A together; v4only - send only A request.')
ltmDnsProfileDns64PrefixType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 1, 2, 1, 6), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileDns64PrefixType.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileDns64PrefixType.setDescription('The IP address type of DNS64 prefix.')
ltmDnsProfileDns64Prefix = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 1, 2, 1, 7), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileDns64Prefix.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileDns64Prefix.setDescription('The prefix for DNS64 mapping for the specified DNS profile.')
ltmDnsProfileDns64AdditionalRewrite = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disable", 0), ("v6only", 1), ("v4only", 2), ("any", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileDns64AdditionalRewrite.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileDns64AdditionalRewrite.setDescription('Controls system behavior when a DNS response contains AAAA or A record(s) in the additional section. When DNS64 is enabled, this option selects how to rewrite (or not rewrite) these entries. disable - do not rewrite records in the additional section; v6only - the system deletes any A records in the additional section; v4only - the system deletes any AAAA records in the additional section, and rewrites A records into AAAA by prepending the IPv6 prefix; any - the system allows any AAAA records in the additional section, and rewrites A records into AAAA by prepending the IPv6 prefix.')
ltmDnsProfileDnsLastAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("allow", 0), ("drop", 1), ("reject", 2), ("hint", 3), ("noerror", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileDnsLastAction.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileDnsLastAction.setDescription('Last action that will be taken if there is no matching zone name, i.e. a DNS query does not match a GTM Wide IP name, is not a DNSSEC query type (e.g. DNSKEY, etc.), does not match a DNS-Express Zone name, and DNS cache is not configured/enabled. allow - last action is to pass the DNS query to either a pool member or on-box BIND. This is pre-11.x behavior; drop - last action is to drop the DNS query; reject - last action is to send a DNS response with a REFUSED rcode set in the header; hint - last action is to send a DNS response with a list of root name servers; noerror - last action is to send a DNS response with a NOERROR rcode set in the header.')
ltmDnsProfileUseLocalBind = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileUseLocalBind.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileUseLocalBind.setDescription('The state indicating whether or not local BIND is used as a DNS resource.')
ltmDnsProfileDnsExpressEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileDnsExpressEnabled.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileDnsExpressEnabled.setDescription('The state indicating whether or not DNS Express is enabled for the specified profile.')
ltmDnsProfileDnssecEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileDnssecEnabled.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileDnssecEnabled.setDescription('The state indicating whether or not DNSSEC is enabled for the specified profile.')
ltmDnsProfileCacheEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileCacheEnabled.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileCacheEnabled.setDescription('The state indicating whether or not DNS cache is enabled for the specified profile.')
ltmDnsProfileDnsCache = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 1, 2, 1, 14), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileDnsCache.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileDnsCache.setDescription('The name of the DNS cache used for the specified profile.')
ltmDnsProfileProcessRd = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 1, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileProcessRd.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileProcessRd.setDescription('The state indicating whether or not the further processing of clientside DNS packets with the RD (recursion desired) bit set in the header is allowed. If set to false, packet is subject to last action processing. This is for DDOS mitigation.')
ltmDnsProfileAvrDnsStatSampleRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 1, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileAvrDnsStatSampleRate.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileAvrDnsStatSampleRate.setDescription('The AVR DNS statistics sample rate for the specified profile. When the value is 0, no DNS queries will be stored in analytics database. When the value is 1, all DNS queries will be stored. When the value is an integer N (N>1), only one DNS query for every N DNS queries will be stored.')
ltmDnsProfileSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 1, 2, 1, 17), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileSecurity.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileSecurity.setDescription('The name of the DNS security used for the specified profile.')
ltmDnsProfileSecurityEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 1, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileSecurityEnabled.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileSecurityEnabled.setDescription('The state indicating whether or not DNS firewall is enabled for the specified profile.')
ltmDnsProfileLoggingProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 1, 2, 1, 19), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileLoggingProfile.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileLoggingProfile.setDescription('The name of DNS logging profile that is being used.')
ltmDnsProfileLoggingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 1, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileLoggingEnabled.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileLoggingEnabled.setDescription('The state indicating whether or not DNS packet logging is enabled for the specified profile.')
ltmDnsProfileFastDnsEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 1, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileFastDnsEnabled.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileFastDnsEnabled.setDescription('The state indicating whether or not to allow DNS Rapid Response to handle DNS resolution for DNS queries that contain GTM Wide IP names or part of a DNS-Express Zone.')
ltmHttpClassNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassNumber.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassNumber.setDescription('Deprecated!. The number of ltmHttpClassProfile entries in the table.')
ltmHttpClassTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 1, 2), )
if mibBuilder.loadTexts: ltmHttpClassTable.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassTable.setDescription('Deprecated! A table containing information of HTTP class profile.')
ltmHttpClassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmHttpClassName"))
if mibBuilder.loadTexts: ltmHttpClassEntry.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassEntry.setDescription('Columns in the ltmHttpClass Table')
ltmHttpClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassName.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassName.setDescription('Deprecated! The name of a HTTP class profile.')
ltmHttpClassConfigSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("usercfg", 0), ("basecfg", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassConfigSource.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassConfigSource.setDescription('Deprecated! The state that specifies whether this is a base/pre-configured profile or user defined profile.')
ltmHttpClassDefaultName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 1, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassDefaultName.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassDefaultName.setDescription('Deprecated! The name of the profile from which the specified profile derives its attribute default values.')
ltmHttpClassPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 1, 2, 1, 4), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassPoolName.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassPoolName.setDescription('Deprecated! The pool name which will be used when the specified class matches.')
ltmHttpClassAsmEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassAsmEnabled.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassAsmEnabled.setDescription('Deprecated! The state indicating whether this is an Application Security Module class or not.')
ltmHttpClassWaEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassWaEnabled.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassWaEnabled.setDescription('Deprecated! The state indicating whether this is a Web Accelerator class or not.')
ltmHttpClassRedirectLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 1, 2, 1, 7), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassRedirectLocation.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassRedirectLocation.setDescription('Deprecated! The string (which may include a TCL expression) to indicate where to redirect the original HTTP request once a match occurs.')
ltmHttpClassUrlRewrite = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 1, 2, 1, 8), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassUrlRewrite.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassUrlRewrite.setDescription('Deprecated! The string (which may include a TCL expression) with which to rewrite the URLs.')
ltmHttpClassHostNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassHostNumber.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassHostNumber.setDescription('Deprecated!. The number of ltmHttpClassProfileHost entries in the table.')
ltmHttpClassHostTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 2, 2), )
if mibBuilder.loadTexts: ltmHttpClassHostTable.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassHostTable.setDescription('Deprecated! A table containing information of host match patterns in HTTP class profiles.')
ltmHttpClassHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 2, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmHttpClassHostName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmHttpClassHostIndex"))
if mibBuilder.loadTexts: ltmHttpClassHostEntry.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassHostEntry.setDescription('Columns in the ltmHttpClassHost Table')
ltmHttpClassHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 2, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassHostName.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassHostName.setDescription('Deprecated! The name of a HTTP class profile.')
ltmHttpClassHostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassHostIndex.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassHostIndex.setDescription('Deprecated! The index of host match patterns for the specified HTTP class profile.')
ltmHttpClassHostString = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 2, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassHostString.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassHostString.setDescription('Deprecated! The host match pattern for the specified profile.')
ltmHttpClassUriNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassUriNumber.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassUriNumber.setDescription('Deprecated!. The number of ltmHttpClassProfileUri entries in the table.')
ltmHttpClassUriTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 3, 2), )
if mibBuilder.loadTexts: ltmHttpClassUriTable.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassUriTable.setDescription('Deprecated! A table containing information of URI match patterns in HTTP class profiles.')
ltmHttpClassUriEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 3, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmHttpClassUriName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmHttpClassUriIndex"))
if mibBuilder.loadTexts: ltmHttpClassUriEntry.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassUriEntry.setDescription('Columns in the ltmHttpClassUri Table')
ltmHttpClassUriName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 3, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassUriName.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassUriName.setDescription('Deprecated! The name of a HTTP class profile.')
ltmHttpClassUriIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassUriIndex.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassUriIndex.setDescription('Deprecated! The index of URI match patterns for the specified HTTP class profile.')
ltmHttpClassUriString = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 3, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassUriString.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassUriString.setDescription('Deprecated! The URI match pattern for the specified profile.')
ltmHttpClassHeadNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassHeadNumber.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassHeadNumber.setDescription('Deprecated!. The number of ltmHttpClassProfileHead entries in the table.')
ltmHttpClassHeadTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 4, 2), )
if mibBuilder.loadTexts: ltmHttpClassHeadTable.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassHeadTable.setDescription('Deprecated! A table containing information of HTTP request header match patterns in HTTP class profiles.')
ltmHttpClassHeadEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 4, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmHttpClassHeadName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmHttpClassHeadIndex"))
if mibBuilder.loadTexts: ltmHttpClassHeadEntry.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassHeadEntry.setDescription('Columns in the ltmHttpClassHead Table')
ltmHttpClassHeadName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 4, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassHeadName.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassHeadName.setDescription('Deprecated! The name of a HTTP class profile.')
ltmHttpClassHeadIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassHeadIndex.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassHeadIndex.setDescription('Deprecated! The index of HTTP request header match patterns for the specified HTTP class profile.')
ltmHttpClassHeadString = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 4, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassHeadString.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassHeadString.setDescription('Deprecated! The HTTP request header match pattern for the specified profile.')
ltmHttpClassCookNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassCookNumber.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassCookNumber.setDescription('Deprecated!. The number of ltmHttpClassProfileCook entries in the table.')
ltmHttpClassCookTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 5, 2), )
if mibBuilder.loadTexts: ltmHttpClassCookTable.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassCookTable.setDescription('Deprecated! A table containing information of HTTP cookie match patterns in HTTP class profiles.')
ltmHttpClassCookEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 5, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmHttpClassCookName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmHttpClassCookIndex"))
if mibBuilder.loadTexts: ltmHttpClassCookEntry.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassCookEntry.setDescription('Columns in the ltmHttpClassCook Table')
ltmHttpClassCookName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 5, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassCookName.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassCookName.setDescription('Deprecated! The name of a HTTP class profile.')
ltmHttpClassCookIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassCookIndex.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassCookIndex.setDescription('Deprecated! The index of HTTP cookie match patterns for the specified HTTP class profile.')
ltmHttpClassCookString = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 5, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassCookString.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassCookString.setDescription('Deprecated! The HTTP cookie match pattern for the specified profile.')
ltmHttpClassStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmHttpClassStatResetStats.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassStatResetStats.setDescription('Deprecated!. The action to reset resetable statistics data in ltmHttpClassProfileStat. Setting this value to 1 will reset statistics data. Note, some statistics data may not be reset including data that are incremental counters.')
ltmHttpClassStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatNumber.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassStatNumber.setDescription('Deprecated!. The number of ltmHttpClassProfileStat entries in the table.')
ltmHttpClassStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3), )
if mibBuilder.loadTexts: ltmHttpClassStatTable.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassStatTable.setDescription('Deprecated! A table containing statistics information of HTTP class profile.')
ltmHttpClassStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatName"))
if mibBuilder.loadTexts: ltmHttpClassStatEntry.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassStatEntry.setDescription('Columns in the ltmHttpClassStat Table')
ltmHttpClassStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatName.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassStatName.setDescription('Deprecated! The name of a HTTP class profile.')
ltmHttpClassStatCookiePersistInserts = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatCookiePersistInserts.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassStatCookiePersistInserts.setDescription('Deprecated! The number of successful attempts to insert HTTP headers for cookie persistence (set-cookie header insertions).')
ltmHttpClassStatResp2xxCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatResp2xxCnt.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassStatResp2xxCnt.setDescription('Deprecated! The number of server-side responses in range of 200 to 206 (successful responses)')
ltmHttpClassStatResp3xxCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatResp3xxCnt.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassStatResp3xxCnt.setDescription('Deprecated! The number of server-side responses in range of 300 to 307 (redirection responses).')
ltmHttpClassStatResp4xxCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatResp4xxCnt.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassStatResp4xxCnt.setDescription('Deprecated! The number of server-side responses in range of 400 to 417 (client errors).')
ltmHttpClassStatResp5xxCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatResp5xxCnt.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassStatResp5xxCnt.setDescription('Deprecated! The number of server-side responses in range of 500 to 505 (server errors).')
ltmHttpClassStatNumberReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatNumberReqs.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassStatNumberReqs.setDescription('Deprecated! The total number of HTTP requests.')
ltmHttpClassStatGetReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatGetReqs.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassStatGetReqs.setDescription('Deprecated! The total number of HTTP get requests.')
ltmHttpClassStatPostReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatPostReqs.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassStatPostReqs.setDescription('Deprecated! The total number of HTTP post requests.')
ltmHttpClassStatV9Reqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatV9Reqs.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassStatV9Reqs.setDescription('Deprecated! The total number of version 9 requests.')
ltmHttpClassStatV10Reqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatV10Reqs.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassStatV10Reqs.setDescription('Deprecated! The total number of version 10 requests.')
ltmHttpClassStatV11Reqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatV11Reqs.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassStatV11Reqs.setDescription('Deprecated! The total number of version 11 requests.')
ltmHttpClassStatV9Resp = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatV9Resp.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassStatV9Resp.setDescription('Deprecated! The total number of version 9 responses.')
ltmHttpClassStatV10Resp = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatV10Resp.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassStatV10Resp.setDescription('Deprecated! The total number of version 10 responses.')
ltmHttpClassStatV11Resp = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatV11Resp.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassStatV11Resp.setDescription('Deprecated! The total number of version 11 responses.')
ltmHttpClassStatMaxKeepaliveReq = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatMaxKeepaliveReq.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassStatMaxKeepaliveReq.setDescription('Deprecated! The maximum number of requests made in a connection.')
ltmHttpClassStatRespBucket1k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatRespBucket1k.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassStatRespBucket1k.setDescription('Deprecated! The number of responses under 1k.')
ltmHttpClassStatRespBucket4k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatRespBucket4k.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassStatRespBucket4k.setDescription('Deprecated! The number of responses between 1 - 4k.')
ltmHttpClassStatRespBucket16k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatRespBucket16k.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassStatRespBucket16k.setDescription('Deprecated! The number of responses between 4 - 16k.')
ltmHttpClassStatRespBucket32k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatRespBucket32k.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassStatRespBucket32k.setDescription('Deprecated! The number of responses between 16 - 32k.')
ltmHttpClassStatRespBucket64k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatRespBucket64k.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassStatRespBucket64k.setDescription('Deprecated! Please use larger buckets')
ltmHttpClassStatPrecompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatPrecompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassStatPrecompressBytes.setDescription('Deprecated! The number of response bytes before compression has taken place.')
ltmHttpClassStatPostcompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatPostcompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassStatPostcompressBytes.setDescription('Deprecated! The number of response bytes after compression has taken place.')
ltmHttpClassStatNullCompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatNullCompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassStatNullCompressBytes.setDescription('Deprecated! The number of bytes subjected to NULL compression (for license enforcement).')
ltmHttpClassStatHtmlPrecompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatHtmlPrecompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassStatHtmlPrecompressBytes.setDescription('Deprecated! The number of pre-compressed bytes for the MIME-Types: HTML.')
ltmHttpClassStatHtmlPostcompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatHtmlPostcompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassStatHtmlPostcompressBytes.setDescription('Deprecated! The number of post-compressed bytes for the MIME-Types: HTML.')
ltmHttpClassStatCssPrecompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatCssPrecompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassStatCssPrecompressBytes.setDescription('Deprecated! The number of pre-compressed bytes for the MIME-Types: CSS.')
ltmHttpClassStatCssPostcompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatCssPostcompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassStatCssPostcompressBytes.setDescription('Deprecated! The number of post-compressed bytes for the MIME-Types: CSS.')
ltmHttpClassStatJsPrecompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatJsPrecompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassStatJsPrecompressBytes.setDescription('Deprecated! The number of pre-compressed bytes for the MIME-Types: Javascript.')
ltmHttpClassStatJsPostcompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatJsPostcompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassStatJsPostcompressBytes.setDescription('Deprecated! The number of post-compressed bytes for the MIME-Types: Javascript.')
ltmHttpClassStatXmlPrecompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatXmlPrecompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassStatXmlPrecompressBytes.setDescription('Deprecated! The number of pre-compressed bytes for the MIME-Types: XML.')
ltmHttpClassStatXmlPostcompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatXmlPostcompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassStatXmlPostcompressBytes.setDescription('Deprecated! The number of post-compressed bytes for the MIME-Types: XML.')
ltmHttpClassStatSgmlPrecompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatSgmlPrecompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassStatSgmlPrecompressBytes.setDescription('Deprecated! The number of pre-compressed bytes for the MIME-Types: SGML.')
ltmHttpClassStatSgmlPostcompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatSgmlPostcompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassStatSgmlPostcompressBytes.setDescription('Deprecated! The number of post-compressed bytes for the MIME-Types: SGML.')
ltmHttpClassStatPlainPrecompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatPlainPrecompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassStatPlainPrecompressBytes.setDescription('Deprecated! The number of pre-compressed bytes for the MIME-Types: Plain.')
ltmHttpClassStatPlainPostcompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatPlainPostcompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassStatPlainPostcompressBytes.setDescription('Deprecated! The number of post-compressed bytes for the MIME-Types: Plain.')
ltmHttpClassStatOctetPrecompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatOctetPrecompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassStatOctetPrecompressBytes.setDescription('Deprecated! The number of pre-compressed bytes for the MIME-Types: Octet stream.')
ltmHttpClassStatOctetPostcompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatOctetPostcompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassStatOctetPostcompressBytes.setDescription('Deprecated! The number of post-compressed bytes for the MIME-Types: Octet stream.')
ltmHttpClassStatImagePrecompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatImagePrecompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassStatImagePrecompressBytes.setDescription('Deprecated! The number of pre-compressed bytes for the MIME-Types: Images.')
ltmHttpClassStatImagePostcompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatImagePostcompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassStatImagePostcompressBytes.setDescription('Deprecated! The number of post-compressed bytes for the MIME-Types: Images.')
ltmHttpClassStatVideoPrecompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatVideoPrecompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassStatVideoPrecompressBytes.setDescription('Deprecated! The number of pre-compressed bytes for the MIME-Types: Video files.')
ltmHttpClassStatVideoPostcompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatVideoPostcompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassStatVideoPostcompressBytes.setDescription('Deprecated! The number of post-compressed bytes for the MIME-Types: Video files.')
ltmHttpClassStatAudioPrecompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatAudioPrecompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassStatAudioPrecompressBytes.setDescription('Deprecated! The number of pre-compressed bytes for the MIME-Types: Audio files.')
ltmHttpClassStatAudioPostcompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 44), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatAudioPostcompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassStatAudioPostcompressBytes.setDescription('Deprecated! The number of post-compressed bytes for the MIME-Types: Audio files.')
ltmHttpClassStatOtherPrecompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatOtherPrecompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassStatOtherPrecompressBytes.setDescription('Deprecated! The number of pre-compressed bytes for the MIME-Types: other than HTML, CSS, Javascript, XML, SGML, Plain, Images, Video files, Audio files.')
ltmHttpClassStatOtherPostcompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 46), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatOtherPostcompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassStatOtherPostcompressBytes.setDescription('Deprecated! The number of post-compressed bytes for the MIME-Types: other than HTML, CSS, Javascript, XML, SGML, Plain, Images, Video files, Audio files.')
ltmHttpClassStatRamcacheHits = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 47), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatRamcacheHits.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassStatRamcacheHits.setDescription('Deprecated! The number of RAM cache hits.')
ltmHttpClassStatRamcacheMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 48), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatRamcacheMisses.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassStatRamcacheMisses.setDescription('Deprecated! The number of RAM cache misses, excluding un-cacheable data.')
ltmHttpClassStatRamcacheMissesAll = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 49), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatRamcacheMissesAll.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassStatRamcacheMissesAll.setDescription('Deprecated! The total number of RAM cache misses.')
ltmHttpClassStatRamcacheHitBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 50), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatRamcacheHitBytes.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassStatRamcacheHitBytes.setDescription('Deprecated! The number of RAM cache hits in bytes.')
ltmHttpClassStatRamcacheMissBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 51), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatRamcacheMissBytes.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassStatRamcacheMissBytes.setDescription('Deprecated! The number of RAM cache misses in bytes, excluding un-cacheable data.')
ltmHttpClassStatRamcacheMissBytesAll = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 52), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatRamcacheMissBytesAll.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassStatRamcacheMissBytesAll.setDescription('Deprecated! The total number of RAM cache misses in bytes.')
ltmIiopProfileNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 16, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIiopProfileNumber.setStatus('current')
if mibBuilder.loadTexts: ltmIiopProfileNumber.setDescription('The number of ltmIiopProfile entries in the table.')
ltmIiopProfileTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 16, 1, 2), )
if mibBuilder.loadTexts: ltmIiopProfileTable.setStatus('current')
if mibBuilder.loadTexts: ltmIiopProfileTable.setDescription('A table containing information of IIOP profile.')
ltmIiopProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 16, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmIiopProfileName"))
if mibBuilder.loadTexts: ltmIiopProfileEntry.setStatus('current')
if mibBuilder.loadTexts: ltmIiopProfileEntry.setDescription('Columns in the ltmIiopProfile Table')
ltmIiopProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 16, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIiopProfileName.setStatus('current')
if mibBuilder.loadTexts: ltmIiopProfileName.setDescription('The name of a IIOP profile.')
ltmIiopProfileConfigSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 16, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("usercfg", 0), ("basecfg", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIiopProfileConfigSource.setStatus('current')
if mibBuilder.loadTexts: ltmIiopProfileConfigSource.setDescription('The state that specifies whether this is a base/pre-configured profile or user defined profile.')
ltmIiopProfileDefaultName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 16, 1, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIiopProfileDefaultName.setStatus('current')
if mibBuilder.loadTexts: ltmIiopProfileDefaultName.setDescription('The name of the profile from which the specified profile derives its attribute default values.')
ltmIiopProfilePersistRequestId = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 16, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIiopProfilePersistRequestId.setStatus('current')
if mibBuilder.loadTexts: ltmIiopProfilePersistRequestId.setDescription('The state that if true, persist the request ID.')
ltmIiopProfilePersistObjectKey = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 16, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIiopProfilePersistObjectKey.setStatus('current')
if mibBuilder.loadTexts: ltmIiopProfilePersistObjectKey.setDescription('The state that if true, persist the object key.')
ltmIiopProfileAbortOnTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 16, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIiopProfileAbortOnTimeout.setStatus('current')
if mibBuilder.loadTexts: ltmIiopProfileAbortOnTimeout.setDescription('The state that if true, abort the connection when response is timed out.')
ltmIiopProfileTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 16, 1, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIiopProfileTimeout.setStatus('current')
if mibBuilder.loadTexts: ltmIiopProfileTimeout.setDescription('The response timeout for the specified IIOP profile.')
ltmIiopProfileStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 16, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmIiopProfileStatResetStats.setStatus('current')
if mibBuilder.loadTexts: ltmIiopProfileStatResetStats.setDescription('The action to reset resetable statistics data in ltmIiopProfileStat. Setting this value to 1 will reset statistics data. Note, some statistics data may not be reset including data that are incremental counters.')
ltmIiopProfileStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 16, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIiopProfileStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmIiopProfileStatNumber.setDescription('The number of ltmIiopProfileStat entries in the table.')
ltmIiopProfileStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 16, 2, 3), )
if mibBuilder.loadTexts: ltmIiopProfileStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmIiopProfileStatTable.setDescription('A table containing statistic information of IIOP profile.')
ltmIiopProfileStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 16, 2, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmIiopProfileStatName"))
if mibBuilder.loadTexts: ltmIiopProfileStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmIiopProfileStatEntry.setDescription('Columns in the ltmIiopProfileStat Table')
ltmIiopProfileStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 16, 2, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIiopProfileStatName.setStatus('current')
if mibBuilder.loadTexts: ltmIiopProfileStatName.setDescription('The name of a IIOP profile.')
ltmIiopProfileStatNumRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 16, 2, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIiopProfileStatNumRequests.setStatus('current')
if mibBuilder.loadTexts: ltmIiopProfileStatNumRequests.setDescription('The total number of IIOP requests.')
ltmIiopProfileStatNumResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 16, 2, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIiopProfileStatNumResponses.setStatus('current')
if mibBuilder.loadTexts: ltmIiopProfileStatNumResponses.setDescription('The total number of IIOP responses.')
ltmIiopProfileStatNumCancels = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 16, 2, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIiopProfileStatNumCancels.setStatus('current')
if mibBuilder.loadTexts: ltmIiopProfileStatNumCancels.setDescription('The total number of IIOP cancel messages.')
ltmIiopProfileStatNumErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 16, 2, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIiopProfileStatNumErrors.setStatus('current')
if mibBuilder.loadTexts: ltmIiopProfileStatNumErrors.setDescription('The total number of IIOP error messages.')
ltmIiopProfileStatNumFragments = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 16, 2, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIiopProfileStatNumFragments.setStatus('current')
if mibBuilder.loadTexts: ltmIiopProfileStatNumFragments.setDescription('The total number of IIOP fragments.')
ltmRtspProfileNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 17, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRtspProfileNumber.setStatus('current')
if mibBuilder.loadTexts: ltmRtspProfileNumber.setDescription('The number of ltmRtspProfile entries in the table.')
ltmRtspProfileTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 17, 1, 2), )
if mibBuilder.loadTexts: ltmRtspProfileTable.setStatus('current')
if mibBuilder.loadTexts: ltmRtspProfileTable.setDescription('A table containing information of RTSP profile.')
ltmRtspProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 17, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmRtspProfileName"))
if mibBuilder.loadTexts: ltmRtspProfileEntry.setStatus('current')
if mibBuilder.loadTexts: ltmRtspProfileEntry.setDescription('Columns in the ltmRtspProfile Table')
ltmRtspProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 17, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRtspProfileName.setStatus('current')
if mibBuilder.loadTexts: ltmRtspProfileName.setDescription('The name of a RTSP profile.')
ltmRtspProfileConfigSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 17, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("usercfg", 0), ("basecfg", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRtspProfileConfigSource.setStatus('current')
if mibBuilder.loadTexts: ltmRtspProfileConfigSource.setDescription('The state that specifies whether this is a base/pre-configured profile or user defined profile.')
ltmRtspProfileDefaultName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 17, 1, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRtspProfileDefaultName.setStatus('current')
if mibBuilder.loadTexts: ltmRtspProfileDefaultName.setDescription('The name of the profile from which the specified profile derives its attribute default values.')
ltmRtspProfileIdleTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 17, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRtspProfileIdleTimeout.setStatus('current')
if mibBuilder.loadTexts: ltmRtspProfileIdleTimeout.setDescription('The idle timeout (in seconds) for the specified RTSP profile.')
ltmRtspProfileMaxHeaderSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 17, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRtspProfileMaxHeaderSize.setStatus('current')
if mibBuilder.loadTexts: ltmRtspProfileMaxHeaderSize.setDescription('The maximum header size in bytes for the specified RTSP profile.')
ltmRtspProfileMaxQueuedData = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 17, 1, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRtspProfileMaxQueuedData.setStatus('current')
if mibBuilder.loadTexts: ltmRtspProfileMaxQueuedData.setDescription('The maximum queued data in bytes for the specified RTSP profile.')
ltmRtspProfileUnicastRedirect = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 17, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRtspProfileUnicastRedirect.setStatus('current')
if mibBuilder.loadTexts: ltmRtspProfileUnicastRedirect.setDescription('The state indicating whether unicast redirect is enable or not for the specified RTSP profile.')
ltmRtspProfileMulticastRedirect = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 17, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRtspProfileMulticastRedirect.setStatus('current')
if mibBuilder.loadTexts: ltmRtspProfileMulticastRedirect.setDescription('The state indicating whether multicast redirect is enable or not for the specified RTSP profile.')
ltmRtspProfileSessionReconnect = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 17, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRtspProfileSessionReconnect.setStatus('current')
if mibBuilder.loadTexts: ltmRtspProfileSessionReconnect.setDescription('The state indicating whether session reconnecting is enable or not for the specified RTSP profile.')
ltmRtspProfileRealHttpPersistence = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 17, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRtspProfileRealHttpPersistence.setStatus('current')
if mibBuilder.loadTexts: ltmRtspProfileRealHttpPersistence.setDescription('The state indicating whether real HTTP persistence is enable or not for the specified RTSP profile.')
ltmRtspProfileProxy = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 17, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("external", 1), ("internal", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRtspProfileProxy.setStatus('current')
if mibBuilder.loadTexts: ltmRtspProfileProxy.setDescription('The proxy state for the specified RTSP profile.')
ltmRtspProfileProxyHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 17, 1, 2, 1, 12), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRtspProfileProxyHeader.setStatus('current')
if mibBuilder.loadTexts: ltmRtspProfileProxyHeader.setDescription('The proxy header for the specified RTSP profile.')
ltmRtspProfileRtpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 17, 1, 2, 1, 13), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRtspProfileRtpPort.setStatus('current')
if mibBuilder.loadTexts: ltmRtspProfileRtpPort.setDescription('The RTP port for the specified RTSP profile.')
ltmRtspProfileRtcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 17, 1, 2, 1, 14), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRtspProfileRtcpPort.setStatus('current')
if mibBuilder.loadTexts: ltmRtspProfileRtcpPort.setDescription('The RTCP port for the specified RTSP profile.')
ltmRtspProfileLogPublisher = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 17, 1, 2, 1, 15), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRtspProfileLogPublisher.setStatus('current')
if mibBuilder.loadTexts: ltmRtspProfileLogPublisher.setDescription('Specifies the name of the log publisher that logs ALG events, if any.')
ltmRtspProfileLogProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 17, 1, 2, 1, 16), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRtspProfileLogProfile.setStatus('current')
if mibBuilder.loadTexts: ltmRtspProfileLogProfile.setDescription('Specifies the name of the log profile that control the logging of ALG events, if any.')
ltmRtspProfileStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 17, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmRtspProfileStatResetStats.setStatus('current')
if mibBuilder.loadTexts: ltmRtspProfileStatResetStats.setDescription('The action to reset resetable statistics data in ltmRtspProfileStat. Setting this value to 1 will reset statistics data. Note, some statistics data may not be reset including data that are incremental counters.')
ltmRtspProfileStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 17, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRtspProfileStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmRtspProfileStatNumber.setDescription('The number of ltmRtspProfileStat entries in the table.')
ltmRtspProfileStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 17, 2, 3), )
if mibBuilder.loadTexts: ltmRtspProfileStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmRtspProfileStatTable.setDescription('A table containing statistic information of RTSP profile.')
ltmRtspProfileStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 17, 2, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmRtspProfileStatName"))
if mibBuilder.loadTexts: ltmRtspProfileStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmRtspProfileStatEntry.setDescription('Columns in the ltmRtspProfileStat Table')
ltmRtspProfileStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 17, 2, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRtspProfileStatName.setStatus('current')
if mibBuilder.loadTexts: ltmRtspProfileStatName.setDescription('The name of a RTSP profile.')
ltmRtspProfileStatNumRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 17, 2, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRtspProfileStatNumRequests.setStatus('current')
if mibBuilder.loadTexts: ltmRtspProfileStatNumRequests.setDescription('The total number of RTSP requests for the specified RTSP profile.')
ltmRtspProfileStatNumResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 17, 2, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRtspProfileStatNumResponses.setStatus('current')
if mibBuilder.loadTexts: ltmRtspProfileStatNumResponses.setDescription('The total number of RTSP responses for the specified RTSP profile.')
ltmRtspProfileStatNumErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 17, 2, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRtspProfileStatNumErrors.setStatus('current')
if mibBuilder.loadTexts: ltmRtspProfileStatNumErrors.setDescription('The total number of RTSP errors for the specified RTSP profile.')
ltmRtspProfileStatNumInterleaved = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 17, 2, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRtspProfileStatNumInterleaved.setStatus('current')
if mibBuilder.loadTexts: ltmRtspProfileStatNumInterleaved.setDescription('The total number of interleaved RTSP data packets for the specified RTSP profile.')
ltmSctpProfileNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileNumber.setStatus('current')
if mibBuilder.loadTexts: ltmSctpProfileNumber.setDescription('The number of ltmSctpProfile entries in the table.')
ltmSctpProfileTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 1, 2), )
if mibBuilder.loadTexts: ltmSctpProfileTable.setStatus('current')
if mibBuilder.loadTexts: ltmSctpProfileTable.setDescription('A table containing information of SCTP profile.')
ltmSctpProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmSctpProfileName"))
if mibBuilder.loadTexts: ltmSctpProfileEntry.setStatus('current')
if mibBuilder.loadTexts: ltmSctpProfileEntry.setDescription('Columns in the ltmSctpProfile Table')
ltmSctpProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileName.setStatus('current')
if mibBuilder.loadTexts: ltmSctpProfileName.setDescription('The name of a SCTP profile.')
ltmSctpProfileConfigSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("usercfg", 0), ("basecfg", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileConfigSource.setStatus('current')
if mibBuilder.loadTexts: ltmSctpProfileConfigSource.setDescription('The state that specifies whether this is a base/pre-configured profile or user defined profile.')
ltmSctpProfileDefaultName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 1, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileDefaultName.setStatus('current')
if mibBuilder.loadTexts: ltmSctpProfileDefaultName.setDescription('The name of the profile from which the specified profile derives its attribute default values.')
ltmSctpProfileRcvOrdered = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileRcvOrdered.setStatus('current')
if mibBuilder.loadTexts: ltmSctpProfileRcvOrdered.setDescription('The state indicating whether or not to in-order deliver messages to upper layer for the specified profile.')
ltmSctpProfileSndPartial = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileSndPartial.setStatus('current')
if mibBuilder.loadTexts: ltmSctpProfileSndPartial.setDescription('The state indicating whether or not to accept partial of application data for the specified profile.')
ltmSctpProfileTcpShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileTcpShutdown.setStatus('current')
if mibBuilder.loadTexts: ltmSctpProfileTcpShutdown.setDescription('The state indicating whether or not to emulate TCP closing for the specified profile.')
ltmSctpProfileResetOnTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileResetOnTimeout.setStatus('current')
if mibBuilder.loadTexts: ltmSctpProfileResetOnTimeout.setDescription('The state indicating whether or not reset connection when timeout for the specified profile.')
ltmSctpProfileOutStreams = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 1, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileOutStreams.setStatus('current')
if mibBuilder.loadTexts: ltmSctpProfileOutStreams.setDescription('The total number of out-bound streams for the specified profile.')
ltmSctpProfileInStreams = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 1, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileInStreams.setStatus('current')
if mibBuilder.loadTexts: ltmSctpProfileInStreams.setDescription('The total number of in-bound streams for the specified profile.')
ltmSctpProfileSndbuf = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 1, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileSndbuf.setStatus('current')
if mibBuilder.loadTexts: ltmSctpProfileSndbuf.setDescription('The send buffer size in bytes for the specified profile.')
ltmSctpProfileRcvwnd = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 1, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileRcvwnd.setStatus('current')
if mibBuilder.loadTexts: ltmSctpProfileRcvwnd.setDescription('The received window size, should be prorated to ltmSctpProfileRxChuncks for the specified profile.')
ltmSctpProfileTxChunks = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 1, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileTxChunks.setStatus('current')
if mibBuilder.loadTexts: ltmSctpProfileTxChunks.setDescription('The number of sending chunk buffer for the specified profile.')
ltmSctpProfileRxChunks = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 1, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileRxChunks.setStatus('current')
if mibBuilder.loadTexts: ltmSctpProfileRxChunks.setDescription('The number of receiving chunk buffer for the specified profile.')
ltmSctpProfileCookieExpiration = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 1, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileCookieExpiration.setStatus('current')
if mibBuilder.loadTexts: ltmSctpProfileCookieExpiration.setDescription('The valid duration of cookie for the specified profile.')
ltmSctpProfileInitMaxrtx = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 1, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileInitMaxrtx.setStatus('current')
if mibBuilder.loadTexts: ltmSctpProfileInitMaxrtx.setDescription('The maximum number of retries to establish a connection for the specified profile.')
ltmSctpProfileAssocMaxrtx = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 1, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileAssocMaxrtx.setStatus('current')
if mibBuilder.loadTexts: ltmSctpProfileAssocMaxrtx.setDescription('The maximum number of retries to send data for the specified profile.')
ltmSctpProfileProxyBufferLow = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 1, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileProxyBufferLow.setStatus('current')
if mibBuilder.loadTexts: ltmSctpProfileProxyBufferLow.setDescription('The proxy buffer level at which the receive window is opened for the specified profile.')
ltmSctpProfileProxyBufferHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 1, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileProxyBufferHigh.setStatus('current')
if mibBuilder.loadTexts: ltmSctpProfileProxyBufferHigh.setDescription('The proxy buffer level at which the receive window is closed for the specified profile.')
ltmSctpProfileIdleTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 1, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileIdleTimeout.setStatus('current')
if mibBuilder.loadTexts: ltmSctpProfileIdleTimeout.setDescription('The number of seconds without traffic before a connection is eligible for deletion for the specified profile.')
ltmSctpProfileHeartbeatInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 1, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileHeartbeatInterval.setStatus('current')
if mibBuilder.loadTexts: ltmSctpProfileHeartbeatInterval.setDescription('The number of seconds to send heartbeat for the specified profile.')
ltmSctpProfileIpTosToPeer = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 1, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileIpTosToPeer.setStatus('current')
if mibBuilder.loadTexts: ltmSctpProfileIpTosToPeer.setDescription('The IP type of service set in packets sent to peer for the specified profile.')
ltmSctpProfileLinkQosToPeer = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 1, 2, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileLinkQosToPeer.setStatus('current')
if mibBuilder.loadTexts: ltmSctpProfileLinkQosToPeer.setDescription('The link quality of service set in packets sent to peer for the specified profile.')
ltmSctpProfileSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 1, 2, 1, 23), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileSecret.setStatus('current')
if mibBuilder.loadTexts: ltmSctpProfileSecret.setDescription('The internal secret string used to HMAC cookie for the specified profile.')
ltmSctpProfileMaxBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 1, 2, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileMaxBurst.setStatus('current')
if mibBuilder.loadTexts: ltmSctpProfileMaxBurst.setDescription('The maximum number of data packets sent in a burst')
ltmSctpProfileHeartbeatMaxBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 1, 2, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileHeartbeatMaxBurst.setStatus('current')
if mibBuilder.loadTexts: ltmSctpProfileHeartbeatMaxBurst.setDescription('The maximum number of heartbeat packets sent in a burst')
ltmSctpProfileStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmSctpProfileStatResetStats.setStatus('current')
if mibBuilder.loadTexts: ltmSctpProfileStatResetStats.setDescription('The action to reset resetable statistics data in ltmSctpProfileStat. Setting this value to 1 will reset statistics data. Note, some statistics data may not be reset including data that are incremental counters.')
ltmSctpProfileStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmSctpProfileStatNumber.setDescription('The number of ltmSctpProfileStat entries in the table.')
ltmSctpProfileStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 2, 3), )
if mibBuilder.loadTexts: ltmSctpProfileStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmSctpProfileStatTable.setDescription('A table containing statistic information of SCTP profile.')
ltmSctpProfileStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 2, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmSctpProfileStatName"))
if mibBuilder.loadTexts: ltmSctpProfileStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmSctpProfileStatEntry.setDescription('Columns in the ltmSctpProfileStat Table')
ltmSctpProfileStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 2, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileStatName.setStatus('current')
if mibBuilder.loadTexts: ltmSctpProfileStatName.setDescription('The name of a SCTP profile.')
ltmSctpProfileStatAccepts = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 2, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileStatAccepts.setStatus('current')
if mibBuilder.loadTexts: ltmSctpProfileStatAccepts.setDescription('The total number of accepted connections for the specified profile.')
ltmSctpProfileStatAcceptfails = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 2, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileStatAcceptfails.setStatus('current')
if mibBuilder.loadTexts: ltmSctpProfileStatAcceptfails.setDescription('The total number of not accepted responses for the specified profile.')
ltmSctpProfileStatConnects = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 2, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileStatConnects.setStatus('current')
if mibBuilder.loadTexts: ltmSctpProfileStatConnects.setDescription('The total number of established connections for the specified profile.')
ltmSctpProfileStatConnfails = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 2, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileStatConnfails.setStatus('current')
if mibBuilder.loadTexts: ltmSctpProfileStatConnfails.setDescription('The total number of connections failures for the specified profile.')
ltmSctpProfileStatExpires = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 2, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileStatExpires.setStatus('current')
if mibBuilder.loadTexts: ltmSctpProfileStatExpires.setDescription('The total number of expired connections due to idle timeout for the specified profile.')
ltmSctpProfileStatAbandons = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 2, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileStatAbandons.setStatus('current')
if mibBuilder.loadTexts: ltmSctpProfileStatAbandons.setDescription('The total number of abandoned connections due to retries/keep-alives for the specified profile.')
ltmSctpProfileStatRxrst = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 2, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileStatRxrst.setStatus('current')
if mibBuilder.loadTexts: ltmSctpProfileStatRxrst.setDescription('The total number of received Abort chunks for the specified profile.')
ltmSctpProfileStatRxbadsum = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 2, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileStatRxbadsum.setStatus('current')
if mibBuilder.loadTexts: ltmSctpProfileStatRxbadsum.setDescription('The total number of bad checksum in received packets for the specified profile.')
ltmSctpProfileStatRxcookie = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 2, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileStatRxcookie.setStatus('current')
if mibBuilder.loadTexts: ltmSctpProfileStatRxcookie.setDescription('The total number of received SCTP cookies (including bad and good ones) for the specified profile.')
ltmSctpProfileStatRxbadcookie = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 2, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileStatRxbadcookie.setStatus('current')
if mibBuilder.loadTexts: ltmSctpProfileStatRxbadcookie.setDescription('The total number of received bad SCTP cookies for the specified profile.')
ltmUserStatProfileNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 19, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmUserStatProfileNumber.setStatus('current')
if mibBuilder.loadTexts: ltmUserStatProfileNumber.setDescription('The number of ltmUserStatProfile entries in the table.')
ltmUserStatProfileTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 19, 1, 2), )
if mibBuilder.loadTexts: ltmUserStatProfileTable.setStatus('current')
if mibBuilder.loadTexts: ltmUserStatProfileTable.setDescription('A table containing basic information of user-defined statistics profiles., The user can define up to 32 statistic fields in each profile. See ltmUserStatProfileStatTable for user-defined fields for each profile.')
ltmUserStatProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 19, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmUserStatProfileName"))
if mibBuilder.loadTexts: ltmUserStatProfileEntry.setStatus('current')
if mibBuilder.loadTexts: ltmUserStatProfileEntry.setDescription('Columns in the ltmUserStatProfile Table')
ltmUserStatProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 19, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmUserStatProfileName.setStatus('current')
if mibBuilder.loadTexts: ltmUserStatProfileName.setDescription('The name of an user-defined statistics profile.')
ltmUserStatProfileConfigSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 19, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("usercfg", 0), ("basecfg", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmUserStatProfileConfigSource.setStatus('current')
if mibBuilder.loadTexts: ltmUserStatProfileConfigSource.setDescription('The state that specifies whether this is a base/pre-configured profile or user defined profile.')
ltmUserStatProfileDefaultName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 19, 1, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmUserStatProfileDefaultName.setStatus('current')
if mibBuilder.loadTexts: ltmUserStatProfileDefaultName.setDescription('The name of the profile from which the specified profile derives its attribute default values.')
ltmUserStatProfileStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 19, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmUserStatProfileStatResetStats.setStatus('current')
if mibBuilder.loadTexts: ltmUserStatProfileStatResetStats.setDescription('The action to reset resetable statistics data in ltmUserStatProfileStat. Setting this value to 1 will reset statistics data. Note, some statistics data may not be reset including data that are incremental counters.')
ltmUserStatProfileStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 19, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmUserStatProfileStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmUserStatProfileStatNumber.setDescription('The number of ltmUserStatProfileStat entries in the table.')
ltmUserStatProfileStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 19, 2, 3), )
if mibBuilder.loadTexts: ltmUserStatProfileStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmUserStatProfileStatTable.setDescription('A table containing user-defined statistics information for related profiles. The maximum for user-defined statistic fields is 32 for each profile.')
ltmUserStatProfileStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 19, 2, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmUserStatProfileStatName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmUserStatProfileStatFieldId"))
if mibBuilder.loadTexts: ltmUserStatProfileStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmUserStatProfileStatEntry.setDescription('Columns in the ltmUserStatProfileStat Table')
ltmUserStatProfileStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 19, 2, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmUserStatProfileStatName.setStatus('current')
if mibBuilder.loadTexts: ltmUserStatProfileStatName.setDescription('The name of an user-defined statistics profile.')
ltmUserStatProfileStatFieldId = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 19, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmUserStatProfileStatFieldId.setStatus('current')
if mibBuilder.loadTexts: ltmUserStatProfileStatFieldId.setDescription('The index of the user-defined statistics field.')
ltmUserStatProfileStatFieldName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 19, 2, 3, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmUserStatProfileStatFieldName.setStatus('current')
if mibBuilder.loadTexts: ltmUserStatProfileStatFieldName.setDescription('The name of the related user-defined statistic field.')
ltmUserStatProfileStatFieldValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 19, 2, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmUserStatProfileStatFieldValue.setStatus('current')
if mibBuilder.loadTexts: ltmUserStatProfileStatFieldValue.setDescription('The value of the related user-defined statistic field.')
ltmVsHttpClassNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 12, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVsHttpClassNumber.setStatus('deprecated')
if mibBuilder.loadTexts: ltmVsHttpClassNumber.setDescription('Deprecated!. The number of ltmVirtualServHttpClass entries in the table.')
ltmVsHttpClassTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 12, 2), )
if mibBuilder.loadTexts: ltmVsHttpClassTable.setStatus('deprecated')
if mibBuilder.loadTexts: ltmVsHttpClassTable.setDescription('Deprecated! A table containing information of HTTP class profiles with which the specified virtual servers associate.')
ltmVsHttpClassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 12, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmVsHttpClassVsName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmVsHttpClassProfileName"))
if mibBuilder.loadTexts: ltmVsHttpClassEntry.setStatus('deprecated')
if mibBuilder.loadTexts: ltmVsHttpClassEntry.setDescription('Columns in the ltmVsHttpClass Table')
ltmVsHttpClassVsName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 12, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVsHttpClassVsName.setStatus('deprecated')
if mibBuilder.loadTexts: ltmVsHttpClassVsName.setDescription('Deprecated! The name of a virtual server.')
ltmVsHttpClassProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 12, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVsHttpClassProfileName.setStatus('deprecated')
if mibBuilder.loadTexts: ltmVsHttpClassProfileName.setDescription('Deprecated! The name of HTTP class profile with which the specified virtual server associate.')
ltmVsHttpClassPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 12, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVsHttpClassPriority.setStatus('deprecated')
if mibBuilder.loadTexts: ltmVsHttpClassPriority.setDescription('Deprecated! The priority of the profile among profiles used by the specified virtual server.')
ltmNodeAddrStatusNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrStatusNumber.setStatus('current')
if mibBuilder.loadTexts: ltmNodeAddrStatusNumber.setDescription('The number of ltmNodeAddrStatus entries in the table.')
ltmNodeAddrStatusTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 3, 2), )
if mibBuilder.loadTexts: ltmNodeAddrStatusTable.setStatus('current')
if mibBuilder.loadTexts: ltmNodeAddrStatusTable.setDescription('A table containing status information of node addresses.')
ltmNodeAddrStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 3, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmNodeAddrStatusName"))
if mibBuilder.loadTexts: ltmNodeAddrStatusEntry.setStatus('current')
if mibBuilder.loadTexts: ltmNodeAddrStatusEntry.setDescription('Columns in the ltmNodeAddrStatus Table')
ltmNodeAddrStatusAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 3, 2, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrStatusAddrType.setStatus('current')
if mibBuilder.loadTexts: ltmNodeAddrStatusAddrType.setDescription('The IP address type of ltmNodeAddrStatusAddr.')
ltmNodeAddrStatusAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 3, 2, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrStatusAddr.setStatus('current')
if mibBuilder.loadTexts: ltmNodeAddrStatusAddr.setDescription('The IP address of a node. It is interpreted within the context of a ltmNodeAddrStatusAddrType value.')
ltmNodeAddrStatusAvailState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 0), ("green", 1), ("yellow", 2), ("red", 3), ("blue", 4), ("gray", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrStatusAvailState.setStatus('current')
if mibBuilder.loadTexts: ltmNodeAddrStatusAvailState.setDescription('The availability of the specified node address indicated in color. none - error; green - available in some capacity; yellow - not currently available; red - not available; blue - availability is unknown; gray - unlicensed.')
ltmNodeAddrStatusEnabledState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("enabled", 1), ("disabled", 2), ("disabledbyparent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrStatusEnabledState.setStatus('current')
if mibBuilder.loadTexts: ltmNodeAddrStatusEnabledState.setDescription('The activity status of the specified node address, as specified by the user.')
ltmNodeAddrStatusParentType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 3, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrStatusParentType.setStatus('deprecated')
if mibBuilder.loadTexts: ltmNodeAddrStatusParentType.setDescription('Deprecated! This is an internal data. The type of parent object which disabled the specified node address.')
ltmNodeAddrStatusDetailReason = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 3, 2, 1, 6), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrStatusDetailReason.setStatus('current')
if mibBuilder.loadTexts: ltmNodeAddrStatusDetailReason.setDescription("The detail description of the specified node's status.")
ltmNodeAddrStatusName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 3, 2, 1, 7), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrStatusName.setStatus('current')
if mibBuilder.loadTexts: ltmNodeAddrStatusName.setDescription('node name.')
ltmPoolStatusNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatusNumber.setStatus('current')
if mibBuilder.loadTexts: ltmPoolStatusNumber.setDescription('The number of ltmPoolStatus entries in the table.')
ltmPoolStatusTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 5, 2), )
if mibBuilder.loadTexts: ltmPoolStatusTable.setStatus('current')
if mibBuilder.loadTexts: ltmPoolStatusTable.setDescription('A table containing status information of pools.')
ltmPoolStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 5, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmPoolStatusName"))
if mibBuilder.loadTexts: ltmPoolStatusEntry.setStatus('current')
if mibBuilder.loadTexts: ltmPoolStatusEntry.setDescription('Columns in the ltmPoolStatus Table')
ltmPoolStatusName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 5, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatusName.setStatus('current')
if mibBuilder.loadTexts: ltmPoolStatusName.setDescription('The name of a pool.')
ltmPoolStatusAvailState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 0), ("green", 1), ("yellow", 2), ("red", 3), ("blue", 4), ("grey", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatusAvailState.setStatus('current')
if mibBuilder.loadTexts: ltmPoolStatusAvailState.setDescription('The availability of the specified pool indicated in color. none - error; green - available in some capacity; yellow - not currently available; red - not available; blue - availability is unknown; gray - unlicensed')
ltmPoolStatusEnabledState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("enabled", 1), ("disabled", 2), ("disabledbyparent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatusEnabledState.setStatus('current')
if mibBuilder.loadTexts: ltmPoolStatusEnabledState.setDescription('The activity status of the specified pool, as specified by the user.')
ltmPoolStatusParentType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 5, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatusParentType.setStatus('deprecated')
if mibBuilder.loadTexts: ltmPoolStatusParentType.setDescription('Deprecated! This is an internal data. The type of parent object which disabled the specified pool.')
ltmPoolStatusDetailReason = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 5, 2, 1, 5), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatusDetailReason.setStatus('current')
if mibBuilder.loadTexts: ltmPoolStatusDetailReason.setDescription("The detail description of the specified pool's status.")
ltmPoolMbrStatusNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMbrStatusNumber.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMbrStatusNumber.setDescription('The number of ltmPoolMemberStatus entries in the table.')
ltmPoolMbrStatusTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 6, 2), )
if mibBuilder.loadTexts: ltmPoolMbrStatusTable.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMbrStatusTable.setDescription('A table containing status information of pool members.')
ltmPoolMbrStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 6, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmPoolMbrStatusPoolName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmPoolMbrStatusNodeName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmPoolMbrStatusPort"))
if mibBuilder.loadTexts: ltmPoolMbrStatusEntry.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMbrStatusEntry.setDescription('Columns in the ltmPoolMbrStatus Table')
ltmPoolMbrStatusPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 6, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMbrStatusPoolName.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMbrStatusPoolName.setDescription('The name of a pool.')
ltmPoolMbrStatusAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 6, 2, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMbrStatusAddrType.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMbrStatusAddrType.setDescription('The IP address type of ltmPoolMbrStatusAddr.')
ltmPoolMbrStatusAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 6, 2, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMbrStatusAddr.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMbrStatusAddr.setDescription('The IP address of a pool member in the specified pool. It is interpreted within the context of an ltmPoolMbrStatusAddrType value.')
ltmPoolMbrStatusPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 6, 2, 1, 4), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMbrStatusPort.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMbrStatusPort.setDescription('The port number of the specified pool member.')
ltmPoolMbrStatusAvailState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 6, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 0), ("green", 1), ("yellow", 2), ("red", 3), ("blue", 4), ("gray", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMbrStatusAvailState.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMbrStatusAvailState.setDescription('The availability of the specified pool member indicated in color. none - error; green - available in some capacity; yellow - not currently available; red - not available; blue - availability is unknown; gray - unlicensed.')
ltmPoolMbrStatusEnabledState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 6, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("enabled", 1), ("disabled", 2), ("disabledbyparent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMbrStatusEnabledState.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMbrStatusEnabledState.setDescription('The activity status of the specified pool member, as specified by the user.')
ltmPoolMbrStatusParentType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 6, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMbrStatusParentType.setStatus('deprecated')
if mibBuilder.loadTexts: ltmPoolMbrStatusParentType.setDescription('Deprecated! This is an internal data. The type of parent object which disabled the specified pool member.')
ltmPoolMbrStatusDetailReason = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 6, 2, 1, 8), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMbrStatusDetailReason.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMbrStatusDetailReason.setDescription("The detail description of the specified pool member's status.")
ltmPoolMbrStatusNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 6, 2, 1, 9), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMbrStatusNodeName.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMbrStatusNodeName.setDescription('Name of associated name.')
ltmVsStatusNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 13, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVsStatusNumber.setStatus('current')
if mibBuilder.loadTexts: ltmVsStatusNumber.setDescription('The number of ltmVirtualServStatus entries in the table.')
ltmVsStatusTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 13, 2), )
if mibBuilder.loadTexts: ltmVsStatusTable.setStatus('current')
if mibBuilder.loadTexts: ltmVsStatusTable.setDescription('A table containing status information of virtual servers.')
ltmVsStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 13, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmVsStatusName"))
if mibBuilder.loadTexts: ltmVsStatusEntry.setStatus('current')
if mibBuilder.loadTexts: ltmVsStatusEntry.setDescription('Columns in the ltmVsStatus Table')
ltmVsStatusName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 13, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVsStatusName.setStatus('current')
if mibBuilder.loadTexts: ltmVsStatusName.setDescription('The name of a virtual server.')
ltmVsStatusAvailState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 13, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 0), ("green", 1), ("yellow", 2), ("red", 3), ("blue", 4), ("gray", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVsStatusAvailState.setStatus('current')
if mibBuilder.loadTexts: ltmVsStatusAvailState.setDescription('The availability of the specified virtual server indicated in color. none - error; green - available in some capacity; yellow - not currently available; red - not available; blue - availability is unknown; gray - unlicensed.')
ltmVsStatusEnabledState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 13, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("enabled", 1), ("disabled", 2), ("disabledbyparent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVsStatusEnabledState.setStatus('current')
if mibBuilder.loadTexts: ltmVsStatusEnabledState.setDescription('The activity status of the specified virtual server, as specified by the user.')
ltmVsStatusParentType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 13, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVsStatusParentType.setStatus('deprecated')
if mibBuilder.loadTexts: ltmVsStatusParentType.setDescription('Deprecated! This is an internal data. The type of parent object which disabled the specified virtual server.')
ltmVsStatusDetailReason = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 13, 2, 1, 5), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVsStatusDetailReason.setStatus('current')
if mibBuilder.loadTexts: ltmVsStatusDetailReason.setDescription("The detail description of the specified virtual server's status.")
ltmVAddrStatusNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 14, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVAddrStatusNumber.setStatus('current')
if mibBuilder.loadTexts: ltmVAddrStatusNumber.setDescription('The number of ltmVirtualAddrStatus entries in the table.')
ltmVAddrStatusTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 14, 2), )
if mibBuilder.loadTexts: ltmVAddrStatusTable.setStatus('current')
if mibBuilder.loadTexts: ltmVAddrStatusTable.setDescription('A table containing status information of virtual addressess.')
ltmVAddrStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 14, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmVAddrStatusName"))
if mibBuilder.loadTexts: ltmVAddrStatusEntry.setStatus('current')
if mibBuilder.loadTexts: ltmVAddrStatusEntry.setDescription('Columns in the ltmVAddrStatus Table')
ltmVAddrStatusAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 14, 2, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVAddrStatusAddrType.setStatus('current')
if mibBuilder.loadTexts: ltmVAddrStatusAddrType.setDescription('The IP address type of ltmVsAddrStatusAddr')
ltmVAddrStatusAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 14, 2, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVAddrStatusAddr.setStatus('current')
if mibBuilder.loadTexts: ltmVAddrStatusAddr.setDescription('The IP address of a virtual address. It is interpreted within the context of a ltmVsAddrAddrType value.')
ltmVAddrStatusAvailState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 14, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 0), ("green", 1), ("yellow", 2), ("red", 3), ("blue", 4), ("gray", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVAddrStatusAvailState.setStatus('current')
if mibBuilder.loadTexts: ltmVAddrStatusAvailState.setDescription('The availability of the specified virtual address indicated in color. none - error; green - available in some capacity; yellow - not currently available; red - not available; blue - availability is unknown; gray - unlicensed.')
ltmVAddrStatusEnabledState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 14, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("enabled", 1), ("disabled", 2), ("disabledbyparent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVAddrStatusEnabledState.setStatus('current')
if mibBuilder.loadTexts: ltmVAddrStatusEnabledState.setDescription('The activity status of the specified virtual address, as specified by the user.')
ltmVAddrStatusParentType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 14, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVAddrStatusParentType.setStatus('deprecated')
if mibBuilder.loadTexts: ltmVAddrStatusParentType.setDescription('Deprecated! This is an internal data. The type of parent object which disabled the specified virtual address.')
ltmVAddrStatusDetailReason = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 14, 2, 1, 6), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVAddrStatusDetailReason.setStatus('current')
if mibBuilder.loadTexts: ltmVAddrStatusDetailReason.setDescription("The detail description of the specified virtual address's status.")
ltmVAddrStatusName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 14, 2, 1, 7), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVAddrStatusName.setStatus('current')
if mibBuilder.loadTexts: ltmVAddrStatusName.setDescription('Virtual Address name')
ltmFallbackStatusNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFallbackStatusNumber.setStatus('current')
if mibBuilder.loadTexts: ltmFallbackStatusNumber.setDescription('The number of ltmHttpProfileFallbackStatus entries in the table.')
ltmFallbackStatusTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 10, 2), )
if mibBuilder.loadTexts: ltmFallbackStatusTable.setStatus('current')
if mibBuilder.loadTexts: ltmFallbackStatusTable.setDescription("A table containing information of status codes that when matched, traffic will be sent to the 'fallback_host' for HTTP profiles.")
ltmFallbackStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 10, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmFallbackStatusName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmFallbackStatusIndex"))
if mibBuilder.loadTexts: ltmFallbackStatusEntry.setStatus('current')
if mibBuilder.loadTexts: ltmFallbackStatusEntry.setDescription('Columns in the ltmFallbackStatus Table')
ltmFallbackStatusName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 10, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFallbackStatusName.setStatus('current')
if mibBuilder.loadTexts: ltmFallbackStatusName.setDescription('The name of a HTTP profile.')
ltmFallbackStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 10, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFallbackStatusIndex.setStatus('current')
if mibBuilder.loadTexts: ltmFallbackStatusIndex.setDescription('The index of status code for the specified HTTP profile.')
ltmFallbackStatusCode = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 10, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFallbackStatusCode.setStatus('current')
if mibBuilder.loadTexts: ltmFallbackStatusCode.setDescription("The status code that when matched, traffic will be sent to the 'fallback_host' for the specified profile.")
ltmRespHeadersPermNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 11, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRespHeadersPermNumber.setStatus('current')
if mibBuilder.loadTexts: ltmRespHeadersPermNumber.setDescription('The number of ltmHttpProfileRespHeadersPerm entries in the table.')
ltmRespHeadersPermTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 11, 2), )
if mibBuilder.loadTexts: ltmRespHeadersPermTable.setStatus('current')
if mibBuilder.loadTexts: ltmRespHeadersPermTable.setDescription('A table containing information of permitted headers in the responses for HTTP profiles.')
ltmRespHeadersPermEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 11, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmRespHeadersPermName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmRespHeadersPermIndex"))
if mibBuilder.loadTexts: ltmRespHeadersPermEntry.setStatus('current')
if mibBuilder.loadTexts: ltmRespHeadersPermEntry.setDescription('Columns in the ltmRespHeadersPerm Table')
ltmRespHeadersPermName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 11, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRespHeadersPermName.setStatus('current')
if mibBuilder.loadTexts: ltmRespHeadersPermName.setDescription('The name of a HTTP profile.')
ltmRespHeadersPermIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 11, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRespHeadersPermIndex.setStatus('current')
if mibBuilder.loadTexts: ltmRespHeadersPermIndex.setDescription('The index of permitted header in a response for the specified HTTP profile.')
ltmRespHeadersPermStr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 11, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRespHeadersPermStr.setStatus('current')
if mibBuilder.loadTexts: ltmRespHeadersPermStr.setDescription('The permitted header in a response for the specified profile.')
ltmEncCookiesNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 12, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmEncCookiesNumber.setStatus('current')
if mibBuilder.loadTexts: ltmEncCookiesNumber.setDescription('The number of ltmHttpProfileEncCookies entries in the table.')
ltmEncCookiesTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 12, 2), )
if mibBuilder.loadTexts: ltmEncCookiesTable.setStatus('current')
if mibBuilder.loadTexts: ltmEncCookiesTable.setDescription('A table containing information of cookies to be encrypted before sending them to the clients for HTTP profiles.')
ltmEncCookiesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 12, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmEncCookiesName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmEncCookiesIndex"))
if mibBuilder.loadTexts: ltmEncCookiesEntry.setStatus('current')
if mibBuilder.loadTexts: ltmEncCookiesEntry.setDescription('Columns in the ltmEncCookies Table')
ltmEncCookiesName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 12, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmEncCookiesName.setStatus('current')
if mibBuilder.loadTexts: ltmEncCookiesName.setDescription('The name of a HTTP profile.')
ltmEncCookiesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 12, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmEncCookiesIndex.setStatus('current')
if mibBuilder.loadTexts: ltmEncCookiesIndex.setDescription('The index of cookie to be encrypted before sending it to the client for the specified HTTP profile.')
ltmEncCookiesStr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 12, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmEncCookiesStr.setStatus('current')
if mibBuilder.loadTexts: ltmEncCookiesStr.setDescription('The cookie to be encrypted before sending it to the client for the specified profile.')
ltmFastL4ProfileStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmFastL4ProfileStatResetStats.setStatus('current')
if mibBuilder.loadTexts: ltmFastL4ProfileStatResetStats.setDescription('The action to reset resetable statistics data in ltmFastL4ProfileStat. Setting this value to 1 will reset statistics data. Note, some statistics data may not be reset including data that are incremental counters.')
ltmFastL4ProfileStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmFastL4ProfileStatNumber.setDescription('The number of ltmFastL4ProfileStat entries in the table.')
ltmFastL4ProfileStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 2, 3), )
if mibBuilder.loadTexts: ltmFastL4ProfileStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmFastL4ProfileStatTable.setDescription('A table containing statistics information of fast L4 profiles.')
ltmFastL4ProfileStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 2, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileStatName"))
if mibBuilder.loadTexts: ltmFastL4ProfileStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmFastL4ProfileStatEntry.setDescription('Columns in the ltmFastL4ProfileStat Table')
ltmFastL4ProfileStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 2, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileStatName.setStatus('current')
if mibBuilder.loadTexts: ltmFastL4ProfileStatName.setDescription('The name of a fast L4 profile.')
ltmFastL4ProfileStatOpen = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileStatOpen.setStatus('current')
if mibBuilder.loadTexts: ltmFastL4ProfileStatOpen.setDescription('The number of current open connections for the specified fast L4 profile.')
ltmFastL4ProfileStatAccepts = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 2, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileStatAccepts.setStatus('current')
if mibBuilder.loadTexts: ltmFastL4ProfileStatAccepts.setDescription('The number of accepted connections for the specified fast L4 profile.')
ltmFastL4ProfileStatAcceptfails = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 2, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileStatAcceptfails.setStatus('current')
if mibBuilder.loadTexts: ltmFastL4ProfileStatAcceptfails.setDescription('The number of not accepted connections for the specified fast L4 profile.')
ltmFastL4ProfileStatExpires = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 2, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileStatExpires.setStatus('current')
if mibBuilder.loadTexts: ltmFastL4ProfileStatExpires.setDescription('The number of expired connections due to idle timeout for the specified fast L4 profile.')
ltmFastL4ProfileStatRxbadpkt = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 2, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileStatRxbadpkt.setStatus('current')
if mibBuilder.loadTexts: ltmFastL4ProfileStatRxbadpkt.setDescription('The number of malformed packets for the specified fast L4 profile.')
ltmFastL4ProfileStatRxunreach = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 2, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileStatRxunreach.setStatus('current')
if mibBuilder.loadTexts: ltmFastL4ProfileStatRxunreach.setDescription('The number of received ICMP unreach/TCP RST for the specified fast L4 profile.')
ltmFastL4ProfileStatRxbadunreach = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 2, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileStatRxbadunreach.setStatus('current')
if mibBuilder.loadTexts: ltmFastL4ProfileStatRxbadunreach.setDescription('The number of received TCP RST outside the current window for the specified fast L4 profile.')
ltmFastL4ProfileStatRxbadsum = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 2, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileStatRxbadsum.setStatus('current')
if mibBuilder.loadTexts: ltmFastL4ProfileStatRxbadsum.setDescription('The number of bad checksum for the specified fast L4 profile.')
ltmFastL4ProfileStatTxerrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 2, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileStatTxerrors.setStatus('current')
if mibBuilder.loadTexts: ltmFastL4ProfileStatTxerrors.setDescription('The number of transmit datagram errors for the specified fast L4 profile.')
ltmFastL4ProfileStatSyncookIssue = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 2, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileStatSyncookIssue.setStatus('current')
if mibBuilder.loadTexts: ltmFastL4ProfileStatSyncookIssue.setDescription('The number of syncookies issued for the specified fast L4 profile.')
ltmFastL4ProfileStatSyncookAccept = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 2, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileStatSyncookAccept.setStatus('current')
if mibBuilder.loadTexts: ltmFastL4ProfileStatSyncookAccept.setDescription('The number of syncookies accepted for the specified fast L4 profile.')
ltmFastL4ProfileStatSyncookReject = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 2, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileStatSyncookReject.setStatus('current')
if mibBuilder.loadTexts: ltmFastL4ProfileStatSyncookReject.setDescription('The number of syncookies rejected for the specified fast L4 profile.')
ltmFastL4ProfileStatServersynrtx = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 2, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileStatServersynrtx.setStatus('current')
if mibBuilder.loadTexts: ltmFastL4ProfileStatServersynrtx.setDescription('The number of retransmissions of SYN to server for a syncookied connection for the specified fast L4 profile.')
ltmFastL4ProfileStatLbcSuccessful = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 2, 3, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileStatLbcSuccessful.setStatus('current')
if mibBuilder.loadTexts: ltmFastL4ProfileStatLbcSuccessful.setDescription('The number of Successful Late Binding Connections.')
ltmFastL4ProfileStatLbcTimedout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 2, 3, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileStatLbcTimedout.setStatus('current')
if mibBuilder.loadTexts: ltmFastL4ProfileStatLbcTimedout.setDescription('The number of Late Binding Connections that were timed out.')
ltmSipProfileNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 20, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSipProfileNumber.setStatus('current')
if mibBuilder.loadTexts: ltmSipProfileNumber.setDescription('The number of ltmSipProfile entries in the table.')
ltmSipProfileTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 20, 1, 2), )
if mibBuilder.loadTexts: ltmSipProfileTable.setStatus('current')
if mibBuilder.loadTexts: ltmSipProfileTable.setDescription('A table containing configuratin information of SIP profiles.')
ltmSipProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 20, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmSipProfileName"))
if mibBuilder.loadTexts: ltmSipProfileEntry.setStatus('current')
if mibBuilder.loadTexts: ltmSipProfileEntry.setDescription('Columns in the ltmSipProfile Table')
ltmSipProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 20, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSipProfileName.setStatus('current')
if mibBuilder.loadTexts: ltmSipProfileName.setDescription('The name of a SIP profile.')
ltmSipProfileConfigSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 20, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("usercfg", 0), ("basecfg", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSipProfileConfigSource.setStatus('current')
if mibBuilder.loadTexts: ltmSipProfileConfigSource.setDescription('The state that specifies whether this is a base/pre-configured profile or user defined profile.')
ltmSipProfileDefaultName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 20, 1, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSipProfileDefaultName.setStatus('current')
if mibBuilder.loadTexts: ltmSipProfileDefaultName.setDescription('The name of the profile from which the specified profile derives its attribute default values.')
ltmSipProfileMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 20, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSipProfileMaxSize.setStatus('current')
if mibBuilder.loadTexts: ltmSipProfileMaxSize.setDescription('The acceptable maximum SIP message size for the specified profile.')
ltmSipProfileTerminateBye = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 20, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSipProfileTerminateBye.setStatus('current')
if mibBuilder.loadTexts: ltmSipProfileTerminateBye.setDescription('The state indicating whether or not to terminate connection after bye (200 BYE) message for the specified profile.')
ltmSipProfileInsertVia = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 20, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSipProfileInsertVia.setStatus('current')
if mibBuilder.loadTexts: ltmSipProfileInsertVia.setDescription('The state indicating whether or not to insert Via for the specified profile.')
ltmSipProfileSecureVia = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 20, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSipProfileSecureVia.setStatus('current')
if mibBuilder.loadTexts: ltmSipProfileSecureVia.setDescription('The state indicating whether or not it is SIPS/2.0/TLS for the specified profile.')
ltmSipProfileInsertRecordRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 20, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSipProfileInsertRecordRoute.setStatus('current')
if mibBuilder.loadTexts: ltmSipProfileInsertRecordRoute.setDescription('The state indicating whether or not insert Record-route for the specified profile.')
ltmSipProfileFirewallEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 20, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSipProfileFirewallEnabled.setStatus('current')
if mibBuilder.loadTexts: ltmSipProfileFirewallEnabled.setDescription('The state indicating whether or not SIP firewall is enabled for the specified profile.')
ltmSipProfileLogPublisher = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 20, 1, 2, 1, 10), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSipProfileLogPublisher.setStatus('current')
if mibBuilder.loadTexts: ltmSipProfileLogPublisher.setDescription('Specifies the name of the log publisher that logs ALG events, if any.')
ltmSipProfileLogProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 20, 1, 2, 1, 11), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSipProfileLogProfile.setStatus('current')
if mibBuilder.loadTexts: ltmSipProfileLogProfile.setDescription('Specifies the name of the log profile that control the logging of ALG events, if any.')
ltmSipProfileStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 20, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmSipProfileStatResetStats.setStatus('current')
if mibBuilder.loadTexts: ltmSipProfileStatResetStats.setDescription('The action to reset resetable statistics data in ltmSipProfileStat. Setting this value to 1 will reset statistics data. Note, some statistics data may not be reset including data that are incremental counters.')
ltmSipProfileStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 20, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSipProfileStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmSipProfileStatNumber.setDescription('The number of ltmSipProfileStat entries in the table.')
ltmSipProfileStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 20, 2, 3), )
if mibBuilder.loadTexts: ltmSipProfileStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmSipProfileStatTable.setDescription('A table containing statistics information of SIP profiles.')
ltmSipProfileStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 20, 2, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmSipProfileStatName"))
if mibBuilder.loadTexts: ltmSipProfileStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmSipProfileStatEntry.setDescription('Columns in the ltmSipProfileStat Table')
ltmSipProfileStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 20, 2, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSipProfileStatName.setStatus('current')
if mibBuilder.loadTexts: ltmSipProfileStatName.setDescription('The name of a SIP profile.')
ltmSipProfileStatRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 20, 2, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSipProfileStatRequests.setStatus('current')
if mibBuilder.loadTexts: ltmSipProfileStatRequests.setDescription('The total number of requests received for the specified profile.')
ltmSipProfileStatResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 20, 2, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSipProfileStatResponses.setStatus('current')
if mibBuilder.loadTexts: ltmSipProfileStatResponses.setDescription('The total number of responses sent for the specified profile.')
ltmSipProfileStatBadmsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 20, 2, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSipProfileStatBadmsgs.setStatus('current')
if mibBuilder.loadTexts: ltmSipProfileStatBadmsgs.setDescription('The total number of bad messages for the specified profile.')
ltmSipProfileStatDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 20, 2, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSipProfileStatDrops.setStatus('current')
if mibBuilder.loadTexts: ltmSipProfileStatDrops.setDescription('The total number of dropped packets for the specified profile.')
ltmVirtualModuleScoreNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 15, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualModuleScoreNumber.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualModuleScoreNumber.setDescription('The number of ltmVirtualModuleScore entries in the table.')
ltmVirtualModuleScoreTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 15, 2), )
if mibBuilder.loadTexts: ltmVirtualModuleScoreTable.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualModuleScoreTable.setDescription('A table containing module capacity scores for virtual servers')
ltmVirtualModuleScoreEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 15, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmVirtualModuleScoreVsName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmVirtualModuleScoreModuleType"))
if mibBuilder.loadTexts: ltmVirtualModuleScoreEntry.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualModuleScoreEntry.setDescription('Columns in the ltmVirtualModuleScore Table')
ltmVirtualModuleScoreVsName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 15, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualModuleScoreVsName.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualModuleScoreVsName.setDescription('The name of the virtual server this score applies to.')
ltmVirtualModuleScoreModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 15, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("asm", 0), ("sam", 1), ("wam", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualModuleScoreModuleType.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualModuleScoreModuleType.setDescription('The bigip module that this score applies to.')
ltmVirtualModuleScoreScore = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 15, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualModuleScoreScore.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualModuleScoreScore.setDescription('The score represents how much capacity the module estimates it has left.')
ltmIsessionProfileNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileNumber.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileNumber.setDescription('The number of ltmIsessionProfile entries in the table.')
ltmIsessionProfileTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 1, 2), )
if mibBuilder.loadTexts: ltmIsessionProfileTable.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileTable.setDescription('A table containing configuratin information of Isession profiles.')
ltmIsessionProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileName"))
if mibBuilder.loadTexts: ltmIsessionProfileEntry.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileEntry.setDescription('Columns in the ltmIsessionProfile Table')
ltmIsessionProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileName.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileName.setDescription('The name of a iSession profile.')
ltmIsessionProfileMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileMode.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileMode.setDescription('Enable/disable this profile.')
ltmIsessionProfileConnectionReuse = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileConnectionReuse.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileConnectionReuse.setDescription('Enable/disable connection reuse.')
ltmIsessionProfileCompressionNull = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileCompressionNull.setStatus('deprecated')
if mibBuilder.loadTexts: ltmIsessionProfileCompressionNull.setDescription('Deprecated! Select null compression method if enabled.')
ltmIsessionProfileCompressionDeflate = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileCompressionDeflate.setStatus('deprecated')
if mibBuilder.loadTexts: ltmIsessionProfileCompressionDeflate.setDescription('Deprecated! Replaced by ltmIsessionCompression and ltmIsessionCompressionCodecs.')
ltmIsessionProfileCompressionLzo = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileCompressionLzo.setStatus('deprecated')
if mibBuilder.loadTexts: ltmIsessionProfileCompressionLzo.setDescription('Deprecated! Replaced by ltmIsessionCompression and ltmIsessionCompressionCodecs.')
ltmIsessionProfileCompressionAdaptive = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileCompressionAdaptive.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileCompressionAdaptive.setDescription('Select adaptive compression method if enabled.')
ltmIsessionProfileDeduplication = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileDeduplication.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileDeduplication.setDescription('Enable/disable deduplication functionality.')
ltmIsessionProfilePortTransparency = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfilePortTransparency.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfilePortTransparency.setDescription('Use same destination port over WAN as specified by the client.')
ltmIsessionProfileTargetVirtual = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("hostmatchnoisession", 1), ("hostmatchall", 2), ("matchall", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileTargetVirtual.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileTargetVirtual.setDescription('Use to provide good match for targetted virtual.')
ltmIsessionProfileEndpointPool = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 1, 2, 1, 11), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileEndpointPool.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileEndpointPool.setDescription('The name of a LTM pool for paired tunneling.')
ltmIsessionProfileCompressionDeflateLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 1, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileCompressionDeflateLevel.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileCompressionDeflateLevel.setDescription('Select compression level [1-9] when deflate compression method is enabled.')
ltmIsessionProfileCompressionBzip2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileCompressionBzip2.setStatus('deprecated')
if mibBuilder.loadTexts: ltmIsessionProfileCompressionBzip2.setDescription('Deprecated! Replaced by ltmIsessionCompression and ltmIsessionCompressionCodecs.')
ltmIsessionProfileCompression = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileCompression.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileCompression.setDescription('Enable/disable compression functionality.')
ltmIsessionProfileCompressionCodecs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 1, 2, 1, 15), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileCompressionCodecs.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileCompressionCodecs.setDescription('Assign lzo(0), deflate(1), bzip2(2) comression methods, if compression enabled.')
ltmIsessionProfileStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmIsessionProfileStatResetStats.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatResetStats.setDescription('The action to reset resetable statistics data in ltmIsessionProfileStat. Setting this value to 1 will reset statistics data. Note, some statistics data may not be reset including data that are incremental counters.')
ltmIsessionProfileStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatNumber.setDescription('The number of ltmIsessionProfileStat entries in the table.')
ltmIsessionProfileStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3), )
if mibBuilder.loadTexts: ltmIsessionProfileStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatTable.setDescription('A table containing statistics information for virtual servers with iSession profiles')
ltmIsessionProfileStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatVsName"))
if mibBuilder.loadTexts: ltmIsessionProfileStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatEntry.setDescription('Columns in the ltmIsessionProfileStat Table')
ltmIsessionProfileStatVsName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatVsName.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatVsName.setDescription('The name of a iSession virtual server.')
ltmIsessionProfileStatProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatProfileName.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatProfileName.setDescription('The name of a iSession profile.')
ltmIsessionProfileStatNullInUses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatNullInUses.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatNullInUses.setDescription('The number of uses NULL compression for IN towards LAN')
ltmIsessionProfileStatNullInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatNullInErrors.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatNullInErrors.setDescription('The number of errors in use NULL compression for IN towards LAN')
ltmIsessionProfileStatNullInBytesOpt = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatNullInBytesOpt.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatNullInBytesOpt.setDescription('The number of opt bytes NULL compression for IN towards LAN')
ltmIsessionProfileStatNullInBytesRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatNullInBytesRaw.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatNullInBytesRaw.setDescription('The number of raw bytes NULL compression for IN towards LAN')
ltmIsessionProfileStatNullOutUses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatNullOutUses.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatNullOutUses.setDescription('The number of uses NULL compression for OUT towards WAN')
ltmIsessionProfileStatNullOutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatNullOutErrors.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatNullOutErrors.setDescription('The number of errors in use NULL compression for OUT towards WAN')
ltmIsessionProfileStatNullOutBytesOpt = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatNullOutBytesOpt.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatNullOutBytesOpt.setDescription('The number of opt bytes NULL compression for OUT towards WAN')
ltmIsessionProfileStatNullOutBytesRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatNullOutBytesRaw.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatNullOutBytesRaw.setDescription('The number of raw bytes NULL compression for OUT towards WAN')
ltmIsessionProfileStatLzoInUses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatLzoInUses.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatLzoInUses.setDescription('The number of uses LZO compression for IN towards LAN')
ltmIsessionProfileStatLzoInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatLzoInErrors.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatLzoInErrors.setDescription('The number of errors in use LZO compression for IN towards LAN')
ltmIsessionProfileStatLzoInBytesOpt = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatLzoInBytesOpt.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatLzoInBytesOpt.setDescription('The number of opt bytes LZO compression for IN towards LAN')
ltmIsessionProfileStatLzoInBytesRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatLzoInBytesRaw.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatLzoInBytesRaw.setDescription('The number of raw bytes LZO compression for IN towards LAN')
ltmIsessionProfileStatLzoOutUses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatLzoOutUses.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatLzoOutUses.setDescription('The number of uses LZO compression for OUT towards WAN')
ltmIsessionProfileStatLzoOutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatLzoOutErrors.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatLzoOutErrors.setDescription('The number of errors in use LZO compression for OUT towards WAN')
ltmIsessionProfileStatLzoOutBytesOpt = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatLzoOutBytesOpt.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatLzoOutBytesOpt.setDescription('The number of opt bytes LZO compression for OUT towards WAN')
ltmIsessionProfileStatLzoOutBytesRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatLzoOutBytesRaw.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatLzoOutBytesRaw.setDescription('The number of raw bytes LZO compression for OUT towards WAN')
ltmIsessionProfileStatDeflateInUses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDeflateInUses.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDeflateInUses.setDescription('The number of uses DEFLATE compression for IN towards LAN')
ltmIsessionProfileStatDeflateInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDeflateInErrors.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDeflateInErrors.setDescription('The number of errors in use DEFLATE compression for IN towards LAN')
ltmIsessionProfileStatDeflateInBytesOpt = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDeflateInBytesOpt.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDeflateInBytesOpt.setDescription('The number of opt bytes DEFLATE compression for IN towards LAN')
ltmIsessionProfileStatDeflateInBytesRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDeflateInBytesRaw.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDeflateInBytesRaw.setDescription('The number of raw bytes DEFLATE compression for IN towards LAN')
ltmIsessionProfileStatDeflateOutUses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDeflateOutUses.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDeflateOutUses.setDescription('The number of uses DEFLATE compression for OUT towards WAN')
ltmIsessionProfileStatDeflateOutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDeflateOutErrors.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDeflateOutErrors.setDescription('The number of errors in use DEFLATE compression for OUT towards WAN')
ltmIsessionProfileStatDeflateOutBytesOpt = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDeflateOutBytesOpt.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDeflateOutBytesOpt.setDescription('The number of opt bytes DEFLATE compression for OUT towards WAN')
ltmIsessionProfileStatDeflateOutBytesRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDeflateOutBytesRaw.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDeflateOutBytesRaw.setDescription('The number of raw bytes DEFLATE compression for OUT towards WAN')
ltmIsessionProfileStatDedupInUses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInUses.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInUses.setDescription('The number of uses DEDUPLICATION compression for IN towards LAN')
ltmIsessionProfileStatDedupInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInErrors.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInErrors.setDescription('The number of errors in use DEDUPLICATION compression for IN towards LAN')
ltmIsessionProfileStatDedupInBytesOpt = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInBytesOpt.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInBytesOpt.setDescription('The number of opt bytes DEDUPLICATION compression for IN towards LAN')
ltmIsessionProfileStatDedupInBytesRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInBytesRaw.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInBytesRaw.setDescription('The number of raw bytes DEDUPLICATION compression for IN towards LAN')
ltmIsessionProfileStatDedupOutUses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutUses.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutUses.setDescription('The number of uses DEDUPLICATION compression for OUT towards WAN')
ltmIsessionProfileStatDedupOutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutErrors.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutErrors.setDescription('The number of errors in use DEDUPLICATION compression for OUT towards WAN')
ltmIsessionProfileStatDedupOutBytesOpt = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutBytesOpt.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutBytesOpt.setDescription('The number of opt bytes DEDUPLICATION compression for OUT towards WAN')
ltmIsessionProfileStatDedupOutBytesRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutBytesRaw.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutBytesRaw.setDescription('The number of raw bytes DEDUPLICATION compression for OUT towards WAN')
ltmIsessionProfileStatDedupInHits = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInHits.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInHits.setDescription('The number of deduplication hits for IN towards LAN')
ltmIsessionProfileStatDedupInHitBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInHitBytes.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInHitBytes.setDescription('The number of deduplication hit bytes for IN towards LAN')
ltmIsessionProfileStatDedupInHitHistBucket1k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInHitHistBucket1k.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInHitHistBucket1k.setDescription('The number of deduplication hits with size less than 1k bytes for IN towards LAN')
ltmIsessionProfileStatDedupInHitHistBucket2k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInHitHistBucket2k.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInHitHistBucket2k.setDescription('The number of deduplication hits with size between 1k and 2k bytes for IN towards LAN')
ltmIsessionProfileStatDedupInHitHistBucket4k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInHitHistBucket4k.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInHitHistBucket4k.setDescription('The number of deduplication hits with size between 2k and 4k bytes for IN towards LAN')
ltmIsessionProfileStatDedupInHitHistBucket8k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInHitHistBucket8k.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInHitHistBucket8k.setDescription('The number of deduplication hits with size between 4k and 8k bytes for IN towards LAN')
ltmIsessionProfileStatDedupInHitHistBucket16k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInHitHistBucket16k.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInHitHistBucket16k.setDescription('The number of deduplication hits with size between 8k and 16k bytes for IN towards LAN')
ltmIsessionProfileStatDedupInHitHistBucket32k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInHitHistBucket32k.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInHitHistBucket32k.setDescription('The number of deduplication hits with size between 16k and 32k bytes for IN towards LAN')
ltmIsessionProfileStatDedupInHitHistBucket64k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInHitHistBucket64k.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInHitHistBucket64k.setDescription('The number of deduplication hits with size between 32k and 64k bytes for IN towards LAN')
ltmIsessionProfileStatDedupInHitHistBucket128k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 44), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInHitHistBucket128k.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInHitHistBucket128k.setDescription('The number of deduplication hits with size between 64k and 128k bytes for IN towards LAN')
ltmIsessionProfileStatDedupInHitHistBucket256k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInHitHistBucket256k.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInHitHistBucket256k.setDescription('The number of deduplication hits with size between 128k and 256k bytes for IN towards LAN')
ltmIsessionProfileStatDedupInHitHistBucket512k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 46), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInHitHistBucket512k.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInHitHistBucket512k.setDescription('The number of deduplication hits with size between 256k and 512k bytes for IN towards LAN')
ltmIsessionProfileStatDedupInHitHistBucket1m = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 47), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInHitHistBucket1m.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInHitHistBucket1m.setDescription('The number of deduplication hits with size between 512k and 1m bytes for IN towards LAN')
ltmIsessionProfileStatDedupInHitHistBucketLarge = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 48), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInHitHistBucketLarge.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInHitHistBucketLarge.setDescription('The number of deduplication hits with size more than 1m bytes for IN towards LAN')
ltmIsessionProfileStatDedupInMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 49), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInMisses.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInMisses.setDescription('The number of deduplication misses for IN towards LAN')
ltmIsessionProfileStatDedupInMissBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 50), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInMissBytes.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInMissBytes.setDescription('The number of deduplication misses bytes for IN towards LAN')
ltmIsessionProfileStatDedupInMissHistBucket1k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 51), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInMissHistBucket1k.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInMissHistBucket1k.setDescription('The number of deduplication misses with size less than 1k bytes for IN towards LAN')
ltmIsessionProfileStatDedupInMissHistBucket2k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 52), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInMissHistBucket2k.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInMissHistBucket2k.setDescription('The number of deduplication misses with size between 1k and 2k bytes for IN towards LAN')
ltmIsessionProfileStatDedupInMissHistBucket4k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 53), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInMissHistBucket4k.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInMissHistBucket4k.setDescription('The number of deduplication misses with size between 2k and 4k bytes for IN towards LAN')
ltmIsessionProfileStatDedupInMissHistBucket8k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 54), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInMissHistBucket8k.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInMissHistBucket8k.setDescription('The number of deduplication misses with size between 4k and 8k bytes for IN towards LAN')
ltmIsessionProfileStatDedupInMissHistBucket16k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 55), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInMissHistBucket16k.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInMissHistBucket16k.setDescription('The number of deduplication misses with size between 8k and 16k bytes for IN towards LAN')
ltmIsessionProfileStatDedupInMissHistBucket32k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 56), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInMissHistBucket32k.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInMissHistBucket32k.setDescription('The number of deduplication misses with size between 16k and 32k bytes for IN towards LAN')
ltmIsessionProfileStatDedupInMissHistBucket64k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 57), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInMissHistBucket64k.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInMissHistBucket64k.setDescription('The number of deduplication misses with size between 32k and 64k bytes for IN towards LAN')
ltmIsessionProfileStatDedupInMissHistBucket128k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 58), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInMissHistBucket128k.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInMissHistBucket128k.setDescription('The number of deduplication misses with size between 64k and 128k bytes for IN towards LAN')
ltmIsessionProfileStatDedupInMissHistBucket256k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 59), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInMissHistBucket256k.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInMissHistBucket256k.setDescription('The number of deduplication misses with size between 128k and 256k bytes for IN towards LAN')
ltmIsessionProfileStatDedupInMissHistBucket512k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 60), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInMissHistBucket512k.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInMissHistBucket512k.setDescription('The number of deduplication misses with size between 256k and 512k bytes for IN towards LAN')
ltmIsessionProfileStatDedupInMissHistBucket1m = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 61), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInMissHistBucket1m.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInMissHistBucket1m.setDescription('The number of deduplication misses with size between 512k and 1m bytes for IN towards LAN')
ltmIsessionProfileStatDedupInMissHistBucketLarge = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 62), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInMissHistBucketLarge.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInMissHistBucketLarge.setDescription('The number of deduplication misses with size more than 1m bytes for IN towards LAN')
ltmIsessionProfileStatDedupOutHits = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 63), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutHits.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutHits.setDescription('The number of deduplication hits for OUT towards WAN')
ltmIsessionProfileStatDedupOutHitBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 64), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutHitBytes.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutHitBytes.setDescription('The number of deduplication hit bytes for OUT towards WAN')
ltmIsessionProfileStatDedupOutHitHistBucket1k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 65), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutHitHistBucket1k.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutHitHistBucket1k.setDescription('The number of deduplication hits with size less than 1k bytes for OUT towards WAN')
ltmIsessionProfileStatDedupOutHitHistBucket2k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 66), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutHitHistBucket2k.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutHitHistBucket2k.setDescription('The number of deduplication hits with size between 1k and 2k bytes for OUT towards WAN')
ltmIsessionProfileStatDedupOutHitHistBucket4k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 67), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutHitHistBucket4k.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutHitHistBucket4k.setDescription('The number of deduplication hits with size between 2k and 4k bytes for OUT towards WAN')
ltmIsessionProfileStatDedupOutHitHistBucket8k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 68), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutHitHistBucket8k.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutHitHistBucket8k.setDescription('The number of deduplication hits with size between 4k and 8k bytes for OUT towards WAN')
ltmIsessionProfileStatDedupOutHitHistBucket16k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 69), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutHitHistBucket16k.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutHitHistBucket16k.setDescription('The number of deduplication hits with size between 8k and 16k bytes for OUT towards WAN')
ltmIsessionProfileStatDedupOutHitHistBucket32k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 70), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutHitHistBucket32k.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutHitHistBucket32k.setDescription('The number of deduplication hits with size between 16k and 32k bytes for OUT towards WAN')
ltmIsessionProfileStatDedupOutHitHistBucket64k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 71), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutHitHistBucket64k.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutHitHistBucket64k.setDescription('The number of deduplication hits with size between 32k and 64k bytes for OUT towards WAN')
ltmIsessionProfileStatDedupOutHitHistBucket128k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 72), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutHitHistBucket128k.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutHitHistBucket128k.setDescription('The number of deduplication hits with size between 64k and 128k bytes for OUT towards WAN')
ltmIsessionProfileStatDedupOutHitHistBucket256k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 73), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutHitHistBucket256k.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutHitHistBucket256k.setDescription('The number of deduplication hits with size between 128k and 256k bytes for OUT towards WAN')
ltmIsessionProfileStatDedupOutHitHistBucket512k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 74), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutHitHistBucket512k.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutHitHistBucket512k.setDescription('The number of deduplication hits with size between 256k and 512k bytes for OUT towards WAN')
ltmIsessionProfileStatDedupOutHitHistBucket1m = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 75), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutHitHistBucket1m.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutHitHistBucket1m.setDescription('The number of deduplication hits with size between 512k and 1m bytes for OUT towards WAN')
ltmIsessionProfileStatDedupOutHitHistBucketLarge = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 76), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutHitHistBucketLarge.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutHitHistBucketLarge.setDescription('The number of deduplication hits with size more than 1m bytes for OUT towards WAN')
ltmIsessionProfileStatDedupOutMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 77), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutMisses.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutMisses.setDescription('The number of deduplication misses for OUT towards WAN')
ltmIsessionProfileStatDedupOutMissBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 78), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutMissBytes.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutMissBytes.setDescription('The number of deduplication misses bytes for OUT towards WAN')
ltmIsessionProfileStatDedupOutMissHistBucket1k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 79), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutMissHistBucket1k.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutMissHistBucket1k.setDescription('The number of deduplication misses with size less than 1k bytes for OUT towards WAN')
ltmIsessionProfileStatDedupOutMissHistBucket2k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 80), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutMissHistBucket2k.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutMissHistBucket2k.setDescription('The number of deduplication misses with size between 1k and 2k bytes for OUT towards WAN')
ltmIsessionProfileStatDedupOutMissHistBucket4k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 81), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutMissHistBucket4k.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutMissHistBucket4k.setDescription('The number of deduplication misses with size between 2k and 4k bytes for OUT towards WAN')
ltmIsessionProfileStatDedupOutMissHistBucket8k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 82), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutMissHistBucket8k.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutMissHistBucket8k.setDescription('The number of deduplication misses with size between 4k and 8k bytes for OUT towards WAN')
ltmIsessionProfileStatDedupOutMissHistBucket16k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 83), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutMissHistBucket16k.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutMissHistBucket16k.setDescription('The number of deduplication misses with size between 8k and 16k bytes for OUT towards WAN')
ltmIsessionProfileStatDedupOutMissHistBucket32k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 84), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutMissHistBucket32k.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutMissHistBucket32k.setDescription('The number of deduplication misses with size between 16k and 32k bytes for OUT towards WAN')
ltmIsessionProfileStatDedupOutMissHistBucket64k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 85), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutMissHistBucket64k.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutMissHistBucket64k.setDescription('The number of deduplication misses with size between 32k and 64k bytes for OUT towards WAN')
ltmIsessionProfileStatDedupOutMissHistBucket128k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 86), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutMissHistBucket128k.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutMissHistBucket128k.setDescription('The number of deduplication misses with size between 64k and 128k bytes for OUT towards WAN')
ltmIsessionProfileStatDedupOutMissHistBucket256k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 87), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutMissHistBucket256k.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutMissHistBucket256k.setDescription('The number of deduplication misses with size between 128k and 256k bytes for OUT towards WAN')
ltmIsessionProfileStatDedupOutMissHistBucket512k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 88), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutMissHistBucket512k.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutMissHistBucket512k.setDescription('The number of deduplication misses with size between 256k and 512k bytes for OUT towards WAN')
ltmIsessionProfileStatDedupOutMissHistBucket1m = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 89), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutMissHistBucket1m.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutMissHistBucket1m.setDescription('The number of deduplication misses with size between 512k and 1m bytes for OUT towards WAN')
ltmIsessionProfileStatDedupOutMissHistBucketLarge = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 90), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutMissHistBucketLarge.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutMissHistBucketLarge.setDescription('The number of deduplication misses with size more than 1m bytes for OUT towards WAN')
ltmIsessionProfileStatOutgoingConnsIdleCur = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 91), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatOutgoingConnsIdleCur.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatOutgoingConnsIdleCur.setDescription('The current number of outgoing idle connections')
ltmIsessionProfileStatOutgoingConnsIdleMax = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 92), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatOutgoingConnsIdleMax.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatOutgoingConnsIdleMax.setDescription('The maximum number of outgoing idle connections')
ltmIsessionProfileStatOutgoingConnsIdleTot = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 93), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatOutgoingConnsIdleTot.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatOutgoingConnsIdleTot.setDescription('The total number of outgoing idle connections')
ltmIsessionProfileStatOutgoingConnsActiveCur = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 94), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatOutgoingConnsActiveCur.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatOutgoingConnsActiveCur.setDescription('The current number of outgoing active connections')
ltmIsessionProfileStatOutgoingConnsActiveMax = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 95), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatOutgoingConnsActiveMax.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatOutgoingConnsActiveMax.setDescription('The maximum number of outgoing active connections')
ltmIsessionProfileStatOutgoingConnsActiveTot = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 96), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatOutgoingConnsActiveTot.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatOutgoingConnsActiveTot.setDescription('The total number of outgoing active connections')
ltmIsessionProfileStatOutgoingConnsErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 97), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatOutgoingConnsErrors.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatOutgoingConnsErrors.setDescription('The number of outgoing connection errors')
ltmIsessionProfileStatOutgoingConnsPassthruTot = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 98), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatOutgoingConnsPassthruTot.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatOutgoingConnsPassthruTot.setDescription('The number of outgoing passthrough connections')
ltmIsessionProfileStatIncomingConnsActiveCur = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 99), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatIncomingConnsActiveCur.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatIncomingConnsActiveCur.setDescription('The current number of incoming active connections')
ltmIsessionProfileStatIncomingConnsActiveMax = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 100), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatIncomingConnsActiveMax.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatIncomingConnsActiveMax.setDescription('The maximum number of incoming active connections')
ltmIsessionProfileStatIncomingConnsActiveTot = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 101), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatIncomingConnsActiveTot.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatIncomingConnsActiveTot.setDescription('The total number of incoming active connections')
ltmIsessionProfileStatIncomingConnsErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 102), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatIncomingConnsErrors.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatIncomingConnsErrors.setDescription('The number of incoming connection errors')
ltmIsessionProfileStatBzip2InUses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 103), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatBzip2InUses.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatBzip2InUses.setDescription('The number of uses BZIP2 compression for IN towards LAN')
ltmIsessionProfileStatBzip2InErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 104), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatBzip2InErrors.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatBzip2InErrors.setDescription('The number of errors in use BZIP2 compression for IN towards LAN')
ltmIsessionProfileStatBzip2InBytesOpt = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 105), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatBzip2InBytesOpt.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatBzip2InBytesOpt.setDescription('The number of opt bytes BZIP2 compression for IN towards LAN')
ltmIsessionProfileStatBzip2InBytesRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 106), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatBzip2InBytesRaw.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatBzip2InBytesRaw.setDescription('The number of raw bytes BZIP2 compression for IN towards LAN')
ltmIsessionProfileStatBzip2OutUses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 107), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatBzip2OutUses.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatBzip2OutUses.setDescription('The number of uses BZIP2 compression for OUT towards WAN')
ltmIsessionProfileStatBzip2OutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 108), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatBzip2OutErrors.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatBzip2OutErrors.setDescription('The number of errors in use BZIP2 compression for OUT towards WAN')
ltmIsessionProfileStatBzip2OutBytesOpt = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 109), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatBzip2OutBytesOpt.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatBzip2OutBytesOpt.setDescription('The number of opt bytes BZIP2 compression for OUT towards WAN')
ltmIsessionProfileStatBzip2OutBytesRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 110), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatBzip2OutBytesRaw.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatBzip2OutBytesRaw.setDescription('The number of raw bytes BZIP2 compression for OUT towards WAN')
ltmXmlProfileXpathQueriesNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 13, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmXmlProfileXpathQueriesNumber.setStatus('current')
if mibBuilder.loadTexts: ltmXmlProfileXpathQueriesNumber.setDescription('The number of ltmXmlProfileXpathQueries entries in the table.')
ltmXmlProfileXpathQueriesTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 13, 3, 2), )
if mibBuilder.loadTexts: ltmXmlProfileXpathQueriesTable.setStatus('current')
if mibBuilder.loadTexts: ltmXmlProfileXpathQueriesTable.setDescription('A table containing information of XPath queries in xml profiles.')
ltmXmlProfileXpathQueriesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 13, 3, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmXmlProfileXpathQueriesName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmXmlProfileXpathQueriesIndex"))
if mibBuilder.loadTexts: ltmXmlProfileXpathQueriesEntry.setStatus('current')
if mibBuilder.loadTexts: ltmXmlProfileXpathQueriesEntry.setDescription('Columns in the ltmXmlProfileXpathQueries Table')
ltmXmlProfileXpathQueriesName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 13, 3, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmXmlProfileXpathQueriesName.setStatus('current')
if mibBuilder.loadTexts: ltmXmlProfileXpathQueriesName.setDescription('The name of an xml profile.')
ltmXmlProfileXpathQueriesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 13, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmXmlProfileXpathQueriesIndex.setStatus('current')
if mibBuilder.loadTexts: ltmXmlProfileXpathQueriesIndex.setDescription('The index of XPath quereies for the specified xml profile.')
ltmXmlProfileXpathQueriesString = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 13, 3, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmXmlProfileXpathQueriesString.setStatus('current')
if mibBuilder.loadTexts: ltmXmlProfileXpathQueriesString.setDescription('The XPath query for the specified profile.')
ltmXmlProfileNamespaceMappingsNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 13, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmXmlProfileNamespaceMappingsNumber.setStatus('current')
if mibBuilder.loadTexts: ltmXmlProfileNamespaceMappingsNumber.setDescription('The number of ltmXmlProfileNamespaceMappings entries in the table.')
ltmXmlProfileNamespaceMappingsTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 13, 4, 2), )
if mibBuilder.loadTexts: ltmXmlProfileNamespaceMappingsTable.setStatus('current')
if mibBuilder.loadTexts: ltmXmlProfileNamespaceMappingsTable.setDescription('A table containing information of namespace mappings in xml profiles.')
ltmXmlProfileNamespaceMappingsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 13, 4, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmXmlProfileNamespaceMappingsName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmXmlProfileNamespaceMappingsIndex"))
if mibBuilder.loadTexts: ltmXmlProfileNamespaceMappingsEntry.setStatus('current')
if mibBuilder.loadTexts: ltmXmlProfileNamespaceMappingsEntry.setDescription('Columns in the ltmXmlProfileNamespaceMappings Table')
ltmXmlProfileNamespaceMappingsName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 13, 4, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmXmlProfileNamespaceMappingsName.setStatus('current')
if mibBuilder.loadTexts: ltmXmlProfileNamespaceMappingsName.setDescription('The name of an xml profile.')
ltmXmlProfileNamespaceMappingsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 13, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmXmlProfileNamespaceMappingsIndex.setStatus('current')
if mibBuilder.loadTexts: ltmXmlProfileNamespaceMappingsIndex.setDescription('The index of Namespace Mappings for the specified xml profile.')
ltmXmlProfileNamespaceMappingsMappingPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 13, 4, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmXmlProfileNamespaceMappingsMappingPrefix.setStatus('current')
if mibBuilder.loadTexts: ltmXmlProfileNamespaceMappingsMappingPrefix.setDescription('The Namespace Mapping Prefix for the specified profile.')
ltmXmlProfileNamespaceMappingsMappingNamespace = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 13, 4, 2, 1, 4), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmXmlProfileNamespaceMappingsMappingNamespace.setStatus('current')
if mibBuilder.loadTexts: ltmXmlProfileNamespaceMappingsMappingNamespace.setDescription('The Namespace Mapping Namespace for the specified profile.')
ltmHttpCompressionProfileNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileNumber.setStatus('current')
if mibBuilder.loadTexts: ltmHttpCompressionProfileNumber.setDescription('The number of ltmHttpCompressionProfile entries in the table.')
ltmHttpCompressionProfileTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 1, 2), )
if mibBuilder.loadTexts: ltmHttpCompressionProfileTable.setStatus('current')
if mibBuilder.loadTexts: ltmHttpCompressionProfileTable.setDescription('A table containing information of HTTP Compression profiles.')
ltmHttpCompressionProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileName"))
if mibBuilder.loadTexts: ltmHttpCompressionProfileEntry.setStatus('current')
if mibBuilder.loadTexts: ltmHttpCompressionProfileEntry.setDescription('Columns in the ltmHttpCompressionProfile Table')
ltmHttpCompressionProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileName.setStatus('current')
if mibBuilder.loadTexts: ltmHttpCompressionProfileName.setDescription('The name of a HTTP compression profile.')
ltmHttpCompressionProfileConfigSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("usercfg", 0), ("basecfg", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileConfigSource.setStatus('current')
if mibBuilder.loadTexts: ltmHttpCompressionProfileConfigSource.setDescription('The state that specifies whether this is a base/pre-configured profile or user defined profile.')
ltmHttpCompressionProfileDefaultName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 1, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileDefaultName.setStatus('current')
if mibBuilder.loadTexts: ltmHttpCompressionProfileDefaultName.setDescription('The name of the profile from which the specified profile derives its attribute default values.')
ltmHttpCompressionProfileSelective = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileSelective.setStatus('current')
if mibBuilder.loadTexts: ltmHttpCompressionProfileSelective.setDescription('The state that specifies whether selective compression is enabled.')
ltmHttpCompressionProfileMinSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileMinSize.setStatus('current')
if mibBuilder.loadTexts: ltmHttpCompressionProfileMinSize.setDescription('The value that specifies the minimum length of the server responses (in bytes) to be considered acceptable for compression.')
ltmHttpCompressionProfileBufferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 1, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileBufferSize.setStatus('current')
if mibBuilder.loadTexts: ltmHttpCompressionProfileBufferSize.setDescription("The value that specifies the maximum number of uncompressed bytes that the compression proxy will buffer before it decides whether or not to compress the server's response, in case the server's response headers don't specify the content length of the response.")
ltmHttpCompressionProfileVaryHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileVaryHeader.setStatus('current')
if mibBuilder.loadTexts: ltmHttpCompressionProfileVaryHeader.setDescription("The state that specifies whether to insert the header 'Vary: Accept-Encoding' in the server response for responses that have been compressed. If the 'Vary:' header already exists in the server response, then the value 'Accept-Encoding' will be appended to it.")
ltmHttpCompressionProfileAllowHttp10 = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileAllowHttp10.setStatus('current')
if mibBuilder.loadTexts: ltmHttpCompressionProfileAllowHttp10.setDescription('The state that specifies whether to allow compression on responses to HTTP 1.0 requests.')
ltmHttpCompressionProfileGzipMemlevel = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 1, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileGzipMemlevel.setStatus('current')
if mibBuilder.loadTexts: ltmHttpCompressionProfileGzipMemlevel.setDescription('The amount of memory that the proxy will use when doing compression. It must be an integer no less than 1 and no greater than 9. Higher values produce faster compression at the expense of more memory usage. The default memory level will be 8.')
ltmHttpCompressionProfileGzipWindowsize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 1, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileGzipWindowsize.setStatus('current')
if mibBuilder.loadTexts: ltmHttpCompressionProfileGzipWindowsize.setDescription('The number of bits in the window size that the compression proxy will use when compressing the server response. It should be an integer no less than 8 and no greater than 15. Higher values produce better compression ratios at the expense of more memory usage. The default window size will be 15.')
ltmHttpCompressionProfileGzipLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 1, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileGzipLevel.setStatus('current')
if mibBuilder.loadTexts: ltmHttpCompressionProfileGzipLevel.setDescription('The speed of compression that is applied to the response. Minimum value is 1, maximum is 9. The lower numbers give faster compression with lower ratios, and higher numbers give slower compression with higher ratios.')
ltmHttpCompressionProfileKeepAcceptEncoding = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileKeepAcceptEncoding.setStatus('current')
if mibBuilder.loadTexts: ltmHttpCompressionProfileKeepAcceptEncoding.setDescription('The state of the option to keep client-encoding header.')
ltmHttpCompressionProfileBrowserWorkarounds = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileBrowserWorkarounds.setStatus('current')
if mibBuilder.loadTexts: ltmHttpCompressionProfileBrowserWorkarounds.setDescription("The option to control whether or not to disable compression for known browsers that cannot handle certain types of compressed responses properly. If it's true, compression for known browsers will be disabled.")
ltmHttpCompressionProfileCpusaver = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileCpusaver.setStatus('current')
if mibBuilder.loadTexts: ltmHttpCompressionProfileCpusaver.setDescription('The state indicating whether CPU saving mode is enable or not when doing compression.')
ltmHttpCompressionProfileCpusaverHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 1, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileCpusaverHigh.setStatus('current')
if mibBuilder.loadTexts: ltmHttpCompressionProfileCpusaverHigh.setDescription('The CPU saver high threshold. When CPU utilization exceeds this value, compression is switched to NULL compression.')
ltmHttpCompressionProfileCpusaverLow = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 1, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileCpusaverLow.setStatus('current')
if mibBuilder.loadTexts: ltmHttpCompressionProfileCpusaverLow.setDescription('The CPU saver low threshold. When CPU utilization drops below this value, compression is switched to full throttle.')
ltmHttpCompressionProfilePreferredMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 1, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("deflate", 0), ("gzip", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfilePreferredMethod.setStatus('current')
if mibBuilder.loadTexts: ltmHttpCompressionProfilePreferredMethod.setDescription('The option for preferred compression method.')
ltmHttpcompUriInclNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpcompUriInclNumber.setStatus('current')
if mibBuilder.loadTexts: ltmHttpcompUriInclNumber.setDescription('The number of ltmHttpCompressionProfileUriIncl entries in the table.')
ltmHttpcompUriInclTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 2, 2), )
if mibBuilder.loadTexts: ltmHttpcompUriInclTable.setStatus('current')
if mibBuilder.loadTexts: ltmHttpcompUriInclTable.setDescription("A table containing information of regular expressions used to match the request URI part of the client requests during compression. A match must be found in at least one of the 'include' fields.")
ltmHttpcompUriInclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 2, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmHttpcompUriInclName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmHttpcompUriInclIndex"))
if mibBuilder.loadTexts: ltmHttpcompUriInclEntry.setStatus('current')
if mibBuilder.loadTexts: ltmHttpcompUriInclEntry.setDescription('Columns in the ltmHttpcompUriIncl Table')
ltmHttpcompUriInclName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 2, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpcompUriInclName.setStatus('current')
if mibBuilder.loadTexts: ltmHttpcompUriInclName.setDescription('The name of a HTTP Compression profile.')
ltmHttpcompUriInclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpcompUriInclIndex.setStatus('current')
if mibBuilder.loadTexts: ltmHttpcompUriInclIndex.setDescription("The index of the regular expression used to match the request URI part of the client requests during compression in 'include' fields for the specified HTTP Compression profile.")
ltmHttpcompUriInclUri = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 2, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpcompUriInclUri.setStatus('current')
if mibBuilder.loadTexts: ltmHttpcompUriInclUri.setDescription("The regular expression used to match the request URI part of the client requests during compression in 'include' fields for the specified HTTP Compression profile.")
ltmHttpcompUriExclNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpcompUriExclNumber.setStatus('current')
if mibBuilder.loadTexts: ltmHttpcompUriExclNumber.setDescription('The number of ltmHttpCompressionProfileUriExcl entries in the table.')
ltmHttpcompUriExclTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 3, 2), )
if mibBuilder.loadTexts: ltmHttpcompUriExclTable.setStatus('current')
if mibBuilder.loadTexts: ltmHttpcompUriExclTable.setDescription("A table containing information of regular expressions used to match the request URI part of the client requests during compression. A match must be found in at least one of the 'exclude' fields.")
ltmHttpcompUriExclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 3, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmHttpcompUriExclName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmHttpcompUriExclIndex"))
if mibBuilder.loadTexts: ltmHttpcompUriExclEntry.setStatus('current')
if mibBuilder.loadTexts: ltmHttpcompUriExclEntry.setDescription('Columns in the ltmHttpcompUriExcl Table')
ltmHttpcompUriExclName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 3, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpcompUriExclName.setStatus('current')
if mibBuilder.loadTexts: ltmHttpcompUriExclName.setDescription('The name of a HTTP Compression profile.')
ltmHttpcompUriExclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpcompUriExclIndex.setStatus('current')
if mibBuilder.loadTexts: ltmHttpcompUriExclIndex.setDescription("The index of the regular expression used to match the request URI part of the client requests during compression in 'exclude' fields for the specified HTTP Compression profile.")
ltmHttpcompUriExclUri = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 3, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpcompUriExclUri.setStatus('current')
if mibBuilder.loadTexts: ltmHttpcompUriExclUri.setDescription("The regular expression used to match the request URI part of the client requests during compression in 'exclude' fields for the specified HTTP Compression profile.")
ltmHttpcompContTypeInclNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpcompContTypeInclNumber.setStatus('current')
if mibBuilder.loadTexts: ltmHttpcompContTypeInclNumber.setDescription('The number of ltmHttpCompressionProfileContTypeIncl entries in the table.')
ltmHttpcompContTypeInclTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 4, 2), )
if mibBuilder.loadTexts: ltmHttpcompContTypeInclTable.setStatus('current')
if mibBuilder.loadTexts: ltmHttpcompContTypeInclTable.setDescription("A table containing information of regular expressions used to match the MIME types in the server response's 'Content-Type:' headers. A match must be found in at least one of the 'include' fields.")
ltmHttpcompContTypeInclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 4, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmHttpcompContTypeInclName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmHttpcompContTypeInclIndex"))
if mibBuilder.loadTexts: ltmHttpcompContTypeInclEntry.setStatus('current')
if mibBuilder.loadTexts: ltmHttpcompContTypeInclEntry.setDescription('Columns in the ltmHttpcompContTypeIncl Table')
ltmHttpcompContTypeInclName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 4, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpcompContTypeInclName.setStatus('current')
if mibBuilder.loadTexts: ltmHttpcompContTypeInclName.setDescription('The name of a HTTP Compression profile.')
ltmHttpcompContTypeInclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpcompContTypeInclIndex.setStatus('current')
if mibBuilder.loadTexts: ltmHttpcompContTypeInclIndex.setDescription("The index of the regular expression to match the MIME types in the server response's 'Content-Type:' headers in 'include' fields for the specified HTTP Compression profile.")
ltmHttpcompContTypeInclContentType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 4, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpcompContTypeInclContentType.setStatus('current')
if mibBuilder.loadTexts: ltmHttpcompContTypeInclContentType.setDescription("The regular expression used to match the MIME types in the server response's 'Content-Type:' headers in 'include' fields for the specified HTTP Compression profile.")
ltmHttpcompContTypeExclNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpcompContTypeExclNumber.setStatus('current')
if mibBuilder.loadTexts: ltmHttpcompContTypeExclNumber.setDescription('The number of ltmHttpCompressionProfileContTypeExcl entries in the table.')
ltmHttpcompContTypeExclTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 5, 2), )
if mibBuilder.loadTexts: ltmHttpcompContTypeExclTable.setStatus('current')
if mibBuilder.loadTexts: ltmHttpcompContTypeExclTable.setDescription("A table containing information of regular expressions used to match the MIME types in the server response's 'Content-Type:' headers. A match must be found in at least one of the 'exclude' fields.")
ltmHttpcompContTypeExclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 5, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmHttpcompContTypeExclName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmHttpcompContTypeExclIndex"))
if mibBuilder.loadTexts: ltmHttpcompContTypeExclEntry.setStatus('current')
if mibBuilder.loadTexts: ltmHttpcompContTypeExclEntry.setDescription('Columns in the ltmHttpcompContTypeExcl Table')
ltmHttpcompContTypeExclName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 5, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpcompContTypeExclName.setStatus('current')
if mibBuilder.loadTexts: ltmHttpcompContTypeExclName.setDescription('The name of a HTTP Compression profile.')
ltmHttpcompContTypeExclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpcompContTypeExclIndex.setStatus('current')
if mibBuilder.loadTexts: ltmHttpcompContTypeExclIndex.setDescription("The index of the regular expression to match the MIME types in the server response's 'Content-Type:' headers in 'exclude' fields for the specified HTTP Compression profile.")
ltmHttpcompContTypeExclContentType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 5, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpcompContTypeExclContentType.setStatus('current')
if mibBuilder.loadTexts: ltmHttpcompContTypeExclContentType.setDescription("The regular expression used to match the MIME types in the server response's 'Content-Type:' headers in 'exclude' fields for the specified HTTP Compression profile.")
ltmHttpCompressionProfileStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 6, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatResetStats.setStatus('current')
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatResetStats.setDescription('The action to reset resetable statistics data in ltmHttpCompressionProfileStat. Setting this value to 1 will reset statistics data. Note, some statistics data may not be reset including data that are incremental counters.')
ltmHttpCompressionProfileStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatNumber.setDescription('The number of ltmHttpCompressionProfileStat entries in the table.')
ltmHttpCompressionProfileStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 6, 3), )
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatTable.setDescription('A table containing statistic information of HTTP Compression profiles.')
ltmHttpCompressionProfileStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 6, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileStatName"))
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatEntry.setDescription('Columns in the ltmHttpCompressionProfileStat Table')
ltmHttpCompressionProfileStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 6, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatName.setStatus('current')
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatName.setDescription('The name of a HTTP Compression profile.')
ltmHttpCompressionProfileStatPrecompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 6, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatPrecompressBytes.setStatus('current')
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatPrecompressBytes.setDescription('The number of response bytes before compression has taken place.')
ltmHttpCompressionProfileStatPostcompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 6, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatPostcompressBytes.setStatus('current')
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatPostcompressBytes.setDescription('The number of response bytes after compression has taken place.')
ltmHttpCompressionProfileStatNullCompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 6, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatNullCompressBytes.setStatus('current')
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatNullCompressBytes.setDescription('The number of bytes subjected to NULL compression (for license enforcement).')
ltmHttpCompressionProfileStatHtmlPrecompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 6, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatHtmlPrecompressBytes.setStatus('current')
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatHtmlPrecompressBytes.setDescription('The number of pre-compressed bytes for the MIME-Types: HTML.')
ltmHttpCompressionProfileStatHtmlPostcompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 6, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatHtmlPostcompressBytes.setStatus('current')
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatHtmlPostcompressBytes.setDescription('The number of post-compressed bytes for the MIME-Types: HTML.')
ltmHttpCompressionProfileStatCssPrecompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 6, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatCssPrecompressBytes.setStatus('current')
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatCssPrecompressBytes.setDescription('The number of pre-compressed bytes for the MIME-Types: CSS.')
ltmHttpCompressionProfileStatCssPostcompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 6, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatCssPostcompressBytes.setStatus('current')
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatCssPostcompressBytes.setDescription('The number of post-compressed bytes for the MIME-Types: CSS.')
ltmHttpCompressionProfileStatJsPrecompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 6, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatJsPrecompressBytes.setStatus('current')
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatJsPrecompressBytes.setDescription('The number of pre-compressed bytes for the MIME-Types: Javascript.')
ltmHttpCompressionProfileStatJsPostcompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 6, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatJsPostcompressBytes.setStatus('current')
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatJsPostcompressBytes.setDescription('The number of post-compressed bytes for the MIME-Types: Javascript.')
ltmHttpCompressionProfileStatXmlPrecompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 6, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatXmlPrecompressBytes.setStatus('current')
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatXmlPrecompressBytes.setDescription('The number of pre-compressed bytes for the MIME-Types: XML.')
ltmHttpCompressionProfileStatXmlPostcompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 6, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatXmlPostcompressBytes.setStatus('current')
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatXmlPostcompressBytes.setDescription('The number of post-compressed bytes for the MIME-Types: XML.')
ltmHttpCompressionProfileStatSgmlPrecompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 6, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatSgmlPrecompressBytes.setStatus('current')
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatSgmlPrecompressBytes.setDescription('The number of pre-compressed bytes for the MIME-Types: SGML.')
ltmHttpCompressionProfileStatSgmlPostcompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 6, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatSgmlPostcompressBytes.setStatus('current')
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatSgmlPostcompressBytes.setDescription('The number of post-compressed bytes for the MIME-Types: SGML.')
ltmHttpCompressionProfileStatPlainPrecompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 6, 3, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatPlainPrecompressBytes.setStatus('current')
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatPlainPrecompressBytes.setDescription('The number of pre-compressed bytes for the MIME-Types: Plain.')
ltmHttpCompressionProfileStatPlainPostcompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 6, 3, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatPlainPostcompressBytes.setStatus('current')
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatPlainPostcompressBytes.setDescription('The number of post-compressed bytes for the MIME-Types: Plain.')
ltmHttpCompressionProfileStatOctetPrecompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 6, 3, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatOctetPrecompressBytes.setStatus('current')
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatOctetPrecompressBytes.setDescription('The number of pre-compressed bytes for the MIME-Types: Octet stream.')
ltmHttpCompressionProfileStatOctetPostcompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 6, 3, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatOctetPostcompressBytes.setStatus('current')
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatOctetPostcompressBytes.setDescription('The number of post-compressed bytes for the MIME-Types: Octet stream.')
ltmHttpCompressionProfileStatImagePrecompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 6, 3, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatImagePrecompressBytes.setStatus('current')
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatImagePrecompressBytes.setDescription('The number of pre-compressed bytes for the MIME-Types: Images.')
ltmHttpCompressionProfileStatImagePostcompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 6, 3, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatImagePostcompressBytes.setStatus('current')
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatImagePostcompressBytes.setDescription('The number of post-compressed bytes for the MIME-Types: Images.')
ltmHttpCompressionProfileStatVideoPrecompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 6, 3, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatVideoPrecompressBytes.setStatus('current')
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatVideoPrecompressBytes.setDescription('The number of pre-compressed bytes for the MIME-Types: Video files.')
ltmHttpCompressionProfileStatVideoPostcompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 6, 3, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatVideoPostcompressBytes.setStatus('current')
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatVideoPostcompressBytes.setDescription('The number of post-compressed bytes for the MIME-Types: Video files.')
ltmHttpCompressionProfileStatAudioPrecompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 6, 3, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatAudioPrecompressBytes.setStatus('current')
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatAudioPrecompressBytes.setDescription('The number of pre-compressed bytes for the MIME-Types: Audio files.')
ltmHttpCompressionProfileStatAudioPostcompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 6, 3, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatAudioPostcompressBytes.setStatus('current')
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatAudioPostcompressBytes.setDescription('The number of post-compressed bytes for the MIME-Types: Audio files.')
ltmHttpCompressionProfileStatOtherPrecompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 6, 3, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatOtherPrecompressBytes.setStatus('current')
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatOtherPrecompressBytes.setDescription('The number of pre-compressed bytes for the MIME-Types: other than HTML, CSS, Javascript, XML, SGML, Plain, Images, Video files, Audio files.')
ltmHttpCompressionProfileStatOtherPostcompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 6, 3, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatOtherPostcompressBytes.setStatus('current')
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatOtherPostcompressBytes.setDescription('The number of post-compressed bytes for the MIME-Types: other than HTML, CSS, Javascript, XML, SGML, Plain, Images, Video files, Audio files.')
ltmWebAccelerationProfileNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebAccelerationProfileNumber.setStatus('current')
if mibBuilder.loadTexts: ltmWebAccelerationProfileNumber.setDescription('The number of ltmWebAccelerationProfile entries in the table.')
ltmWebAccelerationProfileTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 1, 2), )
if mibBuilder.loadTexts: ltmWebAccelerationProfileTable.setStatus('current')
if mibBuilder.loadTexts: ltmWebAccelerationProfileTable.setDescription('A table containing information of Web Acceleration profiles.')
ltmWebAccelerationProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmWebAccelerationProfileName"))
if mibBuilder.loadTexts: ltmWebAccelerationProfileEntry.setStatus('current')
if mibBuilder.loadTexts: ltmWebAccelerationProfileEntry.setDescription('Columns in the ltmWebAccelerationProfile Table')
ltmWebAccelerationProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebAccelerationProfileName.setStatus('current')
if mibBuilder.loadTexts: ltmWebAccelerationProfileName.setDescription('The name of a Web Acceleration profile.')
ltmWebAccelerationProfileConfigSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("usercfg", 0), ("basecfg", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebAccelerationProfileConfigSource.setStatus('current')
if mibBuilder.loadTexts: ltmWebAccelerationProfileConfigSource.setDescription('The state that specifies whether this is a base/pre-configured profile or user defined profile.')
ltmWebAccelerationProfileDefaultName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 1, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebAccelerationProfileDefaultName.setStatus('current')
if mibBuilder.loadTexts: ltmWebAccelerationProfileDefaultName.setDescription('The name of the profile from which the specified profile derives its attribute default values.')
ltmWebAccelerationProfileCacheSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebAccelerationProfileCacheSize.setStatus('current')
if mibBuilder.loadTexts: ltmWebAccelerationProfileCacheSize.setDescription("The maximum cache size in MB's.")
ltmWebAccelerationProfileCacheMaxEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebAccelerationProfileCacheMaxEntries.setStatus('current')
if mibBuilder.loadTexts: ltmWebAccelerationProfileCacheMaxEntries.setDescription('The maximum cache entries.')
ltmWebAccelerationProfileCacheMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 1, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebAccelerationProfileCacheMaxAge.setStatus('current')
if mibBuilder.loadTexts: ltmWebAccelerationProfileCacheMaxAge.setDescription('The maximum age of cached object.')
ltmWebAccelerationProfileCacheObjectMinSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 1, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebAccelerationProfileCacheObjectMinSize.setStatus('current')
if mibBuilder.loadTexts: ltmWebAccelerationProfileCacheObjectMinSize.setDescription('The minimum size requirement for cached object in bytes.')
ltmWebAccelerationProfileCacheObjectMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 1, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebAccelerationProfileCacheObjectMaxSize.setStatus('current')
if mibBuilder.loadTexts: ltmWebAccelerationProfileCacheObjectMaxSize.setDescription('The maximum size limitation for cached object in bytes.')
ltmWebAccelerationProfileCacheIgnoreClient = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("maxage", 1), ("all", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebAccelerationProfileCacheIgnoreClient.setStatus('current')
if mibBuilder.loadTexts: ltmWebAccelerationProfileCacheIgnoreClient.setDescription('The state that determine whether cache ignores client cache.')
ltmWebAccelerationProfileCacheAgingRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 1, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebAccelerationProfileCacheAgingRate.setStatus('current')
if mibBuilder.loadTexts: ltmWebAccelerationProfileCacheAgingRate.setDescription('The aging rate for the cache.')
ltmWebAccelerationProfileCacheInsertAgeHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebAccelerationProfileCacheInsertAgeHeader.setStatus('current')
if mibBuilder.loadTexts: ltmWebAccelerationProfileCacheInsertAgeHeader.setDescription('The mode that indicates whether to insert the Age headers.')
ltmWebaccCacheUriExclNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebaccCacheUriExclNumber.setStatus('current')
if mibBuilder.loadTexts: ltmWebaccCacheUriExclNumber.setDescription('The number of ltmWebAccelerationProfileUriExcl entries in the table.')
ltmWebaccCacheUriExclTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 2, 2), )
if mibBuilder.loadTexts: ltmWebaccCacheUriExclTable.setStatus('current')
if mibBuilder.loadTexts: ltmWebaccCacheUriExclTable.setDescription('A table containing information of excludes URIs in Web Acceleration profiles.')
ltmWebaccCacheUriExclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 2, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmWebaccCacheUriExclName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmWebaccCacheUriExclIndex"))
if mibBuilder.loadTexts: ltmWebaccCacheUriExclEntry.setStatus('current')
if mibBuilder.loadTexts: ltmWebaccCacheUriExclEntry.setDescription('Columns in the ltmWebaccCacheUriExcl Table')
ltmWebaccCacheUriExclName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 2, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebaccCacheUriExclName.setStatus('current')
if mibBuilder.loadTexts: ltmWebaccCacheUriExclName.setDescription('The name of a Web Acceleration profile.')
ltmWebaccCacheUriExclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebaccCacheUriExclIndex.setStatus('current')
if mibBuilder.loadTexts: ltmWebaccCacheUriExclIndex.setDescription('The index of exclude URI for the specified profile.')
ltmWebaccCacheUriExclUri = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 2, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebaccCacheUriExclUri.setStatus('current')
if mibBuilder.loadTexts: ltmWebaccCacheUriExclUri.setDescription('The exclude URI for the specified profile.')
ltmWebaccCacheUriInclNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebaccCacheUriInclNumber.setStatus('current')
if mibBuilder.loadTexts: ltmWebaccCacheUriInclNumber.setDescription('The number of ltmWebAccelerationProfileUriIncl entries in the table.')
ltmWebaccCacheUriInclTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 3, 2), )
if mibBuilder.loadTexts: ltmWebaccCacheUriInclTable.setStatus('current')
if mibBuilder.loadTexts: ltmWebaccCacheUriInclTable.setDescription('A table containing information of includes URI in Web Acceleration profiles.')
ltmWebaccCacheUriInclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 3, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmWebaccCacheUriInclName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmWebaccCacheUriInclIndex"))
if mibBuilder.loadTexts: ltmWebaccCacheUriInclEntry.setStatus('current')
if mibBuilder.loadTexts: ltmWebaccCacheUriInclEntry.setDescription('Columns in the ltmWebaccCacheUriIncl Table')
ltmWebaccCacheUriInclName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 3, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebaccCacheUriInclName.setStatus('current')
if mibBuilder.loadTexts: ltmWebaccCacheUriInclName.setDescription('The name of a Web Acceleration profile.')
ltmWebaccCacheUriInclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebaccCacheUriInclIndex.setStatus('current')
if mibBuilder.loadTexts: ltmWebaccCacheUriInclIndex.setDescription('The index of include URI for the specified profile.')
ltmWebaccCacheUriInclUri = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 3, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebaccCacheUriInclUri.setStatus('current')
if mibBuilder.loadTexts: ltmWebaccCacheUriInclUri.setDescription('The include URI for the specified profile.')
ltmWebaccCacheUriPinNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebaccCacheUriPinNumber.setStatus('current')
if mibBuilder.loadTexts: ltmWebaccCacheUriPinNumber.setDescription('The number of ltmWebAccelerationProfileUriPin entries in the table.')
ltmWebaccCacheUriPinTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 4, 2), )
if mibBuilder.loadTexts: ltmWebaccCacheUriPinTable.setStatus('current')
if mibBuilder.loadTexts: ltmWebaccCacheUriPinTable.setDescription('A table containing information of pinned URIs in Web Acceleration profiles.')
ltmWebaccCacheUriPinEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 4, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmWebaccCacheUriPinName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmWebaccCacheUriPinIndex"))
if mibBuilder.loadTexts: ltmWebaccCacheUriPinEntry.setStatus('current')
if mibBuilder.loadTexts: ltmWebaccCacheUriPinEntry.setDescription('Columns in the ltmWebaccCacheUriPin Table')
ltmWebaccCacheUriPinName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 4, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebaccCacheUriPinName.setStatus('current')
if mibBuilder.loadTexts: ltmWebaccCacheUriPinName.setDescription('The name of a Web Acceleration profile.')
ltmWebaccCacheUriPinIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebaccCacheUriPinIndex.setStatus('current')
if mibBuilder.loadTexts: ltmWebaccCacheUriPinIndex.setDescription('The index of pinned URI for the specified profile.')
ltmWebaccCacheUriPinUri = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 4, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebaccCacheUriPinUri.setStatus('current')
if mibBuilder.loadTexts: ltmWebaccCacheUriPinUri.setDescription('The pinned URI for the specified profile.')
ltmWebAccelerationProfileStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 5, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatResetStats.setStatus('current')
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatResetStats.setDescription('The action to reset resetable statistics data in ltmWebAccelerationProfileStat. Setting this value to 1 will reset statistics data. Note, some statistics data may not be reset including data that are incremental counters.')
ltmWebAccelerationProfileStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatNumber.setDescription('The number of ltmWebAccelerationProfileStat entries in the table.')
ltmWebAccelerationProfileStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 5, 3), )
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatTable.setDescription('A table containing statistic information of Web Acceleration profiles.')
ltmWebAccelerationProfileStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 5, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmWebAccelerationProfileStatName"))
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatEntry.setDescription('Columns in the ltmWebAccelerationProfileStat Table')
ltmWebAccelerationProfileStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 5, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatName.setStatus('current')
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatName.setDescription('The name of a Web Acceleration profile.')
ltmWebAccelerationProfileStatCacheHits = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 5, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatCacheHits.setStatus('current')
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatCacheHits.setDescription('The number of cache hits.')
ltmWebAccelerationProfileStatCacheMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 5, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatCacheMisses.setStatus('current')
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatCacheMisses.setDescription('The number of cache misses, excluding un-cacheable data.')
ltmWebAccelerationProfileStatCacheMissesAll = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 5, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatCacheMissesAll.setStatus('current')
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatCacheMissesAll.setDescription('The total number of cache misses.')
ltmWebAccelerationProfileStatCacheHitBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 5, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatCacheHitBytes.setStatus('current')
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatCacheHitBytes.setDescription('The number of cache hits in bytes.')
ltmWebAccelerationProfileStatCacheMissBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 5, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatCacheMissBytes.setStatus('current')
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatCacheMissBytes.setDescription('The number of cache misses in bytes, excluding un-cacheable data.')
ltmWebAccelerationProfileStatCacheMissBytesAll = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 5, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatCacheMissBytesAll.setStatus('current')
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatCacheMissBytesAll.setDescription('The total number of cache misses in bytes.')
ltmWebAccelerationProfileStatCacheSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 5, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatCacheSize.setStatus('current')
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatCacheSize.setDescription('The current cache size (in bytes).')
ltmWebAccelerationProfileStatCacheCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 5, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatCacheCount.setStatus('current')
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatCacheCount.setDescription('The number of items stored in cache.')
ltmWebAccelerationProfileStatCacheEvictions = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 5, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatCacheEvictions.setStatus('current')
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatCacheEvictions.setDescription('The number of cache evictions.')
ltmWebAccelerationProfileStatInterStripeHits = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 5, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatInterStripeHits.setStatus('current')
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatInterStripeHits.setDescription('The number of inter-stripe cache hits.')
ltmWebAccelerationProfileStatInterStripeMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 5, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatInterStripeMisses.setStatus('current')
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatInterStripeMisses.setDescription('The number of inter-stripe cache misses.')
ltmWebAccelerationProfileStatInterStripeHitBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 5, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatInterStripeHitBytes.setStatus('current')
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatInterStripeHitBytes.setDescription('The number of inter-stripe cache hits in bytes.')
ltmWebAccelerationProfileStatInterStripeSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 5, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatInterStripeSize.setStatus('current')
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatInterStripeSize.setDescription('The current inter-stripe cache size (in bytes).')
ltmWebAccelerationProfileStatInterStripeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 5, 3, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatInterStripeCount.setStatus('current')
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatInterStripeCount.setDescription('The number of items stored in inter-stripe cache.')
ltmWebAccelerationProfileStatInterStripeEvictions = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 5, 3, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatInterStripeEvictions.setStatus('current')
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatInterStripeEvictions.setDescription('The number of inter-stripe cache evictions.')
ltmWebAccelerationProfileStatRemoteHits = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 5, 3, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatRemoteHits.setStatus('current')
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatRemoteHits.setDescription('The number of remote cache hits.')
ltmWebAccelerationProfileStatRemoteMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 5, 3, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatRemoteMisses.setStatus('current')
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatRemoteMisses.setDescription('The number of remote cache misses.')
ltmWebAccelerationProfileStatRemoteHitBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 5, 3, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatRemoteHitBytes.setStatus('current')
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatRemoteHitBytes.setDescription('The number of remote cache hits in bytes.')
ltmRstCauseStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 11, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmRstCauseStatResetStats.setStatus('current')
if mibBuilder.loadTexts: ltmRstCauseStatResetStats.setDescription('The action to reset resetable statistics data in ltmRstCauseStat. Setting this value to 1 will reset statistics data. Note, some statistics data may not be reset including data that are incremental counters.')
ltmRstCauseStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 11, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRstCauseStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmRstCauseStatNumber.setDescription('The number of ltmRstCauseStat entries in the table.')
ltmRstCauseStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 11, 1, 3), )
if mibBuilder.loadTexts: ltmRstCauseStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmRstCauseStatTable.setDescription('A table containing statistics for TCP/IP reset (RST) causes.')
ltmRstCauseStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 11, 1, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmRstCauseStatIndex"))
if mibBuilder.loadTexts: ltmRstCauseStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmRstCauseStatEntry.setDescription('Columns in the ltmRstCauseStat Table')
ltmRstCauseStatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 11, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRstCauseStatIndex.setStatus('current')
if mibBuilder.loadTexts: ltmRstCauseStatIndex.setDescription('The index of cause of TCP/IP reset.')
ltmRstCauseStatRstCause = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 11, 1, 3, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRstCauseStatRstCause.setStatus('current')
if mibBuilder.loadTexts: ltmRstCauseStatRstCause.setDescription('The cause for TCP/IP reset (RST).')
ltmRstCauseStatCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 11, 1, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRstCauseStatCount.setStatus('current')
if mibBuilder.loadTexts: ltmRstCauseStatCount.setDescription('The count for each TCP/IP reset (RST) cause.')
ltmWebaccCacheUriOverNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebaccCacheUriOverNumber.setStatus('current')
if mibBuilder.loadTexts: ltmWebaccCacheUriOverNumber.setDescription('The number of ltmWebAccelerationProfileUriOver entries in the table.')
ltmWebaccCacheUriOverTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 6, 2), )
if mibBuilder.loadTexts: ltmWebaccCacheUriOverTable.setStatus('current')
if mibBuilder.loadTexts: ltmWebaccCacheUriOverTable.setDescription('A table containing information of include override URI in Web Acceleration profiles.')
ltmWebaccCacheUriOverEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 6, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmWebaccCacheUriOverName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmWebaccCacheUriOverIndex"))
if mibBuilder.loadTexts: ltmWebaccCacheUriOverEntry.setStatus('current')
if mibBuilder.loadTexts: ltmWebaccCacheUriOverEntry.setDescription('Columns in the ltmWebaccCacheUriOver Table')
ltmWebaccCacheUriOverName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 6, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebaccCacheUriOverName.setStatus('current')
if mibBuilder.loadTexts: ltmWebaccCacheUriOverName.setDescription('The name of a Web Acceleration profile.')
ltmWebaccCacheUriOverIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebaccCacheUriOverIndex.setStatus('current')
if mibBuilder.loadTexts: ltmWebaccCacheUriOverIndex.setDescription('The index of include override URI for the specified profile.')
ltmWebaccCacheUriOverUri = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 6, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebaccCacheUriOverUri.setStatus('current')
if mibBuilder.loadTexts: ltmWebaccCacheUriOverUri.setDescription('The include override URI for the specified profile.')
ltmDnsCacheNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheNumber.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheNumber.setDescription('The number of ltmDnsCache entries in the table.')
ltmDnsCacheTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 1, 2), )
if mibBuilder.loadTexts: ltmDnsCacheTable.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheTable.setDescription('A table containing information of DNS cache.')
ltmDnsCacheEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmDnsCacheName"))
if mibBuilder.loadTexts: ltmDnsCacheEntry.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheEntry.setDescription('Columns in the ltmDnsCache Table')
ltmDnsCacheName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheName.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheName.setDescription('The name of DNS cache.')
ltmDnsCacheType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("resolver", 0), ("validating-resolver", 1), ("transparent-resolver", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheType.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheType.setDescription('The type of DNS cache. resolver - configures a DNS cache with a resolver on the BIG-IP system; validating-resolver - configures a DNS cache with a resolver and validator on the BIG-IP system; transparent-resolver - configures a DNS cache without a resolver on the BIG-IP system.')
ltmDnsCacheMsgCacheSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheMsgCacheSize.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheMsgCacheSize.setDescription('The number of bytes allocated to the message cache. The default value is 1m. Relevant to resolver, validating-resolver, and transparent-resolver types.')
ltmDnsCacheRrsetCacheSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheRrsetCacheSize.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheRrsetCacheSize.setDescription('The number of bytes allocated to the resource records set cache. The default value is 10m. Relevant to resolver, validating-resolver, and transparent-resolver types.')
ltmDnsCacheAnswerDefaultZones = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheAnswerDefaultZones.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheAnswerDefaultZones.setDescription('The state indicating whether or not the resolver answers queries for default zones: localhost, reverse 127.0.0.1 and ::1, and AS112 zones. The default value is no. Relevant to resolver, validating-resolver, and transparent-resolver types.')
ltmDnsCacheUseIpv4 = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheUseIpv4.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheUseIpv4.setDescription('The state indicating whether or not the resolver is enabled to send queries to IPv4 addresses. The default value is yes. Relevant to resolver and validating-resolver types.')
ltmDnsCacheUseIpv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheUseIpv6.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheUseIpv6.setDescription('The state indicating whether or not the resolver is enabled to send queries to IPv6 addresses. The default value is yes. Relevant to resolver and validating-resolver types.')
ltmDnsCacheUseUdp = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheUseUdp.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheUseUdp.setDescription('The state indicating whether or not the resolver is enabled to send queries over UDP. The default value is yes. Relevant to resolver and validating-resolver types.')
ltmDnsCacheUseTcp = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheUseTcp.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheUseTcp.setDescription('The state indicating whether or not the resolver is enabled to send queries over TCP. The default value is yes. Relevant to resolver and validating-resolver types.')
ltmDnsCacheNameserverCacheCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 1, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheNameserverCacheCount.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheNameserverCacheCount.setDescription('The number of DNS name-servers for which connection and capability data is cached. The default value is 16k. Relevant to resolver and validating-resolver types.')
ltmDnsCacheMaxConcurrentTcp = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 1, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheMaxConcurrentTcp.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheMaxConcurrentTcp.setDescription('The maximum number of concurrent TCP flows used by the resolver. The default value is 20. Relevant to resolver and validating-resolver types.')
ltmDnsCacheMaxConcurrentUdp = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 1, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheMaxConcurrentUdp.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheMaxConcurrentUdp.setDescription('The maximum number of concurrent UDP flows used by the resolver. The default value is 8192. Relevant to resolver and validating-resolver types.')
ltmDnsCacheUnwantedThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 1, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheUnwantedThreshold.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheUnwantedThreshold.setDescription('The threshold count of unsolicited query replies which triggers an alert (potential DOS attack underway). The default value is zero (or off). Relevant to resolver and validating-resolver types.')
ltmDnsCacheRouteDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 1, 2, 1, 14), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheRouteDomainName.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheRouteDomainName.setDescription('The name of the route domain used for resolver outbound traffic. The default value is the default route domain. Relevant to resolver and validating-resolver types.')
ltmDnsCacheIgnoreCd = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 1, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheIgnoreCd.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheIgnoreCd.setDescription('The state indicating whether or not the validating-resolver ignores client queries setting of checking-disabled and performs validation anyway and only returns secure answers. The default value is no. Relevant to validating-resolver type.')
ltmDnsCachePrefetchKey = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 1, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCachePrefetchKey.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCachePrefetchKey.setDescription('The state indicating whether or not the validating-resolver fetches DNSKEY early in validation process. The default value is yes. Relevant to validating-resolver type.')
ltmDnsCacheKeyCacheSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 1, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheKeyCacheSize.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheKeyCacheSize.setDescription('The number of bytes allocated to the DNSKEY cache. The default value is 1m. Relevant to validating-resolver type.')
ltmDnsCacheRandomizeQueryNameCase = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 1, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheRandomizeQueryNameCase.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheRandomizeQueryNameCase.setDescription('The state indicating whether or not the resolver is enabled to randomize the case of query names. The default value is yes. Relevant to resolver and validating-resolver types.')
ltmDnsCacheMaxConcurrentQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 1, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheMaxConcurrentQueries.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheMaxConcurrentQueries.setDescription('The maximum number of concurrent distinct queries used by the resolver. A query is identified by query name, type and class. If the number of distinct queries exceeds this limit, the resolver will try to find a query from the queue which arrives the earliest. Replace it with the new query if it has been in the queue longer than the allowed time. The default value is 1024.')
ltmDnsCacheAllowedQueryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 1, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheAllowedQueryTime.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheAllowedQueryTime.setDescription('The time allowed for a query to stay in the queue before replaced by a new query when the number of concurrrent distinct queries exceeds the limit. The default value is 200 milliseconds.')
ltmDnsCacheStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmDnsCacheStatResetStats.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheStatResetStats.setDescription('The action to reset resetable statistics data in ltmDnsCacheStat. Setting this value to 1 will reset statistics data. Note, some statistics data may not be reset including data that are incremental counters.')
ltmDnsCacheStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheStatNumber.setDescription('The number of ltmDnsCacheStat entries in the table.')
ltmDnsCacheStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3), )
if mibBuilder.loadTexts: ltmDnsCacheStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheStatTable.setDescription('A table containing statistics information of DNS cache.')
ltmDnsCacheStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatName"))
if mibBuilder.loadTexts: ltmDnsCacheStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheStatEntry.setDescription('Columns in the ltmDnsCacheStat Table')
ltmDnsCacheStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatName.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheStatName.setDescription('The name of DNS cache.')
ltmDnsCacheStatQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatQueries.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheStatQueries.setDescription('The total number of queries.')
ltmDnsCacheStatResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatResponses.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheStatResponses.setDescription('The total number of responses.')
ltmDnsCacheStatSync = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatSync.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheStatSync.setDescription('The total number of synchronous responses.')
ltmDnsCacheStatAsync = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatAsync.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheStatAsync.setDescription('The total number of asynchronous responses.')
ltmDnsCacheStatFailureResolv = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatFailureResolv.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheStatFailureResolv.setDescription('The total number of internal resolution failures.')
ltmDnsCacheStatFailureCf = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatFailureCf.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheStatFailureCf.setDescription('The total number of internal connection failures.')
ltmDnsCacheStatFailureServer = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatFailureServer.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheStatFailureServer.setDescription('The total number of server core failures.')
ltmDnsCacheStatFailureSend = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatFailureSend.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheStatFailureSend.setDescription('The total number of response send failures.')
ltmDnsCacheStatMsgHits = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatMsgHits.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheStatMsgHits.setDescription('The number of complete message cache hits.')
ltmDnsCacheStatMsgMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatMsgMisses.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheStatMsgMisses.setDescription('The number of complete message cache misses.')
ltmDnsCacheStatMsgInserts = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatMsgInserts.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheStatMsgInserts.setDescription('The number of complete message cache inserts.')
ltmDnsCacheStatMsgUpdates = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatMsgUpdates.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheStatMsgUpdates.setDescription('The number of complete message cache updates.')
ltmDnsCacheStatMsgEvictions = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatMsgEvictions.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheStatMsgEvictions.setDescription('The number of complete message cache evictions.')
ltmDnsCacheStatRrsetHits = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatRrsetHits.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheStatRrsetHits.setDescription('The number of resource record set cache hits.')
ltmDnsCacheStatRrsetMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatRrsetMisses.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheStatRrsetMisses.setDescription('The number of resource record set cache misses.')
ltmDnsCacheStatRrsetInserts = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatRrsetInserts.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheStatRrsetInserts.setDescription('The number of resource record set cache inserts.')
ltmDnsCacheStatRrsetUpdates = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatRrsetUpdates.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheStatRrsetUpdates.setDescription('The number of resource record set cache updates.')
ltmDnsCacheStatRrsetEvictions = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatRrsetEvictions.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheStatRrsetEvictions.setDescription('The number of resource record set cache evictions.')
ltmDnsCacheStatNameserverHits = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatNameserverHits.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheStatNameserverHits.setDescription('The number of internet name-server cache hits.')
ltmDnsCacheStatNameserverMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatNameserverMisses.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheStatNameserverMisses.setDescription('The number of internet name-server cache misses.')
ltmDnsCacheStatNameserverInserts = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatNameserverInserts.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheStatNameserverInserts.setDescription('The number of internet name-server cache inserts.')
ltmDnsCacheStatNameserverUpdates = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatNameserverUpdates.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheStatNameserverUpdates.setDescription('The number of internet name-server cache updates.')
ltmDnsCacheStatNameserverEvictions = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatNameserverEvictions.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheStatNameserverEvictions.setDescription('The number of internet name-server evictions.')
ltmDnsCacheStatKeyHits = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatKeyHits.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheStatKeyHits.setDescription('The number of DNSSEC key cache hits.')
ltmDnsCacheStatKeyMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatKeyMisses.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheStatKeyMisses.setDescription('The number of DNSSEC key cache misses.')
ltmDnsCacheStatKeyInserts = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatKeyInserts.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheStatKeyInserts.setDescription('The number of DNSSEC key cache inserts.')
ltmDnsCacheStatKeyUpdates = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatKeyUpdates.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheStatKeyUpdates.setDescription('The number of DNSSEC key cache updates.')
ltmDnsCacheStatKeyEvictions = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatKeyEvictions.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheStatKeyEvictions.setDescription('The number of DNSSEC key cache evictions.')
ltmDnsCacheStatUdpBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatUdpBytesIn.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheStatUdpBytesIn.setDescription('The number of UDP bytes received for resolution.')
ltmDnsCacheStatUdpBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatUdpBytesOut.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheStatUdpBytesOut.setDescription('The number of UDP bytes sent for resolution.')
ltmDnsCacheStatUdpPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatUdpPktsIn.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheStatUdpPktsIn.setDescription('The number of UDP packets received for resolution.')
ltmDnsCacheStatUdpPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatUdpPktsOut.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheStatUdpPktsOut.setDescription('The number of UDP packets sent for resolution.')
ltmDnsCacheStatUdpCurConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatUdpCurConns.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheStatUdpCurConns.setDescription('The number of current UDP connections for resolution.')
ltmDnsCacheStatUdpMaxConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatUdpMaxConns.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheStatUdpMaxConns.setDescription('The number of maximum UDP connections for resolution.')
ltmDnsCacheStatUdpTotConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatUdpTotConns.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheStatUdpTotConns.setDescription('The total number of UDP connections for resolution.')
ltmDnsCacheStatTcpBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatTcpBytesIn.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheStatTcpBytesIn.setDescription('The number of TCP bytes received for resolution.')
ltmDnsCacheStatTcpBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatTcpBytesOut.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheStatTcpBytesOut.setDescription('The number of TCP bytes sent for resolution.')
ltmDnsCacheStatTcpPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatTcpPktsIn.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheStatTcpPktsIn.setDescription('The number of TCP packets received for resolution.')
ltmDnsCacheStatTcpPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatTcpPktsOut.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheStatTcpPktsOut.setDescription('The number of TCP packets sent for resolution.')
ltmDnsCacheStatTcpCurConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatTcpCurConns.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheStatTcpCurConns.setDescription('The number of current TCP connections for resolution.')
ltmDnsCacheStatTcpMaxConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatTcpMaxConns.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheStatTcpMaxConns.setDescription('The number of maximum TCP connections for resolution.')
ltmDnsCacheStatTcpTotConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatTcpTotConns.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheStatTcpTotConns.setDescription('The total number of TCP connections for resolution.')
ltmDnsCacheStatUnsolicitedReplies = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 44), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatUnsolicitedReplies.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheStatUnsolicitedReplies.setDescription('The total number of replies received to queries that were never sent.')
ltmDnsCacheStatSecUnchecked = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatSecUnchecked.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheStatSecUnchecked.setDescription('The number of DNSSEC unchecked responses.')
ltmDnsCacheStatSecBogus = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 46), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatSecBogus.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheStatSecBogus.setDescription('The number of DNSSEC bogus responses.')
ltmDnsCacheStatSecIndeterminate = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 47), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatSecIndeterminate.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheStatSecIndeterminate.setDescription('The number of DNSSEC indeterminate responses.')
ltmDnsCacheStatSecInsecure = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 48), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatSecInsecure.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheStatSecInsecure.setDescription('The number of DNSSEC insecure responses.')
ltmDnsCacheStatSecSecure = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 49), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatSecSecure.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheStatSecSecure.setDescription('The number of DNSSEC secure responses.')
ltmDnsCacheStatFwdQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 50), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatFwdQueries.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheStatFwdQueries.setDescription('The total number of forward queries received.')
ltmDnsCacheStatFwdResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 51), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatFwdResponses.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheStatFwdResponses.setDescription('The total number of forward responses sent.')
ltmDnsCacheStatRpzRewrites = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 52), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatRpzRewrites.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheStatRpzRewrites.setDescription('The number of queries rewritten due to response policy.')
ltmDnsProfileStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmDnsProfileStatResetStats.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatResetStats.setDescription('The action to reset resetable statistics data in ltmDnsProfileStat. Setting this value to 1 will reset statistics data. Note, some statistics data may not be reset including data that are incremental counters.')
ltmDnsProfileStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatNumber.setDescription('The number of ltmDnsProfileStat entries in the table.')
ltmDnsProfileStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3), )
if mibBuilder.loadTexts: ltmDnsProfileStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatTable.setDescription('A table containing statistics information for DNS profiles.')
ltmDnsProfileStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatName"))
if mibBuilder.loadTexts: ltmDnsProfileStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatEntry.setDescription('Columns in the ltmDnsProfileStat Table')
ltmDnsProfileStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatName.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatName.setDescription('The name of a DNS profile.')
ltmDnsProfileStatQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatQueries.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatQueries.setDescription('The total number of DNS queries.')
ltmDnsProfileStatResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatResponses.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatResponses.setDescription('The total number of DNS responses.')
ltmDnsProfileStatResponsesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatResponsesPerSec.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatResponsesPerSec.setDescription('The average number of DNS responses per second.')
ltmDnsProfileStatToGtm = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatToGtm.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatToGtm.setDescription('The number of requests sent to GTM.')
ltmDnsProfileStatDnsExpressReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatDnsExpressReqs.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatDnsExpressReqs.setDescription('The number of DNS Express requests.')
ltmDnsProfileStatDnsExpressNotifies = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatDnsExpressNotifies.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatDnsExpressNotifies.setDescription('The number of DNS Express notifies.')
ltmDnsProfileStatToCache = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatToCache.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatToCache.setDescription('The number of requests sent to the DNS cache.')
ltmDnsProfileStatToDns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatToDns.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatToDns.setDescription('The number of requests sent to backend DNS.')
ltmDnsProfileStatDns64Reqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatDns64Reqs.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatDns64Reqs.setDescription('The number of A requests the system generated and sent.')
ltmDnsProfileStatDns64Rewrites = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatDns64Rewrites.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatDns64Rewrites.setDescription('The number of A responses translated to AAAA.')
ltmDnsProfileStatDns64Failures = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatDns64Failures.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatDns64Failures.setDescription('The number of unsuccessful AAAA requests.')
ltmDnsProfileStatHints = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatHints.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatHints.setDescription('The number of hint (Root Nameservers) responses sent.')
ltmDnsProfileStatRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatRejects.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatRejects.setDescription('The number of reject (REFUSED) responses sent.')
ltmDnsProfileStatNoErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatNoErrors.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatNoErrors.setDescription('The number of NOERROR responses sent.')
ltmDnsProfileStatDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatDrops.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatDrops.setDescription('The number of packets dropped (not sent to GTM, DNS-Express, DNSSEC, DNS64, or Backend DNS (e.g. BIND)).')
ltmDnsProfileStatMalformed = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatMalformed.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatMalformed.setDescription('The number of malformed packets received.')
ltmDnsProfileStatTclSuspends = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatTclSuspends.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatTclSuspends.setDescription('The number of TCL suspends.')
ltmDnsProfileStatRecursionDesired = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatRecursionDesired.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatRecursionDesired.setDescription('The number of queries with RD bit set.')
ltmDnsProfileStatCheckingDisabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatCheckingDisabled.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatCheckingDisabled.setDescription('The number of queries with CD bit set.')
ltmDnsProfileStatEdns0 = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatEdns0.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatEdns0.setDescription('The number of queries with EDNS0 bit set.')
ltmDnsProfileStatOpcodeQuery = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatOpcodeQuery.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatOpcodeQuery.setDescription('The number of queries whose operation code is QUERY.')
ltmDnsProfileStatOpcodeNotify = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatOpcodeNotify.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatOpcodeNotify.setDescription('The number of queries whose operation code is NOTIFY.')
ltmDnsProfileStatOpcodeUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatOpcodeUpdate.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatOpcodeUpdate.setDescription('The number of queries whose operation code is UPDATE.')
ltmDnsProfileStatZoneIxfr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatZoneIxfr.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatZoneIxfr.setDescription('The number of queries whose question type is IXFR.')
ltmDnsProfileStatZoneAxfr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatZoneAxfr.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatZoneAxfr.setDescription('The number of queries whose question type is AXFR.')
ltmDnsProfileStatAuthoritativeAnswer = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatAuthoritativeAnswer.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatAuthoritativeAnswer.setDescription('The number of responses with AA bit set.')
ltmDnsProfileStatRecursionAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatRecursionAvailable.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatRecursionAvailable.setDescription('The number of responses with RA bit set.')
ltmDnsProfileStatAuthenticatedData = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatAuthenticatedData.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatAuthenticatedData.setDescription('The number of responses with AD bit set.')
ltmDnsProfileStatTruncated = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatTruncated.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatTruncated.setDescription('The number of responses with TC bit set.')
ltmDnsProfileStatRcodeNoerror = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatRcodeNoerror.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatRcodeNoerror.setDescription('The number of responses whose return code is NOERROR.')
ltmDnsProfileStatRcodeNxdomain = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatRcodeNxdomain.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatRcodeNxdomain.setDescription('The number of responses whose return code is NXDOMAIN.')
ltmDnsProfileStatRcodeServfail = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatRcodeServfail.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatRcodeServfail.setDescription('The number of responses whose return code is SERVFAIL.')
ltmDnsProfileStatRcodeRefused = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatRcodeRefused.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatRcodeRefused.setDescription('The number of responses whose return code is REFUSED.')
ltmDnsProfileStatMalicious = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatMalicious.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatMalicious.setDescription('The number of malicious packets received.')
ltmDnsProfileStatAReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatAReqs.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatAReqs.setDescription('The number of A query packets received.')
ltmDnsProfileStatAaaaReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatAaaaReqs.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatAaaaReqs.setDescription('The number of AAAA query packets received.')
ltmDnsProfileStatAnyReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatAnyReqs.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatAnyReqs.setDescription('The number of ANY type query packets received.')
ltmDnsProfileStatCnameReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatCnameReqs.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatCnameReqs.setDescription('The number of CNAME query packets received.')
ltmDnsProfileStatMxReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatMxReqs.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatMxReqs.setDescription('The number of MX query packets received.')
ltmDnsProfileStatNsReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatNsReqs.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatNsReqs.setDescription('The number of NS query packets received.')
ltmDnsProfileStatPtrReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatPtrReqs.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatPtrReqs.setDescription('The number of PTR query packets received.')
ltmDnsProfileStatSoaReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatSoaReqs.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatSoaReqs.setDescription('The number of SOA query packets received.')
ltmDnsProfileStatSrvReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 44), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatSrvReqs.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatSrvReqs.setDescription('The number of SRV query packets received.')
ltmDnsProfileStatTxtReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatTxtReqs.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatTxtReqs.setDescription('The number of TXT query packets received.')
ltmDnsProfileStatOtherReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 46), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatOtherReqs.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatOtherReqs.setDescription('The number of uncategorized DNS packets received.')
ltmDnsProfileStatDnsEffectiveRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 47), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatDnsEffectiveRateLimit.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatDnsEffectiveRateLimit.setDescription('The DNS services effective request rate limit.')
ltmDnsProfileStatDnsConfiguredObjects = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 48), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatDnsConfiguredObjects.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatDnsConfiguredObjects.setDescription('The number of DNS services configured objects for licensing purposes.')
ltmDnsProfileStatDnsRateRejectedRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 49), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatDnsRateRejectedRequests.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatDnsRateRejectedRequests.setDescription('The number of DNS services requests rejected due to rate limiter action.')
ltmDnsProfileStatGtmEffectiveRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 50), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatGtmEffectiveRateLimit.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatGtmEffectiveRateLimit.setDescription('The GTM effective request rate limit.')
ltmDnsProfileStatGtmConfiguredObjects = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 51), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatGtmConfiguredObjects.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatGtmConfiguredObjects.setDescription('The number of GTM configured objects for licensing purposes.')
ltmDnsProfileStatGtmRateRejectedRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 52), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatGtmRateRejectedRequests.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatGtmRateRejectedRequests.setDescription('The number of GTM requests rejected due to rate limiter action.')
ltmDnsProfileStatGtmRewrites = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 53), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatGtmRewrites.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatGtmRewrites.setDescription('The number of responses modified by GTM.')
ltmDnsProfileStatOpcodeOther = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 54), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatOpcodeOther.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatOpcodeOther.setDescription('The number of queries whose operation code is uncategorized.')
ltmDnsProfileStatFastDnsQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 55), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatFastDnsQueries.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatFastDnsQueries.setDescription('The number of queries handled by DNS Rapid Response.')
ltmDnsProfileStatFastDnsResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 56), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatFastDnsResponses.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatFastDnsResponses.setDescription('The number of responses returned by DNS Rapid Response.')
ltmDnsProfileStatFastDnsAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 57), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatFastDnsAllowed.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatFastDnsAllowed.setDescription('The number of non-matched queries passing through DNS Rapid Response.')
ltmDnsProfileStatFastDnsDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 58), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatFastDnsDrops.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatFastDnsDrops.setDescription('The number of non-matching queries dropped by DNS Rapid Response.')
ltmDnsProfileStatFastDnsRespTc = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 59), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatFastDnsRespTc.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatFastDnsRespTc.setDescription('The number of non-matching queries resulting in a truncated response by DNS Rapid Response.')
ltmDnsProfileStatFastDnsRespNx = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 60), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatFastDnsRespNx.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatFastDnsRespNx.setDescription('The number of non-matching queries resulting in a NXDOMAIN response by DNS Rapid Response.')
ltmDnsProfileStatFastDnsRespNe = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 61), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatFastDnsRespNe.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatFastDnsRespNe.setDescription('The number of non-matching queries resulting in a No-Data response by DNS Rapid Response.')
ltmDnsProfileStatFastDnsRespRf = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 62), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatFastDnsRespRf.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatFastDnsRespRf.setDescription('The number of non-matching queries resulting in a REFUSED response by DNS Rapid Response.')
ltmDosProfileNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosProfileNumber.setStatus('current')
if mibBuilder.loadTexts: ltmDosProfileNumber.setDescription('The number of ltmDosProfile entries in the table.')
ltmDosProfileTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 1, 2), )
if mibBuilder.loadTexts: ltmDosProfileTable.setStatus('current')
if mibBuilder.loadTexts: ltmDosProfileTable.setDescription('A table containing information of DoS profile.')
ltmDosProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmDosProfileName"))
if mibBuilder.loadTexts: ltmDosProfileEntry.setStatus('current')
if mibBuilder.loadTexts: ltmDosProfileEntry.setDescription('Columns in the ltmDosProfile Table')
ltmDosProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosProfileName.setStatus('current')
if mibBuilder.loadTexts: ltmDosProfileName.setDescription('The name of a DoS profile.')
ltmDosProfileConfigSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("usercfg", 0), ("basecfg", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosProfileConfigSource.setStatus('current')
if mibBuilder.loadTexts: ltmDosProfileConfigSource.setDescription('The state that specifies whether this is a base/pre-configured profile or user defined profile.')
ltmDosProfileDefaultName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 1, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosProfileDefaultName.setStatus('current')
if mibBuilder.loadTexts: ltmDosProfileDefaultName.setDescription('The name of the profile from which the specified profile derives its attribute default values.')
ltmDosApplicationNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationNumber.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationNumber.setDescription('The number of ltmDosApplication entries in the table.')
ltmDosApplicationTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2), )
if mibBuilder.loadTexts: ltmDosApplicationTable.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationTable.setDescription('A table containing information of DoS profile Application Security.')
ltmDosApplicationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmDosApplicationProfileName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmDosApplicationName"))
if mibBuilder.loadTexts: ltmDosApplicationEntry.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationEntry.setDescription('Columns in the ltmDosApplication Table')
ltmDosApplicationProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationProfileName.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationProfileName.setDescription('The name of a DoS profile.')
ltmDosApplicationName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationName.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationName.setDescription('The dummy name of enabled Application Security on this profile.')
ltmDosApplicationTriggerIrule = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationTriggerIrule.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationTriggerIrule.setDescription('The state indicating whether Application DoS iRule event is triggered or not.')
ltmDosApplicationTpsBasedMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("off", 0), ("transparent", 1), ("blocking", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationTpsBasedMode.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationTpsBasedMode.setDescription('The operation mode of TPS-based anomaly detection .')
ltmDosApplicationLatencyBasedMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("off", 0), ("transparent", 1), ("blocking", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationLatencyBasedMode.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationLatencyBasedMode.setDescription('The operation mode of Latency-based anomaly detection.')
ltmDosApplicationTpsBasedIpClientSideDefense = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationTpsBasedIpClientSideDefense.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationTpsBasedIpClientSideDefense.setDescription('The state indicating whether Source IP-based client side integrity defense in TPS-based anomaly is enabled or not.')
ltmDosApplicationTpsBasedUrlClientSideDefense = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationTpsBasedUrlClientSideDefense.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationTpsBasedUrlClientSideDefense.setDescription('The state indicating whether URL-based client side integrity defense in TPS-based anomaly is enabled or not.')
ltmDosApplicationTpsBasedIpRateLimiting = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationTpsBasedIpRateLimiting.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationTpsBasedIpRateLimiting.setDescription('The state indicating whether Source IP-based rate limiting in TPS-based anomaly is enabled or not.')
ltmDosApplicationTpsBasedUrlRateLimiting = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationTpsBasedUrlRateLimiting.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationTpsBasedUrlRateLimiting.setDescription('The state indicating whether URL-based rate limiting in TPS-based anomaly is enabled or not.')
ltmDosApplicationTpsBasedIpTpsIncreaseRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationTpsBasedIpTpsIncreaseRate.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationTpsBasedIpTpsIncreaseRate.setDescription('The value that specifies the percentage by which TPS increased in IP detection criteria of TPS-based anomaly. It is only used when Source IP-based client side integrity defense and/or rate limiting are enabled in TPS-based anomaly, otherwise ignored.')
ltmDosApplicationTpsBasedIpMaximumTps = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationTpsBasedIpMaximumTps.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationTpsBasedIpMaximumTps.setDescription('The value that specifies the amount which TPS reached in IP detection criteria of TPS-based anomaly. It is only used when Source IP-based client side integrity defense and/or rate limiting are enabled in TPS-based anomaly, otherwise ignored.')
ltmDosApplicationTpsBasedIpMinimumTps = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationTpsBasedIpMinimumTps.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationTpsBasedIpMinimumTps.setDescription('The value that specifies the minimum TPS threshold for detection in IP detection criteria of TPS-based anomaly. It is only used when Source IP-based client side integrity defense and/or rate limiting are enabled in TPS-based anomaly, otherwise ignored.')
ltmDosApplicationTpsBasedUrlTpsIncreaseRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationTpsBasedUrlTpsIncreaseRate.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationTpsBasedUrlTpsIncreaseRate.setDescription('The value that specifies the percentage by which TPS increased in URL detection criteria of TPS-based anomaly. It is only used when URL-based client side integrity defense and/or rate limiting are enabled in TPS-based anomaly, otherwise ignored.')
ltmDosApplicationTpsBasedUrlMaximumTps = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationTpsBasedUrlMaximumTps.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationTpsBasedUrlMaximumTps.setDescription('The value that specifies the amount which TPS reached in URL detection criteria of TPS-based anomaly. It is only used when URL-based client side integrity defense and/or rate limiting are enabled in TPS-based anomaly, otherwise ignored.')
ltmDosApplicationTpsBasedUrlMinimumTps = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationTpsBasedUrlMinimumTps.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationTpsBasedUrlMinimumTps.setDescription('The value that specifies the minimum TPS threshold for detection in URL detection criteria of TPS-based anomaly. It is only used when URL-based client side integrity defense and/or rate limiting are enabled in TPS-based anomaly, otherwise ignored.')
ltmDosApplicationTpsBasedMaximumPreventionDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationTpsBasedMaximumPreventionDuration.setStatus('deprecated')
if mibBuilder.loadTexts: ltmDosApplicationTpsBasedMaximumPreventionDuration.setDescription('Deprecated! Replaced by ltmDosApplicationTpsBasedEscalationPeriod and ltmDosApplicationTpsBasedDeescalationPeriod. The value that specifies the maximum prevention duration (in seconds) in TPS-based anomaly. 0 for unlimited.')
ltmDosApplicationLatencyIncreaseRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationLatencyIncreaseRate.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationLatencyIncreaseRate.setDescription('The value that specifies the percentage by which latency increased in detection criteria of Latency-based anomaly.')
ltmDosApplicationMaximumLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationMaximumLatency.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationMaximumLatency.setDescription('The value that specifies the amount which latency reached (in milliseconds) in detection criteria of Latency-based anomaly.')
ltmDosApplicationMinimumLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationMinimumLatency.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationMinimumLatency.setDescription('The value that specifies the minimum latency threshold for detection (in milliseconds) in detection criteria of Latency-based anomaly.')
ltmDosApplicationLatencyBasedIpClientSideDefense = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationLatencyBasedIpClientSideDefense.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationLatencyBasedIpClientSideDefense.setDescription('The state indicating whether Source IP-based client side integrity defense in Latency-based anomaly is enabled or not.')
ltmDosApplicationLatencyBasedUrlClientSideDefense = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationLatencyBasedUrlClientSideDefense.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationLatencyBasedUrlClientSideDefense.setDescription('The state indicating whether URL-based client side integrity defense in Latency-based anomaly is enabled or not.')
ltmDosApplicationLatencyBasedIpRateLimiting = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationLatencyBasedIpRateLimiting.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationLatencyBasedIpRateLimiting.setDescription('The state indicating whether Source IP-based rate limiting in Latency-based anomaly is enabled or not.')
ltmDosApplicationLatencyBasedUrlRateLimiting = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationLatencyBasedUrlRateLimiting.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationLatencyBasedUrlRateLimiting.setDescription('The state indicating whether URL-based rate limiting in Latency-based anomaly is enabled or not.')
ltmDosApplicationLatencyBasedIpTpsIncreaseRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationLatencyBasedIpTpsIncreaseRate.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationLatencyBasedIpTpsIncreaseRate.setDescription('The value that specifies the percentage by which TPS increased in suspicious IP criteria of Latency-based anomaly. It is only used when Source IP-based client side integrity defense and/or rate limiting are enabled in Latency-based anomaly, otherwise ignored.')
ltmDosApplicationLatencyBasedIpMaximumTps = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationLatencyBasedIpMaximumTps.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationLatencyBasedIpMaximumTps.setDescription('The value that specifies the amount which TPS reached in suspicious IP criteria of Latency-based anomaly. It is only used when Source IP-based client side integrity defense and/or rate limiting are enabled in Latency-based anomaly, otherwise ignored.')
ltmDosApplicationLatencyBasedIpMinimumTps = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationLatencyBasedIpMinimumTps.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationLatencyBasedIpMinimumTps.setDescription('The value that specifies the minimum TPS threshold for detection in suspicious IP criteria of Latency-based anomaly. It is only used when Source IP-based client side integrity defense and/or rate limiting are enabled in Latency-based anomaly, otherwise ignored.')
ltmDosApplicationLatencyBasedUrlTpsIncreaseRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationLatencyBasedUrlTpsIncreaseRate.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationLatencyBasedUrlTpsIncreaseRate.setDescription('The value that specifies the percentage by which TPS increased in suspicious URL criteria of Latency-based anomaly. It is only used when URL-based client side integrity defense and/or rate limiting are enabled in Latency-based anomaly, otherwise ignored.')
ltmDosApplicationLatencyBasedUrlMaximumTps = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationLatencyBasedUrlMaximumTps.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationLatencyBasedUrlMaximumTps.setDescription('The value that specifies the amount which TPS reached in suspicious URL criteria of Latency-based anomaly. It is only used when URL-based client side integrity defense and/or rate limiting are enabled in Latency-based anomaly, otherwise ignored.')
ltmDosApplicationLatencyBasedUrlMinimumTps = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationLatencyBasedUrlMinimumTps.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationLatencyBasedUrlMinimumTps.setDescription('The value that specifies the minimum TPS threshold for detection in suspicious URL criteria of Latency-based anomaly. It is only used when URL-based client side integrity defense and/or rate limiting are enabled in Latency-based anomaly, otherwise ignored.')
ltmDosApplicationLatencyBasedMaximumPreventionDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationLatencyBasedMaximumPreventionDuration.setStatus('deprecated')
if mibBuilder.loadTexts: ltmDosApplicationLatencyBasedMaximumPreventionDuration.setDescription('Deprecated! Replaced by ltmDosApplicationLatencyBasedEscalationPeriod and ltmDosApplicationLatencyBasedDeescalationPeriod. The value that specifies the maximum prevention duration (in seconds) in Latency-based anomaly. 0 for unlimited.')
ltmDosApplicationTpsBasedSiteClientSideDefense = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationTpsBasedSiteClientSideDefense.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationTpsBasedSiteClientSideDefense.setDescription('The state indicating whether Site-wide client side integrity defense in TPS-based anomaly is enabled or not.')
ltmDosApplicationTpsBasedSiteRateLimiting = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationTpsBasedSiteRateLimiting.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationTpsBasedSiteRateLimiting.setDescription('The state indicating whether Site-wide rate limiting in TPS-based anomaly is enabled or not.')
ltmDosApplicationTpsBasedSiteTpsIncreaseRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationTpsBasedSiteTpsIncreaseRate.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationTpsBasedSiteTpsIncreaseRate.setDescription('The value that specifies the percentage by which TPS increased in Site-wide detection criteria of TPS-based anomaly. It is only used when Site-wide client side integrity defense and/or rate limiting are enabled in TPS-based anomaly, otherwise ignored.')
ltmDosApplicationTpsBasedSiteMaximumTps = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationTpsBasedSiteMaximumTps.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationTpsBasedSiteMaximumTps.setDescription('The value that specifies the amount which TPS reached in Site-wide detection criteria of TPS-based anomaly. It is only used when Site-wide client side integrity defense and/or rate limiting are enabled in TPS-based anomaly, otherwise ignored.')
ltmDosApplicationTpsBasedSiteMinimumTps = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationTpsBasedSiteMinimumTps.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationTpsBasedSiteMinimumTps.setDescription('The value that specifies the minimum TPS threshold for detection in Site-wide detection criteria of TPS-based anomaly. It is only used when Site-wide client side integrity defense and/or rate limiting are enabled in TPS-based anomaly, otherwise ignored.')
ltmDosApplicationTpsBasedEscalationPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationTpsBasedEscalationPeriod.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationTpsBasedEscalationPeriod.setDescription('The value that specifies the escalation period (in seconds) in TPS-based anomaly.')
ltmDosApplicationTpsBasedDeEscalationPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationTpsBasedDeEscalationPeriod.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationTpsBasedDeEscalationPeriod.setDescription('The value that specifies the de-escalation period (in seconds) in TPS-based anomaly.')
ltmDosApplicationLatencyBasedSiteClientSideDefense = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationLatencyBasedSiteClientSideDefense.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationLatencyBasedSiteClientSideDefense.setDescription('The state indicating whether Site-wide client side integrity defense in Latency-based anomaly is enabled or not.')
ltmDosApplicationLatencyBasedSiteRateLimiting = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationLatencyBasedSiteRateLimiting.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationLatencyBasedSiteRateLimiting.setDescription('The state indicating whether Site-wide rate limiting in Latency-based anomaly is enabled or not.')
ltmDosApplicationLatencyBasedSiteTpsIncreaseRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationLatencyBasedSiteTpsIncreaseRate.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationLatencyBasedSiteTpsIncreaseRate.setDescription('The value that specifies the percentage by which TPS increased in suspicious Site-wide criteria of Latency-based anomaly. It is only used when Site-wide client side integrity defense and/or rate limiting are enabled in Latency-based anomaly, otherwise ignored.')
ltmDosApplicationLatencyBasedSiteMaximumTps = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationLatencyBasedSiteMaximumTps.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationLatencyBasedSiteMaximumTps.setDescription('The value that specifies the amount which TPS reached in suspicious Site-wide criteria of Latency-based anomaly. It is only used when Site-wide client side integrity defense and/or rate limiting are enabled in Latency-based anomaly, otherwise ignored.')
ltmDosApplicationLatencyBasedSiteMinimumTps = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationLatencyBasedSiteMinimumTps.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationLatencyBasedSiteMinimumTps.setDescription('The value that specifies the minimum TPS threshold for detection in suspicious Site-wide criteria of Latency-based anomaly. It is only used when Site-wide client side integrity defense and/or rate limiting are enabled in Latency-based anomaly, otherwise ignored.')
ltmDosApplicationLatencyBasedEscalationPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationLatencyBasedEscalationPeriod.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationLatencyBasedEscalationPeriod.setDescription('The value that specifies the escalation period (in seconds) in Latency-based anomaly.')
ltmDosApplicationLatencyBasedDeEscalationPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationLatencyBasedDeEscalationPeriod.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationLatencyBasedDeEscalationPeriod.setDescription('The value that specifies the de-escalation period (in seconds) in Latency-based anomaly.')
ltmDosApplicationHeavyUrlProtection = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationHeavyUrlProtection.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationHeavyUrlProtection.setDescription('The state indicating whether heavy URL protection is enabled or not.')
ltmDosApplicationHeavyUrlAutomaticDetection = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationHeavyUrlAutomaticDetection.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationHeavyUrlAutomaticDetection.setDescription('The state indicating whether automatic heavy URL detection is enabled or not.')
ltmDosApplicationHeavyUrlLatencyThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 47), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationHeavyUrlLatencyThreshold.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationHeavyUrlLatencyThreshold.setDescription('The value that specifies the latency threshold for automatic heavy URL detection (in milliseconds).')
ltmDosWhiteIpNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosWhiteIpNumber.setStatus('current')
if mibBuilder.loadTexts: ltmDosWhiteIpNumber.setDescription('The number of ltmDosWhiteIp entries in the table.')
ltmDosWhiteIpTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 3, 2), )
if mibBuilder.loadTexts: ltmDosWhiteIpTable.setStatus('current')
if mibBuilder.loadTexts: ltmDosWhiteIpTable.setDescription('A table containing information of DoS profile Application Security IP address whitelist.')
ltmDosWhiteIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 3, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmDosWhiteIpParentProfile"), (0, "F5-BIGIP-LOCAL-MIB", "ltmDosWhiteIpParentName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmDosWhiteIpAddressType"), (0, "F5-BIGIP-LOCAL-MIB", "ltmDosWhiteIpAddress"), (0, "F5-BIGIP-LOCAL-MIB", "ltmDosWhiteIpNetmaskType"), (0, "F5-BIGIP-LOCAL-MIB", "ltmDosWhiteIpNetmask"))
if mibBuilder.loadTexts: ltmDosWhiteIpEntry.setStatus('current')
if mibBuilder.loadTexts: ltmDosWhiteIpEntry.setDescription('Columns in the ltmDosWhiteIp Table')
ltmDosWhiteIpParentProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 3, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosWhiteIpParentProfile.setStatus('current')
if mibBuilder.loadTexts: ltmDosWhiteIpParentProfile.setDescription('The name of a DoS profile.')
ltmDosWhiteIpParentName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 3, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosWhiteIpParentName.setStatus('current')
if mibBuilder.loadTexts: ltmDosWhiteIpParentName.setDescription('The dummy name of enabled Application Security on this profile.')
ltmDosWhiteIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 3, 2, 1, 3), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosWhiteIpAddressType.setStatus('current')
if mibBuilder.loadTexts: ltmDosWhiteIpAddressType.setDescription('The IP address type of ltmDosWhiteIpAddress')
ltmDosWhiteIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 3, 2, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosWhiteIpAddress.setStatus('current')
if mibBuilder.loadTexts: ltmDosWhiteIpAddress.setDescription('The IP address in the whitelist of the specified DoS profile with Application Security. It is interpreted within the context of a ltmDosWhiteIpAddressType value.')
ltmDosWhiteIpNetmaskType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 3, 2, 1, 5), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosWhiteIpNetmaskType.setStatus('current')
if mibBuilder.loadTexts: ltmDosWhiteIpNetmaskType.setDescription('The IP address type of ltmDosWhiteIpNetmask')
ltmDosWhiteIpNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 3, 2, 1, 6), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosWhiteIpNetmask.setStatus('current')
if mibBuilder.loadTexts: ltmDosWhiteIpNetmask.setDescription('The subnet mask associated with the specified Application DoS profile whitelist IP address. It is interpreted within the context of a ltmDosWhiteIpNetmaskType value.')
ltmDnsSecurityNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsSecurityNumber.setStatus('current')
if mibBuilder.loadTexts: ltmDnsSecurityNumber.setDescription('The number of ltmDnsSecurity entries in the table.')
ltmDnsSecurityTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 3, 2), )
if mibBuilder.loadTexts: ltmDnsSecurityTable.setStatus('current')
if mibBuilder.loadTexts: ltmDnsSecurityTable.setDescription('A table containing information of DNS security.')
ltmDnsSecurityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 3, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmDnsSecurityName"))
if mibBuilder.loadTexts: ltmDnsSecurityEntry.setStatus('current')
if mibBuilder.loadTexts: ltmDnsSecurityEntry.setDescription('Columns in the ltmDnsSecurity Table')
ltmDnsSecurityName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 3, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsSecurityName.setStatus('current')
if mibBuilder.loadTexts: ltmDnsSecurityName.setDescription('The name of DNS security profile.')
ltmDnsSecurityQueryTypeInclusion = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsSecurityQueryTypeInclusion.setStatus('current')
if mibBuilder.loadTexts: ltmDnsSecurityQueryTypeInclusion.setDescription('The state indicating whether or not the query type filter is an enable (inclusion) or a disable (exclusion) list. Value 0 (no) implies disable and 1 (yes) is enable.')
ltmDnsSecurityStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 4, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmDnsSecurityStatResetStats.setStatus('current')
if mibBuilder.loadTexts: ltmDnsSecurityStatResetStats.setDescription('The action to reset resetable statistics data in ltmDnsSecurityStat. Setting this value to 1 will reset statistics data. Note, some statistics data may not be reset including data that are incremental counters.')
ltmDnsSecurityStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsSecurityStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmDnsSecurityStatNumber.setDescription('The number of ltmDnsSecurityStat entries in the table.')
ltmDnsSecurityStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 4, 3), )
if mibBuilder.loadTexts: ltmDnsSecurityStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmDnsSecurityStatTable.setDescription('A table containing statistics information of DNS security.')
ltmDnsSecurityStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 4, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmDnsSecurityStatName"))
if mibBuilder.loadTexts: ltmDnsSecurityStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmDnsSecurityStatEntry.setDescription('Columns in the ltmDnsSecurityStat Table')
ltmDnsSecurityStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 4, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsSecurityStatName.setStatus('current')
if mibBuilder.loadTexts: ltmDnsSecurityStatName.setDescription('The name of DNS security profile.')
ltmDnsSecurityStatFilteredDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 4, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsSecurityStatFilteredDrops.setStatus('current')
if mibBuilder.loadTexts: ltmDnsSecurityStatFilteredDrops.setDescription('The total number of dropped DNS packets due to filtering.')
ltmDnsSecurityStatADrops = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 4, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsSecurityStatADrops.setStatus('current')
if mibBuilder.loadTexts: ltmDnsSecurityStatADrops.setDescription('The total number of dropped A packets due to filtering.')
ltmDnsSecurityStatAaaaDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 4, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsSecurityStatAaaaDrops.setStatus('current')
if mibBuilder.loadTexts: ltmDnsSecurityStatAaaaDrops.setDescription('The total number of dropped AAAA packets due to filtering.')
ltmDnsSecurityStatAnyDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 4, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsSecurityStatAnyDrops.setStatus('current')
if mibBuilder.loadTexts: ltmDnsSecurityStatAnyDrops.setDescription('The total number of dropped ANY packets due to filtering.')
ltmDnsSecurityStatCnameDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 4, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsSecurityStatCnameDrops.setStatus('current')
if mibBuilder.loadTexts: ltmDnsSecurityStatCnameDrops.setDescription('The total number of dropped CNAME packets due to filtering.')
ltmDnsSecurityStatMxDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 4, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsSecurityStatMxDrops.setStatus('current')
if mibBuilder.loadTexts: ltmDnsSecurityStatMxDrops.setDescription('The total number of dropped MX packets due to filtering.')
ltmDnsSecurityStatNsDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 4, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsSecurityStatNsDrops.setStatus('current')
if mibBuilder.loadTexts: ltmDnsSecurityStatNsDrops.setDescription('The total number of dropped NS packets due to filtering.')
ltmDnsSecurityStatPtrDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 4, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsSecurityStatPtrDrops.setStatus('current')
if mibBuilder.loadTexts: ltmDnsSecurityStatPtrDrops.setDescription('The total number of dropped PTR packets due to filtering.')
ltmDnsSecurityStatSoaDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 4, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsSecurityStatSoaDrops.setStatus('current')
if mibBuilder.loadTexts: ltmDnsSecurityStatSoaDrops.setDescription('The total number of dropped SOA packets due to filtering.')
ltmDnsSecurityStatSrvDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 4, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsSecurityStatSrvDrops.setStatus('current')
if mibBuilder.loadTexts: ltmDnsSecurityStatSrvDrops.setDescription('The total number of dropped SRV packets due to filtering.')
ltmDnsSecurityStatTxtDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 4, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsSecurityStatTxtDrops.setStatus('current')
if mibBuilder.loadTexts: ltmDnsSecurityStatTxtDrops.setDescription('The total number of dropped TXT packets due to filtering.')
ltmDnsSecurityStatOtherDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 4, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsSecurityStatOtherDrops.setStatus('current')
if mibBuilder.loadTexts: ltmDnsSecurityStatOtherDrops.setDescription('The total number of dropped OTHER packets due to filtering.')
ltmBwcPolicyStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 13, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmBwcPolicyStatResetStats.setStatus('current')
if mibBuilder.loadTexts: ltmBwcPolicyStatResetStats.setDescription('The action to reset resetable statistics data in ltmBwcPolicyStat. Setting this value to 1 will reset statistics data. Note, some statistics data may not be reset including data that are incremental counters.')
ltmBwcPolicyStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 13, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmBwcPolicyStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmBwcPolicyStatNumber.setDescription('The number of ltmBwcPolicyStat entries in the table.')
ltmBwcPolicyStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 13, 1, 3), )
if mibBuilder.loadTexts: ltmBwcPolicyStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmBwcPolicyStatTable.setDescription('A table containing statistics information of BWC policy.')
ltmBwcPolicyStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 13, 1, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmBwcPolicyStatName"))
if mibBuilder.loadTexts: ltmBwcPolicyStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmBwcPolicyStatEntry.setDescription('Columns in the ltmBwcPolicyStat Table')
ltmBwcPolicyStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 13, 1, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmBwcPolicyStatName.setStatus('current')
if mibBuilder.loadTexts: ltmBwcPolicyStatName.setDescription('The name of BWC policy that is configured. There are many types of BWC policies. This name is string upto max of string name of policy.')
ltmBwcPolicyStatBytesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 13, 1, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmBwcPolicyStatBytesPerSec.setStatus('current')
if mibBuilder.loadTexts: ltmBwcPolicyStatBytesPerSec.setDescription('The average input bytes/sec over last 4 seconds. These are bytes as processed by this policy.')
ltmBwcPolicyStatBytesPerSecOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 13, 1, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmBwcPolicyStatBytesPerSecOut.setStatus('current')
if mibBuilder.loadTexts: ltmBwcPolicyStatBytesPerSecOut.setDescription('The average output bytes/sec over last 4 seconds. These are bytes processed by this policy.')
ltmBwcPolicyStatBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 13, 1, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmBwcPolicyStatBytesIn.setStatus('current')
if mibBuilder.loadTexts: ltmBwcPolicyStatBytesIn.setDescription('The number of bytes ingress. These are bytes ingress to policy before being processed by policy.')
ltmBwcPolicyStatBytesPassed = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 13, 1, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmBwcPolicyStatBytesPassed.setStatus('current')
if mibBuilder.loadTexts: ltmBwcPolicyStatBytesPassed.setDescription('The number of bytes passed. These are bytes processed by the policy.')
ltmBwcPolicyStatBytesDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 13, 1, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmBwcPolicyStatBytesDropped.setStatus('current')
if mibBuilder.loadTexts: ltmBwcPolicyStatBytesDropped.setDescription('The number of bytes dropped. These are bytes dropped by the policy.')
ltmBwcPolicyStatPacketsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 13, 1, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmBwcPolicyStatPacketsIn.setStatus('current')
if mibBuilder.loadTexts: ltmBwcPolicyStatPacketsIn.setDescription('The number of packets ingress. These are packets input to the policy processing.')
ltmBwcPolicyStatPacketsPassed = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 13, 1, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmBwcPolicyStatPacketsPassed.setStatus('current')
if mibBuilder.loadTexts: ltmBwcPolicyStatPacketsPassed.setDescription('The number of packets passed. These are packets passed by the policy.')
ltmBwcPolicyStatActivePolicies = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 13, 1, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmBwcPolicyStatActivePolicies.setStatus('current')
if mibBuilder.loadTexts: ltmBwcPolicyStatActivePolicies.setDescription('The number of current policies. This is active number of current policies in system.')
ltmBwcPolicyStatInactivePolicies = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 13, 1, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmBwcPolicyStatInactivePolicies.setStatus('current')
if mibBuilder.loadTexts: ltmBwcPolicyStatInactivePolicies.setDescription('The number of inactive policies created. This is inactive number of policies in the system.')
ltmBwcPolicyStatTotalPolicies = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 13, 1, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmBwcPolicyStatTotalPolicies.setStatus('current')
if mibBuilder.loadTexts: ltmBwcPolicyStatTotalPolicies.setDescription('The number of total policies created. This is total number of policies in system.')
ltmBwcPolicyStatTimeDataCollected = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 13, 1, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmBwcPolicyStatTimeDataCollected.setStatus('current')
if mibBuilder.loadTexts: ltmBwcPolicyStatTimeDataCollected.setDescription('The time since start in seconds. This is the time since the stats information has been collected.')
ltmDnsQueryFilterNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsQueryFilterNumber.setStatus('current')
if mibBuilder.loadTexts: ltmDnsQueryFilterNumber.setDescription('The number of ltmDnsQueryFilter entries in the table.')
ltmDnsQueryFilterTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 5, 2), )
if mibBuilder.loadTexts: ltmDnsQueryFilterTable.setStatus('current')
if mibBuilder.loadTexts: ltmDnsQueryFilterTable.setDescription('A table containing information of DNS query type filtering.')
ltmDnsQueryFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 5, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmDnsQueryFilterName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmDnsQueryFilterIndex"))
if mibBuilder.loadTexts: ltmDnsQueryFilterEntry.setStatus('current')
if mibBuilder.loadTexts: ltmDnsQueryFilterEntry.setDescription('Columns in the ltmDnsQueryFilter Table')
ltmDnsQueryFilterName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 5, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsQueryFilterName.setStatus('current')
if mibBuilder.loadTexts: ltmDnsQueryFilterName.setDescription('The name of a DNS security profile.')
ltmDnsQueryFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsQueryFilterIndex.setStatus('current')
if mibBuilder.loadTexts: ltmDnsQueryFilterIndex.setDescription('The index of DNS query type filter for the specified DNS security profile.')
ltmDnsQueryFilterType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 249, 250, 251, 252, 253, 254, 255, 256, 65536))).clone(namedValues=NamedValues(("invalid", 0), ("a", 1), ("ns", 2), ("md", 3), ("mf", 4), ("cname", 5), ("soa", 6), ("mb", 7), ("mg", 8), ("mr", 9), ("null", 10), ("wks", 11), ("ptr", 12), ("hinfo", 13), ("minfo", 14), ("mx", 15), ("txt", 16), ("rp", 17), ("afsdb", 18), ("x25", 19), ("isdn", 20), ("rt", 21), ("nsap", 22), ("nsap-ptr", 23), ("sg", 24), ("key", 25), ("px", 26), ("gpos", 27), ("aaaa", 28), ("loc", 29), ("nxt", 30), ("eid", 31), ("nimloc", 32), ("srv", 33), ("atma", 34), ("naptr", 35), ("kx", 36), ("cert", 37), ("a6", 38), ("dname", 39), ("sink", 40), ("opt", 41), ("tkey", 249), ("tsig", 250), ("ixfr", 251), ("axfr", 252), ("mailb", 253), ("maila", 254), ("any", 255), ("zxfr", 256), ("max", 65536)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsQueryFilterType.setStatus('current')
if mibBuilder.loadTexts: ltmDnsQueryFilterType.setDescription('The DNS query type value that is either included or excluded depending on the query_type_inclusion flag. Value 0 (no) implies disable (exclusion) and 1 (yes) is enable (inclusion).')
ltmDnsHeaderFilterNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsHeaderFilterNumber.setStatus('current')
if mibBuilder.loadTexts: ltmDnsHeaderFilterNumber.setDescription('The number of ltmDnsHeaderFilter entries in the table.')
ltmDnsHeaderFilterTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 6, 2), )
if mibBuilder.loadTexts: ltmDnsHeaderFilterTable.setStatus('current')
if mibBuilder.loadTexts: ltmDnsHeaderFilterTable.setDescription('A table containing information of DNS header opcode filtering.')
ltmDnsHeaderFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 6, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmDnsHeaderFilterName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmDnsHeaderFilterIndex"))
if mibBuilder.loadTexts: ltmDnsHeaderFilterEntry.setStatus('current')
if mibBuilder.loadTexts: ltmDnsHeaderFilterEntry.setDescription('Columns in the ltmDnsHeaderFilter Table')
ltmDnsHeaderFilterName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 6, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsHeaderFilterName.setStatus('current')
if mibBuilder.loadTexts: ltmDnsHeaderFilterName.setDescription('The name of a DNS security profile.')
ltmDnsHeaderFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsHeaderFilterIndex.setStatus('current')
if mibBuilder.loadTexts: ltmDnsHeaderFilterIndex.setDescription('The index of DNS header opcode exclusion for the specified DNS security profile.')
ltmDnsHeaderFilterOpcodeExclusion = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4, 5))).clone(namedValues=NamedValues(("query", 0), ("iquery", 1), ("status", 2), ("notify", 4), ("update", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsHeaderFilterOpcodeExclusion.setStatus('current')
if mibBuilder.loadTexts: ltmDnsHeaderFilterOpcodeExclusion.setDescription('The DNS header opcode values. Value of 3 is not used.')
ltmLsnPrefixNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPrefixNumber.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPrefixNumber.setDescription('The number of ltmLsnPrefix entries in the table.')
ltmLsnPrefixTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 1, 2), )
if mibBuilder.loadTexts: ltmLsnPrefixTable.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPrefixTable.setDescription('A table containing information of LSN prefix.')
ltmLsnPrefixEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmLsnPrefixName"))
if mibBuilder.loadTexts: ltmLsnPrefixEntry.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPrefixEntry.setDescription('Columns in the ltmLsnPrefix Table')
ltmLsnPrefixName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPrefixName.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPrefixName.setDescription('The name of a LSN prefix node.')
ltmLsnPrefixAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 1, 2, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPrefixAddrType.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPrefixAddrType.setDescription('The IP address type of ltmLsnPrefixAddr.')
ltmLsnPrefixAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 1, 2, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPrefixAddr.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPrefixAddr.setDescription('The IP address of a node. It is interpreted within the context of a ltmLsnPrefixAddrType value.')
ltmLsnPoolNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolNumber.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolNumber.setDescription('The number of ltmLsnPool entries in the table.')
ltmLsnPoolTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 2, 2), )
if mibBuilder.loadTexts: ltmLsnPoolTable.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolTable.setDescription('A table containing information of LSN pool.')
ltmLsnPoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 2, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmLsnPoolName"))
if mibBuilder.loadTexts: ltmLsnPoolEntry.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolEntry.setDescription('Columns in the ltmLsnPool Table')
ltmLsnPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 2, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolName.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolName.setDescription('The name of a LSN Pool.')
ltmLsnPoolMemberCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolMemberCount.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolMemberCount.setDescription('The total number of members in the specified pool.')
ltmLsnPoolRouteAdvertisement = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolRouteAdvertisement.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolRouteAdvertisement.setDescription('Specifies whether route advertisement is enabled or disabled for translated IP addresses.')
ltmLsnPoolMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("napt", 0), ("pba", 1), ("deterministic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolMode.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolMode.setDescription('NAPT mode provides standard address and port translation allowing multiple clients to share the same external address. Deterministic mode provides address and port translations that can be consistently reversed so that external address and port combinations can identify specific clients.')
ltmLsnPoolPersistenceMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("address", 1), ("addressPort", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolPersistenceMode.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolPersistenceMode.setDescription('Persistence settings for LSN translation entries. none: Specifies that there is no persistence for the translation. address: Specifies that the translation reuses the port mapping for subsequent packets sent from the same internal IP address and port to the same external IP address while the mapping is still active, regardless of the external port. addressPort: Specifies that the translation reuses the port mapping for subsequent packets sent from the same internal IP address and port to the same external IP address and port while the mapping is still active.')
ltmLsnPoolPersistenceTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 2, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolPersistenceTimeout.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolPersistenceTimeout.setDescription('Maximum time-to-live for inactive translation entries.')
ltmLsnPoolPersistencePrefixLengthIpv4 = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 2, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolPersistencePrefixLengthIpv4.setStatus('deprecated')
if mibBuilder.loadTexts: ltmLsnPoolPersistencePrefixLengthIpv4.setDescription('Deprecated! This field is removed. Number of significant bits in the client IPv4 address to be used as the persistence key.')
ltmLsnPoolPersistencePrefixLengthIpv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 2, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolPersistencePrefixLengthIpv6.setStatus('deprecated')
if mibBuilder.loadTexts: ltmLsnPoolPersistencePrefixLengthIpv6.setDescription('Deprecated! This field is removed. Number of significant bits in the client IPv6 address to be used as the persistence key.')
ltmLsnPoolInboundConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("automatic", 1), ("explicit", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolInboundConnections.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolInboundConnections.setDescription('If true, will enable inbound connections to translation addresses and ports.')
ltmLsnPoolIcmpEcho = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolIcmpEcho.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolIcmpEcho.setDescription('If true, will enable icmp-echo requests for translation addresses.')
ltmLsnPoolTranslationPortRangeLow = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 2, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolTranslationPortRangeLow.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolTranslationPortRangeLow.setDescription('Specifies the low end of the range of port numbers available for use with translation IP addresses.')
ltmLsnPoolTranslationPortRangeHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 2, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolTranslationPortRangeHigh.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolTranslationPortRangeHigh.setDescription('Specifies the high end of the range of port numbers available for use with translation IP addresses.')
ltmLsnPoolClientConnectionLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 2, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolClientConnectionLimit.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolClientConnectionLimit.setDescription('Specifies the maximum number of simultaneous translated connections a client or subscriber is allowed to have. A value of zero signifies no limit.')
ltmLsnPoolEgressInterfacesEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 2, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolEgressInterfacesEnabled.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolEgressInterfacesEnabled.setDescription('If true, source address translation is allowed on the interfaces specified in the egress-interfaces list.')
ltmLsnPoolLogPublisher = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 2, 2, 1, 15), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolLogPublisher.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolLogPublisher.setDescription('Specifies the name of the log publisher that logs translation events, if any.')
ltmLsnPoolHairpinMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 2, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolHairpinMode.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolHairpinMode.setDescription('If enabled, will enable hairpinning for inbound connections. A hairpin connection between two subscribers goes through the NAT device and uses translation addresses so that it appears to each subscriber that the other is an external host.')
ltmLsnPoolLogProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 2, 2, 1, 17), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolLogProfile.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolLogProfile.setDescription('Specifies the name of the log profile that control the logging of translation events, if any.')
ltmLsnPrefixLsnPoolNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPrefixLsnPoolNumber.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPrefixLsnPoolNumber.setDescription('The number of ltmLsnPrefixLsnPool entries in the table.')
ltmLsnPrefixLsnPoolTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 3, 2), )
if mibBuilder.loadTexts: ltmLsnPrefixLsnPoolTable.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPrefixLsnPoolTable.setDescription('A table containing information of LSN pool prefix.')
ltmLsnPrefixLsnPoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 3, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmLsnPrefixLsnPoolLsnPoolName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmLsnPrefixLsnPoolLsnPrefixName"))
if mibBuilder.loadTexts: ltmLsnPrefixLsnPoolEntry.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPrefixLsnPoolEntry.setDescription('Columns in the ltmLsnPrefixLsnPool Table')
ltmLsnPrefixLsnPoolLsnPrefixName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 3, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPrefixLsnPoolLsnPrefixName.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPrefixLsnPoolLsnPrefixName.setDescription('The name of a LSN prefix node.')
ltmLsnPrefixLsnPoolLsnPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 3, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPrefixLsnPoolLsnPoolName.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPrefixLsnPoolLsnPoolName.setDescription('The name of a LSN pool.')
ltmLsnPrefixLsnPoolPrefixAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 3, 2, 1, 3), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPrefixLsnPoolPrefixAddressType.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPrefixLsnPoolPrefixAddressType.setDescription('The IP address type of ltmLsnPrefixLsnPoolPrefixAddress.')
ltmLsnPrefixLsnPoolPrefixAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 3, 2, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPrefixLsnPoolPrefixAddress.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPrefixLsnPoolPrefixAddress.setDescription('The IP address of a node. It is interpreted within the context of a ltmLsnPrefixLsnPoolPrefixAddressType value.')
ltmLsnPrefixLsnPoolBackupNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPrefixLsnPoolBackupNumber.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPrefixLsnPoolBackupNumber.setDescription('The number of ltmLsnPrefixLsnPoolBackup entries in the table.')
ltmLsnPrefixLsnPoolBackupTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 4, 2), )
if mibBuilder.loadTexts: ltmLsnPrefixLsnPoolBackupTable.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPrefixLsnPoolBackupTable.setDescription('A table containing information of LSN pool backup prefix.')
ltmLsnPrefixLsnPoolBackupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 4, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmLsnPrefixLsnPoolBackupLsnPoolName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmLsnPrefixLsnPoolBackupLsnPrefixName"))
if mibBuilder.loadTexts: ltmLsnPrefixLsnPoolBackupEntry.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPrefixLsnPoolBackupEntry.setDescription('Columns in the ltmLsnPrefixLsnPoolBackup Table')
ltmLsnPrefixLsnPoolBackupLsnPrefixName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 4, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPrefixLsnPoolBackupLsnPrefixName.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPrefixLsnPoolBackupLsnPrefixName.setDescription('The name of a LSN prefix node.')
ltmLsnPrefixLsnPoolBackupLsnPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 4, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPrefixLsnPoolBackupLsnPoolName.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPrefixLsnPoolBackupLsnPoolName.setDescription('The name of a LSN pool.')
ltmLsnPrefixLsnPoolBackupPrefixAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 4, 2, 1, 3), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPrefixLsnPoolBackupPrefixAddressType.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPrefixLsnPoolBackupPrefixAddressType.setDescription('The IP address type of ltmLsnPrefixLsnPoolBackupPrefixAddress.')
ltmLsnPrefixLsnPoolBackupPrefixAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 4, 2, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPrefixLsnPoolBackupPrefixAddress.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPrefixLsnPoolBackupPrefixAddress.setDescription('The IP address of a node. It is interpreted within the context of a ltmLsnPrefixLsnPoolBackupPrefixAddressType value.')
ltmLsnPoolVlanNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolVlanNumber.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolVlanNumber.setDescription('The number of ltmLsnPoolVlan entries in the table.')
ltmLsnPoolVlanTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 5, 2), )
if mibBuilder.loadTexts: ltmLsnPoolVlanTable.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolVlanTable.setDescription('A table containing VLAN information of LSN pool.')
ltmLsnPoolVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 5, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmLsnPoolVlanLsnPoolName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmLsnPoolVlanVlanName"))
if mibBuilder.loadTexts: ltmLsnPoolVlanEntry.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolVlanEntry.setDescription('Columns in the ltmLsnPoolVlan Table')
ltmLsnPoolVlanLsnPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 5, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolVlanLsnPoolName.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolVlanLsnPoolName.setDescription('The name of a LSN pool.')
ltmLsnPoolVlanVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 5, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolVlanVlanName.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolVlanVlanName.setDescription('The name of VLAN for LSN pool.')
ltmLsnPoolStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 6, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmLsnPoolStatResetStats.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolStatResetStats.setDescription('The action to reset resetable statistics data in ltmLsnPoolStat. Setting this value to 1 will reset statistics data. Note, some statistics data may not be reset including data that are incremental counters.')
ltmLsnPoolStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolStatNumber.setDescription('The number of ltmLsnPoolStat entries in the table.')
ltmLsnPoolStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 6, 3), )
if mibBuilder.loadTexts: ltmLsnPoolStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolStatTable.setDescription('A table containing statistic information of LSN pool.')
ltmLsnPoolStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 6, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmLsnPoolStatName"))
if mibBuilder.loadTexts: ltmLsnPoolStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolStatEntry.setDescription('Columns in the ltmLsnPoolStat Table')
ltmLsnPoolStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 6, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolStatName.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolStatName.setDescription('The name of a LSN Pool.')
ltmLsnPoolStatTranslationRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 6, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolStatTranslationRequests.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolStatTranslationRequests.setDescription('The number of translation requests.')
ltmLsnPoolStatHairpinConnectionRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 6, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolStatHairpinConnectionRequests.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolStatHairpinConnectionRequests.setDescription('The number of hairpin connection requests. A hairpin connection between two subscribers goes through the NAT device and uses translation addresses so that it appears to each subscriber that the other is an external host.')
ltmLsnPoolStatActiveTranslations = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 6, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolStatActiveTranslations.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolStatActiveTranslations.setDescription('The number of active translations.')
ltmLsnPoolStatActiveHairpinConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 6, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolStatActiveHairpinConnections.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolStatActiveHairpinConnections.setDescription('The number of active hairpin connections. A hairpin connection between two subscribers goes through the NAT device and uses translation addresses so that it appears to each subscriber that the other is an external host.')
ltmLsnPoolStatTranslationRequestFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 6, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolStatTranslationRequestFailures.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolStatTranslationRequestFailures.setDescription('The number of translation request failures.')
ltmLsnPoolStatPersistenceMappingFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 6, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolStatPersistenceMappingFailures.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolStatPersistenceMappingFailures.setDescription('The number of persistence mapping translation request failures.')
ltmLsnPoolStatHairpinConnectionFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 6, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolStatHairpinConnectionFailures.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolStatHairpinConnectionFailures.setDescription('The number of failed hairpin connections. A hairpin connection failure occurs when a subscriber connects to an inbound reservation but a connection could not be created.')
ltmLsnPoolStatBackupPoolTranslations = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 6, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolStatBackupPoolTranslations.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolStatBackupPoolTranslations.setDescription('The number of translation requests that were served using the backup pool.')
ltmLsnPoolStatLogAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 6, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolStatLogAttempts.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolStatLogAttempts.setDescription('The number of logging attempts.')
ltmLsnPoolStatLogFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 6, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolStatLogFailures.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolStatLogFailures.setDescription('The number of logging attempts that resulted in failure.')
ltmLsnPoolStatTotalEndPoints = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 6, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolStatTotalEndPoints.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolStatTotalEndPoints.setDescription('The product of the number of IP addresses and the translation port range. This is computed when the pool membership or translation port range changes.')
ltmLsnPoolStatPcpAnnounceRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 6, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolStatPcpAnnounceRequests.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolStatPcpAnnounceRequests.setDescription('The total number of PCP Announce requests received.')
ltmLsnPoolStatPcpAnnounceResponsesUcast = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 6, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolStatPcpAnnounceResponsesUcast.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolStatPcpAnnounceResponsesUcast.setDescription('The total number of unicast PCP Announce responses transmitted.')
ltmLsnPoolStatPcpAnnounceResponsesMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 6, 3, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolStatPcpAnnounceResponsesMulticast.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolStatPcpAnnounceResponsesMulticast.setDescription('The total number of multicast PCP Announce responses transmitted.')
ltmLsnPoolStatPcpMapRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 6, 3, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolStatPcpMapRequests.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolStatPcpMapRequests.setDescription('The total number of PCP Map requests received.')
ltmLsnPoolStatPcpMapResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 6, 3, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolStatPcpMapResponses.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolStatPcpMapResponses.setDescription('The total number of PCP Map responses transmitted.')
ltmLsnPoolStatPcpPeerRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 6, 3, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolStatPcpPeerRequests.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolStatPcpPeerRequests.setDescription('The total number of PCP Peer requests received.')
ltmLsnPoolStatPcpPeerResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 6, 3, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolStatPcpPeerResponses.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolStatPcpPeerResponses.setDescription('The total number of PCP Peer responses transmitted.')
ltmLsnPoolStatPcpErrorsInvalidRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 6, 3, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolStatPcpErrorsInvalidRequest.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolStatPcpErrorsInvalidRequest.setDescription('The total number of invalid or malformed PCP requests received.')
ltmLsnPoolStatPcpErrorsUnavailableResource = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 6, 3, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolStatPcpErrorsUnavailableResource.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolStatPcpErrorsUnavailableResource.setDescription('The total number of PCP requests received where the server has insufficient resources to complete the requested operation.')
ltmLsnPoolStatPcpErrorsNotAuthorized = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 6, 3, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolStatPcpErrorsNotAuthorized.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolStatPcpErrorsNotAuthorized.setDescription('The total number of PCP requests that generated (or caused) an unauthorized error when attempting to create a mapping.')
ltmLsnPoolStatPcpErrorsOther = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 6, 3, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolStatPcpErrorsOther.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolStatPcpErrorsOther.setDescription('The total number of PCP requests received that resulted in other errors.')
ltmLsnPoolStatActivePortBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 6, 3, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolStatActivePortBlocks.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolStatActivePortBlocks.setDescription('The total number of port blocks actively in use.')
ltmLsnPoolStatActiveClientsReachedLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 6, 3, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolStatActiveClientsReachedLimit.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolStatActiveClientsReachedLimit.setDescription('Total clients who have reached the max port blocks allocated to them.')
ltmLsnPoolStatActiveZombiePortBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 6, 3, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolStatActiveZombiePortBlocks.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolStatActiveZombiePortBlocks.setDescription('Total blocks which have reached their lifetime and cannot be used for new allocations. They are not yet deleted because there are connections using ports in that block.')
ltmLsnPoolStatTotalClientsReachedLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 6, 3, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolStatTotalClientsReachedLimit.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolStatTotalClientsReachedLimit.setDescription('Total client connections rejected because client hit client-block-limit and could not find any free ports in the existing blocks.')
ltmLsnPoolStatTotalPortBlockAllocations = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 6, 3, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolStatTotalPortBlockAllocations.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolStatTotalPortBlockAllocations.setDescription('Total port block allocations.')
ltmLsnPoolStatTotalPortBlockAllocationFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 6, 3, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolStatTotalPortBlockAllocationFailures.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolStatTotalPortBlockAllocationFailures.setDescription('Total port block allocation failures.')
ltmLsnPoolStatTotalPortBlockDeallocations = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 6, 3, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolStatTotalPortBlockDeallocations.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolStatTotalPortBlockDeallocations.setDescription('Total port blocks freed.')
ltmLsnPoolStatTotalZombiePortBlocksCreated = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 6, 3, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolStatTotalZombiePortBlocksCreated.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolStatTotalZombiePortBlocksCreated.setDescription('Total blocks which have reached their lifetime and cannot be used for new allocations. They are not yet deleted because there are connections using ports in that block.')
ltmLsnPoolStatTotalZombiePortBlocksDeleted = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 6, 3, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolStatTotalZombiePortBlocksDeleted.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolStatTotalZombiePortBlocksDeleted.setDescription('Total zombie blocks deleted after their zombie timeouts. When a zombie block is deleted, the connections using them are killed.')
ltmLsnPoolStatTotalZombiePortBlockConnectionsKilled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 6, 3, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolStatTotalZombiePortBlockConnectionsKilled.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolStatTotalZombiePortBlockConnectionsKilled.setDescription('Total connections killed due to zombie block reaching zombie timeout.')
ltmSpdyProfileNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileNumber.setStatus('current')
if mibBuilder.loadTexts: ltmSpdyProfileNumber.setDescription('The number of ltmSpdyProfile entries in the table.')
ltmSpdyProfileTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 1, 2), )
if mibBuilder.loadTexts: ltmSpdyProfileTable.setStatus('current')
if mibBuilder.loadTexts: ltmSpdyProfileTable.setDescription('A table containing information about the SPDY profile.')
ltmSpdyProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileName"))
if mibBuilder.loadTexts: ltmSpdyProfileEntry.setStatus('current')
if mibBuilder.loadTexts: ltmSpdyProfileEntry.setDescription('Columns in the ltmSpdyProfile Table')
ltmSpdyProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileName.setStatus('current')
if mibBuilder.loadTexts: ltmSpdyProfileName.setDescription('The name of a SPDY profile.')
ltmSpdyProfileConfigSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("usercfg", 0), ("basecfg", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileConfigSource.setStatus('current')
if mibBuilder.loadTexts: ltmSpdyProfileConfigSource.setDescription('The state that specifies whether this is a base/pre-configured profile or user defined profile.')
ltmSpdyProfileDefaultName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 1, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileDefaultName.setStatus('current')
if mibBuilder.loadTexts: ltmSpdyProfileDefaultName.setDescription('The name of the profile from which the specified profile derives its attribute default values.')
ltmSpdyProfileActivationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("npn", 0), ("always", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileActivationMode.setStatus('current')
if mibBuilder.loadTexts: ltmSpdyProfileActivationMode.setDescription('The manner in which SPDY connections are made. npn - TLS Extension, Next Protocol Negotiation is used to decide which SPDY protocol is used. always - All connections will be assumed to be SPDY connections. Clients that only support HTTP will not be supported.')
ltmSpdyProfilePriorityHandling = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("strict", 0), ("fair", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfilePriorityHandling.setStatus('current')
if mibBuilder.loadTexts: ltmSpdyProfilePriorityHandling.setDescription('The manner in which streams of different priorities are handled. strict - Higher priority streams will be processed to completion before lower priority streams are processed. fair - Higher priority streams will use more bandwidth than lower priority streams without completely blocking the lower priority streams.')
ltmSpdyProfileInsertHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileInsertHeader.setStatus('current')
if mibBuilder.loadTexts: ltmSpdyProfileInsertHeader.setDescription('The state indicating whether or not an HTTP header that indicates the use of SPDY should be inserted into the request going to the back-end server.')
ltmSpdyProfileInsertHeaderName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 1, 2, 1, 7), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileInsertHeaderName.setStatus('current')
if mibBuilder.loadTexts: ltmSpdyProfileInsertHeaderName.setDescription('The HTTP header inserted into the request going to the back-end server, if that functionality is enabled.')
ltmSpdyProfileConcurrentStreamsPerConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 1, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileConcurrentStreamsPerConnection.setStatus('current')
if mibBuilder.loadTexts: ltmSpdyProfileConcurrentStreamsPerConnection.setDescription('The maximum amount of concurrent streams allowed per connection.')
ltmSpdyProfileConnectionIdleTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 1, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileConnectionIdleTimeout.setStatus('current')
if mibBuilder.loadTexts: ltmSpdyProfileConnectionIdleTimeout.setDescription('The amount of time, in seconds, a connection is open idly before it is shutdown.')
ltmSpdyProfileReceiveWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 1, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileReceiveWindow.setStatus('current')
if mibBuilder.loadTexts: ltmSpdyProfileReceiveWindow.setDescription('Specifies the size of the receive window in kilobytes. The receive window is a mechanism to stall individual upload streams when needed. This mechanism is only available for SPDY version 3 connections.')
ltmSpdyProfileFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 1, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileFrameSize.setStatus('current')
if mibBuilder.loadTexts: ltmSpdyProfileFrameSize.setDescription('Specifies the size of the data frames, in bytes, that SPDY will send to the client. Larger frame sizes will improve network utilization, but may affect concurrency.')
ltmSpdyProfileWriteSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 1, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileWriteSize.setStatus('current')
if mibBuilder.loadTexts: ltmSpdyProfileWriteSize.setDescription('Specifies the total size of combined data frames, in bytes, SPDY will send in a single write. This controls the size of the TLS records when SPDY is used over SSL. A large write size will cause SPDY to buffer more data, but will improve network utilization.')
ltmSpdyProfileCompressionLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 1, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileCompressionLevel.setStatus('current')
if mibBuilder.loadTexts: ltmSpdyProfileCompressionLevel.setDescription('Specifies the amount of compression to do by default for the headers of the specified profiles. The compression level must be between 0 and 10. Higher numbers correspond to more compression.')
ltmSpdyProfileCompressionWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 1, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileCompressionWindowSize.setStatus('current')
if mibBuilder.loadTexts: ltmSpdyProfileCompressionWindowSize.setDescription('Specifies the size of the compression window for the specified profiles in kilobytes. The compression window size must be between 1 and 128 kilobytes.')
ltmSpdyProfileProtocolVersionsNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileProtocolVersionsNumber.setStatus('current')
if mibBuilder.loadTexts: ltmSpdyProfileProtocolVersionsNumber.setDescription('The number of ltmSpdyProfileProtocolVersions entries in the table.')
ltmSpdyProfileProtocolVersionsTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 2, 2), )
if mibBuilder.loadTexts: ltmSpdyProfileProtocolVersionsTable.setStatus('current')
if mibBuilder.loadTexts: ltmSpdyProfileProtocolVersionsTable.setDescription('A table containing information on the supported SPDY protocol versions.')
ltmSpdyProfileProtocolVersionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 2, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileProtocolVersionsName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileProtocolVersionsIndex"))
if mibBuilder.loadTexts: ltmSpdyProfileProtocolVersionsEntry.setStatus('current')
if mibBuilder.loadTexts: ltmSpdyProfileProtocolVersionsEntry.setDescription('Columns in the ltmSpdyProfileProtocolVersions Table')
ltmSpdyProfileProtocolVersionsName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 2, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileProtocolVersionsName.setStatus('current')
if mibBuilder.loadTexts: ltmSpdyProfileProtocolVersionsName.setDescription('The name of a SPDY profile.')
ltmSpdyProfileProtocolVersionsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileProtocolVersionsIndex.setStatus('current')
if mibBuilder.loadTexts: ltmSpdyProfileProtocolVersionsIndex.setDescription('The index of the protocol versions used to determine which SPDY versions are supported and in what order those versions should be prioritized when deciding which version to use. This prioritization is only used when the activation mode is set to npn.')
ltmSpdyProfileProtocolVersionsProtocolVersions = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("spdy2", 1), ("spdy3", 2), ("http11", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileProtocolVersionsProtocolVersions.setStatus('current')
if mibBuilder.loadTexts: ltmSpdyProfileProtocolVersionsProtocolVersions.setDescription('The SPDY version supported. spdy2 - indicates that SPDY version 2 is supported. spdy3 - indicates that SPDY version 3 is supported. http11 - indicates that HTTP1.1 is supported when SPDY is not supported/requested by a client.')
ltmSpdyProfileStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmSpdyProfileStatResetStats.setStatus('current')
if mibBuilder.loadTexts: ltmSpdyProfileStatResetStats.setDescription('The action to reset resetable statistics data in ltmSpdyProfileStat. Setting this value to 1 will reset statistics data. Note, some statistics data may not be reset including data that are incremental counters.')
ltmSpdyProfileStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmSpdyProfileStatNumber.setDescription('The number of ltmSpdyProfileStat entries in the table.')
ltmSpdyProfileStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3), )
if mibBuilder.loadTexts: ltmSpdyProfileStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmSpdyProfileStatTable.setDescription('A table containing statistics information about the SPDY profile.')
ltmSpdyProfileStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatName"))
if mibBuilder.loadTexts: ltmSpdyProfileStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmSpdyProfileStatEntry.setDescription('Columns in the ltmSpdyProfileStat Table')
ltmSpdyProfileStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatName.setStatus('current')
if mibBuilder.loadTexts: ltmSpdyProfileStatName.setDescription('The name of the SPDY profile.')
ltmSpdyProfileStatConnectionsAccepted = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatConnectionsAccepted.setStatus('current')
if mibBuilder.loadTexts: ltmSpdyProfileStatConnectionsAccepted.setDescription('The total number of accepted connections.')
ltmSpdyProfileStatConnectionsCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatConnectionsCurrent.setStatus('current')
if mibBuilder.loadTexts: ltmSpdyProfileStatConnectionsCurrent.setDescription('The total number of connections currently active.')
ltmSpdyProfileStatConnectionsMax = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatConnectionsMax.setStatus('current')
if mibBuilder.loadTexts: ltmSpdyProfileStatConnectionsMax.setDescription('The maximum number of connections open simultaneously.')
ltmSpdyProfileStatDataFramesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatDataFramesReceived.setStatus('current')
if mibBuilder.loadTexts: ltmSpdyProfileStatDataFramesReceived.setDescription('The total number of data frames received.')
ltmSpdyProfileStatDataFramesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatDataFramesSent.setStatus('current')
if mibBuilder.loadTexts: ltmSpdyProfileStatDataFramesSent.setDescription('The total number of data frames sent.')
ltmSpdyProfileStatFlowsCreated = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatFlowsCreated.setStatus('current')
if mibBuilder.loadTexts: ltmSpdyProfileStatFlowsCreated.setDescription('The total number of flows created.')
ltmSpdyProfileStatFlowsCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatFlowsCurrent.setStatus('current')
if mibBuilder.loadTexts: ltmSpdyProfileStatFlowsCurrent.setDescription('The total number of flows currently active.')
ltmSpdyProfileStatFlowsMax = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatFlowsMax.setStatus('current')
if mibBuilder.loadTexts: ltmSpdyProfileStatFlowsMax.setDescription('The maximum number of flows open simultaneously.')
ltmSpdyProfileStatGoawayFramesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatGoawayFramesReceived.setStatus('current')
if mibBuilder.loadTexts: ltmSpdyProfileStatGoawayFramesReceived.setDescription('The total number of GOAWAY frames received.')
ltmSpdyProfileStatGoawayFramesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatGoawayFramesSent.setStatus('current')
if mibBuilder.loadTexts: ltmSpdyProfileStatGoawayFramesSent.setDescription('The total number of GOAWAY frames sent.')
ltmSpdyProfileStatHeadersFramesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatHeadersFramesReceived.setStatus('current')
if mibBuilder.loadTexts: ltmSpdyProfileStatHeadersFramesReceived.setDescription('The total number of HEADERS frames received.')
ltmSpdyProfileStatHeadersFramesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatHeadersFramesSent.setStatus('current')
if mibBuilder.loadTexts: ltmSpdyProfileStatHeadersFramesSent.setDescription('The total number of HEADERS frames sent.')
ltmSpdyProfileStatHttpRequestBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatHttpRequestBytes.setStatus('current')
if mibBuilder.loadTexts: ltmSpdyProfileStatHttpRequestBytes.setDescription('The total number of HTTP request bytes.')
ltmSpdyProfileStatHttpResponseBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatHttpResponseBytes.setStatus('current')
if mibBuilder.loadTexts: ltmSpdyProfileStatHttpResponseBytes.setDescription('The total number of HTTP response bytes.')
ltmSpdyProfileStatNoopFramesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatNoopFramesReceived.setStatus('current')
if mibBuilder.loadTexts: ltmSpdyProfileStatNoopFramesReceived.setDescription('The total number of NOOP frames received.')
ltmSpdyProfileStatNoopFramesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatNoopFramesSent.setStatus('current')
if mibBuilder.loadTexts: ltmSpdyProfileStatNoopFramesSent.setDescription('The total number of NOOP frames sent.')
ltmSpdyProfileStatPingFramesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatPingFramesReceived.setStatus('current')
if mibBuilder.loadTexts: ltmSpdyProfileStatPingFramesReceived.setDescription('The total number of PING frames received.')
ltmSpdyProfileStatPingFramesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatPingFramesSent.setStatus('current')
if mibBuilder.loadTexts: ltmSpdyProfileStatPingFramesSent.setDescription('The total number of PING frames sent.')
ltmSpdyProfileStatRstStreamFramesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatRstStreamFramesReceived.setStatus('current')
if mibBuilder.loadTexts: ltmSpdyProfileStatRstStreamFramesReceived.setDescription('The total number of RST_STREAM frames received.')
ltmSpdyProfileStatRstStreamFramesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatRstStreamFramesSent.setStatus('current')
if mibBuilder.loadTexts: ltmSpdyProfileStatRstStreamFramesSent.setDescription('The total number of RST_STREAM frames sent.')
ltmSpdyProfileStatSettingsFramesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatSettingsFramesReceived.setStatus('current')
if mibBuilder.loadTexts: ltmSpdyProfileStatSettingsFramesReceived.setDescription('The total number of SETTINGS frames received.')
ltmSpdyProfileStatSettingsFramesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatSettingsFramesSent.setStatus('current')
if mibBuilder.loadTexts: ltmSpdyProfileStatSettingsFramesSent.setDescription('The total number of SETTINGS frames sent.')
ltmSpdyProfileStatSpdyRequestBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatSpdyRequestBytes.setStatus('current')
if mibBuilder.loadTexts: ltmSpdyProfileStatSpdyRequestBytes.setDescription('The total number of SPDY request bytes.')
ltmSpdyProfileStatSpdyRequestFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatSpdyRequestFrames.setStatus('current')
if mibBuilder.loadTexts: ltmSpdyProfileStatSpdyRequestFrames.setDescription('The total number of SPDY request frames.')
ltmSpdyProfileStatSpdyResponseBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatSpdyResponseBytes.setStatus('current')
if mibBuilder.loadTexts: ltmSpdyProfileStatSpdyResponseBytes.setDescription('The total number of SPDY response bytes.')
ltmSpdyProfileStatSpdyResponseFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatSpdyResponseFrames.setStatus('current')
if mibBuilder.loadTexts: ltmSpdyProfileStatSpdyResponseFrames.setDescription('The total number of SPDY response frames.')
ltmSpdyProfileStatSynReplyFramesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatSynReplyFramesReceived.setStatus('current')
if mibBuilder.loadTexts: ltmSpdyProfileStatSynReplyFramesReceived.setDescription('The total number of SYN_REPLY frames received.')
ltmSpdyProfileStatSynReplyFramesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatSynReplyFramesSent.setStatus('current')
if mibBuilder.loadTexts: ltmSpdyProfileStatSynReplyFramesSent.setDescription('The total number of SYN_REPLY frames sent.')
ltmSpdyProfileStatSynStreamFramesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatSynStreamFramesReceived.setStatus('current')
if mibBuilder.loadTexts: ltmSpdyProfileStatSynStreamFramesReceived.setDescription('The total number of SYN_STREAM frames received.')
ltmSpdyProfileStatSynStreamFramesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatSynStreamFramesSent.setStatus('current')
if mibBuilder.loadTexts: ltmSpdyProfileStatSynStreamFramesSent.setDescription('The total number of SYN_STREAM frames sent.')
ltmSpdyProfileStatV2StreamsCreated = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatV2StreamsCreated.setStatus('current')
if mibBuilder.loadTexts: ltmSpdyProfileStatV2StreamsCreated.setDescription('The total number of SPDYv2 streams created.')
ltmSpdyProfileStatV2StreamsCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatV2StreamsCurrent.setStatus('current')
if mibBuilder.loadTexts: ltmSpdyProfileStatV2StreamsCurrent.setDescription('The total number of SPDYv2 streams currently active.')
ltmSpdyProfileStatV2StreamsMax = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatV2StreamsMax.setStatus('current')
if mibBuilder.loadTexts: ltmSpdyProfileStatV2StreamsMax.setDescription('The maximum number of SPDYv2 streams open simultaneously.')
ltmSpdyProfileStatV3StreamsCreated = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatV3StreamsCreated.setStatus('current')
if mibBuilder.loadTexts: ltmSpdyProfileStatV3StreamsCreated.setDescription('The total number of SPDYv3 streams created.')
ltmSpdyProfileStatV3StreamsCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatV3StreamsCurrent.setStatus('current')
if mibBuilder.loadTexts: ltmSpdyProfileStatV3StreamsCurrent.setDescription('The total number of SPDYv3 streams currently active.')
ltmSpdyProfileStatV3StreamsMax = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatV3StreamsMax.setStatus('current')
if mibBuilder.loadTexts: ltmSpdyProfileStatV3StreamsMax.setDescription('The maximum number of SPDYv3 streams open simultaneously.')
ltmSpdyProfileStatWindowUpdateFramesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatWindowUpdateFramesReceived.setStatus('current')
if mibBuilder.loadTexts: ltmSpdyProfileStatWindowUpdateFramesReceived.setDescription('The total number of WINDOW_UPDATE frames received.')
ltmSpdyProfileStatWindowUpdateFramesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatWindowUpdateFramesSent.setStatus('current')
if mibBuilder.loadTexts: ltmSpdyProfileStatWindowUpdateFramesSent.setDescription('The total number of WINDOW_UPDATE frames sent.')
ltmFtpProfileStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 6, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmFtpProfileStatResetStats.setStatus('current')
if mibBuilder.loadTexts: ltmFtpProfileStatResetStats.setDescription('The action to reset resetable statistics data in ltmFtpProfileStat. Setting this value to 1 will reset statistics data. Note, some statistics data may not be reset including data that are incremental counters.')
ltmFtpProfileStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 6, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFtpProfileStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmFtpProfileStatNumber.setDescription('The number of ltmFtpProfileStat entries in the table.')
ltmFtpProfileStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 6, 2, 3), )
if mibBuilder.loadTexts: ltmFtpProfileStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmFtpProfileStatTable.setDescription('A table containing statistics information about the FTP profile.')
ltmFtpProfileStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 6, 2, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmFtpProfileStatName"))
if mibBuilder.loadTexts: ltmFtpProfileStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmFtpProfileStatEntry.setDescription('Columns in the ltmFtpProfileStat Table')
ltmFtpProfileStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 6, 2, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFtpProfileStatName.setStatus('current')
if mibBuilder.loadTexts: ltmFtpProfileStatName.setDescription('The name of the FTP profile.')
ltmFtpProfileStatLoginRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 6, 2, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFtpProfileStatLoginRequests.setStatus('current')
if mibBuilder.loadTexts: ltmFtpProfileStatLoginRequests.setDescription('The total number of login requests received.')
ltmFtpProfileStatDownloadRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 6, 2, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFtpProfileStatDownloadRequests.setStatus('current')
if mibBuilder.loadTexts: ltmFtpProfileStatDownloadRequests.setDescription('The total number of download requests received.')
ltmFtpProfileStatUploadRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 6, 2, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFtpProfileStatUploadRequests.setStatus('current')
if mibBuilder.loadTexts: ltmFtpProfileStatUploadRequests.setDescription('The total number of upload requests received.')
ltmDosApplicationHeavyUrlInclNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationHeavyUrlInclNumber.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationHeavyUrlInclNumber.setDescription('The number of ltmDosApplicationHeavyUrlIncl entries in the table.')
ltmDosApplicationHeavyUrlInclTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 4, 2), )
if mibBuilder.loadTexts: ltmDosApplicationHeavyUrlInclTable.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationHeavyUrlInclTable.setDescription('A table containing information of manually-configured (included) heavy URLs in DoS profile Application Security.')
ltmDosApplicationHeavyUrlInclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 4, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmDosApplicationHeavyUrlInclProfileName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmDosApplicationHeavyUrlInclName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmDosApplicationHeavyUrlInclIndex"))
if mibBuilder.loadTexts: ltmDosApplicationHeavyUrlInclEntry.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationHeavyUrlInclEntry.setDescription('Columns in the ltmDosApplicationHeavyUrlIncl Table')
ltmDosApplicationHeavyUrlInclProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 4, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationHeavyUrlInclProfileName.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationHeavyUrlInclProfileName.setDescription('The name of a DoS profile.')
ltmDosApplicationHeavyUrlInclName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 4, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationHeavyUrlInclName.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationHeavyUrlInclName.setDescription('The dummy name of enabled Application Security on this profile.')
ltmDosApplicationHeavyUrlInclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationHeavyUrlInclIndex.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationHeavyUrlInclIndex.setDescription('The index of the included heavy URL for the specified DoS profile with Application Security.')
ltmDosApplicationHeavyUrlInclUrl = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 4, 2, 1, 4), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationHeavyUrlInclUrl.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationHeavyUrlInclUrl.setDescription('The included heavy URL for the specified DoS profile with Application Security.')
ltmDosApplicationHeavyUrlExclNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationHeavyUrlExclNumber.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationHeavyUrlExclNumber.setDescription('The number of ltmDosApplicationHeavyUrlExcl entries in the table.')
ltmDosApplicationHeavyUrlExclTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 5, 2), )
if mibBuilder.loadTexts: ltmDosApplicationHeavyUrlExclTable.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationHeavyUrlExclTable.setDescription('A table containing information of ignored (excluded) heavy URLs in DoS profile Application Security.')
ltmDosApplicationHeavyUrlExclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 5, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmDosApplicationHeavyUrlExclProfileName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmDosApplicationHeavyUrlExclName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmDosApplicationHeavyUrlExclIndex"))
if mibBuilder.loadTexts: ltmDosApplicationHeavyUrlExclEntry.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationHeavyUrlExclEntry.setDescription('Columns in the ltmDosApplicationHeavyUrlExcl Table')
ltmDosApplicationHeavyUrlExclProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 5, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationHeavyUrlExclProfileName.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationHeavyUrlExclProfileName.setDescription('The name of a DoS profile.')
ltmDosApplicationHeavyUrlExclName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 5, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationHeavyUrlExclName.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationHeavyUrlExclName.setDescription('The dummy name of enabled Application Security on this profile.')
ltmDosApplicationHeavyUrlExclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationHeavyUrlExclIndex.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationHeavyUrlExclIndex.setDescription('The index of the excluded heavy URL for the specified DoS profile with Application Security.')
ltmDosApplicationHeavyUrlExclUrl = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 5, 2, 1, 4), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationHeavyUrlExclUrl.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationHeavyUrlExclUrl.setDescription('The excluded heavy URL for the specified DoS profile with Application Security.')
ltmV6rdProfileNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 26, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmV6rdProfileNumber.setStatus('current')
if mibBuilder.loadTexts: ltmV6rdProfileNumber.setDescription('The number of ltmV6rdProfile entries in the table.')
ltmV6rdProfileTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 26, 1, 2), )
if mibBuilder.loadTexts: ltmV6rdProfileTable.setStatus('current')
if mibBuilder.loadTexts: ltmV6rdProfileTable.setDescription('A table containing information about the V6RD profile.')
ltmV6rdProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 26, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmV6rdProfileName"))
if mibBuilder.loadTexts: ltmV6rdProfileEntry.setStatus('current')
if mibBuilder.loadTexts: ltmV6rdProfileEntry.setDescription('Columns in the ltmV6rdProfile Table')
ltmV6rdProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 26, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmV6rdProfileName.setStatus('current')
if mibBuilder.loadTexts: ltmV6rdProfileName.setDescription('The name of a V6RD profile.')
ltmV6rdProfileConfigSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 26, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("usercfg", 0), ("basecfg", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmV6rdProfileConfigSource.setStatus('current')
if mibBuilder.loadTexts: ltmV6rdProfileConfigSource.setDescription('The state that specifies whether this is a base/pre-configured profile or user defined profile.')
ltmV6rdProfileDefaultName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 26, 1, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmV6rdProfileDefaultName.setStatus('current')
if mibBuilder.loadTexts: ltmV6rdProfileDefaultName.setDescription('The name of the profile from which the specified profile derives its attribute default values.')
ltmV6rdProfileIpv4prefixType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 26, 1, 2, 1, 4), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmV6rdProfileIpv4prefixType.setStatus('current')
if mibBuilder.loadTexts: ltmV6rdProfileIpv4prefixType.setDescription('The IP address type of ltmV6rdProfileIpv4prefix.')
ltmV6rdProfileIpv4prefix = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 26, 1, 2, 1, 5), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmV6rdProfileIpv4prefix.setStatus('current')
if mibBuilder.loadTexts: ltmV6rdProfileIpv4prefix.setDescription('IPv4 prefix for Customer Edge routers. It is interpreted within the context of a ltmV6rdProfileIpv4prefixType value.')
ltmV6rdProfileIpv4prefixlen = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 26, 1, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmV6rdProfileIpv4prefixlen.setStatus('current')
if mibBuilder.loadTexts: ltmV6rdProfileIpv4prefixlen.setDescription('The number of high-order bits of IPv4 addresses that are not embedded in the IPv6 addresses of a given V6RD domain.')
ltmV6rdProfileV6rdprefixType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 26, 1, 2, 1, 7), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmV6rdProfileV6rdprefixType.setStatus('current')
if mibBuilder.loadTexts: ltmV6rdProfileV6rdprefixType.setDescription('The IP address type of ltmV6rdProfileV6rdprefix.')
ltmV6rdProfileV6rdprefix = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 26, 1, 2, 1, 8), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmV6rdProfileV6rdprefix.setStatus('current')
if mibBuilder.loadTexts: ltmV6rdProfileV6rdprefix.setDescription('IPv6 prefix 6RD domain. It is interpreted within the context of a ltmV6rdProfileV6rdprefixType value.')
ltmV6rdProfileV6rdprefixlen = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 26, 1, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmV6rdProfileV6rdprefixlen.setStatus('current')
if mibBuilder.loadTexts: ltmV6rdProfileV6rdprefixlen.setDescription('The length of the 6rd IPv6 prefix for the given 6rd domain.')
ltmPptpProfileNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 27, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPptpProfileNumber.setStatus('current')
if mibBuilder.loadTexts: ltmPptpProfileNumber.setDescription('The number of ltmPptpProfile entries in the table.')
ltmPptpProfileTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 27, 1, 2), )
if mibBuilder.loadTexts: ltmPptpProfileTable.setStatus('current')
if mibBuilder.loadTexts: ltmPptpProfileTable.setDescription('A table containing information about the PPTP profile.')
ltmPptpProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 27, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmPptpProfileName"))
if mibBuilder.loadTexts: ltmPptpProfileEntry.setStatus('current')
if mibBuilder.loadTexts: ltmPptpProfileEntry.setDescription('Columns in the ltmPptpProfile Table')
ltmPptpProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 27, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPptpProfileName.setStatus('current')
if mibBuilder.loadTexts: ltmPptpProfileName.setDescription('The name of a PPTP profile.')
ltmPptpProfileDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 27, 1, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPptpProfileDescription.setStatus('current')
if mibBuilder.loadTexts: ltmPptpProfileDescription.setDescription('The description of a PPTP profile.')
ltmPptpProfileConfigSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 27, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("usercfg", 0), ("basecfg", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPptpProfileConfigSource.setStatus('current')
if mibBuilder.loadTexts: ltmPptpProfileConfigSource.setDescription('The state that specifies whether this is a base/pre-configured profile or user defined profile.')
ltmPptpProfileDefaultName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 27, 1, 2, 1, 4), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPptpProfileDefaultName.setStatus('current')
if mibBuilder.loadTexts: ltmPptpProfileDefaultName.setDescription('The name of the profile from which the specified profile derives its attribute default values.')
ltmPptpProfileLogServerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 27, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPptpProfileLogServerIp.setStatus('current')
if mibBuilder.loadTexts: ltmPptpProfileLogServerIp.setDescription("state indicate whether the log messages for call establishment/disconnect include the server's ip address.")
ltmPptpProfileLogPublisher = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 27, 1, 2, 1, 6), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPptpProfileLogPublisher.setStatus('current')
if mibBuilder.loadTexts: ltmPptpProfileLogPublisher.setDescription('Specifies the name of the log publisher for PPTP events.')
ltmPptpProfileStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 27, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmPptpProfileStatResetStats.setStatus('current')
if mibBuilder.loadTexts: ltmPptpProfileStatResetStats.setDescription('The action to reset resetable statistics data in ltmPptpProfileStat. Setting this value to 1 will reset statistics data. Note, some statistics data may not be reset including data that are incremental counters.')
ltmPptpProfileStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 27, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPptpProfileStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmPptpProfileStatNumber.setDescription('The number of ltmPptpProfileStat entries in the table.')
ltmPptpProfileStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 27, 2, 3), )
if mibBuilder.loadTexts: ltmPptpProfileStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmPptpProfileStatTable.setDescription('A table containing statistics information about the PPTP profile.')
ltmPptpProfileStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 27, 2, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmPptpProfileStatName"))
if mibBuilder.loadTexts: ltmPptpProfileStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmPptpProfileStatEntry.setDescription('Columns in the ltmPptpProfileStat Table')
ltmPptpProfileStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 27, 2, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPptpProfileStatName.setStatus('current')
if mibBuilder.loadTexts: ltmPptpProfileStatName.setDescription('The name of the PPTP profile.')
ltmPptpProfileStatStartRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 27, 2, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPptpProfileStatStartRequests.setStatus('current')
if mibBuilder.loadTexts: ltmPptpProfileStatStartRequests.setDescription('Number of PPTP control messages used to establish the control connection between a server and a client.')
ltmPptpProfileStatStartReplies = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 27, 2, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPptpProfileStatStartReplies.setStatus('current')
if mibBuilder.loadTexts: ltmPptpProfileStatStartReplies.setDescription('Number of PPTP control messages sent in reply to a received Start-Control-Connection-Request message.')
ltmPptpProfileStatStopRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 27, 2, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPptpProfileStatStopRequests.setStatus('current')
if mibBuilder.loadTexts: ltmPptpProfileStatStopRequests.setDescription('Number of PPTP control messages sent by one peer of a client-server control connection to inform the other peer that the control connection should be closed.')
ltmPptpProfileStatStopReplies = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 27, 2, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPptpProfileStatStopReplies.setStatus('current')
if mibBuilder.loadTexts: ltmPptpProfileStatStopReplies.setDescription('Number of PPTP control messages sent by one peer of a client-server control connection upon receipt of a Stop-Control-Connection-Request from the other peer.')
ltmPptpProfileStatEchoRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 27, 2, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPptpProfileStatEchoRequests.setStatus('current')
if mibBuilder.loadTexts: ltmPptpProfileStatEchoRequests.setDescription('Number of PPTP control messages sent by either peer of a client-server control connection.')
ltmPptpProfileStatEchoReplies = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 27, 2, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPptpProfileStatEchoReplies.setStatus('current')
if mibBuilder.loadTexts: ltmPptpProfileStatEchoReplies.setDescription('Number of PPTP control messages sent by either peer of a client-server control connection in response to the receipt of an Echo-Request.')
ltmPptpProfileStatOutgoingCallRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 27, 2, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPptpProfileStatOutgoingCallRequests.setStatus('current')
if mibBuilder.loadTexts: ltmPptpProfileStatOutgoingCallRequests.setDescription('Number of PPTP control messages sent by the server to the client to indicate that an outbound call from the client is to be established.')
ltmPptpProfileStatOutgoingCallReplies = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 27, 2, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPptpProfileStatOutgoingCallReplies.setStatus('current')
if mibBuilder.loadTexts: ltmPptpProfileStatOutgoingCallReplies.setDescription('Number of PPTP control messages sent by the client to the server in response to a received Outgoing-Call-Request message.')
ltmPptpProfileStatCallClearRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 27, 2, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPptpProfileStatCallClearRequests.setStatus('current')
if mibBuilder.loadTexts: ltmPptpProfileStatCallClearRequests.setDescription('Number of PPTP control messages sent by the server to the client indicating that a particular call is to be disconnected.')
ltmPptpProfileStatCallDisconnectNotifies = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 27, 2, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPptpProfileStatCallDisconnectNotifies.setStatus('current')
if mibBuilder.loadTexts: ltmPptpProfileStatCallDisconnectNotifies.setDescription('Number of PPTP Call-Disconnect-Notify control messages sent by the client to the server. Its purpose is to inform the server of both the disconnection and the reason for it.')
ltmPptpProfileStatWanErrorNotifies = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 27, 2, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPptpProfileStatWanErrorNotifies.setStatus('current')
if mibBuilder.loadTexts: ltmPptpProfileStatWanErrorNotifies.setDescription('Number of WAN-Error-Notify messages sent by the client to the server to indicate WAN error conditions (conditions that occur on the interface supporting PPP).')
ltmPptpProfileStatSetLinkInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 27, 2, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPptpProfileStatSetLinkInfo.setStatus('current')
if mibBuilder.loadTexts: ltmPptpProfileStatSetLinkInfo.setDescription('Number of PPTP control messages sent by the server to the client to set PPP-negotiated options.')
ltmPptpProfileStatActiveCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 27, 2, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPptpProfileStatActiveCalls.setStatus('current')
if mibBuilder.loadTexts: ltmPptpProfileStatActiveCalls.setDescription('Number of active PPTP calls.')
ltmPptpProfileStatTotalCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 27, 2, 3, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPptpProfileStatTotalCalls.setStatus('current')
if mibBuilder.loadTexts: ltmPptpProfileStatTotalCalls.setDescription('Total number of PPTP calls served.')
ltmPptpProfileStatFailedCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 27, 2, 3, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPptpProfileStatFailedCalls.setStatus('current')
if mibBuilder.loadTexts: ltmPptpProfileStatFailedCalls.setDescription('Total number of PPTP calls that failed.')
ltmPcpProfileNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 28, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPcpProfileNumber.setStatus('current')
if mibBuilder.loadTexts: ltmPcpProfileNumber.setDescription('The number of ltmPcpProfile entries in the table.')
ltmPcpProfileTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 28, 2, 2), )
if mibBuilder.loadTexts: ltmPcpProfileTable.setStatus('current')
if mibBuilder.loadTexts: ltmPcpProfileTable.setDescription('A table containing information about the Port Control Protocol (PCP) profile.')
ltmPcpProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 28, 2, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmPcpProfileName"))
if mibBuilder.loadTexts: ltmPcpProfileEntry.setStatus('current')
if mibBuilder.loadTexts: ltmPcpProfileEntry.setDescription('Columns in the ltmPcpProfile Table')
ltmPcpProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 28, 2, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPcpProfileName.setStatus('current')
if mibBuilder.loadTexts: ltmPcpProfileName.setDescription('The name of a PCP profile.')
ltmPcpProfileConfigSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 28, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("usercfg", 0), ("basecfg", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPcpProfileConfigSource.setStatus('current')
if mibBuilder.loadTexts: ltmPcpProfileConfigSource.setDescription('The state that specifies whether this is a base/pre-configured profile or user defined profile.')
ltmPcpProfileDefaultName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 28, 2, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPcpProfileDefaultName.setStatus('current')
if mibBuilder.loadTexts: ltmPcpProfileDefaultName.setDescription('The name of the profile from which the specified profile derives its attribute default values.')
ltmPcpProfileListeningPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 28, 2, 2, 1, 4), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPcpProfileListeningPort.setStatus('current')
if mibBuilder.loadTexts: ltmPcpProfileListeningPort.setDescription('The port which Port Control Protocol listener listens for PCP client-to-server request message.')
ltmPcpProfileMulticastPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 28, 2, 2, 1, 5), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPcpProfileMulticastPort.setStatus('current')
if mibBuilder.loadTexts: ltmPcpProfileMulticastPort.setDescription('The port which Port Control Protocol sends server-to-client multicast notifications.')
ltmPcpProfileMinMappingLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 28, 2, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPcpProfileMinMappingLifetime.setStatus('current')
if mibBuilder.loadTexts: ltmPcpProfileMinMappingLifetime.setDescription('Minimum duration of a mapping.')
ltmPcpProfileMaxMappingLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 28, 2, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPcpProfileMaxMappingLifetime.setStatus('current')
if mibBuilder.loadTexts: ltmPcpProfileMaxMappingLifetime.setDescription('Maximum allowed duration of a mapping.')
ltmPcpProfileMapRecycleDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 28, 2, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPcpProfileMapRecycleDelay.setStatus('current')
if mibBuilder.loadTexts: ltmPcpProfileMapRecycleDelay.setDescription('How long to wait before reusing a mapping that was deleted.')
ltmPcpProfileMapLimitPerClient = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 28, 2, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPcpProfileMapLimitPerClient.setStatus('current')
if mibBuilder.loadTexts: ltmPcpProfileMapLimitPerClient.setDescription('Maximum number of mappings allowed per client.')
ltmPcpProfileMapFilterLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 28, 2, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPcpProfileMapFilterLimit.setStatus('current')
if mibBuilder.loadTexts: ltmPcpProfileMapFilterLimit.setDescription('Maximum number of filters allowed per mapping.')
ltmPcpProfileThirdPartyOption = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 28, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPcpProfileThirdPartyOption.setStatus('current')
if mibBuilder.loadTexts: ltmPcpProfileThirdPartyOption.setDescription('If true, allows a PCP client to create mappings on behalf of another internal host.')
ltmPcpProfileRuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 28, 2, 2, 1, 12), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPcpProfileRuleName.setStatus('current')
if mibBuilder.loadTexts: ltmPcpProfileRuleName.setDescription('The name of the rule that the specified profile will be using.')
ltmPcpPrefixNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 28, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPcpPrefixNumber.setStatus('current')
if mibBuilder.loadTexts: ltmPcpPrefixNumber.setDescription('The number of ltmPcpPrefix entries in the table.')
ltmPcpPrefixTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 28, 1, 2), )
if mibBuilder.loadTexts: ltmPcpPrefixTable.setStatus('current')
if mibBuilder.loadTexts: ltmPcpPrefixTable.setDescription('A table containing information of PCP prefix.')
ltmPcpPrefixEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 28, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmPcpPrefixName"))
if mibBuilder.loadTexts: ltmPcpPrefixEntry.setStatus('current')
if mibBuilder.loadTexts: ltmPcpPrefixEntry.setDescription('Columns in the ltmPcpPrefix Table')
ltmPcpPrefixName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 28, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPcpPrefixName.setStatus('current')
if mibBuilder.loadTexts: ltmPcpPrefixName.setDescription('The name of a PCP prefix node.')
ltmPcpPrefixAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 28, 1, 2, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPcpPrefixAddrType.setStatus('current')
if mibBuilder.loadTexts: ltmPcpPrefixAddrType.setDescription('The IP address type of ltmPcpPrefixAddr.')
ltmPcpPrefixAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 28, 1, 2, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPcpPrefixAddr.setStatus('current')
if mibBuilder.loadTexts: ltmPcpPrefixAddr.setDescription('The IP address of a node. It is interpreted within the context of a ltmPcpPrefixAddrType value.')
ltmPcpPrefixProfilePcpNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 28, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPcpPrefixProfilePcpNumber.setStatus('current')
if mibBuilder.loadTexts: ltmPcpPrefixProfilePcpNumber.setDescription('The number of ltmPcpPrefixProfilePcp entries in the table.')
ltmPcpPrefixProfilePcpTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 28, 3, 2), )
if mibBuilder.loadTexts: ltmPcpPrefixProfilePcpTable.setStatus('current')
if mibBuilder.loadTexts: ltmPcpPrefixProfilePcpTable.setDescription('A table containing information of PCP profile prefix, or third-party-subnets.')
ltmPcpPrefixProfilePcpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 28, 3, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmPcpPrefixProfilePcpName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmPcpPrefixProfilePcpPcpPrefixName"))
if mibBuilder.loadTexts: ltmPcpPrefixProfilePcpEntry.setStatus('current')
if mibBuilder.loadTexts: ltmPcpPrefixProfilePcpEntry.setDescription('Columns in the ltmPcpPrefixProfilePcp Table')
ltmPcpPrefixProfilePcpPcpPrefixName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 28, 3, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPcpPrefixProfilePcpPcpPrefixName.setStatus('current')
if mibBuilder.loadTexts: ltmPcpPrefixProfilePcpPcpPrefixName.setDescription('The name of a PCP prefix node.')
ltmPcpPrefixProfilePcpName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 28, 3, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPcpPrefixProfilePcpName.setStatus('current')
if mibBuilder.loadTexts: ltmPcpPrefixProfilePcpName.setDescription('The name of a PCP profile.')
ltmPcpPrefixProfilePcpPrefixAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 28, 3, 2, 1, 3), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPcpPrefixProfilePcpPrefixAddressType.setStatus('current')
if mibBuilder.loadTexts: ltmPcpPrefixProfilePcpPrefixAddressType.setDescription('The IP address type of ltmPcpPrefixProfilePcpPrefixAddress.')
ltmPcpPrefixProfilePcpPrefixAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 28, 3, 2, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPcpPrefixProfilePcpPrefixAddress.setStatus('current')
if mibBuilder.loadTexts: ltmPcpPrefixProfilePcpPrefixAddress.setDescription('The IP address of a node. It is interpreted within the context of a ltmPcpPrefixProfilePcpPrefixAddressType value.')
ltmPcpProfileStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 28, 4, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmPcpProfileStatResetStats.setStatus('current')
if mibBuilder.loadTexts: ltmPcpProfileStatResetStats.setDescription('The action to reset resetable statistics data in ltmPcpProfileStat. Setting this value to 1 will reset statistics data. Note, some statistics data may not be reset including data that are incremental counters.')
ltmPcpProfileStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 28, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPcpProfileStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmPcpProfileStatNumber.setDescription('The number of ltmPcpProfileStat entries in the table.')
ltmPcpProfileStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 28, 4, 3), )
if mibBuilder.loadTexts: ltmPcpProfileStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmPcpProfileStatTable.setDescription('A table containing statistics information about the Port Control Protocol (PCP) profile.')
ltmPcpProfileStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 28, 4, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmPcpProfileStatName"))
if mibBuilder.loadTexts: ltmPcpProfileStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmPcpProfileStatEntry.setDescription('Columns in the ltmPcpProfileStat Table')
ltmPcpProfileStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 28, 4, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPcpProfileStatName.setStatus('current')
if mibBuilder.loadTexts: ltmPcpProfileStatName.setDescription('The name of the PCP profile.')
ltmPcpProfileStatPcpAnnounceRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 28, 4, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPcpProfileStatPcpAnnounceRequests.setStatus('current')
if mibBuilder.loadTexts: ltmPcpProfileStatPcpAnnounceRequests.setDescription('The total number of Announce requests received.')
ltmPcpProfileStatPcpAnnounceResponsesUcast = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 28, 4, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPcpProfileStatPcpAnnounceResponsesUcast.setStatus('current')
if mibBuilder.loadTexts: ltmPcpProfileStatPcpAnnounceResponsesUcast.setDescription('The total number of unicast Announce responses transmitted.')
ltmPcpProfileStatPcpAnnounceResponsesMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 28, 4, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPcpProfileStatPcpAnnounceResponsesMulticast.setStatus('current')
if mibBuilder.loadTexts: ltmPcpProfileStatPcpAnnounceResponsesMulticast.setDescription('The total number of multicast Announce responses transmitted.')
ltmPcpProfileStatPcpMapRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 28, 4, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPcpProfileStatPcpMapRequests.setStatus('current')
if mibBuilder.loadTexts: ltmPcpProfileStatPcpMapRequests.setDescription('The total number of Map requests received.')
ltmPcpProfileStatPcpMapResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 28, 4, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPcpProfileStatPcpMapResponses.setStatus('current')
if mibBuilder.loadTexts: ltmPcpProfileStatPcpMapResponses.setDescription('The total number of Map responses transmitted.')
ltmPcpProfileStatPcpPeerRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 28, 4, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPcpProfileStatPcpPeerRequests.setStatus('current')
if mibBuilder.loadTexts: ltmPcpProfileStatPcpPeerRequests.setDescription('The total number of Peer requests received.')
ltmPcpProfileStatPcpPeerResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 28, 4, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPcpProfileStatPcpPeerResponses.setStatus('current')
if mibBuilder.loadTexts: ltmPcpProfileStatPcpPeerResponses.setDescription('The total number of Peer responses transmitted.')
ltmPcpProfileStatPcpErrorsInvalidRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 28, 4, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPcpProfileStatPcpErrorsInvalidRequest.setStatus('current')
if mibBuilder.loadTexts: ltmPcpProfileStatPcpErrorsInvalidRequest.setDescription('The total number of invalid or malformed PCP requests received.')
ltmPcpProfileStatPcpErrorsUnavailableResource = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 28, 4, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPcpProfileStatPcpErrorsUnavailableResource.setStatus('current')
if mibBuilder.loadTexts: ltmPcpProfileStatPcpErrorsUnavailableResource.setDescription('The total number of PCP requests received where the server has insufficient resources to complete the requested operation.')
ltmPcpProfileStatPcpErrorsNotAuthorized = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 28, 4, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPcpProfileStatPcpErrorsNotAuthorized.setStatus('current')
if mibBuilder.loadTexts: ltmPcpProfileStatPcpErrorsNotAuthorized.setDescription('The total number of PCP requests that generated (or caused) an unauthorized error when attempting to create a mapping.')
ltmPcpProfileStatPcpErrorsOther = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 28, 4, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPcpProfileStatPcpErrorsOther.setStatus('current')
if mibBuilder.loadTexts: ltmPcpProfileStatPcpErrorsOther.setDescription('The total number of PCP requests received that resulted in other errors.')
ltmDnsExpressStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 7, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmDnsExpressStatResetStats.setStatus('current')
if mibBuilder.loadTexts: ltmDnsExpressStatResetStats.setDescription('The action to reset resetable statistics data in ltmDnsExpressStat. Setting this value to 1 will reset statistics data. Note, some statistics data may not be reset including data that are incremental counters.')
ltmDnsExpressStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsExpressStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmDnsExpressStatNumber.setDescription('The number of ltmDnsExpressStat entries in the table.')
ltmDnsExpressStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 7, 3), )
if mibBuilder.loadTexts: ltmDnsExpressStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmDnsExpressStatTable.setDescription('A table containing statistics information about DNS Express zone transfer.')
ltmDnsExpressStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 7, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmDnsExpressStatName"))
if mibBuilder.loadTexts: ltmDnsExpressStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmDnsExpressStatEntry.setDescription('Columns in the ltmDnsExpressStat Table')
ltmDnsExpressStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 7, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsExpressStatName.setStatus('current')
if mibBuilder.loadTexts: ltmDnsExpressStatName.setDescription('The name of DNS zone.')
ltmDnsExpressStatDnsxQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 7, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsExpressStatDnsxQueries.setStatus('current')
if mibBuilder.loadTexts: ltmDnsExpressStatDnsxQueries.setDescription('Total number of queries sent to DNS Express.')
ltmDnsExpressStatDnsxResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 7, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsExpressStatDnsxResponses.setStatus('current')
if mibBuilder.loadTexts: ltmDnsExpressStatDnsxResponses.setDescription('Total number of queries answered by DNS Express.')
ltmDnsExpressStatDnsxNotifiesRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 7, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsExpressStatDnsxNotifiesRecv.setStatus('current')
if mibBuilder.loadTexts: ltmDnsExpressStatDnsxNotifiesRecv.setDescription('Total number of zone notifies received by DNS Express.')
ltmDnsExpressStatAxfrQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 7, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsExpressStatAxfrQueries.setStatus('current')
if mibBuilder.loadTexts: ltmDnsExpressStatAxfrQueries.setDescription('Total number of AXFR queries.')
ltmDnsExpressStatIxfrQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 7, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsExpressStatIxfrQueries.setStatus('current')
if mibBuilder.loadTexts: ltmDnsExpressStatIxfrQueries.setDescription('Total number of IXFR queries.')
ltmDnsExpressStatXfrQueriesAclFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 7, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsExpressStatXfrQueriesAclFailed.setStatus('current')
if mibBuilder.loadTexts: ltmDnsExpressStatXfrQueriesAclFailed.setDescription('Total number of zone transfer queries whose source IP address is not in the ACL.')
ltmDnsExpressStatXfrNotifiesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 7, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsExpressStatXfrNotifiesSent.setStatus('current')
if mibBuilder.loadTexts: ltmDnsExpressStatXfrNotifiesSent.setDescription('Total number of zone notifies sent to the clients.')
ltmDnsExpressStatDnsxXfrMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 7, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsExpressStatDnsxXfrMsgs.setStatus('current')
if mibBuilder.loadTexts: ltmDnsExpressStatDnsxXfrMsgs.setDescription('Total number of zone transfer messages sent to the clients from DNS Express.')
ltmDnsExpressStatXfrNotifiesFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 7, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsExpressStatXfrNotifiesFailed.setStatus('current')
if mibBuilder.loadTexts: ltmDnsExpressStatXfrNotifiesFailed.setDescription('Total number of failures when sending notifies to the clients.')
ltmDnsExpressStatTsigMissing = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 7, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsExpressStatTsigMissing.setStatus('current')
if mibBuilder.loadTexts: ltmDnsExpressStatTsigMissing.setDescription('Total number of zone transfer queries without TSIG while it is required.')
ltmDnsExpressStatTsigNotRequired = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 7, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsExpressStatTsigNotRequired.setStatus('current')
if mibBuilder.loadTexts: ltmDnsExpressStatTsigNotRequired.setDescription('Total number of zone transfer queries without TSIG and TSIG is not required.')
ltmDnsExpressStatTsigVerified = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 7, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsExpressStatTsigVerified.setStatus('current')
if mibBuilder.loadTexts: ltmDnsExpressStatTsigVerified.setDescription('Total number of zone transfer queries whose HMAC is verified.')
ltmDnsExpressStatTsigBadKey = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 7, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsExpressStatTsigBadKey.setStatus('current')
if mibBuilder.loadTexts: ltmDnsExpressStatTsigBadKey.setDescription('Total number of zone transfer queries with a bad key.')
ltmDnsExpressStatTsigBadSig = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 7, 3, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsExpressStatTsigBadSig.setStatus('current')
if mibBuilder.loadTexts: ltmDnsExpressStatTsigBadSig.setDescription('Total number of zone transfer queries with a bad HMAC.')
ltmDnsExpressStatTsigBadTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 7, 3, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsExpressStatTsigBadTime.setStatus('current')
if mibBuilder.loadTexts: ltmDnsExpressStatTsigBadTime.setDescription('Total number of zone transfer queries with a bad time.')
ltmDnsServerStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 8, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmDnsServerStatResetStats.setStatus('current')
if mibBuilder.loadTexts: ltmDnsServerStatResetStats.setDescription('The action to reset resetable statistics data in ltmDnsServerStat. Setting this value to 1 will reset statistics data. Note, some statistics data may not be reset including data that are incremental counters.')
ltmDnsServerStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 8, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsServerStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmDnsServerStatNumber.setDescription('The number of ltmDnsServerStat entries in the table.')
ltmDnsServerStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 8, 3), )
if mibBuilder.loadTexts: ltmDnsServerStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmDnsServerStatTable.setDescription('A table containing statistics information about DNS server zone transfer.')
ltmDnsServerStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 8, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmDnsServerStatName"))
if mibBuilder.loadTexts: ltmDnsServerStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmDnsServerStatEntry.setDescription('Columns in the ltmDnsServerStat Table')
ltmDnsServerStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 8, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsServerStatName.setStatus('current')
if mibBuilder.loadTexts: ltmDnsServerStatName.setDescription('The name of DNS server.')
ltmDnsServerStatXfrQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 8, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsServerStatXfrQueries.setStatus('current')
if mibBuilder.loadTexts: ltmDnsServerStatXfrQueries.setDescription('Total number of zone transfer queries.')
ltmDnsServerStatXfrResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 8, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsServerStatXfrResponses.setStatus('current')
if mibBuilder.loadTexts: ltmDnsServerStatXfrResponses.setDescription('Total number of zone transfer responses.')
ltmDnsServerStatXfrNotifies = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 8, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsServerStatXfrNotifies.setStatus('current')
if mibBuilder.loadTexts: ltmDnsServerStatXfrNotifies.setDescription('Total number of zone transfer notifies.')
ltmDnsServerStatXfrNotifyFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 8, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsServerStatXfrNotifyFailed.setStatus('current')
if mibBuilder.loadTexts: ltmDnsServerStatXfrNotifyFailed.setDescription('Total number of zone transfer notify failures.')
ltmDnsCacheForwardZoneNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheForwardZoneNumber.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheForwardZoneNumber.setDescription('The number of ltmDnsCacheForwardZone entries in the table.')
ltmDnsCacheForwardZoneTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 9, 2), )
if mibBuilder.loadTexts: ltmDnsCacheForwardZoneTable.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheForwardZoneTable.setDescription('A table containing information about DNS Cache Forward Zone.')
ltmDnsCacheForwardZoneEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 9, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmDnsCacheForwardZoneName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmDnsCacheForwardZoneCacheName"))
if mibBuilder.loadTexts: ltmDnsCacheForwardZoneEntry.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheForwardZoneEntry.setDescription('Columns in the ltmDnsCacheForwardZone Table')
ltmDnsCacheForwardZoneName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 9, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheForwardZoneName.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheForwardZoneName.setDescription('The name of DNS Cache Forward Zone.')
ltmDnsCacheForwardZoneCacheName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 9, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheForwardZoneCacheName.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheForwardZoneCacheName.setDescription('The name of DNS Cache to which the specified Forward Zone belongs.')
ltmDnsCacheForwardZoneNameServerNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheForwardZoneNameServerNumber.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheForwardZoneNameServerNumber.setDescription('The number of ltmDnsCacheForwardZoneNameServer entries in the table.')
ltmDnsCacheForwardZoneNameServerTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 10, 2), )
if mibBuilder.loadTexts: ltmDnsCacheForwardZoneNameServerTable.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheForwardZoneNameServerTable.setDescription('A table containing information about DNS Cache Forward Zone Nameserver.')
ltmDnsCacheForwardZoneNameServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 10, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmDnsCacheForwardZoneNameServerAddrType"), (0, "F5-BIGIP-LOCAL-MIB", "ltmDnsCacheForwardZoneNameServerAddr"), (0, "F5-BIGIP-LOCAL-MIB", "ltmDnsCacheForwardZoneNameServerPort"), (0, "F5-BIGIP-LOCAL-MIB", "ltmDnsCacheForwardZoneNameServerForwardZoneName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmDnsCacheForwardZoneNameServerCacheName"))
if mibBuilder.loadTexts: ltmDnsCacheForwardZoneNameServerEntry.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheForwardZoneNameServerEntry.setDescription('Columns in the ltmDnsCacheForwardZoneNameServer Table')
ltmDnsCacheForwardZoneNameServerAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 10, 2, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheForwardZoneNameServerAddrType.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheForwardZoneNameServerAddrType.setDescription('The IP address type of the ltmDnsCacheForwardZoneNameServerIp.')
ltmDnsCacheForwardZoneNameServerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 10, 2, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheForwardZoneNameServerAddr.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheForwardZoneNameServerAddr.setDescription('The IP address of the specified nameserver. It is interpreted within the context of a ltmDnsCacheForwardZoneNameServerIpType')
ltmDnsCacheForwardZoneNameServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 10, 2, 1, 3), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheForwardZoneNameServerPort.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheForwardZoneNameServerPort.setDescription('The port of the specified nameserver.')
ltmDnsCacheForwardZoneNameServerForwardZoneName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 10, 2, 1, 4), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheForwardZoneNameServerForwardZoneName.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheForwardZoneNameServerForwardZoneName.setDescription('The name of DNS Cache Forward Zone to which the specified nameserver belongs.')
ltmDnsCacheForwardZoneNameServerCacheName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 10, 2, 1, 5), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheForwardZoneNameServerCacheName.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheForwardZoneNameServerCacheName.setDescription("The name of DNS Cache to which the specified nameserver, and it's parent Forward Zone, belongs.")
ltmClientSslCertKeyChainNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslCertKeyChainNumber.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslCertKeyChainNumber.setDescription('The number of ltmClientSslCertKeyChain entries in the table.')
ltmClientSslCertKeyChainTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 3, 2), )
if mibBuilder.loadTexts: ltmClientSslCertKeyChainTable.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslCertKeyChainTable.setDescription('A table containing cert, key and chain configuration of client-side SSL profiles.')
ltmClientSslCertKeyChainEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 3, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmClientSslCertKeyChainName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmClientSslCertKeyChainClientssl"))
if mibBuilder.loadTexts: ltmClientSslCertKeyChainEntry.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslCertKeyChainEntry.setDescription('Columns in the ltmClientSslCertKeyChain Table')
ltmClientSslCertKeyChainName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 3, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslCertKeyChainName.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslCertKeyChainName.setDescription('The name of a certkeychain set.')
ltmClientSslCertKeyChainClientssl = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 3, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslCertKeyChainClientssl.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslCertKeyChainClientssl.setDescription('The name of a ClientSSL profile the set is related to.')
ltmClientSslCertKeyChainCert = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 3, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslCertKeyChainCert.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslCertKeyChainCert.setDescription('The certificate file name.')
ltmClientSslCertKeyChainKey = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 3, 2, 1, 4), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslCertKeyChainKey.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslCertKeyChainKey.setDescription('The key file name.')
ltmClientSslCertKeyChainChain = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 3, 2, 1, 5), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslCertKeyChainChain.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslCertKeyChainChain.setDescription('The certificate chain file name.')
ltmClientSslCertKeyChainOcspStplParams = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 3, 2, 1, 6), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslCertKeyChainOcspStplParams.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslCertKeyChainOcspStplParams.setDescription('The name of the OCSP Stapling Parameters object.')
ltmDosAttackDataStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmDosAttackDataStatResetStats.setStatus('current')
if mibBuilder.loadTexts: ltmDosAttackDataStatResetStats.setDescription('The action to reset resetable statistics data in ltmDosAttackDataStat. Setting this value to 1 will reset statistics data. Note, some statistics data may not be reset including data that are incremental counters.')
ltmDosAttackDataStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosAttackDataStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmDosAttackDataStatNumber.setDescription('The number of ltmDosAttackDataStat entries in the table.')
ltmDosAttackDataStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 2, 3), )
if mibBuilder.loadTexts: ltmDosAttackDataStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmDosAttackDataStatTable.setDescription('A table containing statistic information of DoS attack data.')
ltmDosAttackDataStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 2, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmDosAttackDataStatDeviceName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmDosAttackDataStatVectorName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmDosAttackDataStatAttackType"))
if mibBuilder.loadTexts: ltmDosAttackDataStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmDosAttackDataStatEntry.setDescription('Columns in the ltmDosAttackDataStat Table')
ltmDosAttackDataStatDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 2, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosAttackDataStatDeviceName.setStatus('current')
if mibBuilder.loadTexts: ltmDosAttackDataStatDeviceName.setDescription('The name of the DoS Device.')
ltmDosAttackDataStatVectorName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 2, 3, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosAttackDataStatVectorName.setStatus('current')
if mibBuilder.loadTexts: ltmDosAttackDataStatVectorName.setDescription('The name of the DoS Vector.')
ltmDosAttackDataStatAttackType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103))).clone(namedValues=NamedValues(("ether-brdcst-pkt", 1), ("ether-multicst-pkt", 2), ("ether-mac-sa-eq-da", 3), ("arp-flood", 4), ("bad-ver", 5), ("hdr-len-too-short", 6), ("hdr-len-gt-l2-len", 7), ("ip-len-gt-l2-len", 8), ("l2-len-ggt-ip-len", 9), ("no-l4", 10), ("bad-ttl-val", 11), ("ttl-leq-one", 12), ("ip-err-chksum", 13), ("ip-opt-frames", 14), ("ip-frag-flood", 15), ("bad-igmp-frame", 16), ("ip-short-frag", 17), ("igmp-flood", 18), ("bad-ipv6-ver", 19), ("ipv6-len-gt-l2-len", 20), ("payload-len-ls-l2-len", 21), ("too-many-ext-hdrs", 22), ("dup-ext-hdr", 23), ("ext-hdr-too-large", 24), ("l4-ext-hdrs-go-end", 25), ("bad-ipv6-hop-cnt", 26), ("hop-cnt-leq-one", 27), ("routing-header-type-0", 28), ("ipv6-ext-hdr-frames", 29), ("ipv6-frag-flood", 30), ("bad-ext-hdr-order", 31), ("ipv6-short-frag", 32), ("igmp-frag-flood", 33), ("tcp-hdr-len-too-short", 34), ("tcp-hdr-len-gt-l2-len", 35), ("unk-tcp-opt-type", 36), ("opt-present-with-illegal-len", 37), ("tcp-opt-overruns-tcp-hdr", 38), ("bad-tcp-chksum", 39), ("bad-tcp-flags-all-set", 40), ("bad-tcp-flags-all-clr", 41), ("syn-and-fin-set", 42), ("fin-only-set", 43), ("tcp-syn-flood", 44), ("tcp-synack-flood", 45), ("tcp-rst-flood", 46), ("bad-icmp-chksum", 47), ("tcp-bad-urg", 48), ("tcp-window-size", 49), ("ipv6-atomic-frag", 50), ("bad-udp-hdr", 51), ("bad-udp-chksum", 52), ("ip-bad-src", 53), ("ipv6-bad-src", 54), ("bad-icmp-frame", 55), ("icmpv4-flood", 56), ("icmp-frag", 57), ("icmp-frame-too-large", 58), ("icmpv6-flood", 59), ("host-unreachable", 60), ("tidcmp", 61), ("udp-flood", 62), ("dns-oversize", 63), ("land-attack", 64), ("dns-response-flood", 65), ("dns-malformed", 66), ("dns-qdcount-limit", 67), ("dns-any-query", 68), ("dns-a-query", 69), ("dns-ptr-query", 70), ("dns-ns-query", 71), ("dns-soa-query", 72), ("dns-cname-query", 73), ("dns-mx-query", 74), ("dns-aaaa-query", 75), ("dns-txt-query", 76), ("dns-srv-query", 77), ("dns-axfr-query", 78), ("dns-ixfr-query", 79), ("dns-other-query", 80), ("sip-malformed", 81), ("sip-invite-method", 82), ("sip-ack-method", 83), ("sip-options-method", 84), ("sip-bye-method", 85), ("sip-cancel-method", 86), ("sip-register-method", 87), ("sip-publish-method", 88), ("sip-notify-method", 89), ("sip-subscribe-method", 90), ("sip-message-method", 91), ("sip-prack-method", 92), ("sip-other-method", 93), ("ip-other-frag", 94), ("ipv6-other-frag", 95), ("ip-overlap-frag", 96), ("ipv6-overlap-frag", 97), ("bad-ip-opt", 98), ("tcp-ack-flood", 99), ("sweep", 101), ("flood", 102), ("unk-ipopt-type", 103)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosAttackDataStatAttackType.setStatus('current')
if mibBuilder.loadTexts: ltmDosAttackDataStatAttackType.setDescription('The DoS attack vector type.')
ltmDosAttackDataStatAttackDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 2, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosAttackDataStatAttackDetected.setStatus('current')
if mibBuilder.loadTexts: ltmDosAttackDataStatAttackDetected.setDescription('A boolean representing whether or not an attack is currently occurring.')
ltmDosAttackDataStatAttackCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 2, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosAttackDataStatAttackCount.setStatus('current')
if mibBuilder.loadTexts: ltmDosAttackDataStatAttackCount.setDescription('The number of attacks detected.')
ltmDosAttackDataStatStats = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 2, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosAttackDataStatStats.setStatus('current')
if mibBuilder.loadTexts: ltmDosAttackDataStatStats.setDescription('The number of attack packets received.')
ltmDosAttackDataStatStatsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 2, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosAttackDataStatStatsRate.setStatus('current')
if mibBuilder.loadTexts: ltmDosAttackDataStatStatsRate.setDescription('The number of attack packets received per second.')
ltmDosAttackDataStatStats1m = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 2, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosAttackDataStatStats1m.setStatus('current')
if mibBuilder.loadTexts: ltmDosAttackDataStatStats1m.setDescription('The number of attack packets received in the last minute.')
ltmDosAttackDataStatStats1h = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 2, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosAttackDataStatStats1h.setStatus('current')
if mibBuilder.loadTexts: ltmDosAttackDataStatStats1h.setDescription('The number of attack packets received in the last hour.')
ltmDosAttackDataStatDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 2, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosAttackDataStatDrops.setStatus('current')
if mibBuilder.loadTexts: ltmDosAttackDataStatDrops.setDescription('The number of attack packets dropped.')
ltmDosAttackDataStatDropsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 2, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosAttackDataStatDropsRate.setStatus('current')
if mibBuilder.loadTexts: ltmDosAttackDataStatDropsRate.setDescription('The number of attack packets dropped per second.')
ltmDosAttackDataStatDrops1m = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 2, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosAttackDataStatDrops1m.setStatus('current')
if mibBuilder.loadTexts: ltmDosAttackDataStatDrops1m.setDescription('The number of attack packets dropped in the last minute.')
ltmDosAttackDataStatDrops1h = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 2, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosAttackDataStatDrops1h.setStatus('current')
if mibBuilder.loadTexts: ltmDosAttackDataStatDrops1h.setDescription('The number of attack packets dropped in the last hour.')
ltmDosAttackDataStatWlCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 2, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosAttackDataStatWlCount.setStatus('current')
if mibBuilder.loadTexts: ltmDosAttackDataStatWlCount.setDescription('Total number of whitelist hits.')
ltmNetworkAttackDataStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 16, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmNetworkAttackDataStatResetStats.setStatus('current')
if mibBuilder.loadTexts: ltmNetworkAttackDataStatResetStats.setDescription('The action to reset resetable statistics data in ltmNetworkAttackDataStat. Setting this value to 1 will reset statistics data. Note, some statistics data may not be reset including data that are incremental counters.')
ltmNetworkAttackDataStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 16, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNetworkAttackDataStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmNetworkAttackDataStatNumber.setDescription('The number of ltmNetworkAttackDataStat entries in the table.')
ltmNetworkAttackDataStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 16, 3), )
if mibBuilder.loadTexts: ltmNetworkAttackDataStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmNetworkAttackDataStatTable.setDescription('A table containing statistic information of Network DoS attack data.')
ltmNetworkAttackDataStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 16, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmNetworkAttackDataStatProfileName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmNetworkAttackDataStatVectorName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmNetworkAttackDataStatAttackType"), (0, "F5-BIGIP-LOCAL-MIB", "ltmNetworkAttackDataStatVsName"))
if mibBuilder.loadTexts: ltmNetworkAttackDataStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmNetworkAttackDataStatEntry.setDescription('Columns in the ltmNetworkAttackDataStat Table')
ltmNetworkAttackDataStatProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 16, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNetworkAttackDataStatProfileName.setStatus('current')
if mibBuilder.loadTexts: ltmNetworkAttackDataStatProfileName.setDescription('The name of the DoS Profile.')
ltmNetworkAttackDataStatVsName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 16, 3, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNetworkAttackDataStatVsName.setStatus('current')
if mibBuilder.loadTexts: ltmNetworkAttackDataStatVsName.setDescription('The name of the virtual server.')
ltmNetworkAttackDataStatVectorName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 16, 3, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNetworkAttackDataStatVectorName.setStatus('current')
if mibBuilder.loadTexts: ltmNetworkAttackDataStatVectorName.setDescription('The name of the DoS Vector.')
ltmNetworkAttackDataStatAttackType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 16, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20))).clone(namedValues=NamedValues(("ip-opt-frames", 1), ("ip-frag-flood", 2), ("too-many-ext-hdrs", 3), ("ext-hdr-too-large", 4), ("ip-low-ttl", 5), ("hop-cnt-low", 6), ("ipv6-ext-hdr-frames", 7), ("ipv6-frag-flood", 8), ("unk-tcp-opt-type", 9), ("opt-present-with-illegal-len", 10), ("tcp-opt-overruns-tcp-hdr", 11), ("tcp-syn-flood", 12), ("tcp-synack-flood", 13), ("tcp-rst-flood", 14), ("icmpv4-flood", 15), ("icmp-frag", 16), ("icmpv6-flood", 17), ("host-unreachable", 18), ("tidcmp", 19), ("udp-flood", 20)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNetworkAttackDataStatAttackType.setStatus('current')
if mibBuilder.loadTexts: ltmNetworkAttackDataStatAttackType.setDescription('The DoS attack vector type.')
ltmNetworkAttackDataStatAttackDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 16, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNetworkAttackDataStatAttackDetected.setStatus('current')
if mibBuilder.loadTexts: ltmNetworkAttackDataStatAttackDetected.setDescription('A boolean representing whether or not an attack is currently occurring.')
ltmNetworkAttackDataStatAttackCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 16, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNetworkAttackDataStatAttackCount.setStatus('current')
if mibBuilder.loadTexts: ltmNetworkAttackDataStatAttackCount.setDescription('The number of attacks detected.')
ltmNetworkAttackDataStatStats = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 16, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNetworkAttackDataStatStats.setStatus('current')
if mibBuilder.loadTexts: ltmNetworkAttackDataStatStats.setDescription('The number of attack packets received.')
ltmNetworkAttackDataStatStatsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 16, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNetworkAttackDataStatStatsRate.setStatus('current')
if mibBuilder.loadTexts: ltmNetworkAttackDataStatStatsRate.setDescription('The number of attack packets received per second.')
ltmNetworkAttackDataStatStats1m = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 16, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNetworkAttackDataStatStats1m.setStatus('current')
if mibBuilder.loadTexts: ltmNetworkAttackDataStatStats1m.setDescription('The number of attack packets received in the last minute.')
ltmNetworkAttackDataStatStats1h = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 16, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNetworkAttackDataStatStats1h.setStatus('current')
if mibBuilder.loadTexts: ltmNetworkAttackDataStatStats1h.setDescription('The number of attack packets received in the last hour.')
ltmNetworkAttackDataStatDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 16, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNetworkAttackDataStatDrops.setStatus('current')
if mibBuilder.loadTexts: ltmNetworkAttackDataStatDrops.setDescription('The number of attack packets dropped.')
ltmNetworkAttackDataStatDropsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 16, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNetworkAttackDataStatDropsRate.setStatus('current')
if mibBuilder.loadTexts: ltmNetworkAttackDataStatDropsRate.setDescription('The number of attack packets dropped per second.')
ltmNetworkAttackDataStatDrops1m = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 16, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNetworkAttackDataStatDrops1m.setStatus('current')
if mibBuilder.loadTexts: ltmNetworkAttackDataStatDrops1m.setDescription('The number of attack packets dropped in the last minute.')
ltmNetworkAttackDataStatDrops1h = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 16, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNetworkAttackDataStatDrops1h.setStatus('current')
if mibBuilder.loadTexts: ltmNetworkAttackDataStatDrops1h.setDescription('The number of attack packets dropped in the last hour.')
ltmNetworkAttackDataStatWlCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 16, 3, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNetworkAttackDataStatWlCount.setStatus('current')
if mibBuilder.loadTexts: ltmNetworkAttackDataStatWlCount.setDescription('Total number of whitelist hits.')
ltmFwAdminIpRuleStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwAdminIpRuleStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmFwAdminIpRuleStatNumber.setDescription('The number of ltmFwAdminIpRuleStat entries in the table.')
ltmFwAdminIpRuleStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 3, 2), )
if mibBuilder.loadTexts: ltmFwAdminIpRuleStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmFwAdminIpRuleStatTable.setDescription('A table containing statistic information of Management IP Firewall Rules.')
ltmFwAdminIpRuleStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 3, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmFwAdminIpRuleStatRuleName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmFwAdminIpRuleStatContainerName"))
if mibBuilder.loadTexts: ltmFwAdminIpRuleStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmFwAdminIpRuleStatEntry.setDescription('Columns in the ltmFwAdminIpRuleStat Table')
ltmFwAdminIpRuleStatRuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 3, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwAdminIpRuleStatRuleName.setStatus('current')
if mibBuilder.loadTexts: ltmFwAdminIpRuleStatRuleName.setDescription('The name of the rule.')
ltmFwAdminIpRuleStatContainerName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 3, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwAdminIpRuleStatContainerName.setStatus('current')
if mibBuilder.loadTexts: ltmFwAdminIpRuleStatContainerName.setDescription('The name of the containing item.')
ltmFwAdminIpRuleStatCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 3, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwAdminIpRuleStatCounter.setStatus('current')
if mibBuilder.loadTexts: ltmFwAdminIpRuleStatCounter.setDescription('The number of packets matching this rule.')
ltmFwIpintGlobalStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 4, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmFwIpintGlobalStatResetStats.setStatus('current')
if mibBuilder.loadTexts: ltmFwIpintGlobalStatResetStats.setDescription('The action to reset resetable statistics data in ltmFwIpintGlobalStat. Setting this value to 1 will reset statistics data. Note, some statistics data may not be reset including data that are incremental counters.')
ltmFwIpintGlobalStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwIpintGlobalStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmFwIpintGlobalStatNumber.setDescription('The number of ltmFwIpintGlobalStat entries in the table.')
ltmFwIpintGlobalStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 4, 3), )
if mibBuilder.loadTexts: ltmFwIpintGlobalStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmFwIpintGlobalStatTable.setDescription('A table containing statistic information of global IP Intelligence data.')
ltmFwIpintGlobalStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 4, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmFwIpintGlobalStatBlClassName"))
if mibBuilder.loadTexts: ltmFwIpintGlobalStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmFwIpintGlobalStatEntry.setDescription('Columns in the ltmFwIpintGlobalStat Table')
ltmFwIpintGlobalStatBlClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 4, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwIpintGlobalStatBlClassName.setStatus('current')
if mibBuilder.loadTexts: ltmFwIpintGlobalStatBlClassName.setDescription('The blacklist class name.')
ltmFwIpintGlobalStatCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 4, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwIpintGlobalStatCounter.setStatus('current')
if mibBuilder.loadTexts: ltmFwIpintGlobalStatCounter.setDescription('The number of packets matching this category.')
ltmFwIpintVirtualStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 17, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmFwIpintVirtualStatResetStats.setStatus('current')
if mibBuilder.loadTexts: ltmFwIpintVirtualStatResetStats.setDescription('The action to reset resetable statistics data in ltmFwIpintVirtualStat. Setting this value to 1 will reset statistics data. Note, some statistics data may not be reset including data that are incremental counters.')
ltmFwIpintVirtualStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 17, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwIpintVirtualStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmFwIpintVirtualStatNumber.setDescription('The number of ltmFwIpintVirtualStat entries in the table.')
ltmFwIpintVirtualStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 17, 3), )
if mibBuilder.loadTexts: ltmFwIpintVirtualStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmFwIpintVirtualStatTable.setDescription('A table containing statistic information of virtual server IP Intelligence data.')
ltmFwIpintVirtualStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 17, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmFwIpintVirtualStatContextName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmFwIpintVirtualStatBlClassName"))
if mibBuilder.loadTexts: ltmFwIpintVirtualStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmFwIpintVirtualStatEntry.setDescription('Columns in the ltmFwIpintVirtualStat Table')
ltmFwIpintVirtualStatContextName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 17, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwIpintVirtualStatContextName.setStatus('current')
if mibBuilder.loadTexts: ltmFwIpintVirtualStatContextName.setDescription('The name of the virtual server.')
ltmFwIpintVirtualStatBlClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 17, 3, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwIpintVirtualStatBlClassName.setStatus('current')
if mibBuilder.loadTexts: ltmFwIpintVirtualStatBlClassName.setDescription('The blacklist class name.')
ltmFwIpintVirtualStatCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 17, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwIpintVirtualStatCounter.setStatus('current')
if mibBuilder.loadTexts: ltmFwIpintVirtualStatCounter.setDescription('The number of packets matching this category.')
ltmFwIpintRouteDomainStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 15, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmFwIpintRouteDomainStatResetStats.setStatus('current')
if mibBuilder.loadTexts: ltmFwIpintRouteDomainStatResetStats.setDescription('The action to reset resetable statistics data in ltmFwIpintRouteDomainStat. Setting this value to 1 will reset statistics data. Note, some statistics data may not be reset including data that are incremental counters.')
ltmFwIpintRouteDomainStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 15, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwIpintRouteDomainStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmFwIpintRouteDomainStatNumber.setDescription('The number of ltmFwIpintRouteDomainStat entries in the table.')
ltmFwIpintRouteDomainStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 15, 1, 3), )
if mibBuilder.loadTexts: ltmFwIpintRouteDomainStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmFwIpintRouteDomainStatTable.setDescription('A table containing statistic information of route domain IP Intelligence data.')
ltmFwIpintRouteDomainStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 15, 1, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmFwIpintRouteDomainStatContextName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmFwIpintRouteDomainStatBlClassName"))
if mibBuilder.loadTexts: ltmFwIpintRouteDomainStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmFwIpintRouteDomainStatEntry.setDescription('Columns in the ltmFwIpintRouteDomainStat Table')
ltmFwIpintRouteDomainStatContextName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 15, 1, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwIpintRouteDomainStatContextName.setStatus('current')
if mibBuilder.loadTexts: ltmFwIpintRouteDomainStatContextName.setDescription('The name of the route domain.')
ltmFwIpintRouteDomainStatBlClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 15, 1, 3, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwIpintRouteDomainStatBlClassName.setStatus('current')
if mibBuilder.loadTexts: ltmFwIpintRouteDomainStatBlClassName.setDescription('The blacklist class name.')
ltmFwIpintRouteDomainStatCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 15, 1, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwIpintRouteDomainStatCounter.setStatus('current')
if mibBuilder.loadTexts: ltmFwIpintRouteDomainStatCounter.setDescription('The number of packets matching this category.')
ltmRouteDomainStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 15, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmRouteDomainStatResetStats.setStatus('current')
if mibBuilder.loadTexts: ltmRouteDomainStatResetStats.setDescription('The action to reset resetable statistics data in ltmRouteDomainStat. Setting this value to 1 will reset statistics data. Note, some statistics data may not be reset including data that are incremental counters.')
ltmRouteDomainStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 15, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRouteDomainStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmRouteDomainStatNumber.setDescription('The number of ltmRouteDomainStat entries in the table.')
ltmRouteDomainStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 15, 2, 3), )
if mibBuilder.loadTexts: ltmRouteDomainStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmRouteDomainStatTable.setDescription('A table containing statistic information of route domains.')
ltmRouteDomainStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 15, 2, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmRouteDomainStatName"))
if mibBuilder.loadTexts: ltmRouteDomainStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmRouteDomainStatEntry.setDescription('Columns in the ltmRouteDomainStat Table')
ltmRouteDomainStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 15, 2, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRouteDomainStatName.setStatus('current')
if mibBuilder.loadTexts: ltmRouteDomainStatName.setDescription('The name of a route domain.')
ltmRouteDomainStatConnLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 15, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRouteDomainStatConnLimit.setStatus('current')
if mibBuilder.loadTexts: ltmRouteDomainStatConnLimit.setDescription('The maximum number of connections the specified route domain is allowed to have open at one time.')
ltmRouteDomainStatConnectionFlowMiss = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 15, 2, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRouteDomainStatConnectionFlowMiss.setStatus('current')
if mibBuilder.loadTexts: ltmRouteDomainStatConnectionFlowMiss.setDescription('The number of packets received that have no associated connection flow open.')
ltmRouteDomainStatClientPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 15, 2, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRouteDomainStatClientPktsIn.setStatus('current')
if mibBuilder.loadTexts: ltmRouteDomainStatClientPktsIn.setDescription('The number of packets received by the specified route domain from client-side.')
ltmRouteDomainStatClientBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 15, 2, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRouteDomainStatClientBytesIn.setStatus('current')
if mibBuilder.loadTexts: ltmRouteDomainStatClientBytesIn.setDescription('The number of bytes received by the specified route domain from client-side.')
ltmRouteDomainStatClientPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 15, 2, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRouteDomainStatClientPktsOut.setStatus('current')
if mibBuilder.loadTexts: ltmRouteDomainStatClientPktsOut.setDescription('The number of packets sent to client-side on the specified route domain.')
ltmRouteDomainStatClientBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 15, 2, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRouteDomainStatClientBytesOut.setStatus('current')
if mibBuilder.loadTexts: ltmRouteDomainStatClientBytesOut.setDescription('The number of bytes sent to client-side on the specified route domain.')
ltmRouteDomainStatClientMaxConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 15, 2, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRouteDomainStatClientMaxConns.setStatus('current')
if mibBuilder.loadTexts: ltmRouteDomainStatClientMaxConns.setDescription('The maximum connections from client-side on the specified route domain.')
ltmRouteDomainStatClientTotConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 15, 2, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRouteDomainStatClientTotConns.setStatus('current')
if mibBuilder.loadTexts: ltmRouteDomainStatClientTotConns.setDescription('The total connections from client-side on the specified route domain.')
ltmRouteDomainStatClientCurConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 15, 2, 3, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRouteDomainStatClientCurConns.setStatus('current')
if mibBuilder.loadTexts: ltmRouteDomainStatClientCurConns.setDescription('The current connections from client-side on the specified route domain.')
ltmRouteDomainStatClientEvictedConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 15, 2, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRouteDomainStatClientEvictedConns.setStatus('current')
if mibBuilder.loadTexts: ltmRouteDomainStatClientEvictedConns.setDescription('The number of client-side connections that have been evicted on the specified route domain.')
ltmRouteDomainStatClientSlowKilled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 15, 2, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRouteDomainStatClientSlowKilled.setStatus('current')
if mibBuilder.loadTexts: ltmRouteDomainStatClientSlowKilled.setDescription('The number of slow client-side connections that have been killed on the specified route domain.')
ltmRouteDomainStatServerPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 15, 2, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRouteDomainStatServerPktsIn.setStatus('current')
if mibBuilder.loadTexts: ltmRouteDomainStatServerPktsIn.setDescription('The number of packets received by the specified route domain from server-side.')
ltmRouteDomainStatServerBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 15, 2, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRouteDomainStatServerBytesIn.setStatus('current')
if mibBuilder.loadTexts: ltmRouteDomainStatServerBytesIn.setDescription('The number of bytes received by the specified route domain from server-side.')
ltmRouteDomainStatServerPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 15, 2, 3, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRouteDomainStatServerPktsOut.setStatus('current')
if mibBuilder.loadTexts: ltmRouteDomainStatServerPktsOut.setDescription('The number of packets sent to server-side on the specified route domain.')
ltmRouteDomainStatServerBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 15, 2, 3, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRouteDomainStatServerBytesOut.setStatus('current')
if mibBuilder.loadTexts: ltmRouteDomainStatServerBytesOut.setDescription('The number of bytes sent to server-side on the specified route domain.')
ltmRouteDomainStatServerMaxConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 15, 2, 3, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRouteDomainStatServerMaxConns.setStatus('current')
if mibBuilder.loadTexts: ltmRouteDomainStatServerMaxConns.setDescription('The maximum connections from server-side on the specified route domain.')
ltmRouteDomainStatServerTotConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 15, 2, 3, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRouteDomainStatServerTotConns.setStatus('current')
if mibBuilder.loadTexts: ltmRouteDomainStatServerTotConns.setDescription('The total connections from server-side on the specified route domain.')
ltmRouteDomainStatServerCurConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 15, 2, 3, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRouteDomainStatServerCurConns.setStatus('current')
if mibBuilder.loadTexts: ltmRouteDomainStatServerCurConns.setDescription('The current connections from server-side on the specified route domain.')
ltmRouteDomainStatServerEvictedConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 15, 2, 3, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRouteDomainStatServerEvictedConns.setStatus('current')
if mibBuilder.loadTexts: ltmRouteDomainStatServerEvictedConns.setDescription('The number of server-side connections that have been evicted on the specified route domain.')
ltmRouteDomainStatServerSlowKilled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 15, 2, 3, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRouteDomainStatServerSlowKilled.setStatus('current')
if mibBuilder.loadTexts: ltmRouteDomainStatServerSlowKilled.setDescription('The number of slow server-side connections that have been killed on the specified route domain.')
ltmFlowEvictionPolicyStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 16, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmFlowEvictionPolicyStatResetStats.setStatus('current')
if mibBuilder.loadTexts: ltmFlowEvictionPolicyStatResetStats.setDescription('The action to reset resetable statistics data in ltmFlowEvictionPolicyStat. Setting this value to 1 will reset statistics data. Note, some statistics data may not be reset including data that are incremental counters.')
ltmFlowEvictionPolicyStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 16, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFlowEvictionPolicyStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmFlowEvictionPolicyStatNumber.setDescription('The number of ltmFlowEvictionPolicyStat entries in the table.')
ltmFlowEvictionPolicyStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 16, 1, 3), )
if mibBuilder.loadTexts: ltmFlowEvictionPolicyStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmFlowEvictionPolicyStatTable.setDescription('A table containing statistic information of flow eviction policies.')
ltmFlowEvictionPolicyStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 16, 1, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmFlowEvictionPolicyStatPolicyName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmFlowEvictionPolicyStatSweptContext"), (0, "F5-BIGIP-LOCAL-MIB", "ltmFlowEvictionPolicyStatContextName"))
if mibBuilder.loadTexts: ltmFlowEvictionPolicyStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmFlowEvictionPolicyStatEntry.setDescription('Columns in the ltmFlowEvictionPolicyStat Table')
ltmFlowEvictionPolicyStatPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 16, 1, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFlowEvictionPolicyStatPolicyName.setStatus('current')
if mibBuilder.loadTexts: ltmFlowEvictionPolicyStatPolicyName.setDescription('The policy name.')
ltmFlowEvictionPolicyStatSweptContext = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 16, 1, 3, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFlowEvictionPolicyStatSweptContext.setStatus('current')
if mibBuilder.loadTexts: ltmFlowEvictionPolicyStatSweptContext.setDescription('The context that was swept.')
ltmFlowEvictionPolicyStatContextName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 16, 1, 3, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFlowEvictionPolicyStatContextName.setStatus('current')
if mibBuilder.loadTexts: ltmFlowEvictionPolicyStatContextName.setDescription('The context name.')
ltmFlowEvictionPolicyStatEvicted = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 16, 1, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFlowEvictionPolicyStatEvicted.setStatus('current')
if mibBuilder.loadTexts: ltmFlowEvictionPolicyStatEvicted.setDescription('The number of evicted flows.')
ltmAlgLogProfileNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 29, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAlgLogProfileNumber.setStatus('current')
if mibBuilder.loadTexts: ltmAlgLogProfileNumber.setDescription('The number of ltmAlgLogProfile entries in the table.')
ltmAlgLogProfileTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 29, 1, 2), )
if mibBuilder.loadTexts: ltmAlgLogProfileTable.setStatus('current')
if mibBuilder.loadTexts: ltmAlgLogProfileTable.setDescription('A table containing information about the ALG log profile.')
ltmAlgLogProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 29, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmAlgLogProfileName"))
if mibBuilder.loadTexts: ltmAlgLogProfileEntry.setStatus('current')
if mibBuilder.loadTexts: ltmAlgLogProfileEntry.setDescription('Columns in the ltmAlgLogProfile Table')
ltmAlgLogProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 29, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAlgLogProfileName.setStatus('current')
if mibBuilder.loadTexts: ltmAlgLogProfileName.setDescription('The name of a ALG Log profile.')
ltmAlgLogProfileDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 29, 1, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAlgLogProfileDescription.setStatus('current')
if mibBuilder.loadTexts: ltmAlgLogProfileDescription.setDescription('The description of a ALG log profile.')
ltmAlgLogProfileConfigSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 29, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("usercfg", 0), ("basecfg", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAlgLogProfileConfigSource.setStatus('current')
if mibBuilder.loadTexts: ltmAlgLogProfileConfigSource.setDescription('The state that specifies whether this is a base/pre-configured profile or user defined profile.')
ltmAlgLogProfileDefaultName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 29, 1, 2, 1, 4), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAlgLogProfileDefaultName.setStatus('current')
if mibBuilder.loadTexts: ltmAlgLogProfileDefaultName.setDescription('The name of the profile from which the specified profile derives its attribute default values.')
ltmAlgLogProfileStartControlAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 29, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("backup-allocation-only", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAlgLogProfileStartControlAction.setStatus('current')
if mibBuilder.loadTexts: ltmAlgLogProfileStartControlAction.setDescription('Log action to occur at the creation of the control channel connection.')
ltmAlgLogProfileEndControlAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 29, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("backup-allocation-only", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAlgLogProfileEndControlAction.setStatus('current')
if mibBuilder.loadTexts: ltmAlgLogProfileEndControlAction.setDescription('Log action to occur at the end of the control channel connection.')
ltmAlgLogProfileStartDataAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 29, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("backup-allocation-only", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAlgLogProfileStartDataAction.setStatus('current')
if mibBuilder.loadTexts: ltmAlgLogProfileStartDataAction.setDescription('Log action to occur at the creation of the data channel connection.')
ltmAlgLogProfileEndDataAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 29, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("backup-allocation-only", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAlgLogProfileEndDataAction.setStatus('current')
if mibBuilder.loadTexts: ltmAlgLogProfileEndDataAction.setDescription('Log action to occur at the end of the data channel connection.')
ltmAlgLogProfileInboundAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 29, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAlgLogProfileInboundAction.setStatus('current')
if mibBuilder.loadTexts: ltmAlgLogProfileInboundAction.setDescription('Log action to occur for inbound transactions, this could be either incoming or outgoing message.')
ltmAlgLogProfileStartControlElementsNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 29, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAlgLogProfileStartControlElementsNumber.setStatus('current')
if mibBuilder.loadTexts: ltmAlgLogProfileStartControlElementsNumber.setDescription('The number of ltmAlgLogProfileStartControlElements entries in the table.')
ltmAlgLogProfileStartControlElementsTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 29, 2, 2), )
if mibBuilder.loadTexts: ltmAlgLogProfileStartControlElementsTable.setStatus('current')
if mibBuilder.loadTexts: ltmAlgLogProfileStartControlElementsTable.setDescription('A table containing information on the optional elements of start control event log message.')
ltmAlgLogProfileStartControlElementsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 29, 2, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmAlgLogProfileStartControlElementsName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmAlgLogProfileStartControlElementsIndex"))
if mibBuilder.loadTexts: ltmAlgLogProfileStartControlElementsEntry.setStatus('current')
if mibBuilder.loadTexts: ltmAlgLogProfileStartControlElementsEntry.setDescription('Columns in the ltmAlgLogProfileStartControlElements Table')
ltmAlgLogProfileStartControlElementsName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 29, 2, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAlgLogProfileStartControlElementsName.setStatus('current')
if mibBuilder.loadTexts: ltmAlgLogProfileStartControlElementsName.setDescription('The name of a ALG Log profile.')
ltmAlgLogProfileStartControlElementsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 29, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAlgLogProfileStartControlElementsIndex.setStatus('current')
if mibBuilder.loadTexts: ltmAlgLogProfileStartControlElementsIndex.setDescription('The index of the optional element for ALG event log messages.')
ltmAlgLogProfileStartControlElementsElements = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 29, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("destination", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAlgLogProfileStartControlElementsElements.setStatus('current')
if mibBuilder.loadTexts: ltmAlgLogProfileStartControlElementsElements.setDescription('The optional element of ALG event log messages.')
ltmAlgLogProfileEndControlElementsNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 29, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAlgLogProfileEndControlElementsNumber.setStatus('current')
if mibBuilder.loadTexts: ltmAlgLogProfileEndControlElementsNumber.setDescription('The number of ltmAlgLogProfileEndControlElements entries in the table.')
ltmAlgLogProfileEndControlElementsTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 29, 3, 2), )
if mibBuilder.loadTexts: ltmAlgLogProfileEndControlElementsTable.setStatus('current')
if mibBuilder.loadTexts: ltmAlgLogProfileEndControlElementsTable.setDescription('A table containing information on the optional elements of end control event log message.')
ltmAlgLogProfileEndControlElementsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 29, 3, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmAlgLogProfileEndControlElementsName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmAlgLogProfileEndControlElementsIndex"))
if mibBuilder.loadTexts: ltmAlgLogProfileEndControlElementsEntry.setStatus('current')
if mibBuilder.loadTexts: ltmAlgLogProfileEndControlElementsEntry.setDescription('Columns in the ltmAlgLogProfileEndControlElements Table')
ltmAlgLogProfileEndControlElementsName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 29, 3, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAlgLogProfileEndControlElementsName.setStatus('current')
if mibBuilder.loadTexts: ltmAlgLogProfileEndControlElementsName.setDescription('The name of a ALG Log profile.')
ltmAlgLogProfileEndControlElementsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 29, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAlgLogProfileEndControlElementsIndex.setStatus('current')
if mibBuilder.loadTexts: ltmAlgLogProfileEndControlElementsIndex.setDescription('The index of the optional element for ALG event log messages.')
ltmAlgLogProfileEndControlElementsElements = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 29, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("destination", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAlgLogProfileEndControlElementsElements.setStatus('current')
if mibBuilder.loadTexts: ltmAlgLogProfileEndControlElementsElements.setDescription('The optional element of ALG event log messages.')
ltmAlgLogProfileStartDataElementsNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 29, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAlgLogProfileStartDataElementsNumber.setStatus('current')
if mibBuilder.loadTexts: ltmAlgLogProfileStartDataElementsNumber.setDescription('The number of ltmAlgLogProfileStartDataElements entries in the table.')
ltmAlgLogProfileStartDataElementsTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 29, 4, 2), )
if mibBuilder.loadTexts: ltmAlgLogProfileStartDataElementsTable.setStatus('current')
if mibBuilder.loadTexts: ltmAlgLogProfileStartDataElementsTable.setDescription('A table containing information on the optional elements of start data event log message.')
ltmAlgLogProfileStartDataElementsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 29, 4, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmAlgLogProfileStartDataElementsName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmAlgLogProfileStartDataElementsIndex"))
if mibBuilder.loadTexts: ltmAlgLogProfileStartDataElementsEntry.setStatus('current')
if mibBuilder.loadTexts: ltmAlgLogProfileStartDataElementsEntry.setDescription('Columns in the ltmAlgLogProfileStartDataElements Table')
ltmAlgLogProfileStartDataElementsName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 29, 4, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAlgLogProfileStartDataElementsName.setStatus('current')
if mibBuilder.loadTexts: ltmAlgLogProfileStartDataElementsName.setDescription('The name of a ALG Log profile.')
ltmAlgLogProfileStartDataElementsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 29, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAlgLogProfileStartDataElementsIndex.setStatus('current')
if mibBuilder.loadTexts: ltmAlgLogProfileStartDataElementsIndex.setDescription('The index of the optional element for ALG event log messages.')
ltmAlgLogProfileStartDataElementsElements = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 29, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("destination", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAlgLogProfileStartDataElementsElements.setStatus('current')
if mibBuilder.loadTexts: ltmAlgLogProfileStartDataElementsElements.setDescription('The optional element of ALG event log messages.')
ltmAlgLogProfileEndDataElementsNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 29, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAlgLogProfileEndDataElementsNumber.setStatus('current')
if mibBuilder.loadTexts: ltmAlgLogProfileEndDataElementsNumber.setDescription('The number of ltmAlgLogProfileEndDataElements entries in the table.')
ltmAlgLogProfileEndDataElementsTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 29, 5, 2), )
if mibBuilder.loadTexts: ltmAlgLogProfileEndDataElementsTable.setStatus('current')
if mibBuilder.loadTexts: ltmAlgLogProfileEndDataElementsTable.setDescription('A table containing information on the optional elements of end data event log message.')
ltmAlgLogProfileEndDataElementsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 29, 5, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmAlgLogProfileEndDataElementsName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmAlgLogProfileEndDataElementsIndex"))
if mibBuilder.loadTexts: ltmAlgLogProfileEndDataElementsEntry.setStatus('current')
if mibBuilder.loadTexts: ltmAlgLogProfileEndDataElementsEntry.setDescription('Columns in the ltmAlgLogProfileEndDataElements Table')
ltmAlgLogProfileEndDataElementsName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 29, 5, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAlgLogProfileEndDataElementsName.setStatus('current')
if mibBuilder.loadTexts: ltmAlgLogProfileEndDataElementsName.setDescription('The name of a ALG Log profile.')
ltmAlgLogProfileEndDataElementsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 29, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAlgLogProfileEndDataElementsIndex.setStatus('current')
if mibBuilder.loadTexts: ltmAlgLogProfileEndDataElementsIndex.setDescription('The index of the optional element for ALG event log messages.')
ltmAlgLogProfileEndDataElementsElements = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 29, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("destination", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAlgLogProfileEndDataElementsElements.setStatus('current')
if mibBuilder.loadTexts: ltmAlgLogProfileEndDataElementsElements.setDescription('The optional element of ALG event log messages.')
ltmLsnLogProfileNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 30, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnLogProfileNumber.setStatus('current')
if mibBuilder.loadTexts: ltmLsnLogProfileNumber.setDescription('The number of ltmLsnLogProfile entries in the table.')
ltmLsnLogProfileTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 30, 1, 2), )
if mibBuilder.loadTexts: ltmLsnLogProfileTable.setStatus('current')
if mibBuilder.loadTexts: ltmLsnLogProfileTable.setDescription('A table containing information about the LSN log profile.')
ltmLsnLogProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 30, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmLsnLogProfileName"))
if mibBuilder.loadTexts: ltmLsnLogProfileEntry.setStatus('current')
if mibBuilder.loadTexts: ltmLsnLogProfileEntry.setDescription('Columns in the ltmLsnLogProfile Table')
ltmLsnLogProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 30, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnLogProfileName.setStatus('current')
if mibBuilder.loadTexts: ltmLsnLogProfileName.setDescription('The name of a ALG Log profile.')
ltmLsnLogProfileDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 30, 1, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnLogProfileDescription.setStatus('current')
if mibBuilder.loadTexts: ltmLsnLogProfileDescription.setDescription('The description of a ALG log profile.')
ltmLsnLogProfileConfigSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 30, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("usercfg", 0), ("basecfg", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnLogProfileConfigSource.setStatus('current')
if mibBuilder.loadTexts: ltmLsnLogProfileConfigSource.setDescription('The state that specifies whether this is a base/pre-configured profile or user defined profile.')
ltmLsnLogProfileDefaultName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 30, 1, 2, 1, 4), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnLogProfileDefaultName.setStatus('current')
if mibBuilder.loadTexts: ltmLsnLogProfileDefaultName.setDescription('The name of the profile from which the specified profile derives its attribute default values.')
ltmLsnLogProfileStartOutboundAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 30, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("backup-allocation-only", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnLogProfileStartOutboundAction.setStatus('current')
if mibBuilder.loadTexts: ltmLsnLogProfileStartOutboundAction.setDescription('Log action to occur at the creation of the outbound LSN connection.')
ltmLsnLogProfileEndOutboundAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 30, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("backup-allocation-only", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnLogProfileEndOutboundAction.setStatus('current')
if mibBuilder.loadTexts: ltmLsnLogProfileEndOutboundAction.setDescription('Log action to occur at the end of the outbound LSN connection.')
ltmLsnLogProfileStartInboundAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 30, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("backup-allocation-only", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnLogProfileStartInboundAction.setStatus('current')
if mibBuilder.loadTexts: ltmLsnLogProfileStartInboundAction.setDescription('Log action to occur at the creation of the incoming connection.')
ltmLsnLogProfileEndInboundAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 30, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("backup-allocation-only", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnLogProfileEndInboundAction.setStatus('current')
if mibBuilder.loadTexts: ltmLsnLogProfileEndInboundAction.setDescription('Log action to occur at the end of the incoming connection.')
ltmLsnLogProfileQuotaExceededAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 30, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnLogProfileQuotaExceededAction.setStatus('current')
if mibBuilder.loadTexts: ltmLsnLogProfileQuotaExceededAction.setDescription('Log action to occur when LSN client exceeded allocated resources.')
ltmLsnLogProfileErrorsAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 30, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnLogProfileErrorsAction.setStatus('current')
if mibBuilder.loadTexts: ltmLsnLogProfileErrorsAction.setDescription('Log action to occur when LSN translation errors occur.')
ltmLsnLogProfileStartOutboundElementsNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 30, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnLogProfileStartOutboundElementsNumber.setStatus('current')
if mibBuilder.loadTexts: ltmLsnLogProfileStartOutboundElementsNumber.setDescription('The number of ltmLsnLogProfileStartOutboundElements entries in the table.')
ltmLsnLogProfileStartOutboundElementsTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 30, 2, 2), )
if mibBuilder.loadTexts: ltmLsnLogProfileStartOutboundElementsTable.setStatus('current')
if mibBuilder.loadTexts: ltmLsnLogProfileStartOutboundElementsTable.setDescription('A table containing information on the optional elements of start outbound event log message.')
ltmLsnLogProfileStartOutboundElementsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 30, 2, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmLsnLogProfileStartOutboundElementsName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmLsnLogProfileStartOutboundElementsIndex"))
if mibBuilder.loadTexts: ltmLsnLogProfileStartOutboundElementsEntry.setStatus('current')
if mibBuilder.loadTexts: ltmLsnLogProfileStartOutboundElementsEntry.setDescription('Columns in the ltmLsnLogProfileStartOutboundElements Table')
ltmLsnLogProfileStartOutboundElementsName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 30, 2, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnLogProfileStartOutboundElementsName.setStatus('current')
if mibBuilder.loadTexts: ltmLsnLogProfileStartOutboundElementsName.setDescription('The name of a LSN Log profile.')
ltmLsnLogProfileStartOutboundElementsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 30, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnLogProfileStartOutboundElementsIndex.setStatus('current')
if mibBuilder.loadTexts: ltmLsnLogProfileStartOutboundElementsIndex.setDescription('The index of the optional element for LSN log messages.')
ltmLsnLogProfileStartOutboundElementsElements = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 30, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("destination", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnLogProfileStartOutboundElementsElements.setStatus('current')
if mibBuilder.loadTexts: ltmLsnLogProfileStartOutboundElementsElements.setDescription('The optional element of LSN log messages.')
ltmLsnLogProfileEndOutboundElementsNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 30, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnLogProfileEndOutboundElementsNumber.setStatus('current')
if mibBuilder.loadTexts: ltmLsnLogProfileEndOutboundElementsNumber.setDescription('The number of ltmLsnLogProfileEndOutboundElements entries in the table.')
ltmLsnLogProfileEndOutboundElementsTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 30, 3, 2), )
if mibBuilder.loadTexts: ltmLsnLogProfileEndOutboundElementsTable.setStatus('current')
if mibBuilder.loadTexts: ltmLsnLogProfileEndOutboundElementsTable.setDescription('A table containing information on the optional elements of end outbound event log message.')
ltmLsnLogProfileEndOutboundElementsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 30, 3, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmLsnLogProfileEndOutboundElementsName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmLsnLogProfileEndOutboundElementsIndex"))
if mibBuilder.loadTexts: ltmLsnLogProfileEndOutboundElementsEntry.setStatus('current')
if mibBuilder.loadTexts: ltmLsnLogProfileEndOutboundElementsEntry.setDescription('Columns in the ltmLsnLogProfileEndOutboundElements Table')
ltmLsnLogProfileEndOutboundElementsName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 30, 3, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnLogProfileEndOutboundElementsName.setStatus('current')
if mibBuilder.loadTexts: ltmLsnLogProfileEndOutboundElementsName.setDescription('The name of a LSN Log profile.')
ltmLsnLogProfileEndOutboundElementsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 30, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnLogProfileEndOutboundElementsIndex.setStatus('current')
if mibBuilder.loadTexts: ltmLsnLogProfileEndOutboundElementsIndex.setDescription('The index of the optional element for LSN log messages.')
ltmLsnLogProfileEndOutboundElementsElements = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 30, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("destination", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnLogProfileEndOutboundElementsElements.setStatus('current')
if mibBuilder.loadTexts: ltmLsnLogProfileEndOutboundElementsElements.setDescription('The optional element of LSN log messages.')
ltmOcspStaplingParametersNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 17, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmOcspStaplingParametersNumber.setStatus('current')
if mibBuilder.loadTexts: ltmOcspStaplingParametersNumber.setDescription('The number of ltmOcspStaplingParameters entries in the table.')
ltmOcspStaplingParametersTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 17, 1, 2), )
if mibBuilder.loadTexts: ltmOcspStaplingParametersTable.setStatus('current')
if mibBuilder.loadTexts: ltmOcspStaplingParametersTable.setDescription('A table containing options to be used for enabling OCSP Stapling on clientside SSL profiles.')
ltmOcspStaplingParametersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 17, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmOcspStaplingParametersName"))
if mibBuilder.loadTexts: ltmOcspStaplingParametersEntry.setStatus('current')
if mibBuilder.loadTexts: ltmOcspStaplingParametersEntry.setDescription('Columns in the ltmOcspStaplingParameters Table')
ltmOcspStaplingParametersName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 17, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmOcspStaplingParametersName.setStatus('current')
if mibBuilder.loadTexts: ltmOcspStaplingParametersName.setDescription('The name of the OCSP Stapling Parameters object.')
ltmOcspStaplingParametersUseProxyServer = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 17, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmOcspStaplingParametersUseProxyServer.setStatus('current')
if mibBuilder.loadTexts: ltmOcspStaplingParametersUseProxyServer.setDescription('Whether to use a proxy server or a DNS resolver.')
ltmOcspStaplingParametersProxyServerPool = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 17, 1, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmOcspStaplingParametersProxyServerPool.setStatus('current')
if mibBuilder.loadTexts: ltmOcspStaplingParametersProxyServerPool.setDescription('The name of the proxy server pool.')
ltmOcspStaplingParametersDnsResolver = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 17, 1, 2, 1, 4), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmOcspStaplingParametersDnsResolver.setStatus('current')
if mibBuilder.loadTexts: ltmOcspStaplingParametersDnsResolver.setDescription('The name of the DNS resolver.')
ltmOcspStaplingParametersTrustedCa = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 17, 1, 2, 1, 5), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmOcspStaplingParametersTrustedCa.setStatus('current')
if mibBuilder.loadTexts: ltmOcspStaplingParametersTrustedCa.setDescription('The name of the trusted certificate authority file.')
ltmOcspStaplingParametersTrustedResponders = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 17, 1, 2, 1, 6), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmOcspStaplingParametersTrustedResponders.setStatus('current')
if mibBuilder.loadTexts: ltmOcspStaplingParametersTrustedResponders.setDescription('The name of the file containing the trusted OCSP responders.')
ltmOcspStaplingParametersUrl = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 17, 1, 2, 1, 7), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmOcspStaplingParametersUrl.setStatus('current')
if mibBuilder.loadTexts: ltmOcspStaplingParametersUrl.setDescription('The name of the responder URL.')
ltmOcspStaplingParametersSignerCert = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 17, 1, 2, 1, 8), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmOcspStaplingParametersSignerCert.setStatus('current')
if mibBuilder.loadTexts: ltmOcspStaplingParametersSignerCert.setDescription('The name of the signer certificate file.')
ltmOcspStaplingParametersSignerKey = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 17, 1, 2, 1, 9), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmOcspStaplingParametersSignerKey.setStatus('current')
if mibBuilder.loadTexts: ltmOcspStaplingParametersSignerKey.setDescription('The name of the signer key file.')
ltmOcspStaplingParametersSignHash = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 17, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("sha1", 0), ("sha256", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmOcspStaplingParametersSignHash.setStatus('current')
if mibBuilder.loadTexts: ltmOcspStaplingParametersSignHash.setDescription('The hash algorithm used for signing the OCSP request.')
ltmOcspStaplingParametersTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 17, 1, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmOcspStaplingParametersTimeout.setStatus('current')
if mibBuilder.loadTexts: ltmOcspStaplingParametersTimeout.setDescription('The OCSP Stapling timeout.')
ltmOcspStaplingParametersClockSkew = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 17, 1, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmOcspStaplingParametersClockSkew.setStatus('current')
if mibBuilder.loadTexts: ltmOcspStaplingParametersClockSkew.setDescription('The maximum allowable clock skew between the BIG-IP and the OCSP responder.')
ltmOcspStaplingParametersStatusAge = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 17, 1, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmOcspStaplingParametersStatusAge.setStatus('current')
if mibBuilder.loadTexts: ltmOcspStaplingParametersStatusAge.setDescription('The allowed age of the OCSP response when nextUpdate time is not specified in the response.')
ltmOcspStaplingParametersCacheTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 17, 1, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmOcspStaplingParametersCacheTimeout.setStatus('current')
if mibBuilder.loadTexts: ltmOcspStaplingParametersCacheTimeout.setDescription('The desired lifetime of the OCSP response in the cache, in seconds.')
ltmOcspStaplingParametersCacheErrorTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 17, 1, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmOcspStaplingParametersCacheErrorTimeout.setStatus('current')
if mibBuilder.loadTexts: ltmOcspStaplingParametersCacheErrorTimeout.setDescription('The lifetime of an error response in the cache, in seconds.')
ltmOcspStaplingParametersStrictRespCertCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 17, 1, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmOcspStaplingParametersStrictRespCertCheck.setStatus('current')
if mibBuilder.loadTexts: ltmOcspStaplingParametersStrictRespCertCheck.setDescription('Whether the certificate in the OCSP response should be checked for OCSP signing extension.')
ltmFwRuleStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwRuleStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmFwRuleStatNumber.setDescription('The number of ltmFwRuleStat entries in the table.')
ltmFwRuleStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 5, 2), )
if mibBuilder.loadTexts: ltmFwRuleStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmFwRuleStatTable.setDescription('A table containing statistic information of Firewall rule stats.')
ltmFwRuleStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 5, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmFwRuleStatContextType"), (0, "F5-BIGIP-LOCAL-MIB", "ltmFwRuleStatContextName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmFwRuleStatRuleName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmFwRuleStatRuleListName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmFwRuleStatPolicyName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmFwRuleStatRuleStatType"))
if mibBuilder.loadTexts: ltmFwRuleStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmFwRuleStatEntry.setDescription('Columns in the ltmFwRuleStat Table')
ltmFwRuleStatContextType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 5, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwRuleStatContextType.setStatus('current')
if mibBuilder.loadTexts: ltmFwRuleStatContextType.setDescription('The context type.')
ltmFwRuleStatContextName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 5, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwRuleStatContextName.setStatus('current')
if mibBuilder.loadTexts: ltmFwRuleStatContextName.setDescription('The context name.')
ltmFwRuleStatRuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 5, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwRuleStatRuleName.setStatus('current')
if mibBuilder.loadTexts: ltmFwRuleStatRuleName.setDescription('The rule name.')
ltmFwRuleStatRuleListName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 5, 2, 1, 4), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwRuleStatRuleListName.setStatus('current')
if mibBuilder.loadTexts: ltmFwRuleStatRuleListName.setDescription('The rule list name.')
ltmFwRuleStatPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 5, 2, 1, 5), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwRuleStatPolicyName.setStatus('current')
if mibBuilder.loadTexts: ltmFwRuleStatPolicyName.setDescription('The policy name.')
ltmFwRuleStatRuleStatType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enforced", 1), ("staged", 2), ("active", 3), ("overlapper", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwRuleStatRuleStatType.setStatus('current')
if mibBuilder.loadTexts: ltmFwRuleStatRuleStatType.setDescription('')
ltmFwRuleStatActualRule = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 5, 2, 1, 7), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwRuleStatActualRule.setStatus('current')
if mibBuilder.loadTexts: ltmFwRuleStatActualRule.setDescription('The actual rule name.')
ltmFwRuleStatCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 5, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwRuleStatCounter.setStatus('current')
if mibBuilder.loadTexts: ltmFwRuleStatCounter.setDescription('The number of packets matching this rule.')
ltmFwRuleStatLastHitTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 5, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwRuleStatLastHitTime.setStatus('current')
if mibBuilder.loadTexts: ltmFwRuleStatLastHitTime.setDescription('The last time a packet matched this rule.')
ltmFwRuleStatLastHitTimeFmt = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 5, 2, 1, 10), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwRuleStatLastHitTimeFmt.setStatus('current')
if mibBuilder.loadTexts: ltmFwRuleStatLastHitTimeFmt.setDescription('The last time a packet matched this rule, in human readable format.')
ltmFwRuleStatOverlapper = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 5, 2, 1, 11), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwRuleStatOverlapper.setStatus('current')
if mibBuilder.loadTexts: ltmFwRuleStatOverlapper.setDescription('The overlapper for this rule.')
ltmFwRuleStatOverlapType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 5, 2, 1, 12), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwRuleStatOverlapType.setStatus('current')
if mibBuilder.loadTexts: ltmFwRuleStatOverlapType.setDescription('The overlap type.')
ltmFwPolicyRuleStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 16, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwPolicyRuleStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmFwPolicyRuleStatNumber.setDescription('The number of ltmFwPolicyRuleStat entries in the table.')
ltmFwPolicyRuleStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 16, 2, 2), )
if mibBuilder.loadTexts: ltmFwPolicyRuleStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmFwPolicyRuleStatTable.setDescription('A table containing statistic information of Firewall policy rule stats.')
ltmFwPolicyRuleStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 16, 2, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmFwPolicyRuleStatContextType"), (0, "F5-BIGIP-LOCAL-MIB", "ltmFwPolicyRuleStatContextName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmFwPolicyRuleStatRuleName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmFwPolicyRuleStatRuleListName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmFwPolicyRuleStatPolicyName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmFwPolicyRuleStatRuleStatType"))
if mibBuilder.loadTexts: ltmFwPolicyRuleStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmFwPolicyRuleStatEntry.setDescription('Columns in the ltmFwPolicyRuleStat Table')
ltmFwPolicyRuleStatContextType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 16, 2, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwPolicyRuleStatContextType.setStatus('current')
if mibBuilder.loadTexts: ltmFwPolicyRuleStatContextType.setDescription('The context type.')
ltmFwPolicyRuleStatContextName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 16, 2, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwPolicyRuleStatContextName.setStatus('current')
if mibBuilder.loadTexts: ltmFwPolicyRuleStatContextName.setDescription('The context name.')
ltmFwPolicyRuleStatRuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 16, 2, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwPolicyRuleStatRuleName.setStatus('current')
if mibBuilder.loadTexts: ltmFwPolicyRuleStatRuleName.setDescription('The rule name.')
ltmFwPolicyRuleStatRuleListName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 16, 2, 2, 1, 4), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwPolicyRuleStatRuleListName.setStatus('current')
if mibBuilder.loadTexts: ltmFwPolicyRuleStatRuleListName.setDescription('The rule list name.')
ltmFwPolicyRuleStatPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 16, 2, 2, 1, 5), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwPolicyRuleStatPolicyName.setStatus('current')
if mibBuilder.loadTexts: ltmFwPolicyRuleStatPolicyName.setDescription('The policy name.')
ltmFwPolicyRuleStatRuleStatType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 16, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enforced", 1), ("staged", 2), ("active", 3), ("overlapper", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwPolicyRuleStatRuleStatType.setStatus('current')
if mibBuilder.loadTexts: ltmFwPolicyRuleStatRuleStatType.setDescription('')
ltmFwPolicyRuleStatActualRule = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 16, 2, 2, 1, 7), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwPolicyRuleStatActualRule.setStatus('current')
if mibBuilder.loadTexts: ltmFwPolicyRuleStatActualRule.setDescription('The actual rule name.')
ltmFwPolicyRuleStatCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 16, 2, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwPolicyRuleStatCounter.setStatus('current')
if mibBuilder.loadTexts: ltmFwPolicyRuleStatCounter.setDescription('The number of packets matching this rule.')
ltmFwPolicyRuleStatLastHitTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 16, 2, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwPolicyRuleStatLastHitTime.setStatus('current')
if mibBuilder.loadTexts: ltmFwPolicyRuleStatLastHitTime.setDescription('The last time a packet matched this rule.')
ltmFwPolicyRuleStatLastHitTimeFmt = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 16, 2, 2, 1, 10), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwPolicyRuleStatLastHitTimeFmt.setStatus('current')
if mibBuilder.loadTexts: ltmFwPolicyRuleStatLastHitTimeFmt.setDescription('The last time a packet matched this rule, in human readable format.')
ltmFwPolicyRuleStatOverlapper = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 16, 2, 2, 1, 11), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwPolicyRuleStatOverlapper.setStatus('current')
if mibBuilder.loadTexts: ltmFwPolicyRuleStatOverlapper.setDescription('The overlapper for this rule.')
ltmFwPolicyRuleStatOverlapType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 16, 2, 2, 1, 12), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwPolicyRuleStatOverlapType.setStatus('current')
if mibBuilder.loadTexts: ltmFwPolicyRuleStatOverlapType.setDescription('The overlap type.')
bigipLocalTMCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 3375, 2, 5, 1, 2)).setObjects(("F5-BIGIP-LOCAL-MIB", "bigipLocalTMGroups"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bigipLocalTMCompliance = bigipLocalTMCompliance.setStatus('current')
if mibBuilder.loadTexts: bigipLocalTMCompliance.setDescription('This specifies the objects that are required to claim compliance to F5 Traffic Management System.')
bigipLocalTMGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2))
ltmAttrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 1)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmAttrLbmodeFastestMaxIdleTime"), ("F5-BIGIP-LOCAL-MIB", "ltmAttrMirrorState"), ("F5-BIGIP-LOCAL-MIB", "ltmAttrPersistDestAddrLimitMode"), ("F5-BIGIP-LOCAL-MIB", "ltmAttrPersistDestAddrMaxCount"), ("F5-BIGIP-LOCAL-MIB", "ltmAttrSnatAnyIpProtocol"), ("F5-BIGIP-LOCAL-MIB", "ltmAttrMirrorPeerIpAddr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmAttrGroup = ltmAttrGroup.setStatus('current')
if mibBuilder.loadTexts: ltmAttrGroup.setDescription('A collection of objects of ltmGlobalAttr MIB.')
ltmRateFilterGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 2)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmRateFilterNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmRateFilterCname"), ("F5-BIGIP-LOCAL-MIB", "ltmRateFilterRate"), ("F5-BIGIP-LOCAL-MIB", "ltmRateFilterCeil"), ("F5-BIGIP-LOCAL-MIB", "ltmRateFilterBurst"), ("F5-BIGIP-LOCAL-MIB", "ltmRateFilterPname"), ("F5-BIGIP-LOCAL-MIB", "ltmRateFilterQtype"), ("F5-BIGIP-LOCAL-MIB", "ltmRateFilterDirection"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmRateFilterGroup = ltmRateFilterGroup.setStatus('current')
if mibBuilder.loadTexts: ltmRateFilterGroup.setDescription('A collection of objects of ltmRateFilter MIB.')
ltmRateFilterStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 3)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmRateFilterStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmRateFilterStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmRateFilterStatCname"), ("F5-BIGIP-LOCAL-MIB", "ltmRateFilterStatRateBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmRateFilterStatBurstBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmRateFilterStatDroppedBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmRateFilterStatBytesQueued"), ("F5-BIGIP-LOCAL-MIB", "ltmRateFilterStatBytesPerSec"), ("F5-BIGIP-LOCAL-MIB", "ltmRateFilterStatDropTailPkts"), ("F5-BIGIP-LOCAL-MIB", "ltmRateFilterStatDropTailBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmRateFilterStatDropRandPkts"), ("F5-BIGIP-LOCAL-MIB", "ltmRateFilterStatDropRandBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmRateFilterStatDropTotPkts"), ("F5-BIGIP-LOCAL-MIB", "ltmRateFilterStatDropTotBytes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmRateFilterStatGroup = ltmRateFilterStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmRateFilterStatGroup.setDescription('A collection of objects of ltmRateFilterStat MIB.')
ltmMirrorPortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 4)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmMirrorPortNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmMirrorPortName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmMirrorPortGroup = ltmMirrorPortGroup.setStatus('current')
if mibBuilder.loadTexts: ltmMirrorPortGroup.setDescription('A collection of objects of ltmMirrorPort MIB.')
ltmMirrorPortMemberGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 5)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmMirrorPortMemberNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmMirrorPortMemberToName"), ("F5-BIGIP-LOCAL-MIB", "ltmMirrorPortMemberName"), ("F5-BIGIP-LOCAL-MIB", "ltmMirrorPortMemberConduitName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmMirrorPortMemberGroup = ltmMirrorPortMemberGroup.setStatus('current')
if mibBuilder.loadTexts: ltmMirrorPortMemberGroup.setDescription('A collection of objects of ltmMirrorPortMember MIB.')
ltmNatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 6)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmNatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmNatTransAddrType"), ("F5-BIGIP-LOCAL-MIB", "ltmNatTransAddr"), ("F5-BIGIP-LOCAL-MIB", "ltmNatOrigAddrType"), ("F5-BIGIP-LOCAL-MIB", "ltmNatOrigAddr"), ("F5-BIGIP-LOCAL-MIB", "ltmNatEnabled"), ("F5-BIGIP-LOCAL-MIB", "ltmNatArpEnabled"), ("F5-BIGIP-LOCAL-MIB", "ltmNatUnitId"), ("F5-BIGIP-LOCAL-MIB", "ltmNatListedEnabledVlans"), ("F5-BIGIP-LOCAL-MIB", "ltmNatName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmNatGroup = ltmNatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmNatGroup.setDescription('A collection of objects of ltmNat MIB.')
ltmNatStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 7)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmNatStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmNatStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmNatStatTransAddrType"), ("F5-BIGIP-LOCAL-MIB", "ltmNatStatTransAddr"), ("F5-BIGIP-LOCAL-MIB", "ltmNatStatServerPktsIn"), ("F5-BIGIP-LOCAL-MIB", "ltmNatStatServerBytesIn"), ("F5-BIGIP-LOCAL-MIB", "ltmNatStatServerPktsOut"), ("F5-BIGIP-LOCAL-MIB", "ltmNatStatServerBytesOut"), ("F5-BIGIP-LOCAL-MIB", "ltmNatStatServerMaxConns"), ("F5-BIGIP-LOCAL-MIB", "ltmNatStatServerTotConns"), ("F5-BIGIP-LOCAL-MIB", "ltmNatStatServerCurConns"), ("F5-BIGIP-LOCAL-MIB", "ltmNatStatName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmNatStatGroup = ltmNatStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmNatStatGroup.setDescription('A collection of objects of ltmNatStat MIB.')
ltmNatVlanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 8)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmNatVlanNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmNatVlanTransAddrType"), ("F5-BIGIP-LOCAL-MIB", "ltmNatVlanTransAddr"), ("F5-BIGIP-LOCAL-MIB", "ltmNatVlanVlanName"), ("F5-BIGIP-LOCAL-MIB", "ltmNatVlanNatName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmNatVlanGroup = ltmNatVlanGroup.setStatus('current')
if mibBuilder.loadTexts: ltmNatVlanGroup.setDescription('A collection of objects of ltmNatVlan MIB.')
ltmNodeAddrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 9)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrAddrType"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrAddr"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrConnLimit"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrRatio"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrDynamicRatio"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrMonitorState"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrMonitorStatus"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrMonitorRule"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrNewSessionEnable"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrSessionStatus"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrPoolMemberRefCount"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrScreenName"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrAvailabilityState"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrEnabledState"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrDisabledParentType"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrStatusReason"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmNodeAddrGroup = ltmNodeAddrGroup.setStatus('current')
if mibBuilder.loadTexts: ltmNodeAddrGroup.setDescription('A collection of objects of ltmNodeAddr MIB.')
ltmNodeAddrStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 10)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrStatAddrType"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrStatAddr"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrStatServerPktsIn"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrStatServerBytesIn"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrStatServerPktsOut"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrStatServerBytesOut"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrStatServerMaxConns"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrStatServerTotConns"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrStatServerCurConns"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrStatPvaPktsIn"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrStatPvaBytesIn"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrStatPvaPktsOut"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrStatPvaBytesOut"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrStatPvaMaxConns"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrStatPvaTotConns"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrStatPvaCurConns"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrStatTotRequests"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrStatTotPvaAssistConn"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrStatCurrPvaAssistConn"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrStatNodeName"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrStatCurSessions"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrStatCurrentConnsPerSec"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrStatDurationRateExceeded"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmNodeAddrStatGroup = ltmNodeAddrStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmNodeAddrStatGroup.setDescription('A collection of objects of ltmNodeAddrStat MIB.')
ltmPoolGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 11)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmPoolNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolName"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolLbMode"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolActionOnServiceDown"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMinUpMembers"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMinUpMembersEnable"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMinUpMemberAction"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMinActiveMembers"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolActiveMemberCnt"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolDisallowSnat"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolDisallowNat"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolSimpleTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolIpTosToClient"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolIpTosToServer"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolLinkQosToClient"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolLinkQosToServer"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolDynamicRatioSum"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMonitorRule"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolAvailabilityState"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolEnabledState"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolDisabledParentType"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatusReason"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolSlowRampTime"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberCnt"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolQueueOnConnectionLimit"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolQueueDepthLimit"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolQueueTimeLimit"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmPoolGroup = ltmPoolGroup.setStatus('current')
if mibBuilder.loadTexts: ltmPoolGroup.setDescription('A collection of objects of ltmPool MIB.')
ltmPoolStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 12)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmPoolStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatServerPktsIn"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatServerBytesIn"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatServerPktsOut"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatServerBytesOut"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatServerMaxConns"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatServerTotConns"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatServerCurConns"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatPvaPktsIn"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatPvaBytesIn"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatPvaPktsOut"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatPvaBytesOut"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatPvaMaxConns"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatPvaTotConns"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatPvaCurConns"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatTotPvaAssistConn"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatCurrPvaAssistConn"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatConnqDepth"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatConnqAgeHead"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatConnqAgeMax"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatConnqAgeEma"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatConnqAgeEdm"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatConnqServiced"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatConnqAllDepth"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatConnqAllAgeHead"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatConnqAllAgeMax"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatConnqAllAgeEma"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatConnqAllAgeEdm"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatConnqAllServiced"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatTotRequests"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatCurSessions"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmPoolStatGroup = ltmPoolStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmPoolStatGroup.setDescription('A collection of objects of ltmPoolStat MIB.')
ltmPoolMemberGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 13)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberPoolName"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberAddrType"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberAddr"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberPort"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberConnLimit"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberRatio"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberWeight"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberPriority"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberDynamicRatio"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberMonitorState"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberMonitorStatus"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberNewSessionEnable"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberSessionStatus"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberMonitorRule"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberAvailabilityState"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberEnabledState"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberDisabledParentType"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberStatusReason"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberNodeName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmPoolMemberGroup = ltmPoolMemberGroup.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMemberGroup.setDescription('A collection of objects of ltmPoolMember MIB.')
ltmPoolMemberStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 14)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberStatPoolName"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberStatAddrType"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberStatAddr"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberStatPort"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberStatServerPktsIn"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberStatServerBytesIn"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberStatServerPktsOut"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberStatServerBytesOut"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberStatServerMaxConns"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberStatServerTotConns"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberStatServerCurConns"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberStatPvaPktsIn"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberStatPvaBytesIn"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberStatPvaPktsOut"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberStatPvaBytesOut"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberStatPvaMaxConns"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberStatPvaTotConns"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberStatPvaCurConns"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberStatTotRequests"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberStatTotPvaAssistConn"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberStatCurrPvaAssistConn"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberStatConnqDepth"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberStatConnqAgeHead"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberStatConnqAgeMax"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberStatConnqAgeEma"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberStatConnqAgeEdm"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberStatConnqServiced"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberStatNodeName"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberStatCurSessions"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberStatCurrentConnsPerSec"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberStatDurationRateExceeded"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmPoolMemberStatGroup = ltmPoolMemberStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMemberStatGroup.setDescription('A collection of objects of ltmPoolMemberStat MIB.')
ltmAuthProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 15)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmAuthProfileNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmAuthProfileName"), ("F5-BIGIP-LOCAL-MIB", "ltmAuthProfileConfigSource"), ("F5-BIGIP-LOCAL-MIB", "ltmAuthProfileDefaultName"), ("F5-BIGIP-LOCAL-MIB", "ltmAuthProfileConfigName"), ("F5-BIGIP-LOCAL-MIB", "ltmAuthProfileType"), ("F5-BIGIP-LOCAL-MIB", "ltmAuthProfileMode"), ("F5-BIGIP-LOCAL-MIB", "ltmAuthProfileCredentialSource"), ("F5-BIGIP-LOCAL-MIB", "ltmAuthProfileRuleName"), ("F5-BIGIP-LOCAL-MIB", "ltmAuthProfileIdleTimeout"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmAuthProfileGroup = ltmAuthProfileGroup.setStatus('current')
if mibBuilder.loadTexts: ltmAuthProfileGroup.setDescription('A collection of objects of ltmAuthProfile MIB.')
ltmAuthProfileStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 16)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmAuthProfileStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmAuthProfileStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmAuthProfileStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmAuthProfileStatTotSessions"), ("F5-BIGIP-LOCAL-MIB", "ltmAuthProfileStatCurSessions"), ("F5-BIGIP-LOCAL-MIB", "ltmAuthProfileStatMaxSessions"), ("F5-BIGIP-LOCAL-MIB", "ltmAuthProfileStatSuccessResults"), ("F5-BIGIP-LOCAL-MIB", "ltmAuthProfileStatFailureResults"), ("F5-BIGIP-LOCAL-MIB", "ltmAuthProfileStatWantcredentialResults"), ("F5-BIGIP-LOCAL-MIB", "ltmAuthProfileStatErrorResults"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmAuthProfileStatGroup = ltmAuthProfileStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmAuthProfileStatGroup.setDescription('A collection of objects of ltmAuthProfileStat MIB.')
ltmClientSslGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 17)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmClientSslNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslName"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslConfigSource"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslDefaultName"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslMode"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslKey"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslCert"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslChain"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslCafile"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslCrlfile"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslClientcertca"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslCiphers"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslPassphrase"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslOptions"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslModsslmethods"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslCacheSize"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslCacheTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslRenegotiatePeriod"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslRenegotiateSize"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslRenegotiateMaxRecordDelay"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslHandshakeTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslAlertTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslPeerCertMode"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslAuthenticateOnce"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslAuthenticateDepth"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslUncleanShutdown"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStrictResume"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslAllowNonssl"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslSessionTicket"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslFwdpEnabled"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslFwdpCaKey"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslFwdpCaCert"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslFwdpCaPassphrase"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslFwdpCertLifespan"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslFwdpCertExtensionIncludes"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslFwdpLookupByIpaddrPort"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslGenericAlert"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslSslSignHash"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslFwdpBypassEnabled"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslFwdpBypassDipBList"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslFwdpBypassDipWList"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslFwdpBypassSipBList"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslFwdpBypassSipWList"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslFwdpBypassHnBList"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslFwdpBypassHnWList"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslProxySsl"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslProxySslPassthrough"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslPeerNoRenegotiateTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslMaxRenegotiationsPerMin"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslSessionMirroring"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmClientSslGroup = ltmClientSslGroup.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslGroup.setDescription('A collection of objects of ltmClientSslProfile MIB.')
ltmClientSslStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 18)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatCurConns"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatMaxConns"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatCurNativeConns"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatMaxNativeConns"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatTotNativeConns"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatCurCompatConns"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatMaxCompatConns"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatTotCompatConns"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatEncryptedBytesIn"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatEncryptedBytesOut"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatDecryptedBytesIn"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatDecryptedBytesOut"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatRecordsIn"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatRecordsOut"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatFullyHwAcceleratedConns"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatPartiallyHwAcceleratedConns"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatNonHwAcceleratedConns"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatPrematureDisconnects"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatMidstreamRenegotiations"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatSessCacheCurEntries"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatSessCacheHits"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatSessCacheLookups"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatSessCacheOverflows"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatSessCacheInvalidations"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatPeercertValid"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatPeercertInvalid"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatPeercertNone"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatHandshakeFailures"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatBadRecords"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatFatalAlerts"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatSslv2"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatSslv3"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatTlsv1"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatAdhKeyxchg"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatDhDssKeyxchg"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatDhRsaKeyxchg"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatDssKeyxchg"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatEdhDssKeyxchg"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatRsaKeyxchg"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatNullBulk"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatAesBulk"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatDesBulk"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatIdeaBulk"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatRc2Bulk"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatRc4Bulk"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatNullDigest"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatMd5Digest"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatShaDigest"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatNotssl"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatEdhRsaKeyxchg"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatSecureHandshakes"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatInsecureHandshakeAccepts"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatInsecureHandshakeRejects"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatInsecureRenegotiationRejects"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatSniRejects"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatTlsv11"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatTlsv12"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatDtlsv1"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatReused"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatReuseFailed"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatEcdheRsaKeyxchg"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatConns"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatCachedCerts"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatEcdhRsaKeyxchg"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatEcdheEcdsaKeyxchg"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatEcdhEcdsaKeyxchg"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatDheDssKeyxchg"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatAesGcmBulk"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatDestinationIpBypasses"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatSourceIpBypasses"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatHostnameBypasses"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatRenegotiationsRejected"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatOcspStaplingConns"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatOcspStaplingResponseStatusErrors"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatOcspStaplingResponseValidationErrors"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatOcspStaplingCertStatusErrors"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatOcspStaplingOcspConnHttpErrors"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatOcspStaplingOcspConnTimeouts"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatOcspStaplingOcspConnFailures"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmClientSslStatGroup = ltmClientSslStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatGroup.setDescription('A collection of objects of ltmClientSslProfileStat MIB.')
ltmServerSslGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 19)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmServerSslNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslName"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslConfigSource"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslDefaultName"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslMode"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslKey"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslCert"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslChain"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslCafile"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslCrlfile"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslCiphers"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslPassphrase"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslOptions"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslModsslmethods"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslRenegotiatePeriod"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslRenegotiateSize"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslPeerCertMode"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslAuthenticateOnce"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslAuthenticateDepth"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslAuthenticateName"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslUncleanShutdown"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStrictResume"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslHandshakeTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslAlertTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslCacheSize"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslCacheTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslSessionTicket"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslFwdpEnabled"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslDropExpCert"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslDropUntrustCa"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslGenericAlert"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslSslSignHash"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslFwdpBypassEnabled"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslProxySsl"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslProxySslPassthrough"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslSessionMirroring"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmServerSslGroup = ltmServerSslGroup.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslGroup.setDescription('A collection of objects of ltmServerSslProfile MIB.')
ltmServerSslStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 20)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatCurConns"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatMaxConns"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatCurNativeConns"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatMaxNativeConns"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatTotNativeConns"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatCurCompatConns"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatMaxCompatConns"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatTotCompatConns"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatEncryptedBytesIn"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatEncryptedBytesOut"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatDecryptedBytesIn"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatDecryptedBytesOut"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatRecordsIn"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatRecordsOut"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatFullyHwAcceleratedConns"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatPartiallyHwAcceleratedConns"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatNonHwAcceleratedConns"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatPrematureDisconnects"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatMidstreamRenegotiations"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatSessCacheCurEntries"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatSessCacheHits"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatSessCacheLookups"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatSessCacheOverflows"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatSessCacheInvalidations"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatPeercertValid"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatPeercertInvalid"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatPeercertNone"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatHandshakeFailures"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatBadRecords"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatFatalAlerts"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatSslv2"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatSslv3"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatTlsv1"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatAdhKeyxchg"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatDhDssKeyxchg"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatDhRsaKeyxchg"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatDssKeyxchg"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatEdhDssKeyxchg"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatRsaKeyxchg"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatNullBulk"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatAesBulk"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatDesBulk"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatIdeaBulk"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatRc2Bulk"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatRc4Bulk"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatNullDigest"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatMd5Digest"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatShaDigest"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatNotssl"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatEdhRsaKeyxchg"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatSecureHandshakes"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatInsecureHandshakeAccepts"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatInsecureHandshakeRejects"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatInsecureRenegotiationRejects"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatSniRejects"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatTlsv11"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatTlsv12"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatDtlsv1"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatReused"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatReuseFailed"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatEcdheRsaKeyxchg"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatConns"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatEcdhRsaKeyxchg"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatEcdheEcdsaKeyxchg"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatEcdhEcdsaKeyxchg"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatDheDssKeyxchg"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatAesGcmBulk"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatDestinationIpBypasses"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatSourceIpBypasses"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatHostnameBypasses"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmServerSslStatGroup = ltmServerSslStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatGroup.setDescription('A collection of objects of ltmServerSslProfileStat MIB.')
ltmConnPoolProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 21)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmConnPoolProfileNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmConnPoolProfileName"), ("F5-BIGIP-LOCAL-MIB", "ltmConnPoolProfileConfigSource"), ("F5-BIGIP-LOCAL-MIB", "ltmConnPoolProfileDefaultName"), ("F5-BIGIP-LOCAL-MIB", "ltmConnPoolProfileSrcMaskType"), ("F5-BIGIP-LOCAL-MIB", "ltmConnPoolProfileSrcMask"), ("F5-BIGIP-LOCAL-MIB", "ltmConnPoolProfileMaxSize"), ("F5-BIGIP-LOCAL-MIB", "ltmConnPoolProfileMaxAge"), ("F5-BIGIP-LOCAL-MIB", "ltmConnPoolProfileMaxReuse"), ("F5-BIGIP-LOCAL-MIB", "ltmConnPoolProfileIdleTimeout"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmConnPoolProfileGroup = ltmConnPoolProfileGroup.setStatus('current')
if mibBuilder.loadTexts: ltmConnPoolProfileGroup.setDescription('A collection of objects of ltmConnPoolProfile MIB.')
ltmConnPoolProfileStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 22)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmConnPoolProfileStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmConnPoolProfileStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmConnPoolProfileStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmConnPoolProfileStatCurSize"), ("F5-BIGIP-LOCAL-MIB", "ltmConnPoolProfileStatMaxSize"), ("F5-BIGIP-LOCAL-MIB", "ltmConnPoolProfileStatReuses"), ("F5-BIGIP-LOCAL-MIB", "ltmConnPoolProfileStatConnects"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmConnPoolProfileStatGroup = ltmConnPoolProfileStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmConnPoolProfileStatGroup.setDescription('A collection of objects of ltmConnPoolProfileStat MIB.')
ltmFastL4ProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 23)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileName"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileConfigSource"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileDefaultName"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileResetOnTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileIpFragReass"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileIdleTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileTcpHandshakeTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileMssOverride"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfilePvaAccelMode"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileTcpTimestampMode"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileTcpWscaleMode"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileTcpGenerateIsn"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileTcpStripSack"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileIpTosToClient"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileIpTosToServer"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileLinkQosToClient"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileLinkQosToServer"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileRttFromClient"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileRttFromServer"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileTcpCloseTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileLooseInitiation"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileLooseClose"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileHardSyncookie"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileSoftSyncookie"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileLateBinding"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileExplicitFlowMigration"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileClientTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileTimeoutRecovery"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmFastL4ProfileGroup = ltmFastL4ProfileGroup.setStatus('current')
if mibBuilder.loadTexts: ltmFastL4ProfileGroup.setDescription('A collection of objects of ltmFastL4Profile MIB.')
ltmFtpProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 24)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmFtpProfileNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmFtpProfileName"), ("F5-BIGIP-LOCAL-MIB", "ltmFtpProfileConfigSource"), ("F5-BIGIP-LOCAL-MIB", "ltmFtpProfileDefaultName"), ("F5-BIGIP-LOCAL-MIB", "ltmFtpProfileTranslateExtended"), ("F5-BIGIP-LOCAL-MIB", "ltmFtpProfileDataPort"), ("F5-BIGIP-LOCAL-MIB", "ltmFtpProfileLogPublisher"), ("F5-BIGIP-LOCAL-MIB", "ltmFtpProfileLogProfile"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmFtpProfileGroup = ltmFtpProfileGroup.setStatus('current')
if mibBuilder.loadTexts: ltmFtpProfileGroup.setDescription('A collection of objects of ltmFtpProfile MIB.')
ltmHttpProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 25)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileName"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileConfigSource"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileDefaultName"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileBasicAuthRealm"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileOneConnect"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileHeaderInsert"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileHeaderErase"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileFallbackHost"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileCompressMode"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileCompressMinSize"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileCompressBufferSize"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileCompressVaryHeader"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileCompressAllowHttp10"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileCompressGzipMemlevel"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileCompressGzipWindowsize"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileCompressGzipLevel"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileCompressKeepAcceptEncoding"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileCompressBrowserWorkarounds"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileResponseChunking"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileLwsMaxColumn"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileLwsSeparator"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileRedirectRewrite"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileMaxHeaderSize"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfilePipelining"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileInsertXforwardedFor"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileMaxRequests"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileCompressCpusaver"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileCompressCpusaverHigh"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileCompressCpusaverLow"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileRamcache"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileRamcacheSize"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileRamcacheMaxEntries"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileRamcacheMaxAge"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileRamcacheObjectMinSize"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileRamcacheObjectMaxSize"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileRamcacheIgnoreClient"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileRamcacheAgingRate"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileRamcacheInsertAgeHeader"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileCompressPreferredMethod"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileServerAgentName"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfilePassthroughPipeline"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileTruncatedRedirects"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfilePassthroughOversizeClientHeaders"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfilePassthroughOversizeServerHeaders"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfilePassthroughExcessClientHeaders"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfilePassthroughExcessServerHeaders"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfilePassthroughUnknownMethod"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmHttpProfileGroup = ltmHttpProfileGroup.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileGroup.setDescription('A collection of objects of ltmHttpProfile MIB.')
ltmCompUriInclGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 26)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmCompUriInclNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmCompUriInclName"), ("F5-BIGIP-LOCAL-MIB", "ltmCompUriInclIndex"), ("F5-BIGIP-LOCAL-MIB", "ltmCompUriInclUri"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmCompUriInclGroup = ltmCompUriInclGroup.setStatus('current')
if mibBuilder.loadTexts: ltmCompUriInclGroup.setDescription('A collection of objects of ltmHttpProfileCompUriIncl MIB.')
ltmCompUriExclGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 27)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmCompUriExclNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmCompUriExclName"), ("F5-BIGIP-LOCAL-MIB", "ltmCompUriExclIndex"), ("F5-BIGIP-LOCAL-MIB", "ltmCompUriExclUri"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmCompUriExclGroup = ltmCompUriExclGroup.setStatus('current')
if mibBuilder.loadTexts: ltmCompUriExclGroup.setDescription('A collection of objects of ltmHttpProfileCompUriExcl MIB.')
ltmCompContTypeInclGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 28)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmCompContTypeInclNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmCompContTypeInclName"), ("F5-BIGIP-LOCAL-MIB", "ltmCompContTypeInclIndex"), ("F5-BIGIP-LOCAL-MIB", "ltmCompContTypeInclContentType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmCompContTypeInclGroup = ltmCompContTypeInclGroup.setStatus('current')
if mibBuilder.loadTexts: ltmCompContTypeInclGroup.setDescription('A collection of objects of ltmHttpProfileCompContTypeIncl MIB.')
ltmCompContTypeExclGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 29)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmCompContTypeExclNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmCompContTypeExclName"), ("F5-BIGIP-LOCAL-MIB", "ltmCompContTypeExclIndex"), ("F5-BIGIP-LOCAL-MIB", "ltmCompContTypeExclContentType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmCompContTypeExclGroup = ltmCompContTypeExclGroup.setStatus('current')
if mibBuilder.loadTexts: ltmCompContTypeExclGroup.setDescription('A collection of objects of ltmHttpProfileCompContTypeExcl MIB.')
ltmHttpProfileStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 30)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatCookiePersistInserts"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatResp2xxCnt"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatResp3xxCnt"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatResp4xxCnt"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatResp5xxCnt"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatNumberReqs"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatGetReqs"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatPostReqs"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatV9Reqs"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatV10Reqs"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatV11Reqs"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatV9Resp"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatV10Resp"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatV11Resp"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatMaxKeepaliveReq"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatRespBucket1k"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatRespBucket4k"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatRespBucket16k"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatRespBucket32k"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatPrecompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatPostcompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatNullCompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatHtmlPrecompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatHtmlPostcompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatCssPrecompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatCssPostcompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatJsPrecompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatJsPostcompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatXmlPrecompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatXmlPostcompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatSgmlPrecompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatSgmlPostcompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatPlainPrecompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatPlainPostcompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatOctetPrecompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatOctetPostcompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatImagePrecompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatImagePostcompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatVideoPrecompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatVideoPostcompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatAudioPrecompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatAudioPostcompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatOtherPrecompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatOtherPostcompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatRamcacheHits"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatRamcacheMisses"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatRamcacheMissesAll"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatRamcacheHitBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatRamcacheMissBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatRamcacheMissBytesAll"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatRamcacheSize"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatRamcacheCount"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatRamcacheEvictions"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatRespBucket64k"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatPassthroughIrule"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatPassthroughConnect"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatPassthroughWebSockets"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatPassthroughOversizeClientHeaders"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatPassthroughOversizeServerHeaders"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatPassthroughExcessClientHeaders"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatPassthroughExcessServerHeaders"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatPassthroughUnknownMethod"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatPassthroughPipeline"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmHttpProfileStatGroup = ltmHttpProfileStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileStatGroup.setDescription('A collection of objects of ltmHttpProfileStat MIB.')
ltmPersistProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 31)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmPersistProfileNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmPersistProfileName"), ("F5-BIGIP-LOCAL-MIB", "ltmPersistProfileConfigSource"), ("F5-BIGIP-LOCAL-MIB", "ltmPersistProfileDefaultName"), ("F5-BIGIP-LOCAL-MIB", "ltmPersistProfileMode"), ("F5-BIGIP-LOCAL-MIB", "ltmPersistProfileMirror"), ("F5-BIGIP-LOCAL-MIB", "ltmPersistProfileTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmPersistProfileMaskType"), ("F5-BIGIP-LOCAL-MIB", "ltmPersistProfileMask"), ("F5-BIGIP-LOCAL-MIB", "ltmPersistProfileCookieMethod"), ("F5-BIGIP-LOCAL-MIB", "ltmPersistProfileCookieName"), ("F5-BIGIP-LOCAL-MIB", "ltmPersistProfileCookieExpiration"), ("F5-BIGIP-LOCAL-MIB", "ltmPersistProfileCookieHashOffset"), ("F5-BIGIP-LOCAL-MIB", "ltmPersistProfileCookieHashLength"), ("F5-BIGIP-LOCAL-MIB", "ltmPersistProfileMsrdpNoSessionDir"), ("F5-BIGIP-LOCAL-MIB", "ltmPersistProfileMapProxies"), ("F5-BIGIP-LOCAL-MIB", "ltmPersistProfileAcrossServices"), ("F5-BIGIP-LOCAL-MIB", "ltmPersistProfileAcrossVirtuals"), ("F5-BIGIP-LOCAL-MIB", "ltmPersistProfileAcrossPools"), ("F5-BIGIP-LOCAL-MIB", "ltmPersistProfileUieRule"), ("F5-BIGIP-LOCAL-MIB", "ltmPersistProfileSipInfo"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmPersistProfileGroup = ltmPersistProfileGroup.setStatus('current')
if mibBuilder.loadTexts: ltmPersistProfileGroup.setDescription('A collection of objects of ltmPersistProfile MIB.')
ltmStreamProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 32)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmStreamProfileNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmStreamProfileName"), ("F5-BIGIP-LOCAL-MIB", "ltmStreamProfileConfigSource"), ("F5-BIGIP-LOCAL-MIB", "ltmStreamProfileDefaultName"), ("F5-BIGIP-LOCAL-MIB", "ltmStreamProfileSource"), ("F5-BIGIP-LOCAL-MIB", "ltmStreamProfileTarget"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmStreamProfileGroup = ltmStreamProfileGroup.setStatus('current')
if mibBuilder.loadTexts: ltmStreamProfileGroup.setDescription('A collection of objects of ltmStreamProfile MIB.')
ltmStreamProfileStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 33)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmStreamProfileStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmStreamProfileStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmStreamProfileStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmStreamProfileStatReplaces"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmStreamProfileStatGroup = ltmStreamProfileStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmStreamProfileStatGroup.setDescription('A collection of objects of ltmStreamProfileStat MIB.')
ltmTcpProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 34)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileName"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileConfigSource"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileDefaultName"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileResetOnTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileTimeWaitRecycle"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileDelayedAcks"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileProxyMss"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileProxyOptions"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileProxyBufferLow"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileProxyBufferHigh"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileIdleTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileTimeWaitTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileFinWaitTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileCloseWaitTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileSndbuf"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileRcvwnd"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileKeepAliveInterval"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileSynMaxrtx"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileMaxrtx"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileIpTosToClient"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileLinkQosToClient"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileDeferredAccept"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileSelectiveAcks"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileEcn"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileLimitedTransmit"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileHighPerfTcpExt"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileSlowStart"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileBandwidthDelay"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileNagle"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileAckOnPush"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileMd5Sig"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileMd5SigPass"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileAbc"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileCongestionCtrl"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileDsack"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileCmetricsCache"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileVerifiedAccept"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfilePktLossIgnoreRate"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfilePktLossIgnoreBurst"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileZeroWindowTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileInitCwnd"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileInitRwnd"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileDelayWindowControl"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileSynRtoBase"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileTimestamps"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileMinRto"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileMptcp"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileRatePace"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileMptcpCsum"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileMptcpCsumVerify"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileMptcpDebug"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileMptcpFallback"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileMptcpJoinmax"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileMptcpNojoindssack"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileMptcpRtomax"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileMptcpRxmitmin"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileMptcpSubflowmax"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileMptcpMakeafterbreak"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileMptcpTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileMptcpFastjoin"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileEarlyRetransmit"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileTailLossProbe"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmTcpProfileGroup = ltmTcpProfileGroup.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileGroup.setDescription('A collection of objects of ltmTcpProfile MIB.')
ltmTcpProfileStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 35)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileStatOpen"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileStatCloseWait"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileStatFinWait"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileStatTimeWait"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileStatAccepts"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileStatAcceptfails"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileStatConnects"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileStatConnfails"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileStatExpires"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileStatAbandons"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileStatRxrst"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileStatRxbadsum"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileStatRxbadseg"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileStatRxooseg"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileStatRxcookie"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileStatRxbadcookie"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileStatSyncacheover"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileStatTxrexmits"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmTcpProfileStatGroup = ltmTcpProfileStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileStatGroup.setDescription('A collection of objects of ltmTcpProfileStat MIB.')
ltmUdpProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 36)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmUdpProfileNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmUdpProfileName"), ("F5-BIGIP-LOCAL-MIB", "ltmUdpProfileConfigSource"), ("F5-BIGIP-LOCAL-MIB", "ltmUdpProfileDefaultName"), ("F5-BIGIP-LOCAL-MIB", "ltmUdpProfileIdleTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmUdpProfileIpTosToClient"), ("F5-BIGIP-LOCAL-MIB", "ltmUdpProfileLinkQosToClient"), ("F5-BIGIP-LOCAL-MIB", "ltmUdpProfileDatagramLb"), ("F5-BIGIP-LOCAL-MIB", "ltmUdpProfileAllowNoPayload"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmUdpProfileGroup = ltmUdpProfileGroup.setStatus('current')
if mibBuilder.loadTexts: ltmUdpProfileGroup.setDescription('A collection of objects of ltmUdpProfile MIB.')
ltmUdpProfileStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 37)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmUdpProfileStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmUdpProfileStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmUdpProfileStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmUdpProfileStatOpen"), ("F5-BIGIP-LOCAL-MIB", "ltmUdpProfileStatAccepts"), ("F5-BIGIP-LOCAL-MIB", "ltmUdpProfileStatAcceptfails"), ("F5-BIGIP-LOCAL-MIB", "ltmUdpProfileStatConnects"), ("F5-BIGIP-LOCAL-MIB", "ltmUdpProfileStatConnfails"), ("F5-BIGIP-LOCAL-MIB", "ltmUdpProfileStatExpires"), ("F5-BIGIP-LOCAL-MIB", "ltmUdpProfileStatRxdgram"), ("F5-BIGIP-LOCAL-MIB", "ltmUdpProfileStatRxbaddgram"), ("F5-BIGIP-LOCAL-MIB", "ltmUdpProfileStatRxunreach"), ("F5-BIGIP-LOCAL-MIB", "ltmUdpProfileStatRxbadsum"), ("F5-BIGIP-LOCAL-MIB", "ltmUdpProfileStatRxnosum"), ("F5-BIGIP-LOCAL-MIB", "ltmUdpProfileStatTxdgram"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmUdpProfileStatGroup = ltmUdpProfileStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmUdpProfileStatGroup.setDescription('A collection of objects of ltmUdpProfileStat MIB.')
ltmRuleGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 38)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmRuleNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmRuleName"), ("F5-BIGIP-LOCAL-MIB", "ltmRuleDefinition"), ("F5-BIGIP-LOCAL-MIB", "ltmRuleConfigSource"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmRuleGroup = ltmRuleGroup.setStatus('current')
if mibBuilder.loadTexts: ltmRuleGroup.setDescription('A collection of objects of ltmRule MIB.')
ltmRuleEventGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 39)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmRuleEventNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmRuleEventName"), ("F5-BIGIP-LOCAL-MIB", "ltmRuleEventEventType"), ("F5-BIGIP-LOCAL-MIB", "ltmRuleEventPriority"), ("F5-BIGIP-LOCAL-MIB", "ltmRuleEventScript"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmRuleEventGroup = ltmRuleEventGroup.setStatus('current')
if mibBuilder.loadTexts: ltmRuleEventGroup.setDescription('A collection of objects of ltmRuleEvent MIB.')
ltmRuleEventStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 40)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmRuleEventStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmRuleEventStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmRuleEventStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmRuleEventStatEventType"), ("F5-BIGIP-LOCAL-MIB", "ltmRuleEventStatPriority"), ("F5-BIGIP-LOCAL-MIB", "ltmRuleEventStatFailures"), ("F5-BIGIP-LOCAL-MIB", "ltmRuleEventStatAborts"), ("F5-BIGIP-LOCAL-MIB", "ltmRuleEventStatTotalExecutions"), ("F5-BIGIP-LOCAL-MIB", "ltmRuleEventStatAvgCycles"), ("F5-BIGIP-LOCAL-MIB", "ltmRuleEventStatMaxCycles"), ("F5-BIGIP-LOCAL-MIB", "ltmRuleEventStatMinCycles"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmRuleEventStatGroup = ltmRuleEventStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmRuleEventStatGroup.setDescription('A collection of objects of ltmRuleEventStat MIB.')
ltmSnatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 41)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmSnatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmSnatName"), ("F5-BIGIP-LOCAL-MIB", "ltmSnatSfFlags"), ("F5-BIGIP-LOCAL-MIB", "ltmSnatType"), ("F5-BIGIP-LOCAL-MIB", "ltmSnatTransAddrType"), ("F5-BIGIP-LOCAL-MIB", "ltmSnatTransAddr"), ("F5-BIGIP-LOCAL-MIB", "ltmSnatSnatpoolName"), ("F5-BIGIP-LOCAL-MIB", "ltmSnatListedEnabledVlans"), ("F5-BIGIP-LOCAL-MIB", "ltmSnatTransAddrName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmSnatGroup = ltmSnatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmSnatGroup.setDescription('A collection of objects of ltmSnat MIB.')
ltmSnatStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 42)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmSnatStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmSnatStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmSnatStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmSnatStatClientPktsIn"), ("F5-BIGIP-LOCAL-MIB", "ltmSnatStatClientBytesIn"), ("F5-BIGIP-LOCAL-MIB", "ltmSnatStatClientPktsOut"), ("F5-BIGIP-LOCAL-MIB", "ltmSnatStatClientBytesOut"), ("F5-BIGIP-LOCAL-MIB", "ltmSnatStatClientMaxConns"), ("F5-BIGIP-LOCAL-MIB", "ltmSnatStatClientTotConns"), ("F5-BIGIP-LOCAL-MIB", "ltmSnatStatClientCurConns"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmSnatStatGroup = ltmSnatStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmSnatStatGroup.setDescription('A collection of objects of ltmSnatStat MIB.')
ltmSnatVlanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 43)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmSnatVlanNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmSnatVlanSnatName"), ("F5-BIGIP-LOCAL-MIB", "ltmSnatVlanVlanName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmSnatVlanGroup = ltmSnatVlanGroup.setStatus('current')
if mibBuilder.loadTexts: ltmSnatVlanGroup.setDescription('A collection of objects of ltmSnatVlan MIB.')
ltmSnatOrigAddrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 44)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmSnatOrigAddrNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmSnatOrigAddrSnatName"), ("F5-BIGIP-LOCAL-MIB", "ltmSnatOrigAddrAddrType"), ("F5-BIGIP-LOCAL-MIB", "ltmSnatOrigAddrAddr"), ("F5-BIGIP-LOCAL-MIB", "ltmSnatOrigAddrWildmaskType"), ("F5-BIGIP-LOCAL-MIB", "ltmSnatOrigAddrWildmask"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmSnatOrigAddrGroup = ltmSnatOrigAddrGroup.setStatus('current')
if mibBuilder.loadTexts: ltmSnatOrigAddrGroup.setDescription('A collection of objects of ltmSnatOrigAddr MIB.')
ltmTransAddrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 45)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmTransAddrNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmTransAddrAddrType"), ("F5-BIGIP-LOCAL-MIB", "ltmTransAddrAddr"), ("F5-BIGIP-LOCAL-MIB", "ltmTransAddrEnabled"), ("F5-BIGIP-LOCAL-MIB", "ltmTransAddrConnLimit"), ("F5-BIGIP-LOCAL-MIB", "ltmTransAddrTcpIdleTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmTransAddrUdpIdleTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmTransAddrIpIdleTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmTransAddrArpEnabled"), ("F5-BIGIP-LOCAL-MIB", "ltmTransAddrUnitId"), ("F5-BIGIP-LOCAL-MIB", "ltmTransAddrName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmTransAddrGroup = ltmTransAddrGroup.setStatus('current')
if mibBuilder.loadTexts: ltmTransAddrGroup.setDescription('A collection of objects of ltmTransAddr MIB.')
ltmTransAddrStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 46)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmTransAddrStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmTransAddrStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmTransAddrStatAddrType"), ("F5-BIGIP-LOCAL-MIB", "ltmTransAddrStatAddr"), ("F5-BIGIP-LOCAL-MIB", "ltmTransAddrStatServerPktsIn"), ("F5-BIGIP-LOCAL-MIB", "ltmTransAddrStatServerBytesIn"), ("F5-BIGIP-LOCAL-MIB", "ltmTransAddrStatServerPktsOut"), ("F5-BIGIP-LOCAL-MIB", "ltmTransAddrStatServerBytesOut"), ("F5-BIGIP-LOCAL-MIB", "ltmTransAddrStatServerMaxConns"), ("F5-BIGIP-LOCAL-MIB", "ltmTransAddrStatServerTotConns"), ("F5-BIGIP-LOCAL-MIB", "ltmTransAddrStatServerCurConns"), ("F5-BIGIP-LOCAL-MIB", "ltmTransAddrStatName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmTransAddrStatGroup = ltmTransAddrStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmTransAddrStatGroup.setDescription('A collection of objects of ltmTransAddrStat MIB.')
ltmSnatPoolGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 47)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmSnatPoolNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmSnatPoolName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmSnatPoolGroup = ltmSnatPoolGroup.setStatus('current')
if mibBuilder.loadTexts: ltmSnatPoolGroup.setDescription('A collection of objects of ltmSnatPool MIB.')
ltmSnatPoolStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 48)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmSnatPoolStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmSnatPoolStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmSnatPoolStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmSnatPoolStatServerPktsIn"), ("F5-BIGIP-LOCAL-MIB", "ltmSnatPoolStatServerBytesIn"), ("F5-BIGIP-LOCAL-MIB", "ltmSnatPoolStatServerPktsOut"), ("F5-BIGIP-LOCAL-MIB", "ltmSnatPoolStatServerBytesOut"), ("F5-BIGIP-LOCAL-MIB", "ltmSnatPoolStatServerMaxConns"), ("F5-BIGIP-LOCAL-MIB", "ltmSnatPoolStatServerTotConns"), ("F5-BIGIP-LOCAL-MIB", "ltmSnatPoolStatServerCurConns"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmSnatPoolStatGroup = ltmSnatPoolStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmSnatPoolStatGroup.setDescription('A collection of objects of ltmSnatPoolStat MIB.')
ltmSnatpoolTransAddrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 49)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmSnatpoolTransAddrNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmSnatpoolTransAddrSnatpoolName"), ("F5-BIGIP-LOCAL-MIB", "ltmSnatpoolTransAddrTransAddrType"), ("F5-BIGIP-LOCAL-MIB", "ltmSnatpoolTransAddrTransAddr"), ("F5-BIGIP-LOCAL-MIB", "ltmSnatpoolTransAddrTransAddrName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmSnatpoolTransAddrGroup = ltmSnatpoolTransAddrGroup.setStatus('current')
if mibBuilder.loadTexts: ltmSnatpoolTransAddrGroup.setDescription('A collection of objects of ltmSnatpoolTransAddr MIB.')
ltmVirtualServGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 50)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmVirtualServNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServName"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServAddrType"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServAddr"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServWildmaskType"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServWildmask"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServPort"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServIpProto"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServListedEnabledVlans"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServEnabled"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServConnLimit"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServRclass"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServSfFlags"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServTranslateAddr"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServTranslatePort"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServType"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServSnatType"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServLasthopPoolName"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServSnatpoolName"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServDefaultPool"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServFallbackPersist"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServActualPvaAccel"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServAvailabilityState"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServEnabledState"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServDisabledParentType"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatusReason"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServGtmScore"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServCmpEnabled"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServSrcport"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServVaName"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServSourceAddressTranslationType"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServSourceAddressTranslationPool"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmVirtualServGroup = ltmVirtualServGroup.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServGroup.setDescription('A collection of objects of ltmVirtualServ MIB.')
ltmVirtualServStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 51)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatCsMinConnDur"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatCsMaxConnDur"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatCsMeanConnDur"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatNoNodesErrors"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatClientPktsIn"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatClientBytesIn"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatClientPktsOut"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatClientBytesOut"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatClientMaxConns"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatClientTotConns"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatClientCurConns"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatEphemeralPktsIn"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatEphemeralBytesIn"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatEphemeralPktsOut"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatEphemeralBytesOut"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatEphemeralMaxConns"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatEphemeralTotConns"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatEphemeralCurConns"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatPvaPktsIn"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatPvaBytesIn"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatPvaPktsOut"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatPvaBytesOut"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatPvaMaxConns"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatPvaTotConns"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatPvaCurConns"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatTotRequests"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatTotPvaAssistConn"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatCurrPvaAssistConn"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatCycleCount"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatVsUsageRatio5s"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatVsUsageRatio1m"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatVsUsageRatio5m"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatCurrentConnsPerSec"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatDurationRateExceeded"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatSwSyncookies"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatSwSyncookieAccepts"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatHwSyncookies"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatHwSyncookieAccepts"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatClientEvictedConns"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatClientSlowKilled"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatWlSyncookieHits"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatWlSyncookieAccepts"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatWlSyncookieRejects"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmVirtualServStatGroup = ltmVirtualServStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServStatGroup.setDescription('A collection of objects of ltmVirtualServStat MIB.')
ltmVirtualServAuthGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 52)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmVirtualServAuthNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServAuthVsName"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServAuthProfileName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmVirtualServAuthGroup = ltmVirtualServAuthGroup.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServAuthGroup.setDescription('A collection of objects of ltmVirtualServAuth MIB.')
ltmVirtualServPersistGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 53)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmVirtualServPersistNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServPersistVsName"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServPersistProfileName"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServPersistUseDefault"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmVirtualServPersistGroup = ltmVirtualServPersistGroup.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServPersistGroup.setDescription('A collection of objects of ltmVirtualServPersist MIB.')
ltmVirtualServProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 54)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmVirtualServProfileNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServProfileVsName"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServProfileProfileName"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServProfileType"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServProfileContext"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmVirtualServProfileGroup = ltmVirtualServProfileGroup.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServProfileGroup.setDescription('A collection of objects of ltmVirtualServProfile MIB.')
ltmVirtualServPoolGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 55)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmVirtualServPoolNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServPoolVirtualServerName"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServPoolPoolName"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServPoolRuleName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmVirtualServPoolGroup = ltmVirtualServPoolGroup.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServPoolGroup.setDescription('A collection of objects of ltmVirtualServPool MIB.')
ltmVirtualServClonePoolGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 56)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmVirtualServClonePoolNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServClonePoolVirtualServerName"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServClonePoolPoolName"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServClonePoolType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmVirtualServClonePoolGroup = ltmVirtualServClonePoolGroup.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServClonePoolGroup.setDescription('A collection of objects of ltmVirtualServClonePool MIB.')
ltmVirtualServRuleGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 57)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmVirtualServRuleNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServRuleVirtualServerName"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServRuleRuleName"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServRulePriority"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmVirtualServRuleGroup = ltmVirtualServRuleGroup.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServRuleGroup.setDescription('A collection of objects of ltmVirtualServRule MIB.')
ltmVirtualServVlanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 58)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmVirtualServVlanNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServVlanVsName"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServVlanVlanName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmVirtualServVlanGroup = ltmVirtualServVlanGroup.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServVlanGroup.setDescription('A collection of objects of ltmVirtualServVlan MIB.')
ltmVirtualAddrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 59)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrAddrType"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrAddr"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrEnabled"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrConnLimit"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrArpEnabled"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrSfFlags"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrUnitId"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrRouteAdvertisement"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrAvailabilityState"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrEnabledState"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrDisabledParentType"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrStatusReason"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrServer"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrIsFloat"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmVirtualAddrGroup = ltmVirtualAddrGroup.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualAddrGroup.setDescription('A collection of objects of ltmVirtualAddr MIB.')
ltmVirtualAddrStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 60)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrStatAddrType"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrStatAddr"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrStatClientPktsIn"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrStatClientBytesIn"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrStatClientPktsOut"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrStatClientBytesOut"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrStatClientMaxConns"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrStatClientTotConns"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrStatClientCurConns"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrStatPvaPktsIn"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrStatPvaBytesIn"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrStatPvaPktsOut"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrStatPvaBytesOut"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrStatPvaMaxConns"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrStatPvaTotConns"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrStatPvaCurConns"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrStatTotPvaAssistConn"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrStatCurrPvaAssistConn"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrStatName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmVirtualAddrStatGroup = ltmVirtualAddrStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualAddrStatGroup.setDescription('A collection of objects of ltmVirtualAddrStat MIB.')
ltmFastHttpProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 61)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileName"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileConfigSource"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileDefaultName"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileResetOnTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileIdleTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileMssOverride"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileClientCloseTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileServerCloseTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileConnpoolMaxSize"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileConnpoolMinSize"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileConnpoolStep"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileConnpoolMaxReuse"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileConnpoolIdleTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileMaxHeaderSize"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileMaxRequests"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileInsertXforwardedFor"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileHttp11CloseWorkarounds"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileHeaderInsert"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileUncleanShutdown"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileForceHttp10Response"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileLayer7"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileConnpoolReplenish"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmFastHttpProfileGroup = ltmFastHttpProfileGroup.setStatus('current')
if mibBuilder.loadTexts: ltmFastHttpProfileGroup.setDescription('A collection of objects of ltmFastHttpProfile MIB.')
ltmFastHttpProfileStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 62)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileStatClientSyns"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileStatClientAccepts"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileStatServerConnects"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileStatConnpoolCurSize"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileStatConnpoolMaxSize"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileStatConnpoolReuses"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileStatConnpoolExhausted"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileStatNumberReqs"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileStatUnbufferedReqs"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileStatGetReqs"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileStatPostReqs"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileStatV9Reqs"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileStatV10Reqs"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileStatV11Reqs"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileStatResp2xxCnt"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileStatResp3xxCnt"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileStatResp4xxCnt"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileStatResp5xxCnt"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileStatReqParseErrors"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileStatRespParseErrors"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileStatClientRxBad"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileStatServerRxBad"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileStatPipelinedReqs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmFastHttpProfileStatGroup = ltmFastHttpProfileStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmFastHttpProfileStatGroup.setDescription('A collection of objects of ltmFastHttpProfileStat MIB.')
ltmXmlProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 63)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmXmlProfileNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmXmlProfileName"), ("F5-BIGIP-LOCAL-MIB", "ltmXmlProfileConfigSource"), ("F5-BIGIP-LOCAL-MIB", "ltmXmlProfileDefaultName"), ("F5-BIGIP-LOCAL-MIB", "ltmXmlProfileAbortOnError"), ("F5-BIGIP-LOCAL-MIB", "ltmXmlProfileMaxBufferSize"), ("F5-BIGIP-LOCAL-MIB", "ltmXmlProfileMultipleQueryMatches"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmXmlProfileGroup = ltmXmlProfileGroup.setStatus('current')
if mibBuilder.loadTexts: ltmXmlProfileGroup.setDescription('A collection of objects of ltmXmlProfile MIB.')
ltmXmlProfileStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 64)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmXmlProfileStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmXmlProfileStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmXmlProfileStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmXmlProfileStatNumErrors"), ("F5-BIGIP-LOCAL-MIB", "ltmXmlProfileStatNumInspectedDocuments"), ("F5-BIGIP-LOCAL-MIB", "ltmXmlProfileStatNumDocumentsWithOneMatch"), ("F5-BIGIP-LOCAL-MIB", "ltmXmlProfileStatNumDocumentsWithTwoMatches"), ("F5-BIGIP-LOCAL-MIB", "ltmXmlProfileStatNumDocumentsWithThreeMatches"), ("F5-BIGIP-LOCAL-MIB", "ltmXmlProfileStatNumDocumentsWithNoMatches"), ("F5-BIGIP-LOCAL-MIB", "ltmXmlProfileStatNumMalformedDocuments"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmXmlProfileStatGroup = ltmXmlProfileStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmXmlProfileStatGroup.setDescription('A collection of objects of ltmXmlProfileStat MIB.')
ltmRamUriExclGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 65)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmRamUriExclNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmRamUriExclName"), ("F5-BIGIP-LOCAL-MIB", "ltmRamUriExclIndex"), ("F5-BIGIP-LOCAL-MIB", "ltmRamUriExclUri"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmRamUriExclGroup = ltmRamUriExclGroup.setStatus('current')
if mibBuilder.loadTexts: ltmRamUriExclGroup.setDescription('A collection of objects of ltmHttpProfileRamUriExcl MIB.')
ltmRamUriInclGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 66)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmRamUriInclNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmRamUriInclName"), ("F5-BIGIP-LOCAL-MIB", "ltmRamUriInclIndex"), ("F5-BIGIP-LOCAL-MIB", "ltmRamUriInclUri"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmRamUriInclGroup = ltmRamUriInclGroup.setStatus('current')
if mibBuilder.loadTexts: ltmRamUriInclGroup.setDescription('A collection of objects of ltmHttpProfileRamUriIncl MIB.')
ltmRamUriPinGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 67)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmRamUriPinNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmRamUriPinName"), ("F5-BIGIP-LOCAL-MIB", "ltmRamUriPinIndex"), ("F5-BIGIP-LOCAL-MIB", "ltmRamUriPinUri"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmRamUriPinGroup = ltmRamUriPinGroup.setStatus('current')
if mibBuilder.loadTexts: ltmRamUriPinGroup.setDescription('A collection of objects of ltmHttpProfileRamUriPin MIB.')
ltmDnsProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 68)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileName"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileConfigSource"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileDefaultName"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileGtmEnabled"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileDns64Mode"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileDns64PrefixType"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileDns64Prefix"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileDns64AdditionalRewrite"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileDnsLastAction"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileUseLocalBind"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileDnsExpressEnabled"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileDnssecEnabled"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileCacheEnabled"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileDnsCache"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileProcessRd"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileAvrDnsStatSampleRate"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileSecurity"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileSecurityEnabled"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileLoggingProfile"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileLoggingEnabled"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileFastDnsEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmDnsProfileGroup = ltmDnsProfileGroup.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileGroup.setDescription('A collection of objects of ltmDnsProfile MIB.')
ltmHttpClassGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 69)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmHttpClassNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassName"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassConfigSource"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassDefaultName"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassPoolName"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassAsmEnabled"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassWaEnabled"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassRedirectLocation"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassUrlRewrite"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmHttpClassGroup = ltmHttpClassGroup.setStatus('current')
if mibBuilder.loadTexts: ltmHttpClassGroup.setDescription('A collection of objects of ltmHttpClassProfile MIB.')
ltmHttpClassHostGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 70)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmHttpClassHostNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassHostName"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassHostIndex"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassHostString"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmHttpClassHostGroup = ltmHttpClassHostGroup.setStatus('current')
if mibBuilder.loadTexts: ltmHttpClassHostGroup.setDescription('A collection of objects of ltmHttpClassProfileHost MIB.')
ltmHttpClassUriGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 71)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmHttpClassUriNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassUriName"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassUriIndex"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassUriString"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmHttpClassUriGroup = ltmHttpClassUriGroup.setStatus('current')
if mibBuilder.loadTexts: ltmHttpClassUriGroup.setDescription('A collection of objects of ltmHttpClassProfileUri MIB.')
ltmHttpClassHeadGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 72)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmHttpClassHeadNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassHeadName"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassHeadIndex"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassHeadString"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmHttpClassHeadGroup = ltmHttpClassHeadGroup.setStatus('current')
if mibBuilder.loadTexts: ltmHttpClassHeadGroup.setDescription('A collection of objects of ltmHttpClassProfileHead MIB.')
ltmHttpClassCookGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 73)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmHttpClassCookNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassCookName"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassCookIndex"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassCookString"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmHttpClassCookGroup = ltmHttpClassCookGroup.setStatus('current')
if mibBuilder.loadTexts: ltmHttpClassCookGroup.setDescription('A collection of objects of ltmHttpClassProfileCook MIB.')
ltmHttpClassStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 74)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatCookiePersistInserts"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatResp2xxCnt"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatResp3xxCnt"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatResp4xxCnt"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatResp5xxCnt"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatNumberReqs"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatGetReqs"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatPostReqs"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatV9Reqs"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatV10Reqs"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatV11Reqs"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatV9Resp"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatV10Resp"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatV11Resp"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatMaxKeepaliveReq"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatRespBucket1k"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatRespBucket4k"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatRespBucket16k"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatRespBucket32k"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatRespBucket64k"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatPrecompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatPostcompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatNullCompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatHtmlPrecompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatHtmlPostcompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatCssPrecompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatCssPostcompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatJsPrecompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatJsPostcompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatXmlPrecompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatXmlPostcompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatSgmlPrecompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatSgmlPostcompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatPlainPrecompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatPlainPostcompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatOctetPrecompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatOctetPostcompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatImagePrecompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatImagePostcompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatVideoPrecompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatVideoPostcompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatAudioPrecompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatAudioPostcompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatOtherPrecompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatOtherPostcompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatRamcacheHits"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatRamcacheMisses"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatRamcacheMissesAll"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatRamcacheHitBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatRamcacheMissBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatRamcacheMissBytesAll"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmHttpClassStatGroup = ltmHttpClassStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmHttpClassStatGroup.setDescription('A collection of objects of ltmHttpClassProfileStat MIB.')
ltmIiopProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 75)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmIiopProfileNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmIiopProfileName"), ("F5-BIGIP-LOCAL-MIB", "ltmIiopProfileConfigSource"), ("F5-BIGIP-LOCAL-MIB", "ltmIiopProfileDefaultName"), ("F5-BIGIP-LOCAL-MIB", "ltmIiopProfilePersistRequestId"), ("F5-BIGIP-LOCAL-MIB", "ltmIiopProfilePersistObjectKey"), ("F5-BIGIP-LOCAL-MIB", "ltmIiopProfileAbortOnTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmIiopProfileTimeout"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmIiopProfileGroup = ltmIiopProfileGroup.setStatus('current')
if mibBuilder.loadTexts: ltmIiopProfileGroup.setDescription('A collection of objects of ltmIiopProfile MIB.')
ltmIiopProfileStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 76)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmIiopProfileStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmIiopProfileStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmIiopProfileStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmIiopProfileStatNumRequests"), ("F5-BIGIP-LOCAL-MIB", "ltmIiopProfileStatNumResponses"), ("F5-BIGIP-LOCAL-MIB", "ltmIiopProfileStatNumCancels"), ("F5-BIGIP-LOCAL-MIB", "ltmIiopProfileStatNumErrors"), ("F5-BIGIP-LOCAL-MIB", "ltmIiopProfileStatNumFragments"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmIiopProfileStatGroup = ltmIiopProfileStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmIiopProfileStatGroup.setDescription('A collection of objects of ltmIiopProfileStat MIB.')
ltmRtspProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 77)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmRtspProfileNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmRtspProfileName"), ("F5-BIGIP-LOCAL-MIB", "ltmRtspProfileConfigSource"), ("F5-BIGIP-LOCAL-MIB", "ltmRtspProfileDefaultName"), ("F5-BIGIP-LOCAL-MIB", "ltmRtspProfileIdleTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmRtspProfileMaxHeaderSize"), ("F5-BIGIP-LOCAL-MIB", "ltmRtspProfileMaxQueuedData"), ("F5-BIGIP-LOCAL-MIB", "ltmRtspProfileUnicastRedirect"), ("F5-BIGIP-LOCAL-MIB", "ltmRtspProfileMulticastRedirect"), ("F5-BIGIP-LOCAL-MIB", "ltmRtspProfileSessionReconnect"), ("F5-BIGIP-LOCAL-MIB", "ltmRtspProfileRealHttpPersistence"), ("F5-BIGIP-LOCAL-MIB", "ltmRtspProfileProxy"), ("F5-BIGIP-LOCAL-MIB", "ltmRtspProfileProxyHeader"), ("F5-BIGIP-LOCAL-MIB", "ltmRtspProfileRtpPort"), ("F5-BIGIP-LOCAL-MIB", "ltmRtspProfileRtcpPort"), ("F5-BIGIP-LOCAL-MIB", "ltmRtspProfileLogPublisher"), ("F5-BIGIP-LOCAL-MIB", "ltmRtspProfileLogProfile"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmRtspProfileGroup = ltmRtspProfileGroup.setStatus('current')
if mibBuilder.loadTexts: ltmRtspProfileGroup.setDescription('A collection of objects of ltmRtspProfile MIB.')
ltmRtspProfileStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 78)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmRtspProfileStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmRtspProfileStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmRtspProfileStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmRtspProfileStatNumRequests"), ("F5-BIGIP-LOCAL-MIB", "ltmRtspProfileStatNumResponses"), ("F5-BIGIP-LOCAL-MIB", "ltmRtspProfileStatNumErrors"), ("F5-BIGIP-LOCAL-MIB", "ltmRtspProfileStatNumInterleaved"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmRtspProfileStatGroup = ltmRtspProfileStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmRtspProfileStatGroup.setDescription('A collection of objects of ltmRtspProfileStat MIB.')
ltmSctpProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 79)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileName"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileConfigSource"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileDefaultName"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileRcvOrdered"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileSndPartial"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileTcpShutdown"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileResetOnTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileOutStreams"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileInStreams"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileSndbuf"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileRcvwnd"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileTxChunks"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileRxChunks"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileCookieExpiration"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileInitMaxrtx"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileAssocMaxrtx"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileProxyBufferLow"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileProxyBufferHigh"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileIdleTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileHeartbeatInterval"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileIpTosToPeer"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileLinkQosToPeer"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileSecret"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileMaxBurst"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileHeartbeatMaxBurst"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmSctpProfileGroup = ltmSctpProfileGroup.setStatus('current')
if mibBuilder.loadTexts: ltmSctpProfileGroup.setDescription('A collection of objects of ltmSctpProfile MIB.')
ltmSctpProfileStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 80)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileStatAccepts"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileStatAcceptfails"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileStatConnects"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileStatConnfails"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileStatExpires"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileStatAbandons"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileStatRxrst"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileStatRxbadsum"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileStatRxcookie"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileStatRxbadcookie"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmSctpProfileStatGroup = ltmSctpProfileStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmSctpProfileStatGroup.setDescription('A collection of objects of ltmSctpProfileStat MIB.')
ltmUserStatProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 81)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmUserStatProfileNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmUserStatProfileName"), ("F5-BIGIP-LOCAL-MIB", "ltmUserStatProfileConfigSource"), ("F5-BIGIP-LOCAL-MIB", "ltmUserStatProfileDefaultName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmUserStatProfileGroup = ltmUserStatProfileGroup.setStatus('current')
if mibBuilder.loadTexts: ltmUserStatProfileGroup.setDescription('A collection of objects of ltmUserStatProfile MIB.')
ltmUserStatProfileStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 83)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmUserStatProfileStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmUserStatProfileStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmUserStatProfileStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmUserStatProfileStatFieldId"), ("F5-BIGIP-LOCAL-MIB", "ltmUserStatProfileStatFieldName"), ("F5-BIGIP-LOCAL-MIB", "ltmUserStatProfileStatFieldValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmUserStatProfileStatGroup = ltmUserStatProfileStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmUserStatProfileStatGroup.setDescription('A collection of objects of ltmUserStatProfileStat MIB.')
ltmVsHttpClassGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 84)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmVsHttpClassNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmVsHttpClassVsName"), ("F5-BIGIP-LOCAL-MIB", "ltmVsHttpClassProfileName"), ("F5-BIGIP-LOCAL-MIB", "ltmVsHttpClassPriority"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmVsHttpClassGroup = ltmVsHttpClassGroup.setStatus('current')
if mibBuilder.loadTexts: ltmVsHttpClassGroup.setDescription('A collection of objects of ltmVirtualServHttpClass MIB.')
ltmNodeAddrStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 85)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrStatusNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrStatusAddrType"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrStatusAddr"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrStatusAvailState"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrStatusEnabledState"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrStatusParentType"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrStatusDetailReason"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrStatusName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmNodeAddrStatusGroup = ltmNodeAddrStatusGroup.setStatus('current')
if mibBuilder.loadTexts: ltmNodeAddrStatusGroup.setDescription('A collection of objects of ltmNodeAddrStatus MIB.')
ltmPoolStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 86)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmPoolStatusNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatusName"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatusAvailState"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatusEnabledState"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatusParentType"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatusDetailReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmPoolStatusGroup = ltmPoolStatusGroup.setStatus('current')
if mibBuilder.loadTexts: ltmPoolStatusGroup.setDescription('A collection of objects of ltmPoolStatus MIB.')
ltmPoolMbrStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 87)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmPoolMbrStatusNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMbrStatusPoolName"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMbrStatusAddrType"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMbrStatusAddr"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMbrStatusPort"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMbrStatusAvailState"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMbrStatusEnabledState"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMbrStatusParentType"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMbrStatusDetailReason"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMbrStatusNodeName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmPoolMbrStatusGroup = ltmPoolMbrStatusGroup.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMbrStatusGroup.setDescription('A collection of objects of ltmPoolMemberStatus MIB.')
ltmVsStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 88)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmVsStatusNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmVsStatusName"), ("F5-BIGIP-LOCAL-MIB", "ltmVsStatusAvailState"), ("F5-BIGIP-LOCAL-MIB", "ltmVsStatusEnabledState"), ("F5-BIGIP-LOCAL-MIB", "ltmVsStatusParentType"), ("F5-BIGIP-LOCAL-MIB", "ltmVsStatusDetailReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmVsStatusGroup = ltmVsStatusGroup.setStatus('current')
if mibBuilder.loadTexts: ltmVsStatusGroup.setDescription('A collection of objects of ltmVirtualServStatus MIB.')
ltmVAddrStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 89)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmVAddrStatusNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmVAddrStatusAddrType"), ("F5-BIGIP-LOCAL-MIB", "ltmVAddrStatusAddr"), ("F5-BIGIP-LOCAL-MIB", "ltmVAddrStatusAvailState"), ("F5-BIGIP-LOCAL-MIB", "ltmVAddrStatusEnabledState"), ("F5-BIGIP-LOCAL-MIB", "ltmVAddrStatusParentType"), ("F5-BIGIP-LOCAL-MIB", "ltmVAddrStatusDetailReason"), ("F5-BIGIP-LOCAL-MIB", "ltmVAddrStatusName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmVAddrStatusGroup = ltmVAddrStatusGroup.setStatus('current')
if mibBuilder.loadTexts: ltmVAddrStatusGroup.setDescription('A collection of objects of ltmVirtualAddrStatus MIB.')
ltmFallbackStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 90)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmFallbackStatusNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmFallbackStatusName"), ("F5-BIGIP-LOCAL-MIB", "ltmFallbackStatusIndex"), ("F5-BIGIP-LOCAL-MIB", "ltmFallbackStatusCode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmFallbackStatusGroup = ltmFallbackStatusGroup.setStatus('current')
if mibBuilder.loadTexts: ltmFallbackStatusGroup.setDescription('A collection of objects of ltmHttpProfileFallbackStatus MIB.')
ltmRespHeadersPermGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 91)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmRespHeadersPermNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmRespHeadersPermName"), ("F5-BIGIP-LOCAL-MIB", "ltmRespHeadersPermIndex"), ("F5-BIGIP-LOCAL-MIB", "ltmRespHeadersPermStr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmRespHeadersPermGroup = ltmRespHeadersPermGroup.setStatus('current')
if mibBuilder.loadTexts: ltmRespHeadersPermGroup.setDescription('A collection of objects of ltmHttpProfileRespHeadersPerm MIB.')
ltmEncCookiesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 92)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmEncCookiesNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmEncCookiesName"), ("F5-BIGIP-LOCAL-MIB", "ltmEncCookiesIndex"), ("F5-BIGIP-LOCAL-MIB", "ltmEncCookiesStr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmEncCookiesGroup = ltmEncCookiesGroup.setStatus('current')
if mibBuilder.loadTexts: ltmEncCookiesGroup.setDescription('A collection of objects of ltmHttpProfileEncCookies MIB.')
ltmFastL4ProfileStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 93)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileStatOpen"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileStatAccepts"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileStatAcceptfails"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileStatExpires"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileStatRxbadpkt"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileStatRxunreach"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileStatRxbadunreach"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileStatRxbadsum"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileStatTxerrors"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileStatSyncookIssue"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileStatSyncookAccept"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileStatSyncookReject"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileStatServersynrtx"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileStatLbcSuccessful"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileStatLbcTimedout"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmFastL4ProfileStatGroup = ltmFastL4ProfileStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmFastL4ProfileStatGroup.setDescription('A collection of objects of ltmFastL4ProfileStat MIB.')
ltmSipProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 94)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmSipProfileNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmSipProfileName"), ("F5-BIGIP-LOCAL-MIB", "ltmSipProfileConfigSource"), ("F5-BIGIP-LOCAL-MIB", "ltmSipProfileDefaultName"), ("F5-BIGIP-LOCAL-MIB", "ltmSipProfileMaxSize"), ("F5-BIGIP-LOCAL-MIB", "ltmSipProfileTerminateBye"), ("F5-BIGIP-LOCAL-MIB", "ltmSipProfileInsertVia"), ("F5-BIGIP-LOCAL-MIB", "ltmSipProfileSecureVia"), ("F5-BIGIP-LOCAL-MIB", "ltmSipProfileInsertRecordRoute"), ("F5-BIGIP-LOCAL-MIB", "ltmSipProfileFirewallEnabled"), ("F5-BIGIP-LOCAL-MIB", "ltmSipProfileLogPublisher"), ("F5-BIGIP-LOCAL-MIB", "ltmSipProfileLogProfile"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmSipProfileGroup = ltmSipProfileGroup.setStatus('current')
if mibBuilder.loadTexts: ltmSipProfileGroup.setDescription('A collection of objects of ltmSipProfile MIB.')
ltmSipProfileStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 95)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmSipProfileStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmSipProfileStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmSipProfileStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmSipProfileStatRequests"), ("F5-BIGIP-LOCAL-MIB", "ltmSipProfileStatResponses"), ("F5-BIGIP-LOCAL-MIB", "ltmSipProfileStatBadmsgs"), ("F5-BIGIP-LOCAL-MIB", "ltmSipProfileStatDrops"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmSipProfileStatGroup = ltmSipProfileStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmSipProfileStatGroup.setDescription('A collection of objects of ltmSipProfileStat MIB.')
ltmVirtualModuleScoreGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 96)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmVirtualModuleScoreNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualModuleScoreVsName"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualModuleScoreModuleType"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualModuleScoreScore"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmVirtualModuleScoreGroup = ltmVirtualModuleScoreGroup.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualModuleScoreGroup.setDescription('A collection of objects of ltmVirtualModuleScore MIB.')
ltmIsessionProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 97)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileName"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileMode"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileConnectionReuse"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileCompressionNull"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileCompressionDeflate"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileCompressionLzo"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileCompressionAdaptive"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileDeduplication"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfilePortTransparency"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileTargetVirtual"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileEndpointPool"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileCompressionDeflateLevel"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileCompressionBzip2"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileCompression"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileCompressionCodecs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmIsessionProfileGroup = ltmIsessionProfileGroup.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileGroup.setDescription('A collection of objects of ltmIsessionProfile MIB.')
ltmIsessionProfileStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 98)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatVsName"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatProfileName"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatNullInUses"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatNullInErrors"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatNullInBytesOpt"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatNullInBytesRaw"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatNullOutUses"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatNullOutErrors"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatNullOutBytesOpt"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatNullOutBytesRaw"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatLzoInUses"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatLzoInErrors"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatLzoInBytesOpt"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatLzoInBytesRaw"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatLzoOutUses"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatLzoOutErrors"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatLzoOutBytesOpt"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatLzoOutBytesRaw"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDeflateInUses"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDeflateInErrors"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDeflateInBytesOpt"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDeflateInBytesRaw"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDeflateOutUses"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDeflateOutErrors"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDeflateOutBytesOpt"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDeflateOutBytesRaw"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupInUses"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupInErrors"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupInBytesOpt"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupInBytesRaw"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupOutUses"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupOutErrors"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupOutBytesOpt"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupOutBytesRaw"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupInHits"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupInHitBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupInHitHistBucket1k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupInHitHistBucket2k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupInHitHistBucket4k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupInHitHistBucket8k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupInHitHistBucket16k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupInHitHistBucket32k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupInHitHistBucket64k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupInHitHistBucket128k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupInHitHistBucket256k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupInHitHistBucket512k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupInHitHistBucket1m"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupInHitHistBucketLarge"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupInMisses"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupInMissBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupInMissHistBucket1k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupInMissHistBucket2k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupInMissHistBucket4k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupInMissHistBucket8k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupInMissHistBucket16k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupInMissHistBucket32k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupInMissHistBucket64k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupInMissHistBucket128k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupInMissHistBucket256k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupInMissHistBucket512k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupInMissHistBucket1m"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupInMissHistBucketLarge"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupOutHits"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupOutHitBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupOutHitHistBucket1k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupOutHitHistBucket2k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupOutHitHistBucket4k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupOutHitHistBucket8k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupOutHitHistBucket16k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupOutHitHistBucket32k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupOutHitHistBucket64k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupOutHitHistBucket128k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupOutHitHistBucket256k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupOutHitHistBucket512k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupOutHitHistBucket1m"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupOutHitHistBucketLarge"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupOutMisses"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupOutMissBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupOutMissHistBucket1k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupOutMissHistBucket2k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupOutMissHistBucket4k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupOutMissHistBucket8k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupOutMissHistBucket16k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupOutMissHistBucket32k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupOutMissHistBucket64k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupOutMissHistBucket128k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupOutMissHistBucket256k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupOutMissHistBucket512k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupOutMissHistBucket1m"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupOutMissHistBucketLarge"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatOutgoingConnsIdleCur"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatOutgoingConnsIdleMax"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatOutgoingConnsIdleTot"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatOutgoingConnsActiveCur"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatOutgoingConnsActiveMax"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatOutgoingConnsActiveTot"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatOutgoingConnsErrors"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatOutgoingConnsPassthruTot"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatIncomingConnsActiveCur"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatIncomingConnsActiveMax"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatIncomingConnsActiveTot"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatIncomingConnsErrors"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatBzip2InUses"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatBzip2InErrors"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatBzip2InBytesOpt"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatBzip2InBytesRaw"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatBzip2OutUses"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatBzip2OutErrors"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatBzip2OutBytesOpt"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatBzip2OutBytesRaw"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmIsessionProfileStatGroup = ltmIsessionProfileStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatGroup.setDescription('A collection of objects of ltmIsessionProfileStat MIB.')
ltmXmlProfileXpathQueriesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 99)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmXmlProfileXpathQueriesNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmXmlProfileXpathQueriesName"), ("F5-BIGIP-LOCAL-MIB", "ltmXmlProfileXpathQueriesIndex"), ("F5-BIGIP-LOCAL-MIB", "ltmXmlProfileXpathQueriesString"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmXmlProfileXpathQueriesGroup = ltmXmlProfileXpathQueriesGroup.setStatus('current')
if mibBuilder.loadTexts: ltmXmlProfileXpathQueriesGroup.setDescription('A collection of objects of ltmXmlProfileXpathQueries MIB.')
ltmXmlProfileNamespaceMappingsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 100)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmXmlProfileNamespaceMappingsNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmXmlProfileNamespaceMappingsName"), ("F5-BIGIP-LOCAL-MIB", "ltmXmlProfileNamespaceMappingsIndex"), ("F5-BIGIP-LOCAL-MIB", "ltmXmlProfileNamespaceMappingsMappingPrefix"), ("F5-BIGIP-LOCAL-MIB", "ltmXmlProfileNamespaceMappingsMappingNamespace"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmXmlProfileNamespaceMappingsGroup = ltmXmlProfileNamespaceMappingsGroup.setStatus('current')
if mibBuilder.loadTexts: ltmXmlProfileNamespaceMappingsGroup.setDescription('A collection of objects of ltmXmlProfileNamespaceMappings MIB.')
ltmHttpCompressionProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 101)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileName"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileConfigSource"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileDefaultName"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileSelective"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileMinSize"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileBufferSize"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileVaryHeader"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileAllowHttp10"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileGzipMemlevel"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileGzipWindowsize"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileGzipLevel"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileKeepAcceptEncoding"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileBrowserWorkarounds"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileCpusaver"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileCpusaverHigh"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileCpusaverLow"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfilePreferredMethod"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmHttpCompressionProfileGroup = ltmHttpCompressionProfileGroup.setStatus('current')
if mibBuilder.loadTexts: ltmHttpCompressionProfileGroup.setDescription('A collection of objects of ltmHttpCompressionProfile MIB.')
ltmHttpcompUriInclGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 102)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmHttpcompUriInclNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpcompUriInclName"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpcompUriInclIndex"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpcompUriInclUri"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmHttpcompUriInclGroup = ltmHttpcompUriInclGroup.setStatus('current')
if mibBuilder.loadTexts: ltmHttpcompUriInclGroup.setDescription('A collection of objects of ltmHttpCompressionProfileUriIncl MIB.')
ltmHttpcompUriExclGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 103)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmHttpcompUriExclNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpcompUriExclName"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpcompUriExclIndex"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpcompUriExclUri"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmHttpcompUriExclGroup = ltmHttpcompUriExclGroup.setStatus('current')
if mibBuilder.loadTexts: ltmHttpcompUriExclGroup.setDescription('A collection of objects of ltmHttpCompressionProfileUriExcl MIB.')
ltmHttpcompContTypeInclGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 104)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmHttpcompContTypeInclNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpcompContTypeInclName"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpcompContTypeInclIndex"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpcompContTypeInclContentType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmHttpcompContTypeInclGroup = ltmHttpcompContTypeInclGroup.setStatus('current')
if mibBuilder.loadTexts: ltmHttpcompContTypeInclGroup.setDescription('A collection of objects of ltmHttpCompressionProfileContTypeIncl MIB.')
ltmHttpcompContTypeExclGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 105)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmHttpcompContTypeExclNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpcompContTypeExclName"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpcompContTypeExclIndex"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpcompContTypeExclContentType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmHttpcompContTypeExclGroup = ltmHttpcompContTypeExclGroup.setStatus('current')
if mibBuilder.loadTexts: ltmHttpcompContTypeExclGroup.setDescription('A collection of objects of ltmHttpCompressionProfileContTypeExcl MIB.')
ltmHttpCompressionProfileStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 106)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileStatPrecompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileStatPostcompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileStatNullCompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileStatHtmlPrecompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileStatHtmlPostcompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileStatCssPrecompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileStatCssPostcompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileStatJsPrecompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileStatJsPostcompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileStatXmlPrecompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileStatXmlPostcompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileStatSgmlPrecompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileStatSgmlPostcompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileStatPlainPrecompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileStatPlainPostcompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileStatOctetPrecompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileStatOctetPostcompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileStatImagePrecompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileStatImagePostcompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileStatVideoPrecompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileStatVideoPostcompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileStatAudioPrecompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileStatAudioPostcompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileStatOtherPrecompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileStatOtherPostcompressBytes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmHttpCompressionProfileStatGroup = ltmHttpCompressionProfileStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatGroup.setDescription('A collection of objects of ltmHttpCompressionProfileStat MIB.')
ltmWebAccelerationProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 107)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmWebAccelerationProfileNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmWebAccelerationProfileName"), ("F5-BIGIP-LOCAL-MIB", "ltmWebAccelerationProfileConfigSource"), ("F5-BIGIP-LOCAL-MIB", "ltmWebAccelerationProfileDefaultName"), ("F5-BIGIP-LOCAL-MIB", "ltmWebAccelerationProfileCacheSize"), ("F5-BIGIP-LOCAL-MIB", "ltmWebAccelerationProfileCacheMaxEntries"), ("F5-BIGIP-LOCAL-MIB", "ltmWebAccelerationProfileCacheMaxAge"), ("F5-BIGIP-LOCAL-MIB", "ltmWebAccelerationProfileCacheObjectMinSize"), ("F5-BIGIP-LOCAL-MIB", "ltmWebAccelerationProfileCacheObjectMaxSize"), ("F5-BIGIP-LOCAL-MIB", "ltmWebAccelerationProfileCacheIgnoreClient"), ("F5-BIGIP-LOCAL-MIB", "ltmWebAccelerationProfileCacheAgingRate"), ("F5-BIGIP-LOCAL-MIB", "ltmWebAccelerationProfileCacheInsertAgeHeader"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmWebAccelerationProfileGroup = ltmWebAccelerationProfileGroup.setStatus('current')
if mibBuilder.loadTexts: ltmWebAccelerationProfileGroup.setDescription('A collection of objects of ltmWebAccelerationProfile MIB.')
ltmWebaccCacheUriExclGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 108)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmWebaccCacheUriExclNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmWebaccCacheUriExclName"), ("F5-BIGIP-LOCAL-MIB", "ltmWebaccCacheUriExclIndex"), ("F5-BIGIP-LOCAL-MIB", "ltmWebaccCacheUriExclUri"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmWebaccCacheUriExclGroup = ltmWebaccCacheUriExclGroup.setStatus('current')
if mibBuilder.loadTexts: ltmWebaccCacheUriExclGroup.setDescription('A collection of objects of ltmWebAccelerationProfileUriExcl MIB.')
ltmWebaccCacheUriInclGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 109)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmWebaccCacheUriInclNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmWebaccCacheUriInclName"), ("F5-BIGIP-LOCAL-MIB", "ltmWebaccCacheUriInclIndex"), ("F5-BIGIP-LOCAL-MIB", "ltmWebaccCacheUriInclUri"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmWebaccCacheUriInclGroup = ltmWebaccCacheUriInclGroup.setStatus('current')
if mibBuilder.loadTexts: ltmWebaccCacheUriInclGroup.setDescription('A collection of objects of ltmWebAccelerationProfileUriIncl MIB.')
ltmWebaccCacheUriPinGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 110)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmWebaccCacheUriPinNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmWebaccCacheUriPinName"), ("F5-BIGIP-LOCAL-MIB", "ltmWebaccCacheUriPinIndex"), ("F5-BIGIP-LOCAL-MIB", "ltmWebaccCacheUriPinUri"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmWebaccCacheUriPinGroup = ltmWebaccCacheUriPinGroup.setStatus('current')
if mibBuilder.loadTexts: ltmWebaccCacheUriPinGroup.setDescription('A collection of objects of ltmWebAccelerationProfileUriPin MIB.')
ltmWebAccelerationProfileStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 111)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmWebAccelerationProfileStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmWebAccelerationProfileStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmWebAccelerationProfileStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmWebAccelerationProfileStatCacheHits"), ("F5-BIGIP-LOCAL-MIB", "ltmWebAccelerationProfileStatCacheMisses"), ("F5-BIGIP-LOCAL-MIB", "ltmWebAccelerationProfileStatCacheMissesAll"), ("F5-BIGIP-LOCAL-MIB", "ltmWebAccelerationProfileStatCacheHitBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmWebAccelerationProfileStatCacheMissBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmWebAccelerationProfileStatCacheMissBytesAll"), ("F5-BIGIP-LOCAL-MIB", "ltmWebAccelerationProfileStatCacheSize"), ("F5-BIGIP-LOCAL-MIB", "ltmWebAccelerationProfileStatCacheCount"), ("F5-BIGIP-LOCAL-MIB", "ltmWebAccelerationProfileStatCacheEvictions"), ("F5-BIGIP-LOCAL-MIB", "ltmWebAccelerationProfileStatInterStripeHits"), ("F5-BIGIP-LOCAL-MIB", "ltmWebAccelerationProfileStatInterStripeMisses"), ("F5-BIGIP-LOCAL-MIB", "ltmWebAccelerationProfileStatInterStripeHitBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmWebAccelerationProfileStatInterStripeSize"), ("F5-BIGIP-LOCAL-MIB", "ltmWebAccelerationProfileStatInterStripeCount"), ("F5-BIGIP-LOCAL-MIB", "ltmWebAccelerationProfileStatInterStripeEvictions"), ("F5-BIGIP-LOCAL-MIB", "ltmWebAccelerationProfileStatRemoteHits"), ("F5-BIGIP-LOCAL-MIB", "ltmWebAccelerationProfileStatRemoteMisses"), ("F5-BIGIP-LOCAL-MIB", "ltmWebAccelerationProfileStatRemoteHitBytes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmWebAccelerationProfileStatGroup = ltmWebAccelerationProfileStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatGroup.setDescription('A collection of objects of ltmWebAccelerationProfileStat MIB.')
ltmRstCauseStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 112)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmRstCauseStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmRstCauseStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmRstCauseStatIndex"), ("F5-BIGIP-LOCAL-MIB", "ltmRstCauseStatRstCause"), ("F5-BIGIP-LOCAL-MIB", "ltmRstCauseStatCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmRstCauseStatGroup = ltmRstCauseStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmRstCauseStatGroup.setDescription('A collection of objects of ltmRstCauseStat MIB.')
ltmWebaccCacheUriOverGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 113)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmWebaccCacheUriOverNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmWebaccCacheUriOverName"), ("F5-BIGIP-LOCAL-MIB", "ltmWebaccCacheUriOverIndex"), ("F5-BIGIP-LOCAL-MIB", "ltmWebaccCacheUriOverUri"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmWebaccCacheUriOverGroup = ltmWebaccCacheUriOverGroup.setStatus('current')
if mibBuilder.loadTexts: ltmWebaccCacheUriOverGroup.setDescription('A collection of objects of ltmWebAccelerationProfileUriOver MIB.')
ltmDnsCacheGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 114)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheName"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheType"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheMsgCacheSize"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheRrsetCacheSize"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheAnswerDefaultZones"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheUseIpv4"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheUseIpv6"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheUseUdp"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheUseTcp"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheNameserverCacheCount"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheMaxConcurrentTcp"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheMaxConcurrentUdp"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheUnwantedThreshold"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheRouteDomainName"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheIgnoreCd"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCachePrefetchKey"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheKeyCacheSize"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheRandomizeQueryNameCase"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheMaxConcurrentQueries"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheAllowedQueryTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmDnsCacheGroup = ltmDnsCacheGroup.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheGroup.setDescription('A collection of objects of ltmDnsCache MIB.')
ltmDnsCacheStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 115)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatQueries"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatResponses"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatSync"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatAsync"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatFailureResolv"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatFailureCf"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatFailureServer"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatFailureSend"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatMsgHits"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatMsgMisses"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatMsgInserts"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatMsgUpdates"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatMsgEvictions"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatRrsetHits"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatRrsetMisses"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatRrsetInserts"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatRrsetUpdates"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatRrsetEvictions"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatNameserverHits"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatNameserverMisses"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatNameserverInserts"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatNameserverUpdates"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatNameserverEvictions"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatKeyHits"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatKeyMisses"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatKeyInserts"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatKeyUpdates"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatKeyEvictions"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatUdpBytesIn"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatUdpBytesOut"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatUdpPktsIn"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatUdpPktsOut"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatUdpCurConns"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatUdpMaxConns"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatUdpTotConns"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatTcpBytesIn"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatTcpBytesOut"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatTcpPktsIn"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatTcpPktsOut"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatTcpCurConns"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatTcpMaxConns"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatTcpTotConns"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatUnsolicitedReplies"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatSecUnchecked"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatSecBogus"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatSecIndeterminate"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatSecInsecure"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatSecSecure"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatFwdQueries"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatFwdResponses"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatRpzRewrites"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmDnsCacheStatGroup = ltmDnsCacheStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheStatGroup.setDescription('A collection of objects of ltmDnsCacheStat MIB.')
ltmDnsProfileStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 116)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatQueries"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatResponses"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatResponsesPerSec"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatToGtm"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatDnsExpressReqs"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatDnsExpressNotifies"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatToCache"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatToDns"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatDns64Reqs"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatDns64Rewrites"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatDns64Failures"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatHints"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatRejects"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatNoErrors"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatDrops"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatMalformed"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatTclSuspends"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatRecursionDesired"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatCheckingDisabled"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatEdns0"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatOpcodeQuery"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatOpcodeNotify"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatOpcodeUpdate"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatZoneIxfr"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatZoneAxfr"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatAuthoritativeAnswer"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatRecursionAvailable"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatAuthenticatedData"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatTruncated"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatRcodeNoerror"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatRcodeNxdomain"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatRcodeServfail"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatRcodeRefused"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatMalicious"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatAReqs"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatAaaaReqs"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatAnyReqs"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatCnameReqs"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatMxReqs"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatNsReqs"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatPtrReqs"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatSoaReqs"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatSrvReqs"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatTxtReqs"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatOtherReqs"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatDnsEffectiveRateLimit"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatDnsConfiguredObjects"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatDnsRateRejectedRequests"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatGtmEffectiveRateLimit"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatGtmConfiguredObjects"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatGtmRateRejectedRequests"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatGtmRewrites"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatOpcodeOther"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatFastDnsQueries"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatFastDnsResponses"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatFastDnsAllowed"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatFastDnsDrops"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatFastDnsRespTc"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatFastDnsRespNx"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatFastDnsRespNe"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatFastDnsRespRf"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmDnsProfileStatGroup = ltmDnsProfileStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatGroup.setDescription('A collection of objects of ltmDnsProfileStat MIB.')
ltmDosProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 117)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmDosProfileNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmDosProfileName"), ("F5-BIGIP-LOCAL-MIB", "ltmDosProfileConfigSource"), ("F5-BIGIP-LOCAL-MIB", "ltmDosProfileDefaultName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmDosProfileGroup = ltmDosProfileGroup.setStatus('current')
if mibBuilder.loadTexts: ltmDosProfileGroup.setDescription('A collection of objects of ltmDosProfile MIB.')
ltmDosApplicationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 118)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationProfileName"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationName"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationTriggerIrule"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationTpsBasedMode"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationLatencyBasedMode"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationTpsBasedIpClientSideDefense"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationTpsBasedUrlClientSideDefense"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationTpsBasedIpRateLimiting"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationTpsBasedUrlRateLimiting"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationTpsBasedIpTpsIncreaseRate"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationTpsBasedIpMaximumTps"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationTpsBasedIpMinimumTps"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationTpsBasedUrlTpsIncreaseRate"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationTpsBasedUrlMaximumTps"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationTpsBasedUrlMinimumTps"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationTpsBasedMaximumPreventionDuration"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationLatencyIncreaseRate"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationMaximumLatency"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationMinimumLatency"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationLatencyBasedIpClientSideDefense"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationLatencyBasedUrlClientSideDefense"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationLatencyBasedIpRateLimiting"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationLatencyBasedUrlRateLimiting"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationLatencyBasedIpTpsIncreaseRate"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationLatencyBasedIpMaximumTps"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationLatencyBasedIpMinimumTps"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationLatencyBasedUrlTpsIncreaseRate"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationLatencyBasedUrlMaximumTps"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationLatencyBasedUrlMinimumTps"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationLatencyBasedMaximumPreventionDuration"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationTpsBasedSiteClientSideDefense"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationTpsBasedSiteRateLimiting"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationTpsBasedSiteTpsIncreaseRate"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationTpsBasedSiteMaximumTps"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationTpsBasedSiteMinimumTps"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationTpsBasedEscalationPeriod"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationTpsBasedDeEscalationPeriod"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationLatencyBasedSiteClientSideDefense"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationLatencyBasedSiteRateLimiting"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationLatencyBasedSiteTpsIncreaseRate"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationLatencyBasedSiteMaximumTps"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationLatencyBasedSiteMinimumTps"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationLatencyBasedEscalationPeriod"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationLatencyBasedDeEscalationPeriod"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationHeavyUrlProtection"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationHeavyUrlAutomaticDetection"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationHeavyUrlLatencyThreshold"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmDosApplicationGroup = ltmDosApplicationGroup.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationGroup.setDescription('A collection of objects of ltmDosApplication MIB.')
ltmDosWhiteIpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 119)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmDosWhiteIpNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmDosWhiteIpParentProfile"), ("F5-BIGIP-LOCAL-MIB", "ltmDosWhiteIpParentName"), ("F5-BIGIP-LOCAL-MIB", "ltmDosWhiteIpAddressType"), ("F5-BIGIP-LOCAL-MIB", "ltmDosWhiteIpAddress"), ("F5-BIGIP-LOCAL-MIB", "ltmDosWhiteIpNetmaskType"), ("F5-BIGIP-LOCAL-MIB", "ltmDosWhiteIpNetmask"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmDosWhiteIpGroup = ltmDosWhiteIpGroup.setStatus('current')
if mibBuilder.loadTexts: ltmDosWhiteIpGroup.setDescription('A collection of objects of ltmDosWhiteIp MIB.')
ltmDnsSecurityGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 120)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmDnsSecurityNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsSecurityName"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsSecurityQueryTypeInclusion"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmDnsSecurityGroup = ltmDnsSecurityGroup.setStatus('current')
if mibBuilder.loadTexts: ltmDnsSecurityGroup.setDescription('A collection of objects of ltmDnsSecurity MIB.')
ltmDnsSecurityStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 121)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmDnsSecurityStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsSecurityStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsSecurityStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsSecurityStatFilteredDrops"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsSecurityStatADrops"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsSecurityStatAaaaDrops"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsSecurityStatAnyDrops"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsSecurityStatCnameDrops"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsSecurityStatMxDrops"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsSecurityStatNsDrops"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsSecurityStatPtrDrops"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsSecurityStatSoaDrops"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsSecurityStatSrvDrops"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsSecurityStatTxtDrops"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsSecurityStatOtherDrops"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmDnsSecurityStatGroup = ltmDnsSecurityStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmDnsSecurityStatGroup.setDescription('A collection of objects of ltmDnsSecurityStat MIB.')
ltmBwcPolicyStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 122)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmBwcPolicyStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmBwcPolicyStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmBwcPolicyStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmBwcPolicyStatBytesPerSec"), ("F5-BIGIP-LOCAL-MIB", "ltmBwcPolicyStatBytesPerSecOut"), ("F5-BIGIP-LOCAL-MIB", "ltmBwcPolicyStatBytesIn"), ("F5-BIGIP-LOCAL-MIB", "ltmBwcPolicyStatBytesPassed"), ("F5-BIGIP-LOCAL-MIB", "ltmBwcPolicyStatBytesDropped"), ("F5-BIGIP-LOCAL-MIB", "ltmBwcPolicyStatPacketsIn"), ("F5-BIGIP-LOCAL-MIB", "ltmBwcPolicyStatPacketsPassed"), ("F5-BIGIP-LOCAL-MIB", "ltmBwcPolicyStatActivePolicies"), ("F5-BIGIP-LOCAL-MIB", "ltmBwcPolicyStatInactivePolicies"), ("F5-BIGIP-LOCAL-MIB", "ltmBwcPolicyStatTotalPolicies"), ("F5-BIGIP-LOCAL-MIB", "ltmBwcPolicyStatTimeDataCollected"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmBwcPolicyStatGroup = ltmBwcPolicyStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmBwcPolicyStatGroup.setDescription('A collection of objects of ltmBwcPolicyStat MIB.')
ltmDnsQueryFilterGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 123)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmDnsQueryFilterNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsQueryFilterName"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsQueryFilterIndex"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsQueryFilterType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmDnsQueryFilterGroup = ltmDnsQueryFilterGroup.setStatus('current')
if mibBuilder.loadTexts: ltmDnsQueryFilterGroup.setDescription('A collection of objects of ltmDnsQueryFilter MIB.')
ltmDnsHeaderFilterGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 124)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmDnsHeaderFilterNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsHeaderFilterName"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsHeaderFilterIndex"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsHeaderFilterOpcodeExclusion"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmDnsHeaderFilterGroup = ltmDnsHeaderFilterGroup.setStatus('current')
if mibBuilder.loadTexts: ltmDnsHeaderFilterGroup.setDescription('A collection of objects of ltmDnsHeaderFilter MIB.')
ltmLsnPrefixGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 125)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmLsnPrefixNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPrefixName"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPrefixAddrType"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPrefixAddr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmLsnPrefixGroup = ltmLsnPrefixGroup.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPrefixGroup.setDescription('A collection of objects of ltmLsnPrefix MIB.')
ltmLsnPoolGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 126)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolName"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolMemberCount"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolRouteAdvertisement"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolMode"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolPersistenceMode"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolPersistenceTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolPersistencePrefixLengthIpv4"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolPersistencePrefixLengthIpv6"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolInboundConnections"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolIcmpEcho"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolTranslationPortRangeLow"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolTranslationPortRangeHigh"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolClientConnectionLimit"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolEgressInterfacesEnabled"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolLogPublisher"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolHairpinMode"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolLogProfile"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmLsnPoolGroup = ltmLsnPoolGroup.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolGroup.setDescription('A collection of objects of ltmLsnPool MIB.')
ltmLsnPrefixLsnPoolGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 127)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmLsnPrefixLsnPoolNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPrefixLsnPoolLsnPrefixName"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPrefixLsnPoolLsnPoolName"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPrefixLsnPoolPrefixAddressType"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPrefixLsnPoolPrefixAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmLsnPrefixLsnPoolGroup = ltmLsnPrefixLsnPoolGroup.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPrefixLsnPoolGroup.setDescription('A collection of objects of ltmLsnPrefixLsnPool MIB.')
ltmLsnPrefixLsnPoolBackupGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 128)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmLsnPrefixLsnPoolBackupNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPrefixLsnPoolBackupLsnPrefixName"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPrefixLsnPoolBackupLsnPoolName"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPrefixLsnPoolBackupPrefixAddressType"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPrefixLsnPoolBackupPrefixAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmLsnPrefixLsnPoolBackupGroup = ltmLsnPrefixLsnPoolBackupGroup.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPrefixLsnPoolBackupGroup.setDescription('A collection of objects of ltmLsnPrefixLsnPoolBackup MIB.')
ltmLsnPoolVlanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 129)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolVlanNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolVlanLsnPoolName"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolVlanVlanName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmLsnPoolVlanGroup = ltmLsnPoolVlanGroup.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolVlanGroup.setDescription('A collection of objects of ltmLsnPoolVlan MIB.')
ltmLsnPoolStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 130)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolStatTranslationRequests"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolStatHairpinConnectionRequests"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolStatActiveTranslations"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolStatActiveHairpinConnections"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolStatTranslationRequestFailures"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolStatPersistenceMappingFailures"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolStatHairpinConnectionFailures"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolStatBackupPoolTranslations"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolStatLogAttempts"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolStatLogFailures"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolStatTotalEndPoints"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolStatPcpAnnounceRequests"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolStatPcpAnnounceResponsesUcast"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolStatPcpAnnounceResponsesMulticast"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolStatPcpMapRequests"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolStatPcpMapResponses"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolStatPcpPeerRequests"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolStatPcpPeerResponses"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolStatPcpErrorsInvalidRequest"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolStatPcpErrorsUnavailableResource"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolStatPcpErrorsNotAuthorized"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolStatPcpErrorsOther"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolStatActivePortBlocks"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolStatActiveClientsReachedLimit"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolStatActiveZombiePortBlocks"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolStatTotalClientsReachedLimit"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolStatTotalPortBlockAllocations"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolStatTotalPortBlockAllocationFailures"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolStatTotalPortBlockDeallocations"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolStatTotalZombiePortBlocksCreated"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolStatTotalZombiePortBlocksDeleted"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolStatTotalZombiePortBlockConnectionsKilled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmLsnPoolStatGroup = ltmLsnPoolStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolStatGroup.setDescription('A collection of objects of ltmLsnPoolStat MIB.')
ltmSpdyProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 131)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileName"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileConfigSource"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileDefaultName"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileActivationMode"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfilePriorityHandling"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileInsertHeader"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileInsertHeaderName"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileConcurrentStreamsPerConnection"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileConnectionIdleTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileReceiveWindow"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileFrameSize"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileWriteSize"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileCompressionLevel"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileCompressionWindowSize"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmSpdyProfileGroup = ltmSpdyProfileGroup.setStatus('current')
if mibBuilder.loadTexts: ltmSpdyProfileGroup.setDescription('A collection of objects of ltmSpdyProfile MIB.')
ltmSpdyProfileProtocolVersionsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 132)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileProtocolVersionsNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileProtocolVersionsName"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileProtocolVersionsIndex"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileProtocolVersionsProtocolVersions"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmSpdyProfileProtocolVersionsGroup = ltmSpdyProfileProtocolVersionsGroup.setStatus('current')
if mibBuilder.loadTexts: ltmSpdyProfileProtocolVersionsGroup.setDescription('A collection of objects of ltmSpdyProfileProtocolVersions MIB.')
ltmSpdyProfileStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 133)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatConnectionsAccepted"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatConnectionsCurrent"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatConnectionsMax"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatDataFramesReceived"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatDataFramesSent"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatFlowsCreated"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatFlowsCurrent"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatFlowsMax"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatGoawayFramesReceived"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatGoawayFramesSent"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatHeadersFramesReceived"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatHeadersFramesSent"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatHttpRequestBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatHttpResponseBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatNoopFramesReceived"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatNoopFramesSent"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatPingFramesReceived"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatPingFramesSent"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatRstStreamFramesReceived"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatRstStreamFramesSent"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatSettingsFramesReceived"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatSettingsFramesSent"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatSpdyRequestBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatSpdyRequestFrames"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatSpdyResponseBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatSpdyResponseFrames"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatSynReplyFramesReceived"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatSynReplyFramesSent"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatSynStreamFramesReceived"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatSynStreamFramesSent"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatV2StreamsCreated"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatV2StreamsCurrent"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatV2StreamsMax"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatV3StreamsCreated"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatV3StreamsCurrent"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatV3StreamsMax"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatWindowUpdateFramesReceived"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatWindowUpdateFramesSent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmSpdyProfileStatGroup = ltmSpdyProfileStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmSpdyProfileStatGroup.setDescription('A collection of objects of ltmSpdyProfileStat MIB.')
ltmFtpProfileStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 134)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmFtpProfileStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmFtpProfileStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmFtpProfileStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmFtpProfileStatLoginRequests"), ("F5-BIGIP-LOCAL-MIB", "ltmFtpProfileStatDownloadRequests"), ("F5-BIGIP-LOCAL-MIB", "ltmFtpProfileStatUploadRequests"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmFtpProfileStatGroup = ltmFtpProfileStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmFtpProfileStatGroup.setDescription('A collection of objects of ltmFtpProfileStat MIB.')
ltmDosApplicationHeavyUrlInclGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 135)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationHeavyUrlInclNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationHeavyUrlInclProfileName"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationHeavyUrlInclName"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationHeavyUrlInclIndex"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationHeavyUrlInclUrl"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmDosApplicationHeavyUrlInclGroup = ltmDosApplicationHeavyUrlInclGroup.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationHeavyUrlInclGroup.setDescription('A collection of objects of ltmDosApplicationHeavyUrlIncl MIB.')
ltmDosApplicationHeavyUrlExclGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 136)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationHeavyUrlExclNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationHeavyUrlExclProfileName"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationHeavyUrlExclName"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationHeavyUrlExclIndex"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationHeavyUrlExclUrl"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmDosApplicationHeavyUrlExclGroup = ltmDosApplicationHeavyUrlExclGroup.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationHeavyUrlExclGroup.setDescription('A collection of objects of ltmDosApplicationHeavyUrlExcl MIB.')
ltmV6rdProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 137)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmV6rdProfileNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmV6rdProfileName"), ("F5-BIGIP-LOCAL-MIB", "ltmV6rdProfileConfigSource"), ("F5-BIGIP-LOCAL-MIB", "ltmV6rdProfileDefaultName"), ("F5-BIGIP-LOCAL-MIB", "ltmV6rdProfileIpv4prefixType"), ("F5-BIGIP-LOCAL-MIB", "ltmV6rdProfileIpv4prefix"), ("F5-BIGIP-LOCAL-MIB", "ltmV6rdProfileIpv4prefixlen"), ("F5-BIGIP-LOCAL-MIB", "ltmV6rdProfileV6rdprefixType"), ("F5-BIGIP-LOCAL-MIB", "ltmV6rdProfileV6rdprefix"), ("F5-BIGIP-LOCAL-MIB", "ltmV6rdProfileV6rdprefixlen"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmV6rdProfileGroup = ltmV6rdProfileGroup.setStatus('current')
if mibBuilder.loadTexts: ltmV6rdProfileGroup.setDescription('A collection of objects of ltmV6rdProfile MIB.')
ltmPptpProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 138)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmPptpProfileNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmPptpProfileName"), ("F5-BIGIP-LOCAL-MIB", "ltmPptpProfileDescription"), ("F5-BIGIP-LOCAL-MIB", "ltmPptpProfileConfigSource"), ("F5-BIGIP-LOCAL-MIB", "ltmPptpProfileDefaultName"), ("F5-BIGIP-LOCAL-MIB", "ltmPptpProfileLogServerIp"), ("F5-BIGIP-LOCAL-MIB", "ltmPptpProfileLogPublisher"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmPptpProfileGroup = ltmPptpProfileGroup.setStatus('current')
if mibBuilder.loadTexts: ltmPptpProfileGroup.setDescription('A collection of objects of ltmPptpProfile MIB.')
ltmPptpProfileStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 139)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmPptpProfileStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmPptpProfileStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmPptpProfileStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmPptpProfileStatStartRequests"), ("F5-BIGIP-LOCAL-MIB", "ltmPptpProfileStatStartReplies"), ("F5-BIGIP-LOCAL-MIB", "ltmPptpProfileStatStopRequests"), ("F5-BIGIP-LOCAL-MIB", "ltmPptpProfileStatStopReplies"), ("F5-BIGIP-LOCAL-MIB", "ltmPptpProfileStatEchoRequests"), ("F5-BIGIP-LOCAL-MIB", "ltmPptpProfileStatEchoReplies"), ("F5-BIGIP-LOCAL-MIB", "ltmPptpProfileStatOutgoingCallRequests"), ("F5-BIGIP-LOCAL-MIB", "ltmPptpProfileStatOutgoingCallReplies"), ("F5-BIGIP-LOCAL-MIB", "ltmPptpProfileStatCallClearRequests"), ("F5-BIGIP-LOCAL-MIB", "ltmPptpProfileStatCallDisconnectNotifies"), ("F5-BIGIP-LOCAL-MIB", "ltmPptpProfileStatWanErrorNotifies"), ("F5-BIGIP-LOCAL-MIB", "ltmPptpProfileStatSetLinkInfo"), ("F5-BIGIP-LOCAL-MIB", "ltmPptpProfileStatActiveCalls"), ("F5-BIGIP-LOCAL-MIB", "ltmPptpProfileStatTotalCalls"), ("F5-BIGIP-LOCAL-MIB", "ltmPptpProfileStatFailedCalls"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmPptpProfileStatGroup = ltmPptpProfileStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmPptpProfileStatGroup.setDescription('A collection of objects of ltmPptpProfileStat MIB.')
ltmPcpProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 140)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmPcpProfileNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmPcpProfileName"), ("F5-BIGIP-LOCAL-MIB", "ltmPcpProfileConfigSource"), ("F5-BIGIP-LOCAL-MIB", "ltmPcpProfileDefaultName"), ("F5-BIGIP-LOCAL-MIB", "ltmPcpProfileListeningPort"), ("F5-BIGIP-LOCAL-MIB", "ltmPcpProfileMulticastPort"), ("F5-BIGIP-LOCAL-MIB", "ltmPcpProfileMinMappingLifetime"), ("F5-BIGIP-LOCAL-MIB", "ltmPcpProfileMaxMappingLifetime"), ("F5-BIGIP-LOCAL-MIB", "ltmPcpProfileMapRecycleDelay"), ("F5-BIGIP-LOCAL-MIB", "ltmPcpProfileMapLimitPerClient"), ("F5-BIGIP-LOCAL-MIB", "ltmPcpProfileMapFilterLimit"), ("F5-BIGIP-LOCAL-MIB", "ltmPcpProfileThirdPartyOption"), ("F5-BIGIP-LOCAL-MIB", "ltmPcpProfileRuleName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmPcpProfileGroup = ltmPcpProfileGroup.setStatus('current')
if mibBuilder.loadTexts: ltmPcpProfileGroup.setDescription('A collection of objects of ltmPcpProfile MIB.')
ltmPcpPrefixGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 141)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmPcpPrefixNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmPcpPrefixName"), ("F5-BIGIP-LOCAL-MIB", "ltmPcpPrefixAddrType"), ("F5-BIGIP-LOCAL-MIB", "ltmPcpPrefixAddr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmPcpPrefixGroup = ltmPcpPrefixGroup.setStatus('current')
if mibBuilder.loadTexts: ltmPcpPrefixGroup.setDescription('A collection of objects of ltmPcpPrefix MIB.')
ltmPcpPrefixProfilePcpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 142)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmPcpPrefixProfilePcpNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmPcpPrefixProfilePcpPcpPrefixName"), ("F5-BIGIP-LOCAL-MIB", "ltmPcpPrefixProfilePcpName"), ("F5-BIGIP-LOCAL-MIB", "ltmPcpPrefixProfilePcpPrefixAddressType"), ("F5-BIGIP-LOCAL-MIB", "ltmPcpPrefixProfilePcpPrefixAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmPcpPrefixProfilePcpGroup = ltmPcpPrefixProfilePcpGroup.setStatus('current')
if mibBuilder.loadTexts: ltmPcpPrefixProfilePcpGroup.setDescription('A collection of objects of ltmPcpPrefixProfilePcp MIB.')
ltmPcpProfileStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 143)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmPcpProfileStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmPcpProfileStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmPcpProfileStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmPcpProfileStatPcpAnnounceRequests"), ("F5-BIGIP-LOCAL-MIB", "ltmPcpProfileStatPcpAnnounceResponsesUcast"), ("F5-BIGIP-LOCAL-MIB", "ltmPcpProfileStatPcpAnnounceResponsesMulticast"), ("F5-BIGIP-LOCAL-MIB", "ltmPcpProfileStatPcpMapRequests"), ("F5-BIGIP-LOCAL-MIB", "ltmPcpProfileStatPcpMapResponses"), ("F5-BIGIP-LOCAL-MIB", "ltmPcpProfileStatPcpPeerRequests"), ("F5-BIGIP-LOCAL-MIB", "ltmPcpProfileStatPcpPeerResponses"), ("F5-BIGIP-LOCAL-MIB", "ltmPcpProfileStatPcpErrorsInvalidRequest"), ("F5-BIGIP-LOCAL-MIB", "ltmPcpProfileStatPcpErrorsUnavailableResource"), ("F5-BIGIP-LOCAL-MIB", "ltmPcpProfileStatPcpErrorsNotAuthorized"), ("F5-BIGIP-LOCAL-MIB", "ltmPcpProfileStatPcpErrorsOther"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmPcpProfileStatGroup = ltmPcpProfileStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmPcpProfileStatGroup.setDescription('A collection of objects of ltmPcpProfileStat MIB.')
ltmDnsExpressStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 144)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmDnsExpressStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsExpressStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsExpressStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsExpressStatDnsxQueries"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsExpressStatDnsxResponses"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsExpressStatDnsxNotifiesRecv"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsExpressStatAxfrQueries"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsExpressStatIxfrQueries"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsExpressStatXfrQueriesAclFailed"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsExpressStatXfrNotifiesSent"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsExpressStatDnsxXfrMsgs"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsExpressStatXfrNotifiesFailed"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsExpressStatTsigMissing"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsExpressStatTsigNotRequired"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsExpressStatTsigVerified"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsExpressStatTsigBadKey"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsExpressStatTsigBadSig"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsExpressStatTsigBadTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmDnsExpressStatGroup = ltmDnsExpressStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmDnsExpressStatGroup.setDescription('A collection of objects of ltmDnsExpressStat MIB.')
ltmDnsServerStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 145)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmDnsServerStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsServerStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsServerStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsServerStatXfrQueries"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsServerStatXfrResponses"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsServerStatXfrNotifies"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsServerStatXfrNotifyFailed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmDnsServerStatGroup = ltmDnsServerStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmDnsServerStatGroup.setDescription('A collection of objects of ltmDnsServerStat MIB.')
ltmDnsCacheForwardZoneGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 146)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheForwardZoneNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheForwardZoneName"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheForwardZoneCacheName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmDnsCacheForwardZoneGroup = ltmDnsCacheForwardZoneGroup.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheForwardZoneGroup.setDescription('A collection of objects of ltmDnsCacheForwardZone MIB.')
ltmDnsCacheForwardZoneNameServerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 147)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheForwardZoneNameServerNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheForwardZoneNameServerAddrType"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheForwardZoneNameServerAddr"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheForwardZoneNameServerPort"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheForwardZoneNameServerForwardZoneName"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheForwardZoneNameServerCacheName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmDnsCacheForwardZoneNameServerGroup = ltmDnsCacheForwardZoneNameServerGroup.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheForwardZoneNameServerGroup.setDescription('A collection of objects of ltmDnsCacheForwardZoneNameServer MIB.')
ltmClientSslCertKeyChainGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 148)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmClientSslCertKeyChainNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslCertKeyChainName"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslCertKeyChainClientssl"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslCertKeyChainCert"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslCertKeyChainKey"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslCertKeyChainChain"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslCertKeyChainOcspStplParams"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmClientSslCertKeyChainGroup = ltmClientSslCertKeyChainGroup.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslCertKeyChainGroup.setDescription('A collection of objects of ltmClientSslCertKeyChain MIB.')
ltmDosAttackDataStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 149)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmDosAttackDataStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmDosAttackDataStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmDosAttackDataStatDeviceName"), ("F5-BIGIP-LOCAL-MIB", "ltmDosAttackDataStatVectorName"), ("F5-BIGIP-LOCAL-MIB", "ltmDosAttackDataStatAttackType"), ("F5-BIGIP-LOCAL-MIB", "ltmDosAttackDataStatAttackDetected"), ("F5-BIGIP-LOCAL-MIB", "ltmDosAttackDataStatAttackCount"), ("F5-BIGIP-LOCAL-MIB", "ltmDosAttackDataStatStats"), ("F5-BIGIP-LOCAL-MIB", "ltmDosAttackDataStatStatsRate"), ("F5-BIGIP-LOCAL-MIB", "ltmDosAttackDataStatStats1m"), ("F5-BIGIP-LOCAL-MIB", "ltmDosAttackDataStatStats1h"), ("F5-BIGIP-LOCAL-MIB", "ltmDosAttackDataStatDrops"), ("F5-BIGIP-LOCAL-MIB", "ltmDosAttackDataStatDropsRate"), ("F5-BIGIP-LOCAL-MIB", "ltmDosAttackDataStatDrops1m"), ("F5-BIGIP-LOCAL-MIB", "ltmDosAttackDataStatDrops1h"), ("F5-BIGIP-LOCAL-MIB", "ltmDosAttackDataStatWlCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmDosAttackDataStatGroup = ltmDosAttackDataStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmDosAttackDataStatGroup.setDescription('A collection of objects of ltmDosAttackDataStat MIB.')
ltmNetworkAttackDataStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 150)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmNetworkAttackDataStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmNetworkAttackDataStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmNetworkAttackDataStatProfileName"), ("F5-BIGIP-LOCAL-MIB", "ltmNetworkAttackDataStatVsName"), ("F5-BIGIP-LOCAL-MIB", "ltmNetworkAttackDataStatVectorName"), ("F5-BIGIP-LOCAL-MIB", "ltmNetworkAttackDataStatAttackType"), ("F5-BIGIP-LOCAL-MIB", "ltmNetworkAttackDataStatAttackDetected"), ("F5-BIGIP-LOCAL-MIB", "ltmNetworkAttackDataStatAttackCount"), ("F5-BIGIP-LOCAL-MIB", "ltmNetworkAttackDataStatStats"), ("F5-BIGIP-LOCAL-MIB", "ltmNetworkAttackDataStatStatsRate"), ("F5-BIGIP-LOCAL-MIB", "ltmNetworkAttackDataStatStats1m"), ("F5-BIGIP-LOCAL-MIB", "ltmNetworkAttackDataStatStats1h"), ("F5-BIGIP-LOCAL-MIB", "ltmNetworkAttackDataStatDrops"), ("F5-BIGIP-LOCAL-MIB", "ltmNetworkAttackDataStatDropsRate"), ("F5-BIGIP-LOCAL-MIB", "ltmNetworkAttackDataStatDrops1m"), ("F5-BIGIP-LOCAL-MIB", "ltmNetworkAttackDataStatDrops1h"), ("F5-BIGIP-LOCAL-MIB", "ltmNetworkAttackDataStatWlCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmNetworkAttackDataStatGroup = ltmNetworkAttackDataStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmNetworkAttackDataStatGroup.setDescription('A collection of objects of ltmNetworkAttackDataStat MIB.')
ltmFwAdminIpRuleStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 151)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmFwAdminIpRuleStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmFwAdminIpRuleStatRuleName"), ("F5-BIGIP-LOCAL-MIB", "ltmFwAdminIpRuleStatContainerName"), ("F5-BIGIP-LOCAL-MIB", "ltmFwAdminIpRuleStatCounter"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmFwAdminIpRuleStatGroup = ltmFwAdminIpRuleStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmFwAdminIpRuleStatGroup.setDescription('A collection of objects of ltmFwAdminIpRuleStat MIB.')
ltmFwIpintGlobalStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 152)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmFwIpintGlobalStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmFwIpintGlobalStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmFwIpintGlobalStatBlClassName"), ("F5-BIGIP-LOCAL-MIB", "ltmFwIpintGlobalStatCounter"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmFwIpintGlobalStatGroup = ltmFwIpintGlobalStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmFwIpintGlobalStatGroup.setDescription('A collection of objects of ltmFwIpintGlobalStat MIB.')
ltmFwIpintVirtualStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 153)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmFwIpintVirtualStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmFwIpintVirtualStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmFwIpintVirtualStatContextName"), ("F5-BIGIP-LOCAL-MIB", "ltmFwIpintVirtualStatBlClassName"), ("F5-BIGIP-LOCAL-MIB", "ltmFwIpintVirtualStatCounter"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmFwIpintVirtualStatGroup = ltmFwIpintVirtualStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmFwIpintVirtualStatGroup.setDescription('A collection of objects of ltmFwIpintVirtualStat MIB.')
ltmFwIpintRouteDomainStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 154)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmFwIpintRouteDomainStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmFwIpintRouteDomainStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmFwIpintRouteDomainStatContextName"), ("F5-BIGIP-LOCAL-MIB", "ltmFwIpintRouteDomainStatBlClassName"), ("F5-BIGIP-LOCAL-MIB", "ltmFwIpintRouteDomainStatCounter"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmFwIpintRouteDomainStatGroup = ltmFwIpintRouteDomainStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmFwIpintRouteDomainStatGroup.setDescription('A collection of objects of ltmFwIpintRouteDomainStat MIB.')
ltmRouteDomainStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 155)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmRouteDomainStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmRouteDomainStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmRouteDomainStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmRouteDomainStatConnLimit"), ("F5-BIGIP-LOCAL-MIB", "ltmRouteDomainStatConnectionFlowMiss"), ("F5-BIGIP-LOCAL-MIB", "ltmRouteDomainStatClientPktsIn"), ("F5-BIGIP-LOCAL-MIB", "ltmRouteDomainStatClientBytesIn"), ("F5-BIGIP-LOCAL-MIB", "ltmRouteDomainStatClientPktsOut"), ("F5-BIGIP-LOCAL-MIB", "ltmRouteDomainStatClientBytesOut"), ("F5-BIGIP-LOCAL-MIB", "ltmRouteDomainStatClientMaxConns"), ("F5-BIGIP-LOCAL-MIB", "ltmRouteDomainStatClientTotConns"), ("F5-BIGIP-LOCAL-MIB", "ltmRouteDomainStatClientCurConns"), ("F5-BIGIP-LOCAL-MIB", "ltmRouteDomainStatClientEvictedConns"), ("F5-BIGIP-LOCAL-MIB", "ltmRouteDomainStatClientSlowKilled"), ("F5-BIGIP-LOCAL-MIB", "ltmRouteDomainStatServerPktsIn"), ("F5-BIGIP-LOCAL-MIB", "ltmRouteDomainStatServerBytesIn"), ("F5-BIGIP-LOCAL-MIB", "ltmRouteDomainStatServerPktsOut"), ("F5-BIGIP-LOCAL-MIB", "ltmRouteDomainStatServerBytesOut"), ("F5-BIGIP-LOCAL-MIB", "ltmRouteDomainStatServerMaxConns"), ("F5-BIGIP-LOCAL-MIB", "ltmRouteDomainStatServerTotConns"), ("F5-BIGIP-LOCAL-MIB", "ltmRouteDomainStatServerCurConns"), ("F5-BIGIP-LOCAL-MIB", "ltmRouteDomainStatServerEvictedConns"), ("F5-BIGIP-LOCAL-MIB", "ltmRouteDomainStatServerSlowKilled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmRouteDomainStatGroup = ltmRouteDomainStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmRouteDomainStatGroup.setDescription('A collection of objects of ltmRouteDomainStat MIB.')
ltmFlowEvictionPolicyStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 156)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmFlowEvictionPolicyStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmFlowEvictionPolicyStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmFlowEvictionPolicyStatPolicyName"), ("F5-BIGIP-LOCAL-MIB", "ltmFlowEvictionPolicyStatSweptContext"), ("F5-BIGIP-LOCAL-MIB", "ltmFlowEvictionPolicyStatContextName"), ("F5-BIGIP-LOCAL-MIB", "ltmFlowEvictionPolicyStatEvicted"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmFlowEvictionPolicyStatGroup = ltmFlowEvictionPolicyStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmFlowEvictionPolicyStatGroup.setDescription('A collection of objects of ltmFlowEvictionPolicyStat MIB.')
ltmAlgLogProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 157)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmAlgLogProfileNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmAlgLogProfileName"), ("F5-BIGIP-LOCAL-MIB", "ltmAlgLogProfileDescription"), ("F5-BIGIP-LOCAL-MIB", "ltmAlgLogProfileConfigSource"), ("F5-BIGIP-LOCAL-MIB", "ltmAlgLogProfileDefaultName"), ("F5-BIGIP-LOCAL-MIB", "ltmAlgLogProfileStartControlAction"), ("F5-BIGIP-LOCAL-MIB", "ltmAlgLogProfileEndControlAction"), ("F5-BIGIP-LOCAL-MIB", "ltmAlgLogProfileStartDataAction"), ("F5-BIGIP-LOCAL-MIB", "ltmAlgLogProfileEndDataAction"), ("F5-BIGIP-LOCAL-MIB", "ltmAlgLogProfileInboundAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmAlgLogProfileGroup = ltmAlgLogProfileGroup.setStatus('current')
if mibBuilder.loadTexts: ltmAlgLogProfileGroup.setDescription('A collection of objects of ltmAlgLogProfile MIB.')
ltmAlgLogProfileStartControlElementsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 158)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmAlgLogProfileStartControlElementsNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmAlgLogProfileStartControlElementsName"), ("F5-BIGIP-LOCAL-MIB", "ltmAlgLogProfileStartControlElementsIndex"), ("F5-BIGIP-LOCAL-MIB", "ltmAlgLogProfileStartControlElementsElements"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmAlgLogProfileStartControlElementsGroup = ltmAlgLogProfileStartControlElementsGroup.setStatus('current')
if mibBuilder.loadTexts: ltmAlgLogProfileStartControlElementsGroup.setDescription('A collection of objects of ltmAlgLogProfileStartControlElements MIB.')
ltmAlgLogProfileEndControlElementsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 159)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmAlgLogProfileEndControlElementsNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmAlgLogProfileEndControlElementsName"), ("F5-BIGIP-LOCAL-MIB", "ltmAlgLogProfileEndControlElementsIndex"), ("F5-BIGIP-LOCAL-MIB", "ltmAlgLogProfileEndControlElementsElements"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmAlgLogProfileEndControlElementsGroup = ltmAlgLogProfileEndControlElementsGroup.setStatus('current')
if mibBuilder.loadTexts: ltmAlgLogProfileEndControlElementsGroup.setDescription('A collection of objects of ltmAlgLogProfileEndControlElements MIB.')
ltmAlgLogProfileStartDataElementsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 160)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmAlgLogProfileStartDataElementsNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmAlgLogProfileStartDataElementsName"), ("F5-BIGIP-LOCAL-MIB", "ltmAlgLogProfileStartDataElementsIndex"), ("F5-BIGIP-LOCAL-MIB", "ltmAlgLogProfileStartDataElementsElements"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmAlgLogProfileStartDataElementsGroup = ltmAlgLogProfileStartDataElementsGroup.setStatus('current')
if mibBuilder.loadTexts: ltmAlgLogProfileStartDataElementsGroup.setDescription('A collection of objects of ltmAlgLogProfileStartDataElements MIB.')
ltmAlgLogProfileEndDataElementsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 161)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmAlgLogProfileEndDataElementsNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmAlgLogProfileEndDataElementsName"), ("F5-BIGIP-LOCAL-MIB", "ltmAlgLogProfileEndDataElementsIndex"), ("F5-BIGIP-LOCAL-MIB", "ltmAlgLogProfileEndDataElementsElements"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmAlgLogProfileEndDataElementsGroup = ltmAlgLogProfileEndDataElementsGroup.setStatus('current')
if mibBuilder.loadTexts: ltmAlgLogProfileEndDataElementsGroup.setDescription('A collection of objects of ltmAlgLogProfileEndDataElements MIB.')
ltmLsnLogProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 162)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmLsnLogProfileNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnLogProfileName"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnLogProfileDescription"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnLogProfileConfigSource"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnLogProfileDefaultName"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnLogProfileStartOutboundAction"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnLogProfileEndOutboundAction"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnLogProfileStartInboundAction"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnLogProfileEndInboundAction"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnLogProfileQuotaExceededAction"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnLogProfileErrorsAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmLsnLogProfileGroup = ltmLsnLogProfileGroup.setStatus('current')
if mibBuilder.loadTexts: ltmLsnLogProfileGroup.setDescription('A collection of objects of ltmLsnLogProfile MIB.')
ltmLsnLogProfileStartOutboundElementsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 163)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmLsnLogProfileStartOutboundElementsNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnLogProfileStartOutboundElementsName"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnLogProfileStartOutboundElementsIndex"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnLogProfileStartOutboundElementsElements"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmLsnLogProfileStartOutboundElementsGroup = ltmLsnLogProfileStartOutboundElementsGroup.setStatus('current')
if mibBuilder.loadTexts: ltmLsnLogProfileStartOutboundElementsGroup.setDescription('A collection of objects of ltmLsnLogProfileStartOutboundElements MIB.')
ltmLsnLogProfileEndOutboundElementsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 164)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmLsnLogProfileEndOutboundElementsNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnLogProfileEndOutboundElementsName"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnLogProfileEndOutboundElementsIndex"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnLogProfileEndOutboundElementsElements"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmLsnLogProfileEndOutboundElementsGroup = ltmLsnLogProfileEndOutboundElementsGroup.setStatus('current')
if mibBuilder.loadTexts: ltmLsnLogProfileEndOutboundElementsGroup.setDescription('A collection of objects of ltmLsnLogProfileEndOutboundElements MIB.')
ltmOcspStaplingParametersGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 165)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmOcspStaplingParametersNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmOcspStaplingParametersName"), ("F5-BIGIP-LOCAL-MIB", "ltmOcspStaplingParametersUseProxyServer"), ("F5-BIGIP-LOCAL-MIB", "ltmOcspStaplingParametersProxyServerPool"), ("F5-BIGIP-LOCAL-MIB", "ltmOcspStaplingParametersDnsResolver"), ("F5-BIGIP-LOCAL-MIB", "ltmOcspStaplingParametersTrustedCa"), ("F5-BIGIP-LOCAL-MIB", "ltmOcspStaplingParametersTrustedResponders"), ("F5-BIGIP-LOCAL-MIB", "ltmOcspStaplingParametersUrl"), ("F5-BIGIP-LOCAL-MIB", "ltmOcspStaplingParametersSignerCert"), ("F5-BIGIP-LOCAL-MIB", "ltmOcspStaplingParametersSignerKey"), ("F5-BIGIP-LOCAL-MIB", "ltmOcspStaplingParametersSignHash"), ("F5-BIGIP-LOCAL-MIB", "ltmOcspStaplingParametersTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmOcspStaplingParametersClockSkew"), ("F5-BIGIP-LOCAL-MIB", "ltmOcspStaplingParametersStatusAge"), ("F5-BIGIP-LOCAL-MIB", "ltmOcspStaplingParametersCacheTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmOcspStaplingParametersCacheErrorTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmOcspStaplingParametersStrictRespCertCheck"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmOcspStaplingParametersGroup = ltmOcspStaplingParametersGroup.setStatus('current')
if mibBuilder.loadTexts: ltmOcspStaplingParametersGroup.setDescription('A collection of objects of ltmOcspStaplingParameters MIB.')
ltmFwRuleStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 166)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmFwRuleStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmFwRuleStatContextType"), ("F5-BIGIP-LOCAL-MIB", "ltmFwRuleStatContextName"), ("F5-BIGIP-LOCAL-MIB", "ltmFwRuleStatRuleName"), ("F5-BIGIP-LOCAL-MIB", "ltmFwRuleStatRuleListName"), ("F5-BIGIP-LOCAL-MIB", "ltmFwRuleStatPolicyName"), ("F5-BIGIP-LOCAL-MIB", "ltmFwRuleStatRuleStatType"), ("F5-BIGIP-LOCAL-MIB", "ltmFwRuleStatActualRule"), ("F5-BIGIP-LOCAL-MIB", "ltmFwRuleStatCounter"), ("F5-BIGIP-LOCAL-MIB", "ltmFwRuleStatLastHitTime"), ("F5-BIGIP-LOCAL-MIB", "ltmFwRuleStatLastHitTimeFmt"), ("F5-BIGIP-LOCAL-MIB", "ltmFwRuleStatOverlapper"), ("F5-BIGIP-LOCAL-MIB", "ltmFwRuleStatOverlapType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmFwRuleStatGroup = ltmFwRuleStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmFwRuleStatGroup.setDescription('A collection of objects of ltmFwRuleStat MIB.')
ltmFwPolicyRuleStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 167)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmFwPolicyRuleStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmFwPolicyRuleStatContextType"), ("F5-BIGIP-LOCAL-MIB", "ltmFwPolicyRuleStatContextName"), ("F5-BIGIP-LOCAL-MIB", "ltmFwPolicyRuleStatRuleName"), ("F5-BIGIP-LOCAL-MIB", "ltmFwPolicyRuleStatRuleListName"), ("F5-BIGIP-LOCAL-MIB", "ltmFwPolicyRuleStatPolicyName"), ("F5-BIGIP-LOCAL-MIB", "ltmFwPolicyRuleStatRuleStatType"), ("F5-BIGIP-LOCAL-MIB", "ltmFwPolicyRuleStatActualRule"), ("F5-BIGIP-LOCAL-MIB", "ltmFwPolicyRuleStatCounter"), ("F5-BIGIP-LOCAL-MIB", "ltmFwPolicyRuleStatLastHitTime"), ("F5-BIGIP-LOCAL-MIB", "ltmFwPolicyRuleStatLastHitTimeFmt"), ("F5-BIGIP-LOCAL-MIB", "ltmFwPolicyRuleStatOverlapper"), ("F5-BIGIP-LOCAL-MIB", "ltmFwPolicyRuleStatOverlapType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmFwPolicyRuleStatGroup = ltmFwPolicyRuleStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmFwPolicyRuleStatGroup.setDescription('A collection of objects of ltmFwPolicyRuleStat MIB.')
mibBuilder.exportSymbols("F5-BIGIP-LOCAL-MIB", ltmClientSslCertKeyChainClientssl=ltmClientSslCertKeyChainClientssl, ltmDnsProfileStatRcodeServfail=ltmDnsProfileStatRcodeServfail, ltmHttpProfileRamUriIncl=ltmHttpProfileRamUriIncl, ltmPoolQueueOnConnectionLimit=ltmPoolQueueOnConnectionLimit, ltmHttpClassCookEntry=ltmHttpClassCookEntry, ltmIsessionProfileGroup=ltmIsessionProfileGroup, ltmNodeAddrEnabledState=ltmNodeAddrEnabledState, ltmClientSslStatInsecureHandshakeRejects=ltmClientSslStatInsecureHandshakeRejects, ltmXmlProfileStatNumDocumentsWithNoMatches=ltmXmlProfileStatNumDocumentsWithNoMatches, ltmServerSslProfileStat=ltmServerSslProfileStat, ltmPoolStatConnqAllAgeMax=ltmPoolStatConnqAllAgeMax, ltmPoolStatServerBytesOut=ltmPoolStatServerBytesOut, ltmDnsProfileStatDnsRateRejectedRequests=ltmDnsProfileStatDnsRateRejectedRequests, ltmLsnPoolStatPcpPeerRequests=ltmLsnPoolStatPcpPeerRequests, ltmPoolStatCurSessions=ltmPoolStatCurSessions, ltmRstCauseStatGroup=ltmRstCauseStatGroup, ltmConnPoolProfileSrcMask=ltmConnPoolProfileSrcMask, ltmPersistProfileGroup=ltmPersistProfileGroup, ltmHttpProfileStatV9Resp=ltmHttpProfileStatV9Resp, ltmDnsCacheStatTcpMaxConns=ltmDnsCacheStatTcpMaxConns, ltmServerSslStatSessCacheOverflows=ltmServerSslStatSessCacheOverflows, ltmAuthProfileGroup=ltmAuthProfileGroup, ltmPoolMemberStatConnqAgeEdm=ltmPoolMemberStatConnqAgeEdm, ltmClientSslStatHostnameBypasses=ltmClientSslStatHostnameBypasses, ltmHttpClassStatAudioPostcompressBytes=ltmHttpClassStatAudioPostcompressBytes, ltmServerSslStatEcdhRsaKeyxchg=ltmServerSslStatEcdhRsaKeyxchg, ltmSnatPoolGroup=ltmSnatPoolGroup, ltmPcpPrefixProfilePcpEntry=ltmPcpPrefixProfilePcpEntry, ltmSnatStatGroup=ltmSnatStatGroup, ltmServerSslStatSessCacheLookups=ltmServerSslStatSessCacheLookups, ltmPersistProfileCookieName=ltmPersistProfileCookieName, ltmTransAddrStatServerCurConns=ltmTransAddrStatServerCurConns, ltmClientSslStatEncryptedBytesIn=ltmClientSslStatEncryptedBytesIn, ltmVirtualServRule=ltmVirtualServRule, ltmPoolStatCurrPvaAssistConn=ltmPoolStatCurrPvaAssistConn, ltmStreamProfileStatResetStats=ltmStreamProfileStatResetStats, ltmHttpCompressionProfileStatGroup=ltmHttpCompressionProfileStatGroup, ltmDnsCacheForwardZoneNameServerGroup=ltmDnsCacheForwardZoneNameServerGroup, ltmIsessionProfileCompressionLzo=ltmIsessionProfileCompressionLzo, ltmHttpCompressionProfileStatAudioPostcompressBytes=ltmHttpCompressionProfileStatAudioPostcompressBytes, ltmIsessionProfileStatLzoInBytesRaw=ltmIsessionProfileStatLzoInBytesRaw, ltmSpdyProfileStatConnectionsMax=ltmSpdyProfileStatConnectionsMax, ltmLsnPrefix=ltmLsnPrefix, ltmPoolMbrStatusPort=ltmPoolMbrStatusPort, ltmHttpCompressionProfilePreferredMethod=ltmHttpCompressionProfilePreferredMethod, ltmHttpProfileCompressBrowserWorkarounds=ltmHttpProfileCompressBrowserWorkarounds, ltmFwAdminIpRuleStatCounter=ltmFwAdminIpRuleStatCounter, ltmVirtualServRclass=ltmVirtualServRclass, ltmHttpProfileStatJsPrecompressBytes=ltmHttpProfileStatJsPrecompressBytes, ltmTcpProfileDelayedAcks=ltmTcpProfileDelayedAcks, ltmServerSslDropExpCert=ltmServerSslDropExpCert, ltmRuleEventStatMinCycles=ltmRuleEventStatMinCycles, ltmSnatOrigAddrEntry=ltmSnatOrigAddrEntry, ltmDnsProfileStatAaaaReqs=ltmDnsProfileStatAaaaReqs, ltmFastL4ProfileIpTosToServer=ltmFastL4ProfileIpTosToServer, ltmLsnPoolStatHairpinConnectionFailures=ltmLsnPoolStatHairpinConnectionFailures, ltmWebAccelerationProfileStatEntry=ltmWebAccelerationProfileStatEntry, ltmSctpProfileTxChunks=ltmSctpProfileTxChunks, ltmIsessionProfileStatDedupOutMissBytes=ltmIsessionProfileStatDedupOutMissBytes, ltmHttpClassStatGroup=ltmHttpClassStatGroup, ltmLsnPoolStatPcpAnnounceResponsesMulticast=ltmLsnPoolStatPcpAnnounceResponsesMulticast, ltmSnatStatClientPktsOut=ltmSnatStatClientPktsOut, ltmAlgLogProfileNumber=ltmAlgLogProfileNumber, ltmVirtualServStat=ltmVirtualServStat, ltmDnsCacheStatMsgInserts=ltmDnsCacheStatMsgInserts, ltmDnsSecurityStatTxtDrops=ltmDnsSecurityStatTxtDrops, ltmLsnPoolGroup=ltmLsnPoolGroup, ltmProfiles=ltmProfiles, ltmDnsProfileStatRecursionAvailable=ltmDnsProfileStatRecursionAvailable, ltmDnsCacheForwardZoneNumber=ltmDnsCacheForwardZoneNumber, ltmPcpPrefixProfilePcpPrefixAddressType=ltmPcpPrefixProfilePcpPrefixAddressType, ltmAuthProfileStatEntry=ltmAuthProfileStatEntry, ltmIsessionProfileStatDedupOutHitHistBucket256k=ltmIsessionProfileStatDedupOutHitHistBucket256k, ltmPcpProfileStatPcpMapResponses=ltmPcpProfileStatPcpMapResponses, ltmFwIpintGlobalStat=ltmFwIpintGlobalStat, ltmPptpProfileStatName=ltmPptpProfileStatName, ltmDnsExpressStatTsigBadSig=ltmDnsExpressStatTsigBadSig, ltmHttpCompressionProfileCpusaverHigh=ltmHttpCompressionProfileCpusaverHigh, ltmSctpProfileDefaultName=ltmSctpProfileDefaultName, ltmRuleEventNumber=ltmRuleEventNumber, ltmHttpProfileStatJsPostcompressBytes=ltmHttpProfileStatJsPostcompressBytes, ltmClientSslStatEcdheEcdsaKeyxchg=ltmClientSslStatEcdheEcdsaKeyxchg, ltmHttpProfileStat=ltmHttpProfileStat, ltmHttpClassStatV11Reqs=ltmHttpClassStatV11Reqs, ltmFtpProfileStatUploadRequests=ltmFtpProfileStatUploadRequests, ltmLsnLogProfileEndOutboundAction=ltmLsnLogProfileEndOutboundAction, ltmUdpProfileNumber=ltmUdpProfileNumber, ltmWebAccelerationProfileStatCacheMissesAll=ltmWebAccelerationProfileStatCacheMissesAll, ltmSctpProfileStatAbandons=ltmSctpProfileStatAbandons, ltmClientSslStatConns=ltmClientSslStatConns, ltmDnsCacheStatSecIndeterminate=ltmDnsCacheStatSecIndeterminate, ltmConnPoolProfileGroup=ltmConnPoolProfileGroup, ltmVirtualAddrStatResetStats=ltmVirtualAddrStatResetStats, ltmNatGroup=ltmNatGroup, ltmSnatPoolStatGroup=ltmSnatPoolStatGroup, ltmDnsExpressStatEntry=ltmDnsExpressStatEntry, ltmSpdyProfileStatSettingsFramesReceived=ltmSpdyProfileStatSettingsFramesReceived, ltmDnsCacheGroup=ltmDnsCacheGroup, ltmHttpClassProfileStat=ltmHttpClassProfileStat, ltmRuleEntry=ltmRuleEntry, ltmHttpClassCookNumber=ltmHttpClassCookNumber, ltmIsessionProfileStatDedupOutBytesRaw=ltmIsessionProfileStatDedupOutBytesRaw, ltmWebaccCacheUriInclGroup=ltmWebaccCacheUriInclGroup, ltmHttpClassStatPlainPrecompressBytes=ltmHttpClassStatPlainPrecompressBytes, ltmHttpClassStatRamcacheMissBytes=ltmHttpClassStatRamcacheMissBytes, ltmFastL4ProfileTcpTimestampMode=ltmFastL4ProfileTcpTimestampMode, ltmClientSslFwdpBypassDipBList=ltmClientSslFwdpBypassDipBList, ltmHttpProfileStatRamcacheMissBytesAll=ltmHttpProfileStatRamcacheMissBytesAll, ltmRuleEventStatFailures=ltmRuleEventStatFailures, ltmHttpClassStatNullCompressBytes=ltmHttpClassStatNullCompressBytes, ltmRst=ltmRst, ltmServerSslStatInsecureHandshakeRejects=ltmServerSslStatInsecureHandshakeRejects, ltmDnsCacheTable=ltmDnsCacheTable, ltmRamUriPinTable=ltmRamUriPinTable, ltmNodeAddrGroup=ltmNodeAddrGroup, ltmNATs=ltmNATs, ltmMirrorPortEntry=ltmMirrorPortEntry, ltmTcpProfileKeepAliveInterval=ltmTcpProfileKeepAliveInterval, ltmHttpClassHostName=ltmHttpClassHostName, ltmAlgLogProfileEndDataElements=ltmAlgLogProfileEndDataElements, ltmHttpClassHeadName=ltmHttpClassHeadName, ltmPptpProfileStatNumber=ltmPptpProfileStatNumber, ltmSpdyProfileCompressionWindowSize=ltmSpdyProfileCompressionWindowSize, ltmUdpProfileStatRxunreach=ltmUdpProfileStatRxunreach, ltmServerSslStatCurNativeConns=ltmServerSslStatCurNativeConns, ltmServerSslCiphers=ltmServerSslCiphers, ltmClientSslStatDesBulk=ltmClientSslStatDesBulk, ltmDosApplicationTpsBasedMode=ltmDosApplicationTpsBasedMode, ltmFwIpintVirtualStat=ltmFwIpintVirtualStat, ltmSpdyProfileConfigSource=ltmSpdyProfileConfigSource, ltmFwRuleStatLastHitTimeFmt=ltmFwRuleStatLastHitTimeFmt, ltmHttpProfileStatRespBucket4k=ltmHttpProfileStatRespBucket4k, ltmPptpProfileStatGroup=ltmPptpProfileStatGroup, ltmTcpProfileDsack=ltmTcpProfileDsack, ltmPcpProfileThirdPartyOption=ltmPcpProfileThirdPartyOption, ltmAttrPersistDestAddrLimitMode=ltmAttrPersistDestAddrLimitMode, ltmHttpClassStatResp3xxCnt=ltmHttpClassStatResp3xxCnt, ltmClientSslStatTotNativeConns=ltmClientSslStatTotNativeConns, ltmGlobalAttr=ltmGlobalAttr, ltmClientSslTable=ltmClientSslTable, ltmVirtualServEntry=ltmVirtualServEntry, ltmSipProfileStatBadmsgs=ltmSipProfileStatBadmsgs, ltmClientSslStatMaxConns=ltmClientSslStatMaxConns, ltmIsessionProfileEndpointPool=ltmIsessionProfileEndpointPool, ltmUserStatProfileGroup=ltmUserStatProfileGroup, ltmServerSslStatPartiallyHwAcceleratedConns=ltmServerSslStatPartiallyHwAcceleratedConns, ltmHttpProfileCompressCpusaverLow=ltmHttpProfileCompressCpusaverLow, ltmTcpProfileNumber=ltmTcpProfileNumber, ltmDnsProfileStatCheckingDisabled=ltmDnsProfileStatCheckingDisabled, ltmPoolMemberStatPvaBytesIn=ltmPoolMemberStatPvaBytesIn, ltmTcpProfileSynRtoBase=ltmTcpProfileSynRtoBase, ltmHttpCompressionProfileName=ltmHttpCompressionProfileName, ltmSpdyProfileStatSynReplyFramesReceived=ltmSpdyProfileStatSynReplyFramesReceived, ltmDosApplicationHeavyUrlInclEntry=ltmDosApplicationHeavyUrlInclEntry, ltmHttpCompressionProfileSelective=ltmHttpCompressionProfileSelective, ltmRuleEventStatEventType=ltmRuleEventStatEventType, ltmRtspProfileDefaultName=ltmRtspProfileDefaultName, ltmHttpClassCookIndex=ltmHttpClassCookIndex, ltmSctpProfileMaxBurst=ltmSctpProfileMaxBurst, ltmDnsProfileStatTxtReqs=ltmDnsProfileStatTxtReqs, ltmFwRuleStatRuleListName=ltmFwRuleStatRuleListName, ltmServerSslUncleanShutdown=ltmServerSslUncleanShutdown, ltmRtsp=ltmRtsp, ltmNodeAddrMonitorState=ltmNodeAddrMonitorState, ltmVirtualServProfile=ltmVirtualServProfile, ltmUdpProfileStatName=ltmUdpProfileStatName, ltmNodeAddrStatDurationRateExceeded=ltmNodeAddrStatDurationRateExceeded, ltmRamUriExclNumber=ltmRamUriExclNumber, ltmClientSslFwdpBypassSipBList=ltmClientSslFwdpBypassSipBList, ltmFastL4=ltmFastL4, ltmClientSslProfile=ltmClientSslProfile, ltmClientSslStatAesBulk=ltmClientSslStatAesBulk, ltmServerSslStatEcdhEcdsaKeyxchg=ltmServerSslStatEcdhEcdsaKeyxchg, ltmDnsServerStatEntry=ltmDnsServerStatEntry, ltmPoolMbrStatusParentType=ltmPoolMbrStatusParentType, ltmRamUriPinEntry=ltmRamUriPinEntry, ltmFastL4ProfileStatLbcSuccessful=ltmFastL4ProfileStatLbcSuccessful, ltmHttpcompUriExclTable=ltmHttpcompUriExclTable, ltmFastL4ProfileTcpHandshakeTimeout=ltmFastL4ProfileTcpHandshakeTimeout, ltmLsnPrefixLsnPoolEntry=ltmLsnPrefixLsnPoolEntry, ltmTcpProfileInitRwnd=ltmTcpProfileInitRwnd, ltmSipProfileTerminateBye=ltmSipProfileTerminateBye, ltmNodeAddrStatServerPktsIn=ltmNodeAddrStatServerPktsIn, ltmLsnPoolStatBackupPoolTranslations=ltmLsnPoolStatBackupPoolTranslations, ltmNodeAddrRatio=ltmNodeAddrRatio, ltmDnsProfileProcessRd=ltmDnsProfileProcessRd, ltmGlobals=ltmGlobals, ltmSpdyProfileProtocolVersionsNumber=ltmSpdyProfileProtocolVersionsNumber, ltmDnsProfileDnsCache=ltmDnsProfileDnsCache, ltmWebaccCacheUriPinEntry=ltmWebaccCacheUriPinEntry, ltmFastL4ProfileResetOnTimeout=ltmFastL4ProfileResetOnTimeout, ltmVirtualServStatPvaBytesIn=ltmVirtualServStatPvaBytesIn, ltmVirtualAddrStatTotPvaAssistConn=ltmVirtualAddrStatTotPvaAssistConn, ltmHttpClassUriEntry=ltmHttpClassUriEntry, ltmFastHttpProfileStatName=ltmFastHttpProfileStatName, ltmFwIpintGlobalStatGroup=ltmFwIpintGlobalStatGroup, ltmPoolMemberStatGroup=ltmPoolMemberStatGroup, ltmSipProfileStatEntry=ltmSipProfileStatEntry, ltmSNATs=ltmSNATs, ltmHttpProfileStatOctetPrecompressBytes=ltmHttpProfileStatOctetPrecompressBytes, ltmLsnPoolRouteAdvertisement=ltmLsnPoolRouteAdvertisement, ltmFwIpintVirtualStatNumber=ltmFwIpintVirtualStatNumber, ltmPersist=ltmPersist, ltmV6rdProfileV6rdprefixlen=ltmV6rdProfileV6rdprefixlen, ltmVirtualServStatName=ltmVirtualServStatName, ltmFwAdminIpRuleStat=ltmFwAdminIpRuleStat, ltmSpdyProfileProtocolVersionsProtocolVersions=ltmSpdyProfileProtocolVersionsProtocolVersions, ltmTransAddrConnLimit=ltmTransAddrConnLimit, ltmHttpCompressionProfileUriExcl=ltmHttpCompressionProfileUriExcl, ltmNetworkAttackDataStatDropsRate=ltmNetworkAttackDataStatDropsRate, ltmVirtualServPoolVirtualServerName=ltmVirtualServPoolVirtualServerName, ltmFwPolicyRuleStatLastHitTime=ltmFwPolicyRuleStatLastHitTime, ltmServerSslStatRsaKeyxchg=ltmServerSslStatRsaKeyxchg, ltmXmlProfileMaxBufferSize=ltmXmlProfileMaxBufferSize, ltmDnsProfileStatZoneAxfr=ltmDnsProfileStatZoneAxfr, ltmOcspStaplingParametersUseProxyServer=ltmOcspStaplingParametersUseProxyServer, ltmHttpProfileStatV9Reqs=ltmHttpProfileStatV9Reqs, ltmHttpClassUriGroup=ltmHttpClassUriGroup, ltmClientSslRenegotiateSize=ltmClientSslRenegotiateSize, ltmHttpCompressionProfileStatOctetPrecompressBytes=ltmHttpCompressionProfileStatOctetPrecompressBytes, ltmLsnLogProfileEntry=ltmLsnLogProfileEntry, ltmLsnLogProfile=ltmLsnLogProfile, ltmWebaccCacheUriInclNumber=ltmWebaccCacheUriInclNumber, ltmServerSslStatEcdheRsaKeyxchg=ltmServerSslStatEcdheRsaKeyxchg, ltmSipProfileStatName=ltmSipProfileStatName, ltmDosApplicationLatencyBasedIpRateLimiting=ltmDosApplicationLatencyBasedIpRateLimiting, ltmHttpProfilePipelining=ltmHttpProfilePipelining, ltmSpdyProfileStatGroup=ltmSpdyProfileStatGroup, ltmVirtualServ=ltmVirtualServ, ltmServerSslPassphrase=ltmServerSslPassphrase, ltmNatVlanEntry=ltmNatVlanEntry, ltmWebAccelerationProfileCacheInsertAgeHeader=ltmWebAccelerationProfileCacheInsertAgeHeader, ltmFwIpintGlobalStatCounter=ltmFwIpintGlobalStatCounter, ltmPoolStatServerPktsOut=ltmPoolStatServerPktsOut, ltmNodeAddrStatTotPvaAssistConn=ltmNodeAddrStatTotPvaAssistConn, ltmHttpProfileCompressMode=ltmHttpProfileCompressMode, ltmDnsHeaderFilterTable=ltmDnsHeaderFilterTable, ltmNodeAddrStatusEnabledState=ltmNodeAddrStatusEnabledState, ltmHttpCompressionProfileStatCssPrecompressBytes=ltmHttpCompressionProfileStatCssPrecompressBytes, ltmLsnLogProfileEndOutboundElementsEntry=ltmLsnLogProfileEndOutboundElementsEntry, ltmSpdyProfileConnectionIdleTimeout=ltmSpdyProfileConnectionIdleTimeout, ltmFwRuleStatOverlapType=ltmFwRuleStatOverlapType, ltmVirtualServVlanVlanName=ltmVirtualServVlanVlanName, ltmLsnLogProfileStartOutboundElementsIndex=ltmLsnLogProfileStartOutboundElementsIndex, ltmVirtualServConnLimit=ltmVirtualServConnLimit, ltmHttpCompressionProfileStatXmlPrecompressBytes=ltmHttpCompressionProfileStatXmlPrecompressBytes, ltmUdpProfileStatConnects=ltmUdpProfileStatConnects, ltmFastL4ProfileRttFromClient=ltmFastL4ProfileRttFromClient, ltmEncCookiesGroup=ltmEncCookiesGroup, ltmTcpProfileTimeWaitTimeout=ltmTcpProfileTimeWaitTimeout, ltmBwcPolicyStatActivePolicies=ltmBwcPolicyStatActivePolicies, ltmUdpProfileStatGroup=ltmUdpProfileStatGroup, ltmDnsQueryFilterNumber=ltmDnsQueryFilterNumber, ltmSpdyProfileStatName=ltmSpdyProfileStatName)
mibBuilder.exportSymbols("F5-BIGIP-LOCAL-MIB", ltmHttpProfileCompressGzipLevel=ltmHttpProfileCompressGzipLevel, ltmLsnLogProfileStartOutboundElementsElements=ltmLsnLogProfileStartOutboundElementsElements, ltmDosAttackDataStatVectorName=ltmDosAttackDataStatVectorName, ltmRuleEventStatAvgCycles=ltmRuleEventStatAvgCycles, ltmMirrorPort=ltmMirrorPort, ltmTcpProfilePktLossIgnoreRate=ltmTcpProfilePktLossIgnoreRate, ltmPoolMbrStatusGroup=ltmPoolMbrStatusGroup, ltmWebAccelerationProfileGroup=ltmWebAccelerationProfileGroup, ltmSpdyProfileCompressionLevel=ltmSpdyProfileCompressionLevel, ltmHttpcompUriInclTable=ltmHttpcompUriInclTable, ltmVirtualServRuleRuleName=ltmVirtualServRuleRuleName, ltmVirtualServStatSwSyncookies=ltmVirtualServStatSwSyncookies, ltmRuleEventGroup=ltmRuleEventGroup, ltmDosApplicationTpsBasedSiteTpsIncreaseRate=ltmDosApplicationTpsBasedSiteTpsIncreaseRate, ltmDnsSecurityStatPtrDrops=ltmDnsSecurityStatPtrDrops, ltmVirtualServVaName=ltmVirtualServVaName, ltmLsnPoolStatTranslationRequests=ltmLsnPoolStatTranslationRequests, ltmLsnPoolStatActiveTranslations=ltmLsnPoolStatActiveTranslations, ltmPptpProfileStatStartRequests=ltmPptpProfileStatStartRequests, ltmWebaccCacheUriExclTable=ltmWebaccCacheUriExclTable, ltmHttpCompressionProfileStatVideoPostcompressBytes=ltmHttpCompressionProfileStatVideoPostcompressBytes, ltmDosApplicationEntry=ltmDosApplicationEntry, ltmDnsCacheStatMsgMisses=ltmDnsCacheStatMsgMisses, ltmSpdyProfileProtocolVersionsTable=ltmSpdyProfileProtocolVersionsTable, ltmWebaccCacheUriExclIndex=ltmWebaccCacheUriExclIndex, ltmDosApplicationTpsBasedUrlTpsIncreaseRate=ltmDosApplicationTpsBasedUrlTpsIncreaseRate, ltmXmlProfileXpathQueries=ltmXmlProfileXpathQueries, ltmIsession=ltmIsession, ltmVirtualAddrStat=ltmVirtualAddrStat, ltmFtpProfileStatEntry=ltmFtpProfileStatEntry, ltmRamUriPinName=ltmRamUriPinName, ltmPoolMemberNewSessionEnable=ltmPoolMemberNewSessionEnable, ltmStreamProfileStatEntry=ltmStreamProfileStatEntry, ltmSnatpoolTransAddrGroup=ltmSnatpoolTransAddrGroup, ltmConnPoolProfileStatGroup=ltmConnPoolProfileStatGroup, ltmVirtualServStatNoNodesErrors=ltmVirtualServStatNoNodesErrors, ltmHttpcompContTypeExclTable=ltmHttpcompContTypeExclTable, ltmDnsServerStatResetStats=ltmDnsServerStatResetStats, ltmHttpClassPoolName=ltmHttpClassPoolName, ltmPoolMbrStatusDetailReason=ltmPoolMbrStatusDetailReason, ltmEncCookiesNumber=ltmEncCookiesNumber, ltmHttpProfileStatHtmlPostcompressBytes=ltmHttpProfileStatHtmlPostcompressBytes, ltmFastL4ProfileNumber=ltmFastL4ProfileNumber, ltmIsessionProfileCompressionDeflateLevel=ltmIsessionProfileCompressionDeflateLevel, ltmFastL4ProfileTcpWscaleMode=ltmFastL4ProfileTcpWscaleMode, ltmRtspProfileRealHttpPersistence=ltmRtspProfileRealHttpPersistence, ltmIsessionProfileStatTable=ltmIsessionProfileStatTable, ltmRouteDomainStatGroup=ltmRouteDomainStatGroup, ltmFtpProfileTranslateExtended=ltmFtpProfileTranslateExtended, ltmIsessionProfileNumber=ltmIsessionProfileNumber, ltmXmlProfileXpathQueriesTable=ltmXmlProfileXpathQueriesTable, ltmHttpClassHostString=ltmHttpClassHostString, ltmHttpCompressionProfileKeepAcceptEncoding=ltmHttpCompressionProfileKeepAcceptEncoding, ltmServerSslStatInsecureHandshakeAccepts=ltmServerSslStatInsecureHandshakeAccepts, ltmLsnLogProfileDefaultName=ltmLsnLogProfileDefaultName, ltmIsessionProfileStatProfileName=ltmIsessionProfileStatProfileName, ltmHttpcompUriInclGroup=ltmHttpcompUriInclGroup, ltmPoolMemberStatServerBytesIn=ltmPoolMemberStatServerBytesIn, ltmSnatPoolStatServerMaxConns=ltmSnatPoolStatServerMaxConns, ltmAttrPersistDestAddrMaxCount=ltmAttrPersistDestAddrMaxCount, ltmFwIpintVirtualStatContextName=ltmFwIpintVirtualStatContextName, ltmNatStatName=ltmNatStatName, ltmDnsCacheUnwantedThreshold=ltmDnsCacheUnwantedThreshold, ltmClientSslCertKeyChainTable=ltmClientSslCertKeyChainTable, ltmNodeAddrStatPvaTotConns=ltmNodeAddrStatPvaTotConns, ltmDnsCacheMaxConcurrentQueries=ltmDnsCacheMaxConcurrentQueries, ltmDnsProfileStatTclSuspends=ltmDnsProfileStatTclSuspends, ltmMirrorPortMember=ltmMirrorPortMember, ltmConnPoolProfileStatCurSize=ltmConnPoolProfileStatCurSize, ltmRtspProfileStatName=ltmRtspProfileStatName, ltmHttpClassStatResetStats=ltmHttpClassStatResetStats, ltmSipProfileEntry=ltmSipProfileEntry, ltmPoolEnabledState=ltmPoolEnabledState, ltmVirtualServStatWlSyncookieHits=ltmVirtualServStatWlSyncookieHits, ltmTcpProfileStatRxcookie=ltmTcpProfileStatRxcookie, ltmLsnPoolStatPcpAnnounceRequests=ltmLsnPoolStatPcpAnnounceRequests, ltmPptpProfileStatStopRequests=ltmPptpProfileStatStopRequests, ltmClientSslStatTable=ltmClientSslStatTable, ltmUdpProfileTable=ltmUdpProfileTable, ltmIsessionProfileTargetVirtual=ltmIsessionProfileTargetVirtual, ltmCompContTypeInclContentType=ltmCompContTypeInclContentType, ltmServerSslStatAesGcmBulk=ltmServerSslStatAesGcmBulk, ltmClientSslStatDecryptedBytesIn=ltmClientSslStatDecryptedBytesIn, ltmTcpProfileStatConnects=ltmTcpProfileStatConnects, ltmPoolStatPvaBytesIn=ltmPoolStatPvaBytesIn, ltmSipProfileFirewallEnabled=ltmSipProfileFirewallEnabled, ltmHttpCompressionProfileBrowserWorkarounds=ltmHttpCompressionProfileBrowserWorkarounds, ltmDosApplicationHeavyUrlInclNumber=ltmDosApplicationHeavyUrlInclNumber, ltmRuleEventStatGroup=ltmRuleEventStatGroup, ltmVAddrStatusAddrType=ltmVAddrStatusAddrType, ltmSpdyProfile=ltmSpdyProfile, ltmNetworkAttackDataStatDrops1h=ltmNetworkAttackDataStatDrops1h, ltmNodeAddrStatPvaBytesIn=ltmNodeAddrStatPvaBytesIn, ltmDnsServerStatXfrResponses=ltmDnsServerStatXfrResponses, ltmHttpClassStatMaxKeepaliveReq=ltmHttpClassStatMaxKeepaliveReq, ltmMirrorPortMemberTable=ltmMirrorPortMemberTable, ltmServerSslStatTlsv11=ltmServerSslStatTlsv11, ltmSnatPoolStatServerTotConns=ltmSnatPoolStatServerTotConns, ltmDnsProfileStatFastDnsAllowed=ltmDnsProfileStatFastDnsAllowed, ltmPoolName=ltmPoolName, ltmVirtualServRuleGroup=ltmVirtualServRuleGroup, ltmNatStatEntry=ltmNatStatEntry, ltmServerSslStatGroup=ltmServerSslStatGroup, ltmClientSslStatEcdheRsaKeyxchg=ltmClientSslStatEcdheRsaKeyxchg, ltmHttpCompression=ltmHttpCompression, ltmUdpProfileIpTosToClient=ltmUdpProfileIpTosToClient, ltmSnatpoolTransAddrTransAddrType=ltmSnatpoolTransAddrTransAddrType, ltmRtspProfileNumber=ltmRtspProfileNumber, ltmDosProfileEntry=ltmDosProfileEntry, ltmNodeAddr=ltmNodeAddr, ltmFlowEvictionPolicyStatSweptContext=ltmFlowEvictionPolicyStatSweptContext, ltmTcpProfileStatEntry=ltmTcpProfileStatEntry, ltmPersistProfileMode=ltmPersistProfileMode, ltmDnsCacheStatUdpMaxConns=ltmDnsCacheStatUdpMaxConns, ltmRateFilterStatTable=ltmRateFilterStatTable, ltmRateFilterStatBytesPerSec=ltmRateFilterStatBytesPerSec, ltmHttpProfileStatPlainPostcompressBytes=ltmHttpProfileStatPlainPostcompressBytes, ltmVirtualServCmpEnabled=ltmVirtualServCmpEnabled, ltmSnatName=ltmSnatName, ltmDosApplicationHeavyUrlInclName=ltmDosApplicationHeavyUrlInclName, ltmLsnLogProfileEndOutboundElementsElements=ltmLsnLogProfileEndOutboundElementsElements, ltmEncCookiesName=ltmEncCookiesName, ltmConnPoolProfileStatConnects=ltmConnPoolProfileStatConnects, ltmRuleEvent=ltmRuleEvent, ltmVirtualModuleScoreEntry=ltmVirtualModuleScoreEntry, ltmSnatStatClientTotConns=ltmSnatStatClientTotConns, ltmPcpProfileStatPcpAnnounceRequests=ltmPcpProfileStatPcpAnnounceRequests, ltmVirtualAddrConnLimit=ltmVirtualAddrConnLimit, ltmRtspProfileStatGroup=ltmRtspProfileStatGroup, ltmDnsProfileStatDns64Reqs=ltmDnsProfileStatDns64Reqs, ltmClientSslProxySslPassthrough=ltmClientSslProxySslPassthrough, ltmFwAdminIpRuleStatTable=ltmFwAdminIpRuleStatTable, ltmAlgLogProfileEndControlElementsElements=ltmAlgLogProfileEndControlElementsElements, ltmSpdyProfileStatGoawayFramesReceived=ltmSpdyProfileStatGoawayFramesReceived, ltmWebAccelerationProfileStat=ltmWebAccelerationProfileStat, ltmSnatPoolStatTable=ltmSnatPoolStatTable, ltmClientSslStatMidstreamRenegotiations=ltmClientSslStatMidstreamRenegotiations, ltmDnsProfileSecurity=ltmDnsProfileSecurity, ltmVirtualServStatPvaTotConns=ltmVirtualServStatPvaTotConns, ltmFallbackStatusGroup=ltmFallbackStatusGroup, ltmDnsProfileStatToCache=ltmDnsProfileStatToCache, ltmServerSslAuthenticateName=ltmServerSslAuthenticateName, ltmAuthProfileIdleTimeout=ltmAuthProfileIdleTimeout, ltmVirtualServVlan=ltmVirtualServVlan, ltmNatStatServerBytesIn=ltmNatStatServerBytesIn, ltmServerSslStatSessCacheCurEntries=ltmServerSslStatSessCacheCurEntries, ltmAlgLogProfileStartDataAction=ltmAlgLogProfileStartDataAction, ltmHttpClassName=ltmHttpClassName, ltmHttp=ltmHttp, ltmHttpCompressionProfileStatPrecompressBytes=ltmHttpCompressionProfileStatPrecompressBytes, ltmNetworkAttackDataStatGroup=ltmNetworkAttackDataStatGroup, ltmFastL4ProfileStatTxerrors=ltmFastL4ProfileStatTxerrors, ltmLsnPoolStatPcpErrorsInvalidRequest=ltmLsnPoolStatPcpErrorsInvalidRequest, ltmLsnPoolLogProfile=ltmLsnPoolLogProfile, ltmNodes=ltmNodes, ltmVirtualServWildmask=ltmVirtualServWildmask, ltmDnsExpressStat=ltmDnsExpressStat, ltmRuleEventPriority=ltmRuleEventPriority, ltmHttpCompressionProfileConfigSource=ltmHttpCompressionProfileConfigSource, ltmIsessionProfileStatBzip2OutBytesOpt=ltmIsessionProfileStatBzip2OutBytesOpt, ltmVirtualServStatVsUsageRatio5s=ltmVirtualServStatVsUsageRatio5s, ltmNetworkAttackDataStatAttackType=ltmNetworkAttackDataStatAttackType, ltmPoolMemberAddr=ltmPoolMemberAddr, ltmIsessionProfileStatDedupInMissHistBucket64k=ltmIsessionProfileStatDedupInMissHistBucket64k, ltmRouteDomainStatServerSlowKilled=ltmRouteDomainStatServerSlowKilled, ltmIsessionProfileCompressionDeflate=ltmIsessionProfileCompressionDeflate, ltmRouteDomainStatServerBytesIn=ltmRouteDomainStatServerBytesIn, ltmSpdyProfileStatV2StreamsCreated=ltmSpdyProfileStatV2StreamsCreated, ltmNetworkAttackDataStatWlCount=ltmNetworkAttackDataStatWlCount, ltmClientSslProxySsl=ltmClientSslProxySsl, ltmLsnPrefixTable=ltmLsnPrefixTable, ltmPcpProfileStatPcpErrorsOther=ltmPcpProfileStatPcpErrorsOther, ltmSnatSnatpoolName=ltmSnatSnatpoolName, ltmVirtualAddrStatName=ltmVirtualAddrStatName, ltmDosApplicationTpsBasedEscalationPeriod=ltmDosApplicationTpsBasedEscalationPeriod, ltmUserStatProfileStatEntry=ltmUserStatProfileStatEntry, ltmPoolMemberStatTable=ltmPoolMemberStatTable, ltmIsessionProfileStatDedupInHitHistBucket1k=ltmIsessionProfileStatDedupInHitHistBucket1k, ltmRateFilterGroup=ltmRateFilterGroup, ltmSpdyProfileStatSettingsFramesSent=ltmSpdyProfileStatSettingsFramesSent, ltmFastHttpProfileStatResp3xxCnt=ltmFastHttpProfileStatResp3xxCnt, ltmHttpProfileStatPostReqs=ltmHttpProfileStatPostReqs, ltmHttpProfileDefaultName=ltmHttpProfileDefaultName, ltmWebAccelerationProfileStatCacheCount=ltmWebAccelerationProfileStatCacheCount, ltmServerSslStatEncryptedBytesIn=ltmServerSslStatEncryptedBytesIn, ltmXmlProfileXpathQueriesNumber=ltmXmlProfileXpathQueriesNumber, ltmClientSslStatTlsv1=ltmClientSslStatTlsv1, ltmDnsProfileStatQueries=ltmDnsProfileStatQueries, ltmRespHeadersPermStr=ltmRespHeadersPermStr, ltmSpdyProfileStat=ltmSpdyProfileStat, ltmFtpProfileTable=ltmFtpProfileTable, ltmFwPolicyRuleStatOverlapType=ltmFwPolicyRuleStatOverlapType, ltmIsessionProfileStatDedupInMissHistBucketLarge=ltmIsessionProfileStatDedupInMissHistBucketLarge, ltmNodeAddrTable=ltmNodeAddrTable, ltmDnsSecurityStatOtherDrops=ltmDnsSecurityStatOtherDrops, ltmSctpProfileInitMaxrtx=ltmSctpProfileInitMaxrtx, ltmDnsProfileStatResponsesPerSec=ltmDnsProfileStatResponsesPerSec, ltmNodeAddrStatusAddrType=ltmNodeAddrStatusAddrType, ltmNodeAddrStatCurrPvaAssistConn=ltmNodeAddrStatCurrPvaAssistConn, ltmDosWhiteIp=ltmDosWhiteIp, ltmVirtualServDefaultPool=ltmVirtualServDefaultPool, ltmFastHttpProfileStatNumber=ltmFastHttpProfileStatNumber, ltmVirtualServers=ltmVirtualServers, ltmNodeAddrAvailabilityState=ltmNodeAddrAvailabilityState, ltmDnsExpressStatResetStats=ltmDnsExpressStatResetStats, ltmIsessionProfileCompression=ltmIsessionProfileCompression, ltmSpdyProfileStatPingFramesSent=ltmSpdyProfileStatPingFramesSent, ltmVirtualServStatCsMaxConnDur=ltmVirtualServStatCsMaxConnDur, ltmSipProfileStatGroup=ltmSipProfileStatGroup, ltmDnsServerStatName=ltmDnsServerStatName, ltmClientSslStatOcspStaplingOcspConnHttpErrors=ltmClientSslStatOcspStaplingOcspConnHttpErrors, ltmAlgLogProfileStartDataElementsGroup=ltmAlgLogProfileStartDataElementsGroup, ltmTcpProfileName=ltmTcpProfileName, ltmFastHttpProfileStatV11Reqs=ltmFastHttpProfileStatV11Reqs, ltmServerSslTable=ltmServerSslTable, ltmServerSslSessionTicket=ltmServerSslSessionTicket, ltmHttpProfileStatV10Reqs=ltmHttpProfileStatV10Reqs, ltmSpdyProfileFrameSize=ltmSpdyProfileFrameSize, ltmPptpProfileDescription=ltmPptpProfileDescription, ltmFwRuleStat=ltmFwRuleStat, ltmClientSslPeerNoRenegotiateTimeout=ltmClientSslPeerNoRenegotiateTimeout, ltmTransAddrStatServerBytesIn=ltmTransAddrStatServerBytesIn, ltmTransAddrStat=ltmTransAddrStat, ltmVirtualServPort=ltmVirtualServPort, ltmHttpClassStatResp2xxCnt=ltmHttpClassStatResp2xxCnt, ltmAlgLogProfileStartDataElementsName=ltmAlgLogProfileStartDataElementsName, ltmOcspStaplingParametersStatusAge=ltmOcspStaplingParametersStatusAge, ltmPersistProfileCookieExpiration=ltmPersistProfileCookieExpiration, ltmLsnLogProfileDescription=ltmLsnLogProfileDescription, ltmHttpClassStatV10Reqs=ltmHttpClassStatV10Reqs, ltmSnatStatNumber=ltmSnatStatNumber, ltmClientSslStatMaxNativeConns=ltmClientSslStatMaxNativeConns, ltmWebAccelerationProfileUriExcl=ltmWebAccelerationProfileUriExcl, ltmSnatPool=ltmSnatPool, ltmClientSslFwdpCaCert=ltmClientSslFwdpCaCert, ltmRtspProfileEntry=ltmRtspProfileEntry, ltmNodeAddrStatAddr=ltmNodeAddrStatAddr, ltmDnsCacheStatKeyUpdates=ltmDnsCacheStatKeyUpdates, ltmVirtualServRuleTable=ltmVirtualServRuleTable, ltmDnsCacheIgnoreCd=ltmDnsCacheIgnoreCd, ltmTcpProfileCmetricsCache=ltmTcpProfileCmetricsCache, ltmIsessionProfileStatOutgoingConnsIdleTot=ltmIsessionProfileStatOutgoingConnsIdleTot, ltmClientSslStatEdhRsaKeyxchg=ltmClientSslStatEdhRsaKeyxchg, ltmNatVlanTransAddr=ltmNatVlanTransAddr, ltmFastL4ProfileStatNumber=ltmFastL4ProfileStatNumber, ltmNodeAddrSessionStatus=ltmNodeAddrSessionStatus, ltmFwRuleStatContextType=ltmFwRuleStatContextType, ltmHttpProfileFallbackStatus=ltmHttpProfileFallbackStatus, ltmSpdyProfileStatV3StreamsCreated=ltmSpdyProfileStatV3StreamsCreated, ltmAlgLogProfileEndDataElementsIndex=ltmAlgLogProfileEndDataElementsIndex, ltmPoolStatServerCurConns=ltmPoolStatServerCurConns, ltmClientSslPassphrase=ltmClientSslPassphrase, ltmClientSslStatCurConns=ltmClientSslStatCurConns, ltmHttpProfileStatRespBucket32k=ltmHttpProfileStatRespBucket32k)
mibBuilder.exportSymbols("F5-BIGIP-LOCAL-MIB", ltmDnsProfileStatDnsExpressNotifies=ltmDnsProfileStatDnsExpressNotifies, ltmHttpClassStatPrecompressBytes=ltmHttpClassStatPrecompressBytes, ltmDnsCacheStatRpzRewrites=ltmDnsCacheStatRpzRewrites, ltmCompUriExclTable=ltmCompUriExclTable, ltmLsnLogProfileStartOutboundElementsNumber=ltmLsnLogProfileStartOutboundElementsNumber, ltmServerSslStatSniRejects=ltmServerSslStatSniRejects, ltmIsessionProfileStatDedupInMissHistBucket512k=ltmIsessionProfileStatDedupInMissHistBucket512k, ltmNetworkAttackDataStatTable=ltmNetworkAttackDataStatTable, ltmVirtualAddr=ltmVirtualAddr, ltmPoolIpTosToServer=ltmPoolIpTosToServer, ltmDosProfile=ltmDosProfile, ltmTransAddrTable=ltmTransAddrTable, ltmDnsProfileName=ltmDnsProfileName, ltmVAddrStatusAddr=ltmVAddrStatusAddr, ltmVirtualModuleScoreNumber=ltmVirtualModuleScoreNumber, ltmHttpCompressionProfileStatPlainPrecompressBytes=ltmHttpCompressionProfileStatPlainPrecompressBytes, ltmHttpProfileStatCookiePersistInserts=ltmHttpProfileStatCookiePersistInserts, ltmUserStatProfileStatNumber=ltmUserStatProfileStatNumber, ltmLsnLogProfileEndOutboundElements=ltmLsnLogProfileEndOutboundElements, ltmTcpProfileStatAccepts=ltmTcpProfileStatAccepts, ltmIsessionProfileStatDedupInMissBytes=ltmIsessionProfileStatDedupInMissBytes, ltmVsHttpClassVsName=ltmVsHttpClassVsName, ltmUdpProfileStatRxbadsum=ltmUdpProfileStatRxbadsum, ltmFastL4ProfileTcpCloseTimeout=ltmFastL4ProfileTcpCloseTimeout, ltmHttpClassStatVideoPrecompressBytes=ltmHttpClassStatVideoPrecompressBytes, ltmNodeAddrStatServerBytesIn=ltmNodeAddrStatServerBytesIn, ltmWebaccCacheUriExclUri=ltmWebaccCacheUriExclUri, ltmAlgLogProfileStartControlElementsNumber=ltmAlgLogProfileStartControlElementsNumber, ltmHttpClassGroup=ltmHttpClassGroup, ltmVirtualAddrArpEnabled=ltmVirtualAddrArpEnabled, ltmSpdyProfileStatDataFramesReceived=ltmSpdyProfileStatDataFramesReceived, ltmClientSslFwdpBypassHnBList=ltmClientSslFwdpBypassHnBList, ltmSnatStatClientBytesOut=ltmSnatStatClientBytesOut, ltmFastHttpProfileEntry=ltmFastHttpProfileEntry, ltmVsStatusDetailReason=ltmVsStatusDetailReason, ltmDosWhiteIpAddress=ltmDosWhiteIpAddress, ltmHttpProfileStatNumber=ltmHttpProfileStatNumber, ltmSnatVlanNumber=ltmSnatVlanNumber, ltmVsStatusName=ltmVsStatusName, ltmUdpProfileStatOpen=ltmUdpProfileStatOpen, ltmRateFilterNumber=ltmRateFilterNumber, ltmRouteDomainStatConnLimit=ltmRouteDomainStatConnLimit, ltmSpdyProfileInsertHeader=ltmSpdyProfileInsertHeader, ltmDnsCacheNameserverCacheCount=ltmDnsCacheNameserverCacheCount, ltmNodeAddrDisabledParentType=ltmNodeAddrDisabledParentType, ltmClientSslSessionTicket=ltmClientSslSessionTicket, ltmHttpClassHostTable=ltmHttpClassHostTable, ltmVirtualServName=ltmVirtualServName, ltmLsnLogProfileConfigSource=ltmLsnLogProfileConfigSource, ltmDnsProfileStatToGtm=ltmDnsProfileStatToGtm, ltmCompUriInclIndex=ltmCompUriInclIndex, ltmDnsCachePrefetchKey=ltmDnsCachePrefetchKey, bigipLocalTM=bigipLocalTM, ltmClientSslCertKeyChainEntry=ltmClientSslCertKeyChainEntry, ltmDnsCacheStatAsync=ltmDnsCacheStatAsync, ltmHttpProfileRamUriExcl=ltmHttpProfileRamUriExcl, ltmAlgLogProfileStartDataElementsEntry=ltmAlgLogProfileStartDataElementsEntry, ltmDosApplicationTable=ltmDosApplicationTable, ltmHttpClassStatPostcompressBytes=ltmHttpClassStatPostcompressBytes, ltmSpdyProfileStatV3StreamsCurrent=ltmSpdyProfileStatV3StreamsCurrent, ltmRuleGroup=ltmRuleGroup, ltmAlgLogProfileEndDataElementsEntry=ltmAlgLogProfileEndDataElementsEntry, ltmHttpClassWaEnabled=ltmHttpClassWaEnabled, ltmSnatPoolNumber=ltmSnatPoolNumber, ltmFwAdminIpRuleStatContainerName=ltmFwAdminIpRuleStatContainerName, ltmTransAddrStatServerPktsOut=ltmTransAddrStatServerPktsOut, ltmTcpProfileCongestionCtrl=ltmTcpProfileCongestionCtrl, ltmVirtualServStatClientPktsOut=ltmVirtualServStatClientPktsOut, ltmSctpProfileIpTosToPeer=ltmSctpProfileIpTosToPeer, ltmHttpClassRedirectLocation=ltmHttpClassRedirectLocation, ltmServerSslStatTlsv12=ltmServerSslStatTlsv12, ltmVirtualServGroup=ltmVirtualServGroup, ltmSctpProfileInStreams=ltmSctpProfileInStreams, ltmWebAccelerationProfileStatInterStripeMisses=ltmWebAccelerationProfileStatInterStripeMisses, ltmHttpProfileRespHeadersPerm=ltmHttpProfileRespHeadersPerm, ltmEncCookiesStr=ltmEncCookiesStr, ltmDnsProfileDnsExpressEnabled=ltmDnsProfileDnsExpressEnabled, ltmRouteDomainStatClientSlowKilled=ltmRouteDomainStatClientSlowKilled, ltmHttpClassHostGroup=ltmHttpClassHostGroup, ltmDnsProfileStatNsReqs=ltmDnsProfileStatNsReqs, ltmVirtualServPersistUseDefault=ltmVirtualServPersistUseDefault, ltmDnsProfileStatRcodeNxdomain=ltmDnsProfileStatRcodeNxdomain, ltmLsnPoolStatLogAttempts=ltmLsnPoolStatLogAttempts, ltmFastL4ProfileStatGroup=ltmFastL4ProfileStatGroup, ltmPoolMemberStatPvaPktsOut=ltmPoolMemberStatPvaPktsOut, ltmFtp=ltmFtp, ltmFwRuleStatOverlapper=ltmFwRuleStatOverlapper, ltmDnsCacheStatKeyEvictions=ltmDnsCacheStatKeyEvictions, ltmIsessionProfileStatDedupOutHitBytes=ltmIsessionProfileStatDedupOutHitBytes, ltmXmlProfileNamespaceMappingsTable=ltmXmlProfileNamespaceMappingsTable, ltmHttpClassCookString=ltmHttpClassCookString, ltmIsessionProfileStatDedupInMisses=ltmIsessionProfileStatDedupInMisses, ltmServerSslStatReused=ltmServerSslStatReused, ltmSpdyProfileStatSpdyResponseBytes=ltmSpdyProfileStatSpdyResponseBytes, ltmHttpClassProfileCook=ltmHttpClassProfileCook, ltmNatVlan=ltmNatVlan, ltmIsessionProfileCompressionNull=ltmIsessionProfileCompressionNull, ltmHttpCompressionProfileEntry=ltmHttpCompressionProfileEntry, ltmClientSslStatCurNativeConns=ltmClientSslStatCurNativeConns, ltmIsessionProfileStatNullInBytesRaw=ltmIsessionProfileStatNullInBytesRaw, ltmFwIpintGlobalStatTable=ltmFwIpintGlobalStatTable, ltmFwRuleStatRuleName=ltmFwRuleStatRuleName, ltmDnsProfileStatEdns0=ltmDnsProfileStatEdns0, ltmHttpClassStatRespBucket16k=ltmHttpClassStatRespBucket16k, ltmTcpProfileStatRxbadseg=ltmTcpProfileStatRxbadseg, ltmHttpProfileRamcacheMaxAge=ltmHttpProfileRamcacheMaxAge, ltmXmlProfileStatNumber=ltmXmlProfileStatNumber, ltmTcpProfileVerifiedAccept=ltmTcpProfileVerifiedAccept, ltmDosAttackDataStatAttackType=ltmDosAttackDataStatAttackType, ltmServerSslProxySsl=ltmServerSslProxySsl, ltmLsnPoolStatPcpErrorsNotAuthorized=ltmLsnPoolStatPcpErrorsNotAuthorized, ltmRtspProfileLogPublisher=ltmRtspProfileLogPublisher, ltmPptpProfileTable=ltmPptpProfileTable, ltmClientSslStatTotCompatConns=ltmClientSslStatTotCompatConns, ltmIsessionProfileStatDedupOutMissHistBucket1k=ltmIsessionProfileStatDedupOutMissHistBucket1k, ltmVirtualServWildmaskType=ltmVirtualServWildmaskType, ltmAlgLogProfileEndDataElementsElements=ltmAlgLogProfileEndDataElementsElements, ltmPoolMemberStatResetStats=ltmPoolMemberStatResetStats, ltmDosApplicationLatencyBasedDeEscalationPeriod=ltmDosApplicationLatencyBasedDeEscalationPeriod, ltmHttpProfileStatTable=ltmHttpProfileStatTable, ltmDnsQueryFilterEntry=ltmDnsQueryFilterEntry, ltmAuthProfileMode=ltmAuthProfileMode, ltmHttpClassHostIndex=ltmHttpClassHostIndex, ltmHttpClassStatNumber=ltmHttpClassStatNumber, ltmAlgLogProfileStartControlElementsTable=ltmAlgLogProfileStartControlElementsTable, ltmTcpProfileStatExpires=ltmTcpProfileStatExpires, ltmCompUriExclIndex=ltmCompUriExclIndex, ltmDnsSecurityStatAnyDrops=ltmDnsSecurityStatAnyDrops, ltmFastL4ProfileStatResetStats=ltmFastL4ProfileStatResetStats, ltmLsnPoolStatGroup=ltmLsnPoolStatGroup, ltmLsnPoolPersistenceTimeout=ltmLsnPoolPersistenceTimeout, ltmTransAddrStatGroup=ltmTransAddrStatGroup, ltmStreamProfileName=ltmStreamProfileName, ltmHttpClassStatRamcacheMissesAll=ltmHttpClassStatRamcacheMissesAll, ltmClientSslFwdpEnabled=ltmClientSslFwdpEnabled, ltmMirrorPortTable=ltmMirrorPortTable, ltmDnsProfileStatOpcodeNotify=ltmDnsProfileStatOpcodeNotify, ltmNatNumber=ltmNatNumber, ltmFwIpintRouteDomainStatNumber=ltmFwIpintRouteDomainStatNumber, ltmIsessionProfileStatDeflateOutBytesOpt=ltmIsessionProfileStatDeflateOutBytesOpt, ltmWebAccelerationProfileStatName=ltmWebAccelerationProfileStatName, ltmDnsProfileUseLocalBind=ltmDnsProfileUseLocalBind, ltmVsHttpClassPriority=ltmVsHttpClassPriority, ltmRouteDomainStatServerBytesOut=ltmRouteDomainStatServerBytesOut, ltmDnsCacheStatUnsolicitedReplies=ltmDnsCacheStatUnsolicitedReplies, ltmLsnPrefixAddr=ltmLsnPrefixAddr, ltmPoolTable=ltmPoolTable, ltmVirtualServProfileContext=ltmVirtualServProfileContext, ltmAttrGroup=ltmAttrGroup, ltmIsessionProfileStatBzip2OutUses=ltmIsessionProfileStatBzip2OutUses, ltmCompContTypeExclGroup=ltmCompContTypeExclGroup, ltmIsessionProfileStatDedupOutHitHistBucket32k=ltmIsessionProfileStatDedupOutHitHistBucket32k, ltmVirtualServVlanTable=ltmVirtualServVlanTable, ltmDosProfileTable=ltmDosProfileTable, ltmFastL4ProfileEntry=ltmFastL4ProfileEntry, ltmIsessionProfileStatDedupOutHitHistBucket1m=ltmIsessionProfileStatDedupOutHitHistBucket1m, ltmDnsCacheStatKeyInserts=ltmDnsCacheStatKeyInserts, ltmDnsExpressStatTsigNotRequired=ltmDnsExpressStatTsigNotRequired, ltmServerSslProxySslPassthrough=ltmServerSslProxySslPassthrough, ltmRuleEventStatResetStats=ltmRuleEventStatResetStats, ltmNodeAddrDynamicRatio=ltmNodeAddrDynamicRatio, ltmNetworkAttackDataStat=ltmNetworkAttackDataStat, ltmSpdyProfileDefaultName=ltmSpdyProfileDefaultName, ltmAuthProfileStatGroup=ltmAuthProfileStatGroup, ltmPoolStat=ltmPoolStat, ltmHttpProfileStatV11Resp=ltmHttpProfileStatV11Resp, ltmUserStatProfileStatFieldName=ltmUserStatProfileStatFieldName, ltmTcpProfileDeferredAccept=ltmTcpProfileDeferredAccept, ltmHttpClassStatImagePostcompressBytes=ltmHttpClassStatImagePostcompressBytes, ltmServerSslStatTotNativeConns=ltmServerSslStatTotNativeConns, ltmNatEnabled=ltmNatEnabled, ltmIsessionProfilePortTransparency=ltmIsessionProfilePortTransparency, ltmTcpProfileZeroWindowTimeout=ltmTcpProfileZeroWindowTimeout, ltmSnatStatResetStats=ltmSnatStatResetStats, ltmVirtualAddrAddr=ltmVirtualAddrAddr, ltmFastL4ProfileStatOpen=ltmFastL4ProfileStatOpen, ltmIsessionProfileStatDedupInHitHistBucketLarge=ltmIsessionProfileStatDedupInHitHistBucketLarge, ltmPcpProfileStatTable=ltmPcpProfileStatTable, ltmHttpProfileCompressAllowHttp10=ltmHttpProfileCompressAllowHttp10, ltmDnsServerStatXfrNotifies=ltmDnsServerStatXfrNotifies, ltmClientSslStatSslv2=ltmClientSslStatSslv2, ltmPersistProfileNumber=ltmPersistProfileNumber, ltmVsHttpClassTable=ltmVsHttpClassTable, ltmSipProfileStatDrops=ltmSipProfileStatDrops, ltmFastHttpProfileConnpoolMaxReuse=ltmFastHttpProfileConnpoolMaxReuse, ltmPoolMemberTable=ltmPoolMemberTable, ltmRamUriExclUri=ltmRamUriExclUri, ltmHttpcompUriExclNumber=ltmHttpcompUriExclNumber, ltmLsnLogProfileStartOutboundElementsEntry=ltmLsnLogProfileStartOutboundElementsEntry, ltmFastL4ProfileStatEntry=ltmFastL4ProfileStatEntry, ltmSipProfile=ltmSipProfile, ltmServerSslStatConns=ltmServerSslStatConns, ltmXmlProfileStatGroup=ltmXmlProfileStatGroup, ltmVirtualServAuthNumber=ltmVirtualServAuthNumber, ltmDnsSecurityStatCnameDrops=ltmDnsSecurityStatCnameDrops, ltmDnsQueryFilterName=ltmDnsQueryFilterName, ltmFtpProfileLogPublisher=ltmFtpProfileLogPublisher, ltmPcpProfileStatPcpAnnounceResponsesUcast=ltmPcpProfileStatPcpAnnounceResponsesUcast, ltmIsessionProfileStatDedupInMissHistBucket32k=ltmIsessionProfileStatDedupInMissHistBucket32k, ltmPersistProfileCookieHashLength=ltmPersistProfileCookieHashLength, ltmPoolDynamicRatioSum=ltmPoolDynamicRatioSum, ltmLsnLogProfileEndOutboundElementsGroup=ltmLsnLogProfileEndOutboundElementsGroup, ltmHttpcompUriInclEntry=ltmHttpcompUriInclEntry, ltmHttpProfileStatVideoPostcompressBytes=ltmHttpProfileStatVideoPostcompressBytes, ltmNatVlanVlanName=ltmNatVlanVlanName, ltmTcpProfileSelectiveAcks=ltmTcpProfileSelectiveAcks, ltmRtspProfileStatTable=ltmRtspProfileStatTable, ltmRtspProfileProxy=ltmRtspProfileProxy, ltmEncCookiesTable=ltmEncCookiesTable, ltmV6rdProfileIpv4prefixlen=ltmV6rdProfileIpv4prefixlen, ltmStreamProfileStat=ltmStreamProfileStat, ltmServerSslStatShaDigest=ltmServerSslStatShaDigest, ltmRamUriExclIndex=ltmRamUriExclIndex, ltmPoolMemberStatusReason=ltmPoolMemberStatusReason, ltmVirtualServVlanVsName=ltmVirtualServVlanVsName, ltmFastHttpProfileStatClientRxBad=ltmFastHttpProfileStatClientRxBad, ltmHttpClassUrlRewrite=ltmHttpClassUrlRewrite, ltmPersistProfileMirror=ltmPersistProfileMirror, ltmHttpProfileHeaderErase=ltmHttpProfileHeaderErase, ltmVirtualServPersist=ltmVirtualServPersist, ltmFastHttpProfileStatConnpoolCurSize=ltmFastHttpProfileStatConnpoolCurSize, ltmNatTransAddr=ltmNatTransAddr, ltmDnsServerStatXfrQueries=ltmDnsServerStatXfrQueries, ltmWebAccelerationProfileName=ltmWebAccelerationProfileName, ltmXmlProfileDefaultName=ltmXmlProfileDefaultName, ltmVirtualServAuthProfileName=ltmVirtualServAuthProfileName, ltmUserStatProfileName=ltmUserStatProfileName, ltmSnatNumber=ltmSnatNumber, ltmDnsProfileStatResponses=ltmDnsProfileStatResponses, ltmVsHttpClassEntry=ltmVsHttpClassEntry, ltmPoolMinUpMembersEnable=ltmPoolMinUpMembersEnable, ltmDosAttackDataStatDeviceName=ltmDosAttackDataStatDeviceName, ltmNetworkAttackDataStatResetStats=ltmNetworkAttackDataStatResetStats, ltmPersistProfileName=ltmPersistProfileName, ltmRamUriInclGroup=ltmRamUriInclGroup, ltmIsessionProfileStatLzoOutUses=ltmIsessionProfileStatLzoOutUses, ltmAttrSnatAnyIpProtocol=ltmAttrSnatAnyIpProtocol, ltmSctpProfileStatRxcookie=ltmSctpProfileStatRxcookie, ltmDosApplicationLatencyBasedSiteTpsIncreaseRate=ltmDosApplicationLatencyBasedSiteTpsIncreaseRate, ltmAlgLogProfileStartControlAction=ltmAlgLogProfileStartControlAction, ltmNodeAddrAddrType=ltmNodeAddrAddrType, ltmDnsCacheStatNameserverMisses=ltmDnsCacheStatNameserverMisses, ltmFastL4ProfileStatServersynrtx=ltmFastL4ProfileStatServersynrtx, ltmBwcPolicyStatNumber=ltmBwcPolicyStatNumber, ltmRtspProfile=ltmRtspProfile, ltmWebaccCacheUriInclUri=ltmWebaccCacheUriInclUri, ltmPcpProfileStatName=ltmPcpProfileStatName, ltmHttpCompressionProfileStatSgmlPostcompressBytes=ltmHttpCompressionProfileStatSgmlPostcompressBytes, ltmWebAcceleration=ltmWebAcceleration, ltmFastHttpProfileResetOnTimeout=ltmFastHttpProfileResetOnTimeout, ltmDosWhiteIpParentName=ltmDosWhiteIpParentName, ltmDnsCacheNumber=ltmDnsCacheNumber, ltmLsnPoolStatHairpinConnectionRequests=ltmLsnPoolStatHairpinConnectionRequests, ltmRuleName=ltmRuleName)
mibBuilder.exportSymbols("F5-BIGIP-LOCAL-MIB", ltmRateFilterStatEntry=ltmRateFilterStatEntry, ltmHttpClassStatOtherPrecompressBytes=ltmHttpClassStatOtherPrecompressBytes, ltmClientSslStatCurCompatConns=ltmClientSslStatCurCompatConns, ltmPoolMemberStatServerPktsIn=ltmPoolMemberStatServerPktsIn, ltmClientSslStatNullBulk=ltmClientSslStatNullBulk, ltmLsnPoolVlanNumber=ltmLsnPoolVlanNumber, ltmFtpProfileStatLoginRequests=ltmFtpProfileStatLoginRequests, ltmHttpCompressionProfileStatPostcompressBytes=ltmHttpCompressionProfileStatPostcompressBytes, ltmHttpClassStatJsPostcompressBytes=ltmHttpClassStatJsPostcompressBytes, ltmVirtualServAuthGroup=ltmVirtualServAuthGroup, ltmPoolActionOnServiceDown=ltmPoolActionOnServiceDown, ltmIiop=ltmIiop, ltmHttpProfileStatCssPrecompressBytes=ltmHttpProfileStatCssPrecompressBytes, ltmVirtualServAuthTable=ltmVirtualServAuthTable, ltmPoolMemberStatServerBytesOut=ltmPoolMemberStatServerBytesOut, ltmUserStatProfileStatTable=ltmUserStatProfileStatTable, ltmVirtualServPersistGroup=ltmVirtualServPersistGroup, ltmRuleEventStatPriority=ltmRuleEventStatPriority, ltmUdpProfileStatEntry=ltmUdpProfileStatEntry, ltmClientSslStatShaDigest=ltmClientSslStatShaDigest, ltmPcpProfileMapLimitPerClient=ltmPcpProfileMapLimitPerClient, ltmDosWhiteIpNumber=ltmDosWhiteIpNumber, ltmFwIpintVirtualStatGroup=ltmFwIpintVirtualStatGroup, ltmTransAddrArpEnabled=ltmTransAddrArpEnabled, ltmClientSslEntry=ltmClientSslEntry, ltmNodeAddrStatServerPktsOut=ltmNodeAddrStatServerPktsOut, ltmCompUriExclName=ltmCompUriExclName, ltmUdpProfileDatagramLb=ltmUdpProfileDatagramLb, ltmIsessionProfileStatOutgoingConnsActiveTot=ltmIsessionProfileStatOutgoingConnsActiveTot, ltmXmlProfileName=ltmXmlProfileName, ltmVirtualServClonePoolGroup=ltmVirtualServClonePoolGroup, ltmHttpProfileServerAgentName=ltmHttpProfileServerAgentName, ltmVirtualAddrStatPvaPktsOut=ltmVirtualAddrStatPvaPktsOut, ltmXmlProfileXpathQueriesIndex=ltmXmlProfileXpathQueriesIndex, ltmClientSslRenegotiatePeriod=ltmClientSslRenegotiatePeriod, ltmVirtualServGtmScore=ltmVirtualServGtmScore, ltmClientSslStatIdeaBulk=ltmClientSslStatIdeaBulk, ltmDnsSecurityStatSoaDrops=ltmDnsSecurityStatSoaDrops, ltmServerSslProfile=ltmServerSslProfile, ltmDnsProfileStatDnsEffectiveRateLimit=ltmDnsProfileStatDnsEffectiveRateLimit, ltmLsnPoolStatTotalZombiePortBlocksCreated=ltmLsnPoolStatTotalZombiePortBlocksCreated, ltmServerSslStatSslv3=ltmServerSslStatSslv3, ltmDnsProfileStatMalicious=ltmDnsProfileStatMalicious, ltmFwPolicyRuleStatContextName=ltmFwPolicyRuleStatContextName, ltmPoolMemberStatEntry=ltmPoolMemberStatEntry, ltmMirrorPortMemberName=ltmMirrorPortMemberName, ltmVsStatusEnabledState=ltmVsStatusEnabledState, ltmCompContTypeInclGroup=ltmCompContTypeInclGroup, ltmIsessionProfileStatDedupInMissHistBucket1m=ltmIsessionProfileStatDedupInMissHistBucket1m, ltmFwRuleStatNumber=ltmFwRuleStatNumber, ltmPersistProfileAcrossServices=ltmPersistProfileAcrossServices, ltmDnsCacheForwardZoneNameServerTable=ltmDnsCacheForwardZoneNameServerTable, ltmPoolMemberPoolName=ltmPoolMemberPoolName, ltmHttpClassUriName=ltmHttpClassUriName, ltmClientSslStatOcspStaplingCertStatusErrors=ltmClientSslStatOcspStaplingCertStatusErrors, ltmDosAttackDataStatDrops=ltmDosAttackDataStatDrops, ltmRateFilterStatBurstBytes=ltmRateFilterStatBurstBytes, ltmHttpClassTable=ltmHttpClassTable, ltmPoolStatConnqServiced=ltmPoolStatConnqServiced, ltmDnsSecurityName=ltmDnsSecurityName, ltmXmlProfileStatNumErrors=ltmXmlProfileStatNumErrors, ltmClientSslStatNonHwAcceleratedConns=ltmClientSslStatNonHwAcceleratedConns, ltmDosApplicationHeavyUrlInclUrl=ltmDosApplicationHeavyUrlInclUrl, ltmHttpProfileStatPlainPrecompressBytes=ltmHttpProfileStatPlainPrecompressBytes, ltmPoolMemberStatTotPvaAssistConn=ltmPoolMemberStatTotPvaAssistConn, ltmFastHttpProfileConfigSource=ltmFastHttpProfileConfigSource, ltmHttpClassStatCssPostcompressBytes=ltmHttpClassStatCssPostcompressBytes, ltmFastL4ProfilePvaAccelMode=ltmFastL4ProfilePvaAccelMode, ltmHttpProfileRamcacheAgingRate=ltmHttpProfileRamcacheAgingRate, ltmAlgLogProfileStartControlElementsIndex=ltmAlgLogProfileStartControlElementsIndex, ltmUdpProfileStatRxnosum=ltmUdpProfileStatRxnosum, ltmCompUriExclEntry=ltmCompUriExclEntry, ltmHttpProfileStatPassthroughExcessServerHeaders=ltmHttpProfileStatPassthroughExcessServerHeaders, ltmLsnPrefixNumber=ltmLsnPrefixNumber, ltmIsessionProfileStatDedupOutHits=ltmIsessionProfileStatDedupOutHits, ltmPcpProfileListeningPort=ltmPcpProfileListeningPort, ltmNodeAddrStatResetStats=ltmNodeAddrStatResetStats, ltmTcpProfileStatSyncacheover=ltmTcpProfileStatSyncacheover, ltmHttpcompContTypeExclContentType=ltmHttpcompContTypeExclContentType, ltmLSNs=ltmLSNs, ltmVirtualServPoolEntry=ltmVirtualServPoolEntry, ltmServerSslStatRc4Bulk=ltmServerSslStatRc4Bulk, ltmAlgLogProfileEndDataElementsTable=ltmAlgLogProfileEndDataElementsTable, ltmUserStatProfileTable=ltmUserStatProfileTable, ltmDosProfileConfigSource=ltmDosProfileConfigSource, ltmSpdyProfileWriteSize=ltmSpdyProfileWriteSize, ltmLsnPoolTable=ltmLsnPoolTable, ltmVsStatusAvailState=ltmVsStatusAvailState, ltmDnsProfileConfigSource=ltmDnsProfileConfigSource, ltmDnsCacheStatSecBogus=ltmDnsCacheStatSecBogus, ltmNodeAddrStatusAddr=ltmNodeAddrStatusAddr, ltmSpdyProfileStatRstStreamFramesSent=ltmSpdyProfileStatRstStreamFramesSent, ltmHttpProfileCompContTypeExcl=ltmHttpProfileCompContTypeExcl, ltmFtpProfileGroup=ltmFtpProfileGroup, ltmVirtualServStatEphemeralPktsIn=ltmVirtualServStatEphemeralPktsIn, ltmIsessionProfileCompressionAdaptive=ltmIsessionProfileCompressionAdaptive, ltmRules=ltmRules, ltmSpdyProfileStatNumber=ltmSpdyProfileStatNumber, ltmPoolStatusDetailReason=ltmPoolStatusDetailReason, ltmVirtualAddrStatClientMaxConns=ltmVirtualAddrStatClientMaxConns, ltmPptpProfile=ltmPptpProfile, ltmLsnPool=ltmLsnPool, ltmFallbackStatusEntry=ltmFallbackStatusEntry, ltmPoolMemberStatConnqAgeMax=ltmPoolMemberStatConnqAgeMax, ltmTcpProfileMinRto=ltmTcpProfileMinRto, ltmDosApplication=ltmDosApplication, ltmPoolMemberStatNumber=ltmPoolMemberStatNumber, ltmRateFilterStatDropTotPkts=ltmRateFilterStatDropTotPkts, ltmFastHttpProfileStatUnbufferedReqs=ltmFastHttpProfileStatUnbufferedReqs, ltmHttpClassStatPlainPostcompressBytes=ltmHttpClassStatPlainPostcompressBytes, ltmIsessionProfileStatDedupOutMissHistBucket64k=ltmIsessionProfileStatDedupOutMissHistBucket64k, ltmPoolMemberEnabledState=ltmPoolMemberEnabledState, ltmServerSslStatResetStats=ltmServerSslStatResetStats, ltmWebaccCacheUriExclNumber=ltmWebaccCacheUriExclNumber, ltmRouteDomainStatTable=ltmRouteDomainStatTable, ltmLsnPrefixLsnPoolBackup=ltmLsnPrefixLsnPoolBackup, ltmPptpProfileStat=ltmPptpProfileStat, ltmRstCauseStatCount=ltmRstCauseStatCount, ltmDnsProfile=ltmDnsProfile, ltmFwIpintRouteDomainStatContextName=ltmFwIpintRouteDomainStatContextName, ltmHttpClassStatTable=ltmHttpClassStatTable, ltmSctpProfileTable=ltmSctpProfileTable, ltmRtspProfileTable=ltmRtspProfileTable, ltmTransAddrStatAddrType=ltmTransAddrStatAddrType, ltmServerSsl=ltmServerSsl, ltmWebAccelerationProfileUriPin=ltmWebAccelerationProfileUriPin, ltmTcpProfileRatePace=ltmTcpProfileRatePace, ltmFwPolicyRuleStatRuleListName=ltmFwPolicyRuleStatRuleListName, ltmNodeAddrName=ltmNodeAddrName, ltmDnsExpressStatDnsxNotifiesRecv=ltmDnsExpressStatDnsxNotifiesRecv, ltmAlgLogProfileStartControlElementsElements=ltmAlgLogProfileStartControlElementsElements, ltmHttpClassHeadTable=ltmHttpClassHeadTable, ltmFwPolicyRuleStatRuleName=ltmFwPolicyRuleStatRuleName, ltmConnPoolProfileMaxReuse=ltmConnPoolProfileMaxReuse, ltmFwIpintRouteDomainStatResetStats=ltmFwIpintRouteDomainStatResetStats, ltmFastL4ProfileStat=ltmFastL4ProfileStat, ltmSpdyProfileStatPingFramesReceived=ltmSpdyProfileStatPingFramesReceived, ltmDosApplicationHeavyUrlAutomaticDetection=ltmDosApplicationHeavyUrlAutomaticDetection, ltmRtspProfileStatNumResponses=ltmRtspProfileStatNumResponses, ltmLsnPoolClientConnectionLimit=ltmLsnPoolClientConnectionLimit, ltmFastL4ProfileHardSyncookie=ltmFastL4ProfileHardSyncookie, ltmAuthProfileStatCurSessions=ltmAuthProfileStatCurSessions, ltmClientSslStatPrematureDisconnects=ltmClientSslStatPrematureDisconnects, ltmHttpCompressionProfileStatEntry=ltmHttpCompressionProfileStatEntry, ltmServerSslStatNotssl=ltmServerSslStatNotssl, ltmDnsServerStat=ltmDnsServerStat, ltmNatVlanGroup=ltmNatVlanGroup, ltmLsnPoolStatPcpMapRequests=ltmLsnPoolStatPcpMapRequests, ltmDos=ltmDos, ltmSnatpoolTransAddrNumber=ltmSnatpoolTransAddrNumber, ltmFastL4ProfileConfigSource=ltmFastL4ProfileConfigSource, ltmSnatStatClientMaxConns=ltmSnatStatClientMaxConns, ltmLsnPoolHairpinMode=ltmLsnPoolHairpinMode, ltmSpdyProfileStatConnectionsAccepted=ltmSpdyProfileStatConnectionsAccepted, ltmHttpCompressionProfileStatName=ltmHttpCompressionProfileStatName, ltmNetworkAttackDataStatDrops=ltmNetworkAttackDataStatDrops, ltmSnatPoolStatServerPktsIn=ltmSnatPoolStatServerPktsIn, ltmClientSslStatDtlsv1=ltmClientSslStatDtlsv1, ltmTransAddrStatServerBytesOut=ltmTransAddrStatServerBytesOut, ltmPcpProfileStatGroup=ltmPcpProfileStatGroup, ltmPptpProfileStatEchoRequests=ltmPptpProfileStatEchoRequests, ltmDnsCacheStatKeyHits=ltmDnsCacheStatKeyHits, ltmLsnPoolPersistencePrefixLengthIpv6=ltmLsnPoolPersistencePrefixLengthIpv6, ltmDnsCacheForwardZoneNameServerPort=ltmDnsCacheForwardZoneNameServerPort, ltmVAddrStatusEntry=ltmVAddrStatusEntry, ltmPoolMemberMonitorState=ltmPoolMemberMonitorState, ltmSnatStatName=ltmSnatStatName, ltmClientSslCertKeyChainOcspStplParams=ltmClientSslCertKeyChainOcspStplParams, ltmFastHttpProfileLayer7=ltmFastHttpProfileLayer7, ltmFlowEvictionPolicyStat=ltmFlowEvictionPolicyStat, ltmDosWhiteIpEntry=ltmDosWhiteIpEntry, ltmPoolMbrStatusEntry=ltmPoolMbrStatusEntry, ltmOcspStaplingParameters=ltmOcspStaplingParameters, ltmClientSslCert=ltmClientSslCert, ltmDosApplicationLatencyBasedUrlMaximumTps=ltmDosApplicationLatencyBasedUrlMaximumTps, ltmNodeAddrStatusNumber=ltmNodeAddrStatusNumber, ltmDnsProfileStatSoaReqs=ltmDnsProfileStatSoaReqs, ltmPoolMinUpMemberAction=ltmPoolMinUpMemberAction, ltmVirtualServProfileTable=ltmVirtualServProfileTable, ltmTcpProfileFinWaitTimeout=ltmTcpProfileFinWaitTimeout, ltmDnsExpressStatTsigBadTime=ltmDnsExpressStatTsigBadTime, ltmSipProfileMaxSize=ltmSipProfileMaxSize, ltmAlgLogProfileInboundAction=ltmAlgLogProfileInboundAction, ltmHttpcompContTypeInclContentType=ltmHttpcompContTypeInclContentType, ltmDnsProfileStatSrvReqs=ltmDnsProfileStatSrvReqs, ltmHttpProfile=ltmHttpProfile, ltmHttpProfileStatRespBucket16k=ltmHttpProfileStatRespBucket16k, ltmDnsHeaderFilterGroup=ltmDnsHeaderFilterGroup, ltmDnsCacheName=ltmDnsCacheName, ltmServerSslStatMidstreamRenegotiations=ltmServerSslStatMidstreamRenegotiations, ltmFtpProfileName=ltmFtpProfileName, ltmFastHttpProfileConnpoolMaxSize=ltmFastHttpProfileConnpoolMaxSize, ltmVirtualServStatHwSyncookies=ltmVirtualServStatHwSyncookies, ltmDnsCacheStatRrsetMisses=ltmDnsCacheStatRrsetMisses, ltmUdpProfileIdleTimeout=ltmUdpProfileIdleTimeout, ltmDnsProfileDefaultName=ltmDnsProfileDefaultName, ltmAuthProfileStatResetStats=ltmAuthProfileStatResetStats, ltmServerSslPeerCertMode=ltmServerSslPeerCertMode, ltmIsessionProfileStatDeflateOutUses=ltmIsessionProfileStatDeflateOutUses, ltmIsessionProfileStatDedupInHitHistBucket512k=ltmIsessionProfileStatDedupInHitHistBucket512k, ltmPoolMemberStatServerTotConns=ltmPoolMemberStatServerTotConns, ltmNodeAddrStatPvaPktsOut=ltmNodeAddrStatPvaPktsOut, ltmFastL4ProfileStatExpires=ltmFastL4ProfileStatExpires, ltmAlgLogProfileEndDataElementsName=ltmAlgLogProfileEndDataElementsName, ltmHttpClassStatV9Reqs=ltmHttpClassStatV9Reqs, ltmRateFilterStatNumber=ltmRateFilterStatNumber, ltmClientSslConfigSource=ltmClientSslConfigSource, ltmLsnPoolStatTotalPortBlockAllocationFailures=ltmLsnPoolStatTotalPortBlockAllocationFailures, ltmBwcPolicyStatBytesDropped=ltmBwcPolicyStatBytesDropped, ltmPcpPrefix=ltmPcpPrefix, ltmHttpProfileStatPassthroughWebSockets=ltmHttpProfileStatPassthroughWebSockets, ltmTcpProfileStatFinWait=ltmTcpProfileStatFinWait, ltmSnatOrigAddrNumber=ltmSnatOrigAddrNumber, ltmTcpProfileSlowStart=ltmTcpProfileSlowStart, ltmTransAddrStatServerMaxConns=ltmTransAddrStatServerMaxConns, ltmHttpClassStatHtmlPostcompressBytes=ltmHttpClassStatHtmlPostcompressBytes, ltmDnsCacheStatTcpPktsIn=ltmDnsCacheStatTcpPktsIn, ltmIiopProfileTimeout=ltmIiopProfileTimeout, ltmRuleEventName=ltmRuleEventName, ltmDosApplicationMinimumLatency=ltmDosApplicationMinimumLatency, ltmFwAdminIpRuleStatGroup=ltmFwAdminIpRuleStatGroup, ltmV6rdProfile=ltmV6rdProfile, ltmHttpcompContTypeInclIndex=ltmHttpcompContTypeInclIndex, ltmDnsProfileStatOtherReqs=ltmDnsProfileStatOtherReqs, ltmLsnPrefixLsnPoolPrefixAddressType=ltmLsnPrefixLsnPoolPrefixAddressType, ltmRespHeadersPermTable=ltmRespHeadersPermTable, ltmPoolStatTable=ltmPoolStatTable, ltmClientSslStatReused=ltmClientSslStatReused, ltmPoolStatPvaTotConns=ltmPoolStatPvaTotConns, ltmIsessionProfileStatDedupInHitHistBucket8k=ltmIsessionProfileStatDedupInHitHistBucket8k, ltmOcspStaplingParametersTimeout=ltmOcspStaplingParametersTimeout, ltmServerSslStatHostnameBypasses=ltmServerSslStatHostnameBypasses, ltmLsnPoolIcmpEcho=ltmLsnPoolIcmpEcho, ltmHttpProfileResponseChunking=ltmHttpProfileResponseChunking, ltmHttpCompressionProfileVaryHeader=ltmHttpCompressionProfileVaryHeader, ltmLsnPrefixLsnPoolGroup=ltmLsnPrefixLsnPoolGroup, ltmRstCauseStat=ltmRstCauseStat, ltmLsnPoolName=ltmLsnPoolName, ltmTcpProfileTimestamps=ltmTcpProfileTimestamps, ltmVirtualServPersistTable=ltmVirtualServPersistTable, ltmIsessionProfileMode=ltmIsessionProfileMode, ltmDnsProfileStatOpcodeQuery=ltmDnsProfileStatOpcodeQuery, ltmVirtualServStatDurationRateExceeded=ltmVirtualServStatDurationRateExceeded, ltmIsessionProfileStatOutgoingConnsIdleCur=ltmIsessionProfileStatOutgoingConnsIdleCur, ltmClientSslCacheTimeout=ltmClientSslCacheTimeout, ltmClientSslStatSessCacheLookups=ltmClientSslStatSessCacheLookups, ltmPcpPrefixProfilePcpNumber=ltmPcpPrefixProfilePcpNumber, ltmVirtualServStatEphemeralPktsOut=ltmVirtualServStatEphemeralPktsOut, ltmConnPoolProfileStatMaxSize=ltmConnPoolProfileStatMaxSize, ltmTcpProfileCloseWaitTimeout=ltmTcpProfileCloseWaitTimeout, ltmServerSslStatRecordsOut=ltmServerSslStatRecordsOut, ltmDosApplicationLatencyIncreaseRate=ltmDosApplicationLatencyIncreaseRate, ltmDosApplicationLatencyBasedIpMinimumTps=ltmDosApplicationLatencyBasedIpMinimumTps, ltmHttpcompUriExclUri=ltmHttpcompUriExclUri)
mibBuilder.exportSymbols("F5-BIGIP-LOCAL-MIB", ltmRtspProfileStatResetStats=ltmRtspProfileStatResetStats, ltmSnatVlanTable=ltmSnatVlanTable, ltmLsnPoolStatTranslationRequestFailures=ltmLsnPoolStatTranslationRequestFailures, ltmPersistProfileDefaultName=ltmPersistProfileDefaultName, ltmIsessionProfileStatLzoOutErrors=ltmIsessionProfileStatLzoOutErrors, ltmDnsCacheStatFwdQueries=ltmDnsCacheStatFwdQueries, ltmXmlProfileNamespaceMappingsName=ltmXmlProfileNamespaceMappingsName, ltmWebAccelerationProfileStatRemoteHits=ltmWebAccelerationProfileStatRemoteHits, ltmPcp=ltmPcp, ltmLsnPrefixLsnPoolBackupTable=ltmLsnPrefixLsnPoolBackupTable, ltmRamUriExclEntry=ltmRamUriExclEntry, ltmRamUriExclGroup=ltmRamUriExclGroup, ltmPoolAvailabilityState=ltmPoolAvailabilityState, ltmVirtualServSfFlags=ltmVirtualServSfFlags, ltmSnatTransAddrName=ltmSnatTransAddrName, ltmSpdyProfileStatNoopFramesSent=ltmSpdyProfileStatNoopFramesSent, ltmPoolMbrStatusNodeName=ltmPoolMbrStatusNodeName, ltmHttpProfileRamcacheObjectMinSize=ltmHttpProfileRamcacheObjectMinSize, ltmUserStatProfile=ltmUserStatProfile, ltmPoolMemberStatCurrentConnsPerSec=ltmPoolMemberStatCurrentConnsPerSec, ltmPersistProfileUieRule=ltmPersistProfileUieRule, ltmBwcPolicyStatPacketsIn=ltmBwcPolicyStatPacketsIn, ltmSctpProfileSecret=ltmSctpProfileSecret, ltmHttpProfileConfigSource=ltmHttpProfileConfigSource, ltmDosApplicationHeavyUrlProtection=ltmDosApplicationHeavyUrlProtection, ltmSpdyProfileStatHeadersFramesReceived=ltmSpdyProfileStatHeadersFramesReceived, ltmHttpProfileStatSgmlPostcompressBytes=ltmHttpProfileStatSgmlPostcompressBytes, ltmVsStatusNumber=ltmVsStatusNumber, ltmFwPolicyRuleStatOverlapper=ltmFwPolicyRuleStatOverlapper, ltmUdpProfileEntry=ltmUdpProfileEntry, ltmDnsCacheMaxConcurrentUdp=ltmDnsCacheMaxConcurrentUdp, ltmDosApplicationHeavyUrlInclIndex=ltmDosApplicationHeavyUrlInclIndex, ltmHttpProfileStatRamcacheCount=ltmHttpProfileStatRamcacheCount, ltmSnatPoolStatServerCurConns=ltmSnatPoolStatServerCurConns, ltmHttpCompressionProfileCpusaverLow=ltmHttpCompressionProfileCpusaverLow, ltmAuthProfile=ltmAuthProfile, ltmSpdyProfileStatFlowsCreated=ltmSpdyProfileStatFlowsCreated, ltmDnsCacheStatUdpBytesIn=ltmDnsCacheStatUdpBytesIn, ltmVirtualServStatCsMinConnDur=ltmVirtualServStatCsMinConnDur, ltmSctpProfileAssocMaxrtx=ltmSctpProfileAssocMaxrtx, ltmPoolMemberStatConnqServiced=ltmPoolMemberStatConnqServiced, ltmVirtualServStatResetStats=ltmVirtualServStatResetStats, ltmNodeAddrStatusEntry=ltmNodeAddrStatusEntry, ltmClientSslStatFullyHwAcceleratedConns=ltmClientSslStatFullyHwAcceleratedConns, ltmFwIpintVirtualStatBlClassName=ltmFwIpintVirtualStatBlClassName, ltmHttpClassStatGetReqs=ltmHttpClassStatGetReqs, ltmWebAccelerationProfileStatRemoteHitBytes=ltmWebAccelerationProfileStatRemoteHitBytes, ltmIsessionProfileStatIncomingConnsErrors=ltmIsessionProfileStatIncomingConnsErrors, ltmNatArpEnabled=ltmNatArpEnabled, ltmServerSslCert=ltmServerSslCert, ltmNodeAddrMonitorRule=ltmNodeAddrMonitorRule, ltmRtspProfileMaxHeaderSize=ltmRtspProfileMaxHeaderSize, ltmClientSslStatRecordsOut=ltmClientSslStatRecordsOut, ltmHttpcompContTypeExclNumber=ltmHttpcompContTypeExclNumber, ltmSpdyProfileStatGoawayFramesSent=ltmSpdyProfileStatGoawayFramesSent, ltmIsessionProfileStatDeflateOutBytesRaw=ltmIsessionProfileStatDeflateOutBytesRaw, ltmVirtualServRuleVirtualServerName=ltmVirtualServRuleVirtualServerName, ltmTransAddrStatAddr=ltmTransAddrStatAddr, ltmHttpClassStatOctetPrecompressBytes=ltmHttpClassStatOctetPrecompressBytes, ltmHttpCompressionProfileStatResetStats=ltmHttpCompressionProfileStatResetStats, ltmDnsQueryFilterGroup=ltmDnsQueryFilterGroup, ltmLsnPoolStatTotalEndPoints=ltmLsnPoolStatTotalEndPoints, ltmSnatPoolName=ltmSnatPoolName, ltmHttpClassUriNumber=ltmHttpClassUriNumber, ltmSctpProfileLinkQosToPeer=ltmSctpProfileLinkQosToPeer, ltmPoolStatTotPvaAssistConn=ltmPoolStatTotPvaAssistConn, ltmSctpProfileProxyBufferHigh=ltmSctpProfileProxyBufferHigh, ltmStreamProfileNumber=ltmStreamProfileNumber, ltmPoolMonitorRule=ltmPoolMonitorRule, ltmTcpProfileStatConnfails=ltmTcpProfileStatConnfails, ltmAlgLogProfileConfigSource=ltmAlgLogProfileConfigSource, ltmSipProfileGroup=ltmSipProfileGroup, ltmSnatStatClientCurConns=ltmSnatStatClientCurConns, ltmIsessionProfileStatLzoInBytesOpt=ltmIsessionProfileStatLzoInBytesOpt, ltmCompUriInclUri=ltmCompUriInclUri, ltmPptpProfileStatResetStats=ltmPptpProfileStatResetStats, ltmServerSslChain=ltmServerSslChain, ltmServerSslStatMaxCompatConns=ltmServerSslStatMaxCompatConns, ltmNodeAddrStatServerMaxConns=ltmNodeAddrStatServerMaxConns, ltmDosProfileNumber=ltmDosProfileNumber, ltmDnsExpressStatName=ltmDnsExpressStatName, ltmNatOrigAddr=ltmNatOrigAddr, ltmWebAccelerationProfile=ltmWebAccelerationProfile, ltmCompContTypeExclContentType=ltmCompContTypeExclContentType, ltmSnatTransAddrType=ltmSnatTransAddrType, ltmHttpCompressionProfileMinSize=ltmHttpCompressionProfileMinSize, ltmDnsExpressStatTsigMissing=ltmDnsExpressStatTsigMissing, ltmFtpProfileStat=ltmFtpProfileStat, ltmNatStatServerPktsOut=ltmNatStatServerPktsOut, ltmSipProfileStat=ltmSipProfileStat, ltmXmlProfileNumber=ltmXmlProfileNumber, ltmRstCauseStatIndex=ltmRstCauseStatIndex, ltmTransAddrStatServerTotConns=ltmTransAddrStatServerTotConns, ltmClientSslStatRc4Bulk=ltmClientSslStatRc4Bulk, ltmFastL4ProfileLinkQosToClient=ltmFastL4ProfileLinkQosToClient, ltmClientSslStatDestinationIpBypasses=ltmClientSslStatDestinationIpBypasses, ltmPcpProfileTable=ltmPcpProfileTable, ltmPptpProfileStatTable=ltmPptpProfileStatTable, ltmIiopProfileStatNumFragments=ltmIiopProfileStatNumFragments, ltmLsnPrefixLsnPoolTable=ltmLsnPrefixLsnPoolTable, ltmVirtualServTranslatePort=ltmVirtualServTranslatePort, ltmClientSslCrlfile=ltmClientSslCrlfile, ltmTcpProfileEntry=ltmTcpProfileEntry, ltmRateFilter=ltmRateFilter, ltmUdp=ltmUdp, ltmDnsServerStatXfrNotifyFailed=ltmDnsServerStatXfrNotifyFailed, ltmDosApplicationTpsBasedUrlMinimumTps=ltmDosApplicationTpsBasedUrlMinimumTps, ltmDnsCacheStatNameserverHits=ltmDnsCacheStatNameserverHits, ltmSpdyProfileStatSynStreamFramesSent=ltmSpdyProfileStatSynStreamFramesSent, ltmClientSslFwdpBypassSipWList=ltmClientSslFwdpBypassSipWList, ltmSctpProfileStatConnects=ltmSctpProfileStatConnects, ltmLsnPoolEntry=ltmLsnPoolEntry, ltmPersistProfileTable=ltmPersistProfileTable, ltmServerSslStatIdeaBulk=ltmServerSslStatIdeaBulk, ltmIiopProfileStatNumErrors=ltmIiopProfileStatNumErrors, ltmIiopProfileName=ltmIiopProfileName, ltmDnsServerStatGroup=ltmDnsServerStatGroup, ltmStreamProfileStatReplaces=ltmStreamProfileStatReplaces, ltmLsnPoolVlanLsnPoolName=ltmLsnPoolVlanLsnPoolName, ltmFwRuleStatRuleStatType=ltmFwRuleStatRuleStatType, ltmDnsProfileStatToDns=ltmDnsProfileStatToDns, ltmSpdyProfileTable=ltmSpdyProfileTable, ltmAlgLogProfileStartDataElements=ltmAlgLogProfileStartDataElements, ltmNodeAddrStatPvaBytesOut=ltmNodeAddrStatPvaBytesOut, ltmDosApplicationMaximumLatency=ltmDosApplicationMaximumLatency, ltmXmlProfileStat=ltmXmlProfileStat, ltmRateFilterStatBytesQueued=ltmRateFilterStatBytesQueued, ltmRuleEventStatMaxCycles=ltmRuleEventStatMaxCycles, ltmWebaccCacheUriPinIndex=ltmWebaccCacheUriPinIndex, bigipLocalTMGroups=bigipLocalTMGroups, ltmHttpProfileCompressCpusaverHigh=ltmHttpProfileCompressCpusaverHigh, ltmDnsProfileEntry=ltmDnsProfileEntry, ltmNatStatServerPktsIn=ltmNatStatServerPktsIn, ltmVirtualAddrStatClientBytesIn=ltmVirtualAddrStatClientBytesIn, ltmRateFilterStatDroppedBytes=ltmRateFilterStatDroppedBytes, ltmDns=ltmDns, ltmAlgLogProfileDescription=ltmAlgLogProfileDescription, ltmTransAddrAddrType=ltmTransAddrAddrType, ltmV6rdProfileGroup=ltmV6rdProfileGroup, ltmNatName=ltmNatName, ltmFtpProfileEntry=ltmFtpProfileEntry, ltmVsHttpClassNumber=ltmVsHttpClassNumber, ltmFastL4ProfileDefaultName=ltmFastL4ProfileDefaultName, ltmPersistProfileEntry=ltmPersistProfileEntry, ltmPoolDisabledParentType=ltmPoolDisabledParentType, ltmFastHttpProfileHttp11CloseWorkarounds=ltmFastHttpProfileHttp11CloseWorkarounds, ltmXmlProfileStatEntry=ltmXmlProfileStatEntry, ltmPptpProfileEntry=ltmPptpProfileEntry, ltmFwPolicyRuleStatEntry=ltmFwPolicyRuleStatEntry, ltmLsnPoolStatPcpErrorsUnavailableResource=ltmLsnPoolStatPcpErrorsUnavailableResource, ltmDnsCacheStatFailureResolv=ltmDnsCacheStatFailureResolv, ltmDnsCacheType=ltmDnsCacheType, ltmPoolMemberStat=ltmPoolMemberStat, ltmSnatType=ltmSnatType, ltmFtpProfileStatDownloadRequests=ltmFtpProfileStatDownloadRequests, ltmClientSslStatRc2Bulk=ltmClientSslStatRc2Bulk, ltmDnsProfileStatAuthenticatedData=ltmDnsProfileStatAuthenticatedData, ltmServerSslStatName=ltmServerSslStatName, ltmSnatpoolTransAddrTable=ltmSnatpoolTransAddrTable, ltmPoolMbrStatusPoolName=ltmPoolMbrStatusPoolName, ltmPoolMbrStatusAddrType=ltmPoolMbrStatusAddrType, ltmHttpClassStatOctetPostcompressBytes=ltmHttpClassStatOctetPostcompressBytes, ltmSipProfileNumber=ltmSipProfileNumber, ltmPoolDisallowNat=ltmPoolDisallowNat, ltmDnsSecurityEntry=ltmDnsSecurityEntry, ltmPoolStatPvaPktsIn=ltmPoolStatPvaPktsIn, ltmStreamProfileStatTable=ltmStreamProfileStatTable, ltmSnatStatClientBytesIn=ltmSnatStatClientBytesIn, ltmSctpProfileSndbuf=ltmSctpProfileSndbuf, ltmFastL4ProfileLooseInitiation=ltmFastL4ProfileLooseInitiation, ltmIsessionProfileEntry=ltmIsessionProfileEntry, ltmNodeAddrStatusTable=ltmNodeAddrStatusTable, ltmPoolStatusNumber=ltmPoolStatusNumber, ltmDosWhiteIpNetmaskType=ltmDosWhiteIpNetmaskType, ltmServerSslStatRecordsIn=ltmServerSslStatRecordsIn, ltmFtpProfileStatGroup=ltmFtpProfileStatGroup, ltmNatStat=ltmNatStat, ltmClientSslStatDhRsaKeyxchg=ltmClientSslStatDhRsaKeyxchg, ltmHttpProfileStatResp2xxCnt=ltmHttpProfileStatResp2xxCnt, ltmDnsCacheStatQueries=ltmDnsCacheStatQueries, ltmServerSslStatSslv2=ltmServerSslStatSslv2, ltmRtspProfileMulticastRedirect=ltmRtspProfileMulticastRedirect, ltmSnatVlanSnatName=ltmSnatVlanSnatName, ltmBwcPolicyStatBytesIn=ltmBwcPolicyStatBytesIn, ltmDnsProfileStatRcodeNoerror=ltmDnsProfileStatRcodeNoerror, ltmHttpClassStatRespBucket64k=ltmHttpClassStatRespBucket64k, ltmClientSslDefaultName=ltmClientSslDefaultName, ltmUserStatProfileStatName=ltmUserStatProfileStatName, ltmTcpProfileLinkQosToClient=ltmTcpProfileLinkQosToClient, ltmDnsSecurityStatADrops=ltmDnsSecurityStatADrops, ltmIsessionProfileStatDedupInMissHistBucket256k=ltmIsessionProfileStatDedupInMissHistBucket256k, ltmVirtualServPoolTable=ltmVirtualServPoolTable, ltmHttpClassHeadEntry=ltmHttpClassHeadEntry, ltmPersistProfileConfigSource=ltmPersistProfileConfigSource, ltmPoolStatConnqAgeEdm=ltmPoolStatConnqAgeEdm, ltmPersistProfileCookieHashOffset=ltmPersistProfileCookieHashOffset, ltmServerSslMode=ltmServerSslMode, ltmHttpProfilePassthroughExcessServerHeaders=ltmHttpProfilePassthroughExcessServerHeaders, ltmPoolMemberStatConnqDepth=ltmPoolMemberStatConnqDepth, ltmHttpClassCookTable=ltmHttpClassCookTable, ltmVirtualServSourceAddressTranslationType=ltmVirtualServSourceAddressTranslationType, ltmFastL4ProfileStatAccepts=ltmFastL4ProfileStatAccepts, ltmHttpClassEntry=ltmHttpClassEntry, ltmPptpProfileConfigSource=ltmPptpProfileConfigSource, ltmClientSslStatSniRejects=ltmClientSslStatSniRejects, ltmTcpProfileGroup=ltmTcpProfileGroup, ltmRtspProfileStatNumber=ltmRtspProfileStatNumber, ltmLsnLog=ltmLsnLog, ltmClientSslFwdpBypassHnWList=ltmClientSslFwdpBypassHnWList, ltmXmlProfileGroup=ltmXmlProfileGroup, ltmCompContTypeExclEntry=ltmCompContTypeExclEntry, ltmClientSslCertKeyChainGroup=ltmClientSslCertKeyChainGroup, ltmHttpProfileStatVideoPrecompressBytes=ltmHttpProfileStatVideoPrecompressBytes, ltmLsnPoolStatLogFailures=ltmLsnPoolStatLogFailures, ltmServerSslStatDecryptedBytesOut=ltmServerSslStatDecryptedBytesOut, ltmFallbackStatusCode=ltmFallbackStatusCode, ltmNodeAddrScreenName=ltmNodeAddrScreenName, ltmLsnLogProfileStartOutboundElementsTable=ltmLsnLogProfileStartOutboundElementsTable, ltmHttpClassStatName=ltmHttpClassStatName, ltmFastL4ProfileRttFromServer=ltmFastL4ProfileRttFromServer, ltmUserStatProfileStatFieldValue=ltmUserStatProfileStatFieldValue, ltmNodeAddrStatAddrType=ltmNodeAddrStatAddrType, ltmTcpProfileStatResetStats=ltmTcpProfileStatResetStats, ltmServerSslRenegotiatePeriod=ltmServerSslRenegotiatePeriod, ltmVirtualModuleScoreModuleType=ltmVirtualModuleScoreModuleType, ltmIsessionProfileStatDeflateOutErrors=ltmIsessionProfileStatDeflateOutErrors, ltmRtspProfileStatEntry=ltmRtspProfileStatEntry, ltmIsessionProfileStatDedupInHitBytes=ltmIsessionProfileStatDedupInHitBytes, ltmPcpProfileMapRecycleDelay=ltmPcpProfileMapRecycleDelay, ltmFastL4ProfileExplicitFlowMigration=ltmFastL4ProfileExplicitFlowMigration, ltmHttpClassStatXmlPostcompressBytes=ltmHttpClassStatXmlPostcompressBytes, ltmPoolMemberDynamicRatio=ltmPoolMemberDynamicRatio, ltmRamUriInclTable=ltmRamUriInclTable, ltmVirtualServStatClientBytesOut=ltmVirtualServStatClientBytesOut, ltmAlgLogProfileStartControlElementsGroup=ltmAlgLogProfileStartControlElementsGroup, ltmHttpProfileStatPassthroughConnect=ltmHttpProfileStatPassthroughConnect, ltmVirtualAddrStatusReason=ltmVirtualAddrStatusReason, ltmTcpProfileNagle=ltmTcpProfileNagle, ltmPcpPrefixEntry=ltmPcpPrefixEntry, PYSNMP_MODULE_ID=bigipLocalTM, ltmHttpClassCookGroup=ltmHttpClassCookGroup, ltmVirtualAddrEnabledState=ltmVirtualAddrEnabledState, ltmIsessionProfileStatResetStats=ltmIsessionProfileStatResetStats, ltmNetworkAttackDataStatEntry=ltmNetworkAttackDataStatEntry, ltmMirrorPortMemberGroup=ltmMirrorPortMemberGroup, ltmDnsCacheRouteDomainName=ltmDnsCacheRouteDomainName, ltmOcspStaplingParametersNumber=ltmOcspStaplingParametersNumber, ltmRtspProfileConfigSource=ltmRtspProfileConfigSource, ltmHttpProfileCompressMinSize=ltmHttpProfileCompressMinSize, ltmFastHttpProfileStatPostReqs=ltmFastHttpProfileStatPostReqs, ltmDnsExpressStatIxfrQueries=ltmDnsExpressStatIxfrQueries, ltmHttpCompressionProfileStatOtherPostcompressBytes=ltmHttpCompressionProfileStatOtherPostcompressBytes, ltmHttpClassStatPostReqs=ltmHttpClassStatPostReqs, ltmTcpProfileHighPerfTcpExt=ltmTcpProfileHighPerfTcpExt)
mibBuilder.exportSymbols("F5-BIGIP-LOCAL-MIB", ltmDnsSecurityQueryTypeInclusion=ltmDnsSecurityQueryTypeInclusion, ltmNetworkAttackDataStatDrops1m=ltmNetworkAttackDataStatDrops1m, ltmIsessionProfileStatDedupInHitHistBucket128k=ltmIsessionProfileStatDedupInHitHistBucket128k, ltmDnsCacheStatRrsetUpdates=ltmDnsCacheStatRrsetUpdates, ltmNatOrigAddrType=ltmNatOrigAddrType, ltmDnsCacheForwardZoneNameServerAddrType=ltmDnsCacheForwardZoneNameServerAddrType, ltmIsessionProfileCompressionBzip2=ltmIsessionProfileCompressionBzip2, ltmDnsHeaderFilterOpcodeExclusion=ltmDnsHeaderFilterOpcodeExclusion, ltmFwIpintVirtualStatTable=ltmFwIpintVirtualStatTable, ltmDnsCacheForwardZoneNameServerAddr=ltmDnsCacheForwardZoneNameServerAddr, ltmTcp=ltmTcp, ltmIsessionProfileStatIncomingConnsActiveTot=ltmIsessionProfileStatIncomingConnsActiveTot, ltmUdpProfileStatRxbaddgram=ltmUdpProfileStatRxbaddgram, ltmHttpProfileCompressCpusaver=ltmHttpProfileCompressCpusaver, ltmFlowEvictionPolicyStatTable=ltmFlowEvictionPolicyStatTable, ltmUdpProfileGroup=ltmUdpProfileGroup, ltmLsnPoolVlanGroup=ltmLsnPoolVlanGroup, ltmWebAccelerationProfileStatCacheMisses=ltmWebAccelerationProfileStatCacheMisses, ltmPoolMember=ltmPoolMember, ltmHttpProfileStatRamcacheHits=ltmHttpProfileStatRamcacheHits, ltmClientSslAuthenticateDepth=ltmClientSslAuthenticateDepth, ltmPcpPrefixProfilePcpPcpPrefixName=ltmPcpPrefixProfilePcpPcpPrefixName, ltmTransAddrName=ltmTransAddrName, ltmDnsProfileStatFastDnsQueries=ltmDnsProfileStatFastDnsQueries, ltmAlgLogProfileGroup=ltmAlgLogProfileGroup, ltmVirtualServPool=ltmVirtualServPool, ltmStreamProfileStatNumber=ltmStreamProfileStatNumber, ltmDnsCache=ltmDnsCache, ltmDnsProfileStatName=ltmDnsProfileStatName, ltmHttpProfileStatRamcacheSize=ltmHttpProfileStatRamcacheSize, ltmRouteDomainStatClientPktsIn=ltmRouteDomainStatClientPktsIn, ltmTcpProfileTimeWaitRecycle=ltmTcpProfileTimeWaitRecycle, ltmSnatOrigAddrAddr=ltmSnatOrigAddrAddr, ltmServerSslFwdpEnabled=ltmServerSslFwdpEnabled, ltmHttpProfileRamUriPin=ltmHttpProfileRamUriPin, ltmFastHttpProfileUncleanShutdown=ltmFastHttpProfileUncleanShutdown, ltmHttpProfilePassthroughPipeline=ltmHttpProfilePassthroughPipeline, ltmPoolStatPvaPktsOut=ltmPoolStatPvaPktsOut, ltmFastHttpProfileMaxHeaderSize=ltmFastHttpProfileMaxHeaderSize, ltmFastHttpProfileStatClientAccepts=ltmFastHttpProfileStatClientAccepts, ltmIsessionProfileStat=ltmIsessionProfileStat, ltmPoolMemberStatPoolName=ltmPoolMemberStatPoolName, ltmDnsCacheMsgCacheSize=ltmDnsCacheMsgCacheSize, ltmHttpCompressionProfileStatJsPrecompressBytes=ltmHttpCompressionProfileStatJsPrecompressBytes, ltmVirtualServRuleEntry=ltmVirtualServRuleEntry, ltmPcpPrefixProfilePcp=ltmPcpPrefixProfilePcp, ltmSctpProfileRcvOrdered=ltmSctpProfileRcvOrdered, ltmIsessionProfileStatNullInUses=ltmIsessionProfileStatNullInUses, ltmDnsSecurityStatResetStats=ltmDnsSecurityStatResetStats, ltmVirtualAddrAvailabilityState=ltmVirtualAddrAvailabilityState, ltmIsessionProfileStatDedupOutErrors=ltmIsessionProfileStatDedupOutErrors, ltmVirtualServPersistVsName=ltmVirtualServPersistVsName, ltmHttpCompressionProfileStatHtmlPrecompressBytes=ltmHttpCompressionProfileStatHtmlPrecompressBytes, ltmPoolActiveMemberCnt=ltmPoolActiveMemberCnt, ltmNatUnitId=ltmNatUnitId, ltmHttpCompressionProfileUriIncl=ltmHttpCompressionProfileUriIncl, ltmMirrorPortGroup=ltmMirrorPortGroup, ltmIiopProfileStatResetStats=ltmIiopProfileStatResetStats, ltmPoolMemberMonitorRule=ltmPoolMemberMonitorRule, ltmDnsProfileStatRecursionDesired=ltmDnsProfileStatRecursionDesired, ltmRstCauseStatResetStats=ltmRstCauseStatResetStats, ltmDnsCacheStatUdpPktsOut=ltmDnsCacheStatUdpPktsOut, ltmVirtualServIpProto=ltmVirtualServIpProto, ltmSpdyProfileProtocolVersionsName=ltmSpdyProfileProtocolVersionsName, ltmTransAddrStatName=ltmTransAddrStatName, ltmPolicies=ltmPolicies, ltmFwPolicyRuleStatActualRule=ltmFwPolicyRuleStatActualRule, ltmPcpProfileStat=ltmPcpProfileStat, ltmRouteDomainStatClientPktsOut=ltmRouteDomainStatClientPktsOut, ltmWebaccCacheUriPinTable=ltmWebaccCacheUriPinTable, ltmSpdyProfileInsertHeaderName=ltmSpdyProfileInsertHeaderName, ltmRouteDomainStatServerMaxConns=ltmRouteDomainStatServerMaxConns, ltmServerSslStatTotCompatConns=ltmServerSslStatTotCompatConns, ltmDnsProfileDns64Prefix=ltmDnsProfileDns64Prefix, ltmPoolMemberStatAddr=ltmPoolMemberStatAddr, ltmNatStatResetStats=ltmNatStatResetStats, ltmFwRuleStatTable=ltmFwRuleStatTable, ltmAuthProfileStatFailureResults=ltmAuthProfileStatFailureResults, ltmUserStatProfileStatResetStats=ltmUserStatProfileStatResetStats, ltmLsnPrefixLsnPoolBackupGroup=ltmLsnPrefixLsnPoolBackupGroup, ltmDosApplicationTpsBasedIpMaximumTps=ltmDosApplicationTpsBasedIpMaximumTps, ltmDnsHeaderFilterEntry=ltmDnsHeaderFilterEntry, ltmFwRuleStatActualRule=ltmFwRuleStatActualRule, ltmDnsExpressStatTsigBadKey=ltmDnsExpressStatTsigBadKey, ltmSpdyProfileProtocolVersionsGroup=ltmSpdyProfileProtocolVersionsGroup, ltmFallbackStatusNumber=ltmFallbackStatusNumber, ltmHttpProfileStatHtmlPrecompressBytes=ltmHttpProfileStatHtmlPrecompressBytes, ltmTcpProfileRcvwnd=ltmTcpProfileRcvwnd, ltmVirtualServStatPvaPktsIn=ltmVirtualServStatPvaPktsIn, ltmVirtualAddrStatPvaTotConns=ltmVirtualAddrStatPvaTotConns, ltmHttpClassHeadIndex=ltmHttpClassHeadIndex, ltmFwPolicyRuleStatRuleStatType=ltmFwPolicyRuleStatRuleStatType, ltmOcspStaplingParametersGroup=ltmOcspStaplingParametersGroup, ltmVirtualAddrStatus=ltmVirtualAddrStatus, ltmHttpProfileCompressKeepAcceptEncoding=ltmHttpProfileCompressKeepAcceptEncoding, ltmDnsCacheStatNumber=ltmDnsCacheStatNumber, ltmTcpProfileStatRxbadsum=ltmTcpProfileStatRxbadsum, ltmHttpClassStatAudioPrecompressBytes=ltmHttpClassStatAudioPrecompressBytes, ltmTcpProfileStat=ltmTcpProfileStat, ltmIsessionProfileStatNullInErrors=ltmIsessionProfileStatNullInErrors, ltmNatTable=ltmNatTable, ltmServerSslCrlfile=ltmServerSslCrlfile, ltmBwcPolicyStat=ltmBwcPolicyStat, ltmDnsCacheRrsetCacheSize=ltmDnsCacheRrsetCacheSize, ltmHttpProfileStatPassthroughOversizeServerHeaders=ltmHttpProfileStatPassthroughOversizeServerHeaders, ltmTcpProfileProxyBufferHigh=ltmTcpProfileProxyBufferHigh, ltmTcpProfileIpTosToClient=ltmTcpProfileIpTosToClient, ltmStreamProfileTable=ltmStreamProfileTable, ltmDnsProfileStatHints=ltmDnsProfileStatHints, ltmLsnPoolNumber=ltmLsnPoolNumber, ltmLsnPoolStatResetStats=ltmLsnPoolStatResetStats, ltmPoolMemberStatCurSessions=ltmPoolMemberStatCurSessions, ltmServerSslStatInsecureRenegotiationRejects=ltmServerSslStatInsecureRenegotiationRejects, ltmV6rdProfileName=ltmV6rdProfileName, ltmVirtualAddrTable=ltmVirtualAddrTable, ltmHttpProfileName=ltmHttpProfileName, ltmDosApplicationTpsBasedDeEscalationPeriod=ltmDosApplicationTpsBasedDeEscalationPeriod, ltmPcpProfileEntry=ltmPcpProfileEntry, ltmHttpCompressionProfileGzipWindowsize=ltmHttpCompressionProfileGzipWindowsize, ltmIsessionProfileStatDedupOutMissHistBucket256k=ltmIsessionProfileStatDedupOutMissHistBucket256k, ltmEncCookiesEntry=ltmEncCookiesEntry, ltmConnPoolProfileMaxAge=ltmConnPoolProfileMaxAge, ltmNodeAddrNewSessionEnable=ltmNodeAddrNewSessionEnable, ltmLsnPoolTranslationPortRangeLow=ltmLsnPoolTranslationPortRangeLow, ltmSpdyProfileStatNoopFramesReceived=ltmSpdyProfileStatNoopFramesReceived, ltmHttpProfileStatResp5xxCnt=ltmHttpProfileStatResp5xxCnt, ltmHttpProfilePassthroughUnknownMethod=ltmHttpProfilePassthroughUnknownMethod, ltmFlowEvictionPolicyStatGroup=ltmFlowEvictionPolicyStatGroup, ltmConnPoolProfileConfigSource=ltmConnPoolProfileConfigSource, ltmDnsProfileStatRejects=ltmDnsProfileStatRejects, ltmOcspStaplingParametersTrustedCa=ltmOcspStaplingParametersTrustedCa, ltmNatVlanTransAddrType=ltmNatVlanTransAddrType, ltmRtspProfileStat=ltmRtspProfileStat, ltmStreamProfileSource=ltmStreamProfileSource, ltmRamUriInclIndex=ltmRamUriInclIndex, ltmHttpCompressionProfileBufferSize=ltmHttpCompressionProfileBufferSize, ltmIsessionProfileStatDedupInMissHistBucket8k=ltmIsessionProfileStatDedupInMissHistBucket8k, ltmWebaccCacheUriExclEntry=ltmWebaccCacheUriExclEntry, ltmClientSslGroup=ltmClientSslGroup, ltmXmlProfileNamespaceMappingsMappingPrefix=ltmXmlProfileNamespaceMappingsMappingPrefix, ltmPoolStatPvaBytesOut=ltmPoolStatPvaBytesOut, ltmNodeAddrStatusParentType=ltmNodeAddrStatusParentType, ltmWebAccelerationProfileStatResetStats=ltmWebAccelerationProfileStatResetStats, ltmHttpCompressionProfileStatImagePrecompressBytes=ltmHttpCompressionProfileStatImagePrecompressBytes, ltmEncCookiesIndex=ltmEncCookiesIndex, ltmNetworkAttackDataStatVsName=ltmNetworkAttackDataStatVsName, ltmFlowEvictionPolicyStatPolicyName=ltmFlowEvictionPolicyStatPolicyName, ltmPoolStatServerPktsIn=ltmPoolStatServerPktsIn, ltmNatEntry=ltmNatEntry, ltmPoolMemberMonitorStatus=ltmPoolMemberMonitorStatus, ltmLsnPoolLogPublisher=ltmLsnPoolLogPublisher, ltmNodeAddrStatNumber=ltmNodeAddrStatNumber, ltmPoolStatServerTotConns=ltmPoolStatServerTotConns, ltmPptpProfileStatEntry=ltmPptpProfileStatEntry, ltmClientSslStatDecryptedBytesOut=ltmClientSslStatDecryptedBytesOut, ltmWebaccCacheUriInclIndex=ltmWebaccCacheUriInclIndex, ltmFtpProfileStatNumber=ltmFtpProfileStatNumber, ltmAlgLogProfileName=ltmAlgLogProfileName, ltmPcpProfileConfigSource=ltmPcpProfileConfigSource, ltmSpdyProfileStatV3StreamsMax=ltmSpdyProfileStatV3StreamsMax, ltmTcpProfileStatOpen=ltmTcpProfileStatOpen, ltmNodeAddrStatServerCurConns=ltmNodeAddrStatServerCurConns, ltmIsessionProfileStatDedupOutHitHistBucket16k=ltmIsessionProfileStatDedupOutHitHistBucket16k, ltmDnsProfileStatFastDnsRespRf=ltmDnsProfileStatFastDnsRespRf, ltmHttpProfileStatPassthroughUnknownMethod=ltmHttpProfileStatPassthroughUnknownMethod, ltmHttpProfileGroup=ltmHttpProfileGroup, ltmDosApplicationTpsBasedSiteMaximumTps=ltmDosApplicationTpsBasedSiteMaximumTps, ltmLsnPoolStatActivePortBlocks=ltmLsnPoolStatActivePortBlocks, ltmClientSslStatNumber=ltmClientSslStatNumber, ltmSnatPoolEntry=ltmSnatPoolEntry, ltmRamUriInclEntry=ltmRamUriInclEntry, ltmBwcPolicyStatTotalPolicies=ltmBwcPolicyStatTotalPolicies, ltmDnsExpressStatTable=ltmDnsExpressStatTable, ltmBwcPolicyStatResetStats=ltmBwcPolicyStatResetStats, ltmWebAccelerationProfileCacheObjectMaxSize=ltmWebAccelerationProfileCacheObjectMaxSize, ltmWebaccCacheUriOverNumber=ltmWebaccCacheUriOverNumber, ltmSnatVlanEntry=ltmSnatVlanEntry, ltmRamUriInclNumber=ltmRamUriInclNumber, ltmDNS=ltmDNS, ltmDnsSecurityStatName=ltmDnsSecurityStatName, ltmPoolLbMode=ltmPoolLbMode, ltmDnsCacheMaxConcurrentTcp=ltmDnsCacheMaxConcurrentTcp, ltmHttpClassStatJsPrecompressBytes=ltmHttpClassStatJsPrecompressBytes, ltmServerSslStatPeercertInvalid=ltmServerSslStatPeercertInvalid, ltmVirtualServSourceAddressTranslationPool=ltmVirtualServSourceAddressTranslationPool, ltmRouteDomainStatConnectionFlowMiss=ltmRouteDomainStatConnectionFlowMiss, ltmTransAddrGroup=ltmTransAddrGroup, ltmLsnPoolStatPcpPeerResponses=ltmLsnPoolStatPcpPeerResponses, ltmFastHttpProfileStatGroup=ltmFastHttpProfileStatGroup, ltmFastHttpProfileGroup=ltmFastHttpProfileGroup, ltmClientSslModsslmethods=ltmClientSslModsslmethods, ltmHttpProfileTable=ltmHttpProfileTable, ltmVirtualServTable=ltmVirtualServTable, ltmXmlProfileXpathQueriesString=ltmXmlProfileXpathQueriesString, ltmPoolLinkQosToServer=ltmPoolLinkQosToServer, ltmVirtualAddrStatAddrType=ltmVirtualAddrStatAddrType, ltmLsnPoolStatTable=ltmLsnPoolStatTable, ltmFastL4ProfileIdleTimeout=ltmFastL4ProfileIdleTimeout, ltmHttpProfileCompressVaryHeader=ltmHttpProfileCompressVaryHeader, ltmVirtualServPoolRuleName=ltmVirtualServPoolRuleName, ltmDosApplicationTpsBasedMaximumPreventionDuration=ltmDosApplicationTpsBasedMaximumPreventionDuration, ltmDnsCacheStatGroup=ltmDnsCacheStatGroup, ltmDnsProfileStatGtmRewrites=ltmDnsProfileStatGtmRewrites, ltmSpdyProfileGroup=ltmSpdyProfileGroup, ltmXmlProfileNamespaceMappingsMappingNamespace=ltmXmlProfileNamespaceMappingsMappingNamespace, ltmDnsCacheAnswerDefaultZones=ltmDnsCacheAnswerDefaultZones, ltmIsessionProfileStatDedupOutMisses=ltmIsessionProfileStatDedupOutMisses, ltmVirtualServProfileProfileName=ltmVirtualServProfileProfileName, ltmServerSslGenericAlert=ltmServerSslGenericAlert, ltmHttpProfileStatOtherPostcompressBytes=ltmHttpProfileStatOtherPostcompressBytes, ltmNatStatNumber=ltmNatStatNumber, ltmSpdyProfileStatWindowUpdateFramesReceived=ltmSpdyProfileStatWindowUpdateFramesReceived, ltmConnPoolProfileEntry=ltmConnPoolProfileEntry, ltmIsessionProfileStatDedupInHitHistBucket16k=ltmIsessionProfileStatDedupInHitHistBucket16k, ltmPoolStatName=ltmPoolStatName, ltmIsessionProfileStatNullOutBytesRaw=ltmIsessionProfileStatNullOutBytesRaw, ltmHttpCompressionProfileDefaultName=ltmHttpCompressionProfileDefaultName, ltmDosApplicationTpsBasedSiteRateLimiting=ltmDosApplicationTpsBasedSiteRateLimiting, ltmSnatOrigAddrAddrType=ltmSnatOrigAddrAddrType, ltmWebAccelerationProfileStatCacheMissBytesAll=ltmWebAccelerationProfileStatCacheMissBytesAll, ltmIiopProfileStatNumResponses=ltmIiopProfileStatNumResponses, ltmStreamProfileTarget=ltmStreamProfileTarget, ltmServerSslStatCurConns=ltmServerSslStatCurConns, ltmWebaccCacheUriPinNumber=ltmWebaccCacheUriPinNumber, ltmLsnPrefixLsnPoolLsnPoolName=ltmLsnPrefixLsnPoolLsnPoolName, ltmVirtualServStatEntry=ltmVirtualServStatEntry, ltmWebAccelerationProfileStatInterStripeHitBytes=ltmWebAccelerationProfileStatInterStripeHitBytes, ltmFastL4Profile=ltmFastL4Profile, ltmServerSslStatHandshakeFailures=ltmServerSslStatHandshakeFailures, ltmFallbackStatusIndex=ltmFallbackStatusIndex, ltmRateFilterPname=ltmRateFilterPname, ltmWebAccelerationProfileStatTable=ltmWebAccelerationProfileStatTable, ltmSctpProfileStatGroup=ltmSctpProfileStatGroup, ltmTcpProfileMptcpCsumVerify=ltmTcpProfileMptcpCsumVerify, ltmSnatPoolStatServerPktsOut=ltmSnatPoolStatServerPktsOut, ltmDnsCacheStatNameserverEvictions=ltmDnsCacheStatNameserverEvictions, ltmDosApplicationLatencyBasedEscalationPeriod=ltmDosApplicationLatencyBasedEscalationPeriod, ltmSnatStatTable=ltmSnatStatTable, ltmRstCauseStatRstCause=ltmRstCauseStatRstCause, ltmOcspStaplingParametersSignerKey=ltmOcspStaplingParametersSignerKey, ltmVirtualServStatEphemeralBytesIn=ltmVirtualServStatEphemeralBytesIn, ltmXml=ltmXml, ltmSctpProfileStatAccepts=ltmSctpProfileStatAccepts, ltmFwRuleStatLastHitTime=ltmFwRuleStatLastHitTime, ltmIsessionProfileStatNumber=ltmIsessionProfileStatNumber, ltmSpdyProfileStatSpdyResponseFrames=ltmSpdyProfileStatSpdyResponseFrames, ltmIsessionProfileStatDedupOutMissHistBucket4k=ltmIsessionProfileStatDedupOutMissHistBucket4k, ltmSnatPoolStatServerBytesOut=ltmSnatPoolStatServerBytesOut, ltmClientSslMaxRenegotiationsPerMin=ltmClientSslMaxRenegotiationsPerMin, ltmDnsSecurityTable=ltmDnsSecurityTable, ltmPoolLinkQosToClient=ltmPoolLinkQosToClient, ltmPptpProfileLogPublisher=ltmPptpProfileLogPublisher, ltmServerSslStatDestinationIpBypasses=ltmServerSslStatDestinationIpBypasses, ltmLsnPoolPersistencePrefixLengthIpv4=ltmLsnPoolPersistencePrefixLengthIpv4)
mibBuilder.exportSymbols("F5-BIGIP-LOCAL-MIB", ltmPcpProfileStatPcpErrorsUnavailableResource=ltmPcpProfileStatPcpErrorsUnavailableResource, ltmFastHttpProfileName=ltmFastHttpProfileName, ltmAlgLogProfileDefaultName=ltmAlgLogProfileDefaultName, ltmVirtualServStatClientMaxConns=ltmVirtualServStatClientMaxConns, ltmFastHttpProfileDefaultName=ltmFastHttpProfileDefaultName, ltmHttpClassStatVideoPostcompressBytes=ltmHttpClassStatVideoPostcompressBytes, ltmRouteDomainStatClientBytesOut=ltmRouteDomainStatClientBytesOut, ltmSnatpoolTransAddrTransAddrName=ltmSnatpoolTransAddrTransAddrName, ltmHttpcompUriInclIndex=ltmHttpcompUriInclIndex, ltmServerSslStatBadRecords=ltmServerSslStatBadRecords, ltmDnsProfileStatNumber=ltmDnsProfileStatNumber, ltmSnatOrigAddrTable=ltmSnatOrigAddrTable, ltmPptpProfileDefaultName=ltmPptpProfileDefaultName, ltmFwRuleStatGroup=ltmFwRuleStatGroup, ltmPoolSimpleTimeout=ltmPoolSimpleTimeout, ltmLsnPoolStatTotalPortBlockDeallocations=ltmLsnPoolStatTotalPortBlockDeallocations, ltmDnsCacheStatUdpPktsIn=ltmDnsCacheStatUdpPktsIn, ltmClientSslFwdpBypassEnabled=ltmClientSslFwdpBypassEnabled, ltmLsnPoolStatPersistenceMappingFailures=ltmLsnPoolStatPersistenceMappingFailures, ltmHttpClassNumber=ltmHttpClassNumber, ltmWebAccelerationProfileConfigSource=ltmWebAccelerationProfileConfigSource, ltmServerSslCacheSize=ltmServerSslCacheSize, ltmVirtualServStatPvaPktsOut=ltmVirtualServStatPvaPktsOut, ltmSnatListedEnabledVlans=ltmSnatListedEnabledVlans, ltmSpdyProfileStatFlowsCurrent=ltmSpdyProfileStatFlowsCurrent, ltmTcpProfileInitCwnd=ltmTcpProfileInitCwnd, ltmLsnPoolStatTotalZombiePortBlockConnectionsKilled=ltmLsnPoolStatTotalZombiePortBlockConnectionsKilled, ltmHttpClassStatRamcacheHits=ltmHttpClassStatRamcacheHits, ltmVirtualServStatCycleCount=ltmVirtualServStatCycleCount, ltmSpdyProfileProtocolVersionsIndex=ltmSpdyProfileProtocolVersionsIndex, ltmRamUriPinNumber=ltmRamUriPinNumber, ltmPoolDisallowSnat=ltmPoolDisallowSnat, ltmCompUriExclNumber=ltmCompUriExclNumber, ltmIiopProfileAbortOnTimeout=ltmIiopProfileAbortOnTimeout, ltmSnatVlanGroup=ltmSnatVlanGroup, ltmSnatPoolStatResetStats=ltmSnatPoolStatResetStats, ltmSnatpoolTransAddrEntry=ltmSnatpoolTransAddrEntry, ltmHttpClassStatResp4xxCnt=ltmHttpClassStatResp4xxCnt, ltmHttpCompressionProfileStatAudioPrecompressBytes=ltmHttpCompressionProfileStatAudioPrecompressBytes, ltmClientSslStatDssKeyxchg=ltmClientSslStatDssKeyxchg, ltmPptpProfileName=ltmPptpProfileName, ltmDnsExpressStatDnsxXfrMsgs=ltmDnsExpressStatDnsxXfrMsgs, ltmDnsCacheForwardZoneNameServerNumber=ltmDnsCacheForwardZoneNameServerNumber, ltmSipProfileStatResetStats=ltmSipProfileStatResetStats, ltmHttpProfileCompUriExcl=ltmHttpProfileCompUriExcl, ltmPptpProfileStatFailedCalls=ltmPptpProfileStatFailedCalls, ltmSpdyProfileProtocolVersions=ltmSpdyProfileProtocolVersions, ltmNodeAddrStatPvaPktsIn=ltmNodeAddrStatPvaPktsIn, ltmTcpProfileEarlyRetransmit=ltmTcpProfileEarlyRetransmit, ltmUdpProfileStatResetStats=ltmUdpProfileStatResetStats, ltmFastHttpProfileServerCloseTimeout=ltmFastHttpProfileServerCloseTimeout, ltmAuthProfileNumber=ltmAuthProfileNumber, ltmVirtualModuleScoreGroup=ltmVirtualModuleScoreGroup, ltmHttpProfileStatAudioPrecompressBytes=ltmHttpProfileStatAudioPrecompressBytes, ltmVirtualServProfileEntry=ltmVirtualServProfileEntry, ltmPptp=ltmPptp, ltmPcpProfileGroup=ltmPcpProfileGroup, ltmClientSslStatName=ltmClientSslStatName, ltmLsnPrefixLsnPoolBackupPrefixAddress=ltmLsnPrefixLsnPoolBackupPrefixAddress, ltmServerSslAuthenticateDepth=ltmServerSslAuthenticateDepth, ltmVirtualAddrStatNumber=ltmVirtualAddrStatNumber, ltmAlgLogProfileStartControlElementsName=ltmAlgLogProfileStartControlElementsName, ltmMirrorPortNumber=ltmMirrorPortNumber, ltmDnsCacheStatFailureServer=ltmDnsCacheStatFailureServer, ltmClientSslStatPeercertInvalid=ltmClientSslStatPeercertInvalid, ltmSpdyProfileStatHttpRequestBytes=ltmSpdyProfileStatHttpRequestBytes, ltmVAddrStatusTable=ltmVAddrStatusTable, ltmHttpcompUriInclNumber=ltmHttpcompUriInclNumber, ltmDnsCacheStatMsgHits=ltmDnsCacheStatMsgHits, ltmDnsCacheStatTcpBytesOut=ltmDnsCacheStatTcpBytesOut, ltmIsessionProfileDeduplication=ltmIsessionProfileDeduplication, ltmHttpClassStatEntry=ltmHttpClassStatEntry, ltmVirtualServVlanGroup=ltmVirtualServVlanGroup, ltmClientSslGenericAlert=ltmClientSslGenericAlert, ltmFwPolicyRuleStatGroup=ltmFwPolicyRuleStatGroup, ltmHttpProfileNumber=ltmHttpProfileNumber, ltmDnsProfileDns64Mode=ltmDnsProfileDns64Mode, ltmDnsProfileAvrDnsStatSampleRate=ltmDnsProfileAvrDnsStatSampleRate, ltmTcpProfileMptcpDebug=ltmTcpProfileMptcpDebug, ltmPoolStatusParentType=ltmPoolStatusParentType, ltmTransAddrUdpIdleTimeout=ltmTransAddrUdpIdleTimeout, ltmHttpProfilePassthroughOversizeClientHeaders=ltmHttpProfilePassthroughOversizeClientHeaders, ltmSipProfileStatRequests=ltmSipProfileStatRequests, ltmTcpProfileStatRxooseg=ltmTcpProfileStatRxooseg, ltmNodeAddrStatCurrentConnsPerSec=ltmNodeAddrStatCurrentConnsPerSec, ltmHttpClassStatImagePrecompressBytes=ltmHttpClassStatImagePrecompressBytes, ltmIsessionProfileStatNullOutBytesOpt=ltmIsessionProfileStatNullOutBytesOpt, ltmDnsExpressStatAxfrQueries=ltmDnsExpressStatAxfrQueries, ltmLsnLogProfileEndOutboundElementsIndex=ltmLsnLogProfileEndOutboundElementsIndex, ltmCompUriInclGroup=ltmCompUriInclGroup, ltmPptpProfileStatStartReplies=ltmPptpProfileStatStartReplies, ltmWebaccCacheUriOverIndex=ltmWebaccCacheUriOverIndex, ltmRamUriPinUri=ltmRamUriPinUri, ltmHttpCompressionProfileNumber=ltmHttpCompressionProfileNumber, ltmTransAddrStatTable=ltmTransAddrStatTable, ltmUdpProfileStatAcceptfails=ltmUdpProfileStatAcceptfails, ltmDosApplicationTpsBasedSiteClientSideDefense=ltmDosApplicationTpsBasedSiteClientSideDefense, ltmDnsSecurityNumber=ltmDnsSecurityNumber, ltmVirtualServFallbackPersist=ltmVirtualServFallbackPersist, ltmRuleTable=ltmRuleTable, ltmIsessionProfileStatDedupInMissHistBucket2k=ltmIsessionProfileStatDedupInMissHistBucket2k, ltmDosApplicationGroup=ltmDosApplicationGroup, ltmWebAccelerationProfileCacheAgingRate=ltmWebAccelerationProfileCacheAgingRate, ltmDnsProfileStatCnameReqs=ltmDnsProfileStatCnameReqs, ltmHttpProfileStatAudioPostcompressBytes=ltmHttpProfileStatAudioPostcompressBytes, ltmHttpProfileStatPassthroughIrule=ltmHttpProfileStatPassthroughIrule, ltmVirtualServStatus=ltmVirtualServStatus, ltmHttpProfileStatPassthroughPipeline=ltmHttpProfileStatPassthroughPipeline, ltmDnsProfileStatAReqs=ltmDnsProfileStatAReqs, ltmDosApplicationLatencyBasedSiteMaximumTps=ltmDosApplicationLatencyBasedSiteMaximumTps, ltmAlgLogProfileStartDataElementsElements=ltmAlgLogProfileStartDataElementsElements, ltmServerSslOptions=ltmServerSslOptions, ltmPoolMemberConnLimit=ltmPoolMemberConnLimit, ltmVirtualServStatTotRequests=ltmVirtualServStatTotRequests, ltmServerSslStatSessCacheInvalidations=ltmServerSslStatSessCacheInvalidations, ltmHttpProfileStatResp4xxCnt=ltmHttpProfileStatResp4xxCnt, ltmFastL4ProfileSoftSyncookie=ltmFastL4ProfileSoftSyncookie, ltmTcpProfileStatAcceptfails=ltmTcpProfileStatAcceptfails, ltmBwcPolicyStatBytesPerSec=ltmBwcPolicyStatBytesPerSec, ltmBwcPolicyStatTimeDataCollected=ltmBwcPolicyStatTimeDataCollected, ltmHttpProfileStatPassthroughOversizeClientHeaders=ltmHttpProfileStatPassthroughOversizeClientHeaders, ltmConnPoolProfileStatTable=ltmConnPoolProfileStatTable, ltmOcspStaplingParametersEntry=ltmOcspStaplingParametersEntry, ltmDnsCacheStatFwdResponses=ltmDnsCacheStatFwdResponses, ltmVirtualServStatTotPvaAssistConn=ltmVirtualServStatTotPvaAssistConn, ltmIsessionProfileStatDedupOutMissHistBucket16k=ltmIsessionProfileStatDedupOutMissHistBucket16k, ltmDnsProfileDnsLastAction=ltmDnsProfileDnsLastAction, ltmUserStat=ltmUserStat, ltmHttpClassDefaultName=ltmHttpClassDefaultName, ltmDnsCacheForwardZoneNameServer=ltmDnsCacheForwardZoneNameServer, ltmWebAccelerationProfileEntry=ltmWebAccelerationProfileEntry, ltmVirtualAddrStatClientPktsOut=ltmVirtualAddrStatClientPktsOut, ltmDnsCacheStatRrsetHits=ltmDnsCacheStatRrsetHits, ltmDosApplicationLatencyBasedUrlTpsIncreaseRate=ltmDosApplicationLatencyBasedUrlTpsIncreaseRate, ltmPoolMinUpMembers=ltmPoolMinUpMembers, ltmPcpProfileStatResetStats=ltmPcpProfileStatResetStats, ltmVirtualAddrEntry=ltmVirtualAddrEntry, ltmFwIpintRouteDomainStatGroup=ltmFwIpintRouteDomainStatGroup, ltmVsStatusParentType=ltmVsStatusParentType, ltmVirtualServStatCurrPvaAssistConn=ltmVirtualServStatCurrPvaAssistConn, ltmLsnPoolMemberCount=ltmLsnPoolMemberCount, ltmWebaccCacheUriInclEntry=ltmWebaccCacheUriInclEntry, ltmAuthProfileStat=ltmAuthProfileStat, ltmRamUriExclName=ltmRamUriExclName, ltmIsessionProfileStatDedupInHitHistBucket64k=ltmIsessionProfileStatDedupInHitHistBucket64k, ltmAuthProfileName=ltmAuthProfileName, ltmVirtualModuleScoreScore=ltmVirtualModuleScoreScore, ltmPoolStatusEnabledState=ltmPoolStatusEnabledState, ltmIsessionProfileStatDedupInHitHistBucket1m=ltmIsessionProfileStatDedupInHitHistBucket1m, ltmXmlProfileXpathQueriesName=ltmXmlProfileXpathQueriesName, ltmLsnPoolStatActiveClientsReachedLimit=ltmLsnPoolStatActiveClientsReachedLimit, ltmLsnPrefixLsnPool=ltmLsnPrefixLsnPool, ltmPoolMemberAddrType=ltmPoolMemberAddrType, ltmIsessionProfileStatBzip2OutErrors=ltmIsessionProfileStatBzip2OutErrors, ltmPptpProfileGroup=ltmPptpProfileGroup, ltmTcpProfileMptcpRxmitmin=ltmTcpProfileMptcpRxmitmin, ltmDosApplicationLatencyBasedUrlMinimumTps=ltmDosApplicationLatencyBasedUrlMinimumTps, ltmLsnPoolVlanTable=ltmLsnPoolVlanTable, ltmVirtualAddrSfFlags=ltmVirtualAddrSfFlags, ltmClientSslStatResetStats=ltmClientSslStatResetStats, ltmDnsProfileStatRcodeRefused=ltmDnsProfileStatRcodeRefused, ltmXmlProfileAbortOnError=ltmXmlProfileAbortOnError, ltmClientSslStatOcspStaplingConns=ltmClientSslStatOcspStaplingConns, ltmTcpProfileStatAbandons=ltmTcpProfileStatAbandons, ltmIiopProfileEntry=ltmIiopProfileEntry, ltmDnsQueryFilter=ltmDnsQueryFilter, ltmLsnPrefixLsnPoolBackupEntry=ltmLsnPrefixLsnPoolBackupEntry, ltmLsnPrefixLsnPoolBackupNumber=ltmLsnPrefixLsnPoolBackupNumber, ltmAlgLogProfileEndDataElementsNumber=ltmAlgLogProfileEndDataElementsNumber, ltmClientSslStatSessCacheCurEntries=ltmClientSslStatSessCacheCurEntries, ltmServerSslDropUntrustCa=ltmServerSslDropUntrustCa, ltmTcpProfileMptcpCsum=ltmTcpProfileMptcpCsum, ltmPcpProfileNumber=ltmPcpProfileNumber, ltmIiopProfileDefaultName=ltmIiopProfileDefaultName, ltmUserStatProfileStatGroup=ltmUserStatProfileStatGroup, ltmIsessionProfileStatDedupOutBytesOpt=ltmIsessionProfileStatDedupOutBytesOpt, ltmHttpClassStatRespBucket32k=ltmHttpClassStatRespBucket32k, ltmClientSslStatReuseFailed=ltmClientSslStatReuseFailed, ltmPersistProfileTimeout=ltmPersistProfileTimeout, ltmDosApplicationHeavyUrlInclGroup=ltmDosApplicationHeavyUrlInclGroup, ltmHttpClassStatV9Resp=ltmHttpClassStatV9Resp, ltmSipProfileName=ltmSipProfileName, ltmServerSslStatAdhKeyxchg=ltmServerSslStatAdhKeyxchg, ltmRateFilterEntry=ltmRateFilterEntry, ltmSnatPoolTable=ltmSnatPoolTable, ltmDnsCacheForwardZoneNameServerCacheName=ltmDnsCacheForwardZoneNameServerCacheName, ltmPoolMemberGroup=ltmPoolMemberGroup, ltmDosWhiteIpNetmask=ltmDosWhiteIpNetmask, ltmAuthProfileStatNumber=ltmAuthProfileStatNumber, ltmLsnPoolStatName=ltmLsnPoolStatName, ltmFastL4ProfileStatAcceptfails=ltmFastL4ProfileStatAcceptfails, ltmClientSslStatMd5Digest=ltmClientSslStatMd5Digest, ltmFastHttpProfileTable=ltmFastHttpProfileTable, ltmFallbackStatusTable=ltmFallbackStatusTable, ltmHttpcompContTypeInclNumber=ltmHttpcompContTypeInclNumber, ltmVsStatusEntry=ltmVsStatusEntry, ltmVirtualServClonePoolPoolName=ltmVirtualServClonePoolPoolName, ltmDnsProfileStatFastDnsResponses=ltmDnsProfileStatFastDnsResponses, ltmClientSslCertKeyChainNumber=ltmClientSslCertKeyChainNumber, ltmCompUriInclNumber=ltmCompUriInclNumber, ltmHttpProfileStatNullCompressBytes=ltmHttpProfileStatNullCompressBytes, ltmIsessionProfileStatDedupInMissHistBucket128k=ltmIsessionProfileStatDedupInMissHistBucket128k, ltmVAddrStatusNumber=ltmVAddrStatusNumber, ltmBwcPolicyStatName=ltmBwcPolicyStatName, ltmDosAttackDataStatWlCount=ltmDosAttackDataStatWlCount, ltmIiopProfileStatEntry=ltmIiopProfileStatEntry, ltmFastL4ProfileStatSyncookAccept=ltmFastL4ProfileStatSyncookAccept, ltmNodeAddrStatTable=ltmNodeAddrStatTable, ltmPcpProfileStatNumber=ltmPcpProfileStatNumber, ltmDosApplicationHeavyUrlExclUrl=ltmDosApplicationHeavyUrlExclUrl, ltmNetworkAttackDataStatNumber=ltmNetworkAttackDataStatNumber, ltmPoolStatusTable=ltmPoolStatusTable, ltmUserStatProfileStatFieldId=ltmUserStatProfileStatFieldId, ltmDnsProfileStatDnsConfiguredObjects=ltmDnsProfileStatDnsConfiguredObjects, ltmPoolMemberStatConnqAgeEma=ltmPoolMemberStatConnqAgeEma, ltmVAddrStatusEnabledState=ltmVAddrStatusEnabledState, ltmV6rd=ltmV6rd, ltmDosApplicationHeavyUrlExcl=ltmDosApplicationHeavyUrlExcl, ltmRespHeadersPermGroup=ltmRespHeadersPermGroup, ltmUserStatProfileConfigSource=ltmUserStatProfileConfigSource, ltmDnsCacheStatUdpCurConns=ltmDnsCacheStatUdpCurConns, ltmServerSslStatDhRsaKeyxchg=ltmServerSslStatDhRsaKeyxchg, ltmPcpPrefixProfilePcpTable=ltmPcpPrefixProfilePcpTable, ltmDnsCacheStatRrsetEvictions=ltmDnsCacheStatRrsetEvictions, ltmFastHttpProfileHeaderInsert=ltmFastHttpProfileHeaderInsert, ltmLsnPoolMode=ltmLsnPoolMode, ltmVirtualServStatusReason=ltmVirtualServStatusReason, ltmHttpClassStatHtmlPrecompressBytes=ltmHttpClassStatHtmlPrecompressBytes, ltmOcspStaplingParametersCacheErrorTimeout=ltmOcspStaplingParametersCacheErrorTimeout, ltmUserStatProfileStat=ltmUserStatProfileStat, ltmRateFilterStatDropRandBytes=ltmRateFilterStatDropRandBytes, ltmLsnLogProfileEndOutboundElementsNumber=ltmLsnLogProfileEndOutboundElementsNumber, ltmDosApplicationLatencyBasedSiteMinimumTps=ltmDosApplicationLatencyBasedSiteMinimumTps, ltmFwPolicyRuleStatTable=ltmFwPolicyRuleStatTable, ltmHttpClassProfileHead=ltmHttpClassProfileHead, ltmPoolMemberPort=ltmPoolMemberPort, ltmServerSslConfigSource=ltmServerSslConfigSource, ltmSnatTable=ltmSnatTable, ltmClientSslSessionMirroring=ltmClientSslSessionMirroring, ltmFwPolicyRuleStat=ltmFwPolicyRuleStat, ltmWebAccelerationProfileStatInterStripeSize=ltmWebAccelerationProfileStatInterStripeSize, ltmPoolMbrStatusEnabledState=ltmPoolMbrStatusEnabledState, ltmDosApplicationHeavyUrlExclTable=ltmDosApplicationHeavyUrlExclTable, ltmDnsProfileGroup=ltmDnsProfileGroup, ltmClientSslCacheSize=ltmClientSslCacheSize, ltmHttpProfileTruncatedRedirects=ltmHttpProfileTruncatedRedirects, ltmSnatStatEntry=ltmSnatStatEntry, ltmHttpcompContTypeExclName=ltmHttpcompContTypeExclName, ltmNat=ltmNat, ltmServerSslStatTable=ltmServerSslStatTable, ltmHttpProfileStatGetReqs=ltmHttpProfileStatGetReqs, ltmVirtualServStatClientSlowKilled=ltmVirtualServStatClientSlowKilled, ltmLsnLogProfileQuotaExceededAction=ltmLsnLogProfileQuotaExceededAction, ltmPoolStatConnqAgeEma=ltmPoolStatConnqAgeEma)
mibBuilder.exportSymbols("F5-BIGIP-LOCAL-MIB", ltmNetworkAttackDataStatStats1h=ltmNetworkAttackDataStatStats1h, ltmNetworkAttackDataStatStats=ltmNetworkAttackDataStatStats, ltmRuleEventEventType=ltmRuleEventEventType, ltmHttpCompressionProfileCpusaver=ltmHttpCompressionProfileCpusaver, ltmDnsCacheStatTable=ltmDnsCacheStatTable, ltmWebAccelerationProfileDefaultName=ltmWebAccelerationProfileDefaultName, ltmPoolStatNumber=ltmPoolStatNumber, ltmPersistProfileMask=ltmPersistProfileMask, ltmSctpProfileStatRxbadcookie=ltmSctpProfileStatRxbadcookie, ltmNatStatServerMaxConns=ltmNatStatServerMaxConns, ltmRouteDomainStatName=ltmRouteDomainStatName, ltmSctpProfileName=ltmSctpProfileName, ltmAuth=ltmAuth, ltmVirtualAddrStatGroup=ltmVirtualAddrStatGroup, ltmLsnLogProfileStartOutboundElements=ltmLsnLogProfileStartOutboundElements, ltmUdpProfileConfigSource=ltmUdpProfileConfigSource, ltmFastL4ProfileStatSyncookReject=ltmFastL4ProfileStatSyncookReject, ltmHttpProfileEntry=ltmHttpProfileEntry, ltmClientSslFwdpLookupByIpaddrPort=ltmClientSslFwdpLookupByIpaddrPort, ltmServerSslAlertTimeout=ltmServerSslAlertTimeout, ltmClientSslStatInsecureHandshakeAccepts=ltmClientSslStatInsecureHandshakeAccepts, ltmDosApplicationHeavyUrlExclNumber=ltmDosApplicationHeavyUrlExclNumber, ltmDosApplicationLatencyBasedMode=ltmDosApplicationLatencyBasedMode, ltmServerSslFwdpBypassEnabled=ltmServerSslFwdpBypassEnabled, ltmLsnLogProfileEndOutboundElementsTable=ltmLsnLogProfileEndOutboundElementsTable, ltmTcpProfileMptcpTimeout=ltmTcpProfileMptcpTimeout, ltmSctpProfileProxyBufferLow=ltmSctpProfileProxyBufferLow, ltmDnsHeaderFilterName=ltmDnsHeaderFilterName, ltmHttpClassConfigSource=ltmHttpClassConfigSource, ltmSctpProfile=ltmSctpProfile, ltmFastL4ProfileStatName=ltmFastL4ProfileStatName, ltmIsessionProfileStatDedupOutHitHistBucketLarge=ltmIsessionProfileStatDedupOutHitHistBucketLarge, ltmIsessionProfileStatOutgoingConnsPassthruTot=ltmIsessionProfileStatOutgoingConnsPassthruTot, ltmDnsProfileTable=ltmDnsProfileTable, ltmPoolStatConnqAllAgeEma=ltmPoolStatConnqAllAgeEma, ltmRuleEventStat=ltmRuleEventStat, ltmServerSslStatPeercertNone=ltmServerSslStatPeercertNone, ltmTcpProfileIdleTimeout=ltmTcpProfileIdleTimeout, ltmDnsProfileStatFastDnsRespNx=ltmDnsProfileStatFastDnsRespNx, ltmIiopProfileGroup=ltmIiopProfileGroup, ltmClientSslNumber=ltmClientSslNumber, ltmCompUriInclTable=ltmCompUriInclTable, ltmWebAccelerationProfileCacheMaxAge=ltmWebAccelerationProfileCacheMaxAge, ltmTcpProfileMptcpNojoindssack=ltmTcpProfileMptcpNojoindssack, ltmHttpProfileStatEntry=ltmHttpProfileStatEntry, ltmUdpProfileStatTxdgram=ltmUdpProfileStatTxdgram, ltmAlgLogProfileEndControlElementsIndex=ltmAlgLogProfileEndControlElementsIndex, ltmTcpProfileMptcp=ltmTcpProfileMptcp, ltmIsessionProfileStatNullOutErrors=ltmIsessionProfileStatNullOutErrors, ltmFwIpintRouteDomainStatBlClassName=ltmFwIpintRouteDomainStatBlClassName, ltmPoolMemberStatConnqAgeHead=ltmPoolMemberStatConnqAgeHead, ltmBwcPolicyStatPacketsPassed=ltmBwcPolicyStatPacketsPassed, ltmPoolMemberAvailabilityState=ltmPoolMemberAvailabilityState, ltmClientSslStatHandshakeFailures=ltmClientSslStatHandshakeFailures, ltmRstCauseStatTable=ltmRstCauseStatTable, ltmSpdyProfileStatSpdyRequestFrames=ltmSpdyProfileStatSpdyRequestFrames, ltmNodeAddrStatServerTotConns=ltmNodeAddrStatServerTotConns, ltmIiopProfilePersistObjectKey=ltmIiopProfilePersistObjectKey, ltmClientSslStatOcspStaplingOcspConnFailures=ltmClientSslStatOcspStaplingOcspConnFailures, ltmNodeAddrStat=ltmNodeAddrStat, ltmNetworkAttackDataStatStats1m=ltmNetworkAttackDataStatStats1m, ltmVirtualAddrStatPvaBytesIn=ltmVirtualAddrStatPvaBytesIn, ltmPcpPrefixName=ltmPcpPrefixName, ltmNodeAddrStatusGroup=ltmNodeAddrStatusGroup, ltmRtspProfileStatNumInterleaved=ltmRtspProfileStatNumInterleaved, ltmDosApplicationHeavyUrlExclProfileName=ltmDosApplicationHeavyUrlExclProfileName, ltmCompContTypeExclIndex=ltmCompContTypeExclIndex, ltmDnsExpressStatXfrQueriesAclFailed=ltmDnsExpressStatXfrQueriesAclFailed, ltmIsessionProfileStatDedupInHitHistBucket4k=ltmIsessionProfileStatDedupInHitHistBucket4k, ltmCompUriExclUri=ltmCompUriExclUri, ltmSctpProfileStatEntry=ltmSctpProfileStatEntry, ltmDnsProfileStatGtmConfiguredObjects=ltmDnsProfileStatGtmConfiguredObjects, ltmConnPoolProfileStatEntry=ltmConnPoolProfileStatEntry, ltmSpdyProfileStatConnectionsCurrent=ltmSpdyProfileStatConnectionsCurrent, ltmRouteDomainStatNumber=ltmRouteDomainStatNumber, ltmLsnLogProfileEndInboundAction=ltmLsnLogProfileEndInboundAction, ltmUdpProfileStatRxdgram=ltmUdpProfileStatRxdgram, ltmDnsCacheForwardZoneEntry=ltmDnsCacheForwardZoneEntry, ltmSctpProfileStatName=ltmSctpProfileStatName, ltmPptpProfileStatOutgoingCallReplies=ltmPptpProfileStatOutgoingCallReplies, ltmHttpCompressionProfileContTypeIncl=ltmHttpCompressionProfileContTypeIncl, ltmFastHttpProfileStatResp4xxCnt=ltmFastHttpProfileStatResp4xxCnt, ltmHttpClassStatRamcacheMisses=ltmHttpClassStatRamcacheMisses, ltmXmlProfileTable=ltmXmlProfileTable, ltmLsnPrefixLsnPoolLsnPrefixName=ltmLsnPrefixLsnPoolLsnPrefixName, ltmDosProfileGroup=ltmDosProfileGroup, ltmServerSslCacheTimeout=ltmServerSslCacheTimeout, ltmLsnPoolPersistenceMode=ltmLsnPoolPersistenceMode, ltmXmlProfileStatNumMalformedDocuments=ltmXmlProfileStatNumMalformedDocuments, ltmFastL4ProfileLooseClose=ltmFastL4ProfileLooseClose, ltmSipProfileInsertRecordRoute=ltmSipProfileInsertRecordRoute, ltmStreamProfileConfigSource=ltmStreamProfileConfigSource, ltmDnsCacheForwardZoneCacheName=ltmDnsCacheForwardZoneCacheName, ltmClientSslCertKeyChainName=ltmClientSslCertKeyChainName, ltmUdpProfileStat=ltmUdpProfileStat, ltmPoolMemberDisabledParentType=ltmPoolMemberDisabledParentType, ltmLsnPoolStatPcpErrorsOther=ltmLsnPoolStatPcpErrorsOther, ltmVirtualServPersistProfileName=ltmVirtualServPersistProfileName, ltmNetworkAttackDataStatProfileName=ltmNetworkAttackDataStatProfileName, ltmVAddrStatusAvailState=ltmVAddrStatusAvailState, ltmIsessionProfileStatDedupInErrors=ltmIsessionProfileStatDedupInErrors, ltmHttpProfileHeaderInsert=ltmHttpProfileHeaderInsert, ltmOcspStaplingParametersUrl=ltmOcspStaplingParametersUrl, ltmTcpProfileMd5SigPass=ltmTcpProfileMd5SigPass, ltmClientSslPeerCertMode=ltmClientSslPeerCertMode, ltmClientSsl=ltmClientSsl, ltmHttpProfileStatPostcompressBytes=ltmHttpProfileStatPostcompressBytes, ltmVsStatusTable=ltmVsStatusTable, ltmPoolStatConnqAgeHead=ltmPoolStatConnqAgeHead, ltmDnsProfileStatGtmRateRejectedRequests=ltmDnsProfileStatGtmRateRejectedRequests, ltmVirtualServStatEphemeralCurConns=ltmVirtualServStatEphemeralCurConns, ltmFastL4ProfileTcpStripSack=ltmFastL4ProfileTcpStripSack, ltmConnPoolProfileDefaultName=ltmConnPoolProfileDefaultName, ltmClientSslStatEdhDssKeyxchg=ltmClientSslStatEdhDssKeyxchg, ltmVirtualServStatNumber=ltmVirtualServStatNumber, ltmPptpProfileStatOutgoingCallRequests=ltmPptpProfileStatOutgoingCallRequests, ltmCompUriInclName=ltmCompUriInclName, ltmRuleEventStatTable=ltmRuleEventStatTable, ltmVirtualServSnatpoolName=ltmVirtualServSnatpoolName, ltmHttpCompressionProfileStatXmlPostcompressBytes=ltmHttpCompressionProfileStatXmlPostcompressBytes, ltmFwRuleStatContextName=ltmFwRuleStatContextName, ltmHttpCompressionProfileGroup=ltmHttpCompressionProfileGroup, ltmDosApplicationHeavyUrlIncl=ltmDosApplicationHeavyUrlIncl, ltmWebAccelerationProfileCacheSize=ltmWebAccelerationProfileCacheSize, ltmServerSslStatCurCompatConns=ltmServerSslStatCurCompatConns, ltmVirtualServPoolNumber=ltmVirtualServPoolNumber, ltmDosApplicationLatencyBasedUrlRateLimiting=ltmDosApplicationLatencyBasedUrlRateLimiting, ltmIsessionProfileStatDedupInHitHistBucket32k=ltmIsessionProfileStatDedupInHitHistBucket32k, ltmSpdyProfileStatRstStreamFramesReceived=ltmSpdyProfileStatRstStreamFramesReceived, ltmRamUriInclUri=ltmRamUriInclUri, ltmHttpProfileRedirectRewrite=ltmHttpProfileRedirectRewrite, ltmDosApplicationTpsBasedUrlRateLimiting=ltmDosApplicationTpsBasedUrlRateLimiting, ltmClientSslCiphers=ltmClientSslCiphers, ltmHttpClassStatXmlPrecompressBytes=ltmHttpClassStatXmlPrecompressBytes, ltmRstCauseStatNumber=ltmRstCauseStatNumber, ltmHttpProfileBasicAuthRealm=ltmHttpProfileBasicAuthRealm, ltmHttpProfileOneConnect=ltmHttpProfileOneConnect, ltmPoolStatConnqAllDepth=ltmPoolStatConnqAllDepth, ltmVirtualServListedEnabledVlans=ltmVirtualServListedEnabledVlans, ltmDnsProfileStatZoneIxfr=ltmDnsProfileStatZoneIxfr, ltmVirtualAddrUnitId=ltmVirtualAddrUnitId, ltmDosWhiteIpAddressType=ltmDosWhiteIpAddressType, ltmFastHttpProfileConnpoolMinSize=ltmFastHttpProfileConnpoolMinSize, ltmDosApplicationHeavyUrlInclTable=ltmDosApplicationHeavyUrlInclTable, ltmClientSslStatPartiallyHwAcceleratedConns=ltmClientSslStatPartiallyHwAcceleratedConns, ltmClientSslStatRenegotiationsRejected=ltmClientSslStatRenegotiationsRejected, ltmFastL4ProfileLateBinding=ltmFastL4ProfileLateBinding, ltmHttpcompContTypeInclGroup=ltmHttpcompContTypeInclGroup, ltmHttpcompContTypeInclEntry=ltmHttpcompContTypeInclEntry, ltmConnPoolProfileStatReuses=ltmConnPoolProfileStatReuses, ltmHttpProfileStatRamcacheEvictions=ltmHttpProfileStatRamcacheEvictions, ltmClientSslCertKeyChainCert=ltmClientSslCertKeyChainCert, ltmHttpCompressionProfileStatTable=ltmHttpCompressionProfileStatTable, ltmHttpCompressionProfileStat=ltmHttpCompressionProfileStat, ltmFastL4ProfileStatLbcTimedout=ltmFastL4ProfileStatLbcTimedout, ltmDnsSecurityStatAaaaDrops=ltmDnsSecurityStatAaaaDrops, ltmRamUriInclName=ltmRamUriInclName, ltmVirtualServStatPvaMaxConns=ltmVirtualServStatPvaMaxConns, ltmIsessionProfileStatDeflateInBytesRaw=ltmIsessionProfileStatDeflateInBytesRaw, ltmLsnPoolStatPcpAnnounceResponsesUcast=ltmLsnPoolStatPcpAnnounceResponsesUcast, ltmConnPoolProfileName=ltmConnPoolProfileName, ltmHttpClassStatSgmlPrecompressBytes=ltmHttpClassStatSgmlPrecompressBytes, ltmPcpPrefixNumber=ltmPcpPrefixNumber, ltmTcpProfileStatName=ltmTcpProfileStatName, ltmDnsSecurityStatEntry=ltmDnsSecurityStatEntry, ltmClientSslCertKeyChainChain=ltmClientSslCertKeyChainChain, ltmClientSslCertKeyChain=ltmClientSslCertKeyChain, ltmPcpProfileStatPcpErrorsInvalidRequest=ltmPcpProfileStatPcpErrorsInvalidRequest, ltmFwIpintRouteDomainStatTable=ltmFwIpintRouteDomainStatTable, ltmFtpProfileDataPort=ltmFtpProfileDataPort, ltmDnsProfileStat=ltmDnsProfileStat, ltmHttpCompressionProfileStatSgmlPrecompressBytes=ltmHttpCompressionProfileStatSgmlPrecompressBytes, ltmLsnPoolStatTotalZombiePortBlocksDeleted=ltmLsnPoolStatTotalZombiePortBlocksDeleted, ltmRtspProfileUnicastRedirect=ltmRtspProfileUnicastRedirect, ltmPoolMemberStatPvaCurConns=ltmPoolMemberStatPvaCurConns, ltmDosProfileName=ltmDosProfileName, ltmFastL4ProfileStatTable=ltmFastL4ProfileStatTable, ltmServerSslStatFatalAlerts=ltmServerSslStatFatalAlerts, ltmDnsProfileStatTable=ltmDnsProfileStatTable, ltmSipProfileLogProfile=ltmSipProfileLogProfile, ltmSnatPoolStatEntry=ltmSnatPoolStatEntry, ltmVirtualServRuleNumber=ltmVirtualServRuleNumber, ltmHttpcompContTypeExclIndex=ltmHttpcompContTypeExclIndex, ltmDnsQueryFilterTable=ltmDnsQueryFilterTable, ltmServerSslKey=ltmServerSslKey, ltmIsessionProfileStatLzoOutBytesRaw=ltmIsessionProfileStatLzoOutBytesRaw, ltmDnsProfileStatAnyReqs=ltmDnsProfileStatAnyReqs, ltmPoolStatConnqAllServiced=ltmPoolStatConnqAllServiced, ltmWebaccCacheUriExclGroup=ltmWebaccCacheUriExclGroup, ltmBwcPolicyStatEntry=ltmBwcPolicyStatEntry, ltmXmlProfile=ltmXmlProfile, ltmLsnPoolStatNumber=ltmLsnPoolStatNumber, ltmHttpcompContTypeExclGroup=ltmHttpcompContTypeExclGroup, ltmDnsCacheStatNameserverUpdates=ltmDnsCacheStatNameserverUpdates, ltmSctpProfileStat=ltmSctpProfileStat, ltmClientSslName=ltmClientSslName, ltmPptpProfileStatStopReplies=ltmPptpProfileStatStopReplies, ltmCompContTypeInclIndex=ltmCompContTypeInclIndex, ltmIsessionProfileStatDeflateInErrors=ltmIsessionProfileStatDeflateInErrors, ltmRule=ltmRule, ltmTcpProfileTable=ltmTcpProfileTable, ltmXmlProfileXpathQueriesEntry=ltmXmlProfileXpathQueriesEntry, ltmClientSslStatMaxCompatConns=ltmClientSslStatMaxCompatConns, ltmPoolMemberStatServerCurConns=ltmPoolMemberStatServerCurConns, ltmVirtualServStatClientTotConns=ltmVirtualServStatClientTotConns, ltmBwcPolicyStatGroup=ltmBwcPolicyStatGroup, ltmDosProfileDefaultName=ltmDosProfileDefaultName, ltmClientSslStatDhDssKeyxchg=ltmClientSslStatDhDssKeyxchg, ltmRtspProfileStatNumErrors=ltmRtspProfileStatNumErrors, ltmFastL4ProfileTcpGenerateIsn=ltmFastL4ProfileTcpGenerateIsn, ltmClientSslStatOcspStaplingResponseValidationErrors=ltmClientSslStatOcspStaplingResponseValidationErrors, ltmTransAddrStatEntry=ltmTransAddrStatEntry, ltmSpdyProfileStatEntry=ltmSpdyProfileStatEntry, ltmIiopProfileStatNumCancels=ltmIiopProfileStatNumCancels, ltmStreamProfile=ltmStreamProfile, ltmHttpProfileStatRamcacheHitBytes=ltmHttpProfileStatRamcacheHitBytes, ltmVAddrStatusParentType=ltmVAddrStatusParentType, ltmHttpProfileCompressGzipWindowsize=ltmHttpProfileCompressGzipWindowsize, ltmAuthProfileStatErrorResults=ltmAuthProfileStatErrorResults, ltmRuleEventStatNumber=ltmRuleEventStatNumber, ltmVirtualServHttpClass=ltmVirtualServHttpClass, ltmConnPoolProfileStatNumber=ltmConnPoolProfileStatNumber, ltmPersistProfileMsrdpNoSessionDir=ltmPersistProfileMsrdpNoSessionDir, ltmRouteDomainStatClientEvictedConns=ltmRouteDomainStatClientEvictedConns, ltmDnsServerStatNumber=ltmDnsServerStatNumber, ltmSipProfileSecureVia=ltmSipProfileSecureVia, ltmAlgLogProfileStartDataElementsNumber=ltmAlgLogProfileStartDataElementsNumber, ltmTransAddrTcpIdleTimeout=ltmTransAddrTcpIdleTimeout, ltmDnsProfileStatMalformed=ltmDnsProfileStatMalformed, ltmSipProfileDefaultName=ltmSipProfileDefaultName, ltmDnsExpressStatNumber=ltmDnsExpressStatNumber, ltmSpdyProfileStatSpdyRequestBytes=ltmSpdyProfileStatSpdyRequestBytes, ltmFtpProfileDefaultName=ltmFtpProfileDefaultName, ltmStreamProfileDefaultName=ltmStreamProfileDefaultName, ltmFwPolicyRuleStatNumber=ltmFwPolicyRuleStatNumber, ltmHttpClassProfileHost=ltmHttpClassProfileHost, ltmIiopProfile=ltmIiopProfile, ltmServerSslStatEncryptedBytesOut=ltmServerSslStatEncryptedBytesOut, ltmTcpProfileStatGroup=ltmTcpProfileStatGroup, ltmFastHttpProfileStatClientSyns=ltmFastHttpProfileStatClientSyns, ltmDosAttackDataStatResetStats=ltmDosAttackDataStatResetStats, ltmSpdyProfileStatHttpResponseBytes=ltmSpdyProfileStatHttpResponseBytes, ltmVirtualServStatVsUsageRatio5m=ltmVirtualServStatVsUsageRatio5m, ltmDosAttackDataStatNumber=ltmDosAttackDataStatNumber, ltmHttpProfileStatSgmlPrecompressBytes=ltmHttpProfileStatSgmlPrecompressBytes, ltmWebAccelerationProfileStatCacheEvictions=ltmWebAccelerationProfileStatCacheEvictions, ltmRouteDomainStatClientTotConns=ltmRouteDomainStatClientTotConns, ltmClientSslHandshakeTimeout=ltmClientSslHandshakeTimeout, ltmIsessionProfileStatDedupInMissHistBucket16k=ltmIsessionProfileStatDedupInMissHistBucket16k, ltmAlgLogProfile=ltmAlgLogProfile, ltmDnsCacheForwardZoneGroup=ltmDnsCacheForwardZoneGroup, ltmHttpCompressionProfileGzipMemlevel=ltmHttpCompressionProfileGzipMemlevel, ltmWebAccelerationProfileNumber=ltmWebAccelerationProfileNumber, ltmHttpProfileStatName=ltmHttpProfileStatName)
mibBuilder.exportSymbols("F5-BIGIP-LOCAL-MIB", ltmDnsProfileLoggingProfile=ltmDnsProfileLoggingProfile, ltmDnsSecurityStat=ltmDnsSecurityStat, ltmServerSslGroup=ltmServerSslGroup, ltmVirtualServClonePoolType=ltmVirtualServClonePoolType, ltmHttpCompressionProfileContTypeExcl=ltmHttpCompressionProfileContTypeExcl, ltmFastHttpProfileIdleTimeout=ltmFastHttpProfileIdleTimeout, ltmRespHeadersPermNumber=ltmRespHeadersPermNumber, ltmTcpProfileStatTimeWait=ltmTcpProfileStatTimeWait, ltmFastHttpProfileNumber=ltmFastHttpProfileNumber, ltmIsessionProfileStatBzip2OutBytesRaw=ltmIsessionProfileStatBzip2OutBytesRaw, ltmDosApplicationTpsBasedUrlMaximumTps=ltmDosApplicationTpsBasedUrlMaximumTps, ltmCompUriExclGroup=ltmCompUriExclGroup, ltmServerSslStatSessCacheHits=ltmServerSslStatSessCacheHits, ltmVirtualServStatClientBytesIn=ltmVirtualServStatClientBytesIn, ltmAlgLogProfileEndControlElementsName=ltmAlgLogProfileEndControlElementsName, ltmFastL4ProfileGroup=ltmFastL4ProfileGroup, ltmAuthProfileStatTotSessions=ltmAuthProfileStatTotSessions, ltmPoolStatServerMaxConns=ltmPoolStatServerMaxConns, ltmVirtualServStatEphemeralTotConns=ltmVirtualServStatEphemeralTotConns, ltmIsessionProfileStatDedupOutMissHistBucketLarge=ltmIsessionProfileStatDedupOutMissHistBucketLarge, ltmDnsCacheStatEntry=ltmDnsCacheStatEntry, ltmFwPolicyRuleStatPolicyName=ltmFwPolicyRuleStatPolicyName, ltmPoolMbrStatusAddr=ltmPoolMbrStatusAddr, ltmFastL4ProfileIpFragReass=ltmFastL4ProfileIpFragReass, ltmRouteDomainStatServerPktsIn=ltmRouteDomainStatServerPktsIn, ltmDosApplicationHeavyUrlExclGroup=ltmDosApplicationHeavyUrlExclGroup, ltmPoolMemberStatDurationRateExceeded=ltmPoolMemberStatDurationRateExceeded, ltmHttpClass=ltmHttpClass, ltmLsnLogProfileStartOutboundElementsName=ltmLsnLogProfileStartOutboundElementsName, ltmV6rdProfileEntry=ltmV6rdProfileEntry, ltmOcspStaplingParametersSignHash=ltmOcspStaplingParametersSignHash, ltmPoolMbrStatusNumber=ltmPoolMbrStatusNumber, ltmPcpProfileMinMappingLifetime=ltmPcpProfileMinMappingLifetime, ltmLsnPoolVlan=ltmLsnPoolVlan, ltmOcspStaplingParametersClockSkew=ltmOcspStaplingParametersClockSkew, ltmDnsProfileStatDns64Rewrites=ltmDnsProfileStatDns64Rewrites, ltmVirtualServPoolGroup=ltmVirtualServPoolGroup, ltmSctpProfileGroup=ltmSctpProfileGroup, ltmRtspProfileStatNumRequests=ltmRtspProfileStatNumRequests, ltmIsessionProfileStatLzoInUses=ltmIsessionProfileStatLzoInUses, ltmAlgLogProfileEndDataElementsGroup=ltmAlgLogProfileEndDataElementsGroup, ltmWebaccCacheUriExclName=ltmWebaccCacheUriExclName, ltmSctpProfileConfigSource=ltmSctpProfileConfigSource, ltmClientSslStatEcdhEcdsaKeyxchg=ltmClientSslStatEcdhEcdsaKeyxchg, ltmSctpProfileHeartbeatMaxBurst=ltmSctpProfileHeartbeatMaxBurst, ltmAttrMirrorState=ltmAttrMirrorState, ltmServerSslStatMaxNativeConns=ltmServerSslStatMaxNativeConns, ltmHttpCompressionProfileGzipLevel=ltmHttpCompressionProfileGzipLevel, ltmFastHttpProfileConnpoolStep=ltmFastHttpProfileConnpoolStep, ltmClientSslStatSecureHandshakes=ltmClientSslStatSecureHandshakes, ltmDosApplicationTpsBasedIpMinimumTps=ltmDosApplicationTpsBasedIpMinimumTps, ltmIsessionProfileStatDedupOutMissHistBucket8k=ltmIsessionProfileStatDedupOutMissHistBucket8k, ltmRtspProfileLogProfile=ltmRtspProfileLogProfile, ltmTcpProfileLimitedTransmit=ltmTcpProfileLimitedTransmit, ltmRouteDomainStatServerTotConns=ltmRouteDomainStatServerTotConns, ltmVirtualServProfileNumber=ltmVirtualServProfileNumber, ltmServerSslSessionMirroring=ltmServerSslSessionMirroring, ltmConnPoolProfileStat=ltmConnPoolProfileStat, ltmIsessionProfileStatDedupOutHitHistBucket512k=ltmIsessionProfileStatDedupOutHitHistBucket512k, ltmClientSslStatInsecureRenegotiationRejects=ltmClientSslStatInsecureRenegotiationRejects, ltmSctpProfileStatRxbadsum=ltmSctpProfileStatRxbadsum, ltmClientSslStatPeercertNone=ltmClientSslStatPeercertNone, ltmVirtualServStatTable=ltmVirtualServStatTable, ltmConnPoolProfile=ltmConnPoolProfile, ltmFwPolicyRuleStatCounter=ltmFwPolicyRuleStatCounter, ltmDosAttackDataStatStats1m=ltmDosAttackDataStatStats1m, ltmFwIpintVirtualStatResetStats=ltmFwIpintVirtualStatResetStats, ltmFwRuleStatPolicyName=ltmFwRuleStatPolicyName, ltmNatStatServerBytesOut=ltmNatStatServerBytesOut, ltmIiopProfileStatTable=ltmIiopProfileStatTable, ltmHttpcompUriExclIndex=ltmHttpcompUriExclIndex, ltmVirtualAddrStatEntry=ltmVirtualAddrStatEntry, ltmPcpProfileDefaultName=ltmPcpProfileDefaultName, ltmRateFilterStat=ltmRateFilterStat, ltmRespHeadersPermEntry=ltmRespHeadersPermEntry, ltmPoolMemberStatCurrPvaAssistConn=ltmPoolMemberStatCurrPvaAssistConn, ltmVirtualServType=ltmVirtualServType, ltmServerSslStrictResume=ltmServerSslStrictResume, ltmFlowEvictionPolicyStatResetStats=ltmFlowEvictionPolicyStatResetStats, ltmClientSslFwdpBypassDipWList=ltmClientSslFwdpBypassDipWList, ltmDnsProfileLoggingEnabled=ltmDnsProfileLoggingEnabled, ltmVirtualAddrStatPvaBytesOut=ltmVirtualAddrStatPvaBytesOut, ltmIsessionProfileStatDedupInMissHistBucket1k=ltmIsessionProfileStatDedupInMissHistBucket1k, ltmSpdyProfileStatResetStats=ltmSpdyProfileStatResetStats, bigipLocalTMCompliance=bigipLocalTMCompliance, ltmWebAccelerationProfileStatInterStripeHits=ltmWebAccelerationProfileStatInterStripeHits, ltmXmlProfileMultipleQueryMatches=ltmXmlProfileMultipleQueryMatches, ltmSctpProfileStatConnfails=ltmSctpProfileStatConnfails, ltmDnsCacheStatSync=ltmDnsCacheStatSync, ltmDnsCacheStatTcpBytesIn=ltmDnsCacheStatTcpBytesIn, ltmXmlProfileEntry=ltmXmlProfileEntry, ltmHttpClassStatSgmlPostcompressBytes=ltmHttpClassStatSgmlPostcompressBytes, ltmDosApplicationNumber=ltmDosApplicationNumber, ltmFtpProfileStatTable=ltmFtpProfileStatTable, ltmSpdyProfileStatSynReplyFramesSent=ltmSpdyProfileStatSynReplyFramesSent, ltmPoolStatusReason=ltmPoolStatusReason, ltmVirtualServStatPvaBytesOut=ltmVirtualServStatPvaBytesOut, ltmDosApplicationHeavyUrlLatencyThreshold=ltmDosApplicationHeavyUrlLatencyThreshold, ltmV6rdProfileIpv4prefix=ltmV6rdProfileIpv4prefix, ltmRtspProfileIdleTimeout=ltmRtspProfileIdleTimeout, ltmFastHttpProfileStatV10Reqs=ltmFastHttpProfileStatV10Reqs, ltmFastHttp=ltmFastHttp, ltmHttpCompressionProfileStatJsPostcompressBytes=ltmHttpCompressionProfileStatJsPostcompressBytes, ltmDosApplicationLatencyBasedSiteClientSideDefense=ltmDosApplicationLatencyBasedSiteClientSideDefense, ltmFastL4ProfileClientTimeout=ltmFastL4ProfileClientTimeout, ltmTcpProfileProxyOptions=ltmTcpProfileProxyOptions, ltmDnsQueryFilterIndex=ltmDnsQueryFilterIndex, ltmDnsSecurityStatGroup=ltmDnsSecurityStatGroup, ltmWebAccelerationProfileStatInterStripeEvictions=ltmWebAccelerationProfileStatInterStripeEvictions, ltmMirrorPortMemberToName=ltmMirrorPortMemberToName, ltmSpdyProfileStatV2StreamsMax=ltmSpdyProfileStatV2StreamsMax, ltmLsnPoolVlanVlanName=ltmLsnPoolVlanVlanName, ltmHttpcompUriExclEntry=ltmHttpcompUriExclEntry, ltmOcspStaplingParametersTrustedResponders=ltmOcspStaplingParametersTrustedResponders, ltmSpdyProfileProtocolVersionsEntry=ltmSpdyProfileProtocolVersionsEntry, ltmAuthProfileDefaultName=ltmAuthProfileDefaultName, ltmClientSslStatSslv3=ltmClientSslStatSslv3, ltmIiopProfileStatName=ltmIiopProfileStatName, ltmVirtualServAddrType=ltmVirtualServAddrType, ltmXmlProfileNamespaceMappingsNumber=ltmXmlProfileNamespaceMappingsNumber, ltmDnsCacheEntry=ltmDnsCacheEntry, ltmRateFilterDirection=ltmRateFilterDirection, ltmDnsExpressStatDnsxResponses=ltmDnsExpressStatDnsxResponses, ltmSnatOrigAddrWildmask=ltmSnatOrigAddrWildmask, ltmNodeAddrStatusAvailState=ltmNodeAddrStatusAvailState, ltmSnatVlan=ltmSnatVlan, ltmIsessionProfileStatOutgoingConnsIdleMax=ltmIsessionProfileStatOutgoingConnsIdleMax, ltmIiopProfileStatGroup=ltmIiopProfileStatGroup, ltmServerSslSslSignHash=ltmServerSslSslSignHash, ltmIsessionProfileStatDedupInUses=ltmIsessionProfileStatDedupInUses, ltmVirtualServClonePoolTable=ltmVirtualServClonePoolTable, ltmServerSslStatMd5Digest=ltmServerSslStatMd5Digest, ltmPoolStatus=ltmPoolStatus, ltmClientSslOptions=ltmClientSslOptions, ltmDosAttackDataStatStats=ltmDosAttackDataStatStats, ltmV6rdProfileV6rdprefixType=ltmV6rdProfileV6rdprefixType, ltmAlgLogProfileStartDataElementsIndex=ltmAlgLogProfileStartDataElementsIndex, ltmIsessionProfileStatIncomingConnsActiveCur=ltmIsessionProfileStatIncomingConnsActiveCur, ltmClientSslCafile=ltmClientSslCafile, ltmHttpProfileStatResetStats=ltmHttpProfileStatResetStats, ltmTcpProfileAckOnPush=ltmTcpProfileAckOnPush, ltmAuthProfileCredentialSource=ltmAuthProfileCredentialSource, ltmUserStatProfileEntry=ltmUserStatProfileEntry, ltmServerSslHandshakeTimeout=ltmServerSslHandshakeTimeout, ltmUdpProfile=ltmUdpProfile, ltmMirrorPortName=ltmMirrorPortName, ltmClientSslChain=ltmClientSslChain, ltmHttpCompressionProfileStatCssPostcompressBytes=ltmHttpCompressionProfileStatCssPostcompressBytes, ltmPcpProfileMaxMappingLifetime=ltmPcpProfileMaxMappingLifetime, ltmXmlProfileStatNumDocumentsWithThreeMatches=ltmXmlProfileStatNumDocumentsWithThreeMatches, ltmHttpClassUriTable=ltmHttpClassUriTable, ltmIsessionProfileStatDedupOutMissHistBucket32k=ltmIsessionProfileStatDedupOutMissHistBucket32k, ltmVirtualServStatClientEvictedConns=ltmVirtualServStatClientEvictedConns, ltmTcpProfileStatTable=ltmTcpProfileStatTable, ltmHttpCompressionProfileStatNumber=ltmHttpCompressionProfileStatNumber, ltmSpdyProfileStatDataFramesSent=ltmSpdyProfileStatDataFramesSent, ltmNodeAddrStatusName=ltmNodeAddrStatusName, ltmSipProfileStatNumber=ltmSipProfileStatNumber, ltmDnsCacheStatMsgEvictions=ltmDnsCacheStatMsgEvictions, ltmVirtualAddrStatClientPktsIn=ltmVirtualAddrStatClientPktsIn, ltmHttpClassStatV10Resp=ltmHttpClassStatV10Resp, ltmServerSslStatDssKeyxchg=ltmServerSslStatDssKeyxchg, ltmSctpProfileStatTable=ltmSctpProfileStatTable, ltmVirtualAddrServer=ltmVirtualAddrServer, ltmHttpProfileStatRamcacheMissesAll=ltmHttpProfileStatRamcacheMissesAll, ltmAlgLogProfileEndControlElementsNumber=ltmAlgLogProfileEndControlElementsNumber, ltmHttpCompressionProfileStatHtmlPostcompressBytes=ltmHttpCompressionProfileStatHtmlPostcompressBytes, ltmTcpProfileMptcpFallback=ltmTcpProfileMptcpFallback, ltmPptpProfileLogServerIp=ltmPptpProfileLogServerIp, ltmHttpProfilePassthroughExcessClientHeaders=ltmHttpProfilePassthroughExcessClientHeaders, ltmHttpClassStatRamcacheHitBytes=ltmHttpClassStatRamcacheHitBytes, ltmLsnPrefixLsnPoolNumber=ltmLsnPrefixLsnPoolNumber, ltmFwRuleStatEntry=ltmFwRuleStatEntry, ltmVirtualServAuth=ltmVirtualServAuth, ltmTcpProfileMaxrtx=ltmTcpProfileMaxrtx, ltmDnsProfileCacheEnabled=ltmDnsProfileCacheEnabled, ltmUdpProfileName=ltmUdpProfileName, ltmTcpProfileStatNumber=ltmTcpProfileStatNumber, ltmServerSslStatNonHwAcceleratedConns=ltmServerSslStatNonHwAcceleratedConns, ltmDnsProfileStatNoErrors=ltmDnsProfileStatNoErrors, ltmWebAccelerationProfileUriIncl=ltmWebAccelerationProfileUriIncl, ltmSnatStatClientPktsIn=ltmSnatStatClientPktsIn, ltmFastHttpProfileStatConnpoolReuses=ltmFastHttpProfileStatConnpoolReuses, ltmLsnPoolStatActiveHairpinConnections=ltmLsnPoolStatActiveHairpinConnections, ltmSpdyProfileActivationMode=ltmSpdyProfileActivationMode, ltmTcpProfileProxyBufferLow=ltmTcpProfileProxyBufferLow, ltmClientSslStatEcdhRsaKeyxchg=ltmClientSslStatEcdhRsaKeyxchg, ltmVirtualServStatWlSyncookieAccepts=ltmVirtualServStatWlSyncookieAccepts, ltmVirtualServClonePoolVirtualServerName=ltmVirtualServClonePoolVirtualServerName, ltmIsessionProfileTable=ltmIsessionProfileTable, ltmNodeAddrStatus=ltmNodeAddrStatus, ltmHttpCompressionProfileTable=ltmHttpCompressionProfileTable, ltmAttrMirrorPeerIpAddr=ltmAttrMirrorPeerIpAddr, ltmWebaccCacheUriOverTable=ltmWebaccCacheUriOverTable, ltmDosAttackDataStatGroup=ltmDosAttackDataStatGroup, ltmServerSslStatAesBulk=ltmServerSslStatAesBulk, ltmSnatSfFlags=ltmSnatSfFlags, ltmWebAccelerationProfileStatNumber=ltmWebAccelerationProfileStatNumber, ltmHttpProfileMaxHeaderSize=ltmHttpProfileMaxHeaderSize, ltmDosApplicationProfileName=ltmDosApplicationProfileName, ltmSipProfileConfigSource=ltmSipProfileConfigSource, ltmCompContTypeExclNumber=ltmCompContTypeExclNumber, ltmConnPoolProfileStatName=ltmConnPoolProfileStatName, ltmDosApplicationTpsBasedIpClientSideDefense=ltmDosApplicationTpsBasedIpClientSideDefense, ltmV6rdProfileNumber=ltmV6rdProfileNumber, ltmRateFilterStatGroup=ltmRateFilterStatGroup, ltmLsnPoolEgressInterfacesEnabled=ltmLsnPoolEgressInterfacesEnabled, ltmConnPoolProfileSrcMaskType=ltmConnPoolProfileSrcMaskType, ltmHttpProfileStatV11Reqs=ltmHttpProfileStatV11Reqs, ltmNatVlanTable=ltmNatVlanTable, ltmIsessionProfileStatBzip2InBytesOpt=ltmIsessionProfileStatBzip2InBytesOpt, ltmPoolQueueTimeLimit=ltmPoolQueueTimeLimit, ltmVirtualServVlanNumber=ltmVirtualServVlanNumber, ltmPool=ltmPool, ltmHttpProfileCompContTypeIncl=ltmHttpProfileCompContTypeIncl, ltmPoolMemberStatPvaMaxConns=ltmPoolMemberStatPvaMaxConns, ltmDnsCacheStatUdpTotConns=ltmDnsCacheStatUdpTotConns, ltmLsnPoolInboundConnections=ltmLsnPoolInboundConnections, ltmServerSslEntry=ltmServerSslEntry, ltmWebaccCacheUriPinName=ltmWebaccCacheUriPinName, ltmRouteDomainStat=ltmRouteDomainStat, ltmIiopProfileStatNumRequests=ltmIiopProfileStatNumRequests, ltmFwIpintVirtualStatEntry=ltmFwIpintVirtualStatEntry, ltmXmlProfileStatNumInspectedDocuments=ltmXmlProfileStatNumInspectedDocuments, ltmDnsQueryFilterType=ltmDnsQueryFilterType, ltmLsnPoolStatEntry=ltmLsnPoolStatEntry, ltmIsessionProfileStatDedupOutHitHistBucket64k=ltmIsessionProfileStatDedupOutHitHistBucket64k, ltmDosApplicationLatencyBasedUrlClientSideDefense=ltmDosApplicationLatencyBasedUrlClientSideDefense, ltmFastHttpProfileForceHttp10Response=ltmFastHttpProfileForceHttp10Response, ltmUdpProfileStatExpires=ltmUdpProfileStatExpires, ltmTcpProfileDelayWindowControl=ltmTcpProfileDelayWindowControl, ltmSctpProfileIdleTimeout=ltmSctpProfileIdleTimeout, ltmDosApplicationTpsBasedUrlClientSideDefense=ltmDosApplicationTpsBasedUrlClientSideDefense, ltmRouteDomainStatClientCurConns=ltmRouteDomainStatClientCurConns, ltmFlowEvictionPolicyStatNumber=ltmFlowEvictionPolicyStatNumber, ltmServerSslStatTlsv1=ltmServerSslStatTlsv1, ltmClientSslStatFatalAlerts=ltmClientSslStatFatalAlerts, ltmFtpProfileStatName=ltmFtpProfileStatName, ltmNodeAddrStatPvaCurConns=ltmNodeAddrStatPvaCurConns, ltmPptpProfileStatSetLinkInfo=ltmPptpProfileStatSetLinkInfo, ltmPersistProfileAcrossVirtuals=ltmPersistProfileAcrossVirtuals, ltmPoolStatConnqAllAgeEdm=ltmPoolStatConnqAllAgeEdm, ltmSnatPoolStatName=ltmSnatPoolStatName, ltmHttpProfileRamcacheInsertAgeHeader=ltmHttpProfileRamcacheInsertAgeHeader, ltmHttpProfileStatXmlPostcompressBytes=ltmHttpProfileStatXmlPostcompressBytes, ltmStream=ltmStream, ltmAlgLogProfileEndControlElements=ltmAlgLogProfileEndControlElements, ltmFastL4ProfileStatRxbadsum=ltmFastL4ProfileStatRxbadsum, ltmHttpClassUriIndex=ltmHttpClassUriIndex, ltmVirtualAddrStatPvaMaxConns=ltmVirtualAddrStatPvaMaxConns, ltmClientSslFwdpCaKey=ltmClientSslFwdpCaKey, ltmNodeAddrStatEntry=ltmNodeAddrStatEntry, ltmFastL4ProfileMssOverride=ltmFastL4ProfileMssOverride, ltmNatStatTransAddrType=ltmNatStatTransAddrType)
mibBuilder.exportSymbols("F5-BIGIP-LOCAL-MIB", ltmHttpClassStatV11Resp=ltmHttpClassStatV11Resp, ltmVirtualServProfileGroup=ltmVirtualServProfileGroup, ltmTcpProfileMptcpFastjoin=ltmTcpProfileMptcpFastjoin, ltmDosWhiteIpTable=ltmDosWhiteIpTable, ltmConnPool=ltmConnPool, ltmVirtualServProfileType=ltmVirtualServProfileType, ltmServerSslRenegotiateSize=ltmServerSslRenegotiateSize, ltmTcpProfileMptcpMakeafterbreak=ltmTcpProfileMptcpMakeafterbreak, ltmSctpProfileCookieExpiration=ltmSctpProfileCookieExpiration, ltmIsessionProfileStatDeflateInUses=ltmIsessionProfileStatDeflateInUses, ltmClientSslCertKeyChainKey=ltmClientSslCertKeyChainKey, ltmVirtualServAddr=ltmVirtualServAddr, ltmPoolStatConnqAllAgeHead=ltmPoolStatConnqAllAgeHead, ltmXmlProfileNamespaceMappingsIndex=ltmXmlProfileNamespaceMappingsIndex, ltmDosApplicationName=ltmDosApplicationName, ltmAuthProfileTable=ltmAuthProfileTable, ltmPoolStatusName=ltmPoolStatusName, ltmUdpProfileAllowNoPayload=ltmUdpProfileAllowNoPayload, ltmFtpProfileNumber=ltmFtpProfileNumber, ltmIsessionProfile=ltmIsessionProfile, ltmVirtualServAvailabilityState=ltmVirtualServAvailabilityState, ltmClientSslStatEntry=ltmClientSslStatEntry, ltmSnatPoolStatNumber=ltmSnatPoolStatNumber, ltmPoolMemberStatPvaBytesOut=ltmPoolMemberStatPvaBytesOut, ltmPoolMemberStatServerPktsOut=ltmPoolMemberStatServerPktsOut, ltmTcpProfileMptcpRtomax=ltmTcpProfileMptcpRtomax, ltmIsessionProfileStatDedupOutHitHistBucket1k=ltmIsessionProfileStatDedupOutHitHistBucket1k, ltmSnatOrigAddrGroup=ltmSnatOrigAddrGroup, ltmSctpProfileStatNumber=ltmSctpProfileStatNumber, ltmVirtualAddrStatClientBytesOut=ltmVirtualAddrStatClientBytesOut, ltmDosApplicationLatencyBasedIpClientSideDefense=ltmDosApplicationLatencyBasedIpClientSideDefense, ltmFastL4ProfileStatRxbadpkt=ltmFastL4ProfileStatRxbadpkt, ltmDnsProfileGtmEnabled=ltmDnsProfileGtmEnabled, ltmSipProfileStatTable=ltmSipProfileStatTable, ltmSnatPoolStat=ltmSnatPoolStat, ltmFtpProfileConfigSource=ltmFtpProfileConfigSource, ltmDnsProfileStatDnsExpressReqs=ltmDnsProfileStatDnsExpressReqs, ltmBwcPolicyStatTable=ltmBwcPolicyStatTable, ltmSpdyProfileStatWindowUpdateFramesSent=ltmSpdyProfileStatWindowUpdateFramesSent, ltmDosAttackDataStatDrops1h=ltmDosAttackDataStatDrops1h, ltmHttpClassAsmEnabled=ltmHttpClassAsmEnabled, ltmAlgLogProfileEntry=ltmAlgLogProfileEntry, ltmLsnLogProfileStartOutboundElementsGroup=ltmLsnLogProfileStartOutboundElementsGroup, ltmClientSslMode=ltmClientSslMode, ltmRtspProfileProxyHeader=ltmRtspProfileProxyHeader, ltmRtspProfileName=ltmRtspProfileName, ltmPcpProfileMapFilterLimit=ltmPcpProfileMapFilterLimit, ltmVirtualServStatHwSyncookieAccepts=ltmVirtualServStatHwSyncookieAccepts, ltmVirtualServStatSwSyncookieAccepts=ltmVirtualServStatSwSyncookieAccepts, ltmVsHttpClassProfileName=ltmVsHttpClassProfileName, ltmFwIpintGlobalStatResetStats=ltmFwIpintGlobalStatResetStats, ltmNatTransAddrType=ltmNatTransAddrType, ltmIsessionProfileStatDedupInMissHistBucket4k=ltmIsessionProfileStatDedupInMissHistBucket4k, ltmFtpProfile=ltmFtpProfile, ltmHttpClassProfile=ltmHttpClassProfile, ltmUdpProfileDefaultName=ltmUdpProfileDefaultName, ltmIsessionProfileStatDedupInBytesRaw=ltmIsessionProfileStatDedupInBytesRaw, ltmPcpProfileStatEntry=ltmPcpProfileStatEntry, ltmDosAttackDataStatAttackDetected=ltmDosAttackDataStatAttackDetected, ltmFastL4ProfileTimeoutRecovery=ltmFastL4ProfileTimeoutRecovery, ltmFastHttpProfileStatResetStats=ltmFastHttpProfileStatResetStats, ltmVirtualServClonePool=ltmVirtualServClonePool, ltmNodeAddrStatGroup=ltmNodeAddrStatGroup, ltmPersistProfileMapProxies=ltmPersistProfileMapProxies, ltmVirtualServStatCsMeanConnDur=ltmVirtualServStatCsMeanConnDur, ltmServerSslStatNullDigest=ltmServerSslStatNullDigest, ltmClientSslStatDheDssKeyxchg=ltmClientSslStatDheDssKeyxchg, ltmTcpProfileEcn=ltmTcpProfileEcn, ltmNodeAddrStatusDetailReason=ltmNodeAddrStatusDetailReason, ltmRateFilterStatRateBytes=ltmRateFilterStatRateBytes, ltmHttpClassStatNumberReqs=ltmHttpClassStatNumberReqs, ltmClientSslSslSignHash=ltmClientSslSslSignHash, ltmIsessionProfileStatDedupOutUses=ltmIsessionProfileStatDedupOutUses, ltmNetworkAttackDataStatAttackCount=ltmNetworkAttackDataStatAttackCount, ltmFastHttpProfileClientCloseTimeout=ltmFastHttpProfileClientCloseTimeout, ltmDnsExpressStatXfrNotifiesFailed=ltmDnsExpressStatXfrNotifiesFailed, ltmRuleEventStatTotalExecutions=ltmRuleEventStatTotalExecutions, ltmClientSslStatCachedCerts=ltmClientSslStatCachedCerts, ltmPptpProfileStatActiveCalls=ltmPptpProfileStatActiveCalls, ltmPoolStatGroup=ltmPoolStatGroup, ltmDnsProfileStatDns64Failures=ltmDnsProfileStatDns64Failures, ltmDnsCacheUseIpv4=ltmDnsCacheUseIpv4, ltmPcpProfileMulticastPort=ltmPcpProfileMulticastPort, ltmFlowEvictionPolicyStatEntry=ltmFlowEvictionPolicyStatEntry, ltmFastHttpProfileConnpoolIdleTimeout=ltmFastHttpProfileConnpoolIdleTimeout, ltmTransAddrEnabled=ltmTransAddrEnabled, ltmRateFilterStatDropTotBytes=ltmRateFilterStatDropTotBytes, ltmClientSslStatPeercertValid=ltmClientSslStatPeercertValid, ltmVAddrStatusDetailReason=ltmVAddrStatusDetailReason, ltmConnPoolProfileMaxSize=ltmConnPoolProfileMaxSize, ltmFastHttpProfileMssOverride=ltmFastHttpProfileMssOverride, ltmXmlProfileConfigSource=ltmXmlProfileConfigSource, ltmSpdyProfileStatTable=ltmSpdyProfileStatTable, ltmRtspProfileMaxQueuedData=ltmRtspProfileMaxQueuedData, ltmVirtualModuleScoreTable=ltmVirtualModuleScoreTable, ltmAuthProfileStatSuccessResults=ltmAuthProfileStatSuccessResults, ltmDnsProfileStatMxReqs=ltmDnsProfileStatMxReqs, ltmIsessionProfileStatIncomingConnsActiveMax=ltmIsessionProfileStatIncomingConnsActiveMax, ltmDnsCacheStatTcpPktsOut=ltmDnsCacheStatTcpPktsOut, ltmNatStatTable=ltmNatStatTable, ltmWebAccelerationProfileStatCacheMissBytes=ltmWebAccelerationProfileStatCacheMissBytes, ltmLsnPrefixEntry=ltmLsnPrefixEntry, ltmClientSslStatSourceIpBypasses=ltmClientSslStatSourceIpBypasses, ltmTcpProfilePktLossIgnoreBurst=ltmTcpProfilePktLossIgnoreBurst, ltmPcpProfileStatPcpErrorsNotAuthorized=ltmPcpProfileStatPcpErrorsNotAuthorized, ltmAlgLogProfileEndControlElementsEntry=ltmAlgLogProfileEndControlElementsEntry, ltmPcpPrefixProfilePcpName=ltmPcpPrefixProfilePcpName, ltmDnsExpressStatDnsxQueries=ltmDnsExpressStatDnsxQueries, ltmTransAddrUnitId=ltmTransAddrUnitId, ltmUserStatProfileDefaultName=ltmUserStatProfileDefaultName, ltmLsnLogProfileStartOutboundAction=ltmLsnLogProfileStartOutboundAction, ltmClientSslFwdpCaPassphrase=ltmClientSslFwdpCaPassphrase, ltmHttpProfileStatOtherPrecompressBytes=ltmHttpProfileStatOtherPrecompressBytes, ltmVirtualServSnatType=ltmVirtualServSnatType, ltmFastHttpProfileStatServerRxBad=ltmFastHttpProfileStatServerRxBad, ltmPcpProfileStatPcpAnnounceResponsesMulticast=ltmPcpProfileStatPcpAnnounceResponsesMulticast, ltmNetworkAttackDataStatStatsRate=ltmNetworkAttackDataStatStatsRate, ltmDnsCacheStatTcpTotConns=ltmDnsCacheStatTcpTotConns, ltmServerSslCafile=ltmServerSslCafile, ltmConnPoolProfileStatResetStats=ltmConnPoolProfileStatResetStats, ltmStreamProfileGroup=ltmStreamProfileGroup, ltmPoolMemberPriority=ltmPoolMemberPriority, ltmFwIpintVirtualStatCounter=ltmFwIpintVirtualStatCounter, ltmBwcPolicyStatInactivePolicies=ltmBwcPolicyStatInactivePolicies, ltmPoolStatServerBytesIn=ltmPoolStatServerBytesIn, ltmTcpProfileStatRxbadcookie=ltmTcpProfileStatRxbadcookie, ltmVAddrStatusName=ltmVAddrStatusName, ltmNatListedEnabledVlans=ltmNatListedEnabledVlans, ltmFastL4ProfileStatRxbadunreach=ltmFastL4ProfileStatRxbadunreach, ltmVirtualAddrNumber=ltmVirtualAddrNumber, ltmHttpClassHeadString=ltmHttpClassHeadString, ltmRamUriPinGroup=ltmRamUriPinGroup, ltmServerSslStatEcdheEcdsaKeyxchg=ltmServerSslStatEcdheEcdsaKeyxchg, ltmWebaccCacheUriInclName=ltmWebaccCacheUriInclName, ltmHttpProfileStatRamcacheMissBytes=ltmHttpProfileStatRamcacheMissBytes, ltmVirtualServStatVsUsageRatio1m=ltmVirtualServStatVsUsageRatio1m, ltmVirtualAddrStatPvaPktsIn=ltmVirtualAddrStatPvaPktsIn, ltmVirtualServAuthVsName=ltmVirtualServAuthVsName, ltmSnatEntry=ltmSnatEntry, ltmIsessionProfileStatDedupOutMissHistBucket512k=ltmIsessionProfileStatDedupOutMissHistBucket512k, ltmVirtualServAuthEntry=ltmVirtualServAuthEntry, ltmIsessionProfileStatLzoInErrors=ltmIsessionProfileStatLzoInErrors, ltmTcpProfileSndbuf=ltmTcpProfileSndbuf, ltmDnsSecurityStatNumber=ltmDnsSecurityStatNumber, ltmRateFilterStatCname=ltmRateFilterStatCname, ltmFastHttpProfileInsertXforwardedFor=ltmFastHttpProfileInsertXforwardedFor, ltmWebaccCacheUriOverUri=ltmWebaccCacheUriOverUri, ltmClientSslStatRsaKeyxchg=ltmClientSslStatRsaKeyxchg, ltmLsnPrefixName=ltmLsnPrefixName, ltmHttpProfileStatRamcacheMisses=ltmHttpProfileStatRamcacheMisses, ltmHttpClassHeadNumber=ltmHttpClassHeadNumber, ltmClientSslUncleanShutdown=ltmClientSslUncleanShutdown, ltmFwIpintRouteDomainStatEntry=ltmFwIpintRouteDomainStatEntry, ltmRouteDomainStatResetStats=ltmRouteDomainStatResetStats, ltmSpdyProfileConcurrentStreamsPerConnection=ltmSpdyProfileConcurrentStreamsPerConnection, ltmRateFilterStatDropRandPkts=ltmRateFilterStatDropRandPkts, ltmPoolMemberStatNodeName=ltmPoolMemberStatNodeName, ltmRateFilterStatResetStats=ltmRateFilterStatResetStats, ltmTcpProfileMd5Sig=ltmTcpProfileMd5Sig, ltmCompUriInclEntry=ltmCompUriInclEntry, ltmLsnLogProfileGroup=ltmLsnLogProfileGroup, ltmUdpProfileStatTable=ltmUdpProfileStatTable, ltmPoolMemberStatPvaTotConns=ltmPoolMemberStatPvaTotConns, ltmFastHttpProfileStatConnpoolMaxSize=ltmFastHttpProfileStatConnpoolMaxSize, ltmTransAddrStatNumber=ltmTransAddrStatNumber, ltmWebaccCacheUriOverName=ltmWebaccCacheUriOverName, ltmIsessionProfileConnectionReuse=ltmIsessionProfileConnectionReuse, ltmIiopProfilePersistRequestId=ltmIiopProfilePersistRequestId, ltmHttpClassHeadGroup=ltmHttpClassHeadGroup, ltmServerSslStatSecureHandshakes=ltmServerSslStatSecureHandshakes, ltmSctpProfileTcpShutdown=ltmSctpProfileTcpShutdown, ltmVirtualAddrDisabledParentType=ltmVirtualAddrDisabledParentType, ltmAlgLogProfileStartControlElements=ltmAlgLogProfileStartControlElements, ltmUdpProfileLinkQosToClient=ltmUdpProfileLinkQosToClient, ltmSctpProfileEntry=ltmSctpProfileEntry, ltmNodeAddrStatCurSessions=ltmNodeAddrStatCurSessions, ltmAlgLogProfileTable=ltmAlgLogProfileTable, ltmIsessionProfileStatOutgoingConnsErrors=ltmIsessionProfileStatOutgoingConnsErrors, ltmNatStatTransAddr=ltmNatStatTransAddr, ltmPoolMemberStatTotRequests=ltmPoolMemberStatTotRequests, ltmDnsProfileStatPtrReqs=ltmDnsProfileStatPtrReqs, ltmVirtualModuleScoreVsName=ltmVirtualModuleScoreVsName, ltmTransAddrAddr=ltmTransAddrAddr, ltmTransAddrEntry=ltmTransAddrEntry, ltmPcpProfileName=ltmPcpProfileName, ltmServerSslStatEdhDssKeyxchg=ltmServerSslStatEdhDssKeyxchg, ltmVirtualServNumber=ltmVirtualServNumber, ltmHttpProfileLwsMaxColumn=ltmHttpProfileLwsMaxColumn, ltmSctpProfileSndPartial=ltmSctpProfileSndPartial, ltmServerSslStatSourceIpBypasses=ltmServerSslStatSourceIpBypasses, ltmXmlProfileNamespaceMappings=ltmXmlProfileNamespaceMappings, ltmWebAccelerationProfileCacheObjectMinSize=ltmWebAccelerationProfileCacheObjectMinSize, ltmWebAccelerationProfileStatCacheSize=ltmWebAccelerationProfileStatCacheSize, ltmFastL4ProfileLinkQosToServer=ltmFastL4ProfileLinkQosToServer, ltmVirtualAddrStatTable=ltmVirtualAddrStatTable, ltmSctpProfileStatExpires=ltmSctpProfileStatExpires, ltmLsnPoolStatActiveZombiePortBlocks=ltmLsnPoolStatActiveZombiePortBlocks, ltmIsessionProfileStatEntry=ltmIsessionProfileStatEntry, ltmDosApplicationLatencyBasedIpTpsIncreaseRate=ltmDosApplicationLatencyBasedIpTpsIncreaseRate, ltmServerSslStatEntry=ltmServerSslStatEntry, ltmRuleNumber=ltmRuleNumber, ltmFastHttpProfileStatPipelinedReqs=ltmFastHttpProfileStatPipelinedReqs, ltmVirtualServDisabledParentType=ltmVirtualServDisabledParentType, ltmTcpProfileMptcpJoinmax=ltmTcpProfileMptcpJoinmax, ltmIsessionProfileStatDedupInHitHistBucket2k=ltmIsessionProfileStatDedupInHitHistBucket2k, ltmIsessionProfileStatOutgoingConnsActiveCur=ltmIsessionProfileStatOutgoingConnsActiveCur, ltmRstCauseStatEntry=ltmRstCauseStatEntry, ltmHttpProfileInsertXforwardedFor=ltmHttpProfileInsertXforwardedFor, ltmIsessionProfileStatOutgoingConnsActiveMax=ltmIsessionProfileStatOutgoingConnsActiveMax, ltmTcpProfileResetOnTimeout=ltmTcpProfileResetOnTimeout, ltmTcpProfileDefaultName=ltmTcpProfileDefaultName, ltmVirtualServStatEphemeralBytesOut=ltmVirtualServStatEphemeralBytesOut, ltmDnsExpressStatXfrNotifiesSent=ltmDnsExpressStatXfrNotifiesSent, ltmSctp=ltmSctp, ltmDnsSecurity=ltmDnsSecurity, ltmHttpCompressionProfileStatVideoPrecompressBytes=ltmHttpCompressionProfileStatVideoPrecompressBytes, ltmVirtualServEnabled=ltmVirtualServEnabled, ltmIiopProfileStat=ltmIiopProfileStat, ltmOcspStaplingParametersTable=ltmOcspStaplingParametersTable, ltmHttpClassProfileUri=ltmHttpClassProfileUri, ltmPoolStatConnqDepth=ltmPoolStatConnqDepth, ltmVirtualServStatPvaCurConns=ltmVirtualServStatPvaCurConns, ltmNetworkAttackDataStatVectorName=ltmNetworkAttackDataStatVectorName, ltmHttpClassStatResp5xxCnt=ltmHttpClassStatResp5xxCnt, ltmRateFilterStatDropTailPkts=ltmRateFilterStatDropTailPkts, ltmDnsCacheStatResponses=ltmDnsCacheStatResponses, ltmSipProfileTable=ltmSipProfileTable, ltmLsnPrefixLsnPoolBackupLsnPrefixName=ltmLsnPrefixLsnPoolBackupLsnPrefixName, ltmServerSslStatPrematureDisconnects=ltmServerSslStatPrematureDisconnects, ltmFastHttpProfileStatReqParseErrors=ltmFastHttpProfileStatReqParseErrors, ltmFallbackStatusName=ltmFallbackStatusName, ltmIsessionProfileStatDedupOutHitHistBucket4k=ltmIsessionProfileStatDedupOutHitHistBucket4k, ltmDosApplicationHeavyUrlInclProfileName=ltmDosApplicationHeavyUrlInclProfileName, ltmClientSslStrictResume=ltmClientSslStrictResume, ltmFwIpintGlobalStatNumber=ltmFwIpintGlobalStatNumber, ltmIsessionProfileStatDedupInHitHistBucket256k=ltmIsessionProfileStatDedupInHitHistBucket256k, ltmFastHttpProfileStatResp5xxCnt=ltmFastHttpProfileStatResp5xxCnt, ltmHttpCompressionProfileStatNullCompressBytes=ltmHttpCompressionProfileStatNullCompressBytes, ltmServerSslStatDhDssKeyxchg=ltmServerSslStatDhDssKeyxchg, ltmClientSslStatNotssl=ltmClientSslStatNotssl, ltmTcpProfileAbc=ltmTcpProfileAbc, ltmDnsHeaderFilterNumber=ltmDnsHeaderFilterNumber, ltmFastHttpProfileStat=ltmFastHttpProfileStat, ltmDnsProfileDns64PrefixType=ltmDnsProfileDns64PrefixType, ltmVirtualServTranslateAddr=ltmVirtualServTranslateAddr, ltmFwIpintRouteDomainStat=ltmFwIpintRouteDomainStat, ltmAuthProfileStatWantcredentialResults=ltmAuthProfileStatWantcredentialResults, ltmPoolStatResetStats=ltmPoolStatResetStats, ltmDnsCacheForwardZone=ltmDnsCacheForwardZone, ltmDnsSecurityStatSrvDrops=ltmDnsSecurityStatSrvDrops, ltmDnsCacheUseIpv6=ltmDnsCacheUseIpv6, ltmServerSslNumber=ltmServerSslNumber, ltmAlgLogProfileStartControlElementsEntry=ltmAlgLogProfileStartControlElementsEntry, ltmHttpClassStatRamcacheMissBytesAll=ltmHttpClassStatRamcacheMissBytesAll)
mibBuilder.exportSymbols("F5-BIGIP-LOCAL-MIB", ltmFwIpintGlobalStatBlClassName=ltmFwIpintGlobalStatBlClassName, ltmRateFilterCname=ltmRateFilterCname, ltmPoolMemberStatServerMaxConns=ltmPoolMemberStatServerMaxConns, ltmHttpClassStatRespBucket1k=ltmHttpClassStatRespBucket1k, ltmTcpProfileTailLossProbe=ltmTcpProfileTailLossProbe, ltmHttpCompressionProfileStatOctetPostcompressBytes=ltmHttpCompressionProfileStatOctetPostcompressBytes, ltmNatVlanNumber=ltmNatVlanNumber, ltmClientSslStatSessCacheOverflows=ltmClientSslStatSessCacheOverflows, ltmLsnLogProfileName=ltmLsnLogProfileName, ltmDnsProfileFastDnsEnabled=ltmDnsProfileFastDnsEnabled, ltmPptpProfileStatCallDisconnectNotifies=ltmPptpProfileStatCallDisconnectNotifies, ltmSpdyProfileNumber=ltmSpdyProfileNumber, ltmRouteDomainStatClientMaxConns=ltmRouteDomainStatClientMaxConns, ltmServerSslStatDtlsv1=ltmServerSslStatDtlsv1, ltmVirtualServPoolPoolName=ltmVirtualServPoolPoolName, ltmTcpProfileStatTxrexmits=ltmTcpProfileStatTxrexmits, ltmPptpProfileStatEchoReplies=ltmPptpProfileStatEchoReplies, ltmPoolStatusGroup=ltmPoolStatusGroup, ltmXmlProfileNamespaceMappingsGroup=ltmXmlProfileNamespaceMappingsGroup, ltmSnatOrigAddrWildmaskType=ltmSnatOrigAddrWildmaskType, ltmLsnPoolVlanEntry=ltmLsnPoolVlanEntry, ltmHttpcompContTypeInclName=ltmHttpcompContTypeInclName, ltmFastL4ProfileIpTosToClient=ltmFastL4ProfileIpTosToClient, ltmClientSslStatSessCacheInvalidations=ltmClientSslStatSessCacheInvalidations, ltmPoolMemberStatPort=ltmPoolMemberStatPort, ltmWebAccelerationProfileUriOver=ltmWebAccelerationProfileUriOver, ltmFastHttpProfileStatNumberReqs=ltmFastHttpProfileStatNumberReqs, ltmDnsCacheStatSecUnchecked=ltmDnsCacheStatSecUnchecked, ltmServerSslAuthenticateOnce=ltmServerSslAuthenticateOnce, ltmAuthProfileEntry=ltmAuthProfileEntry, ltmPersistProfileMaskType=ltmPersistProfileMaskType, ltmDnsExpressStatTsigVerified=ltmDnsExpressStatTsigVerified, ltmDosAttackDataStatStats1h=ltmDosAttackDataStatStats1h, ltmVirtualAddrStatClientTotConns=ltmVirtualAddrStatClientTotConns, ltmRtspProfileGroup=ltmRtspProfileGroup, ltmDnsProfileStatOpcodeOther=ltmDnsProfileStatOpcodeOther, ltmNodeAddrStatusReason=ltmNodeAddrStatusReason, ltmHttpCompressionProfileStatImagePostcompressBytes=ltmHttpCompressionProfileStatImagePostcompressBytes, ltmClientSslStatRecordsIn=ltmClientSslStatRecordsIn, ltmDnsSecurityStatFilteredDrops=ltmDnsSecurityStatFilteredDrops, ltmIsessionProfileStatNullInBytesOpt=ltmIsessionProfileStatNullInBytesOpt, ltmPoolStatTotRequests=ltmPoolStatTotRequests, ltmVirtualServSrcport=ltmVirtualServSrcport, ltmFtpProfileStatResetStats=ltmFtpProfileStatResetStats, ltmOcspStaplingParametersStrictRespCertCheck=ltmOcspStaplingParametersStrictRespCertCheck, ltmPoolMemberEntry=ltmPoolMemberEntry, ltmPoolMemberRatio=ltmPoolMemberRatio, ltmHttpProfileStatRespBucket64k=ltmHttpProfileStatRespBucket64k, ltmLsnPrefixLsnPoolPrefixAddress=ltmLsnPrefixLsnPoolPrefixAddress, ltmDnsProfileStatEntry=ltmDnsProfileStatEntry, ltmDnsProfileStatFastDnsRespTc=ltmDnsProfileStatFastDnsRespTc, ltmSnat=ltmSnat, ltmPoolIpTosToClient=ltmPoolIpTosToClient, ltmHttpProfileStatCssPostcompressBytes=ltmHttpProfileStatCssPostcompressBytes, ltmServerSslStatDheDssKeyxchg=ltmServerSslStatDheDssKeyxchg, ltmHttpProfileRamcache=ltmHttpProfileRamcache, ltmTransAddrNumber=ltmTransAddrNumber, ltmDnsProfileStatFastDnsRespNe=ltmDnsProfileStatFastDnsRespNe, ltmDnsProfileStatAuthoritativeAnswer=ltmDnsProfileStatAuthoritativeAnswer, ltmNetworkAttackDataStatAttackDetected=ltmNetworkAttackDataStatAttackDetected, ltmRuleEventScript=ltmRuleEventScript, ltmDosAttackDataStatDropsRate=ltmDosAttackDataStatDropsRate, ltmHttpClassHostNumber=ltmHttpClassHostNumber, ltmFastHttpProfile=ltmFastHttpProfile, ltmClientSslStatSessCacheHits=ltmClientSslStatSessCacheHits, ltmHttpProfileRamcacheMaxEntries=ltmHttpProfileRamcacheMaxEntries, ltmDnsServerStatTable=ltmDnsServerStatTable, ltmVirtualServClonePoolEntry=ltmVirtualServClonePoolEntry, ltmConnPoolProfileIdleTimeout=ltmConnPoolProfileIdleTimeout, ltmDnsCacheStatName=ltmDnsCacheStatName, ltmHttpProfileStatImagePostcompressBytes=ltmHttpProfileStatImagePostcompressBytes, ltmWebAccelerationProfileStatRemoteMisses=ltmWebAccelerationProfileStatRemoteMisses, ltmPersistProfileCookieMethod=ltmPersistProfileCookieMethod, ltmSipProfileStatResponses=ltmSipProfileStatResponses, ltmServerSslStatDesBulk=ltmServerSslStatDesBulk, ltmWebaccCacheUriOverGroup=ltmWebaccCacheUriOverGroup, ltmDnsCacheRandomizeQueryNameCase=ltmDnsCacheRandomizeQueryNameCase, ltmDnsCacheForwardZoneNameServerEntry=ltmDnsCacheForwardZoneNameServerEntry, ltmSctpProfileStatResetStats=ltmSctpProfileStatResetStats, ltmCompContTypeExclName=ltmCompContTypeExclName, ltmSip=ltmSip, ltmSnatOrigAddr=ltmSnatOrigAddr, ltmNodeAddrStatPvaMaxConns=ltmNodeAddrStatPvaMaxConns, ltmHttpProfileRamcacheObjectMaxSize=ltmHttpProfileRamcacheObjectMaxSize, ltmIiopProfileConfigSource=ltmIiopProfileConfigSource, ltmPoolStatPvaCurConns=ltmPoolStatPvaCurConns, ltmRamUriExclTable=ltmRamUriExclTable, ltmRateFilterCeil=ltmRateFilterCeil, ltmSpdyProfilePriorityHandling=ltmSpdyProfilePriorityHandling, ltmVirtualServPersistEntry=ltmVirtualServPersistEntry, ltmWebAccelerationProfileTable=ltmWebAccelerationProfileTable, ltmOcspStaplingParametersSignerCert=ltmOcspStaplingParametersSignerCert, ltmTcpProfileStatCloseWait=ltmTcpProfileStatCloseWait, ltmDosApplicationTriggerIrule=ltmDosApplicationTriggerIrule, ltmClientSslKey=ltmClientSslKey, ltmHttpClassStatCookiePersistInserts=ltmHttpClassStatCookiePersistInserts, ltmAlgLogProfileEndControlElementsGroup=ltmAlgLogProfileEndControlElementsGroup, ltmDosAttackDataStatTable=ltmDosAttackDataStatTable, ltmVirtualServEnabledState=ltmVirtualServEnabledState, ltmCompContTypeInclEntry=ltmCompContTypeInclEntry, ltmIsessionProfileStatNullOutUses=ltmIsessionProfileStatNullOutUses, ltmDnsCacheUseUdp=ltmDnsCacheUseUdp, ltmDnsCacheForwardZoneName=ltmDnsCacheForwardZoneName, ltmFwIpintGlobalStatEntry=ltmFwIpintGlobalStatEntry, ltmMirrorPortMemberConduitName=ltmMirrorPortMemberConduitName, ltmPoolMemberCnt=ltmPoolMemberCnt, ltmLsnPoolStatTotalPortBlockAllocations=ltmLsnPoolStatTotalPortBlockAllocations, ltmCompContTypeInclNumber=ltmCompContTypeInclNumber, ltmRateFilterStatDropTailBytes=ltmRateFilterStatDropTailBytes, ltmOcspStaplingParametersName=ltmOcspStaplingParametersName, ltmAlgLogProfileEndDataAction=ltmAlgLogProfileEndDataAction, ltmIsessionProfileStatDeflateInBytesOpt=ltmIsessionProfileStatDeflateInBytesOpt, ltmPersistProfileAcrossPools=ltmPersistProfileAcrossPools, ltmPcpProfileStatPcpPeerRequests=ltmPcpProfileStatPcpPeerRequests, ltmSnatStat=ltmSnatStat, ltmPoolSlowRampTime=ltmPoolSlowRampTime, ltmRuleEventStatEntry=ltmRuleEventStatEntry, ltmOcspStaplingParametersCacheTimeout=ltmOcspStaplingParametersCacheTimeout, ltmIsessionProfileStatGroup=ltmIsessionProfileStatGroup, ltmHttpProfileCompressGzipMemlevel=ltmHttpProfileCompressGzipMemlevel, ltmHttpProfileLwsSeparator=ltmHttpProfileLwsSeparator, ltmIsessionProfileStatDedupOutMissHistBucket2k=ltmIsessionProfileStatDedupOutMissHistBucket2k, ltmRtspProfileSessionReconnect=ltmRtspProfileSessionReconnect, ltmXmlProfileStatNumDocumentsWithOneMatch=ltmXmlProfileStatNumDocumentsWithOneMatch, ltmAlgLog=ltmAlgLog, ltmVirtualAddrRouteAdvertisement=ltmVirtualAddrRouteAdvertisement, ltmV6rdProfileDefaultName=ltmV6rdProfileDefaultName, ltmVsStatusGroup=ltmVsStatusGroup, ltmHttpProfileCompressBufferSize=ltmHttpProfileCompressBufferSize, ltmDnsSecurityStatTable=ltmDnsSecurityStatTable, ltmVirtualAddrStatCurrPvaAssistConn=ltmVirtualAddrStatCurrPvaAssistConn, ltmRouteDomainStatServerPktsOut=ltmRouteDomainStatServerPktsOut, ltmLsnLogProfileEndOutboundElementsName=ltmLsnLogProfileEndOutboundElementsName, ltmFastHttpProfileStatEntry=ltmFastHttpProfileStatEntry, ltmSipProfileLogPublisher=ltmSipProfileLogPublisher, ltmIiopProfileTable=ltmIiopProfileTable, ltmDnsCacheStatKeyMisses=ltmDnsCacheStatKeyMisses, ltmSnatOrigAddrSnatName=ltmSnatOrigAddrSnatName, ltmSnatTransAddr=ltmSnatTransAddr, ltmStreamProfileStatName=ltmStreamProfileStatName, ltmHttpCompressionProfileStatOtherPrecompressBytes=ltmHttpCompressionProfileStatOtherPrecompressBytes, ltmRamUriPinIndex=ltmRamUriPinIndex, ltmHttpProfileCompUriIncl=ltmHttpProfileCompUriIncl, ltmRateFilterTable=ltmRateFilterTable, ltmVirtualAddrEnabled=ltmVirtualAddrEnabled, ltmSctpProfileStatRxrst=ltmSctpProfileStatRxrst, ltmLsnPrefixLsnPoolBackupPrefixAddressType=ltmLsnPrefixLsnPoolBackupPrefixAddressType, ltmV6rdProfileTable=ltmV6rdProfileTable, ltmServerSslStatEdhRsaKeyxchg=ltmServerSslStatEdhRsaKeyxchg, ltmMirrorPortMemberEntry=ltmMirrorPortMemberEntry, ltmFastHttpProfileStatResp2xxCnt=ltmFastHttpProfileStatResp2xxCnt, ltmHttpCompressionProfile=ltmHttpCompressionProfile, ltmServerSslStatNullBulk=ltmServerSslStatNullBulk, ltmDosAttackDataStat=ltmDosAttackDataStat, ltmPcpPrefixAddrType=ltmPcpPrefixAddrType, ltmHttpProfileStatImagePrecompressBytes=ltmHttpProfileStatImagePrecompressBytes, ltmAlgLogProfileStartDataElementsTable=ltmAlgLogProfileStartDataElementsTable, ltmClientSslStatNullDigest=ltmClientSslStatNullDigest, ltmConnPoolProfileNumber=ltmConnPoolProfileNumber, ltmRuleEventStatName=ltmRuleEventStatName, ltmTcpProfileSynMaxrtx=ltmTcpProfileSynMaxrtx, ltmTcpProfile=ltmTcpProfile, ltmUserStatProfileNumber=ltmUserStatProfileNumber, ltmCompContTypeInclName=ltmCompContTypeInclName, ltmVirtualServStatWlSyncookieRejects=ltmVirtualServStatWlSyncookieRejects, ltmXmlProfileStatResetStats=ltmXmlProfileStatResetStats, ltmHttpClassUriString=ltmHttpClassUriString, ltmRateFilterBurst=ltmRateFilterBurst, ltmWebAccelerationProfileStatCacheHits=ltmWebAccelerationProfileStatCacheHits, ltmFastHttpProfileMaxRequests=ltmFastHttpProfileMaxRequests, ltmDnsProfileStatGtmEffectiveRateLimit=ltmDnsProfileStatGtmEffectiveRateLimit, ltmDosAttackDataStatAttackCount=ltmDosAttackDataStatAttackCount, ltmHttpProfileStatGroup=ltmHttpProfileStatGroup, ltmWebAccelerationProfileCacheMaxEntries=ltmWebAccelerationProfileCacheMaxEntries, ltmWebaccCacheUriPinUri=ltmWebaccCacheUriPinUri, ltmDnsCacheStatRrsetInserts=ltmDnsCacheStatRrsetInserts, ltmXmlProfileStatTable=ltmXmlProfileStatTable, ltmTransAddr=ltmTransAddr, ltmTcpProfileProxyMss=ltmTcpProfileProxyMss, ltmNodeAddrStatServerBytesOut=ltmNodeAddrStatServerBytesOut, ltmHttpClassStatCssPrecompressBytes=ltmHttpClassStatCssPrecompressBytes, ltmSnatVlanVlanName=ltmSnatVlanVlanName, ltmWebaccCacheUriInclTable=ltmWebaccCacheUriInclTable, ltmNodeAddrMonitorStatus=ltmNodeAddrMonitorStatus, ltmPoolMemberWeight=ltmPoolMemberWeight, ltmIsessionProfileStatDedupOutMissHistBucket1m=ltmIsessionProfileStatDedupOutMissHistBucket1m, ltmIsessionProfileStatDedupInBytesOpt=ltmIsessionProfileStatDedupInBytesOpt, ltmPoolMemberNodeName=ltmPoolMemberNodeName, ltmPoolGroup=ltmPoolGroup, ltmDnsCacheStatMsgUpdates=ltmDnsCacheStatMsgUpdates, ltmNodeAddrAddr=ltmNodeAddrAddr, ltmVirtualAddrAddrType=ltmVirtualAddrAddrType, ltmDosAttackDataStatDrops1m=ltmDosAttackDataStatDrops1m, ltmSctpProfileOutStreams=ltmSctpProfileOutStreams, ltmIsessionProfileStatDedupOutHitHistBucket8k=ltmIsessionProfileStatDedupOutHitHistBucket8k, ltmLsnPoolStat=ltmLsnPoolStat, ltmTransAddrIpIdleTimeout=ltmTransAddrIpIdleTimeout, ltmServerSslStatRc2Bulk=ltmServerSslStatRc2Bulk, ltmAuthProfileType=ltmAuthProfileType, ltmClientSslRenegotiateMaxRecordDelay=ltmClientSslRenegotiateMaxRecordDelay, ltmPoolNumber=ltmPoolNumber, ltmIiopProfileNumber=ltmIiopProfileNumber, ltmHttpProfileStatNumberReqs=ltmHttpProfileStatNumberReqs, ltmCompContTypeInclTable=ltmCompContTypeInclTable, ltmFastL4ProfileStatSyncookIssue=ltmFastL4ProfileStatSyncookIssue, ltmPcpPrefixTable=ltmPcpPrefixTable, ltmClientSslStatAesGcmBulk=ltmClientSslStatAesGcmBulk, ltmFastL4ProfileStatRxunreach=ltmFastL4ProfileStatRxunreach, ltmHttpProfileFallbackHost=ltmHttpProfileFallbackHost, ltmDnsProfileSecurityEnabled=ltmDnsProfileSecurityEnabled, ltmWebAccelerationProfileStatCacheHitBytes=ltmWebAccelerationProfileStatCacheHitBytes, ltmPcpProfile=ltmPcpProfile, ltmClientSslStatOcspStaplingResponseStatusErrors=ltmClientSslStatOcspStaplingResponseStatusErrors, ltmDosApplicationLatencyBasedSiteRateLimiting=ltmDosApplicationLatencyBasedSiteRateLimiting, ltmNatStatServerTotConns=ltmNatStatServerTotConns, ltmVirtualServStatEphemeralMaxConns=ltmVirtualServStatEphemeralMaxConns, ltmDosApplicationHeavyUrlExclIndex=ltmDosApplicationHeavyUrlExclIndex, ltmPoolMbrStatusAvailState=ltmPoolMbrStatusAvailState, ltmDosAttackDataStatEntry=ltmDosAttackDataStatEntry, ltmServerSslName=ltmServerSslName, ltmNodeAddrStatTotRequests=ltmNodeAddrStatTotRequests, ltmHttpClassStatOtherPostcompressBytes=ltmHttpClassStatOtherPostcompressBytes, ltmFlowEvictionPolicyStatEvicted=ltmFlowEvictionPolicyStatEvicted, ltmHttpProfileStatV10Resp=ltmHttpProfileStatV10Resp, ltmDnsCacheStatTcpCurConns=ltmDnsCacheStatTcpCurConns, ltmHttpProfileStatMaxKeepaliveReq=ltmHttpProfileStatMaxKeepaliveReq, ltmWebaccCacheUriOverEntry=ltmWebaccCacheUriOverEntry, ltmDosApplicationTpsBasedSiteMinimumTps=ltmDosApplicationTpsBasedSiteMinimumTps, ltmXmlProfileXpathQueriesGroup=ltmXmlProfileXpathQueriesGroup, ltmDnsCacheStatSecInsecure=ltmDnsCacheStatSecInsecure, ltmVirtualServStatGroup=ltmVirtualServStatGroup, ltmNodeAddrEntry=ltmNodeAddrEntry, ltmVirtualServLasthopPoolName=ltmVirtualServLasthopPoolName, ltmIsessionProfileStatDedupOutHitHistBucket2k=ltmIsessionProfileStatDedupOutHitHistBucket2k, ltmWebaccCacheUriPinGroup=ltmWebaccCacheUriPinGroup, ltmLsnPrefixGroup=ltmLsnPrefixGroup, ltmLsnLogProfileErrorsAction=ltmLsnLogProfileErrorsAction, ltmClientSslAllowNonssl=ltmClientSslAllowNonssl, ltmAuthProfileStatName=ltmAuthProfileStatName, ltmServerSslStatFullyHwAcceleratedConns=ltmServerSslStatFullyHwAcceleratedConns, ltmPoolStatConnqAgeMax=ltmPoolStatConnqAgeMax, ltmPoolMemberStatAddrType=ltmPoolMemberStatAddrType, ltmOcspStaplingParametersDnsResolver=ltmOcspStaplingParametersDnsResolver, ltmDosAttackDataStatStatsRate=ltmDosAttackDataStatStatsRate, ltmAlgLogProfileEndControlElementsTable=ltmAlgLogProfileEndControlElementsTable, ltmWebAccelerationProfileCacheIgnoreClient=ltmWebAccelerationProfileCacheIgnoreClient, ltmFastL4ProfileTable=ltmFastL4ProfileTable, ltmTransAddrStatResetStats=ltmTransAddrStatResetStats, ltmClientSslStatOcspStaplingOcspConnTimeouts=ltmClientSslStatOcspStaplingOcspConnTimeouts, ltmDosApplicationLatencyBasedMaximumPreventionDuration=ltmDosApplicationLatencyBasedMaximumPreventionDuration, ltmIsessionProfileStatBzip2InUses=ltmIsessionProfileStatBzip2InUses, ltmRuleConfigSource=ltmRuleConfigSource, ltmServerSslStatDecryptedBytesIn=ltmServerSslStatDecryptedBytesIn, ltmDnsSecurityStatMxDrops=ltmDnsSecurityStatMxDrops)
mibBuilder.exportSymbols("F5-BIGIP-LOCAL-MIB", ltmSctpProfileHeartbeatInterval=ltmSctpProfileHeartbeatInterval, ltmBwcPolicyStatBytesPassed=ltmBwcPolicyStatBytesPassed, ltmSnatpoolTransAddr=ltmSnatpoolTransAddr, ltmNodeAddrStatNodeName=ltmNodeAddrStatNodeName, ltmHttpProfileStatResp3xxCnt=ltmHttpProfileStatResp3xxCnt, ltmVirtualAddrStatPvaCurConns=ltmVirtualAddrStatPvaCurConns, ltmFwRuleStatCounter=ltmFwRuleStatCounter, ltmV6rdProfileConfigSource=ltmV6rdProfileConfigSource, ltmLsnPrefixLsnPoolBackupLsnPoolName=ltmLsnPrefixLsnPoolBackupLsnPoolName, ltmPoolMemberStatPvaPktsIn=ltmPoolMemberStatPvaPktsIn, ltmDnsProfileNumber=ltmDnsProfileNumber, ltmLsnLogProfileStartInboundAction=ltmLsnLogProfileStartInboundAction, ltmFastL4ProfileName=ltmFastL4ProfileName, ltmIsessionProfileStatBzip2InBytesRaw=ltmIsessionProfileStatBzip2InBytesRaw, ltmV6rdProfileV6rdprefix=ltmV6rdProfileV6rdprefix, ltmVAddrStatusGroup=ltmVAddrStatusGroup, ltmOCSPStapling=ltmOCSPStapling, ltmFastHttpProfileStatGetReqs=ltmFastHttpProfileStatGetReqs, ltmDosApplicationLatencyBasedIpMaximumTps=ltmDosApplicationLatencyBasedIpMaximumTps, ltmTcpProfileStatRxrst=ltmTcpProfileStatRxrst, ltmDnsProfileStatOpcodeUpdate=ltmDnsProfileStatOpcodeUpdate, ltmPcpProfileStatPcpMapRequests=ltmPcpProfileStatPcpMapRequests, ltmRouteDomainStatServerEvictedConns=ltmRouteDomainStatServerEvictedConns, ltmRuleDefinition=ltmRuleDefinition, ltmXmlProfileStatName=ltmXmlProfileStatName, ltmDnsSecurityGroup=ltmDnsSecurityGroup, ltmHttpProfileEncCookies=ltmHttpProfileEncCookies, ltmLsnLogProfileNumber=ltmLsnLogProfileNumber, ltmWebAccelerationProfileStatGroup=ltmWebAccelerationProfileStatGroup, ltmStreamProfileEntry=ltmStreamProfileEntry, ltmPcpProfileRuleName=ltmPcpProfileRuleName, ltmSctpProfileNumber=ltmSctpProfileNumber, ltmSctpProfileRcvwnd=ltmSctpProfileRcvwnd, ltmHttpProfileStatPrecompressBytes=ltmHttpProfileStatPrecompressBytes, ltmStreamProfileStatGroup=ltmStreamProfileStatGroup, ltmServerSslStatMaxConns=ltmServerSslStatMaxConns, ltmFwIpintRouteDomainStatCounter=ltmFwIpintRouteDomainStatCounter, ltmVirtualServVlanEntry=ltmVirtualServVlanEntry, ltmDnsCacheKeyCacheSize=ltmDnsCacheKeyCacheSize, ltmClientSslAuthenticateOnce=ltmClientSslAuthenticateOnce, ltmPoolEntry=ltmPoolEntry, ltmFastHttpProfileStatServerConnects=ltmFastHttpProfileStatServerConnects, ltmDnsCacheStatNameserverInserts=ltmDnsCacheStatNameserverInserts, ltmFwPolicyRuleStatLastHitTimeFmt=ltmFwPolicyRuleStatLastHitTimeFmt, ltmServerSslStatPeercertValid=ltmServerSslStatPeercertValid, ltmVirtualServRulePriority=ltmVirtualServRulePriority, ltmHttpcompContTypeInclTable=ltmHttpcompContTypeInclTable, ltmClientSslStatBadRecords=ltmClientSslStatBadRecords, ltmDnsProfileDns64AdditionalRewrite=ltmDnsProfileDns64AdditionalRewrite, ltmPcpProfileStatPcpPeerResponses=ltmPcpProfileStatPcpPeerResponses, ltmDnsHeaderFilter=ltmDnsHeaderFilter, ltmVirtualModuleScore=ltmVirtualModuleScore, ltmRouteDomainStatServerCurConns=ltmRouteDomainStatServerCurConns, ltmIsessionProfileStatBzip2InErrors=ltmIsessionProfileStatBzip2InErrors, ltmSpdyProfileStatV2StreamsCurrent=ltmSpdyProfileStatV2StreamsCurrent, ltmClientSslStatTlsv12=ltmClientSslStatTlsv12, ltmPoolMemberNumber=ltmPoolMemberNumber, ltmRuleEventEntry=ltmRuleEventEntry, ltmIsessionProfileStatLzoOutBytesOpt=ltmIsessionProfileStatLzoOutBytesOpt, ltmSpdyProfileReceiveWindow=ltmSpdyProfileReceiveWindow, ltmDosApplicationHeavyUrlExclEntry=ltmDosApplicationHeavyUrlExclEntry, ltmClientSslAlertTimeout=ltmClientSslAlertTimeout, ltmLsnPrefixAddrType=ltmLsnPrefixAddrType, ltmPptpProfileStatTotalCalls=ltmPptpProfileStatTotalCalls, ltmVirtualServPersistNumber=ltmVirtualServPersistNumber, ltmSnatpoolTransAddrTransAddr=ltmSnatpoolTransAddrTransAddr, ltmAuthProfileConfigName=ltmAuthProfileConfigName, ltmPptpProfileStatCallClearRequests=ltmPptpProfileStatCallClearRequests, ltmServerSslStatReuseFailed=ltmServerSslStatReuseFailed, ltmDnsProfileDnssecEnabled=ltmDnsProfileDnssecEnabled, ltmSpdyProfileName=ltmSpdyProfileName, ltmPoolStatusEntry=ltmPoolStatusEntry, ltmRouteDomainStatClientBytesIn=ltmRouteDomainStatClientBytesIn, ltmHttpcompContTypeExclEntry=ltmHttpcompContTypeExclEntry, ltmVirtualAddrGroup=ltmVirtualAddrGroup, ltmDosApplicationTpsBasedIpRateLimiting=ltmDosApplicationTpsBasedIpRateLimiting, ltmPersistProfileSipInfo=ltmPersistProfileSipInfo, ltmHttpcompUriInclUri=ltmHttpcompUriInclUri, ltmPoolMinActiveMembers=ltmPoolMinActiveMembers, ltmSpdy=ltmSpdy, ltmAuthProfileRuleName=ltmAuthProfileRuleName, ltmVirtualServActualPvaAccel=ltmVirtualServActualPvaAccel, ltmNatVlanNatName=ltmNatVlanNatName, ltmSpdyProfileStatFlowsMax=ltmSpdyProfileStatFlowsMax, ltmPoolStatusAvailState=ltmPoolStatusAvailState, ltmDosApplicationTpsBasedIpTpsIncreaseRate=ltmDosApplicationTpsBasedIpTpsIncreaseRate, ltmFtpProfileLogProfile=ltmFtpProfileLogProfile, ltmDnsProfileStatFastDnsDrops=ltmDnsProfileStatFastDnsDrops, ltmSipProfileInsertVia=ltmSipProfileInsertVia, ltmRespHeadersPermName=ltmRespHeadersPermName, ltmPoolStatEntry=ltmPoolStatEntry, ltmMirrorPortMemberNumber=ltmMirrorPortMemberNumber, ltmPcpPrefixGroup=ltmPcpPrefixGroup, ltmHttpCompressionProfileStatPlainPostcompressBytes=ltmHttpCompressionProfileStatPlainPostcompressBytes, ltmFastHttpProfileStatTable=ltmFastHttpProfileStatTable, ltmFwAdminIpRuleStatRuleName=ltmFwAdminIpRuleStatRuleName, ltmDnsCacheStatFailureSend=ltmDnsCacheStatFailureSend, ltmRouteDomainStatEntry=ltmRouteDomainStatEntry, ltmClientSslStatEncryptedBytesOut=ltmClientSslStatEncryptedBytesOut, ltmDnsProfileStatDrops=ltmDnsProfileStatDrops, ltmDnsHeaderFilterIndex=ltmDnsHeaderFilterIndex, ltmServerSslStatNumber=ltmServerSslStatNumber, ltmSpdyProfileEntry=ltmSpdyProfileEntry, ltmHttpClassHostEntry=ltmHttpClassHostEntry, ltmDnsCacheStatUdpBytesOut=ltmDnsCacheStatUdpBytesOut, ltmNodeAddrConnLimit=ltmNodeAddrConnLimit, ltmSnatGroup=ltmSnatGroup, ltmRateFilters=ltmRateFilters, ltmV6rdProfileIpv4prefixType=ltmV6rdProfileIpv4prefixType, ltmSctpProfileStatAcceptfails=ltmSctpProfileStatAcceptfails, ltmAlgLogProfileEndControlAction=ltmAlgLogProfileEndControlAction, ltmDnsProfileStatTruncated=ltmDnsProfileStatTruncated, ltmRateFilterQtype=ltmRateFilterQtype, ltmHttpProfileStatXmlPrecompressBytes=ltmHttpProfileStatXmlPrecompressBytes, ltmHttpProfileRamcacheIgnoreClient=ltmHttpProfileRamcacheIgnoreClient, ltmVirtualServClonePoolNumber=ltmVirtualServClonePoolNumber, ltmClientSslClientcertca=ltmClientSslClientcertca, ltmServerSslDefaultName=ltmServerSslDefaultName, ltmFastHttpProfileConnpoolReplenish=ltmFastHttpProfileConnpoolReplenish, ltmPcpPrefixProfilePcpGroup=ltmPcpPrefixProfilePcpGroup, ltmClientSslFwdpCertExtensionIncludes=ltmClientSslFwdpCertExtensionIncludes, ltmPoolStatPvaMaxConns=ltmPoolStatPvaMaxConns, ltmFastHttpProfileStatRespParseErrors=ltmFastHttpProfileStatRespParseErrors, ltmSctpProfileResetOnTimeout=ltmSctpProfileResetOnTimeout, ltmTcpProfileBandwidthDelay=ltmTcpProfileBandwidthDelay, ltmAttrLbmodeFastestMaxIdleTime=ltmAttrLbmodeFastestMaxIdleTime, ltmClientSslStatAdhKeyxchg=ltmClientSslStatAdhKeyxchg, ltmVirtualServStatCurrentConnsPerSec=ltmVirtualServStatCurrentConnsPerSec, ltmHttpCompressionProfileAllowHttp10=ltmHttpCompressionProfileAllowHttp10, ltmDnsCacheUseTcp=ltmDnsCacheUseTcp, ltmSpdyProfileStatSynStreamFramesReceived=ltmSpdyProfileStatSynStreamFramesReceived, ltmIsessionProfileStatVsName=ltmIsessionProfileStatVsName, ltmIiopProfileStatNumber=ltmIiopProfileStatNumber, ltmDosWhiteIpGroup=ltmDosWhiteIpGroup, ltmClientSslProfileStat=ltmClientSslProfileStat, ltmNodeAddrPoolMemberRefCount=ltmNodeAddrPoolMemberRefCount, ltmPcpPrefixProfilePcpPrefixAddress=ltmPcpPrefixProfilePcpPrefixAddress, ltmIsessionProfileStatDedupOutMissHistBucket128k=ltmIsessionProfileStatDedupOutMissHistBucket128k, ltmPoolMbrStatusTable=ltmPoolMbrStatusTable, ltmIsessionProfileStatDedupOutHitHistBucket128k=ltmIsessionProfileStatDedupOutHitHistBucket128k, ltmIsessionProfileStatDedupInHits=ltmIsessionProfileStatDedupInHits, ltmHttpProfileCompressPreferredMethod=ltmHttpProfileCompressPreferredMethod, ltmRtspProfileRtpPort=ltmRtspProfileRtpPort, ltmServerSslModsslmethods=ltmServerSslModsslmethods, ltmFwPolicyRuleStatContextType=ltmFwPolicyRuleStatContextType, ltmDnsExpressStatGroup=ltmDnsExpressStatGroup, ltmDnsCacheStatFailureCf=ltmDnsCacheStatFailureCf, ltmHttpProfileMaxRequests=ltmHttpProfileMaxRequests, ltmDnsCacheForwardZoneTable=ltmDnsCacheForwardZoneTable, ltmPcpPrefixAddr=ltmPcpPrefixAddr, ltmHttpProfileStatRespBucket1k=ltmHttpProfileStatRespBucket1k, ltmDnsProfileStatGroup=ltmDnsProfileStatGroup, ltmBWC=ltmBWC, ltmHttpProfileRamcacheSize=ltmHttpProfileRamcacheSize, ltmNatStatGroup=ltmNatStatGroup, ltmClientSslStatTlsv11=ltmClientSslStatTlsv11, ltmMirrors=ltmMirrors, ltmDnsCacheStatSecSecure=ltmDnsCacheStatSecSecure, ltmNodeAddrNumber=ltmNodeAddrNumber, ltmPoolMemberSessionStatus=ltmPoolMemberSessionStatus, ltmRouteDomains=ltmRouteDomains, ltmAuthProfileStatTable=ltmAuthProfileStatTable, ltmFwAdminIpRuleStatNumber=ltmFwAdminIpRuleStatNumber, ltmDnsProfileStatResetStats=ltmDnsProfileStatResetStats, ltmDnsCacheAllowedQueryTime=ltmDnsCacheAllowedQueryTime, ltmClientSslStatGroup=ltmClientSslStatGroup, ltmClientSslFwdpCertLifespan=ltmClientSslFwdpCertLifespan, ltmWebAccelerationProfileStatInterStripeCount=ltmWebAccelerationProfileStatInterStripeCount, ltmSpdyProfileStatHeadersFramesSent=ltmSpdyProfileStatHeadersFramesSent, ltmCompContTypeExclTable=ltmCompContTypeExclTable, ltmPoolMemberStatus=ltmPoolMemberStatus, ltmPptpProfileStatWanErrorNotifies=ltmPptpProfileStatWanErrorNotifies, ltmPptpProfileNumber=ltmPptpProfileNumber, ltmLsnPoolStatPcpMapResponses=ltmLsnPoolStatPcpMapResponses, ltmPoolQueueDepthLimit=ltmPoolQueueDepthLimit, ltmDosWhiteIpParentProfile=ltmDosWhiteIpParentProfile, ltmFlowEvictionPolicyStatContextName=ltmFlowEvictionPolicyStatContextName, ltmLsnPoolTranslationPortRangeHigh=ltmLsnPoolTranslationPortRangeHigh, ltmHttpcompUriExclGroup=ltmHttpcompUriExclGroup, ltmSnatpoolTransAddrSnatpoolName=ltmSnatpoolTransAddrSnatpoolName, ltmSctpProfileRxChunks=ltmSctpProfileRxChunks, ltmAuthProfileConfigSource=ltmAuthProfileConfigSource, ltmTcpProfileConfigSource=ltmTcpProfileConfigSource, ltmHttpProfileStatPassthroughExcessClientHeaders=ltmHttpProfileStatPassthroughExcessClientHeaders, ltmVirtualServStatClientPktsIn=ltmVirtualServStatClientPktsIn, ltmHttpcompUriExclName=ltmHttpcompUriExclName, ltmTcpProfileMptcpSubflowmax=ltmTcpProfileMptcpSubflowmax, ltmDnsCacheStatResetStats=ltmDnsCacheStatResetStats, ltmVirtualAddrName=ltmVirtualAddrName, ltmHttpProfileStatOctetPostcompressBytes=ltmHttpProfileStatOctetPostcompressBytes, ltmIsessionProfileCompressionCodecs=ltmIsessionProfileCompressionCodecs, ltmRateFilterRate=ltmRateFilterRate, ltmRespHeadersPermIndex=ltmRespHeadersPermIndex, ltmRuleEventTable=ltmRuleEventTable, ltmRuleEventStatAborts=ltmRuleEventStatAborts, ltmHttpClassCookName=ltmHttpClassCookName, ltmDosApplicationHeavyUrlExclName=ltmDosApplicationHeavyUrlExclName, ltmVsHttpClassGroup=ltmVsHttpClassGroup, ltmVirtualAddrIsFloat=ltmVirtualAddrIsFloat, ltmRtspProfileRtcpPort=ltmRtspProfileRtcpPort, ltmConnPoolProfileTable=ltmConnPoolProfileTable, ltmHttpClassStatRespBucket4k=ltmHttpClassStatRespBucket4k, ltmBwcPolicyStatBytesPerSecOut=ltmBwcPolicyStatBytesPerSecOut, ltmVirtualServStatClientCurConns=ltmVirtualServStatClientCurConns, ltmSnatPoolStatServerBytesIn=ltmSnatPoolStatServerBytesIn, ltmPools=ltmPools, ltmVirtualAddrStatClientCurConns=ltmVirtualAddrStatClientCurConns, ltmFastHttpProfileStatConnpoolExhausted=ltmFastHttpProfileStatConnpoolExhausted, ltmAuthProfileStatMaxSessions=ltmAuthProfileStatMaxSessions, ltmIsessionProfileName=ltmIsessionProfileName, ltmDnsSecurityStatNsDrops=ltmDnsSecurityStatNsDrops, ltmDnsCacheStat=ltmDnsCacheStat, ltmLsnPoolStatTotalClientsReachedLimit=ltmLsnPoolStatTotalClientsReachedLimit, ltmHttpProfilePassthroughOversizeServerHeaders=ltmHttpProfilePassthroughOversizeServerHeaders, ltmUdpProfileStatConnfails=ltmUdpProfileStatConnfails, ltmVirtualAddrStatAddr=ltmVirtualAddrStatAddr, ltmNatStatServerCurConns=ltmNatStatServerCurConns, ltmUdpProfileStatNumber=ltmUdpProfileStatNumber, ltmXmlProfileStatNumDocumentsWithTwoMatches=ltmXmlProfileStatNumDocumentsWithTwoMatches, ltmVirtualServProfileVsName=ltmVirtualServProfileVsName, ltmUdpProfileStatAccepts=ltmUdpProfileStatAccepts, ltmOcspStaplingParametersProxyServerPool=ltmOcspStaplingParametersProxyServerPool, ltmTransAddrStatServerPktsIn=ltmTransAddrStatServerPktsIn, ltmHttpcompUriInclName=ltmHttpcompUriInclName, ltmFwAdminIpRuleStatEntry=ltmFwAdminIpRuleStatEntry, ltmDnsCacheForwardZoneNameServerForwardZoneName=ltmDnsCacheForwardZoneNameServerForwardZoneName, ltmLsnLogProfileTable=ltmLsnLogProfileTable, ltmFastHttpProfileStatV9Reqs=ltmFastHttpProfileStatV9Reqs, ltmXmlProfileNamespaceMappingsEntry=ltmXmlProfileNamespaceMappingsEntry, ltmPersistProfile=ltmPersistProfile)
