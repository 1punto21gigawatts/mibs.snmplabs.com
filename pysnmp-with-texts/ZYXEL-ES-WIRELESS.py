#
# PySNMP MIB module ZYXEL-ES-WIRELESS (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ZYXEL-ES-WIRELESS
# Produced by pysmi-0.3.4 at Wed May  1 15:49:38 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
MibIdentifier, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, ModuleIdentity, iso, Counter64, Gauge32, IpAddress, Counter32, Unsigned32, TimeTicks, NotificationType, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "ModuleIdentity", "iso", "Counter64", "Gauge32", "IpAddress", "Counter32", "Unsigned32", "TimeTicks", "NotificationType", "ObjectIdentity")
DisplayString, MacAddress, DateAndTime, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "MacAddress", "DateAndTime", "TextualConvention")
esMgmt, = mibBuilder.importSymbols("ZYXEL-ES-SMI", "esMgmt")
esWireless = ModuleIdentity((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 5))
if mibBuilder.loadTexts: esWireless.setLastUpdated('201009200000Z')
if mibBuilder.loadTexts: esWireless.setOrganization('Enterprise Solution Zyxel')
if mibBuilder.loadTexts: esWireless.setContactInfo('')
if mibBuilder.loadTexts: esWireless.setDescription('The sub tree for Wireless information')
wlanRadioTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 5, 1), )
if mibBuilder.loadTexts: wlanRadioTable.setStatus('current')
if mibBuilder.loadTexts: wlanRadioTable.setDescription('This table lists WLAN Radio information. Use chipIndex as the index of each entry')
wlanRadioEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 5, 1, 1), ).setIndexNames((0, "ZYXEL-ES-WIRELESS", "wlanRadioIndex"))
if mibBuilder.loadTexts: wlanRadioEntry.setStatus('current')
if mibBuilder.loadTexts: wlanRadioEntry.setDescription('An entry describing WLAN Radio information for each chip.')
wlanCurrentChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 36, 40, 44, 48, 52, 56, 60, 64, 100, 104, 108, 112, 116, 120, 124, 128, 132, 136, 140, 149, 153, 157, 161, 165))).clone(namedValues=NamedValues(("device_is_disable", 0), ("channel-01_2412mhz", 1), ("channel-02_2417mhz", 2), ("channel-03_2422mhz", 3), ("channel-04_2427mhz", 4), ("channel-05_2432mhz", 5), ("channel-06_2437mhz", 6), ("channel-07_2442mhz", 7), ("channel-08_2447mhz", 8), ("channel-09_2452mhz", 9), ("channel-10_2457mhz", 10), ("channel-11_2462mhz", 11), ("channel-12_2467mhz", 12), ("channel-13_2472mhz", 13), ("channel-36_5180mhz", 36), ("channel-40_5200mhz", 40), ("channel-44_5220mhz", 44), ("channel-48_5240mhz", 48), ("channel-52_5260mhz", 52), ("channel-56_5280mhz", 56), ("channel-60_5300mhz", 60), ("channel-64_5320mhz", 64), ("channel-100_5500mhz", 100), ("channel-104_5520mhz", 104), ("channel-108_5540mhz", 108), ("channel-112_5560mhz", 112), ("channel-116_5580mhz", 116), ("channel-120_5600mhz", 120), ("channel-124_5620mhz", 124), ("channel-128_5640mhz", 128), ("channel-132_5660mhz", 132), ("channel-136_5680mhz", 136), ("channel-140_5700mhz", 140), ("channel-149_5745mhz", 149), ("channel-153_5765mhz", 153), ("channel-157_5785mhz", 157), ("channel-161_5805mhz", 161), ("channel-165_5825mhz", 165)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanCurrentChannel.setStatus('current')
if mibBuilder.loadTexts: wlanCurrentChannel.setDescription('The current operating wireless channel.')
wlanStationCount = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 5, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStationCount.setStatus('current')
if mibBuilder.loadTexts: wlanStationCount.setDescription('The total numbers of associated stations')
wlanSupportedChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 5, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanSupportedChannel.setStatus('current')
if mibBuilder.loadTexts: wlanSupportedChannel.setDescription('The wireless channels supported by WLAN in this regulatory domain')
wlanMode = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mode_2_4G", 1), ("mode_5G", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanMode.setStatus('current')
if mibBuilder.loadTexts: wlanMode.setDescription('The control for WLAN radio mode.')
wlanChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 36, 40, 44, 48, 52, 56, 60, 64, 100, 104, 108, 112, 116, 120, 124, 128, 132, 136, 140, 149, 153, 157, 161, 165))).clone(namedValues=NamedValues(("channel-01_2412mhz", 1), ("channel-02_2417mhz", 2), ("channel-03_2422mhz", 3), ("channel-04_2427mhz", 4), ("channel-05_2432mhz", 5), ("channel-06_2437mhz", 6), ("channel-07_2442mhz", 7), ("channel-08_2447mhz", 8), ("channel-09_2452mhz", 9), ("channel-10_2457mhz", 10), ("channel-11_2462mhz", 11), ("channel-12_2467mhz", 12), ("channel-13_2472mhz", 13), ("channel-36_5180mhz", 36), ("channel-40_5200mhz", 40), ("channel-44_5220mhz", 44), ("channel-48_5240mhz", 48), ("channel-52_5260mhz", 52), ("channel-56_5280mhz", 56), ("channel-60_5300mhz", 60), ("channel-64_5320mhz", 64), ("channel-100_5500mhz", 100), ("channel-104_5520mhz", 104), ("channel-108_5540mhz", 108), ("channel-112_5560mhz", 112), ("channel-116_5580mhz", 116), ("channel-120_5600mhz", 120), ("channel-124_5620mhz", 124), ("channel-128_5640mhz", 128), ("channel-132_5660mhz", 132), ("channel-136_5680mhz", 136), ("channel-140_5700mhz", 140), ("channel-149_5745mhz", 149), ("channel-153_5765mhz", 153), ("channel-157_5785mhz", 157), ("channel-161_5805mhz", 161), ("channel-165_5825mhz", 165)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanChannel.setStatus('current')
if mibBuilder.loadTexts: wlanChannel.setDescription('The control for WLAN channel. When setting this parameter, the value should be a subset of all supported channel')
wlanRadioIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: wlanRadioIndex.setStatus('current')
if mibBuilder.loadTexts: wlanRadioIndex.setDescription('Index of WLAN Radio information for each chip.')
wlanStationTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 5, 2), )
if mibBuilder.loadTexts: wlanStationTable.setStatus('current')
if mibBuilder.loadTexts: wlanStationTable.setDescription('This table lists the associated stations.')
wlanStationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 5, 2, 1), ).setIndexNames((0, "ZYXEL-ES-WIRELESS", "stationIndex"))
if mibBuilder.loadTexts: wlanStationEntry.setStatus('current')
if mibBuilder.loadTexts: wlanStationEntry.setDescription('An entry describing the station information.')
stationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: stationIndex.setStatus('current')
if mibBuilder.loadTexts: stationIndex.setDescription('Index of stations.')
stationMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 5, 2, 1, 2), MacAddress().clone('public')).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationMacAddress.setStatus('current')
if mibBuilder.loadTexts: stationMacAddress.setDescription('The MAC Addresss of the station.')
stationAssociatedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 5, 2, 1, 3), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAssociatedTime.setStatus('current')
if mibBuilder.loadTexts: stationAssociatedTime.setDescription('The associated time of the station.')
stationSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 5, 2, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationSSID.setStatus('current')
if mibBuilder.loadTexts: stationSSID.setDescription('The associated ssid.')
wlanStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 5, 3), )
if mibBuilder.loadTexts: wlanStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: wlanStatisticsTable.setDescription('This table lists WLAN statistics information. Use chipIndex as the index of each entry')
wlanStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 5, 3, 1), ).setIndexNames((0, "ZYXEL-ES-WIRELESS", "wlanStatisticsIndex"))
if mibBuilder.loadTexts: wlanStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: wlanStatisticsEntry.setDescription('An entry describing WLAN statistics information.')
dot11FailedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 5, 3, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11FailedCount.setStatus('current')
if mibBuilder.loadTexts: dot11FailedCount.setDescription('This counter shall increment when an MSDU is not transmitted successfully due to the number of transmit attempts exceeding either the dot11ShortRetryLimit or dot11LongRetryLimit. ')
dot11RetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 5, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11RetryCount.setStatus('current')
if mibBuilder.loadTexts: dot11RetryCount.setDescription('This counter shall increment when an MSDU is successfully transmitted after one or more retransmissions.')
dot11ACKFailureCount = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 5, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ACKFailureCount.setStatus('current')
if mibBuilder.loadTexts: dot11ACKFailureCount.setDescription('This counter shall increment when an ACK is not received when expected.')
dot11ReceivedFragmentCount = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 5, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ReceivedFragmentCount.setStatus('current')
if mibBuilder.loadTexts: dot11ReceivedFragmentCount.setDescription('This counter shall be incremented for each successful received MPDU of type Data or Management.')
dot11TransmittedFrameCount = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 5, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11TransmittedFrameCount.setStatus('current')
if mibBuilder.loadTexts: dot11TransmittedFrameCount.setDescription('This counter shall increment for each successfully transmitted MSDU.')
dot11ReceivedPktCount = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 5, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ReceivedPktCount.setStatus('current')
if mibBuilder.loadTexts: dot11ReceivedPktCount.setDescription('This counter shall increment for each successfully received packets.')
dot11TransmittedPktCount = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 5, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11TransmittedPktCount.setStatus('current')
if mibBuilder.loadTexts: dot11TransmittedPktCount.setDescription('This counter shall increment for each successfully transmitted packets.')
wlanStatisticsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 5, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: wlanStatisticsIndex.setStatus('current')
if mibBuilder.loadTexts: wlanStatisticsIndex.setDescription('Index of WLAN statistics information.')
wlanTraps = ObjectIdentity((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 5, 4))
if mibBuilder.loadTexts: wlanTraps.setStatus('current')
if mibBuilder.loadTexts: wlanTraps.setDescription('The subtree for WIRELESS')
trapsControl = ObjectIdentity((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 5, 4, 1))
if mibBuilder.loadTexts: trapsControl.setStatus('current')
if mibBuilder.loadTexts: trapsControl.setDescription('The subtree for CAPWAP')
trapsFormat = ObjectIdentity((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 5, 4, 2))
if mibBuilder.loadTexts: trapsFormat.setStatus('current')
if mibBuilder.loadTexts: trapsFormat.setDescription('The subtree for CAPWAP')
trapsItems = ObjectIdentity((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 5, 4, 3))
if mibBuilder.loadTexts: trapsItems.setStatus('current')
if mibBuilder.loadTexts: trapsItems.setDescription('The subtree for CAPWAP')
wlanTrapsControl = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 5, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanTrapsControl.setStatus('current')
if mibBuilder.loadTexts: wlanTrapsControl.setDescription('Controls wireless group traps enable or disable.')
trapGenericMessage = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 5, 4, 2, 1), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapGenericMessage.setStatus('current')
if mibBuilder.loadTexts: trapGenericMessage.setDescription('Provide generic information on traps.')
trapMACAddress = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 5, 4, 2, 2), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapMACAddress.setStatus('current')
if mibBuilder.loadTexts: trapMACAddress.setDescription('Represents MAC address of the device or the host which triggers the trap.')
trapWlanSSID = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 5, 4, 2, 3), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapWlanSSID.setStatus('current')
if mibBuilder.loadTexts: trapWlanSSID.setDescription('The SSID name which the wireless client associates.')
wlanStaAssociation = NotificationType((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 5, 4, 3, 1))
if mibBuilder.loadTexts: wlanStaAssociation.setStatus('current')
if mibBuilder.loadTexts: wlanStaAssociation.setDescription('Wireless client assocication notification.')
wlanStaDisassociation = NotificationType((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 5, 4, 3, 2))
if mibBuilder.loadTexts: wlanStaDisassociation.setStatus('current')
if mibBuilder.loadTexts: wlanStaDisassociation.setDescription('Wireless client disassocication notification.')
wlanStaAuthFail = NotificationType((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 5, 4, 3, 3))
if mibBuilder.loadTexts: wlanStaAuthFail.setStatus('current')
if mibBuilder.loadTexts: wlanStaAuthFail.setDescription('Wireless client authentication failed.')
wlanTotalStationCount = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 5, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanTotalStationCount.setStatus('current')
if mibBuilder.loadTexts: wlanTotalStationCount.setDescription('The total numbers of associated stations')
mibBuilder.exportSymbols("ZYXEL-ES-WIRELESS", wlanTotalStationCount=wlanTotalStationCount, wlanStatisticsEntry=wlanStatisticsEntry, wlanStatisticsTable=wlanStatisticsTable, wlanStationTable=wlanStationTable, stationIndex=stationIndex, stationMacAddress=stationMacAddress, wlanStationEntry=wlanStationEntry, wlanStaDisassociation=wlanStaDisassociation, wlanCurrentChannel=wlanCurrentChannel, trapGenericMessage=trapGenericMessage, wlanStaAuthFail=wlanStaAuthFail, wlanSupportedChannel=wlanSupportedChannel, wlanRadioIndex=wlanRadioIndex, dot11ReceivedPktCount=dot11ReceivedPktCount, wlanRadioEntry=wlanRadioEntry, stationSSID=stationSSID, PYSNMP_MODULE_ID=esWireless, trapWlanSSID=trapWlanSSID, trapsControl=trapsControl, dot11ReceivedFragmentCount=dot11ReceivedFragmentCount, dot11RetryCount=dot11RetryCount, wlanTrapsControl=wlanTrapsControl, wlanChannel=wlanChannel, wlanStationCount=wlanStationCount, dot11ACKFailureCount=dot11ACKFailureCount, wlanRadioTable=wlanRadioTable, dot11TransmittedPktCount=dot11TransmittedPktCount, dot11FailedCount=dot11FailedCount, wlanStatisticsIndex=wlanStatisticsIndex, trapMACAddress=trapMACAddress, trapsFormat=trapsFormat, wlanTraps=wlanTraps, stationAssociatedTime=stationAssociatedTime, dot11TransmittedFrameCount=dot11TransmittedFrameCount, wlanMode=wlanMode, trapsItems=trapsItems, esWireless=esWireless, wlanStaAssociation=wlanStaAssociation)
