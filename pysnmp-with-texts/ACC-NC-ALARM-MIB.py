#
# PySNMP MIB module ACC-NC-ALARM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ACC-NC-ALARM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:11:26 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
accNetController, = mibBuilder.importSymbols("ANDOVER-CONTROLS-MIB", "accNetController")
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Bits, ModuleIdentity, NotificationType, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Gauge32, ObjectIdentity, IpAddress, Integer32, Unsigned32, Counter32, Counter64, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "ModuleIdentity", "NotificationType", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Gauge32", "ObjectIdentity", "IpAddress", "Integer32", "Unsigned32", "Counter32", "Counter64", "TimeTicks")
DateAndTime, RowStatus, StorageType, TruthValue, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "RowStatus", "StorageType", "TruthValue", "DisplayString", "TextualConvention")
accAlarmMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 10829, 5, 2, 1))
accAlarmMIB.setRevisions(('2002-10-30 09:46',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: accAlarmMIB.setRevisionsDescriptions(('Revision 1.0',))
if mibBuilder.loadTexts: accAlarmMIB.setLastUpdated('200210300946Z')
if mibBuilder.loadTexts: accAlarmMIB.setOrganization('Andover Controls Corporation')
if mibBuilder.loadTexts: accAlarmMIB.setContactInfo('Technical Support Andover Controls Corporation 300 Brickstone Square Andover, MA 01810 USA 978-470-0555')
if mibBuilder.loadTexts: accAlarmMIB.setDescription('This MIB module defines MIB objects and notifications which are mapped from Andover Controls Continuum Alarms')
alarmListMax = MibScalar((1, 3, 6, 1, 4, 1, 10829, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmListMax.setStatus('current')
if mibBuilder.loadTexts: alarmListMax.setDescription('Maximum number of elements in the Alarm List table not including internal alarms, such as Controller Reset, Alarm Table Overflow.')
alarmList = MibIdentifier((1, 3, 6, 1, 4, 1, 10829, 5, 2, 1, 2))
alarmTable = MibTable((1, 3, 6, 1, 4, 1, 10829, 5, 2, 1, 2, 2), )
if mibBuilder.loadTexts: alarmTable.setStatus('current')
if mibBuilder.loadTexts: alarmTable.setDescription('Description.')
alarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10829, 5, 2, 1, 2, 2, 1), ).setIndexNames((0, "ACC-NC-ALARM-MIB", "alarmIENAD"), (0, "ACC-NC-ALARM-MIB", "alarmLink"))
if mibBuilder.loadTexts: alarmEntry.setStatus('current')
if mibBuilder.loadTexts: alarmEntry.setDescription('Description.')
alarmControllerName = MibTableColumn((1, 3, 6, 1, 4, 1, 10829, 5, 2, 1, 2, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmControllerName.setStatus('current')
if mibBuilder.loadTexts: alarmControllerName.setDescription('NetController name upon which this table exists.')
alarmInfinetControllerName = MibTableColumn((1, 3, 6, 1, 4, 1, 10829, 5, 2, 1, 2, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmInfinetControllerName.setStatus('current')
if mibBuilder.loadTexts: alarmInfinetControllerName.setDescription('Infinet controller name upon which the point in alarm resides. This could also be null, if the point is on the NetController itself.')
alarmPointName = MibTableColumn((1, 3, 6, 1, 4, 1, 10829, 5, 2, 1, 2, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmPointName.setStatus('current')
if mibBuilder.loadTexts: alarmPointName.setDescription('Continuum point name.')
alarmPointDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 10829, 5, 2, 1, 2, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmPointDescription.setStatus('current')
if mibBuilder.loadTexts: alarmPointDescription.setDescription('Continuum point description.')
alarmAlarmName = MibTableColumn((1, 3, 6, 1, 4, 1, 10829, 5, 2, 1, 2, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmAlarmName.setStatus('current')
if mibBuilder.loadTexts: alarmAlarmName.setDescription('Continuum alarm name.')
alarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 10829, 5, 2, 1, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("null", 0), ("rtn", 1), ("alm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmState.setStatus('current')
if mibBuilder.loadTexts: alarmState.setDescription('This is the state of the corresponding Continuum alarm as was learned from the last alarm transition.')
alarmAlmTime = MibTableColumn((1, 3, 6, 1, 4, 1, 10829, 5, 2, 1, 2, 2, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmAlmTime.setStatus('current')
if mibBuilder.loadTexts: alarmAlmTime.setDescription('Time stamp when point entered alarm (ALM) state. This could also be null, if no transition to ALM occured.')
alarmAlmValue = MibTableColumn((1, 3, 6, 1, 4, 1, 10829, 5, 2, 1, 2, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmAlmValue.setStatus('current')
if mibBuilder.loadTexts: alarmAlmValue.setDescription('Value when point went into alarm (ALM) state. This could also be null, if no transition to ALM occured.')
alarmRtnTime = MibTableColumn((1, 3, 6, 1, 4, 1, 10829, 5, 2, 1, 2, 2, 1, 9), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmRtnTime.setStatus('current')
if mibBuilder.loadTexts: alarmRtnTime.setDescription('Time stamp when point returned to normal (RTN) state. This could also be null, if no transition to RTN occured.')
alarmRtnValue = MibTableColumn((1, 3, 6, 1, 4, 1, 10829, 5, 2, 1, 2, 2, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmRtnValue.setStatus('current')
if mibBuilder.loadTexts: alarmRtnValue.setDescription('Value when point state returned to normal (RTN). This could also be null, if no transition to RTN occured.')
alarmIENAD = MibTableColumn((1, 3, 6, 1, 4, 1, 10829, 5, 2, 1, 2, 2, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmIENAD.setStatus('current')
if mibBuilder.loadTexts: alarmIENAD.setDescription('IENAD that identifies point in IE table; 0 for internal alarm.')
alarmLink = MibTableColumn((1, 3, 6, 1, 4, 1, 10829, 5, 2, 1, 2, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmLink.setStatus('current')
if mibBuilder.loadTexts: alarmLink.setDescription('Number identifying which Continuum alarm link 1-8; 1 for Controller Reset alarm; 2 for Alarm Table Overflow')
alarmTransitionEvent = NotificationType((1, 3, 6, 1, 4, 1, 10829, 5, 2, 1, 3)).setObjects(("ACC-NC-ALARM-MIB", "alarmControllerName"), ("ACC-NC-ALARM-MIB", "alarmInfinetControllerName"), ("ACC-NC-ALARM-MIB", "alarmPointName"), ("ACC-NC-ALARM-MIB", "alarmPointDescription"), ("ACC-NC-ALARM-MIB", "alarmAlarmName"), ("ACC-NC-ALARM-MIB", "alarmState"), ("ACC-NC-ALARM-MIB", "alarmAlmTime"), ("ACC-NC-ALARM-MIB", "alarmAlmValue"), ("ACC-NC-ALARM-MIB", "alarmRtnTime"), ("ACC-NC-ALARM-MIB", "alarmRtnValue"))
if mibBuilder.loadTexts: alarmTransitionEvent.setStatus('current')
if mibBuilder.loadTexts: alarmTransitionEvent.setDescription('This is the row of the alarm table that is sent as a notification to an SNMP manager.')
alarmConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 10829, 5, 2, 1, 4))
alarmCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 10829, 5, 2, 1, 4, 1))
alarmBasicCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 10829, 5, 2, 1, 4, 1, 1)).setObjects(("ACC-NC-ALARM-MIB", "alarmGroup"), ("ACC-NC-ALARM-MIB", "alarmEvents"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alarmBasicCompliance = alarmBasicCompliance.setStatus('current')
if mibBuilder.loadTexts: alarmBasicCompliance.setDescription('Module Compliance for agent. Agent must support these groups.')
alarmGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 10829, 5, 2, 1, 4, 2))
alarmGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 10829, 5, 2, 1, 4, 2, 1)).setObjects(("ACC-NC-ALARM-MIB", "alarmListMax"), ("ACC-NC-ALARM-MIB", "alarmControllerName"), ("ACC-NC-ALARM-MIB", "alarmInfinetControllerName"), ("ACC-NC-ALARM-MIB", "alarmPointName"), ("ACC-NC-ALARM-MIB", "alarmPointDescription"), ("ACC-NC-ALARM-MIB", "alarmAlarmName"), ("ACC-NC-ALARM-MIB", "alarmState"), ("ACC-NC-ALARM-MIB", "alarmAlmTime"), ("ACC-NC-ALARM-MIB", "alarmAlmValue"), ("ACC-NC-ALARM-MIB", "alarmRtnTime"), ("ACC-NC-ALARM-MIB", "alarmRtnValue"), ("ACC-NC-ALARM-MIB", "alarmIENAD"), ("ACC-NC-ALARM-MIB", "alarmLink"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alarmGroup = alarmGroup.setStatus('current')
if mibBuilder.loadTexts: alarmGroup.setDescription('Objects the agent must support.')
alarmEvents = NotificationGroup((1, 3, 6, 1, 4, 1, 10829, 5, 2, 1, 4, 2, 2)).setObjects(("ACC-NC-ALARM-MIB", "alarmTransitionEvent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alarmEvents = alarmEvents.setStatus('current')
if mibBuilder.loadTexts: alarmEvents.setDescription('Events the agent must support.')
mibBuilder.exportSymbols("ACC-NC-ALARM-MIB", alarmIENAD=alarmIENAD, alarmLink=alarmLink, PYSNMP_MODULE_ID=accAlarmMIB, alarmList=alarmList, alarmTable=alarmTable, alarmAlarmName=alarmAlarmName, alarmListMax=alarmListMax, accAlarmMIB=accAlarmMIB, alarmState=alarmState, alarmEvents=alarmEvents, alarmInfinetControllerName=alarmInfinetControllerName, alarmPointName=alarmPointName, alarmConformance=alarmConformance, alarmRtnTime=alarmRtnTime, alarmCompliances=alarmCompliances, alarmEntry=alarmEntry, alarmAlmValue=alarmAlmValue, alarmGroup=alarmGroup, alarmTransitionEvent=alarmTransitionEvent, alarmBasicCompliance=alarmBasicCompliance, alarmRtnValue=alarmRtnValue, alarmControllerName=alarmControllerName, alarmPointDescription=alarmPointDescription, alarmGroups=alarmGroups, alarmAlmTime=alarmAlmTime)
