#
# PySNMP MIB module CNT21-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CNT21-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:25:17 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint")
cnt2Mib2, = mibBuilder.importSymbols("CNT2-MIB", "cnt2Mib2")
IANAifType, = mibBuilder.importSymbols("IANAifType-MIB", "IANAifType")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
IpAddress, MibIdentifier, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Integer32, ModuleIdentity, Counter32, NotificationType, ObjectIdentity, Gauge32, Bits, Counter64, TimeTicks, enterprises = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "MibIdentifier", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Integer32", "ModuleIdentity", "Counter32", "NotificationType", "ObjectIdentity", "Gauge32", "Bits", "Counter64", "TimeTicks", "enterprises")
DisplayString, PhysAddress, TextualConvention, TruthValue, TimeStamp = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "PhysAddress", "TextualConvention", "TruthValue", "TimeStamp")
cnt2Interface = ModuleIdentity((1, 3, 6, 1, 4, 1, 333, 2, 1, 2))
cnt2Interface.setRevisions(('1901-10-23 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: cnt2Interface.setRevisionsDescriptions(('Created.',))
if mibBuilder.loadTexts: cnt2Interface.setLastUpdated('0110230000Z')
if mibBuilder.loadTexts: cnt2Interface.setOrganization('Computer Network Technology Corporation')
if mibBuilder.loadTexts: cnt2Interface.setContactInfo('Computer Network Technology Technical Support 6000 Nathan Lane North Plymouth, Minnesota 55442 telephone: (763) 268-6000 fax: (763) 268-6800 support: 1-800-NET-TECH')
if mibBuilder.loadTexts: cnt2Interface.setDescription('This defines the CNT Interface MIB.')
cnt2Interfaces = MibIdentifier((1, 3, 6, 1, 4, 1, 333, 2, 1, 2))
cnt2IfNumTable = MibTable((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 1), )
if mibBuilder.loadTexts: cnt2IfNumTable.setStatus('current')
if mibBuilder.loadTexts: cnt2IfNumTable.setDescription('A list of interface entries. The number of entries is given by the value of cnt2IfNumber.')
cnt2IfNumEntry = MibTableRow((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 1, 1), ).setIndexNames((0, "CNT21-MIB", "cnt2IfNumIndex"))
if mibBuilder.loadTexts: cnt2IfNumEntry.setStatus('current')
if mibBuilder.loadTexts: cnt2IfNumEntry.setDescription('An interface entry containing objects at the subnetwork layer and below for a particular interface.')
cnt2IfNumIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2IfNumIndex.setStatus('current')
if mibBuilder.loadTexts: cnt2IfNumIndex.setDescription('The slot number 1-12 for this table entry.')
cnt2IfNum = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2IfNum.setStatus('current')
if mibBuilder.loadTexts: cnt2IfNum.setDescription('The number of network interfaces (regardless of their current state) present on this slot.')
cnt2IfTable = MibTable((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 2), )
if mibBuilder.loadTexts: cnt2IfTable.setStatus('deprecated')
if mibBuilder.loadTexts: cnt2IfTable.setDescription('A list of interface entries. The number of entries is given by the value of cnt2IfNumber.')
cnt2IfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 2, 1), ).setIndexNames((0, "CNT21-MIB", "cnt2IfSlotIndex"), (0, "CNT21-MIB", "cnt2IfIndex"))
if mibBuilder.loadTexts: cnt2IfEntry.setStatus('deprecated')
if mibBuilder.loadTexts: cnt2IfEntry.setDescription('An interface entry containing objects at the subnetwork layer and below for a particular interface.')
cnt2IfSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2IfSlotIndex.setStatus('deprecated')
if mibBuilder.loadTexts: cnt2IfSlotIndex.setDescription('The slot number 1-12 for this table entry.')
cnt2IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2IfIndex.setStatus('deprecated')
if mibBuilder.loadTexts: cnt2IfIndex.setDescription("A unique value for each interface. Its value ranges between 1 and the value of cnt2IfNumber. The value for each interface must remain constant at least from one re-initialization of the entity's network management system to the next re- initialization.")
cnt2IfDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2IfDescr.setStatus('deprecated')
if mibBuilder.loadTexts: cnt2IfDescr.setDescription('A textual string containing information about the interface. This string should include the name of the manufacturer, the product name and the version of the hardware interface.')
cnt2IfType = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 256, 257, 258, 259, 260, 261, 262, 263))).clone(namedValues=NamedValues(("other", 1), ("regular1822", 2), ("hdh1822", 3), ("ddn-x25", 4), ("rfc877-x25", 5), ("ethernet-csmacd", 6), ("iso88023-csmacd", 7), ("iso88024-tokenBus", 8), ("iso88025-tokenRing", 9), ("iso88026-man", 10), ("starLan", 11), ("proteon-10Mbit", 12), ("proteon-80Mbit", 13), ("hyperchannel", 14), ("fddi", 15), ("lapb", 16), ("sdlc", 17), ("ds1", 18), ("e1", 19), ("basicISDN", 20), ("primaryISDN", 21), ("propPointToPointSerial", 22), ("ppp", 23), ("softwareLoopback", 24), ("eon", 25), ("ethernet-3Mbit", 26), ("nsip", 27), ("slip", 28), ("ultra", 29), ("ds3", 30), ("sip", 31), ("frame-relay", 32), ("rs232", 33), ("parallel-port", 34), ("arcnet", 35), ("arcnet-plus", 36), ("atm", 37), ("miox25", 38), ("sonet", 39), ("x25ple", 40), ("iso8802-llc", 41), ("localtalk", 42), ("smds-dxi", 43), ("frame-relay-dce", 44), ("v35", 45), ("hssi", 46), ("hippi", 47), ("modem", 48), ("atm-all5", 49), ("sonet-path", 50), ("sonet-vt", 51), ("smds-intercarrier", 52), ("prop-virtual-term", 53), ("prop-multiplexing", 54), ("ieee80212", 55), ("fibreChannel", 56), ("hippiInterface", 57), ("frameRelayInterconnect", 58), ("aflane8023", 59), ("aflane8025", 60), ("cctEmul", 61), ("fastEther", 62), ("isdn", 63), ("v11", 64), ("v36", 65), ("g703at64k", 66), ("g703at2mb", 67), ("qllc", 68), ("fastEtherFX", 69), ("channel", 70), ("ieee80211", 71), ("ibm370parChan", 72), ("escon", 73), ("dlsw", 74), ("isdns", 75), ("isdnu", 76), ("lapd", 77), ("ipSwitch", 78), ("rsrb", 79), ("atmLogical", 80), ("ds0", 81), ("ds0Bundle", 82), ("bsc", 83), ("async", 84), ("cnr", 85), ("iso88025Dtr", 86), ("eplrs", 87), ("arap", 88), ("propCnls", 89), ("hostPad", 90), ("termPad", 91), ("frameRealyMPI", 92), ("x213", 93), ("adsl", 94), ("radsl", 95), ("sdsl", 96), ("vdsl", 97), ("iso88025CRFPInt", 98), ("myrinet", 99), ("voiceEM", 100), ("voiceFXO", 101), ("voiceFXS", 102), ("voiceEncap", 103), ("voiceOverIp", 104), ("atmDxi", 105), ("atmFuni", 106), ("atmIma", 107), ("pppMultilinkBundle", 108), ("ipOverCdlc", 109), ("ipOverClaw", 110), ("stackToStack", 111), ("virtualIpAddress", 112), ("mpc", 113), ("ipOverAtm", 114), ("iso88025Fiber", 115), ("tdlc", 116), ("gigabitEthernet", 117), ("escon-local", 256), ("escon-remote", 257), ("switch-unicast", 258), ("switch-multicast", 259), ("switch-broadcast", 260), ("escon-srdf", 261), ("scsi-2", 262), ("scsi-3", 263)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2IfType.setStatus('deprecated')
if mibBuilder.loadTexts: cnt2IfType.setDescription("The type of interface, distinguished according to the physical/link protocol(s) immediately `below' the network layer in the protocol stack.")
cnt2IfMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2IfMtu.setStatus('deprecated')
if mibBuilder.loadTexts: cnt2IfMtu.setDescription('The size of the largest datagram which can be sent/received on the interface, specified in octets. For interfaces that are used for transmitting network datagrams, this is the size of the largest network datagram that can be sent on the interface.')
cnt2IfSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2IfSpeed.setStatus('deprecated')
if mibBuilder.loadTexts: cnt2IfSpeed.setDescription("An estimate of the interface's current bandwidth in bits per second. For interfaces which do not vary in bandwidth or for those where no accurate estimation can be made, this object should contain the nominal bandwidth.")
cnt2IfPhysAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 2, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2IfPhysAddress.setStatus('deprecated')
if mibBuilder.loadTexts: cnt2IfPhysAddress.setDescription("The interface's address at the protocol layer immediately `below' the network layer in the protocol stack. For interfaces which do not have such an address (e.g., a serial line), this object should contain an octet string of zero length.")
cnt2IfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnt2IfAdminStatus.setStatus('deprecated')
if mibBuilder.loadTexts: cnt2IfAdminStatus.setDescription('The desired state of the interface. The testing(3) state indicates that no operational packets can be passed.')
cnt2IfOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3), ("unknown", 4), ("dormant", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2IfOperStatus.setStatus('deprecated')
if mibBuilder.loadTexts: cnt2IfOperStatus.setDescription('The current operational state of the interface. The testing(3) state indicates that no operational packets can be passed.')
cnt2IfLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 2, 1, 10), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2IfLastChange.setStatus('deprecated')
if mibBuilder.loadTexts: cnt2IfLastChange.setDescription('The value of sysUpTime at the time the interface entered its current operational state. If the current state was entered prior to the last re- initialization of the local network management subsystem, then this object contains a zero value.')
cnt2IfInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2IfInOctets.setStatus('deprecated')
if mibBuilder.loadTexts: cnt2IfInOctets.setDescription('The total number of octets received on the interface, including framing characters.')
cnt2IfInUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2IfInUcastPkts.setStatus('deprecated')
if mibBuilder.loadTexts: cnt2IfInUcastPkts.setDescription('The number of subnetwork-unicast packets delivered to a higher-layer protocol.')
cnt2IfInNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2IfInNUcastPkts.setStatus('deprecated')
if mibBuilder.loadTexts: cnt2IfInNUcastPkts.setDescription('The number of non-unicast (i.e., subnetwork- broadcast or subnetwork-multicast) packets delivered to a higher-layer protocol.')
cnt2IfInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2IfInDiscards.setStatus('deprecated')
if mibBuilder.loadTexts: cnt2IfInDiscards.setDescription('The number of inbound packets which were chosen to be discarded even though no errors had been detected to prevent their being deliverable to a higher-layer protocol. One possible reason for discarding such a packet could be to free up buffer space.')
cnt2IfInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2IfInErrors.setStatus('deprecated')
if mibBuilder.loadTexts: cnt2IfInErrors.setDescription('The number of inbound packets that contained errors preventing them from being deliverable to a higher-layer protocol.')
cnt2IfInUnknownProtos = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2IfInUnknownProtos.setStatus('deprecated')
if mibBuilder.loadTexts: cnt2IfInUnknownProtos.setDescription('The number of packets received via the interface which were discarded because of an unknown or unsupported protocol.')
cnt2IfOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2IfOutOctets.setStatus('deprecated')
if mibBuilder.loadTexts: cnt2IfOutOctets.setDescription('The total number of octets transmitted out of the interface, including framing characters.')
cnt2IfOutUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2IfOutUcastPkts.setStatus('deprecated')
if mibBuilder.loadTexts: cnt2IfOutUcastPkts.setDescription('The total number of packets that higher-level protocols requested be transmitted to a subnetwork-unicast address, including those that were discarded or not sent.')
cnt2IfOutNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2IfOutNUcastPkts.setStatus('deprecated')
if mibBuilder.loadTexts: cnt2IfOutNUcastPkts.setDescription('The total number of packets that higher-level protocols requested be transmitted to a non- unicast (i.e., a subnetwork-broadcast or subnetwork-multicast) address, including those that were discarded or not sent.')
cnt2IfOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2IfOutDiscards.setStatus('deprecated')
if mibBuilder.loadTexts: cnt2IfOutDiscards.setDescription('The number of outbound packets which were chosen to be discarded even though no errors had been detected to prevent their being transmitted. One possible reason for discarding such a packet could be to free up buffer space.')
cnt2IfOutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2IfOutErrors.setStatus('deprecated')
if mibBuilder.loadTexts: cnt2IfOutErrors.setDescription('The number of outbound packets that could not be transmitted because of errors.')
cnt2IfOutQLen = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 2, 1, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2IfOutQLen.setStatus('deprecated')
if mibBuilder.loadTexts: cnt2IfOutQLen.setDescription('The length of the output packet queue (in packets).')
cnt2IfSpecific = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 2, 1, 23), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2IfSpecific.setStatus('deprecated')
if mibBuilder.loadTexts: cnt2IfSpecific.setDescription('A reference to MIB definitions specific to the particular media being used to realize the interface. For example, if the interface is realized by an ethernet, then the value of this object refers to a document defining objects specific to ethernet. If this information is not present, its value should be set to the OBJECT IDENTIFIER { 0 0 }, which is a syntatically valid object identifier, and any conformant implementation of ASN.1 and BER must be able to generate and recognize this value.')
cnt2XIfTable = MibTable((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 3), )
if mibBuilder.loadTexts: cnt2XIfTable.setStatus('current')
if mibBuilder.loadTexts: cnt2XIfTable.setDescription('A list of interface entries. The number of entries is given by the value of cnt2XIfNumber.')
cnt2XIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 3, 1), ).setIndexNames((0, "CNT21-MIB", "cnt2XIfSlotIndex"), (0, "CNT21-MIB", "cnt2XIfIndex"))
if mibBuilder.loadTexts: cnt2XIfEntry.setStatus('current')
if mibBuilder.loadTexts: cnt2XIfEntry.setDescription('An interface entry containing objects at the subnetwork layer and below for a particular interface.')
cnt2XIfSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2XIfSlotIndex.setStatus('current')
if mibBuilder.loadTexts: cnt2XIfSlotIndex.setDescription('The slot number 1-4 for this table entry.')
cnt2XIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2XIfIndex.setStatus('current')
if mibBuilder.loadTexts: cnt2XIfIndex.setDescription("A unique value for each interface. Its value ranges between 1 and the value of cnt2IfNumber. The value for each interface must remain constant at least from one re-initialization of the entity's network management system to the next re- initialization.")
cnt2XIfDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2XIfDescr.setStatus('current')
if mibBuilder.loadTexts: cnt2XIfDescr.setDescription('A textual string containing information about the interface. This string should include the name of the manufacturer, the product name and the version of the hardware interface.')
cnt2XIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2XIfName.setStatus('current')
if mibBuilder.loadTexts: cnt2XIfName.setDescription('A textual string containing information about the interface. This string should include the name of the manufacturer, the product name and the version of the hardware interface.')
cnt2XIfIANAType = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 3, 1, 5), IANAifType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2XIfIANAType.setStatus('current')
if mibBuilder.loadTexts: cnt2XIfIANAType.setDescription('The type of interface. Additional values for ifType are assigned by the Internet Assigned Numbers Authority (IANA), through updating the syntax of the IANAifType textual convention.')
cnt2XIfCntType = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 256, 257, 258, 259, 260, 261, 262, 263))).clone(namedValues=NamedValues(("other", 1), ("regular1822", 2), ("hdh1822", 3), ("ddn-x25", 4), ("rfc877-x25", 5), ("ethernet-csmacd", 6), ("iso88023-csmacd", 7), ("iso88024-tokenBus", 8), ("iso88025-tokenRing", 9), ("iso88026-man", 10), ("starLan", 11), ("proteon-10Mbit", 12), ("proteon-80Mbit", 13), ("hyperchannel", 14), ("fddi", 15), ("lapb", 16), ("sdlc", 17), ("ds1", 18), ("e1", 19), ("basicISDN", 20), ("primaryISDN", 21), ("propPointToPointSerial", 22), ("ppp", 23), ("softwareLoopback", 24), ("eon", 25), ("ethernet-3Mbit", 26), ("nsip", 27), ("slip", 28), ("ultra", 29), ("ds3", 30), ("sip", 31), ("frame-relay", 32), ("rs232", 33), ("parallel-port", 34), ("arcnet", 35), ("arcnet-plus", 36), ("atm", 37), ("miox25", 38), ("sonet", 39), ("x25ple", 40), ("iso8802-llc", 41), ("localtalk", 42), ("smds-dxi", 43), ("frame-relay-dce", 44), ("v35", 45), ("hssi", 46), ("hippi", 47), ("modem", 48), ("atm-all5", 49), ("sonet-path", 50), ("sonet-vt", 51), ("smds-intercarrier", 52), ("prop-virtual-term", 53), ("prop-multiplexing", 54), ("ieee80212", 55), ("fibreChannel", 56), ("hippiInterface", 57), ("frameRelayInterconnect", 58), ("aflane8023", 59), ("aflane8025", 60), ("cctEmul", 61), ("fastEther", 62), ("isdn", 63), ("v11", 64), ("v36", 65), ("g703at64k", 66), ("g703at2mb", 67), ("qllc", 68), ("fastEtherFX", 69), ("channel", 70), ("ieee80211", 71), ("ibm370parChan", 72), ("escon", 73), ("dlsw", 74), ("isdns", 75), ("isdnu", 76), ("lapd", 77), ("ipSwitch", 78), ("rsrb", 79), ("atmLogical", 80), ("ds0", 81), ("ds0Bundle", 82), ("bsc", 83), ("async", 84), ("cnr", 85), ("iso88025Dtr", 86), ("eplrs", 87), ("arap", 88), ("propCnls", 89), ("hostPad", 90), ("termPad", 91), ("frameRealyMPI", 92), ("x213", 93), ("adsl", 94), ("radsl", 95), ("sdsl", 96), ("vdsl", 97), ("iso88025CRFPInt", 98), ("myrinet", 99), ("voiceEM", 100), ("voiceFXO", 101), ("voiceFXS", 102), ("voiceEncap", 103), ("voiceOverIp", 104), ("atmDxi", 105), ("atmFuni", 106), ("atmIma", 107), ("pppMultilinkBundle", 108), ("ipOverCdlc", 109), ("ipOverClaw", 110), ("stackToStack", 111), ("virtualIpAddress", 112), ("mpc", 113), ("ipOverAtm", 114), ("iso88025Fiber", 115), ("tdlc", 116), ("gigabitEthernet", 117), ("escon-local", 256), ("escon-remote", 257), ("switch-unicast", 258), ("switch-multicast", 259), ("switch-broadcast", 260), ("escon-srdf", 261), ("scsi-2", 262), ("scsi-3", 263)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2XIfCntType.setStatus('current')
if mibBuilder.loadTexts: cnt2XIfCntType.setDescription("The type of interface, distinguished according to the physical/link protocol(s) immediately `below' the network layer in the protocol stack.")
cnt2XIfMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2XIfMtu.setStatus('current')
if mibBuilder.loadTexts: cnt2XIfMtu.setDescription('The size of the largest datagram which can be sent/received on the interface, specified in octets. For interfaces that are used for transmitting network datagrams, this is the size of the largest network datagram that can be sent on the interface.')
cnt2XIfSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 3, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2XIfSpeed.setStatus('current')
if mibBuilder.loadTexts: cnt2XIfSpeed.setDescription("An estimate of the interface's current bandwidth in bits per second. For interfaces which do not vary in bandwidth or for those where no accurate estimation can be made, this object should contain the nominal bandwidth.")
cnt2XIfPhysAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 3, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2XIfPhysAddress.setStatus('current')
if mibBuilder.loadTexts: cnt2XIfPhysAddress.setDescription("The interface's address at the protocol layer immediately `below' the network layer in the protocol stack. For interfaces which do not have such an address (e.g., a serial line), this object should contain an octet string of zero length.")
cnt2XIfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnt2XIfAdminStatus.setStatus('current')
if mibBuilder.loadTexts: cnt2XIfAdminStatus.setDescription('The desired state of the interface. The testing(3) state indicates that no operational packets can be passed.')
cnt2XIfOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3), ("unknown", 4), ("dormant", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2XIfOperStatus.setStatus('current')
if mibBuilder.loadTexts: cnt2XIfOperStatus.setDescription('The current operational state of the interface. The testing(3) state indicates that no operational packets can be passed.')
cnt2XIfLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 3, 1, 12), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2XIfLastChange.setStatus('current')
if mibBuilder.loadTexts: cnt2XIfLastChange.setDescription('The value of sysUpTime at the time the interface entered its current operational state. If the current state was entered prior to the last re- initialization of the local network management subsystem, then this object contains a zero value.')
cnt2XIfLinkUpDownTrapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnt2XIfLinkUpDownTrapEnable.setStatus('current')
if mibBuilder.loadTexts: cnt2XIfLinkUpDownTrapEnable.setDescription("Indicates whether linkUp/linkDown traps should be generated for this interface. By default, this object should have the value enabled(1) for interfaces which do not operate on 'top' of any other interface (as defined in the ifStackTable), and disabled(2) otherwise.")
cnt2XIfPromiscuousMode = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 3, 1, 14), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnt2XIfPromiscuousMode.setStatus('current')
if mibBuilder.loadTexts: cnt2XIfPromiscuousMode.setDescription('This object has a value of false(2) if this interface only accepts packets/frames that are addressed to this station. This object has a value of true(1) when the station accepts all packets/frames transmitted on the media. The value true(1) is only legal on certain types of media. If legal, setting this object to a value of true(1) may require the interface to be reset before becoming effective. The value of ifPromiscuousMode does not affect the reception of broadcast and multicast packets/frames by the interface.')
cnt2XIfConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 3, 1, 15), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2XIfConnectorType.setStatus('current')
if mibBuilder.loadTexts: cnt2XIfConnectorType.setDescription("This object has the value 'true(1)' if the interface sublayer has a physical connector and the value 'false(2)' otherwise.")
cnt2XIfAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 3, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnt2XIfAlias.setStatus('current')
if mibBuilder.loadTexts: cnt2XIfAlias.setDescription("This object is an 'alias' name for the interface as specified by a network manager, and provides a non- volatile 'handle' for the interface. On the first instantiation of an interface, the value of ifAlias associated with that interface is the zero-length string. As and when a value is written into an instance of ifAlias through a network management set operation, then the agent must retain the supplied value in the ifAlias instance associated with the same interface for as long as that interface remains instantiated, including across all re- initializations/reboots of the network management system, including those which result in a change of the interface's ifIndex value. An example of the value which a network manager might store in this object for a WAN interface is the (Telco's) circuit number/identifier of the interface. Some agents may support write-access only for interfaces having particular values of ifType. An agent which supports write access to this object is required to keep the value in non-volatile storage, but it may limit the length of new values depending on how much storage is already occupied by the current values for other interfaces.")
cnt2XIfInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 3, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2XIfInOctets.setStatus('current')
if mibBuilder.loadTexts: cnt2XIfInOctets.setDescription('The total number of octets received on the interface, including framing characters.')
cnt2XIfInUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2XIfInUcastPkts.setStatus('current')
if mibBuilder.loadTexts: cnt2XIfInUcastPkts.setDescription('The number of subnetwork-unicast packets delivered to a higher-layer protocol.')
cnt2XIfInMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2XIfInMulticastPkts.setStatus('current')
if mibBuilder.loadTexts: cnt2XIfInMulticastPkts.setDescription('The number of packets, delivered by this sub-layer to a higher (sub-)layer, which were addressed to a multicast address at this sub-layer. For a MAC layer protocol, this includes both Group and Functional addresses. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of ifCounterDiscontinuityTime.')
cnt2XIfInBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2XIfInBroadcastPkts.setStatus('current')
if mibBuilder.loadTexts: cnt2XIfInBroadcastPkts.setDescription('The number of packets, delivered by this sub-layer to a higher (sub-)layer, which were addressed to a broadcast address at this sub-layer. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of ifCounterDiscontinuityTime.')
cnt2XIfInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 3, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2XIfInDiscards.setStatus('current')
if mibBuilder.loadTexts: cnt2XIfInDiscards.setDescription('The number of inbound packets which were chosen to be discarded even though no errors had been detected to prevent their being deliverable to a higher-layer protocol. One possible reason for discarding such a packet could be to free up buffer space.')
cnt2XIfInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 3, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2XIfInErrors.setStatus('current')
if mibBuilder.loadTexts: cnt2XIfInErrors.setDescription('The number of inbound packets that contained errors preventing them from being deliverable to a higher-layer protocol.')
cnt2XIfInUnknownProtos = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 3, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2XIfInUnknownProtos.setStatus('current')
if mibBuilder.loadTexts: cnt2XIfInUnknownProtos.setDescription('The number of packets received via the interface which were discarded because of an unknown or unsupported protocol.')
cnt2XIfOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 3, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2XIfOutOctets.setStatus('current')
if mibBuilder.loadTexts: cnt2XIfOutOctets.setDescription('The total number of octets transmitted out of the interface, including framing characters.')
cnt2XIfOutUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 3, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2XIfOutUcastPkts.setStatus('current')
if mibBuilder.loadTexts: cnt2XIfOutUcastPkts.setDescription('The total number of packets that higher-level protocols requested be transmitted to a subnetwork-unicast address, including those that were discarded or not sent.')
cnt2XIfOutMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 3, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2XIfOutMulticastPkts.setStatus('current')
if mibBuilder.loadTexts: cnt2XIfOutMulticastPkts.setDescription('The total number of packets that higher-level protocols requested be transmitted to a non- unicast (i.e., a subnetwork-broadcast or subnetwork-multicast) address, including those that were discarded or not sent.')
cnt2XIfOutBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 3, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2XIfOutBroadcastPkts.setStatus('current')
if mibBuilder.loadTexts: cnt2XIfOutBroadcastPkts.setDescription('The total number of packets that higher-level protocols requested be transmitted, and which were addressed to a broadcast address at this sub-layer, including those that were discarded or not sent. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of ifCounterDiscontinuityTime.')
cnt2XIfOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 3, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2XIfOutDiscards.setStatus('current')
if mibBuilder.loadTexts: cnt2XIfOutDiscards.setDescription('The number of outbound packets which were chosen to be discarded even though no errors had been detected to prevent their being transmitted. One possible reason for discarding such a packet could be to free up buffer space.')
cnt2XIfOutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 3, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2XIfOutErrors.setStatus('current')
if mibBuilder.loadTexts: cnt2XIfOutErrors.setDescription('The number of outbound packets that could not be transmitted because of errors.')
cnt2XIfCounterDiscontinuityTime = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 3, 1, 30), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2XIfCounterDiscontinuityTime.setStatus('current')
if mibBuilder.loadTexts: cnt2XIfCounterDiscontinuityTime.setDescription("The value of sysUpTime on the most recent occasion at which any one or more of this interface's counters suffered a discontinuity. The relevant counters are the specific instances associated with this interface of any Counter32 or Counter64 object contained in the ifTable or ifXTable. If no such discontinuities have occurred since the last re-initialization of the local management subsystem, then this object contains a zero value.")
mibBuilder.exportSymbols("CNT21-MIB", cnt2IfNumEntry=cnt2IfNumEntry, cnt2IfNumTable=cnt2IfNumTable, cnt2XIfTable=cnt2XIfTable, cnt2XIfDescr=cnt2XIfDescr, cnt2XIfOutMulticastPkts=cnt2XIfOutMulticastPkts, cnt2XIfPhysAddress=cnt2XIfPhysAddress, cnt2XIfInBroadcastPkts=cnt2XIfInBroadcastPkts, cnt2IfPhysAddress=cnt2IfPhysAddress, cnt2XIfIANAType=cnt2XIfIANAType, cnt2Interfaces=cnt2Interfaces, cnt2IfTable=cnt2IfTable, cnt2IfOperStatus=cnt2IfOperStatus, cnt2XIfOutOctets=cnt2XIfOutOctets, cnt2IfInUnknownProtos=cnt2IfInUnknownProtos, cnt2XIfIndex=cnt2XIfIndex, cnt2IfOutUcastPkts=cnt2IfOutUcastPkts, cnt2IfInNUcastPkts=cnt2IfInNUcastPkts, cnt2XIfInUcastPkts=cnt2XIfInUcastPkts, cnt2XIfOutUcastPkts=cnt2XIfOutUcastPkts, cnt2XIfInDiscards=cnt2XIfInDiscards, cnt2XIfSpeed=cnt2XIfSpeed, PYSNMP_MODULE_ID=cnt2Interface, cnt2XIfOutDiscards=cnt2XIfOutDiscards, cnt2IfOutDiscards=cnt2IfOutDiscards, cnt2XIfAlias=cnt2XIfAlias, cnt2XIfOutErrors=cnt2XIfOutErrors, cnt2IfEntry=cnt2IfEntry, cnt2XIfLinkUpDownTrapEnable=cnt2XIfLinkUpDownTrapEnable, cnt2XIfInMulticastPkts=cnt2XIfInMulticastPkts, cnt2IfSpeed=cnt2IfSpeed, cnt2XIfOperStatus=cnt2XIfOperStatus, cnt2IfInOctets=cnt2IfInOctets, cnt2IfOutErrors=cnt2IfOutErrors, cnt2XIfMtu=cnt2XIfMtu, cnt2XIfConnectorType=cnt2XIfConnectorType, cnt2XIfLastChange=cnt2XIfLastChange, cnt2IfInDiscards=cnt2IfInDiscards, cnt2XIfInUnknownProtos=cnt2XIfInUnknownProtos, cnt2IfMtu=cnt2IfMtu, cnt2IfInUcastPkts=cnt2IfInUcastPkts, cnt2Interface=cnt2Interface, cnt2IfIndex=cnt2IfIndex, cnt2IfLastChange=cnt2IfLastChange, cnt2XIfEntry=cnt2XIfEntry, cnt2XIfCounterDiscontinuityTime=cnt2XIfCounterDiscontinuityTime, cnt2IfSlotIndex=cnt2IfSlotIndex, cnt2XIfPromiscuousMode=cnt2XIfPromiscuousMode, cnt2IfOutNUcastPkts=cnt2IfOutNUcastPkts, cnt2IfSpecific=cnt2IfSpecific, cnt2XIfName=cnt2XIfName, cnt2IfAdminStatus=cnt2IfAdminStatus, cnt2XIfCntType=cnt2XIfCntType, cnt2XIfInErrors=cnt2XIfInErrors, cnt2XIfOutBroadcastPkts=cnt2XIfOutBroadcastPkts, cnt2IfNum=cnt2IfNum, cnt2IfOutQLen=cnt2IfOutQLen, cnt2XIfSlotIndex=cnt2XIfSlotIndex, cnt2IfType=cnt2IfType, cnt2IfDescr=cnt2IfDescr, cnt2XIfInOctets=cnt2XIfInOctets, cnt2IfNumIndex=cnt2IfNumIndex, cnt2IfOutOctets=cnt2IfOutOctets, cnt2IfInErrors=cnt2IfInErrors, cnt2XIfAdminStatus=cnt2XIfAdminStatus)
