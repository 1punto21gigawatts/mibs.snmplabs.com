#
# PySNMP MIB module Unisphere-Data-BGP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Unisphere-Data-BGP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:30:33 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
iso, Counter64, NotificationType, MibIdentifier, Gauge32, IpAddress, Bits, TimeTicks, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, ObjectIdentity, Unsigned32, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Counter64", "NotificationType", "MibIdentifier", "Gauge32", "IpAddress", "Bits", "TimeTicks", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "ObjectIdentity", "Unsigned32", "ModuleIdentity")
TruthValue, RowStatus, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "RowStatus", "TextualConvention", "DisplayString")
usDataMibs, = mibBuilder.importSymbols("Unisphere-Data-MIBs", "usDataMibs")
UsdVrfName, = mibBuilder.importSymbols("Unisphere-Data-TC", "UsdVrfName")
usdBgpMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29))
usdBgpMIB.setRevisions(('2002-09-04 13:23', '2002-03-01 16:54', '2002-01-23 13:16', '2001-12-04 15:23', '2001-11-30 22:20', '2001-06-18 18:59', '2000-01-12 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: usdBgpMIB.setRevisionsDescriptions(('Added support for BGP internal redistribute. Obsoleted usdBgpStorageInitialHistoryRoutePoolSize and usdBgpStorageMaxHistoryRoutePoolSize. Added the ability to unconfigure BGP attributes from the MIB.', 'Added support for adding unicast BGP routes into a multicast view.', 'Added support for peer and peer-group local-as.', 'Replaced the route tables to add original route destination as an index: usdBgpRouteTable > usdBgpNewRouteTable usdBgpRouteFlapHistoryTable > usdBgpNewRouteFlapHistoryTable usdBgpRouteCommunityTable > usdBgpNewRouteCommunityTable usdBgpRouteExtendedCommunityTable > usdBgpNewRouteExtendedCommunityTable usdBgpRouteClusterIdTable > usdBgpNewRouteClusterIdTable', 'Added support for BGP default IPv4 unicast.', 'Redesigned version of this MIB module.', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: usdBgpMIB.setLastUpdated('200209041323Z')
if mibBuilder.loadTexts: usdBgpMIB.setOrganization('Juniper Networks, Inc.')
if mibBuilder.loadTexts: usdBgpMIB.setContactInfo(' Juniper Networks, Inc. Postal: 10 Technology Park Drive Westford, MA 01886 USA Tel: +1 978 589 5800 Email: mib@Juniper.net')
if mibBuilder.loadTexts: usdBgpMIB.setDescription('The BGP Protocol MIB for the Unisphere Networks enterprise.')
class UsdBgpAfi(TextualConvention, Integer32):
    description = 'Address family identifier (AFI).'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1))
    namedValues = NamedValues(("bgpIpV4", 1))

class UsdBgpSafi(TextualConvention, Integer32):
    description = 'Subsequent address family identifier (SAFI).'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 128))
    namedValues = NamedValues(("bgpUnicast", 1), ("bgpMulticast", 2), ("bgpUnicastMulticast", 3), ("bgpVPNUnicast", 128))

class UsdBgpStorageInteger(TextualConvention, Unsigned32):
    description = 'Specifies an unsigned integer. If an object with this type is set while BGP is created, the value will not be used until a reboot occurs.'
    status = 'current'

class UsdBgpResetConnectionType(TextualConvention, Integer32):
    description = 'Writing a value to an object of this type will cause the corresponding reset action to take place: resetTypeNoop - no action (this value is always returned on a read) resetTypeHard - causes a BGP session to be dropped and then re-established resetTypeSoftIn - causes inbound policy to be re-applied to received routes resetTypeSoftOut - causes outbound policy to be re-applied to sent routes resetTypeSoftInOut - does both resetTypeSoftIn and resetTypeSoftOut resetTypeRouteFlapHistory - causes route-flap dampening history to be discarded'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("resetTypeNoop", 0), ("resetTypeHard", 1), ("resetTypeSoftIn", 2), ("resetTypeSoftOut", 3), ("resetTypeSoftInOut", 4), ("resetTypeRouteFlapHistory", 5))

usdBgpObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1))
usdBgpGeneralGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 1))
usdBgpLocalAsNumber = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdBgpLocalAsNumber.setStatus('current')
if mibBuilder.loadTexts: usdBgpLocalAsNumber.setDescription('The local autonomous system number. This object cannot be modified if BGP is enabled.')
usdBgpEnabled = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdBgpEnabled.setStatus('current')
if mibBuilder.loadTexts: usdBgpEnabled.setDescription('Set this object to true(1) in order to have BGP router enabled.')
usdBgpIdentifier = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdBgpIdentifier.setStatus('current')
if mibBuilder.loadTexts: usdBgpIdentifier.setDescription('The BGP identifier of the local system. The identifier is the system router ID by default.')
usdBgpAlwaysCompareMed = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 1, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdBgpAlwaysCompareMed.setStatus('current')
if mibBuilder.loadTexts: usdBgpAlwaysCompareMed.setDescription('Set this object to true(1) in order to compare metrics for paths from neighors of different ASs.')
usdBgpDefaultLocalPreference = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 1, 5), Unsigned32().clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdBgpDefaultLocalPreference.setStatus('current')
if mibBuilder.loadTexts: usdBgpDefaultLocalPreference.setDescription('The default local preference.')
usdBgpEqualCostLimit = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdBgpEqualCostLimit.setStatus('current')
if mibBuilder.loadTexts: usdBgpEqualCostLimit.setDescription('The maximum equal cost paths to store in routing table.')
usdBgpClientToClientReflection = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 1, 7), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdBgpClientToClientReflection.setStatus('current')
if mibBuilder.loadTexts: usdBgpClientToClientReflection.setDescription('Set this object to true(1) in order to have client-to-client route reflection enabled.')
usdBgpClusterId = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 1, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdBgpClusterId.setStatus('current')
if mibBuilder.loadTexts: usdBgpClusterId.setDescription('The cluster ID. When this object is zero, the router ID will be used.')
usdBgpConfederationId = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 1, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdBgpConfederationId.setStatus('current')
if mibBuilder.loadTexts: usdBgpConfederationId.setDescription('The confederation ID. When this object is zero, the router is not in a confederation.')
usdBgpMissingAsWorst = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 1, 10), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdBgpMissingAsWorst.setStatus('current')
if mibBuilder.loadTexts: usdBgpMissingAsWorst.setDescription('If this object is set to true(1) routes without a MED attribute are considered worse than routes with a MED attribute. If this object is set to false(0) routes without a MED attribute are considered better than routes with a MED attribute.')
usdBgpResetAllConnectionType = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 1, 11), UsdBgpResetConnectionType().clone('resetTypeNoop')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdBgpResetAllConnectionType.setStatus('current')
if mibBuilder.loadTexts: usdBgpResetAllConnectionType.setDescription('Writing a value to this object causes all sessions to all peers to be cleared; the value determines what type of clear is executed (hard clear, soft clear in, soft clear out, etc.). Reading this object has no effect and always returns resetTypeNoop.')
usdBgpAdvertiseInactive = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 1, 12), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdBgpAdvertiseInactive.setStatus('current')
if mibBuilder.loadTexts: usdBgpAdvertiseInactive.setDescription('Set this object to true(1) in order to propagate received BGP routes which are not the best route in the IP forwarding table.')
usdBgpEnforceFirstAs = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 1, 13), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdBgpEnforceFirstAs.setStatus('current')
if mibBuilder.loadTexts: usdBgpEnforceFirstAs.setDescription('Set this object to true(1) in order to check whether the first AS number in the AS-path in routes from EBGP peers is consistent with the AS number of the peer.')
usdBgpConfedCompareMed = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 1, 14), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdBgpConfedCompareMed.setStatus('current')
if mibBuilder.loadTexts: usdBgpConfedCompareMed.setDescription('Set this object to true(1) in order to compare metrics for paths from neighors of different sub-ASs in the same confederation.')
usdBgpGlobalRetryInterval = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(120)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdBgpGlobalRetryInterval.setStatus('current')
if mibBuilder.loadTexts: usdBgpGlobalRetryInterval.setDescription('The default number of seconds before BGP retries to establish an outgoing BGP session.')
usdBgpGlobalConfigKeepAliveInterval = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 21845)).clone(30)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdBgpGlobalConfigKeepAliveInterval.setStatus('current')
if mibBuilder.loadTexts: usdBgpGlobalConfigKeepAliveInterval.setDescription("Default time interval in seconds for the KeepAlive timer for all peers. Zero means don't send KeepAlive messages.")
usdBgpGlobalConfigHoldTime = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(3, 65535), )).clone(90)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdBgpGlobalConfigHoldTime.setStatus('current')
if mibBuilder.loadTexts: usdBgpGlobalConfigHoldTime.setDescription("Default time interval in seconds for the Hold timer for all peers. Zero means don't expect KeepAlive message to be received.")
usdBgpGlobalAsOriginationInterval = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(10)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdBgpGlobalAsOriginationInterval.setStatus('current')
if mibBuilder.loadTexts: usdBgpGlobalAsOriginationInterval.setDescription('Default time interval in seconds for the MinASOriginationInterval timer for all peers.')
usdBgpExternalAdvertisementInterval = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(30)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdBgpExternalAdvertisementInterval.setStatus('current')
if mibBuilder.loadTexts: usdBgpExternalAdvertisementInterval.setDescription('Default time interval in seconds for the MinRouteAdvertisementInterval timer for all external peers.')
usdBgpGlobalRibOutEnabled = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 1, 20), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdBgpGlobalRibOutEnabled.setStatus('current')
if mibBuilder.loadTexts: usdBgpGlobalRibOutEnabled.setDescription('Set this object to true(1) in order to enable RIB-out by default for all peers, or to false(2) to disable RIB-out by default for all peers.')
usdBgpOverloadShutdown = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 1, 21), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdBgpOverloadShutdown.setStatus('current')
if mibBuilder.loadTexts: usdBgpOverloadShutdown.setDescription('Set this object to true(1) for BGP to shut itself down when it runs out of memory. Set this object to false(2) for BGP to continue running (with incomplete information) when it runs out of memory.')
usdBgpLogNeighborChanges = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 1, 22), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdBgpLogNeighborChanges.setStatus('current')
if mibBuilder.loadTexts: usdBgpLogNeighborChanges.setDescription('Set this object to true(1) for BGP log a message whenever a peer enters or leaves the established state.')
usdBgpFastExternalFallover = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 1, 23), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdBgpFastExternalFallover.setStatus('current')
if mibBuilder.loadTexts: usdBgpFastExternalFallover.setDescription('Set this object to true(1) for BGP to immediately bring down any directly adjacent EBGP session on a link down.')
usdBgpInternalAdvertisementInterval = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(5)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdBgpInternalAdvertisementInterval.setStatus('current')
if mibBuilder.loadTexts: usdBgpInternalAdvertisementInterval.setDescription('Default time interval in seconds for the MinRouteAdvertisementInterval timer for all internal peers.')
usdBgpMaxAsLimit = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdBgpMaxAsLimit.setStatus('current')
if mibBuilder.loadTexts: usdBgpMaxAsLimit.setDescription('Maximum length of received AS-path. Received routes with an AS-path longer than this are not placed in the IP forwarding table and are not propagated to other peers. Zero means no maximum length.')
usdBgpOperationalState = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("up", 1), ("down", 2), ("overload", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpOperationalState.setStatus('current')
if mibBuilder.loadTexts: usdBgpOperationalState.setDescription('The BGP instance operational state.')
usdBgpPreviousOperationalState = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("up", 1), ("down", 2), ("overload", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpPreviousOperationalState.setStatus('current')
if mibBuilder.loadTexts: usdBgpPreviousOperationalState.setDescription('The BGP instance previous operational state.')
usdBgpAutomaticRouteTargetFilter = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 1, 28), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdBgpAutomaticRouteTargetFilter.setStatus('current')
if mibBuilder.loadTexts: usdBgpAutomaticRouteTargetFilter.setDescription('Set this object to true(1) for BGP to enable automatic route-target filtering.')
usdBgpDefaultIPv4Unicast = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 1, 29), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdBgpDefaultIPv4Unicast.setStatus('current')
if mibBuilder.loadTexts: usdBgpDefaultIPv4Unicast.setDescription('Set this object to true(1) for BGP to automatically activate peers in the IPv4 unicast address family.')
usdBgpRedistributeInternal = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 1, 30), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdBgpRedistributeInternal.setStatus('current')
if mibBuilder.loadTexts: usdBgpRedistributeInternal.setDescription('Set this object to true(1) for BGP to automatically redistribute iBGP routes to IGP protocols.')
usdBgpUnconfiguredAttributes = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 1, 33), Bits().clone(namedValues=NamedValues(("usdBgpLocalAsNumber", 0), ("usdBgpEnabled", 1), ("usdBgpIdentifier", 2), ("usdBgpAlwaysCompareMed", 3), ("usdBgpDefaultLocalPreference", 4), ("usdBgpEqualCostLimit", 5), ("usdBgpClientToClientReflection", 6), ("usdBgpClusterId", 7), ("usdBgpConfederationId", 8), ("usdBgpMissingAsWorst", 9), ("usdBgpAdvertiseInactive", 10), ("usdBgpEnforceFirstAs", 11), ("usdBgpConfedCompareMed", 12), ("usdBgpGlobalRetryInterval", 13), ("usdBgpGlobalConfigKeepAliveInterval", 14), ("usdBgpGlobalConfigHoldTime", 15), ("usdBgpGlobalAsOriginationInterval", 16), ("usdBgpExternalAdvertisementInterval", 17), ("usdBgpGlobalRibOutEnabled", 18), ("usdBgpOverloadShutdown", 19), ("usdBgpLogNeighborChanges", 20), ("usdBgpFastExternalFallover", 21), ("usdBgpInternalAdvertisementInterval", 22), ("usdBgpMaxAsLimit", 23), ("usdBgpAutomaticRouteTargetFilter", 24), ("usdBgpDefaultIPv4Unicast", 25), ("usdBgpRedistributeInternal", 26)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdBgpUnconfiguredAttributes.setStatus('current')
if mibBuilder.loadTexts: usdBgpUnconfiguredAttributes.setDescription('On get each bit indicates whether the corresponding attribute is configured or unconfigured: 0 = The attribute is configured (i.e. the configured value is the operational value). 1 = The attribute is unconfigured (i.e. the operational value is inherited from the a higher level which could be the default value). Getting the attribute value itself always returns the operational value of that attribute regardless of whether the attribute is configured or unconfigured. On write each bit indicates wheter or not the corresponding attribute should be set to the unconfigured state: 0 = No operation (i.e. do not change the state of the attribute). 1 = Set the attribute to the unconfigured state. Setting an attribute to a value has the automatic side-effect of setting the bit with the same name to zero.')
usdBgpRouteTableStatisticsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 2))
usdBgpBaselineTime = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 2, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpBaselineTime.setStatus('current')
if mibBuilder.loadTexts: usdBgpBaselineTime.setDescription('The sysUpTime at which the counters were most recently baselined.')
usdBgpDestinationCount = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 2, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpDestinationCount.setStatus('current')
if mibBuilder.loadTexts: usdBgpDestinationCount.setDescription('Number of distinct destinations in the local RIB.')
usdBgpDestinationMemoryUsed = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 2, 3), Gauge32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpDestinationMemoryUsed.setStatus('current')
if mibBuilder.loadTexts: usdBgpDestinationMemoryUsed.setDescription('Memory used by distinct destinations in the local RIB.')
usdBgpRouteCount = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 2, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpRouteCount.setStatus('current')
if mibBuilder.loadTexts: usdBgpRouteCount.setDescription('Number of routes in the local RIB.')
usdBgpRouteMemoryUsed = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 2, 5), Gauge32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpRouteMemoryUsed.setStatus('current')
if mibBuilder.loadTexts: usdBgpRouteMemoryUsed.setDescription('Memory used by routes in the local RIB.')
usdBgpSelectedRouteCount = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 2, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpSelectedRouteCount.setStatus('current')
if mibBuilder.loadTexts: usdBgpSelectedRouteCount.setDescription('Number of routes selected for route table installation.')
usdBgpPathAttributeCount = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 2, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpPathAttributeCount.setStatus('current')
if mibBuilder.loadTexts: usdBgpPathAttributeCount.setDescription('Number of entries in the path attribute database.')
usdBgpPathAttributeMemoryUsed = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 2, 9), Gauge32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpPathAttributeMemoryUsed.setStatus('current')
if mibBuilder.loadTexts: usdBgpPathAttributeMemoryUsed.setDescription('Memory used by entries in the path attribute database.')
usdBgpRouteFlapHistoryCount = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 2, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpRouteFlapHistoryCount.setStatus('current')
if mibBuilder.loadTexts: usdBgpRouteFlapHistoryCount.setDescription('Number of routes with active route flap histories.')
usdBgpRouteFlapHistoryMemoryUsed = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 2, 11), Gauge32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpRouteFlapHistoryMemoryUsed.setStatus('current')
if mibBuilder.loadTexts: usdBgpRouteFlapHistoryMemoryUsed.setDescription('Memory used by routes with active route flap histories.')
usdBgpSuppressedRouteCount = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 2, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpSuppressedRouteCount.setStatus('current')
if mibBuilder.loadTexts: usdBgpSuppressedRouteCount.setDescription('Number of routes suppressed due to route flap.')
usdBgpConfederationPeerTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 3), )
if mibBuilder.loadTexts: usdBgpConfederationPeerTable.setStatus('current')
if mibBuilder.loadTexts: usdBgpConfederationPeerTable.setDescription('The Unisphere BGP Confederation Peer Table describes the BGP-specific characteristics of confederation peers.')
usdBgpConfederationPeerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 3, 1), ).setIndexNames((0, "Unisphere-Data-BGP-MIB", "usdBgpConfederationPeerAsNumber"))
if mibBuilder.loadTexts: usdBgpConfederationPeerEntry.setStatus('current')
if mibBuilder.loadTexts: usdBgpConfederationPeerEntry.setDescription('The BGP Confederation Peer Entry describes BGP-specific characteristics of one confederation peer.')
usdBgpConfederationPeerAsNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: usdBgpConfederationPeerAsNumber.setStatus('current')
if mibBuilder.loadTexts: usdBgpConfederationPeerAsNumber.setDescription('The AsNumber of this confederation peer.')
usdBgpConfederationPeerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpConfederationPeerRowStatus.setStatus('current')
if mibBuilder.loadTexts: usdBgpConfederationPeerRowStatus.setDescription('Controls creation/deletion of entries in this table according to the RowStatus textual convention, constrained to support the following values only: createAndGo destroy ')
usdBgpPeerTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 4), )
if mibBuilder.loadTexts: usdBgpPeerTable.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerTable.setDescription('The Unisphere BGP Peer Table describes the BGP-specific characteristics of peers.')
usdBgpPeerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 4, 1), ).setIndexNames((0, "Unisphere-Data-BGP-MIB", "usdBgpPeerVrfName"), (0, "Unisphere-Data-BGP-MIB", "usdBgpPeerRemoteAddress"))
if mibBuilder.loadTexts: usdBgpPeerEntry.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerEntry.setDescription('The BGP Peer Entry describes BGP-specific characteristics of one peer.')
usdBgpPeerVrfName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 4, 1, 1), UsdVrfName())
if mibBuilder.loadTexts: usdBgpPeerVrfName.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerVrfName.setDescription('The name of the VPN Routing Forwarding (VRF) instance in which this peer is configured. The empty string indicates that this peer is not in a VRF.')
usdBgpPeerRemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 4, 1, 2), IpAddress())
if mibBuilder.loadTexts: usdBgpPeerRemoteAddress.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerRemoteAddress.setDescription("The remote IP address of this entry's BGP peer.")
usdBgpPeerAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("stop", 1), ("start", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpPeerAdminStatus.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerAdminStatus.setDescription("The desired state of the BGP connection. A transition from 'stop' to 'start' will cause the BGP Start Event to be generated. A transition from 'start' to 'stop' will cause the BGP Stop Event to be generated. This parameter can be used to restart BGP peer connections. Care should be used in providing write access to this object without adequate authentication.")
usdBgpPeerState = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("stop", 0), ("idle", 1), ("connect", 2), ("active", 3), ("opensent", 4), ("openconfirm", 5), ("established", 6), ("removing", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpPeerState.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerState.setDescription('The BGP peer connection state.')
usdBgpPeerNegotiatedVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpPeerNegotiatedVersion.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerNegotiatedVersion.setDescription('The negotiated version of BGP running between the two peers.')
usdBgpPeerLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 4, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpPeerLocalAddress.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerLocalAddress.setDescription("The local IP address of this entry's BGP connection.")
usdBgpPeerLocalAddressMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 4, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpPeerLocalAddressMask.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerLocalAddressMask.setDescription("The local IP address mask of this entry's BGP connection.")
usdBgpPeerLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpPeerLocalPort.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerLocalPort.setDescription('The local port for the TCP connection between the BGP peers.')
usdBgpPeerRemoteAsNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 4, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpPeerRemoteAsNumber.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerRemoteAsNumber.setDescription("The peer's autonomous system number.")
usdBgpPeerRemotePort = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 4, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpPeerRemotePort.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerRemotePort.setDescription('The remote port for the TCP connection between the BGP peers. Note that the objects bgpPeerLocalAddr, bgpPeerLocalPort, bgpPeerRemoteAddr and bgpPeerRemotePort provide the appropriate reference to the standard MIB TCP connection table.')
usdBgpPeerInUpdates = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpPeerInUpdates.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerInUpdates.setDescription('The number of BGP UPDATE messages received on this connection. This object should be initialized to zero (0) when the connection is established.')
usdBgpPeerOutUpdates = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpPeerOutUpdates.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerOutUpdates.setDescription('The number of BGP UPDATE messages transmitted on this connection. This object should be initialized to zero (0) when the connection is established.')
usdBgpPeerInTotalMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 4, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpPeerInTotalMessages.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerInTotalMessages.setDescription('The total number of messages received from the remote peer on this connection. This object should be initialized to zero when the connection is established.')
usdBgpPeerOutTotalMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 4, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpPeerOutTotalMessages.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerOutTotalMessages.setDescription('The total number of messages transmitted to the remote peer on this connection. This object should be initialized to zero when the connection is established.')
usdBgpPeerLastErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 4, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpPeerLastErrorCode.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerLastErrorCode.setDescription('The last error code and subcode seen by this peer on this connection. If no error has occurred, this field is zero. Otherwise, the first byte of this two byte OCTET STRING contains the error code, and the second byte contains the subcode.')
usdBgpPeerLastResetReason = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 4, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpPeerLastResetReason.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerLastResetReason.setDescription('The string representing the last error code seen by this peer on this connection. If no error has occurred, this string is null.')
usdBgpPeerFsmEstablishedTransitions = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 4, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpPeerFsmEstablishedTransitions.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerFsmEstablishedTransitions.setDescription('The total number of times the BGP FSM transitioned into the established state.')
usdBgpPeerFsmEstablishedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 4, 1, 18), Gauge32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpPeerFsmEstablishedTime.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerFsmEstablishedTime.setDescription('This timer indicates how long (in seconds) this peer has been in the Established state or how long since this peer was last in the Established state. It is set to zero when a new peer is configured or the router is booted.')
usdBgpPeerRetryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 4, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(120)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpPeerRetryInterval.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerRetryInterval.setDescription('Time interval in seconds for the ConnectRetry timer. The suggested value for this timer is 120 seconds.')
usdBgpPeerHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 4, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(3, 65535), ))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpPeerHoldTime.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerHoldTime.setDescription('Time interval in seconds for the Hold Timer established with the peer. The value of this object is calculated by this BGP speaker by using the smaller of the value in bgpPeerHoldTimeConfigured and the Hold Time received in the OPEN message. This value must be at lease three seconds if it is not zero (0) in which case the Hold Timer has not been established with the peer, or, the value of bgpPeerHoldTimeConfigured is zero (0).')
usdBgpPeerKeepAliveInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 4, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 21845))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpPeerKeepAliveInterval.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerKeepAliveInterval.setDescription('Time interval in seconds for the KeepAlive timer established with the peer. The value of this object is calculated by this BGP speaker such that, when compared with bgpPeerHoldTime, it has the same proportion as what bgpPeerKeepAliveConfigured has when compared with bgpPeerHoldTimeConfigured. If the value of this object is zero (0), it indicates that the KeepAlive timer has not been established with the peer, or, the value of bgpPeerKeepAliveConfigured is zero (0).')
usdBgpPeerConfigHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 4, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(3, 65535), )).clone(90)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpPeerConfigHoldTime.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerConfigHoldTime.setDescription('Time interval in seconds for the Hold Time configured for this BGP speaker with this peer. This value is placed in an OPEN message sent to this peer by this BGP speaker, and is compared with the Hold Time field in an OPEN message received from the peer when determining the Hold Time (bgpPeerHoldTime) with the peer. This value must not be less than three seconds if it is not zero (0) in which case the Hold Time is NOT to be established with the peer. The suggested value for this timer is 90 seconds.')
usdBgpPeerConfigKeepAliveInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 4, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 21845)).clone(30)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpPeerConfigKeepAliveInterval.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerConfigKeepAliveInterval.setDescription("Time interval in seconds for the KeepAlive timer configured for this BGP speaker with this peer. The value of this object will only determine the KEEPALIVE messages' frequency relative to the value specified in bgpPeerHoldTimeConfigured; the actual time interval for the KEEPALIVE messages is indicated by bgpPeerKeepAlive. A reasonable maximum value for this timer would be configured to be one third of that of bgpPeerHoldTimeConfigured. If the value of this object is zero (0), no periodical KEEPALIVE messages are sent to the peer after the BGP connection has been established. The suggested value for this timer is 30 seconds.")
usdBgpPeerAsOriginationInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 4, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(10)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpPeerAsOriginationInterval.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerAsOriginationInterval.setDescription('Time interval in seconds for the MinASOriginationInterval timer. The suggested value for this timer is 10 seconds.')
usdBgpPeerAdvertisementInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 4, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(30)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpPeerAdvertisementInterval.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerAdvertisementInterval.setDescription('Time interval in seconds for the MinRouteAdvertisementInterval timer. The suggested value for this timer is 30 seconds.')
usdBgpPeerInUpdateElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 4, 1, 26), Gauge32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpPeerInUpdateElapsedTime.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerInUpdateElapsedTime.setDescription('Elapsed time in seconds since the last BGP UPDATE message was received from the peer. Each time bgpPeerInUpdates is incremented, the value of this object is set to zero (0).')
usdBgpPeerDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 4, 1, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpPeerDescription.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerDescription.setDescription('Peer textual description.')
usdBgpPeerRemoteIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 4, 1, 28), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpPeerRemoteIdentifier.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerRemoteIdentifier.setDescription("Peer's remote router ID.")
usdBgpPeerWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 4, 1, 29), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpPeerWeight.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerWeight.setDescription('The weight assigned to routes learned from peer.')
usdBgpPeerEbgpMultihop = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 4, 1, 30), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpPeerEbgpMultihop.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerEbgpMultihop.setDescription('The EBGP multihop is enabled.')
usdBgpPeerEbgpMultihopTtl = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 4, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpPeerEbgpMultihopTtl.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerEbgpMultihopTtl.setDescription('Maximum number of hops to the external peer (only relevant if EBGP multihop turned on).')
usdBgpPeerUpdateSource = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 4, 1, 32), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpPeerUpdateSource.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerUpdateSource.setDescription('The source IP address for peer connections.')
usdBgpPeerMd5Password = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 4, 1, 33), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpPeerMd5Password.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerMd5Password.setDescription('The password for MD5 authentication. Reading this object always results in an OCTET STRING of length zero.')
usdBgpPeerMaxUpdateSize = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 4, 1, 34), Unsigned32().clone(4096)).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpPeerMaxUpdateSize.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerMaxUpdateSize.setDescription('The maximum size in bytes of transmitted UPDATE messages.')
usdBgpPeerType = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 4, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("peerTypeInternal", 1), ("peerTypeExternal", 2), ("peerTypeConfederation", 3), ("peerTypeUnknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpPeerType.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerType.setDescription('The type of peer.')
usdBgpPeerSupportsCapabilityNegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 4, 1, 36), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpPeerSupportsCapabilityNegotiation.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerSupportsCapabilityNegotiation.setDescription('The peer supports capability negotiation.')
usdBgpPeerCapabilityMultiProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 4, 1, 37), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpPeerCapabilityMultiProtocol.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerCapabilityMultiProtocol.setDescription('The peer supports the multi-protocol capablity.')
usdBgpPeerCapabilityRouteRefresh = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 4, 1, 38), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpPeerCapabilityRouteRefresh.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerCapabilityRouteRefresh.setDescription('The peer supports the route-refresh capability.')
usdBgpPeerCapabilityRouteRefreshCiscoProprietary = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 4, 1, 39), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpPeerCapabilityRouteRefreshCiscoProprietary.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerCapabilityRouteRefreshCiscoProprietary.setDescription('The peer supports the route-refresh-cisco capability.')
usdBgpPeerResetConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 4, 1, 40), UsdBgpResetConnectionType().clone('resetTypeNoop')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpPeerResetConnectionType.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerResetConnectionType.setDescription('Writing a value to this object causes the session to the peer to be cleared; the value determines what type of clear is executed (hard clear, soft clear in, soft clear out, etc.). Reading this object has no effect and always returns resetTypeNoop.')
usdBgpPeerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 4, 1, 41), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpPeerRowStatus.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerRowStatus.setDescription('Controls creation/deletion of entries in this table according to the RowStatus textual convention, constrained to support the following values only: createAndGo destroy To create an entry in this table, the following entry objects MUST be explicitly configured: usdBgpPeerRemoteAs ')
usdBgpPeerLocalAsNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 4, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpPeerLocalAsNumber.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerLocalAsNumber.setDescription('The local autonomous system number to be used for this peer. Value zero (0) means that the global local automous system number (as specified in the object usdBgpLocalAsNumber) is used.')
usdBgpPeerUnconfiguredAttributes = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 4, 1, 60), Bits().clone(namedValues=NamedValues(("usdBgpPeerAdminStatus", 0), ("usdBgpPeerRemoteAsNumber", 1), ("usdBgpPeerRetryInterval", 2), ("usdBgpPeerConfigHoldTime", 3), ("usdBgpPeerConfigKeepAliveInterval", 4), ("usdBgpPeerAsOriginationInterval", 5), ("usdBgpPeerAdvertisementInterval", 6), ("usdBgpPeerDescription", 7), ("usdBgpPeerWeight", 8), ("usdBgpPeerEbgpMultihop", 9), ("usdBgpPeerEbgpMultihopTtl", 10), ("usdBgpPeerUpdateSource", 11), ("usdBgpPeerMd5Password", 12), ("usdBgpPeerMaxUpdateSize", 13), ("usdBgpPeerLocalAsNumber", 14)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpPeerUnconfiguredAttributes.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerUnconfiguredAttributes.setDescription('On get each bit indicates whether the corresponding attribute is configured or unconfigured: 0 = The attribute is configured (i.e. the configured value is the operational value). 1 = The attribute is unconfigured (i.e. the operational value is inherited from the a higher level which could be the default value). Getting the attribute value itself always returns the operational value of that attribute regardless of whether the attribute is configured or unconfigured. On write each bit indicates wheter or not the corresponding attribute should be set to the unconfigured state: 0 = No operation (i.e. do not change the state of the attribute). 1 = Set the attribute to the unconfigured state. Setting an attribute to a value has the automatic side-effect of setting the bit with the same name to zero.')
usdBgpPeerProposedAfiSafiPeerTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 5), )
if mibBuilder.loadTexts: usdBgpPeerProposedAfiSafiPeerTable.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerProposedAfiSafiPeerTable.setDescription('The Unisphere BGP PeerProposedAfiSafi Peer Table describes the BGP-specific AFI and SAFIs a peer proposed.')
usdBgpPeerProposedAfiSafiPeerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 5, 1), ).setIndexNames((0, "Unisphere-Data-BGP-MIB", "usdBgpPeerProposedAfiSafiPeerVrfName"), (0, "Unisphere-Data-BGP-MIB", "usdBgpPeerProposedAfiSafiPeerRemoteAddr"), (0, "Unisphere-Data-BGP-MIB", "usdBgpPeerProposedAfiSafiPeerAfi"), (0, "Unisphere-Data-BGP-MIB", "usdBgpPeerProposedAfiSafiPeerSafi"))
if mibBuilder.loadTexts: usdBgpPeerProposedAfiSafiPeerEntry.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerProposedAfiSafiPeerEntry.setDescription('The BGP PeerProposedAfiSafi Peer Entry describes a BGP-specific AFI/SAFIs proposed by one peer.')
usdBgpPeerProposedAfiSafiPeerVrfName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 5, 1, 1), UsdVrfName())
if mibBuilder.loadTexts: usdBgpPeerProposedAfiSafiPeerVrfName.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerProposedAfiSafiPeerVrfName.setDescription('The name of the VPN Routing Forwarding (VRF) instance in which this peer is configured. The empty string indicates that this peer is not in a VRF.')
usdBgpPeerProposedAfiSafiPeerRemoteAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 5, 1, 2), IpAddress())
if mibBuilder.loadTexts: usdBgpPeerProposedAfiSafiPeerRemoteAddr.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerProposedAfiSafiPeerRemoteAddr.setDescription("The remote IP address of this entry's BGP peer.")
usdBgpPeerProposedAfiSafiPeerAfi = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 5, 1, 3), UsdBgpAfi())
if mibBuilder.loadTexts: usdBgpPeerProposedAfiSafiPeerAfi.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerProposedAfiSafiPeerAfi.setDescription('The AFI proposed by this peer to us.')
usdBgpPeerProposedAfiSafiPeerSafi = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 5, 1, 4), UsdBgpSafi())
if mibBuilder.loadTexts: usdBgpPeerProposedAfiSafiPeerSafi.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerProposedAfiSafiPeerSafi.setDescription('The SAFI proposed by this peer to us.')
usdBgpPeerProposedAfiSafiPeerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 5, 1, 5), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpPeerProposedAfiSafiPeerRowStatus.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerProposedAfiSafiPeerRowStatus.setDescription('Should always be active according to the Row Status convention.')
usdBgpLocalProposedAfiSafiPeerTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 6), )
if mibBuilder.loadTexts: usdBgpLocalProposedAfiSafiPeerTable.setStatus('current')
if mibBuilder.loadTexts: usdBgpLocalProposedAfiSafiPeerTable.setDescription('The Unisphere BGP LocalProposedAfiSafi Peer Table describes the BGP-specific AFI and SAFIs proposed to the peer.')
usdBgpLocalProposedAfiSafiPeerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 6, 1), ).setIndexNames((0, "Unisphere-Data-BGP-MIB", "usdBgpLocalProposedAfiSafiPeerVrfName"), (0, "Unisphere-Data-BGP-MIB", "usdBgpLocalProposedAfiSafiPeerRemoteAddr"), (0, "Unisphere-Data-BGP-MIB", "usdBgpLocalProposedAfiSafiPeerAfi"), (0, "Unisphere-Data-BGP-MIB", "usdBgpLocalProposedAfiSafiPeerSafi"))
if mibBuilder.loadTexts: usdBgpLocalProposedAfiSafiPeerEntry.setStatus('current')
if mibBuilder.loadTexts: usdBgpLocalProposedAfiSafiPeerEntry.setDescription('The BGP LocalProposedAfiSafi Peer Entry describes a BGP-specific AFI/SAFIs proposed to one peer.')
usdBgpLocalProposedAfiSafiPeerVrfName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 6, 1, 1), UsdVrfName())
if mibBuilder.loadTexts: usdBgpLocalProposedAfiSafiPeerVrfName.setStatus('current')
if mibBuilder.loadTexts: usdBgpLocalProposedAfiSafiPeerVrfName.setDescription('The name of the VPN Routing Forwarding (VRF) instance in which this peer is configured. The empty string indicates that this peer is not in a VRF.')
usdBgpLocalProposedAfiSafiPeerRemoteAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 6, 1, 2), IpAddress())
if mibBuilder.loadTexts: usdBgpLocalProposedAfiSafiPeerRemoteAddr.setStatus('current')
if mibBuilder.loadTexts: usdBgpLocalProposedAfiSafiPeerRemoteAddr.setDescription("The remote IP address of this entry's BGP peer.")
usdBgpLocalProposedAfiSafiPeerAfi = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 6, 1, 3), UsdBgpAfi())
if mibBuilder.loadTexts: usdBgpLocalProposedAfiSafiPeerAfi.setStatus('current')
if mibBuilder.loadTexts: usdBgpLocalProposedAfiSafiPeerAfi.setDescription('The AFI we proposed to this peer.')
usdBgpLocalProposedAfiSafiPeerSafi = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 6, 1, 4), UsdBgpSafi())
if mibBuilder.loadTexts: usdBgpLocalProposedAfiSafiPeerSafi.setStatus('current')
if mibBuilder.loadTexts: usdBgpLocalProposedAfiSafiPeerSafi.setDescription('The SAFI we proposed to this peer.')
usdBgpLocalProposedAfiSafiPeerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 6, 1, 5), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpLocalProposedAfiSafiPeerRowStatus.setStatus('current')
if mibBuilder.loadTexts: usdBgpLocalProposedAfiSafiPeerRowStatus.setDescription('Should always be active according to the Row Status convention.')
usdBgpExchangedAfiSafiPeerTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 7), )
if mibBuilder.loadTexts: usdBgpExchangedAfiSafiPeerTable.setStatus('current')
if mibBuilder.loadTexts: usdBgpExchangedAfiSafiPeerTable.setDescription('The Unisphere BGP PeerExchangedAfiSafi Peer Table describes the BGP-specific AFI and SAFIs a peer exchanged.')
usdBgpExchangedAfiSafiPeerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 7, 1), ).setIndexNames((0, "Unisphere-Data-BGP-MIB", "usdBgpExchangedAfiSafiPeerVrfName"), (0, "Unisphere-Data-BGP-MIB", "usdBgpExchangedAfiSafiPeerRemoteAddr"), (0, "Unisphere-Data-BGP-MIB", "usdBgpExchangedAfiSafiPeerAfi"), (0, "Unisphere-Data-BGP-MIB", "usdBgpExchangedAfiSafiPeerSafi"))
if mibBuilder.loadTexts: usdBgpExchangedAfiSafiPeerEntry.setStatus('current')
if mibBuilder.loadTexts: usdBgpExchangedAfiSafiPeerEntry.setDescription('The BGP ExchangedAfiSafi Peer Entry describes a BGP-specific AFI/SAFIs exchanged by one peer.')
usdBgpExchangedAfiSafiPeerVrfName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 7, 1, 1), UsdVrfName())
if mibBuilder.loadTexts: usdBgpExchangedAfiSafiPeerVrfName.setStatus('current')
if mibBuilder.loadTexts: usdBgpExchangedAfiSafiPeerVrfName.setDescription('The name of the VPN Routing Forwarding (VRF) instance in which this peer is configured. The empty string indicates that this peer is not in a VRF.')
usdBgpExchangedAfiSafiPeerRemoteAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 7, 1, 2), IpAddress())
if mibBuilder.loadTexts: usdBgpExchangedAfiSafiPeerRemoteAddr.setStatus('current')
if mibBuilder.loadTexts: usdBgpExchangedAfiSafiPeerRemoteAddr.setDescription("The remote IP address of this entry's BGP peer.")
usdBgpExchangedAfiSafiPeerAfi = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 7, 1, 3), UsdBgpAfi())
if mibBuilder.loadTexts: usdBgpExchangedAfiSafiPeerAfi.setStatus('current')
if mibBuilder.loadTexts: usdBgpExchangedAfiSafiPeerAfi.setDescription('The AFI which we exchange with this peer.')
usdBgpExchangedAfiSafiPeerSafi = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 7, 1, 4), UsdBgpSafi())
if mibBuilder.loadTexts: usdBgpExchangedAfiSafiPeerSafi.setStatus('current')
if mibBuilder.loadTexts: usdBgpExchangedAfiSafiPeerSafi.setDescription('The SAFI which we exchange with this peer.')
usdBgpExchangedAfiSafiPeerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 7, 1, 5), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpExchangedAfiSafiPeerRowStatus.setStatus('current')
if mibBuilder.loadTexts: usdBgpExchangedAfiSafiPeerRowStatus.setDescription('Should always be active according to the Row Status convention.')
usdBgpPeerAddressFamilyTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 8), )
if mibBuilder.loadTexts: usdBgpPeerAddressFamilyTable.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerAddressFamilyTable.setDescription('The Unisphere BGP Peer Address Family Table describes the BGP-specific attributes of an Address Family for a peer.')
usdBgpPeerAddressFamilyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 8, 1), ).setIndexNames((0, "Unisphere-Data-BGP-MIB", "usdBgpPeerAddressFamilyVrfName"), (0, "Unisphere-Data-BGP-MIB", "usdBgpPeerAddressFamilyAfi"), (0, "Unisphere-Data-BGP-MIB", "usdBgpPeerAddressFamilySafi"), (0, "Unisphere-Data-BGP-MIB", "usdBgpPeerAddressFamilyRemoteAddress"))
if mibBuilder.loadTexts: usdBgpPeerAddressFamilyEntry.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerAddressFamilyEntry.setDescription('The BGP ExchangedAfiSafi Peer Entry describes a BGP-specific AFI/SAFIs exchanged by one peer.')
usdBgpPeerAddressFamilyVrfName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 8, 1, 1), UsdVrfName())
if mibBuilder.loadTexts: usdBgpPeerAddressFamilyVrfName.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerAddressFamilyVrfName.setDescription('The name of the VPN Routing Forwarding (VRF) instance in which this peer is configured. The empty string indicates that this peer is not in a VRF.')
usdBgpPeerAddressFamilyAfi = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 8, 1, 2), UsdBgpAfi())
if mibBuilder.loadTexts: usdBgpPeerAddressFamilyAfi.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerAddressFamilyAfi.setDescription('The AFI of the address-family in which this peer is configured.')
usdBgpPeerAddressFamilySafi = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 8, 1, 3), UsdBgpSafi())
if mibBuilder.loadTexts: usdBgpPeerAddressFamilySafi.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerAddressFamilySafi.setDescription('The SAFI of the address-family in which this peer is configured.')
usdBgpPeerAddressFamilyRemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 8, 1, 4), IpAddress())
if mibBuilder.loadTexts: usdBgpPeerAddressFamilyRemoteAddress.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerAddressFamilyRemoteAddress.setDescription("The remote IP address of this entry's BGP peer.")
usdBgpPeerAddressFamilyPeerGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 8, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpPeerAddressFamilyPeerGroup.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerAddressFamilyPeerGroup.setDescription('Peer group membership (null if none).')
usdBgpPeerAddressFamilyDefaultOriginate = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 8, 1, 6), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpPeerAddressFamilyDefaultOriginate.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerAddressFamilyDefaultOriginate.setDescription('Set this object to true(1) in order to advertise a default route to this peer, if present.')
usdBgpPeerAddressFamilyNextHopSelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 8, 1, 7), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpPeerAddressFamilyNextHopSelf.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerAddressFamilyNextHopSelf.setDescription('Set this object to true(1) in order to always advertise this router as the next hop.')
usdBgpPeerAddressFamilySendCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 8, 1, 8), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpPeerAddressFamilySendCommunity.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerAddressFamilySendCommunity.setDescription('Set this object to true(1) in order to send COMMUNITIES attributes in updates.')
usdBgpPeerAddressFamilyDistributeListIn = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 8, 1, 9), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpPeerAddressFamilyDistributeListIn.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerAddressFamilyDistributeListIn.setDescription('The inbound distribute IP access list name.')
usdBgpPeerAddressFamilyDistributeListOut = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 8, 1, 10), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpPeerAddressFamilyDistributeListOut.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerAddressFamilyDistributeListOut.setDescription('The outbound distribute IP access list name.')
usdBgpPeerAddressFamilyPrefixListIn = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 8, 1, 11), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpPeerAddressFamilyPrefixListIn.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerAddressFamilyPrefixListIn.setDescription('The inbound IP prefix list name.')
usdBgpPeerAddressFamilyPrefixListOut = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 8, 1, 12), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpPeerAddressFamilyPrefixListOut.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerAddressFamilyPrefixListOut.setDescription('The outbound IP prefix list name.')
usdBgpPeerAddressFamilyPrefixTreeIn = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 8, 1, 13), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpPeerAddressFamilyPrefixTreeIn.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerAddressFamilyPrefixTreeIn.setDescription('The inbound IP prefix tree name.')
usdBgpPeerAddressFamilyPrefixTreeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 8, 1, 14), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpPeerAddressFamilyPrefixTreeOut.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerAddressFamilyPrefixTreeOut.setDescription('The outbound IP prefix tree name.')
usdBgpPeerAddressFamilyFilterListIn = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 8, 1, 15), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpPeerAddressFamilyFilterListIn.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerAddressFamilyFilterListIn.setDescription('The inbound filter AS path list name.')
usdBgpPeerAddressFamilyFilterListOut = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 8, 1, 16), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpPeerAddressFamilyFilterListOut.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerAddressFamilyFilterListOut.setDescription('The outbound filter AS path list name.')
usdBgpPeerAddressFamilyFilterListWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 8, 1, 17), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpPeerAddressFamilyFilterListWeight.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerAddressFamilyFilterListWeight.setDescription('The weight filter AS path list name.')
usdBgpPeerAddressFamilyFilterListWeightValue = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 8, 1, 18), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpPeerAddressFamilyFilterListWeightValue.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerAddressFamilyFilterListWeightValue.setDescription('The weight to apply on weight filter list matches.')
usdBgpPeerAddressFamilyRouteMapIn = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 8, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpPeerAddressFamilyRouteMapIn.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerAddressFamilyRouteMapIn.setDescription('The inbound route-map name. An empty string means no inbound route-map.')
usdBgpPeerAddressFamilyRouteMapOut = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 8, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpPeerAddressFamilyRouteMapOut.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerAddressFamilyRouteMapOut.setDescription('The outbound route-map name. An empty string means no outbound route-map.')
usdBgpPeerAddressFamilyRouteReflectorClient = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 8, 1, 21), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpPeerAddressFamilyRouteReflectorClient.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerAddressFamilyRouteReflectorClient.setDescription('The peer is a route reflector client.')
usdBgpPeerAddressFamilyRouteLimitWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 8, 1, 22), Unsigned32().clone(1000000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpPeerAddressFamilyRouteLimitWarn.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerAddressFamilyRouteLimitWarn.setDescription('Log a warning if pathCount exceeds this value.')
usdBgpPeerAddressFamilyRouteLimitReset = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 8, 1, 23), Unsigned32().clone(10000000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpPeerAddressFamilyRouteLimitReset.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerAddressFamilyRouteLimitReset.setDescription('Reset connection is pathCount exceeds this value.')
usdBgpPeerAddressFamilyRouteLimitWarnOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 8, 1, 24), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpPeerAddressFamilyRouteLimitWarnOnly.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerAddressFamilyRouteLimitWarnOnly.setDescription('Warn, but do not reset, if the path limit is exceeded.')
usdBgpPeerAddressFamilyRemovePrivateAs = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 8, 1, 25), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpPeerAddressFamilyRemovePrivateAs.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerAddressFamilyRemovePrivateAs.setDescription('Remove private AS numbers from AS paths.')
usdBgpPeerAddressFamilyUnsuppressMap = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 8, 1, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpPeerAddressFamilyUnsuppressMap.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerAddressFamilyUnsuppressMap.setDescription('The unsuppress route-map name. Routes which are sent to this peer and which match this route-map are not subject to suppression by summary-only aggregates. An empty string means no unsuppress route-map.')
usdBgpPeerAddressFamilyInboundSoftReconfig = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 8, 1, 27), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpPeerAddressFamilyInboundSoftReconfig.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerAddressFamilyInboundSoftReconfig.setDescription('Inbound soft-reconfiguration is enabled. If inbound soft-reconfiguration is enabled we keep a copy of each received route before inbound policy was applied.')
usdBgpPeerAddressFamilyResetConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 8, 1, 28), UsdBgpResetConnectionType().clone('resetTypeNoop')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpPeerAddressFamilyResetConnectionType.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerAddressFamilyResetConnectionType.setDescription('Writing a value to this object causes one individual address family within the session to the peer to be cleared; the value determines what type of clear is executed (hard clear, soft clear in, soft clear out, etc.). Note that hard clearing an address family within a session will bounce the session and thus also affect the other address families in the session. Reading this object has no effect and always returns resetTypeNoop.')
usdBgpPeerAddressFamilyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 8, 1, 29), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpPeerAddressFamilyRowStatus.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerAddressFamilyRowStatus.setDescription('Controls creation/deletion of entries in this table according to the RowStatus textual convention, constrained to support the following values only: createAndGo destroy To create an entry in this table, the following entry objects MUST be explicitly configured: usdBgpPeerRemoteAs ')
usdBgpPeerAddressFamilyAsOverride = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 8, 1, 30), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpPeerAddressFamilyAsOverride.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerAddressFamilyAsOverride.setDescription('Replace the AS number of the peer by our own AS number in the AS-path attribute in UPDATEs sent to this peer.')
usdBgpPeerAddressFamilyAllowAsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 8, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpPeerAddressFamilyAllowAsIn.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerAddressFamilyAllowAsIn.setDescription('The maximum number of times our own AS number is allowed to occur in a received AS-path before that received route is considered to be a loop and therefore rejected.')
usdBgpPeerAddressFamilySendExtendedCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 8, 1, 32), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpPeerAddressFamilySendExtendedCommunity.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerAddressFamilySendExtendedCommunity.setDescription('Set this object to true(1) in order to send EXTENDED-COMMUNITIES attributes in updates.')
usdBgpPeerAddressFamilyUnconfiguredAttributes = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 8, 1, 44), Bits().clone(namedValues=NamedValues(("usdBgpPeerAddressFamilyPeerGroup", 0), ("usdBgpPeerAddressFamilyDefaultOriginate", 1), ("usdBgpPeerAddressFamilyNextHopSelf", 2), ("usdBgpPeerAddressFamilySendCommunity", 3), ("usdBgpPeerAddressFamilyDistributeListIn", 4), ("usdBgpPeerAddressFamilyDistributeListOut", 5), ("usdBgpPeerAddressFamilyPrefixListIn", 6), ("usdBgpPeerAddressFamilyPrefixListOut", 7), ("usdBgpPeerAddressFamilyPrefixTreeIn", 8), ("usdBgpPeerAddressFamilyPrefixTreeOut", 9), ("usdBgpPeerAddressFamilyFilterListIn", 10), ("usdBgpPeerAddressFamilyFilterListOut", 11), ("usdBgpPeerAddressFamilyFilterListWeight", 12), ("usdBgpPeerAddressFamilyFilterListWeightValue", 13), ("usdBgpPeerAddressFamilyRouteMapIn", 14), ("usdBgpPeerAddressFamilyRouteMapOut", 15), ("usdBgpPeerAddressFamilyRouteReflectorClient", 16), ("usdBgpPeerAddressFamilyRouteLimitWarn", 17), ("usdBgpPeerAddressFamilyRouteLimitReset", 18), ("usdBgpPeerAddressFamilyRouteLimitWarnOnly", 19), ("usdBgpPeerAddressFamilyRemovePrivateAs", 20), ("usdBgpPeerAddressFamilyUnsuppressMap", 21), ("usdBgpPeerAddressFamilyInboundSoftReconfig", 22), ("usdBgpPeerAddressFamilyAsOverride", 23), ("usdBgpPeerAddressFamilyAllowAsIn", 24), ("usdBgpPeerAddressFamilySendExtendedCommunity", 25)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpPeerAddressFamilyUnconfiguredAttributes.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerAddressFamilyUnconfiguredAttributes.setDescription('On get each bit indicates whether the corresponding attribute is configured or unconfigured: 0 = The attribute is configured (i.e. the configured value is the operational value). 1 = The attribute is unconfigured (i.e. the operational value is inherited from the a higher level which could be the default value). Getting the attribute value itself always returns the operational value of that attribute regardless of whether the attribute is configured or unconfigured. On write each bit indicates wheter or not the corresponding attribute should be set to the unconfigured state: 0 = No operation (i.e. do not change the state of the attribute). 1 = Set the attribute to the unconfigured state. Setting an attribute to a value has the automatic side-effect of setting the bit with the same name to zero.')
usdBgpPeerGroupTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 9), )
if mibBuilder.loadTexts: usdBgpPeerGroupTable.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerGroupTable.setDescription('The Unisphere BGP Peer Group Table describes the BGP-specific characteristics of peer groups.')
usdBgpPeerGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 9, 1), ).setIndexNames((0, "Unisphere-Data-BGP-MIB", "usdBgpPeerGroupVrfName"), (0, "Unisphere-Data-BGP-MIB", "usdBgpPeerGroupGroupName"))
if mibBuilder.loadTexts: usdBgpPeerGroupEntry.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerGroupEntry.setDescription('The BGP Peer Group Entry describes BGP-specific characteristics of one peer group.')
usdBgpPeerGroupVrfName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 9, 1, 1), UsdVrfName())
if mibBuilder.loadTexts: usdBgpPeerGroupVrfName.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerGroupVrfName.setDescription('The name of the VPN Routing Forwarding (VRF) instance in which this peer-group is configured. The empty string indicates that this peer-group is not in a VRF.')
usdBgpPeerGroupGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 9, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)))
if mibBuilder.loadTexts: usdBgpPeerGroupGroupName.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerGroupGroupName.setDescription('The name of the Peer group this instance configures.')
usdBgpPeerGroupAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("stop", 1), ("start", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpPeerGroupAdminStatus.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerGroupAdminStatus.setDescription("The desired state of the BGP connection. A transition from 'stop' to 'start' will cause the BGP Start Event to be generated. A transition from 'start' to 'stop' will cause the BGP Stop Event to be generated. This parameter can be used to restart BGP peer connections. Care should be used in providing write access to this object without adequate authentication.")
usdBgpPeerGroupRemoteAsNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 9, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpPeerGroupRemoteAsNumber.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerGroupRemoteAsNumber.setDescription("The peer's autonomous system number. This object can only be set at row creation.")
usdBgpPeerGroupRetryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 9, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(120)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpPeerGroupRetryInterval.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerGroupRetryInterval.setDescription('Time interval in seconds for the ConnectRetry timer. The suggested value for this timer is 120 seconds.')
usdBgpPeerGroupConfigHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 9, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(3, 65535), )).clone(90)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpPeerGroupConfigHoldTime.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerGroupConfigHoldTime.setDescription('Time interval in seconds for the Hold Time configured for this BGP speaker with this peer. This value is placed in an OPEN message sent to this peer by this BGP speaker, and is compared with the Hold Time field in an OPEN message received from the peer when determining the Hold Time (bgpPeerHoldTime) with the peer. This value must not be less than three seconds if it is not zero (0) in which case the Hold Time is NOT to be established with the peer. The suggested value for this timer is 90 seconds.')
usdBgpPeerGroupConfigKeepAliveInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 9, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 21845)).clone(30)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpPeerGroupConfigKeepAliveInterval.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerGroupConfigKeepAliveInterval.setDescription("Time interval in seconds for the KeepAlive timer configured for this BGP speaker with this peer. The value of this object will only determine the KEEPALIVE messages' frequency relative to the value specified in bgpPeerHoldTimeConfigured; the actual time interval for the KEEPALIVE messages is indicated by bgpPeerKeepAlive. A reasonable maximum value for this timer would be configured to be one third of that of bgpPeerHoldTimeConfigured. If the value of this object is zero (0), no periodical KEEPALIVE messages are sent to the peer after the BGP connection has been established. The suggested value for this timer is 30 seconds.")
usdBgpPeerGroupAsOriginationInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 9, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(10)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpPeerGroupAsOriginationInterval.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerGroupAsOriginationInterval.setDescription('Time interval in seconds for the MinASOriginationInterval timer. The suggested value for this timer is 10 seconds.')
usdBgpPeerGroupAdvertisementInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 9, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(30)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpPeerGroupAdvertisementInterval.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerGroupAdvertisementInterval.setDescription('Time interval in seconds for the MinRouteAdvertisementInterval timer. The suggested value for this timer is 30 seconds.')
usdBgpPeerGroupDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 9, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpPeerGroupDescription.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerGroupDescription.setDescription('Peer textual description.')
usdBgpPeerGroupWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 9, 1, 11), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpPeerGroupWeight.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerGroupWeight.setDescription('The weight assigned to routes learned from peer.')
usdBgpPeerGroupEbgpMultihop = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 9, 1, 12), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpPeerGroupEbgpMultihop.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerGroupEbgpMultihop.setDescription('The EBGP multihop is enabled.')
usdBgpPeerGroupEbgpMultihopTtl = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 9, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpPeerGroupEbgpMultihopTtl.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerGroupEbgpMultihopTtl.setDescription('Maximum number of hops to the external peer (only relevant if EBGP multihop turned on).')
usdBgpPeerGroupUpdateSource = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 9, 1, 14), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpPeerGroupUpdateSource.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerGroupUpdateSource.setDescription('The source IP address for peer connections.')
usdBgpPeerGroupMd5Password = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 9, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpPeerGroupMd5Password.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerGroupMd5Password.setDescription('The password for MD5 authentication. Reading this object always results in an OCTET STRING of length zero.')
usdBgpPeerGroupMaxUpdateSize = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 9, 1, 16), Unsigned32().clone(4096)).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpPeerGroupMaxUpdateSize.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerGroupMaxUpdateSize.setDescription('The maximum size in bytes of transmitted UPDATE messages.')
usdBgpPeerGroupResetConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 9, 1, 17), UsdBgpResetConnectionType().clone('resetTypeNoop')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpPeerGroupResetConnectionType.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerGroupResetConnectionType.setDescription('Writing a value to this object causes the sessions to all peers in the peer-group to be cleared; the value determines what type of clear is executed (hard clear, soft clear in, soft clear out, etc.). Reading this object has no effect and always returns resetTypeNoop.')
usdBgpPeerGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 9, 1, 18), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpPeerGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerGroupRowStatus.setDescription('Controls creation/deletion of entries in this table according to the RowStatus textual convention, constrained to support the following values only: createAndGo destroy To create an entry in this table, the following entry objects MUST be explicitly configured: usdBgpPeerGroupRemoteAs ')
usdBgpPeerGroupLocalAsNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 9, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpPeerGroupLocalAsNumber.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerGroupLocalAsNumber.setDescription('The local autonomous system number to be used for members of this peer-group. Value zero (0) means that the global local automous system number (as specified in the object usdBgpLocalAsNumber) is used.')
usdBgpPeerGroupUnconfiguredAttributes = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 9, 1, 27), Bits().clone(namedValues=NamedValues(("usdBgpPeerGroupAdminStatus", 0), ("usdBgpPeerGroupRemoteAsNumber", 1), ("usdBgpPeerGroupRetryInterval", 2), ("usdBgpPeerGroupConfigHoldTime", 3), ("usdBgpPeerGroupConfigKeepAliveInterval", 4), ("usdBgpPeerGroupAsOriginationInterval", 5), ("usdBgpPeerGroupAdvertisementInterval", 6), ("usdBgpPeerGroupDescription", 7), ("usdBgpPeerGroupWeight", 8), ("usdBgpPeerGroupEbgpMultihop", 9), ("usdBgpPeerGroupEbgpMultihopTtl", 10), ("usdBgpPeerGroupUpdateSource", 11), ("usdBgpPeerGroupMd5Password", 12), ("usdBgpPeerGroupMaxUpdateSize", 13), ("usdBgpPeerGroupLocalAsNumber", 14)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpPeerGroupUnconfiguredAttributes.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerGroupUnconfiguredAttributes.setDescription('On get each bit indicates whether the corresponding attribute is configured or unconfigured: 0 = The attribute is configured (i.e. the configured value is the operational value). 1 = The attribute is unconfigured (i.e. the operational value is inherited from the a higher level which could be the default value). Getting the attribute value itself always returns the operational value of that attribute regardless of whether the attribute is configured or unconfigured. On write each bit indicates wheter or not the corresponding attribute should be set to the unconfigured state: 0 = No operation (i.e. do not change the state of the attribute). 1 = Set the attribute to the unconfigured state. Setting an attribute to a value has the automatic side-effect of setting the bit with the same name to zero.')
usdBgpPeerGroupAddressFamilyTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 10), )
if mibBuilder.loadTexts: usdBgpPeerGroupAddressFamilyTable.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerGroupAddressFamilyTable.setDescription('The Unisphere BGP Peer Group Address Family Table describes the BGP-specific attributes of an Address Family for a peer group.')
usdBgpPeerGroupAddressFamilyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 10, 1), ).setIndexNames((0, "Unisphere-Data-BGP-MIB", "usdBgpPeerGroupAddressFamilyVrfName"), (0, "Unisphere-Data-BGP-MIB", "usdBgpPeerGroupAddressFamilyAfi"), (0, "Unisphere-Data-BGP-MIB", "usdBgpPeerGroupAddressFamilySafi"), (0, "Unisphere-Data-BGP-MIB", "usdBgpPeerGroupGroupAddressFamilyGroupName"))
if mibBuilder.loadTexts: usdBgpPeerGroupAddressFamilyEntry.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerGroupAddressFamilyEntry.setDescription('The BGP Peer Group Address Family Entry describes.')
usdBgpPeerGroupAddressFamilyVrfName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 10, 1, 1), UsdVrfName())
if mibBuilder.loadTexts: usdBgpPeerGroupAddressFamilyVrfName.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerGroupAddressFamilyVrfName.setDescription('The name of the VPN Routing Forwarding (VRF) instance in which this peer-group is configured. The empty string indicates that this peer-group is not in a VRF.')
usdBgpPeerGroupAddressFamilyAfi = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 10, 1, 2), UsdBgpAfi())
if mibBuilder.loadTexts: usdBgpPeerGroupAddressFamilyAfi.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerGroupAddressFamilyAfi.setDescription('The AFI of the address-family in which this peer-group is configured.')
usdBgpPeerGroupAddressFamilySafi = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 10, 1, 3), UsdBgpSafi())
if mibBuilder.loadTexts: usdBgpPeerGroupAddressFamilySafi.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerGroupAddressFamilySafi.setDescription('The SAFI of the address-family in which this peer-group is configured.')
usdBgpPeerGroupGroupAddressFamilyGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 10, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)))
if mibBuilder.loadTexts: usdBgpPeerGroupGroupAddressFamilyGroupName.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerGroupGroupAddressFamilyGroupName.setDescription('The name of the Peer group this instance configures.')
usdBgpPeerGroupAddressFamilyDefaultOriginate = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 10, 1, 5), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpPeerGroupAddressFamilyDefaultOriginate.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerGroupAddressFamilyDefaultOriginate.setDescription('Set this object to true(1) in order to advertise a default route to this peer, if present.')
usdBgpPeerGroupAddressFamilyNextHopSelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 10, 1, 6), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpPeerGroupAddressFamilyNextHopSelf.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerGroupAddressFamilyNextHopSelf.setDescription('Set this object to true(1) in order to always advertise this router as the next hop.')
usdBgpPeerGroupAddressFamilySendCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 10, 1, 7), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpPeerGroupAddressFamilySendCommunity.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerGroupAddressFamilySendCommunity.setDescription('Set this object to true(1) in order to send COMMUNITIES attributes in updates.')
usdBgpPeerGroupAddressFamilyDistributeListIn = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 10, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpPeerGroupAddressFamilyDistributeListIn.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerGroupAddressFamilyDistributeListIn.setDescription('The inbound distribute IP access list name.')
usdBgpPeerGroupAddressFamilyDistributeListOut = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 10, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpPeerGroupAddressFamilyDistributeListOut.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerGroupAddressFamilyDistributeListOut.setDescription('The outbound distribute IP access list name.')
usdBgpPeerGroupAddressFamilyPrefixListIn = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 10, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpPeerGroupAddressFamilyPrefixListIn.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerGroupAddressFamilyPrefixListIn.setDescription('The inbound IP prefix list name.')
usdBgpPeerGroupAddressFamilyPrefixListOut = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 10, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpPeerGroupAddressFamilyPrefixListOut.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerGroupAddressFamilyPrefixListOut.setDescription('The outbound IP prefix list name.')
usdBgpPeerGroupAddressFamilyPrefixTreeIn = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 10, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpPeerGroupAddressFamilyPrefixTreeIn.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerGroupAddressFamilyPrefixTreeIn.setDescription('The inbound IP prefix tree name.')
usdBgpPeerGroupAddressFamilyPrefixTreeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 10, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpPeerGroupAddressFamilyPrefixTreeOut.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerGroupAddressFamilyPrefixTreeOut.setDescription('The outbound IP prefix tree name.')
usdBgpPeerGroupAddressFamilyFilterListIn = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 10, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpPeerGroupAddressFamilyFilterListIn.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerGroupAddressFamilyFilterListIn.setDescription('The inbound filter AS path list name.')
usdBgpPeerGroupAddressFamilyFilterListOut = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 10, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpPeerGroupAddressFamilyFilterListOut.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerGroupAddressFamilyFilterListOut.setDescription('The outbound filter AS path list name.')
usdBgpPeerGroupAddressFamilyFilterListWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 10, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpPeerGroupAddressFamilyFilterListWeight.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerGroupAddressFamilyFilterListWeight.setDescription('The weight filter AS path list name.')
usdBgpPeerGroupAddressFamilyFilterListWeightValue = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 10, 1, 17), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpPeerGroupAddressFamilyFilterListWeightValue.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerGroupAddressFamilyFilterListWeightValue.setDescription('The weight to apply on weight filter list matches.')
usdBgpPeerGroupAddressFamilyRouteMapIn = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 10, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpPeerGroupAddressFamilyRouteMapIn.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerGroupAddressFamilyRouteMapIn.setDescription('The inbound route-map name. An empty string means no inbound route-map.')
usdBgpPeerGroupAddressFamilyRouteMapOut = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 10, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpPeerGroupAddressFamilyRouteMapOut.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerGroupAddressFamilyRouteMapOut.setDescription('The outbound route-map name. An empty string means no outbound route-map.')
usdBgpPeerGroupAddressFamilyRouteReflectorClient = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 10, 1, 20), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpPeerGroupAddressFamilyRouteReflectorClient.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerGroupAddressFamilyRouteReflectorClient.setDescription('The peer is a route reflector client.')
usdBgpPeerGroupAddressFamilyRouteLimitWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 10, 1, 21), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpPeerGroupAddressFamilyRouteLimitWarn.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerGroupAddressFamilyRouteLimitWarn.setDescription('Log a warning if pathCount exceeds this value.')
usdBgpPeerGroupAddressFamilyRouteLimitReset = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 10, 1, 22), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpPeerGroupAddressFamilyRouteLimitReset.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerGroupAddressFamilyRouteLimitReset.setDescription('Reset connection is pathCount exceeds this value.')
usdBgpPeerGroupAddressFamilyRouteLimitWarnOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 10, 1, 23), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpPeerGroupAddressFamilyRouteLimitWarnOnly.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerGroupAddressFamilyRouteLimitWarnOnly.setDescription('Warn, but do not reset, if the path limit is exceeded.')
usdBgpPeerGroupAddressFamilyRemovePrivateAs = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 10, 1, 24), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpPeerGroupAddressFamilyRemovePrivateAs.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerGroupAddressFamilyRemovePrivateAs.setDescription('Remove private AS numbers from AS paths.')
usdBgpPeerGroupAddressFamilyUnsuppressMap = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 10, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpPeerGroupAddressFamilyUnsuppressMap.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerGroupAddressFamilyUnsuppressMap.setDescription('The unsuppress route-map name. Routes which are sent to this peer and which match this route-map are not subject to suppression by summary-only aggregates. An empty string means no unsuppress route-map.')
usdBgpPeerGroupAddressFamilyInboundSoftReconfig = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 10, 1, 26), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpPeerGroupAddressFamilyInboundSoftReconfig.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerGroupAddressFamilyInboundSoftReconfig.setDescription('Inbound soft-reconfiguration is enabled. If inbound soft-reconfiguration is enabled we keep a copy of each received route before inbound policy was applied.')
usdBgpPeerGroupAddressFamilyResetConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 10, 1, 27), UsdBgpResetConnectionType().clone('resetTypeNoop')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpPeerGroupAddressFamilyResetConnectionType.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerGroupAddressFamilyResetConnectionType.setDescription('Writing a value to this object causes one individual address family within the sessions to all peers in the peer-group to be cleared; the value determines what type of clear is executed (hard clear, soft clear in, soft clear out, etc.). Note that hard clearing an address family within a session will bounce the session and thus also affect the other address families in the session. Reading this object has no effect and always returns resetTypeNoop.')
usdBgpPeerGroupAddressFamilyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 10, 1, 28), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpPeerGroupAddressFamilyRowStatus.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerGroupAddressFamilyRowStatus.setDescription('Controls creation/deletion of entries in this table according to the RowStatus textual convention, constrained to support the following values only: createAndGo destroy To create an entry in this table, the following entry objects MUST be explicitly configured: usdBgpPeerGroupRemoteAs ')
usdBgpPeerGroupAddressFamilyAsOverride = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 10, 1, 29), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpPeerGroupAddressFamilyAsOverride.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerGroupAddressFamilyAsOverride.setDescription('Replace the AS number of the peer by our own AS number in the AS-path attribute in UPDATEs sent to this peer-group.')
usdBgpPeerGroupAddressFamilyAllowAsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 10, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpPeerGroupAddressFamilyAllowAsIn.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerGroupAddressFamilyAllowAsIn.setDescription('The maximum number of times our own AS number is allowed to occur in a received AS-path before that received route is considered to be a loop and therefore rejected.')
usdBgpPeerGroupAddressFamilySendExtendedCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 10, 1, 31), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpPeerGroupAddressFamilySendExtendedCommunity.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerGroupAddressFamilySendExtendedCommunity.setDescription('Set this object to true(1) in order to send EXTENDED-COMMUNITIES attributes in updates.')
usdBgpPeerGroupAddressFamilyUnconfiguredAttributes = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 10, 1, 35), Bits().clone(namedValues=NamedValues(("usdBgpPeerGroupAddressFamilyDefaultOriginate", 0), ("usdBgpPeerGroupAddressFamilyNextHopSelf", 1), ("usdBgpPeerGroupAddressFamilySendCommunity", 2), ("usdBgpPeerGroupAddressFamilyDistributeListIn", 3), ("usdBgpPeerGroupAddressFamilyDistributeListOut", 4), ("usdBgpPeerGroupAddressFamilyPrefixListIn", 5), ("usdBgpPeerGroupAddressFamilyPrefixListOut", 6), ("usdBgpPeerGroupAddressFamilyPrefixTreeIn", 7), ("usdBgpPeerGroupAddressFamilyPrefixTreeOut", 8), ("usdBgpPeerGroupAddressFamilyFilterListIn", 9), ("usdBgpPeerGroupAddressFamilyFilterListOut", 10), ("usdBgpPeerGroupAddressFamilyFilterListWeight", 11), ("usdBgpPeerGroupAddressFamilyFilterListWeightValue", 12), ("usdBgpPeerGroupAddressFamilyRouteMapIn", 13), ("usdBgpPeerGroupAddressFamilyRouteMapOut", 14), ("usdBgpPeerGroupAddressFamilyRouteReflectorClient", 15), ("usdBgpPeerGroupAddressFamilyRouteLimitWarn", 16), ("usdBgpPeerGroupAddressFamilyRouteLimitReset", 17), ("usdBgpPeerGroupAddressFamilyRouteLimitWarnOnly", 18), ("usdBgpPeerGroupAddressFamilyRemovePrivateAs", 19), ("usdBgpPeerGroupAddressFamilyUnsuppressMap", 20), ("usdBgpPeerGroupAddressFamilyInboundSoftReconfig", 21), ("usdBgpPeerGroupAddressFamilyAsOverride", 22), ("usdBgpPeerGroupAddressFamilyAllowAsIn", 23), ("usdBgpPeerGroupAddressFamilySendExtendedCommunity", 24)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpPeerGroupAddressFamilyUnconfiguredAttributes.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerGroupAddressFamilyUnconfiguredAttributes.setDescription('On get each bit indicates whether the corresponding attribute is configured or unconfigured: 0 = The attribute is configured (i.e. the configured value is the operational value). 1 = The attribute is unconfigured (i.e. the operational value is inherited from the a higher level which could be the default value). Getting the attribute value itself always returns the operational value of that attribute regardless of whether the attribute is configured or unconfigured. On write each bit indicates wheter or not the corresponding attribute should be set to the unconfigured state: 0 = No operation (i.e. do not change the state of the attribute). 1 = Set the attribute to the unconfigured state. Setting an attribute to a value has the automatic side-effect of setting the bit with the same name to zero.')
usdBgpNetworkTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 16), )
if mibBuilder.loadTexts: usdBgpNetworkTable.setStatus('current')
if mibBuilder.loadTexts: usdBgpNetworkTable.setDescription('The BGP Network Table controls what networks are originated by this BGP router.')
usdBgpNetworkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 16, 1), ).setIndexNames((0, "Unisphere-Data-BGP-MIB", "usdBgpNetworkVrfName"), (0, "Unisphere-Data-BGP-MIB", "usdBgpNetworkAfi"), (0, "Unisphere-Data-BGP-MIB", "usdBgpNetworkSafi"), (0, "Unisphere-Data-BGP-MIB", "usdBgpNetworkIpAddrPrefix"), (0, "Unisphere-Data-BGP-MIB", "usdBgpNetworkIpAddrPrefixLen"))
if mibBuilder.loadTexts: usdBgpNetworkEntry.setStatus('current')
if mibBuilder.loadTexts: usdBgpNetworkEntry.setDescription('An instance in the list of networks originated by this BGP router.')
usdBgpNetworkVrfName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 16, 1, 1), UsdVrfName())
if mibBuilder.loadTexts: usdBgpNetworkVrfName.setStatus('current')
if mibBuilder.loadTexts: usdBgpNetworkVrfName.setDescription('The name of the VPN Routing Forwarding (VRF) instance in which this network is configured. The empty string indicates that this network is not in a VRF.')
usdBgpNetworkAfi = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 16, 1, 2), UsdBgpAfi())
if mibBuilder.loadTexts: usdBgpNetworkAfi.setStatus('current')
if mibBuilder.loadTexts: usdBgpNetworkAfi.setDescription('The AFI of the address-family in which this network is configured.')
usdBgpNetworkSafi = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 16, 1, 3), UsdBgpSafi())
if mibBuilder.loadTexts: usdBgpNetworkSafi.setStatus('current')
if mibBuilder.loadTexts: usdBgpNetworkSafi.setDescription('The SAFI of the address-family in which this network is configured.')
usdBgpNetworkIpAddrPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 16, 1, 4), IpAddress())
if mibBuilder.loadTexts: usdBgpNetworkIpAddrPrefix.setStatus('current')
if mibBuilder.loadTexts: usdBgpNetworkIpAddrPrefix.setDescription('An IP address prefix in the Network Layer Reachability Information field. This object is an IP address containing the prefix with length specified by bgpRouteIpAddrPrefixLen. Any bits beyond the length specified by bgpRouteIpAddrPrefixLen are zeroed.')
usdBgpNetworkIpAddrPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 16, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32)))
if mibBuilder.loadTexts: usdBgpNetworkIpAddrPrefixLen.setStatus('current')
if mibBuilder.loadTexts: usdBgpNetworkIpAddrPrefixLen.setDescription('Length in bits of the IP address prefix in the Network Layer Reachability Information field.')
usdBgpNetworkBackdoor = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 16, 1, 6), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpNetworkBackdoor.setStatus('current')
if mibBuilder.loadTexts: usdBgpNetworkBackdoor.setDescription('Set this object to true(1) in order to enable BGP backdoor in this network. This object can only be set at row creation.')
usdBgpNetworkRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 16, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpNetworkRowStatus.setStatus('current')
if mibBuilder.loadTexts: usdBgpNetworkRowStatus.setDescription('Controls creation/deletion of entries in this table according to the RowStatus textual convention, constrained to support the following values only: createAndGo destroy ')
usdBgpNetworkWeightSpecified = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 16, 1, 8), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpNetworkWeightSpecified.setStatus('current')
if mibBuilder.loadTexts: usdBgpNetworkWeightSpecified.setDescription('If this object is set to true(1) then the BGP weight of this network is set to the value specified in usdBgpNetworkWeightValue. This object can only be set at row creation.')
usdBgpNetworkWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 16, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(32768)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpNetworkWeight.setStatus('current')
if mibBuilder.loadTexts: usdBgpNetworkWeight.setDescription('If usdBgpNetworkWeight specified is set to true(1) then this object specifies the weight of the network. Otherwise the weight of the network is determined by the IGP metric of the prefix. This object can only be set at row creation.')
usdBgpNetworkRouteMap = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 16, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpNetworkRouteMap.setStatus('current')
if mibBuilder.loadTexts: usdBgpNetworkRouteMap.setDescription("The name of the route-map used to set the path attributes of this network. A zero length route-map name means don't use a route-map for this. This object can only be set at row creation.")
usdBgpNetworkUnconfiguredAttributes = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 16, 1, 11), Bits().clone(namedValues=NamedValues(("usdBgpNetworkBackdoor", 0), ("usdBgpNetworkWeight", 1), ("usdBgpNetworkRouteMap", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpNetworkUnconfiguredAttributes.setStatus('current')
if mibBuilder.loadTexts: usdBgpNetworkUnconfiguredAttributes.setDescription('On get each bit indicates whether the corresponding attribute is configured or unconfigured: 0 = The attribute is configured (i.e. the configured value is the operational value). 1 = The attribute is unconfigured (i.e. the operational value is inherited from the a higher level which could be the default value). Getting the attribute value itself always returns the operational value of that attribute regardless of whether the attribute is configured or unconfigured. On write each bit indicates wheter or not the corresponding attribute should be set to the unconfigured state: 0 = No operation (i.e. do not change the state of the attribute). 1 = Set the attribute to the unconfigured state. Setting an attribute to a value has the automatic side-effect of setting the bit with the same name to zero.')
usdBgpAggregateTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 17), )
if mibBuilder.loadTexts: usdBgpAggregateTable.setStatus('current')
if mibBuilder.loadTexts: usdBgpAggregateTable.setDescription('The BGP Aggregate Table controls the consolidation of route information.')
usdBgpAggregateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 17, 1), ).setIndexNames((0, "Unisphere-Data-BGP-MIB", "usdBgpAggregateVrfName"), (0, "Unisphere-Data-BGP-MIB", "usdBgpAggregateAfi"), (0, "Unisphere-Data-BGP-MIB", "usdBgpAggregateSafi"), (0, "Unisphere-Data-BGP-MIB", "usdBgpAggregateIpAddrPrefix"), (0, "Unisphere-Data-BGP-MIB", "usdBgpAggregateIpAddrPrefixLen"))
if mibBuilder.loadTexts: usdBgpAggregateEntry.setStatus('current')
if mibBuilder.loadTexts: usdBgpAggregateEntry.setDescription('An instance in the list of route aggregation.')
usdBgpAggregateVrfName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 17, 1, 1), UsdVrfName())
if mibBuilder.loadTexts: usdBgpAggregateVrfName.setStatus('current')
if mibBuilder.loadTexts: usdBgpAggregateVrfName.setDescription('The name of the VPN Routing Forwarding (VRF) instance in which this aggregate is configured. The empty string indicates that this aggregate is not in a VRF.')
usdBgpAggregateAfi = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 17, 1, 2), UsdBgpAfi())
if mibBuilder.loadTexts: usdBgpAggregateAfi.setStatus('current')
if mibBuilder.loadTexts: usdBgpAggregateAfi.setDescription('The AFI of the address-family in which this aggregate is configured.')
usdBgpAggregateSafi = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 17, 1, 3), UsdBgpSafi())
if mibBuilder.loadTexts: usdBgpAggregateSafi.setStatus('current')
if mibBuilder.loadTexts: usdBgpAggregateSafi.setDescription('The SAFI of the address-family in which this aggregate is configured.')
usdBgpAggregateIpAddrPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 17, 1, 4), IpAddress())
if mibBuilder.loadTexts: usdBgpAggregateIpAddrPrefix.setStatus('current')
if mibBuilder.loadTexts: usdBgpAggregateIpAddrPrefix.setDescription('An IP address prefix in the Network Layer Reachability Information field. This object is an IP address containing the prefix with length specified by bgpRouteIpAddrPrefixLen. Any bits beyond the length specified by bgpRouteIpAddrPrefixLen are zeroed.')
usdBgpAggregateIpAddrPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 17, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32)))
if mibBuilder.loadTexts: usdBgpAggregateIpAddrPrefixLen.setStatus('current')
if mibBuilder.loadTexts: usdBgpAggregateIpAddrPrefixLen.setDescription('Length in bits of the IP address prefix in the Network Layer Reachability Information field.')
usdBgpAggregateAsSet = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 17, 1, 6), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpAggregateAsSet.setStatus('current')
if mibBuilder.loadTexts: usdBgpAggregateAsSet.setDescription('Set this object to true(1) in order to generate AS_set path information by creating an aggregate entry that consists of all elements contained in all paths that are being summarized. This object can only be set at row creation.')
usdBgpAggregateSummaryOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 17, 1, 7), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpAggregateSummaryOnly.setStatus('current')
if mibBuilder.loadTexts: usdBgpAggregateSummaryOnly.setDescription('Set this object to true(1) in order to filter specific routes from updates. By doing that, advertisements of more specific routes will be suppressed to all neighbors. This object can only be set at row creation.')
usdBgpAggregateAttributeMap = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 17, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpAggregateAttributeMap.setStatus('current')
if mibBuilder.loadTexts: usdBgpAggregateAttributeMap.setDescription('The name of the route-map used to set the attributes of the aggregate An empty string means no route-map for this purpose.')
usdBgpAggregateAdvertiseMap = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 17, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpAggregateAdvertiseMap.setStatus('current')
if mibBuilder.loadTexts: usdBgpAggregateAdvertiseMap.setDescription('The name of the route-map used to select routes covered by the aggregate (for as-set aggregates the path attributes of the aggregate route are created by summarizing the path attributes of the covered routes). An empty string means no route-map for this purpose.')
usdBgpAggregateRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 17, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpAggregateRowStatus.setStatus('current')
if mibBuilder.loadTexts: usdBgpAggregateRowStatus.setDescription('Controls creation/deletion of entries in this table according to the RowStatus textual convention, constrained to support the following values only: createAndGo destroy ')
usdBgpAggregateSuppressMap = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 17, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpAggregateSuppressMap.setStatus('current')
if mibBuilder.loadTexts: usdBgpAggregateSuppressMap.setDescription('The suppress route-map name. If a suppress route-map has been specified, all routes which are covered by the aggregate and which match the suppress route-map are suppressed. An empty string means no inbound route-map.')
usdBgpAggregateUnconfiguredAttributes = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 17, 1, 12), Bits().clone(namedValues=NamedValues(("usdBgpAggregateAsSet", 0), ("usdBgpAggregateSummaryOnly", 1), ("usdBgpAggregateAttributeMap", 2), ("usdBgpAggregateAdvertiseMap", 3), ("usdBgpAggregateSuppressMap", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpAggregateUnconfiguredAttributes.setStatus('current')
if mibBuilder.loadTexts: usdBgpAggregateUnconfiguredAttributes.setDescription('On get each bit indicates whether the corresponding attribute is configured or unconfigured: 0 = The attribute is configured (i.e. the configured value is the operational value). 1 = The attribute is unconfigured (i.e. the operational value is inherited from the a higher level which could be the default value). Getting the attribute value itself always returns the operational value of that attribute regardless of whether the attribute is configured or unconfigured. On write each bit indicates wheter or not the corresponding attribute should be set to the unconfigured state: 0 = No operation (i.e. do not change the state of the attribute). 1 = Set the attribute to the unconfigured state. Setting an attribute to a value has the automatic side-effect of setting the bit with the same name to zero.')
usdBgpVrfTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 18), )
if mibBuilder.loadTexts: usdBgpVrfTable.setStatus('current')
if mibBuilder.loadTexts: usdBgpVrfTable.setDescription('The Unisphere BGP VRF Table describes the BGP-specific characteristics of a VPN routing forwarding instance.')
usdBgpVrfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 18, 1), ).setIndexNames((0, "Unisphere-Data-BGP-MIB", "usdBgpVrfName"))
if mibBuilder.loadTexts: usdBgpVrfEntry.setStatus('current')
if mibBuilder.loadTexts: usdBgpVrfEntry.setDescription('The BGP VRF Entry describes BGP-specific characteristics of one VRF.')
usdBgpVrfName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 18, 1, 1), UsdVrfName())
if mibBuilder.loadTexts: usdBgpVrfName.setStatus('current')
if mibBuilder.loadTexts: usdBgpVrfName.setDescription('The name of the VPN Routing Forwarding (VRF) instance.')
usdBgpVrfSynchronization = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 18, 1, 2), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpVrfSynchronization.setStatus('current')
if mibBuilder.loadTexts: usdBgpVrfSynchronization.setDescription('Set this object to true(1) in order to have IGP route synchronization enabled.')
usdBgpVrfAutoSummary = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 18, 1, 3), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpVrfAutoSummary.setStatus('current')
if mibBuilder.loadTexts: usdBgpVrfAutoSummary.setDescription('Set this object to true(1) in order to automatically summarize redistributed routes to their natural network mask.')
usdBgpVrfExternalDistance = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 18, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(20)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpVrfExternalDistance.setStatus('current')
if mibBuilder.loadTexts: usdBgpVrfExternalDistance.setDescription('The administrative distance for external routes.')
usdBgpVrfInternalDistance = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 18, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(200)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpVrfInternalDistance.setStatus('current')
if mibBuilder.loadTexts: usdBgpVrfInternalDistance.setDescription('The administrative distance for internal routes.')
usdBgpVrfLocalDistance = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 18, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(200)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpVrfLocalDistance.setStatus('current')
if mibBuilder.loadTexts: usdBgpVrfLocalDistance.setDescription('The administrative distance for local routes.')
usdBgpVrfResetConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 18, 1, 7), UsdBgpResetConnectionType().clone('resetTypeNoop')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpVrfResetConnectionType.setStatus('current')
if mibBuilder.loadTexts: usdBgpVrfResetConnectionType.setDescription('Writing a value to this object causes the sessions to all peers in this VRF to be cleared; the value determines what type of clear is executed (hard clear, soft clear in, soft clear out, etc.). Reading this object has no effect and always returns resetTypeNoop.')
usdBgpVrfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 18, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpVrfRowStatus.setStatus('current')
if mibBuilder.loadTexts: usdBgpVrfRowStatus.setDescription('Controls creation/deletion of entries in this table according to the RowStatus textual convention, constrained to support the following values only: createAndGo destroy ')
usdBgpVrfOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 18, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ipVrfNotPresent", 0), ("ipVrfPresent", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpVrfOperationalState.setStatus('current')
if mibBuilder.loadTexts: usdBgpVrfOperationalState.setDescription('The BGP VRF operational state.')
usdBgpVrfAddUnicastRoutesToMulticastView = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 18, 1, 10), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpVrfAddUnicastRoutesToMulticastView.setStatus('current')
if mibBuilder.loadTexts: usdBgpVrfAddUnicastRoutesToMulticastView.setDescription('Set this object to true(1) in order to add routes learnt by IPv4 Unicast BGP to the multicast route table.')
usdBgpVrfUnconfiguredAttributes = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 18, 1, 13), Bits().clone(namedValues=NamedValues(("usdBgpVrfSynchronization", 0), ("usdBgpVrfAutoSummary", 1), ("usdBgpVrfExternalDistance", 2), ("usdBgpVrfInternalDistance", 3), ("usdBgpVrfLocalDistance", 4), ("usdBgpVrfAddUnicastRoutesToMulticastView", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpVrfUnconfiguredAttributes.setStatus('current')
if mibBuilder.loadTexts: usdBgpVrfUnconfiguredAttributes.setDescription('On get each bit indicates whether the corresponding attribute is configured or unconfigured: 0 = The attribute is configured (i.e. the configured value is the operational value). 1 = The attribute is unconfigured (i.e. the operational value is inherited from the a higher level which could be the default value). Getting the attribute value itself always returns the operational value of that attribute regardless of whether the attribute is configured or unconfigured. On write each bit indicates wheter or not the corresponding attribute should be set to the unconfigured state: 0 = No operation (i.e. do not change the state of the attribute). 1 = Set the attribute to the unconfigured state. Setting an attribute to a value has the automatic side-effect of setting the bit with the same name to zero.')
usdBgpAddressFamilyTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 19), )
if mibBuilder.loadTexts: usdBgpAddressFamilyTable.setStatus('current')
if mibBuilder.loadTexts: usdBgpAddressFamilyTable.setDescription('The BGP AddressFamily Entry describes BGP-specific characteristics of one AddressFamily.')
usdBgpAddressFamilyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 19, 1), ).setIndexNames((0, "Unisphere-Data-BGP-MIB", "usdBgpAddressFamilyVrfName"), (0, "Unisphere-Data-BGP-MIB", "usdBgpAddressFamilyAfi"), (0, "Unisphere-Data-BGP-MIB", "usdBgpAddressFamilySafi"))
if mibBuilder.loadTexts: usdBgpAddressFamilyEntry.setStatus('current')
if mibBuilder.loadTexts: usdBgpAddressFamilyEntry.setDescription('The BGP address family entry')
usdBgpAddressFamilyVrfName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 19, 1, 1), UsdVrfName())
if mibBuilder.loadTexts: usdBgpAddressFamilyVrfName.setStatus('current')
if mibBuilder.loadTexts: usdBgpAddressFamilyVrfName.setDescription('The name of the VPN Routing Forwarding (VRF) instance in which this address-family is configured. The empty string indicates that this address-family is not in a VRF.')
usdBgpAddressFamilyAfi = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 19, 1, 2), UsdBgpAfi())
if mibBuilder.loadTexts: usdBgpAddressFamilyAfi.setStatus('current')
if mibBuilder.loadTexts: usdBgpAddressFamilyAfi.setDescription('The AFI of the address-family.')
usdBgpAddressFamilySafi = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 19, 1, 3), UsdBgpSafi())
if mibBuilder.loadTexts: usdBgpAddressFamilySafi.setStatus('current')
if mibBuilder.loadTexts: usdBgpAddressFamilySafi.setDescription('The SAFI of the address-family.')
usdBgpAddressFamilyDefaultOriginate = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 19, 1, 4), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpAddressFamilyDefaultOriginate.setStatus('current')
if mibBuilder.loadTexts: usdBgpAddressFamilyDefaultOriginate.setDescription('Set this object to true(1) in order to advertise a default route, if present.')
usdBgpAddressFamilyRouteFlapDampening = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 19, 1, 5), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpAddressFamilyRouteFlapDampening.setStatus('current')
if mibBuilder.loadTexts: usdBgpAddressFamilyRouteFlapDampening.setDescription('Set this object to true(1) in order to enable route flap dampening.')
usdBgpAddressFamilyDampeningSuppressThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 19, 1, 6), Unsigned32().clone(1000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpAddressFamilyDampeningSuppressThreshold.setStatus('current')
if mibBuilder.loadTexts: usdBgpAddressFamilyDampeningSuppressThreshold.setDescription('The dampening cutoff threshold (scaled).')
usdBgpAddressFamilyDampeningReuseThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 19, 1, 7), Unsigned32().clone(1000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpAddressFamilyDampeningReuseThreshold.setStatus('current')
if mibBuilder.loadTexts: usdBgpAddressFamilyDampeningReuseThreshold.setDescription('The dampening reuse threshold (scaled).')
usdBgpAddressFamilyDampeningMaxHoldDownTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 19, 1, 8), Unsigned32().clone(20)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpAddressFamilyDampeningMaxHoldDownTime.setStatus('current')
if mibBuilder.loadTexts: usdBgpAddressFamilyDampeningMaxHoldDownTime.setDescription('Maximum route holddown time, in seconds.')
usdBgpAddressFamilyDampeningHalfLifeReachable = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 19, 1, 9), Unsigned32().clone(5)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpAddressFamilyDampeningHalfLifeReachable.setStatus('current')
if mibBuilder.loadTexts: usdBgpAddressFamilyDampeningHalfLifeReachable.setDescription('Figure of merit half life for reachable routes, in seconds.')
usdBgpAddressFamilyDampeningHalfLifeUnreachable = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 19, 1, 10), Unsigned32().clone(5)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpAddressFamilyDampeningHalfLifeUnreachable.setStatus('current')
if mibBuilder.loadTexts: usdBgpAddressFamilyDampeningHalfLifeUnreachable.setDescription('Figure of merit half life for unreachable routes, in seconds.')
usdBgpAddressFamilyDampeningRouteMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 19, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpAddressFamilyDampeningRouteMapName.setStatus('current')
if mibBuilder.loadTexts: usdBgpAddressFamilyDampeningRouteMapName.setDescription("The name of the route-map used to determine which routes are dampened and which aren't and to set the dampening parameters for those routes which are dampenend. A zero length route-map name means don't use a route-map for this.")
usdBgpAddressFamilyResetConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 19, 1, 12), UsdBgpResetConnectionType().clone('resetTypeNoop')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpAddressFamilyResetConnectionType.setStatus('current')
if mibBuilder.loadTexts: usdBgpAddressFamilyResetConnectionType.setDescription('Writing a value to this object causes one individual address family within the sessions to all peers in this VRF to be cleared; the value determines what type of clear is executed (hard clear, soft clear in, soft clear out, etc.). Note that hard clearing an address family within a session will bounce the session and thus also affect the other address families in the session. Reading this object has no effect and always returns resetTypeNoop.')
usdBgpAddressFamilyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 19, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpAddressFamilyRowStatus.setStatus('current')
if mibBuilder.loadTexts: usdBgpAddressFamilyRowStatus.setDescription('Controls creation/deletion of entries in this table according to the RowStatus textual convention, constrained to support the following values only: createAndGo destroy ')
usdBgpAddressFamilyOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 19, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ipVrfNotPresent", 0), ("ipVrfPresent", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpAddressFamilyOperationalState.setStatus('current')
if mibBuilder.loadTexts: usdBgpAddressFamilyOperationalState.setDescription('The BGP address family operational state.')
usdBgpAddressFamilyUnconfiguredAttributes = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 19, 1, 15), Bits().clone(namedValues=NamedValues(("usdBgpAddressFamilyDefaultOriginate", 0), ("usdBgpAddressFamilyRouteFlapDampening", 1), ("usdBgpAddressFamilyDampeningSuppressThreshold", 2), ("usdBgpAddressFamilyDampeningReuseThreshold", 3), ("usdBgpAddressFamilyDampeningMaxHoldDownTime", 4), ("usdBgpAddressFamilyDampeningHalfLifeReachable", 5), ("usdBgpAddressFamilyDampeningHalfLifeUnreachable", 6), ("usdBgpAddressFamilyDampeningRouteMapName", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdBgpAddressFamilyUnconfiguredAttributes.setStatus('current')
if mibBuilder.loadTexts: usdBgpAddressFamilyUnconfiguredAttributes.setDescription('On get each bit indicates whether the corresponding attribute is configured or unconfigured: 0 = The attribute is configured (i.e. the configured value is the operational value). 1 = The attribute is unconfigured (i.e. the operational value is inherited from the a higher level which could be the default value). Getting the attribute value itself always returns the operational value of that attribute regardless of whether the attribute is configured or unconfigured. On write each bit indicates wheter or not the corresponding attribute should be set to the unconfigured state: 0 = No operation (i.e. do not change the state of the attribute). 1 = Set the attribute to the unconfigured state. Setting an attribute to a value has the automatic side-effect of setting the bit with the same name to zero.')
usdBgpStorageGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 20))
usdBgpStorageInitialHeapSize = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 20, 1), UsdBgpStorageInteger().clone(33554432)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdBgpStorageInitialHeapSize.setStatus('current')
if mibBuilder.loadTexts: usdBgpStorageInitialHeapSize.setDescription('The initial size of the BGP heap in octets. The BGP heap is used for a small number of variable sized data structures.')
usdBgpStorageMaxHeapSize = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 20, 2), UsdBgpStorageInteger().clone(536870912)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdBgpStorageMaxHeapSize.setStatus('current')
if mibBuilder.loadTexts: usdBgpStorageMaxHeapSize.setDescription('The maximum size of the BGP heap in octets.')
usdBgpStorageInitialVrfPoolSize = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 20, 4), UsdBgpStorageInteger().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdBgpStorageInitialVrfPoolSize.setStatus('current')
if mibBuilder.loadTexts: usdBgpStorageInitialVrfPoolSize.setDescription('The initial size of the VRF pool in entries. One entry is allocated from the VRF pool for each VRF used by BGP.')
usdBgpStorageMaxVrfPoolSize = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 20, 5), UsdBgpStorageInteger().clone(500000000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdBgpStorageMaxVrfPoolSize.setStatus('current')
if mibBuilder.loadTexts: usdBgpStorageMaxVrfPoolSize.setDescription('The maximum size of the VRF pool in entries.')
usdBgpStorageInitialAddressFamilyPoolSize = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 20, 6), UsdBgpStorageInteger().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdBgpStorageInitialAddressFamilyPoolSize.setStatus('current')
if mibBuilder.loadTexts: usdBgpStorageInitialAddressFamilyPoolSize.setDescription('The initial size of the address-family pool in entries. One entry is allocated from the address-family pool for each address-family used by BGP.')
usdBgpStorageMaxAddressFamilyPoolSize = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 20, 7), UsdBgpStorageInteger().clone(500000000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdBgpStorageMaxAddressFamilyPoolSize.setStatus('current')
if mibBuilder.loadTexts: usdBgpStorageMaxAddressFamilyPoolSize.setDescription('The initial size of the address-family pool in entries.')
usdBgpStorageInitialPeerPoolSize = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 20, 8), UsdBgpStorageInteger().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdBgpStorageInitialPeerPoolSize.setStatus('current')
if mibBuilder.loadTexts: usdBgpStorageInitialPeerPoolSize.setDescription('The initial size of the peer pool in entries. One entry is allocated from the peer pool for each peer configured in BGP.')
usdBgpStorageMaxPeerPoolSize = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 20, 9), UsdBgpStorageInteger().clone(500000000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdBgpStorageMaxPeerPoolSize.setStatus('current')
if mibBuilder.loadTexts: usdBgpStorageMaxPeerPoolSize.setDescription('The maximum size of the peer pool in entries.')
usdBgpStorageInitialPeerAfPoolSize = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 20, 10), UsdBgpStorageInteger().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdBgpStorageInitialPeerAfPoolSize.setStatus('current')
if mibBuilder.loadTexts: usdBgpStorageInitialPeerAfPoolSize.setDescription('The initial size of the peer-address-family pool in entries. One entry is allocated from the peer-address-family pool for each address family activated for any peer in BGP (including the IPv4 unicast address families which are usually activated by default for each peer).')
usdBgpStorageMaxPeerAfPoolSize = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 20, 11), UsdBgpStorageInteger().clone(500000000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdBgpStorageMaxPeerAfPoolSize.setStatus('current')
if mibBuilder.loadTexts: usdBgpStorageMaxPeerAfPoolSize.setDescription('The maximum size of the peer-address-family pool in entries.')
usdBgpStorageInitialPeerGroupPoolSize = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 20, 12), UsdBgpStorageInteger().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdBgpStorageInitialPeerGroupPoolSize.setStatus('current')
if mibBuilder.loadTexts: usdBgpStorageInitialPeerGroupPoolSize.setDescription('The initial size of the peer-group pool in entries. One entry is allocated from the peer-group pool for each peer-group configured in BGP.')
usdBgpStorageMaxPeerGroupPoolSize = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 20, 13), UsdBgpStorageInteger().clone(500000000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdBgpStorageMaxPeerGroupPoolSize.setStatus('current')
if mibBuilder.loadTexts: usdBgpStorageMaxPeerGroupPoolSize.setDescription('The maximum size of the peer-group pool in entries.')
usdBgpStorageInitialPeerGroupAfPoolSize = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 20, 14), UsdBgpStorageInteger().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdBgpStorageInitialPeerGroupAfPoolSize.setStatus('current')
if mibBuilder.loadTexts: usdBgpStorageInitialPeerGroupAfPoolSize.setDescription('The initial size of the peer-group-address-family pool in entries. One entry is allocated from the peer-group-address-family pool for each address family activated for any peer-group in BGP (including the IPv4 unicast address families which are usually activated by default for each peer-group).')
usdBgpStorageMaxPeerGroupAfPoolSize = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 20, 15), UsdBgpStorageInteger().clone(500000000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdBgpStorageMaxPeerGroupAfPoolSize.setStatus('current')
if mibBuilder.loadTexts: usdBgpStorageMaxPeerGroupAfPoolSize.setDescription('The maximum size of the peer-group-address-family pool in entries.')
usdBgpStorageInitialNetworkPoolSize = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 20, 16), UsdBgpStorageInteger().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdBgpStorageInitialNetworkPoolSize.setStatus('current')
if mibBuilder.loadTexts: usdBgpStorageInitialNetworkPoolSize.setDescription('The initial size of the network pool in entries. One entry is allocated from the network pool for each network configured in BGP.')
usdBgpStorageMaxNetworkPoolSize = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 20, 17), UsdBgpStorageInteger().clone(500000000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdBgpStorageMaxNetworkPoolSize.setStatus('current')
if mibBuilder.loadTexts: usdBgpStorageMaxNetworkPoolSize.setDescription('The maximum size of the network pool in entries.')
usdBgpStorageInitialAggregatePoolSize = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 20, 18), UsdBgpStorageInteger().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdBgpStorageInitialAggregatePoolSize.setStatus('current')
if mibBuilder.loadTexts: usdBgpStorageInitialAggregatePoolSize.setDescription('The initial size of the aggregate pool in entries. One entry is allocated from the aggregate pool for each aggregate configured in BGP.')
usdBgpStorageMaxAggregatePoolSize = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 20, 19), UsdBgpStorageInteger().clone(500000000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdBgpStorageMaxAggregatePoolSize.setStatus('current')
if mibBuilder.loadTexts: usdBgpStorageMaxAggregatePoolSize.setDescription('The maximum size of the aggregate pool in entries.')
usdBgpStorageInitialDestinationPoolSize = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 20, 20), UsdBgpStorageInteger().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdBgpStorageInitialDestinationPoolSize.setStatus('current')
if mibBuilder.loadTexts: usdBgpStorageInitialDestinationPoolSize.setDescription('The initial size of the destination pool in entries. One entry is allocated from the destination pool for each unique prefix in the BGP RIB.')
usdBgpStorageMaxDestinationPoolSize = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 20, 21), UsdBgpStorageInteger().clone(500000000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdBgpStorageMaxDestinationPoolSize.setStatus('current')
if mibBuilder.loadTexts: usdBgpStorageMaxDestinationPoolSize.setDescription('The maximum size of the destination pool in entries.')
usdBgpStorageInitialRoutePoolSize = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 20, 22), UsdBgpStorageInteger().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdBgpStorageInitialRoutePoolSize.setStatus('current')
if mibBuilder.loadTexts: usdBgpStorageInitialRoutePoolSize.setDescription('The initial size of the route pool in entries. One entry is allocated from the route pool for each received non-VPN route in the BGP RIB.')
usdBgpStorageMaxRoutePoolSize = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 20, 23), UsdBgpStorageInteger().clone(500000000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdBgpStorageMaxRoutePoolSize.setStatus('current')
if mibBuilder.loadTexts: usdBgpStorageMaxRoutePoolSize.setDescription('The maximum size of the route pool in entries.')
usdBgpStorageInitialAttributesPoolSize = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 20, 24), UsdBgpStorageInteger().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdBgpStorageInitialAttributesPoolSize.setStatus('current')
if mibBuilder.loadTexts: usdBgpStorageInitialAttributesPoolSize.setDescription('The initial size of the attributes pool in entries. One entry is allocated from the attributes pool for each unique combination of path attributes of routes in the BGP RIB.')
usdBgpStorageMaxAttributesPoolSize = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 20, 25), UsdBgpStorageInteger().clone(500000000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdBgpStorageMaxAttributesPoolSize.setStatus('current')
if mibBuilder.loadTexts: usdBgpStorageMaxAttributesPoolSize.setDescription('The maximum size of the attributes pool in entries.')
usdBgpStorageInitialRouteFlapHistoryPoolSize = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 20, 26), UsdBgpStorageInteger().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdBgpStorageInitialRouteFlapHistoryPoolSize.setStatus('current')
if mibBuilder.loadTexts: usdBgpStorageInitialRouteFlapHistoryPoolSize.setDescription('The initial size of the route-flap-history pool in entries. One entry is allocated from the route-flap-history pool for each route in the BGP RIB which has route-flap dampening history associated with it.')
usdBgpStorageMaxRouteFlapHistoryPoolSize = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 20, 27), UsdBgpStorageInteger().clone(500000000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdBgpStorageMaxRouteFlapHistoryPoolSize.setStatus('current')
if mibBuilder.loadTexts: usdBgpStorageMaxRouteFlapHistoryPoolSize.setDescription('The maximum size of the route-flap-history pool in entries.')
usdBgpStorageInitialNetworkRoutePoolSize = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 20, 28), UsdBgpStorageInteger().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdBgpStorageInitialNetworkRoutePoolSize.setStatus('current')
if mibBuilder.loadTexts: usdBgpStorageInitialNetworkRoutePoolSize.setDescription('The initial size of the network-route pool in entries. One entry is allocated from the network-route pool for each network route in the BGP RIB.')
usdBgpStorageMaxNetworkRoutePoolSize = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 20, 29), UsdBgpStorageInteger().clone(500000000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdBgpStorageMaxNetworkRoutePoolSize.setStatus('current')
if mibBuilder.loadTexts: usdBgpStorageMaxNetworkRoutePoolSize.setDescription('The maximum size of the network-route pool in entries.')
usdBgpStorageInitialRedistributedRoutePoolSize = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 20, 30), UsdBgpStorageInteger().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdBgpStorageInitialRedistributedRoutePoolSize.setStatus('current')
if mibBuilder.loadTexts: usdBgpStorageInitialRedistributedRoutePoolSize.setDescription('The initial size of the redistributed-route pool in entries. One entry is allocated from the redistributed-route pool for each redistributed route in the BGP RIB.')
usdBgpStorageMaxRedistributedRoutePoolSize = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 20, 31), UsdBgpStorageInteger().clone(500000000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdBgpStorageMaxRedistributedRoutePoolSize.setStatus('current')
if mibBuilder.loadTexts: usdBgpStorageMaxRedistributedRoutePoolSize.setDescription('The maximum size of the redistributed-route pool in entries.')
usdBgpStorageInitialAggregateRoutePoolSize = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 20, 32), UsdBgpStorageInteger().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdBgpStorageInitialAggregateRoutePoolSize.setStatus('current')
if mibBuilder.loadTexts: usdBgpStorageInitialAggregateRoutePoolSize.setDescription('The initial size of the aggregate-route pool in entries. One entry is allocated from the aggregate-route pool for each aggregate route in the BGP RIB.')
usdBgpStorageMaxAggregateRoutePoolSize = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 20, 33), UsdBgpStorageInteger().clone(500000000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdBgpStorageMaxAggregateRoutePoolSize.setStatus('current')
if mibBuilder.loadTexts: usdBgpStorageMaxAggregateRoutePoolSize.setDescription('The maximum size of the aggregate-route pool in entries.')
usdBgpStorageInitialAutoSummaryRoutePoolSize = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 20, 34), UsdBgpStorageInteger().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdBgpStorageInitialAutoSummaryRoutePoolSize.setStatus('current')
if mibBuilder.loadTexts: usdBgpStorageInitialAutoSummaryRoutePoolSize.setDescription('The initial size of the auto-summary-route pool in entries. One entry is allocated from the auto-summary-route pool for each auto-summary route in the BGP RIB.')
usdBgpStorageMaxAutoSummaryRoutePoolSize = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 20, 35), UsdBgpStorageInteger().clone(500000000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdBgpStorageMaxAutoSummaryRoutePoolSize.setStatus('current')
if mibBuilder.loadTexts: usdBgpStorageMaxAutoSummaryRoutePoolSize.setDescription('The maximum size of the auto-summary-route pool in entries.')
usdBgpStorageInitialHistoryRoutePoolSize = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 20, 36), UsdBgpStorageInteger().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdBgpStorageInitialHistoryRoutePoolSize.setStatus('obsolete')
if mibBuilder.loadTexts: usdBgpStorageInitialHistoryRoutePoolSize.setDescription('This object is obsolete. Setting it has not effect and reading this object returns an undefined value.')
usdBgpStorageMaxHistoryRoutePoolSize = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 20, 37), UsdBgpStorageInteger().clone(500000000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdBgpStorageMaxHistoryRoutePoolSize.setStatus('obsolete')
if mibBuilder.loadTexts: usdBgpStorageMaxHistoryRoutePoolSize.setDescription('This object is obsolete. Setting it has not effect and reading this object returns an undefined value.')
usdBgpStorageInitialSendQueueEntryPoolSize = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 20, 38), UsdBgpStorageInteger().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdBgpStorageInitialSendQueueEntryPoolSize.setStatus('current')
if mibBuilder.loadTexts: usdBgpStorageInitialSendQueueEntryPoolSize.setDescription('The initial size of the send-queue-entry pool in entries. One entry is allocated from the send-queue-entry pool for update messages which is queued for transmission to a peer.')
usdBgpStorageMaxSendQueueEntryPoolSize = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 20, 39), UsdBgpStorageInteger().clone(500000000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdBgpStorageMaxSendQueueEntryPoolSize.setStatus('current')
if mibBuilder.loadTexts: usdBgpStorageMaxSendQueueEntryPoolSize.setDescription('The maximum size of the send-queue-entry pool in entries.')
usdBgpStorageInitialVpnRoutePoolSize = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 20, 40), UsdBgpStorageInteger().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdBgpStorageInitialVpnRoutePoolSize.setStatus('current')
if mibBuilder.loadTexts: usdBgpStorageInitialVpnRoutePoolSize.setDescription('The initial size of the vpn-route pool in entries. One entry is allocated from the vpn-route pool for each received VPN route in the BGP RIB.')
usdBgpStorageMaxVpnRoutePoolSize = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 20, 41), UsdBgpStorageInteger().clone(500000000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdBgpStorageMaxVpnRoutePoolSize.setStatus('current')
if mibBuilder.loadTexts: usdBgpStorageMaxVpnRoutePoolSize.setDescription('The maximum size of the vpn-route pool in entries.')
usdBgpStorageInitialRouteTargetPoolSize = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 20, 42), UsdBgpStorageInteger().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdBgpStorageInitialRouteTargetPoolSize.setStatus('current')
if mibBuilder.loadTexts: usdBgpStorageInitialRouteTargetPoolSize.setDescription('The initial size of the route-target pool in entries. One entry is allocated from the route-target pool for each route-target imported in any VRF used by BGP.')
usdBgpStorageMaxRouteTargetPoolSize = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 20, 43), UsdBgpStorageInteger().clone(500000000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdBgpStorageMaxRouteTargetPoolSize.setStatus('current')
if mibBuilder.loadTexts: usdBgpStorageMaxRouteTargetPoolSize.setDescription('The maximum size of the route-target pool in entries.')
usdBgpNewRouteTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 23), )
if mibBuilder.loadTexts: usdBgpNewRouteTable.setStatus('current')
if mibBuilder.loadTexts: usdBgpNewRouteTable.setDescription('The BGP-4 Received Path Attribute Table contains additional information about paths to destination networks received from all BGP4 peers.')
usdBgpNewRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 23, 1), ).setIndexNames((0, "Unisphere-Data-BGP-MIB", "usdBgpNewRouteVrfName"), (0, "Unisphere-Data-BGP-MIB", "usdBgpNewRouteAfi"), (0, "Unisphere-Data-BGP-MIB", "usdBgpNewRouteSafi"), (0, "Unisphere-Data-BGP-MIB", "usdBgpNewRouteIpAddrPrefix"), (0, "Unisphere-Data-BGP-MIB", "usdBgpNewRouteIpAddrPrefixLen"), (0, "Unisphere-Data-BGP-MIB", "usdBgpNewRouteDistinguisher"), (0, "Unisphere-Data-BGP-MIB", "usdBgpNewRoutePeer"), (0, "Unisphere-Data-BGP-MIB", "usdBgpNewRouteRouteType"), (0, "Unisphere-Data-BGP-MIB", "usdBgpNewRouteOriginalRd"))
if mibBuilder.loadTexts: usdBgpNewRouteEntry.setStatus('current')
if mibBuilder.loadTexts: usdBgpNewRouteEntry.setDescription('Additional information about a path to a network.')
usdBgpNewRouteVrfName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 23, 1, 1), UsdVrfName())
if mibBuilder.loadTexts: usdBgpNewRouteVrfName.setStatus('current')
if mibBuilder.loadTexts: usdBgpNewRouteVrfName.setDescription('The name of the VPN Routing Forwarding (VRF) instance in which this route is present. The empty string indicates that this route is not in a VRF.')
usdBgpNewRouteAfi = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 23, 1, 2), UsdBgpAfi())
if mibBuilder.loadTexts: usdBgpNewRouteAfi.setStatus('current')
if mibBuilder.loadTexts: usdBgpNewRouteAfi.setDescription('The AFI of the address-family in which this route is present.')
usdBgpNewRouteSafi = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 23, 1, 3), UsdBgpSafi())
if mibBuilder.loadTexts: usdBgpNewRouteSafi.setStatus('current')
if mibBuilder.loadTexts: usdBgpNewRouteSafi.setDescription('The SAFI of the address-family in which this route is present.')
usdBgpNewRouteIpAddrPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 23, 1, 4), IpAddress())
if mibBuilder.loadTexts: usdBgpNewRouteIpAddrPrefix.setStatus('current')
if mibBuilder.loadTexts: usdBgpNewRouteIpAddrPrefix.setDescription('The IP address prefix of the route. This object is an IP address containing the prefix with length specified by usdBgpNewRouteIpAddrPrefixLen. Any bits beyond the length specified by usdBgpNewRouteIpAddrPrefixLen are zeroed.')
usdBgpNewRouteIpAddrPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 23, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32)))
if mibBuilder.loadTexts: usdBgpNewRouteIpAddrPrefixLen.setStatus('current')
if mibBuilder.loadTexts: usdBgpNewRouteIpAddrPrefixLen.setDescription('Length in bits of the IP address prefix of the route.')
usdBgpNewRouteDistinguisher = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 23, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8))
if mibBuilder.loadTexts: usdBgpNewRouteDistinguisher.setStatus('current')
if mibBuilder.loadTexts: usdBgpNewRouteDistinguisher.setDescription('The Route Distinguisher (RD) of the route. This object has an undefined value for non-VPN routes.')
usdBgpNewRoutePeer = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 23, 1, 7), IpAddress())
if mibBuilder.loadTexts: usdBgpNewRoutePeer.setStatus('current')
if mibBuilder.loadTexts: usdBgpNewRoutePeer.setDescription('The IP address of the peer from which the route was received. This object has value 0.0.0.0 is the route was a locally originated route.')
usdBgpNewRouteRouteType = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 23, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("routeTypeReceived", 1), ("routeTypeNetwork", 2), ("routeTypeRedistributed", 3), ("routeTypeAggregate", 4), ("routeTypeAutoSummary", 5))))
if mibBuilder.loadTexts: usdBgpNewRouteRouteType.setStatus('current')
if mibBuilder.loadTexts: usdBgpNewRouteRouteType.setDescription('The type of the route.')
usdBgpNewRouteOriginalRd = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 23, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8))
if mibBuilder.loadTexts: usdBgpNewRouteOriginalRd.setStatus('current')
if mibBuilder.loadTexts: usdBgpNewRouteOriginalRd.setDescription('The original Route Distinguisher (RD) of a VPN route. For VPN routes which are originated in a VRF or which are received from a CE the original RD is equal to the RD of the VRF. For VPN routes which are received from another PE and imported into a VRF, the original RD is the RD which was received from the other PE (the RD of the route itself is changed to the RD for the VRF when the route is imported into the VRF). For non-VPN routes the value of this object is undefined.')
usdBgpNewRouteOriginatorId = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 23, 1, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpNewRouteOriginatorId.setStatus('current')
if mibBuilder.loadTexts: usdBgpNewRouteOriginatorId.setDescription('The Originator-ID path attribute of the route if present. The usdBgpNewRouteOriginatorIdPresent object indicates whether the Originator-ID path attribute is present.')
usdBgpNewRouteAtomicAggregatePresent = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 23, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpNewRouteAtomicAggregatePresent.setStatus('current')
if mibBuilder.loadTexts: usdBgpNewRouteAtomicAggregatePresent.setDescription('Atomic-Aggregate path attribute is present.')
usdBgpNewRouteMedPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 23, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpNewRouteMedPresent.setStatus('current')
if mibBuilder.loadTexts: usdBgpNewRouteMedPresent.setDescription('The Multi-Exit-Discriminator path attribute is present.')
usdBgpNewRouteLocalPrefPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 23, 1, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpNewRouteLocalPrefPresent.setStatus('current')
if mibBuilder.loadTexts: usdBgpNewRouteLocalPrefPresent.setDescription('The Local-Pref path attribute is present.')
usdBgpNewRouteAggregatorPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 23, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpNewRouteAggregatorPresent.setStatus('current')
if mibBuilder.loadTexts: usdBgpNewRouteAggregatorPresent.setDescription('The Aggregator path attribute is present.')
usdBgpNewRouteCommunitiesPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 23, 1, 15), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpNewRouteCommunitiesPresent.setStatus('current')
if mibBuilder.loadTexts: usdBgpNewRouteCommunitiesPresent.setDescription('The Communities path attribute is present.')
usdBgpNewRouteOriginatorIdPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 23, 1, 16), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpNewRouteOriginatorIdPresent.setStatus('current')
if mibBuilder.loadTexts: usdBgpNewRouteOriginatorIdPresent.setDescription('The Originator-ID path attribute is present.')
usdBgpNewRouteClusterListPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 23, 1, 17), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpNewRouteClusterListPresent.setStatus('current')
if mibBuilder.loadTexts: usdBgpNewRouteClusterListPresent.setDescription('The Cluster-List path attribute is present.')
usdBgpNewRouteWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 23, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpNewRouteWeight.setStatus('current')
if mibBuilder.loadTexts: usdBgpNewRouteWeight.setDescription('The weight of the route.')
usdBgpNewRouteOrigin = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 23, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("igp", 1), ("egp", 2), ("incomplete", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpNewRouteOrigin.setStatus('current')
if mibBuilder.loadTexts: usdBgpNewRouteOrigin.setDescription('The value of the Origin path attribute.')
usdBgpNewRouteASPathSegment = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 23, 1, 20), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpNewRouteASPathSegment.setStatus('current')
if mibBuilder.loadTexts: usdBgpNewRouteASPathSegment.setDescription('The value of the AS-path path attribute (as encoded in the received update message).')
usdBgpNewRouteNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 23, 1, 21), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpNewRouteNextHop.setStatus('current')
if mibBuilder.loadTexts: usdBgpNewRouteNextHop.setDescription('The value of the Next-Hop path attribute.')
usdBgpNewRouteMultiExitDisc = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 23, 1, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpNewRouteMultiExitDisc.setStatus('current')
if mibBuilder.loadTexts: usdBgpNewRouteMultiExitDisc.setDescription('The value of the Multi-Exit-Discriminator path attribute if present. The usdBgpNewRouteMedPresent object indicates whether the Multi-Exit-Discriminator path attribute is present.')
usdBgpNewRouteLocalPref = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 23, 1, 23), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpNewRouteLocalPref.setStatus('current')
if mibBuilder.loadTexts: usdBgpNewRouteLocalPref.setDescription('The value of the Local-Pref path attribute if present. The usdBgpNewRouteLocalPrefPresent object indicates whether the Local-Pref path attribute is present.')
usdBgpNewRouteAtomicAggregate = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 23, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lessSpecificRouteNotSelected", 1), ("lessSpecificRouteSelected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpNewRouteAtomicAggregate.setStatus('current')
if mibBuilder.loadTexts: usdBgpNewRouteAtomicAggregate.setDescription('Whether or not the local system has selected a less specific route without selecting a more specific route.')
usdBgpNewRouteAggregatorAS = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 23, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpNewRouteAggregatorAS.setStatus('current')
if mibBuilder.loadTexts: usdBgpNewRouteAggregatorAS.setDescription('The value of the AS field in the Aggregator path attribute if present. The usdBgpNewRouteAggregatorPresent object indicates whether the Aggregator path attribute is present.')
usdBgpNewRouteAggregatorAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 23, 1, 26), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpNewRouteAggregatorAddress.setStatus('current')
if mibBuilder.loadTexts: usdBgpNewRouteAggregatorAddress.setDescription('The value of the address field in the Aggregator path attribute if present. The usdBgpNewRouteAggregatorPresent object indicates whether the Aggregator path attribute is present.')
usdBgpNewRouteBestInIpRouteTable = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 23, 1, 27), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpNewRouteBestInIpRouteTable.setStatus('current')
if mibBuilder.loadTexts: usdBgpNewRouteBestInIpRouteTable.setDescription('When BGP places a routes in the IP route table, that route may not be used for forwarding traffic if there are other routes (e.g. IGP routes or static routes) to that same prefix with a better administrative distance in the IP route table. This object indicates whether or not the BGP route in the IP route table is the best route (and hence is used for forwarding traffic).')
usdBgpNewRouteUnknown = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 23, 1, 28), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpNewRouteUnknown.setStatus('current')
if mibBuilder.loadTexts: usdBgpNewRouteUnknown.setDescription('One or more path attributes not understood by this BGP4 speaker. Size zero (0) indicates the absence of such attribute(s). Octets beyond the maximum size, if any, are not recorded by this object.')
usdBgpNewRouteExtendedCommunitiesPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 23, 1, 29), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpNewRouteExtendedCommunitiesPresent.setStatus('current')
if mibBuilder.loadTexts: usdBgpNewRouteExtendedCommunitiesPresent.setDescription('Is the Extended-Communities path attribute present?')
usdBgpNewRouteValid = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 23, 1, 30), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpNewRouteValid.setStatus('current')
if mibBuilder.loadTexts: usdBgpNewRouteValid.setDescription('Is the route valid? The route is declared invalid if there is something wrong with it which is not serious enough for sending a notification, but it serious enough for not placing it in the IP route table or propagating it to other peers (for example the next-hop of the route is a local address).')
usdBgpNewRouteSuppressedBy = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 23, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("suppressedByNothing", 1), ("suppressedByAggregate", 2), ("suppressedByAutoSummary", 3), ("suppressedByDampening", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpNewRouteSuppressedBy.setStatus('current')
if mibBuilder.loadTexts: usdBgpNewRouteSuppressedBy.setDescription('Indicates whether or not the route is suppressed, and if so why: suppressedByNothing - Route is not suppressed. suppressedByAggregate - Route is suppressed by a summary-only aggregate. suppressedByAutoSummary - Route is suppressed by an auto-summary. suppressedByDampening - Route is suppressed as a result of route-flap dampening.')
usdBgpNewRouteNextHopReachable = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 23, 1, 32), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpNewRouteNextHopReachable.setStatus('current')
if mibBuilder.loadTexts: usdBgpNewRouteNextHopReachable.setDescription('Is the indirect next-hop of the route reachable (i.e. can the indirect next-hop of the route be resolved to at least one direct next-hop)?')
usdBgpNewRouteSynchronizedWithIgp = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 23, 1, 33), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpNewRouteSynchronizedWithIgp.setStatus('current')
if mibBuilder.loadTexts: usdBgpNewRouteSynchronizedWithIgp.setDescription('Is the route is synchronized (i.e. is there is an IGP route to the same prefix in the IP route table)?')
usdBgpNewRoutePlaceInIpRouteTable = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 23, 1, 34), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpNewRoutePlaceInIpRouteTable.setStatus('current')
if mibBuilder.loadTexts: usdBgpNewRoutePlaceInIpRouteTable.setDescription('Has a BGP route for this prefix been placed in the IP route table?')
usdBgpNewRouteAdvertiseToExternalPeers = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 23, 1, 35), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpNewRouteAdvertiseToExternalPeers.setStatus('current')
if mibBuilder.loadTexts: usdBgpNewRouteAdvertiseToExternalPeers.setDescription('Should this route be advertised to external peers?')
usdBgpNewRouteAdvertiseToInternalPeers = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 23, 1, 36), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpNewRouteAdvertiseToInternalPeers.setStatus('current')
if mibBuilder.loadTexts: usdBgpNewRouteAdvertiseToInternalPeers.setDescription('Should this route be advertised to internal peers?')
usdBgpNewRouteMplsLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 23, 1, 37), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpNewRouteMplsLabel.setStatus('current')
if mibBuilder.loadTexts: usdBgpNewRouteMplsLabel.setDescription('The MPLS label for the route.')
usdBgpNewRouteNextHopMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 23, 1, 38), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpNewRouteNextHopMetric.setStatus('current')
if mibBuilder.loadTexts: usdBgpNewRouteNextHopMetric.setDescription('The metric of direct next-hop of this BGP route.')
usdBgpNewRouteFlapHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 24), )
if mibBuilder.loadTexts: usdBgpNewRouteFlapHistoryTable.setStatus('current')
if mibBuilder.loadTexts: usdBgpNewRouteFlapHistoryTable.setDescription('The BGP Route Flap History Table contains information about recorded route flap events.')
usdBgpNewRouteFlapHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 24, 1), ).setIndexNames((0, "Unisphere-Data-BGP-MIB", "usdBgpNewRouteVrfName"), (0, "Unisphere-Data-BGP-MIB", "usdBgpNewRouteAfi"), (0, "Unisphere-Data-BGP-MIB", "usdBgpNewRouteSafi"), (0, "Unisphere-Data-BGP-MIB", "usdBgpNewRouteIpAddrPrefix"), (0, "Unisphere-Data-BGP-MIB", "usdBgpNewRouteIpAddrPrefixLen"), (0, "Unisphere-Data-BGP-MIB", "usdBgpNewRouteDistinguisher"), (0, "Unisphere-Data-BGP-MIB", "usdBgpNewRoutePeer"), (0, "Unisphere-Data-BGP-MIB", "usdBgpNewRouteRouteType"), (0, "Unisphere-Data-BGP-MIB", "usdBgpNewRouteOriginalRd"))
if mibBuilder.loadTexts: usdBgpNewRouteFlapHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: usdBgpNewRouteFlapHistoryEntry.setDescription('An instance in the list of route flap events.')
usdBgpNewRouteFlapState = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 24, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("stateAvailable", 1), ("stateSuppressedReachable", 2), ("stateSuppressedUnreachable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpNewRouteFlapState.setStatus('current')
if mibBuilder.loadTexts: usdBgpNewRouteFlapState.setDescription('Current state: stateAvailable(1) - indicates path is available stateSuppressedReachable(2) - indicates path is suppressed, destination is reachable stateSuppressedUnreachable(3) - indicates path in suppressed, destination is not reachable ')
usdBgpNewRouteFlapFigureOfMerit = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 24, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpNewRouteFlapFigureOfMerit.setStatus('current')
if mibBuilder.loadTexts: usdBgpNewRouteFlapFigureOfMerit.setDescription('Calculated figure-of-merit.')
usdBgpNewRouteFlapRemainingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 24, 1, 3), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpNewRouteFlapRemainingTime.setStatus('current')
if mibBuilder.loadTexts: usdBgpNewRouteFlapRemainingTime.setDescription('Number of seconds until reuse or removal.')
usdBgpNewRouteFlapSuppressThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 24, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpNewRouteFlapSuppressThreshold.setStatus('current')
if mibBuilder.loadTexts: usdBgpNewRouteFlapSuppressThreshold.setDescription('Damping cutoff threshold (scaled).')
usdBgpNewRouteFlapReuseThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 24, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpNewRouteFlapReuseThreshold.setStatus('current')
if mibBuilder.loadTexts: usdBgpNewRouteFlapReuseThreshold.setDescription('Damping reuse threshold (scaled).')
usdBgpNewRouteFlapMaxHoldDownTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 24, 1, 6), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpNewRouteFlapMaxHoldDownTime.setStatus('current')
if mibBuilder.loadTexts: usdBgpNewRouteFlapMaxHoldDownTime.setDescription('Maximum route holddown time (seconds).')
usdBgpNewRouteFlapHalfLifeReachable = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 24, 1, 7), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpNewRouteFlapHalfLifeReachable.setStatus('current')
if mibBuilder.loadTexts: usdBgpNewRouteFlapHalfLifeReachable.setDescription('Figure of merit half life for reachable routes (seconds).')
usdBgpNewRouteFlapHalfLifeUnreachable = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 24, 1, 8), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpNewRouteFlapHalfLifeUnreachable.setStatus('current')
if mibBuilder.loadTexts: usdBgpNewRouteFlapHalfLifeUnreachable.setDescription('Figure of merit half life for unreachable routes (seconds).')
usdBgpNewRouteCommunityTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 25), )
if mibBuilder.loadTexts: usdBgpNewRouteCommunityTable.setStatus('current')
if mibBuilder.loadTexts: usdBgpNewRouteCommunityTable.setDescription('The BGP-4 Path Community Table contains information about communities within destination networks received from all BGP4 peers.')
usdBgpNewRouteCommunityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 25, 1), ).setIndexNames((0, "Unisphere-Data-BGP-MIB", "usdBgpNewRouteVrfName"), (0, "Unisphere-Data-BGP-MIB", "usdBgpNewRouteAfi"), (0, "Unisphere-Data-BGP-MIB", "usdBgpNewRouteSafi"), (0, "Unisphere-Data-BGP-MIB", "usdBgpNewRouteIpAddrPrefix"), (0, "Unisphere-Data-BGP-MIB", "usdBgpNewRouteIpAddrPrefixLen"), (0, "Unisphere-Data-BGP-MIB", "usdBgpNewRouteDistinguisher"), (0, "Unisphere-Data-BGP-MIB", "usdBgpNewRoutePeer"), (0, "Unisphere-Data-BGP-MIB", "usdBgpNewRouteRouteType"), (0, "Unisphere-Data-BGP-MIB", "usdBgpNewRouteOriginalRd"), (0, "Unisphere-Data-BGP-MIB", "usdBgpNewRouteCommunityNumber"))
if mibBuilder.loadTexts: usdBgpNewRouteCommunityEntry.setStatus('current')
if mibBuilder.loadTexts: usdBgpNewRouteCommunityEntry.setDescription('Community attribute information within a path to a network.')
usdBgpNewRouteCommunityNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 25, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpNewRouteCommunityNumber.setStatus('current')
if mibBuilder.loadTexts: usdBgpNewRouteCommunityNumber.setDescription('The community number.')
usdBgpNewRouteExtendedCommunityTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 26), )
if mibBuilder.loadTexts: usdBgpNewRouteExtendedCommunityTable.setStatus('current')
if mibBuilder.loadTexts: usdBgpNewRouteExtendedCommunityTable.setDescription('The BGP-4 Path Extended Community Table contains information about communities within destination networks received from all BGP4 peers.')
usdBgpNewRouteExtendedCommunityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 26, 1), ).setIndexNames((0, "Unisphere-Data-BGP-MIB", "usdBgpNewRouteVrfName"), (0, "Unisphere-Data-BGP-MIB", "usdBgpNewRouteAfi"), (0, "Unisphere-Data-BGP-MIB", "usdBgpNewRouteSafi"), (0, "Unisphere-Data-BGP-MIB", "usdBgpNewRouteIpAddrPrefix"), (0, "Unisphere-Data-BGP-MIB", "usdBgpNewRouteIpAddrPrefixLen"), (0, "Unisphere-Data-BGP-MIB", "usdBgpNewRouteDistinguisher"), (0, "Unisphere-Data-BGP-MIB", "usdBgpNewRoutePeer"), (0, "Unisphere-Data-BGP-MIB", "usdBgpNewRouteRouteType"), (0, "Unisphere-Data-BGP-MIB", "usdBgpNewRouteOriginalRd"), (0, "Unisphere-Data-BGP-MIB", "usdBgpNewRouteExtendedCommunityNumber"))
if mibBuilder.loadTexts: usdBgpNewRouteExtendedCommunityEntry.setStatus('current')
if mibBuilder.loadTexts: usdBgpNewRouteExtendedCommunityEntry.setDescription('Extended Community attribute information within a path to a network.')
usdBgpNewRouteExtendedCommunityNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 26, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpNewRouteExtendedCommunityNumber.setStatus('current')
if mibBuilder.loadTexts: usdBgpNewRouteExtendedCommunityNumber.setDescription('The extended community number.')
usdBgpNewRouteClusterIdTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 27), )
if mibBuilder.loadTexts: usdBgpNewRouteClusterIdTable.setStatus('current')
if mibBuilder.loadTexts: usdBgpNewRouteClusterIdTable.setDescription('The BGP-4 Path ClusterId Table contains information about router reflector cluster IDs.')
usdBgpNewRouteClusterIdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 27, 1), ).setIndexNames((0, "Unisphere-Data-BGP-MIB", "usdBgpNewRouteVrfName"), (0, "Unisphere-Data-BGP-MIB", "usdBgpNewRouteAfi"), (0, "Unisphere-Data-BGP-MIB", "usdBgpNewRouteSafi"), (0, "Unisphere-Data-BGP-MIB", "usdBgpNewRouteIpAddrPrefix"), (0, "Unisphere-Data-BGP-MIB", "usdBgpNewRouteIpAddrPrefixLen"), (0, "Unisphere-Data-BGP-MIB", "usdBgpNewRouteDistinguisher"), (0, "Unisphere-Data-BGP-MIB", "usdBgpNewRoutePeer"), (0, "Unisphere-Data-BGP-MIB", "usdBgpNewRouteRouteType"), (0, "Unisphere-Data-BGP-MIB", "usdBgpNewRouteOriginalRd"), (0, "Unisphere-Data-BGP-MIB", "usdBgpNewRouteClusterId"))
if mibBuilder.loadTexts: usdBgpNewRouteClusterIdEntry.setStatus('current')
if mibBuilder.loadTexts: usdBgpNewRouteClusterIdEntry.setDescription('ClusterId attribute information within a path to a network.')
usdBgpNewRouteClusterId = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 27, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpNewRouteClusterId.setStatus('current')
if mibBuilder.loadTexts: usdBgpNewRouteClusterId.setDescription('The cluster ID.')
usdBgpRouteTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 13), )
if mibBuilder.loadTexts: usdBgpRouteTable.setStatus('obsolete')
if mibBuilder.loadTexts: usdBgpRouteTable.setDescription('The obsolete BGP-4 Received Path Attribute Table contained additional information about paths to destination networks received from all BGP4 peers. This table has been replaced by the usdBgpNewRouteTable.')
usdBgpRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 13, 1), ).setIndexNames((0, "Unisphere-Data-BGP-MIB", "usdBgpRouteVrfName"), (0, "Unisphere-Data-BGP-MIB", "usdBgpRouteAfi"), (0, "Unisphere-Data-BGP-MIB", "usdBgpRouteSafi"), (0, "Unisphere-Data-BGP-MIB", "usdBgpRouteIpAddrPrefix"), (0, "Unisphere-Data-BGP-MIB", "usdBgpRouteIpAddrPrefixLen"), (0, "Unisphere-Data-BGP-MIB", "usdBgpRouteDistinguisher"), (0, "Unisphere-Data-BGP-MIB", "usdBgpRoutePeer"), (0, "Unisphere-Data-BGP-MIB", "usdBgpRouteRouteType"))
if mibBuilder.loadTexts: usdBgpRouteEntry.setStatus('obsolete')
if mibBuilder.loadTexts: usdBgpRouteEntry.setDescription('Additional information about a path to a network.')
usdBgpRouteOriginatorId = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 13, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpRouteOriginatorId.setStatus('obsolete')
if mibBuilder.loadTexts: usdBgpRouteOriginatorId.setDescription('The Originator-ID path attribute of the route if present. The usdBgpRouteOriginatorIdPresent object indicates whether the Originator-ID path attribute is present.')
usdBgpRouteAtomicAggregatePresent = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 13, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpRouteAtomicAggregatePresent.setStatus('obsolete')
if mibBuilder.loadTexts: usdBgpRouteAtomicAggregatePresent.setDescription('Atomic-Aggregate path attribute is present.')
usdBgpRouteMedPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 13, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpRouteMedPresent.setStatus('obsolete')
if mibBuilder.loadTexts: usdBgpRouteMedPresent.setDescription('The Multi-Exit-Discriminator path attribute is present.')
usdBgpRouteLocalPrefPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 13, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpRouteLocalPrefPresent.setStatus('obsolete')
if mibBuilder.loadTexts: usdBgpRouteLocalPrefPresent.setDescription('The Local-Pref path attribute is present.')
usdBgpRouteAggregatorPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 13, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpRouteAggregatorPresent.setStatus('obsolete')
if mibBuilder.loadTexts: usdBgpRouteAggregatorPresent.setDescription('The Aggregator path attribute is present.')
usdBgpRouteCommunitiesPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 13, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpRouteCommunitiesPresent.setStatus('obsolete')
if mibBuilder.loadTexts: usdBgpRouteCommunitiesPresent.setDescription('The Communities path attribute is present.')
usdBgpRouteOriginatorIdPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 13, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpRouteOriginatorIdPresent.setStatus('obsolete')
if mibBuilder.loadTexts: usdBgpRouteOriginatorIdPresent.setDescription('The Originator-ID path attribute is present.')
usdBgpRouteClusterListPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 13, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpRouteClusterListPresent.setStatus('obsolete')
if mibBuilder.loadTexts: usdBgpRouteClusterListPresent.setDescription('The Cluster-List path attribute is present.')
usdBgpRouteWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 13, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpRouteWeight.setStatus('obsolete')
if mibBuilder.loadTexts: usdBgpRouteWeight.setDescription('The weight of the route.')
usdBgpRouteVrfName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 13, 1, 10), UsdVrfName())
if mibBuilder.loadTexts: usdBgpRouteVrfName.setStatus('obsolete')
if mibBuilder.loadTexts: usdBgpRouteVrfName.setDescription('The name of the VPN Routing Forwarding (VRF) instance in which this route is present. The empty string indicates that this route is not in a VRF.')
usdBgpRouteAfi = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 13, 1, 11), UsdBgpAfi())
if mibBuilder.loadTexts: usdBgpRouteAfi.setStatus('obsolete')
if mibBuilder.loadTexts: usdBgpRouteAfi.setDescription('The AFI of the address-family in which this route is present.')
usdBgpRouteSafi = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 13, 1, 12), UsdBgpSafi())
if mibBuilder.loadTexts: usdBgpRouteSafi.setStatus('obsolete')
if mibBuilder.loadTexts: usdBgpRouteSafi.setDescription('The SAFI of the address-family in which this route is present.')
usdBgpRoutePeer = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 13, 1, 13), IpAddress())
if mibBuilder.loadTexts: usdBgpRoutePeer.setStatus('obsolete')
if mibBuilder.loadTexts: usdBgpRoutePeer.setDescription('The IP address of the peer from which the route was received. This object has value 0.0.0.0 is the route was a locally originated route.')
usdBgpRouteIpAddrPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 13, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32)))
if mibBuilder.loadTexts: usdBgpRouteIpAddrPrefixLen.setStatus('obsolete')
if mibBuilder.loadTexts: usdBgpRouteIpAddrPrefixLen.setDescription('Length in bits of the IP address prefix of the route.')
usdBgpRouteIpAddrPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 13, 1, 15), IpAddress())
if mibBuilder.loadTexts: usdBgpRouteIpAddrPrefix.setStatus('obsolete')
if mibBuilder.loadTexts: usdBgpRouteIpAddrPrefix.setDescription('The IP address prefix of the route. This object is an IP address containing the prefix with length specified by usdBgpNewRouteIpAddrPrefixLen. Any bits beyond the length specified by usdBgpNewRouteIpAddrPrefixLen are zeroed.')
usdBgpRouteRouteType = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 13, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("routeTypeReceived", 1), ("routeTypeNetwork", 2), ("routeTypeRedistributed", 3), ("routeTypeAggregate", 4), ("routeTypeAutoSummary", 5))))
if mibBuilder.loadTexts: usdBgpRouteRouteType.setStatus('obsolete')
if mibBuilder.loadTexts: usdBgpRouteRouteType.setDescription('The type of the route.')
usdBgpRouteOrigin = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 13, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("igp", 1), ("egp", 2), ("incomplete", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpRouteOrigin.setStatus('obsolete')
if mibBuilder.loadTexts: usdBgpRouteOrigin.setDescription('The value of the Origin path attribute.')
usdBgpRouteASPathSegment = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 13, 1, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpRouteASPathSegment.setStatus('obsolete')
if mibBuilder.loadTexts: usdBgpRouteASPathSegment.setDescription('The value of the AS-path path attribute (as encoded in the received update message).')
usdBgpRouteNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 13, 1, 19), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpRouteNextHop.setStatus('obsolete')
if mibBuilder.loadTexts: usdBgpRouteNextHop.setDescription('The value of the Next-Hop path attribute.')
usdBgpRouteMultiExitDisc = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 13, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpRouteMultiExitDisc.setStatus('obsolete')
if mibBuilder.loadTexts: usdBgpRouteMultiExitDisc.setDescription('The value of the Multi-Exit-Discriminator path attribute if present. The usdBgpRouteMedPresent object indicates whether the Multi-Exit-Discriminator path attribute is present.')
usdBgpRouteLocalPref = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 13, 1, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpRouteLocalPref.setStatus('obsolete')
if mibBuilder.loadTexts: usdBgpRouteLocalPref.setDescription('The value of the Local-Pref path attribute if present. The usdBgpRouteLocalPrefPresent object indicates whether the Local-Pref path attribute is present.')
usdBgpRouteAtomicAggregate = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 13, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lessSpecificRouteNotSelected", 1), ("lessSpecificRouteSelected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpRouteAtomicAggregate.setStatus('obsolete')
if mibBuilder.loadTexts: usdBgpRouteAtomicAggregate.setDescription('Whether or not the local system has selected a less specific route without selecting a more specific route.')
usdBgpRouteAggregatorAS = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 13, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpRouteAggregatorAS.setStatus('obsolete')
if mibBuilder.loadTexts: usdBgpRouteAggregatorAS.setDescription('The value of the AS field in the Aggregator path attribute if present. The usdBgpRouteAggregatorPresent object indicates whether the Aggregator path attribute is present.')
usdBgpRouteAggregatorAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 13, 1, 24), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpRouteAggregatorAddress.setStatus('obsolete')
if mibBuilder.loadTexts: usdBgpRouteAggregatorAddress.setDescription('The value of the address field in the Aggregator path attribute if present. The usdBgpRouteAggregatorPresent object indicates whether the Aggregator path attribute is present.')
usdBgpRouteBestInIpRouteTable = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 13, 1, 25), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpRouteBestInIpRouteTable.setStatus('obsolete')
if mibBuilder.loadTexts: usdBgpRouteBestInIpRouteTable.setDescription('When BGP places a routes in the IP route table, that route may not be used for forwarding traffic if there are other routes (e.g. IGP routes or static routes) to that same prefix with a better administrative distance in the IP route table. This object indicates whether or not the BGP route in the IP route table is the best route (and hence is used for forwarding traffic).')
usdBgpRouteUnknown = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 13, 1, 26), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpRouteUnknown.setStatus('obsolete')
if mibBuilder.loadTexts: usdBgpRouteUnknown.setDescription('One or more path attributes not understood by this BGP4 speaker. Size zero (0) indicates the absence of such attribute(s). Octets beyond the maximum size, if any, are not recorded by this object.')
usdBgpRouteExtendedCommunitiesPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 13, 1, 27), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpRouteExtendedCommunitiesPresent.setStatus('obsolete')
if mibBuilder.loadTexts: usdBgpRouteExtendedCommunitiesPresent.setDescription('Is the Extended-Communities path attribute present?')
usdBgpRouteValid = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 13, 1, 28), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpRouteValid.setStatus('obsolete')
if mibBuilder.loadTexts: usdBgpRouteValid.setDescription('Is the route valid? The route is declared invalid if there is something wrong with it which is not serious enough for sending a notification, but it serious enough for not placing it in the IP route table or propagating it to other peers (for example the next-hop of the route is a local address).')
usdBgpRouteSuppressedBy = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 13, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("suppressedByNothing", 1), ("suppressedByAggregate", 2), ("suppressedByAutoSummary", 3), ("suppressedByDampening", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpRouteSuppressedBy.setStatus('obsolete')
if mibBuilder.loadTexts: usdBgpRouteSuppressedBy.setDescription('Indicates whether or not the route is suppressed, and if so why: suppressedByNothing - Route is not suppressed. suppressedByAggregate - Route is suppressed by a summary-only aggregate. suppressedByAutoSummary - Route is suppressed by an auto-summary. suppressedByDampening - Route is suppressed as a result of route-flap dampening.')
usdBgpRouteNextHopReachable = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 13, 1, 30), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpRouteNextHopReachable.setStatus('obsolete')
if mibBuilder.loadTexts: usdBgpRouteNextHopReachable.setDescription('Is the indirect next-hop of the route reachable (i.e. can the indirect next-hop of the route be resolved to at least one direct next-hop)?')
usdBgpRouteSynchronizedWithIgp = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 13, 1, 31), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpRouteSynchronizedWithIgp.setStatus('obsolete')
if mibBuilder.loadTexts: usdBgpRouteSynchronizedWithIgp.setDescription('Is the route is synchronized (i.e. is there is an IGP route to the same prefix in the IP route table)?')
usdBgpRoutePlaceInIpRouteTable = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 13, 1, 32), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpRoutePlaceInIpRouteTable.setStatus('obsolete')
if mibBuilder.loadTexts: usdBgpRoutePlaceInIpRouteTable.setDescription('Has a BGP route for this prefix been placed in the IP route table?')
usdBgpRouteAdvertiseToExternalPeers = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 13, 1, 33), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpRouteAdvertiseToExternalPeers.setStatus('obsolete')
if mibBuilder.loadTexts: usdBgpRouteAdvertiseToExternalPeers.setDescription('Should this route be advertised to external peers?')
usdBgpRouteAdvertiseToInternalPeers = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 13, 1, 34), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpRouteAdvertiseToInternalPeers.setStatus('obsolete')
if mibBuilder.loadTexts: usdBgpRouteAdvertiseToInternalPeers.setDescription('Should this route be advertised to internal peers?')
usdBgpRouteDistinguisher = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 13, 1, 35), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpRouteDistinguisher.setStatus('obsolete')
if mibBuilder.loadTexts: usdBgpRouteDistinguisher.setDescription('The Route Distinguisher (RD) of the route. This object has an undefined value for non-VPN routes.')
usdBgpRouteMplsLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 13, 1, 36), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpRouteMplsLabel.setStatus('obsolete')
if mibBuilder.loadTexts: usdBgpRouteMplsLabel.setDescription('The MPLS label for the route.')
usdBgpRouteNextHopMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 13, 1, 37), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpRouteNextHopMetric.setStatus('obsolete')
if mibBuilder.loadTexts: usdBgpRouteNextHopMetric.setDescription('The metric of direct next-hop of this BGP route.')
usdBgpRouteFlapHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 12), )
if mibBuilder.loadTexts: usdBgpRouteFlapHistoryTable.setStatus('obsolete')
if mibBuilder.loadTexts: usdBgpRouteFlapHistoryTable.setDescription('The obsolete BGP Route Flap History Table contained information about recorded route flap events. This table has been replaced by the usdBgpNewRouteFlapHistoryTable.')
usdBgpRouteFlapHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 12, 1), ).setIndexNames((0, "Unisphere-Data-BGP-MIB", "usdBgpRouteVrfName"), (0, "Unisphere-Data-BGP-MIB", "usdBgpRouteAfi"), (0, "Unisphere-Data-BGP-MIB", "usdBgpRouteSafi"), (0, "Unisphere-Data-BGP-MIB", "usdBgpRouteIpAddrPrefix"), (0, "Unisphere-Data-BGP-MIB", "usdBgpRouteIpAddrPrefixLen"), (0, "Unisphere-Data-BGP-MIB", "usdBgpRouteDistinguisher"), (0, "Unisphere-Data-BGP-MIB", "usdBgpRoutePeer"), (0, "Unisphere-Data-BGP-MIB", "usdBgpRouteRouteType"))
if mibBuilder.loadTexts: usdBgpRouteFlapHistoryEntry.setStatus('obsolete')
if mibBuilder.loadTexts: usdBgpRouteFlapHistoryEntry.setDescription('An instance in the list of route flap events.')
usdBgpRouteFlapState = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("stateAvailable", 1), ("stateSuppressedReachable", 2), ("stateSuppressedUnreachable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpRouteFlapState.setStatus('obsolete')
if mibBuilder.loadTexts: usdBgpRouteFlapState.setDescription('Current state: stateAvailable(1) - indicates path is available stateSuppressedReachable(2) - indicates path is suppressed, destination is reachable stateSuppressedUnreachable(3) - indicates path in suppressed, destination is not reachable ')
usdBgpRouteFlapFigureOfMerit = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 12, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpRouteFlapFigureOfMerit.setStatus('obsolete')
if mibBuilder.loadTexts: usdBgpRouteFlapFigureOfMerit.setDescription('Calculated figure-of-merit.')
usdBgpRouteFlapRemainingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 12, 1, 3), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpRouteFlapRemainingTime.setStatus('obsolete')
if mibBuilder.loadTexts: usdBgpRouteFlapRemainingTime.setDescription('Number of seconds until reuse or removal.')
usdBgpRouteFlapSuppressThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 12, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpRouteFlapSuppressThreshold.setStatus('obsolete')
if mibBuilder.loadTexts: usdBgpRouteFlapSuppressThreshold.setDescription('Damping cutoff threshold (scaled).')
usdBgpRouteFlapReuseThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 12, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpRouteFlapReuseThreshold.setStatus('obsolete')
if mibBuilder.loadTexts: usdBgpRouteFlapReuseThreshold.setDescription('Damping reuse threshold (scaled).')
usdBgpRouteFlapMaxHoldDownTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 12, 1, 6), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpRouteFlapMaxHoldDownTime.setStatus('obsolete')
if mibBuilder.loadTexts: usdBgpRouteFlapMaxHoldDownTime.setDescription('Maximum route holddown time (seconds).')
usdBgpRouteFlapHalfLifeReachable = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 12, 1, 7), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpRouteFlapHalfLifeReachable.setStatus('obsolete')
if mibBuilder.loadTexts: usdBgpRouteFlapHalfLifeReachable.setDescription('Figure of merit half life for reachable routes (seconds).')
usdBgpRouteFlapHalfLifeUnreachable = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 12, 1, 8), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpRouteFlapHalfLifeUnreachable.setStatus('obsolete')
if mibBuilder.loadTexts: usdBgpRouteFlapHalfLifeUnreachable.setDescription('Figure of merit half life for unreachable routes (seconds).')
usdBgpRouteCommunityTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 14), )
if mibBuilder.loadTexts: usdBgpRouteCommunityTable.setStatus('obsolete')
if mibBuilder.loadTexts: usdBgpRouteCommunityTable.setDescription('The obsolete BGP-4 Path Community Table contained information about communities within destination networks received from all BGP4 peers. This table has been replaced by the usdBgpNewRouteCommunityTable.')
usdBgpRouteCommunityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 14, 1), ).setIndexNames((0, "Unisphere-Data-BGP-MIB", "usdBgpRouteVrfName"), (0, "Unisphere-Data-BGP-MIB", "usdBgpRouteAfi"), (0, "Unisphere-Data-BGP-MIB", "usdBgpRouteSafi"), (0, "Unisphere-Data-BGP-MIB", "usdBgpRouteIpAddrPrefix"), (0, "Unisphere-Data-BGP-MIB", "usdBgpRouteIpAddrPrefixLen"), (0, "Unisphere-Data-BGP-MIB", "usdBgpRouteDistinguisher"), (0, "Unisphere-Data-BGP-MIB", "usdBgpRoutePeer"), (0, "Unisphere-Data-BGP-MIB", "usdBgpRouteRouteType"), (0, "Unisphere-Data-BGP-MIB", "usdBgpRouteCommunityNumber"))
if mibBuilder.loadTexts: usdBgpRouteCommunityEntry.setStatus('obsolete')
if mibBuilder.loadTexts: usdBgpRouteCommunityEntry.setDescription('Community attribute information within a path to a network.')
usdBgpRouteCommunityNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 14, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpRouteCommunityNumber.setStatus('obsolete')
if mibBuilder.loadTexts: usdBgpRouteCommunityNumber.setDescription('The community number.')
usdBgpRouteExtendedCommunityTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 22), )
if mibBuilder.loadTexts: usdBgpRouteExtendedCommunityTable.setStatus('obsolete')
if mibBuilder.loadTexts: usdBgpRouteExtendedCommunityTable.setDescription('The obsolete BGP-4 Path Extended Community Table contained information about communities within destination networks received from all BGP4 peers. This table has been replaced by the usdBgpNewRouteExtendedCommunityTable.')
usdBgpRouteExtendedCommunityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 22, 1), ).setIndexNames((0, "Unisphere-Data-BGP-MIB", "usdBgpRouteVrfName"), (0, "Unisphere-Data-BGP-MIB", "usdBgpRouteAfi"), (0, "Unisphere-Data-BGP-MIB", "usdBgpRouteSafi"), (0, "Unisphere-Data-BGP-MIB", "usdBgpRouteIpAddrPrefix"), (0, "Unisphere-Data-BGP-MIB", "usdBgpRouteIpAddrPrefixLen"), (0, "Unisphere-Data-BGP-MIB", "usdBgpRouteDistinguisher"), (0, "Unisphere-Data-BGP-MIB", "usdBgpRoutePeer"), (0, "Unisphere-Data-BGP-MIB", "usdBgpRouteRouteType"), (0, "Unisphere-Data-BGP-MIB", "usdBgpRouteExtendedCommunityNumber"))
if mibBuilder.loadTexts: usdBgpRouteExtendedCommunityEntry.setStatus('obsolete')
if mibBuilder.loadTexts: usdBgpRouteExtendedCommunityEntry.setDescription('Extended Community attribute information within a path to a network.')
usdBgpRouteExtendedCommunityNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 22, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpRouteExtendedCommunityNumber.setStatus('obsolete')
if mibBuilder.loadTexts: usdBgpRouteExtendedCommunityNumber.setDescription('The extended community number.')
usdBgpRouteClusterIdTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 15), )
if mibBuilder.loadTexts: usdBgpRouteClusterIdTable.setStatus('obsolete')
if mibBuilder.loadTexts: usdBgpRouteClusterIdTable.setDescription('The obsolete BGP-4 Path ClusterId Table contained information about router reflector cluster IDs. This table has been replaced by the usdBgpNewRouteClusterIdTable.')
usdBgpRouteClusterIdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 15, 1), ).setIndexNames((0, "Unisphere-Data-BGP-MIB", "usdBgpRouteVrfName"), (0, "Unisphere-Data-BGP-MIB", "usdBgpRouteAfi"), (0, "Unisphere-Data-BGP-MIB", "usdBgpRouteSafi"), (0, "Unisphere-Data-BGP-MIB", "usdBgpRouteIpAddrPrefix"), (0, "Unisphere-Data-BGP-MIB", "usdBgpRouteIpAddrPrefixLen"), (0, "Unisphere-Data-BGP-MIB", "usdBgpRouteDistinguisher"), (0, "Unisphere-Data-BGP-MIB", "usdBgpRoutePeer"), (0, "Unisphere-Data-BGP-MIB", "usdBgpRouteRouteType"), (0, "Unisphere-Data-BGP-MIB", "usdBgpRouteClusterId"))
if mibBuilder.loadTexts: usdBgpRouteClusterIdEntry.setStatus('obsolete')
if mibBuilder.loadTexts: usdBgpRouteClusterIdEntry.setDescription('ClusterId attribute information within a path to a network.')
usdBgpRouteClusterId = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 1, 15, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdBgpRouteClusterId.setStatus('obsolete')
if mibBuilder.loadTexts: usdBgpRouteClusterId.setDescription('The cluster id.')
usdBgpConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 2))
usdBgpCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 2, 1))
usdBgpConfGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 2, 2))
usdBgpCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 2, 1, 1)).setObjects(("Unisphere-Data-BGP-MIB", "usdBgpGeneralConfGroup"), ("Unisphere-Data-BGP-MIB", "usdBgpStatisticsConfGroup"), ("Unisphere-Data-BGP-MIB", "usdBgpConfederationPeerConfGroup"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerConfGroup"), ("Unisphere-Data-BGP-MIB", "usdBgpAfiSafiPeerConfGroup"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerAddressFamilyConfGroup"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupConfGroup"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupAddressFamilyConfGroup"), ("Unisphere-Data-BGP-MIB", "usdBgpRouteConfGroup"), ("Unisphere-Data-BGP-MIB", "usdBgpNetworkConfGroup"), ("Unisphere-Data-BGP-MIB", "usdBgpAggregateConfGroup"), ("Unisphere-Data-BGP-MIB", "usdBgpVrfConfGroup"), ("Unisphere-Data-BGP-MIB", "usdBgpAddressFamilyConfGroup"), ("Unisphere-Data-BGP-MIB", "usdBgpStorageConfGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdBgpCompliance = usdBgpCompliance.setStatus('obsolete')
if mibBuilder.loadTexts: usdBgpCompliance.setDescription('Obsolete compliance statement for entities which implement the Unisphere BGP MIB. This statement became obsolete when the usdBgpDefaultIPv4Unicast object was added to the general cofiguation group.')
usdBgpCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 2, 1, 2)).setObjects(("Unisphere-Data-BGP-MIB", "usdBgpGeneralConfGroup2"), ("Unisphere-Data-BGP-MIB", "usdBgpStatisticsConfGroup"), ("Unisphere-Data-BGP-MIB", "usdBgpConfederationPeerConfGroup"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerConfGroup"), ("Unisphere-Data-BGP-MIB", "usdBgpAfiSafiPeerConfGroup"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerAddressFamilyConfGroup"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupConfGroup"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupAddressFamilyConfGroup"), ("Unisphere-Data-BGP-MIB", "usdBgpRouteConfGroup"), ("Unisphere-Data-BGP-MIB", "usdBgpNetworkConfGroup"), ("Unisphere-Data-BGP-MIB", "usdBgpAggregateConfGroup"), ("Unisphere-Data-BGP-MIB", "usdBgpVrfConfGroup"), ("Unisphere-Data-BGP-MIB", "usdBgpAddressFamilyConfGroup"), ("Unisphere-Data-BGP-MIB", "usdBgpStorageConfGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdBgpCompliance2 = usdBgpCompliance2.setStatus('obsolete')
if mibBuilder.loadTexts: usdBgpCompliance2.setDescription('Obsolete compliance statement for entities which implement the Unisphere BGP MIB. This statement became obsolete when the original route destination was added as an index to each of the route configuration tables.')
usdBgpCompliance3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 2, 1, 3)).setObjects(("Unisphere-Data-BGP-MIB", "usdBgpGeneralConfGroup2"), ("Unisphere-Data-BGP-MIB", "usdBgpStatisticsConfGroup"), ("Unisphere-Data-BGP-MIB", "usdBgpConfederationPeerConfGroup"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerConfGroup"), ("Unisphere-Data-BGP-MIB", "usdBgpAfiSafiPeerConfGroup"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerAddressFamilyConfGroup"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupConfGroup"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupAddressFamilyConfGroup"), ("Unisphere-Data-BGP-MIB", "usdBgpNewRouteConfGroup"), ("Unisphere-Data-BGP-MIB", "usdBgpNetworkConfGroup"), ("Unisphere-Data-BGP-MIB", "usdBgpAggregateConfGroup"), ("Unisphere-Data-BGP-MIB", "usdBgpVrfConfGroup"), ("Unisphere-Data-BGP-MIB", "usdBgpAddressFamilyConfGroup"), ("Unisphere-Data-BGP-MIB", "usdBgpStorageConfGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdBgpCompliance3 = usdBgpCompliance3.setStatus('obsolete')
if mibBuilder.loadTexts: usdBgpCompliance3.setDescription('Obsolete compliance statement for entities which implement the Unisphere BGP MIB. This statement became obsolete when the peer and peer-group local-as support was added.')
usdBgpCompliance4 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 2, 1, 4)).setObjects(("Unisphere-Data-BGP-MIB", "usdBgpGeneralConfGroup2"), ("Unisphere-Data-BGP-MIB", "usdBgpStatisticsConfGroup"), ("Unisphere-Data-BGP-MIB", "usdBgpConfederationPeerConfGroup"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerConfGroup2"), ("Unisphere-Data-BGP-MIB", "usdBgpAfiSafiPeerConfGroup"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerAddressFamilyConfGroup"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupConfGroup2"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupAddressFamilyConfGroup"), ("Unisphere-Data-BGP-MIB", "usdBgpNewRouteConfGroup"), ("Unisphere-Data-BGP-MIB", "usdBgpNetworkConfGroup"), ("Unisphere-Data-BGP-MIB", "usdBgpAggregateConfGroup"), ("Unisphere-Data-BGP-MIB", "usdBgpVrfConfGroup"), ("Unisphere-Data-BGP-MIB", "usdBgpAddressFamilyConfGroup"), ("Unisphere-Data-BGP-MIB", "usdBgpStorageConfGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdBgpCompliance4 = usdBgpCompliance4.setStatus('obsolete')
if mibBuilder.loadTexts: usdBgpCompliance4.setDescription('Obsolete compliance statement for entities which implement the Unisphere BGP MIB. This statement became obsolete when support was added for adding unicast BGP routes into a multicast view.')
usdBgpCompliance5 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 2, 1, 5)).setObjects(("Unisphere-Data-BGP-MIB", "usdBgpGeneralConfGroup2"), ("Unisphere-Data-BGP-MIB", "usdBgpStatisticsConfGroup"), ("Unisphere-Data-BGP-MIB", "usdBgpConfederationPeerConfGroup"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerConfGroup2"), ("Unisphere-Data-BGP-MIB", "usdBgpAfiSafiPeerConfGroup"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerAddressFamilyConfGroup"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupConfGroup2"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupAddressFamilyConfGroup"), ("Unisphere-Data-BGP-MIB", "usdBgpNewRouteConfGroup"), ("Unisphere-Data-BGP-MIB", "usdBgpNetworkConfGroup"), ("Unisphere-Data-BGP-MIB", "usdBgpAggregateConfGroup"), ("Unisphere-Data-BGP-MIB", "usdBgpVrfConfGroup2"), ("Unisphere-Data-BGP-MIB", "usdBgpAddressFamilyConfGroup"), ("Unisphere-Data-BGP-MIB", "usdBgpStorageConfGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdBgpCompliance5 = usdBgpCompliance5.setStatus('obsolete')
if mibBuilder.loadTexts: usdBgpCompliance5.setDescription('Obsolete compliance statement for entities which implement the Unisphere BGP MIB. This statement became obsolete when the usdBgpRedistributeInternal object was added to the general configuration group and the history pool size objects were obsoleted and the ability to unconfigure BGP attributes from the MIB was added.')
usdBgpCompliance6 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 2, 1, 6)).setObjects(("Unisphere-Data-BGP-MIB", "usdBgpGeneralConfGroup3"), ("Unisphere-Data-BGP-MIB", "usdBgpStatisticsConfGroup"), ("Unisphere-Data-BGP-MIB", "usdBgpConfederationPeerConfGroup"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerConfGroup3"), ("Unisphere-Data-BGP-MIB", "usdBgpAfiSafiPeerConfGroup"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerAddressFamilyConfGroup2"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupConfGroup3"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupAddressFamilyConfGroup2"), ("Unisphere-Data-BGP-MIB", "usdBgpNewRouteConfGroup"), ("Unisphere-Data-BGP-MIB", "usdBgpNetworkConfGroup2"), ("Unisphere-Data-BGP-MIB", "usdBgpAggregateConfGroup2"), ("Unisphere-Data-BGP-MIB", "usdBgpVrfConfGroup3"), ("Unisphere-Data-BGP-MIB", "usdBgpAddressFamilyConfGroup2"), ("Unisphere-Data-BGP-MIB", "usdBgpStorageConfGroup2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdBgpCompliance6 = usdBgpCompliance6.setStatus('current')
if mibBuilder.loadTexts: usdBgpCompliance6.setDescription('The compliance statement for entities which implement the Unisphere BGP MIB.')
usdBgpGeneralConfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 2, 2, 1)).setObjects(("Unisphere-Data-BGP-MIB", "usdBgpLocalAsNumber"), ("Unisphere-Data-BGP-MIB", "usdBgpEnabled"), ("Unisphere-Data-BGP-MIB", "usdBgpIdentifier"), ("Unisphere-Data-BGP-MIB", "usdBgpAlwaysCompareMed"), ("Unisphere-Data-BGP-MIB", "usdBgpDefaultLocalPreference"), ("Unisphere-Data-BGP-MIB", "usdBgpEqualCostLimit"), ("Unisphere-Data-BGP-MIB", "usdBgpClientToClientReflection"), ("Unisphere-Data-BGP-MIB", "usdBgpClusterId"), ("Unisphere-Data-BGP-MIB", "usdBgpConfederationId"), ("Unisphere-Data-BGP-MIB", "usdBgpMissingAsWorst"), ("Unisphere-Data-BGP-MIB", "usdBgpResetAllConnectionType"), ("Unisphere-Data-BGP-MIB", "usdBgpAdvertiseInactive"), ("Unisphere-Data-BGP-MIB", "usdBgpEnforceFirstAs"), ("Unisphere-Data-BGP-MIB", "usdBgpConfedCompareMed"), ("Unisphere-Data-BGP-MIB", "usdBgpGlobalRetryInterval"), ("Unisphere-Data-BGP-MIB", "usdBgpGlobalConfigKeepAliveInterval"), ("Unisphere-Data-BGP-MIB", "usdBgpGlobalConfigHoldTime"), ("Unisphere-Data-BGP-MIB", "usdBgpGlobalAsOriginationInterval"), ("Unisphere-Data-BGP-MIB", "usdBgpExternalAdvertisementInterval"), ("Unisphere-Data-BGP-MIB", "usdBgpGlobalRibOutEnabled"), ("Unisphere-Data-BGP-MIB", "usdBgpOverloadShutdown"), ("Unisphere-Data-BGP-MIB", "usdBgpLogNeighborChanges"), ("Unisphere-Data-BGP-MIB", "usdBgpFastExternalFallover"), ("Unisphere-Data-BGP-MIB", "usdBgpInternalAdvertisementInterval"), ("Unisphere-Data-BGP-MIB", "usdBgpMaxAsLimit"), ("Unisphere-Data-BGP-MIB", "usdBgpOperationalState"), ("Unisphere-Data-BGP-MIB", "usdBgpPreviousOperationalState"), ("Unisphere-Data-BGP-MIB", "usdBgpAutomaticRouteTargetFilter"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdBgpGeneralConfGroup = usdBgpGeneralConfGroup.setStatus('obsolete')
if mibBuilder.loadTexts: usdBgpGeneralConfGroup.setDescription('Obsolete collection of objects providing general management of BGP in a Unisphere product. This group became obsolete when the usdBgpDefaultIPv4Unicast object was added.')
usdBgpStatisticsConfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 2, 2, 2)).setObjects(("Unisphere-Data-BGP-MIB", "usdBgpBaselineTime"), ("Unisphere-Data-BGP-MIB", "usdBgpDestinationCount"), ("Unisphere-Data-BGP-MIB", "usdBgpDestinationMemoryUsed"), ("Unisphere-Data-BGP-MIB", "usdBgpRouteCount"), ("Unisphere-Data-BGP-MIB", "usdBgpRouteMemoryUsed"), ("Unisphere-Data-BGP-MIB", "usdBgpSelectedRouteCount"), ("Unisphere-Data-BGP-MIB", "usdBgpPathAttributeCount"), ("Unisphere-Data-BGP-MIB", "usdBgpPathAttributeMemoryUsed"), ("Unisphere-Data-BGP-MIB", "usdBgpRouteFlapHistoryCount"), ("Unisphere-Data-BGP-MIB", "usdBgpRouteFlapHistoryMemoryUsed"), ("Unisphere-Data-BGP-MIB", "usdBgpSuppressedRouteCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdBgpStatisticsConfGroup = usdBgpStatisticsConfGroup.setStatus('current')
if mibBuilder.loadTexts: usdBgpStatisticsConfGroup.setDescription('A collection of objects providing statistics of BGP operations in a Unisphere product.')
usdBgpConfederationPeerConfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 2, 2, 3)).setObjects(("Unisphere-Data-BGP-MIB", "usdBgpConfederationPeerRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdBgpConfederationPeerConfGroup = usdBgpConfederationPeerConfGroup.setStatus('current')
if mibBuilder.loadTexts: usdBgpConfederationPeerConfGroup.setDescription('An object providing management of BGP-specific confederation peers in a Unisphere product.')
usdBgpPeerConfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 2, 2, 4)).setObjects(("Unisphere-Data-BGP-MIB", "usdBgpPeerAdminStatus"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerState"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerNegotiatedVersion"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerLocalAddress"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerLocalAddressMask"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerLocalPort"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerRemoteAsNumber"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerRemotePort"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerInUpdates"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerOutUpdates"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerInTotalMessages"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerOutTotalMessages"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerLastErrorCode"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerLastResetReason"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerFsmEstablishedTransitions"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerFsmEstablishedTime"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerRetryInterval"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerHoldTime"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerKeepAliveInterval"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerConfigHoldTime"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerConfigKeepAliveInterval"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerAsOriginationInterval"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerAdvertisementInterval"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerInUpdateElapsedTime"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerDescription"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerRemoteIdentifier"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerWeight"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerEbgpMultihop"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerEbgpMultihopTtl"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerUpdateSource"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerMd5Password"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerMaxUpdateSize"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerType"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerSupportsCapabilityNegotiation"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerCapabilityMultiProtocol"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerCapabilityRouteRefresh"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerCapabilityRouteRefreshCiscoProprietary"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerResetConnectionType"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdBgpPeerConfGroup = usdBgpPeerConfGroup.setStatus('obsolete')
if mibBuilder.loadTexts: usdBgpPeerConfGroup.setDescription('Obsolete collection of objects providing management of BGP peers in a Unisphere product. This group became obsolete when the usdBgpPeerLocalAsNumber object was added.')
usdBgpAfiSafiPeerConfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 2, 2, 5)).setObjects(("Unisphere-Data-BGP-MIB", "usdBgpPeerProposedAfiSafiPeerRowStatus"), ("Unisphere-Data-BGP-MIB", "usdBgpLocalProposedAfiSafiPeerRowStatus"), ("Unisphere-Data-BGP-MIB", "usdBgpExchangedAfiSafiPeerRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdBgpAfiSafiPeerConfGroup = usdBgpAfiSafiPeerConfGroup.setStatus('current')
if mibBuilder.loadTexts: usdBgpAfiSafiPeerConfGroup.setDescription('A collection of objects providing management of BGP-specific AFI and SAFI peers in a Unisphere product.')
usdBgpPeerAddressFamilyConfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 2, 2, 6)).setObjects(("Unisphere-Data-BGP-MIB", "usdBgpPeerAddressFamilyPeerGroup"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerAddressFamilyDefaultOriginate"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerAddressFamilyNextHopSelf"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerAddressFamilySendCommunity"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerAddressFamilyDistributeListIn"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerAddressFamilyDistributeListOut"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerAddressFamilyPrefixListIn"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerAddressFamilyPrefixListOut"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerAddressFamilyPrefixTreeIn"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerAddressFamilyPrefixTreeOut"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerAddressFamilyFilterListIn"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerAddressFamilyFilterListOut"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerAddressFamilyFilterListWeight"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerAddressFamilyFilterListWeightValue"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerAddressFamilyRouteMapIn"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerAddressFamilyRouteMapOut"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerAddressFamilyRouteReflectorClient"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerAddressFamilyRouteLimitWarn"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerAddressFamilyRouteLimitReset"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerAddressFamilyRouteLimitWarnOnly"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerAddressFamilyRemovePrivateAs"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerAddressFamilyUnsuppressMap"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerAddressFamilyInboundSoftReconfig"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerAddressFamilyResetConnectionType"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerAddressFamilyRowStatus"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerAddressFamilyAsOverride"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerAddressFamilyAllowAsIn"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerAddressFamilySendExtendedCommunity"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdBgpPeerAddressFamilyConfGroup = usdBgpPeerAddressFamilyConfGroup.setStatus('obsolete')
if mibBuilder.loadTexts: usdBgpPeerAddressFamilyConfGroup.setDescription('Obsolete collection of objects providing management of BGP peer address families in a Unisphere product. This group became obsolete when the ability to unconfigure attributes using the MIB was added.')
usdBgpPeerGroupConfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 2, 2, 7)).setObjects(("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupAdminStatus"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupRemoteAsNumber"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupRetryInterval"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupConfigHoldTime"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupConfigKeepAliveInterval"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupAsOriginationInterval"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupAdvertisementInterval"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupDescription"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupWeight"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupEbgpMultihop"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupEbgpMultihopTtl"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupUpdateSource"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupMd5Password"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupMaxUpdateSize"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupResetConnectionType"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdBgpPeerGroupConfGroup = usdBgpPeerGroupConfGroup.setStatus('obsolete')
if mibBuilder.loadTexts: usdBgpPeerGroupConfGroup.setDescription('Obsolete collection of objects providing management of BGP peer groups in a Unisphere product. This group became obsolete when the usdBgpPeerGroupLocalAsNumber object was added.')
usdBgpPeerGroupAddressFamilyConfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 2, 2, 8)).setObjects(("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupAddressFamilyDefaultOriginate"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupAddressFamilyNextHopSelf"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupAddressFamilySendCommunity"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupAddressFamilyDistributeListIn"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupAddressFamilyDistributeListOut"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupAddressFamilyPrefixListIn"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupAddressFamilyPrefixListOut"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupAddressFamilyPrefixTreeIn"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupAddressFamilyPrefixTreeOut"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupAddressFamilyFilterListIn"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupAddressFamilyFilterListOut"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupAddressFamilyFilterListWeight"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupAddressFamilyFilterListWeightValue"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupAddressFamilyRouteMapIn"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupAddressFamilyRouteMapOut"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupAddressFamilyRouteReflectorClient"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupAddressFamilyRouteLimitWarn"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupAddressFamilyRouteLimitReset"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupAddressFamilyRouteLimitWarnOnly"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupAddressFamilyRemovePrivateAs"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupAddressFamilyUnsuppressMap"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupAddressFamilyInboundSoftReconfig"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupAddressFamilyResetConnectionType"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupAddressFamilyRowStatus"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupAddressFamilyAsOverride"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupAddressFamilyAllowAsIn"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupAddressFamilySendExtendedCommunity"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdBgpPeerGroupAddressFamilyConfGroup = usdBgpPeerGroupAddressFamilyConfGroup.setStatus('obsolete')
if mibBuilder.loadTexts: usdBgpPeerGroupAddressFamilyConfGroup.setDescription('Obsolete collection of objects providing management of BGP peer group address families in a Unisphere product. This group was obsoleted when the ability to unconfigure BGP attributes using the MIB was added.')
usdBgpRouteConfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 2, 2, 9)).setObjects(("Unisphere-Data-BGP-MIB", "usdBgpRouteFlapState"), ("Unisphere-Data-BGP-MIB", "usdBgpRouteFlapFigureOfMerit"), ("Unisphere-Data-BGP-MIB", "usdBgpRouteFlapRemainingTime"), ("Unisphere-Data-BGP-MIB", "usdBgpRouteFlapSuppressThreshold"), ("Unisphere-Data-BGP-MIB", "usdBgpRouteFlapReuseThreshold"), ("Unisphere-Data-BGP-MIB", "usdBgpRouteFlapMaxHoldDownTime"), ("Unisphere-Data-BGP-MIB", "usdBgpRouteFlapHalfLifeReachable"), ("Unisphere-Data-BGP-MIB", "usdBgpRouteFlapHalfLifeUnreachable"), ("Unisphere-Data-BGP-MIB", "usdBgpRouteOriginatorId"), ("Unisphere-Data-BGP-MIB", "usdBgpRouteAtomicAggregatePresent"), ("Unisphere-Data-BGP-MIB", "usdBgpRouteMedPresent"), ("Unisphere-Data-BGP-MIB", "usdBgpRouteLocalPrefPresent"), ("Unisphere-Data-BGP-MIB", "usdBgpRouteAggregatorPresent"), ("Unisphere-Data-BGP-MIB", "usdBgpRouteCommunitiesPresent"), ("Unisphere-Data-BGP-MIB", "usdBgpRouteOriginatorIdPresent"), ("Unisphere-Data-BGP-MIB", "usdBgpRouteClusterListPresent"), ("Unisphere-Data-BGP-MIB", "usdBgpRouteWeight"), ("Unisphere-Data-BGP-MIB", "usdBgpRouteOrigin"), ("Unisphere-Data-BGP-MIB", "usdBgpRouteASPathSegment"), ("Unisphere-Data-BGP-MIB", "usdBgpRouteNextHop"), ("Unisphere-Data-BGP-MIB", "usdBgpRouteMultiExitDisc"), ("Unisphere-Data-BGP-MIB", "usdBgpRouteLocalPref"), ("Unisphere-Data-BGP-MIB", "usdBgpRouteAtomicAggregate"), ("Unisphere-Data-BGP-MIB", "usdBgpRouteAggregatorAS"), ("Unisphere-Data-BGP-MIB", "usdBgpRouteAggregatorAddress"), ("Unisphere-Data-BGP-MIB", "usdBgpRouteBestInIpRouteTable"), ("Unisphere-Data-BGP-MIB", "usdBgpRouteUnknown"), ("Unisphere-Data-BGP-MIB", "usdBgpRouteExtendedCommunitiesPresent"), ("Unisphere-Data-BGP-MIB", "usdBgpRouteValid"), ("Unisphere-Data-BGP-MIB", "usdBgpRouteSuppressedBy"), ("Unisphere-Data-BGP-MIB", "usdBgpRouteNextHopReachable"), ("Unisphere-Data-BGP-MIB", "usdBgpRouteSynchronizedWithIgp"), ("Unisphere-Data-BGP-MIB", "usdBgpRoutePlaceInIpRouteTable"), ("Unisphere-Data-BGP-MIB", "usdBgpRouteAdvertiseToExternalPeers"), ("Unisphere-Data-BGP-MIB", "usdBgpRouteAdvertiseToInternalPeers"), ("Unisphere-Data-BGP-MIB", "usdBgpRouteDistinguisher"), ("Unisphere-Data-BGP-MIB", "usdBgpRouteMplsLabel"), ("Unisphere-Data-BGP-MIB", "usdBgpRouteNextHopMetric"), ("Unisphere-Data-BGP-MIB", "usdBgpRouteCommunityNumber"), ("Unisphere-Data-BGP-MIB", "usdBgpRouteExtendedCommunityNumber"), ("Unisphere-Data-BGP-MIB", "usdBgpRouteClusterId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdBgpRouteConfGroup = usdBgpRouteConfGroup.setStatus('obsolete')
if mibBuilder.loadTexts: usdBgpRouteConfGroup.setDescription('Obsolete collection of objects providing management of BGP routes in a Unisphere product. This group became obsolete when the original route destination was added as an index to each of the tables.')
usdBgpNetworkConfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 2, 2, 10)).setObjects(("Unisphere-Data-BGP-MIB", "usdBgpNetworkBackdoor"), ("Unisphere-Data-BGP-MIB", "usdBgpNetworkRowStatus"), ("Unisphere-Data-BGP-MIB", "usdBgpNetworkWeightSpecified"), ("Unisphere-Data-BGP-MIB", "usdBgpNetworkWeight"), ("Unisphere-Data-BGP-MIB", "usdBgpNetworkRouteMap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdBgpNetworkConfGroup = usdBgpNetworkConfGroup.setStatus('obsolete')
if mibBuilder.loadTexts: usdBgpNetworkConfGroup.setDescription('Obsolete collection of objects providing management of BGP networks in a Unisphere product. This group was obsoleted when the ability to unconfigure BGP attributes using the MIB was added.')
usdBgpAggregateConfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 2, 2, 11)).setObjects(("Unisphere-Data-BGP-MIB", "usdBgpAggregateAsSet"), ("Unisphere-Data-BGP-MIB", "usdBgpAggregateSummaryOnly"), ("Unisphere-Data-BGP-MIB", "usdBgpAggregateAttributeMap"), ("Unisphere-Data-BGP-MIB", "usdBgpAggregateAdvertiseMap"), ("Unisphere-Data-BGP-MIB", "usdBgpAggregateRowStatus"), ("Unisphere-Data-BGP-MIB", "usdBgpAggregateSuppressMap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdBgpAggregateConfGroup = usdBgpAggregateConfGroup.setStatus('obsolete')
if mibBuilder.loadTexts: usdBgpAggregateConfGroup.setDescription('Obsolete collection of objects providing consolidation of BGP route information in a Unisphere product. This group was obsoleted when the ability to unconfigure BGP attributes using the MIB was added.')
usdBgpVrfConfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 2, 2, 12)).setObjects(("Unisphere-Data-BGP-MIB", "usdBgpVrfSynchronization"), ("Unisphere-Data-BGP-MIB", "usdBgpVrfAutoSummary"), ("Unisphere-Data-BGP-MIB", "usdBgpVrfExternalDistance"), ("Unisphere-Data-BGP-MIB", "usdBgpVrfInternalDistance"), ("Unisphere-Data-BGP-MIB", "usdBgpVrfLocalDistance"), ("Unisphere-Data-BGP-MIB", "usdBgpVrfResetConnectionType"), ("Unisphere-Data-BGP-MIB", "usdBgpVrfRowStatus"), ("Unisphere-Data-BGP-MIB", "usdBgpVrfOperationalState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdBgpVrfConfGroup = usdBgpVrfConfGroup.setStatus('obsolete')
if mibBuilder.loadTexts: usdBgpVrfConfGroup.setDescription('Obsolete collection of objects providing management of BGP-specific VPN routing forwarding (VRF) characteristics in a Unisphere product. This group became obsolete when the usdBgpVrfAddUnicastRoutesToMulticastView object was added.')
usdBgpAddressFamilyConfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 2, 2, 13)).setObjects(("Unisphere-Data-BGP-MIB", "usdBgpAddressFamilyDefaultOriginate"), ("Unisphere-Data-BGP-MIB", "usdBgpAddressFamilyRouteFlapDampening"), ("Unisphere-Data-BGP-MIB", "usdBgpAddressFamilyDampeningSuppressThreshold"), ("Unisphere-Data-BGP-MIB", "usdBgpAddressFamilyDampeningReuseThreshold"), ("Unisphere-Data-BGP-MIB", "usdBgpAddressFamilyDampeningMaxHoldDownTime"), ("Unisphere-Data-BGP-MIB", "usdBgpAddressFamilyDampeningHalfLifeReachable"), ("Unisphere-Data-BGP-MIB", "usdBgpAddressFamilyDampeningHalfLifeUnreachable"), ("Unisphere-Data-BGP-MIB", "usdBgpAddressFamilyDampeningRouteMapName"), ("Unisphere-Data-BGP-MIB", "usdBgpAddressFamilyResetConnectionType"), ("Unisphere-Data-BGP-MIB", "usdBgpAddressFamilyRowStatus"), ("Unisphere-Data-BGP-MIB", "usdBgpAddressFamilyOperationalState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdBgpAddressFamilyConfGroup = usdBgpAddressFamilyConfGroup.setStatus('obsolete')
if mibBuilder.loadTexts: usdBgpAddressFamilyConfGroup.setDescription('Obsolete collection of objects providing management of BGP address families in a Unisphere product. This group was obsoleted when the ability to unconfigure BGP attributes using the MIB was added.')
usdBgpStorageConfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 2, 2, 14)).setObjects(("Unisphere-Data-BGP-MIB", "usdBgpStorageInitialHeapSize"), ("Unisphere-Data-BGP-MIB", "usdBgpStorageMaxHeapSize"), ("Unisphere-Data-BGP-MIB", "usdBgpStorageInitialVrfPoolSize"), ("Unisphere-Data-BGP-MIB", "usdBgpStorageMaxVrfPoolSize"), ("Unisphere-Data-BGP-MIB", "usdBgpStorageInitialAddressFamilyPoolSize"), ("Unisphere-Data-BGP-MIB", "usdBgpStorageMaxAddressFamilyPoolSize"), ("Unisphere-Data-BGP-MIB", "usdBgpStorageInitialPeerPoolSize"), ("Unisphere-Data-BGP-MIB", "usdBgpStorageMaxPeerPoolSize"), ("Unisphere-Data-BGP-MIB", "usdBgpStorageInitialPeerAfPoolSize"), ("Unisphere-Data-BGP-MIB", "usdBgpStorageMaxPeerAfPoolSize"), ("Unisphere-Data-BGP-MIB", "usdBgpStorageInitialPeerGroupPoolSize"), ("Unisphere-Data-BGP-MIB", "usdBgpStorageMaxPeerGroupPoolSize"), ("Unisphere-Data-BGP-MIB", "usdBgpStorageInitialPeerGroupAfPoolSize"), ("Unisphere-Data-BGP-MIB", "usdBgpStorageMaxPeerGroupAfPoolSize"), ("Unisphere-Data-BGP-MIB", "usdBgpStorageInitialNetworkPoolSize"), ("Unisphere-Data-BGP-MIB", "usdBgpStorageMaxNetworkPoolSize"), ("Unisphere-Data-BGP-MIB", "usdBgpStorageInitialAggregatePoolSize"), ("Unisphere-Data-BGP-MIB", "usdBgpStorageMaxAggregatePoolSize"), ("Unisphere-Data-BGP-MIB", "usdBgpStorageInitialDestinationPoolSize"), ("Unisphere-Data-BGP-MIB", "usdBgpStorageMaxDestinationPoolSize"), ("Unisphere-Data-BGP-MIB", "usdBgpStorageInitialRoutePoolSize"), ("Unisphere-Data-BGP-MIB", "usdBgpStorageMaxRoutePoolSize"), ("Unisphere-Data-BGP-MIB", "usdBgpStorageInitialAttributesPoolSize"), ("Unisphere-Data-BGP-MIB", "usdBgpStorageMaxAttributesPoolSize"), ("Unisphere-Data-BGP-MIB", "usdBgpStorageInitialRouteFlapHistoryPoolSize"), ("Unisphere-Data-BGP-MIB", "usdBgpStorageMaxRouteFlapHistoryPoolSize"), ("Unisphere-Data-BGP-MIB", "usdBgpStorageInitialNetworkRoutePoolSize"), ("Unisphere-Data-BGP-MIB", "usdBgpStorageMaxNetworkRoutePoolSize"), ("Unisphere-Data-BGP-MIB", "usdBgpStorageInitialRedistributedRoutePoolSize"), ("Unisphere-Data-BGP-MIB", "usdBgpStorageMaxRedistributedRoutePoolSize"), ("Unisphere-Data-BGP-MIB", "usdBgpStorageInitialAggregateRoutePoolSize"), ("Unisphere-Data-BGP-MIB", "usdBgpStorageMaxAggregateRoutePoolSize"), ("Unisphere-Data-BGP-MIB", "usdBgpStorageInitialAutoSummaryRoutePoolSize"), ("Unisphere-Data-BGP-MIB", "usdBgpStorageMaxAutoSummaryRoutePoolSize"), ("Unisphere-Data-BGP-MIB", "usdBgpStorageInitialHistoryRoutePoolSize"), ("Unisphere-Data-BGP-MIB", "usdBgpStorageMaxHistoryRoutePoolSize"), ("Unisphere-Data-BGP-MIB", "usdBgpStorageInitialSendQueueEntryPoolSize"), ("Unisphere-Data-BGP-MIB", "usdBgpStorageMaxSendQueueEntryPoolSize"), ("Unisphere-Data-BGP-MIB", "usdBgpStorageInitialVpnRoutePoolSize"), ("Unisphere-Data-BGP-MIB", "usdBgpStorageMaxVpnRoutePoolSize"), ("Unisphere-Data-BGP-MIB", "usdBgpStorageInitialRouteTargetPoolSize"), ("Unisphere-Data-BGP-MIB", "usdBgpStorageMaxRouteTargetPoolSize"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdBgpStorageConfGroup = usdBgpStorageConfGroup.setStatus('obsolete')
if mibBuilder.loadTexts: usdBgpStorageConfGroup.setDescription('Obsolete collection of objects providing management of BGP characteristics in a Unisphere product that will not take affect until reboot. This group became obsolete when the history pool size objects were obsoleted.')
usdBgpGeneralConfGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 2, 2, 15)).setObjects(("Unisphere-Data-BGP-MIB", "usdBgpLocalAsNumber"), ("Unisphere-Data-BGP-MIB", "usdBgpEnabled"), ("Unisphere-Data-BGP-MIB", "usdBgpIdentifier"), ("Unisphere-Data-BGP-MIB", "usdBgpAlwaysCompareMed"), ("Unisphere-Data-BGP-MIB", "usdBgpDefaultLocalPreference"), ("Unisphere-Data-BGP-MIB", "usdBgpEqualCostLimit"), ("Unisphere-Data-BGP-MIB", "usdBgpClientToClientReflection"), ("Unisphere-Data-BGP-MIB", "usdBgpClusterId"), ("Unisphere-Data-BGP-MIB", "usdBgpConfederationId"), ("Unisphere-Data-BGP-MIB", "usdBgpMissingAsWorst"), ("Unisphere-Data-BGP-MIB", "usdBgpResetAllConnectionType"), ("Unisphere-Data-BGP-MIB", "usdBgpAdvertiseInactive"), ("Unisphere-Data-BGP-MIB", "usdBgpEnforceFirstAs"), ("Unisphere-Data-BGP-MIB", "usdBgpConfedCompareMed"), ("Unisphere-Data-BGP-MIB", "usdBgpGlobalRetryInterval"), ("Unisphere-Data-BGP-MIB", "usdBgpGlobalConfigKeepAliveInterval"), ("Unisphere-Data-BGP-MIB", "usdBgpGlobalConfigHoldTime"), ("Unisphere-Data-BGP-MIB", "usdBgpGlobalAsOriginationInterval"), ("Unisphere-Data-BGP-MIB", "usdBgpExternalAdvertisementInterval"), ("Unisphere-Data-BGP-MIB", "usdBgpGlobalRibOutEnabled"), ("Unisphere-Data-BGP-MIB", "usdBgpOverloadShutdown"), ("Unisphere-Data-BGP-MIB", "usdBgpLogNeighborChanges"), ("Unisphere-Data-BGP-MIB", "usdBgpFastExternalFallover"), ("Unisphere-Data-BGP-MIB", "usdBgpInternalAdvertisementInterval"), ("Unisphere-Data-BGP-MIB", "usdBgpMaxAsLimit"), ("Unisphere-Data-BGP-MIB", "usdBgpOperationalState"), ("Unisphere-Data-BGP-MIB", "usdBgpPreviousOperationalState"), ("Unisphere-Data-BGP-MIB", "usdBgpAutomaticRouteTargetFilter"), ("Unisphere-Data-BGP-MIB", "usdBgpDefaultIPv4Unicast"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdBgpGeneralConfGroup2 = usdBgpGeneralConfGroup2.setStatus('obsolete')
if mibBuilder.loadTexts: usdBgpGeneralConfGroup2.setDescription('Obsolete collection of objects providing general management of BGP in a Unisphere product. This group became obsolete when the usdBgpRedistributeInternal object and unconfigure support were added.')
usdBgpNewRouteConfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 2, 2, 16)).setObjects(("Unisphere-Data-BGP-MIB", "usdBgpNewRouteOriginatorId"), ("Unisphere-Data-BGP-MIB", "usdBgpNewRouteAtomicAggregatePresent"), ("Unisphere-Data-BGP-MIB", "usdBgpNewRouteMedPresent"), ("Unisphere-Data-BGP-MIB", "usdBgpNewRouteLocalPrefPresent"), ("Unisphere-Data-BGP-MIB", "usdBgpNewRouteAggregatorPresent"), ("Unisphere-Data-BGP-MIB", "usdBgpNewRouteCommunitiesPresent"), ("Unisphere-Data-BGP-MIB", "usdBgpNewRouteOriginatorIdPresent"), ("Unisphere-Data-BGP-MIB", "usdBgpNewRouteClusterListPresent"), ("Unisphere-Data-BGP-MIB", "usdBgpNewRouteWeight"), ("Unisphere-Data-BGP-MIB", "usdBgpNewRouteOrigin"), ("Unisphere-Data-BGP-MIB", "usdBgpNewRouteASPathSegment"), ("Unisphere-Data-BGP-MIB", "usdBgpNewRouteNextHop"), ("Unisphere-Data-BGP-MIB", "usdBgpNewRouteMultiExitDisc"), ("Unisphere-Data-BGP-MIB", "usdBgpNewRouteLocalPref"), ("Unisphere-Data-BGP-MIB", "usdBgpNewRouteAtomicAggregate"), ("Unisphere-Data-BGP-MIB", "usdBgpNewRouteAggregatorAS"), ("Unisphere-Data-BGP-MIB", "usdBgpNewRouteAggregatorAddress"), ("Unisphere-Data-BGP-MIB", "usdBgpNewRouteBestInIpRouteTable"), ("Unisphere-Data-BGP-MIB", "usdBgpNewRouteUnknown"), ("Unisphere-Data-BGP-MIB", "usdBgpNewRouteExtendedCommunitiesPresent"), ("Unisphere-Data-BGP-MIB", "usdBgpNewRouteValid"), ("Unisphere-Data-BGP-MIB", "usdBgpNewRouteSuppressedBy"), ("Unisphere-Data-BGP-MIB", "usdBgpNewRouteNextHopReachable"), ("Unisphere-Data-BGP-MIB", "usdBgpNewRouteSynchronizedWithIgp"), ("Unisphere-Data-BGP-MIB", "usdBgpNewRoutePlaceInIpRouteTable"), ("Unisphere-Data-BGP-MIB", "usdBgpNewRouteAdvertiseToExternalPeers"), ("Unisphere-Data-BGP-MIB", "usdBgpNewRouteAdvertiseToInternalPeers"), ("Unisphere-Data-BGP-MIB", "usdBgpNewRouteMplsLabel"), ("Unisphere-Data-BGP-MIB", "usdBgpNewRouteNextHopMetric"), ("Unisphere-Data-BGP-MIB", "usdBgpNewRouteFlapState"), ("Unisphere-Data-BGP-MIB", "usdBgpNewRouteFlapFigureOfMerit"), ("Unisphere-Data-BGP-MIB", "usdBgpNewRouteFlapRemainingTime"), ("Unisphere-Data-BGP-MIB", "usdBgpNewRouteFlapSuppressThreshold"), ("Unisphere-Data-BGP-MIB", "usdBgpNewRouteFlapReuseThreshold"), ("Unisphere-Data-BGP-MIB", "usdBgpNewRouteFlapMaxHoldDownTime"), ("Unisphere-Data-BGP-MIB", "usdBgpNewRouteFlapHalfLifeReachable"), ("Unisphere-Data-BGP-MIB", "usdBgpNewRouteFlapHalfLifeUnreachable"), ("Unisphere-Data-BGP-MIB", "usdBgpNewRouteCommunityNumber"), ("Unisphere-Data-BGP-MIB", "usdBgpNewRouteExtendedCommunityNumber"), ("Unisphere-Data-BGP-MIB", "usdBgpNewRouteClusterId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdBgpNewRouteConfGroup = usdBgpNewRouteConfGroup.setStatus('current')
if mibBuilder.loadTexts: usdBgpNewRouteConfGroup.setDescription('A collection of objects providing management of BGP routes in a Unisphere product.')
usdBgpPeerConfGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 2, 2, 17)).setObjects(("Unisphere-Data-BGP-MIB", "usdBgpPeerAdminStatus"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerState"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerNegotiatedVersion"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerLocalAddress"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerLocalAddressMask"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerLocalPort"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerRemoteAsNumber"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerRemotePort"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerInUpdates"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerOutUpdates"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerInTotalMessages"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerOutTotalMessages"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerLastErrorCode"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerLastResetReason"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerFsmEstablishedTransitions"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerFsmEstablishedTime"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerRetryInterval"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerHoldTime"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerKeepAliveInterval"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerConfigHoldTime"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerConfigKeepAliveInterval"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerAsOriginationInterval"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerAdvertisementInterval"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerInUpdateElapsedTime"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerDescription"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerRemoteIdentifier"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerWeight"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerEbgpMultihop"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerEbgpMultihopTtl"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerUpdateSource"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerMd5Password"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerMaxUpdateSize"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerType"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerSupportsCapabilityNegotiation"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerCapabilityMultiProtocol"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerCapabilityRouteRefresh"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerCapabilityRouteRefreshCiscoProprietary"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerResetConnectionType"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerRowStatus"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerLocalAsNumber"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdBgpPeerConfGroup2 = usdBgpPeerConfGroup2.setStatus('obsolete')
if mibBuilder.loadTexts: usdBgpPeerConfGroup2.setDescription('Obsolete collection of objects providing management of BGP peers in a Unisphere product. This group became obsolete when the ability to unconfigure BGP attributes from the MIB was added.')
usdBgpPeerGroupConfGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 2, 2, 18)).setObjects(("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupAdminStatus"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupRemoteAsNumber"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupRetryInterval"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupConfigHoldTime"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupConfigKeepAliveInterval"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupAsOriginationInterval"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupAdvertisementInterval"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupDescription"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupWeight"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupEbgpMultihop"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupEbgpMultihopTtl"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupUpdateSource"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupMd5Password"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupMaxUpdateSize"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupResetConnectionType"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupRowStatus"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupLocalAsNumber"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdBgpPeerGroupConfGroup2 = usdBgpPeerGroupConfGroup2.setStatus('obsolete')
if mibBuilder.loadTexts: usdBgpPeerGroupConfGroup2.setDescription('Obsolete collection of objects providing management of BGP peer groups in a Unisphere product. This group was obsoleted when the ability to unconfigure BGP attributes using the MIB was added.')
usdBgpVrfConfGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 2, 2, 19)).setObjects(("Unisphere-Data-BGP-MIB", "usdBgpVrfSynchronization"), ("Unisphere-Data-BGP-MIB", "usdBgpVrfAutoSummary"), ("Unisphere-Data-BGP-MIB", "usdBgpVrfExternalDistance"), ("Unisphere-Data-BGP-MIB", "usdBgpVrfInternalDistance"), ("Unisphere-Data-BGP-MIB", "usdBgpVrfLocalDistance"), ("Unisphere-Data-BGP-MIB", "usdBgpVrfResetConnectionType"), ("Unisphere-Data-BGP-MIB", "usdBgpVrfRowStatus"), ("Unisphere-Data-BGP-MIB", "usdBgpVrfOperationalState"), ("Unisphere-Data-BGP-MIB", "usdBgpVrfAddUnicastRoutesToMulticastView"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdBgpVrfConfGroup2 = usdBgpVrfConfGroup2.setStatus('obsolete')
if mibBuilder.loadTexts: usdBgpVrfConfGroup2.setDescription('Obsolete collection of objects providing management of BGP-specific VPN routing forwarding (VRF) characteristics in a Unisphere product. This group was obsoleted when the ability to unconfigure BGP attributes using the MIB was added.')
usdBgpGeneralConfGroup3 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 2, 2, 20)).setObjects(("Unisphere-Data-BGP-MIB", "usdBgpLocalAsNumber"), ("Unisphere-Data-BGP-MIB", "usdBgpEnabled"), ("Unisphere-Data-BGP-MIB", "usdBgpIdentifier"), ("Unisphere-Data-BGP-MIB", "usdBgpAlwaysCompareMed"), ("Unisphere-Data-BGP-MIB", "usdBgpDefaultLocalPreference"), ("Unisphere-Data-BGP-MIB", "usdBgpEqualCostLimit"), ("Unisphere-Data-BGP-MIB", "usdBgpClientToClientReflection"), ("Unisphere-Data-BGP-MIB", "usdBgpClusterId"), ("Unisphere-Data-BGP-MIB", "usdBgpConfederationId"), ("Unisphere-Data-BGP-MIB", "usdBgpMissingAsWorst"), ("Unisphere-Data-BGP-MIB", "usdBgpResetAllConnectionType"), ("Unisphere-Data-BGP-MIB", "usdBgpAdvertiseInactive"), ("Unisphere-Data-BGP-MIB", "usdBgpEnforceFirstAs"), ("Unisphere-Data-BGP-MIB", "usdBgpConfedCompareMed"), ("Unisphere-Data-BGP-MIB", "usdBgpGlobalRetryInterval"), ("Unisphere-Data-BGP-MIB", "usdBgpGlobalConfigKeepAliveInterval"), ("Unisphere-Data-BGP-MIB", "usdBgpGlobalConfigHoldTime"), ("Unisphere-Data-BGP-MIB", "usdBgpGlobalAsOriginationInterval"), ("Unisphere-Data-BGP-MIB", "usdBgpExternalAdvertisementInterval"), ("Unisphere-Data-BGP-MIB", "usdBgpGlobalRibOutEnabled"), ("Unisphere-Data-BGP-MIB", "usdBgpOverloadShutdown"), ("Unisphere-Data-BGP-MIB", "usdBgpLogNeighborChanges"), ("Unisphere-Data-BGP-MIB", "usdBgpFastExternalFallover"), ("Unisphere-Data-BGP-MIB", "usdBgpInternalAdvertisementInterval"), ("Unisphere-Data-BGP-MIB", "usdBgpMaxAsLimit"), ("Unisphere-Data-BGP-MIB", "usdBgpOperationalState"), ("Unisphere-Data-BGP-MIB", "usdBgpPreviousOperationalState"), ("Unisphere-Data-BGP-MIB", "usdBgpAutomaticRouteTargetFilter"), ("Unisphere-Data-BGP-MIB", "usdBgpDefaultIPv4Unicast"), ("Unisphere-Data-BGP-MIB", "usdBgpRedistributeInternal"), ("Unisphere-Data-BGP-MIB", "usdBgpUnconfiguredAttributes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdBgpGeneralConfGroup3 = usdBgpGeneralConfGroup3.setStatus('current')
if mibBuilder.loadTexts: usdBgpGeneralConfGroup3.setDescription('A collection of objects providing general management of BGP in a Unisphere product.')
usdBgpStorageConfGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 2, 2, 21)).setObjects(("Unisphere-Data-BGP-MIB", "usdBgpStorageInitialHeapSize"), ("Unisphere-Data-BGP-MIB", "usdBgpStorageMaxHeapSize"), ("Unisphere-Data-BGP-MIB", "usdBgpStorageInitialVrfPoolSize"), ("Unisphere-Data-BGP-MIB", "usdBgpStorageMaxVrfPoolSize"), ("Unisphere-Data-BGP-MIB", "usdBgpStorageInitialAddressFamilyPoolSize"), ("Unisphere-Data-BGP-MIB", "usdBgpStorageMaxAddressFamilyPoolSize"), ("Unisphere-Data-BGP-MIB", "usdBgpStorageInitialPeerPoolSize"), ("Unisphere-Data-BGP-MIB", "usdBgpStorageMaxPeerPoolSize"), ("Unisphere-Data-BGP-MIB", "usdBgpStorageInitialPeerAfPoolSize"), ("Unisphere-Data-BGP-MIB", "usdBgpStorageMaxPeerAfPoolSize"), ("Unisphere-Data-BGP-MIB", "usdBgpStorageInitialPeerGroupPoolSize"), ("Unisphere-Data-BGP-MIB", "usdBgpStorageMaxPeerGroupPoolSize"), ("Unisphere-Data-BGP-MIB", "usdBgpStorageInitialPeerGroupAfPoolSize"), ("Unisphere-Data-BGP-MIB", "usdBgpStorageMaxPeerGroupAfPoolSize"), ("Unisphere-Data-BGP-MIB", "usdBgpStorageInitialNetworkPoolSize"), ("Unisphere-Data-BGP-MIB", "usdBgpStorageMaxNetworkPoolSize"), ("Unisphere-Data-BGP-MIB", "usdBgpStorageInitialAggregatePoolSize"), ("Unisphere-Data-BGP-MIB", "usdBgpStorageMaxAggregatePoolSize"), ("Unisphere-Data-BGP-MIB", "usdBgpStorageInitialDestinationPoolSize"), ("Unisphere-Data-BGP-MIB", "usdBgpStorageMaxDestinationPoolSize"), ("Unisphere-Data-BGP-MIB", "usdBgpStorageInitialRoutePoolSize"), ("Unisphere-Data-BGP-MIB", "usdBgpStorageMaxRoutePoolSize"), ("Unisphere-Data-BGP-MIB", "usdBgpStorageInitialAttributesPoolSize"), ("Unisphere-Data-BGP-MIB", "usdBgpStorageMaxAttributesPoolSize"), ("Unisphere-Data-BGP-MIB", "usdBgpStorageInitialRouteFlapHistoryPoolSize"), ("Unisphere-Data-BGP-MIB", "usdBgpStorageMaxRouteFlapHistoryPoolSize"), ("Unisphere-Data-BGP-MIB", "usdBgpStorageInitialNetworkRoutePoolSize"), ("Unisphere-Data-BGP-MIB", "usdBgpStorageMaxNetworkRoutePoolSize"), ("Unisphere-Data-BGP-MIB", "usdBgpStorageInitialRedistributedRoutePoolSize"), ("Unisphere-Data-BGP-MIB", "usdBgpStorageMaxRedistributedRoutePoolSize"), ("Unisphere-Data-BGP-MIB", "usdBgpStorageInitialAggregateRoutePoolSize"), ("Unisphere-Data-BGP-MIB", "usdBgpStorageMaxAggregateRoutePoolSize"), ("Unisphere-Data-BGP-MIB", "usdBgpStorageInitialAutoSummaryRoutePoolSize"), ("Unisphere-Data-BGP-MIB", "usdBgpStorageMaxAutoSummaryRoutePoolSize"), ("Unisphere-Data-BGP-MIB", "usdBgpStorageInitialSendQueueEntryPoolSize"), ("Unisphere-Data-BGP-MIB", "usdBgpStorageMaxSendQueueEntryPoolSize"), ("Unisphere-Data-BGP-MIB", "usdBgpStorageInitialVpnRoutePoolSize"), ("Unisphere-Data-BGP-MIB", "usdBgpStorageMaxVpnRoutePoolSize"), ("Unisphere-Data-BGP-MIB", "usdBgpStorageInitialRouteTargetPoolSize"), ("Unisphere-Data-BGP-MIB", "usdBgpStorageMaxRouteTargetPoolSize"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdBgpStorageConfGroup2 = usdBgpStorageConfGroup2.setStatus('current')
if mibBuilder.loadTexts: usdBgpStorageConfGroup2.setDescription('A collection of objects providing management of BGP characteristics in a Unisphere product that will not take affect until reboot.')
usdBgpPeerConfGroup3 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 2, 2, 22)).setObjects(("Unisphere-Data-BGP-MIB", "usdBgpPeerAdminStatus"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerState"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerNegotiatedVersion"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerLocalAddress"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerLocalAddressMask"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerLocalPort"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerRemoteAsNumber"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerRemotePort"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerInUpdates"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerOutUpdates"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerInTotalMessages"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerOutTotalMessages"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerLastErrorCode"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerLastResetReason"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerFsmEstablishedTransitions"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerFsmEstablishedTime"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerRetryInterval"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerHoldTime"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerKeepAliveInterval"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerConfigHoldTime"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerConfigKeepAliveInterval"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerAsOriginationInterval"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerAdvertisementInterval"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerInUpdateElapsedTime"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerDescription"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerRemoteIdentifier"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerWeight"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerEbgpMultihop"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerEbgpMultihopTtl"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerUpdateSource"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerMd5Password"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerMaxUpdateSize"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerType"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerSupportsCapabilityNegotiation"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerCapabilityMultiProtocol"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerCapabilityRouteRefresh"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerCapabilityRouteRefreshCiscoProprietary"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerResetConnectionType"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerRowStatus"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerLocalAsNumber"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerUnconfiguredAttributes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdBgpPeerConfGroup3 = usdBgpPeerConfGroup3.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerConfGroup3.setDescription('A collection of objects providing management of BGP peers in a Unisphere product.')
usdBgpPeerAddressFamilyConfGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 2, 2, 23)).setObjects(("Unisphere-Data-BGP-MIB", "usdBgpPeerAddressFamilyPeerGroup"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerAddressFamilyDefaultOriginate"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerAddressFamilyNextHopSelf"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerAddressFamilySendCommunity"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerAddressFamilyDistributeListIn"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerAddressFamilyDistributeListOut"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerAddressFamilyPrefixListIn"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerAddressFamilyPrefixListOut"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerAddressFamilyPrefixTreeIn"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerAddressFamilyPrefixTreeOut"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerAddressFamilyFilterListIn"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerAddressFamilyFilterListOut"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerAddressFamilyFilterListWeight"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerAddressFamilyFilterListWeightValue"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerAddressFamilyRouteMapIn"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerAddressFamilyRouteMapOut"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerAddressFamilyRouteReflectorClient"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerAddressFamilyRouteLimitWarn"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerAddressFamilyRouteLimitReset"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerAddressFamilyRouteLimitWarnOnly"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerAddressFamilyRemovePrivateAs"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerAddressFamilyUnsuppressMap"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerAddressFamilyInboundSoftReconfig"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerAddressFamilyResetConnectionType"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerAddressFamilyRowStatus"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerAddressFamilyAsOverride"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerAddressFamilyAllowAsIn"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerAddressFamilySendExtendedCommunity"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerAddressFamilyUnconfiguredAttributes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdBgpPeerAddressFamilyConfGroup2 = usdBgpPeerAddressFamilyConfGroup2.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerAddressFamilyConfGroup2.setDescription('A collection of objects providing management of BGP peer address families in a Unisphere product.')
usdBgpPeerGroupConfGroup3 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 2, 2, 24)).setObjects(("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupAdminStatus"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupRemoteAsNumber"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupRetryInterval"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupConfigHoldTime"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupConfigKeepAliveInterval"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupAsOriginationInterval"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupAdvertisementInterval"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupDescription"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupWeight"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupEbgpMultihop"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupEbgpMultihopTtl"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupUpdateSource"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupMd5Password"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupMaxUpdateSize"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupResetConnectionType"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupRowStatus"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupLocalAsNumber"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupUnconfiguredAttributes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdBgpPeerGroupConfGroup3 = usdBgpPeerGroupConfGroup3.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerGroupConfGroup3.setDescription('A collection of objects providing management of BGP peer groups in a Unisphere product.')
usdBgpPeerGroupAddressFamilyConfGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 2, 2, 25)).setObjects(("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupAddressFamilyDefaultOriginate"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupAddressFamilyNextHopSelf"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupAddressFamilySendCommunity"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupAddressFamilyDistributeListIn"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupAddressFamilyDistributeListOut"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupAddressFamilyPrefixListIn"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupAddressFamilyPrefixListOut"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupAddressFamilyPrefixTreeIn"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupAddressFamilyPrefixTreeOut"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupAddressFamilyFilterListIn"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupAddressFamilyFilterListOut"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupAddressFamilyFilterListWeight"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupAddressFamilyFilterListWeightValue"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupAddressFamilyRouteMapIn"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupAddressFamilyRouteMapOut"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupAddressFamilyRouteReflectorClient"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupAddressFamilyRouteLimitWarn"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupAddressFamilyRouteLimitReset"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupAddressFamilyRouteLimitWarnOnly"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupAddressFamilyRemovePrivateAs"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupAddressFamilyUnsuppressMap"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupAddressFamilyInboundSoftReconfig"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupAddressFamilyResetConnectionType"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupAddressFamilyRowStatus"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupAddressFamilyAsOverride"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupAddressFamilyAllowAsIn"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupAddressFamilySendExtendedCommunity"), ("Unisphere-Data-BGP-MIB", "usdBgpPeerGroupAddressFamilyUnconfiguredAttributes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdBgpPeerGroupAddressFamilyConfGroup2 = usdBgpPeerGroupAddressFamilyConfGroup2.setStatus('current')
if mibBuilder.loadTexts: usdBgpPeerGroupAddressFamilyConfGroup2.setDescription('A collection of objects providing management of BGP peer group address families in a Unisphere product.')
usdBgpNetworkConfGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 2, 2, 26)).setObjects(("Unisphere-Data-BGP-MIB", "usdBgpNetworkBackdoor"), ("Unisphere-Data-BGP-MIB", "usdBgpNetworkRowStatus"), ("Unisphere-Data-BGP-MIB", "usdBgpNetworkWeightSpecified"), ("Unisphere-Data-BGP-MIB", "usdBgpNetworkWeight"), ("Unisphere-Data-BGP-MIB", "usdBgpNetworkRouteMap"), ("Unisphere-Data-BGP-MIB", "usdBgpNetworkUnconfiguredAttributes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdBgpNetworkConfGroup2 = usdBgpNetworkConfGroup2.setStatus('current')
if mibBuilder.loadTexts: usdBgpNetworkConfGroup2.setDescription('A collection of objects providing management of BGP networks in a Unisphere product.')
usdBgpAggregateConfGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 2, 2, 27)).setObjects(("Unisphere-Data-BGP-MIB", "usdBgpAggregateAsSet"), ("Unisphere-Data-BGP-MIB", "usdBgpAggregateSummaryOnly"), ("Unisphere-Data-BGP-MIB", "usdBgpAggregateAttributeMap"), ("Unisphere-Data-BGP-MIB", "usdBgpAggregateAdvertiseMap"), ("Unisphere-Data-BGP-MIB", "usdBgpAggregateRowStatus"), ("Unisphere-Data-BGP-MIB", "usdBgpAggregateSuppressMap"), ("Unisphere-Data-BGP-MIB", "usdBgpAggregateUnconfiguredAttributes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdBgpAggregateConfGroup2 = usdBgpAggregateConfGroup2.setStatus('current')
if mibBuilder.loadTexts: usdBgpAggregateConfGroup2.setDescription('A collection of objects providing consolidation of BGP route information in a Unisphere product.')
usdBgpVrfConfGroup3 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 2, 2, 28)).setObjects(("Unisphere-Data-BGP-MIB", "usdBgpVrfSynchronization"), ("Unisphere-Data-BGP-MIB", "usdBgpVrfAutoSummary"), ("Unisphere-Data-BGP-MIB", "usdBgpVrfExternalDistance"), ("Unisphere-Data-BGP-MIB", "usdBgpVrfInternalDistance"), ("Unisphere-Data-BGP-MIB", "usdBgpVrfLocalDistance"), ("Unisphere-Data-BGP-MIB", "usdBgpVrfResetConnectionType"), ("Unisphere-Data-BGP-MIB", "usdBgpVrfRowStatus"), ("Unisphere-Data-BGP-MIB", "usdBgpVrfOperationalState"), ("Unisphere-Data-BGP-MIB", "usdBgpVrfAddUnicastRoutesToMulticastView"), ("Unisphere-Data-BGP-MIB", "usdBgpVrfUnconfiguredAttributes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdBgpVrfConfGroup3 = usdBgpVrfConfGroup3.setStatus('current')
if mibBuilder.loadTexts: usdBgpVrfConfGroup3.setDescription('A collection of objects providing management of BGP-specific VPN routing forwarding (VRF) characteristics in a Unisphere product.')
usdBgpAddressFamilyConfGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 29, 2, 2, 29)).setObjects(("Unisphere-Data-BGP-MIB", "usdBgpAddressFamilyDefaultOriginate"), ("Unisphere-Data-BGP-MIB", "usdBgpAddressFamilyRouteFlapDampening"), ("Unisphere-Data-BGP-MIB", "usdBgpAddressFamilyDampeningSuppressThreshold"), ("Unisphere-Data-BGP-MIB", "usdBgpAddressFamilyDampeningReuseThreshold"), ("Unisphere-Data-BGP-MIB", "usdBgpAddressFamilyDampeningMaxHoldDownTime"), ("Unisphere-Data-BGP-MIB", "usdBgpAddressFamilyDampeningHalfLifeReachable"), ("Unisphere-Data-BGP-MIB", "usdBgpAddressFamilyDampeningHalfLifeUnreachable"), ("Unisphere-Data-BGP-MIB", "usdBgpAddressFamilyDampeningRouteMapName"), ("Unisphere-Data-BGP-MIB", "usdBgpAddressFamilyResetConnectionType"), ("Unisphere-Data-BGP-MIB", "usdBgpAddressFamilyRowStatus"), ("Unisphere-Data-BGP-MIB", "usdBgpAddressFamilyOperationalState"), ("Unisphere-Data-BGP-MIB", "usdBgpAddressFamilyUnconfiguredAttributes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdBgpAddressFamilyConfGroup2 = usdBgpAddressFamilyConfGroup2.setStatus('current')
if mibBuilder.loadTexts: usdBgpAddressFamilyConfGroup2.setDescription('A collection of objects providing management of BGP address families in a Unisphere product.')
mibBuilder.exportSymbols("Unisphere-Data-BGP-MIB", usdBgpAdvertiseInactive=usdBgpAdvertiseInactive, usdBgpAddressFamilyConfGroup=usdBgpAddressFamilyConfGroup, usdBgpPeerNegotiatedVersion=usdBgpPeerNegotiatedVersion, usdBgpNewRouteNextHopReachable=usdBgpNewRouteNextHopReachable, usdBgpRouteAggregatorAddress=usdBgpRouteAggregatorAddress, usdBgpPeerGroupConfigKeepAliveInterval=usdBgpPeerGroupConfigKeepAliveInterval, usdBgpPeerDescription=usdBgpPeerDescription, usdBgpMaxAsLimit=usdBgpMaxAsLimit, usdBgpPeerEbgpMultihop=usdBgpPeerEbgpMultihop, usdBgpRouteFlapHistoryCount=usdBgpRouteFlapHistoryCount, usdBgpRouteCommunityEntry=usdBgpRouteCommunityEntry, usdBgpRouteCommunityTable=usdBgpRouteCommunityTable, usdBgpNewRouteSafi=usdBgpNewRouteSafi, usdBgpNetworkSafi=usdBgpNetworkSafi, usdBgpRouteExtendedCommunityEntry=usdBgpRouteExtendedCommunityEntry, usdBgpPeerHoldTime=usdBgpPeerHoldTime, usdBgpPeerAddressFamilyRowStatus=usdBgpPeerAddressFamilyRowStatus, usdBgpPeerAddressFamilyPrefixListOut=usdBgpPeerAddressFamilyPrefixListOut, usdBgpPeerProposedAfiSafiPeerRemoteAddr=usdBgpPeerProposedAfiSafiPeerRemoteAddr, usdBgpStorageMaxPeerAfPoolSize=usdBgpStorageMaxPeerAfPoolSize, usdBgpPeerGroupAddressFamilyAfi=usdBgpPeerGroupAddressFamilyAfi, usdBgpStorageInitialHeapSize=usdBgpStorageInitialHeapSize, usdBgpVrfExternalDistance=usdBgpVrfExternalDistance, usdBgpSuppressedRouteCount=usdBgpSuppressedRouteCount, usdBgpCompliance5=usdBgpCompliance5, usdBgpEqualCostLimit=usdBgpEqualCostLimit, usdBgpPeerAddressFamilyRemoteAddress=usdBgpPeerAddressFamilyRemoteAddress, usdBgpPeerAddressFamilyNextHopSelf=usdBgpPeerAddressFamilyNextHopSelf, usdBgpRouteCount=usdBgpRouteCount, usdBgpResetAllConnectionType=usdBgpResetAllConnectionType, usdBgpRouteFlapState=usdBgpRouteFlapState, usdBgpAlwaysCompareMed=usdBgpAlwaysCompareMed, usdBgpExchangedAfiSafiPeerAfi=usdBgpExchangedAfiSafiPeerAfi, usdBgpPeerGroupAddressFamilySendExtendedCommunity=usdBgpPeerGroupAddressFamilySendExtendedCommunity, usdBgpPeerGroupAddressFamilyDistributeListOut=usdBgpPeerGroupAddressFamilyDistributeListOut, usdBgpAddressFamilyRouteFlapDampening=usdBgpAddressFamilyRouteFlapDampening, usdBgpLogNeighborChanges=usdBgpLogNeighborChanges, usdBgpStorageMaxAutoSummaryRoutePoolSize=usdBgpStorageMaxAutoSummaryRoutePoolSize, usdBgpStorageInitialVrfPoolSize=usdBgpStorageInitialVrfPoolSize, usdBgpStorageInitialAddressFamilyPoolSize=usdBgpStorageInitialAddressFamilyPoolSize, usdBgpStorageConfGroup=usdBgpStorageConfGroup, usdBgpPeerGroupAdminStatus=usdBgpPeerGroupAdminStatus, usdBgpPeerGroupAddressFamilyFilterListOut=usdBgpPeerGroupAddressFamilyFilterListOut, UsdBgpAfi=UsdBgpAfi, usdBgpConfederationId=usdBgpConfederationId, usdBgpRouteFlapMaxHoldDownTime=usdBgpRouteFlapMaxHoldDownTime, usdBgpRouteFlapHalfLifeUnreachable=usdBgpRouteFlapHalfLifeUnreachable, usdBgpPeerAddressFamilyRouteLimitReset=usdBgpPeerAddressFamilyRouteLimitReset, usdBgpStorageInitialRedistributedRoutePoolSize=usdBgpStorageInitialRedistributedRoutePoolSize, usdBgpPeerAddressFamilyRemovePrivateAs=usdBgpPeerAddressFamilyRemovePrivateAs, usdBgpNewRouteMplsLabel=usdBgpNewRouteMplsLabel, usdBgpGlobalRibOutEnabled=usdBgpGlobalRibOutEnabled, usdBgpRouteDistinguisher=usdBgpRouteDistinguisher, usdBgpPeerAddressFamilyFilterListWeight=usdBgpPeerAddressFamilyFilterListWeight, usdBgpNetworkWeight=usdBgpNetworkWeight, usdBgpPeerGroupAddressFamilyPrefixListOut=usdBgpPeerGroupAddressFamilyPrefixListOut, usdBgpRouteMemoryUsed=usdBgpRouteMemoryUsed, usdBgpNewRouteClusterId=usdBgpNewRouteClusterId, usdBgpRouteIpAddrPrefix=usdBgpRouteIpAddrPrefix, usdBgpPeerUpdateSource=usdBgpPeerUpdateSource, usdBgpNewRouteAfi=usdBgpNewRouteAfi, usdBgpMissingAsWorst=usdBgpMissingAsWorst, usdBgpVrfAddUnicastRoutesToMulticastView=usdBgpVrfAddUnicastRoutesToMulticastView, usdBgpNewRouteRouteType=usdBgpNewRouteRouteType, usdBgpAggregateSuppressMap=usdBgpAggregateSuppressMap, usdBgpStorageInitialSendQueueEntryPoolSize=usdBgpStorageInitialSendQueueEntryPoolSize, usdBgpPeerWeight=usdBgpPeerWeight, usdBgpAddressFamilyTable=usdBgpAddressFamilyTable, usdBgpNewRouteNextHop=usdBgpNewRouteNextHop, usdBgpPeerGroupAddressFamilyPrefixListIn=usdBgpPeerGroupAddressFamilyPrefixListIn, usdBgpPeerTable=usdBgpPeerTable, usdBgpLocalProposedAfiSafiPeerAfi=usdBgpLocalProposedAfiSafiPeerAfi, usdBgpPeerGroupAddressFamilyRemovePrivateAs=usdBgpPeerGroupAddressFamilyRemovePrivateAs, usdBgpNewRouteOriginatorId=usdBgpNewRouteOriginatorId, usdBgpStorageInitialHistoryRoutePoolSize=usdBgpStorageInitialHistoryRoutePoolSize, usdBgpStorageInitialNetworkRoutePoolSize=usdBgpStorageInitialNetworkRoutePoolSize, usdBgpPeerGroupAddressFamilyUnsuppressMap=usdBgpPeerGroupAddressFamilyUnsuppressMap, usdBgpPeerAddressFamilySendCommunity=usdBgpPeerAddressFamilySendCommunity, usdBgpPeerGroupMd5Password=usdBgpPeerGroupMd5Password, usdBgpRouteMultiExitDisc=usdBgpRouteMultiExitDisc, usdBgpNewRouteLocalPref=usdBgpNewRouteLocalPref, usdBgpAggregateIpAddrPrefixLen=usdBgpAggregateIpAddrPrefixLen, usdBgpAggregateVrfName=usdBgpAggregateVrfName, usdBgpCompliance=usdBgpCompliance, usdBgpRedistributeInternal=usdBgpRedistributeInternal, usdBgpNewRouteSynchronizedWithIgp=usdBgpNewRouteSynchronizedWithIgp, usdBgpNewRouteMultiExitDisc=usdBgpNewRouteMultiExitDisc, usdBgpConfederationPeerEntry=usdBgpConfederationPeerEntry, usdBgpPeerGroupAddressFamilyVrfName=usdBgpPeerGroupAddressFamilyVrfName, usdBgpNewRouteFlapHistoryTable=usdBgpNewRouteFlapHistoryTable, usdBgpNewRouteAdvertiseToExternalPeers=usdBgpNewRouteAdvertiseToExternalPeers, usdBgpDestinationMemoryUsed=usdBgpDestinationMemoryUsed, usdBgpPeerGroupAddressFamilySafi=usdBgpPeerGroupAddressFamilySafi, usdBgpStorageMaxDestinationPoolSize=usdBgpStorageMaxDestinationPoolSize, UsdBgpResetConnectionType=UsdBgpResetConnectionType, usdBgpPeerAddressFamilyResetConnectionType=usdBgpPeerAddressFamilyResetConnectionType, usdBgpPeerProposedAfiSafiPeerSafi=usdBgpPeerProposedAfiSafiPeerSafi, usdBgpPeerGroupUpdateSource=usdBgpPeerGroupUpdateSource, usdBgpPeerGroupAsOriginationInterval=usdBgpPeerGroupAsOriginationInterval, usdBgpAggregateUnconfiguredAttributes=usdBgpAggregateUnconfiguredAttributes, usdBgpPeerLastResetReason=usdBgpPeerLastResetReason, usdBgpRouteFlapHistoryMemoryUsed=usdBgpRouteFlapHistoryMemoryUsed, usdBgpAggregateRowStatus=usdBgpAggregateRowStatus, usdBgpRouteAggregatorAS=usdBgpRouteAggregatorAS, usdBgpVrfConfGroup3=usdBgpVrfConfGroup3, usdBgpRouteSuppressedBy=usdBgpRouteSuppressedBy, usdBgpRouteVrfName=usdBgpRouteVrfName, usdBgpAddressFamilyRowStatus=usdBgpAddressFamilyRowStatus, usdBgpNewRouteBestInIpRouteTable=usdBgpNewRouteBestInIpRouteTable, usdBgpNetworkConfGroup2=usdBgpNetworkConfGroup2, usdBgpStorageMaxRedistributedRoutePoolSize=usdBgpStorageMaxRedistributedRoutePoolSize, usdBgpNetworkConfGroup=usdBgpNetworkConfGroup, usdBgpNetworkIpAddrPrefixLen=usdBgpNetworkIpAddrPrefixLen, usdBgpPeerEbgpMultihopTtl=usdBgpPeerEbgpMultihopTtl, usdBgpAddressFamilyDampeningHalfLifeReachable=usdBgpAddressFamilyDampeningHalfLifeReachable, usdBgpPeerRemoteAsNumber=usdBgpPeerRemoteAsNumber, usdBgpPeerAddressFamilyFilterListIn=usdBgpPeerAddressFamilyFilterListIn, usdBgpPeerProposedAfiSafiPeerAfi=usdBgpPeerProposedAfiSafiPeerAfi, usdBgpPeerGroupGroupName=usdBgpPeerGroupGroupName, usdBgpAddressFamilyDampeningMaxHoldDownTime=usdBgpAddressFamilyDampeningMaxHoldDownTime, usdBgpRouteLocalPref=usdBgpRouteLocalPref, usdBgpEnforceFirstAs=usdBgpEnforceFirstAs, usdBgpNetworkWeightSpecified=usdBgpNetworkWeightSpecified, usdBgpPeerCapabilityMultiProtocol=usdBgpPeerCapabilityMultiProtocol, usdBgpAddressFamilySafi=usdBgpAddressFamilySafi, usdBgpRouteWeight=usdBgpRouteWeight, usdBgpNetworkRouteMap=usdBgpNetworkRouteMap, usdBgpAddressFamilyUnconfiguredAttributes=usdBgpAddressFamilyUnconfiguredAttributes, usdBgpPeerConfGroup3=usdBgpPeerConfGroup3, usdBgpRouteEntry=usdBgpRouteEntry, usdBgpNetworkVrfName=usdBgpNetworkVrfName, usdBgpPeerAddressFamilyPeerGroup=usdBgpPeerAddressFamilyPeerGroup, usdBgpAggregateTable=usdBgpAggregateTable, usdBgpNewRouteWeight=usdBgpNewRouteWeight, usdBgpPeerGroupAddressFamilyRowStatus=usdBgpPeerGroupAddressFamilyRowStatus, usdBgpStorageInitialAttributesPoolSize=usdBgpStorageInitialAttributesPoolSize, usdBgpVrfEntry=usdBgpVrfEntry, usdBgpVrfName=usdBgpVrfName, usdBgpStorageConfGroup2=usdBgpStorageConfGroup2, usdBgpPeerUnconfiguredAttributes=usdBgpPeerUnconfiguredAttributes, usdBgpPeerProposedAfiSafiPeerRowStatus=usdBgpPeerProposedAfiSafiPeerRowStatus, usdBgpVrfRowStatus=usdBgpVrfRowStatus, usdBgpAddressFamilyDampeningHalfLifeUnreachable=usdBgpAddressFamilyDampeningHalfLifeUnreachable, usdBgpVrfResetConnectionType=usdBgpVrfResetConnectionType, usdBgpCompliance2=usdBgpCompliance2, usdBgpConfedCompareMed=usdBgpConfedCompareMed, usdBgpStorageMaxRoutePoolSize=usdBgpStorageMaxRoutePoolSize, usdBgpPeerGroupAddressFamilyDefaultOriginate=usdBgpPeerGroupAddressFamilyDefaultOriginate, usdBgpStorageMaxPeerGroupAfPoolSize=usdBgpStorageMaxPeerGroupAfPoolSize, usdBgpAggregateAdvertiseMap=usdBgpAggregateAdvertiseMap, usdBgpStorageMaxVrfPoolSize=usdBgpStorageMaxVrfPoolSize, usdBgpStorageInitialRoutePoolSize=usdBgpStorageInitialRoutePoolSize, usdBgpPeerGroupAddressFamilyRouteLimitWarn=usdBgpPeerGroupAddressFamilyRouteLimitWarn, usdBgpStorageInitialPeerAfPoolSize=usdBgpStorageInitialPeerAfPoolSize, usdBgpExternalAdvertisementInterval=usdBgpExternalAdvertisementInterval, usdBgpOperationalState=usdBgpOperationalState, usdBgpPeerRemoteIdentifier=usdBgpPeerRemoteIdentifier, usdBgpPeerProposedAfiSafiPeerEntry=usdBgpPeerProposedAfiSafiPeerEntry, usdBgpRoutePeer=usdBgpRoutePeer, usdBgpNewRouteAggregatorAddress=usdBgpNewRouteAggregatorAddress, usdBgpRouteFlapRemainingTime=usdBgpRouteFlapRemainingTime, usdBgpRouteFlapSuppressThreshold=usdBgpRouteFlapSuppressThreshold, usdBgpRouteClusterIdEntry=usdBgpRouteClusterIdEntry, usdBgpStorageMaxNetworkPoolSize=usdBgpStorageMaxNetworkPoolSize, usdBgpPreviousOperationalState=usdBgpPreviousOperationalState, usdBgpRouteAtomicAggregate=usdBgpRouteAtomicAggregate, usdBgpAggregateSafi=usdBgpAggregateSafi, usdBgpPeerAddressFamilySendExtendedCommunity=usdBgpPeerAddressFamilySendExtendedCommunity, usdBgpPeerGroupAddressFamilyRouteMapOut=usdBgpPeerGroupAddressFamilyRouteMapOut, usdBgpPeerAddressFamilyRouteLimitWarnOnly=usdBgpPeerAddressFamilyRouteLimitWarnOnly, usdBgpNewRouteFlapHalfLifeReachable=usdBgpNewRouteFlapHalfLifeReachable, usdBgpStorageMaxVpnRoutePoolSize=usdBgpStorageMaxVpnRoutePoolSize, usdBgpPeerProposedAfiSafiPeerVrfName=usdBgpPeerProposedAfiSafiPeerVrfName, usdBgpPeerMd5Password=usdBgpPeerMd5Password, usdBgpRouteExtendedCommunitiesPresent=usdBgpRouteExtendedCommunitiesPresent, usdBgpPeerGroupTable=usdBgpPeerGroupTable, usdBgpNewRouteExtendedCommunitiesPresent=usdBgpNewRouteExtendedCommunitiesPresent, usdBgpNewRouteCommunityEntry=usdBgpNewRouteCommunityEntry, usdBgpNewRouteAdvertiseToInternalPeers=usdBgpNewRouteAdvertiseToInternalPeers, usdBgpPeerInUpdateElapsedTime=usdBgpPeerInUpdateElapsedTime, usdBgpPeerOutUpdates=usdBgpPeerOutUpdates, usdBgpPeerGroupConfGroup3=usdBgpPeerGroupConfGroup3, usdBgpPeerConfGroup=usdBgpPeerConfGroup, UsdBgpSafi=UsdBgpSafi, usdBgpAddressFamilyDampeningSuppressThreshold=usdBgpAddressFamilyDampeningSuppressThreshold, usdBgpAddressFamilyConfGroup2=usdBgpAddressFamilyConfGroup2, usdBgpAfiSafiPeerConfGroup=usdBgpAfiSafiPeerConfGroup, usdBgpPeerGroupAddressFamilyAllowAsIn=usdBgpPeerGroupAddressFamilyAllowAsIn, usdBgpRouteClusterListPresent=usdBgpRouteClusterListPresent, usdBgpAggregateConfGroup2=usdBgpAggregateConfGroup2, usdBgpNewRouteCommunityNumber=usdBgpNewRouteCommunityNumber, usdBgpPeerInUpdates=usdBgpPeerInUpdates, usdBgpPeerKeepAliveInterval=usdBgpPeerKeepAliveInterval, usdBgpPathAttributeCount=usdBgpPathAttributeCount, usdBgpNewRouteSuppressedBy=usdBgpNewRouteSuppressedBy, usdBgpNetworkIpAddrPrefix=usdBgpNetworkIpAddrPrefix, usdBgpVrfOperationalState=usdBgpVrfOperationalState, usdBgpStorageMaxAddressFamilyPoolSize=usdBgpStorageMaxAddressFamilyPoolSize, usdBgpRouteOrigin=usdBgpRouteOrigin, usdBgpCompliances=usdBgpCompliances, usdBgpStorageInitialPeerGroupPoolSize=usdBgpStorageInitialPeerGroupPoolSize, usdBgpPeerLocalAsNumber=usdBgpPeerLocalAsNumber, usdBgpLocalProposedAfiSafiPeerVrfName=usdBgpLocalProposedAfiSafiPeerVrfName, usdBgpPeerAddressFamilyDistributeListIn=usdBgpPeerAddressFamilyDistributeListIn, usdBgpNewRouteValid=usdBgpNewRouteValid, usdBgpOverloadShutdown=usdBgpOverloadShutdown, usdBgpPeerGroupDescription=usdBgpPeerGroupDescription, usdBgpNewRouteAggregatorPresent=usdBgpNewRouteAggregatorPresent, usdBgpNewRouteIpAddrPrefixLen=usdBgpNewRouteIpAddrPrefixLen, usdBgpAddressFamilyAfi=usdBgpAddressFamilyAfi, usdBgpEnabled=usdBgpEnabled, usdBgpPeerRemoteAddress=usdBgpPeerRemoteAddress, usdBgpRouteMedPresent=usdBgpRouteMedPresent, usdBgpExchangedAfiSafiPeerTable=usdBgpExchangedAfiSafiPeerTable, usdBgpExchangedAfiSafiPeerSafi=usdBgpExchangedAfiSafiPeerSafi, usdBgpConfederationPeerConfGroup=usdBgpConfederationPeerConfGroup, usdBgpGlobalAsOriginationInterval=usdBgpGlobalAsOriginationInterval, usdBgpRouteValid=usdBgpRouteValid, usdBgpCompliance3=usdBgpCompliance3, usdBgpGlobalConfigHoldTime=usdBgpGlobalConfigHoldTime, usdBgpExchangedAfiSafiPeerEntry=usdBgpExchangedAfiSafiPeerEntry, usdBgpPeerRetryInterval=usdBgpPeerRetryInterval, usdBgpRouteAfi=usdBgpRouteAfi, usdBgpPeerAddressFamilyAsOverride=usdBgpPeerAddressFamilyAsOverride, usdBgpExchangedAfiSafiPeerRowStatus=usdBgpExchangedAfiSafiPeerRowStatus, usdBgpNewRouteVrfName=usdBgpNewRouteVrfName, usdBgpPeerGroupAddressFamilyNextHopSelf=usdBgpPeerGroupAddressFamilyNextHopSelf, usdBgpPeerGroupRemoteAsNumber=usdBgpPeerGroupRemoteAsNumber, usdBgpPeerGroupAddressFamilyTable=usdBgpPeerGroupAddressFamilyTable, usdBgpNewRoutePlaceInIpRouteTable=usdBgpNewRoutePlaceInIpRouteTable, usdBgpPeerMaxUpdateSize=usdBgpPeerMaxUpdateSize, usdBgpAddressFamilyOperationalState=usdBgpAddressFamilyOperationalState, usdBgpStorageInitialAggregateRoutePoolSize=usdBgpStorageInitialAggregateRoutePoolSize, usdBgpPeerGroupWeight=usdBgpPeerGroupWeight, usdBgpNewRoutePeer=usdBgpNewRoutePeer, usdBgpLocalProposedAfiSafiPeerRemoteAddr=usdBgpLocalProposedAfiSafiPeerRemoteAddr, usdBgpLocalProposedAfiSafiPeerSafi=usdBgpLocalProposedAfiSafiPeerSafi, usdBgpGlobalRetryInterval=usdBgpGlobalRetryInterval, usdBgpRouteUnknown=usdBgpRouteUnknown, usdBgpClusterId=usdBgpClusterId, usdBgpPeerAddressFamilyPrefixListIn=usdBgpPeerAddressFamilyPrefixListIn, usdBgpNetworkBackdoor=usdBgpNetworkBackdoor, usdBgpNewRouteEntry=usdBgpNewRouteEntry, usdBgpRouteASPathSegment=usdBgpRouteASPathSegment, usdBgpNewRouteConfGroup=usdBgpNewRouteConfGroup, usdBgpNewRouteAtomicAggregatePresent=usdBgpNewRouteAtomicAggregatePresent, usdBgpDefaultIPv4Unicast=usdBgpDefaultIPv4Unicast, usdBgpGeneralConfGroup=usdBgpGeneralConfGroup, usdBgpPeerGroupAddressFamilyFilterListWeight=usdBgpPeerGroupAddressFamilyFilterListWeight, usdBgpStorageMaxRouteFlapHistoryPoolSize=usdBgpStorageMaxRouteFlapHistoryPoolSize, usdBgpRouteLocalPrefPresent=usdBgpRouteLocalPrefPresent, usdBgpRouteNextHopReachable=usdBgpRouteNextHopReachable, usdBgpNewRouteUnknown=usdBgpNewRouteUnknown, usdBgpUnconfiguredAttributes=usdBgpUnconfiguredAttributes)
mibBuilder.exportSymbols("Unisphere-Data-BGP-MIB", usdBgpBaselineTime=usdBgpBaselineTime, usdBgpLocalProposedAfiSafiPeerEntry=usdBgpLocalProposedAfiSafiPeerEntry, usdBgpMIB=usdBgpMIB, usdBgpPeerAddressFamilyEntry=usdBgpPeerAddressFamilyEntry, usdBgpPeerResetConnectionType=usdBgpPeerResetConnectionType, usdBgpAggregateConfGroup=usdBgpAggregateConfGroup, usdBgpNewRouteLocalPrefPresent=usdBgpNewRouteLocalPrefPresent, usdBgpPeerAddressFamilyFilterListWeightValue=usdBgpPeerAddressFamilyFilterListWeightValue, usdBgpRouteAtomicAggregatePresent=usdBgpRouteAtomicAggregatePresent, usdBgpRouteIpAddrPrefixLen=usdBgpRouteIpAddrPrefixLen, usdBgpConfGroups=usdBgpConfGroups, usdBgpExchangedAfiSafiPeerRemoteAddr=usdBgpExchangedAfiSafiPeerRemoteAddr, usdBgpAddressFamilyDefaultOriginate=usdBgpAddressFamilyDefaultOriginate, usdBgpPeerVrfName=usdBgpPeerVrfName, usdBgpPeerAddressFamilySafi=usdBgpPeerAddressFamilySafi, usdBgpPeerLocalAddressMask=usdBgpPeerLocalAddressMask, usdBgpNewRouteCommunitiesPresent=usdBgpNewRouteCommunitiesPresent, usdBgpPeerAddressFamilyVrfName=usdBgpPeerAddressFamilyVrfName, usdBgpPeerAddressFamilyDefaultOriginate=usdBgpPeerAddressFamilyDefaultOriginate, usdBgpPeerAddressFamilyDistributeListOut=usdBgpPeerAddressFamilyDistributeListOut, usdBgpPeerGroupAddressFamilyEntry=usdBgpPeerGroupAddressFamilyEntry, usdBgpPeerAddressFamilyPrefixTreeOut=usdBgpPeerAddressFamilyPrefixTreeOut, usdBgpPeerGroupAddressFamilyUnconfiguredAttributes=usdBgpPeerGroupAddressFamilyUnconfiguredAttributes, usdBgpRouteAdvertiseToExternalPeers=usdBgpRouteAdvertiseToExternalPeers, usdBgpIdentifier=usdBgpIdentifier, usdBgpRouteExtendedCommunityNumber=usdBgpRouteExtendedCommunityNumber, usdBgpNewRouteOriginalRd=usdBgpNewRouteOriginalRd, usdBgpPeerProposedAfiSafiPeerTable=usdBgpPeerProposedAfiSafiPeerTable, usdBgpAddressFamilyVrfName=usdBgpAddressFamilyVrfName, usdBgpPeerAsOriginationInterval=usdBgpPeerAsOriginationInterval, usdBgpPeerAddressFamilyPrefixTreeIn=usdBgpPeerAddressFamilyPrefixTreeIn, usdBgpRouteFlapHistoryEntry=usdBgpRouteFlapHistoryEntry, usdBgpPeerOutTotalMessages=usdBgpPeerOutTotalMessages, usdBgpPeerGroupMaxUpdateSize=usdBgpPeerGroupMaxUpdateSize, usdBgpRouteAggregatorPresent=usdBgpRouteAggregatorPresent, usdBgpPeerConfGroup2=usdBgpPeerConfGroup2, usdBgpPeerAddressFamilyRouteReflectorClient=usdBgpPeerAddressFamilyRouteReflectorClient, usdBgpStorageInitialRouteTargetPoolSize=usdBgpStorageInitialRouteTargetPoolSize, usdBgpConfederationPeerRowStatus=usdBgpConfederationPeerRowStatus, usdBgpRouteClusterIdTable=usdBgpRouteClusterIdTable, usdBgpRouteSafi=usdBgpRouteSafi, usdBgpNewRouteAggregatorAS=usdBgpNewRouteAggregatorAS, usdBgpPeerGroupAddressFamilyRouteLimitWarnOnly=usdBgpPeerGroupAddressFamilyRouteLimitWarnOnly, usdBgpPeerGroupConfigHoldTime=usdBgpPeerGroupConfigHoldTime, usdBgpPeerGroupAddressFamilyDistributeListIn=usdBgpPeerGroupAddressFamilyDistributeListIn, usdBgpPeerGroupAddressFamilyRouteMapIn=usdBgpPeerGroupAddressFamilyRouteMapIn, usdBgpLocalAsNumber=usdBgpLocalAsNumber, usdBgpPathAttributeMemoryUsed=usdBgpPathAttributeMemoryUsed, usdBgpStorageInitialRouteFlapHistoryPoolSize=usdBgpStorageInitialRouteFlapHistoryPoolSize, usdBgpVrfConfGroup=usdBgpVrfConfGroup, usdBgpGeneralConfGroup3=usdBgpGeneralConfGroup3, usdBgpStorageMaxHistoryRoutePoolSize=usdBgpStorageMaxHistoryRoutePoolSize, usdBgpPeerAdvertisementInterval=usdBgpPeerAdvertisementInterval, usdBgpAddressFamilyDampeningRouteMapName=usdBgpAddressFamilyDampeningRouteMapName, usdBgpRouteCommunitiesPresent=usdBgpRouteCommunitiesPresent, usdBgpStorageMaxAggregateRoutePoolSize=usdBgpStorageMaxAggregateRoutePoolSize, usdBgpPeerAddressFamilyAllowAsIn=usdBgpPeerAddressFamilyAllowAsIn, usdBgpNewRouteFlapReuseThreshold=usdBgpNewRouteFlapReuseThreshold, usdBgpPeerFsmEstablishedTime=usdBgpPeerFsmEstablishedTime, usdBgpPeerLocalAddress=usdBgpPeerLocalAddress, usdBgpNewRouteASPathSegment=usdBgpNewRouteASPathSegment, usdBgpPeerState=usdBgpPeerState, usdBgpAggregateAfi=usdBgpAggregateAfi, usdBgpPeerAdminStatus=usdBgpPeerAdminStatus, usdBgpVrfTable=usdBgpVrfTable, usdBgpCompliance6=usdBgpCompliance6, usdBgpVrfAutoSummary=usdBgpVrfAutoSummary, usdBgpRouteOriginatorIdPresent=usdBgpRouteOriginatorIdPresent, usdBgpAggregateAttributeMap=usdBgpAggregateAttributeMap, usdBgpPeerLastErrorCode=usdBgpPeerLastErrorCode, usdBgpNewRouteExtendedCommunityNumber=usdBgpNewRouteExtendedCommunityNumber, usdBgpNetworkEntry=usdBgpNetworkEntry, usdBgpPeerSupportsCapabilityNegotiation=usdBgpPeerSupportsCapabilityNegotiation, usdBgpInternalAdvertisementInterval=usdBgpInternalAdvertisementInterval, usdBgpAggregateEntry=usdBgpAggregateEntry, usdBgpPeerAddressFamilyFilterListOut=usdBgpPeerAddressFamilyFilterListOut, usdBgpNewRouteFlapRemainingTime=usdBgpNewRouteFlapRemainingTime, usdBgpStorageInitialPeerGroupAfPoolSize=usdBgpStorageInitialPeerGroupAfPoolSize, usdBgpRouteTable=usdBgpRouteTable, usdBgpRouteFlapHistoryTable=usdBgpRouteFlapHistoryTable, usdBgpStatisticsConfGroup=usdBgpStatisticsConfGroup, usdBgpObjects=usdBgpObjects, usdBgpPeerGroupAddressFamilyConfGroup2=usdBgpPeerGroupAddressFamilyConfGroup2, usdBgpPeerGroupRowStatus=usdBgpPeerGroupRowStatus, usdBgpPeerGroupAdvertisementInterval=usdBgpPeerGroupAdvertisementInterval, usdBgpNewRouteClusterIdEntry=usdBgpNewRouteClusterIdEntry, usdBgpNewRouteNextHopMetric=usdBgpNewRouteNextHopMetric, usdBgpRouteExtendedCommunityTable=usdBgpRouteExtendedCommunityTable, usdBgpConfederationPeerTable=usdBgpConfederationPeerTable, usdBgpPeerLocalPort=usdBgpPeerLocalPort, usdBgpStorageMaxPeerGroupPoolSize=usdBgpStorageMaxPeerGroupPoolSize, usdBgpPeerGroupAddressFamilyInboundSoftReconfig=usdBgpPeerGroupAddressFamilyInboundSoftReconfig, usdBgpRouteTableStatisticsGroup=usdBgpRouteTableStatisticsGroup, usdBgpAddressFamilyEntry=usdBgpAddressFamilyEntry, usdBgpStorageInitialAutoSummaryRoutePoolSize=usdBgpStorageInitialAutoSummaryRoutePoolSize, usdBgpPeerAddressFamilyTable=usdBgpPeerAddressFamilyTable, usdBgpPeerAddressFamilyConfGroup2=usdBgpPeerAddressFamilyConfGroup2, usdBgpPeerRowStatus=usdBgpPeerRowStatus, usdBgpPeerGroupAddressFamilyAsOverride=usdBgpPeerGroupAddressFamilyAsOverride, usdBgpPeerGroupAddressFamilyPrefixTreeOut=usdBgpPeerGroupAddressFamilyPrefixTreeOut, usdBgpClientToClientReflection=usdBgpClientToClientReflection, usdBgpPeerAddressFamilyAfi=usdBgpPeerAddressFamilyAfi, UsdBgpStorageInteger=UsdBgpStorageInteger, usdBgpNewRouteExtendedCommunityTable=usdBgpNewRouteExtendedCommunityTable, usdBgpPeerInTotalMessages=usdBgpPeerInTotalMessages, usdBgpPeerAddressFamilyUnconfiguredAttributes=usdBgpPeerAddressFamilyUnconfiguredAttributes, usdBgpNetworkRowStatus=usdBgpNetworkRowStatus, usdBgpNewRouteFlapState=usdBgpNewRouteFlapState, usdBgpNewRouteFlapSuppressThreshold=usdBgpNewRouteFlapSuppressThreshold, usdBgpRouteCommunityNumber=usdBgpRouteCommunityNumber, usdBgpPeerCapabilityRouteRefreshCiscoProprietary=usdBgpPeerCapabilityRouteRefreshCiscoProprietary, usdBgpRouteAdvertiseToInternalPeers=usdBgpRouteAdvertiseToInternalPeers, usdBgpPeerGroupAddressFamilyRouteReflectorClient=usdBgpPeerGroupAddressFamilyRouteReflectorClient, usdBgpAggregateIpAddrPrefix=usdBgpAggregateIpAddrPrefix, usdBgpNewRouteFlapFigureOfMerit=usdBgpNewRouteFlapFigureOfMerit, usdBgpNewRouteClusterIdTable=usdBgpNewRouteClusterIdTable, usdBgpAggregateSummaryOnly=usdBgpAggregateSummaryOnly, usdBgpStorageMaxAttributesPoolSize=usdBgpStorageMaxAttributesPoolSize, usdBgpNewRouteOriginatorIdPresent=usdBgpNewRouteOriginatorIdPresent, usdBgpNewRouteExtendedCommunityEntry=usdBgpNewRouteExtendedCommunityEntry, usdBgpPeerType=usdBgpPeerType, usdBgpPeerGroupResetConnectionType=usdBgpPeerGroupResetConnectionType, usdBgpRouteNextHopMetric=usdBgpRouteNextHopMetric, usdBgpNewRouteFlapHalfLifeUnreachable=usdBgpNewRouteFlapHalfLifeUnreachable, usdBgpStorageInitialAggregatePoolSize=usdBgpStorageInitialAggregatePoolSize, usdBgpPeerGroupAddressFamilyConfGroup=usdBgpPeerGroupAddressFamilyConfGroup, usdBgpPeerAddressFamilyConfGroup=usdBgpPeerAddressFamilyConfGroup, usdBgpRouteOriginatorId=usdBgpRouteOriginatorId, usdBgpStorageInitialVpnRoutePoolSize=usdBgpStorageInitialVpnRoutePoolSize, usdBgpNetworkUnconfiguredAttributes=usdBgpNetworkUnconfiguredAttributes, usdBgpStorageMaxHeapSize=usdBgpStorageMaxHeapSize, usdBgpStorageInitialNetworkPoolSize=usdBgpStorageInitialNetworkPoolSize, usdBgpRouteFlapFigureOfMerit=usdBgpRouteFlapFigureOfMerit, usdBgpPeerAddressFamilyRouteMapIn=usdBgpPeerAddressFamilyRouteMapIn, usdBgpAggregateAsSet=usdBgpAggregateAsSet, usdBgpGlobalConfigKeepAliveInterval=usdBgpGlobalConfigKeepAliveInterval, usdBgpFastExternalFallover=usdBgpFastExternalFallover, usdBgpPeerEntry=usdBgpPeerEntry, usdBgpCompliance4=usdBgpCompliance4, usdBgpNewRouteDistinguisher=usdBgpNewRouteDistinguisher, usdBgpRouteBestInIpRouteTable=usdBgpRouteBestInIpRouteTable, usdBgpPeerGroupEbgpMultihop=usdBgpPeerGroupEbgpMultihop, usdBgpPeerGroupAddressFamilyResetConnectionType=usdBgpPeerGroupAddressFamilyResetConnectionType, usdBgpDefaultLocalPreference=usdBgpDefaultLocalPreference, usdBgpStorageInitialPeerPoolSize=usdBgpStorageInitialPeerPoolSize, usdBgpAddressFamilyDampeningReuseThreshold=usdBgpAddressFamilyDampeningReuseThreshold, usdBgpPeerGroupLocalAsNumber=usdBgpPeerGroupLocalAsNumber, usdBgpStorageMaxRouteTargetPoolSize=usdBgpStorageMaxRouteTargetPoolSize, usdBgpPeerGroupEbgpMultihopTtl=usdBgpPeerGroupEbgpMultihopTtl, usdBgpNewRouteCommunityTable=usdBgpNewRouteCommunityTable, usdBgpLocalProposedAfiSafiPeerTable=usdBgpLocalProposedAfiSafiPeerTable, usdBgpNewRouteClusterListPresent=usdBgpNewRouteClusterListPresent, usdBgpPeerGroupAddressFamilyFilterListIn=usdBgpPeerGroupAddressFamilyFilterListIn, usdBgpDestinationCount=usdBgpDestinationCount, usdBgpNewRouteIpAddrPrefix=usdBgpNewRouteIpAddrPrefix, usdBgpStorageGroup=usdBgpStorageGroup, usdBgpStorageMaxNetworkRoutePoolSize=usdBgpStorageMaxNetworkRoutePoolSize, usdBgpExchangedAfiSafiPeerVrfName=usdBgpExchangedAfiSafiPeerVrfName, usdBgpSelectedRouteCount=usdBgpSelectedRouteCount, usdBgpRouteClusterId=usdBgpRouteClusterId, usdBgpVrfLocalDistance=usdBgpVrfLocalDistance, usdBgpPeerRemotePort=usdBgpPeerRemotePort, usdBgpPeerGroupEntry=usdBgpPeerGroupEntry, usdBgpRouteFlapReuseThreshold=usdBgpRouteFlapReuseThreshold, usdBgpNewRouteTable=usdBgpNewRouteTable, usdBgpVrfUnconfiguredAttributes=usdBgpVrfUnconfiguredAttributes, PYSNMP_MODULE_ID=usdBgpMIB, usdBgpStorageMaxAggregatePoolSize=usdBgpStorageMaxAggregatePoolSize, usdBgpPeerGroupRetryInterval=usdBgpPeerGroupRetryInterval, usdBgpRouteMplsLabel=usdBgpRouteMplsLabel, usdBgpConfederationPeerAsNumber=usdBgpConfederationPeerAsNumber, usdBgpPeerGroupConfGroup2=usdBgpPeerGroupConfGroup2, usdBgpGeneralGroup=usdBgpGeneralGroup, usdBgpPeerGroupGroupAddressFamilyGroupName=usdBgpPeerGroupGroupAddressFamilyGroupName, usdBgpNewRouteMedPresent=usdBgpNewRouteMedPresent, usdBgpLocalProposedAfiSafiPeerRowStatus=usdBgpLocalProposedAfiSafiPeerRowStatus, usdBgpRouteFlapHalfLifeReachable=usdBgpRouteFlapHalfLifeReachable, usdBgpAutomaticRouteTargetFilter=usdBgpAutomaticRouteTargetFilter, usdBgpStorageMaxPeerPoolSize=usdBgpStorageMaxPeerPoolSize, usdBgpPeerAddressFamilyUnsuppressMap=usdBgpPeerAddressFamilyUnsuppressMap, usdBgpPeerGroupAddressFamilySendCommunity=usdBgpPeerGroupAddressFamilySendCommunity, usdBgpRouteConfGroup=usdBgpRouteConfGroup, usdBgpRoutePlaceInIpRouteTable=usdBgpRoutePlaceInIpRouteTable, usdBgpRouteNextHop=usdBgpRouteNextHop, usdBgpRouteSynchronizedWithIgp=usdBgpRouteSynchronizedWithIgp, usdBgpPeerGroupUnconfiguredAttributes=usdBgpPeerGroupUnconfiguredAttributes, usdBgpNewRouteOrigin=usdBgpNewRouteOrigin, usdBgpNetworkTable=usdBgpNetworkTable, usdBgpNewRouteFlapMaxHoldDownTime=usdBgpNewRouteFlapMaxHoldDownTime, usdBgpVrfSynchronization=usdBgpVrfSynchronization, usdBgpVrfConfGroup2=usdBgpVrfConfGroup2, usdBgpPeerGroupConfGroup=usdBgpPeerGroupConfGroup, usdBgpStorageInitialDestinationPoolSize=usdBgpStorageInitialDestinationPoolSize, usdBgpAddressFamilyResetConnectionType=usdBgpAddressFamilyResetConnectionType, usdBgpPeerConfigHoldTime=usdBgpPeerConfigHoldTime, usdBgpNetworkAfi=usdBgpNetworkAfi, usdBgpNewRouteAtomicAggregate=usdBgpNewRouteAtomicAggregate, usdBgpNewRouteFlapHistoryEntry=usdBgpNewRouteFlapHistoryEntry, usdBgpPeerCapabilityRouteRefresh=usdBgpPeerCapabilityRouteRefresh, usdBgpConformance=usdBgpConformance, usdBgpPeerAddressFamilyRouteLimitWarn=usdBgpPeerAddressFamilyRouteLimitWarn, usdBgpPeerConfigKeepAliveInterval=usdBgpPeerConfigKeepAliveInterval, usdBgpPeerGroupAddressFamilyPrefixTreeIn=usdBgpPeerGroupAddressFamilyPrefixTreeIn, usdBgpPeerGroupAddressFamilyFilterListWeightValue=usdBgpPeerGroupAddressFamilyFilterListWeightValue, usdBgpPeerFsmEstablishedTransitions=usdBgpPeerFsmEstablishedTransitions, usdBgpRouteRouteType=usdBgpRouteRouteType, usdBgpPeerAddressFamilyRouteMapOut=usdBgpPeerAddressFamilyRouteMapOut, usdBgpPeerGroupVrfName=usdBgpPeerGroupVrfName, usdBgpPeerAddressFamilyInboundSoftReconfig=usdBgpPeerAddressFamilyInboundSoftReconfig, usdBgpVrfInternalDistance=usdBgpVrfInternalDistance, usdBgpPeerGroupAddressFamilyRouteLimitReset=usdBgpPeerGroupAddressFamilyRouteLimitReset, usdBgpStorageMaxSendQueueEntryPoolSize=usdBgpStorageMaxSendQueueEntryPoolSize, usdBgpGeneralConfGroup2=usdBgpGeneralConfGroup2)
