#
# PySNMP MIB module WWP-LEOS-VPLS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/WWP-LEOS-VPLS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:38:12 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, Counter64, Gauge32, iso, ModuleIdentity, Integer32, IpAddress, NotificationType, ObjectIdentity, MibIdentifier, TimeTicks, Counter32, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter64", "Gauge32", "iso", "ModuleIdentity", "Integer32", "IpAddress", "NotificationType", "ObjectIdentity", "MibIdentifier", "TimeTicks", "Counter32", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TextualConvention, TruthValue, RowStatus, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "TruthValue", "RowStatus", "MacAddress")
wwpModulesLeos, = mibBuilder.importSymbols("WWP-SMI", "wwpModulesLeos")
wwpLeosVplsMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28))
wwpLeosVplsMIB.setRevisions(('2011-06-06 00:00', '2010-03-23 17:00', '2010-02-10 17:00', '2010-01-27 04:25', '2009-08-24 04:24', '2008-11-14 00:00', '2008-09-03 08:39', '2008-06-11 00:50', '2008-05-15 00:50', '2006-09-22 00:50', '2006-05-04 17:00', '2005-08-15 17:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: wwpLeosVplsMIB.setRevisionsDescriptions((' changed the range for wwpLeosVplsVirtualSwitchEthEvplMemberVlan to (0..4095).', 'Added port-inherit(6) option to wwpLeosVplsVirtualSwitchMplsMemberEncapCosPolicy and wwpLeosVplsVirtualSwitchMplsEvplMemberEncapCosPolicy.', 'Added wwpLeosVplsVirtualSwitchEthL2CftProtocolTable', 'Added wwpLeosVplsVirtualCircuitStatsClear under wwpLeosVplsGlobalAttrs. Added wwpLeosVirtualCircuitEthStatsClear under wwpLeosVplsVirtualCircuitEthStatsEntry table.', 'Added port-inherit(6) option to wwpLeosVplsEthVirtualSwitchMemberEncapPolicy of wwpLeosVplsEthVirtualSwitchMemberEntry table', 'Added virtual-switch member settings for EncpCosPolicy, EncapCosFixedDot1DPri and SubscriberDot1dPri for each variation of the Ethernet and MPLS virtual-switch types.', 'Added Honor Priority setting to select between c-vlan or s-vlan priorities.', 'Added VS CFT support.', 'This MIB module defines the managed objects for the VPLS feature for LEOS based WWP products.', 'Added wwpLeosVplsVirtualSwitchEtypeTranslationTable to remap default Ethertype to alternate values (for NTL services).', 'Modified wwpLeosVplsEncapTunnelTable to support primary / backup tunnels.', 'Initial creation.',))
if mibBuilder.loadTexts: wwpLeosVplsMIB.setLastUpdated('201106060000Z')
if mibBuilder.loadTexts: wwpLeosVplsMIB.setOrganization('Ciena, Inc')
if mibBuilder.loadTexts: wwpLeosVplsMIB.setContactInfo(' Mib Meister 115 North Sullivan Road Spokane Valley, WA 99037 USA Phone: +1 509 242 9000 Email: support@ciena.com')
if mibBuilder.loadTexts: wwpLeosVplsMIB.setDescription('Added a new object wwpLeosVplsVirtualSwitchEthEvplMemberServiceVlanTpid.')
class VlanId(TextualConvention, Integer32):
    description = 'A Vlan Id represents a Broadcast Domain.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 24576)

class EtherType(TextualConvention, Integer32):
    description = 'Ethernet v2 framing identifies upper layer protocol.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(2048, 65535)

wwpLeosVplsMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1))
wwpLeosVpls = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1))
wwpLeosVplsMIBNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 2))
wwpLeosVplsMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 2, 0))
wwpLeosVplsMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 3))
wwpLeosVplsMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 3, 1))
wwpLeosVplsMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 3, 2))
wwpLeosVplsVirtualCircuitTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 1), )
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitTable.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitTable.setDescription('The (conceptual) table listing the virtual circuit table. To create entry use SNMP, multiple set operation must be used because following MIB objects needs to be set while creating entry in the table. - wwpLeosVplsVirtualCircuitIndex - wwpLeosVplsVirtualCircuitProviderVlanId (should exist on the device) - wwpLeosVplsVirtualCircuitType - wwpLeosVplsVirtualCircuitStatus. - wwpLeosVplsVirtualCircuitName. ')
wwpLeosVplsVirtualCircuitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 1, 1), ).setIndexNames((0, "WWP-LEOS-VPLS-MIB", "wwpLeosVplsVirtualCircuitIndex"))
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitEntry.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitEntry.setDescription('The virtual circuit table entry index by wwpLeosVplsVirtualCircuitIndex.')
wwpLeosVplsVirtualCircuitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitIndex.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitIndex.setDescription('This represents the virtual circuit index in the table. This number should be unique in the table.')
wwpLeosVplsVirtualCircuitProviderVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 1, 1, 2), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitProviderVlanId.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitProviderVlanId.setDescription('This represents the provider vlan id associated with the virtual circuit for a given wwpLeosVplsVirtualCircuitIndex.')
wwpLeosVplsVirtualCircuitType = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ethernet", 1), ("mpls", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitType.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitType.setDescription('This represents the type of virtual circuit associated with the given virtual circuit.')
wwpLeosVplsVirtualCircuitName = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitName.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitName.setDescription('This represents the name of the virtual circuit associated with the given virtual circuit.')
wwpLeosVplsVirtualCircuitIngressVcLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 1048575))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitIngressVcLabel.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitIngressVcLabel.setDescription('This represents the vc label to be used for given virtual circuit. This mib object can only be set for virtual circuit entries which has wwpLeosCircuitType = mpls.')
wwpLeosVplsVirtualCircuitEgressVcLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 1048575))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitEgressVcLabel.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitEgressVcLabel.setDescription('This represents the vc label to be used for given virtual circuit. This mib object can only be set for virtual circuit entries which has wwpLeosCircuitType = mpls.')
wwpLeosVplsVirtualCircuitTunnelIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitTunnelIndx.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitTunnelIndx.setDescription('This represents the tunnel associated with this virtual circuit. This mib object can only be set for virtual circuit entries which has wwpLeosCircuitType = mpls.')
wwpLeosVplsVirtualCircuitStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 1, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitStatus.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitStatus.setDescription("Setting this object to 'createAndGo' will create the entry and by default will enable control frame and data frame tunnel . Setting this object to 'destroy' will delete the entry from the table for given vlan.")
wwpLeosVplsVirtualSwitchTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 5), )
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchTable.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchTable.setDescription('This table is used to manage virtual switch entries on the device.')
wwpLeosVplsVirtualSwitchEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 5, 1), ).setIndexNames((0, "WWP-LEOS-VPLS-MIB", "wwpLeosVplsVirtualSwitchIndx"))
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEntry.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEntry.setDescription('This entry corresponds to single entry in wwpLeosVplsVirtualSwitchTable table. To create an entry in the table following criteria must be met. - wwpLeosVplsVirtualSwitchIndx must be specified. - wwpLeosVplsVirtualSwitchStatus must be specified. - wwpLeosVplsVirtualSwitchType must be specified. - wwpLeosVplsVirtualSwitchName must be specified')
wwpLeosVplsVirtualSwitchIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchIndx.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchIndx.setDescription('This object specifies the virtual switch index which is used as unique index in the table.')
wwpLeosVplsVirtualSwitchName = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 5, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchName.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchName.setDescription('This object specifies the virtual switch name. this object can only be specified at the time of creation and cannot be modified later.')
wwpLeosVplsVirtualSwitchPriVc = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchPriVc.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchPriVc.setDescription('This object specifies the primary virtual circuit ID associated with this virtual switch. To unset it set this to 0.')
wwpLeosVplsVirtualSwitchSecVc = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchSecVc.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchSecVc.setDescription('This object specifies the secondary virtual circuit ID associated with this virtual switch. To unset it set this to 0. This object is applicable if wwpLeosVplsVirtualSwitchType = mpls.')
wwpLeosVplsVirtualSwitchActiveVc = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("primVc", 2), ("secVc", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchActiveVc.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchActiveVc.setDescription('This object specifies the virtual circuit which is currently used by this virtual switch instance.')
wwpLeosVplsVirtualSwitchEncapCosPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("fixed", 1), ("inheritDot1dPri", 2), ("inheritIpPrec", 3), ("inheritPhbg", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEncapCosPolicy.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEncapCosPolicy.setDescription('This object specifies the ingress cos policy for given virtual switch.')
wwpLeosVplsVirtualSwitchEncapFixedDot1dPri = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEncapFixedDot1dPri.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEncapFixedDot1dPri.setDescription('This object specifies the ingress fixed cos attributes for given virtual switch.')
wwpLeosVplsVirtualSwitchDecapCosPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("fixed", 1), ("inheritVc", 2), ("inheritTunnel", 3), ("leave", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchDecapCosPolicy.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchDecapCosPolicy.setDescription('This object specifies the egress cos policy for given virtual switch.')
wwpLeosVplsVirtualSwitchDecapFixedDot1dPri = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 5, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchDecapFixedDot1dPri.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchDecapFixedDot1dPri.setDescription('This object specifies the egress cos attributes for given virtual switch.')
wwpLeosVplsVirtualSwitchSubscriberVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 5, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchSubscriberVlan.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchSubscriberVlan.setDescription('This object specifies the subscriber vlan Id for given virtual switch.')
wwpLeosVplsVirtualSwitchCtrlProtocolTunnelState = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 5, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchCtrlProtocolTunnelState.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchCtrlProtocolTunnelState.setDescription('This object enables or disables control protocol tunneling for a given virtual switch.')
wwpLeosVplsVirtualSwitchType = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 5, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ethernet", 1), ("mpls", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchType.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchType.setDescription('This object specifies the type of virtual witch.')
wwpLeosVplsVirtualSwitchStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 5, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchStatus.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchStatus.setDescription("This object can be set to 'createAndGo' to create entry in the table. This object can be set to 'destroy' to delete entry in the table. Following objects must be set to valid values to create entry in the table.")
wwpLeosVplsVirtualSwitchMemberTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 6), )
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchMemberTable.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchMemberTable.setDescription('This table is used to create virtual switch membership entry.')
wwpLeosVplsVirtualSwitchMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 6, 1), ).setIndexNames((0, "WWP-LEOS-VPLS-MIB", "wwpLeosVplsVirtualSwitchIndx"), (0, "WWP-LEOS-VPLS-MIB", "wwpLeosVplsVirtualSwitchMemberPortId"))
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchMemberEntry.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchMemberEntry.setDescription('This entry corresponds to single entry in wwpLeosVplsVirtualSwitchMemberTable table.')
wwpLeosVplsVirtualSwitchMemberPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchMemberPortId.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchMemberPortId.setDescription('This object specifies the port id associated with wwpLeosVplsVirtualSwitchIndx.')
wwpLeosVplsVirtualSwitchMemberStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 6, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchMemberStatus.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchMemberStatus.setDescription("This object can be set to 'createandgo' to add entry in the table. This object can be set to 'destroy' to delete entry in the table. Refer to description of table entry to see how to create entries in the table.")
wwpLeosVplsSwitchCtrlProtocolTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 7), )
if mibBuilder.loadTexts: wwpLeosVplsSwitchCtrlProtocolTable.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosVplsSwitchCtrlProtocolTable.setDescription('The (conceptual) table listing the l2 virtual switch control frame protocol status tunnel for a given Vpls.')
wwpLeosVplsSwitchCtrlProtocolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 7, 1), ).setIndexNames((0, "WWP-LEOS-VPLS-MIB", "wwpLeosVplsVirtualSwitchIndx"), (0, "WWP-LEOS-VPLS-MIB", "wwpLeosVplsSwitchCtrlProtocolNum"))
if mibBuilder.loadTexts: wwpLeosVplsSwitchCtrlProtocolEntry.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosVplsSwitchCtrlProtocolEntry.setDescription('The layer 2 virtual switch control frame protocol tunnel entry for the Vpls.')
wwpLeosVplsSwitchCtrlProtocolNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("l28021x", 1), ("rstp", 2), ("ciscoCdp", 3), ("ciscoDtp", 4), ("ciscoPagp", 5), ("ciscoPvst", 6), ("ciscoUplinkFast", 7), ("ciscoUdlp", 8), ("ciscoVtp", 9), ("gvrp", 10), ("lacp", 11), ("lacpMarker", 12), ("oam", 13), ("lldp", 14), ("vlanBridge", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosVplsSwitchCtrlProtocolNum.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosVplsSwitchCtrlProtocolNum.setDescription('This object represent the list of protocols the device can support.')
wwpLeosVplsSwitchCtrlType = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("discard", 1), ("peer", 2), ("tunnel", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosVplsSwitchCtrlType.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosVplsSwitchCtrlType.setDescription("Setting this object to 'discard' will cause wwpLeosVplsSwitchCtrlProtocolNum frames arriving at the specified UNI to be discarded. Setting this to 'peer' will cause the wwpLeosVplsSwitchCtrlProtocolNum frame to be processed by the provider network and cause the provider network to behave as a peer. Setting this to 'tunnel' will cause the wwpLeosVplsSwitchCtrlProtocolNum frame to be tunneled.")
wwpLeosVplsSwitchReservedVlanTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 8), )
if mibBuilder.loadTexts: wwpLeosVplsSwitchReservedVlanTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsSwitchReservedVlanTable.setDescription('The (conceptual) table listing the reserved Vlans used for virtual switch.')
wwpLeosVplsSwitchReservedVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 8, 1), ).setIndexNames((0, "WWP-LEOS-VPLS-MIB", "wwpLeosVplsSwitchReservedVlanId"))
if mibBuilder.loadTexts: wwpLeosVplsSwitchReservedVlanEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsSwitchReservedVlanEntry.setDescription('The entry to reserve vlans for vlan switch.')
wwpLeosVplsSwitchReservedVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24576))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosVplsSwitchReservedVlanId.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsSwitchReservedVlanId.setDescription('This object is used to specify the vlan ID to be reserved for virtual switch. Reserved vlans are used when virtual switch is created.')
wwpLeosVplsSwitchReservedVlanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 8, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosVplsSwitchReservedVlanStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsSwitchReservedVlanStatus.setDescription("Setting this object to 'createandgo' will reserve the vlan for virtual switch. Setting this object to 'destroy will no longer be reserved for virtual switch.")
wwpLeosVplsGlobalAttrs = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 9))
wwpLeosVplsTunnelFixedTTL = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 9, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 255)).clone(255)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosVplsTunnelFixedTTL.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsTunnelFixedTTL.setDescription('This object specifies the fixed TTL value for all tunnels.')
wwpLeosVplsResolverTimeout = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 9, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 255)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosVplsResolverTimeout.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsResolverTimeout.setDescription('Setting this object will set the PE resolver timeout. This timeout value decides how frequently PE resolver will arp for the destination IP specified by wwpLeosVplsEncapTunnelDestAddr.')
wwpLeosVplsStaticLabelRangeStart = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 9, 3), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(16, 1048575), )).clone(1024)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosVplsStaticLabelRangeStart.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsStaticLabelRangeStart.setDescription('Setting this object will set the lowest label that can be assigned to static encap / decap tunnels or virtual circuits. Multiple set operation can be used to set both wwpLeosVplsStaticLabelRangeStart and wwpLeosVplsStaticLabelRangeEnd. wwpLeosVplsStaticLabelRangeStart must always be less than wwpLeosVplsStaticLabelRangeEnd. The value of 0 means label range is not available. Attempting to set this object to 0 will return COMMIT FAILED.')
wwpLeosVplsStaticLabelRangeEnd = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 9, 4), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(16, 1048575), )).clone(2047)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosVplsStaticLabelRangeEnd.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsStaticLabelRangeEnd.setDescription('Setting this object will set the maximum label that can be assigned to static encap / decap tunnels or virtual circuits. Multiple set operation can be used to set both wwpLeosVplsStaticLabelRangeStart and wwpLeosVplsStaticLabelRangeEnd. wwpLeosVplsStaticLabelRangeStart must always be less than wwpLeosVplsStaticLabelRangeEnd.The value of 0 means label range is not available. Attempting to set this object to 0 will return COMMIT FAILED.')
wwpLeosVplsDynamicLabelRangeStart = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 9, 5), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(16, 1048575), )).clone(2048)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosVplsDynamicLabelRangeStart.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsDynamicLabelRangeStart.setDescription('Setting this object will set the lowest label that can be assigned to dynamic encap / decap tunnels or virtual circuits. Multiple set operation can be used to set both wwpLeosVplsDynamicLabelRangeStart and wwpLeosVplsDynamicLabelRangeEnd. wwpLeosVplsDynamicLabelRangeStart must always be less than wwpLeosVplsDynamicLabelRangeEnd.The value of 0 means label range is not available. Attempting to set this object to 0 will return COMMIT FAILED.')
wwpLeosVplsDynamicLabelRangeEnd = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 9, 6), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(16, 1048575), )).clone(1048575)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosVplsDynamicLabelRangeEnd.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsDynamicLabelRangeEnd.setDescription('Setting this object will set the maximum label that will be assigned to encap tunnels or virtual circuits. Multiple set operation can be used to set both wwpLeosVplsDynamicLabelRangeStart and wwpLeosVplsDynamicLabelRangeEnd. wwpLeosVplsDynamicLabelRangeStart must always be less than wwpLeosVplsDynamicLabelRangeEnd. The value of 0 means label range is not available. Attempting to set this object to 0 will return COMMIT FAILED.')
wwpLeosVplsVirtualCircuitStatsClear = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 9, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear", 1), ("none", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitStatsClear.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitStatsClear.setDescription('Setting this object to clear will reset statistics for all virtual circuits')
wwpLeosVplsMplsPathTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 10), )
if mibBuilder.loadTexts: wwpLeosVplsMplsPathTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsMplsPathTable.setDescription('Mpls Path table used to represent the explicit path for RSVP tunnels.')
wwpLeosVplsMplsPathEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 10, 1), ).setIndexNames((0, "WWP-LEOS-VPLS-MIB", "wwpLeosVplsMplsPathIndex"))
if mibBuilder.loadTexts: wwpLeosVplsMplsPathEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsMplsPathEntry.setDescription('Entry in the MPLS Path table.')
wwpLeosVplsMplsPathIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosVplsMplsPathIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsMplsPathIndex.setDescription('This mib specifies the unique entry in the Mpls path table. This is the primary index into this table identifying a particular explicit route object')
wwpLeosVplsMplsPathName = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 10, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosVplsMplsPathName.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsMplsPathName.setDescription('This mib specifies the name for the path.')
wwpLeosVplsMplsPathRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 10, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosVplsMplsPathRowStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsMplsPathRowStatus.setDescription("Used to manage the creation and deletion of the conceptual rows in this table. To create a row in this table, a manager must set this object to 'createAndGo'. To delete a row in this table, a manager must set this object to 'destroy'. If the entry exists, it will be displayed as 'active'.")
wwpLeosVplsMplsPathMemberTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 11), )
if mibBuilder.loadTexts: wwpLeosVplsMplsPathMemberTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsMplsPathMemberTable.setDescription('Table specifies the list of IP addresses (Hops) to get to the destination PE.')
wwpLeosVplsMplsPathMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 11, 1), ).setIndexNames((0, "WWP-LEOS-VPLS-MIB", "wwpLeosVplsMplsPathIndex"), (0, "WWP-LEOS-VPLS-MIB", "wwpLeosVplsMplsPathOptionIndex"), (0, "WWP-LEOS-VPLS-MIB", "wwpLeosVplsMplsPathMemberIpIndex"))
if mibBuilder.loadTexts: wwpLeosVplsMplsPathMemberEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsMplsPathMemberEntry.setDescription('Represents the entry in the table.')
wwpLeosVplsMplsPathOptionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosVplsMplsPathOptionIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsMplsPathOptionIndex.setDescription('Secondary index into this table identifying a particular group of hops representing a particular configured path. This is otherwise known as a path option.')
wwpLeosVplsMplsPathMemberIpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 11, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosVplsMplsPathMemberIpIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsMplsPathMemberIpIndex.setDescription('Unique index to identify the IP address within the path specifies by wwpLeosVplsMplsPathIndex.')
wwpLeosVplsMplsPathMemberIp = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 11, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosVplsMplsPathMemberIp.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsMplsPathMemberIp.setDescription('Specifies the IP address of the Hop that the tunnel the tunnel should traverse.')
wwpLeosVplsMplsPathMemberRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 11, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosVplsMplsPathMemberRowStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsMplsPathMemberRowStatus.setDescription("Used to manage the creation and deletion of the conceptual rows in this table. To create a row in this table, a manager must set this object to 'createAndGo'. To delete a row in this table, a manager must set this object to 'destroy'. If the entry exists, it will be displayed as 'active'.")
wwpLeosVplsRsvpAttrTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 12), )
if mibBuilder.loadTexts: wwpLeosVplsRsvpAttrTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsRsvpAttrTable.setDescription('RSVP Attr Table used by MPLS wwpLeosVplsEncapTunnelTable Tunnels when wwpLeosVplsEncapTunnelProtType = rsvp. Whenever entry is created in the wwpLeosVplsEncapTunnelTable table with wwpLeosVplsEncapTunnelProtType = rsvp and wwpLeosVplsEncapTunnelType = dynamic then corresponding entry will be created in this table with the same index as wwpLeosVplsEncapTunnelId.')
wwpLeosVplsRsvpAttrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 12, 1), ).setIndexNames((0, "WWP-LEOS-VPLS-MIB", "wwpLeosVplsRsvpAttrIndex"))
if mibBuilder.loadTexts: wwpLeosVplsRsvpAttrEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsRsvpAttrEntry.setDescription('Entry in wwpLeosVplsRsvpAttrTable table.')
wwpLeosVplsRsvpAttrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosVplsRsvpAttrIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsRsvpAttrIndex.setDescription('Unique index into the table.')
wwpLeosVplsRsvpAttrHoldPri = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 12, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosVplsRsvpAttrHoldPri.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsRsvpAttrHoldPri.setDescription('The Hold priority used by RSVP protocol when signaling for tunnels.')
wwpLeosVplsRsvpAttrSetupPri = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 12, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosVplsRsvpAttrSetupPri.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsRsvpAttrSetupPri.setDescription('The setup priority used by RSVP protocol when signaling for tunnels.')
wwpLeosVplsRsvpAttrRecordRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 12, 1, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosVplsRsvpAttrRecordRoute.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsRsvpAttrRecordRoute.setDescription('The object specifies if record route feature is enabled when RSVP protocol is used to signal tunnel LSP.')
wwpLeosVplsEncapTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 13), )
if mibBuilder.loadTexts: wwpLeosVplsEncapTunnelTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsEncapTunnelTable.setDescription('This table represents the encap tunnels for VPLS. To create STATIC encap tunnel following objects must be set Encap and Decap Tunnel name cannot be same but indexes can be wwpLeosVplsEncapTunnelName must be specified. wwpLeosVplsEncapTunnelEncapLabel must be specified (0, 32..1023) wwpLeosVplsEncapTunnelType must be set to static wwpLeosVplsEncapTunnelRowStatus must be set to createAndGo To create DYNAMIC encap tunnel following objects must be set wwpLeosVplsEncapTunnelName must be specified wwpLeosVplsEncapTunnelType must be set to dynamic wwpLeosVplsEncapTunnelProtType must be set to rsvp wwpLeosVplsEncapTunnelPathName must be specified, this path must exist in wwpLeosVplsMplsPathTable wwpLeosVplsEncapTunnelRowStatus must be set to createAndGo. wwpLeosVplsEncapTunnelFastReroute must be set if wanted to use fast reroute wwpLeosVplsEncapTunnelLspType must be specified, if not specified then it will be assumed primary To create DYNAMIC encap backup tunnel following objects must be set wwpLeosVplsEncapTunnelName must be set to primary tunnel name that this tunnel is backing up. wwpLeosVplsEncapTunnelType must be set to dynamic wwpLeosVplsEncapTunnelProtType must be set to rsvp wwpLeosVplsEncapTunnelPathName must be specified, this path must exist in wwpLeosVplsMplsPathTable wwpLeosVplsEncapTunnelRowStatus must be set to createAndGo. To create static PBT encap tunnel following objects must be set wwpLeosVplsEncapTunnelName must be specified wwpLeosVplsEncapTunnelType must be set to staticPbt wwpLeosVplsEncapTunnelBVID must be specified wwpLeosVplsEncapTunnelRowStatus must be set to createAndGo. wwpLeosVplsEncapTunnelDestBridgeIndex must be set wwpLeosVplsEncapTunnelEgressPort must be specified')
wwpLeosVplsEncapTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 13, 1), ).setIndexNames((0, "WWP-LEOS-VPLS-MIB", "wwpLeosVplsEncapTunnelId"))
if mibBuilder.loadTexts: wwpLeosVplsEncapTunnelEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsEncapTunnelEntry.setDescription('Represents each entry in wwpLeosVplsEncapTunnelTable.')
wwpLeosVplsEncapTunnelId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosVplsEncapTunnelId.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsEncapTunnelId.setDescription('This object specifies the unique index used in the table.')
wwpLeosVplsEncapTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 13, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosVplsEncapTunnelName.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsEncapTunnelName.setDescription('This object specfies the name assigned to this tunnel. This object can only be specified while creating entry in the table and cannot be modified after the entry has been created. Encap and Decap Tunnel name cannot be same but indexes can be. When creating backup tunnel this name should be set to same name that is also used by primary tunnel.')
wwpLeosVplsEncapTunnelType = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2), ("staticPbt", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosVplsEncapTunnelType.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsEncapTunnelType.setDescription('This object specifies the type of tunnel. This object can only be specified while creating entry in the table and cannot be modified after the entry has been created.')
wwpLeosVplsEncapTunnelDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 13, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosVplsEncapTunnelDestAddr.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsEncapTunnelDestAddr.setDescription('This object specifies the IP address used to resolve this tunnel. This object is only applicable if wwpLeosVplsEncapTunnelType not equal to staticPbt.')
wwpLeosVplsEncapTunnelPathIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 13, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosVplsEncapTunnelPathIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsEncapTunnelPathIndex.setDescription('This object specifies the path that this tunnel is supposed to use signal labels for this tunnel. This object is only used if wwpLeosVplsEncapTunnelType is set to dynamic.')
wwpLeosVplsEncapTunnelEncapCosPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 13, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("fixed", 1), ("inheritVc", 2), ("inheritVs", 3), ("rcosMapped", 4))).clone('rcosMapped')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosVplsEncapTunnelEncapCosPolicy.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsEncapTunnelEncapCosPolicy.setDescription('This object specifies the PBT encapsulated cos policy assigned to this tunnel. inheritVC and inheritVs options are deprecated and should not be used. rcos-mapped option should be used in place of inheritVc')
wwpLeosVplsEncapTunnelEncapFixedExp = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 13, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosVplsEncapTunnelEncapFixedExp.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsEncapTunnelEncapFixedExp.setDescription('This object specifies the encap fixed EXP assigned to this tunnel.')
wwpLeosVplsEncapTunnelTTLPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 13, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pipe", 1), ("uniform", 2))).clone('pipe')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosVplsEncapTunnelTTLPolicy.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsEncapTunnelTTLPolicy.setDescription('This object specifies the TTL policy for given tunnel.')
wwpLeosVplsEncapTunnelEncapLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 13, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1048576))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosVplsEncapTunnelEncapLabel.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsEncapTunnelEncapLabel.setDescription('This mib object specifies the encap label assigned to this tunnel. If the label is not yet known (signaling in process), the object should return a value of 0xFFFF.')
wwpLeosVplsEncapTunnelProtType = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 13, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("rsvp", 2))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosVplsEncapTunnelProtType.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsEncapTunnelProtType.setDescription('Setting this object at the time of entry creation will specify the type of Protocol to be used for this tunnel. This object is only used if wwpLeosVplsEncapTunnelType is set to dynamic. This object cannot be modified after the entry has been created.')
wwpLeosVplsEncapTunnelDestResolvedMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 13, 1, 11), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosVplsEncapTunnelDestResolvedMac.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsEncapTunnelDestResolvedMac.setDescription('This object specifies the resolved mac address for given destination IP (wwpLeosVplsEncapTunnelDestIp).')
wwpLeosVplsEncapTunnelOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 13, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosVplsEncapTunnelOperStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsEncapTunnelOperStatus.setDescription('This mib object represents the operational status of tunnel.')
wwpLeosVplsEncapTunnelAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 13, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosVplsEncapTunnelAdminStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsEncapTunnelAdminStatus.setDescription('This mib object represents the administrative status of tunnel.')
wwpLeosVplsEncapTunnelDestResolvedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 13, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosVplsEncapTunnelDestResolvedPort.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsEncapTunnelDestResolvedPort.setDescription('This mib object represents the resolved port number to destination.')
wwpLeosVplsEncapTunnelDestResolvedVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 13, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosVplsEncapTunnelDestResolvedVlan.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsEncapTunnelDestResolvedVlan.setDescription('This mib object represents the resolved transport vlan to destination.')
wwpLeosVplsEncapTunnelRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 13, 1, 16), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosVplsEncapTunnelRowStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsEncapTunnelRowStatus.setDescription("Setting this object to 'createAndGo' will create the entry in the table. Setting this object to 'destroy' will delete the entry from the table. Refer to description of wwpLeosVplsEncapTunnelTable for details of creating and deleting entries in the table.")
wwpLeosVplsEncapTunnelFastReroute = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 13, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("linkProtect", 1), ("nodeProtect", 2))).clone('linkProtect')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosVplsEncapTunnelFastReroute.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsEncapTunnelFastReroute.setDescription('This object specifies if the backup tunnel should provide link or node protection. This object should only be specified if wwpLeosVplsEncapTunnelType = dynamic and wwpLeosVplsEncapTunnelLspType = backup. This object cannot be modified once created.')
wwpLeosVplsEncapTunnelLspType = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 13, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("backup", 2))).clone('primary')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosVplsEncapTunnelLspType.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsEncapTunnelLspType.setDescription('This object specifies if the tunnel lsp is primary or backup tunnel.')
wwpLeosVplsEncapTunnelPartnerTunnelId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 13, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosVplsEncapTunnelPartnerTunnelId.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsEncapTunnelPartnerTunnelId.setDescription('This object specifies if the partner tunnel ID.')
wwpLeosVplsEncapTunnelBVID = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 13, 1, 20), VlanId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosVplsEncapTunnelBVID.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsEncapTunnelBVID.setDescription('This object specifies the provider backbone bridge vlan. This object is only applicable if wwpLeosVplsEncapTunnelType is set to staticPbt otherwise this object will be ignored.')
wwpLeosVplsEncapTunnelDestBridgeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 13, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosVplsEncapTunnelDestBridgeIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsEncapTunnelDestBridgeIndex.setDescription('This object specifies the provider backbone bridge index. This object is only applicable if wwpLeosVplsEncapTunnelType is set to staticPbt otherwise this object will be ignored. This object must be set to one of the values specified by wwpLeosPbtBridgeNameMacMapIndex. If this object is set to 0 then this value will be ignored.')
wwpLeosVplsEncapTunnelEgressPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 13, 1, 22), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosVplsEncapTunnelEgressPort.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsEncapTunnelEgressPort.setDescription('This object specifies the provider backbone bridge port. This object is only applicable if wwpLeosVplsEncapTunnelType is set to staticPbt otherwise this object will be ignored.')
wwpLeosVplsEncapTunnelEncapFixedPCP = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 13, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosVplsEncapTunnelEncapFixedPCP.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsEncapTunnelEncapFixedPCP.setDescription('This object specifies the encap fixed PCP assigned to this tunnel.')
wwpLeosVplsEncapTunnelActive = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 13, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosVplsEncapTunnelActive.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsEncapTunnelActive.setDescription('This object specifes if the tunnel is active, and it is only valid if TunnelType is staticPbt.')
wwpLeosVplsDecapTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 14), )
if mibBuilder.loadTexts: wwpLeosVplsDecapTunnelTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsDecapTunnelTable.setDescription('This table represents the Decap tunnels for VPLS wwpLeosVplsDecapTunnelType If not set will default to static To create STATIC Decap tunnel following objects must be set Encap and Decap Tunnel name cannot be same but indexes can be wwpLeosVplsDecapTunnelName must be specified wwpLeosVplsDecapTunnelLabel must be specified (0, 32..1023) wwpLeosVplsDecapTunnelRowStatus must be set to createAndGo. To create STATIC Decap PBT tunnel following objects must be set Encap and Decap Tunnel name cannot be same but indexes can be wwpLeosVplsDecapTunnelType must be set to staticPbt wwpLeosVplsDecapTunnelName must be specified wwpLeosVplsDecapTunnelBVID must be specified wwpLeosVplsDecapTunnelBridgeIndex must be specified wwpLeosVplsDecapTunnelPort must be specified wwpLeosVplsDecapTunnelRowStatus must be set to createAndGo.')
wwpLeosVplsDecapTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 14, 1), ).setIndexNames((0, "WWP-LEOS-VPLS-MIB", "wwpLeosVplsDecapTunnelId"))
if mibBuilder.loadTexts: wwpLeosVplsDecapTunnelEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsDecapTunnelEntry.setDescription('represents each entry in wwpLeosVplsDecapTunnelTable.')
wwpLeosVplsDecapTunnelId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosVplsDecapTunnelId.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsDecapTunnelId.setDescription('This object specifies the unique index used in the table.')
wwpLeosVplsDecapTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 14, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosVplsDecapTunnelName.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsDecapTunnelName.setDescription('This object specfies the name assigned to the tunnel. This object can only be specified while creating entry in the table and cannot be modified after the entry has been created.')
wwpLeosVplsDecapTunnelLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 14, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1048576))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosVplsDecapTunnelLabel.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsDecapTunnelLabel.setDescription('This mib object specifies the Decap label assigned to this tunnel. If the label is not yet known (signaling in process), the object should return a value of 0xFFFF.')
wwpLeosVplsDecapTunnelType = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 14, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2), ("staticPbt", 3))).clone('static')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosVplsDecapTunnelType.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsDecapTunnelType.setDescription('This object specifies if the tunnel is created because of remote PE request (dynamic tunnel) or it is created by the user on the device (Decap tunnel). This object cannot be set to dynamic.')
wwpLeosVplsDecapTunnelRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 14, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosVplsDecapTunnelRowStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsDecapTunnelRowStatus.setDescription("Setting this object to 'createAndGo' will create the entry in the table. Setting this object to 'destroy' will delete the entry from the table. Refer to description of wwpLeosVplsDecapTunnelTable for details of creating and deleting entries in the table.")
wwpLeosVplsDecapTunnelBVID = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 14, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosVplsDecapTunnelBVID.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsDecapTunnelBVID.setDescription('This object specifies the provider bridge vlan ID expected in the mac in mac frames ingressing the device from provider bridge facing side.')
wwpLeosVplsDecapTunnelBridgeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 14, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosVplsDecapTunnelBridgeIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsDecapTunnelBridgeIndex.setDescription('This object specifies the provider bridge host index which will be used to query wwpLeosPbtHostNameMacMapTable to find out corresponding mac address expected in the pbt frames ingressing the device from provider bridge facing side.')
wwpLeosVplsDecapTunnelPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 14, 1, 8), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosVplsDecapTunnelPort.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsDecapTunnelPort.setDescription('This object specifies the incoming port on which the pbt frames are expected.')
wwpLeosVplsDecapTunnelMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 14, 1, 9), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosVplsDecapTunnelMac.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsDecapTunnelMac.setDescription('This object specifies the source mac address expected in the pbt frames coming from provider network facing side. This mac address is derived from wwpLeosPbtHostNameMacMapTable table using the value specified by wwpLeosVplsDecapTunnelBridgeName. ')
wwpLeosVplsDecapTunnelOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 14, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosVplsDecapTunnelOperStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsDecapTunnelOperStatus.setDescription('This object represents the operational status of tunnel.')
wwpLeosVplsVirtualCircuitMplsTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 15), )
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitMplsTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitMplsTable.setDescription('The (conceptual) table listing the mpls virtual circuit table. To create entry use SNMP, multiple set operation must be used. Following Mib objects must be specified while creating MPLS virtual circuit Mpls and Ethernet virtual circuit name cannot be same but indexes can be - wwpLeosVplsVirtualCircuitMplsType must be set to dynamic - wwpLeosVplsVirtualCircuitMplsStatus must be set to createAndGo - wwpLeosVplsVirtualCircuitMplsName must be specified - wwpLeosVplsVirtualCircuitMplsDestAddr must be specified Following MIB objects must be specified while creating static MPLS virtual circuit - wwpLeosVplsVirtualCircuitMplsType must be set to static - wwpLeosVplsVirtualCircuitMplsStatus must be set to createAndGo - wwpLeosVplsVirtualCircuitMplsName must be specified - wwpLeosVplsVirtualCircuitMplsDestAddr must be specified - wwpLeosVplsVirtualCircuitMplsEncapLabel must be specified (2048..18431) - wwpLeosVplsVirtualCircuitMplsDecapLabel must be specified (2048..18431)')
wwpLeosVplsVirtualCircuitMplsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 15, 1), ).setIndexNames((0, "WWP-LEOS-VPLS-MIB", "wwpLeosVplsVirtualCircuitMplsIndex"))
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitMplsEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitMplsEntry.setDescription('The virtual circuit table entry index by wwpLeosVplsVirtualCircuitMplsIndex.')
wwpLeosVplsVirtualCircuitMplsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitMplsIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitMplsIndex.setDescription('This represents the virtual circuit index in the table. This number should be unique in the table.')
wwpLeosVplsVirtualCircuitMplsName = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 15, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitMplsName.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitMplsName.setDescription('This represents the name of the virtual circuit associated with the given virtual circuit. Mpls and Ethernet virtual circuit name cannot be same but indexes can be.')
wwpLeosVplsVirtualCircuitMplsType = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dynamic", 1), ("static", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitMplsType.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitMplsType.setDescription('This represents the type of the virtual circuit.')
wwpLeosVplsVirtualCircuitMplsDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 15, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitMplsDestAddr.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitMplsDestAddr.setDescription('This represents the destination address used by the signaling protocol if wwpLeosVplsVirtualCircuitMplsType is set to dynamic. This object cannot be modified once entry is created.')
wwpLeosVplsVirtualCircuitMplsTunnelPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 15, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fixed", 1), ("firstAvailable", 2))).clone('firstAvailable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitMplsTunnelPolicy.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitMplsTunnelPolicy.setDescription('This object represents that this virtual circuit should select the tunnel as fixed or use the first active tunnel available on the outgoing port. If this object is set to fixed then wwpLeosVplsVirtualCircuitMplsTunnelIndx must be specified.')
wwpLeosVplsVirtualCircuitMplsFixedTunnelId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 15, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitMplsFixedTunnelId.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitMplsFixedTunnelId.setDescription('This represents the tunnel that this virtual circuit should be mapped to. This object is only used if wwpLeosVplsVirtualCircuitMplsTunnelPolicy is set to fixed.')
wwpLeosVplsVirtualCircuitMplsActiveTunnelId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 15, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitMplsActiveTunnelId.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitMplsActiveTunnelId.setDescription('This represents the tunnel that this virtual circuit is currently using. This object is equal to wwpLeosVplsVirtualCircuitMplsFixedTunnelId if wwpLeosVplsVirtualCircuitMplsTunnelPolicy is set to fixed.')
wwpLeosVplsVirtualCircuitMplsOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 15, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitMplsOperStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitMplsOperStatus.setDescription('This represents the operational status of the virtual circuit.')
wwpLeosVplsVirtualCircuitMplsEncapLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 15, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1048576))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitMplsEncapLabel.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitMplsEncapLabel.setDescription('If wwpLeosVplsVirtualCircuitMplsType is set to static then this object specifies the encap label the should be used for this virtual circuit. Label should be in the range 2048..18431. If the label is not yet known (signaling in process), the object should return a value of 0xFFFF.')
wwpLeosVplsVirtualCircuitMplsDecapLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 15, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1048576))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitMplsDecapLabel.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitMplsDecapLabel.setDescription('If wwpLeosVplsVirtualCircuitMplsType is set to static then this object specifies the decap label the should be used for this virtual circuit. Label should be in the range 2048..18431. If the label is not yet known (signaling in process), the object should return a value of 0xFFFF.')
wwpLeosVplsVirtualCircuitMplsGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 15, 1, 11), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitMplsGroupId.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitMplsGroupId.setDescription('This represents the group ID advertised in the LDP signaling if wwpLeosVplsVirtualCircuitMplsType is set to dynamic.')
wwpLeosVplsVirtualCircuitMplsProtectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 15, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2))).clone('secondary')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitMplsProtectionType.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitMplsProtectionType.setDescription('This represents that this virtual circuit is primary or secondary virtual circuit. If primary virtual circuit goes down that secondary virtual circuit will be used.')
wwpLeosVplsVirtualCircuitMplsStatusTlv = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 15, 1, 13), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitMplsStatusTlv.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitMplsStatusTlv.setDescription('Specifies whether the Status TLV in LDP signaling should be advertised or not. This mib object is only used if wwpLeosVplsVirtualCircuitMplsType is set to dynamic. This field cannot be modified while wwpLeosVplsVirtualCircuitMplsStatus is active')
wwpLeosVplsVirtualCircuitMplsMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 15, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1500, 9216)).clone(9190)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitMplsMtu.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitMplsMtu.setDescription('Setting this object will set the MTU for this VC. This MTU is advertised to the peer if wwpLeosVplsVirtualCircuitMplsType is set to dynamic.')
wwpLeosVplsVirtualCircuitMplsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 15, 1, 15), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitMplsStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitMplsStatus.setDescription("Used to manage the creation and deletion of the conceptual rows in this table. To create a row in this table, a manager must set this object to 'createAndGo'. To delete a row in this table, a manager must set this object to 'destroy'. If the entry exists, it will be displayed as 'active'.")
wwpLeosVplsVirtualCircuitMplsStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 16), )
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitMplsStatsTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitMplsStatsTable.setDescription('The (conceptual) table listing the mpls virtual circuit stats table.')
wwpLeosVplsVirtualCircuitMplsStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 16, 1), ).setIndexNames((0, "WWP-LEOS-VPLS-MIB", "wwpLeosVplsVirtualCircuitMplsIndex"))
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitMplsStatsEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitMplsStatsEntry.setDescription('The mpls virtual circuit stats table entry index by wwpLeosVplsVirtualCircuitMplsIndex.')
wwpLeosVplsVirtualCircuitMplsTxBytesHi = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 16, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitMplsTxBytesHi.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitMplsTxBytesHi.setDescription('This represents the total number of higher 32 bits transmitted for given virtual circuit.')
wwpLeosVplsVirtualCircuitMplsTxBytesLo = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 16, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitMplsTxBytesLo.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitMplsTxBytesLo.setDescription('This represents the total number of lower 32 bits transmitted for given virtual circuit.')
wwpLeosVplsVirtualCircuitMplsRxBytesHi = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 16, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitMplsRxBytesHi.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitMplsRxBytesHi.setDescription('This represents the total number of higher 32 bits received for given mpls virtual circuit.')
wwpLeosVplsVirtualCircuitMplsRxBytesLo = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 16, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitMplsRxBytesLo.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitMplsRxBytesLo.setDescription('This represents the total number of lower 32 bits received for given virtual circuit.')
wwpLeosVplsVirtualCircuitEthTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 17), )
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitEthTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitEthTable.setDescription('The (conceptual) table listing the virtual circuit table. To create entry use SNMP, multiple set operation must be usedd because following mib objects needs to be set while creating entry in the table. Mpls and Ethernet virtual circuit name cannot be same but indexes can be - wwpLeosVplsVirtualCircuitEthName must be specified - wwpLeosVplsVirtualCircuitEthProviderVlanId must be specified and must exist on the device. - wwpLeosVplsVirtualCircuitEthStatus must be specified.')
wwpLeosVplsVirtualCircuitEthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 17, 1), ).setIndexNames((0, "WWP-LEOS-VPLS-MIB", "wwpLeosVplsVirtualCircuitEthIndex"))
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitEthEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitEthEntry.setDescription('The virtual circuit table entry index by wwpLeosVplsVirtualCircuitMplsIndex.')
wwpLeosVplsVirtualCircuitEthIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 17, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitEthIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitEthIndex.setDescription('This represents the virtual circuit index in the table. This number should be unique in the table.')
wwpLeosVplsVirtualCircuitEthName = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 17, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitEthName.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitEthName.setDescription('This represents the name of the virtual circuit associated with the given virtual circuit. Mpls and Ethernet virtual circuit name cannot be same but indexes can be ')
wwpLeosVplsVirtualCircuitEthProviderVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 17, 1, 3), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitEthProviderVlanId.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitEthProviderVlanId.setDescription('This represents the provider vlan id associated with the virtual circuit for a given wwpLeosVplsVirtualCircuitMplsIndex.')
wwpLeosVplsVirtualCircuitEthRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 17, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitEthRowStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitEthRowStatus.setDescription("Used to manage the creation and deletion of the conceptual rows in this table. To create a row in this table, a manager must set this object to 'createAndGo'. To delete a row in this table, a manager must set this object to 'destroy' If the entry exists, it will be displayed as 'active'.")
wwpLeosVplsVirtualCircuitEthStatsMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 17, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitEthStatsMonitor.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitEthStatsMonitor.setDescription('To disable stats collection, set this object to off(2). To enable stats collection, set this object to on(1).')
wwpLeosVplsVirtualCircuitEtherTypeTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 18), )
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitEtherTypeTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitEtherTypeTable.setDescription('The (conceptual) table listing the ether type to be used for each port.')
wwpLeosVplsVirtualCircuitEtherTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 18, 1), ).setIndexNames((0, "WWP-LEOS-VPLS-MIB", "wwpLeosVplsVirtualCircuitPortId"))
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitEtherTypeEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitEtherTypeEntry.setDescription('The entry to assign ether type for each port.')
wwpLeosVplsVirtualCircuitPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 18, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitPortId.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitPortId.setDescription('This object specifies the port number used as index in the table.')
wwpLeosVplsVirtualCircuitEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 18, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("type8100", 1), ("type9100", 2), ("type88A8", 3))).clone('type8100')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitEtherType.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitEtherType.setDescription('This object specifies the ethertype of the outer VLAN tag for given port.')
wwpLeosVplsVirtualCircuitEtherTypePolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 18, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("all", 1), ("encapOnly", 2), ("vlanTpid", 3))).clone('encapOnly')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitEtherTypePolicy.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitEtherTypePolicy.setDescription('This object specifies the policy for the ethertype of the outer VLAN tag for given port. All means all frames will have the type set in wwpLeosVplsVirtualCircuitEtherType. encapOnly means only Q-in-Q encapsulated frames will use that value. If wwpLeosVplsVirtualCircuitEtherType is set to type 8100 then ALL will always be the operational value for this item. vlanTpid means that the port will use the TPID configured for the vlan at egress.')
wwpLeosVplsVirtualCircuitEthStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 19), )
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitEthStatsTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitEthStatsTable.setDescription('The (conceptual) table listing the virtual circuit stats table.')
wwpLeosVplsVirtualCircuitEthStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 19, 1), ).setIndexNames((0, "WWP-LEOS-VPLS-MIB", "wwpLeosVplsVirtualCircuitEthIndex"))
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitEthStatsEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitEthStatsEntry.setDescription('The ethernet virtual circuit stats table entry index by wwpLeosVplsVirtualCircuitMplsIndex.')
wwpLeosVplsVirtualCircuitEthTxBytesHi = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 19, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitEthTxBytesHi.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitEthTxBytesHi.setDescription('This represents the total number of higher 32 bits transmitted for given virtual circuit.')
wwpLeosVplsVirtualCircuitEthTxBytesLo = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 19, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitEthTxBytesLo.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitEthTxBytesLo.setDescription('This represents the total number of lower 32 bits transmitted for given virtual circuit.')
wwpLeosVplsVirtualCircuitEthRxBytesHi = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 19, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitEthRxBytesHi.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitEthRxBytesHi.setDescription('This represents the total number of higher 32 bits received for given virtual circuit.')
wwpLeosVplsVirtualCircuitEthRxBytesLo = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 19, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitEthRxBytesLo.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitEthRxBytesLo.setDescription('This represents the total number of lower 32 bits received for given virtual circuit.')
wwpLeosVirtualCircuitEthStatsClear = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 19, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear", 1), ("none", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosVirtualCircuitEthStatsClear.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVirtualCircuitEthStatsClear.setDescription('To clear the statistics for the given virtual circuit, set this object to clear(1)')
wwpLeosVplsVirtualSwitchMplsTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 20), )
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchMplsTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchMplsTable.setDescription('This table is used to manage virtual switch entries on the device.')
wwpLeosVplsVirtualSwitchMplsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 20, 1), ).setIndexNames((0, "WWP-LEOS-VPLS-MIB", "wwpLeosVplsVirtualSwitchMplsIndx"))
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchMplsEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchMplsEntry.setDescription('This entry corresponds to single entry in wwpLeosVplsVirtualSwitchMplsTable table. To create an entry in the table following criteria must be met. Mpls and Ethernet virtual switch name cannot be same but indexes can be - wwpLeosVplsVirtualSwitchMplsVpnId must be specified. - wwpLeosVplsVirtualSwitchMplsType must be specified. - wwpLeosVplsVirtualSwitchMplsName must be specified. - wwpLeosVplsVirtualSwitchMplsStatus must be specified.')
wwpLeosVplsVirtualSwitchMplsIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 20, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchMplsIndx.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchMplsIndx.setDescription('This object specifies the virtual switch index which is used as unique index in the table.')
wwpLeosVplsVirtualSwitchMplsName = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 20, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchMplsName.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchMplsName.setDescription('This object specifies the virtual switch name. this object can only be specified at the time of creation and cannot be modified later. Mpls and Ethernet virtual switch name cannot be same but indexes can be.')
wwpLeosVplsVirtualSwitchMplsVpnId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 20, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchMplsVpnId.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchMplsVpnId.setDescription('This object specifies the subscriber vlan Id for given virtual switch.')
wwpLeosVplsVirtualSwitchMplsEncapCosPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 20, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("fixed", 1), ("inheritDot1dPri", 2), ("inheritIpPrec", 3), ("inheritPhbg", 4))).clone('fixed')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchMplsEncapCosPolicy.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchMplsEncapCosPolicy.setDescription('This object specifies the ingress cos policy for given virtual switch.')
wwpLeosVplsVirtualSwitchMplsEncapFixedDot1dPri = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 20, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchMplsEncapFixedDot1dPri.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchMplsEncapFixedDot1dPri.setDescription('This object specifies the ingress fixed cos attributes for given virtual switch.')
wwpLeosVplsVirtualSwitchMplsDecapCosPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 20, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("fixed", 1), ("inheritVc", 2), ("inheritTunnel", 3), ("leave", 4))).clone('leave')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchMplsDecapCosPolicy.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchMplsDecapCosPolicy.setDescription('This object specifies the egress cos policy for given virtual switch.')
wwpLeosVplsVirtualSwitchMplsDecapFixedDot1dPri = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 20, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchMplsDecapFixedDot1dPri.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchMplsDecapFixedDot1dPri.setDescription('This object specifies the egress cos attributes for given virtual switch.')
wwpLeosVplsVirtualSwitchMplsCtrlProtocolTunnelState = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 20, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchMplsCtrlProtocolTunnelState.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchMplsCtrlProtocolTunnelState.setDescription('This object enables or disables control protocol tunneling for a given virtual switch.')
wwpLeosVplsVirtualSwitchMplsDecapTTLPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 20, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pipe", 1), ("uniform", 2))).clone('pipe')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchMplsDecapTTLPolicy.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchMplsDecapTTLPolicy.setDescription('This object specifies the TTL policy for a given virtual switch.')
wwpLeosVplsVirtualSwitchMplsType = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 20, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchMplsType.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchMplsType.setDescription('This object specifies the type of virtual switch.')
wwpLeosVplsVirtualSwitchMplsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 20, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchMplsRowStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchMplsRowStatus.setDescription("This object can be set to 'createAndGo' to create entry in the table. This object can be set to 'destroy' to delete entry in the table. Following objects must be set to valid values to create entry in the table.")
wwpLeosVplsVirtualSwitchMplsMacLrnState = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 20, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchMplsMacLrnState.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchMplsMacLrnState.setDescription('Setting this object will set the Mac learning state for a given mpls virtual switch.')
wwpLeosVplsVirtualSwitchMplsTunnelMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 20, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("l2pt", 1), ("transparent", 2))).clone('l2pt')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchMplsTunnelMethod.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchMplsTunnelMethod.setDescription('Setting this object will set the tunneling method for a given mpls virtual switch.')
wwpLeosVplsVirtualSwitchMplsCtrlProtocolDot1dPri = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 20, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchMplsCtrlProtocolDot1dPri.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchMplsCtrlProtocolDot1dPri.setDescription('This object specifies the .1d priority to use when encapsulation control frames.')
wwpLeosVplsVirtualSwitchMplsSubscriberDot1dPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 20, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("leave", 1), ("provider-inherit", 2))).clone('leave')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchMplsSubscriberDot1dPolicy.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchMplsSubscriberDot1dPolicy.setDescription('Setting this object will configure the policy used to decide whether or not the subscriber frame .1d priorty should be left alone, or remarked to the computed provider priority.')
wwpLeosVplsVirtualSwitchMplsCtrlProtTransFrameValidate = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 20, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchMplsCtrlProtTransFrameValidate.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchMplsCtrlProtTransFrameValidate.setDescription('Setting this object will set the transparent-mode validate for a given mpls virtual switch.')
wwpLeosVplsVirtualSwitchMplsHonorPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 20, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("c-vlan", 1), ("s-vlan", 2))).clone('c-vlan')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchMplsHonorPriority.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchMplsHonorPriority.setDescription("Setting this object will select either the c-vlan or s-vlan priority to use through the Virtual Switch and it's associated MPLS Tunnel. ")
wwpLeosVplsVirtualSwitchMplsMemberTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 21), )
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchMplsMemberTable.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchMplsMemberTable.setDescription('This table is used to create mpls virtual switch subscriber port-vlan membership entry.')
wwpLeosVplsVirtualSwitchMplsMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 21, 1), ).setIndexNames((0, "WWP-LEOS-VPLS-MIB", "wwpLeosVplsVirtualSwitchMplsIndx"), (0, "WWP-LEOS-VPLS-MIB", "wwpLeosVplsVirtualSwitchMplsMemberPortId"))
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchMplsMemberEntry.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchMplsMemberEntry.setDescription('This entry corresponds to single port-vlan subscriber entry in wwpLeosVplsVirtualSwitchMplsMemberTable table.')
wwpLeosVplsVirtualSwitchMplsMemberPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 21, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchMplsMemberPortId.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchMplsMemberPortId.setDescription('This object specifies the port number which is to be added as a customer facing port for the mpls virtual switch index wwpLeosVplsVirtualSwitchMplsIndx.')
wwpLeosVplsVirtualSwitchMplsMemberVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 21, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchMplsMemberVlanId.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchMplsMemberVlanId.setDescription('This object specifies the subscriber vlan attached to this mpls virtual switch index wwpLeosVplsVirtualSwitchMplsIndx. This object cannot be modified one entry is created in this table. This object can only be specified when creating entries in this table.')
wwpLeosVplsVirtualSwitchMplsMemberRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 21, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchMplsMemberRowStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchMplsMemberRowStatus.setDescription("Used to manage the creation and deletion of the conceptual rows in this table. To create a row in this table, a manager must set this object to 'createAndGo'. To delete a row in this table, a manager must set this object to 'destroy'. If the entry exists, it will be displayed as 'active'.")
wwpLeosVplsVirtualSwitchMplsMemberEncapCosPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 21, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("fixed", 1), ("inheritDot1dPri", 2), ("inheritIpPrec", 3), ("inheritPhbg", 4), ("inheritVs", 5), ("port-inherit", 6))).clone('inheritVs')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchMplsMemberEncapCosPolicy.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchMplsMemberEncapCosPolicy.setDescription("This object specifies the ingress cos policy for given member entry. By default 'inheritVs' the encap CoS policy is inherited from the parent virtual-switch settings")
wwpLeosVplsVirtualSwitchMplsMemberEncapCosFixedDot1DPri = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 21, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchMplsMemberEncapCosFixedDot1DPri.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchMplsMemberEncapCosFixedDot1DPri.setDescription("This object specifies the ingress fixed cos attributes for given member entry. This attribute is only valid when the member EncapCosPolicy is set to 'fixed'")
wwpLeosVplsVirtualSwitchMplsMemberSubscriberDot1dPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 21, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("leave", 1), ("provider-inherit", 2), ("inheritVs", 3))).clone('inheritVs')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchMplsMemberSubscriberDot1dPolicy.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchMplsMemberSubscriberDot1dPolicy.setDescription("This object configures the member policy used to decide if the subscriber frame's 'c-vlan' .1d priorty should be left alone 'leave', or remarked 'provider-inherit' to the resolved provider 's-vlan' priority. This attribute is valid when the member's SubscriberDot1Policy is 'leave' or 'provider-inherit'. If stt to 'inheritVs' the attribute is inherited from the parent virtual-switch")
wwpLeosVplsVirtualSwitchMplsMemberStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 22), )
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchMplsMemberStatsTable.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchMplsMemberStatsTable.setDescription('The (conceptual) table listing the virtual switch member stats table.')
wwpLeosVplsVirtualSwitchMplsMemberStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 22, 1), ).setIndexNames((0, "WWP-LEOS-VPLS-MIB", "wwpLeosVplsVirtualSwitchMplsIndx"), (0, "WWP-LEOS-VPLS-MIB", "wwpLeosVplsVirtualSwitchMplsMemberPortId"))
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchMplsMemberStatsEntry.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchMplsMemberStatsEntry.setDescription('The virtual switch member stats table entry index by wwpLeosVplsVirtualSwitchMplsIndx and wwpLeosVplsVirtualSwitchMplsMemberPortId.')
wwpLeosVplsVirtualSwitchMplsMemberRxBytesHi = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 22, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchMplsMemberRxBytesHi.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchMplsMemberRxBytesHi.setDescription('This represents the total number of higher 32 bits received for given mpls virtual switch member port.')
wwpLeosVplsVirtualSwitchMplsMemberRxBytesLo = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 22, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchMplsMemberRxBytesLo.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchMplsMemberRxBytesLo.setDescription('This represents the total number of lower 32 bits received for given virtual switch member port.')
wwpLeosVplsVirtualSwitchMplsMemberMeshVcTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 23), )
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchMplsMemberMeshVcTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchMplsMemberMeshVcTable.setDescription('This table is used to create mpls virtual switch mesh-vc membership entry.')
wwpLeosVplsVirtualSwitchMplsMemberMeshVcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 23, 1), ).setIndexNames((0, "WWP-LEOS-VPLS-MIB", "wwpLeosVplsVirtualSwitchMplsIndx"), (0, "WWP-LEOS-VPLS-MIB", "wwpLeosVplsVirtualSwitchMplsMemberMeshVcMeshVc"))
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchMplsMemberMeshVcEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchMplsMemberMeshVcEntry.setDescription('This entry corresponds to single mesh-vc entry in wwpLeosVplsVirtualSwitchMplsMemberMeshVcTable table.')
wwpLeosVplsVirtualSwitchMplsMemberMeshVcMeshVc = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 23, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchMplsMemberMeshVcMeshVc.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchMplsMemberMeshVcMeshVc.setDescription('This object specifies the mesh virtual circuit for this mpls virtual switch.')
wwpLeosVplsVirtualSwitchMplsMemberMeshVcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 23, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchMplsMemberMeshVcRowStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchMplsMemberMeshVcRowStatus.setDescription("Used to manage the creation and deletion of the conceptual rows in this table. To create a row in this table, a manager must set this object to 'createAndGo'. To delete a row in this table, a manager must set this object to 'destroy'. If the entry exists, it will be displayed as 'active'.")
wwpLeosVplsVirtualSwitchMplsMemberAcVcTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 24), )
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchMplsMemberAcVcTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchMplsMemberAcVcTable.setDescription('This table is used to create mpls virtual switch mesh-vc membership entry.')
wwpLeosVplsVirtualSwitchMplsMemberAcVcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 24, 1), ).setIndexNames((0, "WWP-LEOS-VPLS-MIB", "wwpLeosVplsVirtualSwitchMplsIndx"), (0, "WWP-LEOS-VPLS-MIB", "wwpLeosVplsVirtualSwitchMplsMemberAcVcAcVc"))
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchMplsMemberAcVcEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchMplsMemberAcVcEntry.setDescription('This entry corresponds to single mesh-vc entry in wwpLeosVplsVirtualSwitchMplsMemberAcVcTable table.')
wwpLeosVplsVirtualSwitchMplsMemberAcVcAcVc = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 24, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchMplsMemberAcVcAcVc.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchMplsMemberAcVcAcVc.setDescription('This object specifies the attachment virtual circuit for this mpls virtual switch.')
wwpLeosVplsVirtualSwitchMplsMemberAcVcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 24, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchMplsMemberAcVcRowStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchMplsMemberAcVcRowStatus.setDescription("Used to manage the creation and deletion of the conceptual rows in this table. To create a row in this table, a manager must set this object to 'createAndGo'. To delete a row in this table, a manager must set this object to 'destroy'. If the entry exists, it will be displayed as 'active'.")
wwpLeosVplsSwitchMplsCtrlProtocolTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 25), )
if mibBuilder.loadTexts: wwpLeosVplsSwitchMplsCtrlProtocolTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsSwitchMplsCtrlProtocolTable.setDescription('The (conceptual) table listing the l2 virtual switch control frame protocol status tunnel for a given Vpls.')
wwpLeosVplsSwitchMplsCtrlProtocolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 25, 1), ).setIndexNames((0, "WWP-LEOS-VPLS-MIB", "wwpLeosVplsVirtualSwitchMplsIndx"), (0, "WWP-LEOS-VPLS-MIB", "wwpLeosVplsSwitchMplsCtrlProtocolNum"))
if mibBuilder.loadTexts: wwpLeosVplsSwitchMplsCtrlProtocolEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsSwitchMplsCtrlProtocolEntry.setDescription('The layer 2 virtual switch control frame protocol tunnel entry for the Vpls.')
wwpLeosVplsSwitchMplsCtrlProtocolNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 25, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("l28021x", 1), ("rstp", 2), ("ciscoCdp", 3), ("ciscoDtp", 4), ("ciscoPagp", 5), ("ciscoPvst", 6), ("ciscoUplinkFast", 7), ("ciscoUdlp", 8), ("ciscoVtp", 9), ("gvrp", 10), ("lacp", 11), ("lacpMarker", 12), ("oam", 13), ("lldp", 14), ("vlanBridge", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosVplsSwitchMplsCtrlProtocolNum.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsSwitchMplsCtrlProtocolNum.setDescription('This object represent the list of protocols the device can support.')
wwpLeosVplsSwitchMplsCtrlType = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 25, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("discard", 1), ("peer", 2), ("tunnel", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosVplsSwitchMplsCtrlType.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsSwitchMplsCtrlType.setDescription("Setting this object to 'discard' will cause wwpLeosVplsSwitchMplsCtrlProtocolNum frames arriving at the specified UNI to be discarded. Setting this to 'peer' will cause the wwpLeosVplsSwitchMplsCtrlProtocolNum frame to be processed by the provider network and cause the provider network to behave as a peer. Setting this to 'tunnel' will cause the wwpLeosVplsSwitchMplsCtrlProtocolNum frame to be tunneled.")
wwpLeosVplsVirtualSwitchEthTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 26), )
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEthTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEthTable.setDescription('This table is used to manage virtual switch entries on the device.')
wwpLeosVplsVirtualSwitchEthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 26, 1), ).setIndexNames((0, "WWP-LEOS-VPLS-MIB", "wwpLeosVplsVirtualSwitchEthIndx"))
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEthEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEthEntry.setDescription('This entry corresponds to single entry in wwpLeosVplsVirtualSwitchEthernetTable table. To create an entry in the table following criteria must be met. - wwpLeosVplsVirtualSwitchEthRowStatus must be specified. - wwpLeosVplsVirtualSwitchEthernetName must be specified')
wwpLeosVplsVirtualSwitchEthIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 26, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEthIndx.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEthIndx.setDescription('This object specifies the virtual switch index which is used as unique index in the table.')
wwpLeosVplsVirtualSwitchEthName = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 26, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEthName.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEthName.setDescription('This object specifies the virtual switch name. this object can only be specified at the time of creation and cannot be modified later. Mpls and Ethernet virtual switch name cannot be same but indexes can be.')
wwpLeosVplsVirtualSwitchEthVc = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 26, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEthVc.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEthVc.setDescription('This object specifies the primary virtual circuit ID associated with this virtual switch. To unset it set this to 0. If this object represents PBT virtual circuit then wwpLeosVplsVirtualSwitchEthVcType must also be set to pbt.')
wwpLeosVplsVirtualSwitchEthEncapCosPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 26, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("fixed", 1), ("inheritDot1dPri", 2), ("inheritIpPrec", 3), ("inheritPhbg", 4), ("port-inherit", 5))).clone('fixed')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEthEncapCosPolicy.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEthEncapCosPolicy.setDescription('This object specifies the ingress cos policy for given virtual switch.')
wwpLeosVplsVirtualSwitchEthEncapFixedDot1dPri = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 26, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEthEncapFixedDot1dPri.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEthEncapFixedDot1dPri.setDescription('This object specifies the ingress fixed cos attributes for given virtual switch.')
wwpLeosVplsVirtualSwitchEthDecapCosPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 26, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("fixed", 1), ("inheritVc", 2), ("inheritTunnel", 3), ("leave", 4))).clone('leave')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEthDecapCosPolicy.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEthDecapCosPolicy.setDescription('This object specifies the egress cos policy for given virtual switch.')
wwpLeosVplsVirtualSwitchEthDecapFixedDot1dPri = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 26, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEthDecapFixedDot1dPri.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEthDecapFixedDot1dPri.setDescription('This object specifies the egress cos attributes for given virtual switch.')
wwpLeosVplsVirtualSwitchEthCtrlProtocolTunnelState = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 26, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEthCtrlProtocolTunnelState.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEthCtrlProtocolTunnelState.setDescription('This object enables or disables control protocol tunneling for a given virtual switch.')
wwpLeosVplsVirtualSwitchEthRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 26, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEthRowStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEthRowStatus.setDescription("This object can be set to 'createAndGo' to create entry in the table. This object can be set to 'destroy' to delete entry in the table. Following objects must be set to valid values to create entry in the table.")
wwpLeosVplsVirtualSwitchEthMacLrnState = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 26, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEthMacLrnState.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEthMacLrnState.setDescription('Setting this object will set the Mac learning state for each ethernet virtual switch.')
wwpLeosVplsVirtualSwitchEthTunnelMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 26, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("l2pt", 1), ("transparent", 2))).clone('l2pt')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEthTunnelMethod.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEthTunnelMethod.setDescription('Setting this object will set the tunneling method for each ethernet virtual switch.')
wwpLeosVplsVirtualSwitchEthCtrlProtocolDot1dPri = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 26, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEthCtrlProtocolDot1dPri.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEthCtrlProtocolDot1dPri.setDescription('This object specifies the .1d priority to use when encapsulation control frames.')
wwpLeosVplsVirtualSwitchEthSubscriberDot1dPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 26, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("leave", 1), ("provider-inherit", 2))).clone('leave')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEthSubscriberDot1dPolicy.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEthSubscriberDot1dPolicy.setDescription('Setting this object will configure the policy used to decide whether or not the subscriber frame .1d priorty should be left alone, or remarked to the computed provider priority.')
wwpLeosVplsVirtualSwitchEthCtrlProtTransFrameValidate = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 26, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEthCtrlProtTransFrameValidate.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEthCtrlProtTransFrameValidate.setDescription('Setting this object will set the transparent-mode validate for a given eth virtual switch.')
wwpLeosVplsVirtualSwitchEthVcType = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 26, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("ethernet", 2), ("pbt", 3))).clone('ethernet')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEthVcType.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEthVcType.setDescription('This object specifies the type of vc to be attached to this virtual switch. This object must be set (using SNMP multiple set operation) to pbt type if wwpLeosVplsVirtualSwitchEthVc specifies the pbt vc. Setting only wwpLeosVplsVirtualSwitchEthVcType will return error. Also setting wwpLeosVplsVirtualSwitchEthVcType to none will return error.')
wwpLeosVplsVirtualSwitchEthHonorPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 26, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("c-vlan", 1), ("s-vlan", 2))).clone('c-vlan')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEthHonorPriority.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEthHonorPriority.setDescription("This object specifies which Vlan priority to use on a Virtual Switch. Honor either the c-vlan or the s-vlan priority through the Virtual Switch and it's associated VC or Tunnel.")
wwpLeosVplsVirtualSwitchEthDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 26, 1, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEthDescription.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEthDescription.setDescription('This object specifies the virtual switch description.')
wwpLeosVplsVirtualSwitchEthReservedVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 26, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEthReservedVlan.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEthReservedVlan.setDescription('Reserved vlan for the virtual-switch.')
wwpLeosVplsVirtualSwitchEthMemberTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 27), )
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEthMemberTable.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEthMemberTable.setDescription('This table is used to create virtual switch membership entry.')
wwpLeosVplsVirtualSwitchEthMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 27, 1), ).setIndexNames((0, "WWP-LEOS-VPLS-MIB", "wwpLeosVplsVirtualSwitchEthIndx"), (0, "WWP-LEOS-VPLS-MIB", "wwpLeosVplsVirtualSwitchEthMemberPortId"))
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEthMemberEntry.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEthMemberEntry.setDescription('This entry corresponds to single entry in wwpLeosVplsVirtualSwitchEthernetMemberTable table.')
wwpLeosVplsVirtualSwitchEthMemberPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 27, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEthMemberPortId.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEthMemberPortId.setDescription('This object specifies the port id associated with wwpLeosVplsVirtualSwitchEthIndx.')
wwpLeosVplsVirtualSwitchEthMemberVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 27, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEthMemberVlan.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEthMemberVlan.setDescription('This object specifies the subscriber vlan attached to this eth virtual switch index wwpLeosVplsVirtualSwitchEthIndx. This object cannot be modified one entry is created. This object can only be specified when entry is created in this table.')
wwpLeosVplsVirtualSwitchEthMemberRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 27, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEthMemberRowStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEthMemberRowStatus.setDescription("This object can be set to 'createandgo' to add entry in the table. This object can be set to 'destroy' to delete entry in the table. Refer to description of table entry to see how to create entries in the table.")
wwpLeosVplsVirtualSwitchEthMemberEncapCosPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 27, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("fixed", 1), ("inheritDot1dPri", 2), ("inheritIpPrec", 3), ("inheritPhbg", 4), ("inheritVs", 5), ("port-inherit", 6))).clone('inheritVs')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEthMemberEncapCosPolicy.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEthMemberEncapCosPolicy.setDescription('This object specifies the ingress cos policy for given member entry.')
wwpLeosVplsVirtualSwitchEthMemberEncapCosFixedDot1DPri = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 27, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEthMemberEncapCosFixedDot1DPri.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEthMemberEncapCosFixedDot1DPri.setDescription("This object specifies the ingress fixed cos attributes for given member entry. This attribute is only valid when the EncapCosPolicy is set to 'fixed'")
wwpLeosVplsVirtualSwitchEthMemberSubscriberDot1dPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 27, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("leave", 1), ("provider-inherit", 2), ("inheritVs", 3))).clone('inheritVs')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEthMemberSubscriberDot1dPolicy.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEthMemberSubscriberDot1dPolicy.setDescription("This object configures the member policy used to decide if the subscriber frame's 'c-vlan' .1d priorty should be left alone 'leave', or remarked 'provider-inherit' to the resolved provider 's-vlan' priority. This attribute is valid when the member's SubscriberDot1Policy is 'leave' or 'provider-inherit'. If stt to 'inheritVs' the attribute is inherited from the parent virtual-switch")
wwpLeosVplsVirtualSwitchEthMemberStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 28), )
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEthMemberStatsTable.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEthMemberStatsTable.setDescription('The (conceptual) table listing the virtual switch member stats table.')
wwpLeosVplsVirtualSwitchEthMemberStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 28, 1), ).setIndexNames((0, "WWP-LEOS-VPLS-MIB", "wwpLeosVplsVirtualSwitchEthIndx"), (0, "WWP-LEOS-VPLS-MIB", "wwpLeosVplsVirtualSwitchEthMemberPortId"))
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEthMemberStatsEntry.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEthMemberStatsEntry.setDescription('The virtual switch member stats table entry index by wwpLeosVplsVirtualSwitchEthIndx and wwpLeosVplsVirtualSwitchEthMemberPortId.')
wwpLeosVplsVirtualSwitchEthMemberRxBytesHi = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 28, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEthMemberRxBytesHi.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEthMemberRxBytesHi.setDescription('This represents the total number of higher 32 bits received for given virtual switch member port.')
wwpLeosVplsVirtualSwitchEthMemberRxBytesLo = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 28, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEthMemberRxBytesLo.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEthMemberRxBytesLo.setDescription('This represents the total number of lower 32 bits received for given virtual switch member port.')
wwpLeosVplsSwitchEthCtrlProtocolTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 29), )
if mibBuilder.loadTexts: wwpLeosVplsSwitchEthCtrlProtocolTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsSwitchEthCtrlProtocolTable.setDescription('The (conceptual) table listing the l2 virtual switch control frame protocol status tunnel for a given Vpls.')
wwpLeosVplsSwitchEthCtrlProtocolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 29, 1), ).setIndexNames((0, "WWP-LEOS-VPLS-MIB", "wwpLeosVplsVirtualSwitchEthIndx"), (0, "WWP-LEOS-VPLS-MIB", "wwpLeosVplsSwitchEthCtrlProtocolNum"))
if mibBuilder.loadTexts: wwpLeosVplsSwitchEthCtrlProtocolEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsSwitchEthCtrlProtocolEntry.setDescription('The layer 2 virtual switch control frame protocol tunnel entry for the Vpls.')
wwpLeosVplsSwitchEthCtrlProtocolNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 29, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("l28021x", 1), ("rstp", 2), ("ciscoCdp", 3), ("ciscoDtp", 4), ("ciscoPagp", 5), ("ciscoPvst", 6), ("ciscoUplinkFast", 7), ("ciscoUdlp", 8), ("ciscoVtp", 9), ("gvrp", 10), ("lacp", 11), ("lacpMarker", 12), ("oam", 13), ("lldp", 14), ("vlanBridge", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosVplsSwitchEthCtrlProtocolNum.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsSwitchEthCtrlProtocolNum.setDescription('This object represent the list of protocols the device can support.')
wwpLeosVplsSwitchEthCtrlType = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 29, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("discard", 1), ("peer", 2), ("tunnel", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosVplsSwitchEthCtrlType.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsSwitchEthCtrlType.setDescription("Setting this object to 'discard' will cause wwpLeosVplsSwitchEthCtrlProtocolNum frames arriving at the specified UNI to be discarded. Setting this to 'peer' will cause the wwpLeosVplsSwitchEthCtrlProtocolNum frame to be processed by the provider network and cause the provider network to behave as a peer. Setting this to 'tunnel' will cause the wwpLeosVplsSwitchEthCtrlProtocolNum frame to be tunneled.")
wwpLeosVplsVirtualSwitchEtypeTranslationTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 30), )
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEtypeTranslationTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEtypeTranslationTable.setDescription('This table controls the global Ethertype translation functions. Only two entries are allowed. Creating more than two entries will return an error. The control is bi-directional. Creating one entry will enable translation as the packet egresses the NNI and as it egresses the UNI port.')
wwpLeosVplsVirtualSwitchEtypeTranslationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 30, 1), ).setIndexNames((0, "WWP-LEOS-VPLS-MIB", "wwpLeosVplsVirtualSwitchEtypeTranslationOriginalEtype"))
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEtypeTranslationEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEtypeTranslationEntry.setDescription('Each entry contains the Ethertype being translated and the new Ethertype that will be copied over the old Ethertype.')
wwpLeosVplsVirtualSwitchEtypeTranslationOriginalEtype = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 30, 1, 1), EtherType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEtypeTranslationOriginalEtype.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEtypeTranslationOriginalEtype.setDescription('This object represent the original Ethertype of the frame.')
wwpLeosVplsVirtualSwitchEtypeTranslationMappedEtype = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 30, 1, 2), EtherType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEtypeTranslationMappedEtype.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEtypeTranslationMappedEtype.setDescription('This object represent the Ethertype that will be stamped on the frame on egress and removed on ingress.')
wwpLeosVplsVirtualSwitchEtypeTranslationRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 30, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEtypeTranslationRowStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEtypeTranslationRowStatus.setDescription("This object can be set to 'createandgo' to add entry in the table. This object can be set to 'destroy' to delete entry in the table. Refer to description of table entry to see how to create entries in the table.")
wwpLeosVplsTunnelPairTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 31), )
if mibBuilder.loadTexts: wwpLeosVplsTunnelPairTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsTunnelPairTable.setDescription('This table allows creating tunnel pairs. Having a tunnel pair will force the device to accept pbt encapsulated frames on given pair of tunnels ports and not on any port. This table is only accessible in PBT mode.')
wwpLeosVplsTunnelPairEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 31, 1), ).setIndexNames((0, "WWP-LEOS-VPLS-MIB", "wwpLeosVplsTunnelPairIndx"))
if mibBuilder.loadTexts: wwpLeosVplsTunnelPairEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsTunnelPairEntry.setDescription('Each entry contains the tunnel pair.')
wwpLeosVplsTunnelPairIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 31, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: wwpLeosVplsTunnelPairIndx.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsTunnelPairIndx.setDescription('This object represent the index in the table.')
wwpLeosVplsTunnelPairName = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 31, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosVplsTunnelPairName.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsTunnelPairName.setDescription('This object represent the name of the pair and must be unique. This object cannot be modified once entry is created.')
wwpLeosVplsTunnelPairEncapTunnelIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 31, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosVplsTunnelPairEncapTunnelIndx.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsTunnelPairEncapTunnelIndx.setDescription('This object represent the encap tunnel that is part of this tunnel pair. This tunnel index should be valid and must exist in wwpLeosVplsEncapTunnelTable. This object cannot be modified once entry is created.')
wwpLeosVplsTunnelPairDecapTunnelIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 31, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosVplsTunnelPairDecapTunnelIndx.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsTunnelPairDecapTunnelIndx.setDescription('This object represent the decap tunnel that is part of this tunnel pair. This tunnel index should be valid and must exist in wwpLeosVplsDecapTunnelTable. This object cannot be modified once entry is created.')
wwpLeosVplsTunnelPairRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 31, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosVplsTunnelPairRowStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsTunnelPairRowStatus.setDescription("This object can be set to 'createandgo' to add entry in the table. This object can be set to 'destroy' to delete entry in the table. Refer to description of table entry to see how to create entries in the table.")
wwpLeosVplsVirtualSwitchMplsEvplMemberTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 32), )
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchMplsEvplMemberTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchMplsEvplMemberTable.setDescription('This table is used to create mpls virtual switch subscriber port-vlan membership entry.')
wwpLeosVplsVirtualSwitchMplsEvplMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 32, 1), ).setIndexNames((0, "WWP-LEOS-VPLS-MIB", "wwpLeosVplsVirtualSwitchMplsIndx"), (0, "WWP-LEOS-VPLS-MIB", "wwpLeosVplsVirtualSwitchMplsEvplMemberPortId"), (0, "WWP-LEOS-VPLS-MIB", "wwpLeosVplsVirtualSwitchMplsEvplMemberVlanId"))
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchMplsEvplMemberEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchMplsEvplMemberEntry.setDescription('This entry corresponds to single port-vlan subscriber entry in wwpLeosVplsVirtualSwitchMplsEvplMemberTable table.')
wwpLeosVplsVirtualSwitchMplsEvplMemberPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 32, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchMplsEvplMemberPortId.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchMplsEvplMemberPortId.setDescription('This object specifies the port number which is to be added as a customer facing port for the mpls virtual switch index wwpLeosVplsVirtualSwitchMplsIndx.')
wwpLeosVplsVirtualSwitchMplsEvplMemberVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 32, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchMplsEvplMemberVlanId.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchMplsEvplMemberVlanId.setDescription('This object specifies the subscriber vlan attached to this mpls virtual switch index wwpLeosVplsVirtualSwitchMplsIndx. This object cannot be modified once entry is created in this table. This object can only be specified when creating entries in this table.')
wwpLeosVplsVirtualSwitchMplsEvplMemberRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 32, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchMplsEvplMemberRowStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchMplsEvplMemberRowStatus.setDescription("Used to manage the creation and deletion of the conceptual rows in this table. To create a row in this table, a manager must set this object to 'createAndGo'. To delete a row in this table, a manager must set this object to 'destroy'. If the entry exists, it will be displayed as 'active'.")
wwpLeosVplsVirtualSwitchMplsEvplMemberEncapCosPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 32, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("fixed", 1), ("inheritDot1dPri", 2), ("inheritIpPrec", 3), ("inheritPhbg", 4), ("inheritVs", 5), ("port-inherit", 6))).clone('inheritVs')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchMplsEvplMemberEncapCosPolicy.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchMplsEvplMemberEncapCosPolicy.setDescription('This object specifies the ingress cos policy for given EVPL entry.')
wwpLeosVplsVirtualSwitchMplsEvplMemberEncapFixedDot1dPri = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 32, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchMplsEvplMemberEncapFixedDot1dPri.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchMplsEvplMemberEncapFixedDot1dPri.setDescription("This object specifies the ingress fixed cos attributes for given member entry. This attribute is only valid when the EncapCosPolicy is set to 'fixed'")
wwpLeosVplsVirtualSwitchMplsEvplMemberSubscriberDot1dPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 32, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("leave", 1), ("provider-inherit", 2), ("inheritVs", 3))).clone('inheritVs')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchMplsEvplMemberSubscriberDot1dPolicy.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchMplsEvplMemberSubscriberDot1dPolicy.setDescription("This object configures the member policy used to decide if the subscriber frame's 'c-vlan' .1d priorty should be left alone 'leave', or remarked 'provider-inherit' to the resolved provider 's-vlan' priority. This attribute is valid when the member's SubscriberDot1Policy is 'leave' or 'provider-inherit'. If stt to 'inheritVs' the attribute is inherited from the parent virtual-switch")
wwpLeosVplsVirtualSwitchMplsEvplMemberStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 33), )
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchMplsEvplMemberStatsTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchMplsEvplMemberStatsTable.setDescription('The (conceptual) table listing the virtual switch member stats table.')
wwpLeosVplsVirtualSwitchMplsEvplMemberStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 33, 1), ).setIndexNames((0, "WWP-LEOS-VPLS-MIB", "wwpLeosVplsVirtualSwitchMplsIndx"), (0, "WWP-LEOS-VPLS-MIB", "wwpLeosVplsVirtualSwitchMplsEvplMemberPortId"), (0, "WWP-LEOS-VPLS-MIB", "wwpLeosVplsVirtualSwitchMplsEvplMemberVlanId"))
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchMplsEvplMemberStatsEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchMplsEvplMemberStatsEntry.setDescription('The virtual switch member stats table entry index by wwpLeosVplsVirtualSwitchMplsIndx, wwpLeosVplsVirtualSwitchMplsMemberPortId and VlanId.')
wwpLeosVplsVirtualSwitchMplsEvplMemberRxBytesHi = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 33, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchMplsEvplMemberRxBytesHi.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchMplsEvplMemberRxBytesHi.setDescription('This represents the total number of higher 32 bits received for given mpls virtual switch member port.')
wwpLeosVplsVirtualSwitchMplsEvplMemberRxBytesLo = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 33, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchMplsEvplMemberRxBytesLo.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchMplsEvplMemberRxBytesLo.setDescription('This represents the total number of lower 32 bits received for given virtual switch member port.')
wwpLeosVplsVirtualSwitchEthEvplMemberTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 34), )
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEthEvplMemberTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEthEvplMemberTable.setDescription('This table is used to create virtual switch membership entry.')
wwpLeosVplsVirtualSwitchEthEvplMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 34, 1), ).setIndexNames((0, "WWP-LEOS-VPLS-MIB", "wwpLeosVplsVirtualSwitchEthIndx"), (0, "WWP-LEOS-VPLS-MIB", "wwpLeosVplsVirtualSwitchEthEvplMemberPortId"), (0, "WWP-LEOS-VPLS-MIB", "wwpLeosVplsVirtualSwitchEthEvplMemberVlan"))
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEthEvplMemberEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEthEvplMemberEntry.setDescription('This entry corresponds to single entry in wwpLeosVplsVirtualSwitchEthernetEvplMemberTable table.')
wwpLeosVplsVirtualSwitchEthEvplMemberPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 34, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEthEvplMemberPortId.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEthEvplMemberPortId.setDescription('This object specifies the port id associated with wwpLeosVplsVirtualSwitchEthIndx.')
wwpLeosVplsVirtualSwitchEthEvplMemberVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 34, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEthEvplMemberVlan.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEthEvplMemberVlan.setDescription('This object specifies the subscriber vlan attached to this eth virtual switch index wwpLeosVplsVirtualSwitchEthIndx. This object cannot be modified one entry is created. This object can only be specified when entry is created in this table.')
wwpLeosVplsVirtualSwitchEthEvplMemberRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 34, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEthEvplMemberRowStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEthEvplMemberRowStatus.setDescription("This object can be set to 'createandgo' to add entry in the table. This object can be set to 'destroy' to delete entry in the table. Refer to description of table entry to see how to create entries in the table.")
wwpLeosVplsVirtualSwitchEthEvplMemberEncapCosPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 34, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("fixed", 1), ("inheritDot1dPri", 2), ("inheritIpPrec", 3), ("inheritPhbg", 4), ("inheritVs", 5), ("port-inherit", 6))).clone('inheritVs')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEthEvplMemberEncapCosPolicy.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEthEvplMemberEncapCosPolicy.setDescription('This object specifies the ingress cos policy for given EVPL entry.')
wwpLeosVplsVirtualSwitchEthEvplMemberEncapFixedDot1dPri = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 34, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEthEvplMemberEncapFixedDot1dPri.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEthEvplMemberEncapFixedDot1dPri.setDescription("This object specifies the ingress fixed cos attributes for given member entry. This attribute is only valid when the EncapCosPolicy is set to 'fixed'")
wwpLeosVplsVirtualSwitchEthEvplMemberSubscriberDot1dPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 34, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("leave", 1), ("provider-inherit", 2), ("inheritVs", 3))).clone('inheritVs')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEthEvplMemberSubscriberDot1dPolicy.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEthEvplMemberSubscriberDot1dPolicy.setDescription("This object configures the member policy used to decide if the subscriber frame's 'c-vlan' .1d priorty should be left alone 'leave', or remarked 'provider-inherit' to the resolved provider 's-vlan' priority. This attribute is valid when the member's SubscriberDot1Policy is 'leave' or 'provider-inherit'. If stt to 'inheritVs' the attribute is inherited from the parent virtual-switch")
wwpLeosVplsVirtualSwitchEthEvplMemberTranslateTag = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 34, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEthEvplMemberTranslateTag.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEthEvplMemberTranslateTag.setDescription('Subscriber VLAN translate stamp.')
wwpLeosVplsVirtualSwitchEthEvplMemberServiceVlanTpid = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 34, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 99))).clone(namedValues=NamedValues(("tpid8100", 1), ("tpid9100", 2), ("tpid88A8", 3), ("none", 99)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEthEvplMemberServiceVlanTpid.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEthEvplMemberServiceVlanTpid.setDescription('This object specifies the service VLAN TPID.It is currently only applicable for VS instances associated with an MPLS enabled VS ')
wwpLeosVplsVirtualSwitchEthEvplMemberStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 35), )
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEthEvplMemberStatsTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEthEvplMemberStatsTable.setDescription('The (conceptual) table listing the virtual switch member stats table.')
wwpLeosVplsVirtualSwitchEthEvplMemberStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 35, 1), ).setIndexNames((0, "WWP-LEOS-VPLS-MIB", "wwpLeosVplsVirtualSwitchEthIndx"), (0, "WWP-LEOS-VPLS-MIB", "wwpLeosVplsVirtualSwitchEthEvplMemberPortId"), (0, "WWP-LEOS-VPLS-MIB", "wwpLeosVplsVirtualSwitchEthEvplMemberVlan"))
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEthEvplMemberStatsEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEthEvplMemberStatsEntry.setDescription('The virtual switch member stats table entry index by wwpLeosVplsVirtualSwitchEthIndx, wwpLeosVplsVirtualSwitchEthMemberPortId and VlanId.')
wwpLeosVplsVirtualSwitchEthEvplMemberRxBytesHi = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 35, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEthEvplMemberRxBytesHi.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEthEvplMemberRxBytesHi.setDescription('This represents the total number of higher 32 bits received for given virtual switch member port.')
wwpLeosVplsVirtualSwitchEthEvplMemberRxBytesLo = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 35, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEthEvplMemberRxBytesLo.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEthEvplMemberRxBytesLo.setDescription('This represents the total number of lower 32 bits received for given virtual switch member port.')
wwpLeosVplsVirtualCircuitEthTotalStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 36), )
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitEthTotalStatsTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitEthTotalStatsTable.setDescription('The (conceptual) table listing the virtual circuit stats table.')
wwpLeosVplsVirtualCircuitEthTotalStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 36, 1), ).setIndexNames((0, "WWP-LEOS-VPLS-MIB", "wwpLeosVplsVirtualCircuitEthIndex"))
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitEthTotalStatsEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitEthTotalStatsEntry.setDescription('The ethernet virtual circuit stats table entry index by wwpLeosVplsVirtualCircuitMplsIndex.')
wwpLeosVplsVirtualCircuitEthTotalTxBytesHi = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 36, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitEthTotalTxBytesHi.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitEthTotalTxBytesHi.setDescription('This represents the total number of higher 32 bits transmitted for given virtual circuit.')
wwpLeosVplsVirtualCircuitEthTotalTxBytesLo = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 36, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitEthTotalTxBytesLo.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitEthTotalTxBytesLo.setDescription('This represents the total number of lower 32 bits transmitted for given virtual circuit.')
wwpLeosVplsVirtualCircuitEthTotalRxBytesHi = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 36, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitEthTotalRxBytesHi.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitEthTotalRxBytesHi.setDescription('This represents the total number of higher 32 bits received for given virtual circuit.')
wwpLeosVplsVirtualCircuitEthTotalRxBytesLo = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 36, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitEthTotalRxBytesLo.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitEthTotalRxBytesLo.setDescription('This represents the total number of lower 32 bits received for given virtual circuit.')
wwpLeosVplsVirtualCircuitMplsTotalStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 37), )
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitMplsTotalStatsTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitMplsTotalStatsTable.setDescription('The (conceptual) table listing the mpls virtual circuit stats table.')
wwpLeosVplsVirtualCircuitMplsTotalStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 37, 1), ).setIndexNames((0, "WWP-LEOS-VPLS-MIB", "wwpLeosVplsVirtualCircuitMplsIndex"))
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitMplsTotalStatsEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitMplsTotalStatsEntry.setDescription('The mpls virtual circuit stats table entry index by wwpLeosVplsVirtualCircuitMplsTotalIndex.')
wwpLeosVplsVirtualCircuitMplsTotalTxBytesHi = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 37, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitMplsTotalTxBytesHi.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitMplsTotalTxBytesHi.setDescription('This represents the total number of higher 32 bits transmitted for given virtual circuit.')
wwpLeosVplsVirtualCircuitMplsTotalTxBytesLo = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 37, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitMplsTotalTxBytesLo.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitMplsTotalTxBytesLo.setDescription('This represents the total number of lower 32 bits transmitted for given virtual circuit.')
wwpLeosVplsVirtualCircuitMplsTotalRxBytesHi = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 37, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitMplsTotalRxBytesHi.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitMplsTotalRxBytesHi.setDescription('This represents the total number of higher 32 bits received for given mpls virtual circuit.')
wwpLeosVplsVirtualCircuitMplsTotalRxBytesLo = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 37, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitMplsTotalRxBytesLo.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualCircuitMplsTotalRxBytesLo.setDescription('This represents the total number of lower 32 bits received for given virtual circuit.')
wwpLeosVplsVirtualSwitchEthL2CftProtocolTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 49), )
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEthL2CftProtocolTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEthL2CftProtocolTable.setDescription('Table of Virtual Switch L2 CFT protocols.')
wwpLeosVplsVirtualSwitchEthL2CftProtocolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 49, 1), ).setIndexNames((0, "WWP-LEOS-VPLS-MIB", "wwpLeosVplsVirtualSwitchEthIndx"), (0, "WWP-LEOS-VPLS-MIB", "wwpLeosVplsVirtualSwitchEthL2CftProtocolType"))
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEthL2CftProtocolEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEthL2CftProtocolEntry.setDescription('Virtual Switch L2CFT protocol entry in the Virtual Switch L2CFT Protocol Table.')
wwpLeosVplsVirtualSwitchEthL2CftProtocolType = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 49, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 32, 33, 34, 99))).clone(namedValues=NamedValues(("ciscoCdp", 1), ("ciscoDtp", 2), ("ciscoPagp", 3), ("ciscoUdld", 4), ("ciscoVtp", 5), ("ciscoPvst", 6), ("ciscoStpUplinkFast", 7), ("vlanBridge", 8), ("rstp", 9), ("lacp", 10), ("lacpMarker", 11), ("oam", 12), ("lldp", 13), ("i8021x", 14), ("gmrp", 15), ("gvrp", 16), ("brigeBlock", 32), ("allBridgesBlock", 33), ("garpBlock", 34), ("unknown", 99))))
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEthL2CftProtocolType.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEthL2CftProtocolType.setDescription('This object specifies a unique protocol type-index into the table.')
wwpLeosVplsVirtualSwitchEthL2CftProtocolDisposition = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 49, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("forward", 1), ("discard", 2))).clone('forward')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEthL2CftProtocolDisposition.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEthL2CftProtocolDisposition.setDescription('This object specifies the virtual switch L2 CFT protocol action. May forward or drop frames that match this protocol at the virtual switch + RLAN layer')
wwpLeosVplsVirtualSwitchEthL2CftProtocolRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 49, 1, 64), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEthL2CftProtocolRowStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchEthL2CftProtocolRowStatus.setDescription("To create a row in this table, a manager must set this object to 'createAndGo'. To delete the entry set this to destroy. To update this entry this object may not be set.")
wwpLeosVplsVirtualSwitchCFTProtoStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 50), )
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchCFTProtoStatsTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchCFTProtoStatsTable.setDescription('The (conceptual) table listing the l2 control frame protocol stats for a given vlan.')
wwpLeosVplsVirtualSwitchCFTProtoStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 50, 1), ).setIndexNames((0, "WWP-LEOS-VPLS-MIB", "wwpLeosVplsVirtualSwitchCFTProtoStatsEntryVirtualSwitchIndx"), (0, "WWP-LEOS-VPLS-MIB", "wwpLeosVplsVirtualSwitchCFTProtol2ProtocolNum"))
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchCFTProtoStatsEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchCFTProtoStatsEntry.setDescription('The layer 2 control frame protocol stats entry for the vlan.')
wwpLeosVplsVirtualSwitchCFTProtoStatsEntryVirtualSwitchIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 50, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchCFTProtoStatsEntryVirtualSwitchIndx.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchCFTProtoStatsEntryVirtualSwitchIndx.setDescription('This object specifies the virtual switch index which is used as unique index in the table.')
wwpLeosVplsVirtualSwitchCFTProtol2RxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 50, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchCFTProtol2RxPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchCFTProtol2RxPkts.setDescription('Specifies number of packets ingressed matching protocol.')
wwpLeosVplsVirtualSwitchCFTProtol2TunneledPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 50, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchCFTProtol2TunneledPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchCFTProtol2TunneledPkts.setDescription('Specifies the number of packets that were made tunneled.')
wwpLeosVplsVirtualSwitchCFTProtol2PeerPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 50, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchCFTProtol2PeerPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchCFTProtol2PeerPkts.setDescription('Specifies the number of peered packets.')
wwpLeosVplsVirtualSwitchCFTProtol2DiscardedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 50, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchCFTProtol2DiscardedPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchCFTProtol2DiscardedPkts.setDescription('Specifies the number of discarded packets.')
wwpLeosVplsVirtualSwitchCFTProtol2DecodedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 50, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchCFTProtol2DecodedPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchCFTProtol2DecodedPkts.setDescription('Specifies the number of packets that came in tunneled and then restored.')
wwpLeosVplsVirtualSwitchCFTProtol2DecodedFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 50, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchCFTProtol2DecodedFailures.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchCFTProtol2DecodedFailures.setDescription("Specifies the number of packets that failed to 'untunnel'.")
wwpLeosVplsVirtualSwitchCFTProtol2TunneledSubcriberPortPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 50, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchCFTProtol2TunneledSubcriberPortPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchCFTProtol2TunneledSubcriberPortPkts.setDescription('Specifies the number of tunneled packets received on subscriber port.. ')
wwpLeosVplsVirtualSwitchCFTProtol2ProtocolNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 50, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("l28021x", 1), ("rstp", 2), ("ciscoCdp", 3), ("ciscoDtp", 4), ("ciscoPagp", 5), ("ciscoPvst", 6), ("ciscoUplinkFast", 7), ("ciscoUdlp", 8), ("ciscoVtp", 9), ("gvrp", 10), ("lacp", 11), ("lacpMarker", 12), ("lldp", 13), ("oam", 14), ("vlanBridge", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchCFTProtol2ProtocolNum.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchCFTProtol2ProtocolNum.setDescription('This object represent the list of protocols supported by the device.')
wwpLeosVplsVirtualSwitchCFTProtoTotalStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 51), )
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchCFTProtoTotalStatsTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchCFTProtoTotalStatsTable.setDescription('The (conceptual) table listing the l2 control frame protocol stats for a given vlan.')
wwpLeosVplsVirtualSwitchCFTProtoTotalStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 51, 1), ).setIndexNames((0, "WWP-LEOS-VPLS-MIB", "wwpLeosVplsVirtualSwitchCFTProtoTotalStatsEntryVirtualSwitchIndx"), (0, "WWP-LEOS-VPLS-MIB", "wwpLeosVplsVirtualSwitchCFTProtoTotall2ProtocolNum"))
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchCFTProtoTotalStatsEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchCFTProtoTotalStatsEntry.setDescription('The layer 2 control frame protocol stats entry for the vlan.')
wwpLeosVplsVirtualSwitchCFTProtoTotalStatsEntryVirtualSwitchIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 51, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchCFTProtoTotalStatsEntryVirtualSwitchIndx.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchCFTProtoTotalStatsEntryVirtualSwitchIndx.setDescription('This object specifies the virtual switch index which is used as unique index in the table.')
wwpLeosVplsVirtualSwitchCFTProtoTotall2RxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 51, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchCFTProtoTotall2RxPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchCFTProtoTotall2RxPkts.setDescription('Specifies number of packets ingressed matching protocol.')
wwpLeosVplsVirtualSwitchCFTProtoTotall2TunneledPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 51, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchCFTProtoTotall2TunneledPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchCFTProtoTotall2TunneledPkts.setDescription('Specifies the number of packets that were made tunneled.')
wwpLeosVplsVirtualSwitchCFTProtoTotall2PeerPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 51, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchCFTProtoTotall2PeerPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchCFTProtoTotall2PeerPkts.setDescription('Specifies the number of peered packets.')
wwpLeosVplsVirtualSwitchCFTProtoTotall2DiscardedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 51, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchCFTProtoTotall2DiscardedPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchCFTProtoTotall2DiscardedPkts.setDescription('Specifies the number of discarded packets.')
wwpLeosVplsVirtualSwitchCFTProtoTotall2DecodedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 51, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchCFTProtoTotall2DecodedPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchCFTProtoTotall2DecodedPkts.setDescription('Specifies the number of packets that came in tunneled and then restored.')
wwpLeosVplsVirtualSwitchCFTProtoTotall2DecodedFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 51, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchCFTProtoTotall2DecodedFailures.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchCFTProtoTotall2DecodedFailures.setDescription("Specifies the number of packets that failed to 'untunnel'.")
wwpLeosVplsVirtualSwitchCFTProtoTotall2TunneledSubcriberPortPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 51, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchCFTProtoTotall2TunneledSubcriberPortPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchCFTProtoTotall2TunneledSubcriberPortPkts.setDescription('Specifies the number of tunneled packets received on subscriber port.. ')
wwpLeosVplsVirtualSwitchCFTProtoTotall2ProtocolNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 28, 1, 1, 51, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("l28021x", 1), ("rstp", 2), ("ciscoCdp", 3), ("ciscoDtp", 4), ("ciscoPagp", 5), ("ciscoPvst", 6), ("ciscoUplinkFast", 7), ("ciscoUdlp", 8), ("ciscoVtp", 9), ("gvrp", 10), ("lacp", 11), ("lacpMarker", 12), ("lldp", 13), ("oam", 14), ("vlanBridge", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchCFTProtoTotall2ProtocolNum.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVplsVirtualSwitchCFTProtoTotall2ProtocolNum.setDescription('This object represent the list of protocols supported by the device.')
mibBuilder.exportSymbols("WWP-LEOS-VPLS-MIB", wwpLeosVplsVirtualCircuitMplsFixedTunnelId=wwpLeosVplsVirtualCircuitMplsFixedTunnelId, wwpLeosVplsDecapTunnelName=wwpLeosVplsDecapTunnelName, wwpLeosVplsEncapTunnelEntry=wwpLeosVplsEncapTunnelEntry, wwpLeosVplsEncapTunnelTable=wwpLeosVplsEncapTunnelTable, wwpLeosVplsVirtualSwitchMplsEvplMemberTable=wwpLeosVplsVirtualSwitchMplsEvplMemberTable, wwpLeosVplsEncapTunnelDestAddr=wwpLeosVplsEncapTunnelDestAddr, wwpLeosVplsSwitchReservedVlanStatus=wwpLeosVplsSwitchReservedVlanStatus, wwpLeosVplsVirtualCircuitType=wwpLeosVplsVirtualCircuitType, wwpLeosVplsVirtualSwitchCFTProtol2RxPkts=wwpLeosVplsVirtualSwitchCFTProtol2RxPkts, wwpLeosVplsVirtualSwitchMplsEvplMemberSubscriberDot1dPolicy=wwpLeosVplsVirtualSwitchMplsEvplMemberSubscriberDot1dPolicy, wwpLeosVplsVirtualCircuitMplsRxBytesLo=wwpLeosVplsVirtualCircuitMplsRxBytesLo, wwpLeosVplsVirtualCircuitMplsName=wwpLeosVplsVirtualCircuitMplsName, wwpLeosVplsVirtualCircuitMplsTotalStatsEntry=wwpLeosVplsVirtualCircuitMplsTotalStatsEntry, wwpLeosVplsVirtualCircuitMplsIndex=wwpLeosVplsVirtualCircuitMplsIndex, wwpLeosVplsVirtualSwitchMemberEntry=wwpLeosVplsVirtualSwitchMemberEntry, wwpLeosVplsVirtualCircuitMplsGroupId=wwpLeosVplsVirtualCircuitMplsGroupId, wwpLeosVplsVirtualSwitchMplsEvplMemberRxBytesHi=wwpLeosVplsVirtualSwitchMplsEvplMemberRxBytesHi, wwpLeosVplsVirtualSwitchCFTProtol2DecodedFailures=wwpLeosVplsVirtualSwitchCFTProtol2DecodedFailures, wwpLeosVplsVirtualSwitchCFTProtoTotall2DiscardedPkts=wwpLeosVplsVirtualSwitchCFTProtoTotall2DiscardedPkts, wwpLeosVplsSwitchMplsCtrlProtocolNum=wwpLeosVplsSwitchMplsCtrlProtocolNum, wwpLeosVplsVirtualCircuitIndex=wwpLeosVplsVirtualCircuitIndex, wwpLeosVplsVirtualCircuitStatsClear=wwpLeosVplsVirtualCircuitStatsClear, wwpLeosVplsMplsPathMemberEntry=wwpLeosVplsMplsPathMemberEntry, wwpLeosVplsVirtualSwitchCFTProtoTotall2DecodedPkts=wwpLeosVplsVirtualSwitchCFTProtoTotall2DecodedPkts, wwpLeosVplsVirtualSwitchMplsVpnId=wwpLeosVplsVirtualSwitchMplsVpnId, wwpLeosVplsEncapTunnelType=wwpLeosVplsEncapTunnelType, wwpLeosVplsVirtualSwitchEthMemberRxBytesHi=wwpLeosVplsVirtualSwitchEthMemberRxBytesHi, wwpLeosVplsMplsPathMemberIpIndex=wwpLeosVplsMplsPathMemberIpIndex, wwpLeosVplsEncapTunnelRowStatus=wwpLeosVplsEncapTunnelRowStatus, wwpLeosVplsDecapTunnelBVID=wwpLeosVplsDecapTunnelBVID, wwpLeosVplsVirtualSwitchMplsName=wwpLeosVplsVirtualSwitchMplsName, wwpLeosVplsVirtualSwitchCFTProtoTotalStatsEntry=wwpLeosVplsVirtualSwitchCFTProtoTotalStatsEntry, wwpLeosVplsVirtualSwitchMplsMacLrnState=wwpLeosVplsVirtualSwitchMplsMacLrnState, wwpLeosVplsVirtualSwitchMplsMemberMeshVcTable=wwpLeosVplsVirtualSwitchMplsMemberMeshVcTable, wwpLeosVplsDecapTunnelMac=wwpLeosVplsDecapTunnelMac, wwpLeosVplsVirtualCircuitMplsRxBytesHi=wwpLeosVplsVirtualCircuitMplsRxBytesHi, wwpLeosVplsVirtualSwitchEthL2CftProtocolType=wwpLeosVplsVirtualSwitchEthL2CftProtocolType, wwpLeosVplsVirtualCircuitProviderVlanId=wwpLeosVplsVirtualCircuitProviderVlanId, wwpLeosVplsSwitchCtrlProtocolEntry=wwpLeosVplsSwitchCtrlProtocolEntry, wwpLeosVplsVirtualCircuitMplsStatsEntry=wwpLeosVplsVirtualCircuitMplsStatsEntry, wwpLeosVplsVirtualSwitchEthTable=wwpLeosVplsVirtualSwitchEthTable, wwpLeosVplsVirtualSwitchEthMemberVlan=wwpLeosVplsVirtualSwitchEthMemberVlan, EtherType=EtherType, wwpLeosVplsVirtualSwitchEthMemberStatsEntry=wwpLeosVplsVirtualSwitchEthMemberStatsEntry, wwpLeosVplsEncapTunnelId=wwpLeosVplsEncapTunnelId, wwpLeosVplsVirtualSwitchCFTProtoStatsEntry=wwpLeosVplsVirtualSwitchCFTProtoStatsEntry, wwpLeosVplsVirtualSwitchMplsEvplMemberRxBytesLo=wwpLeosVplsVirtualSwitchMplsEvplMemberRxBytesLo, wwpLeosVplsVirtualSwitchMplsType=wwpLeosVplsVirtualSwitchMplsType, wwpLeosVplsMplsPathEntry=wwpLeosVplsMplsPathEntry, wwpLeosVplsVirtualSwitchMplsMemberVlanId=wwpLeosVplsVirtualSwitchMplsMemberVlanId, wwpLeosVplsDecapTunnelTable=wwpLeosVplsDecapTunnelTable, wwpLeosVplsSwitchEthCtrlProtocolNum=wwpLeosVplsSwitchEthCtrlProtocolNum, wwpLeosVplsRsvpAttrIndex=wwpLeosVplsRsvpAttrIndex, wwpLeosVplsEncapTunnelBVID=wwpLeosVplsEncapTunnelBVID, wwpLeosVplsVirtualSwitchDecapCosPolicy=wwpLeosVplsVirtualSwitchDecapCosPolicy, wwpLeosVplsVirtualCircuitEthTotalRxBytesLo=wwpLeosVplsVirtualCircuitEthTotalRxBytesLo, wwpLeosVplsVirtualSwitchMplsMemberRxBytesHi=wwpLeosVplsVirtualSwitchMplsMemberRxBytesHi, wwpLeosVplsVirtualCircuitMplsMtu=wwpLeosVplsVirtualCircuitMplsMtu, wwpLeosVplsVirtualSwitchEthEvplMemberServiceVlanTpid=wwpLeosVplsVirtualSwitchEthEvplMemberServiceVlanTpid, wwpLeosVplsTunnelFixedTTL=wwpLeosVplsTunnelFixedTTL, wwpLeosVplsSwitchCtrlProtocolNum=wwpLeosVplsSwitchCtrlProtocolNum, wwpLeosVplsTunnelPairDecapTunnelIndx=wwpLeosVplsTunnelPairDecapTunnelIndx, wwpLeosVplsEncapTunnelOperStatus=wwpLeosVplsEncapTunnelOperStatus, wwpLeosVplsVirtualSwitchMplsEvplMemberStatsTable=wwpLeosVplsVirtualSwitchMplsEvplMemberStatsTable, wwpLeosVplsVirtualSwitchMplsCtrlProtTransFrameValidate=wwpLeosVplsVirtualSwitchMplsCtrlProtTransFrameValidate, wwpLeosVplsTunnelPairEntry=wwpLeosVplsTunnelPairEntry, wwpLeosVplsMplsPathRowStatus=wwpLeosVplsMplsPathRowStatus, wwpLeosVplsEncapTunnelActive=wwpLeosVplsEncapTunnelActive, wwpLeosVplsSwitchCtrlProtocolTable=wwpLeosVplsSwitchCtrlProtocolTable, wwpLeosVplsVirtualSwitchEthTunnelMethod=wwpLeosVplsVirtualSwitchEthTunnelMethod, wwpLeosVplsVirtualSwitchEthCtrlProtTransFrameValidate=wwpLeosVplsVirtualSwitchEthCtrlProtTransFrameValidate, wwpLeosVplsSwitchReservedVlanEntry=wwpLeosVplsSwitchReservedVlanEntry, wwpLeosVplsVirtualSwitchMplsEvplMemberRowStatus=wwpLeosVplsVirtualSwitchMplsEvplMemberRowStatus, wwpLeosVplsVirtualCircuitMplsTotalTxBytesHi=wwpLeosVplsVirtualCircuitMplsTotalTxBytesHi, wwpLeosVplsVirtualCircuitEthTable=wwpLeosVplsVirtualCircuitEthTable, wwpLeosVplsVirtualCircuitEthEntry=wwpLeosVplsVirtualCircuitEthEntry, wwpLeosVplsVirtualSwitchMplsMemberMeshVcRowStatus=wwpLeosVplsVirtualSwitchMplsMemberMeshVcRowStatus, wwpLeosVplsVirtualSwitchMplsEntry=wwpLeosVplsVirtualSwitchMplsEntry, wwpLeosVplsEncapTunnelName=wwpLeosVplsEncapTunnelName, wwpLeosVplsVirtualCircuitMplsTunnelPolicy=wwpLeosVplsVirtualCircuitMplsTunnelPolicy, wwpLeosVplsVirtualCircuitEthProviderVlanId=wwpLeosVplsVirtualCircuitEthProviderVlanId, wwpLeosVplsVirtualCircuitMplsTotalTxBytesLo=wwpLeosVplsVirtualCircuitMplsTotalTxBytesLo, wwpLeosVplsVirtualSwitchMplsEvplMemberEntry=wwpLeosVplsVirtualSwitchMplsEvplMemberEntry, wwpLeosVplsEncapTunnelEncapFixedPCP=wwpLeosVplsEncapTunnelEncapFixedPCP, wwpLeosVplsVirtualSwitchEthIndx=wwpLeosVplsVirtualSwitchEthIndx, wwpLeosVplsVirtualSwitchEthMemberRxBytesLo=wwpLeosVplsVirtualSwitchEthMemberRxBytesLo, wwpLeosVplsVirtualSwitchMplsCtrlProtocolDot1dPri=wwpLeosVplsVirtualSwitchMplsCtrlProtocolDot1dPri, wwpLeosVplsVirtualSwitchEthEvplMemberVlan=wwpLeosVplsVirtualSwitchEthEvplMemberVlan, wwpLeosVplsDecapTunnelEntry=wwpLeosVplsDecapTunnelEntry, wwpLeosVplsVirtualSwitchCFTProtoTotall2PeerPkts=wwpLeosVplsVirtualSwitchCFTProtoTotall2PeerPkts, wwpLeosVplsVirtualSwitchMplsMemberStatsTable=wwpLeosVplsVirtualSwitchMplsMemberStatsTable, wwpLeosVplsVirtualSwitchMplsMemberStatsEntry=wwpLeosVplsVirtualSwitchMplsMemberStatsEntry, wwpLeosVplsVirtualSwitchName=wwpLeosVplsVirtualSwitchName, wwpLeosVplsVirtualCircuitMplsProtectionType=wwpLeosVplsVirtualCircuitMplsProtectionType, wwpLeosVplsRsvpAttrRecordRoute=wwpLeosVplsRsvpAttrRecordRoute, wwpLeosVplsVirtualCircuitMplsType=wwpLeosVplsVirtualCircuitMplsType, wwpLeosVplsVirtualCircuitMplsDestAddr=wwpLeosVplsVirtualCircuitMplsDestAddr, wwpLeosVplsVirtualSwitchEthVc=wwpLeosVplsVirtualSwitchEthVc, wwpLeosVplsVirtualSwitchEthEvplMemberTable=wwpLeosVplsVirtualSwitchEthEvplMemberTable, wwpLeosVplsRsvpAttrTable=wwpLeosVplsRsvpAttrTable, wwpLeosVplsSwitchMplsCtrlProtocolEntry=wwpLeosVplsSwitchMplsCtrlProtocolEntry, wwpLeosVplsVirtualSwitchEthEvplMemberPortId=wwpLeosVplsVirtualSwitchEthEvplMemberPortId, wwpLeosVplsVirtualCircuitTable=wwpLeosVplsVirtualCircuitTable, wwpLeosVplsVirtualSwitchEthMemberEncapCosPolicy=wwpLeosVplsVirtualSwitchEthMemberEncapCosPolicy, wwpLeosVplsVirtualSwitchActiveVc=wwpLeosVplsVirtualSwitchActiveVc, wwpLeosVplsEncapTunnelEgressPort=wwpLeosVplsEncapTunnelEgressPort, wwpLeosVplsMIBConformance=wwpLeosVplsMIBConformance, PYSNMP_MODULE_ID=wwpLeosVplsMIB, wwpLeosVplsEncapTunnelDestResolvedMac=wwpLeosVplsEncapTunnelDestResolvedMac, wwpLeosVplsDecapTunnelPort=wwpLeosVplsDecapTunnelPort, wwpLeosVplsEncapTunnelEncapLabel=wwpLeosVplsEncapTunnelEncapLabel, wwpLeosVplsVirtualSwitchDecapFixedDot1dPri=wwpLeosVplsVirtualSwitchDecapFixedDot1dPri, wwpLeosVplsVirtualCircuitMplsTotalRxBytesHi=wwpLeosVplsVirtualCircuitMplsTotalRxBytesHi, wwpLeosVplsVirtualSwitchEthMemberEntry=wwpLeosVplsVirtualSwitchEthMemberEntry, wwpLeosVplsVirtualSwitchCFTProtol2TunneledPkts=wwpLeosVplsVirtualSwitchCFTProtol2TunneledPkts, wwpLeosVplsVirtualSwitchMplsTable=wwpLeosVplsVirtualSwitchMplsTable, wwpLeosVplsEncapTunnelDestBridgeIndex=wwpLeosVplsEncapTunnelDestBridgeIndex, wwpLeosVplsDecapTunnelLabel=wwpLeosVplsDecapTunnelLabel, wwpLeosVplsVirtualSwitchCFTProtoTotall2RxPkts=wwpLeosVplsVirtualSwitchCFTProtoTotall2RxPkts, wwpLeosVplsVirtualSwitchCFTProtoTotall2TunneledSubcriberPortPkts=wwpLeosVplsVirtualSwitchCFTProtoTotall2TunneledSubcriberPortPkts, wwpLeosVplsSwitchReservedVlanId=wwpLeosVplsSwitchReservedVlanId, wwpLeosVplsVirtualSwitchMemberPortId=wwpLeosVplsVirtualSwitchMemberPortId, wwpLeosVplsVirtualCircuitMplsEncapLabel=wwpLeosVplsVirtualCircuitMplsEncapLabel, wwpLeosVplsDynamicLabelRangeEnd=wwpLeosVplsDynamicLabelRangeEnd, wwpLeosVplsVirtualSwitchMplsMemberEncapCosFixedDot1DPri=wwpLeosVplsVirtualSwitchMplsMemberEncapCosFixedDot1DPri, wwpLeosVplsVirtualSwitchEtypeTranslationOriginalEtype=wwpLeosVplsVirtualSwitchEtypeTranslationOriginalEtype, wwpLeosVplsVirtualSwitchMplsDecapTTLPolicy=wwpLeosVplsVirtualSwitchMplsDecapTTLPolicy, wwpLeosVplsVirtualSwitchCFTProtol2ProtocolNum=wwpLeosVplsVirtualSwitchCFTProtol2ProtocolNum, wwpLeosVplsDecapTunnelRowStatus=wwpLeosVplsDecapTunnelRowStatus, wwpLeosVplsSwitchMplsCtrlProtocolTable=wwpLeosVplsSwitchMplsCtrlProtocolTable, wwpLeosVplsVirtualSwitchCFTProtoTotalStatsEntryVirtualSwitchIndx=wwpLeosVplsVirtualSwitchCFTProtoTotalStatsEntryVirtualSwitchIndx, wwpLeosVpls=wwpLeosVpls, wwpLeosVplsMIBNotificationPrefix=wwpLeosVplsMIBNotificationPrefix, wwpLeosVplsVirtualSwitchMplsMemberAcVcTable=wwpLeosVplsVirtualSwitchMplsMemberAcVcTable, wwpLeosVplsVirtualCircuitEthTxBytesHi=wwpLeosVplsVirtualCircuitEthTxBytesHi, wwpLeosVplsVirtualSwitchCFTProtoTotall2TunneledPkts=wwpLeosVplsVirtualSwitchCFTProtoTotall2TunneledPkts, wwpLeosVplsVirtualCircuitEthIndex=wwpLeosVplsVirtualCircuitEthIndex, wwpLeosVplsVirtualCircuitEgressVcLabel=wwpLeosVplsVirtualCircuitEgressVcLabel, wwpLeosVplsSwitchReservedVlanTable=wwpLeosVplsSwitchReservedVlanTable, wwpLeosVplsVirtualCircuitEthTotalStatsTable=wwpLeosVplsVirtualCircuitEthTotalStatsTable, wwpLeosVplsVirtualSwitchEtypeTranslationEntry=wwpLeosVplsVirtualSwitchEtypeTranslationEntry, wwpLeosVplsVirtualSwitchEthEvplMemberEntry=wwpLeosVplsVirtualSwitchEthEvplMemberEntry, wwpLeosVplsVirtualSwitchEthEntry=wwpLeosVplsVirtualSwitchEthEntry, wwpLeosVplsVirtualSwitchMplsMemberRxBytesLo=wwpLeosVplsVirtualSwitchMplsMemberRxBytesLo, wwpLeosVplsTunnelPairName=wwpLeosVplsTunnelPairName, wwpLeosVplsDynamicLabelRangeStart=wwpLeosVplsDynamicLabelRangeStart, wwpLeosVplsRsvpAttrHoldPri=wwpLeosVplsRsvpAttrHoldPri, wwpLeosVplsVirtualCircuitEthRowStatus=wwpLeosVplsVirtualCircuitEthRowStatus, wwpLeosVplsVirtualCircuitMplsStatsTable=wwpLeosVplsVirtualCircuitMplsStatsTable, wwpLeosVplsEncapTunnelAdminStatus=wwpLeosVplsEncapTunnelAdminStatus, wwpLeosVplsVirtualSwitchCFTProtol2PeerPkts=wwpLeosVplsVirtualSwitchCFTProtol2PeerPkts, wwpLeosVplsVirtualSwitchMplsEvplMemberVlanId=wwpLeosVplsVirtualSwitchMplsEvplMemberVlanId, wwpLeosVplsMplsPathIndex=wwpLeosVplsMplsPathIndex, wwpLeosVplsVirtualCircuitMplsOperStatus=wwpLeosVplsVirtualCircuitMplsOperStatus, wwpLeosVplsVirtualSwitchMplsCtrlProtocolTunnelState=wwpLeosVplsVirtualSwitchMplsCtrlProtocolTunnelState, wwpLeosVplsMIB=wwpLeosVplsMIB, wwpLeosVplsTunnelPairIndx=wwpLeosVplsTunnelPairIndx, wwpLeosVplsSwitchEthCtrlProtocolTable=wwpLeosVplsSwitchEthCtrlProtocolTable, wwpLeosVplsMplsPathMemberIp=wwpLeosVplsMplsPathMemberIp, wwpLeosVplsSwitchEthCtrlProtocolEntry=wwpLeosVplsSwitchEthCtrlProtocolEntry, wwpLeosVplsVirtualSwitchEthEvplMemberSubscriberDot1dPolicy=wwpLeosVplsVirtualSwitchEthEvplMemberSubscriberDot1dPolicy, wwpLeosVplsVirtualSwitchEncapFixedDot1dPri=wwpLeosVplsVirtualSwitchEncapFixedDot1dPri, wwpLeosVplsVirtualSwitchMplsEvplMemberPortId=wwpLeosVplsVirtualSwitchMplsEvplMemberPortId, wwpLeosVplsVirtualSwitchMplsSubscriberDot1dPolicy=wwpLeosVplsVirtualSwitchMplsSubscriberDot1dPolicy, wwpLeosVplsVirtualSwitchEthDecapFixedDot1dPri=wwpLeosVplsVirtualSwitchEthDecapFixedDot1dPri, wwpLeosVplsVirtualCircuitMplsTable=wwpLeosVplsVirtualCircuitMplsTable, wwpLeosVplsVirtualSwitchMplsEncapCosPolicy=wwpLeosVplsVirtualSwitchMplsEncapCosPolicy, wwpLeosVplsVirtualSwitchMplsEvplMemberStatsEntry=wwpLeosVplsVirtualSwitchMplsEvplMemberStatsEntry, wwpLeosVplsMplsPathName=wwpLeosVplsMplsPathName, wwpLeosVplsVirtualSwitchCFTProtoTotall2ProtocolNum=wwpLeosVplsVirtualSwitchCFTProtoTotall2ProtocolNum, wwpLeosVplsVirtualCircuitEthTotalStatsEntry=wwpLeosVplsVirtualCircuitEthTotalStatsEntry, wwpLeosVplsMplsPathOptionIndex=wwpLeosVplsMplsPathOptionIndex, wwpLeosVplsVirtualSwitchEthCtrlProtocolDot1dPri=wwpLeosVplsVirtualSwitchEthCtrlProtocolDot1dPri, wwpLeosVplsSwitchMplsCtrlType=wwpLeosVplsSwitchMplsCtrlType, wwpLeosVplsVirtualCircuitEthName=wwpLeosVplsVirtualCircuitEthName, wwpLeosVplsVirtualCircuitMplsTotalStatsTable=wwpLeosVplsVirtualCircuitMplsTotalStatsTable, wwpLeosVplsSwitchEthCtrlType=wwpLeosVplsSwitchEthCtrlType, wwpLeosVplsVirtualCircuitEthRxBytesHi=wwpLeosVplsVirtualCircuitEthRxBytesHi, wwpLeosVplsVirtualSwitchMplsMemberTable=wwpLeosVplsVirtualSwitchMplsMemberTable, wwpLeosVplsVirtualSwitchEthEvplMemberStatsTable=wwpLeosVplsVirtualSwitchEthEvplMemberStatsTable, wwpLeosVplsVirtualCircuitMplsEntry=wwpLeosVplsVirtualCircuitMplsEntry, wwpLeosVplsVirtualSwitchEthEvplMemberEncapCosPolicy=wwpLeosVplsVirtualSwitchEthEvplMemberEncapCosPolicy, wwpLeosVplsVirtualSwitchEthHonorPriority=wwpLeosVplsVirtualSwitchEthHonorPriority, wwpLeosVplsVirtualCircuitMplsDecapLabel=wwpLeosVplsVirtualCircuitMplsDecapLabel, wwpLeosVplsEncapTunnelDestResolvedVlan=wwpLeosVplsEncapTunnelDestResolvedVlan, wwpLeosVplsVirtualCircuitMplsStatus=wwpLeosVplsVirtualCircuitMplsStatus, wwpLeosVplsVirtualCircuitPortId=wwpLeosVplsVirtualCircuitPortId, wwpLeosVplsVirtualSwitchMplsHonorPriority=wwpLeosVplsVirtualSwitchMplsHonorPriority, wwpLeosVplsVirtualSwitchMplsMemberMeshVcMeshVc=wwpLeosVplsVirtualSwitchMplsMemberMeshVcMeshVc, wwpLeosVplsMplsPathMemberTable=wwpLeosVplsMplsPathMemberTable, wwpLeosVplsVirtualSwitchMplsMemberSubscriberDot1dPolicy=wwpLeosVplsVirtualSwitchMplsMemberSubscriberDot1dPolicy, wwpLeosVplsVirtualCircuitEtherTypePolicy=wwpLeosVplsVirtualCircuitEtherTypePolicy, wwpLeosVplsVirtualCircuitMplsStatusTlv=wwpLeosVplsVirtualCircuitMplsStatusTlv, wwpLeosVplsVirtualCircuitName=wwpLeosVplsVirtualCircuitName, wwpLeosVplsVirtualCircuitEthTotalTxBytesHi=wwpLeosVplsVirtualCircuitEthTotalTxBytesHi, wwpLeosVplsDecapTunnelBridgeIndex=wwpLeosVplsDecapTunnelBridgeIndex, wwpLeosVplsVirtualSwitchEthSubscriberDot1dPolicy=wwpLeosVplsVirtualSwitchEthSubscriberDot1dPolicy, wwpLeosVplsVirtualSwitchEthEncapCosPolicy=wwpLeosVplsVirtualSwitchEthEncapCosPolicy, wwpLeosVplsEncapTunnelProtType=wwpLeosVplsEncapTunnelProtType, wwpLeosVplsVirtualCircuitEthStatsEntry=wwpLeosVplsVirtualCircuitEthStatsEntry, wwpLeosVplsMIBObjects=wwpLeosVplsMIBObjects, wwpLeosVplsVirtualSwitchMemberTable=wwpLeosVplsVirtualSwitchMemberTable, wwpLeosVplsVirtualCircuitMplsTotalRxBytesLo=wwpLeosVplsVirtualCircuitMplsTotalRxBytesLo, wwpLeosVplsVirtualSwitchCFTProtol2DecodedPkts=wwpLeosVplsVirtualSwitchCFTProtol2DecodedPkts, wwpLeosVplsVirtualSwitchEthDescription=wwpLeosVplsVirtualSwitchEthDescription, wwpLeosVplsEncapTunnelEncapCosPolicy=wwpLeosVplsEncapTunnelEncapCosPolicy, wwpLeosVplsEncapTunnelEncapFixedExp=wwpLeosVplsEncapTunnelEncapFixedExp, wwpLeosVplsVirtualCircuitEthTotalRxBytesHi=wwpLeosVplsVirtualCircuitEthTotalRxBytesHi, wwpLeosVplsVirtualSwitchIndx=wwpLeosVplsVirtualSwitchIndx, wwpLeosVplsVirtualSwitchEtypeTranslationTable=wwpLeosVplsVirtualSwitchEtypeTranslationTable, wwpLeosVplsVirtualSwitchMemberStatus=wwpLeosVplsVirtualSwitchMemberStatus, wwpLeosVplsVirtualCircuitStatus=wwpLeosVplsVirtualCircuitStatus, wwpLeosVplsVirtualSwitchEthName=wwpLeosVplsVirtualSwitchEthName, wwpLeosVplsTunnelPairTable=wwpLeosVplsTunnelPairTable, wwpLeosVplsVirtualSwitchMplsMemberEntry=wwpLeosVplsVirtualSwitchMplsMemberEntry, wwpLeosVplsVirtualSwitchMplsEvplMemberEncapFixedDot1dPri=wwpLeosVplsVirtualSwitchMplsEvplMemberEncapFixedDot1dPri, wwpLeosVplsVirtualSwitchEthMemberStatsTable=wwpLeosVplsVirtualSwitchEthMemberStatsTable, wwpLeosVplsVirtualSwitchMplsMemberAcVcRowStatus=wwpLeosVplsVirtualSwitchMplsMemberAcVcRowStatus, wwpLeosVplsVirtualSwitchEthEvplMemberStatsEntry=wwpLeosVplsVirtualSwitchEthEvplMemberStatsEntry, wwpLeosVplsVirtualSwitchCFTProtoTotall2DecodedFailures=wwpLeosVplsVirtualSwitchCFTProtoTotall2DecodedFailures, wwpLeosVplsVirtualSwitchEthEvplMemberRxBytesHi=wwpLeosVplsVirtualSwitchEthEvplMemberRxBytesHi, wwpLeosVplsVirtualSwitchEthEvplMemberRowStatus=wwpLeosVplsVirtualSwitchEthEvplMemberRowStatus, wwpLeosVplsEncapTunnelTTLPolicy=wwpLeosVplsEncapTunnelTTLPolicy, wwpLeosVplsVirtualSwitchEthEvplMemberRxBytesLo=wwpLeosVplsVirtualSwitchEthEvplMemberRxBytesLo, wwpLeosVplsVirtualSwitchTable=wwpLeosVplsVirtualSwitchTable, wwpLeosVplsEncapTunnelDestResolvedPort=wwpLeosVplsEncapTunnelDestResolvedPort, wwpLeosVplsVirtualSwitchEthEvplMemberTranslateTag=wwpLeosVplsVirtualSwitchEthEvplMemberTranslateTag, wwpLeosVplsVirtualSwitchEthEvplMemberEncapFixedDot1dPri=wwpLeosVplsVirtualSwitchEthEvplMemberEncapFixedDot1dPri, wwpLeosVplsVirtualCircuitEtherTypeEntry=wwpLeosVplsVirtualCircuitEtherTypeEntry, wwpLeosVplsVirtualSwitchEthMemberEncapCosFixedDot1DPri=wwpLeosVplsVirtualSwitchEthMemberEncapCosFixedDot1DPri, wwpLeosVplsVirtualSwitchEthMemberPortId=wwpLeosVplsVirtualSwitchEthMemberPortId, wwpLeosVplsMplsPathMemberRowStatus=wwpLeosVplsMplsPathMemberRowStatus, wwpLeosVplsStaticLabelRangeEnd=wwpLeosVplsStaticLabelRangeEnd, wwpLeosVplsDecapTunnelId=wwpLeosVplsDecapTunnelId, wwpLeosVirtualCircuitEthStatsClear=wwpLeosVirtualCircuitEthStatsClear, wwpLeosVplsVirtualSwitchMplsMemberPortId=wwpLeosVplsVirtualSwitchMplsMemberPortId, wwpLeosVplsMIBNotifications=wwpLeosVplsMIBNotifications, wwpLeosVplsVirtualSwitchEthReservedVlan=wwpLeosVplsVirtualSwitchEthReservedVlan, wwpLeosVplsStaticLabelRangeStart=wwpLeosVplsStaticLabelRangeStart, wwpLeosVplsVirtualSwitchEntry=wwpLeosVplsVirtualSwitchEntry, wwpLeosVplsVirtualSwitchEthL2CftProtocolRowStatus=wwpLeosVplsVirtualSwitchEthL2CftProtocolRowStatus, wwpLeosVplsVirtualSwitchMplsDecapFixedDot1dPri=wwpLeosVplsVirtualSwitchMplsDecapFixedDot1dPri, wwpLeosVplsTunnelPairRowStatus=wwpLeosVplsTunnelPairRowStatus, wwpLeosVplsVirtualCircuitEntry=wwpLeosVplsVirtualCircuitEntry, wwpLeosVplsVirtualSwitchCtrlProtocolTunnelState=wwpLeosVplsVirtualSwitchCtrlProtocolTunnelState, wwpLeosVplsVirtualSwitchEncapCosPolicy=wwpLeosVplsVirtualSwitchEncapCosPolicy, VlanId=VlanId, wwpLeosVplsVirtualCircuitEtherTypeTable=wwpLeosVplsVirtualCircuitEtherTypeTable, wwpLeosVplsVirtualSwitchEthL2CftProtocolDisposition=wwpLeosVplsVirtualSwitchEthL2CftProtocolDisposition, wwpLeosVplsVirtualCircuitMplsTxBytesHi=wwpLeosVplsVirtualCircuitMplsTxBytesHi, wwpLeosVplsVirtualSwitchEtypeTranslationRowStatus=wwpLeosVplsVirtualSwitchEtypeTranslationRowStatus, wwpLeosVplsVirtualSwitchMplsRowStatus=wwpLeosVplsVirtualSwitchMplsRowStatus, wwpLeosVplsTunnelPairEncapTunnelIndx=wwpLeosVplsTunnelPairEncapTunnelIndx, wwpLeosVplsVirtualSwitchEthVcType=wwpLeosVplsVirtualSwitchEthVcType)
mibBuilder.exportSymbols("WWP-LEOS-VPLS-MIB", wwpLeosVplsVirtualSwitchCFTProtol2TunneledSubcriberPortPkts=wwpLeosVplsVirtualSwitchCFTProtol2TunneledSubcriberPortPkts, wwpLeosVplsVirtualSwitchCFTProtoStatsTable=wwpLeosVplsVirtualSwitchCFTProtoStatsTable, wwpLeosVplsDecapTunnelOperStatus=wwpLeosVplsDecapTunnelOperStatus, wwpLeosVplsVirtualSwitchCFTProtoStatsEntryVirtualSwitchIndx=wwpLeosVplsVirtualSwitchCFTProtoStatsEntryVirtualSwitchIndx, wwpLeosVplsVirtualCircuitEtherType=wwpLeosVplsVirtualCircuitEtherType, wwpLeosVplsVirtualSwitchMplsMemberEncapCosPolicy=wwpLeosVplsVirtualSwitchMplsMemberEncapCosPolicy, wwpLeosVplsVirtualSwitchMplsMemberAcVcEntry=wwpLeosVplsVirtualSwitchMplsMemberAcVcEntry, wwpLeosVplsVirtualSwitchEtypeTranslationMappedEtype=wwpLeosVplsVirtualSwitchEtypeTranslationMappedEtype, wwpLeosVplsVirtualSwitchPriVc=wwpLeosVplsVirtualSwitchPriVc, wwpLeosVplsVirtualSwitchEthCtrlProtocolTunnelState=wwpLeosVplsVirtualSwitchEthCtrlProtocolTunnelState, wwpLeosVplsVirtualCircuitEthStatsMonitor=wwpLeosVplsVirtualCircuitEthStatsMonitor, wwpLeosVplsSwitchCtrlType=wwpLeosVplsSwitchCtrlType, wwpLeosVplsVirtualSwitchCFTProtol2DiscardedPkts=wwpLeosVplsVirtualSwitchCFTProtol2DiscardedPkts, wwpLeosVplsEncapTunnelPartnerTunnelId=wwpLeosVplsEncapTunnelPartnerTunnelId, wwpLeosVplsVirtualCircuitIngressVcLabel=wwpLeosVplsVirtualCircuitIngressVcLabel, wwpLeosVplsVirtualSwitchMplsEncapFixedDot1dPri=wwpLeosVplsVirtualSwitchMplsEncapFixedDot1dPri, wwpLeosVplsVirtualSwitchEthRowStatus=wwpLeosVplsVirtualSwitchEthRowStatus, wwpLeosVplsVirtualCircuitEthTxBytesLo=wwpLeosVplsVirtualCircuitEthTxBytesLo, wwpLeosVplsRsvpAttrSetupPri=wwpLeosVplsRsvpAttrSetupPri, wwpLeosVplsVirtualSwitchEthMacLrnState=wwpLeosVplsVirtualSwitchEthMacLrnState, wwpLeosVplsVirtualSwitchMplsIndx=wwpLeosVplsVirtualSwitchMplsIndx, wwpLeosVplsEncapTunnelLspType=wwpLeosVplsEncapTunnelLspType, wwpLeosVplsDecapTunnelType=wwpLeosVplsDecapTunnelType, wwpLeosVplsVirtualSwitchEthMemberTable=wwpLeosVplsVirtualSwitchEthMemberTable, wwpLeosVplsVirtualSwitchSubscriberVlan=wwpLeosVplsVirtualSwitchSubscriberVlan, wwpLeosVplsEncapTunnelFastReroute=wwpLeosVplsEncapTunnelFastReroute, wwpLeosVplsResolverTimeout=wwpLeosVplsResolverTimeout, wwpLeosVplsEncapTunnelPathIndex=wwpLeosVplsEncapTunnelPathIndex, wwpLeosVplsVirtualSwitchMplsTunnelMethod=wwpLeosVplsVirtualSwitchMplsTunnelMethod, wwpLeosVplsVirtualSwitchEthL2CftProtocolEntry=wwpLeosVplsVirtualSwitchEthL2CftProtocolEntry, wwpLeosVplsVirtualSwitchMplsEvplMemberEncapCosPolicy=wwpLeosVplsVirtualSwitchMplsEvplMemberEncapCosPolicy, wwpLeosVplsVirtualSwitchEthL2CftProtocolTable=wwpLeosVplsVirtualSwitchEthL2CftProtocolTable, wwpLeosVplsVirtualSwitchSecVc=wwpLeosVplsVirtualSwitchSecVc, wwpLeosVplsVirtualCircuitMplsTxBytesLo=wwpLeosVplsVirtualCircuitMplsTxBytesLo, wwpLeosVplsVirtualSwitchMplsMemberRowStatus=wwpLeosVplsVirtualSwitchMplsMemberRowStatus, wwpLeosVplsVirtualSwitchEthEncapFixedDot1dPri=wwpLeosVplsVirtualSwitchEthEncapFixedDot1dPri, wwpLeosVplsVirtualSwitchEthMemberRowStatus=wwpLeosVplsVirtualSwitchEthMemberRowStatus, wwpLeosVplsMplsPathTable=wwpLeosVplsMplsPathTable, wwpLeosVplsVirtualCircuitEthRxBytesLo=wwpLeosVplsVirtualCircuitEthRxBytesLo, wwpLeosVplsVirtualCircuitMplsActiveTunnelId=wwpLeosVplsVirtualCircuitMplsActiveTunnelId, wwpLeosVplsVirtualSwitchCFTProtoTotalStatsTable=wwpLeosVplsVirtualSwitchCFTProtoTotalStatsTable, wwpLeosVplsVirtualCircuitTunnelIndx=wwpLeosVplsVirtualCircuitTunnelIndx, wwpLeosVplsGlobalAttrs=wwpLeosVplsGlobalAttrs, wwpLeosVplsMIBCompliances=wwpLeosVplsMIBCompliances, wwpLeosVplsVirtualSwitchEthDecapCosPolicy=wwpLeosVplsVirtualSwitchEthDecapCosPolicy, wwpLeosVplsRsvpAttrEntry=wwpLeosVplsRsvpAttrEntry, wwpLeosVplsVirtualSwitchEthMemberSubscriberDot1dPolicy=wwpLeosVplsVirtualSwitchEthMemberSubscriberDot1dPolicy, wwpLeosVplsMIBGroups=wwpLeosVplsMIBGroups, wwpLeosVplsVirtualSwitchMplsDecapCosPolicy=wwpLeosVplsVirtualSwitchMplsDecapCosPolicy, wwpLeosVplsVirtualSwitchStatus=wwpLeosVplsVirtualSwitchStatus, wwpLeosVplsVirtualCircuitEthStatsTable=wwpLeosVplsVirtualCircuitEthStatsTable, wwpLeosVplsVirtualSwitchMplsMemberAcVcAcVc=wwpLeosVplsVirtualSwitchMplsMemberAcVcAcVc, wwpLeosVplsVirtualCircuitEthTotalTxBytesLo=wwpLeosVplsVirtualCircuitEthTotalTxBytesLo, wwpLeosVplsVirtualSwitchType=wwpLeosVplsVirtualSwitchType, wwpLeosVplsVirtualSwitchMplsMemberMeshVcEntry=wwpLeosVplsVirtualSwitchMplsMemberMeshVcEntry)
