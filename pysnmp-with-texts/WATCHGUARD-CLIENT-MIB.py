#
# PySNMP MIB module WATCHGUARD-CLIENT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/WATCHGUARD-CLIENT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:35:57 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, Gauge32, NotificationType, Unsigned32, TimeTicks, MibIdentifier, Counter32, IpAddress, iso, Counter64, Bits, Integer32, enterprises, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Gauge32", "NotificationType", "Unsigned32", "TimeTicks", "MibIdentifier", "Counter32", "IpAddress", "iso", "Counter64", "Bits", "Integer32", "enterprises", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity")
TextualConvention, DisplayString, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "DateAndTime")
watchguard, = mibBuilder.importSymbols("WATCHGUARD-SMI", "watchguard")
wgInfoModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 3097, 6))
wgInfoModule.setRevisions(('2007-01-25 12:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: wgInfoModule.setRevisionsDescriptions(('Initial revision.',))
if mibBuilder.loadTexts: wgInfoModule.setLastUpdated('200701251200Z')
if mibBuilder.loadTexts: wgInfoModule.setOrganization('WatchGuard Technologies, Inc.')
if mibBuilder.loadTexts: wgInfoModule.setContactInfo(' WatchGuard Technologies, Inc. 505 Fifth Avenue South Suite 500 Seattle, WA 98104 United States +1.206.613.6600 ')
if mibBuilder.loadTexts: wgInfoModule.setDescription('The MIB module describes client information of WatchGuard system.')
wgClientMIB = ObjectIdentity((1, 3, 6, 1, 4, 1, 3097, 6, 2))
if mibBuilder.loadTexts: wgClientMIB.setStatus('current')
if mibBuilder.loadTexts: wgClientMIB.setDescription('This is the base object identifier for DHCP Server, DHCP Client and PPPoE Client')
wgClientDHCPServer = ObjectIdentity((1, 3, 6, 1, 4, 1, 3097, 6, 2, 1))
if mibBuilder.loadTexts: wgClientDHCPServer.setStatus('current')
if mibBuilder.loadTexts: wgClientDHCPServer.setDescription('This is the base object identifier for all DHCP server related information.')
wgClientDHCPClient = ObjectIdentity((1, 3, 6, 1, 4, 1, 3097, 6, 2, 2))
if mibBuilder.loadTexts: wgClientDHCPClient.setStatus('current')
if mibBuilder.loadTexts: wgClientDHCPClient.setDescription('This is the base object identifier for all DHCP client related information.')
wgClientPPPoEClient = ObjectIdentity((1, 3, 6, 1, 4, 1, 3097, 6, 2, 3))
if mibBuilder.loadTexts: wgClientPPPoEClient.setStatus('current')
if mibBuilder.loadTexts: wgClientPPPoEClient.setDescription('This is the base object identifier for all PPPoE client related information.')
wgClientDHCPServerEnable = MibScalar((1, 3, 6, 1, 4, 1, 3097, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("relay", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgClientDHCPServerEnable.setStatus('current')
if mibBuilder.loadTexts: wgClientDHCPServerEnable.setDescription('Indicates whether if DHCP Server has been enabled. ')
wgClientDHCPServerStartIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 3097, 6, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgClientDHCPServerStartIpAddress.setStatus('current')
if mibBuilder.loadTexts: wgClientDHCPServerStartIpAddress.setDescription('The starting IP address of the range of IP addresses leased by the DHCP server.')
wgClientDHCPServerEndIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 3097, 6, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgClientDHCPServerEndIpAddress.setStatus('current')
if mibBuilder.loadTexts: wgClientDHCPServerEndIpAddress.setDescription('The last IP address of the range of IP addresses leased by the DHCP Server. ')
wgClientDHCPServerLeaseTime = MibScalar((1, 3, 6, 1, 4, 1, 3097, 6, 2, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgClientDHCPServerLeaseTime.setStatus('current')
if mibBuilder.loadTexts: wgClientDHCPServerLeaseTime.setDescription('The lease time of an address assigned to a DHCP client. ')
wgClientDHCPServerNum = MibScalar((1, 3, 6, 1, 4, 1, 3097, 6, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgClientDHCPServerNum.setStatus('current')
if mibBuilder.loadTexts: wgClientDHCPServerNum.setDescription('The total number of entries in the wgClientDHCPServerTable. ')
wgClientDHCPServerConnTable = MibTable((1, 3, 6, 1, 4, 1, 3097, 6, 2, 1, 6), )
if mibBuilder.loadTexts: wgClientDHCPServerConnTable.setStatus('current')
if mibBuilder.loadTexts: wgClientDHCPServerConnTable.setDescription('This is the client lease table of the DHCP Server.')
wgClientDHCPServerRelayServer = MibScalar((1, 3, 6, 1, 4, 1, 3097, 6, 2, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgClientDHCPServerRelayServer.setStatus('current')
if mibBuilder.loadTexts: wgClientDHCPServerRelayServer.setDescription('The IP address of remote DHCP server to which DHCP requests should be relayed.')
wgClientDHCPServerConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3097, 6, 2, 1, 6, 1), ).setIndexNames((0, "WATCHGUARD-CLIENT-MIB", "wgClientDHCPServerConnIPAddr"))
if mibBuilder.loadTexts: wgClientDHCPServerConnEntry.setStatus('current')
if mibBuilder.loadTexts: wgClientDHCPServerConnEntry.setDescription('An entry (conceptual row) containing the leasing information of an assigned address by the DHCP Server.')
wgClientDHCPServerConnClientHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 6, 2, 1, 6, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgClientDHCPServerConnClientHostName.setStatus('current')
if mibBuilder.loadTexts: wgClientDHCPServerConnClientHostName.setDescription('The hostname of the client.')
wgClientDHCPServerConnIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 6, 2, 1, 6, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgClientDHCPServerConnIPAddr.setStatus('current')
if mibBuilder.loadTexts: wgClientDHCPServerConnIPAddr.setDescription('The IP address assigned to the client.')
wgClientDHCPServerConnMACAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 6, 2, 1, 6, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgClientDHCPServerConnMACAddr.setStatus('current')
if mibBuilder.loadTexts: wgClientDHCPServerConnMACAddr.setDescription('The MAC address of the client.')
wgClientDHCPServerConnLeaseTimeStart = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 6, 2, 1, 6, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgClientDHCPServerConnLeaseTimeStart.setStatus('current')
if mibBuilder.loadTexts: wgClientDHCPServerConnLeaseTimeStart.setDescription('The date and time when the lease starts.')
wgClientDHCPServerConnLeaseTimeEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 6, 2, 1, 6, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgClientDHCPServerConnLeaseTimeEnd.setStatus('current')
if mibBuilder.loadTexts: wgClientDHCPServerConnLeaseTimeEnd.setDescription('The date and time when the lease ends.')
wgClientDHCPClientEnable = MibScalar((1, 3, 6, 1, 4, 1, 3097, 6, 2, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgClientDHCPClientEnable.setStatus('current')
if mibBuilder.loadTexts: wgClientDHCPClientEnable.setDescription('Indicates whether interface 1 (public) is configured to obtain IP address through DHCP.')
wgClientDHCPClientDomainName = MibScalar((1, 3, 6, 1, 4, 1, 3097, 6, 2, 2, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgClientDHCPClientDomainName.setStatus('current')
if mibBuilder.loadTexts: wgClientDHCPClientDomainName.setDescription('The domain name of the DHCP Client.')
wgClientDHCPClientDefaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 3097, 6, 2, 2, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgClientDHCPClientDefaultGateway.setStatus('current')
if mibBuilder.loadTexts: wgClientDHCPClientDefaultGateway.setDescription('The IP address of the default gateway obtained by the DHCP client.')
wgClientDHCPClientDNSOne = MibScalar((1, 3, 6, 1, 4, 1, 3097, 6, 2, 2, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgClientDHCPClientDNSOne.setStatus('current')
if mibBuilder.loadTexts: wgClientDHCPClientDNSOne.setDescription('The IP address of the primary DNS server obtained by the DHCP client.')
wgClientDHCPClientDNSTwo = MibScalar((1, 3, 6, 1, 4, 1, 3097, 6, 2, 2, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgClientDHCPClientDNSTwo.setStatus('current')
if mibBuilder.loadTexts: wgClientDHCPClientDNSTwo.setDescription('The IP address of the secondary DNS server obtained by the DHCP client.')
wgClientPPPoEClientEnable = MibScalar((1, 3, 6, 1, 4, 1, 3097, 6, 2, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgClientPPPoEClientEnable.setStatus('current')
if mibBuilder.loadTexts: wgClientPPPoEClientEnable.setDescription('Indicates whether the interface 1 (public) is configured to use PPPoE.')
wgClientPPPoEClientADSLStatus = MibScalar((1, 3, 6, 1, 4, 1, 3097, 6, 2, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disconnect", 0), ("initialize", 1), ("establish", 2), ("authenticate", 3), ("network", 4), ("running", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgClientPPPoEClientADSLStatus.setStatus('current')
if mibBuilder.loadTexts: wgClientPPPoEClientADSLStatus.setDescription('The current ADSL status of the PPPoE Client. ')
wgClientPPPoEClientLocalIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 3097, 6, 2, 3, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgClientPPPoEClientLocalIPAddr.setStatus('current')
if mibBuilder.loadTexts: wgClientPPPoEClientLocalIPAddr.setDescription('The IP address obtained by the PPPoE Client.')
wgClientPPPoEClientRemoteIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 3097, 6, 2, 3, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgClientPPPoEClientRemoteIPAddr.setStatus('current')
if mibBuilder.loadTexts: wgClientPPPoEClientRemoteIPAddr.setDescription('The IP Address of the PPP server this PPPoE client connects to.')
wgClientPPPoEClientNetMask = MibScalar((1, 3, 6, 1, 4, 1, 3097, 6, 2, 3, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgClientPPPoEClientNetMask.setStatus('current')
if mibBuilder.loadTexts: wgClientPPPoEClientNetMask.setDescription('The subnet mask of the PPPoE client.')
wgClientPPPoEClientDNSOne = MibScalar((1, 3, 6, 1, 4, 1, 3097, 6, 2, 3, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgClientPPPoEClientDNSOne.setStatus('current')
if mibBuilder.loadTexts: wgClientPPPoEClientDNSOne.setDescription('The IP address of the primary DNS server obtained.')
wgClientPPPoEClientDNSTwo = MibScalar((1, 3, 6, 1, 4, 1, 3097, 6, 2, 3, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgClientPPPoEClientDNSTwo.setStatus('current')
if mibBuilder.loadTexts: wgClientPPPoEClientDNSTwo.setDescription('The IP address of the secondary DNS server obtained.')
wgClientPPPoEADSLPeerMACAddr = MibScalar((1, 3, 6, 1, 4, 1, 3097, 6, 2, 3, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgClientPPPoEADSLPeerMACAddr.setStatus('current')
if mibBuilder.loadTexts: wgClientPPPoEADSLPeerMACAddr.setDescription('The MAC Address of the PPP server this client connects to.')
wgClientPPPoEClientConnTime = MibScalar((1, 3, 6, 1, 4, 1, 3097, 6, 2, 3, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgClientPPPoEClientConnTime.setStatus('current')
if mibBuilder.loadTexts: wgClientPPPoEClientConnTime.setDescription('The connection time of the PPPoE connection.')
mibBuilder.exportSymbols("WATCHGUARD-CLIENT-MIB", wgClientMIB=wgClientMIB, wgClientPPPoEClientConnTime=wgClientPPPoEClientConnTime, wgClientDHCPServerConnTable=wgClientDHCPServerConnTable, wgClientPPPoEClientDNSOne=wgClientPPPoEClientDNSOne, wgClientDHCPClientDNSTwo=wgClientDHCPClientDNSTwo, wgClientPPPoEClientRemoteIPAddr=wgClientPPPoEClientRemoteIPAddr, wgClientDHCPServerConnClientHostName=wgClientDHCPServerConnClientHostName, wgClientDHCPClientEnable=wgClientDHCPClientEnable, wgClientDHCPServerConnLeaseTimeEnd=wgClientDHCPServerConnLeaseTimeEnd, wgClientDHCPServerConnIPAddr=wgClientDHCPServerConnIPAddr, wgClientDHCPClient=wgClientDHCPClient, wgClientPPPoEClientLocalIPAddr=wgClientPPPoEClientLocalIPAddr, wgClientPPPoEClientADSLStatus=wgClientPPPoEClientADSLStatus, wgClientDHCPServerConnLeaseTimeStart=wgClientDHCPServerConnLeaseTimeStart, wgClientDHCPServerEnable=wgClientDHCPServerEnable, wgClientDHCPServerNum=wgClientDHCPServerNum, wgClientDHCPServerConnMACAddr=wgClientDHCPServerConnMACAddr, wgClientDHCPClientDomainName=wgClientDHCPClientDomainName, wgClientPPPoEClientEnable=wgClientPPPoEClientEnable, wgClientDHCPServerEndIpAddress=wgClientDHCPServerEndIpAddress, wgClientPPPoEADSLPeerMACAddr=wgClientPPPoEADSLPeerMACAddr, wgClientDHCPClientDefaultGateway=wgClientDHCPClientDefaultGateway, wgClientDHCPServerRelayServer=wgClientDHCPServerRelayServer, wgClientDHCPServerLeaseTime=wgClientDHCPServerLeaseTime, wgClientPPPoEClientDNSTwo=wgClientPPPoEClientDNSTwo, wgClientDHCPClientDNSOne=wgClientDHCPClientDNSOne, wgClientDHCPServerConnEntry=wgClientDHCPServerConnEntry, wgClientPPPoEClientNetMask=wgClientPPPoEClientNetMask, wgInfoModule=wgInfoModule, wgClientDHCPServerStartIpAddress=wgClientDHCPServerStartIpAddress, wgClientPPPoEClient=wgClientPPPoEClient, wgClientDHCPServer=wgClientDHCPServer, PYSNMP_MODULE_ID=wgInfoModule)
