#
# PySNMP MIB module DES2218-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DES2218-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:39:32 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
TimeTicks, ObjectIdentity, Gauge32, Integer32, Counter32, Counter64, ModuleIdentity, iso, Bits, Unsigned32, MibIdentifier, IpAddress, enterprises, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "ObjectIdentity", "Gauge32", "Integer32", "Counter32", "Counter64", "ModuleIdentity", "iso", "Bits", "Unsigned32", "MibIdentifier", "IpAddress", "enterprises", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "NotificationType")
PhysAddress, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "PhysAddress", "DisplayString", "TextualConvention")
dlink = MibIdentifier((1, 3, 6, 1, 4, 1, 171))
dlink_products = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10)).setLabel("dlink-products")
dlink_Des2218Prod = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 7)).setLabel("dlink-Des2218Prod")
dlink_Des2218ProdId = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 7, 1)).setLabel("dlink-Des2218ProdId")
des2218SwHub = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 7, 2))
dlink_mgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11)).setLabel("dlink-mgmt")
agentConfigInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 1))
des2218series = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 7))
agentBasicInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 1, 1))
agentRuntimeSwVersion = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentRuntimeSwVersion.setStatus('mandatory')
if mibBuilder.loadTexts: agentRuntimeSwVersion.setDescription("This is a textual description of the runtime software version and revision. If the version number is one and revision number is zero agentRuntimeSwVersion would be 'Ver. 1.0'")
agentPromFwVersion = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPromFwVersion.setStatus('mandatory')
if mibBuilder.loadTexts: agentPromFwVersion.setDescription("This is a textual description of the agent PROM firmware version and revision. If the version number is one and revision number is zero agentPromFwVersion would be 'Ver. 1.0'")
agentHwRevision = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentHwRevision.setStatus('mandatory')
if mibBuilder.loadTexts: agentHwRevision.setDescription("This is a textual description of the hardware revision. The display string should look like 'Rev. A1'")
agentMgmtProtocolCapability = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("snmp-ip", 2), ("snmp-ipx", 3), ("snmp-ip-ipx", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentMgmtProtocolCapability.setStatus('mandatory')
if mibBuilder.loadTexts: agentMgmtProtocolCapability.setDescription('The network management protocol(s) supported by this agent.')
agentMibCapabilityTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 1, 1, 5), )
if mibBuilder.loadTexts: agentMibCapabilityTable.setStatus('mandatory')
if mibBuilder.loadTexts: agentMibCapabilityTable.setDescription('A list of MIB capability entries supported by this agent.')
agentMibCapabilityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 1, 1, 5, 1), ).setIndexNames((0, "DES2218-MIB", "agentMibCapabilityIndex"))
if mibBuilder.loadTexts: agentMibCapabilityEntry.setStatus('mandatory')
if mibBuilder.loadTexts: agentMibCapabilityEntry.setDescription('A MIB capability entry contains objects describing a particular MIB supported by this agent.')
agentMibCapabilityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 1, 1, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentMibCapabilityIndex.setStatus('mandatory')
if mibBuilder.loadTexts: agentMibCapabilityIndex.setDescription('A list of agentMibCapabilityDescr entries.')
agentMibCapabilityDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 1, 1, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentMibCapabilityDescr.setStatus('mandatory')
if mibBuilder.loadTexts: agentMibCapabilityDescr.setDescription('The name of the MIB supported by the agent.')
agentMibCapabilityVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 1, 1, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentMibCapabilityVersion.setStatus('mandatory')
if mibBuilder.loadTexts: agentMibCapabilityVersion.setDescription('The version of the MIB specified in this entry.')
agentMibCapabilityType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 1, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("standard", 2), ("proprietary", 3), ("experiment", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentMibCapabilityType.setStatus('mandatory')
if mibBuilder.loadTexts: agentMibCapabilityType.setDescription('The type of the MIB specified in this entry.')
agentBasicConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 1, 2))
agentSwUpdateMode = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("network-load", 2), ("out-of-band-load", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwUpdateMode.setStatus('mandatory')
if mibBuilder.loadTexts: agentSwUpdateMode.setDescription('The download media used by the system to download the runtime software.')
agentSwUpdateCtrl = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwUpdateCtrl.setStatus('mandatory')
if mibBuilder.loadTexts: agentSwUpdateCtrl.setDescription('Current status of software download control. The setting is effective the next time you reset or power on the hub.')
agentBootFile = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 1, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentBootFile.setStatus('mandatory')
if mibBuilder.loadTexts: agentBootFile.setDescription('The name of the file to be downloaded from the TFTP server when software update is enabled.')
agentSystemReset = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 1, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("reset", 2), ("no-reset", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSystemReset.setStatus('mandatory')
if mibBuilder.loadTexts: agentSystemReset.setDescription('This object indicates the agent system reset state. Setting this object to no-reset(3) has no effect. Setting this object to reset(2) will reset the agent. The agent always returns no-reset(3) when this object is read.')
agentRs232PortConfig = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 1, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("console", 2), ("out-of-band", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentRs232PortConfig.setStatus('mandatory')
if mibBuilder.loadTexts: agentRs232PortConfig.setDescription('The current setting of RS-232C port. The RS-232C port can be configured as the console port or used for out-of-band connection.')
agentOutOfBandBaudRateConfig = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 1, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("baudRate-2400", 2), ("baudRate-9600", 3), ("baudRate-19200", 4), ("baudRate-38400", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentOutOfBandBaudRateConfig.setStatus('mandatory')
if mibBuilder.loadTexts: agentOutOfBandBaudRateConfig.setDescription('The baud rate setting for out of band connection. The baud rate for the console interface is always 9600.')
agentOutOfBandDialNumber = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 1, 2, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentOutOfBandDialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: agentOutOfBandDialNumber.setDescription('The dial out phone number for out of band to establish a connection. This entry is used for reference only.')
agentIpProtoConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 1, 3))
agentIpNumOfIf = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIpNumOfIf.setStatus('mandatory')
if mibBuilder.loadTexts: agentIpNumOfIf.setDescription('The total number of IP interfaces supported by this agent.')
agentIpIfTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 1, 3, 2), )
if mibBuilder.loadTexts: agentIpIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: agentIpIfTable.setDescription('A list of IP interface entries supported by the agent.')
agentIpIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 1, 3, 2, 1), ).setIndexNames((0, "DES2218-MIB", "agentIpIfIndex"))
if mibBuilder.loadTexts: agentIpIfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: agentIpIfEntry.setDescription('An agentIPIfEntry contains information about a particular IP interface.')
agentIpIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIpIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: agentIpIfIndex.setDescription('This object uniquely identifies the IP interface number in agentIpIfTable. This value should never greater than agentIpNumOfIf')
agentIpIfAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 1, 3, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpIfAddress.setStatus('mandatory')
if mibBuilder.loadTexts: agentIpIfAddress.setDescription('The IP address of the interface.')
agentIpIfNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 1, 3, 2, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpIfNetMask.setStatus('mandatory')
if mibBuilder.loadTexts: agentIpIfNetMask.setDescription('The IP net mask for this interface.')
agentIpIfDefaultRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 1, 3, 2, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpIfDefaultRouter.setStatus('mandatory')
if mibBuilder.loadTexts: agentIpIfDefaultRouter.setDescription('The default gateway for this IP interface.')
agentIpIfMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 1, 3, 2, 1, 5), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIpIfMacAddr.setStatus('mandatory')
if mibBuilder.loadTexts: agentIpIfMacAddr.setDescription('The MAC address of this IP interface. For interfaces which do not have such an address (e.g., a serial line), this object should contain an octet string of zero length.')
agentIpIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 1, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 6, 28))).clone(namedValues=NamedValues(("other", 1), ("ethernet-csmacd", 6), ("slip", 28)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIpIfType.setStatus('mandatory')
if mibBuilder.loadTexts: agentIpIfType.setDescription('The physical layer interface of the IP interface.')
agentIpBootServerAddr = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 1, 3, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpBootServerAddr.setStatus('mandatory')
if mibBuilder.loadTexts: agentIpBootServerAddr.setDescription('The IP Address of Boot Server.')
agentIpBootProtocol = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 1, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("bootp-tftp", 2), ("tftp", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpBootProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: agentIpBootProtocol.setDescription('The software download protocol used for software update.')
agentIpGetIpFromBootpServer = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 1, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpGetIpFromBootpServer.setStatus('mandatory')
if mibBuilder.loadTexts: agentIpGetIpFromBootpServer.setDescription('This object indicates whether the agent get its system IP address from BootP server at start up.')
agentIpUnauthAddr = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 1, 3, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIpUnauthAddr.setStatus('mandatory')
if mibBuilder.loadTexts: agentIpUnauthAddr.setDescription('The IP address of an unauthorized SNMP packet.')
agentIpUnauthComm = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 1, 3, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIpUnauthComm.setStatus('mandatory')
if mibBuilder.loadTexts: agentIpUnauthComm.setDescription('The community string of an unauthorized SNMP packet.')
agentIpLastBootServerAddr = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 1, 3, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIpLastBootServerAddr.setStatus('mandatory')
if mibBuilder.loadTexts: agentIpLastBootServerAddr.setDescription('The last IP address used as Boot server IP address.')
agentIpLastIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 1, 3, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIpLastIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: agentIpLastIpAddr.setDescription('The last IP address used as the agent system IP address.')
agentIpTrapManagerTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 1, 3, 10), )
if mibBuilder.loadTexts: agentIpTrapManagerTable.setStatus('mandatory')
if mibBuilder.loadTexts: agentIpTrapManagerTable.setDescription('A list of trap manager entries to which to send SNMP traps .')
agentIpTrapManagerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 1, 3, 10, 1), ).setIndexNames((0, "DES2218-MIB", "agentIpTrapManagerIpAddr"))
if mibBuilder.loadTexts: agentIpTrapManagerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: agentIpTrapManagerEntry.setDescription('This entry contains the particular trap manager settings.')
agentIpTrapManagerIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 1, 3, 10, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIpTrapManagerIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: agentIpTrapManagerIpAddr.setDescription('The IP address to receive SNMP traps from this device.')
agentIpTrapManagerComm = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 1, 3, 10, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpTrapManagerComm.setStatus('mandatory')
if mibBuilder.loadTexts: agentIpTrapManagerComm.setDescription('The community string of the SNMP trap packet sent to the trap manager.')
agentIpTrapManagerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 1, 3, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpTrapManagerStatus.setStatus('mandatory')
if mibBuilder.loadTexts: agentIpTrapManagerStatus.setDescription('This object indicates whether or not the trap should be send to this trap manager.')
des2218MIB = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 7, 1))
swDevicePackage = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 7, 1, 1))
swPortPackage = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 7, 1, 2))
swDeviceInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 7, 1, 1, 1))
swDevInfoTotalNumOfPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 7, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDevInfoTotalNumOfPort.setStatus('mandatory')
if mibBuilder.loadTexts: swDevInfoTotalNumOfPort.setDescription('The number of ports within this switch hub. This value is the sum of the ports of each group within this switch hub.')
swDevInfoNumOfPortOnUse = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 7, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDevInfoNumOfPortOnUse.setStatus('mandatory')
if mibBuilder.loadTexts: swDevInfoNumOfPortOnUse.setDescription('The number of ports in this switch hub connected to the segment or end stations.')
swDevInfoDesc = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 7, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDevInfoDesc.setStatus('mandatory')
if mibBuilder.loadTexts: swDevInfoDesc.setDescription('A textual description of this switch hub.')
swDevInfoPortType = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 7, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("portType-UTP", 2), ("portType-AUI", 3), ("portType-Fiber", 4), ("portType-BNC", 5), ("portType-Option-module-RAS", 6), ("portType-Option-module-100Bridge", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDevInfoPortType.setStatus('mandatory')
if mibBuilder.loadTexts: swDevInfoPortType.setDescription('The connector type of this port.')
swDevInfoHwRev = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 7, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDevInfoHwRev.setStatus('mandatory')
if mibBuilder.loadTexts: swDevInfoHwRev.setDescription('A textual description of the hardware revision of this switch bub.')
swDevInfoSystemUpTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 7, 1, 1, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDevInfoSystemUpTime.setStatus('mandatory')
if mibBuilder.loadTexts: swDevInfoSystemUpTime.setDescription('The value of sysUpTime at the time the switch entered its current operational state. If the current state was entered prior to the last re- initialization, then this object contains a zero value.')
swDevInfoFrontPanelLedStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 7, 1, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDevInfoFrontPanelLedStatus.setStatus('mandatory')
if mibBuilder.loadTexts: swDevInfoFrontPanelLedStatus.setDescription('The current status of front panel LED.')
swDevInfoDramSize = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 7, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDevInfoDramSize.setStatus('mandatory')
if mibBuilder.loadTexts: swDevInfoDramSize.setDescription('The DRAM size of the switch hub')
swDeviceCtl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 7, 1, 1, 2))
swDevCtrlDisableLearningState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 7, 1, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swDevCtrlDisableLearningState.setStatus('mandatory')
if mibBuilder.loadTexts: swDevCtrlDisableLearningState.setDescription('This Object indicate the switch hub wether or not learn any new addresses from the Ethernet ports.')
swDevCtrlReset = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 7, 1, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("reset", 2), ("no-reset", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swDevCtrlReset.setStatus('mandatory')
if mibBuilder.loadTexts: swDevCtrlReset.setDescription('This object indicates the switch hub reset state. Setting this object to no-reset(3) has no effect. Setting this object to reset(2) will reset the agent. The agent always returns no-reset(3) when this object is read.')
swDevCtrlSpanningTree = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 7, 1, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swDevCtrlSpanningTree.setStatus('mandatory')
if mibBuilder.loadTexts: swDevCtrlSpanningTree.setDescription('This Object control the device to enable/disable spanning tree algorithm in the system initilization or reset.')
swPortInfoTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 7, 1, 2, 1), )
if mibBuilder.loadTexts: swPortInfoTable.setStatus('mandatory')
if mibBuilder.loadTexts: swPortInfoTable.setDescription('A list of port information entries.')
swPortInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 7, 1, 2, 1, 1), ).setIndexNames((0, "DES2218-MIB", "swPortInfoGroupIndex"), (0, "DES2218-MIB", "swPortInfoIndex"))
if mibBuilder.loadTexts: swPortInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: swPortInfoEntry.setDescription('This entry contains the port information, like porttype, linkstatus...')
swPortInfoGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 7, 1, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortInfoGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: swPortInfoGroupIndex.setDescription('This object identifies the port within the group for which this entry contains infomation.')
swPortInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 7, 1, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortInfoIndex.setStatus('mandatory')
if mibBuilder.loadTexts: swPortInfoIndex.setDescription('This object indicate switch hub port number.')
swPortInfoType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 7, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("portType-UTP", 2), ("portType-AUI", 3), ("portType-Fiber", 4), ("portType-BNC", 5), ("portType-Option-module-RAS", 6), ("portType-Option-module-100Bridge", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortInfoType.setStatus('mandatory')
if mibBuilder.loadTexts: swPortInfoType.setDescription('The connector type of this port.')
swPortInfoPartitionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 7, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("no-partion", 2), ("partion", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortInfoPartitionStatus.setStatus('mandatory')
if mibBuilder.loadTexts: swPortInfoPartitionStatus.setDescription('This Object indicate the port partition status.')
swPortInfoLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 7, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("link-pass", 2), ("link-fail", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortInfoLinkStatus.setStatus('mandatory')
if mibBuilder.loadTexts: swPortInfoLinkStatus.setDescription('This Object indicate the port link test status.')
swPortInfoDuplexMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 7, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("half", 2), ("full", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortInfoDuplexMode.setStatus('mandatory')
if mibBuilder.loadTexts: swPortInfoDuplexMode.setDescription('This Object indicate the port work in which duplex mode.')
swPortInfoNegotiationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 7, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortInfoNegotiationStatus.setStatus('mandatory')
if mibBuilder.loadTexts: swPortInfoNegotiationStatus.setDescription('This Object indicate the port work in auto negotiation enabled or disabled.')
swPortInfoSpeedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 7, 1, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("speed-10M", 2), ("speed-100M", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortInfoSpeedStatus.setStatus('mandatory')
if mibBuilder.loadTexts: swPortInfoSpeedStatus.setDescription('This Object indicate the port trasmit rate is in 10M bps or 100M bps .')
swPortCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 7, 1, 2, 2), )
if mibBuilder.loadTexts: swPortCtrlTable.setStatus('mandatory')
if mibBuilder.loadTexts: swPortCtrlTable.setDescription('A list of port state control entries.')
swPortCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 7, 1, 2, 2, 1), ).setIndexNames((0, "DES2218-MIB", "swPortCtrlGroupIndex"), (0, "DES2218-MIB", "swPortCtrlIndex"))
if mibBuilder.loadTexts: swPortCtrlEntry.setStatus('mandatory')
if mibBuilder.loadTexts: swPortCtrlEntry.setDescription('This entry control the port state, like filter broadcast, linkstatus...')
swPortCtrlGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 7, 1, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortCtrlGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: swPortCtrlGroupIndex.setDescription('This object identifies the port within the group for which this entry contains infomation.')
swPortCtrlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 7, 1, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortCtrlIndex.setStatus('mandatory')
if mibBuilder.loadTexts: swPortCtrlIndex.setDescription('This object indicate switch hub port number.')
swPortCtrlAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 7, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPortCtrlAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: swPortCtrlAdminState.setDescription('Port control administration state.')
swPortCtrlDuplexState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 7, 1, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("half", 2), ("full", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPortCtrlDuplexState.setStatus('mandatory')
if mibBuilder.loadTexts: swPortCtrlDuplexState.setDescription('Indicating the port work in half/full duplex mode.')
swPortCtrlLinkStatusAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 7, 1, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPortCtrlLinkStatusAlarmState.setStatus('mandatory')
if mibBuilder.loadTexts: swPortCtrlLinkStatusAlarmState.setDescription('Depending on this object to determine wether send a trap or not when link status change .')
swPortCtrlFilterBcastState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 7, 1, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("forward", 2), ("discard", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPortCtrlFilterBcastState.setStatus('mandatory')
if mibBuilder.loadTexts: swPortCtrlFilterBcastState.setDescription('Port control filter broadcast to all port or discard.')
swPortCtrlForwardUnknowState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 7, 1, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPortCtrlForwardUnknowState.setStatus('mandatory')
if mibBuilder.loadTexts: swPortCtrlForwardUnknowState.setDescription('Port control forward unknow packet state.')
swPortCtrlPartitionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 7, 1, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPortCtrlPartitionStatus.setStatus('mandatory')
if mibBuilder.loadTexts: swPortCtrlPartitionStatus.setDescription('Depending on this object determine to send a trap or not when the port was partition.')
swPortCtrlNegotiationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 7, 1, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPortCtrlNegotiationStatus.setStatus('mandatory')
if mibBuilder.loadTexts: swPortCtrlNegotiationStatus.setDescription('Depending on this object determine to enable NWAY or disable.')
swPortCtrlSpeedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 7, 1, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("speed-10M", 2), ("speed-100M", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPortCtrlSpeedStatus.setStatus('mandatory')
if mibBuilder.loadTexts: swPortCtrlSpeedStatus.setDescription('Depending on this object to determining this port transmit rate is 10M bps or 100M bps.')
swPortCounterTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 7, 1, 2, 3), )
if mibBuilder.loadTexts: swPortCounterTable.setStatus('mandatory')
if mibBuilder.loadTexts: swPortCounterTable.setDescription('A list of port MIB statistic Counter entries.')
swPortCounterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 7, 1, 2, 3, 1), ).setIndexNames((0, "DES2218-MIB", "swPortCounterGroupIndex"), (0, "DES2218-MIB", "swPortCounterIndex"))
if mibBuilder.loadTexts: swPortCounterEntry.setStatus('mandatory')
if mibBuilder.loadTexts: swPortCounterEntry.setDescription('This entry include all the port Counter which support by DES3208, like Bytes received, Bytes Sent ...')
swPortCounterGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 7, 1, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortCounterGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: swPortCounterGroupIndex.setDescription('This object identifies the port within the group for which this entry contains infomation.')
swPortCounterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 7, 1, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortCounterIndex.setStatus('mandatory')
if mibBuilder.loadTexts: swPortCounterIndex.setDescription('This object indicate switch hub port number.')
swPortBytesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 7, 1, 2, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortBytesReceived.setStatus('mandatory')
if mibBuilder.loadTexts: swPortBytesReceived.setDescription('The number of good bytes received. Local and dropped packets increment the counter as well.')
swPortBytesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 7, 1, 2, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortBytesSent.setStatus('mandatory')
if mibBuilder.loadTexts: swPortBytesSent.setDescription('The number of good bytes sent.')
swPortFramesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 7, 1, 2, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortFramesReceived.setStatus('mandatory')
if mibBuilder.loadTexts: swPortFramesReceived.setDescription('The number of good frames received. Local and dropped packets increment the counter as well.')
swPortFramesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 7, 1, 2, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortFramesSent.setStatus('mandatory')
if mibBuilder.loadTexts: swPortFramesSent.setDescription('The number of good frames sent.')
swPortTotalBytesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 7, 1, 2, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortTotalBytesReceived.setStatus('mandatory')
if mibBuilder.loadTexts: swPortTotalBytesReceived.setDescription('The number of bytes received(good and bad).')
swPortTotalFramesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 7, 1, 2, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortTotalFramesReceived.setStatus('mandatory')
if mibBuilder.loadTexts: swPortTotalFramesReceived.setDescription('The number of frames bytes received(good and bad).')
swPortBroadcastFramesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 7, 1, 2, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortBroadcastFramesReceived.setStatus('mandatory')
if mibBuilder.loadTexts: swPortBroadcastFramesReceived.setDescription('The number of good broadcast frames received. Local and dropped packets increment the counter as well.')
swPortMulticastFramesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 7, 1, 2, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortMulticastFramesReceived.setStatus('mandatory')
if mibBuilder.loadTexts: swPortMulticastFramesReceived.setDescription('The number of good multicast frames received. Local and dropped packets increment the counter as well.')
swPortCRCError = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 7, 1, 2, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortCRCError.setStatus('mandatory')
if mibBuilder.loadTexts: swPortCRCError.setDescription('The number of frames with valid packet length and CRC error or misaligned(odd number of nibbles) increment the counter as well.')
swPortOversizeFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 7, 1, 2, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortOversizeFrames.setStatus('mandatory')
if mibBuilder.loadTexts: swPortOversizeFrames.setDescription('The number of good frames with length more than 1518 bytes ( or 1522 bytes for LongEn = 1).')
swPortFragments = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 7, 1, 2, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortFragments.setStatus('mandatory')
if mibBuilder.loadTexts: swPortFragments.setDescription('The number of good bytes received. Local and dropped packets increment the counter as well.')
swPortJabber = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 7, 1, 2, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortJabber.setStatus('mandatory')
if mibBuilder.loadTexts: swPortJabber.setDescription('The number of frames with length more than 1518 bytes and with CRC error or misaligned.')
swPortCollision = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 7, 1, 2, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortCollision.setStatus('mandatory')
if mibBuilder.loadTexts: swPortCollision.setDescription('The number of Collisions')
swPortLateCollision = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 7, 1, 2, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortLateCollision.setStatus('mandatory')
if mibBuilder.loadTexts: swPortLateCollision.setDescription('The number of Late Collision(collision occurring later than 576th transmitted bit')
swPortFrames64Bytes = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 7, 1, 2, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortFrames64Bytes.setStatus('mandatory')
if mibBuilder.loadTexts: swPortFrames64Bytes.setDescription('The number of good packets with length of 64 bytes ')
swPortFrames65To127Bytes = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 7, 1, 2, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortFrames65To127Bytes.setStatus('mandatory')
if mibBuilder.loadTexts: swPortFrames65To127Bytes.setDescription('The number of good packets with length between 65 to 127 bytes ')
swPortFrames128To255Bytes = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 7, 1, 2, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortFrames128To255Bytes.setStatus('mandatory')
if mibBuilder.loadTexts: swPortFrames128To255Bytes.setDescription('The number of good packets with length between 128 to 255 bytes ')
swPortFrames256To511Bytes = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 7, 1, 2, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortFrames256To511Bytes.setStatus('mandatory')
if mibBuilder.loadTexts: swPortFrames256To511Bytes.setDescription('The number of good packets with length between 256 to 511 bytes ')
swPortFrames512To1023Bytes = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 7, 1, 2, 3, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortFrames512To1023Bytes.setStatus('mandatory')
if mibBuilder.loadTexts: swPortFrames512To1023Bytes.setDescription('The number of good packets with length between 512 to 1023 bytes ')
swPortFrames1024To1522Bytes = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 7, 1, 2, 3, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortFrames1024To1522Bytes.setStatus('mandatory')
if mibBuilder.loadTexts: swPortFrames1024To1522Bytes.setDescription('The number of good packets with length between 1024 to 1522 bytes ')
swPortMACRxError = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 7, 1, 2, 3, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortMACRxError.setStatus('mandatory')
if mibBuilder.loadTexts: swPortMACRxError.setDescription('The number of frames with RX MAC Error ')
linkChangeEvent = NotificationType((1, 3, 6, 1, 4, 1, 171) + (0,1)).setObjects(("DES2218-MIB", "swPortInfoIndex"), ("DES2218-MIB", "swPortInfoType"), ("DES2218-MIB", "swPortInfoPartitionStatus"), ("DES2218-MIB", "swPortInfoLinkStatus"), ("DES2218-MIB", "swPortInfoDuplexMode"))
if mibBuilder.loadTexts: linkChangeEvent.setDescription('The trap is sent whenever the link state of a port changes from link up to link down or from link down to link up')
portPartition = NotificationType((1, 3, 6, 1, 4, 1, 171) + (0,2)).setObjects(("DES2218-MIB", "swPortInfoIndex"), ("DES2218-MIB", "swPortInfoType"), ("DES2218-MIB", "swPortInfoPartitionStatus"), ("DES2218-MIB", "swPortInfoLinkStatus"), ("DES2218-MIB", "swPortInfoDuplexMode"))
if mibBuilder.loadTexts: portPartition.setDescription('The trap is sent whenever the port state enter the Partion mode when more than 32 collisions occur while trasmitting.')
mibBuilder.exportSymbols("DES2218-MIB", swDevicePackage=swDevicePackage, swPortCtrlAdminState=swPortCtrlAdminState, agentMgmtProtocolCapability=agentMgmtProtocolCapability, dlink=dlink, agentMibCapabilityEntry=agentMibCapabilityEntry, swPortCtrlFilterBcastState=swPortCtrlFilterBcastState, swPortOversizeFrames=swPortOversizeFrames, swPortInfoLinkStatus=swPortInfoLinkStatus, swPortCtrlIndex=swPortCtrlIndex, swPortCounterGroupIndex=swPortCounterGroupIndex, swPortFramesSent=swPortFramesSent, agentMibCapabilityTable=agentMibCapabilityTable, swPortJabber=swPortJabber, swPortInfoType=swPortInfoType, swPortCtrlForwardUnknowState=swPortCtrlForwardUnknowState, swPortFramesReceived=swPortFramesReceived, swPortCtrlLinkStatusAlarmState=swPortCtrlLinkStatusAlarmState, swPortCtrlNegotiationStatus=swPortCtrlNegotiationStatus, swPortFrames65To127Bytes=swPortFrames65To127Bytes, agentBasicConfig=agentBasicConfig, dlink_Des2218Prod=dlink_Des2218Prod, swDevInfoNumOfPortOnUse=swDevInfoNumOfPortOnUse, swPortPackage=swPortPackage, portPartition=portPartition, swPortInfoPartitionStatus=swPortInfoPartitionStatus, dlink_Des2218ProdId=dlink_Des2218ProdId, swDevInfoDesc=swDevInfoDesc, swPortFrames1024To1522Bytes=swPortFrames1024To1522Bytes, swPortCtrlTable=swPortCtrlTable, swPortMACRxError=swPortMACRxError, agentRuntimeSwVersion=agentRuntimeSwVersion, swPortFrames64Bytes=swPortFrames64Bytes, agentConfigInfo=agentConfigInfo, agentIpTrapManagerIpAddr=agentIpTrapManagerIpAddr, swPortTotalBytesReceived=swPortTotalBytesReceived, swPortCRCError=swPortCRCError, swPortMulticastFramesReceived=swPortMulticastFramesReceived, agentIpUnauthAddr=agentIpUnauthAddr, agentIpTrapManagerStatus=agentIpTrapManagerStatus, swDevInfoFrontPanelLedStatus=swDevInfoFrontPanelLedStatus, agentRs232PortConfig=agentRs232PortConfig, des2218series=des2218series, agentIpIfTable=agentIpIfTable, swPortCtrlSpeedStatus=swPortCtrlSpeedStatus, agentIpTrapManagerComm=agentIpTrapManagerComm, agentSystemReset=agentSystemReset, swDevCtrlReset=swDevCtrlReset, agentOutOfBandBaudRateConfig=agentOutOfBandBaudRateConfig, swPortInfoSpeedStatus=swPortInfoSpeedStatus, swPortFrames512To1023Bytes=swPortFrames512To1023Bytes, agentIpLastBootServerAddr=agentIpLastBootServerAddr, agentIpIfIndex=agentIpIfIndex, agentIpIfAddress=agentIpIfAddress, swDeviceCtl=swDeviceCtl, swPortCtrlPartitionStatus=swPortCtrlPartitionStatus, agentMibCapabilityVersion=agentMibCapabilityVersion, swDevInfoSystemUpTime=swDevInfoSystemUpTime, agentHwRevision=agentHwRevision, swPortBroadcastFramesReceived=swPortBroadcastFramesReceived, swDevInfoDramSize=swDevInfoDramSize, agentIpNumOfIf=agentIpNumOfIf, swPortInfoDuplexMode=swPortInfoDuplexMode, swPortInfoIndex=swPortInfoIndex, agentIpIfDefaultRouter=agentIpIfDefaultRouter, swPortCounterEntry=swPortCounterEntry, agentIpTrapManagerEntry=agentIpTrapManagerEntry, swPortCollision=swPortCollision, agentSwUpdateCtrl=agentSwUpdateCtrl, agentMibCapabilityIndex=agentMibCapabilityIndex, swDevInfoPortType=swDevInfoPortType, swPortFragments=swPortFragments, agentIpBootProtocol=agentIpBootProtocol, swPortCtrlGroupIndex=swPortCtrlGroupIndex, dlink_products=dlink_products, swPortInfoNegotiationStatus=swPortInfoNegotiationStatus, dlink_mgmt=dlink_mgmt, agentIpUnauthComm=agentIpUnauthComm, swPortBytesReceived=swPortBytesReceived, agentIpGetIpFromBootpServer=agentIpGetIpFromBootpServer, swPortFrames256To511Bytes=swPortFrames256To511Bytes, agentBootFile=agentBootFile, agentIpLastIpAddr=agentIpLastIpAddr, swPortBytesSent=swPortBytesSent, agentIpBootServerAddr=agentIpBootServerAddr, agentSwUpdateMode=agentSwUpdateMode, swPortInfoTable=swPortInfoTable, swPortCtrlEntry=swPortCtrlEntry, des2218SwHub=des2218SwHub, swPortCounterIndex=swPortCounterIndex, swPortTotalFramesReceived=swPortTotalFramesReceived, swPortInfoEntry=swPortInfoEntry, agentIpProtoConfig=agentIpProtoConfig, agentIpIfEntry=agentIpIfEntry, des2218MIB=des2218MIB, swPortLateCollision=swPortLateCollision, agentIpIfNetMask=agentIpIfNetMask, agentMibCapabilityDescr=agentMibCapabilityDescr, swDeviceInfo=swDeviceInfo, swDevInfoTotalNumOfPort=swDevInfoTotalNumOfPort, agentBasicInfo=agentBasicInfo, agentIpIfMacAddr=agentIpIfMacAddr, swPortCounterTable=swPortCounterTable, swDevCtrlSpanningTree=swDevCtrlSpanningTree, agentIpTrapManagerTable=agentIpTrapManagerTable, agentPromFwVersion=agentPromFwVersion, agentMibCapabilityType=agentMibCapabilityType, swPortFrames128To255Bytes=swPortFrames128To255Bytes, swPortCtrlDuplexState=swPortCtrlDuplexState, swPortInfoGroupIndex=swPortInfoGroupIndex, swDevInfoHwRev=swDevInfoHwRev, agentIpIfType=agentIpIfType, linkChangeEvent=linkChangeEvent, agentOutOfBandDialNumber=agentOutOfBandDialNumber, swDevCtrlDisableLearningState=swDevCtrlDisableLearningState)
