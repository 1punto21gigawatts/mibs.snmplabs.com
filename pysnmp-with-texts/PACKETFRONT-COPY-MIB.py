#
# PySNMP MIB module PACKETFRONT-COPY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PACKETFRONT-COPY-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:36:10 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion")
pfExperiment, = mibBuilder.importSymbols("PACKETFRONT-SMI", "pfExperiment")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
IpAddress, ModuleIdentity, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, NotificationType, TimeTicks, ObjectIdentity, Counter32, Gauge32, Unsigned32, Integer32, Bits, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "ModuleIdentity", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "NotificationType", "TimeTicks", "ObjectIdentity", "Counter32", "Gauge32", "Unsigned32", "Integer32", "Bits", "MibIdentifier")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
pfCopy = ModuleIdentity((1, 3, 6, 1, 4, 1, 9303, 3, 2))
pfCopy.setRevisions(('2011-01-11 17:35', '2009-03-23 11:17', '2008-09-10 15:38',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: pfCopy.setRevisionsDescriptions(('Updated company name', 'Updated telephone information in contact-info', 'Initial - moved pfCopy from PACKETFRONT-MIB',))
if mibBuilder.loadTexts: pfCopy.setLastUpdated('201101111735Z')
if mibBuilder.loadTexts: pfCopy.setOrganization('PacketFront International AB')
if mibBuilder.loadTexts: pfCopy.setContactInfo('PacketFront International AB Customer Service Mail : Isafjordsgatan 35 SE-164 28 Kista Sweden Tel : +46 8 5090 1500 E-mail: snmp@packetfront.com Web : http://www.packetfront.com')
if mibBuilder.loadTexts: pfCopy.setDescription('MIB describing the file copy functions available on Packetfront ASRs')
pfCopyNextState = MibScalar((1, 3, 6, 1, 4, 1, 9303, 3, 2, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfCopyNextState.setStatus('current')
if mibBuilder.loadTexts: pfCopyNextState.setDescription('Generate a unique filehandle. The filehandle is used with the other objects in the pfCopy branch to set the source and destination and commence file transfer activities.')
pfCopyTable = MibTable((1, 3, 6, 1, 4, 1, 9303, 3, 2, 2), )
if mibBuilder.loadTexts: pfCopyTable.setStatus('current')
if mibBuilder.loadTexts: pfCopyTable.setDescription('A list of current copy sessions. The next available entry is given by the value of pfCopyNextState.')
pfCopyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9303, 3, 2, 2, 1), ).setIndexNames((0, "PACKETFRONT-COPY-MIB", "pfCopyIndex"))
if mibBuilder.loadTexts: pfCopyEntry.setStatus('current')
if mibBuilder.loadTexts: pfCopyEntry.setDescription('An entry for a copy session.')
pfCopyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 3, 2, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfCopyIndex.setStatus('current')
if mibBuilder.loadTexts: pfCopyIndex.setDescription('A unique value for each copy session.')
pfCopySource = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 3, 2, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pfCopySource.setStatus('current')
if mibBuilder.loadTexts: pfCopySource.setDescription('The source URL for a filhandle. The string provided must match an acceptable URL as typed in the command line interface copy command.')
pfCopyDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 3, 2, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pfCopyDestination.setStatus('current')
if mibBuilder.loadTexts: pfCopyDestination.setDescription('The destination filename for a filehandle. The string provided must match an acceptable destination as typed in the command line interface copy command.')
pfCopyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 3, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("notused", 0), ("start", 1), ("stop", 2), ("destroy", 3), ("init", 4), ("inprogress", 5), ("failed", 6), ("finished", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pfCopyStatus.setStatus('current')
if mibBuilder.loadTexts: pfCopyStatus.setDescription('The status of a filehandle notused - Get: The filehandle has not been used during the last 24 hours Set: Not possible start - Get: Not possible Set: Start filetransfer stop - Get: Not possible Set: Stop filetransfer in progress destroy - Get: Not possible Set: Remove source and destination entries for filehandle init - Get: Filtransfer started Set: Not possible inprogress - Get: Filetransfer in progress Set: Not possible failed - Get: A failure occured during last filetransfer Set: Not possible finished - Get: The file was successfully transferred and stored Set: not possible ')
pfCopyError = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 3, 2, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfCopyError.setStatus('current')
if mibBuilder.loadTexts: pfCopyError.setDescription("A textual description of the filehandle last error status. If the filehandle does not exist or has not been used for the last 24 hours, a 'No Error' message is returned.")
mibBuilder.exportSymbols("PACKETFRONT-COPY-MIB", pfCopyIndex=pfCopyIndex, pfCopySource=pfCopySource, pfCopyNextState=pfCopyNextState, pfCopyError=pfCopyError, pfCopyEntry=pfCopyEntry, pfCopy=pfCopy, pfCopyStatus=pfCopyStatus, pfCopyTable=pfCopyTable, pfCopyDestination=pfCopyDestination, PYSNMP_MODULE_ID=pfCopy)
