#
# PySNMP MIB module Juniper-TSM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Juniper-TSM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:04:36 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint")
juniMibs, = mibBuilder.importSymbols("Juniper-MIBs", "juniMibs")
JuniIfType, = mibBuilder.importSymbols("Juniper-UNI-IF-MIB", "JuniIfType")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
MibIdentifier, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, TimeTicks, iso, NotificationType, ObjectIdentity, Unsigned32, Counter64, Integer32, Bits, Gauge32, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "TimeTicks", "iso", "NotificationType", "ObjectIdentity", "Unsigned32", "Counter64", "Integer32", "Bits", "Gauge32", "IpAddress")
TruthValue, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "TextualConvention")
juniTsmMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 4874, 2, 2, 72))
juniTsmMIB.setRevisions(('2005-05-23 14:37', '2005-04-27 22:57', '2003-10-23 20:45',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: juniTsmMIB.setRevisionsDescriptions(("Changed enum names for juniTsmPortType: from 'generalPurposeDedicated' to 'generalPurposeStatic' and from 'scurityDedicated' to 'securityStatic' and added enum 'securityDynamic'. Expanded range of juniTsmPortProvisionedInterfaces.", 'Added addtional values to JuniTsmLocationType.', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: juniTsmMIB.setLastUpdated('200505231437Z')
if mibBuilder.loadTexts: juniTsmMIB.setOrganization('Juniper Networks, Inc.')
if mibBuilder.loadTexts: juniTsmMIB.setContactInfo(' Juniper Networks, Inc. Postal: 10 Technology Park Drive Westford, MA 01886-3146 USA Tel: +1 978 589 5800 Email: mib@Juniper.net')
if mibBuilder.loadTexts: juniTsmMIB.setDescription('The Tunnel Server Management (TSM) MIB for the Juniper Networks enterprise.')
class JuniTsmLocationType(TextualConvention, Integer32):
    description = "Describes the platform-dependent interpretation of a JuniTsmLocationValue object: unknown Unspecified/unknown slotPort Two octets in length; first octet is 'slot', second octet is 'port' slotAdapterPort Three octets in length; first octet is 'slot', second octet is 'adapter', third octet is 'port' adapterPort Two octets in length; first octet is 'adapter', second octet is 'port' "
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("unknown", 0), ("slotPort", 1), ("slotAdapterPort", 2), ("adapterPort", 3))

class JuniTsmLocationValue(TextualConvention, OctetString):
    description = "The value of a platform-dependent interface location, represented as an OCTET STRING. A corresponding JuniTsmLocationType object will identify the mapping of octets to location elements, e.g. 'slot.port'. Note, when the value of an object having this syntax is encoded as a MIB table INDEX, the rules for encoding a variable-length OCTET STRING are observed."
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 16)

juniTsmObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 72, 1))
juniTsmData = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 72, 1, 1))
juniTsmLocationType = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 72, 1, 1, 1), JuniTsmLocationType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniTsmLocationType.setStatus('current')
if mibBuilder.loadTexts: juniTsmLocationType.setDescription("Describes the interpretation of JuniTsmLocationValue object values into platform-dependent interface location components, e.g., 'slot.port'.")
juniTsmPortTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 72, 1, 1, 2), )
if mibBuilder.loadTexts: juniTsmPortTable.setStatus('current')
if mibBuilder.loadTexts: juniTsmPortTable.setDescription('This table allows dynamic server ports to be configured and also provides information about static ports available in the system. This table represents all ports known to the system. The presence of a port in this table does not guarantee that a card with this port is present in the chassis.')
juniTsmPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 72, 1, 1, 2, 1), ).setIndexNames((0, "Juniper-TSM-MIB", "juniTsmPortLocation"))
if mibBuilder.loadTexts: juniTsmPortEntry.setStatus('current')
if mibBuilder.loadTexts: juniTsmPortEntry.setDescription('Configuration data.')
juniTsmPortLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 72, 1, 1, 2, 1, 1), JuniTsmLocationValue())
if mibBuilder.loadTexts: juniTsmPortLocation.setStatus('current')
if mibBuilder.loadTexts: juniTsmPortLocation.setDescription('The value of a port location.')
juniTsmPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 72, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("generalPurposeStatic", 1), ("generalPurposeDynamic", 2), ("securityStatic", 3), ("securityDynamic", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniTsmPortType.setStatus('current')
if mibBuilder.loadTexts: juniTsmPortType.setDescription('The port type: generalPurposeStatic - statically configured (always on) port, generalPurposeDynamic - dynamic port, which could be both configured with different maximum number of interfaces and unconfigured, securityStatic - static port equipped with encryption (IPSEC) hardware. securityDynamic - dynamic port with encryption (IPSEC) hardware, which could be both configured with different maximum number of interfaces and unconfigured.')
juniTsmPortHwPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 72, 1, 1, 2, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniTsmPortHwPresent.setStatus('current')
if mibBuilder.loadTexts: juniTsmPortHwPresent.setDescription('The port hardware is inserted.')
juniTsmPortAvailableInterfaces = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 72, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniTsmPortAvailableInterfaces.setStatus('current')
if mibBuilder.loadTexts: juniTsmPortAvailableInterfaces.setDescription('Maximum number of interfaces available on the port.')
juniTsmPortProvisionedInterfaces = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 72, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 16000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniTsmPortProvisionedInterfaces.setStatus('current')
if mibBuilder.loadTexts: juniTsmPortProvisionedInterfaces.setDescription("Number of interfaces provisioned on the port. '-1' means all available interfaces. If port is static this value cannot be changed. If the number of provisioned interfaces is decreased it may require a lengthy 'draining' process to bring number of allocated interfaces into compliance.")
juniTsmAppRegistryTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 72, 1, 1, 3), )
if mibBuilder.loadTexts: juniTsmAppRegistryTable.setStatus('current')
if mibBuilder.loadTexts: juniTsmAppRegistryTable.setDescription('This table describes currently registered applications.')
juniTsmAppRegistryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 72, 1, 1, 3, 1), ).setIndexNames((0, "Juniper-TSM-MIB", "juniTsmAppRegistryIndex"))
if mibBuilder.loadTexts: juniTsmAppRegistryEntry.setStatus('current')
if mibBuilder.loadTexts: juniTsmAppRegistryEntry.setDescription('Application data.')
juniTsmAppRegistryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 72, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: juniTsmAppRegistryIndex.setStatus('current')
if mibBuilder.loadTexts: juniTsmAppRegistryIndex.setDescription('A small integer identifying registered application. Once an application is registered, this integer will be associated with the application until the next reboot.')
juniTsmAppRegistryIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 72, 1, 1, 3, 1, 2), JuniIfType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniTsmAppRegistryIfType.setStatus('current')
if mibBuilder.loadTexts: juniTsmAppRegistryIfType.setDescription('Interface type associated with the application.')
juniTsmAppRegistryName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 72, 1, 1, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniTsmAppRegistryName.setStatus('current')
if mibBuilder.loadTexts: juniTsmAppRegistryName.setDescription('The name of the application used by the system.')
juniTsmAppRegistryInterfaceLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 72, 1, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniTsmAppRegistryInterfaceLimit.setStatus('current')
if mibBuilder.loadTexts: juniTsmAppRegistryInterfaceLimit.setDescription('The maximum number of interfaces per port this application supports. (The number of interfaces could be further limited by the port capacity.)')
juniTsmApplicationTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 72, 1, 1, 4), )
if mibBuilder.loadTexts: juniTsmApplicationTable.setStatus('current')
if mibBuilder.loadTexts: juniTsmApplicationTable.setDescription('The entries in this table describe application load on tunnel servers. This table includes only applications which are actually being used.')
juniTsmApplicationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 72, 1, 1, 4, 1), ).setIndexNames((0, "Juniper-TSM-MIB", "juniTsmPortLocation"), (0, "Juniper-TSM-MIB", "juniTsmAppRegistryIndex"))
if mibBuilder.loadTexts: juniTsmApplicationEntry.setStatus('current')
if mibBuilder.loadTexts: juniTsmApplicationEntry.setDescription('Configuration data.')
juniTsmApplicationMaxInterfaces = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 72, 1, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniTsmApplicationMaxInterfaces.setStatus('current')
if mibBuilder.loadTexts: juniTsmApplicationMaxInterfaces.setDescription('Maximum number of interfaces available on the port for the application. Applications allocate interfaces from a common pool, so this is not the only limit of application level interfaces. This value could be greater than juniTsmPortProvisionedInterfaces when the port is draining interfaces.')
juniTsmApplicationActiveInterfaces = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 72, 1, 1, 4, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniTsmApplicationActiveInterfaces.setStatus('current')
if mibBuilder.loadTexts: juniTsmApplicationActiveInterfaces.setDescription('Number of application interfaces in use on the port. This value could be greater than juniTsmPortProvisionedInterfaces when the port is draining interfaces.')
juniTsmMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 72, 4))
juniTsmMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 72, 4, 1))
juniTsmMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 72, 4, 2))
juniTsmCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 72, 4, 1, 1)).setObjects(("Juniper-TSM-MIB", "juniTsmGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniTsmCompliance = juniTsmCompliance.setStatus('current')
if mibBuilder.loadTexts: juniTsmCompliance.setDescription('The compliance statement for TSM mib.')
juniTsmGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 72, 4, 2, 1)).setObjects(("Juniper-TSM-MIB", "juniTsmLocationType"), ("Juniper-TSM-MIB", "juniTsmPortType"), ("Juniper-TSM-MIB", "juniTsmPortHwPresent"), ("Juniper-TSM-MIB", "juniTsmPortAvailableInterfaces"), ("Juniper-TSM-MIB", "juniTsmPortProvisionedInterfaces"), ("Juniper-TSM-MIB", "juniTsmAppRegistryIfType"), ("Juniper-TSM-MIB", "juniTsmAppRegistryName"), ("Juniper-TSM-MIB", "juniTsmAppRegistryInterfaceLimit"), ("Juniper-TSM-MIB", "juniTsmApplicationMaxInterfaces"), ("Juniper-TSM-MIB", "juniTsmApplicationActiveInterfaces"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniTsmGroup = juniTsmGroup.setStatus('current')
if mibBuilder.loadTexts: juniTsmGroup.setDescription('A collection of objects providing management of TSM functionality in a Juniper product.')
mibBuilder.exportSymbols("Juniper-TSM-MIB", juniTsmApplicationTable=juniTsmApplicationTable, juniTsmAppRegistryIndex=juniTsmAppRegistryIndex, juniTsmAppRegistryIfType=juniTsmAppRegistryIfType, juniTsmMIBGroups=juniTsmMIBGroups, juniTsmApplicationActiveInterfaces=juniTsmApplicationActiveInterfaces, JuniTsmLocationType=JuniTsmLocationType, juniTsmPortAvailableInterfaces=juniTsmPortAvailableInterfaces, juniTsmAppRegistryTable=juniTsmAppRegistryTable, juniTsmMIBConformance=juniTsmMIBConformance, juniTsmData=juniTsmData, juniTsmAppRegistryEntry=juniTsmAppRegistryEntry, juniTsmPortType=juniTsmPortType, juniTsmApplicationMaxInterfaces=juniTsmApplicationMaxInterfaces, juniTsmApplicationEntry=juniTsmApplicationEntry, juniTsmAppRegistryInterfaceLimit=juniTsmAppRegistryInterfaceLimit, juniTsmCompliance=juniTsmCompliance, juniTsmPortEntry=juniTsmPortEntry, juniTsmPortHwPresent=juniTsmPortHwPresent, juniTsmPortLocation=juniTsmPortLocation, JuniTsmLocationValue=JuniTsmLocationValue, juniTsmObjects=juniTsmObjects, juniTsmMIB=juniTsmMIB, juniTsmLocationType=juniTsmLocationType, juniTsmGroup=juniTsmGroup, juniTsmMIBCompliances=juniTsmMIBCompliances, juniTsmAppRegistryName=juniTsmAppRegistryName, juniTsmPortTable=juniTsmPortTable, PYSNMP_MODULE_ID=juniTsmMIB, juniTsmPortProvisionedInterfaces=juniTsmPortProvisionedInterfaces)
