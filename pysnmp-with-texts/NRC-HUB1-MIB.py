#
# PySNMP MIB module NRC-HUB1-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NRC-HUB1-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:24:24 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, IpAddress, Integer32, NotificationType, Counter32, iso, Counter64, ModuleIdentity, Gauge32, MibIdentifier, ObjectIdentity, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "IpAddress", "Integer32", "NotificationType", "Counter32", "iso", "Counter64", "ModuleIdentity", "Gauge32", "MibIdentifier", "ObjectIdentity", "Unsigned32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
enterprises = MibIdentifier((1, 3, 6, 1, 4, 1))
nrc = MibIdentifier((1, 3, 6, 1, 4, 1, 315))
hub1 = MibIdentifier((1, 3, 6, 1, 4, 1, 315, 1))
hub1AutoPartition = MibScalar((1, 3, 6, 1, 4, 1, 315, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hub1AutoPartition.setStatus('mandatory')
if mibBuilder.loadTexts: hub1AutoPartition.setDescription("The value 'enabled' indicates that the HUB should auto partition ports. The value 'disabled' will disable this feature.")
hub1ReconnectOnTransmission = MibScalar((1, 3, 6, 1, 4, 1, 315, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hub1ReconnectOnTransmission.setStatus('mandatory')
if mibBuilder.loadTexts: hub1ReconnectOnTransmission.setDescription("The value 'enabled' indicates that the HUB will reconnect an auto partitioned port if the HUB receives a packet from a partitioned port. The value 'disabled' indicates that the HUB will reconnect a partitioned port if there is any traffic to or from the port.")
hub1IncludeOutOfWinColl = MibScalar((1, 3, 6, 1, 4, 1, 315, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hub1IncludeOutOfWinColl.setStatus('mandatory')
if mibBuilder.loadTexts: hub1IncludeOutOfWinColl.setDescription("A value of 'enabled' will cause Out Of Window Collisions to be counted along with In Window Collisions (as defined by IEEE 802.3) when determining if the collision count has exceeded hub1CollisionLimit and a port should be auto partitioned. A value of 'disabled' indicates that Out Of Window Collisions should NOT be counted when determining if the collision count has exceeded hub1CollisionLimit and a and a port should be auto partitioned.")
hub1LoopbackPartition = MibScalar((1, 3, 6, 1, 4, 1, 315, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hub1LoopbackPartition.setStatus('mandatory')
if mibBuilder.loadTexts: hub1LoopbackPartition.setDescription("A value of 'enabled' will cause the HUB to automatically partition a port where a lack of loopback from the transeiver is detected. A value of 'disabled' will disable this feature. Note: Setting this variable will only effect HUB operation when hub1PortType value equals 'thinNet-10Base2'. For all other hub1PortType values, a value of 'enabled' will have no effect.")
hub1CollisionLimit = MibScalar((1, 3, 6, 1, 4, 1, 315, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(31, 63))).clone(namedValues=NamedValues(("low", 31), ("high", 63)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hub1CollisionLimit.setStatus('mandatory')
if mibBuilder.loadTexts: hub1CollisionLimit.setDescription('If consecutive collisions exceeding the value of this variable are detected on a port, the port will be auto partitioned 31 is the IEEE 802.3 consecutive collision limit.')
hub1CarrierRecoverTime = MibScalar((1, 3, 6, 1, 4, 1, 315, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 5))).clone(namedValues=NamedValues(("short", 3), ("long", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hub1CarrierRecoverTime.setStatus('mandatory')
if mibBuilder.loadTexts: hub1CarrierRecoverTime.setDescription("Time to recover carrier. A value of 'short' will use 3 bit times (IEEE 802.3 specification). A value of 'long' will use 5 bit times.")
hub1EventCounterFlags = MibScalar((1, 3, 6, 1, 4, 1, 315, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hub1EventCounterFlags.setStatus('mandatory')
if mibBuilder.loadTexts: hub1EventCounterFlags.setDescription("A bit mask indicating which error types will cause an increment in the hub1PortEventCount Counter. Each bit has the following significance where each bit is listed from most significant bit of the first octet, to least significant bit of the second octet. High (first) Octet bit 8 - not used - 7 - not used - 6 Out Of Window Collision Count Enable 5 Receive Collision Count Enable 4 Transmit Collision Count Enable 3 - not used - 2 - not used - 1 - not used - Low (second) Octet bit 8 Bad Link Count Enable 7 Partition Count Enable 6 Receive Count Enable 5 Pygmy Packet Enable 4 Non SFD Enable 3 Phase Lock Error Enable 2 Elasticity Buffer Error Enable 1 Jabber Enable When setting the value of this variable, the entire bit mask must be specified and the '-not used-' bits must not be set.")
hub1EventRecordFlags = MibScalar((1, 3, 6, 1, 4, 1, 315, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hub1EventRecordFlags.setStatus('mandatory')
if mibBuilder.loadTexts: hub1EventRecordFlags.setDescription("A bit mask indicating which error types will cause corresponding bits in hub1PortEventRecordValue to be set when an error is detected. Each bit has the following significance where bits are listed from most significant bit to least significant bit. bit 8 Bad Link Enable 7 Partition Enable 6 Out Of Window Collision Enable 5 Pygmy Packet Enable 4 Non SFD Enable 3 Phase Lock Error Enable 2 Elasticity Buffer Error Enable 1 Jabber Enable When a particular bit is set, all ports will start to log the specified error in the hub1PortEventRecordValue column of the port's row of the hub1PortTable. For example, if bit 1 (Jabber Enable) is set, then for every port, a detected Jabber Error would cause bit 1 of hub1PortEventRecordValue to be set. When setting the value of this variable, the entire bit mask must be specified. When this mask is set, hub1PortRecordValue for all ports is cleared.")
hub1BridgingMode = MibScalar((1, 3, 6, 1, 4, 1, 315, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bridging", 1), ("bypass", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hub1BridgingMode.setStatus('mandatory')
if mibBuilder.loadTexts: hub1BridgingMode.setDescription("Operational mode of the bridge: bridging Packets are being selectively forwarded according to the internal dynamically built tables. bypass All packets are being repeated between the backbone and the repeater ports. The bridge logic is disabled. After setting this variable the HUB must be reset for the new value to take effect. NOTE: FOIRL Hubs can only have the value 'bypass' for this variable. Attempts to set this variable to 'bridging' on FOIRL hubs will be rejected.")
hub1ProtocolFilterMode = MibScalar((1, 3, 6, 1, 4, 1, 315, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("filter", 2), ("pass", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hub1ProtocolFilterMode.setStatus('mandatory')
if mibBuilder.loadTexts: hub1ProtocolFilterMode.setDescription('Filtering Mode of the Hub: off The protocol filtering logic is disabled. filter The protocol filtering logic is enabled and packets with the protocol types indicated in hubFilterProtocols will not be forwarded by the bridge. pass The packet filtering logic is enabled and packets with the protocol types indicated in hubFilterProtocols will be the ONLY packets that the bridge will forward.')
hub1FilterProtocols = MibScalar((1, 3, 6, 1, 4, 1, 315, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hub1FilterProtocols.setStatus('mandatory')
if mibBuilder.loadTexts: hub1FilterProtocols.setDescription('Protocol types to be filtered or passed by the bridging logic. This is a variable length array of between 0 and 16 2-byte entries, each entry containing the 2-byte protocol identifier as seen in the Ethernet header. Attempts to configure this variable with an OCTET STRING of odd length will be rejected.')
hub1ConsoleBaudRate = MibScalar((1, 3, 6, 1, 4, 1, 315, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hub1ConsoleBaudRate.setStatus('mandatory')
if mibBuilder.loadTexts: hub1ConsoleBaudRate.setDescription('The baud rate of the console port. Legal values are 9600, 4800, 2400, and 1200.')
hub1Reset = MibScalar((1, 3, 6, 1, 4, 1, 315, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no-reset", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hub1Reset.setStatus('mandatory')
if mibBuilder.loadTexts: hub1Reset.setDescription("Setting this object to 'reset' will cause the Hub1 to perform a hardware reset within approximately 5 seconds. Setting this object to 'no-reset will have no effect. The value 'no-reset will be returned whenever this object is retrieved. The primary purpose for including this variable in the Hub1 MIB is to allow SNMP managers to modify the operational mode of the Hub1. Changing the variable hub1BridgingMode has no effect on the Hub until the Hub is reset.")
hub1SoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 315, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hub1SoftwareVersion.setStatus('mandatory')
if mibBuilder.loadTexts: hub1SoftwareVersion.setDescription("The version of software running on the Hub. On versions of the Hub that support dynamic download, this variable may be set to cause a new version of the software to be loaded the next time the Hub is reset (as in setting the variable hub1Reset or power cycling the unit). The version should be specified in the following format: 'MM.mm.rr' Where MM is the major number, mm is the minor number, and rr is the revision level (for example 2.0.16). On versions of the Hub that do not support dynamic download, setting this variable will result in an error.")
hub1PortTable = MibTable((1, 3, 6, 1, 4, 1, 315, 1, 15), )
if mibBuilder.loadTexts: hub1PortTable.setStatus('mandatory')
if mibBuilder.loadTexts: hub1PortTable.setDescription('A table of port specific information for the NRC HUB 1 product. This table supplements the Repeater MIB Ports Table.')
hub1PortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 315, 1, 15, 1), ).setIndexNames((0, "NRC-HUB1-MIB", "hub1PortIndex"))
if mibBuilder.loadTexts: hub1PortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hub1PortEntry.setDescription('A list of information for every port.')
hub1PortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 315, 1, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hub1PortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: hub1PortIndex.setDescription('Port number that corresponds to the index value in the Repeater MIB variable rptrPortIndex.')
hub1PortForceReconnect = MibTableColumn((1, 3, 6, 1, 4, 1, 315, 1, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("idle", 1), ("force-reconnect", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hub1PortForceReconnect.setStatus('mandatory')
if mibBuilder.loadTexts: hub1PortForceReconnect.setDescription("Setting this variable to the value 'force- reconnect' will cause the port to be reconnected assuming that it is currently in the 'Partition' state. If the port is not in a 'Partition' state, setting variable to the value 'force-reconnect' will not have any effect. Setting this variable to anything other than 'force- reconnect will and an undefined effect. When retrieving this variable, the value 'idle' will always be returned.")
hub1PortPartitionReason = MibTableColumn((1, 3, 6, 1, 4, 1, 315, 1, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("not-partitioned", 1), ("other", 2), ("consecutive-collision-limit", 3), ("excessive-len-of-collision-limit", 4), ("data-loopback-failure", 5), ("process-forced-reconnection", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hub1PortPartitionReason.setStatus('mandatory')
if mibBuilder.loadTexts: hub1PortPartitionReason.setDescription("Reason for port being in the partitioned state. If the port is currently not partitioned, this variable will have the value 'not-partitioned'.")
hub1PortLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 315, 1, 15, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("up", 2), ("down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hub1PortLinkState.setStatus('mandatory')
if mibBuilder.loadTexts: hub1PortLinkState.setDescription("This variable's meaning varies depending on the type of HUB: 10Base2 Not Applicable. A value of 'unknown' will always be returned. 10BaseT Link Test is being received ('up') or not being received ('down'). Fiber Light Monitoring (LMON) is being detected ('up') or not being detected ('down').")
hub1PortLinkEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 315, 1, 15, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hub1PortLinkEnable.setStatus('mandatory')
if mibBuilder.loadTexts: hub1PortLinkEnable.setDescription('Enabling this variable has the following effect depending on the type of HUB: 10Base2 No Effect 10BaseT Link Test Enabled Fiber LMON Test Enabled')
hub1PortPolarityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 315, 1, 15, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("reversed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hub1PortPolarityStatus.setStatus('mandatory')
if mibBuilder.loadTexts: hub1PortPolarityStatus.setDescription("Current port Polarity status. NOTE: a value of 'ok' will always be returned for 10Base2 and FOIRL HUBs")
hub1PortName = MibTableColumn((1, 3, 6, 1, 4, 1, 315, 1, 15, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hub1PortName.setStatus('mandatory')
if mibBuilder.loadTexts: hub1PortName.setDescription('Administrator assigned ASCII port name.')
hub1PortEventCount = MibTableColumn((1, 3, 6, 1, 4, 1, 315, 1, 15, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hub1PortEventCount.setStatus('mandatory')
if mibBuilder.loadTexts: hub1PortEventCount.setDescription('Counter of all error events that were detected on this port and at the same time were marked for collection in the hub1EventCounterFlags variable. This is a 16 bit wrapping counter.')
hub1PortRecordValue = MibScalar((1, 3, 6, 1, 4, 1, 315, 1, 15, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hub1PortRecordValue.setStatus('mandatory')
if mibBuilder.loadTexts: hub1PortRecordValue.setDescription('Bit Mask that has bits set for each error event that was detected on this port and at the same time was marked for collection in the hub1EventRecordFlags variable. Each bit has the following meaning, where the bits are listed from most significant to least significant: bit 8 Bad Link Count Error 7 Partition Count Error 6 Receive Count Error 5 Pygmy Packet Error 4 Non SFD Error 3 Phase Lock Error 2 Elasticity Buffer Error 1 Jabber Error Each read of this variable causes the variable to be cleared.')
hub1PortType = MibTableColumn((1, 3, 6, 1, 4, 1, 315, 1, 15, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("twistedPair-10BaseT", 2), ("thinNet-10Base2", 3), ("fiber-FOIRL", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hub1PortType.setStatus('mandatory')
if mibBuilder.loadTexts: hub1PortType.setDescription('The type of port')
hub1IFTable = MibTable((1, 3, 6, 1, 4, 1, 315, 1, 16), )
if mibBuilder.loadTexts: hub1IFTable.setStatus('mandatory')
if mibBuilder.loadTexts: hub1IFTable.setDescription('A table that contains HUB 1 specific supplements to the MIB-II interfaces table.')
hub1IFEntry = MibTableRow((1, 3, 6, 1, 4, 1, 315, 1, 16, 1), ).setIndexNames((0, "NRC-HUB1-MIB", "hub1IFIndex"))
if mibBuilder.loadTexts: hub1IFEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hub1IFEntry.setDescription('Entries in the HUB 1 supplement table.')
hub1IFIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 315, 1, 16, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hub1IFIndex.setStatus('mandatory')
if mibBuilder.loadTexts: hub1IFIndex.setDescription('Interface index that corresponds to ifIndex in the interfaces table from MIB II.')
hub1IFInAlignmentErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 315, 1, 16, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hub1IFInAlignmentErrors.setStatus('mandatory')
if mibBuilder.loadTexts: hub1IFInAlignmentErrors.setDescription('The number of alignment errors detected by this interface.')
hub1IFInCrcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 315, 1, 16, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hub1IFInCrcErrors.setStatus('mandatory')
if mibBuilder.loadTexts: hub1IFInCrcErrors.setDescription('The number of CRC errors detected by this interface.')
hub1IFInCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 315, 1, 16, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hub1IFInCollisions.setStatus('mandatory')
if mibBuilder.loadTexts: hub1IFInCollisions.setDescription('The number of collisions detected by this interface.')
hub1IFInMtuExceededDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 315, 1, 16, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hub1IFInMtuExceededDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: hub1IFInMtuExceededDiscards.setDescription('The number of frames discarded by this interface on receive due to an excessive size.')
hub1IFInShortErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 315, 1, 16, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hub1IFInShortErrors.setStatus('mandatory')
if mibBuilder.loadTexts: hub1IFInShortErrors.setDescription('The number of frames discarded by this interface because they were less than the Ethernet minumum frame size of 64 bytes.')
hub1IFInOverrunDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 315, 1, 16, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hub1IFInOverrunDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: hub1IFInOverrunDiscards.setDescription('The number of frames discarded by this interface due to a LAN Controller FIFO overflow on receive.')
hub1IFOutUnderruns = MibTableColumn((1, 3, 6, 1, 4, 1, 315, 1, 16, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hub1IFOutUnderruns.setStatus('mandatory')
if mibBuilder.loadTexts: hub1IFOutUnderruns.setDescription('The number of frames which had to be retransmitted by this interface due to a LAN Controller FIFO underrun error on transmit.')
hub1IFOutLostCts = MibTableColumn((1, 3, 6, 1, 4, 1, 315, 1, 16, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hub1IFOutLostCts.setStatus('mandatory')
if mibBuilder.loadTexts: hub1IFOutLostCts.setDescription('The number of times Carrier Transmit Sense (CTS) was lost on this interface during frame transmission. The hub will attempt to retransmit frames when transmission fails due to lost CTS.')
hub1IFOutLostCrs = MibTableColumn((1, 3, 6, 1, 4, 1, 315, 1, 16, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hub1IFOutLostCrs.setStatus('mandatory')
if mibBuilder.loadTexts: hub1IFOutLostCrs.setDescription('The number of times Carrier Receive Sense (CRS) was lost on this interface during frame transmission. The hub will attempt to retransmit frames when transmission fails due to lost CRS.')
hub1IFOutMtuExceededDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 315, 1, 16, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hub1IFOutMtuExceededDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: hub1IFOutMtuExceededDiscards.setDescription('The number of frames discarded by this interface on transmit due to an excessive size.')
hub1IFOutCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 315, 1, 16, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hub1IFOutCollisions.setStatus('mandatory')
if mibBuilder.loadTexts: hub1IFOutCollisions.setDescription('The number of collisions detected by this interface while attempting to transmit a packet.')
hub1IFChannelUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 315, 1, 16, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(90, 90)).setFixedLength(90)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hub1IFChannelUtilization.setStatus('mandatory')
if mibBuilder.loadTexts: hub1IFChannelUtilization.setDescription('Utilization statistics for the last 60 seconds of operation of the bridging logic associated with this interface. The OCTET STRING is a series of 45 16-bit words, each word representing the percentage utilization for a 1.33 second sample period. The first 16 bit word in this series represents the oldest sample. Percentages are calculated by passing each 16 bit sample through the following equation: ((Sample) * 100) / 0xffff to yield the percent channel utilization (a number ranging from 0 to 100).')
hub1LastFailureReason = MibScalar((1, 3, 6, 1, 4, 1, 315, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hub1LastFailureReason.setStatus('mandatory')
if mibBuilder.loadTexts: hub1LastFailureReason.setDescription('The last error that caused a Hub failure. A value of zero (0) indicates that there has not been a Hub failure since the novram was last erased. A non-zero value indicates the reason for the last Hub failure. A normal Hub reset or power cycle will not change the value of this variable (it will still indicate the reason for the last known failure.')
mibBuilder.exportSymbols("NRC-HUB1-MIB", hub1PortForceReconnect=hub1PortForceReconnect, hub1LastFailureReason=hub1LastFailureReason, hub1PortType=hub1PortType, hub1PortRecordValue=hub1PortRecordValue, hub1IFOutUnderruns=hub1IFOutUnderruns, hub1IFInOverrunDiscards=hub1IFInOverrunDiscards, hub1PortPolarityStatus=hub1PortPolarityStatus, hub1IFOutLostCrs=hub1IFOutLostCrs, hub1IFTable=hub1IFTable, hub1=hub1, hub1PortLinkState=hub1PortLinkState, hub1FilterProtocols=hub1FilterProtocols, hub1PortEventCount=hub1PortEventCount, enterprises=enterprises, hub1IFEntry=hub1IFEntry, hub1PortLinkEnable=hub1PortLinkEnable, hub1IFChannelUtilization=hub1IFChannelUtilization, hub1ConsoleBaudRate=hub1ConsoleBaudRate, hub1EventRecordFlags=hub1EventRecordFlags, hub1PortName=hub1PortName, hub1SoftwareVersion=hub1SoftwareVersion, hub1CollisionLimit=hub1CollisionLimit, hub1IFOutLostCts=hub1IFOutLostCts, hub1IFInCollisions=hub1IFInCollisions, hub1IFInMtuExceededDiscards=hub1IFInMtuExceededDiscards, hub1EventCounterFlags=hub1EventCounterFlags, hub1Reset=hub1Reset, hub1AutoPartition=hub1AutoPartition, hub1CarrierRecoverTime=hub1CarrierRecoverTime, hub1IFOutCollisions=hub1IFOutCollisions, hub1LoopbackPartition=hub1LoopbackPartition, hub1IFInShortErrors=hub1IFInShortErrors, hub1ProtocolFilterMode=hub1ProtocolFilterMode, hub1IFInCrcErrors=hub1IFInCrcErrors, nrc=nrc, hub1PortIndex=hub1PortIndex, hub1ReconnectOnTransmission=hub1ReconnectOnTransmission, hub1PortEntry=hub1PortEntry, hub1BridgingMode=hub1BridgingMode, hub1IFOutMtuExceededDiscards=hub1IFOutMtuExceededDiscards, hub1PortPartitionReason=hub1PortPartitionReason, hub1IFIndex=hub1IFIndex, hub1IFInAlignmentErrors=hub1IFInAlignmentErrors, hub1IncludeOutOfWinColl=hub1IncludeOutOfWinColl, hub1PortTable=hub1PortTable)
