#
# PySNMP MIB module BAY-STACK-OSPF-EXT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BAY-STACK-OSPF-EXT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:36:04 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
AreaID, RouterID = mibBuilder.importSymbols("OSPF-MIB", "AreaID", "RouterID")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, Unsigned32, Counter32, NotificationType, Bits, ModuleIdentity, IpAddress, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, TimeTicks, Integer32, ObjectIdentity, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Unsigned32", "Counter32", "NotificationType", "Bits", "ModuleIdentity", "IpAddress", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "TimeTicks", "Integer32", "ObjectIdentity", "iso")
TruthValue, TextualConvention, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "RowStatus", "DisplayString")
bayStackMibs, = mibBuilder.importSymbols("SYNOPTICS-ROOT-MIB", "bayStackMibs")
bayStackOspfExtMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 45, 5, 14))
bayStackOspfExtMib.setRevisions(('2009-11-10 00:00', '2006-09-26 00:00', '2006-09-14 00:00', '2006-06-13 00:00', '2005-12-01 00:00', '2005-10-20 00:00', '2005-10-11 00:00', '2005-09-08 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: bayStackOspfExtMib.setRevisionsDescriptions(('v8: Added bsoeHardwareCompatibilityMode.', 'v7: Added bsoeOspfVirtIfExtType.', 'v6: Added bsoeOspfVirtIfExtTable and bsoeVirtIfMessageDigestTable.', 'v5: Fleshed out some DESCRIPTION clauses.', 'v4: Fix range of bsoeOspfIfExtPrimaryMd5Key.', 'v3: Added bsoeOspfIfExtType and bsoeOspfNbrExtTable.', 'v2: Added bsoeApplyRedistribute.', 'v1: Initial version.',))
if mibBuilder.loadTexts: bayStackOspfExtMib.setLastUpdated('200911100000Z')
if mibBuilder.loadTexts: bayStackOspfExtMib.setOrganization('Nortel Networks')
if mibBuilder.loadTexts: bayStackOspfExtMib.setContactInfo('Nortel Networks')
if mibBuilder.loadTexts: bayStackOspfExtMib.setDescription("Nortel Networks OSPF Extension MIB Copyright 2005-2009 Nortel Networks, Inc. All rights reserved. This Nortel Networks SNMP Management Information Base Specification embodies Nortel Networks' confidential and proprietary intellectual property. Nortel Networks retains all title and ownership in the Specification, including any revisions. This Specification is supplied 'AS IS,' and Nortel Networks makes no warranty, either express or implied, as to the use, operation, condition, or performance of the Specification.")
bsoeNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 5, 14, 0))
bsoeObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 5, 14, 1))
bsoeScalars = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 5, 14, 1, 1))
bsoeApplyRedistribute = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 14, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 0), ("direct", 1), ("static", 2), ("rip", 3), ("ospf", 4), ("bgp", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsoeApplyRedistribute.setStatus('current')
if mibBuilder.loadTexts: bsoeApplyRedistribute.setDescription("This object is used to implement the ospf 'ip ospf apply redistribute' command when the 'bgp|direct|rip|static' parameter is used. Setting it will cause the 'apply' to occur for the specified protocol. The value returned is always none(0).")
bsoeHardwareCompatibilityMode = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 14, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ers5510", 1), ("noneErs5510", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsoeHardwareCompatibilityMode.setStatus('current')
if mibBuilder.loadTexts: bsoeHardwareCompatibilityMode.setDescription('This object is used to set the 5510 hardware compatilibity mode.')
bsoeOspfIfExtTable = MibTable((1, 3, 6, 1, 4, 1, 45, 5, 14, 1, 2), )
if mibBuilder.loadTexts: bsoeOspfIfExtTable.setStatus('current')
if mibBuilder.loadTexts: bsoeOspfIfExtTable.setDescription('Extensions to the ospfIfTable from RFC 1850.')
bsoeOspfIfExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 5, 14, 1, 2, 1), ).setIndexNames((0, "BAY-STACK-OSPF-EXT-MIB", "bsoeOspfIfIpAddress"), (0, "BAY-STACK-OSPF-EXT-MIB", "bsoeOspfAddressLessIf"))
if mibBuilder.loadTexts: bsoeOspfIfExtEntry.setStatus('current')
if mibBuilder.loadTexts: bsoeOspfIfExtEntry.setDescription('A set of objects that augments the ospfIfTable. There will be an entry in this table for each entry in the ospfIfTable.')
bsoeOspfIfIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 14, 1, 2, 1, 1), IpAddress())
if mibBuilder.loadTexts: bsoeOspfIfIpAddress.setStatus('current')
if mibBuilder.loadTexts: bsoeOspfIfIpAddress.setDescription('The IP address of this OSPF interface.')
bsoeOspfAddressLessIf = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 14, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: bsoeOspfAddressLessIf.setStatus('current')
if mibBuilder.loadTexts: bsoeOspfAddressLessIf.setDescription('For the purpose of easing the instancing of addressed and addressless interfaces; This variable takes the value 0 on interfaces with IP Addresses, and the corresponding value of ifIndex for interfaces having no IP Address.')
bsoeOspfIfExtAdvertiseWhenDown = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 14, 1, 2, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsoeOspfIfExtAdvertiseWhenDown.setStatus('current')
if mibBuilder.loadTexts: bsoeOspfIfExtAdvertiseWhenDown.setDescription('Equivalent to rcIpConfAdvertiseWhenDown (allows this flag to be accessed by interface IP rather than by ifIndex).')
bsoeOspfIfExtPrimaryMd5Key = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 14, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsoeOspfIfExtPrimaryMd5Key.setStatus('current')
if mibBuilder.loadTexts: bsoeOspfIfExtPrimaryMd5Key.setDescription('Primary key, if it exists. If there are no keys present, this object will be 0.')
bsoeOspfIfExtMtuIgnore = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 14, 1, 2, 1, 5), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsoeOspfIfExtMtuIgnore.setStatus('current')
if mibBuilder.loadTexts: bsoeOspfIfExtMtuIgnore.setDescription('Indicates whether to ignore mtu checking in ospf bdb.')
bsoeOspfIfExtType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 14, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("passive", 2))).clone('other')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsoeOspfIfExtType.setStatus('current')
if mibBuilder.loadTexts: bsoeOspfIfExtType.setDescription('This object is an extension to the standard object ospfIfType. When the value of this object is other(1), then the type of the interface is given by ospfIfType. Otherwise, the value of this object indicates the type of the interface, and the value of ospfIfType is invalid. In the latter case, an implementation may simply not return the corresponding instance of ospfIfType.')
bsoeMessageDigestTable = MibTable((1, 3, 6, 1, 4, 1, 45, 5, 14, 1, 3), )
if mibBuilder.loadTexts: bsoeMessageDigestTable.setStatus('current')
if mibBuilder.loadTexts: bsoeMessageDigestTable.setDescription('A table of message digest keys')
bsoeMessageDigestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 5, 14, 1, 3, 1), ).setIndexNames((0, "BAY-STACK-OSPF-EXT-MIB", "bsoeMessageDigestIpAddress"), (0, "BAY-STACK-OSPF-EXT-MIB", "bsoeMessageDigestAddressLessIf"), (0, "BAY-STACK-OSPF-EXT-MIB", "bsoeMessageDigestIndex"), (0, "BAY-STACK-OSPF-EXT-MIB", "bsoeMessageDigestType"))
if mibBuilder.loadTexts: bsoeMessageDigestEntry.setStatus('current')
if mibBuilder.loadTexts: bsoeMessageDigestEntry.setDescription('A message digest key')
bsoeMessageDigestIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 14, 1, 3, 1, 1), IpAddress())
if mibBuilder.loadTexts: bsoeMessageDigestIpAddress.setStatus('current')
if mibBuilder.loadTexts: bsoeMessageDigestIpAddress.setDescription('The IP address of this OSPF interface.')
bsoeMessageDigestAddressLessIf = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 14, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: bsoeMessageDigestAddressLessIf.setStatus('current')
if mibBuilder.loadTexts: bsoeMessageDigestAddressLessIf.setDescription('For the purpose of easing the instancing of addressed and addressless interfaces; This variable takes the value 0 on interfaces with IP Addresses, and the corresponding value of ifIndex for interfaces having no IP Address.')
bsoeMessageDigestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 14, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: bsoeMessageDigestIndex.setStatus('current')
if mibBuilder.loadTexts: bsoeMessageDigestIndex.setDescription('An arbitrary index value for this digest value.')
bsoeMessageDigestType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 14, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("md5", 1))))
if mibBuilder.loadTexts: bsoeMessageDigestType.setStatus('current')
if mibBuilder.loadTexts: bsoeMessageDigestType.setDescription('The type of digest value. Currently only MD5 is supported.')
bsoeMessageDigestKey = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 14, 1, 3, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsoeMessageDigestKey.setStatus('current')
if mibBuilder.loadTexts: bsoeMessageDigestKey.setDescription('The key value. When retrieved, the value is always an empty string. Setting this will change the key.')
bsoeMessageDigestRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 14, 1, 3, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsoeMessageDigestRowStatus.setStatus('current')
if mibBuilder.loadTexts: bsoeMessageDigestRowStatus.setDescription('Controls creation and deletion of rows in this table. The value of bsoeMessageDigestKey must be set before a row can be made active. There are no restrictions on setting the value of bsoeMessageDigestKey while a row is active.')
bsoeOspfNbrExtTable = MibTable((1, 3, 6, 1, 4, 1, 45, 5, 14, 1, 4), )
if mibBuilder.loadTexts: bsoeOspfNbrExtTable.setStatus('current')
if mibBuilder.loadTexts: bsoeOspfNbrExtTable.setDescription('Extensions to the ospfNbrTable from RFC 1850.')
bsoeOspfNbrExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 5, 14, 1, 4, 1), ).setIndexNames((0, "BAY-STACK-OSPF-EXT-MIB", "bsoeOspfNbrExtIpAddr"), (0, "BAY-STACK-OSPF-EXT-MIB", "bsoeOspfNbrExtAddressLessIndex"))
if mibBuilder.loadTexts: bsoeOspfNbrExtEntry.setStatus('current')
if mibBuilder.loadTexts: bsoeOspfNbrExtEntry.setDescription('A set of objects that augments the ospfNbrTable. There will be an entry in this table for each entry in the ospfNbrTable.')
bsoeOspfNbrExtIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 14, 1, 4, 1, 1), IpAddress())
if mibBuilder.loadTexts: bsoeOspfNbrExtIpAddr.setStatus('current')
if mibBuilder.loadTexts: bsoeOspfNbrExtIpAddr.setDescription('')
bsoeOspfNbrExtAddressLessIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 14, 1, 4, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: bsoeOspfNbrExtAddressLessIndex.setStatus('current')
if mibBuilder.loadTexts: bsoeOspfNbrExtAddressLessIndex.setDescription('')
bsoeOspfNbrExtInterfaceAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 14, 1, 4, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsoeOspfNbrExtInterfaceAddr.setStatus('current')
if mibBuilder.loadTexts: bsoeOspfNbrExtInterfaceAddr.setDescription('')
bsoeOspfVirtIfExtTable = MibTable((1, 3, 6, 1, 4, 1, 45, 5, 14, 1, 5), )
if mibBuilder.loadTexts: bsoeOspfVirtIfExtTable.setStatus('current')
if mibBuilder.loadTexts: bsoeOspfVirtIfExtTable.setDescription('Extensions to the ospfVirtIfTable from RFC 1850.')
bsoeOspfVirtIfExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 5, 14, 1, 5, 1), ).setIndexNames((0, "BAY-STACK-OSPF-EXT-MIB", "bsoeOspfVirtIfExtAreaId"), (0, "BAY-STACK-OSPF-EXT-MIB", "bsoeOspfVirtIfExtNeighbor"))
if mibBuilder.loadTexts: bsoeOspfVirtIfExtEntry.setStatus('current')
if mibBuilder.loadTexts: bsoeOspfVirtIfExtEntry.setDescription('A set of objects that augments the ospfVirtIfTable. There will be an entry in this table for each entry in the ospfVirtIfTable.')
bsoeOspfVirtIfExtAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 14, 1, 5, 1, 1), AreaID())
if mibBuilder.loadTexts: bsoeOspfVirtIfExtAreaId.setStatus('current')
if mibBuilder.loadTexts: bsoeOspfVirtIfExtAreaId.setDescription('The Transit Area that the Virtual Link traverses. By definition, this is not 0.0.0.0')
bsoeOspfVirtIfExtNeighbor = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 14, 1, 5, 1, 2), RouterID())
if mibBuilder.loadTexts: bsoeOspfVirtIfExtNeighbor.setStatus('current')
if mibBuilder.loadTexts: bsoeOspfVirtIfExtNeighbor.setDescription('The Router ID of the Virtual Neighbor.')
bsoeOspfVirtIfExtPrimaryMd5Key = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 14, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsoeOspfVirtIfExtPrimaryMd5Key.setStatus('current')
if mibBuilder.loadTexts: bsoeOspfVirtIfExtPrimaryMd5Key.setDescription('Primary key, if it exists. If there are no keys present, this object will be 0.')
bsoeOspfVirtIfExtType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 14, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("manual", 1), ("automatic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsoeOspfVirtIfExtType.setStatus('current')
if mibBuilder.loadTexts: bsoeOspfVirtIfExtType.setDescription('This object indicates whether the virtual link was created manually or automatically.')
bsoeVirtIfMessageDigestTable = MibTable((1, 3, 6, 1, 4, 1, 45, 5, 14, 1, 6), )
if mibBuilder.loadTexts: bsoeVirtIfMessageDigestTable.setStatus('current')
if mibBuilder.loadTexts: bsoeVirtIfMessageDigestTable.setDescription('A table of message digest keys for virtual interfaces')
bsoeVirtIfMessageDigestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 5, 14, 1, 6, 1), ).setIndexNames((0, "BAY-STACK-OSPF-EXT-MIB", "bsoeVirtIfMessageDigestAreaId"), (0, "BAY-STACK-OSPF-EXT-MIB", "bsoeVirtIfMessageDigestNeighbor"), (0, "BAY-STACK-OSPF-EXT-MIB", "bsoeVirtIfMessageDigestIndex"), (0, "BAY-STACK-OSPF-EXT-MIB", "bsoeVirtIfMessageDigestType"))
if mibBuilder.loadTexts: bsoeVirtIfMessageDigestEntry.setStatus('current')
if mibBuilder.loadTexts: bsoeVirtIfMessageDigestEntry.setDescription('A message digest key for a virtual interface')
bsoeVirtIfMessageDigestAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 14, 1, 6, 1, 1), AreaID())
if mibBuilder.loadTexts: bsoeVirtIfMessageDigestAreaId.setStatus('current')
if mibBuilder.loadTexts: bsoeVirtIfMessageDigestAreaId.setDescription('The Transit Area that the Virtual Link traverses. By definition, this is not 0.0.0.0')
bsoeVirtIfMessageDigestNeighbor = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 14, 1, 6, 1, 2), RouterID())
if mibBuilder.loadTexts: bsoeVirtIfMessageDigestNeighbor.setStatus('current')
if mibBuilder.loadTexts: bsoeVirtIfMessageDigestNeighbor.setDescription('The Router ID of the Virtual Neighbor.')
bsoeVirtIfMessageDigestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 14, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: bsoeVirtIfMessageDigestIndex.setStatus('current')
if mibBuilder.loadTexts: bsoeVirtIfMessageDigestIndex.setDescription('An arbitrary index value for this digest value.')
bsoeVirtIfMessageDigestType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 14, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("md5", 1))))
if mibBuilder.loadTexts: bsoeVirtIfMessageDigestType.setStatus('current')
if mibBuilder.loadTexts: bsoeVirtIfMessageDigestType.setDescription('The type of digest value. Currently only MD5 is supported.')
bsoeVirtIfMessageDigestKey = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 14, 1, 6, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsoeVirtIfMessageDigestKey.setStatus('current')
if mibBuilder.loadTexts: bsoeVirtIfMessageDigestKey.setDescription('The key value. When retrieved, the value is always an empty string. Setting this will change the key.')
bsoeVirtIfMessageDigestRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 14, 1, 6, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsoeVirtIfMessageDigestRowStatus.setStatus('current')
if mibBuilder.loadTexts: bsoeVirtIfMessageDigestRowStatus.setDescription('Controls creation and deletion of rows in this table. The value of bsoeVirtIfMessageDigestKey must be set before a row can be made active. There are no restrictions on setting the value of bsoeVirtIfMessageDigestKey while a row is active.')
mibBuilder.exportSymbols("BAY-STACK-OSPF-EXT-MIB", bsoeScalars=bsoeScalars, bsoeVirtIfMessageDigestTable=bsoeVirtIfMessageDigestTable, bsoeOspfVirtIfExtPrimaryMd5Key=bsoeOspfVirtIfExtPrimaryMd5Key, bsoeOspfIfExtType=bsoeOspfIfExtType, bsoeMessageDigestKey=bsoeMessageDigestKey, bsoeOspfVirtIfExtTable=bsoeOspfVirtIfExtTable, bsoeMessageDigestTable=bsoeMessageDigestTable, bsoeMessageDigestAddressLessIf=bsoeMessageDigestAddressLessIf, bsoeOspfNbrExtInterfaceAddr=bsoeOspfNbrExtInterfaceAddr, PYSNMP_MODULE_ID=bayStackOspfExtMib, bsoeNotifications=bsoeNotifications, bsoeOspfNbrExtEntry=bsoeOspfNbrExtEntry, bsoeOspfNbrExtIpAddr=bsoeOspfNbrExtIpAddr, bsoeOspfIfExtMtuIgnore=bsoeOspfIfExtMtuIgnore, bsoeMessageDigestIpAddress=bsoeMessageDigestIpAddress, bsoeMessageDigestEntry=bsoeMessageDigestEntry, bsoeMessageDigestIndex=bsoeMessageDigestIndex, bsoeVirtIfMessageDigestNeighbor=bsoeVirtIfMessageDigestNeighbor, bsoeOspfVirtIfExtEntry=bsoeOspfVirtIfExtEntry, bsoeApplyRedistribute=bsoeApplyRedistribute, bsoeOspfVirtIfExtNeighbor=bsoeOspfVirtIfExtNeighbor, bsoeMessageDigestRowStatus=bsoeMessageDigestRowStatus, bsoeOspfIfIpAddress=bsoeOspfIfIpAddress, bsoeOspfVirtIfExtType=bsoeOspfVirtIfExtType, bsoeOspfIfExtAdvertiseWhenDown=bsoeOspfIfExtAdvertiseWhenDown, bsoeOspfIfExtPrimaryMd5Key=bsoeOspfIfExtPrimaryMd5Key, bsoeObjects=bsoeObjects, bsoeHardwareCompatibilityMode=bsoeHardwareCompatibilityMode, bsoeMessageDigestType=bsoeMessageDigestType, bsoeOspfNbrExtAddressLessIndex=bsoeOspfNbrExtAddressLessIndex, bsoeVirtIfMessageDigestIndex=bsoeVirtIfMessageDigestIndex, bsoeOspfIfExtEntry=bsoeOspfIfExtEntry, bsoeVirtIfMessageDigestKey=bsoeVirtIfMessageDigestKey, bsoeVirtIfMessageDigestEntry=bsoeVirtIfMessageDigestEntry, bsoeVirtIfMessageDigestType=bsoeVirtIfMessageDigestType, bsoeOspfIfExtTable=bsoeOspfIfExtTable, bsoeOspfVirtIfExtAreaId=bsoeOspfVirtIfExtAreaId, bsoeOspfAddressLessIf=bsoeOspfAddressLessIf, bsoeVirtIfMessageDigestAreaId=bsoeVirtIfMessageDigestAreaId, bsoeVirtIfMessageDigestRowStatus=bsoeVirtIfMessageDigestRowStatus, bayStackOspfExtMib=bayStackOspfExtMib, bsoeOspfNbrExtTable=bsoeOspfNbrExtTable)
