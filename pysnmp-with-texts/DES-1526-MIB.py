#
# PySNMP MIB module DES-1526-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DES-1526-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:39:19 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, Counter64, Gauge32, NotificationType, enterprises, Bits, Unsigned32, TimeTicks, MibIdentifier, Counter32, mib_2, Integer32, ModuleIdentity, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, iso = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Counter64", "Gauge32", "NotificationType", "enterprises", "Bits", "Unsigned32", "TimeTicks", "MibIdentifier", "Counter32", "mib-2", "Integer32", "ModuleIdentity", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso")
PhysAddress, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "PhysAddress", "DisplayString", "TextualConvention")
d_link = MibIdentifier((1, 3, 6, 1, 4, 1, 171)).setLabel("d-link")
dlink_products = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10)).setLabel("dlink-products")
dlink_DES1526SeriesProd = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 60)).setLabel("dlink-DES1526SeriesProd")
DES_1526 = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 60, 1)).setLabel("DES-1526")
class OwnerString(DisplayString):
    pass

class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

class PortList(TextualConvention, OctetString):
    description = "Each octet within this value specifies a set of eight ports, with the first octet specifying ports 1 through 8, the second octet specifying ports 9 through 16, etc. Within each octet, the most significant bit represents the lowest numbered port, and the least significant bit represents the highest numbered port. Thus, each port of the bridge is represented by a single bit within the value of this object. If that bit has a value of '1' then that port is included in the set of ports; the port is not included if its bit has a value of '0'."
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

class RowStatus(TextualConvention, Integer32):
    description = ''
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6))

companyCommGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 1))
companyMiscGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 3))
companyConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 11))
companyTVlanGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 13))
companyPortTrunkGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 14))
commSetTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 1, 1), )
if mibBuilder.loadTexts: commSetTable.setStatus('mandatory')
if mibBuilder.loadTexts: commSetTable.setDescription('A list of SNMP Set Community Entries ')
commSetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 1, 1, 1), ).setIndexNames((0, "DES-1526-MIB", "commSetIndex"))
if mibBuilder.loadTexts: commSetEntry.setStatus('mandatory')
if mibBuilder.loadTexts: commSetEntry.setDescription('A list of SNMP Set Community properties')
commSetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commSetIndex.setStatus('mandatory')
if mibBuilder.loadTexts: commSetIndex.setDescription('An index that uniquely identifies an entry in the Community Table. Eight entries are currently supported.')
commSetName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commSetName.setStatus('mandatory')
if mibBuilder.loadTexts: commSetName.setDescription('The name of this SNMP Set Community Entry.')
commSetStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 1, 1, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commSetStatus.setStatus('mandatory')
if mibBuilder.loadTexts: commSetStatus.setDescription('The RowStatus for the Set Community entry.')
commGetTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 1, 2), )
if mibBuilder.loadTexts: commGetTable.setStatus('mandatory')
if mibBuilder.loadTexts: commGetTable.setDescription('A list of SNMP Get Community Entries ')
commGetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 1, 2, 1), ).setIndexNames((0, "DES-1526-MIB", "commGetIndex"))
if mibBuilder.loadTexts: commGetEntry.setStatus('mandatory')
if mibBuilder.loadTexts: commGetEntry.setDescription('A list of SNMP Get Community properties')
commGetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commGetIndex.setStatus('mandatory')
if mibBuilder.loadTexts: commGetIndex.setDescription('An index that uniquely identifies an entry in the Community Table. Eight entries are currently supported.')
commGetName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commGetName.setStatus('mandatory')
if mibBuilder.loadTexts: commGetName.setDescription('The name of this SNMP Get Community Entry.')
commGetStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 1, 2, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commGetStatus.setStatus('mandatory')
if mibBuilder.loadTexts: commGetStatus.setDescription('The RowStatus for the Get Community entry.')
commTrapTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 1, 3), )
if mibBuilder.loadTexts: commTrapTable.setStatus('mandatory')
if mibBuilder.loadTexts: commTrapTable.setDescription('A list of SNMP Trap Community Entries ')
commTrapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 1, 3, 1), ).setIndexNames((0, "DES-1526-MIB", "commTrapIndex"))
if mibBuilder.loadTexts: commTrapEntry.setStatus('mandatory')
if mibBuilder.loadTexts: commTrapEntry.setDescription('A list of SNMP Trap Community properties')
commTrapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commTrapIndex.setStatus('mandatory')
if mibBuilder.loadTexts: commTrapIndex.setDescription('An index that uniquely identifies an entry in the Community Table. Eight entries are currently supported.')
commTrapName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 1, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commTrapName.setStatus('mandatory')
if mibBuilder.loadTexts: commTrapName.setDescription('The name of this SNMP Trap Community Entry.')
commTrapIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 1, 3, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commTrapIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: commTrapIpAddress.setDescription('The IP Address of this SNMP Trap Community Entry.')
commTrapVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 1, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commTrapVlanId.setStatus('mandatory')
if mibBuilder.loadTexts: commTrapVlanId.setDescription('The Trap VLAN identifier of this SNMP Trap Community Entry. The value must be from 1 to 4094.')
commTrapSNMPBootup = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commTrapSNMPBootup.setStatus('mandatory')
if mibBuilder.loadTexts: commTrapSNMPBootup.setDescription('Bootup trap')
commTrapSNMPTPLinkUpDown = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commTrapSNMPTPLinkUpDown.setStatus('mandatory')
if mibBuilder.loadTexts: commTrapSNMPTPLinkUpDown.setDescription('Twisted Pair link up / link down trap')
commTrapSNMPFiberLinkUpDown = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commTrapSNMPFiberLinkUpDown.setStatus('mandatory')
if mibBuilder.loadTexts: commTrapSNMPFiberLinkUpDown.setDescription('Fiber link up / link down trap')
commTrapTrapAbnormalTPRXError = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commTrapTrapAbnormalTPRXError.setStatus('mandatory')
if mibBuilder.loadTexts: commTrapTrapAbnormalTPRXError.setDescription('Twisted Pair abnormal receive error trap')
commTrapTrapAbnormalTPTXError = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 1, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commTrapTrapAbnormalTPTXError.setStatus('mandatory')
if mibBuilder.loadTexts: commTrapTrapAbnormalTPTXError.setDescription('Twisted Pair abnormal transmit error trap')
commTrapTrapAbnormalFiberRXError = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 1, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commTrapTrapAbnormalFiberRXError.setStatus('mandatory')
if mibBuilder.loadTexts: commTrapTrapAbnormalFiberRXError.setDescription('Fiber abnormal receive error trap')
commTrapTrapAbnormalFiberTXError = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 1, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commTrapTrapAbnormalFiberTXError.setStatus('mandatory')
if mibBuilder.loadTexts: commTrapTrapAbnormalFiberTXError.setDescription('Fiber abnormal transmit error trap')
commTrapTrapPOEPowerFail = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 1, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commTrapTrapPOEPowerFail.setStatus('mandatory')
if mibBuilder.loadTexts: commTrapTrapPOEPowerFail.setDescription('PoE POWER Fail')
commTrapTrapPOEPortOvercurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 1, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commTrapTrapPOEPortOvercurrent.setStatus('mandatory')
if mibBuilder.loadTexts: commTrapTrapPOEPortOvercurrent.setDescription('PoE port Overcurrent')
commTrapTrapPOEPortShort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 1, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commTrapTrapPOEPortShort.setStatus('mandatory')
if mibBuilder.loadTexts: commTrapTrapPOEPortShort.setDescription('PoE port Shortcircuit')
commTrapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 1, 3, 1, 16), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commTrapStatus.setStatus('mandatory')
if mibBuilder.loadTexts: commTrapStatus.setDescription('The RowStatus for the Trap Community entry.')
miscStatisticsReset = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("noop", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: miscStatisticsReset.setStatus('mandatory')
if mibBuilder.loadTexts: miscStatisticsReset.setDescription('Resets the units statistics. A (1) resets the unit, a (2) does nothing.')
configVerSwPrimary = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 11, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configVerSwPrimary.setStatus('mandatory')
if mibBuilder.loadTexts: configVerSwPrimary.setDescription('The software image version string')
configVerHwChipSet = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 11, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configVerHwChipSet.setStatus('mandatory')
if mibBuilder.loadTexts: configVerHwChipSet.setDescription('The hardware chipset version string')
configPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 11, 6), )
if mibBuilder.loadTexts: configPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: configPortTable.setDescription('A list of interface entries used for enterprise specific configuration. The number of entries is given by the value of ifNumber. All interface entries are assumed to be Ethernet interafaces.')
configPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 11, 6, 1), ).setIndexNames((0, "DES-1526-MIB", "configPort"))
if mibBuilder.loadTexts: configPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: configPortEntry.setDescription('An enterprise specific interface entry.')
configPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 11, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: configPort.setStatus('mandatory')
if mibBuilder.loadTexts: configPort.setDescription('A unique value for each interface that correlates to ifIndex. Its value ranges between 1 and the value of ifNumber.')
configPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 11, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("disable", 1), ("auto", 2), ("rate10M-Half", 3), ("rate10M-Full", 4), ("rate100M-Half", 5), ("rate100M-Full", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configPortSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: configPortSpeed.setDescription("The port's speed desired state.")
configPortOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 11, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("down", 1), ("rate10M-Half", 2), ("rate10M-Full", 3), ("rate100M-Half", 4), ("rate100M-Full", 5), ("rate1G-Half", 6), ("rate1G-Full", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configPortOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: configPortOperStatus.setDescription("The port's operating speed state.")
configPortFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 11, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configPortFlowControl.setStatus('mandatory')
if mibBuilder.loadTexts: configPortFlowControl.setDescription('The port will avoid transmitting a new packet for the period of time specified in a received PAUSE packet when enabled.')
configPortFlowControlOper = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 11, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configPortFlowControlOper.setStatus('mandatory')
if mibBuilder.loadTexts: configPortFlowControlOper.setDescription("The port's operating flow control state.")
configPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 11, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("high", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configPortPriority.setStatus('mandatory')
if mibBuilder.loadTexts: configPortPriority.setDescription("The port's current priority.")
configMirrorTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 11, 8), )
if mibBuilder.loadTexts: configMirrorTable.setStatus('mandatory')
if mibBuilder.loadTexts: configMirrorTable.setDescription('A list of the Mirror')
configMirrorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 11, 8, 1), ).setIndexNames((0, "DES-1526-MIB", "configMirrorId"))
if mibBuilder.loadTexts: configMirrorEntry.setStatus('mandatory')
if mibBuilder.loadTexts: configMirrorEntry.setDescription('A Mirror entry containing the Mirror id and mode')
configMirrorId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 11, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configMirrorId.setStatus('mandatory')
if mibBuilder.loadTexts: configMirrorId.setDescription('An index that uniquely identifies an entry in the Mirror Table. One entries are currently supported.')
configMirrorMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 11, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disabled", 0), ("Rx", 1), ("Tx", 2), ("both", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configMirrorMode.setStatus('mandatory')
if mibBuilder.loadTexts: configMirrorMode.setDescription('When deciding the mirroring source port, then Mirror mode will be available.')
configMirrorMon = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 11, 8, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configMirrorMon.setStatus('mandatory')
if mibBuilder.loadTexts: configMirrorMon.setDescription('When mirroring is enabled (configMirroringMode = ingress, egress, both), this identifies the mirroring monitoring port. This value has a valid range of 1 to ifNumber when enabled.')
configMirrorSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 11, 8, 1, 4), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configMirrorSrc.setStatus('mandatory')
if mibBuilder.loadTexts: configMirrorSrc.setDescription("When mirroring is enabled (configMirroringMode = ingress, egress, both), this identifies the mirroring source port. This value has a valid range of 1 to ifNumber when enbaled. Each octet within this value specifies a set of eight ports, with the first octet specifying ports 1 through 8, the second octet specifying ports 9 through 16, etc. Within each octet, the most significant bit represents the lowest numbered port, and the least significant bit represents the highest numbered port. Thus, each port of the bridge is represented by a single bit within the value of this object. If that bit has a value of '1' then that port is included in the set of ports; the port is not included if its bit has a value of '0'.")
configMirrorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 11, 8, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configMirrorStatus.setStatus('mandatory')
if mibBuilder.loadTexts: configMirrorStatus.setDescription('The RowStatus for the Mirror entry.')
configSNMPEnable = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 11, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSNMPEnable.setStatus('mandatory')
if mibBuilder.loadTexts: configSNMPEnable.setDescription('Enable/Disable SNMP function. A (1) enables, a (2) disables.')
configIpAssignmentMode = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 11, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("manual", 1), ("dhcp", 2), ("other", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configIpAssignmentMode.setStatus('mandatory')
if mibBuilder.loadTexts: configIpAssignmentMode.setDescription('Indicates whether the device address is assigned by the user (manual), or DHCP, or Others(BootP).')
configPhysAddress = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 11, 13), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: configPhysAddress.setStatus('mandatory')
if mibBuilder.loadTexts: configPhysAddress.setDescription("The interface's address at the protocol layer immediately 'below' the network layer in the protocol stack. This is the physical address for the end-station.")
configPasswordAdmin = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 11, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: configPasswordAdmin.setStatus('mandatory')
if mibBuilder.loadTexts: configPasswordAdmin.setDescription('The adminstrator password')
configIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 11, 16), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: configIpAddress.setDescription('The IP Address for the RDU box.')
configNetMask = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 11, 17), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configNetMask.setStatus('mandatory')
if mibBuilder.loadTexts: configNetMask.setDescription('The network mask for the RDU box.')
configGateway = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 11, 18), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configGateway.setStatus('mandatory')
if mibBuilder.loadTexts: configGateway.setDescription('The Gatway Address for the unit.')
configSave = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 11, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("save", 1), ("noop", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSave.setStatus('mandatory')
if mibBuilder.loadTexts: configSave.setDescription('Physically saves the current configuration to nvram. - use with care. (1) saves the configuration (2) does nothing.')
configRestoreDefaults = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 11, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("restore", 1), ("noop", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configRestoreDefaults.setStatus('mandatory')
if mibBuilder.loadTexts: configRestoreDefaults.setDescription('Restores the configuration of the unit to the original settings.')
tvlanTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 13, 1), )
if mibBuilder.loadTexts: tvlanTable.setStatus('mandatory')
if mibBuilder.loadTexts: tvlanTable.setDescription('A list of the VLANs')
tvlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 13, 1, 1), ).setIndexNames((0, "DES-1526-MIB", "tvlanId"))
if mibBuilder.loadTexts: tvlanEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tvlanEntry.setDescription('A VLAN entry containing the VLAN id and name.')
tvlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 13, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tvlanId.setStatus('mandatory')
if mibBuilder.loadTexts: tvlanId.setDescription('The VLAN identifier. A maximum of 64 VLANs is supported. The value must be from 1 to 4094.')
tvlanMember = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 13, 1, 1, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tvlanMember.setStatus('mandatory')
if mibBuilder.loadTexts: tvlanMember.setDescription("The set of the device's member ports that belong to the VLAN. Each octet within the value of this object specifies a set of eight ports, with the first octet specifying ports 1 through 8, the second octet specifying ports 9 through 16, etc. Within each octet, the most significant bit represents the lowest numbered port, and the least significant bit represents the highest numbered port. Thus, each port of the VLAN is represented by a single bit within the value of this object. If that bit has a value of '1' then that port is included in the set of ports; the port is not included if its bit has a value of '0'.")
tvlanUntaggedPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 13, 1, 1, 4), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tvlanUntaggedPorts.setStatus('mandatory')
if mibBuilder.loadTexts: tvlanUntaggedPorts.setDescription("If that bit has a value of '1' the outgoing frame on the egress port is untagged. If that bit has a value of '0' the outgoing frame on the egress port is tagged.")
tvlanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 13, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4, 6))).clone(namedValues=NamedValues(("active", 1), ("createAndGo", 4), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tvlanStatus.setStatus('mandatory')
if mibBuilder.loadTexts: tvlanStatus.setDescription('The status of an entry in the VLAN Table. Only a subset of the rowstatus variables (active, createAndGo, destroy) are available.')
tvlanPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 13, 2), )
if mibBuilder.loadTexts: tvlanPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: tvlanPortTable.setDescription('A list of ports and their associated VLAN.')
tvlanPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 13, 2, 1), ).setIndexNames((0, "DES-1526-MIB", "tvlanPortPortId"))
if mibBuilder.loadTexts: tvlanPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tvlanPortEntry.setDescription('Information pertaining to an individual port regarding to which VLAN it belongs.')
tvlanPortPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 13, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tvlanPortPortId.setStatus('mandatory')
if mibBuilder.loadTexts: tvlanPortPortId.setDescription('A port identifier that is in the range of 1 to ifNumber.')
tvlanPortVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 13, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tvlanPortVlanId.setStatus('mandatory')
if mibBuilder.loadTexts: tvlanPortVlanId.setDescription('The default VLAN identifier.')
portTrunkTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 14, 1), )
if mibBuilder.loadTexts: portTrunkTable.setStatus('mandatory')
if mibBuilder.loadTexts: portTrunkTable.setDescription('A list of port trunks and their associated members.')
portTrunkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 14, 1, 1), ).setIndexNames((0, "DES-1526-MIB", "portTrunkId"), (0, "DES-1526-MIB", "portTrunkMember"))
if mibBuilder.loadTexts: portTrunkEntry.setStatus('mandatory')
if mibBuilder.loadTexts: portTrunkEntry.setDescription('A port trunk entry containing the trunk id and trunk members.')
portTrunkId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 14, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portTrunkId.setStatus('mandatory')
if mibBuilder.loadTexts: portTrunkId.setDescription('The port trunk identifier. The current range is from 1 to 4.')
portTrunkMember = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 14, 1, 1, 2), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portTrunkMember.setStatus('mandatory')
if mibBuilder.loadTexts: portTrunkMember.setDescription("Trunk group 1 - 3 has eight members (Port 01/09/17 - 08/16/24). Trunk group 4 has two members (Port 25-26). Each octet within this value specifies a set of eight ports, with the first octet specifying ports 1 through 8, the second octet specifying ports 9 through 16, etc. Within each octet, the most significant bit represents the lowest numbered port, and the least significant bit represents the highest numbered port. Thus, each port of the bridge is represented by a single bit within the value of this object. If that bit has a value of '1' then that port is included in the set of ports; the port is not included if its bit has a value of '0'.")
portTrunkMemberValue = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 14, 1, 1, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portTrunkMemberValue.setStatus('mandatory')
if mibBuilder.loadTexts: portTrunkMemberValue.setDescription("A port trunk member value indicates which port is a member of the specified trunk. Valid values are in the range from 0 to ifNumber. A zero indicates that no port is contained in the specifed member. Each octet within this value specifies a set of eight ports, with the first octet specifying ports 1 through 8, the second octet specifying ports 9 through 16, etc. Within each octet, the most significant bit represents the lowest numbered port, and the least significant bit represents the highest numbered port. Thus, each port of the bridge is represented by a single bit within the value of this object. If that bit has a value of '1' then that port is included in the set of ports; the port is not included if its bit has a value of '0'.")
portTrunkEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 14, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portTrunkEnable.setStatus('mandatory')
if mibBuilder.loadTexts: portTrunkEnable.setDescription('Enable/Disable Trunk group. A (1) enables, a (2) disables.')
swFiberInsert = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 60, 1) + (0,1))
if mibBuilder.loadTexts: swFiberInsert.setDescription('Fiber insert trap')
swFiberRemove = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 60, 1) + (0,2))
if mibBuilder.loadTexts: swFiberRemove.setDescription('Fiber remove trap')
swFiberAbnormalRXError = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 60, 1) + (0,3))
if mibBuilder.loadTexts: swFiberAbnormalRXError.setDescription('Fiber abnormal rx error trap')
swFiberAbnormalTXError = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 60, 1) + (0,4))
if mibBuilder.loadTexts: swFiberAbnormalTXError.setDescription('Fiber abnormal tx error trap')
swTPAbnormalRXError = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 60, 1) + (0,5))
if mibBuilder.loadTexts: swTPAbnormalRXError.setDescription('Twisted Pair abnormal rx error trap')
swTPAbnormalTXError = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 60, 1) + (0,6))
if mibBuilder.loadTexts: swTPAbnormalTXError.setDescription('Twisted Pair abnormal tx error trap')
mibBuilder.exportSymbols("DES-1526-MIB", configPortPriority=configPortPriority, configMirrorStatus=configMirrorStatus, commTrapTrapAbnormalTPTXError=commTrapTrapAbnormalTPTXError, tvlanTable=tvlanTable, companyTVlanGroup=companyTVlanGroup, commTrapTable=commTrapTable, commTrapIpAddress=commTrapIpAddress, commTrapTrapAbnormalFiberRXError=commTrapTrapAbnormalFiberRXError, swFiberAbnormalTXError=swFiberAbnormalTXError, DES_1526=DES_1526, swFiberRemove=swFiberRemove, configPasswordAdmin=configPasswordAdmin, tvlanMember=tvlanMember, dlink_products=dlink_products, configMirrorId=configMirrorId, PortList=PortList, commGetStatus=commGetStatus, commSetIndex=commSetIndex, configPhysAddress=configPhysAddress, commTrapTrapAbnormalTPRXError=commTrapTrapAbnormalTPRXError, commTrapTrapPOEPowerFail=commTrapTrapPOEPowerFail, swFiberAbnormalRXError=swFiberAbnormalRXError, companyMiscGroup=companyMiscGroup, portTrunkEntry=portTrunkEntry, commTrapEntry=commTrapEntry, companyPortTrunkGroup=companyPortTrunkGroup, tvlanStatus=tvlanStatus, commTrapSNMPFiberLinkUpDown=commTrapSNMPFiberLinkUpDown, commTrapTrapAbnormalFiberTXError=commTrapTrapAbnormalFiberTXError, configMirrorTable=configMirrorTable, portTrunkMemberValue=portTrunkMemberValue, OwnerString=OwnerString, tvlanUntaggedPorts=tvlanUntaggedPorts, commSetEntry=commSetEntry, configSNMPEnable=configSNMPEnable, configRestoreDefaults=configRestoreDefaults, commTrapTrapPOEPortShort=commTrapTrapPOEPortShort, tvlanId=tvlanId, commGetIndex=commGetIndex, portTrunkEnable=portTrunkEnable, dlink_DES1526SeriesProd=dlink_DES1526SeriesProd, configVerSwPrimary=configVerSwPrimary, configMirrorEntry=configMirrorEntry, RowStatus=RowStatus, configPortFlowControl=configPortFlowControl, commSetStatus=commSetStatus, commTrapTrapPOEPortOvercurrent=commTrapTrapPOEPortOvercurrent, configNetMask=configNetMask, commGetEntry=commGetEntry, d_link=d_link, configSave=configSave, configMirrorMode=configMirrorMode, configIpAddress=configIpAddress, swTPAbnormalTXError=swTPAbnormalTXError, commTrapSNMPBootup=commTrapSNMPBootup, commGetName=commGetName, portTrunkId=portTrunkId, configPortOperStatus=configPortOperStatus, configPortSpeed=configPortSpeed, commGetTable=commGetTable, commTrapVlanId=commTrapVlanId, commSetName=commSetName, portTrunkTable=portTrunkTable, configVerHwChipSet=configVerHwChipSet, swFiberInsert=swFiberInsert, configIpAssignmentMode=configIpAssignmentMode, configPortFlowControlOper=configPortFlowControlOper, configGateway=configGateway, configPortEntry=configPortEntry, configMirrorMon=configMirrorMon, companyCommGroup=companyCommGroup, tvlanPortEntry=tvlanPortEntry, tvlanPortVlanId=tvlanPortVlanId, commTrapStatus=commTrapStatus, configPort=configPort, swTPAbnormalRXError=swTPAbnormalRXError, tvlanPortPortId=tvlanPortPortId, configPortTable=configPortTable, commSetTable=commSetTable, commTrapSNMPTPLinkUpDown=commTrapSNMPTPLinkUpDown, portTrunkMember=portTrunkMember, commTrapName=commTrapName, miscStatisticsReset=miscStatisticsReset, commTrapIndex=commTrapIndex, tvlanEntry=tvlanEntry, tvlanPortTable=tvlanPortTable, MacAddress=MacAddress, configMirrorSrc=configMirrorSrc, companyConfigGroup=companyConfigGroup)
