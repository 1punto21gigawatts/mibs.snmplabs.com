#
# PySNMP MIB module IBMIROC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/IBMIROC-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:51:37 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint")
proElsSubSysEventMsg, proResMemHeapTotal, proResMemHeapNeverAlloc = mibBuilder.importSymbols("PROTEON-MIB", "proElsSubSysEventMsg", "proResMemHeapTotal", "proResMemHeapNeverAlloc")
frCircuitIfIndex, frCircuitDlci = mibBuilder.importSymbols("RFC1315-MIB", "frCircuitIfIndex", "frCircuitDlci")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
enterprises, NotificationType, Counter64, ModuleIdentity, Unsigned32, MibIdentifier, iso, ObjectIdentity, Bits, Counter32, Gauge32, Integer32, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "enterprises", "NotificationType", "Counter64", "ModuleIdentity", "Unsigned32", "MibIdentifier", "iso", "ObjectIdentity", "Bits", "Counter32", "Gauge32", "Integer32", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "IpAddress")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
ibm = MibIdentifier((1, 3, 6, 1, 4, 1, 2))
ibmProd = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6))
ibmIROC = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119))
class MacAddressNCIROC(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

ibmIROCadmin = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 1))
ibmIROCsystem = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 2))
ibmIROChardware = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 3))
ibmIROCrouting = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 4))
ibmIROCswitching = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 5))
ibmIROCtraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 6))
ibmIROCconfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 7))
ibmIROCadminproducts = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 1, 1))
ibmIROCadminOID = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 1, 2))
ibmIROCadminDebug = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 1, 3))
ibmIROCadminSnmp = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 1, 4))
ibmIROCsystemInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 2, 1))
ibmIROCcfgInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 2, 2))
ibmIROCdumpInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 2, 4))
ibmIROChardwareInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 3, 1))
ibmIROCroutingppp = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2))
ibmIROCroutingdlsw = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 3))
ibmIROCroutingfr = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4))
ibmIROCroutingRlan = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 5))
ibmIROCroutingDialOut = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 6))
ibmIROCroutingl2tp = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7))
ibmCacheServer = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 8))
ibmIROCroutingIpSec = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9))
ibmIROCswhw = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 10))
ibmWanRestoralRerouteMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 11))
ibmBANMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 12))
ibmIROCrmon = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 13))
ibmIROCescon = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 14))
ibmIROCVPNpolicy = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15))
ibmIROCroutingvoice = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 16))
ibmIROCroutinginterface = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 17))
ibmIROCroutingtn3270e = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 18))
ibmIROCroutingtcpip = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 20))
ibmIROCconfigAuth = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 7, 2))
ibmIROCconfigWrite = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 7, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noaction", 1), ("write", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmIROCconfigWrite.setStatus('mandatory')
if mibBuilder.loadTexts: ibmIROCconfigWrite.setDescription('This object is a trigger to cause the current config image in memory to be written to disk or flash. A SET of this object to write(2) performs the same action as the T6 write command. A GET of this object with always return a value of noaction(1).')
ibmIROCAgentDebug = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 1, 3, 1))
agentMemUse = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 1, 3, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentMemUse.setStatus('mandatory')
if mibBuilder.loadTexts: agentMemUse.setDescription("This object indicates the current amount (in bytes) of dynamic memory allocated and in use by the SNMP agent. It is primarily in place to watch for any potential 'memory leaks', whereby, memory is allocated but never freed. This condition is indicated by an ever increasing value for this gauge.")
ibmIROCSnmpAuthFail = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 1, 4, 1))
authTrapSourceIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 1, 4, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authTrapSourceIPAddr.setStatus('mandatory')
if mibBuilder.loadTexts: authTrapSourceIPAddr.setDescription('This object indicates the IP address of sender of the MIB request that fails authentication. An authentication failure trap is generated when the SNMP agent recives a MIB request does not have the proper community name.')
ibmSysDumpTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 119, 2, 4, 1), )
if mibBuilder.loadTexts: ibmSysDumpTable.setStatus('mandatory')
if mibBuilder.loadTexts: ibmSysDumpTable.setDescription('Table to provide system dump identification information.')
ibmSysDumpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 119, 2, 4, 1, 1), ).setIndexNames((0, "IBMIROC-MIB", "ibmSysDumpIndex"))
if mibBuilder.loadTexts: ibmSysDumpEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ibmSysDumpEntry.setDescription('The dump identification information for a single system dump.')
ibmSysDumpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 2, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmSysDumpIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ibmSysDumpIndex.setDescription('A unique identifier for a system dump entry.')
ibmSysDumpFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 2, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmSysDumpFileName.setStatus('mandatory')
if mibBuilder.loadTexts: ibmSysDumpFileName.setDescription('The system dump file name.')
ibmSysDumpFileDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 2, 4, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmSysDumpFileDate.setStatus('mandatory')
if mibBuilder.loadTexts: ibmSysDumpFileDate.setDescription('The creation date of the dump file.')
ibmSysDumpBuild = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 2, 4, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmSysDumpBuild.setStatus('mandatory')
if mibBuilder.loadTexts: ibmSysDumpBuild.setDescription('The level of software running on the router when this dump occurred.')
ibmSysDumpBuilder = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 2, 4, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmSysDumpBuilder.setStatus('mandatory')
if mibBuilder.loadTexts: ibmSysDumpBuilder.setDescription('The entity responsible for building the software running on the router.')
ibmSysDumpBuildName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 2, 4, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmSysDumpBuildName.setStatus('mandatory')
if mibBuilder.loadTexts: ibmSysDumpBuildName.setDescription('The internal name of the software running on the router.')
ibmSysDumpRetainName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 2, 4, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmSysDumpRetainName.setStatus('mandatory')
if mibBuilder.loadTexts: ibmSysDumpRetainName.setDescription('The external name of the software running on the router.')
ibmSysDumpProductNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 2, 4, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmSysDumpProductNumber.setStatus('mandatory')
if mibBuilder.loadTexts: ibmSysDumpProductNumber.setDescription('The program product number of the software running on the router.')
ibmSysDumpBuildDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 2, 4, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmSysDumpBuildDate.setStatus('mandatory')
if mibBuilder.loadTexts: ibmSysDumpBuildDate.setDescription('The creation date of the software running on the router.')
ibmSysDumpFatalMsg1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 2, 4, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmSysDumpFatalMsg1.setStatus('mandatory')
if mibBuilder.loadTexts: ibmSysDumpFatalMsg1.setDescription('The first error/fatal message associated with the dump. Depending on the nature of the failure, this object may or may not contain any information.')
ibmSysDumpFatalMsg2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 2, 4, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmSysDumpFatalMsg2.setStatus('mandatory')
if mibBuilder.loadTexts: ibmSysDumpFatalMsg2.setDescription('The first error/fatal message associated with the dump. Depending on the nature of the failure, this object may or may not contain any information.')
ibmSysDumpFatalMsg3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 2, 4, 1, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmSysDumpFatalMsg3.setStatus('mandatory')
if mibBuilder.loadTexts: ibmSysDumpFatalMsg3.setDescription('The first error/fatal message associated with the dump. Depending on the nature of the failure, this object may or may not contain any information.')
ibmSysDumpFatalMsg4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 2, 4, 1, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmSysDumpFatalMsg4.setStatus('mandatory')
if mibBuilder.loadTexts: ibmSysDumpFatalMsg4.setDescription('The first error/fatal message associated with the dump. Depending on the nature of the failure, this object may or may not contain any information.')
ibmSysDumpFatalMsg5 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 2, 4, 1, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmSysDumpFatalMsg5.setStatus('mandatory')
if mibBuilder.loadTexts: ibmSysDumpFatalMsg5.setDescription('The first error/fatal message associated with the dump. Depending on the nature of the failure, this object may or may not contain any information.')
ibmSysDumpRemoteIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 2, 4, 1, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmSysDumpRemoteIPAddr.setStatus('mandatory')
if mibBuilder.loadTexts: ibmSysDumpRemoteIPAddr.setDescription('For platforms that may operate without a fixed disk, if this string is non null, it represents the remote host IP address where the dump was transferred.')
ibmSysDumpRemotePath = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 2, 4, 1, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmSysDumpRemotePath.setStatus('mandatory')
if mibBuilder.loadTexts: ibmSysDumpRemotePath.setDescription('For platforms that may operate without a fixed disk, if this string is non null, it represents the remote host file path where the dump was transferred.')
platformType = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42))).clone(namedValues=NamedValues(("plat-other", 1), ("plat-mss-8210", 2), ("plat-mss-blade", 3), ("plat-mss-client", 4), ("plat-2216-400", 5), ("plat-2210-1s4", 6), ("plat-2210-1s8", 7), ("plat-2210-1u4", 8), ("plat-2210-1u8", 9), ("plat-2210-24e", 10), ("plat-2210-24m", 11), ("plat-2210-24t", 12), ("plat-2210-14t", 13), ("plat-2210-125", 14), ("plat-2210-127", 15), ("plat-2210-121", 16), ("plat-2210-12t", 17), ("plat-2210-126", 18), ("plat-2210-128", 19), ("plat-2210-122", 20), ("plat-2210-12e", 21), ("plat-2220-200", 22), ("plat-3746-MAE", 23), ("plat-mss-domain-client", 24), ("plat-mss-8210V2", 25), ("plat-mss-bladeV2", 26), ("plat-netu-xx1", 27), ("plat-2212-10F", 28), ("plat-2212-10H", 29), ("plat-2212-40F", 30), ("plat-2212-40H", 31), ("plat-8371", 32), ("plat-8375", 33), ("plat-2212-15F", 34), ("plat-2212-15H", 35), ("plat-2212-45F", 36), ("plat-2212-45H", 37), ("plat-reserved1", 38), ("plat-reserved2", 39), ("plat-8275-RR", 40), ("plat-8371-8260B", 41), ("plat-reserved", 42)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: platformType.setStatus('mandatory')
if mibBuilder.loadTexts: platformType.setDescription('The platform type containing this SNMP agent.')
platformDRAMSize = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: platformDRAMSize.setStatus('mandatory')
if mibBuilder.loadTexts: platformDRAMSize.setDescription('The amount of dynamic RAM (Megabytes) installed on this platform. DRAM is used to contain the routing software and associated data areas.')
platformFLASHSize = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: platformFLASHSize.setStatus('mandatory')
if mibBuilder.loadTexts: platformFLASHSize.setDescription("The amount of flash memory (Megabytes) installed on the 2210. Flash is used to hold configuration and software code loads, one pair of which can be loaded and made active on the platform. This object applies only to 2210, since other platforms' may or may not have FLASH, and if so, the size is not of interest. For these platforms, this object will take on a value of 0.")
platformNVRAMSize = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: platformNVRAMSize.setStatus('mandatory')
if mibBuilder.loadTexts: platformNVRAMSize.setDescription("The amount of non-volatile memory (Kilobytes) installed on the 2210. NVRAM, sometimes referred to as SRAM, is used to hold the active configuration records. This object applies only to 2210, since other platforms' may or may not have NVRAM, and if so, the size is not of interest. For these platforms, this object will take on a value of 0.")
platformFeatureSlot = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("none", 1), ("isdn-BRI-ST", 2), ("isdn-PRI-E1-120", 3), ("isdn-PRI-E1-75", 4), ("isdn-PRI-T1J1", 5), ("atm-155", 6), ("atm-25", 7), ("serial-wan-4port", 8), ("serial-wan-8port", 9), ("modem-4port", 10), ("modem-8port", 11), ("isdn-BRI-4port-ST", 12), ("isdn-BRI-4port-U", 13), ("isdn-voice-ST-FXO", 14), ("isdn-voice-ST-FXS", 15), ("isdn-voice-ST-EM", 16), ("isdn-voice-U-FXO", 17), ("isdn-voice-U-FXS", 18), ("isdn-voice-U-EM", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: platformFeatureSlot.setStatus('mandatory')
if mibBuilder.loadTexts: platformFeatureSlot.setDescription('The type of adapter installed in the feature slot of the 2210 platform. Note that not all adapter types listed above are currently supported, nor does this imply they will be supported in the future.')
pppProtocolTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 1), )
if mibBuilder.loadTexts: pppProtocolTable.setStatus('mandatory')
if mibBuilder.loadTexts: pppProtocolTable.setDescription('A table of protocol and control protocol statistics for protocols supported by PPP.')
pppProtocolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 1, 1), ).setIndexNames((0, "IBMIROC-MIB", "pppProtocolIfIndex"), (0, "IBMIROC-MIB", "pppProtocolId"))
if mibBuilder.loadTexts: pppProtocolEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pppProtocolEntry.setDescription('An entry of protocol and control protocol information for a specific protocol supported by PPP.')
pppProtocolIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppProtocolIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pppProtocolIfIndex.setDescription('A unique identifier for an interface running PPP. This object is the same as the MIB-II ifIndex object.')
pppProtocolId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("ip", 1), ("decnet", 2), ("ipx", 3), ("bridge", 4), ("appletalk", 5), ("osi", 6), ("appnhpr", 7), ("appnisr", 8), ("vines", 9), ("compression", 10), ("netbios", 11), ("netbios-forw", 12), ("bandwidth-allocation", 13), ("encryption", 14), ("ipv6", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppProtocolId.setStatus('mandatory')
if mibBuilder.loadTexts: pppProtocolId.setDescription('A unique identifier of a protocol supported by PPP.')
pppProtocolRegistered = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppProtocolRegistered.setStatus('mandatory')
if mibBuilder.loadTexts: pppProtocolRegistered.setDescription('Indicates whether this protocol is registered with PPP.')
pppProtocolState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("closed", 1), ("listen", 2), ("requestSent", 3), ("ackReceived", 4), ("ackSent", 5), ("opened", 6), ("termSent", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppProtocolState.setStatus('mandatory')
if mibBuilder.loadTexts: pppProtocolState.setDescription('The value identifies the present state of the protocol.')
pppProtocolPreviousState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("closed", 1), ("listen", 2), ("requestSent", 3), ("ackReceived", 4), ("ackSent", 5), ("opened", 6), ("termSent", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppProtocolPreviousState.setStatus('mandatory')
if mibBuilder.loadTexts: pppProtocolPreviousState.setDescription('The state of the protocol prior to the state given by pppProtocolState. These states are the same as those described for the object pppProtocolState. ')
pppProtocolLastTimeChange = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 1, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppProtocolLastTimeChange.setStatus('mandatory')
if mibBuilder.loadTexts: pppProtocolLastTimeChange.setDescription('The value of sysUpTime when the last protocol state change occurred.')
pppProtocolCtlInRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppProtocolCtlInRejects.setStatus('mandatory')
if mibBuilder.loadTexts: pppProtocolCtlInRejects.setDescription('Total number of a control protocol protocol-reject packets received over the PPP interface.')
pppProtocolCtlInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppProtocolCtlInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: pppProtocolCtlInOctets.setDescription('Total number of control protocol octets received over the PPP interface.')
pppProtocolCtlInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppProtocolCtlInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: pppProtocolCtlInPkts.setDescription('Total number of control protocol packets received over the PPP interface.')
pppProtocolCtlOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppProtocolCtlOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: pppProtocolCtlOutOctets.setDescription('Total number of control protocol octets transmitted over the PPP interface.')
pppProtocolCtlOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppProtocolCtlOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: pppProtocolCtlOutPkts.setDescription('Total number of a control protocol packets transmitted over the PPP interface.')
pppProtocolDataInRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppProtocolDataInRejects.setStatus('mandatory')
if mibBuilder.loadTexts: pppProtocolDataInRejects.setDescription('Total number of protocol reject packets received over the PPP interface.')
pppProtocolDataInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppProtocolDataInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: pppProtocolDataInOctets.setDescription('Total number of protocol octets received over the PPP interface.')
pppProtocolDataInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppProtocolDataInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: pppProtocolDataInPkts.setDescription('Total number of protocol packets received over the PPP interface.')
pppProtocolDataOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppProtocolDataOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: pppProtocolDataOutOctets.setDescription('Total number of protocol octets transmitted over the PPP interface.')
pppProtocolDataOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppProtocolDataOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: pppProtocolDataOutPkts.setDescription('Total number of protocol packets transmitted over the PPP interface.')
pppLinkErrTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 2), )
if mibBuilder.loadTexts: pppLinkErrTable.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkErrTable.setDescription('A table of link error statistics.')
pppLinkErrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 2, 1), ).setIndexNames((0, "IBMIROC-MIB", "pppLinkErrIfIndex"))
if mibBuilder.loadTexts: pppLinkErrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkErrEntry.setDescription('An entry of link error information for a specific interface.')
pppLinkErrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkErrIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkErrIfIndex.setDescription('A unique identifier for an interface running PPP. This object is the same as the MIB-II ifIndex object.')
pppLinkErrBadAddrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkErrBadAddrs.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkErrBadAddrs.setDescription('Total number of packets received with a bad Address field.')
pppLinkErrLastBadAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkErrLastBadAddr.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkErrLastBadAddr.setDescription('The last bad Address field received.')
pppLinkErrBadCtrls = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkErrBadCtrls.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkErrBadCtrls.setDescription('Total number of packets received with a bad Control field.')
pppLinkErrLastBadCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkErrLastBadCtrl.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkErrLastBadCtrl.setDescription('The last bad Control field received.')
pppLinkErrUnkProtos = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkErrUnkProtos.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkErrUnkProtos.setDescription('Total number of packets received with a Protocol identifier not registered with PPP.')
pppLinkErrLastUnkProto = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 2, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkErrLastUnkProto.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkErrLastUnkProto.setDescription('The last unknown Protocol identifier received.')
pppLinkErrInvProtos = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkErrInvProtos.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkErrInvProtos.setDescription('Total number of packets received with a Protocol identifier that is not valid.')
pppLinkErrLastInvProto = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 2, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkErrLastInvProto.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkErrLastInvProto.setDescription('The last invalid Protocol identifier received.')
pppLinkErrConfigTOs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkErrConfigTOs.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkErrConfigTOs.setDescription('Total number of timeouts that occurred on this link when sending a config request to open the PPP link.')
pppLinkErrTermTOs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkErrTermTOs.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkErrTermTOs.setDescription('Total number of timeouts that occurred on this link when sending a terminate request to close the PPP link.')
pppLCProtoTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 3), )
if mibBuilder.loadTexts: pppLCProtoTable.setStatus('mandatory')
if mibBuilder.loadTexts: pppLCProtoTable.setDescription('A table of link control protocol statistics.')
pppLCProtoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 3, 1), ).setIndexNames((0, "IBMIROC-MIB", "pppLCProtoIfIndex"))
if mibBuilder.loadTexts: pppLCProtoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pppLCProtoEntry.setDescription('An entry of link control protocol information for a specific interface.')
pppLCProtoIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLCProtoIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pppLCProtoIfIndex.setDescription('A unique identifier for an interface running PPP. This object is the same as the MIB-II ifIndex object.')
pppLCProtoState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("closed", 1), ("listen", 2), ("requestSent", 3), ("ackReceived", 4), ("ackSent", 5), ("opened", 6), ("termSent", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLCProtoState.setStatus('mandatory')
if mibBuilder.loadTexts: pppLCProtoState.setDescription('The value identifies the present state of the PPP link. The closed(1) state indicates that the link is down and there is no attempt being made to open it and all connection requests from peers are rejected. In listen(2) state, the link is down and there is no attempt being made to open it, however, all the connection requests from peers are accepted. The state request-sent(3) indicates that an active attempt is being made to open the link. In this state, a Configure-request packet has been sent and no Configure-Ack has yet been received. In the state ack-received(4), a Configure-request packet has been sent and Configure-Ack packet has been received. The state ack-sent(5) indicates that a Congigure-request and Configure-Ack packets have been sent and Configure-Ack has not yet been received. The opened(6) state implies that a connection has been made and data may be sent. The state term-sent(7) indicates that an attempt is being made to close the connection and that a Terminate-request packet has been sent and a Terminate-Ack packet has not yet been received. ')
pppLCProtoPreviousState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("closed", 1), ("listen", 2), ("requestSent", 3), ("ackReceived", 4), ("ackSent", 5), ("opened", 6), ("termSent", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLCProtoPreviousState.setStatus('mandatory')
if mibBuilder.loadTexts: pppLCProtoPreviousState.setDescription('The state of the PPP link prior to the state given by pppLCProtoState. These states are the same as those described for the object pppLCProtoState. ')
pppLCProtoLastTimeChange = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 3, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLCProtoLastTimeChange.setStatus('mandatory')
if mibBuilder.loadTexts: pppLCProtoLastTimeChange.setDescription('The value of sysUpTime when the last PPP link state change occurred.')
pppLCProtoOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLCProtoOutPackets.setStatus('mandatory')
if mibBuilder.loadTexts: pppLCProtoOutPackets.setDescription('Total number of LCP packets transmitted over the PPP interface.')
pppLCProtoOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLCProtoOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: pppLCProtoOutOctets.setDescription('Total number of LCP octets transmitted over the PPP interface.')
pppLCProtoOutCRs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLCProtoOutCRs.setStatus('mandatory')
if mibBuilder.loadTexts: pppLCProtoOutCRs.setDescription('Total number of LCP Config-requests transmitted over the PPP interface.')
pppLCProtoOutCAs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLCProtoOutCAs.setStatus('mandatory')
if mibBuilder.loadTexts: pppLCProtoOutCAs.setDescription('Total number of LCP Config-acks transmitted over the PPP interface.')
pppLCProtoOutCNs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLCProtoOutCNs.setStatus('mandatory')
if mibBuilder.loadTexts: pppLCProtoOutCNs.setDescription('Total number of LCP Config-nacks transmitted over the PPP interface.')
pppLCProtoOutCRejs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLCProtoOutCRejs.setStatus('mandatory')
if mibBuilder.loadTexts: pppLCProtoOutCRejs.setDescription('Total number of LCP Config-rejects transmitted over the PPP interface.')
pppLCProtoOutTRs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLCProtoOutTRs.setStatus('mandatory')
if mibBuilder.loadTexts: pppLCProtoOutTRs.setDescription('Total number of LCP Terminate-requests transmitted over the PPP interface.')
pppLCProtoOutTAs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLCProtoOutTAs.setStatus('mandatory')
if mibBuilder.loadTexts: pppLCProtoOutTAs.setDescription('Total number of LCP Terminate-acks transmitted over the PPP interface.')
pppLCProtoOutCodeRejs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLCProtoOutCodeRejs.setStatus('mandatory')
if mibBuilder.loadTexts: pppLCProtoOutCodeRejs.setDescription('Total number of LCP Code-rejects transmitted over the PPP interface.')
pppLCProtoOutEchoReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLCProtoOutEchoReqs.setStatus('mandatory')
if mibBuilder.loadTexts: pppLCProtoOutEchoReqs.setDescription('Total number of LCP Echo-requests transmitted over the PPP interface.')
pppLCProtoOutEchoReps = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLCProtoOutEchoReps.setStatus('mandatory')
if mibBuilder.loadTexts: pppLCProtoOutEchoReps.setDescription('Total number of LCP Echo-replies transmitted over the PPP interface.')
pppLCProtoOutDiscReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLCProtoOutDiscReqs.setStatus('mandatory')
if mibBuilder.loadTexts: pppLCProtoOutDiscReqs.setDescription('Total number of LCP Discard-requests transmitted over the PPP interface.')
pppLCProtoOutResetReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLCProtoOutResetReqs.setStatus('mandatory')
if mibBuilder.loadTexts: pppLCProtoOutResetReqs.setDescription('Total number of LCP Reset-requests transmitted over the PPP interface.')
pppLCProtoOutResetAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLCProtoOutResetAcks.setStatus('mandatory')
if mibBuilder.loadTexts: pppLCProtoOutResetAcks.setDescription('Total number of LCP Reset-Acks transmitted over the PPP interface.')
pppLCProtoOutIdents = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLCProtoOutIdents.setStatus('mandatory')
if mibBuilder.loadTexts: pppLCProtoOutIdents.setDescription('Total number of LCP Identification packets transmitted over the PPP interface.')
pppLCProtoOutTimeRemains = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLCProtoOutTimeRemains.setStatus('mandatory')
if mibBuilder.loadTexts: pppLCProtoOutTimeRemains.setDescription('Total number of LCP Time-Remaining packets transmitted over the PPP interface.')
pppLCProtoInRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 3, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLCProtoInRejects.setStatus('mandatory')
if mibBuilder.loadTexts: pppLCProtoInRejects.setDescription('Total number of a LCP protocol-reject packets received over the PPP interface.')
pppLCProtoInPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 3, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLCProtoInPackets.setStatus('mandatory')
if mibBuilder.loadTexts: pppLCProtoInPackets.setDescription('Total number of LCP packets received over the PPP interface.')
pppLCProtoInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 3, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLCProtoInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: pppLCProtoInOctets.setDescription('Total number of LCP octets received over the PPP interface.')
pppLCProtoInCRs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 3, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLCProtoInCRs.setStatus('mandatory')
if mibBuilder.loadTexts: pppLCProtoInCRs.setDescription('Total number of LCP Config-requests received over the PPP interface.')
pppLCProtoInCAs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 3, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLCProtoInCAs.setStatus('mandatory')
if mibBuilder.loadTexts: pppLCProtoInCAs.setDescription('Total number of LCP Config-acks received over the PPP interface.')
pppLCProtoInCNs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 3, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLCProtoInCNs.setStatus('mandatory')
if mibBuilder.loadTexts: pppLCProtoInCNs.setDescription('Total number of LCP Config-nacks received over the PPP interface.')
pppLCProtoInCRejs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 3, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLCProtoInCRejs.setStatus('mandatory')
if mibBuilder.loadTexts: pppLCProtoInCRejs.setDescription('Total number of LCP Config-rejects received over the PPP interface.')
pppLCProtoInTRs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 3, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLCProtoInTRs.setStatus('mandatory')
if mibBuilder.loadTexts: pppLCProtoInTRs.setDescription('Total number of LCP Terminate-requests received over the PPP interface.')
pppLCProtoInTAs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 3, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLCProtoInTAs.setStatus('mandatory')
if mibBuilder.loadTexts: pppLCProtoInTAs.setDescription('Total number of LCP Terminate-acks received over the PPP interface.')
pppLCProtoInCodeRejs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 3, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLCProtoInCodeRejs.setStatus('mandatory')
if mibBuilder.loadTexts: pppLCProtoInCodeRejs.setDescription('Total number of LCP Code-rejects received over the PPP interface.')
pppLCProtoInEchoReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 3, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLCProtoInEchoReqs.setStatus('mandatory')
if mibBuilder.loadTexts: pppLCProtoInEchoReqs.setDescription('Total number of LCP Echo-Requests received over the PPP interface.')
pppLCProtoInEchoReps = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 3, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLCProtoInEchoReps.setStatus('mandatory')
if mibBuilder.loadTexts: pppLCProtoInEchoReps.setDescription('Total number of LCP Echo-replies received over the PPP interface.')
pppLCProtoInDiscReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 3, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLCProtoInDiscReqs.setStatus('mandatory')
if mibBuilder.loadTexts: pppLCProtoInDiscReqs.setDescription('Total number of LCP Discard-requests received over the PPP interface.')
pppLCProtoInResetReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 3, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLCProtoInResetReqs.setStatus('mandatory')
if mibBuilder.loadTexts: pppLCProtoInResetReqs.setDescription('Total number of LCP Reset-requests received over the PPP interface.')
pppLCProtoInResetAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 3, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLCProtoInResetAcks.setStatus('mandatory')
if mibBuilder.loadTexts: pppLCProtoInResetAcks.setDescription('Total number of LCP Reset-Acks received over the PPP interface.')
pppLCProtoInIdents = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 3, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLCProtoInIdents.setStatus('mandatory')
if mibBuilder.loadTexts: pppLCProtoInIdents.setDescription('Total number of LCP Identification packets received over the PPP interface.')
pppLCProtoInTimeRemains = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 3, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLCProtoInTimeRemains.setStatus('mandatory')
if mibBuilder.loadTexts: pppLCProtoInTimeRemains.setDescription('Total number of LCP Time-Remaining packets received over the PPP interface.')
pppPAPTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 4), )
if mibBuilder.loadTexts: pppPAPTable.setStatus('mandatory')
if mibBuilder.loadTexts: pppPAPTable.setDescription('A table of PAP statistics.')
pppPAPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 4, 1), ).setIndexNames((0, "IBMIROC-MIB", "pppPAPIfIndex"))
if mibBuilder.loadTexts: pppPAPEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pppPAPEntry.setDescription('An entry of PAP information.')
pppPAPIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppPAPIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pppPAPIfIndex.setDescription('A unique identifier for a PPP interface running PAP. This object is the same as the MIB-II ifIndex object.')
pppPAPInPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppPAPInPackets.setStatus('mandatory')
if mibBuilder.loadTexts: pppPAPInPackets.setDescription('Total number of PAP packets received over the PPP interface.')
pppPAPInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppPAPInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: pppPAPInOctets.setDescription('Total number of PAP octets received over the PPP interface.')
pppPAPInRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppPAPInRequests.setStatus('mandatory')
if mibBuilder.loadTexts: pppPAPInRequests.setDescription('Total number of PAP requests received over the PPP interface.')
pppPAPInAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppPAPInAcks.setStatus('mandatory')
if mibBuilder.loadTexts: pppPAPInAcks.setDescription('Total number of PAP acknowledgements received over the PPP interface.')
pppPAPInNacks = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppPAPInNacks.setStatus('mandatory')
if mibBuilder.loadTexts: pppPAPInNacks.setDescription('Total number of PAP non-acknowledgements received over the PPP interface.')
pppPAPOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppPAPOutPackets.setStatus('mandatory')
if mibBuilder.loadTexts: pppPAPOutPackets.setDescription('Total number of PAP packets sent over the PPP interface.')
pppPAPOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppPAPOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: pppPAPOutOctets.setDescription('Total number of PAP octets sent over the PPP interface.')
pppPAPOutRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppPAPOutRequests.setStatus('mandatory')
if mibBuilder.loadTexts: pppPAPOutRequests.setDescription('Total number of PAP requests sent over the PPP interface.')
pppPAPOutAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppPAPOutAcks.setStatus('mandatory')
if mibBuilder.loadTexts: pppPAPOutAcks.setDescription('Total number of PAP acknowledgements sent over the PPP interface.')
pppPAPOutNacks = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppPAPOutNacks.setStatus('mandatory')
if mibBuilder.loadTexts: pppPAPOutNacks.setDescription('Total number of PAP non-acknowledgements sent over the PPP interface.')
pppCHAPTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 5), )
if mibBuilder.loadTexts: pppCHAPTable.setStatus('mandatory')
if mibBuilder.loadTexts: pppCHAPTable.setDescription('A table of CHAP statistics.')
pppCHAPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 5, 1), ).setIndexNames((0, "IBMIROC-MIB", "pppCHAPIfIndex"))
if mibBuilder.loadTexts: pppCHAPEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pppCHAPEntry.setDescription('An entry of CHAP information.')
pppCHAPIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppCHAPIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pppCHAPIfIndex.setDescription('A unique identifier for a PPP interface running CHAP. This object is the same as the MIB-II ifIndex object.')
pppCHAPInPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 5, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppCHAPInPackets.setStatus('mandatory')
if mibBuilder.loadTexts: pppCHAPInPackets.setDescription('Total number of CHAP packets received over the PPP interface.')
pppCHAPInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppCHAPInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: pppCHAPInOctets.setDescription('Total number of CHAP octets received over the PPP interface.')
pppCHAPInChallenges = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppCHAPInChallenges.setStatus('mandatory')
if mibBuilder.loadTexts: pppCHAPInChallenges.setDescription('Total number of CHAP challenges received over the PPP interface.')
pppCHAPInResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppCHAPInResponses.setStatus('mandatory')
if mibBuilder.loadTexts: pppCHAPInResponses.setDescription('Total number of CHAP responses received over the PPP interface.')
pppCHAPInSuccesses = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppCHAPInSuccesses.setStatus('mandatory')
if mibBuilder.loadTexts: pppCHAPInSuccesses.setDescription('Total number of CHAP successes received over the PPP interface.')
pppCHAPInFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppCHAPInFailures.setStatus('mandatory')
if mibBuilder.loadTexts: pppCHAPInFailures.setDescription('Total number of CHAP failures received over the PPP interface.')
pppCHAPOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 5, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppCHAPOutPackets.setStatus('mandatory')
if mibBuilder.loadTexts: pppCHAPOutPackets.setDescription('Total number of CHAP packets sent over the PPP interface.')
pppCHAPOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 5, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppCHAPOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: pppCHAPOutOctets.setDescription('Total number of CHAP octets sent over the PPP interface.')
pppCHAPOutChallenges = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 5, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppCHAPOutChallenges.setStatus('mandatory')
if mibBuilder.loadTexts: pppCHAPOutChallenges.setDescription('Total number of CHAP challenges sent over the PPP interface.')
pppCHAPOutResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 5, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppCHAPOutResponses.setStatus('mandatory')
if mibBuilder.loadTexts: pppCHAPOutResponses.setDescription('Total number of CHAP responses sent over the PPP interface.')
pppCHAPOutSuccesses = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 5, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppCHAPOutSuccesses.setStatus('mandatory')
if mibBuilder.loadTexts: pppCHAPOutSuccesses.setDescription('Total number of CHAP successes sent over the PPP interface.')
pppCHAPOutFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 5, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppCHAPOutFailures.setStatus('mandatory')
if mibBuilder.loadTexts: pppCHAPOutFailures.setDescription('Total number of CHAP failures sent over the PPP interface.')
pppSPAPTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 6), )
if mibBuilder.loadTexts: pppSPAPTable.setStatus('mandatory')
if mibBuilder.loadTexts: pppSPAPTable.setDescription('A table of SPAP statistics.')
pppSPAPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 6, 1), ).setIndexNames((0, "IBMIROC-MIB", "pppSPAPIfIndex"))
if mibBuilder.loadTexts: pppSPAPEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pppSPAPEntry.setDescription('An entry of SPAP information.')
pppSPAPIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSPAPIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pppSPAPIfIndex.setDescription('A unique identifier for a PPP interface running SPAP. This object is the same as the MIB-II ifIndex object.')
pppSPAPInPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 6, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSPAPInPackets.setStatus('mandatory')
if mibBuilder.loadTexts: pppSPAPInPackets.setDescription('Total number of SPAP packets received over the PPP interface.')
pppSPAPInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSPAPInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: pppSPAPInOctets.setDescription('Total number of SPAP octets received over the PPP interface.')
pppSPAPInRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSPAPInRequests.setStatus('mandatory')
if mibBuilder.loadTexts: pppSPAPInRequests.setDescription('Total number of SPAP responses received over the PPP interface.')
pppSPAPInAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSPAPInAcks.setStatus('mandatory')
if mibBuilder.loadTexts: pppSPAPInAcks.setDescription('Total number of SPAP acknowledgements received over the PPP interface.')
pppSPAPInNacks = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSPAPInNacks.setStatus('mandatory')
if mibBuilder.loadTexts: pppSPAPInNacks.setDescription('Total number of SPAP non-acknowledgements received over the PPP interface.')
pppSPAPInDialbacks = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSPAPInDialbacks.setStatus('mandatory')
if mibBuilder.loadTexts: pppSPAPInDialbacks.setDescription('Total number of SPAP dialbacks received over the PPP interface.')
pppSPAPInPleaseAuthenticates = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSPAPInPleaseAuthenticates.setStatus('mandatory')
if mibBuilder.loadTexts: pppSPAPInPleaseAuthenticates.setDescription('Total number of SPAP authenticate requests received over the PPP interface.')
pppSPAPInChangePasswords = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSPAPInChangePasswords.setStatus('mandatory')
if mibBuilder.loadTexts: pppSPAPInChangePasswords.setDescription('Total number of SPAP password changes received over the PPP interface.')
pppSPAPInAlerts = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 6, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSPAPInAlerts.setStatus('mandatory')
if mibBuilder.loadTexts: pppSPAPInAlerts.setDescription('Total number of SPAP alerts received over the PPP interface.')
pppSPAPInAlertAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 6, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSPAPInAlertAcks.setStatus('mandatory')
if mibBuilder.loadTexts: pppSPAPInAlertAcks.setDescription('Total number of SPAP alert acknowledgements received over the PPP interface.')
pppSPAPOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 6, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSPAPOutPackets.setStatus('mandatory')
if mibBuilder.loadTexts: pppSPAPOutPackets.setDescription('Total number of SPAP packets sent over the PPP interface.')
pppSPAPOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 6, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSPAPOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: pppSPAPOutOctets.setDescription('Total number of SPAP octets sent over the PPP interface.')
pppSPAPOutRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 6, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSPAPOutRequests.setStatus('mandatory')
if mibBuilder.loadTexts: pppSPAPOutRequests.setDescription('Total number of SPAP responses sent over the PPP interface.')
pppSPAPOutAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 6, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSPAPOutAcks.setStatus('mandatory')
if mibBuilder.loadTexts: pppSPAPOutAcks.setDescription('Total number of SPAP acknowledgements sent over the PPP interface.')
pppSPAPOutNacks = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 6, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSPAPOutNacks.setStatus('mandatory')
if mibBuilder.loadTexts: pppSPAPOutNacks.setDescription('Total number of SPAP non-acknowledgements sent over the PPP interface.')
pppSPAPOutDialbacks = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 6, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSPAPOutDialbacks.setStatus('mandatory')
if mibBuilder.loadTexts: pppSPAPOutDialbacks.setDescription('Total number of SPAP dialbacks sent over the PPP interface.')
pppSPAPOutPleaseAuthenticates = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 6, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSPAPOutPleaseAuthenticates.setStatus('mandatory')
if mibBuilder.loadTexts: pppSPAPOutPleaseAuthenticates.setDescription('Total number of SPAP authenticate requests sent over the PPP interface.')
pppSPAPOutChangePasswords = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 6, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSPAPOutChangePasswords.setStatus('mandatory')
if mibBuilder.loadTexts: pppSPAPOutChangePasswords.setDescription('Total number of SPAP password changes sent over the PPP interface.')
pppSPAPOutAlerts = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 6, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSPAPOutAlerts.setStatus('mandatory')
if mibBuilder.loadTexts: pppSPAPOutAlerts.setDescription('Total number of SPAP alerts sent over the PPP interface.')
pppSPAPOutAlertAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 6, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSPAPOutAlertAcks.setStatus('mandatory')
if mibBuilder.loadTexts: pppSPAPOutAlertAcks.setDescription('Total number of SPAP alert acknowledgements sent over the PPP interface.')
pppBAPTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 7), )
if mibBuilder.loadTexts: pppBAPTable.setStatus('mandatory')
if mibBuilder.loadTexts: pppBAPTable.setDescription('A table of BAP protocol statistics.')
pppBAPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 7, 1), ).setIndexNames((0, "IBMIROC-MIB", "pppBAPIfIndex"))
if mibBuilder.loadTexts: pppBAPEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pppBAPEntry.setDescription('An entry of BAP information.')
pppBAPIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppBAPIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pppBAPIfIndex.setDescription('A unique identifier for a PPP interface running BAP. This object is the same as the MIB-II ifIndex object.')
pppBAPInCallReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 7, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppBAPInCallReqs.setStatus('mandatory')
if mibBuilder.loadTexts: pppBAPInCallReqs.setDescription('Total number of BAP incoming Call Request packets received over the PPP interface.')
pppBAPInCallAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 7, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppBAPInCallAcks.setStatus('mandatory')
if mibBuilder.loadTexts: pppBAPInCallAcks.setDescription('Total number of BAP incoming Call Acknowledgement packets received over the PPP interface.')
pppBAPInCallNaks = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 7, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppBAPInCallNaks.setStatus('mandatory')
if mibBuilder.loadTexts: pppBAPInCallNaks.setDescription('Total number of BAP incoming Call Nak packets received over the PPP interface.')
pppBAPInCallRejs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 7, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppBAPInCallRejs.setStatus('mandatory')
if mibBuilder.loadTexts: pppBAPInCallRejs.setDescription('Total number of BAP incoming Call Reject packets received over the PPP interface.')
pppBAPInCallBackReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 7, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppBAPInCallBackReqs.setStatus('mandatory')
if mibBuilder.loadTexts: pppBAPInCallBackReqs.setDescription('Total number of BAP incoming CallBack Request packets received over the PPP interface.')
pppBAPInCallBackAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 7, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppBAPInCallBackAcks.setStatus('mandatory')
if mibBuilder.loadTexts: pppBAPInCallBackAcks.setDescription('Total number of BAP incoming CallBack Acknowledgement packets received over the PPP interface.')
pppBAPInCallBackNaks = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 7, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppBAPInCallBackNaks.setStatus('mandatory')
if mibBuilder.loadTexts: pppBAPInCallBackNaks.setDescription('Total number of BAP incoming CallBack Nak packets received over the PPP interface.')
pppBAPInCallBackRejs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 7, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppBAPInCallBackRejs.setStatus('mandatory')
if mibBuilder.loadTexts: pppBAPInCallBackRejs.setDescription('Total number of BAP incoming CallBack Reject packets received over the PPP interface.')
pppBAPInDropReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 7, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppBAPInDropReqs.setStatus('mandatory')
if mibBuilder.loadTexts: pppBAPInDropReqs.setDescription('Total number of BAP incoming Drop Request packets received over the PPP interface.')
pppBAPInDropAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 7, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppBAPInDropAcks.setStatus('mandatory')
if mibBuilder.loadTexts: pppBAPInDropAcks.setDescription('Total number of BAP incoming Drop Acknowledgement packets received over the PPP interface.')
pppBAPInDropNaks = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 7, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppBAPInDropNaks.setStatus('mandatory')
if mibBuilder.loadTexts: pppBAPInDropNaks.setDescription('Total number of BAP incoming Drop Nak packets received over the PPP interface.')
pppBAPInDropRejs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 7, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppBAPInDropRejs.setStatus('mandatory')
if mibBuilder.loadTexts: pppBAPInDropRejs.setDescription('Total number of BAP incoming Drop Reject packets received over the PPP interface.')
pppBAPInStatSuccs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 7, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppBAPInStatSuccs.setStatus('mandatory')
if mibBuilder.loadTexts: pppBAPInStatSuccs.setDescription('Total number of BAP incoming Call Status Success packets received over the PPP interface.')
pppBAPInStatFails = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 7, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppBAPInStatFails.setStatus('mandatory')
if mibBuilder.loadTexts: pppBAPInStatFails.setDescription('Total number of BAP incoming Call Status Fail packets received over the PPP interface.')
pppBAPOutCallReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 7, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppBAPOutCallReqs.setStatus('mandatory')
if mibBuilder.loadTexts: pppBAPOutCallReqs.setDescription('Total number of BAP outgoing Call Request packets sent over the PPP interface.')
pppBAPOutCallAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 7, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppBAPOutCallAcks.setStatus('mandatory')
if mibBuilder.loadTexts: pppBAPOutCallAcks.setDescription('Total number of BAP outgoing Call Acknowledgement packets sent over the PPP interface.')
pppBAPOutCallNaks = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 7, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppBAPOutCallNaks.setStatus('mandatory')
if mibBuilder.loadTexts: pppBAPOutCallNaks.setDescription('Total number of BAP outgoing Call Nak packets sent over the PPP interface.')
pppBAPOutCallRejs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 7, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppBAPOutCallRejs.setStatus('mandatory')
if mibBuilder.loadTexts: pppBAPOutCallRejs.setDescription('Total number of BAP outgoing Call Reject packets sent over the PPP interface.')
pppBAPOutCallBackReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 7, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppBAPOutCallBackReqs.setStatus('mandatory')
if mibBuilder.loadTexts: pppBAPOutCallBackReqs.setDescription('Total number of BAP outgoing CallBack Request packets sent over the PPP interface.')
pppBAPOutCallBackAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 7, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppBAPOutCallBackAcks.setStatus('mandatory')
if mibBuilder.loadTexts: pppBAPOutCallBackAcks.setDescription('Total number of BAP outgoing CallBack Acknowledgement packets sent over the PPP interface.')
pppBAPOutCallBackNaks = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 7, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppBAPOutCallBackNaks.setStatus('mandatory')
if mibBuilder.loadTexts: pppBAPOutCallBackNaks.setDescription('Total number of BAP outgoing CallBack Nak packets sent over the PPP interface.')
pppBAPOutCallBackRejs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 7, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppBAPOutCallBackRejs.setStatus('mandatory')
if mibBuilder.loadTexts: pppBAPOutCallBackRejs.setDescription('Total number of BAP outgoing CallBack Reject packets sent over the PPP interface.')
pppBAPOutDropReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 7, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppBAPOutDropReqs.setStatus('mandatory')
if mibBuilder.loadTexts: pppBAPOutDropReqs.setDescription('Total number of BAP outgoing Drop Request packets sent over the PPP interface.')
pppBAPOutDropAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 7, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppBAPOutDropAcks.setStatus('mandatory')
if mibBuilder.loadTexts: pppBAPOutDropAcks.setDescription('Total number of BAP outgoing Drop Acknowledgement packets sent over the PPP interface.')
pppBAPOutDropNaks = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 7, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppBAPOutDropNaks.setStatus('mandatory')
if mibBuilder.loadTexts: pppBAPOutDropNaks.setDescription('Total number of BAP outgoing Drop Nak packets sent over the PPP interface.')
pppBAPOutDropRejs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 7, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppBAPOutDropRejs.setStatus('mandatory')
if mibBuilder.loadTexts: pppBAPOutDropRejs.setDescription('Total number of BAP outgoing Drop Reject packets sent over the PPP interface.')
pppBAPOutStatSuccs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 7, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppBAPOutStatSuccs.setStatus('mandatory')
if mibBuilder.loadTexts: pppBAPOutStatSuccs.setDescription('Total number of BAP outgoing Call Status Success packets sent over the PPP interface.')
pppBAPOutStatFails = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 7, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppBAPOutStatFails.setStatus('mandatory')
if mibBuilder.loadTexts: pppBAPOutStatFails.setDescription('Total number of BAP outgoing Call Status Fail packets sent over the PPP interface.')
pppCPTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 8), )
if mibBuilder.loadTexts: pppCPTable.setStatus('mandatory')
if mibBuilder.loadTexts: pppCPTable.setDescription('A table of compression protocol and control protocol statistics.')
pppCPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 8, 1), ).setIndexNames((0, "IBMIROC-MIB", "pppCPIfIndex"))
if mibBuilder.loadTexts: pppCPEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pppCPEntry.setDescription('An entry of CP and CCP information.')
pppCPIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppCPIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pppCPIfIndex.setDescription('A unique identifier for a PPP interface running CP. This object is the same as the MIB-II ifIndex object.')
pppCPInCompressedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 8, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppCPInCompressedOctets.setStatus('mandatory')
if mibBuilder.loadTexts: pppCPInCompressedOctets.setDescription('Total number of CP incoming compressed octets received over the PPP interface.')
pppCPInInCompressablePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 8, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppCPInInCompressablePkts.setStatus('mandatory')
if mibBuilder.loadTexts: pppCPInInCompressablePkts.setDescription('Total number of CP incoming incompressable packets received over the PPP interface.')
pppCPInDestroyeds = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 8, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppCPInDestroyeds.setStatus('mandatory')
if mibBuilder.loadTexts: pppCPInDestroyeds.setDescription('Total number of CP incoming packets discarded for this PPP interface.')
pppCPInCopies = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 8, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppCPInCopies.setStatus('mandatory')
if mibBuilder.loadTexts: pppCPInCopies.setDescription('Total number of CP incoming packets requiring a copy to a spare buffer to correct alignment.')
pppCPOutCompressedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 8, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppCPOutCompressedOctets.setStatus('mandatory')
if mibBuilder.loadTexts: pppCPOutCompressedOctets.setDescription('Total number of CP outgoing compressed octets sent over the PPP interface.')
pppCPOutInCompressablePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 8, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppCPOutInCompressablePkts.setStatus('mandatory')
if mibBuilder.loadTexts: pppCPOutInCompressablePkts.setDescription('Total number of CP outgoing incompressable packets sent over the PPP interface.')
pppCPOutDestroyeds = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 8, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppCPOutDestroyeds.setStatus('mandatory')
if mibBuilder.loadTexts: pppCPOutDestroyeds.setDescription('Total number of CP outgoing packets discarded for this PPP interface.')
pppCPOutCopies = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 8, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppCPOutCopies.setStatus('mandatory')
if mibBuilder.loadTexts: pppCPOutCopies.setDescription('Total number of CP outgoing packets requiring a copy to a spare buffer to correct alignment.')
pppCCPInResetReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 8, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppCCPInResetReqs.setStatus('mandatory')
if mibBuilder.loadTexts: pppCCPInResetReqs.setDescription('Total number of CCP incoming Reset request packets received over the PPP interface.')
pppCCPInResetAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 8, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppCCPInResetAcks.setStatus('mandatory')
if mibBuilder.loadTexts: pppCCPInResetAcks.setDescription('Total number of CCP incoming Reset Acknowledgement packets received over the PPP interface.')
pppCCPInDictResets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 8, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppCCPInDictResets.setStatus('mandatory')
if mibBuilder.loadTexts: pppCCPInDictResets.setDescription('Total number of CCP incoming Dictionary Reset packets received over the PPP interface.')
pppCCPOutResetReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 8, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppCCPOutResetReqs.setStatus('mandatory')
if mibBuilder.loadTexts: pppCCPOutResetReqs.setDescription('Total number of CCP outgoing Reset request packets sent over the PPP interface.')
pppCCPOutResetAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 8, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppCCPOutResetAcks.setStatus('mandatory')
if mibBuilder.loadTexts: pppCCPOutResetAcks.setDescription('Total number of CCP outgoing Reset Acknowledgement packets sent over the PPP interface.')
pppCCPOutDictResets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 8, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppCCPOutDictResets.setStatus('mandatory')
if mibBuilder.loadTexts: pppCCPOutDictResets.setDescription('Total number of CCP outgoing Dictionary Reset packets sent over the PPP interface.')
pppCCPPacketDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 8, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppCCPPacketDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: pppCCPPacketDiscards.setDescription('Total number of CCP incoming packet discards occuring for this PPP interface.')
pppCCPOctetDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 8, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppCCPOctetDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: pppCCPOctetDiscards.setDescription('Total number of CCP outgoing packet discards occuring for this PPP interface.')
pppEPTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 9), )
if mibBuilder.loadTexts: pppEPTable.setStatus('mandatory')
if mibBuilder.loadTexts: pppEPTable.setDescription('A table of encryption protocol and control protocol statistics.')
pppEPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 9, 1), ).setIndexNames((0, "IBMIROC-MIB", "pppEPIfIndex"))
if mibBuilder.loadTexts: pppEPEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pppEPEntry.setDescription('An entry of EP and ECP information.')
pppEPIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppEPIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pppEPIfIndex.setDescription('A unique identifier for a PPP interface running EP. This object is the same as the MIB-II ifIndex object.')
pppEPInEncryptedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 9, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppEPInEncryptedOctets.setStatus('mandatory')
if mibBuilder.loadTexts: pppEPInEncryptedOctets.setDescription('Total number of EP incoming encrypted octets received over the PPP interface.')
pppEPInDestroyeds = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 9, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppEPInDestroyeds.setStatus('mandatory')
if mibBuilder.loadTexts: pppEPInDestroyeds.setDescription('Total number of EP incoming packets discarded for this PPP interface.')
pppEPInCopies = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 9, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppEPInCopies.setStatus('mandatory')
if mibBuilder.loadTexts: pppEPInCopies.setDescription('Total number of EP incoming packets requiring a copy to a spare buffer to correct alignment.')
pppEPOutEncryptedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 9, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppEPOutEncryptedOctets.setStatus('mandatory')
if mibBuilder.loadTexts: pppEPOutEncryptedOctets.setDescription('Total number of EP outgoing encrypted octets sent over the PPP interface.')
pppEPOutDestroyeds = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 9, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppEPOutDestroyeds.setStatus('mandatory')
if mibBuilder.loadTexts: pppEPOutDestroyeds.setDescription('Total number of EP outgoing packets discarded for this PPP interface.')
pppEPOutCopies = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 9, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppEPOutCopies.setStatus('mandatory')
if mibBuilder.loadTexts: pppEPOutCopies.setDescription('Total number of EP outgoing packets requiring a copy to a spare buffer to correct alignment.')
pppECPInResetReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 9, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppECPInResetReqs.setStatus('mandatory')
if mibBuilder.loadTexts: pppECPInResetReqs.setDescription('Total number of ECP incoming Reset request packets received over the PPP interface.')
pppECPInResetAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 9, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppECPInResetAcks.setStatus('mandatory')
if mibBuilder.loadTexts: pppECPInResetAcks.setDescription('Total number of ECP incoming Reset Acknowledgement packets received over the PPP interface.')
pppECPInDictResets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 9, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppECPInDictResets.setStatus('mandatory')
if mibBuilder.loadTexts: pppECPInDictResets.setDescription('Total number of ECP incoming Dictionary Reset packets received over the PPP interface.')
pppECPOutResetReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 9, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppECPOutResetReqs.setStatus('mandatory')
if mibBuilder.loadTexts: pppECPOutResetReqs.setDescription('Total number of ECP outgoing Reset request packets sent over the PPP interface.')
pppECPOutResetAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 9, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppECPOutResetAcks.setStatus('mandatory')
if mibBuilder.loadTexts: pppECPOutResetAcks.setDescription('Total number of ECP outgoing Reset Acknowledgement packets sent over the PPP interface.')
pppECPOutDictResets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 9, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppECPOutDictResets.setStatus('mandatory')
if mibBuilder.loadTexts: pppECPOutDictResets.setDescription('Total number of ECP outgoing Dictionary Reset packets sent over the PPP interface.')
pppECPPacketDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 9, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppECPPacketDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: pppECPPacketDiscards.setDescription('Total number of ECP incoming packet discards occuring for this PPP interface.')
pppECPOctetDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 9, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppECPOctetDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: pppECPOctetDiscards.setDescription('Total number of ECP outgoing packet discards occuring for this PPP interface.')
pppMSCHAPTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 10), )
if mibBuilder.loadTexts: pppMSCHAPTable.setStatus('mandatory')
if mibBuilder.loadTexts: pppMSCHAPTable.setDescription('A table of MSCHAP statistics.')
pppMSCHAPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 10, 1), ).setIndexNames((0, "IBMIROC-MIB", "pppMSCHAPIfIndex"))
if mibBuilder.loadTexts: pppMSCHAPEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pppMSCHAPEntry.setDescription('An entry of MSCHAP information.')
pppMSCHAPIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppMSCHAPIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pppMSCHAPIfIndex.setDescription('A unique identifier for a PPP interface running MSCHAP. This object is the same as the MIB-II ifIndex object.')
pppMSCHAPInPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 10, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppMSCHAPInPackets.setStatus('mandatory')
if mibBuilder.loadTexts: pppMSCHAPInPackets.setDescription('Total number of MSCHAP packets received over the PPP interface.')
pppMSCHAPInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 10, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppMSCHAPInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: pppMSCHAPInOctets.setDescription('Total number of MSCHAP octets received over the PPP interface.')
pppMSCHAPInChallenges = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 10, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppMSCHAPInChallenges.setStatus('mandatory')
if mibBuilder.loadTexts: pppMSCHAPInChallenges.setDescription('Total number of MSCHAP challenges received over the PPP interface.')
pppMSCHAPInResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 10, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppMSCHAPInResponses.setStatus('mandatory')
if mibBuilder.loadTexts: pppMSCHAPInResponses.setDescription('Total number of MSCHAP responses received over the PPP interface.')
pppMSCHAPInSuccesses = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 10, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppMSCHAPInSuccesses.setStatus('mandatory')
if mibBuilder.loadTexts: pppMSCHAPInSuccesses.setDescription('Total number of MSCHAP successes received over the PPP interface.')
pppMSCHAPInFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 10, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppMSCHAPInFailures.setStatus('mandatory')
if mibBuilder.loadTexts: pppMSCHAPInFailures.setDescription('Total number of MSCHAP failures received over the PPP interface.')
pppMSCHAPInChangePasswords = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 10, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppMSCHAPInChangePasswords.setStatus('mandatory')
if mibBuilder.loadTexts: pppMSCHAPInChangePasswords.setDescription('Total number of MSCHAP change passwords received over the PPP interface.')
pppMSCHAPInRestrictedHoursFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 10, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppMSCHAPInRestrictedHoursFailures.setStatus('mandatory')
if mibBuilder.loadTexts: pppMSCHAPInRestrictedHoursFailures.setDescription('Total number of MSCHAP restricted hours failures received over the PPP interface.')
pppMSCHAPInAccountDisabledFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 10, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppMSCHAPInAccountDisabledFailures.setStatus('mandatory')
if mibBuilder.loadTexts: pppMSCHAPInAccountDisabledFailures.setDescription('Total number of MSCHAP account disabled failures received over the PPP interface.')
pppMSCHAPInPasswordExpiredFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 10, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppMSCHAPInPasswordExpiredFailures.setStatus('mandatory')
if mibBuilder.loadTexts: pppMSCHAPInPasswordExpiredFailures.setDescription('Total number of MSCHAP password expired failures received over the PPP interface.')
pppMSCHAPInNoPermissionFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 10, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppMSCHAPInNoPermissionFailures.setStatus('mandatory')
if mibBuilder.loadTexts: pppMSCHAPInNoPermissionFailures.setDescription('Total number of MSCHAP no permission failures received over the PPP interface.')
pppMSCHAPInAuthenticationFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 10, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppMSCHAPInAuthenticationFailures.setStatus('mandatory')
if mibBuilder.loadTexts: pppMSCHAPInAuthenticationFailures.setDescription('Total number of MSCHAP authentication failures received over the PPP interface.')
pppMSCHAPInChangePasswordFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 10, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppMSCHAPInChangePasswordFailures.setStatus('mandatory')
if mibBuilder.loadTexts: pppMSCHAPInChangePasswordFailures.setDescription('Total number of MSCHAP change password failures received over the PPP interface.')
pppMSCHAPOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 10, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppMSCHAPOutPackets.setStatus('mandatory')
if mibBuilder.loadTexts: pppMSCHAPOutPackets.setDescription('Total number of MSCHAP packets sent over the PPP interface.')
pppMSCHAPOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 10, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppMSCHAPOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: pppMSCHAPOutOctets.setDescription('Total number of MSCHAP octets sent over the PPP interface.')
pppMSCHAPOutChallenges = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 10, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppMSCHAPOutChallenges.setStatus('mandatory')
if mibBuilder.loadTexts: pppMSCHAPOutChallenges.setDescription('Total number of MSCHAP challenges sent over the PPP interface.')
pppMSCHAPOutResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 10, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppMSCHAPOutResponses.setStatus('mandatory')
if mibBuilder.loadTexts: pppMSCHAPOutResponses.setDescription('Total number of MSCHAP responses sent over the PPP interface.')
pppMSCHAPOutSuccesses = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 10, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppMSCHAPOutSuccesses.setStatus('mandatory')
if mibBuilder.loadTexts: pppMSCHAPOutSuccesses.setDescription('Total number of MSCHAP successes sent over the PPP interface.')
pppMSCHAPOutFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 10, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppMSCHAPOutFailures.setStatus('mandatory')
if mibBuilder.loadTexts: pppMSCHAPOutFailures.setDescription('Total number of MSCHAP failures sent over the PPP interface.')
pppMSCHAPOutChangePasswords = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 10, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppMSCHAPOutChangePasswords.setStatus('mandatory')
if mibBuilder.loadTexts: pppMSCHAPOutChangePasswords.setDescription('Total number of MSCHAP change passwords sent over the PPP interface.')
pppMSCHAPOutRestrictedHoursFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 10, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppMSCHAPOutRestrictedHoursFailures.setStatus('mandatory')
if mibBuilder.loadTexts: pppMSCHAPOutRestrictedHoursFailures.setDescription('Total number of MSCHAP restricted hours failures sent over the PPP interface.')
pppMSCHAPOutAccountDisabledFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 10, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppMSCHAPOutAccountDisabledFailures.setStatus('mandatory')
if mibBuilder.loadTexts: pppMSCHAPOutAccountDisabledFailures.setDescription('Total number of MSCHAP account disabled failures sent over the PPP interface.')
pppMSCHAPOutPasswordExpiredFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 10, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppMSCHAPOutPasswordExpiredFailures.setStatus('mandatory')
if mibBuilder.loadTexts: pppMSCHAPOutPasswordExpiredFailures.setDescription('Total number of MSCHAP password expired failures sent over the PPP interface.')
pppMSCHAPOutNoPermissionFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 10, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppMSCHAPOutNoPermissionFailures.setStatus('mandatory')
if mibBuilder.loadTexts: pppMSCHAPOutNoPermissionFailures.setDescription('Total number of MSCHAP no permission failures sent over the PPP interface.')
pppMSCHAPOutAuthenticationFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 10, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppMSCHAPOutAuthenticationFailures.setStatus('mandatory')
if mibBuilder.loadTexts: pppMSCHAPOutAuthenticationFailures.setDescription('Total number of MSCHAP authentication failures sent over the PPP interface.')
pppMSCHAPOutChangePasswordFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 10, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppMSCHAPOutChangePasswordFailures.setStatus('mandatory')
if mibBuilder.loadTexts: pppMSCHAPOutChangePasswordFailures.setDescription('Total number of MSCHAP change password failures sent over the PPP interface.')
pppCBCPTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 11), )
if mibBuilder.loadTexts: pppCBCPTable.setStatus('mandatory')
if mibBuilder.loadTexts: pppCBCPTable.setDescription('A table of CBCP statistics.')
pppCBCPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 11, 1), ).setIndexNames((0, "IBMIROC-MIB", "pppCBCPIfIndex"))
if mibBuilder.loadTexts: pppCBCPEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pppCBCPEntry.setDescription('An entry of CBCP information.')
pppCBCPIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppCBCPIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pppCBCPIfIndex.setDescription('A unique identifier for a PPP interface running CBCP. This object is the same as the MIB-II ifIndex object.')
pppCBCPInPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 11, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppCBCPInPackets.setStatus('mandatory')
if mibBuilder.loadTexts: pppCBCPInPackets.setDescription('Total number of CBCP packets received over the PPP interface.')
pppCBCPInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 11, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppCBCPInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: pppCBCPInOctets.setDescription('Total number of CBCP octets received over the PPP interface.')
pppCBCPOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 11, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppCBCPOutPackets.setStatus('mandatory')
if mibBuilder.loadTexts: pppCBCPOutPackets.setDescription('Total number of CBCP packets sent over the PPP interface.')
pppCBCPOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 11, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppCBCPOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: pppCBCPOutOctets.setDescription('Total number of CBCP octets sent over the PPP interface.')
pppCBCPAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 11, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppCBCPAttempts.setStatus('mandatory')
if mibBuilder.loadTexts: pppCBCPAttempts.setDescription('Total number of CBCP attempts.')
pppCBCPSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 11, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppCBCPSuccess.setStatus('mandatory')
if mibBuilder.loadTexts: pppCBCPSuccess.setDescription('Total number of CBCP successes.')
pppEAPTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 12), )
if mibBuilder.loadTexts: pppEAPTable.setStatus('mandatory')
if mibBuilder.loadTexts: pppEAPTable.setDescription('A table of EAP statistics.')
pppEAPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 12, 1), ).setIndexNames((0, "IBMIROC-MIB", "pppEAPIfIndex"))
if mibBuilder.loadTexts: pppEAPEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pppEAPEntry.setDescription('An entry of EAP information.')
pppEAPIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppEAPIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pppEAPIfIndex.setDescription('A unique identifier for a PPP interface running EAP. This object is the same as the MIB-II ifIndex object.')
pppEAPInPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 12, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppEAPInPackets.setStatus('mandatory')
if mibBuilder.loadTexts: pppEAPInPackets.setDescription('Total number of EAP packets received over the PPP interface.')
pppEAPInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 12, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppEAPInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: pppEAPInOctets.setDescription('Total number of EAP octets received over the PPP interface.')
pppEAPInRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 12, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppEAPInRequests.setStatus('mandatory')
if mibBuilder.loadTexts: pppEAPInRequests.setDescription('Total number of EAP requests received over the PPP interface.')
pppEAPInAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 12, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppEAPInAcks.setStatus('mandatory')
if mibBuilder.loadTexts: pppEAPInAcks.setDescription('Total number of EAP acknowledgments received over the PPP interface.')
pppEAPInNaks = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 12, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppEAPInNaks.setStatus('mandatory')
if mibBuilder.loadTexts: pppEAPInNaks.setDescription('Total number of EAP negative acknowledgements received over the PPP interface.')
pppEAPOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 12, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppEAPOutPackets.setStatus('mandatory')
if mibBuilder.loadTexts: pppEAPOutPackets.setDescription('Total number of EAP packets sent over the PPP interface.')
pppEAPOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 12, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppEAPOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: pppEAPOutOctets.setDescription('Total number of EAP octets sent over the PPP interface.')
pppEAPOutRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 12, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppEAPOutRequests.setStatus('mandatory')
if mibBuilder.loadTexts: pppEAPOutRequests.setDescription('Total number of EAP requests sent over the PPP interface.')
pppEAPOutAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 12, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppEAPOutAcks.setStatus('mandatory')
if mibBuilder.loadTexts: pppEAPOutAcks.setDescription('Total number of EAP acknowledgments sent over the PPP interface.')
pppEAPOutNaks = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 12, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppEAPOutNaks.setStatus('mandatory')
if mibBuilder.loadTexts: pppEAPOutNaks.setDescription('Total number of EAP negative acknowledgements sent over the PPP interface.')
pppMPPETable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 13), )
if mibBuilder.loadTexts: pppMPPETable.setStatus('mandatory')
if mibBuilder.loadTexts: pppMPPETable.setDescription('A table of MPPE statistics.')
pppMPPEEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 13, 1), ).setIndexNames((0, "IBMIROC-MIB", "pppMPPEIfIndex"))
if mibBuilder.loadTexts: pppMPPEEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pppMPPEEntry.setDescription('An entry of MPPE information.')
pppMPPEIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppMPPEIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pppMPPEIfIndex.setDescription('A unique identifier for a PPP interface running MPPE. This object is the same as the MIB-II ifIndex object.')
pppMPPEInPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 13, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppMPPEInPackets.setStatus('mandatory')
if mibBuilder.loadTexts: pppMPPEInPackets.setDescription('Total number of MPPE packets received over the PPP interface.')
pppMPPEInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 13, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppMPPEInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: pppMPPEInOctets.setDescription('Total number of MPPE octets received over the PPP interface.')
pppMPPEInDestroyed = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 13, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppMPPEInDestroyed.setStatus('mandatory')
if mibBuilder.loadTexts: pppMPPEInDestroyed.setDescription('Total number of MPPE requests received over the PPP interface that were discarded.')
pppMPPEOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 13, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppMPPEOutPackets.setStatus('mandatory')
if mibBuilder.loadTexts: pppMPPEOutPackets.setDescription('Total number of MPPE packets sent over the PPP interface.')
pppMPPEOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 13, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppMPPEOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: pppMPPEOutOctets.setDescription('Total number of MPPE octets sent over the PPP interface.')
pppMPPEOutDestroyed = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 13, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppMPPEOutDestroyed.setStatus('mandatory')
if mibBuilder.loadTexts: pppMPPEOutDestroyed.setDescription('Total number of MPPE requests discarded and not sent over the PPP interface.')
ibmdlswTConnGroupOperTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 3, 1), )
if mibBuilder.loadTexts: ibmdlswTConnGroupOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: ibmdlswTConnGroupOperTable.setDescription('Information about multicast groups of which this DLSw is currently a member.')
ibmdlswTConnGroupOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 3, 1, 1), ).setIndexNames((0, "IBMIROC-MIB", "ibmdlswTConnGroupOperIndex"))
if mibBuilder.loadTexts: ibmdlswTConnGroupOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ibmdlswTConnGroupOperEntry.setDescription('Information about a single multicast group of which this DLSw is a member.')
ibmdlswTConnGroupOperIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlswTConnGroupOperIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ibmdlswTConnGroupOperIndex.setDescription('The index to the conceptual row of the table. Values are assigned by the agent and are not reused, but continue to increase in value.')
ibmdlswTConnGroupOperRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("peer", 1), ("client", 2), ("server", 3), ("readonly", 4), ("writeonly", 5), ("readwrite", 6), ("other", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlswTConnGroupOperRole.setStatus('mandatory')
if mibBuilder.loadTexts: ibmdlswTConnGroupOperRole.setDescription('The role that this DLSw plays within the group. The first three roles are used by the IBM multicast DLSw group feature. The next three roles are used when interoperating with DLSw Version 2 compliant partners that may not have the IBM group feature.')
ibmdlswTConnGroupOperJoinTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 3, 1, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlswTConnGroupOperJoinTime.setStatus('mandatory')
if mibBuilder.loadTexts: ibmdlswTConnGroupOperJoinTime.setDescription('The amount of time (in hundredths of a second) since this DLSw node last became a member of this group.')
ibmdlswTConnGroupOperConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlswTConnGroupOperConfigIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ibmdlswTConnGroupOperConfigIndex.setDescription('The value of dlswTConnConfigIndex of the dlswTConnConfigEntry that governs the configuration information used by this ibmdlswTConnGroupOperEntry. A management station can therefore normally examine both configured and operational information for this multicast group.')
ibmdlswTConnGroupOperInDataPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlswTConnGroupOperInDataPkts.setStatus('mandatory')
if mibBuilder.loadTexts: ibmdlswTConnGroupOperInDataPkts.setDescription('The number of Switch-to-Switch Protocol (SSP) messages of type DATAFRAME received for this group.')
ibmdlswTConnGroupOperOutDataPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlswTConnGroupOperOutDataPkts.setStatus('mandatory')
if mibBuilder.loadTexts: ibmdlswTConnGroupOperOutDataPkts.setDescription('The number of Switch-to-Switch Protocol (SSP) messages of type DATAFRAME transmitted for this group.')
ibmdlswTConnGroupOperInDataOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 3, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlswTConnGroupOperInDataOctets.setStatus('mandatory')
if mibBuilder.loadTexts: ibmdlswTConnGroupOperInDataOctets.setDescription('The number of octets in Switch-to-Switch Protocol (SSP) messages of type DATAFRAME received for this group. Each message is counted starting with the first octet following the SSP message header.')
ibmdlswTConnGroupOperOutDataOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlswTConnGroupOperOutDataOctets.setStatus('mandatory')
if mibBuilder.loadTexts: ibmdlswTConnGroupOperOutDataOctets.setDescription('The number of octets in Switch-to-Switch Protocol (SSP) messages of type DATAFRAME transmitted for this group. Each message is counted starting with the first octet following the SSP message header.')
ibmdlswTConnGroupOperInCntlPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 3, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlswTConnGroupOperInCntlPkts.setStatus('mandatory')
if mibBuilder.loadTexts: ibmdlswTConnGroupOperInCntlPkts.setDescription('The number of Switch-to-Switch Protocol (SSP) messages received for this group which were not of type DATAFRAME.')
ibmdlswTConnGroupOperOutCntlPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 3, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlswTConnGroupOperOutCntlPkts.setStatus('mandatory')
if mibBuilder.loadTexts: ibmdlswTConnGroupOperOutCntlPkts.setDescription('The number of Switch-to-Switch Protocol (SSP) messages transmitted for this group which were not of type DATAFRAME.')
ibmdlswTConnGroupOperCURexSents = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 3, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlswTConnGroupOperCURexSents.setStatus('mandatory')
if mibBuilder.loadTexts: ibmdlswTConnGroupOperCURexSents.setDescription('The number of CanUReach_ex messages sent for this group.')
ibmdlswTConnGroupOperICRexRcvds = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 3, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlswTConnGroupOperICRexRcvds.setStatus('mandatory')
if mibBuilder.loadTexts: ibmdlswTConnGroupOperICRexRcvds.setDescription('The number of ICanReach_ex messages received for this group.')
ibmdlswTConnGroupOperCURexRcvds = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 3, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlswTConnGroupOperCURexRcvds.setStatus('mandatory')
if mibBuilder.loadTexts: ibmdlswTConnGroupOperCURexRcvds.setDescription('The number of CanUReach_ex messages received for this group.')
ibmdlswTConnGroupOperICRexSents = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 3, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlswTConnGroupOperICRexSents.setStatus('mandatory')
if mibBuilder.loadTexts: ibmdlswTConnGroupOperICRexSents.setDescription('The number of ICanReach_ex messages sent for this group.')
ibmdlswTConnGroupOperNQexSents = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 3, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlswTConnGroupOperNQexSents.setStatus('mandatory')
if mibBuilder.loadTexts: ibmdlswTConnGroupOperNQexSents.setDescription('The number of NetBIOS_NQ_ex (NetBIOS Name Query-explorer) messages sent for this group.')
ibmdlswTConnGroupOperNRexRcvds = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 3, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlswTConnGroupOperNRexRcvds.setStatus('mandatory')
if mibBuilder.loadTexts: ibmdlswTConnGroupOperNRexRcvds.setDescription('The number of NETBIOS_NR_ex (NetBIOS Name Recognized-explorer) messages received for this group.')
ibmdlswTConnGroupOperNQexRcvds = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 3, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlswTConnGroupOperNQexRcvds.setStatus('mandatory')
if mibBuilder.loadTexts: ibmdlswTConnGroupOperNQexRcvds.setDescription('The number of NETBIOS_NQ_ex messages received for this group.')
ibmdlswTConnGroupOperNRexSents = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 3, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlswTConnGroupOperNRexSents.setStatus('mandatory')
if mibBuilder.loadTexts: ibmdlswTConnGroupOperNRexSents.setDescription('The number of NETBIOS_NR_ex messages sent for this group.')
ibmdlswQllcLsTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 3, 2), )
if mibBuilder.loadTexts: ibmdlswQllcLsTable.setStatus('mandatory')
if mibBuilder.loadTexts: ibmdlswQllcLsTable.setDescription('Table to provide an address mapping from configured QLLC addresses to DLSw MAC and SAP addresses, and other configured QLLC station information.')
ibmdlswQllcLsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 3, 2, 1), ).setIndexNames((0, "IBMIROC-MIB", "ibmdlswQllcLsIfIndex"), (0, "IBMIROC-MIB", "ibmdlswQllcLsQdomain"), (0, "IBMIROC-MIB", "ibmdlswQllcLsQaddress"))
if mibBuilder.loadTexts: ibmdlswQllcLsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ibmdlswQllcLsEntry.setDescription('The configured information for a single QLLC station.')
ibmdlswQllcLsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlswQllcLsIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ibmdlswQllcLsIfIndex.setDescription('A unique identifier for the X.25 interface running QLLC through which this station is reached. This object is the same as the MIB-II ifIndex object.')
ibmdlswQllcLsQdomain = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pvc", 1), ("svc", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlswQllcLsQdomain.setStatus('mandatory')
if mibBuilder.loadTexts: ibmdlswQllcLsQdomain.setDescription('X.25 circuit type identifier, permanent or switched')
ibmdlswQllcLsQaddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 3, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmdlswQllcLsQaddress.setStatus('mandatory')
if mibBuilder.loadTexts: ibmdlswQllcLsQaddress.setDescription('For PVCs, this is the logical channel number dedicated to this X.25 circuit. For SVCs, this is the DTE address of the remote QLLC device (i.e., the address that the DLSw node places a call to or receives a call from).')
ibmdlswQllcLsChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlswQllcLsChannel.setStatus('mandatory')
if mibBuilder.loadTexts: ibmdlswQllcLsChannel.setDescription('Logical channel number for PVCs and connected SVCs. A value of zero indicates an SVC without a connected call.')
ibmdlswQllcLsLocalMac = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 3, 2, 1, 5), MacAddressNCIROC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlswQllcLsLocalMac.setStatus('mandatory')
if mibBuilder.loadTexts: ibmdlswQllcLsLocalMac.setDescription('The MAC address that represents this QLLC station to other devices within the DLSw network.')
ibmdlswQllcLsLocalSap = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 3, 2, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlswQllcLsLocalSap.setStatus('mandatory')
if mibBuilder.loadTexts: ibmdlswQllcLsLocalSap.setDescription('The SAP that accompanies ibmdlswQllcLsLocalMac.')
ibmdlswQllcLsRemoteMac = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 3, 2, 1, 7), MacAddressNCIROC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlswQllcLsRemoteMac.setStatus('mandatory')
if mibBuilder.loadTexts: ibmdlswQllcLsRemoteMac.setDescription('The MAC address of a device in the DLSw network that this QLLC device can initiate a DLSw circuit to. If zero, the QLLC device cannot originate a DLSw circuit, but can only be the destination.')
ibmdlswQllcLsRemoteSap = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 3, 2, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlswQllcLsRemoteSap.setStatus('mandatory')
if mibBuilder.loadTexts: ibmdlswQllcLsRemoteSap.setDescription('The SAP that accompanies ibmdlswQllcLsRemoteMac. If zero, the QLLC device cannot originate a DLSw circuit, but can only be the destination.')
ibmdlswQllcLsPuType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 3, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5, 6))).clone(namedValues=NamedValues(("type1", 1), ("type2", 2), ("type4", 4), ("type5", 5), ("other", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlswQllcLsPuType.setStatus('mandatory')
if mibBuilder.loadTexts: ibmdlswQllcLsPuType.setDescription('SNA Physical Unit type of the QLLC device.')
ibmdlswQllcLsBlkNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 3, 2, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlswQllcLsBlkNum.setStatus('mandatory')
if mibBuilder.loadTexts: ibmdlswQllcLsBlkNum.setDescription('SNA XID_0 block number for the QLLC device. A non-zero value implies that the DLSw node will generate an XID_0 on behalf of the device.')
ibmdlswQllcLsIdNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 3, 2, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlswQllcLsIdNum.setStatus('mandatory')
if mibBuilder.loadTexts: ibmdlswQllcLsIdNum.setDescription('SNA XID_0 id number for the QLLC device. A non-zero value implies that the DLSw node will generate an XID_0 on behalf of the device.')
frCLLMStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4, 1), )
if mibBuilder.loadTexts: frCLLMStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: frCLLMStatsTable.setDescription('A table containing information about CLLM messages received from the switch.')
frCLLMStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4, 1, 1), ).setIndexNames((0, "IBMIROC-MIB", "frCLLMStatsIfIndex"), (0, "IBMIROC-MIB", "frCLLMStatsDlci"))
if mibBuilder.loadTexts: frCLLMStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frCLLMStatsEntry.setDescription('The CLLM information for a particular virtual circuit.')
frCLLMStatsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCLLMStatsIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: frCLLMStatsIfIndex.setDescription('The ifIndex value identifying the Frame Relay interface to which this CLLM information pertains.')
frCLLMStatsDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCLLMStatsDlci.setStatus('mandatory')
if mibBuilder.loadTexts: frCLLMStatsDlci.setDescription('The DLCI value identifying the Frame Relay virtual circuit to which this CLLM information pertains.')
frCLLMStatsRcvds = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCLLMStatsRcvds.setStatus('mandatory')
if mibBuilder.loadTexts: frCLLMStatsRcvds.setDescription('The number of CLLM messages received which reported status on this virtual circuit.')
frCLLMCauseTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4, 2), )
if mibBuilder.loadTexts: frCLLMCauseTable.setStatus('mandatory')
if mibBuilder.loadTexts: frCLLMCauseTable.setDescription('A table containing information about CLLM message cause codes.')
frCLLMCauseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4, 2, 1), ).setIndexNames((0, "IBMIROC-MIB", "frCLLMCauseIfIndex"))
if mibBuilder.loadTexts: frCLLMCauseEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frCLLMCauseEntry.setDescription('The CLLM cause information for a particular interface.')
frCLLMCauseIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCLLMCauseIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: frCLLMCauseIfIndex.setDescription('The ifIndex value identifying the Frame Relay interface to which this CLLM cause information pertains.')
frCLLMCauseCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCLLMCauseCode.setStatus('mandatory')
if mibBuilder.loadTexts: frCLLMCauseCode.setDescription('The cause code in the last CLLM message received on this interface.')
frSimpleObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4, 3))
frCLLMDlciList = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4, 3, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCLLMDlciList.setStatus('mandatory')
if mibBuilder.loadTexts: frCLLMDlciList.setDescription('The list of DLCIs contained in the last CLLM message received.')
frTrapStateFECN = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frTrapStateFECN.setStatus('mandatory')
if mibBuilder.loadTexts: frTrapStateFECN.setDescription('This variable indicates whether the system produces the frrcvdFECN trap.')
frTrapStateBECN = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frTrapStateBECN.setStatus('mandatory')
if mibBuilder.loadTexts: frTrapStateBECN.setDescription('This variable indicates whether the system produces the frrcvdBECN trap.')
frTrapStateCLLM = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frTrapStateCLLM.setStatus('mandatory')
if mibBuilder.loadTexts: frTrapStateCLLM.setDescription('This variable indicates whether the system produces the frrcvdCLLM trap.')
ibmIROCfrBRS = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4, 4))
ibmIROCfrcircuit = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4, 5))
tcpiprouteTabSize = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 20, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpiprouteTabSize.setStatus('mandatory')
if mibBuilder.loadTexts: tcpiprouteTabSize.setDescription('The configured number of entries that the routing table can maintain.')
tcpiprouteTabUsed = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 20, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpiprouteTabUsed.setStatus('mandatory')
if mibBuilder.loadTexts: tcpiprouteTabUsed.setDescription('The current number of routing table entries being used. The number includes both active and inactive entries.')
tcpiprouteCacheSize = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 20, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpiprouteCacheSize.setStatus('mandatory')
if mibBuilder.loadTexts: tcpiprouteCacheSize.setDescription('The configured number of entries that the routing cache can maintain.')
tcpiprouteCacheUsed = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 20, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpiprouteCacheUsed.setStatus('mandatory')
if mibBuilder.loadTexts: tcpiprouteCacheUsed.setDescription('The current number of routing cache entries being used.')
tcpiprouteOverFlow = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 20, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpiprouteOverFlow.setStatus('mandatory')
if mibBuilder.loadTexts: tcpiprouteOverFlow.setDescription('The number of routes that had to be discarded because the routing table was full.')
tcpiprouteNoReach = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 20, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpiprouteNoReach.setStatus('mandatory')
if mibBuilder.loadTexts: tcpiprouteNoReach.setDescription('The number of packets that could not be forwarded because of unknown destinations. This does not count the number of packets forwarded to the default gateway.')
tcpiprouteBadSubnet = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 20, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpiprouteBadSubnet.setStatus('mandatory')
if mibBuilder.loadTexts: tcpiprouteBadSubnet.setDescription('The number of packets and routes that have been received for illegal subnets (all ones or all zeroes).')
tcpiprouteBadNet = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 20, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpiprouteBadNet.setStatus('mandatory')
if mibBuilder.loadTexts: tcpiprouteBadNet.setDescription('The number of packets and routes that have been received for illegal IP destinations.')
tcpiprouteUnhBcast = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 20, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpiprouteUnhBcast.setStatus('mandatory')
if mibBuilder.loadTexts: tcpiprouteUnhBcast.setDescription('The number of non-local IP broadcasts received (which are not forwarded).')
tcpiprouteUnhMcast = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 20, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpiprouteUnhMcast.setStatus('mandatory')
if mibBuilder.loadTexts: tcpiprouteUnhMcast.setDescription('The number of IP multicasts received, but whose addresses were not recognized by the router (and are discarded).')
tcpiprouteUnhDirBcast = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 20, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpiprouteUnhDirBcast.setStatus('mandatory')
if mibBuilder.loadTexts: tcpiprouteUnhDirBcast.setDescription('The number of directed, non-local IP broadcasts received when forwarding of these packets is disabled.')
tcpiprouteUnhLLbcast = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 20, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpiprouteUnhLLbcast.setStatus('mandatory')
if mibBuilder.loadTexts: tcpiprouteUnhLLbcast.setDescription('The number of packets received having non-local IP addresses but were sent to a link-level broadcst address (and are discarded).')
tcpiprouteDiscFilt = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 20, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpiprouteDiscFilt.setStatus('mandatory')
if mibBuilder.loadTexts: tcpiprouteDiscFilt.setDescription('The number of packets received that have been addressed to filtered networks or subnets (and are discarded).')
tcpiprouteMultRcvd = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 20, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpiprouteMultRcvd.setStatus('mandatory')
if mibBuilder.loadTexts: tcpiprouteMultRcvd.setDescription('The number of IP multicasts that have been received and processed successfully.')
tcpCurrConnections = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 20, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpCurrConnections.setStatus('mandatory')
if mibBuilder.loadTexts: tcpCurrConnections.setDescription('The current number of TCP connections, which can be in any state. This object and tcpMaxConnections are defined mainly to monitor the number of TCP connections and their affect on memory usage in the router.')
tcpMaxConnections = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 20, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpMaxConnections.setStatus('mandatory')
if mibBuilder.loadTexts: tcpMaxConnections.setDescription('The maximum number of TCP connections allowed. This object and tcpCurrConnections are defined mainly to monitor the number of TCP connections and their affect on memory usage in the router.')
serverCurrConnections = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 20, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverCurrConnections.setStatus('mandatory')
if mibBuilder.loadTexts: serverCurrConnections.setDescription('The current number of connections to a local server application (for example, TN3270E or Web Cache). This object and serverMaxConnections are defined mainly to monitor the number of server connections and their affect on memory usage in the router.')
serverMaxConnections = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 20, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverMaxConnections.setStatus('mandatory')
if mibBuilder.loadTexts: serverMaxConnections.setDescription('The maximum number of connections allowed to a local server application (for example, TN3270E or Web Cache). This object and serverCurrConnections are defined mainly to monitor the number of server connections and their affect on memory usage in the router.')
ibmIROCtrapsfr = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 6, 1))
frrcvdFECN = NotificationType((1, 3, 6, 1, 4, 1, 2, 6, 119, 6, 1) + (0,1)).setObjects(("RFC1315-MIB", "frCircuitIfIndex"), ("RFC1315-MIB", "frCircuitDlci"))
if mibBuilder.loadTexts: frrcvdFECN.setDescription('This trap indicates that a frame was received from the network on this virtual circuit and it indicated forward congestion.')
frrcvdBECN = NotificationType((1, 3, 6, 1, 4, 1, 2, 6, 119, 6, 1) + (0,2)).setObjects(("RFC1315-MIB", "frCircuitIfIndex"), ("RFC1315-MIB", "frCircuitDlci"))
if mibBuilder.loadTexts: frrcvdBECN.setDescription('This trap indicates that a frame was received from the network on this virtual circuit and it indicated backward congestion.')
frrcvdCLLM = NotificationType((1, 3, 6, 1, 4, 1, 2, 6, 119, 6, 1) + (0,3)).setObjects(("IBMIROC-MIB", "frCLLMCauseIfIndex"), ("IBMIROC-MIB", "frCLLMCauseCode"), ("IBMIROC-MIB", "frCLLMDlciList"))
if mibBuilder.loadTexts: frrcvdCLLM.setDescription('This trap indicates that a CLLM message was received from the network.')
ibmIROCtrapssys = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 6, 2))
mosMemLow = NotificationType((1, 3, 6, 1, 4, 1, 2, 6, 119, 6, 2) + (0,1)).setObjects(("PROTEON-MIB", "proResMemHeapTotal"), ("PROTEON-MIB", "proResMemHeapNeverAlloc"))
if mibBuilder.loadTexts: mosMemLow.setDescription('This trap indicates that the free heap amount has dropped below a given percentage of the total heap memory available. The default percentage is 10%, however this threshhold can be modified by the user via a patch variable.')
ibmIROCtrapsels = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 6, 3))
elsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2, 6, 119, 6, 3) + (0,2)).setObjects(("PROTEON-MIB", "proElsSubSysEventMsg"))
if mibBuilder.loadTexts: elsTrap.setDescription('When the routing subsystem ELS component is configured to generate SNMP traps, the following trap is generated. It contains a single varBind containing a text string in one of the two following formats. If ELS timestamping is enabled: hr:min:sec subsys_name.event_num: message_text For example - 09:32:56 IP.008: no rte 9.7.1.8 -> 9.7.4.3 dsc If ELS timestamping is disabled: subsys_name.event_num: message_text For example - IP.008: no rte 9.7.1.8 -> 9.7.4.3 dsc NOTE: The following subsystems cannot have their events sent in SNMP traps (ARP, ICMP, UDP, SNMP and IP (excluding IP access control events)). This restriction is due to the fact that these subsystems are involved in sending an SNMP trap and allowing them could cause an infinite loop in the router software.')
mibBuilder.exportSymbols("IBMIROC-MIB", pppMSCHAPInRestrictedHoursFailures=pppMSCHAPInRestrictedHoursFailures, pppMSCHAPOutPasswordExpiredFailures=pppMSCHAPOutPasswordExpiredFailures, ibmSysDumpBuilder=ibmSysDumpBuilder, pppLinkErrUnkProtos=pppLinkErrUnkProtos, frCLLMStatsRcvds=frCLLMStatsRcvds, pppSPAPInAlertAcks=pppSPAPInAlertAcks, pppBAPInCallRejs=pppBAPInCallRejs, ibmIROCswitching=ibmIROCswitching, frTrapStateFECN=frTrapStateFECN, pppLCProtoOutPackets=pppLCProtoOutPackets, pppEAPOutAcks=pppEAPOutAcks, pppLinkErrEntry=pppLinkErrEntry, pppCHAPIfIndex=pppCHAPIfIndex, pppBAPOutCallBackReqs=pppBAPOutCallBackReqs, pppLCProtoInEchoReqs=pppLCProtoInEchoReqs, pppECPOutResetAcks=pppECPOutResetAcks, ibmdlswTConnGroupOperConfigIndex=ibmdlswTConnGroupOperConfigIndex, pppSPAPOutNacks=pppSPAPOutNacks, pppBAPOutDropRejs=pppBAPOutDropRejs, tcpCurrConnections=tcpCurrConnections, pppLCProtoInCNs=pppLCProtoInCNs, pppSPAPInRequests=pppSPAPInRequests, pppPAPOutOctets=pppPAPOutOctets, ibmIROCrmon=ibmIROCrmon, pppEPInCopies=pppEPInCopies, ibmIROCroutinginterface=ibmIROCroutinginterface, pppSPAPOutPleaseAuthenticates=pppSPAPOutPleaseAuthenticates, ibmdlswTConnGroupOperCURexSents=ibmdlswTConnGroupOperCURexSents, frCLLMCauseEntry=frCLLMCauseEntry, ibmdlswTConnGroupOperIndex=ibmdlswTConnGroupOperIndex, pppMPPEOutOctets=pppMPPEOutOctets, pppSPAPOutAlertAcks=pppSPAPOutAlertAcks, pppCHAPOutSuccesses=pppCHAPOutSuccesses, tcpiprouteUnhDirBcast=tcpiprouteUnhDirBcast, pppLinkErrBadCtrls=pppLinkErrBadCtrls, pppSPAPInNacks=pppSPAPInNacks, pppBAPInDropRejs=pppBAPInDropRejs, pppSPAPEntry=pppSPAPEntry, pppMPPEInPackets=pppMPPEInPackets, tcpiprouteBadNet=tcpiprouteBadNet, pppECPPacketDiscards=pppECPPacketDiscards, pppMSCHAPInAccountDisabledFailures=pppMSCHAPInAccountDisabledFailures, ibmdlswTConnGroupOperInCntlPkts=ibmdlswTConnGroupOperInCntlPkts, tcpiprouteOverFlow=tcpiprouteOverFlow, pppBAPInStatFails=pppBAPInStatFails, ibmdlswTConnGroupOperNRexRcvds=ibmdlswTConnGroupOperNRexRcvds, ibmdlswTConnGroupOperInDataPkts=ibmdlswTConnGroupOperInDataPkts, pppLCProtoPreviousState=pppLCProtoPreviousState, pppPAPInPackets=pppPAPInPackets, pppBAPOutCallReqs=pppBAPOutCallReqs, ibmSysDumpFatalMsg5=ibmSysDumpFatalMsg5, pppCCPPacketDiscards=pppCCPPacketDiscards, ibmdlswQllcLsLocalMac=ibmdlswQllcLsLocalMac, pppLinkErrBadAddrs=pppLinkErrBadAddrs, tcpiprouteCacheSize=tcpiprouteCacheSize, ibmIROCroutingvoice=ibmIROCroutingvoice, pppPAPOutNacks=pppPAPOutNacks, pppLCProtoOutCRs=pppLCProtoOutCRs, frCLLMCauseTable=frCLLMCauseTable, pppBAPInCallBackAcks=pppBAPInCallBackAcks, ibmIROChardwareInfo=ibmIROChardwareInfo, pppMPPEEntry=pppMPPEEntry, pppLinkErrTermTOs=pppLinkErrTermTOs, ibmdlswTConnGroupOperNQexSents=ibmdlswTConnGroupOperNQexSents, ibmSysDumpFatalMsg4=ibmSysDumpFatalMsg4, MacAddressNCIROC=MacAddressNCIROC, pppEAPInOctets=pppEAPInOctets, pppMSCHAPInSuccesses=pppMSCHAPInSuccesses, pppECPInResetAcks=pppECPInResetAcks, frSimpleObjs=frSimpleObjs, pppSPAPIfIndex=pppSPAPIfIndex, pppBAPOutCallBackRejs=pppBAPOutCallBackRejs, pppPAPInNacks=pppPAPInNacks, ibmdlswTConnGroupOperCURexRcvds=ibmdlswTConnGroupOperCURexRcvds, frCLLMStatsDlci=frCLLMStatsDlci, pppECPOutResetReqs=pppECPOutResetReqs, pppMSCHAPEntry=pppMSCHAPEntry, frCLLMCauseCode=frCLLMCauseCode, pppLCProtoOutOctets=pppLCProtoOutOctets, pppMPPEOutPackets=pppMPPEOutPackets, ibmIROCconfig=ibmIROCconfig, pppCPOutInCompressablePkts=pppCPOutInCompressablePkts, pppCCPInDictResets=pppCCPInDictResets, ibmIROCadminDebug=ibmIROCadminDebug, pppLCProtoTable=pppLCProtoTable, ibmCacheServer=ibmCacheServer, pppMSCHAPInPasswordExpiredFailures=pppMSCHAPInPasswordExpiredFailures, ibm=ibm, ibmIROCsystem=ibmIROCsystem, pppCCPOutResetReqs=pppCCPOutResetReqs, pppEAPOutPackets=pppEAPOutPackets, pppProtocolCtlOutPkts=pppProtocolCtlOutPkts, ibmIROCfrBRS=ibmIROCfrBRS, pppLCProtoOutResetAcks=pppLCProtoOutResetAcks, pppECPOutDictResets=pppECPOutDictResets, pppBAPOutDropReqs=pppBAPOutDropReqs, pppSPAPOutChangePasswords=pppSPAPOutChangePasswords, frCLLMStatsEntry=frCLLMStatsEntry, pppEPOutDestroyeds=pppEPOutDestroyeds, frTrapStateBECN=frTrapStateBECN, pppBAPOutCallBackAcks=pppBAPOutCallBackAcks, ibmBANMIB=ibmBANMIB, pppLinkErrLastBadCtrl=pppLinkErrLastBadCtrl, pppMSCHAPInPackets=pppMSCHAPInPackets, pppCHAPOutOctets=pppCHAPOutOctets, ibmdlswTConnGroupOperOutDataOctets=ibmdlswTConnGroupOperOutDataOctets, pppBAPInCallBackReqs=pppBAPInCallBackReqs, ibmIROCroutingppp=ibmIROCroutingppp, ibmdlswTConnGroupOperICRexRcvds=ibmdlswTConnGroupOperICRexRcvds, pppMSCHAPInResponses=pppMSCHAPInResponses, pppProtocolDataInOctets=pppProtocolDataInOctets, pppPAPEntry=pppPAPEntry, pppEPEntry=pppEPEntry, serverMaxConnections=serverMaxConnections, pppLCProtoInCAs=pppLCProtoInCAs, ibmSysDumpRetainName=ibmSysDumpRetainName, pppEAPTable=pppEAPTable, pppBAPOutStatFails=pppBAPOutStatFails, pppProtocolId=pppProtocolId, pppLCProtoState=pppLCProtoState, pppCBCPInOctets=pppCBCPInOctets, pppProtocolTable=pppProtocolTable, pppCPInDestroyeds=pppCPInDestroyeds, ibmIROCconfigAuth=ibmIROCconfigAuth, ibmSysDumpBuild=ibmSysDumpBuild, pppCPEntry=pppCPEntry, pppECPInResetReqs=pppECPInResetReqs, pppPAPInAcks=pppPAPInAcks, ibmdlswQllcLsIdNum=ibmdlswQllcLsIdNum, pppBAPInCallAcks=pppBAPInCallAcks, pppMSCHAPOutResponses=pppMSCHAPOutResponses, pppCCPOutResetAcks=pppCCPOutResetAcks, ibmSysDumpIndex=ibmSysDumpIndex, pppLCProtoInTimeRemains=pppLCProtoInTimeRemains, pppCCPOctetDiscards=pppCCPOctetDiscards, pppMSCHAPInChangePasswords=pppMSCHAPInChangePasswords, pppMSCHAPOutChangePasswordFailures=pppMSCHAPOutChangePasswordFailures, ibmSysDumpEntry=ibmSysDumpEntry, ibmSysDumpRemoteIPAddr=ibmSysDumpRemoteIPAddr, pppBAPOutDropNaks=pppBAPOutDropNaks, pppBAPOutCallAcks=pppBAPOutCallAcks, frCLLMDlciList=frCLLMDlciList, pppPAPOutRequests=pppPAPOutRequests, pppCPInCompressedOctets=pppCPInCompressedOctets, pppLCProtoInPackets=pppLCProtoInPackets, ibmdlswTConnGroupOperNQexRcvds=ibmdlswTConnGroupOperNQexRcvds, tcpiprouteTabSize=tcpiprouteTabSize, pppMSCHAPInAuthenticationFailures=pppMSCHAPInAuthenticationFailures, pppLCProtoInIdents=pppLCProtoInIdents, pppSPAPOutAcks=pppSPAPOutAcks, pppEAPOutNaks=pppEAPOutNaks, pppProtocolState=pppProtocolState, pppBAPInCallReqs=pppBAPInCallReqs, pppEPInDestroyeds=pppEPInDestroyeds, pppEPTable=pppEPTable, pppLCProtoInDiscReqs=pppLCProtoInDiscReqs, pppLCProtoOutTAs=pppLCProtoOutTAs, pppLCProtoOutIdents=pppLCProtoOutIdents, pppMPPETable=pppMPPETable, pppLCProtoInOctets=pppLCProtoInOctets, ibmIROCadminproducts=ibmIROCadminproducts, pppLCProtoInCodeRejs=pppLCProtoInCodeRejs, pppCBCPIfIndex=pppCBCPIfIndex, pppPAPInOctets=pppPAPInOctets, ibmdlswQllcLsPuType=ibmdlswQllcLsPuType, ibmdlswQllcLsRemoteMac=ibmdlswQllcLsRemoteMac, ibmdlswQllcLsRemoteSap=ibmdlswQllcLsRemoteSap, ibmSysDumpRemotePath=ibmSysDumpRemotePath, ibmIROCroutingtcpip=ibmIROCroutingtcpip, ibmSysDumpTable=ibmSysDumpTable, pppSPAPInAlerts=pppSPAPInAlerts, pppPAPIfIndex=pppPAPIfIndex, pppLCProtoInCRs=pppLCProtoInCRs, tcpMaxConnections=tcpMaxConnections, pppProtocolCtlInRejects=pppProtocolCtlInRejects, pppBAPTable=pppBAPTable, frrcvdBECN=frrcvdBECN, tcpiprouteNoReach=tcpiprouteNoReach, platformType=platformType, ibmdlswQllcLsChannel=ibmdlswQllcLsChannel, pppLCProtoLastTimeChange=pppLCProtoLastTimeChange, pppBAPInDropNaks=pppBAPInDropNaks, pppCPOutCompressedOctets=pppCPOutCompressedOctets, pppCCPInResetReqs=pppCCPInResetReqs, pppLCProtoInTRs=pppLCProtoInTRs, ibmIROCescon=ibmIROCescon, pppBAPIfIndex=pppBAPIfIndex, pppBAPOutCallBackNaks=pppBAPOutCallBackNaks, pppLinkErrLastUnkProto=pppLinkErrLastUnkProto, ibmdlswTConnGroupOperOutCntlPkts=ibmdlswTConnGroupOperOutCntlPkts, ibmIROCtrapssys=ibmIROCtrapssys, tcpiprouteTabUsed=tcpiprouteTabUsed, pppLinkErrInvProtos=pppLinkErrInvProtos, pppMSCHAPOutOctets=pppMSCHAPOutOctets, ibmIROCroutingDialOut=ibmIROCroutingDialOut, pppMSCHAPInChangePasswordFailures=pppMSCHAPInChangePasswordFailures, pppBAPOutStatSuccs=pppBAPOutStatSuccs, ibmWanRestoralRerouteMIB=ibmWanRestoralRerouteMIB, pppBAPInDropReqs=pppBAPInDropReqs, ibmdlswTConnGroupOperICRexSents=ibmdlswTConnGroupOperICRexSents, pppCPInCopies=pppCPInCopies, ibmdlswQllcLsBlkNum=ibmdlswQllcLsBlkNum, pppSPAPInPleaseAuthenticates=pppSPAPInPleaseAuthenticates, tcpiprouteMultRcvd=tcpiprouteMultRcvd, pppSPAPInDialbacks=pppSPAPInDialbacks, ibmProd=ibmProd, tcpiprouteBadSubnet=tcpiprouteBadSubnet, pppCPInInCompressablePkts=pppCPInInCompressablePkts, pppProtocolLastTimeChange=pppProtocolLastTimeChange, ibmIROCroutingIpSec=ibmIROCroutingIpSec, pppCHAPInOctets=pppCHAPInOctets, platformFLASHSize=platformFLASHSize, pppBAPOutDropAcks=pppBAPOutDropAcks, platformDRAMSize=platformDRAMSize, pppBAPInCallNaks=pppBAPInCallNaks, pppMSCHAPOutPackets=pppMSCHAPOutPackets, ibmIROCroutingl2tp=ibmIROCroutingl2tp, pppBAPInCallBackNaks=pppBAPInCallBackNaks, pppEAPInAcks=pppEAPInAcks, ibmSysDumpProductNumber=ibmSysDumpProductNumber, pppSPAPTable=pppSPAPTable, pppCHAPOutFailures=pppCHAPOutFailures, ibmIROCadmin=ibmIROCadmin, pppSPAPInPackets=pppSPAPInPackets, pppEAPInRequests=pppEAPInRequests, pppMSCHAPOutAccountDisabledFailures=pppMSCHAPOutAccountDisabledFailures, pppSPAPOutDialbacks=pppSPAPOutDialbacks, pppLCProtoOutCAs=pppLCProtoOutCAs, pppMSCHAPOutRestrictedHoursFailures=pppMSCHAPOutRestrictedHoursFailures, pppProtocolCtlInOctets=pppProtocolCtlInOctets, pppLinkErrLastInvProto=pppLinkErrLastInvProto, pppCHAPOutPackets=pppCHAPOutPackets, pppLCProtoOutCodeRejs=pppLCProtoOutCodeRejs, ibmdlswQllcLsTable=ibmdlswQllcLsTable, ibmIROCsystemInfo=ibmIROCsystemInfo, pppMPPEInDestroyed=pppMPPEInDestroyed, pppMSCHAPIfIndex=pppMSCHAPIfIndex, pppCHAPInSuccesses=pppCHAPInSuccesses, ibmIROCSnmpAuthFail=ibmIROCSnmpAuthFail, pppProtocolRegistered=pppProtocolRegistered, pppPAPInRequests=pppPAPInRequests, pppLCProtoOutCNs=pppLCProtoOutCNs, pppBAPInDropAcks=pppBAPInDropAcks, pppEAPOutOctets=pppEAPOutOctets, pppBAPOutCallNaks=pppBAPOutCallNaks, pppCPIfIndex=pppCPIfIndex, ibmdlswQllcLsLocalSap=ibmdlswQllcLsLocalSap, pppMSCHAPOutChallenges=pppMSCHAPOutChallenges, pppLCProtoOutDiscReqs=pppLCProtoOutDiscReqs, tcpiprouteDiscFilt=tcpiprouteDiscFilt, pppEPOutCopies=pppEPOutCopies, pppLCProtoOutTRs=pppLCProtoOutTRs, pppPAPOutAcks=pppPAPOutAcks, authTrapSourceIPAddr=authTrapSourceIPAddr)
mibBuilder.exportSymbols("IBMIROC-MIB", pppCBCPSuccess=pppCBCPSuccess, ibmIROCswhw=ibmIROCswhw, pppEPOutEncryptedOctets=pppEPOutEncryptedOctets, pppCBCPEntry=pppCBCPEntry, ibmIROCdumpInfo=ibmIROCdumpInfo, pppSPAPOutAlerts=pppSPAPOutAlerts, pppCCPOutDictResets=pppCCPOutDictResets, pppMSCHAPOutAuthenticationFailures=pppMSCHAPOutAuthenticationFailures, pppCCPInResetAcks=pppCCPInResetAcks, platformFeatureSlot=platformFeatureSlot, pppProtocolIfIndex=pppProtocolIfIndex, ibmdlswQllcLsQaddress=ibmdlswQllcLsQaddress, platformNVRAMSize=platformNVRAMSize, pppLCProtoOutTimeRemains=pppLCProtoOutTimeRemains, pppMSCHAPInChallenges=pppMSCHAPInChallenges, pppMSCHAPOutNoPermissionFailures=pppMSCHAPOutNoPermissionFailures, ibmSysDumpFatalMsg3=ibmSysDumpFatalMsg3, frrcvdCLLM=frrcvdCLLM, pppCHAPInFailures=pppCHAPInFailures, frrcvdFECN=frrcvdFECN, pppCHAPTable=pppCHAPTable, pppECPInDictResets=pppECPInDictResets, ibmSysDumpBuildName=ibmSysDumpBuildName, tcpiprouteCacheUsed=tcpiprouteCacheUsed, ibmSysDumpFileDate=ibmSysDumpFileDate, ibmIROCfrcircuit=ibmIROCfrcircuit, ibmIROCroutingfr=ibmIROCroutingfr, ibmIROC=ibmIROC, pppLCProtoInRejects=pppLCProtoInRejects, pppEPInEncryptedOctets=pppEPInEncryptedOctets, pppSPAPInChangePasswords=pppSPAPInChangePasswords, pppProtocolPreviousState=pppProtocolPreviousState, ibmdlswQllcLsQdomain=ibmdlswQllcLsQdomain, ibmIROCroutingdlsw=ibmIROCroutingdlsw, pppLCProtoOutEchoReqs=pppLCProtoOutEchoReqs, pppMSCHAPInOctets=pppMSCHAPInOctets, pppMPPEInOctets=pppMPPEInOctets, ibmIROCtrapsfr=ibmIROCtrapsfr, pppEAPEntry=pppEAPEntry, pppBAPInCallBackRejs=pppBAPInCallBackRejs, pppCPTable=pppCPTable, pppLCProtoIfIndex=pppLCProtoIfIndex, pppCBCPOutOctets=pppCBCPOutOctets, ibmIROCrouting=ibmIROCrouting, pppCBCPOutPackets=pppCBCPOutPackets, pppMPPEOutDestroyed=pppMPPEOutDestroyed, pppProtocolDataInPkts=pppProtocolDataInPkts, ibmSysDumpFatalMsg2=ibmSysDumpFatalMsg2, mosMemLow=mosMemLow, pppProtocolCtlInPkts=pppProtocolCtlInPkts, pppCHAPInChallenges=pppCHAPInChallenges, pppProtocolDataOutPkts=pppProtocolDataOutPkts, pppMSCHAPInNoPermissionFailures=pppMSCHAPInNoPermissionFailures, frCLLMCauseIfIndex=frCLLMCauseIfIndex, ibmIROChardware=ibmIROChardware, ibmdlswTConnGroupOperOutDataPkts=ibmdlswTConnGroupOperOutDataPkts, pppProtocolDataOutOctets=pppProtocolDataOutOctets, pppBAPInStatSuccs=pppBAPInStatSuccs, pppBAPOutCallRejs=pppBAPOutCallRejs, pppEPIfIndex=pppEPIfIndex, pppMSCHAPInFailures=pppMSCHAPInFailures, ibmdlswTConnGroupOperNRexSents=ibmdlswTConnGroupOperNRexSents, ibmIROCcfgInfo=ibmIROCcfgInfo, pppEAPIfIndex=pppEAPIfIndex, pppLCProtoInCRejs=pppLCProtoInCRejs, ibmdlswTConnGroupOperRole=ibmdlswTConnGroupOperRole, ibmIROCVPNpolicy=ibmIROCVPNpolicy, tcpiprouteUnhLLbcast=tcpiprouteUnhLLbcast, pppLCProtoOutCRejs=pppLCProtoOutCRejs, pppMSCHAPTable=pppMSCHAPTable, elsTrap=elsTrap, pppLinkErrLastBadAddr=pppLinkErrLastBadAddr, pppCHAPOutChallenges=pppCHAPOutChallenges, pppCBCPTable=pppCBCPTable, ibmdlswTConnGroupOperInDataOctets=ibmdlswTConnGroupOperInDataOctets, ibmdlswTConnGroupOperTable=ibmdlswTConnGroupOperTable, pppSPAPInOctets=pppSPAPInOctets, pppSPAPOutRequests=pppSPAPOutRequests, pppCHAPOutResponses=pppCHAPOutResponses, ibmIROCadminOID=ibmIROCadminOID, pppLCProtoInResetReqs=pppLCProtoInResetReqs, pppBAPEntry=pppBAPEntry, pppCBCPAttempts=pppCBCPAttempts, serverCurrConnections=serverCurrConnections, frCLLMStatsTable=frCLLMStatsTable, pppEAPInNaks=pppEAPInNaks, pppLinkErrIfIndex=pppLinkErrIfIndex, pppLCProtoOutResetReqs=pppLCProtoOutResetReqs, frTrapStateCLLM=frTrapStateCLLM, ibmIROCadminSnmp=ibmIROCadminSnmp, pppMSCHAPOutSuccesses=pppMSCHAPOutSuccesses, pppEAPOutRequests=pppEAPOutRequests, ibmdlswTConnGroupOperJoinTime=ibmdlswTConnGroupOperJoinTime, ibmdlswTConnGroupOperEntry=ibmdlswTConnGroupOperEntry, ibmIROCroutingtn3270e=ibmIROCroutingtn3270e, pppCHAPInResponses=pppCHAPInResponses, tcpiprouteUnhBcast=tcpiprouteUnhBcast, pppLCProtoOutEchoReps=pppLCProtoOutEchoReps, agentMemUse=agentMemUse, ibmIROCroutingRlan=ibmIROCroutingRlan, pppLCProtoInResetAcks=pppLCProtoInResetAcks, pppLCProtoInTAs=pppLCProtoInTAs, pppLinkErrTable=pppLinkErrTable, ibmIROCAgentDebug=ibmIROCAgentDebug, frCLLMStatsIfIndex=frCLLMStatsIfIndex, ibmIROCtraps=ibmIROCtraps, ibmSysDumpFatalMsg1=ibmSysDumpFatalMsg1, pppPAPTable=pppPAPTable, pppCPOutCopies=pppCPOutCopies, pppSPAPInAcks=pppSPAPInAcks, pppMSCHAPOutFailures=pppMSCHAPOutFailures, pppProtocolDataInRejects=pppProtocolDataInRejects, pppSPAPOutPackets=pppSPAPOutPackets, pppCPOutDestroyeds=pppCPOutDestroyeds, pppLinkErrConfigTOs=pppLinkErrConfigTOs, ibmdlswQllcLsEntry=ibmdlswQllcLsEntry, pppCHAPEntry=pppCHAPEntry, pppEAPInPackets=pppEAPInPackets, ibmSysDumpBuildDate=ibmSysDumpBuildDate, ibmdlswQllcLsIfIndex=ibmdlswQllcLsIfIndex, tcpiprouteUnhMcast=tcpiprouteUnhMcast, pppSPAPOutOctets=pppSPAPOutOctets, pppMSCHAPOutChangePasswords=pppMSCHAPOutChangePasswords, pppMPPEIfIndex=pppMPPEIfIndex, pppProtocolCtlOutOctets=pppProtocolCtlOutOctets, pppLCProtoInEchoReps=pppLCProtoInEchoReps, ibmIROCconfigWrite=ibmIROCconfigWrite, pppLCProtoEntry=pppLCProtoEntry, pppCBCPInPackets=pppCBCPInPackets, pppCHAPInPackets=pppCHAPInPackets, ibmIROCtrapsels=ibmIROCtrapsels, ibmSysDumpFileName=ibmSysDumpFileName, pppECPOctetDiscards=pppECPOctetDiscards, pppProtocolEntry=pppProtocolEntry, pppPAPOutPackets=pppPAPOutPackets)
