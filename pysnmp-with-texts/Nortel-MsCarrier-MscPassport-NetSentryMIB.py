#
# PySNMP MIB module Nortel-MsCarrier-MscPassport-NetSentryMIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Nortel-MsCarrier-MscPassport-NetSentryMIB
# Produced by pysmi-0.3.4 at Wed May  1 14:30:59 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint")
RowStatus, StorageType, DisplayString, Integer32, Counter32 = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-StandardTextualConventionsMIB", "RowStatus", "StorageType", "DisplayString", "Integer32", "Counter32")
AsciiString, AsciiStringIndex, NonReplicated = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-TextualConventionsMIB", "AsciiString", "AsciiStringIndex", "NonReplicated")
mscPassportMIBs, = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-UsefulDefinitionsMIB", "mscPassportMIBs")
mscVrIndex, mscVr = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex", "mscVr")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibIdentifier, iso, Bits, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, NotificationType, ObjectIdentity, Integer32, TimeTicks, Counter64, Unsigned32, Gauge32, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "iso", "Bits", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "NotificationType", "ObjectIdentity", "Integer32", "TimeTicks", "Counter64", "Unsigned32", "Gauge32", "ModuleIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
netSentryMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 31))
mscVrNs = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4))
mscVrNsRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 1), )
if mibBuilder.loadTexts: mscVrNsRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsRowStatusTable.setDescription('This entry controls the addition and deletion of mscVrNs components.')
mscVrNsRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex"), (0, "Nortel-MsCarrier-MscPassport-NetSentryMIB", "mscVrNsIndex"))
if mibBuilder.loadTexts: mscVrNsRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsRowStatusEntry.setDescription('A single entry in the table represents a single mscVrNs component.')
mscVrNsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVrNsRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscVrNs components. These components can be added and deleted.')
mscVrNsComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrNsComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscVrNsStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrNsStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsStorageType.setDescription('This variable represents the storage type value for the mscVrNs tables.')
mscVrNsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscVrNsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsIndex.setDescription('This variable represents the index for the mscVrNs tables.')
mscVrNsProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 100), )
if mibBuilder.loadTexts: mscVrNsProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsProvTable.setDescription('This contains the global NetSentry control flags.')
mscVrNsProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 100, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex"), (0, "Nortel-MsCarrier-MscPassport-NetSentryMIB", "mscVrNsIndex"))
if mibBuilder.loadTexts: mscVrNsProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsProvEntry.setDescription('An entry in the mscVrNsProvTable.')
mscVrNsDropConditions = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 100, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVrNsDropConditions.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsDropConditions.setDescription('This attribute controls under what circumstances NetSentry drops packets. It is possible for NetSentry to drop packets when: There is no memory to contain statistics for this packet (statsNoMem), it is for whatever reason impossible to clone, copy, or log a copy of the packet via the clone_to copy_to or log_to actions respectively (cantCloneTo, cantCopyTo and cantLogTo), and if the packet encounters a filter which is provisioned at a filter point within a protocol component, but not defined in any of the files defined by File components within NetSentry (this is a Null filter). Description of bits: statsNoMem(0) cantCloneTo(1) cantLogTo(2) cantCopyTo(3) cantMacCloneTo(4) nullFilter(5)')
mscVrNsStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 101), )
if mibBuilder.loadTexts: mscVrNsStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsStatsTable.setDescription('This contains the global NetSentry (in particular, non-protocol specific) statistics.')
mscVrNsStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 101, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex"), (0, "Nortel-MsCarrier-MscPassport-NetSentryMIB", "mscVrNsIndex"))
if mibBuilder.loadTexts: mscVrNsStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsStatsEntry.setDescription('An entry in the mscVrNsStatsTable.')
mscVrNsPacketsProcessed = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 101, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrNsPacketsProcessed.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsPacketsProcessed.setDescription('This attribute counts the total number of packets processed through NetSentry. This counter will wrap around to zero when it exceeds its maximum value, 4294967295.')
mscVrNsPacketsFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 101, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrNsPacketsFailed.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsPacketsFailed.setDescription('This attribute counts the total number of packets processed through NetSentry which ended with a fail disposition. This counter will wrap around to zero when it exceeds its maximum value, 4294967295.')
mscVrNsStatsNoMem = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 101, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrNsStatsNoMem.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsStatsNoMem.setDescription('This attribute counts the total number of packets processed through NetSentry for which statistic should have been gathered, but for which statistics were not gathered due to a failure to allocate memory. Such packets may or may not be dropped according to the values provisioned in dropConditions under the NetSentry component. If this attribute is being incremented, the system is suffering from memory shortfalls, and some operator action is advised. Perhaps memory allocations should be re-provisioned, NetSentry statistics gathering should be reduced, or NetSentry statistics tables should be cleared to temporarily free memory. This counter will wrap around to zero when it exceeds its maximum value, 4294967295.')
mscVrNsHsaOkayFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 101, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrNsHsaOkayFailed.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsHsaOkayFailed.setDescription('This attribute counts the total number of packets processed through NetSentry which encountered, and did not match, an hsa_okay pattern. Such packets are likely to be generated from misconfigured hosts. Some operator action to track down these hosts is advised. This counter will wrap around to zero should it ever exceed its maximum value, 4294967295.')
mscVrNsDepthExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 101, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrNsDepthExceeded.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsDepthExceeded.setDescription('This attribute counts the total number of times a NetSentry filter was executed which referenced too many layers of indirect filters. If this count is non-zero, the filter definitions the unit is using are incorrect, and some operator action to track down the erroneous filter definitions is advised. Filters will not be behaving correctly if this counter is increasing, and security could be compromised. This count should always be zero, and it will wrap around to zero should it ever exceed its maximum value of 4294967295.')
mscVrNsDroppedStatsNoMem = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 101, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrNsDroppedStatsNoMem.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsDroppedStatsNoMem.setDescription('This counts the total number of packets that were actually dropped due to an inability to allocate memory to hold statistics for the packet. Such a packet must have had a NetSentry statistics gathering action applied to it, in order for the attempt to gather statistics to be made, and the dropConditions attribute must include the statsNoMem value.')
mscVrNsDroppedCantCloneTo = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 101, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrNsDroppedCantCloneTo.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsDroppedCantCloneTo.setDescription('This counts the total number of packets that were dropped due to the failure of a clone_to action applied to the packet. This counter will only increment if the dropConditions attribute includes the cantCloneTo value.')
mscVrNsDroppedCantLogTo = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 101, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrNsDroppedCantLogTo.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsDroppedCantLogTo.setDescription('This counts the total number of packets that were dropped due to the failure of a log_to action applied to the packet. This counter will only increment if the dropConditions attribute includes the cantLogTo value.')
mscVrNsDroppedCantCopyTo = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 101, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrNsDroppedCantCopyTo.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsDroppedCantCopyTo.setDescription('This counts the total number of packets that were dropped due to the failure of a copy_to action applied to the packet. This counter will only increment if the dropConditions attribute includes the cantCopyTo value.')
mscVrNsDroppedNullFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 101, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrNsDroppedNullFilter.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsDroppedNullFilter.setDescription('This counts the total number of packets that were dropped because the packet passed through a filter point into which was provisioned a filter which was never defined in a file loaded into NetSentry. Such filter points have atached to the the so-call Null Filter, which will either succeed or fail all packets passing through it, depending on whether or not the dropConditions attribute includes the nullFilter value.')
mscVrNsFile = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 2))
mscVrNsFileRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 2, 1), )
if mibBuilder.loadTexts: mscVrNsFileRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsFileRowStatusTable.setDescription('This entry controls the addition and deletion of mscVrNsFile components.')
mscVrNsFileRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex"), (0, "Nortel-MsCarrier-MscPassport-NetSentryMIB", "mscVrNsIndex"), (0, "Nortel-MsCarrier-MscPassport-NetSentryMIB", "mscVrNsFileIndex"))
if mibBuilder.loadTexts: mscVrNsFileRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsFileRowStatusEntry.setDescription('A single entry in the table represents a single mscVrNsFile component.')
mscVrNsFileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 2, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVrNsFileRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsFileRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscVrNsFile components. These components can be added and deleted.')
mscVrNsFileComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrNsFileComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsFileComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscVrNsFileStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrNsFileStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsFileStorageType.setDescription('This variable represents the storage type value for the mscVrNsFile tables.')
mscVrNsFileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 2, 1, 1, 10), AsciiStringIndex().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: mscVrNsFileIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsFileIndex.setDescription('This variable represents the index for the mscVrNsFile tables.')
mscVrNsFileOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 2, 10), )
if mibBuilder.loadTexts: mscVrNsFileOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsFileOperTable.setDescription('This holds hold a single compiler error message.')
mscVrNsFileOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 2, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex"), (0, "Nortel-MsCarrier-MscPassport-NetSentryMIB", "mscVrNsIndex"), (0, "Nortel-MsCarrier-MscPassport-NetSentryMIB", "mscVrNsFileIndex"))
if mibBuilder.loadTexts: mscVrNsFileOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsFileOperEntry.setDescription('An entry in the mscVrNsFileOperTable.')
mscVrNsFileCompilerErrorMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 2, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(1, 80)).clone(hexValue="4e6f204572726f72")).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrNsFileCompilerErrorMsg.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsFileCompilerErrorMsg.setDescription('This attribute contains a single string holding the compiler error which caused the compile to fail. In the event that the file is recompiled (using the RELoad verb), the value of this will change, to reflect the new error, if any was encountered, or no error, if the compile was successful.')
mscVrNsEngine = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 3))
mscVrNsEngineRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 3, 1), )
if mibBuilder.loadTexts: mscVrNsEngineRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsEngineRowStatusTable.setDescription('This entry controls the addition and deletion of mscVrNsEngine components.')
mscVrNsEngineRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 3, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex"), (0, "Nortel-MsCarrier-MscPassport-NetSentryMIB", "mscVrNsIndex"), (0, "Nortel-MsCarrier-MscPassport-NetSentryMIB", "mscVrNsEngineIndex"))
if mibBuilder.loadTexts: mscVrNsEngineRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsEngineRowStatusEntry.setDescription('A single entry in the table represents a single mscVrNsEngine component.')
mscVrNsEngineRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 3, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVrNsEngineRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsEngineRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscVrNsEngine components. These components can be added and deleted.')
mscVrNsEngineComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrNsEngineComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsEngineComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscVrNsEngineStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrNsEngineStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsEngineStorageType.setDescription('This variable represents the storage type value for the mscVrNsEngine tables.')
mscVrNsEngineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)))
if mibBuilder.loadTexts: mscVrNsEngineIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsEngineIndex.setDescription('This variable represents the index for the mscVrNsEngine tables.')
mscVrNsIPStats = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 4))
mscVrNsIPStatsRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 4, 1), )
if mibBuilder.loadTexts: mscVrNsIPStatsRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsIPStatsRowStatusTable.setDescription('This entry controls the addition and deletion of mscVrNsIPStats components.')
mscVrNsIPStatsRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 4, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex"), (0, "Nortel-MsCarrier-MscPassport-NetSentryMIB", "mscVrNsIndex"), (0, "Nortel-MsCarrier-MscPassport-NetSentryMIB", "mscVrNsIPStatsIndex"))
if mibBuilder.loadTexts: mscVrNsIPStatsRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsIPStatsRowStatusEntry.setDescription('A single entry in the table represents a single mscVrNsIPStats component.')
mscVrNsIPStatsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 4, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVrNsIPStatsRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsIPStatsRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscVrNsIPStats components. These components can be added and deleted.')
mscVrNsIPStatsComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrNsIPStatsComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsIPStatsComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscVrNsIPStatsStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 4, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrNsIPStatsStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsIPStatsStorageType.setDescription('This variable represents the storage type value for the mscVrNsIPStats tables.')
mscVrNsIPStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 4, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscVrNsIPStatsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsIPStatsIndex.setDescription('This variable represents the index for the mscVrNsIPStats tables.')
mscVrNsIPStatsAddrStat = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 4, 2))
mscVrNsIPStatsAddrStatRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 4, 2, 1), )
if mibBuilder.loadTexts: mscVrNsIPStatsAddrStatRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsIPStatsAddrStatRowStatusTable.setDescription('*** THIS TABLE CURRENTLY NOT IMPLEMENTED *** This entry controls the addition and deletion of mscVrNsIPStatsAddrStat components.')
mscVrNsIPStatsAddrStatRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 4, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex"), (0, "Nortel-MsCarrier-MscPassport-NetSentryMIB", "mscVrNsIndex"), (0, "Nortel-MsCarrier-MscPassport-NetSentryMIB", "mscVrNsIPStatsIndex"), (0, "Nortel-MsCarrier-MscPassport-NetSentryMIB", "mscVrNsIPStatsAddrStatSourceAddressIndex"), (0, "Nortel-MsCarrier-MscPassport-NetSentryMIB", "mscVrNsIPStatsAddrStatDestinationAddressIndex"))
if mibBuilder.loadTexts: mscVrNsIPStatsAddrStatRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsIPStatsAddrStatRowStatusEntry.setDescription('A single entry in the table represents a single mscVrNsIPStatsAddrStat component.')
mscVrNsIPStatsAddrStatRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 4, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrNsIPStatsAddrStatRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsIPStatsAddrStatRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscVrNsIPStatsAddrStat components. These components cannot be added nor deleted.')
mscVrNsIPStatsAddrStatComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 4, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrNsIPStatsAddrStatComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsIPStatsAddrStatComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscVrNsIPStatsAddrStatStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 4, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrNsIPStatsAddrStatStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsIPStatsAddrStatStorageType.setDescription('This variable represents the storage type value for the mscVrNsIPStatsAddrStat tables.')
mscVrNsIPStatsAddrStatSourceAddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 4, 2, 1, 1, 10), AsciiStringIndex().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: mscVrNsIPStatsAddrStatSourceAddressIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsIPStatsAddrStatSourceAddressIndex.setDescription('This variable represents an index for the mscVrNsIPStatsAddrStat tables.')
mscVrNsIPStatsAddrStatDestinationAddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 4, 2, 1, 1, 11), AsciiStringIndex().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: mscVrNsIPStatsAddrStatDestinationAddressIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsIPStatsAddrStatDestinationAddressIndex.setDescription('This variable represents an index for the mscVrNsIPStatsAddrStat tables.')
mscVrNsIPStatsAddrStatStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 4, 2, 10), )
if mibBuilder.loadTexts: mscVrNsIPStatsAddrStatStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsIPStatsAddrStatStatsTable.setDescription('*** THIS TABLE CURRENTLY NOT IMPLEMENTED *** This is the basic statistic used throughout NetSentry by-protocol statistics gathering. It contains counters for total packets, total octets in packets, and two user counters, counter_1 and counter_2.')
mscVrNsIPStatsAddrStatStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 4, 2, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex"), (0, "Nortel-MsCarrier-MscPassport-NetSentryMIB", "mscVrNsIndex"), (0, "Nortel-MsCarrier-MscPassport-NetSentryMIB", "mscVrNsIPStatsIndex"), (0, "Nortel-MsCarrier-MscPassport-NetSentryMIB", "mscVrNsIPStatsAddrStatSourceAddressIndex"), (0, "Nortel-MsCarrier-MscPassport-NetSentryMIB", "mscVrNsIPStatsAddrStatDestinationAddressIndex"))
if mibBuilder.loadTexts: mscVrNsIPStatsAddrStatStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsIPStatsAddrStatStatsEntry.setDescription('An entry in the mscVrNsIPStatsAddrStatStatsTable.')
mscVrNsIPStatsAddrStatPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 4, 2, 10, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrNsIPStatsAddrStatPacketCount.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsIPStatsAddrStatPacketCount.setDescription('This is the number of packets which caused the enclosing Statistics group to to be incremented. This counter will wrap around to zero when it exceeds its maximum value, 4294967295.')
mscVrNsIPStatsAddrStatByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 4, 2, 10, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrNsIPStatsAddrStatByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsIPStatsAddrStatByteCount.setDescription('This is the number of bytes in all the packets which caused the enclosing Statistics group to be incremented. This counter will wrap around to zero when it exceeds its maximum value, 4294967295.')
mscVrNsIPStatsAddrStatCounter1 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 4, 2, 10, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrNsIPStatsAddrStatCounter1.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsIPStatsAddrStatCounter1.setDescription('This is the number of times a packet caused a counter_1 action to be applied with reference to the enclosing Statistics group. This counter will wrap around to zero when it exceeds its maximum value, 4294967295.')
mscVrNsIPStatsAddrStatCounter2 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 4, 2, 10, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrNsIPStatsAddrStatCounter2.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsIPStatsAddrStatCounter2.setDescription('This is the number of times a packet caused a counter_2 action to be applied with reference to the enclosing Statistics group. This counter will wrap around to zero when it exceeds its maximum value, 4294967295.')
mscVrNsIPXStats = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 5))
mscVrNsIPXStatsRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 5, 1), )
if mibBuilder.loadTexts: mscVrNsIPXStatsRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsIPXStatsRowStatusTable.setDescription('This entry controls the addition and deletion of mscVrNsIPXStats components.')
mscVrNsIPXStatsRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 5, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex"), (0, "Nortel-MsCarrier-MscPassport-NetSentryMIB", "mscVrNsIndex"), (0, "Nortel-MsCarrier-MscPassport-NetSentryMIB", "mscVrNsIPXStatsIndex"))
if mibBuilder.loadTexts: mscVrNsIPXStatsRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsIPXStatsRowStatusEntry.setDescription('A single entry in the table represents a single mscVrNsIPXStats component.')
mscVrNsIPXStatsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 5, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVrNsIPXStatsRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsIPXStatsRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscVrNsIPXStats components. These components can be added and deleted.')
mscVrNsIPXStatsComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrNsIPXStatsComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsIPXStatsComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscVrNsIPXStatsStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 5, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrNsIPXStatsStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsIPXStatsStorageType.setDescription('This variable represents the storage type value for the mscVrNsIPXStats tables.')
mscVrNsIPXStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 5, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscVrNsIPXStatsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsIPXStatsIndex.setDescription('This variable represents the index for the mscVrNsIPXStats tables.')
mscVrNsIPXStatsAddrStat = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 5, 2))
mscVrNsIPXStatsAddrStatRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 5, 2, 1), )
if mibBuilder.loadTexts: mscVrNsIPXStatsAddrStatRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsIPXStatsAddrStatRowStatusTable.setDescription('*** THIS TABLE CURRENTLY NOT IMPLEMENTED *** This entry controls the addition and deletion of mscVrNsIPXStatsAddrStat components.')
mscVrNsIPXStatsAddrStatRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 5, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex"), (0, "Nortel-MsCarrier-MscPassport-NetSentryMIB", "mscVrNsIndex"), (0, "Nortel-MsCarrier-MscPassport-NetSentryMIB", "mscVrNsIPXStatsIndex"), (0, "Nortel-MsCarrier-MscPassport-NetSentryMIB", "mscVrNsIPXStatsAddrStatSourceAddressIndex"), (0, "Nortel-MsCarrier-MscPassport-NetSentryMIB", "mscVrNsIPXStatsAddrStatDestinationAddressIndex"))
if mibBuilder.loadTexts: mscVrNsIPXStatsAddrStatRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsIPXStatsAddrStatRowStatusEntry.setDescription('A single entry in the table represents a single mscVrNsIPXStatsAddrStat component.')
mscVrNsIPXStatsAddrStatRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 5, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrNsIPXStatsAddrStatRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsIPXStatsAddrStatRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscVrNsIPXStatsAddrStat components. These components cannot be added nor deleted.')
mscVrNsIPXStatsAddrStatComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 5, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrNsIPXStatsAddrStatComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsIPXStatsAddrStatComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscVrNsIPXStatsAddrStatStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 5, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrNsIPXStatsAddrStatStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsIPXStatsAddrStatStorageType.setDescription('This variable represents the storage type value for the mscVrNsIPXStatsAddrStat tables.')
mscVrNsIPXStatsAddrStatSourceAddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 5, 2, 1, 1, 10), AsciiStringIndex().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: mscVrNsIPXStatsAddrStatSourceAddressIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsIPXStatsAddrStatSourceAddressIndex.setDescription('This variable represents an index for the mscVrNsIPXStatsAddrStat tables.')
mscVrNsIPXStatsAddrStatDestinationAddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 5, 2, 1, 1, 11), AsciiStringIndex().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: mscVrNsIPXStatsAddrStatDestinationAddressIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsIPXStatsAddrStatDestinationAddressIndex.setDescription('This variable represents an index for the mscVrNsIPXStatsAddrStat tables.')
mscVrNsIPXStatsAddrStatStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 5, 2, 10), )
if mibBuilder.loadTexts: mscVrNsIPXStatsAddrStatStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsIPXStatsAddrStatStatsTable.setDescription('*** THIS TABLE CURRENTLY NOT IMPLEMENTED *** This is the basic statistic used throughout NetSentry by-protocol statistics gathering. It contains counters for total packets, total octets in packets, and two user counters, counter_1 and counter_2.')
mscVrNsIPXStatsAddrStatStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 5, 2, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex"), (0, "Nortel-MsCarrier-MscPassport-NetSentryMIB", "mscVrNsIndex"), (0, "Nortel-MsCarrier-MscPassport-NetSentryMIB", "mscVrNsIPXStatsIndex"), (0, "Nortel-MsCarrier-MscPassport-NetSentryMIB", "mscVrNsIPXStatsAddrStatSourceAddressIndex"), (0, "Nortel-MsCarrier-MscPassport-NetSentryMIB", "mscVrNsIPXStatsAddrStatDestinationAddressIndex"))
if mibBuilder.loadTexts: mscVrNsIPXStatsAddrStatStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsIPXStatsAddrStatStatsEntry.setDescription('An entry in the mscVrNsIPXStatsAddrStatStatsTable.')
mscVrNsIPXStatsAddrStatPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 5, 2, 10, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrNsIPXStatsAddrStatPacketCount.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsIPXStatsAddrStatPacketCount.setDescription('This is the number of packets which caused the enclosing Statistics group to to be incremented. This counter will wrap around to zero when it exceeds its maximum value, 4294967295.')
mscVrNsIPXStatsAddrStatByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 5, 2, 10, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrNsIPXStatsAddrStatByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsIPXStatsAddrStatByteCount.setDescription('This is the number of bytes in all the packets which caused the enclosing Statistics group to be incremented. This counter will wrap around to zero when it exceeds its maximum value, 4294967295.')
mscVrNsIPXStatsAddrStatCounter1 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 5, 2, 10, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrNsIPXStatsAddrStatCounter1.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsIPXStatsAddrStatCounter1.setDescription('This is the number of times a packet caused a counter_1 action to be applied with reference to the enclosing Statistics group. This counter will wrap around to zero when it exceeds its maximum value, 4294967295.')
mscVrNsIPXStatsAddrStatCounter2 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 5, 2, 10, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrNsIPXStatsAddrStatCounter2.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsIPXStatsAddrStatCounter2.setDescription('This is the number of times a packet caused a counter_2 action to be applied with reference to the enclosing Statistics group. This counter will wrap around to zero when it exceeds its maximum value, 4294967295.')
mscVrNsATStats = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 6))
mscVrNsATStatsRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 6, 1), )
if mibBuilder.loadTexts: mscVrNsATStatsRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsATStatsRowStatusTable.setDescription('This entry controls the addition and deletion of mscVrNsATStats components.')
mscVrNsATStatsRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 6, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex"), (0, "Nortel-MsCarrier-MscPassport-NetSentryMIB", "mscVrNsIndex"), (0, "Nortel-MsCarrier-MscPassport-NetSentryMIB", "mscVrNsATStatsIndex"))
if mibBuilder.loadTexts: mscVrNsATStatsRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsATStatsRowStatusEntry.setDescription('A single entry in the table represents a single mscVrNsATStats component.')
mscVrNsATStatsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 6, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVrNsATStatsRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsATStatsRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscVrNsATStats components. These components can be added and deleted.')
mscVrNsATStatsComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 6, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrNsATStatsComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsATStatsComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscVrNsATStatsStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 6, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrNsATStatsStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsATStatsStorageType.setDescription('This variable represents the storage type value for the mscVrNsATStats tables.')
mscVrNsATStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 6, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscVrNsATStatsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsATStatsIndex.setDescription('This variable represents the index for the mscVrNsATStats tables.')
mscVrNsATStatsAddrStat = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 6, 2))
mscVrNsATStatsAddrStatRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 6, 2, 1), )
if mibBuilder.loadTexts: mscVrNsATStatsAddrStatRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsATStatsAddrStatRowStatusTable.setDescription('*** THIS TABLE CURRENTLY NOT IMPLEMENTED *** This entry controls the addition and deletion of mscVrNsATStatsAddrStat components.')
mscVrNsATStatsAddrStatRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 6, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex"), (0, "Nortel-MsCarrier-MscPassport-NetSentryMIB", "mscVrNsIndex"), (0, "Nortel-MsCarrier-MscPassport-NetSentryMIB", "mscVrNsATStatsIndex"), (0, "Nortel-MsCarrier-MscPassport-NetSentryMIB", "mscVrNsATStatsAddrStatSourceAddressIndex"), (0, "Nortel-MsCarrier-MscPassport-NetSentryMIB", "mscVrNsATStatsAddrStatDestinationAddressIndex"))
if mibBuilder.loadTexts: mscVrNsATStatsAddrStatRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsATStatsAddrStatRowStatusEntry.setDescription('A single entry in the table represents a single mscVrNsATStatsAddrStat component.')
mscVrNsATStatsAddrStatRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 6, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrNsATStatsAddrStatRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsATStatsAddrStatRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscVrNsATStatsAddrStat components. These components cannot be added nor deleted.')
mscVrNsATStatsAddrStatComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 6, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrNsATStatsAddrStatComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsATStatsAddrStatComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscVrNsATStatsAddrStatStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 6, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrNsATStatsAddrStatStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsATStatsAddrStatStorageType.setDescription('This variable represents the storage type value for the mscVrNsATStatsAddrStat tables.')
mscVrNsATStatsAddrStatSourceAddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 6, 2, 1, 1, 10), AsciiStringIndex().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: mscVrNsATStatsAddrStatSourceAddressIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsATStatsAddrStatSourceAddressIndex.setDescription('This variable represents an index for the mscVrNsATStatsAddrStat tables.')
mscVrNsATStatsAddrStatDestinationAddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 6, 2, 1, 1, 11), AsciiStringIndex().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: mscVrNsATStatsAddrStatDestinationAddressIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsATStatsAddrStatDestinationAddressIndex.setDescription('This variable represents an index for the mscVrNsATStatsAddrStat tables.')
mscVrNsATStatsAddrStatStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 6, 2, 10), )
if mibBuilder.loadTexts: mscVrNsATStatsAddrStatStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsATStatsAddrStatStatsTable.setDescription('*** THIS TABLE CURRENTLY NOT IMPLEMENTED *** This is the basic statistic used throughout NetSentry by-protocol statistics gathering. It contains counters for total packets, total octets in packets, and two user counters, counter_1 and counter_2.')
mscVrNsATStatsAddrStatStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 6, 2, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex"), (0, "Nortel-MsCarrier-MscPassport-NetSentryMIB", "mscVrNsIndex"), (0, "Nortel-MsCarrier-MscPassport-NetSentryMIB", "mscVrNsATStatsIndex"), (0, "Nortel-MsCarrier-MscPassport-NetSentryMIB", "mscVrNsATStatsAddrStatSourceAddressIndex"), (0, "Nortel-MsCarrier-MscPassport-NetSentryMIB", "mscVrNsATStatsAddrStatDestinationAddressIndex"))
if mibBuilder.loadTexts: mscVrNsATStatsAddrStatStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsATStatsAddrStatStatsEntry.setDescription('An entry in the mscVrNsATStatsAddrStatStatsTable.')
mscVrNsATStatsAddrStatPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 6, 2, 10, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrNsATStatsAddrStatPacketCount.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsATStatsAddrStatPacketCount.setDescription('This is the number of packets which caused the enclosing Statistics group to to be incremented. This counter will wrap around to zero when it exceeds its maximum value, 4294967295.')
mscVrNsATStatsAddrStatByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 6, 2, 10, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrNsATStatsAddrStatByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsATStatsAddrStatByteCount.setDescription('This is the number of bytes in all the packets which caused the enclosing Statistics group to be incremented. This counter will wrap around to zero when it exceeds its maximum value, 4294967295.')
mscVrNsATStatsAddrStatCounter1 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 6, 2, 10, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrNsATStatsAddrStatCounter1.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsATStatsAddrStatCounter1.setDescription('This is the number of times a packet caused a counter_1 action to be applied with reference to the enclosing Statistics group. This counter will wrap around to zero when it exceeds its maximum value, 4294967295.')
mscVrNsATStatsAddrStatCounter2 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 6, 2, 10, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrNsATStatsAddrStatCounter2.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsATStatsAddrStatCounter2.setDescription('This is the number of times a packet caused a counter_2 action to be applied with reference to the enclosing Statistics group. This counter will wrap around to zero when it exceeds its maximum value, 4294967295.')
mscVrNsDNStats = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 7))
mscVrNsDNStatsRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 7, 1), )
if mibBuilder.loadTexts: mscVrNsDNStatsRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsDNStatsRowStatusTable.setDescription('This entry controls the addition and deletion of mscVrNsDNStats components.')
mscVrNsDNStatsRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 7, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex"), (0, "Nortel-MsCarrier-MscPassport-NetSentryMIB", "mscVrNsIndex"), (0, "Nortel-MsCarrier-MscPassport-NetSentryMIB", "mscVrNsDNStatsIndex"))
if mibBuilder.loadTexts: mscVrNsDNStatsRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsDNStatsRowStatusEntry.setDescription('A single entry in the table represents a single mscVrNsDNStats component.')
mscVrNsDNStatsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 7, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVrNsDNStatsRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsDNStatsRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscVrNsDNStats components. These components can be added and deleted.')
mscVrNsDNStatsComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 7, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrNsDNStatsComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsDNStatsComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscVrNsDNStatsStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 7, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrNsDNStatsStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsDNStatsStorageType.setDescription('This variable represents the storage type value for the mscVrNsDNStats tables.')
mscVrNsDNStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 7, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscVrNsDNStatsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsDNStatsIndex.setDescription('This variable represents the index for the mscVrNsDNStats tables.')
mscVrNsDNStatsAddrStat = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 7, 2))
mscVrNsDNStatsAddrStatRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 7, 2, 1), )
if mibBuilder.loadTexts: mscVrNsDNStatsAddrStatRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsDNStatsAddrStatRowStatusTable.setDescription('*** THIS TABLE CURRENTLY NOT IMPLEMENTED *** This entry controls the addition and deletion of mscVrNsDNStatsAddrStat components.')
mscVrNsDNStatsAddrStatRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 7, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex"), (0, "Nortel-MsCarrier-MscPassport-NetSentryMIB", "mscVrNsIndex"), (0, "Nortel-MsCarrier-MscPassport-NetSentryMIB", "mscVrNsDNStatsIndex"), (0, "Nortel-MsCarrier-MscPassport-NetSentryMIB", "mscVrNsDNStatsAddrStatSourceAddressIndex"), (0, "Nortel-MsCarrier-MscPassport-NetSentryMIB", "mscVrNsDNStatsAddrStatDestinationAddressIndex"))
if mibBuilder.loadTexts: mscVrNsDNStatsAddrStatRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsDNStatsAddrStatRowStatusEntry.setDescription('A single entry in the table represents a single mscVrNsDNStatsAddrStat component.')
mscVrNsDNStatsAddrStatRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 7, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrNsDNStatsAddrStatRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsDNStatsAddrStatRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscVrNsDNStatsAddrStat components. These components cannot be added nor deleted.')
mscVrNsDNStatsAddrStatComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 7, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrNsDNStatsAddrStatComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsDNStatsAddrStatComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscVrNsDNStatsAddrStatStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 7, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrNsDNStatsAddrStatStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsDNStatsAddrStatStorageType.setDescription('This variable represents the storage type value for the mscVrNsDNStatsAddrStat tables.')
mscVrNsDNStatsAddrStatSourceAddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 7, 2, 1, 1, 10), AsciiStringIndex().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: mscVrNsDNStatsAddrStatSourceAddressIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsDNStatsAddrStatSourceAddressIndex.setDescription('This variable represents an index for the mscVrNsDNStatsAddrStat tables.')
mscVrNsDNStatsAddrStatDestinationAddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 7, 2, 1, 1, 11), AsciiStringIndex().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: mscVrNsDNStatsAddrStatDestinationAddressIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsDNStatsAddrStatDestinationAddressIndex.setDescription('This variable represents an index for the mscVrNsDNStatsAddrStat tables.')
mscVrNsDNStatsAddrStatStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 7, 2, 10), )
if mibBuilder.loadTexts: mscVrNsDNStatsAddrStatStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsDNStatsAddrStatStatsTable.setDescription('*** THIS TABLE CURRENTLY NOT IMPLEMENTED *** This is the basic statistic used throughout NetSentry by-protocol statistics gathering. It contains counters for total packets, total octets in packets, and two user counters, counter_1 and counter_2.')
mscVrNsDNStatsAddrStatStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 7, 2, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex"), (0, "Nortel-MsCarrier-MscPassport-NetSentryMIB", "mscVrNsIndex"), (0, "Nortel-MsCarrier-MscPassport-NetSentryMIB", "mscVrNsDNStatsIndex"), (0, "Nortel-MsCarrier-MscPassport-NetSentryMIB", "mscVrNsDNStatsAddrStatSourceAddressIndex"), (0, "Nortel-MsCarrier-MscPassport-NetSentryMIB", "mscVrNsDNStatsAddrStatDestinationAddressIndex"))
if mibBuilder.loadTexts: mscVrNsDNStatsAddrStatStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsDNStatsAddrStatStatsEntry.setDescription('An entry in the mscVrNsDNStatsAddrStatStatsTable.')
mscVrNsDNStatsAddrStatPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 7, 2, 10, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrNsDNStatsAddrStatPacketCount.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsDNStatsAddrStatPacketCount.setDescription('This is the number of packets which caused the enclosing Statistics group to to be incremented. This counter will wrap around to zero when it exceeds its maximum value, 4294967295.')
mscVrNsDNStatsAddrStatByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 7, 2, 10, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrNsDNStatsAddrStatByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsDNStatsAddrStatByteCount.setDescription('This is the number of bytes in all the packets which caused the enclosing Statistics group to be incremented. This counter will wrap around to zero when it exceeds its maximum value, 4294967295.')
mscVrNsDNStatsAddrStatCounter1 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 7, 2, 10, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrNsDNStatsAddrStatCounter1.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsDNStatsAddrStatCounter1.setDescription('This is the number of times a packet caused a counter_1 action to be applied with reference to the enclosing Statistics group. This counter will wrap around to zero when it exceeds its maximum value, 4294967295.')
mscVrNsDNStatsAddrStatCounter2 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 7, 2, 10, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrNsDNStatsAddrStatCounter2.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsDNStatsAddrStatCounter2.setDescription('This is the number of times a packet caused a counter_2 action to be applied with reference to the enclosing Statistics group. This counter will wrap around to zero when it exceeds its maximum value, 4294967295.')
mscVrNsBrStats = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 8))
mscVrNsBrStatsRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 8, 1), )
if mibBuilder.loadTexts: mscVrNsBrStatsRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsBrStatsRowStatusTable.setDescription('This entry controls the addition and deletion of mscVrNsBrStats components.')
mscVrNsBrStatsRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 8, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex"), (0, "Nortel-MsCarrier-MscPassport-NetSentryMIB", "mscVrNsIndex"), (0, "Nortel-MsCarrier-MscPassport-NetSentryMIB", "mscVrNsBrStatsIndex"))
if mibBuilder.loadTexts: mscVrNsBrStatsRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsBrStatsRowStatusEntry.setDescription('A single entry in the table represents a single mscVrNsBrStats component.')
mscVrNsBrStatsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 8, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVrNsBrStatsRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsBrStatsRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscVrNsBrStats components. These components can be added and deleted.')
mscVrNsBrStatsComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 8, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrNsBrStatsComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsBrStatsComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscVrNsBrStatsStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 8, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrNsBrStatsStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsBrStatsStorageType.setDescription('This variable represents the storage type value for the mscVrNsBrStats tables.')
mscVrNsBrStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 8, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscVrNsBrStatsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsBrStatsIndex.setDescription('This variable represents the index for the mscVrNsBrStats tables.')
mscVrNsBrStatsAddrStat = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 8, 2))
mscVrNsBrStatsAddrStatRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 8, 2, 1), )
if mibBuilder.loadTexts: mscVrNsBrStatsAddrStatRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsBrStatsAddrStatRowStatusTable.setDescription('*** THIS TABLE CURRENTLY NOT IMPLEMENTED *** This entry controls the addition and deletion of mscVrNsBrStatsAddrStat components.')
mscVrNsBrStatsAddrStatRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 8, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex"), (0, "Nortel-MsCarrier-MscPassport-NetSentryMIB", "mscVrNsIndex"), (0, "Nortel-MsCarrier-MscPassport-NetSentryMIB", "mscVrNsBrStatsIndex"), (0, "Nortel-MsCarrier-MscPassport-NetSentryMIB", "mscVrNsBrStatsAddrStatSourceAddressIndex"), (0, "Nortel-MsCarrier-MscPassport-NetSentryMIB", "mscVrNsBrStatsAddrStatDestinationAddressIndex"))
if mibBuilder.loadTexts: mscVrNsBrStatsAddrStatRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsBrStatsAddrStatRowStatusEntry.setDescription('A single entry in the table represents a single mscVrNsBrStatsAddrStat component.')
mscVrNsBrStatsAddrStatRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 8, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrNsBrStatsAddrStatRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsBrStatsAddrStatRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscVrNsBrStatsAddrStat components. These components cannot be added nor deleted.')
mscVrNsBrStatsAddrStatComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 8, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrNsBrStatsAddrStatComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsBrStatsAddrStatComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscVrNsBrStatsAddrStatStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 8, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrNsBrStatsAddrStatStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsBrStatsAddrStatStorageType.setDescription('This variable represents the storage type value for the mscVrNsBrStatsAddrStat tables.')
mscVrNsBrStatsAddrStatSourceAddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 8, 2, 1, 1, 10), AsciiStringIndex().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: mscVrNsBrStatsAddrStatSourceAddressIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsBrStatsAddrStatSourceAddressIndex.setDescription('This variable represents an index for the mscVrNsBrStatsAddrStat tables.')
mscVrNsBrStatsAddrStatDestinationAddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 8, 2, 1, 1, 11), AsciiStringIndex().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: mscVrNsBrStatsAddrStatDestinationAddressIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsBrStatsAddrStatDestinationAddressIndex.setDescription('This variable represents an index for the mscVrNsBrStatsAddrStat tables.')
mscVrNsBrStatsAddrStatStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 8, 2, 10), )
if mibBuilder.loadTexts: mscVrNsBrStatsAddrStatStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsBrStatsAddrStatStatsTable.setDescription('*** THIS TABLE CURRENTLY NOT IMPLEMENTED *** This is the basic statistic used throughout NetSentry by-protocol statistics gathering. It contains counters for total packets, total octets in packets, and two user counters, counter_1 and counter_2.')
mscVrNsBrStatsAddrStatStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 8, 2, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex"), (0, "Nortel-MsCarrier-MscPassport-NetSentryMIB", "mscVrNsIndex"), (0, "Nortel-MsCarrier-MscPassport-NetSentryMIB", "mscVrNsBrStatsIndex"), (0, "Nortel-MsCarrier-MscPassport-NetSentryMIB", "mscVrNsBrStatsAddrStatSourceAddressIndex"), (0, "Nortel-MsCarrier-MscPassport-NetSentryMIB", "mscVrNsBrStatsAddrStatDestinationAddressIndex"))
if mibBuilder.loadTexts: mscVrNsBrStatsAddrStatStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsBrStatsAddrStatStatsEntry.setDescription('An entry in the mscVrNsBrStatsAddrStatStatsTable.')
mscVrNsBrStatsAddrStatPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 8, 2, 10, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrNsBrStatsAddrStatPacketCount.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsBrStatsAddrStatPacketCount.setDescription('This is the number of packets which caused the enclosing Statistics group to to be incremented. This counter will wrap around to zero when it exceeds its maximum value, 4294967295.')
mscVrNsBrStatsAddrStatByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 8, 2, 10, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrNsBrStatsAddrStatByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsBrStatsAddrStatByteCount.setDescription('This is the number of bytes in all the packets which caused the enclosing Statistics group to be incremented. This counter will wrap around to zero when it exceeds its maximum value, 4294967295.')
mscVrNsBrStatsAddrStatCounter1 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 8, 2, 10, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrNsBrStatsAddrStatCounter1.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsBrStatsAddrStatCounter1.setDescription('This is the number of times a packet caused a counter_1 action to be applied with reference to the enclosing Statistics group. This counter will wrap around to zero when it exceeds its maximum value, 4294967295.')
mscVrNsBrStatsAddrStatCounter2 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 8, 2, 10, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrNsBrStatsAddrStatCounter2.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsBrStatsAddrStatCounter2.setDescription('This is the number of times a packet caused a counter_2 action to be applied with reference to the enclosing Statistics group. This counter will wrap around to zero when it exceeds its maximum value, 4294967295.')
mscVrNsFilter = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 9))
mscVrNsFilterRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 9, 1), )
if mibBuilder.loadTexts: mscVrNsFilterRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsFilterRowStatusTable.setDescription('*** THIS TABLE CURRENTLY NOT IMPLEMENTED *** This entry controls the addition and deletion of mscVrNsFilter components.')
mscVrNsFilterRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 9, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex"), (0, "Nortel-MsCarrier-MscPassport-NetSentryMIB", "mscVrNsIndex"), (0, "Nortel-MsCarrier-MscPassport-NetSentryMIB", "mscVrNsFilterNameIndex"), (0, "Nortel-MsCarrier-MscPassport-NetSentryMIB", "mscVrNsFilterKindIndex"))
if mibBuilder.loadTexts: mscVrNsFilterRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsFilterRowStatusEntry.setDescription('A single entry in the table represents a single mscVrNsFilter component.')
mscVrNsFilterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 9, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrNsFilterRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsFilterRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscVrNsFilter components. These components cannot be added nor deleted.')
mscVrNsFilterComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 9, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrNsFilterComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsFilterComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscVrNsFilterStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 9, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrNsFilterStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsFilterStorageType.setDescription('This variable represents the storage type value for the mscVrNsFilter tables.')
mscVrNsFilterNameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 9, 1, 1, 10), AsciiStringIndex().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: mscVrNsFilterNameIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsFilterNameIndex.setDescription('This variable represents an index for the mscVrNsFilter tables.')
mscVrNsFilterKindIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 9, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("filter", 0), ("pafSet", 1), ("compartment", 2), ("aesoData", 3), ("nleso", 4), ("aeso", 5), ("accreditTable", 6), ("setData", 7), ("metaFilter", 8))))
if mibBuilder.loadTexts: mscVrNsFilterKindIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsFilterKindIndex.setDescription('This variable represents an index for the mscVrNsFilter tables.')
mscVrNsFilterStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 9, 10), )
if mibBuilder.loadTexts: mscVrNsFilterStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsFilterStatsTable.setDescription('*** THIS TABLE CURRENTLY NOT IMPLEMENTED *** This group contains the various counters associated with a particular filter definition. A packet being processed through a NetSentry filter will encounter zero or more dispositions according to which elements of the filter have patterns which match the packet. This group counts, for the enclosing Filter, how many packets encountered each sort of disposition while being processed through the filter.')
mscVrNsFilterStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 9, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex"), (0, "Nortel-MsCarrier-MscPassport-NetSentryMIB", "mscVrNsIndex"), (0, "Nortel-MsCarrier-MscPassport-NetSentryMIB", "mscVrNsFilterNameIndex"), (0, "Nortel-MsCarrier-MscPassport-NetSentryMIB", "mscVrNsFilterKindIndex"))
if mibBuilder.loadTexts: mscVrNsFilterStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsFilterStatsEntry.setDescription('An entry in the mscVrNsFilterStatsTable.')
mscVrNsFilterPacketsSucceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 9, 10, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrNsFilterPacketsSucceeded.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsFilterPacketsSucceeded.setDescription('This counter contains the number of packets which passed through NetSentry, which happen to have been matched against an element of the enclosing Filter component which had a succeed disposition.')
mscVrNsFilterBytesSucceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 9, 10, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrNsFilterBytesSucceeded.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsFilterBytesSucceeded.setDescription('This counter counts the number of bytes in the packets counted in the packetsSucceeded.')
mscVrNsFilterPacketsFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 9, 10, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrNsFilterPacketsFailed.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsFilterPacketsFailed.setDescription('This counter contains the number of packets which passed through NetSentry, which happen to have been matched against an element of the enclosing Filter which had a fail disposition.')
mscVrNsFilterBytesFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 9, 10, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrNsFilterBytesFailed.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsFilterBytesFailed.setDescription('This counter counts the number of bytes in the packets counted in the packetsFailed counter.')
mscVrNsFilterPacketsBreaked = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 9, 10, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrNsFilterPacketsBreaked.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsFilterPacketsBreaked.setDescription('This counter contains the number of packets which passed through NetSentry, which happen to have been matched against an element of the enclosing Filter which had a break disposition.')
mscVrNsFilterBytesBreaked = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 9, 10, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrNsFilterBytesBreaked.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsFilterBytesBreaked.setDescription('This counter counts the number of bytes in the packets counted in the packetsBreaked counter.')
mscVrNsFilterPacketsContinued = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 9, 10, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrNsFilterPacketsContinued.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsFilterPacketsContinued.setDescription('This counter contains the number of packets which passed through NetSentry, which happen to have been matched against at least one element of the enclosing Filter which had a continue disposition. Such a packet may also have been counted in one of the packetsSucceeded packetsFailed or packetsBreaked counters, since a continue disposition does not exit a NetSentry filter unless it is the disposition in the last element of the filter.')
mscVrNsFilterBytesContinued = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 4, 9, 10, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrNsFilterBytesContinued.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrNsFilterBytesContinued.setDescription('This counter counts the number of bytes in the packets counted in the packetsContinued counter.')
netSentryGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 31, 1))
netSentryGroupCA = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 31, 1, 1))
netSentryGroupCA02 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 31, 1, 1, 3))
netSentryGroupCA02A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 31, 1, 1, 3, 2))
netSentryCapabilities = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 31, 3))
netSentryCapabilitiesCA = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 31, 3, 1))
netSentryCapabilitiesCA02 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 31, 3, 1, 3))
netSentryCapabilitiesCA02A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 31, 3, 1, 3, 2))
mibBuilder.exportSymbols("Nortel-MsCarrier-MscPassport-NetSentryMIB", mscVrNsComponentName=mscVrNsComponentName, mscVrNsEngineRowStatusTable=mscVrNsEngineRowStatusTable, mscVrNsBrStatsAddrStatStatsTable=mscVrNsBrStatsAddrStatStatsTable, mscVrNsDroppedCantCopyTo=mscVrNsDroppedCantCopyTo, mscVrNsDNStatsAddrStatCounter1=mscVrNsDNStatsAddrStatCounter1, mscVrNsBrStatsAddrStatCounter1=mscVrNsBrStatsAddrStatCounter1, mscVrNsATStatsRowStatus=mscVrNsATStatsRowStatus, mscVrNsBrStatsAddrStatRowStatusTable=mscVrNsBrStatsAddrStatRowStatusTable, mscVrNsFileIndex=mscVrNsFileIndex, mscVrNsIPStatsAddrStatSourceAddressIndex=mscVrNsIPStatsAddrStatSourceAddressIndex, mscVrNsRowStatusTable=mscVrNsRowStatusTable, mscVrNsIPXStatsRowStatusEntry=mscVrNsIPXStatsRowStatusEntry, mscVrNsStorageType=mscVrNsStorageType, netSentryCapabilitiesCA02=netSentryCapabilitiesCA02, mscVrNsDNStatsRowStatus=mscVrNsDNStatsRowStatus, mscVrNsDroppedCantLogTo=mscVrNsDroppedCantLogTo, mscVrNsFileRowStatusTable=mscVrNsFileRowStatusTable, mscVrNsFilterPacketsContinued=mscVrNsFilterPacketsContinued, mscVrNsDNStatsIndex=mscVrNsDNStatsIndex, mscVrNsIPStatsAddrStatDestinationAddressIndex=mscVrNsIPStatsAddrStatDestinationAddressIndex, mscVrNsDNStatsComponentName=mscVrNsDNStatsComponentName, mscVrNsRowStatusEntry=mscVrNsRowStatusEntry, mscVrNsIPXStatsRowStatusTable=mscVrNsIPXStatsRowStatusTable, mscVrNsDNStatsAddrStatComponentName=mscVrNsDNStatsAddrStatComponentName, mscVrNsStatsEntry=mscVrNsStatsEntry, mscVrNsDNStatsAddrStatRowStatus=mscVrNsDNStatsAddrStatRowStatus, mscVrNsEngine=mscVrNsEngine, mscVrNsIPStatsAddrStatRowStatus=mscVrNsIPStatsAddrStatRowStatus, mscVrNsBrStatsAddrStatDestinationAddressIndex=mscVrNsBrStatsAddrStatDestinationAddressIndex, mscVrNsFilterNameIndex=mscVrNsFilterNameIndex, mscVrNsFilterStatsTable=mscVrNsFilterStatsTable, mscVrNsIPXStatsAddrStatRowStatusEntry=mscVrNsIPXStatsAddrStatRowStatusEntry, mscVrNsDNStatsAddrStatCounter2=mscVrNsDNStatsAddrStatCounter2, mscVrNsATStatsIndex=mscVrNsATStatsIndex, mscVrNsATStatsAddrStatPacketCount=mscVrNsATStatsAddrStatPacketCount, mscVrNsDNStatsAddrStatStorageType=mscVrNsDNStatsAddrStatStorageType, mscVrNsDNStatsAddrStatStatsEntry=mscVrNsDNStatsAddrStatStatsEntry, mscVrNsIPStatsAddrStatStatsEntry=mscVrNsIPStatsAddrStatStatsEntry, mscVrNsIPXStatsAddrStat=mscVrNsIPXStatsAddrStat, mscVrNsFileOperTable=mscVrNsFileOperTable, mscVrNsATStatsAddrStatSourceAddressIndex=mscVrNsATStatsAddrStatSourceAddressIndex, mscVrNsATStatsStorageType=mscVrNsATStatsStorageType, mscVrNsDNStatsAddrStatPacketCount=mscVrNsDNStatsAddrStatPacketCount, mscVrNsIPXStatsAddrStatRowStatusTable=mscVrNsIPXStatsAddrStatRowStatusTable, mscVrNsATStatsAddrStatRowStatus=mscVrNsATStatsAddrStatRowStatus, mscVrNsProvEntry=mscVrNsProvEntry, mscVrNsATStatsAddrStatByteCount=mscVrNsATStatsAddrStatByteCount, mscVrNsFilterComponentName=mscVrNsFilterComponentName, mscVrNsBrStatsStorageType=mscVrNsBrStatsStorageType, mscVrNsStatsNoMem=mscVrNsStatsNoMem, mscVrNsFileStorageType=mscVrNsFileStorageType, mscVrNsDNStatsAddrStatRowStatusTable=mscVrNsDNStatsAddrStatRowStatusTable, mscVrNsBrStatsAddrStatRowStatusEntry=mscVrNsBrStatsAddrStatRowStatusEntry, mscVrNsATStatsAddrStatCounter1=mscVrNsATStatsAddrStatCounter1, mscVrNsATStatsAddrStatStorageType=mscVrNsATStatsAddrStatStorageType, mscVrNsEngineRowStatus=mscVrNsEngineRowStatus, netSentryMIB=netSentryMIB, mscVrNsATStatsAddrStatRowStatusTable=mscVrNsATStatsAddrStatRowStatusTable, mscVrNsProvTable=mscVrNsProvTable, netSentryCapabilities=netSentryCapabilities, mscVrNsPacketsFailed=mscVrNsPacketsFailed, mscVrNsIPStatsAddrStatComponentName=mscVrNsIPStatsAddrStatComponentName, mscVrNsIPXStatsComponentName=mscVrNsIPXStatsComponentName, netSentryCapabilitiesCA02A=netSentryCapabilitiesCA02A, mscVrNsIPXStats=mscVrNsIPXStats, mscVrNsBrStatsAddrStatStatsEntry=mscVrNsBrStatsAddrStatStatsEntry, mscVrNsATStatsAddrStatRowStatusEntry=mscVrNsATStatsAddrStatRowStatusEntry, mscVrNsATStatsAddrStatStatsEntry=mscVrNsATStatsAddrStatStatsEntry, mscVrNsDNStatsStorageType=mscVrNsDNStatsStorageType, mscVrNsEngineRowStatusEntry=mscVrNsEngineRowStatusEntry, mscVrNsFilter=mscVrNsFilter, mscVrNsBrStatsAddrStatStorageType=mscVrNsBrStatsAddrStatStorageType, mscVrNsIPXStatsAddrStatCounter2=mscVrNsIPXStatsAddrStatCounter2, mscVrNsFilterPacketsSucceeded=mscVrNsFilterPacketsSucceeded, mscVrNsFileComponentName=mscVrNsFileComponentName, mscVrNsIPStatsAddrStatStorageType=mscVrNsIPStatsAddrStatStorageType, mscVrNsFilterRowStatus=mscVrNsFilterRowStatus, mscVrNsATStatsAddrStatDestinationAddressIndex=mscVrNsATStatsAddrStatDestinationAddressIndex, mscVrNsIPXStatsAddrStatSourceAddressIndex=mscVrNsIPXStatsAddrStatSourceAddressIndex, mscVrNsIPXStatsAddrStatStatsTable=mscVrNsIPXStatsAddrStatStatsTable, netSentryCapabilitiesCA=netSentryCapabilitiesCA, mscVrNsIPStatsAddrStat=mscVrNsIPStatsAddrStat, mscVrNsIPStatsAddrStatStatsTable=mscVrNsIPStatsAddrStatStatsTable, mscVrNsDNStatsAddrStatByteCount=mscVrNsDNStatsAddrStatByteCount, mscVrNsATStatsRowStatusTable=mscVrNsATStatsRowStatusTable, mscVrNsFilterRowStatusEntry=mscVrNsFilterRowStatusEntry, mscVrNsFilterBytesContinued=mscVrNsFilterBytesContinued, mscVrNsIPStatsIndex=mscVrNsIPStatsIndex, mscVrNsFilterBytesFailed=mscVrNsFilterBytesFailed, mscVrNsFile=mscVrNsFile, mscVrNsEngineComponentName=mscVrNsEngineComponentName, mscVrNsATStatsAddrStatComponentName=mscVrNsATStatsAddrStatComponentName, mscVrNsIPXStatsStorageType=mscVrNsIPXStatsStorageType, mscVrNsBrStatsAddrStat=mscVrNsBrStatsAddrStat, mscVrNsDepthExceeded=mscVrNsDepthExceeded, mscVrNsBrStatsAddrStatCounter2=mscVrNsBrStatsAddrStatCounter2, mscVrNsIPStatsAddrStatPacketCount=mscVrNsIPStatsAddrStatPacketCount, mscVrNs=mscVrNs, mscVrNsDroppedCantCloneTo=mscVrNsDroppedCantCloneTo, mscVrNsIPXStatsAddrStatByteCount=mscVrNsIPXStatsAddrStatByteCount, mscVrNsDroppedStatsNoMem=mscVrNsDroppedStatsNoMem, mscVrNsRowStatus=mscVrNsRowStatus, mscVrNsIPStatsComponentName=mscVrNsIPStatsComponentName, mscVrNsIPXStatsAddrStatPacketCount=mscVrNsIPXStatsAddrStatPacketCount, mscVrNsIPStatsRowStatus=mscVrNsIPStatsRowStatus, mscVrNsFilterRowStatusTable=mscVrNsFilterRowStatusTable, netSentryGroup=netSentryGroup, mscVrNsIPStatsAddrStatCounter1=mscVrNsIPStatsAddrStatCounter1, mscVrNsBrStatsAddrStatByteCount=mscVrNsBrStatsAddrStatByteCount, mscVrNsFilterBytesSucceeded=mscVrNsFilterBytesSucceeded, mscVrNsPacketsProcessed=mscVrNsPacketsProcessed, mscVrNsDNStats=mscVrNsDNStats, mscVrNsIPStatsRowStatusTable=mscVrNsIPStatsRowStatusTable, mscVrNsATStatsAddrStat=mscVrNsATStatsAddrStat, mscVrNsIPXStatsAddrStatRowStatus=mscVrNsIPXStatsAddrStatRowStatus, mscVrNsFileOperEntry=mscVrNsFileOperEntry, mscVrNsBrStatsComponentName=mscVrNsBrStatsComponentName, mscVrNsBrStatsAddrStatRowStatus=mscVrNsBrStatsAddrStatRowStatus, mscVrNsFilterStorageType=mscVrNsFilterStorageType, mscVrNsIPStatsAddrStatRowStatusEntry=mscVrNsIPStatsAddrStatRowStatusEntry, mscVrNsIPStatsAddrStatCounter2=mscVrNsIPStatsAddrStatCounter2, mscVrNsIPXStatsAddrStatStatsEntry=mscVrNsIPXStatsAddrStatStatsEntry, mscVrNsDNStatsAddrStatStatsTable=mscVrNsDNStatsAddrStatStatsTable, mscVrNsHsaOkayFailed=mscVrNsHsaOkayFailed, mscVrNsIPStatsAddrStatByteCount=mscVrNsIPStatsAddrStatByteCount, mscVrNsBrStats=mscVrNsBrStats, mscVrNsFilterPacketsBreaked=mscVrNsFilterPacketsBreaked, mscVrNsIPStats=mscVrNsIPStats, mscVrNsFilterStatsEntry=mscVrNsFilterStatsEntry, netSentryGroupCA=netSentryGroupCA, mscVrNsATStatsComponentName=mscVrNsATStatsComponentName, mscVrNsBrStatsAddrStatSourceAddressIndex=mscVrNsBrStatsAddrStatSourceAddressIndex, mscVrNsATStatsAddrStatCounter2=mscVrNsATStatsAddrStatCounter2, mscVrNsBrStatsRowStatus=mscVrNsBrStatsRowStatus, mscVrNsEngineStorageType=mscVrNsEngineStorageType, mscVrNsFileRowStatus=mscVrNsFileRowStatus, mscVrNsIPStatsAddrStatRowStatusTable=mscVrNsIPStatsAddrStatRowStatusTable, mscVrNsEngineIndex=mscVrNsEngineIndex, mscVrNsFilterKindIndex=mscVrNsFilterKindIndex, netSentryGroupCA02=netSentryGroupCA02, mscVrNsDNStatsRowStatusTable=mscVrNsDNStatsRowStatusTable, mscVrNsFilterPacketsFailed=mscVrNsFilterPacketsFailed, mscVrNsDNStatsAddrStatDestinationAddressIndex=mscVrNsDNStatsAddrStatDestinationAddressIndex, mscVrNsIPXStatsAddrStatStorageType=mscVrNsIPXStatsAddrStatStorageType, mscVrNsBrStatsRowStatusTable=mscVrNsBrStatsRowStatusTable, mscVrNsIPXStatsAddrStatComponentName=mscVrNsIPXStatsAddrStatComponentName, mscVrNsATStats=mscVrNsATStats, mscVrNsBrStatsRowStatusEntry=mscVrNsBrStatsRowStatusEntry, mscVrNsBrStatsAddrStatPacketCount=mscVrNsBrStatsAddrStatPacketCount, mscVrNsATStatsAddrStatStatsTable=mscVrNsATStatsAddrStatStatsTable, mscVrNsATStatsRowStatusEntry=mscVrNsATStatsRowStatusEntry, mscVrNsFilterBytesBreaked=mscVrNsFilterBytesBreaked, mscVrNsIPXStatsIndex=mscVrNsIPXStatsIndex, mscVrNsDNStatsAddrStatSourceAddressIndex=mscVrNsDNStatsAddrStatSourceAddressIndex, mscVrNsStatsTable=mscVrNsStatsTable, mscVrNsBrStatsIndex=mscVrNsBrStatsIndex, mscVrNsDroppedNullFilter=mscVrNsDroppedNullFilter, mscVrNsDNStatsAddrStat=mscVrNsDNStatsAddrStat, mscVrNsBrStatsAddrStatComponentName=mscVrNsBrStatsAddrStatComponentName, mscVrNsDropConditions=mscVrNsDropConditions, mscVrNsDNStatsAddrStatRowStatusEntry=mscVrNsDNStatsAddrStatRowStatusEntry, mscVrNsIPStatsRowStatusEntry=mscVrNsIPStatsRowStatusEntry, netSentryGroupCA02A=netSentryGroupCA02A, mscVrNsIPXStatsAddrStatCounter1=mscVrNsIPXStatsAddrStatCounter1, mscVrNsIndex=mscVrNsIndex, mscVrNsIPStatsStorageType=mscVrNsIPStatsStorageType, mscVrNsFileRowStatusEntry=mscVrNsFileRowStatusEntry, mscVrNsFileCompilerErrorMsg=mscVrNsFileCompilerErrorMsg, mscVrNsIPXStatsRowStatus=mscVrNsIPXStatsRowStatus, mscVrNsDNStatsRowStatusEntry=mscVrNsDNStatsRowStatusEntry, mscVrNsIPXStatsAddrStatDestinationAddressIndex=mscVrNsIPXStatsAddrStatDestinationAddressIndex)
