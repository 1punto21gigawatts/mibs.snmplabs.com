#
# PySNMP MIB module GDCCMN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/GDCCMN-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:37:19 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
iso, Bits, TimeTicks, Integer32, Unsigned32, NotificationType, Gauge32, IpAddress, ModuleIdentity, ObjectIdentity, NotificationType, MibIdentifier, Counter32, Counter64, enterprises, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Bits", "TimeTicks", "Integer32", "Unsigned32", "NotificationType", "Gauge32", "IpAddress", "ModuleIdentity", "ObjectIdentity", "NotificationType", "MibIdentifier", "Counter32", "Counter64", "enterprises", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
gdc = MibIdentifier((1, 3, 6, 1, 4, 1, 498))
cmn = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 1))
cmnTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 1, 1))
cmnCommName = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 1, 2))
cmnAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 1, 4))
cmnMIBVersion = MibScalar((1, 3, 6, 1, 4, 1, 498, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmnMIBVersion.setStatus('mandatory')
if mibBuilder.loadTexts: cmnMIBVersion.setDescription('The version number of the MIB, to allow products to know which MIB is being supported. The version number will be x.yzT where x is a major revision (1-9), y is a minor revision(0-9), z is a typo revision (0-9) and T indicates the MIB is still a test revision(A-Z). When a release is complete no T should exist.')
cmnTrapGlobal = MibScalar((1, 3, 6, 1, 4, 1, 498, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmnTrapGlobal.setStatus('mandatory')
if mibBuilder.loadTexts: cmnTrapGlobal.setDescription('This globally enables and disables all TRAPs from an agent. All variables should provide a means to mask a TRAP and to provide some threshold before a TRAP is sent.')
cmnTrapAddrNumber = MibScalar((1, 3, 6, 1, 4, 1, 498, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmnTrapAddrNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cmnTrapAddrNumber.setDescription('The maximum number of entries the TRAP table can hold.')
cmnTrapAddrTable = MibTable((1, 3, 6, 1, 4, 1, 498, 1, 1, 3), )
if mibBuilder.loadTexts: cmnTrapAddrTable.setStatus('mandatory')
if mibBuilder.loadTexts: cmnTrapAddrTable.setDescription('A table of management systems ready to accept traps generated by this node. To add an entry to the table, a set on the Community name for the instance (IP Address and UDP PORT) needs to be performed. To delete an entry, a set on the Status to invalid on the instance needs to be performed.')
cmnTrapAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 1, 1, 3, 1), ).setIndexNames((0, "GDCCMN-MIB", "cmnTrapAddrIpDest"), (0, "GDCCMN-MIB", "cmnTrapAddrUdpDest"))
if mibBuilder.loadTexts: cmnTrapAddrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cmnTrapAddrEntry.setDescription('Information needed to deliver traps to a particular management station.')
cmnTrapAddrIpDest = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 1, 1, 3, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmnTrapAddrIpDest.setStatus('mandatory')
if mibBuilder.loadTexts: cmnTrapAddrIpDest.setDescription('The IP address of the management agent receiving traps. The IP address of 0.0.0.0 will not be allowed.')
cmnTrapAddrUdpDest = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 1, 1, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmnTrapAddrUdpDest.setStatus('mandatory')
if mibBuilder.loadTexts: cmnTrapAddrUdpDest.setDescription('The UDP port number used by the management station to receive traps. A value of 0 for the UDP port number will not be allowed.')
cmnTrapAddrCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 1, 1, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmnTrapAddrCommunity.setStatus('mandatory')
if mibBuilder.loadTexts: cmnTrapAddrCommunity.setDescription('The community name expected by the management station receiving traps.')
cmnTrapAddrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 1, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmnTrapAddrStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cmnTrapAddrStatus.setDescription('The status of the entry. If read and the entry exists, valid(1) will always be returned. Invalid entries will be removed from the table.')
cmnCommunityNumber = MibScalar((1, 3, 6, 1, 4, 1, 498, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmnCommunityNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cmnCommunityNumber.setDescription('The maximum number of entries the Community table can hold.')
cmnCommunityTable = MibTable((1, 3, 6, 1, 4, 1, 498, 1, 2, 2), )
if mibBuilder.loadTexts: cmnCommunityTable.setStatus('mandatory')
if mibBuilder.loadTexts: cmnCommunityTable.setDescription('A table of Community Names and there defined access. To add an entry to the table, a set on the Community Name for the instance (Index) needs to be performed. To delete an entry, a set on the Status to invalid on the instance needs to be performed.')
cmnCommunityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 1, 2, 2, 1), ).setIndexNames((0, "GDCCMN-MIB", "cmnCommunityIndex"))
if mibBuilder.loadTexts: cmnCommunityEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cmnCommunityEntry.setDescription('Information needed to deliver traps to a particular management station.')
cmnCommunityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 1, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmnCommunityIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cmnCommunityIndex.setDescription('The index number associated with the entry in the community name table. The range cannot be specified on the SYNTAX line since it will vary from agent to agent. The range will be 1 to the number specified by cmnCommunityNumber.')
cmnCommunityName = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 1, 2, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmnCommunityName.setStatus('mandatory')
if mibBuilder.loadTexts: cmnCommunityName.setDescription('The community name being defined.')
cmnCommunityAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("readOnly", 1), ("readWrite", 2), ("noAccess", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmnCommunityAccess.setStatus('mandatory')
if mibBuilder.loadTexts: cmnCommunityAccess.setDescription('The Access associated with the community name. When a new row is created by adding a new name, the default value will be noAccess(3).')
cmnCommunityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 1, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmnCommunityStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cmnCommunityStatus.setDescription('The status of the entry. If read and the entry exists, valid(1) will always be returned. Invalid entries will be removed from the table.')
cmnAlarmStatusTable = MibTable((1, 3, 6, 1, 4, 1, 498, 1, 4, 1), )
if mibBuilder.loadTexts: cmnAlarmStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: cmnAlarmStatusTable.setDescription('The cmnAlarmStatusTable contains entries that report the status of alarms. The status of an alarm indicates whether the alarm is currently active or inactive. This information will be determined by the network element depending on the alarm threshold configuration. The structure of the table is such that alarm status is supported on a unit or interface basis, and then on an alarm type basis within the interface. For simplicity sake and to support the reporting of status of all alarms, a unit is treated as an interface in this table.')
cmnAlarmStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 1, 4, 1, 1), ).setIndexNames((0, "GDCCMN-MIB", "cmnAlarmStatusIndex"), (0, "GDCCMN-MIB", "cmnAlarmStatusIdentifier"))
if mibBuilder.loadTexts: cmnAlarmStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cmnAlarmStatusEntry.setDescription('An entry in the Alarm Status table.')
cmnAlarmStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 1, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmnAlarmStatusIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cmnAlarmStatusIndex.setDescription('The index value which uniquely identifies the interface to which this entry is applicable.')
cmnAlarmStatusIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 1, 4, 1, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmnAlarmStatusIdentifier.setStatus('mandatory')
if mibBuilder.loadTexts: cmnAlarmStatusIdentifier.setDescription('The unique alarm identifier assigned to this alarm type. The format of this identifier is an OBJECT IDENTIFIER that has the following format: {iso(1) org(3) dod(6) internet(1) private(4) enterprises(1) gdc(498) xxx(x) alarm(z) yyy(y) where xxx(x) is the administratively assigned family object identifier (z) is the object identifier for alarms in the family defined MIB and yyy(y) is the administratively assigned alarm type identifier for this alarm.')
cmnAlarmCurrentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmnAlarmCurrentStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cmnAlarmCurrentStatus.setDescription('The current status of the alarm. The value inactive(1) indicates that this alarm is currently inactive. The value active(2) indicates that this alarm is currently active.')
cmnAlarmMaskTable = MibTable((1, 3, 6, 1, 4, 1, 498, 1, 4, 2), )
if mibBuilder.loadTexts: cmnAlarmMaskTable.setStatus('mandatory')
if mibBuilder.loadTexts: cmnAlarmMaskTable.setDescription('The cmnAlarmMaskTable contains entries that report the current masking state of alarms. The mask of an alarm can be changed between masked(1) and unmasked(2). If an alarm is unmasked, the threshold configuration can affect the reporting of this alarm. The structure of the table is such that alarm mask is supported on a unit or interface basis, and then on an alarm type basis within the interface. For simplicity sake and to support the reporting of status of all alarms, a unit is treated as an interface in this table.')
cmnAlarmMaskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 1, 4, 2, 1), ).setIndexNames((0, "GDCCMN-MIB", "cmnAlarmMaskIndex"), (0, "GDCCMN-MIB", "cmnAlarmMaskIdentifier"))
if mibBuilder.loadTexts: cmnAlarmMaskEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cmnAlarmMaskEntry.setDescription('An entry in the alarm mask table.')
cmnAlarmMaskIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 1, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmnAlarmMaskIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cmnAlarmMaskIndex.setDescription('The index value which uniquely identifies the interface to which this entry is applicable.')
cmnAlarmMaskIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 1, 4, 2, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmnAlarmMaskIdentifier.setStatus('mandatory')
if mibBuilder.loadTexts: cmnAlarmMaskIdentifier.setDescription('The unique alarm identifier assigned to this alarm type. The format of this identifier is an OBJECT IDENTIFIER that has the following format: {iso(1) org(3) dod(6) internet(1) private(4) enterprises(1) gdc(498) xxx(x) alarm(z) yyy(y) where xxx(x) is the administratively assigned family object identifier (z) is the object identifier for alarms in the family defined MIB and yyy(y) is the administratively assigned alarm type identifier for this alarm.')
cmnAlarmMask = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 1, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mask", 1), ("unmask", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmnAlarmMask.setStatus('mandatory')
if mibBuilder.loadTexts: cmnAlarmMask.setDescription('The alarm masking control. When the value is mask(1), then the alarm is masked and will not be reported. When the value is unmask(2), then the alarm will be reported depending on the threshold configuration.')
cmnAlarmStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 498, 1, 4) + (0,1)).setObjects(("GDCCMN-MIB", "cmnAlarmCurrentStatus"))
if mibBuilder.loadTexts: cmnAlarmStatusTrap.setDescription('The alarm status trap. This trap is set whenever an alarm status change occurs to report an alarm. The variable bindings contain the status for each alarm that changes state. Note that the OBJECT IDENTIFIER of the variable contains the interface, family type, and alarm type of the alarm encoded within. More than one alarm can be sent in the trap, if the network element indicates that more than one has changed at the same time.')
mibBuilder.exportSymbols("GDCCMN-MIB", cmnTrapAddrIpDest=cmnTrapAddrIpDest, cmnAlarmStatusIndex=cmnAlarmStatusIndex, cmnTrapAddrEntry=cmnTrapAddrEntry, cmnAlarmStatusTrap=cmnAlarmStatusTrap, cmnAlarmMaskIdentifier=cmnAlarmMaskIdentifier, cmnAlarmMaskEntry=cmnAlarmMaskEntry, cmnAlarmCurrentStatus=cmnAlarmCurrentStatus, cmnTrap=cmnTrap, cmnAlarmMask=cmnAlarmMask, cmnAlarmStatusTable=cmnAlarmStatusTable, gdc=gdc, cmnCommunityStatus=cmnCommunityStatus, cmnMIBVersion=cmnMIBVersion, cmnAlarmMaskTable=cmnAlarmMaskTable, cmnTrapAddrTable=cmnTrapAddrTable, cmnCommunityAccess=cmnCommunityAccess, cmnTrapAddrUdpDest=cmnTrapAddrUdpDest, cmnTrapAddrCommunity=cmnTrapAddrCommunity, cmnAlarmStatusIdentifier=cmnAlarmStatusIdentifier, cmnAlarmMaskIndex=cmnAlarmMaskIndex, cmnCommName=cmnCommName, cmnCommunityTable=cmnCommunityTable, cmnTrapAddrNumber=cmnTrapAddrNumber, cmnCommunityIndex=cmnCommunityIndex, cmn=cmn, cmnCommunityEntry=cmnCommunityEntry, cmnCommunityNumber=cmnCommunityNumber, cmnAlarmStatusEntry=cmnAlarmStatusEntry, cmnAlarm=cmnAlarm, cmnTrapAddrStatus=cmnTrapAddrStatus, cmnTrapGlobal=cmnTrapGlobal, cmnCommunityName=cmnCommunityName)
