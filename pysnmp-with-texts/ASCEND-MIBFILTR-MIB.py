#
# PySNMP MIB module ASCEND-MIBFILTR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ASCEND-MIBFILTR-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:27:16 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
configuration, = mibBuilder.importSymbols("ASCEND-MIB", "configuration")
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
TimeTicks, IpAddress, MibIdentifier, Gauge32, ModuleIdentity, NotificationType, Counter32, Unsigned32, ObjectIdentity, iso, Bits, Integer32, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "IpAddress", "MibIdentifier", "Gauge32", "ModuleIdentity", "NotificationType", "Counter32", "Unsigned32", "ObjectIdentity", "iso", "Bits", "Integer32", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class DisplayString(OctetString):
    pass

mibfilterProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 23, 77))
mibfilterProfileTable = MibTable((1, 3, 6, 1, 4, 1, 529, 23, 77, 1), )
if mibBuilder.loadTexts: mibfilterProfileTable.setStatus('mandatory')
if mibBuilder.loadTexts: mibfilterProfileTable.setDescription('A list of mibfilterProfile profile entries.')
mibfilterProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 529, 23, 77, 1, 1), ).setIndexNames((0, "ASCEND-MIBFILTR-MIB", "filterProfile-FilterName"))
if mibBuilder.loadTexts: mibfilterProfileEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mibfilterProfileEntry.setDescription('A mibfilterProfile entry containing objects that maps to the parameters of mibfilterProfile profile.')
filterProfile_FilterName = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 77, 1, 1, 1), DisplayString()).setLabel("filterProfile-FilterName").setMaxAccess("readonly")
if mibBuilder.loadTexts: filterProfile_FilterName.setStatus('mandatory')
if mibBuilder.loadTexts: filterProfile_FilterName.setDescription('The name of this filter. All filters are referenced by name so a name must be assigned to active filters.')
filterProfile_Action_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 77, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAction", 1), ("createProfile", 2), ("deleteProfile", 3)))).setLabel("filterProfile-Action-o").setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterProfile_Action_o.setStatus('mandatory')
if mibBuilder.loadTexts: filterProfile_Action_o.setDescription('')
mibfilterProfile_OutputFiltersTable = MibTable((1, 3, 6, 1, 4, 1, 529, 23, 77, 2), ).setLabel("mibfilterProfile-OutputFiltersTable")
if mibBuilder.loadTexts: mibfilterProfile_OutputFiltersTable.setStatus('mandatory')
if mibBuilder.loadTexts: mibfilterProfile_OutputFiltersTable.setDescription('A list of mibfilterProfile__output_filters profile entries.')
mibfilterProfile_OutputFiltersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 529, 23, 77, 2, 1), ).setLabel("mibfilterProfile-OutputFiltersEntry").setIndexNames((0, "ASCEND-MIBFILTR-MIB", "filterProfile-OutputFilters-FilterName"), (0, "ASCEND-MIBFILTR-MIB", "filterProfile-OutputFilters-Index-o"))
if mibBuilder.loadTexts: mibfilterProfile_OutputFiltersEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mibfilterProfile_OutputFiltersEntry.setDescription('A mibfilterProfile__output_filters entry containing objects that maps to the parameters of mibfilterProfile__output_filters profile.')
filterProfile_OutputFilters_FilterName = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 77, 2, 1, 1), DisplayString()).setLabel("filterProfile-OutputFilters-FilterName").setMaxAccess("readonly")
if mibBuilder.loadTexts: filterProfile_OutputFilters_FilterName.setStatus('mandatory')
if mibBuilder.loadTexts: filterProfile_OutputFilters_FilterName.setDescription('')
filterProfile_OutputFilters_Index_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 77, 2, 1, 2), Integer32()).setLabel("filterProfile-OutputFilters-Index-o").setMaxAccess("readonly")
if mibBuilder.loadTexts: filterProfile_OutputFilters_Index_o.setStatus('mandatory')
if mibBuilder.loadTexts: filterProfile_OutputFilters_Index_o.setDescription('')
filterProfile_OutputFilters_ValidEntry = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 77, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("filterProfile-OutputFilters-ValidEntry").setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterProfile_OutputFilters_ValidEntry.setStatus('mandatory')
if mibBuilder.loadTexts: filterProfile_OutputFilters_ValidEntry.setDescription('When TRUE, this filter entry has been defined and properly initialized. When FALSE, this entry should be skipped when filtering.')
filterProfile_OutputFilters_Forward = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 77, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("filterProfile-OutputFilters-Forward").setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterProfile_OutputFilters_Forward.setStatus('mandatory')
if mibBuilder.loadTexts: filterProfile_OutputFilters_Forward.setDescription('When TRUE a packet matching this filter will be forwarded or restart the idle timer. When FALSE a packet matching this filter will be dropped or not restart the idle timer.')
filterProfile_OutputFilters_oType = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 77, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("genericFilter", 1), ("ipFilter", 2), ("routeFilter", 3), ("ipxFilter", 4), ("tosFilter", 5)))).setLabel("filterProfile-OutputFilters-oType").setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterProfile_OutputFilters_oType.setStatus('mandatory')
if mibBuilder.loadTexts: filterProfile_OutputFilters_oType.setDescription('The type of filter contained in this entry. Used to select which of the following fields should be used.')
filterProfile_OutputFilters_GenFilter_Offset = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 77, 2, 1, 6), Integer32()).setLabel("filterProfile-OutputFilters-GenFilter-Offset").setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterProfile_OutputFilters_GenFilter_Offset.setStatus('mandatory')
if mibBuilder.loadTexts: filterProfile_OutputFilters_GenFilter_Offset.setDescription('Offset from start of frame of data to test.')
filterProfile_OutputFilters_GenFilter_Len = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 77, 2, 1, 7), Integer32()).setLabel("filterProfile-OutputFilters-GenFilter-Len").setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterProfile_OutputFilters_GenFilter_Len.setStatus('mandatory')
if mibBuilder.loadTexts: filterProfile_OutputFilters_GenFilter_Len.setDescription('Number of octets to test. Max value is 8 octets.')
filterProfile_OutputFilters_GenFilter_More = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 77, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("filterProfile-OutputFilters-GenFilter-More").setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterProfile_OutputFilters_GenFilter_More.setStatus('mandatory')
if mibBuilder.loadTexts: filterProfile_OutputFilters_GenFilter_More.setDescription('Include next entry in as part of filter.')
filterProfile_OutputFilters_GenFilter_CompNeq = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 77, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("filterProfile-OutputFilters-GenFilter-CompNeq").setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterProfile_OutputFilters_GenFilter_CompNeq.setStatus('mandatory')
if mibBuilder.loadTexts: filterProfile_OutputFilters_GenFilter_CompNeq.setDescription('Defines type of comparison( Equals(FALSE) or Notequals(TRUE). Default is Equals.')
filterProfile_OutputFilters_GenFilter_Mask = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 77, 2, 1, 10), DisplayString()).setLabel("filterProfile-OutputFilters-GenFilter-Mask").setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterProfile_OutputFilters_GenFilter_Mask.setStatus('mandatory')
if mibBuilder.loadTexts: filterProfile_OutputFilters_GenFilter_Mask.setDescription('A mask to be applied to the data at offset. Only the first len octets will be applied.')
filterProfile_OutputFilters_GenFilter_Value = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 77, 2, 1, 11), DisplayString()).setLabel("filterProfile-OutputFilters-GenFilter-Value").setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterProfile_OutputFilters_GenFilter_Value.setStatus('mandatory')
if mibBuilder.loadTexts: filterProfile_OutputFilters_GenFilter_Value.setDescription('The value to compare with the masked data. Only the first len octets will be compared.')
filterProfile_OutputFilters_IpFilter_Protocol = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 77, 2, 1, 12), Integer32()).setLabel("filterProfile-OutputFilters-IpFilter-Protocol").setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterProfile_OutputFilters_IpFilter_Protocol.setStatus('mandatory')
if mibBuilder.loadTexts: filterProfile_OutputFilters_IpFilter_Protocol.setDescription('The protocol number of the protocol to filter for. If set to zero this entry will match any IP protocol.')
filterProfile_OutputFilters_IpFilter_SourceAddressMask = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 77, 2, 1, 13), IpAddress()).setLabel("filterProfile-OutputFilters-IpFilter-SourceAddressMask").setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterProfile_OutputFilters_IpFilter_SourceAddressMask.setStatus('mandatory')
if mibBuilder.loadTexts: filterProfile_OutputFilters_IpFilter_SourceAddressMask.setDescription('A mask to apply to a source address before comparison.')
filterProfile_OutputFilters_IpFilter_SourceAddress = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 77, 2, 1, 14), IpAddress()).setLabel("filterProfile-OutputFilters-IpFilter-SourceAddress").setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterProfile_OutputFilters_IpFilter_SourceAddress.setStatus('mandatory')
if mibBuilder.loadTexts: filterProfile_OutputFilters_IpFilter_SourceAddress.setDescription('A value to compare with the masked source addresses.')
filterProfile_OutputFilters_IpFilter_DestAddressMask = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 77, 2, 1, 15), IpAddress()).setLabel("filterProfile-OutputFilters-IpFilter-DestAddressMask").setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterProfile_OutputFilters_IpFilter_DestAddressMask.setStatus('mandatory')
if mibBuilder.loadTexts: filterProfile_OutputFilters_IpFilter_DestAddressMask.setDescription('A mask to apply to a destination address before comparison.')
filterProfile_OutputFilters_IpFilter_DestAddress = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 77, 2, 1, 16), IpAddress()).setLabel("filterProfile-OutputFilters-IpFilter-DestAddress").setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterProfile_OutputFilters_IpFilter_DestAddress.setStatus('mandatory')
if mibBuilder.loadTexts: filterProfile_OutputFilters_IpFilter_DestAddress.setDescription('A value to compare with the masked destination addresses.')
filterProfile_OutputFilters_IpFilter_oSrcPortCmp = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 77, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("less", 2), ("eql", 3), ("gtr", 4), ("neq", 5)))).setLabel("filterProfile-OutputFilters-IpFilter-oSrcPortCmp").setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterProfile_OutputFilters_IpFilter_oSrcPortCmp.setStatus('mandatory')
if mibBuilder.loadTexts: filterProfile_OutputFilters_IpFilter_oSrcPortCmp.setDescription('The type of comparison for the source port field. May be set to no comparison.')
filterProfile_OutputFilters_IpFilter_SourcePort = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 77, 2, 1, 18), Integer32()).setLabel("filterProfile-OutputFilters-IpFilter-SourcePort").setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterProfile_OutputFilters_IpFilter_SourcePort.setStatus('mandatory')
if mibBuilder.loadTexts: filterProfile_OutputFilters_IpFilter_SourcePort.setDescription('A value to compare with the source port. The comparison is defined by the sourceTest field.')
filterProfile_OutputFilters_IpFilter_oDstPortCmp = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 77, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("less", 2), ("eql", 3), ("gtr", 4), ("neq", 5)))).setLabel("filterProfile-OutputFilters-IpFilter-oDstPortCmp").setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterProfile_OutputFilters_IpFilter_oDstPortCmp.setStatus('mandatory')
if mibBuilder.loadTexts: filterProfile_OutputFilters_IpFilter_oDstPortCmp.setDescription('The type of comparison for the destination port field. May be set to no comparison.')
filterProfile_OutputFilters_IpFilter_DestPort = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 77, 2, 1, 20), Integer32()).setLabel("filterProfile-OutputFilters-IpFilter-DestPort").setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterProfile_OutputFilters_IpFilter_DestPort.setStatus('mandatory')
if mibBuilder.loadTexts: filterProfile_OutputFilters_IpFilter_DestPort.setDescription('A value to compare with the destination port. The comparison is defined by the destTest field.')
filterProfile_OutputFilters_IpFilter_TcpEstab = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 77, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("filterProfile-OutputFilters-IpFilter-TcpEstab").setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterProfile_OutputFilters_IpFilter_TcpEstab.setStatus('mandatory')
if mibBuilder.loadTexts: filterProfile_OutputFilters_IpFilter_TcpEstab.setDescription('Indicates whether to look at tcp packets in an established connection.')
filterProfile_OutputFilters_RouteFilter_SourceAddressMask = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 77, 2, 1, 22), IpAddress()).setLabel("filterProfile-OutputFilters-RouteFilter-SourceAddressMask").setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterProfile_OutputFilters_RouteFilter_SourceAddressMask.setStatus('mandatory')
if mibBuilder.loadTexts: filterProfile_OutputFilters_RouteFilter_SourceAddressMask.setDescription('A mask to apply to a source address before comparison.')
filterProfile_OutputFilters_RouteFilter_SourceAddress = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 77, 2, 1, 23), IpAddress()).setLabel("filterProfile-OutputFilters-RouteFilter-SourceAddress").setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterProfile_OutputFilters_RouteFilter_SourceAddress.setStatus('mandatory')
if mibBuilder.loadTexts: filterProfile_OutputFilters_RouteFilter_SourceAddress.setDescription('A value to compare with the masked source addresses.')
filterProfile_OutputFilters_RouteFilter_RouteMask = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 77, 2, 1, 24), IpAddress()).setLabel("filterProfile-OutputFilters-RouteFilter-RouteMask").setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterProfile_OutputFilters_RouteFilter_RouteMask.setStatus('mandatory')
if mibBuilder.loadTexts: filterProfile_OutputFilters_RouteFilter_RouteMask.setDescription('A mask to apply to a destination address before comparison.')
filterProfile_OutputFilters_RouteFilter_RouteAddress = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 77, 2, 1, 25), IpAddress()).setLabel("filterProfile-OutputFilters-RouteFilter-RouteAddress").setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterProfile_OutputFilters_RouteFilter_RouteAddress.setStatus('mandatory')
if mibBuilder.loadTexts: filterProfile_OutputFilters_RouteFilter_RouteAddress.setDescription('A value to compare with the masked destination addresses.')
filterProfile_OutputFilters_RouteFilter_AddMetric = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 77, 2, 1, 26), Integer32()).setLabel("filterProfile-OutputFilters-RouteFilter-AddMetric").setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterProfile_OutputFilters_RouteFilter_AddMetric.setStatus('mandatory')
if mibBuilder.loadTexts: filterProfile_OutputFilters_RouteFilter_AddMetric.setDescription('A value to be added to metric of the route, this is valid only when action is add.')
filterProfile_OutputFilters_RouteFilter_Action = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 77, 2, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("accept", 2), ("deny", 3), ("add", 4)))).setLabel("filterProfile-OutputFilters-RouteFilter-Action").setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterProfile_OutputFilters_RouteFilter_Action.setStatus('mandatory')
if mibBuilder.loadTexts: filterProfile_OutputFilters_RouteFilter_Action.setDescription('The type of action taken when match occurs.')
filterProfile_OutputFilters_IpxFilter_SrcNetAddress = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 77, 2, 1, 28), DisplayString()).setLabel("filterProfile-OutputFilters-IpxFilter-SrcNetAddress").setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterProfile_OutputFilters_IpxFilter_SrcNetAddress.setStatus('mandatory')
if mibBuilder.loadTexts: filterProfile_OutputFilters_IpxFilter_SrcNetAddress.setDescription('A value to compare with source network addresses.')
filterProfile_OutputFilters_IpxFilter_DestNetAddress = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 77, 2, 1, 29), DisplayString()).setLabel("filterProfile-OutputFilters-IpxFilter-DestNetAddress").setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterProfile_OutputFilters_IpxFilter_DestNetAddress.setStatus('mandatory')
if mibBuilder.loadTexts: filterProfile_OutputFilters_IpxFilter_DestNetAddress.setDescription('A value to compare with destination network addresses.')
filterProfile_OutputFilters_IpxFilter_SrcNodeAddress = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 77, 2, 1, 30), DisplayString()).setLabel("filterProfile-OutputFilters-IpxFilter-SrcNodeAddress").setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterProfile_OutputFilters_IpxFilter_SrcNodeAddress.setStatus('mandatory')
if mibBuilder.loadTexts: filterProfile_OutputFilters_IpxFilter_SrcNodeAddress.setDescription('A value to compare with source node addresses.')
filterProfile_OutputFilters_IpxFilter_DestNodeAddress = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 77, 2, 1, 31), DisplayString()).setLabel("filterProfile-OutputFilters-IpxFilter-DestNodeAddress").setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterProfile_OutputFilters_IpxFilter_DestNodeAddress.setStatus('mandatory')
if mibBuilder.loadTexts: filterProfile_OutputFilters_IpxFilter_DestNodeAddress.setDescription('A value to compare with destination node addresses.')
filterProfile_OutputFilters_IpxFilter_SrcSocket = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 77, 2, 1, 32), DisplayString()).setLabel("filterProfile-OutputFilters-IpxFilter-SrcSocket").setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterProfile_OutputFilters_IpxFilter_SrcSocket.setStatus('mandatory')
if mibBuilder.loadTexts: filterProfile_OutputFilters_IpxFilter_SrcSocket.setDescription('The type of comparison for the source socket field. May be set to no comparison.')
filterProfile_OutputFilters_IpxFilter_SrcSocketCmp = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 77, 2, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("less", 2), ("eql", 3), ("gtr", 4), ("neq", 5)))).setLabel("filterProfile-OutputFilters-IpxFilter-SrcSocketCmp").setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterProfile_OutputFilters_IpxFilter_SrcSocketCmp.setStatus('mandatory')
if mibBuilder.loadTexts: filterProfile_OutputFilters_IpxFilter_SrcSocketCmp.setDescription('The type of comparison for the source socket field. May be set to no comparison.')
filterProfile_OutputFilters_IpxFilter_DestSocket = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 77, 2, 1, 34), Integer32()).setLabel("filterProfile-OutputFilters-IpxFilter-DestSocket").setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterProfile_OutputFilters_IpxFilter_DestSocket.setStatus('mandatory')
if mibBuilder.loadTexts: filterProfile_OutputFilters_IpxFilter_DestSocket.setDescription('A value to compare with the destination socket. The comparison is defined by the destTest field.')
filterProfile_OutputFilters_IpxFilter_DstSocketCmp = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 77, 2, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("less", 2), ("eql", 3), ("gtr", 4), ("neq", 5)))).setLabel("filterProfile-OutputFilters-IpxFilter-DstSocketCmp").setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterProfile_OutputFilters_IpxFilter_DstSocketCmp.setStatus('mandatory')
if mibBuilder.loadTexts: filterProfile_OutputFilters_IpxFilter_DstSocketCmp.setDescription('The type of comparison for the destination socket field. May be set to no comparison.')
filterProfile_OutputFilters_TosFilter_Protocol = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 77, 2, 1, 36), Integer32()).setLabel("filterProfile-OutputFilters-TosFilter-Protocol").setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterProfile_OutputFilters_TosFilter_Protocol.setStatus('mandatory')
if mibBuilder.loadTexts: filterProfile_OutputFilters_TosFilter_Protocol.setDescription('The protocol number of the protocol you like to support type-of-service. If set to zero this entry will match any IP protocol.')
filterProfile_OutputFilters_TosFilter_SourceAddressMask = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 77, 2, 1, 37), IpAddress()).setLabel("filterProfile-OutputFilters-TosFilter-SourceAddressMask").setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterProfile_OutputFilters_TosFilter_SourceAddressMask.setStatus('mandatory')
if mibBuilder.loadTexts: filterProfile_OutputFilters_TosFilter_SourceAddressMask.setDescription('A mask to apply to a source address before comparison.')
filterProfile_OutputFilters_TosFilter_SourceAddress = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 77, 2, 1, 38), IpAddress()).setLabel("filterProfile-OutputFilters-TosFilter-SourceAddress").setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterProfile_OutputFilters_TosFilter_SourceAddress.setStatus('mandatory')
if mibBuilder.loadTexts: filterProfile_OutputFilters_TosFilter_SourceAddress.setDescription('A value to compare with the masked source addresses.')
filterProfile_OutputFilters_TosFilter_DestAddressMask = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 77, 2, 1, 39), IpAddress()).setLabel("filterProfile-OutputFilters-TosFilter-DestAddressMask").setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterProfile_OutputFilters_TosFilter_DestAddressMask.setStatus('mandatory')
if mibBuilder.loadTexts: filterProfile_OutputFilters_TosFilter_DestAddressMask.setDescription('A mask to apply to a destination address before comparison.')
filterProfile_OutputFilters_TosFilter_DestAddress = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 77, 2, 1, 40), IpAddress()).setLabel("filterProfile-OutputFilters-TosFilter-DestAddress").setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterProfile_OutputFilters_TosFilter_DestAddress.setStatus('mandatory')
if mibBuilder.loadTexts: filterProfile_OutputFilters_TosFilter_DestAddress.setDescription('A value to compare with the masked destination addresses.')
filterProfile_OutputFilters_TosFilter_oSrcPortCmp = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 77, 2, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("less", 2), ("eql", 3), ("gtr", 4), ("neq", 5)))).setLabel("filterProfile-OutputFilters-TosFilter-oSrcPortCmp").setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterProfile_OutputFilters_TosFilter_oSrcPortCmp.setStatus('mandatory')
if mibBuilder.loadTexts: filterProfile_OutputFilters_TosFilter_oSrcPortCmp.setDescription('The type of comparison for the source port field. May be set to no comparison.')
filterProfile_OutputFilters_TosFilter_SourcePort = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 77, 2, 1, 42), Integer32()).setLabel("filterProfile-OutputFilters-TosFilter-SourcePort").setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterProfile_OutputFilters_TosFilter_SourcePort.setStatus('mandatory')
if mibBuilder.loadTexts: filterProfile_OutputFilters_TosFilter_SourcePort.setDescription('A value to compare with the source port. The comparison is defined by the sourceTest field.')
filterProfile_OutputFilters_TosFilter_oDstPortCmp = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 77, 2, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("less", 2), ("eql", 3), ("gtr", 4), ("neq", 5)))).setLabel("filterProfile-OutputFilters-TosFilter-oDstPortCmp").setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterProfile_OutputFilters_TosFilter_oDstPortCmp.setStatus('mandatory')
if mibBuilder.loadTexts: filterProfile_OutputFilters_TosFilter_oDstPortCmp.setDescription('The type of comparison for the destination port field. May be set to no comparison.')
filterProfile_OutputFilters_TosFilter_DestPort = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 77, 2, 1, 44), Integer32()).setLabel("filterProfile-OutputFilters-TosFilter-DestPort").setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterProfile_OutputFilters_TosFilter_DestPort.setStatus('mandatory')
if mibBuilder.loadTexts: filterProfile_OutputFilters_TosFilter_DestPort.setDescription('A value to compare with the destination port. The comparison is defined by the destTest field.')
filterProfile_OutputFilters_TosFilter_Precedence = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 77, 2, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 33, 65, 97, 129, 161, 193, 225))).clone(namedValues=NamedValues(("n-000", 1), ("n-001", 33), ("n-010", 65), ("n-011", 97), ("n-100", 129), ("n-101", 161), ("n-110", 193), ("n-111", 225)))).setLabel("filterProfile-OutputFilters-TosFilter-Precedence").setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterProfile_OutputFilters_TosFilter_Precedence.setStatus('mandatory')
if mibBuilder.loadTexts: filterProfile_OutputFilters_TosFilter_Precedence.setDescription('Tag the precedence bits (priority bits) in the TOS octet of IP datagram header with this value when match occurs.')
filterProfile_OutputFilters_TosFilter_TypeOfService = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 77, 2, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 5, 9, 17))).clone(namedValues=NamedValues(("normal", 1), ("cost", 3), ("reliability", 5), ("throughput", 9), ("latency", 17)))).setLabel("filterProfile-OutputFilters-TosFilter-TypeOfService").setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterProfile_OutputFilters_TosFilter_TypeOfService.setStatus('mandatory')
if mibBuilder.loadTexts: filterProfile_OutputFilters_TosFilter_TypeOfService.setDescription('Tag the type of service field in the TOS octet of IP datagram header with this value when match occurs.')
filterProfile_OutputFilters_TosFilter_MarkingType = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 77, 2, 1, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("precedenceTos", 1), ("dscp", 2)))).setLabel("filterProfile-OutputFilters-TosFilter-MarkingType").setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterProfile_OutputFilters_TosFilter_MarkingType.setStatus('mandatory')
if mibBuilder.loadTexts: filterProfile_OutputFilters_TosFilter_MarkingType.setDescription('Select type of packet marking.')
filterProfile_OutputFilters_TosFilter_Dscp = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 77, 2, 1, 48), DisplayString()).setLabel("filterProfile-OutputFilters-TosFilter-Dscp").setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterProfile_OutputFilters_TosFilter_Dscp.setStatus('mandatory')
if mibBuilder.loadTexts: filterProfile_OutputFilters_TosFilter_Dscp.setDescription('DSCP tag to be used in marking of the packets (if marking-type = dscp).')
mibfilterProfile_InputFiltersTable = MibTable((1, 3, 6, 1, 4, 1, 529, 23, 77, 3), ).setLabel("mibfilterProfile-InputFiltersTable")
if mibBuilder.loadTexts: mibfilterProfile_InputFiltersTable.setStatus('mandatory')
if mibBuilder.loadTexts: mibfilterProfile_InputFiltersTable.setDescription('A list of mibfilterProfile__input_filters profile entries.')
mibfilterProfile_InputFiltersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 529, 23, 77, 3, 1), ).setLabel("mibfilterProfile-InputFiltersEntry").setIndexNames((0, "ASCEND-MIBFILTR-MIB", "filterProfile-InputFilters-FilterName"), (0, "ASCEND-MIBFILTR-MIB", "filterProfile-InputFilters-Index-o"))
if mibBuilder.loadTexts: mibfilterProfile_InputFiltersEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mibfilterProfile_InputFiltersEntry.setDescription('A mibfilterProfile__input_filters entry containing objects that maps to the parameters of mibfilterProfile__input_filters profile.')
filterProfile_InputFilters_FilterName = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 77, 3, 1, 1), DisplayString()).setLabel("filterProfile-InputFilters-FilterName").setMaxAccess("readonly")
if mibBuilder.loadTexts: filterProfile_InputFilters_FilterName.setStatus('mandatory')
if mibBuilder.loadTexts: filterProfile_InputFilters_FilterName.setDescription('')
filterProfile_InputFilters_Index_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 77, 3, 1, 2), Integer32()).setLabel("filterProfile-InputFilters-Index-o").setMaxAccess("readonly")
if mibBuilder.loadTexts: filterProfile_InputFilters_Index_o.setStatus('mandatory')
if mibBuilder.loadTexts: filterProfile_InputFilters_Index_o.setDescription('')
filterProfile_InputFilters_ValidEntry = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 77, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("filterProfile-InputFilters-ValidEntry").setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterProfile_InputFilters_ValidEntry.setStatus('mandatory')
if mibBuilder.loadTexts: filterProfile_InputFilters_ValidEntry.setDescription('When TRUE, this filter entry has been defined and properly initialized. When FALSE, this entry should be skipped when filtering.')
filterProfile_InputFilters_Forward = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 77, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("filterProfile-InputFilters-Forward").setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterProfile_InputFilters_Forward.setStatus('mandatory')
if mibBuilder.loadTexts: filterProfile_InputFilters_Forward.setDescription('When TRUE a packet matching this filter will be forwarded or restart the idle timer. When FALSE a packet matching this filter will be dropped or not restart the idle timer.')
filterProfile_InputFilters_oType = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 77, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("genericFilter", 1), ("ipFilter", 2), ("routeFilter", 3), ("ipxFilter", 4), ("tosFilter", 5)))).setLabel("filterProfile-InputFilters-oType").setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterProfile_InputFilters_oType.setStatus('mandatory')
if mibBuilder.loadTexts: filterProfile_InputFilters_oType.setDescription('The type of filter contained in this entry. Used to select which of the following fields should be used.')
filterProfile_InputFilters_GenFilter_Offset = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 77, 3, 1, 6), Integer32()).setLabel("filterProfile-InputFilters-GenFilter-Offset").setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterProfile_InputFilters_GenFilter_Offset.setStatus('mandatory')
if mibBuilder.loadTexts: filterProfile_InputFilters_GenFilter_Offset.setDescription('Offset from start of frame of data to test.')
filterProfile_InputFilters_GenFilter_Len = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 77, 3, 1, 7), Integer32()).setLabel("filterProfile-InputFilters-GenFilter-Len").setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterProfile_InputFilters_GenFilter_Len.setStatus('mandatory')
if mibBuilder.loadTexts: filterProfile_InputFilters_GenFilter_Len.setDescription('Number of octets to test. Max value is 8 octets.')
filterProfile_InputFilters_GenFilter_More = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 77, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("filterProfile-InputFilters-GenFilter-More").setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterProfile_InputFilters_GenFilter_More.setStatus('mandatory')
if mibBuilder.loadTexts: filterProfile_InputFilters_GenFilter_More.setDescription('Include next entry in as part of filter.')
filterProfile_InputFilters_GenFilter_CompNeq = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 77, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("filterProfile-InputFilters-GenFilter-CompNeq").setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterProfile_InputFilters_GenFilter_CompNeq.setStatus('mandatory')
if mibBuilder.loadTexts: filterProfile_InputFilters_GenFilter_CompNeq.setDescription('Defines type of comparison( Equals(FALSE) or Notequals(TRUE). Default is Equals.')
filterProfile_InputFilters_GenFilter_Mask = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 77, 3, 1, 10), DisplayString()).setLabel("filterProfile-InputFilters-GenFilter-Mask").setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterProfile_InputFilters_GenFilter_Mask.setStatus('mandatory')
if mibBuilder.loadTexts: filterProfile_InputFilters_GenFilter_Mask.setDescription('A mask to be applied to the data at offset. Only the first len octets will be applied.')
filterProfile_InputFilters_GenFilter_Value = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 77, 3, 1, 11), DisplayString()).setLabel("filterProfile-InputFilters-GenFilter-Value").setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterProfile_InputFilters_GenFilter_Value.setStatus('mandatory')
if mibBuilder.loadTexts: filterProfile_InputFilters_GenFilter_Value.setDescription('The value to compare with the masked data. Only the first len octets will be compared.')
filterProfile_InputFilters_IpFilter_Protocol = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 77, 3, 1, 12), Integer32()).setLabel("filterProfile-InputFilters-IpFilter-Protocol").setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterProfile_InputFilters_IpFilter_Protocol.setStatus('mandatory')
if mibBuilder.loadTexts: filterProfile_InputFilters_IpFilter_Protocol.setDescription('The protocol number of the protocol to filter for. If set to zero this entry will match any IP protocol.')
filterProfile_InputFilters_IpFilter_SourceAddressMask = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 77, 3, 1, 13), IpAddress()).setLabel("filterProfile-InputFilters-IpFilter-SourceAddressMask").setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterProfile_InputFilters_IpFilter_SourceAddressMask.setStatus('mandatory')
if mibBuilder.loadTexts: filterProfile_InputFilters_IpFilter_SourceAddressMask.setDescription('A mask to apply to a source address before comparison.')
filterProfile_InputFilters_IpFilter_SourceAddress = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 77, 3, 1, 14), IpAddress()).setLabel("filterProfile-InputFilters-IpFilter-SourceAddress").setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterProfile_InputFilters_IpFilter_SourceAddress.setStatus('mandatory')
if mibBuilder.loadTexts: filterProfile_InputFilters_IpFilter_SourceAddress.setDescription('A value to compare with the masked source addresses.')
filterProfile_InputFilters_IpFilter_DestAddressMask = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 77, 3, 1, 15), IpAddress()).setLabel("filterProfile-InputFilters-IpFilter-DestAddressMask").setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterProfile_InputFilters_IpFilter_DestAddressMask.setStatus('mandatory')
if mibBuilder.loadTexts: filterProfile_InputFilters_IpFilter_DestAddressMask.setDescription('A mask to apply to a destination address before comparison.')
filterProfile_InputFilters_IpFilter_DestAddress = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 77, 3, 1, 16), IpAddress()).setLabel("filterProfile-InputFilters-IpFilter-DestAddress").setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterProfile_InputFilters_IpFilter_DestAddress.setStatus('mandatory')
if mibBuilder.loadTexts: filterProfile_InputFilters_IpFilter_DestAddress.setDescription('A value to compare with the masked destination addresses.')
filterProfile_InputFilters_IpFilter_oSrcPortCmp = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 77, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("less", 2), ("eql", 3), ("gtr", 4), ("neq", 5)))).setLabel("filterProfile-InputFilters-IpFilter-oSrcPortCmp").setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterProfile_InputFilters_IpFilter_oSrcPortCmp.setStatus('mandatory')
if mibBuilder.loadTexts: filterProfile_InputFilters_IpFilter_oSrcPortCmp.setDescription('The type of comparison for the source port field. May be set to no comparison.')
filterProfile_InputFilters_IpFilter_SourcePort = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 77, 3, 1, 18), Integer32()).setLabel("filterProfile-InputFilters-IpFilter-SourcePort").setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterProfile_InputFilters_IpFilter_SourcePort.setStatus('mandatory')
if mibBuilder.loadTexts: filterProfile_InputFilters_IpFilter_SourcePort.setDescription('A value to compare with the source port. The comparison is defined by the sourceTest field.')
filterProfile_InputFilters_IpFilter_oDstPortCmp = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 77, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("less", 2), ("eql", 3), ("gtr", 4), ("neq", 5)))).setLabel("filterProfile-InputFilters-IpFilter-oDstPortCmp").setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterProfile_InputFilters_IpFilter_oDstPortCmp.setStatus('mandatory')
if mibBuilder.loadTexts: filterProfile_InputFilters_IpFilter_oDstPortCmp.setDescription('The type of comparison for the destination port field. May be set to no comparison.')
filterProfile_InputFilters_IpFilter_DestPort = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 77, 3, 1, 20), Integer32()).setLabel("filterProfile-InputFilters-IpFilter-DestPort").setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterProfile_InputFilters_IpFilter_DestPort.setStatus('mandatory')
if mibBuilder.loadTexts: filterProfile_InputFilters_IpFilter_DestPort.setDescription('A value to compare with the destination port. The comparison is defined by the destTest field.')
filterProfile_InputFilters_IpFilter_TcpEstab = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 77, 3, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("filterProfile-InputFilters-IpFilter-TcpEstab").setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterProfile_InputFilters_IpFilter_TcpEstab.setStatus('mandatory')
if mibBuilder.loadTexts: filterProfile_InputFilters_IpFilter_TcpEstab.setDescription('Indicates whether to look at tcp packets in an established connection.')
filterProfile_InputFilters_RouteFilter_SourceAddressMask = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 77, 3, 1, 22), IpAddress()).setLabel("filterProfile-InputFilters-RouteFilter-SourceAddressMask").setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterProfile_InputFilters_RouteFilter_SourceAddressMask.setStatus('mandatory')
if mibBuilder.loadTexts: filterProfile_InputFilters_RouteFilter_SourceAddressMask.setDescription('A mask to apply to a source address before comparison.')
filterProfile_InputFilters_RouteFilter_SourceAddress = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 77, 3, 1, 23), IpAddress()).setLabel("filterProfile-InputFilters-RouteFilter-SourceAddress").setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterProfile_InputFilters_RouteFilter_SourceAddress.setStatus('mandatory')
if mibBuilder.loadTexts: filterProfile_InputFilters_RouteFilter_SourceAddress.setDescription('A value to compare with the masked source addresses.')
filterProfile_InputFilters_RouteFilter_RouteMask = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 77, 3, 1, 24), IpAddress()).setLabel("filterProfile-InputFilters-RouteFilter-RouteMask").setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterProfile_InputFilters_RouteFilter_RouteMask.setStatus('mandatory')
if mibBuilder.loadTexts: filterProfile_InputFilters_RouteFilter_RouteMask.setDescription('A mask to apply to a destination address before comparison.')
filterProfile_InputFilters_RouteFilter_RouteAddress = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 77, 3, 1, 25), IpAddress()).setLabel("filterProfile-InputFilters-RouteFilter-RouteAddress").setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterProfile_InputFilters_RouteFilter_RouteAddress.setStatus('mandatory')
if mibBuilder.loadTexts: filterProfile_InputFilters_RouteFilter_RouteAddress.setDescription('A value to compare with the masked destination addresses.')
filterProfile_InputFilters_RouteFilter_AddMetric = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 77, 3, 1, 26), Integer32()).setLabel("filterProfile-InputFilters-RouteFilter-AddMetric").setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterProfile_InputFilters_RouteFilter_AddMetric.setStatus('mandatory')
if mibBuilder.loadTexts: filterProfile_InputFilters_RouteFilter_AddMetric.setDescription('A value to be added to metric of the route, this is valid only when action is add.')
filterProfile_InputFilters_RouteFilter_Action = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 77, 3, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("accept", 2), ("deny", 3), ("add", 4)))).setLabel("filterProfile-InputFilters-RouteFilter-Action").setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterProfile_InputFilters_RouteFilter_Action.setStatus('mandatory')
if mibBuilder.loadTexts: filterProfile_InputFilters_RouteFilter_Action.setDescription('The type of action taken when match occurs.')
filterProfile_InputFilters_IpxFilter_SrcNetAddress = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 77, 3, 1, 28), DisplayString()).setLabel("filterProfile-InputFilters-IpxFilter-SrcNetAddress").setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterProfile_InputFilters_IpxFilter_SrcNetAddress.setStatus('mandatory')
if mibBuilder.loadTexts: filterProfile_InputFilters_IpxFilter_SrcNetAddress.setDescription('A value to compare with source network addresses.')
filterProfile_InputFilters_IpxFilter_DestNetAddress = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 77, 3, 1, 29), DisplayString()).setLabel("filterProfile-InputFilters-IpxFilter-DestNetAddress").setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterProfile_InputFilters_IpxFilter_DestNetAddress.setStatus('mandatory')
if mibBuilder.loadTexts: filterProfile_InputFilters_IpxFilter_DestNetAddress.setDescription('A value to compare with destination network addresses.')
filterProfile_InputFilters_IpxFilter_SrcNodeAddress = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 77, 3, 1, 30), DisplayString()).setLabel("filterProfile-InputFilters-IpxFilter-SrcNodeAddress").setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterProfile_InputFilters_IpxFilter_SrcNodeAddress.setStatus('mandatory')
if mibBuilder.loadTexts: filterProfile_InputFilters_IpxFilter_SrcNodeAddress.setDescription('A value to compare with source node addresses.')
filterProfile_InputFilters_IpxFilter_DestNodeAddress = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 77, 3, 1, 31), DisplayString()).setLabel("filterProfile-InputFilters-IpxFilter-DestNodeAddress").setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterProfile_InputFilters_IpxFilter_DestNodeAddress.setStatus('mandatory')
if mibBuilder.loadTexts: filterProfile_InputFilters_IpxFilter_DestNodeAddress.setDescription('A value to compare with destination node addresses.')
filterProfile_InputFilters_IpxFilter_SrcSocket = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 77, 3, 1, 32), DisplayString()).setLabel("filterProfile-InputFilters-IpxFilter-SrcSocket").setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterProfile_InputFilters_IpxFilter_SrcSocket.setStatus('mandatory')
if mibBuilder.loadTexts: filterProfile_InputFilters_IpxFilter_SrcSocket.setDescription('The type of comparison for the source socket field. May be set to no comparison.')
filterProfile_InputFilters_IpxFilter_SrcSocketCmp = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 77, 3, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("less", 2), ("eql", 3), ("gtr", 4), ("neq", 5)))).setLabel("filterProfile-InputFilters-IpxFilter-SrcSocketCmp").setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterProfile_InputFilters_IpxFilter_SrcSocketCmp.setStatus('mandatory')
if mibBuilder.loadTexts: filterProfile_InputFilters_IpxFilter_SrcSocketCmp.setDescription('The type of comparison for the source socket field. May be set to no comparison.')
filterProfile_InputFilters_IpxFilter_DestSocket = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 77, 3, 1, 34), Integer32()).setLabel("filterProfile-InputFilters-IpxFilter-DestSocket").setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterProfile_InputFilters_IpxFilter_DestSocket.setStatus('mandatory')
if mibBuilder.loadTexts: filterProfile_InputFilters_IpxFilter_DestSocket.setDescription('A value to compare with the destination socket. The comparison is defined by the destTest field.')
filterProfile_InputFilters_IpxFilter_DstSocketCmp = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 77, 3, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("less", 2), ("eql", 3), ("gtr", 4), ("neq", 5)))).setLabel("filterProfile-InputFilters-IpxFilter-DstSocketCmp").setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterProfile_InputFilters_IpxFilter_DstSocketCmp.setStatus('mandatory')
if mibBuilder.loadTexts: filterProfile_InputFilters_IpxFilter_DstSocketCmp.setDescription('The type of comparison for the destination socket field. May be set to no comparison.')
filterProfile_InputFilters_TosFilter_Protocol = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 77, 3, 1, 36), Integer32()).setLabel("filterProfile-InputFilters-TosFilter-Protocol").setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterProfile_InputFilters_TosFilter_Protocol.setStatus('mandatory')
if mibBuilder.loadTexts: filterProfile_InputFilters_TosFilter_Protocol.setDescription('The protocol number of the protocol you like to support type-of-service. If set to zero this entry will match any IP protocol.')
filterProfile_InputFilters_TosFilter_SourceAddressMask = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 77, 3, 1, 37), IpAddress()).setLabel("filterProfile-InputFilters-TosFilter-SourceAddressMask").setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterProfile_InputFilters_TosFilter_SourceAddressMask.setStatus('mandatory')
if mibBuilder.loadTexts: filterProfile_InputFilters_TosFilter_SourceAddressMask.setDescription('A mask to apply to a source address before comparison.')
filterProfile_InputFilters_TosFilter_SourceAddress = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 77, 3, 1, 38), IpAddress()).setLabel("filterProfile-InputFilters-TosFilter-SourceAddress").setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterProfile_InputFilters_TosFilter_SourceAddress.setStatus('mandatory')
if mibBuilder.loadTexts: filterProfile_InputFilters_TosFilter_SourceAddress.setDescription('A value to compare with the masked source addresses.')
filterProfile_InputFilters_TosFilter_DestAddressMask = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 77, 3, 1, 39), IpAddress()).setLabel("filterProfile-InputFilters-TosFilter-DestAddressMask").setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterProfile_InputFilters_TosFilter_DestAddressMask.setStatus('mandatory')
if mibBuilder.loadTexts: filterProfile_InputFilters_TosFilter_DestAddressMask.setDescription('A mask to apply to a destination address before comparison.')
filterProfile_InputFilters_TosFilter_DestAddress = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 77, 3, 1, 40), IpAddress()).setLabel("filterProfile-InputFilters-TosFilter-DestAddress").setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterProfile_InputFilters_TosFilter_DestAddress.setStatus('mandatory')
if mibBuilder.loadTexts: filterProfile_InputFilters_TosFilter_DestAddress.setDescription('A value to compare with the masked destination addresses.')
filterProfile_InputFilters_TosFilter_oSrcPortCmp = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 77, 3, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("less", 2), ("eql", 3), ("gtr", 4), ("neq", 5)))).setLabel("filterProfile-InputFilters-TosFilter-oSrcPortCmp").setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterProfile_InputFilters_TosFilter_oSrcPortCmp.setStatus('mandatory')
if mibBuilder.loadTexts: filterProfile_InputFilters_TosFilter_oSrcPortCmp.setDescription('The type of comparison for the source port field. May be set to no comparison.')
filterProfile_InputFilters_TosFilter_SourcePort = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 77, 3, 1, 42), Integer32()).setLabel("filterProfile-InputFilters-TosFilter-SourcePort").setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterProfile_InputFilters_TosFilter_SourcePort.setStatus('mandatory')
if mibBuilder.loadTexts: filterProfile_InputFilters_TosFilter_SourcePort.setDescription('A value to compare with the source port. The comparison is defined by the sourceTest field.')
filterProfile_InputFilters_TosFilter_oDstPortCmp = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 77, 3, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("less", 2), ("eql", 3), ("gtr", 4), ("neq", 5)))).setLabel("filterProfile-InputFilters-TosFilter-oDstPortCmp").setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterProfile_InputFilters_TosFilter_oDstPortCmp.setStatus('mandatory')
if mibBuilder.loadTexts: filterProfile_InputFilters_TosFilter_oDstPortCmp.setDescription('The type of comparison for the destination port field. May be set to no comparison.')
filterProfile_InputFilters_TosFilter_DestPort = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 77, 3, 1, 44), Integer32()).setLabel("filterProfile-InputFilters-TosFilter-DestPort").setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterProfile_InputFilters_TosFilter_DestPort.setStatus('mandatory')
if mibBuilder.loadTexts: filterProfile_InputFilters_TosFilter_DestPort.setDescription('A value to compare with the destination port. The comparison is defined by the destTest field.')
filterProfile_InputFilters_TosFilter_Precedence = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 77, 3, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 33, 65, 97, 129, 161, 193, 225))).clone(namedValues=NamedValues(("n-000", 1), ("n-001", 33), ("n-010", 65), ("n-011", 97), ("n-100", 129), ("n-101", 161), ("n-110", 193), ("n-111", 225)))).setLabel("filterProfile-InputFilters-TosFilter-Precedence").setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterProfile_InputFilters_TosFilter_Precedence.setStatus('mandatory')
if mibBuilder.loadTexts: filterProfile_InputFilters_TosFilter_Precedence.setDescription('Tag the precedence bits (priority bits) in the TOS octet of IP datagram header with this value when match occurs.')
filterProfile_InputFilters_TosFilter_TypeOfService = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 77, 3, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 5, 9, 17))).clone(namedValues=NamedValues(("normal", 1), ("cost", 3), ("reliability", 5), ("throughput", 9), ("latency", 17)))).setLabel("filterProfile-InputFilters-TosFilter-TypeOfService").setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterProfile_InputFilters_TosFilter_TypeOfService.setStatus('mandatory')
if mibBuilder.loadTexts: filterProfile_InputFilters_TosFilter_TypeOfService.setDescription('Tag the type of service field in the TOS octet of IP datagram header with this value when match occurs.')
filterProfile_InputFilters_TosFilter_MarkingType = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 77, 3, 1, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("precedenceTos", 1), ("dscp", 2)))).setLabel("filterProfile-InputFilters-TosFilter-MarkingType").setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterProfile_InputFilters_TosFilter_MarkingType.setStatus('mandatory')
if mibBuilder.loadTexts: filterProfile_InputFilters_TosFilter_MarkingType.setDescription('Select type of packet marking.')
filterProfile_InputFilters_TosFilter_Dscp = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 77, 3, 1, 48), DisplayString()).setLabel("filterProfile-InputFilters-TosFilter-Dscp").setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterProfile_InputFilters_TosFilter_Dscp.setStatus('mandatory')
if mibBuilder.loadTexts: filterProfile_InputFilters_TosFilter_Dscp.setDescription('DSCP tag to be used in marking of the packets (if marking-type = dscp).')
mibBuilder.exportSymbols("ASCEND-MIBFILTR-MIB", filterProfile_InputFilters_ValidEntry=filterProfile_InputFilters_ValidEntry, filterProfile_InputFilters_IpFilter_DestAddress=filterProfile_InputFilters_IpFilter_DestAddress, filterProfile_OutputFilters_RouteFilter_SourceAddress=filterProfile_OutputFilters_RouteFilter_SourceAddress, filterProfile_InputFilters_GenFilter_CompNeq=filterProfile_InputFilters_GenFilter_CompNeq, filterProfile_InputFilters_TosFilter_Protocol=filterProfile_InputFilters_TosFilter_Protocol, filterProfile_InputFilters_IpFilter_DestAddressMask=filterProfile_InputFilters_IpFilter_DestAddressMask, filterProfile_OutputFilters_oType=filterProfile_OutputFilters_oType, filterProfile_OutputFilters_RouteFilter_RouteMask=filterProfile_OutputFilters_RouteFilter_RouteMask, filterProfile_OutputFilters_TosFilter_Dscp=filterProfile_OutputFilters_TosFilter_Dscp, filterProfile_OutputFilters_IpxFilter_DestSocket=filterProfile_OutputFilters_IpxFilter_DestSocket, filterProfile_OutputFilters_TosFilter_Protocol=filterProfile_OutputFilters_TosFilter_Protocol, filterProfile_OutputFilters_FilterName=filterProfile_OutputFilters_FilterName, filterProfile_InputFilters_RouteFilter_Action=filterProfile_InputFilters_RouteFilter_Action, filterProfile_OutputFilters_IpFilter_Protocol=filterProfile_OutputFilters_IpFilter_Protocol, filterProfile_OutputFilters_IpFilter_DestAddressMask=filterProfile_OutputFilters_IpFilter_DestAddressMask, filterProfile_OutputFilters_TosFilter_DestAddress=filterProfile_OutputFilters_TosFilter_DestAddress, filterProfile_InputFilters_TosFilter_oDstPortCmp=filterProfile_InputFilters_TosFilter_oDstPortCmp, filterProfile_InputFilters_IpFilter_Protocol=filterProfile_InputFilters_IpFilter_Protocol, filterProfile_InputFilters_TosFilter_oSrcPortCmp=filterProfile_InputFilters_TosFilter_oSrcPortCmp, filterProfile_InputFilters_IpxFilter_SrcSocketCmp=filterProfile_InputFilters_IpxFilter_SrcSocketCmp, filterProfile_InputFilters_RouteFilter_RouteAddress=filterProfile_InputFilters_RouteFilter_RouteAddress, filterProfile_OutputFilters_RouteFilter_SourceAddressMask=filterProfile_OutputFilters_RouteFilter_SourceAddressMask, filterProfile_OutputFilters_GenFilter_Offset=filterProfile_OutputFilters_GenFilter_Offset, filterProfile_InputFilters_TosFilter_SourceAddress=filterProfile_InputFilters_TosFilter_SourceAddress, filterProfile_OutputFilters_IpxFilter_DstSocketCmp=filterProfile_OutputFilters_IpxFilter_DstSocketCmp, mibfilterProfile=mibfilterProfile, filterProfile_InputFilters_TosFilter_DestPort=filterProfile_InputFilters_TosFilter_DestPort, filterProfile_InputFilters_IpxFilter_SrcNetAddress=filterProfile_InputFilters_IpxFilter_SrcNetAddress, filterProfile_OutputFilters_IpxFilter_DestNetAddress=filterProfile_OutputFilters_IpxFilter_DestNetAddress, filterProfile_InputFilters_Forward=filterProfile_InputFilters_Forward, filterProfile_OutputFilters_TosFilter_SourceAddress=filterProfile_OutputFilters_TosFilter_SourceAddress, filterProfile_InputFilters_TosFilter_SourcePort=filterProfile_InputFilters_TosFilter_SourcePort, filterProfile_InputFilters_IpFilter_DestPort=filterProfile_InputFilters_IpFilter_DestPort, filterProfile_InputFilters_RouteFilter_RouteMask=filterProfile_InputFilters_RouteFilter_RouteMask, filterProfile_OutputFilters_IpFilter_oSrcPortCmp=filterProfile_OutputFilters_IpFilter_oSrcPortCmp, filterProfile_OutputFilters_GenFilter_More=filterProfile_OutputFilters_GenFilter_More, filterProfile_OutputFilters_TosFilter_Precedence=filterProfile_OutputFilters_TosFilter_Precedence, filterProfile_OutputFilters_IpxFilter_SrcNetAddress=filterProfile_OutputFilters_IpxFilter_SrcNetAddress, filterProfile_InputFilters_Index_o=filterProfile_InputFilters_Index_o, filterProfile_InputFilters_TosFilter_SourceAddressMask=filterProfile_InputFilters_TosFilter_SourceAddressMask, filterProfile_InputFilters_oType=filterProfile_InputFilters_oType, filterProfile_OutputFilters_IpxFilter_DestNodeAddress=filterProfile_OutputFilters_IpxFilter_DestNodeAddress, filterProfile_OutputFilters_ValidEntry=filterProfile_OutputFilters_ValidEntry, filterProfile_InputFilters_IpFilter_TcpEstab=filterProfile_InputFilters_IpFilter_TcpEstab, filterProfile_OutputFilters_RouteFilter_AddMetric=filterProfile_OutputFilters_RouteFilter_AddMetric, filterProfile_OutputFilters_IpxFilter_SrcNodeAddress=filterProfile_OutputFilters_IpxFilter_SrcNodeAddress, filterProfile_InputFilters_RouteFilter_SourceAddress=filterProfile_InputFilters_RouteFilter_SourceAddress, filterProfile_OutputFilters_IpFilter_oDstPortCmp=filterProfile_OutputFilters_IpFilter_oDstPortCmp, filterProfile_OutputFilters_GenFilter_Mask=filterProfile_OutputFilters_GenFilter_Mask, filterProfile_OutputFilters_TosFilter_SourceAddressMask=filterProfile_OutputFilters_TosFilter_SourceAddressMask, filterProfile_InputFilters_GenFilter_Offset=filterProfile_InputFilters_GenFilter_Offset, DisplayString=DisplayString, filterProfile_OutputFilters_IpFilter_TcpEstab=filterProfile_OutputFilters_IpFilter_TcpEstab, filterProfile_OutputFilters_IpFilter_SourceAddressMask=filterProfile_OutputFilters_IpFilter_SourceAddressMask, mibfilterProfileTable=mibfilterProfileTable, filterProfile_InputFilters_RouteFilter_AddMetric=filterProfile_InputFilters_RouteFilter_AddMetric, filterProfile_InputFilters_IpxFilter_DestNetAddress=filterProfile_InputFilters_IpxFilter_DestNetAddress, filterProfile_InputFilters_IpFilter_SourceAddress=filterProfile_InputFilters_IpFilter_SourceAddress, filterProfile_OutputFilters_TosFilter_oDstPortCmp=filterProfile_OutputFilters_TosFilter_oDstPortCmp, filterProfile_OutputFilters_GenFilter_Value=filterProfile_OutputFilters_GenFilter_Value, filterProfile_InputFilters_FilterName=filterProfile_InputFilters_FilterName, filterProfile_InputFilters_TosFilter_DestAddressMask=filterProfile_InputFilters_TosFilter_DestAddressMask, filterProfile_OutputFilters_IpFilter_DestPort=filterProfile_OutputFilters_IpFilter_DestPort, filterProfile_OutputFilters_IpxFilter_SrcSocket=filterProfile_OutputFilters_IpxFilter_SrcSocket, mibfilterProfile_OutputFiltersEntry=mibfilterProfile_OutputFiltersEntry, mibfilterProfile_InputFiltersTable=mibfilterProfile_InputFiltersTable, filterProfile_OutputFilters_TosFilter_DestAddressMask=filterProfile_OutputFilters_TosFilter_DestAddressMask, filterProfile_OutputFilters_RouteFilter_RouteAddress=filterProfile_OutputFilters_RouteFilter_RouteAddress, filterProfile_InputFilters_IpFilter_SourceAddressMask=filterProfile_InputFilters_IpFilter_SourceAddressMask, filterProfile_InputFilters_TosFilter_TypeOfService=filterProfile_InputFilters_TosFilter_TypeOfService, filterProfile_InputFilters_IpxFilter_SrcNodeAddress=filterProfile_InputFilters_IpxFilter_SrcNodeAddress, filterProfile_InputFilters_IpFilter_SourcePort=filterProfile_InputFilters_IpFilter_SourcePort, filterProfile_OutputFilters_TosFilter_TypeOfService=filterProfile_OutputFilters_TosFilter_TypeOfService, filterProfile_OutputFilters_IpFilter_DestAddress=filterProfile_OutputFilters_IpFilter_DestAddress, filterProfile_OutputFilters_TosFilter_SourcePort=filterProfile_OutputFilters_TosFilter_SourcePort, filterProfile_OutputFilters_IpFilter_SourcePort=filterProfile_OutputFilters_IpFilter_SourcePort, filterProfile_InputFilters_IpxFilter_DestNodeAddress=filterProfile_InputFilters_IpxFilter_DestNodeAddress, filterProfile_Action_o=filterProfile_Action_o, filterProfile_InputFilters_RouteFilter_SourceAddressMask=filterProfile_InputFilters_RouteFilter_SourceAddressMask, filterProfile_OutputFilters_IpxFilter_SrcSocketCmp=filterProfile_OutputFilters_IpxFilter_SrcSocketCmp, filterProfile_InputFilters_GenFilter_Mask=filterProfile_InputFilters_GenFilter_Mask, filterProfile_InputFilters_IpxFilter_DstSocketCmp=filterProfile_InputFilters_IpxFilter_DstSocketCmp, filterProfile_OutputFilters_IpFilter_SourceAddress=filterProfile_OutputFilters_IpFilter_SourceAddress, filterProfile_FilterName=filterProfile_FilterName, filterProfile_InputFilters_IpFilter_oSrcPortCmp=filterProfile_InputFilters_IpFilter_oSrcPortCmp, filterProfile_OutputFilters_TosFilter_MarkingType=filterProfile_OutputFilters_TosFilter_MarkingType, filterProfile_InputFilters_IpFilter_oDstPortCmp=filterProfile_InputFilters_IpFilter_oDstPortCmp, mibfilterProfileEntry=mibfilterProfileEntry, filterProfile_OutputFilters_TosFilter_oSrcPortCmp=filterProfile_OutputFilters_TosFilter_oSrcPortCmp, filterProfile_OutputFilters_GenFilter_CompNeq=filterProfile_OutputFilters_GenFilter_CompNeq, filterProfile_OutputFilters_Forward=filterProfile_OutputFilters_Forward, filterProfile_InputFilters_GenFilter_More=filterProfile_InputFilters_GenFilter_More, filterProfile_InputFilters_IpxFilter_SrcSocket=filterProfile_InputFilters_IpxFilter_SrcSocket, filterProfile_InputFilters_GenFilter_Value=filterProfile_InputFilters_GenFilter_Value, filterProfile_InputFilters_TosFilter_Precedence=filterProfile_InputFilters_TosFilter_Precedence, mibfilterProfile_OutputFiltersTable=mibfilterProfile_OutputFiltersTable, filterProfile_OutputFilters_TosFilter_DestPort=filterProfile_OutputFilters_TosFilter_DestPort, filterProfile_OutputFilters_Index_o=filterProfile_OutputFilters_Index_o, mibfilterProfile_InputFiltersEntry=mibfilterProfile_InputFiltersEntry, filterProfile_InputFilters_TosFilter_MarkingType=filterProfile_InputFilters_TosFilter_MarkingType, filterProfile_InputFilters_IpxFilter_DestSocket=filterProfile_InputFilters_IpxFilter_DestSocket, filterProfile_InputFilters_GenFilter_Len=filterProfile_InputFilters_GenFilter_Len, filterProfile_OutputFilters_RouteFilter_Action=filterProfile_OutputFilters_RouteFilter_Action, filterProfile_InputFilters_TosFilter_Dscp=filterProfile_InputFilters_TosFilter_Dscp, filterProfile_InputFilters_TosFilter_DestAddress=filterProfile_InputFilters_TosFilter_DestAddress, filterProfile_OutputFilters_GenFilter_Len=filterProfile_OutputFilters_GenFilter_Len)
