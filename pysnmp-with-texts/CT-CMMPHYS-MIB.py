#
# PySNMP MIB module CT-CMMPHYS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CT-CMMPHYS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:28:33 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint")
mBusBoardID, = mibBuilder.importSymbols("CT-HSIMPHYS-MIB", "mBusBoardID")
ctCMM, = mibBuilder.importSymbols("CTRON-MIB-NAMES", "ctCMM")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Gauge32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Unsigned32, Counter64, NotificationType, ModuleIdentity, Integer32, Bits, ObjectIdentity, Counter32, MibIdentifier, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Unsigned32", "Counter64", "NotificationType", "ModuleIdentity", "Integer32", "Bits", "ObjectIdentity", "Counter32", "MibIdentifier", "TimeTicks")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
cmmModemInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 18, 1))
cmmBoardTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 18, 1, 1), )
if mibBuilder.loadTexts: cmmBoardTable.setStatus('mandatory')
if mibBuilder.loadTexts: cmmBoardTable.setDescription('A list of CMM boards present in this unit.')
cmmBoardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 18, 1, 1, 1), ).setIndexNames((0, "CT-HSIMPHYS-MIB", "mBusBoardID"))
if mibBuilder.loadTexts: cmmBoardEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cmmBoardEntry.setDescription('A CMM board present in this unit.')
cmmBoardType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 18, 1, 1, 1, 1), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmBoardType.setStatus('mandatory')
if mibBuilder.loadTexts: cmmBoardType.setDescription("The value of this object uniquely defines the CMM board type - a vendor's authoritative identification for a module. By convention, this value is allocated within the SMI enterprises subtree(1.3.6.1.4.1), and provides an easy and unambiguous means for determining the type of board.")
cmmNumModules = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 18, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmNumModules.setStatus('mandatory')
if mibBuilder.loadTexts: cmmNumModules.setDescription('The value of this object is the number of CMM modules contained on this physical CMM circuit board.')
cmmModuleNumModems = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 18, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmModuleNumModems.setStatus('mandatory')
if mibBuilder.loadTexts: cmmModuleNumModems.setDescription('Number of modems per CMM module.')
cmmTFTPServer = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 18, 1, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmmTFTPServer.setStatus('mandatory')
if mibBuilder.loadTexts: cmmTFTPServer.setDescription('The value of this object is the IP address of the TFTP server where the object code for CMM modules resides. This object is persistent.')
cmmUpgradePath = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 18, 1, 1, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmmUpgradePath.setStatus('mandatory')
if mibBuilder.loadTexts: cmmUpgradePath.setDescription('The value of this object is the path to the object code for CMM modules on the TFTP server. This object is persistent.')
cmmUpgradeFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 18, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmmUpgradeFlag.setStatus('mandatory')
if mibBuilder.loadTexts: cmmUpgradeFlag.setDescription('The value of this object is a flag that indicates whether or not to upgrade the software for the CMM modules on the board. This object is persistent.')
cmmCommitFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 18, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmmCommitFlag.setStatus('mandatory')
if mibBuilder.loadTexts: cmmCommitFlag.setDescription('The value of this object is a flag that indicates whether or not to commit the software for the CMM modules on the board. This object is persistent.')
cmmModemResetLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 18, 1, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmmModemResetLimit.setStatus('mandatory')
if mibBuilder.loadTexts: cmmModemResetLimit.setDescription('The value of this object is the number of times that a modem can be reset within a given time span before it is declared to be faulty. If the value is 0 then the modem will never be declared faulty. This object is persistent.')
cmmModemResetTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 18, 1, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmmModemResetTime.setStatus('mandatory')
if mibBuilder.loadTexts: cmmModemResetTime.setDescription('The value of this object is the time span (in minutes) during which the given number of resets must occur before the modem is declared to be faulty. This object is persistent.')
cmmOutgoingInactivityTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 18, 1, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmmOutgoingInactivityTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: cmmOutgoingInactivityTimeout.setDescription('The value of this object is the duration (in seconds) of a period of inactivity before an outgoing call is terminated. This object is persistent.')
cmmIncomingInactivityTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 18, 1, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmmIncomingInactivityTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: cmmIncomingInactivityTimeout.setDescription('The value of this object is the duration (in seconds) of a period of inactivity before an incoming call is terminated. This object is persistent.')
cmmAsyncBaseOrigATCmdStr = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 18, 1, 1, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmAsyncBaseOrigATCmdStr.setStatus('mandatory')
if mibBuilder.loadTexts: cmmAsyncBaseOrigATCmdStr.setDescription('The value of this object is the default or base set of AT commands to be used when originating an async call.')
cmmAsyncBaseAnswerATCmdStr = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 18, 1, 1, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmAsyncBaseAnswerATCmdStr.setStatus('mandatory')
if mibBuilder.loadTexts: cmmAsyncBaseAnswerATCmdStr.setDescription('The value of this object is the default or base set of AT commands to be used when answering an async call.')
cmmAsyncOrigStrModifier = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 18, 1, 1, 1, 14), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmmAsyncOrigStrModifier.setStatus('mandatory')
if mibBuilder.loadTexts: cmmAsyncOrigStrModifier.setDescription('The value of this object is a set of additional AT commands to be used when originating an async call. This object is persistent.')
cmmAsyncAnswerStrModifier = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 18, 1, 1, 1, 15), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmmAsyncAnswerStrModifier.setStatus('mandatory')
if mibBuilder.loadTexts: cmmAsyncAnswerStrModifier.setDescription('The value of this object is a set of additional AT commands to be used when answering an async call. This object is persistent.')
cmmAsyncOperOrigATCmdStr = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 18, 1, 1, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmAsyncOperOrigATCmdStr.setStatus('mandatory')
if mibBuilder.loadTexts: cmmAsyncOperOrigATCmdStr.setDescription('The value of this object is the operative set of AT commands to be used when originating an async call. It includes the base string, the modifier string, and the call timeout value.')
cmmAsyncOperAnswerATCmdStr = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 18, 1, 1, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmAsyncOperAnswerATCmdStr.setStatus('mandatory')
if mibBuilder.loadTexts: cmmAsyncOperAnswerATCmdStr.setDescription('The value of this object is the operative set of AT commands to be used when answering an async call. It includes the base string, the modifier string, and the call timeout value.')
cmmHdlcBaseOrigATCmdStr = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 18, 1, 1, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmHdlcBaseOrigATCmdStr.setStatus('mandatory')
if mibBuilder.loadTexts: cmmHdlcBaseOrigATCmdStr.setDescription('The value of this object is the default or base set of AT commands to be used when originating an HDLC call.')
cmmHdlcBaseAnswerATCmdStr = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 18, 1, 1, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmHdlcBaseAnswerATCmdStr.setStatus('mandatory')
if mibBuilder.loadTexts: cmmHdlcBaseAnswerATCmdStr.setDescription('The value of this object is the default or base set of AT commands to be used when answering an HDLC call.')
cmmHdlcOrigStrModifier = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 18, 1, 1, 1, 20), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmmHdlcOrigStrModifier.setStatus('mandatory')
if mibBuilder.loadTexts: cmmHdlcOrigStrModifier.setDescription('The value of this object is a set of additional AT commands to be used when originating an HDLC call. This object is persistent.')
cmmHdlcAnswerStrModifier = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 18, 1, 1, 1, 21), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmmHdlcAnswerStrModifier.setStatus('mandatory')
if mibBuilder.loadTexts: cmmHdlcAnswerStrModifier.setDescription('The value of this object is a set of additional AT commands to be used when answering an HDLC call. This object is persistent.')
cmmHdlcOperOrigATCmdStr = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 18, 1, 1, 1, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmHdlcOperOrigATCmdStr.setStatus('mandatory')
if mibBuilder.loadTexts: cmmHdlcOperOrigATCmdStr.setDescription('The value of this object is the operative set of AT commands to be used when originating an HDLC call. It includes the base string, the modifier string, and the call timeout value.')
cmmHdlcOperAnswerATCmdStr = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 18, 1, 1, 1, 23), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmHdlcOperAnswerATCmdStr.setStatus('mandatory')
if mibBuilder.loadTexts: cmmHdlcOperAnswerATCmdStr.setDescription('The value of this object is the operative set of AT commands to be used when answering an HDLC call. It includes the base string, the modifier string, and the call timeout value.')
cmmBoardAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 18, 1, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("down", 1), ("leave-service", 2), ("up", 3), ("upgrade", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmmBoardAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cmmBoardAdminStatus.setDescription('The value of this object is the administrative status of the CMM board. down(1) -- all modems that belong to this board are to be removed from service immediately leave-service(2) -- each modem that belongs to this board is to be removed from service at the completion of its current call, if any up(3) -- each modem that belongs to this module is to become available for accepting calls upgrade(4) -- all modules that belong to this board are to be reloaded with new software and restarted')
cmmBoardOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 18, 1, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("initializing", 1), ("active", 2), ("leaving-service", 3), ("out-of-service", 4), ("faulty", 5), ("impaired", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmBoardOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cmmBoardOperStatus.setDescription('The value of this object is the operational status of the CMM board. initializing(1) -- all modules that belong to this board are booting up or in the process of a software upgrade active(2) -- all modules that belong to this board are available for accepting calls leaving-service(3) -- all modules that belong to this board are functional but are no longer available for accepting calls (Existing calls are allowed to terminate normally.) out-of-service(4) -- none of the modules that belong to this board are available for accepting calls nor do they have any existing calls faulty(5) -- all modules that belong to this board are unusable impaired(6) -- the board is otherwise active but one or more modules are in the out-of-service, initializing, testing, faulty, or impaired states')
cmmModuleTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 18, 1, 2), )
if mibBuilder.loadTexts: cmmModuleTable.setStatus('mandatory')
if mibBuilder.loadTexts: cmmModuleTable.setDescription('A list of CMM modules present on each CMM board in this unit')
cmmModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 18, 1, 2, 1), ).setIndexNames((0, "CT-HSIMPHYS-MIB", "mBusBoardID"), (0, "CT-CMMPHYS-MIB", "cmmModuleID"))
if mibBuilder.loadTexts: cmmModuleEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cmmModuleEntry.setDescription('The value of this object is a CMM module that is present in this unit')
cmmModuleID = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 18, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmModuleID.setStatus('mandatory')
if mibBuilder.loadTexts: cmmModuleID.setDescription('The value of this object is an index that uniquely identifies the CMM module within the physical CMM board.')
cmmDpramSize = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 18, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmDpramSize.setStatus('mandatory')
if mibBuilder.loadTexts: cmmDpramSize.setDescription('Size of the DPRAM (in bytes) on the CMM module.')
cmmSdramSize = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 18, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmSdramSize.setStatus('mandatory')
if mibBuilder.loadTexts: cmmSdramSize.setDescription('Size of the SDRAM (in bytes) on the CMM module.')
cmmCpuType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 18, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("hitachish3", 2), ("hitachish4", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmCpuType.setStatus('mandatory')
if mibBuilder.loadTexts: cmmCpuType.setDescription('CPU type on the CMM module.')
cmmCpuSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 18, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmCpuSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: cmmCpuSpeed.setDescription('The speed of the CPU (in Megahertz) on the CMM module.')
cmmCpuFwRev = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 18, 1, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmCpuFwRev.setStatus('mandatory')
if mibBuilder.loadTexts: cmmCpuFwRev.setDescription('Revision of the CPU firmware on the CMM module. This code is a product of RSA.')
cmmEpldId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 18, 1, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmEpldId.setStatus('mandatory')
if mibBuilder.loadTexts: cmmEpldId.setDescription('EPLD ID on the CMM module. (Read from the Altera chip.)')
cmmEpldRev = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 18, 1, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmEpldRev.setStatus('mandatory')
if mibBuilder.loadTexts: cmmEpldRev.setDescription('Revision of the EPLD firmware on the CMM module. This code is produced by Cabletron.')
cmmNumBadModems = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 18, 1, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmNumBadModems.setStatus('mandatory')
if mibBuilder.loadTexts: cmmNumBadModems.setDescription('The value of this object is the number of bad modems on the CMM module.')
cmmModuleAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 18, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("down", 1), ("leave-service", 2), ("up", 3), ("run-diagnostics", 4), ("reset", 5), ("faulty", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmmModuleAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cmmModuleAdminStatus.setDescription('The value of this object is the administrative status of the CMM module. down(1) -- all modems that belong to this module are to be removed from service immediately leave-service(2) -- each modem that belongs to this module is to be removed from service at the completion of its current call, if any up(3) -- each modem that belongs to this module is to become available for accepting calls run-diagnostics(4) -- all modems that belong to this module are to run a series of comprehensive on-line diagnostic tests reset(5) -- the entire module is to be physically reset faulty(6) -- the entire module is to be immediately removed from service and considered unusable')
cmmModuleOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 18, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("initializing", 1), ("active", 2), ("leaving-service", 3), ("out-of-service", 4), ("faulty", 5), ("impaired", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmModuleOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cmmModuleOperStatus.setDescription('The value of this object is the operational status of the CMM module. initializing(1) -- the module is booting up or in the process of a software upgrade active(2) -- all modems that belong to this module are available for accepting calls leaving-service(3) -- all modems that belong to this module are functional but are no longer available for accepting calls (Existing calls are allowed to terminate normally.) out-of-service(4) -- none of the modems that belong to this module are available for accepting calls nor do they have any existing calls faulty(5) -- the module has been removed from service by an NMS and is considered to be unusable impaired(6) -- the module is otherwise active but one or more modems are in the out-of-service, initializing, testing, or faulty states')
cmmModemTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 18, 1, 3), )
if mibBuilder.loadTexts: cmmModemTable.setStatus('mandatory')
if mibBuilder.loadTexts: cmmModemTable.setDescription('A list of modems present on each CMM module on each CMM board in this unit')
cmmModemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 18, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cmmModemEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cmmModemEntry.setDescription('This object contains data for a single CMM modem.')
cmmBoardID = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 18, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmBoardID.setStatus('mandatory')
if mibBuilder.loadTexts: cmmBoardID.setDescription('This object contains the logical number of the CMM board to which the modem belongs.')
cmmModemID = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 18, 1, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmModemID.setStatus('mandatory')
if mibBuilder.loadTexts: cmmModemID.setDescription('This object contains the logical number of the modem on the CMM module to which the modem belongs.')
cmmIFNum = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 18, 1, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmIFNum.setStatus('mandatory')
if mibBuilder.loadTexts: cmmIFNum.setDescription('This object contains the number of the instance of the Interface MIB that is associated with this modem.')
cmmSessionNum = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 18, 1, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmSessionNum.setStatus('mandatory')
if mibBuilder.loadTexts: cmmSessionNum.setDescription('This object contains the session number that is associated with this modem. Session numbers are assigned, starting with 1, from the first modem on the first module of the first CMM board and continuing through the last modem of the last module of the last CMM board.')
cmmDdpPartNum = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 18, 1, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmDdpPartNum.setStatus('mandatory')
if mibBuilder.loadTexts: cmmDdpPartNum.setDescription('Part number of the DDP controller on the CMM module. (Read from the DDP chip.)')
cmmDdpRevLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 18, 1, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmDdpRevLevel.setStatus('mandatory')
if mibBuilder.loadTexts: cmmDdpRevLevel.setDescription('Revision level of the DDP controller on the CMM module. (Read from the DDP chip.)')
cmmDdpFwRev = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 18, 1, 3, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmDdpFwRev.setStatus('mandatory')
if mibBuilder.loadTexts: cmmDdpFwRev.setDescription('Revison of the DDP controller firmware on the CMM module. This code is produced by Rockwell.')
cmmDDPInterrupts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 18, 1, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmDDPInterrupts.setStatus('mandatory')
if mibBuilder.loadTexts: cmmDDPInterrupts.setDescription('This object contains the number of interrupts received by the CMM transfer manager since initialization.')
cmmRxFlowCtlEvts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 18, 1, 3, 1, 9), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmmRxFlowCtlEvts.setStatus('mandatory')
if mibBuilder.loadTexts: cmmRxFlowCtlEvts.setDescription('This object contains the number of received flow control events.')
cmmTxFlowCtlEvts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 18, 1, 3, 1, 10), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmmTxFlowCtlEvts.setStatus('mandatory')
if mibBuilder.loadTexts: cmmTxFlowCtlEvts.setDescription('This object contains the number of transmitted flow control events.')
cmmCallStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 18, 1, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("idle", 1), ("connected", 2), ("retraining", 3), ("dropping", 4), ("local-test", 5), ("remote-test", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmmCallStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cmmCallStatus.setDescription('This object contains the current call status.')
cmmCallOrigin = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 18, 1, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("answer", 1), ("originate", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmCallOrigin.setStatus('mandatory')
if mibBuilder.loadTexts: cmmCallOrigin.setDescription('This object contains an enumerated value that indicates whether the call originated locally or remotely.')
cmmRobbedBitDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 18, 1, 3, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmRobbedBitDetected.setStatus('mandatory')
if mibBuilder.loadTexts: cmmRobbedBitDetected.setDescription('This object contains the robbed bit signalling pattern that was detected by the modem or 0 if none.')
cmmCorrectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 18, 1, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("no-ec", 1), ("detection", 2), ("mnp", 3), ("hanging-up", 4), ("speed-matching", 5), ("lapm", 6), ("mnp10", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmCorrectionType.setStatus('mandatory')
if mibBuilder.loadTexts: cmmCorrectionType.setDescription('This object contains an enumerated value that indicates the type of error correction that was negotiated.')
cmmCompressionType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 18, 1, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("mnp-class-5", 2), ("v42bis-tx-only", 3), ("v42bis-rx-only", 4), ("v42bis", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmCompressionType.setStatus('mandatory')
if mibBuilder.loadTexts: cmmCompressionType.setDescription('This object contains an enumerated value that indicates the type of data compression that was negotiated.')
cmmRxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 18, 1, 3, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmRxRate.setStatus('mandatory')
if mibBuilder.loadTexts: cmmRxRate.setDescription('This object contains the current receive rate.')
cmmTxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 18, 1, 3, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmTxRate.setStatus('mandatory')
if mibBuilder.loadTexts: cmmTxRate.setDescription('This object contains the current transmit rate.')
cmmEncoding = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 18, 1, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("u-law", 1), ("a-law", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmEncoding.setStatus('mandatory')
if mibBuilder.loadTexts: cmmEncoding.setDescription('This object contains the current PCM encoding type.')
cmmFraming = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 18, 1, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("pseudo-framing", 1), ("hdlc-framing", 2), ("ppp-async", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmFraming.setStatus('mandatory')
if mibBuilder.loadTexts: cmmFraming.setDescription('This object contains the current framing type.')
cmmInitialConnectRate = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 18, 1, 3, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmInitialConnectRate.setStatus('mandatory')
if mibBuilder.loadTexts: cmmInitialConnectRate.setDescription('This object contains the initial connect rate (in BPS) or the session.')
cmmMaxHostWindows = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 18, 1, 3, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmMaxHostWindows.setStatus('mandatory')
if mibBuilder.loadTexts: cmmMaxHostWindows.setDescription('This object contains the maximum number of host windows.')
cmmMaxCmmWindows = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 18, 1, 3, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmMaxCmmWindows.setStatus('mandatory')
if mibBuilder.loadTexts: cmmMaxCmmWindows.setDescription('This object contains the maximum number of CMM windows.')
cmmNumOutHostAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 18, 1, 3, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmNumOutHostAcks.setStatus('mandatory')
if mibBuilder.loadTexts: cmmNumOutHostAcks.setDescription('This object contains the number of host window acks that have not been processed by the CMM side.')
cmmNumOutCmmAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 18, 1, 3, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmNumOutCmmAcks.setStatus('mandatory')
if mibBuilder.loadTexts: cmmNumOutCmmAcks.setDescription('This object contains the number of CMM window acks that have not been processed by the host side.')
cmmToNetworkOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 18, 1, 3, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmToNetworkOctets.setStatus('mandatory')
if mibBuilder.loadTexts: cmmToNetworkOctets.setDescription('This object contains the number of data bytes transmitted (modem -> central office switch).')
cmmFromNetworkOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 18, 1, 3, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmFromNetworkOctets.setStatus('mandatory')
if mibBuilder.loadTexts: cmmFromNetworkOctets.setDescription('This object contains the number of data bytes received (central office switch -> modem).')
cmmToHostOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 18, 1, 3, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmToHostOctets.setStatus('mandatory')
if mibBuilder.loadTexts: cmmToHostOctets.setDescription('This object contains the number of data bytes transmitted (modem -> m-bus host).')
cmmFromHostOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 18, 1, 3, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmFromHostOctets.setStatus('mandatory')
if mibBuilder.loadTexts: cmmFromHostOctets.setDescription('This object contains the number of data bytes received (m-bus host -> modem).')
cmmToNetworkFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 18, 1, 3, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmToNetworkFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cmmToNetworkFrames.setDescription('This object contains the number of frames transmitted (modem -> central office switch).')
cmmFromNetworkFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 18, 1, 3, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmFromNetworkFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cmmFromNetworkFrames.setDescription('This object contains the number of frames received (central office switch -> modem).')
cmmOversizeFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 18, 1, 3, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmOversizeFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cmmOversizeFrames.setDescription('This object contains the number of HDLC frames received that were greater than the maximum permissible size.')
cmmOverrunErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 18, 1, 3, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmOverrunErrors.setStatus('mandatory')
if mibBuilder.loadTexts: cmmOverrunErrors.setDescription('This object contains the number of HDLC overrun errors.')
cmmCRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 18, 1, 3, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmCRCErrors.setStatus('mandatory')
if mibBuilder.loadTexts: cmmCRCErrors.setDescription('This object contains the number of HDLC CRC errors.')
cmmAbortedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 18, 1, 3, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmAbortedFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cmmAbortedFrames.setDescription('This object contains the number of HDLC frames that were aborted while they were being received.')
cmmRetrainEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 18, 1, 3, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmRetrainEvents.setStatus('mandatory')
if mibBuilder.loadTexts: cmmRetrainEvents.setDescription('This object contains the number of times that retrain and renegotiation events have occurred since initialization.')
cmmARAEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 18, 1, 3, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmARAEvents.setStatus('mandatory')
if mibBuilder.loadTexts: cmmARAEvents.setDescription('This object contains the number of times that automatic rate adaption events have occurred.')
cmmARAFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 18, 1, 3, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmARAFlag.setStatus('mandatory')
if mibBuilder.loadTexts: cmmARAFlag.setDescription('This object contains a flag that indicates whether or not an ARA event has occurred during the current session.')
cmmCarrierLossEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 18, 1, 3, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmCarrierLossEvents.setStatus('mandatory')
if mibBuilder.loadTexts: cmmCarrierLossEvents.setDescription('This object contains the number of times that carrier loss events have occurred.')
cmmCarrierLossFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 18, 1, 3, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmCarrierLossFlag.setStatus('mandatory')
if mibBuilder.loadTexts: cmmCarrierLossFlag.setDescription('This object contains a flag that indicates whether or not a carrier loss event has occurred during the current session.')
cmmRcvSignalLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 18, 1, 3, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmRcvSignalLevel.setStatus('mandatory')
if mibBuilder.loadTexts: cmmRcvSignalLevel.setDescription('This object contains the receive signal level.')
cmmRcvSignalEQM = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 18, 1, 3, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmRcvSignalEQM.setStatus('mandatory')
if mibBuilder.loadTexts: cmmRcvSignalEQM.setDescription('This object contains the receive signal EQM.')
cmmTDMSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 18, 1, 3, 1, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmTDMSlot.setStatus('mandatory')
if mibBuilder.loadTexts: cmmTDMSlot.setDescription('This object contains the number of the TDM slot used by this session.')
cmmResetModemStats = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 18, 1, 3, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmmResetModemStats.setStatus('mandatory')
if mibBuilder.loadTexts: cmmResetModemStats.setDescription("This object is used to reset the statistics pertaining to the selected modem. If written with the value 'true', the statistics will be reset. If written with the value 'false', no action will be taken. Its value will always be read as 'false'.")
cmmModemAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 18, 1, 3, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("down", 1), ("leave-service", 2), ("up", 3), ("run-diagnostics", 4), ("reset", 5), ("faulty", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmmModemAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cmmModemAdminStatus.setDescription('This object contains the administrative status of a modem. down(1) -- the modem is to be removed from service immediately leave-service(2) -- the modem is to be removed from service at the completion of its current call, if any up(3) -- the modem is to become available for accepting calls run-diagnostics(4) -- the modem is to run a series of comprehensive on-line diagnostic tests reset(5) -- the modem is to be physically reset faulty(6) -- the modem is to be immediately removed from service and considered unusable')
cmmModemOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 18, 1, 3, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("initializing", 1), ("idle", 2), ("active", 3), ("leaving-service", 4), ("out-of-service", 5), ("testing", 6), ("faulty", 7), ("resetting", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmModemOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cmmModemOperStatus.setDescription('This object contains the operational status of a modem. initializing(1) -- the module to which the modem belongs is booting up or in the process of a software upgrade idle(2) -- the modem is available for accepting calls but has no call in place active(3) -- the modem is not available for accepting calls because it already has one in place leaving-service(4) -- the modem is functional but is no longer available for accepting calls (Existing calls are allowed to terminate normally.) out-of-service(5) -- the modem is neither available for accepting calls nor does it have a call in place testing(6) -- the modem is running a series of comprehensive on-line diagnostic tests faulty(7) -- the modem has been removed from service by an NMS or due to a hardware or software failure and is considered to be unusable resetting(8) -- the modem is executing a reset sequence')
cmmFreeFormAtCmdGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 18, 1, 5))
cmmATCommand = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 18, 1, 5, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmmATCommand.setStatus('mandatory')
if mibBuilder.loadTexts: cmmATCommand.setDescription('This object contains the user-defined AT command string. It can contain up to 256 characters, including a carriage return that will automatically be inserted and a NULL terminator.')
cmmSelectedModem = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 18, 1, 5, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmmSelectedModem.setStatus('mandatory')
if mibBuilder.loadTexts: cmmSelectedModem.setDescription('This object contains the ID of the modem to which the free-form AT command string should be sent.')
cmmATCmdStatus = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 18, 1, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sending", 1), ("not-sending", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmmATCmdStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cmmATCmdStatus.setDescription('This object allows the free-form AT command string to be sent and allows the status of the command string to be examined.')
cmmATCmdResult = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 18, 1, 5, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmATCmdResult.setStatus('mandatory')
if mibBuilder.loadTexts: cmmATCmdResult.setDescription('This object contains the result string from issuing the free-form AT command .')
mibBuilder.exportSymbols("CT-CMMPHYS-MIB", cmmOutgoingInactivityTimeout=cmmOutgoingInactivityTimeout, cmmModemAdminStatus=cmmModemAdminStatus, cmmHdlcBaseOrigATCmdStr=cmmHdlcBaseOrigATCmdStr, cmmRobbedBitDetected=cmmRobbedBitDetected, cmmHdlcAnswerStrModifier=cmmHdlcAnswerStrModifier, cmmTxRate=cmmTxRate, cmmBoardOperStatus=cmmBoardOperStatus, cmmDdpFwRev=cmmDdpFwRev, cmmModemTable=cmmModemTable, cmmCpuFwRev=cmmCpuFwRev, cmmToNetworkOctets=cmmToNetworkOctets, cmmEncoding=cmmEncoding, cmmAsyncOrigStrModifier=cmmAsyncOrigStrModifier, cmmResetModemStats=cmmResetModemStats, cmmToHostOctets=cmmToHostOctets, cmmDdpRevLevel=cmmDdpRevLevel, cmmUpgradePath=cmmUpgradePath, cmmInitialConnectRate=cmmInitialConnectRate, cmmCpuType=cmmCpuType, cmmNumModules=cmmNumModules, cmmModemOperStatus=cmmModemOperStatus, cmmOverrunErrors=cmmOverrunErrors, cmmRxFlowCtlEvts=cmmRxFlowCtlEvts, cmmModemInfo=cmmModemInfo, cmmFreeFormAtCmdGroup=cmmFreeFormAtCmdGroup, cmmNumOutHostAcks=cmmNumOutHostAcks, cmmCpuSpeed=cmmCpuSpeed, cmmRcvSignalEQM=cmmRcvSignalEQM, cmmATCmdResult=cmmATCmdResult, cmmAsyncBaseOrigATCmdStr=cmmAsyncBaseOrigATCmdStr, cmmAbortedFrames=cmmAbortedFrames, cmmAsyncBaseAnswerATCmdStr=cmmAsyncBaseAnswerATCmdStr, cmmModuleID=cmmModuleID, cmmHdlcOperAnswerATCmdStr=cmmHdlcOperAnswerATCmdStr, cmmEpldId=cmmEpldId, cmmNumBadModems=cmmNumBadModems, cmmDDPInterrupts=cmmDDPInterrupts, cmmModemResetTime=cmmModemResetTime, cmmFromHostOctets=cmmFromHostOctets, cmmARAEvents=cmmARAEvents, cmmBoardID=cmmBoardID, cmmModuleOperStatus=cmmModuleOperStatus, cmmModemID=cmmModemID, cmmCallStatus=cmmCallStatus, cmmAsyncOperAnswerATCmdStr=cmmAsyncOperAnswerATCmdStr, cmmFraming=cmmFraming, cmmAsyncAnswerStrModifier=cmmAsyncAnswerStrModifier, cmmMaxCmmWindows=cmmMaxCmmWindows, cmmATCommand=cmmATCommand, cmmSdramSize=cmmSdramSize, cmmEpldRev=cmmEpldRev, cmmBoardType=cmmBoardType, cmmCRCErrors=cmmCRCErrors, cmmMaxHostWindows=cmmMaxHostWindows, cmmHdlcBaseAnswerATCmdStr=cmmHdlcBaseAnswerATCmdStr, cmmToNetworkFrames=cmmToNetworkFrames, cmmModuleNumModems=cmmModuleNumModems, cmmModemResetLimit=cmmModemResetLimit, cmmModuleTable=cmmModuleTable, cmmModuleEntry=cmmModuleEntry, cmmOversizeFrames=cmmOversizeFrames, cmmCarrierLossFlag=cmmCarrierLossFlag, cmmDpramSize=cmmDpramSize, cmmCorrectionType=cmmCorrectionType, cmmDdpPartNum=cmmDdpPartNum, cmmModemEntry=cmmModemEntry, cmmCallOrigin=cmmCallOrigin, cmmHdlcOperOrigATCmdStr=cmmHdlcOperOrigATCmdStr, cmmIncomingInactivityTimeout=cmmIncomingInactivityTimeout, cmmARAFlag=cmmARAFlag, cmmBoardAdminStatus=cmmBoardAdminStatus, cmmBoardEntry=cmmBoardEntry, cmmSessionNum=cmmSessionNum, cmmFromNetworkOctets=cmmFromNetworkOctets, cmmIFNum=cmmIFNum, cmmRcvSignalLevel=cmmRcvSignalLevel, cmmTDMSlot=cmmTDMSlot, cmmCommitFlag=cmmCommitFlag, cmmRxRate=cmmRxRate, cmmSelectedModem=cmmSelectedModem, cmmBoardTable=cmmBoardTable, cmmATCmdStatus=cmmATCmdStatus, cmmTxFlowCtlEvts=cmmTxFlowCtlEvts, cmmModuleAdminStatus=cmmModuleAdminStatus, cmmNumOutCmmAcks=cmmNumOutCmmAcks, cmmAsyncOperOrigATCmdStr=cmmAsyncOperOrigATCmdStr, cmmHdlcOrigStrModifier=cmmHdlcOrigStrModifier, cmmFromNetworkFrames=cmmFromNetworkFrames, cmmTFTPServer=cmmTFTPServer, cmmRetrainEvents=cmmRetrainEvents, cmmCompressionType=cmmCompressionType, cmmCarrierLossEvents=cmmCarrierLossEvents, cmmUpgradeFlag=cmmUpgradeFlag)
