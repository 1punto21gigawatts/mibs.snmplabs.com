#
# PySNMP MIB module HP-ICF-OSPF (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HP-ICF-OSPF
# Produced by pysmi-0.3.4 at Wed May  1 13:34:55 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection")
hpSwitch, = mibBuilder.importSymbols("HP-ICF-OID", "hpSwitch")
IANAipRouteProtocol, = mibBuilder.importSymbols("IANA-RTPROTO-MIB", "IANAipRouteProtocol")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
ospfLsdbType, Metric, ospfNbrEntry, ospfIfIpAddress, PositiveInteger, ospfIfEntry, ospfLsdbEntry, ospfLsdbLsid, ospfExtLsdbEntry, AreaID, ospfAddressLessIf, ospfIfMetricEntry, BigMetric, ospfLsdbRouterId, ospfAreaAggregateEntry, ospfLsdbAreaId = mibBuilder.importSymbols("OSPF-MIB", "ospfLsdbType", "Metric", "ospfNbrEntry", "ospfIfIpAddress", "PositiveInteger", "ospfIfEntry", "ospfLsdbEntry", "ospfLsdbLsid", "ospfExtLsdbEntry", "AreaID", "ospfAddressLessIf", "ospfIfMetricEntry", "BigMetric", "ospfLsdbRouterId", "ospfAreaAggregateEntry", "ospfLsdbAreaId")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
ObjectIdentity, TimeTicks, MibIdentifier, Bits, IpAddress, Gauge32, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Integer32, NotificationType, Counter64, Unsigned32, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "TimeTicks", "MibIdentifier", "Bits", "IpAddress", "Gauge32", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Integer32", "NotificationType", "Counter64", "Unsigned32", "ModuleIdentity")
RowStatus, TruthValue, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TruthValue", "DisplayString", "TextualConvention")
hpicfOspf = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14))
hpicfOspf.setRevisions(('2017-05-18 00:00', '2016-01-10 10:00', '2010-10-28 10:00', '2010-03-25 00:00', '2009-03-05 00:00', '2008-10-15 03:39', '2008-03-28 03:39', '2007-04-02 09:33', '2006-07-10 20:10', '2003-05-13 02:02', '2001-11-13 03:39',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hpicfOspf.setRevisionsDescriptions(('1.Added hpicfOspfReferenceCost. 2.Deprecated hpicfOspfCompliance2 3.Defined hpicfOspfReferenceGroup 4.Defined hpicfOspfMetricGroup 5.Added hpicfOspfIfFlagValue 6.Defined hpicfOspfComplaince3', '1.Added hpicfOspfNbrBfdState. 2.Deprecated hpicfOspfNbrGroup 3.Defined hpicfOspfNbrGroup1 4.Deprecated hpicfOspfCompliance1 5.Defined hpicfOspfComplaince2', 'Added hpicfOspfAreaAggregateTable.', 'Added hpicfOspfNbrTable.', 'Added hpicfOspfLogTable.', 'Added object to 1. retrieve request list of a particular interface. 2. retrieve retransmission list of a particular interface. 3. retrieve flood list of a particular interface.', 'Added object to 1. indicate ospf interface statistics sent, received and error packet count. 2. clear ospf statistics 3. indicate reasons for spf run.', 'Added object to indicate if ospf interface is passive or active', 'Added objects to display the NSSA route metric types.', 'Added objects for configuring a default administrative distance per route type.', 'Initial revision.',))
if mibBuilder.loadTexts: hpicfOspf.setLastUpdated('201705180000Z')
if mibBuilder.loadTexts: hpicfOspf.setOrganization('HP Networking')
if mibBuilder.loadTexts: hpicfOspf.setContactInfo('Hewlett-Packard Company 8000 Foothills Blvd. M/S 5557 Roseville, CA 95747-5557')
if mibBuilder.loadTexts: hpicfOspf.setDescription('This MIB module contains HP proprietary extensions to the OSPF-MIB module.')
class HpicfOspfRouterIdTc(TextualConvention, Unsigned32):
    description = "A 32-bit, unsigned integer uniquely identifying the router in the Autonomous System. To ensure uniqueness, this may default to the value of one of the router's IPv4 host addresses if IPv4 is configured on the router."
    status = 'current'
    displayHint = 'd-0'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 4294967295)

hpicfOspfObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 1))
hpicfOspfGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 1, 1))
hpicfOspf1583CompatibilityMode = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfOspf1583CompatibilityMode.setReference('RFC 2328, Appendix C.1 Global Parameters.')
if mibBuilder.loadTexts: hpicfOspf1583CompatibilityMode.setStatus('current')
if mibBuilder.loadTexts: hpicfOspf1583CompatibilityMode.setDescription("Controls the preference rules used when choosing among multiple AS-external-LSAs advertising the same destination. When set to 'true', the preference rules remain those specified in RFC 1583. When set to 'false', the preference rules are those stated in RFC 2328, which prevent routing loops when AS-external-LSAs for the same destination have been originated from different areas. Set to 'true' by default. In order to minimize the chance of routing loops, all OSPF routers in an OSPF routing domain should have this object set identically. When there are routers present that have not been updated with the functionality specified in RFC 2328, all routers should have this object set to 'true'. Otherwise, all routers should have this object set to 'false', preventing all routing loops.")
hpicfOspfDefaultImportMetric = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 1, 1, 2), BigMetric()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfOspfDefaultImportMetric.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfDefaultImportMetric.setDescription('The default metric used for advertising external routes imported into OSPF by this router.')
hpicfOspfDefaultImportMetricType = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("externalType1", 1), ("externalType2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfOspfDefaultImportMetricType.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfDefaultImportMetricType.setDescription('The default metric type used for advertising external routes imported into OSPF by this router.')
hpicfOspfIntraAreaDistance = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfOspfIntraAreaDistance.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfIntraAreaDistance.setDescription("The default administrative distance to associate with intra-area routes learned by OSPF. Routes with lower distances are preferred. By default, OSPF routes have an administrative distance of 110. Note that the administrative distance settings for OSPF do not affect the choice of routes within OSPF. OSPF will still prefer intra-area routes over inter-area or AS-external routes even if hpicfOspfInterAreaDistance or hpicfOspfExternalDistance is lower than hpicfOspfIntraAreaDistance. The appropriate administrative distance value is applied to the route that OSPF selects as its best route to a destination and is used to decide whether OSPF's route is preferred over a route from some other source.")
hpicfOspfInterAreaDistance = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfOspfInterAreaDistance.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfInterAreaDistance.setDescription("The default administrative distance to associate with inter-area routes learned by OSPF. Routes with lower distances are preferred. By default, OSPF routes have an administrative distance of 110. Note that the administrative distance settings for OSPF do not affect the choice of routes within OSPF. OSPF will still prefer intra-area routes over inter-area routes, even if hpicfOspfInterAreaDistance is lower than hpicfOspfIntraAreaDistance. It will also still prefer inter-area routes over AS-external routes even if hpicfOspfExternalDistance is lower than hpicfOspfInterAreaDistance. The appropriate administrative distance value is applied to the route that OSPF selects as its best route to a destination and is used to decide whether OSPF's route is preferred over a route from some other source.")
hpicfOspfExternalDistance = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfOspfExternalDistance.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfExternalDistance.setDescription("The default administrative distance to associate with AS-external routes learned by OSPF. Routes with lower distances are preferred. By default, OSPF routes have an administrative distance of 110. Note that the administrative distance settings for OSPF do not affect the choice of routes within OSPF. OSPF will still prefer intra-area routes and inter-area routes over AS-external routes even if hpicfOspfExternalDistance is lower than the hpicfOspfIntraAreaDistance or hpicfOspfInterAreaDistance. The appropriate administrative distance value is applied to the route that OSPF selects as its best route to a destination and is used to decide whether OSPF's route is preferred over a route from some other source.")
hpicfOspfSpfThrottleStartInterval = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfOspfSpfThrottleStartInterval.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfSpfThrottleStartInterval.setDescription('Initial SPF schedule delay')
hpicfOspfSpfThrottleWaitInterval = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfOspfSpfThrottleWaitInterval.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfSpfThrottleWaitInterval.setDescription('Minimum wait time between two consecutive SPFs.')
hpicfOspfSpfThrottleMaxWaitTime = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfOspfSpfThrottleMaxWaitTime.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfSpfThrottleMaxWaitTime.setDescription('Maximum wait time between two consecutive SPFs.')
hpicfOspfSpfThrottleCurrentSpfInterval = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfSpfThrottleCurrentSpfInterval.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfSpfThrottleCurrentSpfInterval.setDescription('Current dynamic wait interval between SPF computations')
hpicfOspfReferenceCost = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 1, 1, 11), Metric()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfOspfReferenceCost.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfReferenceCost.setDescription('The reference cost is used as a global configuration for internal area cost.')
hpicfOspfRedistTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 1, 2), )
if mibBuilder.loadTexts: hpicfOspfRedistTable.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfRedistTable.setDescription('Table for configuring route redistribution into OSPF.')
hpicfOspfRedistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 1, 2, 1), ).setIndexNames((0, "HP-ICF-OSPF", "hpicfOspfRedistSrcProto"))
if mibBuilder.loadTexts: hpicfOspfRedistEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfRedistEntry.setDescription('An entry in the table for configuring route redistribution into OSPF from a single source protocol. Entries in this table are not created dynamically. There will be a single entry for each supported source protocol.')
hpicfOspfRedistSrcProto = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 1, 2, 1, 1), IANAipRouteProtocol())
if mibBuilder.loadTexts: hpicfOspfRedistSrcProto.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfRedistSrcProto.setDescription('Source protocol to redistribute routes from.')
hpicfOspfRedistEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 1, 2, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfOspfRedistEnabled.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfRedistEnabled.setDescription('A flag indicating whether OSPF should redistribute routes from this source protocol.')
hpicfOspfRedistRestrictTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 1, 3), )
if mibBuilder.loadTexts: hpicfOspfRedistRestrictTable.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfRedistRestrictTable.setDescription('A table of route prefixes for filtering out routes that OSPF should not redistribute. Any route that is contained by a range in this table (in other words, has a longer mask than that specified by hpicfOspfRedistRestrictMask and where the route destination ANDed with the hpicfOspfRedistRestrictMask is equal to hpicfOspfRedistRestrictAddr) will not be redistributed as an AS-external LSA by OSPF.')
hpicfOspfRedistRestrictEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 1, 3, 1), ).setIndexNames((0, "HP-ICF-OSPF", "hpicfOspfRedistRestrictAddr"), (0, "HP-ICF-OSPF", "hpicfOspfRedistRestrictMask"))
if mibBuilder.loadTexts: hpicfOspfRedistRestrictEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfRedistRestrictEntry.setDescription('A single entry in the table. Any route, regardless of source protocol which is contained within the specified range will not be redistributed into OSPF. Entries in this table are created dynamically using the hpicfOspfRedistRestrictStatus object.')
hpicfOspfRedistRestrictAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 1, 3, 1, 1), IpAddress())
if mibBuilder.loadTexts: hpicfOspfRedistRestrictAddr.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfRedistRestrictAddr.setDescription('The IP address of the range of route entries to exclude from redistribution into OSPF.')
hpicfOspfRedistRestrictMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 1, 3, 1, 2), IpAddress())
if mibBuilder.loadTexts: hpicfOspfRedistRestrictMask.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfRedistRestrictMask.setDescription('The mask for the range of route entries to exclude from redistribution into OSPF.')
hpicfOspfRedistRestrictStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 1, 3, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfOspfRedistRestrictStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfRedistRestrictStatus.setDescription('The status of this entry.')
hpicfOspfCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 2, 2))
hpicfOspfCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 2, 2, 1)).setObjects(("HP-ICF-OSPF", "hpicfOspfBaseGroup"), ("HP-ICF-OSPF", "hpicfOspfRedistGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfOspfCompliance = hpicfOspfCompliance.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfCompliance.setDescription('The compliance statement for HP Routing Switches that support OSPF.')
hpicfOspfRouteGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 3))
hpicfOspfNssaType1 = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 3, 1))
hpicfOspfNssaType2 = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 3, 2))
hpicfOspfIfTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 4), )
if mibBuilder.loadTexts: hpicfOspfIfTable.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfIfTable.setDescription('Extensions to the table that contains OSPF Interface specific information.')
hpicfOspfIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 4, 1), )
ospfIfEntry.registerAugmentions(("HP-ICF-OSPF", "hpicfOspfIfEntry"))
hpicfOspfIfEntry.setIndexNames(*ospfIfEntry.getIndexNames())
if mibBuilder.loadTexts: hpicfOspfIfEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfIfEntry.setDescription('A list of extensions to the information maintained for an OSPF interface.')
hpicfOspfIfPassive = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 4, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfOspfIfPassive.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfIfPassive.setDescription('The passive state configuration of the OSPF interface. In the passive mode no OSPF protocol messages are exchanged on this interface. true (1) - The interface is configured to work in Passive mode false (2) - The interface is configured to work in normal mode. This is the default configuration. Changing the value will cause OSPF to reset on this interface and make necessary adjustments to the link state database. All other operations are not defined and will not affect the state of the protocol.')
hpicfOspfIfNbrCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 4, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfIfNbrCount.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfIfNbrCount.setDescription('This object specifies the number of OSPFv3 neighbors present in this interface. This counter should be incremented when a new neighbor is added in the network in which this interface is present. It should be decremented when a neighbor is disconnected.')
hpicfOspfIfBfdEnbl = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 4, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfOspfIfBfdEnbl.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfIfBfdEnbl.setDescription('param to enable BFD under OSPF')
hpicfOspfIfStatsTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 5), )
if mibBuilder.loadTexts: hpicfOspfIfStatsTable.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfIfStatsTable.setDescription('Table that contains OSPF Interface traffic specific information.')
hpicfOspfIfStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 5, 1), ).setIndexNames((0, "OSPF-MIB", "ospfIfIpAddress"), (0, "OSPF-MIB", "ospfAddressLessIf"))
if mibBuilder.loadTexts: hpicfOspfIfStatsEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfIfStatsEntry.setDescription('A list of extensions to the information maintained for an OSPF interface.')
hpicfOspfSentHelloPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 5, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfSentHelloPkt.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfSentHelloPkt.setDescription('The number of OSPF Hello packets sent on the interface. This number is incremented each time an OSPF Hello packet is sent out of an OSPF enabled interface. Discontinuities in the value of this counter can occur at re-initialization of the management system. The counters can be cleared for any interface using clear ip ospf statistics command.')
hpicfOspfSentDDPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 5, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfSentDDPkt.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfSentDDPkt.setDescription('The number of Database Description packets sent on the interface. This number is incremented each time an OSPF DD packet is sent out of an OSPF enabled interface. Discontinuities in the value of this counter can occur at re-initialization of the management system. The counters can be cleared for any interface using clear ip ospf statistics command.')
hpicfOspfSentLSRPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfSentLSRPkt.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfSentLSRPkt.setDescription('The number of Link State Request packet sent on the interface. This number is incremented each time an OSPF LSR packet is sent out of OSPF enabled interface. Discontinuities in the value of this counter can occur at re-initialization of the management system. The counters can be cleared for any interface using clear ip ospf statistics command.')
hpicfOspfSentLSUPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfSentLSUPkt.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfSentLSUPkt.setDescription('The number of Link State Update packet sent on the interface. This number is incremented each time an OSPF LSU packet is sent out of an OSPF enabled interface. Discontinuities in the value of this counter can occur at re-initialization of the management system. The counters can be cleared for any interface using clear ip ospf statistics command.')
hpicfOspfSentLSAPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfSentLSAPkt.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfSentLSAPkt.setDescription('The number of Link State Ack packet sent on the interface. This number is incremented each time an OSPF LSA packet is sent out of an OSPF enabled interface. Discontinuities in the value of this counter can occur at re-initialization of the management system. The counters can be cleared for any interface using clear ip ospf statistics command.')
hpicfOspfRcvdHelloPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfRcvdHelloPkt.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfRcvdHelloPkt.setDescription('The number of Hello packets received on the interface. This number is incremented each time a hello packet is received on OSPF enabled interface. Discontinuities in the value of this counter can occur at re-initialization of the management system. The counters can be cleared for any interface using clear ip ospf statistics command.')
hpicfOspfRcvdDDPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfRcvdDDPkt.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfRcvdDDPkt.setDescription('The number of Database Description packets received on the interface. This number is incremented each time a OSPF DD packet is received on OSPF enabled interface. Discontinuities in the value of this counter can occur at re-initialization of the management system. The counters can be cleared for any interface using clear ip ospf statistics command.')
hpicfOspfRcvdLSRPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 5, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfRcvdLSRPkt.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfRcvdLSRPkt.setDescription('The number of Link State Request packets received on the interface. This number is incremented each time a OSPF LSR packet is received on OSPF enabled interface. Discontinuities in the value of this counter can occur at re-initialization of the management system. The counters can be cleared for any interface using clear ip ospf statistics command.')
hpicfOspfRcvdLSUPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 5, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfRcvdLSUPkt.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfRcvdLSUPkt.setDescription('The number of Link State Update packets received on the interface. This number is incremented each time a OSPF LSU packet is received on OSPF enabled interface.')
hpicfOspfRcvdLSAPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 5, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfRcvdLSAPkt.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfRcvdLSAPkt.setDescription('The number of Link State Ack packets received on the interface. This number is incremented each time a OSPF LSA packet is received on OSPF enabled interface. Discontinuities in the value of this counter can occur at re-initialization of the management system. The counters can be cleared for any interface using clear ip ospf statistics command.')
hpicfOspfIfErrorTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 6), )
if mibBuilder.loadTexts: hpicfOspfIfErrorTable.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfIfErrorTable.setDescription('Table that contains OSPF Interface traffic specific information.')
hpicfOspfIfErrorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 6, 1), ).setIndexNames((0, "OSPF-MIB", "ospfIfIpAddress"), (0, "OSPF-MIB", "ospfAddressLessIf"), (0, "HP-ICF-OSPF", "hpicfOspfIfErrorType"))
if mibBuilder.loadTexts: hpicfOspfIfErrorEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfIfErrorEntry.setDescription('A list of extensions to the information maintained for an OSPF interface.')
hpicfOspfIfErrorType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647)))
if mibBuilder.loadTexts: hpicfOspfIfErrorType.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfIfErrorType.setDescription('The hpicfOspfIfErrorType refers to the type of errors in the OSPF packet received on any OSPF enabled interface. Errors could be Invalid RouterID/ AreaID Checksum error, OutOfbound Error ...')
hpicfOspfIfErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 6, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfIfErrorCount.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfIfErrorCount.setDescription('The hpicfOspfErrorCount is count of each type error packet received on an OSPF interface. Discontinuities in the value of this counter can occur at re-initialization of the management system. The counters can be cleared for any interface using clear ip ospf statistics command')
hpicfOspfIfClearStatsTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 7), )
if mibBuilder.loadTexts: hpicfOspfIfClearStatsTable.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfIfClearStatsTable.setDescription('A list used to clear statistics information maintained for an OSPF interface.')
hpicfOspfIfClearStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 7, 1), ).setIndexNames((0, "OSPF-MIB", "ospfIfIpAddress"), (0, "OSPF-MIB", "ospfAddressLessIf"))
if mibBuilder.loadTexts: hpicfOspfIfClearStatsEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfIfClearStatsEntry.setDescription('A list used to clear statistics information maintained for an OSPF interface.')
hpicfOspfClearCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 7, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfOspfClearCounters.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfClearCounters.setDescription('Read of this will always be false, When this variable is set to true for a given Ipaddress interface, corresponding interface counters will be cleared.')
hpicfOspfSpfTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 8), )
if mibBuilder.loadTexts: hpicfOspfSpfTable.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfSpfTable.setDescription('Table that contains OSPF SPF information.')
hpicfOspfSpfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 8, 1), ).setIndexNames((0, "HP-ICF-OSPF", "hpicfOspfSpfInstance"))
if mibBuilder.loadTexts: hpicfOspfSpfEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfSpfEntry.setDescription('A list of extensions to the information maintained for OSPF SPF runs.')
hpicfOspfSpfInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647)))
if mibBuilder.loadTexts: hpicfOspfSpfInstance.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfSpfInstance.setDescription('The hpicfospfSpfInstance refers to the instance of SPF Shortest Path First ran for an OSPF instance.')
hpicfOspfSpfReason = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfSpfReason.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfSpfReason.setDescription("The hpicfOspfSpfReason refers to the reason for scheduling an SPF run. Reasons could be OSPF init, adding/deleting interface, linkStateUpdate received.. Only last ten SPF run's reasons will be saved.")
hpicfOspfSpfTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 8, 1, 3), Integer32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfSpfTime.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfSpfTime.setDescription("The hpicfOspfSpfTime refers to the time at which SPF run is scheduled. Reasons could be OSPF init, adding/deleting interface, linkStateUpdate received.. Only last ten SPF run's reasons will be saved.")
hpicfOspfReqTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 9), )
if mibBuilder.loadTexts: hpicfOspfReqTable.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfReqTable.setDescription('Request List table that contains OSPF Specific interface information.')
hpicfOspfReqEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 9, 1), ).setIndexNames((0, "OSPF-MIB", "ospfIfIpAddress"), (0, "OSPF-MIB", "ospfAddressLessIf"))
if mibBuilder.loadTexts: hpicfOspfReqEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfReqEntry.setDescription('A Request List entries that contain fields of link state advertisement.')
hpicfOspfReqType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 9, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 10))).clone(namedValues=NamedValues(("routerLink", 1), ("networkLink", 2), ("summaryLink", 3), ("asSummaryLink", 4), ("asExternalLink", 5), ("multicastLink", 6), ("nssaExternalLink", 7), ("areaOpaqueLink", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfReqType.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfReqType.setDescription("The type of the Request List's link state advertisement. Each link state type has a separate advertisement format.")
hpicfOspfReqLsid = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 9, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfReqLsid.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfReqLsid.setDescription("The Request List's Link State ID is an LS Type Specific field containing either a Router ID or an IP address; it identifies the piece of the routing domain that is being described by the advertisement.")
hpicfOspfReqRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 9, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfReqRouterId.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfReqRouterId.setDescription('The 32-bit number that uniquely identifies the originating router in the Autonomous System.')
hpicfOspfReqSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 9, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfReqSequence.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfReqSequence.setDescription("The Request List's sequence number field is a signed 32-bit integer. It starts with the value '80000001'h, or -'7FFFFFFF'h, and increments until '7FFFFFFF'h. Thus, a typical sequence number will be very negative. It is used to detect old and duplicate Link State Advertisements. The space of sequence numbers is linearly ordered. The larger the sequence number, the more recent the advertisement.")
hpicfOspfReqAge = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 9, 1, 5), Integer32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfReqAge.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfReqAge.setDescription("This Request list's field is the age of the link state advertisement in seconds.")
hpicfOspfReqChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 9, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfReqChecksum.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfReqChecksum.setDescription("This Request list's field is the checksum of the complete contents of the advertisement, excepting the age field. The age field is excepted so that an advertisement's age can be incremented without updating the checksum. The checksum used is the same that is used for ISO connectionless datagram's; it is commonly referred to as the Fletcher checksum.")
hpicfOspfRetransTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 10), )
if mibBuilder.loadTexts: hpicfOspfRetransTable.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfRetransTable.setDescription('Retransmission List table that contains Ospf Interface Specific information.')
hpicfOspfRetransEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 10, 1), ).setIndexNames((0, "OSPF-MIB", "ospfIfIpAddress"), (0, "OSPF-MIB", "ospfAddressLessIf"))
if mibBuilder.loadTexts: hpicfOspfRetransEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfRetransEntry.setDescription('Retransmission list entry that is maintained for an OSPF Interface.')
hpicfOspfRetransType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 10))).clone(namedValues=NamedValues(("routerLink", 1), ("networkLink", 2), ("summaryLink", 3), ("asSummaryLink", 4), ("asExternalLink", 5), ("multicastLink", 6), ("nssaExternalLink", 7), ("areaOpaqueLink", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfRetransType.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfRetransType.setDescription('The Retransmission List LSA type. Each link state type has a separate advertisement format.')
hpicfOspfRetransLsid = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 10, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfRetransLsid.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfRetransLsid.setDescription('The Retransmission List Link State ID is an LS Type Specific field containing either a Router ID or an IP address; it identifies the piece of the routing domain that is being described by the advertisement.')
hpicfOspfRetransRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 10, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfRetransRouterId.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfRetransRouterId.setDescription('The 32-bit number that uniquely identifies the originating Retransmission List router in the Autonomous System.')
hpicfOspfRetransSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 10, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfRetransSequence.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfRetransSequence.setDescription("The Retransmission List sequence number field is a signed 32-bit integer. It starts with the value '80000001'h, or -'7FFFFFFF'h, and increments until '7FFFFFFF'h. Thus, a typical sequence number will be very negative. It is used to detect old and duplicate Link State Advertisements. The space of sequence numbers is linearly ordered. The larger the sequence number, the more recent the advertisement.")
hpicfOspfRetransAge = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 10, 1, 5), Integer32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfRetransAge.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfRetransAge.setDescription('This Retransmission List field is the age of the link state advertisement in seconds.')
hpicfOspfRetransChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 10, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfRetransChecksum.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfRetransChecksum.setDescription("This Retransmission field is the checksum of the complete contents of the advertisement, excepting the age field. The age field is excepted so that an advertisement's age can be incremented without updating the checksum. The checksum used is the same that is used for ISO connectionless datagram's; it is commonly referred to as the Fletcher checksum.")
hpicfOspfFloodTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 11), )
if mibBuilder.loadTexts: hpicfOspfFloodTable.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfFloodTable.setDescription('Flood list table that contains Ospf Interface Specific information')
hpicfOspfFloodEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 11, 1), ).setIndexNames((0, "OSPF-MIB", "ospfIfIpAddress"), (0, "OSPF-MIB", "ospfAddressLessIf"))
if mibBuilder.loadTexts: hpicfOspfFloodEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfFloodEntry.setDescription('A Flood list information maintained for an OSPF Interface')
hpicfOspfFloodType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 10))).clone(namedValues=NamedValues(("routerLink", 1), ("networkLink", 2), ("summaryLink", 3), ("asSummaryLink", 4), ("asExternalLink", 5), ("multicastLink", 6), ("nssaExternalLink", 7), ("areaOpaqueLink", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfFloodType.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfFloodType.setDescription('The flood list LSA type .Each link state type has a separate advertisement format.')
hpicfOspfFloodLsid = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 11, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfFloodLsid.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfFloodLsid.setDescription('The flood list Link State ID is an LS Type Specific field containing either a Router ID or an IP address; it identifies the piece of the routing domain that is being described by the advertisement.')
hpicfOspfFloodRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 11, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfFloodRouterId.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfFloodRouterId.setDescription('The 32-bit number that uniquely identifies the originating flood list router in the Autonomous System.')
hpicfOspfFloodSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 11, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfFloodSequence.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfFloodSequence.setDescription("The flood list sequence number field is a signed 32-bit integer. It starts with the value '80000001'h, or -'7FFFFFFF'h, and increments until '7FFFFFFF'h. Thus, a typical sequence number will be very negative. It is used to detect old and duplicate Link State Advertisements. The space of sequence numbers is linearly ordered. The larger the sequence number, the more recent the advertisement.")
hpicfOspfFloodAge = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 11, 1, 5), Integer32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfFloodAge.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfFloodAge.setDescription('This flood list field is the age of the link state advertisement in seconds.')
hpicfOspfFloodChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 11, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfFloodChecksum.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfFloodChecksum.setDescription("This flood list field is the checksum of the complete contents of the advertisement, excepting the age field. The age field is excepted so that an advertisement's age can be incremented without updating the checksum. The checksum used is the same that is used for ISO connectionless datagram's; it is commonly referred to as the Fletcher checksum.")
hpicfOspfSpfTimerElapsed = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfSpfTimerElapsed.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfSpfTimerElapsed.setDescription('The elapsed time since the last Ospf Spf is run')
hpicfOspfAreaLsdbTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 14), )
if mibBuilder.loadTexts: hpicfOspfAreaLsdbTable.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfAreaLsdbTable.setDescription("The OSPF Process's Area-Scope LSDB. The LSDB contains the Area-Scope Link State Advertisements from throughout the area that the device is attached to.")
hpicfOspfAreaLsdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 14, 1), )
ospfLsdbEntry.registerAugmentions(("HP-ICF-OSPF", "hpicfOspfAreaLsdbEntry"))
hpicfOspfAreaLsdbEntry.setIndexNames(*ospfLsdbEntry.getIndexNames())
if mibBuilder.loadTexts: hpicfOspfAreaLsdbEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfAreaLsdbEntry.setDescription('A single Area-Scope Link State Advertisement.')
hpicfOspfAreaLsdbRtrCapBits = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 14, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfAreaLsdbRtrCapBits.setReference('OSPF Version 2, Appendix A.4.2 Router LSAs')
if mibBuilder.loadTexts: hpicfOspfAreaLsdbRtrCapBits.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfAreaLsdbRtrCapBits.setDescription('This field is valid if the LSA is a Router LSA. It uniquely identifies the router type of the router in the Area.')
hpicfOspfAreaLsdbOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 14, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfAreaLsdbOptions.setReference('OSPF Version 2, Appendix A.2 The Options field')
if mibBuilder.loadTexts: hpicfOspfAreaLsdbOptions.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfAreaLsdbOptions.setDescription('The Options field enables OSPF routers to support (or not support) optional capabilities, and to communicate their capability level to other OSPF routers. This field is valid for each type of LSA.')
hpicfOspfAreaLsdbMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 14, 1, 3), Metric()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfAreaLsdbMetric.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfAreaLsdbMetric.setDescription('This field is valid if the LSA is a Router LSA, a Summary LSA, AS Summary LSA or a NSSA LSA. This field indicates the cost involved in using the interface or route.')
hpicfOspfAreaLsdbAddrPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 14, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfAreaLsdbAddrPrefix.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfAreaLsdbAddrPrefix.setDescription('The Prefix the Address.')
hpicfOspfAreaLsdbFwdingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 14, 1, 5), HpicfOspfRouterIdTc()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfAreaLsdbFwdingAddress.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfAreaLsdbFwdingAddress.setDescription("This field is valid if the LSA is a NSSA LSA. This field is present only if the 'F' Bit is set in the EFT flags field and if included, the data traffic for the advertised destination will be forwarded to this address.")
hpicfOspfAreaLsdbExtRouteTags = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 14, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfAreaLsdbExtRouteTags.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfAreaLsdbExtRouteTags.setDescription("This field is valid if the LSA is a NSSA LSA. This field is present only if the 'T' Bit is set in the EFT flags field. A 32-bit field which may be used to communicate additional information between AS boundary routers.")
hpicfOspfTOS = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 14, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfTOS.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfTOS.setDescription('The 32-bit identifier for the TOS specific information of the LSA.')
hpicfOspfLsdbRouterLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 14, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfLsdbRouterLinks.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfLsdbRouterLinks.setDescription('This field is valid if the LSA is Router LSA. It holds the information of Number of links in the router LSA.')
hpicfOspfLsdbBitE = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 14, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfLsdbBitE.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfLsdbBitE.setDescription('The 32-bit identifier for the Metric specific information of the LSA.')
hpicfOspfRouterLSATable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 15), )
if mibBuilder.loadTexts: hpicfOspfRouterLSATable.setReference('OSPF Version 2, Appendix 4.3 Router-LSAs')
if mibBuilder.loadTexts: hpicfOspfRouterLSATable.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfRouterLSATable.setDescription('This table having Area scope is a dependent-expansion table for the Router LSA entry in the Area LSDB table. It represents the list of per interface details advertised in a Router LSA.')
hpicfOspfRouterLSAEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 15, 1), ).setIndexNames((0, "OSPF-MIB", "ospfLsdbAreaId"), (0, "OSPF-MIB", "ospfLsdbType"), (0, "OSPF-MIB", "ospfLsdbLsid"), (0, "OSPF-MIB", "ospfLsdbRouterId"), (0, "HP-ICF-OSPF", "hpicfOspfRouterLSANbrRtrId"))
if mibBuilder.loadTexts: hpicfOspfRouterLSAEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfRouterLSAEntry.setDescription('A single Area-Scope Link State Advertisement.')
hpicfOspfRouterLSANbrRtrId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 15, 1, 1), HpicfOspfRouterIdTc())
if mibBuilder.loadTexts: hpicfOspfRouterLSANbrRtrId.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfRouterLSANbrRtrId.setDescription('The router id of the router which is connected over the interface Id.')
hpicfOspfRouterLSAIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 15, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfRouterLSAIfType.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfRouterLSAIfType.setDescription('The 32-bit identifier of the Area from which the LSA was received.')
hpicfOspfRouterLSAMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 15, 1, 3), Metric()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfRouterLSAMetric.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfRouterLSAMetric.setDescription('This field indicates the cost involved in using the interface or route.')
hpicfOspfRouterLSAIfId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 15, 1, 4), HpicfOspfRouterIdTc()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfRouterLSAIfId.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfRouterLSAIfId.setDescription('The interface Id of the router that connects to the other router.')
hpicfOspfRouterLSATOSMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 15, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfRouterLSATOSMetric.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfRouterLSATOSMetric.setDescription('This field indicates the cost involved in using the interface or route specific to TOS.')
hpicfOspfNetworkLSATable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 16), )
if mibBuilder.loadTexts: hpicfOspfNetworkLSATable.setReference('OSPF Version 2, Appendix 4.4 Network-LSAs')
if mibBuilder.loadTexts: hpicfOspfNetworkLSATable.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfNetworkLSATable.setDescription('This table having Area scope is a dependent-expansion table for the Network LSA entry in the Area LSDB table. This table represents the list of routers advertised in a Network LSA.')
hpicfOspfNetworkLSAEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 16, 1), ).setIndexNames((0, "OSPF-MIB", "ospfLsdbAreaId"), (0, "OSPF-MIB", "ospfLsdbType"), (0, "OSPF-MIB", "ospfLsdbLsid"), (0, "OSPF-MIB", "ospfLsdbRouterId"), (0, "HP-ICF-OSPF", "hpicfOspfNetworkLSASeqNum"))
if mibBuilder.loadTexts: hpicfOspfNetworkLSAEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfNetworkLSAEntry.setDescription('A single Area-Scope Link State Advertisement.')
hpicfOspfNetworkLSASeqNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 16, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hpicfOspfNetworkLSASeqNum.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfNetworkLSASeqNum.setDescription('The 32-bit sequence number identifying the attached router-ids.')
hpicfOspfNetworkLSAAttachedRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 16, 1, 2), HpicfOspfRouterIdTc()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfNetworkLSAAttachedRouter.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfNetworkLSAAttachedRouter.setDescription('The 32-bit Router identifier of the attached Router.')
hpicfOspfExtLsdbTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 17), )
if mibBuilder.loadTexts: hpicfOspfExtLsdbTable.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfExtLsdbTable.setDescription("The OSPFv3 Process's AS-Scope Link State Database (LSDB). The LSDB contains the AS-Scope Link State Advertisements from throughout the areas that the device is attached to.")
hpicfOspfExtLsdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 17, 1), )
ospfExtLsdbEntry.registerAugmentions(("HP-ICF-OSPF", "hpicfOspfExtLsdbEntry"))
hpicfOspfExtLsdbEntry.setIndexNames(*ospfExtLsdbEntry.getIndexNames())
if mibBuilder.loadTexts: hpicfOspfExtLsdbEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfExtLsdbEntry.setDescription('A single AS-Scope Link State Advertisement.')
hpicfOspfExtLsdbMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 17, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfExtLsdbMetric.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfExtLsdbMetric.setDescription('The cost associated with this route.')
hpicfOspfExtLsdbOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 17, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfExtLsdbOptions.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfExtLsdbOptions.setDescription('The Options field enables OSPF routers to support (or not support) optional capabilities, and to communicate their capability level to other OSPF routers.')
hpicfOspfExtLsdbFwdingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 17, 1, 3), HpicfOspfRouterIdTc()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfExtLsdbFwdingAddress.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfExtLsdbFwdingAddress.setDescription('If included, Data traffic for the advertised destination will be forwarded to this address.')
hpicfOspfExtLsdbExtRouteTags = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 17, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfExtLsdbExtRouteTags.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfExtLsdbExtRouteTags.setDescription('The 32-bit Router Tags for the advertised Route.')
hpicfOspfExtLsdbBitE = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 17, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfExtLsdbBitE.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfExtLsdbBitE.setDescription('The type of External metric. If bit E is set, the metric specified is Type 2 external metric.')
class HpicfOspfLogType(TextualConvention, Integer32):
    description = 'An enumerated value which indicates the rmon log type for OSPF Routing protocol.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("neighborAdjacencyChanges", 1), ("other", 2))

class HpicfOspfLogAction(TextualConvention, Integer32):
    description = 'Objects of this type are used to indicate action for every log type.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("enabled", 1), ("disabled", 2), ("enabledWithDetail", 3))

hpicfOspfLogTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 1, 4), )
if mibBuilder.loadTexts: hpicfOspfLogTable.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfLogTable.setDescription('A table containing the configuration parameters pertaining for OSPF routing protocol logging facility.')
hpicfOspfLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 1, 4, 1), ).setIndexNames((0, "HP-ICF-OSPF", "hpicfOspfLogType"))
if mibBuilder.loadTexts: hpicfOspfLogEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfLogEntry.setDescription('The configuration parameters pertaining to a OSPF log entry. Each entry contains information about the action and severity for a particular logType, and for each version of OSPF. ')
hpicfOspfLogType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 1, 4, 1, 1), HpicfOspfLogType())
if mibBuilder.loadTexts: hpicfOspfLogType.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfLogType.setDescription('The type of log for every kind of event in OSPF routing protocol .')
hpicfOspfLogAction = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 1, 4, 1, 2), HpicfOspfLogAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfOspfLogAction.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfLogAction.setDescription('The action, if any, that was taken by the agent when the event represented by hpicfOspfLogType. When enabled, brief information of the event is logged and if it is set to enabledWithDetail, provides more information, like every state changes, will get logged. If it is set to disabled, no events are logged.')
hpicfOspfNbrTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 1, 5), )
if mibBuilder.loadTexts: hpicfOspfNbrTable.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfNbrTable.setDescription('HP proprietary extension to ospfNbrTable to support read-only elements for reading neighbor adjacency length, designated router, backup designated router, Area ID and the and time-to-expiry for an OSPF neighbor')
hpicfOspfNbrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 1, 5, 1), )
ospfNbrEntry.registerAugmentions(("HP-ICF-OSPF", "hpicfOspfNbrEntry"))
hpicfOspfNbrEntry.setIndexNames(*ospfNbrEntry.getIndexNames())
if mibBuilder.loadTexts: hpicfOspfNbrEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfNbrEntry.setDescription('Each entry is extension of ospfNbr Entry and gives more information for OSPF neighbors')
hpicfOspfNbrUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 1, 5, 1, 1), PositiveInteger()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfNbrUpTime.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfNbrUpTime.setDescription('This object specifies the time duration for which the adjacency with the particular neighbor is active. This should be a monotonically increasing timer for the duration the adjacency is active. This counter should be reset when an adjacency is lost or re-established.')
hpicfOspfNbrTimeToExpiry = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 1, 5, 1, 2), PositiveInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfNbrTimeToExpiry.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfNbrTimeToExpiry.setDescription('This object specifies the time remaining for the dead timer for the particular neighbor to expire. This counter thus specifies the time in seconds left for an adjacency to be brought down in case no Hello packet is received during the interval.')
hpicfOspfNbrDesignatedRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 1, 5, 1, 3), IpAddress().clone(hexValue="00000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfNbrDesignatedRouter.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfNbrDesignatedRouter.setDescription('The IP address of the designated router.')
hpicfOspfNbrBackupDesignatedRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 1, 5, 1, 4), IpAddress().clone(hexValue="00000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfNbrBackupDesignatedRouter.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfNbrBackupDesignatedRouter.setDescription('The IP address of the backup designated router.')
hpicfOspfNbrAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 1, 5, 1, 5), AreaID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfNbrAreaId.setReference('OSPF Version 2, Appendix C.2 Area parameters')
if mibBuilder.loadTexts: hpicfOspfNbrAreaId.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfNbrAreaId.setDescription('A 32-bit integer uniquely identifying an area. Area ID 0.0.0.0 is used for the OSPF backbone.')
hpicfOspfNbrInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 1, 5, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfNbrInterfaceName.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfNbrInterfaceName.setDescription('The ifName value of this OSPF interface.')
hpicfOspfNbrBfdState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 1, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("notConfigured", 0), ("created", 1), ("up", 2), ("down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfNbrBfdState.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfNbrBfdState.setDescription('The ifName value of this OSPF interface.')
hpicfOspfConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 2))
hpicfOspfGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 2, 1))
hpicfOspfReqGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 2, 3))
hpicfOspfRetransGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 2, 4))
hpicfOspfFloodGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 2, 5))
hpicfOspfIfMetricObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 18))
hpicfOspfIfMetricTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 18, 1), )
if mibBuilder.loadTexts: hpicfOspfIfMetricTable.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfIfMetricTable.setDescription('Extensions to the table that contains OSPF Metric specific information.')
hpicfOspfIfMetricEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 18, 1, 1), )
ospfIfMetricEntry.registerAugmentions(("HP-ICF-OSPF", "hpicfOspfIfMetricEntry"))
hpicfOspfIfMetricEntry.setIndexNames(*ospfIfMetricEntry.getIndexNames())
if mibBuilder.loadTexts: hpicfOspfIfMetricEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfIfMetricEntry.setDescription('A list of extensions to the information maintained for an OSPF interface.')
hpicfOspfIfFlagValue = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 18, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 1)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfOspfIfFlagValue.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfIfFlagValue.setDescription('This flag is defined to know the type of OSPF cost configuration.. -1 : Default configuration. 0 : Manual configuration. 1 : Global configuration (value taken from global).')
hpicfOspfReqCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 2, 2, 2)).setObjects(("HP-ICF-OSPF", "hpicfOspfReqManGroup"), ("HP-ICF-OSPF", "hpicfOspfReqGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfOspfReqCompliance = hpicfOspfReqCompliance.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfReqCompliance.setDescription('The compliance statement for show Requestlist command.')
hpicfOspfFloodCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 2, 2, 3)).setObjects(("HP-ICF-OSPF", "hpicfOspfFloodManGroup"), ("HP-ICF-OSPF", "hpicfOspfFloodGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfOspfFloodCompliance = hpicfOspfFloodCompliance.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfFloodCompliance.setDescription('The compliance statement for show Floodlist command.')
hpicfOspfRetransCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 2, 2, 4)).setObjects(("HP-ICF-OSPF", "hpicfOspfRetransManGroup"), ("HP-ICF-OSPF", "hpicfOspfRetransGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfOspfRetransCompliance = hpicfOspfRetransCompliance.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfRetransCompliance.setDescription('The compliance statement for show Retranslist command.')
hpicfOspfCompliance1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 2, 2, 5)).setObjects(("HP-ICF-OSPF", "hpicfOspfAreaLsdbGroup"), ("HP-ICF-OSPF", "hpicfOspfExtLsdbGroup"), ("HP-ICF-OSPF", "hpicfOspfDistanceGroup"), ("HP-ICF-OSPF", "hpicfOspfSpfTimerGroup"), ("HP-ICF-OSPF", "hpicfOspfStatisticGroup"), ("HP-ICF-OSPF", "hpicfOspfIfGroup"), ("HP-ICF-OSPF", "hpicfOspfAreaAggregateGroup"), ("HP-ICF-OSPF", "hpicfOspfNbrGroup"), ("HP-ICF-OSPF", "hpicfOspfLogGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfOspfCompliance1 = hpicfOspfCompliance1.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfOspfCompliance1.setDescription('The compliance statement for this module.')
hpicfOspfSpfDelayCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 2, 2, 6)).setObjects(("HP-ICF-OSPF", "hpicfOspfSpfDelayGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfOspfSpfDelayCompliance = hpicfOspfSpfDelayCompliance.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfSpfDelayCompliance.setDescription('The compliance statement for this module.')
hpicfOspfAreaAggregateCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 2, 2, 7)).setObjects(("HP-ICF-OSPF", "hpicfOspfAreaAggregateGroup1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfOspfAreaAggregateCompliance = hpicfOspfAreaAggregateCompliance.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfAreaAggregateCompliance.setDescription('The compliance statement for this module.')
hpicfOspfCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 2, 2, 8)).setObjects(("HP-ICF-OSPF", "hpicfOspfAreaLsdbGroup"), ("HP-ICF-OSPF", "hpicfOspfExtLsdbGroup"), ("HP-ICF-OSPF", "hpicfOspfDistanceGroup"), ("HP-ICF-OSPF", "hpicfOspfSpfTimerGroup"), ("HP-ICF-OSPF", "hpicfOspfStatisticGroup"), ("HP-ICF-OSPF", "hpicfOspfIfGroup"), ("HP-ICF-OSPF", "hpicfOspfAreaAggregateGroup"), ("HP-ICF-OSPF", "hpicfOspfNbrGroup1"), ("HP-ICF-OSPF", "hpicfOspfLogGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfOspfCompliance2 = hpicfOspfCompliance2.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfOspfCompliance2.setDescription('The compliance statement for this module.')
hpicfOspfCompliance3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 2, 2, 9)).setObjects(("HP-ICF-OSPF", "hpicfOspfAreaLsdbGroup"), ("HP-ICF-OSPF", "hpicfOspfExtLsdbGroup"), ("HP-ICF-OSPF", "hpicfOspfDistanceGroup"), ("HP-ICF-OSPF", "hpicfOspfSpfTimerGroup"), ("HP-ICF-OSPF", "hpicfOspfStatisticGroup"), ("HP-ICF-OSPF", "hpicfOspfIfGroup"), ("HP-ICF-OSPF", "hpicfOspfAreaAggregateGroup"), ("HP-ICF-OSPF", "hpicfOspfNbrGroup1"), ("HP-ICF-OSPF", "hpicfOspfLogGroup"), ("HP-ICF-OSPF", "hpicfOspfReferenceGroup"), ("HP-ICF-OSPF", "hpicfOspfMetricGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfOspfCompliance3 = hpicfOspfCompliance3.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfCompliance3.setDescription('The compliance statement for this module.')
hpicfOspfReqManGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 2, 3, 1)).setObjects(("HP-ICF-OSPF", "hpicfOspfReqType"), ("HP-ICF-OSPF", "hpicfOspfReqLsid"), ("HP-ICF-OSPF", "hpicfOspfReqRouterId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfOspfReqManGroup = hpicfOspfReqManGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfReqManGroup.setDescription('A mandatory group that displays ID information with Respect to Link state,router,interface and the LSA type')
hpicfOspfReqGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 2, 3, 2)).setObjects(("HP-ICF-OSPF", "hpicfOspfReqSequence"), ("HP-ICF-OSPF", "hpicfOspfReqChecksum"), ("HP-ICF-OSPF", "hpicfOspfReqAge"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfOspfReqGroup = hpicfOspfReqGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfReqGroup.setDescription('This is a normal group that gives checksum,sequence and age related information ')
hpicfOspfRetransManGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 2, 4, 1)).setObjects(("HP-ICF-OSPF", "hpicfOspfRetransType"), ("HP-ICF-OSPF", "hpicfOspfRetransLsid"), ("HP-ICF-OSPF", "hpicfOspfRetransRouterId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfOspfRetransManGroup = hpicfOspfRetransManGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfRetransManGroup.setDescription('A mandatory group that displays ID information with Respect to Link state,router,interface and the LSA type')
hpicfOspfRetransGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 2, 4, 2)).setObjects(("HP-ICF-OSPF", "hpicfOspfRetransSequence"), ("HP-ICF-OSPF", "hpicfOspfRetransChecksum"), ("HP-ICF-OSPF", "hpicfOspfRetransAge"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfOspfRetransGroup = hpicfOspfRetransGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfRetransGroup.setDescription('This is a normal group that gives checksum,sequence and age related information ')
hpicfOspfFloodManGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 2, 5, 1)).setObjects(("HP-ICF-OSPF", "hpicfOspfFloodType"), ("HP-ICF-OSPF", "hpicfOspfFloodLsid"), ("HP-ICF-OSPF", "hpicfOspfFloodRouterId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfOspfFloodManGroup = hpicfOspfFloodManGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfFloodManGroup.setDescription('A mandatory group that displays ID information with Respect to Link state, router, `interface and the LSA type')
hpicfOspfFloodGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 2, 5, 2)).setObjects(("HP-ICF-OSPF", "hpicfOspfFloodSequence"), ("HP-ICF-OSPF", "hpicfOspfFloodChecksum"), ("HP-ICF-OSPF", "hpicfOspfFloodAge"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfOspfFloodGroup = hpicfOspfFloodGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfFloodGroup.setDescription('This is a normal group that gives checksum,sequence and age related information ')
hpicfOspfBaseGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 2, 1, 1)).setObjects(("HP-ICF-OSPF", "hpicfOspf1583CompatibilityMode"), ("HP-ICF-OSPF", "hpicfOspfDefaultImportMetric"), ("HP-ICF-OSPF", "hpicfOspfDefaultImportMetricType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfOspfBaseGroup = hpicfOspfBaseGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfBaseGroup.setDescription('Basic OSPF configuration information that is not in the standard OSPF MIB.')
hpicfOspfRedistGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 2, 1, 2)).setObjects(("HP-ICF-OSPF", "hpicfOspfRedistEnabled"), ("HP-ICF-OSPF", "hpicfOspfRedistRestrictStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfOspfRedistGroup = hpicfOspfRedistGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfRedistGroup.setDescription('A collection of objects for controlling the redistribution of external routes by OSPF.')
hpicfOspfDistanceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 2, 1, 3)).setObjects(("HP-ICF-OSPF", "hpicfOspfIntraAreaDistance"), ("HP-ICF-OSPF", "hpicfOspfInterAreaDistance"), ("HP-ICF-OSPF", "hpicfOspfExternalDistance"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfOspfDistanceGroup = hpicfOspfDistanceGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfDistanceGroup.setDescription('A collection of objects for configuring the administrative distance of routes learned by OSPF.')
hpicfOspfSpfTimerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 2, 1, 5)).setObjects(("HP-ICF-OSPF", "hpicfOspfSpfTimerElapsed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfOspfSpfTimerGroup = hpicfOspfSpfTimerGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfSpfTimerGroup.setDescription('Time taken since the last spf Run.')
hpicfOspfStatisticGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 2, 1, 4)).setObjects(("HP-ICF-OSPF", "hpicfOspfSentHelloPkt"), ("HP-ICF-OSPF", "hpicfOspfSentDDPkt"), ("HP-ICF-OSPF", "hpicfOspfSentLSRPkt"), ("HP-ICF-OSPF", "hpicfOspfSentLSUPkt"), ("HP-ICF-OSPF", "hpicfOspfSentLSAPkt"), ("HP-ICF-OSPF", "hpicfOspfRcvdHelloPkt"), ("HP-ICF-OSPF", "hpicfOspfRcvdDDPkt"), ("HP-ICF-OSPF", "hpicfOspfRcvdLSRPkt"), ("HP-ICF-OSPF", "hpicfOspfRcvdLSUPkt"), ("HP-ICF-OSPF", "hpicfOspfRcvdLSAPkt"), ("HP-ICF-OSPF", "hpicfOspfIfErrorCount"), ("HP-ICF-OSPF", "hpicfOspfClearCounters"), ("HP-ICF-OSPF", "hpicfOspfSpfReason"), ("HP-ICF-OSPF", "hpicfOspfSpfTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfOspfStatisticGroup = hpicfOspfStatisticGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfStatisticGroup.setDescription('A collection of objects that contain OSPF interface and SPF statistics.')
hpicfOspfLogGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 2, 1, 6)).setObjects(("HP-ICF-OSPF", "hpicfOspfLogAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfOspfLogGroup = hpicfOspfLogGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfLogGroup.setDescription('A collection of objects for configuring the logging of OSPF events.')
hpicfOspfNbrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 2, 1, 7)).setObjects(("HP-ICF-OSPF", "hpicfOspfNbrUpTime"), ("HP-ICF-OSPF", "hpicfOspfNbrTimeToExpiry"), ("HP-ICF-OSPF", "hpicfOspfNbrDesignatedRouter"), ("HP-ICF-OSPF", "hpicfOspfNbrBackupDesignatedRouter"), ("HP-ICF-OSPF", "hpicfOspfNbrAreaId"), ("HP-ICF-OSPF", "hpicfOspfNbrInterfaceName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfOspfNbrGroup = hpicfOspfNbrGroup.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfOspfNbrGroup.setDescription('A collection of read-only elements for an OSPF neighbor.')
hpicfOspfAreaAggregateTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 1, 6), )
if mibBuilder.loadTexts: hpicfOspfAreaAggregateTable.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfAreaAggregateTable.setDescription('HP proprietary extensions to ospfAreaAggregateTable')
hpicfOspfAreaAggregateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 1, 6, 1), )
ospfAreaAggregateEntry.registerAugmentions(("HP-ICF-OSPF", "hpicfOspfAreaAggregateEntry"))
hpicfOspfAreaAggregateEntry.setIndexNames(*ospfAreaAggregateEntry.getIndexNames())
if mibBuilder.loadTexts: hpicfOspfAreaAggregateEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfAreaAggregateEntry.setDescription('Each entry is extension of ospfAreaAggregateEntry')
hpicfOspfAreaAggregateCost = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 1, 6, 1, 1), BigMetric()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfOspfAreaAggregateCost.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfAreaAggregateCost.setDescription('Manually configured cost of the summary advertisement. A value of 0 indicates that the cost defined and calculated by the OSPF standard should be used. Valid costs range from 1-16777215')
hpicfOspfAreaAggregateType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("type1", 1), ("type2", 2))).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfOspfAreaAggregateType.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfAreaAggregateType.setDescription("Configure whether external metric and OSPF metric are comparable. If 'metric-type' is specified as 'type1', the external metric and the OSPF metric are considered comparable. 'type2' implies non-comparable metric")
hpicfOspfIfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 2, 1, 8)).setObjects(("HP-ICF-OSPF", "hpicfOspfIfPassive"), ("HP-ICF-OSPF", "hpicfOspfIfNbrCount"), ("HP-ICF-OSPF", "hpicfOspfIfBfdEnbl"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfOspfIfGroup = hpicfOspfIfGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfIfGroup.setDescription('These interface objects used for managing/monitoring OSPFv2 interfaces.')
hpicfOspfAreaLsdbGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 2, 1, 9)).setObjects(("HP-ICF-OSPF", "hpicfOspfAreaLsdbRtrCapBits"), ("HP-ICF-OSPF", "hpicfOspfAreaLsdbOptions"), ("HP-ICF-OSPF", "hpicfOspfAreaLsdbMetric"), ("HP-ICF-OSPF", "hpicfOspfAreaLsdbAddrPrefix"), ("HP-ICF-OSPF", "hpicfOspfAreaLsdbFwdingAddress"), ("HP-ICF-OSPF", "hpicfOspfAreaLsdbExtRouteTags"), ("HP-ICF-OSPF", "hpicfOspfRouterLSAIfType"), ("HP-ICF-OSPF", "hpicfOspfRouterLSAMetric"), ("HP-ICF-OSPF", "hpicfOspfRouterLSAIfId"), ("HP-ICF-OSPF", "hpicfOspfNetworkLSAAttachedRouter"), ("HP-ICF-OSPF", "hpicfOspfTOS"), ("HP-ICF-OSPF", "hpicfOspfLsdbRouterLinks"), ("HP-ICF-OSPF", "hpicfOspfRouterLSATOSMetric"), ("HP-ICF-OSPF", "hpicfOspfLsdbBitE"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfOspfAreaLsdbGroup = hpicfOspfAreaLsdbGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfAreaLsdbGroup.setDescription('These objects used for managing/monitoring OSPFv2 LSAs.')
hpicfOspfExtLsdbGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 2, 1, 10)).setObjects(("HP-ICF-OSPF", "hpicfOspfExtLsdbMetric"), ("HP-ICF-OSPF", "hpicfOspfExtLsdbOptions"), ("HP-ICF-OSPF", "hpicfOspfExtLsdbFwdingAddress"), ("HP-ICF-OSPF", "hpicfOspfExtLsdbExtRouteTags"), ("HP-ICF-OSPF", "hpicfOspfExtLsdbBitE"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfOspfExtLsdbGroup = hpicfOspfExtLsdbGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfExtLsdbGroup.setDescription('These objects are used for OSPFv2 systems that display their AS-scope link state database.')
hpicfOspfAreaAggregateGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 2, 1, 11)).setObjects(("HP-ICF-OSPF", "hpicfOspfAreaAggregateCost"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfOspfAreaAggregateGroup = hpicfOspfAreaAggregateGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfAreaAggregateGroup.setDescription('Group for ospfAreaAggregate objects.')
hpicfOspfSpfDelayGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 2, 1, 12)).setObjects(("HP-ICF-OSPF", "hpicfOspfSpfThrottleStartInterval"), ("HP-ICF-OSPF", "hpicfOspfSpfThrottleWaitInterval"), ("HP-ICF-OSPF", "hpicfOspfSpfThrottleMaxWaitTime"), ("HP-ICF-OSPF", "hpicfOspfSpfThrottleCurrentSpfInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfOspfSpfDelayGroup = hpicfOspfSpfDelayGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfSpfDelayGroup.setDescription('Group for ospfSpfThrottle objects.')
hpicfOspfAreaAggregateGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 2, 1, 13)).setObjects(("HP-ICF-OSPF", "hpicfOspfAreaAggregateType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfOspfAreaAggregateGroup1 = hpicfOspfAreaAggregateGroup1.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfAreaAggregateGroup1.setDescription('Group for ospfAreaAggregateType objects.')
hpicfOspfNbrGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 2, 1, 14)).setObjects(("HP-ICF-OSPF", "hpicfOspfNbrUpTime"), ("HP-ICF-OSPF", "hpicfOspfNbrTimeToExpiry"), ("HP-ICF-OSPF", "hpicfOspfNbrDesignatedRouter"), ("HP-ICF-OSPF", "hpicfOspfNbrBackupDesignatedRouter"), ("HP-ICF-OSPF", "hpicfOspfNbrAreaId"), ("HP-ICF-OSPF", "hpicfOspfNbrInterfaceName"), ("HP-ICF-OSPF", "hpicfOspfNbrBfdState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfOspfNbrGroup1 = hpicfOspfNbrGroup1.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfNbrGroup1.setDescription('A collection of read-only elements for an OSPF neighbor.')
hpicfOspfReferenceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 2, 1, 15)).setObjects(("HP-ICF-OSPF", "hpicfOspfReferenceCost"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfOspfReferenceGroup = hpicfOspfReferenceGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfReferenceGroup.setDescription('Elements in the global cost context')
hpicfOspfMetricGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 14, 2, 1, 16)).setObjects(("HP-ICF-OSPF", "hpicfOspfIfFlagValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfOspfMetricGroup = hpicfOspfMetricGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfMetricGroup.setDescription('Flags to identify global or manual OSPF cost configuration.')
mibBuilder.exportSymbols("HP-ICF-OSPF", hpicfOspfSentLSRPkt=hpicfOspfSentLSRPkt, hpicfOspfAreaLsdbExtRouteTags=hpicfOspfAreaLsdbExtRouteTags, hpicfOspfAreaLsdbGroup=hpicfOspfAreaLsdbGroup, hpicfOspfBaseGroup=hpicfOspfBaseGroup, hpicfOspfNetworkLSAAttachedRouter=hpicfOspfNetworkLSAAttachedRouter, hpicfOspfReqType=hpicfOspfReqType, hpicfOspfReqGroups=hpicfOspfReqGroups, hpicfOspfIfErrorType=hpicfOspfIfErrorType, hpicfOspfAreaAggregateCost=hpicfOspfAreaAggregateCost, hpicfOspfReqManGroup=hpicfOspfReqManGroup, hpicfOspfReqLsid=hpicfOspfReqLsid, hpicfOspfIfMetricEntry=hpicfOspfIfMetricEntry, hpicfOspfRetransChecksum=hpicfOspfRetransChecksum, hpicfOspfFloodSequence=hpicfOspfFloodSequence, hpicfOspfExtLsdbBitE=hpicfOspfExtLsdbBitE, hpicfOspfAreaAggregateEntry=hpicfOspfAreaAggregateEntry, hpicfOspfExternalDistance=hpicfOspfExternalDistance, hpicfOspfIfGroup=hpicfOspfIfGroup, hpicfOspfSpfTimerGroup=hpicfOspfSpfTimerGroup, hpicfOspfGroups=hpicfOspfGroups, hpicfOspfRouterLSAIfType=hpicfOspfRouterLSAIfType, hpicfOspfIfStatsTable=hpicfOspfIfStatsTable, hpicfOspfRouterLSAMetric=hpicfOspfRouterLSAMetric, hpicfOspfLogAction=hpicfOspfLogAction, hpicfOspfRedistRestrictStatus=hpicfOspfRedistRestrictStatus, hpicfOspfIfFlagValue=hpicfOspfIfFlagValue, HpicfOspfRouterIdTc=HpicfOspfRouterIdTc, hpicfOspfAreaLsdbMetric=hpicfOspfAreaLsdbMetric, hpicfOspfFloodGroup=hpicfOspfFloodGroup, hpicfOspfSpfThrottleMaxWaitTime=hpicfOspfSpfThrottleMaxWaitTime, hpicfOspfFloodCompliance=hpicfOspfFloodCompliance, hpicfOspfNssaType2=hpicfOspfNssaType2, hpicfOspfAreaAggregateTable=hpicfOspfAreaAggregateTable, PYSNMP_MODULE_ID=hpicfOspf, hpicfOspfExtLsdbGroup=hpicfOspfExtLsdbGroup, hpicfOspfSpfTable=hpicfOspfSpfTable, hpicfOspfAreaLsdbEntry=hpicfOspfAreaLsdbEntry, hpicfOspfNbrTable=hpicfOspfNbrTable, hpicfOspfNetworkLSAEntry=hpicfOspfNetworkLSAEntry, hpicfOspfSentHelloPkt=hpicfOspfSentHelloPkt, hpicfOspfNbrAreaId=hpicfOspfNbrAreaId, hpicfOspfCompliance=hpicfOspfCompliance, hpicfOspfRcvdLSAPkt=hpicfOspfRcvdLSAPkt, hpicfOspfRcvdHelloPkt=hpicfOspfRcvdHelloPkt, hpicfOspfRetransManGroup=hpicfOspfRetransManGroup, hpicfOspfExtLsdbOptions=hpicfOspfExtLsdbOptions, hpicfOspfLogTable=hpicfOspfLogTable, hpicfOspfNbrBackupDesignatedRouter=hpicfOspfNbrBackupDesignatedRouter, hpicfOspfSentLSAPkt=hpicfOspfSentLSAPkt, hpicfOspfSentDDPkt=hpicfOspfSentDDPkt, hpicfOspfIfBfdEnbl=hpicfOspfIfBfdEnbl, hpicfOspfNbrDesignatedRouter=hpicfOspfNbrDesignatedRouter, hpicfOspfDefaultImportMetricType=hpicfOspfDefaultImportMetricType, hpicfOspfFloodAge=hpicfOspfFloodAge, hpicfOspfSpfTimerElapsed=hpicfOspfSpfTimerElapsed, hpicfOspfRedistRestrictTable=hpicfOspfRedistRestrictTable, hpicfOspfExtLsdbFwdingAddress=hpicfOspfExtLsdbFwdingAddress, hpicfOspfExtLsdbExtRouteTags=hpicfOspfExtLsdbExtRouteTags, hpicfOspfFloodEntry=hpicfOspfFloodEntry, hpicfOspfNetworkLSATable=hpicfOspfNetworkLSATable, hpicfOspfNbrGroup1=hpicfOspfNbrGroup1, hpicfOspfRetransType=hpicfOspfRetransType, hpicfOspfSpfDelayCompliance=hpicfOspfSpfDelayCompliance, hpicfOspfExtLsdbTable=hpicfOspfExtLsdbTable, hpicfOspfSpfThrottleStartInterval=hpicfOspfSpfThrottleStartInterval, hpicfOspfRedistEnabled=hpicfOspfRedistEnabled, hpicfOspfNbrInterfaceName=hpicfOspfNbrInterfaceName, hpicfOspfIfEntry=hpicfOspfIfEntry, hpicfOspfExtLsdbMetric=hpicfOspfExtLsdbMetric, hpicfOspfIfErrorEntry=hpicfOspfIfErrorEntry, hpicfOspfRetransSequence=hpicfOspfRetransSequence, hpicfOspfReqRouterId=hpicfOspfReqRouterId, hpicfOspfRetransGroups=hpicfOspfRetransGroups, hpicfOspfFloodTable=hpicfOspfFloodTable, hpicfOspfSpfThrottleWaitInterval=hpicfOspfSpfThrottleWaitInterval, hpicfOspfFloodLsid=hpicfOspfFloodLsid, hpicfOspfAreaAggregateGroup1=hpicfOspfAreaAggregateGroup1, hpicfOspfRedistRestrictAddr=hpicfOspfRedistRestrictAddr, hpicfOspfRcvdLSUPkt=hpicfOspfRcvdLSUPkt, hpicfOspfRetransAge=hpicfOspfRetransAge, hpicfOspfDistanceGroup=hpicfOspfDistanceGroup, hpicfOspfRedistRestrictMask=hpicfOspfRedistRestrictMask, hpicfOspfFloodRouterId=hpicfOspfFloodRouterId, hpicfOspfNbrGroup=hpicfOspfNbrGroup, hpicfOspfFloodChecksum=hpicfOspfFloodChecksum, hpicfOspfCompliance2=hpicfOspfCompliance2, hpicfOspfRedistSrcProto=hpicfOspfRedistSrcProto, hpicfOspfObjects=hpicfOspfObjects, hpicfOspfLogGroup=hpicfOspfLogGroup, hpicfOspfExtLsdbEntry=hpicfOspfExtLsdbEntry, hpicfOspfIfStatsEntry=hpicfOspfIfStatsEntry, hpicfOspfRedistTable=hpicfOspfRedistTable, hpicfOspfLsdbBitE=hpicfOspfLsdbBitE, hpicfOspfRedistEntry=hpicfOspfRedistEntry, hpicfOspfStatisticGroup=hpicfOspfStatisticGroup, hpicfOspfFloodGroups=hpicfOspfFloodGroups, HpicfOspfLogAction=HpicfOspfLogAction, hpicfOspfSpfEntry=hpicfOspfSpfEntry, hpicfOspfRouterLSATable=hpicfOspfRouterLSATable, hpicfOspfSentLSUPkt=hpicfOspfSentLSUPkt, hpicfOspfTOS=hpicfOspfTOS, hpicfOspfReqAge=hpicfOspfReqAge, hpicfOspfNbrBfdState=hpicfOspfNbrBfdState, hpicfOspfAreaAggregateType=hpicfOspfAreaAggregateType, hpicfOspfRouteGroup=hpicfOspfRouteGroup, hpicfOspfAreaLsdbRtrCapBits=hpicfOspfAreaLsdbRtrCapBits, hpicfOspfIfMetricObjects=hpicfOspfIfMetricObjects, hpicfOspfReferenceGroup=hpicfOspfReferenceGroup, hpicfOspfNssaType1=hpicfOspfNssaType1, hpicfOspfAreaAggregateCompliance=hpicfOspfAreaAggregateCompliance, hpicfOspfSpfReason=hpicfOspfSpfReason, hpicfOspfIntraAreaDistance=hpicfOspfIntraAreaDistance, hpicfOspfClearCounters=hpicfOspfClearCounters, hpicfOspf1583CompatibilityMode=hpicfOspf1583CompatibilityMode, hpicfOspfAreaAggregateGroup=hpicfOspfAreaAggregateGroup, hpicfOspfCompliance3=hpicfOspfCompliance3, hpicfOspfDefaultImportMetric=hpicfOspfDefaultImportMetric, hpicfOspfReqEntry=hpicfOspfReqEntry, hpicfOspfRcvdLSRPkt=hpicfOspfRcvdLSRPkt, hpicfOspfLogEntry=hpicfOspfLogEntry, hpicfOspfAreaLsdbOptions=hpicfOspfAreaLsdbOptions, hpicfOspfAreaLsdbTable=hpicfOspfAreaLsdbTable, hpicfOspfIfPassive=hpicfOspfIfPassive, hpicfOspfIfNbrCount=hpicfOspfIfNbrCount, hpicfOspfMetricGroup=hpicfOspfMetricGroup, hpicfOspfIfClearStatsTable=hpicfOspfIfClearStatsTable, hpicfOspfRetransEntry=hpicfOspfRetransEntry, hpicfOspfSpfDelayGroup=hpicfOspfSpfDelayGroup, hpicfOspfInterAreaDistance=hpicfOspfInterAreaDistance, hpicfOspfAreaLsdbFwdingAddress=hpicfOspfAreaLsdbFwdingAddress, hpicfOspfCompliance1=hpicfOspfCompliance1, hpicfOspfIfClearStatsEntry=hpicfOspfIfClearStatsEntry, hpicfOspfRetransTable=hpicfOspfRetransTable, hpicfOspfIfTable=hpicfOspfIfTable, hpicfOspfFloodManGroup=hpicfOspfFloodManGroup, hpicfOspfIfErrorCount=hpicfOspfIfErrorCount, hpicfOspfReqTable=hpicfOspfReqTable, hpicfOspfGeneral=hpicfOspfGeneral, hpicfOspfRedistGroup=hpicfOspfRedistGroup, hpicfOspfSpfThrottleCurrentSpfInterval=hpicfOspfSpfThrottleCurrentSpfInterval, hpicfOspf=hpicfOspf, hpicfOspfRouterLSAEntry=hpicfOspfRouterLSAEntry, hpicfOspfNbrTimeToExpiry=hpicfOspfNbrTimeToExpiry, hpicfOspfReqGroup=hpicfOspfReqGroup, hpicfOspfLsdbRouterLinks=hpicfOspfLsdbRouterLinks, hpicfOspfRouterLSANbrRtrId=hpicfOspfRouterLSANbrRtrId, hpicfOspfRouterLSAIfId=hpicfOspfRouterLSAIfId, hpicfOspfSpfInstance=hpicfOspfSpfInstance, hpicfOspfCompliances=hpicfOspfCompliances, hpicfOspfRetransGroup=hpicfOspfRetransGroup, hpicfOspfReqCompliance=hpicfOspfReqCompliance, hpicfOspfRouterLSATOSMetric=hpicfOspfRouterLSATOSMetric, hpicfOspfNbrUpTime=hpicfOspfNbrUpTime, hpicfOspfRcvdDDPkt=hpicfOspfRcvdDDPkt, hpicfOspfNetworkLSASeqNum=hpicfOspfNetworkLSASeqNum, hpicfOspfFloodType=hpicfOspfFloodType, hpicfOspfLogType=hpicfOspfLogType, hpicfOspfSpfTime=hpicfOspfSpfTime, hpicfOspfRetransCompliance=hpicfOspfRetransCompliance, hpicfOspfReferenceCost=hpicfOspfReferenceCost, hpicfOspfReqSequence=hpicfOspfReqSequence, hpicfOspfAreaLsdbAddrPrefix=hpicfOspfAreaLsdbAddrPrefix, hpicfOspfRetransRouterId=hpicfOspfRetransRouterId, hpicfOspfIfMetricTable=hpicfOspfIfMetricTable, hpicfOspfReqChecksum=hpicfOspfReqChecksum, hpicfOspfRetransLsid=hpicfOspfRetransLsid, hpicfOspfIfErrorTable=hpicfOspfIfErrorTable, hpicfOspfRedistRestrictEntry=hpicfOspfRedistRestrictEntry, hpicfOspfNbrEntry=hpicfOspfNbrEntry, HpicfOspfLogType=HpicfOspfLogType, hpicfOspfConformance=hpicfOspfConformance)
