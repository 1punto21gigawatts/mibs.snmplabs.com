#
# PySNMP MIB module DOCS-IF31-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DOCS-IF31-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:53:05 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
clabProjDocsis, = mibBuilder.importSymbols("CLAB-DEF-MIB", "clabProjDocsis")
docsIfUpstreamChannelEntry, TenthdBmV = mibBuilder.importSymbols("DOCS-IF-MIB", "docsIfUpstreamChannelEntry", "TenthdBmV")
docsIf3CmtsCmRegStatusId, IfDirection, AttributeMask, docsIf3CmtsCmRegStatusEntry, RangingState = mibBuilder.importSymbols("DOCS-IF3-MIB", "docsIf3CmtsCmRegStatusId", "IfDirection", "AttributeMask", "docsIf3CmtsCmRegStatusEntry", "RangingState")
CounterBasedGauge64, = mibBuilder.importSymbols("HCNUM-TC", "CounterBasedGauge64")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
TimeTicks, Counter32, NotificationType, ObjectIdentity, IpAddress, iso, Bits, ModuleIdentity, MibIdentifier, Unsigned32, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Counter32", "NotificationType", "ObjectIdentity", "IpAddress", "iso", "Bits", "ModuleIdentity", "MibIdentifier", "Unsigned32", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Counter64")
DateAndTime, TruthValue, TextualConvention, DisplayString, TimeStamp = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "TruthValue", "TextualConvention", "DisplayString", "TimeStamp")
docsIf31Mib = ModuleIdentity((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28))
docsIf31Mib.setRevisions(('2017-05-25 00:00', '2016-12-15 00:00', '2016-08-18 00:00', '2016-05-05 00:00', '2015-11-04 00:00', '2015-07-15 00:00', '2015-05-20 00:00', '2015-04-08 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: docsIf31Mib.setRevisionsDescriptions(('Revised Version includes ECN change for diplexer objects DOCS-IF31-MIB-N-17.1733-1', 'Revised Version includes ECN DOCS-IF31-MIB-N-16.1621-3.', 'Revised Version includes ECN DOCS-IF31-MIB-N-16.1549-3.', 'Revised Version includes ECN CCAP-OSSIv3.1-N-16.1472-4; supersedes CCAP-OSSIv3.1-N-16.1432-3.', 'Revised per CM-OSSIv3.1-N-15.1385-3, which rolls up changes from the following ECNs: CM-OSSIv3.1-N-15.1375-1 and CCAP-OSSIv3.1-N-15.1376-1, adding additional indices for the docsIf31CmUsOfdmaMinislotCfgStateTable per the OSSI-CM spec.', 'Revised Version includes ECN CCAP-OSSIv3.1-N-15.1324-1', 'Revised Version includes ECN CCAP-OSSIv3.1-N-15.1308-2 Synchronized with CM-SP-CM-OSSIv3.1-I04 and CM-SP-CCAP-OSSIv3.1-I04', 'Initial version, per CCAP-OSSIv3.1-N-15.1278-4',))
if mibBuilder.loadTexts: docsIf31Mib.setLastUpdated('201705250000Z')
if mibBuilder.loadTexts: docsIf31Mib.setOrganization('Cable Television Laboratories, Inc.')
if mibBuilder.loadTexts: docsIf31Mib.setContactInfo(' Postal: Cable Television Laboratories, Inc. 858 Coal Creek Circle Louisville, Colorado 80027-9750 U.S.A. Phone: +1 303-661-9100 Fax: +1 303-661-9199 E-mail: mibs@cablelabs.com')
if mibBuilder.loadTexts: docsIf31Mib.setDescription('This MIB module contains the management objects for the management of DOCSIS 3.1 features, primarily OFDM and OFDMA channels. Copyright 2017 Cable Television Laboratories, Inc. All rights reserved.')
class ClabsDocsisVersion(TextualConvention, Integer32):
    description = "Indicates the DOCSIS Radio Frequency specification being referenced. 'docsis10' indicates DOCSIS 1.0. 'docsis11' indicates DOCSIS 1.1. 'docsis20' indicates DOCSIS 2.0. 'docsis30' indicates DOCSIS 3.0. 'docsis31' indicates DOCSIS 3.1."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("other", 0), ("docsis10", 1), ("docsis11", 2), ("docsis20", 3), ("docsis30", 4), ("docsis31", 5))

class EmIdList(TextualConvention, OctetString):
    description = 'A list of Energy Management Ids displayed as a comma-separated list of 15-bit hexadecimal values. These values are encoded into 16-bits but the high-order bit is always 0.'
    status = 'current'
    displayHint = '2x,'
    subtypeSpec = OctetString.subtypeSpec + ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(2, 2), ValueSizeConstraint(4, 4), ValueSizeConstraint(6, 6), )
class SubcarrierSpacingType(TextualConvention, Integer32):
    reference = 'DOCSIS 3.1 Physical Layer Specification CM-SP-PHYv3.1-I03-140610, Downstream OFDM Parameters and Upstream OFDMA Parameters tables.'
    description = 'This data type defines the subcarrier spacing for the FFT mode in use. For downstream OFDM channels, if the FFT mode is 4K mode, then spacing is 50 kHz; if it is 8K mode, then the spacing is 25 kHz. For upstream OFDMA channels, if the FFT mode is 2K mode, then the spacing is 50kHz; if the mode is 4K mode, then the spacing is 25kHz. In units of kHz.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(25, 25), ValueRangeConstraint(50, 50), )
class PrimaryDsIndicatorType(TextualConvention, Integer32):
    description = 'This data type is defined to represent the channel indicator type for the downstream channel.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("other", 1), ("primary", 2), ("backupPrimary", 3), ("nonPrimary", 4))

class OfdmProfiles(TextualConvention, Bits):
    description = 'This data type enumerates the configured channel profiles on the CM.'
    status = 'current'
    namedValues = NamedValues(("profile0", 0), ("profile1", 1), ("profile2", 2), ("profile3", 3), ("profile4", 4), ("profile5", 5), ("profile6", 6), ("profile7", 7), ("profile8", 8), ("profile9", 9), ("profile10", 10), ("profile11", 11), ("profile12", 12), ("profile13", 13), ("profile14", 14), ("profile15", 15))

class DsOfdmCyclicPrefix(TextualConvention, Unsigned32):
    description = 'This data type is defined to indicate the five possible values for the length of cyclic prefix. This represents the number of samples of the 204.8 MHz clock'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(192, 192), ValueRangeConstraint(256, 256), ValueRangeConstraint(512, 512), ValueRangeConstraint(768, 768), ValueRangeConstraint(1024, 1024), )
class UsOfdmaCyclicPrefix(TextualConvention, Unsigned32):
    description = 'This data type is defined to indicate the eleven possible values for the length of cyclic prefix. The cyclic prefix represents the number of samples of the 204.8 MHz clock.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(96, 96), ValueRangeConstraint(128, 128), ValueRangeConstraint(160, 160), ValueRangeConstraint(192, 192), ValueRangeConstraint(224, 224), ValueRangeConstraint(256, 256), ValueRangeConstraint(288, 288), ValueRangeConstraint(320, 320), ValueRangeConstraint(384, 384), ValueRangeConstraint(512, 512), ValueRangeConstraint(640, 640), )
class DsOfdmRollOffPeriod(TextualConvention, Unsigned32):
    description = 'This data type is defined to indicate the five possible values for the windowing roll-off period. This represents the number of samples of the 204.8 MHz clock.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(64, 64), ValueRangeConstraint(128, 128), ValueRangeConstraint(192, 192), ValueRangeConstraint(256, 256), )
class UsOfdmaRollOffPeriod(TextualConvention, Unsigned32):
    description = 'This data type is defined to indicate the eight possible values for the windowing roll-off period. This represents the number of samples of the 204.8 MHz clock'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(32, 32), ValueRangeConstraint(64, 64), ValueRangeConstraint(96, 96), ValueRangeConstraint(128, 128), ValueRangeConstraint(160, 160), ValueRangeConstraint(192, 192), ValueRangeConstraint(224, 224), )
class TimeInterleaverDepth(TextualConvention, Unsigned32):
    description = 'This data type is defined to indicate the depth of time interleaving used for this downstream channel in symbols.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 32)

class DsOfdmModulationType(TextualConvention, Integer32):
    reference = 'DOCSIS 3.1 Physical layer Specification CM-SP-PHYv3.1-I03-140610, Modulation Formats section.'
    description = 'This data type is defined to indicate the bit loading of subcarriers in an OFDM downstream channel.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))
    namedValues = NamedValues(("other", 1), ("zeroValued", 2), ("qpsk", 3), ("qam16", 4), ("qam64", 5), ("qam128", 6), ("qam256", 7), ("qam512", 8), ("qam1024", 9), ("qam2048", 10), ("qam4096", 11), ("qam8192", 12), ("qam16384", 13))

class UsOfdmaModulationType(TextualConvention, Integer32):
    reference = 'DOCSIS 3.1 Physical layer Specification CM-SP-PHYv3.1-I03-140610, Modulation Formats section.'
    description = 'This data type is defined to indicate the bit loading of subcarriers in an OFDMA upstream channel.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))
    namedValues = NamedValues(("other", 1), ("zeroValued", 2), ("bpsk", 3), ("qpsk", 4), ("qam8", 5), ("qam16", 6), ("qam32", 7), ("qam64", 8), ("qam128", 9), ("qam256", 10), ("qam512", 11), ("qam1024", 12), ("qam2048", 13), ("qam4096", 14))

class PartialChannelType(TextualConvention, Bits):
    reference = 'DOCSIS 3.1 MAC and Upper Layer Protocols Interface Specification CM-SP-MULPIv3.1-I03-140610, CM Status Report section.'
    description = 'This data type enumerates each of the possible profiles or channel attributes which can contribute to an OFDM channel being considered a Partial Channel by the MAC layer. As more than one of these error conditions can exist at the same time this data type is based on a BITS data type. The bits from low to high are: Bit 0: fecErrorsDsProfile Bit 1: fecErrorsNcpProfile Bit 2: fecErrorsPlc'
    status = 'current'
    namedValues = NamedValues(("fecErrorsDsProfile", 0), ("fecErrorsNcpProfile", 1), ("fecErrorsPlc", 2))

class PartialServiceType(TextualConvention, Integer32):
    reference = 'DOCSIS 3.1 MAC and Upper Layer Protocols Interface Specification CM-SP-MULPIv3.1-I03-140610, CM Status Report section.'
    description = 'This data type enumerates the type of channel issue which the MAC Layer indicates is causing the CM to be in DOCSIS 3.0 Partial Service mode. The possible values are as follows: other(1) none(2) partialSvcDsOnlyImpaired(3) partialSvcUsOnlyImpaired(4) partialSvcDsAndUsImpaired(5)'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("other", 1), ("none", 2), ("partialSvcDsOnlyImpaired", 3), ("partialSvcUsOnlyImpaired", 4), ("partialSvcDsAndUsImpaired", 5))

class PartialChanReasonType(TextualConvention, Integer32):
    reference = 'DOCSIS 3.1 MAC and Upper Layer Protocols Interface Specification CM-SP-MULPIv3.1-I03-140610, CM Status Report section.'
    description = 'This data type enumerates the CM-STATUS events which a CM can utilize to report a Partial Channel situation.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 16, 18, 20, 21))
    namedValues = NamedValues(("none", 0), ("dsOfdmProfileFailure", 16), ("dpdMismatch", 18), ("ncpProfileFailure", 20), ("plcFailure", 21))

class PartialSvcReasonType(TextualConvention, Integer32):
    reference = 'DOCSIS 3.1 MAC and Upper Layer Protocols Interface Specification CM-SP-MULPIv3.1-I03-140610, CM Status Report section.'
    description = 'This data type enumerates the CM-STATUS events which a CM can utilize to report a Partial Service situation.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("none", 0), ("secondaryChanMddTimeout", 1), ("lostFecLock", 2))

class HundredthdBmV(TextualConvention, Integer32):
    description = 'This data type represents power levels that are normally expressed in dBmV. Units are in hundredths of a dBmV; for example, 5.17 dBmV will be represented as 517.'
    status = 'current'
    displayHint = 'd-2'

class HundredthdB(TextualConvention, Integer32):
    description = 'This data type represents power levels that are normally expressed in dB. Units are in hundredths of a dB; for example, 5.17 dB will be represented as 517.'
    status = 'current'
    displayHint = 'd-2'

docsIf31Notifications = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 0))
docsIf31MibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1))
docsIf31DocsisBaseCapability = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 1), ClabsDocsisVersion()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31DocsisBaseCapability.setStatus('current')
if mibBuilder.loadTexts: docsIf31DocsisBaseCapability.setDescription('This attribute reports the DOCSIS capability of the device. A CMTS reports its highest supported DOCSIS version while a CM reports its supported DOCSIS version. This attribute replaces docsIfDocsisBaseCapability defined in RFC 4546.')
docsIf31RxChStatusTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 2), )
if mibBuilder.loadTexts: docsIf31RxChStatusTable.setStatus('current')
if mibBuilder.loadTexts: docsIf31RxChStatusTable.setDescription('The Receive Channel Status object reports the status of the statically-configured and dynamically-created Receive Channels within an RCC.')
docsIf31RxChStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: docsIf31RxChStatusEntry.setStatus('current')
if mibBuilder.loadTexts: docsIf31RxChStatusEntry.setDescription('The conceptual row of docsIf31RxChStatusTable.')
docsIf31RxChStatusPrimaryDsIndicator = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 2, 1, 1), PrimaryDsIndicatorType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31RxChStatusPrimaryDsIndicator.setStatus('current')
if mibBuilder.loadTexts: docsIf31RxChStatusPrimaryDsIndicator.setDescription("This attribute is used to identify the downstream channel as primary, backup primary or non-primary. A value of 'primary(2)' indicates that OFDM channel is assigned to be the CM's primary downstream channel. A value of 'backupPrimary(3)' indicates that the OFDM channel is assigned to be the CM's backup primary downstream channel. A value of 'nonPrimary(4)' indicates the OFDM channel is not assigned to be CM's primary or backup primary downstream channel.")
docsIf31RxChStatusOfdmProfiles = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 2, 1, 2), OfdmProfiles()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31RxChStatusOfdmProfiles.setStatus('current')
if mibBuilder.loadTexts: docsIf31RxChStatusOfdmProfiles.setDescription('This attribute is used to identify the downstream channel profiles provisioned on the CM. Example: A Cable Modem configured with OFDM Profiles 3 and 8 returns a query response as follows. EnumBits: 0001000010000000 or 0x1080. Default value is 0x0. The SC-QAM is always reported as the default value.')
docsIf31CmtsCmRegStatusTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 3), )
if mibBuilder.loadTexts: docsIf31CmtsCmRegStatusTable.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsCmRegStatusTable.setDescription("This object defines attributes that represent the CM's registration status as tracked by the CMTS. Refer to the individual attribute definitions for applicability to 3.0 and 3.1 Cable Modems. This extends the DOCS-IF3-MIB's docsIf3CmtsCmRegStatusTable.")
docsIf31CmtsCmRegStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 3, 1), )
docsIf3CmtsCmRegStatusEntry.registerAugmentions(("DOCS-IF31-MIB", "docsIf31CmtsCmRegStatusEntry"))
docsIf31CmtsCmRegStatusEntry.setIndexNames(*docsIf3CmtsCmRegStatusEntry.getIndexNames())
if mibBuilder.loadTexts: docsIf31CmtsCmRegStatusEntry.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsCmRegStatusEntry.setDescription('The conceptual row of docsIf31CmtsCmRegStatusTable.')
docsIf31CmtsCmRegStatusAssignedEmIds = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 3, 1, 1), EmIdList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmtsCmRegStatusAssignedEmIds.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsCmRegStatusAssignedEmIds.setDescription('This attribute reports the set of CMTS-assigned EM-IDs for this CM. This attribute is encoded as an array 16-bit binary values with up to 3 elements. The broadcast EM-ID is not included in the list. If the EM-ID is unknown the CMTS returns a zero length string. This object is applicable to DOCSIS 3.1 modems but not to prior versions of DOCSIS modems. If the CM is a pre-DOCSIS 3.1 modem, the CMTS returns a zero length string.')
docsIf31CmtsCmRegStatusDsProfileIdList = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 3, 1, 2), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(6, 72), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmtsCmRegStatusDsProfileIdList.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsCmRegStatusDsProfileIdList.setDescription("This attribute is a variable length series of hexadecimal octets where each series entry consists of the following fields (encoded in the following order): - The ifIndex (4 octets) of the OFDM channel where the downstream Profile IDs are assigned. - The number or count of Profile IDs (1 octet with valid values of 1-4) assigned to the CM on that channel. - The list of Profile IDs (1 octet each with valid values of 0-15) assigned to this CM on that channel. Profile ID 0 is commonly referred to as Profile A. Likewise, Profile IDs 1, 2 and 3 are commonly referred to as Profiles B, C and D. The CCAP encodes each OFDM channel in a CM's RCS as a separate n-octet entry in the ProfileIdList. Examples: a CM with a single OFDM channel (ifIndex 34) and four assigned profiles (Profile IDs 0, 8, 9 and 10) would have a ProfileIdList value of 0x00000022040008090A. A CM with a 2 OFDM channel bonding group each with two assigned profiles (Profile IDs 0 and 15 on channel with ifIndex 34 and Profile IDs 0 and 14 on channel with ifIndex 35) would have a ProfileIdList value of 0x0000002202000F0000002302000E). Note: the CCAP must not include the transitional profile or test profile in the ProfileIdList. Note that octet string lengths greater than 18 are optional. This object is applicable to DOCSIS 3.1 modems but not to prior versions of DOCSIS modems. If the CM is a pre-DOCSIS 3.1 modem, the CMTS returns a zero length octet string.")
docsIf31CmtsCmRegStatusUsProfileIucList = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 3, 1, 3), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(6, 72), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmtsCmRegStatusUsProfileIucList.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsCmRegStatusUsProfileIucList.setDescription("This attribute is a variable length series of hexadecimal octets where each series entry consists of the following fields (encoded in the following order): - The ifIndex (4 octets) of the OFDMA channel where the Profile IUCs are assigned. - The number or count of Data IUCs (1 octet with valid values of 1-2) assigned to this CM on that channel. - The list of Data IUCs (1 octet each with valid values of 5, 6, 9-13) assigned to this CM on that channel. The CCAP encodes each OFDMA channel in a CM's TCS as a separate n-octet entry in the UsProfileIucList. Examples: a CM with a single OFDMA channel (ifIndex 36) and two assigned Data IUCs (5 and 6) would have a ProfileIdList value of 0x00000024020506. A CM with a 2 OFDMA channel bonding group each with one assigned Data IUC (IUC 5 on channel with ifIndex 34 and IUC 13 on channel with ifIndex 35) would have a UsProfileIucList value of 0x00000022010500000023010D). Note: the CCAP MUST NOT include transitional IUCs or test IUCs in the UsProfileIucList. Note that octet string lengths greater than 18 are optional. This object is applicable to DOCSIS 3.1 modems but not to prior versions of DOCSIS modems. If the CM is a pre-DOCSIS 3.1 modem, the CMTS returns a zero length octet string.")
docsIf31CmtsCmRegStatusTcsPhigh = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 3, 1, 4), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(68, 320), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmtsCmRegStatusTcsPhigh.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsCmRegStatusTcsPhigh.setDescription("This attribute reports the P1.6hi value for the CM's Transmit Channel Set. This object is applicable to DOCSIS 3.1 modems but not to prior versions of DOCSIS modems. If the CM is a pre-DOCSIS 3.1 modem, the CMTS returns zero.")
docsIf31CmtsCmRegStatusTcsDrwTop = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 3, 1, 5), Unsigned32()).setUnits('dBmV').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmtsCmRegStatusTcsDrwTop.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsCmRegStatusTcsDrwTop.setDescription('This attribute reports the level of the top of the Dynamic Range Window. The value is expressed in dBmV and is the result of a calculation equal to P1.6hi - P1.6load_min_set. This object is applicable to DOCSIS 3.1 modems but not to prior versions of DOCSIS modems. If the CM is a pre-DOCSIS 3.1 modem, the CMTS returns zero.')
docsIf31CmtsCmRegStatusMinUsableDsFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 3, 1, 6), Unsigned32()).setUnits('Hz').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmtsCmRegStatusMinUsableDsFreq.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsCmRegStatusMinUsableDsFreq.setDescription("This attribute is the higher of the CCAP's minimum supported downstream frequency and the CM's minimum supported downstream frequency. It indicates the lowest downstream frequency the CCAP can use to communicate with this CM taking into account the capabilities of both devices. This object is applicable to DOCSIS 3.1 modems but not to prior versions of DOCSIS modems. If the CM is a pre-DOCSIS 3.1 modem, the CMTS returns zero.")
docsIf31CmtsCmRegStatusMaxUsableDsFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 3, 1, 7), Unsigned32()).setUnits('Hz').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmtsCmRegStatusMaxUsableDsFreq.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsCmRegStatusMaxUsableDsFreq.setDescription("This attribute is the lower of the CCAP's maximum supported downstream frequency and the CM's maximum supported downstream frequency. It indicates the highest downstream frequency the CCAP can use to communicate with this CM taking into account the capabilities of both devices. This object is applicable to DOCSIS 3.1 modems but not to prior versions of DOCSIS modems. If the CM is a pre-DOCSIS 3.1 modem, the CMTS returns zero.")
docsIf31CmtsCmRegStatusMaxUsableUsFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 3, 1, 8), Unsigned32()).setUnits('Hz').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmtsCmRegStatusMaxUsableUsFreq.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsCmRegStatusMaxUsableUsFreq.setDescription("This attribute is the lower of the CCAP's maximum supported upstream frequency and the CM's maximum supported upstream frequency. It indicates the highest upstream frequency the CCAP can use to receive signals from this CM taking into account the capabilities of both devices. Note: there is no minimum usable upstream frequency attribute as this is 5MHz for both CCAP and CM devices. This object is applicable to DOCSIS 3.1 modems but not to prior versions of DOCSIS modems. If the CM is a pre-DOCSIS 3.1 modem, the CMTS returns zero.")
docsIf31CmtsCmRegStatusPartialSvcState = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 3, 1, 9), PartialServiceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmtsCmRegStatusPartialSvcState.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsCmRegStatusPartialSvcState.setDescription("This attribute indicates the type of 'bonding group' issue that this CM is experiencing, based on what the MAC-layer shows. See PartialServiceType for further detail. This object is applicable to DOCSIS 3.1 modems but not to prior versions of DOCSIS modems. If the CM is a pre-DOCSIS 3.1 modem, the CMTS returns 'other'.")
docsIf31CmtsCmRegStatusPartialChanState = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 3, 1, 10), PartialChannelType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmtsCmRegStatusPartialChanState.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsCmRegStatusPartialChanState.setDescription('This attribute is a bit-field which indicates the type of OFDM channel issue that this CM is experiencing, based on what the MAC-layer shows. See PartialChannelType for further detail. This object is applicable to DOCSIS 3.1 modems but not to prior versions of DOCSIS modems. If the CM is a pre-DOCSIS 3.1 modem, the CMTS returns 0x0 (no bits set).')
docsIf31CmtsCmUsOfdmaChannelStatusTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 4), )
if mibBuilder.loadTexts: docsIf31CmtsCmUsOfdmaChannelStatusTable.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsCmUsOfdmaChannelStatusTable.setDescription('This object defines current status information of the CM on each OFDMA upstream channel, as reported by the CMTS.')
docsIf31CmtsCmUsOfdmaChannelStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 4, 1), ).setIndexNames((0, "DOCS-IF3-MIB", "docsIf3CmtsCmRegStatusId"), (0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: docsIf31CmtsCmUsOfdmaChannelStatusEntry.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsCmUsOfdmaChannelStatusEntry.setDescription('The conceptual row of docsIf31CmtsCmUsOfdmaChannelStatusTable. A separate entry exists for every OFDMA channel of every CM currently assigned to an OFDMA channel.')
docsIf31CmtsCmUsOfdmaChannelRxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 4, 1, 1), TenthdBmV()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmtsCmUsOfdmaChannelRxPower.setReference('DOCSIS 3.1 Physical layer Specification CM-SP-PHYv3.1-I03-140610, Upstream Channel Power section.')
if mibBuilder.loadTexts: docsIf31CmtsCmUsOfdmaChannelRxPower.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsCmUsOfdmaChannelRxPower.setDescription('This attribute is the total received power in a specified OFDMA channel, normalized to power in a 1.6 MHz bandwidth, at the RF input port of the CMTS for a given CM.')
docsIf31CmtsCmUsOfdmaChannelMeanRxMer = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 4, 1, 2), HundredthdB()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmtsCmUsOfdmaChannelMeanRxMer.setReference('DOCSIS 3.1 Physical layer Specification CM-SP-PHYv3.1-I03-140610, Upstream Receive Modulation Error Ratio (RxMER) Per Subcarrier section.')
if mibBuilder.loadTexts: docsIf31CmtsCmUsOfdmaChannelMeanRxMer.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsCmUsOfdmaChannelMeanRxMer.setDescription('This attribute is the mean of the dB values of the RxMER measurements of all active subcarriers. The mean is computed directly on the dB values as follows: Mean = sum of (RxMER dB values) / number of RxMER values')
docsIf31CmtsCmUsOfdmaChannelStdDevRxMer = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 4, 1, 3), HundredthdB()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmtsCmUsOfdmaChannelStdDevRxMer.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsCmUsOfdmaChannelStdDevRxMer.setDescription('This attribute is the standard deviation of the dB values of the RxMER measurements of all active subcarriers. The standard deviation is computed directly on the dB values as follows: StdDev = sqrt(sum of (RxMER dB vals - RxMER_mean)^2 / # RxMER vals)')
docsIf31CmtsCmUsOfdmaChannelRxMerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 4, 1, 4), Unsigned32().clone(2)).setUnits('percentile').setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsIf31CmtsCmUsOfdmaChannelRxMerThreshold.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsCmUsOfdmaChannelRxMerThreshold.setDescription('This attribute specifies the percentile (such as 2nd percentile or 5th percentile) of all active subcarriers in an OFDM channel at which the ThresholdRxMerValue occurs. That is, (Percentile) % of the subcarriers have RxMER <= ThresholdRxMerValue.')
docsIf31CmtsCmUsOfdmaChannelThresholdRxMerValue = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 4, 1, 5), HundredthdB()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmtsCmUsOfdmaChannelThresholdRxMerValue.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsCmUsOfdmaChannelThresholdRxMerValue.setDescription('This attribute is the RxMER value corresponding to the specified docsIf31CmtsCmUsOfdmaChannelRxMerThreshold percentile value. The CCAP sorts the subcarriers in ascending order of RxMER, resulting in a post-sorting subcarrier index ranging from 1 to the number of active subcarriers. If the percentile value corresponds to a non- integer post-sorting subcarrier index, the post-sorting index is truncated (floor function is applied); that is, the post-sorting index is selected which is the greatest integer less than or equal to the corresponding percentile value. For example, if there are 3677 active subcarriers and the 2nd percentile is specified, the CCAP computes floor(3677*0.02) = 73. That is, the RxMER value of the 73rd subcarrier in the sorted list is associated with the 2nd percentile. This is displayed in hundredth of a dB, but is only accurate to a quarter dB.')
docsIf31CmtsCmUsOfdmaChannelThresholdRxMerHighestFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 4, 1, 6), Unsigned32()).setUnits('Hz').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmtsCmUsOfdmaChannelThresholdRxMerHighestFreq.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsCmUsOfdmaChannelThresholdRxMerHighestFreq.setDescription('This attribute is the frequency in Hz of the highest-frequency subcarrier having RxMER = ThresholdRxMer value.')
docsIf31CmtsCmUsOfdmaChannelMicroreflections = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 4, 1, 7), Unsigned32()).setUnits('dBc').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmtsCmUsOfdmaChannelMicroreflections.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsCmUsOfdmaChannelMicroreflections.setDescription('This attribute represents microreflections received on this upstream channel in dBc.')
docsIf31CmtsCmUsOfdmaChannelHighResolutionTimingOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 4, 1, 8), Integer32()).setUnits('time tick/(64*256)').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmtsCmUsOfdmaChannelHighResolutionTimingOffset.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsCmUsOfdmaChannelHighResolutionTimingOffset.setDescription("This attribute represents the current measured round trip time on this CM's upstream channel in units of (6.25 microseconds/(64*256)). This attribute returns zero if the value is unknown.")
docsIf31CmtsCmUsOfdmaChannelIsMuted = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 4, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmtsCmUsOfdmaChannelIsMuted.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsCmUsOfdmaChannelIsMuted.setDescription("This attribute has a value 'true' to indicate that the CM's upstream channel has been muted via CM-CTRL-REQ/CM-CTRL-RSP message exchange.")
docsIf31CmtsCmUsOfdmaChannelRangingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 4, 1, 10), RangingState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmtsCmUsOfdmaChannelRangingStatus.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsCmUsOfdmaChannelRangingStatus.setDescription('This attribute denotes the ranging state of the CM.')
docsIf31CmtsCmUsOfdmaChannelCurPartialSvcReasonCode = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 4, 1, 11), PartialSvcReasonType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmtsCmUsOfdmaChannelCurPartialSvcReasonCode.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsCmUsOfdmaChannelCurPartialSvcReasonCode.setDescription('This attribute returns the current CM-STATUS Event Code which indicates the reason that this CM is experiencing Partial Service with a bonding group utilizing this upstream OFDMA channel. A value of 0 indicates that the CM is not currently experiencing Partial Service involving this OFDMA channel.')
docsIf31CmtsCmUsOfdmaChannelLastPartialSvcTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 4, 1, 12), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmtsCmUsOfdmaChannelLastPartialSvcTime.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsCmUsOfdmaChannelLastPartialSvcTime.setDescription('This attribute returns the date and time when the MAC indicated that this CM recovered from its most recent Partial Service incident on this upstream OFDMA channel.')
docsIf31CmtsCmUsOfdmaChannelLastPartialSvcReasonCode = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 4, 1, 13), PartialSvcReasonType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmtsCmUsOfdmaChannelLastPartialSvcReasonCode.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsCmUsOfdmaChannelLastPartialSvcReasonCode.setDescription("This attribute returns the last CM-STATUS Event Code which indicates the reason that this CM was experiencing Partial Service on this upstream OFDMA channel. (Note: if the CM is currently experiencing Partial Service, this is the Event Code from the previous Partial Service event.) A value of 0 indicates that the CM has not experienced Partial Service involving this OFDMA channel during the CCAP's history of this CM.")
docsIf31CmtsCmUsOfdmaChannelNumPartialSvcIncidents = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 4, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmtsCmUsOfdmaChannelNumPartialSvcIncidents.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsCmUsOfdmaChannelNumPartialSvcIncidents.setDescription('This attribute returns the number of Partial Service incidents the MAC layer has reported for this CM on this upstream OFDMA channel.')
docsIf31CmtsCmUsOfdmaProfileStatusTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 5), )
if mibBuilder.loadTexts: docsIf31CmtsCmUsOfdmaProfileStatusTable.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsCmUsOfdmaProfileStatusTable.setDescription('This object defines current status information of the CM on each OFDMA upstream channel profile, as reported by the CMTS.')
docsIf31CmtsCmUsOfdmaProfileStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 5, 1), ).setIndexNames((0, "DOCS-IF3-MIB", "docsIf3CmtsCmRegStatusId"), (0, "IF-MIB", "ifIndex"), (0, "DOCS-IF31-MIB", "docsIf31CmtsUsOfdmaDataIucStatsDataIuc"))
if mibBuilder.loadTexts: docsIf31CmtsCmUsOfdmaProfileStatusEntry.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsCmUsOfdmaProfileStatusEntry.setDescription('The conceptual row of docsIf31CmtsCmUsOfdmaProfileStatusTable. A separate entry exists for every Data IUC assigned to the CM for every OFDMA channel of every CM currently assigned to an OFDMA channel.')
docsIf31CmtsCmUsOfdmaProfileTotalCodewords = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 5, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmtsCmUsOfdmaProfileTotalCodewords.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsCmUsOfdmaProfileTotalCodewords.setDescription('This attribute represents the count of the total number of FEC codewords received from the CM on this Profile/Data IUC for this upstream OFDMA channel. Discontinuities in the value of this counter can occur at re-initialization of the managed system, and at other times as indicated by the value of ifCounterDiscontinuityTime for the associated upstream OFDMA channel')
docsIf31CmtsCmUsOfdmaProfileCorrectedCodewords = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 5, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmtsCmUsOfdmaProfileCorrectedCodewords.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsCmUsOfdmaProfileCorrectedCodewords.setDescription('This attribute represents the count of codewords received that failed the pre-decoding syndrome check, but passed the post-decoding syndrome check from the CM on this Profile/Data IUC for this upstream OFDMA channel. Discontinuities in the value of this counter can occur at re-initialization of the managed system, and at other times as indicated by the value of ifCounterDiscontinuityTime for the associated upstream OFDMA channel.')
docsIf31CmtsCmUsOfdmaProfileUnreliableCodewords = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 5, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmtsCmUsOfdmaProfileUnreliableCodewords.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsCmUsOfdmaProfileUnreliableCodewords.setDescription('This attribute represents the count of codewords that failed the post-decoding syndrome check received from the CM on this Profile/Data IUC for this upstream OFDMA channel. Discontinuities in the value of this counter can occur at re-initialization of the managed system, and at other times as indicated by the value of ifCounterDiscontinuityTime for the associated upstream OFDMA channel.')
docsIf31CmtsCmDsOfdmChannelStatusTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 6), )
if mibBuilder.loadTexts: docsIf31CmtsCmDsOfdmChannelStatusTable.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsCmDsOfdmChannelStatusTable.setDescription('This object defines current status information of the CM on each OFDM downstream channel, as reported by the CMTS. A separate entry exists for every OFDM channel of every CM currently assigned to an OFDM channel.')
docsIf31CmtsCmDsOfdmChannelStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 6, 1), ).setIndexNames((0, "DOCS-IF3-MIB", "docsIf3CmtsCmRegStatusId"), (0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: docsIf31CmtsCmDsOfdmChannelStatusEntry.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsCmDsOfdmChannelStatusEntry.setDescription('The conceptual row of docsIf31CmtsCmDsOfdmChannelStatusTable. If the CM has never experienced a partial service or partial channel event with respect to this channel since the last CCAP reinitialization, no entry should exist in this table.')
docsIf31CmtsCmDsOfdmChannelCurPartialSvcReasonCode = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 6, 1, 1), PartialSvcReasonType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmtsCmDsOfdmChannelCurPartialSvcReasonCode.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsCmDsOfdmChannelCurPartialSvcReasonCode.setDescription('This attribute returns the current CM-STATUS Event Code which indicates the reason that this CM is experiencing Partial Service with a bonding group utilizing this downstream OFDM channel. A value of 0 indicates that the CM is not currently experiencing Partial Service involving this OFDM channel.')
docsIf31CmtsCmDsOfdmChannelLastPartialSvcTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 6, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmtsCmDsOfdmChannelLastPartialSvcTime.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsCmDsOfdmChannelLastPartialSvcTime.setDescription('This attribute returns the date and time when the MAC indicated that this CM recovered from its most recent Partial Service incident on this downstream OFDM channel.')
docsIf31CmtsCmDsOfdmChannelLastPartialSvcReasonCode = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 6, 1, 3), PartialSvcReasonType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmtsCmDsOfdmChannelLastPartialSvcReasonCode.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsCmDsOfdmChannelLastPartialSvcReasonCode.setDescription("This attribute returns the last CM-STATUS Event Code which indicates the reason that this CM was experiencing Partial Service on this downstream OFDM channel. (Note: if the CM is currently experiencing Partial Service, this is the Event Code from the previous Partial Service event.) A value of 0 indicates that the CM has not experienced Partial Service involving this OFDM channel during the CCAP's history of this CM.")
docsIf31CmtsCmDsOfdmChannelNumPartialSvcIncidents = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmtsCmDsOfdmChannelNumPartialSvcIncidents.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsCmDsOfdmChannelNumPartialSvcIncidents.setDescription('This attribute returns the number of Partial Service incidents the MAC layer has reported for this CM on this downstream OFDM channel')
docsIf31CmtsCmDsOfdmChannelNumPartialChanIncidents = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmtsCmDsOfdmChannelNumPartialChanIncidents.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsCmDsOfdmChannelNumPartialChanIncidents.setDescription('This attribute returns the number of Partial Channel incidents the MAC layer has reported for this CM on this downstream OFDM channel')
docsIf31CmtsCmDsOfdmProfileStatusTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 7), )
if mibBuilder.loadTexts: docsIf31CmtsCmDsOfdmProfileStatusTable.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsCmDsOfdmProfileStatusTable.setDescription('This object defines current status information of the CM on each OFDM downstream channel profile, as reported by the CMTS.')
docsIf31CmtsCmDsOfdmProfileStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 7, 1), ).setIndexNames((0, "DOCS-IF3-MIB", "docsIf3CmtsCmRegStatusId"), (0, "IF-MIB", "ifIndex"), (0, "DOCS-IF31-MIB", "docsIf31CmtsDsOfdmProfileStatsProfileId"))
if mibBuilder.loadTexts: docsIf31CmtsCmDsOfdmProfileStatusEntry.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsCmDsOfdmProfileStatusEntry.setDescription('The conceptual row of docsIf31CmtsCmDsOfdmProfileStatusTable. A separate entry exists for every Profile assigned to the CM for every OFDM channel of every CM currently assigned to an OFDM channel. If the CM has never experienced a partial channel event with respect to this profile since the last CCAP reinitialization, no entry should exist in the table.')
docsIf31CmtsCmDsOfdmProfilePartialChanReasonCode = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 7, 1, 1), PartialChanReasonType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmtsCmDsOfdmProfilePartialChanReasonCode.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsCmDsOfdmProfilePartialChanReasonCode.setDescription('This attribute returns the current CM-STATUS Event Code which indicates the reason that this CM is in a Partial Channel state utilizing this Profile on this downstream OFDM channel. A value of 0 indicates that the CM is not currently experiencing Partial Channel involving this Profile on this OFDM channel.')
docsIf31CmtsCmDsOfdmProfileLastPartialChanTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 7, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmtsCmDsOfdmProfileLastPartialChanTime.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsCmDsOfdmProfileLastPartialChanTime.setDescription('This attribute returns the date and time when the MAC indicated that this CM recovered from its most recent Partial Channel incident for this Profile on this downstream OFDM channel.')
docsIf31CmtsCmDsOfdmProfileLastPartialChanReasonCode = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 7, 1, 3), PartialChanReasonType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmtsCmDsOfdmProfileLastPartialChanReasonCode.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsCmDsOfdmProfileLastPartialChanReasonCode.setDescription("This attribute returns the last CM-STATUS Event Code which indicates the reason that this CM was experiencing a Partial Channel event for this Profile on this downstream OFDM channel. A value of 0 indicates that the CM has not experienced a Partial Channel incident involving this Profile on this OFDM channel during the CCAP's history of this CM.")
docsIf31CmtsCmEmStatsTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 8), )
if mibBuilder.loadTexts: docsIf31CmtsCmEmStatsTable.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsCmEmStatsTable.setDescription('This table defines Energy Management mode statistics for the CM as reported by the CMTS. For example, such metrics can provide insight into configuration of appropriate EM 1x1 Mode Activity Detection thresholds on the CM and/or to get feedback on how/if the current thresholds are working well or are causing user experience issues.')
docsIf31CmtsCmEmStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 8, 1), ).setIndexNames((0, "DOCS-IF3-MIB", "docsIf3CmtsCmRegStatusId"))
if mibBuilder.loadTexts: docsIf31CmtsCmEmStatsEntry.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsCmEmStatsEntry.setDescription('The conceptual row of docsIf31CmtsCmEmStatsTable. A row exists in this table for every CM capable of Energy Management (either 1x1 or DLS).')
docsIf31CmtsCmEmStatsEm1x1ModeTotalDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 8, 1, 1), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmtsCmEmStatsEm1x1ModeTotalDuration.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsCmEmStatsEm1x1ModeTotalDuration.setDescription('This attribute indicates the total time duration, in seconds since registration, the CM identified by docsIf3CmtsCmRegStatusId has been in Energy Management 1x1 mode, as controlled by the DBC-REQ Energy Management 1x1 Mode Indicator TLV.')
docsIf31CmtsCmEmStatsDlsModeTotalDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 8, 1, 2), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmtsCmEmStatsDlsModeTotalDuration.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsCmEmStatsDlsModeTotalDuration.setDescription('This attribute indicates the total time duration, in seconds since registration, the CM identified by docsIf3CmtsCmRegStatusId has been in DLS mode.')
docsIf31CmtsCmEmStatsLastDlsTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 8, 1, 3), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmtsCmEmStatsLastDlsTime.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsCmEmStatsLastDlsTime.setDescription('This attribute indicates the time of the last DLS wakeup event for this CM. If this CM is currently in DLS mode, then this attribute returns 0.')
docsIf31CmtsCmEmStatsDlsWakeupEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 8, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmtsCmEmStatsDlsWakeupEvents.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsCmEmStatsDlsWakeupEvents.setDescription("This attribute indicates the total number of wakeup events that this CM has experienced over the CCAP's history for this CM.")
docsIf31CmDsOfdmChanTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 9), )
if mibBuilder.loadTexts: docsIf31CmDsOfdmChanTable.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmDsOfdmChanTable.setDescription("This table describes the CM's downstream OFDM channels.")
docsIf31CmDsOfdmChanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 9, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: docsIf31CmDsOfdmChanEntry.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmDsOfdmChanEntry.setDescription('The conceptual row of docsIf31CmDsOfdmChanTable. An entry exists in this table for each ifEntry with an ifType value of docsOfdmDownstream(277).')
docsIf31CmDsOfdmChanChannelId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmDsOfdmChanChannelId.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmDsOfdmChanChannelId.setDescription('The Cable Modem identification of the OFDM downstream channel within this particular MAC interface. If the interface is down, the object returns the most current value. If the downstream channel ID is unknown, this object returns a value of 0.')
docsIf31CmDsOfdmChanChanIndicator = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 9, 1, 2), PrimaryDsIndicatorType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmDsOfdmChanChanIndicator.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmDsOfdmChanChanIndicator.setDescription("This attribute is used to identify the OFDM downstream channel as primary, backup primary or non-primary. A value of 'primary(2)' indicates that OFDM channel is assigned to be the CM's primary downstream channel. A value of 'backupPrimary(3)' indicates that the OFDM channel is assigned to be the CM's backup primary downstream channel. A value of 'nonPrimary(4)' indicates the OFDM channel is not assigned to be CM's primary or backup primary downstream channel.")
docsIf31CmDsOfdmChanSubcarrierZeroFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 9, 1, 3), Unsigned32()).setUnits('Hz').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmDsOfdmChanSubcarrierZeroFreq.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmDsOfdmChanSubcarrierZeroFreq.setDescription('This attribute specifies the center frequency of the subcarrier 0 of the OFDM transmission. Note that since subcarrier 0 is always excluded, it will actually be below the allowed downstream spectrum band. This is the frequency of subcarrier X(0) in the definition of the DFT.')
docsIf31CmDsOfdmChanFirstActiveSubcarrierNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 9, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmDsOfdmChanFirstActiveSubcarrierNum.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmDsOfdmChanFirstActiveSubcarrierNum.setDescription('This attribute corresponds to the number of the first non-excluded subcarrier. The valid range is 148 to 7895')
docsIf31CmDsOfdmChanLastActiveSubcarrierNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 9, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmDsOfdmChanLastActiveSubcarrierNum.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmDsOfdmChanLastActiveSubcarrierNum.setDescription('This attribute corresponds to the number of the last non-excluded subcarrier. The valid range is 148 to 7895')
docsIf31CmDsOfdmChanNumActiveSubcarriers = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 9, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmDsOfdmChanNumActiveSubcarriers.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmDsOfdmChanNumActiveSubcarriers.setDescription('This attribute represents the number of active data subcarriers within the OFDM downstream channel (i.e. this exclude subcarriers for continuous pilots and the PLC). For 4K FFT mode, the maximum number of subcarriers including continuous pilots and the PLC cannot exceed 3800, and for 8K FFT mode, the maximum number of active subcarriers including continuous pilots and the PLC cannot be greater than 7600. However, there are a minimum of 56 continuous pilots in a 192MHz channel that has no exclusions, and the size of the PLC is 8 subcarriers for 4K FFT mode and 16 subcarriers for 8K FFT mode. Therefore the maximum value of NumActiveSubcarriers is 3736 (or 3800 - 56 - 8) for 4K FFT mode and 7528 (or 7600 - 56 - 16) for 8K FFT mode.')
docsIf31CmDsOfdmChanSubcarrierSpacing = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 9, 1, 7), SubcarrierSpacingType()).setUnits('kHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmDsOfdmChanSubcarrierSpacing.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmDsOfdmChanSubcarrierSpacing.setDescription('This attribute defines the subcarrier spacing associated with a particular FFT mode configured on the OFDM downstream channel. If it is 4K mode, then the subcarrier spacing is 50kHz. If it is 8K mode, then the subcarrier spacing is 25kHz.')
docsIf31CmDsOfdmChanCyclicPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 9, 1, 8), DsOfdmCyclicPrefix()).setUnits('number of samples').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmDsOfdmChanCyclicPrefix.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmDsOfdmChanCyclicPrefix.setDescription('Cyclic prefix enables the receiver to overcome the effects of inter-symbol-interference and intercarrier-interference caused by micro-reflections in the channel. There are five possible values for the length of the CP and the choice depends on the delay spread of the channel - a longer delay spread requires a longer cyclic prefix. The cyclic prefix (in usec) are converted into samples using the sample rate of 204.8 Msamples/s and is an integer multiple of: 1/64 * 20 us.')
docsIf31CmDsOfdmChanRollOffPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 9, 1, 9), DsOfdmRollOffPeriod()).setUnits('number of samples').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmDsOfdmChanRollOffPeriod.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmDsOfdmChanRollOffPeriod.setDescription('Roll off period maximizes channel capacity by sharpening the edges of the spectrum of the OFDM signal. For windowing purposes another segment at the start of the IDFT output is appended to the end of the IDFT output - the roll-off postfix (RP). There are five possible values for the (RP), and the choice depends on the bandwidth of the channel and the number of exclusion bands within the channel. A larger RP provides sharper edges in the spectrum of the OFDM signal; however, there is a time vs. frequency trade-off. Larger RP values reduce the efficiency of transmission in the time domain, but because the spectral edges are sharper, more useful subcarriers appear in the frequency domain. There is an optimum value for the RP that maximizes capacity for a given bandwidth and/or exclusion band scenario.')
docsIf31CmDsOfdmChanPlcFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 9, 1, 10), Unsigned32()).setUnits('Hz').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmDsOfdmChanPlcFreq.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmDsOfdmChanPlcFreq.setDescription('This is the PHY Link Channel (PLC) frequency. It is the center frequency of the lowest frequency subcarrier of the PLC. The aim of the PLC is for the CMTS to convey to the CM the physical properties of the OFDM channel.')
docsIf31CmDsOfdmChanNumPilots = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 9, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmDsOfdmChanNumPilots.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmDsOfdmChanNumPilots.setDescription('This attribute indicates the number of continuous pilots configured for the OFDM downstream channel as received in the OCD message.')
docsIf31CmDsOfdmChanTimeInterleaverDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 9, 1, 12), TimeInterleaverDepth()).setUnits('symbols').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmDsOfdmChanTimeInterleaverDepth.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmDsOfdmChanTimeInterleaverDepth.setDescription('The time interleaving used for this downstream channel as received in the OCD message.')
docsIf31CmDsOfdmChanPlcTotalCodewords = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 9, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmDsOfdmChanPlcTotalCodewords.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmDsOfdmChanPlcTotalCodewords.setDescription('This attribute represents the total number of PLC codewords received by the CM.')
docsIf31CmDsOfdmChanPlcUnreliableCodewords = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 9, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmDsOfdmChanPlcUnreliableCodewords.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmDsOfdmChanPlcUnreliableCodewords.setDescription('This attribute represents the total number of PLC codewords which failed post-decoding LDPC syndrome check.')
docsIf31CmDsOfdmChanNcpTotalFields = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 9, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmDsOfdmChanNcpTotalFields.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmDsOfdmChanNcpTotalFields.setDescription('This attribute represents the total number of NCP fields received by the CM.')
docsIf31CmDsOfdmChanNcpFieldCrcFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 9, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmDsOfdmChanNcpFieldCrcFailures.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmDsOfdmChanNcpFieldCrcFailures.setDescription('This attribute represents the total number of NCP fields received by the CM which failed the CRC check.')
docsIf31CmDsOfdmProfileStatsTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 10), )
if mibBuilder.loadTexts: docsIf31CmDsOfdmProfileStatsTable.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmDsOfdmProfileStatsTable.setDescription('This CM table specifies the attributes of the Downstream profile assigned to an OFDM downstream channel. This table is not applicable to NCP profiles.')
docsIf31CmDsOfdmProfileStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 10, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-IF31-MIB", "docsIf31CmDsOfdmProfileStatsProfileId"))
if mibBuilder.loadTexts: docsIf31CmDsOfdmProfileStatsEntry.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmDsOfdmProfileStatsEntry.setDescription('The conceptual row of docsIf31CmDsOfdmProfileStatsTable. An entry exists in this table for each DS Profile assigned to this CM on channels with an ifType value of docsOfdmDownstream(277). A row entry is created when a profile is assigned. The row entry is deleted when a profile id becomes unassigned.')
docsIf31CmDsOfdmProfileStatsProfileId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: docsIf31CmDsOfdmProfileStatsProfileId.setReference('DOCSIS 3.1 MAC and Upper Layer Protocols Interface Specification CM-SP-MULPIv3.1-I03-140610, Downstream Profile Descriptor.')
if mibBuilder.loadTexts: docsIf31CmDsOfdmProfileStatsProfileId.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmDsOfdmProfileStatsProfileId.setDescription('This attribute is the unique identifier of the downstream profile associated with the OFDM downstream channel. Profile ID with a value of 255 corresponds to NCP profile.')
docsIf31CmDsOfdmProfileStatsConfigChangeCt = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmDsOfdmProfileStatsConfigChangeCt.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmDsOfdmProfileStatsConfigChangeCt.setDescription('This attribute contains the value of the Configuration Change Count field in the Downstream Profile Descriptor (DPD) MAC Management Message corresponding to this profile.')
docsIf31CmDsOfdmProfileStatsTotalCodewords = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 10, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmDsOfdmProfileStatsTotalCodewords.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmDsOfdmProfileStatsTotalCodewords.setDescription('This attribute defines the total number of codewords (including full-length and shortened) measured on this profile.')
docsIf31CmDsOfdmProfileStatsCorrectedCodewords = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 10, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmDsOfdmProfileStatsCorrectedCodewords.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmDsOfdmProfileStatsCorrectedCodewords.setDescription('This attribute defines the number of codewords measured on this profile that failed pre-decoding LDPC syndrome check and passed BCH decoding.')
docsIf31CmDsOfdmProfileStatsUncorrectableCodewords = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 10, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmDsOfdmProfileStatsUncorrectableCodewords.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmDsOfdmProfileStatsUncorrectableCodewords.setDescription('This attribute defines the number of codewords measured on this profile that failed BCH decoding.')
docsIf31CmDsOfdmProfileStatsInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 10, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmDsOfdmProfileStatsInOctets.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmDsOfdmProfileStatsInOctets.setDescription('This attribute is the count of MAC-layer octets received by the CM on this Profile. This value is the size of all unicast, multicast or broadcast frames (including all MAC- layer framing) delivered from the Phy to the MAC; this includes user data, DOCSIS MAC Management Messages, etc. Discontinuities in the value of this counter can occur at reinitialization of the managed system, and at other times as indicated by the value of docsIf31CmDsOfdmProfileStats- CtrDiscontinuityTime.')
docsIf31CmDsOfdmProfileStatsInUnicastOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 10, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmDsOfdmProfileStatsInUnicastOctets.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmDsOfdmProfileStatsInUnicastOctets.setDescription('This attribute is the count of MAC-layer unicast octets received by the CM on this profile. This value is the size of all unicast frames (including all MAC-layer framing) delivered from the Phy to the MAC; this includes user data, DOCSIS MAC Management Messages, etc. Discontinuities in the value of this counter can occur at reinitialization of the managed system, and at other times as indicated by the value of docsIf31CmDsOfdmProfileStats- CtrDiscontinuityTime.')
docsIf31CmDsOfdmProfileStatsInMulticastOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 10, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmDsOfdmProfileStatsInMulticastOctets.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmDsOfdmProfileStatsInMulticastOctets.setDescription('This attribute is the count of MAC-layer multicast and broadcast octets received by the CM on this profile. This value is the size of all frames (including all MAC-layer framing) delivered from the Phy to the MAC and addressed to a multicast MAC address; this includes user data, DOCSIS MAC Management Messages, etc. Discontinuities in the value of this counter can occur at reinitialization of the managed system, and at other times as indicated by the value of docsIf31CmDsOfdmProfileStats- CtrDiscontinuityTime.')
docsIf31CmDsOfdmProfileStatsInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 10, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmDsOfdmProfileStatsInFrames.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmDsOfdmProfileStatsInFrames.setDescription('This attribute is the count of frames received by the CM on this profile. This value is the count of all unicast, multicast or broadcast frames delivered from the Phy to the MAC; this includes user data, DOCSIS MAC Management Messages, etc. Discontinuities in the value of this counter can occur at reinitialization of the managed system, and at other times as indicated by the value of docsIf31CmDsOfdmProfileStats- CtrDiscontinuityTime.')
docsIf31CmDsOfdmProfileStatsInUnicastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 10, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmDsOfdmProfileStatsInUnicastFrames.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmDsOfdmProfileStatsInUnicastFrames.setDescription('This attribute is the count of frames received by the CM on this profile. This value is the count of all unicast, multicast or broadcast frames delivered from the Phy to the MAC; this includes user data, DOCSIS MAC Management Messages, etc. Discontinuities in the value of this counter can occur at reinitialization of the managed system, and at other times as indicated by the value of docsIf31CmDsOfdmProfileStats- CtrDiscontinuityTime.')
docsIf31CmDsOfdmProfileStatsInMulticastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 10, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmDsOfdmProfileStatsInMulticastFrames.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmDsOfdmProfileStatsInMulticastFrames.setDescription('This attribute is the count of multicast frames received by the CM on this profile. This value is the count of all frames delivered from the Phy to the MAC and addressed to a multicast MAC address; this includes user data, DOCSIS MAC Management Messages, etc., but excludes frames sent to a broadcast address. Discontinuities in the value of this counter can occur at reinitialization of the managed system, and at other times as indicated by the value of docsIf31CmDsOfdmProfileStats- CtrDiscontinuityTime.')
docsIf31CmDsOfdmProfileStatsInFrameCrcFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 10, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmDsOfdmProfileStatsInFrameCrcFailures.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmDsOfdmProfileStatsInFrameCrcFailures.setDescription('This attribute defines the number of MAC frames measured on this profile that failed the MAC frame CRC check.')
docsIf31CmDsOfdmProfileStatsCtrDiscontinuityTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 10, 1, 13), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmDsOfdmProfileStatsCtrDiscontinuityTime.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmDsOfdmProfileStatsCtrDiscontinuityTime.setDescription("This attribute is the value of sysUpTime on the most recent occasion at which any one or more of this entry's counters suffered a discontinuity. If no such discontinuities have occurred since the last re-initialization of the local management subsystem, then this attribute contains a zero value.")
docsIf31CmDsOfdmChannelPowerTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 11), )
if mibBuilder.loadTexts: docsIf31CmDsOfdmChannelPowerTable.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmDsOfdmChannelPowerTable.setDescription('This CM object provides measurements of the channel power in 6 MHz wide bands at the F connector input of the CM.')
docsIf31CmDsOfdmChannelPowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 11, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-IF31-MIB", "docsIf31CmDsOfdmChannelBandIndex"))
if mibBuilder.loadTexts: docsIf31CmDsOfdmChannelPowerEntry.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmDsOfdmChannelPowerEntry.setDescription('The conceptual row of docsIf31CmDsOfdmChannelPowerTable.')
docsIf31CmDsOfdmChannelBandIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 11, 1, 1), Unsigned32())
if mibBuilder.loadTexts: docsIf31CmDsOfdmChannelBandIndex.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmDsOfdmChannelBandIndex.setDescription("This attribute is a unique index used by the CM to identify each of the 6 MHz bands of a given OFDM downstream channel (from the lowest 6MHz band of the Occupied Bandwidth to the highest 6MHz band of the Occupied Bandwidth). The CM assigns indices in frequency order from the OFDM channel's lowest to highest 6 MHz frequency band for each of the 6 MHz bands of the channel, using an index of 1 to represent the lowest frequency band of the Occupied Bandwidth. Thus, an index of 33 represents the highest possible 6 MHz frequency band of the Occupied Bandwidth of a DOCSIS 3.1 OFDM channel. The CM also provides the power of the PLC channel and utilize a value of 0 to represent the PLC channel in this table.")
docsIf31CmDsOfdmChannelPowerCenterFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 11, 1, 2), Unsigned32()).setUnits('Hz').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmDsOfdmChannelPowerCenterFrequency.setReference('DOCSIS 3.1 CM Operations Support System Interface Specification CM-SP-CM OSSIv3.1-I03-15MMDD, CenterFrequency')
if mibBuilder.loadTexts: docsIf31CmDsOfdmChannelPowerCenterFrequency.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmDsOfdmChannelPowerCenterFrequency.setDescription('This attribute corresponds to the center frequency of the 6 MHz band the CM measured the average channel power. See Reference for specific details on this attribute.')
docsIf31CmDsOfdmChannelPowerRxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 11, 1, 3), TenthdBmV()).setUnits('TenthdBmV').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmDsOfdmChannelPowerRxPower.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmDsOfdmChannelPowerRxPower.setDescription('This attribute provides an estimate of the average power measured at the F connector input of the CM in the receive downstream channel set for this 6 MHz band. If the band index is 0, then this attribute provides an estimate of the average power measured at the F connector input of the CM for a 6 MHz encompassed spectrum containing the DOCSIS 3.1 PLC at its center.')
docsIf31CmStatusOfdmaUsTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 12), )
if mibBuilder.loadTexts: docsIf31CmStatusOfdmaUsTable.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmStatusOfdmaUsTable.setDescription("This object defines PHY and MAC information about the CM's upstream channels operating in OFDMA mode. This object provides per-CM Upstream channel information previously available in the table docsIf3CmStatusTable.")
docsIf31CmStatusOfdmaUsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 12, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: docsIf31CmStatusOfdmaUsEntry.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmStatusOfdmaUsEntry.setDescription("The conceptual row of docsIf31CmStatusOfdmaUsTable. An instance exist for each of the CM's OFDMA upstream channels which are configured for data transmission.")
docsIf31CmStatusOfdmaUsT3Timeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 12, 1, 2), Counter32()).setUnits('timeouts').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmStatusOfdmaUsT3Timeouts.setReference('RFC 2863.')
if mibBuilder.loadTexts: docsIf31CmStatusOfdmaUsT3Timeouts.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmStatusOfdmaUsT3Timeouts.setDescription('This attribute denotes the number of times counter T3 expired in the CM for this upstream channel. Discontinuities in the value of this counter can occur at re-initialization of the managed system, and at other times as indicated by the value of ifCounterDiscontinuityTime for the associated upstream channel.')
docsIf31CmStatusOfdmaUsT4Timeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 12, 1, 3), Counter32()).setUnits('timeouts').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmStatusOfdmaUsT4Timeouts.setReference('RFC 2863.')
if mibBuilder.loadTexts: docsIf31CmStatusOfdmaUsT4Timeouts.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmStatusOfdmaUsT4Timeouts.setDescription('This attribute denotes the number of times counter T4 expired in the CM for this upstream channel. Discontinuities in the value of this counter can occur at re-initialization of the managed system, and at other times as indicated by the value of ifCounterDiscontinuityTime for the associated upstream channel.')
docsIf31CmStatusOfdmaUsRangingAborteds = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 12, 1, 4), Counter32()).setUnits('attempts').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmStatusOfdmaUsRangingAborteds.setReference('RFC 2863.')
if mibBuilder.loadTexts: docsIf31CmStatusOfdmaUsRangingAborteds.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmStatusOfdmaUsRangingAborteds.setDescription('This attribute denotes the number of times the ranging process was aborted by the CMTS. Discontinuities in the value of this counter can occur at re-initialization of the managed system, and at other times as indicated by the value of ifCounterDiscontinuityTime ([RFC2863]) for the associated upstream channel.')
docsIf31CmStatusOfdmaUsT3Exceededs = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 12, 1, 5), Counter32()).setUnits('timeouts').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmStatusOfdmaUsT3Exceededs.setReference('RFC 2863.')
if mibBuilder.loadTexts: docsIf31CmStatusOfdmaUsT3Exceededs.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmStatusOfdmaUsT3Exceededs.setDescription('This attribute denotes the number of times for excessive T3 timeouts. Discontinuities in the value of this counter can occur at re-initialization of the managed system, and at other times as indicated by the value of ifCounterDiscontinuityTime for the associated upstream channel.')
docsIf31CmStatusOfdmaUsIsMuted = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 12, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmStatusOfdmaUsIsMuted.setReference('DOCSIS 3.1 MAC and Upper Layer Protocols Interface Specification CM-SP-MULPIv3.1-I03-140610 CM Control Request section.')
if mibBuilder.loadTexts: docsIf31CmStatusOfdmaUsIsMuted.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmStatusOfdmaUsIsMuted.setDescription('This attribute denotes whether the upstream channel is muted.')
docsIf31CmStatusOfdmaUsRangingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 12, 1, 7), RangingState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmStatusOfdmaUsRangingStatus.setReference('DOCSIS 3.1 MAC and Upper Layer Protocols Interface Specification CM-SP-MULPIv3.1-I03-140610 Ranging section.')
if mibBuilder.loadTexts: docsIf31CmStatusOfdmaUsRangingStatus.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmStatusOfdmaUsRangingStatus.setDescription('This attribute denotes the ranging state of the CM.')
docsIf31CmUsOfdmaChanTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 13), )
if mibBuilder.loadTexts: docsIf31CmUsOfdmaChanTable.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmUsOfdmaChanTable.setDescription('This object specifies the CM upstream OFDMA channel.')
docsIf31CmUsOfdmaChanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 13, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: docsIf31CmUsOfdmaChanEntry.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmUsOfdmaChanEntry.setDescription('The conceptual row of docsIf31CmUsOfdmaChanTable. An instance exist for the CM OFDMA upstream interface.')
docsIf31CmUsOfdmaChanConfigChangeCt = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 13, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmUsOfdmaChanConfigChangeCt.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmUsOfdmaChanConfigChangeCt.setDescription('This attribute contains the value of the Configuration Change Count field in the Upstream Channel Descriptor (UCD) MAC Management Message corresponding to this OFDMA channel.')
docsIf31CmUsOfdmaChanSubcarrierZeroFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 13, 1, 2), Unsigned32()).setUnits('Hz').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmUsOfdmaChanSubcarrierZeroFreq.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmUsOfdmaChanSubcarrierZeroFreq.setDescription('This attribute defines the lower edge frequency of the OFDMA upstream channel')
docsIf31CmUsOfdmaChanFirstActiveSubcarrierNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 13, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmUsOfdmaChanFirstActiveSubcarrierNum.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmUsOfdmaChanFirstActiveSubcarrierNum.setDescription('This attribute defines the upper edge of the OFDMA upstream channel. The minimum channel width for an OFDMA upstream channel is 6.4 MHz in 4K mode and 10MHz in 2K mode. The valid range is 74 to 3947.')
docsIf31CmUsOfdmaChanLastActiveSubcarrierNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 13, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmUsOfdmaChanLastActiveSubcarrierNum.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmUsOfdmaChanLastActiveSubcarrierNum.setDescription('This attribute defines the last active subcarrier number. The valid range is 74 to 3947.')
docsIf31CmUsOfdmaChanNumActiveSubcarriers = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 13, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmUsOfdmaChanNumActiveSubcarriers.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmUsOfdmaChanNumActiveSubcarriers.setDescription('This attribute defines the number of active subcarriers within the OFDMA upstream channel. The valid range is 1 to 3800.')
docsIf31CmUsOfdmaChanSubcarrierSpacing = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 13, 1, 6), SubcarrierSpacingType()).setUnits('kHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmUsOfdmaChanSubcarrierSpacing.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmUsOfdmaChanSubcarrierSpacing.setDescription('This attribute defines the subcarrier spacing associated with a particular FFT mode configured on the OFDMA upstream channel. If it is 2K mode, then the subcarrier spacing is 50kHz. If it is 4K mode, then the subcarrier spacing is 25kHz.')
docsIf31CmUsOfdmaChanCyclicPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 13, 1, 7), UsOfdmaCyclicPrefix()).setUnits('number of samples').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmUsOfdmaChanCyclicPrefix.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmUsOfdmaChanCyclicPrefix.setDescription('Cyclic prefix is added in order to enable the receiver to overcome the effects of inter-symbol interference (ISI) and inter-carrier interference caused by microreflections in the channel. The cyclic prefix (in usec) is converted into samples using the sample rate of 102.4 Msamples/s. There are eleven values for the length of the CP and the choice depends on the delay spread of the channel; a longer delay spread requires a longer cyclic prefix.')
docsIf31CmUsOfdmaChanRollOffPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 13, 1, 8), UsOfdmaRollOffPeriod()).setUnits('number of samples').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmUsOfdmaChanRollOffPeriod.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmUsOfdmaChanRollOffPeriod.setDescription('Windowing is applied in order to maximize channel capacity by sharpening the edges of the spectrum of the OFDMA signal. Windowing is applied in the time domain by tapering (or rolling off) the edges using a raised cosine function. There are eight possible values of roll-off prefix. The Roll-Off Period is given in us and in number of samples using the sample rate of 102.4 Msamples/s. The configuration where Roll-off prefix value is greater than or equal to cyclic prefix value is considered invalid.')
docsIf31CmUsOfdmaChanNumSymbolsPerFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 13, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmUsOfdmaChanNumSymbolsPerFrame.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmUsOfdmaChanNumSymbolsPerFrame.setDescription('This attribute is the number of symbol periods per frame. For channel bandwidth greater than 72MHz, the maximum number of symbol periods per frame is 18 for 2K mode and 9 for 4K mode. For channel bandwidth less than 72 MHz but greater than 48MHz, the maximum number of symbols per frame is 24 for 2K mode and 12 for 4K mode. For channel bandwidth less than 48MHz, the maximum number of symbol periods is 36 for 2K mode and 18 for 4K mode. The minimum number of symbol periods per frame is 6 for both the FFT modes and is independent of the channel bandwidth.')
docsIf31CmUsOfdmaChanTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 13, 1, 10), Unsigned32()).setUnits('QuarterdBmV').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmUsOfdmaChanTxPower.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmUsOfdmaChanTxPower.setDescription('This attribute represents the operational transmit power for the associated OFDMA upstream channel.The CM reports its Target Power, P1.6r_n as described in [PHYv3.1]. Valid values for this object are 68 to (213 + (4*(Pmax - 65 dBmV))), since 68 quarter dBmV represents the lowest Tx power value 17 dBmV and 213 represents the nearest quarter dBmV to the highest Tx power value 53.2 dBmV.')
docsIf31CmUsOfdmaChanPreEqEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 13, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmUsOfdmaChanPreEqEnabled.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmUsOfdmaChanPreEqEnabled.setDescription('This attribute defines whether pre-equalization is enabled on the associated OFDMA upstream channel.')
docsIf31CmUsOfdmaChanChannelId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 13, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmUsOfdmaChanChannelId.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmUsOfdmaChanChannelId.setDescription('The Cable Modem identification of the OFDMA upstream channel within this particular MAC interface. If the interface is down, the object returns the most current value. If the upstream channel ID is unknown, this object returns a value of 0.')
docsIf31CmUsOfdmaProfileStatsTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 14), )
if mibBuilder.loadTexts: docsIf31CmUsOfdmaProfileStatsTable.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmUsOfdmaProfileStatsTable.setDescription('This CM object specifies the attributes of the Upstream profile assigned to an OFDM upstream channel.')
docsIf31CmUsOfdmaProfileStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 14, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-IF31-MIB", "docsIf31CmUsOfdmaProfileStatsIuc"))
if mibBuilder.loadTexts: docsIf31CmUsOfdmaProfileStatsEntry.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmUsOfdmaProfileStatsEntry.setDescription('The conceptual row of docsIf31CmUsOfdmaProfileStatsTable. An instance exist for each profile associated with the OFDMA upstream interface.')
docsIf31CmUsOfdmaProfileStatsIuc = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 14, 1, 1), Unsigned32())
if mibBuilder.loadTexts: docsIf31CmUsOfdmaProfileStatsIuc.setReference('DOCSIS 3.1 MAC and Upper Layer Protocols Interface Specification CM-SP-MULPIv3.1-I03-140610, Required Burst Attributes on OFDMA Channels.')
if mibBuilder.loadTexts: docsIf31CmUsOfdmaProfileStatsIuc.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmUsOfdmaProfileStatsIuc.setDescription('This attribute is the unique identifier of the upstream profile/IUC associated with the OFDMA upstream channel. It is a key defined to provide an index into the table. In DOCSIS 3.1 the valid Data Profile IUCs are: 5, 6, 9, 10, 11, 12 and 13.')
docsIf31CmUsOfdmaProfileStatsOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 14, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmUsOfdmaProfileStatsOutOctets.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmUsOfdmaProfileStatsOutOctets.setDescription('This attribute is the count of MAC-layer octets transmitted by the CM using this Data IUC profile. This value is the size of all unicast, multicast or broadcast frames (including all MAC- layer framing) delivered from the MAC to the Phy -- this includes user data, DOCSIS MAC Management Messages, etc. Discontinuities in the value of this counter can occur at reinitialization of the managed system, and at other times as indicated by the value of docsIf31CmUsOfdmaProfileStats- CtrDiscontinuityTime.')
docsIf31CmUsOfdmaProfileStatsCtrDiscontinuityTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 14, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmUsOfdmaProfileStatsCtrDiscontinuityTime.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmUsOfdmaProfileStatsCtrDiscontinuityTime.setDescription("This attribute is the value of sysUpTime on the most recent occasion at which any one or more of this entry's counters suffered a discontinuity. If no such discontinuities have occurred since the last re-initialization of the local management subsystem, then this attribute contains a zero value.")
docsIf31CmUsOfdmaMinislotCfgStateTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 15), )
if mibBuilder.loadTexts: docsIf31CmUsOfdmaMinislotCfgStateTable.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmUsOfdmaMinislotCfgStateTable.setDescription('This CM object specifies the attributes of the minislot configuration associated with a OFDMA upstream channel.')
docsIf31CmUsOfdmaMinislotCfgStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 15, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-IF31-MIB", "docsIf31CmUsOfdmaProfileStatsIuc"), (0, "DOCS-IF31-MIB", "docsIf31CmUsOfdmaMinislotCfgStateStartMinislotNum"))
if mibBuilder.loadTexts: docsIf31CmUsOfdmaMinislotCfgStateEntry.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmUsOfdmaMinislotCfgStateEntry.setDescription('The conceptual row of docsIf31CmUsOfdmaMinislotCfgStateTable. An instance exists for each OFDMA minislot.')
docsIf31CmUsOfdmaMinislotCfgStateStartMinislotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 15, 1, 1), Unsigned32())
if mibBuilder.loadTexts: docsIf31CmUsOfdmaMinislotCfgStateStartMinislotNum.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmUsOfdmaMinislotCfgStateStartMinislotNum.setDescription('This attribute is the unique identifier of the starting minislot in the group of consecutive minislots. The valid range is 1 to 240.')
docsIf31CmUsOfdmaMinislotCfgStateFirstSubcarrierId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 15, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmUsOfdmaMinislotCfgStateFirstSubcarrierId.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmUsOfdmaMinislotCfgStateFirstSubcarrierId.setDescription('This attribute is subcarrier identifier of the first subcarrier in the minislot. The valid range is 0 to 4095.')
docsIf31CmUsOfdmaMinislotCfgStateNumConsecutiveMinislots = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 15, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmUsOfdmaMinislotCfgStateNumConsecutiveMinislots.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmUsOfdmaMinislotCfgStateNumConsecutiveMinislots.setDescription('This attribute defines the number of continuous minislots which have the same bit loading, starting with the StartMinislotNum, defined in the associated upstream profile. The valid range is 1 to 237.')
docsIf31CmUsOfdmaMinislotCfgStateMinislotPilotPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 15, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmUsOfdmaMinislotCfgStateMinislotPilotPattern.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmUsOfdmaMinislotCfgStateMinislotPilotPattern.setDescription('This attribute specifies the id of the pilot pattern used for the minislot. The actual range varies depending on the FFT size in use, either 1-8 for 2K or 1-14 for 4K mode. The valid range is 1 to 14.')
docsIf31CmUsOfdmaMinislotCfgStateDataSymbolModulation = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 15, 1, 5), UsOfdmaModulationType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmUsOfdmaMinislotCfgStateDataSymbolModulation.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmUsOfdmaMinislotCfgStateDataSymbolModulation.setDescription('This attribute defines the bit loading of the data subcarriers in the minislot.')
docsIf31CmEmDlsStatsTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 16), )
if mibBuilder.loadTexts: docsIf31CmEmDlsStatsTable.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmEmDlsStatsTable.setDescription('This CM object provides statistics on the DLS feature, when enabled.')
docsIf31CmEmDlsStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 16, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: docsIf31CmEmDlsStatsEntry.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmEmDlsStatsEntry.setDescription("The conceptual row of docsIf31CmEmDlsStatsTable. An instance exists for each of the Cable Modem's MAC Domains. It is indexed by the ifIndex of the corresponding MAC Domain.")
docsIf31CmEmDlsStatsNumberTimesCrossedBelowUsEntryThrshlds = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 16, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmEmDlsStatsNumberTimesCrossedBelowUsEntryThrshlds.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmEmDlsStatsNumberTimesCrossedBelowUsEntryThrshlds.setDescription('This attribute indicates the number of times since registration the CM crossed below the upstream entry bitrate threshold for a number of consecutive seconds equal to or exceeding the upstream entry time threshold.')
docsIf31CmEmDlsStatsNumberTimesCrossedBelowDsEntryThrshlds = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 16, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmEmDlsStatsNumberTimesCrossedBelowDsEntryThrshlds.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmEmDlsStatsNumberTimesCrossedBelowDsEntryThrshlds.setDescription('This attribute indicates the number of times since registration the CM crossed below the downstream entry bitrate threshold for a number of consecutive seconds equal to or exceeding the downstream entry time threshold.')
docsIf31CmEmDlsStatsTotalDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 16, 1, 3), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmEmDlsStatsTotalDuration.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmEmDlsStatsTotalDuration.setDescription('This attribute indicates the total time duration, in seconds since registration, the CM has been in Energy Management DLS mode, as controlled by the DBC-REQ Energy Management DLS Mode Indicator TLV. This attribute differs from docsIf31CmEmDlsStatsTotalDurationBelowUsDsThrshlds because it is dependent on effects of the Energy Management Cycle Period, and processing of EM-REQ/EM-RSP messages and DBC messages that specifically indicate entry into or exit from Energy Management DLS mode.')
docsIf31CmEmDlsStatsTotalDurationBelowUsThrshlds = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 16, 1, 4), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmEmDlsStatsTotalDurationBelowUsThrshlds.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmEmDlsStatsTotalDurationBelowUsThrshlds.setDescription('This attribute indicates the total time duration, in seconds since registration, the CM satisfied upstream conditions for entry into or remaining in Energy Management DLS mode.')
docsIf31CmEmDlsStatsTotalDurationBelowDsThrshlds = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 16, 1, 5), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmEmDlsStatsTotalDurationBelowDsThrshlds.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmEmDlsStatsTotalDurationBelowDsThrshlds.setDescription('This attribute indicates the total time duration, in seconds since registration, the CM satisfied downstream conditions for entry into or remaining in Energy Management DLS mode.')
docsIf31CmEmDlsStatsTotalDurationBelowUsDsThrshlds = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 16, 1, 6), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmEmDlsStatsTotalDurationBelowUsDsThrshlds.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmEmDlsStatsTotalDurationBelowUsDsThrshlds.setDescription('This attribute indicates the total time duration, in seconds since registration, the CM, with respect to both upstream and downstream entry and exit thresholds, satisfied conditions for entry into and remaining in Energy Management DLS mode. This attribute differs from docsIf31CmEmDlsStatsTotalDuration because it is not dependent on effects of the Energy Management Cycle Period or processing of EM-REQ/EM-RSP messages and DBC messages that specifically indicate entry into or exit from Energy Management DLS mode.')
docsIf31CmEmDlsStatsNumSleepLatencyTriggers = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 16, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmEmDlsStatsNumSleepLatencyTriggers.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmEmDlsStatsNumSleepLatencyTriggers.setDescription('This attribute indicates the number of times since registration the CM transitioned to the DLS wake state due to the DLS Maximum Sleep Latency being exceeded.')
docsIf31CmEmDlsStatsNumSleepByteCtTriggers = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 16, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmEmDlsStatsNumSleepByteCtTriggers.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmEmDlsStatsNumSleepByteCtTriggers.setDescription('This attribute indicates the number of times since registration the CM transitioned to the DLS wake state due to the DLS Maximum Byte Count being exceeded.')
docsIf31CmEmDlsStatusTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 17), )
if mibBuilder.loadTexts: docsIf31CmEmDlsStatusTable.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmEmDlsStatusTable.setDescription('This CM object provides statistics on the DLS feature, when enabled.')
docsIf31CmEmDlsStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 17, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: docsIf31CmEmDlsStatusEntry.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmEmDlsStatusEntry.setDescription("The conceptual row of docsIf31CmEmDlsStatusTable. An instance exists for each of the Cable Modem's MAC Domains. It is indexed by the ifIndex of the corresponding MAC Domain.")
docsIf31CmEmDlsStatusAssignedEmIds = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 17, 1, 1), EmIdList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmEmDlsStatusAssignedEmIds.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmEmDlsStatusAssignedEmIds.setDescription('This attribute reports the set of CMTS-assigned EM-IDs for this CM. This attribute is encoded as an array 16-bit binary values with up to 3 elements. The broadcast EM-ID is not included in the list')
docsIf31CmEmDlsStatusReceiveTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 17, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmEmDlsStatusReceiveTimer.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmEmDlsStatusReceiveTimer.setDescription('This attribute specifies how long the CM is required to continue listening on the downstream for traffic, after reception of the EMM with Sleep Time with a non-zero value. The CMTS communicates the EM Receive Timer to the CM during registration or in DBC message. The DLS Receive Timer is specified in units of PLC frame intervals. The valid range is 0 - 2.')
docsIf31CmEmDlsStatusMaxSleepLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 17, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmEmDlsStatusMaxSleepLatency.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmEmDlsStatusMaxSleepLatency.setDescription('This attribute specifies the amount of time the CM would allow an upstream channel to queue the packets without transitioning to DLS wake state. The Max Sleep Latency is specified in msec.')
docsIf31CmEmDlsStatusMaxSleepBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 17, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmEmDlsStatusMaxSleepBytes.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmEmDlsStatusMaxSleepBytes.setDescription('This attribute specifies the maximum number of bytes a CM would allow an upstream service flow to enqueue without transitioning to DLS wake state. The MaxSleepBytes is specified in bytes.')
docsIf31CmSystemCfgState = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 18))
docsIf31CmSystemCfgStateDiplexerCapability = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 18, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmSystemCfgStateDiplexerCapability.setReference('DOCSIS 3.1 MAC and Upper Layer Protocols Interface Specification CM-SP-MULPIv3.1-I11-xxxxxx, Diplexer Upstream Upper Band Edge section.')
if mibBuilder.loadTexts: docsIf31CmSystemCfgStateDiplexerCapability.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmSystemCfgStateDiplexerCapability.setDescription('This attribute specifies the maximum diplexer upstream upper band edge supported by the CM device. This corresponds to the maximum capability reported by the CM in the Diplexer Upstream Upper Band Edge modem capability.')
docsIf31CmSystemCfgStateDiplexerCfgBandEdge = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 18, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmSystemCfgStateDiplexerCfgBandEdge.setReference('DOCSIS 3.1 MAC and Upper Layer Protocols Interface Specification CM-SP-MULPIv3.1-I11-xxxxxx, Diplexer Upstream Upper Band Edge Configuration section.')
if mibBuilder.loadTexts: docsIf31CmSystemCfgStateDiplexerCfgBandEdge.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmSystemCfgStateDiplexerCfgBandEdge.setDescription('This attribute specifies the current configured value for the upstream upper band edge of the diplexer in the CM device. This corresponds to the Diplexer Upstream Upper Band Edge Configuration reported by the CM in its REG-REQ.')
docsIf31CmSystemCfgStateDiplexerDsLowerCapability = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 18, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmSystemCfgStateDiplexerDsLowerCapability.setReference('DOCSIS 3.1 MAC and Upper Layer Protocols Interface Specification CM-SP-MULPIv3.1-I11-xxxxxx, Diplexer Downstream Lower Band Edge section.')
if mibBuilder.loadTexts: docsIf31CmSystemCfgStateDiplexerDsLowerCapability.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmSystemCfgStateDiplexerDsLowerCapability.setDescription('This attribute specifies the minimum diplexer downstream lower band edge supported by the CM device. This corresponds to the minimum capability reported by the CM in the Diplexer Downstream Lower Band Edge modem capability.')
docsIf31CmSystemCfgStateDiplexerCfgDsLowerBandEdge = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 18, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmSystemCfgStateDiplexerCfgDsLowerBandEdge.setReference('DOCSIS 3.1 MAC and Upper Layer Protocols Interface Specification CM-SP-MULPIv3.1-I11-xxxxxx, Diplexer Downstream Lower Band Edge Configuration section.')
if mibBuilder.loadTexts: docsIf31CmSystemCfgStateDiplexerCfgDsLowerBandEdge.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmSystemCfgStateDiplexerCfgDsLowerBandEdge.setDescription('This attribute specifies the current configured value for the downstream lower band edge of the diplexer in the CM device. This corresponds to the Diplexer Downstream Lower Band Edge Configuration reported by the CM in its REG-REQ.')
docsIf31CmSystemCfgStateDiplexerDsUpperCapability = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 18, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmSystemCfgStateDiplexerDsUpperCapability.setReference('DOCSIS 3.1 MAC and Upper Layer Protocols Interface Specification CM-SP-MULPIv3.1-I11-xxxxxx, Diplexer Downstream Upper Band Edge section.')
if mibBuilder.loadTexts: docsIf31CmSystemCfgStateDiplexerDsUpperCapability.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmSystemCfgStateDiplexerDsUpperCapability.setDescription('This attribute specifies the maximum diplexer downstream upper band edge supported by the CM device. This corresponds to the maximum capability reported by the CM in the Diplexer Downstream Upper Band Edge modem capability.')
docsIf31CmSystemCfgStateDiplexerCfgDsUpperBandEdge = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 18, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmSystemCfgStateDiplexerCfgDsUpperBandEdge.setReference('DOCSIS 3.1 MAC and Upper Layer Protocols Interface Specification CM-SP-MULPIv3.1-I11-xxxxxx, Diplexer Downstream Upper Band Edge Configuration section.')
if mibBuilder.loadTexts: docsIf31CmSystemCfgStateDiplexerCfgDsUpperBandEdge.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmSystemCfgStateDiplexerCfgDsUpperBandEdge.setDescription('This attribute specifies the current configured value for the Downstream upper band edge of the diplexer in the CM device. This corresponds to the Diplexer Downstream Upper Band Edge Configuration reported by the CM in its REG-REQ.')
docsIf31CmtsDsOfdmChanTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 19), )
if mibBuilder.loadTexts: docsIf31CmtsDsOfdmChanTable.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsDsOfdmChanTable.setDescription('This CMTS object reports the status of the downstream OFDM channels.')
docsIf31CmtsDsOfdmChanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 19, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: docsIf31CmtsDsOfdmChanEntry.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsDsOfdmChanEntry.setDescription('The conceptual row of docsIf31CmtsDsOfdmTable. An instance exists for each downstream OFDM channel.')
docsIf31CmtsDsOfdmChanChannelId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 19, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmtsDsOfdmChanChannelId.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsDsOfdmChanChannelId.setDescription('The Cable Modem Termination System identification of the OFDM downstream channel within this particular MAC interface. if the interface is down, the object returns the most current value. If the downstream channel ID is unknown, this object returns a value of 0.')
docsIf31CmtsDsOfdmChanLowerBdryFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 19, 1, 2), Unsigned32()).setUnits('Hz').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmtsDsOfdmChanLowerBdryFreq.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsDsOfdmChanLowerBdryFreq.setDescription('This attribute represents either the lower boundary frequency of the lower guardband or (if no guardband is defined) the lower boundary frequency of the lowest active subcarrier of the OFDM downstream channel.')
docsIf31CmtsDsOfdmChanUpperBdryFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 19, 1, 3), Unsigned32()).setUnits('Hz').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmtsDsOfdmChanUpperBdryFreq.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsDsOfdmChanUpperBdryFreq.setDescription('This attribute represents either the upper boundary frequency of the upper guardband or (if no guardband is defined) the upper boundary frequency of the highest active subcarrier of the OFDM downstream channel.')
docsIf31CmtsDsOfdmChanLowerBdryEncompSpectrum = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 19, 1, 4), Unsigned32()).setUnits('Hz').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmtsDsOfdmChanLowerBdryEncompSpectrum.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsDsOfdmChanLowerBdryEncompSpectrum.setDescription('This attribute represents the lower boundary frequency of the encompassed spectrum.')
docsIf31CmtsDsOfdmChanUpperBdryEncompSpectrum = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 19, 1, 5), Unsigned32()).setUnits('Hz').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmtsDsOfdmChanUpperBdryEncompSpectrum.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsDsOfdmChanUpperBdryEncompSpectrum.setDescription('This attribute represents the upper boundary frequency of the encompassed spectrum.')
docsIf31CmtsDsOfdmChanPlcFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 19, 1, 6), Unsigned32()).setUnits('Hz').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmtsDsOfdmChanPlcFreq.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsDsOfdmChanPlcFreq.setDescription('This is the PHY Link Channel (PLC) frequency. It is the center frequency of the lowest frequency subcarrier of the PLC. The aim of the PLC is for the CMTS to convey to the CM the physical properties of the OFDM channel.')
docsIf31CmtsDsOfdmChanSubcarrierZeroFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 19, 1, 7), Unsigned32()).setUnits('Hz').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmtsDsOfdmChanSubcarrierZeroFreq.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsDsOfdmChanSubcarrierZeroFreq.setDescription('This attribute specifies the center frequency of the subcarrier 0 of the OFDM transmission. Note that since subcarrier 0 is always excluded, it will actually be below the allowed downstream spectrum band. This is the frequency of subcarrier X(0) in the definition of the DFT.')
docsIf31CmtsDsOfdmChanFirstActiveSubcarrierNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 19, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmtsDsOfdmChanFirstActiveSubcarrierNum.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsDsOfdmChanFirstActiveSubcarrierNum.setDescription('This attribute corresponds to the number of the first non-excluded subcarrier. The valid range is 148 to 7895.')
docsIf31CmtsDsOfdmChanLastActiveSubcarrierNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 19, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmtsDsOfdmChanLastActiveSubcarrierNum.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsDsOfdmChanLastActiveSubcarrierNum.setDescription('This attribute corresponds to the number of the last non-excluded subcarrier. The valid range is 148 to 7895')
docsIf31CmtsDsOfdmChanNumActiveSubcarriers = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 19, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmtsDsOfdmChanNumActiveSubcarriers.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsDsOfdmChanNumActiveSubcarriers.setDescription('This attribute represents the number of active data subcarriers within the OFDM downstream channel (i.e. this exclude subcarriers for continuous pilots and the PLC). For 4K FFT mode, the maximum number of subcarriers including continuous pilots and the PLC cannot exceed 3800, and for 8K FFT mode, the maximum number of active subcarriers including continuous pilots and the PLC cannot be greater than 7600. However, there are a minimum of 56 continuous pilots in a 192MHz channel that has no exclusions, and the size of the PLC is 8 subcarriers for 4K FFT mode and 16 subcarriers for 8K FFT mode. Therefore the maximum value of NumActiveSubcarriers is 3736 (or 3800 - 56 - 8) for 4K FFT mode and 7528 (or 7600 - 56 - 16) for 8K FFT mode.')
docsIf31CmtsDsOfdmChanSubcarrierSpacing = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 19, 1, 11), SubcarrierSpacingType()).setUnits('kHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmtsDsOfdmChanSubcarrierSpacing.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsDsOfdmChanSubcarrierSpacing.setDescription('This attribute defines the subcarrier spacing associated with a particular FFT mode configured on the OFDM downstream channel. If it is 4K mode, then the subcarrier spacing is 50kHz. If it is 8K mode, then the subcarrier spacing is 25kHz.')
docsIf31CmtsDsOfdmChanLowerGuardbandWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 19, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmtsDsOfdmChanLowerGuardbandWidth.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsDsOfdmChanLowerGuardbandWidth.setDescription('This attribute is the width in Hertz of the lower guard band of the OFDM channel. The valid range is 0 or 1MHz to 1.77GHz.')
docsIf31CmtsDsOfdmChanUpperGuardbandWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 19, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmtsDsOfdmChanUpperGuardbandWidth.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsDsOfdmChanUpperGuardbandWidth.setDescription('This attribute is the width in Hertz of the upper guard band of the OFDM channel. The valid range is 0 or 1MHz to 1.77GHz')
docsIf31CmtsDsOfdmChanCyclicPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 19, 1, 14), DsOfdmCyclicPrefix()).setUnits('number of samples').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmtsDsOfdmChanCyclicPrefix.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsDsOfdmChanCyclicPrefix.setDescription('Cyclic prefix enables the receiver to overcome the effects of inter-symbol-interference and intercarrier-interference caused by micro-reflections in the channel. There are five possible values for the length of the CP and the choice depends on the delay spread of the channel - a longer delay spread requires a longer cyclic prefix. The cyclic prefix (in usec) are converted into samples using the sample rate of 204.8 Msamples/s and is an integer multiple of: 1/64 * 20 us.')
docsIf31CmtsDsOfdmChanRollOffPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 19, 1, 15), DsOfdmRollOffPeriod()).setUnits('number of samples').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmtsDsOfdmChanRollOffPeriod.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsDsOfdmChanRollOffPeriod.setDescription('Roll off period maximizes channel capacity by sharpening the edges of the spectrum of the OFDM signal. For windowing purposes another segment at the start of the IDFT output is appended to the end of the IDFT output - the roll-off postfix (RP). There are five possible values for the (RP), and the choice depends on the bandwidth of the channel and the number of exclusion bands within the channel. A larger RP provides sharper edges in the spectrum of the OFDM signal; however, there is a time vs. frequency trade-off. Larger RP values reduce the efficiency of transmission in the time domain, but because the spectral edges are sharper, more useful subcarriers appear in the frequency domain. There is an optimum value for the RP that maximizes capacity for a given bandwidth and/or exclusion band scenario.')
docsIf31CmtsDsOfdmChanTimeInterleaverDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 19, 1, 16), TimeInterleaverDepth()).setUnits('symbols').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmtsDsOfdmChanTimeInterleaverDepth.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsDsOfdmChanTimeInterleaverDepth.setDescription('This attribute represents the number of samples for the OFDM Downstream channel. This is limited to 16 samples for and 32 samples for 50 kHz and 25 kHz Subcarrier Spacing, respectively.')
docsIf31CmtsDsOfdmChanNumPilots = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 19, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmtsDsOfdmChanNumPilots.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsDsOfdmChanNumPilots.setDescription('This attribute is the number of continuous pilots for the OFDM downstream channel.')
docsIf31CmtsDsOfdmChanPilotScaleFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 19, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmtsDsOfdmChanPilotScaleFactor.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsDsOfdmChanPilotScaleFactor.setDescription('This attribute represents the scale factor for calculating the number of continuous pilots. ')
docsIf31CmtsDsOfdmChanNcpModulation = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 19, 1, 19), DsOfdmModulationType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmtsDsOfdmChanNcpModulation.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsDsOfdmChanNcpModulation.setDescription('This attribute represents the modulation of all subcarriers in the NCP channel. Valid values are qpsk, qam16 and qam64.')
docsIf31CmtsDsOfdmChanUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 19, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmtsDsOfdmChanUtilization.setReference('DOCSIS 3.1 CCAP Operations Support System Interface Specification CM-SP-CCAP OSSIv3.1-I04-15MMDD, OfdmChannelUtilization.')
if mibBuilder.loadTexts: docsIf31CmtsDsOfdmChanUtilization.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsDsOfdmChanUtilization.setDescription('The utilization for this OFDM downstream channel, accurate as of the most recent docsIfCmtsChannelUtilizationInterval. See Reference for specific details on this attribute.')
docsIf31CmtsDsOfdmProfileStatsTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 20), )
if mibBuilder.loadTexts: docsIf31CmtsDsOfdmProfileStatsTable.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsDsOfdmProfileStatsTable.setDescription('This CMTS table provides DS OFDM statistics on a per Profile basis.')
docsIf31CmtsDsOfdmProfileStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 20, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-IF31-MIB", "docsIf31CmtsDsOfdmProfileStatsProfileId"))
if mibBuilder.loadTexts: docsIf31CmtsDsOfdmProfileStatsEntry.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsDsOfdmProfileStatsEntry.setDescription('The conceptual row of docsIf31CmtsDsOfdmProfileStatsTable. An instance exists for each Profile Id on a given DS OFDM channel.')
docsIf31CmtsDsOfdmProfileStatsProfileId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 20, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)))
if mibBuilder.loadTexts: docsIf31CmtsDsOfdmProfileStatsProfileId.setReference('DOCSIS 3.1 MAC and Upper Layer Protocols Interface Specification CM-SP-MULPIv3.1-I03-140610, Downstream Profile Descriptor.')
if mibBuilder.loadTexts: docsIf31CmtsDsOfdmProfileStatsProfileId.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsDsOfdmProfileStatsProfileId.setDescription('This attribute is the identifier of a profile associated with the OFDM downstream channel. The value of this attribute is zero-based due to constraints of the definition of Profile Id.')
docsIf31CmtsDsOfdmProfileStatsConfigChangeCt = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 20, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmtsDsOfdmProfileStatsConfigChangeCt.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsDsOfdmProfileStatsConfigChangeCt.setDescription('This attribute contains the value of the Configuration Change Count field in the Downstream Profile Descriptor (DPD) MAC Management Message corresponding to this profile.')
docsIf31CmtsDsOfdmProfileStatsFullChannelSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 20, 1, 3), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmtsDsOfdmProfileStatsFullChannelSpeed.setReference('DOCSIS 3.1 CCAP Operations Support System Interface Specification CM-SP-CCAP OSSIv3.1-I03-15MMDD, ProfileFullChannelSpeed.')
if mibBuilder.loadTexts: docsIf31CmtsDsOfdmProfileStatsFullChannelSpeed.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsDsOfdmProfileStatsFullChannelSpeed.setDescription('This attribute is the speed of the associated channel in bps if this were the only profile and 100% of data-capable subcarriers were utilized to transmit MAC frames in full codewords. See Reference for specific details on this attribute.')
docsIf31CmtsDsOfdmProfileStatsOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 20, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmtsDsOfdmProfileStatsOutOctets.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsDsOfdmProfileStatsOutOctets.setDescription('This attribute is the count of MAC-layer octets transmitted by the CCAP using this profile. This value is the size of all unicast, multicast or broadcast frames (including all MAC-layer framing) delivered from the MAC to the Phy -- this includes user data, DOCSIS MAC Management Messages, etc. Discontinuities in the value of this counter can occur at reinitialization of the managed system, and at other times as indicated by the value of docsIf31CmtsDsOfdmProfileStats- CtrDiscontinuityTime.')
docsIf31CmtsDsOfdmProfileStatsOutUnicastOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 20, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmtsDsOfdmProfileStatsOutUnicastOctets.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsDsOfdmProfileStatsOutUnicastOctets.setDescription('This attribute is the count of MAC-layer Unicast octets transmitted by the CCAP using this profile. This value is the size of all unicast frames (including all MAC-layer framing) delivered from the MAC to the Phy -- this includes user data, DOCSIS MAC Management Messages, etc. Discontinuities in the value of this counter can occur at reinitialization of the managed system, and at other times as indicated by the value of docsIf31CmtsDsOfdmProfileStats- CtrDiscontinuityTime.')
docsIf31CmtsDsOfdmProfileStatsOutMulticastOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 20, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmtsDsOfdmProfileStatsOutMulticastOctets.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsDsOfdmProfileStatsOutMulticastOctets.setDescription('This attribute is the count of MAC-layer Multicast and broadcast octets transmitted by the CCAP using this profile. This value is the size of all frames (including all MAC-layer framing) delivered from the MAC to the Phy and addressed to a multicast MAC address -- this includes user data, DOCSIS MAC Management Messages, etc. Discontinuities in the value of this counter can occur at reinitialization of the managed system, and at other times as indicated by the value of docsIf31CmtsDsOfdmProfileStats- CtrDiscontinuityTime.')
docsIf31CmtsDsOfdmProfileStatsOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 20, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmtsDsOfdmProfileStatsOutFrames.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsDsOfdmProfileStatsOutFrames.setDescription('This attribute is the count of frames transmitted by the CCAP using this profile. This value is the count of all unicast, multicast or broadcast frames delivered from the MAC to the Phy -- this includes user data, DOCSIS MAC Management Messages, etc. Discontinuities in the value of this counter can occur at reinitialization of the managed system, and at other times as indicated by the value of docsIf31CmtsDsOfdmProfileStats- CtrDiscontinuityTime.')
docsIf31CmtsDsOfdmProfileStatsOutUnicastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 20, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmtsDsOfdmProfileStatsOutUnicastFrames.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsDsOfdmProfileStatsOutUnicastFrames.setDescription('This attribute is the count of unicast frames transmitted by the CCAP using this profile. This value is the count of all frames delivered from the MAC to the Phy and addressed to a unicast MAC address -- this include user data, DOCSIS MAC Management Messages, etc. Discontinuities in the value of this counter can occur at reinitialization of the managed system, and at other times as indicated by the value of docsIf31CmtsDsOfdmProfileStats- CtrDiscontinuityTime.')
docsIf31CmtsDsOfdmProfileStatsOutMulticastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 20, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmtsDsOfdmProfileStatsOutMulticastFrames.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsDsOfdmProfileStatsOutMulticastFrames.setDescription('This attribute is the count of multicast frames transmitted by the CCAP using this profile. This value is the count of all frames delivered from the MAC to the Phy and addressed to a multicast MAC address -- this include user data, DOCSIS MAC Management Messages, etc, but excludes frames sent to a broadcast address. Discontinuities in the value of this counter can occur at reinitialization of the managed system, and at other times as indicated by the value of docsIf31CmtsDsOfdmProfileStats- CtrDiscontinuityTime.')
docsIf31CmtsDsOfdmProfileStatsCtrDiscontinuityTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 20, 1, 10), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmtsDsOfdmProfileStatsCtrDiscontinuityTime.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsDsOfdmProfileStatsCtrDiscontinuityTime.setDescription("This attribute is the value of sysUpTime on the most recent occasion at which any one or more of this entry's counters suffered a discontinuity. If no such discontinuities have occurred since the last re-initialization of the local management subsystem, then this attribute contains a zero value.")
docsIf31CmtsDsOfdmProfileStatsAssignedCmCt = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 20, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmtsDsOfdmProfileStatsAssignedCmCt.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsDsOfdmProfileStatsAssignedCmCt.setDescription('This attribute is the count of CMs currently assigned to this profile.')
docsIf31CmtsDsOfdmSubcarrierStatusTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 21), )
if mibBuilder.loadTexts: docsIf31CmtsDsOfdmSubcarrierStatusTable.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsDsOfdmSubcarrierStatusTable.setDescription('This CMTS object provides the status of each of the OFDM subcarriers which comprise this OFDM channel.')
docsIf31CmtsDsOfdmSubcarrierStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 21, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-IF31-MIB", "docsIf31CmtsDsOfdmProfileStatsProfileId"), (0, "DOCS-IF31-MIB", "docsIf31CmtsDsOfdmSubcarrierStatusStartId"))
if mibBuilder.loadTexts: docsIf31CmtsDsOfdmSubcarrierStatusEntry.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsDsOfdmSubcarrierStatusEntry.setDescription('The conceptual row of docsIf31CmtsDsOfdmSubcarrierStatusTable. An instance exists for each Profile on a given OFDM downstream.')
docsIf31CmtsDsOfdmSubcarrierStatusStartId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 21, 1, 1), Unsigned32())
if mibBuilder.loadTexts: docsIf31CmtsDsOfdmSubcarrierStatusStartId.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsDsOfdmSubcarrierStatusStartId.setDescription('This attribute is an identifier for the first subcarrier in the range of active subcarriers with the same modulation.')
docsIf31CmtsDsOfdmSubcarrierStatusEndId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 21, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmtsDsOfdmSubcarrierStatusEndId.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsDsOfdmSubcarrierStatusEndId.setDescription('This attribute is the subcarrier number of the last subcarrier in the group.')
docsIf31CmtsDsOfdmSubcarrierStatusMainModulation = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 21, 1, 3), DsOfdmModulationType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmtsDsOfdmSubcarrierStatusMainModulation.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsDsOfdmSubcarrierStatusMainModulation.setDescription('This attribute indicates the main modulation order of the subcarriers in the range. In case of skip modulation enabled the MainModulation is the modulation order of the first, the third, the fifth, etc. subcarriers in the range.')
docsIf31CmtsDsOfdmSubcarrierStatusSkip = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 21, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmtsDsOfdmSubcarrierStatusSkip.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsDsOfdmSubcarrierStatusSkip.setDescription('This attribute indicates whether the skip modulation method is used. If true the modulation order of the subcarriers in the range is alternating between the MainModulation and SkipModulation.')
docsIf31CmtsDsOfdmSubcarrierStatusSkipModulation = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 21, 1, 5), DsOfdmModulationType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmtsDsOfdmSubcarrierStatusSkipModulation.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsDsOfdmSubcarrierStatusSkipModulation.setDescription('This attribute indicates the modulation order for every other subcarrier in the range.')
docsIf31CmtsDsOfdmChanPowerTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 22), )
if mibBuilder.loadTexts: docsIf31CmtsDsOfdmChanPowerTable.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsDsOfdmChanPowerTable.setDescription('This object provides measurements of the downstream OFDM channel power in 6 MHz-wide bands at the output of the CCAP.')
docsIf31CmtsDsOfdmChanPowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 22, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-IF31-MIB", "docsIf31CmtsDsOfdmChanPowerBandIndex"))
if mibBuilder.loadTexts: docsIf31CmtsDsOfdmChanPowerEntry.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsDsOfdmChanPowerEntry.setDescription('The conceptual row of the docsIf31CmtsDsOfdmChanPowerTable.')
docsIf31CmtsDsOfdmChanPowerBandIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 22, 1, 1), Unsigned32())
if mibBuilder.loadTexts: docsIf31CmtsDsOfdmChanPowerBandIndex.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsDsOfdmChanPowerBandIndex.setDescription("This attribute is a unique index used by the CCAP to identify each of the 6 MHz bands of a given OFDM downstream channel (from the lowest 6MHz band of the Occupied Bandwidth to the highest 6MHz band of the Occupied Bandwidth). The CCAP assigns indices in frequency order from the OFDM channel's lowest to highest 6 MHz frequency band for each of the 6 MHz bands of the channel, using an index of 1 to represent the lowest frequency band of the Occupied Bandwidth. Thus, an index of 33 represents the highest possible 6 MHz frequency band of the Occupied Bandwidth of an OFDM channel. The CCAP also provides the power of the PLC channel and utilizes a value of 0 to represent the PLC channel in this table. ")
docsIf31CmtsDsOfdmChanPowerCenterFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 22, 1, 2), Unsigned32()).setUnits('Hz').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmtsDsOfdmChanPowerCenterFrequency.setReference('DOCSIS 3.1 CCAP Operations Support System Interface Specification CM-SP-CCAP OSSIv3.1-I04-15MMDD, CenterFrequency')
if mibBuilder.loadTexts: docsIf31CmtsDsOfdmChanPowerCenterFrequency.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsDsOfdmChanPowerCenterFrequency.setDescription('This attribute corresponds to the center frequency of the 6 MHz band the CM measured the average channel power. See Reference for specific details on this attribute.')
docsIf31CmtsDsOfdmChanPowerTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 22, 1, 3), TenthdBmV()).setUnits('TenthdBmV').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmtsDsOfdmChanPowerTxPower.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsDsOfdmChanPowerTxPower.setDescription('This attribute provides an estimate of the average power measured at the output of the CCAP in the downstream channel set for this 6 MHz band. If the docsIf31CmtsDsOfdmChanPowerBandIndex is 0, then this attribute provides an estimate of the average power measured at the output of the CCAP for a 6 MHz encompassed spectrum containing the DOCSIS 3.1 PLC at its center.')
docsIf31CmtsUsOfdmaChanTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 23), )
if mibBuilder.loadTexts: docsIf31CmtsUsOfdmaChanTable.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsUsOfdmaChanTable.setDescription('This object provides channel-level visibility into Upstream OFDMA channel configuration and status.')
docsIf31CmtsUsOfdmaChanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 23, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: docsIf31CmtsUsOfdmaChanEntry.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsUsOfdmaChanEntry.setDescription('The conceptual row of docsIf31CmtsUsOfdmaChanTable.')
docsIf31CmtsUsOfdmaChanTemplateIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 23, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmtsUsOfdmaChanTemplateIndex.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsUsOfdmaChanTemplateIndex.setDescription('The index of the UsOfdmaModulationTemplate object which the CMTS/CCAP utilized when configuring this channel.')
docsIf31CmtsUsOfdmaChanConfigChangeCt = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 23, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmtsUsOfdmaChanConfigChangeCt.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsUsOfdmaChanConfigChangeCt.setDescription('This attribute contains the value of the Configuration Change Count field in the Upstream Channel Descriptor (UCD) MAC Management Message currently in use on this channel.')
docsIf31CmtsUsOfdmaChanTargetRxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 23, 1, 3), TenthdBmV()).setUnits('TenthdBmV').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmtsUsOfdmaChanTargetRxPower.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsUsOfdmaChanTargetRxPower.setDescription('This attribute provides the power of the expected commanded received signal in the channel, referenced to the CCAP input. The value represents the power spectral density in an equivalent 1.6 MHz spectrum.')
docsIf31CmtsUsOfdmaChanLowerBdryFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 23, 1, 4), Unsigned32()).setUnits('Hz').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmtsUsOfdmaChanLowerBdryFreq.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsUsOfdmaChanLowerBdryFreq.setDescription('This attribute provides the lower frequency for the OFDMA US channel.')
docsIf31CmtsUsOfdmaChanUpperBdryFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 23, 1, 5), Unsigned32()).setUnits('Hz').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmtsUsOfdmaChanUpperBdryFreq.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsUsOfdmaChanUpperBdryFreq.setDescription('This attribute provides the upper frequency for the OFDMA US channel.')
docsIf31CmtsUsOfdmaChanSubcarrierSpacing = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 23, 1, 6), SubcarrierSpacingType()).setUnits('kHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmtsUsOfdmaChanSubcarrierSpacing.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsUsOfdmaChanSubcarrierSpacing.setDescription('This attribute defines the subcarrier spacing associated with a particular FFT mode configured on the OFDMA upstream channel.')
docsIf31CmtsUsOfdmaChanCyclicPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 23, 1, 7), UsOfdmaCyclicPrefix()).setUnits('number of samples').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmtsUsOfdmaChanCyclicPrefix.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsUsOfdmaChanCyclicPrefix.setDescription('The cyclic prefix assigned to this channel for mitigating interference due to microreflections.')
docsIf31CmtsUsOfdmaChanNumSymbolsPerFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 23, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmtsUsOfdmaChanNumSymbolsPerFrame.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsUsOfdmaChanNumSymbolsPerFrame.setDescription('This attribute is the number of symbol periods per frame.')
docsIf31CmtsUsOfdmaChanRollOffPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 23, 1, 9), UsOfdmaRollOffPeriod()).setUnits('number of samples').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmtsUsOfdmaChanRollOffPeriod.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsUsOfdmaChanRollOffPeriod.setDescription('This attribute is the windowing roll-off period.')
docsIf31CmtsUsOfdmaChanPreEqEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 23, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmtsUsOfdmaChanPreEqEnable.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsUsOfdmaChanPreEqEnable.setDescription('This attribute indicates pre-equalization is enabled on the OFDMA upstream channel when its value is true, or disabled when its value is false.')
docsIf31CmtsUsOfdmaChanFineRngGuardband = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 23, 1, 11), Unsigned32()).setUnits('Hz').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmtsUsOfdmaChanFineRngGuardband.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsUsOfdmaChanFineRngGuardband.setDescription('This attribute is the sum of the upper and lower guard bands for fine ranging in Hz.')
docsIf31CmtsUsOfdmaChanFineRngNumSubcarriers = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 23, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmtsUsOfdmaChanFineRngNumSubcarriers.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsUsOfdmaChanFineRngNumSubcarriers.setDescription('This attribute is the maximum number of subcarriers for fine ranging.')
docsIf31CmtsUsOfdmaChanFineRngPreambleLen = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 23, 1, 13), Unsigned32()).setUnits('bits').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmtsUsOfdmaChanFineRngPreambleLen.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsUsOfdmaChanFineRngPreambleLen.setDescription('This attribute is the length of the OFDMA fine ranging IUC preamble in bits.')
docsIf31CmtsUsOfdmaChanInitRngGuardband = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 23, 1, 14), Unsigned32()).setUnits('Hz').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmtsUsOfdmaChanInitRngGuardband.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsUsOfdmaChanInitRngGuardband.setDescription('This attribute is the sum of the upper and lower guard bands for initial ranging in Hz.')
docsIf31CmtsUsOfdmaChanInitRngNumSubcarriers = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 23, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmtsUsOfdmaChanInitRngNumSubcarriers.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsUsOfdmaChanInitRngNumSubcarriers.setDescription('This attribute is the maximum number of subcarriers for initial ranging.')
docsIf31CmtsUsOfdmaChanInitRngPreambleLen = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 23, 1, 16), Unsigned32()).setUnits('bits').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmtsUsOfdmaChanInitRngPreambleLen.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsUsOfdmaChanInitRngPreambleLen.setDescription('This attribute is the maximum number of subcarriers for initial ranging.')
docsIf31CmtsUsOfdmaChanProvAttribMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 23, 1, 17), AttributeMask()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmtsUsOfdmaChanProvAttribMask.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsUsOfdmaChanProvAttribMask.setDescription('This attribute provides the Provisioned Attribute Mask for the OFDMA upstream channel.')
docsIf31CmtsUsOfdmaChanTxBackoffStart = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 23, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmtsUsOfdmaChanTxBackoffStart.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsUsOfdmaChanTxBackoffStart.setDescription('The initial random backoff window to use when retrying transmissions. Expressed as a power of 2. A value of 16 at the CMTS indicates that a proprietary adaptive retry mechanism is to be used.')
docsIf31CmtsUsOfdmaChanTxBackoffEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 23, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmtsUsOfdmaChanTxBackoffEnd.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsUsOfdmaChanTxBackoffEnd.setDescription('The final random backoff window to use when retrying transmissions. Expressed as a power of 2. A value of 16 at the CMTS indicates that a proprietary adaptive retry mechanism is to be used.')
docsIf31CmtsUsOfdmaChanRangingBackoffStart = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 23, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmtsUsOfdmaChanRangingBackoffStart.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsUsOfdmaChanRangingBackoffStart.setDescription('The initial random backoff window to use when retrying Ranging Requests. Expressed as a power of 2. A value of 16 at the CMTS indicates that a proprietary adaptive retry mechanism is to be used.')
docsIf31CmtsUsOfdmaChanRangingBackoffEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 23, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmtsUsOfdmaChanRangingBackoffEnd.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsUsOfdmaChanRangingBackoffEnd.setDescription('The final random backoff window to use when retrying Ranging Requests. Expressed as a power of 2. A value of 16 at the CMTS indicates that a proprietary adaptive retry mechanism is to be used.')
docsIf31CmtsUsOfdmaChanUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 23, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmtsUsOfdmaChanUtilization.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsUsOfdmaChanUtilization.setDescription('The calculated and truncated utilization for this physical upstream channel, accurate as of the most recent docsIfCmtsChannelUtilizationInterval. The upstream channel utilization is expressed as a percentage of minislots utilized on the physical channel, regardless of burst type. The utilization calculation can be expressed by the following equation: Utilization = MinislotsUtilized/MinislotsAllocated * 100% For an Initial Maintenance region, the minislots for the complete region are considered utilized if the CMTS received an upstream burst within the region from any CM on the physical channel. For contention REQ and REQ/DATA regions, the minislots for a transmission opportunity within the region are considered utilized if the CMTS received an upstream burst within the opportunity from any CM on the physical channel. For all other regions, utilized minislots are those in which the CMTS granted bandwidth to any unicast SID on the physical channel. For an upstream interface that has multiple logical upstream channels enabled, the utilization index is a weighted sum of utilization indices for the logical channels. The weight for each utilization index is the percentage of upstream mini-slots allocated for the corresponding logical channel. Example: If 75% of bandwidth is allocated to the first logical channel and 25% to the second, and the utilization for each are 60 and 40, respectively, the utilization for the upstream physical channel is (60 * 0.75) + (40 * 0.25) = 55. This figure applies to the most recent utilization interval.')
docsIf31CmtsUsOfdmaChanId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 23, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmtsUsOfdmaChanId.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsUsOfdmaChanId.setDescription('This attribute is the upstream Channel Id signaled in the DOCSIS protocol for the OFDMA upstream channel. The Channel Id is unique within the associated MacDomain.')
docsIf31CmtsUsOfdmaDataIucStatsTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 24), )
if mibBuilder.loadTexts: docsIf31CmtsUsOfdmaDataIucStatsTable.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsUsOfdmaDataIucStatsTable.setDescription('This CMTS table provides DS OFDM statistics on a per Profile basis.')
docsIf31CmtsUsOfdmaDataIucStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 24, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-IF31-MIB", "docsIf31CmtsUsOfdmaDataIucStatsDataIuc"))
if mibBuilder.loadTexts: docsIf31CmtsUsOfdmaDataIucStatsEntry.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsUsOfdmaDataIucStatsEntry.setDescription('The conceptual row of docsIf31CmtsUsOfdmaDataIucStatsTable. An instance exists for each Data IUC profile on a given US OFDMA channel.')
docsIf31CmtsUsOfdmaDataIucStatsDataIuc = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 24, 1, 1), Unsigned32())
if mibBuilder.loadTexts: docsIf31CmtsUsOfdmaDataIucStatsDataIuc.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsUsOfdmaDataIucStatsDataIuc.setDescription('This attribute represents the OFDMA Data IUC that these statistics correspond to.')
docsIf31CmtsUsOfdmaDataIucStatsMinislotPilotPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 24, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmtsUsOfdmaDataIucStatsMinislotPilotPattern.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsUsOfdmaDataIucStatsMinislotPilotPattern.setDescription('This attribute contains the identifier for the default pilot pattern specified in the template for minislots using this Data IUC. The valid range is 1 - 14.')
docsIf31CmtsUsOfdmaDataIucStatsMinislotModulation = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 24, 1, 3), UsOfdmaModulationType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmtsUsOfdmaDataIucStatsMinislotModulation.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsUsOfdmaDataIucStatsMinislotModulation.setDescription('This attribute contains the default modulation order specified in the template for minislots using this Data IUC.')
docsIf31CmtsUsOfdmaDataIucStatsTotalCodewords = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 24, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmtsUsOfdmaDataIucStatsTotalCodewords.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsUsOfdmaDataIucStatsTotalCodewords.setDescription('This attribute contains the count of the total number of FEC codewords received on this channel using this Data IUC. Discontinuities in the value of this counter can occur at reinitialization of the managed system, and at other times as indicated by the value of docsIf31CmtsUsOfdmaDataIucStats- CtrDiscontinuityTime.')
docsIf31CmtsUsOfdmaDataIucStatsCorrectedCodewords = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 24, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmtsUsOfdmaDataIucStatsCorrectedCodewords.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsUsOfdmaDataIucStatsCorrectedCodewords.setDescription('This attribute contains the count of codewords received on this channel using this Data IUC that failed the pre-decoding syndrome check, but passed the post-decoding syndrome check. Discontinuities in the value of this counter can occur at reinitialization of the managed system, and at other times as indicated by the value of docsIf31CmtsUsOfdmaDataIucStats- CtrDiscontinuityTime.')
docsIf31CmtsUsOfdmaDataIucStatsUnreliableCodewords = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 24, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmtsUsOfdmaDataIucStatsUnreliableCodewords.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsUsOfdmaDataIucStatsUnreliableCodewords.setDescription('This attribute contains the count of codewords received on this channel using this Data IUC that failed the post-decoding syndrome check. Discontinuities in the value of this counter can occur at reinitialization of the managed system, and at other times as indicated by the value of docsIf31CmtsUsOfdmaDataIucStats- CtrDiscontinuityTime.')
docsIf31CmtsUsOfdmaDataIucStatsInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 24, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmtsUsOfdmaDataIucStatsInOctets.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsUsOfdmaDataIucStatsInOctets.setDescription('This attribute is the count of MAC-layer octets received by the CCAP on this Data IUC. This value is the size of all unicast, multicast or broadcast octets (including all MAC- layer framing) and CCF PMD overhead (segment headers and stuffing bytes) delivered from the Phy to the MAC; this includes user data, DOCSIS MAC Management Messages, etc. Discontinuities in the value of this counter can occur at reinitialization of the managed system, and at other times as indicated by the value of docsIf31CmtsUsOfdmaDataIucStats- CtrDiscontinuityTime.')
docsIf31CmtsUsOfdmaDataIucStatsCtrDiscontinuityTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 24, 1, 8), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmtsUsOfdmaDataIucStatsCtrDiscontinuityTime.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsUsOfdmaDataIucStatsCtrDiscontinuityTime.setDescription("This attribute is the value of sysUpTime on the most recent occasion at which any one or more of this entry's counters suffered a discontinuity. If no such discontinuities have occurred since the last re-initialization of the local management subsystem, then this attribute contains a zero value.")
docsIf31CmtsUsOfdmaDataIucStatsAssignedCmCt = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 24, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmtsUsOfdmaDataIucStatsAssignedCmCt.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsUsOfdmaDataIucStatsAssignedCmCt.setDescription('This attribute is the count of CMs currently assigned to this Data IUC.')
docsIf31CmtsUsOfdmaDataIucDetailStatusTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 25), )
if mibBuilder.loadTexts: docsIf31CmtsUsOfdmaDataIucDetailStatusTable.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsUsOfdmaDataIucDetailStatusTable.setDescription('This CMTS table provides exceptions to the US channel template for this Data IUC.')
docsIf31CmtsUsOfdmaDataIucDetailStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 25, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-IF31-MIB", "docsIf31CmtsUsOfdmaDataIucStatsDataIuc"), (0, "DOCS-IF31-MIB", "docsIf31CmtsUsOfdmaDataIucDetailStatusLowerFreq"))
if mibBuilder.loadTexts: docsIf31CmtsUsOfdmaDataIucDetailStatusEntry.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsUsOfdmaDataIucDetailStatusEntry.setDescription('The conceptual row of docsIf31CmtsUsOfdmaDataIucDetailStatusTable. An instance exists for each exception to the template for a Data IUC profile on a given US OFDMA channel.')
docsIf31CmtsUsOfdmaDataIucDetailStatusLowerFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 25, 1, 1), Unsigned32()).setUnits('Hz')
if mibBuilder.loadTexts: docsIf31CmtsUsOfdmaDataIucDetailStatusLowerFreq.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsUsOfdmaDataIucDetailStatusLowerFreq.setDescription('This attribute indicates the lower frequency where the minislots will use the pilot pattern and modulation')
docsIf31CmtsUsOfdmaDataIucDetailStatusUpperFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 25, 1, 2), Unsigned32()).setUnits('Hz').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmtsUsOfdmaDataIucDetailStatusUpperFreq.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsUsOfdmaDataIucDetailStatusUpperFreq.setDescription('This attribute indicates the upper frequency where the minislots will use the pilot pattern and modulation')
docsIf31CmtsUsOfdmaDataIucDetailStatusMinislotPilotPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 25, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmtsUsOfdmaDataIucDetailStatusMinislotPilotPattern.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsUsOfdmaDataIucDetailStatusMinislotPilotPattern.setDescription('This attribute contains the identifier for the pilot pattern this frequency range. All minislots in the frequency range have this pilot pattern. The valid range is 1 - 14.')
docsIf31CmtsUsOfdmaDataIucDetailStatusMinislotModulation = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 25, 1, 4), UsOfdmaModulationType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmtsUsOfdmaDataIucDetailStatusMinislotModulation.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsUsOfdmaDataIucDetailStatusMinislotModulation.setDescription('This attribute contains the modulation order for this frequency range. All minislots in the frequency range have this modulation.')
docsIf31CmtsUsOfdmaRangingIucStatusTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 26), )
if mibBuilder.loadTexts: docsIf31CmtsUsOfdmaRangingIucStatusTable.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsUsOfdmaRangingIucStatusTable.setDescription('This CMTS table provides details on status of ranging IUCs.')
docsIf31CmtsUsOfdmaRangingIucStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 26, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-IF31-MIB", "docsIf31CmtsUsOfdmaRangingIucStatusIuc"))
if mibBuilder.loadTexts: docsIf31CmtsUsOfdmaRangingIucStatusEntry.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsUsOfdmaRangingIucStatusEntry.setDescription('The conceptual row of docsIf31CmtsUsOfdmaRangingIucStatusTable. An instance exists for each Ranging IUC profile on a given US OFDMA channel.')
docsIf31CmtsUsOfdmaRangingIucStatusIuc = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 26, 1, 1), Unsigned32())
if mibBuilder.loadTexts: docsIf31CmtsUsOfdmaRangingIucStatusIuc.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsUsOfdmaRangingIucStatusIuc.setDescription('This attribute indicates the OFDMA Ranging IUC that this status information corresponds to.')
docsIf31CmtsUsOfdmaRangingIucStatusGuardband = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 26, 1, 2), Unsigned32()).setUnits('Hz').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmtsUsOfdmaRangingIucStatusGuardband.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsUsOfdmaRangingIucStatusGuardband.setDescription('This attribute is the sum of the upper and lower guard bands for this ranging IUC in Hz. ')
docsIf31CmtsUsOfdmaRangingIucStatusNumSubcarriers = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 26, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmtsUsOfdmaRangingIucStatusNumSubcarriers.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsUsOfdmaRangingIucStatusNumSubcarriers.setDescription('This attribute indicates the maximum number of subcarriers for this ranging IUC.')
docsIf31CmtsDsOfdmSubcarrierTypeTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 27), )
if mibBuilder.loadTexts: docsIf31CmtsDsOfdmSubcarrierTypeTable.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsDsOfdmSubcarrierTypeTable.setDescription('This object specifies the subcarrier type for a group of subcarriers in the active spectrum of this OFDM channel. Groups of subcarriers of the same type are presented together; non-data subcarriers in these ranges are ignored.')
docsIf31CmtsDsOfdmSubcarrierTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 27, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-IF31-MIB", "docsIf31CmtsDsOfdmSubcarrierTypeStartSubcarrierId"))
if mibBuilder.loadTexts: docsIf31CmtsDsOfdmSubcarrierTypeEntry.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsDsOfdmSubcarrierTypeEntry.setDescription('The conceptual row of docsIf31CmtsDsOfdmSubcarrierTypeTable. An instance exists for each OFDM downstream channel.')
docsIf31CmtsDsOfdmSubcarrierTypeStartSubcarrierId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 27, 1, 1), Unsigned32())
if mibBuilder.loadTexts: docsIf31CmtsDsOfdmSubcarrierTypeStartSubcarrierId.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsDsOfdmSubcarrierTypeStartSubcarrierId.setDescription('This attribute is a key defined to provide an index into the table and represents the subcarrier number of the first subcarrier in the group. ')
docsIf31CmtsDsOfdmSubcarrierTypeEndSubcarrierId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 27, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmtsDsOfdmSubcarrierTypeEndSubcarrierId.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsDsOfdmSubcarrierTypeEndSubcarrierId.setDescription('This attribute is the subcarrier number of the last subcarrier in the group. ')
docsIf31CmtsDsOfdmSubcarrierTypeSubcarrierType = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 27, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("data", 1), ("plc", 2), ("continuousPilot", 3), ("excluded", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmtsDsOfdmSubcarrierTypeSubcarrierType.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsDsOfdmSubcarrierTypeSubcarrierType.setDescription('This attribute specifies which type of subcarrier is represented in this group.')
docsIf31CmtsUsOfdmaSubcarrierTypeTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 28), )
if mibBuilder.loadTexts: docsIf31CmtsUsOfdmaSubcarrierTypeTable.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsUsOfdmaSubcarrierTypeTable.setDescription('This object specifies the subcarrier type for a group of subcarriers in the active spectrum of this OFDMA channel. Groups of subcarriers of the same type are presented together; non-data subcarriers in these ranges are ignored.')
docsIf31CmtsUsOfdmaSubcarrierTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 28, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-IF31-MIB", "docsIf31CmtsUsOfdmaSubcarrierTypeStartSubcarrierId"))
if mibBuilder.loadTexts: docsIf31CmtsUsOfdmaSubcarrierTypeEntry.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsUsOfdmaSubcarrierTypeEntry.setDescription('The conceptual row of docsIf31CmtsUsOfdmaSubcarrierStatusTable. An instance exists for each Profile on a given OFDMA upstream.')
docsIf31CmtsUsOfdmaSubcarrierTypeStartSubcarrierId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 28, 1, 1), Unsigned32())
if mibBuilder.loadTexts: docsIf31CmtsUsOfdmaSubcarrierTypeStartSubcarrierId.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsUsOfdmaSubcarrierTypeStartSubcarrierId.setDescription('This attribute is a key defined to provide an index into the table and represents the subcarrier number of the first subcarrier in the group. ')
docsIf31CmtsUsOfdmaSubcarrierTypeEndSubcarrierId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 28, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmtsUsOfdmaSubcarrierTypeEndSubcarrierId.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsUsOfdmaSubcarrierTypeEndSubcarrierId.setDescription('This attribute is the subcarrier number of the last subcarrier in the group. ')
docsIf31CmtsUsOfdmaSubcarrierTypeSubcarrierType = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 28, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("data", 1), ("excluded", 2), ("unused", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmtsUsOfdmaSubcarrierTypeSubcarrierType.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsUsOfdmaSubcarrierTypeSubcarrierType.setDescription('This attribute specifies which type of subcarrier is represented in this group.')
docsIf31CmStatusTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 29), )
if mibBuilder.loadTexts: docsIf31CmStatusTable.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmStatusTable.setDescription('This object defines attributes of the CM status. This object is an extension to the SNMP table docsIf3CmStatusTable.')
docsIf31CmStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 29, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: docsIf31CmStatusEntry.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmStatusEntry.setDescription('The conceptual row of docsIf31CmStatusTable. An instance exist for the CM MAC Domain Interface.')
docsIf31CmStatusEmDlsOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 29, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmStatusEmDlsOperStatus.setReference('DOCSIS 3.1 MAC and Upper Layer Protocols Interface Specification CM-SP-MULPIv3.1-I08-151210, Energy Management Mode Indicator section.')
if mibBuilder.loadTexts: docsIf31CmStatusEmDlsOperStatus.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmStatusEmDlsOperStatus.setDescription('This attribute indicates whether the CM is currently operating in Energy Management DLS Mode. If this attribute returns true, the CM is operating in Energy Management DLS Mode.')
docsIf31CmEmDlsCfgTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 30), )
if mibBuilder.loadTexts: docsIf31CmEmDlsCfgTable.setReference('DOCSIS 3.1 MAC and Upper Layer Protocols Interface Specification CM-SP-MULPIv3.1-I08-151210, Energy Management DLS Encodings section.')
if mibBuilder.loadTexts: docsIf31CmEmDlsCfgTable.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmEmDlsCfgTable.setDescription('This object provides configuration state information on the CM for the Energy Management 1x1 Mode feature.')
docsIf31CmEmDlsCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 30, 1), ).setIndexNames((0, "DOCS-IF31-MIB", "docsIf31CmEmDlsCfgDirection"))
if mibBuilder.loadTexts: docsIf31CmEmDlsCfgEntry.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmEmDlsCfgEntry.setDescription('The conceptual row of docsIf31CmEmDlsCfgTable.')
docsIf31CmEmDlsCfgDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 30, 1, 1), IfDirection())
if mibBuilder.loadTexts: docsIf31CmEmDlsCfgDirection.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmEmDlsCfgDirection.setDescription('This index indicates whether the threshold applies to the upstream or downstream.')
docsIf31CmEmDlsCfgEntryBitrateThrshld = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 30, 1, 2), Unsigned32()).setUnits('bps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsIf31CmEmDlsCfgEntryBitrateThrshld.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmEmDlsCfgEntryBitrateThrshld.setDescription('This attribute specifies the upstream or downstream bitrate threshold (in bps) below which the CM will request to enter Energy Management DLS Mode operation.')
docsIf31CmEmDlsCfgEntryTimeThrshld = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 30, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsIf31CmEmDlsCfgEntryTimeThrshld.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmEmDlsCfgEntryTimeThrshld.setDescription('This attribute specifies the number of consecutive seconds that the upstream or downstream data rate needs to remain below the Upstream or Downstream Entry Bitrate Threshold in order to determine that a transition to Energy Management DLS Mode is required.')
docsIf31CmEmDlsCfgExitBitrateThrshld = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 30, 1, 4), Unsigned32()).setUnits('bps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsIf31CmEmDlsCfgExitBitrateThrshld.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmEmDlsCfgExitBitrateThrshld.setDescription('This attribute specifies the upstream or downstream bitrate threshold (in bps) above which the CM will request to leave Energy Management DLS Mode operation.')
docsIf31CmEmDlsCfgExitTimeThrshld = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 30, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsIf31CmEmDlsCfgExitTimeThrshld.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmEmDlsCfgExitTimeThrshld.setDescription('This attribute specifies the number of consecutive seconds that the upstream or downstream data rate needs to remain above the Upstream or Downstream Exit Bitrate Threshold in order to determine that a transition out of Energy Management DLS Mode is required.')
docsIf31CmUsScQamChanTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 31), )
if mibBuilder.loadTexts: docsIf31CmUsScQamChanTable.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmUsScQamChanTable.setDescription("This table describes the attributes of attached upstream SC-QAM channels for the CM. This extends the DOCS-IF-MIB's docsIfUpstreamChannelTable.")
docsIf31CmUsScQamChanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 31, 1), )
docsIfUpstreamChannelEntry.registerAugmentions(("DOCS-IF31-MIB", "docsIf31CmUsScQamChanEntry"))
docsIf31CmUsScQamChanEntry.setIndexNames(*docsIfUpstreamChannelEntry.getIndexNames())
if mibBuilder.loadTexts: docsIf31CmUsScQamChanEntry.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmUsScQamChanEntry.setDescription('The conceptual row of docsIf31CmUsScQamChanTable. For DOCSIS 3.1 CMs, an entry in this table exists for each ifEntry with an ifType of docsCableUpstream (129).')
docsIf31CmUsScQamChanTxPsd = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 1, 31, 1, 1), Unsigned32()).setUnits('QuarterdBmV').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf31CmUsScQamChanTxPsd.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmUsScQamChanTxPsd.setDescription('This attribute represents P1.6r_n, the power spectral density in 1.6 MHz, for the associated SC-QAM upstream channel.')
docsIf31MibConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 2))
docsIf31MibCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 2, 1))
docsIf31MibGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 2, 2))
docsIf31CmtsCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 2, 1, 1)).setObjects(("DOCS-IF31-MIB", "docsIf31CmtsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsIf31CmtsCompliance = docsIf31CmtsCompliance.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsCompliance.setDescription('The compliance statement for the CMTS.')
docsIf31CmCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 2, 1, 2)).setObjects(("DOCS-IF31-MIB", "docsIf31CmGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsIf31CmCompliance = docsIf31CmCompliance.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmCompliance.setDescription('The compliance statement for the CM.')
docsIf31CmtsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 2, 2, 1)).setObjects(("DOCS-IF31-MIB", "docsIf31DocsisBaseCapability"), ("DOCS-IF31-MIB", "docsIf31RxChStatusPrimaryDsIndicator"), ("DOCS-IF31-MIB", "docsIf31RxChStatusOfdmProfiles"), ("DOCS-IF31-MIB", "docsIf31CmtsCmRegStatusAssignedEmIds"), ("DOCS-IF31-MIB", "docsIf31CmtsCmRegStatusDsProfileIdList"), ("DOCS-IF31-MIB", "docsIf31CmtsCmRegStatusUsProfileIucList"), ("DOCS-IF31-MIB", "docsIf31CmtsCmRegStatusTcsPhigh"), ("DOCS-IF31-MIB", "docsIf31CmtsCmRegStatusTcsDrwTop"), ("DOCS-IF31-MIB", "docsIf31CmtsCmRegStatusMinUsableDsFreq"), ("DOCS-IF31-MIB", "docsIf31CmtsCmRegStatusMaxUsableDsFreq"), ("DOCS-IF31-MIB", "docsIf31CmtsCmRegStatusMaxUsableUsFreq"), ("DOCS-IF31-MIB", "docsIf31CmtsCmRegStatusPartialSvcState"), ("DOCS-IF31-MIB", "docsIf31CmtsCmRegStatusPartialChanState"), ("DOCS-IF31-MIB", "docsIf31CmtsCmUsOfdmaChannelRxPower"), ("DOCS-IF31-MIB", "docsIf31CmtsCmUsOfdmaChannelMeanRxMer"), ("DOCS-IF31-MIB", "docsIf31CmtsCmUsOfdmaChannelStdDevRxMer"), ("DOCS-IF31-MIB", "docsIf31CmtsCmUsOfdmaChannelRxMerThreshold"), ("DOCS-IF31-MIB", "docsIf31CmtsCmUsOfdmaChannelThresholdRxMerValue"), ("DOCS-IF31-MIB", "docsIf31CmtsCmUsOfdmaChannelThresholdRxMerHighestFreq"), ("DOCS-IF31-MIB", "docsIf31CmtsCmUsOfdmaChannelMicroreflections"), ("DOCS-IF31-MIB", "docsIf31CmtsCmUsOfdmaChannelHighResolutionTimingOffset"), ("DOCS-IF31-MIB", "docsIf31CmtsCmUsOfdmaChannelIsMuted"), ("DOCS-IF31-MIB", "docsIf31CmtsCmUsOfdmaChannelRangingStatus"), ("DOCS-IF31-MIB", "docsIf31CmtsCmUsOfdmaChannelCurPartialSvcReasonCode"), ("DOCS-IF31-MIB", "docsIf31CmtsCmUsOfdmaChannelLastPartialSvcTime"), ("DOCS-IF31-MIB", "docsIf31CmtsCmUsOfdmaChannelLastPartialSvcReasonCode"), ("DOCS-IF31-MIB", "docsIf31CmtsCmUsOfdmaChannelNumPartialSvcIncidents"), ("DOCS-IF31-MIB", "docsIf31CmtsCmUsOfdmaProfileTotalCodewords"), ("DOCS-IF31-MIB", "docsIf31CmtsCmUsOfdmaProfileCorrectedCodewords"), ("DOCS-IF31-MIB", "docsIf31CmtsCmUsOfdmaProfileUnreliableCodewords"), ("DOCS-IF31-MIB", "docsIf31CmtsCmDsOfdmChannelCurPartialSvcReasonCode"), ("DOCS-IF31-MIB", "docsIf31CmtsCmDsOfdmChannelLastPartialSvcTime"), ("DOCS-IF31-MIB", "docsIf31CmtsCmDsOfdmChannelLastPartialSvcReasonCode"), ("DOCS-IF31-MIB", "docsIf31CmtsCmDsOfdmChannelNumPartialSvcIncidents"), ("DOCS-IF31-MIB", "docsIf31CmtsCmDsOfdmChannelNumPartialChanIncidents"), ("DOCS-IF31-MIB", "docsIf31CmtsCmDsOfdmProfilePartialChanReasonCode"), ("DOCS-IF31-MIB", "docsIf31CmtsCmDsOfdmProfileLastPartialChanTime"), ("DOCS-IF31-MIB", "docsIf31CmtsCmDsOfdmProfileLastPartialChanReasonCode"), ("DOCS-IF31-MIB", "docsIf31CmtsCmEmStatsEm1x1ModeTotalDuration"), ("DOCS-IF31-MIB", "docsIf31CmtsCmEmStatsDlsModeTotalDuration"), ("DOCS-IF31-MIB", "docsIf31CmtsCmEmStatsLastDlsTime"), ("DOCS-IF31-MIB", "docsIf31CmtsCmEmStatsDlsWakeupEvents"), ("DOCS-IF31-MIB", "docsIf31CmtsDsOfdmChanChannelId"), ("DOCS-IF31-MIB", "docsIf31CmtsDsOfdmChanLowerBdryFreq"), ("DOCS-IF31-MIB", "docsIf31CmtsDsOfdmChanUpperBdryFreq"), ("DOCS-IF31-MIB", "docsIf31CmtsDsOfdmChanLowerBdryEncompSpectrum"), ("DOCS-IF31-MIB", "docsIf31CmtsDsOfdmChanUpperBdryEncompSpectrum"), ("DOCS-IF31-MIB", "docsIf31CmtsDsOfdmChanPlcFreq"), ("DOCS-IF31-MIB", "docsIf31CmtsDsOfdmChanSubcarrierZeroFreq"), ("DOCS-IF31-MIB", "docsIf31CmtsDsOfdmChanFirstActiveSubcarrierNum"), ("DOCS-IF31-MIB", "docsIf31CmtsDsOfdmChanLastActiveSubcarrierNum"), ("DOCS-IF31-MIB", "docsIf31CmtsDsOfdmChanNumActiveSubcarriers"), ("DOCS-IF31-MIB", "docsIf31CmtsDsOfdmChanSubcarrierSpacing"), ("DOCS-IF31-MIB", "docsIf31CmtsDsOfdmChanLowerGuardbandWidth"), ("DOCS-IF31-MIB", "docsIf31CmtsDsOfdmChanUpperGuardbandWidth"), ("DOCS-IF31-MIB", "docsIf31CmtsDsOfdmChanCyclicPrefix"), ("DOCS-IF31-MIB", "docsIf31CmtsDsOfdmChanRollOffPeriod"), ("DOCS-IF31-MIB", "docsIf31CmtsDsOfdmChanTimeInterleaverDepth"), ("DOCS-IF31-MIB", "docsIf31CmtsDsOfdmChanNumPilots"), ("DOCS-IF31-MIB", "docsIf31CmtsDsOfdmChanPilotScaleFactor"), ("DOCS-IF31-MIB", "docsIf31CmtsDsOfdmChanNcpModulation"), ("DOCS-IF31-MIB", "docsIf31CmtsDsOfdmChanUtilization"), ("DOCS-IF31-MIB", "docsIf31CmtsDsOfdmProfileStatsConfigChangeCt"), ("DOCS-IF31-MIB", "docsIf31CmtsDsOfdmProfileStatsFullChannelSpeed"), ("DOCS-IF31-MIB", "docsIf31CmtsDsOfdmProfileStatsOutOctets"), ("DOCS-IF31-MIB", "docsIf31CmtsDsOfdmProfileStatsOutUnicastOctets"), ("DOCS-IF31-MIB", "docsIf31CmtsDsOfdmProfileStatsOutMulticastOctets"), ("DOCS-IF31-MIB", "docsIf31CmtsDsOfdmProfileStatsOutFrames"), ("DOCS-IF31-MIB", "docsIf31CmtsDsOfdmProfileStatsOutUnicastFrames"), ("DOCS-IF31-MIB", "docsIf31CmtsDsOfdmProfileStatsOutMulticastFrames"), ("DOCS-IF31-MIB", "docsIf31CmtsDsOfdmProfileStatsCtrDiscontinuityTime"), ("DOCS-IF31-MIB", "docsIf31CmtsDsOfdmProfileStatsAssignedCmCt"), ("DOCS-IF31-MIB", "docsIf31CmtsDsOfdmSubcarrierStatusEndId"), ("DOCS-IF31-MIB", "docsIf31CmtsDsOfdmSubcarrierStatusMainModulation"), ("DOCS-IF31-MIB", "docsIf31CmtsDsOfdmSubcarrierStatusSkip"), ("DOCS-IF31-MIB", "docsIf31CmtsDsOfdmSubcarrierStatusSkipModulation"), ("DOCS-IF31-MIB", "docsIf31CmtsDsOfdmChanPowerCenterFrequency"), ("DOCS-IF31-MIB", "docsIf31CmtsDsOfdmChanPowerTxPower"), ("DOCS-IF31-MIB", "docsIf31CmtsUsOfdmaChanTemplateIndex"), ("DOCS-IF31-MIB", "docsIf31CmtsUsOfdmaChanConfigChangeCt"), ("DOCS-IF31-MIB", "docsIf31CmtsUsOfdmaChanTargetRxPower"), ("DOCS-IF31-MIB", "docsIf31CmtsUsOfdmaChanLowerBdryFreq"), ("DOCS-IF31-MIB", "docsIf31CmtsUsOfdmaChanUpperBdryFreq"), ("DOCS-IF31-MIB", "docsIf31CmtsUsOfdmaChanSubcarrierSpacing"), ("DOCS-IF31-MIB", "docsIf31CmtsUsOfdmaChanCyclicPrefix"), ("DOCS-IF31-MIB", "docsIf31CmtsUsOfdmaChanNumSymbolsPerFrame"), ("DOCS-IF31-MIB", "docsIf31CmtsUsOfdmaChanRollOffPeriod"), ("DOCS-IF31-MIB", "docsIf31CmtsUsOfdmaChanPreEqEnable"), ("DOCS-IF31-MIB", "docsIf31CmtsUsOfdmaChanFineRngGuardband"), ("DOCS-IF31-MIB", "docsIf31CmtsUsOfdmaChanFineRngNumSubcarriers"), ("DOCS-IF31-MIB", "docsIf31CmtsUsOfdmaChanFineRngPreambleLen"), ("DOCS-IF31-MIB", "docsIf31CmtsUsOfdmaChanInitRngGuardband"), ("DOCS-IF31-MIB", "docsIf31CmtsUsOfdmaChanInitRngNumSubcarriers"), ("DOCS-IF31-MIB", "docsIf31CmtsUsOfdmaChanInitRngPreambleLen"), ("DOCS-IF31-MIB", "docsIf31CmtsUsOfdmaChanProvAttribMask"), ("DOCS-IF31-MIB", "docsIf31CmtsUsOfdmaChanTxBackoffStart"), ("DOCS-IF31-MIB", "docsIf31CmtsUsOfdmaChanTxBackoffEnd"), ("DOCS-IF31-MIB", "docsIf31CmtsUsOfdmaChanRangingBackoffStart"), ("DOCS-IF31-MIB", "docsIf31CmtsUsOfdmaChanRangingBackoffEnd"), ("DOCS-IF31-MIB", "docsIf31CmtsUsOfdmaChanUtilization"), ("DOCS-IF31-MIB", "docsIf31CmtsUsOfdmaChanId"), ("DOCS-IF31-MIB", "docsIf31CmtsUsOfdmaDataIucStatsMinislotPilotPattern"), ("DOCS-IF31-MIB", "docsIf31CmtsUsOfdmaDataIucStatsMinislotModulation"), ("DOCS-IF31-MIB", "docsIf31CmtsUsOfdmaDataIucStatsTotalCodewords"), ("DOCS-IF31-MIB", "docsIf31CmtsUsOfdmaDataIucStatsCorrectedCodewords"), ("DOCS-IF31-MIB", "docsIf31CmtsUsOfdmaDataIucStatsUnreliableCodewords"), ("DOCS-IF31-MIB", "docsIf31CmtsUsOfdmaDataIucStatsInOctets"), ("DOCS-IF31-MIB", "docsIf31CmtsUsOfdmaDataIucStatsCtrDiscontinuityTime"), ("DOCS-IF31-MIB", "docsIf31CmtsUsOfdmaDataIucStatsAssignedCmCt"), ("DOCS-IF31-MIB", "docsIf31CmtsUsOfdmaDataIucDetailStatusUpperFreq"), ("DOCS-IF31-MIB", "docsIf31CmtsUsOfdmaDataIucDetailStatusMinislotPilotPattern"), ("DOCS-IF31-MIB", "docsIf31CmtsUsOfdmaDataIucDetailStatusMinislotModulation"), ("DOCS-IF31-MIB", "docsIf31CmtsUsOfdmaRangingIucStatusGuardband"), ("DOCS-IF31-MIB", "docsIf31CmtsUsOfdmaRangingIucStatusNumSubcarriers"), ("DOCS-IF31-MIB", "docsIf31CmtsDsOfdmSubcarrierTypeEndSubcarrierId"), ("DOCS-IF31-MIB", "docsIf31CmtsDsOfdmSubcarrierTypeSubcarrierType"), ("DOCS-IF31-MIB", "docsIf31CmtsUsOfdmaSubcarrierTypeEndSubcarrierId"), ("DOCS-IF31-MIB", "docsIf31CmtsUsOfdmaSubcarrierTypeSubcarrierType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsIf31CmtsGroup = docsIf31CmtsGroup.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmtsGroup.setDescription('Group of objects implemented in a DOCSIS 3.1 CMTS')
docsIf31CmGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4491, 2, 1, 28, 2, 2, 2)).setObjects(("DOCS-IF31-MIB", "docsIf31DocsisBaseCapability"), ("DOCS-IF31-MIB", "docsIf31CmDsOfdmChanChannelId"), ("DOCS-IF31-MIB", "docsIf31CmDsOfdmChanChanIndicator"), ("DOCS-IF31-MIB", "docsIf31CmDsOfdmChanSubcarrierZeroFreq"), ("DOCS-IF31-MIB", "docsIf31CmDsOfdmChanFirstActiveSubcarrierNum"), ("DOCS-IF31-MIB", "docsIf31CmDsOfdmChanLastActiveSubcarrierNum"), ("DOCS-IF31-MIB", "docsIf31CmDsOfdmChanNumActiveSubcarriers"), ("DOCS-IF31-MIB", "docsIf31CmDsOfdmChanSubcarrierSpacing"), ("DOCS-IF31-MIB", "docsIf31CmDsOfdmChanCyclicPrefix"), ("DOCS-IF31-MIB", "docsIf31CmDsOfdmChanRollOffPeriod"), ("DOCS-IF31-MIB", "docsIf31CmDsOfdmChanPlcFreq"), ("DOCS-IF31-MIB", "docsIf31CmDsOfdmChanNumPilots"), ("DOCS-IF31-MIB", "docsIf31CmDsOfdmChanTimeInterleaverDepth"), ("DOCS-IF31-MIB", "docsIf31CmDsOfdmChanPlcTotalCodewords"), ("DOCS-IF31-MIB", "docsIf31CmDsOfdmChanPlcUnreliableCodewords"), ("DOCS-IF31-MIB", "docsIf31CmDsOfdmChanNcpTotalFields"), ("DOCS-IF31-MIB", "docsIf31CmDsOfdmChanNcpFieldCrcFailures"), ("DOCS-IF31-MIB", "docsIf31CmEmDlsStatsNumberTimesCrossedBelowUsEntryThrshlds"), ("DOCS-IF31-MIB", "docsIf31CmEmDlsStatsNumberTimesCrossedBelowDsEntryThrshlds"), ("DOCS-IF31-MIB", "docsIf31CmEmDlsStatsTotalDuration"), ("DOCS-IF31-MIB", "docsIf31CmEmDlsStatsTotalDurationBelowUsThrshlds"), ("DOCS-IF31-MIB", "docsIf31CmEmDlsStatsTotalDurationBelowDsThrshlds"), ("DOCS-IF31-MIB", "docsIf31CmEmDlsStatsTotalDurationBelowUsDsThrshlds"), ("DOCS-IF31-MIB", "docsIf31CmEmDlsStatsNumSleepLatencyTriggers"), ("DOCS-IF31-MIB", "docsIf31CmEmDlsStatsNumSleepByteCtTriggers"), ("DOCS-IF31-MIB", "docsIf31CmEmDlsStatusAssignedEmIds"), ("DOCS-IF31-MIB", "docsIf31CmEmDlsStatusReceiveTimer"), ("DOCS-IF31-MIB", "docsIf31CmEmDlsStatusMaxSleepLatency"), ("DOCS-IF31-MIB", "docsIf31CmEmDlsStatusMaxSleepBytes"), ("DOCS-IF31-MIB", "docsIf31CmSystemCfgStateDiplexerCapability"), ("DOCS-IF31-MIB", "docsIf31CmSystemCfgStateDiplexerCfgBandEdge"), ("DOCS-IF31-MIB", "docsIf31CmSystemCfgStateDiplexerDsLowerCapability"), ("DOCS-IF31-MIB", "docsIf31CmSystemCfgStateDiplexerCfgDsLowerBandEdge"), ("DOCS-IF31-MIB", "docsIf31CmSystemCfgStateDiplexerDsUpperCapability"), ("DOCS-IF31-MIB", "docsIf31CmSystemCfgStateDiplexerCfgDsUpperBandEdge"), ("DOCS-IF31-MIB", "docsIf31CmDsOfdmProfileStatsConfigChangeCt"), ("DOCS-IF31-MIB", "docsIf31CmDsOfdmProfileStatsTotalCodewords"), ("DOCS-IF31-MIB", "docsIf31CmDsOfdmProfileStatsCorrectedCodewords"), ("DOCS-IF31-MIB", "docsIf31CmDsOfdmProfileStatsUncorrectableCodewords"), ("DOCS-IF31-MIB", "docsIf31CmDsOfdmProfileStatsInOctets"), ("DOCS-IF31-MIB", "docsIf31CmDsOfdmProfileStatsInUnicastOctets"), ("DOCS-IF31-MIB", "docsIf31CmDsOfdmProfileStatsInMulticastOctets"), ("DOCS-IF31-MIB", "docsIf31CmDsOfdmProfileStatsInFrames"), ("DOCS-IF31-MIB", "docsIf31CmDsOfdmProfileStatsInUnicastFrames"), ("DOCS-IF31-MIB", "docsIf31CmDsOfdmProfileStatsInMulticastFrames"), ("DOCS-IF31-MIB", "docsIf31CmDsOfdmProfileStatsInFrameCrcFailures"), ("DOCS-IF31-MIB", "docsIf31CmDsOfdmProfileStatsCtrDiscontinuityTime"), ("DOCS-IF31-MIB", "docsIf31CmDsOfdmChannelPowerCenterFrequency"), ("DOCS-IF31-MIB", "docsIf31CmDsOfdmChannelPowerRxPower"), ("DOCS-IF31-MIB", "docsIf31CmStatusOfdmaUsT3Timeouts"), ("DOCS-IF31-MIB", "docsIf31CmStatusOfdmaUsT4Timeouts"), ("DOCS-IF31-MIB", "docsIf31CmStatusOfdmaUsRangingAborteds"), ("DOCS-IF31-MIB", "docsIf31CmStatusOfdmaUsT3Exceededs"), ("DOCS-IF31-MIB", "docsIf31CmStatusOfdmaUsIsMuted"), ("DOCS-IF31-MIB", "docsIf31CmStatusOfdmaUsRangingStatus"), ("DOCS-IF31-MIB", "docsIf31CmUsOfdmaChanConfigChangeCt"), ("DOCS-IF31-MIB", "docsIf31CmUsOfdmaChanSubcarrierZeroFreq"), ("DOCS-IF31-MIB", "docsIf31CmUsOfdmaChanFirstActiveSubcarrierNum"), ("DOCS-IF31-MIB", "docsIf31CmUsOfdmaChanLastActiveSubcarrierNum"), ("DOCS-IF31-MIB", "docsIf31CmUsOfdmaChanNumActiveSubcarriers"), ("DOCS-IF31-MIB", "docsIf31CmUsOfdmaChanSubcarrierSpacing"), ("DOCS-IF31-MIB", "docsIf31CmUsOfdmaChanCyclicPrefix"), ("DOCS-IF31-MIB", "docsIf31CmUsOfdmaChanRollOffPeriod"), ("DOCS-IF31-MIB", "docsIf31CmUsOfdmaChanNumSymbolsPerFrame"), ("DOCS-IF31-MIB", "docsIf31CmUsOfdmaChanTxPower"), ("DOCS-IF31-MIB", "docsIf31CmUsOfdmaChanPreEqEnabled"), ("DOCS-IF31-MIB", "docsIf31CmUsOfdmaChanChannelId"), ("DOCS-IF31-MIB", "docsIf31CmUsOfdmaProfileStatsOutOctets"), ("DOCS-IF31-MIB", "docsIf31CmUsOfdmaProfileStatsCtrDiscontinuityTime"), ("DOCS-IF31-MIB", "docsIf31CmUsOfdmaMinislotCfgStateFirstSubcarrierId"), ("DOCS-IF31-MIB", "docsIf31CmUsOfdmaMinislotCfgStateNumConsecutiveMinislots"), ("DOCS-IF31-MIB", "docsIf31CmUsOfdmaMinislotCfgStateMinislotPilotPattern"), ("DOCS-IF31-MIB", "docsIf31CmUsOfdmaMinislotCfgStateDataSymbolModulation"), ("DOCS-IF31-MIB", "docsIf31CmStatusEmDlsOperStatus"), ("DOCS-IF31-MIB", "docsIf31CmEmDlsCfgExitBitrateThrshld"), ("DOCS-IF31-MIB", "docsIf31CmEmDlsCfgEntryTimeThrshld"), ("DOCS-IF31-MIB", "docsIf31CmEmDlsCfgEntryBitrateThrshld"), ("DOCS-IF31-MIB", "docsIf31CmEmDlsCfgExitTimeThrshld"), ("DOCS-IF31-MIB", "docsIf31CmUsScQamChanTxPsd"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsIf31CmGroup = docsIf31CmGroup.setStatus('current')
if mibBuilder.loadTexts: docsIf31CmGroup.setDescription('Group of objects implemented in a DOCSIS 3.1 CM')
mibBuilder.exportSymbols("DOCS-IF31-MIB", docsIf31CmEmDlsStatsTotalDurationBelowUsDsThrshlds=docsIf31CmEmDlsStatsTotalDurationBelowUsDsThrshlds, docsIf31CmtsCmRegStatusMaxUsableUsFreq=docsIf31CmtsCmRegStatusMaxUsableUsFreq, docsIf31CmDsOfdmChannelBandIndex=docsIf31CmDsOfdmChannelBandIndex, docsIf31CmSystemCfgStateDiplexerDsUpperCapability=docsIf31CmSystemCfgStateDiplexerDsUpperCapability, docsIf31CmtsDsOfdmChanPowerCenterFrequency=docsIf31CmtsDsOfdmChanPowerCenterFrequency, docsIf31CmDsOfdmChanTable=docsIf31CmDsOfdmChanTable, docsIf31CmtsCmRegStatusMaxUsableDsFreq=docsIf31CmtsCmRegStatusMaxUsableDsFreq, docsIf31CmUsOfdmaChanNumSymbolsPerFrame=docsIf31CmUsOfdmaChanNumSymbolsPerFrame, docsIf31CmtsUsOfdmaChanConfigChangeCt=docsIf31CmtsUsOfdmaChanConfigChangeCt, docsIf31CmtsUsOfdmaChanTxBackoffStart=docsIf31CmtsUsOfdmaChanTxBackoffStart, PYSNMP_MODULE_ID=docsIf31Mib, docsIf31CmtsDsOfdmSubcarrierStatusStartId=docsIf31CmtsDsOfdmSubcarrierStatusStartId, docsIf31MibCompliances=docsIf31MibCompliances, docsIf31CmUsOfdmaProfileStatsOutOctets=docsIf31CmUsOfdmaProfileStatsOutOctets, docsIf31CmtsDsOfdmProfileStatsOutMulticastFrames=docsIf31CmtsDsOfdmProfileStatsOutMulticastFrames, docsIf31CmUsOfdmaMinislotCfgStateStartMinislotNum=docsIf31CmUsOfdmaMinislotCfgStateStartMinislotNum, docsIf31CmtsUsOfdmaChanInitRngGuardband=docsIf31CmtsUsOfdmaChanInitRngGuardband, docsIf31CmtsDsOfdmChanCyclicPrefix=docsIf31CmtsDsOfdmChanCyclicPrefix, docsIf31CmtsDsOfdmProfileStatsOutOctets=docsIf31CmtsDsOfdmProfileStatsOutOctets, PartialServiceType=PartialServiceType, docsIf31CmtsCmRegStatusDsProfileIdList=docsIf31CmtsCmRegStatusDsProfileIdList, docsIf31CmUsOfdmaChanTable=docsIf31CmUsOfdmaChanTable, docsIf31CmtsCmUsOfdmaProfileCorrectedCodewords=docsIf31CmtsCmUsOfdmaProfileCorrectedCodewords, docsIf31CmUsOfdmaChanConfigChangeCt=docsIf31CmUsOfdmaChanConfigChangeCt, docsIf31CmtsDsOfdmChanFirstActiveSubcarrierNum=docsIf31CmtsDsOfdmChanFirstActiveSubcarrierNum, docsIf31CmtsCmDsOfdmChannelCurPartialSvcReasonCode=docsIf31CmtsCmDsOfdmChannelCurPartialSvcReasonCode, docsIf31CmEmDlsStatusTable=docsIf31CmEmDlsStatusTable, docsIf31CmtsDsOfdmSubcarrierStatusMainModulation=docsIf31CmtsDsOfdmSubcarrierStatusMainModulation, docsIf31CmSystemCfgStateDiplexerCfgDsUpperBandEdge=docsIf31CmSystemCfgStateDiplexerCfgDsUpperBandEdge, docsIf31CmtsUsOfdmaDataIucStatsMinislotModulation=docsIf31CmtsUsOfdmaDataIucStatsMinislotModulation, docsIf31CmtsUsOfdmaSubcarrierTypeSubcarrierType=docsIf31CmtsUsOfdmaSubcarrierTypeSubcarrierType, docsIf31CmStatusTable=docsIf31CmStatusTable, docsIf31CmEmDlsStatsEntry=docsIf31CmEmDlsStatsEntry, docsIf31CmtsCompliance=docsIf31CmtsCompliance, docsIf31CmtsCmUsOfdmaChannelRxMerThreshold=docsIf31CmtsCmUsOfdmaChannelRxMerThreshold, docsIf31CmDsOfdmChannelPowerCenterFrequency=docsIf31CmDsOfdmChannelPowerCenterFrequency, docsIf31CmEmDlsStatsNumberTimesCrossedBelowUsEntryThrshlds=docsIf31CmEmDlsStatsNumberTimesCrossedBelowUsEntryThrshlds, docsIf31CmtsCmUsOfdmaChannelRxPower=docsIf31CmtsCmUsOfdmaChannelRxPower, docsIf31CmSystemCfgStateDiplexerCfgBandEdge=docsIf31CmSystemCfgStateDiplexerCfgBandEdge, docsIf31CmtsDsOfdmProfileStatsFullChannelSpeed=docsIf31CmtsDsOfdmProfileStatsFullChannelSpeed, docsIf31CmtsCmUsOfdmaChannelMicroreflections=docsIf31CmtsCmUsOfdmaChannelMicroreflections, docsIf31CmtsDsOfdmChanUtilization=docsIf31CmtsDsOfdmChanUtilization, docsIf31CmtsDsOfdmChanPlcFreq=docsIf31CmtsDsOfdmChanPlcFreq, docsIf31CmtsDsOfdmChanSubcarrierSpacing=docsIf31CmtsDsOfdmChanSubcarrierSpacing, docsIf31CmEmDlsStatusMaxSleepLatency=docsIf31CmEmDlsStatusMaxSleepLatency, UsOfdmaModulationType=UsOfdmaModulationType, docsIf31CmDsOfdmChanNumActiveSubcarriers=docsIf31CmDsOfdmChanNumActiveSubcarriers, docsIf31CmtsDsOfdmChanNcpModulation=docsIf31CmtsDsOfdmChanNcpModulation, docsIf31CmtsUsOfdmaChanEntry=docsIf31CmtsUsOfdmaChanEntry, docsIf31CmtsUsOfdmaChanFineRngNumSubcarriers=docsIf31CmtsUsOfdmaChanFineRngNumSubcarriers, docsIf31CmDsOfdmChanPlcUnreliableCodewords=docsIf31CmDsOfdmChanPlcUnreliableCodewords, docsIf31CmtsUsOfdmaChanRollOffPeriod=docsIf31CmtsUsOfdmaChanRollOffPeriod, docsIf31CmtsDsOfdmSubcarrierStatusEndId=docsIf31CmtsDsOfdmSubcarrierStatusEndId, docsIf31CmtsCmRegStatusEntry=docsIf31CmtsCmRegStatusEntry, docsIf31CmtsCmUsOfdmaChannelIsMuted=docsIf31CmtsCmUsOfdmaChannelIsMuted, docsIf31CmtsCmDsOfdmChannelLastPartialSvcTime=docsIf31CmtsCmDsOfdmChannelLastPartialSvcTime, docsIf31CmtsUsOfdmaChanRangingBackoffStart=docsIf31CmtsUsOfdmaChanRangingBackoffStart, docsIf31CmDsOfdmChanPlcFreq=docsIf31CmDsOfdmChanPlcFreq, docsIf31CmtsDsOfdmProfileStatsTable=docsIf31CmtsDsOfdmProfileStatsTable, docsIf31CmEmDlsCfgExitBitrateThrshld=docsIf31CmEmDlsCfgExitBitrateThrshld, docsIf31CmUsOfdmaMinislotCfgStateMinislotPilotPattern=docsIf31CmUsOfdmaMinislotCfgStateMinislotPilotPattern, docsIf31CmtsCmDsOfdmProfileStatusEntry=docsIf31CmtsCmDsOfdmProfileStatusEntry, docsIf31CmtsCmUsOfdmaChannelRangingStatus=docsIf31CmtsCmUsOfdmaChannelRangingStatus, docsIf31RxChStatusTable=docsIf31RxChStatusTable, docsIf31CmGroup=docsIf31CmGroup, PartialChannelType=PartialChannelType, docsIf31CmtsCmDsOfdmChannelStatusEntry=docsIf31CmtsCmDsOfdmChannelStatusEntry, docsIf31CmtsCmEmStatsLastDlsTime=docsIf31CmtsCmEmStatsLastDlsTime, docsIf31CmtsDsOfdmProfileStatsOutFrames=docsIf31CmtsDsOfdmProfileStatsOutFrames, docsIf31CmtsUsOfdmaDataIucStatsUnreliableCodewords=docsIf31CmtsUsOfdmaDataIucStatsUnreliableCodewords, SubcarrierSpacingType=SubcarrierSpacingType, docsIf31CmDsOfdmChanFirstActiveSubcarrierNum=docsIf31CmDsOfdmChanFirstActiveSubcarrierNum, docsIf31CmtsUsOfdmaChanTxBackoffEnd=docsIf31CmtsUsOfdmaChanTxBackoffEnd, docsIf31CmDsOfdmChanSubcarrierZeroFreq=docsIf31CmDsOfdmChanSubcarrierZeroFreq, PrimaryDsIndicatorType=PrimaryDsIndicatorType, docsIf31CmtsDsOfdmChanNumPilots=docsIf31CmtsDsOfdmChanNumPilots, docsIf31CmtsUsOfdmaDataIucDetailStatusMinislotModulation=docsIf31CmtsUsOfdmaDataIucDetailStatusMinislotModulation, docsIf31CmtsDsOfdmProfileStatsOutUnicastOctets=docsIf31CmtsDsOfdmProfileStatsOutUnicastOctets, docsIf31CmtsCmUsOfdmaProfileTotalCodewords=docsIf31CmtsCmUsOfdmaProfileTotalCodewords, docsIf31CmtsDsOfdmSubcarrierStatusSkipModulation=docsIf31CmtsDsOfdmSubcarrierStatusSkipModulation, docsIf31CmEmDlsStatusMaxSleepBytes=docsIf31CmEmDlsStatusMaxSleepBytes, docsIf31CmEmDlsStatsTotalDuration=docsIf31CmEmDlsStatsTotalDuration, docsIf31CmDsOfdmProfileStatsCtrDiscontinuityTime=docsIf31CmDsOfdmProfileStatsCtrDiscontinuityTime, docsIf31CmtsDsOfdmChanLowerBdryFreq=docsIf31CmtsDsOfdmChanLowerBdryFreq, docsIf31CmtsDsOfdmProfileStatsOutUnicastFrames=docsIf31CmtsDsOfdmProfileStatsOutUnicastFrames, docsIf31CmtsDsOfdmProfileStatsAssignedCmCt=docsIf31CmtsDsOfdmProfileStatsAssignedCmCt, docsIf31MibObjects=docsIf31MibObjects, docsIf31CmEmDlsCfgDirection=docsIf31CmEmDlsCfgDirection, docsIf31CmtsUsOfdmaChanId=docsIf31CmtsUsOfdmaChanId, docsIf31CmUsOfdmaMinislotCfgStateNumConsecutiveMinislots=docsIf31CmUsOfdmaMinislotCfgStateNumConsecutiveMinislots, docsIf31CmtsDsOfdmSubcarrierStatusTable=docsIf31CmtsDsOfdmSubcarrierStatusTable, docsIf31CmtsUsOfdmaChanNumSymbolsPerFrame=docsIf31CmtsUsOfdmaChanNumSymbolsPerFrame, docsIf31CmtsUsOfdmaChanFineRngPreambleLen=docsIf31CmtsUsOfdmaChanFineRngPreambleLen, docsIf31CmEmDlsStatsNumberTimesCrossedBelowDsEntryThrshlds=docsIf31CmEmDlsStatsNumberTimesCrossedBelowDsEntryThrshlds, docsIf31CmtsDsOfdmChanEntry=docsIf31CmtsDsOfdmChanEntry, docsIf31CmtsDsOfdmChanSubcarrierZeroFreq=docsIf31CmtsDsOfdmChanSubcarrierZeroFreq, docsIf31CmtsCmDsOfdmProfileLastPartialChanTime=docsIf31CmtsCmDsOfdmProfileLastPartialChanTime, docsIf31CmUsScQamChanTxPsd=docsIf31CmUsScQamChanTxPsd, PartialSvcReasonType=PartialSvcReasonType, docsIf31CmtsUsOfdmaChanProvAttribMask=docsIf31CmtsUsOfdmaChanProvAttribMask, docsIf31CmtsDsOfdmSubcarrierStatusSkip=docsIf31CmtsDsOfdmSubcarrierStatusSkip, docsIf31CmEmDlsCfgTable=docsIf31CmEmDlsCfgTable, OfdmProfiles=OfdmProfiles, docsIf31CmEmDlsStatusAssignedEmIds=docsIf31CmEmDlsStatusAssignedEmIds, docsIf31CmtsDsOfdmChanUpperBdryEncompSpectrum=docsIf31CmtsDsOfdmChanUpperBdryEncompSpectrum, UsOfdmaCyclicPrefix=UsOfdmaCyclicPrefix, docsIf31CmtsUsOfdmaDataIucStatsCorrectedCodewords=docsIf31CmtsUsOfdmaDataIucStatsCorrectedCodewords, docsIf31CmtsDsOfdmChanLowerBdryEncompSpectrum=docsIf31CmtsDsOfdmChanLowerBdryEncompSpectrum, docsIf31CmtsDsOfdmSubcarrierTypeStartSubcarrierId=docsIf31CmtsDsOfdmSubcarrierTypeStartSubcarrierId, docsIf31CmtsCmEmStatsEntry=docsIf31CmtsCmEmStatsEntry, docsIf31CmDsOfdmProfileStatsConfigChangeCt=docsIf31CmDsOfdmProfileStatsConfigChangeCt, docsIf31CmUsOfdmaChanLastActiveSubcarrierNum=docsIf31CmUsOfdmaChanLastActiveSubcarrierNum, docsIf31CmtsCmDsOfdmChannelNumPartialSvcIncidents=docsIf31CmtsCmDsOfdmChannelNumPartialSvcIncidents, docsIf31CmUsOfdmaChanNumActiveSubcarriers=docsIf31CmUsOfdmaChanNumActiveSubcarriers, docsIf31CmtsCmUsOfdmaChannelNumPartialSvcIncidents=docsIf31CmtsCmUsOfdmaChannelNumPartialSvcIncidents, docsIf31CmtsUsOfdmaDataIucStatsTable=docsIf31CmtsUsOfdmaDataIucStatsTable, docsIf31CmtsDsOfdmChanNumActiveSubcarriers=docsIf31CmtsDsOfdmChanNumActiveSubcarriers, docsIf31CmStatusEntry=docsIf31CmStatusEntry, docsIf31CmEmDlsCfgEntryTimeThrshld=docsIf31CmEmDlsCfgEntryTimeThrshld, docsIf31CmtsCmDsOfdmChannelStatusTable=docsIf31CmtsCmDsOfdmChannelStatusTable, docsIf31CmUsOfdmaChanSubcarrierZeroFreq=docsIf31CmUsOfdmaChanSubcarrierZeroFreq, docsIf31CmUsOfdmaChanPreEqEnabled=docsIf31CmUsOfdmaChanPreEqEnabled, docsIf31CmStatusOfdmaUsT4Timeouts=docsIf31CmStatusOfdmaUsT4Timeouts, DsOfdmModulationType=DsOfdmModulationType, docsIf31CmtsDsOfdmProfileStatsOutMulticastOctets=docsIf31CmtsDsOfdmProfileStatsOutMulticastOctets, docsIf31CmtsUsOfdmaDataIucStatsCtrDiscontinuityTime=docsIf31CmtsUsOfdmaDataIucStatsCtrDiscontinuityTime, docsIf31CmtsDsOfdmChanPilotScaleFactor=docsIf31CmtsDsOfdmChanPilotScaleFactor, docsIf31CmtsUsOfdmaDataIucStatsEntry=docsIf31CmtsUsOfdmaDataIucStatsEntry, docsIf31CmtsCmUsOfdmaChannelHighResolutionTimingOffset=docsIf31CmtsCmUsOfdmaChannelHighResolutionTimingOffset, HundredthdB=HundredthdB, docsIf31CmtsDsOfdmSubcarrierTypeEntry=docsIf31CmtsDsOfdmSubcarrierTypeEntry, docsIf31CmDsOfdmChanPlcTotalCodewords=docsIf31CmDsOfdmChanPlcTotalCodewords, docsIf31CmDsOfdmProfileStatsUncorrectableCodewords=docsIf31CmDsOfdmProfileStatsUncorrectableCodewords, docsIf31CmDsOfdmChanEntry=docsIf31CmDsOfdmChanEntry, docsIf31CmtsGroup=docsIf31CmtsGroup, docsIf31CmtsCmDsOfdmProfileStatusTable=docsIf31CmtsCmDsOfdmProfileStatusTable, docsIf31CmtsCmDsOfdmChannelLastPartialSvcReasonCode=docsIf31CmtsCmDsOfdmChannelLastPartialSvcReasonCode, TimeInterleaverDepth=TimeInterleaverDepth, docsIf31CmtsCmRegStatusUsProfileIucList=docsIf31CmtsCmRegStatusUsProfileIucList, docsIf31CmStatusOfdmaUsRangingStatus=docsIf31CmStatusOfdmaUsRangingStatus, docsIf31CmEmDlsStatsNumSleepByteCtTriggers=docsIf31CmEmDlsStatsNumSleepByteCtTriggers, docsIf31CmDsOfdmProfileStatsInUnicastFrames=docsIf31CmDsOfdmProfileStatsInUnicastFrames, docsIf31CmtsUsOfdmaChanPreEqEnable=docsIf31CmtsUsOfdmaChanPreEqEnable, docsIf31CmEmDlsStatsNumSleepLatencyTriggers=docsIf31CmEmDlsStatsNumSleepLatencyTriggers, docsIf31CmDsOfdmChannelPowerEntry=docsIf31CmDsOfdmChannelPowerEntry, docsIf31CmStatusEmDlsOperStatus=docsIf31CmStatusEmDlsOperStatus, docsIf31CmtsDsOfdmProfileStatsConfigChangeCt=docsIf31CmtsDsOfdmProfileStatsConfigChangeCt, docsIf31CmtsCmUsOfdmaChannelLastPartialSvcTime=docsIf31CmtsCmUsOfdmaChannelLastPartialSvcTime, docsIf31RxChStatusPrimaryDsIndicator=docsIf31RxChStatusPrimaryDsIndicator, docsIf31CmtsCmUsOfdmaProfileStatusEntry=docsIf31CmtsCmUsOfdmaProfileStatusEntry, docsIf31CmUsOfdmaMinislotCfgStateTable=docsIf31CmUsOfdmaMinislotCfgStateTable, HundredthdBmV=HundredthdBmV, docsIf31CmDsOfdmChanChannelId=docsIf31CmDsOfdmChanChannelId, docsIf31CmtsCmDsOfdmProfileLastPartialChanReasonCode=docsIf31CmtsCmDsOfdmProfileLastPartialChanReasonCode, docsIf31CmtsCmRegStatusMinUsableDsFreq=docsIf31CmtsCmRegStatusMinUsableDsFreq, docsIf31CmDsOfdmProfileStatsInOctets=docsIf31CmDsOfdmProfileStatsInOctets, docsIf31CmtsDsOfdmSubcarrierTypeEndSubcarrierId=docsIf31CmtsDsOfdmSubcarrierTypeEndSubcarrierId, docsIf31CmDsOfdmChanLastActiveSubcarrierNum=docsIf31CmDsOfdmChanLastActiveSubcarrierNum, docsIf31CmtsUsOfdmaSubcarrierTypeEndSubcarrierId=docsIf31CmtsUsOfdmaSubcarrierTypeEndSubcarrierId, PartialChanReasonType=PartialChanReasonType, docsIf31CmtsUsOfdmaDataIucStatsMinislotPilotPattern=docsIf31CmtsUsOfdmaDataIucStatsMinislotPilotPattern, docsIf31CmtsCmUsOfdmaChannelStatusEntry=docsIf31CmtsCmUsOfdmaChannelStatusEntry, DsOfdmCyclicPrefix=DsOfdmCyclicPrefix, docsIf31CmDsOfdmProfileStatsProfileId=docsIf31CmDsOfdmProfileStatsProfileId, docsIf31CmtsDsOfdmChanPowerTxPower=docsIf31CmtsDsOfdmChanPowerTxPower, docsIf31CmtsUsOfdmaDataIucStatsTotalCodewords=docsIf31CmtsUsOfdmaDataIucStatsTotalCodewords, docsIf31CmUsOfdmaChanSubcarrierSpacing=docsIf31CmUsOfdmaChanSubcarrierSpacing, docsIf31CmtsDsOfdmChanUpperBdryFreq=docsIf31CmtsDsOfdmChanUpperBdryFreq, docsIf31CmtsCmUsOfdmaChannelMeanRxMer=docsIf31CmtsCmUsOfdmaChannelMeanRxMer, docsIf31CmEmDlsStatsTotalDurationBelowUsThrshlds=docsIf31CmEmDlsStatsTotalDurationBelowUsThrshlds, docsIf31CmUsOfdmaProfileStatsIuc=docsIf31CmUsOfdmaProfileStatsIuc, docsIf31CmDsOfdmChanRollOffPeriod=docsIf31CmDsOfdmChanRollOffPeriod, docsIf31CmtsDsOfdmChanUpperGuardbandWidth=docsIf31CmtsDsOfdmChanUpperGuardbandWidth, docsIf31CmtsUsOfdmaChanInitRngPreambleLen=docsIf31CmtsUsOfdmaChanInitRngPreambleLen, docsIf31CmStatusOfdmaUsEntry=docsIf31CmStatusOfdmaUsEntry, docsIf31CmUsOfdmaChanEntry=docsIf31CmUsOfdmaChanEntry, docsIf31CmEmDlsStatsTotalDurationBelowDsThrshlds=docsIf31CmEmDlsStatsTotalDurationBelowDsThrshlds, docsIf31CmtsCmUsOfdmaProfileStatusTable=docsIf31CmtsCmUsOfdmaProfileStatusTable, docsIf31CmDsOfdmProfileStatsCorrectedCodewords=docsIf31CmDsOfdmProfileStatsCorrectedCodewords, docsIf31CmtsUsOfdmaChanTemplateIndex=docsIf31CmtsUsOfdmaChanTemplateIndex, docsIf31CmDsOfdmChanNcpFieldCrcFailures=docsIf31CmDsOfdmChanNcpFieldCrcFailures, docsIf31CmUsOfdmaProfileStatsEntry=docsIf31CmUsOfdmaProfileStatsEntry, docsIf31CmtsDsOfdmChanRollOffPeriod=docsIf31CmtsDsOfdmChanRollOffPeriod, docsIf31CmtsCmEmStatsDlsWakeupEvents=docsIf31CmtsCmEmStatsDlsWakeupEvents, docsIf31CmtsDsOfdmChanTimeInterleaverDepth=docsIf31CmtsDsOfdmChanTimeInterleaverDepth, docsIf31CmUsScQamChanEntry=docsIf31CmUsScQamChanEntry, docsIf31CmtsUsOfdmaChanInitRngNumSubcarriers=docsIf31CmtsUsOfdmaChanInitRngNumSubcarriers, docsIf31CmUsScQamChanTable=docsIf31CmUsScQamChanTable, docsIf31CmDsOfdmChanNumPilots=docsIf31CmDsOfdmChanNumPilots, docsIf31CmStatusOfdmaUsT3Exceededs=docsIf31CmStatusOfdmaUsT3Exceededs, docsIf31CmtsDsOfdmChanTable=docsIf31CmtsDsOfdmChanTable, docsIf31DocsisBaseCapability=docsIf31DocsisBaseCapability, docsIf31CmtsUsOfdmaChanUpperBdryFreq=docsIf31CmtsUsOfdmaChanUpperBdryFreq, docsIf31CmtsUsOfdmaSubcarrierTypeEntry=docsIf31CmtsUsOfdmaSubcarrierTypeEntry, docsIf31CmtsDsOfdmProfileStatsCtrDiscontinuityTime=docsIf31CmtsDsOfdmProfileStatsCtrDiscontinuityTime, docsIf31CmEmDlsCfgEntryBitrateThrshld=docsIf31CmEmDlsCfgEntryBitrateThrshld, DsOfdmRollOffPeriod=DsOfdmRollOffPeriod, docsIf31CmtsCmUsOfdmaChannelStdDevRxMer=docsIf31CmtsCmUsOfdmaChannelStdDevRxMer, docsIf31CmEmDlsStatsTable=docsIf31CmEmDlsStatsTable, docsIf31CmtsDsOfdmSubcarrierStatusEntry=docsIf31CmtsDsOfdmSubcarrierStatusEntry, docsIf31CmtsUsOfdmaChanTargetRxPower=docsIf31CmtsUsOfdmaChanTargetRxPower, docsIf31CmSystemCfgStateDiplexerCapability=docsIf31CmSystemCfgStateDiplexerCapability, docsIf31CmtsDsOfdmChanLowerGuardbandWidth=docsIf31CmtsDsOfdmChanLowerGuardbandWidth, docsIf31CmDsOfdmProfileStatsInMulticastOctets=docsIf31CmDsOfdmProfileStatsInMulticastOctets, docsIf31CmDsOfdmProfileStatsTable=docsIf31CmDsOfdmProfileStatsTable, docsIf31CmtsUsOfdmaChanTable=docsIf31CmtsUsOfdmaChanTable, docsIf31CmtsUsOfdmaChanCyclicPrefix=docsIf31CmtsUsOfdmaChanCyclicPrefix, docsIf31CmDsOfdmChanTimeInterleaverDepth=docsIf31CmDsOfdmChanTimeInterleaverDepth, docsIf31CmStatusOfdmaUsT3Timeouts=docsIf31CmStatusOfdmaUsT3Timeouts, docsIf31CmSystemCfgState=docsIf31CmSystemCfgState, docsIf31CmtsCmRegStatusTcsPhigh=docsIf31CmtsCmRegStatusTcsPhigh, docsIf31CmtsCmRegStatusPartialSvcState=docsIf31CmtsCmRegStatusPartialSvcState, docsIf31CmDsOfdmProfileStatsInFrames=docsIf31CmDsOfdmProfileStatsInFrames, docsIf31CmtsUsOfdmaDataIucStatsDataIuc=docsIf31CmtsUsOfdmaDataIucStatsDataIuc, docsIf31CmUsOfdmaChanChannelId=docsIf31CmUsOfdmaChanChannelId, docsIf31CmtsDsOfdmSubcarrierTypeTable=docsIf31CmtsDsOfdmSubcarrierTypeTable, docsIf31CmtsUsOfdmaDataIucDetailStatusUpperFreq=docsIf31CmtsUsOfdmaDataIucDetailStatusUpperFreq, docsIf31CmtsUsOfdmaDataIucStatsInOctets=docsIf31CmtsUsOfdmaDataIucStatsInOctets, docsIf31CmtsUsOfdmaRangingIucStatusNumSubcarriers=docsIf31CmtsUsOfdmaRangingIucStatusNumSubcarriers, docsIf31CmUsOfdmaChanFirstActiveSubcarrierNum=docsIf31CmUsOfdmaChanFirstActiveSubcarrierNum, docsIf31CmtsCmDsOfdmProfilePartialChanReasonCode=docsIf31CmtsCmDsOfdmProfilePartialChanReasonCode, docsIf31CmtsCmEmStatsDlsModeTotalDuration=docsIf31CmtsCmEmStatsDlsModeTotalDuration, docsIf31CmtsUsOfdmaRangingIucStatusGuardband=docsIf31CmtsUsOfdmaRangingIucStatusGuardband, docsIf31CmDsOfdmChanSubcarrierSpacing=docsIf31CmDsOfdmChanSubcarrierSpacing, docsIf31CmtsCmUsOfdmaChannelStatusTable=docsIf31CmtsCmUsOfdmaChannelStatusTable, docsIf31CmStatusOfdmaUsRangingAborteds=docsIf31CmStatusOfdmaUsRangingAborteds, docsIf31CmtsUsOfdmaDataIucDetailStatusLowerFreq=docsIf31CmtsUsOfdmaDataIucDetailStatusLowerFreq, docsIf31CmDsOfdmProfileStatsEntry=docsIf31CmDsOfdmProfileStatsEntry, docsIf31CmDsOfdmChanChanIndicator=docsIf31CmDsOfdmChanChanIndicator, docsIf31CmUsOfdmaChanCyclicPrefix=docsIf31CmUsOfdmaChanCyclicPrefix, UsOfdmaRollOffPeriod=UsOfdmaRollOffPeriod, docsIf31CmDsOfdmChanCyclicPrefix=docsIf31CmDsOfdmChanCyclicPrefix, docsIf31CmDsOfdmChannelPowerTable=docsIf31CmDsOfdmChannelPowerTable, ClabsDocsisVersion=ClabsDocsisVersion, docsIf31CmUsOfdmaMinislotCfgStateFirstSubcarrierId=docsIf31CmUsOfdmaMinislotCfgStateFirstSubcarrierId, docsIf31CmtsCmRegStatusTcsDrwTop=docsIf31CmtsCmRegStatusTcsDrwTop, docsIf31CmtsUsOfdmaSubcarrierTypeStartSubcarrierId=docsIf31CmtsUsOfdmaSubcarrierTypeStartSubcarrierId, docsIf31CmDsOfdmProfileStatsInFrameCrcFailures=docsIf31CmDsOfdmProfileStatsInFrameCrcFailures, docsIf31CmDsOfdmProfileStatsInUnicastOctets=docsIf31CmDsOfdmProfileStatsInUnicastOctets, EmIdList=EmIdList, docsIf31CmtsCmDsOfdmChannelNumPartialChanIncidents=docsIf31CmtsCmDsOfdmChannelNumPartialChanIncidents, docsIf31CmUsOfdmaMinislotCfgStateEntry=docsIf31CmUsOfdmaMinislotCfgStateEntry, docsIf31CmtsCmEmStatsTable=docsIf31CmtsCmEmStatsTable, docsIf31CmtsCmUsOfdmaChannelThresholdRxMerHighestFreq=docsIf31CmtsCmUsOfdmaChannelThresholdRxMerHighestFreq, docsIf31CmtsCmEmStatsEm1x1ModeTotalDuration=docsIf31CmtsCmEmStatsEm1x1ModeTotalDuration, docsIf31CmtsCmRegStatusPartialChanState=docsIf31CmtsCmRegStatusPartialChanState, docsIf31CmtsDsOfdmChanPowerEntry=docsIf31CmtsDsOfdmChanPowerEntry, docsIf31Mib=docsIf31Mib, docsIf31CmtsCmRegStatusAssignedEmIds=docsIf31CmtsCmRegStatusAssignedEmIds, docsIf31CmtsCmUsOfdmaProfileUnreliableCodewords=docsIf31CmtsCmUsOfdmaProfileUnreliableCodewords, docsIf31CmDsOfdmProfileStatsInMulticastFrames=docsIf31CmDsOfdmProfileStatsInMulticastFrames, docsIf31CmUsOfdmaProfileStatsTable=docsIf31CmUsOfdmaProfileStatsTable, docsIf31CmUsOfdmaProfileStatsCtrDiscontinuityTime=docsIf31CmUsOfdmaProfileStatsCtrDiscontinuityTime, docsIf31CmtsDsOfdmChanChannelId=docsIf31CmtsDsOfdmChanChannelId)
mibBuilder.exportSymbols("DOCS-IF31-MIB", docsIf31CmtsDsOfdmProfileStatsProfileId=docsIf31CmtsDsOfdmProfileStatsProfileId, docsIf31CmtsDsOfdmChanPowerBandIndex=docsIf31CmtsDsOfdmChanPowerBandIndex, docsIf31CmtsUsOfdmaChanLowerBdryFreq=docsIf31CmtsUsOfdmaChanLowerBdryFreq, docsIf31CmtsUsOfdmaChanRangingBackoffEnd=docsIf31CmtsUsOfdmaChanRangingBackoffEnd, docsIf31CmtsUsOfdmaDataIucStatsAssignedCmCt=docsIf31CmtsUsOfdmaDataIucStatsAssignedCmCt, docsIf31CmtsUsOfdmaRangingIucStatusIuc=docsIf31CmtsUsOfdmaRangingIucStatusIuc, docsIf31CmtsUsOfdmaSubcarrierTypeTable=docsIf31CmtsUsOfdmaSubcarrierTypeTable, docsIf31CmEmDlsCfgEntry=docsIf31CmEmDlsCfgEntry, docsIf31CmDsOfdmProfileStatsTotalCodewords=docsIf31CmDsOfdmProfileStatsTotalCodewords, docsIf31RxChStatusEntry=docsIf31RxChStatusEntry, docsIf31CmUsOfdmaChanTxPower=docsIf31CmUsOfdmaChanTxPower, docsIf31CmSystemCfgStateDiplexerDsLowerCapability=docsIf31CmSystemCfgStateDiplexerDsLowerCapability, docsIf31CmUsOfdmaChanRollOffPeriod=docsIf31CmUsOfdmaChanRollOffPeriod, docsIf31CmtsUsOfdmaDataIucDetailStatusTable=docsIf31CmtsUsOfdmaDataIucDetailStatusTable, docsIf31CmtsUsOfdmaRangingIucStatusEntry=docsIf31CmtsUsOfdmaRangingIucStatusEntry, docsIf31CmtsDsOfdmChanPowerTable=docsIf31CmtsDsOfdmChanPowerTable, docsIf31CmtsUsOfdmaDataIucDetailStatusEntry=docsIf31CmtsUsOfdmaDataIucDetailStatusEntry, docsIf31CmtsCmUsOfdmaChannelLastPartialSvcReasonCode=docsIf31CmtsCmUsOfdmaChannelLastPartialSvcReasonCode, docsIf31CmtsUsOfdmaRangingIucStatusTable=docsIf31CmtsUsOfdmaRangingIucStatusTable, docsIf31MibConformance=docsIf31MibConformance, docsIf31CmDsOfdmChannelPowerRxPower=docsIf31CmDsOfdmChannelPowerRxPower, docsIf31CmtsDsOfdmChanLastActiveSubcarrierNum=docsIf31CmtsDsOfdmChanLastActiveSubcarrierNum, docsIf31CmDsOfdmChanNcpTotalFields=docsIf31CmDsOfdmChanNcpTotalFields, docsIf31CmEmDlsStatusReceiveTimer=docsIf31CmEmDlsStatusReceiveTimer, docsIf31CmtsUsOfdmaChanUtilization=docsIf31CmtsUsOfdmaChanUtilization, docsIf31Notifications=docsIf31Notifications, docsIf31CmCompliance=docsIf31CmCompliance, docsIf31CmStatusOfdmaUsIsMuted=docsIf31CmStatusOfdmaUsIsMuted, docsIf31CmtsDsOfdmSubcarrierTypeSubcarrierType=docsIf31CmtsDsOfdmSubcarrierTypeSubcarrierType, docsIf31CmStatusOfdmaUsTable=docsIf31CmStatusOfdmaUsTable, docsIf31CmUsOfdmaMinislotCfgStateDataSymbolModulation=docsIf31CmUsOfdmaMinislotCfgStateDataSymbolModulation, docsIf31RxChStatusOfdmProfiles=docsIf31RxChStatusOfdmProfiles, docsIf31CmtsUsOfdmaChanFineRngGuardband=docsIf31CmtsUsOfdmaChanFineRngGuardband, docsIf31CmEmDlsStatusEntry=docsIf31CmEmDlsStatusEntry, docsIf31CmtsUsOfdmaDataIucDetailStatusMinislotPilotPattern=docsIf31CmtsUsOfdmaDataIucDetailStatusMinislotPilotPattern, docsIf31CmtsDsOfdmProfileStatsEntry=docsIf31CmtsDsOfdmProfileStatsEntry, docsIf31CmtsCmUsOfdmaChannelThresholdRxMerValue=docsIf31CmtsCmUsOfdmaChannelThresholdRxMerValue, docsIf31MibGroups=docsIf31MibGroups, docsIf31CmtsCmRegStatusTable=docsIf31CmtsCmRegStatusTable, docsIf31CmtsCmUsOfdmaChannelCurPartialSvcReasonCode=docsIf31CmtsCmUsOfdmaChannelCurPartialSvcReasonCode, docsIf31CmtsUsOfdmaChanSubcarrierSpacing=docsIf31CmtsUsOfdmaChanSubcarrierSpacing, docsIf31CmEmDlsCfgExitTimeThrshld=docsIf31CmEmDlsCfgExitTimeThrshld, docsIf31CmSystemCfgStateDiplexerCfgDsLowerBandEdge=docsIf31CmSystemCfgStateDiplexerCfgDsLowerBandEdge)
