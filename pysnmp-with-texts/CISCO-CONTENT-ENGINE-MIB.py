#
# PySNMP MIB module CISCO-CONTENT-ENGINE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-CONTENT-ENGINE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:53:50 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
iso, Counter32, ObjectIdentity, Unsigned32, Bits, Gauge32, IpAddress, MibIdentifier, ModuleIdentity, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, NotificationType, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Counter32", "ObjectIdentity", "Unsigned32", "Bits", "Gauge32", "IpAddress", "MibIdentifier", "ModuleIdentity", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "NotificationType", "Integer32")
TextualConvention, DisplayString, TimeStamp = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "TimeStamp")
ciscoContentEngineMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 178))
ciscoContentEngineMIB.setRevisions(('2004-04-21 00:00', '2004-02-10 00:00', '2002-05-20 00:00', '2000-02-10 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoContentEngineMIB.setRevisionsDescriptions(('Added cceWmtReqGroupRev1 and cceWmtHCGroupRev1, deprecated cceWmtReqGroup and cceWmtHCGroup, the new groups are introduced to support WMT 9.0.', '(1) Added all alarm related objects. (2) Deprecated ciscoContentEngineDataDiskFailed object and replaced it by ciscoContentEngineDiskFailed. (3) Added cceFailedDiskName objects.', 'Added cceWmtGroup, cceCseGroup, and cceRpGroup groups.', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoContentEngineMIB.setLastUpdated('200404210000Z')
if mibBuilder.loadTexts: ciscoContentEngineMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoContentEngineMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134-1706 USA Tel: +1 800 553-NETS E-mail: cs-webcache@cisco.com')
if mibBuilder.loadTexts: ciscoContentEngineMIB.setDescription('The MIB module for the Cisco Content Engine from Cisco Systems, Inc.')
ciscoContentEngineMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 178, 1))
cceHttpGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 1))
cceWmtGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 2))
cceCseGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 3))
cceRpGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 4))
cceNotificationInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 5))
cceAlarmGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 6))
cceHttpRequests = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 1, 1))
cceHttpPerf = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 1, 2))
cceWmtRequests = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 2, 1))
cceWmtHCRequests = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 2, 2))
cceWmtPerf = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 2, 3))
cceCseRequests = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 3, 1))
cceCseHCRequests = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 3, 2))
cceCsePerf = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 3, 3))
cceRpRequests = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 4, 1))
cceRpHCRequests = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 4, 2))
cceAlarmHistory = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 6, 1))
cceAlarmMonitoring = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 6, 2))
cceHttpRequestsTotal = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceHttpRequestsTotal.setStatus('current')
if mibBuilder.loadTexts: cceHttpRequestsTotal.setDescription('Total number of end-user requests the HTTP proxy has received.')
cceHttpRequestsNoCacheTotal = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceHttpRequestsNoCacheTotal.setStatus('current')
if mibBuilder.loadTexts: cceHttpRequestsNoCacheTotal.setDescription('Total number of end-user requests the HTTP proxy has received which contain a header directive indicating that the object cannot be cached.')
cceHttpRequestsClientErrorTotal = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceHttpRequestsClientErrorTotal.setStatus('current')
if mibBuilder.loadTexts: cceHttpRequestsClientErrorTotal.setDescription('Total number of times the HTTP proxy has failed to fulfill a request due to errors caused by client connections.')
cceHttpRequestsServerErrorTotal = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceHttpRequestsServerErrorTotal.setStatus('current')
if mibBuilder.loadTexts: cceHttpRequestsServerErrorTotal.setDescription('Total number of times the HTTP proxy has failed to fulfill a request due to errors while fetching objects not in cache from remote servers.')
cceHttpRequestsBlocked = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceHttpRequestsBlocked.setStatus('current')
if mibBuilder.loadTexts: cceHttpRequestsBlocked.setDescription('The number of times the HTTP proxy has blocked a request due to URL filtering or rules template blocking.')
cceHttpRequestsHits = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceHttpRequestsHits.setStatus('current')
if mibBuilder.loadTexts: cceHttpRequestsHits.setDescription('Total number of end-user requests whose response body was retrieved from the populated cache of the HTTP proxy.')
cceHttpRequestsMisses = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceHttpRequestsMisses.setStatus('current')
if mibBuilder.loadTexts: cceHttpRequestsMisses.setDescription('Total number of end-user requests whose response body is retrieved from remote servers.')
cceHttpRequestsBytesServedHits = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceHttpRequestsBytesServedHits.setStatus('current')
if mibBuilder.loadTexts: cceHttpRequestsBytesServedHits.setDescription('Total number of bytes in the response bodies the HTTP proxy retrieved directly from its populated cache.')
cceHttpRequestsBytesServedMisses = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceHttpRequestsBytesServedMisses.setStatus('current')
if mibBuilder.loadTexts: cceHttpRequestsBytesServedMisses.setDescription('Total number of bytes in the response bodies the HTTP proxy retrieved from remote servers.')
cceHttpRequestsImsInmTotalCache = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceHttpRequestsImsInmTotalCache.setStatus('current')
if mibBuilder.loadTexts: cceHttpRequestsImsInmTotalCache.setDescription('Total number of If-Modified-Since (IMS) and If-Not-Matched (INM) requests from the client served from the populated cache of the HTTP proxy without revalidation.')
cceHttpRequestsImsInmTotalReval = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceHttpRequestsImsInmTotalReval.setStatus('current')
if mibBuilder.loadTexts: cceHttpRequestsImsInmTotalReval.setDescription('Total number of If-Modified-Since (IMS) and If-Not-Matched (INM) requests from the client served from the populated cache of the HTTP proxy and revalidated with an IMS to the server.')
cceHttpRequestsBytesClientIn = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceHttpRequestsBytesClientIn.setStatus('current')
if mibBuilder.loadTexts: cceHttpRequestsBytesClientIn.setDescription('Total number of bytes received by the HTTP proxy from clients.')
cceHttpRequestsBytesClientOut = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceHttpRequestsBytesClientOut.setStatus('current')
if mibBuilder.loadTexts: cceHttpRequestsBytesClientOut.setDescription('Total number of bytes delivered by the HTTP proxy to clients.')
cceHttpRequestsBytesServerIn = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceHttpRequestsBytesServerIn.setStatus('current')
if mibBuilder.loadTexts: cceHttpRequestsBytesServerIn.setDescription('Total number of bytes received by the HTTP proxy from remote servers.')
cceHttpRequestsBytesServerOut = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceHttpRequestsBytesServerOut.setStatus('current')
if mibBuilder.loadTexts: cceHttpRequestsBytesServerOut.setDescription('Total number of bytes transmitted by the HTTP proxy to remote servers.')
cceHttpHCRequestsTotal = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 1, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceHttpHCRequestsTotal.setStatus('current')
if mibBuilder.loadTexts: cceHttpHCRequestsTotal.setDescription('Total number of end-user requests the HTTP proxy has received. This object is a 64-bit version of cceHttpRequestsTotal.')
cceHttpHCRequestsNoCacheTotal = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 1, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceHttpHCRequestsNoCacheTotal.setStatus('current')
if mibBuilder.loadTexts: cceHttpHCRequestsNoCacheTotal.setDescription('Total number of end-user requests the HTTP proxy has received which contain a header directive indicating that the object cannot be cached. This object is a 64-bit version of cceHttpRequestsNoCacheTotal.')
cceHttpHCRequestsClientErrorTotal = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 1, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceHttpHCRequestsClientErrorTotal.setStatus('current')
if mibBuilder.loadTexts: cceHttpHCRequestsClientErrorTotal.setDescription('Total number of times the HTTP proxy has failed to fulfill a request due to errors caused by client connections. This object is a 64-bit version of cceHttpRequestsClientErrorTotal.')
cceHttpHCRequestsServerErrorTotal = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 1, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceHttpHCRequestsServerErrorTotal.setStatus('current')
if mibBuilder.loadTexts: cceHttpHCRequestsServerErrorTotal.setDescription('Total number of times the HTTP proxy has failed to fulfill a request due to errors while fetching objects not in cache from remote servers. This object is a 64-bit version of cceHttpRequestsServerErrorTotal.')
cceHttpHCRequestsBlocked = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 1, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceHttpHCRequestsBlocked.setStatus('current')
if mibBuilder.loadTexts: cceHttpHCRequestsBlocked.setDescription('The number of times the HTTP proxy has blocked a request due to URL filtering or rules template blocking. This object is a 64-bit version of cceHttpRequestsBlocked.')
cceHttpHCRequestsHits = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 1, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceHttpHCRequestsHits.setStatus('current')
if mibBuilder.loadTexts: cceHttpHCRequestsHits.setDescription('Total number of end-user requests whose response body was retrieved from the populated cache of the HTTP proxy. This object is a 64-bit version of cceHttpRequestsHits.')
cceHttpHCRequestsMisses = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 1, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceHttpHCRequestsMisses.setStatus('current')
if mibBuilder.loadTexts: cceHttpHCRequestsMisses.setDescription('Total number of end-user requests whose response body is retrieved from remote servers. This object is a 64-bit version of cceHttpRequestsMisses.')
cceHttpHCRequestsBytesServedHits = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 1, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceHttpHCRequestsBytesServedHits.setStatus('current')
if mibBuilder.loadTexts: cceHttpHCRequestsBytesServedHits.setDescription('Total number of bytes in the response bodies the HTTP proxy retrieved directly from its populated cache. This object is a 64-bit version of cceHttpRequestsBytesServedHits.')
cceHttpHCRequestsBytesServedMisses = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 1, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceHttpHCRequestsBytesServedMisses.setStatus('current')
if mibBuilder.loadTexts: cceHttpHCRequestsBytesServedMisses.setDescription('Total number of bytes in the response bodies the HTTP proxy retrieved from remote servers. This object is a 64-bit version of cceHttpRequestsBytesServedMisses.')
cceHttpHCRequestsImsInmTotalCache = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 1, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceHttpHCRequestsImsInmTotalCache.setStatus('current')
if mibBuilder.loadTexts: cceHttpHCRequestsImsInmTotalCache.setDescription('Total number of If-Modified-Since (IMS) and If-Not-Matched (INM) requests from the client served from the populated cache of the HTTP proxy without revalidation. This object is a 64-bit version of cceHttpRequestsImsInmTotalCache.')
cceHttpHCRequestsImsInmTotalReval = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 1, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceHttpHCRequestsImsInmTotalReval.setStatus('current')
if mibBuilder.loadTexts: cceHttpHCRequestsImsInmTotalReval.setDescription('Total number of If-Modified-Since (IMS) and If-Not-Matched (INM) requests from the client served from the populated cache of the HTTP proxy and revalidated with an IMS to the server. This object is a 64-bit version of cceHttpRequestsImsInmTotalReval.')
cceHttpHCRequestsBytesClientIn = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 1, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceHttpHCRequestsBytesClientIn.setStatus('current')
if mibBuilder.loadTexts: cceHttpHCRequestsBytesClientIn.setDescription('Total number of bytes received by the HTTP proxy from clients. This object is a 64-bit version of cceHttpRequestsBytesClientIn.')
cceHttpHCRequestsBytesClientOut = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 1, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceHttpHCRequestsBytesClientOut.setStatus('current')
if mibBuilder.loadTexts: cceHttpHCRequestsBytesClientOut.setDescription('Total number of bytes delivered by the HTTP proxy to clients. This object is a 64-bit version of cceHttpRequestsBytesClientOut.')
cceHttpHCRequestsBytesServerIn = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 1, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceHttpHCRequestsBytesServerIn.setStatus('current')
if mibBuilder.loadTexts: cceHttpHCRequestsBytesServerIn.setDescription('Total number of bytes received by the HTTP proxy from remote servers. This object is a 64-bit version of cceHttpRequestsBytesServerIn.')
cceHttpHCRequestsBytesServerOut = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 1, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceHttpHCRequestsBytesServerOut.setStatus('current')
if mibBuilder.loadTexts: cceHttpHCRequestsBytesServerOut.setDescription('Total number of bytes transmitted by the HTTP proxy to remote servers. This object is a 64-bit version of cceHttpRequestsBytesServerOut.')
cceHttpPerfSamplingTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 1, 2, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cceHttpPerfSamplingTime.setStatus('current')
if mibBuilder.loadTexts: cceHttpPerfSamplingTime.setDescription('Number of seconds in the last sampling time interval used to calculate the value of the cceHttpPerfReqPerSec and cceHttpPerfBytesPerSec objects.')
cceHttpPerfReqPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 1, 2, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceHttpPerfReqPerSec.setStatus('current')
if mibBuilder.loadTexts: cceHttpPerfReqPerSec.setDescription('Number of requests per second the HTTP proxy has been servicing in the last sampling time.')
cceHttpPerfBytesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 1, 2, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('bytes-per-second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cceHttpPerfBytesPerSec.setStatus('current')
if mibBuilder.loadTexts: cceHttpPerfBytesPerSec.setDescription('Bytes per second served in the last sampling time.')
cceHttpPerfServiceTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 1, 2, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('milliseconds-per-req').setMaxAccess("readonly")
if mibBuilder.loadTexts: cceHttpPerfServiceTime.setStatus('current')
if mibBuilder.loadTexts: cceHttpPerfServiceTime.setDescription('Average duration of each connection serviced by the HTTP proxy.')
cceHttpPerfHitServiceTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 1, 2, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('milliseconds-per-req').setMaxAccess("readonly")
if mibBuilder.loadTexts: cceHttpPerfHitServiceTime.setStatus('current')
if mibBuilder.loadTexts: cceHttpPerfHitServiceTime.setDescription('Average duration required for the HTTP proxy to send a hit response. A hit response is a response for which the object can be serviced from the populated cache of the HTTP proxy.')
cceHttpPerfMissServiceTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 1, 2, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('milliseconds-per-req').setMaxAccess("readonly")
if mibBuilder.loadTexts: cceHttpPerfMissServiceTime.setStatus('current')
if mibBuilder.loadTexts: cceHttpPerfMissServiceTime.setDescription('Average duration required for the HTTP proxy to send a miss response. A miss response is a response for which the object cannot be serviced from the populated cache of the HTTP proxy.')
cceHttpPerfObjectSize = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 1, 2, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cceHttpPerfObjectSize.setStatus('current')
if mibBuilder.loadTexts: cceHttpPerfObjectSize.setDescription('Average size of the object served from the HTTP proxy.')
cceHttpPerfCpuLoad = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 1, 2, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percentage').setMaxAccess("readonly")
if mibBuilder.loadTexts: cceHttpPerfCpuLoad.setStatus('current')
if mibBuilder.loadTexts: cceHttpPerfCpuLoad.setDescription('Percentage of CPU load for the last 4 second sampling time interval.')
cceWmtTotalRequests = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceWmtTotalRequests.setStatus('current')
if mibBuilder.loadTexts: cceWmtTotalRequests.setDescription('Total number of end-user requests the WMT proxy/server has received.')
cceWmtTotalClientErrors = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceWmtTotalClientErrors.setStatus('current')
if mibBuilder.loadTexts: cceWmtTotalClientErrors.setDescription('Total number of times the WMT proxy/server has failed to fulfill a request due to errors caused by client connections.')
cceWmtTotalServerErrors = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceWmtTotalServerErrors.setStatus('current')
if mibBuilder.loadTexts: cceWmtTotalServerErrors.setDescription('Total number of times the WMT proxy has failed to fulfill a request due to errors while fetching objects not in cache from remote servers.')
cceWmtBlockedRequests = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceWmtBlockedRequests.setStatus('current')
if mibBuilder.loadTexts: cceWmtBlockedRequests.setDescription('The number of times the WMT proxy/server has blocked a request due to URL filtering or rules template blocking.')
cceWmtRequestHits = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceWmtRequestHits.setStatus('current')
if mibBuilder.loadTexts: cceWmtRequestHits.setDescription('Total number of end-user requests whose response body was retrieved from the populated cache of the WMT proxy.')
cceWmtRequestMisses = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceWmtRequestMisses.setStatus('current')
if mibBuilder.loadTexts: cceWmtRequestMisses.setDescription('Total number of end-user requests whose response body is retrieved from remote servers.')
cceWmtRequestHitsBytesServed = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 2, 1, 7), Counter32()).setUnits('Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cceWmtRequestHitsBytesServed.setStatus('current')
if mibBuilder.loadTexts: cceWmtRequestHitsBytesServed.setDescription('Total number of bytes in the response bodies the WMT proxy retrieved directly from its populated cache.')
cceWmtRequestMissesBytesServed = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 2, 1, 8), Counter32()).setUnits('Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cceWmtRequestMissesBytesServed.setStatus('current')
if mibBuilder.loadTexts: cceWmtRequestMissesBytesServed.setDescription('Total number of bytes in the response bodies the WMT proxy retrieved from remote servers.')
cceWmtTotalLiveRequests = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceWmtTotalLiveRequests.setStatus('current')
if mibBuilder.loadTexts: cceWmtTotalLiveRequests.setDescription('Total number of end-user live requests the WMT proxy/server has received.')
cceWmtLiveRequestBytes = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 2, 1, 10), Counter32()).setUnits('Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cceWmtLiveRequestBytes.setStatus('current')
if mibBuilder.loadTexts: cceWmtLiveRequestBytes.setDescription('Total number of live splitting bytes served from the WMT proxy/server.')
cceWmtTotalMmsuRequests = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceWmtTotalMmsuRequests.setStatus('current')
if mibBuilder.loadTexts: cceWmtTotalMmsuRequests.setDescription('Total number of end-user MMSU (Microsoft Media Service over UDP) requests the WMT proxy/server has received.')
cceWmtTotalMmsuBytes = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 2, 1, 12), Counter32()).setUnits('Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cceWmtTotalMmsuBytes.setStatus('current')
if mibBuilder.loadTexts: cceWmtTotalMmsuBytes.setDescription('Total number of bytes served through MMSU from WMT proxy/server.')
cceWmtTotalMmstRequests = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceWmtTotalMmstRequests.setStatus('current')
if mibBuilder.loadTexts: cceWmtTotalMmstRequests.setDescription('Total number of end-user MMST (Microsoft Media Service over TCP) requests the WMT proxy/server has received.')
cceWmtTotalMmstBytes = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 2, 1, 14), Counter32()).setUnits('Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cceWmtTotalMmstBytes.setStatus('current')
if mibBuilder.loadTexts: cceWmtTotalMmstBytes.setDescription('Total number of bytes served through MMST from WMT proxy/server.')
cceWmtTotalHttpRequests = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceWmtTotalHttpRequests.setStatus('current')
if mibBuilder.loadTexts: cceWmtTotalHttpRequests.setDescription('Total number of end-user HTTP requests the WMT proxy/server has received.')
cceWmtTotalHttpBytes = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 2, 1, 16), Counter32()).setUnits('Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cceWmtTotalHttpBytes.setStatus('current')
if mibBuilder.loadTexts: cceWmtTotalHttpBytes.setDescription('Total number of bytes served through HTTP from WMT proxy/server.')
cceWmtTotalMulticastBytes = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 2, 1, 17), Counter32()).setUnits('Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cceWmtTotalMulticastBytes.setStatus('current')
if mibBuilder.loadTexts: cceWmtTotalMulticastBytes.setDescription('Total number of bytes served through multicast from WMT server.')
cceWmtTotalRtspuRequests = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceWmtTotalRtspuRequests.setStatus('current')
if mibBuilder.loadTexts: cceWmtTotalRtspuRequests.setDescription('Total number of end-user RTSPU (Microsoft Media Service over UDP) requests the WMT proxy/server has received.')
cceWmtTotalRtspuBytes = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 2, 1, 19), Counter32()).setUnits('Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cceWmtTotalRtspuBytes.setStatus('current')
if mibBuilder.loadTexts: cceWmtTotalRtspuBytes.setDescription('Total number of bytes served through RTSPU from WMT proxy/server.')
cceWmtTotalRtsptRequests = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceWmtTotalRtsptRequests.setStatus('current')
if mibBuilder.loadTexts: cceWmtTotalRtsptRequests.setDescription('Total number of end-user RTSPT (Microsoft Media Service over TCP) requests the WMT proxy/server has received.')
cceWmtTotalRtsptBytes = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 2, 1, 21), Counter32()).setUnits('Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cceWmtTotalRtsptBytes.setStatus('current')
if mibBuilder.loadTexts: cceWmtTotalRtsptBytes.setDescription('Total number of bytes served through RTSPT from WMT proxy/server.')
cceWmtHCRequestHitsBytesServed = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 2, 2, 1), Counter64()).setUnits('Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cceWmtHCRequestHitsBytesServed.setStatus('current')
if mibBuilder.loadTexts: cceWmtHCRequestHitsBytesServed.setDescription('Total number of bytes in the response bodies the WMT proxy retrieved directly from its populated cache.')
cceWmtHCRequestMissesBytesServed = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 2, 2, 2), Counter64()).setUnits('Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cceWmtHCRequestMissesBytesServed.setStatus('current')
if mibBuilder.loadTexts: cceWmtHCRequestMissesBytesServed.setDescription('Total number of bytes in the response bodies the WMT proxy retrieved from remote servers.')
cceWmtHCLiveRequestBytes = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 2, 2, 3), Counter64()).setUnits('Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cceWmtHCLiveRequestBytes.setStatus('current')
if mibBuilder.loadTexts: cceWmtHCLiveRequestBytes.setDescription('Total number of live splitting bytes served from the WMT proxy/server.')
cceWmtHCTotalMmsuBytes = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 2, 2, 4), Counter64()).setUnits('Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cceWmtHCTotalMmsuBytes.setStatus('current')
if mibBuilder.loadTexts: cceWmtHCTotalMmsuBytes.setDescription('Total number of bytes served through MMSU from WMT proxy/server.')
cceWmtHCTotalMmstBytes = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 2, 2, 5), Counter64()).setUnits('Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cceWmtHCTotalMmstBytes.setStatus('current')
if mibBuilder.loadTexts: cceWmtHCTotalMmstBytes.setDescription('Total number of bytes served through MMST from WMT proxy/server.')
cceWmtHCTotalHttpBytes = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 2, 2, 6), Counter64()).setUnits('Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cceWmtHCTotalHttpBytes.setStatus('current')
if mibBuilder.loadTexts: cceWmtHCTotalHttpBytes.setDescription('Total number of bytes served through HTTP from WMT proxy/server.')
cceWmtHCTotalMulticastBytes = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 2, 2, 7), Counter64()).setUnits('Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cceWmtHCTotalMulticastBytes.setStatus('current')
if mibBuilder.loadTexts: cceWmtHCTotalMulticastBytes.setDescription('Total number of bytes served through multicast from WMT server.')
cceWmtHCTotalRtspuBytes = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 2, 2, 8), Counter64()).setUnits('Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cceWmtHCTotalRtspuBytes.setStatus('current')
if mibBuilder.loadTexts: cceWmtHCTotalRtspuBytes.setDescription('Total number of bytes served through RTSPU from WMT proxy/server.')
cceWmtHCTotalRtsptBytes = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 2, 2, 9), Counter64()).setUnits('Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cceWmtHCTotalRtsptBytes.setStatus('current')
if mibBuilder.loadTexts: cceWmtHCTotalRtsptBytes.setDescription('Total number of bytes served through RTSPT from WMT proxy/server.')
cceWmtPerfConcurrentRequests = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 2, 3, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceWmtPerfConcurrentRequests.setStatus('current')
if mibBuilder.loadTexts: cceWmtPerfConcurrentRequests.setDescription('Number of concurrent requests the WMT proxy/server is servicing at the current time.')
cceWmtPerfKbitsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 2, 3, 2), Gauge32()).setUnits('Kbits-per-sec').setMaxAccess("readonly")
if mibBuilder.loadTexts: cceWmtPerfKbitsPerSec.setStatus('current')
if mibBuilder.loadTexts: cceWmtPerfKbitsPerSec.setDescription('Kilobits per second to end-users served at the current time.')
cceWmtPerfMulticastSessions = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 2, 3, 3), Gauge32()).setUnits('sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: cceWmtPerfMulticastSessions.setStatus('current')
if mibBuilder.loadTexts: cceWmtPerfMulticastSessions.setDescription('Number of concurrent active multicast sessions at the current time.')
cceWmtPerfMulticastKbitsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 2, 3, 4), Gauge32()).setUnits('Kbits-per-sec').setMaxAccess("readonly")
if mibBuilder.loadTexts: cceWmtPerfMulticastKbitsPerSec.setStatus('current')
if mibBuilder.loadTexts: cceWmtPerfMulticastKbitsPerSec.setDescription('Kilobits per second served through multicast at current time.')
cceCseTotalRequests = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceCseTotalRequests.setStatus('current')
if mibBuilder.loadTexts: cceCseTotalRequests.setDescription('Total number of end-user requests the Cisco Streaming Engine has received.')
cceCseRequestPacketsServed = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 3, 1, 2), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cceCseRequestPacketsServed.setStatus('current')
if mibBuilder.loadTexts: cceCseRequestPacketsServed.setDescription('Total number of packets in the response served by the Cisco Streaming Engine.')
cceCseRequestBytesServed = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 3, 1, 3), Counter32()).setUnits('Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cceCseRequestBytesServed.setStatus('current')
if mibBuilder.loadTexts: cceCseRequestBytesServed.setDescription('Total number of bytes in the response served by the Cisco Streaming Engine.')
cceCseHCRequestPacketsServed = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 3, 2, 1), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cceCseHCRequestPacketsServed.setStatus('current')
if mibBuilder.loadTexts: cceCseHCRequestPacketsServed.setDescription('Total number of packets in the response served by the Cisco Streaming Engine.')
cceCseHCRequestBytesServed = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 3, 2, 2), Counter64()).setUnits('Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cceCseHCRequestBytesServed.setStatus('current')
if mibBuilder.loadTexts: cceCseHCRequestBytesServed.setDescription('Total number of bytes in the response served by the Cisco Streaming Engine.')
cceCsePerfConcurrentReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 3, 3, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceCsePerfConcurrentReqs.setStatus('current')
if mibBuilder.loadTexts: cceCsePerfConcurrentReqs.setDescription('Number of concurrent requests the Cisco Streaming Engine is servicing at the current time.')
cceCsePerfCurrentBandwidth = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 3, 3, 2), Gauge32()).setUnits('Kbits').setMaxAccess("readonly")
if mibBuilder.loadTexts: cceCsePerfCurrentBandwidth.setStatus('current')
if mibBuilder.loadTexts: cceCsePerfCurrentBandwidth.setDescription('The bandwidth reserved(Kilobits) for the current requests the Cisco Streaming Engine is serving.')
cceRpTotalHits = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceRpTotalHits.setStatus('current')
if mibBuilder.loadTexts: cceRpTotalHits.setDescription('Total number of end-user requests whose response body was retrieved from the populated cache of the Real Proxy.')
cceRpTotalMisses = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceRpTotalMisses.setStatus('current')
if mibBuilder.loadTexts: cceRpTotalMisses.setDescription('Total number of end-user requests whose response body was retrieved from remote servers.')
cceRpTotalVodPassThroughs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceRpTotalVodPassThroughs.setStatus('current')
if mibBuilder.loadTexts: cceRpTotalVodPassThroughs.setDescription('Total number of end-user VOD (Video On Demand) requests which cannot be cached by the Real Proxy.')
cceRpTotalLiveSplitReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceRpTotalLiveSplitReqs.setStatus('current')
if mibBuilder.loadTexts: cceRpTotalLiveSplitReqs.setDescription('Total number of end-user live requests for Real Proxy.')
cceRpTotalLivePassThruSplitReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceRpTotalLivePassThruSplitReqs.setStatus('current')
if mibBuilder.loadTexts: cceRpTotalLivePassThruSplitReqs.setDescription('Total number of end-user live requests, which Real Proxy cannot split.')
cceRpTotalIncomingBytes = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 4, 1, 6), Counter32()).setUnits('Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cceRpTotalIncomingBytes.setStatus('current')
if mibBuilder.loadTexts: cceRpTotalIncomingBytes.setDescription('Total bytes received by the Real Proxy from remote servers.')
cceRpTotalOutgoingBytes = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 4, 1, 7), Counter32()).setUnits('Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cceRpTotalOutgoingBytes.setStatus('current')
if mibBuilder.loadTexts: cceRpTotalOutgoingBytes.setDescription('Total bytes sent by the Real Proxy to end-users.')
cceRpHCTotalHits = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 4, 2, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceRpHCTotalHits.setStatus('current')
if mibBuilder.loadTexts: cceRpHCTotalHits.setDescription('Total number of end-user requests whose response body was retrieved from the populated cache of the Real Proxy.')
cceRpHCTotalMisses = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 4, 2, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceRpHCTotalMisses.setStatus('current')
if mibBuilder.loadTexts: cceRpHCTotalMisses.setDescription('Total number of end-user requests whose response body was retrieved from remote servers.')
cceRpHCTotalVodPassThroughs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 4, 2, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceRpHCTotalVodPassThroughs.setStatus('current')
if mibBuilder.loadTexts: cceRpHCTotalVodPassThroughs.setDescription('Total number of end-user VOD (Video On Demand) requests which cannot be cached by the Real Proxy.')
cceRpHCTotalLiveSplitReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 4, 2, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceRpHCTotalLiveSplitReqs.setStatus('current')
if mibBuilder.loadTexts: cceRpHCTotalLiveSplitReqs.setDescription('Total number of end-user live requests for Real Proxy.')
cceRpHCTotalLivePassThruSplitReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 4, 2, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceRpHCTotalLivePassThruSplitReqs.setStatus('current')
if mibBuilder.loadTexts: cceRpHCTotalLivePassThruSplitReqs.setDescription('Total number of end-user live requests, which Real Proxy cannot split.')
cceRpHCTotalIncomingBytes = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 4, 2, 6), Counter64()).setUnits('Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cceRpHCTotalIncomingBytes.setStatus('current')
if mibBuilder.loadTexts: cceRpHCTotalIncomingBytes.setDescription('Total bytes received by the Real Proxy from remote servers.')
cceRpHCTotalOutgoingBytes = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 4, 2, 7), Counter64()).setUnits('Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cceRpHCTotalOutgoingBytes.setStatus('current')
if mibBuilder.loadTexts: cceRpHCTotalOutgoingBytes.setDescription('Total bytes sent by the Real Proxy to end-users.')
cceFailedDiskName = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 5, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cceFailedDiskName.setStatus('current')
if mibBuilder.loadTexts: cceFailedDiskName.setDescription('The Name of the disk on which disk-failure event occurred.')
class AlarmSeverity(TextualConvention, Integer32):
    description = "Each alarm type defined by a vendor type employed by the system has an associated severity. Bellcore TR-NWT-000474 defines these severities as follows: 'critical' An alarm used to indicate a severe, service- affecting condition has occurred and that immediate corrective action is imperative, regardless of the time of day or day of the week. 'major' An alarm used for hardware or software conditions that indicate a serious disruption of service or the malfunctioning or failure of important hardware. These troubles require the immediate attention and response of a technician to restore or maintain system capability. The urgency is less than in critical situations because of a lesser immediate or impending effect on service or system performance. 'minor' An alarm used for troubles that do not have a serious effect on service to customers or for troubles in hardware that are not essential to the operation of the system."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("critical", 1), ("major", 2), ("minor", 3))

cceAlarmCriticalCount = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 6, 2, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceAlarmCriticalCount.setStatus('current')
if mibBuilder.loadTexts: cceAlarmCriticalCount.setDescription("The value of this object specifies the number of alarms currently raised with a severity of 'critical'.")
cceAlarmMajorCount = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 6, 2, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceAlarmMajorCount.setStatus('current')
if mibBuilder.loadTexts: cceAlarmMajorCount.setDescription("The value of this object specifies the number of alarms currently raised with a severity of 'major'.")
cceAlarmMinorCount = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 6, 2, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceAlarmMinorCount.setStatus('current')
if mibBuilder.loadTexts: cceAlarmMinorCount.setDescription("The value of this object specifies the number of alarms currently raised with a severity of 'minor'.")
cceAlarmHistTableSize = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cceAlarmHistTableSize.setStatus('current')
if mibBuilder.loadTexts: cceAlarmHistTableSize.setDescription("This object specifies the number of entries that the cceAlarmHistTable can contain. When a alarm gets generated, and the capacity of the cceAlarmHistTable has reached the value specified by this object, then the agent deletes the oldest entity in order to accommodate the new entry. A value of '0' prevents any history from being retained. ")
cceAlarmHistTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 6, 1, 2), )
if mibBuilder.loadTexts: cceAlarmHistTable.setStatus('current')
if mibBuilder.loadTexts: cceAlarmHistTable.setDescription('This table contains a history of cceAlarmIndicate and cceAlarmClear traps generated by the agent.')
cceAlarmHistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 6, 1, 2, 1), ).setIndexNames((0, "CISCO-CONTENT-ENGINE-MIB", "cceAlarmHistIndex"))
if mibBuilder.loadTexts: cceAlarmHistEntry.setStatus('current')
if mibBuilder.loadTexts: cceAlarmHistEntry.setDescription('The information conveyed by a cceAlarmIndicate or cceAlarmClear trap.')
cceAlarmHistIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 6, 1, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cceAlarmHistIndex.setStatus('current')
if mibBuilder.loadTexts: cceAlarmHistIndex.setDescription("An integer value uniquely identifying the entry in the table. The value of this object starts at '1' and monotonically increases for each alarm condition transition monitored by the agent. If the value of this object is '4294967295', the agent will reset it to '1' upon monitoring the next alarm condition transition.")
cceAlarmHistId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 6, 1, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceAlarmHistId.setStatus('current')
if mibBuilder.loadTexts: cceAlarmHistId.setDescription('This object specifies the type of alarm generated. Each error condition is mapped to an unique alarm-id.')
cceAlarmHistModuleId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 6, 1, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceAlarmHistModuleId.setStatus('current')
if mibBuilder.loadTexts: cceAlarmHistModuleId.setDescription('This object specifies a ACNS Module-Id which generated the alarm.')
cceAlarmHistType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 6, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("raised", 1), ("cleared", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceAlarmHistType.setStatus('current')
if mibBuilder.loadTexts: cceAlarmHistType.setDescription('This object specifies whether the agent created the entry as the result of an alarm being Raised or cleared.')
cceAlarmHistCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 6, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceAlarmHistCategory.setStatus('current')
if mibBuilder.loadTexts: cceAlarmHistCategory.setDescription('This object specifies the probable cause that caused the alarm to be generated.')
cceAlarmHistSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 6, 1, 2, 1, 6), AlarmSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceAlarmHistSeverity.setStatus('current')
if mibBuilder.loadTexts: cceAlarmHistSeverity.setDescription('This object specifies the severity of the alarm generated.')
cceAlarmHistInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 6, 1, 2, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceAlarmHistInfo.setStatus('current')
if mibBuilder.loadTexts: cceAlarmHistInfo.setDescription('This object specifies a human-readable message describing the alarm.')
cceAlarmHistTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 178, 1, 6, 1, 2, 1, 8), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceAlarmHistTimeStamp.setStatus('current')
if mibBuilder.loadTexts: cceAlarmHistTimeStamp.setDescription('This object specifies the value of the sysUpTime object at the time the alarm was generated.')
ciscoContentEngineMIBNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 178, 2))
ciscoContentEngineMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 178, 2, 0))
ciscoContentEngineReadDiskError = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 178, 2, 0, 1))
if mibBuilder.loadTexts: ciscoContentEngineReadDiskError.setStatus('current')
if mibBuilder.loadTexts: ciscoContentEngineReadDiskError.setDescription('First read error occurred on the disk that is being accessed. Additional information about the error is logged to syslog.')
ciscoContentEngineWriteDiskError = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 178, 2, 0, 2))
if mibBuilder.loadTexts: ciscoContentEngineWriteDiskError.setStatus('current')
if mibBuilder.loadTexts: ciscoContentEngineWriteDiskError.setDescription('First write error occurred on the disk that is being accessed. Additional information about the error is logged to syslog.')
ciscoContentEngineWriteTransFailed = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 178, 2, 0, 3))
if mibBuilder.loadTexts: ciscoContentEngineWriteTransFailed.setStatus('current')
if mibBuilder.loadTexts: ciscoContentEngineWriteTransFailed.setDescription('Failed writing to working transaction log located in /local1/working.log. Possible causes are system errors or the log having been removed.')
ciscoContentEngineDataDiskFailed = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 178, 2, 0, 4))
if mibBuilder.loadTexts: ciscoContentEngineDataDiskFailed.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoContentEngineDataDiskFailed.setDescription('A Content Engine data drive failed. Additional information about the error is logged to syslog.')
ciscoContentEngineOverloadBypass = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 178, 2, 0, 5))
if mibBuilder.loadTexts: ciscoContentEngineOverloadBypass.setStatus('current')
if mibBuilder.loadTexts: ciscoContentEngineOverloadBypass.setDescription('A high watermark of percentage of capacity for transparent requests redirected to the Content Engine via WCCP (Web Cache Control Protocol) has been reached. Subsequent WCCP requests are rejected and forwarded to the Origin Server until the utilization falls below a low watermark.')
ciscoContentEngineDiskFailed = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 178, 2, 0, 6)).setObjects(("CISCO-CONTENT-ENGINE-MIB", "cceFailedDiskName"))
if mibBuilder.loadTexts: ciscoContentEngineDiskFailed.setStatus('current')
if mibBuilder.loadTexts: ciscoContentEngineDiskFailed.setDescription('A Content Engine data drive failed. This object supersedes ciscoContentEngineDataDiskFailed. Additional information about the error is logged to syslog.')
cceAlarmCriticalRaised = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 178, 2, 0, 7)).setObjects(("CISCO-CONTENT-ENGINE-MIB", "cceAlarmHistId"), ("CISCO-CONTENT-ENGINE-MIB", "cceAlarmHistModuleId"), ("CISCO-CONTENT-ENGINE-MIB", "cceAlarmHistCategory"), ("CISCO-CONTENT-ENGINE-MIB", "cceAlarmHistInfo"), ("CISCO-CONTENT-ENGINE-MIB", "cceAlarmHistTimeStamp"))
if mibBuilder.loadTexts: cceAlarmCriticalRaised.setStatus('current')
if mibBuilder.loadTexts: cceAlarmCriticalRaised.setDescription('The Agent generates this trap when any module raises a Critical alarm.')
cceAlarmCriticalCleared = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 178, 2, 0, 8)).setObjects(("CISCO-CONTENT-ENGINE-MIB", "cceAlarmHistId"), ("CISCO-CONTENT-ENGINE-MIB", "cceAlarmHistModuleId"), ("CISCO-CONTENT-ENGINE-MIB", "cceAlarmHistCategory"), ("CISCO-CONTENT-ENGINE-MIB", "cceAlarmHistInfo"), ("CISCO-CONTENT-ENGINE-MIB", "cceAlarmHistTimeStamp"))
if mibBuilder.loadTexts: cceAlarmCriticalCleared.setStatus('current')
if mibBuilder.loadTexts: cceAlarmCriticalCleared.setDescription('The Agent generates this trap when any module clears a Critical alarm.')
cceAlarmMajorRaised = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 178, 2, 0, 9)).setObjects(("CISCO-CONTENT-ENGINE-MIB", "cceAlarmHistId"), ("CISCO-CONTENT-ENGINE-MIB", "cceAlarmHistModuleId"), ("CISCO-CONTENT-ENGINE-MIB", "cceAlarmHistCategory"), ("CISCO-CONTENT-ENGINE-MIB", "cceAlarmHistInfo"), ("CISCO-CONTENT-ENGINE-MIB", "cceAlarmHistTimeStamp"))
if mibBuilder.loadTexts: cceAlarmMajorRaised.setStatus('current')
if mibBuilder.loadTexts: cceAlarmMajorRaised.setDescription('The Agent generates this trap when any module raises a Major alarm.')
cceAlarmMajorCleared = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 178, 2, 0, 10)).setObjects(("CISCO-CONTENT-ENGINE-MIB", "cceAlarmHistId"), ("CISCO-CONTENT-ENGINE-MIB", "cceAlarmHistModuleId"), ("CISCO-CONTENT-ENGINE-MIB", "cceAlarmHistCategory"), ("CISCO-CONTENT-ENGINE-MIB", "cceAlarmHistInfo"), ("CISCO-CONTENT-ENGINE-MIB", "cceAlarmHistTimeStamp"))
if mibBuilder.loadTexts: cceAlarmMajorCleared.setStatus('current')
if mibBuilder.loadTexts: cceAlarmMajorCleared.setDescription('The Agent generates this trap when any module clears a Major alarm.')
cceAlarmMinorRaised = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 178, 2, 0, 11)).setObjects(("CISCO-CONTENT-ENGINE-MIB", "cceAlarmHistId"), ("CISCO-CONTENT-ENGINE-MIB", "cceAlarmHistModuleId"), ("CISCO-CONTENT-ENGINE-MIB", "cceAlarmHistCategory"), ("CISCO-CONTENT-ENGINE-MIB", "cceAlarmHistInfo"), ("CISCO-CONTENT-ENGINE-MIB", "cceAlarmHistTimeStamp"))
if mibBuilder.loadTexts: cceAlarmMinorRaised.setStatus('current')
if mibBuilder.loadTexts: cceAlarmMinorRaised.setDescription('The Agent generates this trap when any module raises a Minor alarm.')
cceAlarmMinorCleared = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 178, 2, 0, 12)).setObjects(("CISCO-CONTENT-ENGINE-MIB", "cceAlarmHistId"), ("CISCO-CONTENT-ENGINE-MIB", "cceAlarmHistModuleId"), ("CISCO-CONTENT-ENGINE-MIB", "cceAlarmHistCategory"), ("CISCO-CONTENT-ENGINE-MIB", "cceAlarmHistInfo"), ("CISCO-CONTENT-ENGINE-MIB", "cceAlarmHistTimeStamp"))
if mibBuilder.loadTexts: cceAlarmMinorCleared.setStatus('current')
if mibBuilder.loadTexts: cceAlarmMinorCleared.setDescription('The Agent generates this trap when any module clears a Minor alarm.')
ciscoContentEngineMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 178, 3))
ciscoContentEngineMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 178, 3, 1))
ciscoContentEngineMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 178, 3, 2))
ciscoContentEngineMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 178, 3, 1, 1)).setObjects(("CISCO-CONTENT-ENGINE-MIB", "cceHttpReqGroup"), ("CISCO-CONTENT-ENGINE-MIB", "cceHttpPerfGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoContentEngineMIBCompliance = ciscoContentEngineMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoContentEngineMIBCompliance.setDescription('The compliance statement for Cisco Systems entities which implement the Content Engine applications.')
ciscoContentEngineMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 178, 3, 1, 2)).setObjects(("CISCO-CONTENT-ENGINE-MIB", "cceHttpReqGroup"), ("CISCO-CONTENT-ENGINE-MIB", "cceHttpPerfGroup"), ("CISCO-CONTENT-ENGINE-MIB", "cceCseReqGroup"), ("CISCO-CONTENT-ENGINE-MIB", "cceCseHCGroup"), ("CISCO-CONTENT-ENGINE-MIB", "cceCsePerfGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoContentEngineMIBComplianceRev1 = ciscoContentEngineMIBComplianceRev1.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoContentEngineMIBComplianceRev1.setDescription('The compliance statement for Cisco Systems entities which implement the Content Engine applications.')
ciscoContentEngineMIBComplianceRev2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 178, 3, 1, 3)).setObjects(("CISCO-CONTENT-ENGINE-MIB", "cceHttpReqGroup"), ("CISCO-CONTENT-ENGINE-MIB", "cceHttpPerfGroup"), ("CISCO-CONTENT-ENGINE-MIB", "cceCseReqGroup"), ("CISCO-CONTENT-ENGINE-MIB", "cceCseHCGroup"), ("CISCO-CONTENT-ENGINE-MIB", "cceCsePerfGroup"), ("CISCO-CONTENT-ENGINE-MIB", "cceWmtReqGroup"), ("CISCO-CONTENT-ENGINE-MIB", "cceWmtPerfGroup"), ("CISCO-CONTENT-ENGINE-MIB", "cceWmtHCGroup"), ("CISCO-CONTENT-ENGINE-MIB", "cceRpReqGroup"), ("CISCO-CONTENT-ENGINE-MIB", "cceAlarmInfoGroup"), ("CISCO-CONTENT-ENGINE-MIB", "cceHttpHCReqGroup"), ("CISCO-CONTENT-ENGINE-MIB", "cceRpHCReqGroup"), ("CISCO-CONTENT-ENGINE-MIB", "cceNotificationGroupRev1"), ("CISCO-CONTENT-ENGINE-MIB", "cceNotificationInfoGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoContentEngineMIBComplianceRev2 = ciscoContentEngineMIBComplianceRev2.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoContentEngineMIBComplianceRev2.setDescription('The compliance statement for Cisco Systems entities which implement the Content Engine applications.')
ciscoContentEngineMIBComplianceRev3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 178, 3, 1, 4)).setObjects(("CISCO-CONTENT-ENGINE-MIB", "cceHttpReqGroup"), ("CISCO-CONTENT-ENGINE-MIB", "cceHttpPerfGroup"), ("CISCO-CONTENT-ENGINE-MIB", "cceCseReqGroup"), ("CISCO-CONTENT-ENGINE-MIB", "cceCseHCGroup"), ("CISCO-CONTENT-ENGINE-MIB", "cceCsePerfGroup"), ("CISCO-CONTENT-ENGINE-MIB", "cceWmtReqGroupRev1"), ("CISCO-CONTENT-ENGINE-MIB", "cceWmtPerfGroup"), ("CISCO-CONTENT-ENGINE-MIB", "cceWmtHCGroupRev1"), ("CISCO-CONTENT-ENGINE-MIB", "cceRpReqGroup"), ("CISCO-CONTENT-ENGINE-MIB", "cceAlarmInfoGroup"), ("CISCO-CONTENT-ENGINE-MIB", "cceHttpHCReqGroup"), ("CISCO-CONTENT-ENGINE-MIB", "cceRpHCReqGroup"), ("CISCO-CONTENT-ENGINE-MIB", "cceNotificationGroupRev1"), ("CISCO-CONTENT-ENGINE-MIB", "cceNotificationInfoGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoContentEngineMIBComplianceRev3 = ciscoContentEngineMIBComplianceRev3.setStatus('current')
if mibBuilder.loadTexts: ciscoContentEngineMIBComplianceRev3.setDescription('The compliance statement for Cisco Systems entities which implement the Content Engine applications.')
cceHttpReqGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 178, 3, 2, 1)).setObjects(("CISCO-CONTENT-ENGINE-MIB", "cceHttpRequestsTotal"), ("CISCO-CONTENT-ENGINE-MIB", "cceHttpRequestsNoCacheTotal"), ("CISCO-CONTENT-ENGINE-MIB", "cceHttpRequestsClientErrorTotal"), ("CISCO-CONTENT-ENGINE-MIB", "cceHttpRequestsServerErrorTotal"), ("CISCO-CONTENT-ENGINE-MIB", "cceHttpRequestsBlocked"), ("CISCO-CONTENT-ENGINE-MIB", "cceHttpRequestsHits"), ("CISCO-CONTENT-ENGINE-MIB", "cceHttpRequestsMisses"), ("CISCO-CONTENT-ENGINE-MIB", "cceHttpRequestsBytesServedHits"), ("CISCO-CONTENT-ENGINE-MIB", "cceHttpRequestsBytesServedMisses"), ("CISCO-CONTENT-ENGINE-MIB", "cceHttpRequestsImsInmTotalCache"), ("CISCO-CONTENT-ENGINE-MIB", "cceHttpRequestsImsInmTotalReval"), ("CISCO-CONTENT-ENGINE-MIB", "cceHttpRequestsBytesClientIn"), ("CISCO-CONTENT-ENGINE-MIB", "cceHttpRequestsBytesClientOut"), ("CISCO-CONTENT-ENGINE-MIB", "cceHttpRequestsBytesServerIn"), ("CISCO-CONTENT-ENGINE-MIB", "cceHttpRequestsBytesServerOut"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cceHttpReqGroup = cceHttpReqGroup.setStatus('current')
if mibBuilder.loadTexts: cceHttpReqGroup.setDescription('HTTP proxy request group with low capacity Counter32 objects.')
cceHttpHCReqGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 178, 3, 2, 2)).setObjects(("CISCO-CONTENT-ENGINE-MIB", "cceHttpHCRequestsTotal"), ("CISCO-CONTENT-ENGINE-MIB", "cceHttpHCRequestsNoCacheTotal"), ("CISCO-CONTENT-ENGINE-MIB", "cceHttpHCRequestsClientErrorTotal"), ("CISCO-CONTENT-ENGINE-MIB", "cceHttpHCRequestsServerErrorTotal"), ("CISCO-CONTENT-ENGINE-MIB", "cceHttpHCRequestsBlocked"), ("CISCO-CONTENT-ENGINE-MIB", "cceHttpHCRequestsHits"), ("CISCO-CONTENT-ENGINE-MIB", "cceHttpHCRequestsMisses"), ("CISCO-CONTENT-ENGINE-MIB", "cceHttpHCRequestsBytesServedHits"), ("CISCO-CONTENT-ENGINE-MIB", "cceHttpHCRequestsBytesServedMisses"), ("CISCO-CONTENT-ENGINE-MIB", "cceHttpHCRequestsImsInmTotalCache"), ("CISCO-CONTENT-ENGINE-MIB", "cceHttpHCRequestsImsInmTotalReval"), ("CISCO-CONTENT-ENGINE-MIB", "cceHttpHCRequestsBytesClientIn"), ("CISCO-CONTENT-ENGINE-MIB", "cceHttpHCRequestsBytesClientOut"), ("CISCO-CONTENT-ENGINE-MIB", "cceHttpHCRequestsBytesServerIn"), ("CISCO-CONTENT-ENGINE-MIB", "cceHttpHCRequestsBytesServerOut"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cceHttpHCReqGroup = cceHttpHCReqGroup.setStatus('current')
if mibBuilder.loadTexts: cceHttpHCReqGroup.setDescription('HTTP proxy request group with high capacity Counter64 objects.')
cceHttpPerfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 178, 3, 2, 3)).setObjects(("CISCO-CONTENT-ENGINE-MIB", "cceHttpPerfSamplingTime"), ("CISCO-CONTENT-ENGINE-MIB", "cceHttpPerfReqPerSec"), ("CISCO-CONTENT-ENGINE-MIB", "cceHttpPerfBytesPerSec"), ("CISCO-CONTENT-ENGINE-MIB", "cceHttpPerfServiceTime"), ("CISCO-CONTENT-ENGINE-MIB", "cceHttpPerfHitServiceTime"), ("CISCO-CONTENT-ENGINE-MIB", "cceHttpPerfMissServiceTime"), ("CISCO-CONTENT-ENGINE-MIB", "cceHttpPerfObjectSize"), ("CISCO-CONTENT-ENGINE-MIB", "cceHttpPerfCpuLoad"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cceHttpPerfGroup = cceHttpPerfGroup.setStatus('current')
if mibBuilder.loadTexts: cceHttpPerfGroup.setDescription('HTTP proxy performance group.')
cceNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 178, 3, 2, 4)).setObjects(("CISCO-CONTENT-ENGINE-MIB", "ciscoContentEngineReadDiskError"), ("CISCO-CONTENT-ENGINE-MIB", "ciscoContentEngineWriteDiskError"), ("CISCO-CONTENT-ENGINE-MIB", "ciscoContentEngineWriteTransFailed"), ("CISCO-CONTENT-ENGINE-MIB", "ciscoContentEngineDataDiskFailed"), ("CISCO-CONTENT-ENGINE-MIB", "ciscoContentEngineOverloadBypass"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cceNotificationGroup = cceNotificationGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cceNotificationGroup.setDescription('A collection of notifications used for monitoring errors.')
cceWmtReqGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 178, 3, 2, 5)).setObjects(("CISCO-CONTENT-ENGINE-MIB", "cceWmtTotalRequests"), ("CISCO-CONTENT-ENGINE-MIB", "cceWmtTotalClientErrors"), ("CISCO-CONTENT-ENGINE-MIB", "cceWmtTotalServerErrors"), ("CISCO-CONTENT-ENGINE-MIB", "cceWmtBlockedRequests"), ("CISCO-CONTENT-ENGINE-MIB", "cceWmtRequestHits"), ("CISCO-CONTENT-ENGINE-MIB", "cceWmtRequestMisses"), ("CISCO-CONTENT-ENGINE-MIB", "cceWmtRequestHitsBytesServed"), ("CISCO-CONTENT-ENGINE-MIB", "cceWmtRequestMissesBytesServed"), ("CISCO-CONTENT-ENGINE-MIB", "cceWmtTotalLiveRequests"), ("CISCO-CONTENT-ENGINE-MIB", "cceWmtLiveRequestBytes"), ("CISCO-CONTENT-ENGINE-MIB", "cceWmtTotalMmsuRequests"), ("CISCO-CONTENT-ENGINE-MIB", "cceWmtTotalMmsuBytes"), ("CISCO-CONTENT-ENGINE-MIB", "cceWmtTotalMmstRequests"), ("CISCO-CONTENT-ENGINE-MIB", "cceWmtTotalMmstBytes"), ("CISCO-CONTENT-ENGINE-MIB", "cceWmtTotalHttpRequests"), ("CISCO-CONTENT-ENGINE-MIB", "cceWmtTotalHttpBytes"), ("CISCO-CONTENT-ENGINE-MIB", "cceWmtTotalMulticastBytes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cceWmtReqGroup = cceWmtReqGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cceWmtReqGroup.setDescription('A collection of objects providing request statistics of WMT proxy and server.')
cceWmtHCGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 178, 3, 2, 6)).setObjects(("CISCO-CONTENT-ENGINE-MIB", "cceWmtHCRequestHitsBytesServed"), ("CISCO-CONTENT-ENGINE-MIB", "cceWmtHCRequestMissesBytesServed"), ("CISCO-CONTENT-ENGINE-MIB", "cceWmtHCLiveRequestBytes"), ("CISCO-CONTENT-ENGINE-MIB", "cceWmtHCTotalMmsuBytes"), ("CISCO-CONTENT-ENGINE-MIB", "cceWmtHCTotalMmstBytes"), ("CISCO-CONTENT-ENGINE-MIB", "cceWmtHCTotalHttpBytes"), ("CISCO-CONTENT-ENGINE-MIB", "cceWmtHCTotalMulticastBytes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cceWmtHCGroup = cceWmtHCGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cceWmtHCGroup.setDescription('A collection of 64-bit WMT counters')
cceWmtPerfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 178, 3, 2, 7)).setObjects(("CISCO-CONTENT-ENGINE-MIB", "cceWmtPerfConcurrentRequests"), ("CISCO-CONTENT-ENGINE-MIB", "cceWmtPerfKbitsPerSec"), ("CISCO-CONTENT-ENGINE-MIB", "cceWmtPerfMulticastSessions"), ("CISCO-CONTENT-ENGINE-MIB", "cceWmtPerfMulticastKbitsPerSec"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cceWmtPerfGroup = cceWmtPerfGroup.setStatus('current')
if mibBuilder.loadTexts: cceWmtPerfGroup.setDescription('A collection of objects providing performance statistics of WMT proxy and server.')
cceCseReqGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 178, 3, 2, 8)).setObjects(("CISCO-CONTENT-ENGINE-MIB", "cceCseTotalRequests"), ("CISCO-CONTENT-ENGINE-MIB", "cceCseRequestPacketsServed"), ("CISCO-CONTENT-ENGINE-MIB", "cceCseRequestBytesServed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cceCseReqGroup = cceCseReqGroup.setStatus('current')
if mibBuilder.loadTexts: cceCseReqGroup.setDescription('A collection of objects providing request statistics of a Cisco Streaming Engine.')
cceCseHCGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 178, 3, 2, 9)).setObjects(("CISCO-CONTENT-ENGINE-MIB", "cceCseHCRequestPacketsServed"), ("CISCO-CONTENT-ENGINE-MIB", "cceCseHCRequestBytesServed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cceCseHCGroup = cceCseHCGroup.setStatus('current')
if mibBuilder.loadTexts: cceCseHCGroup.setDescription('A collection of 64 bit counters.')
cceCsePerfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 178, 3, 2, 10)).setObjects(("CISCO-CONTENT-ENGINE-MIB", "cceCsePerfConcurrentReqs"), ("CISCO-CONTENT-ENGINE-MIB", "cceCsePerfCurrentBandwidth"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cceCsePerfGroup = cceCsePerfGroup.setStatus('current')
if mibBuilder.loadTexts: cceCsePerfGroup.setDescription('A collection of objects providing performance statistics of a Cisco Streaming Engine.')
cceRpReqGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 178, 3, 2, 11)).setObjects(("CISCO-CONTENT-ENGINE-MIB", "cceRpTotalHits"), ("CISCO-CONTENT-ENGINE-MIB", "cceRpTotalMisses"), ("CISCO-CONTENT-ENGINE-MIB", "cceRpTotalVodPassThroughs"), ("CISCO-CONTENT-ENGINE-MIB", "cceRpTotalLiveSplitReqs"), ("CISCO-CONTENT-ENGINE-MIB", "cceRpTotalLivePassThruSplitReqs"), ("CISCO-CONTENT-ENGINE-MIB", "cceRpTotalIncomingBytes"), ("CISCO-CONTENT-ENGINE-MIB", "cceRpTotalOutgoingBytes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cceRpReqGroup = cceRpReqGroup.setStatus('current')
if mibBuilder.loadTexts: cceRpReqGroup.setDescription('A collection of objects providing request statistics of a Real Proxy.')
cceRpHCReqGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 178, 3, 2, 12)).setObjects(("CISCO-CONTENT-ENGINE-MIB", "cceRpHCTotalHits"), ("CISCO-CONTENT-ENGINE-MIB", "cceRpHCTotalMisses"), ("CISCO-CONTENT-ENGINE-MIB", "cceRpHCTotalVodPassThroughs"), ("CISCO-CONTENT-ENGINE-MIB", "cceRpHCTotalLiveSplitReqs"), ("CISCO-CONTENT-ENGINE-MIB", "cceRpHCTotalLivePassThruSplitReqs"), ("CISCO-CONTENT-ENGINE-MIB", "cceRpHCTotalIncomingBytes"), ("CISCO-CONTENT-ENGINE-MIB", "cceRpHCTotalOutgoingBytes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cceRpHCReqGroup = cceRpHCReqGroup.setStatus('current')
if mibBuilder.loadTexts: cceRpHCReqGroup.setDescription('A collection of 64-bit Real Proxy counters')
cceNotificationGroupRev1 = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 178, 3, 2, 13)).setObjects(("CISCO-CONTENT-ENGINE-MIB", "ciscoContentEngineReadDiskError"), ("CISCO-CONTENT-ENGINE-MIB", "ciscoContentEngineWriteDiskError"), ("CISCO-CONTENT-ENGINE-MIB", "ciscoContentEngineWriteTransFailed"), ("CISCO-CONTENT-ENGINE-MIB", "ciscoContentEngineOverloadBypass"), ("CISCO-CONTENT-ENGINE-MIB", "ciscoContentEngineDiskFailed"), ("CISCO-CONTENT-ENGINE-MIB", "cceAlarmCriticalRaised"), ("CISCO-CONTENT-ENGINE-MIB", "cceAlarmCriticalCleared"), ("CISCO-CONTENT-ENGINE-MIB", "cceAlarmMajorRaised"), ("CISCO-CONTENT-ENGINE-MIB", "cceAlarmMajorCleared"), ("CISCO-CONTENT-ENGINE-MIB", "cceAlarmMinorRaised"), ("CISCO-CONTENT-ENGINE-MIB", "cceAlarmMinorCleared"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cceNotificationGroupRev1 = cceNotificationGroupRev1.setStatus('current')
if mibBuilder.loadTexts: cceNotificationGroupRev1.setDescription('A collection of notifications used for monitoring errors.')
cceAlarmInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 178, 3, 2, 14)).setObjects(("CISCO-CONTENT-ENGINE-MIB", "cceAlarmCriticalCount"), ("CISCO-CONTENT-ENGINE-MIB", "cceAlarmMajorCount"), ("CISCO-CONTENT-ENGINE-MIB", "cceAlarmMinorCount"), ("CISCO-CONTENT-ENGINE-MIB", "cceAlarmHistTableSize"), ("CISCO-CONTENT-ENGINE-MIB", "cceAlarmHistId"), ("CISCO-CONTENT-ENGINE-MIB", "cceAlarmHistModuleId"), ("CISCO-CONTENT-ENGINE-MIB", "cceAlarmHistSeverity"), ("CISCO-CONTENT-ENGINE-MIB", "cceAlarmHistType"), ("CISCO-CONTENT-ENGINE-MIB", "cceAlarmHistCategory"), ("CISCO-CONTENT-ENGINE-MIB", "cceAlarmHistInfo"), ("CISCO-CONTENT-ENGINE-MIB", "cceAlarmHistTimeStamp"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cceAlarmInfoGroup = cceAlarmInfoGroup.setStatus('current')
if mibBuilder.loadTexts: cceAlarmInfoGroup.setDescription('A collection of objects which provides info about Cisco Content Engine alarms.')
cceNotificationInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 178, 3, 2, 15)).setObjects(("CISCO-CONTENT-ENGINE-MIB", "cceFailedDiskName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cceNotificationInfoGroup = cceNotificationInfoGroup.setStatus('current')
if mibBuilder.loadTexts: cceNotificationInfoGroup.setDescription('A collection of objects which provides info about notifications.')
cceWmtReqGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 178, 3, 2, 16)).setObjects(("CISCO-CONTENT-ENGINE-MIB", "cceWmtTotalRequests"), ("CISCO-CONTENT-ENGINE-MIB", "cceWmtTotalClientErrors"), ("CISCO-CONTENT-ENGINE-MIB", "cceWmtTotalServerErrors"), ("CISCO-CONTENT-ENGINE-MIB", "cceWmtBlockedRequests"), ("CISCO-CONTENT-ENGINE-MIB", "cceWmtRequestHits"), ("CISCO-CONTENT-ENGINE-MIB", "cceWmtRequestMisses"), ("CISCO-CONTENT-ENGINE-MIB", "cceWmtRequestHitsBytesServed"), ("CISCO-CONTENT-ENGINE-MIB", "cceWmtRequestMissesBytesServed"), ("CISCO-CONTENT-ENGINE-MIB", "cceWmtTotalLiveRequests"), ("CISCO-CONTENT-ENGINE-MIB", "cceWmtLiveRequestBytes"), ("CISCO-CONTENT-ENGINE-MIB", "cceWmtTotalMmsuRequests"), ("CISCO-CONTENT-ENGINE-MIB", "cceWmtTotalMmsuBytes"), ("CISCO-CONTENT-ENGINE-MIB", "cceWmtTotalMmstRequests"), ("CISCO-CONTENT-ENGINE-MIB", "cceWmtTotalMmstBytes"), ("CISCO-CONTENT-ENGINE-MIB", "cceWmtTotalHttpRequests"), ("CISCO-CONTENT-ENGINE-MIB", "cceWmtTotalHttpBytes"), ("CISCO-CONTENT-ENGINE-MIB", "cceWmtTotalRtspuRequests"), ("CISCO-CONTENT-ENGINE-MIB", "cceWmtTotalRtspuBytes"), ("CISCO-CONTENT-ENGINE-MIB", "cceWmtTotalRtsptRequests"), ("CISCO-CONTENT-ENGINE-MIB", "cceWmtTotalRtsptBytes"), ("CISCO-CONTENT-ENGINE-MIB", "cceWmtTotalMulticastBytes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cceWmtReqGroupRev1 = cceWmtReqGroupRev1.setStatus('current')
if mibBuilder.loadTexts: cceWmtReqGroupRev1.setDescription('A collection of objects providing request statistics of WMT proxy and server.')
cceWmtHCGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 178, 3, 2, 17)).setObjects(("CISCO-CONTENT-ENGINE-MIB", "cceWmtHCRequestHitsBytesServed"), ("CISCO-CONTENT-ENGINE-MIB", "cceWmtHCRequestMissesBytesServed"), ("CISCO-CONTENT-ENGINE-MIB", "cceWmtHCLiveRequestBytes"), ("CISCO-CONTENT-ENGINE-MIB", "cceWmtHCTotalMmsuBytes"), ("CISCO-CONTENT-ENGINE-MIB", "cceWmtHCTotalMmstBytes"), ("CISCO-CONTENT-ENGINE-MIB", "cceWmtHCTotalHttpBytes"), ("CISCO-CONTENT-ENGINE-MIB", "cceWmtHCTotalRtspuBytes"), ("CISCO-CONTENT-ENGINE-MIB", "cceWmtHCTotalRtsptBytes"), ("CISCO-CONTENT-ENGINE-MIB", "cceWmtHCTotalMulticastBytes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cceWmtHCGroupRev1 = cceWmtHCGroupRev1.setStatus('current')
if mibBuilder.loadTexts: cceWmtHCGroupRev1.setDescription('A collection of 64-bit WMT counters')
mibBuilder.exportSymbols("CISCO-CONTENT-ENGINE-MIB", cceHttpRequestsHits=cceHttpRequestsHits, cceHttpRequestsBlocked=cceHttpRequestsBlocked, cceWmtTotalMmsuRequests=cceWmtTotalMmsuRequests, cceWmtTotalMulticastBytes=cceWmtTotalMulticastBytes, cceHttpPerfMissServiceTime=cceHttpPerfMissServiceTime, cceAlarmHistCategory=cceAlarmHistCategory, ciscoContentEngineMIBComplianceRev3=ciscoContentEngineMIBComplianceRev3, ciscoContentEngineMIBObjects=ciscoContentEngineMIBObjects, cceHttpHCRequestsBytesServerIn=cceHttpHCRequestsBytesServerIn, cceCseRequestPacketsServed=cceCseRequestPacketsServed, cceCsePerfConcurrentReqs=cceCsePerfConcurrentReqs, cceRpHCTotalIncomingBytes=cceRpHCTotalIncomingBytes, cceRpTotalLiveSplitReqs=cceRpTotalLiveSplitReqs, cceHttpReqGroup=cceHttpReqGroup, cceWmtHCTotalMmsuBytes=cceWmtHCTotalMmsuBytes, cceWmtHCRequests=cceWmtHCRequests, cceAlarmMajorRaised=cceAlarmMajorRaised, cceCseGroup=cceCseGroup, cceHttpHCRequestsImsInmTotalReval=cceHttpHCRequestsImsInmTotalReval, cceWmtHCLiveRequestBytes=cceWmtHCLiveRequestBytes, cceWmtTotalHttpRequests=cceWmtTotalHttpRequests, cceHttpHCRequestsNoCacheTotal=cceHttpHCRequestsNoCacheTotal, ciscoContentEngineMIBNotificationPrefix=ciscoContentEngineMIBNotificationPrefix, cceHttpRequestsTotal=cceHttpRequestsTotal, cceAlarmHistEntry=cceAlarmHistEntry, cceHttpRequestsBytesServerIn=cceHttpRequestsBytesServerIn, cceHttpPerfServiceTime=cceHttpPerfServiceTime, cceHttpHCRequestsMisses=cceHttpHCRequestsMisses, cceCseReqGroup=cceCseReqGroup, cceWmtTotalRtsptBytes=cceWmtTotalRtsptBytes, cceRpRequests=cceRpRequests, cceCsePerfCurrentBandwidth=cceCsePerfCurrentBandwidth, ciscoContentEngineWriteTransFailed=ciscoContentEngineWriteTransFailed, cceNotificationGroupRev1=cceNotificationGroupRev1, cceWmtRequestHitsBytesServed=cceWmtRequestHitsBytesServed, cceRpReqGroup=cceRpReqGroup, ciscoContentEngineDataDiskFailed=ciscoContentEngineDataDiskFailed, cceWmtReqGroup=cceWmtReqGroup, cceWmtHCTotalRtsptBytes=cceWmtHCTotalRtsptBytes, cceWmtHCTotalRtspuBytes=cceWmtHCTotalRtspuBytes, cceWmtTotalRequests=cceWmtTotalRequests, cceWmtPerfKbitsPerSec=cceWmtPerfKbitsPerSec, ciscoContentEngineDiskFailed=ciscoContentEngineDiskFailed, cceHttpPerfHitServiceTime=cceHttpPerfHitServiceTime, cceHttpPerfReqPerSec=cceHttpPerfReqPerSec, cceWmtTotalServerErrors=cceWmtTotalServerErrors, cceWmtTotalLiveRequests=cceWmtTotalLiveRequests, ciscoContentEngineMIBConformance=ciscoContentEngineMIBConformance, cceWmtHCGroup=cceWmtHCGroup, PYSNMP_MODULE_ID=ciscoContentEngineMIB, ciscoContentEngineWriteDiskError=ciscoContentEngineWriteDiskError, cceWmtTotalRtsptRequests=cceWmtTotalRtsptRequests, cceNotificationGroup=cceNotificationGroup, cceWmtHCGroupRev1=cceWmtHCGroupRev1, cceHttpRequestsImsInmTotalReval=cceHttpRequestsImsInmTotalReval, cceCsePerf=cceCsePerf, cceWmtHCTotalHttpBytes=cceWmtHCTotalHttpBytes, ciscoContentEngineMIBCompliance=ciscoContentEngineMIBCompliance, AlarmSeverity=AlarmSeverity, cceWmtReqGroupRev1=cceWmtReqGroupRev1, cceCsePerfGroup=cceCsePerfGroup, cceAlarmHistModuleId=cceAlarmHistModuleId, cceRpTotalHits=cceRpTotalHits, cceRpHCTotalLivePassThruSplitReqs=cceRpHCTotalLivePassThruSplitReqs, cceHttpRequestsClientErrorTotal=cceHttpRequestsClientErrorTotal, cceCseRequestBytesServed=cceCseRequestBytesServed, cceWmtTotalRtspuBytes=cceWmtTotalRtspuBytes, ciscoContentEngineReadDiskError=ciscoContentEngineReadDiskError, cceWmtRequests=cceWmtRequests, cceHttpPerfObjectSize=cceHttpPerfObjectSize, cceAlarmHistSeverity=cceAlarmHistSeverity, cceAlarmMajorCleared=cceAlarmMajorCleared, cceRpHCTotalLiveSplitReqs=cceRpHCTotalLiveSplitReqs, cceCseTotalRequests=cceCseTotalRequests, cceRpTotalVodPassThroughs=cceRpTotalVodPassThroughs, ciscoContentEngineMIBCompliances=ciscoContentEngineMIBCompliances, cceRpHCTotalHits=cceRpHCTotalHits, cceAlarmInfoGroup=cceAlarmInfoGroup, cceCseRequests=cceCseRequests, cceAlarmMajorCount=cceAlarmMajorCount, cceWmtPerfMulticastKbitsPerSec=cceWmtPerfMulticastKbitsPerSec, cceCseHCRequestPacketsServed=cceCseHCRequestPacketsServed, cceHttpGroup=cceHttpGroup, cceHttpRequestsImsInmTotalCache=cceHttpRequestsImsInmTotalCache, cceHttpPerfGroup=cceHttpPerfGroup, cceAlarmHistInfo=cceAlarmHistInfo, cceHttpPerfSamplingTime=cceHttpPerfSamplingTime, cceHttpRequestsBytesServedMisses=cceHttpRequestsBytesServedMisses, cceWmtPerfMulticastSessions=cceWmtPerfMulticastSessions, cceWmtTotalRtspuRequests=cceWmtTotalRtspuRequests, cceAlarmCriticalCleared=cceAlarmCriticalCleared, cceWmtBlockedRequests=cceWmtBlockedRequests, cceHttpHCRequestsBytesClientOut=cceHttpHCRequestsBytesClientOut, cceAlarmMinorCount=cceAlarmMinorCount, cceRpHCTotalOutgoingBytes=cceRpHCTotalOutgoingBytes, cceCseHCRequestBytesServed=cceCseHCRequestBytesServed, cceWmtRequestHits=cceWmtRequestHits, cceFailedDiskName=cceFailedDiskName, cceCseHCGroup=cceCseHCGroup, cceWmtHCRequestMissesBytesServed=cceWmtHCRequestMissesBytesServed, cceHttpRequestsServerErrorTotal=cceHttpRequestsServerErrorTotal, cceHttpRequests=cceHttpRequests, cceHttpPerfCpuLoad=cceHttpPerfCpuLoad, cceWmtGroup=cceWmtGroup, cceNotificationInfo=cceNotificationInfo, cceHttpRequestsNoCacheTotal=cceHttpRequestsNoCacheTotal, cceHttpHCRequestsClientErrorTotal=cceHttpHCRequestsClientErrorTotal, cceRpTotalMisses=cceRpTotalMisses, cceAlarmCriticalCount=cceAlarmCriticalCount, cceHttpHCRequestsHits=cceHttpHCRequestsHits, cceWmtHCTotalMulticastBytes=cceWmtHCTotalMulticastBytes, cceWmtTotalMmstRequests=cceWmtTotalMmstRequests, cceHttpPerf=cceHttpPerf, cceHttpPerfBytesPerSec=cceHttpPerfBytesPerSec, cceHttpHCReqGroup=cceHttpHCReqGroup, cceAlarmHistory=cceAlarmHistory, cceHttpRequestsBytesServerOut=cceHttpRequestsBytesServerOut, cceWmtPerfConcurrentRequests=cceWmtPerfConcurrentRequests, cceRpTotalOutgoingBytes=cceRpTotalOutgoingBytes, cceAlarmHistTimeStamp=cceAlarmHistTimeStamp, cceRpHCTotalMisses=cceRpHCTotalMisses, cceHttpHCRequestsBlocked=cceHttpHCRequestsBlocked, cceAlarmCriticalRaised=cceAlarmCriticalRaised, cceHttpRequestsBytesServedHits=cceHttpRequestsBytesServedHits, cceHttpHCRequestsServerErrorTotal=cceHttpHCRequestsServerErrorTotal, cceHttpRequestsBytesClientOut=cceHttpRequestsBytesClientOut, ciscoContentEngineMIBNotifications=ciscoContentEngineMIBNotifications, cceRpTotalIncomingBytes=cceRpTotalIncomingBytes, cceWmtPerfGroup=cceWmtPerfGroup, cceCseHCRequests=cceCseHCRequests, ciscoContentEngineMIBComplianceRev1=ciscoContentEngineMIBComplianceRev1, cceAlarmHistId=cceAlarmHistId, cceAlarmGroup=cceAlarmGroup, cceWmtRequestMissesBytesServed=cceWmtRequestMissesBytesServed, cceAlarmMinorCleared=cceAlarmMinorCleared, cceRpTotalLivePassThruSplitReqs=cceRpTotalLivePassThruSplitReqs, cceHttpHCRequestsBytesServedMisses=cceHttpHCRequestsBytesServedMisses, cceAlarmHistIndex=cceAlarmHistIndex, cceHttpRequestsBytesClientIn=cceHttpRequestsBytesClientIn, cceRpHCReqGroup=cceRpHCReqGroup, cceHttpHCRequestsBytesServedHits=cceHttpHCRequestsBytesServedHits, ciscoContentEngineMIBGroups=ciscoContentEngineMIBGroups, cceHttpHCRequestsBytesServerOut=cceHttpHCRequestsBytesServerOut, cceAlarmMinorRaised=cceAlarmMinorRaised, cceWmtHCRequestHitsBytesServed=cceWmtHCRequestHitsBytesServed, cceWmtLiveRequestBytes=cceWmtLiveRequestBytes, ciscoContentEngineOverloadBypass=ciscoContentEngineOverloadBypass, cceWmtTotalHttpBytes=cceWmtTotalHttpBytes, cceAlarmHistTable=cceAlarmHistTable, cceRpGroup=cceRpGroup, cceHttpHCRequestsBytesClientIn=cceHttpHCRequestsBytesClientIn, cceAlarmMonitoring=cceAlarmMonitoring, cceRpHCTotalVodPassThroughs=cceRpHCTotalVodPassThroughs, cceNotificationInfoGroup=cceNotificationInfoGroup, ciscoContentEngineMIBComplianceRev2=ciscoContentEngineMIBComplianceRev2, cceRpHCRequests=cceRpHCRequests, cceHttpRequestsMisses=cceHttpRequestsMisses, ciscoContentEngineMIB=ciscoContentEngineMIB, cceWmtRequestMisses=cceWmtRequestMisses, cceWmtTotalMmsuBytes=cceWmtTotalMmsuBytes, cceHttpHCRequestsTotal=cceHttpHCRequestsTotal, cceWmtTotalMmstBytes=cceWmtTotalMmstBytes, cceWmtPerf=cceWmtPerf, cceAlarmHistTableSize=cceAlarmHistTableSize, cceWmtHCTotalMmstBytes=cceWmtHCTotalMmstBytes, cceAlarmHistType=cceAlarmHistType, cceHttpHCRequestsImsInmTotalCache=cceHttpHCRequestsImsInmTotalCache, cceWmtTotalClientErrors=cceWmtTotalClientErrors)
