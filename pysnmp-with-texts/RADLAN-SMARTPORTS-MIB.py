#
# PySNMP MIB module RADLAN-SMARTPORTS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RADLAN-SMARTPORTS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:09:49 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint")
InterfaceIndexOrZero, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero")
EnabledStatus, = mibBuilder.importSymbols("P-BRIDGE-MIB", "EnabledStatus")
rnd, = mibBuilder.importSymbols("RADLAN-MIB", "rnd")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Integer32, IpAddress, Counter32, ModuleIdentity, Counter64, Unsigned32, MibIdentifier, ObjectIdentity, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, TimeTicks, Bits, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "IpAddress", "Counter32", "ModuleIdentity", "Counter64", "Unsigned32", "MibIdentifier", "ObjectIdentity", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "TimeTicks", "Bits", "Gauge32")
TextualConvention, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "RowStatus")
rlSmartPorts = ModuleIdentity((1, 3, 6, 1, 4, 1, 89, 140))
rlSmartPorts.setRevisions(('2008-07-30 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: rlSmartPorts.setRevisionsDescriptions(('Initial revision.',))
if mibBuilder.loadTexts: rlSmartPorts.setLastUpdated('200807300000Z')
if mibBuilder.loadTexts: rlSmartPorts.setOrganization('Marvell Computer Communications Ltd.')
if mibBuilder.loadTexts: rlSmartPorts.setContactInfo('www.Marvell.com')
if mibBuilder.loadTexts: rlSmartPorts.setDescription('The private MIB module definition for Smart Ports - provide a convenient way to save and share common configurations. Smart Ports group a group of command to be applied on a port or a trunk OR on a global configuration context. In addition Smart port application provide a database per interface (or global configuration) to list applied macros. Each smart port macro can either a user-defined or pre-defined.')
class MacroType(TextualConvention, Integer32):
    description = 'Smart Ports macro type.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("rlSmartPortsMacroInterfaceVendorProvided", 1), ("rlSmartPortsMacroGloablVendorProvided", 2), ("rlSmartPortsMacroUserCreated", 3))

class RlSmartPortsMacroName(DisplayString):
    description = 'Macro name.'
    status = 'current'
    subtypeSpec = DisplayString.subtypeSpec + ValueSizeConstraint(1, 32)

class RlSmartPortsMacroNameOrZero(DisplayString):
    description = 'Macro name.'
    status = 'current'
    subtypeSpec = DisplayString.subtypeSpec + ValueSizeConstraint(0, 32)

rlSmartPortsMacroManageTable = MibTable((1, 3, 6, 1, 4, 1, 89, 140, 1), )
if mibBuilder.loadTexts: rlSmartPortsMacroManageTable.setStatus('current')
if mibBuilder.loadTexts: rlSmartPortsMacroManageTable.setDescription(' The table listing available smart ports macros, holding: macro name macro type: user defined, Marvell provided per interface Marvell provided globally and matches a macro index to be used as identifier in rlSmartPortsMacroContentTable where the macro content really IS Allow to add/remove user defined macros.')
rlSmartPortsMacroManageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 140, 1, 1), ).setIndexNames((1, "RADLAN-SMARTPORTS-MIB", "rlSmartPortsMacroName"))
if mibBuilder.loadTexts: rlSmartPortsMacroManageEntry.setStatus('current')
if mibBuilder.loadTexts: rlSmartPortsMacroManageEntry.setDescription(' An entry in the rlSmartPortsMacroManageTable.')
rlSmartPortsMacroName = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 140, 1, 1, 1), RlSmartPortsMacroName())
if mibBuilder.loadTexts: rlSmartPortsMacroName.setStatus('current')
if mibBuilder.loadTexts: rlSmartPortsMacroName.setDescription('Macro name.')
rlSmartPortsMacroIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 140, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlSmartPortsMacroIndex.setStatus('current')
if mibBuilder.loadTexts: rlSmartPortsMacroIndex.setDescription("This variable identifies the macro's index. An arbitrary incremental Index used as identifier in rlSmartPortsMacroContentTable where the macro content really IS.")
rlSmartPortsMacroType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 140, 1, 1, 3), MacroType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlSmartPortsMacroType.setStatus('current')
if mibBuilder.loadTexts: rlSmartPortsMacroType.setDescription('This variable identifies the macro type: user defined, Marvell provided per interface Marvell provided globally')
rlSmartPortsMacroStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 140, 1, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlSmartPortsMacroStatus.setStatus('current')
if mibBuilder.loadTexts: rlSmartPortsMacroStatus.setDescription('The status of a table entry. It is used to delete/Add an entry from this table.')
rlSmartPortsMacroKeywords = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 140, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 160))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlSmartPortsMacroKeywords.setStatus('current')
if mibBuilder.loadTexts: rlSmartPortsMacroKeywords.setDescription('List of Macro Keywords. if there are')
rlSmartPortsMacroDesc1 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 140, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 160))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlSmartPortsMacroDesc1.setStatus('current')
if mibBuilder.loadTexts: rlSmartPortsMacroDesc1.setDescription('List of Macro descriptions. if there are')
rlSmartPortsMacroDesc2 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 140, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 160))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlSmartPortsMacroDesc2.setStatus('current')
if mibBuilder.loadTexts: rlSmartPortsMacroDesc2.setDescription('continue List of Macro descriptions. if there are')
rlSmartPortsMacroContentTable = MibTable((1, 3, 6, 1, 4, 1, 89, 140, 2), )
if mibBuilder.loadTexts: rlSmartPortsMacroContentTable.setStatus('current')
if mibBuilder.loadTexts: rlSmartPortsMacroContentTable.setDescription("The table holds smart ports macro's content. Entries are allowed to be added ONLY on macro indexes that 1) has a corresponding entry in rlSmartPortsMacroManageTable 2) has rlSmartPortsMacroType = rlSmartPortsMacroUserCreated")
rlSmartPortsMacroContentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 140, 2, 1), ).setIndexNames((0, "RADLAN-SMARTPORTS-MIB", "rlSmartPortsMacroIndex"), (0, "RADLAN-SMARTPORTS-MIB", "rlSmartPortsMacroOctetIndex"))
if mibBuilder.loadTexts: rlSmartPortsMacroContentEntry.setStatus('current')
if mibBuilder.loadTexts: rlSmartPortsMacroContentEntry.setDescription(' An entry in the elSmartPortsMacroManageTable.')
rlSmartPortsMacroOctetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 140, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 19)))
if mibBuilder.loadTexts: rlSmartPortsMacroOctetIndex.setStatus('current')
if mibBuilder.loadTexts: rlSmartPortsMacroOctetIndex.setDescription("This variable identifies the line number in the macro's content text. To allow full macro size of 3k = 19 * 160 = 3040")
rlSmartPortsMacroText = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 140, 2, 1, 2), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlSmartPortsMacroText.setStatus('current')
if mibBuilder.loadTexts: rlSmartPortsMacroText.setDescription('Macro content.')
rlSmartPortsMacroDescriptionTable = MibTable((1, 3, 6, 1, 4, 1, 89, 140, 3), )
if mibBuilder.loadTexts: rlSmartPortsMacroDescriptionTable.setStatus('current')
if mibBuilder.loadTexts: rlSmartPortsMacroDescriptionTable.setDescription("The table holds smart ports macro's name globally (rlSmartPortsMacroDescriptionIndex == 0) interface (port or trunk).")
rlSmartPortsMacroDescriptionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 140, 3, 1), ).setIndexNames((0, "RADLAN-SMARTPORTS-MIB", "rlSmartPortsMacroDescriptionIndex"))
if mibBuilder.loadTexts: rlSmartPortsMacroDescriptionEntry.setStatus('current')
if mibBuilder.loadTexts: rlSmartPortsMacroDescriptionEntry.setDescription(' An entry in the rlSmartPortsMacroInterfaceTable.')
rlSmartPortsMacroDescriptionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 140, 3, 1, 1), InterfaceIndexOrZero())
if mibBuilder.loadTexts: rlSmartPortsMacroDescriptionIndex.setStatus('current')
if mibBuilder.loadTexts: rlSmartPortsMacroDescriptionIndex.setDescription("This variable identifies global configuration when equals 0 OR local port or trunk on which the user saved Macro's name.")
rlSmartPortsMacroDescriptionText = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 140, 3, 1, 2), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlSmartPortsMacroDescriptionText.setStatus('current')
if mibBuilder.loadTexts: rlSmartPortsMacroDescriptionText.setDescription('Macro name.')
rlSmartPortsMacroDescriptionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 140, 3, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlSmartPortsMacroDescriptionStatus.setStatus('current')
if mibBuilder.loadTexts: rlSmartPortsMacroDescriptionStatus.setDescription('The status of a table entry. It is used to delete/Add an entry from this table.')
rlSmartPortsFreeIndexes = MibScalar((1, 3, 6, 1, 4, 1, 89, 140, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlSmartPortsFreeIndexes.setStatus('current')
if mibBuilder.loadTexts: rlSmartPortsFreeIndexes.setDescription('Returns free index to set in rlSmartPortsMacroIndex when macro is added.')
rlSmartPortsDiagMacroName = MibScalar((1, 3, 6, 1, 4, 1, 89, 140, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlSmartPortsDiagMacroName.setStatus('current')
if mibBuilder.loadTexts: rlSmartPortsDiagMacroName.setDescription('In case the last macro had failed you will get this name from the specific terminal you had used .')
rlSmartPortsDiagLineNumber = MibScalar((1, 3, 6, 1, 4, 1, 89, 140, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlSmartPortsDiagLineNumber.setStatus('current')
if mibBuilder.loadTexts: rlSmartPortsDiagLineNumber.setDescription("In case the last macro had failed you will get i'ts line number from specific terminal you had used .")
rlSmartPortsDiagCommandLine = MibScalar((1, 3, 6, 1, 4, 1, 89, 140, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlSmartPortsDiagCommandLine.setStatus('current')
if mibBuilder.loadTexts: rlSmartPortsDiagCommandLine.setDescription("In case the last macro had failed you will get i'ts command line number from specific terminal you had used .")
rlSmartPortsCondenseMode = MibScalar((1, 3, 6, 1, 4, 1, 89, 140, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlSmartPortsCondenseMode.setStatus('current')
if mibBuilder.loadTexts: rlSmartPortsCondenseMode.setDescription('disabled - in macro description macro such as x no_x will be removed enabled - in macro description macro such as x no_x will not be removed when condense mode is enabled (by default) each time a macro with the name no_x is applied and prior to that a macro x was applied , they will be removed from the list... ')
mibBuilder.exportSymbols("RADLAN-SMARTPORTS-MIB", rlSmartPortsDiagLineNumber=rlSmartPortsDiagLineNumber, rlSmartPortsMacroDescriptionStatus=rlSmartPortsMacroDescriptionStatus, rlSmartPortsMacroContentEntry=rlSmartPortsMacroContentEntry, rlSmartPortsMacroStatus=rlSmartPortsMacroStatus, rlSmartPortsMacroOctetIndex=rlSmartPortsMacroOctetIndex, rlSmartPortsMacroDescriptionEntry=rlSmartPortsMacroDescriptionEntry, rlSmartPortsMacroDescriptionText=rlSmartPortsMacroDescriptionText, rlSmartPortsMacroDesc1=rlSmartPortsMacroDesc1, rlSmartPortsMacroContentTable=rlSmartPortsMacroContentTable, rlSmartPortsDiagMacroName=rlSmartPortsDiagMacroName, rlSmartPortsMacroManageEntry=rlSmartPortsMacroManageEntry, PYSNMP_MODULE_ID=rlSmartPorts, rlSmartPortsMacroKeywords=rlSmartPortsMacroKeywords, rlSmartPortsMacroName=rlSmartPortsMacroName, rlSmartPortsMacroDescriptionTable=rlSmartPortsMacroDescriptionTable, rlSmartPorts=rlSmartPorts, rlSmartPortsCondenseMode=rlSmartPortsCondenseMode, RlSmartPortsMacroName=RlSmartPortsMacroName, rlSmartPortsMacroType=rlSmartPortsMacroType, MacroType=MacroType, rlSmartPortsMacroDescriptionIndex=rlSmartPortsMacroDescriptionIndex, rlSmartPortsMacroDesc2=rlSmartPortsMacroDesc2, RlSmartPortsMacroNameOrZero=RlSmartPortsMacroNameOrZero, rlSmartPortsMacroManageTable=rlSmartPortsMacroManageTable, rlSmartPortsMacroIndex=rlSmartPortsMacroIndex, rlSmartPortsDiagCommandLine=rlSmartPortsDiagCommandLine, rlSmartPortsMacroText=rlSmartPortsMacroText, rlSmartPortsFreeIndexes=rlSmartPortsFreeIndexes)
