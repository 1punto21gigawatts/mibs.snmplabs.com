#
# PySNMP MIB module ENTERASYS-MGMD-EXT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ENTERASYS-MGMD-EXT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:03:58 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection")
dot1dBasePort, = mibBuilder.importSymbols("BRIDGE-MIB", "dot1dBasePort")
etsysModules, = mibBuilder.importSymbols("ENTERASYS-MIB-NAMES", "etsysModules")
ifIndex, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "ifIndex", "InterfaceIndex")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
EnabledStatus, = mibBuilder.importSymbols("P-BRIDGE-MIB", "EnabledStatus")
PortList, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "PortList")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
IpAddress, Counter32, Gauge32, MibIdentifier, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Counter64, Bits, iso, Unsigned32, Integer32, NotificationType, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Counter32", "Gauge32", "MibIdentifier", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Counter64", "Bits", "iso", "Unsigned32", "Integer32", "NotificationType", "ModuleIdentity")
TruthValue, TextualConvention, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "DisplayString", "RowStatus")
etsysMgmdExtMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 5624, 1, 2, 71))
etsysMgmdExtMIB.setRevisions(('2010-02-08 14:08',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: etsysMgmdExtMIB.setRevisionsDescriptions(('The initial version of this MIB module',))
if mibBuilder.loadTexts: etsysMgmdExtMIB.setLastUpdated('201002081408Z')
if mibBuilder.loadTexts: etsysMgmdExtMIB.setOrganization('Enterasys Networks, Inc')
if mibBuilder.loadTexts: etsysMgmdExtMIB.setContactInfo('Postal: Enterasys Networks 50 Minuteman Rd. Andover, MA 01810-1008 USA Phone: +1 978 684 1000 E-mail: support@enterasys.com WWW: http://www.enterasys.com')
if mibBuilder.loadTexts: etsysMgmdExtMIB.setDescription('This MIB module defines a portion of the SNMP MIB under the Enterasys Networks enterprise OID pertaining to IGMP operation on a device. This MIB contains Enterasys proprietary MGMD information that goes above and beyond any IETF multicast MIBs. It is intended to cover any Enterasys value added features and configurations.')
class MGMDNumGroupsTc(TextualConvention, Integer32):
    description = ' This textual convention describes the available MGMD number of groups size selection. None means no flows are currently supported. The rest of the settings are dependent on which hardware platform you are running on. Please see the users manual for your device to see what these values mean.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("none", 1), ("minimum", 2), ("default", 3), ("maximum", 4))

class MGMDPortModeTc(TextualConvention, Integer32):
    description = 'This textual convention maps out possible MGMD port modes.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("reporter", 1), ("source", 2))

class MGMDDiscoveredRouterModeTc(TextualConvention, Integer32):
    description = 'This textual convention maps the possible ways a router may be discovered by the device.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("querier", 1), ("routingProtocol", 2), ("multicastRouterDiscovery", 3), ("staticallyConfigured", 4))

class MGMDProtocolClassTc(TextualConvention, Integer32):
    description = 'This textual convention describes the possible ways IGMP/MLD can classify received frames.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("multicastData", 1), ("routingProtocol", 2), ("ignore", 3))

class MGMDProtocolIdTc(TextualConvention, Bits):
    description = 'Bit definitions for each of the IP protocol numbers assigned by IANA.'
    status = 'current'
    namedValues = NamedValues(("hopopt", 0), ("icmp", 1), ("igmp", 2), ("ggp", 3), ("ip", 4), ("st", 5), ("tcp", 6), ("cbt", 7), ("egp", 8), ("igp", 9), ("bbnRccMon", 10), ("nvpII", 11), ("pup", 12), ("argus", 13), ("emcon", 14), ("xnet", 15), ("chaos", 16), ("udp", 17), ("mux", 18), ("dcnMeas", 19), ("hmp", 20), ("prm", 21), ("xnsIdp", 22), ("trunk1", 23), ("trunk2", 24), ("leaf1", 25), ("leaf2", 26), ("rdp", 27), ("irtp", 28), ("isoTp4", 29), ("netblt", 30), ("mfeNsp", 31), ("meritInp", 32), ("sep", 33), ("x3pc", 34), ("idpr", 35), ("xtp", 36), ("ddp", 37), ("idprCmtp", 38), ("tpPlusPlus", 39), ("il", 40), ("ipv6", 41), ("sdrp", 42), ("ipv6Route", 43), ("ipv6Frag", 44), ("idrp", 45), ("rsvp", 46), ("gre", 47), ("mhrp", 48), ("bna", 49), ("esp", 50), ("ah", 51), ("inlsp", 52), ("swipe", 53), ("narp", 54), ("mobile", 55), ("tlsp", 56), ("skip", 57), ("ipv6Icmp", 58), ("ipv6NoNxt", 59), ("ipv6Opts", 60), ("ipProt61", 61), ("cftp", 62), ("ipProt63", 63), ("satExpak", 64), ("kryptolan", 65), ("rvd", 66), ("ippc", 67), ("ipProt64", 68), ("satMon", 69), ("visa", 70), ("ipcv", 71), ("cpnx", 72), ("cphb", 73), ("wsn", 74), ("pvp", 75), ("brSatMon", 76), ("sunNd", 77), ("wbMon", 78), ("wbExpak", 79), ("isoIp", 80), ("vmtp", 81), ("secureVmtp", 82), ("vines", 83), ("ttp", 84), ("nsfnetIgp", 85), ("dgp", 86), ("tcf", 87), ("eigrp", 88), ("ospfIgp", 89), ("spriteRpc", 90), ("larp", 91), ("mtp", 92), ("ax25", 93), ("ipip", 94), ("micp", 95), ("sccSp", 96), ("etherIp", 97), ("encap", 98), ("ipProt99", 99), ("gmtp", 100), ("ifmp", 101), ("pnni", 102), ("pim", 103), ("aris", 104), ("scps", 105), ("qnx", 106), ("an", 107), ("ipComp", 108), ("snp", 109), ("compaqPeer", 110), ("ipxInIp", 111), ("vrrp", 112), ("pgm", 113), ("ipProt114", 114), ("l2tp", 115), ("ddx", 116), ("iatp", 117), ("stp", 118), ("srp", 119), ("uti", 120), ("smp", 121), ("sm", 122), ("ptp", 123), ("isisIpv4", 124), ("fire", 125), ("crtp", 126), ("crudp", 127), ("sscopmce", 128), ("iplt", 129), ("sps", 130), ("pipe", 131), ("sctp", 132), ("fc", 133), ("rsvpE2eIgn", 134), ("mobHeader", 135), ("udpLite", 136), ("mpls", 137), ("ipProto138", 138), ("ipProto139", 139), ("ipProto140", 140), ("ipProto141", 141), ("ipProto142", 142), ("ipProto143", 143), ("ipProto144", 144), ("ipProto145", 145), ("ipProto146", 146), ("ipProto147", 147), ("ipProto148", 148), ("ipProto149", 149), ("ipProto150", 150), ("ipProto151", 151), ("ipProto152", 152), ("ipProto153", 153), ("ipProto154", 154), ("ipProto155", 155), ("ipProto156", 156), ("ipProto157", 157), ("ipProto158", 158), ("ipProto159", 159), ("ipProto160", 160), ("ipProto161", 161), ("ipProto162", 162), ("ipProto163", 163), ("ipProto164", 164), ("ipProto165", 165), ("ipProto166", 166), ("ipProto167", 167), ("ipProto168", 168), ("ipProto169", 169), ("ipProto170", 170), ("ipProto171", 171), ("ipProto172", 172), ("ipProto173", 173), ("ipProto174", 174), ("ipProto175", 175), ("ipProto176", 176), ("ipProto177", 177), ("ipProto178", 178), ("ipProto179", 179), ("ipProto180", 180), ("ipProto181", 181), ("ipProto182", 182), ("ipProto183", 183), ("ipProto184", 184), ("ipProto185", 185), ("ipProto186", 186), ("ipProto187", 187), ("ipProto188", 188), ("ipProto189", 189), ("ipProto190", 190), ("ipProto191", 191), ("ipProto192", 192), ("ipProto193", 193), ("ipProto194", 194), ("ipProto195", 195), ("ipProto196", 196), ("ipProto197", 197), ("ipProto198", 198), ("ipProto199", 199), ("ipProto200", 200), ("ipProto201", 201), ("ipProto202", 202), ("ipProto203", 203), ("ipProto204", 204), ("ipProto205", 205), ("ipProto206", 206), ("ipProto207", 207), ("ipProto208", 208), ("ipProto209", 209), ("ipProto210", 210), ("ipProto211", 211), ("ipProto212", 212), ("ipProto213", 213), ("ipProto214", 214), ("ipProto215", 215), ("ipProto216", 216), ("ipProto217", 217), ("ipProto218", 218), ("ipProto219", 219), ("ipProto220", 220), ("ipProto221", 221), ("ipProto222", 222), ("ipProto223", 223), ("ipProto224", 224), ("ipProto225", 225), ("ipProto226", 226), ("ipProto227", 227), ("ipProto228", 228), ("ipProto229", 229), ("ipProto230", 230), ("ipProto231", 231), ("ipProto232", 232), ("ipProto233", 233), ("ipProto234", 234), ("ipProto235", 235), ("ipProto236", 236), ("ipProto237", 237), ("ipProto238", 238), ("ipProto239", 239), ("ipProto240", 240), ("ipProto241", 241), ("ipProto242", 242), ("ipProto243", 243), ("ipProto244", 244), ("ipProto245", 245), ("ipProto246", 246), ("ipProto247", 247), ("ipProto248", 248), ("ipProto249", 249), ("ipProto250", 250), ("ipProto251", 251), ("ipProto252", 252), ("ipProto253", 253), ("ipProto254", 254)) + NamedValues(("ipProto255", 255))

etsysMgmdExtObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 71, 1))
etsysMgmdExtConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 71, 1, 1))
etsysMgmdExtInterfaceGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 71, 1, 2))
etsysMgmdExtStaticCacheGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 71, 1, 3))
etsysMgmdExtCacheGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 71, 1, 4))
etsysMgmdExtDiscoveredRouterGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 71, 1, 5))
etsysMgmdExtPortGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 71, 1, 6))
etsysMgmdExtPortFastLeaveGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 71, 1, 7))
etsysMgmdExtStatsCntrsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 71, 1, 8))
etsysMgmdExtProtocolClassificationGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 71, 1, 9))
etsysMgmdExtConfigRevString = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 71, 1, 1, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysMgmdExtConfigRevString.setStatus('current')
if mibBuilder.loadTexts: etsysMgmdExtConfigRevString.setDescription('This object is a textual representation of the revision of the Enterasys MGMD MIB in the firmware.')
etsysMgmdExtConfigFullAction = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 71, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("routers", 1), ("flood", 2))).clone('flood')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysMgmdExtConfigFullAction.setStatus('current')
if mibBuilder.loadTexts: etsysMgmdExtConfigFullAction.setDescription('This object defines the behavior of IGMP/MLD when its group table is full. The user may choose to send multicast frames to known routers, or flood these frames to the vlan.')
etsysMgmdExtConfigMinNumberOfGroups = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 71, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysMgmdExtConfigMinNumberOfGroups.setStatus('current')
if mibBuilder.loadTexts: etsysMgmdExtConfigMinNumberOfGroups.setDescription(' This object will state the minimum number of multicast groups this device is capable of setting.')
etsysMgmdExtConfigDefaultNumberOfGroups = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 71, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysMgmdExtConfigDefaultNumberOfGroups.setStatus('current')
if mibBuilder.loadTexts: etsysMgmdExtConfigDefaultNumberOfGroups.setDescription(' This object states the default number of multicast groups this device will be set to.')
etsysMgmdExtConfigMaxNumberOfGroups = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 71, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysMgmdExtConfigMaxNumberOfGroups.setStatus('current')
if mibBuilder.loadTexts: etsysMgmdExtConfigMaxNumberOfGroups.setDescription(' This object states the maximum number of multicast groups this device is capable of setting.')
etsysMgmdExtConfigNumberOfGroups = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 71, 1, 1, 6), MGMDNumGroupsTc().clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysMgmdExtConfigNumberOfGroups.setStatus('current')
if mibBuilder.loadTexts: etsysMgmdExtConfigNumberOfGroups.setDescription(' This object allow the user to select the IGMP/MLD group table size for this device.')
etsysMgmdExtInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 5624, 1, 2, 71, 1, 2, 1), )
if mibBuilder.loadTexts: etsysMgmdExtInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: etsysMgmdExtInterfaceTable.setDescription('The (conceptual) table listing the interfaces on which IGMP/MLD is enabled.')
etsysMgmdExtInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5624, 1, 2, 71, 1, 2, 1, 1), ).setIndexNames((0, "ENTERASYS-MGMD-EXT-MIB", "etsysMgmdExtInterfaceApplication"), (0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: etsysMgmdExtInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: etsysMgmdExtInterfaceEntry.setDescription('An entry (conceptual row) representing an interface on which IGMP/MLD is enabled.')
etsysMgmdExtInterfaceApplication = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 71, 1, 2, 1, 1, 1), InetAddressType())
if mibBuilder.loadTexts: etsysMgmdExtInterfaceApplication.setStatus('current')
if mibBuilder.loadTexts: etsysMgmdExtInterfaceApplication.setDescription('The multicast application this object refers to. ipv4(1) refers to IGMP, ipv6(2) refers to MLD.')
etsysMgmdExtInterfaceQueryEnableState = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 71, 1, 2, 1, 1, 2), EnabledStatus().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysMgmdExtInterfaceQueryEnableState.setStatus('current')
if mibBuilder.loadTexts: etsysMgmdExtInterfaceQueryEnableState.setDescription('The state of active querying on this interface.')
etsysMgmdExtInterfaceFastLeaveState = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 71, 1, 2, 1, 1, 3), EnabledStatus().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysMgmdExtInterfaceFastLeaveState.setStatus('current')
if mibBuilder.loadTexts: etsysMgmdExtInterfaceFastLeaveState.setDescription('The state of Fast Leave on this interface.')
etsysMgmdExtInterfaceClearGroups = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 71, 1, 2, 1, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysMgmdExtInterfaceClearGroups.setStatus('current')
if mibBuilder.loadTexts: etsysMgmdExtInterfaceClearGroups.setDescription('A mechanism to flush the database of IP group members maintained by the IGMP snooping application on this interface. Setting the value to true will clear the group members. Setting the value to false will have no effect. This value will always read false')
etsysMgmdExtRtrAlertRequired = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 71, 1, 2, 1, 1, 5), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysMgmdExtRtrAlertRequired.setReference('RFC 2236, sections 2 and 10. RFC 3376, sections 4 and 9.')
if mibBuilder.loadTexts: etsysMgmdExtRtrAlertRequired.setStatus('current')
if mibBuilder.loadTexts: etsysMgmdExtRtrAlertRequired.setDescription('A mechanism to allow backward compatibility with older implementations of IGMPv2 that may be present on this interface. The default setting of this value to true will cause IGMPv2 messages missing the router alert IP option to be discarded. Setting this value to false will cause the router alert requirement for IGMPv2 messages heard on this interface to be ignored.')
etsysMgmdExtStaticCacheTable = MibTable((1, 3, 6, 1, 4, 1, 5624, 1, 2, 71, 1, 3, 1), )
if mibBuilder.loadTexts: etsysMgmdExtStaticCacheTable.setStatus('current')
if mibBuilder.loadTexts: etsysMgmdExtStaticCacheTable.setDescription('The (conceptual) table listing the static IGMP/MLD cache entries.')
etsysMgmdExtStaticCacheEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5624, 1, 2, 71, 1, 3, 1, 1), ).setIndexNames((0, "ENTERASYS-MGMD-EXT-MIB", "etsysMgmdExtStaticCacheIPAddrType"), (0, "ENTERASYS-MGMD-EXT-MIB", "etsysMgmdExtStaticCacheGroupIPAddress"), (0, "IF-MIB", "ifIndex"), (0, "ENTERASYS-MGMD-EXT-MIB", "etsysMgmdExtStaticCacheSourceIPAddress"))
if mibBuilder.loadTexts: etsysMgmdExtStaticCacheEntry.setStatus('current')
if mibBuilder.loadTexts: etsysMgmdExtStaticCacheEntry.setDescription('An entry (conceptual row) representing a static entry that IGMP/MLD will act upon.')
etsysMgmdExtStaticCacheIPAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 71, 1, 3, 1, 1, 1), InetAddressType())
if mibBuilder.loadTexts: etsysMgmdExtStaticCacheIPAddrType.setStatus('current')
if mibBuilder.loadTexts: etsysMgmdExtStaticCacheIPAddrType.setDescription('The IP address type of the group and source IPs.')
etsysMgmdExtStaticCacheGroupIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 71, 1, 3, 1, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: etsysMgmdExtStaticCacheGroupIPAddress.setStatus('current')
if mibBuilder.loadTexts: etsysMgmdExtStaticCacheGroupIPAddress.setDescription('The IP multicast group address for IGMP to send multicast data to.')
etsysMgmdExtStaticCacheSourceIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 71, 1, 3, 1, 1, 3), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: etsysMgmdExtStaticCacheSourceIPAddress.setStatus('current')
if mibBuilder.loadTexts: etsysMgmdExtStaticCacheSourceIPAddress.setDescription('The IP source address of this entry. For IGMP Version 2, and MLD v1, use the unspecified address.')
etsysMgmdExtStaticCacheIncludeList = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 71, 1, 3, 1, 1, 4), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysMgmdExtStaticCacheIncludeList.setStatus('current')
if mibBuilder.loadTexts: etsysMgmdExtStaticCacheIncludeList.setDescription('The set of ports configured by management for this multicast group and this interface to which multicast group-addressed data frames are to be forwarded. The default is all bits cleared.')
etsysMgmdExtStaticCacheExcludeList = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 71, 1, 3, 1, 1, 5), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysMgmdExtStaticCacheExcludeList.setStatus('current')
if mibBuilder.loadTexts: etsysMgmdExtStaticCacheExcludeList.setDescription('The set of ports configured by management for this multicast group and this interface for which multicast group-addressed data frames are not to be forwarded. The default is all bits cleared.')
etsysMgmdExtStaticCacheRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 71, 1, 3, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysMgmdExtStaticCacheRowStatus.setStatus('current')
if mibBuilder.loadTexts: etsysMgmdExtStaticCacheRowStatus.setDescription('active(1) creates a static entry. notInService(2) disables a static entry. destroy(6) deletes a static entry.')
etsysMgmdExtCacheTable = MibTable((1, 3, 6, 1, 4, 1, 5624, 1, 2, 71, 1, 4, 1), )
if mibBuilder.loadTexts: etsysMgmdExtCacheTable.setStatus('current')
if mibBuilder.loadTexts: etsysMgmdExtCacheTable.setDescription('The (conceptual) table listing the IP multicast groups for interfaces with members on this particular interface. This table provides a version 3 capable etsysMgmdExtCacheTable, with a bridge PortList leaf vs mib2 interface index.')
etsysMgmdExtCacheEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5624, 1, 2, 71, 1, 4, 1, 1), ).setIndexNames((0, "ENTERASYS-MGMD-EXT-MIB", "etsysMgmdExtCacheIPAddrType"), (0, "ENTERASYS-MGMD-EXT-MIB", "etsysMgmdExtCacheGroupIPAddress"), (0, "IF-MIB", "ifIndex"), (0, "ENTERASYS-MGMD-EXT-MIB", "etsysMgmdExtCacheSourceIPAddress"))
if mibBuilder.loadTexts: etsysMgmdExtCacheEntry.setStatus('current')
if mibBuilder.loadTexts: etsysMgmdExtCacheEntry.setDescription('An entry (conceptual row) in the etsysMgmdExtCacheTable.')
etsysMgmdExtCacheIPAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 71, 1, 4, 1, 1, 1), InetAddressType())
if mibBuilder.loadTexts: etsysMgmdExtCacheIPAddrType.setStatus('current')
if mibBuilder.loadTexts: etsysMgmdExtCacheIPAddrType.setDescription('The IP address type of the group and source IP addresses.')
etsysMgmdExtCacheGroupIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 71, 1, 4, 1, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: etsysMgmdExtCacheGroupIPAddress.setStatus('current')
if mibBuilder.loadTexts: etsysMgmdExtCacheGroupIPAddress.setDescription('The IP multicast group address for this entry.')
etsysMgmdExtCacheSourceIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 71, 1, 4, 1, 1, 3), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: etsysMgmdExtCacheSourceIPAddress.setStatus('current')
if mibBuilder.loadTexts: etsysMgmdExtCacheSourceIPAddress.setDescription('The IP source address of this entry.')
etsysMgmdExtCacheExpiryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 71, 1, 4, 1, 1, 4), Integer32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysMgmdExtCacheExpiryTime.setStatus('current')
if mibBuilder.loadTexts: etsysMgmdExtCacheExpiryTime.setDescription('The time in seconds this entry will expire in.')
etsysMgmdExtCacheIncludePortList = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 71, 1, 4, 1, 1, 5), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysMgmdExtCacheIncludePortList.setReference('RFC 3376 and RFC 3810')
if mibBuilder.loadTexts: etsysMgmdExtCacheIncludePortList.setStatus('current')
if mibBuilder.loadTexts: etsysMgmdExtCacheIncludePortList.setDescription('The set of bridge ports for this multicast group, interface, and source IP address where the entry filter-mode is include.')
etsysMgmdExtCacheExcludePortList = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 71, 1, 4, 1, 1, 6), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysMgmdExtCacheExcludePortList.setReference('RFC 3376 and RFC 3810')
if mibBuilder.loadTexts: etsysMgmdExtCacheExcludePortList.setStatus('current')
if mibBuilder.loadTexts: etsysMgmdExtCacheExcludePortList.setDescription('The set of bridge ports for this multicast group, interface, and source IP address where the entry filter-mode is exclude.')
etsysMgmdExtCacheSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 71, 1, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysMgmdExtCacheSrcPort.setStatus('current')
if mibBuilder.loadTexts: etsysMgmdExtCacheSrcPort.setDescription('The source bridge port of the multicast data stream if available.')
etsysMgmdExtDiscoveredRouterTable = MibTable((1, 3, 6, 1, 4, 1, 5624, 1, 2, 71, 1, 5, 1), )
if mibBuilder.loadTexts: etsysMgmdExtDiscoveredRouterTable.setStatus('current')
if mibBuilder.loadTexts: etsysMgmdExtDiscoveredRouterTable.setDescription('The (conceptual) table listing the routers seen on particular ports of a VLAN through either protocol snooping or ICMP Router Discovery.')
etsysMgmdExtDiscoveredRouterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5624, 1, 2, 71, 1, 5, 1, 1), ).setIndexNames((0, "ENTERASYS-MGMD-EXT-MIB", "etsysMgmdExtDiscoveredRouterApplication"), (0, "IF-MIB", "ifIndex"), (0, "BRIDGE-MIB", "dot1dBasePort"))
if mibBuilder.loadTexts: etsysMgmdExtDiscoveredRouterEntry.setStatus('current')
if mibBuilder.loadTexts: etsysMgmdExtDiscoveredRouterEntry.setDescription('An entry representing the routers seen on particular ports on a given interface index.')
etsysMgmdExtDiscoveredRouterApplication = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 71, 1, 5, 1, 1, 1), InetAddressType())
if mibBuilder.loadTexts: etsysMgmdExtDiscoveredRouterApplication.setStatus('current')
if mibBuilder.loadTexts: etsysMgmdExtDiscoveredRouterApplication.setDescription('The application these objects refer to, ipv4(1) - IGMP, ipv6(2) - MLD.')
etsysMgmdExtDiscoveredRouterLearnedMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 71, 1, 5, 1, 1, 2), MGMDDiscoveredRouterModeTc()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysMgmdExtDiscoveredRouterLearnedMethod.setStatus('current')
if mibBuilder.loadTexts: etsysMgmdExtDiscoveredRouterLearnedMethod.setDescription('The method this router was learned by.')
etsysMgmdExtDiscoveredRouterEgressing = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 71, 1, 5, 1, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysMgmdExtDiscoveredRouterEgressing.setStatus('current')
if mibBuilder.loadTexts: etsysMgmdExtDiscoveredRouterEgressing.setDescription('Indicates if this bridge port is egressing out this interface.')
etsysMgmdExtDiscoveredRouterStaticPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 71, 1, 5, 1, 1, 4), EnabledStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysMgmdExtDiscoveredRouterStaticPortList.setStatus('current')
if mibBuilder.loadTexts: etsysMgmdExtDiscoveredRouterStaticPortList.setDescription('Indicates if this bridge port on this interface is static. This leaf is OPTIONAL')
etsysMgmdExtDiscoveredRouterBridgePortAgeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 71, 1, 5, 1, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysMgmdExtDiscoveredRouterBridgePortAgeTime.setStatus('current')
if mibBuilder.loadTexts: etsysMgmdExtDiscoveredRouterBridgePortAgeTime.setDescription('The time in ticks from the last received protocol packet, until this bridge port will age out.')
etsysMgmdExtPortTable = MibTable((1, 3, 6, 1, 4, 1, 5624, 1, 2, 71, 1, 6, 1), )
if mibBuilder.loadTexts: etsysMgmdExtPortTable.setStatus('current')
if mibBuilder.loadTexts: etsysMgmdExtPortTable.setDescription("The (conceptual) table listing a bridge port's bindings to multicast group IP addresses, interface ids, and source IP addresses.")
etsysMgmdExtPortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5624, 1, 2, 71, 1, 6, 1, 1), ).setIndexNames((0, "BRIDGE-MIB", "dot1dBasePort"), (0, "ENTERASYS-MGMD-EXT-MIB", "etsysMgmdExtPortMode"), (0, "ENTERASYS-MGMD-EXT-MIB", "etsysMgmdExtPortIPAddressType"), (0, "ENTERASYS-MGMD-EXT-MIB", "etsysMgmdExtPortTableGroupIPAddress"), (0, "IF-MIB", "ifIndex"), (0, "ENTERASYS-MGMD-EXT-MIB", "etsysMgmdExtPortTableSourceIPAddress"))
if mibBuilder.loadTexts: etsysMgmdExtPortTableEntry.setStatus('current')
if mibBuilder.loadTexts: etsysMgmdExtPortTableEntry.setDescription('An entry representing the binding of bridge port to multicast group IP address, interface, and source IP address.')
etsysMgmdExtPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 71, 1, 6, 1, 1, 1), MGMDPortModeTc())
if mibBuilder.loadTexts: etsysMgmdExtPortMode.setStatus('current')
if mibBuilder.loadTexts: etsysMgmdExtPortMode.setDescription('The mode of the given bridge port.')
etsysMgmdExtPortIPAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 71, 1, 6, 1, 1, 2), InetAddressType())
if mibBuilder.loadTexts: etsysMgmdExtPortIPAddressType.setStatus('current')
if mibBuilder.loadTexts: etsysMgmdExtPortIPAddressType.setDescription('The type of group and source IP addresses.')
etsysMgmdExtPortTableGroupIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 71, 1, 6, 1, 1, 3), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: etsysMgmdExtPortTableGroupIPAddress.setStatus('current')
if mibBuilder.loadTexts: etsysMgmdExtPortTableGroupIPAddress.setDescription('The multicast group IP address bound to this port entry.')
etsysMgmdExtPortTableSourceIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 71, 1, 6, 1, 1, 4), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: etsysMgmdExtPortTableSourceIPAddress.setStatus('current')
if mibBuilder.loadTexts: etsysMgmdExtPortTableSourceIPAddress.setDescription('The IP source address bound to this port entry.')
etsysMgmdExtPortTableExpireTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 71, 1, 6, 1, 1, 5), Integer32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysMgmdExtPortTableExpireTime.setStatus('current')
if mibBuilder.loadTexts: etsysMgmdExtPortTableExpireTime.setDescription('The time in seconds from the last join received until that this port will expire.')
etsysMgmdExtPortFastLeaveTable = MibTable((1, 3, 6, 1, 4, 1, 5624, 1, 2, 71, 1, 7, 1), )
if mibBuilder.loadTexts: etsysMgmdExtPortFastLeaveTable.setStatus('current')
if mibBuilder.loadTexts: etsysMgmdExtPortFastLeaveTable.setDescription("The (conceptual) table listing a bridge port's fast leave state.")
etsysMgmdExtPortFastLeaveTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5624, 1, 2, 71, 1, 7, 1, 1), ).setIndexNames((0, "BRIDGE-MIB", "dot1dBasePort"))
if mibBuilder.loadTexts: etsysMgmdExtPortFastLeaveTableEntry.setStatus('current')
if mibBuilder.loadTexts: etsysMgmdExtPortFastLeaveTableEntry.setDescription('An entry representing the state of the fast leave function for the given bridge port.')
etsysMgmdExtPortFastLeaveState = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 71, 1, 7, 1, 1, 1), EnabledStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysMgmdExtPortFastLeaveState.setStatus('current')
if mibBuilder.loadTexts: etsysMgmdExtPortFastLeaveState.setDescription('Enable or disable the fast leave function for the given bridge port.')
etsysMgmdExtStatsCntrsTable = MibTable((1, 3, 6, 1, 4, 1, 5624, 1, 2, 71, 1, 8, 1), )
if mibBuilder.loadTexts: etsysMgmdExtStatsCntrsTable.setStatus('current')
if mibBuilder.loadTexts: etsysMgmdExtStatsCntrsTable.setDescription('The (conceptual) table listing counters and statistics seen on the given multicast application.')
etsysMgmdExtStatsCntrsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5624, 1, 2, 71, 1, 8, 1, 1), ).setIndexNames((0, "ENTERASYS-MGMD-EXT-MIB", "etsysMgmdExtStatsCntrsApplication"))
if mibBuilder.loadTexts: etsysMgmdExtStatsCntrsEntry.setStatus('current')
if mibBuilder.loadTexts: etsysMgmdExtStatsCntrsEntry.setDescription('An entry representing the statistics and counters on the given application.')
etsysMgmdExtStatsCntrsApplication = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 71, 1, 8, 1, 1, 1), InetAddressType())
if mibBuilder.loadTexts: etsysMgmdExtStatsCntrsApplication.setStatus('current')
if mibBuilder.loadTexts: etsysMgmdExtStatsCntrsApplication.setDescription('The multicast application to get stats and counters for. ipv4(1) - IGMP, ipv6(2) - MLD.')
etsysMgmdExtStatsCntrsGroupFull = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 71, 1, 8, 1, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysMgmdExtStatsCntrsGroupFull.setStatus('current')
if mibBuilder.loadTexts: etsysMgmdExtStatsCntrsGroupFull.setDescription('Flag to indicate if the group table is full(true) or not(false).')
etsysMgmdExtStatsCntrsNumV1QueriesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 71, 1, 8, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysMgmdExtStatsCntrsNumV1QueriesSent.setStatus('current')
if mibBuilder.loadTexts: etsysMgmdExtStatsCntrsNumV1QueriesSent.setDescription('The number of version 1 queries this device has sent out.')
etsysMgmdExtStatsCntrsNumV2QueriesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 71, 1, 8, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysMgmdExtStatsCntrsNumV2QueriesSent.setStatus('current')
if mibBuilder.loadTexts: etsysMgmdExtStatsCntrsNumV2QueriesSent.setDescription('The number of version 2 queries this device has sent out.')
etsysMgmdExtStatsCntrsNumV3QueriesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 71, 1, 8, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysMgmdExtStatsCntrsNumV3QueriesSent.setStatus('current')
if mibBuilder.loadTexts: etsysMgmdExtStatsCntrsNumV3QueriesSent.setDescription('The number of version 3 queries this device has sent out. This will read 0 for MLD.')
etsysMgmdExtStatsCntrsNumGSQueriesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 71, 1, 8, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysMgmdExtStatsCntrsNumGSQueriesSent.setStatus('current')
if mibBuilder.loadTexts: etsysMgmdExtStatsCntrsNumGSQueriesSent.setDescription('The number of Group Specific queries this device has sent out.')
etsysMgmdExtStatsCntrsNumGAndSQueriesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 71, 1, 8, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysMgmdExtStatsCntrsNumGAndSQueriesSent.setStatus('current')
if mibBuilder.loadTexts: etsysMgmdExtStatsCntrsNumGAndSQueriesSent.setDescription('The number of Group and Source specific queries the device has sent out.')
etsysMgmdExtStatsCntrsNumV1QueriesRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 71, 1, 8, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysMgmdExtStatsCntrsNumV1QueriesRcvd.setStatus('current')
if mibBuilder.loadTexts: etsysMgmdExtStatsCntrsNumV1QueriesRcvd.setDescription('The number of version 1 queries received.')
etsysMgmdExtStatsCntrsNumV2QueriesRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 71, 1, 8, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysMgmdExtStatsCntrsNumV2QueriesRcvd.setStatus('current')
if mibBuilder.loadTexts: etsysMgmdExtStatsCntrsNumV2QueriesRcvd.setDescription('The number of version 2 queries received.')
etsysMgmdExtStatsCntrsNumV3QueriesRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 71, 1, 8, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysMgmdExtStatsCntrsNumV3QueriesRcvd.setStatus('current')
if mibBuilder.loadTexts: etsysMgmdExtStatsCntrsNumV3QueriesRcvd.setDescription('The number of version 3 queries received. Will read 0 for MLD.')
etsysMgmdExtStatsCntrsNumGSQueriesRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 71, 1, 8, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysMgmdExtStatsCntrsNumGSQueriesRcvd.setStatus('current')
if mibBuilder.loadTexts: etsysMgmdExtStatsCntrsNumGSQueriesRcvd.setDescription('The number of group specific queries received.')
etsysMgmdExtStatsCntrsNumGAndSQueriesRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 71, 1, 8, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysMgmdExtStatsCntrsNumGAndSQueriesRcvd.setStatus('current')
if mibBuilder.loadTexts: etsysMgmdExtStatsCntrsNumGAndSQueriesRcvd.setDescription('The number of group and source specific queries received.')
etsysMgmdExtStatsCntrsNumWrongVersionQueriesRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 71, 1, 8, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysMgmdExtStatsCntrsNumWrongVersionQueriesRcvd.setStatus('current')
if mibBuilder.loadTexts: etsysMgmdExtStatsCntrsNumWrongVersionQueriesRcvd.setDescription('The number of queries with the wrong version this device has seen from the network.')
etsysMgmdExtStatsCntrsNumV1ReportsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 71, 1, 8, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysMgmdExtStatsCntrsNumV1ReportsRcvd.setStatus('current')
if mibBuilder.loadTexts: etsysMgmdExtStatsCntrsNumV1ReportsRcvd.setDescription('The number of version 1 reports this device has received.')
etsysMgmdExtStatsCntrsNumV2ReportsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 71, 1, 8, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysMgmdExtStatsCntrsNumV2ReportsRcvd.setStatus('current')
if mibBuilder.loadTexts: etsysMgmdExtStatsCntrsNumV2ReportsRcvd.setDescription('The number of version 2 reports this device has received.')
etsysMgmdExtStatsCntrsNumV3ReportsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 71, 1, 8, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysMgmdExtStatsCntrsNumV3ReportsRcvd.setStatus('current')
if mibBuilder.loadTexts: etsysMgmdExtStatsCntrsNumV3ReportsRcvd.setDescription('The number of version 3 reports this device has received. This will read 0 for MLD.')
etsysMgmdExtStatsCntrsNumLeavesRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 71, 1, 8, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysMgmdExtStatsCntrsNumLeavesRcvd.setStatus('current')
if mibBuilder.loadTexts: etsysMgmdExtStatsCntrsNumLeavesRcvd.setDescription('The number of IGMP version 1 or 2 leaves this device has received. Number of MLD version 1 dones this device has received.')
etsysMgmdExtStatsCntrsNumBadFramesRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 71, 1, 8, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysMgmdExtStatsCntrsNumBadFramesRcvd.setStatus('current')
if mibBuilder.loadTexts: etsysMgmdExtStatsCntrsNumBadFramesRcvd.setDescription('The number of frames deemed received with errors.')
etsysMgmdExtStatsCntrsClear = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 71, 1, 8, 1, 1, 19), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysMgmdExtStatsCntrsClear.setStatus('current')
if mibBuilder.loadTexts: etsysMgmdExtStatsCntrsClear.setDescription('A mechanism to clear the various counters maintained by the IGMP snooping application. Setting the value to true will clear the counters. Setting the value to false will have no effect. This value will always read false')
etsysMgmdExtProtocolClassificationTable = MibTable((1, 3, 6, 1, 4, 1, 5624, 1, 2, 71, 1, 9, 1), )
if mibBuilder.loadTexts: etsysMgmdExtProtocolClassificationTable.setStatus('current')
if mibBuilder.loadTexts: etsysMgmdExtProtocolClassificationTable.setDescription("This table contains a listing of how MGMD will classify received IP protocol frames. For example, for a UDP multicast frame received which is IP type 17, MGMD can classify that frame in one of three ways. It can be classified as a multicast data frame, a routing protocol, or it can be ignored. A user may have a need to multicast TCP frames, but still want to send them ONLY to MGMD clients. To do this one would set protocol id 6(TCP) to 'multicastData'")
etsysMgmdExtProtocolClassificationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5624, 1, 2, 71, 1, 9, 1, 1), ).setIndexNames((0, "ENTERASYS-MGMD-EXT-MIB", "etsysMgmdExtProtocolClassification"))
if mibBuilder.loadTexts: etsysMgmdExtProtocolClassificationEntry.setStatus('current')
if mibBuilder.loadTexts: etsysMgmdExtProtocolClassificationEntry.setDescription('An entry representing the binding of IP protocol id, to the IGMP classification of a received frame.')
etsysMgmdExtProtocolClassification = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 71, 1, 9, 1, 1, 1), MGMDProtocolClassTc())
if mibBuilder.loadTexts: etsysMgmdExtProtocolClassification.setStatus('current')
if mibBuilder.loadTexts: etsysMgmdExtProtocolClassification.setDescription('The classification of this protocol id. 1 - Classify as multicast data frame. 2 - Classify as a routing protocol. 3 - Classify as Ignore.')
etsysMgmdExtProtocolIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 71, 1, 9, 1, 1, 2), MGMDProtocolIdTc()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysMgmdExtProtocolIdentifier.setStatus('current')
if mibBuilder.loadTexts: etsysMgmdExtProtocolIdentifier.setDescription("The set of IP protocol ids to apply the classification to. Example: If this set has protocols(bits) 1 and 5 set to a '1', and the classification is 'multicastData', this will force IGMP to treat received frames with IP protocol ids of 1 and 5 as 'multicast data', and forward those frames to IGMP joined clients. Similarly if ids 1 and 5 were set to 'routing protocol' then IGMP would treat received frames with these ids as routing protocols, etc. ")
etsysMgmdExtConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 71, 2))
etsysMgmdExtGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 71, 2, 1))
etsysMgmdExtCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 71, 2, 2))
etsysMgmdExtConfigGroups = ObjectGroup((1, 3, 6, 1, 4, 1, 5624, 1, 2, 71, 2, 1, 1)).setObjects(("ENTERASYS-MGMD-EXT-MIB", "etsysMgmdExtConfigRevString"), ("ENTERASYS-MGMD-EXT-MIB", "etsysMgmdExtConfigFullAction"), ("ENTERASYS-MGMD-EXT-MIB", "etsysMgmdExtConfigMinNumberOfGroups"), ("ENTERASYS-MGMD-EXT-MIB", "etsysMgmdExtConfigDefaultNumberOfGroups"), ("ENTERASYS-MGMD-EXT-MIB", "etsysMgmdExtConfigMaxNumberOfGroups"), ("ENTERASYS-MGMD-EXT-MIB", "etsysMgmdExtConfigNumberOfGroups"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysMgmdExtConfigGroups = etsysMgmdExtConfigGroups.setStatus('current')
if mibBuilder.loadTexts: etsysMgmdExtConfigGroups.setDescription('Global object controlling this feature.')
etsysMgmdExtInterfaceGroups = ObjectGroup((1, 3, 6, 1, 4, 1, 5624, 1, 2, 71, 2, 1, 2)).setObjects(("ENTERASYS-MGMD-EXT-MIB", "etsysMgmdExtInterfaceFastLeaveState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysMgmdExtInterfaceGroups = etsysMgmdExtInterfaceGroups.setStatus('current')
if mibBuilder.loadTexts: etsysMgmdExtInterfaceGroups.setDescription('Global object controlling this feature.')
etsysMgmdExtStaticCacheGroups = ObjectGroup((1, 3, 6, 1, 4, 1, 5624, 1, 2, 71, 2, 1, 3)).setObjects(("ENTERASYS-MGMD-EXT-MIB", "etsysMgmdExtStaticCacheIncludeList"), ("ENTERASYS-MGMD-EXT-MIB", "etsysMgmdExtStaticCacheExcludeList"), ("ENTERASYS-MGMD-EXT-MIB", "etsysMgmdExtStaticCacheRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysMgmdExtStaticCacheGroups = etsysMgmdExtStaticCacheGroups.setStatus('current')
if mibBuilder.loadTexts: etsysMgmdExtStaticCacheGroups.setDescription('Global object controlling this feature.')
etsysMgmdExtCacheGroups = ObjectGroup((1, 3, 6, 1, 4, 1, 5624, 1, 2, 71, 2, 1, 4)).setObjects(("ENTERASYS-MGMD-EXT-MIB", "etsysMgmdExtCacheExpiryTime"), ("ENTERASYS-MGMD-EXT-MIB", "etsysMgmdExtCacheIncludePortList"), ("ENTERASYS-MGMD-EXT-MIB", "etsysMgmdExtCacheExcludePortList"), ("ENTERASYS-MGMD-EXT-MIB", "etsysMgmdExtCacheSrcPort"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysMgmdExtCacheGroups = etsysMgmdExtCacheGroups.setStatus('current')
if mibBuilder.loadTexts: etsysMgmdExtCacheGroups.setDescription('Global object controlling this feature.')
etsysMgmdExtDiscoveredRouterGroups = ObjectGroup((1, 3, 6, 1, 4, 1, 5624, 1, 2, 71, 2, 1, 5)).setObjects(("ENTERASYS-MGMD-EXT-MIB", "etsysMgmdExtDiscoveredRouterLearnedMethod"), ("ENTERASYS-MGMD-EXT-MIB", "etsysMgmdExtDiscoveredRouterEgressing"), ("ENTERASYS-MGMD-EXT-MIB", "etsysMgmdExtDiscoveredRouterStaticPortList"), ("ENTERASYS-MGMD-EXT-MIB", "etsysMgmdExtDiscoveredRouterBridgePortAgeTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysMgmdExtDiscoveredRouterGroups = etsysMgmdExtDiscoveredRouterGroups.setStatus('current')
if mibBuilder.loadTexts: etsysMgmdExtDiscoveredRouterGroups.setDescription('Global object controlling this feature.')
etsysMgmdExtPortGroups = ObjectGroup((1, 3, 6, 1, 4, 1, 5624, 1, 2, 71, 2, 1, 6)).setObjects(("ENTERASYS-MGMD-EXT-MIB", "etsysMgmdExtPortTableGroupIPAddress"), ("ENTERASYS-MGMD-EXT-MIB", "etsysMgmdExtPortTableSourceIPAddress"), ("ENTERASYS-MGMD-EXT-MIB", "etsysMgmdExtPortTableExpireTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysMgmdExtPortGroups = etsysMgmdExtPortGroups.setStatus('current')
if mibBuilder.loadTexts: etsysMgmdExtPortGroups.setDescription('Global object controlling this feature.')
etsysMgmdExtPortFastLeaveGroups = ObjectGroup((1, 3, 6, 1, 4, 1, 5624, 1, 2, 71, 2, 1, 7)).setObjects(("ENTERASYS-MGMD-EXT-MIB", "etsysMgmdExtPortFastLeaveState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysMgmdExtPortFastLeaveGroups = etsysMgmdExtPortFastLeaveGroups.setStatus('current')
if mibBuilder.loadTexts: etsysMgmdExtPortFastLeaveGroups.setDescription('Global object controlling this feature.')
etsysMgmdExtStatsCntsGroups = ObjectGroup((1, 3, 6, 1, 4, 1, 5624, 1, 2, 71, 2, 1, 8)).setObjects(("ENTERASYS-MGMD-EXT-MIB", "etsysMgmdExtStatsCntrsApplication"), ("ENTERASYS-MGMD-EXT-MIB", "etsysMgmdExtStatsCntrsGroupFull"), ("ENTERASYS-MGMD-EXT-MIB", "etsysMgmdExtStatsCntrsNumV1QueriesSent"), ("ENTERASYS-MGMD-EXT-MIB", "etsysMgmdExtStatsCntrsNumV2QueriesSent"), ("ENTERASYS-MGMD-EXT-MIB", "etsysMgmdExtStatsCntrsNumV3QueriesSent"), ("ENTERASYS-MGMD-EXT-MIB", "etsysMgmdExtStatsCntrsNumGSQueriesSent"), ("ENTERASYS-MGMD-EXT-MIB", "etsysMgmdExtStatsCntrsNumGAndSQueriesSent"), ("ENTERASYS-MGMD-EXT-MIB", "etsysMgmdExtStatsCntrsNumV1QueriesRcvd"), ("ENTERASYS-MGMD-EXT-MIB", "etsysMgmdExtStatsCntrsNumV2QueriesRcvd"), ("ENTERASYS-MGMD-EXT-MIB", "etsysMgmdExtStatsCntrsNumV3QueriesRcvd"), ("ENTERASYS-MGMD-EXT-MIB", "etsysMgmdExtStatsCntrsNumGSQueriesRcvd"), ("ENTERASYS-MGMD-EXT-MIB", "etsysMgmdExtStatsCntrsNumGAndSQueriesRcvd"), ("ENTERASYS-MGMD-EXT-MIB", "etsysMgmdExtStatsCntrsNumWrongVersionQueriesRcvd"), ("ENTERASYS-MGMD-EXT-MIB", "etsysMgmdExtStatsCntrsNumV1ReportsRcvd"), ("ENTERASYS-MGMD-EXT-MIB", "etsysMgmdExtStatsCntrsNumV2ReportsRcvd"), ("ENTERASYS-MGMD-EXT-MIB", "etsysMgmdExtStatsCntrsNumV3ReportsRcvd"), ("ENTERASYS-MGMD-EXT-MIB", "etsysMgmdExtStatsCntrsNumLeavesRcvd"), ("ENTERASYS-MGMD-EXT-MIB", "etsysMgmdExtStatsCntrsNumBadFramesRcvd"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysMgmdExtStatsCntsGroups = etsysMgmdExtStatsCntsGroups.setStatus('current')
if mibBuilder.loadTexts: etsysMgmdExtStatsCntsGroups.setDescription('Global object controlling this feature.')
etsysMgmdExtProtocolClassificationGroups = ObjectGroup((1, 3, 6, 1, 4, 1, 5624, 1, 2, 71, 2, 1, 9)).setObjects(("ENTERASYS-MGMD-EXT-MIB", "etsysMgmdExtProtocolClassification"), ("ENTERASYS-MGMD-EXT-MIB", "etsysMgmdExtProtocolIdentifier"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysMgmdExtProtocolClassificationGroups = etsysMgmdExtProtocolClassificationGroups.setStatus('current')
if mibBuilder.loadTexts: etsysMgmdExtProtocolClassificationGroups.setDescription('Global object controlling this feature.')
etsysMgmdExtReadBaseGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5624, 1, 2, 71, 2, 1, 10)).setObjects(("ENTERASYS-MGMD-EXT-MIB", "etsysMgmdExtConfigRevString"), ("ENTERASYS-MGMD-EXT-MIB", "etsysMgmdExtConfigFullAction"), ("ENTERASYS-MGMD-EXT-MIB", "etsysMgmdExtConfigMinNumberOfGroups"), ("ENTERASYS-MGMD-EXT-MIB", "etsysMgmdExtConfigDefaultNumberOfGroups"), ("ENTERASYS-MGMD-EXT-MIB", "etsysMgmdExtConfigMaxNumberOfGroups"), ("ENTERASYS-MGMD-EXT-MIB", "etsysMgmdExtConfigNumberOfGroups"), ("ENTERASYS-MGMD-EXT-MIB", "etsysMgmdExtInterfaceFastLeaveState"), ("ENTERASYS-MGMD-EXT-MIB", "etsysMgmdExtStaticCacheIncludeList"), ("ENTERASYS-MGMD-EXT-MIB", "etsysMgmdExtStaticCacheExcludeList"), ("ENTERASYS-MGMD-EXT-MIB", "etsysMgmdExtStaticCacheRowStatus"), ("ENTERASYS-MGMD-EXT-MIB", "etsysMgmdExtCacheExpiryTime"), ("ENTERASYS-MGMD-EXT-MIB", "etsysMgmdExtCacheIncludePortList"), ("ENTERASYS-MGMD-EXT-MIB", "etsysMgmdExtCacheExcludePortList"), ("ENTERASYS-MGMD-EXT-MIB", "etsysMgmdExtCacheSrcPort"), ("ENTERASYS-MGMD-EXT-MIB", "etsysMgmdExtDiscoveredRouterLearnedMethod"), ("ENTERASYS-MGMD-EXT-MIB", "etsysMgmdExtDiscoveredRouterEgressing"), ("ENTERASYS-MGMD-EXT-MIB", "etsysMgmdExtDiscoveredRouterStaticPortList"), ("ENTERASYS-MGMD-EXT-MIB", "etsysMgmdExtDiscoveredRouterBridgePortAgeTime"), ("ENTERASYS-MGMD-EXT-MIB", "etsysMgmdExtPortFastLeaveState"), ("ENTERASYS-MGMD-EXT-MIB", "etsysMgmdExtStatsCntrsGroupFull"), ("ENTERASYS-MGMD-EXT-MIB", "etsysMgmdExtStatsCntrsNumV1QueriesSent"), ("ENTERASYS-MGMD-EXT-MIB", "etsysMgmdExtStatsCntrsNumV2QueriesSent"), ("ENTERASYS-MGMD-EXT-MIB", "etsysMgmdExtStatsCntrsNumV3QueriesSent"), ("ENTERASYS-MGMD-EXT-MIB", "etsysMgmdExtStatsCntrsNumGSQueriesSent"), ("ENTERASYS-MGMD-EXT-MIB", "etsysMgmdExtStatsCntrsNumGAndSQueriesSent"), ("ENTERASYS-MGMD-EXT-MIB", "etsysMgmdExtStatsCntrsNumV1QueriesRcvd"), ("ENTERASYS-MGMD-EXT-MIB", "etsysMgmdExtStatsCntrsNumV2QueriesRcvd"), ("ENTERASYS-MGMD-EXT-MIB", "etsysMgmdExtStatsCntrsNumV3QueriesRcvd"), ("ENTERASYS-MGMD-EXT-MIB", "etsysMgmdExtStatsCntrsNumGSQueriesRcvd"), ("ENTERASYS-MGMD-EXT-MIB", "etsysMgmdExtStatsCntrsNumGAndSQueriesRcvd"), ("ENTERASYS-MGMD-EXT-MIB", "etsysMgmdExtStatsCntrsNumWrongVersionQueriesRcvd"), ("ENTERASYS-MGMD-EXT-MIB", "etsysMgmdExtStatsCntrsNumV1ReportsRcvd"), ("ENTERASYS-MGMD-EXT-MIB", "etsysMgmdExtStatsCntrsNumV2ReportsRcvd"), ("ENTERASYS-MGMD-EXT-MIB", "etsysMgmdExtStatsCntrsNumV3ReportsRcvd"), ("ENTERASYS-MGMD-EXT-MIB", "etsysMgmdExtStatsCntrsNumLeavesRcvd"), ("ENTERASYS-MGMD-EXT-MIB", "etsysMgmdExtStatsCntrsNumBadFramesRcvd"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysMgmdExtReadBaseGroup = etsysMgmdExtReadBaseGroup.setStatus('current')
if mibBuilder.loadTexts: etsysMgmdExtReadBaseGroup.setDescription(' The read MGMD data that must be supported.')
etsysMgmdExtWriteBaseGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5624, 1, 2, 71, 2, 1, 11)).setObjects(("ENTERASYS-MGMD-EXT-MIB", "etsysMgmdExtConfigFullAction"), ("ENTERASYS-MGMD-EXT-MIB", "etsysMgmdExtConfigNumberOfGroups"), ("ENTERASYS-MGMD-EXT-MIB", "etsysMgmdExtInterfaceFastLeaveState"), ("ENTERASYS-MGMD-EXT-MIB", "etsysMgmdExtStaticCacheIncludeList"), ("ENTERASYS-MGMD-EXT-MIB", "etsysMgmdExtStaticCacheExcludeList"), ("ENTERASYS-MGMD-EXT-MIB", "etsysMgmdExtStaticCacheRowStatus"), ("ENTERASYS-MGMD-EXT-MIB", "etsysMgmdExtDiscoveredRouterStaticPortList"), ("ENTERASYS-MGMD-EXT-MIB", "etsysMgmdExtPortFastLeaveState"), ("ENTERASYS-MGMD-EXT-MIB", "etsysMgmdExtProtocolIdentifier"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysMgmdExtWriteBaseGroup = etsysMgmdExtWriteBaseGroup.setStatus('current')
if mibBuilder.loadTexts: etsysMgmdExtWriteBaseGroup.setDescription(' The write MGMD data that must be supported.')
etsysMgmdExtReadCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 5624, 1, 2, 71, 2, 2, 1)).setObjects(("ENTERASYS-MGMD-EXT-MIB", "etsysMgmdExtReadBaseGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysMgmdExtReadCompliance = etsysMgmdExtReadCompliance.setStatus('current')
if mibBuilder.loadTexts: etsysMgmdExtReadCompliance.setDescription('The compliance statement for devices that support reads from the etsysMgmdExt MIB.')
etsysMgmdExtWriteCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 5624, 1, 2, 71, 2, 2, 2)).setObjects(("ENTERASYS-MGMD-EXT-MIB", "etsysMgmdExtWriteBaseGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysMgmdExtWriteCompliance = etsysMgmdExtWriteCompliance.setStatus('current')
if mibBuilder.loadTexts: etsysMgmdExtWriteCompliance.setDescription('The compliance statement for device that support writes to the etsysMgmdExt MIB.')
mibBuilder.exportSymbols("ENTERASYS-MGMD-EXT-MIB", etsysMgmdExtPortFastLeaveState=etsysMgmdExtPortFastLeaveState, etsysMgmdExtStaticCacheEntry=etsysMgmdExtStaticCacheEntry, etsysMgmdExtInterfaceGroups=etsysMgmdExtInterfaceGroups, etsysMgmdExtDiscoveredRouterTable=etsysMgmdExtDiscoveredRouterTable, etsysMgmdExtConfigRevString=etsysMgmdExtConfigRevString, etsysMgmdExtInterfaceClearGroups=etsysMgmdExtInterfaceClearGroups, etsysMgmdExtStaticCacheSourceIPAddress=etsysMgmdExtStaticCacheSourceIPAddress, etsysMgmdExtStatsCntrsTable=etsysMgmdExtStatsCntrsTable, etsysMgmdExtStatsCntrsNumV2QueriesRcvd=etsysMgmdExtStatsCntrsNumV2QueriesRcvd, etsysMgmdExtWriteBaseGroup=etsysMgmdExtWriteBaseGroup, etsysMgmdExtInterfaceApplication=etsysMgmdExtInterfaceApplication, etsysMgmdExtCacheTable=etsysMgmdExtCacheTable, etsysMgmdExtStatsCntrsNumGSQueriesSent=etsysMgmdExtStatsCntrsNumGSQueriesSent, etsysMgmdExtStatsCntrsNumGAndSQueriesSent=etsysMgmdExtStatsCntrsNumGAndSQueriesSent, etsysMgmdExtCacheIncludePortList=etsysMgmdExtCacheIncludePortList, etsysMgmdExtReadBaseGroup=etsysMgmdExtReadBaseGroup, etsysMgmdExtStatsCntrsNumV2QueriesSent=etsysMgmdExtStatsCntrsNumV2QueriesSent, etsysMgmdExtStatsCntrsNumLeavesRcvd=etsysMgmdExtStatsCntrsNumLeavesRcvd, etsysMgmdExtStaticCacheTable=etsysMgmdExtStaticCacheTable, etsysMgmdExtDiscoveredRouterApplication=etsysMgmdExtDiscoveredRouterApplication, etsysMgmdExtInterfaceTable=etsysMgmdExtInterfaceTable, etsysMgmdExtInterfaceEntry=etsysMgmdExtInterfaceEntry, etsysMgmdExtStatsCntrsGroup=etsysMgmdExtStatsCntrsGroup, etsysMgmdExtConfigMaxNumberOfGroups=etsysMgmdExtConfigMaxNumberOfGroups, MGMDDiscoveredRouterModeTc=MGMDDiscoveredRouterModeTc, etsysMgmdExtStaticCacheIPAddrType=etsysMgmdExtStaticCacheIPAddrType, etsysMgmdExtMIB=etsysMgmdExtMIB, etsysMgmdExtCacheGroupIPAddress=etsysMgmdExtCacheGroupIPAddress, etsysMgmdExtStatsCntrsNumV2ReportsRcvd=etsysMgmdExtStatsCntrsNumV2ReportsRcvd, etsysMgmdExtCompliances=etsysMgmdExtCompliances, etsysMgmdExtStatsCntsGroups=etsysMgmdExtStatsCntsGroups, MGMDNumGroupsTc=MGMDNumGroupsTc, etsysMgmdExtStatsCntrsNumGAndSQueriesRcvd=etsysMgmdExtStatsCntrsNumGAndSQueriesRcvd, etsysMgmdExtInterfaceFastLeaveState=etsysMgmdExtInterfaceFastLeaveState, etsysMgmdExtDiscoveredRouterGroups=etsysMgmdExtDiscoveredRouterGroups, etsysMgmdExtStaticCacheIncludeList=etsysMgmdExtStaticCacheIncludeList, etsysMgmdExtRtrAlertRequired=etsysMgmdExtRtrAlertRequired, etsysMgmdExtStatsCntrsClear=etsysMgmdExtStatsCntrsClear, etsysMgmdExtStatsCntrsNumV3ReportsRcvd=etsysMgmdExtStatsCntrsNumV3ReportsRcvd, etsysMgmdExtPortGroup=etsysMgmdExtPortGroup, etsysMgmdExtConfigGroups=etsysMgmdExtConfigGroups, etsysMgmdExtConfigFullAction=etsysMgmdExtConfigFullAction, etsysMgmdExtPortFastLeaveTable=etsysMgmdExtPortFastLeaveTable, etsysMgmdExtCacheGroup=etsysMgmdExtCacheGroup, etsysMgmdExtProtocolClassificationGroup=etsysMgmdExtProtocolClassificationGroup, etsysMgmdExtConfigNumberOfGroups=etsysMgmdExtConfigNumberOfGroups, etsysMgmdExtStatsCntrsNumV3QueriesRcvd=etsysMgmdExtStatsCntrsNumV3QueriesRcvd, etsysMgmdExtPortTableGroupIPAddress=etsysMgmdExtPortTableGroupIPAddress, etsysMgmdExtDiscoveredRouterBridgePortAgeTime=etsysMgmdExtDiscoveredRouterBridgePortAgeTime, etsysMgmdExtStatsCntrsNumV3QueriesSent=etsysMgmdExtStatsCntrsNumV3QueriesSent, MGMDProtocolIdTc=MGMDProtocolIdTc, etsysMgmdExtStatsCntrsEntry=etsysMgmdExtStatsCntrsEntry, etsysMgmdExtDiscoveredRouterStaticPortList=etsysMgmdExtDiscoveredRouterStaticPortList, etsysMgmdExtStatsCntrsNumV1QueriesRcvd=etsysMgmdExtStatsCntrsNumV1QueriesRcvd, etsysMgmdExtStaticCacheRowStatus=etsysMgmdExtStaticCacheRowStatus, etsysMgmdExtCacheExcludePortList=etsysMgmdExtCacheExcludePortList, etsysMgmdExtStatsCntrsNumV1QueriesSent=etsysMgmdExtStatsCntrsNumV1QueriesSent, etsysMgmdExtProtocolClassificationGroups=etsysMgmdExtProtocolClassificationGroups, etsysMgmdExtCacheExpiryTime=etsysMgmdExtCacheExpiryTime, etsysMgmdExtReadCompliance=etsysMgmdExtReadCompliance, etsysMgmdExtInterfaceGroup=etsysMgmdExtInterfaceGroup, etsysMgmdExtDiscoveredRouterEgressing=etsysMgmdExtDiscoveredRouterEgressing, etsysMgmdExtStatsCntrsApplication=etsysMgmdExtStatsCntrsApplication, etsysMgmdExtPortFastLeaveGroup=etsysMgmdExtPortFastLeaveGroup, etsysMgmdExtStatsCntrsNumBadFramesRcvd=etsysMgmdExtStatsCntrsNumBadFramesRcvd, etsysMgmdExtConfigGroup=etsysMgmdExtConfigGroup, etsysMgmdExtProtocolIdentifier=etsysMgmdExtProtocolIdentifier, PYSNMP_MODULE_ID=etsysMgmdExtMIB, etsysMgmdExtStaticCacheGroupIPAddress=etsysMgmdExtStaticCacheGroupIPAddress, etsysMgmdExtWriteCompliance=etsysMgmdExtWriteCompliance, etsysMgmdExtObjects=etsysMgmdExtObjects, etsysMgmdExtConformance=etsysMgmdExtConformance, etsysMgmdExtStaticCacheExcludeList=etsysMgmdExtStaticCacheExcludeList, etsysMgmdExtStatsCntrsNumV1ReportsRcvd=etsysMgmdExtStatsCntrsNumV1ReportsRcvd, etsysMgmdExtGroups=etsysMgmdExtGroups, etsysMgmdExtPortTable=etsysMgmdExtPortTable, etsysMgmdExtProtocolClassificationEntry=etsysMgmdExtProtocolClassificationEntry, etsysMgmdExtPortMode=etsysMgmdExtPortMode, etsysMgmdExtCacheEntry=etsysMgmdExtCacheEntry, etsysMgmdExtProtocolClassification=etsysMgmdExtProtocolClassification, etsysMgmdExtProtocolClassificationTable=etsysMgmdExtProtocolClassificationTable, etsysMgmdExtCacheGroups=etsysMgmdExtCacheGroups, etsysMgmdExtPortFastLeaveTableEntry=etsysMgmdExtPortFastLeaveTableEntry, etsysMgmdExtStaticCacheGroups=etsysMgmdExtStaticCacheGroups, MGMDPortModeTc=MGMDPortModeTc, etsysMgmdExtPortIPAddressType=etsysMgmdExtPortIPAddressType, etsysMgmdExtPortTableEntry=etsysMgmdExtPortTableEntry, etsysMgmdExtInterfaceQueryEnableState=etsysMgmdExtInterfaceQueryEnableState, etsysMgmdExtStatsCntrsNumGSQueriesRcvd=etsysMgmdExtStatsCntrsNumGSQueriesRcvd, etsysMgmdExtDiscoveredRouterGroup=etsysMgmdExtDiscoveredRouterGroup, etsysMgmdExtPortGroups=etsysMgmdExtPortGroups, etsysMgmdExtConfigDefaultNumberOfGroups=etsysMgmdExtConfigDefaultNumberOfGroups, etsysMgmdExtCacheSourceIPAddress=etsysMgmdExtCacheSourceIPAddress, etsysMgmdExtStatsCntrsNumWrongVersionQueriesRcvd=etsysMgmdExtStatsCntrsNumWrongVersionQueriesRcvd, etsysMgmdExtDiscoveredRouterEntry=etsysMgmdExtDiscoveredRouterEntry, etsysMgmdExtStaticCacheGroup=etsysMgmdExtStaticCacheGroup, MGMDProtocolClassTc=MGMDProtocolClassTc, etsysMgmdExtConfigMinNumberOfGroups=etsysMgmdExtConfigMinNumberOfGroups, etsysMgmdExtStatsCntrsGroupFull=etsysMgmdExtStatsCntrsGroupFull, etsysMgmdExtPortFastLeaveGroups=etsysMgmdExtPortFastLeaveGroups, etsysMgmdExtDiscoveredRouterLearnedMethod=etsysMgmdExtDiscoveredRouterLearnedMethod, etsysMgmdExtCacheIPAddrType=etsysMgmdExtCacheIPAddrType, etsysMgmdExtPortTableExpireTime=etsysMgmdExtPortTableExpireTime, etsysMgmdExtPortTableSourceIPAddress=etsysMgmdExtPortTableSourceIPAddress, etsysMgmdExtCacheSrcPort=etsysMgmdExtCacheSrcPort)
