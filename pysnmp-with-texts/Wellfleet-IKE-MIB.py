#
# PySNMP MIB module Wellfleet-IKE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Wellfleet-IKE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:40:29 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, Counter64, Integer32, Gauge32, ObjectIdentity, Opaque, ModuleIdentity, Bits, MibIdentifier, Unsigned32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, iso, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Counter64", "Integer32", "Gauge32", "ObjectIdentity", "Opaque", "ModuleIdentity", "Bits", "MibIdentifier", "Unsigned32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "iso", "NotificationType")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
wfIKEGroup, = mibBuilder.importSymbols("Wellfleet-COMMON-MIB", "wfIKEGroup")
wfIkeDescriptorTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 27, 1), )
if mibBuilder.loadTexts: wfIkeDescriptorTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfIkeDescriptorTable.setDescription('Table of Internet Key Exchange descriptors. The descriptors correspond to IKE Proposals in the IKE RFC.')
wfIkeDescriptorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 27, 1, 1), ).setIndexNames((0, "Wellfleet-IKE-MIB", "wfIkeDescriptorLocalIpAddr"), (0, "Wellfleet-IKE-MIB", "wfIkeDescriptorPeerIpAddr"), (0, "Wellfleet-IKE-MIB", "wfIkeDescriptorIndex"))
if mibBuilder.loadTexts: wfIkeDescriptorEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfIkeDescriptorEntry.setDescription('An Internet Key Exchange Descriptor')
wfIkeDescriptorCreate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 27, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIkeDescriptorCreate.setStatus('mandatory')
if mibBuilder.loadTexts: wfIkeDescriptorCreate.setDescription('Create/Delete parameter. Default is created.')
wfIkeDescriptorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 27, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("notpresent", 3))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIkeDescriptorStatus.setStatus('mandatory')
if mibBuilder.loadTexts: wfIkeDescriptorStatus.setDescription('')
wfIkeDescriptorLocalIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 27, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIkeDescriptorLocalIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wfIkeDescriptorLocalIpAddr.setDescription('The address of the local IP interface to which this instance applies.')
wfIkeDescriptorPeerIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 27, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIkeDescriptorPeerIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wfIkeDescriptorPeerIpAddr.setDescription('The address of the remote IP interface to which this instance applies.')
wfIkeDescriptorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 27, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIkeDescriptorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfIkeDescriptorIndex.setDescription('Differentiates instances with same peer IP addr')
wfIkeDescriptorExchange = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 27, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("main", 1), ("aggressive", 2))).clone('main')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIkeDescriptorExchange.setStatus('mandatory')
if mibBuilder.loadTexts: wfIkeDescriptorExchange.setDescription('')
wfIkeDescriptorProposals = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 27, 1, 1, 7), Opaque()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIkeDescriptorProposals.setStatus('mandatory')
if mibBuilder.loadTexts: wfIkeDescriptorProposals.setDescription("an ordered, logically OR'ed list of IKE proposals")
wfIkeDescriptorName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 27, 1, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIkeDescriptorName.setStatus('mandatory')
if mibBuilder.loadTexts: wfIkeDescriptorName.setDescription('Name of Ike Descriptor Entry')
wfIkeDescriptorPreSharedSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 27, 1, 1, 9), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIkeDescriptorPreSharedSecret.setStatus('mandatory')
if mibBuilder.loadTexts: wfIkeDescriptorPreSharedSecret.setDescription('IKE Pre shared secret')
wfIkeDescriptorExpiryMinutes = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 27, 1, 1, 10), Integer32().clone(480)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIkeDescriptorExpiryMinutes.setStatus('mandatory')
if mibBuilder.loadTexts: wfIkeDescriptorExpiryMinutes.setDescription('The value used to determine when the keys for this SA expire due to the passage of time.')
wfIkeDescriptorExpiryKBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 27, 1, 1, 11), Integer32().clone(1024)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIkeDescriptorExpiryKBytes.setStatus('mandatory')
if mibBuilder.loadTexts: wfIkeDescriptorExpiryKBytes.setDescription('The value used to determine when the keys for this SA expire due to the number of bytes processed. The units are kilobytes.')
wfIkeDescriptorExpiryPref = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 27, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("minutes", 1), ("kbytes", 2))).clone('minutes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIkeDescriptorExpiryPref.setStatus('mandatory')
if mibBuilder.loadTexts: wfIkeDescriptorExpiryPref.setDescription('')
wfIkeDescriptorIdType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 27, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("range", 1), ("subnet", 2), ("host", 3))).clone('range')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIkeDescriptorIdType.setStatus('mandatory')
if mibBuilder.loadTexts: wfIkeDescriptorIdType.setDescription('Controls the ID type sent in the ID payload. Use subnet if the peer cannot interpret the range type')
wfIkeTransformTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 27, 2), )
if mibBuilder.loadTexts: wfIkeTransformTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfIkeTransformTable.setDescription('Table of Internet Key Exchange Transforms')
wfIkeTransformEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 27, 2, 1), ).setIndexNames((0, "Wellfleet-IKE-MIB", "wfIkeTransformNumber"))
if mibBuilder.loadTexts: wfIkeTransformEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfIkeTransformEntry.setDescription('An Internet Key Exchange Transform')
wfIkeTransformCreate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 27, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIkeTransformCreate.setStatus('mandatory')
if mibBuilder.loadTexts: wfIkeTransformCreate.setDescription('Create/Delete parameter. Default is created.')
wfIkeTransformStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 27, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("notpresent", 3))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIkeTransformStatus.setStatus('mandatory')
if mibBuilder.loadTexts: wfIkeTransformStatus.setDescription('')
wfIkeTransformNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 27, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIkeTransformNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfIkeTransformNumber.setDescription('')
wfIkeTransformCipherAlg = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 27, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 5))).clone(namedValues=NamedValues(("des", 1), ("desede", 5))).clone('desede')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIkeTransformCipherAlg.setStatus('mandatory')
if mibBuilder.loadTexts: wfIkeTransformCipherAlg.setDescription('')
wfIkeTransformDesKeyStrength = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 27, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fortybit", 1), ("fiftysixbit", 2))).clone('fiftysixbit')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIkeTransformDesKeyStrength.setStatus('mandatory')
if mibBuilder.loadTexts: wfIkeTransformDesKeyStrength.setDescription('')
wfIkeTransformIntegrityAlg = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 27, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("md5", 1), ("sha1", 2))).clone('sha1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIkeTransformIntegrityAlg.setStatus('mandatory')
if mibBuilder.loadTexts: wfIkeTransformIntegrityAlg.setDescription('')
wfIkeSlotTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 27, 3), )
if mibBuilder.loadTexts: wfIkeSlotTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfIkeSlotTable.setDescription('Per slot IKE configuration information')
wfIkeSlotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 27, 3, 1), ).setIndexNames((0, "Wellfleet-IKE-MIB", "wfIkeSlotNum"))
if mibBuilder.loadTexts: wfIkeSlotEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfIkeSlotEntry.setDescription('Defines per slot cfg info such as log level')
wfIkeSlotCreate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 27, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIkeSlotCreate.setStatus('mandatory')
if mibBuilder.loadTexts: wfIkeSlotCreate.setDescription('Specifies wfIkeEntry instantiation status')
wfIkeSlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 27, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIkeSlotNum.setStatus('mandatory')
if mibBuilder.loadTexts: wfIkeSlotNum.setDescription('The slot number')
wfIkeSlotLogLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 27, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIkeSlotLogLevel.setStatus('mandatory')
if mibBuilder.loadTexts: wfIkeSlotLogLevel.setDescription('Specifies the level(s) of log messages specified')
wfIkeSaTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 27, 4), )
if mibBuilder.loadTexts: wfIkeSaTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfIkeSaTable.setDescription('The IKE security association table')
wfIkeSaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 27, 4, 1), ).setIndexNames((0, "Wellfleet-IKE-MIB", "wfIkeSaSrc"), (0, "Wellfleet-IKE-MIB", "wfIkeSaDest"), (0, "Wellfleet-IKE-MIB", "wfIkeSaIndex"))
if mibBuilder.loadTexts: wfIkeSaEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfIkeSaEntry.setDescription('Entry in IKE security association table')
wfIkeSaCreate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 27, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIkeSaCreate.setStatus('mandatory')
if mibBuilder.loadTexts: wfIkeSaCreate.setDescription('Create/Delete parameter.')
wfIkeSaSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 27, 4, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIkeSaSrc.setStatus('mandatory')
if mibBuilder.loadTexts: wfIkeSaSrc.setDescription("The IP address of the SA's source.")
wfIkeSaDest = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 27, 4, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIkeSaDest.setStatus('mandatory')
if mibBuilder.loadTexts: wfIkeSaDest.setDescription("The IP address of the SA's destination.")
wfIkeSaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 27, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIkeSaIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfIkeSaIndex.setDescription('The index that differentiates IKE SAs')
wfIkeSaCipherAlg = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 27, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("des", 2), ("des3", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIkeSaCipherAlg.setStatus('mandatory')
if mibBuilder.loadTexts: wfIkeSaCipherAlg.setDescription('Identifies cipher algorithm for this SA.')
wfIkeSaIntegrityAlg = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 27, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("md5", 2), ("sha1", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIkeSaIntegrityAlg.setStatus('mandatory')
if mibBuilder.loadTexts: wfIkeSaIntegrityAlg.setDescription('The algorithm for ESP Auth.')
wfIkeSaExpiryUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 27, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("minutes", 1), ("kilobytes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIkeSaExpiryUnits.setStatus('mandatory')
if mibBuilder.loadTexts: wfIkeSaExpiryUnits.setDescription('The units used to interpret the expiry value.')
wfIkeSaExpiryValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 27, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIkeSaExpiryValue.setStatus('mandatory')
if mibBuilder.loadTexts: wfIkeSaExpiryValue.setDescription('The value used to determine when the keys for this SA expire.')
wfIkeSaBadDecrypt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 27, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIkeSaBadDecrypt.setStatus('mandatory')
if mibBuilder.loadTexts: wfIkeSaBadDecrypt.setDescription('The number of received packets that could not be properly decrypted.')
wfIkeSaBadPad = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 27, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIkeSaBadPad.setStatus('mandatory')
if mibBuilder.loadTexts: wfIkeSaBadPad.setDescription('The number of received packets that contained bad padding information.')
wfIkeSaTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 27, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIkeSaTxPkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfIkeSaTxPkts.setDescription('The number of packets sent.')
wfIkeSaRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 27, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIkeSaRxPkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfIkeSaRxPkts.setDescription('The number of packets received.')
wfIkeSaTxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 27, 4, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIkeSaTxOctets.setStatus('mandatory')
if mibBuilder.loadTexts: wfIkeSaTxOctets.setDescription('The number of octets transmitted.')
wfIkeSaRxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 27, 4, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIkeSaRxOctets.setStatus('mandatory')
if mibBuilder.loadTexts: wfIkeSaRxOctets.setDescription('The number of octets received.')
mibBuilder.exportSymbols("Wellfleet-IKE-MIB", wfIkeSlotEntry=wfIkeSlotEntry, wfIkeDescriptorPreSharedSecret=wfIkeDescriptorPreSharedSecret, wfIkeDescriptorStatus=wfIkeDescriptorStatus, wfIkeDescriptorPeerIpAddr=wfIkeDescriptorPeerIpAddr, wfIkeTransformCreate=wfIkeTransformCreate, wfIkeSaEntry=wfIkeSaEntry, wfIkeTransformCipherAlg=wfIkeTransformCipherAlg, wfIkeSaCipherAlg=wfIkeSaCipherAlg, wfIkeDescriptorLocalIpAddr=wfIkeDescriptorLocalIpAddr, wfIkeDescriptorTable=wfIkeDescriptorTable, wfIkeSlotLogLevel=wfIkeSlotLogLevel, wfIkeTransformDesKeyStrength=wfIkeTransformDesKeyStrength, wfIkeDescriptorIndex=wfIkeDescriptorIndex, wfIkeSaDest=wfIkeSaDest, wfIkeSlotTable=wfIkeSlotTable, wfIkeTransformIntegrityAlg=wfIkeTransformIntegrityAlg, wfIkeSaIndex=wfIkeSaIndex, wfIkeSlotNum=wfIkeSlotNum, wfIkeSaSrc=wfIkeSaSrc, wfIkeSaBadPad=wfIkeSaBadPad, wfIkeDescriptorCreate=wfIkeDescriptorCreate, wfIkeSaIntegrityAlg=wfIkeSaIntegrityAlg, wfIkeDescriptorEntry=wfIkeDescriptorEntry, wfIkeTransformStatus=wfIkeTransformStatus, wfIkeSlotCreate=wfIkeSlotCreate, wfIkeSaExpiryUnits=wfIkeSaExpiryUnits, wfIkeSaExpiryValue=wfIkeSaExpiryValue, wfIkeSaCreate=wfIkeSaCreate, wfIkeDescriptorExpiryKBytes=wfIkeDescriptorExpiryKBytes, wfIkeDescriptorExpiryPref=wfIkeDescriptorExpiryPref, wfIkeDescriptorIdType=wfIkeDescriptorIdType, wfIkeSaRxPkts=wfIkeSaRxPkts, wfIkeTransformEntry=wfIkeTransformEntry, wfIkeTransformTable=wfIkeTransformTable, wfIkeDescriptorExpiryMinutes=wfIkeDescriptorExpiryMinutes, wfIkeSaTable=wfIkeSaTable, wfIkeSaTxOctets=wfIkeSaTxOctets, wfIkeDescriptorName=wfIkeDescriptorName, wfIkeDescriptorExchange=wfIkeDescriptorExchange, wfIkeSaBadDecrypt=wfIkeSaBadDecrypt, wfIkeSaRxOctets=wfIkeSaRxOctets, wfIkeTransformNumber=wfIkeTransformNumber, wfIkeSaTxPkts=wfIkeSaTxPkts, wfIkeDescriptorProposals=wfIkeDescriptorProposals)
