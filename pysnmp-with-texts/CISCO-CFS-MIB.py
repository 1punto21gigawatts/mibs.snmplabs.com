#
# PySNMP MIB module CISCO-CFS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-CFS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:53:14 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
NotificationType, Bits, iso, Unsigned32, ModuleIdentity, ObjectIdentity, IpAddress, Counter64, Gauge32, Counter32, TimeTicks, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Bits", "iso", "Unsigned32", "ModuleIdentity", "ObjectIdentity", "IpAddress", "Counter64", "Gauge32", "Counter32", "TimeTicks", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier")
TextualConvention, DisplayString, TimeStamp = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "TimeStamp")
ciscoCFSMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 433))
ciscoCFSMIB.setRevisions(('2006-06-13 00:00', '2005-11-30 00:00', '2005-04-27 00:00', '2004-12-24 00:00', '2004-12-03 00:00', '2004-09-15 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoCFSMIB.setRevisionsDescriptions(('Added cfsFeatureOpExtLastActionTime object to cfsFeatureOpExtTable Added cfsFeatureOpExtGroupRev1 Added ciscoCFSMIBComplianceRev3 ', 'Added the following: - cfsDistCtrlTable table - cfsFeatureOpAttribs object to cfsFeatureOpTable ', "Added an enumeration value of 'partialSuccess' to the 'CiscoCFSFeatureActionResult' TC. ", 'Added the cfsDistCtrl object to control the CFS distribution capability. ', 'Added the following tables: - cfsMergeMembersTable - cfsPeersTable - cfsFeaturePeersTable - cfsFeatureOpExtTable Added the following scalar objects: - cfsStartPeersDiscovery - cfsPeersDiscoveryResult - cfsPeersDiscoveryFailureReason Added additional enumerations for: - cfsMergeStatusValue Added notification: - ciscoCFSDiscoveryCompleteNotif ', 'Initial version of this MIB. ',))
if mibBuilder.loadTexts: ciscoCFSMIB.setLastUpdated('200606130000Z')
if mibBuilder.loadTexts: ciscoCFSMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoCFSMIB.setContactInfo(' Cisco Systems Network Management Technology Group Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-san@cisco.com')
if mibBuilder.loadTexts: ciscoCFSMIB.setDescription("This MIB applies to one or more of a set of devices which have connectivity through some kind of 'fabric'. Many features which run in such an environment require the exchange of information between the peer devices which participate in providing the feature. An example of the type of information exchanged is configuration information. It would be advantageous to have the ability to have configuration for a feature done on one device and propagated to all other devices in the fabric. Cisco Fabric Service (CFS) is a general mechanism for data distribution within the fabric that could be used by most features. A feature supported in a device may or may not be CFS capable. In case a feature is CFS capable, the control of the CFS operations are instrumented through this MIB. A CFS capable feature can be enabled for data distribution within the fabric by the user via SNMP. When a CFS capable feature is enabled for data distribution, CFS operations can then be performed for that particular feature. As part of the CFS configuration the first mandatory step is to explicitly enable the feature for data distribution. This enabling of distribution for a feature needs to be done for those devices in the fabric where the distribution is intended. Following this mandatory step, feature specific configurations can be instrumented in the respective MIBs. Once a feature is enabled for data distribution, first subsequent feature specific configuration SET operation results in a snapshot of current 'Running Configuration' of the feature, on the local device. This snapshot is used for subsequent modifications by feature specific SET operations. Such modified configuration is referred to as 'Pending Configuration'. There can only be one 'Pending Configuration' in the fabric. Additionally, such 'Pending Configuration' can be maintained within the context of additional scope, specific to the respective features. The user who initiates the creation of the 'Pending Configuration' is its owner. When a 'Pending Configuration' for a feature exists in one of the devices of the fabric, an attempt to create a 'Pending Configuration' for the same feature and on a different device by way of feature specific SET operation results in an error. This means feature specific SET operations intended for distribution can only be performed on the device that has the 'Pending Configuration' with it. This ensures data consistency for distribution. Once the configuration of a feature is ready to be distributed to all devices connected to the fabric, a 'commit' action performed on the local device overwrites the local 'Running Configuration' and then distributes the new local 'Running Configuration' to all other devices in the fabric. The successful 'commit' action also results into destroying of the 'Pending Configuration' and makes the feature available for new distribution. Any attempt to perform 'commit' without any modification results in to an error. The 'commit' action can only be performed by the owner of the 'Pending Configuration'. The 'Pending Configuration' can optionally be destroyed without any distribution. This can be done by using either 'abort' or 'clear' action. The 'abort' action needs to performed only on that device where the 'Pending Configuration' exists and can only be performed by the owner of the 'Pending Configuration'. The 'clear' action can be initiated through any of the devices in the fabric. The successful 'abort' or 'clear' operation makes the feature available for new distribution. The CFS, in addition to providing the basic distribution infrastructure to the CFS capable features in a stable fabric, also provides infrastructure to handle data distribution when two stable fabrics merge. This MIB module is to facilitate the global level control (enabling/disabling) and actions (commit/abort/clear) over the CFS capable features in the system. Glossary of the terms used in this MIB: -------------------------------------- VSAN - Virtual Storage Area Network, similar to a VLAN. CFS feature Scope - The scope of distribution. The scope provides the context within which the CFS actions are performed on a CFS capable feature. CFS Fabric Merge - The merging of two stable fabrics. The CFS provides infrastructure to handle data distribution for CFS distribution enabled features when the two stable fabrics merge. CFS control and actions : CFS Distribution Enable - This is to enable data distribution for CFS capable feature. CFS Distribution Disable - This is to disable data distribution for CFS capable feature. CFS Commit - This is to commit the 'Pending Configuration' on the local device. This action triggers the distribution of the 'Pending Configuration' to all the devices in the fabric. CFS Abort - This is to Destroy the 'Pending Configuration' on the local device without any distribution. Once local 'Pending Configuration' is destroyed, creation of 'Pending Configuration' in the local or any other device connected to the fabric is allowed. CFS Clear - This is to Destroy the 'Pending Configuration' that exists in any of the device in the fabric. Once 'Pending Configuration' that exists with one of the devices in the fabric is destroyed, creation of 'Pending Configuration' in the local or any other device connected to the fabric is allowed. ")
ciscoCFSMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 433, 0))
ciscoCFSMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 433, 1))
ciscoCFSMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 433, 2))
cfsFeature = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 433, 1, 1))
cfsNotifObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 433, 1, 2))
cfsDiscoveryObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 433, 1, 3))
cfsDistCtrlObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 433, 1, 4))
class CiscoCFSAction(TextualConvention, Integer32):
    description = "Actions available for the CFS. 'noop' - No operation 'enable' - CFS Distribution Enable 'disable' - CFS Distribution Disable 'commit' - CFS Commit 'abort' - CFS Abort 'clear' - CFS Clear. This can be initiated by any user who has write access to the object of 'CiscoCFSAction' type. "
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("noop", 1), ("enable", 2), ("disable", 3), ("commit", 4), ("abort", 5), ("clear", 6))

class CiscoCFSFeatureStatus(TextualConvention, Integer32):
    description = "Status of the CFS capable feature. 'unknown' - Unknown status 'enabled' - Feature is enabled for CFS operations 'disabled' - Feature is disabled for any CFS operations "
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("unknown", 1), ("enabled", 2), ("disabled", 3))

class CiscoCFSFeatureActionResult(TextualConvention, Integer32):
    description = "Result of the action performed on a CFS capable feature. 'none' - No previous action was performed 'success' - Execution of the action triggered is completed Successfully 'failed' - Execution of the action has failed 'inProgress' - Execution of the action triggered is in progress 'partialSuccess' - Execution of the action triggered has succeeded partially in the fabric "
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("none", 1), ("success", 2), ("failed", 3), ("inProgress", 4), ("partialSuccess", 5))

class CiscoCFSScopeType(TextualConvention, Integer32):
    description = "A generic value that represents the type of CFS feature scope. 'none' - No scope 'vsanID' - VSAN scope "
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("none", 1), ("vsanID", 2))

class CiscoCFSScopeValue(TextualConvention, OctetString):
    description = 'Denotes a CFS feature scope value to be used with CiscoCFSScopeType. A CiscoCFSScopeValue is always interpreted within the context of an CiscoCFSScopeType value. Every usage of the CiscoCFSScopeValue textual convention is required to specify the CiscoCFSScopeType object which provides the context. The encoding of the CiscoCFSScopeValue object for a specific scope type is as below: ScopeType Octets Contents Encoding --------- ------ -------- -------- vsanID 1-4 VSAN ID of the VSAN network-byte order '
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 255)

cfsFeatureOpTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 433, 1, 1, 1), )
if mibBuilder.loadTexts: cfsFeatureOpTable.setStatus('current')
if mibBuilder.loadTexts: cfsFeatureOpTable.setDescription('This table lists all the CFS capable features in the local device. The table provides control, actions, current operating state information and last action result information for CFS capable features. Each entry in this table represents a CFS capable feature. An entry in the table is created by the agent when CFS capable feature registers with CFS infrastructure. The agent removes the entry from the table when the CFS capable de-registers with CFS infrastructure. Management application can not create new entry in this table. ')
cfsFeatureOpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 433, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-CFS-MIB", "cfsFeatureOpName"))
if mibBuilder.loadTexts: cfsFeatureOpEntry.setStatus('current')
if mibBuilder.loadTexts: cfsFeatureOpEntry.setDescription('A conceptual row in the cfsFeatureOpTable. Each row represents a CFS capable feature in the system. ')
cfsFeatureOpName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 433, 1, 1, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)))
if mibBuilder.loadTexts: cfsFeatureOpName.setStatus('current')
if mibBuilder.loadTexts: cfsFeatureOpName.setDescription('A human readable string value uniquely identifying the name of this feature. ')
cfsFeatureOpAction = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 433, 1, 1, 1, 1, 2), CiscoCFSAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfsFeatureOpAction.setStatus('current')
if mibBuilder.loadTexts: cfsFeatureOpAction.setDescription("The CFS action to be triggered for the feature. An operator should successfully enable CFS distribution of a feature by issuing an 'enable' action before performing a 'commit' or 'abort' operation. The value of this object and the values of corresponding instance of cfsFeatureOpScopeType and cfsFeatureOpScopeVal are interpreted and applied together as single CFS action trigger on the feature. The scope type and values provide the context/scope within which the this action is applied. Setting of this object will fail with 'inconsistentValue', if the value of the corresponding instance of cfsFeatureOpLastActionResult is 'inProgress'. However, the value of this object can be set to 'clear' regardless of the value of the corresponding instance of cfsFeatureOpLastActionResult. Retrieving the value of this object via SNMP will always return 'noop'. ")
cfsFeatureOpScopeType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 433, 1, 1, 1, 1, 3), CiscoCFSScopeType().clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfsFeatureOpScopeType.setStatus('current')
if mibBuilder.loadTexts: cfsFeatureOpScopeType.setDescription('The value of this object specifies the type of the value of the corresponding instance of cfsFeatureOpScopeVal. The agent is not required to retain the modified value of this object across the agent restart. ')
cfsFeatureOpScopeVal = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 433, 1, 1, 1, 1, 4), CiscoCFSScopeValue().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfsFeatureOpScopeVal.setStatus('current')
if mibBuilder.loadTexts: cfsFeatureOpScopeVal.setDescription("The CFS feature scope value to be used with cfsFeatureOpScopeType. The value of this object may not be relevant when the value of the corresponding instance of cfsFeatureOpAction is SET to 'enable' or 'disable'. The agent is not required to retain the modified value of this object across the agent restart. ")
cfsFeatureOpLastAction = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 433, 1, 1, 1, 1, 5), CiscoCFSAction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfsFeatureOpLastAction.setStatus('current')
if mibBuilder.loadTexts: cfsFeatureOpLastAction.setDescription("The last action performed on this feature. If no action has been triggered for the feature since the last reboot of the system, then retrieving the value of this object will return 'noop'. ")
cfsFeatureOpLastScopeType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 433, 1, 1, 1, 1, 6), CiscoCFSScopeType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfsFeatureOpLastScopeType.setStatus('current')
if mibBuilder.loadTexts: cfsFeatureOpLastScopeType.setDescription("The last CFS feature scope type used for cfsFeatureOpLastAction. If no action has been triggered for the feature since the last reboot of the system, then retrieving the value of this object will return 'none'. ")
cfsFeatureOpLastScopeVal = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 433, 1, 1, 1, 1, 7), CiscoCFSScopeValue().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfsFeatureOpLastScopeVal.setStatus('current')
if mibBuilder.loadTexts: cfsFeatureOpLastScopeVal.setDescription('The last CFS feature scope value used for cfsFeatureOpLastScopeType. If no action has been triggered for the feature since the last reboot of the system, then retrieving the value of this object will return zero-length string. ')
cfsFeatureOpLastActionResult = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 433, 1, 1, 1, 1, 8), CiscoCFSFeatureActionResult()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfsFeatureOpLastActionResult.setStatus('current')
if mibBuilder.loadTexts: cfsFeatureOpLastActionResult.setDescription("The result of the execution of the last action (represented by the value of cfsFeatureOpLastAction) for the feature. When the value of this object is 'actionInProgress', the value of the corresponding instance of cfsFeatureOpAction can not be modified. ")
cfsFeatureOpLastFailureReason = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 433, 1, 1, 1, 1, 9), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfsFeatureOpLastFailureReason.setStatus('current')
if mibBuilder.loadTexts: cfsFeatureOpLastFailureReason.setDescription("The failure reason description for the failed execution of last action performed on this feature. If the corresponding instance of cfsFeatureOpLastActionResult has the value 'actionFailed', then this object contains the reason as to why it failed. Otherwise, the value of this object is the zero-length string. ")
cfsFeatureOpShowCfgOption = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 433, 1, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("runningConfig", 1), ("pendingConfig", 2))).clone('runningConfig')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfsFeatureOpShowCfgOption.setStatus('deprecated')
if mibBuilder.loadTexts: cfsFeatureOpShowCfgOption.setDescription("This object provides a means for management applications to either view the contents of 'Running Configuration' or 'Pending Configuration'. When the value of this object is 'runningConfig', all the subsequent configuration retrieval for this feature will be from 'Running Configuration' on the local device. When the value of this object is 'pendingConfig', all the subsequent configuration retrieval for this feature will be from 'Pending Configuration' on the local device. The value of this object is meaningful only when the value of the corresponding instance of 'cfsFeatureOpStatus' is 'enabled'. The agent is not required to retain the modified value of this object across the agent restart. ")
cfsFeatureOpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 433, 1, 1, 1, 1, 11), CiscoCFSFeatureStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfsFeatureOpStatus.setStatus('current')
if mibBuilder.loadTexts: cfsFeatureOpStatus.setDescription('The current operating status of the feature. ')
cfsFeatureOpAttribs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 433, 1, 1, 1, 1, 12), Bits().clone(namedValues=NamedValues(("fcFabric", 0), ("ipNetwork", 1), ("vsanScope", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfsFeatureOpAttribs.setStatus('current')
if mibBuilder.loadTexts: cfsFeatureOpAttribs.setDescription("The value of this object represents the attributes of a CFS capable feature as registered with the CFS infrastructure. 'fcFabric' - indicates that the CFS based distribution for a feature spans the entire FC (Fibre Channel) fabric 'ipNetwork' - indicates that the CFS based distribution for a feature spans the entire IP network 'vsanScope' - indicates that the CFS based distribution for a feature is done on per VSAN basis and restricted to a specific VSAN in a FC (Fibre Channel) fabric ")
cfsPendingConfOwnerTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 433, 1, 1, 2), )
if mibBuilder.loadTexts: cfsPendingConfOwnerTable.setStatus('current')
if mibBuilder.loadTexts: cfsPendingConfOwnerTable.setDescription("This table contains per-feature 'Pending Configuration' owner information. This table will have entries only for those features for which 'Pending Configuration' exists in one of the devices in the fabric. This table provides the 'Pending Configuration' owner (type and name) information and Device address where the 'Pending Configuration' exists in the fabric. The 'Pending Configuration' owner details are per CFS capable feature within a specific scope. ")
cfsPendingConfOwnerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 433, 1, 1, 2, 1), ).setIndexNames((0, "CISCO-CFS-MIB", "cfsFeatureOpName"), (0, "CISCO-CFS-MIB", "cfsPendingConfOwnerScopeType"), (0, "CISCO-CFS-MIB", "cfsPendingConfOwnerScopeVal"))
if mibBuilder.loadTexts: cfsPendingConfOwnerEntry.setStatus('current')
if mibBuilder.loadTexts: cfsPendingConfOwnerEntry.setDescription("A conceptual row in the 'cfsPendingConfOwnerTable'. Each row represents a CFS capable feature within the context of the combination of scope type and scope value in the system. ")
cfsPendingConfOwnerScopeType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 433, 1, 1, 2, 1, 1), CiscoCFSScopeType())
if mibBuilder.loadTexts: cfsPendingConfOwnerScopeType.setStatus('current')
if mibBuilder.loadTexts: cfsPendingConfOwnerScopeType.setDescription('This indicates the type of the cfsPendingConfOwnerScopeVal. ')
cfsPendingConfOwnerScopeVal = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 433, 1, 1, 2, 1, 2), CiscoCFSScopeValue().subtype(subtypeSpec=ValueSizeConstraint(0, 32)))
if mibBuilder.loadTexts: cfsPendingConfOwnerScopeVal.setStatus('current')
if mibBuilder.loadTexts: cfsPendingConfOwnerScopeVal.setDescription("The CFS scope value used with cfsPendingConfOwnerScopeType. This indicates the scope of the feature within which the 'Pending Configuration' for the feature exists. ")
cfsPendingConfOwnerAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 433, 1, 1, 2, 1, 3), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfsPendingConfOwnerAddrType.setStatus('current')
if mibBuilder.loadTexts: cfsPendingConfOwnerAddrType.setDescription("The type of address of the device in the fabric where the 'Pending Configuration' exists for the feature within this scope. ")
cfsPendingConfOwnerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 433, 1, 1, 2, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfsPendingConfOwnerAddr.setStatus('current')
if mibBuilder.loadTexts: cfsPendingConfOwnerAddr.setDescription("The address of the device in the fabric where the 'Pending Configuration' exists for the feature within this scope. The type of address of an instance of this object is determined by the value of the corresponding instance of cfsPendingConfOwnerAddrType. ")
cfsPendingConfOwnerIDType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 433, 1, 1, 2, 1, 5), Bits().clone(namedValues=NamedValues(("other", 0), ("snmpCommunityName", 1), ("snmpv3SecurityName", 2), ("cliLoginName", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfsPendingConfOwnerIDType.setReference(" - 'securityName' is defined in RFC 3411, section 3.2.2 - 'snmpCommunityName' as defined in RFC3584 ")
if mibBuilder.loadTexts: cfsPendingConfOwnerIDType.setStatus('current')
if mibBuilder.loadTexts: cfsPendingConfOwnerIDType.setDescription("The value of this object indicates the type of the value of the corresponding instance of 'cfsPendingConfOwnerID': 'other' - indicates that the value of 'cfsPendingConfOwnerID' is other than any of the enumerations defined 'snmpCommunityName' - indicates that the value of 'cfsPendingConfOwnerID' is 'snmpCommunityName' of SNMPv1/ SNMPv2c 'snmpv3SecurityName' - indicate that the value of 'cfsPendingConfOwnerID' is 'securityName' of SNMPv3 user 'cliLoginName' - indicates that the value of 'cfsPendingConfOwnerID' is CLI 'User Login Name' of CLI user ")
cfsPendingConfOwnerID = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 433, 1, 1, 2, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfsPendingConfOwnerID.setStatus('current')
if mibBuilder.loadTexts: cfsPendingConfOwnerID.setDescription("A human readable string representing the identity of the owner of the 'Pending Configuration' that exists in the device represented by the values of corresponding instance of cfsPendingConfOwnerAddrType and cfsPendingConfOwnerAddr. The value of the corresponding instance of cfsPendingConfOwnerIDType indicates the type of the value of this object. ")
cfsMergeStatusTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 433, 1, 1, 3), )
if mibBuilder.loadTexts: cfsMergeStatusTable.setStatus('current')
if mibBuilder.loadTexts: cfsMergeStatusTable.setDescription("This table provides status of the 'Fabric Merge' on the CFS capable features within the context of a scope. This table will have entries only for those features for which CFS fabric distribution is enabled and 'Fabric Merge' is supported. ")
cfsMergeStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 433, 1, 1, 3, 1), ).setIndexNames((0, "CISCO-CFS-MIB", "cfsFeatureOpName"), (0, "CISCO-CFS-MIB", "cfsMergeStatusScopeType"), (0, "CISCO-CFS-MIB", "cfsMergeStatusScopeVal"))
if mibBuilder.loadTexts: cfsMergeStatusEntry.setStatus('current')
if mibBuilder.loadTexts: cfsMergeStatusEntry.setDescription('A conceptual row in the cfsMergeStatusTable. Each row represents a CFS capable feature within the context of the combination of scope type and scope value in the system. ')
cfsMergeStatusScopeType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 433, 1, 1, 3, 1, 1), CiscoCFSScopeType())
if mibBuilder.loadTexts: cfsMergeStatusScopeType.setStatus('current')
if mibBuilder.loadTexts: cfsMergeStatusScopeType.setDescription('This indicates the type of the cfsMergeStatusScopeVal. ')
cfsMergeStatusScopeVal = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 433, 1, 1, 3, 1, 2), CiscoCFSScopeValue().subtype(subtypeSpec=ValueSizeConstraint(0, 32)))
if mibBuilder.loadTexts: cfsMergeStatusScopeVal.setStatus('current')
if mibBuilder.loadTexts: cfsMergeStatusScopeVal.setDescription("The CFS scope value used with cfsMergeStatusScopeType. This indicates the scope of the feature within which the 'Fabric Merge' for the feature has occurred. ")
cfsMergeStatusValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 433, 1, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("success", 1), ("inProgress", 2), ("failure", 3), ("waiting", 4), ("other", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfsMergeStatusValue.setStatus('current')
if mibBuilder.loadTexts: cfsMergeStatusValue.setDescription("The result of the last 'Fabric Merge' for the feature within the context of the combination of 'cfsMergeStatusScopeType' and 'cfsMergeStatusScopeVal' in the system: 'success' - Fabric Merge successfully completed 'inProgress' - Fabric Merge in progress 'failure' - Fabric Merge failed 'waiting' - Waiting for existing Merge conflict to be cleared 'other' - None of the other values of this enumeration The value of this object is 'inProgress' when the local device is part of a fabric that is in the process of merging with another fabric. The value of this object is 'waiting' when this local device is waiting for any existing 'Fabric Merge Conflict' to be resolved before it initiates the new instance of 'Fabric Merge'. ")
cfsMergeMembersTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 433, 1, 1, 4), )
if mibBuilder.loadTexts: cfsMergeMembersTable.setStatus('current')
if mibBuilder.loadTexts: cfsMergeMembersTable.setDescription("This table provides a list of devices in the local/ remote fabric after 'Fabric Merge' on a per CFS capable feature basis within the context of a scope. This table will have entries only for those features for which CFS fabric distribution is enabled and 'Fabric Merge' is supported. ")
cfsMergeMembersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 433, 1, 1, 4, 1), ).setIndexNames((0, "CISCO-CFS-MIB", "cfsFeatureOpName"), (0, "CISCO-CFS-MIB", "cfsMergeStatusScopeType"), (0, "CISCO-CFS-MIB", "cfsMergeStatusScopeVal"), (0, "CISCO-CFS-MIB", "cfsMergeMemberAddrType"), (0, "CISCO-CFS-MIB", "cfsMergeMemberAddr"))
if mibBuilder.loadTexts: cfsMergeMembersEntry.setStatus('current')
if mibBuilder.loadTexts: cfsMergeMembersEntry.setDescription("A conceptual row in the 'cfsMergeMembersTable'. Each row represents a device in the local/remote fabric supporting CFS capable feature within the context of a scope in the system. ")
cfsMergeMemberAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 433, 1, 1, 4, 1, 1), InetAddressType())
if mibBuilder.loadTexts: cfsMergeMemberAddrType.setStatus('current')
if mibBuilder.loadTexts: cfsMergeMemberAddrType.setDescription("The type of the address of the device in the fabric which has participated in the 'Fabric Merge' within the context of a CFS feature and scope. ")
cfsMergeMemberAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 433, 1, 1, 4, 1, 2), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(0, 32)))
if mibBuilder.loadTexts: cfsMergeMemberAddr.setStatus('current')
if mibBuilder.loadTexts: cfsMergeMemberAddr.setDescription("The address of the device in the fabric which has participated in the 'Fabric Merge' within the context of a CFS feature and scope. The type of address of an instance of this object is determined by the value of the corresponding instance of cfsMergeMemberAddrType. ")
cfsMergeMemberFabricType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 433, 1, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("local", 2), ("remote", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfsMergeMemberFabricType.setStatus('current')
if mibBuilder.loadTexts: cfsMergeMemberFabricType.setDescription("The type of the fabric to which the device belongs to, during/after the 'Fabric Merge'. The fabric to which the local device is attached to is referred to as 'local fabric'. The fabric which attempted to merge with the local fabric is referred to as 'remote fabric'. When the value of the corresponding instance of cfsMergeStatusValue is 'successful' or 'waiting', all the devices will be in a single 'CFS fabric' and belong to the 'local' fabric. When the value of the corresponding instance of cfsMergeStatusValue is 'failure' or 'inProgress', the devices in the other fabric which attempted 'Fabric Merge' are marked as 'remote'. ")
cfsMergeMemberRole = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 433, 1, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("master", 2), ("peer", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfsMergeMemberRole.setStatus('current')
if mibBuilder.loadTexts: cfsMergeMemberRole.setDescription("The role of the device during the 'Fabric Merge'. In case of a successful fabric merge/stable fabric only one device can be a 'master'. In case of a fabric merge failure, there can be multiple 'master' devices, corresponding to each of the fabric fragments. All other devices which are not 'master' assume the role of a 'peer'. The algorithm for the selection of the 'Merge Master' device within a stable fabric is platform specific. ")
cfsStartPeersDiscovery = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 433, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("startDiscovery", 1), ("noOp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfsStartPeersDiscovery.setStatus('current')
if mibBuilder.loadTexts: cfsStartPeersDiscovery.setDescription("This object specifies whether a discovery cycle should be started by the CFS to discover all the 'peers' in the fabric. When the value of this object is set to 'startDiscovery', the discovery of the CFS capable devices in the fabric is started by the CFS. On successful completion of the discovery, the entries in the 'cfsPeersTable' will be populated. When the value of cfsPeersDiscoveryResult is 'inProgress', setting the value of this object to 'startDiscovery' results in an error. No action is taken if this object is set to 'noOp'. The value of this object when read is always 'noOp'. ")
cfsPeersDiscoveryResult = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 433, 1, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notInitiated", 1), ("inProgress", 2), ("successful", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfsPeersDiscoveryResult.setStatus('current')
if mibBuilder.loadTexts: cfsPeersDiscoveryResult.setDescription("This object represents the result of the last discovery command issued by way of setting the value of cfsStartPeersDiscovery to 'startDiscovery'. When the CFS discovery was never initiated using the cfsStartPeersDiscovery, the value of this object is 'notInitiated'. When the value of this object is 'notInitiated', the management station needs initiate the discovery cycle by setting the value of cfsStartPeersDiscovery to 'startDiscovery'. If the value of this object is 'successful', then the cfsPeersTable is appropriately populated. ")
cfsPeersDiscoveryFailureReason = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 433, 1, 3, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfsPeersDiscoveryFailureReason.setStatus('current')
if mibBuilder.loadTexts: cfsPeersDiscoveryFailureReason.setDescription("The failure reason description for the last failed CFS peers discovery. If the value of cfsPeersDiscoveryResult object has the value 'failed', then the value of this object contains the reason as to why it failed. Otherwise, the value of this object is a zero-length string. ")
cfsPeersTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 433, 1, 1, 5), )
if mibBuilder.loadTexts: cfsPeersTable.setStatus('current')
if mibBuilder.loadTexts: cfsPeersTable.setDescription('This table provides list of devices in a stable fabric. This table is populated with the entries only when the CFS discovery cycle is successfully completed. ')
cfsPeersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 433, 1, 1, 5, 1), ).setIndexNames((0, "CISCO-CFS-MIB", "cfsPeerAddrType"), (0, "CISCO-CFS-MIB", "cfsPeerAddr"))
if mibBuilder.loadTexts: cfsPeersEntry.setStatus('current')
if mibBuilder.loadTexts: cfsPeersEntry.setDescription("A conceptual row in the 'cfsPeersTable'. Each row represents a device in a stable fabric supporting CFS capability. ")
cfsPeerAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 433, 1, 1, 5, 1, 1), InetAddressType())
if mibBuilder.loadTexts: cfsPeerAddrType.setStatus('current')
if mibBuilder.loadTexts: cfsPeerAddrType.setDescription('The type of the address of the CFS capable device in the fabric. ')
cfsPeerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 433, 1, 1, 5, 1, 2), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfsPeerAddr.setStatus('current')
if mibBuilder.loadTexts: cfsPeerAddr.setDescription('The address of a CFS capable device in the fabric. The type of address of an instance of this object is determined by the value of the corresponding instance of cfsPeerAddrType. ')
cfsFeaturePeersTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 433, 1, 1, 6), )
if mibBuilder.loadTexts: cfsFeaturePeersTable.setStatus('current')
if mibBuilder.loadTexts: cfsFeaturePeersTable.setDescription('This table provides list of devices in a stable fabric on per CFS capable feature basis. ')
cfsFeaturePeersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 433, 1, 1, 6, 1), ).setIndexNames((0, "CISCO-CFS-MIB", "cfsFeatureOpName"), (0, "CISCO-CFS-MIB", "cfsFeaturePeersScopeType"), (0, "CISCO-CFS-MIB", "cfsFeaturePeersScopeVal"), (0, "CISCO-CFS-MIB", "cfsFeaturePeersAddrType"), (0, "CISCO-CFS-MIB", "cfsFeaturePeersAddr"))
if mibBuilder.loadTexts: cfsFeaturePeersEntry.setStatus('current')
if mibBuilder.loadTexts: cfsFeaturePeersEntry.setDescription("A conceptual row in the 'cfsMergeMembersTable'. Each row represents a device in a stable fabric supporting CFS capable feature within the context of a scope in the system. ")
cfsFeaturePeersScopeType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 433, 1, 1, 6, 1, 1), CiscoCFSScopeType())
if mibBuilder.loadTexts: cfsFeaturePeersScopeType.setStatus('current')
if mibBuilder.loadTexts: cfsFeaturePeersScopeType.setDescription('This indicates the type of the cfsFeaturePeersScopeVal. ')
cfsFeaturePeersScopeVal = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 433, 1, 1, 6, 1, 2), CiscoCFSScopeValue().subtype(subtypeSpec=ValueSizeConstraint(0, 32)))
if mibBuilder.loadTexts: cfsFeaturePeersScopeVal.setStatus('current')
if mibBuilder.loadTexts: cfsFeaturePeersScopeVal.setDescription('The CFS scope value used with cfsFeaturePeersScopeType. This indicates the scope of the feature within which the device exists in the fabric. ')
cfsFeaturePeersAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 433, 1, 1, 6, 1, 3), InetAddressType())
if mibBuilder.loadTexts: cfsFeaturePeersAddrType.setStatus('current')
if mibBuilder.loadTexts: cfsFeaturePeersAddrType.setDescription('The type of the address of a peer device in the fabric for a CFS capable feature within the context of a scope. ')
cfsFeaturePeersAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 433, 1, 1, 6, 1, 4), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfsFeaturePeersAddr.setStatus('current')
if mibBuilder.loadTexts: cfsFeaturePeersAddr.setDescription('The address of a peer device in the fabric for a CFS capable feature within the context of a scope. The type of address of an instance of this object is determined by the value of the corresponding instance of cfsFeaturePeersAddrType. ')
cfsFeatureOpExtTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 433, 1, 1, 7), )
if mibBuilder.loadTexts: cfsFeatureOpExtTable.setStatus('current')
if mibBuilder.loadTexts: cfsFeatureOpExtTable.setDescription("This table lists all the CFS capable features in the local device and provides: - the information of the result of the last CFS action triggered on the CFS capable feature within the context of a scope - control flag to specify the source of 'configuration view', within the context of a scope of the CFS capable feature The last action corresponds to the action triggered on a CFS capable feature using the cfsFeatureOpAction of the cfsFeatureOpTable. ")
cfsFeatureOpExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 433, 1, 1, 7, 1), ).setIndexNames((0, "CISCO-CFS-MIB", "cfsFeatureOpName"), (0, "CISCO-CFS-MIB", "cfsFeatureOpExtScopeType"), (0, "CISCO-CFS-MIB", "cfsFeatureOpExtScopeVal"))
if mibBuilder.loadTexts: cfsFeatureOpExtEntry.setStatus('current')
if mibBuilder.loadTexts: cfsFeatureOpExtEntry.setDescription('A conceptual row in the cfsFeatureOpExtTable. Each row represents a CFS capable feature within the context of the combination of scope type and scope value in the system. The combination of cfsFeatureOpExtScopeType and cfsFeatureOpExtScopeVal forms a scope context within which a CFS operation was performed on CFS capable feature using the cfsFeatureOpScopeType and cfsFeatureOpScopeVal of cfsFeatureOpTable. ')
cfsFeatureOpExtScopeType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 433, 1, 1, 7, 1, 1), CiscoCFSScopeType())
if mibBuilder.loadTexts: cfsFeatureOpExtScopeType.setStatus('current')
if mibBuilder.loadTexts: cfsFeatureOpExtScopeType.setDescription('This indicates the type of the cfsFeatureOpExtScopeVal. ')
cfsFeatureOpExtScopeVal = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 433, 1, 1, 7, 1, 2), CiscoCFSScopeValue().subtype(subtypeSpec=ValueSizeConstraint(0, 32)))
if mibBuilder.loadTexts: cfsFeatureOpExtScopeVal.setStatus('current')
if mibBuilder.loadTexts: cfsFeatureOpExtScopeVal.setDescription('The CFS feature scope value to be used with cfsFeatureOpExtScopeType. ')
cfsFeatureOpExtLastAction = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 433, 1, 1, 7, 1, 3), CiscoCFSAction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfsFeatureOpExtLastAction.setStatus('current')
if mibBuilder.loadTexts: cfsFeatureOpExtLastAction.setDescription("The last action performed on this feature within the context of a scope. If no action has been triggered for the feature since the last reboot of the system, then retrieving the value of this object will return 'noop'. ")
cfsFeatureOpExtLastActionResult = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 433, 1, 1, 7, 1, 4), CiscoCFSFeatureActionResult()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfsFeatureOpExtLastActionResult.setStatus('current')
if mibBuilder.loadTexts: cfsFeatureOpExtLastActionResult.setDescription('The result of the execution of the last action (represented by the value of cfsFeatureOpExtLastAction) for the feature. ')
cfsFeatureOpExtLastFailureReason = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 433, 1, 1, 7, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfsFeatureOpExtLastFailureReason.setStatus('current')
if mibBuilder.loadTexts: cfsFeatureOpExtLastFailureReason.setDescription("The failure reason description for the failed execution of last action performed on this feature. If the corresponding instance of cfsFeatureOpExtLastActionResult has the value 'actionFailed', then this object contains the reason as to why it failed. Otherwise, the value of this object is a zero-length string. ")
cfsFeatureOpExtShowCfgOption = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 433, 1, 1, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("runningConfig", 1), ("pendingConfig", 2))).clone('runningConfig')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfsFeatureOpExtShowCfgOption.setStatus('current')
if mibBuilder.loadTexts: cfsFeatureOpExtShowCfgOption.setDescription("This object provides a means for management applications to either view the contents of 'Running Configuration' or 'Pending Configuration'. When the value of this object is 'runningConfig', all the subsequent configuration retrieval for this feature within the specified context of the scope will be from 'Running Configuration' on the local device. When the value of this object is 'pendingConfig', all the subsequent configuration retrieval for this feature within the specified context of the scope will be from 'Pending Configuration' on the local device. The value of this object is meaningful only when the value of the corresponding instance of 'cfsFeatureOpStatus' is 'enabled'. The agent is not required to retain the modified value of this object across the agent restart. ")
cfsFeatureOpExtLastActionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 433, 1, 1, 7, 1, 7), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfsFeatureOpExtLastActionTime.setStatus('current')
if mibBuilder.loadTexts: cfsFeatureOpExtLastActionTime.setDescription("Time stamp of the last action performed. If no action has been triggered for the feature (i.e cfsFeatureOpExtLastAction equal to one '1') since the last reboot of the system, the value zero will be returned. ")
cfsDistCtrl = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 433, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfsDistCtrl.setStatus('current')
if mibBuilder.loadTexts: cfsDistCtrl.setDescription("The object to control CFS for distribution. On setting the value of this object to 'enable', CFS will be ready for distribution of the data across the fabric. On setting the value of this object to 'disable', CFS will disable its capability to distribute the data across the fabric. The CFS continues to honour distribution requests from the CFS capable features of the local device, with the scope of the distribution limited only to the local device and not fabric wide. The value of the object when read, reflects the current operating state of the CFS. ")
cfsDistCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 433, 1, 4, 2), )
if mibBuilder.loadTexts: cfsDistCtrlTable.setStatus('current')
if mibBuilder.loadTexts: cfsDistCtrlTable.setDescription('The table to control CFS for distribution over IP. ')
cfsDistCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 433, 1, 4, 2, 1), ).setIndexNames((0, "CISCO-CFS-MIB", "cfsDistCtrlAddrType"))
if mibBuilder.loadTexts: cfsDistCtrlEntry.setStatus('current')
if mibBuilder.loadTexts: cfsDistCtrlEntry.setDescription('An entry (conceptual row) in the cfsDistCtrlTable. Each row represents a configuration set required to control CFS for distribution over IP on each of the address families. ')
cfsDistCtrlAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 433, 1, 4, 2, 1, 1), InetAddressType())
if mibBuilder.loadTexts: cfsDistCtrlAddrType.setStatus('current')
if mibBuilder.loadTexts: cfsDistCtrlAddrType.setDescription("The type of multicast address to which the CFS distribution is restricted. Only the entries corresponding to the 'ipv4' and 'ipv6' internet address types exist in this table. ")
cfsDistCtrlAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 433, 1, 4, 2, 1, 2), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfsDistCtrlAddr.setStatus('current')
if mibBuilder.loadTexts: cfsDistCtrlAddr.setDescription("The multicast address domain to which the CFS distribution is restricted. The type of this address is determined by the instance identifier value of the cfsDistCtrlAddrType. There is a default multicast address for both IPv4 and IPv6 through which the Keep-alive messages are sent and received to discover the CFS capable switches over IP. All switches with similar multicast address form one CFS-over-IP fabric. The default multicast address for IPv4 is 239.255.70.83 and range supported is [239.255.0.0 - 239.255.255.255] The default multicast address for IPv6 is ff13::7743:4653 and the supported range is [ff13::0000:0000 - ff13::ffff:ffff] The value of this object can only be modified when the value of the corresponding instance of cfsDistCtrlAction is 'disable'. ")
cfsDistCtrlAction = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 433, 1, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfsDistCtrlAction.setStatus('current')
if mibBuilder.loadTexts: cfsDistCtrlAction.setDescription("This object specifies the current operating mode employed in CFS for distribution over the corresponding type of Internet address. By setting the value of this object to 'enable', CFS will enable its capability to distribute the application data across the fabric over the corresponding type of Internet address. By setting the value of this object to 'disable', CFS will disable its capability to distribute the data across the fabric over the corresponding type of Internet address. Only one instance of this object can have the value of 'enable' among all the conceptual rows. ")
cfsMergeFailFeatureName = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 433, 1, 2, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cfsMergeFailFeatureName.setStatus('current')
if mibBuilder.loadTexts: cfsMergeFailFeatureName.setDescription("A human readable string value uniquely identifying the name of this feature for which the 'Merge Failure' occurred. ")
cfsMergeFailScopeType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 433, 1, 2, 2), CiscoCFSScopeType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cfsMergeFailScopeType.setStatus('current')
if mibBuilder.loadTexts: cfsMergeFailScopeType.setDescription("The value of this object indicates the type of the value of 'cfsMergeFailScopeVal'. ")
cfsMergeFailScopeVal = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 433, 1, 2, 3), CiscoCFSScopeValue().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cfsMergeFailScopeVal.setStatus('current')
if mibBuilder.loadTexts: cfsMergeFailScopeVal.setDescription("The value of this object indicates the scope of the feature ('cfsMergeFailFeatureName') within which the 'Merge Failure' occurred. ")
cfsMergeFailReasonDescription = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 433, 1, 2, 4), SnmpAdminString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cfsMergeFailReasonDescription.setStatus('current')
if mibBuilder.loadTexts: cfsMergeFailReasonDescription.setDescription("The failure reason description for the 'Merge Failure'")
ciscoCFSFeatureActionNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 433, 0, 1)).setObjects(("CISCO-CFS-MIB", "cfsFeatureOpLastAction"), ("CISCO-CFS-MIB", "cfsFeatureOpLastScopeType"), ("CISCO-CFS-MIB", "cfsFeatureOpLastScopeVal"), ("CISCO-CFS-MIB", "cfsFeatureOpLastActionResult"))
if mibBuilder.loadTexts: ciscoCFSFeatureActionNotif.setStatus('current')
if mibBuilder.loadTexts: ciscoCFSFeatureActionNotif.setDescription("Notification to covey the information of the action performed on a CFS capable feature. This notification gets generated when : - a CFS operation action is triggered on CFS capable feature - the result of last action performed on the CFS capable feature changes. The 'cfsFeatureOpLastActionResult' indicates the new value of the last action result performed on the feature. ")
ciscoCFSMergeFailNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 433, 0, 2)).setObjects(("CISCO-CFS-MIB", "cfsMergeFailFeatureName"), ("CISCO-CFS-MIB", "cfsMergeFailScopeType"), ("CISCO-CFS-MIB", "cfsMergeFailScopeVal"), ("CISCO-CFS-MIB", "cfsMergeFailReasonDescription"))
if mibBuilder.loadTexts: ciscoCFSMergeFailNotif.setStatus('current')
if mibBuilder.loadTexts: ciscoCFSMergeFailNotif.setDescription("Notification to convey the information of the 'Merge Failure' occurred in the fabric. This notification gets generated when the merge of the two fabrics fail for a CFS capable feature. ")
ciscoCFSDiscoveryCompleteNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 433, 0, 3)).setObjects(("CISCO-CFS-MIB", "cfsPeersDiscoveryResult"), ("CISCO-CFS-MIB", "cfsPeersDiscoveryFailureReason"))
if mibBuilder.loadTexts: ciscoCFSDiscoveryCompleteNotif.setStatus('current')
if mibBuilder.loadTexts: ciscoCFSDiscoveryCompleteNotif.setDescription("Notification to indicate that the CFS has completed discovering the CFS capable devices in the fabric. If the value of cfsPeersDiscoveryResult is 'successful', then the cfsPeersTable is appropriately populated. ")
ciscoCFSMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 433, 2, 1))
ciscoCFSMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 433, 2, 2))
ciscoCFSMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 433, 2, 1, 1)).setObjects(("CISCO-CFS-MIB", "cfsFeatureOpGroup"), ("CISCO-CFS-MIB", "cfsPendingConfOwnerGroup"), ("CISCO-CFS-MIB", "cfsFeatureActionNotifGroup"), ("CISCO-CFS-MIB", "cfsFeatureNotifObjectsGroup"), ("CISCO-CFS-MIB", "cfsMergeFailNotifGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCFSMIBCompliance = ciscoCFSMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoCFSMIBCompliance.setDescription('The compliance statement for entities which implement the CISCO-CFS-MIB. ')
ciscoCFSMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 433, 2, 1, 2)).setObjects(("CISCO-CFS-MIB", "cfsFeatureOpGroupRev1"), ("CISCO-CFS-MIB", "cfsPendingConfOwnerGroup"), ("CISCO-CFS-MIB", "cfsFeatureActionNotifGroup"), ("CISCO-CFS-MIB", "cfsMembersGroup"), ("CISCO-CFS-MIB", "cfsPeerDiscoveryNotifGroup"), ("CISCO-CFS-MIB", "cfsFeatureOpExtGroup"), ("CISCO-CFS-MIB", "cfsFeatureNotifObjectsGroup"), ("CISCO-CFS-MIB", "cfsMergeFailNotifGroup"), ("CISCO-CFS-MIB", "cfsDistCtrlGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCFSMIBComplianceRev1 = ciscoCFSMIBComplianceRev1.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoCFSMIBComplianceRev1.setDescription('The compliance statement for entities which implement the CISCO-CFS-MIB. ')
ciscoCFSMIBComplianceRev2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 433, 2, 1, 3)).setObjects(("CISCO-CFS-MIB", "cfsFeatureOpGroupRev2"), ("CISCO-CFS-MIB", "cfsPendingConfOwnerGroup"), ("CISCO-CFS-MIB", "cfsFeatureActionNotifGroup"), ("CISCO-CFS-MIB", "cfsMembersGroup"), ("CISCO-CFS-MIB", "cfsPeerDiscoveryNotifGroup"), ("CISCO-CFS-MIB", "cfsFeatureOpExtGroup"), ("CISCO-CFS-MIB", "cfsFeatureNotifObjectsGroup"), ("CISCO-CFS-MIB", "cfsMergeFailNotifGroup"), ("CISCO-CFS-MIB", "cfsDistCtrlGroup"), ("CISCO-CFS-MIB", "cfsDistCtrlInetGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCFSMIBComplianceRev2 = ciscoCFSMIBComplianceRev2.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoCFSMIBComplianceRev2.setDescription('The compliance statement for entities which implement the CISCO-CFS-MIB. ')
ciscoCFSMIBComplianceRev3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 433, 2, 1, 4)).setObjects(("CISCO-CFS-MIB", "cfsFeatureOpGroupRev2"), ("CISCO-CFS-MIB", "cfsPendingConfOwnerGroup"), ("CISCO-CFS-MIB", "cfsFeatureActionNotifGroup"), ("CISCO-CFS-MIB", "cfsMembersGroup"), ("CISCO-CFS-MIB", "cfsPeerDiscoveryNotifGroup"), ("CISCO-CFS-MIB", "cfsFeatureOpExtGroupRev1"), ("CISCO-CFS-MIB", "cfsFeatureNotifObjectsGroup"), ("CISCO-CFS-MIB", "cfsMergeFailNotifGroup"), ("CISCO-CFS-MIB", "cfsDistCtrlGroup"), ("CISCO-CFS-MIB", "cfsDistCtrlInetGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCFSMIBComplianceRev3 = ciscoCFSMIBComplianceRev3.setStatus('current')
if mibBuilder.loadTexts: ciscoCFSMIBComplianceRev3.setDescription('The compliance statement for entities which implement the CISCO-CFS-MIB. ')
cfsFeatureOpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 433, 2, 2, 1)).setObjects(("CISCO-CFS-MIB", "cfsFeatureOpAction"), ("CISCO-CFS-MIB", "cfsFeatureOpScopeType"), ("CISCO-CFS-MIB", "cfsFeatureOpScopeVal"), ("CISCO-CFS-MIB", "cfsFeatureOpLastAction"), ("CISCO-CFS-MIB", "cfsFeatureOpLastScopeType"), ("CISCO-CFS-MIB", "cfsFeatureOpLastScopeVal"), ("CISCO-CFS-MIB", "cfsFeatureOpLastActionResult"), ("CISCO-CFS-MIB", "cfsFeatureOpLastFailureReason"), ("CISCO-CFS-MIB", "cfsFeatureOpShowCfgOption"), ("CISCO-CFS-MIB", "cfsFeatureOpStatus"), ("CISCO-CFS-MIB", "cfsMergeStatusValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cfsFeatureOpGroup = cfsFeatureOpGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cfsFeatureOpGroup.setDescription('A collection of objects for configurations of the CFS capable features. ')
cfsPendingConfOwnerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 433, 2, 2, 2)).setObjects(("CISCO-CFS-MIB", "cfsPendingConfOwnerAddrType"), ("CISCO-CFS-MIB", "cfsPendingConfOwnerAddr"), ("CISCO-CFS-MIB", "cfsPendingConfOwnerIDType"), ("CISCO-CFS-MIB", "cfsPendingConfOwnerID"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cfsPendingConfOwnerGroup = cfsPendingConfOwnerGroup.setStatus('current')
if mibBuilder.loadTexts: cfsPendingConfOwnerGroup.setDescription("A collection of objects for the 'Pending Configuration' owner details of the CFS capable features. ")
cfsFeatureNotifObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 433, 2, 2, 3)).setObjects(("CISCO-CFS-MIB", "cfsMergeFailFeatureName"), ("CISCO-CFS-MIB", "cfsMergeFailScopeType"), ("CISCO-CFS-MIB", "cfsMergeFailScopeVal"), ("CISCO-CFS-MIB", "cfsMergeFailReasonDescription"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cfsFeatureNotifObjectsGroup = cfsFeatureNotifObjectsGroup.setStatus('current')
if mibBuilder.loadTexts: cfsFeatureNotifObjectsGroup.setDescription('A collection of objects required for CFS notifications.')
cfsFeatureActionNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 433, 2, 2, 4)).setObjects(("CISCO-CFS-MIB", "ciscoCFSFeatureActionNotif"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cfsFeatureActionNotifGroup = cfsFeatureActionNotifGroup.setStatus('current')
if mibBuilder.loadTexts: cfsFeatureActionNotifGroup.setDescription('A collection of notifications for the CFS actions on the CFS capable features. ')
cfsMergeFailNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 433, 2, 2, 5)).setObjects(("CISCO-CFS-MIB", "ciscoCFSMergeFailNotif"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cfsMergeFailNotifGroup = cfsMergeFailNotifGroup.setStatus('current')
if mibBuilder.loadTexts: cfsMergeFailNotifGroup.setDescription('A collection of notifications for CFS fabric merge failures. ')
cfsMembersGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 433, 2, 2, 6)).setObjects(("CISCO-CFS-MIB", "cfsMergeMemberFabricType"), ("CISCO-CFS-MIB", "cfsMergeMemberRole"), ("CISCO-CFS-MIB", "cfsStartPeersDiscovery"), ("CISCO-CFS-MIB", "cfsPeersDiscoveryResult"), ("CISCO-CFS-MIB", "cfsPeersDiscoveryFailureReason"), ("CISCO-CFS-MIB", "cfsPeerAddr"), ("CISCO-CFS-MIB", "cfsFeaturePeersAddr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cfsMembersGroup = cfsMembersGroup.setStatus('current')
if mibBuilder.loadTexts: cfsMembersGroup.setDescription('A collection of objects for discovering list of devices in the fabric. ')
cfsFeatureOpExtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 433, 2, 2, 7)).setObjects(("CISCO-CFS-MIB", "cfsFeatureOpExtLastAction"), ("CISCO-CFS-MIB", "cfsFeatureOpExtLastActionResult"), ("CISCO-CFS-MIB", "cfsFeatureOpExtLastFailureReason"), ("CISCO-CFS-MIB", "cfsFeatureOpExtShowCfgOption"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cfsFeatureOpExtGroup = cfsFeatureOpExtGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cfsFeatureOpExtGroup.setDescription('A collection of objects for CFS action results. ')
cfsPeerDiscoveryNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 433, 2, 2, 8)).setObjects(("CISCO-CFS-MIB", "ciscoCFSDiscoveryCompleteNotif"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cfsPeerDiscoveryNotifGroup = cfsPeerDiscoveryNotifGroup.setStatus('current')
if mibBuilder.loadTexts: cfsPeerDiscoveryNotifGroup.setDescription('A collection of notifications for CFS peer discovery. ')
cfsFeatureOpGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 433, 2, 2, 9)).setObjects(("CISCO-CFS-MIB", "cfsFeatureOpAction"), ("CISCO-CFS-MIB", "cfsFeatureOpScopeType"), ("CISCO-CFS-MIB", "cfsFeatureOpScopeVal"), ("CISCO-CFS-MIB", "cfsFeatureOpLastAction"), ("CISCO-CFS-MIB", "cfsFeatureOpLastScopeType"), ("CISCO-CFS-MIB", "cfsFeatureOpLastScopeVal"), ("CISCO-CFS-MIB", "cfsFeatureOpLastActionResult"), ("CISCO-CFS-MIB", "cfsFeatureOpLastFailureReason"), ("CISCO-CFS-MIB", "cfsFeatureOpStatus"), ("CISCO-CFS-MIB", "cfsMergeStatusValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cfsFeatureOpGroupRev1 = cfsFeatureOpGroupRev1.setStatus('deprecated')
if mibBuilder.loadTexts: cfsFeatureOpGroupRev1.setDescription('A collection of objects for configurations of the CFS capable features. ')
cfsDistCtrlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 433, 2, 2, 10)).setObjects(("CISCO-CFS-MIB", "cfsDistCtrl"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cfsDistCtrlGroup = cfsDistCtrlGroup.setStatus('current')
if mibBuilder.loadTexts: cfsDistCtrlGroup.setDescription('A collection of objects for controlling the distribution capabilities of CFS. ')
cfsDistCtrlInetGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 433, 2, 2, 11)).setObjects(("CISCO-CFS-MIB", "cfsDistCtrlAddr"), ("CISCO-CFS-MIB", "cfsDistCtrlAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cfsDistCtrlInetGroup = cfsDistCtrlInetGroup.setStatus('current')
if mibBuilder.loadTexts: cfsDistCtrlInetGroup.setDescription('A collection of objects for controlling the per Internet address type distribution capabilities of CFS. ')
cfsFeatureOpGroupRev2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 433, 2, 2, 12)).setObjects(("CISCO-CFS-MIB", "cfsFeatureOpAction"), ("CISCO-CFS-MIB", "cfsFeatureOpScopeType"), ("CISCO-CFS-MIB", "cfsFeatureOpScopeVal"), ("CISCO-CFS-MIB", "cfsFeatureOpLastAction"), ("CISCO-CFS-MIB", "cfsFeatureOpLastScopeType"), ("CISCO-CFS-MIB", "cfsFeatureOpLastScopeVal"), ("CISCO-CFS-MIB", "cfsFeatureOpLastActionResult"), ("CISCO-CFS-MIB", "cfsFeatureOpLastFailureReason"), ("CISCO-CFS-MIB", "cfsFeatureOpStatus"), ("CISCO-CFS-MIB", "cfsMergeStatusValue"), ("CISCO-CFS-MIB", "cfsFeatureOpAttribs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cfsFeatureOpGroupRev2 = cfsFeatureOpGroupRev2.setStatus('current')
if mibBuilder.loadTexts: cfsFeatureOpGroupRev2.setDescription('A collection of objects for configurations of the CFS capable features. ')
cfsFeatureOpExtGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 433, 2, 2, 13)).setObjects(("CISCO-CFS-MIB", "cfsFeatureOpExtLastAction"), ("CISCO-CFS-MIB", "cfsFeatureOpExtLastActionTime"), ("CISCO-CFS-MIB", "cfsFeatureOpExtLastActionResult"), ("CISCO-CFS-MIB", "cfsFeatureOpExtLastFailureReason"), ("CISCO-CFS-MIB", "cfsFeatureOpExtShowCfgOption"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cfsFeatureOpExtGroupRev1 = cfsFeatureOpExtGroupRev1.setStatus('current')
if mibBuilder.loadTexts: cfsFeatureOpExtGroupRev1.setDescription('A collection of objects for CFS action results. ')
mibBuilder.exportSymbols("CISCO-CFS-MIB", cfsPendingConfOwnerAddr=cfsPendingConfOwnerAddr, cfsDiscoveryObjects=cfsDiscoveryObjects, ciscoCFSMergeFailNotif=ciscoCFSMergeFailNotif, cfsFeatureOpLastAction=cfsFeatureOpLastAction, cfsPeerDiscoveryNotifGroup=cfsPeerDiscoveryNotifGroup, cfsFeatureOpExtLastFailureReason=cfsFeatureOpExtLastFailureReason, cfsDistCtrlAction=cfsDistCtrlAction, cfsPendingConfOwnerAddrType=cfsPendingConfOwnerAddrType, cfsMergeStatusScopeType=cfsMergeStatusScopeType, ciscoCFSMIBCompliance=ciscoCFSMIBCompliance, cfsDistCtrlGroup=cfsDistCtrlGroup, ciscoCFSMIBComplianceRev3=ciscoCFSMIBComplianceRev3, cfsMergeFailNotifGroup=cfsMergeFailNotifGroup, cfsPendingConfOwnerID=cfsPendingConfOwnerID, cfsMergeStatusScopeVal=cfsMergeStatusScopeVal, cfsMergeMemberFabricType=cfsMergeMemberFabricType, cfsDistCtrlInetGroup=cfsDistCtrlInetGroup, cfsFeature=cfsFeature, cfsFeatureOpExtShowCfgOption=cfsFeatureOpExtShowCfgOption, cfsPendingConfOwnerEntry=cfsPendingConfOwnerEntry, cfsMergeFailScopeType=cfsMergeFailScopeType, cfsFeatureOpGroup=cfsFeatureOpGroup, cfsFeaturePeersAddr=cfsFeaturePeersAddr, cfsFeatureOpGroupRev2=cfsFeatureOpGroupRev2, cfsDistCtrl=cfsDistCtrl, cfsFeatureOpLastFailureReason=cfsFeatureOpLastFailureReason, cfsPeersDiscoveryFailureReason=cfsPeersDiscoveryFailureReason, PYSNMP_MODULE_ID=ciscoCFSMIB, ciscoCFSMIBGroups=ciscoCFSMIBGroups, cfsFeatureOpScopeType=cfsFeatureOpScopeType, cfsPendingConfOwnerTable=cfsPendingConfOwnerTable, CiscoCFSFeatureActionResult=CiscoCFSFeatureActionResult, CiscoCFSAction=CiscoCFSAction, cfsFeatureOpExtGroup=cfsFeatureOpExtGroup, cfsFeatureOpAttribs=cfsFeatureOpAttribs, cfsFeatureOpExtEntry=cfsFeatureOpExtEntry, cfsFeatureOpExtLastAction=cfsFeatureOpExtLastAction, CiscoCFSScopeValue=CiscoCFSScopeValue, cfsFeatureOpLastScopeVal=cfsFeatureOpLastScopeVal, cfsFeatureOpLastScopeType=cfsFeatureOpLastScopeType, cfsMergeMembersTable=cfsMergeMembersTable, CiscoCFSScopeType=CiscoCFSScopeType, cfsNotifObjects=cfsNotifObjects, cfsMergeMemberAddrType=cfsMergeMemberAddrType, ciscoCFSMIBConformance=ciscoCFSMIBConformance, cfsPeerAddr=cfsPeerAddr, cfsFeaturePeersAddrType=cfsFeaturePeersAddrType, cfsPendingConfOwnerGroup=cfsPendingConfOwnerGroup, cfsFeatureOpExtTable=cfsFeatureOpExtTable, cfsPendingConfOwnerScopeType=cfsPendingConfOwnerScopeType, ciscoCFSDiscoveryCompleteNotif=ciscoCFSDiscoveryCompleteNotif, cfsPendingConfOwnerScopeVal=cfsPendingConfOwnerScopeVal, cfsDistCtrlTable=cfsDistCtrlTable, cfsFeatureOpTable=cfsFeatureOpTable, cfsPendingConfOwnerIDType=cfsPendingConfOwnerIDType, cfsFeaturePeersScopeType=cfsFeaturePeersScopeType, cfsStartPeersDiscovery=cfsStartPeersDiscovery, cfsFeatureOpScopeVal=cfsFeatureOpScopeVal, ciscoCFSMIBCompliances=ciscoCFSMIBCompliances, cfsDistCtrlEntry=cfsDistCtrlEntry, cfsMergeStatusEntry=cfsMergeStatusEntry, ciscoCFSMIB=ciscoCFSMIB, cfsFeatureOpExtScopeVal=cfsFeatureOpExtScopeVal, cfsDistCtrlObjects=cfsDistCtrlObjects, cfsDistCtrlAddrType=cfsDistCtrlAddrType, ciscoCFSMIBComplianceRev2=ciscoCFSMIBComplianceRev2, cfsFeatureOpName=cfsFeatureOpName, cfsMergeStatusTable=cfsMergeStatusTable, cfsMergeMembersEntry=cfsMergeMembersEntry, cfsPeersEntry=cfsPeersEntry, cfsMergeMemberRole=cfsMergeMemberRole, cfsFeatureOpExtLastActionTime=cfsFeatureOpExtLastActionTime, cfsMergeFailFeatureName=cfsMergeFailFeatureName, cfsPeersDiscoveryResult=cfsPeersDiscoveryResult, cfsMergeFailReasonDescription=cfsMergeFailReasonDescription, cfsPeerAddrType=cfsPeerAddrType, CiscoCFSFeatureStatus=CiscoCFSFeatureStatus, cfsFeatureOpStatus=cfsFeatureOpStatus, cfsFeatureOpExtScopeType=cfsFeatureOpExtScopeType, cfsFeatureOpExtLastActionResult=cfsFeatureOpExtLastActionResult, cfsFeatureActionNotifGroup=cfsFeatureActionNotifGroup, cfsFeatureOpShowCfgOption=cfsFeatureOpShowCfgOption, cfsFeatureOpGroupRev1=cfsFeatureOpGroupRev1, cfsFeaturePeersScopeVal=cfsFeaturePeersScopeVal, cfsFeaturePeersEntry=cfsFeaturePeersEntry, ciscoCFSFeatureActionNotif=ciscoCFSFeatureActionNotif, cfsFeaturePeersTable=cfsFeaturePeersTable, cfsFeatureOpEntry=cfsFeatureOpEntry, cfsFeatureNotifObjectsGroup=cfsFeatureNotifObjectsGroup, ciscoCFSMIBComplianceRev1=ciscoCFSMIBComplianceRev1, cfsFeatureOpAction=cfsFeatureOpAction, ciscoCFSMIBNotifs=ciscoCFSMIBNotifs, cfsFeatureOpExtGroupRev1=cfsFeatureOpExtGroupRev1, cfsMergeMemberAddr=cfsMergeMemberAddr, cfsPeersTable=cfsPeersTable, ciscoCFSMIBObjects=ciscoCFSMIBObjects, cfsMembersGroup=cfsMembersGroup, cfsFeatureOpLastActionResult=cfsFeatureOpLastActionResult, cfsMergeFailScopeVal=cfsMergeFailScopeVal, cfsMergeStatusValue=cfsMergeStatusValue, cfsDistCtrlAddr=cfsDistCtrlAddr)
