#
# PySNMP MIB module APTIS-MONITOR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/APTIS-MONITOR-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:24:36 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Boolean, aptis_monitoring = mibBuilder.importSymbols("APTIS-MIB", "Boolean", "aptis-monitoring")
aptis_modules, = mibBuilder.importSymbols("APTIS-REG-MIB", "aptis-modules")
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
IpAddress, Counter32, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Counter64, ModuleIdentity, NotificationType, MibIdentifier, Bits, iso, Gauge32, ObjectIdentity, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Counter32", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Counter64", "ModuleIdentity", "NotificationType", "MibIdentifier", "Bits", "iso", "Gauge32", "ObjectIdentity", "Unsigned32")
RowStatus, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "DisplayString")
aptisMonitorModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 2637, 1, 1, 4))
if mibBuilder.loadTexts: aptisMonitorModule.setLastUpdated('0004140000Z')
if mibBuilder.loadTexts: aptisMonitorModule.setOrganization('Nortel Networks')
if mibBuilder.loadTexts: aptisMonitorModule.setContactInfo(' Technical Support/Customer Service Nortel Networks Postal: 11 Elizabeth Drive Chelmsford, MA 01824 Tel: In the USA: Dial 1-800-758-4827 to contact a Technical Support engineer. Outside the USA: Contact your Regional Nortel Networks Support Prime. For information about the Nortel Networks Network Access Division, go to the World Wide Web (WWW) site at http://www.nortelnetworks.com.')
if mibBuilder.loadTexts: aptisMonitorModule.setDescription('The following tables describe the variables that allow monitoring of an Aptis box.')
clockStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2901), )
if mibBuilder.loadTexts: clockStatusTable.setStatus('current')
if mibBuilder.loadTexts: clockStatusTable.setDescription('Clock Status.')
clockStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2901, 1), ).setIndexNames((0, "APTIS-MONITOR-MIB", "clockStatusCurrentSource"))
if mibBuilder.loadTexts: clockStatusEntry.setStatus('current')
if mibBuilder.loadTexts: clockStatusEntry.setDescription('This is the structure of entries in the clockStatusTable.')
clockStatusCurrentSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2901, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("internal", 0), ("primary", 1), ("secondary", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clockStatusCurrentSource.setStatus('current')
if mibBuilder.loadTexts: clockStatusCurrentSource.setDescription('Current Clock Source.')
ds0StatsTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2112), )
if mibBuilder.loadTexts: ds0StatsTable.setStatus('current')
if mibBuilder.loadTexts: ds0StatsTable.setDescription('DS0 Stats.')
ds0StatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2112, 1), ).setIndexNames((0, "APTIS-MONITOR-MIB", "ds0StatsSlotIndex"), (0, "APTIS-MONITOR-MIB", "ds0StatsLineNumber"), (0, "APTIS-MONITOR-MIB", "ds0StatsDs0Index"))
if mibBuilder.loadTexts: ds0StatsEntry.setStatus('current')
if mibBuilder.loadTexts: ds0StatsEntry.setDescription('This is the structure of entries in the ds0StatsTable.')
ds0StatsInCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2112, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds0StatsInCalls.setStatus('current')
if mibBuilder.loadTexts: ds0StatsInCalls.setDescription('Number of attempted incoming calls.')
ds0StatsInConnected = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2112, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds0StatsInConnected.setStatus('current')
if mibBuilder.loadTexts: ds0StatsInConnected.setDescription('Number of connected incoming calls.')
ds0StatsOutCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2112, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds0StatsOutCalls.setStatus('current')
if mibBuilder.loadTexts: ds0StatsOutCalls.setDescription('Number of attempted outgoing calls.')
ds0StatsOutConnected = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2112, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds0StatsOutConnected.setStatus('current')
if mibBuilder.loadTexts: ds0StatsOutConnected.setDescription('Number of connected outgoing calls.')
ds0StatsInCleared = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2112, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds0StatsInCleared.setStatus('current')
if mibBuilder.loadTexts: ds0StatsInCleared.setDescription('Number of calls disconnected from CVX Access Switch. It is possible that the number of calls cleared may total higher than the number of calls attempted. This can occur if the user and the switch disconnect simultaneously.')
ds0StatsOutCleared = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2112, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds0StatsOutCleared.setStatus('current')
if mibBuilder.loadTexts: ds0StatsOutCleared.setDescription('Number of calls disconnected remotely.')
ds0StatsSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2112, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds0StatsSlotIndex.setStatus('current')
if mibBuilder.loadTexts: ds0StatsSlotIndex.setDescription('The physical slot number associated with this line.')
ds0StatsLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2112, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 56))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds0StatsLineNumber.setStatus('current')
if mibBuilder.loadTexts: ds0StatsLineNumber.setDescription('The line number of the line to which the stats apply.')
ds0StatsDs0Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2112, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds0StatsDs0Index.setStatus('current')
if mibBuilder.loadTexts: ds0StatsDs0Index.setDescription('The DS0 time slot for which the stats apply.')
e1StatsTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2502), )
if mibBuilder.loadTexts: e1StatsTable.setStatus('current')
if mibBuilder.loadTexts: e1StatsTable.setDescription('E1 stats.')
e1StatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2502, 1), ).setIndexNames((0, "APTIS-MONITOR-MIB", "e1StatsSlotIndex"), (0, "APTIS-MONITOR-MIB", "e1StatsLineNumber"))
if mibBuilder.loadTexts: e1StatsEntry.setStatus('current')
if mibBuilder.loadTexts: e1StatsEntry.setDescription('This is the structure of entries in the e1StatsTable.')
e1StatsAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2502, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("f1", 0), ("f2", 1), ("f3", 2), ("f4", 3), ("f5", 4), ("f6", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1StatsAlarmStatus.setStatus('current')
if mibBuilder.loadTexts: e1StatsAlarmStatus.setDescription('E1 layer 1 state.')
e1StatsSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2502, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1StatsSlotIndex.setStatus('current')
if mibBuilder.loadTexts: e1StatsSlotIndex.setDescription('The physical slot number associated with this line.')
e1StatsLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2502, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1StatsLineNumber.setStatus('current')
if mibBuilder.loadTexts: e1StatsLineNumber.setDescription('The line number of the line to which the status applies.')
e1CountsTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2503), )
if mibBuilder.loadTexts: e1CountsTable.setStatus('current')
if mibBuilder.loadTexts: e1CountsTable.setDescription('E1_counts.')
e1CountsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2503, 1), ).setIndexNames((0, "APTIS-MONITOR-MIB", "e1CountsSlotIndex"), (0, "APTIS-MONITOR-MIB", "e1CountsLineNumber"))
if mibBuilder.loadTexts: e1CountsEntry.setStatus('current')
if mibBuilder.loadTexts: e1CountsEntry.setDescription('This is the structure of entries in the e1CountsTable.')
e1CountsChannelCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2503, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1CountsChannelCount.setStatus('current')
if mibBuilder.loadTexts: e1CountsChannelCount.setDescription('DS0s (B-channels) on this interface.')
e1CountsChannelsInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2503, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1CountsChannelsInUse.setStatus('current')
if mibBuilder.loadTexts: e1CountsChannelsInUse.setDescription('DS0s (B-channels) in use.')
e1CountsIncomingCallAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2503, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1CountsIncomingCallAttempts.setStatus('current')
if mibBuilder.loadTexts: e1CountsIncomingCallAttempts.setDescription('Incoming call attempts on this E1.')
e1CountsIncomingConnects = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2503, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1CountsIncomingConnects.setStatus('current')
if mibBuilder.loadTexts: e1CountsIncomingConnects.setDescription('Incoming connect messages.')
e1CountsIncomingDisconnects = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2503, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1CountsIncomingDisconnects.setStatus('current')
if mibBuilder.loadTexts: e1CountsIncomingDisconnects.setDescription('Incoming disconnect messages.')
e1CountsOutgoingCallAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2503, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1CountsOutgoingCallAttempts.setStatus('current')
if mibBuilder.loadTexts: e1CountsOutgoingCallAttempts.setDescription('Outgoing call attempts on this E1.')
e1CountsOutgoingConnects = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2503, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1CountsOutgoingConnects.setStatus('current')
if mibBuilder.loadTexts: e1CountsOutgoingConnects.setDescription('Outgoing connect messages.')
e1CountsOutgoingDisconnects = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2503, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1CountsOutgoingDisconnects.setStatus('current')
if mibBuilder.loadTexts: e1CountsOutgoingDisconnects.setDescription('Outgoing disconnect messages.')
e1CountsSessionAbortMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2503, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1CountsSessionAbortMessages.setStatus('current')
if mibBuilder.loadTexts: e1CountsSessionAbortMessages.setDescription('Abort messages from the session manager.')
e1CountsSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2503, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1CountsSlotIndex.setStatus('current')
if mibBuilder.loadTexts: e1CountsSlotIndex.setDescription('The physical slot number associated with this line.')
e1CountsLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2503, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1CountsLineNumber.setStatus('current')
if mibBuilder.loadTexts: e1CountsLineNumber.setDescription('The line number of the line to which the status applies.')
e1SummaryStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2504), )
if mibBuilder.loadTexts: e1SummaryStatsTable.setStatus('current')
if mibBuilder.loadTexts: e1SummaryStatsTable.setDescription('E1 Summary Stats.')
e1SummaryStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2504, 1), ).setIndexNames((0, "APTIS-MONITOR-MIB", "e1SummaryStatsSlotIndex"), (0, "APTIS-MONITOR-MIB", "e1SummaryStatsLineNumber"))
if mibBuilder.loadTexts: e1SummaryStatsEntry.setStatus('current')
if mibBuilder.loadTexts: e1SummaryStatsEntry.setDescription('This is the structure of entries in the e1SummaryStatsTable.')
e1SummaryStatsRingingChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2504, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1SummaryStatsRingingChannels.setStatus('current')
if mibBuilder.loadTexts: e1SummaryStatsRingingChannels.setDescription('Bit mask of b-channels that have calls coming up, with b-channel 1 at 0x02, 2 at 0x04, etc.')
e1SummaryStatsConnectedChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2504, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1SummaryStatsConnectedChannels.setStatus('current')
if mibBuilder.loadTexts: e1SummaryStatsConnectedChannels.setDescription('Bit mask of b-channels that have calls connected, with b-channel 1 at 0x02, 2 at 0x04, etc.')
e1SummaryStatsClearingChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2504, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1SummaryStatsClearingChannels.setStatus('current')
if mibBuilder.loadTexts: e1SummaryStatsClearingChannels.setDescription('Bit mask of b-channels that have calls going down, with b-channel 1 at 0x02, 2 at 0x04, etc.')
e1SummaryStatsSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2504, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1SummaryStatsSlotIndex.setStatus('current')
if mibBuilder.loadTexts: e1SummaryStatsSlotIndex.setDescription('The physical slot number associated with this line.')
e1SummaryStatsLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2504, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1SummaryStatsLineNumber.setStatus('current')
if mibBuilder.loadTexts: e1SummaryStatsLineNumber.setDescription('The line number of the line to which the status applies.')
e1SummaryStatsFunctionalChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2504, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1SummaryStatsFunctionalChannels.setStatus('current')
if mibBuilder.loadTexts: e1SummaryStatsFunctionalChannels.setDescription('Bit mask of b-channels that are in the functional state.')
e1SummaryStatsIdleChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2504, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1SummaryStatsIdleChannels.setStatus('current')
if mibBuilder.loadTexts: e1SummaryStatsIdleChannels.setDescription('Bit mask of b-channels that are in the idle state.')
cHdlcStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1211), )
if mibBuilder.loadTexts: cHdlcStatsTable.setStatus('current')
if mibBuilder.loadTexts: cHdlcStatsTable.setDescription('Cisco High Level Data Link Control Status Information.')
cHdlcStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1211, 1), ).setIndexNames((0, "APTIS-MONITOR-MIB", "cHdlcStatsNohdrspaceOut"))
if mibBuilder.loadTexts: cHdlcStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cHdlcStatsEntry.setDescription('This is the structure of entries in the cHdlcStatsTable.')
cHdlcStatsNohdrspaceOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1211, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cHdlcStatsNohdrspaceOut.setStatus('current')
if mibBuilder.loadTexts: cHdlcStatsNohdrspaceOut.setDescription('Packet dropped due to lack of header space.')
cHdlcStatsNomemoryOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1211, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cHdlcStatsNomemoryOut.setStatus('current')
if mibBuilder.loadTexts: cHdlcStatsNomemoryOut.setDescription('Packet dropped due to lack of memory.')
cHdlcStatsCiscoFramesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1211, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cHdlcStatsCiscoFramesOut.setStatus('current')
if mibBuilder.loadTexts: cHdlcStatsCiscoFramesOut.setDescription('Count of frames output.')
cHdlcStatsKeepalivesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1211, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cHdlcStatsKeepalivesIn.setStatus('current')
if mibBuilder.loadTexts: cHdlcStatsKeepalivesIn.setDescription('Count of keep-alives received.')
cHdlcStatsUnknownProtocolIn = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1211, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cHdlcStatsUnknownProtocolIn.setStatus('current')
if mibBuilder.loadTexts: cHdlcStatsUnknownProtocolIn.setDescription('Count of unknown protocols received.')
cHdlcStatsShortFramesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1211, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cHdlcStatsShortFramesIn.setStatus('current')
if mibBuilder.loadTexts: cHdlcStatsShortFramesIn.setDescription('Count of too-short frames received.')
cHdlcStatsPppFramesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1211, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cHdlcStatsPppFramesIn.setStatus('current')
if mibBuilder.loadTexts: cHdlcStatsPppFramesIn.setDescription('Count of PPP frames received.')
cHdlcStatsUnknownFramesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1211, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cHdlcStatsUnknownFramesIn.setStatus('current')
if mibBuilder.loadTexts: cHdlcStatsUnknownFramesIn.setDescription('Count of unknown frames received.')
cHdlcStatsUnknownCiscoTypeIn = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1211, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cHdlcStatsUnknownCiscoTypeIn.setStatus('current')
if mibBuilder.loadTexts: cHdlcStatsUnknownCiscoTypeIn.setDescription('Count of unknown Cisco control frames received.')
cHdlcStatsCiscoFramesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1211, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cHdlcStatsCiscoFramesIn.setStatus('current')
if mibBuilder.loadTexts: cHdlcStatsCiscoFramesIn.setDescription('Count of Cisco control frames received.')
ipCleartcpStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1231), )
if mibBuilder.loadTexts: ipCleartcpStatsTable.setStatus('current')
if mibBuilder.loadTexts: ipCleartcpStatsTable.setDescription('ClearTCP Statistics.')
ipCleartcpStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1231, 1), ).setIndexNames((0, "APTIS-MONITOR-MIB", "ipCleartcpStatsInputQfull"))
if mibBuilder.loadTexts: ipCleartcpStatsEntry.setStatus('current')
if mibBuilder.loadTexts: ipCleartcpStatsEntry.setDescription('This is the structure of entries in the ipCleartcpStatsTable.')
ipCleartcpStatsInputQfull = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1231, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCleartcpStatsInputQfull.setStatus('current')
if mibBuilder.loadTexts: ipCleartcpStatsInputQfull.setDescription('Number of pbufs dropped because input queue was full.')
ipCleartcpStatsInputTcpfull = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1231, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCleartcpStatsInputTcpfull.setStatus('current')
if mibBuilder.loadTexts: ipCleartcpStatsInputTcpfull.setDescription('Number of pbufs dropped because TCP input queue was full.')
ipCleartcpStatsInputDroppedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1231, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCleartcpStatsInputDroppedBytes.setStatus('current')
if mibBuilder.loadTexts: ipCleartcpStatsInputDroppedBytes.setDescription('Total number of input bytes dropped (all causes).')
ipCleartcpStatsInputBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1231, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCleartcpStatsInputBytes.setStatus('current')
if mibBuilder.loadTexts: ipCleartcpStatsInputBytes.setDescription('Total number of input bytes.')
ipCleartcpStatsOutputQfull = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1231, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCleartcpStatsOutputQfull.setStatus('current')
if mibBuilder.loadTexts: ipCleartcpStatsOutputQfull.setDescription('Number of pbufs dropped because output queue was full.')
ipCleartcpStatsOutputDroppedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1231, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCleartcpStatsOutputDroppedBytes.setStatus('current')
if mibBuilder.loadTexts: ipCleartcpStatsOutputDroppedBytes.setDescription('Total number of output bytes dropped (all causes).')
ipCleartcpStatsOutputBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1231, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCleartcpStatsOutputBytes.setStatus('current')
if mibBuilder.loadTexts: ipCleartcpStatsOutputBytes.setDescription('Total number of output bytes.')
ipSvcMonitoringTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1102), )
if mibBuilder.loadTexts: ipSvcMonitoringTable.setStatus('current')
if mibBuilder.loadTexts: ipSvcMonitoringTable.setDescription('IP services monitoring table.')
ipSvcMonitoringEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1102, 1), ).setIndexNames((0, "APTIS-MONITOR-MIB", "ipSvcMonitoringServiceName"))
if mibBuilder.loadTexts: ipSvcMonitoringEntry.setStatus('current')
if mibBuilder.loadTexts: ipSvcMonitoringEntry.setDescription('This is the structure of entries in the ipSvcMonitoringTable.')
ipSvcMonitoringServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1102, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSvcMonitoringServiceName.setStatus('current')
if mibBuilder.loadTexts: ipSvcMonitoringServiceName.setDescription('Name of IP service.')
ipSvcMonitoringState = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1102, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("stopped", 1), ("stopping", 2), ("starting", 3), ("running", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSvcMonitoringState.setStatus('current')
if mibBuilder.loadTexts: ipSvcMonitoringState.setDescription('Current state of the IP service.')
ipSvcMonitoringUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1102, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSvcMonitoringUptime.setStatus('current')
if mibBuilder.loadTexts: ipSvcMonitoringUptime.setDescription('Uptime of the IP service.')
ipSvcMonitoringRequestsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1102, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSvcMonitoringRequestsIn.setStatus('current')
if mibBuilder.loadTexts: ipSvcMonitoringRequestsIn.setDescription('Number of service requests received.')
ipSvcMonitoringResponsesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1102, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSvcMonitoringResponsesOut.setStatus('current')
if mibBuilder.loadTexts: ipSvcMonitoringResponsesOut.setDescription('Number of service responses issued.')
ipSvcMonitoringRequestsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1102, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSvcMonitoringRequestsOut.setStatus('current')
if mibBuilder.loadTexts: ipSvcMonitoringRequestsOut.setDescription('Number of service requests issued.')
ipSvcMonitoringResponsesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1102, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSvcMonitoringResponsesIn.setStatus('current')
if mibBuilder.loadTexts: ipSvcMonitoringResponsesIn.setDescription('Number of service responses received.')
ipSvcMonitoringRequestsInProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1102, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSvcMonitoringRequestsInProgress.setStatus('current')
if mibBuilder.loadTexts: ipSvcMonitoringRequestsInProgress.setDescription('Number of service requests in progress.')
ipSvcMonitoringRequestsInError = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1102, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSvcMonitoringRequestsInError.setStatus('current')
if mibBuilder.loadTexts: ipSvcMonitoringRequestsInError.setDescription('Number of service requests in error.')
ipSvcMonitoringResponsesInError = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1102, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSvcMonitoringResponsesInError.setStatus('current')
if mibBuilder.loadTexts: ipSvcMonitoringResponsesInError.setDescription('Number of service responses in error.')
ipAlarmEntryTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1196), )
if mibBuilder.loadTexts: ipAlarmEntryTable.setStatus('current')
if mibBuilder.loadTexts: ipAlarmEntryTable.setDescription('IP alarm entry table.')
ipAlarmEntryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1196, 1), ).setIndexNames((0, "APTIS-MONITOR-MIB", "ipAlarmEntryTrapGenNum"))
if mibBuilder.loadTexts: ipAlarmEntryEntry.setStatus('current')
if mibBuilder.loadTexts: ipAlarmEntryEntry.setDescription('This is the structure of entries in the ipAlarmEntryTable.')
ipAlarmEntryAlarmType = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1196, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("other", 1), ("flashAlarm", 2), ("ds1Alarm", 3), ("ds3Alarm", 4), ("linkAlarm", 5), ("isdnLinkAlarm", 6), ("hssiPortAlarm", 7), ("enetPortAlarm", 8), ("tunnelAlarm", 9), ("ss7Alarm", 10), ("macModemsAlarm", 11), ("totalModemsAlarm", 12), ("slotAlarm", 13), ("fanAlarm", 14), ("powerAlarm", 15), ("dhcpAlarm", 16), ("slotTempAlarm", 17), ("slaveSccFlashAlarm", 18), ("slaveSccAlarm", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAlarmEntryAlarmType.setStatus('current')
if mibBuilder.loadTexts: ipAlarmEntryAlarmType.setDescription('Type of this alarm.')
ipAlarmEntryTrapGenNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1196, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAlarmEntryTrapGenNum.setStatus('current')
if mibBuilder.loadTexts: ipAlarmEntryTrapGenNum.setDescription('trapGen sent in onset trap PDU.')
ipAlarmEntryTrapType = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1196, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAlarmEntryTrapType.setStatus('current')
if mibBuilder.loadTexts: ipAlarmEntryTrapType.setDescription('trapType sent in onset trap PDU.')
ipAlarmEntryTrapOID = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1196, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAlarmEntryTrapOID.setStatus('current')
if mibBuilder.loadTexts: ipAlarmEntryTrapOID.setDescription('trap object id sent in onset trap PDU.')
ipAlarmEntryTrapOIDLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1196, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAlarmEntryTrapOIDLen.setStatus('current')
if mibBuilder.loadTexts: ipAlarmEntryTrapOIDLen.setDescription('trap object id length sent in onset trap PDU.')
ipAlarmEntryTrapSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1196, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(7, 6, 5, 4, 3, 2, 1, 0))).clone(namedValues=NamedValues(("fatal", 7), ("emerg", 6), ("alert", 5), ("crit", 4), ("err", 3), ("warning", 2), ("notice", 1), ("info", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAlarmEntryTrapSeverity.setStatus('current')
if mibBuilder.loadTexts: ipAlarmEntryTrapSeverity.setDescription('trapSeverity sent in onset trap PDU.')
ipAlarmEntryTrapTimeticks = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1196, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAlarmEntryTrapTimeticks.setStatus('current')
if mibBuilder.loadTexts: ipAlarmEntryTrapTimeticks.setDescription('sysuptime when onset trap PDU was sent.')
ipAlarmEntryTrapPath = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1196, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAlarmEntryTrapPath.setStatus('current')
if mibBuilder.loadTexts: ipAlarmEntryTrapPath.setDescription('trapPath sent in onset trap PDU.')
ipAlarmEntryTrapArg1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1196, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAlarmEntryTrapArg1.setStatus('current')
if mibBuilder.loadTexts: ipAlarmEntryTrapArg1.setDescription('first trap specific variable sent in onset trap PDU.')
ipAlarmEntryTrapArg2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1196, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAlarmEntryTrapArg2.setStatus('current')
if mibBuilder.loadTexts: ipAlarmEntryTrapArg2.setDescription('second trap specific variable sent in onset trap PDU.')
ipAlarmEntryTrapArg3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1196, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAlarmEntryTrapArg3.setStatus('current')
if mibBuilder.loadTexts: ipAlarmEntryTrapArg3.setDescription('third trap specific variable sent in onset trap PDU.')
ipAlarmEntryTrapGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1196, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cvx", 1), ("mib2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAlarmEntryTrapGroup.setStatus('current')
if mibBuilder.loadTexts: ipAlarmEntryTrapGroup.setDescription('Notes whether this trap is a standard defined trap, or CVX proprietary')
ipsecCountersTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1612), )
if mibBuilder.loadTexts: ipsecCountersTable.setStatus('current')
if mibBuilder.loadTexts: ipsecCountersTable.setDescription('IPSec Statistics Counters')
ipsecCountersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1612, 1), ).setIndexNames((0, "APTIS-MONITOR-MIB", "ipsecCountersOutboundCounter"))
if mibBuilder.loadTexts: ipsecCountersEntry.setStatus('current')
if mibBuilder.loadTexts: ipsecCountersEntry.setDescription('This is the structure of entries in the ipsecCountersTable.')
ipsecCountersOutboundCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1612, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecCountersOutboundCounter.setStatus('current')
if mibBuilder.loadTexts: ipsecCountersOutboundCounter.setDescription('Specifies number of the outbound packets processed by the IPSec module.')
ipsecCountersInboundCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1612, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecCountersInboundCounter.setStatus('current')
if mibBuilder.loadTexts: ipsecCountersInboundCounter.setDescription('Specifies number of the inbound packets processed by the IPSec module.')
ipsecCountersOutboundDropCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1612, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecCountersOutboundDropCounter.setStatus('current')
if mibBuilder.loadTexts: ipsecCountersOutboundDropCounter.setDescription('Specifies number of the outbound packets dropped by the IPSec module.')
ipsecCountersInboundDropCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1612, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecCountersInboundDropCounter.setStatus('current')
if mibBuilder.loadTexts: ipsecCountersInboundDropCounter.setDescription('Specifies number of the inbound packets dropped by the IPSec module.')
ipStubStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1221), )
if mibBuilder.loadTexts: ipStubStatsTable.setStatus('current')
if mibBuilder.loadTexts: ipStubStatsTable.setDescription('IP Stub Stats Information.')
ipStubStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1221, 1), ).setIndexNames((0, "APTIS-MONITOR-MIB", "ipStubStatsIgmpInMsgs"))
if mibBuilder.loadTexts: ipStubStatsEntry.setStatus('current')
if mibBuilder.loadTexts: ipStubStatsEntry.setDescription('This is the structure of entries in the ipStubStatsTable.')
ipStubStatsIgmpInMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1221, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipStubStatsIgmpInMsgs.setStatus('current')
if mibBuilder.loadTexts: ipStubStatsIgmpInMsgs.setDescription('number of IGMP packets received')
ipStubStatsIgmpInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1221, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipStubStatsIgmpInErrors.setStatus('current')
if mibBuilder.loadTexts: ipStubStatsIgmpInErrors.setDescription('number of times IGMP packets received in error')
ipStubStatsIgmpInReports = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1221, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipStubStatsIgmpInReports.setStatus('current')
if mibBuilder.loadTexts: ipStubStatsIgmpInReports.setDescription('number of IGMP report packets received')
ipStubStatsIgmpInQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1221, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipStubStatsIgmpInQueries.setStatus('current')
if mibBuilder.loadTexts: ipStubStatsIgmpInQueries.setDescription('number of IGMP query packets received')
ipStubStatsIgmpUnknownType = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1221, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipStubStatsIgmpUnknownType.setStatus('current')
if mibBuilder.loadTexts: ipStubStatsIgmpUnknownType.setDescription('number of IGMP packets of unknown type received')
ipStubStatsIgmpOutMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1221, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipStubStatsIgmpOutMsgs.setStatus('current')
if mibBuilder.loadTexts: ipStubStatsIgmpOutMsgs.setDescription('number of IGMP packets sent')
ipStubStatsNomemoryOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1221, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipStubStatsNomemoryOut.setStatus('current')
if mibBuilder.loadTexts: ipStubStatsNomemoryOut.setDescription('number of times IGMP not sent due to no memory')
iSDNStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2208), )
if mibBuilder.loadTexts: iSDNStatsTable.setStatus('current')
if mibBuilder.loadTexts: iSDNStatsTable.setDescription('ISDN Stats Information.')
iSDNStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2208, 1), ).setIndexNames((0, "APTIS-MONITOR-MIB", "iSDNStatsInCalls"))
if mibBuilder.loadTexts: iSDNStatsEntry.setStatus('current')
if mibBuilder.loadTexts: iSDNStatsEntry.setDescription('This is the structure of entries in the iSDNStatsTable.')
iSDNStatsInCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2208, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iSDNStatsInCalls.setStatus('current')
if mibBuilder.loadTexts: iSDNStatsInCalls.setDescription('Number of attempted incoming calls')
iSDNStatsInConnected = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2208, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iSDNStatsInConnected.setStatus('current')
if mibBuilder.loadTexts: iSDNStatsInConnected.setDescription('Number of completed incoming calls')
iSDNStatsOutCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2208, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iSDNStatsOutCalls.setStatus('current')
if mibBuilder.loadTexts: iSDNStatsOutCalls.setDescription('Number of attempted outgoing calls')
iSDNStatsOutConnected = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2208, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iSDNStatsOutConnected.setStatus('current')
if mibBuilder.loadTexts: iSDNStatsOutConnected.setDescription('Number of completed outgoing calls')
iSDNStatsChargedUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2208, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iSDNStatsChargedUnits.setStatus('current')
if mibBuilder.loadTexts: iSDNStatsChargedUnits.setDescription('Number of calls charged to this line (outgoing calls, plus reverse-billed incoming calls)')
iSDNLayer2StatsTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2209), )
if mibBuilder.loadTexts: iSDNLayer2StatsTable.setStatus('current')
if mibBuilder.loadTexts: iSDNLayer2StatsTable.setDescription('ISDN Layer-2 Stats Information.')
iSDNLayer2StatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2209, 1), ).setIndexNames((0, "APTIS-MONITOR-MIB", "iSDNLayer2StatsLapdPeerSabme"))
if mibBuilder.loadTexts: iSDNLayer2StatsEntry.setStatus('current')
if mibBuilder.loadTexts: iSDNLayer2StatsEntry.setDescription('This is the structure of entries in the iSDNLayer2StatsTable.')
iSDNLayer2StatsLapdPeerSabme = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2209, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iSDNLayer2StatsLapdPeerSabme.setStatus('current')
if mibBuilder.loadTexts: iSDNLayer2StatsLapdPeerSabme.setDescription('Number of SABME frames received on this interface')
iSDNLayer2StatsLapdRcvdFrmr = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2209, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iSDNLayer2StatsLapdRcvdFrmr.setStatus('current')
if mibBuilder.loadTexts: iSDNLayer2StatsLapdRcvdFrmr.setDescription('Number of FRMR response frames received. (Indicates number of framing errors on this interface)')
iSDNLayer2StatsLapdState = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2209, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("down", 0), ("up", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iSDNLayer2StatsLapdState.setStatus('current')
if mibBuilder.loadTexts: iSDNLayer2StatsLapdState.setDescription('Current state of the ISDN LAPD link')
iSDNHDLCFrameTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2210), )
if mibBuilder.loadTexts: iSDNHDLCFrameTable.setStatus('current')
if mibBuilder.loadTexts: iSDNHDLCFrameTable.setDescription('ISDN HDLC Frame Information.')
iSDNHDLCFrameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2210, 1), ).setIndexNames((0, "APTIS-MONITOR-MIB", "iSDNHDLCFrameIndex"))
if mibBuilder.loadTexts: iSDNHDLCFrameEntry.setStatus('current')
if mibBuilder.loadTexts: iSDNHDLCFrameEntry.setDescription('This is the structure of entries in the iSDNHDLCFrameTable.')
iSDNHDLCFrameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2210, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iSDNHDLCFrameIndex.setStatus('current')
if mibBuilder.loadTexts: iSDNHDLCFrameIndex.setDescription('Index of this message')
iSDNHDLCFrameNextIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2210, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iSDNHDLCFrameNextIndex.setStatus('current')
if mibBuilder.loadTexts: iSDNHDLCFrameNextIndex.setDescription('next available log')
iSDNHDLCFrameMaxIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2210, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iSDNHDLCFrameMaxIndex.setStatus('current')
if mibBuilder.loadTexts: iSDNHDLCFrameMaxIndex.setDescription('last saved log')
iSDNHDLCFrameTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2210, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iSDNHDLCFrameTimestamp.setStatus('current')
if mibBuilder.loadTexts: iSDNHDLCFrameTimestamp.setDescription('timestamp')
iSDNHDLCFrameDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2210, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("transmit", 1), ("receive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iSDNHDLCFrameDirection.setStatus('current')
if mibBuilder.loadTexts: iSDNHDLCFrameDirection.setDescription('transmit or receive')
iSDNHDLCFrameLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2210, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iSDNHDLCFrameLength.setStatus('current')
if mibBuilder.loadTexts: iSDNHDLCFrameLength.setDescription('length of HDLC frame')
iSDNHDLCFrameMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2210, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 260))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iSDNHDLCFrameMessage.setStatus('current')
if mibBuilder.loadTexts: iSDNHDLCFrameMessage.setDescription('contents of HDLC frame')
l2FTunnelStatusActiveTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1351), )
if mibBuilder.loadTexts: l2FTunnelStatusActiveTable.setStatus('current')
if mibBuilder.loadTexts: l2FTunnelStatusActiveTable.setDescription('Layer-2 Forwarding Active Tunnel Status.')
l2FTunnelStatusActiveEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1351, 1), ).setIndexNames((0, "APTIS-MONITOR-MIB", "l2FTunnelStatusActiveLocalCLID"))
if mibBuilder.loadTexts: l2FTunnelStatusActiveEntry.setStatus('current')
if mibBuilder.loadTexts: l2FTunnelStatusActiveEntry.setDescription('This is the structure of entries in the l2FTunnelStatusActiveTable.')
l2FTunnelStatusActiveLocalCLID = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1351, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2FTunnelStatusActiveLocalCLID.setStatus('current')
if mibBuilder.loadTexts: l2FTunnelStatusActiveLocalCLID.setDescription('Local CLID for this tunnel')
l2FTunnelStatusActiveRemoteCLID = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1351, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2FTunnelStatusActiveRemoteCLID.setStatus('current')
if mibBuilder.loadTexts: l2FTunnelStatusActiveRemoteCLID.setDescription('Remote CLID for this tunnel (0 = not known yet)')
l2FTunnelStatusActiveLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1351, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2FTunnelStatusActiveLocalAddress.setStatus('current')
if mibBuilder.loadTexts: l2FTunnelStatusActiveLocalAddress.setDescription('IP address used by CVX')
l2FTunnelStatusActiveRemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1351, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2FTunnelStatusActiveRemoteAddress.setStatus('current')
if mibBuilder.loadTexts: l2FTunnelStatusActiveRemoteAddress.setDescription('IP address of home gateway')
l2FTunnelStatusActiveState = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1351, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("idle", 0), ("start1", 1), ("start2", 2), ("opened", 3), ("close1", 4), ("close2", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2FTunnelStatusActiveState.setStatus('current')
if mibBuilder.loadTexts: l2FTunnelStatusActiveState.setDescription('Current state of this tunnel')
l2FTunnelStatusActiveUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1351, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2FTunnelStatusActiveUpTime.setStatus('current')
if mibBuilder.loadTexts: l2FTunnelStatusActiveUpTime.setDescription('Time this tunnel has been active')
l2FTunnelStatusActiveActiveLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1351, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2FTunnelStatusActiveActiveLinks.setStatus('current')
if mibBuilder.loadTexts: l2FTunnelStatusActiveActiveLinks.setDescription('Current number of active links')
l2FTunnelStatusActiveMaxActiveLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1351, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2FTunnelStatusActiveMaxActiveLinks.setStatus('current')
if mibBuilder.loadTexts: l2FTunnelStatusActiveMaxActiveLinks.setDescription('Highest number of links')
l2FTunnelStatusActivePendingLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1351, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2FTunnelStatusActivePendingLinks.setStatus('current')
if mibBuilder.loadTexts: l2FTunnelStatusActivePendingLinks.setDescription('Current number of pending links')
l2FTunnelStatusActiveLinksAdded = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1351, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2FTunnelStatusActiveLinksAdded.setStatus('current')
if mibBuilder.loadTexts: l2FTunnelStatusActiveLinksAdded.setDescription('Total number of links added to this tunnel')
l2FTunnelStatusActiveLinksAddedSuccessfully = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1351, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2FTunnelStatusActiveLinksAddedSuccessfully.setStatus('current')
if mibBuilder.loadTexts: l2FTunnelStatusActiveLinksAddedSuccessfully.setDescription('Total number of links added successfully')
l2FTunnelStatusActiveLinksAddedUnsuccessfully = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1351, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2FTunnelStatusActiveLinksAddedUnsuccessfully.setStatus('current')
if mibBuilder.loadTexts: l2FTunnelStatusActiveLinksAddedUnsuccessfully.setDescription('Total number of links added unsuccessfully')
l2FTunnelStatusActiveLinksRemoved = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1351, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2FTunnelStatusActiveLinksRemoved.setStatus('current')
if mibBuilder.loadTexts: l2FTunnelStatusActiveLinksRemoved.setDescription('Total number of links removed')
l2FTunnelStatusActiveGotOpened = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1351, 1, 14), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2FTunnelStatusActiveGotOpened.setStatus('current')
if mibBuilder.loadTexts: l2FTunnelStatusActiveGotOpened.setDescription('Specifies whether tunnel was opened successfully')
l2FTunnelStatusActiveVPOP = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1351, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2FTunnelStatusActiveVPOP.setStatus('current')
if mibBuilder.loadTexts: l2FTunnelStatusActiveVPOP.setDescription('VPOP of first link added to this tunnel')
l2FTunnelStatusActiveL2FTermationCause = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1351, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2FTunnelStatusActiveL2FTermationCause.setStatus('current')
if mibBuilder.loadTexts: l2FTunnelStatusActiveL2FTermationCause.setDescription('L2F termination cause')
l2FTunnelStatusInactiveTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1352), )
if mibBuilder.loadTexts: l2FTunnelStatusInactiveTable.setStatus('current')
if mibBuilder.loadTexts: l2FTunnelStatusInactiveTable.setDescription('Layer-2 Forwarding Inactive Tunnel Status.')
l2FTunnelStatusInactiveEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1352, 1), ).setIndexNames((0, "APTIS-MONITOR-MIB", "l2FTunnelStatusInactiveLocalCLID"))
if mibBuilder.loadTexts: l2FTunnelStatusInactiveEntry.setStatus('current')
if mibBuilder.loadTexts: l2FTunnelStatusInactiveEntry.setDescription('This is the structure of entries in the l2FTunnelStatusInactiveTable.')
l2FTunnelStatusInactiveLocalCLID = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1352, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2FTunnelStatusInactiveLocalCLID.setStatus('current')
if mibBuilder.loadTexts: l2FTunnelStatusInactiveLocalCLID.setDescription('Local CLID for this tunnel')
l2FTunnelStatusInactiveRemoteCLID = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1352, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2FTunnelStatusInactiveRemoteCLID.setStatus('current')
if mibBuilder.loadTexts: l2FTunnelStatusInactiveRemoteCLID.setDescription('Remote CLID for this tunnel (0 = not known yet)')
l2FTunnelStatusInactiveLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1352, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2FTunnelStatusInactiveLocalAddress.setStatus('current')
if mibBuilder.loadTexts: l2FTunnelStatusInactiveLocalAddress.setDescription('IP address used by CVX')
l2FTunnelStatusInactiveRemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1352, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2FTunnelStatusInactiveRemoteAddress.setStatus('current')
if mibBuilder.loadTexts: l2FTunnelStatusInactiveRemoteAddress.setDescription('IP address of home gateway')
l2FTunnelStatusInactiveState = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1352, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("idle", 0), ("start1", 1), ("start2", 2), ("opened", 3), ("close1", 4), ("close2", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2FTunnelStatusInactiveState.setStatus('current')
if mibBuilder.loadTexts: l2FTunnelStatusInactiveState.setDescription('Current state of this tunnel')
l2FTunnelStatusInactiveUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1352, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2FTunnelStatusInactiveUpTime.setStatus('current')
if mibBuilder.loadTexts: l2FTunnelStatusInactiveUpTime.setDescription('Time this tunnel has been active')
l2FTunnelStatusInactiveActiveLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1352, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2FTunnelStatusInactiveActiveLinks.setStatus('current')
if mibBuilder.loadTexts: l2FTunnelStatusInactiveActiveLinks.setDescription('Current number of active links')
l2FTunnelStatusInactiveMaxActiveLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1352, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2FTunnelStatusInactiveMaxActiveLinks.setStatus('current')
if mibBuilder.loadTexts: l2FTunnelStatusInactiveMaxActiveLinks.setDescription('Highest number of links')
l2FTunnelStatusInactivePendingLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1352, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2FTunnelStatusInactivePendingLinks.setStatus('current')
if mibBuilder.loadTexts: l2FTunnelStatusInactivePendingLinks.setDescription('Current number of pending links')
l2FTunnelStatusInactiveLinksAdded = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1352, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2FTunnelStatusInactiveLinksAdded.setStatus('current')
if mibBuilder.loadTexts: l2FTunnelStatusInactiveLinksAdded.setDescription('Total number of links added to this tunnel')
l2FTunnelStatusInactiveLinksAddedSuccessfully = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1352, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2FTunnelStatusInactiveLinksAddedSuccessfully.setStatus('current')
if mibBuilder.loadTexts: l2FTunnelStatusInactiveLinksAddedSuccessfully.setDescription('Total number of links added successfully')
l2FTunnelStatusInactiveLinksAddedUnsuccessfully = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1352, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2FTunnelStatusInactiveLinksAddedUnsuccessfully.setStatus('current')
if mibBuilder.loadTexts: l2FTunnelStatusInactiveLinksAddedUnsuccessfully.setDescription('Total number of links added unsuccessfully')
l2FTunnelStatusInactiveLinksRemoved = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1352, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2FTunnelStatusInactiveLinksRemoved.setStatus('current')
if mibBuilder.loadTexts: l2FTunnelStatusInactiveLinksRemoved.setDescription('Total number of links removed')
l2FTunnelStatusInactiveGotOpened = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1352, 1, 14), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2FTunnelStatusInactiveGotOpened.setStatus('current')
if mibBuilder.loadTexts: l2FTunnelStatusInactiveGotOpened.setDescription('Specifies whether tunnel was opened successfully')
l2FTunnelStatusInactiveVPOP = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1352, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2FTunnelStatusInactiveVPOP.setStatus('current')
if mibBuilder.loadTexts: l2FTunnelStatusInactiveVPOP.setDescription('VPOP of first link added to this tunnel')
l2FTunnelStatusInactiveL2FTermationCause = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1352, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2FTunnelStatusInactiveL2FTermationCause.setStatus('current')
if mibBuilder.loadTexts: l2FTunnelStatusInactiveL2FTermationCause.setDescription('L2F termination cause')
l2FLinkStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1353), )
if mibBuilder.loadTexts: l2FLinkStatusTable.setStatus('current')
if mibBuilder.loadTexts: l2FLinkStatusTable.setDescription('Layer-2 Forwarding Link Status.')
l2FLinkStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1353, 1), ).setIndexNames((0, "APTIS-MONITOR-MIB", "l2FLinkStatusLocalCLID"), (0, "APTIS-MONITOR-MIB", "l2FLinkStatusIndex"))
if mibBuilder.loadTexts: l2FLinkStatusEntry.setStatus('current')
if mibBuilder.loadTexts: l2FLinkStatusEntry.setDescription('This is the structure of entries in the l2FLinkStatusTable.')
l2FLinkStatusLocalCLID = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1353, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2FLinkStatusLocalCLID.setStatus('current')
if mibBuilder.loadTexts: l2FLinkStatusLocalCLID.setDescription('Local CLID for this tunnel')
l2FLinkStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1353, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2FLinkStatusIndex.setStatus('current')
if mibBuilder.loadTexts: l2FLinkStatusIndex.setDescription('Index of this link in the tunnel')
l2FLinkStatusSessionID = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1353, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2FLinkStatusSessionID.setStatus('current')
if mibBuilder.loadTexts: l2FLinkStatusSessionID.setDescription('System session ID for this link')
l2FLinkStatusVPOP = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1353, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2FLinkStatusVPOP.setStatus('current')
if mibBuilder.loadTexts: l2FLinkStatusVPOP.setDescription('VPOP of first link added to this tunnel')
l2FLinkStatusMIDValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1353, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2FLinkStatusMIDValue.setStatus('current')
if mibBuilder.loadTexts: l2FLinkStatusMIDValue.setDescription('MID value for this link')
l2FLinkStatusState = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1353, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("idle", 0), ("pending", 1), ("start1", 2), ("opened", 3), ("close1", 4), ("close2", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2FLinkStatusState.setStatus('current')
if mibBuilder.loadTexts: l2FLinkStatusState.setDescription('Current state of this link')
l2FLinkStatusUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1353, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2FLinkStatusUpTime.setStatus('current')
if mibBuilder.loadTexts: l2FLinkStatusUpTime.setDescription('Time this link has been active')
l2FLinkStatusUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1353, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2FLinkStatusUserName.setStatus('current')
if mibBuilder.loadTexts: l2FLinkStatusUserName.setDescription('Remote user name')
l2FLinkStatusTxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1353, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2FLinkStatusTxPackets.setStatus('current')
if mibBuilder.loadTexts: l2FLinkStatusTxPackets.setDescription('Number of packets transmitted to remote user')
l2FLinkStatusTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1353, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2FLinkStatusTxBytes.setStatus('current')
if mibBuilder.loadTexts: l2FLinkStatusTxBytes.setDescription('Number of bytes transmitted to remote user')
l2FLinkStatusRxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1353, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2FLinkStatusRxPackets.setStatus('current')
if mibBuilder.loadTexts: l2FLinkStatusRxPackets.setDescription('Number of packets received from remote user')
l2FLinkStatusRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1353, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2FLinkStatusRxBytes.setStatus('current')
if mibBuilder.loadTexts: l2FLinkStatusRxBytes.setDescription('Number of bytes received from remote user')
l2FLinkStatusL2FTermationCause = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1353, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2FLinkStatusL2FTermationCause.setStatus('current')
if mibBuilder.loadTexts: l2FLinkStatusL2FTermationCause.setDescription('L2F termination cause')
l2FLogEntryTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1354), )
if mibBuilder.loadTexts: l2FLogEntryTable.setStatus('current')
if mibBuilder.loadTexts: l2FLogEntryTable.setDescription('Layer-2 Forwarding Log Entry Information.')
l2FLogEntryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1354, 1), ).setIndexNames((0, "APTIS-MONITOR-MIB", "l2FLogEntryLocalCLID"), (0, "APTIS-MONITOR-MIB", "l2FLogEntryIndex"))
if mibBuilder.loadTexts: l2FLogEntryEntry.setStatus('current')
if mibBuilder.loadTexts: l2FLogEntryEntry.setDescription('This is the structure of entries in the l2FLogEntryTable.')
l2FLogEntryLocalCLID = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1354, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2FLogEntryLocalCLID.setStatus('current')
if mibBuilder.loadTexts: l2FLogEntryLocalCLID.setDescription('Local CLID for this tunnel')
l2FLogEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1354, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2FLogEntryIndex.setStatus('current')
if mibBuilder.loadTexts: l2FLogEntryIndex.setDescription('Log entry index')
l2FLogEntryMinIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1354, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2FLogEntryMinIndex.setStatus('current')
if mibBuilder.loadTexts: l2FLogEntryMinIndex.setDescription('Index of oldest event available')
l2FLogEntryMaxIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1354, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2FLogEntryMaxIndex.setStatus('current')
if mibBuilder.loadTexts: l2FLogEntryMaxIndex.setDescription('Index of newest event available')
l2FLogEntryUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1354, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2FLogEntryUpTime.setStatus('current')
if mibBuilder.loadTexts: l2FLogEntryUpTime.setDescription('Time this tunnel has been active')
l2FLogEntryEntryText = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1354, 1, 21), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2FLogEntryEntryText.setStatus('current')
if mibBuilder.loadTexts: l2FLogEntryEntryText.setDescription('Log entry text.')
l2TPTunnelStatusActiveTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1507), )
if mibBuilder.loadTexts: l2TPTunnelStatusActiveTable.setStatus('current')
if mibBuilder.loadTexts: l2TPTunnelStatusActiveTable.setDescription('Layer-2 Tunneling Protocol Active Tunnel Status.')
l2TPTunnelStatusActiveEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1507, 1), ).setIndexNames((0, "APTIS-MONITOR-MIB", "l2TPTunnelStatusActiveLocalID"))
if mibBuilder.loadTexts: l2TPTunnelStatusActiveEntry.setStatus('current')
if mibBuilder.loadTexts: l2TPTunnelStatusActiveEntry.setDescription('This is the structure of entries in the l2TPTunnelStatusActiveTable.')
l2TPTunnelStatusActiveSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1507, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2TPTunnelStatusActiveSlot.setStatus('current')
if mibBuilder.loadTexts: l2TPTunnelStatusActiveSlot.setDescription('Slot on which tunnel is terminated')
l2TPTunnelStatusActiveLocalID = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1507, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2TPTunnelStatusActiveLocalID.setStatus('current')
if mibBuilder.loadTexts: l2TPTunnelStatusActiveLocalID.setDescription('Local ID for this tunnel')
l2TPTunnelStatusActiveRemoteID = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1507, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2TPTunnelStatusActiveRemoteID.setStatus('current')
if mibBuilder.loadTexts: l2TPTunnelStatusActiveRemoteID.setDescription('Remote ID for this tunnel (0 = not known yet)')
l2TPTunnelStatusActiveLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1507, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2TPTunnelStatusActiveLocalAddress.setStatus('current')
if mibBuilder.loadTexts: l2TPTunnelStatusActiveLocalAddress.setDescription('IP address used by CVX')
l2TPTunnelStatusActiveRemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1507, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2TPTunnelStatusActiveRemoteAddress.setStatus('current')
if mibBuilder.loadTexts: l2TPTunnelStatusActiveRemoteAddress.setDescription('IP address of LNS')
l2TPTunnelStatusActiveState = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1507, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("idle", 0), ("waitCtrlReply", 1), ("waitCtrlConn", 2), ("established", 3), ("closed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2TPTunnelStatusActiveState.setStatus('current')
if mibBuilder.loadTexts: l2TPTunnelStatusActiveState.setDescription('Current state of this tunnel')
l2TPTunnelStatusActiveUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1507, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2TPTunnelStatusActiveUpTime.setStatus('current')
if mibBuilder.loadTexts: l2TPTunnelStatusActiveUpTime.setDescription('Time this tunnel has been active')
l2TPTunnelStatusActiveActiveLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1507, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2TPTunnelStatusActiveActiveLinks.setStatus('current')
if mibBuilder.loadTexts: l2TPTunnelStatusActiveActiveLinks.setDescription('Current number of active links')
l2TPTunnelStatusActiveMaxActiveLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1507, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2TPTunnelStatusActiveMaxActiveLinks.setStatus('current')
if mibBuilder.loadTexts: l2TPTunnelStatusActiveMaxActiveLinks.setDescription('Highest number of links')
l2TPTunnelStatusActivePendingLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1507, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2TPTunnelStatusActivePendingLinks.setStatus('current')
if mibBuilder.loadTexts: l2TPTunnelStatusActivePendingLinks.setDescription('Current number of pending links')
l2TPTunnelStatusActiveLinksAdded = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1507, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2TPTunnelStatusActiveLinksAdded.setStatus('current')
if mibBuilder.loadTexts: l2TPTunnelStatusActiveLinksAdded.setDescription('Total number of links added to this tunnel')
l2TPTunnelStatusActiveLinksAddedSuccessfully = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1507, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2TPTunnelStatusActiveLinksAddedSuccessfully.setStatus('current')
if mibBuilder.loadTexts: l2TPTunnelStatusActiveLinksAddedSuccessfully.setDescription('Total number of links added successfully')
l2TPTunnelStatusActiveLinksAddedUnsuccessfully = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1507, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2TPTunnelStatusActiveLinksAddedUnsuccessfully.setStatus('current')
if mibBuilder.loadTexts: l2TPTunnelStatusActiveLinksAddedUnsuccessfully.setDescription('Total number of links added unsuccessfully')
l2TPTunnelStatusActiveLinksRemoved = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1507, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2TPTunnelStatusActiveLinksRemoved.setStatus('current')
if mibBuilder.loadTexts: l2TPTunnelStatusActiveLinksRemoved.setDescription('Total number of links removed')
l2TPTunnelStatusActiveGotOpened = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1507, 1, 15), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2TPTunnelStatusActiveGotOpened.setStatus('current')
if mibBuilder.loadTexts: l2TPTunnelStatusActiveGotOpened.setDescription('Specifies whether tunnel was opened successfully')
l2TPTunnelStatusActiveVPOP = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1507, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2TPTunnelStatusActiveVPOP.setStatus('current')
if mibBuilder.loadTexts: l2TPTunnelStatusActiveVPOP.setDescription('VPOP of first link added to this tunnel')
l2TPTunnelStatusActiveL2TPTermationCause = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1507, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2TPTunnelStatusActiveL2TPTermationCause.setStatus('current')
if mibBuilder.loadTexts: l2TPTunnelStatusActiveL2TPTermationCause.setDescription('L2TP termination cause')
l2TPTunnelStatusInactiveTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1508), )
if mibBuilder.loadTexts: l2TPTunnelStatusInactiveTable.setStatus('current')
if mibBuilder.loadTexts: l2TPTunnelStatusInactiveTable.setDescription('Layer-2 Tunneling Protocol Inactive Tunnel Status.')
l2TPTunnelStatusInactiveEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1508, 1), ).setIndexNames((0, "APTIS-MONITOR-MIB", "l2TPTunnelStatusInactiveLocalID"))
if mibBuilder.loadTexts: l2TPTunnelStatusInactiveEntry.setStatus('current')
if mibBuilder.loadTexts: l2TPTunnelStatusInactiveEntry.setDescription('This is the structure of entries in the l2TPTunnelStatusInactiveTable.')
l2TPTunnelStatusInactiveSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1508, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2TPTunnelStatusInactiveSlot.setStatus('current')
if mibBuilder.loadTexts: l2TPTunnelStatusInactiveSlot.setDescription('Slot on which tunnel is terminated')
l2TPTunnelStatusInactiveLocalID = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1508, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2TPTunnelStatusInactiveLocalID.setStatus('current')
if mibBuilder.loadTexts: l2TPTunnelStatusInactiveLocalID.setDescription('Local ID for this tunnel')
l2TPTunnelStatusInactiveRemoteID = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1508, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2TPTunnelStatusInactiveRemoteID.setStatus('current')
if mibBuilder.loadTexts: l2TPTunnelStatusInactiveRemoteID.setDescription('Remote ID for this tunnel (0 = not known yet)')
l2TPTunnelStatusInactiveLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1508, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2TPTunnelStatusInactiveLocalAddress.setStatus('current')
if mibBuilder.loadTexts: l2TPTunnelStatusInactiveLocalAddress.setDescription('IP address used by CVX')
l2TPTunnelStatusInactiveRemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1508, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2TPTunnelStatusInactiveRemoteAddress.setStatus('current')
if mibBuilder.loadTexts: l2TPTunnelStatusInactiveRemoteAddress.setDescription('IP address of LNS')
l2TPTunnelStatusInactiveState = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1508, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("idle", 0), ("waitCtrlReply", 1), ("waitCtrlConn", 2), ("established", 3), ("closed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2TPTunnelStatusInactiveState.setStatus('current')
if mibBuilder.loadTexts: l2TPTunnelStatusInactiveState.setDescription('Current state of this tunnel')
l2TPTunnelStatusInactiveUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1508, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2TPTunnelStatusInactiveUpTime.setStatus('current')
if mibBuilder.loadTexts: l2TPTunnelStatusInactiveUpTime.setDescription('Time this tunnel has been active')
l2TPTunnelStatusInactiveActiveLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1508, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2TPTunnelStatusInactiveActiveLinks.setStatus('current')
if mibBuilder.loadTexts: l2TPTunnelStatusInactiveActiveLinks.setDescription('Current number of active links')
l2TPTunnelStatusInactiveMaxActiveLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1508, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2TPTunnelStatusInactiveMaxActiveLinks.setStatus('current')
if mibBuilder.loadTexts: l2TPTunnelStatusInactiveMaxActiveLinks.setDescription('Highest number of links')
l2TPTunnelStatusInactivePendingLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1508, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2TPTunnelStatusInactivePendingLinks.setStatus('current')
if mibBuilder.loadTexts: l2TPTunnelStatusInactivePendingLinks.setDescription('Current number of pending links')
l2TPTunnelStatusInactiveLinksAdded = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1508, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2TPTunnelStatusInactiveLinksAdded.setStatus('current')
if mibBuilder.loadTexts: l2TPTunnelStatusInactiveLinksAdded.setDescription('Total number of links added to this tunnel')
l2TPTunnelStatusInactiveLinksAddedSuccessfully = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1508, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2TPTunnelStatusInactiveLinksAddedSuccessfully.setStatus('current')
if mibBuilder.loadTexts: l2TPTunnelStatusInactiveLinksAddedSuccessfully.setDescription('Total number of links added successfully')
l2TPTunnelStatusInactiveLinksAddedUnsuccessfully = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1508, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2TPTunnelStatusInactiveLinksAddedUnsuccessfully.setStatus('current')
if mibBuilder.loadTexts: l2TPTunnelStatusInactiveLinksAddedUnsuccessfully.setDescription('Total number of links added unsuccessfully')
l2TPTunnelStatusInactiveLinksRemoved = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1508, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2TPTunnelStatusInactiveLinksRemoved.setStatus('current')
if mibBuilder.loadTexts: l2TPTunnelStatusInactiveLinksRemoved.setDescription('Total number of links removed')
l2TPTunnelStatusInactiveGotOpened = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1508, 1, 15), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2TPTunnelStatusInactiveGotOpened.setStatus('current')
if mibBuilder.loadTexts: l2TPTunnelStatusInactiveGotOpened.setDescription('Specifies whether tunnel was opened successfully')
l2TPTunnelStatusInactiveVPOP = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1508, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2TPTunnelStatusInactiveVPOP.setStatus('current')
if mibBuilder.loadTexts: l2TPTunnelStatusInactiveVPOP.setDescription('VPOP of first link added to this tunnel')
l2TPTunnelStatusInactiveL2TPTermationCause = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1508, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2TPTunnelStatusInactiveL2TPTermationCause.setStatus('current')
if mibBuilder.loadTexts: l2TPTunnelStatusInactiveL2TPTermationCause.setDescription('L2TP termination cause')
l2TPLinkStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1509), )
if mibBuilder.loadTexts: l2TPLinkStatusTable.setStatus('current')
if mibBuilder.loadTexts: l2TPLinkStatusTable.setDescription('Layer-2 Tunneling Protocol Link Status.')
l2TPLinkStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1509, 1), ).setIndexNames((0, "APTIS-MONITOR-MIB", "l2TPLinkStatusLocalID"), (0, "APTIS-MONITOR-MIB", "l2TPLinkStatusIndex"))
if mibBuilder.loadTexts: l2TPLinkStatusEntry.setStatus('current')
if mibBuilder.loadTexts: l2TPLinkStatusEntry.setDescription('This is the structure of entries in the l2TPLinkStatusTable.')
l2TPLinkStatusLocalID = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1509, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2TPLinkStatusLocalID.setStatus('current')
if mibBuilder.loadTexts: l2TPLinkStatusLocalID.setDescription('Local ID for this link')
l2TPLinkStatusRemoteID = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1509, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2TPLinkStatusRemoteID.setStatus('current')
if mibBuilder.loadTexts: l2TPLinkStatusRemoteID.setDescription('Local ID for this link')
l2TPLinkStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1509, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2TPLinkStatusIndex.setStatus('current')
if mibBuilder.loadTexts: l2TPLinkStatusIndex.setDescription('Index of this link in the tunnel')
l2TPLinkStatusSessionID = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1509, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2TPLinkStatusSessionID.setStatus('current')
if mibBuilder.loadTexts: l2TPLinkStatusSessionID.setDescription('System session ID for this link')
l2TPLinkStatusVPOP = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1509, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2TPLinkStatusVPOP.setStatus('current')
if mibBuilder.loadTexts: l2TPLinkStatusVPOP.setDescription('VPOP of first link added to this tunnel')
l2TPLinkStatusState = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1509, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("idle", 0), ("waitReply", 1), ("connected", 2), ("closed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2TPLinkStatusState.setStatus('current')
if mibBuilder.loadTexts: l2TPLinkStatusState.setDescription('Current state of this link')
l2TPLinkStatusUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1509, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2TPLinkStatusUpTime.setStatus('current')
if mibBuilder.loadTexts: l2TPLinkStatusUpTime.setDescription('Time this link has been active')
l2TPLinkStatusUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1509, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2TPLinkStatusUserName.setStatus('current')
if mibBuilder.loadTexts: l2TPLinkStatusUserName.setDescription('Remote user name')
l2TPLinkStatusTxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1509, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2TPLinkStatusTxPackets.setStatus('current')
if mibBuilder.loadTexts: l2TPLinkStatusTxPackets.setDescription('Number of packets transmitted to remote user')
l2TPLinkStatusTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1509, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2TPLinkStatusTxBytes.setStatus('current')
if mibBuilder.loadTexts: l2TPLinkStatusTxBytes.setDescription('Number of bytes transmitted to remote user')
l2TPLinkStatusRxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1509, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2TPLinkStatusRxPackets.setStatus('current')
if mibBuilder.loadTexts: l2TPLinkStatusRxPackets.setDescription('Number of packets received from remote user')
l2TPLinkStatusRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1509, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2TPLinkStatusRxBytes.setStatus('current')
if mibBuilder.loadTexts: l2TPLinkStatusRxBytes.setDescription('Number of bytes received from remote user')
l2TPLinkStatusL2TPTermationCause = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1509, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2TPLinkStatusL2TPTermationCause.setStatus('current')
if mibBuilder.loadTexts: l2TPLinkStatusL2TPTermationCause.setDescription('L2TP termination cause')
l2TPLogEntryTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1510), )
if mibBuilder.loadTexts: l2TPLogEntryTable.setStatus('current')
if mibBuilder.loadTexts: l2TPLogEntryTable.setDescription('Layer-2 Tunneling Protocol Log Entry Information.')
l2TPLogEntryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1510, 1), ).setIndexNames((0, "APTIS-MONITOR-MIB", "l2TPLogEntryLocalID"), (0, "APTIS-MONITOR-MIB", "l2TPLogEntryIndex"))
if mibBuilder.loadTexts: l2TPLogEntryEntry.setStatus('current')
if mibBuilder.loadTexts: l2TPLogEntryEntry.setDescription('This is the structure of entries in the l2TPLogEntryTable.')
l2TPLogEntryLocalID = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1510, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2TPLogEntryLocalID.setStatus('current')
if mibBuilder.loadTexts: l2TPLogEntryLocalID.setDescription('Local ID for this tunnel')
l2TPLogEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1510, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2TPLogEntryIndex.setStatus('current')
if mibBuilder.loadTexts: l2TPLogEntryIndex.setDescription('Log entry index')
l2TPLogEntryMinIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1510, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2TPLogEntryMinIndex.setStatus('current')
if mibBuilder.loadTexts: l2TPLogEntryMinIndex.setDescription('Index of oldest event available')
l2TPLogEntryMaxIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1510, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2TPLogEntryMaxIndex.setStatus('current')
if mibBuilder.loadTexts: l2TPLogEntryMaxIndex.setDescription('Index of newest event available')
l2TPLogEntryUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1510, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2TPLogEntryUpTime.setStatus('current')
if mibBuilder.loadTexts: l2TPLogEntryUpTime.setDescription('Time this tunnel has been active')
l2TPLogEntryEntryText = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1510, 1, 21), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2TPLogEntryEntryText.setStatus('current')
if mibBuilder.loadTexts: l2TPLogEntryEntryText.setDescription('Log entry text.')
mamLogEntryTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1402), )
if mibBuilder.loadTexts: mamLogEntryTable.setStatus('current')
if mibBuilder.loadTexts: mamLogEntryTable.setDescription('MAM Log Table.')
mamLogEntryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1402, 1), ).setIndexNames((0, "APTIS-MONITOR-MIB", "mamLogEntryIndex"))
if mibBuilder.loadTexts: mamLogEntryEntry.setStatus('current')
if mibBuilder.loadTexts: mamLogEntryEntry.setDescription('This is the structure of entries in the mamLogEntryTable.')
mamLogEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1402, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mamLogEntryIndex.setStatus('current')
if mibBuilder.loadTexts: mamLogEntryIndex.setDescription('Log entry index')
mamLogEntryMinIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1402, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mamLogEntryMinIndex.setStatus('current')
if mibBuilder.loadTexts: mamLogEntryMinIndex.setDescription('Index of oldest event available')
mamLogEntryMaxIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1402, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mamLogEntryMaxIndex.setStatus('current')
if mibBuilder.loadTexts: mamLogEntryMaxIndex.setDescription('Index of newest event available')
mamLogEntryEntryText = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1402, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mamLogEntryEntryText.setStatus('current')
if mibBuilder.loadTexts: mamLogEntryEntryText.setDescription('Log entry text.')
modemStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1422), )
if mibBuilder.loadTexts: modemStatsTable.setStatus('current')
if mibBuilder.loadTexts: modemStatsTable.setDescription('Modem stats table.')
modemStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1422, 1), ).setIndexNames((0, "APTIS-MONITOR-MIB", "modemStatsSlot"), (0, "APTIS-MONITOR-MIB", "modemStatsModemIndex"))
if mibBuilder.loadTexts: modemStatsEntry.setStatus('current')
if mibBuilder.loadTexts: modemStatsEntry.setDescription('This is the structure of entries in the modemStatsTable.')
modemStatsState = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1422, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("disabled", 1), ("noDownload", 2), ("dead", 3), ("takenOut", 4), ("idle", 5), ("active", 6), ("downloading", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemStatsState.setStatus('current')
if mibBuilder.loadTexts: modemStatsState.setDescription("Modem's current state.")
modemStatsSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1422, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 18))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemStatsSlot.setStatus('current')
if mibBuilder.loadTexts: modemStatsSlot.setDescription('The slot that contains this modem')
modemStatsIOP = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1422, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemStatsIOP.setStatus('current')
if mibBuilder.loadTexts: modemStatsIOP.setDescription('The IOP on the card that controls this modem')
modemStatsDMM = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1422, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemStatsDMM.setStatus('current')
if mibBuilder.loadTexts: modemStatsDMM.setDescription('The DMM on the card that contains this modem')
modemStatsPack = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1422, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemStatsPack.setStatus('current')
if mibBuilder.loadTexts: modemStatsPack.setDescription('The pack on the DMM that contains this modem')
modemStatsModem = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1422, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemStatsModem.setStatus('current')
if mibBuilder.loadTexts: modemStatsModem.setDescription("The modem's number on the pack")
modemStatsCurrentSessionID = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1422, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemStatsCurrentSessionID.setStatus('current')
if mibBuilder.loadTexts: modemStatsCurrentSessionID.setDescription("If active, the ID of the modem's session")
modemStatsModemIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1422, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemStatsModemIndex.setStatus('current')
if mibBuilder.loadTexts: modemStatsModemIndex.setDescription('The modem number associated with this entry')
modemStatsRPI = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1422, 1, 101), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemStatsRPI.setStatus('current')
if mibBuilder.loadTexts: modemStatsRPI.setDescription("This modem's current rating (0..100). A modem's RPI reveals a modem's quality relative to other modems.")
modemStatsTotalCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1422, 1, 102), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemStatsTotalCalls.setStatus('current')
if mibBuilder.loadTexts: modemStatsTotalCalls.setDescription('The total number of calls assigned to this modem')
modemStatsConnectedCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1422, 1, 201), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemStatsConnectedCalls.setStatus('current')
if mibBuilder.loadTexts: modemStatsConnectedCalls.setDescription('The total numer of calls on which this modem has successfully negotiated a connection with the remote modem.')
modemStatsLast32Calls = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1422, 1, 202), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemStatsLast32Calls.setStatus('current')
if mibBuilder.loadTexts: modemStatsLast32Calls.setDescription('A bitmask indicating connection success (bit is set) or failure (bit is not set) on the last 32 calls. The lowest-order bit represents the most recent call, and the highest-order bit represents the oldest call.')
modemStatsConnectedWin = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1422, 1, 203), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemStatsConnectedWin.setStatus('current')
if mibBuilder.loadTexts: modemStatsConnectedWin.setDescription('The number of consecutive calls assigned to this modem that connected successfully. A value of 0 indicates that the last call did not connect successfully.')
modemStatsConnectedLose = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1422, 1, 204), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemStatsConnectedLose.setStatus('current')
if mibBuilder.loadTexts: modemStatsConnectedLose.setDescription('The number of consecutive calls assigned to this modem that did not connect successfully. A value of 0 indicates that the last call did connect successfully.')
modemStatsAuthCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1422, 1, 301), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemStatsAuthCalls.setStatus('current')
if mibBuilder.loadTexts: modemStatsAuthCalls.setDescription('The total numer of calls on which this modem has connected, and which have proceeded to the authentication stage. This does not mean that authentication was successful, just that it was attempted.')
modemStatsLast32Auth = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1422, 1, 302), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemStatsLast32Auth.setStatus('current')
if mibBuilder.loadTexts: modemStatsLast32Auth.setDescription('A bitmask indicating connection success (bit is set) or failure (bit is not set) on the last 32 calls reaching the authentication stage. The lowest-order bit represents the most recent call, and the highest-order bit represents the oldest call.')
modemStatsAuthWin = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1422, 1, 303), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemStatsAuthWin.setStatus('current')
if mibBuilder.loadTexts: modemStatsAuthWin.setDescription('The number of consecutive calls assigned to this modem that connected and reached the authentication stage. A value of 0 indicates that the last call did not reach the authentication stage.')
modemStatsAuthLose = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1422, 1, 304), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemStatsAuthLose.setStatus('current')
if mibBuilder.loadTexts: modemStatsAuthLose.setDescription('The number of consecutive calls assigned to this modem that did not reach the authentication stage. A value of 0 indicates that the last call did reach the authentication stage.')
modemStatsECCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1422, 1, 401), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemStatsECCalls.setStatus('current')
if mibBuilder.loadTexts: modemStatsECCalls.setDescription('The total numer of calls on which this modem has connected and negotiated an error correction protocol.')
modemStatsDCCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1422, 1, 402), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemStatsDCCalls.setStatus('current')
if mibBuilder.loadTexts: modemStatsDCCalls.setDescription('The total numer of calls on which this modem has connected and negotiated a data compression protocol.')
modemStatsK56Calls = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1422, 1, 403), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemStatsK56Calls.setStatus('current')
if mibBuilder.loadTexts: modemStatsK56Calls.setDescription('The total numer of calls on which this modem has connected and negotiated the K56 Flex modulation protocol.')
modemStatsV90Calls = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1422, 1, 404), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemStatsV90Calls.setStatus('current')
if mibBuilder.loadTexts: modemStatsV90Calls.setDescription('The total numer of calls on which this modem has connected and negotiated the V.90 modulation protocol.')
modemStatsV34Calls = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1422, 1, 405), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemStatsV34Calls.setStatus('current')
if mibBuilder.loadTexts: modemStatsV34Calls.setDescription('The total numer of calls on which this modem has connected and negotiated the V.34 modulation protocol.')
modemStatsV32Calls = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1422, 1, 406), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemStatsV32Calls.setStatus('current')
if mibBuilder.loadTexts: modemStatsV32Calls.setDescription('The total numer of calls on which this modem has connected and negotiated the V.32 or V.32bis modulation protocols.')
modemStatsStatsSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1422, 1, 501), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemStatsStatsSamples.setStatus('current')
if mibBuilder.loadTexts: modemStatsStatsSamples.setDescription('The total numer of calls on which call statistics were obtained. These statistics include minimum and maximum speeds, retrains and renegotiations, etc.')
modemStatsInitialTxSum = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1422, 1, 502), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemStatsInitialTxSum.setStatus('current')
if mibBuilder.loadTexts: modemStatsInitialTxSum.setDescription('The sum of the initial transmit speeds on all calls for which call statistics were obtained. This number can be divided by the ConnectedCalls value to obtain an average initial transmit speed.')
modemStatsMinTxSum = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1422, 1, 503), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemStatsMinTxSum.setStatus('current')
if mibBuilder.loadTexts: modemStatsMinTxSum.setDescription('The sum of the minimum transmit speeds on all calls for which call statistics were obtained. This number can be divided by the StatsSamples value to obtain an average minimum transmit speed.')
modemStatsMaxTxSum = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1422, 1, 504), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemStatsMaxTxSum.setStatus('current')
if mibBuilder.loadTexts: modemStatsMaxTxSum.setDescription('The sum of the maximum transmit speeds on all calls for which call statistics were obtained. This number can be divided by the StatsSamples value to obtain an average maximum transmit speed.')
modemStatsFinalTxSum = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1422, 1, 505), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemStatsFinalTxSum.setStatus('current')
if mibBuilder.loadTexts: modemStatsFinalTxSum.setDescription('The sum of the final transmit speeds on all calls for which call statistics were obtained. This number can be divided by the StatsSamples value to obtain an average final transmit speed.')
modemStatsMinTxSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1422, 1, 506), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemStatsMinTxSpeed.setStatus('current')
if mibBuilder.loadTexts: modemStatsMinTxSpeed.setDescription('The minimum transmit speed negotiated by this modem.')
modemStatsMaxTxSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1422, 1, 507), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemStatsMaxTxSpeed.setStatus('current')
if mibBuilder.loadTexts: modemStatsMaxTxSpeed.setDescription('The maximum transmit speed negotiated by this modem.')
modemStatsInitialRxSum = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1422, 1, 508), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemStatsInitialRxSum.setStatus('current')
if mibBuilder.loadTexts: modemStatsInitialRxSum.setDescription('The sum of the initial receive speeds on all calls for which call statistics were obtained. This number can be divided by the ConnectedCalls value to obtain an average initial receive speed.')
modemStatsMinRxSum = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1422, 1, 509), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemStatsMinRxSum.setStatus('current')
if mibBuilder.loadTexts: modemStatsMinRxSum.setDescription('The sum of the minimum receive speeds on all calls for which call statistics were obtained. This number can be divided by the StatsSamples value to obtain an average minimum receive speed.')
modemStatsMaxRxSum = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1422, 1, 510), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemStatsMaxRxSum.setStatus('current')
if mibBuilder.loadTexts: modemStatsMaxRxSum.setDescription('The sum of the maximum receive speeds on all calls for which call statistics were obtained. This number can be divided by the StatsSamples value to obtain an average maximum receive speed.')
modemStatsFinalRxSum = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1422, 1, 511), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemStatsFinalRxSum.setStatus('current')
if mibBuilder.loadTexts: modemStatsFinalRxSum.setDescription('The sum of the final receive speeds on all calls for which call statistics were obtained. This number can be divided by the StatsSamples value to obtain an average final receive speed.')
modemStatsMinRxSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1422, 1, 512), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemStatsMinRxSpeed.setStatus('current')
if mibBuilder.loadTexts: modemStatsMinRxSpeed.setDescription('The minimum receive speed negotiated by this modem.')
modemStatsMaxRxSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1422, 1, 513), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemStatsMaxRxSpeed.setStatus('current')
if mibBuilder.loadTexts: modemStatsMaxRxSpeed.setDescription('The maximum receive speed negotiated by this modem.')
modemStatsDownloadAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1422, 1, 1001), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemStatsDownloadAttempts.setStatus('current')
if mibBuilder.loadTexts: modemStatsDownloadAttempts.setDescription("Number of times code was downloaded to the modem's pack")
modemStatsDownloadSuccesses = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1422, 1, 1002), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemStatsDownloadSuccesses.setStatus('current')
if mibBuilder.loadTexts: modemStatsDownloadSuccesses.setDescription('Number of times code downloaded succeeded')
modemStatsResetFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1422, 1, 1003), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemStatsResetFailures.setStatus('current')
if mibBuilder.loadTexts: modemStatsResetFailures.setDescription('Number of times the modem failed to respond to commands')
modemStatsResetRevivals = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1422, 1, 1004), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemStatsResetRevivals.setStatus('current')
if mibBuilder.loadTexts: modemStatsResetRevivals.setDescription('Number of times the modem was revived from the non-responsive state')
modemStatsPackCrashes = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1422, 1, 1005), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemStatsPackCrashes.setStatus('current')
if mibBuilder.loadTexts: modemStatsPackCrashes.setDescription("Number of times the modem's pack seems to have crashed")
modemStatsPackRevivals = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1422, 1, 1006), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemStatsPackRevivals.setStatus('current')
if mibBuilder.loadTexts: modemStatsPackRevivals.setDescription("Number of times the modem's apparently-crashed pack was revived with a download")
modemCallStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423), )
if mibBuilder.loadTexts: modemCallStatsTable.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsTable.setDescription('Modem call stats table.')
modemCallStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1), ).setIndexNames((0, "APTIS-MONITOR-MIB", "modemCallStatsSlotIndex"), (0, "APTIS-MONITOR-MIB", "modemCallStatsModemIndex"))
if mibBuilder.loadTexts: modemCallStatsEntry.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsEntry.setDescription('This is the structure of entries in the modemCallStatsTable.')
modemCallStatsTxInitialSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsTxInitialSpeed.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsTxInitialSpeed.setDescription('Initial transmit speed in bits/second.')
modemCallStatsTxFinalSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsTxFinalSpeed.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsTxFinalSpeed.setDescription('Final transmit speed in bits/second.')
modemCallStatsTxMinSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsTxMinSpeed.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsTxMinSpeed.setDescription('Minimum transmit speed in bits/second.')
modemCallStatsTxMaxSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsTxMaxSpeed.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsTxMaxSpeed.setDescription('Maximum transmit speed in bits/second.')
modemCallStatsRxInitialSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsRxInitialSpeed.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsRxInitialSpeed.setDescription('Initial receive speed in bits/second.')
modemCallStatsRxFinalSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsRxFinalSpeed.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsRxFinalSpeed.setDescription('Final receive speed in bits/second.')
modemCallStatsRxMinSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsRxMinSpeed.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsRxMinSpeed.setDescription('Minimum receive speed in bits/second.')
modemCallStatsRxMaxSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsRxMaxSpeed.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsRxMaxSpeed.setDescription('Maximum receive speed in bits/second.')
modemCallStatsECProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsECProtocol.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsECProtocol.setDescription('Error-correction protocol negotiated.')
modemCallStatsDCProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsDCProtocol.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsDCProtocol.setDescription('Data Compression protocol negotiated.')
modemCallStatsModulationType = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsModulationType.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsModulationType.setDescription('Modulation protocol negotiated.')
modemCallStatsInitialModulationType = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsInitialModulationType.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsInitialModulationType.setDescription('Initial Modulation protocol.')
modemCallStatsSymbolRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsSymbolRate.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsSymbolRate.setDescription('Symbol rate.')
modemCallStatsTxCarrierFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsTxCarrierFrequency.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsTxCarrierFrequency.setDescription('Transmit carrier frequency.')
modemCallStatsRxCarrierFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsRxCarrierFrequency.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsRxCarrierFrequency.setDescription('Receive carrier frequency.')
modemCallStatsLastAGCGainValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsLastAGCGainValue.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsLastAGCGainValue.setDescription('Last AGC gain value.')
modemCallStatsMinAGCGainValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsMinAGCGainValue.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsMinAGCGainValue.setDescription('Minimum AGC gain value.')
modemCallStatsMaxAGCGainValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsMaxAGCGainValue.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsMaxAGCGainValue.setDescription('Maximum AGC gain value.')
modemCallStatsTxLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsTxLevel.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsTxLevel.setDescription("Transmit level in negative dB's.")
modemCallStatsTxLevelReduction = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsTxLevelReduction.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsTxLevelReduction.setDescription('Transmit level reduction.')
modemCallStatsLastEQMValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsLastEQMValue.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsLastEQMValue.setDescription('Last EQM value.')
modemCallStatsMinEQMValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsMinEQMValue.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsMinEQMValue.setDescription('Minimum EQM value.')
modemCallStatsMaxEQMValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsMaxEQMValue.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsMaxEQMValue.setDescription('Maximum EQM value.')
modemCallStatsEQMHits = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsEQMHits.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsEQMHits.setDescription('Number of times EQM values became larger than 127.')
modemCallStatsEQMSumLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsEQMSumLow.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsEQMSumLow.setDescription('Low order byte of the EQM sum.')
modemCallStatsEQMSumMiddle = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsEQMSumMiddle.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsEQMSumMiddle.setDescription('Middle order bytes of the EQM sum.')
modemCallStatsEQMSumHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsEQMSumHigh.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsEQMSumHigh.setDescription('High order byte of the EQM sum.')
modemCallStatsEQM1Second = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsEQM1Second.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsEQM1Second.setDescription('EQM 1 second before &v2 issued or hangup.')
modemCallStatsEQM2Seconds = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsEQM2Seconds.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsEQM2Seconds.setDescription('EQM 2 seconds before &v2 issued or hangup.')
modemCallStatsEQM3Seconds = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsEQM3Seconds.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsEQM3Seconds.setDescription('EQM 3 seconds before &v2 issued or hangup.')
modemCallStatsEQM4Seconds = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsEQM4Seconds.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsEQM4Seconds.setDescription('EQM 4 seconds before &v2 issued or hangup.')
modemCallStatsEQM5Seconds = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsEQM5Seconds.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsEQM5Seconds.setDescription('EQM 5 seconds before &v2 issued or hangup.')
modemCallStatsEQM6Seconds = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsEQM6Seconds.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsEQM6Seconds.setDescription('EQM 6 seconds before &v2 issued or hangup.')
modemCallStatsEQM7Seconds = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsEQM7Seconds.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsEQM7Seconds.setDescription('EQM 7 seconds before &v2 issued or hangup.')
modemCallStatsEQM8Seconds = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsEQM8Seconds.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsEQM8Seconds.setDescription('EQM 8 seconds before &v2 issued or hangup.')
modemCallStatsEQM9Seconds = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsEQM9Seconds.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsEQM9Seconds.setDescription('EQM 9 seconds before &v2 issued or hangup.')
modemCallStatsEQM10Seconds = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsEQM10Seconds.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsEQM10Seconds.setDescription('EQM 10 seconds before &v2 issued or hangup.')
modemCallStatsSNRRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 38), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsSNRRatio.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsSNRRatio.setDescription('SNR ratio.')
modemCallStatsMinSNRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsMinSNRValue.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsMinSNRValue.setDescription('Minimum SNR value.')
modemCallStatsMaxSNRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsMaxSNRValue.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsMaxSNRValue.setDescription('Maximum SNR value.')
modemCallStatsLocalRetrains = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsLocalRetrains.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsLocalRetrains.setDescription('Number of local retrains.')
modemCallStatsRemoteRetrains = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsRemoteRetrains.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsRemoteRetrains.setDescription('Number of remote retrains.')
modemCallStatsLocalRateRenegs = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsLocalRateRenegs.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsLocalRateRenegs.setDescription('Number of local rate renegotiations.')
modemCallStatsRemoteRateRenegs = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsRemoteRateRenegs.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsRemoteRateRenegs.setDescription('Number of remote rate renegotiations.')
modemCallStatsTxNonlinearEncoding = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsTxNonlinearEncoding.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsTxNonlinearEncoding.setDescription('Whether non-linear transmit encoding was on.')
modemCallStatsRxNonlinearEncoding = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsRxNonlinearEncoding.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsRxNonlinearEncoding.setDescription('Whether non-linear receive encoding was on.')
modemCallStatsTxPrecoding = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 47), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsTxPrecoding.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsTxPrecoding.setDescription('Whether transmit precoding was on.')
modemCallStatsRxPrecoding = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 48), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsRxPrecoding.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsRxPrecoding.setDescription('Whether receive precoding was on.')
modemCallStatsTxShaping = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 49), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsTxShaping.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsTxShaping.setDescription('Whether transmit shaping was on.')
modemCallStatsRxShaping = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsRxShaping.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsRxShaping.setDescription('Whether receive shaping was on.')
modemCallStatsTrellisMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 51), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsTrellisMapping.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsTrellisMapping.setDescription('Rrellis mapping type.')
modemCallStatsPreEmphasis = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 52), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsPreEmphasis.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsPreEmphasis.setDescription('Pre-emphasis filter chosen.')
modemCallStatsUpperBandEdge = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 53), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsUpperBandEdge.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsUpperBandEdge.setDescription('Upper band edge.')
modemCallStatsLowerBandEdge = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 54), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsLowerBandEdge.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsLowerBandEdge.setDescription('Lower band edge.')
modemCallStatsRTTHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 55), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsRTTHigh.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsRTTHigh.setDescription('Round trip delay, high byte.')
modemCallStatsRTTLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 56), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsRTTLow.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsRTTLow.setDescription('Round trip delay, low byte.')
modemCallStatsInfo0SequenceHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 57), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsInfo0SequenceHigh.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsInfo0SequenceHigh.setDescription('Info 0 sequence, high byte.')
modemCallStatsInfo0SequenceLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 58), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsInfo0SequenceLow.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsInfo0SequenceLow.setDescription('Info 0 sequence, low byte.')
modemCallStatsRxMPSequenceByte1Low = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 59), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsRxMPSequenceByte1Low.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsRxMPSequenceByte1Low.setDescription('RX MP sequence byte 1, low byte.')
modemCallStatsRxMPSequenceByte1High = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 60), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsRxMPSequenceByte1High.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsRxMPSequenceByte1High.setDescription('RX MP sequence byte 1, high byte.')
modemCallStatsRxMPSequenceByte2Low = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 61), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsRxMPSequenceByte2Low.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsRxMPSequenceByte2Low.setDescription('RX MP sequence byte 2, low byte.')
modemCallStatsRxMPSequenceByte2High = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 62), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsRxMPSequenceByte2High.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsRxMPSequenceByte2High.setDescription('RX MP sequence byte 2, high byte.')
modemCallStatsHighestTxState = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 63), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsHighestTxState.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsHighestTxState.setDescription('Highest transmit state.')
modemCallStatsHighestRxState = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 64), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsHighestRxState.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsHighestRxState.setDescription('Highest receive state.')
modemCallStatsLastTransmitState = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 65), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsLastTransmitState.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsLastTransmitState.setDescription('Last transmit state.')
modemCallStatsLastReceiveState = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 66), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsLastReceiveState.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsLastReceiveState.setDescription('Last receive state.')
modemCallStatsConnectTimeHours = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 67), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsConnectTimeHours.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsConnectTimeHours.setDescription('Connection time, hours.')
modemCallStatsConnectTimeMinutes = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 68), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsConnectTimeMinutes.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsConnectTimeMinutes.setDescription('Connection time, minutes.')
modemCallStatsConnectTimeSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 69), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsConnectTimeSeconds.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsConnectTimeSeconds.setDescription('Connection time, seconds.')
modemCallStatsAutoGainAmplitude = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 70), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsAutoGainAmplitude.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsAutoGainAmplitude.setDescription('Auto gain amplitude.')
modemCallStatsAutoGainAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 71), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsAutoGainAttenuation.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsAutoGainAttenuation.setDescription('Auto gain attenuation.')
modemCallStatsDigitalPadDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 72), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsDigitalPadDetected.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsDigitalPadDetected.setDescription('Digital pad detected.')
modemCallStatsRBSPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 73), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsRBSPattern.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsRBSPattern.setDescription('RBS Pattern.')
modemCallStatsRBSRateDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 74), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsRBSRateDrop.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsRBSRateDrop.setDescription('Rate drop due to RBS.')
modemCallStatsMaxTxRetransmissions = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 75), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsMaxTxRetransmissions.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsMaxTxRetransmissions.setDescription('Max number of retransmissions for one frame.')
modemCallStatsTotalTxRetransmissions = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 76), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsTotalTxRetransmissions.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsTotalTxRetransmissions.setDescription('Total number of retransmissions during connection.')
modemCallStatsNumberOfLAPMREJSReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 77), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsNumberOfLAPMREJSReceived.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsNumberOfLAPMREJSReceived.setDescription('Number of LAPM REJ frames received.')
modemCallStatsNumberOfLAPMREJSTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 78), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsNumberOfLAPMREJSTransmitted.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsNumberOfLAPMREJSTransmitted.setDescription('Number of LAPM REJ frames transmitted.')
modemCallStatsNumberOfTXBlocksHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 79), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsNumberOfTXBlocksHigh.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsNumberOfTXBlocksHigh.setDescription('Number of TX blocks, high byte.')
modemCallStatsNumberOfTXBlocksLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 80), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsNumberOfTXBlocksLow.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsNumberOfTXBlocksLow.setDescription('Number of TX blocks, low byte.')
modemCallStatsNumberOfRXBlocksHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 81), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsNumberOfRXBlocksHigh.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsNumberOfRXBlocksHigh.setDescription('Number of RX blocks, high byte.')
modemCallStatsNumberOfRXBlocksLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 82), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsNumberOfRXBlocksLow.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsNumberOfRXBlocksLow.setDescription('Number of RX blocks, low byte.')
modemCallStatsNumberOfTXCharsMSB = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 83), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsNumberOfTXCharsMSB.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsNumberOfTXCharsMSB.setDescription('Number of TX characters, high byte.')
modemCallStatsNumberOfTXChars2ndByte = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 84), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsNumberOfTXChars2ndByte.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsNumberOfTXChars2ndByte.setDescription('Number of TX characters, 2nd byte.')
modemCallStatsNumberOfTXChars3rdByte = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 85), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsNumberOfTXChars3rdByte.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsNumberOfTXChars3rdByte.setDescription('Number of TX characters, 3rd byte.')
modemCallStatsNumberOfTXCharsLSB = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 86), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsNumberOfTXCharsLSB.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsNumberOfTXCharsLSB.setDescription('Number of TX characters, low byte.')
modemCallStatsNumberOfRXCharsMSB = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 87), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsNumberOfRXCharsMSB.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsNumberOfRXCharsMSB.setDescription('Number of RX characters, high byte.')
modemCallStatsNumberOfRXChars2ndByte = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 88), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsNumberOfRXChars2ndByte.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsNumberOfRXChars2ndByte.setDescription('Number of RX characters, 2nd byte.')
modemCallStatsNumberOfRXChars3rdByte = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 89), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsNumberOfRXChars3rdByte.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsNumberOfRXChars3rdByte.setDescription('Number of RX characters, 3rd byte.')
modemCallStatsNumberOfRXCharsLSB = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 90), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsNumberOfRXCharsLSB.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsNumberOfRXCharsLSB.setDescription('Number of RX characters, low byte.')
modemCallStatsDisconnectReason = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 91), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsDisconnectReason.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsDisconnectReason.setDescription('Disconnect reason.')
modemCallStatsRetrainReason = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 92), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsRetrainReason.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsRetrainReason.setDescription('Reason for retrain or rate renegotiation.')
modemCallStatsAbortCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 93), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsAbortCode.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsAbortCode.setDescription('Abort code.')
modemCallStatsK56Status = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 94), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsK56Status.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsK56Status.setDescription('K56flex status.')
modemCallStatsV8ManufacturerID = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 95), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsV8ManufacturerID.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsV8ManufacturerID.setDescription('Manufacturer id (V.8bis octet 13).')
modemCallStatsV8LicenseeCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 96), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsV8LicenseeCode.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsV8LicenseeCode.setDescription('Licensee code (V.8bis octet 14).')
modemCallStatsV8Capabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 97), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsV8Capabilities.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsV8Capabilities.setDescription("Manufacturer's product capabilities (V.8bis octet 15).")
modemCallStatsV8FlexVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 98), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsV8FlexVersion.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsV8FlexVersion.setDescription('Flex version number (V.8bis octet 16).')
modemCallStatsV8DataPumpRev = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 99), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsV8DataPumpRev.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsV8DataPumpRev.setDescription("CONEXANT's data pump revision number (V.8bis octet 17).")
modemCallStatsV8ControllerRev = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 100), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsV8ControllerRev.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsV8ControllerRev.setDescription("CONEXANT's controller revision (V.8bis octet 18).")
modemCallStatsV8Progress = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 101), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsV8Progress.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsV8Progress.setDescription('Progress.')
modemCallStatsV90DigitalPadHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 102), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsV90DigitalPadHigh.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsV90DigitalPadHigh.setDescription('V.90 Digital pad value, high byte.')
modemCallStatsV90DigitalPadLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 103), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsV90DigitalPadLow.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsV90DigitalPadLow.setDescription('V.90 Digital pad value, low byte.')
modemCallStatsV90IMDRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 104), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsV90IMDRatio.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsV90IMDRatio.setDescription('V.90 IMD ratio.')
modemCallStatsHandshakeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 105), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsHandshakeTime.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsHandshakeTime.setDescription('Handshake time.')
modemCallStatsNumberOfHandshakeRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 106), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsNumberOfHandshakeRetries.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsNumberOfHandshakeRetries.setDescription('Number of handshake retries.')
modemCallStatsECState1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 107), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsECState1.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsECState1.setDescription('EC state 1.')
modemCallStatsECState2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 108), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsECState2.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsECState2.setDescription('EC state 2.')
modemCallStatsFirmwareState = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 109), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsFirmwareState.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsFirmwareState.setDescription('Firmware state.')
modemCallStatsHighAddrOfMEMACCFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 110), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsHighAddrOfMEMACCFailure.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsHighAddrOfMEMACCFailure.setDescription('Memory address, high byte.')
modemCallStatsLowAddrOfMEMACCFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 111), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsLowAddrOfMEMACCFailure.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsLowAddrOfMEMACCFailure.setDescription('Low address of MEMACC failure.')
modemCallStatsMinutesSinceRetrain = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 112), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsMinutesSinceRetrain.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsMinutesSinceRetrain.setDescription('Number of minutes since last retrain or rate renogiation.')
modemCallStatsWAStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 113), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsWAStatus.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsWAStatus.setDescription('WA status.')
modemCallStatsRoundTripTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 114), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsRoundTripTime.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsRoundTripTime.setDescription('Round trip time.')
modemCallStatsDataIsValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 201), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsDataIsValid.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsDataIsValid.setDescription('Non-zero if data is valid; zero if data is not valid.')
modemCallStatsSessionID = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 202), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsSessionID.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsSessionID.setDescription('Session ID associated with this data.')
modemCallStatsSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 203), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsSlotIndex.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsSlotIndex.setDescription('The physical slot number in which this modem resides.')
modemCallStatsModemIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1423, 1, 204), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCallStatsModemIndex.setStatus('current')
if mibBuilder.loadTexts: modemCallStatsModemIndex.setDescription('The modem number associated with these call statistics.')
modemSummaryStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1424), )
if mibBuilder.loadTexts: modemSummaryStatsTable.setStatus('current')
if mibBuilder.loadTexts: modemSummaryStatsTable.setDescription('Modem stats summary table.')
modemSummaryStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1424, 1), ).setIndexNames((0, "APTIS-MONITOR-MIB", "modemSummaryStatsSlotNumber"))
if mibBuilder.loadTexts: modemSummaryStatsEntry.setStatus('current')
if mibBuilder.loadTexts: modemSummaryStatsEntry.setDescription('This is the structure of entries in the modemSummaryStatsTable.')
modemSummaryStatsSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1424, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemSummaryStatsSlotNumber.setStatus('current')
if mibBuilder.loadTexts: modemSummaryStatsSlotNumber.setDescription('Number of slot reporting summary stats')
modemSummaryStatsModemCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1424, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemSummaryStatsModemCount.setStatus('current')
if mibBuilder.loadTexts: modemSummaryStatsModemCount.setDescription('Total number of modems found on this card')
modemSummaryStatsDisabledCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1424, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemSummaryStatsDisabledCount.setStatus('current')
if mibBuilder.loadTexts: modemSummaryStatsDisabledCount.setDescription('Total number of modems on this card that are disabled by config')
modemSummaryStatsNoDownloadCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1424, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemSummaryStatsNoDownloadCount.setStatus('current')
if mibBuilder.loadTexts: modemSummaryStatsNoDownloadCount.setDescription('Total number of modems on this card that failed download')
modemSummaryStatsDeadCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1424, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemSummaryStatsDeadCount.setStatus('current')
if mibBuilder.loadTexts: modemSummaryStatsDeadCount.setDescription('Total number of modems on this card that are not responding to commands')
modemSummaryStatsRemovedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1424, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemSummaryStatsRemovedCount.setStatus('current')
if mibBuilder.loadTexts: modemSummaryStatsRemovedCount.setDescription('Total number of modems on this card that were taken out of service due to excessive failures')
modemSummaryStatsIdleCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1424, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemSummaryStatsIdleCount.setStatus('current')
if mibBuilder.loadTexts: modemSummaryStatsIdleCount.setDescription('Total number of modems on this card that are functional, but not in use')
modemSummaryStatsActiveCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1424, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemSummaryStatsActiveCount.setStatus('current')
if mibBuilder.loadTexts: modemSummaryStatsActiveCount.setDescription('Total number of modems on this card that are functional and in use')
modemSummaryStatsDownloadingCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1424, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemSummaryStatsDownloadingCount.setStatus('current')
if mibBuilder.loadTexts: modemSummaryStatsDownloadingCount.setDescription('Total number of modems on this card that are currently being downloaded')
modemSummaryStatsTotalCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1424, 1, 101), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemSummaryStatsTotalCalls.setStatus('current')
if mibBuilder.loadTexts: modemSummaryStatsTotalCalls.setDescription('The total number of calls assigned to modems in this slot')
modemSummaryStatsConnectedCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1424, 1, 102), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemSummaryStatsConnectedCalls.setStatus('current')
if mibBuilder.loadTexts: modemSummaryStatsConnectedCalls.setDescription('Total number of calls that have connected in this slot.')
modemSummaryStatsAuthCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1424, 1, 103), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemSummaryStatsAuthCalls.setStatus('current')
if mibBuilder.loadTexts: modemSummaryStatsAuthCalls.setDescription('Total number of calls that have reached the authentication stage in this slot.')
modemSummaryStatsECCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1424, 1, 104), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemSummaryStatsECCalls.setStatus('current')
if mibBuilder.loadTexts: modemSummaryStatsECCalls.setDescription('Total number of calls that negotiated error correction in this slot.')
modemSummaryStatsDCCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1424, 1, 105), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemSummaryStatsDCCalls.setStatus('current')
if mibBuilder.loadTexts: modemSummaryStatsDCCalls.setDescription('Total number of calls that negotiated data compression in this slot.')
modemSummaryStatsK56Calls = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1424, 1, 106), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemSummaryStatsK56Calls.setStatus('current')
if mibBuilder.loadTexts: modemSummaryStatsK56Calls.setDescription('Total number of calls that have connected with K56 Flex modulation in this slot.')
modemSummaryStatsV90Calls = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1424, 1, 107), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemSummaryStatsV90Calls.setStatus('current')
if mibBuilder.loadTexts: modemSummaryStatsV90Calls.setDescription('Total number of calls that have connected with V.90 modulation in this slot.')
modemSummaryStatsV34Calls = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1424, 1, 108), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemSummaryStatsV34Calls.setStatus('current')
if mibBuilder.loadTexts: modemSummaryStatsV34Calls.setDescription('Total number of calls that have connected with V.34 modulation in this slot.')
modemSummaryStatsV32Calls = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1424, 1, 109), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemSummaryStatsV32Calls.setStatus('current')
if mibBuilder.loadTexts: modemSummaryStatsV32Calls.setDescription('Total number of calls that have connected with V.32 or V.32bis modulation in this slot.')
modemSummaryStatsReuseSuspectModems = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1424, 1, 201), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemSummaryStatsReuseSuspectModems.setStatus('current')
if mibBuilder.loadTexts: modemSummaryStatsReuseSuspectModems.setDescription('Specifies whether suspect modems will be used')
modemSummaryStatsUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1424, 1, 301), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemSummaryStatsUpTime.setStatus('current')
if mibBuilder.loadTexts: modemSummaryStatsUpTime.setDescription('The time (in seconds) this card has been active')
modemSummaryStatsMaximumCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1424, 1, 401), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemSummaryStatsMaximumCalls.setStatus('current')
if mibBuilder.loadTexts: modemSummaryStatsMaximumCalls.setDescription('The maximum number of simultaneous calls on the modems in this slot.')
modemIntervalStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1425), )
if mibBuilder.loadTexts: modemIntervalStatsTable.setStatus('current')
if mibBuilder.loadTexts: modemIntervalStatsTable.setDescription('Modem interval stats table.')
modemIntervalStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1425, 1), ).setIndexNames((0, "APTIS-MONITOR-MIB", "modemIntervalStatsIndex"))
if mibBuilder.loadTexts: modemIntervalStatsEntry.setStatus('current')
if mibBuilder.loadTexts: modemIntervalStatsEntry.setDescription('This is the structure of entries in the modemIntervalStatsTable.')
modemIntervalStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1425, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemIntervalStatsIndex.setStatus('current')
if mibBuilder.loadTexts: modemIntervalStatsIndex.setDescription('Index of this entry')
modemIntervalStatsStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1425, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemIntervalStatsStartTime.setStatus('current')
if mibBuilder.loadTexts: modemIntervalStatsStartTime.setDescription('Time (in seconds) of start of reporting interval')
modemIntervalStatsStopTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1425, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemIntervalStatsStopTime.setStatus('current')
if mibBuilder.loadTexts: modemIntervalStatsStopTime.setDescription('Time (in seconds) of start of reporting interval')
modemIntervalStatsModemCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1425, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemIntervalStatsModemCount.setStatus('current')
if mibBuilder.loadTexts: modemIntervalStatsModemCount.setDescription('Total number of modems found in the system')
modemIntervalStatsDisabledCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1425, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemIntervalStatsDisabledCount.setStatus('current')
if mibBuilder.loadTexts: modemIntervalStatsDisabledCount.setDescription('Total number of modems in the system that are disabled by config')
modemIntervalStatsNoDownloadCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1425, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemIntervalStatsNoDownloadCount.setStatus('current')
if mibBuilder.loadTexts: modemIntervalStatsNoDownloadCount.setDescription('Total number of modems in the system that failed download')
modemIntervalStatsDeadCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1425, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemIntervalStatsDeadCount.setStatus('current')
if mibBuilder.loadTexts: modemIntervalStatsDeadCount.setDescription('Total number of modems in the system that are not responding to commands')
modemIntervalStatsRemovedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1425, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemIntervalStatsRemovedCount.setStatus('current')
if mibBuilder.loadTexts: modemIntervalStatsRemovedCount.setDescription('Total number of modems in the system were taken out of service due to excessive failures')
modemIntervalStatsIdleCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1425, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemIntervalStatsIdleCount.setStatus('current')
if mibBuilder.loadTexts: modemIntervalStatsIdleCount.setDescription('Total number of modems in the system that are functional, but not in use')
modemIntervalStatsActiveCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1425, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemIntervalStatsActiveCount.setStatus('current')
if mibBuilder.loadTexts: modemIntervalStatsActiveCount.setDescription('Total number of modems in the system that are functional and in use')
modemIntervalStatsDownloadingCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1425, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemIntervalStatsDownloadingCount.setStatus('current')
if mibBuilder.loadTexts: modemIntervalStatsDownloadingCount.setDescription('Total number of modems in the system that are currently being downloaded')
modemIntervalStatsTotalCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1425, 1, 101), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemIntervalStatsTotalCalls.setStatus('current')
if mibBuilder.loadTexts: modemIntervalStatsTotalCalls.setDescription('The total number of calls assigned to modems in the system')
modemIntervalStatsConnectedCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1425, 1, 102), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemIntervalStatsConnectedCalls.setStatus('current')
if mibBuilder.loadTexts: modemIntervalStatsConnectedCalls.setDescription('Total number of calls that have connected in the system')
modemIntervalStatsAuthCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1425, 1, 103), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemIntervalStatsAuthCalls.setStatus('current')
if mibBuilder.loadTexts: modemIntervalStatsAuthCalls.setDescription('Total number of calls that have reached the authentication stage in the system.')
modemIntervalStatsECCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1425, 1, 104), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemIntervalStatsECCalls.setStatus('current')
if mibBuilder.loadTexts: modemIntervalStatsECCalls.setDescription('Total number of calls that negotiated error correction in the system.')
modemIntervalStatsDCCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1425, 1, 105), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemIntervalStatsDCCalls.setStatus('current')
if mibBuilder.loadTexts: modemIntervalStatsDCCalls.setDescription('Total number of calls that negotiated data compression in the system')
modemIntervalStatsK56Calls = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1425, 1, 106), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemIntervalStatsK56Calls.setStatus('current')
if mibBuilder.loadTexts: modemIntervalStatsK56Calls.setDescription('Total number of calls that have connected with K56 Flex modulation in the system.')
modemIntervalStatsV90Calls = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1425, 1, 107), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemIntervalStatsV90Calls.setStatus('current')
if mibBuilder.loadTexts: modemIntervalStatsV90Calls.setDescription('Total number of calls that have connected with V.90 modulation in the system.')
modemIntervalStatsV34Calls = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1425, 1, 108), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemIntervalStatsV34Calls.setStatus('current')
if mibBuilder.loadTexts: modemIntervalStatsV34Calls.setDescription('Total number of calls that have connected with V.34 modulation in the system.')
modemIntervalStatsV32Calls = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1425, 1, 109), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemIntervalStatsV32Calls.setStatus('current')
if mibBuilder.loadTexts: modemIntervalStatsV32Calls.setDescription('Total number of calls that have connected with V.32 or V.32bis modulation in the system.')
modemIntervalStatsOverallTotalCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1425, 1, 201), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemIntervalStatsOverallTotalCalls.setStatus('current')
if mibBuilder.loadTexts: modemIntervalStatsOverallTotalCalls.setDescription('The total number of calls assigned to modems in the system')
modemIntervalStatsOverallConnectedCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1425, 1, 202), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemIntervalStatsOverallConnectedCalls.setStatus('current')
if mibBuilder.loadTexts: modemIntervalStatsOverallConnectedCalls.setDescription('Total number of calls that have connected in the system')
modemIntervalStatsOverallAuthCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1425, 1, 203), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemIntervalStatsOverallAuthCalls.setStatus('current')
if mibBuilder.loadTexts: modemIntervalStatsOverallAuthCalls.setDescription('Total number of calls that have reached the authentication stage in the system.')
modemSessionStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1426), )
if mibBuilder.loadTexts: modemSessionStatsTable.setStatus('current')
if mibBuilder.loadTexts: modemSessionStatsTable.setDescription('Modem session stats table.')
modemSessionStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1426, 1), ).setIndexNames((0, "APTIS-MONITOR-MIB", "modemSessionStatsSlotNumber"), (0, "APTIS-MONITOR-MIB", "modemSessionStatsModemIndex"))
if mibBuilder.loadTexts: modemSessionStatsEntry.setStatus('current')
if mibBuilder.loadTexts: modemSessionStatsEntry.setDescription('This is the structure of entries in the modemSessionStatsTable.')
modemSessionStatsDataValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1426, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("valid", 0), ("notCaptured", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemSessionStatsDataValidity.setStatus('current')
if mibBuilder.loadTexts: modemSessionStatsDataValidity.setDescription('Specifies whether data is valid')
modemSessionStatsSessionID = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1426, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemSessionStatsSessionID.setStatus('current')
if mibBuilder.loadTexts: modemSessionStatsSessionID.setDescription('Session ID associated with this data')
modemSessionStatsSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1426, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemSessionStatsSlotNumber.setStatus('current')
if mibBuilder.loadTexts: modemSessionStatsSlotNumber.setDescription('Modem slot number')
modemSessionStatsIOPNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1426, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemSessionStatsIOPNumber.setStatus('current')
if mibBuilder.loadTexts: modemSessionStatsIOPNumber.setDescription("Modem's IOP number")
modemSessionStatsDMMNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1426, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemSessionStatsDMMNumber.setStatus('current')
if mibBuilder.loadTexts: modemSessionStatsDMMNumber.setDescription("Modem's DMM number")
modemSessionStatsPackNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1426, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemSessionStatsPackNumber.setStatus('current')
if mibBuilder.loadTexts: modemSessionStatsPackNumber.setDescription("Modem's Pack number")
modemSessionStatsModemNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1426, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemSessionStatsModemNumber.setStatus('current')
if mibBuilder.loadTexts: modemSessionStatsModemNumber.setDescription("Modem's index number")
modemSessionStatsModemIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1426, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemSessionStatsModemIndex.setStatus('current')
if mibBuilder.loadTexts: modemSessionStatsModemIndex.setDescription("Modem's system-wide number")
modemSessionStatsTDMStream = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1426, 1, 101), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemSessionStatsTDMStream.setStatus('current')
if mibBuilder.loadTexts: modemSessionStatsTDMStream.setDescription('TDM stream used for this session')
modemSessionStatsTDMSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1426, 1, 102), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemSessionStatsTDMSlot.setStatus('current')
if mibBuilder.loadTexts: modemSessionStatsTDMSlot.setDescription('TDM slot used for this session')
modemSessionStatsInitialTxSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1426, 1, 201), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemSessionStatsInitialTxSpeed.setStatus('current')
if mibBuilder.loadTexts: modemSessionStatsInitialTxSpeed.setDescription('Initial transmit speed')
modemSessionStatsInitialRxSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1426, 1, 202), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemSessionStatsInitialRxSpeed.setStatus('current')
if mibBuilder.loadTexts: modemSessionStatsInitialRxSpeed.setDescription('Initial transmit speed')
modemSessionStatsConnectString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1426, 1, 301), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemSessionStatsConnectString.setStatus('current')
if mibBuilder.loadTexts: modemSessionStatsConnectString.setDescription('CONNECT string from this session')
modemSessionStatsAmpV2String = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1426, 1, 401), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemSessionStatsAmpV2String.setStatus('current')
if mibBuilder.loadTexts: modemSessionStatsAmpV2String.setDescription('&V2 string from this session')
modemSessionStats2Table = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1427), )
if mibBuilder.loadTexts: modemSessionStats2Table.setStatus('current')
if mibBuilder.loadTexts: modemSessionStats2Table.setDescription('Extended modem session stats table.')
modemSessionStats2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1427, 1), ).setIndexNames((0, "APTIS-MONITOR-MIB", "modemSessionStats2SessionID"))
if mibBuilder.loadTexts: modemSessionStats2Entry.setStatus('current')
if mibBuilder.loadTexts: modemSessionStats2Entry.setDescription('This is the structure of entries in the modemSessionStats2Table.')
modemSessionStats2DataValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1427, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("valid", 0), ("notCaptured", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemSessionStats2DataValidity.setStatus('current')
if mibBuilder.loadTexts: modemSessionStats2DataValidity.setDescription('Specifies whether data is valid')
modemSessionStats2SessionID = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1427, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemSessionStats2SessionID.setStatus('current')
if mibBuilder.loadTexts: modemSessionStats2SessionID.setDescription('Session ID associated with this data')
modemSessionStats2SlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1427, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemSessionStats2SlotNumber.setStatus('current')
if mibBuilder.loadTexts: modemSessionStats2SlotNumber.setDescription('Modem slot number')
modemSessionStats2IOPNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1427, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemSessionStats2IOPNumber.setStatus('current')
if mibBuilder.loadTexts: modemSessionStats2IOPNumber.setDescription("Modem's IOP number")
modemSessionStats2DMMNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1427, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemSessionStats2DMMNumber.setStatus('current')
if mibBuilder.loadTexts: modemSessionStats2DMMNumber.setDescription("Modem's DMM number")
modemSessionStats2PackNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1427, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemSessionStats2PackNumber.setStatus('current')
if mibBuilder.loadTexts: modemSessionStats2PackNumber.setDescription("Modem's Pack number")
modemSessionStats2ModemNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1427, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemSessionStats2ModemNumber.setStatus('current')
if mibBuilder.loadTexts: modemSessionStats2ModemNumber.setDescription("Modem's index number")
modemSessionStats2ModemIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1427, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemSessionStats2ModemIndex.setStatus('current')
if mibBuilder.loadTexts: modemSessionStats2ModemIndex.setDescription("Modem's system-wide number")
modemSessionStats2TDMStream = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1427, 1, 101), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemSessionStats2TDMStream.setStatus('current')
if mibBuilder.loadTexts: modemSessionStats2TDMStream.setDescription('TDM stream used for this session')
modemSessionStats2TDMSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1427, 1, 102), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemSessionStats2TDMSlot.setStatus('current')
if mibBuilder.loadTexts: modemSessionStats2TDMSlot.setDescription('TDM slot used for this session')
modemSessionStats2InitialTxSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1427, 1, 201), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemSessionStats2InitialTxSpeed.setStatus('current')
if mibBuilder.loadTexts: modemSessionStats2InitialTxSpeed.setDescription('Initial transmit speed')
modemSessionStats2InitialRxSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1427, 1, 202), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemSessionStats2InitialRxSpeed.setStatus('current')
if mibBuilder.loadTexts: modemSessionStats2InitialRxSpeed.setDescription('Initial transmit speed')
modemSessionStats2ConnectString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1427, 1, 301), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemSessionStats2ConnectString.setStatus('current')
if mibBuilder.loadTexts: modemSessionStats2ConnectString.setDescription('CONNECT string from this session')
modemSessionStats2AmpV2String = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1427, 1, 401), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemSessionStats2AmpV2String.setStatus('current')
if mibBuilder.loadTexts: modemSessionStats2AmpV2String.setDescription('&V2 string from this session')
pppLogEntryTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1316), )
if mibBuilder.loadTexts: pppLogEntryTable.setStatus('current')
if mibBuilder.loadTexts: pppLogEntryTable.setDescription('PPP log entry table.')
pppLogEntryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1316, 1), ).setIndexNames((0, "APTIS-MONITOR-MIB", "pppLogEntrySessionId"), (0, "APTIS-MONITOR-MIB", "pppLogEntryIndex"))
if mibBuilder.loadTexts: pppLogEntryEntry.setStatus('current')
if mibBuilder.loadTexts: pppLogEntryEntry.setDescription('This is the structure of entries in the pppLogEntryTable.')
pppLogEntrySessionId = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1316, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLogEntrySessionId.setStatus('current')
if mibBuilder.loadTexts: pppLogEntrySessionId.setDescription('System session ID')
pppLogEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1316, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLogEntryIndex.setStatus('current')
if mibBuilder.loadTexts: pppLogEntryIndex.setDescription('Log entry index')
pppLogEntryMinIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1316, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLogEntryMinIndex.setStatus('current')
if mibBuilder.loadTexts: pppLogEntryMinIndex.setDescription('Index of oldest event available')
pppLogEntryMaxIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1316, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLogEntryMaxIndex.setStatus('current')
if mibBuilder.loadTexts: pppLogEntryMaxIndex.setDescription('Index of newest event available')
pppLogEntryEntryText = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1316, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLogEntryEntryText.setStatus('current')
if mibBuilder.loadTexts: pppLogEntryEntryText.setDescription('Log entry text.')
pppLogEntryRawEntryText = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1316, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLogEntryRawEntryText.setStatus('current')
if mibBuilder.loadTexts: pppLogEntryRawEntryText.setDescription('Raw entry text, if appropriate for this log type.')
pppDeadLogEntryTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1317), )
if mibBuilder.loadTexts: pppDeadLogEntryTable.setStatus('current')
if mibBuilder.loadTexts: pppDeadLogEntryTable.setDescription('PPP dead log entry table.')
pppDeadLogEntryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1317, 1), ).setIndexNames((0, "APTIS-MONITOR-MIB", "pppDeadLogEntryIndex"))
if mibBuilder.loadTexts: pppDeadLogEntryEntry.setStatus('current')
if mibBuilder.loadTexts: pppDeadLogEntryEntry.setDescription('This is the structure of entries in the pppDeadLogEntryTable.')
pppDeadLogEntrySessionId = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1317, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppDeadLogEntrySessionId.setStatus('current')
if mibBuilder.loadTexts: pppDeadLogEntrySessionId.setDescription('System session ID')
pppDeadLogEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1317, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppDeadLogEntryIndex.setStatus('current')
if mibBuilder.loadTexts: pppDeadLogEntryIndex.setDescription('Log entry index')
pppDeadLogEntryMinIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1317, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppDeadLogEntryMinIndex.setStatus('current')
if mibBuilder.loadTexts: pppDeadLogEntryMinIndex.setDescription('Index of oldest event available')
pppDeadLogEntryMaxIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1317, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppDeadLogEntryMaxIndex.setStatus('current')
if mibBuilder.loadTexts: pppDeadLogEntryMaxIndex.setDescription('Index of newest event available')
pppDeadLogEntryEntryText = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1317, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppDeadLogEntryEntryText.setStatus('current')
if mibBuilder.loadTexts: pppDeadLogEntryEntryText.setDescription('Log entry text.')
pppDeadLogEntryRawEntryText = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1317, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppDeadLogEntryRawEntryText.setStatus('current')
if mibBuilder.loadTexts: pppDeadLogEntryRawEntryText.setDescription('Raw entry text, if appropriate for this log type.')
pppSessionStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1318), )
if mibBuilder.loadTexts: pppSessionStatsTable.setStatus('current')
if mibBuilder.loadTexts: pppSessionStatsTable.setDescription('PPP session stats table.')
pppSessionStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1318, 1), ).setIndexNames((0, "APTIS-MONITOR-MIB", "pppSessionStatsSessionID"))
if mibBuilder.loadTexts: pppSessionStatsEntry.setStatus('current')
if mibBuilder.loadTexts: pppSessionStatsEntry.setDescription('This is the structure of entries in the pppSessionStatsTable.')
pppSessionStatsSessionID = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1318, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSessionStatsSessionID.setStatus('current')
if mibBuilder.loadTexts: pppSessionStatsSessionID.setDescription('System session ID')
pppSessionStatsPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1318, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("idle", 0), ("establish", 1), ("auth", 2), ("network", 3), ("terminate", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSessionStatsPhase.setStatus('current')
if mibBuilder.loadTexts: pppSessionStatsPhase.setDescription('Current PPP phase')
pppSessionStatsUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1318, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSessionStatsUserName.setStatus('current')
if mibBuilder.loadTexts: pppSessionStatsUserName.setDescription('User name')
pppSessionStatsUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1318, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSessionStatsUpTime.setStatus('current')
if mibBuilder.loadTexts: pppSessionStatsUpTime.setDescription('Time (in seconds) session has been connected')
pppSessionStatsConnectLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1318, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSessionStatsConnectLimit.setStatus('current')
if mibBuilder.loadTexts: pppSessionStatsConnectLimit.setDescription('Maximum connect time (in seconds) allowed')
pppSessionStatsRemainingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1318, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSessionStatsRemainingTime.setStatus('current')
if mibBuilder.loadTexts: pppSessionStatsRemainingTime.setDescription('Time (in seconds) remaining. -1 indicates umlimited time.')
pppSessionStatsInactivityLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1318, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSessionStatsInactivityLimit.setStatus('current')
if mibBuilder.loadTexts: pppSessionStatsInactivityLimit.setDescription('Inactivity time (in seconds) allowed before disconnecting')
pppSessionStatsInactivityRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1318, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSessionStatsInactivityRemaining.setStatus('current')
if mibBuilder.loadTexts: pppSessionStatsInactivityRemaining.setDescription('Time (in seconds) before disconnection due to inactivity')
pppSessionStatsDeadSession = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1318, 1, 9), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSessionStatsDeadSession.setStatus('current')
if mibBuilder.loadTexts: pppSessionStatsDeadSession.setDescription('True if session is dead/disconnected')
pppSessionStatsInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1318, 1, 101), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 0), ("modem", 1), ("isdn", 2), ("leased", 3), ("hssi", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSessionStatsInterfaceType.setStatus('current')
if mibBuilder.loadTexts: pppSessionStatsInterfaceType.setDescription('Interface type (modem, ISDN, etc.)')
pppSessionStatsTxSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1318, 1, 102), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSessionStatsTxSpeed.setStatus('current')
if mibBuilder.loadTexts: pppSessionStatsTxSpeed.setDescription('Transmit speed in bits per second')
pppSessionStatsRxSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1318, 1, 103), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSessionStatsRxSpeed.setStatus('current')
if mibBuilder.loadTexts: pppSessionStatsRxSpeed.setDescription('Transmit speed in bits per second')
pppSessionStatsLCPState = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1318, 1, 201), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("initial", 0), ("starting", 1), ("closed", 2), ("stopped", 3), ("closing", 4), ("stopping", 5), ("reqSent", 6), ("ackRcvd", 7), ("ackSent", 8), ("opened", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSessionStatsLCPState.setStatus('current')
if mibBuilder.loadTexts: pppSessionStatsLCPState.setDescription('State of Link Control Protocol negotiation')
pppSessionStatsLocalMRU = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1318, 1, 202), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSessionStatsLocalMRU.setStatus('current')
if mibBuilder.loadTexts: pppSessionStatsLocalMRU.setDescription('MRU negotiated by local LCP')
pppSessionStatsRemoteMRU = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1318, 1, 203), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSessionStatsRemoteMRU.setStatus('current')
if mibBuilder.loadTexts: pppSessionStatsRemoteMRU.setDescription('MRU negotiated by remote LCP')
pppSessionStatsLocalAuthProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1318, 1, 204), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 49699, 49187))).clone(namedValues=NamedValues(("none", 0), ("chap", 49699), ("pap", 49187)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSessionStatsLocalAuthProtocol.setStatus('current')
if mibBuilder.loadTexts: pppSessionStatsLocalAuthProtocol.setDescription('Authentication protocol negotiated by local LCP')
pppSessionStatsRemoteAuthProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1318, 1, 205), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 49699, 49187))).clone(namedValues=NamedValues(("none", 0), ("chap", 49699), ("pap", 49187)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSessionStatsRemoteAuthProtocol.setStatus('current')
if mibBuilder.loadTexts: pppSessionStatsRemoteAuthProtocol.setDescription('Authentication protocol negotiated by remote LCP')
pppSessionStatsLocalPFC = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1318, 1, 206), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSessionStatsLocalPFC.setStatus('current')
if mibBuilder.loadTexts: pppSessionStatsLocalPFC.setDescription('Protocol Field Compression negotiated by local LCP')
pppSessionStatsRemotePFC = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1318, 1, 207), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSessionStatsRemotePFC.setStatus('current')
if mibBuilder.loadTexts: pppSessionStatsRemotePFC.setDescription('Protocol Field Compression negotiated by remote LCP')
pppSessionStatsLocalACFC = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1318, 1, 208), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSessionStatsLocalACFC.setStatus('current')
if mibBuilder.loadTexts: pppSessionStatsLocalACFC.setDescription('Address and Control Field Compression negotiated by local LCP')
pppSessionStatsRemoteACFC = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1318, 1, 209), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSessionStatsRemoteACFC.setStatus('current')
if mibBuilder.loadTexts: pppSessionStatsRemoteACFC.setDescription('Address and Control Field Compression negotiated by remote LCP')
pppSessionStatsLocalACCM = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1318, 1, 210), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSessionStatsLocalACCM.setStatus('current')
if mibBuilder.loadTexts: pppSessionStatsLocalACCM.setDescription('ACCM negotiated by local LCP')
pppSessionStatsRemoteACCM = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1318, 1, 211), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSessionStatsRemoteACCM.setStatus('current')
if mibBuilder.loadTexts: pppSessionStatsRemoteACCM.setDescription('ACCM negotiated by remote LCP')
pppSessionStatsLocalMRRU = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1318, 1, 212), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSessionStatsLocalMRRU.setStatus('current')
if mibBuilder.loadTexts: pppSessionStatsLocalMRRU.setDescription('MRRU negotiated by local LCP')
pppSessionStatsRemoteMRRU = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1318, 1, 213), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSessionStatsRemoteMRRU.setStatus('current')
if mibBuilder.loadTexts: pppSessionStatsRemoteMRRU.setDescription('MRRU negotiated by remote LCP')
pppSessionStatsLocalShortSeq = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1318, 1, 214), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSessionStatsLocalShortSeq.setStatus('current')
if mibBuilder.loadTexts: pppSessionStatsLocalShortSeq.setDescription('MLP short sequence numbers negotiated by local LCP')
pppSessionStatsRemoteShortSeq = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1318, 1, 215), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSessionStatsRemoteShortSeq.setStatus('current')
if mibBuilder.loadTexts: pppSessionStatsRemoteShortSeq.setDescription('MLP short sequence numbers negotiated by remote LCP')
pppSessionStatsRemoteAuthenticated = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1318, 1, 301), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSessionStatsRemoteAuthenticated.setStatus('current')
if mibBuilder.loadTexts: pppSessionStatsRemoteAuthenticated.setDescription('Remote user has been authenticated')
pppSessionStatsIPCPState = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1318, 1, 401), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("initial", 0), ("starting", 1), ("closed", 2), ("stopped", 3), ("closing", 4), ("stopping", 5), ("reqSent", 6), ("ackRcvd", 7), ("ackSent", 8), ("opened", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSessionStatsIPCPState.setStatus('current')
if mibBuilder.loadTexts: pppSessionStatsIPCPState.setDescription('State of IP Control Protocol negotiation')
pppSessionStatsLocalIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1318, 1, 402), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSessionStatsLocalIPAddress.setStatus('current')
if mibBuilder.loadTexts: pppSessionStatsLocalIPAddress.setDescription('Local IP address')
pppSessionStatsRemoteIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1318, 1, 403), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSessionStatsRemoteIPAddress.setStatus('current')
if mibBuilder.loadTexts: pppSessionStatsRemoteIPAddress.setDescription('IP address assigned to remote user')
pppSessionStatsDNSAddress1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1318, 1, 404), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSessionStatsDNSAddress1.setStatus('current')
if mibBuilder.loadTexts: pppSessionStatsDNSAddress1.setDescription('First DNS address passed to remote user')
pppSessionStatsDNSAddress2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1318, 1, 405), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSessionStatsDNSAddress2.setStatus('current')
if mibBuilder.loadTexts: pppSessionStatsDNSAddress2.setDescription('Second DNS address passed to remote user')
pppSessionStatsNBNSAddress1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1318, 1, 406), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSessionStatsNBNSAddress1.setStatus('current')
if mibBuilder.loadTexts: pppSessionStatsNBNSAddress1.setDescription('First NBNS address passed to remote user')
pppSessionStatsNBNSAddress2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1318, 1, 407), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSessionStatsNBNSAddress2.setStatus('current')
if mibBuilder.loadTexts: pppSessionStatsNBNSAddress2.setDescription('Second NBNS address passed to remote user')
pppSessionStatsLocalVJ = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1318, 1, 408), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSessionStatsLocalVJ.setStatus('current')
if mibBuilder.loadTexts: pppSessionStatsLocalVJ.setDescription('VJ header compression negotiated by local IPCP')
pppSessionStatsLocalVJSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1318, 1, 409), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSessionStatsLocalVJSlots.setStatus('current')
if mibBuilder.loadTexts: pppSessionStatsLocalVJSlots.setDescription('Number of VJ slots negotiated by local IPCP')
pppSessionStatsRemoteVJ = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1318, 1, 410), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSessionStatsRemoteVJ.setStatus('current')
if mibBuilder.loadTexts: pppSessionStatsRemoteVJ.setDescription('VJ header compression negotiated by remote IPCP')
pppSessionStatsRemoteVJSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1318, 1, 411), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSessionStatsRemoteVJSlots.setStatus('current')
if mibBuilder.loadTexts: pppSessionStatsRemoteVJSlots.setDescription('Number of VJ slots negotiated by remote IPCP')
pppSessionStatsIPXCPState = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1318, 1, 451), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("initial", 0), ("starting", 1), ("closed", 2), ("stopped", 3), ("closing", 4), ("stopping", 5), ("reqSent", 6), ("ackRcvd", 7), ("ackSent", 8), ("opened", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSessionStatsIPXCPState.setStatus('current')
if mibBuilder.loadTexts: pppSessionStatsIPXCPState.setDescription('State of IPX Control Protocol negotiation')
pppSessionStatsRemoteIPXNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1318, 1, 452), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSessionStatsRemoteIPXNetwork.setStatus('current')
if mibBuilder.loadTexts: pppSessionStatsRemoteIPXNetwork.setDescription('Remote IPX Network number')
pppSessionStatsRemoteIPXNode = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1318, 1, 453), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 13))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSessionStatsRemoteIPXNode.setStatus('current')
if mibBuilder.loadTexts: pppSessionStatsRemoteIPXNode.setDescription('Remote IPX Node number')
pppSessionStatsCCPState = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1318, 1, 501), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("initial", 0), ("starting", 1), ("closed", 2), ("stopped", 3), ("closing", 4), ("stopping", 5), ("reqSent", 6), ("ackRcvd", 7), ("ackSent", 8), ("opened", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSessionStatsCCPState.setStatus('current')
if mibBuilder.loadTexts: pppSessionStatsCCPState.setDescription('State of Compression Control Protocol negotiation')
pppSessionStatsLocalCompressAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1318, 1, 502), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("stac4", 1), ("mppc", 2), ("stac3", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSessionStatsLocalCompressAlgorithm.setStatus('current')
if mibBuilder.loadTexts: pppSessionStatsLocalCompressAlgorithm.setDescription('Compression algorithm negotiated by local CCP, and thus the algorithm used when the CVX decompresses data.')
pppSessionStatsLocalCompressHistories = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1318, 1, 503), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSessionStatsLocalCompressHistories.setStatus('current')
if mibBuilder.loadTexts: pppSessionStatsLocalCompressHistories.setDescription('Number of compression histories negotiated by local CCP')
pppSessionStatsRemoteCompressAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1318, 1, 504), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("stac4", 1), ("mppc", 2), ("stac3", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSessionStatsRemoteCompressAlgorithm.setStatus('current')
if mibBuilder.loadTexts: pppSessionStatsRemoteCompressAlgorithm.setDescription('Compression algorithm negotiated by remote CCP, and thus the algorithm used when the CVX compresses data.')
pppSessionStatsRemoteCompressHistories = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1318, 1, 505), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSessionStatsRemoteCompressHistories.setStatus('current')
if mibBuilder.loadTexts: pppSessionStatsRemoteCompressHistories.setDescription('Number of compression histories negotiated by remote CCP')
pppSessionStatsMultilinkActive = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1318, 1, 601), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSessionStatsMultilinkActive.setStatus('current')
if mibBuilder.loadTexts: pppSessionStatsMultilinkActive.setDescription('Multilink active')
pppSessionStatsMultilinkLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1318, 1, 602), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSessionStatsMultilinkLinks.setStatus('current')
if mibBuilder.loadTexts: pppSessionStatsMultilinkLinks.setDescription('Number of links in multilink bundle. 0 if multilink is not active.')
pppSessionStatsTotalTxSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1318, 1, 603), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSessionStatsTotalTxSpeed.setStatus('current')
if mibBuilder.loadTexts: pppSessionStatsTotalTxSpeed.setDescription('Sum of transmit speeds on all links in multilink bundle. 0 if multilink is not active')
pppSessionStatsTotalRxSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1318, 1, 604), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSessionStatsTotalRxSpeed.setStatus('current')
if mibBuilder.loadTexts: pppSessionStatsTotalRxSpeed.setDescription('Sum of receive speeds on all links in multilink bundle. 0 if multilink is not active')
pppSessionStatsMLPFragmentsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1318, 1, 605), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSessionStatsMLPFragmentsReceived.setStatus('current')
if mibBuilder.loadTexts: pppSessionStatsMLPFragmentsReceived.setDescription('Total number of multilink fragments received')
pppSessionStatsMLPFragmentsMissing = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1318, 1, 606), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSessionStatsMLPFragmentsMissing.setStatus('current')
if mibBuilder.loadTexts: pppSessionStatsMLPFragmentsMissing.setDescription('Number of times a missing multilink fragment was detected.')
pppSessionStatsMLPFragmentsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1318, 1, 607), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSessionStatsMLPFragmentsDropped.setStatus('current')
if mibBuilder.loadTexts: pppSessionStatsMLPFragmentsDropped.setDescription('Total number of multilink fragments received, but dropped')
pppSessionStatsMLPPacketsReassembled = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1318, 1, 608), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSessionStatsMLPPacketsReassembled.setStatus('current')
if mibBuilder.loadTexts: pppSessionStatsMLPPacketsReassembled.setDescription('Total number of packets reassembled from multilink fragments')
pppSessionStatsMLPPacketsNull = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1318, 1, 609), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSessionStatsMLPPacketsNull.setStatus('current')
if mibBuilder.loadTexts: pppSessionStatsMLPPacketsNull.setDescription('Total number of 0-length packets reassembled')
pppSessionStatsMultilinkLinksAdded = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1318, 1, 610), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSessionStatsMultilinkLinksAdded.setStatus('current')
if mibBuilder.loadTexts: pppSessionStatsMultilinkLinksAdded.setDescription("Number of links added to multilink bundle over the bundle's life")
pppSessionStatsMultilinkLinksRemoved = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1318, 1, 611), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSessionStatsMultilinkLinksRemoved.setStatus('current')
if mibBuilder.loadTexts: pppSessionStatsMultilinkLinksRemoved.setDescription("Number of links removed from multilink bundle over the bundle's life")
pppSessionStatsMultilinkLinksMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1318, 1, 612), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSessionStatsMultilinkLinksMax.setStatus('current')
if mibBuilder.loadTexts: pppSessionStatsMultilinkLinksMax.setDescription('Maximum number of links ever in multilink bundle')
pppSessionStatsMultilinkLinksMaxConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1318, 1, 613), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSessionStatsMultilinkLinksMaxConfig.setStatus('current')
if mibBuilder.loadTexts: pppSessionStatsMultilinkLinksMaxConfig.setDescription('Maximum number of links allowed in multilink bundle')
pppSessionStatsTxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1318, 1, 1001), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSessionStatsTxPackets.setStatus('current')
if mibBuilder.loadTexts: pppSessionStatsTxPackets.setDescription('Number of protocol packets transmitted')
pppSessionStatsTxPacketsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1318, 1, 1002), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSessionStatsTxPacketsDropped.setStatus('current')
if mibBuilder.loadTexts: pppSessionStatsTxPacketsDropped.setDescription('Number of protocol packets not transmitted (out of resources, queue limit reached, etc.)')
pppSessionStatsTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1318, 1, 1003), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSessionStatsTxBytes.setStatus('current')
if mibBuilder.loadTexts: pppSessionStatsTxBytes.setDescription('Total number of protocol bytes transmitted')
pppSessionStatsRxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1318, 1, 1004), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSessionStatsRxPackets.setStatus('current')
if mibBuilder.loadTexts: pppSessionStatsRxPackets.setDescription('Number of protocol packets received')
pppSessionStatsRxPacketsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1318, 1, 1005), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSessionStatsRxPacketsDropped.setStatus('current')
if mibBuilder.loadTexts: pppSessionStatsRxPacketsDropped.setDescription('Number of protocol packets not received (out of resources, queue limit reached, etc.)')
pppSessionStatsRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1318, 1, 1006), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSessionStatsRxBytes.setStatus('current')
if mibBuilder.loadTexts: pppSessionStatsRxBytes.setDescription('Total number of protocol bytes received')
pppSessionStatsTxCompressing = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1318, 1, 1101), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSessionStatsTxCompressing.setStatus('current')
if mibBuilder.loadTexts: pppSessionStatsTxCompressing.setDescription('Compression of transmitted frames is enabled in configuration')
pppSessionStatsTxBytesBeforeCompress = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1318, 1, 1102), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSessionStatsTxBytesBeforeCompress.setStatus('current')
if mibBuilder.loadTexts: pppSessionStatsTxBytesBeforeCompress.setDescription('Total number of protocol bytes transmitted before compression. 0 if compression was not negotiated')
pppSessionStatsTxBytesAfterCompress = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1318, 1, 1103), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSessionStatsTxBytesAfterCompress.setStatus('current')
if mibBuilder.loadTexts: pppSessionStatsTxBytesAfterCompress.setDescription('Total number of protocol bytes transmitted after compression. 0 if compression was not negotiated')
pppSessionStatsTxBytesUncompressed = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1318, 1, 1104), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSessionStatsTxBytesUncompressed.setStatus('current')
if mibBuilder.loadTexts: pppSessionStatsTxBytesUncompressed.setDescription('Total number of protocol bytes transmitted without compression. This occurs when compression causes the data to grow instead of shrink. 0 if compression was not negotiated')
pppSessionStatsRxBytesBeforeCompress = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1318, 1, 1105), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSessionStatsRxBytesBeforeCompress.setStatus('current')
if mibBuilder.loadTexts: pppSessionStatsRxBytesBeforeCompress.setDescription('Total number of protocol bytes received before compression. 0 if compression was not negotiated')
pppSessionStatsRxBytesAfterCompress = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1318, 1, 1106), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSessionStatsRxBytesAfterCompress.setStatus('current')
if mibBuilder.loadTexts: pppSessionStatsRxBytesAfterCompress.setDescription('Total number of protocol bytes received after compression. 0 if compression was not negotiated')
pppSessionStatsRxBytesUncompressed = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1318, 1, 1107), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSessionStatsRxBytesUncompressed.setStatus('current')
if mibBuilder.loadTexts: pppSessionStatsRxBytesUncompressed.setDescription('Total number of protocol bytes received without compression. This occurs when compression causes the data to grow instead of shrink. 0 if compression was not negotiated')
pppSessionStatsRxCompPacketsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1318, 1, 1108), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSessionStatsRxCompPacketsDropped.setStatus('current')
if mibBuilder.loadTexts: pppSessionStatsRxCompPacketsDropped.setDescription('Number of compressed packets received but dropped (due to invalid sequence number, data corruption, etc.)')
pppSessionStatsCCPResetsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1318, 1, 1109), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSessionStatsCCPResetsSent.setStatus('current')
if mibBuilder.loadTexts: pppSessionStatsCCPResetsSent.setDescription('Total number of CCP Reset-Request frames transmitted. Each Reset-Request sent indicates that the CVX encountered an error while decompressing data transmitted by the remote system.')
pppSessionStatsCCPResetsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1318, 1, 1110), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSessionStatsCCPResetsReceived.setStatus('current')
if mibBuilder.loadTexts: pppSessionStatsCCPResetsReceived.setDescription('Total number of CCP Reset-Request frames received. Each Reset-Request received indicates that the remote system encountered an error while decompressing data transmitted by the CVX.')
pppSessionStatsRxResourceErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1318, 1, 1201), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSessionStatsRxResourceErrors.setStatus('current')
if mibBuilder.loadTexts: pppSessionStatsRxResourceErrors.setDescription('Total number of receives dropped due to lack of a buffer')
pppSessionStatsRxQueueErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1318, 1, 1202), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSessionStatsRxQueueErrors.setStatus('current')
if mibBuilder.loadTexts: pppSessionStatsRxQueueErrors.setDescription('Total number of receives dropped due to queue depth')
pppSessionStatsRxCRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1318, 1, 1203), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSessionStatsRxCRCErrors.setStatus('current')
if mibBuilder.loadTexts: pppSessionStatsRxCRCErrors.setDescription('Total number of receives dropped due to invalid CRC')
pppSessionStatsRxAbortErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1318, 1, 1204), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSessionStatsRxAbortErrors.setStatus('current')
if mibBuilder.loadTexts: pppSessionStatsRxAbortErrors.setDescription('Total number of receives aborted')
pppSessionStatsRxOverrunErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1318, 1, 1205), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSessionStatsRxOverrunErrors.setStatus('current')
if mibBuilder.loadTexts: pppSessionStatsRxOverrunErrors.setDescription('Total number of receives dropped due to overruns')
pppSessionStatsRxBigErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1318, 1, 1206), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSessionStatsRxBigErrors.setStatus('current')
if mibBuilder.loadTexts: pppSessionStatsRxBigErrors.setDescription('Total number of receives that were too large')
pppSessionStatsRxSmallErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1318, 1, 1207), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSessionStatsRxSmallErrors.setStatus('current')
if mibBuilder.loadTexts: pppSessionStatsRxSmallErrors.setDescription('Total number of receives that were too small')
pppSessionStatsRxAlignErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1318, 1, 1208), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSessionStatsRxAlignErrors.setStatus('current')
if mibBuilder.loadTexts: pppSessionStatsRxAlignErrors.setDescription('Total number of receives dropped due to mis-alignment')
pppSessionStatsTxResourceErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1318, 1, 1209), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSessionStatsTxResourceErrors.setStatus('current')
if mibBuilder.loadTexts: pppSessionStatsTxResourceErrors.setDescription('Total number of transmits dropped due to lack of a buffer')
pppSessionStatsTxQueueErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1318, 1, 1210), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSessionStatsTxQueueErrors.setStatus('current')
if mibBuilder.loadTexts: pppSessionStatsTxQueueErrors.setDescription('Total number of transmits dropped due to queue depth')
pppSessionStatsTxBigErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1318, 1, 1211), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSessionStatsTxBigErrors.setStatus('current')
if mibBuilder.loadTexts: pppSessionStatsTxBigErrors.setDescription('Total number of transmits that were too large')
pppSessionStatsTxUnderrunErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1318, 1, 1212), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSessionStatsTxUnderrunErrors.setStatus('current')
if mibBuilder.loadTexts: pppSessionStatsTxUnderrunErrors.setDescription('Total number of transmits dropped due to underruns')
pppDeadSessionStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1320), )
if mibBuilder.loadTexts: pppDeadSessionStatsTable.setStatus('current')
if mibBuilder.loadTexts: pppDeadSessionStatsTable.setDescription('PPP dead session stats table.')
pppDeadSessionStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1320, 1), ).setIndexNames((0, "APTIS-MONITOR-MIB", "pppDeadSessionStatsSessionID"))
if mibBuilder.loadTexts: pppDeadSessionStatsEntry.setStatus('current')
if mibBuilder.loadTexts: pppDeadSessionStatsEntry.setDescription('This is the structure of entries in the pppDeadSessionStatsTable.')
pppDeadSessionStatsSessionID = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1320, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppDeadSessionStatsSessionID.setStatus('current')
if mibBuilder.loadTexts: pppDeadSessionStatsSessionID.setDescription('System session ID')
pppDeadSessionStatsPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1320, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("idle", 0), ("establish", 1), ("auth", 2), ("network", 3), ("terminate", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppDeadSessionStatsPhase.setStatus('current')
if mibBuilder.loadTexts: pppDeadSessionStatsPhase.setDescription('Current PPP phase')
pppDeadSessionStatsUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1320, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppDeadSessionStatsUserName.setStatus('current')
if mibBuilder.loadTexts: pppDeadSessionStatsUserName.setDescription('User name')
pppDeadSessionStatsUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1320, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppDeadSessionStatsUpTime.setStatus('current')
if mibBuilder.loadTexts: pppDeadSessionStatsUpTime.setDescription('Time (in seconds) session has been connected')
pppDeadSessionStatsConnectLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1320, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppDeadSessionStatsConnectLimit.setStatus('current')
if mibBuilder.loadTexts: pppDeadSessionStatsConnectLimit.setDescription('Maximum connect time (in seconds) allowed')
pppDeadSessionStatsRemainingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1320, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppDeadSessionStatsRemainingTime.setStatus('current')
if mibBuilder.loadTexts: pppDeadSessionStatsRemainingTime.setDescription('Time (in seconds) remaining. -1 indicates umlimited time.')
pppDeadSessionStatsInactivityLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1320, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppDeadSessionStatsInactivityLimit.setStatus('current')
if mibBuilder.loadTexts: pppDeadSessionStatsInactivityLimit.setDescription('Inactivity time (in seconds) allowed before disconnecting')
pppDeadSessionStatsInactivityRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1320, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppDeadSessionStatsInactivityRemaining.setStatus('current')
if mibBuilder.loadTexts: pppDeadSessionStatsInactivityRemaining.setDescription('Time (in seconds) before disconnection due to inactivity')
pppDeadSessionStatsDeadSession = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1320, 1, 9), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppDeadSessionStatsDeadSession.setStatus('current')
if mibBuilder.loadTexts: pppDeadSessionStatsDeadSession.setDescription('True if session is dead/disconnected')
pppDeadSessionStatsInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1320, 1, 101), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 0), ("modem", 1), ("isdn", 2), ("leased", 3), ("hssi", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppDeadSessionStatsInterfaceType.setStatus('current')
if mibBuilder.loadTexts: pppDeadSessionStatsInterfaceType.setDescription('Interface type (modem, ISDN, etc.)')
pppDeadSessionStatsTxSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1320, 1, 102), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppDeadSessionStatsTxSpeed.setStatus('current')
if mibBuilder.loadTexts: pppDeadSessionStatsTxSpeed.setDescription('Transmit speed in bits per second')
pppDeadSessionStatsRxSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1320, 1, 103), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppDeadSessionStatsRxSpeed.setStatus('current')
if mibBuilder.loadTexts: pppDeadSessionStatsRxSpeed.setDescription('Transmit speed in bits per second')
pppDeadSessionStatsLCPState = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1320, 1, 201), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("initial", 0), ("starting", 1), ("closed", 2), ("stopped", 3), ("closing", 4), ("stopping", 5), ("reqSent", 6), ("ackRcvd", 7), ("ackSent", 8), ("opened", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppDeadSessionStatsLCPState.setStatus('current')
if mibBuilder.loadTexts: pppDeadSessionStatsLCPState.setDescription('State of Link Control Protocol negotiation')
pppDeadSessionStatsLocalMRU = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1320, 1, 202), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppDeadSessionStatsLocalMRU.setStatus('current')
if mibBuilder.loadTexts: pppDeadSessionStatsLocalMRU.setDescription('MRU negotiated by local LCP')
pppDeadSessionStatsRemoteMRU = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1320, 1, 203), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppDeadSessionStatsRemoteMRU.setStatus('current')
if mibBuilder.loadTexts: pppDeadSessionStatsRemoteMRU.setDescription('MRU negotiated by remote LCP')
pppDeadSessionStatsLocalAuthProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1320, 1, 204), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 49699, 49187))).clone(namedValues=NamedValues(("none", 0), ("chap", 49699), ("pap", 49187)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppDeadSessionStatsLocalAuthProtocol.setStatus('current')
if mibBuilder.loadTexts: pppDeadSessionStatsLocalAuthProtocol.setDescription('Authentication protocol negotiated by local LCP')
pppDeadSessionStatsRemoteAuthProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1320, 1, 205), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 49699, 49187))).clone(namedValues=NamedValues(("none", 0), ("chap", 49699), ("pap", 49187)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppDeadSessionStatsRemoteAuthProtocol.setStatus('current')
if mibBuilder.loadTexts: pppDeadSessionStatsRemoteAuthProtocol.setDescription('Authentication protocol negotiated by remote LCP')
pppDeadSessionStatsLocalPFC = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1320, 1, 206), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppDeadSessionStatsLocalPFC.setStatus('current')
if mibBuilder.loadTexts: pppDeadSessionStatsLocalPFC.setDescription('Protocol Field Compression negotiated by local LCP')
pppDeadSessionStatsRemotePFC = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1320, 1, 207), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppDeadSessionStatsRemotePFC.setStatus('current')
if mibBuilder.loadTexts: pppDeadSessionStatsRemotePFC.setDescription('Protocol Field Compression negotiated by remote LCP')
pppDeadSessionStatsLocalACFC = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1320, 1, 208), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppDeadSessionStatsLocalACFC.setStatus('current')
if mibBuilder.loadTexts: pppDeadSessionStatsLocalACFC.setDescription('Address and Control Field Compression negotiated by local LCP')
pppDeadSessionStatsRemoteACFC = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1320, 1, 209), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppDeadSessionStatsRemoteACFC.setStatus('current')
if mibBuilder.loadTexts: pppDeadSessionStatsRemoteACFC.setDescription('Address and Control Field Compression negotiated by remote LCP')
pppDeadSessionStatsLocalACCM = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1320, 1, 210), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppDeadSessionStatsLocalACCM.setStatus('current')
if mibBuilder.loadTexts: pppDeadSessionStatsLocalACCM.setDescription('ACCM negotiated by local LCP')
pppDeadSessionStatsRemoteACCM = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1320, 1, 211), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppDeadSessionStatsRemoteACCM.setStatus('current')
if mibBuilder.loadTexts: pppDeadSessionStatsRemoteACCM.setDescription('ACCM negotiated by remote LCP')
pppDeadSessionStatsLocalMRRU = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1320, 1, 212), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppDeadSessionStatsLocalMRRU.setStatus('current')
if mibBuilder.loadTexts: pppDeadSessionStatsLocalMRRU.setDescription('MRRU negotiated by local LCP')
pppDeadSessionStatsRemoteMRRU = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1320, 1, 213), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppDeadSessionStatsRemoteMRRU.setStatus('current')
if mibBuilder.loadTexts: pppDeadSessionStatsRemoteMRRU.setDescription('MRRU negotiated by remote LCP')
pppDeadSessionStatsLocalShortSeq = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1320, 1, 214), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppDeadSessionStatsLocalShortSeq.setStatus('current')
if mibBuilder.loadTexts: pppDeadSessionStatsLocalShortSeq.setDescription('MLP short sequence numbers negotiated by local LCP')
pppDeadSessionStatsRemoteShortSeq = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1320, 1, 215), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppDeadSessionStatsRemoteShortSeq.setStatus('current')
if mibBuilder.loadTexts: pppDeadSessionStatsRemoteShortSeq.setDescription('MLP short sequence numbers negotiated by remote LCP')
pppDeadSessionStatsRemoteAuthenticated = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1320, 1, 301), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppDeadSessionStatsRemoteAuthenticated.setStatus('current')
if mibBuilder.loadTexts: pppDeadSessionStatsRemoteAuthenticated.setDescription('Remote user has been authenticated')
pppDeadSessionStatsIPCPState = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1320, 1, 401), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("initial", 0), ("starting", 1), ("closed", 2), ("stopped", 3), ("closing", 4), ("stopping", 5), ("reqSent", 6), ("ackRcvd", 7), ("ackSent", 8), ("opened", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppDeadSessionStatsIPCPState.setStatus('current')
if mibBuilder.loadTexts: pppDeadSessionStatsIPCPState.setDescription('State of IP Control Protocol negotiation')
pppDeadSessionStatsLocalIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1320, 1, 402), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppDeadSessionStatsLocalIPAddress.setStatus('current')
if mibBuilder.loadTexts: pppDeadSessionStatsLocalIPAddress.setDescription('Local IP address')
pppDeadSessionStatsRemoteIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1320, 1, 403), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppDeadSessionStatsRemoteIPAddress.setStatus('current')
if mibBuilder.loadTexts: pppDeadSessionStatsRemoteIPAddress.setDescription('IP address assigned to remote user')
pppDeadSessionStatsDNSAddress1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1320, 1, 404), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppDeadSessionStatsDNSAddress1.setStatus('current')
if mibBuilder.loadTexts: pppDeadSessionStatsDNSAddress1.setDescription('First DNS address passed to remote user')
pppDeadSessionStatsDNSAddress2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1320, 1, 405), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppDeadSessionStatsDNSAddress2.setStatus('current')
if mibBuilder.loadTexts: pppDeadSessionStatsDNSAddress2.setDescription('Second DNS address passed to remote user')
pppDeadSessionStatsNBNSAddress1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1320, 1, 406), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppDeadSessionStatsNBNSAddress1.setStatus('current')
if mibBuilder.loadTexts: pppDeadSessionStatsNBNSAddress1.setDescription('First NBNS address passed to remote user')
pppDeadSessionStatsNBNSAddress2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1320, 1, 407), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppDeadSessionStatsNBNSAddress2.setStatus('current')
if mibBuilder.loadTexts: pppDeadSessionStatsNBNSAddress2.setDescription('Second NBNS address passed to remote user')
pppDeadSessionStatsLocalVJ = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1320, 1, 408), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppDeadSessionStatsLocalVJ.setStatus('current')
if mibBuilder.loadTexts: pppDeadSessionStatsLocalVJ.setDescription('VJ header compression negotiated by local IPCP')
pppDeadSessionStatsLocalVJSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1320, 1, 409), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppDeadSessionStatsLocalVJSlots.setStatus('current')
if mibBuilder.loadTexts: pppDeadSessionStatsLocalVJSlots.setDescription('Number of VJ slots negotiated by local IPCP')
pppDeadSessionStatsRemoteVJ = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1320, 1, 410), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppDeadSessionStatsRemoteVJ.setStatus('current')
if mibBuilder.loadTexts: pppDeadSessionStatsRemoteVJ.setDescription('VJ header compression negotiated by remote IPCP')
pppDeadSessionStatsRemoteVJSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1320, 1, 411), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppDeadSessionStatsRemoteVJSlots.setStatus('current')
if mibBuilder.loadTexts: pppDeadSessionStatsRemoteVJSlots.setDescription('Number of VJ slots negotiated by remote IPCP')
pppDeadSessionStatsIPXCPState = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1320, 1, 451), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("initial", 0), ("starting", 1), ("closed", 2), ("stopped", 3), ("closing", 4), ("stopping", 5), ("reqSent", 6), ("ackRcvd", 7), ("ackSent", 8), ("opened", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppDeadSessionStatsIPXCPState.setStatus('current')
if mibBuilder.loadTexts: pppDeadSessionStatsIPXCPState.setDescription('State of IPX Control Protocol negotiation')
pppDeadSessionStatsRemoteIPXNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1320, 1, 452), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppDeadSessionStatsRemoteIPXNetwork.setStatus('current')
if mibBuilder.loadTexts: pppDeadSessionStatsRemoteIPXNetwork.setDescription('Remote IPX Network number')
pppDeadSessionStatsRemoteIPXNode = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1320, 1, 453), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 13))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppDeadSessionStatsRemoteIPXNode.setStatus('current')
if mibBuilder.loadTexts: pppDeadSessionStatsRemoteIPXNode.setDescription('Remote IPX Node number')
pppDeadSessionStatsCCPState = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1320, 1, 501), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("initial", 0), ("starting", 1), ("closed", 2), ("stopped", 3), ("closing", 4), ("stopping", 5), ("reqSent", 6), ("ackRcvd", 7), ("ackSent", 8), ("opened", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppDeadSessionStatsCCPState.setStatus('current')
if mibBuilder.loadTexts: pppDeadSessionStatsCCPState.setDescription('State of Compression Control Protocol negotiation')
pppDeadSessionStatsLocalCompressAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1320, 1, 502), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("stac4", 1), ("mppc", 2), ("stac3", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppDeadSessionStatsLocalCompressAlgorithm.setStatus('current')
if mibBuilder.loadTexts: pppDeadSessionStatsLocalCompressAlgorithm.setDescription('Compression algorithm negotiated by local CCP, and thus the algorithm used when the CVX decompresses data.')
pppDeadSessionStatsLocalCompressHistories = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1320, 1, 503), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppDeadSessionStatsLocalCompressHistories.setStatus('current')
if mibBuilder.loadTexts: pppDeadSessionStatsLocalCompressHistories.setDescription('Number of compression histories negotiated by local CCP')
pppDeadSessionStatsRemoteCompressAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1320, 1, 504), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("stac4", 1), ("mppc", 2), ("stac3", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppDeadSessionStatsRemoteCompressAlgorithm.setStatus('current')
if mibBuilder.loadTexts: pppDeadSessionStatsRemoteCompressAlgorithm.setDescription('Compression algorithm negotiated by remote CCP, and thus the algorithm used when the CVX compresses data.')
pppDeadSessionStatsRemoteCompressHistories = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1320, 1, 505), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppDeadSessionStatsRemoteCompressHistories.setStatus('current')
if mibBuilder.loadTexts: pppDeadSessionStatsRemoteCompressHistories.setDescription('Number of compression histories negotiated by remote CCP')
pppDeadSessionStatsMultilinkActive = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1320, 1, 601), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppDeadSessionStatsMultilinkActive.setStatus('current')
if mibBuilder.loadTexts: pppDeadSessionStatsMultilinkActive.setDescription('Multilink active')
pppDeadSessionStatsMultilinkLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1320, 1, 602), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppDeadSessionStatsMultilinkLinks.setStatus('current')
if mibBuilder.loadTexts: pppDeadSessionStatsMultilinkLinks.setDescription('Number of links in multilink bundle. 0 if multilink is not active.')
pppDeadSessionStatsTotalTxSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1320, 1, 603), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppDeadSessionStatsTotalTxSpeed.setStatus('current')
if mibBuilder.loadTexts: pppDeadSessionStatsTotalTxSpeed.setDescription('Sum of transmit speeds on all links in multilink bundle. 0 if multilink is not active')
pppDeadSessionStatsTotalRxSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1320, 1, 604), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppDeadSessionStatsTotalRxSpeed.setStatus('current')
if mibBuilder.loadTexts: pppDeadSessionStatsTotalRxSpeed.setDescription('Sum of receive speeds on all links in multilink bundle. 0 if multilink is not active')
pppDeadSessionStatsMLPFragmentsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1320, 1, 605), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppDeadSessionStatsMLPFragmentsReceived.setStatus('current')
if mibBuilder.loadTexts: pppDeadSessionStatsMLPFragmentsReceived.setDescription('Total number of multilink fragments received')
pppDeadSessionStatsMLPFragmentsMissing = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1320, 1, 606), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppDeadSessionStatsMLPFragmentsMissing.setStatus('current')
if mibBuilder.loadTexts: pppDeadSessionStatsMLPFragmentsMissing.setDescription('Number of times a missing multilink fragment was detected.')
pppDeadSessionStatsMLPFragmentsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1320, 1, 607), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppDeadSessionStatsMLPFragmentsDropped.setStatus('current')
if mibBuilder.loadTexts: pppDeadSessionStatsMLPFragmentsDropped.setDescription('Total number of multilink fragments received, but dropped')
pppDeadSessionStatsMLPPacketsReassembled = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1320, 1, 608), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppDeadSessionStatsMLPPacketsReassembled.setStatus('current')
if mibBuilder.loadTexts: pppDeadSessionStatsMLPPacketsReassembled.setDescription('Total number of packets reassembled from multilink fragments')
pppDeadSessionStatsMLPPacketsNull = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1320, 1, 609), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppDeadSessionStatsMLPPacketsNull.setStatus('current')
if mibBuilder.loadTexts: pppDeadSessionStatsMLPPacketsNull.setDescription('Total number of 0-length packets reassembled')
pppDeadSessionStatsMultilinkLinksAdded = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1320, 1, 610), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppDeadSessionStatsMultilinkLinksAdded.setStatus('current')
if mibBuilder.loadTexts: pppDeadSessionStatsMultilinkLinksAdded.setDescription("Number of links added to multilink bundle over the bundle's life")
pppDeadSessionStatsMultilinkLinksRemoved = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1320, 1, 611), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppDeadSessionStatsMultilinkLinksRemoved.setStatus('current')
if mibBuilder.loadTexts: pppDeadSessionStatsMultilinkLinksRemoved.setDescription("Number of links removed from multilink bundle over the bundle's life")
pppDeadSessionStatsMultilinkLinksMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1320, 1, 612), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppDeadSessionStatsMultilinkLinksMax.setStatus('current')
if mibBuilder.loadTexts: pppDeadSessionStatsMultilinkLinksMax.setDescription('Maximum number of links ever in multilink bundle')
pppDeadSessionStatsMultilinkLinksMaxConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1320, 1, 613), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppDeadSessionStatsMultilinkLinksMaxConfig.setStatus('current')
if mibBuilder.loadTexts: pppDeadSessionStatsMultilinkLinksMaxConfig.setDescription('Maximum number of links allowed in multilink bundle')
pppDeadSessionStatsTxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1320, 1, 1001), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppDeadSessionStatsTxPackets.setStatus('current')
if mibBuilder.loadTexts: pppDeadSessionStatsTxPackets.setDescription('Number of protocol packets transmitted')
pppDeadSessionStatsTxPacketsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1320, 1, 1002), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppDeadSessionStatsTxPacketsDropped.setStatus('current')
if mibBuilder.loadTexts: pppDeadSessionStatsTxPacketsDropped.setDescription('Number of protocol packets not transmitted (out of resources, queue limit reached, etc.)')
pppDeadSessionStatsTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1320, 1, 1003), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppDeadSessionStatsTxBytes.setStatus('current')
if mibBuilder.loadTexts: pppDeadSessionStatsTxBytes.setDescription('Total number of protocol bytes transmitted')
pppDeadSessionStatsRxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1320, 1, 1004), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppDeadSessionStatsRxPackets.setStatus('current')
if mibBuilder.loadTexts: pppDeadSessionStatsRxPackets.setDescription('Number of protocol packets received')
pppDeadSessionStatsRxPacketsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1320, 1, 1005), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppDeadSessionStatsRxPacketsDropped.setStatus('current')
if mibBuilder.loadTexts: pppDeadSessionStatsRxPacketsDropped.setDescription('Number of protocol packets not received (out of resources, queue limit reached, etc.)')
pppDeadSessionStatsRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1320, 1, 1006), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppDeadSessionStatsRxBytes.setStatus('current')
if mibBuilder.loadTexts: pppDeadSessionStatsRxBytes.setDescription('Total number of protocol bytes received')
pppDeadSessionStatsTxCompressing = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1320, 1, 1101), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppDeadSessionStatsTxCompressing.setStatus('current')
if mibBuilder.loadTexts: pppDeadSessionStatsTxCompressing.setDescription('Compression of transmitted frames is enabled in configuration')
pppDeadSessionStatsTxBytesBeforeCompress = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1320, 1, 1102), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppDeadSessionStatsTxBytesBeforeCompress.setStatus('current')
if mibBuilder.loadTexts: pppDeadSessionStatsTxBytesBeforeCompress.setDescription('Total number of protocol bytes transmitted before compression. 0 if compression was not negotiated')
pppDeadSessionStatsTxBytesAfterCompress = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1320, 1, 1103), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppDeadSessionStatsTxBytesAfterCompress.setStatus('current')
if mibBuilder.loadTexts: pppDeadSessionStatsTxBytesAfterCompress.setDescription('Total number of protocol bytes transmitted after compression. 0 if compression was not negotiated')
pppDeadSessionStatsTxBytesUncompressed = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1320, 1, 1104), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppDeadSessionStatsTxBytesUncompressed.setStatus('current')
if mibBuilder.loadTexts: pppDeadSessionStatsTxBytesUncompressed.setDescription('Total number of protocol bytes transmitted without compression. This occurs when compression causes the data to grow instead of shrink. 0 if compression was not negotiated')
pppDeadSessionStatsRxBytesBeforeCompress = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1320, 1, 1105), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppDeadSessionStatsRxBytesBeforeCompress.setStatus('current')
if mibBuilder.loadTexts: pppDeadSessionStatsRxBytesBeforeCompress.setDescription('Total number of protocol bytes received before compression. 0 if compression was not negotiated')
pppDeadSessionStatsRxBytesAfterCompress = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1320, 1, 1106), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppDeadSessionStatsRxBytesAfterCompress.setStatus('current')
if mibBuilder.loadTexts: pppDeadSessionStatsRxBytesAfterCompress.setDescription('Total number of protocol bytes received after compression. 0 if compression was not negotiated')
pppDeadSessionStatsRxBytesUncompressed = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1320, 1, 1107), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppDeadSessionStatsRxBytesUncompressed.setStatus('current')
if mibBuilder.loadTexts: pppDeadSessionStatsRxBytesUncompressed.setDescription('Total number of protocol bytes received without compression. This occurs when compression causes the data to grow instead of shrink. 0 if compression was not negotiated')
pppDeadSessionStatsRxCompPacketsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1320, 1, 1108), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppDeadSessionStatsRxCompPacketsDropped.setStatus('current')
if mibBuilder.loadTexts: pppDeadSessionStatsRxCompPacketsDropped.setDescription('Number of compressed packets received but dropped (due to invalid sequence number, data corruption, etc.)')
pppDeadSessionStatsCCPResetsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1320, 1, 1109), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppDeadSessionStatsCCPResetsSent.setStatus('current')
if mibBuilder.loadTexts: pppDeadSessionStatsCCPResetsSent.setDescription('Total number of CCP Reset-Request frames transmitted. Each Reset-Request sent indicates that the CVX encountered an error while decompressing data transmitted by the remote system.')
pppDeadSessionStatsCCPResetsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1320, 1, 1110), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppDeadSessionStatsCCPResetsReceived.setStatus('current')
if mibBuilder.loadTexts: pppDeadSessionStatsCCPResetsReceived.setDescription('Total number of CCP Reset-Request frames received. Each Reset-Request received indicates that the remote system encountered an error while decompressing data transmitted by the CVX.')
pppDeadSessionStatsRxResourceErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1320, 1, 1201), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppDeadSessionStatsRxResourceErrors.setStatus('current')
if mibBuilder.loadTexts: pppDeadSessionStatsRxResourceErrors.setDescription('Total number of receives dropped due to lack of a buffer')
pppDeadSessionStatsRxQueueErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1320, 1, 1202), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppDeadSessionStatsRxQueueErrors.setStatus('current')
if mibBuilder.loadTexts: pppDeadSessionStatsRxQueueErrors.setDescription('Total number of receives dropped due to queue depth')
pppDeadSessionStatsRxCRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1320, 1, 1203), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppDeadSessionStatsRxCRCErrors.setStatus('current')
if mibBuilder.loadTexts: pppDeadSessionStatsRxCRCErrors.setDescription('Total number of receives dropped due to invalid CRC')
pppDeadSessionStatsRxAbortErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1320, 1, 1204), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppDeadSessionStatsRxAbortErrors.setStatus('current')
if mibBuilder.loadTexts: pppDeadSessionStatsRxAbortErrors.setDescription('Total number of receives aborted')
pppDeadSessionStatsRxOverrunErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1320, 1, 1205), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppDeadSessionStatsRxOverrunErrors.setStatus('current')
if mibBuilder.loadTexts: pppDeadSessionStatsRxOverrunErrors.setDescription('Total number of receives dropped due to overruns')
pppDeadSessionStatsRxBigErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1320, 1, 1206), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppDeadSessionStatsRxBigErrors.setStatus('current')
if mibBuilder.loadTexts: pppDeadSessionStatsRxBigErrors.setDescription('Total number of receives that were too large')
pppDeadSessionStatsRxSmallErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1320, 1, 1207), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppDeadSessionStatsRxSmallErrors.setStatus('current')
if mibBuilder.loadTexts: pppDeadSessionStatsRxSmallErrors.setDescription('Total number of receives that were too small')
pppDeadSessionStatsRxAlignErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1320, 1, 1208), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppDeadSessionStatsRxAlignErrors.setStatus('current')
if mibBuilder.loadTexts: pppDeadSessionStatsRxAlignErrors.setDescription('Total number of receives dropped due to mis-alignment')
pppDeadSessionStatsTxResourceErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1320, 1, 1209), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppDeadSessionStatsTxResourceErrors.setStatus('current')
if mibBuilder.loadTexts: pppDeadSessionStatsTxResourceErrors.setDescription('Total number of transmits dropped due to lack of a buffer')
pppDeadSessionStatsTxQueueErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1320, 1, 1210), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppDeadSessionStatsTxQueueErrors.setStatus('current')
if mibBuilder.loadTexts: pppDeadSessionStatsTxQueueErrors.setDescription('Total number of transmits dropped due to queue depth')
pppDeadSessionStatsTxBigErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1320, 1, 1211), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppDeadSessionStatsTxBigErrors.setStatus('current')
if mibBuilder.loadTexts: pppDeadSessionStatsTxBigErrors.setDescription('Total number of transmits that were too large')
pppDeadSessionStatsTxUnderrunErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1320, 1, 1212), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppDeadSessionStatsTxUnderrunErrors.setStatus('current')
if mibBuilder.loadTexts: pppDeadSessionStatsTxUnderrunErrors.setDescription('Total number of transmits dropped due to underruns')
pppSummaryStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1319), )
if mibBuilder.loadTexts: pppSummaryStatsTable.setStatus('current')
if mibBuilder.loadTexts: pppSummaryStatsTable.setDescription('PPP summary stats table.')
pppSummaryStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1319, 1), ).setIndexNames((0, "APTIS-MONITOR-MIB", "pppSummaryStatsSlotNumber"))
if mibBuilder.loadTexts: pppSummaryStatsEntry.setStatus('current')
if mibBuilder.loadTexts: pppSummaryStatsEntry.setDescription('This is the structure of entries in the pppSummaryStatsTable.')
pppSummaryStatsSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1319, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSummaryStatsSlotNumber.setStatus('current')
if mibBuilder.loadTexts: pppSummaryStatsSlotNumber.setDescription('Number of slot reporting these stats')
pppSummaryStatsMaxLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1319, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSummaryStatsMaxLinks.setStatus('current')
if mibBuilder.loadTexts: pppSummaryStatsMaxLinks.setDescription('Number of simultaneous PPP links supported')
pppSummaryStatsActiveLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1319, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSummaryStatsActiveLinks.setStatus('current')
if mibBuilder.loadTexts: pppSummaryStatsActiveLinks.setDescription('Number of PPP links currently active')
pppSummaryStatsMaxActiveLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1319, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSummaryStatsMaxActiveLinks.setStatus('current')
if mibBuilder.loadTexts: pppSummaryStatsMaxActiveLinks.setDescription('Maximum number of PPP links active simultaneously')
pppSummaryStatsFreeLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1319, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSummaryStatsFreeLinks.setStatus('current')
if mibBuilder.loadTexts: pppSummaryStatsFreeLinks.setDescription('Number of PPP links currently available')
pppSummaryStatsLinksStarted = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1319, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSummaryStatsLinksStarted.setStatus('current')
if mibBuilder.loadTexts: pppSummaryStatsLinksStarted.setDescription('Number of PPP links that have been started')
pppSummaryStatsLinksStopped = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1319, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSummaryStatsLinksStopped.setStatus('current')
if mibBuilder.loadTexts: pppSummaryStatsLinksStopped.setDescription('Number of PPP links that have been stopped')
pppSummaryStatsLinksModem = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1319, 1, 101), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSummaryStatsLinksModem.setStatus('current')
if mibBuilder.loadTexts: pppSummaryStatsLinksModem.setDescription('Number of PPP links that have been on a modem')
pppSummaryStatsLinksHDLC = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1319, 1, 102), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSummaryStatsLinksHDLC.setStatus('current')
if mibBuilder.loadTexts: pppSummaryStatsLinksHDLC.setDescription('Number of PPP links that have been on an ISDN B-channel (HDLC)')
pppSummaryStatsLinksLeased = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1319, 1, 103), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSummaryStatsLinksLeased.setStatus('current')
if mibBuilder.loadTexts: pppSummaryStatsLinksLeased.setDescription('Number of PPP links that have been on a leased line')
pppSummaryStatsLinksNegotiatedLCP = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1319, 1, 201), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSummaryStatsLinksNegotiatedLCP.setStatus('current')
if mibBuilder.loadTexts: pppSummaryStatsLinksNegotiatedLCP.setDescription('Number of PPP links that have successfully negotiated LCP')
pppSummaryStatsLinksAuthenticated = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1319, 1, 202), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSummaryStatsLinksAuthenticated.setStatus('current')
if mibBuilder.loadTexts: pppSummaryStatsLinksAuthenticated.setDescription('Number of PPP links that have successfully authenticated')
pppSummaryStatsLinksNegotiatedIPCP = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1319, 1, 203), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSummaryStatsLinksNegotiatedIPCP.setStatus('current')
if mibBuilder.loadTexts: pppSummaryStatsLinksNegotiatedIPCP.setDescription('Number of PPP links that have successfully negotiated IPCP')
pppSummaryStatsLinksNegotiatedMLP = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1319, 1, 204), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSummaryStatsLinksNegotiatedMLP.setStatus('current')
if mibBuilder.loadTexts: pppSummaryStatsLinksNegotiatedMLP.setDescription('Number of PPP links that have successfully negotiated multilink')
pppSummaryStatsLinksNegotiatedCCP = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1319, 1, 205), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSummaryStatsLinksNegotiatedCCP.setStatus('current')
if mibBuilder.loadTexts: pppSummaryStatsLinksNegotiatedCCP.setDescription('Number of PPP links that have successfully negotiated compression')
pppSummaryStatsLinksNegotiatedIPXCP = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1319, 1, 206), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSummaryStatsLinksNegotiatedIPXCP.setStatus('current')
if mibBuilder.loadTexts: pppSummaryStatsLinksNegotiatedIPXCP.setDescription('Number of PPP links that have successfully negotiated IPXCP')
systemSummaryTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 2, 10), )
if mibBuilder.loadTexts: systemSummaryTable.setStatus('current')
if mibBuilder.loadTexts: systemSummaryTable.setDescription('This is a tagged data structure with a summary of various status variables from throughout the CVX system. It is not human-readable and is intended for consumption by the NMS.')
systemSummaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 2, 10, 1), ).setIndexNames((0, "APTIS-MONITOR-MIB", "systemSummaryData"))
if mibBuilder.loadTexts: systemSummaryEntry.setStatus('current')
if mibBuilder.loadTexts: systemSummaryEntry.setDescription('This is the structure of entries in the systemSummaryTable.')
systemSummaryData = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 10, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemSummaryData.setStatus('current')
if mibBuilder.loadTexts: systemSummaryData.setDescription("This is 8-bit binary data. Don't even try to display it.")
powerStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 2, 11), )
if mibBuilder.loadTexts: powerStatusTable.setStatus('current')
if mibBuilder.loadTexts: powerStatusTable.setDescription('The current state of the power supplies in the system, as reported mechanically by the hardware.')
powerStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 2, 11, 1), ).setIndexNames((0, "APTIS-MONITOR-MIB", "powerStatusShelf"))
if mibBuilder.loadTexts: powerStatusEntry.setStatus('current')
if mibBuilder.loadTexts: powerStatusEntry.setDescription('This is the structure of entries in the powerStatusTable.')
powerStatusShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerStatusShelf.setStatus('current')
if mibBuilder.loadTexts: powerStatusShelf.setDescription('The shelf number for which the power status is reported.')
powerStatusFanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 11, 1, 2), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerStatusFanStatus.setStatus('current')
if mibBuilder.loadTexts: powerStatusFanStatus.setDescription('True if the fan tray is operational.')
powerStatusExternalDC1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 11, 1, 3), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerStatusExternalDC1.setStatus('current')
if mibBuilder.loadTexts: powerStatusExternalDC1.setDescription('True if the external DC power supply #1 is operational.')
powerStatusExternalDC2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 11, 1, 4), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerStatusExternalDC2.setStatus('current')
if mibBuilder.loadTexts: powerStatusExternalDC2.setDescription('True if the external DC power supply #2 is operational.')
powerStatusInternalAC1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 11, 1, 5), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerStatusInternalAC1.setStatus('current')
if mibBuilder.loadTexts: powerStatusInternalAC1.setDescription('True if the internal AC power supply #1 is operational.')
powerStatusInternalAC2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 11, 1, 6), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerStatusInternalAC2.setStatus('current')
if mibBuilder.loadTexts: powerStatusInternalAC2.setDescription('True if the internal AC power supply #2 is operational.')
powerStatusInternalACDC1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 11, 1, 7), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerStatusInternalACDC1.setStatus('current')
if mibBuilder.loadTexts: powerStatusInternalACDC1.setDescription('True if the internal AC/DC power supply #1 is operational.')
powerStatusInternalACDC2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 11, 1, 8), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerStatusInternalACDC2.setStatus('current')
if mibBuilder.loadTexts: powerStatusInternalACDC2.setDescription('True if the internal AC/DC power supply #2 is operational.')
powerStatusInternalACDC3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 11, 1, 9), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerStatusInternalACDC3.setStatus('current')
if mibBuilder.loadTexts: powerStatusInternalACDC3.setDescription('True if the internal AC/DC power supply #3 is operational.')
powerStatusCsr1Register = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 11, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerStatusCsr1Register.setStatus('current')
if mibBuilder.loadTexts: powerStatusCsr1Register.setDescription('Inverted contents of CSR1')
softwareVersionTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 2, 12), )
if mibBuilder.loadTexts: softwareVersionTable.setStatus('current')
if mibBuilder.loadTexts: softwareVersionTable.setDescription('The software version numbers for the system.')
softwareVersionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 2, 12, 1), ).setIndexNames((0, "APTIS-MONITOR-MIB", "softwareVersionMibVersion"))
if mibBuilder.loadTexts: softwareVersionEntry.setStatus('current')
if mibBuilder.loadTexts: softwareVersionEntry.setDescription('This is the structure of entries in the softwareVersionTable.')
softwareVersionMibVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: softwareVersionMibVersion.setStatus('current')
if mibBuilder.loadTexts: softwareVersionMibVersion.setDescription('The version of the Aptis Enterprise MIB supported by this member. This number changes with every release of the software.')
softwareVersionSoftwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 12, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: softwareVersionSoftwareRevision.setStatus('current')
if mibBuilder.loadTexts: softwareVersionSoftwareRevision.setDescription('The version of the CVX software running on this system.')
softwareVersionProductId = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cvx1800", 1), ("cvx600", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: softwareVersionProductId.setStatus('current')
if mibBuilder.loadTexts: softwareVersionProductId.setDescription('The version of the CVX software running on this system.')
softwareVersionMibRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 12, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: softwareVersionMibRevision.setStatus('current')
if mibBuilder.loadTexts: softwareVersionMibRevision.setDescription('The revision number of the Aptis Enterprise MIB supported by this sytem. This number is incremented every time the MIB changes during development.')
sessionCountersTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 2, 100), )
if mibBuilder.loadTexts: sessionCountersTable.setStatus('current')
if mibBuilder.loadTexts: sessionCountersTable.setDescription('The current count of sessions in the active and inactive tables.')
sessionCountersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 2, 100, 1), ).setIndexNames((0, "APTIS-MONITOR-MIB", "sessionCountersActiveLowest"))
if mibBuilder.loadTexts: sessionCountersEntry.setStatus('current')
if mibBuilder.loadTexts: sessionCountersEntry.setDescription('This is the structure of entries in the sessionCountersTable.')
sessionCountersActiveLowest = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 100, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionCountersActiveLowest.setStatus('current')
if mibBuilder.loadTexts: sessionCountersActiveLowest.setDescription('The current lowest ID in the active session table.')
sessionCountersActiveHighest = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 100, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionCountersActiveHighest.setStatus('current')
if mibBuilder.loadTexts: sessionCountersActiveHighest.setDescription('The current highest ID in the active session table.')
sessionCountersActiveCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 100, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionCountersActiveCount.setStatus('current')
if mibBuilder.loadTexts: sessionCountersActiveCount.setDescription('The current count of entries in the active session table.')
sessionCountersInactiveLowest = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 100, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionCountersInactiveLowest.setStatus('current')
if mibBuilder.loadTexts: sessionCountersInactiveLowest.setDescription('The current lowest ID in the Inactive session table.')
sessionCountersInactiveHighest = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 100, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionCountersInactiveHighest.setStatus('current')
if mibBuilder.loadTexts: sessionCountersInactiveHighest.setDescription('The current highest ID in the Inactive session table.')
sessionCountersInactiveCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 100, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionCountersInactiveCount.setStatus('current')
if mibBuilder.loadTexts: sessionCountersInactiveCount.setDescription('The current count of entries in the Inactive session table.')
sessionCountersSessionTableSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 100, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionCountersSessionTableSize.setStatus('current')
if mibBuilder.loadTexts: sessionCountersSessionTableSize.setDescription('The maximum number of entries in the session table.')
sessionCountersHistoryLowest = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 100, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionCountersHistoryLowest.setStatus('current')
if mibBuilder.loadTexts: sessionCountersHistoryLowest.setDescription('The current lowest index in the SessionHistory table.')
sessionCountersHistoryHighest = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 100, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionCountersHistoryHighest.setStatus('current')
if mibBuilder.loadTexts: sessionCountersHistoryHighest.setDescription('The current highest index in the SessionHistory table.')
sessionCountersHistoryTableSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 100, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionCountersHistoryTableSize.setStatus('current')
if mibBuilder.loadTexts: sessionCountersHistoryTableSize.setDescription('The maximum number of entries that the history table may hold.')
sessionCountersBootEra = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 100, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionCountersBootEra.setStatus('current')
if mibBuilder.loadTexts: sessionCountersBootEra.setDescription('A number identifying the boot era for this system. This number will be set to a unique value each time the system is rebooted. This variable will not change until the System Controller Card (SCC) is rebooted. When prepended to a session serial number, yields a session identifier which will be unique for this system for all time.')
sessionStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 2, 101), )
if mibBuilder.loadTexts: sessionStatusTable.setStatus('current')
if mibBuilder.loadTexts: sessionStatusTable.setDescription('This table describes both active and inactive sessions. The table contains all active sessions and the most recent inactive sessions, up to a combined total of SessionTableSize entries. This table is ordered by session serial number. As new entries are appended to the bottom of the table, the inactive entries with the oldest termination time get aged out from near the top of the table.')
sessionStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 2, 101, 1), ).setIndexNames((0, "APTIS-MONITOR-MIB", "sessionStatusSessionID"))
if mibBuilder.loadTexts: sessionStatusEntry.setStatus('current')
if mibBuilder.loadTexts: sessionStatusEntry.setDescription('This is the structure of entries in the sessionStatusTable.')
sessionStatusSessionID = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 101, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusSessionID.setStatus('current')
if mibBuilder.loadTexts: sessionStatusSessionID.setDescription('The serial number of this session, a unique number for this boot era. When combined with the value of BootEra, provides a session number that is unique for the life of the system.')
sessionStatusState = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 101, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("inactive", 0), ("active", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusState.setStatus('current')
if mibBuilder.loadTexts: sessionStatusState.setDescription('This variable indicates the state of this session.')
sessionStatusPermanentFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 101, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("switched", 1), ("permanent", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusPermanentFlag.setStatus('current')
if mibBuilder.loadTexts: sessionStatusPermanentFlag.setDescription('This variable indicates whether this session is permanent(2), meaning a long-lasting locally administered session such as a Frame Relay PVC, or switched(1), meaning a short-lived session resulting from a switched call.')
sessionStatusVpopId = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 101, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusVpopId.setStatus('current')
if mibBuilder.loadTexts: sessionStatusVpopId.setDescription('The identifier of the VPOP (administrative Group) to which the session belongs. A value of 0 indicates the default VPOP.')
sessionStatusName = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 101, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 68))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusName.setStatus('current')
if mibBuilder.loadTexts: sessionStatusName.setDescription('The name of the connection peer for this session. During authentication of the session, this field may contain the name submitted by the peer. During this time, the value of timeOfService will be zero. When the value of timeOfService is nonzero, this field will contain a fully authenticated name.')
sessionStatusRemoteIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 101, 1, 13), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusRemoteIP.setStatus('current')
if mibBuilder.loadTexts: sessionStatusRemoteIP.setDescription("The connection peer's IP address. If the link is numbered, then this is the address assigned to the other end of the link. If the link is not numbered, this may be the single IP address of the peer. For PPP connections, this is the result of IPNCP negotiation.")
sessionStatusRemoteIPMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 101, 1, 14), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusRemoteIPMask.setStatus('current')
if mibBuilder.loadTexts: sessionStatusRemoteIPMask.setDescription("The connection peer's IP address mask, used in conjunction with remoteIP.")
sessionStatusLocalIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 101, 1, 15), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusLocalIP.setStatus('current')
if mibBuilder.loadTexts: sessionStatusLocalIP.setDescription('The local IP address for this session. If the link is numbered, then this is the address assigned to the local end of the link. If the link is not numbered, this may be the primary IP address of the system. For PPP connections, this is the result of IPNCP negotiation.')
sessionStatusLocalIPMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 101, 1, 16), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusLocalIPMask.setStatus('current')
if mibBuilder.loadTexts: sessionStatusLocalIPMask.setDescription('The local IP address mask for this session, used in conjunction with localIP.')
sessionStatusLinkService = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 101, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("unknown", 0), ("none", 1), ("other", 2), ("isdn56K", 3), ("isdn64K", 4), ("isdnV120", 5), ("isdnV110", 6), ("modemV32", 7), ("modemV34", 8), ("modemK56", 9), ("modemV90", 10), ("ethernet", 11), ("t1Trunk", 12), ("loopback", 13), ("hssi", 14), ("hub", 15), ("voice", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusLinkService.setStatus('current')
if mibBuilder.loadTexts: sessionStatusLinkService.setDescription('A description of which link technology is being used by the session.')
sessionStatusServiceMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 101, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))).clone(namedValues=NamedValues(("unknown", 0), ("none", 1), ("other", 2), ("ppp", 3), ("slip", 4), ("frameRelay", 5), ("ciscoHDLC", 6), ("terminalServer", 7), ("telnet", 8), ("rawTCP", 9), ("rlogin", 10), ("l2tp", 11), ("l2f", 12), ("trunk", 13), ("voice", 14), ("tandem", 15), ("hub", 16), ("ftp", 17), ("dvs", 18), ("fax", 19), ("atmp", 20), ("iptest", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusServiceMode.setStatus('current')
if mibBuilder.loadTexts: sessionStatusServiceMode.setDescription('A description of which session service is being used by the session.')
sessionStatusStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 101, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusStartTime.setStatus('current')
if mibBuilder.loadTexts: sessionStatusStartTime.setDescription('The time that this session began, in seconds since the system booted.')
sessionStatusStopTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 101, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusStopTime.setStatus('current')
if mibBuilder.loadTexts: sessionStatusStopTime.setDescription('The time that this session stopped, in seconds since the system booted. This variable is only meaningful for sessions having the state inactive(0).')
sessionStatusTimeOfModemSync = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 101, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusTimeOfModemSync.setStatus('current')
if mibBuilder.loadTexts: sessionStatusTimeOfModemSync.setDescription('The time at which the modem synchronization completed, in seconds since the system booted.')
sessionStatusTimeOfService = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 101, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusTimeOfService.setStatus('current')
if mibBuilder.loadTexts: sessionStatusTimeOfService.setDescription('The time that this session entered its first negotiated or configured service, in seconds since the system booted. For example, for a session with serviceMode PPP, the time at which LCP and IPCP negotiations completed and the session was ready to forward user data.')
sessionStatusTerminatingComponent = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 101, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34))).clone(namedValues=NamedValues(("unknown", 0), ("none", 1), ("other", 2), ("df", 3), ("ds0", 4), ("modem", 5), ("hdlc", 6), ("ppp", 7), ("slip", 8), ("chdlc", 9), ("fr", 10), ("ip", 11), ("telnet", 12), ("cleartcp", 13), ("l2tp", 14), ("ether", 15), ("trunkip", 16), ("fepdf", 17), ("lineip", 18), ("loopback", 19), ("shell", 20), ("rlogin", 21), ("hssi", 22), ("sm", 23), ("vl", 24), ("voip", 25), ("l2f", 26), ("l2ftunnel", 27), ("dvs", 28), ("dvstunnel", 29), ("fax", 30), ("l2tproute", 31), ("atmp", 32), ("atmptunnel", 33), ("iptest", 34)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusTerminatingComponent.setStatus('current')
if mibBuilder.loadTexts: sessionStatusTerminatingComponent.setDescription('The component which initiated termination of this session. In cases where there are multiple causes of session termination, only the first cause detected is reported. This variable is only meaningful for sessions having the state inactive(0).')
sessionStatusTerminationCause = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 101, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusTerminationCause.setStatus('current')
if mibBuilder.loadTexts: sessionStatusTerminationCause.setDescription('The cause which initiated termination of this session. In cases where there are multiple causes of session termination, only the first cause detected is reported. This variable is only meaningful for sessions having the state inactive(0).')
sessionStatusLastComponent = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 101, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34))).clone(namedValues=NamedValues(("unknown", 0), ("none", 1), ("other", 2), ("df", 3), ("ds0", 4), ("modem", 5), ("hdlc", 6), ("ppp", 7), ("slip", 8), ("chdlc", 9), ("fr", 10), ("ip", 11), ("telnet", 12), ("cleartcp", 13), ("l2tp", 14), ("ether", 15), ("trunkip", 16), ("fepdf", 17), ("lineip", 18), ("loopback", 19), ("shell", 20), ("rlogin", 21), ("hssi", 22), ("sm", 23), ("vl", 24), ("voip", 25), ("l2f", 26), ("l2ftunnel", 27), ("dvs", 28), ("dvstunnel", 29), ("fax", 30), ("l2tproute", 31), ("atmp", 32), ("atmptunnel", 33), ("iptest", 34)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusLastComponent.setStatus('current')
if mibBuilder.loadTexts: sessionStatusLastComponent.setDescription('The last component which was connected in this session.')
sessionStatusLayer1Slot = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 101, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 18))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusLayer1Slot.setStatus('current')
if mibBuilder.loadTexts: sessionStatusLayer1Slot.setDescription('The slot where the physical layer of this session is terminated.')
sessionStatusLayer2Slot = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 101, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 18))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusLayer2Slot.setStatus('current')
if mibBuilder.loadTexts: sessionStatusLayer2Slot.setDescription('The slot where the data link portion of this session is terminated')
sessionStatusCalledNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 101, 1, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusCalledNumber.setStatus('current')
if mibBuilder.loadTexts: sessionStatusCalledNumber.setDescription('16 digit number of called station (if available)')
sessionStatusCallingNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 101, 1, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusCallingNumber.setStatus('current')
if mibBuilder.loadTexts: sessionStatusCallingNumber.setDescription('16 digit number of calling station (if available)')
sessionStatusOriginateMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 101, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("answer", 0), ("originate", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusOriginateMode.setStatus('current')
if mibBuilder.loadTexts: sessionStatusOriginateMode.setDescription('The direction of the physical layer call associated with this session')
sessionStatusOctetsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 101, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusOctetsIn.setStatus('current')
if mibBuilder.loadTexts: sessionStatusOctetsIn.setDescription('The number of octets received from the remote user. This value will be zero until a session is terminated.')
sessionStatusOctetsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 101, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusOctetsOut.setStatus('current')
if mibBuilder.loadTexts: sessionStatusOctetsOut.setDescription('The number of octets sent to the remote user. This value will be zero until a session is terminated.')
sessionStatusPacketsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 101, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusPacketsIn.setStatus('current')
if mibBuilder.loadTexts: sessionStatusPacketsIn.setDescription('The number of packets received from the remote user. This value will be zero until a session is terminated.')
sessionStatusPacketsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 101, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusPacketsOut.setStatus('current')
if mibBuilder.loadTexts: sessionStatusPacketsOut.setDescription('The number of packets sent to the remote user. This value will be zero until a session is terminated.')
sessionStatusMultiLinkId = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 101, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusMultiLinkId.setStatus('current')
if mibBuilder.loadTexts: sessionStatusMultiLinkId.setDescription('The multi-link identifier value for PPP calls where the multi-link protocol was negotiated.')
sessionStatusPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 101, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusPort.setStatus('current')
if mibBuilder.loadTexts: sessionStatusPort.setDescription('The number of the DS1 for this session, relative to layer1Slot.')
sessionStatusTimeslot = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 101, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusTimeslot.setStatus('current')
if mibBuilder.loadTexts: sessionStatusTimeslot.setDescription('The number of the DS0 for this session, relative to port.')
sessionStatusLinkCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 101, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusLinkCount.setStatus('current')
if mibBuilder.loadTexts: sessionStatusLinkCount.setDescription('The number of sessions sharing the same remote IP address as this session. After a session is terminated, this value will represent the number of sessions at the time of termination.')
sessionStatusTxStartDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 101, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusTxStartDataRate.setStatus('current')
if mibBuilder.loadTexts: sessionStatusTxStartDataRate.setDescription('The transmit DCE data rate for this session. In the case of modem sessions, this will be the DCE rate reported as a result of initial modem negotiation, and may not track rate chanes during the call. For ISDN sessions, this will be the actual data service rate of the call. For Frame Relay sessions, this will be the nominal speed of the Frame Relay Physical Interface, even though multiple sessions may be sharing that Physical Interface. For other sessions, this will be the nominal speed of the physical interface. In no case should this be interepreted as a Quality-of-Service guarantee, or as the current line utilization or effective bandwidth on the interface. Note also that in the case of PPP multilink, this specifies the rate of only this link in the bundle, and not the aggregate rate of all links in the bundle.')
sessionStatusRxStartDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 101, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusRxStartDataRate.setStatus('current')
if mibBuilder.loadTexts: sessionStatusRxStartDataRate.setDescription('The receive data rate for this session. In the case of modem sessions, this will be the DCE rate reported as a result of initial modem negotiation, and may not track rate chanes during the call. For ISDN sessions, this will be the actual data service rate of the call. For Frame Relay sessions, this will be the nominal speed of the Frame Relay Physical Interface, even though multiple sessions may be sharing that Physical Interface. For other sessions, this will be the nominal speed of the physical interface. In no case should this be interepreted as a Quality-of-Service guarantee, or as the current line utilization or effective bandwidth on the interface. Note also that in the case of PPP multilink, this specifies the rate of only this link in the bundle, and not the aggregate rate of all links in the bundle.')
sessionStatusTxEndDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 101, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusTxEndDataRate.setStatus('current')
if mibBuilder.loadTexts: sessionStatusTxEndDataRate.setDescription('The transmit data rate at the end of a modem session.')
sessionStatusRxEndDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 101, 1, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusRxEndDataRate.setStatus('current')
if mibBuilder.loadTexts: sessionStatusRxEndDataRate.setDescription('The receive data rate at the end of a modem session.')
sessionStatusTxMinDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 101, 1, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusTxMinDataRate.setStatus('current')
if mibBuilder.loadTexts: sessionStatusTxMinDataRate.setDescription('The minimum transmit data rate during a modem session.')
sessionStatusRxMinDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 101, 1, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusRxMinDataRate.setStatus('current')
if mibBuilder.loadTexts: sessionStatusRxMinDataRate.setDescription('The minimum receive data rate during a modem session.')
sessionStatusTxMaxDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 101, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusTxMaxDataRate.setStatus('current')
if mibBuilder.loadTexts: sessionStatusTxMaxDataRate.setDescription('The maximum transmit data rate during a modem session.')
sessionStatusRxMaxDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 101, 1, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusRxMaxDataRate.setStatus('current')
if mibBuilder.loadTexts: sessionStatusRxMaxDataRate.setDescription('The maximum receive data rate during a modem session.')
sessionStatusIop = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 101, 1, 47), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusIop.setStatus('current')
if mibBuilder.loadTexts: sessionStatusIop.setDescription('The I/O processor where this session is terminated.')
sessionStatusDmm = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 101, 1, 48), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusDmm.setStatus('current')
if mibBuilder.loadTexts: sessionStatusDmm.setDescription('The Digital Modem Module where this session is terminated.')
sessionStatusPack = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 101, 1, 49), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusPack.setStatus('current')
if mibBuilder.loadTexts: sessionStatusPack.setDescription('The integrated circuit pack where this session is terminated.')
sessionStatusDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 101, 1, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusDevice.setStatus('current')
if mibBuilder.loadTexts: sessionStatusDevice.setDescription('The modem/hdlc where this session is terminated.')
sessionStatusTdmStream = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 101, 1, 51), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusTdmStream.setStatus('current')
if mibBuilder.loadTexts: sessionStatusTdmStream.setDescription('The TDM highway stream associated with this session.')
sessionStatusTdmTimeSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 101, 1, 52), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusTdmTimeSlot.setStatus('current')
if mibBuilder.loadTexts: sessionStatusTdmTimeSlot.setDescription('The TDM highway time-slot associated with this session.')
sessionStatusTerminationReason = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 101, 1, 53), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusTerminationReason.setStatus('current')
if mibBuilder.loadTexts: sessionStatusTerminationReason.setDescription('A textual description of the cause which initiated termination of this session. In cases where there are multiple causes of session termination, only the first cause detected is reported.')
sessionStatusDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 101, 1, 54), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusDuration.setStatus('current')
if mibBuilder.loadTexts: sessionStatusDuration.setDescription('The number of seconds this session has been active.')
sessionStatusDurationHMS = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 101, 1, 55), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusDurationHMS.setStatus('current')
if mibBuilder.loadTexts: sessionStatusDurationHMS.setDescription('The length of time this session has been active, expressed in DDD HH:MM:SSS.000.')
sessionStatusSs7SessionId = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 101, 1, 56), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 70))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusSs7SessionId.setStatus('current')
if mibBuilder.loadTexts: sessionStatusSs7SessionId.setDescription('A uniquie identifier for this session within the ss7 Network. If this call was not originated using ss7 signalling, this string will be null.')
sessionStatusModemNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 101, 1, 57), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusModemNumber.setStatus('current')
if mibBuilder.loadTexts: sessionStatusModemNumber.setDescription('The individual modem where this session is terminated, numbered from one to the maximum number of modems on the slot card.')
sessionStatusTunnelType = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 101, 1, 58), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 0), ("none", 1), ("other", 2), ("l2f", 3), ("l2tp", 4), ("dvs", 5), ("atmp", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusTunnelType.setStatus('current')
if mibBuilder.loadTexts: sessionStatusTunnelType.setDescription('The tunneling protocol being used for this session.')
sessionStatusTunnelMediumType = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 101, 1, 59), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("none", 1), ("other", 2), ("ip", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusTunnelMediumType.setStatus('current')
if mibBuilder.loadTexts: sessionStatusTunnelMediumType.setDescription('The tunneling medium protocol being used for this session.')
sessionStatusTunnelServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 101, 1, 60), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusTunnelServerAddress.setStatus('current')
if mibBuilder.loadTexts: sessionStatusTunnelServerAddress.setDescription('The IP address of the remote machine terminating the tunnel for this session.')
sessionStatusCallClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 101, 1, 61), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusCallClass.setStatus('current')
if mibBuilder.loadTexts: sessionStatusCallClass.setDescription('The class of this call.')
sessionStatusTandemPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 101, 1, 62), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusTandemPort.setStatus('current')
if mibBuilder.loadTexts: sessionStatusTandemPort.setDescription('The port used for the outbound portion of a tandem call, if applicable.')
sessionStatusTandemTimeslot = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 101, 1, 63), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusTandemTimeslot.setStatus('current')
if mibBuilder.loadTexts: sessionStatusTandemTimeslot.setDescription('The timeslot used for the outbound portion of a tandem call, if applicable.')
sessionStatusCallClassArray = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 101, 1, 64), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusCallClassArray.setStatus('current')
if mibBuilder.loadTexts: sessionStatusCallClassArray.setDescription('An array of octets representing the class of this call.')
sessionStatusCallClassLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 101, 1, 65), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusCallClassLen.setStatus('current')
if mibBuilder.loadTexts: sessionStatusCallClassLen.setDescription('The number of octets in callClassArray.')
sessionStatusActualAuthMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 101, 1, 66), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("radius", 1), ("local", 2), ("remote", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusActualAuthMethod.setStatus('current')
if mibBuilder.loadTexts: sessionStatusActualAuthMethod.setDescription('The actual authentication method which was used to gain access to services. Radius, Local, Remote.')
sessionStatusModemModulation = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 101, 1, 67), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("none", 0), ("unknown", 1), ("bell103", 2), ("bell208", 3), ("bell212", 4), ("v17", 5), ("v21", 6), ("v22", 7), ("v22bis", 8), ("v23", 9), ("v27", 10), ("v29", 11), ("v32", 12), ("v32bis", 13), ("v33", 14), ("v34", 15), ("vFC", 16), ("k56", 17), ("v90", 18)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusModemModulation.setStatus('current')
if mibBuilder.loadTexts: sessionStatusModemModulation.setDescription('For modem sessions, the modulation protocol used, if any.')
sessionStatusModemErrorCorrection = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 101, 1, 68), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("unknown", 1), ("mNP", 2), ("v42", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusModemErrorCorrection.setStatus('current')
if mibBuilder.loadTexts: sessionStatusModemErrorCorrection.setDescription('For modem sessions, the error correction protocol used, if any.')
sessionStatusModemDataCompression = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 101, 1, 69), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("unknown", 1), ("mNP5", 2), ("v42bis", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusModemDataCompression.setStatus('current')
if mibBuilder.loadTexts: sessionStatusModemDataCompression.setDescription('For modem sessions, the data compression protocol used, if any.')
sessionStatusModemTxBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 101, 1, 70), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusModemTxBlocks.setStatus('current')
if mibBuilder.loadTexts: sessionStatusModemTxBlocks.setDescription('For modem sessions, the number of blocks transmitted by the modem.')
sessionStatusModemRetransmits = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 101, 1, 71), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusModemRetransmits.setStatus('current')
if mibBuilder.loadTexts: sessionStatusModemRetransmits.setDescription('For modem sessions, the number of packets retransmitted by the modem.')
sessionStatusModemSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 101, 1, 72), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusModemSNR.setStatus('current')
if mibBuilder.loadTexts: sessionStatusModemSNR.setDescription('For modem sessions, the Signal-to-Noise Ratio measured at the start of the connection. This value is given in dB.')
sessionStatusModemLocalRetrains = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 101, 1, 73), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusModemLocalRetrains.setStatus('current')
if mibBuilder.loadTexts: sessionStatusModemLocalRetrains.setDescription('For modem sessions, the number of retrain requests sent by the local modem.')
sessionStatusModemRemoteRetrains = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 101, 1, 74), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusModemRemoteRetrains.setStatus('current')
if mibBuilder.loadTexts: sessionStatusModemRemoteRetrains.setDescription('For modem sessions, the number of retrain requests sent by the remote modem.')
sessionStatusModemLocalRenegotiations = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 101, 1, 75), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusModemLocalRenegotiations.setStatus('current')
if mibBuilder.loadTexts: sessionStatusModemLocalRenegotiations.setDescription('For modem sessions, the number of rate renegotiation requests sent by the local modem.')
sessionStatusModemRemoteRenegotiations = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 101, 1, 76), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusModemRemoteRenegotiations.setStatus('current')
if mibBuilder.loadTexts: sessionStatusModemRemoteRenegotiations.setDescription('For modem sessions, the number of rate renegotiation requests sent by the remote modem.')
sessionStatusModemReceiveLineLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 101, 1, 77), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusModemReceiveLineLevel.setStatus('current')
if mibBuilder.loadTexts: sessionStatusModemReceiveLineLevel.setDescription('For modem sessions, the receive line signal level. This value is given in dB.')
sessionStatusRemoteIPXNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 101, 1, 78), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusRemoteIPXNetwork.setStatus('current')
if mibBuilder.loadTexts: sessionStatusRemoteIPXNetwork.setDescription('The IPX network assigned to the dial-up user.')
sessionStatusRemoteIPXNode = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 101, 1, 79), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusRemoteIPXNode.setStatus('current')
if mibBuilder.loadTexts: sessionStatusRemoteIPXNode.setDescription('The IPX Node number assisgned to the dial-up user')
sessionStatusCleartcpRemoteIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 101, 1, 80), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusCleartcpRemoteIP.setStatus('current')
if mibBuilder.loadTexts: sessionStatusCleartcpRemoteIP.setDescription('Cleartcp Remote IP Address')
sessionStatusCleartcpRemotePort = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 101, 1, 81), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusCleartcpRemotePort.setStatus('current')
if mibBuilder.loadTexts: sessionStatusCleartcpRemotePort.setDescription('Cleartcp Remote Port Address')
sessionStatusTunnelId = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 101, 1, 82), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusTunnelId.setStatus('current')
if mibBuilder.loadTexts: sessionStatusTunnelId.setDescription('Tunnel Id')
sessionStatusLinkId = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 101, 1, 83), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusLinkId.setStatus('current')
if mibBuilder.loadTexts: sessionStatusLinkId.setDescription('Link Id')
sessionStatusActiveTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 2, 102), )
if mibBuilder.loadTexts: sessionStatusActiveTable.setStatus('current')
if mibBuilder.loadTexts: sessionStatusActiveTable.setDescription('This table describes all active sessions. This table is ordered by session serial number. The current bounds of this table at any given time are described by the variables ActiveLowest and ActiveHighest.')
sessionStatusActiveEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 2, 102, 1), ).setIndexNames((0, "APTIS-MONITOR-MIB", "sessionStatusActiveSessionID"))
if mibBuilder.loadTexts: sessionStatusActiveEntry.setStatus('current')
if mibBuilder.loadTexts: sessionStatusActiveEntry.setDescription('This is the structure of entries in the sessionStatusActiveTable.')
sessionStatusActiveSessionID = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 102, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusActiveSessionID.setStatus('current')
if mibBuilder.loadTexts: sessionStatusActiveSessionID.setDescription('The serial number of this session, a unique number for this boot era. When combined with the value of BootEra, provides a session number that is unique for the life of the system. Note that these are very sparsely numbered.')
sessionStatusActiveState = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 102, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("inactive", 0), ("active", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusActiveState.setStatus('current')
if mibBuilder.loadTexts: sessionStatusActiveState.setDescription('This variable indicates the state of this session.')
sessionStatusActivePermanentFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 102, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("switched", 1), ("permanent", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusActivePermanentFlag.setStatus('current')
if mibBuilder.loadTexts: sessionStatusActivePermanentFlag.setDescription('This variable indicates whether this session is permanent(2), meaning a long-lasting locally administered session such as a Frame Relay PVC, or switched(1), meaning a short-lived session resulting from a switched call.')
sessionStatusActiveVpopId = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 102, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusActiveVpopId.setStatus('current')
if mibBuilder.loadTexts: sessionStatusActiveVpopId.setDescription('The identifier of the VPOP (administrative Group) to which the session belongs. A value of 0 indicates the default VPOP.')
sessionStatusActiveName = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 102, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 68))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusActiveName.setStatus('current')
if mibBuilder.loadTexts: sessionStatusActiveName.setDescription('The name of the connection peer for this session. During authentication of the session, this field may contain the name submitted by the peer. During this time, the value of timeOfService will be zero. When the value of timeOfService is nonzero, this field will contain a fully authenticated name.')
sessionStatusActiveRemoteIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 102, 1, 13), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusActiveRemoteIP.setStatus('current')
if mibBuilder.loadTexts: sessionStatusActiveRemoteIP.setDescription("The connection peer's IP address. If the link is numbered, then this is the address assigned to the other end of the link. If the link is not numbered, this may be the single IP address of the peer. For PPP connections, this is the result of IPNCP negotiation.")
sessionStatusActiveRemoteIPMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 102, 1, 14), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusActiveRemoteIPMask.setStatus('current')
if mibBuilder.loadTexts: sessionStatusActiveRemoteIPMask.setDescription("The connection peer's IP address mask, used in conjunction with remoteIP.")
sessionStatusActiveLocalIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 102, 1, 15), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusActiveLocalIP.setStatus('current')
if mibBuilder.loadTexts: sessionStatusActiveLocalIP.setDescription('The local IP address for this session. If the link is numbered, then this is the address assigned to the local end of the link. If the link is not numbered, this may be the primary IP address of the system. For PPP connections, this is the result of IPNCP negotiation.')
sessionStatusActiveLocalIPMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 102, 1, 16), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusActiveLocalIPMask.setStatus('current')
if mibBuilder.loadTexts: sessionStatusActiveLocalIPMask.setDescription('The local IP address mask for this session, used in conjunction with localIP.')
sessionStatusActiveLinkService = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 102, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("unknown", 0), ("none", 1), ("other", 2), ("isdn56K", 3), ("isdn64K", 4), ("isdnV120", 5), ("isdnV110", 6), ("modemV32", 7), ("modemV34", 8), ("modemK56", 9), ("modemV90", 10), ("ethernet", 11), ("t1Trunk", 12), ("loopback", 13), ("hssi", 14), ("hub", 15), ("voice", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusActiveLinkService.setStatus('current')
if mibBuilder.loadTexts: sessionStatusActiveLinkService.setDescription('A description of which link technology is being used by the session.')
sessionStatusActiveServiceMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 102, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))).clone(namedValues=NamedValues(("unknown", 0), ("none", 1), ("other", 2), ("ppp", 3), ("slip", 4), ("frameRelay", 5), ("ciscoHDLC", 6), ("terminalServer", 7), ("telnet", 8), ("rawTCP", 9), ("rlogin", 10), ("l2tp", 11), ("l2f", 12), ("trunk", 13), ("voice", 14), ("tandem", 15), ("hub", 16), ("ftp", 17), ("dvs", 18), ("fax", 19), ("atmp", 20), ("iptest", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusActiveServiceMode.setStatus('current')
if mibBuilder.loadTexts: sessionStatusActiveServiceMode.setDescription('A description of which session service is being used by the session.')
sessionStatusActiveStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 102, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusActiveStartTime.setStatus('current')
if mibBuilder.loadTexts: sessionStatusActiveStartTime.setDescription('The time that this session began, in seconds since the system booted.')
sessionStatusActiveStopTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 102, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusActiveStopTime.setStatus('current')
if mibBuilder.loadTexts: sessionStatusActiveStopTime.setDescription('The time that this session stopped, in seconds since the system booted. This variable is only meaningful for sessions having the state inactive(0).')
sessionStatusActiveTimeOfModemSync = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 102, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusActiveTimeOfModemSync.setStatus('current')
if mibBuilder.loadTexts: sessionStatusActiveTimeOfModemSync.setDescription('The time at which the modem synchronization completed, in seconds since the system booted.')
sessionStatusActiveTimeOfService = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 102, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusActiveTimeOfService.setStatus('current')
if mibBuilder.loadTexts: sessionStatusActiveTimeOfService.setDescription('The time that this session entered its first negotiated or configured service, in seconds since the system booted. For example, for a session with serviceMode PPP, the time at which LCP and IPCP negotiations completed and the session was ready to forward user data.')
sessionStatusActiveTerminatingComponent = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 102, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34))).clone(namedValues=NamedValues(("unknown", 0), ("none", 1), ("other", 2), ("df", 3), ("ds0", 4), ("modem", 5), ("hdlc", 6), ("ppp", 7), ("slip", 8), ("chdlc", 9), ("fr", 10), ("ip", 11), ("telnet", 12), ("cleartcp", 13), ("l2tp", 14), ("ether", 15), ("trunkip", 16), ("fepdf", 17), ("lineip", 18), ("loopback", 19), ("shell", 20), ("rlogin", 21), ("hssi", 22), ("sm", 23), ("vl", 24), ("voip", 25), ("l2f", 26), ("l2ftunnel", 27), ("dvs", 28), ("dvstunnel", 29), ("fax", 30), ("l2tproute", 31), ("atmp", 32), ("atmptunnel", 33), ("iptest", 34)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusActiveTerminatingComponent.setStatus('current')
if mibBuilder.loadTexts: sessionStatusActiveTerminatingComponent.setDescription('The component which initiated termination of this session. In cases where there are multiple causes of session termination, only the first cause detected is reported. This variable is only meaningful for sessions having the state inactive(0).')
sessionStatusActiveTerminationCause = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 102, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusActiveTerminationCause.setStatus('current')
if mibBuilder.loadTexts: sessionStatusActiveTerminationCause.setDescription('The cause which initiated termination of this session. In cases where there are multiple causes of session termination, only the first cause detected is reported. This variable is only meaningful for sessions having the state inactive(0).')
sessionStatusActiveLastComponent = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 102, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34))).clone(namedValues=NamedValues(("unknown", 0), ("none", 1), ("other", 2), ("df", 3), ("ds0", 4), ("modem", 5), ("hdlc", 6), ("ppp", 7), ("slip", 8), ("chdlc", 9), ("fr", 10), ("ip", 11), ("telnet", 12), ("cleartcp", 13), ("l2tp", 14), ("ether", 15), ("trunkip", 16), ("fepdf", 17), ("lineip", 18), ("loopback", 19), ("shell", 20), ("rlogin", 21), ("hssi", 22), ("sm", 23), ("vl", 24), ("voip", 25), ("l2f", 26), ("l2ftunnel", 27), ("dvs", 28), ("dvstunnel", 29), ("fax", 30), ("l2tproute", 31), ("atmp", 32), ("atmptunnel", 33), ("iptest", 34)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusActiveLastComponent.setStatus('current')
if mibBuilder.loadTexts: sessionStatusActiveLastComponent.setDescription('The last component which was connected in this session.')
sessionStatusActiveLayer1Slot = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 102, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 18))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusActiveLayer1Slot.setStatus('current')
if mibBuilder.loadTexts: sessionStatusActiveLayer1Slot.setDescription('The slot where the physical layer of this session is terminated.')
sessionStatusActiveLayer2Slot = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 102, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 18))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusActiveLayer2Slot.setStatus('current')
if mibBuilder.loadTexts: sessionStatusActiveLayer2Slot.setDescription('The slot where the data link portion of this session is terminated')
sessionStatusActiveCalledNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 102, 1, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusActiveCalledNumber.setStatus('current')
if mibBuilder.loadTexts: sessionStatusActiveCalledNumber.setDescription('16 digit number of called station (if available)')
sessionStatusActiveCallingNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 102, 1, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusActiveCallingNumber.setStatus('current')
if mibBuilder.loadTexts: sessionStatusActiveCallingNumber.setDescription('16 digit number of calling station (if available)')
sessionStatusActiveOriginateMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 102, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("answer", 0), ("originate", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusActiveOriginateMode.setStatus('current')
if mibBuilder.loadTexts: sessionStatusActiveOriginateMode.setDescription('The direction of the physical layer call associated with this session')
sessionStatusActiveOctetsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 102, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusActiveOctetsIn.setStatus('current')
if mibBuilder.loadTexts: sessionStatusActiveOctetsIn.setDescription('The number of octets received from the remote user. This value will be zero until a session is terminated.')
sessionStatusActiveOctetsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 102, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusActiveOctetsOut.setStatus('current')
if mibBuilder.loadTexts: sessionStatusActiveOctetsOut.setDescription('The number of octets sent to the remote user. This value will be zero until a session is terminated.')
sessionStatusActivePacketsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 102, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusActivePacketsIn.setStatus('current')
if mibBuilder.loadTexts: sessionStatusActivePacketsIn.setDescription('The number of packets received from the remote user. This value will be zero until a session is terminated.')
sessionStatusActivePacketsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 102, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusActivePacketsOut.setStatus('current')
if mibBuilder.loadTexts: sessionStatusActivePacketsOut.setDescription('The number of packets sent to the remote user. This value will be zero until a session is terminated.')
sessionStatusActiveMultiLinkId = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 102, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusActiveMultiLinkId.setStatus('current')
if mibBuilder.loadTexts: sessionStatusActiveMultiLinkId.setDescription('The multi-link identifier value for PPP calls where the multi-link protocol was negotiated.')
sessionStatusActivePort = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 102, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusActivePort.setStatus('current')
if mibBuilder.loadTexts: sessionStatusActivePort.setDescription('The number of the DS1 for this session, relative to layer1Slot.')
sessionStatusActiveTimeslot = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 102, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusActiveTimeslot.setStatus('current')
if mibBuilder.loadTexts: sessionStatusActiveTimeslot.setDescription('The number of the DS0 for this session, relative to port.')
sessionStatusActiveLinkCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 102, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusActiveLinkCount.setStatus('current')
if mibBuilder.loadTexts: sessionStatusActiveLinkCount.setDescription('The number of sessions sharing the same remote IP address as this session. After a session is terminated, this value will represent the number of sessions at the time of termination.')
sessionStatusActiveTxStartDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 102, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusActiveTxStartDataRate.setStatus('current')
if mibBuilder.loadTexts: sessionStatusActiveTxStartDataRate.setDescription('The transmit DCE data rate for this session. In the case of modem sessions, this will be the DCE rate reported as a result of initial modem negotiation, and may not track rate chanes during the call. For ISDN sessions, this will be the actual data service rate of the call. For Frame Relay sessions, this will be the nominal speed of the Frame Relay Physical Interface, even though multiple sessions may be sharing that Physical Interface. For other sessions, this will be the nominal speed of the physical interface. In no case should this be interepreted as a Quality-of-Service guarantee, or as the current line utilization or effective bandwidth on the interface. Note also that in the case of PPP multilink, this specifies the rate of only this link in the bundle, and not the aggregate rate of all links in the bundle.')
sessionStatusActiveRxStartDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 102, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusActiveRxStartDataRate.setStatus('current')
if mibBuilder.loadTexts: sessionStatusActiveRxStartDataRate.setDescription('The receive data rate for this session. In the case of modem sessions, this will be the DCE rate reported as a result of initial modem negotiation, and may not track rate chanes during the call. For ISDN sessions, this will be the actual data service rate of the call. For Frame Relay sessions, this will be the nominal speed of the Frame Relay Physical Interface, even though multiple sessions may be sharing that Physical Interface. For other sessions, this will be the nominal speed of the physical interface. In no case should this be interepreted as a Quality-of-Service guarantee, or as the current line utilization or effective bandwidth on the interface. Note also that in the case of PPP multilink, this specifies the rate of only this link in the bundle, and not the aggregate rate of all links in the bundle.')
sessionStatusActiveTxEndDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 102, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusActiveTxEndDataRate.setStatus('current')
if mibBuilder.loadTexts: sessionStatusActiveTxEndDataRate.setDescription('The transmit data rate at the end of a modem session.')
sessionStatusActiveRxEndDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 102, 1, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusActiveRxEndDataRate.setStatus('current')
if mibBuilder.loadTexts: sessionStatusActiveRxEndDataRate.setDescription('The receive data rate at the end of a modem session.')
sessionStatusActiveTxMinDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 102, 1, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusActiveTxMinDataRate.setStatus('current')
if mibBuilder.loadTexts: sessionStatusActiveTxMinDataRate.setDescription('The minimum transmit data rate during a modem session.')
sessionStatusActiveRxMinDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 102, 1, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusActiveRxMinDataRate.setStatus('current')
if mibBuilder.loadTexts: sessionStatusActiveRxMinDataRate.setDescription('The minimum receive data rate during a modem session.')
sessionStatusActiveTxMaxDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 102, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusActiveTxMaxDataRate.setStatus('current')
if mibBuilder.loadTexts: sessionStatusActiveTxMaxDataRate.setDescription('The maximum transmit data rate during a modem session.')
sessionStatusActiveRxMaxDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 102, 1, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusActiveRxMaxDataRate.setStatus('current')
if mibBuilder.loadTexts: sessionStatusActiveRxMaxDataRate.setDescription('The maximum receive data rate during a modem session.')
sessionStatusActiveIop = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 102, 1, 47), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusActiveIop.setStatus('current')
if mibBuilder.loadTexts: sessionStatusActiveIop.setDescription('The I/O processor where this session is terminated.')
sessionStatusActiveDmm = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 102, 1, 48), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusActiveDmm.setStatus('current')
if mibBuilder.loadTexts: sessionStatusActiveDmm.setDescription('The Digital Modem Module where this session is terminated.')
sessionStatusActivePack = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 102, 1, 49), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusActivePack.setStatus('current')
if mibBuilder.loadTexts: sessionStatusActivePack.setDescription('The integrated circuit pack where this session is terminated.')
sessionStatusActiveDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 102, 1, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusActiveDevice.setStatus('current')
if mibBuilder.loadTexts: sessionStatusActiveDevice.setDescription('The modem/hdlc where this session is terminated.')
sessionStatusActiveTdmStream = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 102, 1, 51), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusActiveTdmStream.setStatus('current')
if mibBuilder.loadTexts: sessionStatusActiveTdmStream.setDescription('The TDM highway stream associated with this session.')
sessionStatusActiveTdmTimeSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 102, 1, 52), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusActiveTdmTimeSlot.setStatus('current')
if mibBuilder.loadTexts: sessionStatusActiveTdmTimeSlot.setDescription('The TDM highway time-slot associated with this session.')
sessionStatusActiveTerminationReason = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 102, 1, 53), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusActiveTerminationReason.setStatus('current')
if mibBuilder.loadTexts: sessionStatusActiveTerminationReason.setDescription('A textual description of the cause which initiated termination of this session. In cases where there are multiple causes of session termination, only the first cause detected is reported.')
sessionStatusActiveDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 102, 1, 54), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusActiveDuration.setStatus('current')
if mibBuilder.loadTexts: sessionStatusActiveDuration.setDescription('The number of seconds this session has been active.')
sessionStatusActiveDurationHMS = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 102, 1, 55), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusActiveDurationHMS.setStatus('current')
if mibBuilder.loadTexts: sessionStatusActiveDurationHMS.setDescription('The length of time this session has been active, expressed in DDD HH:MM:SSS.000.')
sessionStatusActiveSs7SessionId = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 102, 1, 56), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 41))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusActiveSs7SessionId.setStatus('current')
if mibBuilder.loadTexts: sessionStatusActiveSs7SessionId.setDescription('A uniquie identifier for this session within the ss7 Network. If this call was not originated using ss7 signalling, this string will be null.')
sessionStatusActiveModemNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 102, 1, 57), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusActiveModemNumber.setStatus('current')
if mibBuilder.loadTexts: sessionStatusActiveModemNumber.setDescription('The individual modem where this session is terminated, numbered from one to the maximum number of modems on the slot card.')
sessionStatusActiveTunnelType = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 102, 1, 58), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 0), ("none", 1), ("other", 2), ("l2f", 3), ("l2tp", 4), ("dvs", 5), ("atmp", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusActiveTunnelType.setStatus('current')
if mibBuilder.loadTexts: sessionStatusActiveTunnelType.setDescription('The tunneling protocol being used for this session.')
sessionStatusActiveTunnelMediumType = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 102, 1, 59), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("none", 1), ("other", 2), ("ip", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusActiveTunnelMediumType.setStatus('current')
if mibBuilder.loadTexts: sessionStatusActiveTunnelMediumType.setDescription('The tunneling medium protocol being used for this session.')
sessionStatusActiveTunnelServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 102, 1, 60), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusActiveTunnelServerAddress.setStatus('current')
if mibBuilder.loadTexts: sessionStatusActiveTunnelServerAddress.setDescription('The IP address of the remote machine terminating the tunnel for this session.')
sessionStatusActiveCallClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 102, 1, 61), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusActiveCallClass.setStatus('current')
if mibBuilder.loadTexts: sessionStatusActiveCallClass.setDescription('The class of this call.')
sessionStatusActiveTandemPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 102, 1, 62), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusActiveTandemPort.setStatus('current')
if mibBuilder.loadTexts: sessionStatusActiveTandemPort.setDescription('The port used for the outbound portion of a tandem call, if applicable.')
sessionStatusActiveTandemTimeslot = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 102, 1, 63), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusActiveTandemTimeslot.setStatus('current')
if mibBuilder.loadTexts: sessionStatusActiveTandemTimeslot.setDescription('The timeslot used for the outbound portion of a tandem call, if applicable.')
sessionStatusActiveCallClassArray = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 102, 1, 64), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusActiveCallClassArray.setStatus('current')
if mibBuilder.loadTexts: sessionStatusActiveCallClassArray.setDescription('An array of octets representing the class of this call.')
sessionStatusActiveCallClassLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 102, 1, 65), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusActiveCallClassLen.setStatus('current')
if mibBuilder.loadTexts: sessionStatusActiveCallClassLen.setDescription('The number of octets in callClassArray.')
sessionStatusActiveActualAuthMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 102, 1, 66), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("radius", 1), ("local", 2), ("remote", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusActiveActualAuthMethod.setStatus('current')
if mibBuilder.loadTexts: sessionStatusActiveActualAuthMethod.setDescription('The actual authentication method which was used to gain access to services. Radius, Local, Remote.')
sessionStatusActiveModemModulation = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 102, 1, 67), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("none", 0), ("unknown", 1), ("bell103", 2), ("bell208", 3), ("bell212", 4), ("v17", 5), ("v21", 6), ("v22", 7), ("v22bis", 8), ("v23", 9), ("v27", 10), ("v29", 11), ("v32", 12), ("v32bis", 13), ("v33", 14), ("v34", 15), ("vFC", 16), ("k56", 17), ("v90", 18)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusActiveModemModulation.setStatus('current')
if mibBuilder.loadTexts: sessionStatusActiveModemModulation.setDescription('For modem sessions, the modulation protocol used, if any.')
sessionStatusActiveModemErrorCorrection = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 102, 1, 68), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("unknown", 1), ("mNP", 2), ("v42", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusActiveModemErrorCorrection.setStatus('current')
if mibBuilder.loadTexts: sessionStatusActiveModemErrorCorrection.setDescription('For modem sessions, the error correction protocol used, if any.')
sessionStatusActiveModemDataCompression = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 102, 1, 69), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("unknown", 1), ("mNP5", 2), ("v42bis", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusActiveModemDataCompression.setStatus('current')
if mibBuilder.loadTexts: sessionStatusActiveModemDataCompression.setDescription('For modem sessions, the data compression protocol used, if any.')
sessionStatusActiveModemTxBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 102, 1, 70), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusActiveModemTxBlocks.setStatus('current')
if mibBuilder.loadTexts: sessionStatusActiveModemTxBlocks.setDescription('For modem sessions, the number of blocks transmitted by the modem.')
sessionStatusActiveModemRetransmits = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 102, 1, 71), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusActiveModemRetransmits.setStatus('current')
if mibBuilder.loadTexts: sessionStatusActiveModemRetransmits.setDescription('For modem sessions, the number of packets retransmitted by the modem.')
sessionStatusActiveModemSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 102, 1, 72), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusActiveModemSNR.setStatus('current')
if mibBuilder.loadTexts: sessionStatusActiveModemSNR.setDescription('For modem sessions, the Signal-to-Noise Ratio measured at the start of the connection. This value is given in dB.')
sessionStatusActiveModemLocalRetrains = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 102, 1, 73), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusActiveModemLocalRetrains.setStatus('current')
if mibBuilder.loadTexts: sessionStatusActiveModemLocalRetrains.setDescription('For modem sessions, the number of retrain requests sent by the local modem.')
sessionStatusActiveModemRemoteRetrains = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 102, 1, 74), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusActiveModemRemoteRetrains.setStatus('current')
if mibBuilder.loadTexts: sessionStatusActiveModemRemoteRetrains.setDescription('For modem sessions, the number of retrain requests sent by the remote modem.')
sessionStatusActiveModemLocalRenegotiations = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 102, 1, 75), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusActiveModemLocalRenegotiations.setStatus('current')
if mibBuilder.loadTexts: sessionStatusActiveModemLocalRenegotiations.setDescription('For modem sessions, the number of rate renegotiation requests sent by the local modem.')
sessionStatusActiveModemRemoteRenegotiations = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 102, 1, 76), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusActiveModemRemoteRenegotiations.setStatus('current')
if mibBuilder.loadTexts: sessionStatusActiveModemRemoteRenegotiations.setDescription('For modem sessions, the number of rate renegotiation requests sent by the remote modem.')
sessionStatusActiveModemReceiveLineLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 102, 1, 77), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusActiveModemReceiveLineLevel.setStatus('current')
if mibBuilder.loadTexts: sessionStatusActiveModemReceiveLineLevel.setDescription('For modem sessions, the receive line signal level. This value is given in dB.')
sessionStatusActiveRemoteIPXNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 102, 1, 78), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusActiveRemoteIPXNetwork.setStatus('current')
if mibBuilder.loadTexts: sessionStatusActiveRemoteIPXNetwork.setDescription('The IPX network assigned to the dial-up user.')
sessionStatusActiveRemoteIPXNode = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 102, 1, 79), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusActiveRemoteIPXNode.setStatus('current')
if mibBuilder.loadTexts: sessionStatusActiveRemoteIPXNode.setDescription('The IPX Node number assisgned to the dial-up user')
sessionStatusActiveCleartcpRemoteIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 102, 1, 80), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusActiveCleartcpRemoteIP.setStatus('current')
if mibBuilder.loadTexts: sessionStatusActiveCleartcpRemoteIP.setDescription('Cleartcp Remote IP Address')
sessionStatusActiveCleartcpRemotePort = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 102, 1, 81), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusActiveCleartcpRemotePort.setStatus('current')
if mibBuilder.loadTexts: sessionStatusActiveCleartcpRemotePort.setDescription('Cleartcp Remote Port Address')
sessionStatusActiveTunnelId = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 102, 1, 82), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusActiveTunnelId.setStatus('current')
if mibBuilder.loadTexts: sessionStatusActiveTunnelId.setDescription('Tunnel Id')
sessionStatusActiveLinkId = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 102, 1, 83), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusActiveLinkId.setStatus('current')
if mibBuilder.loadTexts: sessionStatusActiveLinkId.setDescription('Link Id')
sessionStatusInactiveTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 2, 103), )
if mibBuilder.loadTexts: sessionStatusInactiveTable.setStatus('current')
if mibBuilder.loadTexts: sessionStatusInactiveTable.setDescription('The table contains the most recent inactive sessions, up to a maximum of SessionTableSize entries. The bounds of this table at any given time are described by the variables InactiveLowest and InactiveHighest. This table is ordered by session serial number. As new entries are appended to the bottom of the table, the inactive entries with the oldest termination time get aged out from near the top of the table.')
sessionStatusInactiveEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 2, 103, 1), ).setIndexNames((0, "APTIS-MONITOR-MIB", "sessionStatusInactiveSessionID"))
if mibBuilder.loadTexts: sessionStatusInactiveEntry.setStatus('current')
if mibBuilder.loadTexts: sessionStatusInactiveEntry.setDescription('This is the structure of entries in the sessionStatusInactiveTable.')
sessionStatusInactiveSessionID = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 103, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusInactiveSessionID.setStatus('current')
if mibBuilder.loadTexts: sessionStatusInactiveSessionID.setDescription('The serial number of this session, a unique number for this boot era. When combined with the value of BootEra, provides a session number that is unique for the life of the system. Note that these are very sparsely numbered.')
sessionStatusInactiveState = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 103, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("inactive", 0), ("active", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusInactiveState.setStatus('current')
if mibBuilder.loadTexts: sessionStatusInactiveState.setDescription('This variable indicates the state of this session.')
sessionStatusInactivePermanentFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 103, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("switched", 1), ("permanent", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusInactivePermanentFlag.setStatus('current')
if mibBuilder.loadTexts: sessionStatusInactivePermanentFlag.setDescription('This variable indicates whether this session is permanent(2), meaning a long-lasting locally administered session such as a Frame Relay PVC, or switched(1), meaning a short-lived session resulting from a switched call.')
sessionStatusInactiveVpopId = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 103, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusInactiveVpopId.setStatus('current')
if mibBuilder.loadTexts: sessionStatusInactiveVpopId.setDescription('The identifier of the VPOP (administrative Group) to which the session belongs. A value of 0 indicates the default VPOP.')
sessionStatusInactiveName = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 103, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 68))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusInactiveName.setStatus('current')
if mibBuilder.loadTexts: sessionStatusInactiveName.setDescription('The name of the connection peer for this session. During authentication of the session, this field may contain the name submitted by the peer. During this time, the value of timeOfService will be zero. When the value of timeOfService is nonzero, this field will contain a fully authenticated name.')
sessionStatusInactiveRemoteIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 103, 1, 13), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusInactiveRemoteIP.setStatus('current')
if mibBuilder.loadTexts: sessionStatusInactiveRemoteIP.setDescription("The connection peer's IP address. If the link is numbered, then this is the address assigned to the other end of the link. If the link is not numbered, this may be the single IP address of the peer. For PPP connections, this is the result of IPNCP negotiation.")
sessionStatusInactiveRemoteIPMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 103, 1, 14), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusInactiveRemoteIPMask.setStatus('current')
if mibBuilder.loadTexts: sessionStatusInactiveRemoteIPMask.setDescription("The connection peer's IP address mask, used in conjunction with remoteIP.")
sessionStatusInactiveLocalIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 103, 1, 15), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusInactiveLocalIP.setStatus('current')
if mibBuilder.loadTexts: sessionStatusInactiveLocalIP.setDescription('The local IP address for this session. If the link is numbered, then this is the address assigned to the local end of the link. If the link is not numbered, this may be the primary IP address of the system. For PPP connections, this is the result of IPNCP negotiation.')
sessionStatusInactiveLocalIPMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 103, 1, 16), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusInactiveLocalIPMask.setStatus('current')
if mibBuilder.loadTexts: sessionStatusInactiveLocalIPMask.setDescription('The local IP address mask for this session, used in conjunction with localIP.')
sessionStatusInactiveLinkService = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 103, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("unknown", 0), ("none", 1), ("other", 2), ("isdn56K", 3), ("isdn64K", 4), ("isdnV120", 5), ("isdnV110", 6), ("modemV32", 7), ("modemV34", 8), ("modemK56", 9), ("modemV90", 10), ("ethernet", 11), ("t1Trunk", 12), ("loopback", 13), ("hssi", 14), ("hub", 15), ("voice", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusInactiveLinkService.setStatus('current')
if mibBuilder.loadTexts: sessionStatusInactiveLinkService.setDescription('A description of which link technology is being used by the session.')
sessionStatusInactiveServiceMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 103, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))).clone(namedValues=NamedValues(("unknown", 0), ("none", 1), ("other", 2), ("ppp", 3), ("slip", 4), ("frameRelay", 5), ("ciscoHDLC", 6), ("terminalServer", 7), ("telnet", 8), ("rawTCP", 9), ("rlogin", 10), ("l2tp", 11), ("l2f", 12), ("trunk", 13), ("voice", 14), ("tandem", 15), ("hub", 16), ("ftp", 17), ("dvs", 18), ("fax", 19), ("atmp", 20), ("iptest", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusInactiveServiceMode.setStatus('current')
if mibBuilder.loadTexts: sessionStatusInactiveServiceMode.setDescription('A description of which session service is being used by the session.')
sessionStatusInactiveStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 103, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusInactiveStartTime.setStatus('current')
if mibBuilder.loadTexts: sessionStatusInactiveStartTime.setDescription('The time that this session began, in seconds since the system booted.')
sessionStatusInactiveStopTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 103, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusInactiveStopTime.setStatus('current')
if mibBuilder.loadTexts: sessionStatusInactiveStopTime.setDescription('The time that this session stopped, in seconds since the system booted. This variable is only meaningful for sessions having the state inactive(0).')
sessionStatusInactiveTimeOfModemSync = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 103, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusInactiveTimeOfModemSync.setStatus('current')
if mibBuilder.loadTexts: sessionStatusInactiveTimeOfModemSync.setDescription('The time at which the modem synchronization completed, in seconds since the system booted.')
sessionStatusInactiveTimeOfService = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 103, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusInactiveTimeOfService.setStatus('current')
if mibBuilder.loadTexts: sessionStatusInactiveTimeOfService.setDescription('The time that this session entered its first negotiated or configured service, in seconds since the system booted. For example, for a session with serviceMode PPP, the time at which LCP and IPCP negotiations completed and the session was ready to forward user data.')
sessionStatusInactiveTerminatingComponent = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 103, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34))).clone(namedValues=NamedValues(("unknown", 0), ("none", 1), ("other", 2), ("df", 3), ("ds0", 4), ("modem", 5), ("hdlc", 6), ("ppp", 7), ("slip", 8), ("chdlc", 9), ("fr", 10), ("ip", 11), ("telnet", 12), ("cleartcp", 13), ("l2tp", 14), ("ether", 15), ("trunkip", 16), ("fepdf", 17), ("lineip", 18), ("loopback", 19), ("shell", 20), ("rlogin", 21), ("hssi", 22), ("sm", 23), ("vl", 24), ("voip", 25), ("l2f", 26), ("l2ftunnel", 27), ("dvs", 28), ("dvstunnel", 29), ("fax", 30), ("l2tproute", 31), ("atmp", 32), ("atmptunnel", 33), ("iptest", 34)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusInactiveTerminatingComponent.setStatus('current')
if mibBuilder.loadTexts: sessionStatusInactiveTerminatingComponent.setDescription('The component which initiated termination of this session. In cases where there are multiple causes of session termination, only the first cause detected is reported. This variable is only meaningful for sessions having the state inactive(0).')
sessionStatusInactiveTerminationCause = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 103, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusInactiveTerminationCause.setStatus('current')
if mibBuilder.loadTexts: sessionStatusInactiveTerminationCause.setDescription('The cause which initiated termination of this session. In cases where there are multiple causes of session termination, only the first cause detected is reported. This variable is only meaningful for sessions having the state inactive(0).')
sessionStatusInactiveLastComponent = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 103, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34))).clone(namedValues=NamedValues(("unknown", 0), ("none", 1), ("other", 2), ("df", 3), ("ds0", 4), ("modem", 5), ("hdlc", 6), ("ppp", 7), ("slip", 8), ("chdlc", 9), ("fr", 10), ("ip", 11), ("telnet", 12), ("cleartcp", 13), ("l2tp", 14), ("ether", 15), ("trunkip", 16), ("fepdf", 17), ("lineip", 18), ("loopback", 19), ("shell", 20), ("rlogin", 21), ("hssi", 22), ("sm", 23), ("vl", 24), ("voip", 25), ("l2f", 26), ("l2ftunnel", 27), ("dvs", 28), ("dvstunnel", 29), ("fax", 30), ("l2tproute", 31), ("atmp", 32), ("atmptunnel", 33), ("iptest", 34)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusInactiveLastComponent.setStatus('current')
if mibBuilder.loadTexts: sessionStatusInactiveLastComponent.setDescription('The last component which was connected in this session.')
sessionStatusInactiveLayer1Slot = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 103, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 18))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusInactiveLayer1Slot.setStatus('current')
if mibBuilder.loadTexts: sessionStatusInactiveLayer1Slot.setDescription('The slot where the physical layer of this session is terminated.')
sessionStatusInactiveLayer2Slot = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 103, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 18))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusInactiveLayer2Slot.setStatus('current')
if mibBuilder.loadTexts: sessionStatusInactiveLayer2Slot.setDescription('The slot where the data link portion of this session is terminated')
sessionStatusInactiveCalledNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 103, 1, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusInactiveCalledNumber.setStatus('current')
if mibBuilder.loadTexts: sessionStatusInactiveCalledNumber.setDescription('16 digit number of called station (if available)')
sessionStatusInactiveCallingNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 103, 1, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusInactiveCallingNumber.setStatus('current')
if mibBuilder.loadTexts: sessionStatusInactiveCallingNumber.setDescription('16 digit number of calling station (if available)')
sessionStatusInactiveOriginateMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 103, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("answer", 0), ("originate", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusInactiveOriginateMode.setStatus('current')
if mibBuilder.loadTexts: sessionStatusInactiveOriginateMode.setDescription('The direction of the physical layer call associated with this session')
sessionStatusInactiveOctetsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 103, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusInactiveOctetsIn.setStatus('current')
if mibBuilder.loadTexts: sessionStatusInactiveOctetsIn.setDescription('The number of octets received from the remote user. This value will be zero until a session is terminated.')
sessionStatusInactiveOctetsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 103, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusInactiveOctetsOut.setStatus('current')
if mibBuilder.loadTexts: sessionStatusInactiveOctetsOut.setDescription('The number of octets sent to the remote user. This value will be zero until a session is terminated.')
sessionStatusInactivePacketsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 103, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusInactivePacketsIn.setStatus('current')
if mibBuilder.loadTexts: sessionStatusInactivePacketsIn.setDescription('The number of packets received from the remote user. This value will be zero until a session is terminated.')
sessionStatusInactivePacketsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 103, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusInactivePacketsOut.setStatus('current')
if mibBuilder.loadTexts: sessionStatusInactivePacketsOut.setDescription('The number of packets sent to the remote user. This value will be zero until a session is terminated.')
sessionStatusInactiveMultiLinkId = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 103, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusInactiveMultiLinkId.setStatus('current')
if mibBuilder.loadTexts: sessionStatusInactiveMultiLinkId.setDescription('The multi-link identifier value for PPP calls where the multi-link protocol was negotiated.')
sessionStatusInactivePort = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 103, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusInactivePort.setStatus('current')
if mibBuilder.loadTexts: sessionStatusInactivePort.setDescription('The number of the DS1 for this session, relative to layer1Slot.')
sessionStatusInactiveTimeslot = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 103, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusInactiveTimeslot.setStatus('current')
if mibBuilder.loadTexts: sessionStatusInactiveTimeslot.setDescription('The number of the DS0 for this session, relative to port.')
sessionStatusInactiveLinkCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 103, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusInactiveLinkCount.setStatus('current')
if mibBuilder.loadTexts: sessionStatusInactiveLinkCount.setDescription('The number of sessions sharing the same remote IP address as this session. After a session is terminated, this value will represent the number of sessions at the time of termination.')
sessionStatusInactiveTxStartDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 103, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusInactiveTxStartDataRate.setStatus('current')
if mibBuilder.loadTexts: sessionStatusInactiveTxStartDataRate.setDescription('The transmit DCE data rate for this session. In the case of modem sessions, this will be the DCE rate reported as a result of initial modem negotiation, and may not track rate chanes during the call. For ISDN sessions, this will be the actual data service rate of the call. For Frame Relay sessions, this will be the nominal speed of the Frame Relay Physical Interface, even though multiple sessions may be sharing that Physical Interface. For other sessions, this will be the nominal speed of the physical interface. In no case should this be interepreted as a Quality-of-Service guarantee, or as the current line utilization or effective bandwidth on the interface. Note also that in the case of PPP multilink, this specifies the rate of only this link in the bundle, and not the aggregate rate of all links in the bundle.')
sessionStatusInactiveRxStartDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 103, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusInactiveRxStartDataRate.setStatus('current')
if mibBuilder.loadTexts: sessionStatusInactiveRxStartDataRate.setDescription('The receive data rate for this session. In the case of modem sessions, this will be the DCE rate reported as a result of initial modem negotiation, and may not track rate chanes during the call. For ISDN sessions, this will be the actual data service rate of the call. For Frame Relay sessions, this will be the nominal speed of the Frame Relay Physical Interface, even though multiple sessions may be sharing that Physical Interface. For other sessions, this will be the nominal speed of the physical interface. In no case should this be interepreted as a Quality-of-Service guarantee, or as the current line utilization or effective bandwidth on the interface. Note also that in the case of PPP multilink, this specifies the rate of only this link in the bundle, and not the aggregate rate of all links in the bundle.')
sessionStatusInactiveTxEndDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 103, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusInactiveTxEndDataRate.setStatus('current')
if mibBuilder.loadTexts: sessionStatusInactiveTxEndDataRate.setDescription('The transmit data rate at the end of a modem session.')
sessionStatusInactiveRxEndDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 103, 1, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusInactiveRxEndDataRate.setStatus('current')
if mibBuilder.loadTexts: sessionStatusInactiveRxEndDataRate.setDescription('The receive data rate at the end of a modem session.')
sessionStatusInactiveTxMinDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 103, 1, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusInactiveTxMinDataRate.setStatus('current')
if mibBuilder.loadTexts: sessionStatusInactiveTxMinDataRate.setDescription('The minimum transmit data rate during a modem session.')
sessionStatusInactiveRxMinDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 103, 1, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusInactiveRxMinDataRate.setStatus('current')
if mibBuilder.loadTexts: sessionStatusInactiveRxMinDataRate.setDescription('The minimum receive data rate during a modem session.')
sessionStatusInactiveTxMaxDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 103, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusInactiveTxMaxDataRate.setStatus('current')
if mibBuilder.loadTexts: sessionStatusInactiveTxMaxDataRate.setDescription('The maximum transmit data rate during a modem session.')
sessionStatusInactiveRxMaxDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 103, 1, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusInactiveRxMaxDataRate.setStatus('current')
if mibBuilder.loadTexts: sessionStatusInactiveRxMaxDataRate.setDescription('The maximum receive data rate during a modem session.')
sessionStatusInactiveIop = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 103, 1, 47), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusInactiveIop.setStatus('current')
if mibBuilder.loadTexts: sessionStatusInactiveIop.setDescription('The I/O processor where this session is terminated.')
sessionStatusInactiveDmm = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 103, 1, 48), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusInactiveDmm.setStatus('current')
if mibBuilder.loadTexts: sessionStatusInactiveDmm.setDescription('The Digital Modem Module where this session is terminated.')
sessionStatusInactivePack = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 103, 1, 49), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusInactivePack.setStatus('current')
if mibBuilder.loadTexts: sessionStatusInactivePack.setDescription('The integrated circuit pack where this session is terminated.')
sessionStatusInactiveDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 103, 1, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusInactiveDevice.setStatus('current')
if mibBuilder.loadTexts: sessionStatusInactiveDevice.setDescription('The modem/hdlc where this session is terminated.')
sessionStatusInactiveTdmStream = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 103, 1, 51), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusInactiveTdmStream.setStatus('current')
if mibBuilder.loadTexts: sessionStatusInactiveTdmStream.setDescription('The TDM highway stream associated with this session.')
sessionStatusInactiveTdmTimeSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 103, 1, 52), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusInactiveTdmTimeSlot.setStatus('current')
if mibBuilder.loadTexts: sessionStatusInactiveTdmTimeSlot.setDescription('The TDM highway time-slot associated with this session.')
sessionStatusInactiveTerminationReason = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 103, 1, 53), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusInactiveTerminationReason.setStatus('current')
if mibBuilder.loadTexts: sessionStatusInactiveTerminationReason.setDescription('A textual description of the cause which initiated termination of this session. In cases where there are multiple causes of session termination, only the first cause detected is reported.')
sessionStatusInactiveDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 103, 1, 54), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusInactiveDuration.setStatus('current')
if mibBuilder.loadTexts: sessionStatusInactiveDuration.setDescription('The number of seconds this session has been active.')
sessionStatusInactiveDurationHMS = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 103, 1, 55), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusInactiveDurationHMS.setStatus('current')
if mibBuilder.loadTexts: sessionStatusInactiveDurationHMS.setDescription('The length of time this session has been active, expressed in DDD HH:MM:SSS.000.')
sessionStatusInactiveSs7SessionId = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 103, 1, 56), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 41))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusInactiveSs7SessionId.setStatus('current')
if mibBuilder.loadTexts: sessionStatusInactiveSs7SessionId.setDescription('A uniquie identifier for this session within the ss7 Network. If this call was not originated using ss7 signalling, this string will be null.')
sessionStatusInactiveModemNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 103, 1, 57), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusInactiveModemNumber.setStatus('current')
if mibBuilder.loadTexts: sessionStatusInactiveModemNumber.setDescription('The individual modem where this session is terminated, numbered from one to the maximum number of modems on the slot card.')
sessionStatusInactiveTunnelType = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 103, 1, 58), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 0), ("none", 1), ("other", 2), ("l2f", 3), ("l2tp", 4), ("dvs", 5), ("atmp", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusInactiveTunnelType.setStatus('current')
if mibBuilder.loadTexts: sessionStatusInactiveTunnelType.setDescription('The tunneling protocol being used for this session.')
sessionStatusInactiveTunnelMediumType = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 103, 1, 59), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("none", 1), ("other", 2), ("ip", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusInactiveTunnelMediumType.setStatus('current')
if mibBuilder.loadTexts: sessionStatusInactiveTunnelMediumType.setDescription('The tunneling medium protocol being used for this session.')
sessionStatusInactiveTunnelServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 103, 1, 60), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusInactiveTunnelServerAddress.setStatus('current')
if mibBuilder.loadTexts: sessionStatusInactiveTunnelServerAddress.setDescription('The IP address of the remote machine terminating the tunnel for this session.')
sessionStatusInactiveCallClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 103, 1, 61), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusInactiveCallClass.setStatus('current')
if mibBuilder.loadTexts: sessionStatusInactiveCallClass.setDescription('The class of this call.')
sessionStatusInactiveTandemPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 103, 1, 62), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusInactiveTandemPort.setStatus('current')
if mibBuilder.loadTexts: sessionStatusInactiveTandemPort.setDescription('The port used for the outbound portion of a tandem call, if applicable.')
sessionStatusInactiveTandemTimeslot = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 103, 1, 63), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusInactiveTandemTimeslot.setStatus('current')
if mibBuilder.loadTexts: sessionStatusInactiveTandemTimeslot.setDescription('The timeslot used for the outbound portion of a tandem call, if applicable.')
sessionStatusInactiveCallClassArray = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 103, 1, 64), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusInactiveCallClassArray.setStatus('current')
if mibBuilder.loadTexts: sessionStatusInactiveCallClassArray.setDescription('An array of octets representing the class of this call.')
sessionStatusInactiveCallClassLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 103, 1, 65), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusInactiveCallClassLen.setStatus('current')
if mibBuilder.loadTexts: sessionStatusInactiveCallClassLen.setDescription('The number of octets in callClassArray.')
sessionStatusInactiveActualAuthMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 103, 1, 66), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("radius", 1), ("local", 2), ("remote", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusInactiveActualAuthMethod.setStatus('current')
if mibBuilder.loadTexts: sessionStatusInactiveActualAuthMethod.setDescription('The actual authentication method which was used to gain access to services. Radius, Local, Remote.')
sessionStatusInactiveModemModulation = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 103, 1, 67), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("none", 0), ("unknown", 1), ("bell103", 2), ("bell208", 3), ("bell212", 4), ("v17", 5), ("v21", 6), ("v22", 7), ("v22bis", 8), ("v23", 9), ("v27", 10), ("v29", 11), ("v32", 12), ("v32bis", 13), ("v33", 14), ("v34", 15), ("vFC", 16), ("k56", 17), ("v90", 18)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusInactiveModemModulation.setStatus('current')
if mibBuilder.loadTexts: sessionStatusInactiveModemModulation.setDescription('For modem sessions, the modulation protocol used, if any.')
sessionStatusInactiveModemErrorCorrection = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 103, 1, 68), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("unknown", 1), ("mNP", 2), ("v42", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusInactiveModemErrorCorrection.setStatus('current')
if mibBuilder.loadTexts: sessionStatusInactiveModemErrorCorrection.setDescription('For modem sessions, the error correction protocol used, if any.')
sessionStatusInactiveModemDataCompression = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 103, 1, 69), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("unknown", 1), ("mNP5", 2), ("v42bis", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusInactiveModemDataCompression.setStatus('current')
if mibBuilder.loadTexts: sessionStatusInactiveModemDataCompression.setDescription('For modem sessions, the data compression protocol used, if any.')
sessionStatusInactiveModemTxBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 103, 1, 70), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusInactiveModemTxBlocks.setStatus('current')
if mibBuilder.loadTexts: sessionStatusInactiveModemTxBlocks.setDescription('For modem sessions, the number of blocks transmitted by the modem.')
sessionStatusInactiveModemRetransmits = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 103, 1, 71), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusInactiveModemRetransmits.setStatus('current')
if mibBuilder.loadTexts: sessionStatusInactiveModemRetransmits.setDescription('For modem sessions, the number of packets retransmitted by the modem.')
sessionStatusInactiveModemSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 103, 1, 72), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusInactiveModemSNR.setStatus('current')
if mibBuilder.loadTexts: sessionStatusInactiveModemSNR.setDescription('For modem sessions, the Signal-to-Noise Ratio measured at the start of the connection. This value is given in dB.')
sessionStatusInactiveModemLocalRetrains = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 103, 1, 73), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusInactiveModemLocalRetrains.setStatus('current')
if mibBuilder.loadTexts: sessionStatusInactiveModemLocalRetrains.setDescription('For modem sessions, the number of retrain requests sent by the local modem.')
sessionStatusInactiveModemRemoteRetrains = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 103, 1, 74), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusInactiveModemRemoteRetrains.setStatus('current')
if mibBuilder.loadTexts: sessionStatusInactiveModemRemoteRetrains.setDescription('For modem sessions, the number of retrain requests sent by the remote modem.')
sessionStatusInactiveModemLocalRenegotiations = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 103, 1, 75), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusInactiveModemLocalRenegotiations.setStatus('current')
if mibBuilder.loadTexts: sessionStatusInactiveModemLocalRenegotiations.setDescription('For modem sessions, the number of rate renegotiation requests sent by the local modem.')
sessionStatusInactiveModemRemoteRenegotiations = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 103, 1, 76), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusInactiveModemRemoteRenegotiations.setStatus('current')
if mibBuilder.loadTexts: sessionStatusInactiveModemRemoteRenegotiations.setDescription('For modem sessions, the number of rate renegotiation requests sent by the remote modem.')
sessionStatusInactiveModemReceiveLineLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 103, 1, 77), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusInactiveModemReceiveLineLevel.setStatus('current')
if mibBuilder.loadTexts: sessionStatusInactiveModemReceiveLineLevel.setDescription('For modem sessions, the receive line signal level. This value is given in dB.')
sessionStatusInactiveRemoteIPXNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 103, 1, 78), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusInactiveRemoteIPXNetwork.setStatus('current')
if mibBuilder.loadTexts: sessionStatusInactiveRemoteIPXNetwork.setDescription('The IPX network assigned to the dial-up user.')
sessionStatusInactiveRemoteIPXNode = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 103, 1, 79), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusInactiveRemoteIPXNode.setStatus('current')
if mibBuilder.loadTexts: sessionStatusInactiveRemoteIPXNode.setDescription('The IPX Node number assisgned to the dial-up user')
sessionStatusInactiveCleartcpRemoteIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 103, 1, 80), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusInactiveCleartcpRemoteIP.setStatus('current')
if mibBuilder.loadTexts: sessionStatusInactiveCleartcpRemoteIP.setDescription('Cleartcp Remote IP Address')
sessionStatusInactiveCleartcpRemotePort = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 103, 1, 81), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusInactiveCleartcpRemotePort.setStatus('current')
if mibBuilder.loadTexts: sessionStatusInactiveCleartcpRemotePort.setDescription('Cleartcp Remote Port Address')
sessionStatusInactiveTunnelId = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 103, 1, 82), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusInactiveTunnelId.setStatus('current')
if mibBuilder.loadTexts: sessionStatusInactiveTunnelId.setDescription('Tunnel Id')
sessionStatusInactiveLinkId = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 103, 1, 83), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusInactiveLinkId.setStatus('current')
if mibBuilder.loadTexts: sessionStatusInactiveLinkId.setDescription('Link Id')
sessionStatusReverseTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 2, 106), )
if mibBuilder.loadTexts: sessionStatusReverseTable.setStatus('current')
if mibBuilder.loadTexts: sessionStatusReverseTable.setDescription('Session Status Reverse Configuration Information.')
sessionStatusReverseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 2, 106, 1), ).setIndexNames((0, "APTIS-MONITOR-MIB", "sessionStatusReverseSessionID"))
if mibBuilder.loadTexts: sessionStatusReverseEntry.setStatus('current')
if mibBuilder.loadTexts: sessionStatusReverseEntry.setDescription('This is the structure of entries in the sessionStatusReverseTable.')
sessionStatusReverseSessionID = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 106, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusReverseSessionID.setStatus('current')
if mibBuilder.loadTexts: sessionStatusReverseSessionID.setDescription('The serial number of this session, a unique number for this boot era. When combined with the value of BootEra, provides a session number that is unique for the life of the system. Note that these are very sparsely numbered.')
sessionStatusReverseState = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 106, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("inactive", 0), ("active", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusReverseState.setStatus('current')
if mibBuilder.loadTexts: sessionStatusReverseState.setDescription('This variable indicates the state of this session.')
sessionStatusReversePermanentFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 106, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("switched", 1), ("permanent", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusReversePermanentFlag.setStatus('current')
if mibBuilder.loadTexts: sessionStatusReversePermanentFlag.setDescription('This variable indicates whether this session is permanent(2), meaning a long-lasting locally administered session such as a Frame Relay PVC, or switched(1), meaning a short-lived session resulting from a switched call.')
sessionStatusReverseVpopId = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 106, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusReverseVpopId.setStatus('current')
if mibBuilder.loadTexts: sessionStatusReverseVpopId.setDescription('The identifier of the VPOP (administrative Group) to which the session belongs. A value of 0 indicates the default VPOP.')
sessionStatusReverseName = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 106, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 68))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusReverseName.setStatus('current')
if mibBuilder.loadTexts: sessionStatusReverseName.setDescription('The name of the connection peer for this session. During authentication of the session, this field may contain the name submitted by the peer. During this time, the value of timeOfService will be zero. When the value of timeOfService is nonzero, this field will contain a fully authenticated name.')
sessionStatusReverseRemoteIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 106, 1, 13), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusReverseRemoteIP.setStatus('current')
if mibBuilder.loadTexts: sessionStatusReverseRemoteIP.setDescription("The connection peer's IP address. If the link is numbered, then this is the address assigned to the other end of the link. If the link is not numbered, this may be the single IP address of the peer. For PPP connections, this is the result of IPNCP negotiation.")
sessionStatusReverseRemoteIPMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 106, 1, 14), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusReverseRemoteIPMask.setStatus('current')
if mibBuilder.loadTexts: sessionStatusReverseRemoteIPMask.setDescription("The connection peer's IP address mask, used in conjunction with remoteIP.")
sessionStatusReverseLocalIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 106, 1, 15), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusReverseLocalIP.setStatus('current')
if mibBuilder.loadTexts: sessionStatusReverseLocalIP.setDescription('The local IP address for this session. If the link is numbered, then this is the address assigned to the local end of the link. If the link is not numbered, this may be the primary IP address of the system. For PPP connections, this is the result of IPNCP negotiation.')
sessionStatusReverseLocalIPMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 106, 1, 16), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusReverseLocalIPMask.setStatus('current')
if mibBuilder.loadTexts: sessionStatusReverseLocalIPMask.setDescription('The local IP address mask for this session, used in conjunction with localIP.')
sessionStatusReverseLinkService = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 106, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("unknown", 0), ("none", 1), ("other", 2), ("isdn56K", 3), ("isdn64K", 4), ("isdnV120", 5), ("isdnV110", 6), ("modemV32", 7), ("modemV34", 8), ("modemK56", 9), ("modemV90", 10), ("ethernet", 11), ("t1Trunk", 12), ("loopback", 13), ("hssi", 14), ("hub", 15), ("voice", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusReverseLinkService.setStatus('current')
if mibBuilder.loadTexts: sessionStatusReverseLinkService.setDescription('A description of which link technology is being used by the session.')
sessionStatusReverseServiceMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 106, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))).clone(namedValues=NamedValues(("unknown", 0), ("none", 1), ("other", 2), ("ppp", 3), ("slip", 4), ("frameRelay", 5), ("ciscoHDLC", 6), ("terminalServer", 7), ("telnet", 8), ("rawTCP", 9), ("rlogin", 10), ("l2tp", 11), ("l2f", 12), ("trunk", 13), ("voice", 14), ("tandem", 15), ("hub", 16), ("ftp", 17), ("dvs", 18), ("fax", 19), ("atmp", 20), ("iptest", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusReverseServiceMode.setStatus('current')
if mibBuilder.loadTexts: sessionStatusReverseServiceMode.setDescription('A description of which session service is being used by the session.')
sessionStatusReverseStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 106, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusReverseStartTime.setStatus('current')
if mibBuilder.loadTexts: sessionStatusReverseStartTime.setDescription('The time that this session began, in seconds since the system booted.')
sessionStatusReverseStopTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 106, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusReverseStopTime.setStatus('current')
if mibBuilder.loadTexts: sessionStatusReverseStopTime.setDescription('The time that this session stopped, in seconds since the system booted. This variable is only meaningful for sessions having the state inactive(0).')
sessionStatusReverseTimeOfModemSync = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 106, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusReverseTimeOfModemSync.setStatus('current')
if mibBuilder.loadTexts: sessionStatusReverseTimeOfModemSync.setDescription('The time at which the modem synchronization completed, in seconds since the system booted.')
sessionStatusReverseTimeOfService = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 106, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusReverseTimeOfService.setStatus('current')
if mibBuilder.loadTexts: sessionStatusReverseTimeOfService.setDescription('The time that this session entered its first negotiated or configured service, in seconds since the system booted. For example, for a session with serviceMode PPP, the time at which LCP and IPCP negotiations completed and the session was ready to forward user data.')
sessionStatusReverseTerminatingComponent = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 106, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34))).clone(namedValues=NamedValues(("unknown", 0), ("none", 1), ("other", 2), ("df", 3), ("ds0", 4), ("modem", 5), ("hdlc", 6), ("ppp", 7), ("slip", 8), ("chdlc", 9), ("fr", 10), ("ip", 11), ("telnet", 12), ("cleartcp", 13), ("l2tp", 14), ("ether", 15), ("trunkip", 16), ("fepdf", 17), ("lineip", 18), ("loopback", 19), ("shell", 20), ("rlogin", 21), ("hssi", 22), ("sm", 23), ("vl", 24), ("voip", 25), ("l2f", 26), ("l2ftunnel", 27), ("dvs", 28), ("dvstunnel", 29), ("fax", 30), ("l2tproute", 31), ("atmp", 32), ("atmptunnel", 33), ("iptest", 34)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusReverseTerminatingComponent.setStatus('current')
if mibBuilder.loadTexts: sessionStatusReverseTerminatingComponent.setDescription('The component which initiated termination of this session. In cases where there are multiple causes of session termination, only the first cause detected is reported. This variable is only meaningful for sessions having the state inactive(0).')
sessionStatusReverseTerminationCause = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 106, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusReverseTerminationCause.setStatus('current')
if mibBuilder.loadTexts: sessionStatusReverseTerminationCause.setDescription('The cause which initiated termination of this session. In cases where there are multiple causes of session termination, only the first cause detected is reported. This variable is only meaningful for sessions having the state inactive(0).')
sessionStatusReverseLastComponent = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 106, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34))).clone(namedValues=NamedValues(("unknown", 0), ("none", 1), ("other", 2), ("df", 3), ("ds0", 4), ("modem", 5), ("hdlc", 6), ("ppp", 7), ("slip", 8), ("chdlc", 9), ("fr", 10), ("ip", 11), ("telnet", 12), ("cleartcp", 13), ("l2tp", 14), ("ether", 15), ("trunkip", 16), ("fepdf", 17), ("lineip", 18), ("loopback", 19), ("shell", 20), ("rlogin", 21), ("hssi", 22), ("sm", 23), ("vl", 24), ("voip", 25), ("l2f", 26), ("l2ftunnel", 27), ("dvs", 28), ("dvstunnel", 29), ("fax", 30), ("l2tproute", 31), ("atmp", 32), ("atmptunnel", 33), ("iptest", 34)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusReverseLastComponent.setStatus('current')
if mibBuilder.loadTexts: sessionStatusReverseLastComponent.setDescription('The last component which was connected in this session.')
sessionStatusReverseLayer1Slot = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 106, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 18))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusReverseLayer1Slot.setStatus('current')
if mibBuilder.loadTexts: sessionStatusReverseLayer1Slot.setDescription('The slot where the physical layer of this session is terminated.')
sessionStatusReverseLayer2Slot = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 106, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 18))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusReverseLayer2Slot.setStatus('current')
if mibBuilder.loadTexts: sessionStatusReverseLayer2Slot.setDescription('The slot where the data link portion of this session is terminated')
sessionStatusReverseCalledNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 106, 1, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusReverseCalledNumber.setStatus('current')
if mibBuilder.loadTexts: sessionStatusReverseCalledNumber.setDescription('16 digit number of called station (if available)')
sessionStatusReverseCallingNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 106, 1, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusReverseCallingNumber.setStatus('current')
if mibBuilder.loadTexts: sessionStatusReverseCallingNumber.setDescription('16 digit number of calling station (if available)')
sessionStatusReverseOriginateMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 106, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("answer", 0), ("originate", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusReverseOriginateMode.setStatus('current')
if mibBuilder.loadTexts: sessionStatusReverseOriginateMode.setDescription('The direction of the physical layer call associated with this session')
sessionStatusReverseOctetsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 106, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusReverseOctetsIn.setStatus('current')
if mibBuilder.loadTexts: sessionStatusReverseOctetsIn.setDescription('The number of octets received from the remote user. This value will be zero until a session is terminated.')
sessionStatusReverseOctetsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 106, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusReverseOctetsOut.setStatus('current')
if mibBuilder.loadTexts: sessionStatusReverseOctetsOut.setDescription('The number of octets sent to the remote user. This value will be zero until a session is terminated.')
sessionStatusReversePacketsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 106, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusReversePacketsIn.setStatus('current')
if mibBuilder.loadTexts: sessionStatusReversePacketsIn.setDescription('The number of packets received from the remote user. This value will be zero until a session is terminated.')
sessionStatusReversePacketsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 106, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusReversePacketsOut.setStatus('current')
if mibBuilder.loadTexts: sessionStatusReversePacketsOut.setDescription('The number of packets sent to the remote user. This value will be zero until a session is terminated.')
sessionStatusReverseMultiLinkId = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 106, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusReverseMultiLinkId.setStatus('current')
if mibBuilder.loadTexts: sessionStatusReverseMultiLinkId.setDescription('The multi-link identifier value for PPP calls where the multi-link protocol was negotiated.')
sessionStatusReversePort = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 106, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusReversePort.setStatus('current')
if mibBuilder.loadTexts: sessionStatusReversePort.setDescription('The number of the DS1 for this session, relative to layer1Slot.')
sessionStatusReverseTimeslot = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 106, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusReverseTimeslot.setStatus('current')
if mibBuilder.loadTexts: sessionStatusReverseTimeslot.setDescription('The number of the DS0 for this session, relative to port.')
sessionStatusReverseLinkCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 106, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusReverseLinkCount.setStatus('current')
if mibBuilder.loadTexts: sessionStatusReverseLinkCount.setDescription('The number of sessions sharing the same remote IP address as this session. After a session is terminated, this value will represent the number of sessions at the time of termination.')
sessionStatusReverseTxStartDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 106, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusReverseTxStartDataRate.setStatus('current')
if mibBuilder.loadTexts: sessionStatusReverseTxStartDataRate.setDescription('The transmit DCE data rate for this session. In the case of modem sessions, this will be the DCE rate reported as a result of initial modem negotiation, and may not track rate chanes during the call. For ISDN sessions, this will be the actual data service rate of the call. For Frame Relay sessions, this will be the nominal speed of the Frame Relay Physical Interface, even though multiple sessions may be sharing that Physical Interface. For other sessions, this will be the nominal speed of the physical interface. In no case should this be interepreted as a Quality-of-Service guarantee, or as the current line utilization or effective bandwidth on the interface. Note also that in the case of PPP multilink, this specifies the rate of only this link in the bundle, and not the aggregate rate of all links in the bundle.')
sessionStatusReverseRxStartDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 106, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusReverseRxStartDataRate.setStatus('current')
if mibBuilder.loadTexts: sessionStatusReverseRxStartDataRate.setDescription('The receive data rate for this session. In the case of modem sessions, this will be the DCE rate reported as a result of initial modem negotiation, and may not track rate chanes during the call. For ISDN sessions, this will be the actual data service rate of the call. For Frame Relay sessions, this will be the nominal speed of the Frame Relay Physical Interface, even though multiple sessions may be sharing that Physical Interface. For other sessions, this will be the nominal speed of the physical interface. In no case should this be interepreted as a Quality-of-Service guarantee, or as the current line utilization or effective bandwidth on the interface. Note also that in the case of PPP multilink, this specifies the rate of only this link in the bundle, and not the aggregate rate of all links in the bundle.')
sessionStatusReverseTxEndDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 106, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusReverseTxEndDataRate.setStatus('current')
if mibBuilder.loadTexts: sessionStatusReverseTxEndDataRate.setDescription('The transmit data rate at the end of a modem session.')
sessionStatusReverseRxEndDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 106, 1, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusReverseRxEndDataRate.setStatus('current')
if mibBuilder.loadTexts: sessionStatusReverseRxEndDataRate.setDescription('The receive data rate at the end of a modem session.')
sessionStatusReverseTxMinDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 106, 1, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusReverseTxMinDataRate.setStatus('current')
if mibBuilder.loadTexts: sessionStatusReverseTxMinDataRate.setDescription('The minimum transmit data rate during a modem session.')
sessionStatusReverseRxMinDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 106, 1, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusReverseRxMinDataRate.setStatus('current')
if mibBuilder.loadTexts: sessionStatusReverseRxMinDataRate.setDescription('The minimum receive data rate during a modem session.')
sessionStatusReverseTxMaxDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 106, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusReverseTxMaxDataRate.setStatus('current')
if mibBuilder.loadTexts: sessionStatusReverseTxMaxDataRate.setDescription('The maximum transmit data rate during a modem session.')
sessionStatusReverseRxMaxDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 106, 1, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusReverseRxMaxDataRate.setStatus('current')
if mibBuilder.loadTexts: sessionStatusReverseRxMaxDataRate.setDescription('The maximum receive data rate during a modem session.')
sessionStatusReverseIop = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 106, 1, 47), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusReverseIop.setStatus('current')
if mibBuilder.loadTexts: sessionStatusReverseIop.setDescription('The I/O processor where this session is terminated.')
sessionStatusReverseDmm = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 106, 1, 48), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusReverseDmm.setStatus('current')
if mibBuilder.loadTexts: sessionStatusReverseDmm.setDescription('The Digital Modem Module where this session is terminated.')
sessionStatusReversePack = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 106, 1, 49), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusReversePack.setStatus('current')
if mibBuilder.loadTexts: sessionStatusReversePack.setDescription('The integrated circuit pack where this session is terminated.')
sessionStatusReverseDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 106, 1, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusReverseDevice.setStatus('current')
if mibBuilder.loadTexts: sessionStatusReverseDevice.setDescription('The modem/hdlc where this session is terminated.')
sessionStatusReverseTdmStream = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 106, 1, 51), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusReverseTdmStream.setStatus('current')
if mibBuilder.loadTexts: sessionStatusReverseTdmStream.setDescription('The TDM highway stream associated with this session.')
sessionStatusReverseTdmTimeSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 106, 1, 52), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusReverseTdmTimeSlot.setStatus('current')
if mibBuilder.loadTexts: sessionStatusReverseTdmTimeSlot.setDescription('The TDM highway time-slot associated with this session.')
sessionStatusReverseTerminationReason = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 106, 1, 53), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusReverseTerminationReason.setStatus('current')
if mibBuilder.loadTexts: sessionStatusReverseTerminationReason.setDescription('A textual description of the cause which initiated termination of this session. In cases where there are multiple causes of session termination, only the first cause detected is reported.')
sessionStatusReverseDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 106, 1, 54), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusReverseDuration.setStatus('current')
if mibBuilder.loadTexts: sessionStatusReverseDuration.setDescription('The number of seconds this session has been active.')
sessionStatusReverseDurationHMS = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 106, 1, 55), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusReverseDurationHMS.setStatus('current')
if mibBuilder.loadTexts: sessionStatusReverseDurationHMS.setDescription('The length of time this session has been active, expressed in DDD HH:MM:SSS.000.')
sessionStatusReverseSs7SessionId = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 106, 1, 56), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 41))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusReverseSs7SessionId.setStatus('current')
if mibBuilder.loadTexts: sessionStatusReverseSs7SessionId.setDescription('A uniquie identifier for this session within the ss7 Network. If this call was not originated using ss7 signalling, this string will be null.')
sessionStatusReverseModemNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 106, 1, 57), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusReverseModemNumber.setStatus('current')
if mibBuilder.loadTexts: sessionStatusReverseModemNumber.setDescription('The individual modem where this session is terminated, numbered from one to the maximum number of modems on the slot card.')
sessionStatusReverseTunnelType = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 106, 1, 58), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 0), ("none", 1), ("other", 2), ("l2f", 3), ("l2tp", 4), ("dvs", 5), ("atmp", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusReverseTunnelType.setStatus('current')
if mibBuilder.loadTexts: sessionStatusReverseTunnelType.setDescription('The tunneling protocol being used for this session.')
sessionStatusReverseTunnelMediumType = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 106, 1, 59), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("none", 1), ("other", 2), ("ip", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusReverseTunnelMediumType.setStatus('current')
if mibBuilder.loadTexts: sessionStatusReverseTunnelMediumType.setDescription('The tunneling medium protocol being used for this session.')
sessionStatusReverseTunnelServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 106, 1, 60), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusReverseTunnelServerAddress.setStatus('current')
if mibBuilder.loadTexts: sessionStatusReverseTunnelServerAddress.setDescription('The IP address of the remote machine terminating the tunnel for this session.')
sessionStatusReverseCallClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 106, 1, 61), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusReverseCallClass.setStatus('current')
if mibBuilder.loadTexts: sessionStatusReverseCallClass.setDescription('The class of this call.')
sessionStatusReverseTandemPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 106, 1, 62), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusReverseTandemPort.setStatus('current')
if mibBuilder.loadTexts: sessionStatusReverseTandemPort.setDescription('The port used for the outbound portion of a tandem call, if applicable.')
sessionStatusReverseTandemTimeslot = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 106, 1, 63), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusReverseTandemTimeslot.setStatus('current')
if mibBuilder.loadTexts: sessionStatusReverseTandemTimeslot.setDescription('The timeslot used for the outbound portion of a tandem call, if applicable.')
sessionStatusReverseCallClassArray = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 106, 1, 64), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusReverseCallClassArray.setStatus('current')
if mibBuilder.loadTexts: sessionStatusReverseCallClassArray.setDescription('An array of octets representing the class of this call.')
sessionStatusReverseCallClassLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 106, 1, 65), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusReverseCallClassLen.setStatus('current')
if mibBuilder.loadTexts: sessionStatusReverseCallClassLen.setDescription('The number of octets in callClassArray.')
sessionStatusReverseActualAuthMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 106, 1, 66), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("radius", 1), ("local", 2), ("remote", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusReverseActualAuthMethod.setStatus('current')
if mibBuilder.loadTexts: sessionStatusReverseActualAuthMethod.setDescription('The actual authentication method which was used to gain access to services. Radius, Local, Remote.')
sessionStatusReverseModemModulation = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 106, 1, 67), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("none", 0), ("unknown", 1), ("bell103", 2), ("bell208", 3), ("bell212", 4), ("v17", 5), ("v21", 6), ("v22", 7), ("v22bis", 8), ("v23", 9), ("v27", 10), ("v29", 11), ("v32", 12), ("v32bis", 13), ("v33", 14), ("v34", 15), ("vFC", 16), ("k56", 17), ("v90", 18)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusReverseModemModulation.setStatus('current')
if mibBuilder.loadTexts: sessionStatusReverseModemModulation.setDescription('For modem sessions, the modulation protocol used, if any.')
sessionStatusReverseModemErrorCorrection = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 106, 1, 68), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("unknown", 1), ("mNP", 2), ("v42", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusReverseModemErrorCorrection.setStatus('current')
if mibBuilder.loadTexts: sessionStatusReverseModemErrorCorrection.setDescription('For modem sessions, the error correction protocol used, if any.')
sessionStatusReverseModemDataCompression = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 106, 1, 69), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("unknown", 1), ("mNP5", 2), ("v42bis", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusReverseModemDataCompression.setStatus('current')
if mibBuilder.loadTexts: sessionStatusReverseModemDataCompression.setDescription('For modem sessions, the data compression protocol used, if any.')
sessionStatusReverseModemTxBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 106, 1, 70), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusReverseModemTxBlocks.setStatus('current')
if mibBuilder.loadTexts: sessionStatusReverseModemTxBlocks.setDescription('For modem sessions, the number of blocks transmitted by the modem.')
sessionStatusReverseModemRetransmits = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 106, 1, 71), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusReverseModemRetransmits.setStatus('current')
if mibBuilder.loadTexts: sessionStatusReverseModemRetransmits.setDescription('For modem sessions, the number of packets retransmitted by the modem.')
sessionStatusReverseModemSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 106, 1, 72), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusReverseModemSNR.setStatus('current')
if mibBuilder.loadTexts: sessionStatusReverseModemSNR.setDescription('For modem sessions, the Signal-to-Noise Ratio measured at the start of the connection. This value is given in dB.')
sessionStatusReverseModemLocalRetrains = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 106, 1, 73), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusReverseModemLocalRetrains.setStatus('current')
if mibBuilder.loadTexts: sessionStatusReverseModemLocalRetrains.setDescription('For modem sessions, the number of retrain requests sent by the local modem.')
sessionStatusReverseModemRemoteRetrains = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 106, 1, 74), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusReverseModemRemoteRetrains.setStatus('current')
if mibBuilder.loadTexts: sessionStatusReverseModemRemoteRetrains.setDescription('For modem sessions, the number of retrain requests sent by the remote modem.')
sessionStatusReverseModemLocalRenegotiations = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 106, 1, 75), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusReverseModemLocalRenegotiations.setStatus('current')
if mibBuilder.loadTexts: sessionStatusReverseModemLocalRenegotiations.setDescription('For modem sessions, the number of rate renegotiation requests sent by the local modem.')
sessionStatusReverseModemRemoteRenegotiations = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 106, 1, 76), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusReverseModemRemoteRenegotiations.setStatus('current')
if mibBuilder.loadTexts: sessionStatusReverseModemRemoteRenegotiations.setDescription('For modem sessions, the number of rate renegotiation requests sent by the remote modem.')
sessionStatusReverseModemReceiveLineLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 106, 1, 77), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusReverseModemReceiveLineLevel.setStatus('current')
if mibBuilder.loadTexts: sessionStatusReverseModemReceiveLineLevel.setDescription('For modem sessions, the receive line signal level. This value is given in dB.')
sessionStatusReverseRemoteIPXNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 106, 1, 78), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusReverseRemoteIPXNetwork.setStatus('current')
if mibBuilder.loadTexts: sessionStatusReverseRemoteIPXNetwork.setDescription('The IPX network assigned to the dial-up user.')
sessionStatusReverseRemoteIPXNode = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 106, 1, 79), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusReverseRemoteIPXNode.setStatus('current')
if mibBuilder.loadTexts: sessionStatusReverseRemoteIPXNode.setDescription('The IPX Node number assisgned to the dial-up user')
sessionStatusReverseCleartcpRemoteIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 106, 1, 80), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusReverseCleartcpRemoteIP.setStatus('current')
if mibBuilder.loadTexts: sessionStatusReverseCleartcpRemoteIP.setDescription('Cleartcp Remote IP Address')
sessionStatusReverseCleartcpRemotePort = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 106, 1, 81), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusReverseCleartcpRemotePort.setStatus('current')
if mibBuilder.loadTexts: sessionStatusReverseCleartcpRemotePort.setDescription('Cleartcp Remote Port Address')
sessionStatusReverseTunnelId = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 106, 1, 82), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusReverseTunnelId.setStatus('current')
if mibBuilder.loadTexts: sessionStatusReverseTunnelId.setDescription('Tunnel Id')
sessionStatusReverseLinkId = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 106, 1, 83), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusReverseLinkId.setStatus('current')
if mibBuilder.loadTexts: sessionStatusReverseLinkId.setDescription('Link Id')
sessionComponentsTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 2, 213), )
if mibBuilder.loadTexts: sessionComponentsTable.setStatus('current')
if mibBuilder.loadTexts: sessionComponentsTable.setDescription('Session Components Information.')
sessionComponentsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 2, 213, 1), ).setIndexNames((0, "APTIS-MONITOR-MIB", "sessionComponentsSessionIndex"), (0, "APTIS-MONITOR-MIB", "sessionComponentsIndex"))
if mibBuilder.loadTexts: sessionComponentsEntry.setStatus('current')
if mibBuilder.loadTexts: sessionComponentsEntry.setDescription('This is the structure of entries in the sessionComponentsTable.')
sessionComponentsSessionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 213, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionComponentsSessionIndex.setStatus('current')
if mibBuilder.loadTexts: sessionComponentsSessionIndex.setDescription('The serial number of the session to which this component belongs.')
sessionComponentsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 213, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionComponentsIndex.setStatus('current')
if mibBuilder.loadTexts: sessionComponentsIndex.setDescription('The ordinal number representing the relative location of this component in relation to other components within a session.')
sessionComponentsComponentType = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 213, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34))).clone(namedValues=NamedValues(("unknown", 0), ("none", 1), ("other", 2), ("df", 3), ("ds0", 4), ("modem", 5), ("hdlc", 6), ("ppp", 7), ("slip", 8), ("chdlc", 9), ("fr", 10), ("ip", 11), ("telnet", 12), ("cleartcp", 13), ("l2tp", 14), ("ether", 15), ("trunkip", 16), ("fepdf", 17), ("lineip", 18), ("loopback", 19), ("shell", 20), ("rlogin", 21), ("hssi", 22), ("sm", 23), ("vl", 24), ("voip", 25), ("l2f", 26), ("l2ftunnel", 27), ("dvs", 28), ("dvstunnel", 29), ("fax", 30), ("l2tproute", 31), ("atmp", 32), ("atmptunnel", 33), ("iptest", 34)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionComponentsComponentType.setStatus('current')
if mibBuilder.loadTexts: sessionComponentsComponentType.setDescription('A component participating in the session.')
sessionComponentsComponentState = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 213, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionComponentsComponentState.setStatus('current')
if mibBuilder.loadTexts: sessionComponentsComponentState.setDescription('A number indicating the current state of the component participating in the session. Note that this is really an enum with different values, depending upon which component is being reported.')
sessionComponentsStatHandle = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 213, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionComponentsStatHandle.setStatus('current')
if mibBuilder.loadTexts: sessionComponentsStatHandle.setDescription('A number which may be used to retrieve the statistics for this component.')
sessionTraceTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 2, 214), )
if mibBuilder.loadTexts: sessionTraceTable.setStatus('current')
if mibBuilder.loadTexts: sessionTraceTable.setDescription('Session Trace Configuration Information.')
sessionTraceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 2, 214, 1), ).setIndexNames((0, "APTIS-MONITOR-MIB", "sessionTraceSessionIndex"), (0, "APTIS-MONITOR-MIB", "sessionTraceIndex"))
if mibBuilder.loadTexts: sessionTraceEntry.setStatus('current')
if mibBuilder.loadTexts: sessionTraceEntry.setDescription('This is the structure of entries in the sessionTraceTable.')
sessionTraceSessionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 214, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionTraceSessionIndex.setStatus('current')
if mibBuilder.loadTexts: sessionTraceSessionIndex.setDescription('The serial number of the session to which this component belongs.')
sessionTraceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 214, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionTraceIndex.setStatus('current')
if mibBuilder.loadTexts: sessionTraceIndex.setDescription('The internal reference number for this log entry.')
sessionTraceAbsoluteTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 214, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionTraceAbsoluteTimeStamp.setStatus('current')
if mibBuilder.loadTexts: sessionTraceAbsoluteTimeStamp.setDescription('The time that this event occurred, in milliseconds relative to SysUpTime.')
sessionTraceRelativeTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 214, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionTraceRelativeTimeStamp.setStatus('current')
if mibBuilder.loadTexts: sessionTraceRelativeTimeStamp.setDescription('The time that this event occurred, in milliseconds relative to session beginning.')
sessionTraceLogEntry = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 214, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionTraceLogEntry.setStatus('current')
if mibBuilder.loadTexts: sessionTraceLogEntry.setDescription('An event occuring during the life of a session.')
sessionSlotsTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 2, 215), )
if mibBuilder.loadTexts: sessionSlotsTable.setStatus('current')
if mibBuilder.loadTexts: sessionSlotsTable.setDescription('The current usage of cvx slots in all active sessions.')
sessionSlotsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 2, 215, 1), ).setIndexNames((0, "APTIS-MONITOR-MIB", "sessionSlotsTrunkCount"))
if mibBuilder.loadTexts: sessionSlotsEntry.setStatus('current')
if mibBuilder.loadTexts: sessionSlotsEntry.setDescription('This is the structure of entries in the sessionSlotsTable.')
sessionSlotsTrunkCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 215, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionSlotsTrunkCount.setStatus('current')
if mibBuilder.loadTexts: sessionSlotsTrunkCount.setDescription('The number of sessions active on slot 1.')
sessionSlotsSlot1Count = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 215, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionSlotsSlot1Count.setStatus('current')
if mibBuilder.loadTexts: sessionSlotsSlot1Count.setDescription('The number of sessions active on slot 1.')
sessionSlotsSlot2Count = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 215, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionSlotsSlot2Count.setStatus('current')
if mibBuilder.loadTexts: sessionSlotsSlot2Count.setDescription('The number of sessions active on slot 2.')
sessionSlotsSlot3Count = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 215, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionSlotsSlot3Count.setStatus('current')
if mibBuilder.loadTexts: sessionSlotsSlot3Count.setDescription('The number of sessions active on slot 3.')
sessionSlotsSlot4Count = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 215, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionSlotsSlot4Count.setStatus('current')
if mibBuilder.loadTexts: sessionSlotsSlot4Count.setDescription('The number of sessions active on slot 4.')
sessionSlotsSlot5Count = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 215, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionSlotsSlot5Count.setStatus('current')
if mibBuilder.loadTexts: sessionSlotsSlot5Count.setDescription('The number of sessions active on slot 5.')
sessionSlotsSlot6Count = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 215, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionSlotsSlot6Count.setStatus('current')
if mibBuilder.loadTexts: sessionSlotsSlot6Count.setDescription('The number of sessions active on slot 6.')
sessionSlotsSlot7Count = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 215, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionSlotsSlot7Count.setStatus('current')
if mibBuilder.loadTexts: sessionSlotsSlot7Count.setDescription('The number of sessions active on slot 7.')
sessionSlotsSlot8Count = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 215, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionSlotsSlot8Count.setStatus('current')
if mibBuilder.loadTexts: sessionSlotsSlot8Count.setDescription('The number of sessions active on slot 8.')
sessionSlotsSlot9Count = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 215, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionSlotsSlot9Count.setStatus('current')
if mibBuilder.loadTexts: sessionSlotsSlot9Count.setDescription('The number of sessions active on slot 9.')
sessionSlotsSlot10Count = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 215, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionSlotsSlot10Count.setStatus('current')
if mibBuilder.loadTexts: sessionSlotsSlot10Count.setDescription('The number of sessions active on slot 10.')
sessionSlotsSlot11Count = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 215, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionSlotsSlot11Count.setStatus('current')
if mibBuilder.loadTexts: sessionSlotsSlot11Count.setDescription('The number of sessions active on slot 11.')
sessionSlotsSlot12Count = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 215, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionSlotsSlot12Count.setStatus('current')
if mibBuilder.loadTexts: sessionSlotsSlot12Count.setDescription('The number of sessions active on slot 12.')
sessionSlotsSlot13Count = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 215, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionSlotsSlot13Count.setStatus('current')
if mibBuilder.loadTexts: sessionSlotsSlot13Count.setDescription('The number of sessions active on slot 13.')
sessionSlotsSlot14Count = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 215, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionSlotsSlot14Count.setStatus('current')
if mibBuilder.loadTexts: sessionSlotsSlot14Count.setDescription('The number of sessions active on slot 14.')
sessionSlotsSlot15Count = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 215, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionSlotsSlot15Count.setStatus('current')
if mibBuilder.loadTexts: sessionSlotsSlot15Count.setDescription('The number of sessions active on slot 15.')
sessionSlotsSlot16Count = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 215, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionSlotsSlot16Count.setStatus('current')
if mibBuilder.loadTexts: sessionSlotsSlot16Count.setDescription('The number of sessions active on slot 16.')
sessionSlotsSlot17Count = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 215, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionSlotsSlot17Count.setStatus('current')
if mibBuilder.loadTexts: sessionSlotsSlot17Count.setDescription('The number of sessions active on slot 17.')
sessionSlotsSlot18Count = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 215, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionSlotsSlot18Count.setStatus('current')
if mibBuilder.loadTexts: sessionSlotsSlot18Count.setDescription('The number of sessions active on slot 18.')
sessionSummaryTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 2, 216), )
if mibBuilder.loadTexts: sessionSummaryTable.setStatus('current')
if mibBuilder.loadTexts: sessionSummaryTable.setDescription('A summary of all session activity.')
sessionSummaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 2, 216, 1), ).setIndexNames((0, "APTIS-MONITOR-MIB", "sessionSummaryActiveUnknown"))
if mibBuilder.loadTexts: sessionSummaryEntry.setStatus('current')
if mibBuilder.loadTexts: sessionSummaryEntry.setDescription('This is the structure of entries in the sessionSummaryTable.')
sessionSummaryActiveUnknown = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 216, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionSummaryActiveUnknown.setStatus('current')
if mibBuilder.loadTexts: sessionSummaryActiveUnknown.setDescription('The number of sessions active but not yet providing service.')
sessionSummaryMaximumUnknown = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 216, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionSummaryMaximumUnknown.setStatus('current')
if mibBuilder.loadTexts: sessionSummaryMaximumUnknown.setDescription('The maximum number of sessions active but not yet providing service.')
sessionSummaryInactiveUnknown = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 216, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionSummaryInactiveUnknown.setStatus('current')
if mibBuilder.loadTexts: sessionSummaryInactiveUnknown.setDescription('The number of sessions which terminated prior to providing service.')
sessionSummaryActiveNone = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 216, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionSummaryActiveNone.setStatus('current')
if mibBuilder.loadTexts: sessionSummaryActiveNone.setDescription('The number of active sessions where the service mode is not known.')
sessionSummaryMaximumNone = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 216, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionSummaryMaximumNone.setStatus('current')
if mibBuilder.loadTexts: sessionSummaryMaximumNone.setDescription('The maximum number of active sessions where the service mode is not known.')
sessionSummaryInactiveNone = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 216, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionSummaryInactiveNone.setStatus('current')
if mibBuilder.loadTexts: sessionSummaryInactiveNone.setDescription('The number of sessions which have been terminated where the service mode was not known.')
sessionSummaryActiveOther = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 216, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionSummaryActiveOther.setStatus('current')
if mibBuilder.loadTexts: sessionSummaryActiveOther.setDescription('The number of active sessions where the service mode is not known.')
sessionSummaryMaximumOther = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 216, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionSummaryMaximumOther.setStatus('current')
if mibBuilder.loadTexts: sessionSummaryMaximumOther.setDescription('The maximum number of active sessions where the service mode is not known.')
sessionSummaryInactiveOther = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 216, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionSummaryInactiveOther.setStatus('current')
if mibBuilder.loadTexts: sessionSummaryInactiveOther.setDescription('The number of sessions which have been terminated where the service mode was not known.')
sessionSummaryActivePpp = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 216, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionSummaryActivePpp.setStatus('current')
if mibBuilder.loadTexts: sessionSummaryActivePpp.setDescription('The number of active ppp sessions.')
sessionSummaryMaximumPpp = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 216, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionSummaryMaximumPpp.setStatus('current')
if mibBuilder.loadTexts: sessionSummaryMaximumPpp.setDescription('The maximum number of active ppp sessions.')
sessionSummaryInactivePpp = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 216, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionSummaryInactivePpp.setStatus('current')
if mibBuilder.loadTexts: sessionSummaryInactivePpp.setDescription('The number of ppp sessions which have been terminated.')
sessionSummaryActiveSlip = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 216, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionSummaryActiveSlip.setStatus('current')
if mibBuilder.loadTexts: sessionSummaryActiveSlip.setDescription('The number of active slip sessions.')
sessionSummaryMaximumSlip = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 216, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionSummaryMaximumSlip.setStatus('current')
if mibBuilder.loadTexts: sessionSummaryMaximumSlip.setDescription('The maximum number of active slip sessions.')
sessionSummaryInactiveSlip = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 216, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionSummaryInactiveSlip.setStatus('current')
if mibBuilder.loadTexts: sessionSummaryInactiveSlip.setDescription('The number of slip sessions which have been terminated.')
sessionSummaryActiveFrameRelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 216, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionSummaryActiveFrameRelay.setStatus('current')
if mibBuilder.loadTexts: sessionSummaryActiveFrameRelay.setDescription('The number of active frameRelay sessions.')
sessionSummaryMaximumFrameRelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 216, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionSummaryMaximumFrameRelay.setStatus('current')
if mibBuilder.loadTexts: sessionSummaryMaximumFrameRelay.setDescription('The maximum number of active frameRelay sessions.')
sessionSummaryInactiveFrameRelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 216, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionSummaryInactiveFrameRelay.setStatus('current')
if mibBuilder.loadTexts: sessionSummaryInactiveFrameRelay.setDescription('The number of frameRelay sessions which have been terminated.')
sessionSummaryActiveCiscoHDLC = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 216, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionSummaryActiveCiscoHDLC.setStatus('current')
if mibBuilder.loadTexts: sessionSummaryActiveCiscoHDLC.setDescription('The number of active ciscoHDLC sessions.')
sessionSummaryMaximumCiscoHDLC = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 216, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionSummaryMaximumCiscoHDLC.setStatus('current')
if mibBuilder.loadTexts: sessionSummaryMaximumCiscoHDLC.setDescription('The maximum number of active ciscoHDLC sessions.')
sessionSummaryInactiveCiscoHDLC = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 216, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionSummaryInactiveCiscoHDLC.setStatus('current')
if mibBuilder.loadTexts: sessionSummaryInactiveCiscoHDLC.setDescription('The number of ciscoHDLC sessions which have been terminated.')
sessionSummaryActiveTerminalServer = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 216, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionSummaryActiveTerminalServer.setStatus('current')
if mibBuilder.loadTexts: sessionSummaryActiveTerminalServer.setDescription('The number of active terminalServer sessions.')
sessionSummaryMaximumTerminalServer = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 216, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionSummaryMaximumTerminalServer.setStatus('current')
if mibBuilder.loadTexts: sessionSummaryMaximumTerminalServer.setDescription('The maximum number of active terminalServer sessions.')
sessionSummaryInactiveTerminalServer = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 216, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionSummaryInactiveTerminalServer.setStatus('current')
if mibBuilder.loadTexts: sessionSummaryInactiveTerminalServer.setDescription('The number of terminalServer sessions which have been terminated.')
sessionSummaryActiveTelnet = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 216, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionSummaryActiveTelnet.setStatus('current')
if mibBuilder.loadTexts: sessionSummaryActiveTelnet.setDescription('The number of active telnet sessions.')
sessionSummaryMaximumTelnet = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 216, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionSummaryMaximumTelnet.setStatus('current')
if mibBuilder.loadTexts: sessionSummaryMaximumTelnet.setDescription('The maximum number of active telnet sessions.')
sessionSummaryInactiveTelnet = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 216, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionSummaryInactiveTelnet.setStatus('current')
if mibBuilder.loadTexts: sessionSummaryInactiveTelnet.setDescription('The number of telnet sessions which have been terminated.')
sessionSummaryActiveRawTCP = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 216, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionSummaryActiveRawTCP.setStatus('current')
if mibBuilder.loadTexts: sessionSummaryActiveRawTCP.setDescription('The number of active rawTCP sessions.')
sessionSummaryMaximumRawTCP = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 216, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionSummaryMaximumRawTCP.setStatus('current')
if mibBuilder.loadTexts: sessionSummaryMaximumRawTCP.setDescription('The maximum number of active rawTCP sessions.')
sessionSummaryInactiveRawTCP = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 216, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionSummaryInactiveRawTCP.setStatus('current')
if mibBuilder.loadTexts: sessionSummaryInactiveRawTCP.setDescription('The number of rawTCP sessions which have been terminated.')
sessionSummaryActiveRlogin = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 216, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionSummaryActiveRlogin.setStatus('current')
if mibBuilder.loadTexts: sessionSummaryActiveRlogin.setDescription('The number of active rlogin sessions.')
sessionSummaryMaximumRlogin = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 216, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionSummaryMaximumRlogin.setStatus('current')
if mibBuilder.loadTexts: sessionSummaryMaximumRlogin.setDescription('The maximum number of active rlogin sessions.')
sessionSummaryInactiveRlogin = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 216, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionSummaryInactiveRlogin.setStatus('current')
if mibBuilder.loadTexts: sessionSummaryInactiveRlogin.setDescription('The number of rlogin sessions which have been terminated.')
sessionSummaryActiveL2tp = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 216, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionSummaryActiveL2tp.setStatus('current')
if mibBuilder.loadTexts: sessionSummaryActiveL2tp.setDescription('The number of active l2tp sessions.')
sessionSummaryMaximumL2tp = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 216, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionSummaryMaximumL2tp.setStatus('current')
if mibBuilder.loadTexts: sessionSummaryMaximumL2tp.setDescription('The maximum number of active l2tp sessions.')
sessionSummaryInactiveL2tp = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 216, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionSummaryInactiveL2tp.setStatus('current')
if mibBuilder.loadTexts: sessionSummaryInactiveL2tp.setDescription('The number of l2tp sessions which have been terminated.')
sessionSummaryActiveL2f = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 216, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionSummaryActiveL2f.setStatus('current')
if mibBuilder.loadTexts: sessionSummaryActiveL2f.setDescription('The number of active l2f sessions.')
sessionSummaryMaximumL2f = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 216, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionSummaryMaximumL2f.setStatus('current')
if mibBuilder.loadTexts: sessionSummaryMaximumL2f.setDescription('The maximum number of active l2f sessions.')
sessionSummaryInactiveL2f = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 216, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionSummaryInactiveL2f.setStatus('current')
if mibBuilder.loadTexts: sessionSummaryInactiveL2f.setDescription('The number of l2f sessions which have been terminated.')
sessionSummaryActiveTrunk = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 216, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionSummaryActiveTrunk.setStatus('current')
if mibBuilder.loadTexts: sessionSummaryActiveTrunk.setDescription('The number of active trunk sessions.')
sessionSummaryMaximumTrunk = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 216, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionSummaryMaximumTrunk.setStatus('current')
if mibBuilder.loadTexts: sessionSummaryMaximumTrunk.setDescription('The maximum number of active trunk sessions.')
sessionSummaryInactiveTrunk = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 216, 1, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionSummaryInactiveTrunk.setStatus('current')
if mibBuilder.loadTexts: sessionSummaryInactiveTrunk.setDescription('The number of trunk sessions which have been terminated.')
sessionSummaryActiveVoice = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 216, 1, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionSummaryActiveVoice.setStatus('current')
if mibBuilder.loadTexts: sessionSummaryActiveVoice.setDescription('The number of active voice sessions.')
sessionSummaryMaximumVoice = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 216, 1, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionSummaryMaximumVoice.setStatus('current')
if mibBuilder.loadTexts: sessionSummaryMaximumVoice.setDescription('The maximum number of active voice sessions.')
sessionSummaryInactiveVoice = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 216, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionSummaryInactiveVoice.setStatus('current')
if mibBuilder.loadTexts: sessionSummaryInactiveVoice.setDescription('The number of voice sessions which have been terminated.')
sessionSummaryActiveTandem = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 216, 1, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionSummaryActiveTandem.setStatus('current')
if mibBuilder.loadTexts: sessionSummaryActiveTandem.setDescription('The number of active tandem sessions.')
sessionSummaryMaximumTandem = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 216, 1, 47), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionSummaryMaximumTandem.setStatus('current')
if mibBuilder.loadTexts: sessionSummaryMaximumTandem.setDescription('The maximum number of active tandem sessions.')
sessionSummaryInactiveTandem = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 216, 1, 48), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionSummaryInactiveTandem.setStatus('current')
if mibBuilder.loadTexts: sessionSummaryInactiveTandem.setDescription('The number of tandem sessions which have been terminated.')
sessionSummaryActiveFtp = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 216, 1, 49), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionSummaryActiveFtp.setStatus('current')
if mibBuilder.loadTexts: sessionSummaryActiveFtp.setDescription('The number of active ftp sessions.')
sessionSummaryMaximumFtp = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 216, 1, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionSummaryMaximumFtp.setStatus('current')
if mibBuilder.loadTexts: sessionSummaryMaximumFtp.setDescription('The maximum number of active ftp sessions.')
sessionSummaryInactiveFtp = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 216, 1, 51), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionSummaryInactiveFtp.setStatus('current')
if mibBuilder.loadTexts: sessionSummaryInactiveFtp.setDescription('The number of ftp sessions which have been terminated.')
sessionSummaryActiveDvs = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 216, 1, 52), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionSummaryActiveDvs.setStatus('current')
if mibBuilder.loadTexts: sessionSummaryActiveDvs.setDescription('The number of active dvs sessions.')
sessionSummaryMaximumDvs = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 216, 1, 53), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionSummaryMaximumDvs.setStatus('current')
if mibBuilder.loadTexts: sessionSummaryMaximumDvs.setDescription('The maximum number of active dvs sessions.')
sessionSummaryInactiveDvs = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 216, 1, 54), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionSummaryInactiveDvs.setStatus('current')
if mibBuilder.loadTexts: sessionSummaryInactiveDvs.setDescription('The number of dvs sessions which have been terminated.')
sessionSummaryActiveAtmp = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 216, 1, 55), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionSummaryActiveAtmp.setStatus('current')
if mibBuilder.loadTexts: sessionSummaryActiveAtmp.setDescription('The number of active atmp sessions.')
sessionSummaryMaximumAtmp = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 216, 1, 56), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionSummaryMaximumAtmp.setStatus('current')
if mibBuilder.loadTexts: sessionSummaryMaximumAtmp.setDescription('The maximum number of active atmp sessions.')
sessionSummaryInactiveAtmp = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 216, 1, 57), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionSummaryInactiveAtmp.setStatus('current')
if mibBuilder.loadTexts: sessionSummaryInactiveAtmp.setDescription('The number of atmp sessions which have been terminated.')
sessionSummaryActiveFax = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 216, 1, 58), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionSummaryActiveFax.setStatus('current')
if mibBuilder.loadTexts: sessionSummaryActiveFax.setDescription('The number of active fax sessions.')
sessionSummaryMaximumFax = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 216, 1, 59), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionSummaryMaximumFax.setStatus('current')
if mibBuilder.loadTexts: sessionSummaryMaximumFax.setDescription('The maximum number of active fax sessions.')
sessionSummaryInactiveFax = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 216, 1, 60), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionSummaryInactiveFax.setStatus('current')
if mibBuilder.loadTexts: sessionSummaryInactiveFax.setDescription('The number of fax sessions which have been terminated.')
sessionSummaryActiveHub = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 216, 1, 61), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionSummaryActiveHub.setStatus('current')
if mibBuilder.loadTexts: sessionSummaryActiveHub.setDescription('The number of active hub sessions.')
sessionSummaryMaximumHub = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 216, 1, 62), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionSummaryMaximumHub.setStatus('current')
if mibBuilder.loadTexts: sessionSummaryMaximumHub.setDescription('The maximum number of active hub sessions.')
sessionSummaryInactiveHub = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 216, 1, 63), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionSummaryInactiveHub.setStatus('current')
if mibBuilder.loadTexts: sessionSummaryInactiveHub.setDescription('The number of hub sessions which have been terminated.')
sessionSummaryActiveTest = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 216, 1, 64), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionSummaryActiveTest.setStatus('current')
if mibBuilder.loadTexts: sessionSummaryActiveTest.setDescription('The number of active test sessions.')
sessionSummaryMaximumTest = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 216, 1, 65), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionSummaryMaximumTest.setStatus('current')
if mibBuilder.loadTexts: sessionSummaryMaximumTest.setDescription('The maximum number of active test sessions.')
sessionSummaryInactiveTest = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 216, 1, 66), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionSummaryInactiveTest.setStatus('current')
if mibBuilder.loadTexts: sessionSummaryInactiveTest.setDescription('The number of test sessions which have been terminated.')
sessionSummaryMaximumTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 216, 1, 67), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionSummaryMaximumTotal.setStatus('current')
if mibBuilder.loadTexts: sessionSummaryMaximumTotal.setDescription('The maximum number of active calls achieved on the system.')
sessionDiscCauseTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 2, 104), )
if mibBuilder.loadTexts: sessionDiscCauseTable.setStatus('current')
if mibBuilder.loadTexts: sessionDiscCauseTable.setDescription('Session Disconnect Cause Information.')
sessionDiscCauseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 2, 104, 1), ).setIndexNames((0, "APTIS-MONITOR-MIB", "sessionDiscCauseIndex"))
if mibBuilder.loadTexts: sessionDiscCauseEntry.setStatus('current')
if mibBuilder.loadTexts: sessionDiscCauseEntry.setDescription('This is the structure of entries in the sessionDiscCauseTable.')
sessionDiscCauseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 104, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionDiscCauseIndex.setStatus('current')
if mibBuilder.loadTexts: sessionDiscCauseIndex.setDescription('An index into the table of disconnect causes.')
sessionDiscCauseComponent = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 104, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34))).clone(namedValues=NamedValues(("unknown", 0), ("none", 1), ("other", 2), ("df", 3), ("ds0", 4), ("modem", 5), ("hdlc", 6), ("ppp", 7), ("slip", 8), ("chdlc", 9), ("fr", 10), ("ip", 11), ("telnet", 12), ("cleartcp", 13), ("l2tp", 14), ("ether", 15), ("trunkip", 16), ("fepdf", 17), ("lineip", 18), ("loopback", 19), ("shell", 20), ("rlogin", 21), ("hssi", 22), ("sm", 23), ("vl", 24), ("voip", 25), ("l2f", 26), ("l2ftunnel", 27), ("dvs", 28), ("dvstunnel", 29), ("fax", 30), ("l2tproute", 31), ("atmp", 32), ("atmptunnel", 33), ("iptest", 34)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionDiscCauseComponent.setStatus('current')
if mibBuilder.loadTexts: sessionDiscCauseComponent.setDescription('The component which initiated termination of this session. In cases where there are multiple causes of session termination, only the first cause detected is reported.')
sessionDiscCauseCause = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 104, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionDiscCauseCause.setStatus('current')
if mibBuilder.loadTexts: sessionDiscCauseCause.setDescription('The cause which initiated termination of this session. In cases where there are multiple causes of session termination, only the first cause detected is reported.')
sessionDiscCauseReason = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 104, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionDiscCauseReason.setStatus('current')
if mibBuilder.loadTexts: sessionDiscCauseReason.setDescription('A textual description of the cause which initiated termination of this session. In cases where there are multiple causes of session termination, only the first cause detected is reported.')
sessionDiscCauseCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 104, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionDiscCauseCount.setStatus('current')
if mibBuilder.loadTexts: sessionDiscCauseCount.setDescription('The number of times this component/cause has resulted in session termination.')
sessionStatusHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 2, 107), )
if mibBuilder.loadTexts: sessionStatusHistoryTable.setStatus('current')
if mibBuilder.loadTexts: sessionStatusHistoryTable.setDescription('The table provides a historical view of the inactive sessions in the session table. It contains inactive sessions up to a maximum of SessionTableSize entries. This table is ordered by termination time of the sessions. The bounds of this table at any given time are described by the variables HistoryLowest and HistoryHighest. As new entries are inserted into the table, the inactive entries with the oldest termination time get aged out from the table.')
sessionStatusHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 2, 107, 1), ).setIndexNames((0, "APTIS-MONITOR-MIB", "sessionStatusHistoryIndex"))
if mibBuilder.loadTexts: sessionStatusHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: sessionStatusHistoryEntry.setDescription('This is the structure of entries in the sessionStatusHistoryTable.')
sessionStatusHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 107, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusHistoryIndex.setStatus('current')
if mibBuilder.loadTexts: sessionStatusHistoryIndex.setDescription('An index into a ring buffer of the last 2000 sessions.')
sessionStatusHistorySessionID = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 107, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusHistorySessionID.setStatus('current')
if mibBuilder.loadTexts: sessionStatusHistorySessionID.setDescription('The serial number of this session, a unique number for this boot era. When combined with the value of BootEra, provides a session number that is unique for the life of the system.')
sessionStatusHistoryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 107, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("inactive", 0), ("active", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusHistoryState.setStatus('current')
if mibBuilder.loadTexts: sessionStatusHistoryState.setDescription('This variable indicates the state of this session.')
sessionStatusHistoryPermanentFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 107, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("switched", 1), ("permanent", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusHistoryPermanentFlag.setStatus('current')
if mibBuilder.loadTexts: sessionStatusHistoryPermanentFlag.setDescription('This variable indicates whether this session is permanent(2), meaning a long-lasting locally administered session such as a Frame Relay PVC, or switched(1), meaning a short-lived session resulting from a switched call.')
sessionStatusHistoryVpopId = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 107, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusHistoryVpopId.setStatus('current')
if mibBuilder.loadTexts: sessionStatusHistoryVpopId.setDescription('The identifier of the VPOP (administrative Group) to which the session belongs. A value of 0 indicates the default VPOP.')
sessionStatusHistoryName = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 107, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 68))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusHistoryName.setStatus('current')
if mibBuilder.loadTexts: sessionStatusHistoryName.setDescription('The name of the connection peer for this session. During authentication of the session, this field may contain the name submitted by the peer. During this time, the value of timeOfService will be zero. When the value of timeOfService is nonzero, this field will contain a fully authenticated name.')
sessionStatusHistoryRemoteIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 107, 1, 13), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusHistoryRemoteIP.setStatus('current')
if mibBuilder.loadTexts: sessionStatusHistoryRemoteIP.setDescription("The connection peer's IP address. If the link is numbered, then this is the address assigned to the other end of the link. If the link is not numbered, this may be the single IP address of the peer. For PPP connections, this is the result of IPNCP negotiation.")
sessionStatusHistoryRemoteIPMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 107, 1, 14), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusHistoryRemoteIPMask.setStatus('current')
if mibBuilder.loadTexts: sessionStatusHistoryRemoteIPMask.setDescription("The connection peer's IP address mask, used in conjunction with remoteIP.")
sessionStatusHistoryLocalIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 107, 1, 15), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusHistoryLocalIP.setStatus('current')
if mibBuilder.loadTexts: sessionStatusHistoryLocalIP.setDescription('The local IP address for this session. If the link is numbered, then this is the address assigned to the local end of the link. If the link is not numbered, this may be the primary IP address of the system. For PPP connections, this is the result of IPNCP negotiation.')
sessionStatusHistoryLocalIPMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 107, 1, 16), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusHistoryLocalIPMask.setStatus('current')
if mibBuilder.loadTexts: sessionStatusHistoryLocalIPMask.setDescription('The local IP address mask for this session, used in conjunction with localIP.')
sessionStatusHistoryLinkService = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 107, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("unknown", 0), ("none", 1), ("other", 2), ("isdn56K", 3), ("isdn64K", 4), ("isdnV120", 5), ("isdnV110", 6), ("modemV32", 7), ("modemV34", 8), ("modemK56", 9), ("modemV90", 10), ("ethernet", 11), ("t1Trunk", 12), ("loopback", 13), ("hssi", 14), ("hub", 15), ("voice", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusHistoryLinkService.setStatus('current')
if mibBuilder.loadTexts: sessionStatusHistoryLinkService.setDescription('A description of which link technology is being used by the session.')
sessionStatusHistoryServiceMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 107, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))).clone(namedValues=NamedValues(("unknown", 0), ("none", 1), ("other", 2), ("ppp", 3), ("slip", 4), ("frameRelay", 5), ("ciscoHDLC", 6), ("terminalServer", 7), ("telnet", 8), ("rawTCP", 9), ("rlogin", 10), ("l2tp", 11), ("l2f", 12), ("trunk", 13), ("voice", 14), ("tandem", 15), ("hub", 16), ("ftp", 17), ("dvs", 18), ("fax", 19), ("atmp", 20), ("iptest", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusHistoryServiceMode.setStatus('current')
if mibBuilder.loadTexts: sessionStatusHistoryServiceMode.setDescription('A description of which session service is being used by the session.')
sessionStatusHistoryStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 107, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusHistoryStartTime.setStatus('current')
if mibBuilder.loadTexts: sessionStatusHistoryStartTime.setDescription('The time that this session began, in seconds since the system booted.')
sessionStatusHistoryStopTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 107, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusHistoryStopTime.setStatus('current')
if mibBuilder.loadTexts: sessionStatusHistoryStopTime.setDescription('The time that this session stopped, in seconds since the system booted. This variable is only meaningful for sessions having the state inactive(0).')
sessionStatusHistoryTimeOfModemSync = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 107, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusHistoryTimeOfModemSync.setStatus('current')
if mibBuilder.loadTexts: sessionStatusHistoryTimeOfModemSync.setDescription('The time at which the modem synchronization completed, in seconds since the system booted.')
sessionStatusHistoryTimeOfService = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 107, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusHistoryTimeOfService.setStatus('current')
if mibBuilder.loadTexts: sessionStatusHistoryTimeOfService.setDescription('The time that this session entered its first negotiated or configured service, in seconds since the system booted. For example, for a session with serviceMode PPP, the time at which LCP and IPCP negotiations completed and the session was ready to forward user data.')
sessionStatusHistoryTerminatingComponent = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 107, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34))).clone(namedValues=NamedValues(("unknown", 0), ("none", 1), ("other", 2), ("df", 3), ("ds0", 4), ("modem", 5), ("hdlc", 6), ("ppp", 7), ("slip", 8), ("chdlc", 9), ("fr", 10), ("ip", 11), ("telnet", 12), ("cleartcp", 13), ("l2tp", 14), ("ether", 15), ("trunkip", 16), ("fepdf", 17), ("lineip", 18), ("loopback", 19), ("shell", 20), ("rlogin", 21), ("hssi", 22), ("sm", 23), ("vl", 24), ("voip", 25), ("l2f", 26), ("l2ftunnel", 27), ("dvs", 28), ("dvstunnel", 29), ("fax", 30), ("l2tproute", 31), ("atmp", 32), ("atmptunnel", 33), ("iptest", 34)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusHistoryTerminatingComponent.setStatus('current')
if mibBuilder.loadTexts: sessionStatusHistoryTerminatingComponent.setDescription('The component which initiated termination of this session. In cases where there are multiple causes of session termination, only the first cause detected is reported. This variable is only meaningful for sessions having the state inactive(0).')
sessionStatusHistoryTerminationCause = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 107, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusHistoryTerminationCause.setStatus('current')
if mibBuilder.loadTexts: sessionStatusHistoryTerminationCause.setDescription('The cause which initiated termination of this session. In cases where there are multiple causes of session termination, only the first cause detected is reported. This variable is only meaningful for sessions having the state inactive(0).')
sessionStatusHistoryLastComponent = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 107, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34))).clone(namedValues=NamedValues(("unknown", 0), ("none", 1), ("other", 2), ("df", 3), ("ds0", 4), ("modem", 5), ("hdlc", 6), ("ppp", 7), ("slip", 8), ("chdlc", 9), ("fr", 10), ("ip", 11), ("telnet", 12), ("cleartcp", 13), ("l2tp", 14), ("ether", 15), ("trunkip", 16), ("fepdf", 17), ("lineip", 18), ("loopback", 19), ("shell", 20), ("rlogin", 21), ("hssi", 22), ("sm", 23), ("vl", 24), ("voip", 25), ("l2f", 26), ("l2ftunnel", 27), ("dvs", 28), ("dvstunnel", 29), ("fax", 30), ("l2tproute", 31), ("atmp", 32), ("atmptunnel", 33), ("iptest", 34)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusHistoryLastComponent.setStatus('current')
if mibBuilder.loadTexts: sessionStatusHistoryLastComponent.setDescription('The last component which was connected in this session.')
sessionStatusHistoryLayer1Slot = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 107, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 18))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusHistoryLayer1Slot.setStatus('current')
if mibBuilder.loadTexts: sessionStatusHistoryLayer1Slot.setDescription('The slot where the physical layer of this session is terminated.')
sessionStatusHistoryLayer2Slot = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 107, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 18))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusHistoryLayer2Slot.setStatus('current')
if mibBuilder.loadTexts: sessionStatusHistoryLayer2Slot.setDescription('The slot where the data link portion of this session is terminated')
sessionStatusHistoryCalledNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 107, 1, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusHistoryCalledNumber.setStatus('current')
if mibBuilder.loadTexts: sessionStatusHistoryCalledNumber.setDescription('16 digit number of called station (if available)')
sessionStatusHistoryCallingNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 107, 1, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusHistoryCallingNumber.setStatus('current')
if mibBuilder.loadTexts: sessionStatusHistoryCallingNumber.setDescription('16 digit number of calling station (if available)')
sessionStatusHistoryOriginateMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 107, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("answer", 0), ("originate", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusHistoryOriginateMode.setStatus('current')
if mibBuilder.loadTexts: sessionStatusHistoryOriginateMode.setDescription('The direction of the physical layer call associated with this session')
sessionStatusHistoryOctetsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 107, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusHistoryOctetsIn.setStatus('current')
if mibBuilder.loadTexts: sessionStatusHistoryOctetsIn.setDescription('The number of octets received from the remote user. This value will be zero until a session is terminated.')
sessionStatusHistoryOctetsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 107, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusHistoryOctetsOut.setStatus('current')
if mibBuilder.loadTexts: sessionStatusHistoryOctetsOut.setDescription('The number of octets sent to the remote user. This value will be zero until a session is terminated.')
sessionStatusHistoryPacketsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 107, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusHistoryPacketsIn.setStatus('current')
if mibBuilder.loadTexts: sessionStatusHistoryPacketsIn.setDescription('The number of packets received from the remote user. This value will be zero until a session is terminated.')
sessionStatusHistoryPacketsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 107, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusHistoryPacketsOut.setStatus('current')
if mibBuilder.loadTexts: sessionStatusHistoryPacketsOut.setDescription('The number of packets sent to the remote user. This value will be zero until a session is terminated.')
sessionStatusHistoryMultiLinkId = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 107, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusHistoryMultiLinkId.setStatus('current')
if mibBuilder.loadTexts: sessionStatusHistoryMultiLinkId.setDescription('The multi-link identifier value for PPP calls where the multi-link protocol was negotiated.')
sessionStatusHistoryPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 107, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusHistoryPort.setStatus('current')
if mibBuilder.loadTexts: sessionStatusHistoryPort.setDescription('The number of the DS1 for this session, relative to layer1Slot.')
sessionStatusHistoryTimeslot = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 107, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusHistoryTimeslot.setStatus('current')
if mibBuilder.loadTexts: sessionStatusHistoryTimeslot.setDescription('The number of the DS0 for this session, relative to port.')
sessionStatusHistoryLinkCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 107, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusHistoryLinkCount.setStatus('current')
if mibBuilder.loadTexts: sessionStatusHistoryLinkCount.setDescription('The number of sessions sharing the same remote IP address as this session. After a session is terminated, this value will represent the number of sessions at the time of termination.')
sessionStatusHistoryTxStartDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 107, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusHistoryTxStartDataRate.setStatus('current')
if mibBuilder.loadTexts: sessionStatusHistoryTxStartDataRate.setDescription('The transmit DCE data rate for this session. In the case of modem sessions, this will be the DCE rate reported as a result of initial modem negotiation, and may not track rate chanes during the call. For ISDN sessions, this will be the actual data service rate of the call. For Frame Relay sessions, this will be the nominal speed of the Frame Relay Physical Interface, even though multiple sessions may be sharing that Physical Interface. For other sessions, this will be the nominal speed of the physical interface. In no case should this be interepreted as a Quality-of-Service guarantee, or as the current line utilization or effective bandwidth on the interface. Note also that in the case of PPP multilink, this specifies the rate of only this link in the bundle, and not the aggregate rate of all links in the bundle.')
sessionStatusHistoryRxStartDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 107, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusHistoryRxStartDataRate.setStatus('current')
if mibBuilder.loadTexts: sessionStatusHistoryRxStartDataRate.setDescription('The receive data rate for this session. In the case of modem sessions, this will be the DCE rate reported as a result of initial modem negotiation, and may not track rate chanes during the call. For ISDN sessions, this will be the actual data service rate of the call. For Frame Relay sessions, this will be the nominal speed of the Frame Relay Physical Interface, even though multiple sessions may be sharing that Physical Interface. For other sessions, this will be the nominal speed of the physical interface. In no case should this be interepreted as a Quality-of-Service guarantee, or as the current line utilization or effective bandwidth on the interface. Note also that in the case of PPP multilink, this specifies the rate of only this link in the bundle, and not the aggregate rate of all links in the bundle.')
sessionStatusHistoryTxEndDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 107, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusHistoryTxEndDataRate.setStatus('current')
if mibBuilder.loadTexts: sessionStatusHistoryTxEndDataRate.setDescription('The transmit data rate at the end of a modem session.')
sessionStatusHistoryRxEndDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 107, 1, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusHistoryRxEndDataRate.setStatus('current')
if mibBuilder.loadTexts: sessionStatusHistoryRxEndDataRate.setDescription('The receive data rate at the end of a modem session.')
sessionStatusHistoryTxMinDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 107, 1, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusHistoryTxMinDataRate.setStatus('current')
if mibBuilder.loadTexts: sessionStatusHistoryTxMinDataRate.setDescription('The minimum transmit data rate during a modem session.')
sessionStatusHistoryRxMinDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 107, 1, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusHistoryRxMinDataRate.setStatus('current')
if mibBuilder.loadTexts: sessionStatusHistoryRxMinDataRate.setDescription('The minimum receive data rate during a modem session.')
sessionStatusHistoryTxMaxDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 107, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusHistoryTxMaxDataRate.setStatus('current')
if mibBuilder.loadTexts: sessionStatusHistoryTxMaxDataRate.setDescription('The maximum transmit data rate during a modem session.')
sessionStatusHistoryRxMaxDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 107, 1, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusHistoryRxMaxDataRate.setStatus('current')
if mibBuilder.loadTexts: sessionStatusHistoryRxMaxDataRate.setDescription('The maximum receive data rate during a modem session.')
sessionStatusHistoryIop = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 107, 1, 47), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusHistoryIop.setStatus('current')
if mibBuilder.loadTexts: sessionStatusHistoryIop.setDescription('The I/O processor where this session is terminated.')
sessionStatusHistoryDmm = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 107, 1, 48), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusHistoryDmm.setStatus('current')
if mibBuilder.loadTexts: sessionStatusHistoryDmm.setDescription('The Digital Modem Module where this session is terminated.')
sessionStatusHistoryPack = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 107, 1, 49), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusHistoryPack.setStatus('current')
if mibBuilder.loadTexts: sessionStatusHistoryPack.setDescription('The integrated circuit pack where this session is terminated.')
sessionStatusHistoryDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 107, 1, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusHistoryDevice.setStatus('current')
if mibBuilder.loadTexts: sessionStatusHistoryDevice.setDescription('The modem/hdlc where this session is terminated.')
sessionStatusHistoryTdmStream = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 107, 1, 51), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusHistoryTdmStream.setStatus('current')
if mibBuilder.loadTexts: sessionStatusHistoryTdmStream.setDescription('The TDM highway stream associated with this session.')
sessionStatusHistoryTdmTimeSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 107, 1, 52), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusHistoryTdmTimeSlot.setStatus('current')
if mibBuilder.loadTexts: sessionStatusHistoryTdmTimeSlot.setDescription('The TDM highway time-slot associated with this session.')
sessionStatusHistoryTerminationReason = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 107, 1, 53), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusHistoryTerminationReason.setStatus('current')
if mibBuilder.loadTexts: sessionStatusHistoryTerminationReason.setDescription('A textual description of the cause which initiated termination of this session. In cases where there are multiple causes of session termination, only the first cause detected is reported.')
sessionStatusHistoryDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 107, 1, 54), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusHistoryDuration.setStatus('current')
if mibBuilder.loadTexts: sessionStatusHistoryDuration.setDescription('The number of seconds this session has been active.')
sessionStatusHistoryDurationHMS = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 107, 1, 55), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusHistoryDurationHMS.setStatus('current')
if mibBuilder.loadTexts: sessionStatusHistoryDurationHMS.setDescription('The length of time this session has been active, expressed in DDD HH:MM:SSS.000.')
sessionStatusHistorySs7SessionId = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 107, 1, 56), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 41))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusHistorySs7SessionId.setStatus('current')
if mibBuilder.loadTexts: sessionStatusHistorySs7SessionId.setDescription('A uniquie identifier for this session within the ss7 Network. If this call was not originated using ss7 signalling, this string will be null.')
sessionStatusHistoryModemNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 107, 1, 57), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusHistoryModemNumber.setStatus('current')
if mibBuilder.loadTexts: sessionStatusHistoryModemNumber.setDescription('The individual modem where this session is terminated, numbered from one to the maximum number of modems on the slot card.')
sessionStatusHistoryTunnelType = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 107, 1, 58), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 0), ("none", 1), ("other", 2), ("l2f", 3), ("l2tp", 4), ("dvs", 5), ("atmp", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusHistoryTunnelType.setStatus('current')
if mibBuilder.loadTexts: sessionStatusHistoryTunnelType.setDescription('The tunneling protocol being used for this session.')
sessionStatusHistoryTunnelMediumType = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 107, 1, 59), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("none", 1), ("other", 2), ("ip", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusHistoryTunnelMediumType.setStatus('current')
if mibBuilder.loadTexts: sessionStatusHistoryTunnelMediumType.setDescription('The tunneling medium protocol being used for this session.')
sessionStatusHistoryTunnelServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 107, 1, 60), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusHistoryTunnelServerAddress.setStatus('current')
if mibBuilder.loadTexts: sessionStatusHistoryTunnelServerAddress.setDescription('The IP address of the remote machine terminating the tunnel for this session.')
sessionStatusHistoryCallClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 107, 1, 61), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusHistoryCallClass.setStatus('current')
if mibBuilder.loadTexts: sessionStatusHistoryCallClass.setDescription('The class of this call.')
sessionStatusHistoryTandemPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 107, 1, 62), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusHistoryTandemPort.setStatus('current')
if mibBuilder.loadTexts: sessionStatusHistoryTandemPort.setDescription('The port used for the outbound portion of a tandem call, if applicable.')
sessionStatusHistoryTandemTimeslot = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 107, 1, 63), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusHistoryTandemTimeslot.setStatus('current')
if mibBuilder.loadTexts: sessionStatusHistoryTandemTimeslot.setDescription('The timeslot used for the outbound portion of a tandem call, if applicable.')
sessionStatusHistoryCallClassArray = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 107, 1, 64), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusHistoryCallClassArray.setStatus('current')
if mibBuilder.loadTexts: sessionStatusHistoryCallClassArray.setDescription('An array of octets representing the class of this call.')
sessionStatusHistoryCallClassLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 107, 1, 65), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusHistoryCallClassLen.setStatus('current')
if mibBuilder.loadTexts: sessionStatusHistoryCallClassLen.setDescription('The number of octets in callClassArray.')
sessionStatusHistoryActualAuthMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 107, 1, 66), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("radius", 1), ("local", 2), ("remote", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusHistoryActualAuthMethod.setStatus('current')
if mibBuilder.loadTexts: sessionStatusHistoryActualAuthMethod.setDescription('The actual authentication method which was used to gain access to services. Radius, Local, Remote.')
sessionStatusHistoryModemModulation = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 107, 1, 67), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("none", 0), ("unknown", 1), ("bell103", 2), ("bell208", 3), ("bell212", 4), ("v17", 5), ("v21", 6), ("v22", 7), ("v22bis", 8), ("v23", 9), ("v27", 10), ("v29", 11), ("v32", 12), ("v32bis", 13), ("v33", 14), ("v34", 15), ("vFC", 16), ("k56", 17), ("v90", 18)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusHistoryModemModulation.setStatus('current')
if mibBuilder.loadTexts: sessionStatusHistoryModemModulation.setDescription('For modem sessions, the modulation protocol used, if any.')
sessionStatusHistoryModemErrorCorrection = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 107, 1, 68), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("unknown", 1), ("mNP", 2), ("v42", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusHistoryModemErrorCorrection.setStatus('current')
if mibBuilder.loadTexts: sessionStatusHistoryModemErrorCorrection.setDescription('For modem sessions, the error correction protocol used, if any.')
sessionStatusHistoryModemDataCompression = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 107, 1, 69), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("unknown", 1), ("mNP5", 2), ("v42bis", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusHistoryModemDataCompression.setStatus('current')
if mibBuilder.loadTexts: sessionStatusHistoryModemDataCompression.setDescription('For modem sessions, the data compression protocol used, if any.')
sessionStatusHistoryModemTxBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 107, 1, 70), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusHistoryModemTxBlocks.setStatus('current')
if mibBuilder.loadTexts: sessionStatusHistoryModemTxBlocks.setDescription('For modem sessions, the number of blocks transmitted by the modem.')
sessionStatusHistoryModemRetransmits = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 107, 1, 71), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusHistoryModemRetransmits.setStatus('current')
if mibBuilder.loadTexts: sessionStatusHistoryModemRetransmits.setDescription('For modem sessions, the number of packets retransmitted by the modem.')
sessionStatusHistoryModemSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 107, 1, 72), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusHistoryModemSNR.setStatus('current')
if mibBuilder.loadTexts: sessionStatusHistoryModemSNR.setDescription('For modem sessions, the Signal-to-Noise Ratio measured at the start of the connection. This value is given in dB.')
sessionStatusHistoryModemLocalRetrains = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 107, 1, 73), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusHistoryModemLocalRetrains.setStatus('current')
if mibBuilder.loadTexts: sessionStatusHistoryModemLocalRetrains.setDescription('For modem sessions, the number of retrain requests sent by the local modem.')
sessionStatusHistoryModemRemoteRetrains = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 107, 1, 74), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusHistoryModemRemoteRetrains.setStatus('current')
if mibBuilder.loadTexts: sessionStatusHistoryModemRemoteRetrains.setDescription('For modem sessions, the number of retrain requests sent by the remote modem.')
sessionStatusHistoryModemLocalRenegotiations = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 107, 1, 75), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusHistoryModemLocalRenegotiations.setStatus('current')
if mibBuilder.loadTexts: sessionStatusHistoryModemLocalRenegotiations.setDescription('For modem sessions, the number of rate renegotiation requests sent by the local modem.')
sessionStatusHistoryModemRemoteRenegotiations = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 107, 1, 76), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusHistoryModemRemoteRenegotiations.setStatus('current')
if mibBuilder.loadTexts: sessionStatusHistoryModemRemoteRenegotiations.setDescription('For modem sessions, the number of rate renegotiation requests sent by the remote modem.')
sessionStatusHistoryModemReceiveLineLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 107, 1, 77), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusHistoryModemReceiveLineLevel.setStatus('current')
if mibBuilder.loadTexts: sessionStatusHistoryModemReceiveLineLevel.setDescription('For modem sessions, the receive line signal level. This value is given in dB.')
sessionStatusHistoryRemoteIPXNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 107, 1, 78), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusHistoryRemoteIPXNetwork.setStatus('current')
if mibBuilder.loadTexts: sessionStatusHistoryRemoteIPXNetwork.setDescription('The IPX network assigned to the dial-up user.')
sessionStatusHistoryRemoteIPXNode = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 107, 1, 79), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusHistoryRemoteIPXNode.setStatus('current')
if mibBuilder.loadTexts: sessionStatusHistoryRemoteIPXNode.setDescription('The IPX Node number assisgned to the dial-up user')
sessionStatusHistoryCleartcpRemoteIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 107, 1, 80), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusHistoryCleartcpRemoteIP.setStatus('current')
if mibBuilder.loadTexts: sessionStatusHistoryCleartcpRemoteIP.setDescription('Cleartcp Remote IP Address')
sessionStatusHistoryCleartcpRemotePort = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 107, 1, 81), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusHistoryCleartcpRemotePort.setStatus('current')
if mibBuilder.loadTexts: sessionStatusHistoryCleartcpRemotePort.setDescription('Cleartcp Remote Port Address')
sessionStatusHistoryTunnelId = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 107, 1, 82), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusHistoryTunnelId.setStatus('current')
if mibBuilder.loadTexts: sessionStatusHistoryTunnelId.setDescription('Tunnel Id')
sessionStatusHistoryLinkId = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 107, 1, 83), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionStatusHistoryLinkId.setStatus('current')
if mibBuilder.loadTexts: sessionStatusHistoryLinkId.setDescription('Link Id')
sessionMultilinkTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 2, 217), )
if mibBuilder.loadTexts: sessionMultilinkTable.setStatus('current')
if mibBuilder.loadTexts: sessionMultilinkTable.setDescription('Session Multilink Configuration Information.')
sessionMultilinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 2, 217, 1), ).setIndexNames((0, "APTIS-MONITOR-MIB", "sessionMultilinkSessionId"))
if mibBuilder.loadTexts: sessionMultilinkEntry.setStatus('current')
if mibBuilder.loadTexts: sessionMultilinkEntry.setDescription('This is the structure of entries in the sessionMultilinkTable.')
sessionMultilinkNegotiated = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 217, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionMultilinkNegotiated.setStatus('current')
if mibBuilder.loadTexts: sessionMultilinkNegotiated.setDescription('The serial number of this session, a unique number for this boot era. When combined with the value of BootEra, provides a session number that is unique for the life of the system.')
sessionMultilinkSessionId = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 217, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionMultilinkSessionId.setStatus('current')
if mibBuilder.loadTexts: sessionMultilinkSessionId.setDescription('The serial number of this session, a unique number for this boot era. When combined with the value of BootEra, provides a session number that is unique for the life of the system.')
sessionMultilinkNameLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 217, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionMultilinkNameLength.setStatus('current')
if mibBuilder.loadTexts: sessionMultilinkNameLength.setDescription("Length of authenticated user's name (0 means no authentication).")
sessionMultilinkUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 217, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionMultilinkUserName.setStatus('current')
if mibBuilder.loadTexts: sessionMultilinkUserName.setDescription("User's name (null-terminated, null not included in length).")
sessionMultilinkMyMRRU = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 217, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionMultilinkMyMRRU.setStatus('current')
if mibBuilder.loadTexts: sessionMultilinkMyMRRU.setDescription('MRRU value I negotiated (0 means not negotiated).')
sessionMultilinkPeerMRRU = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 217, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionMultilinkPeerMRRU.setStatus('current')
if mibBuilder.loadTexts: sessionMultilinkPeerMRRU.setDescription('MRRU value the peer negotiated (0 means not negotiated).')
sessionMultilinkMyShortSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 217, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionMultilinkMyShortSequence.setStatus('current')
if mibBuilder.loadTexts: sessionMultilinkMyShortSequence.setDescription('1 if I negotiated short sequence #, 0 if not.')
sessionMultilinkPeerShortSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 217, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionMultilinkPeerShortSequence.setStatus('current')
if mibBuilder.loadTexts: sessionMultilinkPeerShortSequence.setDescription('1 if peer negotiated short sequence #, 0 if not.')
sessionMultilinkMyEIDType = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 217, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionMultilinkMyEIDType.setStatus('current')
if mibBuilder.loadTexts: sessionMultilinkMyEIDType.setDescription('EID type I negotiated (0 means not negotiated).')
sessionMultilinkPeerEIDType = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 217, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionMultilinkPeerEIDType.setStatus('current')
if mibBuilder.loadTexts: sessionMultilinkPeerEIDType.setDescription('EID type peer negotiated (0 means not negotiated).')
sessionMultilinkMyEIDLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 217, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionMultilinkMyEIDLength.setStatus('current')
if mibBuilder.loadTexts: sessionMultilinkMyEIDLength.setDescription('Length of my EID data (0 means not negotiated).')
sessionMultilinkPeerEIDLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 217, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionMultilinkPeerEIDLength.setStatus('current')
if mibBuilder.loadTexts: sessionMultilinkPeerEIDLength.setDescription("Length of peer's EID data (0 means not negotiated).")
sessionMultilinkMyEIDData = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 217, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionMultilinkMyEIDData.setStatus('current')
if mibBuilder.loadTexts: sessionMultilinkMyEIDData.setDescription('EID data I negotiated (if any).')
sessionMultilinkPeerEIDData = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 217, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionMultilinkPeerEIDData.setStatus('current')
if mibBuilder.loadTexts: sessionMultilinkPeerEIDData.setDescription('EID data peer negotiated (if any).')
sessionVpopTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 2, 218), )
if mibBuilder.loadTexts: sessionVpopTable.setStatus('current')
if mibBuilder.loadTexts: sessionVpopTable.setDescription('Session VPOP Information.')
sessionVpopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 2, 218, 1), ).setIndexNames((0, "APTIS-MONITOR-MIB", "sessionVpopVpopIndex"), (0, "APTIS-MONITOR-MIB", "sessionVpopCallType"), (0, "APTIS-MONITOR-MIB", "sessionVpopProtocol"))
if mibBuilder.loadTexts: sessionVpopEntry.setStatus('current')
if mibBuilder.loadTexts: sessionVpopEntry.setDescription('This is the structure of entries in the sessionVpopTable.')
sessionVpopVpopIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 218, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionVpopVpopIndex.setStatus('current')
if mibBuilder.loadTexts: sessionVpopVpopIndex.setDescription('vpop Index (one based).')
sessionVpopVpopId = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 218, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionVpopVpopId.setStatus('current')
if mibBuilder.loadTexts: sessionVpopVpopId.setDescription('VPOP Id (zero based).')
sessionVpopCallType = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 218, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("trunk", 2), ("modem", 3), ("isdn", 4), ("v110", 5), ("v120", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionVpopCallType.setStatus('current')
if mibBuilder.loadTexts: sessionVpopCallType.setDescription('Data link call type')
sessionVpopProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 218, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("setup", 1), ("other", 2), ("trunk", 3), ("ppp", 4), ("cleartcp", 5), ("tunnelled", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionVpopProtocol.setStatus('current')
if mibBuilder.loadTexts: sessionVpopProtocol.setDescription('Transport protocol')
sessionVpopCurrentCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 218, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionVpopCurrentCount.setStatus('current')
if mibBuilder.loadTexts: sessionVpopCurrentCount.setDescription('The number of sessions currently active')
sessionVpopCurrentDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 218, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionVpopCurrentDuration.setStatus('current')
if mibBuilder.loadTexts: sessionVpopCurrentDuration.setDescription('The combined duration of all currently active sessions of this type, for this vpop.')
sessionVpopCumulativeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 218, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionVpopCumulativeCount.setStatus('current')
if mibBuilder.loadTexts: sessionVpopCumulativeCount.setDescription('The cumulative number of sessions of this type, for this vpop, both active and inactive, since system boot')
sessionVpopCumulativeDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 218, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionVpopCumulativeDuration.setStatus('current')
if mibBuilder.loadTexts: sessionVpopCumulativeDuration.setDescription('The combined duration of of all sessions of this type, for this vpop, both active and inactive, since system boot')
slotStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 2, 201), )
if mibBuilder.loadTexts: slotStatusTable.setStatus('obsolete')
if mibBuilder.loadTexts: slotStatusTable.setDescription("This table describes the status of the physical slots in a CVX switch. NOTE: cards in the CVX chassis report two card types per slot. The Service Module is the main logic board, residing in the 'front' of the slot. The Line Termination Module, residing in the 'back' of the slot, houses the data and power connectors for the system.")
slotStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 2, 201, 1), ).setIndexNames((0, "APTIS-MONITOR-MIB", "slotStatusShelfNumber"), (0, "APTIS-MONITOR-MIB", "slotStatusSlotIndex"))
if mibBuilder.loadTexts: slotStatusEntry.setStatus('current')
if mibBuilder.loadTexts: slotStatusEntry.setDescription('This is the structure of entries in the slotStatusTable.')
slotStatusShelfNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 201, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotStatusShelfNumber.setStatus('current')
if mibBuilder.loadTexts: slotStatusShelfNumber.setDescription('The number of the shelf in which this slot resides.')
slotStatusSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 201, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotStatusSlotIndex.setStatus('current')
if mibBuilder.loadTexts: slotStatusSlotIndex.setDescription('The physical slot number.')
slotStatusSlotStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 201, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("slotStatusEmpty", 0), ("slotStatusNoPower", 1), ("slotStatusPresent", 2), ("slotStatusReady", 3), ("slotStatusLoading", 4), ("slotStatusStarted", 5), ("slotStatusIniting", 6), ("slotStatusUp", 7), ("slotStatusDown", 8), ("slotStatusUnknown", 9), ("slotStatusPulled", 10), ("slotStatusFailed", 11), ("slotStatusBadCard", 12), ("slotStatusStandby", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotStatusSlotStatus.setStatus('current')
if mibBuilder.loadTexts: slotStatusSlotStatus.setDescription('The current state of the slot card.')
slotStatusPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 201, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotStatusPartNumber.setStatus('current')
if mibBuilder.loadTexts: slotStatusPartNumber.setDescription('Identifies the card in this slot by part number, The OID will be defined in the aptis-reg.aptis-components subtree.')
slotStatusSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 201, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotStatusSerialNumber.setStatus('current')
if mibBuilder.loadTexts: slotStatusSerialNumber.setDescription('The serial number of the card, as reported by the slot card hardware. If the slot card does not report a value, or if it is not currently readable, then this variable will have the value of zero.')
slotStatusHardwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 201, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotStatusHardwareRev.setStatus('current')
if mibBuilder.loadTexts: slotStatusHardwareRev.setDescription('The hardware revision of the card, as reported by the slot card hardware. If the slot card does not report a value, or if it is not currently readable, then this variable will have the value of zero.')
slotStatusStiffwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 201, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotStatusStiffwareRev.setStatus('current')
if mibBuilder.loadTexts: slotStatusStiffwareRev.setDescription('The stiffware revision of the card, as reported by the slot card hardware. If the slot card does not report a value, or if it is not currently readable, then this variable will have the value of zero.')
slotStatusFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 201, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotStatusFirmwareRev.setStatus('current')
if mibBuilder.loadTexts: slotStatusFirmwareRev.setDescription('The revision string of the firmware running on the card, as reported by the firmware.')
slotStatusSystemMem = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 201, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotStatusSystemMem.setStatus('current')
if mibBuilder.loadTexts: slotStatusSystemMem.setDescription("The amount of memory, in Kilobytes, in the card's main memory region. If that amount is unknown, then this variable will have the value of zero.")
slotStatusOtherMem = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 201, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotStatusOtherMem.setStatus('current')
if mibBuilder.loadTexts: slotStatusOtherMem.setDescription("The amount of memory, in Kilobytes, in the card's auxilliary memory region. If that amount is unknown, then this variable will have the value of zero. NOTE that the exact nature and use of this memory may vary by slot card.")
slotStatusTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 201, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotStatusTemperature.setStatus('current')
if mibBuilder.loadTexts: slotStatusTemperature.setDescription('The temperature of the slot card as reported by hardware, in degrees Celsius.')
slotStatusSlotType = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 201, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("slotEmpty", 0), ("slotScc", 1), ("slotMac", 2), ("slotDac", 3), ("slotUnknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotStatusSlotType.setStatus('current')
if mibBuilder.loadTexts: slotStatusSlotType.setDescription('The general type of the slot card. More specific detail on the type of card may be found in serviceModule and lineTerminationModule variables.')
slotStatusSlotOos = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 201, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotStatusSlotOos.setStatus('current')
if mibBuilder.loadTexts: slotStatusSlotOos.setDescription('Current oos value for this slot.')
slotStatusServiceModule = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 201, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotStatusServiceModule.setStatus('current')
if mibBuilder.loadTexts: slotStatusServiceModule.setDescription('The part number of the Service Module in this slot.')
slotStatusLineTerminationModule = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 201, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 820121, 820131, 820141, 820151, 820322, 820323))).clone(namedValues=NamedValues(("ltmEmpty", 0), ("dS3", 820121), ("dS3R", 820131), ("dS3P", 820141), ("dS3PR", 820151), ("t1", 820322), ("e1", 820323)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotStatusLineTerminationModule.setStatus('current')
if mibBuilder.loadTexts: slotStatusLineTerminationModule.setDescription('The part number of the line termination module in this slot.')
slotStatusNewTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 2, 205), )
if mibBuilder.loadTexts: slotStatusNewTable.setStatus('current')
if mibBuilder.loadTexts: slotStatusNewTable.setDescription("This table describes the status of the physical slots in a CVX switch. NOTE: cards in the CVX chassis report two card types per slot. The Service Module is the main logic board, residing in the 'front' of the slot. The Line Termination Module, residing in the 'back' of the slot, houses the data and power connectors for the system. This table replaces the slot_status table which should be considered obsolete.")
slotStatusNewEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 2, 205, 1), ).setIndexNames((0, "APTIS-MONITOR-MIB", "slotStatusNewShelfNumber"), (0, "APTIS-MONITOR-MIB", "slotStatusNewSlotIndex"))
if mibBuilder.loadTexts: slotStatusNewEntry.setStatus('current')
if mibBuilder.loadTexts: slotStatusNewEntry.setDescription('This is the structure of entries in the slotStatusNewTable.')
slotStatusNewShelfNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 205, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotStatusNewShelfNumber.setStatus('current')
if mibBuilder.loadTexts: slotStatusNewShelfNumber.setDescription('The number of the shelf in which this slot resides.')
slotStatusNewSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 205, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotStatusNewSlotIndex.setStatus('current')
if mibBuilder.loadTexts: slotStatusNewSlotIndex.setDescription('The physical slot number.')
slotStatusNewSlotStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 205, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("slotStatusEmpty", 0), ("slotStatusNoPower", 1), ("slotStatusPresent", 2), ("slotStatusReady", 3), ("slotStatusLoading", 4), ("slotStatusStarted", 5), ("slotStatusIniting", 6), ("slotStatusUp", 7), ("slotStatusDown", 8), ("slotStatusUnknown", 9), ("slotStatusPulled", 10), ("slotStatusFailed", 11), ("slotStatusBadCard", 12), ("slotStatusStandby", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotStatusNewSlotStatus.setStatus('current')
if mibBuilder.loadTexts: slotStatusNewSlotStatus.setDescription('The current state of the slot card.')
slotStatusNewSlotType = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 205, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("slotEmpty", 0), ("slotScc", 1), ("slotMac", 2), ("slotDac", 3), ("slotUnknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotStatusNewSlotType.setStatus('current')
if mibBuilder.loadTexts: slotStatusNewSlotType.setDescription('The general type of the slot card. More specific detail on the type of card may be found in serviceModule and lineTerminationModule variables.')
slotStatusNewProductCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 205, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotStatusNewProductCode.setStatus('current')
if mibBuilder.loadTexts: slotStatusNewProductCode.setDescription('Identifies the card in this slot by part number.')
slotStatusNewSlotSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 205, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotStatusNewSlotSerialNumber.setStatus('current')
if mibBuilder.loadTexts: slotStatusNewSlotSerialNumber.setDescription('The serial number of the card, as reported by the slot card hardware. If the slot card does not report a value, or if it is not currently readable, then this variable will have the value of zero.')
slotStatusNewFabricationRev = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 205, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotStatusNewFabricationRev.setStatus('current')
if mibBuilder.loadTexts: slotStatusNewFabricationRev.setDescription('The hardware revision of the card, as reported by the slot card hardware. If the slot card does not report a value, or if it is not currently readable, then this variable will have the value of zero.')
slotStatusNewPalRev = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 205, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotStatusNewPalRev.setStatus('current')
if mibBuilder.loadTexts: slotStatusNewPalRev.setDescription('The PAL revision of the card, as reported by the slot card hardware. If the slot card does not report a value, or if it is not currently readable, then this variable will have the value of zero.')
slotStatusNewReworkRev = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 205, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotStatusNewReworkRev.setStatus('current')
if mibBuilder.loadTexts: slotStatusNewReworkRev.setDescription('The rework revision of the card, as reported by the slot card hardware. If the slot card does not report a value, or if it is not currently readable, then this variable will have the value of zero.')
slotStatusNewFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 205, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotStatusNewFirmwareRev.setStatus('current')
if mibBuilder.loadTexts: slotStatusNewFirmwareRev.setDescription('The revision string of the firmware running on the card, as reported by the firmware.')
slotStatusNewTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 205, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotStatusNewTemperature.setStatus('current')
if mibBuilder.loadTexts: slotStatusNewTemperature.setDescription('The temperature of the slot card as reported by hardware, in degrees Celsius.')
slotStatusNewSlotOos = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 205, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotStatusNewSlotOos.setStatus('current')
if mibBuilder.loadTexts: slotStatusNewSlotOos.setDescription('Current oos value for this slot.')
slotStatusNewLineTerminationModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 205, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 820121, 820131, 820141, 820151, 820322, 820323, 820324, 820325, 820326, 820327, 820328, 820329))).clone(namedValues=NamedValues(("ltmEmpty", 0), ("dS3", 820121), ("dS3R", 820131), ("dS3P", 820141), ("dS3PR", 820151), ("t1", 820322), ("e1", 820323), ("t1x24", 820324), ("e1x24", 820325), ("dS3x2", 820326), ("dS3x2R", 820327), ("dS3x2P", 820328), ("dS3x2PR", 820329)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotStatusNewLineTerminationModuleType.setStatus('current')
if mibBuilder.loadTexts: slotStatusNewLineTerminationModuleType.setDescription('The type of line termination module connected to the card in this slot. If no line termination module is connected, this value is 0.')
timerStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3601), )
if mibBuilder.loadTexts: timerStatsTable.setStatus('current')
if mibBuilder.loadTexts: timerStatsTable.setDescription('timer stats')
timerStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3601, 1), ).setIndexNames((0, "APTIS-MONITOR-MIB", "timerStatsSlotNumber"))
if mibBuilder.loadTexts: timerStatsEntry.setStatus('current')
if mibBuilder.loadTexts: timerStatsEntry.setDescription('This is the structure of entries in the timerStatsTable.')
timerStatsSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3601, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: timerStatsSlotNumber.setStatus('current')
if mibBuilder.loadTexts: timerStatsSlotNumber.setDescription('Slot number')
timerStatsCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3601, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("sCC", 1), ("dAC", 2), ("mAC", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: timerStatsCardType.setStatus('current')
if mibBuilder.loadTexts: timerStatsCardType.setDescription('Type of card reporting timer information')
timerStatsCPUNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3601, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: timerStatsCPUNumber.setStatus('current')
if mibBuilder.loadTexts: timerStatsCPUNumber.setDescription('CPU number (0 = main CPU, 1..n = IOP)')
timerStatsTimerEntrySize = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3601, 1, 101), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: timerStatsTimerEntrySize.setStatus('current')
if mibBuilder.loadTexts: timerStatsTimerEntrySize.setDescription('Size of each timer data structure')
timerStatsTimerMemorySize = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3601, 1, 102), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: timerStatsTimerMemorySize.setStatus('current')
if mibBuilder.loadTexts: timerStatsTimerMemorySize.setDescription('Total amount of memory used for timer entries')
timerStatsTotalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3601, 1, 201), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: timerStatsTotalCount.setStatus('current')
if mibBuilder.loadTexts: timerStatsTotalCount.setDescription('Total number of timer entries created')
timerStatsFreeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3601, 1, 202), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: timerStatsFreeCount.setStatus('current')
if mibBuilder.loadTexts: timerStatsFreeCount.setDescription('Total number of timer entries currently unused')
timerStatsFreeMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3601, 1, 203), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: timerStatsFreeMin.setStatus('current')
if mibBuilder.loadTexts: timerStatsFreeMin.setDescription('Minimum number of timer entries unused')
timerStatsActiveCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3601, 1, 204), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: timerStatsActiveCount.setStatus('current')
if mibBuilder.loadTexts: timerStatsActiveCount.setDescription('Total number of timer entries currently active')
timerStatsActiveMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3601, 1, 205), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: timerStatsActiveMax.setStatus('current')
if mibBuilder.loadTexts: timerStatsActiveMax.setDescription('Maximum number of timer entries active')
timerStatsAllocSuccesses = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3601, 1, 301), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: timerStatsAllocSuccesses.setStatus('current')
if mibBuilder.loadTexts: timerStatsAllocSuccesses.setDescription('Number of timers successfully allocated')
timerStatsAllocFails = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3601, 1, 302), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: timerStatsAllocFails.setStatus('current')
if mibBuilder.loadTexts: timerStatsAllocFails.setDescription('Number of timer allocations that failed')
timerStatsFreeSuccesses = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3601, 1, 303), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: timerStatsFreeSuccesses.setStatus('current')
if mibBuilder.loadTexts: timerStatsFreeSuccesses.setDescription('Number of timers successfully freed')
timerStatsFreeFails = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3601, 1, 304), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: timerStatsFreeFails.setStatus('current')
if mibBuilder.loadTexts: timerStatsFreeFails.setDescription('Number of timer frees that failed')
memoryStatsTableTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3605), )
if mibBuilder.loadTexts: memoryStatsTableTable.setStatus('current')
if mibBuilder.loadTexts: memoryStatsTableTable.setDescription('memory stats table')
memoryStatsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3605, 1), ).setIndexNames((0, "APTIS-MONITOR-MIB", "memoryStatsTableSlotNumber"))
if mibBuilder.loadTexts: memoryStatsTableEntry.setStatus('current')
if mibBuilder.loadTexts: memoryStatsTableEntry.setDescription('This is the structure of entries in the memoryStatsTableTable.')
memoryStatsTableSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3605, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("bep", 1), ("fep", 2), ("slot1", 3), ("slot2", 4), ("slot3", 5), ("slot4", 6), ("slot5", 7), ("slot6", 8), ("slot7", 9), ("slot8", 10), ("slot11", 11), ("slot12", 12), ("slot13", 13), ("slot14", 14), ("slot15", 15), ("slot16", 16), ("slot17", 17), ("slot18", 18)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryStatsTableSlotNumber.setStatus('current')
if mibBuilder.loadTexts: memoryStatsTableSlotNumber.setDescription('Slot number')
memoryStatsTableCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3605, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unk", 0), ("sCC", 1), ("dAC", 2), ("mAC", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryStatsTableCardType.setStatus('current')
if mibBuilder.loadTexts: memoryStatsTableCardType.setDescription('Type of card reporting timer information')
memoryStatsTableCPUNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3605, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryStatsTableCPUNumber.setStatus('current')
if mibBuilder.loadTexts: memoryStatsTableCPUNumber.setDescription('CPU number (0 = main CPU, 1..n = IOP)')
memoryStatsTableTotalSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3605, 1, 101), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryStatsTableTotalSize.setStatus('current')
if mibBuilder.loadTexts: memoryStatsTableTotalSize.setDescription('Total amount of memory available to CPU')
memoryStatsTableManagedSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3605, 1, 102), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryStatsTableManagedSize.setStatus('current')
if mibBuilder.loadTexts: memoryStatsTableManagedSize.setDescription('Amount of memory given to memory allocation system')
memoryStatsTableFreeSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3605, 1, 201), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryStatsTableFreeSize.setStatus('current')
if mibBuilder.loadTexts: memoryStatsTableFreeSize.setDescription('Amount of free memory')
memoryStatsTableFreeBlockCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3605, 1, 202), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryStatsTableFreeBlockCount.setStatus('current')
if mibBuilder.loadTexts: memoryStatsTableFreeBlockCount.setDescription('Size of largest free block')
memoryStatsTableFreeLargestBlock = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3605, 1, 203), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryStatsTableFreeLargestBlock.setStatus('current')
if mibBuilder.loadTexts: memoryStatsTableFreeLargestBlock.setDescription('Size of largest free block')
memoryStatsTableFreeSmallestBlock = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3605, 1, 204), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryStatsTableFreeSmallestBlock.setStatus('current')
if mibBuilder.loadTexts: memoryStatsTableFreeSmallestBlock.setDescription('Size of smallest free block')
memoryStatsTableUsedSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3605, 1, 301), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryStatsTableUsedSize.setStatus('current')
if mibBuilder.loadTexts: memoryStatsTableUsedSize.setDescription('Amount of used memory')
memoryStatsTableUsedBlockCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3605, 1, 302), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryStatsTableUsedBlockCount.setStatus('current')
if mibBuilder.loadTexts: memoryStatsTableUsedBlockCount.setDescription('Size of largest used block')
memoryStatsTableUsedLargestBlock = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3605, 1, 303), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryStatsTableUsedLargestBlock.setStatus('current')
if mibBuilder.loadTexts: memoryStatsTableUsedLargestBlock.setDescription('Size of largest used block')
memoryStatsTableUsedSmallestBlock = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3605, 1, 304), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryStatsTableUsedSmallestBlock.setStatus('current')
if mibBuilder.loadTexts: memoryStatsTableUsedSmallestBlock.setDescription('Size of smallest used block')
memoryStatsTableAllocSuccesses = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3605, 1, 401), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryStatsTableAllocSuccesses.setStatus('current')
if mibBuilder.loadTexts: memoryStatsTableAllocSuccesses.setDescription('Number of successful allocations')
memoryStatsTableAllocFails = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3605, 1, 402), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryStatsTableAllocFails.setStatus('current')
if mibBuilder.loadTexts: memoryStatsTableAllocFails.setDescription('Number of failed allocations')
memoryStatsTableFreeSuccesses = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3605, 1, 403), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryStatsTableFreeSuccesses.setStatus('current')
if mibBuilder.loadTexts: memoryStatsTableFreeSuccesses.setDescription('Number of successful frees')
memoryStatsTableFreeFails = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3605, 1, 404), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryStatsTableFreeFails.setStatus('current')
if mibBuilder.loadTexts: memoryStatsTableFreeFails.setDescription('Number of failed frees')
pbufStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3603), )
if mibBuilder.loadTexts: pbufStatsTable.setStatus('current')
if mibBuilder.loadTexts: pbufStatsTable.setDescription('pbuf stats')
pbufStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3603, 1), ).setIndexNames((0, "APTIS-MONITOR-MIB", "pbufStatsSlotNumber"))
if mibBuilder.loadTexts: pbufStatsEntry.setStatus('current')
if mibBuilder.loadTexts: pbufStatsEntry.setDescription('This is the structure of entries in the pbufStatsTable.')
pbufStatsSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3603, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbufStatsSlotNumber.setStatus('current')
if mibBuilder.loadTexts: pbufStatsSlotNumber.setDescription('Slot number')
pbufStatsCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3603, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("sCC", 1), ("tSC", 2), ("mAC", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbufStatsCardType.setStatus('current')
if mibBuilder.loadTexts: pbufStatsCardType.setDescription('Type of card reporting timer information')
pbufStatsCPUNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3603, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbufStatsCPUNumber.setStatus('current')
if mibBuilder.loadTexts: pbufStatsCPUNumber.setDescription('CPU number (0 = main CPU, 1..n = IOP)')
pbufStatsDataSize0 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3603, 1, 101), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbufStatsDataSize0.setStatus('current')
if mibBuilder.loadTexts: pbufStatsDataSize0.setDescription('User data size of size-0 buffers')
pbufStatsTotalCount0 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3603, 1, 102), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbufStatsTotalCount0.setStatus('current')
if mibBuilder.loadTexts: pbufStatsTotalCount0.setDescription('Number of size-0 buffers created')
pbufStatsAllocatedCount0 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3603, 1, 103), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbufStatsAllocatedCount0.setStatus('current')
if mibBuilder.loadTexts: pbufStatsAllocatedCount0.setDescription('Number of size-0 buffers currently allocated')
pbufStatsPermAllocatedCount0 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3603, 1, 104), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbufStatsPermAllocatedCount0.setStatus('current')
if mibBuilder.loadTexts: pbufStatsPermAllocatedCount0.setDescription('Number of size-0 buffers permanently allocated')
pbufStatsAllocatedMax0 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3603, 1, 105), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbufStatsAllocatedMax0.setStatus('current')
if mibBuilder.loadTexts: pbufStatsAllocatedMax0.setDescription('Maximum number of size-0 buffers allocated')
pbufStatsFreeCount0 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3603, 1, 106), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbufStatsFreeCount0.setStatus('current')
if mibBuilder.loadTexts: pbufStatsFreeCount0.setDescription('Number of size-0 buffers currently free')
pbufStatsFreeMin0 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3603, 1, 107), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbufStatsFreeMin0.setStatus('current')
if mibBuilder.loadTexts: pbufStatsFreeMin0.setDescription('Minimum number of size-0 buffers free')
pbufStatsAllocSuccesses0 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3603, 1, 108), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbufStatsAllocSuccesses0.setStatus('current')
if mibBuilder.loadTexts: pbufStatsAllocSuccesses0.setDescription('Number of successful size-0 buffer allocations')
pbufStatsAllocFails0 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3603, 1, 109), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbufStatsAllocFails0.setStatus('current')
if mibBuilder.loadTexts: pbufStatsAllocFails0.setDescription('Number of failed size-0 buffer allocations')
pbufStatsFreeSuccesses0 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3603, 1, 110), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbufStatsFreeSuccesses0.setStatus('current')
if mibBuilder.loadTexts: pbufStatsFreeSuccesses0.setDescription('Number of successful size-0 buffer frees')
pbufStatsFreeFails0 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3603, 1, 111), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbufStatsFreeFails0.setStatus('current')
if mibBuilder.loadTexts: pbufStatsFreeFails0.setDescription('Number of failed size-0 buffer frees')
pbufStatsDataSize1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3603, 1, 201), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbufStatsDataSize1.setStatus('current')
if mibBuilder.loadTexts: pbufStatsDataSize1.setDescription('User data size of size-1 buffers')
pbufStatsTotalCount1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3603, 1, 202), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbufStatsTotalCount1.setStatus('current')
if mibBuilder.loadTexts: pbufStatsTotalCount1.setDescription('Number of size-1 buffers created')
pbufStatsAllocatedCount1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3603, 1, 203), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbufStatsAllocatedCount1.setStatus('current')
if mibBuilder.loadTexts: pbufStatsAllocatedCount1.setDescription('Number of size-1 buffers currently allocated')
pbufStatsPermAllocatedCount1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3603, 1, 204), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbufStatsPermAllocatedCount1.setStatus('current')
if mibBuilder.loadTexts: pbufStatsPermAllocatedCount1.setDescription('Number of size-1 buffers permanently allocated')
pbufStatsAllocatedMax1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3603, 1, 205), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbufStatsAllocatedMax1.setStatus('current')
if mibBuilder.loadTexts: pbufStatsAllocatedMax1.setDescription('Maximum number of size-1 buffers allocated')
pbufStatsFreeCount1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3603, 1, 206), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbufStatsFreeCount1.setStatus('current')
if mibBuilder.loadTexts: pbufStatsFreeCount1.setDescription('Number of size-1 buffers currently free')
pbufStatsFreeMin1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3603, 1, 207), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbufStatsFreeMin1.setStatus('current')
if mibBuilder.loadTexts: pbufStatsFreeMin1.setDescription('Minimum number of size-1 buffers free')
pbufStatsAllocSuccesses1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3603, 1, 208), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbufStatsAllocSuccesses1.setStatus('current')
if mibBuilder.loadTexts: pbufStatsAllocSuccesses1.setDescription('Number of successful size-1 buffer allocations')
pbufStatsAllocFails1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3603, 1, 209), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbufStatsAllocFails1.setStatus('current')
if mibBuilder.loadTexts: pbufStatsAllocFails1.setDescription('Number of failed size-1 buffer allocations')
pbufStatsFreeSuccesses1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3603, 1, 210), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbufStatsFreeSuccesses1.setStatus('current')
if mibBuilder.loadTexts: pbufStatsFreeSuccesses1.setDescription('Number of successful size-1 buffer frees')
pbufStatsFreeFails1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3603, 1, 211), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbufStatsFreeFails1.setStatus('current')
if mibBuilder.loadTexts: pbufStatsFreeFails1.setDescription('Number of failed size-1 buffer frees')
pbufStatsDataSize2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3603, 1, 301), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbufStatsDataSize2.setStatus('current')
if mibBuilder.loadTexts: pbufStatsDataSize2.setDescription('User data size of size-2 buffers')
pbufStatsTotalCount2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3603, 1, 302), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbufStatsTotalCount2.setStatus('current')
if mibBuilder.loadTexts: pbufStatsTotalCount2.setDescription('Number of size-2 buffers created')
pbufStatsAllocatedCount2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3603, 1, 303), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbufStatsAllocatedCount2.setStatus('current')
if mibBuilder.loadTexts: pbufStatsAllocatedCount2.setDescription('Number of size-2 buffers currently allocated')
pbufStatsPermAllocatedCount2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3603, 1, 304), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbufStatsPermAllocatedCount2.setStatus('current')
if mibBuilder.loadTexts: pbufStatsPermAllocatedCount2.setDescription('Number of size-2 buffers permanently allocated')
pbufStatsAllocatedMax2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3603, 1, 305), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbufStatsAllocatedMax2.setStatus('current')
if mibBuilder.loadTexts: pbufStatsAllocatedMax2.setDescription('Maximum number of size-2 buffers allocated')
pbufStatsFreeCount2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3603, 1, 306), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbufStatsFreeCount2.setStatus('current')
if mibBuilder.loadTexts: pbufStatsFreeCount2.setDescription('Number of size-2 buffers currently free')
pbufStatsFreeMin2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3603, 1, 307), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbufStatsFreeMin2.setStatus('current')
if mibBuilder.loadTexts: pbufStatsFreeMin2.setDescription('Minimum number of size-2 buffers free')
pbufStatsAllocSuccesses2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3603, 1, 308), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbufStatsAllocSuccesses2.setStatus('current')
if mibBuilder.loadTexts: pbufStatsAllocSuccesses2.setDescription('Number of successful size-2 buffer allocations')
pbufStatsAllocFails2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3603, 1, 309), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbufStatsAllocFails2.setStatus('current')
if mibBuilder.loadTexts: pbufStatsAllocFails2.setDescription('Number of failed size-2 buffer allocations')
pbufStatsFreeSuccesses2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3603, 1, 310), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbufStatsFreeSuccesses2.setStatus('current')
if mibBuilder.loadTexts: pbufStatsFreeSuccesses2.setDescription('Number of successful size-2 buffer frees')
pbufStatsFreeFails2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3603, 1, 311), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbufStatsFreeFails2.setStatus('current')
if mibBuilder.loadTexts: pbufStatsFreeFails2.setDescription('Number of failed size-2 buffer frees')
pbufStatsDataSize3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3603, 1, 401), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbufStatsDataSize3.setStatus('current')
if mibBuilder.loadTexts: pbufStatsDataSize3.setDescription('User data size of size-3 buffers')
pbufStatsTotalCount3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3603, 1, 402), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbufStatsTotalCount3.setStatus('current')
if mibBuilder.loadTexts: pbufStatsTotalCount3.setDescription('Number of size-3 buffers created')
pbufStatsAllocatedCount3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3603, 1, 403), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbufStatsAllocatedCount3.setStatus('current')
if mibBuilder.loadTexts: pbufStatsAllocatedCount3.setDescription('Number of size-3 buffers currently allocated')
pbufStatsPermAllocatedCount3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3603, 1, 404), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbufStatsPermAllocatedCount3.setStatus('current')
if mibBuilder.loadTexts: pbufStatsPermAllocatedCount3.setDescription('Number of size-3 buffers permanently allocated')
pbufStatsAllocatedMax3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3603, 1, 405), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbufStatsAllocatedMax3.setStatus('current')
if mibBuilder.loadTexts: pbufStatsAllocatedMax3.setDescription('Maximum number of size-3 buffers allocated')
pbufStatsFreeCount3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3603, 1, 406), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbufStatsFreeCount3.setStatus('current')
if mibBuilder.loadTexts: pbufStatsFreeCount3.setDescription('Number of size-3 buffers currently free')
pbufStatsFreeMin3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3603, 1, 407), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbufStatsFreeMin3.setStatus('current')
if mibBuilder.loadTexts: pbufStatsFreeMin3.setDescription('Minimum number of size-3 buffers free')
pbufStatsAllocSuccesses3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3603, 1, 408), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbufStatsAllocSuccesses3.setStatus('current')
if mibBuilder.loadTexts: pbufStatsAllocSuccesses3.setDescription('Number of successful size-3 buffer allocations')
pbufStatsAllocFails3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3603, 1, 409), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbufStatsAllocFails3.setStatus('current')
if mibBuilder.loadTexts: pbufStatsAllocFails3.setDescription('Number of failed size-3 buffer allocations')
pbufStatsFreeSuccesses3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3603, 1, 410), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbufStatsFreeSuccesses3.setStatus('current')
if mibBuilder.loadTexts: pbufStatsFreeSuccesses3.setDescription('Number of successful size-3 buffer frees')
pbufStatsFreeFails3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3603, 1, 411), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbufStatsFreeFails3.setStatus('current')
if mibBuilder.loadTexts: pbufStatsFreeFails3.setDescription('Number of failed size-3 buffer frees')
pbufStatsDataSize4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3603, 1, 501), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbufStatsDataSize4.setStatus('current')
if mibBuilder.loadTexts: pbufStatsDataSize4.setDescription('User data size of size-4 buffers')
pbufStatsTotalCount4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3603, 1, 502), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbufStatsTotalCount4.setStatus('current')
if mibBuilder.loadTexts: pbufStatsTotalCount4.setDescription('Number of size-4 buffers created')
pbufStatsAllocatedCount4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3603, 1, 503), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbufStatsAllocatedCount4.setStatus('current')
if mibBuilder.loadTexts: pbufStatsAllocatedCount4.setDescription('Number of size-4 buffers currently allocated')
pbufStatsPermAllocatedCount4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3603, 1, 504), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbufStatsPermAllocatedCount4.setStatus('current')
if mibBuilder.loadTexts: pbufStatsPermAllocatedCount4.setDescription('Number of size-4 buffers permanently allocated')
pbufStatsAllocatedMax4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3603, 1, 505), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbufStatsAllocatedMax4.setStatus('current')
if mibBuilder.loadTexts: pbufStatsAllocatedMax4.setDescription('Maximum number of size-4 buffers allocated')
pbufStatsFreeCount4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3603, 1, 506), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbufStatsFreeCount4.setStatus('current')
if mibBuilder.loadTexts: pbufStatsFreeCount4.setDescription('Number of size-4 buffers currently free')
pbufStatsFreeMin4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3603, 1, 507), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbufStatsFreeMin4.setStatus('current')
if mibBuilder.loadTexts: pbufStatsFreeMin4.setDescription('Minimum number of size-4 buffers free')
pbufStatsAllocSuccesses4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3603, 1, 508), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbufStatsAllocSuccesses4.setStatus('current')
if mibBuilder.loadTexts: pbufStatsAllocSuccesses4.setDescription('Number of successful size-4 buffer allocations')
pbufStatsAllocFails4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3603, 1, 509), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbufStatsAllocFails4.setStatus('current')
if mibBuilder.loadTexts: pbufStatsAllocFails4.setDescription('Number of failed size-4 buffer allocations')
pbufStatsFreeSuccesses4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3603, 1, 510), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbufStatsFreeSuccesses4.setStatus('current')
if mibBuilder.loadTexts: pbufStatsFreeSuccesses4.setDescription('Number of successful size-4 buffer frees')
pbufStatsFreeFails4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3603, 1, 511), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbufStatsFreeFails4.setStatus('current')
if mibBuilder.loadTexts: pbufStatsFreeFails4.setDescription('Number of failed size-4 buffer frees')
pbufStatsDataSize5 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3603, 1, 601), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbufStatsDataSize5.setStatus('current')
if mibBuilder.loadTexts: pbufStatsDataSize5.setDescription('User data size of size-5 buffers')
pbufStatsTotalCount5 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3603, 1, 602), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbufStatsTotalCount5.setStatus('current')
if mibBuilder.loadTexts: pbufStatsTotalCount5.setDescription('Number of size-5 buffers created')
pbufStatsAllocatedCount5 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3603, 1, 603), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbufStatsAllocatedCount5.setStatus('current')
if mibBuilder.loadTexts: pbufStatsAllocatedCount5.setDescription('Number of size-5 buffers currently allocated')
pbufStatsPermAllocatedCount5 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3603, 1, 604), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbufStatsPermAllocatedCount5.setStatus('current')
if mibBuilder.loadTexts: pbufStatsPermAllocatedCount5.setDescription('Number of size-5 buffers permanently allocated')
pbufStatsAllocatedMax5 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3603, 1, 605), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbufStatsAllocatedMax5.setStatus('current')
if mibBuilder.loadTexts: pbufStatsAllocatedMax5.setDescription('Maximum number of size-5 buffers allocated')
pbufStatsFreeCount5 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3603, 1, 606), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbufStatsFreeCount5.setStatus('current')
if mibBuilder.loadTexts: pbufStatsFreeCount5.setDescription('Number of size-5 buffers currently free')
pbufStatsFreeMin5 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3603, 1, 607), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbufStatsFreeMin5.setStatus('current')
if mibBuilder.loadTexts: pbufStatsFreeMin5.setDescription('Minimum number of size-5 buffers free')
pbufStatsAllocSuccesses5 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3603, 1, 608), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbufStatsAllocSuccesses5.setStatus('current')
if mibBuilder.loadTexts: pbufStatsAllocSuccesses5.setDescription('Number of successful size-5 buffer allocations')
pbufStatsAllocFails5 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3603, 1, 609), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbufStatsAllocFails5.setStatus('current')
if mibBuilder.loadTexts: pbufStatsAllocFails5.setDescription('Number of failed size-5 buffer allocations')
pbufStatsFreeSuccesses5 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3603, 1, 610), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbufStatsFreeSuccesses5.setStatus('current')
if mibBuilder.loadTexts: pbufStatsFreeSuccesses5.setDescription('Number of successful size-5 buffer frees')
pbufStatsFreeFails5 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3603, 1, 611), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbufStatsFreeFails5.setStatus('current')
if mibBuilder.loadTexts: pbufStatsFreeFails5.setDescription('Number of failed size-5 buffer frees')
taskStatsTableTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3606), )
if mibBuilder.loadTexts: taskStatsTableTable.setStatus('current')
if mibBuilder.loadTexts: taskStatsTableTable.setDescription('task stats table')
taskStatsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3606, 1), ).setIndexNames((0, "APTIS-MONITOR-MIB", "taskStatsTableSlotNumber"), (0, "APTIS-MONITOR-MIB", "taskStatsTableTaskIndex"))
if mibBuilder.loadTexts: taskStatsTableEntry.setStatus('current')
if mibBuilder.loadTexts: taskStatsTableEntry.setDescription('This is the structure of entries in the taskStatsTableTable.')
taskStatsTableSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3606, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("bep", 1), ("fep", 2), ("slot1", 3), ("slot2", 4), ("slot3", 5), ("slot4", 6), ("slot5", 7), ("slot6", 8), ("slot7", 9), ("slot8", 10), ("slot11", 11), ("slot12", 12), ("slot13", 13), ("slot14", 14), ("slot15", 15), ("slot16", 16), ("slot17", 17), ("slot18", 18)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: taskStatsTableSlotNumber.setStatus('current')
if mibBuilder.loadTexts: taskStatsTableSlotNumber.setDescription('Slot number')
taskStatsTableTaskIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3606, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: taskStatsTableTaskIndex.setStatus('current')
if mibBuilder.loadTexts: taskStatsTableTaskIndex.setDescription('Task index. This is a sequential number.')
taskStatsTableTaskID = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3606, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: taskStatsTableTaskID.setStatus('current')
if mibBuilder.loadTexts: taskStatsTableTaskID.setDescription('Task ID')
taskStatsTableTaskName = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3606, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: taskStatsTableTaskName.setStatus('current')
if mibBuilder.loadTexts: taskStatsTableTaskName.setDescription('Task Name')
taskStatsTableTCBSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3606, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: taskStatsTableTCBSize.setStatus('current')
if mibBuilder.loadTexts: taskStatsTableTCBSize.setDescription('Size in bytes of TCB')
taskStatsTableTCB = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3606, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: taskStatsTableTCB.setStatus('current')
if mibBuilder.loadTexts: taskStatsTableTCB.setDescription('PSOS TCB Data')
taskStatsTableWaitObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3606, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: taskStatsTableWaitObjectName.setStatus('current')
if mibBuilder.loadTexts: taskStatsTableWaitObjectName.setDescription('Name of object task is waiting on')
taskStatsTableTicksPerSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3606, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: taskStatsTableTicksPerSecond.setStatus('current')
if mibBuilder.loadTexts: taskStatsTableTicksPerSecond.setDescription('PSOS Ticks per second')
taskStatsTableTicksElapsed = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3606, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: taskStatsTableTicksElapsed.setStatus('current')
if mibBuilder.loadTexts: taskStatsTableTicksElapsed.setDescription('PSOS Ticks elapsed')
taskStatsTableStackAddress1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3606, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: taskStatsTableStackAddress1.setStatus('current')
if mibBuilder.loadTexts: taskStatsTableStackAddress1.setDescription('Stack address 1')
taskStatsTableStackAddress2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3606, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: taskStatsTableStackAddress2.setStatus('current')
if mibBuilder.loadTexts: taskStatsTableStackAddress2.setDescription('Stack address 2')
taskStatsTableStackAddress3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3606, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: taskStatsTableStackAddress3.setStatus('current')
if mibBuilder.loadTexts: taskStatsTableStackAddress3.setDescription('Stack address 3')
taskStatsTableStackAddress4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3606, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: taskStatsTableStackAddress4.setStatus('current')
if mibBuilder.loadTexts: taskStatsTableStackAddress4.setDescription('Stack address 4')
taskStatsTableStackAddress5 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3606, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: taskStatsTableStackAddress5.setStatus('current')
if mibBuilder.loadTexts: taskStatsTableStackAddress5.setDescription('Stack address 5')
taskStatsTableStackAddress6 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3606, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: taskStatsTableStackAddress6.setStatus('current')
if mibBuilder.loadTexts: taskStatsTableStackAddress6.setDescription('Stack address 6')
taskStatsTableStackAddress7 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3606, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: taskStatsTableStackAddress7.setStatus('current')
if mibBuilder.loadTexts: taskStatsTableStackAddress7.setDescription('Stack address 7')
taskStatsTableStackAddress8 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3606, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: taskStatsTableStackAddress8.setStatus('current')
if mibBuilder.loadTexts: taskStatsTableStackAddress8.setDescription('Stack address 8')
taskStatsTableStackAddress9 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3606, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: taskStatsTableStackAddress9.setStatus('current')
if mibBuilder.loadTexts: taskStatsTableStackAddress9.setDescription('Stack address 9')
taskStatsTableStackAddress10 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3606, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: taskStatsTableStackAddress10.setStatus('current')
if mibBuilder.loadTexts: taskStatsTableStackAddress10.setDescription('Stack address 10')
taskStatsTableRunTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3606, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: taskStatsTableRunTime.setStatus('current')
if mibBuilder.loadTexts: taskStatsTableRunTime.setDescription('Total task run time in miliseconds')
taskStatsTableContextSwitches = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3606, 1, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: taskStatsTableContextSwitches.setStatus('current')
if mibBuilder.loadTexts: taskStatsTableContextSwitches.setDescription('Task context switches since creation')
taskStatsTableGlobalPool = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3606, 1, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: taskStatsTableGlobalPool.setStatus('current')
if mibBuilder.loadTexts: taskStatsTableGlobalPool.setDescription('Global pool used by task')
taskStatsTableIntervalTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3606, 1, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: taskStatsTableIntervalTime.setStatus('current')
if mibBuilder.loadTexts: taskStatsTableIntervalTime.setDescription('Total task run time in miliseconds since last request')
taskStatsTableTotalTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3606, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: taskStatsTableTotalTime.setStatus('current')
if mibBuilder.loadTexts: taskStatsTableTotalTime.setDescription('Run time for all in miliseconds')
taskStatsTableIntervalSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3606, 1, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: taskStatsTableIntervalSize.setStatus('current')
if mibBuilder.loadTexts: taskStatsTableIntervalSize.setDescription('Run time for all in miliseconds in last interval')
taskStatsTableKernelPool = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3606, 1, 47), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: taskStatsTableKernelPool.setStatus('current')
if mibBuilder.loadTexts: taskStatsTableKernelPool.setDescription('Memory used by kernel')
taskStatsTableTaskPool = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3606, 1, 48), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: taskStatsTableTaskPool.setStatus('current')
if mibBuilder.loadTexts: taskStatsTableTaskPool.setDescription('Total memory allocated by tasks')
taskStatsTableIsrTimes = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3606, 1, 49), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: taskStatsTableIsrTimes.setStatus('current')
if mibBuilder.loadTexts: taskStatsTableIsrTimes.setDescription('Time spent processor isr routines')
taskStatsTableIdle5Seconds = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3606, 1, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: taskStatsTableIdle5Seconds.setStatus('current')
if mibBuilder.loadTexts: taskStatsTableIdle5Seconds.setDescription('Total processor idle time last 5 seconds')
taskStatsTableIdleMinute = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3606, 1, 51), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: taskStatsTableIdleMinute.setStatus('current')
if mibBuilder.loadTexts: taskStatsTableIdleMinute.setDescription('Total processor idle time last minute')
taskStatsTableIdle5Minute = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3606, 1, 52), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: taskStatsTableIdle5Minute.setStatus('current')
if mibBuilder.loadTexts: taskStatsTableIdle5Minute.setDescription('Total processor idle time last 5 minutes')
taskStatsTableIdleHour = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3606, 1, 53), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: taskStatsTableIdleHour.setStatus('current')
if mibBuilder.loadTexts: taskStatsTableIdleHour.setDescription('Total processor idle time last hour')
taskStatsTableIdleDay = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3606, 1, 54), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: taskStatsTableIdleDay.setStatus('current')
if mibBuilder.loadTexts: taskStatsTableIdleDay.setDescription('Total processor idle time last day')
t1StatsTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2102), )
if mibBuilder.loadTexts: t1StatsTable.setStatus('current')
if mibBuilder.loadTexts: t1StatsTable.setDescription('T1 Stats.')
t1StatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2102, 1), ).setIndexNames((0, "APTIS-MONITOR-MIB", "t1StatsSlotIndex"), (0, "APTIS-MONITOR-MIB", "t1StatsLineNumber"))
if mibBuilder.loadTexts: t1StatsEntry.setStatus('current')
if mibBuilder.loadTexts: t1StatsEntry.setDescription('This is the structure of entries in the t1StatsTable.')
t1StatsAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2102, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("noalarm", 0), ("yellowalarm", 1), ("redalarm", 2), ("bluealarm", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1StatsAlarmStatus.setStatus('current')
if mibBuilder.loadTexts: t1StatsAlarmStatus.setDescription('T1 layer 1 alarms.')
t1StatsSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2102, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1StatsSlotIndex.setStatus('current')
if mibBuilder.loadTexts: t1StatsSlotIndex.setDescription('The physical slot number associated with this line.')
t1StatsLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2102, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 56))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1StatsLineNumber.setStatus('current')
if mibBuilder.loadTexts: t1StatsLineNumber.setDescription('The line number of the line to which the Alarm Status applies.')
t1CountsTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2103), )
if mibBuilder.loadTexts: t1CountsTable.setStatus('current')
if mibBuilder.loadTexts: t1CountsTable.setDescription('T1 Interface Counters.')
t1CountsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2103, 1), ).setIndexNames((0, "APTIS-MONITOR-MIB", "t1CountsSlotIndex"), (0, "APTIS-MONITOR-MIB", "t1CountsLineNumber"))
if mibBuilder.loadTexts: t1CountsEntry.setStatus('current')
if mibBuilder.loadTexts: t1CountsEntry.setDescription('This is the structure of entries in the t1CountsTable.')
t1CountsChannelCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2103, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1CountsChannelCount.setStatus('current')
if mibBuilder.loadTexts: t1CountsChannelCount.setDescription('DS0s (B-channels) on this interface.')
t1CountsChannelsInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2103, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1CountsChannelsInUse.setStatus('current')
if mibBuilder.loadTexts: t1CountsChannelsInUse.setDescription('DS0s (B-channels) in use.')
t1CountsIncomingCallAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2103, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1CountsIncomingCallAttempts.setStatus('current')
if mibBuilder.loadTexts: t1CountsIncomingCallAttempts.setDescription('Incoming call attempts on this T1.')
t1CountsIncomingConnects = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2103, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1CountsIncomingConnects.setStatus('current')
if mibBuilder.loadTexts: t1CountsIncomingConnects.setDescription('Incoming connect messages.')
t1CountsIncomingDisconnects = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2103, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1CountsIncomingDisconnects.setStatus('current')
if mibBuilder.loadTexts: t1CountsIncomingDisconnects.setDescription('Incoming disconnect messages.')
t1CountsOutgoingCallAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2103, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1CountsOutgoingCallAttempts.setStatus('current')
if mibBuilder.loadTexts: t1CountsOutgoingCallAttempts.setDescription('Outgoing call attempts on this T1.')
t1CountsOutgoingConnects = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2103, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1CountsOutgoingConnects.setStatus('current')
if mibBuilder.loadTexts: t1CountsOutgoingConnects.setDescription('Outgoing connect messages.')
t1CountsOutgoingDisconnects = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2103, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1CountsOutgoingDisconnects.setStatus('current')
if mibBuilder.loadTexts: t1CountsOutgoingDisconnects.setDescription('Outgoing disconnect messages.')
t1CountsSessionAbortMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2103, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1CountsSessionAbortMessages.setStatus('current')
if mibBuilder.loadTexts: t1CountsSessionAbortMessages.setDescription('Abort messages from the session manager')
t1CountsSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2103, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1CountsSlotIndex.setStatus('current')
if mibBuilder.loadTexts: t1CountsSlotIndex.setDescription('The physical slot number associated with this line.')
t1CountsLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2103, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 56))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1CountsLineNumber.setStatus('current')
if mibBuilder.loadTexts: t1CountsLineNumber.setDescription('The line number of the line to which the Alarm Status applies.')
t1SummaryStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2104), )
if mibBuilder.loadTexts: t1SummaryStatsTable.setStatus('current')
if mibBuilder.loadTexts: t1SummaryStatsTable.setDescription('T1 Line Summary Stats.')
t1SummaryStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2104, 1), ).setIndexNames((0, "APTIS-MONITOR-MIB", "t1SummaryStatsSlotIndex"), (0, "APTIS-MONITOR-MIB", "t1SummaryStatsLineNumber"))
if mibBuilder.loadTexts: t1SummaryStatsEntry.setStatus('current')
if mibBuilder.loadTexts: t1SummaryStatsEntry.setDescription('This is the structure of entries in the t1SummaryStatsTable.')
t1SummaryStatsRingingChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2104, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1SummaryStatsRingingChannels.setStatus('current')
if mibBuilder.loadTexts: t1SummaryStatsRingingChannels.setDescription('Bit mask of b-channels that have calls coming up, with b-channel 1 at 0x02, 2 at 0x04, etc.')
t1SummaryStatsConnectedChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2104, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1SummaryStatsConnectedChannels.setStatus('current')
if mibBuilder.loadTexts: t1SummaryStatsConnectedChannels.setDescription('Bit mask of b-channels that have calls connected, with b-channel 1 at 0x02, 2 at 0x04, etc.')
t1SummaryStatsClearingChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2104, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1SummaryStatsClearingChannels.setStatus('current')
if mibBuilder.loadTexts: t1SummaryStatsClearingChannels.setDescription('Bit mask of b-channels that have calls going down, with b-channel 1 at 0x02, 2 at 0x04, etc.')
t1SummaryStatsSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2104, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1SummaryStatsSlotIndex.setStatus('current')
if mibBuilder.loadTexts: t1SummaryStatsSlotIndex.setDescription('The physical slot number associated with this line.')
t1SummaryStatsLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2104, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 56))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1SummaryStatsLineNumber.setStatus('current')
if mibBuilder.loadTexts: t1SummaryStatsLineNumber.setDescription('The line number of the line to which the Alarm Status applies.')
t1SummaryStatsFunctionalChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2104, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1SummaryStatsFunctionalChannels.setStatus('current')
if mibBuilder.loadTexts: t1SummaryStatsFunctionalChannels.setDescription('Bit mask of b-channels that are in the functional state.')
t1SummaryStatsIdleChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2104, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1SummaryStatsIdleChannels.setStatus('current')
if mibBuilder.loadTexts: t1SummaryStatsIdleChannels.setDescription('Bit mask of b-channels that are in the idle state.')
t3StatsTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2008), )
if mibBuilder.loadTexts: t3StatsTable.setStatus('current')
if mibBuilder.loadTexts: t3StatsTable.setDescription('T3 Line Stats.')
t3StatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2008, 1), ).setIndexNames((0, "APTIS-MONITOR-MIB", "t3StatsSlotIndex"), (0, "APTIS-MONITOR-MIB", "t3StatsLineNumber"))
if mibBuilder.loadTexts: t3StatsEntry.setStatus('current')
if mibBuilder.loadTexts: t3StatsEntry.setDescription('This is the structure of entries in the t3StatsTable.')
t3StatsLineState = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2008, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("noalarm", 0), ("yellowalarm", 1), ("redalarm", 2), ("bluealarm", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t3StatsLineState.setStatus('current')
if mibBuilder.loadTexts: t3StatsLineState.setDescription('Current state of this line.')
t3StatsSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2008, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 18))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t3StatsSlotIndex.setStatus('current')
if mibBuilder.loadTexts: t3StatsSlotIndex.setDescription('The physical slot number associated with this line.')
t3StatsLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2008, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t3StatsLineNumber.setStatus('current')
if mibBuilder.loadTexts: t3StatsLineNumber.setDescription('The line number of the line to which the Line State applies.')
t3StatsRedundant = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2008, 1, 4), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t3StatsRedundant.setStatus('current')
if mibBuilder.loadTexts: t3StatsRedundant.setDescription('Whether this T3 has a redundant backup.')
t3StatsDs1Count = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2008, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 56))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t3StatsDs1Count.setStatus('current')
if mibBuilder.loadTexts: t3StatsDs1Count.setDescription('The number of DS1 lines on this T3.')
t3StatsActiveDs1Count = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2008, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 56))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t3StatsActiveDs1Count.setStatus('current')
if mibBuilder.loadTexts: t3StatsActiveDs1Count.setDescription('The number of active DS1 lines on this T3.')
t3StatsExternalClockPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2008, 1, 7), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t3StatsExternalClockPort.setStatus('current')
if mibBuilder.loadTexts: t3StatsExternalClockPort.setDescription('Whether this T3 LTM has an external clock reference port. (only available on some models)')
ss7StatusTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 2, 500), )
if mibBuilder.loadTexts: ss7StatusTable.setStatus('current')
if mibBuilder.loadTexts: ss7StatusTable.setDescription('ss7 status table.')
ss7StatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 2, 500, 1), ).setIndexNames((0, "APTIS-MONITOR-MIB", "ss7StatusIndex"))
if mibBuilder.loadTexts: ss7StatusEntry.setStatus('current')
if mibBuilder.loadTexts: ss7StatusEntry.setDescription('This is the structure of entries in the ss7StatusTable.')
ss7StatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 500, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss7StatusIndex.setStatus('current')
if mibBuilder.loadTexts: ss7StatusIndex.setDescription('The serial number of this ss7 session.')
ss7StatusState = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 500, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss7StatusState.setStatus('current')
if mibBuilder.loadTexts: ss7StatusState.setDescription('The current state of this session.')
ss7StatusNetworkId = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 500, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss7StatusNetworkId.setStatus('current')
if mibBuilder.loadTexts: ss7StatusNetworkId.setDescription('The INC assigned session Id for this session.')
ss7StatusCalledId = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 500, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss7StatusCalledId.setStatus('current')
if mibBuilder.loadTexts: ss7StatusCalledId.setDescription('The called number for this session.')
ss7StatusCallingId = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 500, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss7StatusCallingId.setStatus('current')
if mibBuilder.loadTexts: ss7StatusCallingId.setDescription('The calling number for this session.')
ss7StatusCallType = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 500, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("analog", 0), ("isdn", 1), ("loopback", 2), ("cotegress", 3), ("cotingress", 4), ("tandem", 5), ("t102generate", 6), ("t102detect", 7), ("t108egress", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss7StatusCallType.setStatus('current')
if mibBuilder.loadTexts: ss7StatusCallType.setDescription('The call type for this session.')
ss7StatusSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 500, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss7StatusSlot.setStatus('current')
if mibBuilder.loadTexts: ss7StatusSlot.setDescription('The slot specified by the thruway controller to terminate this session.')
ss7StatusPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 500, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss7StatusPort.setStatus('current')
if mibBuilder.loadTexts: ss7StatusPort.setDescription('The DS1 specified by the thruway controller to terminate this session.')
ss7StatusTimeSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 500, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss7StatusTimeSlot.setStatus('current')
if mibBuilder.loadTexts: ss7StatusTimeSlot.setDescription('The DS0 specified by the thruway controller to terminate this session.')
ss7StatusSessionId = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 500, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss7StatusSessionId.setStatus('current')
if mibBuilder.loadTexts: ss7StatusSessionId.setDescription('The session Id assigned to this session by the CVX (0 if unknown).')
ss7StatusServerId = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 500, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 41))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss7StatusServerId.setStatus('current')
if mibBuilder.loadTexts: ss7StatusServerId.setDescription('The server identifier for the network controller responsible for initiating this session.')
ss7StatusStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 500, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss7StatusStartTime.setStatus('current')
if mibBuilder.loadTexts: ss7StatusStartTime.setDescription('The time that this session began.')
ss7TraceTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 2, 501), )
if mibBuilder.loadTexts: ss7TraceTable.setStatus('current')
if mibBuilder.loadTexts: ss7TraceTable.setDescription('ss7 trace table.')
ss7TraceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 2, 501, 1), ).setIndexNames((0, "APTIS-MONITOR-MIB", "ss7TraceSs7Index"), (0, "APTIS-MONITOR-MIB", "ss7TraceIndex"))
if mibBuilder.loadTexts: ss7TraceEntry.setStatus('current')
if mibBuilder.loadTexts: ss7TraceEntry.setDescription('This is the structure of entries in the ss7TraceTable.')
ss7TraceSs7Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 501, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss7TraceSs7Index.setStatus('current')
if mibBuilder.loadTexts: ss7TraceSs7Index.setDescription('The serial number of the ss7 session to which this component belongs.')
ss7TraceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 501, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss7TraceIndex.setStatus('current')
if mibBuilder.loadTexts: ss7TraceIndex.setDescription('The internal reference number for this log entry.')
ss7TraceAbsoluteTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 501, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss7TraceAbsoluteTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ss7TraceAbsoluteTimeStamp.setDescription('The time that this event occurred, in milliseconds relative to SysUpTime.')
ss7TraceRelativeTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 501, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss7TraceRelativeTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ss7TraceRelativeTimeStamp.setDescription('The time that this event occurred, in milliseconds relative to session beginning.')
ss7TraceLogEntry = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 501, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss7TraceLogEntry.setStatus('current')
if mibBuilder.loadTexts: ss7TraceLogEntry.setDescription('An event occuring during the life of an ss7 session.')
ss7StatusReverseTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 2, 502), )
if mibBuilder.loadTexts: ss7StatusReverseTable.setStatus('current')
if mibBuilder.loadTexts: ss7StatusReverseTable.setDescription('ss7 status reverse table.')
ss7StatusReverseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 2, 502, 1), ).setIndexNames((0, "APTIS-MONITOR-MIB", "ss7StatusReverseIndex"))
if mibBuilder.loadTexts: ss7StatusReverseEntry.setStatus('current')
if mibBuilder.loadTexts: ss7StatusReverseEntry.setDescription('This is the structure of entries in the ss7StatusReverseTable.')
ss7StatusReverseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 502, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss7StatusReverseIndex.setStatus('current')
if mibBuilder.loadTexts: ss7StatusReverseIndex.setDescription('The serial number of this ss7 session.')
ss7StatusReverseState = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 502, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss7StatusReverseState.setStatus('current')
if mibBuilder.loadTexts: ss7StatusReverseState.setDescription('The current state of this session.')
ss7StatusReverseNetworkId = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 502, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss7StatusReverseNetworkId.setStatus('current')
if mibBuilder.loadTexts: ss7StatusReverseNetworkId.setDescription('The INC assigned session Id for this session.')
ss7StatusReverseCalledId = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 502, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss7StatusReverseCalledId.setStatus('current')
if mibBuilder.loadTexts: ss7StatusReverseCalledId.setDescription('The called number for this session.')
ss7StatusReverseCallingId = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 502, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss7StatusReverseCallingId.setStatus('current')
if mibBuilder.loadTexts: ss7StatusReverseCallingId.setDescription('The calling number for this session.')
ss7StatusReverseCallType = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 502, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("analog", 0), ("isdn", 1), ("loopback", 2), ("cotegress", 3), ("cotingress", 4), ("tandem", 5), ("t102generate", 6), ("t102detect", 7), ("t108egress", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss7StatusReverseCallType.setStatus('current')
if mibBuilder.loadTexts: ss7StatusReverseCallType.setDescription('The call type for this session.')
ss7StatusReverseSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 502, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss7StatusReverseSlot.setStatus('current')
if mibBuilder.loadTexts: ss7StatusReverseSlot.setDescription('The slot specified by the thruway controller to terminate this session.')
ss7StatusReversePort = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 502, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss7StatusReversePort.setStatus('current')
if mibBuilder.loadTexts: ss7StatusReversePort.setDescription('The DS1 specified by the thruway controller to terminate this session.')
ss7StatusReverseTimeSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 502, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss7StatusReverseTimeSlot.setStatus('current')
if mibBuilder.loadTexts: ss7StatusReverseTimeSlot.setDescription('The DS0 specified by the thruway controller to terminate this session.')
ss7StatusReverseSessionId = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 502, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss7StatusReverseSessionId.setStatus('current')
if mibBuilder.loadTexts: ss7StatusReverseSessionId.setDescription('The session Id assigned to this session by the CVX (0 if unknown).')
ss7StatusReverseServerId = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 502, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 41))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss7StatusReverseServerId.setStatus('current')
if mibBuilder.loadTexts: ss7StatusReverseServerId.setDescription('The server identifier for the network controller responsible for initiating this session.')
ss7StatusReverseStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 502, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss7StatusReverseStartTime.setStatus('current')
if mibBuilder.loadTexts: ss7StatusReverseStartTime.setDescription('The time that this session began.')
ss7CountersTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 2, 503), )
if mibBuilder.loadTexts: ss7CountersTable.setStatus('current')
if mibBuilder.loadTexts: ss7CountersTable.setDescription('ss7 counters table.')
ss7CountersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 2, 503, 1), ).setIndexNames((0, "APTIS-MONITOR-MIB", "ss7CountersNumActive"))
if mibBuilder.loadTexts: ss7CountersEntry.setStatus('current')
if mibBuilder.loadTexts: ss7CountersEntry.setDescription('This is the structure of entries in the ss7CountersTable.')
ss7CountersNumActive = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 503, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss7CountersNumActive.setStatus('current')
if mibBuilder.loadTexts: ss7CountersNumActive.setDescription('The number of active ss7 sessions.')
ss7CountersNumInactive = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 503, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss7CountersNumInactive.setStatus('current')
if mibBuilder.loadTexts: ss7CountersNumInactive.setDescription('The number of inactive ss7 sessions.')
ss7CountersRetainedFree = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 503, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss7CountersRetainedFree.setStatus('current')
if mibBuilder.loadTexts: ss7CountersRetainedFree.setDescription('The number of free signaling message blocks.')
ss7CountersRetainedFull = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 503, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss7CountersRetainedFull.setStatus('current')
if mibBuilder.loadTexts: ss7CountersRetainedFull.setDescription('The number of full signaling message blocks.')
ss7CountersOneshotFree = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 503, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss7CountersOneshotFree.setStatus('current')
if mibBuilder.loadTexts: ss7CountersOneshotFree.setDescription('The number of free status message blocks.')
ss7CountersOneshotFull = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 503, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss7CountersOneshotFull.setStatus('current')
if mibBuilder.loadTexts: ss7CountersOneshotFull.setDescription('The number of full status message blocks.')
ss7CountersDsmccFree = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 503, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss7CountersDsmccFree.setStatus('current')
if mibBuilder.loadTexts: ss7CountersDsmccFree.setDescription('The number of free dsmcc message control blocks.')
ss7CountersDsmccFull = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 503, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss7CountersDsmccFull.setStatus('current')
if mibBuilder.loadTexts: ss7CountersDsmccFull.setDescription('The number of full dsmcc message control blocks.')
ipdcTraceTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 2, 504), )
if mibBuilder.loadTexts: ipdcTraceTable.setStatus('current')
if mibBuilder.loadTexts: ipdcTraceTable.setDescription('IPDC trace table.')
ipdcTraceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 2, 504, 1), ).setIndexNames((0, "APTIS-MONITOR-MIB", "ipdcTraceIndex"))
if mibBuilder.loadTexts: ipdcTraceEntry.setStatus('current')
if mibBuilder.loadTexts: ipdcTraceEntry.setDescription('This is the structure of entries in the ipdcTraceTable.')
ipdcTraceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 504, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipdcTraceIndex.setStatus('current')
if mibBuilder.loadTexts: ipdcTraceIndex.setDescription('The internal reference number for this trace entry.')
ipdcTraceTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 504, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipdcTraceTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ipdcTraceTimeStamp.setDescription('The time that this event occurred, in milliseconds relative to SysUpTime.')
ipdcTraceDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 504, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("transmit", 0), ("receive", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipdcTraceDirection.setStatus('current')
if mibBuilder.loadTexts: ipdcTraceDirection.setDescription('The direction of this message.')
ipdcTraceMsgSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 504, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipdcTraceMsgSize.setStatus('current')
if mibBuilder.loadTexts: ipdcTraceMsgSize.setDescription('The number of octets in this ipsc message.')
ipdcTraceIpdcMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 504, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipdcTraceIpdcMsg.setStatus('current')
if mibBuilder.loadTexts: ipdcTraceIpdcMsg.setDescription('An array of octets representing an ipdc message.')
systemTimeTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 2, 15), )
if mibBuilder.loadTexts: systemTimeTable.setStatus('current')
if mibBuilder.loadTexts: systemTimeTable.setDescription('This class provides some time values that are global to the system.')
systemTimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 2, 15, 1), ).setIndexNames((0, "APTIS-MONITOR-MIB", "systemTimeFixedBootTime"))
if mibBuilder.loadTexts: systemTimeEntry.setStatus('current')
if mibBuilder.loadTexts: systemTimeEntry.setDescription('This is the structure of entries in the systemTimeTable.')
systemTimeFixedBootTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 15, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemTimeFixedBootTime.setStatus('current')
if mibBuilder.loadTexts: systemTimeFixedBootTime.setDescription('The UTC time of system boot, in seconds relative to 00:00:00 on Jan 1, 1900. This value will be unaffected by time management protocols such as NTP.')
systemTimeUTCOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 15, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemTimeUTCOffset.setStatus('current')
if mibBuilder.loadTexts: systemTimeUTCOffset.setDescription('The offset from UTC, in seconds. Useful for displaying system time in a local format.')
systemTimeUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 15, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemTimeUpTime.setStatus('current')
if mibBuilder.loadTexts: systemTimeUpTime.setDescription('The number of seconds since the last system reboot. Similar to SysUpTime but is in seconds resolution instead of TimeTicks.')
dacStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2002), )
if mibBuilder.loadTexts: dacStatusTable.setStatus('current')
if mibBuilder.loadTexts: dacStatusTable.setDescription('DAC Status Information.')
dacStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2002, 1), ).setIndexNames((0, "APTIS-MONITOR-MIB", "dacStatusClockSourcePrimary"))
if mibBuilder.loadTexts: dacStatusEntry.setStatus('current')
if mibBuilder.loadTexts: dacStatusEntry.setDescription('This is the structure of entries in the dacStatusTable.')
dacStatusClockSourcePrimary = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2002, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dacStatusClockSourcePrimary.setStatus('current')
if mibBuilder.loadTexts: dacStatusClockSourcePrimary.setDescription('DAC Primary Clocking Source.')
dacStatusClockSourceSecondary = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2002, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dacStatusClockSourceSecondary.setStatus('current')
if mibBuilder.loadTexts: dacStatusClockSourceSecondary.setDescription('DAC Secondary Clocking Source.')
dacStatusLTMType = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2002, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 17))).clone(namedValues=NamedValues(("t1by12", 1), ("e1by12", 2), ("t3by1", 3), ("t3by2", 4), ("t1by24", 5), ("e1by24", 6), ("t3by4", 7), ("redundant", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dacStatusLTMType.setStatus('current')
if mibBuilder.loadTexts: dacStatusLTMType.setDescription('DAC LTM (Line Termination Module) Type.')
dacTraceTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2003), )
if mibBuilder.loadTexts: dacTraceTable.setStatus('current')
if mibBuilder.loadTexts: dacTraceTable.setDescription('DAC Trace Configuration.')
dacTraceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2003, 1), ).setIndexNames((0, "APTIS-MONITOR-MIB", "dacTraceIndex"))
if mibBuilder.loadTexts: dacTraceEntry.setStatus('current')
if mibBuilder.loadTexts: dacTraceEntry.setDescription('This is the structure of entries in the dacTraceTable.')
dacTraceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2003, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dacTraceIndex.setStatus('current')
if mibBuilder.loadTexts: dacTraceIndex.setDescription('DAC index value.')
dacTraceLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2003, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("sM", 1), ("tN", 2), ("hDLC", 3), ("uSFSM", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dacTraceLocation.setStatus('current')
if mibBuilder.loadTexts: dacTraceLocation.setDescription('DAC Trace Message Source.')
dacTraceDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2003, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("transmit", 1), ("receive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dacTraceDirection.setStatus('current')
if mibBuilder.loadTexts: dacTraceDirection.setDescription('DAC Trace Message Source Layer.')
dacTraceType = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2003, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37))).clone(namedValues=NamedValues(("smCreate", 1), ("smResource", 2), ("smSetup", 3), ("smConnect", 4), ("smMove", 5), ("smDisconnect", 6), ("smAbort", 7), ("smActivated", 8), ("smConnected", 9), ("smReady", 10), ("smMoved", 11), ("smLinkFailed", 12), ("smDisconnected", 13), ("smResourceSet", 14), ("ccSetup", 15), ("ccConnect", 16), ("ccDisconnect", 17), ("ccAlloc", 18), ("ccClear", 19), ("ccRestart", 20), ("tnSetupInd", 21), ("tnSetupReq", 22), ("tnSetupConf", 23), ("tnAlertingReq", 24), ("tnAlertingInd", 25), ("tnCallProcReq", 26), ("tnCallProcInd", 27), ("tnConnectReq", 28), ("tnConnectInd", 29), ("tnConnectConf", 30), ("tnDiscReq", 31), ("tnDiscInd", 32), ("tnClearReq", 33), ("tnClearInd", 34), ("tnClearConf", 35), ("tnClearResp", 36), ("tnSetupResp", 37)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dacTraceType.setStatus('current')
if mibBuilder.loadTexts: dacTraceType.setDescription('DAC Trace Message Typecode.')
dacTraceTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2003, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dacTraceTimestamp.setStatus('current')
if mibBuilder.loadTexts: dacTraceTimestamp.setDescription('DAC Trace Message Timestamp.')
dacTraceLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2003, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 300))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dacTraceLen.setStatus('current')
if mibBuilder.loadTexts: dacTraceLen.setDescription('DAC Trace Message Character Length.')
dacTraceData = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2003, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 300))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dacTraceData.setStatus('current')
if mibBuilder.loadTexts: dacTraceData.setDescription('DAC Trace Message Text.')
dacClockingTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2050), )
if mibBuilder.loadTexts: dacClockingTable.setStatus('current')
if mibBuilder.loadTexts: dacClockingTable.setDescription('DAC Clocking Information.')
dacClockingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2050, 1), ).setIndexNames((0, "APTIS-MONITOR-MIB", "dacClockingIndex"))
if mibBuilder.loadTexts: dacClockingEntry.setStatus('current')
if mibBuilder.loadTexts: dacClockingEntry.setDescription('This is the structure of entries in the dacClockingTable.')
dacClockingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2050, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dacClockingIndex.setStatus('current')
if mibBuilder.loadTexts: dacClockingIndex.setDescription('DAC Clocking Information Index.')
dacClockingClockSourcePrimary = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2050, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 200, 201, 202, 255))).clone(namedValues=NamedValues(("if0", 0), ("if1", 1), ("if2", 2), ("if3", 3), ("if4", 4), ("if5", 5), ("if6", 6), ("if7", 7), ("if8", 8), ("if9", 9), ("if10", 10), ("if11", 11), ("if12", 12), ("if13", 13), ("if14", 14), ("if15", 15), ("if16", 16), ("if17", 17), ("if18", 18), ("if19", 19), ("if20", 20), ("if21", 21), ("if22", 22), ("if23", 23), ("if24", 24), ("if25", 25), ("if26", 26), ("if27", 27), ("if28", 28), ("if29", 29), ("if30", 30), ("if31", 31), ("if32", 32), ("if33", 33), ("if34", 34), ("if35", 35), ("if36", 36), ("if37", 37), ("if38", 38), ("if39", 39), ("if40", 40), ("if41", 41), ("if42", 42), ("if43", 43), ("if44", 44), ("if45", 45), ("if46", 46), ("if47", 47), ("if48", 48), ("if49", 49), ("if50", 50), ("if51", 51), ("if52", 52), ("if53", 53), ("if54", 54), ("if55", 55), ("external", 200), ("auto1", 201), ("auto2", 202), ("disabled", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dacClockingClockSourcePrimary.setStatus('current')
if mibBuilder.loadTexts: dacClockingClockSourcePrimary.setDescription('DAC Primary Clocking Source.')
dacClockingClockSourceSecondary = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2050, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 200, 201, 202, 255))).clone(namedValues=NamedValues(("if0", 0), ("if1", 1), ("if2", 2), ("if3", 3), ("if4", 4), ("if5", 5), ("if6", 6), ("if7", 7), ("if8", 8), ("if9", 9), ("if10", 10), ("if11", 11), ("if12", 12), ("if13", 13), ("if14", 14), ("if15", 15), ("if16", 16), ("if17", 17), ("if18", 18), ("if19", 19), ("if20", 20), ("if21", 21), ("if22", 22), ("if23", 23), ("if24", 24), ("if25", 25), ("if26", 26), ("if27", 27), ("if28", 28), ("if29", 29), ("if30", 30), ("if31", 31), ("if32", 32), ("if33", 33), ("if34", 34), ("if35", 35), ("if36", 36), ("if37", 37), ("if38", 38), ("if39", 39), ("if40", 40), ("if41", 41), ("if42", 42), ("if43", 43), ("if44", 44), ("if45", 45), ("if46", 46), ("if47", 47), ("if48", 48), ("if49", 49), ("if50", 50), ("if51", 51), ("if52", 52), ("if53", 53), ("if54", 54), ("if55", 55), ("external", 200), ("auto1", 201), ("auto2", 202), ("disabled", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dacClockingClockSourceSecondary.setStatus('current')
if mibBuilder.loadTexts: dacClockingClockSourceSecondary.setDescription('DAC Secondary Clocking Source.')
dacClockingForce = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 2050, 1, 4), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dacClockingForce.setStatus('current')
if mibBuilder.loadTexts: dacClockingForce.setDescription('DAC Clocking FORCE Flag.')
ipstatRouteEntryTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3701), )
if mibBuilder.loadTexts: ipstatRouteEntryTable.setStatus('current')
if mibBuilder.loadTexts: ipstatRouteEntryTable.setDescription('IP Route Entry.')
ipstatRouteEntryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3701, 1), ).setIndexNames((0, "APTIS-MONITOR-MIB", "ipstatRouteEntryPrevXxrt"))
if mibBuilder.loadTexts: ipstatRouteEntryEntry.setStatus('current')
if mibBuilder.loadTexts: ipstatRouteEntryEntry.setDescription('This is the structure of entries in the ipstatRouteEntryTable.')
ipstatRouteEntryPrevXxrt = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3701, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipstatRouteEntryPrevXxrt.setStatus('current')
if mibBuilder.loadTexts: ipstatRouteEntryPrevXxrt.setDescription('Prev IP Route.')
ipstatRouteEntryNextIprt = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3701, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipstatRouteEntryNextIprt.setStatus('current')
if mibBuilder.loadTexts: ipstatRouteEntryNextIprt.setDescription('Next IP Route.')
ipstatRouteEntryPrevIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3701, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipstatRouteEntryPrevIndex.setStatus('current')
if mibBuilder.loadTexts: ipstatRouteEntryPrevIndex.setDescription('Prev Index.')
ipstatRouteEntryGenNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3701, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipstatRouteEntryGenNumber.setStatus('current')
if mibBuilder.loadTexts: ipstatRouteEntryGenNumber.setDescription('Gen Number.')
ipstatRouteEntryNextIprtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3701, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipstatRouteEntryNextIprtIndex.setStatus('current')
if mibBuilder.loadTexts: ipstatRouteEntryNextIprtIndex.setDescription('Next IP Route Index.')
ipstatRouteEntryIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3701, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipstatRouteEntryIpAddress.setStatus('current')
if mibBuilder.loadTexts: ipstatRouteEntryIpAddress.setDescription('Route IP Address.')
ipstatRouteEntryIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3701, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipstatRouteEntryIpMask.setStatus('current')
if mibBuilder.loadTexts: ipstatRouteEntryIpMask.setDescription('Route IP Mask.')
ipstatRouteEntryCircuitId = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3701, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipstatRouteEntryCircuitId.setStatus('current')
if mibBuilder.loadTexts: ipstatRouteEntryCircuitId.setDescription('Route Circuit ID.')
ipstatRouteEntryTYPE = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3701, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipstatRouteEntryTYPE.setStatus('current')
if mibBuilder.loadTexts: ipstatRouteEntryTYPE.setDescription('Route Circuit Type.')
ipstatRouteEntryOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3701, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipstatRouteEntryOwner.setStatus('current')
if mibBuilder.loadTexts: ipstatRouteEntryOwner.setDescription('Route Owner.')
ipstatRouteEntryPathAndCost = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3701, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipstatRouteEntryPathAndCost.setStatus('current')
if mibBuilder.loadTexts: ipstatRouteEntryPathAndCost.setDescription('Route Path and Cost.')
ipstatRouteEntryTrig = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3701, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipstatRouteEntryTrig.setStatus('current')
if mibBuilder.loadTexts: ipstatRouteEntryTrig.setDescription('Trigger.')
ipstatRouteEntryTag = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3701, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipstatRouteEntryTag.setStatus('current')
if mibBuilder.loadTexts: ipstatRouteEntryTag.setDescription('Tag.')
ipstatRouteEntryPrivate = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3701, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipstatRouteEntryPrivate.setStatus('current')
if mibBuilder.loadTexts: ipstatRouteEntryPrivate.setDescription('Private.')
ipstatRouteEntryPathType = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3701, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mpath", 1), ("simple", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipstatRouteEntryPathType.setStatus('current')
if mibBuilder.loadTexts: ipstatRouteEntryPathType.setDescription('Path Type.')
ipstatRouteEntryCost = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3701, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipstatRouteEntryCost.setStatus('current')
if mibBuilder.loadTexts: ipstatRouteEntryCost.setDescription('Cost.')
dvsStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1505), )
if mibBuilder.loadTexts: dvsStatusTable.setStatus('current')
if mibBuilder.loadTexts: dvsStatusTable.setDescription('DVS Tunnel status.')
dvsStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1505, 1), ).setIndexNames((0, "APTIS-MONITOR-MIB", "dvsStatusLocalCLID"))
if mibBuilder.loadTexts: dvsStatusEntry.setStatus('current')
if mibBuilder.loadTexts: dvsStatusEntry.setDescription('This is the structure of entries in the dvsStatusTable.')
dvsStatusLocalCLID = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1505, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvsStatusLocalCLID.setStatus('current')
if mibBuilder.loadTexts: dvsStatusLocalCLID.setDescription('The local identifier for this tunnel')
dvsStatusRemoteCLID = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1505, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvsStatusRemoteCLID.setStatus('current')
if mibBuilder.loadTexts: dvsStatusRemoteCLID.setDescription('The identifier of the remote endpoint for this tunnel.')
dvsStatusLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1505, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvsStatusLocalAddress.setStatus('current')
if mibBuilder.loadTexts: dvsStatusLocalAddress.setDescription('The local IP address used to send tunnel packets to the gateway.')
dvsStatusRemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1505, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvsStatusRemoteAddress.setStatus('current')
if mibBuilder.loadTexts: dvsStatusRemoteAddress.setDescription('The IP address of the remote gateway for the tunnel.')
dvsStatusTunnelState = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1505, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("iDLE", 0), ("aWGWCFG", 1), ("aUTHREPLY", 2), ("pRIMGWTO", 3), ("mODPPPCFG", 4), ("dHCP", 5), ("mIP", 6), ("oPEN", 7), ("dISC", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvsStatusTunnelState.setStatus('current')
if mibBuilder.loadTexts: dvsStatusTunnelState.setDescription('The current state of the tunnel.')
dvsStatusUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1505, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvsStatusUpTime.setStatus('current')
if mibBuilder.loadTexts: dvsStatusUpTime.setDescription('The time this tunnel has been active.')
dvsStatusMacSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1505, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvsStatusMacSlotNumber.setStatus('current')
if mibBuilder.loadTexts: dvsStatusMacSlotNumber.setDescription('The slot number of the MAC card that is the local endpoint for this tunnel.')
dvsStatusVPOP = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1505, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvsStatusVPOP.setStatus('current')
if mibBuilder.loadTexts: dvsStatusVPOP.setDescription('The VPOP id to which this tunnel belongs.')
dvsStatusGreInPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1505, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvsStatusGreInPackets.setStatus('current')
if mibBuilder.loadTexts: dvsStatusGreInPackets.setDescription('The total number of GRE packets received on the tunnel.')
dvsStatusGreOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1505, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvsStatusGreOutPackets.setStatus('current')
if mibBuilder.loadTexts: dvsStatusGreOutPackets.setDescription('The total number of GRE packets sent on the tunnel.')
dvsStatusGreChecksumError = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1505, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvsStatusGreChecksumError.setStatus('current')
if mibBuilder.loadTexts: dvsStatusGreChecksumError.setDescription('The total number of GRE packets received with bad checksums for this tunnel.')
dvsStatusGreInDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1505, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvsStatusGreInDropped.setStatus('current')
if mibBuilder.loadTexts: dvsStatusGreInDropped.setDescription('The total number of GRE packets dropped on receive for this tunnel.')
dvsStatusGreOutDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1505, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvsStatusGreOutDropped.setStatus('current')
if mibBuilder.loadTexts: dvsStatusGreOutDropped.setDescription('The total number of GRE packets dropped on send for this tunnel.')
dvsStatusDeadSession = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1505, 1, 14), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvsStatusDeadSession.setStatus('current')
if mibBuilder.loadTexts: dvsStatusDeadSession.setDescription('True if session is dead/disconnected')
dvsStatusRemoteIPXNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1505, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvsStatusRemoteIPXNetwork.setStatus('current')
if mibBuilder.loadTexts: dvsStatusRemoteIPXNetwork.setDescription('Remote IPX Network Number')
dvsStatusRemoteIPXNode = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1505, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvsStatusRemoteIPXNode.setStatus('current')
if mibBuilder.loadTexts: dvsStatusRemoteIPXNode.setDescription('IPX node number to assign to remote user.')
dvsStatusIPInPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1505, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvsStatusIPInPackets.setStatus('current')
if mibBuilder.loadTexts: dvsStatusIPInPackets.setDescription('Total number of IP packets received')
dvsStatusIPOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1505, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvsStatusIPOutPackets.setStatus('current')
if mibBuilder.loadTexts: dvsStatusIPOutPackets.setDescription('Total number of IP packets tunneled')
dvsStatusIPXInPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1505, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvsStatusIPXInPackets.setStatus('current')
if mibBuilder.loadTexts: dvsStatusIPXInPackets.setDescription('Total number of IPX packets received')
dvsStatusIPXOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1505, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvsStatusIPXOutPackets.setStatus('current')
if mibBuilder.loadTexts: dvsStatusIPXOutPackets.setDescription('Total number of IPX packets tunneled')
dvsLogEntryTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1506), )
if mibBuilder.loadTexts: dvsLogEntryTable.setStatus('current')
if mibBuilder.loadTexts: dvsLogEntryTable.setDescription('DVS Tunnel log entry.')
dvsLogEntryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1506, 1), ).setIndexNames((0, "APTIS-MONITOR-MIB", "dvsLogEntryIndex"))
if mibBuilder.loadTexts: dvsLogEntryEntry.setStatus('current')
if mibBuilder.loadTexts: dvsLogEntryEntry.setDescription('This is the structure of entries in the dvsLogEntryTable.')
dvsLogEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1506, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvsLogEntryIndex.setStatus('current')
if mibBuilder.loadTexts: dvsLogEntryIndex.setDescription('Log entry index')
dvsLogEntryMinIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1506, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvsLogEntryMinIndex.setStatus('current')
if mibBuilder.loadTexts: dvsLogEntryMinIndex.setDescription('Index of oldest event available')
dvsLogEntryMaxIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1506, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvsLogEntryMaxIndex.setStatus('current')
if mibBuilder.loadTexts: dvsLogEntryMaxIndex.setDescription('Index of newest event available')
dvsLogEntryEntryText = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1506, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvsLogEntryEntryText.setStatus('current')
if mibBuilder.loadTexts: dvsLogEntryEntryText.setDescription('Log entry text.')
dvsLogEntryTunnelCLID = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1506, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvsLogEntryTunnelCLID.setStatus('current')
if mibBuilder.loadTexts: dvsLogEntryTunnelCLID.setDescription('The Local Identifier for this tunnel')
dvsLogEntryUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1506, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvsLogEntryUpTime.setStatus('current')
if mibBuilder.loadTexts: dvsLogEntryUpTime.setDescription('Time this tunnel has been active')
dvsDeadLogEntryTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1520), )
if mibBuilder.loadTexts: dvsDeadLogEntryTable.setStatus('current')
if mibBuilder.loadTexts: dvsDeadLogEntryTable.setDescription('DVS Tunnel dead log entry.')
dvsDeadLogEntryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1520, 1), ).setIndexNames((0, "APTIS-MONITOR-MIB", "dvsDeadLogEntryIndex"))
if mibBuilder.loadTexts: dvsDeadLogEntryEntry.setStatus('current')
if mibBuilder.loadTexts: dvsDeadLogEntryEntry.setDescription('This is the structure of entries in the dvsDeadLogEntryTable.')
dvsDeadLogEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1520, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvsDeadLogEntryIndex.setStatus('current')
if mibBuilder.loadTexts: dvsDeadLogEntryIndex.setDescription('Log entry index')
dvsDeadLogEntryMinIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1520, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvsDeadLogEntryMinIndex.setStatus('current')
if mibBuilder.loadTexts: dvsDeadLogEntryMinIndex.setDescription('Index of oldest event available')
dvsDeadLogEntryMaxIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1520, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvsDeadLogEntryMaxIndex.setStatus('current')
if mibBuilder.loadTexts: dvsDeadLogEntryMaxIndex.setDescription('Index of newest event available')
dvsDeadLogEntryEntryText = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1520, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvsDeadLogEntryEntryText.setStatus('current')
if mibBuilder.loadTexts: dvsDeadLogEntryEntryText.setDescription('Log entry text.')
dvsDeadLogEntryTunnelCLID = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1520, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvsDeadLogEntryTunnelCLID.setStatus('current')
if mibBuilder.loadTexts: dvsDeadLogEntryTunnelCLID.setDescription('The Local Identifier for this tunnel')
dvsDeadLogEntryUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1520, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvsDeadLogEntryUpTime.setStatus('current')
if mibBuilder.loadTexts: dvsDeadLogEntryUpTime.setDescription('Time this tunnel has been active')
dvsStatusDeadTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1521), )
if mibBuilder.loadTexts: dvsStatusDeadTable.setStatus('current')
if mibBuilder.loadTexts: dvsStatusDeadTable.setDescription('DVS Tunnel dead status.')
dvsStatusDeadEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1521, 1), ).setIndexNames((0, "APTIS-MONITOR-MIB", "dvsStatusDeadTunnelCLID"))
if mibBuilder.loadTexts: dvsStatusDeadEntry.setStatus('current')
if mibBuilder.loadTexts: dvsStatusDeadEntry.setDescription('This is the structure of entries in the dvsStatusDeadTable.')
dvsStatusDeadTunnelCLID = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1521, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvsStatusDeadTunnelCLID.setStatus('current')
if mibBuilder.loadTexts: dvsStatusDeadTunnelCLID.setDescription('The local identifier for this tunnel')
dvsStatusDeadRemoteCLID = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1521, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvsStatusDeadRemoteCLID.setStatus('current')
if mibBuilder.loadTexts: dvsStatusDeadRemoteCLID.setDescription('The identifier of the remote endpoint for this tunnel.')
dvsStatusDeadRemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1521, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvsStatusDeadRemoteAddress.setStatus('current')
if mibBuilder.loadTexts: dvsStatusDeadRemoteAddress.setDescription('The IP address of the remote gateway for the tunnel.')
dvsStatusDeadTunnelState = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1521, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("iDLE", 0), ("aWGWCFG", 1), ("aUTHREPLY", 2), ("pRIMGWTO", 3), ("mODPPPCFG", 4), ("dHCP", 5), ("mIP", 6), ("oPEN", 7), ("dISC", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvsStatusDeadTunnelState.setStatus('current')
if mibBuilder.loadTexts: dvsStatusDeadTunnelState.setDescription('The current state of the tunnel.')
dvsStatusDeadUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1521, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvsStatusDeadUpTime.setStatus('current')
if mibBuilder.loadTexts: dvsStatusDeadUpTime.setDescription('The time this tunnel has been active.')
dvsStatusDeadMacSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1521, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvsStatusDeadMacSlotNumber.setStatus('current')
if mibBuilder.loadTexts: dvsStatusDeadMacSlotNumber.setDescription('The slot number of the MAC card that is the local endpoint for this tunnel.')
dvsStatusDeadVPOP = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1521, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvsStatusDeadVPOP.setStatus('current')
if mibBuilder.loadTexts: dvsStatusDeadVPOP.setDescription('The VPOP id to which this tunnel belongs.')
dvsStatusDeadGreInPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1521, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvsStatusDeadGreInPackets.setStatus('current')
if mibBuilder.loadTexts: dvsStatusDeadGreInPackets.setDescription('The total number of GRE packets received on the tunnel.')
dvsStatusDeadGreOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1521, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvsStatusDeadGreOutPackets.setStatus('current')
if mibBuilder.loadTexts: dvsStatusDeadGreOutPackets.setDescription('The total number of GRE packets sent on the tunnel.')
dvsStatusDeadGreChecksumError = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1521, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvsStatusDeadGreChecksumError.setStatus('current')
if mibBuilder.loadTexts: dvsStatusDeadGreChecksumError.setDescription('The total number of GRE packets received with bad checksums for this tunnel.')
dvsStatusDeadGreInDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1521, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvsStatusDeadGreInDropped.setStatus('current')
if mibBuilder.loadTexts: dvsStatusDeadGreInDropped.setDescription('The total number of GRE packets dropped on receive for this tunnel.')
dvsStatusDeadGreOutDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1521, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvsStatusDeadGreOutDropped.setStatus('current')
if mibBuilder.loadTexts: dvsStatusDeadGreOutDropped.setDescription('The total number of GRE packets dropped on send for this tunnel.')
dvsStatusDeadDeadSession = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 1521, 1, 13), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvsStatusDeadDeadSession.setStatus('current')
if mibBuilder.loadTexts: dvsStatusDeadDeadSession.setDescription('True if session is dead/disconnected')
ipstatIgmpEntryTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3801), )
if mibBuilder.loadTexts: ipstatIgmpEntryTable.setStatus('current')
if mibBuilder.loadTexts: ipstatIgmpEntryTable.setDescription('IP Group Management Protocol Information.')
ipstatIgmpEntryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3801, 1), ).setIndexNames((0, "APTIS-MONITOR-MIB", "ipstatIgmpEntryIPAddress"))
if mibBuilder.loadTexts: ipstatIgmpEntryEntry.setStatus('current')
if mibBuilder.loadTexts: ipstatIgmpEntryEntry.setDescription('This is the structure of entries in the ipstatIgmpEntryTable.')
ipstatIgmpEntryIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3801, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipstatIgmpEntryIPAddress.setStatus('current')
if mibBuilder.loadTexts: ipstatIgmpEntryIPAddress.setDescription('IGMP Multicast Group IP Address.')
ipstatIgmpEntryIPAddrfrom = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3801, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipstatIgmpEntryIPAddrfrom.setStatus('current')
if mibBuilder.loadTexts: ipstatIgmpEntryIPAddrfrom.setDescription('IGMP Host IP Address.')
ipstatIgmpEntryCliId = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3801, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipstatIgmpEntryCliId.setStatus('current')
if mibBuilder.loadTexts: ipstatIgmpEntryCliId.setDescription('IGMP Client ID.')
ipstatIgmpEntryTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3801, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipstatIgmpEntryTimeout.setStatus('current')
if mibBuilder.loadTexts: ipstatIgmpEntryTimeout.setDescription('IGMP Timeout.')
ipstatIgmpEntryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3801, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipstatIgmpEntryCount.setStatus('current')
if mibBuilder.loadTexts: ipstatIgmpEntryCount.setDescription('IGMP use count.')
ipstatIgmpEntryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 2, 3801, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("nomem", 1), ("v1mem", 2), ("check", 3), ("mem", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipstatIgmpEntryState.setStatus('current')
if mibBuilder.loadTexts: ipstatIgmpEntryState.setDescription('IGMP State.')
mibBuilder.exportSymbols("APTIS-MONITOR-MIB", sessionStatusReverseTerminationReason=sessionStatusReverseTerminationReason, modemCallStatsRxShaping=modemCallStatsRxShaping, pppSessionStatsRemoteAuthProtocol=pppSessionStatsRemoteAuthProtocol, sessionCountersHistoryHighest=sessionCountersHistoryHighest, pppSummaryStatsActiveLinks=pppSummaryStatsActiveLinks, modemCallStatsFirmwareState=modemCallStatsFirmwareState, l2FTunnelStatusActiveLinksAddedSuccessfully=l2FTunnelStatusActiveLinksAddedSuccessfully, sessionStatusHistorySessionID=sessionStatusHistorySessionID, taskStatsTableTable=taskStatsTableTable, ds0StatsEntry=ds0StatsEntry, modemCallStatsHighAddrOfMEMACCFailure=modemCallStatsHighAddrOfMEMACCFailure, memoryStatsTableFreeSize=memoryStatsTableFreeSize, iSDNStatsOutCalls=iSDNStatsOutCalls, ss7StatusReverseState=ss7StatusReverseState, sessionStatusActiveStopTime=sessionStatusActiveStopTime, pppSessionStatsTxBytes=pppSessionStatsTxBytes, pbufStatsFreeMin3=pbufStatsFreeMin3, sessionStatusHistoryModemRetransmits=sessionStatusHistoryModemRetransmits, sessionStatusReverseRxMinDataRate=sessionStatusReverseRxMinDataRate, pppSessionStatsMultilinkLinksMax=pppSessionStatsMultilinkLinksMax, sessionStatusReverseState=sessionStatusReverseState, dacClockingTable=dacClockingTable, pbufStatsAllocFails0=pbufStatsAllocFails0, sessionSummaryInactiveFrameRelay=sessionSummaryInactiveFrameRelay, softwareVersionSoftwareRevision=softwareVersionSoftwareRevision, sessionStatusTunnelId=sessionStatusTunnelId, l2FLogEntryTable=l2FLogEntryTable, modemCallStatsEQM8Seconds=modemCallStatsEQM8Seconds, e1CountsIncomingCallAttempts=e1CountsIncomingCallAttempts, sessionStatusLocalIPMask=sessionStatusLocalIPMask, iSDNStatsOutConnected=iSDNStatsOutConnected, modemCallStatsTxPrecoding=modemCallStatsTxPrecoding, sessionSummaryActiveCiscoHDLC=sessionSummaryActiveCiscoHDLC, pppDeadSessionStatsRemotePFC=pppDeadSessionStatsRemotePFC, ipstatRouteEntryCircuitId=ipstatRouteEntryCircuitId, l2FTunnelStatusInactiveLinksAddedUnsuccessfully=l2FTunnelStatusInactiveLinksAddedUnsuccessfully, l2TPLinkStatusState=l2TPLinkStatusState, modemCallStatsV8Capabilities=modemCallStatsV8Capabilities, l2FTunnelStatusActiveLocalCLID=l2FTunnelStatusActiveLocalCLID, mamLogEntryMinIndex=mamLogEntryMinIndex, pppDeadSessionStatsRemoteACFC=pppDeadSessionStatsRemoteACFC, sessionStatusReverseDuration=sessionStatusReverseDuration, ss7StatusNetworkId=ss7StatusNetworkId, dacStatusLTMType=dacStatusLTMType, sessionSummaryMaximumCiscoHDLC=sessionSummaryMaximumCiscoHDLC, pbufStatsAllocFails4=pbufStatsAllocFails4, modemSessionStatsModemNumber=modemSessionStatsModemNumber, pppDeadSessionStatsCCPResetsReceived=pppDeadSessionStatsCCPResetsReceived, sessionStatusInactiveEntry=sessionStatusInactiveEntry, sessionStatusCleartcpRemotePort=sessionStatusCleartcpRemotePort, pbufStatsDataSize1=pbufStatsDataSize1, pppSessionStatsTxPacketsDropped=pppSessionStatsTxPacketsDropped, sessionMultilinkNegotiated=sessionMultilinkNegotiated, sessionStatusHistoryDurationHMS=sessionStatusHistoryDurationHMS, pppDeadSessionStatsMultilinkLinks=pppDeadSessionStatsMultilinkLinks, ipstatIgmpEntryTimeout=ipstatIgmpEntryTimeout, sessionCountersHistoryLowest=sessionCountersHistoryLowest, softwareVersionEntry=softwareVersionEntry, pbufStatsAllocSuccesses2=pbufStatsAllocSuccesses2, sessionSummaryActiveFax=sessionSummaryActiveFax, pbufStatsCPUNumber=pbufStatsCPUNumber, cHdlcStatsNomemoryOut=cHdlcStatsNomemoryOut, memoryStatsTableUsedSmallestBlock=memoryStatsTableUsedSmallestBlock, sessionStatusActiveTandemPort=sessionStatusActiveTandemPort, modemCallStatsNumberOfTXBlocksLow=modemCallStatsNumberOfTXBlocksLow, sessionStatusHistoryRemoteIPXNode=sessionStatusHistoryRemoteIPXNode, ipstatRouteEntryNextIprt=ipstatRouteEntryNextIprt, dvsLogEntryTable=dvsLogEntryTable, sessionSummaryInactiveL2tp=sessionSummaryInactiveL2tp, sessionStatusReverseLayer2Slot=sessionStatusReverseLayer2Slot, sessionStatusReverseRxEndDataRate=sessionStatusReverseRxEndDataRate, dvsStatusRemoteAddress=dvsStatusRemoteAddress, sessionStatusReversePack=sessionStatusReversePack, sessionStatusReverseTable=sessionStatusReverseTable, pppSessionStatsLocalShortSeq=pppSessionStatsLocalShortSeq, modemSessionStatsTDMStream=modemSessionStatsTDMStream, sessionStatusInactiveSessionID=sessionStatusInactiveSessionID, sessionStatusActiveRxStartDataRate=sessionStatusActiveRxStartDataRate, pppDeadSessionStatsRemoteACCM=pppDeadSessionStatsRemoteACCM, sessionComponentsSessionIndex=sessionComponentsSessionIndex, sessionSlotsSlot3Count=sessionSlotsSlot3Count, pppSessionStatsRemoteIPAddress=pppSessionStatsRemoteIPAddress, sessionStatusActiveModemRemoteRetrains=sessionStatusActiveModemRemoteRetrains, l2FTunnelStatusInactiveLinksAdded=l2FTunnelStatusInactiveLinksAdded, sessionCountersInactiveLowest=sessionCountersInactiveLowest, sessionStatusActivePack=sessionStatusActivePack, l2TPTunnelStatusActiveUpTime=l2TPTunnelStatusActiveUpTime, sessionStatusActiveCleartcpRemoteIP=sessionStatusActiveCleartcpRemoteIP, modemIntervalStatsIdleCount=modemIntervalStatsIdleCount, ds0StatsInCleared=ds0StatsInCleared, sessionCountersInactiveCount=sessionCountersInactiveCount, pppDeadSessionStatsPhase=pppDeadSessionStatsPhase, modemIntervalStatsStartTime=modemIntervalStatsStartTime, sessionStatusHistoryModemErrorCorrection=sessionStatusHistoryModemErrorCorrection, sessionStatusTimeOfModemSync=sessionStatusTimeOfModemSync, sessionSummaryActiveL2tp=sessionSummaryActiveL2tp, sessionStatusInactiveDmm=sessionStatusInactiveDmm, sessionSummaryEntry=sessionSummaryEntry, pppDeadSessionStatsRemoteVJ=pppDeadSessionStatsRemoteVJ, pppSessionStatsRxBigErrors=pppSessionStatsRxBigErrors, sessionStatusHistoryTimeOfModemSync=sessionStatusHistoryTimeOfModemSync, modemStatsPackCrashes=modemStatsPackCrashes, pppDeadSessionStatsRxBytes=pppDeadSessionStatsRxBytes, pppDeadSessionStatsMultilinkActive=pppDeadSessionStatsMultilinkActive, sessionStatusTandemTimeslot=sessionStatusTandemTimeslot, modemStatsDownloadAttempts=modemStatsDownloadAttempts, pppDeadSessionStatsNBNSAddress1=pppDeadSessionStatsNBNSAddress1, modemCallStatsECState2=modemCallStatsECState2, sessionStatusActiveRemoteIPXNetwork=sessionStatusActiveRemoteIPXNetwork, sessionStatusInactiveCallClass=sessionStatusInactiveCallClass, dvsLogEntryEntry=dvsLogEntryEntry, pppSessionStatsTable=pppSessionStatsTable, sessionStatusReverseRemoteIPMask=sessionStatusReverseRemoteIPMask, sessionStatusHistoryModemSNR=sessionStatusHistoryModemSNR, timerStatsSlotNumber=timerStatsSlotNumber, e1CountsLineNumber=e1CountsLineNumber, dvsDeadLogEntryIndex=dvsDeadLogEntryIndex, pppSummaryStatsLinksStarted=pppSummaryStatsLinksStarted, sessionStatusTimeslot=sessionStatusTimeslot, dvsStatusDeadDeadSession=dvsStatusDeadDeadSession, pppDeadSessionStatsInterfaceType=pppDeadSessionStatsInterfaceType, modemCallStatsRxMPSequenceByte1Low=modemCallStatsRxMPSequenceByte1Low, modemCallStatsHandshakeTime=modemCallStatsHandshakeTime, sessionCountersActiveCount=sessionCountersActiveCount, ss7StatusTable=ss7StatusTable, sessionStatusTdmStream=sessionStatusTdmStream, sessionStatusTunnelMediumType=sessionStatusTunnelMediumType, l2FTunnelStatusActiveVPOP=l2FTunnelStatusActiveVPOP, pppSessionStatsRemoteMRRU=pppSessionStatsRemoteMRRU, modemSessionStats2SessionID=modemSessionStats2SessionID, sessionStatusHistoryTxStartDataRate=sessionStatusHistoryTxStartDataRate, sessionStatusCallingNumber=sessionStatusCallingNumber, sessionStatusActiveRemoteIPMask=sessionStatusActiveRemoteIPMask, timerStatsCardType=timerStatsCardType, ipdcTraceIndex=ipdcTraceIndex, sessionStatusInactiveCalledNumber=sessionStatusInactiveCalledNumber, pbufStatsTotalCount0=pbufStatsTotalCount0, sessionStatusReverseTimeslot=sessionStatusReverseTimeslot, l2FTunnelStatusActiveGotOpened=l2FTunnelStatusActiveGotOpened, l2FTunnelStatusInactiveLinksRemoved=l2FTunnelStatusInactiveLinksRemoved, sessionStatusReverseLinkId=sessionStatusReverseLinkId, pppSessionStatsRemotePFC=pppSessionStatsRemotePFC, sessionSummaryMaximumTest=sessionSummaryMaximumTest, sessionMultilinkNameLength=sessionMultilinkNameLength, sessionStatusReverseLocalIPMask=sessionStatusReverseLocalIPMask, iSDNStatsChargedUnits=iSDNStatsChargedUnits, sessionSummaryActivePpp=sessionSummaryActivePpp, t3StatsLineState=t3StatsLineState, pbufStatsFreeMin4=pbufStatsFreeMin4, sessionMultilinkPeerMRRU=sessionMultilinkPeerMRRU, sessionStatusReverseOctetsOut=sessionStatusReverseOctetsOut, timerStatsTotalCount=timerStatsTotalCount, ipStubStatsIgmpOutMsgs=ipStubStatsIgmpOutMsgs, pppDeadSessionStatsRxCompPacketsDropped=pppDeadSessionStatsRxCompPacketsDropped, sessionStatusTunnelServerAddress=sessionStatusTunnelServerAddress, pppSessionStatsMLPPacketsNull=pppSessionStatsMLPPacketsNull, sessionStatusCallClass=sessionStatusCallClass, sessionSlotsSlot4Count=sessionSlotsSlot4Count, modemIntervalStatsOverallAuthCalls=modemIntervalStatsOverallAuthCalls, sessionStatusHistoryPacketsIn=sessionStatusHistoryPacketsIn, sessionCountersHistoryTableSize=sessionCountersHistoryTableSize, modemCallStatsV8LicenseeCode=modemCallStatsV8LicenseeCode, sessionStatusHistoryTxMinDataRate=sessionStatusHistoryTxMinDataRate, ipstatRouteEntryCost=ipstatRouteEntryCost, dvsDeadLogEntryTable=dvsDeadLogEntryTable, slotStatusNewPalRev=slotStatusNewPalRev, sessionStatusReverseTxStartDataRate=sessionStatusReverseTxStartDataRate, l2FLinkStatusLocalCLID=l2FLinkStatusLocalCLID, dacStatusTable=dacStatusTable, dacClockingForce=dacClockingForce, sessionStatusReverseIop=sessionStatusReverseIop, sessionSlotsSlot17Count=sessionSlotsSlot17Count, sessionStatusState=sessionStatusState, l2TPTunnelStatusActivePendingLinks=l2TPTunnelStatusActivePendingLinks, sessionStatusActiveDmm=sessionStatusActiveDmm, sessionStatusIop=sessionStatusIop, sessionStatusInactiveTunnelServerAddress=sessionStatusInactiveTunnelServerAddress, dvsLogEntryTunnelCLID=dvsLogEntryTunnelCLID, sessionStatusHistoryLocalIPMask=sessionStatusHistoryLocalIPMask, slotStatusNewTable=slotStatusNewTable, modemCallStatsAutoGainAttenuation=modemCallStatsAutoGainAttenuation, cHdlcStatsEntry=cHdlcStatsEntry, powerStatusInternalACDC1=powerStatusInternalACDC1, sessionMultilinkMyEIDData=sessionMultilinkMyEIDData, ss7TraceTable=ss7TraceTable, l2FLinkStatusL2FTermationCause=l2FLinkStatusL2FTermationCause, sessionStatusActiveTxStartDataRate=sessionStatusActiveTxStartDataRate, sessionStatusInactiveTimeslot=sessionStatusInactiveTimeslot, sessionStatusInactiveLinkId=sessionStatusInactiveLinkId, sessionStatusHistoryRemoteIPMask=sessionStatusHistoryRemoteIPMask, timerStatsTimerEntrySize=timerStatsTimerEntrySize, modemCallStatsSymbolRate=modemCallStatsSymbolRate, sessionMultilinkEntry=sessionMultilinkEntry, powerStatusInternalACDC3=powerStatusInternalACDC3, pbufStatsAllocatedCount3=pbufStatsAllocatedCount3, iSDNHDLCFrameIndex=iSDNHDLCFrameIndex, modemCallStatsMinAGCGainValue=modemCallStatsMinAGCGainValue, pppDeadSessionStatsIPXCPState=pppDeadSessionStatsIPXCPState, sessionStatusInactiveRxMaxDataRate=sessionStatusInactiveRxMaxDataRate, pppDeadLogEntryMinIndex=pppDeadLogEntryMinIndex, sessionStatusHistoryLinkCount=sessionStatusHistoryLinkCount, ipstatRouteEntryIpAddress=ipstatRouteEntryIpAddress, l2FTunnelStatusInactivePendingLinks=l2FTunnelStatusInactivePendingLinks, modemCallStatsEQM9Seconds=modemCallStatsEQM9Seconds, l2FLinkStatusUserName=l2FLinkStatusUserName, sessionStatusReverseCleartcpRemotePort=sessionStatusReverseCleartcpRemotePort, sessionStatusHistoryLastComponent=sessionStatusHistoryLastComponent, sessionSummaryActiveTest=sessionSummaryActiveTest, sessionTraceRelativeTimeStamp=sessionTraceRelativeTimeStamp, pbufStatsTotalCount1=pbufStatsTotalCount1, t3StatsActiveDs1Count=t3StatsActiveDs1Count, sessionStatusInactiveCallingNumber=sessionStatusInactiveCallingNumber, dvsStatusIPXInPackets=dvsStatusIPXInPackets, sessionStatusDurationHMS=sessionStatusDurationHMS, pppSessionStatsPhase=pppSessionStatsPhase, ipCleartcpStatsOutputBytes=ipCleartcpStatsOutputBytes, cHdlcStatsCiscoFramesIn=cHdlcStatsCiscoFramesIn, ss7CountersEntry=ss7CountersEntry, modemSessionStats2Entry=modemSessionStats2Entry, sessionStatusActiveTxMinDataRate=sessionStatusActiveTxMinDataRate, sessionStatusHistoryTdmTimeSlot=sessionStatusHistoryTdmTimeSlot, sessionStatusInactiveModemRemoteRenegotiations=sessionStatusInactiveModemRemoteRenegotiations, l2FTunnelStatusInactiveRemoteCLID=l2FTunnelStatusInactiveRemoteCLID, modemIntervalStatsECCalls=modemIntervalStatsECCalls, sessionSummaryMaximumVoice=sessionSummaryMaximumVoice, sessionStatusInactivePack=sessionStatusInactivePack, sessionStatusHistoryCalledNumber=sessionStatusHistoryCalledNumber, pbufStatsAllocatedMax0=pbufStatsAllocatedMax0, sessionStatusReverseTxEndDataRate=sessionStatusReverseTxEndDataRate, dvsLogEntryEntryText=dvsLogEntryEntryText, sessionStatusLinkService=sessionStatusLinkService, modemCallStatsDisconnectReason=modemCallStatsDisconnectReason, sessionStatusPack=sessionStatusPack, modemSessionStats2Table=modemSessionStats2Table, sessionStatusActiveSessionID=sessionStatusActiveSessionID, pppDeadSessionStatsDeadSession=pppDeadSessionStatsDeadSession, pppSessionStatsLocalPFC=pppSessionStatsLocalPFC, modemSummaryStatsECCalls=modemSummaryStatsECCalls, slotStatusSlotType=slotStatusSlotType, cHdlcStatsTable=cHdlcStatsTable, sessionStatusLastComponent=sessionStatusLastComponent, sessionStatusInactiveOriginateMode=sessionStatusInactiveOriginateMode, memoryStatsTableEntry=memoryStatsTableEntry, dvsDeadLogEntryUpTime=dvsDeadLogEntryUpTime, taskStatsTableStackAddress4=taskStatsTableStackAddress4, l2TPLogEntryEntry=l2TPLogEntryEntry, l2FLogEntryUpTime=l2FLogEntryUpTime, dvsStatusRemoteIPXNetwork=dvsStatusRemoteIPXNetwork, modemSummaryStatsModemCount=modemSummaryStatsModemCount, modemCallStatsNumberOfRXCharsMSB=modemCallStatsNumberOfRXCharsMSB, ss7TraceAbsoluteTimeStamp=ss7TraceAbsoluteTimeStamp, pbufStatsAllocatedMax3=pbufStatsAllocatedMax3, sessionSummaryInactivePpp=sessionSummaryInactivePpp, sessionSummaryInactiveTelnet=sessionSummaryInactiveTelnet)
mibBuilder.exportSymbols("APTIS-MONITOR-MIB", sessionStatusActiveOctetsIn=sessionStatusActiveOctetsIn, e1SummaryStatsFunctionalChannels=e1SummaryStatsFunctionalChannels, l2TPLogEntryUpTime=l2TPLogEntryUpTime, pbufStatsAllocatedMax2=pbufStatsAllocatedMax2, slotStatusFirmwareRev=slotStatusFirmwareRev, l2TPTunnelStatusInactiveActiveLinks=l2TPTunnelStatusInactiveActiveLinks, taskStatsTableStackAddress1=taskStatsTableStackAddress1, sessionStatusReverseCallClassArray=sessionStatusReverseCallClassArray, modemCallStatsRxFinalSpeed=modemCallStatsRxFinalSpeed, sessionTraceLogEntry=sessionTraceLogEntry, pbufStatsAllocatedMax4=pbufStatsAllocatedMax4, e1SummaryStatsConnectedChannels=e1SummaryStatsConnectedChannels, sessionStatusActiveRemoteIPXNode=sessionStatusActiveRemoteIPXNode, modemIntervalStatsAuthCalls=modemIntervalStatsAuthCalls, t1StatsSlotIndex=t1StatsSlotIndex, sessionStatusModemLocalRenegotiations=sessionStatusModemLocalRenegotiations, sessionStatusHistoryTable=sessionStatusHistoryTable, modemCallStatsRemoteRetrains=modemCallStatsRemoteRetrains, ipstatIgmpEntryEntry=ipstatIgmpEntryEntry, pppDeadSessionStatsRxBytesAfterCompress=pppDeadSessionStatsRxBytesAfterCompress, pppSessionStatsRemoteIPXNode=pppSessionStatsRemoteIPXNode, ss7StatusState=ss7StatusState, l2TPTunnelStatusActiveLinksAddedSuccessfully=l2TPTunnelStatusActiveLinksAddedSuccessfully, taskStatsTableIntervalSize=taskStatsTableIntervalSize, t1CountsTable=t1CountsTable, taskStatsTableRunTime=taskStatsTableRunTime, ss7CountersOneshotFree=ss7CountersOneshotFree, ipSvcMonitoringRequestsInError=ipSvcMonitoringRequestsInError, sessionStatusActiveTxMaxDataRate=sessionStatusActiveTxMaxDataRate, pbufStatsFreeCount4=pbufStatsFreeCount4, ipSvcMonitoringEntry=ipSvcMonitoringEntry, sessionTraceEntry=sessionTraceEntry, ss7TraceIndex=ss7TraceIndex, slotStatusShelfNumber=slotStatusShelfNumber, l2TPTunnelStatusActiveRemoteAddress=l2TPTunnelStatusActiveRemoteAddress, sessionStatusActivePort=sessionStatusActivePort, pbufStatsAllocatedMax5=pbufStatsAllocatedMax5, ds0StatsSlotIndex=ds0StatsSlotIndex, sessionSummaryActiveNone=sessionSummaryActiveNone, pbufStatsFreeSuccesses2=pbufStatsFreeSuccesses2, l2TPTunnelStatusActiveMaxActiveLinks=l2TPTunnelStatusActiveMaxActiveLinks, sessionStatusActiveMultiLinkId=sessionStatusActiveMultiLinkId, pppSessionStatsMultilinkLinksAdded=pppSessionStatsMultilinkLinksAdded, sessionStatusInactivePort=sessionStatusInactivePort, sessionVpopCurrentDuration=sessionVpopCurrentDuration, sessionDiscCauseIndex=sessionDiscCauseIndex, sessionStatusActiveLinkId=sessionStatusActiveLinkId, dacTraceData=dacTraceData, sessionStatusActiveCallClassArray=sessionStatusActiveCallClassArray, sessionMultilinkPeerEIDType=sessionMultilinkPeerEIDType, modemStatsMinRxSum=modemStatsMinRxSum, sessionStatusActiveModemErrorCorrection=sessionStatusActiveModemErrorCorrection, sessionSummaryTable=sessionSummaryTable, dvsStatusGreOutDropped=dvsStatusGreOutDropped, ipCleartcpStatsInputDroppedBytes=ipCleartcpStatsInputDroppedBytes, iSDNLayer2StatsTable=iSDNLayer2StatsTable, taskStatsTableTaskID=taskStatsTableTaskID, sessionStatusHistoryTimeslot=sessionStatusHistoryTimeslot, l2TPLogEntryLocalID=l2TPLogEntryLocalID, modemSummaryStatsActiveCount=modemSummaryStatsActiveCount, modemStatsMaxTxSum=modemStatsMaxTxSum, dvsStatusUpTime=dvsStatusUpTime, ipCleartcpStatsOutputDroppedBytes=ipCleartcpStatsOutputDroppedBytes, modemSessionStatsAmpV2String=modemSessionStatsAmpV2String, modemCallStatsNumberOfTXCharsLSB=modemCallStatsNumberOfTXCharsLSB, modemIntervalStatsActiveCount=modemIntervalStatsActiveCount, pppDeadSessionStatsRemoteMRRU=pppDeadSessionStatsRemoteMRRU, sessionStatusCallClassLen=sessionStatusCallClassLen, clockStatusEntry=clockStatusEntry, sessionSummaryMaximumTerminalServer=sessionSummaryMaximumTerminalServer, pppDeadSessionStatsRemoteShortSeq=pppDeadSessionStatsRemoteShortSeq, cHdlcStatsPppFramesIn=cHdlcStatsPppFramesIn, sessionDiscCauseEntry=sessionDiscCauseEntry, l2TPLinkStatusUserName=l2TPLinkStatusUserName, pppDeadSessionStatsRxAbortErrors=pppDeadSessionStatsRxAbortErrors, sessionStatusHistoryServiceMode=sessionStatusHistoryServiceMode, sessionStatusHistoryModemReceiveLineLevel=sessionStatusHistoryModemReceiveLineLevel, modemStatsConnectedWin=modemStatsConnectedWin, sessionStatusReverseModemTxBlocks=sessionStatusReverseModemTxBlocks, ipAlarmEntryTrapPath=ipAlarmEntryTrapPath, sessionStatusActiveTunnelServerAddress=sessionStatusActiveTunnelServerAddress, sessionComponentsEntry=sessionComponentsEntry, sessionStatusHistoryState=sessionStatusHistoryState, pppLogEntryMaxIndex=pppLogEntryMaxIndex, sessionStatusTerminationCause=sessionStatusTerminationCause, l2FLinkStatusRxPackets=l2FLinkStatusRxPackets, l2TPTunnelStatusInactiveLinksAddedUnsuccessfully=l2TPTunnelStatusInactiveLinksAddedUnsuccessfully, modemCallStatsNumberOfRXBlocksLow=modemCallStatsNumberOfRXBlocksLow, sessionStatusHistoryModemRemoteRetrains=sessionStatusHistoryModemRemoteRetrains, dvsStatusIPXOutPackets=dvsStatusIPXOutPackets, iSDNLayer2StatsLapdState=iSDNLayer2StatsLapdState, ipAlarmEntryTrapGroup=ipAlarmEntryTrapGroup, t1CountsSlotIndex=t1CountsSlotIndex, e1CountsEntry=e1CountsEntry, ipStubStatsIgmpUnknownType=ipStubStatsIgmpUnknownType, e1StatsTable=e1StatsTable, l2TPTunnelStatusActiveActiveLinks=l2TPTunnelStatusActiveActiveLinks, pppLogEntryRawEntryText=pppLogEntryRawEntryText, ipSvcMonitoringResponsesIn=ipSvcMonitoringResponsesIn, sessionStatusActiveOriginateMode=sessionStatusActiveOriginateMode, sessionSummaryInactiveFax=sessionSummaryInactiveFax, timerStatsTimerMemorySize=timerStatsTimerMemorySize, systemTimeTable=systemTimeTable, sessionStatusInactivePacketsOut=sessionStatusInactivePacketsOut, modemStatsAuthWin=modemStatsAuthWin, ipCleartcpStatsInputQfull=ipCleartcpStatsInputQfull, sessionStatusModemDataCompression=sessionStatusModemDataCompression, pppDeadSessionStatsRemoteCompressAlgorithm=pppDeadSessionStatsRemoteCompressAlgorithm, pbufStatsPermAllocatedCount0=pbufStatsPermAllocatedCount0, slotStatusNewSlotStatus=slotStatusNewSlotStatus, sessionStatusActiveLocalIP=sessionStatusActiveLocalIP, modemSummaryStatsConnectedCalls=modemSummaryStatsConnectedCalls, memoryStatsTableUsedLargestBlock=memoryStatsTableUsedLargestBlock, pppSessionStatsRxBytesAfterCompress=pppSessionStatsRxBytesAfterCompress, l2TPTunnelStatusActiveSlot=l2TPTunnelStatusActiveSlot, dvsStatusDeadTable=dvsStatusDeadTable, mamLogEntryEntry=mamLogEntryEntry, slotStatusSlotIndex=slotStatusSlotIndex, modemCallStatsECState1=modemCallStatsECState1, modemSessionStatsInitialRxSpeed=modemSessionStatsInitialRxSpeed, sessionStatusModemReceiveLineLevel=sessionStatusModemReceiveLineLevel, l2TPLogEntryEntryText=l2TPLogEntryEntryText, pppSessionStatsRemoteShortSeq=pppSessionStatsRemoteShortSeq, ss7StatusSlot=ss7StatusSlot, sessionMultilinkPeerShortSequence=sessionMultilinkPeerShortSequence, sessionStatusReverseCallClass=sessionStatusReverseCallClass, l2TPLinkStatusRemoteID=l2TPLinkStatusRemoteID, sessionSummaryActiveTrunk=sessionSummaryActiveTrunk, l2FLinkStatusMIDValue=l2FLinkStatusMIDValue, sessionDiscCauseComponent=sessionDiscCauseComponent, pppDeadLogEntryMaxIndex=pppDeadLogEntryMaxIndex, sessionMultilinkMyEIDType=sessionMultilinkMyEIDType, sessionStatusInactiveLinkService=sessionStatusInactiveLinkService, sessionStatusHistoryModemRemoteRenegotiations=sessionStatusHistoryModemRemoteRenegotiations, pppSessionStatsInactivityRemaining=pppSessionStatsInactivityRemaining, sessionSlotsSlot15Count=sessionSlotsSlot15Count, pbufStatsFreeSuccesses0=pbufStatsFreeSuccesses0, mamLogEntryEntryText=mamLogEntryEntryText, sessionSummaryMaximumSlip=sessionSummaryMaximumSlip, modemCallStatsNumberOfHandshakeRetries=modemCallStatsNumberOfHandshakeRetries, t3StatsRedundant=t3StatsRedundant, pppDeadSessionStatsInactivityLimit=pppDeadSessionStatsInactivityLimit, modemSessionStatsModemIndex=modemSessionStatsModemIndex, powerStatusTable=powerStatusTable, pbufStatsFreeSuccesses4=pbufStatsFreeSuccesses4, pppSessionStatsTxCompressing=pppSessionStatsTxCompressing, pppSessionStatsTxQueueErrors=pppSessionStatsTxQueueErrors, pbufStatsAllocSuccesses0=pbufStatsAllocSuccesses0, sessionMultilinkMyEIDLength=sessionMultilinkMyEIDLength, sessionSummaryActiveUnknown=sessionSummaryActiveUnknown, sessionStatusInactiveTandemPort=sessionStatusInactiveTandemPort, pbufStatsAllocFails1=pbufStatsAllocFails1, pppSessionStatsRemoteCompressAlgorithm=pppSessionStatsRemoteCompressAlgorithm, dacStatusEntry=dacStatusEntry, modemCallStatsV8DataPumpRev=modemCallStatsV8DataPumpRev, modemCallStatsV8FlexVersion=modemCallStatsV8FlexVersion, sessionStatusInactiveSs7SessionId=sessionStatusInactiveSs7SessionId, powerStatusExternalDC1=powerStatusExternalDC1, sessionStatusHistoryLinkId=sessionStatusHistoryLinkId, l2TPTunnelStatusActiveLinksAddedUnsuccessfully=l2TPTunnelStatusActiveLinksAddedUnsuccessfully, sessionStatusInactiveTxMaxDataRate=sessionStatusInactiveTxMaxDataRate, sessionStatusReverseMultiLinkId=sessionStatusReverseMultiLinkId, dvsStatusIPOutPackets=dvsStatusIPOutPackets, sessionStatusReverseEntry=sessionStatusReverseEntry, ss7CountersNumInactive=ss7CountersNumInactive, l2FTunnelStatusActiveMaxActiveLinks=l2FTunnelStatusActiveMaxActiveLinks, pppDeadSessionStatsRxSmallErrors=pppDeadSessionStatsRxSmallErrors, sessionStatusInactiveModemRetransmits=sessionStatusInactiveModemRetransmits, sessionStatusInactiveMultiLinkId=sessionStatusInactiveMultiLinkId, pppDeadSessionStatsLocalACFC=pppDeadSessionStatsLocalACFC, ss7StatusReverseEntry=ss7StatusReverseEntry, sessionStatusInactiveName=sessionStatusInactiveName, sessionStatusHistoryTerminatingComponent=sessionStatusHistoryTerminatingComponent, ss7TraceLogEntry=ss7TraceLogEntry, modemCallStatsInfo0SequenceLow=modemCallStatsInfo0SequenceLow, dvsStatusDeadMacSlotNumber=dvsStatusDeadMacSlotNumber, l2TPLogEntryMinIndex=l2TPLogEntryMinIndex, memoryStatsTableCPUNumber=memoryStatsTableCPUNumber, pppSessionStatsRxBytes=pppSessionStatsRxBytes, sessionStatusHistoryIop=sessionStatusHistoryIop, sessionStatusActiveTimeOfService=sessionStatusActiveTimeOfService, sessionStatusReverseDmm=sessionStatusReverseDmm, ipCleartcpStatsInputTcpfull=ipCleartcpStatsInputTcpfull, sessionStatusHistoryOriginateMode=sessionStatusHistoryOriginateMode, dvsStatusDeadSession=dvsStatusDeadSession, timerStatsFreeFails=timerStatsFreeFails, sessionDiscCauseReason=sessionDiscCauseReason, sessionStatusReverseModemRetransmits=sessionStatusReverseModemRetransmits, timerStatsFreeCount=timerStatsFreeCount, sessionStatusInactiveTerminatingComponent=sessionStatusInactiveTerminatingComponent, sessionStatusActiveLocalIPMask=sessionStatusActiveLocalIPMask, modemStatsConnectedCalls=modemStatsConnectedCalls, sessionStatusReverseRemoteIP=sessionStatusReverseRemoteIP, pppSessionStatsMultilinkLinksRemoved=pppSessionStatsMultilinkLinksRemoved, sessionStatusSessionID=sessionStatusSessionID, pppSessionStatsRemoteIPXNetwork=pppSessionStatsRemoteIPXNetwork, pppDeadSessionStatsTxBytesBeforeCompress=pppDeadSessionStatsTxBytesBeforeCompress, pppSessionStatsTxBytesBeforeCompress=pppSessionStatsTxBytesBeforeCompress, modemSessionStatsIOPNumber=modemSessionStatsIOPNumber, pppSessionStatsDeadSession=pppSessionStatsDeadSession, sessionStatusReverseTandemTimeslot=sessionStatusReverseTandemTimeslot, pppSessionStatsRxAlignErrors=pppSessionStatsRxAlignErrors, sessionStatusDuration=sessionStatusDuration, sessionStatusHistoryModemModulation=sessionStatusHistoryModemModulation, sessionStatusInactiveTable=sessionStatusInactiveTable, sessionStatusActiveTerminatingComponent=sessionStatusActiveTerminatingComponent, ipstatRouteEntryNextIprtIndex=ipstatRouteEntryNextIprtIndex, pbufStatsFreeCount3=pbufStatsFreeCount3, sessionSummaryMaximumRlogin=sessionSummaryMaximumRlogin, sessionTraceSessionIndex=sessionTraceSessionIndex, modemCallStatsECProtocol=modemCallStatsECProtocol, dacStatusClockSourceSecondary=dacStatusClockSourceSecondary, modemCallStatsDigitalPadDetected=modemCallStatsDigitalPadDetected, modemStatsRPI=modemStatsRPI, pbufStatsDataSize2=pbufStatsDataSize2, l2TPTunnelStatusActiveVPOP=l2TPTunnelStatusActiveVPOP, cHdlcStatsCiscoFramesOut=cHdlcStatsCiscoFramesOut, pppDeadLogEntryEntry=pppDeadLogEntryEntry, sessionStatusHistoryMultiLinkId=sessionStatusHistoryMultiLinkId, ipstatIgmpEntryIPAddress=ipstatIgmpEntryIPAddress, sessionStatusActiveOctetsOut=sessionStatusActiveOctetsOut, pppDeadSessionStatsEntry=pppDeadSessionStatsEntry, memoryStatsTableFreeSuccesses=memoryStatsTableFreeSuccesses, sessionStatusActiveCallingNumber=sessionStatusActiveCallingNumber, sessionStatusModemErrorCorrection=sessionStatusModemErrorCorrection, sessionStatusActiveServiceMode=sessionStatusActiveServiceMode, t1SummaryStatsFunctionalChannels=t1SummaryStatsFunctionalChannels, taskStatsTableTaskPool=taskStatsTableTaskPool, pppSessionStatsCCPState=pppSessionStatsCCPState, e1CountsChannelCount=e1CountsChannelCount, pppDeadSessionStatsLCPState=pppDeadSessionStatsLCPState, dvsStatusTable=dvsStatusTable, sessionSlotsSlot11Count=sessionSlotsSlot11Count, pbufStatsPermAllocatedCount1=pbufStatsPermAllocatedCount1, pppSessionStatsRemainingTime=pppSessionStatsRemainingTime, e1CountsOutgoingCallAttempts=e1CountsOutgoingCallAttempts, sessionStatusActiveModemRetransmits=sessionStatusActiveModemRetransmits, ss7StatusReverseCalledId=ss7StatusReverseCalledId, sessionStatusActiveTdmTimeSlot=sessionStatusActiveTdmTimeSlot, cHdlcStatsUnknownProtocolIn=cHdlcStatsUnknownProtocolIn, sessionStatusLayer1Slot=sessionStatusLayer1Slot, ss7StatusStartTime=ss7StatusStartTime, sessionStatusHistoryLayer1Slot=sessionStatusHistoryLayer1Slot, sessionStatusReverseTerminationCause=sessionStatusReverseTerminationCause, sessionStatusActiveCleartcpRemotePort=sessionStatusActiveCleartcpRemotePort, sessionStatusRxMinDataRate=sessionStatusRxMinDataRate, e1CountsTable=e1CountsTable, sessionStatusActiveModemLocalRetrains=sessionStatusActiveModemLocalRetrains, dvsStatusTunnelState=dvsStatusTunnelState, memoryStatsTableManagedSize=memoryStatsTableManagedSize, iSDNHDLCFrameDirection=iSDNHDLCFrameDirection, l2FTunnelStatusActiveLinksRemoved=l2FTunnelStatusActiveLinksRemoved, dvsStatusIPInPackets=dvsStatusIPInPackets, sessionStatusInactiveLocalIPMask=sessionStatusInactiveLocalIPMask)
mibBuilder.exportSymbols("APTIS-MONITOR-MIB", sessionStatusHistoryDmm=sessionStatusHistoryDmm, sessionStatusInactiveLayer2Slot=sessionStatusInactiveLayer2Slot, pbufStatsFreeFails4=pbufStatsFreeFails4, ds0StatsTable=ds0StatsTable, slotStatusStiffwareRev=slotStatusStiffwareRev, sessionSummaryMaximumAtmp=sessionSummaryMaximumAtmp, sessionStatusHistoryTunnelId=sessionStatusHistoryTunnelId, softwareVersionMibVersion=softwareVersionMibVersion, sessionSummaryMaximumTelnet=sessionSummaryMaximumTelnet, l2TPTunnelStatusActiveLinksRemoved=l2TPTunnelStatusActiveLinksRemoved, ipAlarmEntryTrapGenNum=ipAlarmEntryTrapGenNum, l2FTunnelStatusActiveState=l2FTunnelStatusActiveState, modemCallStatsTotalTxRetransmissions=modemCallStatsTotalTxRetransmissions, pbufStatsFreeMin0=pbufStatsFreeMin0, pppSessionStatsCCPResetsSent=pppSessionStatsCCPResetsSent, sessionCountersBootEra=sessionCountersBootEra, ss7StatusReverseCallType=ss7StatusReverseCallType, modemCallStatsLowerBandEdge=modemCallStatsLowerBandEdge, t1CountsSessionAbortMessages=t1CountsSessionAbortMessages, systemSummaryTable=systemSummaryTable, ipAlarmEntryEntry=ipAlarmEntryEntry, pppSessionStatsTotalRxSpeed=pppSessionStatsTotalRxSpeed, l2TPTunnelStatusInactiveL2TPTermationCause=l2TPTunnelStatusInactiveL2TPTermationCause, modemCallStatsEQM6Seconds=modemCallStatsEQM6Seconds, taskStatsTableStackAddress2=taskStatsTableStackAddress2, sessionStatusRxMaxDataRate=sessionStatusRxMaxDataRate, ipsecCountersOutboundDropCounter=ipsecCountersOutboundDropCounter, ipCleartcpStatsTable=ipCleartcpStatsTable, dvsStatusRemoteIPXNode=dvsStatusRemoteIPXNode, e1CountsIncomingConnects=e1CountsIncomingConnects, modemSessionStats2TDMStream=modemSessionStats2TDMStream, sessionSummaryActiveSlip=sessionSummaryActiveSlip, sessionStatusHistoryTandemPort=sessionStatusHistoryTandemPort, e1CountsOutgoingDisconnects=e1CountsOutgoingDisconnects, modemCallStatsDCProtocol=modemCallStatsDCProtocol, modemCallStatsRxPrecoding=modemCallStatsRxPrecoding, mamLogEntryIndex=mamLogEntryIndex, sessionVpopVpopIndex=sessionVpopVpopIndex, pppSessionStatsLocalCompressHistories=pppSessionStatsLocalCompressHistories, pppDeadSessionStatsRxCRCErrors=pppDeadSessionStatsRxCRCErrors, pppDeadSessionStatsMLPPacketsReassembled=pppDeadSessionStatsMLPPacketsReassembled, sessionStatusInactiveTunnelMediumType=sessionStatusInactiveTunnelMediumType, sessionStatusReverseTunnelType=sessionStatusReverseTunnelType, modemCallStatsEQM3Seconds=modemCallStatsEQM3Seconds, sessionVpopEntry=sessionVpopEntry, ipstatIgmpEntryTable=ipstatIgmpEntryTable, dvsStatusDeadGreChecksumError=dvsStatusDeadGreChecksumError, modemIntervalStatsV32Calls=modemIntervalStatsV32Calls, pppDeadSessionStatsMultilinkLinksMax=pppDeadSessionStatsMultilinkLinksMax, sessionStatusReverseCleartcpRemoteIP=sessionStatusReverseCleartcpRemoteIP, sessionSummaryInactiveHub=sessionSummaryInactiveHub, sessionStatusReverseLinkCount=sessionStatusReverseLinkCount, pppSessionStatsTotalTxSpeed=pppSessionStatsTotalTxSpeed, sessionStatusHistoryActualAuthMethod=sessionStatusHistoryActualAuthMethod, pppDeadSessionStatsLocalVJSlots=pppDeadSessionStatsLocalVJSlots, modemIntervalStatsDownloadingCount=modemIntervalStatsDownloadingCount, modemCallStatsNumberOfTXBlocksHigh=modemCallStatsNumberOfTXBlocksHigh, sessionMultilinkPeerEIDData=sessionMultilinkPeerEIDData, ipstatRouteEntryIpMask=ipstatRouteEntryIpMask, slotStatusNewLineTerminationModuleType=slotStatusNewLineTerminationModuleType, dvsLogEntryIndex=dvsLogEntryIndex, sessionStatusOctetsOut=sessionStatusOctetsOut, modemCallStatsAbortCode=modemCallStatsAbortCode, sessionStatusModemTxBlocks=sessionStatusModemTxBlocks, taskStatsTableTotalTime=taskStatsTableTotalTime, ss7StatusReverseStartTime=ss7StatusReverseStartTime, modemCallStatsHighestRxState=modemCallStatsHighestRxState, pppSessionStatsRxCRCErrors=pppSessionStatsRxCRCErrors, dvsStatusMacSlotNumber=dvsStatusMacSlotNumber, pppSessionStatsRxSpeed=pppSessionStatsRxSpeed, sessionStatusInactiveTunnelType=sessionStatusInactiveTunnelType, sessionStatusActiveTimeslot=sessionStatusActiveTimeslot, modemIntervalStatsOverallConnectedCalls=modemIntervalStatsOverallConnectedCalls, cHdlcStatsShortFramesIn=cHdlcStatsShortFramesIn, ss7StatusReverseSessionId=ss7StatusReverseSessionId, pbufStatsFreeCount0=pbufStatsFreeCount0, pppDeadSessionStatsMLPPacketsNull=pppDeadSessionStatsMLPPacketsNull, taskStatsTableIdle5Minute=taskStatsTableIdle5Minute, modemCallStatsEQMSumHigh=modemCallStatsEQMSumHigh, modemCallStatsEQM5Seconds=modemCallStatsEQM5Seconds, modemStatsAuthLose=modemStatsAuthLose, sessionCountersEntry=sessionCountersEntry, modemStatsIOP=modemStatsIOP, l2TPTunnelStatusInactiveUpTime=l2TPTunnelStatusInactiveUpTime, modemCallStatsModulationType=modemCallStatsModulationType, sessionComponentsIndex=sessionComponentsIndex, sessionStatusHistoryPack=sessionStatusHistoryPack, modemSessionStats2IOPNumber=modemSessionStats2IOPNumber, ipstatRouteEntryTag=ipstatRouteEntryTag, modemStatsFinalTxSum=modemStatsFinalTxSum, modemCallStatsEQM1Second=modemCallStatsEQM1Second, ss7StatusReverseSlot=ss7StatusReverseSlot, sessionStatusModemLocalRetrains=sessionStatusModemLocalRetrains, aptisMonitorModule=aptisMonitorModule, dvsStatusDeadRemoteAddress=dvsStatusDeadRemoteAddress, memoryStatsTableFreeFails=memoryStatsTableFreeFails, pppDeadSessionStatsLocalMRRU=pppDeadSessionStatsLocalMRRU, sessionSummaryMaximumDvs=sessionSummaryMaximumDvs, sessionStatusActiveRxMaxDataRate=sessionStatusActiveRxMaxDataRate, sessionStatusReversePacketsOut=sessionStatusReversePacketsOut, taskStatsTableContextSwitches=taskStatsTableContextSwitches, l2TPTunnelStatusActiveState=l2TPTunnelStatusActiveState, dacTraceTimestamp=dacTraceTimestamp, sessionStatusInactiveLayer1Slot=sessionStatusInactiveLayer1Slot, iSDNStatsTable=iSDNStatsTable, sessionSlotsSlot2Count=sessionSlotsSlot2Count, powerStatusFanStatus=powerStatusFanStatus, dvsStatusDeadGreOutDropped=dvsStatusDeadGreOutDropped, sessionStatusHistoryCallClass=sessionStatusHistoryCallClass, sessionStatusInactivePacketsIn=sessionStatusInactivePacketsIn, sessionStatusHistoryRxStartDataRate=sessionStatusHistoryRxStartDataRate, sessionStatusPermanentFlag=sessionStatusPermanentFlag, modemCallStatsPreEmphasis=modemCallStatsPreEmphasis, pppSessionStatsNBNSAddress2=pppSessionStatsNBNSAddress2, pppDeadSessionStatsLocalShortSeq=pppDeadSessionStatsLocalShortSeq, taskStatsTableIsrTimes=taskStatsTableIsrTimes, l2FLinkStatusUpTime=l2FLinkStatusUpTime, sessionStatusHistoryCallingNumber=sessionStatusHistoryCallingNumber, ipSvcMonitoringServiceName=ipSvcMonitoringServiceName, sessionStatusHistoryRemoteIP=sessionStatusHistoryRemoteIP, sessionSlotsTrunkCount=sessionSlotsTrunkCount, pppDeadSessionStatsRxSpeed=pppDeadSessionStatsRxSpeed, pbufStatsTotalCount5=pbufStatsTotalCount5, systemSummaryData=systemSummaryData, iSDNLayer2StatsLapdPeerSabme=iSDNLayer2StatsLapdPeerSabme, sessionStatusActiveTandemTimeslot=sessionStatusActiveTandemTimeslot, pppSessionStatsTxResourceErrors=pppSessionStatsTxResourceErrors, modemStatsPack=modemStatsPack, sessionDiscCauseTable=sessionDiscCauseTable, pppSummaryStatsLinksNegotiatedMLP=pppSummaryStatsLinksNegotiatedMLP, taskStatsTableStackAddress6=taskStatsTableStackAddress6, ipstatRouteEntryTrig=ipstatRouteEntryTrig, slotStatusNewTemperature=slotStatusNewTemperature, systemTimeUpTime=systemTimeUpTime, sessionStatusInactiveStopTime=sessionStatusInactiveStopTime, pppDeadLogEntryTable=pppDeadLogEntryTable, taskStatsTableEntry=taskStatsTableEntry, modemCallStatsV8ManufacturerID=modemCallStatsV8ManufacturerID, sessionStatusReversePacketsIn=sessionStatusReversePacketsIn, modemCallStatsRxMinSpeed=modemCallStatsRxMinSpeed, sessionStatusTdmTimeSlot=sessionStatusTdmTimeSlot, modemStatsV32Calls=modemStatsV32Calls, iSDNLayer2StatsEntry=iSDNLayer2StatsEntry, pbufStatsDataSize3=pbufStatsDataSize3, pppSessionStatsMLPFragmentsDropped=pppSessionStatsMLPFragmentsDropped, l2FTunnelStatusActivePendingLinks=l2FTunnelStatusActivePendingLinks, sessionStatusHistoryPacketsOut=sessionStatusHistoryPacketsOut, pbufStatsDataSize0=pbufStatsDataSize0, sessionStatusReverseSs7SessionId=sessionStatusReverseSs7SessionId, powerStatusExternalDC2=powerStatusExternalDC2, pppDeadSessionStatsSessionID=pppDeadSessionStatsSessionID, pbufStatsFreeCount5=pbufStatsFreeCount5, modemIntervalStatsK56Calls=modemIntervalStatsK56Calls, dacClockingIndex=dacClockingIndex, ipdcTraceTable=ipdcTraceTable, sessionStatusInactiveCallClassLen=sessionStatusInactiveCallClassLen, pppSessionStatsLocalVJ=pppSessionStatsLocalVJ, slotStatusNewFirmwareRev=slotStatusNewFirmwareRev, l2TPTunnelStatusInactiveTable=l2TPTunnelStatusInactiveTable, l2TPTunnelStatusInactiveState=l2TPTunnelStatusInactiveState, ipstatRouteEntryPathAndCost=ipstatRouteEntryPathAndCost, iSDNHDLCFrameMessage=iSDNHDLCFrameMessage, powerStatusInternalAC1=powerStatusInternalAC1, t1CountsLineNumber=t1CountsLineNumber, modemSessionStats2AmpV2String=modemSessionStats2AmpV2String, iSDNStatsInConnected=iSDNStatsInConnected, sessionSummaryInactiveOther=sessionSummaryInactiveOther, sessionSummaryMaximumHub=sessionSummaryMaximumHub, pppSessionStatsTxPackets=pppSessionStatsTxPackets, ipAlarmEntryTrapTimeticks=ipAlarmEntryTrapTimeticks, sessionDiscCauseCause=sessionDiscCauseCause, sessionStatusReverseCalledNumber=sessionStatusReverseCalledNumber, modemCallStatsTxMaxSpeed=modemCallStatsTxMaxSpeed, ss7TraceEntry=ss7TraceEntry, l2FTunnelStatusInactiveState=l2FTunnelStatusInactiveState, pppDeadSessionStatsRemoteAuthProtocol=pppDeadSessionStatsRemoteAuthProtocol, sessionStatusActiveModemSNR=sessionStatusActiveModemSNR, pbufStatsDataSize5=pbufStatsDataSize5, sessionStatusInactiveTxEndDataRate=sessionStatusInactiveTxEndDataRate, modemCallStatsNumberOfTXCharsMSB=modemCallStatsNumberOfTXCharsMSB, modemCallStatsModemIndex=modemCallStatsModemIndex, modemSessionStats2TDMSlot=modemSessionStats2TDMSlot, sessionStatusActiveDurationHMS=sessionStatusActiveDurationHMS, modemStatsECCalls=modemStatsECCalls, ss7TraceRelativeTimeStamp=ss7TraceRelativeTimeStamp, sessionStatusLayer2Slot=sessionStatusLayer2Slot, pppSessionStatsIPCPState=pppSessionStatsIPCPState, sessionSummaryInactiveFtp=sessionSummaryInactiveFtp, dacTraceType=dacTraceType, sessionVpopTable=sessionVpopTable, pppSessionStatsRemoteCompressHistories=pppSessionStatsRemoteCompressHistories, modemIntervalStatsDisabledCount=modemIntervalStatsDisabledCount, pppDeadSessionStatsLocalPFC=pppDeadSessionStatsLocalPFC, modemStatsStatsSamples=modemStatsStatsSamples, sessionStatusInactiveCleartcpRemotePort=sessionStatusInactiveCleartcpRemotePort, timerStatsActiveMax=timerStatsActiveMax, ipAlarmEntryTrapArg2=ipAlarmEntryTrapArg2, l2FLogEntryMinIndex=l2FLogEntryMinIndex, dvsStatusEntry=dvsStatusEntry, pppSummaryStatsLinksHDLC=pppSummaryStatsLinksHDLC, modemStatsInitialRxSum=modemStatsInitialRxSum, sessionStatusReverseModemDataCompression=sessionStatusReverseModemDataCompression, sessionStatusInactiveCleartcpRemoteIP=sessionStatusInactiveCleartcpRemoteIP, ds0StatsOutCleared=ds0StatsOutCleared, pppSessionStatsDNSAddress1=pppSessionStatsDNSAddress1, l2TPLinkStatusIndex=l2TPLinkStatusIndex, l2TPTunnelStatusActiveRemoteID=l2TPTunnelStatusActiveRemoteID, softwareVersionProductId=softwareVersionProductId, sessionStatusInactiveIop=sessionStatusInactiveIop, sessionSummaryInactiveRawTCP=sessionSummaryInactiveRawTCP, sessionStatusHistoryModemDataCompression=sessionStatusHistoryModemDataCompression, sessionVpopProtocol=sessionVpopProtocol, taskStatsTableGlobalPool=taskStatsTableGlobalPool, l2FTunnelStatusInactiveTable=l2FTunnelStatusInactiveTable, t1CountsEntry=t1CountsEntry, sessionStatusActiveVpopId=sessionStatusActiveVpopId, modemIntervalStatsOverallTotalCalls=modemIntervalStatsOverallTotalCalls, ipAlarmEntryTrapType=ipAlarmEntryTrapType, sessionStatusLocalIP=sessionStatusLocalIP, ipstatIgmpEntryIPAddrfrom=ipstatIgmpEntryIPAddrfrom, sessionStatusActivePacketsOut=sessionStatusActivePacketsOut, sessionStatusTerminatingComponent=sessionStatusTerminatingComponent, sessionStatusInactiveRxMinDataRate=sessionStatusInactiveRxMinDataRate, modemStatsLast32Auth=modemStatsLast32Auth, sessionSummaryActiveHub=sessionSummaryActiveHub, l2FLinkStatusSessionID=l2FLinkStatusSessionID, modemCallStatsSessionID=modemCallStatsSessionID, sessionStatusHistoryStopTime=sessionStatusHistoryStopTime, sessionStatusHistoryIndex=sessionStatusHistoryIndex, ss7StatusCallType=ss7StatusCallType, sessionStatusHistoryTerminationReason=sessionStatusHistoryTerminationReason, sessionSummaryMaximumUnknown=sessionSummaryMaximumUnknown, sessionStatusActiveName=sessionStatusActiveName, sessionStatusHistoryOctetsOut=sessionStatusHistoryOctetsOut, sessionStatusTerminationReason=sessionStatusTerminationReason, sessionMultilinkSessionId=sessionMultilinkSessionId, pppSessionStatsRxOverrunErrors=pppSessionStatsRxOverrunErrors, sessionSummaryMaximumFrameRelay=sessionSummaryMaximumFrameRelay, pppSessionStatsRemoteMRU=pppSessionStatsRemoteMRU, pppDeadSessionStatsMultilinkLinksRemoved=pppDeadSessionStatsMultilinkLinksRemoved, modemCallStatsTxFinalSpeed=modemCallStatsTxFinalSpeed, modemSummaryStatsTable=modemSummaryStatsTable, dvsStatusRemoteCLID=dvsStatusRemoteCLID, sessionStatusTunnelType=sessionStatusTunnelType, modemIntervalStatsConnectedCalls=modemIntervalStatsConnectedCalls, pbufStatsFreeMin2=pbufStatsFreeMin2, modemCallStatsLastEQMValue=modemCallStatsLastEQMValue, l2FTunnelStatusActiveRemoteAddress=l2FTunnelStatusActiveRemoteAddress, pppSummaryStatsMaxActiveLinks=pppSummaryStatsMaxActiveLinks, sessionStatusStopTime=sessionStatusStopTime, pppDeadSessionStatsLocalACCM=pppDeadSessionStatsLocalACCM, timerStatsFreeMin=timerStatsFreeMin, pppDeadSessionStatsLocalMRU=pppDeadSessionStatsLocalMRU, modemSummaryStatsK56Calls=modemSummaryStatsK56Calls)
mibBuilder.exportSymbols("APTIS-MONITOR-MIB", ipCleartcpStatsEntry=ipCleartcpStatsEntry, ds0StatsInConnected=ds0StatsInConnected, sessionStatusTxMinDataRate=sessionStatusTxMinDataRate, l2TPTunnelStatusInactiveRemoteAddress=l2TPTunnelStatusInactiveRemoteAddress, ipStubStatsEntry=ipStubStatsEntry, pppSessionStatsCCPResetsReceived=pppSessionStatsCCPResetsReceived, softwareVersionMibRevision=softwareVersionMibRevision, taskStatsTableStackAddress10=taskStatsTableStackAddress10, modemCallStatsLastReceiveState=modemCallStatsLastReceiveState, pppDeadSessionStatsLocalAuthProtocol=pppDeadSessionStatsLocalAuthProtocol, e1StatsAlarmStatus=e1StatsAlarmStatus, sessionSummaryActiveOther=sessionSummaryActiveOther, PYSNMP_MODULE_ID=aptisMonitorModule, pppDeadSessionStatsRemoteAuthenticated=pppDeadSessionStatsRemoteAuthenticated, pppDeadSessionStatsRxResourceErrors=pppDeadSessionStatsRxResourceErrors, pbufStatsAllocSuccesses3=pbufStatsAllocSuccesses3, modemCallStatsConnectTimeMinutes=modemCallStatsConnectTimeMinutes, pbufStatsFreeCount2=pbufStatsFreeCount2, dvsStatusDeadGreInPackets=dvsStatusDeadGreInPackets, sessionStatusReverseTandemPort=sessionStatusReverseTandemPort, l2FTunnelStatusActiveLinksAddedUnsuccessfully=l2FTunnelStatusActiveLinksAddedUnsuccessfully, sessionStatusHistoryRxMinDataRate=sessionStatusHistoryRxMinDataRate, sessionMultilinkUserName=sessionMultilinkUserName, sessionStatusMultiLinkId=sessionStatusMultiLinkId, taskStatsTableKernelPool=taskStatsTableKernelPool, sessionStatusInactiveDuration=sessionStatusInactiveDuration, ds0StatsLineNumber=ds0StatsLineNumber, modemIntervalStatsV90Calls=modemIntervalStatsV90Calls, ss7StatusCallingId=ss7StatusCallingId, pbufStatsAllocatedCount0=pbufStatsAllocatedCount0, taskStatsTableStackAddress3=taskStatsTableStackAddress3, pppSessionStatsIPXCPState=pppSessionStatsIPXCPState, ipAlarmEntryTable=ipAlarmEntryTable, pppSessionStatsTxBytesUncompressed=pppSessionStatsTxBytesUncompressed, e1StatsSlotIndex=e1StatsSlotIndex, pppDeadSessionStatsTotalTxSpeed=pppDeadSessionStatsTotalTxSpeed, memoryStatsTableFreeLargestBlock=memoryStatsTableFreeLargestBlock, ipSvcMonitoringRequestsIn=ipSvcMonitoringRequestsIn, pppSessionStatsRemoteACCM=pppSessionStatsRemoteACCM, sessionSummaryInactiveSlip=sessionSummaryInactiveSlip, ipStubStatsIgmpInQueries=ipStubStatsIgmpInQueries, modemCallStatsV8Progress=modemCallStatsV8Progress, modemSummaryStatsDisabledCount=modemSummaryStatsDisabledCount, sessionStatusReverseTerminatingComponent=sessionStatusReverseTerminatingComponent, slotStatusNewSlotType=slotStatusNewSlotType, l2FTunnelStatusInactiveActiveLinks=l2FTunnelStatusInactiveActiveLinks, l2TPTunnelStatusInactiveLocalID=l2TPTunnelStatusInactiveLocalID, dvsStatusGreInPackets=dvsStatusGreInPackets, sessionStatusActiveModemDataCompression=sessionStatusActiveModemDataCompression, pbufStatsAllocSuccesses5=pbufStatsAllocSuccesses5, sessionStatusRemoteIPXNode=sessionStatusRemoteIPXNode, pbufStatsCardType=pbufStatsCardType, dvsDeadLogEntryMinIndex=dvsDeadLogEntryMinIndex, sessionStatusDmm=sessionStatusDmm, slotStatusNewSlotOos=slotStatusNewSlotOos, sessionStatusTable=sessionStatusTable, sessionStatusReverseRemoteIPXNode=sessionStatusReverseRemoteIPXNode, modemCallStatsSlotIndex=modemCallStatsSlotIndex, sessionStatusReverseOriginateMode=sessionStatusReverseOriginateMode, sessionStatusInactiveModemSNR=sessionStatusInactiveModemSNR, sessionStatusTimeOfService=sessionStatusTimeOfService, modemStatsMinTxSum=modemStatsMinTxSum, pppDeadSessionStatsRemoteIPAddress=pppDeadSessionStatsRemoteIPAddress, sessionCountersInactiveHighest=sessionCountersInactiveHighest, modemCallStatsDataIsValid=modemCallStatsDataIsValid, pppSessionStatsLocalMRRU=pppSessionStatsLocalMRRU, modemCallStatsRemoteRateRenegs=modemCallStatsRemoteRateRenegs, modemStatsDMM=modemStatsDMM, modemStatsModem=modemStatsModem, modemCallStatsRBSPattern=modemCallStatsRBSPattern, ss7StatusReversePort=ss7StatusReversePort, modemIntervalStatsDCCalls=modemIntervalStatsDCCalls, sessionStatusInactiveRemoteIP=sessionStatusInactiveRemoteIP, modemStatsDCCalls=modemStatsDCCalls, sessionStatusTandemPort=sessionStatusTandemPort, modemSessionStatsDataValidity=modemSessionStatsDataValidity, dvsStatusDeadTunnelCLID=dvsStatusDeadTunnelCLID, iSDNLayer2StatsLapdRcvdFrmr=iSDNLayer2StatsLapdRcvdFrmr, ss7StatusTimeSlot=ss7StatusTimeSlot, pppSessionStatsLocalMRU=pppSessionStatsLocalMRU, sessionStatusInactiveLinkCount=sessionStatusInactiveLinkCount, sessionSlotsSlot10Count=sessionSlotsSlot10Count, modemSummaryStatsDeadCount=modemSummaryStatsDeadCount, modemStatsTable=modemStatsTable, pppDeadSessionStatsTable=pppDeadSessionStatsTable, pppDeadSessionStatsLocalVJ=pppDeadSessionStatsLocalVJ, sessionSlotsSlot1Count=sessionSlotsSlot1Count, sessionStatusStartTime=sessionStatusStartTime, sessionStatusPort=sessionStatusPort, sessionSlotsSlot9Count=sessionSlotsSlot9Count, ss7StatusIndex=ss7StatusIndex, slotStatusServiceModule=slotStatusServiceModule, sessionComponentsTable=sessionComponentsTable, slotStatusSlotStatus=slotStatusSlotStatus, modemCallStatsWAStatus=modemCallStatsWAStatus, l2FLinkStatusTable=l2FLinkStatusTable, pppSessionStatsMLPPacketsReassembled=pppSessionStatsMLPPacketsReassembled, sessionMultilinkMyShortSequence=sessionMultilinkMyShortSequence, modemCallStatsMaxAGCGainValue=modemCallStatsMaxAGCGainValue, l2TPTunnelStatusInactiveRemoteID=l2TPTunnelStatusInactiveRemoteID, ipSvcMonitoringResponsesOut=ipSvcMonitoringResponsesOut, sessionStatusActiveIop=sessionStatusActiveIop, pbufStatsFreeFails5=pbufStatsFreeFails5, sessionStatusActiveModemReceiveLineLevel=sessionStatusActiveModemReceiveLineLevel, memoryStatsTableTotalSize=memoryStatsTableTotalSize, t1SummaryStatsSlotIndex=t1SummaryStatsSlotIndex, sessionSlotsSlot18Count=sessionSlotsSlot18Count, ss7TraceSs7Index=ss7TraceSs7Index, l2FTunnelStatusActiveL2FTermationCause=l2FTunnelStatusActiveL2FTermationCause, pppDeadSessionStatsLocalCompressHistories=pppDeadSessionStatsLocalCompressHistories, sessionStatusPacketsIn=sessionStatusPacketsIn, sessionVpopCurrentCount=sessionVpopCurrentCount, modemSummaryStatsTotalCalls=modemSummaryStatsTotalCalls, pbufStatsAllocatedCount1=pbufStatsAllocatedCount1, sessionSummaryMaximumNone=sessionSummaryMaximumNone, sessionStatusModemRemoteRenegotiations=sessionStatusModemRemoteRenegotiations, sessionStatusInactiveVpopId=sessionStatusInactiveVpopId, modemCallStatsRetrainReason=modemCallStatsRetrainReason, pppDeadSessionStatsTxPackets=pppDeadSessionStatsTxPackets, sessionSummaryInactiveTandem=sessionSummaryInactiveTandem, timerStatsFreeSuccesses=timerStatsFreeSuccesses, t3StatsExternalClockPort=t3StatsExternalClockPort, ipStubStatsIgmpInErrors=ipStubStatsIgmpInErrors, modemCallStatsTxLevel=modemCallStatsTxLevel, sessionStatusActiveDevice=sessionStatusActiveDevice, modemCallStatsLocalRetrains=modemCallStatsLocalRetrains, iSDNHDLCFrameMaxIndex=iSDNHDLCFrameMaxIndex, pppLogEntrySessionId=pppLogEntrySessionId, ipdcTraceDirection=ipdcTraceDirection, modemCallStatsNumberOfTXChars3rdByte=modemCallStatsNumberOfTXChars3rdByte, sessionStatusServiceMode=sessionStatusServiceMode, ss7StatusCalledId=ss7StatusCalledId, sessionStatusOctetsIn=sessionStatusOctetsIn, pppDeadSessionStatsTxBytes=pppDeadSessionStatsTxBytes, sessionStatusActiveTimeOfModemSync=sessionStatusActiveTimeOfModemSync, sessionStatusInactiveRemoteIPXNode=sessionStatusInactiveRemoteIPXNode, t3StatsDs1Count=t3StatsDs1Count, t1CountsOutgoingConnects=t1CountsOutgoingConnects, pppDeadSessionStatsTxQueueErrors=pppDeadSessionStatsTxQueueErrors, ipSvcMonitoringUptime=ipSvcMonitoringUptime, t1SummaryStatsLineNumber=t1SummaryStatsLineNumber, e1SummaryStatsEntry=e1SummaryStatsEntry, modemCallStatsTable=modemCallStatsTable, ipCleartcpStatsOutputQfull=ipCleartcpStatsOutputQfull, sessionSummaryActiveL2f=sessionSummaryActiveL2f, sessionStatusModemNumber=sessionStatusModemNumber, ipAlarmEntryAlarmType=ipAlarmEntryAlarmType, sessionStatusInactiveTandemTimeslot=sessionStatusInactiveTandemTimeslot, modemCallStatsNumberOfRXChars3rdByte=modemCallStatsNumberOfRXChars3rdByte, modemStatsSlot=modemStatsSlot, modemStatsPackRevivals=modemStatsPackRevivals, modemSessionStatsSlotNumber=modemSessionStatsSlotNumber, dacTraceTable=dacTraceTable, pppDeadSessionStatsTxBytesUncompressed=pppDeadSessionStatsTxBytesUncompressed, slotStatusTemperature=slotStatusTemperature, dvsStatusGreInDropped=dvsStatusGreInDropped, ipStubStatsIgmpInMsgs=ipStubStatsIgmpInMsgs, l2FTunnelStatusInactiveGotOpened=l2FTunnelStatusInactiveGotOpened, ipSvcMonitoringResponsesInError=ipSvcMonitoringResponsesInError, iSDNHDLCFrameNextIndex=iSDNHDLCFrameNextIndex, modemStatsMaxRxSum=modemStatsMaxRxSum, modemCallStatsConnectTimeSeconds=modemCallStatsConnectTimeSeconds, sessionStatusHistoryTimeOfService=sessionStatusHistoryTimeOfService, modemSummaryStatsUpTime=modemSummaryStatsUpTime, sessionStatusHistoryPermanentFlag=sessionStatusHistoryPermanentFlag, l2FTunnelStatusInactiveL2FTermationCause=l2FTunnelStatusInactiveL2FTermationCause, pppSessionStatsTxSpeed=pppSessionStatsTxSpeed, sessionStatusHistoryModemTxBlocks=sessionStatusHistoryModemTxBlocks, systemTimeFixedBootTime=systemTimeFixedBootTime, pppSessionStatsLocalACCM=pppSessionStatsLocalACCM, sessionStatusActiveStartTime=sessionStatusActiveStartTime, modemSummaryStatsAuthCalls=modemSummaryStatsAuthCalls, sessionSummaryInactiveNone=sessionSummaryInactiveNone, sessionSlotsSlot14Count=sessionSlotsSlot14Count, softwareVersionTable=softwareVersionTable, sessionStatusReverseServiceMode=sessionStatusReverseServiceMode, sessionTraceIndex=sessionTraceIndex, pbufStatsFreeSuccesses5=pbufStatsFreeSuccesses5, modemStatsResetFailures=modemStatsResetFailures, sessionStatusInactiveModemLocalRenegotiations=sessionStatusInactiveModemLocalRenegotiations, modemCallStatsMaxTxRetransmissions=modemCallStatsMaxTxRetransmissions, sessionCountersTable=sessionCountersTable, sessionStatusReversePermanentFlag=sessionStatusReversePermanentFlag, sessionSummaryInactiveL2f=sessionSummaryInactiveL2f, dvsStatusDeadGreOutPackets=dvsStatusDeadGreOutPackets, sessionStatusActiveCallClassLen=sessionStatusActiveCallClassLen, taskStatsTableStackAddress9=taskStatsTableStackAddress9, sessionStatusReverseSessionID=sessionStatusReverseSessionID, slotStatusNewReworkRev=slotStatusNewReworkRev, sessionStatusActiveEntry=sessionStatusActiveEntry, dacStatusClockSourcePrimary=dacStatusClockSourcePrimary, sessionStatusTxMaxDataRate=sessionStatusTxMaxDataRate, ss7StatusReverseTable=ss7StatusReverseTable, l2TPLinkStatusUpTime=l2TPLinkStatusUpTime, sessionStatusReverseLayer1Slot=sessionStatusReverseLayer1Slot, pppLogEntryEntry=pppLogEntryEntry, modemStatsFinalRxSum=modemStatsFinalRxSum, sessionStatusInactiveActualAuthMethod=sessionStatusInactiveActualAuthMethod, pppSessionStatsLocalIPAddress=pppSessionStatsLocalIPAddress, powerStatusCsr1Register=powerStatusCsr1Register, sessionStatusActiveTunnelType=sessionStatusActiveTunnelType, powerStatusInternalACDC2=powerStatusInternalACDC2, powerStatusEntry=powerStatusEntry, modemCallStatsEQMSumMiddle=modemCallStatsEQMSumMiddle, pppSessionStatsEntry=pppSessionStatsEntry, sessionSummaryInactiveDvs=sessionSummaryInactiveDvs, pbufStatsAllocFails5=pbufStatsAllocFails5, modemSessionStatsPackNumber=modemSessionStatsPackNumber, modemCallStatsV90DigitalPadHigh=modemCallStatsV90DigitalPadHigh, modemSummaryStatsIdleCount=modemSummaryStatsIdleCount, memoryStatsTableAllocFails=memoryStatsTableAllocFails, slotStatusNewSlotSerialNumber=slotStatusNewSlotSerialNumber, pppSessionStatsSessionID=pppSessionStatsSessionID, pbufStatsAllocSuccesses4=pbufStatsAllocSuccesses4, pppDeadSessionStatsTxBytesAfterCompress=pppDeadSessionStatsTxBytesAfterCompress, sessionStatusActiveModemNumber=sessionStatusActiveModemNumber, pppSessionStatsInterfaceType=pppSessionStatsInterfaceType, modemSessionStats2SlotNumber=modemSessionStats2SlotNumber, sessionStatusInactiveTxMinDataRate=sessionStatusInactiveTxMinDataRate, sessionStatusOriginateMode=sessionStatusOriginateMode, l2FTunnelStatusActiveLinksAdded=l2FTunnelStatusActiveLinksAdded, sessionStatusEntry=sessionStatusEntry, sessionStatusReversePort=sessionStatusReversePort, t1CountsIncomingConnects=t1CountsIncomingConnects, memoryStatsTableAllocSuccesses=memoryStatsTableAllocSuccesses, pppSessionStatsMultilinkActive=pppSessionStatsMultilinkActive, sessionStatusReverseTunnelServerAddress=sessionStatusReverseTunnelServerAddress, sessionStatusActiveTerminationReason=sessionStatusActiveTerminationReason, sessionSummaryMaximumL2f=sessionSummaryMaximumL2f, sessionStatusVpopId=sessionStatusVpopId, sessionStatusInactiveLastComponent=sessionStatusInactiveLastComponent, ss7StatusReverseIndex=ss7StatusReverseIndex, slotStatusNewProductCode=slotStatusNewProductCode, modemCallStatsLocalRateRenegs=modemCallStatsLocalRateRenegs, ipstatRouteEntryEntry=ipstatRouteEntryEntry, pppDeadSessionStatsCCPResetsSent=pppDeadSessionStatsCCPResetsSent, sessionStatusReverseTunnelMediumType=sessionStatusReverseTunnelMediumType, l2TPLinkStatusVPOP=l2TPLinkStatusVPOP, t1CountsChannelCount=t1CountsChannelCount, sessionStatusInactiveTxStartDataRate=sessionStatusInactiveTxStartDataRate, sessionStatusReverseTxMaxDataRate=sessionStatusReverseTxMaxDataRate, ipstatRouteEntryTable=ipstatRouteEntryTable, dvsDeadLogEntryMaxIndex=dvsDeadLogEntryMaxIndex, sessionStatusActiveTxEndDataRate=sessionStatusActiveTxEndDataRate, taskStatsTableSlotNumber=taskStatsTableSlotNumber, slotStatusSlotOos=slotStatusSlotOos, sessionSummaryMaximumRawTCP=sessionSummaryMaximumRawTCP, sessionStatusReverseModemModulation=sessionStatusReverseModemModulation, sessionDiscCauseCount=sessionDiscCauseCount, slotStatusLineTerminationModule=slotStatusLineTerminationModule, t1SummaryStatsTable=t1SummaryStatsTable, modemSessionStatsConnectString=modemSessionStatsConnectString, modemStatsV34Calls=modemStatsV34Calls, sessionStatusInactiveTdmTimeSlot=sessionStatusInactiveTdmTimeSlot)
mibBuilder.exportSymbols("APTIS-MONITOR-MIB", sessionStatusInactiveOctetsIn=sessionStatusInactiveOctetsIn, modemIntervalStatsNoDownloadCount=modemIntervalStatsNoDownloadCount, t1SummaryStatsConnectedChannels=t1SummaryStatsConnectedChannels, modemSessionStats2ModemIndex=modemSessionStats2ModemIndex, clockStatusCurrentSource=clockStatusCurrentSource, pppSessionStatsUpTime=pppSessionStatsUpTime, ipsecCountersOutboundCounter=ipsecCountersOutboundCounter, taskStatsTableStackAddress8=taskStatsTableStackAddress8, sessionSlotsSlot13Count=sessionSlotsSlot13Count, pppDeadSessionStatsRxBytesBeforeCompress=pppDeadSessionStatsRxBytesBeforeCompress, pbufStatsFreeFails1=pbufStatsFreeFails1, sessionStatusReverseTxMinDataRate=sessionStatusReverseTxMinDataRate, sessionStatusHistoryTandemTimeslot=sessionStatusHistoryTandemTimeslot, sessionStatusInactiveModemModulation=sessionStatusInactiveModemModulation, taskStatsTableTicksPerSecond=taskStatsTableTicksPerSecond, modemCallStatsRBSRateDrop=modemCallStatsRBSRateDrop, ipAlarmEntryTrapArg1=ipAlarmEntryTrapArg1, sessionStatusHistoryRxEndDataRate=sessionStatusHistoryRxEndDataRate, dvsStatusLocalAddress=dvsStatusLocalAddress, sessionSummaryActiveDvs=sessionSummaryActiveDvs, pppDeadSessionStatsLocalIPAddress=pppDeadSessionStatsLocalIPAddress, l2FTunnelStatusActiveEntry=l2FTunnelStatusActiveEntry, modemCallStatsNumberOfRXBlocksHigh=modemCallStatsNumberOfRXBlocksHigh, pppDeadSessionStatsTxSpeed=pppDeadSessionStatsTxSpeed, ss7CountersDsmccFree=ss7CountersDsmccFree, t1StatsEntry=t1StatsEntry, l2TPLinkStatusTxPackets=l2TPLinkStatusTxPackets, e1CountsIncomingDisconnects=e1CountsIncomingDisconnects, sessionSummaryActiveTelnet=sessionSummaryActiveTelnet, sessionSummaryInactiveAtmp=sessionSummaryInactiveAtmp, modemCallStatsTxNonlinearEncoding=modemCallStatsTxNonlinearEncoding, timerStatsAllocSuccesses=timerStatsAllocSuccesses, l2TPTunnelStatusActiveL2TPTermationCause=l2TPTunnelStatusActiveL2TPTermationCause, modemCallStatsRxMPSequenceByte2High=modemCallStatsRxMPSequenceByte2High, ipStubStatsNomemoryOut=ipStubStatsNomemoryOut, pbufStatsDataSize4=pbufStatsDataSize4, pbufStatsAllocatedMax1=pbufStatsAllocatedMax1, l2TPTunnelStatusActiveLocalID=l2TPTunnelStatusActiveLocalID, t1SummaryStatsIdleChannels=t1SummaryStatsIdleChannels, sessionSummaryInactiveCiscoHDLC=sessionSummaryInactiveCiscoHDLC, sessionStatusReverseModemLocalRenegotiations=sessionStatusReverseModemLocalRenegotiations, pppLogEntryIndex=pppLogEntryIndex, dacClockingClockSourceSecondary=dacClockingClockSourceSecondary, sessionStatusReverseDurationHMS=sessionStatusReverseDurationHMS, sessionStatusActiveRxMinDataRate=sessionStatusActiveRxMinDataRate, l2FLinkStatusEntry=l2FLinkStatusEntry, pbufStatsFreeSuccesses1=pbufStatsFreeSuccesses1, sessionStatusActiveActualAuthMethod=sessionStatusActiveActualAuthMethod, l2FTunnelStatusActiveActiveLinks=l2FTunnelStatusActiveActiveLinks, pppDeadSessionStatsLocalCompressAlgorithm=pppDeadSessionStatsLocalCompressAlgorithm, modemStatsEntry=modemStatsEntry, pppSessionStatsLocalVJSlots=pppSessionStatsLocalVJSlots, sessionStatusModemRemoteRetrains=sessionStatusModemRemoteRetrains, sessionSummaryMaximumL2tp=sessionSummaryMaximumL2tp, modemSessionStats2PackNumber=modemSessionStats2PackNumber, sessionStatusActiveModemLocalRenegotiations=sessionStatusActiveModemLocalRenegotiations, l2FTunnelStatusActiveTable=l2FTunnelStatusActiveTable, l2TPTunnelStatusInactiveMaxActiveLinks=l2TPTunnelStatusInactiveMaxActiveLinks, pppDeadSessionStatsMultilinkLinksMaxConfig=pppDeadSessionStatsMultilinkLinksMaxConfig, pppLogEntryEntryText=pppLogEntryEntryText, ipstatRouteEntryTYPE=ipstatRouteEntryTYPE, sessionStatusActiveCallClass=sessionStatusActiveCallClass, pppDeadSessionStatsRxPacketsDropped=pppDeadSessionStatsRxPacketsDropped, pppSummaryStatsLinksNegotiatedIPXCP=pppSummaryStatsLinksNegotiatedIPXCP, modemSessionStatsEntry=modemSessionStatsEntry, l2FTunnelStatusInactiveMaxActiveLinks=l2FTunnelStatusInactiveMaxActiveLinks, pppSummaryStatsLinksModem=pppSummaryStatsLinksModem, l2TPTunnelStatusActiveTable=l2TPTunnelStatusActiveTable, dvsLogEntryUpTime=dvsLogEntryUpTime, modemSummaryStatsMaximumCalls=modemSummaryStatsMaximumCalls, taskStatsTableIdleMinute=taskStatsTableIdleMinute, modemStatsState=modemStatsState, modemCallStatsTxCarrierFrequency=modemCallStatsTxCarrierFrequency, pppDeadLogEntryEntryText=pppDeadLogEntryEntryText, sessionStatusHistoryLocalIP=sessionStatusHistoryLocalIP, pbufStatsAllocSuccesses1=pbufStatsAllocSuccesses1, sessionStatusSs7SessionId=sessionStatusSs7SessionId, mamLogEntryTable=mamLogEntryTable, systemSummaryEntry=systemSummaryEntry, modemCallStatsNumberOfLAPMREJSReceived=modemCallStatsNumberOfLAPMREJSReceived, sessionStatusHistoryStartTime=sessionStatusHistoryStartTime, modemCallStatsRxCarrierFrequency=modemCallStatsRxCarrierFrequency, sessionStatusReverseOctetsIn=sessionStatusReverseOctetsIn, sessionSummaryInactiveUnknown=sessionSummaryInactiveUnknown, modemStatsTotalCalls=modemStatsTotalCalls, pppDeadSessionStatsNBNSAddress2=pppDeadSessionStatsNBNSAddress2, pppLogEntryTable=pppLogEntryTable, sessionSummaryActiveTerminalServer=sessionSummaryActiveTerminalServer, ipstatRouteEntryOwner=ipstatRouteEntryOwner, sessionSummaryInactiveTerminalServer=sessionSummaryInactiveTerminalServer, sessionStatusActiveTunnelId=sessionStatusActiveTunnelId, modemStatsResetRevivals=modemStatsResetRevivals, ipSvcMonitoringTable=ipSvcMonitoringTable, sessionStatusActualAuthMethod=sessionStatusActualAuthMethod, pppDeadSessionStatsRemoteMRU=pppDeadSessionStatsRemoteMRU, sessionStatusReverseModemRemoteRetrains=sessionStatusReverseModemRemoteRetrains, sessionVpopCallType=sessionVpopCallType, modemCallStatsMinSNRValue=modemCallStatsMinSNRValue, sessionStatusReverseStartTime=sessionStatusReverseStartTime, sessionStatusCallClassArray=sessionStatusCallClassArray, pppDeadSessionStatsRemainingTime=pppDeadSessionStatsRemainingTime, ipstatIgmpEntryCount=ipstatIgmpEntryCount, t1CountsIncomingCallAttempts=t1CountsIncomingCallAttempts, systemTimeUTCOffset=systemTimeUTCOffset, modemSessionStatsInitialTxSpeed=modemSessionStatsInitialTxSpeed, l2FLogEntryEntryText=l2FLogEntryEntryText, modemSessionStatsTDMSlot=modemSessionStatsTDMSlot, cHdlcStatsKeepalivesIn=cHdlcStatsKeepalivesIn, modemIntervalStatsModemCount=modemIntervalStatsModemCount, l2TPTunnelStatusInactiveLinksRemoved=l2TPTunnelStatusInactiveLinksRemoved, modemCallStatsRoundTripTime=modemCallStatsRoundTripTime, dacTraceLen=dacTraceLen, pppDeadSessionStatsTxBigErrors=pppDeadSessionStatsTxBigErrors, taskStatsTableTaskIndex=taskStatsTableTaskIndex, dacClockingClockSourcePrimary=dacClockingClockSourcePrimary, pppDeadSessionStatsRemoteCompressHistories=pppDeadSessionStatsRemoteCompressHistories, modemSessionStats2InitialRxSpeed=modemSessionStats2InitialRxSpeed, modemCallStatsEQM7Seconds=modemCallStatsEQM7Seconds, sessionStatusName=sessionStatusName, ipstatRouteEntryPathType=ipstatRouteEntryPathType, pppDeadSessionStatsTxPacketsDropped=pppDeadSessionStatsTxPacketsDropped, pppDeadSessionStatsDNSAddress2=pppDeadSessionStatsDNSAddress2, modemCallStatsNumberOfRXChars2ndByte=modemCallStatsNumberOfRXChars2ndByte, taskStatsTableTCB=taskStatsTableTCB, t1StatsTable=t1StatsTable, sessionStatusHistoryCleartcpRemoteIP=sessionStatusHistoryCleartcpRemoteIP, l2TPLinkStatusTxBytes=l2TPLinkStatusTxBytes, sessionStatusInactiveState=sessionStatusInactiveState, ss7StatusEntry=ss7StatusEntry, dvsLogEntryMinIndex=dvsLogEntryMinIndex, pppSessionStatsInactivityLimit=pppSessionStatsInactivityLimit, pppDeadSessionStatsMLPFragmentsMissing=pppDeadSessionStatsMLPFragmentsMissing, modemCallStatsNumberOfRXCharsLSB=modemCallStatsNumberOfRXCharsLSB, t1CountsIncomingDisconnects=t1CountsIncomingDisconnects, sessionSummaryMaximumFtp=sessionSummaryMaximumFtp, pppSummaryStatsTable=pppSummaryStatsTable, sessionSlotsSlot8Count=sessionSlotsSlot8Count, ss7StatusReverseServerId=ss7StatusReverseServerId, pbufStatsFreeFails3=pbufStatsFreeFails3, dvsDeadLogEntryTunnelCLID=dvsDeadLogEntryTunnelCLID, sessionStatusActivePermanentFlag=sessionStatusActivePermanentFlag, modemCallStatsK56Status=modemCallStatsK56Status, modemCallStatsInitialModulationType=modemCallStatsInitialModulationType, modemSessionStats2DataValidity=modemSessionStats2DataValidity, dacTraceLocation=dacTraceLocation, sessionStatusHistoryCallClassLen=sessionStatusHistoryCallClassLen, modemCallStatsNumberOfTXChars2ndByte=modemCallStatsNumberOfTXChars2ndByte, timerStatsEntry=timerStatsEntry, pbufStatsFreeMin5=pbufStatsFreeMin5, modemStatsLast32Calls=modemStatsLast32Calls, ss7StatusReverseCallingId=ss7StatusReverseCallingId, ss7CountersOneshotFull=ss7CountersOneshotFull, t1SummaryStatsClearingChannels=t1SummaryStatsClearingChannels, sessionStatusHistoryTunnelServerAddress=sessionStatusHistoryTunnelServerAddress, modemCallStatsEQM2Seconds=modemCallStatsEQM2Seconds, modemIntervalStatsRemovedCount=modemIntervalStatsRemovedCount, ipdcTraceMsgSize=ipdcTraceMsgSize, sessionComponentsComponentType=sessionComponentsComponentType, sessionStatusReverseModemSNR=sessionStatusReverseModemSNR, l2FTunnelStatusInactiveLinksAddedSuccessfully=l2FTunnelStatusInactiveLinksAddedSuccessfully, sessionStatusReverseModemErrorCorrection=sessionStatusReverseModemErrorCorrection, sessionStatusHistoryLinkService=sessionStatusHistoryLinkService, pppSessionStatsRxPackets=pppSessionStatsRxPackets, sessionStatusHistoryPort=sessionStatusHistoryPort, slotStatusEntry=slotStatusEntry, l2TPLinkStatusL2TPTermationCause=l2TPLinkStatusL2TPTermationCause, cHdlcStatsUnknownFramesIn=cHdlcStatsUnknownFramesIn, e1SummaryStatsClearingChannels=e1SummaryStatsClearingChannels, sessionVpopCumulativeDuration=sessionVpopCumulativeDuration, sessionMultilinkMyMRRU=sessionMultilinkMyMRRU, sessionSlotsSlot6Count=sessionSlotsSlot6Count, slotStatusSystemMem=slotStatusSystemMem, pppDeadSessionStatsDNSAddress1=pppDeadSessionStatsDNSAddress1, sessionStatusTxStartDataRate=sessionStatusTxStartDataRate, l2FTunnelStatusActiveRemoteCLID=l2FTunnelStatusActiveRemoteCLID, sessionStatusActiveRemoteIP=sessionStatusActiveRemoteIP, dvsStatusDeadTunnelState=dvsStatusDeadTunnelState, modemStatsV90Calls=modemStatsV90Calls, memoryStatsTableUsedBlockCount=memoryStatsTableUsedBlockCount, sessionSlotsSlot16Count=sessionSlotsSlot16Count, memoryStatsTableFreeSmallestBlock=memoryStatsTableFreeSmallestBlock, modemCallStatsUpperBandEdge=modemCallStatsUpperBandEdge, ipstatRouteEntryGenNumber=ipstatRouteEntryGenNumber, pppLogEntryMinIndex=pppLogEntryMinIndex, modemCallStatsMaxSNRValue=modemCallStatsMaxSNRValue, ipsecCountersInboundDropCounter=ipsecCountersInboundDropCounter, l2FTunnelStatusActiveUpTime=l2FTunnelStatusActiveUpTime, l2FTunnelStatusInactiveEntry=l2FTunnelStatusInactiveEntry, sessionStatusActiveLinkService=sessionStatusActiveLinkService, sessionStatusReverseTimeOfService=sessionStatusReverseTimeOfService, sessionSlotsSlot5Count=sessionSlotsSlot5Count, modemSessionStatsTable=modemSessionStatsTable, ss7StatusSessionId=ss7StatusSessionId, l2FLogEntryLocalCLID=l2FLogEntryLocalCLID, ss7StatusPort=ss7StatusPort, pppSessionStatsRemoteVJ=pppSessionStatsRemoteVJ, sessionStatusActiveLayer1Slot=sessionStatusActiveLayer1Slot, pppDeadSessionStatsUserName=pppDeadSessionStatsUserName, sessionStatusRemoteIPMask=sessionStatusRemoteIPMask, sessionStatusInactiveRemoteIPMask=sessionStatusInactiveRemoteIPMask, modemCallStatsRxInitialSpeed=modemCallStatsRxInitialSpeed, l2FTunnelStatusInactiveLocalAddress=l2FTunnelStatusInactiveLocalAddress, l2FLinkStatusRxBytes=l2FLinkStatusRxBytes, modemSummaryStatsRemovedCount=modemSummaryStatsRemovedCount, pbufStatsSlotNumber=pbufStatsSlotNumber, ss7CountersNumActive=ss7CountersNumActive, sessionStatusReverseName=sessionStatusReverseName, sessionSummaryActiveAtmp=sessionSummaryActiveAtmp, l2TPTunnelStatusInactivePendingLinks=l2TPTunnelStatusInactivePendingLinks, sessionStatusActiveTdmStream=sessionStatusActiveTdmStream, modemCallStatsRxMPSequenceByte2Low=modemCallStatsRxMPSequenceByte2Low, sessionStatusPacketsOut=sessionStatusPacketsOut, sessionSummaryActiveVoice=sessionSummaryActiveVoice, sessionStatusReverseTdmStream=sessionStatusReverseTdmStream, ss7CountersRetainedFree=ss7CountersRetainedFree, sessionStatusActiveLastComponent=sessionStatusActiveLastComponent, t1StatsLineNumber=t1StatsLineNumber, ipsecCountersEntry=ipsecCountersEntry, sessionStatusActiveLinkCount=sessionStatusActiveLinkCount, l2FLinkStatusTxBytes=l2FLinkStatusTxBytes, sessionStatusActiveModemModulation=sessionStatusActiveModemModulation, timerStatsTable=timerStatsTable, ss7StatusReverseNetworkId=ss7StatusReverseNetworkId, modemSummaryStatsDownloadingCount=modemSummaryStatsDownloadingCount, modemCallStatsEQMSumLow=modemCallStatsEQMSumLow, sessionTraceAbsoluteTimeStamp=sessionTraceAbsoluteTimeStamp, pppSessionStatsRxBytesUncompressed=pppSessionStatsRxBytesUncompressed, modemCallStatsEntry=modemCallStatsEntry, sessionStatusActiveModemTxBlocks=sessionStatusActiveModemTxBlocks, iSDNHDLCFrameTimestamp=iSDNHDLCFrameTimestamp, modemSummaryStatsNoDownloadCount=modemSummaryStatsNoDownloadCount, sessionStatusRxEndDataRate=sessionStatusRxEndDataRate, sessionStatusHistoryModemLocalRenegotiations=sessionStatusHistoryModemLocalRenegotiations, dvsDeadLogEntryEntry=dvsDeadLogEntryEntry, l2TPLinkStatusRxPackets=l2TPLinkStatusRxPackets, pppDeadLogEntryIndex=pppDeadLogEntryIndex, sessionStatusInactiveModemErrorCorrection=sessionStatusInactiveModemErrorCorrection, dvsStatusVPOP=dvsStatusVPOP, sessionStatusInactiveRemoteIPXNetwork=sessionStatusInactiveRemoteIPXNetwork, dvsStatusDeadVPOP=dvsStatusDeadVPOP, modemStatsMinTxSpeed=modemStatsMinTxSpeed, modemCallStatsMaxEQMValue=modemCallStatsMaxEQMValue, l2TPTunnelStatusInactiveSlot=l2TPTunnelStatusInactiveSlot, modemCallStatsConnectTimeHours=modemCallStatsConnectTimeHours, sessionStatusCalledNumber=sessionStatusCalledNumber, pppSessionStatsMultilinkLinks=pppSessionStatsMultilinkLinks, sessionStatusHistoryOctetsIn=sessionStatusHistoryOctetsIn, pppSessionStatsRxCompPacketsDropped=pppSessionStatsRxCompPacketsDropped, sessionStatusHistoryModemLocalRetrains=sessionStatusHistoryModemLocalRetrains, pbufStatsEntry=pbufStatsEntry, pppDeadSessionStatsRemoteVJSlots=pppDeadSessionStatsRemoteVJSlots, sessionStatusInactiveStartTime=sessionStatusInactiveStartTime, e1SummaryStatsSlotIndex=e1SummaryStatsSlotIndex, sessionStatusReverseRemoteIPXNetwork=sessionStatusReverseRemoteIPXNetwork)
mibBuilder.exportSymbols("APTIS-MONITOR-MIB", l2TPTunnelStatusActiveLinksAdded=l2TPTunnelStatusActiveLinksAdded, sessionSummaryActiveRawTCP=sessionSummaryActiveRawTCP, sessionSummaryActiveFrameRelay=sessionSummaryActiveFrameRelay, pppSessionStatsNBNSAddress1=pppSessionStatsNBNSAddress1, memoryStatsTableUsedSize=memoryStatsTableUsedSize, sessionStatusModemRetransmits=sessionStatusModemRetransmits, powerStatusInternalAC2=powerStatusInternalAC2, cHdlcStatsNohdrspaceOut=cHdlcStatsNohdrspaceOut, sessionStatusLinkId=sessionStatusLinkId, modemSummaryStatsSlotNumber=modemSummaryStatsSlotNumber, pbufStatsPermAllocatedCount5=pbufStatsPermAllocatedCount5, l2TPTunnelStatusActiveLocalAddress=l2TPTunnelStatusActiveLocalAddress, sessionStatusInactiveTimeOfService=sessionStatusInactiveTimeOfService, sessionStatusHistoryModemNumber=sessionStatusHistoryModemNumber, pbufStatsTotalCount3=pbufStatsTotalCount3, sessionStatusReverseCallClassLen=sessionStatusReverseCallClassLen, ipstatRouteEntryPrevIndex=ipstatRouteEntryPrevIndex, dvsStatusGreChecksumError=dvsStatusGreChecksumError, sessionComponentsStatHandle=sessionComponentsStatHandle, sessionSummaryMaximumPpp=sessionSummaryMaximumPpp, sessionSummaryMaximumTandem=sessionSummaryMaximumTandem, modemSummaryStatsDCCalls=modemSummaryStatsDCCalls, l2FTunnelStatusInactiveRemoteAddress=l2FTunnelStatusInactiveRemoteAddress, pbufStatsFreeCount1=pbufStatsFreeCount1, l2FTunnelStatusActiveLocalAddress=l2FTunnelStatusActiveLocalAddress, sessionStatusInactiveLocalIP=sessionStatusInactiveLocalIP, sessionSummaryInactiveVoice=sessionSummaryInactiveVoice, modemCallStatsTxInitialSpeed=modemCallStatsTxInitialSpeed, sessionVpopVpopId=sessionVpopVpopId, pbufStatsAllocFails2=pbufStatsAllocFails2, sessionStatusReverseModemReceiveLineLevel=sessionStatusReverseModemReceiveLineLevel, sessionStatusReverseVpopId=sessionStatusReverseVpopId, taskStatsTableIdleDay=taskStatsTableIdleDay, sessionStatusInactiveRxStartDataRate=sessionStatusInactiveRxStartDataRate, slotStatusPartNumber=slotStatusPartNumber, modemCallStatsRxNonlinearEncoding=modemCallStatsRxNonlinearEncoding, sessionStatusHistoryName=sessionStatusHistoryName, e1SummaryStatsLineNumber=e1SummaryStatsLineNumber, modemSummaryStatsEntry=modemSummaryStatsEntry, slotStatusSerialNumber=slotStatusSerialNumber, slotStatusTable=slotStatusTable, modemCallStatsLowAddrOfMEMACCFailure=modemCallStatsLowAddrOfMEMACCFailure, sessionStatusInactiveOctetsOut=sessionStatusInactiveOctetsOut, l2TPTunnelStatusInactiveLinksAddedSuccessfully=l2TPTunnelStatusInactiveLinksAddedSuccessfully, e1SummaryStatsIdleChannels=e1SummaryStatsIdleChannels, ipstatIgmpEntryState=ipstatIgmpEntryState, modemIntervalStatsDeadCount=modemIntervalStatsDeadCount, taskStatsTableStackAddress7=taskStatsTableStackAddress7, sessionCountersActiveHighest=sessionCountersActiveHighest, pbufStatsTable=pbufStatsTable, sessionStatusReverseRxStartDataRate=sessionStatusReverseRxStartDataRate, sessionStatusInactiveCallClassArray=sessionStatusInactiveCallClassArray, modemCallStatsRTTLow=modemCallStatsRTTLow, sessionStatusCleartcpRemoteIP=sessionStatusCleartcpRemoteIP, l2TPLinkStatusRxBytes=l2TPLinkStatusRxBytes, modemStatsAuthCalls=modemStatsAuthCalls, pppSessionStatsRxBytesBeforeCompress=pppSessionStatsRxBytesBeforeCompress, pbufStatsTotalCount4=pbufStatsTotalCount4, sessionCountersSessionTableSize=sessionCountersSessionTableSize, sessionStatusHistoryVpopId=sessionStatusHistoryVpopId, t1CountsOutgoingCallAttempts=t1CountsOutgoingCallAttempts, taskStatsTableIdle5Seconds=taskStatsTableIdle5Seconds, modemCallStatsTxMinSpeed=modemCallStatsTxMinSpeed, l2FLogEntryMaxIndex=l2FLogEntryMaxIndex, pppSummaryStatsLinksNegotiatedLCP=pppSummaryStatsLinksNegotiatedLCP, ss7StatusReverseTimeSlot=ss7StatusReverseTimeSlot, pppDeadSessionStatsRxOverrunErrors=pppDeadSessionStatsRxOverrunErrors, taskStatsTableIdleHour=taskStatsTableIdleHour, t1CountsOutgoingDisconnects=t1CountsOutgoingDisconnects, sessionStatusHistoryDuration=sessionStatusHistoryDuration, l2TPTunnelStatusInactiveEntry=l2TPTunnelStatusInactiveEntry, sessionStatusHistoryTunnelType=sessionStatusHistoryTunnelType, modemCallStatsInfo0SequenceHigh=modemCallStatsInfo0SequenceHigh, sessionVpopCumulativeCount=sessionVpopCumulativeCount, e1StatsEntry=e1StatsEntry, dacTraceDirection=dacTraceDirection, modemSessionStats2ConnectString=modemSessionStats2ConnectString, powerStatusShelf=powerStatusShelf, pppSessionStatsRemoteAuthenticated=pppSessionStatsRemoteAuthenticated, sessionSlotsTable=sessionSlotsTable, pbufStatsAllocatedCount5=pbufStatsAllocatedCount5, dvsStatusDeadRemoteCLID=dvsStatusDeadRemoteCLID, pbufStatsAllocatedCount2=pbufStatsAllocatedCount2, sessionStatusActiveState=sessionStatusActiveState, taskStatsTableIntervalTime=taskStatsTableIntervalTime, pbufStatsAllocatedCount4=pbufStatsAllocatedCount4, sessionSummaryInactiveTrunk=sessionSummaryInactiveTrunk, sessionStatusHistoryDevice=sessionStatusHistoryDevice, sessionStatusActiveDuration=sessionStatusActiveDuration, taskStatsTableTicksElapsed=taskStatsTableTicksElapsed, pppDeadSessionStatsTotalRxSpeed=pppDeadSessionStatsTotalRxSpeed, modemCallStatsLastTransmitState=modemCallStatsLastTransmitState, sessionStatusReverseTdmTimeSlot=sessionStatusReverseTdmTimeSlot, pppSummaryStatsMaxLinks=pppSummaryStatsMaxLinks, pppSessionStatsRxSmallErrors=pppSessionStatsRxSmallErrors, sessionStatusReverseLinkService=sessionStatusReverseLinkService, sessionStatusInactiveDurationHMS=sessionStatusInactiveDurationHMS, sessionStatusActiveCalledNumber=sessionStatusActiveCalledNumber, modemStatsMinRxSpeed=modemStatsMinRxSpeed, pppSessionStatsLocalAuthProtocol=pppSessionStatsLocalAuthProtocol, modemCallStatsEQMHits=modemCallStatsEQMHits, modemCallStatsTxShaping=modemCallStatsTxShaping, sessionStatusDevice=sessionStatusDevice, pppSessionStatsConnectLimit=pppSessionStatsConnectLimit, sessionSlotsSlot7Count=sessionSlotsSlot7Count, l2FTunnelStatusInactiveLocalCLID=l2FTunnelStatusInactiveLocalCLID, pppDeadSessionStatsTxCompressing=pppDeadSessionStatsTxCompressing, ipAlarmEntryTrapSeverity=ipAlarmEntryTrapSeverity, sessionStatusInactiveDevice=sessionStatusInactiveDevice, t3StatsTable=t3StatsTable, t3StatsEntry=t3StatsEntry, l2FTunnelStatusInactiveVPOP=l2FTunnelStatusInactiveVPOP, modemCallStatsTxLevelReduction=modemCallStatsTxLevelReduction, sessionStatusHistorySs7SessionId=sessionStatusHistorySs7SessionId, slotStatusNewShelfNumber=slotStatusNewShelfNumber, dvsStatusLocalCLID=dvsStatusLocalCLID, pppSummaryStatsLinksAuthenticated=pppSummaryStatsLinksAuthenticated, modemSessionStatsDMMNumber=modemSessionStatsDMMNumber, pppSessionStatsRemoteACFC=pppSessionStatsRemoteACFC, sessionStatusRemoteIPXNetwork=sessionStatusRemoteIPXNetwork, pppSessionStatsUserName=pppSessionStatsUserName, pppSessionStatsTxBigErrors=pppSessionStatsTxBigErrors, l2TPLinkStatusEntry=l2TPLinkStatusEntry, sessionStatusInactiveServiceMode=sessionStatusInactiveServiceMode, l2FTunnelStatusInactiveUpTime=l2FTunnelStatusInactiveUpTime, pppSummaryStatsSlotNumber=pppSummaryStatsSlotNumber, sessionStatusHistoryTunnelMediumType=sessionStatusHistoryTunnelMediumType, modemIntervalStatsIndex=modemIntervalStatsIndex, sessionStatusHistoryTxMaxDataRate=sessionStatusHistoryTxMaxDataRate, pppSessionStatsRemoteVJSlots=pppSessionStatsRemoteVJSlots, pppSessionStatsLocalCompressAlgorithm=pppSessionStatsLocalCompressAlgorithm, l2TPLinkStatusTable=l2TPLinkStatusTable, l2FLinkStatusIndex=l2FLinkStatusIndex, e1SummaryStatsTable=e1SummaryStatsTable, pppDeadSessionStatsConnectLimit=pppDeadSessionStatsConnectLimit, pppSummaryStatsLinksNegotiatedCCP=pppSummaryStatsLinksNegotiatedCCP, l2FLinkStatusTxPackets=l2FLinkStatusTxPackets, modemStatsCurrentSessionID=modemStatsCurrentSessionID, ipStubStatsTable=ipStubStatsTable, timerStatsCPUNumber=timerStatsCPUNumber, pbufStatsTotalCount2=pbufStatsTotalCount2, sessionStatusHistoryLayer2Slot=sessionStatusHistoryLayer2Slot, pppDeadSessionStatsMultilinkLinksAdded=pppDeadSessionStatsMultilinkLinksAdded, pbufStatsFreeFails2=pbufStatsFreeFails2, pppDeadSessionStatsRxPackets=pppDeadSessionStatsRxPackets, sessionStatusRemoteIP=sessionStatusRemoteIP, dvsStatusDeadEntry=dvsStatusDeadEntry, ss7StatusServerId=ss7StatusServerId, modemStatsK56Calls=modemStatsK56Calls, sessionStatusInactiveRxEndDataRate=sessionStatusInactiveRxEndDataRate, modemCallStatsV8ControllerRev=modemCallStatsV8ControllerRev, sessionStatusHistoryTdmStream=sessionStatusHistoryTdmStream, modemCallStatsEQM4Seconds=modemCallStatsEQM4Seconds, sessionSummaryActiveTandem=sessionSummaryActiveTandem, modemCallStatsSNRRatio=modemCallStatsSNRRatio, pbufStatsPermAllocatedCount4=pbufStatsPermAllocatedCount4, pppSessionStatsMLPFragmentsMissing=pppSessionStatsMLPFragmentsMissing, pppSummaryStatsLinksLeased=pppSummaryStatsLinksLeased, pppSessionStatsMultilinkLinksMaxConfig=pppSessionStatsMultilinkLinksMaxConfig, pppDeadSessionStatsRemoteIPXNode=pppDeadSessionStatsRemoteIPXNode, pppSummaryStatsLinksStopped=pppSummaryStatsLinksStopped, sessionTraceTable=sessionTraceTable, sessionSummaryInactiveTest=sessionSummaryInactiveTest, pppDeadSessionStatsRemoteIPXNetwork=pppDeadSessionStatsRemoteIPXNetwork, l2TPLinkStatusLocalID=l2TPLinkStatusLocalID, slotStatusOtherMem=slotStatusOtherMem, sessionStatusHistoryEntry=sessionStatusHistoryEntry, dvsStatusGreOutPackets=dvsStatusGreOutPackets, ipCleartcpStatsInputBytes=ipCleartcpStatsInputBytes, modemCallStatsRTTHigh=modemCallStatsRTTHigh, l2FLinkStatusState=l2FLinkStatusState, iSDNStatsEntry=iSDNStatsEntry, l2TPTunnelStatusActiveEntry=l2TPTunnelStatusActiveEntry, sessionSummaryMaximumFax=sessionSummaryMaximumFax, sessionStatusInactiveTdmStream=sessionStatusInactiveTdmStream, sessionStatusTxEndDataRate=sessionStatusTxEndDataRate, modemCallStatsNumberOfLAPMREJSTransmitted=modemCallStatsNumberOfLAPMREJSTransmitted, sessionStatusInactiveModemDataCompression=sessionStatusInactiveModemDataCompression, sessionStatusInactiveModemLocalRetrains=sessionStatusInactiveModemLocalRetrains, pppSummaryStatsEntry=pppSummaryStatsEntry, dvsDeadLogEntryEntryText=dvsDeadLogEntryEntryText, sessionStatusHistoryTerminationCause=sessionStatusHistoryTerminationCause, ds0StatsDs0Index=ds0StatsDs0Index, modemIntervalStatsTotalCalls=modemIntervalStatsTotalCalls, ipdcTraceTimeStamp=ipdcTraceTimeStamp, sessionStatusReverseModemRemoteRenegotiations=sessionStatusReverseModemRemoteRenegotiations, modemSummaryStatsReuseSuspectModems=modemSummaryStatsReuseSuspectModems, sessionSummaryActiveRlogin=sessionSummaryActiveRlogin, systemTimeEntry=systemTimeEntry, modemStatsDownloadSuccesses=modemStatsDownloadSuccesses, modemSessionStatsSessionID=modemSessionStatsSessionID, modemCallStatsLastAGCGainValue=modemCallStatsLastAGCGainValue, modemSummaryStatsV90Calls=modemSummaryStatsV90Calls, sessionStatusInactiveTunnelId=sessionStatusInactiveTunnelId, pbufStatsPermAllocatedCount3=pbufStatsPermAllocatedCount3, sessionStatusActiveModemRemoteRenegotiations=sessionStatusActiveModemRemoteRenegotiations, sessionStatusHistoryRemoteIPXNetwork=sessionStatusHistoryRemoteIPXNetwork, dvsStatusDeadUpTime=dvsStatusDeadUpTime, dacTraceEntry=dacTraceEntry, pppSessionStatsLCPState=pppSessionStatsLCPState, modemCallStatsV90DigitalPadLow=modemCallStatsV90DigitalPadLow, sessionSlotsSlot12Count=sessionSlotsSlot12Count, sessionStatusModemSNR=sessionStatusModemSNR, ipSvcMonitoringState=ipSvcMonitoringState, timerStatsAllocFails=timerStatsAllocFails, sessionComponentsComponentState=sessionComponentsComponentState, modemCallStatsEQM10Seconds=modemCallStatsEQM10Seconds, iSDNHDLCFrameEntry=iSDNHDLCFrameEntry, modemCallStatsMinutesSinceRetrain=modemCallStatsMinutesSinceRetrain, e1StatsLineNumber=e1StatsLineNumber, taskStatsTableWaitObjectName=taskStatsTableWaitObjectName, pppDeadSessionStatsInactivityRemaining=pppDeadSessionStatsInactivityRemaining, pppDeadSessionStatsTxResourceErrors=pppDeadSessionStatsTxResourceErrors, sessionStatusActiveLayer2Slot=sessionStatusActiveLayer2Slot, sessionStatusInactivePermanentFlag=sessionStatusInactivePermanentFlag, memoryStatsTableFreeBlockCount=memoryStatsTableFreeBlockCount, l2TPLinkStatusSessionID=l2TPLinkStatusSessionID, modemCallStatsAutoGainAmplitude=modemCallStatsAutoGainAmplitude, iSDNStatsInCalls=iSDNStatsInCalls, sessionStatusHistoryCallClassArray=sessionStatusHistoryCallClassArray, pppSessionStatsRxPacketsDropped=pppSessionStatsRxPacketsDropped, l2TPTunnelStatusInactiveLocalAddress=l2TPTunnelStatusInactiveLocalAddress, dvsStatusDeadGreInDropped=dvsStatusDeadGreInDropped, memoryStatsTableCardType=memoryStatsTableCardType, ipStubStatsIgmpInReports=ipStubStatsIgmpInReports, sessionStatusInactiveTimeOfModemSync=sessionStatusInactiveTimeOfModemSync, sessionStatusReverseModemLocalRetrains=sessionStatusReverseModemLocalRetrains, ds0StatsInCalls=ds0StatsInCalls, e1CountsSlotIndex=e1CountsSlotIndex, sessionCountersActiveLowest=sessionCountersActiveLowest, l2TPTunnelStatusActiveGotOpened=l2TPTunnelStatusActiveGotOpened, sessionSummaryMaximumTotal=sessionSummaryMaximumTotal, modemCallStatsRxMPSequenceByte1High=modemCallStatsRxMPSequenceByte1High, pppDeadSessionStatsRxBytesUncompressed=pppDeadSessionStatsRxBytesUncompressed, pbufStatsPermAllocatedCount2=pbufStatsPermAllocatedCount2, taskStatsTableStackAddress5=taskStatsTableStackAddress5, sessionStatusReverseLocalIP=sessionStatusReverseLocalIP, l2TPTunnelStatusInactiveGotOpened=l2TPTunnelStatusInactiveGotOpened, l2TPLogEntryMaxIndex=l2TPLogEntryMaxIndex, iSDNHDLCFrameTable=iSDNHDLCFrameTable, ipstatIgmpEntryCliId=ipstatIgmpEntryCliId, sessionStatusInactiveModemTxBlocks=sessionStatusInactiveModemTxBlocks, ss7CountersRetainedFull=ss7CountersRetainedFull, e1CountsOutgoingConnects=e1CountsOutgoingConnects, sessionSummaryActiveFtp=sessionSummaryActiveFtp, sessionStatusReverseCallingNumber=sessionStatusReverseCallingNumber, clockStatusTable=clockStatusTable, ss7CountersDsmccFull=ss7CountersDsmccFull, l2FLogEntryIndex=l2FLogEntryIndex, sessionStatusInactiveTerminationReason=sessionStatusInactiveTerminationReason, iSDNHDLCFrameLength=iSDNHDLCFrameLength, sessionStatusInactiveTerminationCause=sessionStatusInactiveTerminationCause, sessionSummaryMaximumOther=sessionSummaryMaximumOther, pppSummaryStatsFreeLinks=pppSummaryStatsFreeLinks)
mibBuilder.exportSymbols("APTIS-MONITOR-MIB", pppDeadSessionStatsMLPFragmentsDropped=pppDeadSessionStatsMLPFragmentsDropped, pppSessionStatsRxQueueErrors=pppSessionStatsRxQueueErrors, sessionMultilinkPeerEIDLength=sessionMultilinkPeerEIDLength, sessionStatusReverseActualAuthMethod=sessionStatusReverseActualAuthMethod, ipdcTraceEntry=ipdcTraceEntry, pppSessionStatsDNSAddress2=pppSessionStatsDNSAddress2, t1StatsAlarmStatus=t1StatsAlarmStatus, slotStatusHardwareRev=slotStatusHardwareRev, sessionStatusReverseStopTime=sessionStatusReverseStopTime, sessionStatusInactiveModemNumber=sessionStatusInactiveModemNumber, pppSessionStatsRxResourceErrors=pppSessionStatsRxResourceErrors, pbufStatsFreeFails0=pbufStatsFreeFails0, pbufStatsFreeMin1=pbufStatsFreeMin1, sessionSummaryMaximumTrunk=sessionSummaryMaximumTrunk, sessionSlotsEntry=sessionSlotsEntry, sessionStatusActiveRxEndDataRate=sessionStatusActiveRxEndDataRate, modemSessionStats2DMMNumber=modemSessionStats2DMMNumber, l2TPLogEntryTable=l2TPLogEntryTable, sessionStatusReverseRxMaxDataRate=sessionStatusReverseRxMaxDataRate, timerStatsActiveCount=timerStatsActiveCount, modemCallStatsMinEQMValue=modemCallStatsMinEQMValue, l2TPTunnelStatusInactiveLinksAdded=l2TPTunnelStatusInactiveLinksAdded, sessionStatusActiveTable=sessionStatusActiveTable, memoryStatsTableTable=memoryStatsTableTable, sessionMultilinkTable=sessionMultilinkTable, l2TPTunnelStatusInactiveVPOP=l2TPTunnelStatusInactiveVPOP, modemStatsMaxRxSpeed=modemStatsMaxRxSpeed, modemStatsInitialTxSum=modemStatsInitialTxSum, modemCallStatsV90IMDRatio=modemCallStatsV90IMDRatio, taskStatsTableTCBSize=taskStatsTableTCBSize, sessionStatusHistoryCleartcpRemotePort=sessionStatusHistoryCleartcpRemotePort, e1CountsChannelsInUse=e1CountsChannelsInUse, sessionStatusHistoryRxMaxDataRate=sessionStatusHistoryRxMaxDataRate, sessionStatusReverseTimeOfModemSync=sessionStatusReverseTimeOfModemSync, sessionStatusReverseLastComponent=sessionStatusReverseLastComponent, pbufStatsAllocFails3=pbufStatsAllocFails3, ss7CountersTable=ss7CountersTable, ipstatRouteEntryPrivate=ipstatRouteEntryPrivate, t1SummaryStatsEntry=t1SummaryStatsEntry, slotStatusNewSlotIndex=slotStatusNewSlotIndex, modemIntervalStatsV34Calls=modemIntervalStatsV34Calls, modemIntervalStatsStopTime=modemIntervalStatsStopTime, dacClockingEntry=dacClockingEntry, taskStatsTableTaskName=taskStatsTableTaskName, sessionStatusModemModulation=sessionStatusModemModulation, ipsecCountersInboundCounter=ipsecCountersInboundCounter, e1SummaryStatsRingingChannels=e1SummaryStatsRingingChannels, modemSummaryStatsV32Calls=modemSummaryStatsV32Calls, sessionSummaryInactiveRlogin=sessionSummaryInactiveRlogin, pppDeadSessionStatsUpTime=pppDeadSessionStatsUpTime, t3StatsLineNumber=t3StatsLineNumber, modemCallStatsTrellisMapping=modemCallStatsTrellisMapping, modemIntervalStatsEntry=modemIntervalStatsEntry, ipsecCountersTable=ipsecCountersTable, modemStatsConnectedLose=modemStatsConnectedLose, sessionStatusReverseModemNumber=sessionStatusReverseModemNumber, pppDeadSessionStatsRxAlignErrors=pppDeadSessionStatsRxAlignErrors, ipSvcMonitoringRequestsInProgress=ipSvcMonitoringRequestsInProgress, pppSessionStatsRxAbortErrors=pppSessionStatsRxAbortErrors, sessionStatusReverseDevice=sessionStatusReverseDevice, ipAlarmEntryTrapOIDLen=ipAlarmEntryTrapOIDLen, ds0StatsOutConnected=ds0StatsOutConnected, sessionStatusHistoryTxEndDataRate=sessionStatusHistoryTxEndDataRate, cHdlcStatsUnknownCiscoTypeIn=cHdlcStatsUnknownCiscoTypeIn, sessionStatusActiveSs7SessionId=sessionStatusActiveSs7SessionId, pbufStatsFreeSuccesses3=pbufStatsFreeSuccesses3, slotStatusNewFabricationRev=slotStatusNewFabricationRev, pppDeadSessionStatsRxBigErrors=pppDeadSessionStatsRxBigErrors, sessionStatusActiveTunnelMediumType=sessionStatusActiveTunnelMediumType, pppDeadSessionStatsTxUnderrunErrors=pppDeadSessionStatsTxUnderrunErrors, pppDeadSessionStatsCCPState=pppDeadSessionStatsCCPState, sessionStatusReverseTunnelId=sessionStatusReverseTunnelId, dacTraceIndex=dacTraceIndex, e1CountsSessionAbortMessages=e1CountsSessionAbortMessages, sessionStatusLinkCount=sessionStatusLinkCount, ipstatRouteEntryPrevXxrt=ipstatRouteEntryPrevXxrt, ipdcTraceIpdcMsg=ipdcTraceIpdcMsg, dvsLogEntryMaxIndex=dvsLogEntryMaxIndex, modemSummaryStatsV34Calls=modemSummaryStatsV34Calls, pppDeadSessionStatsRxQueueErrors=pppDeadSessionStatsRxQueueErrors, ipAlarmEntryTrapOID=ipAlarmEntryTrapOID, modemIntervalStatsTable=modemIntervalStatsTable, modemCallStatsHighestTxState=modemCallStatsHighestTxState, sessionStatusActiveTerminationCause=sessionStatusActiveTerminationCause, ds0StatsOutCalls=ds0StatsOutCalls, pppSessionStatsMLPFragmentsReceived=pppSessionStatsMLPFragmentsReceived, pppDeadLogEntrySessionId=pppDeadLogEntrySessionId, l2TPLogEntryIndex=l2TPLogEntryIndex, l2FLogEntryEntry=l2FLogEntryEntry, sessionStatusInactiveModemRemoteRetrains=sessionStatusInactiveModemRemoteRetrains, t1CountsChannelsInUse=t1CountsChannelsInUse, sessionStatusActivePacketsIn=sessionStatusActivePacketsIn, pppSummaryStatsLinksNegotiatedIPCP=pppSummaryStatsLinksNegotiatedIPCP, ipSvcMonitoringRequestsOut=ipSvcMonitoringRequestsOut, t1SummaryStatsRingingChannels=t1SummaryStatsRingingChannels, pppSessionStatsTxUnderrunErrors=pppSessionStatsTxUnderrunErrors, pppDeadSessionStatsMLPFragmentsReceived=pppDeadSessionStatsMLPFragmentsReceived, modemSessionStats2InitialTxSpeed=modemSessionStats2InitialTxSpeed, pppSessionStatsLocalACFC=pppSessionStatsLocalACFC, pppSessionStatsTxBytesAfterCompress=pppSessionStatsTxBytesAfterCompress, modemStatsModemIndex=modemStatsModemIndex, pppDeadLogEntryRawEntryText=pppDeadLogEntryRawEntryText, t3StatsSlotIndex=t3StatsSlotIndex, modemCallStatsRxMaxSpeed=modemCallStatsRxMaxSpeed, modemStatsMaxTxSpeed=modemStatsMaxTxSpeed, sessionStatusRxStartDataRate=sessionStatusRxStartDataRate, mamLogEntryMaxIndex=mamLogEntryMaxIndex, slotStatusNewEntry=slotStatusNewEntry, ipAlarmEntryTrapArg3=ipAlarmEntryTrapArg3, memoryStatsTableSlotNumber=memoryStatsTableSlotNumber, pppDeadSessionStatsIPCPState=pppDeadSessionStatsIPCPState, sessionStatusInactiveModemReceiveLineLevel=sessionStatusInactiveModemReceiveLineLevel, l2FLinkStatusVPOP=l2FLinkStatusVPOP, modemSessionStats2ModemNumber=modemSessionStats2ModemNumber)
