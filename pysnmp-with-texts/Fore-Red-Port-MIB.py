#
# PySNMP MIB module Fore-Red-Port-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Fore-Red-Port-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:17:21 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
asx, = mibBuilder.importSymbols("Fore-Common-MIB", "asx")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, ObjectIdentity, IpAddress, MibIdentifier, NotificationType, ModuleIdentity, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, Integer32, Counter32, TimeTicks, iso, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "ObjectIdentity", "IpAddress", "MibIdentifier", "NotificationType", "ModuleIdentity", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "Integer32", "Counter32", "TimeTicks", "iso", "Counter64")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
redPortConfModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 17))
if mibBuilder.loadTexts: redPortConfModule.setLastUpdated('9911050000Z')
if mibBuilder.loadTexts: redPortConfModule.setOrganization('FORE')
if mibBuilder.loadTexts: redPortConfModule.setContactInfo(' Postal: FORE Systems Inc. 1000 FORE Drive Warrendale, PA 15086-7502 Tel: +1 724 742 6900 Email: nm_mibs@fore.com Web: http://www.fore.com')
if mibBuilder.loadTexts: redPortConfModule.setDescription('This module specifics Series D Portcard Redundancy table mib objects.')
redPortConfTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 17, 1), )
if mibBuilder.loadTexts: redPortConfTable.setStatus('current')
if mibBuilder.loadTexts: redPortConfTable.setDescription('A table of SONET APS Port configuration Information')
redPortConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 17, 1, 1), ).setIndexNames((0, "Fore-Red-Port-MIB", "redPortBoard"), (0, "Fore-Red-Port-MIB", "redPortModule"), (0, "Fore-Red-Port-MIB", "redPortPort"))
if mibBuilder.loadTexts: redPortConfEntry.setStatus('current')
if mibBuilder.loadTexts: redPortConfEntry.setDescription('A table entry containing SONET APS configuration information for each APS port')
redPortBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 17, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: redPortBoard.setStatus('current')
if mibBuilder.loadTexts: redPortBoard.setDescription("The index of this port's switch board")
redPortModule = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 17, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: redPortModule.setStatus('current')
if mibBuilder.loadTexts: redPortModule.setDescription('The network module of this port')
redPortPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 17, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: redPortPort.setStatus('current')
if mibBuilder.loadTexts: redPortPort.setDescription('The number of this port')
redPortPendingAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 17, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("working", 1), ("protection", 2), ("unprotected", 3), ("none", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: redPortPendingAdminMode.setStatus('current')
if mibBuilder.loadTexts: redPortPendingAdminMode.setDescription('The pending admin mode for this port')
redPortPendingCommitState = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 17, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: redPortPendingCommitState.setStatus('current')
if mibBuilder.loadTexts: redPortPendingCommitState.setDescription('This variable indicates if the commit state is pending for this particular port')
redPortAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 17, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("working", 1), ("protection", 2), ("unprotected", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: redPortAdminMode.setStatus('current')
if mibBuilder.loadTexts: redPortAdminMode.setDescription('The admin mode for the port')
redPortOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 17, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("active", 1), ("standby", 2), ("unprotected", 3), ("loopbackon", 4), ("loopbackoff", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: redPortOperState.setStatus('current')
if mibBuilder.loadTexts: redPortOperState.setDescription('The Oper state of this port')
redPortCommit = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 17, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("commit", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: redPortCommit.setStatus('current')
if mibBuilder.loadTexts: redPortCommit.setDescription('command to commit a port configuration Note this object is write-only and reading it will result in implementation-specific results.')
mibBuilder.exportSymbols("Fore-Red-Port-MIB", redPortModule=redPortModule, redPortCommit=redPortCommit, redPortOperState=redPortOperState, redPortPendingAdminMode=redPortPendingAdminMode, redPortConfModule=redPortConfModule, redPortConfEntry=redPortConfEntry, redPortAdminMode=redPortAdminMode, PYSNMP_MODULE_ID=redPortConfModule, redPortBoard=redPortBoard, redPortPendingCommitState=redPortPendingCommitState, redPortPort=redPortPort, redPortConfTable=redPortConfTable)
