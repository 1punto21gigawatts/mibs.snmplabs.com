#
# PySNMP MIB module NOVELSAT-COMMON-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NOVELSAT-COMMON-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:24:14 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint")
CounterBasedGauge64, = mibBuilder.importSymbols("HCNUM-TC", "CounterBasedGauge64")
ItuPerceivedSeverity, = mibBuilder.importSymbols("ITU-ALARM-TC-MIB", "ItuPerceivedSeverity")
nsRoot, = mibBuilder.importSymbols("NOVELSAT-ROOT-MIB", "nsRoot")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, iso, NotificationType, MibIdentifier, Bits, ModuleIdentity, TimeTicks, Gauge32, IpAddress, Unsigned32, Counter32, Integer32, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "iso", "NotificationType", "MibIdentifier", "Bits", "ModuleIdentity", "TimeTicks", "Gauge32", "IpAddress", "Unsigned32", "Counter32", "Integer32", "ObjectIdentity")
RowStatus, TextualConvention, DateAndTime, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "DateAndTime", "DisplayString")
nsCommon = ModuleIdentity((1, 3, 6, 1, 4, 1, 37576, 2))
nsCommon.setRevisions(('2010-09-12 15:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: nsCommon.setRevisionsDescriptions(('Version 1.0.0.X',))
if mibBuilder.loadTexts: nsCommon.setLastUpdated('201009121500Z')
if mibBuilder.loadTexts: nsCommon.setOrganization('Novelsat')
if mibBuilder.loadTexts: nsCommon.setContactInfo("21 Ha'taasiya St., Ra'anana 43654,Israel -------------------------- Tel: +972-9-7889730 Fax: +972-9- e-mail: info@novelsat.com, support@novelsat.com http://www.novelsat.com -------------------------- ")
if mibBuilder.loadTexts: nsCommon.setDescription('Novelsat Common MIB')
nsCommonConfig = ObjectIdentity((1, 3, 6, 1, 4, 1, 37576, 2, 1))
if mibBuilder.loadTexts: nsCommonConfig.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfig.setDescription('Common MIB branch that holds all common configuration parameters.')
nsCommonConfigManagementIP = ObjectIdentity((1, 3, 6, 1, 4, 1, 37576, 2, 1, 3))
if mibBuilder.loadTexts: nsCommonConfigManagementIP.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigManagementIP.setDescription('Common MIB branch that holds all Common management IP parameters.')
nsCommonConfigMgmtHostIP = MibScalar((1, 3, 6, 1, 4, 1, 37576, 2, 1, 3, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsCommonConfigMgmtHostIP.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigMgmtHostIP.setDescription('This parameter holds product IP address.')
nsCommonConfigMgmtHostMask = MibScalar((1, 3, 6, 1, 4, 1, 37576, 2, 1, 3, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsCommonConfigMgmtHostMask.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigMgmtHostMask.setDescription('This parameter holds product network mask address.')
nsCommonConfigMgmtHostGW = MibScalar((1, 3, 6, 1, 4, 1, 37576, 2, 1, 3, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsCommonConfigMgmtHostGW.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigMgmtHostGW.setDescription('This parameter holds product gateway address.')
nsCommonConfigMgmtHostDHCP = MibScalar((1, 3, 6, 1, 4, 1, 37576, 2, 1, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsCommonConfigMgmtHostDHCP.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigMgmtHostDHCP.setDescription('This parameter is no longer supported')
nsCommonConfigMgmtHostDNS = MibScalar((1, 3, 6, 1, 4, 1, 37576, 2, 1, 3, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsCommonConfigMgmtHostDNS.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigMgmtHostDNS.setDescription('This parameter is no longer supported')
nsCommonConfigManagementOta = ObjectIdentity((1, 3, 6, 1, 4, 1, 37576, 2, 1, 8))
if mibBuilder.loadTexts: nsCommonConfigManagementOta.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigManagementOta.setDescription('This branch is no longer supported. OTA support is now performed using Network Interfaces table')
nsCommonConfigMgmtOtaIP = MibScalar((1, 3, 6, 1, 4, 1, 37576, 2, 1, 8, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsCommonConfigMgmtOtaIP.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigMgmtOtaIP.setDescription('This parameter is no longer supported. OTA support is now performed using Network Interfaces table')
nsCommonConfigMgmtOtaMask = MibScalar((1, 3, 6, 1, 4, 1, 37576, 2, 1, 8, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsCommonConfigMgmtOtaMask.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigMgmtOtaMask.setDescription('This parameter is no longer supported. OTA support is now performed using Network Interfaces table')
nsCommonConfigManagementRollback = ObjectIdentity((1, 3, 6, 1, 4, 1, 37576, 2, 1, 9))
if mibBuilder.loadTexts: nsCommonConfigManagementRollback.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigManagementRollback.setDescription('Common MIB branch that holds all rollback parameters.')
nsCommonConfigMgmtRollbackMode = MibScalar((1, 3, 6, 1, 4, 1, 37576, 2, 1, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsCommonConfigMgmtRollbackMode.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigMgmtRollbackMode.setDescription('This parameter holds rollback mode.')
nsCommonConfigMgmtRollbackTimeout = MibScalar((1, 3, 6, 1, 4, 1, 37576, 2, 1, 9, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsCommonConfigMgmtRollbackTimeout.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigMgmtRollbackTimeout.setDescription('This parameter holds rollback timeout in minutes.')
nsCommonConfigManagementRateLimiter = ObjectIdentity((1, 3, 6, 1, 4, 1, 37576, 2, 1, 10))
if mibBuilder.loadTexts: nsCommonConfigManagementRateLimiter.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigManagementRateLimiter.setDescription('Common MIB branch that holds all Common management rate limiter parameters.')
nsCommonConfigMgmtRateLimit = MibScalar((1, 3, 6, 1, 4, 1, 37576, 2, 1, 10, 1), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsCommonConfigMgmtRateLimit.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigMgmtRateLimit.setDescription('This parameter holds management rate limit in Kbps.')
nsCommonConfigAlarmsEvents = ObjectIdentity((1, 3, 6, 1, 4, 1, 37576, 2, 1, 11))
if mibBuilder.loadTexts: nsCommonConfigAlarmsEvents.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigAlarmsEvents.setDescription('Common MIB branch that holds all Common Alarms and Events parameters.')
nsCommonConfigAlarmsEventsTable = MibTable((1, 3, 6, 1, 4, 1, 37576, 2, 1, 11, 1), )
if mibBuilder.loadTexts: nsCommonConfigAlarmsEventsTable.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigAlarmsEventsTable.setDescription('A list of Alarms and Events parameters')
nsCommonConfigAlarmsEventsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 37576, 2, 1, 11, 1, 1), ).setIndexNames((0, "NOVELSAT-COMMON-MIB", "nsCommonConfigAlarmsEventsIndex"))
if mibBuilder.loadTexts: nsCommonConfigAlarmsEventsEntry.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigAlarmsEventsEntry.setDescription('Conceptual row in table for each alarm or event.')
nsCommonConfigAlarmsEventsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 11, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: nsCommonConfigAlarmsEventsIndex.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigAlarmsEventsIndex.setDescription('This parameter holds alarm index.')
nsCommonConfigAlarmsEventsName = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 11, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonConfigAlarmsEventsName.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigAlarmsEventsName.setDescription('This parameter holds alarm name.')
nsCommonConfigAlarmsEventsMask = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 11, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1), ("notApplicable", 255)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigAlarmsEventsMask.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigAlarmsEventsMask.setDescription('This parameter holds alarm mask.')
nsCommonConfigAlarmsEventsRelayMask = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 11, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1), ("notApplicable", 255)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigAlarmsEventsRelayMask.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigAlarmsEventsRelayMask.setDescription('This parameter holds alarm mask.')
nsCommonConfig10MhzClock = ObjectIdentity((1, 3, 6, 1, 4, 1, 37576, 2, 1, 4))
if mibBuilder.loadTexts: nsCommonConfig10MhzClock.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfig10MhzClock.setDescription('Common MIB branch that holds all Common 10Mhz clock parameters.')
nsCommonConfig10MhzClockSource = MibScalar((1, 3, 6, 1, 4, 1, 37576, 2, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("internal", 0), ("external", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsCommonConfig10MhzClockSource.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfig10MhzClockSource.setDescription('This parameter holds clock source.')
nsCommonConfig10MhzClockOut = MibScalar((1, 3, 6, 1, 4, 1, 37576, 2, 1, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsCommonConfig10MhzClockOut.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfig10MhzClockOut.setDescription('This parameter holds clock out state.')
nsCommonConfig10MhzClockTxPortClock = MibScalar((1, 3, 6, 1, 4, 1, 37576, 2, 1, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("off", 0), ("lband", 1), ("buc", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsCommonConfig10MhzClockTxPortClock.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfig10MhzClockTxPortClock.setDescription('This parameter holds TX port clock state.')
nsCommonConfig10MhzClockLnbRefClock = MibScalar((1, 3, 6, 1, 4, 1, 37576, 2, 1, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsCommonConfig10MhzClockLnbRefClock.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfig10MhzClockLnbRefClock.setDescription('This parameter holds LNB reference clock state.')
nsCommonConfigSerialPort = ObjectIdentity((1, 3, 6, 1, 4, 1, 37576, 2, 1, 5))
if mibBuilder.loadTexts: nsCommonConfigSerialPort.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigSerialPort.setDescription('Common MIB branch that holds all Common serial port parameters.')
nsCommonConfigSerialPortBaudRate = MibScalar((1, 3, 6, 1, 4, 1, 37576, 2, 1, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("baudRate9600", 0), ("baudRate19200", 1), ("baudRate38400", 2), ("baudRate115200", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsCommonConfigSerialPortBaudRate.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigSerialPortBaudRate.setDescription('This parameter holds serial port baud rate.')
nsCommonConfigSerialPortParity = MibScalar((1, 3, 6, 1, 4, 1, 37576, 2, 1, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("odd", 0), ("even", 1), ("none", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsCommonConfigSerialPortParity.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigSerialPortParity.setDescription('This parameter holds serial port parity.')
nsCommonConfigSerialPortDataBits = MibScalar((1, 3, 6, 1, 4, 1, 37576, 2, 1, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("dataBits5", 0), ("dataBits6", 1), ("dataBits7", 2), ("dataBits8", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsCommonConfigSerialPortDataBits.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigSerialPortDataBits.setDescription('This parameter holds serial port data bits.')
nsCommonConfigSerialPortStopBit = MibScalar((1, 3, 6, 1, 4, 1, 37576, 2, 1, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("stopBit1", 0), ("stopBit2", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsCommonConfigSerialPortStopBit.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigSerialPortStopBit.setDescription('This parameter holds serial port stop bit.')
nsCommonConfigDateTime = ObjectIdentity((1, 3, 6, 1, 4, 1, 37576, 2, 1, 6))
if mibBuilder.loadTexts: nsCommonConfigDateTime.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigDateTime.setDescription('Common MIB branch that holds all Common serial port parameters.')
nsCommonConfigDateAndTime = MibScalar((1, 3, 6, 1, 4, 1, 37576, 2, 1, 6, 1), DateAndTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsCommonConfigDateAndTime.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigDateAndTime.setDescription('This parameter holds system date and time.')
nsCommonConfigNetwork = ObjectIdentity((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7))
if mibBuilder.loadTexts: nsCommonConfigNetwork.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetwork.setDescription('Common MIB branch that holds all Common network parameters.')
nsCommonConfigNetworkForwardingMode = ObjectIdentity((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 1))
if mibBuilder.loadTexts: nsCommonConfigNetworkForwardingMode.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetworkForwardingMode.setDescription('Common MIB branch that holds all Common forwarding mode parameters.')
nsCommonConfigNetworkMode = MibScalar((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 255))).clone(namedValues=NamedValues(("l2TransparentBridging", 0), ("l2VlanSwitching", 1), ("l3IpRouting", 2), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsCommonConfigNetworkMode.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetworkMode.setDescription('This parameter holds networking mode.')
nsCommonConfigNetworkInterfaces = ObjectIdentity((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 2))
if mibBuilder.loadTexts: nsCommonConfigNetworkInterfaces.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetworkInterfaces.setDescription('Common MIB branch that holds all Common Interfaces parameters.')
nsCommonConfigNetworkInterfacesTable = MibTable((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 2, 1), )
if mibBuilder.loadTexts: nsCommonConfigNetworkInterfacesTable.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetworkInterfacesTable.setDescription('A list of Interfaces parameters')
nsCommonConfigNetworkInterfacesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 2, 1, 1), ).setIndexNames((0, "NOVELSAT-COMMON-MIB", "nsCommonConfigNetworkInterfacesIndex"))
if mibBuilder.loadTexts: nsCommonConfigNetworkInterfacesEntry.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetworkInterfacesEntry.setDescription('Conceptual row in table for each neighbor.')
nsCommonConfigNetworkInterfacesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 2, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: nsCommonConfigNetworkInterfacesIndex.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetworkInterfacesIndex.setDescription("This parameter holds interface's index.")
nsCommonConfigNetworkInterfacesName = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigNetworkInterfacesName.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetworkInterfacesName.setDescription("This parameter holds interface's name.")
nsCommonConfigNetworkInterfacesAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1), ("notApplicable", 255)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigNetworkInterfacesAdminStatus.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetworkInterfacesAdminStatus.setDescription("This parameter holds interface's administrative status.")
nsCommonConfigNetworkInterfacesPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 255))).clone(namedValues=NamedValues(("lan", 0), ("wan", 1), ("mngmt", 2), ("loopback", 3), ("bridge", 4), ("notApplicable", 255)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigNetworkInterfacesPortType.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetworkInterfacesPortType.setDescription("This parameter holds interface's port type.")
nsCommonConfigNetworkInterfacesMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 2, 1, 1, 6), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigNetworkInterfacesMtu.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetworkInterfacesMtu.setDescription("This parameter holds interface's MTU.")
nsCommonConfigNetworkInterfacesVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 2, 1, 1, 7), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigNetworkInterfacesVlan.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetworkInterfacesVlan.setDescription("This parameter holds interface's vlan/pid.")
nsCommonConfigNetworkInterfacesIp = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 2, 1, 1, 8), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigNetworkInterfacesIp.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetworkInterfacesIp.setDescription("This parameter holds interface's IP address.")
nsCommonConfigNetworkInterfacesMac = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 2, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigNetworkInterfacesMac.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetworkInterfacesMac.setDescription("This parameter holds interface's MAC address.")
nsCommonConfigNetworkInterfacesSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 2, 1, 1, 10), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigNetworkInterfacesSubnetMask.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetworkInterfacesSubnetMask.setDescription("This parameter holds interface's subnet mask.")
nsCommonConfigNetworkInterfacesEncapsulation = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 255))).clone(namedValues=NamedValues(("encapsulationEth", 0), ("encapsulationEth8021q", 1), ("ule", 2), ("gse", 3), ("nspe", 4), ("nspe2", 5), ("notApplicable", 255)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigNetworkInterfacesEncapsulation.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetworkInterfacesEncapsulation.setDescription("This parameter holds interface's administrative status.")
nsCommonConfigNetworkInterfacesManagementControl = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1), ("notApplicable", 255)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigNetworkInterfacesManagementControl.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetworkInterfacesManagementControl.setDescription("This parameter holds interface's management control status.")
nsCommonConfigNetworkInterfacesAcmControl = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1), ("notApplicable", 255)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigNetworkInterfacesAcmControl.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetworkInterfacesAcmControl.setDescription("This parameter holds interface's Acm control status.")
nsCommonConfigNetworkInterfacesNotifyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 2, 1, 1, 14), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigNetworkInterfacesNotifyRowStatus.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetworkInterfacesNotifyRowStatus.setDescription('Used to create new rows or delete in the table. Note that all rows are active(1) at all times, since default values are given to empty parameters. Value createAndGo(4) is used when all row parameters are inserted at once, while createAndWait(5) is used to create row with default values. Value destroy(6) is used to remove a row')
nsCommonConfigNetworkNeighbors = ObjectIdentity((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 3))
if mibBuilder.loadTexts: nsCommonConfigNetworkNeighbors.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetworkNeighbors.setDescription('Common MIB branch that holds all Common Neighbors parameters.')
nsCommonConfigNetworkNeighborsTable = MibTable((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 3, 1), )
if mibBuilder.loadTexts: nsCommonConfigNetworkNeighborsTable.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetworkNeighborsTable.setDescription('A list of Neighbors parameters')
nsCommonConfigNetworkNeighborsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 3, 1, 1), ).setIndexNames((0, "NOVELSAT-COMMON-MIB", "nsCommonConfigNetworkNeighborsIndex"))
if mibBuilder.loadTexts: nsCommonConfigNetworkNeighborsEntry.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetworkNeighborsEntry.setDescription('Conceptual row in table for each neighbor.')
nsCommonConfigNetworkNeighborsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 3, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: nsCommonConfigNetworkNeighborsIndex.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetworkNeighborsIndex.setDescription("This parameter holds neighbor's index.")
nsCommonConfigNetworkNeighborsName = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigNetworkNeighborsName.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetworkNeighborsName.setDescription("This parameter holds neighbor's name.")
nsCommonConfigNetworkNeighborsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 3, 1, 1, 3), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigNetworkNeighborsIfIndex.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetworkNeighborsIfIndex.setDescription("This parameter holds interface's index that is directly connected to this neighbor.")
nsCommonConfigNetworkNeighborsIp = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 3, 1, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigNetworkNeighborsIp.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetworkNeighborsIp.setDescription("This parameter holds neighbor's IP address.")
nsCommonConfigNetworkNeighborsMac = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 3, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigNetworkNeighborsMac.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetworkNeighborsMac.setDescription("This parameter holds neighbor's MAC address.")
nsCommonConfigNetworkNeighborsSignalingIp = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 3, 1, 1, 6), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigNetworkNeighborsSignalingIp.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetworkNeighborsSignalingIp.setDescription("This parameter holds neighbor's remote IP address.")
nsCommonConfigNetworkNeighborsModulation = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 255))).clone(namedValues=NamedValues(("modulationBpsk", 0), ("modulationQpsk", 1), ("modulation8Psk", 2), ("modulation16Qam", 3), ("modulation16Apsk", 4), ("modulation32Apsk", 5), ("modulation64Apsk", 6), ("notApplicable", 255)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigNetworkNeighborsModulation.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetworkNeighborsModulation.setDescription("This parameter holds neighbor's modulation.")
nsCommonConfigNetworkNeighborsFecRate = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 255))).clone(namedValues=NamedValues(("fec1Div5", 0), ("fec1Div4", 1), ("fec1Div3", 2), ("fec2Div5", 3), ("fec13Div30", 4), ("fec4Div9", 5), ("fec7Div15", 6), ("fec22Div45", 7), ("fec1Div2", 8), ("fec8Div15", 9), ("fec5Div9", 10), ("fec17Div30", 11), ("fec3Div5", 12), ("fec28Div45", 13), ("fec19Div30", 14), ("fec2Div3", 15), ("fec32Div45", 16), ("fec11Div15", 17), ("fec3Div4", 18), ("fec7Div9", 19), ("fec4Div5", 20), ("fec37Div45", 21), ("fec5Div6", 22), ("fec7Div8", 23), ("fec8Div9", 24), ("fec9Div10", 25), ("notApplicable", 255)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigNetworkNeighborsFecRate.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetworkNeighborsFecRate.setDescription("This parameter holds neighbor's modulation.")
nsCommonConfigNetworkNeighborsNotifyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 3, 1, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigNetworkNeighborsNotifyRowStatus.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetworkNeighborsNotifyRowStatus.setDescription('Used to create new rows or delete in the table. Note that all rows are active(1) at all times, since default values are given to empty parameters. Value createAndGo(4) is used when all row parameters are inserted at once, while createAndWait(5) is used to create row with default values. Value destroy(6) is used to remove a row')
nsCommonConfigNetworkRouting = ObjectIdentity((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 4))
if mibBuilder.loadTexts: nsCommonConfigNetworkRouting.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetworkRouting.setDescription('Common MIB branch that holds all Common PolicyRoute parameters.')
nsCommonConfigNetworkPolicyRoute = ObjectIdentity((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 4, 1))
if mibBuilder.loadTexts: nsCommonConfigNetworkPolicyRoute.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetworkPolicyRoute.setDescription('Common MIB branch that holds all Common PolicyRoute parameters.')
nsCommonConfigNetworkPolicyRouteTable = MibTable((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 4, 1, 1), )
if mibBuilder.loadTexts: nsCommonConfigNetworkPolicyRouteTable.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetworkPolicyRouteTable.setDescription('A list of PolicyRoute parameters')
nsCommonConfigNetworkPolicyRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 4, 1, 1, 1), ).setIndexNames((0, "NOVELSAT-COMMON-MIB", "nsCommonConfigNetworkPolicyRouteIndex"))
if mibBuilder.loadTexts: nsCommonConfigNetworkPolicyRouteEntry.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetworkPolicyRouteEntry.setDescription('Conceptual row in table for each neighbor.')
nsCommonConfigNetworkPolicyRouteIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 4, 1, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: nsCommonConfigNetworkPolicyRouteIndex.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetworkPolicyRouteIndex.setDescription("This parameter holds routing policy's index.")
nsCommonConfigNetworkPolicyRouteInputInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 4, 1, 1, 1, 2), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigNetworkPolicyRouteInputInterfaceId.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetworkPolicyRouteInputInterfaceId.setDescription("This parameter holds interface's index. Must exist in Interfaces' configuration table")
nsCommonConfigNetworkPolicyRouteRoutingTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 4, 1, 1, 1, 3), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigNetworkPolicyRouteRoutingTableId.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetworkPolicyRouteRoutingTableId.setDescription("This parameter holds routing policy's table ID.")
nsCommonConfigNetworkPolicyRouteNotifyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 4, 1, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigNetworkPolicyRouteNotifyRowStatus.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetworkPolicyRouteNotifyRowStatus.setDescription('Used to create new rows or delete in the table. Note that all rows are active(1) at all times, since default values are given to empty parameters. Value createAndGo(4) is used when all row parameters are inserted at once, while createAndWait(5) is used to create row with default values. Value destroy(6) is used to remove a row')
nsCommonConfigNetworkRoutes = ObjectIdentity((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 4, 2))
if mibBuilder.loadTexts: nsCommonConfigNetworkRoutes.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetworkRoutes.setDescription('Common MIB branch that holds all Common Routes parameters.')
nsCommonConfigNetworkRoutesTable = MibTable((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 4, 2, 1), )
if mibBuilder.loadTexts: nsCommonConfigNetworkRoutesTable.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetworkRoutesTable.setDescription('A list of Routes parameters')
nsCommonConfigNetworkRoutesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 4, 2, 1, 1), ).setIndexNames((0, "NOVELSAT-COMMON-MIB", "nsCommonConfigNetworkRoutesDestIpAddress"), (0, "NOVELSAT-COMMON-MIB", "nsCommonConfigNetworkRoutesDestSubnetMask"), (0, "NOVELSAT-COMMON-MIB", "nsCommonConfigNetworkRoutesNexthopIpAddress"), (0, "NOVELSAT-COMMON-MIB", "nsCommonConfigNetworkRoutesTableId"))
if mibBuilder.loadTexts: nsCommonConfigNetworkRoutesEntry.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetworkRoutesEntry.setDescription('Conceptual row in table for each neighbor.')
nsCommonConfigNetworkRoutesDestIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 4, 2, 1, 1, 1), IpAddress())
if mibBuilder.loadTexts: nsCommonConfigNetworkRoutesDestIpAddress.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetworkRoutesDestIpAddress.setDescription("This parameter holds routes' destination IP address.")
nsCommonConfigNetworkRoutesDestSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 4, 2, 1, 1, 2), IpAddress())
if mibBuilder.loadTexts: nsCommonConfigNetworkRoutesDestSubnetMask.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetworkRoutesDestSubnetMask.setDescription("This parameter holds routes' destination subnet mask.")
nsCommonConfigNetworkRoutesNexthopIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 4, 2, 1, 1, 3), IpAddress())
if mibBuilder.loadTexts: nsCommonConfigNetworkRoutesNexthopIpAddress.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetworkRoutesNexthopIpAddress.setDescription("This parameter holds routes' nexthop IP address.")
nsCommonConfigNetworkRoutesTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 4, 2, 1, 1, 4), Unsigned32())
if mibBuilder.loadTexts: nsCommonConfigNetworkRoutesTableId.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetworkRoutesTableId.setDescription("This parameter holds routes' table ID.")
nsCommonConfigNetworkRoutesAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 4, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1), ("notApplicable", 255)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigNetworkRoutesAdminStatus.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetworkRoutesAdminStatus.setDescription("This parameter holds interface's administrative status.")
nsCommonConfigNetworkRoutesNotifyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 4, 2, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigNetworkRoutesNotifyRowStatus.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetworkRoutesNotifyRowStatus.setDescription('Used to create new rows or delete in the table. Note that all rows are active(1) at all times, since default values are given to empty parameters. Value createAndGo(4) is used when all row parameters are inserted at once, while createAndWait(5) is used to create row with default values. Value destroy(6) is used to remove a row')
nsCommonConfigNetworkVlanSwitching = ObjectIdentity((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 5))
if mibBuilder.loadTexts: nsCommonConfigNetworkVlanSwitching.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetworkVlanSwitching.setDescription('Common MIB branch that holds all Common VlanSwitching parameters.')
nsCommonConfigNetworkVlanSwitchingTable = MibTable((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 5, 1), )
if mibBuilder.loadTexts: nsCommonConfigNetworkVlanSwitchingTable.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetworkVlanSwitchingTable.setDescription('A list of VlanSwitching parameters')
nsCommonConfigNetworkVlanSwitchingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 5, 1, 1), ).setIndexNames((0, "NOVELSAT-COMMON-MIB", "nsCommonConfigNetworkVlanSwitchingVid"))
if mibBuilder.loadTexts: nsCommonConfigNetworkVlanSwitchingEntry.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetworkVlanSwitchingEntry.setDescription('Conceptual row in table for each neighbor.')
nsCommonConfigNetworkVlanSwitchingVid = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 5, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: nsCommonConfigNetworkVlanSwitchingVid.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetworkVlanSwitchingVid.setDescription("This parameter holds VLAN switching's VID.")
nsCommonConfigNetworkVlanSwitchingNeighborIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 5, 1, 1, 2), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigNetworkVlanSwitchingNeighborIndex.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetworkVlanSwitchingNeighborIndex.setDescription("This parameter holds VLAN switching's neighbor's index. Must exist in Neighbors' configuration table.")
nsCommonConfigNetworkVlanSwitchingAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1), ("notApplicable", 255)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigNetworkVlanSwitchingAdminStatus.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetworkVlanSwitchingAdminStatus.setDescription("This parameter holds VLAN switching's administrative status.")
nsCommonConfigNetworkVlanSwitchingNotifyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 5, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigNetworkVlanSwitchingNotifyRowStatus.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetworkVlanSwitchingNotifyRowStatus.setDescription('Used to create new rows or delete in the table. Note that all rows are active(1) at all times, since default values are given to empty parameters. Value createAndGo(4) is used when all row parameters are inserted at once, while createAndWait(5) is used to create row with default values. Value destroy(6) is used to remove a row')
nsCommonConfigNetworkQoS = ObjectIdentity((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6))
if mibBuilder.loadTexts: nsCommonConfigNetworkQoS.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetworkQoS.setDescription('Common MIB branch that holds all Common QoS parameters.')
nsCommonConfigNetworkClassification = ObjectIdentity((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 1))
if mibBuilder.loadTexts: nsCommonConfigNetworkClassification.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetworkClassification.setDescription('Common MIB branch that holds all Common classification parameters.')
nsCommonConfigNetworkClassificationMode = MibScalar((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 255))).clone(namedValues=NamedValues(("classMode802", 0), ("classModeTos", 1), ("classModeMf", 2), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsCommonConfigNetworkClassificationMode.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetworkClassificationMode.setDescription("This parameter holds classification's method.")
nsCommonConfigNetworkClassification802 = ObjectIdentity((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 1, 2))
if mibBuilder.loadTexts: nsCommonConfigNetworkClassification802.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetworkClassification802.setDescription('Common MIB branch that holds all Common classification parameters.')
nsCommonConfigNetworkClassification802Table = MibTable((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 1, 2, 1), )
if mibBuilder.loadTexts: nsCommonConfigNetworkClassification802Table.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetworkClassification802Table.setDescription('A list of Classification802 parameters')
nsCommonConfigNetworkClassification802Entry = MibTableRow((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 1, 2, 1, 1), ).setIndexNames((0, "NOVELSAT-COMMON-MIB", "nsCommonConfigNetworkClassification802Priority"))
if mibBuilder.loadTexts: nsCommonConfigNetworkClassification802Entry.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetworkClassification802Entry.setDescription('Conceptual row in table for each neighbor.')
nsCommonConfigNetworkClassification802Priority = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 1, 2, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: nsCommonConfigNetworkClassification802Priority.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetworkClassification802Priority.setDescription('This parameter holds classification 802.1p priority.')
nsCommonConfigNetworkClassification802CoS = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 255))).clone(namedValues=NamedValues(("cos0", 1), ("cos1", 2), ("cos2", 3), ("cos3", 4), ("cos4", 5), ("cos5", 6), ("cos6", 7), ("cos7", 8), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsCommonConfigNetworkClassification802CoS.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetworkClassification802CoS.setDescription('This parameter holds classification 802.1p CoS.')
nsCommonConfigNetworkClassificationTos = ObjectIdentity((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 1, 3))
if mibBuilder.loadTexts: nsCommonConfigNetworkClassificationTos.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetworkClassificationTos.setDescription('Common MIB branch that holds all Common classification parameters.')
nsCommonConfigNetworkClassificationTosTable = MibTable((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 1, 3, 1), )
if mibBuilder.loadTexts: nsCommonConfigNetworkClassificationTosTable.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetworkClassificationTosTable.setDescription('A list of Classification Tos parameters')
nsCommonConfigNetworkClassificationTosEntry = MibTableRow((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 1, 3, 1, 1), ).setIndexNames((0, "NOVELSAT-COMMON-MIB", "nsCommonConfigNetworkClassificationTosPriority"))
if mibBuilder.loadTexts: nsCommonConfigNetworkClassificationTosEntry.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetworkClassificationTosEntry.setDescription('Conceptual row in table for each neighbor.')
nsCommonConfigNetworkClassificationTosPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 1, 3, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: nsCommonConfigNetworkClassificationTosPriority.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetworkClassificationTosPriority.setDescription('This parameter holds classification TOS priority.')
nsCommonConfigNetworkClassificationTosFieldValue = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 1, 3, 1, 1, 2), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigNetworkClassificationTosFieldValue.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetworkClassificationTosFieldValue.setDescription('This parameter holds classification TOS field value.')
nsCommonConfigNetworkClassificationTosFieldMask = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 1, 3, 1, 1, 3), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigNetworkClassificationTosFieldMask.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetworkClassificationTosFieldMask.setDescription('This parameter holds classification TOS field mask.')
nsCommonConfigNetworkClassificationTosCoS = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 255))).clone(namedValues=NamedValues(("cos0", 1), ("cos1", 2), ("cos2", 3), ("cos3", 4), ("cos4", 5), ("cos5", 6), ("cos6", 7), ("cos7", 8), ("notApplicable", 255)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigNetworkClassificationTosCoS.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetworkClassificationTosCoS.setDescription('This parameter holds classification TOS CoS.')
nsCommonConfigNetworkClassificationTosNotifyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 1, 3, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigNetworkClassificationTosNotifyRowStatus.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetworkClassificationTosNotifyRowStatus.setDescription('Used to create new rows or delete in the table. Note that all rows are active(1) at all times, since default values are given to empty parameters. Value createAndGo(4) is used when all row parameters are inserted at once, while createAndWait(5) is used to create row with default values. Value destroy(6) is used to remove a row')
nsCommonConfigNetworkClassificationTosColor = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 1, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("green", 0), ("yellow", 1), ("notApplicable", 255)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigNetworkClassificationTosColor.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetworkClassificationTosColor.setDescription('This parameter holds classification TOS Color. Not yet supported.')
nsCommonConfigNetworkClassificationMf = ObjectIdentity((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 1, 4))
if mibBuilder.loadTexts: nsCommonConfigNetworkClassificationMf.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetworkClassificationMf.setDescription('Common MIB branch that holds all Common classification parameters.')
nsCommonConfigNetworkClassificationMfTable = MibTable((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 1, 4, 1), )
if mibBuilder.loadTexts: nsCommonConfigNetworkClassificationMfTable.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetworkClassificationMfTable.setDescription('A list of Classification Mf parameters')
nsCommonConfigNetworkClassificationMfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 1, 4, 1, 1), ).setIndexNames((0, "NOVELSAT-COMMON-MIB", "nsCommonConfigNetworkClassificationMfPriority"))
if mibBuilder.loadTexts: nsCommonConfigNetworkClassificationMfEntry.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetworkClassificationMfEntry.setDescription('Conceptual row in table for each neighbor.')
nsCommonConfigNetworkClassificationMfPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 1, 4, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: nsCommonConfigNetworkClassificationMfPriority.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetworkClassificationMfPriority.setDescription('This parameter holds classification MF priority.')
nsCommonConfigNetworkClassificationMfName = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 1, 4, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigNetworkClassificationMfName.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetworkClassificationMfName.setDescription('This parameter holds classification MF name.')
nsCommonConfigNetworkClassificationMfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1), ("notApplicable", 255)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigNetworkClassificationMfAdminStatus.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetworkClassificationMfAdminStatus.setDescription("This parameter holds classification MF's administrative status.")
nsCommonConfigNetworkClassificationMfVidHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 1, 4, 1, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigNetworkClassificationMfVidHigh.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetworkClassificationMfVidHigh.setDescription('This parameter holds classification MF VID high.')
nsCommonConfigNetworkClassificationMfVidLow = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 1, 4, 1, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigNetworkClassificationMfVidLow.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetworkClassificationMfVidLow.setDescription('This parameter holds classification MF VID low.')
nsCommonConfigNetworkClassificationMfSrcIpAddressHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 1, 4, 1, 1, 6), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigNetworkClassificationMfSrcIpAddressHigh.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetworkClassificationMfSrcIpAddressHigh.setDescription('This parameter holds classification MF source IP Address high.')
nsCommonConfigNetworkClassificationMfSrcIpAddressLow = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 1, 4, 1, 1, 7), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigNetworkClassificationMfSrcIpAddressLow.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetworkClassificationMfSrcIpAddressLow.setDescription('This parameter holds classification MF source IP Address low.')
nsCommonConfigNetworkClassificationMfDestIpAddressHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 1, 4, 1, 1, 8), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigNetworkClassificationMfDestIpAddressHigh.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetworkClassificationMfDestIpAddressHigh.setDescription('This parameter holds classification MF destination IP Address high.')
nsCommonConfigNetworkClassificationMfDestIpAddressLow = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 1, 4, 1, 1, 9), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigNetworkClassificationMfDestIpAddressLow.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetworkClassificationMfDestIpAddressLow.setDescription('This parameter holds classification MF destination IP Address low.')
nsCommonConfigNetworkClassificationMfProtocolStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 1, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1), ("notApplicable", 255)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigNetworkClassificationMfProtocolStatus.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetworkClassificationMfProtocolStatus.setDescription("This parameter holds classification MF's protocol status.")
nsCommonConfigNetworkClassificationMfProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 1, 4, 1, 1, 11), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigNetworkClassificationMfProtocol.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetworkClassificationMfProtocol.setDescription('This parameter holds classification MF protocol.')
nsCommonConfigNetworkClassificationMfSrcPortHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 1, 4, 1, 1, 12), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigNetworkClassificationMfSrcPortHigh.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetworkClassificationMfSrcPortHigh.setDescription('This parameter holds classification MF source port high.')
nsCommonConfigNetworkClassificationMfSrcPortLow = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 1, 4, 1, 1, 13), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigNetworkClassificationMfSrcPortLow.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetworkClassificationMfSrcPortLow.setDescription('This parameter holds classification MF source port low.')
nsCommonConfigNetworkClassificationMfDestPortHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 1, 4, 1, 1, 14), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigNetworkClassificationMfDestPortHigh.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetworkClassificationMfDestPortHigh.setDescription('This parameter holds classification MF destination port high.')
nsCommonConfigNetworkClassificationMfDestPortLow = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 1, 4, 1, 1, 15), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigNetworkClassificationMfDestPortLow.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetworkClassificationMfDestPortLow.setDescription('This parameter holds classification MF destination port low.')
nsCommonConfigNetworkClassificationMfCoS = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 1, 4, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 255))).clone(namedValues=NamedValues(("cos0", 1), ("cos1", 2), ("cos2", 3), ("cos3", 4), ("cos4", 5), ("cos5", 6), ("cos6", 7), ("cos7", 8), ("notApplicable", 255)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigNetworkClassificationMfCoS.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetworkClassificationMfCoS.setDescription('This parameter holds classification MF CoS.')
nsCommonConfigNetworkClassificationMfNotifyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 1, 4, 1, 1, 17), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigNetworkClassificationMfNotifyRowStatus.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetworkClassificationMfNotifyRowStatus.setDescription('Used to create new rows or delete in the table. Note that all rows are active(1) at all times, since default values are given to empty parameters. Value createAndGo(4) is used when all row parameters are inserted at once, while createAndWait(5) is used to create row with default values. Value destroy(6) is used to remove a row')
nsCommonConfigNetworkQueues = ObjectIdentity((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 2))
if mibBuilder.loadTexts: nsCommonConfigNetworkQueues.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetworkQueues.setDescription('Common MIB branch that holds all Common Queues parameters.')
nsCommonConfigNetworkQueuesTable = MibTable((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 2, 1), )
if mibBuilder.loadTexts: nsCommonConfigNetworkQueuesTable.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetworkQueuesTable.setDescription('A list of Queues parameters')
nsCommonConfigNetworkQueuesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 2, 1, 1), ).setIndexNames((0, "NOVELSAT-COMMON-MIB", "nsCommonConfigNetworkQueuesCos"))
if mibBuilder.loadTexts: nsCommonConfigNetworkQueuesEntry.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetworkQueuesEntry.setDescription('Conceptual row in table for each neighbor.')
nsCommonConfigNetworkQueuesCos = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 2, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: nsCommonConfigNetworkQueuesCos.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetworkQueuesCos.setDescription("This parameter holds queue's number.")
nsCommonConfigNetworkQueuesSchedulingMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("strictPriority", 0), ("drr", 1), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsCommonConfigNetworkQueuesSchedulingMethod.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetworkQueuesSchedulingMethod.setDescription("This parameter holds queue's scheduling method.")
nsCommonConfigNetworkQueuesWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 2, 1, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsCommonConfigNetworkQueuesWeight.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetworkQueuesWeight.setDescription("This parameter holds queue's weight.")
nsCommonConfigNetworkQueuesQueueDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 2, 1, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsCommonConfigNetworkQueuesQueueDepth.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetworkQueuesQueueDepth.setDescription("This parameter holds queue's max queue depth.")
nsCommonConfigNetworkQueuesDropDiscipline = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("tailDrop", 0), ("wred", 1), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsCommonConfigNetworkQueuesDropDiscipline.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetworkQueuesDropDiscipline.setDescription("This parameter holds queue's scheduling method.")
nsCommonConfigNetworkRemoteScheduling = ObjectIdentity((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 3))
if mibBuilder.loadTexts: nsCommonConfigNetworkRemoteScheduling.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetworkRemoteScheduling.setDescription('Common MIB branch that holds all Common neighbor scheduling parameters. Not yet supported... ')
nsCommonConfigNetworkRemoteSchedulingMethod = MibScalar((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 255))).clone(namedValues=NamedValues(("proprietry", 0), ("drr", 1), ("wrr", 2), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsCommonConfigNetworkRemoteSchedulingMethod.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetworkRemoteSchedulingMethod.setDescription("This parameter holds neighbor scheduling's method. Not yet supported. ")
nsCommonConfigNetworkRemoteSchedulingFrameMerging = MibScalar((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsCommonConfigNetworkRemoteSchedulingFrameMerging.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetworkRemoteSchedulingFrameMerging.setDescription("This parameter holds neighbor scheduling's frame merging status. Not yet supported. ")
nsCommonConfigNetworkRemoteSchedulingCosSignificance = MibScalar((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("global", 0), ("perRemote", 1), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsCommonConfigNetworkRemoteSchedulingCosSignificance.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetworkRemoteSchedulingCosSignificance.setDescription("This parameter holds neighbor scheduling's COS significance. Not yet supported. ")
nsCommonConfigNetworkBwManagement = ObjectIdentity((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 4))
if mibBuilder.loadTexts: nsCommonConfigNetworkBwManagement.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetworkBwManagement.setDescription('Common MIB branch that holds all Common bandwidth management parameters. Not yet supported.')
nsCommonConfigNetworkBwManagementTable = MibTable((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 4, 1), )
if mibBuilder.loadTexts: nsCommonConfigNetworkBwManagementTable.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetworkBwManagementTable.setDescription('A list of BwManagement parameters')
nsCommonConfigNetworkBwManagementEntry = MibTableRow((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 4, 1, 1), ).setIndexNames((0, "NOVELSAT-COMMON-MIB", "nsCommonConfigNetworkBwManagementIndex"))
if mibBuilder.loadTexts: nsCommonConfigNetworkBwManagementEntry.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetworkBwManagementEntry.setDescription('Conceptual row in table for each neighbor.')
nsCommonConfigNetworkBwManagementIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 4, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: nsCommonConfigNetworkBwManagementIndex.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetworkBwManagementIndex.setDescription("This parameter holds bandwidth management's number.")
nsCommonConfigNetworkBwManagementNeighborIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 4, 1, 1, 2), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigNetworkBwManagementNeighborIndex.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetworkBwManagementNeighborIndex.setDescription("This parameter holds bandwidth management's neighbor's index.")
nsCommonConfigNetworkBwManagementAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1), ("notApplicable", 255)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigNetworkBwManagementAdminStatus.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetworkBwManagementAdminStatus.setDescription("This parameter holds bandwidth management's administrative status.")
nsCommonConfigNetworkBwManagementCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 4, 1, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigNetworkBwManagementCIR.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetworkBwManagementCIR.setDescription("This parameter holds bandwidth management's CIR in bps.")
nsCommonConfigNetworkBwManagementCBS = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 4, 1, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigNetworkBwManagementCBS.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetworkBwManagementCBS.setDescription("This parameter holds bandwidth management's CBS in bits.")
nsCommonConfigNetworkBwManagementEIR = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 4, 1, 1, 6), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigNetworkBwManagementEIR.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetworkBwManagementEIR.setDescription("This parameter holds bandwidth management's EIR in bps.")
nsCommonConfigNetworkBwManagementEBS = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 4, 1, 1, 7), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigNetworkBwManagementEBS.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetworkBwManagementEBS.setDescription("This parameter holds bandwidth management's EBS in bits.")
nsCommonConfigNetworkBwManagementRefModulation = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 255))).clone(namedValues=NamedValues(("modulationBpsk", 0), ("modulationQpsk", 1), ("modulation8Psk", 2), ("modulation16Qam", 3), ("modulation16Apsk", 4), ("modulation32Apsk", 5), ("modulation64Apsk", 6), ("notApplicable", 255)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigNetworkBwManagementRefModulation.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetworkBwManagementRefModulation.setDescription("This parameter holds bandwidth management's reference modulation.")
nsCommonConfigNetworkBwManagementRefFecRate = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 255))).clone(namedValues=NamedValues(("fec1Div5", 0), ("fec1Div4", 1), ("fec1Div3", 2), ("fec2Div5", 3), ("fec13Div30", 4), ("fec4Div9", 5), ("fec7Div15", 6), ("fec22Div45", 7), ("fec1Div2", 8), ("fec8Div15", 9), ("fec5Div9", 10), ("fec17Div30", 11), ("fec3Div5", 12), ("fec28Div45", 13), ("fec19Div30", 14), ("fec2Div3", 15), ("fec32Div45", 16), ("fec11Div15", 17), ("fec3Div4", 18), ("fec7Div9", 19), ("fec4Div5", 20), ("fec37Div45", 21), ("fec5Div6", 22), ("fec7Div8", 23), ("fec8Div9", 24), ("fec9Div10", 25), ("notApplicable", 255)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigNetworkBwManagementRefFecRate.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetworkBwManagementRefFecRate.setDescription("This parameter holds bandwidth management's reference FEC rate.")
nsCommonConfigNetworkBwManagementPercentage = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 4, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonConfigNetworkBwManagementPercentage.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetworkBwManagementPercentage.setDescription("This parameter holds bandwidth management's percentage in hundreds of percentage.")
nsCommonConfigNetworkBwManagementNotifyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 1, 7, 6, 4, 1, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsCommonConfigNetworkBwManagementNotifyRowStatus.setStatus('current')
if mibBuilder.loadTexts: nsCommonConfigNetworkBwManagementNotifyRowStatus.setDescription('Used to create new rows or delete in the table. Note that all rows are active(1) at all times, since default values are given to empty parameters. Value createAndGo(4) is used when all row parameters are inserted at once, while createAndWait(5) is used to create row with default values. Value destroy(6) is used to remove a row')
nsCommonMonitor = ObjectIdentity((1, 3, 6, 1, 4, 1, 37576, 2, 2))
if mibBuilder.loadTexts: nsCommonMonitor.setStatus('current')
if mibBuilder.loadTexts: nsCommonMonitor.setDescription('Common MIB branch that holds all Common status and alarms.')
nsCommonMonitorNotifications = ObjectIdentity((1, 3, 6, 1, 4, 1, 37576, 2, 2, 0))
if mibBuilder.loadTexts: nsCommonMonitorNotifications.setStatus('current')
if mibBuilder.loadTexts: nsCommonMonitorNotifications.setDescription('Common MIB branch that holds all Common notifications.')
nsCommonMonitorEventNotification = NotificationType((1, 3, 6, 1, 4, 1, 37576, 2, 2, 0, 1)).setObjects(("NOVELSAT-COMMON-MIB", "nsCommonMonitorEventsDateAndTime"), ("NOVELSAT-COMMON-MIB", "nsCommonMonitorEventsType"), ("NOVELSAT-COMMON-MIB", "nsCommonMonitorEventsSeverity"), ("NOVELSAT-COMMON-MIB", "nsCommonMonitorEventsSource"), ("NOVELSAT-COMMON-MIB", "nsCommonMonitorEventsEvent"), ("NOVELSAT-COMMON-MIB", "nsCommonMonitorEventsDescription"))
if mibBuilder.loadTexts: nsCommonMonitorEventNotification.setStatus('current')
if mibBuilder.loadTexts: nsCommonMonitorEventNotification.setDescription('This notification is sent by the target when an event is triggered')
nsCommonMonitorAlarms = ObjectIdentity((1, 3, 6, 1, 4, 1, 37576, 2, 2, 1))
if mibBuilder.loadTexts: nsCommonMonitorAlarms.setStatus('current')
if mibBuilder.loadTexts: nsCommonMonitorAlarms.setDescription('Common MIB branch that holds all Common Alarms.')
nsCommonMonitorAlarmsTable = MibTable((1, 3, 6, 1, 4, 1, 37576, 2, 2, 1, 1), )
if mibBuilder.loadTexts: nsCommonMonitorAlarmsTable.setStatus('current')
if mibBuilder.loadTexts: nsCommonMonitorAlarmsTable.setDescription('List of Alarms occured')
nsCommonMonitorAlarmsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 37576, 2, 2, 1, 1, 1), ).setIndexNames((0, "NOVELSAT-COMMON-MIB", "nsCommonMonitorAlarmsUtcSecondsHigh"), (0, "NOVELSAT-COMMON-MIB", "nsCommonMonitorAlarmsUtcSecondsLow"), (0, "NOVELSAT-COMMON-MIB", "nsCommonMonitorAlarmsUtcNanoSecondsHigh"), (0, "NOVELSAT-COMMON-MIB", "nsCommonMonitorAlarmsUtcNanoSecondsLow"))
if mibBuilder.loadTexts: nsCommonMonitorAlarmsEntry.setStatus('current')
if mibBuilder.loadTexts: nsCommonMonitorAlarmsEntry.setDescription('Conceptual row in table for each event.')
nsCommonMonitorAlarmsUtcSecondsHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 1, 1, 1, 1), Counter32())
if mibBuilder.loadTexts: nsCommonMonitorAlarmsUtcSecondsHigh.setStatus('current')
if mibBuilder.loadTexts: nsCommonMonitorAlarmsUtcSecondsHigh.setDescription('Seconds passed from EPOCH')
nsCommonMonitorAlarmsUtcSecondsLow = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 1, 1, 1, 2), Counter32())
if mibBuilder.loadTexts: nsCommonMonitorAlarmsUtcSecondsLow.setStatus('current')
if mibBuilder.loadTexts: nsCommonMonitorAlarmsUtcSecondsLow.setDescription('Seconds passed from EPOCH')
nsCommonMonitorAlarmsUtcNanoSecondsHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 1, 1, 1, 3), Counter32())
if mibBuilder.loadTexts: nsCommonMonitorAlarmsUtcNanoSecondsHigh.setStatus('current')
if mibBuilder.loadTexts: nsCommonMonitorAlarmsUtcNanoSecondsHigh.setDescription('Seconds passed from EPOCH')
nsCommonMonitorAlarmsUtcNanoSecondsLow = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 1, 1, 1, 4), Counter32())
if mibBuilder.loadTexts: nsCommonMonitorAlarmsUtcNanoSecondsLow.setStatus('current')
if mibBuilder.loadTexts: nsCommonMonitorAlarmsUtcNanoSecondsLow.setDescription('Seconds passed from EPOCH')
nsCommonMonitorAlarmsDateAndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 1, 1, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorAlarmsDateAndTime.setStatus('current')
if mibBuilder.loadTexts: nsCommonMonitorAlarmsDateAndTime.setDescription('Date and Time of event')
nsCommonMonitorAlarmsSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 1, 1, 1, 6), ItuPerceivedSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorAlarmsSeverity.setStatus('current')
if mibBuilder.loadTexts: nsCommonMonitorAlarmsSeverity.setDescription('Severity of event')
nsCommonMonitorAlarmsSource = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 1, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorAlarmsSource.setStatus('current')
if mibBuilder.loadTexts: nsCommonMonitorAlarmsSource.setDescription('Severity of event')
nsCommonMonitorAlarmsEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 1, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorAlarmsEvent.setStatus('current')
if mibBuilder.loadTexts: nsCommonMonitorAlarmsEvent.setDescription('Severity of event')
nsCommonMonitorAlarmsDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 1, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorAlarmsDescription.setStatus('current')
if mibBuilder.loadTexts: nsCommonMonitorAlarmsDescription.setDescription('Severity of event')
nsCommonMonitorEvents = ObjectIdentity((1, 3, 6, 1, 4, 1, 37576, 2, 2, 2))
if mibBuilder.loadTexts: nsCommonMonitorEvents.setStatus('current')
if mibBuilder.loadTexts: nsCommonMonitorEvents.setDescription('Common MIB branch that holds all Common events.')
nsCommonMonitorEventsTable = MibTable((1, 3, 6, 1, 4, 1, 37576, 2, 2, 2, 1), )
if mibBuilder.loadTexts: nsCommonMonitorEventsTable.setStatus('current')
if mibBuilder.loadTexts: nsCommonMonitorEventsTable.setDescription('List of Events occured')
nsCommonMonitorEventsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 37576, 2, 2, 2, 1, 1), ).setIndexNames((0, "NOVELSAT-COMMON-MIB", "nsCommonMonitorEventsUtcSecondsHigh"), (0, "NOVELSAT-COMMON-MIB", "nsCommonMonitorEventsUtcSecondsLow"), (0, "NOVELSAT-COMMON-MIB", "nsCommonMonitorEventsUtcNanoSecondsHigh"), (0, "NOVELSAT-COMMON-MIB", "nsCommonMonitorEventsUtcNanoSecondsLow"))
if mibBuilder.loadTexts: nsCommonMonitorEventsEntry.setStatus('current')
if mibBuilder.loadTexts: nsCommonMonitorEventsEntry.setDescription('Conceptual row in table for each event.')
nsCommonMonitorEventsUtcSecondsHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 2, 1, 1, 1), Counter32())
if mibBuilder.loadTexts: nsCommonMonitorEventsUtcSecondsHigh.setStatus('current')
if mibBuilder.loadTexts: nsCommonMonitorEventsUtcSecondsHigh.setDescription('Seconds passed from EPOCH')
nsCommonMonitorEventsUtcSecondsLow = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 2, 1, 1, 2), Counter32())
if mibBuilder.loadTexts: nsCommonMonitorEventsUtcSecondsLow.setStatus('current')
if mibBuilder.loadTexts: nsCommonMonitorEventsUtcSecondsLow.setDescription('Seconds passed from EPOCH')
nsCommonMonitorEventsUtcNanoSecondsHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 2, 1, 1, 3), Counter32())
if mibBuilder.loadTexts: nsCommonMonitorEventsUtcNanoSecondsHigh.setStatus('current')
if mibBuilder.loadTexts: nsCommonMonitorEventsUtcNanoSecondsHigh.setDescription('Seconds passed from EPOCH')
nsCommonMonitorEventsUtcNanoSecondsLow = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 2, 1, 1, 4), Counter32())
if mibBuilder.loadTexts: nsCommonMonitorEventsUtcNanoSecondsLow.setStatus('current')
if mibBuilder.loadTexts: nsCommonMonitorEventsUtcNanoSecondsLow.setDescription('Seconds passed from EPOCH')
nsCommonMonitorEventsDateAndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 2, 1, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorEventsDateAndTime.setStatus('current')
if mibBuilder.loadTexts: nsCommonMonitorEventsDateAndTime.setDescription('Date and Time of event')
nsCommonMonitorEventsType = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("info", 1), ("alarmOn", 2), ("alarmOff", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorEventsType.setStatus('current')
if mibBuilder.loadTexts: nsCommonMonitorEventsType.setDescription('Severity of event')
nsCommonMonitorEventsSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 2, 1, 1, 7), ItuPerceivedSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorEventsSeverity.setStatus('current')
if mibBuilder.loadTexts: nsCommonMonitorEventsSeverity.setDescription('Severity of event')
nsCommonMonitorEventsSource = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 2, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorEventsSource.setStatus('current')
if mibBuilder.loadTexts: nsCommonMonitorEventsSource.setDescription('Severity of event')
nsCommonMonitorEventsEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 2, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorEventsEvent.setStatus('current')
if mibBuilder.loadTexts: nsCommonMonitorEventsEvent.setDescription('Severity of event')
nsCommonMonitorEventsDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 2, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorEventsDescription.setStatus('current')
if mibBuilder.loadTexts: nsCommonMonitorEventsDescription.setDescription('Severity of event')
nsCommonMonitorVoltage = ObjectIdentity((1, 3, 6, 1, 4, 1, 37576, 2, 2, 3))
if mibBuilder.loadTexts: nsCommonMonitorVoltage.setStatus('current')
if mibBuilder.loadTexts: nsCommonMonitorVoltage.setDescription('Common MIB branch that holds all Voltage status.')
nsCommonMonitorVoltageTable = MibTable((1, 3, 6, 1, 4, 1, 37576, 2, 2, 3, 1), )
if mibBuilder.loadTexts: nsCommonMonitorVoltageTable.setStatus('current')
if mibBuilder.loadTexts: nsCommonMonitorVoltageTable.setDescription('List of Events occured')
nsCommonMonitorVoltageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 37576, 2, 2, 3, 1, 1), ).setIndexNames((0, "NOVELSAT-COMMON-MIB", "nsCommonMonitorVoltageIndex"))
if mibBuilder.loadTexts: nsCommonMonitorVoltageEntry.setStatus('current')
if mibBuilder.loadTexts: nsCommonMonitorVoltageEntry.setDescription('Conceptual row in table for each event.')
nsCommonMonitorVoltageIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 3, 1, 1, 1), Counter32())
if mibBuilder.loadTexts: nsCommonMonitorVoltageIndex.setStatus('current')
if mibBuilder.loadTexts: nsCommonMonitorVoltageIndex.setDescription('Device voltage status index')
nsCommonMonitorVoltageName = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorVoltageName.setStatus('current')
if mibBuilder.loadTexts: nsCommonMonitorVoltageName.setDescription('Name of voltage status')
nsCommonMonitorVoltageValue = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorVoltageValue.setStatus('current')
if mibBuilder.loadTexts: nsCommonMonitorVoltageValue.setDescription('Value of voltage status in mVoltage')
nsCommonMonitorPowerSupply = ObjectIdentity((1, 3, 6, 1, 4, 1, 37576, 2, 2, 4))
if mibBuilder.loadTexts: nsCommonMonitorPowerSupply.setStatus('current')
if mibBuilder.loadTexts: nsCommonMonitorPowerSupply.setDescription('Common MIB branch that holds all power supply status.')
nsCommonMonitorPowerSupplyTable = MibTable((1, 3, 6, 1, 4, 1, 37576, 2, 2, 4, 1), )
if mibBuilder.loadTexts: nsCommonMonitorPowerSupplyTable.setStatus('current')
if mibBuilder.loadTexts: nsCommonMonitorPowerSupplyTable.setDescription('List of Events occured')
nsCommonMonitorPowerSupplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 37576, 2, 2, 4, 1, 1), ).setIndexNames((0, "NOVELSAT-COMMON-MIB", "nsCommonMonitorPowerSupplyIndex"))
if mibBuilder.loadTexts: nsCommonMonitorPowerSupplyEntry.setStatus('current')
if mibBuilder.loadTexts: nsCommonMonitorPowerSupplyEntry.setDescription('Conceptual row in table for each event.')
nsCommonMonitorPowerSupplyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 4, 1, 1, 1), Counter32())
if mibBuilder.loadTexts: nsCommonMonitorPowerSupplyIndex.setStatus('current')
if mibBuilder.loadTexts: nsCommonMonitorPowerSupplyIndex.setDescription('Device Power Supply status index')
nsCommonMonitorPowerSupplyName = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 4, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorPowerSupplyName.setStatus('current')
if mibBuilder.loadTexts: nsCommonMonitorPowerSupplyName.setDescription('Name of Power Supply status')
nsCommonMonitorPowerSupplyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 4, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorPowerSupplyValue.setStatus('current')
if mibBuilder.loadTexts: nsCommonMonitorPowerSupplyValue.setDescription('Value of Power Supply status')
nsCommonMonitorNetwork = ObjectIdentity((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5))
if mibBuilder.loadTexts: nsCommonMonitorNetwork.setStatus('current')
if mibBuilder.loadTexts: nsCommonMonitorNetwork.setDescription('Common MIB branch that holds all network statuses.')
nsCommonMonitorNetworkInterfaces = ObjectIdentity((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 1))
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfaces.setStatus('current')
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfaces.setDescription('Common MIB branch that holds all network interfaces statuses.')
nsCommonMonitorNetworkInterfacesLanTable = MibTable((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 1, 1), )
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfacesLanTable.setStatus('current')
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfacesLanTable.setDescription('List of interface statuses')
nsCommonMonitorNetworkInterfacesLanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 1, 1, 1), ).setIndexNames((0, "NOVELSAT-COMMON-MIB", "nsCommonMonitorNetworkInterfacesLanIndex"))
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfacesLanEntry.setStatus('current')
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfacesLanEntry.setDescription('Conceptual row in table for each event.')
nsCommonMonitorNetworkInterfacesLanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 1, 1, 1, 1), Counter32())
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfacesLanIndex.setStatus('current')
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfacesLanIndex.setDescription('Network LAN Interfaces status index')
nsCommonMonitorNetworkInterfacesLanName = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfacesLanName.setStatus('current')
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfacesLanName.setDescription('Network LAN Interfaces status name')
nsCommonMonitorNetworkInterfacesLanAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfacesLanAdminStatus.setStatus('current')
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfacesLanAdminStatus.setDescription('Network LAN Interfaces administrator status')
nsCommonMonitorNetworkInterfacesLanOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfacesLanOperStatus.setStatus('current')
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfacesLanOperStatus.setDescription('Network LAN Interfaces administrator status')
nsCommonMonitorNetworkInterfacesLanPort = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 1, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfacesLanPort.setStatus('current')
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfacesLanPort.setDescription('Network LAN Interfaces port status')
nsCommonMonitorNetworkInterfacesLanVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 1, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfacesLanVlan.setStatus('current')
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfacesLanVlan.setDescription('Network LAN Interfaces port status')
nsCommonMonitorNetworkInterfacesLanMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 1, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfacesLanMacAddress.setStatus('current')
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfacesLanMacAddress.setDescription('Network LAN Interfaces port status')
nsCommonMonitorNetworkInterfacesLanIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 1, 1, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfacesLanIpAddress.setStatus('current')
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfacesLanIpAddress.setDescription('Network LAN Interfaces port status')
nsCommonMonitorNetworkInterfacesLanSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 1, 1, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfacesLanSubnetMask.setStatus('current')
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfacesLanSubnetMask.setDescription('Network LAN Interfaces port status')
nsCommonMonitorNetworkInterfacesSatTable = MibTable((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 1, 2), )
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfacesSatTable.setStatus('current')
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfacesSatTable.setDescription('List of interface statuses')
nsCommonMonitorNetworkInterfacesSatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 1, 2, 1), ).setIndexNames((0, "NOVELSAT-COMMON-MIB", "nsCommonMonitorNetworkInterfacesSatIndex"))
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfacesSatEntry.setStatus('current')
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfacesSatEntry.setDescription('Conceptual row in table for each event.')
nsCommonMonitorNetworkInterfacesSatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 1, 2, 1, 1), Counter32())
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfacesSatIndex.setStatus('current')
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfacesSatIndex.setDescription('Network SAT Interfaces status index')
nsCommonMonitorNetworkInterfacesSatName = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfacesSatName.setStatus('current')
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfacesSatName.setDescription('Network SAT Interfaces status name')
nsCommonMonitorNetworkInterfacesSatAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfacesSatAdminStatus.setStatus('current')
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfacesSatAdminStatus.setDescription('Network SAT Interfaces administrator status')
nsCommonMonitorNetworkInterfacesSatOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfacesSatOperStatus.setStatus('current')
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfacesSatOperStatus.setDescription('Network SAT Interfaces operational status')
nsCommonMonitorNetworkInterfacesSatPort = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 1, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfacesSatPort.setStatus('current')
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfacesSatPort.setDescription('Network SAT Interfaces port status')
nsCommonMonitorNetworkInterfacesSatPid = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 1, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfacesSatPid.setStatus('current')
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfacesSatPid.setDescription('Network SAT Interfaces PID status')
nsCommonMonitorNetworkInterfacesSatMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 1, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfacesSatMacAddress.setStatus('current')
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfacesSatMacAddress.setDescription('Network SAT Interfaces mac address status')
nsCommonMonitorNetworkInterfacesSatIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 1, 2, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfacesSatIpAddress.setStatus('current')
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfacesSatIpAddress.setDescription('Network SAT Interfaces ip address status')
nsCommonMonitorNetworkInterfacesSatSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 1, 2, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfacesSatSubnetMask.setStatus('current')
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfacesSatSubnetMask.setDescription('Network SAT Interfaces subnet mask status')
nsCommonMonitorNetworkInterfacesSatEncapsulation = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 255))).clone(namedValues=NamedValues(("encapsulationEth", 0), ("encapsulationEth8021q", 1), ("ule", 2), ("gse", 3), ("nspe", 4), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfacesSatEncapsulation.setStatus('current')
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfacesSatEncapsulation.setDescription('Network SAT Interfaces encapsulation status')
nsCommonMonitorNetworkInterfaceStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 2), )
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfaceStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfaceStatisticsTable.setDescription('List of interface statuses')
nsCommonMonitorNetworkInterfaceStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 2, 1), ).setIndexNames((0, "NOVELSAT-COMMON-MIB", "nsCommonMonitorNetworkInterfaceStatisticsIndex"))
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfaceStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfaceStatisticsEntry.setDescription('Conceptual row in table for each event.')
nsCommonMonitorNetworkInterfaceStatisticsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 2, 1, 1), Counter32())
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfaceStatisticsIndex.setStatus('current')
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfaceStatisticsIndex.setDescription("Network InterfaceStatistics interface's index")
nsCommonMonitorNetworkInterfaceStatisticsMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 2, 1, 2), Unsigned32())
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfaceStatisticsMtu.setStatus('current')
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfaceStatisticsMtu.setDescription("Network InterfaceStatistics interface's MTU")
nsCommonMonitorNetworkInterfaceStatisticsRxOk = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 2, 1, 3), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfaceStatisticsRxOk.setStatus('current')
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfaceStatisticsRxOk.setDescription('Network Interface Statistics RX OK')
nsCommonMonitorNetworkInterfaceStatisticsRxError = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 2, 1, 4), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfaceStatisticsRxError.setStatus('current')
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfaceStatisticsRxError.setDescription('Network Interface Statistics RX Errors')
nsCommonMonitorNetworkInterfaceStatisticsRxDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 2, 1, 5), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfaceStatisticsRxDrop.setStatus('current')
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfaceStatisticsRxDrop.setDescription('Network Interface Statistics RX Drop')
nsCommonMonitorNetworkInterfaceStatisticsRxOvr = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 2, 1, 6), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfaceStatisticsRxOvr.setStatus('current')
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfaceStatisticsRxOvr.setDescription('Network Interface Statistics RX Ovr')
nsCommonMonitorNetworkInterfaceStatisticsTxOk = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 2, 1, 7), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfaceStatisticsTxOk.setStatus('current')
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfaceStatisticsTxOk.setDescription('Network Interface Statistics TX OK')
nsCommonMonitorNetworkInterfaceStatisticsTxError = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 2, 1, 8), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfaceStatisticsTxError.setStatus('current')
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfaceStatisticsTxError.setDescription('Network Interface Statistics TX Errors')
nsCommonMonitorNetworkInterfaceStatisticsTxDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 2, 1, 9), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfaceStatisticsTxDrop.setStatus('current')
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfaceStatisticsTxDrop.setDescription('Network Interface Statistics TX Drop')
nsCommonMonitorNetworkInterfaceStatisticsTxOvr = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 2, 1, 10), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfaceStatisticsTxOvr.setStatus('current')
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfaceStatisticsTxOvr.setDescription('Network Interface Statistics TX Ovr')
nsCommonMonitorNetworkInterfaceStatisticsRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 2, 1, 11), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfaceStatisticsRxBytes.setStatus('current')
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfaceStatisticsRxBytes.setDescription('Network Interface Statistics RX Bytes')
nsCommonMonitorNetworkInterfaceStatisticsTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 2, 1, 12), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfaceStatisticsTxBytes.setStatus('current')
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfaceStatisticsTxBytes.setDescription('Network Interface Statistics TX Bytes')
nsCommonMonitorNetworkInterfaceStatisticsRxBps = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 2, 1, 13), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfaceStatisticsRxBps.setStatus('current')
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfaceStatisticsRxBps.setDescription('Network Interface Statistics RX Bps')
nsCommonMonitorNetworkInterfaceStatisticsTxBps = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 2, 1, 14), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfaceStatisticsTxBps.setStatus('current')
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfaceStatisticsTxBps.setDescription('Network Interface Statistics TX Bps')
nsCommonMonitorNetworkInterfaceStatisticsName = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 2, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfaceStatisticsName.setStatus('current')
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfaceStatisticsName.setDescription('Network Interface Name')
nsCommonMonitorNetworkQueuesStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 3), )
if mibBuilder.loadTexts: nsCommonMonitorNetworkQueuesStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: nsCommonMonitorNetworkQueuesStatisticsTable.setDescription('List of interface statuses')
nsCommonMonitorNetworkQueuesStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 3, 1), ).setIndexNames((0, "NOVELSAT-COMMON-MIB", "nsCommonMonitorNetworkQueuesStatisticsNeighborIndex"), (0, "NOVELSAT-COMMON-MIB", "nsCommonMonitorNetworkQueuesStatisticsCos"))
if mibBuilder.loadTexts: nsCommonMonitorNetworkQueuesStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: nsCommonMonitorNetworkQueuesStatisticsEntry.setDescription('Conceptual row in table for each event.')
nsCommonMonitorNetworkQueuesStatisticsNeighborIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 3, 1, 1), Counter32())
if mibBuilder.loadTexts: nsCommonMonitorNetworkQueuesStatisticsNeighborIndex.setStatus('current')
if mibBuilder.loadTexts: nsCommonMonitorNetworkQueuesStatisticsNeighborIndex.setDescription("Network QueuesStatistics neighbor's index")
nsCommonMonitorNetworkQueuesStatisticsCos = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 255))).clone(namedValues=NamedValues(("cos0", 1), ("cos1", 2), ("cos2", 3), ("cos3", 4), ("cos4", 5), ("cos5", 6), ("cos6", 7), ("cos7", 8), ("notApplicable", 255))))
if mibBuilder.loadTexts: nsCommonMonitorNetworkQueuesStatisticsCos.setStatus('current')
if mibBuilder.loadTexts: nsCommonMonitorNetworkQueuesStatisticsCos.setDescription('Network Queues Statistics TX Bytes value')
nsCommonMonitorNetworkQueuesStatisticsEnqueuedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorNetworkQueuesStatisticsEnqueuedBytes.setStatus('current')
if mibBuilder.loadTexts: nsCommonMonitorNetworkQueuesStatisticsEnqueuedBytes.setDescription('Network Queues Statistics enqueued bytes value')
nsCommonMonitorNetworkQueuesStatisticsEnqueuedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorNetworkQueuesStatisticsEnqueuedPackets.setStatus('current')
if mibBuilder.loadTexts: nsCommonMonitorNetworkQueuesStatisticsEnqueuedPackets.setDescription('Network Queues Statistics enqueued packets value')
nsCommonMonitorNetworkQueuesStatisticsBackloggedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorNetworkQueuesStatisticsBackloggedBytes.setStatus('current')
if mibBuilder.loadTexts: nsCommonMonitorNetworkQueuesStatisticsBackloggedBytes.setDescription('Network Queues Statistics backlogged bytes value')
nsCommonMonitorNetworkQueuesStatisticsBackloggedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorNetworkQueuesStatisticsBackloggedPackets.setStatus('current')
if mibBuilder.loadTexts: nsCommonMonitorNetworkQueuesStatisticsBackloggedPackets.setDescription('Network Queues Statistics backlogged packets value')
nsCommonMonitorNetworkQueuesStatisticsDroppedYellowPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorNetworkQueuesStatisticsDroppedYellowPackets.setStatus('current')
if mibBuilder.loadTexts: nsCommonMonitorNetworkQueuesStatisticsDroppedYellowPackets.setDescription('Network Queues Statistics dropped green packets bytes value')
nsCommonMonitorNetworkQueuesStatisticsDroppedGreenPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorNetworkQueuesStatisticsDroppedGreenPackets.setStatus('current')
if mibBuilder.loadTexts: nsCommonMonitorNetworkQueuesStatisticsDroppedGreenPackets.setDescription('Network Queues Statistics dropped yellow packets value')
nsCommonMonitorNetworkNeighborsStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 4), )
if mibBuilder.loadTexts: nsCommonMonitorNetworkNeighborsStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: nsCommonMonitorNetworkNeighborsStatisticsTable.setDescription('List of Neighbors statuses')
nsCommonMonitorNetworkNeighborsStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 4, 1), ).setIndexNames((0, "NOVELSAT-COMMON-MIB", "nsCommonMonitorNetworkNeighborsStatisticsIndex"))
if mibBuilder.loadTexts: nsCommonMonitorNetworkNeighborsStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: nsCommonMonitorNetworkNeighborsStatisticsEntry.setDescription('Conceptual row in table for each event.')
nsCommonMonitorNetworkNeighborsStatisticsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 4, 1, 1), Counter32())
if mibBuilder.loadTexts: nsCommonMonitorNetworkNeighborsStatisticsIndex.setStatus('current')
if mibBuilder.loadTexts: nsCommonMonitorNetworkNeighborsStatisticsIndex.setDescription("Network Neighbors Statistics neighbor's index")
nsCommonMonitorNetworkNeighborsStatisticsAverageTxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 4, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorNetworkNeighborsStatisticsAverageTxRate.setStatus('current')
if mibBuilder.loadTexts: nsCommonMonitorNetworkNeighborsStatisticsAverageTxRate.setDescription('Network Neighbors Statistics average TX rate value')
nsCommonMonitorNetworkNeighborsStatisticsAverageTxPacketRate = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 4, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorNetworkNeighborsStatisticsAverageTxPacketRate.setStatus('current')
if mibBuilder.loadTexts: nsCommonMonitorNetworkNeighborsStatisticsAverageTxPacketRate.setDescription('Network Neighbors Statistics average TX packets rate value')
nsCommonMonitorNetworkNeighborsStatisticsTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 4, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorNetworkNeighborsStatisticsTxBytes.setStatus('current')
if mibBuilder.loadTexts: nsCommonMonitorNetworkNeighborsStatisticsTxBytes.setDescription('Network Neighbors Statistics TX bytes value')
nsCommonMonitorNetworkNeighborsStatisticsTxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 4, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorNetworkNeighborsStatisticsTxPackets.setStatus('current')
if mibBuilder.loadTexts: nsCommonMonitorNetworkNeighborsStatisticsTxPackets.setDescription('Network Neighbors Statistics TX Packets value')
nsCommonMonitorNetworkBwManagementStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 5), )
if mibBuilder.loadTexts: nsCommonMonitorNetworkBwManagementStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: nsCommonMonitorNetworkBwManagementStatisticsTable.setDescription('List of interface statuses')
nsCommonMonitorNetworkBwManagementStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 5, 1), ).setIndexNames((0, "NOVELSAT-COMMON-MIB", "nsCommonMonitorNetworkBwManagementStatisticsNeighborIndex"))
if mibBuilder.loadTexts: nsCommonMonitorNetworkBwManagementStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: nsCommonMonitorNetworkBwManagementStatisticsEntry.setDescription('Conceptual row in table for each event.')
nsCommonMonitorNetworkBwManagementStatisticsNeighborIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 5, 1, 1), Counter32())
if mibBuilder.loadTexts: nsCommonMonitorNetworkBwManagementStatisticsNeighborIndex.setStatus('current')
if mibBuilder.loadTexts: nsCommonMonitorNetworkBwManagementStatisticsNeighborIndex.setDescription("Network BwManagementStatistics neighbor's index")
nsCommonMonitorNetworkBwManagementStatisticsGreenPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 5, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorNetworkBwManagementStatisticsGreenPackets.setStatus('current')
if mibBuilder.loadTexts: nsCommonMonitorNetworkBwManagementStatisticsGreenPackets.setDescription('Network BwManagement Statistics green packets value')
nsCommonMonitorNetworkBwManagementStatisticsGreenRates = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 5, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorNetworkBwManagementStatisticsGreenRates.setStatus('current')
if mibBuilder.loadTexts: nsCommonMonitorNetworkBwManagementStatisticsGreenRates.setDescription('Network BwManagement Statistics green rates value')
nsCommonMonitorNetworkBwManagementStatisticsYellowPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 5, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorNetworkBwManagementStatisticsYellowPackets.setStatus('current')
if mibBuilder.loadTexts: nsCommonMonitorNetworkBwManagementStatisticsYellowPackets.setDescription('Network BwManagement Statistics yellow packets value')
nsCommonMonitorNetworkBwManagementStatisticsYellowRates = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 5, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorNetworkBwManagementStatisticsYellowRates.setStatus('current')
if mibBuilder.loadTexts: nsCommonMonitorNetworkBwManagementStatisticsYellowRates.setDescription('Network BwManagement Statistics yellow rates value')
nsCommonMonitorNetworkBwManagementStatisticsRedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 5, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorNetworkBwManagementStatisticsRedPackets.setStatus('current')
if mibBuilder.loadTexts: nsCommonMonitorNetworkBwManagementStatisticsRedPackets.setDescription('Network BwManagement Statistics red packets value')
nsCommonMonitorNetworkBwManagementStatisticsRedRates = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 5, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonMonitorNetworkBwManagementStatisticsRedRates.setStatus('current')
if mibBuilder.loadTexts: nsCommonMonitorNetworkBwManagementStatisticsRedRates.setDescription('Network BwManagement Statistics red rates value')
nsCommonMonitorNetworkInterfaceClrCmd = MibScalar((1, 3, 6, 1, 4, 1, 37576, 2, 2, 5, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("none", 0), ("execute", 1), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfaceClrCmd.setStatus('current')
if mibBuilder.loadTexts: nsCommonMonitorNetworkInterfaceClrCmd.setDescription('Clear interfaces statistics counters command')
nsCommonSystem = ObjectIdentity((1, 3, 6, 1, 4, 1, 37576, 2, 3))
if mibBuilder.loadTexts: nsCommonSystem.setStatus('current')
if mibBuilder.loadTexts: nsCommonSystem.setDescription('Common MIB branch that holds all System status.')
nsCommonSystemSwVersion = ObjectIdentity((1, 3, 6, 1, 4, 1, 37576, 2, 3, 1))
if mibBuilder.loadTexts: nsCommonSystemSwVersion.setStatus('current')
if mibBuilder.loadTexts: nsCommonSystemSwVersion.setDescription('Common MIB branch that holds all Common software Version.')
nsCommonSystemSwVersionFirmware = MibScalar((1, 3, 6, 1, 4, 1, 37576, 2, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonSystemSwVersionFirmware.setStatus('current')
if mibBuilder.loadTexts: nsCommonSystemSwVersionFirmware.setDescription('Firmware version')
nsCommonSystemSwVersionOs = MibScalar((1, 3, 6, 1, 4, 1, 37576, 2, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonSystemSwVersionOs.setStatus('current')
if mibBuilder.loadTexts: nsCommonSystemSwVersionOs.setDescription('OS version')
nsCommonSystemSwVersionFs = MibScalar((1, 3, 6, 1, 4, 1, 37576, 2, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonSystemSwVersionFs.setStatus('current')
if mibBuilder.loadTexts: nsCommonSystemSwVersionFs.setDescription('FS version')
nsCommonSystemSwVersionDb = MibScalar((1, 3, 6, 1, 4, 1, 37576, 2, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonSystemSwVersionDb.setStatus('current')
if mibBuilder.loadTexts: nsCommonSystemSwVersionDb.setDescription('DB version')
nsCommonSystemSwVersionAppTable = MibTable((1, 3, 6, 1, 4, 1, 37576, 2, 3, 1, 5), )
if mibBuilder.loadTexts: nsCommonSystemSwVersionAppTable.setStatus('current')
if mibBuilder.loadTexts: nsCommonSystemSwVersionAppTable.setDescription('List of software Version')
nsCommonSystemSwVersionAppEntry = MibTableRow((1, 3, 6, 1, 4, 1, 37576, 2, 3, 1, 5, 1), ).setIndexNames((0, "NOVELSAT-COMMON-MIB", "nsCommonSystemSwVersionAppType"))
if mibBuilder.loadTexts: nsCommonSystemSwVersionAppEntry.setStatus('current')
if mibBuilder.loadTexts: nsCommonSystemSwVersionAppEntry.setDescription('Conceptual row in table for each event.')
nsCommonSystemSwVersionAppType = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 3, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("active", 1), ("main", 2), ("backup", 3))))
if mibBuilder.loadTexts: nsCommonSystemSwVersionAppType.setStatus('current')
if mibBuilder.loadTexts: nsCommonSystemSwVersionAppType.setDescription('Card ID')
nsCommonSystemSwVersionAppWeb = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 3, 1, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonSystemSwVersionAppWeb.setStatus('current')
if mibBuilder.loadTexts: nsCommonSystemSwVersionAppWeb.setDescription('WEB active version')
nsCommonSystemSwVersionAppFP = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 3, 1, 5, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonSystemSwVersionAppFP.setStatus('current')
if mibBuilder.loadTexts: nsCommonSystemSwVersionAppFP.setDescription('FP active version')
nsCommonSystemSwVersionAppCLI = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 3, 1, 5, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonSystemSwVersionAppCLI.setStatus('current')
if mibBuilder.loadTexts: nsCommonSystemSwVersionAppCLI.setDescription('CLI active version')
nsCommonSystemSwVersionAppNsmd = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 3, 1, 5, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonSystemSwVersionAppNsmd.setStatus('current')
if mibBuilder.loadTexts: nsCommonSystemSwVersionAppNsmd.setDescription('NSMD active version')
nsCommonSystemSwVersionAppPIC = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 3, 1, 5, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonSystemSwVersionAppPIC.setStatus('current')
if mibBuilder.loadTexts: nsCommonSystemSwVersionAppPIC.setDescription('PIC active version')
nsCommonSystemHwConfig = ObjectIdentity((1, 3, 6, 1, 4, 1, 37576, 2, 3, 2))
if mibBuilder.loadTexts: nsCommonSystemHwConfig.setStatus('current')
if mibBuilder.loadTexts: nsCommonSystemHwConfig.setDescription('Common MIB branch that holds all Common software Version.')
nsCommonSystemHwConfigProductType = MibScalar((1, 3, 6, 1, 4, 1, 37576, 2, 3, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonSystemHwConfigProductType.setStatus('current')
if mibBuilder.loadTexts: nsCommonSystemHwConfigProductType.setDescription('Product type')
nsCommonSystemHwConfigSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 37576, 2, 3, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonSystemHwConfigSerialNumber.setStatus('current')
if mibBuilder.loadTexts: nsCommonSystemHwConfigSerialNumber.setDescription('Product serial number')
nsCommonSystemHwConfigHardwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 37576, 2, 3, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonSystemHwConfigHardwareVersion.setStatus('current')
if mibBuilder.loadTexts: nsCommonSystemHwConfigHardwareVersion.setDescription('Product hardware number')
nsCommonSystemHwConfigMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 37576, 2, 3, 2, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonSystemHwConfigMacAddress.setStatus('current')
if mibBuilder.loadTexts: nsCommonSystemHwConfigMacAddress.setDescription('Product management port MAC address')
nsCommonSystemHwConfigInternalClockType = MibScalar((1, 3, 6, 1, 4, 1, 37576, 2, 3, 2, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonSystemHwConfigInternalClockType.setStatus('current')
if mibBuilder.loadTexts: nsCommonSystemHwConfigInternalClockType.setDescription('Product internal clock type')
nsCommonSystemHwConfigCardTable = MibTable((1, 3, 6, 1, 4, 1, 37576, 2, 3, 2, 6), )
if mibBuilder.loadTexts: nsCommonSystemHwConfigCardTable.setStatus('current')
if mibBuilder.loadTexts: nsCommonSystemHwConfigCardTable.setDescription('List of Cards')
nsCommonSystemHwConfigCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 37576, 2, 3, 2, 6, 1), ).setIndexNames((0, "NOVELSAT-COMMON-MIB", "nsCommonSystemHwConfigCardID"))
if mibBuilder.loadTexts: nsCommonSystemHwConfigCardEntry.setStatus('current')
if mibBuilder.loadTexts: nsCommonSystemHwConfigCardEntry.setDescription('Conceptual row in table for each event.')
nsCommonSystemHwConfigCardID = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 3, 2, 6, 1, 1), Unsigned32())
if mibBuilder.loadTexts: nsCommonSystemHwConfigCardID.setStatus('current')
if mibBuilder.loadTexts: nsCommonSystemHwConfigCardID.setDescription('Card ID')
nsCommonSystemHwConfigCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 3, 2, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonSystemHwConfigCardType.setStatus('current')
if mibBuilder.loadTexts: nsCommonSystemHwConfigCardType.setDescription('Card type')
nsCommonSystemHwConfigCardSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 3, 2, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonSystemHwConfigCardSerialNumber.setStatus('current')
if mibBuilder.loadTexts: nsCommonSystemHwConfigCardSerialNumber.setDescription('Card Serial number')
nsCommonSystemHwConfigCardHwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 3, 2, 6, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonSystemHwConfigCardHwVersion.setStatus('current')
if mibBuilder.loadTexts: nsCommonSystemHwConfigCardHwVersion.setDescription('Card hardware version')
nsCommonSystemHwConfigCardSwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 3, 2, 6, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonSystemHwConfigCardSwVersion.setStatus('current')
if mibBuilder.loadTexts: nsCommonSystemHwConfigCardSwVersion.setDescription('Card software version. Only for Gig-E card')
nsCommonSystemHwConfigBUCFeeder = MibScalar((1, 3, 6, 1, 4, 1, 37576, 2, 3, 2, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonSystemHwConfigBUCFeeder.setStatus('current')
if mibBuilder.loadTexts: nsCommonSystemHwConfigBUCFeeder.setDescription('Product BUC Feeder configuration')
nsCommonSystemSwUpdate = ObjectIdentity((1, 3, 6, 1, 4, 1, 37576, 2, 3, 3))
if mibBuilder.loadTexts: nsCommonSystemSwUpdate.setStatus('current')
if mibBuilder.loadTexts: nsCommonSystemSwUpdate.setDescription('Common MIB branch that holds all Common software Version.')
nsCommonSystemSwUpdateServerIP = MibScalar((1, 3, 6, 1, 4, 1, 37576, 2, 3, 3, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsCommonSystemSwUpdateServerIP.setStatus('current')
if mibBuilder.loadTexts: nsCommonSystemSwUpdateServerIP.setDescription('FTP Server IP address for software upgrade process')
nsCommonSystemSwUpdateUserName = MibScalar((1, 3, 6, 1, 4, 1, 37576, 2, 3, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsCommonSystemSwUpdateUserName.setStatus('current')
if mibBuilder.loadTexts: nsCommonSystemSwUpdateUserName.setDescription('FTP Server user name for software upgrade process')
nsCommonSystemSwUpdatePassword = MibScalar((1, 3, 6, 1, 4, 1, 37576, 2, 3, 3, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsCommonSystemSwUpdatePassword.setStatus('current')
if mibBuilder.loadTexts: nsCommonSystemSwUpdatePassword.setDescription('FTP Server user password for software upgrade process')
nsCommonSystemSwUpdateFileName = MibScalar((1, 3, 6, 1, 4, 1, 37576, 2, 3, 3, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsCommonSystemSwUpdateFileName.setStatus('current')
if mibBuilder.loadTexts: nsCommonSystemSwUpdateFileName.setDescription('FTP Server software package file name for software upgrade process')
nsCommonSystemSwUpdateCmd = MibScalar((1, 3, 6, 1, 4, 1, 37576, 2, 3, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("none", 0), ("execute", 1), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsCommonSystemSwUpdateCmd.setStatus('current')
if mibBuilder.loadTexts: nsCommonSystemSwUpdateCmd.setDescription('Software upgrade command')
nsCommonSystemSwUpdateComplete = MibScalar((1, 3, 6, 1, 4, 1, 37576, 2, 3, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("idle", 0), ("inProgress", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonSystemSwUpdateComplete.setStatus('current')
if mibBuilder.loadTexts: nsCommonSystemSwUpdateComplete.setDescription('Software upgrade process complete')
nsCommonSystemSwUpdateStatus = MibScalar((1, 3, 6, 1, 4, 1, 37576, 2, 3, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("ok", 0), ("error", 1), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonSystemSwUpdateStatus.setStatus('current')
if mibBuilder.loadTexts: nsCommonSystemSwUpdateStatus.setDescription('Software upgrade process status')
nsCommonSystemSwActivateBackupCmd = MibScalar((1, 3, 6, 1, 4, 1, 37576, 2, 3, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("none", 0), ("execute", 1), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsCommonSystemSwActivateBackupCmd.setStatus('current')
if mibBuilder.loadTexts: nsCommonSystemSwActivateBackupCmd.setDescription('Software upgrade command')
nsCommonSystemDatabase = ObjectIdentity((1, 3, 6, 1, 4, 1, 37576, 2, 3, 4))
if mibBuilder.loadTexts: nsCommonSystemDatabase.setStatus('current')
if mibBuilder.loadTexts: nsCommonSystemDatabase.setDescription('Common MIB branch that holds all Database actions.')
nsCommonSystemDatabaseCmdDbName = MibScalar((1, 3, 6, 1, 4, 1, 37576, 2, 3, 4, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsCommonSystemDatabaseCmdDbName.setStatus('current')
if mibBuilder.loadTexts: nsCommonSystemDatabaseCmdDbName.setDescription('Database file name for database commands')
nsCommonSystemDatabaseServerIP = MibScalar((1, 3, 6, 1, 4, 1, 37576, 2, 3, 4, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsCommonSystemDatabaseServerIP.setStatus('current')
if mibBuilder.loadTexts: nsCommonSystemDatabaseServerIP.setDescription('TFTP Server IP address for database upload/download commands')
nsCommonSystemDatabaseCmd = MibScalar((1, 3, 6, 1, 4, 1, 37576, 2, 3, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 255))).clone(namedValues=NamedValues(("none", 0), ("save", 1), ("load", 2), ("delete", 3), ("defaults", 4), ("upload", 5), ("download", 6), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsCommonSystemDatabaseCmd.setStatus('current')
if mibBuilder.loadTexts: nsCommonSystemDatabaseCmd.setDescription('Database command save(1) - save configuration to file load(2) - load and activate configuration delete(3) - delete configuration file default(4) - set current configuration to factory defaults upload (5) - upload database into TFTP server download (6) - download database via TFTP server into the device ')
nsCommonSystemDatabaseTable = MibTable((1, 3, 6, 1, 4, 1, 37576, 2, 3, 4, 4), )
if mibBuilder.loadTexts: nsCommonSystemDatabaseTable.setStatus('current')
if mibBuilder.loadTexts: nsCommonSystemDatabaseTable.setDescription('List of Databases')
nsCommonSystemDatabaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 37576, 2, 3, 4, 4, 1), ).setIndexNames((0, "NOVELSAT-COMMON-MIB", "nsCommonSystemDatabaseID"))
if mibBuilder.loadTexts: nsCommonSystemDatabaseEntry.setStatus('current')
if mibBuilder.loadTexts: nsCommonSystemDatabaseEntry.setDescription('Conceptual row in table for each event.')
nsCommonSystemDatabaseID = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 3, 4, 4, 1, 1), Unsigned32())
if mibBuilder.loadTexts: nsCommonSystemDatabaseID.setStatus('current')
if mibBuilder.loadTexts: nsCommonSystemDatabaseID.setDescription('Database ID')
nsCommonSystemDatabaseName = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 3, 4, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonSystemDatabaseName.setStatus('current')
if mibBuilder.loadTexts: nsCommonSystemDatabaseName.setDescription('Database name')
nsCommonSystemLicense = ObjectIdentity((1, 3, 6, 1, 4, 1, 37576, 2, 3, 5))
if mibBuilder.loadTexts: nsCommonSystemLicense.setStatus('current')
if mibBuilder.loadTexts: nsCommonSystemLicense.setDescription('Common MIB branch that holds License.')
nsCommonSystemLicenseIssueDate = MibScalar((1, 3, 6, 1, 4, 1, 37576, 2, 3, 5, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonSystemLicenseIssueDate.setStatus('current')
if mibBuilder.loadTexts: nsCommonSystemLicenseIssueDate.setDescription('Issue Date of the License')
nsCommonSystemLicenseID = MibScalar((1, 3, 6, 1, 4, 1, 37576, 2, 3, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonSystemLicenseID.setStatus('current')
if mibBuilder.loadTexts: nsCommonSystemLicenseID.setDescription('License ID')
nsCommonSystemLicenseFeaturesTable = MibTable((1, 3, 6, 1, 4, 1, 37576, 2, 3, 5, 3), )
if mibBuilder.loadTexts: nsCommonSystemLicenseFeaturesTable.setStatus('current')
if mibBuilder.loadTexts: nsCommonSystemLicenseFeaturesTable.setDescription('List of License features')
nsCommonSystemLicenseFeaturesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 37576, 2, 3, 5, 3, 1), ).setIndexNames((0, "NOVELSAT-COMMON-MIB", "nsCommonSystemLicenseFeatureIndx"))
if mibBuilder.loadTexts: nsCommonSystemLicenseFeaturesEntry.setStatus('current')
if mibBuilder.loadTexts: nsCommonSystemLicenseFeaturesEntry.setDescription('Conceptual row in table for each license feature.')
nsCommonSystemLicenseFeatureIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 3, 5, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: nsCommonSystemLicenseFeatureIndx.setStatus('current')
if mibBuilder.loadTexts: nsCommonSystemLicenseFeatureIndx.setDescription('License feature Index')
nsCommonSystemLicenseFeatureName = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 3, 5, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonSystemLicenseFeatureName.setStatus('current')
if mibBuilder.loadTexts: nsCommonSystemLicenseFeatureName.setDescription('License feature name')
nsCommonSystemLicenseFeatureType = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 3, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notExist", 0), ("permanent", 1), ("temporary", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonSystemLicenseFeatureType.setStatus('current')
if mibBuilder.loadTexts: nsCommonSystemLicenseFeatureType.setDescription('License feature type')
nsCommonSystemLicenseFeatureDaysLeft = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 2, 3, 5, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCommonSystemLicenseFeatureDaysLeft.setStatus('current')
if mibBuilder.loadTexts: nsCommonSystemLicenseFeatureDaysLeft.setDescription('License feature days left - for temporary license')
nsCommonProducts = ObjectIdentity((1, 3, 6, 1, 4, 1, 37576, 2, 4))
if mibBuilder.loadTexts: nsCommonProducts.setStatus('current')
if mibBuilder.loadTexts: nsCommonProducts.setDescription('Common MIB branch that holds all Novelsat Products')
nsNS1000 = MibIdentifier((1, 3, 6, 1, 4, 1, 37576, 2, 4, 1))
nsNS2000 = MibIdentifier((1, 3, 6, 1, 4, 1, 37576, 2, 4, 2))
nsNS3000 = MibIdentifier((1, 3, 6, 1, 4, 1, 37576, 2, 4, 3))
mibBuilder.exportSymbols("NOVELSAT-COMMON-MIB", nsCommonConfigNetworkClassificationMfName=nsCommonConfigNetworkClassificationMfName, nsCommonConfigMgmtRollbackMode=nsCommonConfigMgmtRollbackMode, nsCommonConfigAlarmsEventsTable=nsCommonConfigAlarmsEventsTable, nsCommonMonitorNetworkBwManagementStatisticsNeighborIndex=nsCommonMonitorNetworkBwManagementStatisticsNeighborIndex, nsCommonSystemSwVersionFs=nsCommonSystemSwVersionFs, nsCommonConfig10MhzClockLnbRefClock=nsCommonConfig10MhzClockLnbRefClock, nsCommonConfigNetworkClassificationMfEntry=nsCommonConfigNetworkClassificationMfEntry, nsCommonMonitorPowerSupplyValue=nsCommonMonitorPowerSupplyValue, nsCommonMonitorPowerSupplyTable=nsCommonMonitorPowerSupplyTable, nsCommonConfigNetworkInterfacesIndex=nsCommonConfigNetworkInterfacesIndex, nsCommonConfigNetworkNeighborsNotifyRowStatus=nsCommonConfigNetworkNeighborsNotifyRowStatus, nsCommonMonitorNetworkQueuesStatisticsEnqueuedBytes=nsCommonMonitorNetworkQueuesStatisticsEnqueuedBytes, nsCommonMonitorVoltageName=nsCommonMonitorVoltageName, nsCommonConfigNetworkRoutesNotifyRowStatus=nsCommonConfigNetworkRoutesNotifyRowStatus, nsCommonMonitorEventsDateAndTime=nsCommonMonitorEventsDateAndTime, nsCommonMonitorEventsUtcNanoSecondsLow=nsCommonMonitorEventsUtcNanoSecondsLow, nsCommonConfigNetworkQoS=nsCommonConfigNetworkQoS, nsCommonConfigNetworkInterfaces=nsCommonConfigNetworkInterfaces, nsCommonSystemHwConfigSerialNumber=nsCommonSystemHwConfigSerialNumber, nsCommonMonitorVoltageValue=nsCommonMonitorVoltageValue, nsCommonConfigNetworkInterfacesManagementControl=nsCommonConfigNetworkInterfacesManagementControl, nsCommonSystemSwUpdatePassword=nsCommonSystemSwUpdatePassword, nsCommonConfigManagementRateLimiter=nsCommonConfigManagementRateLimiter, nsCommonConfigNetwork=nsCommonConfigNetwork, nsCommonConfigNetworkInterfacesName=nsCommonConfigNetworkInterfacesName, nsCommonMonitorNetworkInterfacesLanIndex=nsCommonMonitorNetworkInterfacesLanIndex, nsCommonConfigNetworkClassificationMf=nsCommonConfigNetworkClassificationMf, nsCommonConfigNetworkBwManagementPercentage=nsCommonConfigNetworkBwManagementPercentage, nsCommonMonitorEventsTable=nsCommonMonitorEventsTable, nsCommonConfigMgmtHostDHCP=nsCommonConfigMgmtHostDHCP, nsCommonMonitorNetworkInterfaces=nsCommonMonitorNetworkInterfaces, nsCommonConfigNetworkMode=nsCommonConfigNetworkMode, nsCommonMonitorVoltageIndex=nsCommonMonitorVoltageIndex, nsCommonConfigNetworkBwManagementTable=nsCommonConfigNetworkBwManagementTable, nsCommonConfigNetworkRoutesTable=nsCommonConfigNetworkRoutesTable, nsCommonConfigNetworkBwManagementNeighborIndex=nsCommonConfigNetworkBwManagementNeighborIndex, nsCommonSystemSwVersionAppPIC=nsCommonSystemSwVersionAppPIC, nsCommonSystemDatabaseEntry=nsCommonSystemDatabaseEntry, nsCommonMonitorNetworkInterfacesLanName=nsCommonMonitorNetworkInterfacesLanName, nsCommonConfigManagementOta=nsCommonConfigManagementOta, nsCommonMonitorAlarmsUtcSecondsHigh=nsCommonMonitorAlarmsUtcSecondsHigh, nsCommonSystemSwVersionAppFP=nsCommonSystemSwVersionAppFP, nsCommonConfigNetworkClassificationMfDestIpAddressHigh=nsCommonConfigNetworkClassificationMfDestIpAddressHigh, nsCommonMonitorNetworkInterfaceStatisticsRxError=nsCommonMonitorNetworkInterfaceStatisticsRxError, nsCommonConfigNetworkClassificationTosFieldMask=nsCommonConfigNetworkClassificationTosFieldMask, nsCommonMonitorEventsUtcNanoSecondsHigh=nsCommonMonitorEventsUtcNanoSecondsHigh, nsCommonSystemHwConfigCardSerialNumber=nsCommonSystemHwConfigCardSerialNumber, nsCommonMonitorEventsSeverity=nsCommonMonitorEventsSeverity, nsCommonConfigNetworkQueuesEntry=nsCommonConfigNetworkQueuesEntry, nsCommonMonitorAlarmsTable=nsCommonMonitorAlarmsTable, nsCommonMonitorNetworkInterfaceStatisticsEntry=nsCommonMonitorNetworkInterfaceStatisticsEntry, nsCommonMonitorAlarmsSeverity=nsCommonMonitorAlarmsSeverity, nsCommonMonitorNetworkBwManagementStatisticsTable=nsCommonMonitorNetworkBwManagementStatisticsTable, nsCommonMonitorNetworkNeighborsStatisticsTable=nsCommonMonitorNetworkNeighborsStatisticsTable, nsCommonMonitorEventsSource=nsCommonMonitorEventsSource, nsCommonConfigNetworkInterfacesAcmControl=nsCommonConfigNetworkInterfacesAcmControl, nsCommonConfigMgmtHostDNS=nsCommonConfigMgmtHostDNS, nsCommonSystemSwVersion=nsCommonSystemSwVersion, nsCommonConfigNetworkQueuesTable=nsCommonConfigNetworkQueuesTable, nsCommonMonitorNetworkQueuesStatisticsNeighborIndex=nsCommonMonitorNetworkQueuesStatisticsNeighborIndex, nsCommonConfigNetworkQueues=nsCommonConfigNetworkQueues, nsCommonConfigNetworkPolicyRouteEntry=nsCommonConfigNetworkPolicyRouteEntry, nsCommonMonitorNetworkBwManagementStatisticsRedPackets=nsCommonMonitorNetworkBwManagementStatisticsRedPackets, nsCommonMonitorEventsEvent=nsCommonMonitorEventsEvent, nsCommonSystemDatabase=nsCommonSystemDatabase, nsCommonConfigNetworkClassificationMfSrcIpAddressHigh=nsCommonConfigNetworkClassificationMfSrcIpAddressHigh, nsCommonMonitorNetworkNeighborsStatisticsAverageTxRate=nsCommonMonitorNetworkNeighborsStatisticsAverageTxRate, nsCommonSystemHwConfigCardTable=nsCommonSystemHwConfigCardTable, nsCommonConfig=nsCommonConfig, nsCommonSystemHwConfigHardwareVersion=nsCommonSystemHwConfigHardwareVersion, nsCommonMonitorAlarmsUtcNanoSecondsHigh=nsCommonMonitorAlarmsUtcNanoSecondsHigh, nsCommonProducts=nsCommonProducts, nsCommonConfigNetworkRoutesDestSubnetMask=nsCommonConfigNetworkRoutesDestSubnetMask, nsCommonConfigAlarmsEventsMask=nsCommonConfigAlarmsEventsMask, nsCommonSystemDatabaseTable=nsCommonSystemDatabaseTable, nsCommonSystemSwVersionAppTable=nsCommonSystemSwVersionAppTable, nsCommonConfigNetworkBwManagementRefModulation=nsCommonConfigNetworkBwManagementRefModulation, nsCommonConfigNetworkClassificationMfNotifyRowStatus=nsCommonConfigNetworkClassificationMfNotifyRowStatus, nsCommonMonitorNetworkQueuesStatisticsBackloggedPackets=nsCommonMonitorNetworkQueuesStatisticsBackloggedPackets, nsCommonSystemSwUpdateFileName=nsCommonSystemSwUpdateFileName, nsCommonSystemDatabaseServerIP=nsCommonSystemDatabaseServerIP, nsCommonSystemHwConfig=nsCommonSystemHwConfig, nsCommonConfigNetworkClassificationMfVidLow=nsCommonConfigNetworkClassificationMfVidLow, nsCommonConfigNetworkNeighborsModulation=nsCommonConfigNetworkNeighborsModulation, nsCommonConfigNetworkRemoteSchedulingCosSignificance=nsCommonConfigNetworkRemoteSchedulingCosSignificance, nsCommonConfigNetworkPolicyRouteRoutingTableId=nsCommonConfigNetworkPolicyRouteRoutingTableId, nsCommonConfigNetworkClassificationMfProtocol=nsCommonConfigNetworkClassificationMfProtocol, nsCommonMonitorNetworkInterfacesLanSubnetMask=nsCommonMonitorNetworkInterfacesLanSubnetMask, nsCommonConfigNetworkPolicyRouteTable=nsCommonConfigNetworkPolicyRouteTable, nsCommonMonitorEvents=nsCommonMonitorEvents, nsCommonConfigMgmtHostMask=nsCommonConfigMgmtHostMask, nsCommonConfig10MhzClockSource=nsCommonConfig10MhzClockSource, nsCommonMonitorAlarmsSource=nsCommonMonitorAlarmsSource, nsCommonConfig10MhzClockOut=nsCommonConfig10MhzClockOut, nsCommonConfigNetworkBwManagementNotifyRowStatus=nsCommonConfigNetworkBwManagementNotifyRowStatus, nsCommonConfigMgmtRollbackTimeout=nsCommonConfigMgmtRollbackTimeout, nsCommonSystemLicenseFeaturesTable=nsCommonSystemLicenseFeaturesTable, nsCommonConfigAlarmsEventsRelayMask=nsCommonConfigAlarmsEventsRelayMask, nsCommonConfigNetworkBwManagement=nsCommonConfigNetworkBwManagement, nsCommonConfigNetworkNeighborsIp=nsCommonConfigNetworkNeighborsIp, nsCommonMonitorPowerSupply=nsCommonMonitorPowerSupply, nsCommonMonitorNetworkNeighborsStatisticsIndex=nsCommonMonitorNetworkNeighborsStatisticsIndex, nsCommonSystemLicense=nsCommonSystemLicense, nsCommonConfigNetworkInterfacesPortType=nsCommonConfigNetworkInterfacesPortType, nsCommonConfigAlarmsEventsName=nsCommonConfigAlarmsEventsName, nsCommonSystemLicenseFeatureName=nsCommonSystemLicenseFeatureName, nsCommonMonitorNetworkInterfacesSatMacAddress=nsCommonMonitorNetworkInterfacesSatMacAddress, nsCommonConfigNetworkInterfacesIp=nsCommonConfigNetworkInterfacesIp, nsCommonConfigNetworkInterfacesNotifyRowStatus=nsCommonConfigNetworkInterfacesNotifyRowStatus, nsCommonSystemLicenseFeatureIndx=nsCommonSystemLicenseFeatureIndx, nsCommonConfigNetworkRemoteSchedulingMethod=nsCommonConfigNetworkRemoteSchedulingMethod, nsCommonConfigSerialPortBaudRate=nsCommonConfigSerialPortBaudRate, nsCommonConfigMgmtOtaIP=nsCommonConfigMgmtOtaIP, nsCommonSystemSwUpdate=nsCommonSystemSwUpdate, nsCommonConfigManagementIP=nsCommonConfigManagementIP, nsCommonMonitorNetworkInterfacesLanMacAddress=nsCommonMonitorNetworkInterfacesLanMacAddress, nsCommonMonitorEventNotification=nsCommonMonitorEventNotification, nsCommonMonitorAlarmsUtcSecondsLow=nsCommonMonitorAlarmsUtcSecondsLow, nsCommonConfigNetworkClassificationMfSrcPortHigh=nsCommonConfigNetworkClassificationMfSrcPortHigh, nsCommonConfigNetworkQueuesCos=nsCommonConfigNetworkQueuesCos, nsCommonConfigNetworkQueuesSchedulingMethod=nsCommonConfigNetworkQueuesSchedulingMethod, nsCommonSystemSwVersionAppNsmd=nsCommonSystemSwVersionAppNsmd, nsCommonConfigNetworkNeighborsTable=nsCommonConfigNetworkNeighborsTable, nsCommonMonitorNetworkQueuesStatisticsCos=nsCommonMonitorNetworkQueuesStatisticsCos, nsCommonSystemSwUpdateUserName=nsCommonSystemSwUpdateUserName, nsCommonSystemSwVersionFirmware=nsCommonSystemSwVersionFirmware, nsCommonConfigNetworkClassification802Table=nsCommonConfigNetworkClassification802Table, nsCommonMonitorNetworkInterfacesLanVlan=nsCommonMonitorNetworkInterfacesLanVlan, nsCommonMonitorNetworkInterfacesLanEntry=nsCommonMonitorNetworkInterfacesLanEntry, nsCommonSystemDatabaseCmdDbName=nsCommonSystemDatabaseCmdDbName, nsCommonConfigNetworkVlanSwitchingAdminStatus=nsCommonConfigNetworkVlanSwitchingAdminStatus, nsCommonConfigNetworkNeighborsMac=nsCommonConfigNetworkNeighborsMac, nsCommonConfigNetworkClassificationMfCoS=nsCommonConfigNetworkClassificationMfCoS, nsCommonConfigNetworkClassificationTosTable=nsCommonConfigNetworkClassificationTosTable, nsCommonSystemSwUpdateCmd=nsCommonSystemSwUpdateCmd, nsCommonSystemDatabaseID=nsCommonSystemDatabaseID, nsCommonSystemHwConfigCardSwVersion=nsCommonSystemHwConfigCardSwVersion, nsCommonMonitorNetworkInterfaceStatisticsTxBps=nsCommonMonitorNetworkInterfaceStatisticsTxBps, nsCommonMonitorNetworkInterfacesSatName=nsCommonMonitorNetworkInterfacesSatName, nsCommonSystemSwVersionAppType=nsCommonSystemSwVersionAppType, nsCommonConfigNetworkInterfacesMac=nsCommonConfigNetworkInterfacesMac, nsCommonMonitorNetworkInterfacesSatSubnetMask=nsCommonMonitorNetworkInterfacesSatSubnetMask, nsCommonConfigNetworkRoutesTableId=nsCommonConfigNetworkRoutesTableId, nsCommonConfigNetworkBwManagementAdminStatus=nsCommonConfigNetworkBwManagementAdminStatus, nsCommonSystemHwConfigCardHwVersion=nsCommonSystemHwConfigCardHwVersion, nsCommonConfigNetworkClassificationTos=nsCommonConfigNetworkClassificationTos, nsCommonMonitorNetworkInterfacesSatEntry=nsCommonMonitorNetworkInterfacesSatEntry, nsNS2000=nsNS2000, nsCommonMonitorAlarms=nsCommonMonitorAlarms, nsCommonConfigAlarmsEventsEntry=nsCommonConfigAlarmsEventsEntry, nsCommonConfigMgmtHostGW=nsCommonConfigMgmtHostGW, nsCommonMonitorVoltageEntry=nsCommonMonitorVoltageEntry, nsCommonMonitorEventsDescription=nsCommonMonitorEventsDescription, nsCommonConfigNetworkRemoteScheduling=nsCommonConfigNetworkRemoteScheduling, nsCommonMonitorNetworkInterfaceStatisticsRxBps=nsCommonMonitorNetworkInterfaceStatisticsRxBps, nsCommonConfigNetworkClassificationTosFieldValue=nsCommonConfigNetworkClassificationTosFieldValue, nsCommonSystemSwUpdateStatus=nsCommonSystemSwUpdateStatus, nsCommonSystem=nsCommonSystem, nsCommonConfigNetworkVlanSwitching=nsCommonConfigNetworkVlanSwitching, nsCommonConfigDateAndTime=nsCommonConfigDateAndTime, nsCommonMonitorPowerSupplyEntry=nsCommonMonitorPowerSupplyEntry, nsCommonConfigNetworkClassificationMfProtocolStatus=nsCommonConfigNetworkClassificationMfProtocolStatus, nsCommonMonitorNetwork=nsCommonMonitorNetwork, nsCommonMonitorNetworkBwManagementStatisticsEntry=nsCommonMonitorNetworkBwManagementStatisticsEntry, nsCommonConfigNetworkRoutesNexthopIpAddress=nsCommonConfigNetworkRoutesNexthopIpAddress, nsCommonConfigMgmtHostIP=nsCommonConfigMgmtHostIP, nsCommonConfigNetworkNeighborsName=nsCommonConfigNetworkNeighborsName, nsCommonMonitorNetworkInterfacesSatPid=nsCommonMonitorNetworkInterfacesSatPid, nsCommonConfigNetworkInterfacesEntry=nsCommonConfigNetworkInterfacesEntry, nsCommonConfigNetworkClassificationTosCoS=nsCommonConfigNetworkClassificationTosCoS, nsCommonMonitorNetworkInterfaceStatisticsRxOvr=nsCommonMonitorNetworkInterfaceStatisticsRxOvr, nsCommonMonitorAlarmsEvent=nsCommonMonitorAlarmsEvent, nsCommonConfigNetworkInterfacesSubnetMask=nsCommonConfigNetworkInterfacesSubnetMask, nsCommonMonitorNetworkInterfaceStatisticsTable=nsCommonMonitorNetworkInterfaceStatisticsTable, nsCommonConfigNetworkBwManagementIndex=nsCommonConfigNetworkBwManagementIndex, nsCommonConfigNetworkClassificationMfDestIpAddressLow=nsCommonConfigNetworkClassificationMfDestIpAddressLow, nsCommonConfigNetworkClassificationTosNotifyRowStatus=nsCommonConfigNetworkClassificationTosNotifyRowStatus, nsCommonConfigNetworkRoutes=nsCommonConfigNetworkRoutes, nsCommonMonitorNetworkInterfacesSatIpAddress=nsCommonMonitorNetworkInterfacesSatIpAddress, PYSNMP_MODULE_ID=nsCommon, nsCommonMonitorNetworkInterfacesSatEncapsulation=nsCommonMonitorNetworkInterfacesSatEncapsulation, nsCommonMonitorAlarmsEntry=nsCommonMonitorAlarmsEntry, nsCommonConfigNetworkPolicyRouteNotifyRowStatus=nsCommonConfigNetworkPolicyRouteNotifyRowStatus, nsCommonConfigNetworkNeighborsSignalingIp=nsCommonConfigNetworkNeighborsSignalingIp, nsCommonConfigManagementRollback=nsCommonConfigManagementRollback, nsCommonConfigNetworkPolicyRoute=nsCommonConfigNetworkPolicyRoute, nsCommonMonitorNotifications=nsCommonMonitorNotifications, nsCommonMonitorNetworkQueuesStatisticsTable=nsCommonMonitorNetworkQueuesStatisticsTable, nsCommonSystemLicenseFeaturesEntry=nsCommonSystemLicenseFeaturesEntry, nsCommonMonitorEventsUtcSecondsHigh=nsCommonMonitorEventsUtcSecondsHigh, nsCommonConfigNetworkInterfacesAdminStatus=nsCommonConfigNetworkInterfacesAdminStatus, nsCommonConfigNetworkVlanSwitchingTable=nsCommonConfigNetworkVlanSwitchingTable, nsCommonConfigAlarmsEventsIndex=nsCommonConfigAlarmsEventsIndex, nsCommonConfigNetworkClassificationTosEntry=nsCommonConfigNetworkClassificationTosEntry, nsCommonConfigNetworkInterfacesTable=nsCommonConfigNetworkInterfacesTable, nsCommonMonitorNetworkBwManagementStatisticsYellowPackets=nsCommonMonitorNetworkBwManagementStatisticsYellowPackets, nsCommonMonitorNetworkBwManagementStatisticsYellowRates=nsCommonMonitorNetworkBwManagementStatisticsYellowRates, nsCommonMonitorNetworkInterfaceStatisticsRxBytes=nsCommonMonitorNetworkInterfaceStatisticsRxBytes, nsCommonMonitorNetworkInterfaceStatisticsName=nsCommonMonitorNetworkInterfaceStatisticsName, nsCommonConfigNetworkNeighborsIndex=nsCommonConfigNetworkNeighborsIndex, nsCommonConfigNetworkClassificationMfSrcPortLow=nsCommonConfigNetworkClassificationMfSrcPortLow, nsCommonMonitorNetworkNeighborsStatisticsTxBytes=nsCommonMonitorNetworkNeighborsStatisticsTxBytes, nsCommonMonitorNetworkInterfacesSatTable=nsCommonMonitorNetworkInterfacesSatTable, nsCommon=nsCommon, nsCommonMonitorAlarmsUtcNanoSecondsLow=nsCommonMonitorAlarmsUtcNanoSecondsLow, nsCommonMonitorEventsEntry=nsCommonMonitorEventsEntry, nsCommonConfigNetworkNeighborsFecRate=nsCommonConfigNetworkNeighborsFecRate, nsCommonConfigNetworkVlanSwitchingEntry=nsCommonConfigNetworkVlanSwitchingEntry, nsCommonConfigNetworkPolicyRouteInputInterfaceId=nsCommonConfigNetworkPolicyRouteInputInterfaceId, nsCommonSystemHwConfigMacAddress=nsCommonSystemHwConfigMacAddress, nsCommonSystemHwConfigCardID=nsCommonSystemHwConfigCardID, nsCommonMonitorNetworkQueuesStatisticsDroppedYellowPackets=nsCommonMonitorNetworkQueuesStatisticsDroppedYellowPackets, nsCommonMonitorNetworkInterfacesLanTable=nsCommonMonitorNetworkInterfacesLanTable, nsCommonSystemSwVersionOs=nsCommonSystemSwVersionOs, nsCommonSystemLicenseIssueDate=nsCommonSystemLicenseIssueDate, nsCommonMonitorNetworkBwManagementStatisticsGreenRates=nsCommonMonitorNetworkBwManagementStatisticsGreenRates, nsCommonMonitorNetworkInterfaceStatisticsTxDrop=nsCommonMonitorNetworkInterfaceStatisticsTxDrop, nsCommonMonitorPowerSupplyName=nsCommonMonitorPowerSupplyName, nsCommonSystemHwConfigCardEntry=nsCommonSystemHwConfigCardEntry, nsCommonConfigNetworkClassificationTosPriority=nsCommonConfigNetworkClassificationTosPriority, nsCommonConfigNetworkClassificationMfTable=nsCommonConfigNetworkClassificationMfTable, nsCommonConfigNetworkVlanSwitchingVid=nsCommonConfigNetworkVlanSwitchingVid, nsCommonConfigNetworkForwardingMode=nsCommonConfigNetworkForwardingMode, nsCommonConfigSerialPort=nsCommonConfigSerialPort, nsCommonConfigSerialPortStopBit=nsCommonConfigSerialPortStopBit, nsCommonConfigNetworkRouting=nsCommonConfigNetworkRouting, nsCommonMonitorNetworkInterfaceStatisticsTxOk=nsCommonMonitorNetworkInterfaceStatisticsTxOk, nsCommonConfigNetworkNeighborsEntry=nsCommonConfigNetworkNeighborsEntry, nsCommonConfigNetworkClassificationMfSrcIpAddressLow=nsCommonConfigNetworkClassificationMfSrcIpAddressLow, nsCommonConfigNetworkQueuesQueueDepth=nsCommonConfigNetworkQueuesQueueDepth, nsCommonMonitorNetworkInterfacesLanOperStatus=nsCommonMonitorNetworkInterfacesLanOperStatus, nsCommonConfigNetworkClassificationMfVidHigh=nsCommonConfigNetworkClassificationMfVidHigh, nsCommonConfigNetworkRemoteSchedulingFrameMerging=nsCommonConfigNetworkRemoteSchedulingFrameMerging, nsCommonConfigNetworkBwManagementRefFecRate=nsCommonConfigNetworkBwManagementRefFecRate, nsCommonConfigNetworkInterfacesVlan=nsCommonConfigNetworkInterfacesVlan, nsCommonConfigNetworkClassification802CoS=nsCommonConfigNetworkClassification802CoS, nsCommonSystemHwConfigInternalClockType=nsCommonSystemHwConfigInternalClockType, nsCommonSystemDatabaseCmd=nsCommonSystemDatabaseCmd, nsCommonConfigMgmtRateLimit=nsCommonConfigMgmtRateLimit, nsCommonMonitorNetworkInterfacesLanIpAddress=nsCommonMonitorNetworkInterfacesLanIpAddress, nsNS3000=nsNS3000, nsCommonSystemHwConfigCardType=nsCommonSystemHwConfigCardType, nsCommonMonitorVoltage=nsCommonMonitorVoltage, nsCommonConfig10MhzClock=nsCommonConfig10MhzClock, nsCommonMonitor=nsCommonMonitor, nsCommonSystemLicenseFeatureType=nsCommonSystemLicenseFeatureType, nsCommonConfigNetworkInterfacesMtu=nsCommonConfigNetworkInterfacesMtu, nsCommonMonitorNetworkInterfaceStatisticsIndex=nsCommonMonitorNetworkInterfaceStatisticsIndex, nsCommonMonitorNetworkNeighborsStatisticsTxPackets=nsCommonMonitorNetworkNeighborsStatisticsTxPackets, nsCommonSystemSwVersionDb=nsCommonSystemSwVersionDb, nsCommonConfigNetworkClassificationTosColor=nsCommonConfigNetworkClassificationTosColor, nsCommonMonitorEventsUtcSecondsLow=nsCommonMonitorEventsUtcSecondsLow, nsCommonMonitorNetworkBwManagementStatisticsRedRates=nsCommonMonitorNetworkBwManagementStatisticsRedRates, nsCommonConfigNetworkClassificationMode=nsCommonConfigNetworkClassificationMode)
mibBuilder.exportSymbols("NOVELSAT-COMMON-MIB", nsCommonConfig10MhzClockTxPortClock=nsCommonConfig10MhzClockTxPortClock, nsCommonConfigNetworkRoutesAdminStatus=nsCommonConfigNetworkRoutesAdminStatus, nsCommonMonitorNetworkInterfaceStatisticsRxDrop=nsCommonMonitorNetworkInterfaceStatisticsRxDrop, nsCommonMonitorNetworkInterfacesSatPort=nsCommonMonitorNetworkInterfacesSatPort, nsCommonConfigNetworkQueuesDropDiscipline=nsCommonConfigNetworkQueuesDropDiscipline, nsCommonConfigNetworkClassification802Priority=nsCommonConfigNetworkClassification802Priority, nsCommonConfigNetworkClassification802Entry=nsCommonConfigNetworkClassification802Entry, nsCommonSystemSwActivateBackupCmd=nsCommonSystemSwActivateBackupCmd, nsCommonSystemSwVersionAppWeb=nsCommonSystemSwVersionAppWeb, nsCommonMonitorNetworkInterfaceStatisticsRxOk=nsCommonMonitorNetworkInterfaceStatisticsRxOk, nsCommonSystemLicenseID=nsCommonSystemLicenseID, nsCommonConfigNetworkRoutesDestIpAddress=nsCommonConfigNetworkRoutesDestIpAddress, nsCommonMonitorNetworkNeighborsStatisticsEntry=nsCommonMonitorNetworkNeighborsStatisticsEntry, nsCommonMonitorNetworkBwManagementStatisticsGreenPackets=nsCommonMonitorNetworkBwManagementStatisticsGreenPackets, nsCommonConfigMgmtOtaMask=nsCommonConfigMgmtOtaMask, nsCommonConfigSerialPortDataBits=nsCommonConfigSerialPortDataBits, nsCommonMonitorNetworkInterfaceStatisticsMtu=nsCommonMonitorNetworkInterfaceStatisticsMtu, nsCommonSystemSwVersionAppCLI=nsCommonSystemSwVersionAppCLI, nsCommonMonitorAlarmsDescription=nsCommonMonitorAlarmsDescription, nsCommonSystemSwVersionAppEntry=nsCommonSystemSwVersionAppEntry, nsCommonMonitorNetworkInterfaceStatisticsTxBytes=nsCommonMonitorNetworkInterfaceStatisticsTxBytes, nsCommonConfigNetworkBwManagementEntry=nsCommonConfigNetworkBwManagementEntry, nsCommonConfigNetworkClassificationMfDestPortLow=nsCommonConfigNetworkClassificationMfDestPortLow, nsCommonConfigSerialPortParity=nsCommonConfigSerialPortParity, nsCommonConfigNetworkInterfacesEncapsulation=nsCommonConfigNetworkInterfacesEncapsulation, nsCommonMonitorNetworkInterfacesLanAdminStatus=nsCommonMonitorNetworkInterfacesLanAdminStatus, nsCommonMonitorNetworkQueuesStatisticsDroppedGreenPackets=nsCommonMonitorNetworkQueuesStatisticsDroppedGreenPackets, nsCommonMonitorEventsType=nsCommonMonitorEventsType, nsCommonConfigNetworkClassification=nsCommonConfigNetworkClassification, nsCommonConfigNetworkClassificationMfAdminStatus=nsCommonConfigNetworkClassificationMfAdminStatus, nsCommonConfigNetworkRoutesEntry=nsCommonConfigNetworkRoutesEntry, nsCommonSystemDatabaseName=nsCommonSystemDatabaseName, nsCommonConfigNetworkPolicyRouteIndex=nsCommonConfigNetworkPolicyRouteIndex, nsCommonConfigNetworkBwManagementCBS=nsCommonConfigNetworkBwManagementCBS, nsCommonConfigAlarmsEvents=nsCommonConfigAlarmsEvents, nsCommonConfigNetworkQueuesWeight=nsCommonConfigNetworkQueuesWeight, nsCommonMonitorNetworkQueuesStatisticsBackloggedBytes=nsCommonMonitorNetworkQueuesStatisticsBackloggedBytes, nsCommonSystemHwConfigBUCFeeder=nsCommonSystemHwConfigBUCFeeder, nsCommonSystemHwConfigProductType=nsCommonSystemHwConfigProductType, nsCommonConfigNetworkNeighbors=nsCommonConfigNetworkNeighbors, nsCommonMonitorVoltageTable=nsCommonMonitorVoltageTable, nsCommonConfigNetworkVlanSwitchingNeighborIndex=nsCommonConfigNetworkVlanSwitchingNeighborIndex, nsCommonConfigNetworkClassification802=nsCommonConfigNetworkClassification802, nsCommonConfigNetworkNeighborsIfIndex=nsCommonConfigNetworkNeighborsIfIndex, nsCommonMonitorNetworkInterfacesSatIndex=nsCommonMonitorNetworkInterfacesSatIndex, nsCommonSystemSwUpdateComplete=nsCommonSystemSwUpdateComplete, nsCommonConfigNetworkClassificationMfDestPortHigh=nsCommonConfigNetworkClassificationMfDestPortHigh, nsCommonMonitorPowerSupplyIndex=nsCommonMonitorPowerSupplyIndex, nsCommonMonitorNetworkInterfacesSatOperStatus=nsCommonMonitorNetworkInterfacesSatOperStatus, nsCommonConfigNetworkVlanSwitchingNotifyRowStatus=nsCommonConfigNetworkVlanSwitchingNotifyRowStatus, nsCommonMonitorNetworkInterfacesSatAdminStatus=nsCommonMonitorNetworkInterfacesSatAdminStatus, nsCommonMonitorNetworkNeighborsStatisticsAverageTxPacketRate=nsCommonMonitorNetworkNeighborsStatisticsAverageTxPacketRate, nsCommonConfigNetworkBwManagementEIR=nsCommonConfigNetworkBwManagementEIR, nsCommonMonitorNetworkInterfaceStatisticsTxError=nsCommonMonitorNetworkInterfaceStatisticsTxError, nsCommonMonitorNetworkQueuesStatisticsEntry=nsCommonMonitorNetworkQueuesStatisticsEntry, nsCommonSystemSwUpdateServerIP=nsCommonSystemSwUpdateServerIP, nsCommonMonitorNetworkInterfacesLanPort=nsCommonMonitorNetworkInterfacesLanPort, nsCommonMonitorNetworkInterfaceClrCmd=nsCommonMonitorNetworkInterfaceClrCmd, nsCommonConfigNetworkClassificationMfPriority=nsCommonConfigNetworkClassificationMfPriority, nsNS1000=nsNS1000, nsCommonConfigDateTime=nsCommonConfigDateTime, nsCommonMonitorAlarmsDateAndTime=nsCommonMonitorAlarmsDateAndTime, nsCommonMonitorNetworkQueuesStatisticsEnqueuedPackets=nsCommonMonitorNetworkQueuesStatisticsEnqueuedPackets, nsCommonSystemLicenseFeatureDaysLeft=nsCommonSystemLicenseFeatureDaysLeft, nsCommonConfigNetworkBwManagementEBS=nsCommonConfigNetworkBwManagementEBS, nsCommonMonitorNetworkInterfaceStatisticsTxOvr=nsCommonMonitorNetworkInterfaceStatisticsTxOvr, nsCommonConfigNetworkBwManagementCIR=nsCommonConfigNetworkBwManagementCIR)
