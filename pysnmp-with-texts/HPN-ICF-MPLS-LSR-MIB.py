#
# PySNMP MIB module HPN-ICF-MPLS-LSR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HPN-ICF-MPLS-LSR-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:40:22 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
hpnicfMpls, = mibBuilder.importSymbols("HPN-ICF-OID-MIB", "hpnicfMpls")
AddressFamilyNumbers, = mibBuilder.importSymbols("IANA-ADDRESS-FAMILY-NUMBERS-MIB", "AddressFamilyNumbers")
InterfaceIndexOrZero, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero", "InterfaceIndex")
InetAddressIPv4, InetAddressIPv6, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressIPv4", "InetAddressIPv6", "InetAddressType")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
NotificationType, Counter64, Bits, Gauge32, TimeTicks, MibIdentifier, iso, IpAddress, ModuleIdentity, ObjectIdentity, Integer32, Unsigned32, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Counter64", "Bits", "Gauge32", "TimeTicks", "MibIdentifier", "iso", "IpAddress", "ModuleIdentity", "ObjectIdentity", "Integer32", "Unsigned32", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
RowPointer, TimeStamp, DisplayString, TextualConvention, TruthValue, RowStatus, StorageType = mibBuilder.importSymbols("SNMPv2-TC", "RowPointer", "TimeStamp", "DisplayString", "TextualConvention", "TruthValue", "RowStatus", "StorageType")
hpnicfMplsLsr = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 1))
hpnicfMplsLsr.setRevisions(('2000-07-12 12:00', '2000-07-07 12:00', '2000-04-26 12:00', '2000-04-21 12:00', '2000-03-06 12:00', '2000-02-16 12:00', '1999-06-16 12:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hpnicfMplsLsr.setRevisionsDescriptions(('Seventh draft version. Fix minor compilation errors.', 'Sixth draft version. Made minor typographical corrections noted from WG mailing list during second working group last call.', 'Fifth draft version. Made minor typographical corrections noted from WG mailing list.', 'Fourth draft version. Made corrections from WG Last Call comments.', 'Third draft version.', 'Second draft version.', 'Initial draft version.',))
if mibBuilder.loadTexts: hpnicfMplsLsr.setLastUpdated('200007121200Z')
if mibBuilder.loadTexts: hpnicfMplsLsr.setOrganization('')
if mibBuilder.loadTexts: hpnicfMplsLsr.setContactInfo('')
if mibBuilder.loadTexts: hpnicfMplsLsr.setDescription('This MIB contains managed object definitions for the Multiprotocol Label Switching (MPLS) Router as defined in: Rosen, E., Viswanathan, A., and R. Callon, Multiprotocol Label Switching Architecture, Internet Draft <draft-ietf-mpls-arch-06.txt>, August 1999.')
class HpnicfMplsLSPID(TextualConvention, OctetString):
    description = 'An identifier that is assigned to each LSP and is used to uniquely identify it. This is assigned at the head end of the LSP and can be used by all LSRs to identify this LSP. This value is piggybacked by the signaling protocol when this LSP is signaled within the network. This identifier can then be used at each LSR to identify which labels are being swapped to other labels for this LSP. For IPv4 addresses this results in a 6-octet long cookie.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 31)

class HpnicfMplsLabel(TextualConvention, Unsigned32):
    reference = '1. MPLS Label Stack Encoding, Rosen et al, draft- ietf-mpls-label-encaps-07.txt, March 2000. 2. Use of Label Switching on Frame Relay Networks, Conta et al, draft-ietf-mpls-fr-03.txt, Nov. 1998. 3. MPLS using LDP and ATM VC switching, Davie et al, draft-ietf-mpls-atm-02.txt, April 1999.'
    description = 'This value represents an MPLS label. Note that the contents of a label field are interpreted in an interface-type specific fashion. For example, the 20-bit wide label carried in the MPLS shim header is contained in bits 0-19 and bits 20-31 must be zero. The frame relay label can be either 10 or 23 bits wide depending on the size of the DLCI field and bits 10-31, or 23-31 must be zero, respectively. For an ATM interface, bits 0-15 must be interpreted as the VCI, bits 16-23 as the VPI and bits 24-31 must be zero. Note that the permissible label values are also a function of the interface type. For example, the value 3 has special semantics in the control plane for an MPLS shim header label and is not a valid label value in the data path.'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 4294967295)

class HpnicfMplsBitRate(TextualConvention, Integer32):
    description = "An estimate of bandwidth in units of 1,000 bits per second. If this object reports a value of 'n' then the rate of the object is somewhere in the range of 'n-500' to 'n+499'. For objects which do not vary in bitrate, or for those where no accurate estimation can be made, this object should contain the nominal bitrate."
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 2147483647)

class HpnicfMplsBurstSize(TextualConvention, Integer32):
    description = 'The number of octets of MPLS data that the stream may send back-to-back without concern for policing.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 2147483647)

class HpnicfMplsObjectOwner(TextualConvention, Integer32):
    description = 'The entity which owns the object in question.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("other", 1), ("snmp", 2), ("ldp", 3), ("rsvp", 4), ("crldp", 5), ("policyAgent", 6), ("unknown", 7))

hpnicfmplsLsrObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 1, 1))
hpnicfmplsLsrNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 1, 2))
hpnicfmplsLsrNotifyPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 1, 2, 0))
hpnicfmplsLsrConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 1, 3))
hpnicfmplsInterfaceConfTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 1, 1, 1), )
if mibBuilder.loadTexts: hpnicfmplsInterfaceConfTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfmplsInterfaceConfTable.setDescription('This table specifies per-interface MPLS capability and associated information.')
hpnicfmplsInterfaceConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 1, 1, 1, 1), ).setIndexNames((0, "HPN-ICF-MPLS-LSR-MIB", "hpnicfmplsInterfaceConfIndex"))
if mibBuilder.loadTexts: hpnicfmplsInterfaceConfEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfmplsInterfaceConfEntry.setDescription('An entry in this table is created by an LSR for every interface capable of supporting MPLS. The entry with index 0 represents the per-platform label space and contains parameters that apply to all interfaces that participate in the per-platform label space. Other entries defined in this table represent additional MPLS interfaces that may participate in either the per-platform or per- interface label spaces, or both. Additional information about label space participation of an interface is provided in the description clause of hpnicfmplsInterfaceLabelParticipationType.')
hpnicfmplsInterfaceConfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 1, 1, 1, 1, 1), InterfaceIndexOrZero())
if mibBuilder.loadTexts: hpnicfmplsInterfaceConfIndex.setReference('RFC 2233 - The Interfaces Group MIB using SMIv2, McCloghrie, K., and F. Kastenholtz, Nov. 1997')
if mibBuilder.loadTexts: hpnicfmplsInterfaceConfIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfmplsInterfaceConfIndex.setDescription('This is a unique index for an entry in the hpnicfmplsInterfaceConfTable. A non-zero index for an entry indicates the ifIndex for the corresponding interface entry in of the MPLS-layer in the ifTable. Note that the per-platform label space may apply to several interfaces, and therefore the configuration of the per-platform label space interface parameters will apply to all of the interfaces that are participating in the per-platform label space.')
hpnicfmplsInterfaceLabelMinIn = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 1, 1, 1, 1, 2), HpnicfMplsLabel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfmplsInterfaceLabelMinIn.setStatus('current')
if mibBuilder.loadTexts: hpnicfmplsInterfaceLabelMinIn.setDescription('This is the minimum value of an MPLS label that this LSR is willing to receive on this interface.')
hpnicfmplsInterfaceLabelMaxIn = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 1, 1, 1, 1, 3), HpnicfMplsLabel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfmplsInterfaceLabelMaxIn.setStatus('current')
if mibBuilder.loadTexts: hpnicfmplsInterfaceLabelMaxIn.setDescription('This is the maximum value of an MPLS label that this LSR is willing to receive on this interface.')
hpnicfmplsInterfaceLabelMinOut = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 1, 1, 1, 1, 4), HpnicfMplsLabel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfmplsInterfaceLabelMinOut.setStatus('current')
if mibBuilder.loadTexts: hpnicfmplsInterfaceLabelMinOut.setDescription('This is the minimum value of an MPLS label that this LSR is willing to send on this interface.')
hpnicfmplsInterfaceLabelMaxOut = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 1, 1, 1, 1, 5), HpnicfMplsLabel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfmplsInterfaceLabelMaxOut.setStatus('current')
if mibBuilder.loadTexts: hpnicfmplsInterfaceLabelMaxOut.setDescription('This is the maximum value of an MPLS label that this LSR is willing to send on this interface.')
hpnicfmplsInterfaceTotalBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 1, 1, 1, 1, 6), HpnicfMplsBitRate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfmplsInterfaceTotalBandwidth.setStatus('current')
if mibBuilder.loadTexts: hpnicfmplsInterfaceTotalBandwidth.setDescription('This value indicates the total amount of usable bandwidth on this interface and is specified in kilobits per second (Kbps). This variable is not applicable when applied to the interface with index 0.')
hpnicfmplsInterfaceAvailableBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 1, 1, 1, 1, 7), HpnicfMplsBitRate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfmplsInterfaceAvailableBandwidth.setStatus('current')
if mibBuilder.loadTexts: hpnicfmplsInterfaceAvailableBandwidth.setDescription('This value indicates the total amount of available bandwidth available on this interface and is specified in kilobits per second (Kbps). This value is calculated as the difference between the amount of bandwidth currently in use and that specified in hpnicfmplsInterfaceTotalBandwidth. This variable is not applicable when applied to the interface with index 0.')
hpnicfmplsInterfaceLabelParticipationType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 1, 1, 1, 1, 8), Bits().clone(namedValues=NamedValues(("perPlatform", 0), ("perInterface", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfmplsInterfaceLabelParticipationType.setReference('Multiprotocol Label Switching, Rosen et al, draft-ietf-mpls- arch-06.txt, August 1999.')
if mibBuilder.loadTexts: hpnicfmplsInterfaceLabelParticipationType.setStatus('current')
if mibBuilder.loadTexts: hpnicfmplsInterfaceLabelParticipationType.setDescription('Either the perPlatform(0) or perInterface(1) bit MUST be set. If the value of the hpnicfmplsInterfaceConfIndex for this entry is zero, then only the perPlatform(0) bit MUST be set and the perInterface(1) bit is meaningless. If the perInterface(1) bit is set then the value of hpnicfmplsInterfaceLabelMinIn, hpnicfmplsInterfaceLabelMaxIn, hpnicfmplsInterfaceLabelMinOut, and hpnicfmplsInterfaceLabelMaxOut for this entry reflect the label ranges for this interface. If only the perPlatform(0) bit is set, then the value of hpnicfmplsInterfaceLabelMinIn, hpnicfmplsInterfaceLabelMaxIn, hpnicfmplsInterfaceLabelMinOut, and hpnicfmplsInterfaceLabelMaxOut for this entry must be identical to the instance of these objects with index 0.')
hpnicfmplsInterfaceConfStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 1, 1, 1, 1, 9), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfmplsInterfaceConfStorageType.setStatus('current')
if mibBuilder.loadTexts: hpnicfmplsInterfaceConfStorageType.setDescription('The storage type for this entry.')
hpnicfmplsInterfacePerfTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 1, 1, 2), )
if mibBuilder.loadTexts: hpnicfmplsInterfacePerfTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfmplsInterfacePerfTable.setDescription('This table provides MPLS performance information on a per-interface basis.')
hpnicfmplsInterfacePerfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 1, 1, 2, 1), )
hpnicfmplsInterfaceConfEntry.registerAugmentions(("HPN-ICF-MPLS-LSR-MIB", "hpnicfmplsInterfacePerfEntry"))
hpnicfmplsInterfacePerfEntry.setIndexNames(*hpnicfmplsInterfaceConfEntry.getIndexNames())
if mibBuilder.loadTexts: hpnicfmplsInterfacePerfEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfmplsInterfacePerfEntry.setDescription('An entry in this table is created by the LSR for every interface capable of supporting MPLS. Its is an extension to the hpnicfmplsInterfaceConfEntry table.')
hpnicfmplsInterfaceInLabelsUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 1, 1, 2, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfmplsInterfaceInLabelsUsed.setStatus('current')
if mibBuilder.loadTexts: hpnicfmplsInterfaceInLabelsUsed.setDescription('This object counts the number of labels that are in use at this point in time on this interface in the incoming direction. If the interface participates in the per-platform label space only, then this instance of this object MUST be identical with the instance with index 0. If the interface participates in the per-interface label space, then this this instance of this object MUST represent the number of of per-interface labels that are in use at this point in time on this interface.')
hpnicfmplsInterfaceFailedLabelLookup = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 1, 1, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfmplsInterfaceFailedLabelLookup.setStatus('current')
if mibBuilder.loadTexts: hpnicfmplsInterfaceFailedLabelLookup.setDescription('This object counts the number of labeled packets that have been received on this interface and were discarded because there was no matching cross-connect entry. This object MUST count on a per-interface basis regardless of which label space the interface participates in.')
hpnicfmplsInterfaceOutLabelsUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 1, 1, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfmplsInterfaceOutLabelsUsed.setStatus('current')
if mibBuilder.loadTexts: hpnicfmplsInterfaceOutLabelsUsed.setDescription('This object counts the number of top-most labels in the outgoing label stacks that are in use at this point in time on this interface. This object MUST count on a per-interface basis regardless of which label space the interface participates in.')
hpnicfmplsInterfaceOutFragments = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 1, 1, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfmplsInterfaceOutFragments.setStatus('current')
if mibBuilder.loadTexts: hpnicfmplsInterfaceOutFragments.setDescription('This object counts the number of outgoing MPLS packets that required fragmentation before transmission on this interface. This object transmission on this interface. This object MUST count on a per-interface basis regardless of which label space the interface participates in.')
hpnicfmplsInSegmentTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 1, 1, 3), )
if mibBuilder.loadTexts: hpnicfmplsInSegmentTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfmplsInSegmentTable.setDescription('This table contains a collection of incoming segments to an LSR.')
hpnicfmplsInSegmentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 1, 1, 3, 1), ).setIndexNames((0, "HPN-ICF-MPLS-LSR-MIB", "hpnicfmplsInSegmentIfIndex"), (0, "HPN-ICF-MPLS-LSR-MIB", "hpnicfmplsInSegmentLabel"))
if mibBuilder.loadTexts: hpnicfmplsInSegmentEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfmplsInSegmentEntry.setDescription('An entry in this table represents one incoming segment. An entry can be created by a network administrator or an SNMP agent, or an MPLS signaling protocol. The creator of the entry is denoted by hpnicfmplsInSegmentOwner. An entry in this table is indexed by the ifIndex of the incoming interface and the (top) label.')
hpnicfmplsInSegmentIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 1, 1, 3, 1, 1), InterfaceIndexOrZero()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfmplsInSegmentIfIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfmplsInSegmentIfIndex.setDescription('This is a unique index for an entry in the hpnicfmplsInSegmentTable. This value represents the interface index for the incoming MPLS interface. A value of zero represents an incoming label from the per-platform label space. In this case, the hpnicfmplsInSegmentLabel is interpreted to be an MPLS-type label.')
hpnicfmplsInSegmentLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 1, 1, 3, 1, 2), HpnicfMplsLabel()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfmplsInSegmentLabel.setStatus('current')
if mibBuilder.loadTexts: hpnicfmplsInSegmentLabel.setDescription('The incoming label for this segment.')
hpnicfmplsInSegmentNPop = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 1, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfmplsInSegmentNPop.setStatus('current')
if mibBuilder.loadTexts: hpnicfmplsInSegmentNPop.setDescription('The number of labels to pop from the incoming packet. Normally only the top label is popped from the packet and used for all switching decisions for that packet. Note that technologies which do not support label popping should set this value to its default value of 1.')
hpnicfmplsInSegmentAddrFamily = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 1, 1, 3, 1, 4), AddressFamilyNumbers().clone('other')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfmplsInSegmentAddrFamily.setStatus('current')
if mibBuilder.loadTexts: hpnicfmplsInSegmentAddrFamily.setDescription('The IANA address family [IANAFamily] of the incoming packet. A value of other(0) indicates that the family type is either unknown or undefined.')
hpnicfmplsInSegmentXCIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 1, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfmplsInSegmentXCIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfmplsInSegmentXCIndex.setDescription('Index into hpnicfmplsXCTable which identifies which cross- connect entry this segment is part of. A value of zero indicates that this entry is not referred to by any cross-connect entry. When a cross-connect entry is created which this in-segment is a part of, this object is automatically updated to reflect the value of hpnicfmplsXCIndex of that cross-connect entry.')
hpnicfmplsInSegmentOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 1, 1, 3, 1, 6), HpnicfMplsObjectOwner().clone('unknown')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfmplsInSegmentOwner.setStatus('current')
if mibBuilder.loadTexts: hpnicfmplsInSegmentOwner.setDescription('Denotes the entity that created and is responsible for managing this segment.')
hpnicfmplsInSegmentTrafficParamPtr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 1, 1, 3, 1, 7), RowPointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfmplsInSegmentTrafficParamPtr.setStatus('current')
if mibBuilder.loadTexts: hpnicfmplsInSegmentTrafficParamPtr.setDescription('This variable represents a pointer to the traffic parameter specification for this in-segment. This value may point at an entry in the hpnicfmplsTrafficParamTable to indicate which hpnicfmplsTrafficParamEntry is to be assigned to this segment. This value may optionally point at an externally defined traffic parameter specification table. A value of zero-dot-zero indicates best-effort treatment. By having the same value of this object, two or more segments can indicate resource sharing.')
hpnicfmplsInSegmentRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 1, 1, 3, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfmplsInSegmentRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfmplsInSegmentRowStatus.setDescription('This variable is used to create, modify, and/or delete a row in this table.')
hpnicfmplsInSegmentStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 1, 1, 3, 1, 9), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfmplsInSegmentStorageType.setStatus('current')
if mibBuilder.loadTexts: hpnicfmplsInSegmentStorageType.setDescription('This variable indicates the storage type for this object.')
hpnicfmplsInSegmentPerfTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 1, 1, 4), )
if mibBuilder.loadTexts: hpnicfmplsInSegmentPerfTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfmplsInSegmentPerfTable.setDescription('This table contains statistical information for incoming MPLS segments to an LSR.')
hpnicfmplsInSegmentPerfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 1, 1, 4, 1), )
hpnicfmplsInSegmentEntry.registerAugmentions(("HPN-ICF-MPLS-LSR-MIB", "hpnicfmplsInSegmentPerfEntry"))
hpnicfmplsInSegmentPerfEntry.setIndexNames(*hpnicfmplsInSegmentEntry.getIndexNames())
if mibBuilder.loadTexts: hpnicfmplsInSegmentPerfEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfmplsInSegmentPerfEntry.setDescription('An entry in this table contains statistical information about one incoming segment which was configured in the hpnicfmplsInSegmentTable. The counters in this entry should behave in a manner similar to that of the interface.')
hpnicfmplsInSegmentOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 1, 1, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfmplsInSegmentOctets.setStatus('current')
if mibBuilder.loadTexts: hpnicfmplsInSegmentOctets.setDescription('This value represents the total number of octets received by this segment.')
hpnicfmplsInSegmentPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 1, 1, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfmplsInSegmentPackets.setStatus('current')
if mibBuilder.loadTexts: hpnicfmplsInSegmentPackets.setDescription('Total number of packets received by this segment.')
hpnicfmplsInSegmentErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 1, 1, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfmplsInSegmentErrors.setStatus('current')
if mibBuilder.loadTexts: hpnicfmplsInSegmentErrors.setDescription('The number of errored packets received on this segment.')
hpnicfmplsInSegmentDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 1, 1, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfmplsInSegmentDiscards.setStatus('current')
if mibBuilder.loadTexts: hpnicfmplsInSegmentDiscards.setDescription('The number of labeled packets received on this in- segment, which were chosen to be discarded even though no errors had been detected to prevent their being transmitted. One possible reason for discarding such a labeled packet could be to free up buffer space.')
hpnicfmplsInSegmentHCOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 1, 1, 4, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfmplsInSegmentHCOctets.setStatus('current')
if mibBuilder.loadTexts: hpnicfmplsInSegmentHCOctets.setDescription('The total number of octets received. This is the 64 bit version of hpnicfmplsInSegmentOctets.')
hpnicfmplsInSegmentPerfDiscontinuityTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 1, 1, 4, 1, 6), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfmplsInSegmentPerfDiscontinuityTime.setStatus('current')
if mibBuilder.loadTexts: hpnicfmplsInSegmentPerfDiscontinuityTime.setDescription("The value of sysUpTime on the most recent occasion at which any one or more of this segment's Counter32 or Counter64 suffered a discontinuity. If no such discontinuities have occurred since the last re- initialization of the local management subsystem, then this object contains a zero value.")
hpnicfmplsOutSegmentIndexNext = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfmplsOutSegmentIndexNext.setStatus('current')
if mibBuilder.loadTexts: hpnicfmplsOutSegmentIndexNext.setDescription('This object contains the next appropriate value to be used for hpnicfmplsOutSegmentIndex when creating entries in the hpnicfmplsOutSegmentTable. If the number of unassigned entries is exhausted, this object will take on the value of 0. To obtain the hpnicfmplsOutSegmentIndex value for a new entry, the manager must first issue a management protocol retrieval operation to obtain the current value of this object. The agent should modify the value to reflect the next unassigned index after each retrieval operation. After a manager retrieves a value the agent will determine through its local policy when this index value will be made available for reuse.')
hpnicfmplsOutSegmentTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 1, 1, 6), )
if mibBuilder.loadTexts: hpnicfmplsOutSegmentTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfmplsOutSegmentTable.setDescription('This table contains a representation of the outgoing segments from an LSR.')
hpnicfmplsOutSegmentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 1, 1, 6, 1), ).setIndexNames((0, "HPN-ICF-MPLS-LSR-MIB", "hpnicfmplsOutSegmentIndex"))
if mibBuilder.loadTexts: hpnicfmplsOutSegmentEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfmplsOutSegmentEntry.setDescription('An entry in this table represents one outgoing segment. An entry can be created by a network administrator or an SNMP agent, or an MPLS signaling protocol. The object hpnicfmplsOutSegmentOwner indicates the creator of this entry.')
hpnicfmplsOutSegmentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 1, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfmplsOutSegmentIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfmplsOutSegmentIndex.setDescription('This value contains a unique index for this row. While a value of 0 is not valid as an index for this row it can be supplied as a valid value to index hpnicfmplsXCTable to access entries for which no out- segment has been configured.')
hpnicfmplsOutSegmentIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 1, 1, 6, 1, 2), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfmplsOutSegmentIfIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfmplsOutSegmentIfIndex.setDescription('This value contains the interface index of the outgoing interface.')
hpnicfmplsOutSegmentPushTopLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 1, 1, 6, 1, 3), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfmplsOutSegmentPushTopLabel.setStatus('current')
if mibBuilder.loadTexts: hpnicfmplsOutSegmentPushTopLabel.setDescription("This value indicates whether or not a top label should be pushed onto the outgoing packet's label stack. The value of this variable must be set to true if the outgoing interface does not support pop- and-go (for example an ATM interface) or if it is a tunnel origination. Note that it is considered an error in the case that hpnicfmplsOutSegmentPushTopLabel is set to false, but the cross-connect entry which refers to this out-segment has a non-zero hpnicfmplsLabelStackIndex. The LSR MUST ensure that this situation does not happen ")
hpnicfmplsOutSegmentTopLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 1, 1, 6, 1, 4), HpnicfMplsLabel()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfmplsOutSegmentTopLabel.setStatus('current')
if mibBuilder.loadTexts: hpnicfmplsOutSegmentTopLabel.setDescription("If hpnicfmplsOutSegmentPushTopLabel is true then this represents the label that should be pushed onto the top of the outgoing packet's label stack.")
hpnicfmplsOutSegmentNextHopIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 1, 1, 6, 1, 5), InetAddressType().clone('unknown')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfmplsOutSegmentNextHopIpAddrType.setStatus('current')
if mibBuilder.loadTexts: hpnicfmplsOutSegmentNextHopIpAddrType.setDescription('Indicates whether the next hop address is IPv4 or IPv6. Note that a value of unknown (0) is valid only when the outgoing interface is of type point-to- point.')
hpnicfmplsOutSegmentNextHopIpv4Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 1, 1, 6, 1, 6), InetAddressIPv4()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfmplsOutSegmentNextHopIpv4Addr.setStatus('current')
if mibBuilder.loadTexts: hpnicfmplsOutSegmentNextHopIpv4Addr.setDescription('IPv4 Address of the next hop. Its value is significant only when hpnicfmplsOutSegmentNextHopIpAddrType is ipV4 (1), otherwise it should return a value of 0.')
hpnicfmplsOutSegmentNextHopIpv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 1, 1, 6, 1, 7), InetAddressIPv6()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfmplsOutSegmentNextHopIpv6Addr.setStatus('current')
if mibBuilder.loadTexts: hpnicfmplsOutSegmentNextHopIpv6Addr.setDescription('IPv6 address of the next hop. Its value is significant only when hpnicfmplsOutSegmentNextHopIpAddrType is ipV6 (2), otherwise it should return a value of 0.')
hpnicfmplsOutSegmentXCIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 1, 1, 6, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfmplsOutSegmentXCIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfmplsOutSegmentXCIndex.setDescription('Index into hpnicfmplsXCTable which identifies which cross- connect entry this segment is part of. A value of zero indicates that this entry is not referred to by any cross-connect entry. When a cross-connect entry is created which this out-segment is a part of, this object is automatically updated to reflect the value of hpnicfmplsXCIndex of that cross-connect entry.')
hpnicfmplsOutSegmentOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 1, 1, 6, 1, 9), HpnicfMplsObjectOwner().clone('unknown')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfmplsOutSegmentOwner.setStatus('current')
if mibBuilder.loadTexts: hpnicfmplsOutSegmentOwner.setDescription('Denotes the entity which created and is responsible for managing this segment.')
hpnicfmplsOutSegmentTrafficParamPtr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 1, 1, 6, 1, 10), RowPointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfmplsOutSegmentTrafficParamPtr.setStatus('current')
if mibBuilder.loadTexts: hpnicfmplsOutSegmentTrafficParamPtr.setDescription('This variable represents a pointer to the traffic parameter specification for this out-segment. This value may point at an entry in the hpnicfmplsTrafficParamTable to indicate which hpnicfmplsTrafficParamEntry is to be assigned to this segment. This value may optionally point at an externally defined traffic parameter specification table. A value of zero-dot-zero indicates best- effort treatment. By having the same value of this object, two or more segments can indicate resource sharing.')
hpnicfmplsOutSegmentRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 1, 1, 6, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfmplsOutSegmentRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfmplsOutSegmentRowStatus.setDescription('For creating, modifying, and deleting this row.')
hpnicfmplsOutSegmentStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 1, 1, 6, 1, 12), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfmplsOutSegmentStorageType.setStatus('current')
if mibBuilder.loadTexts: hpnicfmplsOutSegmentStorageType.setDescription('This variable indicates the storage type for this object.')
hpnicfmplsOutSegmentPerfTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 1, 1, 7), )
if mibBuilder.loadTexts: hpnicfmplsOutSegmentPerfTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfmplsOutSegmentPerfTable.setDescription('This table contains statistical information about outgoing segments from an LSR. The counters in this entry should behave in a manner similar to that of the interface.')
hpnicfmplsOutSegmentPerfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 1, 1, 7, 1), )
hpnicfmplsOutSegmentEntry.registerAugmentions(("HPN-ICF-MPLS-LSR-MIB", "hpnicfmplsOutSegmentPerfEntry"))
hpnicfmplsOutSegmentPerfEntry.setIndexNames(*hpnicfmplsOutSegmentEntry.getIndexNames())
if mibBuilder.loadTexts: hpnicfmplsOutSegmentPerfEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfmplsOutSegmentPerfEntry.setDescription('An entry in this table contains statistical information about one outgoing segment configured in hpnicfmplsOutSegmentTable.')
hpnicfmplsOutSegmentOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 1, 1, 7, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfmplsOutSegmentOctets.setStatus('current')
if mibBuilder.loadTexts: hpnicfmplsOutSegmentOctets.setDescription('This value contains the total number of octets sent on this segment.')
hpnicfmplsOutSegmentPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 1, 1, 7, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfmplsOutSegmentPackets.setStatus('current')
if mibBuilder.loadTexts: hpnicfmplsOutSegmentPackets.setDescription('This value contains the total number of packets sent on this segment.')
hpnicfmplsOutSegmentErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 1, 1, 7, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfmplsOutSegmentErrors.setStatus('current')
if mibBuilder.loadTexts: hpnicfmplsOutSegmentErrors.setDescription('Number of packets that could not be sent due to errors on this segment.')
hpnicfmplsOutSegmentDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 1, 1, 7, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfmplsOutSegmentDiscards.setStatus('current')
if mibBuilder.loadTexts: hpnicfmplsOutSegmentDiscards.setDescription('The number of labeled packets received on this out- segment, which were chosen to be discarded even though no errors had been detected to prevent their being transmitted. One possible reason for discarding such a labeled packet could be to free up buffer space.')
hpnicfmplsOutSegmentHCOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 1, 1, 7, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfmplsOutSegmentHCOctets.setStatus('current')
if mibBuilder.loadTexts: hpnicfmplsOutSegmentHCOctets.setDescription('Total number of octets sent. This is the 64 bit version of hpnicfmplsOutSegmentOctets.')
hpnicfmplsOutSegmentPerfDiscontinuityTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 1, 1, 7, 1, 6), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfmplsOutSegmentPerfDiscontinuityTime.setStatus('current')
if mibBuilder.loadTexts: hpnicfmplsOutSegmentPerfDiscontinuityTime.setDescription("The value of sysUpTime on the most recent occasion at which any one or more of this segment's Counter32 or Counter64 suffered a discontinuity. If no such discontinuities have occurred since the last re- initialization of the local management subsystem, then this object contains a zero value.")
hpnicfmplsXCIndexNext = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfmplsXCIndexNext.setStatus('current')
if mibBuilder.loadTexts: hpnicfmplsXCIndexNext.setDescription('This object contains an appropriate value to be used for hpnicfmplsXCIndex when creating entries in the hpnicfmplsXCTable. The value 0 indicates that no unassigned entries are available. To obtain the value of hpnicfmplsXCIndex for a new entry in the hpnicfmplsXCTable, the manager issues a management protocol retrieval operation to obtain the current value of hpnicfmplsXCIndex. After each retrieval operation, the agent should modify the value to reflect the next unassigned index. After a manager retrieves a value the agent will determine through its local policy when this index value will be made available for reuse.')
hpnicfmplsXCTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 1, 1, 9), )
if mibBuilder.loadTexts: hpnicfmplsXCTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfmplsXCTable.setDescription('This table specifies information for switching between LSP segments. It supports point-to-point, point-to-multipoint and multipoint-to-point connections. hpnicfmplsLabelStackTable specifies the label stack information for a cross-connect LSR and is referred to from hpnicfmplsXCTable.')
hpnicfmplsXCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 1, 1, 9, 1), ).setIndexNames((0, "HPN-ICF-MPLS-LSR-MIB", "hpnicfmplsXCIndex"), (0, "HPN-ICF-MPLS-LSR-MIB", "hpnicfmplsInSegmentIfIndex"), (0, "HPN-ICF-MPLS-LSR-MIB", "hpnicfmplsInSegmentLabel"), (0, "HPN-ICF-MPLS-LSR-MIB", "hpnicfmplsOutSegmentIndex"))
if mibBuilder.loadTexts: hpnicfmplsXCEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfmplsXCEntry.setDescription('A row in this table represents one cross-connect entry. The following objects index it: - cross-connect index hpnicfmplsXCIndex that uniquely identifies a group of cross-connect entries - interface index of the in-segment, hpnicfmplsInSegmentIfIndex - incoming label(s), hpnicfmplsInSegmentLabel - out-segment index, hpnicfmplsOutSegmentIndex Originating LSPs: These are represented by using the special combination of values hpnicfmplsInSegmentIfIndex=0 and hpnicfmplsInSegmentLabel=0 as indexes. In this case the hpnicfmplsOutSegmentIndex MUST be non-zero. Terminating LSPs: These are represented by using the special value hpnicfmplsOutSegmentIndex=0 as index. Special labels: Entries indexed by reserved MPLS label values 0 through 15 imply terminating LSPs and MUST have hpnicfmplsOutSegmentIfIndex = 0. Note that situations where LSPs are terminated with incoming label equal to 0, should have hpnicfmplsInSegmentIfIndex = 0 as well, but can be distinguished from originating LSPs because the hpnicfmplsOutSegmentIfIndex = 0. The hpnicfmplsOutSegmentIfIndex MUST only be set to 0 in cases of terminating LSPs. An entry can be created by a network administrator or by an SNMP agent as instructed by an MPLS signaling protocol.')
hpnicfmplsXCIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 1, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfmplsXCIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfmplsXCIndex.setDescription('Primary index for the conceptual row identifying a group of cross-connect segments.')
hpnicfmplsXCLspId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 1, 1, 9, 1, 2), HpnicfMplsLSPID()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfmplsXCLspId.setStatus('current')
if mibBuilder.loadTexts: hpnicfmplsXCLspId.setDescription('This value identifies the label switched path that this cross-connect entry belongs to.')
hpnicfmplsXCLabelStackIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 1, 1, 9, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfmplsXCLabelStackIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfmplsXCLabelStackIndex.setDescription('Primary index into hpnicfmplsLabelStackTable identifying a stack of labels to be pushed beneath the top label. Note that the top label identified by the out- segment ensures that all the components of a multipoint-to-point connection have the same outgoing label. A value of 0 indicates that no labels are to be stacked beneath the top label.')
hpnicfmplsXCIsPersistent = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 1, 1, 9, 1, 4), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfmplsXCIsPersistent.setStatus('current')
if mibBuilder.loadTexts: hpnicfmplsXCIsPersistent.setDescription('Denotes whether or not this cross-connect entry and associated in- and out-segments should be restored automatically after failures. This value MUST be set to false in cases where this cross-connect entry was created by a signaling protocol.')
hpnicfmplsXCOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 1, 1, 9, 1, 5), HpnicfMplsObjectOwner()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfmplsXCOwner.setStatus('current')
if mibBuilder.loadTexts: hpnicfmplsXCOwner.setDescription('Denotes the entity that created and is responsible for managing this cross-connect.')
hpnicfmplsXCRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 1, 1, 9, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfmplsXCRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfmplsXCRowStatus.setDescription('For creating, modifying, and deleting this row.')
hpnicfmplsXCStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 1, 1, 9, 1, 7), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfmplsXCStorageType.setStatus('current')
if mibBuilder.loadTexts: hpnicfmplsXCStorageType.setDescription('Defines the storage type for this object.')
hpnicfmplsXCAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 1, 1, 9, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfmplsXCAdminStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfmplsXCAdminStatus.setDescription('The desired operational status of this segment.')
hpnicfmplsXCOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 1, 1, 9, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3), ("unknown", 4), ("dormant", 5), ("notPresent", 6), ("lowerLayerDown", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfmplsXCOperStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfmplsXCOperStatus.setDescription('The actual operational status of this cross- connect.')
hpnicfmplsMaxLabelStackDepth = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfmplsMaxLabelStackDepth.setStatus('current')
if mibBuilder.loadTexts: hpnicfmplsMaxLabelStackDepth.setDescription('The maximum stack depth supported by this LSR.')
hpnicfmplsLabelStackIndexNext = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfmplsLabelStackIndexNext.setStatus('current')
if mibBuilder.loadTexts: hpnicfmplsLabelStackIndexNext.setDescription('This object contains an appropriate value to be used for hpnicfmplsLabelStackIndex when creating entries in the hpnicfmplsLabelStackTable. The value 0 indicates that no unassigned entries are available. To obtain an hpnicfmplsLabelStackIndex value for a new entry, the manager issues a management protocol retrieval operation to obtain the current value of this object. After each retrieval operation, the agent should modify the value to reflect the next unassigned index. After a manager retrieves a value the agent will determine through its local policy when this index value will be made available for reuse.')
hpnicfmplsLabelStackTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 1, 1, 12), )
if mibBuilder.loadTexts: hpnicfmplsLabelStackTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfmplsLabelStackTable.setDescription('This table specifies the label stack to be pushed onto a packet, beneath the top label. Entries into this table are referred to from hpnicfmplsXCTable.')
hpnicfmplsLabelStackEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 1, 1, 12, 1), ).setIndexNames((0, "HPN-ICF-MPLS-LSR-MIB", "hpnicfmplsLabelStackIndex"), (0, "HPN-ICF-MPLS-LSR-MIB", "hpnicfmplsLabelStackLabelIndex"))
if mibBuilder.loadTexts: hpnicfmplsLabelStackEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfmplsLabelStackEntry.setDescription('An entry in this table represents one label which is to be pushed onto an outgoing packet, beneath the top label. An entry can be created by a network administrator or by an SNMP agent as instructed by an MPLS signaling protocol.')
hpnicfmplsLabelStackIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 1, 1, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: hpnicfmplsLabelStackIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfmplsLabelStackIndex.setDescription('Primary index for this row identifying a stack of labels to be pushed on an outgoing packet, beneath the top label.')
hpnicfmplsLabelStackLabelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 1, 1, 12, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: hpnicfmplsLabelStackLabelIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfmplsLabelStackLabelIndex.setDescription('Secondary index for this row identifying one label of the stack. Note that an entry with a smaller hpnicfmplsLabelStackLabelIndex would refer to a label higher up the label stack and would be popped at a downstream LSR before a label represented by a higher hpnicfmplsLabelStackLabelIndex at a downstream LSR.')
hpnicfmplsLabelStackLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 1, 1, 12, 1, 3), HpnicfMplsLabel()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfmplsLabelStackLabel.setStatus('current')
if mibBuilder.loadTexts: hpnicfmplsLabelStackLabel.setDescription('The label to pushed.')
hpnicfmplsLabelStackRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 1, 1, 12, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfmplsLabelStackRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfmplsLabelStackRowStatus.setDescription('For creating, modifying, and deleting this row.')
hpnicfmplsLabelStackStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 1, 1, 12, 1, 5), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfmplsLabelStackStorageType.setStatus('current')
if mibBuilder.loadTexts: hpnicfmplsLabelStackStorageType.setDescription('Defines the storage type for this object.')
hpnicfmplsTrafficParamIndexNext = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfmplsTrafficParamIndexNext.setStatus('current')
if mibBuilder.loadTexts: hpnicfmplsTrafficParamIndexNext.setDescription('This object contains an appropriate value which will be used for hpnicfmplsTrafficParamIndex when creating entries in the hpnicfmplsTrafficParamTable. The value 0 indicates that no unassigned entries are available. To obtain the hpnicfmplsTrafficParamIndex value for a new entry, the manager issues a management protocol retrieval operation to obtain the current value of this object. After each retrieval operation, the agent should modify the value to reflect the next unassigned index. After a manager retrieves a value the agent will determine through its local policy when this index value will be made available for reuse.')
hpnicfmplsTrafficParamTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 1, 1, 14), )
if mibBuilder.loadTexts: hpnicfmplsTrafficParamTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfmplsTrafficParamTable.setDescription('This table specifies the Traffic Parameter objects for in and out-segments.')
hpnicfmplsTrafficParamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 1, 1, 14, 1), ).setIndexNames((0, "HPN-ICF-MPLS-LSR-MIB", "hpnicfmplsTrafficParamIndex"))
if mibBuilder.loadTexts: hpnicfmplsTrafficParamEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfmplsTrafficParamEntry.setDescription('An entry in this table represents the TrafficParam objects for one or more in or out segments. A single entry can be pointed to by multiple segments indicating resource sharing.')
hpnicfmplsTrafficParamIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 1, 1, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: hpnicfmplsTrafficParamIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfmplsTrafficParamIndex.setDescription('Uniquely identifies this row of the table. Note that zero represents an invalid index.')
hpnicfmplsTrafficParamMaxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 1, 1, 14, 1, 2), HpnicfMplsBitRate()).setUnits('kilobits per second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfmplsTrafficParamMaxRate.setStatus('current')
if mibBuilder.loadTexts: hpnicfmplsTrafficParamMaxRate.setDescription('Maximum rate in kilobits/second.')
hpnicfmplsTrafficParamMeanRate = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 1, 1, 14, 1, 3), HpnicfMplsBitRate()).setUnits('kilobits per second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfmplsTrafficParamMeanRate.setStatus('current')
if mibBuilder.loadTexts: hpnicfmplsTrafficParamMeanRate.setDescription('Mean rate in kilobits/second.')
hpnicfmplsTrafficParamMaxBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 1, 1, 14, 1, 4), HpnicfMplsBurstSize()).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfmplsTrafficParamMaxBurstSize.setStatus('current')
if mibBuilder.loadTexts: hpnicfmplsTrafficParamMaxBurstSize.setDescription('Maximum burst size in bytes.')
hpnicfmplsTrafficParamRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 1, 1, 14, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfmplsTrafficParamRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfmplsTrafficParamRowStatus.setDescription('For creating, modifying, and deleting this row.')
hpnicfmplsTrafficParamStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 1, 1, 14, 1, 6), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfmplsTrafficParamStorageType.setStatus('current')
if mibBuilder.loadTexts: hpnicfmplsTrafficParamStorageType.setDescription('The storage type for this object.')
hpnicfmplsXCTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 1, 1, 15), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfmplsXCTrapEnable.setStatus('current')
if mibBuilder.loadTexts: hpnicfmplsXCTrapEnable.setDescription('If this object is true, then it enables the generation of hpnicfmplsXCUp and hpnicfmplsXCDown traps, otherwise these traps are not emitted.')
hpnicfmplsXCUp = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 1, 2, 0, 1)).setObjects(("HPN-ICF-MPLS-LSR-MIB", "hpnicfmplsXCIndex"), ("HPN-ICF-MPLS-LSR-MIB", "hpnicfmplsInSegmentIfIndex"), ("HPN-ICF-MPLS-LSR-MIB", "hpnicfmplsInSegmentLabel"), ("HPN-ICF-MPLS-LSR-MIB", "hpnicfmplsOutSegmentIndex"), ("HPN-ICF-MPLS-LSR-MIB", "hpnicfmplsXCAdminStatus"), ("HPN-ICF-MPLS-LSR-MIB", "hpnicfmplsXCOperStatus"))
if mibBuilder.loadTexts: hpnicfmplsXCUp.setStatus('current')
if mibBuilder.loadTexts: hpnicfmplsXCUp.setDescription('This notification is generated when a hpnicfmplsXCOperStatus object for one of the configured cross-connect entries is about to leave the down state and transition into some other state (but not into the notPresent state). This other state is indicated by the included value of hpnicfmplsXCOperStatus.')
hpnicfmplsXCDown = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 1, 2, 0, 2)).setObjects(("HPN-ICF-MPLS-LSR-MIB", "hpnicfmplsXCIndex"), ("HPN-ICF-MPLS-LSR-MIB", "hpnicfmplsInSegmentIfIndex"), ("HPN-ICF-MPLS-LSR-MIB", "hpnicfmplsInSegmentLabel"), ("HPN-ICF-MPLS-LSR-MIB", "hpnicfmplsOutSegmentIndex"), ("HPN-ICF-MPLS-LSR-MIB", "hpnicfmplsXCAdminStatus"), ("HPN-ICF-MPLS-LSR-MIB", "hpnicfmplsXCOperStatus"))
if mibBuilder.loadTexts: hpnicfmplsXCDown.setStatus('current')
if mibBuilder.loadTexts: hpnicfmplsXCDown.setDescription('This notification is generated when a hpnicfmplsXCOperStatus object for one of the configured cross-connect entries is about to enter the down state from some other state (but not from the notPresent state). This other state is indicated by the included value of hpnicfmplsXCOperStatus.')
hpnicfmplsLsrGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 1, 3, 1))
hpnicfmplsLsrCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 1, 3, 2))
hpnicfmplsLsrModuleCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 1, 3, 2, 1)).setObjects(("HPN-ICF-MPLS-LSR-MIB", "hpnicfmplsInSegmentGroup"), ("HPN-ICF-MPLS-LSR-MIB", "hpnicfmplsOutSegmentGroup"), ("HPN-ICF-MPLS-LSR-MIB", "hpnicfmplsXCGroup"), ("HPN-ICF-MPLS-LSR-MIB", "hpnicfmplsInterfaceGroup"), ("HPN-ICF-MPLS-LSR-MIB", "hpnicfmplsPerfGroup"), ("HPN-ICF-MPLS-LSR-MIB", "hpnicfmplsSegmentDiscontinuityGroup"), ("HPN-ICF-MPLS-LSR-MIB", "hpnicfmplsHCInSegmentPerfGroup"), ("HPN-ICF-MPLS-LSR-MIB", "hpnicfmplsHCOutSegmentPerfGroup"), ("HPN-ICF-MPLS-LSR-MIB", "hpnicfmplsTrafficParamGroup"), ("HPN-ICF-MPLS-LSR-MIB", "hpnicfmplsXCIsPersistentGroup"), ("HPN-ICF-MPLS-LSR-MIB", "hpnicfmplsXCIsNotPersistentGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpnicfmplsLsrModuleCompliance = hpnicfmplsLsrModuleCompliance.setStatus('current')
if mibBuilder.loadTexts: hpnicfmplsLsrModuleCompliance.setDescription('Compliance statement for agents that support the MPLS LSR MIB.')
hpnicfmplsInterfaceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 1, 3, 1, 1)).setObjects(("HPN-ICF-MPLS-LSR-MIB", "hpnicfmplsInterfaceLabelMinIn"), ("HPN-ICF-MPLS-LSR-MIB", "hpnicfmplsInterfaceLabelMaxIn"), ("HPN-ICF-MPLS-LSR-MIB", "hpnicfmplsInterfaceLabelMinOut"), ("HPN-ICF-MPLS-LSR-MIB", "hpnicfmplsInterfaceLabelMaxOut"), ("HPN-ICF-MPLS-LSR-MIB", "hpnicfmplsInterfaceTotalBandwidth"), ("HPN-ICF-MPLS-LSR-MIB", "hpnicfmplsInterfaceAvailableBandwidth"), ("HPN-ICF-MPLS-LSR-MIB", "hpnicfmplsInterfaceLabelParticipationType"), ("HPN-ICF-MPLS-LSR-MIB", "hpnicfmplsInterfaceConfStorageType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpnicfmplsInterfaceGroup = hpnicfmplsInterfaceGroup.setStatus('current')
if mibBuilder.loadTexts: hpnicfmplsInterfaceGroup.setDescription('Collection of objects needed for MPLS interface configuration and performance information.')
hpnicfmplsInSegmentGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 1, 3, 1, 2)).setObjects(("HPN-ICF-MPLS-LSR-MIB", "hpnicfmplsInSegmentNPop"), ("HPN-ICF-MPLS-LSR-MIB", "hpnicfmplsInSegmentAddrFamily"), ("HPN-ICF-MPLS-LSR-MIB", "hpnicfmplsInSegmentXCIndex"), ("HPN-ICF-MPLS-LSR-MIB", "hpnicfmplsInSegmentOctets"), ("HPN-ICF-MPLS-LSR-MIB", "hpnicfmplsInSegmentDiscards"), ("HPN-ICF-MPLS-LSR-MIB", "hpnicfmplsInSegmentOwner"), ("HPN-ICF-MPLS-LSR-MIB", "hpnicfmplsInSegmentRowStatus"), ("HPN-ICF-MPLS-LSR-MIB", "hpnicfmplsInSegmentStorageType"), ("HPN-ICF-MPLS-LSR-MIB", "hpnicfmplsInSegmentTrafficParamPtr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpnicfmplsInSegmentGroup = hpnicfmplsInSegmentGroup.setStatus('current')
if mibBuilder.loadTexts: hpnicfmplsInSegmentGroup.setDescription('Collection of objects needed to implement an in- segment.')
hpnicfmplsOutSegmentGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 1, 3, 1, 3)).setObjects(("HPN-ICF-MPLS-LSR-MIB", "hpnicfmplsOutSegmentIndexNext"), ("HPN-ICF-MPLS-LSR-MIB", "hpnicfmplsOutSegmentIfIndex"), ("HPN-ICF-MPLS-LSR-MIB", "hpnicfmplsOutSegmentPushTopLabel"), ("HPN-ICF-MPLS-LSR-MIB", "hpnicfmplsOutSegmentTopLabel"), ("HPN-ICF-MPLS-LSR-MIB", "hpnicfmplsOutSegmentNextHopIpAddrType"), ("HPN-ICF-MPLS-LSR-MIB", "hpnicfmplsOutSegmentNextHopIpv4Addr"), ("HPN-ICF-MPLS-LSR-MIB", "hpnicfmplsOutSegmentNextHopIpv6Addr"), ("HPN-ICF-MPLS-LSR-MIB", "hpnicfmplsOutSegmentXCIndex"), ("HPN-ICF-MPLS-LSR-MIB", "hpnicfmplsOutSegmentOwner"), ("HPN-ICF-MPLS-LSR-MIB", "hpnicfmplsOutSegmentOctets"), ("HPN-ICF-MPLS-LSR-MIB", "hpnicfmplsOutSegmentDiscards"), ("HPN-ICF-MPLS-LSR-MIB", "hpnicfmplsOutSegmentErrors"), ("HPN-ICF-MPLS-LSR-MIB", "hpnicfmplsOutSegmentRowStatus"), ("HPN-ICF-MPLS-LSR-MIB", "hpnicfmplsOutSegmentStorageType"), ("HPN-ICF-MPLS-LSR-MIB", "hpnicfmplsOutSegmentTrafficParamPtr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpnicfmplsOutSegmentGroup = hpnicfmplsOutSegmentGroup.setStatus('current')
if mibBuilder.loadTexts: hpnicfmplsOutSegmentGroup.setDescription('Collection of objects needed to implement an out- segment.')
hpnicfmplsXCGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 1, 3, 1, 4)).setObjects(("HPN-ICF-MPLS-LSR-MIB", "hpnicfmplsXCIndexNext"), ("HPN-ICF-MPLS-LSR-MIB", "hpnicfmplsXCLabelStackIndex"), ("HPN-ICF-MPLS-LSR-MIB", "hpnicfmplsXCOwner"), ("HPN-ICF-MPLS-LSR-MIB", "hpnicfmplsXCAdminStatus"), ("HPN-ICF-MPLS-LSR-MIB", "hpnicfmplsXCOperStatus"), ("HPN-ICF-MPLS-LSR-MIB", "hpnicfmplsXCRowStatus"), ("HPN-ICF-MPLS-LSR-MIB", "hpnicfmplsXCTrapEnable"), ("HPN-ICF-MPLS-LSR-MIB", "hpnicfmplsXCStorageType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpnicfmplsXCGroup = hpnicfmplsXCGroup.setStatus('current')
if mibBuilder.loadTexts: hpnicfmplsXCGroup.setDescription('Collection of objects needed to implement a cross-connect entry.')
hpnicfmplsXCOptionalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 1, 3, 1, 5)).setObjects(("HPN-ICF-MPLS-LSR-MIB", "hpnicfmplsXCLspId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpnicfmplsXCOptionalGroup = hpnicfmplsXCOptionalGroup.setStatus('current')
if mibBuilder.loadTexts: hpnicfmplsXCOptionalGroup.setDescription('Collection of optional objects for implementing a cross-connect entry.')
hpnicfmplsPerfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 1, 3, 1, 6)).setObjects(("HPN-ICF-MPLS-LSR-MIB", "hpnicfmplsInSegmentOctets"), ("HPN-ICF-MPLS-LSR-MIB", "hpnicfmplsInSegmentPackets"), ("HPN-ICF-MPLS-LSR-MIB", "hpnicfmplsInSegmentErrors"), ("HPN-ICF-MPLS-LSR-MIB", "hpnicfmplsInSegmentDiscards"), ("HPN-ICF-MPLS-LSR-MIB", "hpnicfmplsOutSegmentOctets"), ("HPN-ICF-MPLS-LSR-MIB", "hpnicfmplsOutSegmentPackets"), ("HPN-ICF-MPLS-LSR-MIB", "hpnicfmplsOutSegmentDiscards"), ("HPN-ICF-MPLS-LSR-MIB", "hpnicfmplsInterfaceInLabelsUsed"), ("HPN-ICF-MPLS-LSR-MIB", "hpnicfmplsInterfaceFailedLabelLookup"), ("HPN-ICF-MPLS-LSR-MIB", "hpnicfmplsInterfaceOutFragments"), ("HPN-ICF-MPLS-LSR-MIB", "hpnicfmplsInterfaceOutLabelsUsed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpnicfmplsPerfGroup = hpnicfmplsPerfGroup.setStatus('current')
if mibBuilder.loadTexts: hpnicfmplsPerfGroup.setDescription('Collection of objects providing performance information about an LSR.')
hpnicfmplsHCInSegmentPerfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 1, 3, 1, 7)).setObjects(("HPN-ICF-MPLS-LSR-MIB", "hpnicfmplsInSegmentHCOctets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpnicfmplsHCInSegmentPerfGroup = hpnicfmplsHCInSegmentPerfGroup.setStatus('current')
if mibBuilder.loadTexts: hpnicfmplsHCInSegmentPerfGroup.setDescription('Object(s) providing performance information specific to out-segments for which the object hpnicfmplsInterfaceInOctets wraps around too quickly.')
hpnicfmplsHCOutSegmentPerfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 1, 3, 1, 8)).setObjects(("HPN-ICF-MPLS-LSR-MIB", "hpnicfmplsOutSegmentHCOctets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpnicfmplsHCOutSegmentPerfGroup = hpnicfmplsHCOutSegmentPerfGroup.setStatus('current')
if mibBuilder.loadTexts: hpnicfmplsHCOutSegmentPerfGroup.setDescription('Object(s) providing performance information specific to out-segments for which the object hpnicfmplsInterfaceOutOctets wraps around too quickly.')
hpnicfmplsTrafficParamGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 1, 3, 1, 9)).setObjects(("HPN-ICF-MPLS-LSR-MIB", "hpnicfmplsTrafficParamIndexNext"), ("HPN-ICF-MPLS-LSR-MIB", "hpnicfmplsTrafficParamMaxRate"), ("HPN-ICF-MPLS-LSR-MIB", "hpnicfmplsTrafficParamMeanRate"), ("HPN-ICF-MPLS-LSR-MIB", "hpnicfmplsTrafficParamMaxBurstSize"), ("HPN-ICF-MPLS-LSR-MIB", "hpnicfmplsTrafficParamRowStatus"), ("HPN-ICF-MPLS-LSR-MIB", "hpnicfmplsTrafficParamStorageType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpnicfmplsTrafficParamGroup = hpnicfmplsTrafficParamGroup.setStatus('current')
if mibBuilder.loadTexts: hpnicfmplsTrafficParamGroup.setDescription('Object(s) required for supporting QoS resource reservation.')
hpnicfmplsXCIsPersistentGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 1, 3, 1, 10)).setObjects(("HPN-ICF-MPLS-LSR-MIB", "hpnicfmplsXCIsPersistent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpnicfmplsXCIsPersistentGroup = hpnicfmplsXCIsPersistentGroup.setStatus('current')
if mibBuilder.loadTexts: hpnicfmplsXCIsPersistentGroup.setDescription('Objects needed to support persistent cross- connects.')
hpnicfmplsXCIsNotPersistentGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 1, 3, 1, 11)).setObjects(("HPN-ICF-MPLS-LSR-MIB", "hpnicfmplsXCIsPersistent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpnicfmplsXCIsNotPersistentGroup = hpnicfmplsXCIsNotPersistentGroup.setStatus('current')
if mibBuilder.loadTexts: hpnicfmplsXCIsNotPersistentGroup.setDescription('Objects needed to support non-persistent cross- connects.')
hpnicfmplsLabelStackGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 1, 3, 1, 12)).setObjects(("HPN-ICF-MPLS-LSR-MIB", "hpnicfmplsLabelStackLabel"), ("HPN-ICF-MPLS-LSR-MIB", "hpnicfmplsLabelStackRowStatus"), ("HPN-ICF-MPLS-LSR-MIB", "hpnicfmplsLabelStackStorageType"), ("HPN-ICF-MPLS-LSR-MIB", "hpnicfmplsMaxLabelStackDepth"), ("HPN-ICF-MPLS-LSR-MIB", "hpnicfmplsLabelStackIndexNext"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpnicfmplsLabelStackGroup = hpnicfmplsLabelStackGroup.setStatus('current')
if mibBuilder.loadTexts: hpnicfmplsLabelStackGroup.setDescription('Objects needed to support label stacking.')
hpnicfmplsSegmentDiscontinuityGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 1, 3, 1, 13)).setObjects(("HPN-ICF-MPLS-LSR-MIB", "hpnicfmplsInSegmentPerfDiscontinuityTime"), ("HPN-ICF-MPLS-LSR-MIB", "hpnicfmplsOutSegmentPerfDiscontinuityTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpnicfmplsSegmentDiscontinuityGroup = hpnicfmplsSegmentDiscontinuityGroup.setStatus('current')
if mibBuilder.loadTexts: hpnicfmplsSegmentDiscontinuityGroup.setDescription(' A collection of objects providing information specific to segment discontinuities..')
hpnicfmplsLsrNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 12, 1, 3, 1, 14)).setObjects(("HPN-ICF-MPLS-LSR-MIB", "hpnicfmplsXCUp"), ("HPN-ICF-MPLS-LSR-MIB", "hpnicfmplsXCDown"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpnicfmplsLsrNotificationGroup = hpnicfmplsLsrNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: hpnicfmplsLsrNotificationGroup.setDescription('Set of notifications implemented in this module. None is mandatory.')
mibBuilder.exportSymbols("HPN-ICF-MPLS-LSR-MIB", hpnicfmplsHCInSegmentPerfGroup=hpnicfmplsHCInSegmentPerfGroup, hpnicfmplsInterfaceConfEntry=hpnicfmplsInterfaceConfEntry, hpnicfmplsInterfaceLabelMaxOut=hpnicfmplsInterfaceLabelMaxOut, hpnicfmplsOutSegmentIfIndex=hpnicfmplsOutSegmentIfIndex, hpnicfmplsXCOwner=hpnicfmplsXCOwner, hpnicfmplsXCTrapEnable=hpnicfmplsXCTrapEnable, hpnicfmplsXCDown=hpnicfmplsXCDown, hpnicfmplsInSegmentTrafficParamPtr=hpnicfmplsInSegmentTrafficParamPtr, hpnicfmplsLabelStackLabel=hpnicfmplsLabelStackLabel, hpnicfmplsOutSegmentOctets=hpnicfmplsOutSegmentOctets, hpnicfmplsTrafficParamGroup=hpnicfmplsTrafficParamGroup, hpnicfmplsXCIsNotPersistentGroup=hpnicfmplsXCIsNotPersistentGroup, hpnicfmplsXCGroup=hpnicfmplsXCGroup, hpnicfmplsInSegmentHCOctets=hpnicfmplsInSegmentHCOctets, hpnicfmplsOutSegmentTrafficParamPtr=hpnicfmplsOutSegmentTrafficParamPtr, hpnicfmplsOutSegmentRowStatus=hpnicfmplsOutSegmentRowStatus, hpnicfmplsInterfaceOutLabelsUsed=hpnicfmplsInterfaceOutLabelsUsed, hpnicfmplsLabelStackGroup=hpnicfmplsLabelStackGroup, hpnicfmplsOutSegmentErrors=hpnicfmplsOutSegmentErrors, hpnicfmplsOutSegmentTopLabel=hpnicfmplsOutSegmentTopLabel, hpnicfmplsXCUp=hpnicfmplsXCUp, hpnicfmplsInterfaceConfIndex=hpnicfmplsInterfaceConfIndex, hpnicfmplsTrafficParamStorageType=hpnicfmplsTrafficParamStorageType, hpnicfmplsXCIsPersistent=hpnicfmplsXCIsPersistent, hpnicfmplsInSegmentDiscards=hpnicfmplsInSegmentDiscards, hpnicfmplsInterfaceConfTable=hpnicfmplsInterfaceConfTable, hpnicfmplsInSegmentRowStatus=hpnicfmplsInSegmentRowStatus, HpnicfMplsBitRate=HpnicfMplsBitRate, hpnicfmplsLabelStackIndexNext=hpnicfmplsLabelStackIndexNext, hpnicfmplsLsrNotifications=hpnicfmplsLsrNotifications, hpnicfmplsSegmentDiscontinuityGroup=hpnicfmplsSegmentDiscontinuityGroup, hpnicfmplsMaxLabelStackDepth=hpnicfmplsMaxLabelStackDepth, hpnicfmplsLabelStackTable=hpnicfmplsLabelStackTable, hpnicfmplsTrafficParamRowStatus=hpnicfmplsTrafficParamRowStatus, hpnicfmplsInSegmentPerfEntry=hpnicfmplsInSegmentPerfEntry, hpnicfmplsOutSegmentPackets=hpnicfmplsOutSegmentPackets, hpnicfmplsInterfaceLabelMinIn=hpnicfmplsInterfaceLabelMinIn, hpnicfmplsXCIsPersistentGroup=hpnicfmplsXCIsPersistentGroup, HpnicfMplsObjectOwner=HpnicfMplsObjectOwner, hpnicfmplsOutSegmentPushTopLabel=hpnicfmplsOutSegmentPushTopLabel, hpnicfmplsXCIndex=hpnicfmplsXCIndex, hpnicfmplsTrafficParamMeanRate=hpnicfmplsTrafficParamMeanRate, hpnicfmplsLsrModuleCompliance=hpnicfmplsLsrModuleCompliance, hpnicfmplsOutSegmentXCIndex=hpnicfmplsOutSegmentXCIndex, hpnicfmplsOutSegmentPerfTable=hpnicfmplsOutSegmentPerfTable, hpnicfmplsOutSegmentEntry=hpnicfmplsOutSegmentEntry, hpnicfmplsInterfaceTotalBandwidth=hpnicfmplsInterfaceTotalBandwidth, hpnicfmplsInterfaceInLabelsUsed=hpnicfmplsInterfaceInLabelsUsed, PYSNMP_MODULE_ID=hpnicfMplsLsr, hpnicfmplsInSegmentAddrFamily=hpnicfmplsInSegmentAddrFamily, hpnicfmplsXCStorageType=hpnicfmplsXCStorageType, hpnicfmplsLsrCompliances=hpnicfmplsLsrCompliances, hpnicfmplsLsrConformance=hpnicfmplsLsrConformance, hpnicfmplsInSegmentOctets=hpnicfmplsInSegmentOctets, hpnicfmplsXCLabelStackIndex=hpnicfmplsXCLabelStackIndex, hpnicfmplsTrafficParamIndexNext=hpnicfmplsTrafficParamIndexNext, hpnicfmplsLabelStackEntry=hpnicfmplsLabelStackEntry, hpnicfmplsHCOutSegmentPerfGroup=hpnicfmplsHCOutSegmentPerfGroup, hpnicfmplsInterfaceFailedLabelLookup=hpnicfmplsInterfaceFailedLabelLookup, hpnicfmplsTrafficParamMaxBurstSize=hpnicfmplsTrafficParamMaxBurstSize, hpnicfmplsInterfaceLabelMaxIn=hpnicfmplsInterfaceLabelMaxIn, hpnicfmplsXCLspId=hpnicfmplsXCLspId, hpnicfmplsLabelStackRowStatus=hpnicfmplsLabelStackRowStatus, hpnicfmplsTrafficParamEntry=hpnicfmplsTrafficParamEntry, hpnicfmplsOutSegmentIndex=hpnicfmplsOutSegmentIndex, hpnicfmplsTrafficParamTable=hpnicfmplsTrafficParamTable, hpnicfmplsOutSegmentIndexNext=hpnicfmplsOutSegmentIndexNext, hpnicfmplsXCOperStatus=hpnicfmplsXCOperStatus, HpnicfMplsLSPID=HpnicfMplsLSPID, hpnicfmplsInterfacePerfTable=hpnicfmplsInterfacePerfTable, hpnicfmplsOutSegmentOwner=hpnicfmplsOutSegmentOwner, hpnicfmplsInSegmentIfIndex=hpnicfmplsInSegmentIfIndex, hpnicfmplsInSegmentPerfTable=hpnicfmplsInSegmentPerfTable, hpnicfMplsLsr=hpnicfMplsLsr, hpnicfmplsInterfaceLabelParticipationType=hpnicfmplsInterfaceLabelParticipationType, hpnicfmplsInterfacePerfEntry=hpnicfmplsInterfacePerfEntry, hpnicfmplsLabelStackIndex=hpnicfmplsLabelStackIndex, hpnicfmplsTrafficParamMaxRate=hpnicfmplsTrafficParamMaxRate, hpnicfmplsInSegmentGroup=hpnicfmplsInSegmentGroup, hpnicfmplsXCAdminStatus=hpnicfmplsXCAdminStatus, HpnicfMplsBurstSize=HpnicfMplsBurstSize, hpnicfmplsLsrObjects=hpnicfmplsLsrObjects, hpnicfmplsInterfaceOutFragments=hpnicfmplsInterfaceOutFragments, hpnicfmplsXCOptionalGroup=hpnicfmplsXCOptionalGroup, hpnicfmplsLabelStackStorageType=hpnicfmplsLabelStackStorageType, hpnicfmplsXCRowStatus=hpnicfmplsXCRowStatus, hpnicfmplsOutSegmentStorageType=hpnicfmplsOutSegmentStorageType, hpnicfmplsInSegmentLabel=hpnicfmplsInSegmentLabel, hpnicfmplsInSegmentPackets=hpnicfmplsInSegmentPackets, hpnicfmplsInSegmentErrors=hpnicfmplsInSegmentErrors, hpnicfmplsOutSegmentPerfDiscontinuityTime=hpnicfmplsOutSegmentPerfDiscontinuityTime, hpnicfmplsXCEntry=hpnicfmplsXCEntry, hpnicfmplsOutSegmentNextHopIpv6Addr=hpnicfmplsOutSegmentNextHopIpv6Addr, hpnicfmplsInterfaceAvailableBandwidth=hpnicfmplsInterfaceAvailableBandwidth, hpnicfmplsTrafficParamIndex=hpnicfmplsTrafficParamIndex, hpnicfmplsInterfaceGroup=hpnicfmplsInterfaceGroup, hpnicfmplsInSegmentTable=hpnicfmplsInSegmentTable, hpnicfmplsInSegmentXCIndex=hpnicfmplsInSegmentXCIndex, hpnicfmplsOutSegmentGroup=hpnicfmplsOutSegmentGroup, hpnicfmplsOutSegmentNextHopIpAddrType=hpnicfmplsOutSegmentNextHopIpAddrType, hpnicfmplsLsrNotificationGroup=hpnicfmplsLsrNotificationGroup, hpnicfmplsLsrNotifyPrefix=hpnicfmplsLsrNotifyPrefix, hpnicfmplsOutSegmentDiscards=hpnicfmplsOutSegmentDiscards, hpnicfmplsInSegmentOwner=hpnicfmplsInSegmentOwner, hpnicfmplsInterfaceLabelMinOut=hpnicfmplsInterfaceLabelMinOut, hpnicfmplsLsrGroups=hpnicfmplsLsrGroups, hpnicfmplsOutSegmentPerfEntry=hpnicfmplsOutSegmentPerfEntry, hpnicfmplsOutSegmentTable=hpnicfmplsOutSegmentTable, hpnicfmplsInSegmentPerfDiscontinuityTime=hpnicfmplsInSegmentPerfDiscontinuityTime, HpnicfMplsLabel=HpnicfMplsLabel, hpnicfmplsOutSegmentNextHopIpv4Addr=hpnicfmplsOutSegmentNextHopIpv4Addr, hpnicfmplsInSegmentEntry=hpnicfmplsInSegmentEntry, hpnicfmplsInSegmentNPop=hpnicfmplsInSegmentNPop, hpnicfmplsInterfaceConfStorageType=hpnicfmplsInterfaceConfStorageType, hpnicfmplsXCIndexNext=hpnicfmplsXCIndexNext, hpnicfmplsXCTable=hpnicfmplsXCTable, hpnicfmplsLabelStackLabelIndex=hpnicfmplsLabelStackLabelIndex, hpnicfmplsPerfGroup=hpnicfmplsPerfGroup, hpnicfmplsInSegmentStorageType=hpnicfmplsInSegmentStorageType, hpnicfmplsOutSegmentHCOctets=hpnicfmplsOutSegmentHCOctets)
