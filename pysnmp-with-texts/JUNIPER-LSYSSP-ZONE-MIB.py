#
# PySNMP MIB module JUNIPER-LSYSSP-ZONE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/JUNIPER-LSYSSP-ZONE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:00:10 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint")
jnxLsysSpZone, = mibBuilder.importSymbols("JUNIPER-LSYS-SECURITYPROFILE-MIB", "jnxLsysSpZone")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, Gauge32, IpAddress, ModuleIdentity, iso, Counter32, Unsigned32, MibIdentifier, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Counter64, TimeTicks, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Gauge32", "IpAddress", "ModuleIdentity", "iso", "Counter32", "Unsigned32", "MibIdentifier", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Counter64", "TimeTicks", "Integer32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
jnxLsysSpZoneMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 1, 1))
if mibBuilder.loadTexts: jnxLsysSpZoneMIB.setLastUpdated('201005191644Z')
if mibBuilder.loadTexts: jnxLsysSpZoneMIB.setOrganization('Juniper Networks, Inc.')
if mibBuilder.loadTexts: jnxLsysSpZoneMIB.setContactInfo('Juniper Technical Assistance Center Juniper Networks, Inc. 1194 N. Mathilda Avenue Sunnyvale, CA 94089 E-mail: support@juniper.net HTTP://www.juniper.net')
if mibBuilder.loadTexts: jnxLsysSpZoneMIB.setDescription('This module defines the zone-specific MIB for Juniper Enterprise Logical-System (LSYS) security profiles. Juniper documentation is recommended as the reference. The LSYS security profile provides various static and dynamic resource management by observing resource quota limits. Security zone resource is the focus in this MIB. ')
jnxLsysSpZoneObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 1, 1, 1))
jnxLsysSpZoneSummary = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 1, 1, 2))
jnxLsysSpZoneTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 1, 1, 1, 1), )
if mibBuilder.loadTexts: jnxLsysSpZoneTable.setStatus('current')
if mibBuilder.loadTexts: jnxLsysSpZoneTable.setDescription('LSYSPROFILE zone objects for zone resource consumption per LSYS.')
jnxLsysSpZoneEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 1, 1, 1, 1, 1), ).setIndexNames((1, "JUNIPER-LSYSSP-ZONE-MIB", "jnxLsysSpZoneLsysName"))
if mibBuilder.loadTexts: jnxLsysSpZoneEntry.setStatus('current')
if mibBuilder.loadTexts: jnxLsysSpZoneEntry.setDescription('An entry in zone resource table.')
jnxLsysSpZoneLsysName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 1, 1, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: jnxLsysSpZoneLsysName.setStatus('current')
if mibBuilder.loadTexts: jnxLsysSpZoneLsysName.setDescription('The name of the logical system for which zone resource information is retrieved. ')
jnxLsysSpZoneProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 1, 1, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpZoneProfileName.setStatus('current')
if mibBuilder.loadTexts: jnxLsysSpZoneProfileName.setDescription('The security profile name string for the LSYS.')
jnxLsysSpZoneUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 1, 1, 1, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpZoneUsage.setStatus('current')
if mibBuilder.loadTexts: jnxLsysSpZoneUsage.setDescription('The current resource usage count for the LSYS.')
jnxLsysSpZoneReserved = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 1, 1, 1, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpZoneReserved.setStatus('current')
if mibBuilder.loadTexts: jnxLsysSpZoneReserved.setDescription('The reserved resource count for the LSYS.')
jnxLsysSpZoneMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 1, 1, 1, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpZoneMaximum.setStatus('current')
if mibBuilder.loadTexts: jnxLsysSpZoneMaximum.setDescription('The maximum allowed resource usage count for the LSYS.')
jnxLsysSpZoneUsedAmount = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 1, 1, 2, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpZoneUsedAmount.setStatus('current')
if mibBuilder.loadTexts: jnxLsysSpZoneUsedAmount.setDescription('The zone resource consumption over all LSYS.')
jnxLsysSpZoneMaxQuota = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 1, 1, 2, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpZoneMaxQuota.setStatus('current')
if mibBuilder.loadTexts: jnxLsysSpZoneMaxQuota.setDescription('The zone resource maximum quota for the whole device for all LSYS.')
jnxLsysSpZoneAvailableAmount = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 1, 1, 2, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpZoneAvailableAmount.setStatus('current')
if mibBuilder.loadTexts: jnxLsysSpZoneAvailableAmount.setDescription('The zone resource available in the whole device.')
jnxLsysSpZoneHeaviestUsage = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 1, 1, 2, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpZoneHeaviestUsage.setStatus('current')
if mibBuilder.loadTexts: jnxLsysSpZoneHeaviestUsage.setDescription('The most amount of zone resource consumed of a LSYS.')
jnxLsysSpZoneHeaviestUser = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 1, 1, 2, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpZoneHeaviestUser.setStatus('current')
if mibBuilder.loadTexts: jnxLsysSpZoneHeaviestUser.setDescription('The LSYS name that consume the most zone resource.')
jnxLsysSpZoneLightestUsage = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 1, 1, 2, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpZoneLightestUsage.setStatus('current')
if mibBuilder.loadTexts: jnxLsysSpZoneLightestUsage.setDescription('The least amount of zone resource consumed of a LSYS.')
jnxLsysSpZoneLightestUser = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 1, 1, 2, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpZoneLightestUser.setStatus('current')
if mibBuilder.loadTexts: jnxLsysSpZoneLightestUser.setDescription('The LSYS name that consume the least zone resource.')
mibBuilder.exportSymbols("JUNIPER-LSYSSP-ZONE-MIB", jnxLsysSpZoneSummary=jnxLsysSpZoneSummary, jnxLsysSpZoneLsysName=jnxLsysSpZoneLsysName, jnxLsysSpZoneUsedAmount=jnxLsysSpZoneUsedAmount, jnxLsysSpZoneMaxQuota=jnxLsysSpZoneMaxQuota, jnxLsysSpZoneHeaviestUsage=jnxLsysSpZoneHeaviestUsage, jnxLsysSpZoneLightestUsage=jnxLsysSpZoneLightestUsage, jnxLsysSpZoneAvailableAmount=jnxLsysSpZoneAvailableAmount, jnxLsysSpZoneLightestUser=jnxLsysSpZoneLightestUser, PYSNMP_MODULE_ID=jnxLsysSpZoneMIB, jnxLsysSpZoneReserved=jnxLsysSpZoneReserved, jnxLsysSpZoneUsage=jnxLsysSpZoneUsage, jnxLsysSpZoneObjects=jnxLsysSpZoneObjects, jnxLsysSpZoneHeaviestUser=jnxLsysSpZoneHeaviestUser, jnxLsysSpZoneMIB=jnxLsysSpZoneMIB, jnxLsysSpZoneMaximum=jnxLsysSpZoneMaximum, jnxLsysSpZoneTable=jnxLsysSpZoneTable, jnxLsysSpZoneEntry=jnxLsysSpZoneEntry, jnxLsysSpZoneProfileName=jnxLsysSpZoneProfileName)
