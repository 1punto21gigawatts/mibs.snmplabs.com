#
# PySNMP MIB module AT-PAE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/AT-PAE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:30:26 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint")
modules, = mibBuilder.importSymbols("AT-SMI-MIB", "modules")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, IpAddress, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, Counter32, Counter64, ModuleIdentity, MibIdentifier, iso, NotificationType, Integer32, TimeTicks, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "IpAddress", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "Counter32", "Counter64", "ModuleIdentity", "MibIdentifier", "iso", "NotificationType", "Integer32", "TimeTicks", "ObjectIdentity")
MacAddress, DisplayString, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "DisplayString", "TruthValue", "TextualConvention")
portAuth = ModuleIdentity((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 118))
portAuth.setRevisions(('2007-01-15 11:00', '2004-12-21 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: portAuth.setRevisionsDescriptions(('The Port Access Entity module for managing AT Port Authentication.', 'Initial Revision',))
if mibBuilder.loadTexts: portAuth.setLastUpdated('200701151100Z')
if mibBuilder.loadTexts: portAuth.setOrganization('Allied Telesis, Inc')
if mibBuilder.loadTexts: portAuth.setContactInfo('http://www.alliedtelesis.com')
if mibBuilder.loadTexts: portAuth.setDescription('Description of atrDot1xUnauthenticated is modified.')
atrPaeMib = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 118, 1))
atrPaeMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 118, 1, 1))
class AtrPaeControlledDirections(TextualConvention, Integer32):
    description = 'The control mode values for the Authenticator PAE.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("both", 0), ("in", 1))

class AtrPaeControlledPortStatus(TextualConvention, Integer32):
    description = 'The status values of the Authenticator PAE controlled Port.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("authorised", 1), ("unauthorised", 2))

class AtrPaeControlledPortControl(TextualConvention, Integer32):
    description = 'The control values of the Authenticator PAE controlled Port.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("forceUnauthorised", 1), ("auto", 2), ("forceAuthorised", 3))

atrDot1xPaeSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 118, 1, 1, 1))
atrDot1xPaeAuthenticator = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 118, 1, 1, 2))
atrDot1xTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 118, 1, 1, 3))
atrMacBasedAuthPaeSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 118, 1, 1, 4))
atrMacBasedAuthPaeAuthenticator = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 118, 1, 1, 5))
atrMacBasedAuthTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 118, 1, 1, 6))
atrDot1xPaePortTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 118, 1, 1, 1, 2), )
if mibBuilder.loadTexts: atrDot1xPaePortTable.setReference('9.6.1')
if mibBuilder.loadTexts: atrDot1xPaePortTable.setStatus('current')
if mibBuilder.loadTexts: atrDot1xPaePortTable.setDescription('A table of system level information for each port supported by the Port Access Entity. An entry appears in this table for each port of this system.')
atrDot1xPaePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 118, 1, 1, 1, 2, 1), ).setIndexNames((0, "AT-PAE-MIB", "atrDot1xPaePortNumber"), (0, "AT-PAE-MIB", "atrDot1xPaePortSuppMacAddress"))
if mibBuilder.loadTexts: atrDot1xPaePortEntry.setStatus('current')
if mibBuilder.loadTexts: atrDot1xPaePortEntry.setDescription('The Port number, protocol version, and initialisation control for a Port.')
atrDot1xPaePortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 118, 1, 1, 1, 2, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atrDot1xPaePortNumber.setReference('9.6.1, Port number')
if mibBuilder.loadTexts: atrDot1xPaePortNumber.setStatus('current')
if mibBuilder.loadTexts: atrDot1xPaePortNumber.setDescription('The Port number associated with this Port.')
atrDot1xPaePortProtocolVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 118, 1, 1, 1, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atrDot1xPaePortProtocolVersion.setReference('9.6.1, Protocol version')
if mibBuilder.loadTexts: atrDot1xPaePortProtocolVersion.setStatus('current')
if mibBuilder.loadTexts: atrDot1xPaePortProtocolVersion.setDescription('The protocol version associated with this Port.')
atrDot1xPaePortCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 118, 1, 1, 1, 2, 1, 3), Bits().clone(namedValues=NamedValues(("atrDot1xPaePortAuthCapable", 0), ("atrDot1xPaePortSuppCapable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atrDot1xPaePortCapabilities.setReference('9.6.1, PAE Capabilities')
if mibBuilder.loadTexts: atrDot1xPaePortCapabilities.setStatus('current')
if mibBuilder.loadTexts: atrDot1xPaePortCapabilities.setDescription('Indicates the PAE functionality that this Port supports and that may be managed through this MIB.')
atrDot1xPaePortInitialise = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 118, 1, 1, 1, 2, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atrDot1xPaePortInitialise.setReference('9.6.1.2, Initialise Port')
if mibBuilder.loadTexts: atrDot1xPaePortInitialise.setStatus('current')
if mibBuilder.loadTexts: atrDot1xPaePortInitialise.setDescription('The initialisation control for this Port. Setting this attribute TRUE causes the Port to be initialised. The attribute value reverts to FALSE once initialisation has completed.')
atrDot1xPaePortReauthenticate = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 118, 1, 1, 1, 2, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atrDot1xPaePortReauthenticate.setReference('9.4.1.3 Reauthenticate')
if mibBuilder.loadTexts: atrDot1xPaePortReauthenticate.setStatus('current')
if mibBuilder.loadTexts: atrDot1xPaePortReauthenticate.setDescription('The reauthentication control for this port. Setting this attribute TRUE causes the Authenticator PAE state machine for the Port to reauthenticate the Supplicant. Setting this attribute FALSE has no effect. This attribute always returns FALSE when it is read.')
atrDot1xPaePortSuppMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 118, 1, 1, 1, 2, 1, 6), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atrDot1xPaePortSuppMacAddress.setStatus('current')
if mibBuilder.loadTexts: atrDot1xPaePortSuppMacAddress.setDescription('The six character MAC Address of the attached supplicant.')
atrDot1xAuthConfigTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 118, 1, 1, 2, 1), )
if mibBuilder.loadTexts: atrDot1xAuthConfigTable.setReference('9.4.1 Authenticator Configuration')
if mibBuilder.loadTexts: atrDot1xAuthConfigTable.setStatus('current')
if mibBuilder.loadTexts: atrDot1xAuthConfigTable.setDescription('A table that contains the configuration objects for the Authenticator PAE associated with each port. An entry appears in this table for each port that may authenticate access to itself.')
atrDot1xAuthConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 118, 1, 1, 2, 1, 1), ).setIndexNames((0, "AT-PAE-MIB", "atrDot1xPaePortNumber"), (0, "AT-PAE-MIB", "atrDot1xPaePortSuppMacAddress"))
if mibBuilder.loadTexts: atrDot1xAuthConfigEntry.setStatus('current')
if mibBuilder.loadTexts: atrDot1xAuthConfigEntry.setDescription('The configuration information for an Authenticator PAE.')
atrDot1xAuthPaeState = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 118, 1, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("initialise", 1), ("disconnected", 2), ("connecting", 3), ("authenticating", 4), ("authenticated", 5), ("aborting", 6), ("held", 7), ("forceAuth", 8), ("forceUnauth", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atrDot1xAuthPaeState.setReference('9.4.1, Authenticator PAE state')
if mibBuilder.loadTexts: atrDot1xAuthPaeState.setStatus('current')
if mibBuilder.loadTexts: atrDot1xAuthPaeState.setDescription('The current value of the Authenticator PAE state machine.')
atrDot1xAuthBackendAuthState = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 118, 1, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("request", 1), ("response", 2), ("success", 3), ("fail", 4), ("timeout", 5), ("idle", 6), ("initialise", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atrDot1xAuthBackendAuthState.setReference('9.4.1, Backend Authentication state')
if mibBuilder.loadTexts: atrDot1xAuthBackendAuthState.setStatus('current')
if mibBuilder.loadTexts: atrDot1xAuthBackendAuthState.setDescription('The current state of the Backend Authentication state machine.')
atrDot1xAuthAdminControlledDirections = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 118, 1, 1, 2, 1, 1, 3), AtrPaeControlledDirections()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atrDot1xAuthAdminControlledDirections.setReference('9.4.1, Admin Control Mode')
if mibBuilder.loadTexts: atrDot1xAuthAdminControlledDirections.setStatus('current')
if mibBuilder.loadTexts: atrDot1xAuthAdminControlledDirections.setDescription('The current value of the administrative controlled directions parameter for the Port.')
atrDot1xAuthOperControlledDirections = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 118, 1, 1, 2, 1, 1, 4), AtrPaeControlledDirections()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atrDot1xAuthOperControlledDirections.setReference('9.4.1, Oper Control Mode')
if mibBuilder.loadTexts: atrDot1xAuthOperControlledDirections.setStatus('current')
if mibBuilder.loadTexts: atrDot1xAuthOperControlledDirections.setDescription('The current value of the operational controlled directions parameter for the Port.')
atrDot1xAuthAuthControlledPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 118, 1, 1, 2, 1, 1, 5), AtrPaeControlledPortStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atrDot1xAuthAuthControlledPortStatus.setReference('9.4.1, AuthControlledPortStatus')
if mibBuilder.loadTexts: atrDot1xAuthAuthControlledPortStatus.setStatus('current')
if mibBuilder.loadTexts: atrDot1xAuthAuthControlledPortStatus.setDescription('The current value of the controlled Port status parameter for the Port.')
atrDot1xAuthAuthControlledPortControl = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 118, 1, 1, 2, 1, 1, 6), AtrPaeControlledPortControl()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atrDot1xAuthAuthControlledPortControl.setReference('9.4.1, AuthControlledPortControl')
if mibBuilder.loadTexts: atrDot1xAuthAuthControlledPortControl.setStatus('current')
if mibBuilder.loadTexts: atrDot1xAuthAuthControlledPortControl.setDescription('The current value of the controlled Port control parameter for the Port.')
atrDot1xAuthQuietPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 118, 1, 1, 2, 1, 1, 7), Unsigned32().clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atrDot1xAuthQuietPeriod.setReference('9.4.1, quietPeriod')
if mibBuilder.loadTexts: atrDot1xAuthQuietPeriod.setStatus('current')
if mibBuilder.loadTexts: atrDot1xAuthQuietPeriod.setDescription('The value, in seconds, of the quietPeriod constant currently in use by the Authenticator PAE state machine.')
atrDot1xAuthTxPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 118, 1, 1, 2, 1, 1, 8), Unsigned32().clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atrDot1xAuthTxPeriod.setReference('9.4.1, txPeriod')
if mibBuilder.loadTexts: atrDot1xAuthTxPeriod.setStatus('current')
if mibBuilder.loadTexts: atrDot1xAuthTxPeriod.setDescription('The value, in seconds, of the txPeriod constant currently in use by the Authenticator PAE state machine.')
atrDot1xAuthSuppTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 118, 1, 1, 2, 1, 1, 9), Unsigned32().clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atrDot1xAuthSuppTimeout.setReference('9.4.1, suppTimeout')
if mibBuilder.loadTexts: atrDot1xAuthSuppTimeout.setStatus('current')
if mibBuilder.loadTexts: atrDot1xAuthSuppTimeout.setDescription('The value, in seconds, of the suppTimeout constant currently in use by the Backend Authentication state machine.')
atrDot1xAuthServerTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 118, 1, 1, 2, 1, 1, 10), Unsigned32().clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atrDot1xAuthServerTimeout.setReference('9.4.1, serverTimeout')
if mibBuilder.loadTexts: atrDot1xAuthServerTimeout.setStatus('current')
if mibBuilder.loadTexts: atrDot1xAuthServerTimeout.setDescription('The value, in seconds, of the serverTimeout constant currently in use by the Backend Authentication state machine.')
atrDot1xAuthMaxReq = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 118, 1, 1, 2, 1, 1, 11), Unsigned32().clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atrDot1xAuthMaxReq.setReference('9.4.1, maxReq')
if mibBuilder.loadTexts: atrDot1xAuthMaxReq.setStatus('current')
if mibBuilder.loadTexts: atrDot1xAuthMaxReq.setDescription('The value of the maxReq constant currently in use by the Backend Authentication state machine.')
atrDot1xAuthReAuthPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 118, 1, 1, 2, 1, 1, 12), Unsigned32().clone(3600)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atrDot1xAuthReAuthPeriod.setReference('9.4.1, reAuthPeriod')
if mibBuilder.loadTexts: atrDot1xAuthReAuthPeriod.setStatus('current')
if mibBuilder.loadTexts: atrDot1xAuthReAuthPeriod.setDescription('The value, in seconds, of the reAuthPeriod constant currently in use by the Reauthentication Timer state machine.')
atrDot1xAuthReAuthEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 118, 1, 1, 2, 1, 1, 13), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atrDot1xAuthReAuthEnabled.setReference('9.4.1, reAuthEnabled')
if mibBuilder.loadTexts: atrDot1xAuthReAuthEnabled.setStatus('current')
if mibBuilder.loadTexts: atrDot1xAuthReAuthEnabled.setDescription('The enable/disable control used by the Reauthentication Timer state machine (8.5.5.1).')
atrDot1xAuthKeyTxEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 118, 1, 1, 2, 1, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atrDot1xAuthKeyTxEnabled.setReference('9.4.1, keyTransmissionEnabled')
if mibBuilder.loadTexts: atrDot1xAuthKeyTxEnabled.setStatus('current')
if mibBuilder.loadTexts: atrDot1xAuthKeyTxEnabled.setDescription('The value of the keyTransmissionEnabled constant currently in use by the Authenticator PAE state machine.')
atrDot1xAuthPreAuthVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 118, 1, 1, 2, 1, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atrDot1xAuthPreAuthVlan.setStatus('current')
if mibBuilder.loadTexts: atrDot1xAuthPreAuthVlan.setDescription('The VLAN name of the VLAN that this port belonged to prior to RADIUS authentication.')
atrDot1xAuthPostAuthVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 118, 1, 1, 2, 1, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atrDot1xAuthPostAuthVlan.setStatus('current')
if mibBuilder.loadTexts: atrDot1xAuthPostAuthVlan.setDescription('The VLAN name of the VLAN that this port belongs to since RADIUS authentication.')
atrDot1xAuthLastAuthReason = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 118, 1, 1, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("never", 1), ("adminReset", 2), ("logoff", 3), ("authTimeout", 4), ("serverReject", 5), ("serverTimeout", 6), ("noActiveServers", 7), ("invalidVlan", 8), ("conflictingVlan", 9), ("forcedUnauth", 10), ("serverAuthed", 11), ("forcedAuthed", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atrDot1xAuthLastAuthReason.setReference('')
if mibBuilder.loadTexts: atrDot1xAuthLastAuthReason.setStatus('current')
if mibBuilder.loadTexts: atrDot1xAuthLastAuthReason.setDescription('Should the supplicant have failed authentication, this records the reason for the last failure. Never is returned in the case the supplicant has never failed.')
atrDot1XAuthVlanAssignment = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 118, 1, 1, 2, 1, 1, 18), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atrDot1XAuthVlanAssignment.setStatus('current')
if mibBuilder.loadTexts: atrDot1XAuthVlanAssignment.setDescription('Specifies whether VLAN Assignment is to be performed on the port. When set to TRUE, the VLAN Assignment mechanism will run, when set to FALSE it will not.')
atrDot1XAuthSecureVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 118, 1, 1, 2, 1, 1, 19), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atrDot1XAuthSecureVlan.setStatus('current')
if mibBuilder.loadTexts: atrDot1XAuthSecureVlan.setDescription('Only valid in Multi-Supplicant mode, this parameter defines whether to allow supplicants to authenticate on a port, when there is already an authenticated aupplicant on the port')
atrDot1xAuthGuestVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 118, 1, 1, 2, 1, 1, 20), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atrDot1xAuthGuestVlan.setStatus('current')
if mibBuilder.loadTexts: atrDot1xAuthGuestVlan.setDescription('This value defines a temporary VLAN to assign to a port while there is no 802.1X host connected to it.')
atrDot1XAuthMibReset = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 118, 1, 1, 2, 1, 1, 21), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atrDot1XAuthMibReset.setStatus('current')
if mibBuilder.loadTexts: atrDot1XAuthMibReset.setDescription('Only valid in Multi-Supplicant mode, this parameter defines whether to age out MIB information stored for old supplicants.')
atrDot1xAuthTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 118, 1, 1, 2, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("success", 1), ("failure", 2), ("both", 3), ("none", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atrDot1xAuthTrap.setReference('')
if mibBuilder.loadTexts: atrDot1xAuthTrap.setStatus('current')
if mibBuilder.loadTexts: atrDot1xAuthTrap.setDescription('Specifies what events trigger an SNMP trap.')
atrDot1xAuthStatsTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 118, 1, 1, 2, 2), )
if mibBuilder.loadTexts: atrDot1xAuthStatsTable.setReference('9.4.2 Authenticator Statistics')
if mibBuilder.loadTexts: atrDot1xAuthStatsTable.setStatus('current')
if mibBuilder.loadTexts: atrDot1xAuthStatsTable.setDescription('A table that contains the statistics objects for the Authenticator PAE associated with each Port. An entry appears in this table for each port that may authenticate access to itself.')
atrDot1xAuthStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 118, 1, 1, 2, 2, 1), ).setIndexNames((0, "AT-PAE-MIB", "atrDot1xPaePortNumber"), (0, "AT-PAE-MIB", "atrDot1xPaePortSuppMacAddress"))
if mibBuilder.loadTexts: atrDot1xAuthStatsEntry.setStatus('current')
if mibBuilder.loadTexts: atrDot1xAuthStatsEntry.setDescription('The statistics information for an Authenticator PAE.')
atrDot1xAuthEapolFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 118, 1, 1, 2, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atrDot1xAuthEapolFramesRx.setReference('9.4.2, EAPOL frames received')
if mibBuilder.loadTexts: atrDot1xAuthEapolFramesRx.setStatus('current')
if mibBuilder.loadTexts: atrDot1xAuthEapolFramesRx.setDescription('The number of valid EAPOL frames of any type that have been received by this Authenticator.')
atrDot1xAuthEapolFramesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 118, 1, 1, 2, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atrDot1xAuthEapolFramesTx.setReference('9.4.2, EAPOL frames transmitted')
if mibBuilder.loadTexts: atrDot1xAuthEapolFramesTx.setStatus('current')
if mibBuilder.loadTexts: atrDot1xAuthEapolFramesTx.setDescription('The number of EAPOL frames of any type that have been transmitted by this Authenticator.')
atrDot1xAuthEapolStartFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 118, 1, 1, 2, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atrDot1xAuthEapolStartFramesRx.setReference('9.4.2, EAPOL Start frames received')
if mibBuilder.loadTexts: atrDot1xAuthEapolStartFramesRx.setStatus('current')
if mibBuilder.loadTexts: atrDot1xAuthEapolStartFramesRx.setDescription('The number of EAPOL Start frames that have been received by this Authenticator.')
atrDot1xAuthEapolLogoffFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 118, 1, 1, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atrDot1xAuthEapolLogoffFramesRx.setReference('9.4.2, EAPOL Logoff frames received')
if mibBuilder.loadTexts: atrDot1xAuthEapolLogoffFramesRx.setStatus('current')
if mibBuilder.loadTexts: atrDot1xAuthEapolLogoffFramesRx.setDescription('The number of EAPOL Logoff frames that have been received by this Authenticator.')
atrDot1xAuthEapolRespIdFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 118, 1, 1, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atrDot1xAuthEapolRespIdFramesRx.setReference('9.4.2, EAPOL Resp/Id frames received')
if mibBuilder.loadTexts: atrDot1xAuthEapolRespIdFramesRx.setStatus('current')
if mibBuilder.loadTexts: atrDot1xAuthEapolRespIdFramesRx.setDescription('The number of EAP Resp/Id frames that have been received by this Authenticator.')
atrDot1xAuthEapolRespFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 118, 1, 1, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atrDot1xAuthEapolRespFramesRx.setReference('9.4.2, EAPOL Response frames received')
if mibBuilder.loadTexts: atrDot1xAuthEapolRespFramesRx.setStatus('current')
if mibBuilder.loadTexts: atrDot1xAuthEapolRespFramesRx.setDescription('The number of valid EAP Response frames (other than Resp/Id frames) that have been received by this Authenticator.')
atrDot1xAuthEapolReqIdFramesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 118, 1, 1, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atrDot1xAuthEapolReqIdFramesTx.setReference('9.4.2, EAPOL Req/Id frames transmitted')
if mibBuilder.loadTexts: atrDot1xAuthEapolReqIdFramesTx.setStatus('current')
if mibBuilder.loadTexts: atrDot1xAuthEapolReqIdFramesTx.setDescription('The number of EAP Req/Id frames that have been transmitted by this Authenticator.')
atrDot1xAuthEapolReqFramesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 118, 1, 1, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atrDot1xAuthEapolReqFramesTx.setReference('9.4.2, EAPOL Request frames transmitted')
if mibBuilder.loadTexts: atrDot1xAuthEapolReqFramesTx.setStatus('current')
if mibBuilder.loadTexts: atrDot1xAuthEapolReqFramesTx.setDescription('The number of EAP Request frames (other than Rq/Id frames) that have been transmitted by this Authenticator.')
atrDot1xAuthInvalidEapolFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 118, 1, 1, 2, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atrDot1xAuthInvalidEapolFramesRx.setReference('9.4.2, Invalid EAPOL frames received')
if mibBuilder.loadTexts: atrDot1xAuthInvalidEapolFramesRx.setStatus('current')
if mibBuilder.loadTexts: atrDot1xAuthInvalidEapolFramesRx.setDescription('The number of EAPOL frames that have been received by this Authenticator in which the frame type is not recognised.')
atrDot1xAuthEapLengthErrorFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 118, 1, 1, 2, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atrDot1xAuthEapLengthErrorFramesRx.setReference('9.4.2, EAP length error frames received')
if mibBuilder.loadTexts: atrDot1xAuthEapLengthErrorFramesRx.setStatus('current')
if mibBuilder.loadTexts: atrDot1xAuthEapLengthErrorFramesRx.setDescription('The number of EAPOL frames that have been received by this Authenticator in which the Packet Body Length field is invalid.')
atrDot1xAuthLastEapolFrameVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 118, 1, 1, 2, 2, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atrDot1xAuthLastEapolFrameVersion.setReference('9.4.2, Last EAPOL frame version')
if mibBuilder.loadTexts: atrDot1xAuthLastEapolFrameVersion.setStatus('current')
if mibBuilder.loadTexts: atrDot1xAuthLastEapolFrameVersion.setDescription('The protocol version number carried in the most recently received EAPOL frame.')
atrDot1xAuthenticated = NotificationType((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 118, 1, 1, 3, 1)).setObjects(("AT-PAE-MIB", "atrDot1xPaePortNumber"), ("AT-PAE-MIB", "atrDot1xPaePortSuppMacAddress"), ("AT-PAE-MIB", "atrDot1xAuthPreAuthVlan"), ("AT-PAE-MIB", "atrDot1xAuthPostAuthVlan"), ("AT-PAE-MIB", "atrDot1xAuthLastAuthReason"))
if mibBuilder.loadTexts: atrDot1xAuthenticated.setStatus('current')
if mibBuilder.loadTexts: atrDot1xAuthenticated.setDescription('Triggered when a supplicant is authenticated on a port.')
atrDot1xUnauthenticated = NotificationType((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 118, 1, 1, 3, 2)).setObjects(("AT-PAE-MIB", "atrDot1xPaePortNumber"), ("AT-PAE-MIB", "atrDot1xPaePortSuppMacAddress"), ("AT-PAE-MIB", "atrDot1xAuthPreAuthVlan"), ("AT-PAE-MIB", "atrDot1xAuthPostAuthVlan"), ("AT-PAE-MIB", "atrDot1xAuthLastAuthReason"))
if mibBuilder.loadTexts: atrDot1xUnauthenticated.setStatus('current')
if mibBuilder.loadTexts: atrDot1xUnauthenticated.setDescription('Triggered when a supplicant who was previously authorised on a port, is no longer authorised. This can be due to an authentication timeout, log off or disconnection of the port.')
atrDot1xFailedAuth = NotificationType((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 118, 1, 1, 3, 3)).setObjects(("AT-PAE-MIB", "atrDot1xPaePortNumber"), ("AT-PAE-MIB", "atrDot1xPaePortSuppMacAddress"), ("AT-PAE-MIB", "atrDot1xAuthPreAuthVlan"), ("AT-PAE-MIB", "atrDot1xAuthPostAuthVlan"), ("AT-PAE-MIB", "atrDot1xAuthLastAuthReason"))
if mibBuilder.loadTexts: atrDot1xFailedAuth.setStatus('current')
if mibBuilder.loadTexts: atrDot1xFailedAuth.setDescription('Triggered when a supplicant is unable to be authorised on a port.')
atrMacBasedAuthPaePortTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 118, 1, 1, 4, 1), )
if mibBuilder.loadTexts: atrMacBasedAuthPaePortTable.setReference('')
if mibBuilder.loadTexts: atrMacBasedAuthPaePortTable.setStatus('current')
if mibBuilder.loadTexts: atrMacBasedAuthPaePortTable.setDescription('A table of system level information for each port supported by the Port Access Entity. An entry appears in this table for each port of this system.')
atrMacBasedAuthPaePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 118, 1, 1, 4, 1, 1), ).setIndexNames((0, "AT-PAE-MIB", "atrMacBasedAuthPaePortNumber"), (0, "AT-PAE-MIB", "atrMacBasedAuthPaePortSuppMacAddress"))
if mibBuilder.loadTexts: atrMacBasedAuthPaePortEntry.setStatus('current')
if mibBuilder.loadTexts: atrMacBasedAuthPaePortEntry.setDescription('The Port number, protocol version, and initialisation control for a Port.')
atrMacBasedAuthPaePortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 118, 1, 1, 4, 1, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atrMacBasedAuthPaePortNumber.setReference('')
if mibBuilder.loadTexts: atrMacBasedAuthPaePortNumber.setStatus('current')
if mibBuilder.loadTexts: atrMacBasedAuthPaePortNumber.setDescription('The Port number associated with this Port.')
atrMacBasedAuthPaePortInitialise = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 118, 1, 1, 4, 1, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atrMacBasedAuthPaePortInitialise.setReference('')
if mibBuilder.loadTexts: atrMacBasedAuthPaePortInitialise.setStatus('current')
if mibBuilder.loadTexts: atrMacBasedAuthPaePortInitialise.setDescription('The initialisation control for this Port. Setting this attribute TRUE causes the Port to be initialised. The attribute value reverts to FALSE once initialisation has completed.')
atrMacBasedAuthPaePortReauthenticate = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 118, 1, 1, 4, 1, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atrMacBasedAuthPaePortReauthenticate.setReference('')
if mibBuilder.loadTexts: atrMacBasedAuthPaePortReauthenticate.setStatus('current')
if mibBuilder.loadTexts: atrMacBasedAuthPaePortReauthenticate.setDescription('The reauthentication control for this port. Setting this attribute TRUE causes the Authenticator PAE state machine for the Port to reauthenticate the Supplicant. Setting this attribute FALSE has no effect. This attribute always returns FALSE when it is read.')
atrMacBasedAuthPaePortSuppMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 118, 1, 1, 4, 1, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atrMacBasedAuthPaePortSuppMacAddress.setStatus('current')
if mibBuilder.loadTexts: atrMacBasedAuthPaePortSuppMacAddress.setDescription('The six character MAC Address of the attached supplicant.')
atrMacBasedAuthConfigTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 118, 1, 1, 5, 1), )
if mibBuilder.loadTexts: atrMacBasedAuthConfigTable.setReference('')
if mibBuilder.loadTexts: atrMacBasedAuthConfigTable.setStatus('current')
if mibBuilder.loadTexts: atrMacBasedAuthConfigTable.setDescription('A table that contains the configuration objects for the Authenticator PAE associated with each port. An entry appears in this table for each port that may authenticate access to itself.')
atrMacBasedAuthConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 118, 1, 1, 5, 1, 1), ).setIndexNames((0, "AT-PAE-MIB", "atrMacBasedAuthPaePortNumber"), (0, "AT-PAE-MIB", "atrMacBasedAuthPaePortSuppMacAddress"))
if mibBuilder.loadTexts: atrMacBasedAuthConfigEntry.setStatus('current')
if mibBuilder.loadTexts: atrMacBasedAuthConfigEntry.setDescription('The configuration information for an Authenticator PAE.')
atrMacBasedAuthPaeState = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 118, 1, 1, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("initialise", 1), ("disconnected", 2), ("connecting", 3), ("authenticating", 4), ("authenticated", 5), ("aborting", 6), ("held", 7), ("forceAuth", 8), ("forceUnauth", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atrMacBasedAuthPaeState.setReference('')
if mibBuilder.loadTexts: atrMacBasedAuthPaeState.setStatus('current')
if mibBuilder.loadTexts: atrMacBasedAuthPaeState.setDescription('The current value of the Authenticator PAE state machine.')
atrMacBasedAuthBackendAuthState = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 118, 1, 1, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("request", 1), ("success", 2), ("fail", 3), ("timeout", 4), ("idle", 5), ("initialise", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atrMacBasedAuthBackendAuthState.setReference('')
if mibBuilder.loadTexts: atrMacBasedAuthBackendAuthState.setStatus('current')
if mibBuilder.loadTexts: atrMacBasedAuthBackendAuthState.setDescription('The current state of the Backend Authentication state machine.')
atrMacBasedAuthControlledPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 118, 1, 1, 5, 1, 1, 3), AtrPaeControlledPortStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atrMacBasedAuthControlledPortStatus.setReference('')
if mibBuilder.loadTexts: atrMacBasedAuthControlledPortStatus.setStatus('current')
if mibBuilder.loadTexts: atrMacBasedAuthControlledPortStatus.setDescription('The current value of the controlled Port status parameter for the Port.')
atrMacBasedAuthControlledPortControl = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 118, 1, 1, 5, 1, 1, 4), AtrPaeControlledPortControl()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atrMacBasedAuthControlledPortControl.setReference('')
if mibBuilder.loadTexts: atrMacBasedAuthControlledPortControl.setStatus('current')
if mibBuilder.loadTexts: atrMacBasedAuthControlledPortControl.setDescription('The current value of the controlled Port control parameter for the Port.')
atrMacBasedAuthQuietPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 118, 1, 1, 5, 1, 1, 5), Unsigned32().clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atrMacBasedAuthQuietPeriod.setReference('')
if mibBuilder.loadTexts: atrMacBasedAuthQuietPeriod.setStatus('current')
if mibBuilder.loadTexts: atrMacBasedAuthQuietPeriod.setDescription('The value, in seconds, of the quietPeriod constant currently in use by the Authenticator PAE state machine.')
atrMacBasedAuthReAuthPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 118, 1, 1, 5, 1, 1, 6), Unsigned32().clone(3600)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atrMacBasedAuthReAuthPeriod.setReference('')
if mibBuilder.loadTexts: atrMacBasedAuthReAuthPeriod.setStatus('current')
if mibBuilder.loadTexts: atrMacBasedAuthReAuthPeriod.setDescription('The value, in seconds, of the reAuthPeriod constant currently in use by the Reauthentication Timer state machine.')
atrMacBasedAuthReAuthEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 118, 1, 1, 5, 1, 1, 7), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atrMacBasedAuthReAuthEnabled.setReference('')
if mibBuilder.loadTexts: atrMacBasedAuthReAuthEnabled.setStatus('current')
if mibBuilder.loadTexts: atrMacBasedAuthReAuthEnabled.setDescription('The enable/disable control used by the Reauthentication Timer state machine.')
atrMacBasedAuthPreAuthVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 118, 1, 1, 5, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atrMacBasedAuthPreAuthVlan.setStatus('current')
if mibBuilder.loadTexts: atrMacBasedAuthPreAuthVlan.setDescription('The VLAN name of the VLAN that this port belonged to prior to RADIUS authentication.')
atrMacBasedAuthPostAuthVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 118, 1, 1, 5, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atrMacBasedAuthPostAuthVlan.setStatus('current')
if mibBuilder.loadTexts: atrMacBasedAuthPostAuthVlan.setDescription('The VLAN name of the VLAN that this port belongs to since RADIUS authentication.')
atrMacBasedAuthLastAuthReason = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 118, 1, 1, 5, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("never", 1), ("adminReset", 2), ("logoff", 3), ("authTimeout", 4), ("serverReject", 5), ("serverTimeout", 6), ("noActiveServers", 7), ("invalidVlan", 8), ("conflictingVlan", 9), ("forcedUnauth", 10), ("serverAuthed", 11), ("forcedAuthed", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atrMacBasedAuthLastAuthReason.setReference('')
if mibBuilder.loadTexts: atrMacBasedAuthLastAuthReason.setStatus('current')
if mibBuilder.loadTexts: atrMacBasedAuthLastAuthReason.setDescription('Should the supplicant have failed authentication, this records the reason for the last failure. Never is returned in the case the supplicant has never failed.')
atrMacBasedAuthVlanAssignment = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 118, 1, 1, 5, 1, 1, 11), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atrMacBasedAuthVlanAssignment.setStatus('current')
if mibBuilder.loadTexts: atrMacBasedAuthVlanAssignment.setDescription('Specifies whether VLAN Assignment is to be performed on the port. When set to TRUE, the VLAN Assignment mechanism will run, when set to FALSE it will not.')
atrMacBasedAuthSecureVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 118, 1, 1, 5, 1, 1, 12), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atrMacBasedAuthSecureVlan.setStatus('current')
if mibBuilder.loadTexts: atrMacBasedAuthSecureVlan.setDescription('Only valid in Multi-Supplicant mode, this parameter defines whether to allow supplicants to authenticate on a port, when there is already an authenticated aupplicant on the port')
atrMacBasedAuthMibReset = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 118, 1, 1, 5, 1, 1, 13), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atrMacBasedAuthMibReset.setStatus('current')
if mibBuilder.loadTexts: atrMacBasedAuthMibReset.setDescription('Only valid in Multi-Supplicant mode, this parameter defines whether to age out MIB information stored for old supplicants.')
atrMacBasedAuthTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 118, 1, 1, 5, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("success", 1), ("failure", 2), ("both", 3), ("none", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atrMacBasedAuthTrap.setReference('')
if mibBuilder.loadTexts: atrMacBasedAuthTrap.setStatus('current')
if mibBuilder.loadTexts: atrMacBasedAuthTrap.setDescription('Specifies what events trigger an SNMP trap.')
atrMacBasedAuthAuthenticated = NotificationType((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 118, 1, 1, 6, 1)).setObjects(("AT-PAE-MIB", "atrMacBasedAuthPaePortNumber"), ("AT-PAE-MIB", "atrMacBasedAuthPaePortSuppMacAddress"), ("AT-PAE-MIB", "atrMacBasedAuthPreAuthVlan"), ("AT-PAE-MIB", "atrMacBasedAuthPostAuthVlan"), ("AT-PAE-MIB", "atrMacBasedAuthLastAuthReason"))
if mibBuilder.loadTexts: atrMacBasedAuthAuthenticated.setStatus('current')
if mibBuilder.loadTexts: atrMacBasedAuthAuthenticated.setDescription('Triggered when a supplicant is authenticated on a port.')
atrMacBasedAuthUnauthenticated = NotificationType((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 118, 1, 1, 6, 2)).setObjects(("AT-PAE-MIB", "atrMacBasedAuthPaePortNumber"), ("AT-PAE-MIB", "atrMacBasedAuthPaePortSuppMacAddress"), ("AT-PAE-MIB", "atrMacBasedAuthPreAuthVlan"), ("AT-PAE-MIB", "atrMacBasedAuthPostAuthVlan"), ("AT-PAE-MIB", "atrMacBasedAuthLastAuthReason"))
if mibBuilder.loadTexts: atrMacBasedAuthUnauthenticated.setStatus('current')
if mibBuilder.loadTexts: atrMacBasedAuthUnauthenticated.setDescription('Triggered when a supplicant who was previously authorised on a port, is no longer authorised. This can be due to a authentication timeout or a failed reauthentication.')
atrMacBasedAuthFailedAuth = NotificationType((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 118, 1, 1, 6, 3)).setObjects(("AT-PAE-MIB", "atrMacBasedAuthPaePortNumber"), ("AT-PAE-MIB", "atrMacBasedAuthPaePortSuppMacAddress"), ("AT-PAE-MIB", "atrMacBasedAuthPreAuthVlan"), ("AT-PAE-MIB", "atrMacBasedAuthPostAuthVlan"), ("AT-PAE-MIB", "atrMacBasedAuthLastAuthReason"))
if mibBuilder.loadTexts: atrMacBasedAuthFailedAuth.setStatus('current')
if mibBuilder.loadTexts: atrMacBasedAuthFailedAuth.setDescription('Triggered when a supplicant is unable to be authorised on a port.')
mibBuilder.exportSymbols("AT-PAE-MIB", atrDot1xAuthReAuthEnabled=atrDot1xAuthReAuthEnabled, atrMacBasedAuthAuthenticated=atrMacBasedAuthAuthenticated, atrDot1xAuthStatsTable=atrDot1xAuthStatsTable, atrDot1xAuthEapolReqIdFramesTx=atrDot1xAuthEapolReqIdFramesTx, atrDot1xPaePortNumber=atrDot1xPaePortNumber, atrDot1xAuthPreAuthVlan=atrDot1xAuthPreAuthVlan, atrDot1xAuthGuestVlan=atrDot1xAuthGuestVlan, portAuth=portAuth, atrDot1xPaePortInitialise=atrDot1xPaePortInitialise, atrDot1xAuthLastAuthReason=atrDot1xAuthLastAuthReason, atrDot1xAuthEapolFramesTx=atrDot1xAuthEapolFramesTx, AtrPaeControlledDirections=AtrPaeControlledDirections, atrDot1xAuthenticated=atrDot1xAuthenticated, atrDot1xAuthTrap=atrDot1xAuthTrap, atrDot1xPaePortEntry=atrDot1xPaePortEntry, atrMacBasedAuthPostAuthVlan=atrMacBasedAuthPostAuthVlan, atrMacBasedAuthReAuthEnabled=atrMacBasedAuthReAuthEnabled, atrDot1xAuthKeyTxEnabled=atrDot1xAuthKeyTxEnabled, atrMacBasedAuthControlledPortStatus=atrMacBasedAuthControlledPortStatus, atrMacBasedAuthConfigTable=atrMacBasedAuthConfigTable, AtrPaeControlledPortStatus=AtrPaeControlledPortStatus, atrMacBasedAuthConfigEntry=atrMacBasedAuthConfigEntry, atrMacBasedAuthPaePortNumber=atrMacBasedAuthPaePortNumber, atrDot1xAuthEapolFramesRx=atrDot1xAuthEapolFramesRx, atrDot1xAuthEapolLogoffFramesRx=atrDot1xAuthEapolLogoffFramesRx, atrDot1xAuthAuthControlledPortStatus=atrDot1xAuthAuthControlledPortStatus, atrDot1xAuthConfigEntry=atrDot1xAuthConfigEntry, atrDot1xAuthMaxReq=atrDot1xAuthMaxReq, atrDot1xAuthEapolRespFramesRx=atrDot1xAuthEapolRespFramesRx, atrDot1xAuthInvalidEapolFramesRx=atrDot1xAuthInvalidEapolFramesRx, atrMacBasedAuthTraps=atrMacBasedAuthTraps, atrDot1xAuthEapolStartFramesRx=atrDot1xAuthEapolStartFramesRx, atrDot1XAuthVlanAssignment=atrDot1XAuthVlanAssignment, atrPaeMib=atrPaeMib, atrDot1xPaePortCapabilities=atrDot1xPaePortCapabilities, atrDot1xAuthBackendAuthState=atrDot1xAuthBackendAuthState, atrDot1xAuthEapLengthErrorFramesRx=atrDot1xAuthEapLengthErrorFramesRx, atrMacBasedAuthLastAuthReason=atrMacBasedAuthLastAuthReason, atrMacBasedAuthTrap=atrMacBasedAuthTrap, atrDot1xAuthEapolRespIdFramesRx=atrDot1xAuthEapolRespIdFramesRx, atrMacBasedAuthSecureVlan=atrMacBasedAuthSecureVlan, atrDot1xPaePortSuppMacAddress=atrDot1xPaePortSuppMacAddress, atrDot1xAuthSuppTimeout=atrDot1xAuthSuppTimeout, atrDot1xPaeAuthenticator=atrDot1xPaeAuthenticator, atrDot1xAuthTxPeriod=atrDot1xAuthTxPeriod, PYSNMP_MODULE_ID=portAuth, atrMacBasedAuthPreAuthVlan=atrMacBasedAuthPreAuthVlan, atrDot1xPaePortReauthenticate=atrDot1xPaePortReauthenticate, atrMacBasedAuthPaePortEntry=atrMacBasedAuthPaePortEntry, atrDot1xUnauthenticated=atrDot1xUnauthenticated, atrDot1xAuthServerTimeout=atrDot1xAuthServerTimeout, atrDot1xAuthConfigTable=atrDot1xAuthConfigTable, atrDot1xTraps=atrDot1xTraps, atrDot1xFailedAuth=atrDot1xFailedAuth, atrDot1xAuthStatsEntry=atrDot1xAuthStatsEntry, atrDot1xPaePortTable=atrDot1xPaePortTable, atrDot1xAuthEapolReqFramesTx=atrDot1xAuthEapolReqFramesTx, atrMacBasedAuthPaePortInitialise=atrMacBasedAuthPaePortInitialise, atrMacBasedAuthPaePortTable=atrMacBasedAuthPaePortTable, atrDot1xAuthPaeState=atrDot1xAuthPaeState, atrMacBasedAuthPaePortReauthenticate=atrMacBasedAuthPaePortReauthenticate, atrMacBasedAuthMibReset=atrMacBasedAuthMibReset, atrDot1xAuthAuthControlledPortControl=atrDot1xAuthAuthControlledPortControl, atrDot1xAuthLastEapolFrameVersion=atrDot1xAuthLastEapolFrameVersion, atrPaeMIBObjects=atrPaeMIBObjects, atrDot1xAuthAdminControlledDirections=atrDot1xAuthAdminControlledDirections, atrMacBasedAuthUnauthenticated=atrMacBasedAuthUnauthenticated, atrDot1xAuthQuietPeriod=atrDot1xAuthQuietPeriod, AtrPaeControlledPortControl=AtrPaeControlledPortControl, atrMacBasedAuthFailedAuth=atrMacBasedAuthFailedAuth, atrMacBasedAuthBackendAuthState=atrMacBasedAuthBackendAuthState, atrDot1xAuthReAuthPeriod=atrDot1xAuthReAuthPeriod, atrDot1XAuthSecureVlan=atrDot1XAuthSecureVlan, atrMacBasedAuthQuietPeriod=atrMacBasedAuthQuietPeriod, atrMacBasedAuthPaeSystem=atrMacBasedAuthPaeSystem, atrMacBasedAuthControlledPortControl=atrMacBasedAuthControlledPortControl, atrDot1xAuthOperControlledDirections=atrDot1xAuthOperControlledDirections, atrMacBasedAuthVlanAssignment=atrMacBasedAuthVlanAssignment, atrDot1XAuthMibReset=atrDot1XAuthMibReset, atrMacBasedAuthReAuthPeriod=atrMacBasedAuthReAuthPeriod, atrDot1xPaeSystem=atrDot1xPaeSystem, atrDot1xPaePortProtocolVersion=atrDot1xPaePortProtocolVersion, atrMacBasedAuthPaePortSuppMacAddress=atrMacBasedAuthPaePortSuppMacAddress, atrDot1xAuthPostAuthVlan=atrDot1xAuthPostAuthVlan, atrMacBasedAuthPaeState=atrMacBasedAuthPaeState, atrMacBasedAuthPaeAuthenticator=atrMacBasedAuthPaeAuthenticator)
