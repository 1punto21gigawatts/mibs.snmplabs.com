#
# PySNMP MIB module TIMETRA-BSX-NG-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TIMETRA-BSX-NG-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:17:06 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion")
InetAddressType, InetAddressPrefixLength, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddressPrefixLength", "InetAddress")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
MibIdentifier, Counter64, ObjectIdentity, Counter32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Integer32, Unsigned32, IpAddress, NotificationType, ModuleIdentity, Bits, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Counter64", "ObjectIdentity", "Counter32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Integer32", "Unsigned32", "IpAddress", "NotificationType", "ModuleIdentity", "Bits", "Gauge32")
TimeStamp, TruthValue, RowStatus, StorageType, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "TruthValue", "RowStatus", "StorageType", "DisplayString", "TextualConvention")
TmnxSlotNumOrZero, tmnxMDASlotNum, TmnxHwIndexOrZero, tmnxChassisIndex = mibBuilder.importSymbols("TIMETRA-CHASSIS-MIB", "TmnxSlotNumOrZero", "tmnxMDASlotNum", "TmnxHwIndexOrZero", "tmnxChassisIndex")
TEntryId, = mibBuilder.importSymbols("TIMETRA-FILTER-MIB", "TEntryId")
tmnxSRNotifyPrefix, timetraSRMIBModules, tmnxSRObjs, tmnxSRConfs = mibBuilder.importSymbols("TIMETRA-GLOBAL-MIB", "tmnxSRNotifyPrefix", "timetraSRMIBModules", "tmnxSRObjs", "tmnxSRConfs")
tmnxLogFileIdLogId, tmnxLogNotifyApInterval = mibBuilder.importSymbols("TIMETRA-LOG-MIB", "tmnxLogFileIdLogId", "tmnxLogNotifyApInterval")
TmnxPortEncapType, = mibBuilder.importSymbols("TIMETRA-PORT-MIB", "TmnxPortEncapType")
tFCName, = mibBuilder.importSymbols("TIMETRA-QOS-MIB", "tFCName")
TNamedItem, TmnxEncapVal, TmnxBsxAarpId, TFCNameOrEmpty, TCIRRate, SdpBindId, TmnxBsxTransitIpPolicyId, TDSCPNameOrEmpty, TmnxBsxTransitIpPolicyIdOrZero, TAdaptationRule, TmnxBsxTransPrefPolicyId, TPriorityOrDefault, TmnxAdminState, TPIRRate, TmnxActionType, TmnxSubRadServAlgorithm, TmnxPortID, TTcpUdpPort, TNamedItemOrEmpty, TmnxBsxTransPrefPolicyIdOrZero, TItemDescription, TIpProtocol, TQueueId, TmnxVRtrIDOrZero, TmnxOperState, TmnxServId, TmnxEnabledDisabled = mibBuilder.importSymbols("TIMETRA-TC-MIB", "TNamedItem", "TmnxEncapVal", "TmnxBsxAarpId", "TFCNameOrEmpty", "TCIRRate", "SdpBindId", "TmnxBsxTransitIpPolicyId", "TDSCPNameOrEmpty", "TmnxBsxTransitIpPolicyIdOrZero", "TAdaptationRule", "TmnxBsxTransPrefPolicyId", "TPriorityOrDefault", "TmnxAdminState", "TPIRRate", "TmnxActionType", "TmnxSubRadServAlgorithm", "TmnxPortID", "TTcpUdpPort", "TNamedItemOrEmpty", "TmnxBsxTransPrefPolicyIdOrZero", "TItemDescription", "TIpProtocol", "TQueueId", "TmnxVRtrIDOrZero", "TmnxOperState", "TmnxServId", "TmnxEnabledDisabled")
tmnxBsxNgMIBModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 6527, 1, 1, 3, 63))
tmnxBsxNgMIBModule.setRevisions(('1911-02-01 00:00', '1908-12-03 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: tmnxBsxNgMIBModule.setRevisionsDescriptions(('Rev 9.0 01 Feb 2011 00:00 9.0 release of the TIMETRA-BSX-NG-MIB.', 'Rev 7.0 03 Dec 2008 00:00 7.0 release of the TIMETRA-BSX-NG-MIB.',))
if mibBuilder.loadTexts: tmnxBsxNgMIBModule.setLastUpdated('201102010000Z')
if mibBuilder.loadTexts: tmnxBsxNgMIBModule.setOrganization('Alcatel-Lucent')
if mibBuilder.loadTexts: tmnxBsxNgMIBModule.setContactInfo('Alcatel-Lucent SROS Support Web: http://support.alcatel-lucent.com ')
if mibBuilder.loadTexts: tmnxBsxNgMIBModule.setDescription("This document is the SNMP MIB module to manage and provision the Application Assurance capability of the Alcatel-Lucent SROS device. Copyright (c) 2010-2012 Alcatel-Lucent. All rights reserved. Reproduction of this document is authorized on the condition that the foregoing copyright notice is included. This SNMP MIB module (Specification) embodies Alcatel-Lucent's proprietary intellectual property. Alcatel-Lucent retains all title and ownership in the Specification, including any revisions. Alcatel-Lucent grants all interested parties a non-exclusive license to use and distribute an unmodified copy of this Specification in connection with management of Alcatel-Lucent products, and without fee, provided this copyright notice and license appear on all copies. This Specification is supplied 'as is', and Alcatel-Lucent makes no warranty, either express or implied, as to the use, operation, condition, or performance of the Specification.")
tmnxBsxObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63))
tmnxBsxMdaObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1))
tmnxBsxPolicyObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2))
tmnxBsxStatsObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3))
tmnxBsxNotifObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 4))
tmnxBsxCflowdObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 5))
tmnxBsxOvrdObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 6))
tmnxBsxTransitObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 7))
tmnxBsxHttpRedirObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 8))
tmnxBsxStaticDataObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 9))
tmnxBsxRedundancyObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 10))
tmnxBsxHttpEnrichObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 11))
tmnxBsxRadApObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 12))
tmnxBsxNotifyPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 63))
tmnxBsxNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 63, 0))
tmnxBsxConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 63))
tmnxBsxCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 63, 1))
tmnxBsxGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 63, 2))
class TmnxBsxIsaAaGroupIndex(TextualConvention, Unsigned32):
    description = 'TmnxBsxIsaAaGroupIndex is an index of a group of BSX MDAs.'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 255)

class TmnxBsxIsaAaGroupIndexOrZero(TextualConvention, Unsigned32):
    description = 'TmnxBsxIsaAaGroupIndexOrZero is an index of a group of BSX MDAs. The value of zero indicates that no BSX MDA group is specified.'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 255)

class TmnxBsxAaGrpPartIndex(TextualConvention, Unsigned32):
    description = "TmnxBsxAaGrpPartIndex is an index of an Application Assurance partition within an Application Assurance group, and is a unique 32-bit number encoded as follows. | 32 25 | 24 9 | 8 1 | +---------+---------+----------+ | 0 | partidx | groupidx| Partition Index +---------+---------+----------+ - groupidx represents a group of ISA MDAs and has a valid range from 1..255. The corresponding TmnxBsxIsaAaGroupIndex must already exist in the tmnxBsxIsaAaGrpTable. - partidx represents a partition within a group and has a valid range from 0..65535. A partition index of '0' represents group wide information."
    status = 'current'

class TmnxBsxFailToMode(TextualConvention, Integer32):
    description = 'TmnxBsxFailToMode specifies how traffic is handled when there are no available ISA-AA cards to handle the traffic.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("failToWire", 0), ("failToOpen", 1))

class TmnxBsxPolicyVersion(TextualConvention, Integer32):
    description = "TmnxBsxPolicyVersion specifies either the administrative or the operational version of the policy. Configuration changes can only be made to the administrative version of the policy. The operational copy is updated when a 'commit' operation is done."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("admin", 0), ("oper", 1))

class TmnxBsxDirection(TextualConvention, Integer32):
    description = "TmnxBsxDirection specifies either the subscriber to network 'sub2net' or the network to subscriber direction 'net2sub' or that the policy is to apply to 'both'."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("sub2net", 0), ("net2sub", 1), ("both", 2))

class TmnxBsxPolicerType(TextualConvention, Integer32):
    description = 'TmnxBsxPolicerType specifies whether the policer is a bandwidth, flow rate, or a flow count policer in addition to the number of buckets used by the policer.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("none", 0), ("singleBucketBandwidth", 1), ("dualBucketBandwidth", 2), ("flowRateLimit", 3), ("flowCountLimit", 4))

class TmnxBsxGranularity(TextualConvention, Integer32):
    description = "TmnxBsxGranularity specifies either 'system' to create one policer instance per system or 'subscriber' to create one policer instance per subscriber."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("none", 0), ("system", 1), ("subscriber", 2))

class TmnxBsxPolicerAction(TextualConvention, Integer32):
    description = "TmnxBsxPolicerAction specifies either 'permitDeny' to permit or deny packets or 'priorityMark' to mark to in or out of profile based on the outcome of the policer."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("permitDeny", 0), ("priorityMark", 1))

class TmnxBsxBurstSize(TextualConvention, Integer32):
    description = 'The amount of burst capacity (in kbytes) assigned to a policer.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 131071)

class TmnxBsxOperator(TextualConvention, Integer32):
    description = 'TmnxBsxOperator specifies the type of comparison operator to perform on another associated member of the row of the table.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("none", 0), ("eq", 1), ("neq", 2), ("lt", 3), ("gt", 4), ("range", 5))

class TmnxBsxMdaRole(TextualConvention, Integer32):
    description = 'TmnxBsxMdaRole specifies the configured role of an ISA-AA MDA. An MDA may take on the role of: primary (0) - configured within an ISA-AA group as a primary backup (1) - configured within an ISA-AA group as a backup Multiple primary ISA-AA MDAs can be configured in an ISA-AA group, but only one backup.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("primary", 0), ("backup", 1))

class TmnxBsxMdaActivityState(TextualConvention, Integer32):
    description = 'TmnxBsxMdaActivityState specifies the working state of an ISA-AA MDA in a group. The Activity state may be one of: unavailable (0) - is not available to provide service active (1) - is online and providing service standby (2) - is online, but not providing service'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("unavailable", 0), ("active", 1), ("standby", 2))

class TmnxBsxAaSubscriberType(TextualConvention, Integer32):
    description = 'A value that represents a type (and thereby the format) of a TmnxBsxAaSubscriber. The value can be one of the following: unknown (0) - An unknown subscriber type is specified. esm (1) - Enhanced Subscriber Management identity is specified. This indicates that the format of the TmnxBsxAaSubscriber is the Enhanced Subscriber Management Subscriber as specified in the TIMETRA-SUBSCRIBER-MGMT-MIB in tmnxSubInfoSubIdent in the tmnxSubscriberInfoTable. The value of the TmnxBsxAaSubscriber is a NON IMPLIED String of type TNamedItem. sap (2) - A Service Access Point (SAP) is specified. This indicates that the format of the TmnxBsxAaSubscriber is an OCTET string containing the Service Access Point (SAP) subscriber as specified in the TIMETRA-SAP-MIB including the sapPortId and sapEncapValue. Octets Contents 1-4 sapPortId (unsigned integer), 5-8 sapEncapValue (unsigned integer) spokeSdp (3) - A spoke SDP binding is specified. This indicates that the format of the TmnxBsxAaSubscriber is an OCTET string containing the spoke SDP Binding Id as specified in the TIMETRA-SDP-MIB in sdpBindId in the sdpBindTable. transit (4) - A Transit subscriber is specified. This indicates that the format of the TmnxBsxAaSubscriber is an OCTET string containing the transit subscriber name. mobile (5) - A mobile subscriber is specified. This indicates that the format of the TmnxBsxAaSubscriber is an OCTET string containing the mobile subscriber name. The value of the TmnxBsxAaSubscriber is a NON IMPLIED String of type TNamedItem.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("unknown", 0), ("esm", 1), ("sap", 2), ("spokeSdp", 3), ("transit", 4), ("mobile", 5))

class TmnxBsxAaSubscriber(TextualConvention, OctetString):
    description = 'Denotes a generic Application Assurance Subscriber. An TmnxBsxAaSubscriber value is always interpreted within the context of an TmnxBsxAaSubscriberType value. Every usage of the TmnxBsxAaSubscriber textual convention is required to specify the TmnxBsxAaSubscriberType object that provides the context. The value of an TmnxBsxAaSubscriber object must always be consistent with the value of the associated TmnxBsxAaSubscriberType object. Attempts to set an TmnxBsxAaSubscriber object to a value inconsistent with the associated TmnxBsxAaSubscriberType will fail with an inconsistentValue error.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 32)

class TmnxBsxStatAaAcctCfgType(TextualConvention, Integer32):
    description = 'Represents all of the possible statistics accounting types that can be configured within an Application Assurance group and partition. The various types are: unknown - unknown statistics type protocol - system wide protocol stats application - system wide application stats app-group - system wide app-group stats aa-sub - subscriber specific stats aa-sub-study-protocol - special study protocol subscriber stats aa-sub-study-application - special study app subscriber stats '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("unknown", 0), ("protocol", 1), ("application", 2), ("app-group", 3), ("aa-sub", 4), ("aa-sub-study-protocol", 5), ("aa-sub-study-application", 6))

class TmnxBsxAaStatType(TextualConvention, Integer32):
    description = 'Represents the various kinds of statistics objects used in Application Assurance. The various types are: unknown - unknown protocol - protocol based statistics application - application based statistics app-group - application group based statistics chargingGroup - charging group based statistics '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("unknown", 0), ("protocol", 1), ("application", 2), ("app-group", 3), ("chargingGroup", 4))

class TmnxBsxAaStatExportMethod(TextualConvention, Bits):
    description = 'Represents the method to use to export statistics in Application Assurance. The various methods are: accountingPolicy - use the accounting policy radiusAccountingPolicy - use the RADIUS accounting policy '
    status = 'current'
    namedValues = NamedValues(("accountingPolicy", 0), ("radiusAccountingPolicy", 1))

class TmnxBsxExprSubStringIndex(TextualConvention, Integer32):
    description = 'TmnxBsxExprSubStringIndex is an index of a list of expression substrings.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 255)

class TmnxBsxExprSubStringType(TextualConvention, Integer32):
    description = 'A value that represents a type (and thereby the expression substring) of a TmnxBsxExprSubString. The various types are: none - no substring httpHost - HTTP host substring httpUri - HTTP URI (Uniform Resource Identifier) substring httpReferrer - HTTP referrer substring sipUa - SIP UA (User Agent) substring sipUri - SIP URI (Uniform Resource Identifier) substring sipMt - SIP RTP Media Type substring citrixApp - Citrix application substring httpUserAgent - HTTP User Agent substring h323ProductId - H323 Product Id substring tlsCsOrgName - TLS Certificate Subject Organization Name substring tlsCsCommonName - TLS Certificate Subject Common Name substring '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))
    namedValues = NamedValues(("none", 0), ("httpHost", 1), ("httpUri", 2), ("httpReferrer", 3), ("sipUa", 4), ("sipUri", 5), ("sipMt", 6), ("citrixApp", 7), ("httpUserAgent", 8), ("h323ProductId", 9), ("tlsCsOrgName", 10), ("tlsCsCommonName", 11))

class TmnxBsxExprSubString(DisplayString):
    description = "Denotes a printable ASCII substring used as input to an application assurance filter match criteria object. The following syntax is permitted within the substring to define the pattern match criteria: ^<substring>* - matches when <substring> is at the beginning of the object. *<substring>* - matches when <substring> is at any place within the object. *<substring>$ - matches when <substring> is at the end of the object. ^<substring>$ - matches when <substring> is the entire object. Rules for <substring> characters: --------------------------------- - <substring> must contain printable ASCII characters. - <substring> must not contain the 'double quote' character or the ' ' (space) character on its own. - <substring> match is case sensitive. - <substring> must not include any Regular Expression meta-characters. - The '\\' character is used as an ESCAPE sequence. - the following ESCAPE sequences are permitted within the <substring>: character to match <substring> input ------------------ ------------------ \\ \\\\ Hexidecimal Octet YY \\xYY Note: A <substring> that uses the '\\' (backslash) ESCAPE character which is not followed by a '\\' or '\\x' and a 2-digit hex octet is not valid."
    status = 'current'
    subtypeSpec = DisplayString.subtypeSpec + ValueSizeConstraint(0, 255)

class TmnxBsxFirstPacketPolicy(TextualConvention, Integer32):
    description = 'TmnxBsxFirstPacketPolicy specifies the policy to apply to the first packet within a flow. The First Packet Policy may be one of: none (0) - there is no policy to apply first-packet-trusted (1) - the first packet is trusted first-packet-validate (2) - the first packet is validated'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("none", 0), ("first-packet-trusted", 1), ("first-packet-validate", 2))

class TmnxBsxActionStatus(TextualConvention, Integer32):
    description = 'TmnxBsxActionStatus specifies the status of an ISA-AA action. The status may be one of: none (0) - no action start (1) - action has started stop (2) - action has stopped'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("none", 0), ("start", 1), ("stop", 2))

class TmnxBsxAdminCtrl(TextualConvention, Integer32):
    description = 'TmnxBsxAdminCtrl specifies the copying and editing of tmnxBsxPolicyObjs tables from one instance of a policy version to another. The admin control may be one of: none (1) - no policies being edited initialize (2) - policies being edited commit (3) - policies commited'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("none", 1), ("initialize", 2), ("commit", 3))

class TmnxBsxCustProtExprSubString(DisplayString):
    description = "Denotes a printable ASCII substring used as input to an application assurance custom protocol match criteria object. Rules for <substring> characters: --------------------------------- - <substring> must contain printable ASCII characters. - <substring> must not contain the 'double quote' character or the ' ' (space) character on its own. - <substring> match is case sensitive. - <substring> must not include any Regular Expression meta-characters. - The '\\' character is used as an ESCAPE sequence. - the following ESCAPE sequences are permitted within the <substring>: character to match <substring> input ------------------ ------------------ \\ \\\\ Hexidecimal Octet YY \\xYY Note: A <substring> that uses the '\\' (backslash) ESCAPE character which is not followed by a '\\' or '\\x' and a 2-digit hex octet is not valid."
    status = 'current'
    subtypeSpec = DisplayString.subtypeSpec + ValueSizeConstraint(0, 255)

class TmnxBsxProtocolDirection(TextualConvention, Integer32):
    description = 'TmnxBsxProtocolDirection specifies the direction to match for a protocol. The protocol direction may be one of: none (0) - no direction specified client2server (1) - client to server direction server2client (2) - server to client direction any (3) - any direction'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("none", 0), ("client2server", 1), ("server2client", 2), ("any", 3))

class TmnxBsxLoadBalanceStatus(TextualConvention, Integer32):
    description = 'TmnxBsxLoadBalanceStatus specifies the status of a load-balance operation in an ISA-AA group. The status may be one of: balancing (0) - load-balance in progress complete (1) - load-balance completed'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("balancing", 0), ("complete", 1))

class TmnxBsxCflowdExpType(TextualConvention, Integer32):
    description = 'Represents the various kinds of statistics which can be exported using Cflowd in Application Assurance. The various types are: none - no statistics exported volume - volume statistics tcpPerformance - TCP performance statistics rtpPerformance - RTP performance statistics '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("none", 0), ("volume", 1), ("tcpPerformance", 2), ("rtpPerformance", 3))

class TmnxBsxCflowdPerfMeasType(TextualConvention, Integer32):
    description = 'Represents the various kinds of performance measurement types which can be exported using Cflowd in Application Assurance. The various types are: none - no measurement type specified tcp - tcp performance measurements rtp - realtime transport protocol performance measurements '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("none", 0), ("tcp", 1), ("rtp", 2))

class TmnxBsxAaSubStatsInterval(TextualConvention, Integer32):
    description = 'Represents the various types of statistics intervals for Application Assurance subscribers. The various types are: unknown - specifies an unknown statistics interval realtime - specifies that the statistics retrieved include the sum of the statistics from the previous collection windows, the statistics for any closed flows since the last collection window, and the statistics accumulated from any currently open flows. snapshot - specifies that the statistics retrieved include the sum of the statistics from the previous collection windows, and the statistics for any closed flows since the last collection window. '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("unknown", 0), ("realtime", 1), ("snapshot", 2))

class TmnxBsxAaSubAcctLossReason(TextualConvention, Integer32):
    description = 'Represents the reason for a loss of Application Assurance subscriber accounting statistics. The various reasons are: noLoss - no accounting statistics have been lost. acctInvlExpiry - accounting interval has expired '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("noLoss", 0), ("acctInvlExpiry", 1))

class TmnxBsxAaSubAsoValDerivedFrom(TextualConvention, Integer32):
    description = 'TmnxBsxAaSubAsoValDerivedFrom specifies from where the characteristic value is being derived from for the Application Assurance subscriber. The characteristic value can be derived from Application Service Option (ASO) defaults, application profiles, or policy-overrides.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("none", 0), ("asoDefault", 1), ("appProfile", 2), ("override", 3))

class TmnxBsxAaSubPolicerResStatus(TextualConvention, Integer32):
    description = 'TmnxBsxAaSubPolicerResStatus specifies the status of policer resources being applied to an Application Assurance subscriber. The status may be one of: none (0) okay (1) - policer resources are not exceeded unknown (2) - policer resources are unknown exceeded (3) - policer resources are exceeded '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("none", 0), ("okay", 1), ("unknown", 2), ("exceeded", 3))

class TmnxBsxStatIsaAaCfgType(TextualConvention, Integer32):
    description = 'Represents all of the possible statistics accounting types that can be configured at the ISA-AA group level. The various types are: unknown - unknown statistics type aaPerformance - AA performance statistics '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("unknown", 0), ("aaPerformance", 1))

class TmnxBsxTransitSubOrigin(TextualConvention, Bits):
    description = 'Represents the possible ways in which the transit AA subscriber was created. The various origins of a transit subscriber are: static - statically provisioned dhcp - dynamically learned via DHCP radius - dynamically learned via RADIUS autoSeenIp - automatically created via Seen IP A transit subscriber may have more than one origin. The absence of any bits indicates a subscriber of unknown origin.'
    status = 'current'
    namedValues = NamedValues(("static", 0), ("dhcp", 1), ("radius", 2), ("autoSeenIp", 3))

class TmnxBsxTListAttribType(TextualConvention, Integer32):
    description = 'Represents the different types of value a tagged list attribute can possess. The various types of values are: none(0) - no value uint(1) - an unsigned integer string(2) - a displayable string'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("none", 0), ("uint", 1), ("string", 2))

class TmnxBsxTListAttribValue(TextualConvention, OctetString):
    description = "Represents the different values of a tagged list attribute. A TmnxBsxTListAttribValue is always interpreted within the context of a TmnxBsxTListAttribType. Every usage of TmnxBsxTListAttribValue is required to specify the TmnxBsxTListAttribType that provides that context. If the TmnxBsxTListAttribType is 'uint(1)' then the numerical value is stored in the first 4 bytes of the octet string as a 32-bit value. If the TmnxBsxTListAttribType is a 'string(2)' then string is packed into TmnxBsxTListAttribValue."
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 80)

class TmnxBsxAqpHttpRedirFlowType(TextualConvention, Integer32):
    description = 'Represents the different types of flows that can be redirected. The different types of flows are: none(0) - no flows droppedFlows(1) - dropped flows'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("none", 0), ("droppedFlows", 1))

class TmnxBsxAarpInstState(TextualConvention, Integer32):
    description = 'Represents the different states of an Application Assurance Redundancy Protocol (AARP) instance performing asymmetry removal. Asymmetry refers to a situation where the two directions of traffic for a specific flow take different paths through the network. Asymmetry removal ensures that packets for each flow and all flows for each subscriber are processed by the same ISA-AA. The states are: standAlone(0) - AARP instance is handling AA independently from the peer. Traffic asymmetry is not removed. Caused by a configuration problem or failure in asymmetry removal resources. remote(1) - AARP instance is sending all AA traffic to the remote peer. Traffic asymmetry is removed. Locally unable to perform AA and act as a backup due to failure of a local AA-ISA. master(2) - AARP instance is handling AA locally for local traffic and remote traffic from the peer. Traffic asymmetry is removed. backup(3) - AARP instance is sending all AA traffic to the remote peer. Traffic asymmetry is removed. Locally ready to take over.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("standAlone", 0), ("remote", 1), ("master", 2), ("backup", 3))

class TmnxBsxAarpInstOperFlags(TextualConvention, Bits):
    description = "TmnxBsxAarpInstOperFlags represents the different conditions that affect the operating status of an AARP instance. The bit values are: adminDown(0) - AARP instance is administratively down. noSubConfigd(1) - no 'dualHomed(2)' subscriber reference configured against the AARP instance. peerDown(2) - no communication with peer AARP instance. peerAarpDown(3) - MC-CTL link is up, but AARP layer protocol interaction with peer AARP instance is not established. subTypeMismatch(4) - mismatch detected in the subscriber types between peer AARP instances. subDown(5) - 'dualHomed(2)' subscriber reference is operationally down. shuntsDown(6) - one of the shunts referenced by the AARP instance is down. divertCapDown(7) - divert to AA not possible - divert capability is down. appProfNoDivert(8) - app-profile used by the 'dualHomed(2)' subscriber reference has 'no divert' set. subSidePipeMismatch(9) - mismatch detected in the subscriber-side pipe between AARP instances. subSideIfMismatch(10) - mismatch detected in the subscriber-side interface between peer AARP instances. netSidePipeMistmatch(11) - mismatch detected in the network-side pipe between AARP instances. netSideIfMismatch(12) - mismatch detected in in the network- side interface between peer AARP instances. unsupportedIoms(13) - IOMs which do not support AARP have been detected. "
    status = 'current'
    namedValues = NamedValues(("adminDown", 0), ("noSubConfigd", 1), ("peerDown", 2), ("peerAarpDown", 3), ("subTypeMismatch", 4), ("subDown", 5), ("shuntsDown", 6), ("divertCapDown", 7), ("appProfNoDivert", 8), ("subSidePipeMismatch", 9), ("subSideIfMismatch", 10), ("netSidePipeMismatch", 11), ("netSideIfMismatch", 12), ("unsupportedIoms", 13))

class TmnxBsxAarpCommand(TextualConvention, Integer32):
    description = "TmnxBsxAarpCommand represents the different commands that can be performed on an AARP instance. The command values are: noCmd (0) - 'noCmd(0)' is returned by a read request when no control command has been written to the object since initialization. 'noCmd(0)' should not be used as a value for a write operation - the write operation will fail. forceEvaluate (1) - the command triggers a re-evaluation of the preferred AARP instance. "
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("noCmd", 0), ("forceEvaluate", 1))

class TmnxBsxAarpServPointRole(TextualConvention, Integer32):
    description = 'TmnxBsxAarpServPointRole represents the different roles that an AARP instance service point can assume. The roles of service points are: none (0) - no role. dualHomed (1) - a service point into the dual homed network being protected by AARP. pipeShuntSub (2) - subscriber side pipe shunt. pipeShuntNet (3) - network side pipe shunt. interfaceShuntSub (4) - subscriber side interface shunt. interfaceShuntNet (5) - network side interface shunt.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("none", 0), ("dualHomed", 1), ("pipeShuntSub", 2), ("pipeShuntNet", 3), ("interfaceShuntSub", 4), ("interfaceShuntNet", 5))

class TmnxBsxAarpServPointType(TextualConvention, Integer32):
    description = 'TmnxBsxAarpServPointType represents the different types (and thereby the different formats) of TmnxBsxAarpServPoint (an AARP instance service point). The types of service points are: unknown (0) - unknown. sap (1) - A Service Access Point (SAP) is specified. This indicates that the format of the TmnxBsxAarpServPoint is an OCTET STRING containing the Service Access Point (SAP) as specified in the TIMETRA-SAP-MIB including the sapPortId and sapEncapValue. Octets Contents 1-4 sapPortId (unsigned integer), 5-8 sapEncapValue (unsigned integer) spokeSdp (2) - A spoke SDP binding is specified. This indicates that the format of the TmnxBsxAarpServPoint is an OCTET STRING containing the spoke SDP Binding Id as specified in the TIMETRA-SDP-MIB in sdpBindId in the sdpBindTable. '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("unknown", 0), ("sap", 1), ("spokeSdp", 2))

class TmnxBsxAarpServPoint(TextualConvention, OctetString):
    description = 'TmnxBsxAarpServPoint represents a generic AARP instance service point. An TmnxBsxAarpServPoint value is always interpreted within the context of an TmnxBsxAarpServPointType value. Every usage of the TmnxBsxAarpServPoint textual convention is required to specify the TmnxBsxAarpServPointType object that provides the context. The value of an TmnxBsxAarpServPoint object must always be consistent with the value of the associated TmnxBsxAarpServPointType object. Attempts to set an TmnxBsxAarpServPoint object to a value inconsistent with the associated TmnxBsxAarpServPointType will fail with an inconsistentValue error.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 32)

tmnxBsxMdaScalars = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 1))
tmnxBsxIsaAaGrpLastChangeTime = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 1, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpLastChangeTime.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpLastChangeTime.setDescription('The value of tmnxBsxIsaAaGrpLastChangeTime indicates the last time a successful set was performed on the tmnxBsxIsaAaGrpTable.')
tmnxBsxIsaAaGrpFcLastChangeTime = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpFcLastChangeTime.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpFcLastChangeTime.setDescription('The value of tmnxBsxIsaAaGrpFcLastChangeTime indicates the last time a successful set was performed on the tmnxBsxIsaAaGrpFcTable.')
tmnxBsxIsaAaGrpMdaLastChangeTime = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpMdaLastChangeTime.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpMdaLastChangeTime.setDescription('The value of tmnxBsxIsaAaGrpMdaLastChangeTime indicates the last time a successful set was performed on the tmnxBsxGrpMdaTable.')
tmnxBsxAaGrpPartLastChangeTime = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 1, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxAaGrpPartLastChangeTime.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAaGrpPartLastChangeTime.setDescription('The value of tmnxBsxAaGrpPartLastChangeTime indicates the last time a successful set was performed on the tmnxBsxAaGrpPartTable.')
tmnxBsxAaWap1xLastChangeTime = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxAaWap1xLastChangeTime.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAaWap1xLastChangeTime.setDescription('The value of tmnxBsxAaWap1xLastChangeTime indicates the last time a successful set was performed on the tmnxBsxAaWap1xTable.')
tmnxBsxIsaAaGrpTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 2), )
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpTable.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpTable.setDescription('The tmnxBsxIsaAaGrpTable contains an entry for each BSX MDA Group in the system.')
tmnxBsxIsaAaGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 2, 1), ).setIndexNames((0, "TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGroupIndex"))
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpEntry.setDescription('Each tmnxBsxIsaAaGrpEntry indicates a BSX MDA group in the system.')
tmnxBsxIsaAaGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 2, 1, 1), TmnxBsxIsaAaGroupIndex())
if mibBuilder.loadTexts: tmnxBsxIsaAaGroupIndex.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxIsaAaGroupIndex.setDescription('The value of tmnxBsxIsaAaGroupIndex indicates the group number of this group of BSX MDAs.')
tmnxBsxIsaAaGrpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpRowStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpRowStatus.setDescription('The value of tmnxBsxIsaAaGrpRowStatus specifies the row status. It allows entries to be created and deleted in the tmnxBsxIsaAaGrpTable. To delete an entry, all references to this ISA-AA group in all policy and transit policy tables must be deleted.')
tmnxBsxIsaAaGrpRowLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 2, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpRowLastChange.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpRowLastChange.setDescription('The value of tmnxBsxIsaAaGrpRowLastChange indicates the last time a successful set was performed on this row of the tmnxBsxIsaAaGrpTable.')
tmnxBsxIsaAaGrpDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 2, 1, 4), TItemDescription()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpDescription.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpDescription.setDescription('The value of tmnxBsxIsaAaGrpDescription specifies the description of the ISA-AA group.')
tmnxBsxIsaAaGrpAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 2, 1, 5), TmnxAdminState().clone('outOfService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpAdminState.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpAdminState.setDescription("The value of tmnxBsxIsaAaGrpAdminState specifies the administrative state for the ISA-AA group. When 'outOfService', traffic destined to this ISA-AA group will apply its' tmnxBsxIsaAaGrpFailToMode behaviour.")
tmnxBsxIsaAaGrpOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 2, 1, 6), TmnxOperState().clone('outOfService')).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpOperState.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpOperState.setDescription("The value of tmnxBsxIsaAaGrpOperState indicates the operational state for the ISA-AA group. When 'outOfService', traffic destined to this ISA-AA group will apply its' tmnxBsxIsaAaGrpFailToMode behaviour.")
tmnxBsxIsaAaGrpFailToMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 2, 1, 7), TmnxBsxFailToMode().clone('failToWire')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpFailToMode.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpFailToMode.setDescription("The value of tmnxBsxIsaAaGrpFailToMode specifies the operation upon failure of the group: is traffic to be permitted by setting to 'failToWire' or is it to be denied by setting to 'failToOpen'")
tmnxBsxIsaAaGrpFromSubPool = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 2, 1, 8), TNamedItem().clone('default')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpFromSubPool.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpFromSubPool.setDescription('The value of tmnxBsxIsaAaGrpFromSubPool specifies the buffer pool as defined in TIMETRA-PORT-MIB::tmnxObjectAppPool for subscriber to network traffic egressing towards the ISA-AA MDA.')
tmnxBsxIsaAaGrpFromSubResvCbs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 100), )).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpFromSubResvCbs.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpFromSubResvCbs.setDescription("The value of tmnxBsxIsaAaGrpFromSubResvCbs specifies the percentage of the buffer pool reserved for high priority traffic for subscriber to network traffic egressing towards the ISA-AA MDA. The value '-1' implies that the reserved CBS should be computed as the sum of the CBS requested by the entities using this pool.")
tmnxBsxIsaAaGrpFromSubSlpPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 2, 1, 10), TNamedItem().clone('default')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpFromSubSlpPolicy.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpFromSubSlpPolicy.setDescription('The value of tmnxBsxIsaAaGrpFromSubSlpPolicy specifies the policy as defined in TIMETRA-QOS-MIB::tSlopePolicyTable for subscriber to network traffic egressing towards the ISA-AA MDA.')
tmnxBsxIsaAaGrpFromSubQuePolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 2, 1, 11), TNamedItem().clone('default')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpFromSubQuePolicy.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpFromSubQuePolicy.setDescription('The value of tmnxBsxIsaAaGrpFromSubQuePolicy specifies the policy as defined in TIMETRA-QOS-MIB::tNetworkQueueTable for subscriber to network traffic egressing towards the ISA-AA MDA.')
tmnxBsxIsaAaGrpFromSubSchPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 2, 1, 12), TNamedItemOrEmpty()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpFromSubSchPolicy.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpFromSubSchPolicy.setDescription('The value of tmnxBsxIsaAaGrpFromSubSchPolicy specifies the policy as defined in TIMETRA-QOS-MIB::tSchedulerPolicyTable for subscriber to network traffic egressing towards the ISA-AA MDA.')
tmnxBsxIsaAaGrpToSubPool = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 2, 1, 13), TNamedItem().clone('default')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpToSubPool.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpToSubPool.setDescription('The value of tmnxBsxIsaAaGrpToSubPool specifies the buffer pool as defined in TIMETRA-PORT-MIB::tmnxObjectAppPool for network to subscriber traffic egressing towards the ISA-AA MDA.')
tmnxBsxIsaAaGrpToSubResvCbs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 100), )).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpToSubResvCbs.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpToSubResvCbs.setDescription("The value of tmnxBsxIsaAaGrpToSubResvCbs specifies the percentage of the buffer pool reserved for high priority traffic for network to subscriber traffic egressing towards the ISA-AA MDA. The value '-1' implies that the reserved CBS should be computed as the sum of the CBS requested by the entities using this pool.")
tmnxBsxIsaAaGrpToSubSlpPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 2, 1, 15), TNamedItem().clone('default')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpToSubSlpPolicy.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpToSubSlpPolicy.setDescription('The value of tmnxBsxIsaAaGrpToSubSlpPolicy specifies the policy as defined in TIMETRA-QOS-MIB::tSlopePolicyTable for network to subscriber traffic egressing towards the ISA-AA MDA.')
tmnxBsxIsaAaGrpToSubQuePolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 2, 1, 16), TNamedItem().clone('default')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpToSubQuePolicy.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpToSubQuePolicy.setDescription('The value of tmnxBsxIsaAaGrpToSubQuePolicy specifies the policy as defined in TIMETRA-QOS-MIB::tNetworkQueueTable for network to subscriber traffic egressing towards the ISA-AA MDA.')
tmnxBsxIsaAaGrpToSubSchPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 2, 1, 17), TNamedItemOrEmpty()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpToSubSchPolicy.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpToSubSchPolicy.setDescription('The value of tmnxBsxIsaAaGrpToSubSchPolicy specifies the policy as defined in TIMETRA-QOS-MIB::tSchedulerPolicyTable for network to subscriber traffic egressing towards the ISA-AA MDA.')
tmnxBsxIsaAaGrpIngressPool = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 2, 1, 18), TNamedItem().clone('default')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpIngressPool.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpIngressPool.setDescription('The value of tmnxBsxIsaAaGrpIngressPool specifies the buffer pool as defined in TIMETRA-PORT-MIB::tmnxObjectAppPool for all traffic ingressing from the ISA-AA MDA. This object was obsoleted in release 7.0 and replaced with the TIMETRA-PORT-MIB::tmnxObjectAppPool object in the TIMETRA-PORT-MIB::tmnxQosPoolAppTable.')
tmnxBsxIsaAaGrpIngressResvCbs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 100), )).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpIngressResvCbs.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpIngressResvCbs.setDescription("The value of tmnxBsxIsaAaGrpIngressResvCbs specifies the percentage of the buffer pool reserved for high priority traffic for all traffic ingressing from the ISA-AA MDA. The value '-1' implies that the reserved CBS should be computed as the sum of the CBS requested by the entities using this pool. This object was obsoleted in release 7.0 and replaced with the TIMETRA-PORT-MIB::tmnxObjectAppResvCbs object in the TIMETRA-PORT-MIB::tmnxQosPoolAppTable.")
tmnxBsxIsaAaGrpIngressSlpPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 2, 1, 20), TNamedItem().clone('default')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpIngressSlpPolicy.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpIngressSlpPolicy.setDescription('The value of tmnxBsxIsaAaGrpIngressSlpPolicy specifies the policy as defined in TIMETRA-QOS-MIB::tSlopePolicyTable for all traffic ingressing from the ISA-AA MDA. This object was obsoleted in release 7.0 and replaced with the TIMETRA-PORT-MIB::tmnxObjectAppSlopePolicy in the TIMETRA-PORT-MIB::tmnxQosPoolAppTable.')
tmnxBsxIsaAaGrpIngressQuePolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 2, 1, 21), TNamedItem().clone('default')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpIngressQuePolicy.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpIngressQuePolicy.setDescription('The value of tmnxBsxIsaAaGrpIngressQuePolicy specifies the policy as defined in TIMETRA-QOS-MIB::tNetworkQueueTable for all traffic ingressing from the ISA-AA MDA. This object was obsoleted in release 7.0 and replaced with the TIMETRA-CHASSIS-MIB::tmnxMDANetworkIngQueues in the TIMETRA-CHASSIS-MIB::tmnxMDATable.')
tmnxBsxIsaAaGrpActivityChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 2, 1, 22), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpActivityChange.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpActivityChange.setDescription("The value of tmnxBsxIsaAaGrpActivityChange indicates the last time the value of tmnxBsxGrpMdaActivityState changed to or from 'active (1)' state for an ISA-AA MDA within the group.")
tmnxBsxIsaAaGrpPartitions = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 2, 1, 23), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpPartitions.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpPartitions.setDescription("The value of tmnxBsxIsaAaGrpPartitions specifies whether partitions are enabled or not within an ISA-AA group. When the value of this object is set to 'enabled', partitions can be created in the tmnxBsxAaGrpPartTable.")
tmnxBsxIsaAaGrpCapCostLowThres = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 2, 1, 24), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpCapCostLowThres.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpCapCostLowThres.setDescription('The value of tmnxBsxIsaAaGrpCapCostLowThres specifies the capacity cost low threshold for the ISA-AA group.')
tmnxBsxIsaAaGrpCapCostHighThres = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 2, 1, 25), Unsigned32().clone(4294967295)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpCapCostHighThres.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpCapCostHighThres.setDescription('The value of tmnxBsxIsaAaGrpCapCostHighThres specifies the capacity cost high threshold for the ISA-AA group.')
tmnxBsxIsaAaGrpLoadBalanceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 2, 1, 26), TmnxBsxLoadBalanceStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpLoadBalanceStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpLoadBalanceStatus.setDescription('The value of tmnxBsxIsaAaGrpLoadBalanceStatus indicates the status of the load-balance operation for the ISA-AA group.')
tmnxBsxIsaAaGrpUnassignedEsmSubs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 2, 1, 27), Gauge32()).setUnits('subscribers').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpUnassignedEsmSubs.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpUnassignedEsmSubs.setDescription('The value of tmnxBsxIsaAaGrpUnassignedEsmSubs indicates the number of Enhanced Subscriber Management (ESM) subscribers that have not been assigned to an ISA-AA MDA within a group.')
tmnxBsxIsaAaGrpUnassignedSapSubs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 2, 1, 28), Gauge32()).setUnits('subscribers').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpUnassignedSapSubs.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpUnassignedSapSubs.setDescription('The value of tmnxBsxIsaAaGrpUnassignedSapSubs indicates the number of Service Access Point (SAP) subscribers that have not been assigned to an ISA-AA MDA within a group.')
tmnxBsxIsaAaGrpUnassignedSpkSubs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 2, 1, 29), Gauge32()).setUnits('subscribers').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpUnassignedSpkSubs.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpUnassignedSpkSubs.setDescription('The value of tmnxBsxIsaAaGrpUnassignedSpkSubs indicates the number of Spoke SDP subscribers that have not been assigned to an ISA-AA MDA within a group.')
tmnxBsxIsaAaGrpUnassignedTIpSubs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 2, 1, 30), Gauge32()).setUnits('subscribers').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpUnassignedTIpSubs.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpUnassignedTIpSubs.setDescription('The value of tmnxBsxIsaAaGrpUnassignedTIpSubs indicates the number of Transit IP subscribers that have not been assigned to an ISA-AA MDA within a group. This object was obsoleted in release 9.0 and replaced with tmnxBsxIsaLoadBalUnSubTransit.')
tmnxBsxIsaAaGrpAaSubScale = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("residential", 0), ("vpn", 1), ("mobileGateway", 2))).clone('residential')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpAaSubScale.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpAaSubScale.setDescription('The value of tmnxBsxIsaAaGrpAaSubScale specifies the set of scaling limits that are supported with regards to the maximum number of AA subscribers per ISA and the corresponding policies that can be specified. The scaling limits may be one of: residential (0) - scaling limits for residential operation vpn (1) - scaling limits for VPNs mobileGateway (2) - scaling limits for operation as a mobile gateway tmnxBsxIsaAaGrpAaSubScale can only be set during row creation.')
tmnxBsxIsaAaGrpOverloadCutThru = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 2, 1, 32), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpOverloadCutThru.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpOverloadCutThru.setDescription('The value of tmnxBsxIsaAaGrpOverloadCutThru specifies whether or not overload cut-through is enabled. If enabled and an ISA overloads, all traffic is cut-through with no application identification or application specific policies applied until the ISA is no longer overloaded. Statistics are counter per subscriber against the cut-through protocol. If disabled and an ISA overloads, no action is taken.')
tmnxBsxIsaAaGrpFromSubWaSBfHiWmk = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 2, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(1, 100), )).clone(-1)).setUnits('percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpFromSubWaSBfHiWmk.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpFromSubWaSBfHiWmk.setDescription("The value of tmnxBsxIsaAaGrpFromSubWaSBfHiWmk specifies the high watermark for the weighted average utilization of the shared buffer space in the 'FromSub' buffer pool for each ISA. When a buffer pool is not in the overload state and the wa-shared buffer utilization for an ISA is greater than or equal to tmnxBsxIsaAaGrpFromSubWaSBfHiWmk the ISA 'FromSub' buffer pool enters an overload state and an overload notification tmnxBsxIsaAaGrpFmSbWaSBufOvld is raised. The value must be greater than tmnxBsxIsaAaGrpFromSubWaSBfLoWmk. The value of -1 represents the maximum wa-shared buffer utilization indicating this high watermark will not be met.")
tmnxBsxIsaAaGrpFromSubWaSBfLoWmk = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 2, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setUnits('percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpFromSubWaSBfLoWmk.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpFromSubWaSBfLoWmk.setDescription("The value of tmnxBsxIsaAaGrpFromSubWaSBfLoWmk specifies the low watermark for the weighted average utilization of the shared buffer space in the 'FromSub' buffer pool. When a buffer pool is in an overloaded state and the wa-shared buffer utilization for an ISA is less than or equal to tmnxBsxIsaAaGrpFromSubWaSBfLoWmk the ISA 'FromSub' buffer pool leaves the overload state and a notification tmnxBsxIsaAaGrpFmSbWaSBufOvldClr is sent to indicate the overload state has cleared. The value of tmnxBsxIsaAaGrpFromSubWaSBfLoWmk must be less than tmnxBsxIsaAaGrpFromSubWaSBfHiWmk.")
tmnxBsxIsaAaGrpToSubWaSBfHiWmk = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 2, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(1, 100), )).clone(-1)).setUnits('percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpToSubWaSBfHiWmk.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpToSubWaSBfHiWmk.setDescription("The value of tmnxBsxIsaAaGrpToSubWaSBfHiWmk specifies the high watermark for the weighed average utilization of the shared buffer space in the 'ToSub' buffer pool for each ISA. When a buffer pool is not in the overload state and the wa-shared buffer utilization for an ISA is greater than or equal to tmnxBsxIsaAaGrpToSubWaSBfHiWmk the ISA 'ToSub' buffer pool enters an overload state and an overload notification tmnxBsxIsaAaGrpToSbWaSBufOvld is raised. The value must be greater than tmnxBsxIsaAaGrpToSubWaSBfLoWmk. The value of -1 represents the maximum wa-shared buffer utilization indicating this high watermark will not be met.")
tmnxBsxIsaAaGrpToSubWaSBfLoWmk = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 2, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setUnits('percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpToSubWaSBfLoWmk.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpToSubWaSBfLoWmk.setDescription("The value of tmnxBsxIsaAaGrpToSubWaSBfLoWmk specifies the low watermark for the weighted average utilization of the shared buffer space in the 'ToSub' buffer pool. When a buffer pool is in an overloaded state and the wa-shared buffer utilization for an ISA is less than or equal to tmnxBsxIsaAaGrpToSubWaSBfLoWmk the ISA 'ToSub' buffer pool leaves the overload state and a notification tmnxBsxIsaAaGrpToSbWaSBufOvldClr is sent to indicate the overload state has cleared. The value of tmnxBsxIsaAaGrpToSubWaSBfLoWmk must be less than tmnxBsxIsaAaGrpToSubWaSBfHiWmk.")
tmnxBsxIsaAaGrpTransPrefV4NmEntr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 2, 1, 37), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpTransPrefV4NmEntr.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpTransPrefV4NmEntr.setDescription('The value of tmnxBsxIsaAaGrpTransPrefV4NmEntr specifies the number of transit prefix IPv4 entries to be supported on the ISA.')
tmnxBsxIsaAaGrpTransPrefV6NmEntr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 2, 1, 38), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpTransPrefV6NmEntr.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpTransPrefV6NmEntr.setDescription('The value of tmnxBsxIsaAaGrpTransPrefV6NmEntr specifies the number of transit prefix IPv6 entries to be supported on the ISA.')
tmnxBsxIsaAaGrpTransPrefV6RmEntr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 2, 1, 39), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpTransPrefV6RmEntr.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpTransPrefV6RmEntr.setDescription('The value of tmnxBsxIsaAaGrpTransPrefV6RmEntr specifies the number of remote transit prefix IPv6 entries to be supported on the ISA.')
tmnxBsxIsaAaGrpFcTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 3), )
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpFcTable.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpFcTable.setDescription('The tmnxBsxIsaAaGrpFcTable contains an entry for each divertable forwarding class for each BSX MDA Group in the system.')
tmnxBsxIsaAaGrpFcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 3, 1), ).setIndexNames((0, "TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGroupIndex"), (0, "TIMETRA-QOS-MIB", "tFCName"))
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpFcEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpFcEntry.setDescription('Each tmnxBsxIsaAaGrpFcEntry indicates a divertable forwarding class for each BSX MDA Group in the system.')
tmnxBsxIsaAaGrpFcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 3, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpFcRowStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpFcRowStatus.setDescription('The value of tmnxBsxIsaAaGrpFcRowStatus specifies the row status. It allows entries to be created and deleted in the tmnxBsxIsaAaGrpFcTable.')
tmnxBsxIsaAaGrpFcRowLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 3, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpFcRowLastChange.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpFcRowLastChange.setDescription('The value of tmnxBsxIsaAaGrpFcRowLastChange indicates the last time a successful set was performed on this row of the tmnxBsxIsaAaGrpFcTable.')
tmnxBsxGrpMdaTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 4), )
if mibBuilder.loadTexts: tmnxBsxGrpMdaTable.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpMdaTable.setDescription('The tmnxBsxGrpMdaTable contains an entry for each ISA-AA MDA configured within a group. This table is populated when an MDA is configured with an MDA type of ISA-AA, and associated with an ISA-AA group.')
tmnxBsxGrpMdaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 4, 1), ).setIndexNames((0, "TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGroupIndex"), (0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxCardSlotNum"), (0, "TIMETRA-CHASSIS-MIB", "tmnxMDASlotNum"))
if mibBuilder.loadTexts: tmnxBsxGrpMdaEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpMdaEntry.setDescription('Each tmnxBsxGrpMdaEntry indicates a ISA-AA MDA is associated to a tmnxBsxIsaAaGrpEntry.')
tmnxBsxCardSlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 4, 1, 1), TmnxSlotNumOrZero())
if mibBuilder.loadTexts: tmnxBsxCardSlotNum.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxCardSlotNum.setDescription('The value of tmnxBsxCardSlotNum indicates the slot number of this ISA-AA MDA.')
tmnxBsxGrpMdaRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 4, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxGrpMdaRowStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpMdaRowStatus.setDescription("The value of tmnxBsxGrpMdaRowStatus specifies the row status. It allows entries to be created and deleted in the tmnxBsxGrpMdaTable. Rows are created by specifying the value of 'createAndGo (4)', and deleted by specifying the value of 'destroy (6)'.")
tmnxBsxGrpMdaRowLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 4, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpMdaRowLastChange.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpMdaRowLastChange.setDescription('The value of tmnxBsxGrpMdaRowLastChange indicates the last time a successful set was performed on this row of the tmnxBsxGrpMdaTable.')
tmnxBsxGrpMdaRole = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 4, 1, 4), TmnxBsxMdaRole().clone('primary')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxGrpMdaRole.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpMdaRole.setDescription('The value of tmnxBsxGrpMdaRole specifies the role of the MDA in the tmnxBsxIsaAaGrpEntry. The role can only be set at row creation, and cannot be modified.')
tmnxBsxGrpMdaActivityState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 4, 1, 5), TmnxBsxMdaActivityState().clone('unavailable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpMdaActivityState.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpMdaActivityState.setDescription('The value of tmnxBsxGrpMdaActivityState indicates the current activity status of the MDA in the group.')
tmnxBsxGrpMdaActivityChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 4, 1, 6), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpMdaActivityChange.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpMdaActivityChange.setDescription("The value of tmnxBsxGrpMdaActivityChange indicates the last time the value of tmnxBsxGrpMdaActivityState changed to or from 'active (1)' or 'standby (2)' state for an ISA-AA MDA in the group.")
tmnxBsxGrpMdaEsmSubscribers = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 4, 1, 7), Gauge32()).setUnits('subscribers').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpMdaEsmSubscribers.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpMdaEsmSubscribers.setDescription('The value of tmnxBsxGrpMdaEsmSubscribers indicates the current number of Enhanced Subscriber Management (ESM) subscribers active on the ISA-AA MDA in the group.')
tmnxBsxGrpMdaSapSubscribers = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 4, 1, 8), Gauge32()).setUnits('subscribers').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpMdaSapSubscribers.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpMdaSapSubscribers.setDescription('The value of tmnxBsxGrpMdaSapSubscribers indicates the current number of Service Access Point (SAP) subscribers active on the ISA-AA MDA in the group.')
tmnxBsxGrpMdaSpokeSdpSubscribers = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 4, 1, 9), Gauge32()).setUnits('subscribers').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpMdaSpokeSdpSubscribers.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpMdaSpokeSdpSubscribers.setDescription('The value of tmnxBsxGrpMdaSpokeSdpSubscribers indicates the current number of Spoke SDP subscribers active on the ISA-AA MDA in the group.')
tmnxBsxGrpMdaCapacityCost = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 4, 1, 10), Gauge32()).setUnits('cost').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpMdaCapacityCost.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpMdaCapacityCost.setDescription('The value of tmnxBsxGrpMdaCapacityCost indicates the current capacity cost assigned to the ISA-AA MDA in the group.')
tmnxBsxGrpMdaStatsResourceCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 4, 1, 11), Gauge32()).setUnits('resources').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpMdaStatsResourceCount.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpMdaStatsResourceCount.setDescription('The value of tmnxBsxGrpMdaStatsResourceCount indicates the current number of Application Assurance subscriber statistics resources in use on the ISA-AA MDA in the group.')
tmnxBsxGrpMdaTransitIpSubs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 4, 1, 12), Gauge32()).setUnits('subscribers').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpMdaTransitIpSubs.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpMdaTransitIpSubs.setDescription('The value of tmnxBsxGrpMdaTransitIpSubs indicates the current number of Transit IP subscribers active on the ISA-AA MDA in the group. This object will be obsolete in a future release in favour of tmnxBsxGrpMdaTransitSubs.')
tmnxBsxGrpMdaTransitIpAddrs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 4, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpMdaTransitIpAddrs.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpMdaTransitIpAddrs.setDescription('The value of tmnxBsxGrpMdaTransitIpAddrs indicates the current number of Transit IP subscriber addresses associated with the ISA-AA MDA in the group.')
tmnxBsxGrpMdaTransitSubs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 4, 1, 14), Gauge32()).setUnits('subscribers').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpMdaTransitSubs.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpMdaTransitSubs.setDescription('The value of tmnxBsxGrpMdaTransitSubs indicates the current number of transit subscribers active on the ISA-AA MDA in the group.')
tmnxBsxGrpMdaTransPrefEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 4, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpMdaTransPrefEntries.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxBsxGrpMdaTransPrefEntries.setDescription('The value of tmnxBsxGrpMdaTransPrefEntries indicates the current number of transit prefix entries active on the ISA-AA MDA in the group. This object was obsoleted in release 10.0 and replaced with tmnxBsxGrpMdaTransPrefV4Entr for IPv4 entries along with tmnxBsxGrpMdaTransPrefV6Entr for IPv6 entries.')
tmnxBsxGrpMdaTransPrefV4Entr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 4, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpMdaTransPrefV4Entr.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpMdaTransPrefV4Entr.setDescription('The value of tmnxBsxGrpMdaTransPrefV4Entr indicates the current number of transit prefix IPv4 entries active on the ISA-AA MDA in the group.')
tmnxBsxGrpMdaTransPrefV6Entr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 4, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpMdaTransPrefV6Entr.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpMdaTransPrefV6Entr.setDescription('The value of tmnxBsxGrpMdaTransPrefV6Entr indicates the current number of transit prefix IPv6 entries active on the ISA-AA MDA in the group.')
tmnxBsxGrpMdaTransPrefV6RemEntr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 4, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpMdaTransPrefV6RemEntr.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpMdaTransPrefV6RemEntr.setDescription('The value of tmnxBsxGrpMdaTransPrefV6RemEntr indicates the current number of transit prefix IPv6 remote entries active on the ISA-AA MDA in the group.')
tmnxBsxGrpStatusTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 5), )
if mibBuilder.loadTexts: tmnxBsxGrpStatusTable.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusTable.setDescription('The tmnxBsxGrpStatusTable contains an entry for each ISA-AA MDA and Group in the system. Each row contains the performance-oriented status information per group for an ISA-AA MDA uniquely identified by the tmnxChassisIndex, tmnxBsxCardSlotNum, and the tmnxMDASlotNum.')
tmnxBsxGrpStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 5, 1), ).setIndexNames((0, "TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGroupIndex"), (0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxCardSlotNum"), (0, "TIMETRA-CHASSIS-MIB", "tmnxMDASlotNum"))
if mibBuilder.loadTexts: tmnxBsxGrpStatusEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusEntry.setDescription('Each tmnxBsxGrpStatusEntry contains the performance-oriented status information for a particular group and ISA-AA MDA. An index with a valid tmnxBsxIsaAaGroupIndex, tmnxChassisIndex set to one, and a zero value for each of the tmnxBsxCardSlotNum/tmnxMDASlotNum indices will return the summarized per group status. Rows in this table are created by the agent at initialization and cannot be created or destroyed by SNMP Set requests.')
tmnxBsxGrpStatusDiscontTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 5, 1, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusDiscontTime.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusDiscontTime.setDescription('The value of tmnxBsxGrpStatusDiscontTime indicates the SNMPv2-MIB::sysUpTime (hundredths of a second) when the ISA-AA MDA within the group has last changed status.')
tmnxBsxGrpStatusOctsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 5, 1, 2), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusOctsIn.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusOctsIn.setDescription('The value of tmnxBsxGrpStatusOctsIn indicates the number of bytes diverted from ingress IOMs towards the ISA-AA MDA(s).')
tmnxBsxGrpStatusPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 5, 1, 3), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusPktsIn.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusPktsIn.setDescription('The value of tmnxBsxGrpStatusPktsIn indicates the number of packets diverted from ingress IOMs towards the ISA-AA MDA(s).')
tmnxBsxGrpStatusPktsInPChipErs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 5, 1, 4), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusPktsInPChipErs.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusPktsInPChipErs.setDescription('The value of tmnxBsxGrpStatusPktsInPChipErs indicates the number of packets discarded by the egress P-chip due to errors in the packets.')
tmnxBsxGrpStatusOctsDiscCongIn = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 5, 1, 5), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusOctsDiscCongIn.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusOctsDiscCongIn.setDescription('The value of tmnxBsxGrpStatusOctsDiscCongIn indicates the number of bytes discarded by the IOMs prior to the ISA-AA MDA(s) due to egress IOM congestion.')
tmnxBsxGrpStatusPktsDiscCongIn = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 5, 1, 6), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusPktsDiscCongIn.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusPktsDiscCongIn.setDescription('The value of tmnxBsxGrpStatusPktsDiscCongIn indicates the number of packets discarded by the IOMs prior to the ISA-AA MDA(s) due to egress IOM congestion.')
tmnxBsxGrpStatusOctsToMda = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 5, 1, 7), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusOctsToMda.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusOctsToMda.setDescription('The value of tmnxBsxGrpStatusOctsToMda indicates the number of bytes sent from an IOM towards the ISA-AA MDA(s).')
tmnxBsxGrpStatusPktsToMda = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 5, 1, 8), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusPktsToMda.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusPktsToMda.setDescription('The value of tmnxBsxGrpStatusPktsToMda indicates the number of packets sent from an IOM towards the ISA-AA MDA(s).')
tmnxBsxGrpStatusOctsDisCongMda = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 5, 1, 9), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusOctsDisCongMda.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusOctsDisCongMda.setDescription('The value of tmnxBsxGrpStatusOctsDisCongMda indicates the number of bytes discarded by the ISA-AA MDA(s) due to congestion.')
tmnxBsxGrpStatusPktsDisCongMda = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 5, 1, 10), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusPktsDisCongMda.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusPktsDisCongMda.setDescription('The value of tmnxBsxGrpStatusPktsDisCongMda indicates the number of packets discarded by the ISA-AA MDA(s) due to congestion.')
tmnxBsxGrpStatusOctsDiscErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 5, 1, 11), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusOctsDiscErrors.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusOctsDiscErrors.setDescription('The value of tmnxBsxGrpStatusOctsDiscErrors indicates the number of bytes discarded due to unrecoverable errors.')
tmnxBsxGrpStatusPktsDiscErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 5, 1, 12), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusPktsDiscErrors.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusPktsDiscErrors.setDescription('The value of tmnxBsxGrpStatusPktsDiscErrors indicates the number of packets discarded due to unrecoverable errors.')
tmnxBsxGrpStatusOctsPolicyByps = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 5, 1, 13), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusOctsPolicyByps.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusOctsPolicyByps.setDescription('The value of tmnxBsxGrpStatusOctsPolicyByps indicates the number of bytes passed untouched that did not have statistics or policy applied.')
tmnxBsxGrpStatusPktsPolicyByps = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 5, 1, 14), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusPktsPolicyByps.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusPktsPolicyByps.setDescription('The value of tmnxBsxGrpStatusPktsPolicyByps indicates the number of packets passed untouched that did not have statistics or policy applied.')
tmnxBsxGrpStatusOctsInspected = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 5, 1, 15), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusOctsInspected.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusOctsInspected.setDescription('The value of tmnxBsxGrpStatusOctsInspected indicates the number of bytes sent for protocol determination by the ISA-AA MDA(s).')
tmnxBsxGrpStatusPktsInspected = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 5, 1, 16), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusPktsInspected.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusPktsInspected.setDescription('The value of tmnxBsxGrpStatusPktsInspected indicates the number of packets sent for protocol determination by the ISA-AA MDA(s).')
tmnxBsxGrpStatusOctsDiscPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 5, 1, 17), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusOctsDiscPolicy.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusOctsDiscPolicy.setDescription('The value of tmnxBsxGrpStatusOctsDiscPolicy indicates the number of bytes discarded by the ISA-AA MDA(s) due to policy.')
tmnxBsxGrpStatusPktsDiscPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 5, 1, 18), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusPktsDiscPolicy.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusPktsDiscPolicy.setDescription('The value of tmnxBsxGrpStatusPktsDiscPolicy indicates the number of packets discarded by the ISA-AA MDA(s) due to policy.')
tmnxBsxGrpStatusOctsInMda = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 5, 1, 19), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusOctsInMda.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusOctsInMda.setDescription('The value of tmnxBsxGrpStatusOctsInMda indicates the number of bytes buffered by the ISA-AA MDA(s).')
tmnxBsxGrpStatusPktsInMda = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 5, 1, 20), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusPktsInMda.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusPktsInMda.setDescription('The value of tmnxBsxGrpStatusPktsInMda indicates the number of packets buffered by the ISA-AA MDA(s).')
tmnxBsxGrpStatusOctsFromMda = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 5, 1, 21), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusOctsFromMda.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusOctsFromMda.setDescription('The value of tmnxBsxGrpStatusOctsFromMda indicates the number of bytes sent from the ISA-AA MDA(s) to the local IOM.')
tmnxBsxGrpStatusPktsFromMda = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 5, 1, 22), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusPktsFromMda.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusPktsFromMda.setDescription('The value of tmnxBsxGrpStatusPktsFromMda indicates the number of packets sent from the ISA-AA MDA(s) to the local IOM.')
tmnxBsxGrpStatusPktsOutPChipEr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 5, 1, 23), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusPktsOutPChipEr.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusPktsOutPChipEr.setDescription('The value of tmnxBsxGrpStatusPktsOutPChipEr indicates the number of packets discarded by the ingress P-chip due to errors in the packets.')
tmnxBsxGrpStatusOctsDisCongOut = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 5, 1, 24), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusOctsDisCongOut.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusOctsDisCongOut.setDescription('The value of tmnxBsxGrpStatusOctsDisCongOut indicates the number of bytes discarded by the IOMs after the ISA-AA MDA(s) due to ingress IOM congestion.')
tmnxBsxGrpStatusPktsDisCongOut = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 5, 1, 25), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusPktsDisCongOut.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusPktsDisCongOut.setDescription('The value of tmnxBsxGrpStatusPktsDisCongOut indicates the number of packets discarded by the IOMs after the ISA-AA MDA(s) due to ingress IOM congestion.')
tmnxBsxGrpStatusOctsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 5, 1, 26), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusOctsOut.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusOctsOut.setDescription('The value of tmnxBsxGrpStatusOctsOut indicates the number of bytes sent to egress IOMs from the ISA-AA MDA(s).')
tmnxBsxGrpStatusPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 5, 1, 27), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusPktsOut.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusPktsOut.setDescription('The value of tmnxBsxGrpStatusPktsOut indicates the number of packets sent to egress IOMs from the ISA-AA MDA(s).')
tmnxBsxGrpStatusFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 5, 1, 28), Counter32()).setUnits('flows').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusFlows.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusFlows.setDescription('The value of tmnxBsxGrpStatusFlows indicates the total number of flows created on the ISA-AA MDA(s).')
tmnxBsxGrpStatusFlowsCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 5, 1, 29), Gauge32()).setUnits('flows').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusFlowsCurrent.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusFlowsCurrent.setDescription('The value of tmnxBsxGrpStatusFlowsCurrent indicates the number of flows currently being tracked by the ISA-AA MDA(s).')
tmnxBsxGrpStatusFlowSetupRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 5, 1, 30), Gauge32()).setUnits('flows per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusFlowSetupRate.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusFlowSetupRate.setDescription('The value of tmnxBsxGrpStatusFlowSetupRate indicates the number of flow setups per second. The calculation is weighted to give half of the weight to flows setup within the last five minutes and 25% weighting to flows setup in the previous five minutes, etc.')
tmnxBsxGrpStatusSubsDiverted = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 5, 1, 31), Gauge32()).setUnits('subscribers').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusSubsDiverted.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusSubsDiverted.setDescription("The value of tmnxBsxGrpStatusSubsDiverted indicates the number of subscribers defined in TIMETRA-SUBSCRIBER-MGMT-MIB::tmnxSubInfoAppProfile in the tmnxSubscriberInfoTable with tmnxBsxAppProfDivert set to 'true'.")
tmnxBsxGrpStatusSubsCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 5, 1, 32), Gauge32()).setUnits('subscribers').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusSubsCurrent.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusSubsCurrent.setDescription('The value of tmnxBsxGrpStatusSubsCurrent indicates the number of subscribers currently with flow records in the ISA-AA MDA(s).')
tmnxBsxGrpStatusTrafficRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 5, 1, 33), Gauge32()).setUnits('kbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusTrafficRate.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusTrafficRate.setDescription('The value of tmnxBsxGrpStatusTrafficRate indicates the traffic rate in kilo-bits per second (kbps) incoming to the ISA-AA MDA(s).')
tmnxBsxGrpStatusHCOctsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 5, 1, 34), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusHCOctsIn.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusHCOctsIn.setDescription('The value of tmnxBsxGrpStatusHCOctsIn indicates the number of bytes diverted from ingress IOMs towards the ISA-AA MDA(s).')
tmnxBsxGrpStatusHCPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 5, 1, 35), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusHCPktsIn.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusHCPktsIn.setDescription('The value of tmnxBsxGrpStatusHCPktsIn indicates the number of packets diverted from ingress IOMs towards the ISA-AA MDA(s).')
tmnxBsxGrpStatusHCPktsInPChipErs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 5, 1, 36), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusHCPktsInPChipErs.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusHCPktsInPChipErs.setDescription('The value of tmnxBsxGrpStatusHCPktsInPChipErs indicates the number of packets discarded by the egress P-chip due to errors in the packets.')
tmnxBsxGrpStatusHCOctsDiscCongIn = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 5, 1, 37), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusHCOctsDiscCongIn.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusHCOctsDiscCongIn.setDescription('The value of tmnxBsxGrpStatusHCOctsDiscCongIn indicates the number of bytes discarded by the IOMs prior to the ISA-AA MDA(s) due to egress IOM congestion.')
tmnxBsxGrpStatusHCPktsDiscCongIn = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 5, 1, 38), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusHCPktsDiscCongIn.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusHCPktsDiscCongIn.setDescription('The value of tmnxBsxGrpStatusHCPktsDiscCongIn indicates the number of packets discarded by the IOMs prior to the ISA-AA MDA(s) due to egress IOM congestion.')
tmnxBsxGrpStatusHCOctsToMda = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 5, 1, 39), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusHCOctsToMda.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusHCOctsToMda.setDescription('The value of tmnxBsxGrpStatusHCOctsToMda indicates the number of bytes sent from an IOM towards the ISA-AA MDA(s).')
tmnxBsxGrpStatusHCPktsToMda = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 5, 1, 40), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusHCPktsToMda.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusHCPktsToMda.setDescription('The value of tmnxBsxGrpStatusHCPktsToMda indicates the number of packets sent from an IOM towards the ISA-AA MDA(s).')
tmnxBsxGrpStatusHCOctsDisCongMda = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 5, 1, 41), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusHCOctsDisCongMda.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusHCOctsDisCongMda.setDescription('The value of tmnxBsxGrpStatusHCOctsDisCongMda indicates the number of bytes discarded by the ISA-AA MDA(s) due to congestion.')
tmnxBsxGrpStatusHCPktsDisCongMda = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 5, 1, 42), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusHCPktsDisCongMda.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusHCPktsDisCongMda.setDescription('The value of tmnxBsxGrpStatusHCPktsDisCongMda indicates the number of packets discarded by the ISA-AA MDA(s) due to congestion.')
tmnxBsxGrpStatusHCOctsDiscErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 5, 1, 43), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusHCOctsDiscErrors.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusHCOctsDiscErrors.setDescription('The value of tmnxBsxGrpStatusHCOctsDiscErrors indicates the number of bytes discarded due to unrecoverable errors.')
tmnxBsxGrpStatusHCPktsDiscErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 5, 1, 44), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusHCPktsDiscErrors.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusHCPktsDiscErrors.setDescription('The value of tmnxBsxGrpStatusHCPktsDiscErrors indicates the number of packets discarded due to unrecoverable errors.')
tmnxBsxGrpStatusHCOctsPolicyByps = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 5, 1, 45), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusHCOctsPolicyByps.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusHCOctsPolicyByps.setDescription('The value of tmnxBsxGrpStatusHCOctsPolicyByps indicates the number of bytes passed untouched that did not have statistics or policy applied.')
tmnxBsxGrpStatusHCPktsPolicyByps = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 5, 1, 46), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusHCPktsPolicyByps.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusHCPktsPolicyByps.setDescription('The value of tmnxBsxGrpStatusHCPktsPolicyByps indicates the number of packets passed untouched that did not have statistics or policy applied.')
tmnxBsxGrpStatusHCOctsInspected = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 5, 1, 47), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusHCOctsInspected.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusHCOctsInspected.setDescription('The value of tmnxBsxGrpStatusHCOctsInspected indicates the number of bytes sent for protocol determination by the ISA-AA MDA(s).')
tmnxBsxGrpStatusHCPktsInspected = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 5, 1, 48), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusHCPktsInspected.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusHCPktsInspected.setDescription('The value of tmnxBsxGrpStatusHCPktsInspected indicates the number of packets sent for protocol determination by the ISA-AA MDA(s).')
tmnxBsxGrpStatusHCOctsDiscPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 5, 1, 49), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusHCOctsDiscPolicy.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusHCOctsDiscPolicy.setDescription('The value of tmnxBsxGrpStatusHCOctsDiscPolicy indicates the number of bytes discarded by the ISA-AA MDA(s) due to policy policers or discard actions.')
tmnxBsxGrpStatusHCPktsDiscPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 5, 1, 50), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusHCPktsDiscPolicy.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusHCPktsDiscPolicy.setDescription('The value of tmnxBsxGrpStatusHCPktsDiscPolicy indicates the number of packets discarded by the ISA-AA MDA(s) due to policy policers or discard actions.')
tmnxBsxGrpStatusHCOctsInMda = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 5, 1, 51), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusHCOctsInMda.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusHCOctsInMda.setDescription('The value of tmnxBsxGrpStatusHCOctsInMda indicates the number of bytes buffered by the ISA-AA MDA(s).')
tmnxBsxGrpStatusHCPktsInMda = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 5, 1, 52), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusHCPktsInMda.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusHCPktsInMda.setDescription('The value of tmnxBsxGrpStatusHCPktsInMda indicates the number of packets buffered by the ISA-AA MDA(s).')
tmnxBsxGrpStatusHCOctsFromMda = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 5, 1, 53), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusHCOctsFromMda.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusHCOctsFromMda.setDescription('The value of tmnxBsxGrpStatusHCOctsFromMda indicates the number of bytes sent from the ISA-AA MDA(s) to the local IOM.')
tmnxBsxGrpStatusHCPktsFromMda = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 5, 1, 54), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusHCPktsFromMda.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusHCPktsFromMda.setDescription('The value of tmnxBsxGrpStatusHCPktsFromMda indicates the number of packets sent from the ISA-AA MDA(s) to the local IOM.')
tmnxBsxGrpStatusHCPktsOutPChipEr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 5, 1, 55), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusHCPktsOutPChipEr.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusHCPktsOutPChipEr.setDescription('The value of tmnxBsxGrpStatusHCPktsOutPChipEr indicates the number of packets discarded by the ingress P-chip due to errors in the packets.')
tmnxBsxGrpStatusHCOctsDisCongOut = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 5, 1, 56), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusHCOctsDisCongOut.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusHCOctsDisCongOut.setDescription('The value of tmnxBsxGrpStatusHCOctsDisCongOut indicates the number of bytes discarded by the IOMs after the ISA-AA MDA(s) due to ingress IOM congestion.')
tmnxBsxGrpStatusHCPktsDisCongOut = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 5, 1, 57), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusHCPktsDisCongOut.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusHCPktsDisCongOut.setDescription('The value of tmnxBsxGrpStatusHCPktsDisCongOut indicates the number of packets discarded by the IOMs after the ISA-AA MDA(s) due to ingress IOM congestion.')
tmnxBsxGrpStatusHCOctsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 5, 1, 58), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusHCOctsOut.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusHCOctsOut.setDescription('The value of tmnxBsxGrpStatusHCOctsOut indicates the number of bytes sent to egress IOMs from the ISA-AA MDA(s).')
tmnxBsxGrpStatusHCPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 5, 1, 59), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusHCPktsOut.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusHCPktsOut.setDescription('The value of tmnxBsxGrpStatusHCPktsOut indicates the number of packets sent to egress IOMs from the ISA-AA MDA(s).')
tmnxBsxGrpStatusHCFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 5, 1, 60), Counter64()).setUnits('flows').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusHCFlows.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusHCFlows.setDescription('The value of tmnxBsxGrpStatusHCFlows indicates the number of flows seen by the ISA-AA MDA(s). Note that if the same 5-tuple is seen for a different flow within the flow timeout, it will still be considered one flow.')
tmnxBsxGrpStatusFlowsAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 5, 1, 61), Gauge32()).setUnits('flows').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusFlowsAverage.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusFlowsAverage.setDescription('The value of tmnxBsxGrpStatusFlowsAverage indicates the average number of flows being tracked by the ISA-AA MDA(s) within the last 60 minutes.')
tmnxBsxGrpStatusFlowsPeak = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 5, 1, 62), Gauge32()).setUnits('flows').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusFlowsPeak.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusFlowsPeak.setDescription('The value of tmnxBsxGrpStatusFlowsPeak indicates the peak number of flows being tracked by the ISA-AA MDA(s) within the last 60 minutes.')
tmnxBsxGrpStatusFlowSetupRateAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 5, 1, 63), Gauge32()).setUnits('flows per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusFlowSetupRateAvg.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusFlowSetupRateAvg.setDescription('The value of tmnxBsxGrpStatusFlowSetupRateAvg indicates the average number of flow setups per second being tracked by the ISA-AA MDA(s) within the last 60 minutes.')
tmnxBsxGrpStatusFlowSetupRatePk = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 5, 1, 64), Gauge32()).setUnits('flows per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusFlowSetupRatePk.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusFlowSetupRatePk.setDescription('The value of tmnxBsxGrpStatusFlowSetupRatePk indicates the peak number of flow setups per second being tracked by the ISA-AA MDA(s) within the last 60 minutes.')
tmnxBsxGrpStatusSubsDivertedAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 5, 1, 65), Gauge32()).setUnits('subscribers').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusSubsDivertedAvg.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusSubsDivertedAvg.setDescription("The value of tmnxBsxGrpStatusSubsDivertedAvg indicates the average number of subscribers defined in TIMETRA-SUBSCRIBER-MGMT-MIB::tmnxSubInfoAppProfile in the tmnxSubscriberInfoTable with tmnxBsxAppProfDivert set to 'true' within the last 60 minutes.")
tmnxBsxGrpStatusSubsDivertedPk = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 5, 1, 66), Gauge32()).setUnits('subscribers').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusSubsDivertedPk.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusSubsDivertedPk.setDescription("The value of tmnxBsxGrpStatusSubsDivertedPk indicates the peak number of subscribers defined in TIMETRA-SUBSCRIBER-MGMT-MIB::tmnxSubInfoAppProfile in the tmnxSubscriberInfoTable with tmnxBsxAppProfDivert set to 'true' within the last 60 minutes.")
tmnxBsxGrpStatusSubsAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 5, 1, 67), Gauge32()).setUnits('subscribers').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusSubsAverage.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusSubsAverage.setDescription('The value of tmnxBsxGrpStatusSubsAverage indicates the average number of subscribers with flow records in the ISA-AA MDA(s) within the last 60 minutes.')
tmnxBsxGrpStatusSubsPeak = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 5, 1, 68), Gauge32()).setUnits('subscribers').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusSubsPeak.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusSubsPeak.setDescription('The value of tmnxBsxGrpStatusSubsPeak indicates the peak number of subscribers with flow records in the ISA-AA MDA(s) within the last 60 minutes.')
tmnxBsxGrpStatusTrafficRateAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 5, 1, 69), Gauge32()).setUnits('kbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusTrafficRateAvg.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusTrafficRateAvg.setDescription('The value of tmnxBsxGrpStatusTrafficRateAvg indicates the average traffic rate in kilo-bits per second (kbps) incoming to the ISA-AA MDA(s) within the last 60 minutes.')
tmnxBsxGrpStatusTrafficRatePeak = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 5, 1, 70), Gauge32()).setUnits('kbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusTrafficRatePeak.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusTrafficRatePeak.setDescription('The value of tmnxBsxGrpStatusTrafficRatePeak indicates the peak traffic rate in kilo-bits per second (kbps) incoming to the ISA-AA MDA(s) within the last 60 minutes.')
tmnxBsxGrpStatusPacketRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 5, 1, 71), Gauge32()).setUnits('packets per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusPacketRate.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusPacketRate.setDescription('The value of tmnxBsxGrpStatusPacketRate indicates the current number of packets per second incoming to the ISA-AA MDA(s).')
tmnxBsxGrpStatusPacketRateAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 5, 1, 72), Gauge32()).setUnits('packets per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusPacketRateAvg.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusPacketRateAvg.setDescription('The value of tmnxBsxGrpStatusPacketRateAvg indicates the average number of packets per second incoming to the ISA-AA MDA(s) within the last 60 minutes.')
tmnxBsxGrpStatusPacketRatePeak = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 5, 1, 73), Gauge32()).setUnits('packets per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusPacketRatePeak.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusPacketRatePeak.setDescription('The value of tmnxBsxGrpStatusPacketRatePeak indicates the peak number of packets per second incoming to the ISA-AA MDA(s) within the last 60 minutes.')
tmnxBsxGrpStatusFlowResInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 5, 1, 74), Gauge32()).setUnits('flow resources').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusFlowResInUse.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusFlowResInUse.setDescription('The value of tmnxBsxGrpStatusFlowResInUse indicates the number of flow resources currently in-use on the ISA-AA MDA.')
tmnxBsxGrpStatusHCPktSzIncPk = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 5, 1, 75), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusHCPktSzIncPk.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusHCPktSzIncPk.setDescription('The value of tmnxBsxGrpStatusHCPktSzIncPk indicates the number of packets that the ISA-AA MDA has increased in size.')
tmnxBsxGrpStatusPktSzIncPkLo = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 5, 1, 76), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusPktSzIncPkLo.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusPktSzIncPkLo.setDescription('The value of tmnxBsxGrpStatusPktSzIncPkLo indicates the lower 32-bits of tmnxBsxGrpStatusHCPktSzIncPk.')
tmnxBsxGrpStatusPktSzIncPkHi = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 5, 1, 77), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusPktSzIncPkHi.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusPktSzIncPkHi.setDescription('The value of tmnxBsxGrpStatusPktSzIncPkHi indicates the upper 32-bits of tmnxBsxGrpStatusHCPktSzIncPk.')
tmnxBsxGrpStatusHCPktSzDecPk = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 5, 1, 78), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusHCPktSzDecPk.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusHCPktSzDecPk.setDescription('The value of tmnxBsxGrpStatusHCPktSzDecPk indicates the number of packets that the ISA-AA MDA has decreased in size.')
tmnxBsxGrpStatusPktSzDecPkLo = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 5, 1, 79), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusPktSzDecPkLo.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusPktSzDecPkLo.setDescription('The value of tmnxBsxGrpStatusPktSzDecPkLo indicates the lower 32-bits of tmnxBsxGrpStatusHCPktSzDecPk.')
tmnxBsxGrpStatusPktSzDecPkHi = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 5, 1, 80), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusPktSzDecPkHi.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusPktSzDecPkHi.setDescription('The value of tmnxBsxGrpStatusPktSzDecPkHi indicates the upper 32-bits of tmnxBsxGrpStatusHCPktSzDecPk.')
tmnxBsxGrpStatusHCPktSzIncOc = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 5, 1, 81), Counter64()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusHCPktSzIncOc.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusHCPktSzIncOc.setDescription('The value of tmnxBsxGrpStatusHCPktSzIncOc indicates the total number of additional octets the ISA-AA MDA injected into the packets.')
tmnxBsxGrpStatusPktSzIncOcLo = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 5, 1, 82), Counter32()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusPktSzIncOcLo.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusPktSzIncOcLo.setDescription('The value of tmnxBsxGrpStatusPktSzIncOcLo indicates the lower 32-bits of tmnxBsxGrpStatusPktSzIncOcLo.')
tmnxBsxGrpStatusPktSzIncOcHi = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 5, 1, 83), Counter32()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusPktSzIncOcHi.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusPktSzIncOcHi.setDescription('The value of tmnxBsxGrpStatusPktSzIncOcHi indicates the upper 32-bits of tmnxBsxGrpStatusHCPktSzIncOc.')
tmnxBsxGrpStatusHCPktSzDecOc = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 5, 1, 84), Counter64()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusHCPktSzDecOc.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusHCPktSzDecOc.setDescription('The value of tmnxBsxGrpStatusHCPktSzDecOc indicates the total number of octets the ISA-AA MDA has removed from packets.')
tmnxBsxGrpStatusPktSzDecOcLo = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 5, 1, 85), Counter32()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusPktSzDecOcLo.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusPktSzDecOcLo.setDescription('The value of tmnxBsxGrpStatusPktSzDecOcLo indicates the lower 32-bits of tmnxBsxGrpStatusHCPktSzDecOc.')
tmnxBsxGrpStatusPktSzDecOcHi = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 5, 1, 86), Counter32()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusPktSzDecOcHi.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusPktSzDecOcHi.setDescription('The value of tmnxBsxGrpStatusPktSzDecOcHi indicates the upper 32-bits of tmnxBsxGrpStatusHCPktSzDecOc.')
tmnxBsxGrpStatusIngQTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 6), )
if mibBuilder.loadTexts: tmnxBsxGrpStatusIngQTable.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusIngQTable.setDescription('The tmnxBsxGrpStatusIngQTable contains an entry for each ISA-AA MDA and Group in the system. Each row contains the Qos status information for traffic exiting an ISA-AA MDA given the tmnxBsxGrpStatusInQDirection and tmnxBsxGrpStatusInQIndex. An ISA-AA MDA is uniquely identified by the tmnxChassisIndex, tmnxBsxCardSlotNum, and the tmnxMDASlotNum.')
tmnxBsxGrpStatusIngQEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 6, 1), ).setIndexNames((0, "TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGroupIndex"), (0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxCardSlotNum"), (0, "TIMETRA-CHASSIS-MIB", "tmnxMDASlotNum"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusInQDirection"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusInQIndex"))
if mibBuilder.loadTexts: tmnxBsxGrpStatusIngQEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusIngQEntry.setDescription('Each tmnxBsxGrpStatusIngQEntry contains the Qos status information for traffic exiting a particular ISA-AA MDA within a group, given a tmnxBsxGrpStatusInQDirection and tmnxBsxGrpStatusInQIndex.')
tmnxBsxGrpStatusInQDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 6, 1, 1), TmnxBsxDirection())
if mibBuilder.loadTexts: tmnxBsxGrpStatusInQDirection.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusInQDirection.setDescription("The value of tmnxBsxGrpStatusInQDirection specifies either the subscriber to network 'sub2net' or network to subscriber 'net2sub' direction of traffic. The value 'both' is not a valid index.")
tmnxBsxGrpStatusInQIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 6, 1, 2), TQueueId())
if mibBuilder.loadTexts: tmnxBsxGrpStatusInQIndex.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusInQIndex.setDescription('The value of tmnxBsxGrpStatusInQIndex specifies the number of the ingress queue as configured within the tmnxBsxIsaAaGrpIngressQuePolicy configured against this tmnxBsxIsaAaGroupIndex.')
tmnxBsxGrpStatusIngQDiscontTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 6, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusIngQDiscontTime.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusIngQDiscontTime.setDescription('The value of tmnxBsxGrpStatusIngQDiscontTime indicates the SNMPv2-MIB::sysUpTime (hundredths of a second) when the ISA-AA MDA within this group has last changed status.')
tmnxBsxGrpStatusIngQFwdInPPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 6, 1, 4), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusIngQFwdInPPkts.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusIngQFwdInPPkts.setDescription('The value of tmnxBsxGrpStatusIngQFwdInPPkts indicates the number of in profile packets diverted towards egress IOMs from the ISA-AA MDA within this group for the particular queue.')
tmnxBsxGrpStatusIngQFwdOutPPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 6, 1, 5), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusIngQFwdOutPPkts.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusIngQFwdOutPPkts.setDescription('The value of tmnxBsxGrpStatusIngQFwdOutPPkts indicates the number of out of profile packets diverted towards egress IOMs from the ISA-AA MDA within this group for the particular queue.')
tmnxBsxGrpStatusIngQFwdInPOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 6, 1, 6), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusIngQFwdInPOcts.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusIngQFwdInPOcts.setDescription('The value of tmnxBsxGrpStatusIngQFwdInPOcts indicates the number of in profile bytes diverted towards egress IOMs from the ISA-AA MDA within this group for the particular queue.')
tmnxBsxGrpStatusIngQFwdOutPOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 6, 1, 7), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusIngQFwdOutPOcts.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusIngQFwdOutPOcts.setDescription('The value of tmnxBsxGrpStatusIngQFwdOutPOcts indicates the number of out of profile bytes diverted towards egress IOMs from the ISA-AA MDA within this group for the particular queue.')
tmnxBsxGrpStatusIngQDroInPPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 6, 1, 8), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusIngQDroInPPkts.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusIngQDroInPPkts.setDescription('The value of tmnxBsxGrpStatusIngQDroInPPkts indicates the number of in profile packets discarded towards egress IOMs from the ISA-AA MDA within this group for the particular queue.')
tmnxBsxGrpStatusIngQDroOutPPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 6, 1, 9), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusIngQDroOutPPkts.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusIngQDroOutPPkts.setDescription('The value of tmnxBsxGrpStatusIngQDroOutPPkts indicates the number of out of profile packets discarded towards egress IOMs from the ISA-AA MDA within this group for the particular queue.')
tmnxBsxGrpStatusIngQDroInPOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 6, 1, 10), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusIngQDroInPOcts.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusIngQDroInPOcts.setDescription('The value of tmnxBsxGrpStatusIngQDroInPOcts indicates the number of in profile bytes discarded towards egress IOMs from the ISA-AA MDA within this group for the particular queue.')
tmnxBsxGrpStatusIngQDroOutPOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 6, 1, 11), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusIngQDroOutPOcts.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusIngQDroOutPOcts.setDescription('The value of tmnxBsxGrpStatusIngQDroOutPOcts indicates the number of out of profile bytes discarded towards egress IOMs from the ISA-AA MDA within this group for the particular queue.')
tmnxBsxGrpStatusIngQHCFwdInPPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 6, 1, 12), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusIngQHCFwdInPPkts.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusIngQHCFwdInPPkts.setDescription('The value of tmnxBsxGrpStatusIngQHCFwdInPPkts indicates the number of in profile packets diverted towards egress IOMs from the ISA-AA MDA within this group for the particular queue.')
tmnxBsxGrpStatusIngQHCFwdOutPPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 6, 1, 13), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusIngQHCFwdOutPPkts.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusIngQHCFwdOutPPkts.setDescription('The value of tmnxBsxGrpStatusIngQHCFwdOutPPkts indicates the number of out of profile packets diverted towards egress IOMs from the ISA-AA MDA within this group for the particular queue.')
tmnxBsxGrpStatusIngQHCFwdInPOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 6, 1, 14), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusIngQHCFwdInPOcts.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusIngQHCFwdInPOcts.setDescription('The value of tmnxBsxGrpStatusIngQHCFwdInPOcts indicates the number of in profile bytes diverted towards egress IOMs from the ISA-AA MDA within this group for the particular queue.')
tmnxBsxGrpStatusIngQHCFwdOutPOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 6, 1, 15), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusIngQHCFwdOutPOcts.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusIngQHCFwdOutPOcts.setDescription('The value of tmnxBsxGrpStatusIngQHCFwdOutPOcts indicates the number of out of profile bytes diverted towards egress IOMs from the ISA-AA MDA within this group for the particular queue.')
tmnxBsxGrpStatusIngQHCDroInPPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 6, 1, 16), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusIngQHCDroInPPkts.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusIngQHCDroInPPkts.setDescription('The value of tmnxBsxGrpStatusIngQHCDroInPPkts indicates the number of in profile packets discarded towards egress IOMs from the ISA-AA MDA within this group for the particular queue.')
tmnxBsxGrpStatusIngQHCDroOutPPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 6, 1, 17), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusIngQHCDroOutPPkts.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusIngQHCDroOutPPkts.setDescription('The value of tmnxBsxGrpStatusIngQHCDroOutPPkts indicates the number of out of profile packets discarded towards egress IOMs from the ISA-AA MDA within this group for the particular queue.')
tmnxBsxGrpStatusIngQHCDroInPOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 6, 1, 18), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusIngQHCDroInPOcts.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusIngQHCDroInPOcts.setDescription('The value of tmnxBsxGrpStatusIngQHCDroInPOcts indicates the number of in profile bytes discarded towards egress IOMs from the ISA-AA MDA within this group for the particular queue.')
tmnxBsxGrpStatusIngQHCDroOutPOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 6, 1, 19), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusIngQHCDroOutPOcts.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusIngQHCDroOutPOcts.setDescription('The value of tmnxBsxGrpStatusIngQHCDroOutPOcts indicates the number of out of profile bytes discarded towards egress IOMs from the ISA-AA MDA within this group for the particular queue.')
tmnxBsxGrpStatusEgrQTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 7), )
if mibBuilder.loadTexts: tmnxBsxGrpStatusEgrQTable.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusEgrQTable.setDescription('The tmnxBsxGrpStatusEgrQTable contains an entry for each ISA-AA MDA and Group in the system. Each row contains the Qos status information for traffic entering an ISA-AA MDA given the tmnxBsxGrpStatusEgrQDirection and tmnxBsxGrpStatusEgrQIndex. An ISA-AA MDA is uniquely identified by the tmnxChassisIndex, tmnxBsxCardSlotNum, and the tmnxMDASlotNum.')
tmnxBsxGrpStatusEgrQEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 7, 1), ).setIndexNames((0, "TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGroupIndex"), (0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxCardSlotNum"), (0, "TIMETRA-CHASSIS-MIB", "tmnxMDASlotNum"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusEgrQDirection"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusEgrQIndex"))
if mibBuilder.loadTexts: tmnxBsxGrpStatusEgrQEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusEgrQEntry.setDescription('Each tmnxBsxGrpStatusEgrQEntry contains the Qos status information for traffic incoming to a particular ISA-AA MDA within a group, given a tmnxBsxGrpStatusEgrQDirection and tmnxBsxGrpStatusEgrQIndex.')
tmnxBsxGrpStatusEgrQDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 7, 1, 1), TmnxBsxDirection())
if mibBuilder.loadTexts: tmnxBsxGrpStatusEgrQDirection.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusEgrQDirection.setDescription("The value of tmnxBsxGrpStatusEgrQDirection specifies either the subscriber to network 'sub2net' or network to subscriber 'net2sub' direction of traffic. The value 'both' is not a valid index.")
tmnxBsxGrpStatusEgrQIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 7, 1, 2), TQueueId())
if mibBuilder.loadTexts: tmnxBsxGrpStatusEgrQIndex.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusEgrQIndex.setDescription('The value of tmnxBsxGrpStatusEgrQIndex specifies the number of the egress queue as configured within the tmnxBsxIsaAaGrpToSubQuePolicy or tmnxBsxIsaAaGrpFromSubQuePolicy configured against this tmnxBsxIsaAaGroupIndex.')
tmnxBsxGrpStatusEgrQDiscontTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 7, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusEgrQDiscontTime.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusEgrQDiscontTime.setDescription('The value of tmnxBsxGrpStatusEgrQDiscontTime indicates the SNMPv2-MIB::sysUpTime (hundredths of a second) when the ISA-AA MDA within the group has last changed status.')
tmnxBsxGrpStatusEgrQFwdInPPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 7, 1, 4), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusEgrQFwdInPPkts.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusEgrQFwdInPPkts.setDescription('The value of tmnxBsxGrpStatusEgrQFwdInPPkts indicates the number of in profile packets diverted from ingress IOMs towards the ISA-AA MDA within this group for the particular queue.')
tmnxBsxGrpStatusEgrQFwdOutPPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 7, 1, 5), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusEgrQFwdOutPPkts.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusEgrQFwdOutPPkts.setDescription('The value of tmnxBsxGrpStatusEgrQFwdOutPPkts indicates the number of out of profile packets diverted from ingress IOMs towards the ISA-AA MDA within this group for the particular queue.')
tmnxBsxGrpStatusEgrQFwdInPOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 7, 1, 6), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusEgrQFwdInPOcts.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusEgrQFwdInPOcts.setDescription('The value of tmnxBsxGrpStatusEgrQFwdInPOcts indicates the number of in profile bytes diverted from ingress IOMs towards the ISA-AA MDA within this group for the particular queue.')
tmnxBsxGrpStatusEgrQFwdOutPOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 7, 1, 7), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusEgrQFwdOutPOcts.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusEgrQFwdOutPOcts.setDescription('The value of tmnxBsxGrpStatusEgrQFwdOutPOcts indicates the number of out of profile bytes diverted from ingress IOMs towards the ISA-AA MDA within this group for the particular queue.')
tmnxBsxGrpStatusEgrQDroInPPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 7, 1, 8), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusEgrQDroInPPkts.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusEgrQDroInPPkts.setDescription('The value of tmnxBsxGrpStatusEgrQDroInPPkts indicates the number of in profile packets discarded from ingress IOMs towards the ISA-AA MDA within this group for the particular queue.')
tmnxBsxGrpStatusEgrQDroOutPPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 7, 1, 9), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusEgrQDroOutPPkts.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusEgrQDroOutPPkts.setDescription('The value of tmnxBsxGrpStatusEgrQDroOutPPkts indicates the number of out of profile packets discarded from ingress IOMs towards the ISA-AA MDA within this group for the particular queue.')
tmnxBsxGrpStatusEgrQDroInPOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 7, 1, 10), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusEgrQDroInPOcts.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusEgrQDroInPOcts.setDescription('The value of tmnxBsxGrpStatusEgrQDroInPOcts indicates the number of in profile bytes discarded from ingress IOMs towards the ISA-AA MDA within this group for the particular queue.')
tmnxBsxGrpStatusEgrQDroOutPOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 7, 1, 11), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusEgrQDroOutPOcts.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusEgrQDroOutPOcts.setDescription('The value of tmnxBsxGrpStatusEgrQDroOutPOcts indicates the number of out of profile bytes discarded from ingress IOMs towards the ISA-AA MDA within this group for the particular queue.')
tmnxBsxGrpStatusEgrQHCFwdInPPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 7, 1, 12), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusEgrQHCFwdInPPkts.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusEgrQHCFwdInPPkts.setDescription('The value of tmnxBsxGrpStatusEgrQHCFwdInPPkts indicates the number of in profile packets diverted from ingress IOMs towards the ISA-AA MDA within this group for the particular queue.')
tmnxBsxGrpStatusEgrQHCFwdOutPPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 7, 1, 13), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusEgrQHCFwdOutPPkts.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusEgrQHCFwdOutPPkts.setDescription('The value of tmnxBsxGrpStatusEgrQHCFwdOutPPkts indicates the number of out of profile packets diverted from ingress IOMs towards the ISA-AA MDA within this group for the particular queue.')
tmnxBsxGrpStatusEgrQHCFwdInPOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 7, 1, 14), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusEgrQHCFwdInPOcts.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusEgrQHCFwdInPOcts.setDescription('The value of tmnxBsxGrpStatusEgrQHCFwdInPOcts indicates the number of in profile bytes diverted from ingress IOMs towards the ISA-AA MDA within this group for the particular queue.')
tmnxBsxGrpStatusEgrQHCFwdOutPOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 7, 1, 15), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusEgrQHCFwdOutPOcts.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusEgrQHCFwdOutPOcts.setDescription('The value of tmnxBsxGrpStatusEgrQHCFwdOutPOcts indicates the number of out of profile bytes diverted from ingress IOMs towards the ISA-AA MDA within this group for the particular queue.')
tmnxBsxGrpStatusEgrQHCDroInPPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 7, 1, 16), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusEgrQHCDroInPPkts.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusEgrQHCDroInPPkts.setDescription('The value of tmnxBsxGrpStatusEgrQHCDroInPPkts indicates the number of in profile packets discarded from ingress IOMs towards the ISA-AA MDA within this group for the particular queue.')
tmnxBsxGrpStatusEgrQHCDroOutPPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 7, 1, 17), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusEgrQHCDroOutPPkts.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusEgrQHCDroOutPPkts.setDescription('The value of tmnxBsxGrpStatusEgrQHCDroOutPPkts indicates the number of out of profile packets discarded from ingress IOMs towards the ISA-AA MDA within this group for the particular queue.')
tmnxBsxGrpStatusEgrQHCDroInPOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 7, 1, 18), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusEgrQHCDroInPOcts.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusEgrQHCDroInPOcts.setDescription('The value of tmnxBsxGrpStatusEgrQHCDroInPOcts indicates the number of in profile bytes discarded from ingress IOMs towards the ISA-AA MDA within this group for the particular queue.')
tmnxBsxGrpStatusEgrQHCDroOutPOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 7, 1, 19), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxGrpStatusEgrQHCDroOutPOcts.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxGrpStatusEgrQHCDroOutPOcts.setDescription('The value of tmnxBsxGrpStatusEgrQHCDroOutPOcts indicates the number of out of profile bytes discarded from ingress IOMs towards the ISA-AA MDA within this group for the particular queue.')
tmnxBsxAaSubSumTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 8), )
if mibBuilder.loadTexts: tmnxBsxAaSubSumTable.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAaSubSumTable.setDescription('The tmnxBsxAaSubSumTable contains an entry for each ISA-AA subscriber in the system. Each row contains the subscriber summary information for a given ISA-AA group, partition and statistics interval.')
tmnxBsxAaSubSumEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 8, 1), ).setIndexNames((0, "TIMETRA-BSX-NG-MIB", "tmnxBsxAaGrpPartIndex"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubStatsInterval"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubscriberType"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubscriber"))
if mibBuilder.loadTexts: tmnxBsxAaSubSumEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAaSubSumEntry.setDescription('Each tmnxBsxAaSubSumEntry contains the ISA-AA subscriber summary information within a group partition and statistics interval.')
tmnxBsxAaSubStatsInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 8, 1, 1), TmnxBsxAaSubStatsInterval())
if mibBuilder.loadTexts: tmnxBsxAaSubStatsInterval.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAaSubStatsInterval.setDescription('The tmnxBsxAaSubStatsInterval specifies the interval for the retrieval of application assurance subscriber statistics.')
tmnxBsxAaSubSumMdaSlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 8, 1, 2), TmnxSlotNumOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxAaSubSumMdaSlotNum.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAaSubSumMdaSlotNum.setDescription('The value of tmnxBsxAaSubSumMdaSlotNum indicates the slot number of the ISA-AA MDA servicing the subscriber.')
tmnxBsxAaSubSumMdaMdaNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 8, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxAaSubSumMdaMdaNum.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAaSubSumMdaMdaNum.setDescription('The value of tmnxBsxAaSubSumMdaMdaNum indicates the MDA number of the ISA-AA MDA servicing the subscriber.')
tmnxBsxAaSubSumAppProfName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 8, 1, 4), TNamedItem()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxAaSubSumAppProfName.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAaSubSumAppProfName.setDescription('The value of tmnxBsxAaSubSumAppProfName indicates the name of the ISA-AA application profile associated with the subscriber.')
tmnxBsxAaSubSumDiscontTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 8, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxAaSubSumDiscontTime.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAaSubSumDiscontTime.setDescription('The value of tmnxBsxAaSubSumDiscontTime indicates the SNMPv2-MIB::sysUpTime (hundredths of a second) when the summary information for the subscriber has last changed status.')
tmnxBsxAaSubSumOctsAdmFmSb = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 8, 1, 6), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxAaSubSumOctsAdmFmSb.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAaSubSumOctsAdmFmSb.setDescription('The value of tmnxBsxAaSubSumOctsAdmFmSb indicates the total number of bytes permitted for the subscriber to network direction.')
tmnxBsxAaSubSumPktsAdmFmSb = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 8, 1, 7), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxAaSubSumPktsAdmFmSb.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAaSubSumPktsAdmFmSb.setDescription('The value of tmnxBsxAaSubSumPktsAdmFmSb indicates the total number of packets permitted for the subscriber to network direction.')
tmnxBsxAaSubSumFlwsAdmFmSb = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 8, 1, 8), Counter32()).setUnits('flows').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxAaSubSumFlwsAdmFmSb.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAaSubSumFlwsAdmFmSb.setDescription('The value of tmnxBsxAaSubSumFlwsAdmFmSb indicates the total number of flows permitted for the subscriber to network direction.')
tmnxBsxAaSubSumOctsDnyFmSb = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 8, 1, 9), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxAaSubSumOctsDnyFmSb.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAaSubSumOctsDnyFmSb.setDescription('The value of tmnxBsxAaSubSumOctsDnyFmSb indicates the total number of bytes dropped for the subscriber to network direction.')
tmnxBsxAaSubSumPktsDnyFmSb = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 8, 1, 10), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxAaSubSumPktsDnyFmSb.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAaSubSumPktsDnyFmSb.setDescription('The value of tmnxBsxAaSubSumPktsDnyFmSb indicates the total number of packets dropped for the subscriber to network direction.')
tmnxBsxAaSubSumFlwsDnyFmSb = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 8, 1, 11), Counter32()).setUnits('flows').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxAaSubSumFlwsDnyFmSb.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAaSubSumFlwsDnyFmSb.setDescription('The value of tmnxBsxAaSubSumFlwsDnyFmSb indicates the total number of flows that dropped subsequent packets in the subscriber to network direction.')
tmnxBsxAaSubSumOctsAdmToSb = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 8, 1, 12), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxAaSubSumOctsAdmToSb.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAaSubSumOctsAdmToSb.setDescription('The value of tmnxBsxAaSubSumOctsAdmToSb indicates the total number of bytes permitted for the network to subscriber direction.')
tmnxBsxAaSubSumPktsAdmToSb = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 8, 1, 13), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxAaSubSumPktsAdmToSb.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAaSubSumPktsAdmToSb.setDescription('The value of tmnxBsxAaSubSumPktsAdmToSb indicates the total number of packets permitted for the network to subscriber direction.')
tmnxBsxAaSubSumFlwsAdmToSb = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 8, 1, 14), Counter32()).setUnits('flows').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxAaSubSumFlwsAdmToSb.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAaSubSumFlwsAdmToSb.setDescription('The value of tmnxBsxAaSubSumFlwsAdmToSb indicates the total number of flows permitted for the network to subscriber direction.')
tmnxBsxAaSubSumOctsDnyToSb = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 8, 1, 15), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxAaSubSumOctsDnyToSb.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAaSubSumOctsDnyToSb.setDescription('The value of tmnxBsxAaSubSumOctsDnyToSb indicates the total number of bytes dropped for the network to subscriber direction.')
tmnxBsxAaSubSumPktsDnyToSb = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 8, 1, 16), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxAaSubSumPktsDnyToSb.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAaSubSumPktsDnyToSb.setDescription('The value of tmnxBsxAaSubSumPktsDnyToSb indicates the total number of packets dropped for the network to subscriber direction.')
tmnxBsxAaSubSumFlwsDnyToSb = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 8, 1, 17), Counter32()).setUnits('flows').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxAaSubSumFlwsDnyToSb.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAaSubSumFlwsDnyToSb.setDescription('The value of tmnxBsxAaSubSumFlwsDnyToSb indicates the total number of flows that dropped subsequent packets in the network to subscriber direction.')
tmnxBsxAaSubSumTermFlwDur = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 8, 1, 18), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxAaSubSumTermFlwDur.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAaSubSumTermFlwDur.setDescription('The value of tmnxBsxAaSubSumTermFlwDur indicates the sum of all flow durations from first packet seen to last packet seen for flows that have terminated.')
tmnxBsxAaSubSumTermFlws = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 8, 1, 19), Counter32()).setUnits('flows').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxAaSubSumTermFlws.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAaSubSumTermFlws.setDescription('The value of tmnxBsxAaSubSumTermFlws indicates the total number of allowed flows that have terminated.')
tmnxBsxAaSubSumShrtDurFlws = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 8, 1, 20), Counter32()).setUnits('flows').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxAaSubSumShrtDurFlws.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAaSubSumShrtDurFlws.setDescription('The value of tmnxBsxAaSubSumShrtDurFlws indicates the total number of flows with a duration less than or equal to 30 seconds, that have completed.')
tmnxBsxAaSubSumMedDurFlws = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 8, 1, 21), Counter32()).setUnits('flows').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxAaSubSumMedDurFlws.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAaSubSumMedDurFlws.setDescription('The value of tmnxBsxAaSubSumMedDurFlws indicates the total number of flows with a duration less than or equal to 180 seconds, but greater than 30 seconds, that have completed.')
tmnxBsxAaSubSumLngDurFlws = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 8, 1, 22), Counter32()).setUnits('flows').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxAaSubSumLngDurFlws.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAaSubSumLngDurFlws.setDescription('The value of tmnxBsxAaSubSumLngDurFlws indicates the total number of flows with a duration greater than 180 seconds, that have completed.')
tmnxBsxAaSubSumActFlwsFmSb = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 8, 1, 23), Gauge32()).setUnits('flows').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxAaSubSumActFlwsFmSb.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAaSubSumActFlwsFmSb.setDescription('The value of tmnxBsxAaSubSumActFlwsFmSb indicates the number of allowed flows in the subscriber to network direction that are active.')
tmnxBsxAaSubSumActFlwsToSb = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 8, 1, 24), Gauge32()).setUnits('flows').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxAaSubSumActFlwsToSb.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAaSubSumActFlwsToSb.setDescription('The value of tmnxBsxAaSubSumActFlwsToSb indicates the number of allowed flows in the network to subscriber direction that are active.')
tmnxBsxAaSubSumHCOctsAdmFmSb = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 8, 1, 25), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxAaSubSumHCOctsAdmFmSb.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAaSubSumHCOctsAdmFmSb.setDescription('The value of tmnxBsxAaSubSumHCOctsAdmFmSb indicates the total number of bytes permitted for the subscriber to network direction. This object is a 64-bit version of tmnxBsxAaSubSumOctsAdmFmSb.')
tmnxBsxAaSubSumHCPktsAdmFmSb = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 8, 1, 26), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxAaSubSumHCPktsAdmFmSb.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAaSubSumHCPktsAdmFmSb.setDescription('The value of tmnxBsxAaSubSumHCPktsAdmFmSb indicates the total number of packets permitted for the subscriber to network direction. This object is a 64-bit version of tmnxBsxAaSubSumPktsAdmFmSb.')
tmnxBsxAaSubSumHCFlwsAdmFmSb = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 8, 1, 27), Counter64()).setUnits('flows').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxAaSubSumHCFlwsAdmFmSb.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAaSubSumHCFlwsAdmFmSb.setDescription('The value of tmnxBsxAaSubSumHCFlwsAdmFmSb indicates the total number of flows permitted for the subscriber to network direction. This object is a 64-bit version of tmnxBsxAaSubSumFlwsAdmFmSb.')
tmnxBsxAaSubSumHCOctsDnyFmSb = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 8, 1, 28), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxAaSubSumHCOctsDnyFmSb.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAaSubSumHCOctsDnyFmSb.setDescription('The value of tmnxBsxAaSubSumHCOctsDnyFmSb indicates the total number of bytes dropped for the subscriber to network direction. This object is a 64-bit version of tmnxBsxAaSubSumOctsDnyFmSb.')
tmnxBsxAaSubSumHCPktsDnyFmSb = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 8, 1, 29), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxAaSubSumHCPktsDnyFmSb.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAaSubSumHCPktsDnyFmSb.setDescription('The value of tmnxBsxAaSubSumHCPktsDnyFmSb indicates the total number of packets dropped for the subscriber to network direction. This object is a 64-bit version of tmnxBsxAaSubSumPktsDnyFmSb.')
tmnxBsxAaSubSumHCFlwsDnyFmSb = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 8, 1, 30), Counter64()).setUnits('flows').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxAaSubSumHCFlwsDnyFmSb.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAaSubSumHCFlwsDnyFmSb.setDescription('The value of tmnxBsxAaSubSumHCFlwsDnyFmSb indicates the total number of flows that dropped subsequent packets in the subscriber to network direction. This object is a 64-bit version of tmnxBsxAaSubSumFlwsDnyFmSb.')
tmnxBsxAaSubSumHCOctsAdmToSb = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 8, 1, 31), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxAaSubSumHCOctsAdmToSb.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAaSubSumHCOctsAdmToSb.setDescription('The value of tmnxBsxAaSubSumHCOctsAdmToSb indicates the total number of bytes permitted for the network to subscriber direction. This object is a 64-bit version of tmnxBsxAaSubSumOctsAdmToSb.')
tmnxBsxAaSubSumHCPktsAdmToSb = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 8, 1, 32), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxAaSubSumHCPktsAdmToSb.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAaSubSumHCPktsAdmToSb.setDescription('The value of tmnxBsxAaSubSumHCPktsAdmToSb indicates the total number of packets permitted for the network to subscriber direction. This object is a 64-bit version of tmnxBsxAaSubSumPktsAdmToSb.')
tmnxBsxAaSubSumHCFlwsAdmToSb = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 8, 1, 33), Counter64()).setUnits('flows').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxAaSubSumHCFlwsAdmToSb.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAaSubSumHCFlwsAdmToSb.setDescription('The value of tmnxBsxAaSubSumHCFlwsAdmToSb indicates the total number of flows permitted for the network to subscriber direction. This object is a 64-bit version of tmnxBsxAaSubSumFlwsAdmToSb.')
tmnxBsxAaSubSumHCOctsDnyToSb = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 8, 1, 34), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxAaSubSumHCOctsDnyToSb.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAaSubSumHCOctsDnyToSb.setDescription('The value of tmnxBsxAaSubSumHCOctsDnyToSb indicates the total number of bytes dropped for the network to subscriber direction. This object is a 64-bit version of tmnxBsxAaSubSumOctsDnyToSb.')
tmnxBsxAaSubSumHCPktsDnyToSb = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 8, 1, 35), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxAaSubSumHCPktsDnyToSb.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAaSubSumHCPktsDnyToSb.setDescription('The value of tmnxBsxAaSubSumHCPktsDnyToSb indicates the total number of packets dropped for the network to subscriber direction. This object is a 64-bit version of tmnxBsxAaSubSumPktsDnyToSb.')
tmnxBsxAaSubSumHCFlwsDnyToSb = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 8, 1, 36), Counter64()).setUnits('flows').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxAaSubSumHCFlwsDnyToSb.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAaSubSumHCFlwsDnyToSb.setDescription('The value of tmnxBsxAaSubSumHCFlwsDnyToSb indicates the total number of flows that dropped subsequent packets in the network to subscriber direction. This object is the 64-bit version of tmnxBsxAaSubSumFlwsDnyToSb.')
tmnxBsxAaSubSumHCTermFlwDur = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 8, 1, 37), Counter64()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxAaSubSumHCTermFlwDur.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAaSubSumHCTermFlwDur.setDescription('The value of tmnxBsxAaSubSumHCTermFlwDur indicates the sum of all flow durations from first packet seen to last packet seen for flows that have terminated. This object is a 64-bit version of tmnxBsxAaSubSumTermFlwDur.')
tmnxBsxAaSubSumHCTermFlws = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 8, 1, 38), Counter64()).setUnits('flows').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxAaSubSumHCTermFlws.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAaSubSumHCTermFlws.setDescription('The value of tmnxBsxAaSubSumHCTermFlws indicates the total number of allowed flows that have terminated. This object is a 64-bit version of tmnxBsxAaSubSumTermFlws.')
tmnxBsxAaSubSumHCShrtDurFlws = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 8, 1, 39), Counter64()).setUnits('flows').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxAaSubSumHCShrtDurFlws.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAaSubSumHCShrtDurFlws.setDescription('The value of tmnxBsxAaSubSumHCShrtDurFlws indicates the total number of flows with a duration less than or equal to 30 seconds, that have completed. This object is a 64-bit version of tmnxBsxAaSubSumShrtDurFlws.')
tmnxBsxAaSubSumHCMedDurFlws = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 8, 1, 40), Counter64()).setUnits('flows').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxAaSubSumHCMedDurFlws.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAaSubSumHCMedDurFlws.setDescription('The value of tmnxBsxAaSubSumHCMedDurFlws indicates the total number of flows with a duration less than or equal to 180 seconds, but greater than 30 seconds, that have completed. This object is a 64-bit version of tmnxBsxAaSubSumMedDurFlws.')
tmnxBsxAaSubSumHCLngDurFlws = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 8, 1, 41), Counter64()).setUnits('flows').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxAaSubSumHCLngDurFlws.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAaSubSumHCLngDurFlws.setDescription('The value of tmnxBsxAaSubSumHCLngDurFlws indicates the total number of flows with a duration greater than 180 seconds, that have completed. This object is a 64-bit version of tmnxBsxAaSubSumLngDurFlws.')
tmnxBsxAaGrpPartTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 9), )
if mibBuilder.loadTexts: tmnxBsxAaGrpPartTable.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAaGrpPartTable.setDescription('The tmnxBsxAaGrpPartTable contains the Application Assurance partition configuration within an Application Assurance group.')
tmnxBsxAaGrpPartEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 9, 1), ).setIndexNames((0, "TIMETRA-BSX-NG-MIB", "tmnxBsxAaGrpPartIndex"))
if mibBuilder.loadTexts: tmnxBsxAaGrpPartEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAaGrpPartEntry.setDescription('Each tmnxBsxAaGrpPartEntry specifies an Application Assurance partition within an Application Assurance group. ')
tmnxBsxAaGrpPartIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 9, 1, 1), TmnxBsxAaGrpPartIndex())
if mibBuilder.loadTexts: tmnxBsxAaGrpPartIndex.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAaGrpPartIndex.setDescription("The value of tmnxBsxAaGrpPartIndex specifies the partition index within an AA group. The corresponding row for the AA group must have already been created in the tmnxBsxIsaAaGrpTable. Partition index '0' indicates group wide AA policy information, and is automatically created when the AA group is created in the tmnxBsxIsaAaGrpTable.")
tmnxBsxAaGrpPartRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 9, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxAaGrpPartRowStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAaGrpPartRowStatus.setDescription("The value of tmnxBsxAaGrpPartRowStatus specifies the row status. Rows in the tmnxBsxAaGrpPartTable are created by specifying the value of 'createAndGo (4)', and deleted by specifying the value of 'destroy (6)'. Row entries with partition index '0' are created by creating an ISA group in the tmnxBsxIsaAaGrpTable and cannot be deleted directly from this table. Instead the corresponding group should be deleted from the tmnxBsxIsaAaGrpTable.")
tmnxBsxAaGrpPartRowLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 9, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxAaGrpPartRowLastChange.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAaGrpPartRowLastChange.setDescription('The value of tmnxBsxAaGrpPartRowLastChange indicates the last time a successful set was performed on this row of the tmnxBsxAaGrpPartTable.')
tmnxBsxAaGrpPartDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 9, 1, 4), TItemDescription()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxAaGrpPartDescription.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAaGrpPartDescription.setDescription('The value of tmnxBsxAaGrpPartDescription specifies the description of the group or the partition within an AA group.')
tmnxBsxAaGrpPartXOnlineHost = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 9, 1, 5), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxAaGrpPartXOnlineHost.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAaGrpPartXOnlineHost.setDescription('The value of tmnxBsxAaGrpPartXOnlineHost specifies whether X-Online-Host header field is used as a replacement for the HTTP Host header field.')
tmnxBsxAaGrpPartHttpMatchAllReq = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 9, 1, 6), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxAaGrpPartHttpMatchAllReq.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAaGrpPartHttpMatchAllReq.setDescription('The value of tmnxBsxAaGrpPartHttpMatchAllReq specifies whether or not constant monitoring is performed for HTTP request strings for application changes in regular HTTP flows.')
tmnxBsxAaGrpPartAaSubRemote = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 9, 1, 7), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxAaGrpPartAaSubRemote.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAaGrpPartAaSubRemote.setDescription('The value of tmnxBsxAaGrpPartAaSubRemote specifies whether or not the from subscriber and to subscriber traffic direction is reversed for this group-partition.')
tmnxBsxIsaLoadBalUnSubTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 10), )
if mibBuilder.loadTexts: tmnxBsxIsaLoadBalUnSubTable.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxIsaLoadBalUnSubTable.setDescription('The tmnxBsxIsaLoadBalUnSubTable contains an entry for each ISA-AA subscriber that could not be assigned to an ISA-AA MDA after a load balancing operation. Each row contains an unassigned ISA-AA subscriber within an ISA-AA group.')
tmnxBsxIsaLoadBalUnSubEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 10, 1), ).setIndexNames((0, "TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGroupIndex"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubscriberType"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxIsaLoadBalUnSub"))
if mibBuilder.loadTexts: tmnxBsxIsaLoadBalUnSubEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxIsaLoadBalUnSubEntry.setDescription('Each tmnxBsxIsaLoadBalUnSubEntry contains an ISA-AA subscriber which could not be assigned to an ISA-AA MDA within the ISA-AA group.')
tmnxBsxIsaLoadBalUnSub = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 10, 1, 1), TmnxBsxAaSubscriber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxIsaLoadBalUnSub.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxIsaLoadBalUnSub.setDescription('The value of tmnxBsxIsaLoadBalUnSub indicates the ISA-AA subscriber which is not assigned to an ISA-AA MDA. The format of this object is determined by the value of the tmnxBsxAaSubscriberType.')
tmnxBsxIsaLoadBalUnSubTransit = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 10, 1, 2), Gauge32()).setUnits('subscribers').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxIsaLoadBalUnSubTransit.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxIsaLoadBalUnSubTransit.setDescription('The value of tmnxBsxIsaLoadBalUnSubTransit indicates the number of transit subscribers under the parent subscriber tmnxBsxIsaLoadBalUnSub which have not been assigned to an ISA-AA MDA.')
tmnxBsxAaSubTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 11), )
if mibBuilder.loadTexts: tmnxBsxAaSubTable.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAaSubTable.setDescription('The tmnxBsxAaSubTable contains an entry for each ISA-AA subscriber in the system. Each row contains information relevant to an Application Assurance subscriber.')
tmnxBsxAaSubEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 11, 1), ).setIndexNames((0, "TIMETRA-BSX-NG-MIB", "tmnxBsxAaGrpPartIndex"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubscriberType"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubscriber"))
if mibBuilder.loadTexts: tmnxBsxAaSubEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAaSubEntry.setDescription('Each tmnxBsxAaSubEntry contains information relevant to an Application Assurance subscriber including the servicing ISA-AA MDA, application profile, and if policy overrides are present.')
tmnxBsxAaSubMdaSlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 11, 1, 1), TmnxSlotNumOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxAaSubMdaSlotNum.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAaSubMdaSlotNum.setDescription('The value of tmnxBsxAaSubMdaSlotNum indicates the slot number of the ISA-AA MDA assigned to the subscriber.')
tmnxBsxAaSubMdaMdaNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 11, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxAaSubMdaMdaNum.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAaSubMdaMdaNum.setDescription('The value of tmnxBsxAaSubMdaMdaNum indicates the MDA number of the ISA-AA MDA assigned to the subscriber.')
tmnxBsxAaSubAppProfName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 11, 1, 3), TNamedItem()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxAaSubAppProfName.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAaSubAppProfName.setDescription('The value of tmnxBsxAaSubAppProfName indicates the name of the ISA-AA application profile associated with the subscriber.')
tmnxBsxAaSubHasOverrides = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 11, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxAaSubHasOverrides.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAaSubHasOverrides.setDescription('The value of tmnxBsxAaSubHasOverrides indicates if the subscriber has policy overrides.')
tmnxBsxAaSubTransitIpPolicyId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 11, 1, 5), TmnxBsxTransitIpPolicyIdOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxAaSubTransitIpPolicyId.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAaSubTransitIpPolicyId.setDescription("The value of tmnxBsxAaSubTransitIpPolicyId indicates the Transit IP Policy to which this subscriber belongs. The value of '0' indicates that no transit IP policy is associated with this subscriber.")
tmnxBsxAaSubTransPrefPolicyId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 11, 1, 6), TmnxBsxTransPrefPolicyIdOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxAaSubTransPrefPolicyId.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAaSubTransPrefPolicyId.setDescription("The value of tmnxBsxAaSubTransPrefPolicyId indicates the transit prefix policy to which this subscriber belongs. The value of '0' indicates that no transit prefix policy is associated with this subscriber.")
tmnxBsxAaWap1xTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 12), )
if mibBuilder.loadTexts: tmnxBsxAaWap1xTable.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAaWap1xTable.setDescription('The tmnxBsxAaWap1xTable contains configuration information for Application Assurance support of the Wireless Application Protocol (WAP) 1.X on a group-partition basis. The tmnxBsxAaWap1xTable augments the tmnxBsxAaGrpPartTable.')
tmnxBsxAaWap1xEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 12, 1), )
tmnxBsxAaGrpPartEntry.registerAugmentions(("TIMETRA-BSX-NG-MIB", "tmnxBsxAaWap1xEntry"))
tmnxBsxAaWap1xEntry.setIndexNames(*tmnxBsxAaGrpPartEntry.getIndexNames())
if mibBuilder.loadTexts: tmnxBsxAaWap1xEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAaWap1xEntry.setDescription('An entry in the tmnxBsxAaWap1xTable containing the Wireless Application Protocol (WAP) 1.X configuration for a specific AA group-partition.')
tmnxBsxAaWap1xRowLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 12, 1, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxAaWap1xRowLastChange.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAaWap1xRowLastChange.setDescription('The value of tmnxBsxAaWap1xRowLastChange indicates the last time a successful set was performed on this row of the tmnxBsxAaWap1xTable.')
tmnxBsxAaWap1xAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 1, 12, 1, 2), TmnxAdminState().clone('outOfService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxAaWap1xAdminState.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAaWap1xAdminState.setDescription("The value of tmnxBsxAaWap1xAdminState specifies the administrative state of Wireless Application Protocol (WAP) 1.X support for a group-partition. When the value is 'outOfService(3)' AA support for WAP 1.X is disabled. The value of 'inService(2)' can be set only if the corresponding ISA AA group has a tmnxBsxIsaAaGrpAaSubScale equal to 'mobileGateway(2)'.")
tmnxBsxProtTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 1), )
if mibBuilder.loadTexts: tmnxBsxProtTable.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxProtTable.setDescription('The tmnxBsxProtTable contains an entry for each protocol signature pre-configured by the agent. Rows in this table are created by the agent at initialization and cannot be created or destroyed by SNMP Get or Set requests.')
tmnxBsxProtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 1, 1), ).setIndexNames((1, "TIMETRA-BSX-NG-MIB", "tmnxBsxProtName"))
if mibBuilder.loadTexts: tmnxBsxProtEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxProtEntry.setDescription('Each tmnxBsxProtEntry indicates an protocol pre-configured by the agent.')
tmnxBsxProtName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 1, 1, 1), TNamedItem())
if mibBuilder.loadTexts: tmnxBsxProtName.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxProtName.setDescription('The value of tmnxBsxProtName indicates the name defined for the protocol.')
tmnxBsxProtDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 1, 1, 2), TItemDescription()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxProtDescription.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxProtDescription.setDescription('The value of tmnxBsxProtDescription indicates the description of the protocol.')
tmnxBsxProtParentName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 1, 1, 3), TNamedItemOrEmpty()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxProtParentName.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxProtParentName.setDescription('The value of tmnxBsxProtParentName indicates the parent name of the protocol.')
tmnxBsxProtAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 1, 1, 4), TmnxAdminState().clone('outOfService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxProtAdminState.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxProtAdminState.setDescription("The value of tmnxBsxProtAdminState specifies the administrative state of the protocol. When the admin state is set to 'outOfService', the protocol will default to its parent protocol as indicated by tmnxBsxProtParentName.")
tmnxBsxProtObsolete = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 1, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxProtObsolete.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxProtObsolete.setDescription('The value of tmnxBsxProtObsolete indicates whether or not the protocol is obsolete. Obsolete protocols are no longer supported.')
tmnxBsxAppGrpCfgTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 2), )
if mibBuilder.loadTexts: tmnxBsxAppGrpCfgTable.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAppGrpCfgTable.setDescription('The tmnxBsxAppGrpCfgTable contains an entry for each BSX application group.')
tmnxBsxAppGrpCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 2, 1), ).setIndexNames((0, "TIMETRA-BSX-NG-MIB", "tmnxBsxAppGrpPolicyVersion"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxAaGrpPartIndex"), (1, "TIMETRA-BSX-NG-MIB", "tmnxBsxAppGrpName"))
if mibBuilder.loadTexts: tmnxBsxAppGrpCfgEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAppGrpCfgEntry.setDescription('Each tmnxBsxAppGrpCfgEntry indicates an application group configured by the operator.')
tmnxBsxAppGrpPolicyVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 2, 1, 1), TmnxBsxPolicyVersion())
if mibBuilder.loadTexts: tmnxBsxAppGrpPolicyVersion.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAppGrpPolicyVersion.setDescription("The value of tmnxBsxAppGrpPolicyVersion specifies the version of the table being accessed. The table is read-create only for the 'admin' version of the table. The 'oper' version is read-only.")
tmnxBsxAppGrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 2, 1, 2), TNamedItem())
if mibBuilder.loadTexts: tmnxBsxAppGrpName.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAppGrpName.setDescription('The value of tmnxBsxAppGrpName specifies the name defined for the application group.')
tmnxBsxAppGrpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxAppGrpRowStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAppGrpRowStatus.setDescription('The value of tmnxBsxAppGrpRowStatus specifies the row status. It allows entries to be created and deleted in the tmnxBsxAppGrpCfgTable. To delete an entry, all references to this application group in tmnxBsxAqpAppGroup in tmnxBsxAqpTable must be deleted.')
tmnxBsxAppGrpStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 2, 1, 4), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxAppGrpStorageType.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAppGrpStorageType.setDescription("The value of tmnxBsxAppGrpStorageType specifies how the row is stored. Entries with a StorageType of 'read-only(5)' are pre-configured by the agent and cannot be destroyed. All of the objects in a readOnly row (with the exception of tmnxBsxAppGrpChargeGrp) are 'read-only'. All other entries must be created with a StorageType of 'nonVolatile'.")
tmnxBsxAppGrpDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 2, 1, 5), TItemDescription()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxAppGrpDescription.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAppGrpDescription.setDescription('The value of tmnxBsxAppGrpDescription specifies the description of the application group.')
tmnxBsxAppGrpAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 2, 1, 6), TmnxAdminState().clone('outOfService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxAppGrpAdminState.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxBsxAppGrpAdminState.setDescription("The value of tmnxBsxAppGrpAdminState specifies the administrative state for the application group. When 'outOfService', any match entries referring to this application group is skipped. This object was obsoleted in release 10.0.")
tmnxBsxAppGrpChargeGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 2, 1, 7), TNamedItemOrEmpty()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxAppGrpChargeGrp.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAppGrpChargeGrp.setDescription("The value of tmnxBsxAppGrpChargeGrp specifies the name of the charging group to be associated with this application group's traffic.")
tmnxBsxAppCfgTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 3), )
if mibBuilder.loadTexts: tmnxBsxAppCfgTable.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAppCfgTable.setDescription('The tmnxBsxAppCfgTable contains an entry for each BSX application.')
tmnxBsxAppCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 3, 1), ).setIndexNames((0, "TIMETRA-BSX-NG-MIB", "tmnxBsxAppPolicyVersion"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxAaGrpPartIndex"), (1, "TIMETRA-BSX-NG-MIB", "tmnxBsxAppName"))
if mibBuilder.loadTexts: tmnxBsxAppCfgEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAppCfgEntry.setDescription('Each tmnxBsxAppCfgEntry indicates an application configured by the operator.')
tmnxBsxAppPolicyVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 3, 1, 1), TmnxBsxPolicyVersion())
if mibBuilder.loadTexts: tmnxBsxAppPolicyVersion.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAppPolicyVersion.setDescription("The value of tmnxBsxAppPolicyVersion specifies the version of the table being accessed. The table is read-create only for the 'admin' version of the table. The 'oper' version is read-only.")
tmnxBsxAppName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 3, 1, 2), TNamedItem())
if mibBuilder.loadTexts: tmnxBsxAppName.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAppName.setDescription('The value of tmnxBsxAppName specifies the name defined for the application.')
tmnxBsxAppRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 3, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxAppRowStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAppRowStatus.setDescription('The value of tmnxBsxAppRowStatus specifies the row status. It allows entries to be created and deleted in the tmnxBsxAppCfgTable. To delete an entry, all references to this application in tmnxBsxAppFilterApplication in the tmnxBsxAppFilterTable and tmnxBsxAqpApplication in the tmnxBsxAqpTable must be deleted.')
tmnxBsxAppStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 3, 1, 4), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxAppStorageType.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAppStorageType.setDescription("The value of tmnxBsxAppStorageType specifies how the row is stored. Entries with a StorageType of 'read-only(5)' are pre-configured by the agent and cannot be destroyed. All of the objects in a readOnly row (with the exception of tmnxBsxAppChargeGrp) are 'read-only'. All other entries must be created with a StorageType of 'nonVolatile'.")
tmnxBsxAppDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 3, 1, 5), TItemDescription()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxAppDescription.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAppDescription.setDescription('The value of tmnxBsxAppDescription specifies the description of the application.')
tmnxBsxAppAppGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 3, 1, 6), TNamedItem().clone('Unknown')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxAppAppGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAppAppGroup.setDescription("The value of tmnxBsxAppAppGroup specifies the application group to which this application belongs. If an attempt is made to set this object to a string that does not match a tmnxBsxAppGrpName value from the tmnxBsxAppGrpCfgTable, an 'inconsistentValue' error is returned.")
tmnxBsxAppChargeGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 3, 1, 7), TNamedItemOrEmpty()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxAppChargeGrp.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAppChargeGrp.setDescription("The value of tmnxBsxAppChargeGrp specifies the name of the charging group to be associated with this application's traffic.")
tmnxBsxAppFilterTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 4), )
if mibBuilder.loadTexts: tmnxBsxAppFilterTable.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAppFilterTable.setDescription('The tmnxBsxAppFilterTable contains an entry for each set of match criteria defining an application.')
tmnxBsxAppFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 4, 1), ).setIndexNames((0, "TIMETRA-BSX-NG-MIB", "tmnxBsxAppFilterPolicyVersion"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxAaGrpPartIndex"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxAppFilterEntryId"))
if mibBuilder.loadTexts: tmnxBsxAppFilterEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAppFilterEntry.setDescription('Each tmnxBsxAppFilterEntry indicates a set of match criteria defining an application.')
tmnxBsxAppFilterPolicyVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 4, 1, 1), TmnxBsxPolicyVersion())
if mibBuilder.loadTexts: tmnxBsxAppFilterPolicyVersion.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAppFilterPolicyVersion.setDescription("The value of tmnxBsxAppFilterPolicyVersion specifies the version of the table being accessed. The table is read-create only for the 'admin' version of the table. The 'oper' version is read-only.")
tmnxBsxAppFilterEntryId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 4, 1, 2), TEntryId())
if mibBuilder.loadTexts: tmnxBsxAppFilterEntryId.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAppFilterEntryId.setDescription('The value of tmnxBsxAppFilterEntryId specifies the index into the filter list that resolve applications.')
tmnxBsxAppFilterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 4, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxAppFilterRowStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAppFilterRowStatus.setDescription('The value of tmnxBsxAppFilterRowStatus specifies the row status. It allows entries to be created and deleted in the tmnxBsxAppFilterTable.')
tmnxBsxAppFilterDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 4, 1, 4), TItemDescription()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxAppFilterDescription.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAppFilterDescription.setDescription('The value of tmnxBsxAppFilterDescription specifies the description of the application.')
tmnxBsxAppFilterAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 4, 1, 5), TmnxAdminState().clone('outOfService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxAppFilterAdminState.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAppFilterAdminState.setDescription("The value of tmnxBsxAppFilterAdminState specifies the administrative state for the application. When 'outOfService', any match entries referring to this application are skipped.")
tmnxBsxAppFilterProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 4, 1, 6), TNamedItemOrEmpty()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxAppFilterProtocol.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAppFilterProtocol.setDescription("The value of tmnxBsxAppFilterProtocol specifies the particular protocol signature to match against to resolve to tmnxBsxAppFilterApplication. If set to an empty string, no match on protocol is done. If an attempt is made to set this object to a string that does not match a tmnxBsxProtName value from the tmnxBsxProtTable, an 'inconsistentValue' error is returned.")
tmnxBsxAppFilterProtocolOp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 4, 1, 7), TmnxBsxOperator().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxAppFilterProtocolOp.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAppFilterProtocolOp.setDescription('The value of tmnxBsxAppFilterProtocolOp specifies the operator to apply in relation to tmnxBsxAppFilterProtocol to match against to resolve to tmnxBsxAppFilterApplication.')
tmnxBsxAppFilterFlowSetupDir = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 4, 1, 8), TmnxBsxDirection().clone('both')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxAppFilterFlowSetupDir.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAppFilterFlowSetupDir.setDescription('The value of tmnxBsxAppFilterFlowSetupDir specifies the flow setup directions to match against to resolve to tmnxBsxAppFilterApplication. This allows separation of client and server applications.')
tmnxBsxAppFilterIpProtocolNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 4, 1, 9), TIpProtocol().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxAppFilterIpProtocolNum.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAppFilterIpProtocolNum.setDescription("The value of tmnxBsxAppFilterIpProtocolNum specifies the IP protocol number to match to resolve to an application. A value of '-1' specifies that no matching is to be done to resolve an application. A value of '-2' specifies that a match will occur if the protocol is TCP or UDP.")
tmnxBsxAppFilterIpProtocolNumOp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 4, 1, 10), TmnxBsxOperator().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxAppFilterIpProtocolNumOp.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAppFilterIpProtocolNumOp.setDescription('The value of tmnxBsxAppFilterIpProtocolNumOp specifies the operator to apply in relation to tmnxBsxAppFilterIpProtocolNum to match against to resolve to tmnxBsxAppFilterApplication.')
tmnxBsxAppFilterServerAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 4, 1, 11), InetAddressType().clone('unknown')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxAppFilterServerAddrType.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAppFilterServerAddrType.setDescription("The value of tmnxBsxAppFilterServerAddrType specifies the type of address contained in tmnxBsxAppFilterServerAddr. A value of 'unknown' specifies that no matching is to be done to resolve to an application.")
tmnxBsxAppFilterServerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 4, 1, 12), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )).clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxAppFilterServerAddr.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAppFilterServerAddr.setDescription('The value of tmnxBsxAppFilterServerAddr specifies the server address to match to resolve to an application.')
tmnxBsxAppFilterServerAddrLen = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 4, 1, 13), InetAddressPrefixLength()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxAppFilterServerAddrLen.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAppFilterServerAddrLen.setDescription('The value of tmnxBsxAppFilterServerAddrLen specifies the number of relevant bits of the tmnxBsxAppFilterServerAddr.')
tmnxBsxAppFilterServerAddrOp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 4, 1, 14), TmnxBsxOperator().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxAppFilterServerAddrOp.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAppFilterServerAddrOp.setDescription('The value of tmnxBsxAppFilterServerAddrOp specifies the operator to apply in relation to tmnxBsxAppFilterServerAddrType, tmnxBsxAppFilterServerAddr, and tmnxBsxAppFilterServerAddrLen to match against to resolve to an application.')
tmnxBsxAppFilterServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 4, 1, 15), TTcpUdpPort()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxAppFilterServerPort.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxBsxAppFilterServerPort.setDescription("The value of tmnxBsxAppFilterServerPort specifies the server TCP or UDP port number to match to resolve to an application. This only applies if the tmnxBsxAppFilterIpProtocolNum is set to TCP, UDP or '-2' (implying either). This object was obsoleted in release 8.0 and replaced with the tmnxBsxAppFilterServerPortLow and tmnxBsxAppFilterServerPortHigh objects.")
tmnxBsxAppFilterServerPortOp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 4, 1, 16), TmnxBsxOperator().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxAppFilterServerPortOp.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAppFilterServerPortOp.setDescription('The value of tmnxBsxAppFilterServerPortOp specifies the operator to apply in relation to tmnxBsxAppFilterServerPort to match against to resolve to an application.')
tmnxBsxAppFilterServerPortFpp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 4, 1, 17), TmnxBsxFirstPacketPolicy().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxAppFilterServerPortFpp.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAppFilterServerPortFpp.setDescription('The value of tmnxBsxAppFilterServerPortFpp specifies the packet policy to apply for flows that match the tmnxBsxAppFilterServerPort and tmnxBsxAppFilterServerPortOp. A value of none(0) specifies that no packet policy is applied. A value of first-packet-trusted(1) specifies that flows resolve to an application when the first packet for the flow is received. ISA-AA analysis is not performed on the flow. A value of first-packet-validate(2) specifies that flows resolve to an application when the first packet for the flow is received. ISA-AA analysis is performed on the flow and the application re-determined once the protocol has been identified.')
tmnxBsxAppFilterServerPortLow = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 4, 1, 18), TTcpUdpPort()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxAppFilterServerPortLow.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAppFilterServerPortLow.setDescription("The value of tmnxBsxAppFilterServerPortLow specifies the low server TCP or UDP port number to match to resolve to an application. tmnxBsxAppFilterServerPortLow must be less than or equal to tmnxBsxAppFilterServerPortHigh, and is used when the tmnxBsxAppFilterServerPortOp is not 'none (0)'.")
tmnxBsxAppFilterServerPortHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 4, 1, 19), TTcpUdpPort()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxAppFilterServerPortHigh.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAppFilterServerPortHigh.setDescription("The value of tmnxBsxAppFilterServerPortHigh specifies the high server TCP or UDP port number to match to resolve to an application. tmnxBsxAppFilterServerPortHigh must be greater than or equal to tmnxBsxAppFilterServerPortLow, and is used when the tmnxBsxAppFilterServerPortOp is not 'none (0)'.")
tmnxBsxAppFilterApplication = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 4, 1, 99), TNamedItem().clone('Unknown')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxAppFilterApplication.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAppFilterApplication.setDescription("The value of tmnxBsxAppFilterApplication specifies the result of filtering on all other rows of this table. If an attempt is made to set this object to a string that does not match a tmnxBsxAppName value from the tmnxBsxAppCfgTable, an 'inconsistentValue' error is returned.")
tmnxBsxAsoTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 5), )
if mibBuilder.loadTexts: tmnxBsxAsoTable.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAsoTable.setDescription('The tmnxBsxAsoTable contains an entry for each subscriber selectable characteristic / option used to differentiate services between subscribers.')
tmnxBsxAsoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 5, 1), ).setIndexNames((0, "TIMETRA-BSX-NG-MIB", "tmnxBsxAsoPolicyVersion"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxAaGrpPartIndex"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxAsoCharName"))
if mibBuilder.loadTexts: tmnxBsxAsoEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAsoEntry.setDescription('Each tmnxBsxAsoEntry specifies a subscriber selectable option.')
tmnxBsxAsoPolicyVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 5, 1, 1), TmnxBsxPolicyVersion())
if mibBuilder.loadTexts: tmnxBsxAsoPolicyVersion.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAsoPolicyVersion.setDescription("The value of tmnxBsxAsoPolicyVersion specifies the version of the table being accessed. The table is read-create only for the 'admin' version of the table. The 'oper' version is read-only.")
tmnxBsxAsoCharName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 5, 1, 2), TNamedItem())
if mibBuilder.loadTexts: tmnxBsxAsoCharName.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAsoCharName.setDescription('The value of tmnxBsxAsoCharName specifies the name of a characteristic that is selectable by a subscriber.')
tmnxBsxAsoRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 5, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxAsoRowStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAsoRowStatus.setDescription('The value of tmnxBsxAsoRowStatus specifies the row status. It allows entries to be created and deleted in the tmnxBsxAsoTable. To delete an entry, all references to this characteristic in tmnxBsxAppProfCharCharName in the tmnxBsxAppProfTable and the tmnxBsxAqpCharTable must be deleted.')
tmnxBsxAsoDefValName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 5, 1, 4), TNamedItemOrEmpty()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxAsoDefValName.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAsoDefValName.setDescription('The value of tmnxBsxAsoDefValName specifies the default value for a characteristic that is not specified in the tmnxBsxAppProfCharTable. This value must not exist within the tmnxBsxAsoValTable for corresponding entries of tmnxBsxAsoValCharName equal to tmnxBsxAsoCharName.')
tmnxBsxAsoValTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 6), )
if mibBuilder.loadTexts: tmnxBsxAsoValTable.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAsoValTable.setDescription('The tmnxBsxAsoValTable contains an entry for each value of each subscriber selectable characteristic used to differentiate services between subscribers.')
tmnxBsxAsoValEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 6, 1), ).setIndexNames((0, "TIMETRA-BSX-NG-MIB", "tmnxBsxAsoValPolicyVersion"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxAaGrpPartIndex"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxAsoValCharName"), (1, "TIMETRA-BSX-NG-MIB", "tmnxBsxAsoValValName"))
if mibBuilder.loadTexts: tmnxBsxAsoValEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAsoValEntry.setDescription('Each tmnxBsxAsoValEntry specifies a value for a subscriber selectable option.')
tmnxBsxAsoValPolicyVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 6, 1, 1), TmnxBsxPolicyVersion())
if mibBuilder.loadTexts: tmnxBsxAsoValPolicyVersion.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAsoValPolicyVersion.setDescription("The value of tmnxBsxAsoValPolicyVersion specifies the version of the table being accessed. The table is read-create only for the 'admin' version of the table. The 'oper' version is read-only.")
tmnxBsxAsoValCharName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 6, 1, 2), TNamedItem())
if mibBuilder.loadTexts: tmnxBsxAsoValCharName.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAsoValCharName.setDescription('The value of tmnxBsxAsoValCharName specifies the name of a characteristic that is selectable by a subscriber.')
tmnxBsxAsoValValName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 6, 1, 3), TNamedItem())
if mibBuilder.loadTexts: tmnxBsxAsoValValName.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAsoValValName.setDescription('The value of tmnxBsxAsoValValName specifies a particular value for a characteristic that is selectable by a subscriber. This value must not exist within the tmnxBsxAsoDefValName for corresponding entries of tmnxBsxAsoCharName equal to tmnxBsxAsoValCharName.')
tmnxBsxAsoValRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 6, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxAsoValRowStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAsoValRowStatus.setDescription('The value of tmnxBsxAsoValRowStatus specifies the row status. It allows entries to be created and deleted in the tmnxBsxAsoValTable. To delete an entry, all references to this value in tmnxBsxAppProfCharValName in the tmnxBsxAppProfCharTable and the tmnxBsxAqpCharTable must be deleted.')
tmnxBsxAppProfTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 7), )
if mibBuilder.loadTexts: tmnxBsxAppProfTable.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAppProfTable.setDescription('The tmnxBsxAppProfTable contains an entry for each application profile. App profiles are assigned to subscribers and contain characteristics used to select subscriber specific policy.')
tmnxBsxAppProfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 7, 1), ).setIndexNames((0, "TIMETRA-BSX-NG-MIB", "tmnxBsxAppPolicyVersion"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxAaGrpPartIndex"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxAppProfName"))
if mibBuilder.loadTexts: tmnxBsxAppProfEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAppProfEntry.setDescription('Each tmnxBsxAppProfEntry specifies an application profile configured by the operator.')
tmnxBsxAppProfName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 7, 1, 1), TNamedItem())
if mibBuilder.loadTexts: tmnxBsxAppProfName.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAppProfName.setDescription('The value of tmnxBsxAppProfName specifies the name defined for the application profile.')
tmnxBsxAppProfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 7, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxAppProfRowStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAppProfRowStatus.setDescription('The value of tmnxBsxAppProfRowStatus specifies the row status. It allows entries to be created and deleted in the tmnxBsxAppProfTable. To delete an entry, all references to this profile by TIMETRA-SUBSCRIBER-MGMT-MIB::tmnxSubExplicitMapAppProfile in the TIMETRA-SUBSCRIBER-MGMT-MIB::tmnxSubExplicitMapTable or by TIMETRA-SUBSCRIBER-MGMT-MIB::tmnxSubHostInfoV2AppProfile in the TIMETRA-SUBSCRIBER-MGMT-MIB::tmnxSubHostInfoV2Table or by TIMETRA-SAP-MIB::sapIsaAaApplicationProfile in the TIMETRA-SAP-MIB::sapBaseInfoTable or by TIMETRA-SDP-MIB::sdpBindIsaAaApplicationProfile in the TIMETRA-SDP-MIB::sdpBindTable or by TIMETRA-BSX-NG-MIB::tmnxBsxTransitIpPolicyDefAppProf in the TIMETRA-BSX-NG-MIB::tmnxBsxTransitIpPolicyTable or by TIMETRA-BSX-NG-MIB::tmnxBsxTransIpPlcySubAppProfNm in the TIMETRA-BSX-NG-MIB::tmnxBsxTransitIpPolicySubTable or by TIMETRA-BSX-NG-MIB::tmnxBsxTransPrefSubAppProfNm in the TIMETRA-BSX-NG-MIB::tmnxBsxTransPrefSubTable must be deleted. Note that dynamic subscribers may still reference application profiles which have been deleted or were never created. These subscribers will remain operationally down when in this state.')
tmnxBsxAppProfDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 7, 1, 3), TItemDescription()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxAppProfDescription.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAppProfDescription.setDescription('The value of tmnxBsxAppProfDescription specifies the description of the application profile.')
tmnxBsxAppProfDivert = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 7, 1, 4), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxAppProfDivert.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAppProfDivert.setDescription('The value of tmnxBsxAppProfDivert specifies whether to divert traffic to the AEM for subscribers using this application profile.')
tmnxBsxAppProfCapacityCost = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 7, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxAppProfCapacityCost.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAppProfCapacityCost.setDescription('The value of tmnxBsxAppProfCapacityCost specifies the capacity cost for this application profile.')
tmnxBsxAppProfCharTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 8), )
if mibBuilder.loadTexts: tmnxBsxAppProfCharTable.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAppProfCharTable.setDescription('The tmnxBsxAppProfCharTable contains an entry for each application profile characteristic. App profile characteristics are referenced by application qos policy to define specific policies for subscribers using this application profile.')
tmnxBsxAppProfCharEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 8, 1), ).setIndexNames((0, "TIMETRA-BSX-NG-MIB", "tmnxBsxAppProfCharPolicyVersion"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxAaGrpPartIndex"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxAppProfCharProfName"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxAppProfCharCharName"))
if mibBuilder.loadTexts: tmnxBsxAppProfCharEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAppProfCharEntry.setDescription('Each tmnxBsxAppProfCharEntry specifies an application profile characteristic configured by the operator.')
tmnxBsxAppProfCharPolicyVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 8, 1, 1), TmnxBsxPolicyVersion())
if mibBuilder.loadTexts: tmnxBsxAppProfCharPolicyVersion.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAppProfCharPolicyVersion.setDescription("The value of tmnxBsxAppProfCharPolicyVersion specifies the version of the table being accessed. The table is read-create only for the 'admin' version of the table. The 'oper' version is read-only.")
tmnxBsxAppProfCharProfName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 8, 1, 2), TNamedItem())
if mibBuilder.loadTexts: tmnxBsxAppProfCharProfName.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAppProfCharProfName.setDescription('The value of tmnxBsxAppProfCharProfName specifies the name defined for the application profile.')
tmnxBsxAppProfCharCharName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 8, 1, 3), TNamedItem())
if mibBuilder.loadTexts: tmnxBsxAppProfCharCharName.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAppProfCharCharName.setDescription('The value of tmnxBsxAppProfCharCharName specifies the name defined for the application profile characteristic.')
tmnxBsxAppProfCharRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 8, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxAppProfCharRowStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAppProfCharRowStatus.setDescription('The value of tmnxBsxAppProfCharRowStatus specifies the row status. It allows entries to be created and deleted in the tmnxBsxAppProfCharTable. There are no restrictions on deleting entries in this table.')
tmnxBsxAppProfCharValName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 8, 1, 5), TNamedItem()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxAppProfCharValName.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAppProfCharValName.setDescription('The value of tmnxBsxAppProfCharValName specifies the name defined for the application profile characteristic.')
tmnxBsxAqpTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 9), )
if mibBuilder.loadTexts: tmnxBsxAqpTable.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAqpTable.setDescription('The tmnxBsxAqpTable contains the application qos policy which is a set of entries containing match criteria defining actions to be taken within the AEM MDA.')
tmnxBsxAqpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 9, 1), ).setIndexNames((0, "TIMETRA-BSX-NG-MIB", "tmnxBsxAqpPolicyVersion"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxAaGrpPartIndex"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxAqpEntryId"))
if mibBuilder.loadTexts: tmnxBsxAqpEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAqpEntry.setDescription('Each tmnxBsxAqpEntry indicates a set of match criteria and corresponding actions to take.')
tmnxBsxAqpPolicyVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 9, 1, 1), TmnxBsxPolicyVersion())
if mibBuilder.loadTexts: tmnxBsxAqpPolicyVersion.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAqpPolicyVersion.setDescription("The value of tmnxBsxAqpPolicyVersion specifies the version of the table being accessed. The table is read-create only for the 'admin' version of the table. The 'oper' version is read-only.")
tmnxBsxAqpEntryId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 9, 1, 2), TEntryId())
if mibBuilder.loadTexts: tmnxBsxAqpEntryId.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAqpEntryId.setDescription('The value of tmnxBsxAqpEntryId specifies the index into the filter list that resolve applications.')
tmnxBsxAqpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 9, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxAqpRowStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAqpRowStatus.setDescription('The value of tmnxBsxAqpRowStatus specifies the row status. It allows entries to be created and deleted in the tmnxBsxAqpTable.')
tmnxBsxAqpDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 9, 1, 4), TItemDescription()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxAqpDescription.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAqpDescription.setDescription('The value of tmnxBsxAqpDescription specifies the description of the application.')
tmnxBsxAqpAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 9, 1, 5), TmnxAdminState().clone('outOfService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxAqpAdminState.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAqpAdminState.setDescription("The value of tmnxBsxAqpAdminState specifies the administrative state for the application. When 'outOfService', any match entries referring to this application are skipped.")
tmnxBsxAqpApplication = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 9, 1, 6), TNamedItemOrEmpty()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxAqpApplication.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAqpApplication.setDescription("The value of tmnxBsxAqpApplication specifies the particular application to match against to resolve to an AQP action. If set to an empty string, no match on application is done. If an attempt is made to set this object to a string that does not match a tmnxBsxAppName value from the tmnxBsxAppCfgTable, an 'inconsistentValue' error is returned.")
tmnxBsxAqpApplicationOp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 9, 1, 7), TmnxBsxOperator().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxAqpApplicationOp.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAqpApplicationOp.setDescription('The value of tmnxBsxAqpApplicationOp specifies the operator to apply in relation to tmnxBsxAqpApplication to match against to resolve an AQP action.')
tmnxBsxAqpAppGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 9, 1, 8), TNamedItemOrEmpty()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxAqpAppGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAqpAppGroup.setDescription("The value of tmnxBsxAqpAppGroup specifies the particular application group to match against to resolve to an AQP action. If set to an empty string, no match on application group is done. If an attempt is made to set this object to a string that does not match a tmnxBsxAppGrpName value from the tmnxBsxAppGrpCfgTable, an 'inconsistentValue' error is returned.")
tmnxBsxAqpAppGroupOp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 9, 1, 9), TmnxBsxOperator().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxAqpAppGroupOp.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAqpAppGroupOp.setDescription('The value of tmnxBsxAqpAppGroupOp specifies the operator to apply in relation to tmnxBsxAqpAppGroup to match against to resolve an AQP action.')
tmnxBsxAqpTrafficDir = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 9, 1, 10), TmnxBsxDirection().clone('both')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxAqpTrafficDir.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAqpTrafficDir.setDescription('The value of tmnxBsxAqpTrafficDir specifies the traffic directions to match against to resolve to an AQP action. This allows different policer bandwidths to apply in each direction.')
tmnxBsxAqpSubscriber = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 9, 1, 11), TNamedItemOrEmpty()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxAqpSubscriber.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxBsxAqpSubscriber.setDescription('The value of tmnxBsxAqpSubscriber specifies the particular subscriber to match against to resolve to an AQP action. If the value does not exist in TIMETRA-SUBSCRIBER-MGMT-MIB::tmnxSubInfoSubIdent in the tmnxSubscriberInfoTable, no error is returned. Instead, no match will be done on the subscriber until the entry is populated. If set to an empty string, no match on subscriber is done. This object was obsoleted in R9.0 and replaced with the tmnxBsxAqpAaSubscriber object.')
tmnxBsxAqpSubscriberOp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 9, 1, 12), TmnxBsxOperator().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxAqpSubscriberOp.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxBsxAqpSubscriberOp.setDescription('The value of tmnxBsxAqpSubscriberOp specifies the operator to apply in relation to tmnxBsxAqpSubscriber to match against to resolve an AQP action. This object was obsoleted in R9.0 and replaced with the tmnxBsxAqpAaSubscriberOp object.')
tmnxBsxAqpDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 9, 1, 13), TDSCPNameOrEmpty()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxAqpDscp.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAqpDscp.setDescription('The value of tmnxBsxAqpDscp specifies the DSCP name to match to resolve to an AQP action. An empty string will allow all DHCP values to match.')
tmnxBsxAqpDscpOp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 9, 1, 14), TmnxBsxOperator().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxAqpDscpOp.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAqpDscpOp.setDescription('The value of tmnxBsxAqpDscpOp specifies the operator to apply in relation to tmnxBsxAqpDscp to match against to resolve an AQP action.')
tmnxBsxAqpSapSubscrPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 9, 1, 15), TmnxPortID()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxAqpSapSubscrPortId.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxBsxAqpSapSubscrPortId.setDescription('The value of tmnxBsxAqpSapSubscrPortId along with tmnxBsxAqpSapSubscrEncapValue specifies a Service Access Point (SAP) subscriber. A SAP subscriber matching this criteria is used to resolve to an AQP action. This object was obsoleted in R9.0 and replaced with the tmnxBsxAqpAaSubscriber object.')
tmnxBsxAqpSapSubscrEncapValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 9, 1, 16), TmnxEncapVal()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxAqpSapSubscrEncapValue.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxBsxAqpSapSubscrEncapValue.setDescription('The value of tmnxBsxAqpSapSubscrPortId along with tmnxBsxAqpSapSubscrEncapValue specifies a Service Access Point (SAP) subscriber. A SAP subscriber matching this criteria is used to resolve to an AQP action. This object was obsoleted in R9.0 and replaced with the tmnxBsxAqpAaSubscriber object.')
tmnxBsxAqpSapSubscrOp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 9, 1, 17), TmnxBsxOperator().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxAqpSapSubscrOp.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxBsxAqpSapSubscrOp.setDescription('The value of tmnxBsxAqpSapSubscrOp specifies, along with the Service Access Point (SAP) indicated by tmnxBsxAqpSapSubscrPortId and tmnxBsxAqpSapSubscrEncapValue, the operator to match against to resolve to an AQP action. This object was obsoleted in R9.0 and replaced with the tmnxBsxAqpAaSubscriberOp object.')
tmnxBsxAqpSrcAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 9, 1, 18), InetAddressType().clone('unknown')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxAqpSrcAddressType.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAqpSrcAddressType.setDescription("The value of tmnxBsxAqpSrcAddressType specifies the type of address contained in tmnxBsxAqpSrcAddress. A value of 'unknown (0)' specifies that no matching is to be done to resolve to an AQP action.")
tmnxBsxAqpSrcAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 9, 1, 19), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )).clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxAqpSrcAddress.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAqpSrcAddress.setDescription('The value of tmnxBsxAqpSrcAddress specifies the source address to match to resolve to an AQP action.')
tmnxBsxAqpSrcAddressLength = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 9, 1, 20), InetAddressPrefixLength()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxAqpSrcAddressLength.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAqpSrcAddressLength.setDescription('The value of tmnxBsxAqpSrcAddressLength specifies the number of relevant bits of the tmnxBsxAqpSrcAddress.')
tmnxBsxAqpSrcAddressOp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 9, 1, 21), TmnxBsxOperator().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxAqpSrcAddressOp.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAqpSrcAddressOp.setDescription('The value of tmnxBsxAqpSrcAddressOp specifies the operator to apply in relation to tmnxBsxAqpSrcAddressType, tmnxBsxAqpSrcAddress, and tmnxBsxAqpSrcAddressLength to match against to resolve to an AQP action.')
tmnxBsxAqpSrcPortOp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 9, 1, 22), TmnxBsxOperator().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxAqpSrcPortOp.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAqpSrcPortOp.setDescription("The value of tmnxBsxAqpSrcPortOp specifies the operator to apply in relation to the tmnxBsxAqpSrcPortLowValue and tmnxBsxAqpSrcPortHighValue objects. A value of 'none (0)' indicates that no match is done on the tmnxBsxAqpSrcPortLowValue and tmnxBsxAqpSrcPortHighValue objects.")
tmnxBsxAqpSrcPortLowValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 9, 1, 23), TTcpUdpPort()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxAqpSrcPortLowValue.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAqpSrcPortLowValue.setDescription("The value of tmnxBsxAqpSrcPortLowValue specifies the low source TCP or UDP port number to match to resolve to an AQP action. tmnxBsxAqpSrcPortLowValue must be less than or equal to tmnxBsxAqpSrcPortHighValue, and is used when the tmnxBsxAqpSrcPortOp is not 'none (0)'.")
tmnxBsxAqpSrcPortHighValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 9, 1, 24), TTcpUdpPort()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxAqpSrcPortHighValue.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAqpSrcPortHighValue.setDescription("The value of tmnxBsxAqpSrcPortHighValue specifies the high source TCP or UDP port number to match to resolve to an AQP action. tmnxBsxAqpSrcPortHighValue must be greater than or equal to tmnxBsxAqpSrcPortLowValue, and is used when the tmnxBsxAqpSrcPortOp is not 'none (0)'.")
tmnxBsxAqpDstAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 9, 1, 25), InetAddressType().clone('unknown')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxAqpDstAddressType.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAqpDstAddressType.setDescription("The value of tmnxBsxAqpDstAddressType specifies the type of address contained in tmnxBsxAqpDstAddress. A value of 'unknown (0)' specifies that no matching is to be done to resolve to an AQP action.")
tmnxBsxAqpDstAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 9, 1, 26), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )).clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxAqpDstAddress.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAqpDstAddress.setDescription('The value of tmnxBsxAqpDstAddress specifies the destination address to match to resolve to an AQP action.')
tmnxBsxAqpDstAddressLength = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 9, 1, 27), InetAddressPrefixLength()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxAqpDstAddressLength.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAqpDstAddressLength.setDescription('The value of tmnxBsxAqpDstAddressLength specifies the number of relevant bits of the tmnxBsxAqpDstAddress.')
tmnxBsxAqpDstAddressOp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 9, 1, 28), TmnxBsxOperator().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxAqpDstAddressOp.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAqpDstAddressOp.setDescription('The value of tmnxBsxAqpDstAddressOp specifies the operator to apply in relation to tmnxBsxAqpDstAddressType, tmnxBsxAqpDstAddress, and tmnxBsxAqpDstAddressLength to match against to resolve to an AQP action.')
tmnxBsxAqpDstPortOp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 9, 1, 29), TmnxBsxOperator().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxAqpDstPortOp.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAqpDstPortOp.setDescription("The value of tmnxBsxAqpDstPortOp specifies the operator to apply in relation to the tmnxBsxAqpDstPortLowValue and tmnxBsxAqpDstPortHighValue objects. A value of 'none (0)' indicates that no match is done on the tmnxBsxAqpDstPortLowValue and tmnxBsxAqpDstPortHighValue objects.")
tmnxBsxAqpDstPortLowValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 9, 1, 30), TTcpUdpPort()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxAqpDstPortLowValue.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAqpDstPortLowValue.setDescription("The value of tmnxBsxAqpDstPortLowValue specifies the low destination TCP or UDP port number to match to resolve to an AQP action. tmnxBsxAqpDstPortLowValue must be less than or equal to tmnxBsxAqpDstPortHighValue, and is used when the tmnxBsxAqpDstPortOp is not 'none (0)'.")
tmnxBsxAqpDstPortHighValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 9, 1, 31), TTcpUdpPort()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxAqpDstPortHighValue.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAqpDstPortHighValue.setDescription("The value of tmnxBsxAqpDstPortHighValue specifies the high destination TCP or UDP port number to match to resolve to an AQP action. tmnxBsxAqpDstPortHighValue must be greater than or equal to tmnxBsxAqpDstPortLowValue, and is used when the tmnxBsxAqpDstPortOp is not 'none (0)'.")
tmnxBsxAqpSpokeSdpSubscr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 9, 1, 32), SdpBindId().clone(hexValue="0")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxAqpSpokeSdpSubscr.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxBsxAqpSpokeSdpSubscr.setDescription('The value of tmnxBsxAqpSpokeSdpSubscr specifies a Spoke SDP subscriber to match against to resolve to an AQP action. This object was obsoleted in R9.0 and replaced with the tmnxBsxAqpAaSubscriber object.')
tmnxBsxAqpSpokeSdpSubscrOp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 9, 1, 33), TmnxBsxOperator().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxAqpSpokeSdpSubscrOp.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxBsxAqpSpokeSdpSubscrOp.setDescription('The value of tmnxBsxAqpSpokeSdpSubscrOp specifies the operator to apply in relation to tmnxBsxAqpSpokeSdpSubscr to match against to resolve an AQP action. This object was obsoleted in R9.0 and replaced with the tmnxBsxAqpAaSubscriberOp object.')
tmnxBsxAqpAaSubscriberType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 9, 1, 34), TmnxBsxAaSubscriberType().clone('unknown')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxAqpAaSubscriberType.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAqpAaSubscriberType.setDescription("The value of tmnxBsxAqpAaSubscriberType specifies the type of subscriber identified by tmnxBsxAqpAaSubscriber. The values of tmnxBsxAqpAaSubscriberType and tmnxBsxAqpAaSubscriber must be set together in a single SNMP multi-variable SetRequest-PDU. If set to 'unknown(0)', no match on a subscriber is done.")
tmnxBsxAqpAaSubscriber = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 9, 1, 35), TmnxBsxAaSubscriber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxAqpAaSubscriber.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAqpAaSubscriber.setDescription('The value of tmnxBsxAqpAaSubscriber specifies the subscriber of type tmnxBsxAqpAaSubscriberType to match against to resolve to an AQP action. The values of tmnxBsxAqpAaSubscriberType and tmnxBsxAqpAaSubscriber must be set together in a single SNMP multi-variable SetRequest-PDU. If set to an empty string, no match on a subscriber is done.')
tmnxBsxAqpAaSubscriberOp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 9, 1, 36), TmnxBsxOperator().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxAqpAaSubscriberOp.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAqpAaSubscriberOp.setDescription("The value of tmnxBsxAqpAaSubscriberOp specifies the operator to apply in relation to tmnxBsxAqpAaSubscriber to match against to resolve an AQP action. If set to 'none(0)', no match on a subscriber is done.")
tmnxBsxAqpDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 9, 1, 50), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxAqpDrop.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAqpDrop.setDescription('The value of tmnxBsxAqpDrop specifies that flows matching this policy are to be dropped.')
tmnxBsxAqpBwLimitPolicer = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 9, 1, 51), TNamedItemOrEmpty()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxAqpBwLimitPolicer.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAqpBwLimitPolicer.setDescription("The value of tmnxBsxAqpBwLimitPolicer specifies flows matching this policy are to be policed using the template defined in tmnxBsxPolicerTable. If more than one AQP entry refers to the same policer, the same policer instances will be used. If an attempt is made to set this object to a string that does not match a tmnxBsxPolicerName value from the tmnxBsxPolicerTable, an 'inconsistentValue' error is returned.")
tmnxBsxAqpFlowRatePolicer = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 9, 1, 52), TNamedItemOrEmpty()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxAqpFlowRatePolicer.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAqpFlowRatePolicer.setDescription("The value of tmnxBsxAqpFlowRatePolicer specifies flows matching this policy are to be policed using the template defined in tmnxBsxPolicerTable. If more than one AQP entry refers to the same policer, the same policer instances will be used. If an attempt is made to set this object to a string that does not match a tmnxBsxPolicerName value from the tmnxBsxPolicerTable, an 'inconsistentValue' error is returned.")
tmnxBsxAqpFlowCountPolicer = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 9, 1, 53), TNamedItemOrEmpty()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxAqpFlowCountPolicer.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAqpFlowCountPolicer.setDescription("The value of tmnxBsxAqpFlowCountPolicer specifies flows matching this policy are to be limited using the template defined in tmnxBsxPolicerTable. If more than one AQP entry refers to the same policer, the same policer instances will be used. If an attempt is made to set this object to a string that does not match a tmnxBsxPolicerName value from the tmnxBsxPolicerTable, an 'inconsistentValue' error is returned.")
tmnxBsxAqpRemarkFc = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 9, 1, 54), TFCNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxAqpRemarkFc.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAqpRemarkFc.setDescription("The value of tmnxBsxAqpRemarkFc specifies the name of the forwarding class to use to remark flows that match this policy. An empty string value, ''H, specifies no modification to the forwarding class.")
tmnxBsxAqpRemarkPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 9, 1, 55), TPriorityOrDefault().clone('default')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxAqpRemarkPriority.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAqpRemarkPriority.setDescription("The value of tmnxBsxAqpRemarkPriority specifies the priority to use to remark flows that match this policy. A value of 'default' specifies no modification to the priority.")
tmnxBsxAqpRemarkDscpInProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 9, 1, 56), TDSCPNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxAqpRemarkDscpInProfile.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAqpRemarkDscpInProfile.setDescription("The value of tmnxBsxAqpRemarkDscpInProfile specifies the DSCP name to use to remark in-profile flows that match this policy. An empty string value, ''H, specifies no modification to the DSCP value.")
tmnxBsxAqpRemarkDscpOutProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 9, 1, 57), TDSCPNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxAqpRemarkDscpOutProfile.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAqpRemarkDscpOutProfile.setDescription("The value of tmnxBsxAqpRemarkDscpOutProfile specifies the DSCP name to use to remark out-of-profile flows that match this policy. An empty string value, ''H, specifies no modification to the DSCP value.")
tmnxBsxAqpMirrorSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 9, 1, 58), TmnxServId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxAqpMirrorSource.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAqpMirrorSource.setDescription('The value of tmnxBsxAqpMirrorSource specifies the mirror source service id, as defined in the TIMETRA-MIRROR-MIB, to use for flows that match this policy. A value of 0 specifies no mirror is set.')
tmnxBsxAqpMirrorSourceAllIncl = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 9, 1, 59), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxAqpMirrorSourceAllIncl.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAqpMirrorSourceAllIncl.setDescription('The value of tmnxBsxAqpMirrorSourceAllIncl specifies that all flows matching the subscriber default policy will be mirrored until the protocol is identified. The tmnxBsxAqpMirrorSource must be set to a valid mirror.')
tmnxBsxAqpHttpErrRedirName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 9, 1, 60), TNamedItemOrEmpty()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxAqpHttpErrRedirName.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAqpHttpErrRedirName.setDescription('The value of tmnxBsxAqpHttpErrRedirName specifies the HTTP error redirect that will be applied as defined in the tmnxBsxHttpRedirErrTable. An empty value specifies no HTTP error redirect.')
tmnxBsxAqpHttpRedirName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 9, 1, 61), TNamedItemOrEmpty()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxAqpHttpRedirName.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAqpHttpRedirName.setDescription("The value of tmnxBsxAqpHttpRedirName specifies the HTTP redirect that will be applied as defined in the tmnxBsxHttpRedirTable. An empty value specifies no HTTP redirect. A tmnxBsxAqpHttpRedirFlowType must have a value other than 'none(0)' if tmnxBsxAqpHttpRedirName is not an empty string.")
tmnxBsxAqpHttpRedirFlowType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 9, 1, 62), TmnxBsxAqpHttpRedirFlowType().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxAqpHttpRedirFlowType.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAqpHttpRedirFlowType.setDescription("The value of tmnxBsxAqpHttpRedirFlowType specifies the type of flow that will be redirected. A tmnxBsxAqpHttpRedirName must be specified if tmnxBsxAqpHttpRedirFlowType has a value other than 'none(0)'.")
tmnxBsxAqpHttpEnrichName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 9, 1, 63), TNamedItemOrEmpty()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxAqpHttpEnrichName.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAqpHttpEnrichName.setDescription('The value of tmnxBsxAqpHttpEnrichName specifies the HTTP header enrichment template that will be applied as defined in the tmnxBsxHttpEnrichTable. An empty value specifies no HTTP header enrichment template.')
tmnxBsxAdminControl = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 10))
tmnxBsxAdminOwner = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 10, 1), TNamedItemOrEmpty()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxBsxAdminOwner.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxBsxAdminOwner.setDescription('The value of tmnxBsxAdminOwner specifies who has last initialized the configuration tables, who is making all the changes, and who is expected to either commit or re-initialize (abort) the transaction. tmnxBsxAdminOwner is advisory only. Before beginning a transaction, read tmnxBsxAdminOwner. If it is empty then proceed with the configuration. Set tmnxBsxAdminOwner after setting tmnxBsxAdminControlApply so that other users will be advised to not make changes to the tables. The agent automatically sets tmnxBsxAdminOwner to an empty string after tmnxBsxAdminControlApply is set, either by the user re-initializing or committing, or by the agent timing out the uncommitted transaction. This object was obsoleted in release 8.0 and replaced with the tmnxBsxAdminCtrlConfigOwner in the tmnxBsxAdminCtrlTable.')
tmnxBsxAdminControlApply = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 10, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("initialize", 2), ("commit", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxBsxAdminControlApply.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxBsxAdminControlApply.setDescription("The value of tmnxBsxAdminControlApply specifies the copying of tmnxBsxPolicyObjs tables from one instance of policy version to another. This object reads as none(1) when not editing policy and initialize(2) when editing policy. When set to initialize(2), the objects in tmnxBsxPolicyObjs with the policy version index set to 'admin' are set to the values with the index set to 'oper' in the same tables. Any uncommitted changes are lost, so setting this value corresponds to both BEGIN-TRANSACTION and ABORT-TRANSACTION. When set to commit(3) (END-TRANSACTION), all of the objects from tables with the index set to 'admin' are copied to the same items with the index set to 'oper'. Then, the BSX policy is evaluated for correctness and applied to all BSX MDAs. In this way, the (expensive) policy application can be performed at one time, with a coherent BSX policy configuration. This object was obsoleted in release 8.0 and replaced with the tmnxBsxAdminCtrlApply in the tmnxBsxAdminCtrlTable.")
tmnxBsxAdminLastChangeTime = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 10, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxAdminLastChangeTime.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxBsxAdminLastChangeTime.setDescription("The value of tmnxBsxAdminLastChangeTime indicates the last time a successful set was performed of tmnxBsxAdminControlApply to 'commit'. This object was obsoleted in release 8.0 and replaced with the tmnxBsxAdminCtrlLastChTime in the tmnxBsxAdminCtrlTable.")
tmnxBsxAdminCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 10, 4), )
if mibBuilder.loadTexts: tmnxBsxAdminCtrlTable.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAdminCtrlTable.setDescription('The tmnxBsxAdminCtrlTable contains the admin control handling for the BSX policy configuration for each Application Assurance group and partition.')
tmnxBsxAdminCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 10, 4, 1), ).setIndexNames((0, "TIMETRA-BSX-NG-MIB", "tmnxBsxAaGrpPartIndex"))
if mibBuilder.loadTexts: tmnxBsxAdminCtrlEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAdminCtrlEntry.setDescription('Each tmnxBsxAdminCtrlEntry specifies the admin controls configured by the operator within an application assurance group and partition.')
tmnxBsxAdminCtrlLastChTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 10, 4, 1, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxAdminCtrlLastChTime.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAdminCtrlLastChTime.setDescription("The value of tmnxBsxAdminCtrlLastChTime indicates the last time a successful set was performed of tmnxBsxAdminCtrlApply to 'commit'.")
tmnxBsxAdminCtrlConfigOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 10, 4, 1, 2), TNamedItemOrEmpty()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxBsxAdminCtrlConfigOwner.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAdminCtrlConfigOwner.setDescription('The value of tmnxBsxAdminCtrlConfigOwner specifies who has last initialized the configuration table, who is making all the changes, and who is expected to either commit or re-initialize (abort) the transaction. tmnxBsxAdminCtrlConfigOwner is advisory only. Before beginning a transaction, read tmnxBsxAdminCtrlConfigOwner. If it is empty then proceed with the configuration. Set tmnxBsxAdminCtrlConfigOwner after setting tmnxBsxAdminCtrlApply so that other users will be advised to not make changes to the tables. The agent automatically sets tmnxBsxAdminCtrlConfigOwner to an empty string after tmnxBsxAdminCtrlApply is set, either by the user re-initializing or committing, or by the agent timing out the uncommitted transaction.')
tmnxBsxAdminCtrlApply = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 10, 4, 1, 3), TmnxBsxAdminCtrl()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxBsxAdminCtrlApply.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAdminCtrlApply.setDescription("The value of tmnxBsxAdminCtrlApply specifies the copying of tmnxBsxPolicyObjs tables from one instance of policy version to another. This object reads as none(1) when not editing policy and initialize(2) when editing policy. When set to initialize(2), the objects in tmnxBsxPolicyObjs with the policy version index set to 'admin' are copied to the values with the index set to 'oper' in the same tables. Any uncommitted changes are lost, so setting this value corresponds to both BEGIN-TRANSACTION and ABORT-TRANSACTION. When set to commit(3) (END-TRANSACTION), all of the objects from tables with the index set to 'admin' are first evaluated for correctness, and then copied to the same items with the index set to 'oper'. In this way, the (expensive) policy application can be performed at one time, with a coherent BSX policy configuration.")
tmnxBsxPolicerTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 11), )
if mibBuilder.loadTexts: tmnxBsxPolicerTable.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxPolicerTable.setDescription('The tmnxBsxPolicerTable contains the policer templates as referenced from tmnxBsxAqpTable for rate limiting bandwidth and flows and limiting the number of flows.')
tmnxBsxPolicerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 11, 1), ).setIndexNames((0, "TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGroupIndex"), (1, "TIMETRA-BSX-NG-MIB", "tmnxBsxPolicerName"))
if mibBuilder.loadTexts: tmnxBsxPolicerEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxPolicerEntry.setDescription('Each tmnxBsxPolicerEntry indicates a policer template.')
tmnxBsxPolicerName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 11, 1, 1), TNamedItem())
if mibBuilder.loadTexts: tmnxBsxPolicerName.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxPolicerName.setDescription('The value of tmnxBsxPolicerName specifies the name defined for the policerlication.')
tmnxBsxPolicerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 11, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxPolicerRowStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxPolicerRowStatus.setDescription('The value of tmnxBsxPolicerRowStatus specifies the row status. It allows entries to be created and deleted in the tmnxBsxPolicerTable. To delete an entry, all references to this policer in tmnxBsxAqpBwLimitPolicer, tmnxBsxAqpFlowRatePolicer, and tmnxBsxAqpFlowCountPolicer in the tmnxBsxAqpTable must be deleted in both the admin and oper versions of the application QoS policy.')
tmnxBsxPolicerDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 11, 1, 3), TItemDescription()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxPolicerDescription.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxPolicerDescription.setDescription('The value of tmnxBsxPolicerDescription specifies the description of the policer.')
tmnxBsxPolicerType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 11, 1, 4), TmnxBsxPolicerType().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxPolicerType.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxPolicerType.setDescription("The value of tmnxBsxPolicerType specifies whether the policer is a bandwidth, flow rate, or a flow count policer in addition to the number of buckets used by the policer. Note that this item may be configured away from the value 'none' but may not be changed after this.")
tmnxBsxPolicerGranularity = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 11, 1, 5), TmnxBsxGranularity().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxPolicerGranularity.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxPolicerGranularity.setDescription("The value of tmnxBsxPolicerGranularity specifies the scope of traffic over which the policer applies. Note that this item may be configured away from the value 'none' but may not be changed after this.")
tmnxBsxPolicerAction = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 11, 1, 6), TmnxBsxPolicerAction().clone('permitDeny')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxPolicerAction.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxPolicerAction.setDescription('The value of tmnxBsxPolicerAction specifies whether the action taken by the policer is to permit or drop the packet or flow or is to mark the packet(s) as in profile or out of profile.')
tmnxBsxPolicerAdminPIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 11, 1, 7), TPIRRate().clone(-1)).setUnits('kbps or flows').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxPolicerAdminPIR.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxPolicerAdminPIR.setDescription('The value of tmnxBsxPolicerAdminPIR specifies the administrative PIR specified by the user.')
tmnxBsxPolicerAdminCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 11, 1, 8), TCIRRate()).setUnits('kbps or flows').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxPolicerAdminCIR.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxPolicerAdminCIR.setDescription('The value of tmnxBsxPolicerAdminCIR specifies the administrative CIR specified by the user.')
tmnxBsxPolicerMBS = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 11, 1, 9), TmnxBsxBurstSize()).setUnits('KB or flows').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxPolicerMBS.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxPolicerMBS.setDescription('The value of tmnxBsxPolicerMBS specifies the maximum burst size specified by the user to be used in conjunction with the PIR.')
tmnxBsxPolicerCBS = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 11, 1, 10), TmnxBsxBurstSize()).setUnits('KB or flows').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxPolicerCBS.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxPolicerCBS.setDescription('The value of tmnxBsxPolicerCBS specifies the committed burst size specified by the user to be used in conjunction with the CIR.')
tmnxBsxPolicerPIRAdaptation = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 11, 1, 11), TAdaptationRule().clone('closest')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxPolicerPIRAdaptation.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxPolicerPIRAdaptation.setDescription('The value of tmnxBsxPolicerPIRAdaptation specifies the adaptation rule to be used while computing the operational PIR value. The adaptation rule specifies the rules to compute the operational values while maintaining minimum offset.')
tmnxBsxPolicerCIRAdaptation = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 11, 1, 12), TAdaptationRule().clone('closest')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxPolicerCIRAdaptation.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxPolicerCIRAdaptation.setDescription('The value of tmnxBsxPolicerCIRAdaptation specifies the adaptation rule to be used while computing the operational CIR value. The adaptation rule specifies the rules to compute the operational values while maintaining minimum offset.')
tmnxBsxIsaAaTim = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 12))
tmnxBsxUpgrade = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 12, 1), TmnxActionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxBsxUpgrade.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxUpgrade.setDescription("The value of tmnxBsxUpgrade specifies that when set to 'doAction' that a new ISA-AA.tim file is loaded. This causes the tmnxBsxProtTable to be populated with new entries. The operator is expected to reset each of the ISA-AA MDAs within a short period of time after this operation. The ISA-AA will continue to collect inconsistent statistics for protocols until the reset occurs.")
tmnxBsxVersion = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 12, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxVersion.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxVersion.setDescription('The value of tmnxBsxVersion indicates the version of the ISA-AA.tim file currently in use by the system. If no ISA-AA.tim file currently exists, this object will contain a zero length string.')
tmnxBsxAqpStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 13), )
if mibBuilder.loadTexts: tmnxBsxAqpStatsTable.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAqpStatsTable.setDescription('The tmnxBsxAqpStatsTable contains the application qos policy statistics.')
tmnxBsxAqpStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 13, 1), ).setIndexNames((0, "TIMETRA-BSX-NG-MIB", "tmnxBsxAaGrpPartIndex"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxAqpEntryId"))
if mibBuilder.loadTexts: tmnxBsxAqpStatsEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAqpStatsEntry.setDescription('Each tmnxBsxAqpStatsEntry indicates statistics available to collect for each application QoS policy entry.')
tmnxBsxAqpStatsFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 13, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxAqpStatsFlows.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxBsxAqpStatsFlows.setDescription('The value of tmnxBsxAqpStatsFlows indicates the number of flows that have hit this entry. In certain cases, a flow may change its attributes thus undergoing a second policy evaluation. In these cases, the flow may be counted against two different AQP entries. This object was obsoleted in release 9.0 and replaced with the tmnxBsxAqpStatsHCFlows and its 32-bit associated objects.')
tmnxBsxAqpStatsConflicts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 13, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxAqpStatsConflicts.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxBsxAqpStatsConflicts.setDescription('The value of tmnxBsxAqpStatsConflicts indicates the number of flows that have hit this AQP entry, but resulted in a conflict with the match criteria. This object was obsoleted in release 9.0 and replaced with the tmnxBsxAqpStatsHCConflicts and its 32-bit associated objects.')
tmnxBsxAqpStatsHCFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 13, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxAqpStatsHCFlows.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAqpStatsHCFlows.setDescription('The value of tmnxBsxAqpStatsHCFlows indicates the number of flows that have hit this entry. In certain cases, a flow may change its attributes thus undergoing a second policy evaluation. In these cases, the flow may be counted against two different AQP entries.')
tmnxBsxAqpStatsFlowsLo = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 13, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxAqpStatsFlowsLo.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAqpStatsFlowsLo.setDescription('The value of tmnxBsxAqpStatsFlowsLo indicates the lower 32-bits of tmnxBsxAqpStatsHCFlows.')
tmnxBsxAqpStatsFlowsHi = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 13, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxAqpStatsFlowsHi.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAqpStatsFlowsHi.setDescription('The value of tmnxBsxAqpStatsFlowsHi indicates the upper 32-bits of tmnxBsxAqpStatsHCFlows.')
tmnxBsxAqpStatsHCConflicts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 13, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxAqpStatsHCConflicts.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAqpStatsHCConflicts.setDescription('The value of tmnxBsxAqpStatsHCConflicts indicates the number of flows that have hit this AQP entry, but resulted in a conflict with the match criteria.')
tmnxBsxAqpStatsConflictsLo = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 13, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxAqpStatsConflictsLo.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAqpStatsConflictsLo.setDescription('The value of tmnxBsxAqpStatsConflictsLo indicates the lower 32-bits of tmnxBsxAqpStatsHCConflicts.')
tmnxBsxAqpStatsConflictsHi = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 13, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxAqpStatsConflictsHi.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAqpStatsConflictsHi.setDescription('The value of tmnxBsxAqpStatsConflictsHi indicates the upper 32-bits of tmnxBsxAqpStatsHCConflicts.')
tmnxBsxInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 14))
tmnxBsxFlowFullHighWatermark = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 14, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(95)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxBsxFlowFullHighWatermark.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxFlowFullHighWatermark.setDescription('The value of tmnxBsxFlowFullHighWatermark specifies the utilization of the flow records on the ISA-AA Group when a full alarm will be raised by the agent. The value must be larger than or equal to tmnxBsxFlowFullLowWatermark.')
tmnxBsxFlowFullLowWatermark = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 14, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(90)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxBsxFlowFullLowWatermark.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxFlowFullLowWatermark.setDescription('The value of tmnxBsxFlowFullLowWatermark specifies the utilization of the flow records on the ISA-AA Group when the full alarm will be cleared by the agent. The value must be lower than or equal to tmnxBsxFlowFullHighWatermark.')
tmnxBsxFlowSetupHighWatermark = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 14, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(1, 2147483647), )).clone(-1)).setUnits('flows per second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxBsxFlowSetupHighWatermark.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxFlowSetupHighWatermark.setDescription('The value of tmnxBsxFlowSetupHighWatermark specifies the flow setup rate on the ISA-AA when a Flow Setup alarm will be raised by the agent. The value must be larger than tmnxBsxFlowSetupLowWatermark. The value of -1 represents maximum flow setup rate indicating that this high watermark will not be exceeded.')
tmnxBsxFlowSetupLowWatermark = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 14, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('flows per second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxBsxFlowSetupLowWatermark.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxFlowSetupLowWatermark.setDescription('The value of tmnxBsxFlowSetupLowWatermark specifies the flow setup rate on the ISA-AA when a Flow Setup alarm will be cleared by the agent. The value must be lower than tmnxBsxFlowSetupHighWatermark.')
tmnxBsxPacketRateHighWatermark = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 14, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(1, 2147483647), )).clone(-1)).setUnits('packets per second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxBsxPacketRateHighWatermark.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxPacketRateHighWatermark.setDescription('The value of tmnxBsxPacketRateHighWatermark specifies the packet rate on the ISA-AA when a Packet Rate alarm will be raised by the agent. The value must be larger than tmnxBsxPacketRateLowWatermark. The value of -1 represents maximum packet rate indicating that this high watermark will never be exceeded.')
tmnxBsxPacketRateLowWatermark = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 14, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('packets per second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxBsxPacketRateLowWatermark.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxPacketRateLowWatermark.setDescription('The value of tmnxBsxPacketRateLowWatermark specifies the packet rate on the ISA-AA when a Packet Rate alarm will be cleared by the agent. The value must be lower than tmnxBsxPacketRateHighWatermark.')
tmnxBsxBitRateHighWatermark = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 14, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(1, 2147483647), )).clone(-1)).setUnits('megabits per second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxBsxBitRateHighWatermark.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxBitRateHighWatermark.setDescription('The value of tmnxBsxBitRateHighWatermark specifies the bit rate on the ISA-AA when a Bit Rate alarm will be raised by the agent. The value must be larger than tmnxBsxBitRateLowWatermark. The value of -1 represents maximum bit rate indicating that this high watermark will not be exceeded.')
tmnxBsxBitRateLowWatermark = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 14, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('megabits per second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxBsxBitRateLowWatermark.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxBitRateLowWatermark.setDescription('The value of tmnxBsxBitRateLowWatermark specifies the bit rate on the ISA-AA when a Bit Rate alarm will be cleared by the agent. The value must be lower than tmnxBsxBitRateHighWatermark.')
tmnxBsxAqpCharTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 15), )
if mibBuilder.loadTexts: tmnxBsxAqpCharTable.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAqpCharTable.setDescription('The tmnxBsxAqpCharTable contains the characteristic matches for the application qos policy table.')
tmnxBsxAqpCharEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 15, 1), ).setIndexNames((0, "TIMETRA-BSX-NG-MIB", "tmnxBsxAqpPolicyVersion"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxAaGrpPartIndex"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxAqpEntryId"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxAsoCharName"), (1, "TIMETRA-BSX-NG-MIB", "tmnxBsxAsoValValName"))
if mibBuilder.loadTexts: tmnxBsxAqpCharEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAqpCharEntry.setDescription("Each tmnxBsxAqpCharEntry specifies a match criterion and corresponding action for the application qos policy specified by the second and third indices tmnxBsxAaGrpPartIndex, and tmnxBsxAqpEntryId. The tmnxBsxAsoCharName and tmnxBsxAsoValValName indices uniquely specify the characteristic in the tmnxBsxAsoTable and characteristic value in the tmnxBsxAsoValTable. Rows can only be created and destroyed by specifying the tmnxBsxAqpCharRowStatus if the first index, tmnxBsxAqpPolicyVersion, is set to 'admin'.")
tmnxBsxAqpCharRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 15, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxAqpCharRowStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAqpCharRowStatus.setDescription("The value of tmnxBsxAqpCharRowStatus specifies the row status. It allows entries to be created and deleted in the tmnxBsxAqpCharTable. Rows are created by specifying the value of 'createAndGo (4)', and deleted by specifying the value of 'destroy (6)'.")
tmnxBsxAqpCharOperator = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 15, 1, 2), TmnxBsxOperator().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxAqpCharOperator.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAqpCharOperator.setDescription('The value of tmnxBsxAqpCharOperator specifies the comparison operator applied to the corresponding row in the tmnxBsxAsoValTable.')
tmnxBsxAppFilterExprTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 16), )
if mibBuilder.loadTexts: tmnxBsxAppFilterExprTable.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAppFilterExprTable.setDescription('The tmnxBsxAppFilterExprTable contains the expression substring match criteria for the application filter table.')
tmnxBsxAppFilterExprEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 16, 1), ).setIndexNames((0, "TIMETRA-BSX-NG-MIB", "tmnxBsxAppFilterPolicyVersion"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxAaGrpPartIndex"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxAppFilterEntryId"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxAppFilterExprIndex"))
if mibBuilder.loadTexts: tmnxBsxAppFilterExprEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAppFilterExprEntry.setDescription("Each tmnxBsxAppFilterExprEntry specifies an expression substring match criterion and corresponding action for the application filter specified by the second and third indices tmnxBsxAaGrpPartIndex, and tmnxBsxAppFilterEntryId. The tmnxBsxAppFilterExprIndex index uniquely specifies the expression substring. Rows can only be created and destroyed by specifying the tmnxBsxAppFilterExprRowStatus if the first index, tmnxBsxAppFilterPolicyVersion, is set to 'admin'.")
tmnxBsxAppFilterExprIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 16, 1, 1), TmnxBsxExprSubStringIndex())
if mibBuilder.loadTexts: tmnxBsxAppFilterExprIndex.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAppFilterExprIndex.setDescription('The value of tmnxBsxAppFilterExprIndex specifies the expression substring index.')
tmnxBsxAppFilterExprRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 16, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxAppFilterExprRowStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAppFilterExprRowStatus.setDescription("The value of tmnxBsxAppFilterExprRowStatus specifies the row status. It allows entries to be created and deleted in the tmnxBsxAppFilterExprTable. Rows are created by specifying the value of 'createAndGo (4)', and deleted by specifying the value of 'destroy (6)'.")
tmnxBsxAppFilterExprType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 16, 1, 3), TmnxBsxExprSubStringType().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxAppFilterExprType.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAppFilterExprType.setDescription('The value of tmnxBsxAppFilterExprType specifies the type of tmnxBsxAppFilterExprStr.')
tmnxBsxAppFilterExprOperator = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 16, 1, 4), TmnxBsxOperator().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxAppFilterExprOperator.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAppFilterExprOperator.setDescription('The value of tmnxBsxAppFilterExprOperator specifies the comparison operator applied to the tmnxBsxAppFilterExprStr.')
tmnxBsxAppFilterExprStr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 16, 1, 5), TmnxBsxExprSubString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxAppFilterExprStr.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAppFilterExprStr.setDescription('The value of tmnxBsxAppFilterExprStr specifies a substring expression, of the type specified by tmnxBsxAppFilterExprType, to match against that resolves to a tmnxBsxAppFilterApplication. If set to an empty string, no match on the substring expression is done.')
tmnxBsxCustProtTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 17), )
if mibBuilder.loadTexts: tmnxBsxCustProtTable.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxCustProtTable.setDescription('The tmnxBsxCustProtTable contains the definitions of custom protocols for an Application Assurance group and partition.')
tmnxBsxCustProtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 17, 1), ).setIndexNames((0, "TIMETRA-BSX-NG-MIB", "tmnxBsxCustProtPolicyVersion"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxAaGrpPartIndex"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxCustProtEntryId"))
if mibBuilder.loadTexts: tmnxBsxCustProtEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxCustProtEntry.setDescription("Each tmnxBsxCustProtEntry specifies a set of match criteria to define a custom protocol within an Application Assurance group and partition. Rows can only be created and destroyed by specifying the tmnxBsxCustProtRowStatus if the first index, tmnxBsxCustProtPolicyVersion, is set to 'admin'.")
tmnxBsxCustProtPolicyVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 17, 1, 1), TmnxBsxPolicyVersion())
if mibBuilder.loadTexts: tmnxBsxCustProtPolicyVersion.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxCustProtPolicyVersion.setDescription("The value of tmnxBsxCustProtPolicyVersion specifies the version of the table being accessed. The table is read-create only for the 'admin' version of the table. The 'oper' version is read-only.")
tmnxBsxCustProtEntryId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 17, 1, 2), TEntryId())
if mibBuilder.loadTexts: tmnxBsxCustProtEntryId.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxCustProtEntryId.setDescription('The value of tmnxBsxCustProtEntryId specifies the index into the protocol list that defines a custom protocol for application assurance.')
tmnxBsxCustProtRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 17, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxCustProtRowStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxCustProtRowStatus.setDescription("The value of tmnxBsxCustProtRowStatus specifies the row status. Rows in the tmnxBsxCustProtTable are created by specifying the value of 'createAndGo (4)', and deleted by specifying the value of 'destroy (6)'.")
tmnxBsxCustProtRowLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 17, 1, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxCustProtRowLastChange.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxCustProtRowLastChange.setDescription('The value of tmnxBsxCustProtRowLastChange indicates the last time a successful set was performed on this row of the tmnxBsxCustProtTable.')
tmnxBsxCustProtIpProtocolNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 17, 1, 5), TIpProtocol().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxCustProtIpProtocolNum.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxCustProtIpProtocolNum.setDescription("The value of tmnxBsxCustProtIpProtocolNum specifies the IP protocol number to match against for the custom protocol. A value of '-1' specifies that no matching is to be done to resolve to a custom protocol.")
tmnxBsxCustProtDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 17, 1, 6), TItemDescription()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxCustProtDescription.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxCustProtDescription.setDescription('The value of tmnxBsxCustProtDescription specifies the description of the custom protocol.')
tmnxBsxCustProtAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 17, 1, 7), TmnxAdminState().clone('outOfService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxCustProtAdminState.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxCustProtAdminState.setDescription("The value of tmnxBsxCustProtAdminState specifies the administrative state for the custom protocol. When 'outOfService', any match entries referring to this custom protocol are skipped.")
tmnxBsxCustProtExprTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 18), )
if mibBuilder.loadTexts: tmnxBsxCustProtExprTable.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxCustProtExprTable.setDescription('The tmnxBsxCustProtExprTable contains the expression substring match criteria for the tmnxBsxCustProtTable.')
tmnxBsxCustProtExprEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 18, 1), ).setIndexNames((0, "TIMETRA-BSX-NG-MIB", "tmnxBsxCustProtPolicyVersion"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxAaGrpPartIndex"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxCustProtEntryId"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxCustProtExprIndex"))
if mibBuilder.loadTexts: tmnxBsxCustProtExprEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxCustProtExprEntry.setDescription("Each tmnxBsxCustProtExprEntry specifies an expression substring match criterion for the custom protocol specified by the second and third indices tmnxBsxAaGrpPartIndex, and tmnxBsxCustProtEntryId. The tmnxBsxCustProtExprIndex index uniquely specifies the expression substring. Rows can only be created and destroyed by specifying the tmnxBsxCustProtExprRowStatus if the first index, tmnxBsxCustProtPolicyVersion, is set to 'admin'.")
tmnxBsxCustProtExprIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 18, 1, 1), TmnxBsxExprSubStringIndex())
if mibBuilder.loadTexts: tmnxBsxCustProtExprIndex.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxCustProtExprIndex.setDescription('The value of tmnxBsxCustProtExprIndex specifies the expression substring index.')
tmnxBsxCustProtExprRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 18, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxCustProtExprRowStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxCustProtExprRowStatus.setDescription("The value of tmnxBsxCustProtExprRowStatus specifies the row status. Rows in the tmnxBsxCustProtExprTable are created by specifying the value of 'createAndGo (4)', and deleted by specifying the value of 'destroy (6)'.")
tmnxBsxCustProtExprRowLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 18, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxCustProtExprRowLastChange.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxCustProtExprRowLastChange.setDescription('The value of tmnxBsxCustProtExprRowLastChange indicates the last time a successful set was performed on this row of the tmnxBsxCustProtExprTable.')
tmnxBsxCustProtExprOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 18, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxCustProtExprOffset.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxCustProtExprOffset.setDescription('The value of tmnxBsxCustProtExprOffset specifies the offset (in octets) into the protocol payload, where the substring expression match criteria will start.')
tmnxBsxCustProtExprDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 18, 1, 5), TmnxBsxProtocolDirection().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxCustProtExprDirection.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxCustProtExprDirection.setDescription("The value of tmnxBsxCustProtExprDirection specifies the protocol direction to match against to resolve to a custom protocol. The value can be either client-to-server 'client2server', server-to-client 'server2client', or 'any'.")
tmnxBsxCustProtExprOperator = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 18, 1, 6), TmnxBsxOperator().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxCustProtExprOperator.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxCustProtExprOperator.setDescription('The value of tmnxBsxCustProtExprOperator specifies the comparison operator applied to the tmnxBsxCustProtExprStr.')
tmnxBsxCustProtExprStr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 18, 1, 7), TmnxBsxCustProtExprSubString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxCustProtExprStr.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxCustProtExprStr.setDescription('The value of tmnxBsxCustProtExprStr specifies a substring expression to match against that resolves to a custom protocol. If set to an empty string, no match on the substring expression is done.')
tmnxBsxAaSubAsoValTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 19), )
if mibBuilder.loadTexts: tmnxBsxAaSubAsoValTable.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAaSubAsoValTable.setDescription('The tmnxBsxAaSubAsoValTable contains an entry for each ISA-AA subscriber in the system. Each row contains an Application Service Option (ASO) characteristic and value applied to the subscriber.')
tmnxBsxAaSubAsoValEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 19, 1), ).setIndexNames((0, "TIMETRA-BSX-NG-MIB", "tmnxBsxAaGrpPartIndex"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubscriberType"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubscriber"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxAsoValCharName"))
if mibBuilder.loadTexts: tmnxBsxAaSubAsoValEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAaSubAsoValEntry.setDescription('Each tmnxBsxAaSubAsoValEntry contains an ASO Characteristic and value assigned to an ISA-AA subscriber.')
tmnxBsxAaSubAsoValName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 19, 1, 1), TNamedItem()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxAaSubAsoValName.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAaSubAsoValName.setDescription('The value of tmnxBsxAaSubAsoValName indicates the characteristic value applied to the Application assurance subscriber.')
tmnxBsxAaSubAsoValDerivedFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 19, 1, 2), TmnxBsxAaSubAsoValDerivedFrom()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxAaSubAsoValDerivedFrom.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAaSubAsoValDerivedFrom.setDescription('The value of tmnxBsxAaSubAsoValDerivedFrom indicates from where the characteristic value is derived from for the Application Assurance subscriber.')
tmnxBsxAaSubPolicerTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 20), )
if mibBuilder.loadTexts: tmnxBsxAaSubPolicerTable.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAaSubPolicerTable.setDescription('The tmnxBsxAaSubPolicerTable contains an entry for each Application Assurance subscriber in the system. Each row contains information on Policer resources applied to the subscriber.')
tmnxBsxAaSubPolicerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 20, 1), ).setIndexNames((0, "TIMETRA-BSX-NG-MIB", "tmnxBsxAaGrpPartIndex"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubscriberType"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubscriber"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubPolicerType"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubPolicerDirection"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubPolicerIndex"))
if mibBuilder.loadTexts: tmnxBsxAaSubPolicerEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAaSubPolicerEntry.setDescription('Each tmnxBsxAaSubPolicerEntry contains information on Policer resources applied to the subscriber.')
tmnxBsxAaSubPolicerType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 20, 1, 1), TmnxBsxPolicerType())
if mibBuilder.loadTexts: tmnxBsxAaSubPolicerType.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAaSubPolicerType.setDescription('The value of tmnxBsxAaSubPolicerType indicates if the policer being applied to the subscriber is a bandwidth, flow rate, or a flow count policer.')
tmnxBsxAaSubPolicerDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 20, 1, 2), TmnxBsxDirection())
if mibBuilder.loadTexts: tmnxBsxAaSubPolicerDirection.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAaSubPolicerDirection.setDescription('The value of tmnxBsxAaSubPolicerDirection indicates the traffic direction of the policer being applied to the subscriber.')
tmnxBsxAaSubPolicerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 20, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096)))
if mibBuilder.loadTexts: tmnxBsxAaSubPolicerIndex.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAaSubPolicerIndex.setDescription('The value of tmnxBsxAaSubPolicerIndex indicates the index into a list of policers being applied to the subscriber.')
tmnxBsxAaSubPolicerAqpEntryId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 20, 1, 4), TEntryId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxAaSubPolicerAqpEntryId.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAaSubPolicerAqpEntryId.setDescription('The value of tmnxBsxAaSubPolicerAqpEntryId indicates the tmnxBsxAqpEntryId that references the policer.')
tmnxBsxAaSubPolicerName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 20, 1, 5), TNamedItem()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxAaSubPolicerName.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAaSubPolicerName.setDescription('The value of tmnxBsxAaSubPolicerName indicates the policer name being applied to the subscriber.')
tmnxBsxAaSubPolResExTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 21), )
if mibBuilder.loadTexts: tmnxBsxAaSubPolResExTable.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAaSubPolResExTable.setDescription('The tmnxBsxAaSubPolResExTable contains an entry for each Application Assurance subscriber which has exceeded policer resources.')
tmnxBsxAaSubPolResExEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 21, 1), ).setIndexNames((0, "TIMETRA-BSX-NG-MIB", "tmnxBsxAaGrpPartIndex"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubscriberType"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubscriber"))
if mibBuilder.loadTexts: tmnxBsxAaSubPolResExEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAaSubPolResExEntry.setDescription('Each tmnxBsxAaSubPolResExEntry contains information on a subscriber that has exceeded policer resources.')
tmnxBsxAaSubPolResExStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 21, 1, 1), TmnxBsxAaSubPolicerResStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxAaSubPolResExStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAaSubPolResExStatus.setDescription('The value of tmnxBsxAaSubPolResExStatus indicates the status of policer resources being applied to the subscriber.')
tmnxBsxPolicyScalars = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 22))
tmnxBsxPlcyCfgLastChTime = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 22, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxPlcyCfgLastChTime.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxPlcyCfgLastChTime.setDescription('The value of tmnxBsxPlcyCfgLastChTime indicates the last time, since system startup, a successful set was performed on the tmnxBsxPlcyCfgTable.')
tmnxBsxChargeGrpLastChTime = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 22, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxChargeGrpLastChTime.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxChargeGrpLastChTime.setDescription('The value of tmnxBsxChargeGrpLastChTime indicates the last time, since system startup, a successful set was performed on the tmnxBsxChargeGrpCfgTable.')
tmnxBsxChargeGrpCfgTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 23), )
if mibBuilder.loadTexts: tmnxBsxChargeGrpCfgTable.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxChargeGrpCfgTable.setDescription('The tmnxBsxChargeGrpCfgTable contains an entry for each Application Assurance charging group.')
tmnxBsxChargeGrpCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 23, 1), ).setIndexNames((0, "TIMETRA-BSX-NG-MIB", "tmnxBsxChargeGrpPolicyVersion"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxAaGrpPartIndex"), (1, "TIMETRA-BSX-NG-MIB", "tmnxBsxChargeGrpName"))
if mibBuilder.loadTexts: tmnxBsxChargeGrpCfgEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxChargeGrpCfgEntry.setDescription('Each tmnxBsxChargeGrpCfgEntry indicates a charging group configured by the operator. Rows in this table are created and destroyed using the tmnxBsxChargeGrpRowStatus object.')
tmnxBsxChargeGrpPolicyVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 23, 1, 1), TmnxBsxPolicyVersion())
if mibBuilder.loadTexts: tmnxBsxChargeGrpPolicyVersion.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxChargeGrpPolicyVersion.setDescription("The value of tmnxBsxChargeGrpPolicyVersion indicates the version of the table being accessed. The row is read-create only for the 'admin' version of the table. The 'oper' version is read-only.")
tmnxBsxChargeGrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 23, 1, 2), TNamedItem())
if mibBuilder.loadTexts: tmnxBsxChargeGrpName.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxChargeGrpName.setDescription('The value of tmnxBsxChargeGrpName specifies the charging group name.')
tmnxBsxChargeGrpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 23, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxChargeGrpRowStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxChargeGrpRowStatus.setDescription("The value of tmnxBsxChargeGrpRowStatus specifies the row status. It allows entries to be created and deleted in the tmnxBsxChargeGrpCfgTable. To delete an entry, all references to this charging group must be removed. References in the tmnxBsxAppCfgTable can be found where the tmnxBsxAaGrpPartIndex are equal and tmnxBsxAppChargeGrp matches the tmnxBsxChargeGrpName. References in the tmnxBsxAppGrpCfgTable can be found where the tmnxBsxAaGrpPartIndex are equal and tmnxBsxAppGrpChargeGrp matches the tmnxBsxChargeGrpName. References in the tmnxBsxPlcyCfgTable can be found where the tmnxBsxAaGrpPartIndex are equal and tmnxBsxPlcyDefChargeGrp matches the tmnxBsxChargeGrpName. Rows are created by specifying the value of 'createAndGo (4)', and deleted by specifying the value of 'destroy (6)'.")
tmnxBsxChargeGrpRowLastCh = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 23, 1, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxChargeGrpRowLastCh.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxChargeGrpRowLastCh.setDescription('The value of tmnxBsxChargeGrpRowLastCh indicates the last time, since system startup, a successful set was performed on this row.')
tmnxBsxChargeGrpDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 23, 1, 5), TItemDescription()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxChargeGrpDescription.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxChargeGrpDescription.setDescription('The value of tmnxBsxChargeGrpDescription specifies the description of the charging group.')
tmnxBsxChargeGrpExportId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 23, 1, 6), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 255), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxChargeGrpExportId.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxChargeGrpExportId.setDescription('The value of tmnxBsxChargeGrpExportId specifies the identifier used to represent the charging group in the accounting records. This identifier must be unique within the policy. When tmnxBsxChargeGrpExportId has a value of 0, RADIUS accounting records will not be exported for this charging group.')
tmnxBsxPlcyCfgTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 24), )
if mibBuilder.loadTexts: tmnxBsxPlcyCfgTable.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxPlcyCfgTable.setDescription('The tmnxBsxPlcyCfgTable contains policy configuration for each application-assurance group.')
tmnxBsxPlcyCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 24, 1), ).setIndexNames((0, "TIMETRA-BSX-NG-MIB", "tmnxBsxPlcyPolicyVersion"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxAaGrpPartIndex"))
if mibBuilder.loadTexts: tmnxBsxPlcyCfgEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxPlcyCfgEntry.setDescription('Each tmnxBsxPlcyCfgEntry specifies the policy information configured by the operator. The tmnxBsxPlcyCfgEntry is automatically created when the AA group is created in the tmnxBsxAaGrpPartTable.')
tmnxBsxPlcyPolicyVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 24, 1, 1), TmnxBsxPolicyVersion())
if mibBuilder.loadTexts: tmnxBsxPlcyPolicyVersion.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxPlcyPolicyVersion.setDescription("The value of tmnxBsxPlcyPolicyVersion specifies the version of the table being accessed. The table is read-create only for the 'admin' version of the table. The 'oper' version is read-only.")
tmnxBsxPlcyRowLastCh = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 24, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxPlcyRowLastCh.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxPlcyRowLastCh.setDescription('The value of tmnxBsxPlcyRowLastCh indicates the last time, since system startup, a successful set was performed on this row of the tmnxBsxPlcyCfgTable.')
tmnxBsxPlcyDefChargeGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 2, 24, 1, 3), TNamedItemOrEmpty()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxPlcyDefChargeGrp.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxPlcyDefChargeGrp.setDescription('The value of tmnxBsxPlcyDefChargeGrp specifies the name of the default charging group to be applied to an AA transit subscriber.')
tmnxBsxStatsAccounting = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 1))
tmnxBsxStatAaAcctLastChTime = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 1, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaAcctLastChTime.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaAcctLastChTime.setDescription('The value of tmnxBsxStatAaAcctLastChTime indicates the last time a successful set was performed on any row of the tmnxBsxStatAaAcctCfgTable.')
tmnxBsxStatAaSubLastChTime = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaSubLastChTime.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaSubLastChTime.setDescription('The value of tmnxBsxStatAaSubLastChTime indicates the last time a successful set was performed on any row of the tmnxBsxStatAaSubCfgTable.')
tmnxBsxStatAaSubSdyLastChTime = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaSubSdyLastChTime.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaSubSdyLastChTime.setDescription('The value of tmnxBsxStatAaSubSdyLastChTime indicates the last time a successful set was performed on any row of the tmnxBsxStatAaSubSdyCfgTable.')
tmnxBsxStatIsaAaCfgLastChTime = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 1, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatIsaAaCfgLastChTime.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatIsaAaCfgLastChTime.setDescription('The value of tmnxBsxStatIsaAaCfgLastChTime indicates the last time a successful set was performed on any row of the tmnxBsxStatIsaAaCfgTable.')
tmnxBsxStatAaAcctCfgTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 2), )
if mibBuilder.loadTexts: tmnxBsxStatAaAcctCfgTable.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaAcctCfgTable.setDescription('The tmnxBsxStatAaAcctCfgTable contains an entry for each ISA-AA Group, Partition and Statistics type in the system. Each row contains the accounting policy and statistics configuration for ISA-AA application-groups, applications, protocols for system-wide, per-subscriber and per-special study subscribers.')
tmnxBsxStatAaAcctCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 2, 1), ).setIndexNames((0, "TIMETRA-BSX-NG-MIB", "tmnxBsxAaGrpPartIndex"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaAcctCfgType"))
if mibBuilder.loadTexts: tmnxBsxStatAaAcctCfgEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaAcctCfgEntry.setDescription('Each tmnxBsxStatAaAcctCfgEntry indicates the ISA-AA statistics that are configured per ISA-AA group, partition and statistics type.')
tmnxBsxStatAaAcctCfgType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 2, 1, 1), TmnxBsxStatAaAcctCfgType())
if mibBuilder.loadTexts: tmnxBsxStatAaAcctCfgType.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaAcctCfgType.setDescription('The value of tmnxBsxStatAaAcctCfgType specifies the accounting configurable type for the row.')
tmnxBsxStatAaAcctCfgCollStats = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 2, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxBsxStatAaAcctCfgCollStats.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaAcctCfgCollStats.setDescription('The value of tmnxBsxStatAaAcctCfgCollStats specifies that statistics collection is enabled.')
tmnxBsxStatAaAcctCfgPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxBsxStatAaAcctCfgPolicy.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaAcctCfgPolicy.setDescription('The value of tmnxBsxStatAaAcctCfgPolicy specifies the accounting policy to use. The value 0 is used to disable the accounting policy.')
tmnxBsxStatAaAcctCfgAggrStats = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 2, 1, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxBsxStatAaAcctCfgAggrStats.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaAcctCfgAggrStats.setDescription("The value of tmnxBsxStatAaAcctCfgAggrStats specifies whether aggregate statistics collection is enabled. tmnxBsxStatAaAcctCfgAggrStats can only be modified when tmnxBsxStatAaAcctCfgType of the corresponding row is equal to 'aa-sub (4)'.")
tmnxBsxStatAaAcctCfgAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 2, 1, 5), TmnxAdminState().clone('inService')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxBsxStatAaAcctCfgAdminState.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaAcctCfgAdminState.setDescription("The value of tmnxBsxStatAaAcctCfgAdminState specifies from an administrative perspective whether the statistics are actually collected for the corresponding tmnxBsxStatAaAcctCfgType. An administrative state of 'outOfService(3)' indicates statistics will not be collected even if tmnxBsxStatAaAcctCfgCollStats is enabled. tmnxBsxStatAaAcctCfgAdminState can only be modified for the tmnxBsxStatAaAcctCfgType of 'protocol(1)'. The default value of tmnxBsxStatAaAcctCfgAdminState is 'outOfService(3)' when tmnxBsxStatAaAcctCfgType is 'protocol(1)'.")
tmnxBsxStatAaAcctCfgMaxThruStats = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 2, 1, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxBsxStatAaAcctCfgMaxThruStats.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaAcctCfgMaxThruStats.setDescription("The value of tmnxBsxStatAaAcctCfgMaxThruStats specifies whether or not maximum throughput statistics collection is enabled. tmnxBsxStatAaAcctCfgMaxThruStats can only be modified when tmnxBsxStatAaAcctCfgType of the corresponding row is equal to 'aa-sub(4)'.")
tmnxBsxStatAaAcctCfgRadiusPlcy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 2, 1, 7), TNamedItemOrEmpty()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxBsxStatAaAcctCfgRadiusPlcy.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaAcctCfgRadiusPlcy.setDescription("The value of tmnxBsxStatAaAcctCfgRadiusPlcy specifies the RADIUS accounting policy to use. The accounting policy must be an existing row within the tmnxBsxRadApTable specified by the index tmnxBsxRadApName. tmnxBsxStatAaAcctCfgRadiusPlcy can only be modified when tmnxBsxStatAaAcctCfgType of the corresponding row is equal to 'aa-sub(4)'.")
tmnxBsxStatAaSubTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 3), )
if mibBuilder.loadTexts: tmnxBsxStatAaSubTable.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaSubTable.setDescription('The tmnxBsxStatAaSubTable contains an entry for each application-assurance subscriber for each statistics type within a group, partition and statistics interval. Each row contains the application assurance per-subscriber statistics collected for the subscriber. A subscriber is uniquely identified by a tmnxBsxAaSubscriberType and tmnxBsxAaSubscriber.')
tmnxBsxStatAaSubEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 3, 1), ).setIndexNames((0, "TIMETRA-BSX-NG-MIB", "tmnxBsxAaGrpPartIndex"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubStatsInterval"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubscriberType"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubscriber"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaType"), (1, "TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaName"))
if mibBuilder.loadTexts: tmnxBsxStatAaSubEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaSubEntry.setDescription('Each tmnxBsxStatAaSubEntry contains the application assurance per-subscriber statistics for a combination of group, partition, statistics interval, subscriber, statistics type, and statistics name.')
tmnxBsxAaSubscriberType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 3, 1, 1), TmnxBsxAaSubscriberType())
if mibBuilder.loadTexts: tmnxBsxAaSubscriberType.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAaSubscriberType.setDescription('The value of tmnxBsxAaSubscriberType specifies the format of the Application Assurance Subscriber identifier.')
tmnxBsxAaSubscriber = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 3, 1, 2), TmnxBsxAaSubscriber())
if mibBuilder.loadTexts: tmnxBsxAaSubscriber.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAaSubscriber.setDescription('The Application Assurance Subscriber identifier. The format of this object is determined by the value of the tmnxBsxAaSubscriberType.')
tmnxBsxStatAaType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 3, 1, 3), TmnxBsxAaStatType())
if mibBuilder.loadTexts: tmnxBsxStatAaType.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaType.setDescription('The value of tmnxBsxStatAaType specifies the type of the Application Assurance subscriber statistic.')
tmnxBsxStatAaName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 3, 1, 4), TNamedItem())
if mibBuilder.loadTexts: tmnxBsxStatAaName.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaName.setDescription('The value of tmnxBsxStatAaName specifies either the ISA-AA protocol, application or app-group name for which statistics are requested. The tmnxBsxStatAaType is used to determine the statistics type.')
tmnxBsxStatAaSubDiscontTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 3, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaSubDiscontTime.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaSubDiscontTime.setDescription('The value of tmnxBsxStatAaSubDiscontTime indicates the SNMPv2-MIB::sysUpTime (hundredths of a second) when any of the active ISA-AA MDAs within the group have last changed status.')
tmnxBsxStatAaSubOctsAdmFmSb = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 3, 1, 6), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaSubOctsAdmFmSb.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaSubOctsAdmFmSb.setDescription('The value of tmnxBsxStatAaSubOctsAdmFmSb indicates the total number of bytes permitted for the subscriber to network direction.')
tmnxBsxStatAaSubPktsAdmFmSb = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 3, 1, 7), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaSubPktsAdmFmSb.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaSubPktsAdmFmSb.setDescription('The value of tmnxBsxStatAaSubPktsAdmFmSb indicates the total number of packets permitted for the subscriber to network direction.')
tmnxBsxStatAaSubFlwsAdmFmSb = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 3, 1, 8), Counter32()).setUnits('flows').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaSubFlwsAdmFmSb.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaSubFlwsAdmFmSb.setDescription('The value of tmnxBsxStatAaSubFlwsAdmFmSb indicates the total number of flows permitted for the subscriber to network direction.')
tmnxBsxStatAaSubOctsDnyFmSb = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 3, 1, 9), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaSubOctsDnyFmSb.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaSubOctsDnyFmSb.setDescription('The value of tmnxBsxStatAaSubOctsDnyFmSb indicates the total number of bytes dropped for the subscriber to network direction.')
tmnxBsxStatAaSubPktsDnyFmSb = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 3, 1, 10), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaSubPktsDnyFmSb.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaSubPktsDnyFmSb.setDescription('The value of tmnxBsxStatAaSubPktsDnyFmSb indicates the total number of packets dropped for the subscriber to network direction.')
tmnxBsxStatAaSubFlwsDnyFmSb = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 3, 1, 11), Counter32()).setUnits('flows').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaSubFlwsDnyFmSb.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaSubFlwsDnyFmSb.setDescription('The value of tmnxBsxStatAaSubFlwsDnyFmSb indicates the total number of flows that dropped subsequent packets in the subscriber to network direction.')
tmnxBsxStatAaSubOctsAdmToSb = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 3, 1, 12), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaSubOctsAdmToSb.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaSubOctsAdmToSb.setDescription('The value of tmnxBsxStatAaSubOctsAdmToSb indicates the total number of bytes permitted for the network to subscriber direction.')
tmnxBsxStatAaSubPktsAdmToSb = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 3, 1, 13), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaSubPktsAdmToSb.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaSubPktsAdmToSb.setDescription('The value of tmnxBsxStatAaSubPktsAdmToSb indicates the total number of packets permitted for the network to subscriber direction.')
tmnxBsxStatAaSubFlwsAdmToSb = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 3, 1, 14), Counter32()).setUnits('flows').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaSubFlwsAdmToSb.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaSubFlwsAdmToSb.setDescription('The value of tmnxBsxStatAaSubFlwsAdmToSb indicates the total number of flows permitted for the network to subscriber direction.')
tmnxBsxStatAaSubOctsDnyToSb = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 3, 1, 15), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaSubOctsDnyToSb.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaSubOctsDnyToSb.setDescription('The value of tmnxBsxStatAaSubOctsDnyToSb indicates the total number of bytes dropped for the network to subscriber direction.')
tmnxBsxStatAaSubPktsDnyToSb = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 3, 1, 16), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaSubPktsDnyToSb.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaSubPktsDnyToSb.setDescription('The value of tmnxBsxStatAaSubPktsDnyToSb indicates the total number of packets dropped for the network to subscriber direction.')
tmnxBsxStatAaSubFlwsDnyToSb = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 3, 1, 17), Counter32()).setUnits('flows').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaSubFlwsDnyToSb.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaSubFlwsDnyToSb.setDescription('The value of tmnxBsxStatAaSubFlwsDnyToSb indicates the total number of flows that dropped subsequent packets in the network to subscriber direction.')
tmnxBsxStatAaSubTermFlwDur = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 3, 1, 18), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaSubTermFlwDur.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaSubTermFlwDur.setDescription('The value of tmnxBsxStatAaSubTermFlwDur indicates the sum of all flow durations from first packet seen to last packet seen for flows that have terminated.')
tmnxBsxStatAaSubTermFlws = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 3, 1, 19), Counter32()).setUnits('flows').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaSubTermFlws.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaSubTermFlws.setDescription('The value of tmnxBsxStatAaSubTermFlws indicates the total number of allowed flows that have terminated.')
tmnxBsxStatAaSubShrtDurFlws = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 3, 1, 20), Counter32()).setUnits('flows').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaSubShrtDurFlws.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaSubShrtDurFlws.setDescription('The value of tmnxBsxStatAaSubShrtDurFlws indicates the total number of flows with a duration less than or equal to 30 seconds, that have completed.')
tmnxBsxStatAaSubMedDurFlws = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 3, 1, 21), Counter32()).setUnits('flows').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaSubMedDurFlws.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaSubMedDurFlws.setDescription('The value of tmnxBsxStatAaSubMedDurFlws indicates the total number of flows with a duration less than or equal to 180 seconds, but greater than 30 seconds, that have completed.')
tmnxBsxStatAaSubLngDurFlws = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 3, 1, 22), Counter32()).setUnits('flows').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaSubLngDurFlws.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaSubLngDurFlws.setDescription('The value of tmnxBsxStatAaSubLngDurFlws indicates the total number of flows with a duration greater than 180 seconds, that have completed.')
tmnxBsxStatAaSubActFlwsFmSb = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 3, 1, 23), Gauge32()).setUnits('flows').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaSubActFlwsFmSb.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaSubActFlwsFmSb.setDescription('The value of tmnxBsxStatAaSubActFlwsFmSb indicates the number of allowed flows in the subscriber to network direction that are active.')
tmnxBsxStatAaSubActFlwsToSb = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 3, 1, 24), Gauge32()).setUnits('flows').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaSubActFlwsToSb.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaSubActFlwsToSb.setDescription('The value of tmnxBsxStatAaSubActFlwsToSb indicates the number of allowed flows in the network to subscriber direction that are active.')
tmnxBsxStatAaSubHCOctsAdmFmSb = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 3, 1, 25), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaSubHCOctsAdmFmSb.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaSubHCOctsAdmFmSb.setDescription('The value of tmnxBsxStatAaSubHCOctsAdmFmSb indicates the total number of bytes permitted for the subscriber to network direction. This object is a 64-bit version of tmnxBsxStatAaSubOctsAdmFmSb.')
tmnxBsxStatAaSubHCPktsAdmFmSb = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 3, 1, 26), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaSubHCPktsAdmFmSb.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaSubHCPktsAdmFmSb.setDescription('The value of tmnxBsxStatAaSubHCPktsAdmFmSb indicates the total number of packets permitted for the subscriber to network direction. This object is a 64-bit version of tmnxBsxStatAaSubPktsAdmFmSb.')
tmnxBsxStatAaSubHCFlwsAdmFmSb = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 3, 1, 27), Counter64()).setUnits('flows').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaSubHCFlwsAdmFmSb.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaSubHCFlwsAdmFmSb.setDescription('The value of tmnxBsxStatAaSubHCFlwsAdmFmSb indicates the total number of flows permitted for the subscriber to network direction. This object is a 64-bit version of tmnxBsxStatAaSubFlwsAdmFmSb.')
tmnxBsxStatAaSubHCOctsDnyFmSb = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 3, 1, 28), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaSubHCOctsDnyFmSb.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaSubHCOctsDnyFmSb.setDescription('The value of tmnxBsxStatAaSubHCOctsDnyFmSb indicates the total number of bytes dropped for the subscriber to network direction. This object is a 64-bit version of tmnxBsxStatAaSubOctsDnyFmSb.')
tmnxBsxStatAaSubHCPktsDnyFmSb = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 3, 1, 29), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaSubHCPktsDnyFmSb.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaSubHCPktsDnyFmSb.setDescription('The value of tmnxBsxStatAaSubHCPktsDnyFmSb indicates the total number of packets dropped for the subscriber to network direction. This object is a 64-bit version of tmnxBsxStatAaSubPktsDnyFmSb.')
tmnxBsxStatAaSubHCFlwsDnyFmSb = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 3, 1, 30), Counter64()).setUnits('flows').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaSubHCFlwsDnyFmSb.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaSubHCFlwsDnyFmSb.setDescription('The value of tmnxBsxStatAaSubHCFlwsDnyFmSb indicates the total number of flows that dropped subsequent packets in the subscriber to network direction. This object is a 64-bit version of tmnxBsxStatAaSubFlwsDnyFmSb.')
tmnxBsxStatAaSubHCOctsAdmToSb = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 3, 1, 31), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaSubHCOctsAdmToSb.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaSubHCOctsAdmToSb.setDescription('The value of tmnxBsxStatAaSubHCOctsAdmToSb indicates the total number of bytes permitted for the network to subscriber direction. This object is a 64-bit version of tmnxBsxStatAaSubOctsAdmToSb.')
tmnxBsxStatAaSubHCPktsAdmToSb = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 3, 1, 32), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaSubHCPktsAdmToSb.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaSubHCPktsAdmToSb.setDescription('The value of tmnxBsxStatAaSubHCPktsAdmToSb indicates the total number of packets permitted for the network to subscriber direction. This object is a 64-bit version of tmnxBsxStatAaSubPktsAdmToSb.')
tmnxBsxStatAaSubHCFlwsAdmToSb = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 3, 1, 33), Counter64()).setUnits('flows').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaSubHCFlwsAdmToSb.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaSubHCFlwsAdmToSb.setDescription('The value of tmnxBsxStatAaSubHCFlwsAdmToSb indicates the total number of flows permitted for the network to subscriber direction. This object is a 64-bit version of tmnxBsxStatAaSubFlwsAdmToSb.')
tmnxBsxStatAaSubHCOctsDnyToSb = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 3, 1, 34), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaSubHCOctsDnyToSb.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaSubHCOctsDnyToSb.setDescription('The value of tmnxBsxStatAaSubHCOctsDnyToSb indicates the total number of bytes dropped for the network to subscriber direction. This object is a 64-bit version of tmnxBsxStatAaSubOctsDnyToSb.')
tmnxBsxStatAaSubHCPktsDnyToSb = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 3, 1, 35), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaSubHCPktsDnyToSb.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaSubHCPktsDnyToSb.setDescription('The value of tmnxBsxStatAaSubHCPktsDnyToSb indicates the total number of packets dropped for the network to subscriber direction. This object is a 64-bit version of tmnxBsxStatAaSubPktsDnyToSb.')
tmnxBsxStatAaSubHCFlwsDnyToSb = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 3, 1, 36), Counter64()).setUnits('flows').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaSubHCFlwsDnyToSb.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaSubHCFlwsDnyToSb.setDescription('The value of tmnxBsxStatAaSubHCFlwsDnyToSb indicates the total number of flows that dropped subsequent packets in the network to subscriber direction. This object is the 64-bit version of tmnxBsxStatAaSubFlwsDnyToSb.')
tmnxBsxStatAaSubHCTermFlwDur = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 3, 1, 37), Counter64()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaSubHCTermFlwDur.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaSubHCTermFlwDur.setDescription('The value of tmnxBsxStatAaSubHCTermFlwDur indicates the sum of all flow durations from first packet seen to last packet seen for flows that have terminated. This object is a 64-bit version of tmnxBsxStatAaSubTermFlwDur.')
tmnxBsxStatAaSubHCTermFlws = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 3, 1, 38), Counter64()).setUnits('flows').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaSubHCTermFlws.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaSubHCTermFlws.setDescription('The value of tmnxBsxStatAaSubHCTermFlws indicates the total number of allowed flows that have terminated. This object is a 64-bit version of tmnxBsxStatAaSubTermFlws.')
tmnxBsxStatAaSubHCShrtDurFlws = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 3, 1, 39), Counter64()).setUnits('flows').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaSubHCShrtDurFlws.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaSubHCShrtDurFlws.setDescription('The value of tmnxBsxStatAaSubHCShrtDurFlws indicates the total number of flows with a duration less than or equal to 30 seconds, that have completed. This object is a 64-bit version of tmnxBsxStatAaSubShrtDurFlws.')
tmnxBsxStatAaSubHCMedDurFlws = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 3, 1, 40), Counter64()).setUnits('flows').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaSubHCMedDurFlws.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaSubHCMedDurFlws.setDescription('The value of tmnxBsxStatAaSubHCMedDurFlws indicates the total number of flows with a duration less than or equal to 180 seconds, but greater than 30 seconds, that have completed. This object is a 64-bit version of tmnxBsxStatAaSubMedDurFlws.')
tmnxBsxStatAaSubHCLngDurFlws = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 3, 1, 41), Counter64()).setUnits('flows').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaSubHCLngDurFlws.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaSubHCLngDurFlws.setDescription('The value of tmnxBsxStatAaSubHCLngDurFlws indicates the total number of flows with a duration greater than 180 seconds, that have completed. This object is a 64-bit version of tmnxBsxStatAaSubLngDurFlws.')
tmnxBsxStatAaSubSdyTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 4), )
if mibBuilder.loadTexts: tmnxBsxStatAaSubSdyTable.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaSubSdyTable.setDescription('The tmnxBsxStatAaSubSdyTable contains an entry for each application-assurance special study subscriber for each statistics type within a group, partition and statistics interval. Each row contains the application assurance per-subscriber statistics collected for the special study subscriber. A subscriber is uniquely identified by a tmnxBsxAaSubscriberType and tmnxBsxAaSubscriber.')
tmnxBsxStatAaSubSdyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 4, 1), ).setIndexNames((0, "TIMETRA-BSX-NG-MIB", "tmnxBsxAaGrpPartIndex"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubStatsInterval"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaType"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubscriberType"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubscriber"), (1, "TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaName"))
if mibBuilder.loadTexts: tmnxBsxStatAaSubSdyEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaSubSdyEntry.setDescription("Each tmnxBsxStatAaSubSdyEntry contains the application assurance per-special study subscriber statistics for a combination of group, partition, statistics interval, statistics type, subscriber, and statistics name. A value of 'chargingGroup (4)' is not supported for the tmnxBsxStatAaType. ")
tmnxBsxStatAaSubSdyDiscontTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 4, 1, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaSubSdyDiscontTime.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaSubSdyDiscontTime.setDescription('The value of tmnxBsxStatAaSubSdyDiscontTime indicates the SNMPv2-MIB::sysUpTime (hundredths of a second) when any of the active ISA-AA MDAs within the group have last changed status.')
tmnxBsxStatAaSubSdyOctsAdmFmSb = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 4, 1, 2), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaSubSdyOctsAdmFmSb.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaSubSdyOctsAdmFmSb.setDescription('The value of tmnxBsxStatAaSubSdyOctsAdmFmSb indicates the total number of bytes permitted for the subscriber to network direction.')
tmnxBsxStatAaSubSdyPktsAdmFmSb = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 4, 1, 3), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaSubSdyPktsAdmFmSb.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaSubSdyPktsAdmFmSb.setDescription('The value of tmnxBsxStatAaSubSdyPktsAdmFmSb indicates the total number of packets permitted for the subscriber to network direction.')
tmnxBsxStatAaSubSdyFlwsAdmFmSb = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 4, 1, 4), Counter32()).setUnits('flows').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaSubSdyFlwsAdmFmSb.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaSubSdyFlwsAdmFmSb.setDescription('The value of tmnxBsxStatAaSubSdyFlwsAdmFmSb indicates the total number of flows permitted for the subscriber to network direction.')
tmnxBsxStatAaSubSdyOctsDnyFmSb = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 4, 1, 5), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaSubSdyOctsDnyFmSb.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaSubSdyOctsDnyFmSb.setDescription('The value of tmnxBsxStatAaSubSdyOctsDnyFmSb indicates the total number of bytes dropped for the subscriber to network direction.')
tmnxBsxStatAaSubSdyPktsDnyFmSb = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 4, 1, 6), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaSubSdyPktsDnyFmSb.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaSubSdyPktsDnyFmSb.setDescription('The value of tmnxBsxStatAaSubSdyPktsDnyFmSb indicates the total number of packets dropped for the subscriber to network direction.')
tmnxBsxStatAaSubSdyFlwsDnyFmSb = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 4, 1, 7), Counter32()).setUnits('flows').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaSubSdyFlwsDnyFmSb.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaSubSdyFlwsDnyFmSb.setDescription('The value of tmnxBsxStatAaSubSdyFlwsDnyFmSb indicates the total number of flows that dropped subsequent packets in the subscriber to network direction.')
tmnxBsxStatAaSubSdyOctsAdmToSb = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 4, 1, 8), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaSubSdyOctsAdmToSb.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaSubSdyOctsAdmToSb.setDescription('The value of tmnxBsxStatAaSubSdyOctsAdmToSb indicates the total number of bytes permitted for the network to subscriber direction.')
tmnxBsxStatAaSubSdyPktsAdmToSb = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 4, 1, 9), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaSubSdyPktsAdmToSb.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaSubSdyPktsAdmToSb.setDescription('The value of tmnxBsxStatAaSubSdyPktsAdmToSb indicates the total number of packets permitted for the network to subscriber direction.')
tmnxBsxStatAaSubSdyFlwsAdmToSb = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 4, 1, 10), Counter32()).setUnits('flows').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaSubSdyFlwsAdmToSb.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaSubSdyFlwsAdmToSb.setDescription('The value of tmnxBsxStatAaSubSdyFlwsAdmToSb indicates the total number of flows permitted for the network to subscriber direction.')
tmnxBsxStatAaSubSdyOctsDnyToSb = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 4, 1, 11), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaSubSdyOctsDnyToSb.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaSubSdyOctsDnyToSb.setDescription('The value of tmnxBsxStatAaSubOctsDnyToSb indicates the total number of bytes dropped for the network to subscriber direction.')
tmnxBsxStatAaSubSdyPktsDnyToSb = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 4, 1, 12), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaSubSdyPktsDnyToSb.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaSubSdyPktsDnyToSb.setDescription('The value of tmnxBsxStatAaSubSdyPktsDnyToSb indicates the total number of packets dropped for the network to subscriber direction.')
tmnxBsxStatAaSubSdyFlwsDnyToSb = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 4, 1, 13), Counter32()).setUnits('flows').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaSubSdyFlwsDnyToSb.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaSubSdyFlwsDnyToSb.setDescription('The value of tmnxBsxStatAaSubSdyFlwsDnyToSb indicates the total number of flows that dropped subsequent packets in the network to subscriber direction.')
tmnxBsxStatAaSubSdyTermFlwDur = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 4, 1, 14), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaSubSdyTermFlwDur.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaSubSdyTermFlwDur.setDescription('The value of tmnxBsxStatAaSubSdyTermFlwDur indicates the sum of all flow durations from first packet seen to last packet seen for flows that have terminated.')
tmnxBsxStatAaSubSdyTermFlws = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 4, 1, 15), Counter32()).setUnits('flows').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaSubSdyTermFlws.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaSubSdyTermFlws.setDescription('The value of tmnxBsxStatAaSubSdyTermFlws indicates the total number of allowed flows that have terminated.')
tmnxBsxStatAaSubSdyShrtDurFlws = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 4, 1, 16), Counter32()).setUnits('flows').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaSubSdyShrtDurFlws.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaSubSdyShrtDurFlws.setDescription('The value of tmnxBsxStatAaSubSdyShrtDurFlws indicates the total number of flows with a duration less than or equal to 30 seconds, that have completed.')
tmnxBsxStatAaSubSdyMedDurFlws = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 4, 1, 17), Counter32()).setUnits('flows').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaSubSdyMedDurFlws.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaSubSdyMedDurFlws.setDescription('The value of tmnxBsxStatAaSubSdyMedDurFlws indicates the total number of flows with a duration less than or equal to 180 seconds, but greater than 30 seconds, that have completed.')
tmnxBsxStatAaSubSdyLngDurFlws = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 4, 1, 18), Counter32()).setUnits('flows').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaSubSdyLngDurFlws.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaSubSdyLngDurFlws.setDescription('The value of tmnxBsxStatAaSubSdyLngDurFlws indicates the total number of flows with a duration greater than 180 seconds, that have completed.')
tmnxBsxStatAaSubSdyActFlwsFmSb = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 4, 1, 19), Gauge32()).setUnits('flows').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaSubSdyActFlwsFmSb.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaSubSdyActFlwsFmSb.setDescription('The value of tmnxBsxStatAaSubSdyActFlwsFmSb indicates the number of allowed flows in the subscriber to network direction that are active.')
tmnxBsxStatAaSubSdyActFlwsToSb = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 4, 1, 20), Gauge32()).setUnits('flows').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaSubSdyActFlwsToSb.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaSubSdyActFlwsToSb.setDescription('The value of tmnxBsxStatAaSubSdyActFlwsToSb indicates the number of allowed flows in the network to subscriber direction that are active.')
tmnxBsxStatAaSubSdyHCOctsAdmFmSb = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 4, 1, 21), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaSubSdyHCOctsAdmFmSb.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaSubSdyHCOctsAdmFmSb.setDescription('The value of tmnxBsxStatAaSubSdyHCOctsAdmFmSb indicates the total number of bytes permitted for the subscriber to network direction. This object is a 64-bit version of tmnxBsxStatAaSubSdyOctsAdmFmSb.')
tmnxBsxStatAaSubSdyHCPktsAdmFmSb = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 4, 1, 22), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaSubSdyHCPktsAdmFmSb.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaSubSdyHCPktsAdmFmSb.setDescription('The value of tmnxBsxStatAaSubSdyHCPktsAdmFmSb indicates the total number of packets permitted for the subscriber to network direction. This object is a 64-bit version of tmnxBsxStatAaSubSdyPktsAdmFmSb.')
tmnxBsxStatAaSubSdyHCFlwsAdmFmSb = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 4, 1, 23), Counter64()).setUnits('flows').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaSubSdyHCFlwsAdmFmSb.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaSubSdyHCFlwsAdmFmSb.setDescription('The value of tmnxBsxStatAaSubSdyHCFlwsAdmFmSb indicates the total number of flows permitted for the subscriber to network direction. This object is a 64-bit version of tmnxBsxStatAaSubSdyFlwsAdmFmSb.')
tmnxBsxStatAaSubSdyHCOctsDnyFmSb = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 4, 1, 24), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaSubSdyHCOctsDnyFmSb.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaSubSdyHCOctsDnyFmSb.setDescription('The value of tmnxBsxStatAaSubSdyHCOctsDnyFmSb indicates the total number of bytes dropped for the subscriber to network direction. This object is a 64-bit version of tmnxBsxStatAaSubSdyOctsDnyFmSb.')
tmnxBsxStatAaSubSdyHCPktsDnyFmSb = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 4, 1, 25), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaSubSdyHCPktsDnyFmSb.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaSubSdyHCPktsDnyFmSb.setDescription('The value of tmnxBsxStatAaSubSdyHCPktsDnyFmSb indicates the total number of packets dropped for the subscriber to network direction. This object is a 64-bit version of tmnxBsxStatAaSubSdyPktsDnyFmSb.')
tmnxBsxStatAaSubSdyHCFlwsDnyFmSb = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 4, 1, 26), Counter64()).setUnits('flows').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaSubSdyHCFlwsDnyFmSb.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaSubSdyHCFlwsDnyFmSb.setDescription('The value of tmnxBsxStatAaSubSdyHCFlwsDnyFmSb indicates the total number of flows that dropped subsequent packets in the subscriber to network direction. This object is a 64-bit version of tmnxBsxStatAaSubSdyFlwsDnyFmSb.')
tmnxBsxStatAaSubSdyHCOctsAdmToSb = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 4, 1, 27), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaSubSdyHCOctsAdmToSb.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaSubSdyHCOctsAdmToSb.setDescription('The value of tmnxBsxStatAaSubSdyHCOctsAdmToSb indicates the total number of bytes permitted for the network to subscriber direction. This object is a 64-bit version of tmnxBsxStatAaSubSdyOctsAdmToSb.')
tmnxBsxStatAaSubSdyHCPktsAdmToSb = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 4, 1, 28), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaSubSdyHCPktsAdmToSb.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaSubSdyHCPktsAdmToSb.setDescription('The value of tmnxBsxStatAaSubSdyHCPktsAdmToSb indicates the total number of packets permitted for the network to subscriber direction. This object is a 64-bit version of tmnxBsxStatAaSubSdyPktsAdmToSb.')
tmnxBsxStatAaSubSdyHCFlwsAdmToSb = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 4, 1, 29), Counter64()).setUnits('flows').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaSubSdyHCFlwsAdmToSb.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaSubSdyHCFlwsAdmToSb.setDescription('The value of tmnxBsxStatAaSubSdyHCFlwsAdmToSb indicates the total number of flows permitted for the network to subscriber direction. This object is a 64-bit version of tmnxBsxStatAaSubSdyFlwsAdmToSb.')
tmnxBsxStatAaSubSdyHCOctsDnyToSb = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 4, 1, 30), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaSubSdyHCOctsDnyToSb.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaSubSdyHCOctsDnyToSb.setDescription('The value of tmnxBsxStatAaSubSdyHCOctsDnyToSb indicates the total number of bytes dropped for the network to subscriber direction. This object is a 64-bit version of tmnxBsxStatAaSubSdyOctsDnyToSb.')
tmnxBsxStatAaSubSdyHCPktsDnyToSb = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 4, 1, 31), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaSubSdyHCPktsDnyToSb.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaSubSdyHCPktsDnyToSb.setDescription('The value of tmnxBsxStatAaSubSdyHCPktsDnyToSb indicates the total number of packets dropped for the network to subscriber direction. This object is a 64-bit version of tmnxBsxStatAaSubSdyPktsDnyToSb.')
tmnxBsxStatAaSubSdyHCFlwsDnyToSb = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 4, 1, 32), Counter64()).setUnits('flows').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaSubSdyHCFlwsDnyToSb.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaSubSdyHCFlwsDnyToSb.setDescription('The value of tmnxBsxStatAaSubSdyHCFlwsDnyToSb indicates the total number of flows that dropped subsequent packets in the network to subscriber direction. This object is a 64-bit version of tmnxBsxStatAaSubSdyFlwsDnyToSb.')
tmnxBsxStatAaSubSdyHCTermFlwDur = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 4, 1, 33), Counter64()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaSubSdyHCTermFlwDur.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaSubSdyHCTermFlwDur.setDescription('The value of tmnxBsxStatAaSubSdyHCTermFlwDur indicates the sum of all flow durations from first packet seen to last packet seen for flows that have terminated. This object is a 64-bit version of tmnxBsxStatAaSubSdyTermFlwDur.')
tmnxBsxStatAaSubSdyHCTermFlws = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 4, 1, 34), Counter64()).setUnits('flows').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaSubSdyHCTermFlws.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaSubSdyHCTermFlws.setDescription('The value of tmnxBsxStatAaSubSdyHCTermFlws indicates the total number of allowed flows that have terminated. This object is a 64-bit version of tmnxBsxStatAaSubSdyTermFlws.')
tmnxBsxStatAaSubSdyHCShrtDurFlws = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 4, 1, 35), Counter64()).setUnits('flows').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaSubSdyHCShrtDurFlws.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaSubSdyHCShrtDurFlws.setDescription('The value of tmnxBsxStatAaSubSdyHCShrtDurFlws indicates the total number of flows with a duration less than or equal to 30 seconds, that have completed. This object is a 64-bit version of tmnxBsxStatAaSubSdyShrtDurFlws.')
tmnxBsxStatAaSubSdyHCMedDurFlws = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 4, 1, 36), Counter64()).setUnits('flows').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaSubSdyHCMedDurFlws.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaSubSdyHCMedDurFlws.setDescription('The value of tmnxBsxStatAaSubSdyHCMedDurFlws indicates the total number of flows with a duration less than or equal to 180 seconds, but greater than 30 seconds, that have completed. This object is a 64-bit version of tmnxBsxStatAaSubSdyMedDurFlws.')
tmnxBsxStatAaSubSdyHCLngDurFlws = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 4, 1, 37), Counter64()).setUnits('flows').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaSubSdyHCLngDurFlws.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaSubSdyHCLngDurFlws.setDescription('The value of tmnxBsxStatAaSubSdyHCLngDurFlws indicates the total number of flows with a duration greater than 180 seconds, that have completed. This object is a 64-bit version of tmnxBsxStatAaSubSdyLngDurFlws.')
tmnxBsxStatAaSubCfgTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 5), )
if mibBuilder.loadTexts: tmnxBsxStatAaSubCfgTable.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaSubCfgTable.setDescription('The tmnxBsxStatAaSubCfgTable contains an entry for each ISA-AA statistics type that has per-subscriber statistics enabled.')
tmnxBsxStatAaSubCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 5, 1), ).setIndexNames((0, "TIMETRA-BSX-NG-MIB", "tmnxBsxAaGrpPartIndex"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaType"), (1, "TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaName"))
if mibBuilder.loadTexts: tmnxBsxStatAaSubCfgEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaSubCfgEntry.setDescription('Each tmnxBsxStatAaSubCfgEntry specifies an application assurance group, partition and statistic type and name for which subscriber statistics are enabled.')
tmnxBsxStatAaSubCfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 5, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxStatAaSubCfgRowStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaSubCfgRowStatus.setDescription("The value of tmnxBsxStatAaSubCfgRowStatus specifies the row status. It allows entries to be created and deleted in the tmnxBsxStatAaSubCfgTable. Rows are created by specifying the value of 'createAndGo (4)', and deleted by specifying the value of 'destroy (6)'.")
tmnxBsxStatAaSubCfgExportMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 5, 1, 2), TmnxBsxAaStatExportMethod()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxStatAaSubCfgExportMethod.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaSubCfgExportMethod.setDescription("The value of tmnxBsxStatAaSubCfgExportMethod specifies the method used to export subscriber statistics. When tmnxBsxStatAaType has a value of 'chargingGroup(4)', a value for tmnxBsxStatAaSubCfgExportMethod must be supplied during row creation. Otherwise, upon row creation, tmnxBsxStatAaSubCfgExportMethod will have by default only the 'accountingPolicy(0)' bit set.")
tmnxBsxStatAaSubSdyCfgTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 6), )
if mibBuilder.loadTexts: tmnxBsxStatAaSubSdyCfgTable.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaSubSdyCfgTable.setDescription('The tmnxBsxStatAaSubSdyCfgTable contains an entry for each special study subscriber and statistics type that has statistics enabled.')
tmnxBsxStatAaSubSdyCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 6, 1), ).setIndexNames((0, "TIMETRA-BSX-NG-MIB", "tmnxBsxAaGrpPartIndex"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaType"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubscriberType"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubscriber"))
if mibBuilder.loadTexts: tmnxBsxStatAaSubSdyCfgEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaSubSdyCfgEntry.setDescription('Each tmnxBsxStatAaSubSdyCfgEntry specifies an application assurance group index, statistics type, and subscriber for which protocol statistics are enabled.')
tmnxBsxStatAaSubSdyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 6, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxStatAaSubSdyRowStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaSubSdyRowStatus.setDescription("The value of tmnxBsxStatAaSubSdyRowStatus specifies the row status. It allows entries to be created and deleted in the tmnxBsxStatAaSubSdyCfgTable. Rows are created by specifying the value of 'createAndGo (4)', and deleted by specifying the value of 'destroy (6)'.")
tmnxBsxStatAaTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 7), )
if mibBuilder.loadTexts: tmnxBsxStatAaTable.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaTable.setDescription('The tmnxBsxStatAaTable contains an entry for each system wide statistics type and statistics name per group and partition.')
tmnxBsxStatAaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 7, 1), ).setIndexNames((0, "TIMETRA-BSX-NG-MIB", "tmnxBsxAaGrpPartIndex"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaType"), (1, "TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaName"))
if mibBuilder.loadTexts: tmnxBsxStatAaEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaEntry.setDescription("Each tmnxBsxStatAaEntry contains the statistics for a particular group, partition, statistics type and statistics name. A value of 'chargingGroup (4)' is not supported for the tmnxBsxStatAaType. ")
tmnxBsxStatAaDiscontTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 7, 1, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaDiscontTime.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaDiscontTime.setDescription('The value of tmnxBsxStatAaDiscontTime indicates the SNMPv2-MIB::sysUpTime (hundredths of a second) when any of the active ISA-AA within the group last changed status.')
tmnxBsxStatAaOctsAdmFmSb = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 7, 1, 2), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaOctsAdmFmSb.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaOctsAdmFmSb.setDescription('The value of tmnxBsxStatAaOctsAdmFmSb indicates the total number of bytes permitted for the subscriber to network direction.')
tmnxBsxStatAaPktsAdmFmSb = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 7, 1, 3), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaPktsAdmFmSb.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaPktsAdmFmSb.setDescription('The value of tmnxBsxStatAaPktsAdmFmSb indicates the total number of packets permitted for the subscriber to network direction.')
tmnxBsxStatAaFlwsAdmFmSb = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 7, 1, 4), Counter32()).setUnits('flows').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaFlwsAdmFmSb.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaFlwsAdmFmSb.setDescription('The value of tmnxBsxStatAaFlwsAdmFmSb indicates the total number of flows permitted for the subscriber to network direction.')
tmnxBsxStatAaOctsDnyFmSb = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 7, 1, 5), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaOctsDnyFmSb.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaOctsDnyFmSb.setDescription('The value of tmnxBsxStatAaOctsDnyFmSb indicates the total number of bytes dropped for the subscriber to network direction.')
tmnxBsxStatAaPktsDnyFmSb = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 7, 1, 6), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaPktsDnyFmSb.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaPktsDnyFmSb.setDescription('The value of tmnxBsxStatAaPktsDnyFmSb indicates the total number of packets dropped for the subscriber to network direction.')
tmnxBsxStatAaFlwsDnyFmSb = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 7, 1, 7), Counter32()).setUnits('flows').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaFlwsDnyFmSb.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaFlwsDnyFmSb.setDescription('The value of tmnxBsxStatAaFlwsDnyFmSb indicates the total number of flows the dropped subsequent packets in the subscriber to network direction.')
tmnxBsxStatAaOctsAdmToSb = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 7, 1, 8), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaOctsAdmToSb.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaOctsAdmToSb.setDescription('The value of tmnxBsxStatAaOctsAdmToSb indicates the total number of bytes permitted for the network to subscriber direction.')
tmnxBsxStatAaPktsAdmToSb = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 7, 1, 9), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaPktsAdmToSb.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaPktsAdmToSb.setDescription('The value of tmnxBsxStatAaPktsAdmToSb indicates the total number of packets permitted for the network to subscriber direction.')
tmnxBsxStatAaFlwsAdmToSb = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 7, 1, 10), Counter32()).setUnits('flows').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaFlwsAdmToSb.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaFlwsAdmToSb.setDescription('The value of tmnxBsxStatAaFlwsAdmToSb indicates the total number of flows permitted for the network to subscriber direction.')
tmnxBsxStatAaOctsDnyToSb = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 7, 1, 11), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaOctsDnyToSb.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaOctsDnyToSb.setDescription('The value of tmnxBsxStatAaOctsDnyToSb indicates the total number of bytes dropped for the network to subscriber direction.')
tmnxBsxStatAaPktsDnyToSb = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 7, 1, 12), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaPktsDnyToSb.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaPktsDnyToSb.setDescription('The value of tmnxBsxStatAaPktsDnyToSb indicates the total number of packets dropped for the network to subscriber direction.')
tmnxBsxStatAaFlwsDnyToSb = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 7, 1, 13), Counter32()).setUnits('flows').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaFlwsDnyToSb.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaFlwsDnyToSb.setDescription('The value of tmnxBsxStatAaFlwsDnyToSb indicates the total number of flows that dropped subsequent packets in the network to subscriber direction.')
tmnxBsxStatAaTermFlwDur = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 7, 1, 14), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaTermFlwDur.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaTermFlwDur.setDescription('The value of tmnxBsxStatAaTermFlwDur indicates the sum of all flow durations from first packet seen to last packet seen for flows that have terminated.')
tmnxBsxStatAaTermFlws = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 7, 1, 15), Counter32()).setUnits('flows').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaTermFlws.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaTermFlws.setDescription('The value of tmnxBsxStatAaTermFlws indicates the total number of allowed flows in both directions that have terminated.')
tmnxBsxStatAaShrtDurFlws = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 7, 1, 16), Counter32()).setUnits('flows').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaShrtDurFlws.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaShrtDurFlws.setDescription('The value of tmnxBsxStatAaShrtDurFlws indicates the total number of flows with a duration less than or equal to 30 seconds, that have completed.')
tmnxBsxStatAaMedDurFlws = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 7, 1, 17), Counter32()).setUnits('flows').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaMedDurFlws.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaMedDurFlws.setDescription('The value of tmnxBsxStatAaMedDurFlws indicates the total number of flows with a duration less than or equal to 180 seconds, but greater than 30 seconds, that have completed.')
tmnxBsxStatAaLngDurFlws = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 7, 1, 18), Counter32()).setUnits('flows').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaLngDurFlws.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaLngDurFlws.setDescription('The value of tmnxBsxStatAaLngDurFlws indicates the total number of flows with a duration greater than 180 seconds, that have completed.')
tmnxBsxStatAaActFlwsFmSb = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 7, 1, 19), Gauge32()).setUnits('flows').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaActFlwsFmSb.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaActFlwsFmSb.setDescription('The value of tmnxBsxStatAaActFlwsFmSb indicates the number of allowed flows in the subscriber to network direction that are active.')
tmnxBsxStatAaActFlwsToSb = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 7, 1, 20), Gauge32()).setUnits('flows').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaActFlwsToSb.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaActFlwsToSb.setDescription('The value of tmnxBsxStatAaActFlwsToSb indicates the number of allowed flows in the network to subscriber direction that are active.')
tmnxBsxStatAaNumSubscribers = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 7, 1, 21), Gauge32()).setUnits('subscribers').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaNumSubscribers.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaNumSubscribers.setDescription('The value of tmnxBsxStatAaNumSubscribers indicates the number of subscribers at the most recent 5-minute snapshot of statistics.')
tmnxBsxStatAaHCOctsAdmFmSb = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 7, 1, 22), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaHCOctsAdmFmSb.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaHCOctsAdmFmSb.setDescription('The value of tmnxBsxStatAaHCOctsAdmFmSb indicates the total number of bytes permitted for the subscriber to network direction. This object is a 64-bit version of tmnxBsxStatAaOctsAdmFmSb.')
tmnxBsxStatAaHCPktsAdmFmSb = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 7, 1, 23), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaHCPktsAdmFmSb.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaHCPktsAdmFmSb.setDescription('The value of tmnxBsxStatAaHCPktsAdmFmSb indicates the total number of packets permitted for the subscriber to network direction. This object is a 64-bit version of tmnxBsxStatAaPktsAdmFmSb.')
tmnxBsxStatAaHCFlwsAdmFmSb = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 7, 1, 24), Counter64()).setUnits('flows').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaHCFlwsAdmFmSb.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaHCFlwsAdmFmSb.setDescription('The value of tmnxBsxStatAaHCFlwsAdmFmSb indicates the total number of flows permitted for the subscriber to network direction. This object is a 64-bit version of tmnxBsxStatAaFlwsAdmFmSb.')
tmnxBsxStatAaHCOctsDnyFmSb = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 7, 1, 25), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaHCOctsDnyFmSb.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaHCOctsDnyFmSb.setDescription('The value of tmnxBsxStatAaHCOctsDnyFmSb indicates the total number of bytes dropped for the subscriber to network direction. This object is a 64-bit version of tmnxBsxStatAaOctsDnyFmSb.')
tmnxBsxStatAaHCPktsDnyFmSb = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 7, 1, 26), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaHCPktsDnyFmSb.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaHCPktsDnyFmSb.setDescription('The value of tmnxBsxStatAaHCPktsDnyFmSb indicates the total number of packets dropped for the subscriber to network direction. This object is a 64-bit version of tmnxBsxStatAaPktsDnyFmSb.')
tmnxBsxStatAaHCFlwsDnyFmSb = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 7, 1, 27), Counter64()).setUnits('flows').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaHCFlwsDnyFmSb.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaHCFlwsDnyFmSb.setDescription('The value of tmnxBsxStatAaHCFlwsDnyFmSb indicates the total number of flows the dropped subsequent packets in the subscriber to network direction. This object is a 64-bit version of tmnxBsxStatAaFlwsDnyFmSb.')
tmnxBsxStatAaHCOctsAdmToSb = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 7, 1, 28), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaHCOctsAdmToSb.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaHCOctsAdmToSb.setDescription('The value of tmnxBsxStatAaHCOctsAdmToSb indicates the total number of bytes permitted for the network to subscriber direction. This object is a 64-bit version of tmnxBsxStatAaOctsAdmToSb.')
tmnxBsxStatAaHCPktsAdmToSb = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 7, 1, 29), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaHCPktsAdmToSb.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaHCPktsAdmToSb.setDescription('The value of tmnxBsxStatAaHCPktsAdmToSb indicates the total number of packets permitted for the network to subscriber direction. This object is a 64-bit version of tmnxBsxStatAaPktsAdmToSb.')
tmnxBsxStatAaHCFlwsAdmToSb = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 7, 1, 30), Counter64()).setUnits('flows').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaHCFlwsAdmToSb.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaHCFlwsAdmToSb.setDescription('The value of tmnxBsxStatAaHCFlwsAdmToSb indicates the total number of flows permitted for the network to subscriber direction. This object is a 64-bit version of tmnxBsxStatAaFlwsAdmToSb.')
tmnxBsxStatAaHCOctsDnyToSb = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 7, 1, 31), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaHCOctsDnyToSb.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaHCOctsDnyToSb.setDescription('The value of tmnxBsxStatAaHCOctsDnyToSb indicates the total number of bytes dropped for the network to subscriber direction. This object is a 64-bit version of tmnxBsxStatAaOctsDnyToSb.')
tmnxBsxStatAaHCPktsDnyToSb = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 7, 1, 32), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaHCPktsDnyToSb.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaHCPktsDnyToSb.setDescription('The value of tmnxBsxStatAaHCPktsDnyToSb indicates the total number of packets dropped for the network to subscriber direction. This object is a 64-bit version of tmnxBsxStatAaPktsDnyToSb.')
tmnxBsxStatAaHCFlwsDnyToSb = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 7, 1, 33), Counter64()).setUnits('flows').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaHCFlwsDnyToSb.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaHCFlwsDnyToSb.setDescription('The value of tmnxBsxStatAaHCFlwsDnyToSb indicates the total number of flows that dropped subsequent packets in the network to subscriber direction. This object is a 64-bit version of tmnxBsxStatAaFlwsDnyToSb.')
tmnxBsxStatAaHCTermFlwDur = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 7, 1, 34), Counter64()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaHCTermFlwDur.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaHCTermFlwDur.setDescription('The value of tmnxBsxStatAaHCTermFlwDur indicates the sum of all flow durations from first packet seen to last packet seen for flows that have terminated. This object is a 64-bit version of tmnxBsxStatAaTermFlwDur.')
tmnxBsxStatAaHCTermFlws = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 7, 1, 35), Counter64()).setUnits('flows').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaHCTermFlws.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaHCTermFlws.setDescription('The value of tmnxBsxStatAaHCTermFlws indicates the total number of allowed flows in both directions that have terminated. This object is a 64-bit version of tmnxBsxStatAaTermFlws.')
tmnxBsxStatAaHCShrtDurFlws = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 7, 1, 36), Counter64()).setUnits('flows').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaHCShrtDurFlws.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaHCShrtDurFlws.setDescription('The value of tmnxBsxStatAaHCShrtDurFlws indicates the total number of flows with a duration less than or equal to 30 seconds, that have completed. This object is a 64-bit version of tmnxBsxStatAaShrtDurFlws.')
tmnxBsxStatAaHCMedDurFlws = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 7, 1, 37), Counter64()).setUnits('flows').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaHCMedDurFlws.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaHCMedDurFlws.setDescription('The value of tmnxBsxStatAaHCMedDurFlws indicates the total number of flows with a duration less than or equal to 180 seconds, but greater than 30 seconds, that have completed. This object is a 64-bit version of tmnxBsxStatAaMedDurFlws.')
tmnxBsxStatAaHCLngDurFlws = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 7, 1, 38), Counter64()).setUnits('flows').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaHCLngDurFlws.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaHCLngDurFlws.setDescription('The value of tmnxBsxStatAaHCLngDurFlws indicates the total number of flows with a duration greater than 180 seconds, that have completed. This object is a 64-bit version of tmnxBsxStatAaLngDurFlws.')
tmnxBsxStatAaAppFilterTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 8), )
if mibBuilder.loadTexts: tmnxBsxStatAaAppFilterTable.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaAppFilterTable.setDescription('The tmnxBsxStatAaAppFilterTable contains statistics for application filters as defined in the tmnxBsxAppFilterTable.')
tmnxBsxStatAaAppFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 8, 1), ).setIndexNames((0, "TIMETRA-BSX-NG-MIB", "tmnxBsxAaGrpPartIndex"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxAppFilterEntryId"))
if mibBuilder.loadTexts: tmnxBsxStatAaAppFilterEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaAppFilterEntry.setDescription('Each tmnxBsxStatAaAppFilterEntry row contains statistics for a specific filter entry.')
tmnxBsxStatAaAppFilterHCFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 8, 1, 1), Counter64()).setUnits('flows').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaAppFilterHCFlows.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaAppFilterHCFlows.setDescription('The value of tmnxBsxStatAaAppFilterHCFlows indicates the number of flows that have matched this entry.')
tmnxBsxStatAaAppFilterFlowsLo = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 8, 1, 2), Counter32()).setUnits('flows').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaAppFilterFlowsLo.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaAppFilterFlowsLo.setDescription('The value of tmnxBsxStatAaAppFilterFlowsLo indicates the lower 32-bits of tmnxBsxStatAaAppFilterHCFlows.')
tmnxBsxStatAaAppFilterFlowsHi = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 8, 1, 3), Counter32()).setUnits('flows').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaAppFilterFlowsHi.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaAppFilterFlowsHi.setDescription('The value of tmnxBsxStatAaAppFilterFlowsHi indicates the upper 32-bits of tmnxBsxStatAaAppFilterHCFlows.')
tmnxBsxStatAaAppFilterFlowHCOctC = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 8, 1, 4), Counter64()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaAppFilterFlowHCOctC.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaAppFilterFlowHCOctC.setDescription('The value of tmnxBsxStatAaAppFilterFlowHCOctC indicates the number of octets in the flows that have matched this entry.')
tmnxBsxStatAaAppFilterFlowOctCLo = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 8, 1, 5), Counter32()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaAppFilterFlowOctCLo.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaAppFilterFlowOctCLo.setDescription('The value of tmnxBsxStatAaAppFilterFlowOctCLo indicates the lower 32-bits of tmnxBsxStatAaAppFilterFlowHCOctC.')
tmnxBsxStatAaAppFilterFlowOctCHi = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 8, 1, 6), Counter32()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxStatAaAppFilterFlowOctCHi.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatAaAppFilterFlowOctCHi.setDescription('The value of tmnxBsxStatAaAppFilterFlowOctCLo indicates the upper 32-bits of tmnxBsxStatAaAppFilterFlowHCOctC.')
tmnxBsxStatIsaAaCfgTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 9), )
if mibBuilder.loadTexts: tmnxBsxStatIsaAaCfgTable.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatIsaAaCfgTable.setDescription('The tmnxBsxStatIsaAaCfgTable contains an entry for each ISA-AA group and ISA-AA group statistics type in the system. Each row contains the accounting policy and statistics configuration for the applicable ISA-AA group and ISA-AA group statistics type.')
tmnxBsxStatIsaAaCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 9, 1), ).setIndexNames((0, "TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGroupIndex"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxStatIsaAaCfgType"))
if mibBuilder.loadTexts: tmnxBsxStatIsaAaCfgEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatIsaAaCfgEntry.setDescription('The tmnxBsxStatIsaAaCfgEntry consists of the statistics configuration for an ISA-AA group.')
tmnxBsxStatIsaAaCfgType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 9, 1, 1), TmnxBsxStatIsaAaCfgType())
if mibBuilder.loadTexts: tmnxBsxStatIsaAaCfgType.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatIsaAaCfgType.setDescription("The value of tmnxBsxStatIsaAaCfgType specifies the ISA-AA group statistics configuration type for the row. The tmnxBsxStatIsaAaCfgType of 'unknown(0)' is not a valid index value.")
tmnxBsxStatIsaAaCfgCollStats = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 9, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxBsxStatIsaAaCfgCollStats.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatIsaAaCfgCollStats.setDescription('The value of tmnxBsxStatIsaAaCfgCollStats specifies that statistics collection is enabled.')
tmnxBsxStatIsaAaCfgPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 3, 9, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxBsxStatIsaAaCfgPolicy.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatIsaAaCfgPolicy.setDescription('The value of tmnxBsxStatIsaAaCfgPolicy specifies the accounting policy to use. The value 0 is used to disable the accounting policy.')
tmnxBsxNotifyIsaAaGroupIndex = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 4, 1), TmnxBsxIsaAaGroupIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxBsxNotifyIsaAaGroupIndex.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxNotifyIsaAaGroupIndex.setDescription('Used by all traps to indicate the ISA-AA Group.')
tmnxBsxNotifyActiveMda = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 4, 2), TmnxHwIndexOrZero()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxBsxNotifyActiveMda.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxNotifyActiveMda.setDescription('Used by all traps to indicate the currently active MDA.')
tmnxBsxNotifyActionStatus = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 4, 3), TmnxBsxActionStatus()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxBsxNotifyActionStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxNotifyActionStatus.setDescription('Used by traps to indicate the status of an action within the ISA-AA group.')
tmnxBsxNotifyAaSubscriberType = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 4, 4), TmnxBsxAaSubscriberType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxBsxNotifyAaSubscriberType.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxNotifyAaSubscriberType.setDescription('Used by traps to indicate the Application Assurance subscriber type.')
tmnxBsxNotifyAaSubscriberName = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 4, 5), TmnxBsxAaSubscriber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxBsxNotifyAaSubscriberName.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxNotifyAaSubscriberName.setDescription('Used by traps to indicate the Application Assurance subscriber name.')
tmnxBsxNotifyAaSubAcctLossReason = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 4, 6), TmnxBsxAaSubAcctLossReason()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxBsxNotifyAaSubAcctLossReason.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxNotifyAaSubAcctLossReason.setDescription('Used by traps to indicate the reason for a loss of Application Assurance subscriber accounting statistics.')
tmnxBsxNotifyAaGrpPartIndex = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 4, 7), TmnxBsxAaGrpPartIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxBsxNotifyAaGrpPartIndex.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxNotifyAaGrpPartIndex.setDescription('Used by notifications to indicate the Application Assurance Group and Partition.')
tmnxBsxNotifyTransitIpPolicyId = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 4, 8), TmnxBsxTransitIpPolicyId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxBsxNotifyTransitIpPolicyId.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxNotifyTransitIpPolicyId.setDescription('Used by notifications to indicate the Transit IP Policy Id.')
tmnxBsxNotifyRadiusCoAAuditState = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 4, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("start", 1), ("end", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxBsxNotifyRadiusCoAAuditState.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxNotifyRadiusCoAAuditState.setDescription('Used by notifications to indicate the state of the RADIUS Change of Authorization (CoA) Audit. The status may be one of: start (1) - the RADIUS CoA Audit has started end (2) - the RADIUS CoA Audit has ended')
tmnxBsxNotifyReason = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 4, 10), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxBsxNotifyReason.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxNotifyReason.setDescription('Used by notifications to indicate the reason for a notification.')
tmnxBsxIsaAaGrpNonRedundantClear = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 63, 0, 1)).setObjects(("TIMETRA-BSX-NG-MIB", "tmnxBsxNotifyIsaAaGroupIndex"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxNotifyActiveMda"))
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpNonRedundantClear.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpNonRedundantClear.setDescription('A tmnxBsxIsaAaGrpNonRedundantClear notification is generated when an ISA-AA Group has two configured MDAs and there are now two available MDAs.')
tmnxBsxIsaAaGrpSwitchover = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 63, 0, 2)).setObjects(("TIMETRA-BSX-NG-MIB", "tmnxBsxNotifyIsaAaGroupIndex"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxNotifyActiveMda"))
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpSwitchover.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpSwitchover.setDescription('A tmnxBsxIsaAaGrpSwitchover notification is generated when an ISA-AA Group has experienced a switch in activity from one ISA-AA to another.')
tmnxBsxIsaAaGrpFlowFull = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 63, 0, 3)).setObjects(("TIMETRA-BSX-NG-MIB", "tmnxBsxNotifyIsaAaGroupIndex"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxNotifyActiveMda"))
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpFlowFull.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpFlowFull.setDescription('A tmnxBsxIsaAaGrpFlowFull notification is generated when an ISA-AA Group has currently used greater than or equal to the percentage value tmnxBsxFlowFullHighWatermark of its flow records and the previous percentage value was less than this threshold. This trap is only raised once per hour. In the case where there are more occurences of this trap, a TIMETRA-SYSTEM-MIB::tmnxTrapDropped notification is raised.')
tmnxBsxIsaAaGrpFlowFullClear = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 63, 0, 4)).setObjects(("TIMETRA-BSX-NG-MIB", "tmnxBsxNotifyIsaAaGroupIndex"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxNotifyActiveMda"))
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpFlowFullClear.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpFlowFullClear.setDescription('A tmnxBsxIsaAaGrpFlowFullClear notification is generated when an ISA-AA Group has currently dropped to less than or equal to the percentage value tmnxBsxFlowFullLowWatermark of its flow records and the previous precentage value was greater than this threshold. This trap is only raised once per hour. In the case where there are more occurances of this trap, a TIMETRA-SYSTEM-MIB::tmnxTrapDropped notification is raised.')
tmnxBsxIsaAaGrpFailureV2 = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 63, 0, 5)).setObjects(("TIMETRA-BSX-NG-MIB", "tmnxBsxNotifyIsaAaGroupIndex"))
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpFailureV2.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpFailureV2.setDescription('A tmnxBsxIsaAaGrpFailureV2 notification is generated when an ISA-AA Group has no configured primary MDA or the number of active MDAs is not equal to the number of configured primary MDAs.')
tmnxBsxIsaAaGrpFailureClearV2 = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 63, 0, 6)).setObjects(("TIMETRA-BSX-NG-MIB", "tmnxBsxNotifyIsaAaGroupIndex"))
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpFailureClearV2.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpFailureClearV2.setDescription('A tmnxBsxIsaAaGrpFailureClearV2 notification is generated when an ISA-AA Group has at least one configured primary MDA and all configured MDAs are either active or standby.')
tmnxBsxIsaAaGrpNonRedundantV2 = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 63, 0, 7)).setObjects(("TIMETRA-BSX-NG-MIB", "tmnxBsxNotifyIsaAaGroupIndex"))
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpNonRedundantV2.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpNonRedundantV2.setDescription('A tmnxBsxIsaAaGrpNonRedundantV2 notification is generated when an ISA-AA Group has a configured backup MDA but there is no standby MDA available.')
tmnxBsxIsaAaSubLoadBalance = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 63, 0, 8)).setObjects(("TIMETRA-BSX-NG-MIB", "tmnxBsxNotifyIsaAaGroupIndex"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxNotifyActionStatus"))
if mibBuilder.loadTexts: tmnxBsxIsaAaSubLoadBalance.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxIsaAaSubLoadBalance.setDescription('A tmnxBsxIsaAaSubLoadBalance notification is generated when a subscriber load-balance action for an application-assurance group starts and stops.')
tmnxBsxIsaAaGrpCapCostThres = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 63, 0, 9)).setObjects(("TIMETRA-BSX-NG-MIB", "tmnxBsxNotifyActiveMda"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGrpCapCostHighThres"))
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpCapCostThres.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpCapCostThres.setDescription('A tmnxBsxIsaAaGrpCapCostThres notification is generated when the current capacity cost for an MDA within an ISA-AA Group is greater than or equal to the threshold specified by tmnxBsxIsaAaGrpCapCostHighThres and the prior cost was less than this threshold.')
tmnxBsxIsaAaGrpCapCostThresClear = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 63, 0, 10)).setObjects(("TIMETRA-BSX-NG-MIB", "tmnxBsxNotifyActiveMda"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGrpCapCostLowThres"))
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpCapCostThresClear.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpCapCostThresClear.setDescription('A tmnxBsxIsaAaGrpCapCostThresClear notification is generated when the current capacity cost for an MDA within an ISA-AA Group is less than or equal to the threshold specified by tmnxBsxIsaAaGrpCapCostLowThres and the prior cost was greater than this threshold.')
tmnxBsxAaSubscribersUnassigned = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 63, 0, 11)).setObjects(("TIMETRA-BSX-NG-MIB", "tmnxBsxNotifyIsaAaGroupIndex"))
if mibBuilder.loadTexts: tmnxBsxAaSubscribersUnassigned.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAaSubscribersUnassigned.setDescription('A tmnxBsxAaSubscribersUnassigned notification is generated when one or more subscribers for a particular service-id cannot be assigned to an ISA-AA MDA within an Application Assurance group due to insufficient resources. The resources in question include service queues, AA subscriber counts or AA subscriber statistics. Unassigned subscribers will behave as specified by the fail-to mode configured within the Application Assurance group. Recovery from this condition requires the removal and re-creation of the AA subscribers when sufficient resources become available.')
tmnxBsxAaSubscriberAcctDataLoss = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 63, 0, 12)).setObjects(("TIMETRA-LOG-MIB", "tmnxLogFileIdLogId"), ("TIMETRA-LOG-MIB", "tmnxLogNotifyApInterval"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxNotifyAaSubscriberType"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxNotifyAaSubscriberName"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxNotifyAaSubAcctLossReason"))
if mibBuilder.loadTexts: tmnxBsxAaSubscriberAcctDataLoss.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAaSubscriberAcctDataLoss.setDescription('A tmnxBsxAaSubscriberAcctDataLoss notification is generated when Application Assurance subscriber statistics cannot be written to the accounting file. This can occur if the accounting interval expires while collecting statistics. When this notification is generated it signifies that the statistic records, for this application assurance subscriber, are missing from the accounting file for the indicated interval.')
tmnxBsxAaSubPolResExceeded = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 63, 0, 13)).setObjects(("TIMETRA-BSX-NG-MIB", "tmnxBsxNotifyAaGrpPartIndex"))
if mibBuilder.loadTexts: tmnxBsxAaSubPolResExceeded.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAaSubPolResExceeded.setDescription('A tmnxBsxAaSubPolResExceeded notification is generated when Application Assurance policer resources have been exceeded for subscribers with the ISA-AA group and partition. CAUSE: Configured policy for subscribers has caused policer resources to be exceeded. EFFECT: Subscriber policing is degraded. RECOVERY: Recovery from this condition requires the reconfiguration of subscriber policy to reduce the number of policers being applied.')
tmnxBsxAaSubPolResExceededClear = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 63, 0, 14)).setObjects(("TIMETRA-BSX-NG-MIB", "tmnxBsxNotifyAaGrpPartIndex"))
if mibBuilder.loadTexts: tmnxBsxAaSubPolResExceededClear.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAaSubPolResExceededClear.setDescription('A tmnxBsxAaSubPolResExceededClear notification is generated when Application Assurance policer resources are no longer exceeded for subscribers with the ISA-AA group and partition. CAUSE: Policer resources are no longer exceeded for subscribers. EFFECT: Subscriber policing is no longer degraded. RECOVERY: None. ')
tmnxBsxIsaAaGrpFlowSetup = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 63, 0, 15)).setObjects(("TIMETRA-BSX-NG-MIB", "tmnxBsxNotifyIsaAaGroupIndex"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxNotifyActiveMda"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxFlowSetupHighWatermark"))
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpFlowSetup.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpFlowSetup.setDescription('A tmnxBsxIsaAaGrpFlowSetup notification is generated when the current flow setup rate on the MDA in the ISA-AA group is greater than or equal to tmnxBsxFlowSetupHighWatermark and the prior rate was less than this threshold.')
tmnxBsxIsaAaGrpFlowSetupClear = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 63, 0, 16)).setObjects(("TIMETRA-BSX-NG-MIB", "tmnxBsxNotifyIsaAaGroupIndex"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxNotifyActiveMda"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxFlowSetupLowWatermark"))
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpFlowSetupClear.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpFlowSetupClear.setDescription('A tmnxBsxIsaAaGrpFlowSetupClear notification is generated to indicate a prior tmnxBsxIsaAaGrpFlowSetup notification has cleared due to one of the following reasons: 1. The current flow setup rate on the MDA in the ISA-AA group is less than or equal to tmnxBsxFlowSetupLowWatermark. 2. The corresponding tmnxBsxIsaAaGrpFlowSetup notification has been disabled by raising the tmnxBsxFlowSetupHighWatermark to maximum.')
tmnxBsxIsaAaGrpPacketRate = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 63, 0, 17)).setObjects(("TIMETRA-BSX-NG-MIB", "tmnxBsxNotifyIsaAaGroupIndex"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxNotifyActiveMda"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxPacketRateHighWatermark"))
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpPacketRate.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpPacketRate.setDescription('A tmnxBsxIsaAaGrpPacketRate notification is generated when the current packet rate on the MDA in the ISA-AA group is greater than or equal to the tmnxBsxPacketRateHighWatermark and the prior rate was less than this threshold.')
tmnxBsxIsaAaGrpPacketRateClear = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 63, 0, 18)).setObjects(("TIMETRA-BSX-NG-MIB", "tmnxBsxNotifyIsaAaGroupIndex"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxNotifyActiveMda"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxPacketRateLowWatermark"))
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpPacketRateClear.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpPacketRateClear.setDescription('A tmnxBsxIsaAaGrpPacketRateClear notification is generated to indicate a prior tmnxBsxIsaAaGrpPacketRate notification has cleared due to one of the following reasons: 1. The current packet rate on the MDA in the ISA-AA group is less than or equal to the tmnxBsxPacketRateLowWatermark. 2. The corresponding tmnxBsxIsaAaGrpPacketRate notification has been disabled by raising the tmnxBsxPacketRateHighWatermark to maximum.')
tmnxBsxIsaAaGrpBitRate = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 63, 0, 19)).setObjects(("TIMETRA-BSX-NG-MIB", "tmnxBsxNotifyIsaAaGroupIndex"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxNotifyActiveMda"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxBitRateHighWatermark"))
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpBitRate.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpBitRate.setDescription('A tmnxBsxIsaAaGrpBitRate notification is generated when the current bit rate on the MDA in the ISA-AA group is greater than or equal to the tmnxBsxBitRateHighWatermark and the prior rate was less than this threshold.')
tmnxBsxIsaAaGrpBitRateClear = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 63, 0, 20)).setObjects(("TIMETRA-BSX-NG-MIB", "tmnxBsxNotifyIsaAaGroupIndex"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxNotifyActiveMda"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxBitRateLowWatermark"))
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpBitRateClear.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpBitRateClear.setDescription('A tmnxBsxIsaAaGrpBitRateClear notification is generated to indicate a prior tmnxBsxIsaAaGrpBitRate notification has cleared due to one of the following reasons: 1. The current bit rate on the MDA in the ISA-AA group is less than or equal to the tmnxBsxBitRateLowWatermark. 2. The corresponding tmnxBsxIsaAaGrpBitRate notification has been disabled by raising the tmnxBsxBitRateHighWatermark to maximum.')
tmnxBsxTransIpPolAaSubCreated = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 63, 0, 21)).setObjects(("TIMETRA-BSX-NG-MIB", "tmnxBsxNotifyAaGrpPartIndex"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxNotifyTransitIpPolicyId"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxNotifyAaSubscriberName"))
if mibBuilder.loadTexts: tmnxBsxTransIpPolAaSubCreated.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxTransIpPolAaSubCreated.setDescription('A tmnxBsxTransIpPolAaSubCreated notification is generated when a dynamic subscriber is created in a Transit IP Policy.')
tmnxBsxTransIpPolAaSubDeleted = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 63, 0, 22)).setObjects(("TIMETRA-BSX-NG-MIB", "tmnxBsxNotifyAaGrpPartIndex"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxNotifyTransitIpPolicyId"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxNotifyAaSubscriberName"))
if mibBuilder.loadTexts: tmnxBsxTransIpPolAaSubDeleted.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxTransIpPolAaSubDeleted.setDescription('A tmnxBsxTransIpPolAaSubDeleted notification is generated when a dynamic subscriber is deleted in a Transit IP Policy.')
tmnxBsxTransIpPolRadCoAAudit = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 63, 0, 23)).setObjects(("TIMETRA-BSX-NG-MIB", "tmnxBsxNotifyAaGrpPartIndex"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxNotifyTransitIpPolicyId"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxNotifyRadiusCoAAuditState"))
if mibBuilder.loadTexts: tmnxBsxTransIpPolRadCoAAudit.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxTransIpPolRadCoAAudit.setDescription('A tmnxBsxTransIpPolRadCoAAudit notification is generated when a Change of Authorization (CoA) Audit starts or ends.')
tmnxBsxTransIpPolRadCoAError = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 63, 0, 24)).setObjects(("TIMETRA-BSX-NG-MIB", "tmnxBsxNotifyAaGrpPartIndex"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxNotifyTransitIpPolicyId"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxNotifyReason"))
if mibBuilder.loadTexts: tmnxBsxTransIpPolRadCoAError.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxTransIpPolRadCoAError.setDescription('[CAUSE] A tmnxBsxTransIpPolRadCoAError notification is generated when an error occurs while processing a Change of Authorization (CoA) request from a RADIUS server. The tmnxBsxNotifyReason will identify the reason for failing to process the CoA request. [EFFECT] The addition or modification of a transit subscriber indicated in the CoA will not have been performed.')
tmnxBsxTransIpPolRadDiscError = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 63, 0, 25)).setObjects(("TIMETRA-BSX-NG-MIB", "tmnxBsxNotifyAaGrpPartIndex"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxNotifyTransitIpPolicyId"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxNotifyReason"))
if mibBuilder.loadTexts: tmnxBsxTransIpPolRadDiscError.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxTransIpPolRadDiscError.setDescription('[CAUSE] A tmnxBsxTransIpPolRadDiscError notification is generated when an error occurs while processing a Disconnect request from a RADIUS server. The tmnxBsxNotifyReason will identify the reason for failing to process the Disconnect request. [EFFECT] The removal of a transit subscriber indicated by a Disconnect request will not have been performed.')
tmnxBsxTransIpPolDhcpAddWarning = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 63, 0, 26)).setObjects(("TIMETRA-BSX-NG-MIB", "tmnxBsxNotifyAaGrpPartIndex"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxNotifyTransitIpPolicyId"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxNotifyReason"))
if mibBuilder.loadTexts: tmnxBsxTransIpPolDhcpAddWarning.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxTransIpPolDhcpAddWarning.setDescription('A tmnxBsxTransIpPolDhcpAddWarning notification is generated when a problem occurs while attempting to add a dynamic transit subscriber learned via DHCP. The notification is informational and may not be an error. The tmnxBsxNotifyReason will identify the reason this trap was raised.')
tmnxBsxTransIpPolDhcpDelWarning = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 63, 0, 27)).setObjects(("TIMETRA-BSX-NG-MIB", "tmnxBsxNotifyAaGrpPartIndex"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxNotifyTransitIpPolicyId"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxNotifyReason"))
if mibBuilder.loadTexts: tmnxBsxTransIpPolDhcpDelWarning.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxTransIpPolDhcpDelWarning.setDescription('A tmnxBsxTransIpPolDhcpDelWarning notification is generated when a problem occurs while attempting to delete a dynamic transit subscriber learned via DHCP. The notification is informational and may not be an error. The tmnxBsxNotifyReason will identify the reason this trap was raised.')
tmnxBsxIsaAaGrpFmSbWaSBufOvld = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 63, 0, 28)).setObjects(("TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGrpFromSubWaSBfHiWmk"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxNotifyActiveMda"))
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpFmSbWaSBufOvld.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpFmSbWaSBufOvld.setDescription('[CAUSE] A tmnxBsxIsaAaGrpFmSbWaSBufOvld is generated when the current weighted average shared buffer use for an ISA in the from subscriber direction is greater than or equal to a high water mark after being in a normal, non-overloaded, state. [EFFECT] If ISA overload cut-through is enabled, the ISA MDA performs subscriber level cut-through of all traffic.')
tmnxBsxIsaAaGrpFmSbWaSBufOvldClr = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 63, 0, 29)).setObjects(("TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGrpFromSubWaSBfLoWmk"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxNotifyActiveMda"))
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpFmSbWaSBufOvldClr.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpFmSbWaSBufOvldClr.setDescription('[CAUSE] A tmnxBsxIsaAaGrpFmSbWaSBufOvldClr is generated to indicate a prior tmnxBsxIsaAaGrpFmSbWaSBufOvld notification has cleared due to one of the following reasons: 1. The current weighted average shared buffer use in the from subscriber direction is less than or equal to a low water mark. 2. The corresponding tmnxBsxIsaAaGrpFmSbWaSBufOvld notification has been disabled by raising the tmnxBsxIsaAaGrpFromSubWaSBfHiWmk to maximum. [EFFECT] The buffer pool in the from subscriber direction exits overload. ISA MDA overload cut-through ends if it was in effect and the buffer pools in both directions are no longer overloaded.')
tmnxBsxIsaAaGrpToSbWaSBufOvld = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 63, 0, 30)).setObjects(("TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGrpToSubWaSBfHiWmk"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxNotifyActiveMda"))
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpToSbWaSBufOvld.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpToSbWaSBufOvld.setDescription('[CAUSE] A tmnxBsxIsaAaGrpToSbWaSBufOvld is generated when the current weighted average shared buffer use for an ISA in the to subscriber direction is greather than or equal to a high water mark after being in a normal, non-overloaded, state. [EFFECT] If ISA overload cut-through is enabled, the ISA MDA performs subscriber level cut-through of all traffic.')
tmnxBsxIsaAaGrpToSbWaSBufOvldClr = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 63, 0, 31)).setObjects(("TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGrpToSubWaSBfLoWmk"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxNotifyActiveMda"))
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpToSbWaSBufOvldClr.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpToSbWaSBufOvldClr.setDescription('[CAUSE] A tmnxBsxIsaAaGrpToSbWaSBufOvldClr is generated to indicate a prior tmnxBsxIsaAaGrpToSbWaSBufOvld notification has cleared due to one of the following reasons: 1. The weighted average shared buffer use for an ISA in the to subscriber direction is less than or equal to a low water mark. 2. The corresponding tmnxBsxIsaAaGrpToSbWaSBufOvld notification has been disabled by raising the tmnxBsxIsaAaGrpToSubWaSBfHiWmk to maximum. [EFFECT] The buffer pool in the to subscriber direction exits overload. ISA MDA overload cut-through ends if it was in effect and the buffer pools in both directions are no longer overloaded.')
tmnxBsxIsaAaGrpOvrldCutthru = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 63, 0, 32)).setObjects(("TIMETRA-BSX-NG-MIB", "tmnxBsxNotifyIsaAaGroupIndex"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxNotifyActiveMda"))
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpOvrldCutthru.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpOvrldCutthru.setDescription('[CAUSE] A tmnxBsxIsaAaGrpOvrldCutthru is generated when cut through processing starts on an ISA MDA. [EFFECT] The ISA MDA performs subscriber level cut-through of all traffic.')
tmnxBsxIsaAaGrpOvrldCutthruClr = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 63, 0, 33)).setObjects(("TIMETRA-BSX-NG-MIB", "tmnxBsxNotifyIsaAaGroupIndex"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxNotifyActiveMda"))
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpOvrldCutthruClr.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxIsaAaGrpOvrldCutthruClr.setDescription('[CAUSE] A tmnxBsxIsaAaGrpOvrldCutthru is generated when cut through processing ends on an ISA MDA. [EFFECT] The ISA MDA stops performing subscriber level cut-through of all traffic.')
tmnxBsxTransitIpPersistenceWarn = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 63, 0, 34)).setObjects(("TIMETRA-BSX-NG-MIB", "tmnxBsxNotifyAaGrpPartIndex"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxNotifyTransitIpPolicyId"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxNotifyReason"))
if mibBuilder.loadTexts: tmnxBsxTransitIpPersistenceWarn.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxTransitIpPersistenceWarn.setDescription('[CAUSE] A tmnxBsxTransitIpPersistenceWarn notification is generated when a problem occurs while attempting to register a dynamic transit subscriber address with the persistence infrastructure. The tmnxBsxNotifyReason will identify the reason this trap was raised. [EFFECT] The affected transit subscriber address will not be persistent across a system reboot.')
tmnxBsxAarpInstOperStateChanged = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 63, 0, 35)).setObjects(("TIMETRA-BSX-NG-MIB", "tmnxBsxAarpInstOperState"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAarpInstOperFlags"))
if mibBuilder.loadTexts: tmnxBsxAarpInstOperStateChanged.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAarpInstOperStateChanged.setDescription("[CAUSE] A tmnxBsxAarpInstOperStateChanged notification is generated when the operational state of the AARP instance changes. [EFFECT] The transition to an operational state of 'outOfService(3)' indicates that the AARP instance is not performing asymmetry removal.")
tmnxBsxAarpInstStateChanged = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 63, 0, 36)).setObjects(("TIMETRA-BSX-NG-MIB", "tmnxBsxAarpInstState"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAarpInstOperFlags"))
if mibBuilder.loadTexts: tmnxBsxAarpInstStateChanged.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAarpInstStateChanged.setDescription('[CAUSE] A tmnxBsxAarpInstStateChanged notification is generated when the state of the AARP instance changes.')
tmnxBsxRadApFailure = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 63, 0, 37)).setObjects(("TIMETRA-BSX-NG-MIB", "tmnxBsxRadApDescription"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxNotifyReason"))
if mibBuilder.loadTexts: tmnxBsxRadApFailure.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxRadApFailure.setDescription('[CAUSE] The tmnxBsxRadApFailure notification is generated when a RADIUS accounting request was not successfully sent to any of the RADIUS servers in the accounting policy. [EFFECT] Accounting data for current subscribers will not be exported externally. [RECOVERY] Based on the reason noted in tmnxBsxNotifyReason, if necessary take action to ensure that the next RADIUS accounting request will be successfully sent.')
tmnxBsxRadApServOperStateChange = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 63, 0, 38)).setObjects(("TIMETRA-BSX-NG-MIB", "tmnxBsxRadApServAddrType"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxRadApServAddr"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxRadApServOperState"))
if mibBuilder.loadTexts: tmnxBsxRadApServOperStateChange.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxRadApServOperStateChange.setDescription("The tmnxBsxRadApServOperStateChange notification is generated when the operational status of an AA RADIUS accounting policy server has transitioned either from 'inService' to 'outOfService' or from 'outOfService' to 'inService'.")
tmnxBsxCflowdScalars = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 5, 1))
tmnxBsxCflowdLastChangeTime = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 5, 1, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxCflowdLastChangeTime.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxCflowdLastChangeTime.setDescription('The value of tmnxBsxCflowdLastChangeTime indicates the last time a successful set was performed of the tmnxBsxCflowdTable.')
tmnxBsxCflowdCollLastChangeTime = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 5, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxCflowdCollLastChangeTime.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxCflowdCollLastChangeTime.setDescription('The value of tmnxBsxCflowdCollLastChangeTime indicates the last time a successful set was performed of the tmnxBsxCflowdCollTable.')
tmnxBsxCflowdPerfLastChangeTime = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 5, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxCflowdPerfLastChangeTime.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxCflowdPerfLastChangeTime.setDescription('The value of tmnxBsxCflowdPerfLastChangeTime indicates the last time a successful set was performed of the tmnxBsxCflowdPerfTable.')
tmnxBsxCflowdExpLastChangeTime = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 5, 1, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxCflowdExpLastChangeTime.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxCflowdExpLastChangeTime.setDescription('The value of tmnxBsxCflowdExpLastChangeTime indicates the last time a successful set was performed of the tmnxBsxCflowdExpTable.')
tmnxBsxCflowdPerfExpLastChTime = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 5, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxCflowdPerfExpLastChTime.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxCflowdPerfExpLastChTime.setDescription('The value of tmnxBsxCflowdPerfExpLastChTime indicates the last time a successful set was performed of the tmnxBsxCflowdPerfExpTable.')
tmnxBsxCflowdTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 5, 2), )
if mibBuilder.loadTexts: tmnxBsxCflowdTable.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxCflowdTable.setDescription('The tmnxBsxCflowdTable contains the Application Assurance Cflowd configuration within an Application Assurance group.')
tmnxBsxCflowdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 5, 2, 1), ).setIndexNames((0, "TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGroupIndex"))
if mibBuilder.loadTexts: tmnxBsxCflowdEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxCflowdEntry.setDescription('Each tmnxBsxCflowdEntry specifies an Application Assurance Cflowd configuration within an Application Assurance group.')
tmnxBsxCflowdRowLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 5, 2, 1, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxCflowdRowLastChange.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxCflowdRowLastChange.setDescription('The value of tmnxBsxCflowdRowLastChange indicates the last time a successful set was performed on this row of the tmnxBsxCflowdTable.')
tmnxBsxCflowdAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 5, 2, 1, 2), TmnxAdminState().clone('outOfService')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxBsxCflowdAdminState.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxCflowdAdminState.setDescription("The value of tmnxBsxCflowdAdminState specifies the administrative state for Application Assurance Cflowd collection and export. When set to 'outOfService', no application assurance Cflowd records are collected or exported for this group.")
tmnxBsxCflowdVolRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 5, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxBsxCflowdVolRate.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxCflowdVolRate.setDescription('The value of tmnxBsxCflowdVolRate specifies the sampling rate of packets for the Cflowd export of Application Assurance volume statistics.')
tmnxBsxCflowdTemplateRetransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 5, 2, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 600)).clone(600)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxBsxCflowdTemplateRetransmit.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxCflowdTemplateRetransmit.setDescription('The value of tmnxBsxCflowdTemplateRetransmit specifies the period of time, in seconds, for the template to be retransmitted.')
tmnxBsxCflowdCollTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 5, 3), )
if mibBuilder.loadTexts: tmnxBsxCflowdCollTable.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxCflowdCollTable.setDescription('The tmnxBsxCflowdCollTable contains the Application Assurance remote Cflowd collector configuration within an Application Assurance group.')
tmnxBsxCflowdCollEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 5, 3, 1), ).setIndexNames((0, "TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGroupIndex"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxCflowdCollAddressType"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxCflowdCollAddress"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxCflowdCollPort"))
if mibBuilder.loadTexts: tmnxBsxCflowdCollEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxCflowdCollEntry.setDescription('Each tmnxBsxCflowdCollEntry specifies an Application Assurance remote Cflowd collector within an Application Assurance group.')
tmnxBsxCflowdCollAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 5, 3, 1, 1), InetAddressType())
if mibBuilder.loadTexts: tmnxBsxCflowdCollAddressType.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxCflowdCollAddressType.setDescription('The value of tmnxBsxCflowdCollAddressType specifies the address type of the tmnxBsxCflowdCollAddress.')
tmnxBsxCflowdCollAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 5, 3, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: tmnxBsxCflowdCollAddress.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxCflowdCollAddress.setDescription('The value of tmnxBsxCflowdCollAddress specifies the address of the remote Cflowd collector to receive exported Application Assurance Cflowd records.')
tmnxBsxCflowdCollPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 5, 3, 1, 3), TTcpUdpPort().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: tmnxBsxCflowdCollPort.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxCflowdCollPort.setDescription('The value of tmnxBsxCflowdCollPort specifies the port number of the remote Cflowd collector to receive exported Application Assurance Cflowd records.')
tmnxBsxCflowdCollRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 5, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxCflowdCollRowStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxCflowdCollRowStatus.setDescription("The value of tmnxBsxCflowdCollRowStatus specifies the row status. Rows in the tmnxBsxCflowdCollTable are created by specifying the value of 'createAndGo (4)', and deleted by specifying the value of 'destroy (6)'.")
tmnxBsxCflowdCollRowLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 5, 3, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxCflowdCollRowLastChange.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxCflowdCollRowLastChange.setDescription('The value of tmnxBsxCflowdCollRowLastChange indicates the last time a successful set was performed on this row of the tmnxBsxCflowdCollTable.')
tmnxBsxCflowdCollDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 5, 3, 1, 6), TItemDescription()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxCflowdCollDescription.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxCflowdCollDescription.setDescription('The value of tmnxBsxCflowdCollDescription specifies the description of the remote Cflowd collector.')
tmnxBsxCflowdCollAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 5, 3, 1, 7), TmnxAdminState().clone('outOfService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxCflowdCollAdminState.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxCflowdCollAdminState.setDescription("The value of tmnxBsxCflowdCollAdminState specifies the administrative state for the remote Cflowd collector. When 'outOfService', no application assurance Cflowd records are sent to the collector.")
tmnxBsxCflowdCollOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 5, 3, 1, 8), TmnxOperState().clone('outOfService')).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxCflowdCollOperState.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxCflowdCollOperState.setDescription("The value of tmnxBsxCflowdCollOperState indicates the operational state for the collector. When 'outOfService', no application assurance Cflowd records are sent to the collector.")
tmnxBsxCflowdCollVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 5, 3, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 10)).clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxCflowdCollVersion.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxCflowdCollVersion.setDescription('The value of tmnxBsxCflowdCollVersion specifies the version of this collector.')
tmnxBsxCflowdPerfTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 5, 4), )
if mibBuilder.loadTexts: tmnxBsxCflowdPerfTable.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxCflowdPerfTable.setDescription('The tmnxBsxCflowdPerfTable contains the Application Assurance Cflowd configuration for performance statistics sampling within an Application Assurance group and measurement type.')
tmnxBsxCflowdPerfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 5, 4, 1), ).setIndexNames((0, "TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGroupIndex"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxCflowdPerfMeasType"))
if mibBuilder.loadTexts: tmnxBsxCflowdPerfEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxCflowdPerfEntry.setDescription('Each tmnxBsxCflowdPerfEntry specifies an Application Assurance Cflowd configuration of performance statistics sampling within an Application Assurance group and measurement type.')
tmnxBsxCflowdPerfMeasType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 5, 4, 1, 1), TmnxBsxCflowdPerfMeasType())
if mibBuilder.loadTexts: tmnxBsxCflowdPerfMeasType.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxCflowdPerfMeasType.setDescription('The value of tmnxBsxCflowdPerfMeasType specifies the performance measurement type which has Cflowd export of Application Assurance per-flow performance statistics enabled.')
tmnxBsxCflowdPerfRowLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 5, 4, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxCflowdPerfRowLastChange.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxCflowdPerfRowLastChange.setDescription('The value of tmnxBsxCflowdPerfRowLastChange indicates the last time a successful set was performed on this row of the tmnxBsxCflowdPerfTable.')
tmnxBsxCflowdPerfFlowRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 5, 4, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxBsxCflowdPerfFlowRate.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxCflowdPerfFlowRate.setDescription('The value of tmnxBsxCflowdPerfFlowRate specifies the per-flow sampling rate for the Cflowd export of Application Assurance performance statistics. tmnxBsxCflowdPerfFlowRate applies when the associated tmnxBsxCflowdPerfExpRateNum has the value of 1.')
tmnxBsxCflowdPerfFlowRate2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 5, 4, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxBsxCflowdPerfFlowRate2.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxCflowdPerfFlowRate2.setDescription('The value of tmnxBsxCflowdPerfFlowRate2 specifies an additional per-flow sampling rate for the Cflowd export of Application Assurance performance statistics. tmnxBsxCflowdPerfFlowRate2 applies when the associated tmnxBsxCflowdPerfExpRateNum has the value of 2.')
tmnxBsxCflowdExpTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 5, 5), )
if mibBuilder.loadTexts: tmnxBsxCflowdExpTable.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxCflowdExpTable.setDescription('The tmnxBsxCflowdExpTable contains an entry for each Application Assurance group and partition in the system. Each row contains the configuration for the Cflowd export of Application Assurance per-flow volume or performance statistics.')
tmnxBsxCflowdExpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 5, 5, 1), ).setIndexNames((0, "TIMETRA-BSX-NG-MIB", "tmnxBsxAaGrpPartIndex"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxCflowdExpType"))
if mibBuilder.loadTexts: tmnxBsxCflowdExpEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxCflowdExpEntry.setDescription('Each tmnxBsxCflowdExpEntry indicates the configuration of the Cflowd export of Application Assurance per-flow volume or performance statistics for an Application Assurance group and partition.')
tmnxBsxCflowdExpType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 5, 5, 1, 1), TmnxBsxCflowdExpType())
if mibBuilder.loadTexts: tmnxBsxCflowdExpType.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxCflowdExpType.setDescription('The value of tmnxBsxCflowdExpType specifies the type of the Application Assurance statistic exported using Cflowd.')
tmnxBsxCflowdExpRowLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 5, 5, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxCflowdExpRowLastChange.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxCflowdExpRowLastChange.setDescription('The value of tmnxBsxCflowdRowLastChange indicates the last time a successful set was performed on this row of the tmnxBsxCflowdExpTable.')
tmnxBsxCflowdExpAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 5, 5, 1, 3), TmnxAdminState().clone('outOfService')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxBsxCflowdExpAdminState.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxCflowdExpAdminState.setDescription("The value of tmnxBsxCflowdExpAdminState specifies the administrative state for the collection of records for cflowd export. When 'outOfService', no application assurance Cflowd records are collected.")
tmnxBsxCflowdPerfExpTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 5, 6), )
if mibBuilder.loadTexts: tmnxBsxCflowdPerfExpTable.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxCflowdPerfExpTable.setDescription('The tmnxBsxCflowdPerfExpTable contains an entry for each Application Assurance application and application-group that has Cflowd export of Application Assurance per-flow performance statistics enabled.')
tmnxBsxCflowdPerfExpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 5, 6, 1), ).setIndexNames((0, "TIMETRA-BSX-NG-MIB", "tmnxBsxAaGrpPartIndex"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaType"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaName"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxCflowdPerfMeasType"))
if mibBuilder.loadTexts: tmnxBsxCflowdPerfExpEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxCflowdPerfExpEntry.setDescription("Each tmnxBsxCflowdPerfExpEntry specifies an Application Assurance group, partition, statistics type, statistics name, and performance measurement type for which Cflowd export of Application Assurance per-flow performance statistics are enabled. A value of 'chargingGroup (4)' is not supported for the tmnxBsxStatAaType. ")
tmnxBsxCflowdPerfExpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 5, 6, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxCflowdPerfExpRowStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxCflowdPerfExpRowStatus.setDescription("The value of tmnxBsxCflowdPerfExpRowStatus specifies the row status. It allows entries to be created and deleted in the tmnxBsxCflowdPerfExpTable. Rows are created by specifying the value of 'createAndGo (4)', and deleted by specifying the value of 'destroy (6)'.")
tmnxBsxCflowdPerfExpRowLastChnge = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 5, 6, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxCflowdPerfExpRowLastChnge.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxCflowdPerfExpRowLastChnge.setDescription('The value of tmnxBsxCflowdPerfExpRowLastChnge indicates the last time a successful set was performed on this row of the tmnxBsxCflowdPerfExpTable.')
tmnxBsxCflowdPerfExpRateNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 5, 6, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxCflowdPerfExpRateNum.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxCflowdPerfExpRateNum.setDescription('The value of tmnxBsxCflowdPerfExpRateNum indicates which rate in tmnxBsxCflowdPerfTable applies. A value of 1 indicates tmnxBsxCflowdPerfFlowRate. A value of 2 indicates tmnxBsxCflowdPerfFlowRate2')
tmnxBsxCflowdStatusTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 5, 7), )
if mibBuilder.loadTexts: tmnxBsxCflowdStatusTable.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxCflowdStatusTable.setDescription('The tmnxBsxCflowdStatusTable contains an entry for each ISA-AA MDA and Group in the system. Each row contains the Cflowd status information per group and Cflowd export type for an ISA-AA MDA uniquely identified by the tmnxChassisIndex, tmnxBsxCardSlotNum, and the tmnxMDASlotNum.')
tmnxBsxCflowdStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 5, 7, 1), ).setIndexNames((0, "TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGroupIndex"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxCflowdExpType"), (0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxCardSlotNum"), (0, "TIMETRA-CHASSIS-MIB", "tmnxMDASlotNum"))
if mibBuilder.loadTexts: tmnxBsxCflowdStatusEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxCflowdStatusEntry.setDescription('Each tmnxBsxCflowdStatusEntry contains the Cflowd status information for a particular group, Cflowd export type and ISA-AA MDA. An index with a valid tmnxBsxIsaAaGroupIndex and a valid tmnxBsxCflowdExpType, tmnxChassisIndex set to one, and a zero value for each of the tmnxBsxCardSlotNum/tmnxMDASlotNum indices will return the summarized per group status.')
tmnxBsxCflowdStatusDiscontTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 5, 7, 1, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxCflowdStatusDiscontTime.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxCflowdStatusDiscontTime.setDescription('The value of tmnxBsxCflowdStatusDiscontTime indicates the SNMPv2-MIB::sysUpTime (hundredths of a second) when the ISA-AA MDA within the group has last changed status.')
tmnxBsxCflowdStatusActFlowsCurr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 5, 7, 1, 2), Gauge32()).setUnits('flows').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxCflowdStatusActFlowsCurr.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxCflowdStatusActFlowsCurr.setDescription('The value of tmnxBsxCflowdStatusActFlowsCurr indicates the number of active flows currently marked for export using Cflowd in the ISA-AA MDA(s).')
tmnxBsxCflowdStatusRecRateCurr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 5, 7, 1, 3), Gauge32()).setUnits('records per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxCflowdStatusRecRateCurr.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxCflowdStatusRecRateCurr.setDescription('The value of tmnxBsxCflowdStatusRecRateCurr indicates the number of flow records per second being exported using Cflowd from the ISA-AA MDA(s). The calculation is based on the number of flow records inserted into Cflowd packets within the last 10 seconds.')
tmnxBsxCflowdStatusPktRateCurr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 5, 7, 1, 4), Gauge32()).setUnits('packets per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxCflowdStatusPktRateCurr.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxCflowdStatusPktRateCurr.setDescription('The value of tmnxBsxCflowdStatusPktRateCurr indicates the number of Cflowd packets per second being exported from the ISA-AA MDA(s). The calculation is based on the number of Cflowd packets generated within the last 10 seconds.')
tmnxBsxCflowdStatusRecReported = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 5, 7, 1, 5), Counter32()).setUnits('records').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxCflowdStatusRecReported.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxCflowdStatusRecReported.setDescription('The value of tmnxBsxCflowdStatusRecReported indicates the total number of flow records reported from the ISA-AA MDA(s).')
tmnxBsxCflowdStatusHCRecReported = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 5, 7, 1, 6), Counter64()).setUnits('records').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxCflowdStatusHCRecReported.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxCflowdStatusHCRecReported.setDescription('The value of tmnxBsxCflowdStatusHCRecReported indicates the total number of flow records reported from the ISA-AA MDA(s). This object is the 64-bit version of tmnxBsxCflowdStatusRecReported.')
tmnxBsxCflowdStatusRecDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 5, 7, 1, 7), Counter32()).setUnits('records').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxCflowdStatusRecDropped.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxCflowdStatusRecDropped.setDescription('The value of tmnxBsxCflowdStatusRecDropped indicates the total number of flow records dropped in the ISA-AA MDA(s).')
tmnxBsxCflowdStatusHCRecDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 5, 7, 1, 8), Counter64()).setUnits('records').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxCflowdStatusHCRecDropped.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxCflowdStatusHCRecDropped.setDescription('The value of tmnxBsxCflowdStatusHCRecDropped indicates the total number of flow records dropped in the ISA-AA MDA(s). This object is the 64-bit version of tmnxBsxCflowdStatusRecDropped.')
tmnxBsxCflowdStatusPktsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 5, 7, 1, 9), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxCflowdStatusPktsSent.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxCflowdStatusPktsSent.setDescription('The value of tmnxBsxCflowdStatusPktsSent indicates the total number of Cflowd packets sent from the ISA-AA MDA(s).')
tmnxBsxCflowdStatusHCPktsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 5, 7, 1, 10), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxCflowdStatusHCPktsSent.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxCflowdStatusHCPktsSent.setDescription('The value of tmnxBsxCflowdStatusHCPktsSent indicates the total number of Cflowd packets sent from the ISA-AA MDA(s). This object is the 64-bit version of tmnxBsxCflowdStatusPktsSent.')
tmnxBsxCflowdStatusFlowsNoRes = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 5, 7, 1, 11), Counter32()).setUnits('flows').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxCflowdStatusFlowsNoRes.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxCflowdStatusFlowsNoRes.setDescription('The value of tmnxBsxCflowdStatusFlowsNoRes indicates the total number of flows that were selected for export but failed to obtain Cflows resources in the ISA-AA MDA(s).')
tmnxBsxCflowdStatusHCFlowsNoRes = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 5, 7, 1, 12), Counter64()).setUnits('flows').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxCflowdStatusHCFlowsNoRes.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxCflowdStatusHCFlowsNoRes.setDescription('The value of tmnxBsxCflowdStatusHCFlowsNoRes indicates the total number of flows that were selected for export but failed to obtain Cflows resources in the ISA-AA MDA(s). This object is the 64-bit version of tmnxBsxCflowdStatusFlowsNoRes.')
tmnxBsxCflowdStatusHCUSupSSRCSt = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 5, 7, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxCflowdStatusHCUSupSSRCSt.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxCflowdStatusHCUSupSSRCSt.setDescription("The value of tmnxBsxCflowdStatusHCUSupSSRCSt indicates the number of synchronization source (SSRC) records which had to be aborted (due to reasons such as unknown codec type, non media stream, codec switch, etc). This value applies only when the index tmnxBsxCflowdExpType has a value of 'rtpPerformance(3)' and is otherwise zero.")
tmnxBsxCflowdStatusUSupSSRCStLo = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 5, 7, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxCflowdStatusUSupSSRCStLo.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxCflowdStatusUSupSSRCStLo.setDescription("The value of tmnxBsxCflowdStatusUSupSSRCStLo indicates the lower 32-bits of tmnxBsxCflowdStatusHCUSupSSRCSt. This value applies only when the index tmnxBsxCflowdExpType has a value of 'rtpPerformance(3)' and is otherwise zero.")
tmnxBsxCflowdStatusUSupSSRCStHi = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 5, 7, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxCflowdStatusUSupSSRCStHi.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxCflowdStatusUSupSSRCStHi.setDescription("The value of tmnxBsxCflowdStatusUSupSSRCStHi indicates the upper 32-bits of tmnxBsxCflowdStatusHCUSupSSRCSt. This value applies only when the index tmnxBsxCflowdExpType has a value of 'rtpPerformance(3)' and is otherwise zero.")
tmnxBsxCflowdCollStatTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 5, 8), )
if mibBuilder.loadTexts: tmnxBsxCflowdCollStatTable.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxCflowdCollStatTable.setDescription('The tmnxBsxCflowdCollStatTable contains statistics on the Application Assurance Cflowd collectors within an Application Assurance group.')
tmnxBsxCflowdCollStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 5, 8, 1), ).setIndexNames((0, "TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGroupIndex"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxCflowdCollAddressType"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxCflowdCollAddress"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxCflowdCollPort"))
if mibBuilder.loadTexts: tmnxBsxCflowdCollStatEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxCflowdCollStatEntry.setDescription('Each tmnxBsxCflowdCollStatEntry contains the statistics for an Application Assurance Cflowd collector within an Application Assurance group.')
tmnxBsxCflowdCollStatDiscontTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 5, 8, 1, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxCflowdCollStatDiscontTime.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxCflowdCollStatDiscontTime.setDescription('The value of tmnxBsxCflowdCollStatDiscontTime indicates the SNMPv2-MIB::sysUpTime (hundredths of a second) when the Cflowd collector has last changed status.')
tmnxBsxCflowdCollStatRecSent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 5, 8, 1, 2), Counter32()).setUnits('records').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxCflowdCollStatRecSent.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxCflowdCollStatRecSent.setDescription('The value of tmnxBsxCflowdCollStatRecSent indicates the total number of flow records sent to the remote Cflowd collector.')
tmnxBsxCflowdCollStatHCRecSent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 5, 8, 1, 3), Counter64()).setUnits('records').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxCflowdCollStatHCRecSent.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxCflowdCollStatHCRecSent.setDescription('The value of tmnxBsxCflowdCollStatHCRecSent indicates the total number of flow records sent to the remote Cflowd collector. This object is the 64-bit version of tmnxBsxCflowdCollStatRecSent.')
tmnxBsxCflowdExpStatTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 5, 9), )
if mibBuilder.loadTexts: tmnxBsxCflowdExpStatTable.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxCflowdExpStatTable.setDescription('The tmnxBsxCflowdExpStatTable contains statistics on the Cflowd export of Application Assurance per-flow volume or performance records within an Application Assurance group and partition.')
tmnxBsxCflowdExpStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 5, 9, 1), ).setIndexNames((0, "TIMETRA-BSX-NG-MIB", "tmnxBsxAaGrpPartIndex"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxCflowdExpType"))
if mibBuilder.loadTexts: tmnxBsxCflowdExpStatEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxCflowdExpStatEntry.setDescription('Each tmnxBsxCflowdExpStatEntry contains the statistics on the Cflowd export of Application Assurance per-flow volume or performance records for an Application Assurance group and partition.')
tmnxBsxCflowdExpStatDiscontTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 5, 9, 1, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxCflowdExpStatDiscontTime.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxCflowdExpStatDiscontTime.setDescription('The value of tmnxBsxCflowdExpStatDiscontTime indicates the SNMPv2-MIB::sysUpTime (hundredths of a second) when the export of cflowd records has last changed status.')
tmnxBsxCflowdExpStatRecReport = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 5, 9, 1, 2), Counter32()).setUnits('records').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxCflowdExpStatRecReport.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxCflowdExpStatRecReport.setDescription('The value of tmnxBsxCflowdExpStatRecReport indicates the total number of flow records reported.')
tmnxBsxCflowdExpStatHCRecReport = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 5, 9, 1, 3), Counter64()).setUnits('records').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxCflowdExpStatHCRecReport.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxCflowdExpStatHCRecReport.setDescription('The value of tmnxBsxCflowdExpStatHCRecReport indicates the total number of flow records reported. This object is the 64-bit version of tmnxBsxCflowdExpStatRecReport.')
tmnxBsxCflowdExpStatRecDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 5, 9, 1, 4), Counter32()).setUnits('records').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxCflowdExpStatRecDropped.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxCflowdExpStatRecDropped.setDescription('The value of tmnxBsxCflowdExpStatRecDropped indicates the total number of flow records dropped.')
tmnxBsxCflowdExpStatHCRecDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 5, 9, 1, 5), Counter64()).setUnits('records').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxCflowdExpStatHCRecDropped.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxCflowdExpStatHCRecDropped.setDescription('The value of tmnxBsxCflowdExpStatHCRecDropped indicates the total number of Cflowd flow records dropped. This object is the 64-bit version of tmnxBsxCflowdExpStatRecDropped.')
tmnxBsxCflowdExpStatFlowsNoRes = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 5, 9, 1, 6), Counter32()).setUnits('flows').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxCflowdExpStatFlowsNoRes.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxCflowdExpStatFlowsNoRes.setDescription('The value of tmnxBsxCflowdExpStatFlowsNoRes indicates the total number of flows that were selected for export but failed to obtain Cflowd resources.')
tmnxBsxCflowdExpStatHCFlowsNoRes = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 5, 9, 1, 7), Counter64()).setUnits('flows').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxCflowdExpStatHCFlowsNoRes.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxCflowdExpStatHCFlowsNoRes.setDescription('The value of tmnxBsxCflowdExpStatHCFlowsNoRes indicates the total number of flows that were selected for export but failed to obtain Cflowd resources. This object is the 64-bit version of tmnxBsxCflowdExpStatFlowsNoRes.')
tmnxBsxCflowdExpStatHCUSupSSRCSt = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 5, 9, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxCflowdExpStatHCUSupSSRCSt.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxCflowdExpStatHCUSupSSRCSt.setDescription("The value of tmnxBsxCflowdExpStatHCUSupSSRCSt indicates the number of synchronization source (SSRC) records which had to be aborted (due to reasons such as unknown codec type, non media stream, codec switch, etc). This value applies only when the index tmnxBsxCflowdExpType has a value of 'rtpPerformance(3)' and is otherwise zero.")
tmnxBsxCflowdExpStatUSupSSRCStLo = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 5, 9, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxCflowdExpStatUSupSSRCStLo.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxCflowdExpStatUSupSSRCStLo.setDescription("The value of tmnxBsxCflowdExpStatUSupSSRCStLo indicates the lower 32-bits of tmnxBsxCflowdStatusHCUSupSSRCSt. This value applies only when the index tmnxBsxCflowdExpType has a value of 'rtpPerformance(3)' and is otherwise zero.")
tmnxBsxCflowdExpStatUSupSSRCStHi = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 5, 9, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxCflowdExpStatUSupSSRCStHi.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxCflowdExpStatUSupSSRCStHi.setDescription("The value of tmnxBsxCflowdExpStatUSupSSRCStHi indicates the upper 32-bits of tmnxBsxCflowdStatusHCUSupSSRCSt. This value applies only when the index tmnxBsxCflowdExpType has a value of 'rtpPerformance(3)' and is otherwise zero.")
tmnxBsxOvrdScalars = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 6, 1))
tmnxBsxOvrdAaSubLastChTime = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 6, 1, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxOvrdAaSubLastChTime.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxOvrdAaSubLastChTime.setDescription('The value of tmnxBsxOvrdAaSubLastChTime indicates the last time a successful set was performed on the tmnxBsxOvrdAaSubTable.')
tmnxBsxOvrdAaSubCharLastChTm = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 6, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxOvrdAaSubCharLastChTm.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxOvrdAaSubCharLastChTm.setDescription('The value of tmnxBsxOvrdAaSubCharLastChTm indicates the last time a successful set was performed on the tmnxBsxOvrdAaSubCharTable.')
tmnxBsxOvrdAaSubTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 6, 2), )
if mibBuilder.loadTexts: tmnxBsxOvrdAaSubTable.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxOvrdAaSubTable.setDescription('The tmnxBsxOvrdAaSubTable specifies overrides of Application Assurance subscriber policy. Each row specifies an override of policy configuration for an Application Assurance subscriber. A subscriber is uniquely identified by a tmnxBsxAaSubscriberType and tmnxBsxAaSubscriber.')
tmnxBsxOvrdAaSubEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 6, 2, 1), ).setIndexNames((0, "TIMETRA-BSX-NG-MIB", "tmnxBsxAaGrpPartIndex"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubscriberType"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubscriber"))
if mibBuilder.loadTexts: tmnxBsxOvrdAaSubEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxOvrdAaSubEntry.setDescription('Each tmnxBsxOvrdAaSubEntry specifies an override of policy configuration for an Application Assurance subscriber.')
tmnxBsxOvrdAaSubRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 6, 2, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxOvrdAaSubRowStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxOvrdAaSubRowStatus.setDescription("The value of tmnxBsxOvrdAaSubRowStatus specifies the row status. It allows entries to be created and deleted in the tmnxBsxOvrdAaSubTable. Rows are created by specifying the value of 'createAndGo (4)', and deleted by specifying the value of 'destroy (6)'.")
tmnxBsxOvrdAaSubRowLastCh = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 6, 2, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxOvrdAaSubRowLastCh.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxOvrdAaSubRowLastCh.setDescription('The value of tmnxBsxOvrdAaSubRowLastCh indicates the last time a successful set was performed on this row of the tmnxBsxOvrdAaSubTable.')
tmnxBsxOvrdAaSubCharTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 6, 3), )
if mibBuilder.loadTexts: tmnxBsxOvrdAaSubCharTable.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxOvrdAaSubCharTable.setDescription('The tmnxBsxOvrdAaSubCharTable specifies overrides of application profile characteristics for Application Assurance subscribers. Each row specifies an override of an application profile characteristic for an Application Assurance subscriber. A subscriber is uniquely identified by a tmnxBsxAaSubscriberType and tmnxBsxAaSubscriber.')
tmnxBsxOvrdAaSubCharEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 6, 3, 1), ).setIndexNames((0, "TIMETRA-BSX-NG-MIB", "tmnxBsxAaGrpPartIndex"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubscriberType"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubscriber"), (1, "TIMETRA-BSX-NG-MIB", "tmnxBsxAsoCharName"))
if mibBuilder.loadTexts: tmnxBsxOvrdAaSubCharEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxOvrdAaSubCharEntry.setDescription('Each tmnxBsxOvrdAaSubCharEntry specifies an override of an application profile characteristic for an Application Assurance subscriber.')
tmnxBsxOvrdAaSubCharRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 6, 3, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxOvrdAaSubCharRowStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxOvrdAaSubCharRowStatus.setDescription("The value of tmnxBsxOvrdAaSubCharRowStatus specifies the row status. It allows entries to be created and deleted in the tmnxBsxOvrdAaSubCharTable. Rows are created by specifying the value of 'createAndGo (4)', and deleted by specifying the value of 'destroy (6)'.")
tmnxBsxOvrdAaSubCharRowLastCh = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 6, 3, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxOvrdAaSubCharRowLastCh.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxOvrdAaSubCharRowLastCh.setDescription('The value of tmnxBsxOvrdAaSubCharRowLastCh indicates the last time a successful set was performed on this row of the tmnxBsxOvrdAaSubCharTable.')
tmnxBsxOvrdAaSubCharValName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 6, 3, 1, 3), TNamedItem()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxOvrdAaSubCharValName.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxOvrdAaSubCharValName.setDescription('The value of tmnxBsxOvrdAaSubCharValName specifies the override characteristic value for the application profile characteristic used by the Application assurance subscriber.')
tmnxBsxTransitScalars = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 7, 1))
tmnxBsxTransitIpPolicyLastChTime = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 7, 1, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxTransitIpPolicyLastChTime.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxTransitIpPolicyLastChTime.setDescription('The value of tmnxBsxTransitIpPolicyLastChTime indicates the last time, since system startup, a successful set was performed on the tmnxBsxTransitIpPolicyTable.')
tmnxBsxTransIpPlcySubLastChTime = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 7, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxTransIpPlcySubLastChTime.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxTransIpPlcySubLastChTime.setDescription('The value of tmnxBsxTransIpPlcySubLastChTime indicates the last time, since system startup, a successful set was performed on the tmnxBsxTransitIpPolicySubTable.')
tmnxBsxTransIpPlcyAddrLastChTime = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 7, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxTransIpPlcyAddrLastChTime.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxTransIpPlcyAddrLastChTime.setDescription('The value of tmnxBsxTransIpPlcyAddrLastChTime indicates the last time, since system startup, a successful set was performed on the tmnxBsxTransitIpPolicyAddrTable.')
tmnxBsxTransPrefPlcyLastChTime = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 7, 1, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxTransPrefPlcyLastChTime.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxTransPrefPlcyLastChTime.setDescription('The value of tmnxBsxTransPrefPlcyLastChTime indicates the last time, since system startup, a successful set was performed on the tmnxBsxTransPrefPolicyTable.')
tmnxBsxTransPrefSubLastChTime = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 7, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxTransPrefSubLastChTime.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxTransPrefSubLastChTime.setDescription('The value of tmnxBsxTransPrefSubLastChTime indicates the last time, since system startup, a successful set was performed on the tmnxBsxTransPrefSubTable.')
tmnxBsxTransPrefEntryLastChTime = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 7, 1, 6), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxTransPrefEntryLastChTime.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxTransPrefEntryLastChTime.setDescription('The value of tmnxBsxTransPrefEntryLastChTime indicates the last time, since system startup, a successful set was performed on the tmnxBsxTransPrefTable.')
tmnxBsxTransitIpPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 7, 2), )
if mibBuilder.loadTexts: tmnxBsxTransitIpPolicyTable.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxTransitIpPolicyTable.setDescription('The tmnxBsxTransitIpPolicyTable contains an entry for each transit IP policy. These policies are used in cases when there is no system/IOM subscriber context such as in-line deployments of AA where the traffic from the AA subscriber is transiting through the SR.')
tmnxBsxTransitIpPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 7, 2, 1), ).setIndexNames((0, "TIMETRA-BSX-NG-MIB", "tmnxBsxAaGrpPartIndex"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxTransitIpPolicyId"))
if mibBuilder.loadTexts: tmnxBsxTransitIpPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxTransitIpPolicyEntry.setDescription('Each tmnxBsxTransitIpPolicyEntry contains transit IP policy specific configuration.')
tmnxBsxTransitIpPolicyId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 7, 2, 1, 1), TmnxBsxTransitIpPolicyId())
if mibBuilder.loadTexts: tmnxBsxTransitIpPolicyId.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxTransitIpPolicyId.setDescription('The value of tmnxBsxTransitIpPolicyId specifies, along with tmnxBsxAaGrpPartIndex, the index to a specific transit IP policy. tmnxBsxTransitIpPolicyId is system unique across all group-partitions.')
tmnxBsxTransitIpPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 7, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxTransitIpPolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxTransitIpPolicyRowStatus.setDescription("The value of tmnxBsxTransitIpPolicyRowStatus specifies the row status. It allows entries to be created and deleted in the tmnxBsxTransitIpPolicyTable. Rows are created by specifying the value of 'createAndGo (4)', and deleted by specifying the value of 'destroy (6)'. To delete an entry, all references to this policy by TIMETRA-SAP-MIB::sapTransitIpPolicyId in the TIMETRA-SAP-MIB::sapBaseInfoTable or by TIMETRA-SDP-MIB::sdpBindTransitIpPolicyId in the TIMETRA-SDP-MIB::sdpBindTable must be deleted. The deletion of a row of this table implicitly deletes all the corresponding entries in the tmnxBsxTransitIpPolicySubTable and the tmnxBsxTransitIpPolicyAddrTable that are indexed on tmnxBsxTransitIpPolicyId.")
tmnxBsxTransitIpPolicyRowLastCh = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 7, 2, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxTransitIpPolicyRowLastCh.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxTransitIpPolicyRowLastCh.setDescription('The value of tmnxBsxTransitIpPolicyRowLastCh indicates the last time, since system startup, a successful set was performed on this row of the tmnxBsxTransitIpPolicyTable.')
tmnxBsxTransitIpPolicyDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 7, 2, 1, 4), TItemDescription()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxTransitIpPolicyDesc.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxTransitIpPolicyDesc.setDescription('The value of tmnxBsxTransitIpPolicyDesc specifies a user-provided description for this transit IP policy.')
tmnxBsxTransitIpPolicyDefAppProf = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 7, 2, 1, 5), TNamedItemOrEmpty()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxTransitIpPolicyDefAppProf.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxTransitIpPolicyDefAppProf.setDescription('The value of tmnxBsxTransitIpPolicyDefAppProf specifies the name of the default application profile to be applied to a dynamically learned AA transit subscriber.')
tmnxBsxTransitIpPolicySubIdPlcy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 7, 2, 1, 6), TNamedItemOrEmpty()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxTransitIpPolicySubIdPlcy.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxTransitIpPolicySubIdPlcy.setDescription('The value of tmnxBsxTransitIpPolicySubIdPlcy specifies the subscriber identification policy for this transit IP policy as defined in tmnxSubIdentPolicyTable in the TIMETRA-SUBSCRIBER-MGMT-MIB. The corresponding tmnxSubIPolName must exist in the tmnxSubIdentPolicyTable.')
tmnxBsxTransitIpPolicyRadius = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 7, 2, 1, 7), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxTransitIpPolicyRadius.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxTransitIpPolicyRadius.setDescription('The value of tmnxBsxTransitIpPolicyRadius specifies whether transit subscribers are dynamically learned via RADIUS. The use of RADIUS to learn transit subscribers is mutually exclusive with the use of DHCP for this purpose.')
tmnxBsxTransitIpPolicyRadAuthPlc = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 7, 2, 1, 8), TNamedItemOrEmpty()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxTransitIpPolicyRadAuthPlc.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxTransitIpPolicyRadAuthPlc.setDescription('The value of tmnxBsxTransitIpPolicyRadAuthPlc specifies the RADIUS authentication policy to be used. The specified tmnxBsxTransitIpPolicyRadAuthPlc is not required to exist in the tmnxSubAuthPlcyTable in the TIMETRA-SUBSCRIBER-MGMT-MIB.')
tmnxBsxTransitIpPolicyDhcp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 7, 2, 1, 9), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxTransitIpPolicyDhcp.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxTransitIpPolicyDhcp.setDescription('The value of tmnxBsxTransitIpPolicyDhcp specifies whether transit subscribers are dynamically learned via DHCP. The use of DHCP to learn transit subscribers is mutually exclusive with the use of RADIUS for this purpose.')
tmnxBsxTransitIpPolicyIPv6PfxLen = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 7, 2, 1, 10), InetAddressPrefixLength()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxTransitIpPolicyIPv6PfxLen.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxTransitIpPolicyIPv6PfxLen.setDescription('The value of tmnxBsxTransitIpPolicyIPv6PfxLen specifies the prefix length of IPv6 addresses in this policy for both static and dynamic transits. tmnxBsxTransitIpPolicyIPv6PfxLen can only be changed while no static IPv6 subscribers exist. If dynamic IPv6 addresses exist, they will be flushed.')
tmnxBsxTransitIpPolicySubsCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 7, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxTransitIpPolicySubsCount.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxTransitIpPolicySubsCount.setDescription('The value of tmnxBsxTransitIpPolicySubsCount indicates the total number of subscribers within this transit IP policy. The value of tmnxBsxTransitIpPolicySubsCount is the number of rows in the table tmnxBsxTransitIpPolicySubTable with matching tmnxBsxAaGrpPartIndex and tmnxBsxTransitIpPolicyId indices.')
tmnxBsxTransitIpPolicyIPv4EntCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 7, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxTransitIpPolicyIPv4EntCnt.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxTransitIpPolicyIPv4EntCnt.setDescription('The value of tmnxBsxTransitIpPolicyIPv4EntCnt indicates the total number of IPv4 address entries within this transit IP policy. The value of tmnxBsxTransitIpPolicyIPv4EntCnt is the number of rows in the table tmnxBsxTransitIpPolicyAddrTable with matching tmnxBsxAaGrpPartIndex and tmnxBsxTransitIpPolicyId indices when tmnxBsxTransitIpPolicyAddrType indicates an IPv4 address type.')
tmnxBsxTransitIpPolicyIPv6EntCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 7, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxTransitIpPolicyIPv6EntCnt.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxTransitIpPolicyIPv6EntCnt.setDescription('The value of tmnxBsxTransitIpPolicyIPv6EntCnt indicates the total number of IPv6 address entries within this transit IP policy. The value of tmnxBsxTransitIpPolicyIPv6EntCnt is the number of rows in the table tmnxBsxTransitIpPolicyAddrTable with matching tmnxBsxAaGrpPartIndex and tmnxBsxTransitIpPolicyId indices when tmnxBsxTransitIpPolicyAddrType indicates an IPv6 address type.')
tmnxBsxTransitIpPolicySeenIp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 7, 2, 1, 14), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxTransitIpPolicySeenIp.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxTransitIpPolicySeenIp.setDescription('The value of tmnxBsxTransitIpPolicySeenIp specifies whether or not to initiate dynamic transit subscriber creation when traffic is detected on a parent SAP or Spoke SDP. When tmnxBsxTransitIpPolicySeenIp and tmnxBsxTransitIpPolicyRadius are both enabled a RADIUS Access Request message is sent to the RADIUS server. The RADIUS server must respond with a transit subscriber create message. When tmnxBsxTransitIpPolicySeenIp and tmnxBsxTransitIpPolicyAutoCreate are both enabled a transit subscriber will be dynamically created for each IP address without a policy server. The use of Seen IP to learn transit subscribers is mutually exclusive with the use of DHCP for this purpose.')
tmnxBsxTransitIpPolicyAutoCreate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 7, 2, 1, 15), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxTransitIpPolicyAutoCreate.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxTransitIpPolicyAutoCreate.setDescription('The value of tmnxBsxTransitIpPolicyAutoCreate specifies whether transit subscribers are automatically created for each IP address without a policy server. Auto creation is only possible when a default application profile (tmnxBsxTransitIpPolicyDefAppProf) has been defined. The use of auto creation of transit subscribers is mutually exclusive with the use of DHCP or RADIUS for this purpose.')
tmnxBsxTransitIpPolicySeenIpRad = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 7, 2, 1, 16), TNamedItemOrEmpty()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxTransitIpPolicySeenIpRad.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxTransitIpPolicySeenIpRad.setDescription('The value of tmnxBsxTransitIpPolicySeenIpRad specifies the RADIUS accounting policy used to initiate dynamic transit subscriber creation. The accounting policy must be an existing row within the tmnxBsxRadApTable specified by the index tmnxBsxRadApName.')
tmnxBsxTransitIpPolicySubTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 7, 3), )
if mibBuilder.loadTexts: tmnxBsxTransitIpPolicySubTable.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxTransitIpPolicySubTable.setDescription('The tmnxBsxTransitIpPolicySubTable contains the configuration of transit subscribers within a transit IP policy.')
tmnxBsxTransitIpPolicySubEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 7, 3, 1), ).setIndexNames((0, "TIMETRA-BSX-NG-MIB", "tmnxBsxAaGrpPartIndex"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxTransitIpPolicyId"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxTransitIpPolicySubscriber"))
if mibBuilder.loadTexts: tmnxBsxTransitIpPolicySubEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxTransitIpPolicySubEntry.setDescription('Each tmnxBsxTransitIpPolicySubEntry contains information for an individual transit subscriber.')
tmnxBsxTransitIpPolicySubscriber = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 7, 3, 1, 1), TNamedItem())
if mibBuilder.loadTexts: tmnxBsxTransitIpPolicySubscriber.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxTransitIpPolicySubscriber.setDescription('The value of tmnxBsxTransitIpPolicySubscriber specifies the name of the Transit AA subscriber.')
tmnxBsxTransIpPlcySubRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 7, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxTransIpPlcySubRowStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxTransIpPlcySubRowStatus.setDescription("The value of tmnxBsxTransIpPlcySubRowStatus specifies the row status. It allows entries to be created and deleted in the tmnxBsxTransitIpPolicySubTable. Rows are created by specifying the value of 'createAndGo (4)', and deleted by specifying the value of 'destroy (6)'. A row of this table cannot be created unless a valid tmnxBsxTransIpPlcySubAppProfNm is also specified. The deletion of a row in this table implicitly deletes the corresponding entries in the tmnxBsxTransitIpPolicyAddrTable that reference the subscriber specified by tmnxBsxTransitIpPolicySubscriber.")
tmnxBsxTransIpPlcySubRowLastCh = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 7, 3, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxTransIpPlcySubRowLastCh.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxTransIpPlcySubRowLastCh.setDescription('The value of tmnxBsxTransIpPlcySubRowLastCh indicates the last time, since system startup, a successful set was performed on this row of the tmnxBsxTransitIpPolicySubTable.')
tmnxBsxTransIpPlcySubAppProfNm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 7, 3, 1, 4), TNamedItem()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxTransIpPlcySubAppProfNm.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxTransIpPlcySubAppProfNm.setDescription('The value of tmnxBsxTransIpPlcySubAppProfNm specifies the name of the application profile to be applied to the AA transit subscriber. The value of tmnxBsxTransIpPlcySubAppProfNm must be a valid app-profile that exists in the group/partition identified by tmnxBsxAaGrpPartIndex that is an index of this row entry. tmnxBsxTransIpPlcySubAppProfNm must be present in the same SNMP PDU as the row creation, otherwise the creation will fail.')
tmnxBsxTransIpPlcySubRefCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 7, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxTransIpPlcySubRefCount.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxTransIpPlcySubRefCount.setDescription('The value of tmnxBsxTransIpPlcySubRefCount specifies the number of references in the tmnxBsxTransitIpPolicyAddrTable to the AA transit subscriber identified in this row.')
tmnxBsxTransitIpPolicyAddrTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 7, 4), )
if mibBuilder.loadTexts: tmnxBsxTransitIpPolicyAddrTable.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxTransitIpPolicyAddrTable.setDescription('The tmnxBsxTransitIpPolicyAddrTable contains IP addresses for the transit IP policies.')
tmnxBsxTransitIpPolicyAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 7, 4, 1), ).setIndexNames((0, "TIMETRA-BSX-NG-MIB", "tmnxBsxAaGrpPartIndex"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxTransitIpPolicyId"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxTransitIpPolicyAddrType"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxTransitIpPolicyAddr"))
if mibBuilder.loadTexts: tmnxBsxTransitIpPolicyAddrEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxTransitIpPolicyAddrEntry.setDescription('Each tmnxBsxTransitIpPolicyAddrEntry contains an individual address associated with a transit AA subscriber.')
tmnxBsxTransitIpPolicyAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 7, 4, 1, 1), InetAddressType())
if mibBuilder.loadTexts: tmnxBsxTransitIpPolicyAddrType.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxTransitIpPolicyAddrType.setDescription('The value of tmnxBsxTransitIpPolicyAddrType specifies the type of the address.')
tmnxBsxTransitIpPolicyAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 7, 4, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: tmnxBsxTransitIpPolicyAddr.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxTransitIpPolicyAddr.setDescription("The value of tmnxBsxTransitIpPolicyAddr specifies the the address associated with the transit AA subscriber. Addresses of type 'unknown(0)' maybe of zero-length.")
tmnxBsxTransIpPlcyAddrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 7, 4, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxTransIpPlcyAddrRowStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxTransIpPlcyAddrRowStatus.setDescription("The value of tmnxBsxTransIpPlcyAddrRowStatus specifies the row status. It allows entries to be created and deleted in the tmnxBsxTransitIpPolicyAddrTable. Rows are created by specifying the value of 'createAndGo (4)', and deleted by specifying the value of 'destroy (6)' When creating a row, the tmnxBsxTransIpPlcyAddrSubscriber must be specified in the same SNMP PDU.")
tmnxBsxTransIpPlcyAddrRowLastCh = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 7, 4, 1, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxTransIpPlcyAddrRowLastCh.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxTransIpPlcyAddrRowLastCh.setDescription('The value of tmnxBsxTransIpPlcyAddrRowLastCh indicates the last time, since system startup, a successful set was performed on this row of the tmnxBsxTransitIpPolicyAddrTable.')
tmnxBsxTransIpPlcyAddrSubscriber = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 7, 4, 1, 5), TNamedItem()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxTransIpPlcyAddrSubscriber.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxTransIpPlcyAddrSubscriber.setDescription('The value of tmnxBsxTransIpPlcyAddrSubscriber specifies the name of the Transit AA subscriber associated with the address identified by this row of the tmnxBsxTransitIpPolicyAddrTable. The value of tmnxBsxTransIpPlcyAddrSubscriber must exist in the tmnxBsxTransitIpPolicySubTable and cannot be changed after the creation of the row entry. tmnxBsxTransIpPlcyAddrSubscriber must be present in the same SNMP PDU as the row creation, otherwise the creation will fail.')
tmnxBsxTransitIpSumTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 7, 5), )
if mibBuilder.loadTexts: tmnxBsxTransitIpSumTable.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxTransitIpSumTable.setDescription('The tmnxBsxTransitIpSumTable contains summary information for all transit subscribers including dynamically created subscribers.')
tmnxBsxTransitIpSumEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 7, 5, 1), ).setIndexNames((0, "TIMETRA-BSX-NG-MIB", "tmnxBsxAaGrpPartIndex"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxTransitIpPolicyId"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxTransitIpPolicySubscriber"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxTransitIpPolicyAddrType"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxTransitIpPolicyAddr"))
if mibBuilder.loadTexts: tmnxBsxTransitIpSumEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxTransitIpSumEntry.setDescription('Each tmnxBsxTransitIpSumEntry contains summary information for a transit subscriber.')
tmnxBsxTransitIpSumUpdateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 7, 5, 1, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxTransitIpSumUpdateTime.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxTransitIpSumUpdateTime.setDescription('The value of tmnxBsxTransitIpSumUpdateTime indicates the last time, since system startup, the contents of a row of the tmnxBsxTransitIpSumTable was updated.')
tmnxBsxTransitIpSumParentSubType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 7, 5, 1, 2), TmnxBsxAaSubscriberType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxTransitIpSumParentSubType.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxTransitIpSumParentSubType.setDescription('The value of tmnxBsxTransitIpSumParentSubType indicates the type of the parent of the subscriber.')
tmnxBsxTransitIpSumParentSub = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 7, 5, 1, 3), TmnxBsxAaSubscriber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxTransitIpSumParentSub.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxTransitIpSumParentSub.setDescription('The value of tmnxBsxTransitIpSumParentSub indicates the parent of the subscriber.')
tmnxBsxTransitIpSumAppProfNm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 7, 5, 1, 4), TNamedItem()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxTransitIpSumAppProfNm.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxTransitIpSumAppProfNm.setDescription('The value of tmnxBsxTransitIpSumAppProfNm indicates the name of the application profile to be applied to the subscriber.')
tmnxBsxTransitIpSumIpOriginMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 7, 5, 1, 5), TmnxBsxTransitSubOrigin()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxTransitIpSumIpOriginMask.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxTransitIpSumIpOriginMask.setDescription('The value of tmnxBsxTransitIpSumIpOriginMask indicates the manner in which the transit subscriber was created.')
tmnxBsxTransPrefPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 7, 6), )
if mibBuilder.loadTexts: tmnxBsxTransPrefPolicyTable.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxTransPrefPolicyTable.setDescription('The tmnxBsxTransPrefPolicyTable contains an entry for each transit prefix policy. These policies are used in cases when there is no system/IOM subscriber context such as in-line deployments of AA where the traffic from the AA subscriber is transiting through the SR.')
tmnxBsxTransPrefPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 7, 6, 1), ).setIndexNames((0, "TIMETRA-BSX-NG-MIB", "tmnxBsxAaGrpPartIndex"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxTransPrefPolicyId"))
if mibBuilder.loadTexts: tmnxBsxTransPrefPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxTransPrefPolicyEntry.setDescription('Each tmnxBsxTransPrefPolicyEntry contains transit prefix policy specific configuration.')
tmnxBsxTransPrefPolicyId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 7, 6, 1, 1), TmnxBsxTransPrefPolicyId())
if mibBuilder.loadTexts: tmnxBsxTransPrefPolicyId.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxTransPrefPolicyId.setDescription('The value of tmnxBsxTransPrefPolicyId specifies, along with tmnxBsxAaGrpPartIndex, the index to a specific transit prefix policy. tmnxBsxTransPrefPolicyId is system unique across all group-partitions.')
tmnxBsxTransPrefPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 7, 6, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxTransPrefPolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxTransPrefPolicyRowStatus.setDescription("The value of tmnxBsxTransPrefPolicyRowStatus specifies the row status. It allows entries to be created and deleted in the tmnxBsxTransPrefPolicyTable. Rows are created by specifying the value of 'createAndGo (4)', and deleted by specifying the value of 'destroy (6)'. The deletion of a row of this table implicitly deletes all the corresponding entries in the tmnxBsxTransPrefSubTable and tmnxBsxTransPrefTable that are indexed on tmnxBsxTransPrefPolicyId.")
tmnxBsxTransPrefPolicyRowLastCh = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 7, 6, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxTransPrefPolicyRowLastCh.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxTransPrefPolicyRowLastCh.setDescription('The value of tmnxBsxTransPrefPolicyRowLastCh indicates the last time, since system startup, a successful set was performed on this row of the tmnxBsxTransPrefPolicyTable.')
tmnxBsxTransPrefPolicyDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 7, 6, 1, 4), TItemDescription()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxTransPrefPolicyDesc.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxTransPrefPolicyDesc.setDescription('The value of tmnxBsxTransPrefPolicyDesc specifies a user-provided description for this transit prefix policy.')
tmnxBsxTransPrefPolicySubsCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 7, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxTransPrefPolicySubsCount.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxTransPrefPolicySubsCount.setDescription('The value of tmnxBsxTransPrefPolicySubsCount indicates the total number of subscribers within this transit prefix policy. The value of tmnxBsxTransPrefPolicySubsCount is the number of rows in the table tmnxBsxTransPrefSubTable with matching tmnxBsxAaGrpPartIndex and tmnxBsxTransPrefPolicyId indices.')
tmnxBsxTransPrefPolicyEntCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 7, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxTransPrefPolicyEntCount.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxTransPrefPolicyEntCount.setDescription('The value of tmnxBsxTransPrefPolicyEntCount indicates the total number of entries within this transit prefix policy. The value of tmnxBsxTransPrefPolicyEntCount is the number of rows in the table tmnxBsxTransPrefTable with matching tmnxBsxAaGrpPartIndex and tmnxBsxTransPrefPolicyId indices.')
tmnxBsxTransPrefPolicyIPv4EntCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 7, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxTransPrefPolicyIPv4EntCnt.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxTransPrefPolicyIPv4EntCnt.setDescription('The value of tmnxBsxTransPrefPolicyIPv4EntCnt indicates the total number of valid IPv4 entries within this transit prefix policy. A valid entry is defined as an entry in the tmnxBsxTransPrefTable with matching tmnxBsxAaGrpPartIndex and tmnxBsxTransPrefPolicyId indices plus non-default values specified for the tmnxBsxTransPrefEntrySubscriber, and tmnxBsxTransPrefEntrySubAddr or tmnxBsxTransPrefEntryNetAddr objects.')
tmnxBsxTransPrefPolicyIPv6EntCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 7, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxTransPrefPolicyIPv6EntCnt.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxTransPrefPolicyIPv6EntCnt.setDescription('The value of tmnxBsxTransPrefPolicyIPv6EntCnt indicates the total number of valid IPv6 entries within this transit prefix policy. A valid entry is defined as an entry in the tmnxBsxTransPrefTable with matching tmnxBsxAaGrpPartIndex and tmnxBsxTransPrefPolicyId indices plus non-default values specified for the tmnxBsxTransPrefEntrySubscriber, and tmnxBsxTransPrefEntrySubAddr or tmnxBsxTransPrefEntryNetAddr objects.')
tmnxBsxTransPrefSubTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 7, 7), )
if mibBuilder.loadTexts: tmnxBsxTransPrefSubTable.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxTransPrefSubTable.setDescription('The tmnxBsxTransPrefSubTable contains the configuration of transit subscribers within a transit prefix policy.')
tmnxBsxTransPrefSubEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 7, 7, 1), ).setIndexNames((0, "TIMETRA-BSX-NG-MIB", "tmnxBsxAaGrpPartIndex"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxTransPrefPolicyId"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxTransPrefSubscriber"))
if mibBuilder.loadTexts: tmnxBsxTransPrefSubEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxTransPrefSubEntry.setDescription('Each tmnxBsxTransPrefSubEntry contains transit prefix policy subscriber configuration.')
tmnxBsxTransPrefSubscriber = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 7, 7, 1, 1), TNamedItem())
if mibBuilder.loadTexts: tmnxBsxTransPrefSubscriber.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxTransPrefSubscriber.setDescription('The value of tmnxBsxTransPrefSubscriber specifies the name of the transit prefix AA subscriber.')
tmnxBsxTransPrefSubRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 7, 7, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxTransPrefSubRowStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxTransPrefSubRowStatus.setDescription("The value of tmnxBsxTransPrefSubRowStatus specifies the row status. It allows entries to be created and deleted in the tmnxBsxTransPrefSubTable. Rows are created by specifying the value of 'createAndGo (4)', and deleted by specifying the value of 'destroy (6)'.")
tmnxBsxTransPrefSubRowLastCh = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 7, 7, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxTransPrefSubRowLastCh.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxTransPrefSubRowLastCh.setDescription('The value of tmnxBsxTransPrefSubRowLastCh indicates the last time, since system startup, a successful set was performed on this row of the tmnxBsxTransPrefSubTable.')
tmnxBsxTransPrefSubIsRemote = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 7, 7, 1, 4), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxTransPrefSubIsRemote.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxTransPrefSubIsRemote.setDescription('The value of tmnxBsxTransPrefSubIsRemote specifies whether the subscriber is remote. This value can only be set during row creation.')
tmnxBsxTransPrefSubAppProfNm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 7, 7, 1, 5), TNamedItem()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxTransPrefSubAppProfNm.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxTransPrefSubAppProfNm.setDescription('The value of tmnxBsxTransPrefSubAppProfNm specifies the name of the application profile to be applied to the AA transit. The value of tmnxBsxTransPrefSubAppProfNm must be a valid app-profile that exists in the group/partition identified by tmnxBsxAaGrpPartIndex which is an index of this row entry. tmnxBsxTransIpPlcySubAppProfNm must be present in the same SNMP PDU as the row creation, otherwise the creation will fail.')
tmnxBsxTransPrefSubRefCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 7, 7, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxTransPrefSubRefCount.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxTransPrefSubRefCount.setDescription('The value of tmnxBsxTransPrefSubRefCount specifies the number of references in the tmnxBsxTransPrefTable to the AA prefix subscriber identified in this row.')
tmnxBsxTransPrefTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 7, 8), )
if mibBuilder.loadTexts: tmnxBsxTransPrefTable.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxTransPrefTable.setDescription('The tmnxBsxTransPrefTable contains the configuration of entries within a transit prefix policy.')
tmnxBsxTransPrefEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 7, 8, 1), ).setIndexNames((0, "TIMETRA-BSX-NG-MIB", "tmnxBsxAaGrpPartIndex"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxTransPrefPolicyId"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxTransPrefEntryId"))
if mibBuilder.loadTexts: tmnxBsxTransPrefEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxTransPrefEntry.setDescription("Each tmnxBsxTransPrefEntry contains transit prefix policy entry configuration. When both the tmnxBsxTransPrefEntrySubAddrType and the tmnxBsxTransPrefEntryNetAddrType are not set to 'unknown(0)', these address types must have the same value.")
tmnxBsxTransPrefEntryId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 7, 8, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: tmnxBsxTransPrefEntryId.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxTransPrefEntryId.setDescription('The value of tmnxBsxTransPrefEntryId specifies, along with tmnxBsxAaGrpPartIndex and tmnxBsxTransPrefPolicyId, the index to a specific entry of a transit prefix policy.')
tmnxBsxTransPrefEntryRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 7, 8, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxTransPrefEntryRowStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxTransPrefEntryRowStatus.setDescription("The value of tmnxBsxTransPrefEntryRowStatus specifies the row status. It allows entries to be created and deleted in the tmnxBsxTransPrefTable. Rows are created by specifying the value of 'createAndGo (4)', and deleted by specifying the value of 'destroy (6)'.")
tmnxBsxTransPrefEntryRowLastCh = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 7, 8, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxTransPrefEntryRowLastCh.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxTransPrefEntryRowLastCh.setDescription('The value of tmnxBsxTransPrefEntryRowLastCh indicates the last time, since system startup, a successful set was performed on this row of the tmnxBsxTransPrefTable.')
tmnxBsxTransPrefEntrySubAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 7, 8, 1, 4), InetAddressType().clone('unknown')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxTransPrefEntrySubAddrType.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxTransPrefEntrySubAddrType.setDescription("The value of tmnxBsxTransPrefEntrySubAddrType specifies the address type of the subscriber address prefix associated with this transit prefix policy entry. tmnxBsxTransPrefEntrySubAddrType can be 'unknown(0)' indicating the subscriber address prefix is not used for matching. If the value is not 'unknown(0)' and tmnxBsxTransPrefEntryNetAddrType is not 'unknown(0)', then tmnxBsxTransPrefEntrySubAddrType must have the same value as tmnxBsxTransPrefEntryNetAddrType.")
tmnxBsxTransPrefEntrySubAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 7, 8, 1, 5), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )).clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxTransPrefEntrySubAddr.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxTransPrefEntrySubAddr.setDescription("The value of tmnxBsxTransPrefEntrySubAddr specifies the subscriber address prefix associated with this transit prefix policy entry. If the associated tmnxBsxTransPrefEntrySubAddrType is 'unknown(0)' then the address prefix is not used for matching and the address prefix is not applicable.")
tmnxBsxTransPrefEntrySubAddrLen = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 7, 8, 1, 6), InetAddressPrefixLength()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxTransPrefEntrySubAddrLen.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxTransPrefEntrySubAddrLen.setDescription("The value of tmnxBsxTransPrefEntrySubAddrLen specifies the length of the subscriber address prefix associated with this transit prefix policy entry. If the associated tmnxBsxTransPrefEntrySubAddrType is 'unknown(0)' then the address prefix is not used for matching and the length of the prefix is not applicable.")
tmnxBsxTransPrefEntryNetAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 7, 8, 1, 7), InetAddressType().clone('unknown')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxTransPrefEntryNetAddrType.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxTransPrefEntryNetAddrType.setDescription("The value of tmnxBsxTransPrefEntryNetAddrType specifies the address type of the network address prefix associated with this transit prefix policy entry. tmnxBsxTransPrefEntryNetAddrType can be 'unknown(0)' indicating the network address prefix is not used for matching. If the value is not 'unknown(0)' and tmnxBsxTransPrefEntrySubAddrType is not 'unknown(0)', then tmnxBsxTransPrefEntryNetAddrType must have the same value as tmnxBsxTransPrefEntrySubAddrType.")
tmnxBsxTransPrefEntryNetAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 7, 8, 1, 8), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )).clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxTransPrefEntryNetAddr.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxTransPrefEntryNetAddr.setDescription("The value of tmnxBsxTransPrefEntryNetAddr specifies the network address prefix associated with this transit prefix policy entry. If the associated tmnxBsxTransPrefEntryNetAddrType is 'unknown(0)' then the address prefix is not used for matching and the address prefix is not applicable.")
tmnxBsxTransPrefEntryNetAddrLen = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 7, 8, 1, 9), InetAddressPrefixLength()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxTransPrefEntryNetAddrLen.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxTransPrefEntryNetAddrLen.setDescription("The value of tmnxBsxTransPrefEntryNetAddrLen specifies the length of the network address prefix associated with this transit prefix policy entry. If the associated tmnxBsxTransPrefEntryNetAddrType is 'unknown(0)' then the address prefix is not used for matching and the length of the prefix is not applicable.")
tmnxBsxTransPrefEntrySubscriber = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 7, 8, 1, 10), TNamedItemOrEmpty()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxTransPrefEntrySubscriber.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxTransPrefEntrySubscriber.setDescription('The value of tmnxBsxTransPrefEntrySubscriber specifies the transit prefix subscriber associated with this transit prefix policy entry.')
tmnxBsxTransPrefSumTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 7, 9), )
if mibBuilder.loadTexts: tmnxBsxTransPrefSumTable.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxTransPrefSumTable.setDescription('The tmnxBsxTransPrefSumTable contains summary information for all transit prefix policy subscribers.')
tmnxBsxTransPrefSumEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 7, 9, 1), ).setIndexNames((0, "TIMETRA-BSX-NG-MIB", "tmnxBsxAaGrpPartIndex"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxTransPrefPolicyId"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxTransPrefSubscriber"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxTransPrefEntryId"))
if mibBuilder.loadTexts: tmnxBsxTransPrefSumEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxTransPrefSumEntry.setDescription('Each tmnxBsxTransPrefSumEntry contains summary information for a transit prefix subscriber.')
tmnxBsxTransPrefSumUpdateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 7, 9, 1, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxTransPrefSumUpdateTime.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxTransPrefSumUpdateTime.setDescription('The value of tmnxBsxTransPrefSumUpdateTime indicates the last time, since system startup, the contents of a row of the tmnxBsxTransPrefSumTable was updated.')
tmnxBsxTransPrefSumSubAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 7, 9, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxTransPrefSumSubAddrType.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxTransPrefSumSubAddrType.setDescription('The value of tmnxBsxTransPrefSumSubAddrType indicates the type of the subscriber address.')
tmnxBsxTransPrefSumSubAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 7, 9, 1, 3), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxTransPrefSumSubAddr.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxTransPrefSumSubAddr.setDescription('The value of tmnxBsxTransPrefSumSubAddr indicates the subscriber address.')
tmnxBsxTransPrefSumSubAddrLen = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 7, 9, 1, 4), InetAddressPrefixLength()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxTransPrefSumSubAddrLen.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxTransPrefSumSubAddrLen.setDescription("The value of tmnxBsxTransPrefSumSubAddrLen indicates the length of the subscriber address. Addresses of type 'unknown(0)' may be of zero-length.")
tmnxBsxTransPrefSumNetAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 7, 9, 1, 5), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxTransPrefSumNetAddrType.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxTransPrefSumNetAddrType.setDescription('The value of tmnxBsxTransPrefSumNetAddrType indicates the type of the address in tmnxBsxTransPrefSumNetAddr.')
tmnxBsxTransPrefSumNetAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 7, 9, 1, 6), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxTransPrefSumNetAddr.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxTransPrefSumNetAddr.setDescription('The value of tmnxBsxTransPrefSumNetAddr indicates the network address.')
tmnxBsxTransPrefSumNetAddrLen = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 7, 9, 1, 7), InetAddressPrefixLength()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxTransPrefSumNetAddrLen.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxTransPrefSumNetAddrLen.setDescription("The value of tmnxBsxTransPrefSumNetAddrLen indicates the length of the network address. Addresses of type 'unknown(0)' may be of zero-length.")
tmnxBsxTransPrefSumParentSubType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 7, 9, 1, 8), TmnxBsxAaSubscriberType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxTransPrefSumParentSubType.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxTransPrefSumParentSubType.setDescription('The value of tmnxBsxTransPrefSumParentSubType indicates the type of the parent of the subscriber.')
tmnxBsxTransPrefSumParentSub = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 7, 9, 1, 9), TmnxBsxAaSubscriber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxTransPrefSumParentSub.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxTransPrefSumParentSub.setDescription('The value of tmnxBsxTransPrefSumParentSub indicates the parent of the subscriber.')
tmnxBsxTransPrefSumAppProfNm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 7, 9, 1, 10), TNamedItem()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxTransPrefSumAppProfNm.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxTransPrefSumAppProfNm.setDescription('The value of tmnxBsxTransPrefSumAppProfNm indicates the name of the application profile to be applied to the subscriber.')
tmnxBsxHttpRedirScalars = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 8, 1))
tmnxBsxHttpRedirErrLastChTime = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 8, 1, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxHttpRedirErrLastChTime.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxHttpRedirErrLastChTime.setDescription('The value of tmnxBsxHttpRedirErrLastChTime indicates the last time, since system startup, a successful set was performed on the tmnxBsxHttpRedirErrTable.')
tmnxBsxHttpRedirErrCodeLastCh = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 8, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxHttpRedirErrCodeLastCh.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxHttpRedirErrCodeLastCh.setDescription('The value of tmnxBsxHttpRedirErrCodeLastCh indicates the last time, since system startup, a successful set was performed on the tmnxBsxHttpRedirErrCodeTable.')
tmnxBsxHttpRedirLastCh = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 8, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxHttpRedirLastCh.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxHttpRedirLastCh.setDescription('The value of tmnxBsxHttpRedirLastCh indicates the last time, since system startup, a successful set was performed on the tmnxBsxHttpRedirTable.')
tmnxBsxHttpRedirErrTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 8, 2), )
if mibBuilder.loadTexts: tmnxBsxHttpRedirErrTable.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxHttpRedirErrTable.setDescription('The tmnxBsxHttpRedirErrTable contains an entry for each instance of HTTP Error Redirect.')
tmnxBsxHttpRedirErrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 8, 2, 1), ).setIndexNames((0, "TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGroupIndex"), (1, "TIMETRA-BSX-NG-MIB", "tmnxBsxHttpRedirErrName"))
if mibBuilder.loadTexts: tmnxBsxHttpRedirErrEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxHttpRedirErrEntry.setDescription('Each tmnxBsxHttpRedirErrEntry contains the configuration information for an instance of HTTP Error Redirect.')
tmnxBsxHttpRedirErrName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 8, 2, 1, 1), TNamedItem())
if mibBuilder.loadTexts: tmnxBsxHttpRedirErrName.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxHttpRedirErrName.setDescription('The value of tmnxBsxHttpRedirErrName specifies the name of the HTTP Error Redirect.')
tmnxBsxHttpRedirErrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 8, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxHttpRedirErrRowStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxHttpRedirErrRowStatus.setDescription("The value of tmnxBsxHttpRedirErrRowStatus specifies the row status. It allows entries to be created and deleted in the tmnxBsxHttpRedirErrTable. Rows are created by specifying the value of 'createAndGo (4)', and deleted by specifying the value of 'destroy (6)'.")
tmnxBsxHttpRedirErrRowLastCh = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 8, 2, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxHttpRedirErrRowLastCh.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxHttpRedirErrRowLastCh.setDescription('The value of tmnxBsxHttpRedirErrRowLastCh indicates the last time, since system startup, a successful set was performed on this row of the tmnxBsxHttpRedirErrTable.')
tmnxBsxHttpRedirErrEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 8, 2, 1, 4), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxHttpRedirErrEnabled.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxHttpRedirErrEnabled.setDescription('The value of tmnxBsxHttpRedirErrEnabled specifies whether this HTTP Error Redirect is enabled.')
tmnxBsxHttpRedirErrDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 8, 2, 1, 5), TItemDescription()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxHttpRedirErrDescription.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxHttpRedirErrDescription.setDescription('The value of tmnxBsxHttpRedirErrDescription specifies the description of this HTTP Error Redirect.')
tmnxBsxHttpRedirErrTemplateId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 8, 2, 1, 6), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxHttpRedirErrTemplateId.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxHttpRedirErrTemplateId.setDescription("The value of tmnxBsxHttpRedirErrTemplateId specifies the template Id of this HTTP Error Redirect. A tmnxBsxHttpRedirErrTemplateId of 0 specifies no template Id. Template Ids are defined in the tmnxBsxTListAttribTable in rows where the index tmnxBsxTListName has a value of 'http-error-redirect-template' and where the index tmnxBsxTListAttribName has a value of 'template'.")
tmnxBsxHttpRedirErrHttpHost = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 8, 2, 1, 7), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxHttpRedirErrHttpHost.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxHttpRedirErrHttpHost.setDescription('The value of tmnxBsxHttpRedirErrHttpHost specifies the HTTP host for this HTTP Error Redirect.')
tmnxBsxHttpRedirErrParticipantId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 8, 2, 1, 8), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxHttpRedirErrParticipantId.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxHttpRedirErrParticipantId.setDescription('The value of tmnxBsxHttpRedirErrParticipantId specifies the participant Id for this HTTP Error Redirect.')
tmnxBsxHttpRedirErrCodeTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 8, 3), )
if mibBuilder.loadTexts: tmnxBsxHttpRedirErrCodeTable.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxHttpRedirErrCodeTable.setDescription('The tmnxBsxHttpRedirErrCodeTable contains HTTP error codes used in HTTP error redirection.')
tmnxBsxHttpRedirErrCodeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 8, 3, 1), ).setIndexNames((0, "TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGroupIndex"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxHttpRedirErrName"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxHttpRedirErrCode"))
if mibBuilder.loadTexts: tmnxBsxHttpRedirErrCodeEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxHttpRedirErrCodeEntry.setDescription('Each tmnxBsxHttpRedirErrCodeEntry contains the configuration information associated with an HTTP error code.')
tmnxBsxHttpRedirErrCode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 8, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: tmnxBsxHttpRedirErrCode.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxHttpRedirErrCode.setDescription("The value of tmnxBsxHttpRedirErrCode specifies the error code for a HTTP Error Redirect. Error codes are defined in the tmnxBsxTListAttribTable in rows where the index tmnxBsxTListName has a value of 'http-error-redirect-error-code' and the index tmnxBsxTListAttribName has a value of 'code'.")
tmnxBsxHttpRedirErrCodeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 8, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxHttpRedirErrCodeRowStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxHttpRedirErrCodeRowStatus.setDescription("The value of tmnxBsxHttpRedirErrCodeRowStatus specifies the row status. It allows entries to be created and deleted in the tmnxBsxHttpRedirErrCodeTable. Rows are created by specifying the value of 'createAndGo (4)', and deleted by specifying the value of 'destroy (6)'.")
tmnxBsxHttpRedirErrCodeRowLastCh = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 8, 3, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxHttpRedirErrCodeRowLastCh.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxHttpRedirErrCodeRowLastCh.setDescription('The value of tmnxBsxHttpRedirErrCodeRowLastCh indicates the last time, since system startup, a successful set was performed on this row of the tmnxBsxHttpRedirErrCodeTable.')
tmnxBsxHttpRedirErrorCodeMsgSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 8, 3, 1, 4), Unsigned32().clone(1024)).setUnits('octets').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxHttpRedirErrorCodeMsgSize.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxHttpRedirErrorCodeMsgSize.setDescription("The value of tmnxBsxHttpRedirErrorCodeMsgSize specifies the maximum message size above which redirect will not be done. The default tmnxBsxHttpRedirErrorCodeMsgSize is dependent on the error code. An initial table is shown below. The default message sizes are defined in the tmnxBsxTListAttribTable in rows where the index tmnxBsxTListName has a value of 'http-error-redirect-error-code' and the index tmnxBsxTListAttribName has a value of 'defaultMsgSize'. The corresponding error code can be correlated to this default message size by searching the tmnxBsxTListAttribTable where the index tmnxBsxTListName has a value of 'http-error-redirect-error-code', the index tmnxBsxTListAttribName has a value of 'code' and the tmnxBsxTListAttribSet matches the tmnxBsxTListAttribSet value that indexed the default maximum message size. Error Code Default Message Size ------------------------------------ 404 1024 ")
tmnxBsxHttpRdStatTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 8, 4), )
if mibBuilder.loadTexts: tmnxBsxHttpRdStatTable.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxHttpRdStatTable.setDescription('The tmnxBsxHttpRdStatTable contains statistics for HTTP error redirection.')
tmnxBsxHttpRdStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 8, 4, 1), ).setIndexNames((0, "TIMETRA-BSX-NG-MIB", "tmnxBsxAaGrpPartIndex"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxHttpRedirErrName"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxHttpRedirErrCode"), (0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxCardSlotNum"), (0, "TIMETRA-CHASSIS-MIB", "tmnxMDASlotNum"))
if mibBuilder.loadTexts: tmnxBsxHttpRdStatEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxHttpRdStatEntry.setDescription('Each tmnxBsxHttpRdStatEntry contains statistics for HTTP error redirection. An index with a valid tmnxBsxAaGrpPartIndex, tmnxBsxHttpRedirErrName, tmnxBsxHttpRedirErrCode (an existing row in tmnxBsxHttpRedirErrCodeTable), tmnxChassisIndex set to one, and a zero value for each of tmnxBsxCardSlotNum and tmnxMDASlotNum will return the summarized per group and HTTP error redirection code statistics.')
tmnxBsxHttpRdStatDiscontTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 8, 4, 1, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxHttpRdStatDiscontTime.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxHttpRdStatDiscontTime.setDescription('The value of tmnxBsxHttpRdStatDiscontTime indicates the SNMPv2-MIB::sysUpTime (hundredths of a second) when the ISA-AA MDA within the group has last changed status.')
tmnxBsxHttpRdStatHCRedir = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 8, 4, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxHttpRdStatHCRedir.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxHttpRdStatHCRedir.setDescription('The value of tmnxBsxHttpRdStatHCRedir indicates the number of redirected messages.')
tmnxBsxHttpRdStatRedirLo = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 8, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxHttpRdStatRedirLo.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxHttpRdStatRedirLo.setDescription('The value of tmnxBsxHttpRdStatRedirLo indicates the lower 32-bits of tmnxBsxHttpRdStatHCRedir.')
tmnxBsxHttpRdStatRedirHi = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 8, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxHttpRdStatRedirHi.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxHttpRdStatRedirHi.setDescription('The value of tmnxBsxHttpRdStatRedirHi indicates the upper 32-bits of tmnxBsxHttpRdStatHCRedir.')
tmnxBsxHttpRdStatHCSizeExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 8, 4, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxHttpRdStatHCSizeExceeded.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxHttpRdStatHCSizeExceeded.setDescription('The value of tmnxBsxHttpRdStatHCSizeExceeded indicates the number of messages that have exceeded the custom message size associated with the error code.')
tmnxBsxHttpRdStatSizeExceededLo = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 8, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxHttpRdStatSizeExceededLo.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxHttpRdStatSizeExceededLo.setDescription('The value of tmnxBsxHttpRdStatSizeExceededLo indicates the lower 32-bits of tmnxBsxHttpRdStatHCSizeExceeded.')
tmnxBsxHttpRdStatSizeExceededHi = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 8, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxHttpRdStatSizeExceededHi.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxHttpRdStatSizeExceededHi.setDescription('The value of tmnxBsxHttpRdStatSizeExceededHi indicates the upper 32-bits of tmnxBsxHttpRdStatHCSizeExceeded.')
tmnxBsxHttpRdStatHCOutOfResource = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 8, 4, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxHttpRdStatHCOutOfResource.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxHttpRdStatHCOutOfResource.setDescription('The value of tmnxBsxHttpRdStatHCOutOfResource indicates the number of message redirects that did not occur due to lack of resources.')
tmnxBsxHttpRdStatOutOfResourceLo = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 8, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxHttpRdStatOutOfResourceLo.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxHttpRdStatOutOfResourceLo.setDescription('The value of tmnxBsxHttpRdStatOutOfResourceLo indicates the lower 32-bits of tmnxBsxHttpRdStatHCOutOfResource.')
tmnxBsxHttpRdStatOutOfResourceHi = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 8, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxHttpRdStatOutOfResourceHi.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxHttpRdStatOutOfResourceHi.setDescription('The value of tmnxBsxHttpRdStatOutOfResourceHi indicates the upper 32-bits of tmnxBsxHttpRdStatHCOutOfResource.')
tmnxBsxHttpRdStatHCNotRedirFType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 8, 4, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxHttpRdStatHCNotRedirFType.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxHttpRdStatHCNotRedirFType.setDescription('The value of tmnxBsxHttpRdStatHCNotRedirFType indicates the number of message redirects that did not occur due to the file type.')
tmnxBsxHttpRdStatNotRedirFTypeLo = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 8, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxHttpRdStatNotRedirFTypeLo.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxHttpRdStatNotRedirFTypeLo.setDescription('The value of tmnxBsxHttpRdStatNotRedirFTypeLo indicates the lower 32-bits of tmnxBsxHttpRdStatHCNotRedirFType.')
tmnxBsxHttpRdStatNotRedirFTypeHi = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 8, 4, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxHttpRdStatNotRedirFTypeHi.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxHttpRdStatNotRedirFTypeHi.setDescription('The value of tmnxBsxHttpRdStatNotRedirFTypeHi indicates the upper 32-bits of tmnxBsxHttpRdStatHCNotRedirFType.')
tmnxBsxHttpRdStatHCNotRedir = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 8, 4, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxHttpRdStatHCNotRedir.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxHttpRdStatHCNotRedir.setDescription('The value of tmnxBsxHttpRdStatHCNotRedir indicates the number of message redirects that did not occur due to errors.')
tmnxBsxHttpRdStatNotRedirLo = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 8, 4, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxHttpRdStatNotRedirLo.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxHttpRdStatNotRedirLo.setDescription('The value of tmnxBsxHttpRdStatNotRedirLo indicates the lower 32-bits of tmnxBsxHttpRdStatHCNotRedir.')
tmnxBsxHttpRdStatNotRedirHi = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 8, 4, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxHttpRdStatNotRedirHi.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxHttpRdStatNotRedirHi.setDescription('The value of tmnxBsxHttpRdStatNotRedirHi indicates the upper 32-bits of tmnxBsxHttpRdStatHCNotRedir.')
tmnxBsxHttpRedirTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 8, 5), )
if mibBuilder.loadTexts: tmnxBsxHttpRedirTable.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxHttpRedirTable.setDescription('The tmnxBsxHttpRedirTable contains an entry for each instance of HTTP Redirect.')
tmnxBsxHttpRedirEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 8, 5, 1), ).setIndexNames((0, "TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGroupIndex"), (1, "TIMETRA-BSX-NG-MIB", "tmnxBsxHttpRedirName"))
if mibBuilder.loadTexts: tmnxBsxHttpRedirEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxHttpRedirEntry.setDescription('Each tmnxBsxHttpRedirEntry contains the configuration information for an instance of HTTP Redirect.')
tmnxBsxHttpRedirName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 8, 5, 1, 1), TNamedItem())
if mibBuilder.loadTexts: tmnxBsxHttpRedirName.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxHttpRedirName.setDescription('The value of tmnxBsxHttpRedirName specifies the name of the HTTP Redirect.')
tmnxBsxHttpRedirRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 8, 5, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxHttpRedirRowStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxHttpRedirRowStatus.setDescription("The value of tmnxBsxHttpRedirRowStatus specifies the row status. It allows entries to be created and deleted in the tmnxBsxHttpRedirTable. Rows are created by specifying the value of 'createAndGo (4)', and deleted by specifying the value of 'destroy (6)'.")
tmnxBsxHttpRedirRowLastCh = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 8, 5, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxHttpRedirRowLastCh.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxHttpRedirRowLastCh.setDescription('The value of tmnxBsxHttpRedirRowLastCh indicates the last time, since system startup, a successful set was performed on this row of the tmnxBsxHttpRedirTable.')
tmnxBsxHttpRedirEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 8, 5, 1, 4), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxHttpRedirEnabled.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxHttpRedirEnabled.setDescription('The value of tmnxBsxHttpRedirEnabled specifies whether this HTTP Redirect is enabled.')
tmnxBsxHttpRedirDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 8, 5, 1, 5), TItemDescription()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxHttpRedirDescription.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxHttpRedirDescription.setDescription('The value of tmnxBsxHttpRedirDescription specifies the description of this HTTP Redirect.')
tmnxBsxHttpRedirTemplateId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 8, 5, 1, 6), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxHttpRedirTemplateId.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxHttpRedirTemplateId.setDescription("The value of tmnxBsxHttpRedirTemplateId specifies the template Id of this HTTP Redirect. Template Ids are defined in the tmnxBsxTListAttribTable in rows where the index tmnxBsxTListName has a value of 'http-redirect-template' and where the index tmnxBsxTListAttribName has a value of 'template'. A tmnxBsxHttpRedirTemplateId of 0 specifies no template Id.")
tmnxBsxHttpRedirHttpHost = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 8, 5, 1, 7), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxHttpRedirHttpHost.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxHttpRedirHttpHost.setDescription('The value of tmnxBsxHttpRedirHttpHost specifies the HTTP host for this HTTP Redirect.')
tmnxBsxHttpPcyRdStatTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 8, 6), )
if mibBuilder.loadTexts: tmnxBsxHttpPcyRdStatTable.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxHttpPcyRdStatTable.setDescription('The tmnxBsxHttpPcyRdStatTable contains statistics for HTTP redirection.')
tmnxBsxHttpPcyRdStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 8, 6, 1), ).setIndexNames((0, "TIMETRA-BSX-NG-MIB", "tmnxBsxAaGrpPartIndex"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxHttpRedirName"), (0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxCardSlotNum"), (0, "TIMETRA-CHASSIS-MIB", "tmnxMDASlotNum"))
if mibBuilder.loadTexts: tmnxBsxHttpPcyRdStatEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxHttpPcyRdStatEntry.setDescription('Each tmnxBsxHttpPcyRdStatEntry contains statistics for HTTP redirection. An index with a valid tmnxBsxAaGrpPartIndex/tmnxBsxHttpRedirName (an existing row in tmnxBsxHttpRedirTable), tmnxChassisIndex set to one, and a zero value for each of tmnxBsxCardSlotNum and tmnxMDASlotNum will return the summarized per group and HTTP redirect name statistics.')
tmnxBsxHttpPcyRdStatDiscontTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 8, 6, 1, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxHttpPcyRdStatDiscontTime.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxHttpPcyRdStatDiscontTime.setDescription('The value of tmnxBsxHttpPcyRdStatDiscontTime indicates the SNMPv2-MIB::sysUpTime (hundredths of a second) when the ISA-AA MDA within the group has last changed status.')
tmnxBsxHttpPcyRdStatHCRedir = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 8, 6, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxHttpPcyRdStatHCRedir.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxHttpPcyRdStatHCRedir.setDescription('The value of tmnxBsxHttpPcyRdStatHCRedir indicates the number of redirected messages.')
tmnxBsxHttpPcyRdStatRedirLo = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 8, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxHttpPcyRdStatRedirLo.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxHttpPcyRdStatRedirLo.setDescription('The value of tmnxBsxHttpPcyRdStatRedirLo indicates the lower 32-bits of tmnxBsxHttpPcyRdStatHCRedir.')
tmnxBsxHttpPcyRdStatRedirHi = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 8, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxHttpPcyRdStatRedirHi.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxHttpPcyRdStatRedirHi.setDescription('The value of tmnxBsxHttpPcyRdStatRedirHi indicates the upper 32-bits of tmnxBsxHttpPcyRdStatHCRedir.')
tmnxBsxHttpPcyRdStatHCOutOfRes = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 8, 6, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxHttpPcyRdStatHCOutOfRes.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxHttpPcyRdStatHCOutOfRes.setDescription('The value of tmnxBsxHttpPcyRdStatHCOutOfRes indicates the number of messages that were not redirected due to lack of resources.')
tmnxBsxHttpPcyRdStatOutOfResLo = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 8, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxHttpPcyRdStatOutOfResLo.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxHttpPcyRdStatOutOfResLo.setDescription('The value of tmnxBsxHttpPcyRdStatOutOfResLo indicates the lower 32-bits of tmnxBsxHttpPcyRdStatHCOutOfRes.')
tmnxBsxHttpPcyRdStatOutOfResHi = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 8, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxHttpPcyRdStatOutOfResHi.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxHttpPcyRdStatOutOfResHi.setDescription('The value of tmnxBsxHttpPcyRdStatOutOfResHi indicates the upper 32-bits of tmnxBsxHttpPcyRdStatHCOutOfRes.')
tmnxBsxHttpPcyRdStatHCNotRedir = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 8, 6, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxHttpPcyRdStatHCNotRedir.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxHttpPcyRdStatHCNotRedir.setDescription('The value of tmnxBsxHttpPcyRdStatHCNotRedir indicates the number of message that were not redirected due to errors.')
tmnxBsxHttpPcyRdStatNotRedirLo = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 8, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxHttpPcyRdStatNotRedirLo.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxHttpPcyRdStatNotRedirLo.setDescription('The value of tmnxBsxHttpPcyRdStatNotRedirLo indicates the lower 32-bits of tmnxBsxHttpPcyRdStatHCNotRedir.')
tmnxBsxHttpPcyRdStatNotRedirHi = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 8, 6, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxHttpPcyRdStatNotRedirHi.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxHttpPcyRdStatNotRedirHi.setDescription('The value of tmnxBsxHttpPcyRdStatNotRedirHi indicates the upper 32-bits of tmnxBsxHttpPcyRdStatHCNotRedir.')
tmnxBsxStaticObjScalars = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 9, 1))
tmnxBsxTListTableLastUpdateT = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 9, 1, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxTListTableLastUpdateT.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxTListTableLastUpdateT.setDescription('The value of tmnxBsxTListTableLastUpdateT indicates the last time, since system startup, a successful update was performed on the tmnxBsxTListTable.')
tmnxBsxTListAttribTableLUpdateT = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 9, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxTListAttribTableLUpdateT.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxTListAttribTableLUpdateT.setDescription('The value of tmnxBsxTListAttribTableLUpdateT indicates the last time, since system startup, a successful update was performed on the tmnxBsxTListAttribTable.')
tmnxBsxTListTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 9, 2), )
if mibBuilder.loadTexts: tmnxBsxTListTable.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxTListTable.setDescription('The tmnxBsxTListTable contains an entry for each tagged list stored in the ISA AA image file.')
tmnxBsxTListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 9, 2, 1), ).setIndexNames((0, "TIMETRA-BSX-NG-MIB", "tmnxBsxTListName"))
if mibBuilder.loadTexts: tmnxBsxTListEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxTListEntry.setDescription('Each tmnxBsxTListEntry contains the definition of a BSX tagged list.')
tmnxBsxTListName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 9, 2, 1, 1), TNamedItem())
if mibBuilder.loadTexts: tmnxBsxTListName.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxTListName.setDescription('The value of tmnxBsxTListName specifies the name of the tagged list.')
tmnxBsxTListRowLastUpdateT = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 9, 2, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxTListRowLastUpdateT.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxTListRowLastUpdateT.setDescription('The value of tmnxBsxTListRowLastUpdateT indicates the last time, since system startup, a successful update was performed on this row of tmnxBsxTListTable.')
tmnxBsxTListDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 9, 2, 1, 3), TItemDescription()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxTListDescription.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxTListDescription.setDescription('The value of tmnxBsxTListDescription indicates a description of the tagged list.')
tmnxBsxTListAttribTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 9, 3), )
if mibBuilder.loadTexts: tmnxBsxTListAttribTable.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxTListAttribTable.setDescription('The tmnxBsxTListAttribTable contains an entry for each attribute associated with an item of a tagged list.')
tmnxBsxTListAttribEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 9, 3, 1), ).setIndexNames((0, "TIMETRA-BSX-NG-MIB", "tmnxBsxTListName"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxTListAttribName"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxTListAttribSet"))
if mibBuilder.loadTexts: tmnxBsxTListAttribEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxTListAttribEntry.setDescription('Each tmnxBsxTListAttribEntry contains the description of an attribute associated with an item of a tagged list.')
tmnxBsxTListAttribName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 9, 3, 1, 1), TNamedItem())
if mibBuilder.loadTexts: tmnxBsxTListAttribName.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxTListAttribName.setDescription('The value of tmnxBsxTListAttribName specifies the name of the attribute of an item in the tagged list.')
tmnxBsxTListAttribSet = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 9, 3, 1, 2), Unsigned32())
if mibBuilder.loadTexts: tmnxBsxTListAttribSet.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxTListAttribSet.setDescription("The value of tmnxBsxTListAttribSet specifies an attribute set. All attributes using the same tmnxBsxTListName and tmnxBsxTListAttribSet reference one item of a tagged list. For example, a tmnxBsxTListAttribSet=1 can have 2 attributes tmnxBsxTListAttribName = 'code' and tmnxBsxTListAttribName = 'description'. Both of these are attributes belonging to a single item.")
tmnxBsxTListAttribRowLastUpdateT = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 9, 3, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxTListAttribRowLastUpdateT.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxTListAttribRowLastUpdateT.setDescription('The value of tmnxBsxTListAttribRowLastUpdateT indicates the last time, since system startup, a successful update was performed on this row of tmnxBsxTListAttribTable.')
tmnxBsxTListAttribType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 9, 3, 1, 4), TmnxBsxTListAttribType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxTListAttribType.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxTListAttribType.setDescription('The value of tmnxBsxTListAttribType indicates how the attribute value tmnxBsxTListAttribValue is encoded.')
tmnxBsxTListAttribValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 9, 3, 1, 5), TmnxBsxTListAttribValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxTListAttribValue.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxTListAttribValue.setDescription('The value of tmnxBsxTListAttribValue indicates the value of the attribute of an item in the tagged list.')
tmnxBsxRedundancyObjScalars = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 10, 1))
tmnxBsxAarpTableLastChTime = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 10, 1, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxAarpTableLastChTime.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAarpTableLastChTime.setDescription('The value of tmnxBsxAarpTableLastChTime indicates the last time, since system startup, a successful set was performed on the tmnxBsxAarpInstTable.')
tmnxBsxAarpInstTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 10, 2), )
if mibBuilder.loadTexts: tmnxBsxAarpInstTable.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAarpInstTable.setDescription('The tmnxBsxAarpInstTable contains an entry for each Application Assurance Redundancy Protocol (AARP) instance configured on this system.')
tmnxBsxAarpInstEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 10, 2, 1), ).setIndexNames((0, "TIMETRA-BSX-NG-MIB", "tmnxBsxAarpInstId"))
if mibBuilder.loadTexts: tmnxBsxAarpInstEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAarpInstEntry.setDescription('Each tmnxBsxAarpInstEntry represents a particular AARP instance.')
tmnxBsxAarpInstId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 10, 2, 1, 1), TmnxBsxAarpId())
if mibBuilder.loadTexts: tmnxBsxAarpInstId.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAarpInstId.setDescription('The value of tmnxBsxAarpInstId specifies the unique Id of this AARP instance.')
tmnxBsxAarpInstRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 10, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxAarpInstRowStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAarpInstRowStatus.setDescription("The value of tmnxBsxAarpInstRowStatus specifies the row status. It allows entries to be created and deleted in the tmnxBsxAarpInstTable. Rows are created by specifying the value of 'createAndGo (4)', and deleted by specifying the value of 'destroy (6)'.")
tmnxBsxAarpInstLastCh = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 10, 2, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxAarpInstLastCh.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAarpInstLastCh.setDescription('The value of tmnxBsxAarpInstLastCh indicates the last time, since system startup, a successful set was performed on this row of the tmnxBsxAarpInstTable.')
tmnxBsxAarpInstDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 10, 2, 1, 4), TItemDescription()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxAarpInstDescription.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAarpInstDescription.setDescription('The value of tmnxBsxAarpInstDescription specifies the description of this AARP instance.')
tmnxBsxAarpInstPeerIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 10, 2, 1, 5), InetAddressType().clone('unknown')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxAarpInstPeerIpType.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAarpInstPeerIpType.setDescription('The value of tmnxBsxAarpInstPeerIpType specifies the type of the address in tmnxBsxAarpInstPeerIpAddr.')
tmnxBsxAarpInstPeerIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 10, 2, 1, 6), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )).clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxAarpInstPeerIpAddr.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAarpInstPeerIpAddr.setDescription('The value of tmnxBsxAarpInstPeerIpAddr specifies the address of the AA Redundancy Protocol instance peer.')
tmnxBsxAarpInstPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 10, 2, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(100)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxAarpInstPriority.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAarpInstPriority.setDescription("The value of tmnxBsxAarpInstPriority specifies the priority of this AARP instance advertised to the AARP peer. It is compared to the peer's priority, and the AARP instance with the higher priority enters the master state and the one with the lower priority enters the backup state. If the priorities are identical, the instance peer IP addresses are used as a tie-breaker with the peer with the higher address entering the master state and the other the backup.")
tmnxBsxAarpInstAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 10, 2, 1, 8), TmnxAdminState().clone('outOfService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxAarpInstAdminState.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAarpInstAdminState.setDescription("The value of tmnxBsxAarpInstAdminState specifies the administrative state of the AARP instance. When the value is 'outOfService(3)' the AARP instance is disabled.")
tmnxBsxAarpInstOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 10, 2, 1, 9), TmnxOperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxAarpInstOperState.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAarpInstOperState.setDescription("The value of tmnxBsxAarpInstOperState indicates the operational state of the AARP instance. When the value is 'outOfService(3)' the AARP instance is not performing asymmetry removal.")
tmnxBsxAarpInstState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 10, 2, 1, 10), TmnxBsxAarpInstState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxAarpInstState.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAarpInstState.setDescription('The value of tmnxBsxAarpInstState indicates the state of the AARP instance.')
tmnxBsxAarpInstOperFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 10, 2, 1, 11), TmnxBsxAarpInstOperFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxAarpInstOperFlags.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAarpInstOperFlags.setDescription('The value of tmnxBsxAarpInstOperFlags indicates the different conditions that affect the operating status of the AARP instance.')
tmnxBsxAarpInstPeerPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 10, 2, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxAarpInstPeerPriority.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAarpInstPeerPriority.setDescription('The value of tmnxBsxAarpInstPeerPriority indicates the priority advertised by the AARP instance peer.')
tmnxBsxAarpInstPeerState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 10, 2, 1, 13), TmnxBsxAarpInstState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxAarpInstPeerState.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAarpInstPeerState.setDescription('The value of tmnxBsxAarpInstPeerState indicates the state advertised by the AARP instance peer.')
tmnxBsxAarpInstPeerOperFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 10, 2, 1, 14), TmnxBsxAarpInstOperFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxAarpInstPeerOperFlags.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAarpInstPeerOperFlags.setDescription('The value of tmnxBsxAarpInstPeerOperFlags indicates the different conditions that affect the operating status of the peer of this AARP instance.')
tmnxBsxAarpInstPeerSubRefType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 10, 2, 1, 15), TmnxBsxAaSubscriberType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxAarpInstPeerSubRefType.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAarpInstPeerSubRefType.setDescription("The value of tmnxBsxAarpInstPeerSubRefType indicates the type of the subscriber which the peer of this AARP instance references with a service type of 'dualHomed(1)'. The valid values are 'unknown(0)' indicating the lack of a service reference with type 'dualHomed(1)', 'sap(2)', and 'spokeSdp(3)'.")
tmnxBsxAarpInstPeerEPSapPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 10, 2, 1, 16), TmnxPortID().clone(503316480)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxAarpInstPeerEPSapPortId.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAarpInstPeerEPSapPortId.setDescription('The value of tmnxBsxAarpInstPeerEPSapPortId along with tmnxBsxAarpInstPeerEPSapEncap and tmnxBsxAarpInstPeerEPSapEncType specifies the Service Access Point (SAP) end point for the dual homed peer. The specification of a tmnxBsxAarpInstPeerEPSapPortId is mutually exclusive with the specification of tmnxBsxAarpInstPeerEPSdpBindId. The default value of 0x1e000000 indicates that this is an invalid port id.')
tmnxBsxAarpInstPeerEPSapEncap = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 10, 2, 1, 17), TmnxEncapVal()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxAarpInstPeerEPSapEncap.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAarpInstPeerEPSapEncap.setDescription('The value of tmnxBsxAarpInstPeerEPSapEncap along with tmnxBsxAarpInstPeerEPSapPortId and tmnxBsxAarpInstPeerEPSapEncType specifies the Service Access Point (SAP) end point for the dual homed peer. The specification of a tmnxBsxAarpInstPeerEPSapEncap is mutually exclusive with the specification of tmnxBsxAarpInstPeerEPSdpBindId.')
tmnxBsxAarpInstPeerEPSapEncType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 10, 2, 1, 18), TmnxPortEncapType().clone('unknown')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxAarpInstPeerEPSapEncType.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAarpInstPeerEPSapEncType.setDescription('The value of tmnxBsxAarpInstPeerEPSapEncType along with tmnxBsxAarpInstPeerEPSapPortId and tmnxBsxAarpInstPeerEPSapEncap specifies the Service Access Point (SAP) end point for the dual homed peer. The specification of a tmnxBsxAarpInstPeerEPSapEncType is mutually exclusive with the specification of tmnxBsxAarpInstPeerEPSdpBindId.')
tmnxBsxAarpInstPeerEPSdpBindId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 10, 2, 1, 19), SdpBindId().clone(hexValue="0")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxAarpInstPeerEPSdpBindId.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAarpInstPeerEPSdpBindId.setDescription('The value of tmnxBsxAarpInstPeerEPSdpBindId specifies the Spoke SDP end point for the dual homed peer. The specification of a tmnxBsxAarpInstPeerEPSdpBindId is mutually exclusive with the specification of tmnxBsxAarpInstPeerEPSapPortId, tmnxBsxAarpInstPeerEPSapEncap and tmnxBsxAarpInstPeerEPSapEncType.')
tmnxBsxAarpCommandTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 10, 3), )
if mibBuilder.loadTexts: tmnxBsxAarpCommandTable.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAarpCommandTable.setDescription('The tmnxBsxAarpCommandTable table allows commands to be performed on an AARP instance.')
tmnxBsxAarpCommandEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 10, 3, 1), )
tmnxBsxAarpInstEntry.registerAugmentions(("TIMETRA-BSX-NG-MIB", "tmnxBsxAarpCommandEntry"))
tmnxBsxAarpCommandEntry.setIndexNames(*tmnxBsxAarpInstEntry.getIndexNames())
if mibBuilder.loadTexts: tmnxBsxAarpCommandEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAarpCommandEntry.setDescription('Each tmnxBsxAarpCommandEntry allows commands to be performed on the corresponding AARP instance. The row exists only if the associated AARP instance identified by tmnxBsxAarpInstId exists in the tmnxBsxAarpInstTable. ')
tmnxBsxAarpCommandControl = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 10, 3, 1, 1), TmnxBsxAarpCommand().clone('noCmd')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxAarpCommandControl.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAarpCommandControl.setDescription("tmnxBsxAarpCommandControl allows the initiation of commands against an AARP instance. When read, this object returns the last command written to the object or 'noCmd(0)' if no command has been written to the object since initialization. The last command written may have already completed. When a valid command is written to tmnxBsxAarpCommandControl, the AARP instance performs the command.")
tmnxBsxAarpServPointTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 10, 4), )
if mibBuilder.loadTexts: tmnxBsxAarpServPointTable.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAarpServPointTable.setDescription('The tmnxBsxAarpServPointTable contains an entry for each service point associated with an AARP instance.')
tmnxBsxAarpServPointEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 10, 4, 1), ).setIndexNames((0, "TIMETRA-BSX-NG-MIB", "tmnxBsxAarpInstId"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxAarpServPointRole"))
if mibBuilder.loadTexts: tmnxBsxAarpServPointEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAarpServPointEntry.setDescription('Each tmnxBsxAarpServPointEntry represents a particular service point association with an AARP instance.')
tmnxBsxAarpServPointRole = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 10, 4, 1, 1), TmnxBsxAarpServPointRole())
if mibBuilder.loadTexts: tmnxBsxAarpServPointRole.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAarpServPointRole.setDescription('The value of tmnxBsxAarpServPointRole specifies the role of the AARP instance service point.')
tmnxBsxAarpServPointType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 10, 4, 1, 2), TmnxBsxAarpServPointType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxAarpServPointType.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAarpServPointType.setDescription('The value of tmnxBsxAarpServPointType indicates the type of the AARP instance service point.')
tmnxBsxAarpServPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 10, 4, 1, 3), TmnxBsxAarpServPoint()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxAarpServPoint.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxAarpServPoint.setDescription('The value of tmnxBsxAarpServPoint indicates the AARP instance service point.')
tmnxBsxHttpEnrichScalars = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 11, 1))
tmnxBsxHttpEnrichLastChTime = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 11, 1, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxHttpEnrichLastChTime.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxHttpEnrichLastChTime.setDescription('The value of tmnxBsxHttpEnrichLastChTime indicates the last time a successful set was performed on the tmnxBsxHttpEnrichTable.')
tmnxBsxHttpEnrichFieldLastChTime = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 11, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxHttpEnrichFieldLastChTime.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxHttpEnrichFieldLastChTime.setDescription('The value of tmnxBsxHttpEnrichFieldLastChTime indicates the last time a successful set was performed on the tmnxBsxHttpEnrichFieldTable.')
tmnxBsxHttpEnrichTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 11, 2), )
if mibBuilder.loadTexts: tmnxBsxHttpEnrichTable.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxHttpEnrichTable.setDescription('The tmnxBsxHttpEnrichTable contains an entry for each HTTP header enrichment template configured on this system.')
tmnxBsxHttpEnrichEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 11, 2, 1), ).setIndexNames((0, "TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGroupIndex"), (1, "TIMETRA-BSX-NG-MIB", "tmnxBsxHttpEnrichName"))
if mibBuilder.loadTexts: tmnxBsxHttpEnrichEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxHttpEnrichEntry.setDescription('Each tmnxBsxHttpEnrichEntry contains the definition of a HTTP header enrichment template.')
tmnxBsxHttpEnrichName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 11, 2, 1, 1), TNamedItem())
if mibBuilder.loadTexts: tmnxBsxHttpEnrichName.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxHttpEnrichName.setDescription('The value of tmnxBsxHttpEnrichName specifies the name of the HTTP header enrichment template.')
tmnxBsxHttpEnrichRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 11, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxHttpEnrichRowStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxHttpEnrichRowStatus.setDescription("The value of tmnxBsxHttpEnrichRowStatus specifies the row status. It allows entries to be created and deleted in the tmnxBsxHttpEnrichTable. Rows are created by specifying the value of 'createAndGo (4)', and deleted by specifying the value of 'destroy (6)'.")
tmnxBsxHttpEnrichRowLastCh = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 11, 2, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxHttpEnrichRowLastCh.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxHttpEnrichRowLastCh.setDescription('The value of tmnxBsxHttpEnrichRowLastCh indicates the last time, since system startup, a successful set was performed on this row of the tmnxBsxHttpEnrichTable.')
tmnxBsxHttpEnrichEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 11, 2, 1, 4), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxHttpEnrichEnabled.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxHttpEnrichEnabled.setDescription('The value of tmnxBsxHttpEnrichEnabled specifies whether this HTTP header enrichment template is enabled.')
tmnxBsxHttpEnrichDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 11, 2, 1, 5), TItemDescription()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxHttpEnrichDescription.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxHttpEnrichDescription.setDescription('The value of tmnxBsxHttpEnrichDescription specifies the description of this HTTP header enrichment template.')
tmnxBsxHttpEnrichFieldTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 11, 3), )
if mibBuilder.loadTexts: tmnxBsxHttpEnrichFieldTable.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxHttpEnrichFieldTable.setDescription('The tmnxBsxHttpEnrichFieldTable contains an entry for each header field configured in the HTTP header enrichment template.')
tmnxBsxHttpEnrichFieldEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 11, 3, 1), ).setIndexNames((0, "TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGroupIndex"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxHttpEnrichName"), (1, "TIMETRA-BSX-NG-MIB", "tmnxBsxHttpEnrichFieldName"))
if mibBuilder.loadTexts: tmnxBsxHttpEnrichFieldEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxHttpEnrichFieldEntry.setDescription('Each tmnxBsxHttpEnrichEntry contains the definition of a header field configured in the HTTP header enrichment template.')
tmnxBsxHttpEnrichFieldName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 11, 3, 1, 1), TNamedItem())
if mibBuilder.loadTexts: tmnxBsxHttpEnrichFieldName.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxHttpEnrichFieldName.setDescription("The value of tmnxBsxHttpEnrichFieldName specifies the header field configured in the HTTP header enrichment template. The supported HTTP header enrichment field names are defined in the tmnxBsxTListAttribTable in rows where the index tmnxBsxTListName has a value of 'http-header-field' and the index tmnxBsxTListAttribName has a value of 'name'.")
tmnxBsxHttpEnrichFieldRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 11, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxHttpEnrichFieldRowStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxHttpEnrichFieldRowStatus.setDescription("The value of tmnxBsxHttpEnrichFieldRowStatus specifies the row status. It allows entries to be created and deleted in the tmnxBsxHttpEnrichFieldTable. Rows are created by specifying the value of 'createAndGo (4)', and deleted by specifying the value of 'destroy (6)'.")
tmnxBsxHttpEnrichFieldRowLastCh = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 11, 3, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxHttpEnrichFieldRowLastCh.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxHttpEnrichFieldRowLastCh.setDescription('The value of tmnxBsxHttpEnrichFieldRowLastCh indicates the last time, since system startup, a successful set was performed on this row of the tmnxBsxHttpEnrichFieldTable.')
tmnxBsxHttpEnrichFieldHeaderName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 11, 3, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxHttpEnrichFieldHeaderName.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxHttpEnrichFieldHeaderName.setDescription('The value of tmnxBsxHttpEnrichFieldHeaderName specifies the name of the HTTP header field inserted by the HTTP header enrichment template.')
tmnxBsxHttpEnrichStatTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 11, 4), )
if mibBuilder.loadTexts: tmnxBsxHttpEnrichStatTable.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxHttpEnrichStatTable.setDescription('The tmnxBsxHttpEnrichStatTable contains statistics for HTTP enrichment. Each row contains the performance-oriented statistics information per group and HTTP enrichment template for an ISA-AA uniquely identified by the tmnxChassisIndex, tmnxCardSlotNum, and the tmnxMDASlotNum.')
tmnxBsxHttpEnrichStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 11, 4, 1), ).setIndexNames((0, "TIMETRA-BSX-NG-MIB", "tmnxBsxAaGrpPartIndex"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxHttpEnrichName"), (0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxCardSlotNum"), (0, "TIMETRA-CHASSIS-MIB", "tmnxMDASlotNum"))
if mibBuilder.loadTexts: tmnxBsxHttpEnrichStatEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxHttpEnrichStatEntry.setDescription('Each tmnxBsxHttpEnrichStatEntry contains statistics for HTTP enrichment. An index with a valid tmnxBsxAaGrpPartIndex/tmnxBsxHttpEnrichName (an existing row in tmnxBsxHttpEnrichTable), tmnxChassisIndex set to one, and a zero value for each of tmnxBsxCardSlotNum and tmnxMDASlotNum will return the summarized per group and HTTP enrichment template statistics. Entries will appears in this table only for equipped ISA-AA MDAs associated with an AA group and an HTTP enrichment template.')
tmnxBsxHttpEnrichStatDiscontTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 11, 4, 1, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxHttpEnrichStatDiscontTime.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxHttpEnrichStatDiscontTime.setDescription('The value of tmnxBsxHttpEnrichStatDiscontTime indicates the SNMPv2-MIB::sysUpTime (hundredths of a second) when the ISA-AA MDA within the group has last changed status.')
tmnxBsxHttpEnrichHCNumEnriched = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 11, 4, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxHttpEnrichHCNumEnriched.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxHttpEnrichHCNumEnriched.setDescription('The value of tmnxBsxHttpEnrichHCNumEnriched indicates the number of enriched requests.')
tmnxBsxHttpEnrichNumEnrichedLo = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 11, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxHttpEnrichNumEnrichedLo.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxHttpEnrichNumEnrichedLo.setDescription('The value of tmnxBsxHttpEnrichNumEnrichedLo indicates the lower 32-bits of tmnxBsxHttpEnrichHCNumEnriched.')
tmnxBsxHttpEnrichNumEnrichedHi = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 11, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxHttpEnrichNumEnrichedHi.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxHttpEnrichNumEnrichedHi.setDescription('The value of tmnxBsxHttpEnrichNumEnrichedHi indicates the upper 32-bits of tmnxBsxHttpEnrichHCNumEnriched.')
tmnxBsxHttpEnrichHCNumNoResource = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 11, 4, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxHttpEnrichHCNumNoResource.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxHttpEnrichHCNumNoResource.setDescription('The value of tmnxBsxHttpEnrichHCNumNoResource indicates the number of HTTP requests not enriched due to resource issues.')
tmnxBsxHttpEnrichNumNoResourceLo = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 11, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxHttpEnrichNumNoResourceLo.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxHttpEnrichNumNoResourceLo.setDescription('The value of tmnxBsxHttpEnrichNumNoResourceLo indicates the lower 32-bits of tmnxBsxHttpEnrichHCNumNoResource.')
tmnxBsxHttpEnrichNumNoResourceHi = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 11, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxHttpEnrichNumNoResourceHi.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxHttpEnrichNumNoResourceHi.setDescription('The value of tmnxBsxHttpEnrichNumNoResourceHi indicates the upper 32-bits of tmnxBsxHttpEnrichHCNumNoResource.')
tmnxBsxHttpEnrichHCMissngSubData = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 11, 4, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxHttpEnrichHCMissngSubData.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxHttpEnrichHCMissngSubData.setDescription('The value of tmnxBsxHttpEnrichHCMissngSubData indicates the number of HTTP requests not enriched due to missing subscriber data.')
tmnxBsxHttpEnrichMissngSubDataLo = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 11, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxHttpEnrichMissngSubDataLo.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxHttpEnrichMissngSubDataLo.setDescription('The value of tmnxBsxHttpEnrichMissngSubDataLo indicates the lower 32-bits of tmnxBsxHttpEnrichHCMissngSubData.')
tmnxBsxHttpEnrichMissngSubDataHi = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 11, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxHttpEnrichMissngSubDataHi.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxHttpEnrichMissngSubDataHi.setDescription('The value of tmnxBsxHttpEnrichMissngSubDataHi indicates the upper 32-bits of tmnxBsxHttpEnrichHCMissngSubData.')
tmnxBsxHttpEnrichHCTplNotEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 11, 4, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxHttpEnrichHCTplNotEnabled.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxHttpEnrichHCTplNotEnabled.setDescription('The value of tmnxBsxHttpEnrichHCTplNotEnabled indicates the number of HTTP requests not enriched due to the template not being enabled.')
tmnxBsxHttpEnrichTplNotEnabledLo = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 11, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxHttpEnrichTplNotEnabledLo.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxHttpEnrichTplNotEnabledLo.setDescription('The value of tmnxBsxHttpEnrichTplNotEnabledLo indicates the lower 32-bits of tmnxBsxHttpEnrichHCTplNotEnabled.')
tmnxBsxHttpEnrichTplNotEnabledHi = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 11, 4, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxHttpEnrichTplNotEnabledHi.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxHttpEnrichTplNotEnabledHi.setDescription('The value of tmnxBsxHttpEnrichTplNotEnabledHi indicates the upper 32-bits of tmnxBsxHttpEnrichHCTplNotEnabled.')
tmnxBsxHttpEnrichHCTrafficChar = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 11, 4, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxHttpEnrichHCTrafficChar.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxHttpEnrichHCTrafficChar.setDescription('The value of tmnxBsxHttpEnrichHCTrafficChar indicates the number of HTTP requests not enriched due to traffic characteristics.')
tmnxBsxHttpEnrichTrafficCharLo = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 11, 4, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxHttpEnrichTrafficCharLo.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxHttpEnrichTrafficCharLo.setDescription('The value of tmnxBsxHttpEnrichTrafficCharLo indicates the lower 32-bits of tmnxBsxHttpEnrichHCTrafficChar.')
tmnxBsxHttpEnrichTrafficCharHi = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 11, 4, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxHttpEnrichTrafficCharHi.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxHttpEnrichTrafficCharHi.setDescription('The value of tmnxBsxHttpEnrichTrafficCharHi indicates the upper 32-bits of tmnxBsxHttpEnrichHCTrafficChar.')
tmnxBsxRadApScalars = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 12, 1))
tmnxBsxRadApLastChTime = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 12, 1, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxRadApLastChTime.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxRadApLastChTime.setDescription('The value of tmnxBsxRadApLastChTime indicates the last time, since system startup, a successful set was performed on tmnxBsxRadApTable.')
tmnxBsxRadApTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 12, 2), )
if mibBuilder.loadTexts: tmnxBsxRadApTable.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxRadApTable.setDescription('The tmnxBsxRadApTable allows configuration of RADIUS based AA accounting policies.')
tmnxBsxRadApEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 12, 2, 1), ).setIndexNames((0, "TIMETRA-BSX-NG-MIB", "tmnxBsxRadApName"))
if mibBuilder.loadTexts: tmnxBsxRadApEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxRadApEntry.setDescription('Each entry represents the configuration for an AA RADIUS accounting policy. Entries in this table can be created and deleted via SNMP set operations to tmnxBsxRadApRowStatus. To delete an entry, all references to the policy must be deleted.')
tmnxBsxRadApName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 12, 2, 1, 1), TNamedItem())
if mibBuilder.loadTexts: tmnxBsxRadApName.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxRadApName.setDescription('The value of tmnxBsxRadApName specifies the name of an AA RADIUS accounting policy.')
tmnxBsxRadApRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 12, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxRadApRowStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxRadApRowStatus.setDescription("The value of tmnxBsxRadApRowStatus specifies the row status. It allows entries to be created and deleted in tmnxBsxRadApTable. Rows are created by specifying the value of 'createAndGo (4)', and deleted by specifying the value of 'destroy (6)'.")
tmnxBsxRadApRowLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 12, 2, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxRadApRowLastChange.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxRadApRowLastChange.setDescription('The value of tmnxBsxRadApRowLastChange indicates the last time, since system startup, a successful set was performed on this row.')
tmnxBsxRadApDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 12, 2, 1, 4), TItemDescription()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxRadApDescription.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxRadApDescription.setDescription('The value of tmnxBsxRadApDescription specifies the user provided description of this policy.')
tmnxBsxRadApServerRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 12, 2, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxRadApServerRetry.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxRadApServerRetry.setDescription('The value of tmnxBsxRadApServerRetry specifies the maximum number of RADIUS request retries toward the same RADIUS server.')
tmnxBsxRadApServerTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 12, 2, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 90)).clone(5)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxRadApServerTimeout.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxRadApServerTimeout.setDescription('The value of tmnxBsxRadApServerTimeout specifies the timeout between retries toward the same RADIUS server.')
tmnxBsxRadApServerVRtrID = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 12, 2, 1, 7), TmnxVRtrIDOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxRadApServerVRtrID.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxRadApServerVRtrID.setDescription("The value of tmnxBsxRadApServerVRtrID specifies the virtual router instance applicable for the set of configured RADIUS servers in tmnxBsxRadApServTable. The value of this object cannot be changed once a RADIUS server is configured for this policy. When the value is '0', both base and management router instances are available.")
tmnxBsxRadApServerSrcAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 12, 2, 1, 8), InetAddressType().clone('unknown')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxRadApServerSrcAddrType.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxRadApServerSrcAddrType.setDescription('The value of tmnxBsxRadApServerSrcAddrType specifies the type of address stored in tmnxBsxRadApServerSrcAddr.')
tmnxBsxRadApServerSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 12, 2, 1, 9), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )).clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxRadApServerSrcAddr.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxRadApServerSrcAddr.setDescription('The value of tmnxBsxRadApServerSrcAddr specifies the source address of a RADIUS packet for AA accounting. It must be a valid unicast address; otherwise, a wrongValue error is returned. If this object is configured with the address of a router interface, TIMETRA-VRTR-MIB::vRiaIpAddress, the RADIUS client uses it in making a request to the RADIUS server. If the address is not configured or is not the address of one of the interfaces, the source address is based on the address of the RADIUS server. If the server address is in-band, the client uses the system IP address. If the server address is out-of-band, the source address is the address of the management interface found in TIMETRA-VRTR-MIB::vRiaIpAddress.')
tmnxBsxRadApServerAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 12, 2, 1, 10), TmnxSubRadServAlgorithm().clone('direct')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxRadApServerAlgorithm.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxRadApServerAlgorithm.setDescription('The value of tmnxBsxRadApServerAlgorithm specifies the algorithm used to select a RADIUS server from the list of configured servers in tmnxBsxRadApServTable.')
tmnxBsxRadApIntrmUpdateInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 12, 2, 1, 11), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(5, 1080), ))).setUnits('minutes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxRadApIntrmUpdateInterval.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxRadApIntrmUpdateInterval.setDescription("The value of tmnxBsxRadApIntrmUpdateInterval specifies the interval at which subscriber accounting data will be updated. If set to '0', no interim updates will be sent.")
tmnxBsxRadApSignfcntChangeDelta = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 12, 2, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxRadApSignfcntChangeDelta.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxRadApSignfcntChangeDelta.setDescription("The value of tmnxBsxRadApSignfcntChangeDelta specifies the delta, or significant change in any charging group counter, that is required for a RADIUS accounting request to be sent to the RADIUS server for a particular subscriber. The only supported significant change is value '1', which represents any change. If value '0' is specified, a request is sent even if there is no change.")
tmnxBsxRadApServLastChTime = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 12, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxRadApServLastChTime.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxRadApServLastChTime.setDescription('The value of tmnxBsxRadApServLastChTime indicates the last time, since system startup, a successful set was performed on tmnxBsxRadApServTable.')
tmnxBsxRadApServTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 12, 3), )
if mibBuilder.loadTexts: tmnxBsxRadApServTable.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxRadApServTable.setDescription('The tmnxBsxRadApServTable allows the configuration of objects related to a particular RADIUS server associated with a particular AA RADIUS accounting policy.')
tmnxBsxRadApServEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 12, 3, 1), ).setIndexNames((0, "TIMETRA-BSX-NG-MIB", "tmnxBsxRadApName"), (0, "TIMETRA-BSX-NG-MIB", "tmnxBsxRadApServIndex"))
if mibBuilder.loadTexts: tmnxBsxRadApServEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxRadApServEntry.setDescription('Each entry represents the configuration for a particular AA RADIUS accounting policy and server. Entries in this table can be created and deleted via SNMP set operations to tmnxBsxRadApServRowStatus.')
tmnxBsxRadApServIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 12, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: tmnxBsxRadApServIndex.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxRadApServIndex.setDescription('The value of tmnxBsxRadApServIndex specifies the RADIUS server associated with an AA RADIUS accounting policy.')
tmnxBsxRadApServRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 12, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxRadApServRowStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxRadApServRowStatus.setDescription("The value of tmnxBsxRadApServRowStatus specifies the row status. It allows entries to be created and deleted in tmnxBsxRadApServTable. Rows are created by specifying the value of 'createAndGo (4)', and deleted by specifying the value of 'destroy (6)'.")
tmnxBsxRadApServRowLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 12, 3, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxRadApServRowLastChange.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxRadApServRowLastChange.setDescription('The value of tmnxBsxRadApServRowLastChange indicates the last time, since system startup, a successful set was performed on this row.')
tmnxBsxRadApServAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 12, 3, 1, 4), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxRadApServAddrType.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxRadApServAddrType.setDescription('The value of tmnxBsxRadApServAddrType specifies the type of address stored in tmnxBsxRadApServAddr.')
tmnxBsxRadApServAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 12, 3, 1, 5), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxRadApServAddr.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxRadApServAddr.setDescription('The value of tmnxBsxRadApServAddr specifies the IP address of the RADIUS server. A valid unicast IP address must be specified at row creation time.')
tmnxBsxRadApServSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 12, 3, 1, 6), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(1, 20), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxRadApServSecret.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxRadApServSecret.setDescription('The value of tmnxBsxRadApServSecret specifies the secret key associated with the RADIUS server. A non-empty value must be specified at row creation time. An SNMP get request on this object always returns an empty string.')
tmnxBsxRadApServAcctPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 12, 3, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1813)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBsxRadApServAcctPort.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxRadApServAcctPort.setDescription('The value of tmnxBsxRadApServAcctPort specifies the UDP port number on which to contact the RADIUS server for accounting.')
tmnxBsxRadApServOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 12, 3, 1, 8), TmnxOperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxRadApServOperState.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxRadApServOperState.setDescription('The value of tmnxBsxRadApServOperState indicates the operational state of the RADIUS server.')
tmnxBsxRadApStatTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 12, 4), )
if mibBuilder.loadTexts: tmnxBsxRadApStatTable.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxRadApStatTable.setDescription('The tmnxBsxRadApStatTable presents statistics of AA RADIUS accounting policies.')
tmnxBsxRadApStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 12, 4, 1), )
tmnxBsxRadApEntry.registerAugmentions(("TIMETRA-BSX-NG-MIB", "tmnxBsxRadApStatEntry"))
tmnxBsxRadApStatEntry.setIndexNames(*tmnxBsxRadApEntry.getIndexNames())
if mibBuilder.loadTexts: tmnxBsxRadApStatEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxRadApStatEntry.setDescription('Each row entry represents a collection of statistics for an AA RADIUS accounting policy. Rows in this table are created automatically by the system.')
tmnxBsxRadApTxRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 12, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxRadApTxRequests.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxRadApTxRequests.setDescription('The value of tmnxBsxRadApTxRequests indicates the number of RADIUS accounting requests transmitted for this policy.')
tmnxBsxRadApRxResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 12, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxRadApRxResponses.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxRadApRxResponses.setDescription('The value of tmnxBsxRadApRxResponses indicates the number of RADIUS accounting responses received for this policy.')
tmnxBsxRadApReqTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 12, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxRadApReqTimeouts.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxRadApReqTimeouts.setDescription('The value of tmnxBsxRadApReqTimeouts indicates the number of RADIUS accounting requests which have timed out for this policy.')
tmnxBsxRadApSendRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 12, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxRadApSendRetries.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxRadApSendRetries.setDescription('The value of tmnxBsxRadApSendRetries indicates the number of retries to a different server for a single RADIUS accounting request for this policy.')
tmnxBsxRadApSendFail = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 12, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxRadApSendFail.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxRadApSendFail.setDescription('The value of tmnxBsxRadApSendFail indicates how many RADIUS accounting requests failed because the packet could not be sent.')
tmnxBsxRadApServStatTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 12, 5), )
if mibBuilder.loadTexts: tmnxBsxRadApServStatTable.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxRadApServStatTable.setDescription('The tmnxBsxRadApServStatTable presents statistics of AA RADIUS accounting policy servers.')
tmnxBsxRadApServStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 12, 5, 1), )
tmnxBsxRadApServEntry.registerAugmentions(("TIMETRA-BSX-NG-MIB", "tmnxBsxRadApServStatEntry"))
tmnxBsxRadApServStatEntry.setIndexNames(*tmnxBsxRadApServEntry.getIndexNames())
if mibBuilder.loadTexts: tmnxBsxRadApServStatEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxRadApServStatEntry.setDescription('Each row represents statistics about a specific server for a specific AA RADIUS accounting policy. Rows in this table are created automatically by the system.')
tmnxBsxRadApServTxRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 12, 5, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxRadApServTxRequests.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxRadApServTxRequests.setDescription('The value of tmnxBsxRadApServTxRequests indicates the number of RADIUS accounting requests transmitted for this server.')
tmnxBsxRadApServRxResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 12, 5, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxRadApServRxResponses.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxRadApServRxResponses.setDescription('The value of tmnxBsxRadApServRxResponses indicates the number of RADIUS accounting responses received for this server.')
tmnxBsxRadApServReqTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 12, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxRadApServReqTimeouts.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxRadApServReqTimeouts.setDescription('The value of tmnxBsxRadApServReqTimeouts indicates the number of RADIUS accounting requests that have timed out for this server.')
tmnxBsxRadApServReqSendFail = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 63, 12, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBsxRadApServReqSendFail.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxRadApServReqSendFail.setDescription('The value of tmnxBsxRadApServReqSendFail indicates the number of RADIUS accounting requests that failed because the packet could not be sent.')
tmnxBsxCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 63, 1, 1)).setObjects(("TIMETRA-BSX-NG-MIB", "tmnxBsxMdaGroup"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxPolicyGroup"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatsGroup"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxBsxCompliance = tmnxBsxCompliance.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxBsxCompliance.setDescription('The compliance statement for management of BSX features in the TIMETRA-BSX-NG-MIB.')
tmnxBsxComplianceV7v0 = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 63, 1, 2)).setObjects(("TIMETRA-BSX-NG-MIB", "tmnxBsxMdaGroupV7v0"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxPolicyGroup"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatsGroup"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxBsxComplianceV7v0 = tmnxBsxComplianceV7v0.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxBsxComplianceV7v0.setDescription('The compliance statement for management of BSX features in the TIMETRA-BSX-MIB for release 7.0')
tmnxBsxComplianceV8v0 = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 63, 1, 3)).setObjects(("TIMETRA-BSX-NG-MIB", "tmnxBsxMdaGroupV7v0"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxMdaGroupV8v0"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxMdaGroupMG3v0"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxPolicyGroupV8v0"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatsGroup"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxNotifyObjsGroup"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxNotifyObjsGroupV7v0"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxNotificationGroup"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxNotificationGroupV7v0"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxNotificationGroupV8v0"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxCflowdGroup"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxOvrdGroup"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxMobileGatewayGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxBsxComplianceV8v0 = tmnxBsxComplianceV8v0.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxBsxComplianceV8v0.setDescription('The compliance statement for management of BSX features in the TIMETRA-BSX-MIB for release 8.0')
tmnxBsxComplianceV9v0 = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 63, 1, 4)).setObjects(("TIMETRA-BSX-NG-MIB", "tmnxBsxMdaGroupV7v0"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxMdaGroupV8v0"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxMdaGroupV9v0"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxPolicyGroupV9v0"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatsGroup"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatsGroupV9v0"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxNotifyObjsGroup"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxNotifyObjsGroupV7v0"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxNotifyObjsGroupV8v0"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxNotificationGroup"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxNotificationGroupV7v0"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxNotificationGroupV8v0"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxNotificationGroupV9v0"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxCflowdGroup"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxCflowdGroupV9v0"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxOvrdGroup"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxTransitGroup"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxMobileGatewayGroup"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxHttpRedirErrGroup"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStaticObjGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxBsxComplianceV9v0 = tmnxBsxComplianceV9v0.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxBsxComplianceV9v0.setDescription('The compliance statement for management of BSX features in the TIMETRA-BSX-MIB for release 9.0')
tmnxBsxComplianceV10v0 = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 63, 1, 5)).setObjects(("TIMETRA-BSX-NG-MIB", "tmnxBsxMdaGroupV7v0"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxMdaGroupV8v0"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxMdaGroupV10v0"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxPolicyGroupV10v0"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatsGroup"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatsGroupV9v0"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxNotifyObjsGroup"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxNotifyObjsGroupV7v0"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxNotifyObjsGroupV8v0"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxNotificationGroup"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxNotificationGroupV7v0"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxNotificationGroupV8v0"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxNotificationGroupV9v0"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxNotificationGroupV10v0"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxRadApNotificationGroup"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxCflowdGroup"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxCflowdGroupV9v0"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxCflowdGroupV10v0"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxOvrdGroup"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxTransitGroup"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxTransitGroupV10v0"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxMobileGatewayGroup"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxHttpRedirErrGroup"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxHttpRedirGroup"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStaticObjGroup"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxRedundancyObjGroup"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxHttpEnrichObjGroup"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxHttpEnrichStatObjGroup"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxTransitSeenIpGroup"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxRadiusAccountingObjGroup"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxRadApObjGroup"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxRadApStatObjGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxBsxComplianceV10v0 = tmnxBsxComplianceV10v0.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxComplianceV10v0.setDescription('The compliance statement for management of BSX features in the TIMETRA-BSX-MIB for release 10.0')
tmnxBsxMdaGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 63, 2, 1)).setObjects(("TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGrpLastChangeTime"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGrpFcLastChangeTime"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGrpMdaLastChangeTime"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGrpRowStatus"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGrpRowLastChange"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGrpDescription"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGrpAdminState"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGrpOperState"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGrpFailToMode"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGrpFromSubPool"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGrpFromSubResvCbs"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGrpFromSubSlpPolicy"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGrpFromSubQuePolicy"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGrpFromSubSchPolicy"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGrpToSubPool"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGrpToSubResvCbs"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGrpToSubSlpPolicy"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGrpToSubQuePolicy"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGrpToSubSchPolicy"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGrpIngressPool"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGrpIngressResvCbs"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGrpIngressSlpPolicy"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGrpIngressQuePolicy"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGrpFcRowStatus"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGrpFcRowLastChange"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpMdaRowStatus"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpMdaRowLastChange"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpMdaActivityState"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpMdaActivityChange"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpMdaRole"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGrpActivityChange"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusDiscontTime"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusOctsIn"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusPktsIn"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusPktsInPChipErs"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusOctsDiscCongIn"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusPktsDiscCongIn"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusOctsToMda"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusPktsToMda"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusOctsDisCongMda"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusPktsDisCongMda"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusOctsDiscErrors"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusPktsDiscErrors"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusOctsPolicyByps"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusPktsPolicyByps"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusOctsInspected"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusPktsInspected"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusOctsDiscPolicy"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusPktsDiscPolicy"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusOctsInMda"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusPktsInMda"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusOctsFromMda"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusPktsFromMda"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusPktsOutPChipEr"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusOctsDisCongOut"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusPktsDisCongOut"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusOctsOut"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusPktsOut"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusFlows"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusFlowsCurrent"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusFlowSetupRate"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusSubsDiverted"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusSubsCurrent"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusTrafficRate"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusHCOctsIn"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusHCPktsIn"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusHCPktsInPChipErs"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusHCOctsDiscCongIn"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusHCPktsDiscCongIn"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusHCOctsToMda"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusHCPktsToMda"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusHCOctsDisCongMda"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusHCPktsDisCongMda"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusHCOctsDiscErrors"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusHCPktsDiscErrors"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusHCOctsPolicyByps"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusHCPktsPolicyByps"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusHCOctsInspected"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusHCPktsInspected"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusHCOctsDiscPolicy"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusHCPktsDiscPolicy"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusHCOctsInMda"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusHCPktsInMda"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusHCOctsFromMda"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusHCPktsFromMda"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusHCPktsOutPChipEr"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusHCOctsDisCongOut"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusHCPktsDisCongOut"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusHCOctsOut"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusHCPktsOut"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusHCFlows"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusIngQDiscontTime"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusIngQFwdInPPkts"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusIngQFwdOutPPkts"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusIngQFwdInPOcts"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusIngQFwdOutPOcts"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusIngQDroInPPkts"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusIngQDroOutPPkts"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusIngQDroInPOcts"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusIngQDroOutPOcts"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusIngQHCFwdInPPkts"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusIngQHCFwdOutPPkts"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusIngQHCFwdInPOcts"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusIngQHCFwdOutPOcts"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusIngQHCDroInPPkts"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusIngQHCDroOutPPkts"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusIngQHCDroInPOcts"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusIngQHCDroOutPOcts"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusEgrQDiscontTime"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusEgrQFwdInPPkts"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusEgrQFwdOutPPkts"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusEgrQFwdInPOcts"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusEgrQFwdOutPOcts"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusEgrQDroInPPkts"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusEgrQDroOutPPkts"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusEgrQDroInPOcts"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusEgrQDroOutPOcts"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusEgrQHCFwdInPPkts"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusEgrQHCFwdOutPPkts"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusEgrQHCFwdInPOcts"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusEgrQHCFwdOutPOcts"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusEgrQHCDroInPPkts"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusEgrQHCDroOutPPkts"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusEgrQHCDroInPOcts"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusEgrQHCDroOutPOcts"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpMdaEsmSubscribers"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpMdaSapSubscribers"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubSumMdaSlotNum"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubSumMdaMdaNum"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubSumAppProfName"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubSumDiscontTime"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubSumOctsAdmFmSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubSumPktsAdmFmSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubSumFlwsAdmFmSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubSumOctsDnyFmSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubSumPktsDnyFmSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubSumFlwsDnyFmSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubSumOctsAdmToSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubSumPktsAdmToSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubSumFlwsAdmToSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubSumOctsDnyToSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubSumPktsDnyToSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubSumFlwsDnyToSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubSumTermFlwDur"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubSumTermFlws"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubSumShrtDurFlws"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubSumMedDurFlws"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubSumLngDurFlws"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubSumActFlwsFmSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubSumActFlwsToSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubSumHCOctsAdmFmSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubSumHCPktsAdmFmSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubSumHCFlwsAdmFmSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubSumHCOctsDnyFmSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubSumHCPktsDnyFmSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubSumHCFlwsDnyFmSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubSumHCOctsAdmToSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubSumHCPktsAdmToSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubSumHCFlwsAdmToSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubSumHCOctsDnyToSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubSumHCPktsDnyToSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubSumHCFlwsDnyToSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubSumHCTermFlwDur"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubSumHCTermFlws"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubSumHCShrtDurFlws"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubSumHCMedDurFlws"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubSumHCLngDurFlws"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxBsxMdaGroup = tmnxBsxMdaGroup.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxBsxMdaGroup.setDescription('The group of objects supporting management of BSX MDA capabilities on Alcatel-Lucent SROS series systems.')
tmnxBsxPolicyGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 63, 2, 2)).setObjects(("TIMETRA-BSX-NG-MIB", "tmnxBsxProtDescription"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppGrpRowStatus"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppGrpStorageType"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppGrpDescription"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppGrpAdminState"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppRowStatus"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppStorageType"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppDescription"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppAppGroup"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppFilterRowStatus"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppFilterDescription"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppFilterAdminState"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppFilterProtocol"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppFilterProtocolOp"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppFilterFlowSetupDir"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppFilterIpProtocolNum"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppFilterIpProtocolNumOp"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppFilterServerAddrType"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppFilterServerAddr"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppFilterServerAddrLen"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppFilterServerAddrOp"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppFilterServerPort"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppFilterServerPortOp"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppFilterServerPortFpp"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppFilterApplication"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppFilterExprRowStatus"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppFilterExprType"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppFilterExprOperator"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppFilterExprStr"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAsoRowStatus"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAsoDefValName"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAsoValRowStatus"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppProfRowStatus"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppProfDescription"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppProfDivert"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppProfCharRowStatus"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppProfCharValName"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxPolicerRowStatus"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxPolicerDescription"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxPolicerType"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxPolicerGranularity"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxPolicerAction"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxPolicerAdminPIR"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxPolicerAdminCIR"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxPolicerCBS"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxPolicerMBS"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxPolicerCIRAdaptation"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxPolicerPIRAdaptation"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpRowStatus"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpDescription"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpAdminState"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpApplication"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpApplicationOp"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpAppGroup"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpAppGroupOp"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpTrafficDir"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpSubscriber"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpSubscriberOp"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpDscp"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpDscpOp"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpDrop"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpBwLimitPolicer"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpFlowRatePolicer"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpFlowCountPolicer"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAdminOwner"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAdminControlApply"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAdminLastChangeTime"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxUpgrade"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxVersion"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpStatsFlows"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxFlowFullHighWatermark"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxFlowFullLowWatermark"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpCharRowStatus"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpCharOperator"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpStatsConflicts"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpSapSubscrPortId"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpSapSubscrEncapValue"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpSapSubscrOp"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpSrcAddressType"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpSrcAddress"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpSrcAddressLength"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpSrcAddressOp"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpSrcPortOp"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpSrcPortLowValue"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpSrcPortHighValue"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpDstAddressType"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpDstAddress"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpDstAddressLength"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpDstAddressOp"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpDstPortOp"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpDstPortLowValue"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpDstPortHighValue"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpRemarkFc"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpRemarkPriority"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpRemarkDscpInProfile"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpRemarkDscpOutProfile"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpMirrorSource"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpMirrorSourceAllIncl"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAdminCtrlLastChTime"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAdminCtrlConfigOwner"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAdminCtrlApply"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxBsxPolicyGroup = tmnxBsxPolicyGroup.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxBsxPolicyGroup.setDescription('The group of objects supporting management of BSX Policy capabilities on Alcatel-Lucent SROS series systems.')
tmnxBsxStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 63, 2, 3)).setObjects(("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaAcctLastChTime"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaAcctCfgCollStats"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaAcctCfgPolicy"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaSubLastChTime"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaSubSdyLastChTime"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaSubDiscontTime"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaSubOctsAdmFmSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaSubPktsAdmFmSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaSubFlwsAdmFmSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaSubOctsDnyFmSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaSubPktsDnyFmSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaSubFlwsDnyFmSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaSubOctsAdmToSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaSubPktsAdmToSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaSubFlwsAdmToSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaSubOctsDnyToSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaSubPktsDnyToSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaSubFlwsDnyToSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaSubTermFlwDur"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaSubTermFlws"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaSubShrtDurFlws"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaSubMedDurFlws"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaSubLngDurFlws"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaSubActFlwsFmSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaSubActFlwsToSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaSubHCOctsAdmFmSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaSubHCPktsAdmFmSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaSubHCFlwsAdmFmSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaSubHCOctsDnyFmSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaSubHCPktsDnyFmSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaSubHCFlwsDnyFmSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaSubHCOctsAdmToSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaSubHCPktsAdmToSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaSubHCFlwsAdmToSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaSubHCOctsDnyToSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaSubHCPktsDnyToSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaSubHCFlwsDnyToSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaSubHCTermFlwDur"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaSubHCTermFlws"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaSubHCShrtDurFlws"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaSubHCMedDurFlws"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaSubHCLngDurFlws"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaSubSdyDiscontTime"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaSubSdyOctsAdmFmSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaSubSdyPktsAdmFmSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaSubSdyFlwsAdmFmSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaSubSdyOctsDnyFmSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaSubSdyPktsDnyFmSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaSubSdyFlwsDnyFmSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaSubSdyOctsAdmToSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaSubSdyPktsAdmToSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaSubSdyFlwsAdmToSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaSubSdyOctsDnyToSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaSubSdyPktsDnyToSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaSubSdyFlwsDnyToSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaSubSdyTermFlwDur"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaSubSdyTermFlws"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaSubSdyShrtDurFlws"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaSubSdyMedDurFlws"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaSubSdyLngDurFlws"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaSubSdyActFlwsFmSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaSubSdyActFlwsToSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaSubSdyHCOctsAdmFmSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaSubSdyHCPktsAdmFmSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaSubSdyHCFlwsAdmFmSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaSubSdyHCOctsDnyFmSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaSubSdyHCPktsDnyFmSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaSubSdyHCFlwsDnyFmSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaSubSdyHCOctsAdmToSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaSubSdyHCPktsAdmToSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaSubSdyHCFlwsAdmToSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaSubSdyHCOctsDnyToSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaSubSdyHCPktsDnyToSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaSubSdyHCFlwsDnyToSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaSubSdyHCTermFlwDur"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaSubSdyHCTermFlws"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaSubSdyHCShrtDurFlws"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaSubSdyHCMedDurFlws"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaSubSdyHCLngDurFlws"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaSubCfgRowStatus"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaSubSdyRowStatus"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaDiscontTime"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaOctsAdmFmSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaPktsAdmFmSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaFlwsAdmFmSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaOctsDnyFmSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaPktsDnyFmSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaFlwsDnyFmSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaOctsAdmToSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaPktsAdmToSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaFlwsAdmToSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaOctsDnyToSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaPktsDnyToSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaFlwsDnyToSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaTermFlwDur"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaTermFlws"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaShrtDurFlws"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaMedDurFlws"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaLngDurFlws"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaActFlwsFmSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaActFlwsToSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaNumSubscribers"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaHCOctsAdmFmSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaHCPktsAdmFmSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaHCFlwsAdmFmSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaHCOctsDnyFmSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaHCPktsDnyFmSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaHCFlwsDnyFmSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaHCOctsAdmToSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaHCPktsAdmToSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaHCFlwsAdmToSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaHCOctsDnyToSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaHCPktsDnyToSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaHCFlwsDnyToSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaHCTermFlwDur"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaHCTermFlws"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaHCShrtDurFlws"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaHCMedDurFlws"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaHCLngDurFlws"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxBsxStatsGroup = tmnxBsxStatsGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatsGroup.setDescription('The group of objects supporting management of BSX Stats capabilities on Alcatel-Lucent SROS series systems.')
tmnxBsxNotifyObjsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 63, 2, 4)).setObjects(("TIMETRA-BSX-NG-MIB", "tmnxBsxNotifyIsaAaGroupIndex"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxNotifyActiveMda"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxNotifyActionStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxBsxNotifyObjsGroup = tmnxBsxNotifyObjsGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxNotifyObjsGroup.setDescription('The group of objects supporting BSX Notification capabilities on Alcatel-Lucent SROS series systems.')
tmnxBsxNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 63, 2, 5)).setObjects(("TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGrpFailureV2"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGrpFailureClearV2"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGrpNonRedundantV2"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGrpNonRedundantClear"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGrpSwitchover"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGrpFlowFull"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGrpFlowFullClear"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaSubLoadBalance"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxBsxNotificationGroup = tmnxBsxNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxNotificationGroup.setDescription('The group of notifications supporting BSX capabilities on Alcatel-Lucent SROS series systems.')
tmnxBsxMdaGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 63, 2, 6))
tmnxBsxMdaGroupV7v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 63, 2, 6, 1)).setObjects(("TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGrpLastChangeTime"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGrpFcLastChangeTime"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGrpMdaLastChangeTime"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGrpRowStatus"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGrpRowLastChange"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGrpDescription"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGrpAdminState"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGrpOperState"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGrpFailToMode"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGrpFromSubPool"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGrpFromSubResvCbs"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGrpFromSubSlpPolicy"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGrpFromSubQuePolicy"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGrpFromSubSchPolicy"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGrpToSubPool"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGrpToSubResvCbs"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGrpToSubSlpPolicy"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGrpToSubQuePolicy"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGrpToSubSchPolicy"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGrpFcRowStatus"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGrpFcRowLastChange"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpMdaRowStatus"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpMdaRowLastChange"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpMdaActivityState"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpMdaActivityChange"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpMdaRole"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGrpActivityChange"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusDiscontTime"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusOctsIn"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusPktsIn"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusPktsInPChipErs"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusOctsDiscCongIn"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusPktsDiscCongIn"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusOctsToMda"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusPktsToMda"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusOctsDisCongMda"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusPktsDisCongMda"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusOctsDiscErrors"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusPktsDiscErrors"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusOctsPolicyByps"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusPktsPolicyByps"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusOctsInspected"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusPktsInspected"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusOctsDiscPolicy"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusPktsDiscPolicy"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusOctsInMda"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusPktsInMda"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusOctsFromMda"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusPktsFromMda"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusPktsOutPChipEr"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusOctsDisCongOut"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusPktsDisCongOut"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusOctsOut"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusPktsOut"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusFlows"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusFlowsCurrent"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusFlowSetupRate"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusSubsDiverted"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusSubsCurrent"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusTrafficRate"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusHCOctsIn"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusHCPktsIn"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusHCPktsInPChipErs"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusHCOctsDiscCongIn"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusHCPktsDiscCongIn"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusHCOctsToMda"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusHCPktsToMda"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusHCOctsDisCongMda"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusHCPktsDisCongMda"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusHCOctsDiscErrors"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusHCPktsDiscErrors"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusHCOctsPolicyByps"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusHCPktsPolicyByps"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusHCOctsInspected"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusHCPktsInspected"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusHCOctsDiscPolicy"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusHCPktsDiscPolicy"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusHCOctsInMda"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusHCPktsInMda"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusHCOctsFromMda"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusHCPktsFromMda"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusHCPktsOutPChipEr"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusHCOctsDisCongOut"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusHCPktsDisCongOut"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusHCOctsOut"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusHCPktsOut"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusHCFlows"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusIngQDiscontTime"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusIngQFwdInPPkts"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusIngQFwdOutPPkts"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusIngQFwdInPOcts"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusIngQFwdOutPOcts"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusIngQDroInPPkts"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusIngQDroOutPPkts"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusIngQDroInPOcts"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusIngQDroOutPOcts"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusIngQHCFwdInPPkts"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusIngQHCFwdOutPPkts"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusIngQHCFwdInPOcts"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusIngQHCFwdOutPOcts"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusIngQHCDroInPPkts"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusIngQHCDroOutPPkts"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusIngQHCDroInPOcts"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusIngQHCDroOutPOcts"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusEgrQDiscontTime"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusEgrQFwdInPPkts"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusEgrQFwdOutPPkts"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusEgrQFwdInPOcts"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusEgrQFwdOutPOcts"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusEgrQDroInPPkts"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusEgrQDroOutPPkts"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusEgrQDroInPOcts"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusEgrQDroOutPOcts"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusEgrQHCFwdInPPkts"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusEgrQHCFwdOutPPkts"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusEgrQHCFwdInPOcts"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusEgrQHCFwdOutPOcts"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusEgrQHCDroInPPkts"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusEgrQHCDroOutPPkts"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusEgrQHCDroInPOcts"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusEgrQHCDroOutPOcts"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpMdaEsmSubscribers"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpMdaSapSubscribers"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubSumMdaSlotNum"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubSumMdaMdaNum"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubSumAppProfName"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubSumDiscontTime"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubSumOctsAdmFmSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubSumPktsAdmFmSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubSumFlwsAdmFmSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubSumOctsDnyFmSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubSumPktsDnyFmSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubSumFlwsDnyFmSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubSumOctsAdmToSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubSumPktsAdmToSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubSumFlwsAdmToSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubSumOctsDnyToSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubSumPktsDnyToSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubSumFlwsDnyToSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubSumTermFlwDur"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubSumTermFlws"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubSumShrtDurFlws"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubSumMedDurFlws"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubSumLngDurFlws"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubSumActFlwsFmSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubSumActFlwsToSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubSumHCOctsAdmFmSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubSumHCPktsAdmFmSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubSumHCFlwsAdmFmSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubSumHCOctsDnyFmSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubSumHCPktsDnyFmSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubSumHCFlwsDnyFmSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubSumHCOctsAdmToSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubSumHCPktsAdmToSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubSumHCFlwsAdmToSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubSumHCOctsDnyToSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubSumHCPktsDnyToSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubSumHCFlwsDnyToSb"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubSumHCTermFlwDur"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubSumHCTermFlws"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubSumHCShrtDurFlws"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubSumHCMedDurFlws"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubSumHCLngDurFlws"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxBsxMdaGroupV7v0 = tmnxBsxMdaGroupV7v0.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxMdaGroupV7v0.setDescription('The group of objects supporting management of BSX MDA capabilities on Alcatel-Lucent SROS series systems for release 7.0')
tmnxBsxMdaGroupV8v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 63, 2, 6, 2)).setObjects(("TIMETRA-BSX-NG-MIB", "tmnxBsxAaGrpPartLastChangeTime"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAaGrpPartRowStatus"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAaGrpPartRowLastChange"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAaGrpPartDescription"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGrpPartitions"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGrpCapCostLowThres"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGrpCapCostHighThres"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGrpLoadBalanceStatus"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGrpUnassignedEsmSubs"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGrpUnassignedSapSubs"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGrpUnassignedSpkSubs"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGrpAaSubScale"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGrpOverloadCutThru"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpMdaSpokeSdpSubscribers"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpMdaCapacityCost"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpMdaStatsResourceCount"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusFlowsAverage"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusFlowsPeak"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusFlowSetupRateAvg"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusFlowSetupRatePk"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusSubsDivertedAvg"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusSubsDivertedPk"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusSubsAverage"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusSubsPeak"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusTrafficRateAvg"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusTrafficRatePeak"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxIsaLoadBalUnSub"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubMdaSlotNum"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubMdaMdaNum"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubAppProfName"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubHasOverrides"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxBsxMdaGroupV8v0 = tmnxBsxMdaGroupV8v0.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxMdaGroupV8v0.setDescription('The group of objects supporting management of BSX MDA capabilities on Alcatel-Lucent SROS series systems for release 8.0')
tmnxBsxMdaGroupV9v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 63, 2, 6, 3)).setObjects(("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusPacketRate"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusPacketRateAvg"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusPacketRatePeak"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusFlowResInUse"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpMdaTransitIpSubs"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpMdaTransitIpAddrs"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpMdaTransitSubs"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpMdaTransPrefEntries"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGrpFromSubWaSBfHiWmk"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGrpFromSubWaSBfLoWmk"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGrpToSubWaSBfHiWmk"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGrpToSubWaSBfLoWmk"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubTransitIpPolicyId"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubTransPrefPolicyId"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGrpTransPrefV4NmEntr"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxIsaLoadBalUnSubTransit"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAaGrpPartXOnlineHost"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAaGrpPartHttpMatchAllReq"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusHCPktSzIncPk"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusPktSzIncPkLo"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusPktSzIncPkHi"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusHCPktSzDecPk"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusPktSzDecPkLo"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusPktSzDecPkHi"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusHCPktSzIncOc"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusPktSzIncOcLo"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusPktSzIncOcHi"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusHCPktSzDecOc"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusPktSzDecOcLo"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusPktSzDecOcHi"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxBsxMdaGroupV9v0 = tmnxBsxMdaGroupV9v0.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxBsxMdaGroupV9v0.setDescription('The group of additional objects introduced in release 9.0 to support management of BSX MDA capabilities on Alcatel-Lucent SROS series systems.')
tmnxBsxMdaGroupV10v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 63, 2, 6, 4)).setObjects(("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusPacketRate"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusPacketRateAvg"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusPacketRatePeak"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusFlowResInUse"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpMdaTransitIpSubs"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpMdaTransitIpAddrs"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpMdaTransitSubs"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGrpFromSubWaSBfHiWmk"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGrpFromSubWaSBfLoWmk"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGrpToSubWaSBfHiWmk"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGrpToSubWaSBfLoWmk"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubTransitIpPolicyId"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubTransPrefPolicyId"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGrpTransPrefV4NmEntr"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxIsaLoadBalUnSubTransit"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAaGrpPartXOnlineHost"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAaGrpPartHttpMatchAllReq"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAaGrpPartAaSubRemote"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusHCPktSzIncPk"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusPktSzIncPkLo"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusPktSzIncPkHi"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusHCPktSzDecPk"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusPktSzDecPkLo"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusPktSzDecPkHi"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusHCPktSzIncOc"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusPktSzIncOcLo"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusPktSzIncOcHi"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusHCPktSzDecOc"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusPktSzDecOcLo"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpStatusPktSzDecOcHi"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGrpTransPrefV6NmEntr"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGrpTransPrefV6RmEntr"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpMdaTransPrefV4Entr"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpMdaTransPrefV6Entr"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpMdaTransPrefV6RemEntr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxBsxMdaGroupV10v0 = tmnxBsxMdaGroupV10v0.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxMdaGroupV10v0.setDescription('The group of objects supporting management of BSX MDA capabilities on Alcatel-Lucent SROS series systems for release 10.0.')
tmnxBsxMdaGroupMG3v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 63, 2, 6, 5)).setObjects(("TIMETRA-BSX-NG-MIB", "tmnxBsxAaGrpPartXOnlineHost"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAaGrpPartHttpMatchAllReq"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxBsxMdaGroupMG3v0 = tmnxBsxMdaGroupMG3v0.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxBsxMdaGroupMG3v0.setDescription('The group of objects supporting management of BSX MDA capabilities on Alcatel-Lucent Mobile Gateway systems for the MG 3.0 release.')
tmnxBsxObsoleteGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 63, 2, 7))
tmnxBsxObsoleteGroupV7v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 63, 2, 7, 1)).setObjects(("TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGrpIngressPool"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGrpIngressResvCbs"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGrpIngressSlpPolicy"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGrpIngressQuePolicy"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxBsxObsoleteGroupV7v0 = tmnxBsxObsoleteGroupV7v0.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxObsoleteGroupV7v0.setDescription('The group of objects in TIMETRA-BSX-NG-MIB which were obsoleted in Alcatel-Lucent SROS series systems for release 7.0.')
tmnxBsxObsoleteGroupV8v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 63, 2, 7, 2)).setObjects(("TIMETRA-BSX-NG-MIB", "tmnxBsxAdminOwner"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAdminControlApply"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAdminLastChangeTime"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppFilterServerPort"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxBsxObsoleteGroupV8v0 = tmnxBsxObsoleteGroupV8v0.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxObsoleteGroupV8v0.setDescription('The group of objects in TIMETRA-BSX-NG-MIB which were obsoleted in Alcatel-Lucent SROS series systems for release 8.0.')
tmnxBsxObsoleteGroupsV9v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 63, 2, 7, 3)).setObjects(("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpStatsFlows"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpStatsConflicts"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpSubscriber"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpSubscriberOp"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpSapSubscrPortId"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpSapSubscrEncapValue"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpSapSubscrOp"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpSpokeSdpSubscr"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpSpokeSdpSubscrOp"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGrpUnassignedTIpSubs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxBsxObsoleteGroupsV9v0 = tmnxBsxObsoleteGroupsV9v0.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxObsoleteGroupsV9v0.setDescription('The group of objects in TIMETRA-BSX-NG-MIB which were obsoleted in Alcatel-Lucent SROS series systems for release 9.0.')
tmnxBsxObsoleteGroupV10v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 63, 2, 7, 4)).setObjects(("TIMETRA-BSX-NG-MIB", "tmnxBsxGrpMdaTransPrefEntries"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppGrpAdminState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxBsxObsoleteGroupV10v0 = tmnxBsxObsoleteGroupV10v0.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxObsoleteGroupV10v0.setDescription('The group of objects in TIMETRA-BSX-NG-MIB which were obsoleted in Alcatel-Lucent SROS series systems for release 10.0.')
tmnxBsxPolicyGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 63, 2, 8))
tmnxBsxPolicyGroupV8v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 63, 2, 8, 1)).setObjects(("TIMETRA-BSX-NG-MIB", "tmnxBsxProtDescription"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxProtParentName"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxProtAdminState"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppGrpRowStatus"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppGrpStorageType"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppGrpDescription"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppGrpAdminState"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppRowStatus"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppStorageType"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppDescription"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppAppGroup"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppFilterRowStatus"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppFilterDescription"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppFilterAdminState"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppFilterProtocol"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppFilterProtocolOp"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppFilterFlowSetupDir"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppFilterIpProtocolNum"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppFilterIpProtocolNumOp"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppFilterServerAddrType"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppFilterServerAddr"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppFilterServerAddrLen"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppFilterServerAddrOp"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppFilterServerPortOp"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppFilterServerPortFpp"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppFilterServerPortLow"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppFilterServerPortHigh"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppFilterApplication"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppFilterExprRowStatus"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppFilterExprType"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppFilterExprOperator"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppFilterExprStr"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAsoRowStatus"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAsoDefValName"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAsoValRowStatus"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppProfRowStatus"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppProfDescription"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppProfDivert"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppProfCapacityCost"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppProfCharRowStatus"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppProfCharValName"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxPolicerRowStatus"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxPolicerDescription"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxPolicerType"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxPolicerGranularity"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxPolicerAction"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxPolicerAdminPIR"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxPolicerAdminCIR"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxPolicerCBS"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxPolicerMBS"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxPolicerCIRAdaptation"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxPolicerPIRAdaptation"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpRowStatus"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpDescription"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpAdminState"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpApplication"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpApplicationOp"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpAppGroup"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpAppGroupOp"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpTrafficDir"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpSubscriber"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpSubscriberOp"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpDscp"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpDscpOp"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpDrop"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpBwLimitPolicer"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpFlowRatePolicer"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpFlowCountPolicer"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxUpgrade"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxVersion"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpStatsFlows"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxFlowFullHighWatermark"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxFlowFullLowWatermark"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpCharRowStatus"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpCharOperator"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpStatsConflicts"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpSapSubscrPortId"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpSapSubscrEncapValue"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpSapSubscrOp"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpSrcAddressType"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpSrcAddress"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpSrcAddressLength"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpSrcAddressOp"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpSrcPortOp"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpSrcPortLowValue"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpSrcPortHighValue"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpDstAddressType"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpDstAddress"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpDstAddressLength"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpDstAddressOp"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpDstPortOp"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpDstPortLowValue"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpDstPortHighValue"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpSpokeSdpSubscr"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpSpokeSdpSubscrOp"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpRemarkFc"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpRemarkPriority"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpRemarkDscpInProfile"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpRemarkDscpOutProfile"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpMirrorSource"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpMirrorSourceAllIncl"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAdminCtrlLastChTime"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAdminCtrlConfigOwner"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAdminCtrlApply"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxCustProtRowStatus"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxCustProtRowLastChange"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxCustProtIpProtocolNum"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxCustProtDescription"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxCustProtAdminState"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxCustProtExprRowStatus"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxCustProtExprRowLastChange"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxCustProtExprOffset"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxCustProtExprDirection"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxCustProtExprOperator"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxCustProtExprStr"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubAsoValName"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubAsoValDerivedFrom"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubPolicerAqpEntryId"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubPolicerName"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubPolResExStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxBsxPolicyGroupV8v0 = tmnxBsxPolicyGroupV8v0.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxBsxPolicyGroupV8v0.setDescription('The group of objects supporting management of BSX Policy capabilities on Alcatel-Lucent SROS series systems for release 8.0.')
tmnxBsxPolicyGroupV9v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 63, 2, 8, 2)).setObjects(("TIMETRA-BSX-NG-MIB", "tmnxBsxProtDescription"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxProtParentName"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxProtAdminState"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppGrpRowStatus"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppGrpStorageType"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppGrpDescription"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppGrpAdminState"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppRowStatus"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppStorageType"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppDescription"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppAppGroup"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppFilterRowStatus"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppFilterDescription"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppFilterAdminState"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppFilterProtocol"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppFilterProtocolOp"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppFilterFlowSetupDir"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppFilterIpProtocolNum"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppFilterIpProtocolNumOp"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppFilterServerAddrType"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppFilterServerAddr"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppFilterServerAddrLen"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppFilterServerAddrOp"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppFilterServerPortOp"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppFilterServerPortFpp"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppFilterServerPortLow"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppFilterServerPortHigh"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppFilterApplication"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppFilterExprRowStatus"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppFilterExprType"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppFilterExprOperator"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppFilterExprStr"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAsoRowStatus"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAsoDefValName"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAsoValRowStatus"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppProfRowStatus"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppProfDescription"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppProfDivert"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppProfCapacityCost"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppProfCharRowStatus"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppProfCharValName"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxPolicerRowStatus"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxPolicerDescription"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxPolicerType"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxPolicerGranularity"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxPolicerAction"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxPolicerAdminPIR"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxPolicerAdminCIR"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxPolicerCBS"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxPolicerMBS"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxPolicerCIRAdaptation"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxPolicerPIRAdaptation"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpRowStatus"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpDescription"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpAdminState"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpApplication"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpApplicationOp"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpAppGroup"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpAppGroupOp"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpTrafficDir"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpDscp"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpDscpOp"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpDrop"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpBwLimitPolicer"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpFlowRatePolicer"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpFlowCountPolicer"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxUpgrade"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxVersion"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxFlowFullHighWatermark"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxFlowFullLowWatermark"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpCharRowStatus"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpCharOperator"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpSrcAddressType"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpSrcAddress"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpSrcAddressLength"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpSrcAddressOp"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpSrcPortOp"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpSrcPortLowValue"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpSrcPortHighValue"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpDstAddressType"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpDstAddress"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpDstAddressLength"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpDstAddressOp"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpDstPortOp"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpDstPortLowValue"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpDstPortHighValue"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpRemarkFc"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpRemarkPriority"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpRemarkDscpInProfile"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpRemarkDscpOutProfile"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpMirrorSource"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpMirrorSourceAllIncl"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAdminCtrlLastChTime"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAdminCtrlConfigOwner"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAdminCtrlApply"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxCustProtRowStatus"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxCustProtRowLastChange"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxCustProtIpProtocolNum"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxCustProtDescription"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxCustProtAdminState"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxCustProtExprRowStatus"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxCustProtExprRowLastChange"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxCustProtExprOffset"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxCustProtExprDirection"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxCustProtExprOperator"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxCustProtExprStr"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubAsoValName"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubAsoValDerivedFrom"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubPolicerAqpEntryId"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubPolicerName"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubPolResExStatus"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpAaSubscriberType"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpAaSubscriber"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpAaSubscriberOp"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxFlowSetupHighWatermark"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxFlowSetupLowWatermark"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxPacketRateHighWatermark"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxPacketRateLowWatermark"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxBitRateHighWatermark"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxBitRateLowWatermark"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpStatsHCFlows"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpStatsFlowsLo"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpStatsFlowsHi"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpStatsHCConflicts"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpStatsConflictsLo"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpStatsConflictsHi"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpHttpErrRedirName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxBsxPolicyGroupV9v0 = tmnxBsxPolicyGroupV9v0.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxBsxPolicyGroupV9v0.setDescription('The group of objects supporting management of BSX Policy capabilities on Alcatel-Lucent SROS series systems for release 9.0.')
tmnxBsxPolicyGroupV10v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 63, 2, 8, 3)).setObjects(("TIMETRA-BSX-NG-MIB", "tmnxBsxProtDescription"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxProtParentName"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxProtAdminState"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxProtObsolete"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppGrpRowStatus"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppGrpStorageType"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppGrpDescription"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppRowStatus"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppStorageType"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppDescription"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppAppGroup"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppFilterRowStatus"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppFilterDescription"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppFilterAdminState"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppFilterProtocol"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppFilterProtocolOp"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppFilterFlowSetupDir"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppFilterIpProtocolNum"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppFilterIpProtocolNumOp"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppFilterServerAddrType"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppFilterServerAddr"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppFilterServerAddrLen"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppFilterServerAddrOp"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppFilterServerPortOp"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppFilterServerPortFpp"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppFilterServerPortLow"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppFilterServerPortHigh"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppFilterApplication"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppFilterExprRowStatus"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppFilterExprType"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppFilterExprOperator"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppFilterExprStr"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAsoRowStatus"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAsoDefValName"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAsoValRowStatus"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppProfRowStatus"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppProfDescription"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppProfDivert"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppProfCapacityCost"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppProfCharRowStatus"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppProfCharValName"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxPolicerRowStatus"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxPolicerDescription"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxPolicerType"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxPolicerGranularity"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxPolicerAction"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxPolicerAdminPIR"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxPolicerAdminCIR"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxPolicerCBS"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxPolicerMBS"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxPolicerCIRAdaptation"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxPolicerPIRAdaptation"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpRowStatus"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpDescription"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpAdminState"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpApplication"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpApplicationOp"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpAppGroup"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpAppGroupOp"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpTrafficDir"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpDscp"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpDscpOp"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpDrop"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpBwLimitPolicer"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpFlowRatePolicer"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpFlowCountPolicer"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxUpgrade"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxVersion"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxFlowFullHighWatermark"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxFlowFullLowWatermark"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpCharRowStatus"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpCharOperator"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpSrcAddressType"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpSrcAddress"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpSrcAddressLength"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpSrcAddressOp"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpSrcPortOp"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpSrcPortLowValue"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpSrcPortHighValue"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpDstAddressType"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpDstAddress"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpDstAddressLength"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpDstAddressOp"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpDstPortOp"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpDstPortLowValue"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpDstPortHighValue"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpRemarkFc"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpRemarkPriority"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpRemarkDscpInProfile"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpRemarkDscpOutProfile"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpMirrorSource"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpMirrorSourceAllIncl"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAdminCtrlLastChTime"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAdminCtrlConfigOwner"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAdminCtrlApply"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxCustProtRowStatus"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxCustProtRowLastChange"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxCustProtIpProtocolNum"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxCustProtDescription"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxCustProtAdminState"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxCustProtExprRowStatus"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxCustProtExprRowLastChange"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxCustProtExprOffset"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxCustProtExprDirection"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxCustProtExprOperator"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxCustProtExprStr"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubAsoValName"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubAsoValDerivedFrom"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubPolicerAqpEntryId"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubPolicerName"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubPolResExStatus"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpAaSubscriberType"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpAaSubscriber"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpAaSubscriberOp"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxFlowSetupHighWatermark"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxFlowSetupLowWatermark"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxPacketRateHighWatermark"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxPacketRateLowWatermark"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxBitRateHighWatermark"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxBitRateLowWatermark"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpStatsHCFlows"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpStatsFlowsLo"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpStatsFlowsHi"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpStatsHCConflicts"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpStatsConflictsLo"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpStatsConflictsHi"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpHttpErrRedirName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxBsxPolicyGroupV10v0 = tmnxBsxPolicyGroupV10v0.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxPolicyGroupV10v0.setDescription('The group of objects supporting management of BSX Policy capabilities on Alcatel-Lucent SROS series systems for release 10.0.')
tmnxBsxNotificationGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 63, 2, 10))
tmnxBsxNotificationGroupV8v0 = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 63, 2, 10, 1)).setObjects(("TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGrpCapCostThres"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGrpCapCostThresClear"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubscribersUnassigned"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubPolResExceeded"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubPolResExceededClear"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxBsxNotificationGroupV8v0 = tmnxBsxNotificationGroupV8v0.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxNotificationGroupV8v0.setDescription('The group of notifications supporting BSX capabilities on Alcatel-Lucent SROS series systems for release 8.0')
tmnxBsxNotificationGroupV7v0 = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 63, 2, 10, 2)).setObjects(("TIMETRA-BSX-NG-MIB", "tmnxBsxAaSubscriberAcctDataLoss"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxBsxNotificationGroupV7v0 = tmnxBsxNotificationGroupV7v0.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxNotificationGroupV7v0.setDescription('The group of notifications supporting BSX capabilities on Alcatel-Lucent SROS series systems for release 7.0')
tmnxBsxNotificationGroupV9v0 = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 63, 2, 10, 3)).setObjects(("TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGrpBitRate"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGrpBitRateClear"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGrpFlowSetup"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGrpFlowSetupClear"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGrpPacketRate"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGrpPacketRateClear"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxTransIpPolAaSubCreated"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxTransIpPolAaSubDeleted"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxTransIpPolRadCoAAudit"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxTransIpPolRadCoAError"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxTransIpPolRadDiscError"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxTransIpPolDhcpAddWarning"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxTransIpPolDhcpDelWarning"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGrpFmSbWaSBufOvld"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGrpFmSbWaSBufOvldClr"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGrpToSbWaSBufOvld"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGrpToSbWaSBufOvldClr"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGrpOvrldCutthru"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxIsaAaGrpOvrldCutthruClr"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxTransitIpPersistenceWarn"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxBsxNotificationGroupV9v0 = tmnxBsxNotificationGroupV9v0.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxNotificationGroupV9v0.setDescription('The group of notifications supporting BSX capabilities on Alcatel-Lucent SROS series systems for release 9.0')
tmnxBsxNotificationGroupV10v0 = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 63, 2, 10, 4)).setObjects(("TIMETRA-BSX-NG-MIB", "tmnxBsxAarpInstOperStateChanged"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAarpInstStateChanged"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxBsxNotificationGroupV10v0 = tmnxBsxNotificationGroupV10v0.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxNotificationGroupV10v0.setDescription('The group of notifications supporting BSX capabilities on Alcatel-Lucent SROS series systems for release 10.0')
tmnxBsxRadApNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 63, 2, 10, 5)).setObjects(("TIMETRA-BSX-NG-MIB", "tmnxBsxRadApFailure"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxRadApServOperStateChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxBsxRadApNotificationGroup = tmnxBsxRadApNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxRadApNotificationGroup.setDescription('The group of additional notifications supporting Application Assurance RADIUS Accounting Policy capabilities on Alcatel-Lucent SROS series systems for release 10.0.')
tmnxBsxCflowdGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 63, 2, 11))
tmnxBsxCflowdGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 63, 2, 11, 1)).setObjects(("TIMETRA-BSX-NG-MIB", "tmnxBsxCflowdLastChangeTime"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxCflowdCollLastChangeTime"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxCflowdPerfLastChangeTime"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxCflowdExpLastChangeTime"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxCflowdPerfExpLastChTime"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxCflowdRowLastChange"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxCflowdVolRate"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxCflowdTemplateRetransmit"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxCflowdAdminState"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxCflowdCollRowStatus"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxCflowdCollRowLastChange"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxCflowdCollDescription"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxCflowdCollAdminState"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxCflowdCollOperState"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxCflowdCollVersion"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxCflowdPerfRowLastChange"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxCflowdPerfFlowRate"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxCflowdExpRowLastChange"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxCflowdExpAdminState"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxCflowdPerfExpRowStatus"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxCflowdPerfExpRowLastChnge"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxCflowdStatusDiscontTime"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxCflowdStatusRecReported"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxCflowdStatusRecDropped"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxCflowdStatusPktsSent"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxCflowdStatusFlowsNoRes"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxCflowdStatusActFlowsCurr"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxCflowdStatusRecRateCurr"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxCflowdStatusPktRateCurr"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxCflowdStatusHCRecReported"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxCflowdStatusHCRecDropped"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxCflowdStatusHCPktsSent"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxCflowdStatusHCFlowsNoRes"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxCflowdCollStatDiscontTime"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxCflowdCollStatRecSent"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxCflowdCollStatHCRecSent"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxCflowdExpStatDiscontTime"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxCflowdExpStatRecReport"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxCflowdExpStatHCRecReport"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxCflowdExpStatRecDropped"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxCflowdExpStatHCRecDropped"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxCflowdExpStatFlowsNoRes"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxCflowdExpStatHCFlowsNoRes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxBsxCflowdGroup = tmnxBsxCflowdGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxCflowdGroup.setDescription('The group of objects supporting management of BSX Cflowd capabilities on Alcatel-Lucent SROS series systems.')
tmnxBsxCflowdGroupV9v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 63, 2, 11, 2)).setObjects(("TIMETRA-BSX-NG-MIB", "tmnxBsxCflowdStatusHCUSupSSRCSt"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxCflowdStatusUSupSSRCStLo"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxCflowdStatusUSupSSRCStHi"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxCflowdExpStatHCUSupSSRCSt"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxCflowdExpStatUSupSSRCStLo"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxCflowdExpStatUSupSSRCStHi"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxBsxCflowdGroupV9v0 = tmnxBsxCflowdGroupV9v0.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxCflowdGroupV9v0.setDescription('The group of additional objects introduced in release 9.0 to support management of BSX Cflowd on Alcatel-Lucent SROS series systems.')
tmnxBsxCflowdGroupV10v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 63, 2, 11, 3)).setObjects(("TIMETRA-BSX-NG-MIB", "tmnxBsxCflowdPerfFlowRate2"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxCflowdPerfExpRateNum"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxBsxCflowdGroupV10v0 = tmnxBsxCflowdGroupV10v0.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxCflowdGroupV10v0.setDescription('The group of additional objects introduced in release 10.0 to support management of BSX Cflowd on Alcatel-Lucent SROS series systems.')
tmnxBsxOvrdGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 63, 2, 12))
tmnxBsxOvrdGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 63, 2, 12, 1)).setObjects(("TIMETRA-BSX-NG-MIB", "tmnxBsxOvrdAaSubLastChTime"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxOvrdAaSubCharLastChTm"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxOvrdAaSubRowStatus"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxOvrdAaSubRowLastCh"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxOvrdAaSubCharRowStatus"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxOvrdAaSubCharRowLastCh"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxOvrdAaSubCharValName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxBsxOvrdGroup = tmnxBsxOvrdGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxOvrdGroup.setDescription('The group of objects supporting management of BSX Override capabilities on Alcatel-Lucent SROS series systems.')
tmnxBsxNotifyObjsGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 63, 2, 13))
tmnxBsxNotifyObjsGroupV7v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 63, 2, 13, 1)).setObjects(("TIMETRA-BSX-NG-MIB", "tmnxBsxNotifyAaSubscriberType"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxNotifyAaSubscriberName"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxNotifyAaSubAcctLossReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxBsxNotifyObjsGroupV7v0 = tmnxBsxNotifyObjsGroupV7v0.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxNotifyObjsGroupV7v0.setDescription('The group of objects supporting BSX Notification capabilities on Alcatel-Lucent SROS series systems for release 7.0')
tmnxBsxNotifyObjsGroupV8v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 63, 2, 13, 2)).setObjects(("TIMETRA-BSX-NG-MIB", "tmnxBsxNotifyAaGrpPartIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxBsxNotifyObjsGroupV8v0 = tmnxBsxNotifyObjsGroupV8v0.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxNotifyObjsGroupV8v0.setDescription('The group of objects supporting BSX Notification capabilities on Alcatel-Lucent SROS series systems for release 8.0')
tmnxBsxNotifyObjsGroupV9v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 63, 2, 13, 3)).setObjects(("TIMETRA-BSX-NG-MIB", "tmnxBsxNotifyRadiusCoAAuditState"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxNotifyReason"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxNotifyTransitIpPolicyId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxBsxNotifyObjsGroupV9v0 = tmnxBsxNotifyObjsGroupV9v0.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxNotifyObjsGroupV9v0.setDescription('The group of objects supporting BSX Notification capabilities on Alcatel-Lucent SROS series systems for release 9.0')
tmnxBsxTransitGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 63, 2, 14))
tmnxBsxTransitGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 63, 2, 14, 1)).setObjects(("TIMETRA-BSX-NG-MIB", "tmnxBsxTransitIpPolicyLastChTime"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxTransIpPlcySubLastChTime"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxTransIpPlcyAddrLastChTime"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxTransitIpPolicyRowStatus"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxTransitIpPolicyRowLastCh"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxTransitIpPolicyDesc"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxTransitIpPolicyDefAppProf"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxTransitIpPolicySubIdPlcy"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxTransitIpPolicyRadius"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxTransitIpPolicyRadAuthPlc"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxTransitIpPolicyDhcp"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxTransIpPlcySubRowStatus"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxTransIpPlcySubRowLastCh"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxTransIpPlcySubAppProfNm"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxTransIpPlcySubRefCount"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxTransIpPlcyAddrRowStatus"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxTransIpPlcyAddrRowLastCh"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxTransIpPlcyAddrSubscriber"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxTransitIpSumParentSubType"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxTransitIpSumParentSub"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxTransitIpSumAppProfNm"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxTransitIpSumIpOriginMask"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxTransitIpSumUpdateTime"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxTransPrefPlcyLastChTime"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxTransPrefSubLastChTime"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxTransPrefEntryLastChTime"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxTransPrefPolicyRowStatus"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxTransPrefPolicyRowLastCh"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxTransPrefPolicyDesc"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxTransPrefSubRowStatus"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxTransPrefSubRowLastCh"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxTransPrefSubIsRemote"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxTransPrefSubAppProfNm"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxTransPrefSubRefCount"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxTransPrefEntryRowStatus"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxTransPrefEntryRowLastCh"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxTransPrefEntrySubAddrType"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxTransPrefEntrySubAddr"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxTransPrefEntrySubAddrLen"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxTransPrefEntryNetAddrType"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxTransPrefEntryNetAddr"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxTransPrefEntryNetAddrLen"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxTransPrefEntrySubscriber"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxTransPrefSumSubAddrType"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxTransPrefSumSubAddr"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxTransPrefSumSubAddrLen"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxTransPrefSumNetAddrType"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxTransPrefSumNetAddr"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxTransPrefSumNetAddrLen"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxTransPrefSumUpdateTime"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxTransPrefSumParentSubType"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxTransPrefSumParentSub"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxTransPrefSumAppProfNm"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxTransitIpPolicySubsCount"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxTransitIpPolicyIPv4EntCnt"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxTransPrefPolicySubsCount"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxTransPrefPolicyEntCount"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxTransPrefPolicyIPv4EntCnt"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxBsxTransitGroup = tmnxBsxTransitGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxTransitGroup.setDescription('The group of objects supporting management of BSX Transit subscribers on Alcatel-Lucent SROS series systems.')
tmnxBsxTransitGroupV10v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 63, 2, 14, 2)).setObjects(("TIMETRA-BSX-NG-MIB", "tmnxBsxTransitIpPolicyIPv6PfxLen"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxTransitIpPolicyIPv6EntCnt"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxTransPrefPolicyIPv6EntCnt"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxBsxTransitGroupV10v0 = tmnxBsxTransitGroupV10v0.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxTransitGroupV10v0.setDescription('The group of additional objects introduced in release 10.0 to support management of BSX Transit subscribers on Alcatel-Lucent SROS series systems.')
tmnxBsxTransitSeenIpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 63, 2, 14, 3)).setObjects(("TIMETRA-BSX-NG-MIB", "tmnxBsxTransitIpPolicySeenIp"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxTransitIpPolicyAutoCreate"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxTransitIpPolicySeenIpRad"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAarpInstPeerEPSapPortId"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAarpInstPeerEPSapEncap"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAarpInstPeerEPSapEncType"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAarpInstPeerEPSdpBindId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxBsxTransitSeenIpGroup = tmnxBsxTransitSeenIpGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxTransitSeenIpGroup.setDescription('The group of objects supporting management of AA initiating Transit subscriber creation through the Seen IP feature on Alcatel-Lucent SROS series systems.')
tmnxBsxStatsGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 63, 2, 15))
tmnxBsxStatsGroupV9v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 63, 2, 15, 1)).setObjects(("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaAcctCfgAggrStats"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaAppFilterHCFlows"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaAppFilterFlowsLo"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaAppFilterFlowsHi"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaAppFilterFlowHCOctC"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaAppFilterFlowOctCLo"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaAppFilterFlowOctCHi"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaAcctCfgAdminState"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaAcctCfgMaxThruStats"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatIsaAaCfgLastChTime"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatIsaAaCfgCollStats"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatIsaAaCfgPolicy"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxBsxStatsGroupV9v0 = tmnxBsxStatsGroupV9v0.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStatsGroupV9v0.setDescription('The group of additional objects introduced in release 9.0 to support management of BSX Stats on Alcatel-Lucent SROS series systems.')
tmnxBsxMobileGatewayGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 63, 2, 16))
tmnxBsxMobileGatewayGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 63, 2, 16, 1)).setObjects(("TIMETRA-BSX-NG-MIB", "tmnxBsxAaWap1xLastChangeTime"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAaWap1xRowLastChange"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAaWap1xAdminState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxBsxMobileGatewayGroup = tmnxBsxMobileGatewayGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxMobileGatewayGroup.setDescription('The group of additional objects introduced for Application Assurance support for Mobile Gateway on Alcatel-Lucent SROS systems.')
tmnxBsxHttpRedirGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 63, 2, 17))
tmnxBsxHttpRedirErrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 63, 2, 17, 1)).setObjects(("TIMETRA-BSX-NG-MIB", "tmnxBsxHttpRedirErrLastChTime"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxHttpRedirErrCodeLastCh"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxHttpRedirErrRowStatus"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxHttpRedirErrRowLastCh"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxHttpRedirErrEnabled"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxHttpRedirErrDescription"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxHttpRedirErrTemplateId"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxHttpRedirErrHttpHost"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxHttpRedirErrParticipantId"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxHttpRedirErrCodeRowStatus"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxHttpRedirErrCodeRowLastCh"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxHttpRedirErrorCodeMsgSize"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxHttpRdStatDiscontTime"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxHttpRdStatHCRedir"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxHttpRdStatRedirLo"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxHttpRdStatRedirHi"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxHttpRdStatHCSizeExceeded"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxHttpRdStatSizeExceededLo"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxHttpRdStatSizeExceededHi"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxHttpRdStatHCOutOfResource"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxHttpRdStatOutOfResourceLo"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxHttpRdStatOutOfResourceHi"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxHttpRdStatHCNotRedirFType"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxHttpRdStatNotRedirFTypeLo"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxHttpRdStatNotRedirFTypeHi"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxHttpRdStatHCNotRedir"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxHttpRdStatNotRedirLo"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxHttpRdStatNotRedirHi"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxBsxHttpRedirErrGroup = tmnxBsxHttpRedirErrGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxHttpRedirErrGroup.setDescription('The group of additional objects introduced for Application Assurance support for HTTP Error Redirect on Alcatel-Lucent SROS systems.')
tmnxBsxHttpRedirGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 63, 2, 17, 2)).setObjects(("TIMETRA-BSX-NG-MIB", "tmnxBsxHttpRedirLastCh"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxHttpRedirRowStatus"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxHttpRedirRowLastCh"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxHttpRedirEnabled"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxHttpRedirDescription"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxHttpRedirTemplateId"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxHttpRedirHttpHost"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpHttpRedirName"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpHttpRedirFlowType"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxHttpPcyRdStatDiscontTime"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxHttpPcyRdStatHCRedir"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxHttpPcyRdStatRedirLo"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxHttpPcyRdStatRedirHi"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxHttpPcyRdStatHCOutOfRes"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxHttpPcyRdStatOutOfResLo"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxHttpPcyRdStatOutOfResHi"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxHttpPcyRdStatHCNotRedir"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxHttpPcyRdStatNotRedirLo"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxHttpPcyRdStatNotRedirHi"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxBsxHttpRedirGroup = tmnxBsxHttpRedirGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxHttpRedirGroup.setDescription('The group of additional objects introduced in release 10.0 for the support of HTTP Redirect on Alcatel-Lucent SROS systems.')
tmnxBsxStaticObjGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 63, 2, 18))
tmnxBsxStaticObjGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 63, 2, 18, 1)).setObjects(("TIMETRA-BSX-NG-MIB", "tmnxBsxTListTableLastUpdateT"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxTListAttribTableLUpdateT"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxTListRowLastUpdateT"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxTListDescription"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxTListAttribRowLastUpdateT"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxTListAttribType"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxTListAttribValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxBsxStaticObjGroup = tmnxBsxStaticObjGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxStaticObjGroup.setDescription('The group of additional objects introduced for Application Assurance support for static objects on Alcatel-Lucent SROS systems.')
tmnxBsxRedundancyObjGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 63, 2, 19))
tmnxBsxRedundancyObjGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 63, 2, 19, 1)).setObjects(("TIMETRA-BSX-NG-MIB", "tmnxBsxAarpTableLastChTime"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAarpInstRowStatus"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAarpInstLastCh"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAarpInstDescription"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAarpInstPeerIpType"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAarpInstPeerIpAddr"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAarpInstPriority"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAarpInstAdminState"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAarpInstOperState"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAarpInstState"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAarpInstOperFlags"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAarpInstPeerPriority"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAarpInstPeerState"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAarpInstPeerOperFlags"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAarpInstPeerSubRefType"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAarpCommandControl"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAarpServPointType"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAarpServPoint"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxBsxRedundancyObjGroup = tmnxBsxRedundancyObjGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxRedundancyObjGroup.setDescription('The group of additional objects introduced for Application Assurance support for BSX Redundancy on Alcatel-Lucent SROS systems.')
tmnxBsxHttpEnrichObjGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 63, 2, 20))
tmnxBsxHttpEnrichObjGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 63, 2, 20, 1)).setObjects(("TIMETRA-BSX-NG-MIB", "tmnxBsxHttpEnrichLastChTime"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxHttpEnrichFieldLastChTime"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxHttpEnrichRowStatus"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxHttpEnrichRowLastCh"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxHttpEnrichEnabled"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxHttpEnrichDescription"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxHttpEnrichFieldRowStatus"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxHttpEnrichFieldRowLastCh"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxHttpEnrichFieldHeaderName"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAqpHttpEnrichName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxBsxHttpEnrichObjGroup = tmnxBsxHttpEnrichObjGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxHttpEnrichObjGroup.setDescription('The group of additional objects introduced for Application Assurance support for HTTP header enrichment on Alcatel-Lucent SROS systems.')
tmnxBsxHttpEnrichStatObjGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 63, 2, 20, 2)).setObjects(("TIMETRA-BSX-NG-MIB", "tmnxBsxHttpEnrichStatDiscontTime"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxHttpEnrichHCNumEnriched"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxHttpEnrichNumEnrichedLo"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxHttpEnrichNumEnrichedHi"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxHttpEnrichHCNumNoResource"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxHttpEnrichNumNoResourceLo"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxHttpEnrichNumNoResourceHi"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxHttpEnrichHCMissngSubData"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxHttpEnrichMissngSubDataLo"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxHttpEnrichMissngSubDataHi"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxHttpEnrichHCTplNotEnabled"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxHttpEnrichTplNotEnabledLo"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxHttpEnrichTplNotEnabledHi"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxHttpEnrichHCTrafficChar"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxHttpEnrichTrafficCharLo"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxHttpEnrichTrafficCharHi"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxBsxHttpEnrichStatObjGroup = tmnxBsxHttpEnrichStatObjGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxHttpEnrichStatObjGroup.setDescription('The group of additional objects introduced for Application Assurance support for HTTP header enrichment statistics on Alcatel-Lucent SROS systems.')
tmnxBsxRadiusAccountingGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 63, 2, 21))
tmnxBsxRadiusAccountingObjGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 63, 2, 21, 1)).setObjects(("TIMETRA-BSX-NG-MIB", "tmnxBsxAppChargeGrp"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxAppGrpChargeGrp"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxChargeGrpRowStatus"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxChargeGrpDescription"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxChargeGrpExportId"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxChargeGrpLastChTime"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxChargeGrpRowLastCh"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxPlcyCfgLastChTime"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxPlcyDefChargeGrp"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxPlcyRowLastCh"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaAcctCfgRadiusPlcy"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxStatAaSubCfgExportMethod"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxBsxRadiusAccountingObjGroup = tmnxBsxRadiusAccountingObjGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxRadiusAccountingObjGroup.setDescription('The group of additional objects introduced in Release 10.0 for Application Assurance support for RADIUS Accounting on Alcatel-Lucent SROS systems.')
tmnxBsxRadApObjGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 63, 2, 21, 2)).setObjects(("TIMETRA-BSX-NG-MIB", "tmnxBsxRadApLastChTime"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxRadApServLastChTime"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxRadApRowStatus"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxRadApRowLastChange"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxRadApDescription"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxRadApServerRetry"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxRadApServerTimeout"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxRadApServerVRtrID"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxRadApServerSrcAddrType"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxRadApServerSrcAddr"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxRadApServerAlgorithm"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxRadApIntrmUpdateInterval"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxRadApSignfcntChangeDelta"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxRadApServRowStatus"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxRadApServRowLastChange"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxRadApServAddrType"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxRadApServAddr"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxRadApServSecret"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxRadApServAcctPort"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxRadApServOperState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxBsxRadApObjGroup = tmnxBsxRadApObjGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxRadApObjGroup.setDescription('The group of additional objects introduced in Release 10.0 for Application Assurance support for RADIUS Accounting Policy on Alcatel-Lucent SROS systems.')
tmnxBsxRadApStatObjGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 63, 2, 21, 3)).setObjects(("TIMETRA-BSX-NG-MIB", "tmnxBsxRadApTxRequests"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxRadApRxResponses"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxRadApReqTimeouts"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxRadApSendRetries"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxRadApSendFail"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxRadApServTxRequests"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxRadApServRxResponses"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxRadApServReqTimeouts"), ("TIMETRA-BSX-NG-MIB", "tmnxBsxRadApServReqSendFail"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxBsxRadApStatObjGroup = tmnxBsxRadApStatObjGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxBsxRadApStatObjGroup.setDescription('The group of additional objects introduced in Release 10.0 for Application Assurance support for RADIUS Accounting Policy statistics on Alcatel-Lucent SROS systems.')
mibBuilder.exportSymbols("TIMETRA-BSX-NG-MIB", tmnxBsxCflowdExpStatRecReport=tmnxBsxCflowdExpStatRecReport, tmnxBsxTransIpPlcySubRefCount=tmnxBsxTransIpPlcySubRefCount, tmnxBsxIsaAaGrpDescription=tmnxBsxIsaAaGrpDescription, tmnxBsxComplianceV9v0=tmnxBsxComplianceV9v0, tmnxBsxCustProtDescription=tmnxBsxCustProtDescription, tmnxBsxTransIpPolRadCoAError=tmnxBsxTransIpPolRadCoAError, tmnxBsxAarpInstOperStateChanged=tmnxBsxAarpInstOperStateChanged, tmnxBsxAppFilterServerAddrLen=tmnxBsxAppFilterServerAddrLen, tmnxBsxCflowdExpType=tmnxBsxCflowdExpType, tmnxBsxHttpRedirErrTable=tmnxBsxHttpRedirErrTable, tmnxBsxAqpDescription=tmnxBsxAqpDescription, tmnxBsxStatAaHCPktsAdmFmSb=tmnxBsxStatAaHCPktsAdmFmSb, tmnxBsxGrpStatusPktSzIncPkHi=tmnxBsxGrpStatusPktSzIncPkHi, tmnxBsxTransitIpSumTable=tmnxBsxTransitIpSumTable, tmnxBsxStatAaSubCfgExportMethod=tmnxBsxStatAaSubCfgExportMethod, tmnxBsxNotificationGroupV8v0=tmnxBsxNotificationGroupV8v0, tmnxBsxVersion=tmnxBsxVersion, tmnxBsxStatAaSubSdyLastChTime=tmnxBsxStatAaSubSdyLastChTime, tmnxBsxAqpDrop=tmnxBsxAqpDrop, tmnxBsxStatAaTermFlws=tmnxBsxStatAaTermFlws, tmnxBsxTransitIpPolicyIPv6PfxLen=tmnxBsxTransitIpPolicyIPv6PfxLen, tmnxBsxConformance=tmnxBsxConformance, tmnxBsxGrpStatusOctsPolicyByps=tmnxBsxGrpStatusOctsPolicyByps, tmnxBsxPlcyCfgTable=tmnxBsxPlcyCfgTable, tmnxBsxTransPrefEntrySubscriber=tmnxBsxTransPrefEntrySubscriber, tmnxBsxIsaAaGrpToSubQuePolicy=tmnxBsxIsaAaGrpToSubQuePolicy, tmnxBsxTransPrefEntrySubAddrLen=tmnxBsxTransPrefEntrySubAddrLen, tmnxBsxIsaAaGrpToSubPool=tmnxBsxIsaAaGrpToSubPool, tmnxBsxAaGrpPartHttpMatchAllReq=tmnxBsxAaGrpPartHttpMatchAllReq, tmnxBsxAppFilterExprRowStatus=tmnxBsxAppFilterExprRowStatus, tmnxBsxAqpStatsConflictsHi=tmnxBsxAqpStatsConflictsHi, tmnxBsxHttpEnrichMissngSubDataLo=tmnxBsxHttpEnrichMissngSubDataLo, tmnxBsxPlcyDefChargeGrp=tmnxBsxPlcyDefChargeGrp, tmnxBsxStatAaSubOctsDnyFmSb=tmnxBsxStatAaSubOctsDnyFmSb, tmnxBsxAqpTrafficDir=tmnxBsxAqpTrafficDir, tmnxBsxHttpEnrichFieldRowLastCh=tmnxBsxHttpEnrichFieldRowLastCh, tmnxBsxIsaAaGrpFmSbWaSBufOvld=tmnxBsxIsaAaGrpFmSbWaSBufOvld, tmnxBsxHttpEnrichObjs=tmnxBsxHttpEnrichObjs, tmnxBsxStatAaShrtDurFlws=tmnxBsxStatAaShrtDurFlws, tmnxBsxGrpStatusPktsInspected=tmnxBsxGrpStatusPktsInspected, tmnxBsxHttpEnrichTrafficCharLo=tmnxBsxHttpEnrichTrafficCharLo, tmnxBsxIsaAaGrpCapCostHighThres=tmnxBsxIsaAaGrpCapCostHighThres, TmnxBsxAaSubAsoValDerivedFrom=TmnxBsxAaSubAsoValDerivedFrom, tmnxBsxIsaAaGrpUnassignedSapSubs=tmnxBsxIsaAaGrpUnassignedSapSubs, tmnxBsxGrpStatusPktSzIncOcHi=tmnxBsxGrpStatusPktSzIncOcHi, tmnxBsxHttpRedirErrEnabled=tmnxBsxHttpRedirErrEnabled, tmnxBsxGrpMdaTransitIpAddrs=tmnxBsxGrpMdaTransitIpAddrs, tmnxBsxObsoleteGroupV7v0=tmnxBsxObsoleteGroupV7v0, tmnxBsxStatAaHCFlwsAdmFmSb=tmnxBsxStatAaHCFlwsAdmFmSb, tmnxBsxTransPrefSubRowLastCh=tmnxBsxTransPrefSubRowLastCh, tmnxBsxCflowdPerfEntry=tmnxBsxCflowdPerfEntry, tmnxBsxHttpRedirRowLastCh=tmnxBsxHttpRedirRowLastCh, tmnxBsxHttpPcyRdStatEntry=tmnxBsxHttpPcyRdStatEntry, tmnxBsxRadApStatObjGroup=tmnxBsxRadApStatObjGroup, tmnxBsxChargeGrpRowLastCh=tmnxBsxChargeGrpRowLastCh, TmnxBsxMdaActivityState=TmnxBsxMdaActivityState, TmnxBsxPolicerType=TmnxBsxPolicerType, tmnxBsxAqpHttpRedirFlowType=tmnxBsxAqpHttpRedirFlowType, tmnxBsxStatAaSubTable=tmnxBsxStatAaSubTable, tmnxBsxAaSubscriberType=tmnxBsxAaSubscriberType, tmnxBsxHttpEnrichStatDiscontTime=tmnxBsxHttpEnrichStatDiscontTime, tmnxBsxIsaAaGrpFlowSetupClear=tmnxBsxIsaAaGrpFlowSetupClear, tmnxBsxHttpRdStatOutOfResourceLo=tmnxBsxHttpRdStatOutOfResourceLo, tmnxBsxMdaGroup=tmnxBsxMdaGroup, tmnxBsxRadApServLastChTime=tmnxBsxRadApServLastChTime, tmnxBsxGrpStatusEntry=tmnxBsxGrpStatusEntry, tmnxBsxHttpRedirDescription=tmnxBsxHttpRedirDescription, tmnxBsxStatAaSubSdyLngDurFlws=tmnxBsxStatAaSubSdyLngDurFlws, tmnxBsxTransitIpPolicySubEntry=tmnxBsxTransitIpPolicySubEntry, tmnxBsxStatAaOctsAdmFmSb=tmnxBsxStatAaOctsAdmFmSb, tmnxBsxPolicerGranularity=tmnxBsxPolicerGranularity, tmnxBsxStatAaSubFlwsDnyFmSb=tmnxBsxStatAaSubFlwsDnyFmSb, tmnxBsxGrpStatusEgrQDroInPOcts=tmnxBsxGrpStatusEgrQDroInPOcts, tmnxBsxAaSubSumFlwsAdmFmSb=tmnxBsxAaSubSumFlwsAdmFmSb, tmnxBsxCflowdStatusHCFlowsNoRes=tmnxBsxCflowdStatusHCFlowsNoRes, tmnxBsxAppProfCharRowStatus=tmnxBsxAppProfCharRowStatus, tmnxBsxStatAaSubCfgTable=tmnxBsxStatAaSubCfgTable, tmnxBsxAarpServPointType=tmnxBsxAarpServPointType, tmnxBsxAqpEntry=tmnxBsxAqpEntry, tmnxBsxAqpDstAddress=tmnxBsxAqpDstAddress, tmnxBsxAqpPolicyVersion=tmnxBsxAqpPolicyVersion, tmnxBsxPolicyScalars=tmnxBsxPolicyScalars, tmnxBsxAaSubscriber=tmnxBsxAaSubscriber, tmnxBsxTransitScalars=tmnxBsxTransitScalars, TmnxBsxAaSubPolicerResStatus=TmnxBsxAaSubPolicerResStatus, tmnxBsxGrpStatusHCOctsDiscErrors=tmnxBsxGrpStatusHCOctsDiscErrors, tmnxBsxCompliances=tmnxBsxCompliances, tmnxBsxGrpMdaStatsResourceCount=tmnxBsxGrpMdaStatsResourceCount, tmnxBsxStatAaAcctLastChTime=tmnxBsxStatAaAcctLastChTime, tmnxBsxTransitIpSumParentSubType=tmnxBsxTransitIpSumParentSubType, tmnxBsxCustProtAdminState=tmnxBsxCustProtAdminState, tmnxBsxHttpRedirErrTemplateId=tmnxBsxHttpRedirErrTemplateId, tmnxBsxStatAaSubPktsDnyToSb=tmnxBsxStatAaSubPktsDnyToSb, tmnxBsxStatAaSubHCShrtDurFlws=tmnxBsxStatAaSubHCShrtDurFlws, tmnxBsxIsaAaGrpToSbWaSBufOvld=tmnxBsxIsaAaGrpToSbWaSBufOvld, tmnxBsxAaSubSumMdaMdaNum=tmnxBsxAaSubSumMdaMdaNum, tmnxBsxPolicerTable=tmnxBsxPolicerTable, tmnxBsxHttpRedirGroups=tmnxBsxHttpRedirGroups, tmnxBsxPlcyCfgEntry=tmnxBsxPlcyCfgEntry, tmnxBsxHttpRedirGroup=tmnxBsxHttpRedirGroup, tmnxBsxCflowdStatusPktRateCurr=tmnxBsxCflowdStatusPktRateCurr, tmnxBsxStatAaSubHCPktsAdmToSb=tmnxBsxStatAaSubHCPktsAdmToSb, tmnxBsxObsoleteGroupV10v0=tmnxBsxObsoleteGroupV10v0, tmnxBsxPolicerType=tmnxBsxPolicerType, tmnxBsxRadApTable=tmnxBsxRadApTable, tmnxBsxNgMIBModule=tmnxBsxNgMIBModule, tmnxBsxTransIpPlcyAddrRowLastCh=tmnxBsxTransIpPlcyAddrRowLastCh, tmnxBsxAqpRemarkPriority=tmnxBsxAqpRemarkPriority, tmnxBsxStatAaSubShrtDurFlws=tmnxBsxStatAaSubShrtDurFlws, tmnxBsxGrpStatusHCOctsDisCongMda=tmnxBsxGrpStatusHCOctsDisCongMda, tmnxBsxGrpStatusSubsDivertedAvg=tmnxBsxGrpStatusSubsDivertedAvg, tmnxBsxIsaAaGrpBitRate=tmnxBsxIsaAaGrpBitRate, tmnxBsxCflowdStatusHCRecDropped=tmnxBsxCflowdStatusHCRecDropped, tmnxBsxAqpStatsConflictsLo=tmnxBsxAqpStatsConflictsLo, tmnxBsxAaSubSumDiscontTime=tmnxBsxAaSubSumDiscontTime, tmnxBsxTListRowLastUpdateT=tmnxBsxTListRowLastUpdateT, tmnxBsxGrpStatusIngQHCDroOutPOcts=tmnxBsxGrpStatusIngQHCDroOutPOcts, tmnxBsxHttpEnrichNumNoResourceLo=tmnxBsxHttpEnrichNumNoResourceLo, tmnxBsxStatAaHCOctsDnyFmSb=tmnxBsxStatAaHCOctsDnyFmSb, tmnxBsxGrpMdaTransPrefV6Entr=tmnxBsxGrpMdaTransPrefV6Entr, tmnxBsxGrpStatusIngQEntry=tmnxBsxGrpStatusIngQEntry, tmnxBsxAppProfCharPolicyVersion=tmnxBsxAppProfCharPolicyVersion, tmnxBsxCflowdVolRate=tmnxBsxCflowdVolRate, tmnxBsxAqpDscp=tmnxBsxAqpDscp, tmnxBsxAarpServPoint=tmnxBsxAarpServPoint, tmnxBsxAppCfgEntry=tmnxBsxAppCfgEntry, tmnxBsxAsoValTable=tmnxBsxAsoValTable, tmnxBsxAqpStatsFlows=tmnxBsxAqpStatsFlows, tmnxBsxTransPrefSubAppProfNm=tmnxBsxTransPrefSubAppProfNm, tmnxBsxTransPrefSubLastChTime=tmnxBsxTransPrefSubLastChTime, tmnxBsxAsoValPolicyVersion=tmnxBsxAsoValPolicyVersion, tmnxBsxRedundancyObjGroup=tmnxBsxRedundancyObjGroup, tmnxBsxRadApStatTable=tmnxBsxRadApStatTable, tmnxBsxNotificationGroups=tmnxBsxNotificationGroups, tmnxBsxIsaAaGrpTransPrefV6RmEntr=tmnxBsxIsaAaGrpTransPrefV6RmEntr, tmnxBsxHttpEnrichStatObjGroup=tmnxBsxHttpEnrichStatObjGroup, tmnxBsxRadiusAccountingGroups=tmnxBsxRadiusAccountingGroups, tmnxBsxCflowdStatusRecDropped=tmnxBsxCflowdStatusRecDropped, tmnxBsxAaSubSumHCPktsAdmFmSb=tmnxBsxAaSubSumHCPktsAdmFmSb, tmnxBsxRedundancyObjScalars=tmnxBsxRedundancyObjScalars, tmnxBsxCompliance=tmnxBsxCompliance, tmnxBsxIsaAaGrpToSubWaSBfLoWmk=tmnxBsxIsaAaGrpToSubWaSBfLoWmk, tmnxBsxBitRateHighWatermark=tmnxBsxBitRateHighWatermark, tmnxBsxCustProtExprOffset=tmnxBsxCustProtExprOffset, tmnxBsxGrpStatusOctsInspected=tmnxBsxGrpStatusOctsInspected, tmnxBsxAppFilterServerPortLow=tmnxBsxAppFilterServerPortLow, tmnxBsxAqpStatsFlowsHi=tmnxBsxAqpStatsFlowsHi, tmnxBsxAqpHttpRedirName=tmnxBsxAqpHttpRedirName, tmnxBsxStatAaSubHCMedDurFlws=tmnxBsxStatAaSubHCMedDurFlws, tmnxBsxOvrdAaSubCharValName=tmnxBsxOvrdAaSubCharValName, tmnxBsxTransitIpPolicyIPv4EntCnt=tmnxBsxTransitIpPolicyIPv4EntCnt, tmnxBsxAqpStatsConflicts=tmnxBsxAqpStatsConflicts, tmnxBsxMdaGroupMG3v0=tmnxBsxMdaGroupMG3v0, tmnxBsxHttpRedirLastCh=tmnxBsxHttpRedirLastCh, tmnxBsxAppFilterAdminState=tmnxBsxAppFilterAdminState, tmnxBsxTransPrefPolicyEntry=tmnxBsxTransPrefPolicyEntry, tmnxBsxHttpRdStatRedirLo=tmnxBsxHttpRdStatRedirLo, tmnxBsxCustProtExprTable=tmnxBsxCustProtExprTable, tmnxBsxCustProtExprEntry=tmnxBsxCustProtExprEntry, tmnxBsxAppFilterProtocol=tmnxBsxAppFilterProtocol, tmnxBsxStatAaAcctCfgAggrStats=tmnxBsxStatAaAcctCfgAggrStats, tmnxBsxStatAaSubPktsAdmToSb=tmnxBsxStatAaSubPktsAdmToSb, tmnxBsxTransIpPolAaSubDeleted=tmnxBsxTransIpPolAaSubDeleted, tmnxBsxObsoleteGroups=tmnxBsxObsoleteGroups, tmnxBsxRadApScalars=tmnxBsxRadApScalars, tmnxBsxMobileGatewayGroup=tmnxBsxMobileGatewayGroup, tmnxBsxAaSubSumTermFlws=tmnxBsxAaSubSumTermFlws, tmnxBsxFlowSetupLowWatermark=tmnxBsxFlowSetupLowWatermark, tmnxBsxGrpMdaActivityState=tmnxBsxGrpMdaActivityState, tmnxBsxCflowdExpStatHCFlowsNoRes=tmnxBsxCflowdExpStatHCFlowsNoRes, tmnxBsxTransitIpPersistenceWarn=tmnxBsxTransitIpPersistenceWarn, tmnxBsxAaSubSumHCFlwsDnyToSb=tmnxBsxAaSubSumHCFlwsDnyToSb, TmnxBsxPolicerAction=TmnxBsxPolicerAction, tmnxBsxTransitGroupV10v0=tmnxBsxTransitGroupV10v0, TmnxBsxAarpCommand=TmnxBsxAarpCommand, tmnxBsxAaSubEntry=tmnxBsxAaSubEntry, tmnxBsxAaSubSumHCPktsDnyToSb=tmnxBsxAaSubSumHCPktsDnyToSb, tmnxBsxAppGrpChargeGrp=tmnxBsxAppGrpChargeGrp, tmnxBsxCflowdStatusHCRecReported=tmnxBsxCflowdStatusHCRecReported, tmnxBsxFlowFullLowWatermark=tmnxBsxFlowFullLowWatermark, tmnxBsxGrpStatusOctsOut=tmnxBsxGrpStatusOctsOut, tmnxBsxAsoValEntry=tmnxBsxAsoValEntry, tmnxBsxStatAaFlwsDnyFmSb=tmnxBsxStatAaFlwsDnyFmSb, tmnxBsxGrpStatusHCPktsToMda=tmnxBsxGrpStatusHCPktsToMda, tmnxBsxTransitIpPolicySeenIpRad=tmnxBsxTransitIpPolicySeenIpRad, tmnxBsxNotifyObjsGroupV7v0=tmnxBsxNotifyObjsGroupV7v0, tmnxBsxAarpInstPeerEPSdpBindId=tmnxBsxAarpInstPeerEPSdpBindId, tmnxBsxCflowdCollStatEntry=tmnxBsxCflowdCollStatEntry, tmnxBsxGrpStatusPacketRateAvg=tmnxBsxGrpStatusPacketRateAvg, tmnxBsxNotifyAaGrpPartIndex=tmnxBsxNotifyAaGrpPartIndex, tmnxBsxTransitIpPolicyDefAppProf=tmnxBsxTransitIpPolicyDefAppProf, tmnxBsxTransitIpSumUpdateTime=tmnxBsxTransitIpSumUpdateTime, tmnxBsxHttpPcyRdStatNotRedirHi=tmnxBsxHttpPcyRdStatNotRedirHi, tmnxBsxTransIpPolDhcpDelWarning=tmnxBsxTransIpPolDhcpDelWarning, tmnxBsxAppProfCapacityCost=tmnxBsxAppProfCapacityCost, tmnxBsxAaSubSumHCOctsAdmFmSb=tmnxBsxAaSubSumHCOctsAdmFmSb, tmnxBsxAppFilterTable=tmnxBsxAppFilterTable, tmnxBsxStatAaSubHCOctsAdmToSb=tmnxBsxStatAaSubHCOctsAdmToSb, tmnxBsxStatIsaAaCfgType=tmnxBsxStatIsaAaCfgType, tmnxBsxTransitIpPolicyRowStatus=tmnxBsxTransitIpPolicyRowStatus, tmnxBsxNotifyActiveMda=tmnxBsxNotifyActiveMda, tmnxBsxGrpStatusHCFlows=tmnxBsxGrpStatusHCFlows, tmnxBsxCflowdCollOperState=tmnxBsxCflowdCollOperState, tmnxBsxCflowdPerfExpRowStatus=tmnxBsxCflowdPerfExpRowStatus, tmnxBsxCflowdExpStatRecDropped=tmnxBsxCflowdExpStatRecDropped, tmnxBsxHttpEnrichRowStatus=tmnxBsxHttpEnrichRowStatus, tmnxBsxGrpStatusPktsOutPChipEr=tmnxBsxGrpStatusPktsOutPChipEr, tmnxBsxOvrdObjs=tmnxBsxOvrdObjs, tmnxBsxCustProtExprRowLastChange=tmnxBsxCustProtExprRowLastChange, tmnxBsxStatAaHCFlwsDnyToSb=tmnxBsxStatAaHCFlwsDnyToSb, tmnxBsxHttpRedirErrRowStatus=tmnxBsxHttpRedirErrRowStatus, TmnxBsxExprSubStringType=TmnxBsxExprSubStringType, tmnxBsxGrpStatusEgrQDroOutPPkts=tmnxBsxGrpStatusEgrQDroOutPPkts, tmnxBsxAaGrpPartXOnlineHost=tmnxBsxAaGrpPartXOnlineHost, tmnxBsxStatAaSubDiscontTime=tmnxBsxStatAaSubDiscontTime, tmnxBsxStatAaSubSdyHCMedDurFlws=tmnxBsxStatAaSubSdyHCMedDurFlws, tmnxBsxCflowdPerfExpRowLastChnge=tmnxBsxCflowdPerfExpRowLastChnge, tmnxBsxCflowdScalars=tmnxBsxCflowdScalars, tmnxBsxHttpRedirTable=tmnxBsxHttpRedirTable, TmnxBsxTransitSubOrigin=TmnxBsxTransitSubOrigin, tmnxBsxAppPolicyVersion=tmnxBsxAppPolicyVersion, tmnxBsxNotificationGroupV7v0=tmnxBsxNotificationGroupV7v0, tmnxBsxAsoValValName=tmnxBsxAsoValValName, tmnxBsxHttpEnrichNumNoResourceHi=tmnxBsxHttpEnrichNumNoResourceHi, tmnxBsxAaSubPolResExEntry=tmnxBsxAaSubPolResExEntry, tmnxBsxHttpEnrichHCTrafficChar=tmnxBsxHttpEnrichHCTrafficChar, tmnxBsxRadApServerAlgorithm=tmnxBsxRadApServerAlgorithm, tmnxBsxTransPrefSumUpdateTime=tmnxBsxTransPrefSumUpdateTime, tmnxBsxAqpAaSubscriber=tmnxBsxAqpAaSubscriber, tmnxBsxCustProtExprRowStatus=tmnxBsxCustProtExprRowStatus, TmnxBsxIsaAaGroupIndexOrZero=TmnxBsxIsaAaGroupIndexOrZero, tmnxBsxAarpInstOperFlags=tmnxBsxAarpInstOperFlags, tmnxBsxTransPrefEntry=tmnxBsxTransPrefEntry, tmnxBsxHttpRedirErrCode=tmnxBsxHttpRedirErrCode, tmnxBsxCustProtIpProtocolNum=tmnxBsxCustProtIpProtocolNum, tmnxBsxChargeGrpCfgEntry=tmnxBsxChargeGrpCfgEntry, tmnxBsxRadApRowLastChange=tmnxBsxRadApRowLastChange, tmnxBsxRadApServRowLastChange=tmnxBsxRadApServRowLastChange, tmnxBsxCflowdGroups=tmnxBsxCflowdGroups, tmnxBsxCflowdGroup=tmnxBsxCflowdGroup, tmnxBsxNotifyAaSubscriberName=tmnxBsxNotifyAaSubscriberName, tmnxBsxCardSlotNum=tmnxBsxCardSlotNum, TmnxBsxPolicyVersion=TmnxBsxPolicyVersion, tmnxBsxHttpEnrichHCNumNoResource=tmnxBsxHttpEnrichHCNumNoResource, TmnxBsxFailToMode=TmnxBsxFailToMode, tmnxBsxCustProtEntry=tmnxBsxCustProtEntry, tmnxBsxCflowdExpStatFlowsNoRes=tmnxBsxCflowdExpStatFlowsNoRes, tmnxBsxGrpStatusPktsIn=tmnxBsxGrpStatusPktsIn, tmnxBsxProtName=tmnxBsxProtName, tmnxBsxAqpRowStatus=tmnxBsxAqpRowStatus, tmnxBsxTransitIpSumAppProfNm=tmnxBsxTransitIpSumAppProfNm, tmnxBsxHttpPcyRdStatOutOfResHi=tmnxBsxHttpPcyRdStatOutOfResHi, tmnxBsxStatAaAppFilterFlowsLo=tmnxBsxStatAaAppFilterFlowsLo, tmnxBsxAarpTableLastChTime=tmnxBsxAarpTableLastChTime)
mibBuilder.exportSymbols("TIMETRA-BSX-NG-MIB", tmnxBsxAqpBwLimitPolicer=tmnxBsxAqpBwLimitPolicer, tmnxBsxTransitIpPolicyLastChTime=tmnxBsxTransitIpPolicyLastChTime, tmnxBsxHttpRedirTemplateId=tmnxBsxHttpRedirTemplateId, tmnxBsxStatAaHCShrtDurFlws=tmnxBsxStatAaHCShrtDurFlws, tmnxBsxObjs=tmnxBsxObjs, tmnxBsxProtParentName=tmnxBsxProtParentName, tmnxBsxAaSubSumHCFlwsDnyFmSb=tmnxBsxAaSubSumHCFlwsDnyFmSb, tmnxBsxStatAaAppFilterTable=tmnxBsxStatAaAppFilterTable, tmnxBsxGrpStatusIngQHCFwdOutPOcts=tmnxBsxGrpStatusIngQHCFwdOutPOcts, tmnxBsxGrpStatusTrafficRate=tmnxBsxGrpStatusTrafficRate, tmnxBsxStatAaAppFilterFlowOctCLo=tmnxBsxStatAaAppFilterFlowOctCLo, TmnxBsxTListAttribValue=TmnxBsxTListAttribValue, tmnxBsxHttpPcyRdStatHCNotRedir=tmnxBsxHttpPcyRdStatHCNotRedir, tmnxBsxStaticObjScalars=tmnxBsxStaticObjScalars, tmnxBsxCflowdGroupV9v0=tmnxBsxCflowdGroupV9v0, tmnxBsxStatAaSubSdyHCOctsDnyFmSb=tmnxBsxStatAaSubSdyHCOctsDnyFmSb, tmnxBsxStatAaActFlwsFmSb=tmnxBsxStatAaActFlwsFmSb, tmnxBsxPolicerEntry=tmnxBsxPolicerEntry, tmnxBsxHttpRdStatHCRedir=tmnxBsxHttpRdStatHCRedir, tmnxBsxBitRateLowWatermark=tmnxBsxBitRateLowWatermark, tmnxBsxHttpRdStatNotRedirFTypeHi=tmnxBsxHttpRdStatNotRedirFTypeHi, tmnxBsxAppProfRowStatus=tmnxBsxAppProfRowStatus, tmnxBsxAppFilterDescription=tmnxBsxAppFilterDescription, tmnxBsxStatsGroups=tmnxBsxStatsGroups, tmnxBsxTransPrefPolicyTable=tmnxBsxTransPrefPolicyTable, tmnxBsxAaSubSumPktsAdmFmSb=tmnxBsxAaSubSumPktsAdmFmSb, tmnxBsxAaSubSumOctsDnyToSb=tmnxBsxAaSubSumOctsDnyToSb, tmnxBsxGrpStatusEgrQEntry=tmnxBsxGrpStatusEgrQEntry, tmnxBsxAaSubSumHCOctsDnyFmSb=tmnxBsxAaSubSumHCOctsDnyFmSb, tmnxBsxAqpSapSubscrPortId=tmnxBsxAqpSapSubscrPortId, tmnxBsxAarpInstRowStatus=tmnxBsxAarpInstRowStatus, tmnxBsxAppDescription=tmnxBsxAppDescription, tmnxBsxStatAaSubHCFlwsAdmToSb=tmnxBsxStatAaSubHCFlwsAdmToSb, tmnxBsxHttpPcyRdStatNotRedirLo=tmnxBsxHttpPcyRdStatNotRedirLo, tmnxBsxGrpMdaTransPrefV6RemEntr=tmnxBsxGrpMdaTransPrefV6RemEntr, tmnxBsxGrpStatusIngQTable=tmnxBsxGrpStatusIngQTable, tmnxBsxGrpStatusOctsDisCongMda=tmnxBsxGrpStatusOctsDisCongMda, tmnxBsxStaticDataObjs=tmnxBsxStaticDataObjs, tmnxBsxTransitIpPolicyAddrEntry=tmnxBsxTransitIpPolicyAddrEntry, tmnxBsxStatAaSubSdyShrtDurFlws=tmnxBsxStatAaSubSdyShrtDurFlws, tmnxBsxPolicyGroupV10v0=tmnxBsxPolicyGroupV10v0, tmnxBsxPlcyPolicyVersion=tmnxBsxPlcyPolicyVersion, tmnxBsxHttpEnrichStatTable=tmnxBsxHttpEnrichStatTable, tmnxBsxGrpStatusInQDirection=tmnxBsxGrpStatusInQDirection, tmnxBsxGrpStatusHCPktSzDecOc=tmnxBsxGrpStatusHCPktSzDecOc, tmnxBsxMdaGroupV10v0=tmnxBsxMdaGroupV10v0, tmnxBsxAqpFlowCountPolicer=tmnxBsxAqpFlowCountPolicer, tmnxBsxStatAaSubSdyFlwsDnyFmSb=tmnxBsxStatAaSubSdyFlwsDnyFmSb, tmnxBsxAarpInstOperState=tmnxBsxAarpInstOperState, tmnxBsxStatAaPktsAdmToSb=tmnxBsxStatAaPktsAdmToSb, tmnxBsxAaSubSumHCTermFlws=tmnxBsxAaSubSumHCTermFlws, tmnxBsxStatAaSubActFlwsToSb=tmnxBsxStatAaSubActFlwsToSb, tmnxBsxGrpStatusHCPktsPolicyByps=tmnxBsxGrpStatusHCPktsPolicyByps, tmnxBsxAaSubSumMedDurFlws=tmnxBsxAaSubSumMedDurFlws, tmnxBsxStatAaHCPktsDnyToSb=tmnxBsxStatAaHCPktsDnyToSb, tmnxBsxOvrdAaSubCharEntry=tmnxBsxOvrdAaSubCharEntry, tmnxBsxRadApServSecret=tmnxBsxRadApServSecret, TmnxBsxAqpHttpRedirFlowType=TmnxBsxAqpHttpRedirFlowType, tmnxBsxAsoValCharName=tmnxBsxAsoValCharName, tmnxBsxGrpStatusFlowResInUse=tmnxBsxGrpStatusFlowResInUse, tmnxBsxAaSubPolicerTable=tmnxBsxAaSubPolicerTable, tmnxBsxAppFilterEntryId=tmnxBsxAppFilterEntryId, tmnxBsxTransPrefEntryRowStatus=tmnxBsxTransPrefEntryRowStatus, tmnxBsxRadApObjs=tmnxBsxRadApObjs, tmnxBsxTListAttribRowLastUpdateT=tmnxBsxTListAttribRowLastUpdateT, tmnxBsxGrpStatusHCOctsInspected=tmnxBsxGrpStatusHCOctsInspected, tmnxBsxCflowdPerfExpRateNum=tmnxBsxCflowdPerfExpRateNum, tmnxBsxTransitIpPolicyRadius=tmnxBsxTransitIpPolicyRadius, tmnxBsxOvrdAaSubCharTable=tmnxBsxOvrdAaSubCharTable, TmnxBsxCflowdPerfMeasType=TmnxBsxCflowdPerfMeasType, TmnxBsxActionStatus=TmnxBsxActionStatus, tmnxBsxGrpStatusFlowsCurrent=tmnxBsxGrpStatusFlowsCurrent, tmnxBsxAqpStatsFlowsLo=tmnxBsxAqpStatsFlowsLo, tmnxBsxIsaAaGrpIngressResvCbs=tmnxBsxIsaAaGrpIngressResvCbs, tmnxBsxStatAaSubSdyFlwsAdmToSb=tmnxBsxStatAaSubSdyFlwsAdmToSb, tmnxBsxCflowdCollStatDiscontTime=tmnxBsxCflowdCollStatDiscontTime, tmnxBsxMdaGroupV8v0=tmnxBsxMdaGroupV8v0, tmnxBsxMdaObjs=tmnxBsxMdaObjs, tmnxBsxCflowdAdminState=tmnxBsxCflowdAdminState, tmnxBsxTransitIpPolicySubsCount=tmnxBsxTransitIpPolicySubsCount, tmnxBsxGrpStatusPacketRate=tmnxBsxGrpStatusPacketRate, tmnxBsxChargeGrpLastChTime=tmnxBsxChargeGrpLastChTime, tmnxBsxAdminCtrlEntry=tmnxBsxAdminCtrlEntry, tmnxBsxAaSubAppProfName=tmnxBsxAaSubAppProfName, tmnxBsxStatAaAcctCfgCollStats=tmnxBsxStatAaAcctCfgCollStats, tmnxBsxAaSubSumTermFlwDur=tmnxBsxAaSubSumTermFlwDur, TmnxBsxBurstSize=TmnxBsxBurstSize, tmnxBsxOvrdScalars=tmnxBsxOvrdScalars, tmnxBsxIsaAaGrpLastChangeTime=tmnxBsxIsaAaGrpLastChangeTime, tmnxBsxOvrdAaSubTable=tmnxBsxOvrdAaSubTable, tmnxBsxTransitIpSumParentSub=tmnxBsxTransitIpSumParentSub, tmnxBsxRadApServStatEntry=tmnxBsxRadApServStatEntry, tmnxBsxGrpStatusHCPktsInMda=tmnxBsxGrpStatusHCPktsInMda, tmnxBsxAqpDstAddressOp=tmnxBsxAqpDstAddressOp, tmnxBsxTransitIpPolicySubscriber=tmnxBsxTransitIpPolicySubscriber, tmnxBsxNotificationGroupV9v0=tmnxBsxNotificationGroupV9v0, tmnxBsxHttpEnrichEntry=tmnxBsxHttpEnrichEntry, tmnxBsxIsaAaGrpLoadBalanceStatus=tmnxBsxIsaAaGrpLoadBalanceStatus, tmnxBsxIsaAaGrpFcTable=tmnxBsxIsaAaGrpFcTable, tmnxBsxAaSubPolResExStatus=tmnxBsxAaSubPolResExStatus, tmnxBsxGrpStatusHCPktsDiscPolicy=tmnxBsxGrpStatusHCPktsDiscPolicy, tmnxBsxAqpCharRowStatus=tmnxBsxAqpCharRowStatus, tmnxBsxStatAaSubSdyPktsAdmFmSb=tmnxBsxStatAaSubSdyPktsAdmFmSb, tmnxBsxIsaAaSubLoadBalance=tmnxBsxIsaAaSubLoadBalance, tmnxBsxAaSubSumHCOctsAdmToSb=tmnxBsxAaSubSumHCOctsAdmToSb, tmnxBsxPolicerMBS=tmnxBsxPolicerMBS, tmnxBsxStatAaOctsDnyToSb=tmnxBsxStatAaOctsDnyToSb, tmnxBsxStatAaAppFilterFlowOctCHi=tmnxBsxStatAaAppFilterFlowOctCHi, tmnxBsxStatAaPktsAdmFmSb=tmnxBsxStatAaPktsAdmFmSb, tmnxBsxTransPrefPolicySubsCount=tmnxBsxTransPrefPolicySubsCount, tmnxBsxTransPrefSubIsRemote=tmnxBsxTransPrefSubIsRemote, tmnxBsxStatsAccounting=tmnxBsxStatsAccounting, tmnxBsxCflowdCollLastChangeTime=tmnxBsxCflowdCollLastChangeTime, tmnxBsxHttpRedirRowStatus=tmnxBsxHttpRedirRowStatus, tmnxBsxStatAaOctsAdmToSb=tmnxBsxStatAaOctsAdmToSb, tmnxBsxTransPrefEntryNetAddrLen=tmnxBsxTransPrefEntryNetAddrLen, tmnxBsxGrpStatusIngQHCFwdOutPPkts=tmnxBsxGrpStatusIngQHCFwdOutPPkts, tmnxBsxIsaAaGrpAaSubScale=tmnxBsxIsaAaGrpAaSubScale, tmnxBsxObsoleteGroupsV9v0=tmnxBsxObsoleteGroupsV9v0, tmnxBsxAqpAaSubscriberOp=tmnxBsxAqpAaSubscriberOp, tmnxBsxAsoPolicyVersion=tmnxBsxAsoPolicyVersion, tmnxBsxCflowdLastChangeTime=tmnxBsxCflowdLastChangeTime, tmnxBsxGrpStatusPktSzDecPkHi=tmnxBsxGrpStatusPktSzDecPkHi, tmnxBsxCflowdCollStatHCRecSent=tmnxBsxCflowdCollStatHCRecSent, tmnxBsxTransPrefSumNetAddrLen=tmnxBsxTransPrefSumNetAddrLen, tmnxBsxAaSubSumTable=tmnxBsxAaSubSumTable, tmnxBsxRadApServAddr=tmnxBsxRadApServAddr, TmnxBsxAarpInstState=TmnxBsxAarpInstState, tmnxBsxGrpStatusHCPktsDiscErrors=tmnxBsxGrpStatusHCPktsDiscErrors, tmnxBsxGrpStatusFlowSetupRateAvg=tmnxBsxGrpStatusFlowSetupRateAvg, tmnxBsxTListAttribSet=tmnxBsxTListAttribSet, tmnxBsxGrpStatusOctsToMda=tmnxBsxGrpStatusOctsToMda, tmnxBsxGrpStatusHCOctsToMda=tmnxBsxGrpStatusHCOctsToMda, TmnxBsxFirstPacketPolicy=TmnxBsxFirstPacketPolicy, tmnxBsxTransitIpPolicyRadAuthPlc=tmnxBsxTransitIpPolicyRadAuthPlc, tmnxBsxHttpRedirErrCodeTable=tmnxBsxHttpRedirErrCodeTable, tmnxBsxIsaAaGrpOperState=tmnxBsxIsaAaGrpOperState, tmnxBsxRadApNotificationGroup=tmnxBsxRadApNotificationGroup, tmnxBsxRadApServTable=tmnxBsxRadApServTable, tmnxBsxTListAttribEntry=tmnxBsxTListAttribEntry, tmnxBsxRadApSendFail=tmnxBsxRadApSendFail, tmnxBsxIsaAaGrpFcLastChangeTime=tmnxBsxIsaAaGrpFcLastChangeTime, tmnxBsxAaSubSumHCTermFlwDur=tmnxBsxAaSubSumHCTermFlwDur, tmnxBsxCflowdRowLastChange=tmnxBsxCflowdRowLastChange, tmnxBsxStatAaSubSdyOctsDnyFmSb=tmnxBsxStatAaSubSdyOctsDnyFmSb, tmnxBsxStatAaSubOctsAdmFmSb=tmnxBsxStatAaSubOctsAdmFmSb, tmnxBsxTransIpPlcySubRowStatus=tmnxBsxTransIpPlcySubRowStatus, tmnxBsxGrpMdaRowLastChange=tmnxBsxGrpMdaRowLastChange, tmnxBsxIsaAaGrpCapCostThresClear=tmnxBsxIsaAaGrpCapCostThresClear, tmnxBsxCflowdStatusHCPktsSent=tmnxBsxCflowdStatusHCPktsSent, tmnxBsxAppFilterServerPortOp=tmnxBsxAppFilterServerPortOp, tmnxBsxTListAttribTable=tmnxBsxTListAttribTable, tmnxBsxRadApServIndex=tmnxBsxRadApServIndex, tmnxBsxPolicerRowStatus=tmnxBsxPolicerRowStatus, tmnxBsxGrpStatusHCOctsOut=tmnxBsxGrpStatusHCOctsOut, tmnxBsxAppCfgTable=tmnxBsxAppCfgTable, tmnxBsxGrpStatusPktsPolicyByps=tmnxBsxGrpStatusPktsPolicyByps, tmnxBsxTransitIpPolicySubTable=tmnxBsxTransitIpPolicySubTable, tmnxBsxGrpMdaTransitIpSubs=tmnxBsxGrpMdaTransitIpSubs, tmnxBsxRadApIntrmUpdateInterval=tmnxBsxRadApIntrmUpdateInterval, tmnxBsxTransIpPolDhcpAddWarning=tmnxBsxTransIpPolDhcpAddWarning, tmnxBsxStatAaAcctCfgRadiusPlcy=tmnxBsxStatAaAcctCfgRadiusPlcy, tmnxBsxAaSubSumFlwsDnyFmSb=tmnxBsxAaSubSumFlwsDnyFmSb, tmnxBsxIsaAaGrpFailureV2=tmnxBsxIsaAaGrpFailureV2, tmnxBsxGrpStatusPktsDiscCongIn=tmnxBsxGrpStatusPktsDiscCongIn, tmnxBsxGrpStatusIngQDiscontTime=tmnxBsxGrpStatusIngQDiscontTime, tmnxBsxGrpStatusSubsDiverted=tmnxBsxGrpStatusSubsDiverted, tmnxBsxRadApServerTimeout=tmnxBsxRadApServerTimeout, tmnxBsxHttpEnrichTplNotEnabledLo=tmnxBsxHttpEnrichTplNotEnabledLo, tmnxBsxStatAaSubFlwsDnyToSb=tmnxBsxStatAaSubFlwsDnyToSb, TmnxBsxCflowdExpType=TmnxBsxCflowdExpType, tmnxBsxGrpStatusDiscontTime=tmnxBsxGrpStatusDiscontTime, tmnxBsxIsaLoadBalUnSubTable=tmnxBsxIsaLoadBalUnSubTable, tmnxBsxCflowdTemplateRetransmit=tmnxBsxCflowdTemplateRetransmit, tmnxBsxHttpEnrichObjGroups=tmnxBsxHttpEnrichObjGroups, tmnxBsxAqpCharTable=tmnxBsxAqpCharTable, tmnxBsxStatAaSubSdyOctsAdmFmSb=tmnxBsxStatAaSubSdyOctsAdmFmSb, tmnxBsxAaGrpPartLastChangeTime=tmnxBsxAaGrpPartLastChangeTime, tmnxBsxHttpRedirErrGroup=tmnxBsxHttpRedirErrGroup, tmnxBsxRadApServOperState=tmnxBsxRadApServOperState, tmnxBsxAppGrpRowStatus=tmnxBsxAppGrpRowStatus, tmnxBsxAarpServPointEntry=tmnxBsxAarpServPointEntry, tmnxBsxStatsGroupV9v0=tmnxBsxStatsGroupV9v0, tmnxBsxStatAaSubTermFlwDur=tmnxBsxStatAaSubTermFlwDur, tmnxBsxGrpStatusHCOctsInMda=tmnxBsxGrpStatusHCOctsInMda, tmnxBsxStatAaSubSdyCfgEntry=tmnxBsxStatAaSubSdyCfgEntry, tmnxBsxRadiusAccountingObjGroup=tmnxBsxRadiusAccountingObjGroup, tmnxBsxGrpStatusOctsIn=tmnxBsxGrpStatusOctsIn, tmnxBsxAppProfCharTable=tmnxBsxAppProfCharTable, tmnxBsxStatAaSubSdyHCShrtDurFlws=tmnxBsxStatAaSubSdyHCShrtDurFlws, tmnxBsxGrpMdaEsmSubscribers=tmnxBsxGrpMdaEsmSubscribers, tmnxBsxCustProtRowStatus=tmnxBsxCustProtRowStatus, tmnxBsxAaSubAsoValEntry=tmnxBsxAaSubAsoValEntry, tmnxBsxCflowdStatusRecReported=tmnxBsxCflowdStatusRecReported, tmnxBsxStatAaSubLastChTime=tmnxBsxStatAaSubLastChTime, tmnxBsxHttpPcyRdStatRedirHi=tmnxBsxHttpPcyRdStatRedirHi, TmnxBsxProtocolDirection=TmnxBsxProtocolDirection, tmnxBsxAppStorageType=tmnxBsxAppStorageType, tmnxBsxStatAaType=tmnxBsxStatAaType, tmnxBsxAarpInstTable=tmnxBsxAarpInstTable, TmnxBsxAaSubStatsInterval=TmnxBsxAaSubStatsInterval, tmnxBsxAqpSubscriber=tmnxBsxAqpSubscriber, tmnxBsxTransitIpPolicyAddrTable=tmnxBsxTransitIpPolicyAddrTable, tmnxBsxStatAaSubSdyHCPktsDnyFmSb=tmnxBsxStatAaSubSdyHCPktsDnyFmSb, tmnxBsxIsaAaGrpFromSubSchPolicy=tmnxBsxIsaAaGrpFromSubSchPolicy, tmnxBsxCflowdStatusActFlowsCurr=tmnxBsxCflowdStatusActFlowsCurr, tmnxBsxAqpDstPortOp=tmnxBsxAqpDstPortOp, tmnxBsxIsaAaGrpRowLastChange=tmnxBsxIsaAaGrpRowLastChange, tmnxBsxCflowdCollAddress=tmnxBsxCflowdCollAddress, tmnxBsxHttpRdStatHCSizeExceeded=tmnxBsxHttpRdStatHCSizeExceeded, tmnxBsxHttpRdStatNotRedirFTypeLo=tmnxBsxHttpRdStatNotRedirFTypeLo, tmnxBsxStatAaSubEntry=tmnxBsxStatAaSubEntry, tmnxBsxRadApTxRequests=tmnxBsxRadApTxRequests, tmnxBsxCustProtPolicyVersion=tmnxBsxCustProtPolicyVersion, tmnxBsxCflowdGroupV10v0=tmnxBsxCflowdGroupV10v0, tmnxBsxTransitIpPolicyDesc=tmnxBsxTransitIpPolicyDesc, tmnxBsxIsaAaGrpBitRateClear=tmnxBsxIsaAaGrpBitRateClear, tmnxBsxIsaAaGrpFmSbWaSBufOvldClr=tmnxBsxIsaAaGrpFmSbWaSBufOvldClr, tmnxBsxStatAaAcctCfgTable=tmnxBsxStatAaAcctCfgTable, tmnxBsxGrpMdaTable=tmnxBsxGrpMdaTable, tmnxBsxTransPrefEntryRowLastCh=tmnxBsxTransPrefEntryRowLastCh, tmnxBsxGrpStatusEgrQDroInPPkts=tmnxBsxGrpStatusEgrQDroInPPkts, tmnxBsxAaSubSumHCPktsAdmToSb=tmnxBsxAaSubSumHCPktsAdmToSb, tmnxBsxNotificationGroupV10v0=tmnxBsxNotificationGroupV10v0, tmnxBsxStatAaSubHCFlwsDnyFmSb=tmnxBsxStatAaSubHCFlwsDnyFmSb, tmnxBsxCflowdPerfLastChangeTime=tmnxBsxCflowdPerfLastChangeTime, tmnxBsxIsaLoadBalUnSubTransit=tmnxBsxIsaLoadBalUnSubTransit, tmnxBsxAqpDstAddressType=tmnxBsxAqpDstAddressType, tmnxBsxHttpEnrichLastChTime=tmnxBsxHttpEnrichLastChTime, tmnxBsxAaSubSumActFlwsFmSb=tmnxBsxAaSubSumActFlwsFmSb, tmnxBsxStatAaMedDurFlws=tmnxBsxStatAaMedDurFlws, tmnxBsxIsaAaGroupIndex=tmnxBsxIsaAaGroupIndex, tmnxBsxAppFilterRowStatus=tmnxBsxAppFilterRowStatus, tmnxBsxIsaAaGrpNonRedundantV2=tmnxBsxIsaAaGrpNonRedundantV2, tmnxBsxAaSubscriberAcctDataLoss=tmnxBsxAaSubscriberAcctDataLoss, tmnxBsxCustProtExprStr=tmnxBsxCustProtExprStr, tmnxBsxStatAaSubHCLngDurFlws=tmnxBsxStatAaSubHCLngDurFlws, tmnxBsxAppProfCharCharName=tmnxBsxAppProfCharCharName, tmnxBsxIsaAaGrpFcEntry=tmnxBsxIsaAaGrpFcEntry, tmnxBsxObsoleteGroupV8v0=tmnxBsxObsoleteGroupV8v0, tmnxBsxAdminCtrlLastChTime=tmnxBsxAdminCtrlLastChTime, tmnxBsxCflowdPerfFlowRate2=tmnxBsxCflowdPerfFlowRate2, tmnxBsxAarpCommandControl=tmnxBsxAarpCommandControl, tmnxBsxAaSubSumHCMedDurFlws=tmnxBsxAaSubSumHCMedDurFlws, tmnxBsxHttpRedirHttpHost=tmnxBsxHttpRedirHttpHost, tmnxBsxAsoValRowStatus=tmnxBsxAsoValRowStatus, tmnxBsxFlowSetupHighWatermark=tmnxBsxFlowSetupHighWatermark, tmnxBsxAqpMirrorSourceAllIncl=tmnxBsxAqpMirrorSourceAllIncl, tmnxBsxIsaAaGrpPartitions=tmnxBsxIsaAaGrpPartitions, tmnxBsxCflowdCollRowStatus=tmnxBsxCflowdCollRowStatus, tmnxBsxAaSubSumActFlwsToSb=tmnxBsxAaSubSumActFlwsToSb, tmnxBsxGrpStatusIngQHCDroInPPkts=tmnxBsxGrpStatusIngQHCDroInPPkts, tmnxBsxPlcyRowLastCh=tmnxBsxPlcyRowLastCh, tmnxBsxHttpPcyRdStatRedirLo=tmnxBsxHttpPcyRdStatRedirLo)
mibBuilder.exportSymbols("TIMETRA-BSX-NG-MIB", tmnxBsxStatAaSubCfgRowStatus=tmnxBsxStatAaSubCfgRowStatus, tmnxBsxCflowdPerfMeasType=tmnxBsxCflowdPerfMeasType, tmnxBsxAppProfTable=tmnxBsxAppProfTable, tmnxBsxRadApServAcctPort=tmnxBsxRadApServAcctPort, tmnxBsxHttpPcyRdStatHCOutOfRes=tmnxBsxHttpPcyRdStatHCOutOfRes, tmnxBsxHttpEnrichTrafficCharHi=tmnxBsxHttpEnrichTrafficCharHi, tmnxBsxHttpEnrichTable=tmnxBsxHttpEnrichTable, tmnxBsxStaticObjGroup=tmnxBsxStaticObjGroup, tmnxBsxTransitObjs=tmnxBsxTransitObjs, tmnxBsxGrpStatusIngQDroInPPkts=tmnxBsxGrpStatusIngQDroInPPkts, tmnxBsxAqpRemarkDscpInProfile=tmnxBsxAqpRemarkDscpInProfile, tmnxBsxStatAaLngDurFlws=tmnxBsxStatAaLngDurFlws, tmnxBsxGrpStatusFlowSetupRatePk=tmnxBsxGrpStatusFlowSetupRatePk, tmnxBsxGrpStatusTrafficRatePeak=tmnxBsxGrpStatusTrafficRatePeak, tmnxBsxAppGrpCfgEntry=tmnxBsxAppGrpCfgEntry, tmnxBsxStatAaSubActFlwsFmSb=tmnxBsxStatAaSubActFlwsFmSb, tmnxBsxStatAaHCFlwsAdmToSb=tmnxBsxStatAaHCFlwsAdmToSb, tmnxBsxPolicerName=tmnxBsxPolicerName, tmnxBsxRadApServerSrcAddrType=tmnxBsxRadApServerSrcAddrType, tmnxBsxGrpStatusEgrQHCFwdInPOcts=tmnxBsxGrpStatusEgrQHCFwdInPOcts, tmnxBsxStatIsaAaCfgEntry=tmnxBsxStatIsaAaCfgEntry, tmnxBsxTransPrefEntryId=tmnxBsxTransPrefEntryId, TmnxBsxStatIsaAaCfgType=TmnxBsxStatIsaAaCfgType, tmnxBsxTransitIpPolicySubIdPlcy=tmnxBsxTransitIpPolicySubIdPlcy, tmnxBsxAaSubSumAppProfName=tmnxBsxAaSubSumAppProfName, tmnxBsxAqpSrcAddressOp=tmnxBsxAqpSrcAddressOp, tmnxBsxCflowdPerfExpLastChTime=tmnxBsxCflowdPerfExpLastChTime, tmnxBsxTransPrefPolicyIPv4EntCnt=tmnxBsxTransPrefPolicyIPv4EntCnt, tmnxBsxCflowdStatusUSupSSRCStLo=tmnxBsxCflowdStatusUSupSSRCStLo, tmnxBsxTransPrefSumTable=tmnxBsxTransPrefSumTable, tmnxBsxAdminCtrlConfigOwner=tmnxBsxAdminCtrlConfigOwner, tmnxBsxStatAaSubHCFlwsDnyToSb=tmnxBsxStatAaSubHCFlwsDnyToSb, tmnxBsxPolicerPIRAdaptation=tmnxBsxPolicerPIRAdaptation, TmnxBsxExprSubStringIndex=TmnxBsxExprSubStringIndex, tmnxBsxStatAaSubPktsDnyFmSb=tmnxBsxStatAaSubPktsDnyFmSb, TmnxBsxAaSubscriber=TmnxBsxAaSubscriber, tmnxBsxGrpStatusEgrQIndex=tmnxBsxGrpStatusEgrQIndex, tmnxBsxStatAaSubHCFlwsAdmFmSb=tmnxBsxStatAaSubHCFlwsAdmFmSb, tmnxBsxStatAaHCOctsAdmFmSb=tmnxBsxStatAaHCOctsAdmFmSb, PYSNMP_MODULE_ID=tmnxBsxNgMIBModule, tmnxBsxAppProfDescription=tmnxBsxAppProfDescription, tmnxBsxCflowdPerfTable=tmnxBsxCflowdPerfTable, tmnxBsxAdminControl=tmnxBsxAdminControl, tmnxBsxPlcyCfgLastChTime=tmnxBsxPlcyCfgLastChTime, tmnxBsxTransPrefSumParentSubType=tmnxBsxTransPrefSumParentSubType, tmnxBsxStatAaEntry=tmnxBsxStatAaEntry, tmnxBsxAaSubPolicerIndex=tmnxBsxAaSubPolicerIndex, tmnxBsxStatAaName=tmnxBsxStatAaName, tmnxBsxStatAaSubSdyEntry=tmnxBsxStatAaSubSdyEntry, tmnxBsxTransPrefEntryNetAddrType=tmnxBsxTransPrefEntryNetAddrType, tmnxBsxCustProtExprIndex=tmnxBsxCustProtExprIndex, tmnxBsxStatAaSubHCTermFlws=tmnxBsxStatAaSubHCTermFlws, tmnxBsxAdminCtrlApply=tmnxBsxAdminCtrlApply, tmnxBsxRadApServRowStatus=tmnxBsxRadApServRowStatus, tmnxBsxAaSubPolicerAqpEntryId=tmnxBsxAaSubPolicerAqpEntryId, tmnxBsxCflowdCollRowLastChange=tmnxBsxCflowdCollRowLastChange, tmnxBsxStatAaHCMedDurFlws=tmnxBsxStatAaHCMedDurFlws, tmnxBsxComplianceV7v0=tmnxBsxComplianceV7v0, tmnxBsxAppName=tmnxBsxAppName, tmnxBsxPolicyGroupV9v0=tmnxBsxPolicyGroupV9v0, tmnxBsxAaWap1xLastChangeTime=tmnxBsxAaWap1xLastChangeTime, tmnxBsxTransPrefSubRefCount=tmnxBsxTransPrefSubRefCount, tmnxBsxHttpEnrichFieldTable=tmnxBsxHttpEnrichFieldTable, tmnxBsxCflowdPerfFlowRate=tmnxBsxCflowdPerfFlowRate, tmnxBsxGrpStatusPktsInMda=tmnxBsxGrpStatusPktsInMda, tmnxBsxHttpRedirErrorCodeMsgSize=tmnxBsxHttpRedirErrorCodeMsgSize, tmnxBsxNotifyAaSubscriberType=tmnxBsxNotifyAaSubscriberType, tmnxBsxTListTable=tmnxBsxTListTable, TmnxBsxAaStatType=TmnxBsxAaStatType, tmnxBsxGrpStatusOctsDisCongOut=tmnxBsxGrpStatusOctsDisCongOut, tmnxBsxIsaAaGrpIngressQuePolicy=tmnxBsxIsaAaGrpIngressQuePolicy, tmnxBsxHttpPcyRdStatHCRedir=tmnxBsxHttpPcyRdStatHCRedir, tmnxBsxStatAaSubHCPktsDnyToSb=tmnxBsxStatAaSubHCPktsDnyToSb, tmnxBsxStatAaFlwsDnyToSb=tmnxBsxStatAaFlwsDnyToSb, tmnxBsxGrpStatusHCPktsInspected=tmnxBsxGrpStatusHCPktsInspected, tmnxBsxStatAaSubTermFlws=tmnxBsxStatAaSubTermFlws, tmnxBsxIsaAaGrpToSubResvCbs=tmnxBsxIsaAaGrpToSubResvCbs, tmnxBsxNotifyIsaAaGroupIndex=tmnxBsxNotifyIsaAaGroupIndex, tmnxBsxAppAppGroup=tmnxBsxAppAppGroup, tmnxBsxAaSubSumOctsAdmToSb=tmnxBsxAaSubSumOctsAdmToSb, tmnxBsxNotifyObjsGroup=tmnxBsxNotifyObjsGroup, tmnxBsxTransPrefPlcyLastChTime=tmnxBsxTransPrefPlcyLastChTime, tmnxBsxIsaAaGrpToSubSlpPolicy=tmnxBsxIsaAaGrpToSubSlpPolicy, tmnxBsxAppChargeGrp=tmnxBsxAppChargeGrp, tmnxBsxHttpEnrichNumEnrichedLo=tmnxBsxHttpEnrichNumEnrichedLo, tmnxBsxNotifyActionStatus=tmnxBsxNotifyActionStatus, tmnxBsxStatAaSubSdyHCOctsAdmToSb=tmnxBsxStatAaSubSdyHCOctsAdmToSb, tmnxBsxGrpStatusHCPktsInPChipErs=tmnxBsxGrpStatusHCPktsInPChipErs, tmnxBsxCustProtTable=tmnxBsxCustProtTable, tmnxBsxOvrdGroups=tmnxBsxOvrdGroups, tmnxBsxStatAaTermFlwDur=tmnxBsxStatAaTermFlwDur, TmnxBsxAarpServPoint=TmnxBsxAarpServPoint, tmnxBsxAsoDefValName=tmnxBsxAsoDefValName, tmnxBsxStatAaFlwsAdmFmSb=tmnxBsxStatAaFlwsAdmFmSb, tmnxBsxRedundancyObjs=tmnxBsxRedundancyObjs, tmnxBsxStatAaActFlwsToSb=tmnxBsxStatAaActFlwsToSb, tmnxBsxRadApServTxRequests=tmnxBsxRadApServTxRequests, tmnxBsxCflowdEntry=tmnxBsxCflowdEntry, tmnxBsxGrpStatusHCOctsDiscCongIn=tmnxBsxGrpStatusHCOctsDiscCongIn, tmnxBsxPolicerCIRAdaptation=tmnxBsxPolicerCIRAdaptation, tmnxBsxGrpStatusIngQFwdInPOcts=tmnxBsxGrpStatusIngQFwdInPOcts, tmnxBsxCflowdExpStatUSupSSRCStLo=tmnxBsxCflowdExpStatUSupSSRCStLo, tmnxBsxAaSubTransPrefPolicyId=tmnxBsxAaSubTransPrefPolicyId, tmnxBsxCflowdExpStatHCRecDropped=tmnxBsxCflowdExpStatHCRecDropped, tmnxBsxTListDescription=tmnxBsxTListDescription, tmnxBsxGrpStatusInQIndex=tmnxBsxGrpStatusInQIndex, tmnxBsxIsaAaGrpOverloadCutThru=tmnxBsxIsaAaGrpOverloadCutThru, TmnxBsxAaStatExportMethod=TmnxBsxAaStatExportMethod, tmnxBsxIsaAaGrpFromSubWaSBfHiWmk=tmnxBsxIsaAaGrpFromSubWaSBfHiWmk, tmnxBsxAppGrpPolicyVersion=tmnxBsxAppGrpPolicyVersion, tmnxBsxGrpStatusHCPktSzIncOc=tmnxBsxGrpStatusHCPktSzIncOc, tmnxBsxAppGrpCfgTable=tmnxBsxAppGrpCfgTable, tmnxBsxGrpStatusOctsDiscPolicy=tmnxBsxGrpStatusOctsDiscPolicy, tmnxBsxAqpApplication=tmnxBsxAqpApplication, tmnxBsxRadApLastChTime=tmnxBsxRadApLastChTime, tmnxBsxTListEntry=tmnxBsxTListEntry, tmnxBsxChargeGrpName=tmnxBsxChargeGrpName, tmnxBsxStatIsaAaCfgLastChTime=tmnxBsxStatIsaAaCfgLastChTime, tmnxBsxRadApServerVRtrID=tmnxBsxRadApServerVRtrID, tmnxBsxGrpStatusEgrQHCDroOutPPkts=tmnxBsxGrpStatusEgrQHCDroOutPPkts, tmnxBsxRadApObjGroup=tmnxBsxRadApObjGroup, tmnxBsxTransPrefSumNetAddr=tmnxBsxTransPrefSumNetAddr, tmnxBsxRadApServAddrType=tmnxBsxRadApServAddrType, tmnxBsxAaGrpPartAaSubRemote=tmnxBsxAaGrpPartAaSubRemote, tmnxBsxAppProfCharProfName=tmnxBsxAppProfCharProfName, tmnxBsxNotifyObjsGroups=tmnxBsxNotifyObjsGroups, tmnxBsxGrpStatusFlows=tmnxBsxGrpStatusFlows, tmnxBsxGrpStatusIngQDroInPOcts=tmnxBsxGrpStatusIngQDroInPOcts, tmnxBsxAaGrpPartRowStatus=tmnxBsxAaGrpPartRowStatus, tmnxBsxStatAaSubSdyRowStatus=tmnxBsxStatAaSubSdyRowStatus, TmnxBsxStatAaAcctCfgType=TmnxBsxStatAaAcctCfgType, tmnxBsxCflowdExpStatTable=tmnxBsxCflowdExpStatTable, tmnxBsxGrpStatusHCOctsPolicyByps=tmnxBsxGrpStatusHCOctsPolicyByps, tmnxBsxAaSubMdaMdaNum=tmnxBsxAaSubMdaMdaNum, tmnxBsxOvrdAaSubCharLastChTm=tmnxBsxOvrdAaSubCharLastChTm, tmnxBsxGrpStatusHCPktsOut=tmnxBsxGrpStatusHCPktsOut, tmnxBsxStatAaSubLngDurFlws=tmnxBsxStatAaSubLngDurFlws, tmnxBsxAaSubStatsInterval=tmnxBsxAaSubStatsInterval, tmnxBsxStatAaHCPktsAdmToSb=tmnxBsxStatAaHCPktsAdmToSb, tmnxBsxAaSubSumPktsDnyToSb=tmnxBsxAaSubSumPktsDnyToSb, tmnxBsxAaSubSumHCFlwsAdmToSb=tmnxBsxAaSubSumHCFlwsAdmToSb, tmnxBsxStatAaSubSdyTermFlws=tmnxBsxStatAaSubSdyTermFlws, tmnxBsxCflowdPerfExpTable=tmnxBsxCflowdPerfExpTable, tmnxBsxAdminControlApply=tmnxBsxAdminControlApply, tmnxBsxTransPrefSumEntry=tmnxBsxTransPrefSumEntry, tmnxBsxRadApEntry=tmnxBsxRadApEntry, tmnxBsxIsaAaGrpFcRowStatus=tmnxBsxIsaAaGrpFcRowStatus, tmnxBsxRadApFailure=tmnxBsxRadApFailure, tmnxBsxGrpMdaSapSubscribers=tmnxBsxGrpMdaSapSubscribers, tmnxBsxCflowdStatusFlowsNoRes=tmnxBsxCflowdStatusFlowsNoRes, tmnxBsxAppFilterExprEntry=tmnxBsxAppFilterExprEntry, tmnxBsxCflowdObjs=tmnxBsxCflowdObjs, tmnxBsxTransPrefPolicyDesc=tmnxBsxTransPrefPolicyDesc, tmnxBsxTransPrefPolicyEntCount=tmnxBsxTransPrefPolicyEntCount, tmnxBsxAdminOwner=tmnxBsxAdminOwner, tmnxBsxChargeGrpDescription=tmnxBsxChargeGrpDescription, tmnxBsxAaSubSumEntry=tmnxBsxAaSubSumEntry, tmnxBsxCflowdExpRowLastChange=tmnxBsxCflowdExpRowLastChange, tmnxBsxProtTable=tmnxBsxProtTable, tmnxBsxTransPrefPolicyIPv6EntCnt=tmnxBsxTransPrefPolicyIPv6EntCnt, tmnxBsxStatAaHCOctsDnyToSb=tmnxBsxStatAaHCOctsDnyToSb, TmnxBsxAdminCtrl=TmnxBsxAdminCtrl, tmnxBsxGrpStatusEgrQFwdOutPOcts=tmnxBsxGrpStatusEgrQFwdOutPOcts, tmnxBsxStatAaSubHCOctsDnyToSb=tmnxBsxStatAaSubHCOctsDnyToSb, tmnxBsxTransPrefSumSubAddr=tmnxBsxTransPrefSumSubAddr, tmnxBsxHttpRedirErrLastChTime=tmnxBsxHttpRedirErrLastChTime, tmnxBsxGrpStatusOctsInMda=tmnxBsxGrpStatusOctsInMda, tmnxBsxHttpEnrichName=tmnxBsxHttpEnrichName, tmnxBsxAaWap1xAdminState=tmnxBsxAaWap1xAdminState, tmnxBsxGrpStatusPktsFromMda=tmnxBsxGrpStatusPktsFromMda, tmnxBsxNotifyObjsGroupV9v0=tmnxBsxNotifyObjsGroupV9v0, TmnxBsxCustProtExprSubString=TmnxBsxCustProtExprSubString, tmnxBsxAqpApplicationOp=tmnxBsxAqpApplicationOp, tmnxBsxIsaAaGrpFlowSetup=tmnxBsxIsaAaGrpFlowSetup, tmnxBsxMdaGroups=tmnxBsxMdaGroups, tmnxBsxCflowdStatusHCUSupSSRCSt=tmnxBsxCflowdStatusHCUSupSSRCSt, tmnxBsxGrpStatusPktsOut=tmnxBsxGrpStatusPktsOut, tmnxBsxIsaAaGrpFromSubSlpPolicy=tmnxBsxIsaAaGrpFromSubSlpPolicy, tmnxBsxGrpStatusEgrQHCDroInPPkts=tmnxBsxGrpStatusEgrQHCDroInPPkts, tmnxBsxGrpStatusPacketRatePeak=tmnxBsxGrpStatusPacketRatePeak, tmnxBsxPolicerAdminPIR=tmnxBsxPolicerAdminPIR, tmnxBsxStatAaSubSdyHCFlwsAdmFmSb=tmnxBsxStatAaSubSdyHCFlwsAdmFmSb, tmnxBsxHttpEnrichTplNotEnabledHi=tmnxBsxHttpEnrichTplNotEnabledHi, tmnxBsxStatAaAcctCfgEntry=tmnxBsxStatAaAcctCfgEntry, tmnxBsxAaSubSumPktsAdmToSb=tmnxBsxAaSubSumPktsAdmToSb, tmnxBsxStatAaSubCfgEntry=tmnxBsxStatAaSubCfgEntry, tmnxBsxCflowdCollStatTable=tmnxBsxCflowdCollStatTable, tmnxBsxRadApServReqSendFail=tmnxBsxRadApServReqSendFail, tmnxBsxHttpRedirErrEntry=tmnxBsxHttpRedirErrEntry, tmnxBsxHttpRdStatRedirHi=tmnxBsxHttpRdStatRedirHi, tmnxBsxIsaAaGrpUnassignedTIpSubs=tmnxBsxIsaAaGrpUnassignedTIpSubs, tmnxBsxAqpRemarkFc=tmnxBsxAqpRemarkFc, tmnxBsxChargeGrpPolicyVersion=tmnxBsxChargeGrpPolicyVersion, tmnxBsxStatAaSubHCOctsAdmFmSb=tmnxBsxStatAaSubHCOctsAdmFmSb, tmnxBsxTransIpPlcySubAppProfNm=tmnxBsxTransIpPlcySubAppProfNm, tmnxBsxGrpMdaTransPrefV4Entr=tmnxBsxGrpMdaTransPrefV4Entr, tmnxBsxIsaAaGrpOvrldCutthruClr=tmnxBsxIsaAaGrpOvrldCutthruClr, tmnxBsxAarpInstDescription=tmnxBsxAarpInstDescription, tmnxBsxGrpStatusHCOctsIn=tmnxBsxGrpStatusHCOctsIn, TmnxBsxAarpInstOperFlags=TmnxBsxAarpInstOperFlags, tmnxBsxAqpAdminState=tmnxBsxAqpAdminState, tmnxBsxStatAaNumSubscribers=tmnxBsxStatAaNumSubscribers, tmnxBsxAarpInstPeerPriority=tmnxBsxAarpInstPeerPriority, tmnxBsxIsaAaGrpCapCostLowThres=tmnxBsxIsaAaGrpCapCostLowThres, tmnxBsxAarpInstPeerEPSapPortId=tmnxBsxAarpInstPeerEPSapPortId, tmnxBsxRadApDescription=tmnxBsxRadApDescription, tmnxBsxCflowdStatusRecRateCurr=tmnxBsxCflowdStatusRecRateCurr, tmnxBsxTransitIpPolicyIPv6EntCnt=tmnxBsxTransitIpPolicyIPv6EntCnt, tmnxBsxTransPrefSubscriber=tmnxBsxTransPrefSubscriber, tmnxBsxIsaAaGrpFromSubPool=tmnxBsxIsaAaGrpFromSubPool, tmnxBsxAppProfCharEntry=tmnxBsxAppProfCharEntry, tmnxBsxCflowdCollVersion=tmnxBsxCflowdCollVersion, tmnxBsxAaSubPolResExTable=tmnxBsxAaSubPolResExTable, tmnxBsxTListTableLastUpdateT=tmnxBsxTListTableLastUpdateT, tmnxBsxGrpMdaRowStatus=tmnxBsxGrpMdaRowStatus, tmnxBsxGrpStatusPktSzDecOcLo=tmnxBsxGrpStatusPktSzDecOcLo, tmnxBsxStatAaSubSdyHCPktsAdmToSb=tmnxBsxStatAaSubSdyHCPktsAdmToSb, tmnxBsxIsaAaGrpToSbWaSBufOvldClr=tmnxBsxIsaAaGrpToSbWaSBufOvldClr, tmnxBsxAaSubSumHCShrtDurFlws=tmnxBsxAaSubSumHCShrtDurFlws, tmnxBsxAaSubHasOverrides=tmnxBsxAaSubHasOverrides, tmnxBsxAqpRemarkDscpOutProfile=tmnxBsxAqpRemarkDscpOutProfile, tmnxBsxAqpSrcAddress=tmnxBsxAqpSrcAddress, tmnxBsxStatAaPktsDnyToSb=tmnxBsxStatAaPktsDnyToSb, tmnxBsxNotifyRadiusCoAAuditState=tmnxBsxNotifyRadiusCoAAuditState, tmnxBsxHttpEnrichFieldLastChTime=tmnxBsxHttpEnrichFieldLastChTime, tmnxBsxAppFilterFlowSetupDir=tmnxBsxAppFilterFlowSetupDir, tmnxBsxAqpCharEntry=tmnxBsxAqpCharEntry, tmnxBsxGrpMdaRole=tmnxBsxGrpMdaRole, tmnxBsxGrpStatusTable=tmnxBsxGrpStatusTable, tmnxBsxGrpStatusIngQFwdOutPPkts=tmnxBsxGrpStatusIngQFwdOutPPkts, tmnxBsxIsaAaGrpFromSubResvCbs=tmnxBsxIsaAaGrpFromSubResvCbs, tmnxBsxHttpEnrichHCTplNotEnabled=tmnxBsxHttpEnrichHCTplNotEnabled, tmnxBsxRadApServOperStateChange=tmnxBsxRadApServOperStateChange, tmnxBsxStatAaHCTermFlws=tmnxBsxStatAaHCTermFlws, tmnxBsxHttpEnrichEnabled=tmnxBsxHttpEnrichEnabled, tmnxBsxCflowdStatusDiscontTime=tmnxBsxCflowdStatusDiscontTime, tmnxBsxTransPrefPolicyId=tmnxBsxTransPrefPolicyId, tmnxBsxTListAttribName=tmnxBsxTListAttribName, tmnxBsxAppFilterIpProtocolNumOp=tmnxBsxAppFilterIpProtocolNumOp, tmnxBsxStatAaSubSdyCfgTable=tmnxBsxStatAaSubSdyCfgTable, tmnxBsxStatAaPktsDnyFmSb=tmnxBsxStatAaPktsDnyFmSb, tmnxBsxGrpStatusHCPktsOutPChipEr=tmnxBsxGrpStatusHCPktsOutPChipEr, tmnxBsxAqpStatsHCFlows=tmnxBsxAqpStatsHCFlows, tmnxBsxRadApStatEntry=tmnxBsxRadApStatEntry, tmnxBsxStatAaSubPktsAdmFmSb=tmnxBsxStatAaSubPktsAdmFmSb, tmnxBsxStatsGroup=tmnxBsxStatsGroup, tmnxBsxIsaAaGrpUnassignedSpkSubs=tmnxBsxIsaAaGrpUnassignedSpkSubs, tmnxBsxAqpStatsEntry=tmnxBsxAqpStatsEntry, tmnxBsxHttpRdStatSizeExceededHi=tmnxBsxHttpRdStatSizeExceededHi, tmnxBsxAaSubSumPktsDnyFmSb=tmnxBsxAaSubSumPktsDnyFmSb, tmnxBsxCflowdStatusEntry=tmnxBsxCflowdStatusEntry, tmnxBsxIsaAaTim=tmnxBsxIsaAaTim, tmnxBsxAdminLastChangeTime=tmnxBsxAdminLastChangeTime, tmnxBsxCflowdPerfRowLastChange=tmnxBsxCflowdPerfRowLastChange)
mibBuilder.exportSymbols("TIMETRA-BSX-NG-MIB", tmnxBsxHttpEnrichFieldName=tmnxBsxHttpEnrichFieldName, tmnxBsxAqpSpokeSdpSubscrOp=tmnxBsxAqpSpokeSdpSubscrOp, tmnxBsxAppFilterServerAddrType=tmnxBsxAppFilterServerAddrType, tmnxBsxNotifyAaSubAcctLossReason=tmnxBsxNotifyAaSubAcctLossReason, tmnxBsxStatAaSubSdyHCTermFlwDur=tmnxBsxStatAaSubSdyHCTermFlwDur, tmnxBsxAppFilterExprIndex=tmnxBsxAppFilterExprIndex, tmnxBsxStatAaSubSdyTable=tmnxBsxStatAaSubSdyTable, tmnxBsxAaSubAsoValName=tmnxBsxAaSubAsoValName, tmnxBsxRadApSignfcntChangeDelta=tmnxBsxRadApSignfcntChangeDelta, tmnxBsxGrpStatusEgrQDiscontTime=tmnxBsxGrpStatusEgrQDiscontTime, tmnxBsxGrpStatusHCPktsFromMda=tmnxBsxGrpStatusHCPktsFromMda, tmnxBsxAppProfName=tmnxBsxAppProfName, tmnxBsxAqpSapSubscrOp=tmnxBsxAqpSapSubscrOp, tmnxBsxAarpServPointTable=tmnxBsxAarpServPointTable, tmnxBsxHttpEnrichRowLastCh=tmnxBsxHttpEnrichRowLastCh, tmnxBsxAppFilterServerPort=tmnxBsxAppFilterServerPort, tmnxBsxCustProtEntryId=tmnxBsxCustProtEntryId, tmnxBsxPolicyGroups=tmnxBsxPolicyGroups, tmnxBsxAarpInstPeerEPSapEncap=tmnxBsxAarpInstPeerEPSapEncap, tmnxBsxGrpStatusEgrQFwdInPOcts=tmnxBsxGrpStatusEgrQFwdInPOcts, tmnxBsxAqpSrcAddressLength=tmnxBsxAqpSrcAddressLength, tmnxBsxHttpRdStatHCNotRedir=tmnxBsxHttpRdStatHCNotRedir, tmnxBsxAqpDstAddressLength=tmnxBsxAqpDstAddressLength, tmnxBsxGrpStatusHCOctsDiscPolicy=tmnxBsxGrpStatusHCOctsDiscPolicy, tmnxBsxTransPrefEntryLastChTime=tmnxBsxTransPrefEntryLastChTime, tmnxBsxAaSubAsoValTable=tmnxBsxAaSubAsoValTable, tmnxBsxAqpAppGroupOp=tmnxBsxAqpAppGroupOp, tmnxBsxCflowdCollAdminState=tmnxBsxCflowdCollAdminState, tmnxBsxHttpRedirObjs=tmnxBsxHttpRedirObjs, TmnxBsxAaGrpPartIndex=TmnxBsxAaGrpPartIndex, tmnxBsxTransitIpSumIpOriginMask=tmnxBsxTransitIpSumIpOriginMask, tmnxBsxAaSubSumHCPktsDnyFmSb=tmnxBsxAaSubSumHCPktsDnyFmSb, tmnxBsxStatAaSubSdyHCOctsDnyToSb=tmnxBsxStatAaSubSdyHCOctsDnyToSb, tmnxBsxHttpRedirErrDescription=tmnxBsxHttpRedirErrDescription, tmnxBsxGrpStatusIngQFwdOutPOcts=tmnxBsxGrpStatusIngQFwdOutPOcts, tmnxBsxAarpInstPeerIpType=tmnxBsxAarpInstPeerIpType, tmnxBsxStatAaSubSdyHCFlwsDnyFmSb=tmnxBsxStatAaSubSdyHCFlwsDnyFmSb, tmnxBsxHttpRdStatTable=tmnxBsxHttpRdStatTable, tmnxBsxNotifObjs=tmnxBsxNotifObjs, tmnxBsxCflowdExpLastChangeTime=tmnxBsxCflowdExpLastChangeTime, tmnxBsxAaSubSumOctsAdmFmSb=tmnxBsxAaSubSumOctsAdmFmSb, tmnxBsxHttpEnrichNumEnrichedHi=tmnxBsxHttpEnrichNumEnrichedHi, tmnxBsxAqpEntryId=tmnxBsxAqpEntryId, tmnxBsxTListAttribTableLUpdateT=tmnxBsxTListAttribTableLUpdateT, tmnxBsxChargeGrpCfgTable=tmnxBsxChargeGrpCfgTable, tmnxBsxCflowdExpStatHCUSupSSRCSt=tmnxBsxCflowdExpStatHCUSupSSRCSt, tmnxBsxStatAaAcctCfgMaxThruStats=tmnxBsxStatAaAcctCfgMaxThruStats, tmnxBsxPolicerAdminCIR=tmnxBsxPolicerAdminCIR, TmnxBsxGranularity=TmnxBsxGranularity, tmnxBsxHttpRdStatDiscontTime=tmnxBsxHttpRdStatDiscontTime, tmnxBsxTransIpPlcySubLastChTime=tmnxBsxTransIpPlcySubLastChTime, tmnxBsxAqpStatsTable=tmnxBsxAqpStatsTable, TmnxBsxExprSubString=TmnxBsxExprSubString, tmnxBsxAarpServPointRole=tmnxBsxAarpServPointRole, tmnxBsxAqpDstPortHighValue=tmnxBsxAqpDstPortHighValue, tmnxBsxAaSubSumHCLngDurFlws=tmnxBsxAaSubSumHCLngDurFlws, tmnxBsxHttpRdStatNotRedirLo=tmnxBsxHttpRdStatNotRedirLo, tmnxBsxGrpStatusSubsPeak=tmnxBsxGrpStatusSubsPeak, tmnxBsxAaSubPolicerDirection=tmnxBsxAaSubPolicerDirection, tmnxBsxStatAaTable=tmnxBsxStatAaTable, tmnxBsxGrpStatusFlowsPeak=tmnxBsxGrpStatusFlowsPeak, tmnxBsxFlowFullHighWatermark=tmnxBsxFlowFullHighWatermark, tmnxBsxIsaAaGrpOvrldCutthru=tmnxBsxIsaAaGrpOvrldCutthru, tmnxBsxIsaAaGrpFromSubWaSBfLoWmk=tmnxBsxIsaAaGrpFromSubWaSBfLoWmk, tmnxBsxAarpInstAdminState=tmnxBsxAarpInstAdminState, tmnxBsxAqpDstPortLowValue=tmnxBsxAqpDstPortLowValue, tmnxBsxOvrdGroup=tmnxBsxOvrdGroup, tmnxBsxAppFilterProtocolOp=tmnxBsxAppFilterProtocolOp, tmnxBsxStatsObjs=tmnxBsxStatsObjs, tmnxBsxAqpFlowRatePolicer=tmnxBsxAqpFlowRatePolicer, tmnxBsxStatAaSubSdyMedDurFlws=tmnxBsxStatAaSubSdyMedDurFlws, tmnxBsxAppFilterServerPortFpp=tmnxBsxAppFilterServerPortFpp, tmnxBsxTransIpPolRadDiscError=tmnxBsxTransIpPolRadDiscError, tmnxBsxIsaAaGrpAdminState=tmnxBsxIsaAaGrpAdminState, tmnxBsxGrpStatusPktSzIncOcLo=tmnxBsxGrpStatusPktSzIncOcLo, tmnxBsxGrpStatusPktsDisCongMda=tmnxBsxGrpStatusPktsDisCongMda, tmnxBsxGrpStatusEgrQHCDroInPOcts=tmnxBsxGrpStatusEgrQHCDroInPOcts, tmnxBsxHttpEnrichScalars=tmnxBsxHttpEnrichScalars, tmnxBsxRadApServRxResponses=tmnxBsxRadApServRxResponses, tmnxBsxIsaAaGrpTable=tmnxBsxIsaAaGrpTable, tmnxBsxIsaAaGrpUnassignedEsmSubs=tmnxBsxIsaAaGrpUnassignedEsmSubs, tmnxBsxGrpStatusPktsDiscErrors=tmnxBsxGrpStatusPktsDiscErrors, tmnxBsxAppFilterExprStr=tmnxBsxAppFilterExprStr, tmnxBsxCflowdCollPort=tmnxBsxCflowdCollPort, tmnxBsxHttpRedirName=tmnxBsxHttpRedirName, tmnxBsxCflowdStatusTable=tmnxBsxCflowdStatusTable, tmnxBsxIsaAaGrpRowStatus=tmnxBsxIsaAaGrpRowStatus, tmnxBsxCflowdCollStatRecSent=tmnxBsxCflowdCollStatRecSent, tmnxBsxStatAaHCFlwsDnyFmSb=tmnxBsxStatAaHCFlwsDnyFmSb, tmnxBsxIsaAaGrpEntry=tmnxBsxIsaAaGrpEntry, tmnxBsxAarpInstPeerState=tmnxBsxAarpInstPeerState, tmnxBsxStatAaSubSdyTermFlwDur=tmnxBsxStatAaSubSdyTermFlwDur, tmnxBsxGrpStatusPktSzIncPkLo=tmnxBsxGrpStatusPktSzIncPkLo, tmnxBsxMdaGroupV9v0=tmnxBsxMdaGroupV9v0, tmnxBsxAppFilterIpProtocolNum=tmnxBsxAppFilterIpProtocolNum, tmnxBsxAaSubTable=tmnxBsxAaSubTable, tmnxBsxAqpSapSubscrEncapValue=tmnxBsxAqpSapSubscrEncapValue, tmnxBsxTransPrefSubRowStatus=tmnxBsxTransPrefSubRowStatus, tmnxBsxGrpMdaEntry=tmnxBsxGrpMdaEntry, tmnxBsxTransPrefSumAppProfNm=tmnxBsxTransPrefSumAppProfNm, tmnxBsxHttpRedirErrCodeRowStatus=tmnxBsxHttpRedirErrCodeRowStatus, tmnxBsxPolicyGroupV8v0=tmnxBsxPolicyGroupV8v0, tmnxBsxAaSubSumShrtDurFlws=tmnxBsxAaSubSumShrtDurFlws, tmnxBsxAsoRowStatus=tmnxBsxAsoRowStatus, tmnxBsxAqpSrcPortLowValue=tmnxBsxAqpSrcPortLowValue, tmnxBsxPolicyGroup=tmnxBsxPolicyGroup, tmnxBsxGrpStatusIngQHCFwdInPPkts=tmnxBsxGrpStatusIngQHCFwdInPPkts, tmnxBsxAaSubPolResExceeded=tmnxBsxAaSubPolResExceeded, tmnxBsxAppGrpName=tmnxBsxAppGrpName, tmnxBsxAarpInstLastCh=tmnxBsxAarpInstLastCh, tmnxBsxAppFilterExprOperator=tmnxBsxAppFilterExprOperator, tmnxBsxStatIsaAaCfgPolicy=tmnxBsxStatIsaAaCfgPolicy, tmnxBsxAaSubSumLngDurFlws=tmnxBsxAaSubSumLngDurFlws, tmnxBsxAqpSrcPortOp=tmnxBsxAqpSrcPortOp, tmnxBsxHttpEnrichMissngSubDataHi=tmnxBsxHttpEnrichMissngSubDataHi, tmnxBsxStatAaSubHCTermFlwDur=tmnxBsxStatAaSubHCTermFlwDur, tmnxBsxInfo=tmnxBsxInfo, tmnxBsxAaSubSumFlwsAdmToSb=tmnxBsxAaSubSumFlwsAdmToSb, tmnxBsxAqpHttpErrRedirName=tmnxBsxAqpHttpErrRedirName, tmnxBsxStatAaHCTermFlwDur=tmnxBsxStatAaHCTermFlwDur, tmnxBsxCflowdExpAdminState=tmnxBsxCflowdExpAdminState, tmnxBsxHttpRedirEntry=tmnxBsxHttpRedirEntry, tmnxBsxGrpStatusEgrQHCFwdInPPkts=tmnxBsxGrpStatusEgrQHCFwdInPPkts, tmnxBsxAqpDscpOp=tmnxBsxAqpDscpOp, tmnxBsxIsaAaGrpToSubWaSBfHiWmk=tmnxBsxIsaAaGrpToSubWaSBfHiWmk, tmnxBsxGrpStatusIngQHCDroOutPPkts=tmnxBsxGrpStatusIngQHCDroOutPPkts, tmnxBsxRadApRxResponses=tmnxBsxRadApRxResponses, tmnxBsxNotifyObjsGroupV8v0=tmnxBsxNotifyObjsGroupV8v0, tmnxBsxAqpSubscriberOp=tmnxBsxAqpSubscriberOp, tmnxBsxStatAaSubSdyHCOctsAdmFmSb=tmnxBsxStatAaSubSdyHCOctsAdmFmSb, tmnxBsxTransitIpPolicyEntry=tmnxBsxTransitIpPolicyEntry, tmnxBsxPolicyObjs=tmnxBsxPolicyObjs, tmnxBsxStatAaSubSdyHCFlwsDnyToSb=tmnxBsxStatAaSubSdyHCFlwsDnyToSb, tmnxBsxCflowdStatusPktsSent=tmnxBsxCflowdStatusPktsSent, tmnxBsxIsaAaGrpIngressPool=tmnxBsxIsaAaGrpIngressPool, tmnxBsxPolicerAction=tmnxBsxPolicerAction, tmnxBsxGrpStatusEgrQDirection=tmnxBsxGrpStatusEgrQDirection, tmnxBsxAppFilterPolicyVersion=tmnxBsxAppFilterPolicyVersion, tmnxBsxCustProtExprDirection=tmnxBsxCustProtExprDirection, tmnxBsxStatAaSubSdyOctsAdmToSb=tmnxBsxStatAaSubSdyOctsAdmToSb, tmnxBsxTransPrefPolicyRowLastCh=tmnxBsxTransPrefPolicyRowLastCh, tmnxBsxIsaLoadBalUnSubEntry=tmnxBsxIsaLoadBalUnSubEntry, tmnxBsxGrpStatusHCOctsDisCongOut=tmnxBsxGrpStatusHCOctsDisCongOut, tmnxBsxStatAaSubSdyActFlwsFmSb=tmnxBsxStatAaSubSdyActFlwsFmSb, tmnxBsxAppProfEntry=tmnxBsxAppProfEntry, tmnxBsxCflowdCollTable=tmnxBsxCflowdCollTable, TmnxBsxTListAttribType=TmnxBsxTListAttribType, tmnxBsxAaGrpPartDescription=tmnxBsxAaGrpPartDescription, tmnxBsxStatAaAppFilterEntry=tmnxBsxStatAaAppFilterEntry, tmnxBsxOvrdAaSubEntry=tmnxBsxOvrdAaSubEntry, tmnxBsxTransPrefSubTable=tmnxBsxTransPrefSubTable, tmnxBsxTListAttribType=tmnxBsxTListAttribType, tmnxBsxAsoTable=tmnxBsxAsoTable, tmnxBsxAarpInstPeerEPSapEncType=tmnxBsxAarpInstPeerEPSapEncType, tmnxBsxAppFilterEntry=tmnxBsxAppFilterEntry, tmnxBsxCflowdExpTable=tmnxBsxCflowdExpTable, tmnxBsxStatAaSubSdyHCTermFlws=tmnxBsxStatAaSubSdyHCTermFlws, tmnxBsxTransitIpPolicyDhcp=tmnxBsxTransitIpPolicyDhcp, tmnxBsxStatAaSubSdyDiscontTime=tmnxBsxStatAaSubSdyDiscontTime, tmnxBsxAppFilterExprTable=tmnxBsxAppFilterExprTable, tmnxBsxCflowdCollAddressType=tmnxBsxCflowdCollAddressType, tmnxBsxCflowdExpStatHCRecReport=tmnxBsxCflowdExpStatHCRecReport, tmnxBsxAaSubPolicerType=tmnxBsxAaSubPolicerType, tmnxBsxProtDescription=tmnxBsxProtDescription, tmnxBsxIsaAaGrpActivityChange=tmnxBsxIsaAaGrpActivityChange, tmnxBsxStatAaSubSdyHCFlwsAdmToSb=tmnxBsxStatAaSubSdyHCFlwsAdmToSb, tmnxBsxNotifyTransitIpPolicyId=tmnxBsxNotifyTransitIpPolicyId, tmnxBsxGrpStatusFlowsAverage=tmnxBsxGrpStatusFlowsAverage, tmnxBsxStatAaSubSdyHCLngDurFlws=tmnxBsxStatAaSubSdyHCLngDurFlws, tmnxBsxTransPrefPolicyRowStatus=tmnxBsxTransPrefPolicyRowStatus, tmnxBsxIsaAaGrpFailureClearV2=tmnxBsxIsaAaGrpFailureClearV2, tmnxBsxRadApServReqTimeouts=tmnxBsxRadApServReqTimeouts, tmnxBsxIsaAaGrpTransPrefV4NmEntr=tmnxBsxIsaAaGrpTransPrefV4NmEntr, tmnxBsxTransitIpPolicySeenIp=tmnxBsxTransitIpPolicySeenIp, tmnxBsxAarpInstPeerIpAddr=tmnxBsxAarpInstPeerIpAddr, tmnxBsxAaSubMdaSlotNum=tmnxBsxAaSubMdaSlotNum, tmnxBsxAppGrpDescription=tmnxBsxAppGrpDescription, tmnxBsxOvrdAaSubRowStatus=tmnxBsxOvrdAaSubRowStatus, tmnxBsxComplianceV10v0=tmnxBsxComplianceV10v0, tmnxBsxAaSubPolicerName=tmnxBsxAaSubPolicerName, tmnxBsxStatAaFlwsAdmToSb=tmnxBsxStatAaFlwsAdmToSb, tmnxBsxStatAaSubOctsAdmToSb=tmnxBsxStatAaSubOctsAdmToSb, tmnxBsxOvrdAaSubRowLastCh=tmnxBsxOvrdAaSubRowLastCh, tmnxBsxPacketRateLowWatermark=tmnxBsxPacketRateLowWatermark, tmnxBsxStatAaSubHCPktsAdmFmSb=tmnxBsxStatAaSubHCPktsAdmFmSb, tmnxBsxTransPrefEntrySubAddr=tmnxBsxTransPrefEntrySubAddr, tmnxBsxAarpCommandEntry=tmnxBsxAarpCommandEntry, tmnxBsxRadApServEntry=tmnxBsxRadApServEntry, tmnxBsxGrpStatusOctsDiscCongIn=tmnxBsxGrpStatusOctsDiscCongIn, tmnxBsxStatAaSubSdyHCPktsAdmFmSb=tmnxBsxStatAaSubSdyHCPktsAdmFmSb, tmnxBsxRedundancyObjGroups=tmnxBsxRedundancyObjGroups, tmnxBsxCflowdCollDescription=tmnxBsxCflowdCollDescription, tmnxBsxAaSubPolResExceededClear=tmnxBsxAaSubPolResExceededClear, tmnxBsxAsoEntry=tmnxBsxAsoEntry, tmnxBsxRadApReqTimeouts=tmnxBsxRadApReqTimeouts, tmnxBsxGrpMdaActivityChange=tmnxBsxGrpMdaActivityChange, tmnxBsxTransIpPlcyAddrLastChTime=tmnxBsxTransIpPlcyAddrLastChTime, tmnxBsxIsaAaGrpMdaLastChangeTime=tmnxBsxIsaAaGrpMdaLastChangeTime, tmnxBsxAaSubSumHCOctsDnyToSb=tmnxBsxAaSubSumHCOctsDnyToSb, tmnxBsxTransitIpPolicyTable=tmnxBsxTransitIpPolicyTable, tmnxBsxHttpRedirErrHttpHost=tmnxBsxHttpRedirErrHttpHost, tmnxBsxTransitGroup=tmnxBsxTransitGroup, tmnxBsxAarpInstEntry=tmnxBsxAarpInstEntry, tmnxBsxIsaAaGrpFcRowLastChange=tmnxBsxIsaAaGrpFcRowLastChange, tmnxBsxAppGrpAdminState=tmnxBsxAppGrpAdminState, tmnxBsxAqpMirrorSource=tmnxBsxAqpMirrorSource, tmnxBsxOvrdAaSubCharRowLastCh=tmnxBsxOvrdAaSubCharRowLastCh, tmnxBsxHttpEnrichFieldRowStatus=tmnxBsxHttpEnrichFieldRowStatus, tmnxBsxGrpStatusIngQFwdInPPkts=tmnxBsxGrpStatusIngQFwdInPPkts, tmnxBsxProtEntry=tmnxBsxProtEntry, tmnxBsxPolicerCBS=tmnxBsxPolicerCBS, tmnxBsxIsaAaGrpPacketRateClear=tmnxBsxIsaAaGrpPacketRateClear, tmnxBsxStatAaSubSdyPktsDnyFmSb=tmnxBsxStatAaSubSdyPktsDnyFmSb, tmnxBsxStatAaSubSdyActFlwsToSb=tmnxBsxStatAaSubSdyActFlwsToSb, tmnxBsxIsaAaGrpTransPrefV6NmEntr=tmnxBsxIsaAaGrpTransPrefV6NmEntr, tmnxBsxAppFilterExprType=tmnxBsxAppFilterExprType, tmnxBsxAarpInstStateChanged=tmnxBsxAarpInstStateChanged, tmnxBsxGrpStatusHCPktsDiscCongIn=tmnxBsxGrpStatusHCPktsDiscCongIn, tmnxBsxRadApServStatTable=tmnxBsxRadApServStatTable, tmnxBsxMdaGroupV7v0=tmnxBsxMdaGroupV7v0, tmnxBsxHttpRedirErrParticipantId=tmnxBsxHttpRedirErrParticipantId, tmnxBsxStatAaSubSdyFlwsAdmFmSb=tmnxBsxStatAaSubSdyFlwsAdmFmSb, tmnxBsxCflowdStatusUSupSSRCStHi=tmnxBsxCflowdStatusUSupSSRCStHi, tmnxBsxCflowdCollEntry=tmnxBsxCflowdCollEntry, tmnxBsxAaSubPolicerEntry=tmnxBsxAaSubPolicerEntry, tmnxBsxTransitIpPolicyRowLastCh=tmnxBsxTransitIpPolicyRowLastCh, tmnxBsxHttpRdStatHCOutOfResource=tmnxBsxHttpRdStatHCOutOfResource, tmnxBsxAarpInstPriority=tmnxBsxAarpInstPriority, tmnxBsxAqpSrcAddressType=tmnxBsxAqpSrcAddressType, tmnxBsxPacketRateHighWatermark=tmnxBsxPacketRateHighWatermark, tmnxBsxStatAaSubSdyPktsDnyToSb=tmnxBsxStatAaSubSdyPktsDnyToSb, tmnxBsxOvrdAaSubLastChTime=tmnxBsxOvrdAaSubLastChTime, tmnxBsxNotificationGroup=tmnxBsxNotificationGroup, tmnxBsxAaSubSumOctsDnyFmSb=tmnxBsxAaSubSumOctsDnyFmSb, tmnxBsxStatAaAppFilterFlowsHi=tmnxBsxStatAaAppFilterFlowsHi, tmnxBsxGrpStatusEgrQDroOutPOcts=tmnxBsxGrpStatusEgrQDroOutPOcts, tmnxBsxGrpStatusOctsFromMda=tmnxBsxGrpStatusOctsFromMda, tmnxBsxAqpHttpEnrichName=tmnxBsxAqpHttpEnrichName, tmnxBsxHttpRdStatOutOfResourceHi=tmnxBsxHttpRdStatOutOfResourceHi, tmnxBsxHttpPcyRdStatTable=tmnxBsxHttpPcyRdStatTable, tmnxBsxHttpEnrichFieldEntry=tmnxBsxHttpEnrichFieldEntry, tmnxBsxHttpRedirErrCodeLastCh=tmnxBsxHttpRedirErrCodeLastCh, tmnxBsxGroups=tmnxBsxGroups, tmnxBsxAsoCharName=tmnxBsxAsoCharName, tmnxBsxGrpStatusPktSzDecPkLo=tmnxBsxGrpStatusPktSzDecPkLo, tmnxBsxAarpInstState=tmnxBsxAarpInstState, tmnxBsxCflowdExpStatUSupSSRCStHi=tmnxBsxCflowdExpStatUSupSSRCStHi, tmnxBsxTransPrefEntrySubAddrType=tmnxBsxTransPrefEntrySubAddrType, tmnxBsxHttpRdStatNotRedirHi=tmnxBsxHttpRdStatNotRedirHi, tmnxBsxHttpEnrichObjGroup=tmnxBsxHttpEnrichObjGroup, tmnxBsxGrpStatusIngQHCDroInPOcts=tmnxBsxGrpStatusIngQHCDroInPOcts, tmnxBsxTransPrefTable=tmnxBsxTransPrefTable, tmnxBsxGrpStatusPktSzDecOcHi=tmnxBsxGrpStatusPktSzDecOcHi, tmnxBsxStatAaHCPktsDnyFmSb=tmnxBsxStatAaHCPktsDnyFmSb)
mibBuilder.exportSymbols("TIMETRA-BSX-NG-MIB", tmnxBsxGrpStatusEgrQHCFwdOutPOcts=tmnxBsxGrpStatusEgrQHCFwdOutPOcts, tmnxBsxStatAaAppFilterFlowHCOctC=tmnxBsxStatAaAppFilterFlowHCOctC, tmnxBsxIsaAaGrpNonRedundantClear=tmnxBsxIsaAaGrpNonRedundantClear, tmnxBsxProtObsolete=tmnxBsxProtObsolete, tmnxBsxAaSubSumHCFlwsAdmFmSb=tmnxBsxAaSubSumHCFlwsAdmFmSb, tmnxBsxStatAaAcctCfgAdminState=tmnxBsxStatAaAcctCfgAdminState, TmnxBsxMdaRole=TmnxBsxMdaRole, tmnxBsxTransIpPlcySubRowLastCh=tmnxBsxTransIpPlcySubRowLastCh, tmnxBsxStatAaSubSdyFlwsDnyToSb=tmnxBsxStatAaSubSdyFlwsDnyToSb, tmnxBsxHttpRedirErrCodeRowLastCh=tmnxBsxHttpRedirErrCodeRowLastCh, tmnxBsxHttpPcyRdStatOutOfResLo=tmnxBsxHttpPcyRdStatOutOfResLo, tmnxBsxTListAttribValue=tmnxBsxTListAttribValue, tmnxBsxGrpStatusHCOctsFromMda=tmnxBsxGrpStatusHCOctsFromMda, tmnxBsxRadApSendRetries=tmnxBsxRadApSendRetries, tmnxBsxGrpStatusHCPktsDisCongOut=tmnxBsxGrpStatusHCPktsDisCongOut, tmnxBsxCustProtRowLastChange=tmnxBsxCustProtRowLastChange, tmnxBsxTransPrefSumSubAddrLen=tmnxBsxTransPrefSumSubAddrLen, tmnxBsxStatAaSubSdyOctsDnyToSb=tmnxBsxStatAaSubSdyOctsDnyToSb, TmnxBsxDirection=TmnxBsxDirection, tmnxBsxNotifyReason=tmnxBsxNotifyReason, tmnxBsxTransPrefEntryNetAddr=tmnxBsxTransPrefEntryNetAddr, tmnxBsxAqpSpokeSdpSubscr=tmnxBsxAqpSpokeSdpSubscr, tmnxBsxGrpStatusSubsDivertedPk=tmnxBsxGrpStatusSubsDivertedPk, tmnxBsxChargeGrpRowStatus=tmnxBsxChargeGrpRowStatus, tmnxBsxHttpRedirScalars=tmnxBsxHttpRedirScalars, tmnxBsxHttpEnrichStatEntry=tmnxBsxHttpEnrichStatEntry, tmnxBsxAaSubAsoValDerivedFrom=tmnxBsxAaSubAsoValDerivedFrom, tmnxBsxStatAaSubHCOctsDnyFmSb=tmnxBsxStatAaSubHCOctsDnyFmSb, tmnxBsxTransitSeenIpGroup=tmnxBsxTransitSeenIpGroup, tmnxBsxTransitIpPolicyAutoCreate=tmnxBsxTransitIpPolicyAutoCreate, tmnxBsxCflowdPerfExpEntry=tmnxBsxCflowdPerfExpEntry, tmnxBsxTransIpPolAaSubCreated=tmnxBsxTransIpPolAaSubCreated, tmnxBsxGrpStatusTrafficRateAvg=tmnxBsxGrpStatusTrafficRateAvg, tmnxBsxIsaLoadBalUnSub=tmnxBsxIsaLoadBalUnSub, tmnxBsxStatAaSubOctsDnyToSb=tmnxBsxStatAaSubOctsDnyToSb, tmnxBsxAqpStatsHCConflicts=tmnxBsxAqpStatsHCConflicts, tmnxBsxCflowdTable=tmnxBsxCflowdTable, tmnxBsxTransitIpSumEntry=tmnxBsxTransitIpSumEntry, tmnxBsxAaWap1xRowLastChange=tmnxBsxAaWap1xRowLastChange, tmnxBsxGrpStatusEgrQFwdInPPkts=tmnxBsxGrpStatusEgrQFwdInPPkts, tmnxBsxNotifications=tmnxBsxNotifications, tmnxBsxGrpMdaTransitSubs=tmnxBsxGrpMdaTransitSubs, tmnxBsxGrpStatusSubsCurrent=tmnxBsxGrpStatusSubsCurrent, tmnxBsxGrpStatusOctsDiscErrors=tmnxBsxGrpStatusOctsDiscErrors, tmnxBsxGrpStatusIngQHCFwdInPOcts=tmnxBsxGrpStatusIngQHCFwdInPOcts, tmnxBsxAppProfDivert=tmnxBsxAppProfDivert, tmnxBsxGrpMdaSpokeSdpSubscribers=tmnxBsxGrpMdaSpokeSdpSubscribers, tmnxBsxAaGrpPartIndex=tmnxBsxAaGrpPartIndex, tmnxBsxAppFilterServerAddrOp=tmnxBsxAppFilterServerAddrOp, tmnxBsxGrpStatusPktsInPChipErs=tmnxBsxGrpStatusPktsInPChipErs, tmnxBsxStatAaAppFilterHCFlows=tmnxBsxStatAaAppFilterHCFlows, tmnxBsxIsaAaGrpPacketRate=tmnxBsxIsaAaGrpPacketRate, tmnxBsxGrpStatusIngQDroOutPPkts=tmnxBsxGrpStatusIngQDroOutPPkts, tmnxBsxTransitIpPolicyAddr=tmnxBsxTransitIpPolicyAddr, tmnxBsxAppFilterServerAddr=tmnxBsxAppFilterServerAddr, tmnxBsxAarpInstPeerSubRefType=tmnxBsxAarpInstPeerSubRefType, tmnxBsxAarpCommandTable=tmnxBsxAarpCommandTable, tmnxBsxHttpRedirErrCodeEntry=tmnxBsxHttpRedirErrCodeEntry, tmnxBsxTListName=tmnxBsxTListName, tmnxBsxUpgrade=tmnxBsxUpgrade, tmnxBsxAarpInstPeerOperFlags=tmnxBsxAarpInstPeerOperFlags, tmnxBsxGrpStatusPktsToMda=tmnxBsxGrpStatusPktsToMda, TmnxBsxOperator=TmnxBsxOperator, tmnxBsxAqpAppGroup=tmnxBsxAqpAppGroup, tmnxBsxIsaAaGrpIngressSlpPolicy=tmnxBsxIsaAaGrpIngressSlpPolicy, tmnxBsxGrpStatusIngQDroOutPOcts=tmnxBsxGrpStatusIngQDroOutPOcts, TmnxBsxLoadBalanceStatus=TmnxBsxLoadBalanceStatus, tmnxBsxAdminCtrlTable=tmnxBsxAdminCtrlTable, tmnxBsxTransPrefSumSubAddrType=tmnxBsxTransPrefSumSubAddrType, tmnxBsxTransPrefSumParentSub=tmnxBsxTransPrefSumParentSub, tmnxBsxGrpStatusEgrQTable=tmnxBsxGrpStatusEgrQTable, tmnxBsxHttpPcyRdStatDiscontTime=tmnxBsxHttpPcyRdStatDiscontTime, tmnxBsxAaSubSumFlwsDnyToSb=tmnxBsxAaSubSumFlwsDnyToSb, tmnxBsxIsaAaGrpFlowFull=tmnxBsxIsaAaGrpFlowFull, tmnxBsxHttpRedirErrName=tmnxBsxHttpRedirErrName, tmnxBsxHttpEnrichFieldHeaderName=tmnxBsxHttpEnrichFieldHeaderName, tmnxBsxHttpEnrichHCNumEnriched=tmnxBsxHttpEnrichHCNumEnriched, tmnxBsxStaticObjGroups=tmnxBsxStaticObjGroups, tmnxBsxAppRowStatus=tmnxBsxAppRowStatus, tmnxBsxStatIsaAaCfgTable=tmnxBsxStatIsaAaCfgTable, tmnxBsxAqpSrcPortHighValue=tmnxBsxAqpSrcPortHighValue, tmnxBsxStatAaSubSdyPktsAdmToSb=tmnxBsxStatAaSubSdyPktsAdmToSb, tmnxBsxAaWap1xTable=tmnxBsxAaWap1xTable, tmnxBsxHttpRdStatEntry=tmnxBsxHttpRdStatEntry, TmnxBsxAaSubscriberType=TmnxBsxAaSubscriberType, tmnxBsxProtAdminState=tmnxBsxProtAdminState, tmnxBsxIsaAaGrpSwitchover=tmnxBsxIsaAaGrpSwitchover, tmnxBsxIsaAaGrpFlowFullClear=tmnxBsxIsaAaGrpFlowFullClear, tmnxBsxNotifyPrefix=tmnxBsxNotifyPrefix, tmnxBsxTransitIpPolicyId=tmnxBsxTransitIpPolicyId, tmnxBsxTransitIpPolicyAddrType=tmnxBsxTransitIpPolicyAddrType, tmnxBsxAppProfCharValName=tmnxBsxAppProfCharValName, tmnxBsxTransitGroups=tmnxBsxTransitGroups, tmnxBsxGrpMdaCapacityCost=tmnxBsxGrpMdaCapacityCost, TmnxBsxIsaAaGroupIndex=TmnxBsxIsaAaGroupIndex, tmnxBsxRadApRowStatus=tmnxBsxRadApRowStatus, tmnxBsxStatAaSubHCPktsDnyFmSb=tmnxBsxStatAaSubHCPktsDnyFmSb, tmnxBsxHttpRedirEnabled=tmnxBsxHttpRedirEnabled, tmnxBsxStatAaOctsDnyFmSb=tmnxBsxStatAaOctsDnyFmSb, tmnxBsxIsaAaGrpFailToMode=tmnxBsxIsaAaGrpFailToMode, tmnxBsxMdaScalars=tmnxBsxMdaScalars, tmnxBsxGrpStatusFlowSetupRate=tmnxBsxGrpStatusFlowSetupRate, tmnxBsxAaGrpPartEntry=tmnxBsxAaGrpPartEntry, tmnxBsxIsaAaGrpCapCostThres=tmnxBsxIsaAaGrpCapCostThres, tmnxBsxHttpEnrichDescription=tmnxBsxHttpEnrichDescription, tmnxBsxRadApName=tmnxBsxRadApName, tmnxBsxGrpStatusEgrQHCDroOutPOcts=tmnxBsxGrpStatusEgrQHCDroOutPOcts, TmnxBsxAaSubAcctLossReason=TmnxBsxAaSubAcctLossReason, tmnxBsxTransIpPolRadCoAAudit=tmnxBsxTransIpPolRadCoAAudit, tmnxBsxAqpAaSubscriberType=tmnxBsxAqpAaSubscriberType, tmnxBsxStatAaSubFlwsAdmFmSb=tmnxBsxStatAaSubFlwsAdmFmSb, tmnxBsxAarpInstId=tmnxBsxAarpInstId, tmnxBsxAppFilterApplication=tmnxBsxAppFilterApplication, tmnxBsxStatAaAcctCfgPolicy=tmnxBsxStatAaAcctCfgPolicy, TmnxBsxAarpServPointType=TmnxBsxAarpServPointType, tmnxBsxGrpStatusHCPktsDisCongMda=tmnxBsxGrpStatusHCPktsDisCongMda, tmnxBsxHttpEnrichHCMissngSubData=tmnxBsxHttpEnrichHCMissngSubData, tmnxBsxRadApServerRetry=tmnxBsxRadApServerRetry, tmnxBsxHttpRdStatHCNotRedirFType=tmnxBsxHttpRdStatHCNotRedirFType, tmnxBsxAqpTable=tmnxBsxAqpTable, tmnxBsxPolicerDescription=tmnxBsxPolicerDescription, tmnxBsxComplianceV8v0=tmnxBsxComplianceV8v0, tmnxBsxAppGrpStorageType=tmnxBsxAppGrpStorageType, tmnxBsxAqpCharOperator=tmnxBsxAqpCharOperator, tmnxBsxCflowdExpStatEntry=tmnxBsxCflowdExpStatEntry, tmnxBsxIsaAaGrpToSubSchPolicy=tmnxBsxIsaAaGrpToSubSchPolicy, tmnxBsxGrpMdaTransPrefEntries=tmnxBsxGrpMdaTransPrefEntries, tmnxBsxAaWap1xEntry=tmnxBsxAaWap1xEntry, tmnxBsxTransIpPlcyAddrSubscriber=tmnxBsxTransIpPlcyAddrSubscriber, tmnxBsxRadApServerSrcAddr=tmnxBsxRadApServerSrcAddr, tmnxBsxStatAaSubMedDurFlws=tmnxBsxStatAaSubMedDurFlws, tmnxBsxStatAaSubSdyHCPktsDnyToSb=tmnxBsxStatAaSubSdyHCPktsDnyToSb, tmnxBsxMobileGatewayGroups=tmnxBsxMobileGatewayGroups, tmnxBsxHttpRedirErrRowLastCh=tmnxBsxHttpRedirErrRowLastCh, tmnxBsxAaSubSumMdaSlotNum=tmnxBsxAaSubSumMdaSlotNum, tmnxBsxTransPrefSubEntry=tmnxBsxTransPrefSubEntry, tmnxBsxAppFilterServerPortHigh=tmnxBsxAppFilterServerPortHigh, tmnxBsxGrpStatusSubsAverage=tmnxBsxGrpStatusSubsAverage, tmnxBsxStatAaHCOctsAdmToSb=tmnxBsxStatAaHCOctsAdmToSb, tmnxBsxAaGrpPartRowLastChange=tmnxBsxAaGrpPartRowLastChange, tmnxBsxIsaAaGrpFromSubQuePolicy=tmnxBsxIsaAaGrpFromSubQuePolicy, tmnxBsxChargeGrpExportId=tmnxBsxChargeGrpExportId, tmnxBsxGrpStatusEgrQHCFwdOutPPkts=tmnxBsxGrpStatusEgrQHCFwdOutPPkts, TmnxBsxAarpServPointRole=TmnxBsxAarpServPointRole, tmnxBsxGrpStatusHCPktsIn=tmnxBsxGrpStatusHCPktsIn, tmnxBsxCustProtExprOperator=tmnxBsxCustProtExprOperator, tmnxBsxStatAaDiscontTime=tmnxBsxStatAaDiscontTime, tmnxBsxCflowdExpStatDiscontTime=tmnxBsxCflowdExpStatDiscontTime, tmnxBsxGrpStatusPktsDiscPolicy=tmnxBsxGrpStatusPktsDiscPolicy, tmnxBsxOvrdAaSubCharRowStatus=tmnxBsxOvrdAaSubCharRowStatus, tmnxBsxTransPrefSumNetAddrType=tmnxBsxTransPrefSumNetAddrType, tmnxBsxGrpStatusHCPktSzIncPk=tmnxBsxGrpStatusHCPktSzIncPk, tmnxBsxHttpRdStatSizeExceededLo=tmnxBsxHttpRdStatSizeExceededLo, tmnxBsxCflowdExpEntry=tmnxBsxCflowdExpEntry, tmnxBsxGrpStatusEgrQFwdOutPPkts=tmnxBsxGrpStatusEgrQFwdOutPPkts, tmnxBsxTransIpPlcyAddrRowStatus=tmnxBsxTransIpPlcyAddrRowStatus, tmnxBsxStatAaAcctCfgType=tmnxBsxStatAaAcctCfgType, tmnxBsxAaSubTransitIpPolicyId=tmnxBsxAaSubTransitIpPolicyId, tmnxBsxStatAaSubFlwsAdmToSb=tmnxBsxStatAaSubFlwsAdmToSb, tmnxBsxStatAaHCLngDurFlws=tmnxBsxStatAaHCLngDurFlws, tmnxBsxAaSubscribersUnassigned=tmnxBsxAaSubscribersUnassigned, tmnxBsxGrpStatusHCPktSzDecPk=tmnxBsxGrpStatusHCPktSzDecPk, tmnxBsxAaGrpPartTable=tmnxBsxAaGrpPartTable, tmnxBsxGrpStatusPktsDisCongOut=tmnxBsxGrpStatusPktsDisCongOut, tmnxBsxStatIsaAaCfgCollStats=tmnxBsxStatIsaAaCfgCollStats)
