#
# PySNMP MIB module CISCO-ENTITY-REDUNDANCY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-ENTITY-REDUNDANCY-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:57:09 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion")
CeRedunSwitchCommand, CeRedunMbrStatus, CeRedunStateCategories, CeRedunArch, CeRedunReasonCategories, CeRedunType, CeRedunMode, CeRedunScope = mibBuilder.importSymbols("CISCO-ENTITY-REDUNDANCY-TC-MIB", "CeRedunSwitchCommand", "CeRedunMbrStatus", "CeRedunStateCategories", "CeRedunArch", "CeRedunReasonCategories", "CeRedunType", "CeRedunMode", "CeRedunScope")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
PhysicalIndex, = mibBuilder.importSymbols("ENTITY-MIB", "PhysicalIndex")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Bits, NotificationType, ModuleIdentity, IpAddress, MibIdentifier, Gauge32, Unsigned32, Counter32, ObjectIdentity, Integer32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Bits", "NotificationType", "ModuleIdentity", "IpAddress", "MibIdentifier", "Gauge32", "Unsigned32", "Counter32", "ObjectIdentity", "Integer32", "iso")
StorageType, TruthValue, DisplayString, TextualConvention, TimeStamp, RowStatus, AutonomousType = mibBuilder.importSymbols("SNMPv2-TC", "StorageType", "TruthValue", "DisplayString", "TextualConvention", "TimeStamp", "RowStatus", "AutonomousType")
ciscoEntityRedunMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 498))
ciscoEntityRedunMIB.setRevisions(('2005-10-01 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoEntityRedunMIB.setRevisionsDescriptions(('The initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoEntityRedunMIB.setLastUpdated('200510010000Z')
if mibBuilder.loadTexts: ciscoEntityRedunMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoEntityRedunMIB.setContactInfo('Cisco Systems, Inc. Customer Service Postal: 170 W. Tasman Drive San Jose, CA 95134-1706 USA Tel: +1 800 553-NETS Email: cs-ha@cisco.com')
if mibBuilder.loadTexts: ciscoEntityRedunMIB.setDescription("This management information module supports configuration, control and monitoring of redundancy protection for various kinds of components on Cisco managed devices. It is meant to be generic enough to handle basic redundancy control and monitoring for many types of redundant member components and redundancy architectures as long as there is an Entity MIB entPhysicalIndex and entPhysicalVendorType assigned to each member component. It is designed so that the tables can be augmented in other extension MIBS which build upon this MIB by adding additional objects that may be specific to a particular type of redundancy or member component. This MIB can also be used in cases where some types of redundancy groups and members don't require explicit user configuration. One example may be redundant fan assemblies. In those cases, the managed system should internally assign group and member indexes, so that it can provide read-only access to the group and member tables. This allows MIB monitoring for these types of redundant entities. ")
ciscoEntityRedunMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 498, 0))
ciscoEntityRedunMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 498, 1))
ciscoEntityRedunMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 498, 2))
ceRedunGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 498, 1, 1))
ceRedunGroupTypesTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 498, 1, 1, 1), )
if mibBuilder.loadTexts: ceRedunGroupTypesTable.setStatus('current')
if mibBuilder.loadTexts: ceRedunGroupTypesTable.setDescription('This table lists the basic types of redundancy groups supported on the managed device along with additional information about each group type. ')
ceRedunGroupTypesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 498, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-ENTITY-REDUNDANCY-MIB", "ceRedunGroupTypeIndex"))
if mibBuilder.loadTexts: ceRedunGroupTypesEntry.setStatus('current')
if mibBuilder.loadTexts: ceRedunGroupTypesEntry.setDescription('A conceptual row in the ceRedunGroupTypesTable.')
ceRedunGroupTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 498, 1, 1, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: ceRedunGroupTypeIndex.setStatus('current')
if mibBuilder.loadTexts: ceRedunGroupTypeIndex.setDescription('An index assigned for each type of redundancy group supported on a managed system that requires its own table listing entPhysicalVendorTypes allowed as members for its groups. For instance, port groups have a different set of allowed entPhysicalVendorTypes than linecard groups. So each should have a separate ceRedunGroupTypeIndex. For this example, a command line interface may differentiate by using separate keywords (port-group versus linecard-group) rather than exposing the ceRedunGroupTypeIndex to a user. ')
ceRedunGroupTypeName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 498, 1, 1, 1, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceRedunGroupTypeName.setStatus('current')
if mibBuilder.loadTexts: ceRedunGroupTypeName.setDescription("The textual name of the redundancy group type. The value of this object should be the name of the redundancy group type assigned by the local device as it would appear for display commands entered at the device's `console'. Examples are port-group, linecard-group, fan-group, etc. ")
ceRedunGroupCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 498, 1, 1, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceRedunGroupCounts.setStatus('current')
if mibBuilder.loadTexts: ceRedunGroupCounts.setDescription('The current count of redundancy groups for a specific ceRedunGroupTypeIndex. This count indicates the number of rows in the ceRedunGroupTable for a specific ceRedunGroupTypeIndex. ')
ceRedunNextUnusedGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 498, 1, 1, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceRedunNextUnusedGroupIndex.setStatus('current')
if mibBuilder.loadTexts: ceRedunNextUnusedGroupIndex.setDescription("The next unused group index available for configuring a new redundancy group for this group type. In order to avoid unnecessary collisions between competing management stations, `adjacent' retrievals of this object should give different index values. But in order to prevent leaks of unused indexes, it is acceptable to cycle through and report unused indexes again if all of the indexes have already been retrieved previously, yet some remain unused. So the retrieval of an index should not be considered a permanent longterm reservation. If there are no more unused group indexes available, the managed system should return 0. Note: 0 may be an acceptable group index on some managed systems. ")
ceRedunMaxMbrsInGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 498, 1, 1, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceRedunMaxMbrsInGroup.setStatus('current')
if mibBuilder.loadTexts: ceRedunMaxMbrsInGroup.setDescription('The maximum number of primary plus secondary members allowed in a group for a specific ceRedunGroupTypeIndex. If only 1:1 or 1+1 is supported, this should be 2. If the maximum number is unknown or not determinable, the managed system should return 0. ')
ceRedunUsesGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 498, 1, 1, 1, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceRedunUsesGroupName.setStatus('current')
if mibBuilder.loadTexts: ceRedunUsesGroupName.setDescription("Boolean to indicate whether this type of redundancy group uses the ceRedunGroupString object as a group name identifier. If it is reported as 'true', the ceRedunGroupString name must contain no internal spaces. If it's reported as 'false', the ceRedunGroupString object is just used as an optional description for the group rather than as the group name. ")
ceRedunGroupDefinitionChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 498, 1, 1, 1, 1, 7), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceRedunGroupDefinitionChanged.setStatus('current')
if mibBuilder.loadTexts: ceRedunGroupDefinitionChanged.setDescription('The value of sysUpTime when there was the most recent change to any objects in the ceRedunGroupTypesTable except for ceRedunGroupCounts or ceRedunNextUnusedGroupIndex. The sysUpTime should also reflect changes to either the ceRedunVendorTypesTable, ceRedunInternalStatesTable or ceRedunSwitchoverReasonTable. Normally these objects are static, but if there was an in service upgrade to the software image of the managed system then the tables may change and should be read again. If there has been no change since the last initialization of the local network management system, this object should contain the value 0. ')
ceRedunVendorTypesTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 498, 1, 1, 2), )
if mibBuilder.loadTexts: ceRedunVendorTypesTable.setStatus('current')
if mibBuilder.loadTexts: ceRedunVendorTypesTable.setDescription('This table lists all entPhysicalVendorTypes allowed as members for a specific ceRedunGroupTypeIndex on the managed device, inclusive for all configurable values for ceRedunType, ceRedunScope, ceRedunArch, etc. If the ceRedunGroupDefinitionChanged object changes for a particular ceRedunGroupTypeIndex, then this table may have changed and should be read again. Note: Although a specific ceRedunGroupTypeIndex may allow groups of different entPhysicalVendorTypes, managed devices typically enforce all members within a specific group to have the same entPhysicalVendorType. ')
ceRedunVendorTypesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 498, 1, 1, 2, 1), ).setIndexNames((0, "CISCO-ENTITY-REDUNDANCY-MIB", "ceRedunGroupTypeIndex"), (0, "CISCO-ENTITY-REDUNDANCY-MIB", "ceRedunVendorType"))
if mibBuilder.loadTexts: ceRedunVendorTypesEntry.setStatus('current')
if mibBuilder.loadTexts: ceRedunVendorTypesEntry.setDescription('A conceptual row in the ceRedunVendorTypesTable.')
ceRedunVendorType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 498, 1, 1, 2, 1, 1), AutonomousType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceRedunVendorType.setStatus('current')
if mibBuilder.loadTexts: ceRedunVendorType.setDescription('Each row lists a specific entPhysicalVendorType which is allowed as a member for groups of the type specified by the ceRedunGroupTypeIndex. Note: Normally an index object would have MAX-ACCESS of not-accessible, but since the table contains only this index object, the access is read-only. ')
ceRedunInternalStatesTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 498, 1, 1, 3), )
if mibBuilder.loadTexts: ceRedunInternalStatesTable.setStatus('current')
if mibBuilder.loadTexts: ceRedunInternalStatesTable.setDescription('This table allows the managed system to report a read-only list of internal state numbers and the corresponding descriptions which apply for the members of a particular redundancy group type. If the ceRedunGroupDefinitionChanged object changes for a particular ceRedunGroupTypeIndex, then this table may have changed and should be read again. ')
ceRedunInternalStatesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 498, 1, 1, 3, 1), ).setIndexNames((0, "CISCO-ENTITY-REDUNDANCY-MIB", "ceRedunGroupTypeIndex"), (0, "CISCO-ENTITY-REDUNDANCY-MIB", "ceRedunInternalStateIndex"))
if mibBuilder.loadTexts: ceRedunInternalStatesEntry.setStatus('current')
if mibBuilder.loadTexts: ceRedunInternalStatesEntry.setDescription('A conceptual row in the ceRedunInternalStatesTable. ')
ceRedunInternalStateIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 498, 1, 1, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: ceRedunInternalStateIndex.setStatus('current')
if mibBuilder.loadTexts: ceRedunInternalStateIndex.setDescription('This is an index corresponding to an internal state of a member for a redundancy group of type ceRedunGroupTypeIndex. The state may include any of the initialization or intermediate progression states necessary to reach a stable active or standby state. ')
ceRedunStateCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 498, 1, 1, 3, 1, 2), CeRedunStateCategories()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceRedunStateCategory.setStatus('current')
if mibBuilder.loadTexts: ceRedunStateCategory.setDescription('This places the specific internal state into one of several categories of internal states which are significant for redundancy. ')
ceRedunInternalStateDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 498, 1, 1, 3, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceRedunInternalStateDescr.setStatus('current')
if mibBuilder.loadTexts: ceRedunInternalStateDescr.setDescription('This is a string description for the specific internal member state. ')
ceRedunSwitchoverReasonTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 498, 1, 1, 4), )
if mibBuilder.loadTexts: ceRedunSwitchoverReasonTable.setStatus('current')
if mibBuilder.loadTexts: ceRedunSwitchoverReasonTable.setDescription('This table allows the managed system to report a read-only list of switchover reason indexes and the corresponding descriptions. If the ceRedunGroupDefinitionChanged object changes for a particular ceRedunGroupTypeIndex, then this table may have changed and should be read again. ')
ceRedunSwitchoverReasonEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 498, 1, 1, 4, 1), ).setIndexNames((0, "CISCO-ENTITY-REDUNDANCY-MIB", "ceRedunGroupTypeIndex"), (0, "CISCO-ENTITY-REDUNDANCY-MIB", "ceRedunSwitchoverReasonIndex"))
if mibBuilder.loadTexts: ceRedunSwitchoverReasonEntry.setStatus('current')
if mibBuilder.loadTexts: ceRedunSwitchoverReasonEntry.setDescription('A conceptual row in the ceRedunSwitchoverReasonTable. ')
ceRedunSwitchoverReasonIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 498, 1, 1, 4, 1, 1), Unsigned32())
if mibBuilder.loadTexts: ceRedunSwitchoverReasonIndex.setStatus('current')
if mibBuilder.loadTexts: ceRedunSwitchoverReasonIndex.setDescription('This is an index corresponding to a switchover reason code. ')
ceRedunReasonCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 498, 1, 1, 4, 1, 2), CeRedunReasonCategories()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceRedunReasonCategory.setStatus('current')
if mibBuilder.loadTexts: ceRedunReasonCategory.setDescription('This categorizes the specific switchover reason into one of several categories. ')
ceRedunSwitchoverReasonDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 498, 1, 1, 4, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceRedunSwitchoverReasonDescr.setStatus('current')
if mibBuilder.loadTexts: ceRedunSwitchoverReasonDescr.setDescription('This is a string description for the specific switchover reason. ')
ceRedunGroupLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 498, 1, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceRedunGroupLastChanged.setStatus('current')
if mibBuilder.loadTexts: ceRedunGroupLastChanged.setDescription("The value of sysUpTime corresponding to the last change for any object in the ceRedunGroupTable. The source of the change can be due to either an SNMP message affecting an object in the table or due to any other source of user input such as a command line interface. The timestamp applies to all read-create objects even for cases where the managed device only supports read-only access because it doesn't require user configuration of those objects. If there has been no change since the last time the sysUpTime was zero then report the sysUpTime as zero. ")
ceRedunGroupTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 498, 1, 1, 6), )
if mibBuilder.loadTexts: ceRedunGroupTable.setStatus('current')
if mibBuilder.loadTexts: ceRedunGroupTable.setDescription('This table lists group configuration and status objects for a specific redundancy group. However, the members are configured separately in the ceRedunMbrTable. ')
ceRedunGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 498, 1, 1, 6, 1), ).setIndexNames((0, "CISCO-ENTITY-REDUNDANCY-MIB", "ceRedunGroupTypeIndex"), (0, "CISCO-ENTITY-REDUNDANCY-MIB", "ceRedunGroupIndex"))
if mibBuilder.loadTexts: ceRedunGroupEntry.setStatus('current')
if mibBuilder.loadTexts: ceRedunGroupEntry.setDescription('A conceptual row in the ceRedunGroupTable.')
ceRedunGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 498, 1, 1, 6, 1, 1), Unsigned32())
if mibBuilder.loadTexts: ceRedunGroupIndex.setStatus('current')
if mibBuilder.loadTexts: ceRedunGroupIndex.setDescription('A group number assigned to a particular redundancy group. A group consists of one or more primary members which are protected by one or more secondary members. ')
ceRedunGroupString = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 498, 1, 1, 6, 1, 2), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ceRedunGroupString.setStatus('current')
if mibBuilder.loadTexts: ceRedunGroupString.setDescription("If ceRedunUsesGroupName is 'true' for this redundancy group type, this object is a group name identifier and the value of this object has to be specified and should contain no internal spaces when configuring this group entry. If ceRedunUsesGroupName is 'false', the ceRedunGroupString object is just used as an optional description for the group rather than as the group name. In that case it's allowed to have spaces in the string. ")
ceRedunGroupRedunType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 498, 1, 1, 6, 1, 3), CeRedunType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ceRedunGroupRedunType.setStatus('current')
if mibBuilder.loadTexts: ceRedunGroupRedunType.setDescription("The intended type of redundancy protection such as 'yCable' or 'aps' for this redundancy group. ")
ceRedunGroupScope = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 498, 1, 1, 6, 1, 4), CeRedunScope().clone('local')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ceRedunGroupScope.setStatus('current')
if mibBuilder.loadTexts: ceRedunGroupScope.setDescription('This object determines the local/remote scope of the redundancy group. This object may not be modified if the associated ceRedunGroupRowStatus object is equal to active(1). ')
ceRedunGroupArch = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 498, 1, 1, 6, 1, 5), CeRedunArch().clone('onePlusOne')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ceRedunGroupArch.setStatus('current')
if mibBuilder.loadTexts: ceRedunGroupArch.setDescription('The architecture of the redundancy group, such as 1:1 or 1:n, etc. This object may not be modified if the associated ceRedunGroupRowStatus object is equal to active(1). ')
ceRedunGroupRevert = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 498, 1, 1, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nonrevertive", 1), ("revertive", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ceRedunGroupRevert.setStatus('current')
if mibBuilder.loadTexts: ceRedunGroupRevert.setDescription('The revertive mode of the redundancy group. nonrevertive(1) The secondary member remains active until another switchable event takes place. revertive(2) When the condition that caused a switch to the secondary member has been cleared, a switch is made back to the primary member after a configured delay. Switching should normally be revertive for the 1:n and load-sharing architectures. Switching may optionally be revertive with the 1:1 and 1+1 architectures. This object may not be modified if the associated ceRedunGroupRowStatus object is equal to active(1). ')
ceRedunGroupWaitToRestore = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 498, 1, 1, 6, 1, 7), Unsigned32().clone(300)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: ceRedunGroupWaitToRestore.setStatus('current')
if mibBuilder.loadTexts: ceRedunGroupWaitToRestore.setDescription('The Wait To Restore period in seconds. This object is only applicable to groups which are configured as revertive and does not need to be instantiated for groups which are non-revertive. After clearing of a condition that necessitated an automatic switch, the wait to restore period must elapse before reverting. This is intended to avoid rapid switch oscillations. This object may not be modified if the associated ceRedunGroupRowStatus object is equal to active(1). ')
ceRedunGroupDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 498, 1, 1, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unidirectional", 1), ("bidirectional", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ceRedunGroupDirection.setStatus('current')
if mibBuilder.loadTexts: ceRedunGroupDirection.setDescription('This object is applicable only for those types of redundancy such as APS where switchovers can take place independently at near and far ends of a pair of interconnecting links and does not need to be instantiated for other redundancy types. unidirectional(1) Switchovers are allowed to take place independently at protection equipment at the near and far ends of interconnecting links. bidirectional(2) When a switchover happens at the near end protection equipment there is some form of signalling which should cause a corresponding switchover at the far end protection equipment. This object may not be modified if the associated ceRedunGroupRowStatus object is equal to active(1). ')
ceRedunGroupStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 498, 1, 1, 6, 1, 9), StorageType().clone('volatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ceRedunGroupStorageType.setStatus('current')
if mibBuilder.loadTexts: ceRedunGroupStorageType.setDescription("The storage type for this conceptual row. By default, the row will not be saved into non-volatile memory unless this object is set to the value nonVolatile. Note: Conceptual rows having the value 'readOnly' can be used for redundancy groups that aren't configurable and need not allow write-access to any columnar objects in the row. ")
ceRedunGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 498, 1, 1, 6, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ceRedunGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: ceRedunGroupRowStatus.setDescription("The configuration status of this redundancy group entry. An entry may not exist in the active RowStatus state unless all configurable read-create objects in the entry have an appropriate value. No other read-create objects in this group may be modified if the ceRedunGroupRowStatus object is equal to active(1). When set to 'notInService', changes may be made to configurable read-create objects. Also, associated ceRedunMbrTable objects may be added, deleted and modified. After modifying a conceptual row in this table, the management client must set this object to 'active' in order for the changes to take effect. ")
ceRedunMembers = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 498, 1, 2))
ceRedunMbrLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 498, 1, 2, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceRedunMbrLastChanged.setStatus('current')
if mibBuilder.loadTexts: ceRedunMbrLastChanged.setDescription("The value of sysUpTime corresponding to the last change to any read-create objects in this table. The source of the change can be due to either an SNMP message affecting this table or due to any other source of user input such as a command line interface. The timestamp applies to all read-create objects even for cases where the managed device only supports read-only access because it doesn't require user configuration of those objects. If there has been no change since the last time the sysUpTime was zero then report the sysUpTime as zero. ")
ceRedunMbrConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 498, 1, 2, 2), )
if mibBuilder.loadTexts: ceRedunMbrConfigTable.setStatus('current')
if mibBuilder.loadTexts: ceRedunMbrConfigTable.setDescription('This table lists the group members and generic redundancy objects which are associated with configuring redundancy group members. The switchover granularity should be for one member at a time. In other words if a member is allowed to be an individual port, then switchovers on multi-port linecards would be expected to take place independently for each port on the linecard. But if the members are full linecards, then all ports on the linecard would be expected to switch at the same time. ')
ceRedunMbrConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 498, 1, 2, 2, 1), ).setIndexNames((0, "CISCO-ENTITY-REDUNDANCY-MIB", "ceRedunGroupTypeIndex"), (0, "CISCO-ENTITY-REDUNDANCY-MIB", "ceRedunGroupIndex"), (0, "CISCO-ENTITY-REDUNDANCY-MIB", "ceRedunMbrNumber"))
if mibBuilder.loadTexts: ceRedunMbrConfigEntry.setStatus('current')
if mibBuilder.loadTexts: ceRedunMbrConfigEntry.setDescription('A conceptual row in the ceRedunMbrConfigTable. ')
ceRedunMbrNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 498, 1, 2, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: ceRedunMbrNumber.setStatus('current')
if mibBuilder.loadTexts: ceRedunMbrNumber.setDescription('This field should be assigned as a unique member number within a redundancy group. The value 0 always indicates a secondary member. Primary members should have numbers which are higher than secondary members. Note: This definition of member values, including the use of the value 0 for the secondary member allows compatibility with existing 1:n SONET APS channel numbering. Yet the numbering definition has also been expanded to allow support for the most general m:n redundancy architectures. ')
ceRedunMbrPhysIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 498, 1, 2, 2, 1, 2), PhysicalIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ceRedunMbrPhysIndex.setStatus('current')
if mibBuilder.loadTexts: ceRedunMbrPhysIndex.setDescription('This field specifies the entity PhysicalIndex which is being configured as a redundancy member. It is the responsibility of the managed device to enforce any restrictions on matching entPhysicalVendorType, slot positions etc. among members of the same redundancy group. ')
ceRedunMbrMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 498, 1, 2, 2, 1, 3), CeRedunMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ceRedunMbrMode.setStatus('current')
if mibBuilder.loadTexts: ceRedunMbrMode.setDescription("This field is set to the 'primary' (working) or 'secondary' (protection) role within the redundancy group. The designation as 'primary' or 'secondary' is configured and is static. It doesn't change due to a switchover. ")
ceRedunMbrAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 498, 1, 2, 2, 1, 4), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ceRedunMbrAddressType.setStatus('current')
if mibBuilder.loadTexts: ceRedunMbrAddressType.setDescription("This field specifies the type of address used for the ceRedunMbrAddress object. It does not need to be instantiated when the ceRedunGroupScope value is 'remoteSystem' or 'remoteChassis'. ")
ceRedunMbrRemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 498, 1, 2, 2, 1, 5), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ceRedunMbrRemoteAddress.setStatus('current')
if mibBuilder.loadTexts: ceRedunMbrRemoteAddress.setDescription("This field specifies the remote management address of the shelf or system where the peer member is expected to be configured. It does not need to be instantiated when the ceRedunGroupScope value is 'remoteSystem' or 'remoteChassis'. ")
ceRedunMbrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 498, 1, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("low", 1), ("high", 2))).clone('low')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ceRedunMbrPriority.setStatus('current')
if mibBuilder.loadTexts: ceRedunMbrPriority.setDescription('The priority of the member. For 1:n architectures if the secondary member has already become active for a primary member with a lower priority, it can instead take over for a different primary member if that member has higher priority. This field is only applicable if the member is to be included in a group using the 1:n architecture. It is not applicable if the member is to be included in a group using the 1:1 or 1+1 architecture, and is ignored in that case. ')
ceRedunMbrStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 498, 1, 2, 2, 1, 8), StorageType().clone('volatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ceRedunMbrStorageType.setStatus('current')
if mibBuilder.loadTexts: ceRedunMbrStorageType.setDescription("The storage type for this conceptual row. By default, the row will not be saved into non-volatile memory unless this object is set to the value nonVolatile. Note: Conceptual rows having the value 'readOnly' can be used for redundancy groups that aren't configurable and need not allow write-access to any columnar objects in the row. ")
ceRedunMbrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 498, 1, 2, 2, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ceRedunMbrRowStatus.setStatus('current')
if mibBuilder.loadTexts: ceRedunMbrRowStatus.setDescription('The configuration status of this member entry. A row in the ceRedunMbrConfigTable may not be created, deleted, or set to notInService if the associated ceRedunGroupRowStatus object is equal to active. However, if the ceRedunGroupRowStatus object is equal to notInService, a row may be created, deleted or modified. In other words, a member may not be added, deleted or modified if the including group is active. ')
ceRedunMbrStatusLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 498, 1, 2, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceRedunMbrStatusLastChanged.setStatus('current')
if mibBuilder.loadTexts: ceRedunMbrStatusLastChanged.setDescription('The value of sysUpTime corresponding to the last change to any objects in the ceRedunMbrStatusTable table. If there has been no change since the last time the sysUpTime was zero then report the sysUpTime as zero. ')
ceRedunMbrStatusTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 498, 1, 2, 4), )
if mibBuilder.loadTexts: ceRedunMbrStatusTable.setStatus('current')
if mibBuilder.loadTexts: ceRedunMbrStatusTable.setDescription('This table lists the redundancy status and other read-only redundancy objects which are associated with redundancy group members. Status associated with member alarm conditions should be reported separately using the CISCO-ENTITY-ALARM-MIB. ')
ceRedunMbrStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 498, 1, 2, 4, 1), )
ceRedunMbrConfigEntry.registerAugmentions(("CISCO-ENTITY-REDUNDANCY-MIB", "ceRedunMbrStatusEntry"))
ceRedunMbrStatusEntry.setIndexNames(*ceRedunMbrConfigEntry.getIndexNames())
if mibBuilder.loadTexts: ceRedunMbrStatusEntry.setStatus('current')
if mibBuilder.loadTexts: ceRedunMbrStatusEntry.setDescription('A conceptual row in the ceRedunMbrStatusTable. ')
ceRedunMbrStatusCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 498, 1, 2, 4, 1, 1), CeRedunMbrStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceRedunMbrStatusCurrent.setStatus('current')
if mibBuilder.loadTexts: ceRedunMbrStatusCurrent.setDescription('Indicates the current status bitflags for the member. ')
ceRedunMbrProtectingMbr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 498, 1, 2, 4, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceRedunMbrProtectingMbr.setStatus('current')
if mibBuilder.loadTexts: ceRedunMbrProtectingMbr.setDescription('This field is valid only for a secondary member. When the secondary member is active, this value indicates the primary member it has taken over for. When the secondary member is standby, it should return its own member number. Primary members should return their own member number. ')
ceRedunMbrInternalState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 498, 1, 2, 4, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceRedunMbrInternalState.setStatus('current')
if mibBuilder.loadTexts: ceRedunMbrInternalState.setDescription('This is the current internal state index for a member. The corresponding state category and description can be found in the ceRedunInternalStatesTable. It may include any of the initialization or intermediate progression states necessary to reach a stable active or standby state. ')
ceRedunMbrSwitchoverCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 498, 1, 2, 4, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceRedunMbrSwitchoverCounts.setStatus('current')
if mibBuilder.loadTexts: ceRedunMbrSwitchoverCounts.setDescription('The number of times this primary or secondary member has changed from being active to being standby due to a switchover. The counter should monotonically increase but never wrap or decrease, except at a system restart. When queried for a secondary member that has never gone active since the last system restart, then no switchovers should be reported so it should return 0. ')
ceRedunMbrLastSwitchover = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 498, 1, 2, 4, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceRedunMbrLastSwitchover.setStatus('current')
if mibBuilder.loadTexts: ceRedunMbrLastSwitchover.setDescription('The value of sysUpTime when this primary member last completed a switchover to the secondary member. If this member has never switched to standby, or this is a secondary member, the value 0 should be returned. ')
ceRedunMbrSwitchoverReason = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 498, 1, 2, 4, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceRedunMbrSwitchoverReason.setStatus('current')
if mibBuilder.loadTexts: ceRedunMbrSwitchoverReason.setDescription('The reported reason code for the last switchover. The corresponding reason category and description can be found from the ceRedunSwitchoverReasonTable. ')
ceRedunMbrSwitchoverSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 498, 1, 2, 4, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceRedunMbrSwitchoverSeconds.setStatus('current')
if mibBuilder.loadTexts: ceRedunMbrSwitchoverSeconds.setDescription('The cumulative switching duration time in seconds. For a primary member, this is the cumulative number of seconds that service was carried by the secondary member. For the secondary member, this is the cumulative number of seconds that the secondary member has been used to protect a primary member. This information is only valid if revertive switching is enabled. The value 0 should be returned otherwise. ')
ceRedunCommandTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 498, 1, 3), )
if mibBuilder.loadTexts: ceRedunCommandTable.setStatus('current')
if mibBuilder.loadTexts: ceRedunCommandTable.setDescription('This table allows switchover commands to be sent to members of configured redundancy groups. ')
ceRedunCommandEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 498, 1, 3, 1), ).setIndexNames((0, "CISCO-ENTITY-REDUNDANCY-MIB", "ceRedunGroupTypeIndex"), (0, "CISCO-ENTITY-REDUNDANCY-MIB", "ceRedunGroupIndex"))
if mibBuilder.loadTexts: ceRedunCommandEntry.setStatus('current')
if mibBuilder.loadTexts: ceRedunCommandEntry.setDescription('A conceptual row in the ceRedunCommandTable. This row exists only if the associated ceRedunGroupEntry is active and has at least one primary and secondary member active. ')
ceRedunCommandMbrNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 498, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ceRedunCommandMbrNumber.setStatus('current')
if mibBuilder.loadTexts: ceRedunCommandMbrNumber.setDescription('Specifies the redundancy group member to which the switch command applies. The value -1 for this object is only valid for a clear command and indicates the clear command applies to all members of the redundancy group type. ')
ceRedunCommandSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 498, 1, 3, 1, 2), CeRedunSwitchCommand()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ceRedunCommandSwitch.setStatus('current')
if mibBuilder.loadTexts: ceRedunCommandSwitch.setDescription("Allows the initiation of a redundancy switchover command for the redundant member. When a valid member is specified, the command applies to the specified member. If the redundancy switchover command cannot be executed because an equal or higher priority request is in effect, an error is returned. When read, this object returns the last command written which is currently still in effect or 'noCmdInEffect' if no command is currently in effect. And for the specific case of a 'manualSwitchAway' command, some managed devices and redundancy types may do an initial switch, but may optionally not keep the switch in effect as a permanent state. In order to determine the current switchover state of the redundancy group it is necessary to read the ceRedunMbrProtectingMbr object for the secondary member(s). ")
ceRedunEnableSwitchoverNotifs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 498, 1, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ceRedunEnableSwitchoverNotifs.setStatus('current')
if mibBuilder.loadTexts: ceRedunEnableSwitchoverNotifs.setDescription('This object controls whether the system produces ceRedunEventSwitchover notifications. A false value will prevent ceRedunEventSwitchover notifications from being generated by this system. ')
ceRedunEnableStatusChangeNotifs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 498, 1, 5), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ceRedunEnableStatusChangeNotifs.setStatus('current')
if mibBuilder.loadTexts: ceRedunEnableStatusChangeNotifs.setDescription('This object controls whether the system produces ceRedunProtectStatusChange notifications. A false value will prevent ceRedunProtectStatusChange notifications from being generated by this system. ')
ceRedunEventSwitchover = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 498, 0, 1)).setObjects(("CISCO-ENTITY-REDUNDANCY-MIB", "ceRedunMbrProtectingMbr"), ("CISCO-ENTITY-REDUNDANCY-MIB", "ceRedunMbrStatusCurrent"))
if mibBuilder.loadTexts: ceRedunEventSwitchover.setStatus('current')
if mibBuilder.loadTexts: ceRedunEventSwitchover.setDescription('A ceRedunEventSwitchover notification is sent when the ceRedunMbrProtectingMbr object changes value for a secondary member. The objects should correspond to the secondary member which changed its status. The objects should reflect the status following the switchover. ')
ceRedunProtectStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 498, 0, 2)).setObjects(("CISCO-ENTITY-REDUNDANCY-MIB", "ceRedunMbrStatusCurrent"))
if mibBuilder.loadTexts: ceRedunProtectStatusChange.setStatus('current')
if mibBuilder.loadTexts: ceRedunProtectStatusChange.setDescription("A ceRedunProtectStatusChange notification is sent when a protectionProvided bit gets set or cleared for an active member. This is intended to allow notification when protection becomes available or unavailable for an active member of a redundancy group. It should be suppressed if there's a simultaneous change to the standby bit, which would indicate a switchover trap is being sent. Object values sent should reflect the newer status following the change. ")
ceRedunCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 498, 2, 1))
ceRedunGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 498, 2, 2))
ceRedunCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 498, 2, 1, 1)).setObjects(("CISCO-ENTITY-REDUNDANCY-MIB", "ceRedunGroupTypeGroup"), ("CISCO-ENTITY-REDUNDANCY-MIB", "ceRedunGroupObjects"), ("CISCO-ENTITY-REDUNDANCY-MIB", "ceRedunMemberConfig"), ("CISCO-ENTITY-REDUNDANCY-MIB", "ceRedunMemberStatus"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ceRedunCompliance = ceRedunCompliance.setStatus('current')
if mibBuilder.loadTexts: ceRedunCompliance.setDescription('The compliance statement for Cisco entity redundancy groups. ')
ceRedunGroupTypeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 498, 2, 2, 1)).setObjects(("CISCO-ENTITY-REDUNDANCY-MIB", "ceRedunNextUnusedGroupIndex"), ("CISCO-ENTITY-REDUNDANCY-MIB", "ceRedunMaxMbrsInGroup"), ("CISCO-ENTITY-REDUNDANCY-MIB", "ceRedunUsesGroupName"), ("CISCO-ENTITY-REDUNDANCY-MIB", "ceRedunGroupDefinitionChanged"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ceRedunGroupTypeGroup = ceRedunGroupTypeGroup.setStatus('current')
if mibBuilder.loadTexts: ceRedunGroupTypeGroup.setDescription('A collection of mandatory objects providing configuration information applicable to redundancy entity group types. ')
ceRedunOptionalGroupTypes = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 498, 2, 2, 2)).setObjects(("CISCO-ENTITY-REDUNDANCY-MIB", "ceRedunGroupTypeName"), ("CISCO-ENTITY-REDUNDANCY-MIB", "ceRedunGroupCounts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ceRedunOptionalGroupTypes = ceRedunOptionalGroupTypes.setStatus('current')
if mibBuilder.loadTexts: ceRedunOptionalGroupTypes.setDescription('A collection of optional objects from the ceRedunGroupTypesTable. ')
ceRedunInternalStates = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 498, 2, 2, 3)).setObjects(("CISCO-ENTITY-REDUNDANCY-MIB", "ceRedunStateCategory"), ("CISCO-ENTITY-REDUNDANCY-MIB", "ceRedunInternalStateDescr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ceRedunInternalStates = ceRedunInternalStates.setStatus('current')
if mibBuilder.loadTexts: ceRedunInternalStates.setDescription('A collection of objects giving internal redundancy state information. ')
ceRedunSwitchoverReason = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 498, 2, 2, 4)).setObjects(("CISCO-ENTITY-REDUNDANCY-MIB", "ceRedunReasonCategory"), ("CISCO-ENTITY-REDUNDANCY-MIB", "ceRedunSwitchoverReasonDescr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ceRedunSwitchoverReason = ceRedunSwitchoverReason.setStatus('current')
if mibBuilder.loadTexts: ceRedunSwitchoverReason.setDescription('A collection of objects giving switchover reason information. ')
ceRedunGroupObjects = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 498, 2, 2, 5)).setObjects(("CISCO-ENTITY-REDUNDANCY-MIB", "ceRedunGroupLastChanged"), ("CISCO-ENTITY-REDUNDANCY-MIB", "ceRedunGroupString"), ("CISCO-ENTITY-REDUNDANCY-MIB", "ceRedunGroupRedunType"), ("CISCO-ENTITY-REDUNDANCY-MIB", "ceRedunGroupScope"), ("CISCO-ENTITY-REDUNDANCY-MIB", "ceRedunGroupArch"), ("CISCO-ENTITY-REDUNDANCY-MIB", "ceRedunGroupStorageType"), ("CISCO-ENTITY-REDUNDANCY-MIB", "ceRedunGroupRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ceRedunGroupObjects = ceRedunGroupObjects.setStatus('current')
if mibBuilder.loadTexts: ceRedunGroupObjects.setDescription('A collection of mandatory objects providing information applicable to redundancy entity groups. ')
ceRedunRevertiveGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 498, 2, 2, 6)).setObjects(("CISCO-ENTITY-REDUNDANCY-MIB", "ceRedunGroupRevert"), ("CISCO-ENTITY-REDUNDANCY-MIB", "ceRedunGroupWaitToRestore"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ceRedunRevertiveGroup = ceRedunRevertiveGroup.setStatus('current')
if mibBuilder.loadTexts: ceRedunRevertiveGroup.setDescription('A collection of objects providing revertive switchover capability. ')
ceRedunBidirectional = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 498, 2, 2, 7)).setObjects(("CISCO-ENTITY-REDUNDANCY-MIB", "ceRedunGroupDirection"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ceRedunBidirectional = ceRedunBidirectional.setStatus('current')
if mibBuilder.loadTexts: ceRedunBidirectional.setDescription('The objects which provide information which is applicable to groups supporting bi-directional operation. ')
ceRedunMemberConfig = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 498, 2, 2, 8)).setObjects(("CISCO-ENTITY-REDUNDANCY-MIB", "ceRedunMbrLastChanged"), ("CISCO-ENTITY-REDUNDANCY-MIB", "ceRedunMbrPhysIndex"), ("CISCO-ENTITY-REDUNDANCY-MIB", "ceRedunMbrMode"), ("CISCO-ENTITY-REDUNDANCY-MIB", "ceRedunMbrStorageType"), ("CISCO-ENTITY-REDUNDANCY-MIB", "ceRedunMbrRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ceRedunMemberConfig = ceRedunMemberConfig.setStatus('current')
if mibBuilder.loadTexts: ceRedunMemberConfig.setDescription('A collection of mandatory member objects providing configuration information applicable to all redundancy members. ')
ceRedunRemoteSystem = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 498, 2, 2, 9)).setObjects(("CISCO-ENTITY-REDUNDANCY-MIB", "ceRedunMbrAddressType"), ("CISCO-ENTITY-REDUNDANCY-MIB", "ceRedunMbrRemoteAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ceRedunRemoteSystem = ceRedunRemoteSystem.setStatus('current')
if mibBuilder.loadTexts: ceRedunRemoteSystem.setDescription("The objects which provide information which is only applicable to 'remoteSystem' or 'remoteChassis' groups. ")
ceRedunOneToN = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 498, 2, 2, 10)).setObjects(("CISCO-ENTITY-REDUNDANCY-MIB", "ceRedunMbrPriority"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ceRedunOneToN = ceRedunOneToN.setStatus('current')
if mibBuilder.loadTexts: ceRedunOneToN.setDescription('The objects which provide information which is only applicable to groups implementing the 1:n architecture. ')
ceRedunMemberStatus = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 498, 2, 2, 11)).setObjects(("CISCO-ENTITY-REDUNDANCY-MIB", "ceRedunMbrStatusLastChanged"), ("CISCO-ENTITY-REDUNDANCY-MIB", "ceRedunMbrStatusCurrent"), ("CISCO-ENTITY-REDUNDANCY-MIB", "ceRedunMbrProtectingMbr"), ("CISCO-ENTITY-REDUNDANCY-MIB", "ceRedunMbrSwitchoverCounts"), ("CISCO-ENTITY-REDUNDANCY-MIB", "ceRedunMbrLastSwitchover"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ceRedunMemberStatus = ceRedunMemberStatus.setStatus('current')
if mibBuilder.loadTexts: ceRedunMemberStatus.setDescription('A collection of mandatory ceRedunStatusTable objects providing status information applicable to redundancy members. ')
ceRedunOptionalMbrStatus = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 498, 2, 2, 12)).setObjects(("CISCO-ENTITY-REDUNDANCY-MIB", "ceRedunMbrInternalState"), ("CISCO-ENTITY-REDUNDANCY-MIB", "ceRedunMbrSwitchoverReason"), ("CISCO-ENTITY-REDUNDANCY-MIB", "ceRedunMbrSwitchoverSeconds"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ceRedunOptionalMbrStatus = ceRedunOptionalMbrStatus.setStatus('current')
if mibBuilder.loadTexts: ceRedunOptionalMbrStatus.setDescription('A collection of objects providing additional member status. ')
ceRedunCommandsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 498, 2, 2, 13)).setObjects(("CISCO-ENTITY-REDUNDANCY-MIB", "ceRedunCommandMbrNumber"), ("CISCO-ENTITY-REDUNDANCY-MIB", "ceRedunCommandSwitch"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ceRedunCommandsGroup = ceRedunCommandsGroup.setStatus('current')
if mibBuilder.loadTexts: ceRedunCommandsGroup.setDescription('A collection of objects providing commanded switchover capability. ')
ceRedunNotifEnables = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 498, 2, 2, 14)).setObjects(("CISCO-ENTITY-REDUNDANCY-MIB", "ceRedunEnableSwitchoverNotifs"), ("CISCO-ENTITY-REDUNDANCY-MIB", "ceRedunEnableStatusChangeNotifs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ceRedunNotifEnables = ceRedunNotifEnables.setStatus('current')
if mibBuilder.loadTexts: ceRedunNotifEnables.setDescription('A collection of objects providing configuration information applicable to all redundancy entity groups. ')
ceRedunSwitchNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 498, 2, 2, 15)).setObjects(("CISCO-ENTITY-REDUNDANCY-MIB", "ceRedunEventSwitchover"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ceRedunSwitchNotifGroup = ceRedunSwitchNotifGroup.setStatus('current')
if mibBuilder.loadTexts: ceRedunSwitchNotifGroup.setDescription('A collection of entity redundancy notifications that may optionally be implemented. ')
ceRedunProtectStatusNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 498, 2, 2, 16)).setObjects(("CISCO-ENTITY-REDUNDANCY-MIB", "ceRedunProtectStatusChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ceRedunProtectStatusNotifGroup = ceRedunProtectStatusNotifGroup.setStatus('current')
if mibBuilder.loadTexts: ceRedunProtectStatusNotifGroup.setDescription('A collection of entity redundancy notifications that may optionally be implemented. ')
mibBuilder.exportSymbols("CISCO-ENTITY-REDUNDANCY-MIB", ceRedunReasonCategory=ceRedunReasonCategory, ceRedunMemberStatus=ceRedunMemberStatus, ceRedunMbrConfigTable=ceRedunMbrConfigTable, ceRedunGroupObjects=ceRedunGroupObjects, ceRedunOptionalMbrStatus=ceRedunOptionalMbrStatus, ceRedunMbrPhysIndex=ceRedunMbrPhysIndex, ceRedunGroupTypeGroup=ceRedunGroupTypeGroup, ceRedunGroupIndex=ceRedunGroupIndex, ceRedunMemberConfig=ceRedunMemberConfig, ceRedunStateCategory=ceRedunStateCategory, ceRedunOneToN=ceRedunOneToN, ceRedunGroupRedunType=ceRedunGroupRedunType, ceRedunGroups=ceRedunGroups, ceRedunSwitchoverReasonIndex=ceRedunSwitchoverReasonIndex, ceRedunMbrMode=ceRedunMbrMode, ceRedunGroupEntry=ceRedunGroupEntry, ceRedunMbrSwitchoverSeconds=ceRedunMbrSwitchoverSeconds, ceRedunGroupTypeIndex=ceRedunGroupTypeIndex, ceRedunCompliance=ceRedunCompliance, ciscoEntityRedunMIBObjects=ciscoEntityRedunMIBObjects, ceRedunCommandEntry=ceRedunCommandEntry, ceRedunCompliances=ceRedunCompliances, PYSNMP_MODULE_ID=ciscoEntityRedunMIB, ceRedunProtectStatusChange=ceRedunProtectStatusChange, ceRedunMbrStatusEntry=ceRedunMbrStatusEntry, ceRedunGroupStorageType=ceRedunGroupStorageType, ceRedunMbrRowStatus=ceRedunMbrRowStatus, ceRedunRemoteSystem=ceRedunRemoteSystem, ceRedunMbrStorageType=ceRedunMbrStorageType, ceRedunBidirectional=ceRedunBidirectional, ceRedunMbrNumber=ceRedunMbrNumber, ciscoEntityRedunMIBNotifs=ciscoEntityRedunMIBNotifs, ceRedunSwitchNotifGroup=ceRedunSwitchNotifGroup, ceRedunInternalStatesTable=ceRedunInternalStatesTable, ceRedunCommandsGroup=ceRedunCommandsGroup, ceRedunMbrConfigEntry=ceRedunMbrConfigEntry, ceRedunGroupTypeName=ceRedunGroupTypeName, ceRedunMbrLastSwitchover=ceRedunMbrLastSwitchover, ceRedunUsesGroupName=ceRedunUsesGroupName, ceRedunVendorTypesEntry=ceRedunVendorTypesEntry, ceRedunInternalStateDescr=ceRedunInternalStateDescr, ceRedunGroupArch=ceRedunGroupArch, ceRedunNotifEnables=ceRedunNotifEnables, ceRedunGroupScope=ceRedunGroupScope, ceRedunMbrPriority=ceRedunMbrPriority, ceRedunSwitchoverReasonTable=ceRedunSwitchoverReasonTable, ceRedunVendorTypesTable=ceRedunVendorTypesTable, ceRedunGroupTypesTable=ceRedunGroupTypesTable, ceRedunInternalStatesEntry=ceRedunInternalStatesEntry, ceRedunInternalStates=ceRedunInternalStates, ceRedunSwitchoverReasonDescr=ceRedunSwitchoverReasonDescr, ceRedunGroupCounts=ceRedunGroupCounts, ceRedunGroupWaitToRestore=ceRedunGroupWaitToRestore, ceRedunMbrLastChanged=ceRedunMbrLastChanged, ceRedunMbrRemoteAddress=ceRedunMbrRemoteAddress, ceRedunGroupRowStatus=ceRedunGroupRowStatus, ceRedunGroupDefinitionChanged=ceRedunGroupDefinitionChanged, ceRedunMaxMbrsInGroup=ceRedunMaxMbrsInGroup, ceRedunGroup=ceRedunGroup, ceRedunMbrSwitchoverReason=ceRedunMbrSwitchoverReason, ceRedunNextUnusedGroupIndex=ceRedunNextUnusedGroupIndex, ceRedunMbrStatusCurrent=ceRedunMbrStatusCurrent, ceRedunCommandTable=ceRedunCommandTable, ceRedunGroupDirection=ceRedunGroupDirection, ceRedunMbrInternalState=ceRedunMbrInternalState, ceRedunMbrSwitchoverCounts=ceRedunMbrSwitchoverCounts, ceRedunGroupString=ceRedunGroupString, ceRedunGroupTypesEntry=ceRedunGroupTypesEntry, ceRedunInternalStateIndex=ceRedunInternalStateIndex, ceRedunCommandMbrNumber=ceRedunCommandMbrNumber, ceRedunVendorType=ceRedunVendorType, ciscoEntityRedunMIBConform=ciscoEntityRedunMIBConform, ceRedunGroupTable=ceRedunGroupTable, ceRedunEnableStatusChangeNotifs=ceRedunEnableStatusChangeNotifs, ceRedunEventSwitchover=ceRedunEventSwitchover, ceRedunMembers=ceRedunMembers, ceRedunEnableSwitchoverNotifs=ceRedunEnableSwitchoverNotifs, ceRedunMbrAddressType=ceRedunMbrAddressType, ceRedunMbrStatusLastChanged=ceRedunMbrStatusLastChanged, ceRedunSwitchoverReasonEntry=ceRedunSwitchoverReasonEntry, ciscoEntityRedunMIB=ciscoEntityRedunMIB, ceRedunCommandSwitch=ceRedunCommandSwitch, ceRedunMbrProtectingMbr=ceRedunMbrProtectingMbr, ceRedunProtectStatusNotifGroup=ceRedunProtectStatusNotifGroup, ceRedunGroupRevert=ceRedunGroupRevert, ceRedunOptionalGroupTypes=ceRedunOptionalGroupTypes, ceRedunMbrStatusTable=ceRedunMbrStatusTable, ceRedunSwitchoverReason=ceRedunSwitchoverReason, ceRedunGroupLastChanged=ceRedunGroupLastChanged, ceRedunRevertiveGroup=ceRedunRevertiveGroup)
