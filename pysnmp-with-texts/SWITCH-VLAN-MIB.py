#
# PySNMP MIB module SWITCH-VLAN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SWITCH-VLAN-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:13:13 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Unsigned32, TimeTicks, Bits, Counter32, Integer32, iso, Gauge32, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, NotificationType, MibIdentifier, Counter64, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "TimeTicks", "Bits", "Counter32", "Integer32", "iso", "Gauge32", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "NotificationType", "MibIdentifier", "Counter64", "IpAddress")
DisplayString, RowStatus, TextualConvention, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "TextualConvention", "MacAddress")
vLanModule, = mibBuilder.importSymbols("TELESYN-ATI-TC", "vLanModule")
switchVlanMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2))
switchVlanMib.setRevisions(('1997-04-10 16:00', '1997-02-12 16:00', '1996-11-07 16:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: switchVlanMib.setRevisionsDescriptions(('Added additional enumerations to PortFuncCode and PhyPortMediaTypeCode. Clarified the description of vRouterProtocol and added the object, vRouterRipMode, to vRouterEntry. Added a new object, pPortCountersStatus, to PPortEntry. ', 'Added pPortSpeed to PPortEntry. Corrected the max-access for pPortMediaType to be read-only.', 'Initial version.',))
if mibBuilder.loadTexts: switchVlanMib.setLastUpdated('9704101600Z')
if mibBuilder.loadTexts: switchVlanMib.setOrganization('')
if mibBuilder.loadTexts: switchVlanMib.setContactInfo('')
if mibBuilder.loadTexts: switchVlanMib.setDescription('This module provides definitions for the Hitachi Computer Products, Network System Group (SWITCH), Virtual LAN (VLAN) MIB.')
vLanGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 1))
vRouterGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 2))
physicalPortGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 3))
virtualPortGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 4))
ipRouteCacheGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 5))
class AtmVci(TextualConvention, Integer32):
    description = 'ATM VCI.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 1023)

class VlanAdminStatusCode(TextualConvention, Integer32):
    description = 'The administrative status codes'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("disable", 1), ("enable", 2))

class VlanOperStatusCode(TextualConvention, Integer32):
    description = 'The operational status codes'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("down", 1), ("up", 2))

class VlanMode(TextualConvention, Integer32):
    description = 'The VLAN mode.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 3, 4))
    namedValues = NamedValues(("unknown", 1), ("standard", 3), ("atmCIP", 4))

class PortFuncCode(TextualConvention, Integer32):
    description = 'The port function codes'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("unknown", 1), ("router", 2), ("bridge", 3), ("trunk", 4), ("atmLane", 5), ("atmMux", 6), ("cip", 7), ("pt2Pt", 8))

class MACLayerCode(TextualConvention, Integer32):
    description = 'The MAC layer type for the port.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("unknown", 0), ("none", 1), ("ethernet", 2), ("ieee802d3", 3), ("ieee802d5", 4), ("fddi", 5))

class PhyPortMediaTypeCode(TextualConvention, Integer32):
    description = 'The media types supported for a port'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))
    namedValues = NamedValues(("unknown", 1), ("other", 2), ("eth10", 3), ("eth100", 4), ("tr4", 5), ("tr16", 6), ("fddi", 7), ("cddi", 8), ("atm25", 9), ("atm50", 10), ("ds1", 11), ("ds3", 12), ("oc3", 13), ("oc12", 14), ("oc48", 15), ("wan", 16), ("eth100F", 17))

vLanTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 1, 1), )
if mibBuilder.loadTexts: vLanTable.setStatus('current')
if mibBuilder.loadTexts: vLanTable.setDescription('A list of Virtual LAN instances.')
vLanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 1, 1, 1), ).setIndexNames((0, "SWITCH-VLAN-MIB", "vLanNumber"))
if mibBuilder.loadTexts: vLanEntry.setStatus('current')
if mibBuilder.loadTexts: vLanEntry.setDescription('VLAN entry.')
vLanNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: vLanNumber.setStatus('current')
if mibBuilder.loadTexts: vLanNumber.setDescription('The VLAN number identifying this instance')
vLanMembers = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 1, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: vLanMembers.setStatus('current')
if mibBuilder.loadTexts: vLanMembers.setDescription('A bitmap structure presenting the virtual ports assigned to this vLan. Bits are numbered from 1 to 256 starting with the high order bit of the first octet. Each bit which is set indicates the virtual port number assigned to the this vlan.')
vLanDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vLanDescription.setStatus('current')
if mibBuilder.loadTexts: vLanDescription.setDescription('Textual description of the VLAN instance.')
vLanAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 1, 1, 1, 6), VlanAdminStatusCode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vLanAdminStatus.setStatus('current')
if mibBuilder.loadTexts: vLanAdminStatus.setDescription("The administrative status which can be set by configuration. 'disable' will disable ALL vPorts that are connected to this VLAN, 'enable' will enable all ports")
vLanOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 1, 1, 1, 7), VlanOperStatusCode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vLanOperStatus.setStatus('current')
if mibBuilder.loadTexts: vLanOperStatus.setDescription('Provide operating status of a particular VLAN.')
vLanMode = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 1, 1, 1, 8), VlanMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vLanMode.setStatus('deprecated')
if mibBuilder.loadTexts: vLanMode.setDescription('Provides special operating mode setup and status. Currently this object is used to specify weather the VLAN supports the standard or ATM CIP connections. This is deprecated because it is not maintained by system software. ')
vLanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 1, 1, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vLanRowStatus.setStatus('current')
if mibBuilder.loadTexts: vLanRowStatus.setDescription("This attribute may only be set to 'createAndGo' and 'delete'. 'notInService' and 'createAndWait' are not supported.")
vRouterTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 2, 1), )
if mibBuilder.loadTexts: vRouterTable.setStatus('current')
if mibBuilder.loadTexts: vRouterTable.setDescription('A list of Virtual Router instances.')
vRouterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 2, 1, 1), ).setIndexNames((0, "SWITCH-VLAN-MIB", "vLanNumber"))
if mibBuilder.loadTexts: vRouterEntry.setStatus('current')
if mibBuilder.loadTexts: vRouterEntry.setDescription('A VLAN entry.')
vRouterProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRouterProtocol.setStatus('current')
if mibBuilder.loadTexts: vRouterProtocol.setDescription('This object is used to enable/disable routing protocols. The value of this object is the logical ORing of each bit identifying the routing protocol below, where bit 0 is the low order bit, i.e. 2**0. ipRip bit 0 ipEgp bit 1 ipGgp bit 2 ipHello bit 3 ipIs-is bit 4 ipEs-is bit 5 ipCiscoIgrp bit 6 ipBbnSpfIgp bit 7 ipOspf bit 8 Setting the appropriate bit enables the protocol (if supported); clearing the bit, disables the protocol.')
vRouterIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 2, 1, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRouterIpAddress.setStatus('current')
if mibBuilder.loadTexts: vRouterIpAddress.setDescription('The IP network address for this virtual bridge instance for the purpose of allowing access from the external network management system. This attribute is required for row creation.')
vRouterSubNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 2, 1, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRouterSubNetMask.setStatus('current')
if mibBuilder.loadTexts: vRouterSubNetMask.setDescription('The IP network subnet mask for this virtual bridge instance for the purpose of allowing access from the external network management system. This attribute is required for row creation.')
vRouterBcastAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 2, 1, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRouterBcastAddress.setStatus('current')
if mibBuilder.loadTexts: vRouterBcastAddress.setDescription('The IP broadcast address for this virtual bridge instance for the purpose of allowing access from the external network management system. This attribute is required for row creation.')
vRouterDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 2, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRouterDescription.setStatus('current')
if mibBuilder.loadTexts: vRouterDescription.setDescription('Textual description of the router instance.')
vRouterAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 2, 1, 1, 6), VlanAdminStatusCode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRouterAdminStatus.setStatus('current')
if mibBuilder.loadTexts: vRouterAdminStatus.setDescription('The particular routing environment can be enable(2) or disable(1), its value is determined by the ifAdminStatus of the interface associated with this router.')
vRouterOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 2, 1, 1, 7), VlanOperStatusCode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRouterOperStatus.setStatus('current')
if mibBuilder.loadTexts: vRouterOperStatus.setDescription('Provide operating status of a particular router environment.')
vRouterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 2, 1, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRouterRowStatus.setStatus('current')
if mibBuilder.loadTexts: vRouterRowStatus.setDescription("Only supports 'createAndGo' and 'delete' for set operation. The vLanEntry instance identified by the value of the index for this attribute must exist before a attempting to create an instance of vRouterRowStatus.")
vRouterIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 2, 1, 1, 9), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRouterIfIndex.setStatus('current')
if mibBuilder.loadTexts: vRouterIfIndex.setDescription('The value of ifIndex which corresponds to this vRouter instance.')
vRouterRipMode = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("silent", 1), ("active", 2), ("deaf", 3), ("inactive", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRouterRipMode.setStatus('current')
if mibBuilder.loadTexts: vRouterRipMode.setDescription("If the value of this object is 'silent', RIP daemon processes received routing packets and does NOT send routing packets. If the value of this object is 'active', RIP sends and receives routing packets.")
pPortTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 3, 1), )
if mibBuilder.loadTexts: pPortTable.setStatus('current')
if mibBuilder.loadTexts: pPortTable.setDescription('A list of Physical Port instances.')
pPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 3, 1, 1), ).setIndexNames((0, "SWITCH-VLAN-MIB", "pPortNumber"))
if mibBuilder.loadTexts: pPortEntry.setStatus('current')
if mibBuilder.loadTexts: pPortEntry.setDescription('A Physical Port entry.')
pPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: pPortNumber.setStatus('current')
if mibBuilder.loadTexts: pPortNumber.setDescription('The phyiscal port number.')
pPortMediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 3, 1, 1, 2), PhyPortMediaTypeCode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pPortMediaType.setStatus('current')
if mibBuilder.loadTexts: pPortMediaType.setDescription('The physical media type supported by this physical port.')
pPortDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 3, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pPortDescription.setStatus('current')
if mibBuilder.loadTexts: pPortDescription.setDescription('A description of the instance of this physical Port.')
pPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 3, 1, 1, 4), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: pPortIfIndex.setDescription('The value of ifIndex which corresponds to this physical port.')
pPortDuplexity = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("halfDuplex", 1), ("fullDuplex", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pPortDuplexity.setStatus('current')
if mibBuilder.loadTexts: pPortDuplexity.setDescription('The duplexity of this pPort.')
pPortAutoNegotiate = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pPortAutoNegotiate.setStatus('current')
if mibBuilder.loadTexts: pPortAutoNegotiate.setDescription("Only ports whose pPortMediaType is 'eth100' may support autonegotiation to determine the portSpeed and pPortDuplexity. pPortAutoNegotiate is not writeable for ports whose pPortMediaType is not 'eth100'.")
pPortAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 3, 1, 1, 7), VlanAdminStatusCode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pPortAdminStatus.setStatus('current')
if mibBuilder.loadTexts: pPortAdminStatus.setDescription('The administrative status of this pPort. Instances for VRouter and Uplinks (33 and 34) are read-only, the value can be set by ifAdminStatus.')
pPortOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 3, 1, 1, 8), VlanOperStatusCode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pPortOperStatus.setStatus('current')
if mibBuilder.loadTexts: pPortOperStatus.setDescription('The operational status of this pPort.')
pPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 3, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pPortSpeed.setStatus('current')
if mibBuilder.loadTexts: pPortSpeed.setDescription("The speed of the port in bits per second (bps). For ports whose pPortMediaType is 'eth100', and pPortDuplexity has the value 'disable' pPortSpeed may be writeable.")
pPortCountersStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pPortCountersStatus.setStatus('current')
if mibBuilder.loadTexts: pPortCountersStatus.setDescription("An object used to enable or disable counters for physical ports whose pPortMediaType is 'eth10', 'eth100', or 'eth100F'. In some instances it is not possible to determine the state of the counters.")
pEtherCountersStatus = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pEtherCountersStatus.setStatus('current')
if mibBuilder.loadTexts: pEtherCountersStatus.setDescription('This Object Globally enables or disables the Statistics Collection on the Ethernet Ports. ')
pStatsPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 3, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pStatsPollInterval.setStatus('current')
if mibBuilder.loadTexts: pStatsPollInterval.setDescription('This Object is the Time interval in seconds between Statistics Collection.')
vPortTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 4, 1), )
if mibBuilder.loadTexts: vPortTable.setStatus('current')
if mibBuilder.loadTexts: vPortTable.setDescription('A list of Virtual Port instances.')
vPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 4, 1, 1), ).setIndexNames((0, "SWITCH-VLAN-MIB", "vPortNumber"))
if mibBuilder.loadTexts: vPortEntry.setStatus('current')
if mibBuilder.loadTexts: vPortEntry.setDescription('A Virtual Port entry.')
vPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: vPortNumber.setStatus('current')
if mibBuilder.loadTexts: vPortNumber.setDescription('A unique number identifies this Virtual Port instance.')
vPortPhyPort = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vPortPhyPort.setStatus('current')
if mibBuilder.loadTexts: vPortPhyPort.setDescription('The physical port ID this virtual port is mapped to. If the value is 0, then the virtual port is not associated with a physical port.')
vPortFuncType = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 4, 1, 1, 3), PortFuncCode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vPortFuncType.setStatus('current')
if mibBuilder.loadTexts: vPortFuncType.setDescription('The function type for this vPort. i.e. router, brige, ATM.')
vPortVlanNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortVlanNumber.setStatus('current')
if mibBuilder.loadTexts: vPortVlanNumber.setDescription('The VLAN that this vPort belongs in.')
vPortDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vPortDomain.setStatus('current')
if mibBuilder.loadTexts: vPortDomain.setDescription('internal ID identifies the VLAN this vport attached to ')
vPortMACaddress = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 4, 1, 1, 6), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vPortMACaddress.setStatus('current')
if mibBuilder.loadTexts: vPortMACaddress.setDescription('The MAC address represented by this Virtual Port.')
vPortDefaultMacLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 4, 1, 1, 7), MACLayerCode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortDefaultMacLayer.setStatus('current')
if mibBuilder.loadTexts: vPortDefaultMacLayer.setDescription('The output MAC layer format that this particular vPort supports as a default. The value indicates the format required for output from this vPort.')
vPortBridgeMode = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("autoSwitch", 2), ("forceBridge", 3), ("forceSwitch", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortBridgeMode.setStatus('deprecated')
if mibBuilder.loadTexts: vPortBridgeMode.setDescription("A mode of this virtual port for optimization of the bridging function. In 'autoSwitch' the system determines the best mode.")
vPortSwitchTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortSwitchTimer.setStatus('deprecated')
if mibBuilder.loadTexts: vPortSwitchTimer.setDescription('The time out period for a Bridged vPort to convert to a switch optimized mode in seconds if vPortBridgMode is set to autoSwitch(1). Setting it to zero will cause automatic switching between the two modes immediately. The default is 60 seconds.')
vPortDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 4, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortDescription.setStatus('current')
if mibBuilder.loadTexts: vPortDescription.setDescription('A string to identify the instance of this virtual port.')
vPortAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 4, 1, 1, 11), VlanAdminStatusCode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortAdminStatus.setStatus('current')
if mibBuilder.loadTexts: vPortAdminStatus.setDescription('The administrative status of this virtual port. Its value is determined by the value of ifAdminStatus associated with this vPort.')
vPortOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 4, 1, 1, 12), VlanOperStatusCode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vPortOperStatus.setStatus('current')
if mibBuilder.loadTexts: vPortOperStatus.setDescription('The operational status of this virtual port. ')
vPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 4, 1, 1, 13), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: vPortIfIndex.setDescription('The value of ifIndex which corresponds to this virtual port.')
ipRouteState = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipForwarding", 1), ("ipRouteCacheForward", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRouteState.setStatus('current')
if mibBuilder.loadTexts: ipRouteState.setDescription('ipRouteState enables or disables RouteCaching')
ipRouteCacheTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 5, 2), )
if mibBuilder.loadTexts: ipRouteCacheTable.setStatus('current')
if mibBuilder.loadTexts: ipRouteCacheTable.setDescription('A list of IpRouteCache Instances.')
ipRouteCacheEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 5, 2, 1), ).setIndexNames((0, "SWITCH-VLAN-MIB", "ipRouteCacheIndex"))
if mibBuilder.loadTexts: ipRouteCacheEntry.setStatus('current')
if mibBuilder.loadTexts: ipRouteCacheEntry.setDescription('An IpRouteCache Entry.')
ipRouteCacheIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouteCacheIndex.setStatus('current')
if mibBuilder.loadTexts: ipRouteCacheIndex.setDescription('The Index of the Route Cache entry.')
ipRouteCacheDstIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 5, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouteCacheDstIpAddress.setStatus('current')
if mibBuilder.loadTexts: ipRouteCacheDstIpAddress.setDescription('The Destination IpAddress of the Route.')
ipRouteCacheSrcIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 5, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouteCacheSrcIpAddress.setStatus('current')
if mibBuilder.loadTexts: ipRouteCacheSrcIpAddress.setDescription('The Source IpAddress of the Route.')
ipRouteCacheDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouteCacheDstPort.setStatus('current')
if mibBuilder.loadTexts: ipRouteCacheDstPort.setDescription('The Destination Port of the Route.')
ipRouteCacheSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouteCacheSrcPort.setStatus('current')
if mibBuilder.loadTexts: ipRouteCacheSrcPort.setDescription('The Source Port of the Route.')
ipRouteCacheMedia = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("unknown", 1), ("vlan", 2), ("cip", 3), ("ptop", 4), ("csr", 5), ("fddi", 6), ("atmtrunk", 7), ("fdditrunk", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouteCacheMedia.setStatus('current')
if mibBuilder.loadTexts: ipRouteCacheMedia.setDescription('The Physical Media on which the destination can reached from the source.')
ipRouteCacheVPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 5, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouteCacheVPortNumber.setStatus('current')
if mibBuilder.loadTexts: ipRouteCacheVPortNumber.setDescription('The Virtual Port using which the Destination can be reached.')
ipRouteCacheVCI = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 5, 2, 1, 8), AtmVci()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouteCacheVCI.setStatus('current')
if mibBuilder.loadTexts: ipRouteCacheVCI.setDescription('The VCI on which the destination is reached if the media type is ATM.')
mibBuilder.exportSymbols("SWITCH-VLAN-MIB", vLanGroup=vLanGroup, vRouterOperStatus=vRouterOperStatus, vRouterRipMode=vRouterRipMode, ipRouteCacheTable=ipRouteCacheTable, pPortTable=pPortTable, vPortDefaultMacLayer=vPortDefaultMacLayer, vRouterIfIndex=vRouterIfIndex, ipRouteCacheVPortNumber=ipRouteCacheVPortNumber, PhyPortMediaTypeCode=PhyPortMediaTypeCode, vPortSwitchTimer=vPortSwitchTimer, VlanAdminStatusCode=VlanAdminStatusCode, vPortDomain=vPortDomain, ipRouteCacheVCI=ipRouteCacheVCI, vLanAdminStatus=vLanAdminStatus, vLanEntry=vLanEntry, vRouterEntry=vRouterEntry, vRouterSubNetMask=vRouterSubNetMask, physicalPortGroup=physicalPortGroup, ipRouteState=ipRouteState, AtmVci=AtmVci, vRouterTable=vRouterTable, PYSNMP_MODULE_ID=switchVlanMib, ipRouteCacheDstIpAddress=ipRouteCacheDstIpAddress, vPortAdminStatus=vPortAdminStatus, pPortNumber=pPortNumber, vRouterRowStatus=vRouterRowStatus, pPortDuplexity=pPortDuplexity, vPortVlanNumber=vPortVlanNumber, ipRouteCacheMedia=ipRouteCacheMedia, pPortCountersStatus=pPortCountersStatus, virtualPortGroup=virtualPortGroup, vLanMembers=vLanMembers, vRouterDescription=vRouterDescription, vPortNumber=vPortNumber, vLanTable=vLanTable, switchVlanMib=switchVlanMib, vPortDescription=vPortDescription, vLanOperStatus=vLanOperStatus, vRouterBcastAddress=vRouterBcastAddress, ipRouteCacheIndex=ipRouteCacheIndex, ipRouteCacheSrcIpAddress=ipRouteCacheSrcIpAddress, ipRouteCacheSrcPort=ipRouteCacheSrcPort, vPortIfIndex=vPortIfIndex, pPortAutoNegotiate=pPortAutoNegotiate, vRouterAdminStatus=vRouterAdminStatus, pPortOperStatus=pPortOperStatus, ipRouteCacheDstPort=ipRouteCacheDstPort, vLanMode=vLanMode, VlanMode=VlanMode, vPortEntry=vPortEntry, PortFuncCode=PortFuncCode, vRouterProtocol=vRouterProtocol, MACLayerCode=MACLayerCode, pPortEntry=pPortEntry, pEtherCountersStatus=pEtherCountersStatus, vPortOperStatus=vPortOperStatus, pPortSpeed=pPortSpeed, vPortTable=vPortTable, ipRouteCacheEntry=ipRouteCacheEntry, pPortIfIndex=pPortIfIndex, vPortBridgeMode=vPortBridgeMode, pPortMediaType=pPortMediaType, ipRouteCacheGroup=ipRouteCacheGroup, vPortMACaddress=vPortMACaddress, vRouterGroup=vRouterGroup, vLanRowStatus=vLanRowStatus, vRouterIpAddress=vRouterIpAddress, vPortPhyPort=vPortPhyPort, vLanNumber=vLanNumber, pPortAdminStatus=pPortAdminStatus, vPortFuncType=vPortFuncType, vLanDescription=vLanDescription, VlanOperStatusCode=VlanOperStatusCode, pStatsPollInterval=pStatsPollInterval, pPortDescription=pPortDescription)
