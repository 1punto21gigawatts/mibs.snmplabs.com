#
# PySNMP MIB module OLD-CISCO-DECNET-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/OLD-CISCO-DECNET-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:32:40 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion")
temporary, = mibBuilder.importSymbols("CISCO-SMI", "temporary")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, Counter64, Unsigned32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, IpAddress, Gauge32, Bits, TimeTicks, iso, Counter32, NotificationType, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Counter64", "Unsigned32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "IpAddress", "Gauge32", "Bits", "TimeTicks", "iso", "Counter32", "NotificationType", "ModuleIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
tmpdecnet = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 3, 1))
dnForward = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnForward.setStatus('mandatory')
if mibBuilder.loadTexts: dnForward.setDescription('Total count of DECNET packets forwarded.')
dnReceived = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnReceived.setStatus('mandatory')
if mibBuilder.loadTexts: dnReceived.setDescription('Count of total DECNET packets received.')
dnFormaterr = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnFormaterr.setStatus('mandatory')
if mibBuilder.loadTexts: dnFormaterr.setDescription('Total number of DECNET packets received with header errors.')
dnNotgateway = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnNotgateway.setStatus('mandatory')
if mibBuilder.loadTexts: dnNotgateway.setDescription('Total number of packets received while not routing.')
dnNotimp = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnNotimp.setStatus('mandatory')
if mibBuilder.loadTexts: dnNotimp.setDescription('Total number of unknown control packets received.')
dnHellos = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnHellos.setStatus('mandatory')
if mibBuilder.loadTexts: dnHellos.setDescription('Total number of Hellos received.')
dnBadhello = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnBadhello.setStatus('mandatory')
if mibBuilder.loadTexts: dnBadhello.setDescription('Total number of received bad Hellos.')
dnNotlong = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnNotlong.setStatus('mandatory')
if mibBuilder.loadTexts: dnNotlong.setDescription('Total number of received packets not in long format.')
dnDatas = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnDatas.setStatus('mandatory')
if mibBuilder.loadTexts: dnDatas.setDescription('Total number of received data packets.')
dnBigaddr = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnBigaddr.setStatus('mandatory')
if mibBuilder.loadTexts: dnBigaddr.setDescription('Total number of too large addresses.')
dnNoroute = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnNoroute.setStatus('mandatory')
if mibBuilder.loadTexts: dnNoroute.setDescription('Total number of packets dropped due to no route present.')
dnNoencap = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnNoencap.setStatus('mandatory')
if mibBuilder.loadTexts: dnNoencap.setDescription('Total number of packets dropped due to output encapsulation failure.')
dnLevel1s = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnLevel1s.setStatus('mandatory')
if mibBuilder.loadTexts: dnLevel1s.setDescription('Total number of Level 1 routing packets received.')
dnBadlevel1 = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnBadlevel1.setStatus('mandatory')
if mibBuilder.loadTexts: dnBadlevel1.setDescription('Total number of bad Level 1 routing packets received.')
dnToomanyhops = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnToomanyhops.setStatus('mandatory')
if mibBuilder.loadTexts: dnToomanyhops.setDescription('Total number of packets received which visited too many nodes.')
dnHellosent = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnHellosent.setStatus('mandatory')
if mibBuilder.loadTexts: dnHellosent.setDescription('Total number of Hellos output.')
dnLevel1sent = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnLevel1sent.setStatus('mandatory')
if mibBuilder.loadTexts: dnLevel1sent.setDescription('Total number of Level 1 routing packets sent.')
dnNomemory = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnNomemory.setStatus('mandatory')
if mibBuilder.loadTexts: dnNomemory.setDescription('Total number of memory requests denied.')
dnOtherhello = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnOtherhello.setStatus('mandatory')
if mibBuilder.loadTexts: dnOtherhello.setDescription('Total number of Hellos received from another area.')
dnOtherlevel1 = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnOtherlevel1.setStatus('mandatory')
if mibBuilder.loadTexts: dnOtherlevel1.setDescription('Total number of Level 1 routing packets received from another area.')
dnLevel2s = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnLevel2s.setStatus('mandatory')
if mibBuilder.loadTexts: dnLevel2s.setDescription('Total number of Level 2 routing packets received.')
dnLevel2sent = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnLevel2sent.setStatus('mandatory')
if mibBuilder.loadTexts: dnLevel2sent.setDescription('Total number of Level 2 routing packets sent.')
dnNovector = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnNovector.setStatus('mandatory')
if mibBuilder.loadTexts: dnNovector.setDescription('Total number of missing routing vectors.')
dnOtherlevel2 = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnOtherlevel2.setStatus('mandatory')
if mibBuilder.loadTexts: dnOtherlevel2.setDescription('Total number of received Level 2 routing packets from another area.')
dnNoaccess = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnNoaccess.setStatus('mandatory')
if mibBuilder.loadTexts: dnNoaccess.setDescription('Total number of packets dropped due to access control failure.')
dnAreaTable = MibTable((1, 3, 6, 1, 4, 1, 9, 3, 1, 26), )
if mibBuilder.loadTexts: dnAreaTable.setStatus('mandatory')
if mibBuilder.loadTexts: dnAreaTable.setDescription('DECNET area routing table')
dnAreaTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 3, 1, 26, 1), ).setIndexNames((0, "OLD-CISCO-DECNET-MIB", "dnArea"))
if mibBuilder.loadTexts: dnAreaTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dnAreaTableEntry.setDescription('DECNET area routing table')
dnArea = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 1, 26, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnArea.setStatus('mandatory')
if mibBuilder.loadTexts: dnArea.setDescription('DECNet area from the area table.')
dnACost = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 1, 26, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnACost.setStatus('mandatory')
if mibBuilder.loadTexts: dnACost.setDescription('Cost of area in the area table.')
dnAHop = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 1, 26, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnAHop.setStatus('mandatory')
if mibBuilder.loadTexts: dnAHop.setDescription('Number of hops to area in the area table.')
dnAIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 1, 26, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnAIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: dnAIfIndex.setDescription('Index of interface to the next hop address to the area. 0 denotes self.')
dnANextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 1, 26, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnANextHop.setStatus('mandatory')
if mibBuilder.loadTexts: dnANextHop.setDescription('Next hop DECNet address.')
dnAAge = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 1, 26, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnAAge.setStatus('mandatory')
if mibBuilder.loadTexts: dnAAge.setDescription('Age in seconds of area route.')
dnAPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 1, 26, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnAPrio.setStatus('mandatory')
if mibBuilder.loadTexts: dnAPrio.setDescription('Priority of next hop router for area route.')
dnHostTable = MibTable((1, 3, 6, 1, 4, 1, 9, 3, 1, 27), )
if mibBuilder.loadTexts: dnHostTable.setStatus('mandatory')
if mibBuilder.loadTexts: dnHostTable.setDescription('DECNET routing table')
dnHostTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 3, 1, 27, 1), ).setIndexNames((0, "OLD-CISCO-DECNET-MIB", "dnHIdx1"), (0, "OLD-CISCO-DECNET-MIB", "dnHIdx2"))
if mibBuilder.loadTexts: dnHostTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dnHostTableEntry.setDescription('DECNET routing table')
dnHost = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 1, 27, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnHost.setStatus('mandatory')
if mibBuilder.loadTexts: dnHost.setDescription('DECNet node address from the routing table.')
dnHCost = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 1, 27, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnHCost.setStatus('mandatory')
if mibBuilder.loadTexts: dnHCost.setDescription('Cost of path to node in the routing table.')
dnHHop = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 1, 27, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnHHop.setStatus('mandatory')
if mibBuilder.loadTexts: dnHHop.setDescription('Number of hops to node in the routing table.')
dnHIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 1, 27, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnHIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: dnHIfIndex.setDescription('Index of interface to the next hop address to the node. 0 denotes self.')
dnHNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 1, 27, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnHNextHop.setStatus('mandatory')
if mibBuilder.loadTexts: dnHNextHop.setDescription('Next hop DECNet address.')
dnHAge = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 1, 27, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnHAge.setStatus('mandatory')
if mibBuilder.loadTexts: dnHAge.setDescription('Age in seconds of route to node.')
dnHPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 1, 27, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnHPrio.setStatus('mandatory')
if mibBuilder.loadTexts: dnHPrio.setDescription('Priority of next hop router for node.')
dnHIdx1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 1, 27, 1, 8), Integer32())
if mibBuilder.loadTexts: dnHIdx1.setStatus('mandatory')
if mibBuilder.loadTexts: dnHIdx1.setDescription('table index 1.')
dnHIdx2 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 1, 27, 1, 9), Integer32())
if mibBuilder.loadTexts: dnHIdx2.setStatus('mandatory')
if mibBuilder.loadTexts: dnHIdx2.setDescription('table index 2.')
dnIfTable = MibTable((1, 3, 6, 1, 4, 1, 9, 3, 1, 28), )
if mibBuilder.loadTexts: dnIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: dnIfTable.setDescription('DECNET interface table')
dnIfTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 3, 1, 28, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dnIfTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dnIfTableEntry.setDescription('DECNET interface table')
dnIfCost = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 1, 28, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnIfCost.setStatus('mandatory')
if mibBuilder.loadTexts: dnIfCost.setDescription('Cost of this interface.')
mibBuilder.exportSymbols("OLD-CISCO-DECNET-MIB", dnNoroute=dnNoroute, dnBadhello=dnBadhello, dnAAge=dnAAge, dnOtherhello=dnOtherhello, dnHHop=dnHHop, dnIfTable=dnIfTable, dnLevel1s=dnLevel1s, dnIfTableEntry=dnIfTableEntry, dnHostTable=dnHostTable, dnBadlevel1=dnBadlevel1, dnHAge=dnHAge, dnHIfIndex=dnHIfIndex, dnNotgateway=dnNotgateway, dnHIdx2=dnHIdx2, dnHellos=dnHellos, dnLevel2sent=dnLevel2sent, dnToomanyhops=dnToomanyhops, dnANextHop=dnANextHop, tmpdecnet=tmpdecnet, dnNoaccess=dnNoaccess, dnNotimp=dnNotimp, dnIfCost=dnIfCost, dnHPrio=dnHPrio, dnHellosent=dnHellosent, dnAreaTable=dnAreaTable, dnNovector=dnNovector, dnAPrio=dnAPrio, dnNoencap=dnNoencap, dnLevel1sent=dnLevel1sent, dnAIfIndex=dnAIfIndex, dnACost=dnACost, dnForward=dnForward, dnLevel2s=dnLevel2s, dnNomemory=dnNomemory, dnArea=dnArea, dnFormaterr=dnFormaterr, dnAreaTableEntry=dnAreaTableEntry, dnHost=dnHost, dnAHop=dnAHop, dnOtherlevel2=dnOtherlevel2, dnHNextHop=dnHNextHop, dnNotlong=dnNotlong, dnReceived=dnReceived, dnBigaddr=dnBigaddr, dnHIdx1=dnHIdx1, dnHostTableEntry=dnHostTableEntry, dnOtherlevel1=dnOtherlevel1, dnDatas=dnDatas, dnHCost=dnHCost)
