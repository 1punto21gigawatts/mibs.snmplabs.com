#
# PySNMP MIB module JUNIPER-SMI (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/JUNIPER-SMI
# Produced by pysmi-0.3.4 at Wed May  1 11:37:53 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
enterprises, Counter64, IpAddress, Counter32, Integer32, iso, TimeTicks, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, MibIdentifier, Gauge32, Bits, ObjectIdentity, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "enterprises", "Counter64", "IpAddress", "Counter32", "Integer32", "iso", "TimeTicks", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "MibIdentifier", "Gauge32", "Bits", "ObjectIdentity", "ModuleIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
juniperMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636))
juniperMIB.setRevisions(('2010-07-09 00:00', '2009-10-29 00:00', '2010-06-18 00:00', '2003-04-17 01:00', '2005-08-17 01:00', '2006-12-14 01:00', '2007-01-01 00:00', '2007-10-09 00:00', '2009-12-31 00:00', '2010-07-14 00:00', '2011-01-26 00:00', '2012-02-10 00:00', '2012-08-01 00:00', '2012-11-01 00:00', '2012-12-07 00:00', '2013-01-25 00:00', '2013-11-26 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: juniperMIB.setRevisionsDescriptions(('Added jnxLicenseMibRoot branch.', 'Added jnxCosNotifications branch.', 'Added jnxLicenseMibRoot branch.', 'Added jnxExperiment branch.', 'Added jnxNsm branch.', 'Added jnxCA branch.', 'Added jnxUtilMibRoot branch.', 'Added jnxAdvancedInsightMgr branch.', 'Added jnxBxMibRoot branch.', 'Added jnxSubscriberMibRoot branch.', 'Added jnxDcfMibRoot branch.', 'Added jnxMediaFlow branch.', 'Added jnxSDKApplicationsRoot branch.', 'Added jnxJVAEMibRoot branch.', 'Added jnxStrm branch.', 'Added jnxIfOtnMibRoot branch. Added jnxOpticsMibRoot branch. Added jnxAlarmExtMibRoot branch. Added jnxoptIfMibRoot branch. Added jnxIfOtnNotifications branch. Added jnxOpticsNotifications branch.', ' Added jnxSnmpSetMibRoot branch',))
if mibBuilder.loadTexts: juniperMIB.setLastUpdated('201007090000Z')
if mibBuilder.loadTexts: juniperMIB.setOrganization('Juniper Networks, Inc.')
if mibBuilder.loadTexts: juniperMIB.setContactInfo(' Juniper Technical Assistance Center Juniper Networks, Inc. 1194 N. Mathilda Avenue Sunnyvale, CA 94089 E-mail: support@juniper.net')
if mibBuilder.loadTexts: juniperMIB.setDescription('The Structure of Management Information for Juniper Networks.')
jnxProducts = ObjectIdentity((1, 3, 6, 1, 4, 1, 2636, 1))
if mibBuilder.loadTexts: jnxProducts.setStatus('current')
if mibBuilder.loadTexts: jnxProducts.setDescription("The root of Juniper's Product OIDs.")
jnxMediaFlow = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 1, 2))
jnxJunosSpace = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 1, 3))
jnxReservedProducts3 = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 1, 4))
jnxReservedProducts4 = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 1, 5))
jnxReservedProducts5 = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 1, 6))
jnxSDKApplicationsRoot = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 1, 7))
jnxJAB = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 1, 8))
jnxStrm = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 1, 9))
jnxServices = ObjectIdentity((1, 3, 6, 1, 4, 1, 2636, 2))
if mibBuilder.loadTexts: jnxServices.setStatus('current')
if mibBuilder.loadTexts: jnxServices.setDescription("The root of Juniper's Services OIDs.")
jnxMibs = ObjectIdentity((1, 3, 6, 1, 4, 1, 2636, 3))
if mibBuilder.loadTexts: jnxMibs.setStatus('current')
if mibBuilder.loadTexts: jnxMibs.setDescription("The root of Juniper's MIB objects.")
jnxJsMibRoot = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 39))
jnxExMibRoot = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 40))
jnxWxMibRoot = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 41))
jnxDcfMibRoot = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 42))
jnxReservedMibs5 = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 43))
jnxPfeMibRoot = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 44))
jnxBfdMibRoot = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 45))
jnxXstpMibs = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 46))
jnxUtilMibRoot = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 47))
jnxl2aldMibRoot = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 48))
jnxL2tpMibRoot = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 49))
jnxRpmMibRoot = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 50))
jnxUserAAAMibRoot = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 51))
jnxIpSecMibRoot = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 52))
jnxL2cpMibRoot = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 53))
jnxPwTdmMibRoot = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 54))
jnxPwTCMibRoot = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 55))
jnxOtnMibRoot = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 56))
jnxPsuMIBRoot = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 58))
jnxSvcsMibRoot = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 59))
jnxDomMibRoot = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 60))
jnxJdhcpMibRoot = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 61))
jnxJdhcpv6MibRoot = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 62))
jnxLicenseMibRoot = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 63))
jnxSubscriberMibRoot = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 64))
jnxMagMibRoot = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 65))
jnxMobileGatewayMibRoot = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 66))
jnxPppoeMibRoot = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 67))
jnxPppMibRoot = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 68))
jnxJVAEMibRoot = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 69))
jnxIfOtnMibRoot = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 70))
jnxOpticsMibRoot = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 71))
jnxAlarmExtMibRoot = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 72))
jnxoptIfMibRoot = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 73))
jnxFruMibRoot = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 74))
jnxTimingNotfnsMIBRoot = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 75))
jnxSnmpSetMibRoot = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 76))
jnxTraps = ObjectIdentity((1, 3, 6, 1, 4, 1, 2636, 4))
if mibBuilder.loadTexts: jnxTraps.setStatus('current')
if mibBuilder.loadTexts: jnxTraps.setDescription("The root of Juniper's Trap OIDs.")
jnxChassisTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 4, 1))
jnxChassisOKTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 4, 2))
jnxRmonTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 4, 3))
jnxLdpTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 4, 4))
jnxCmNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 4, 5))
jnxSonetNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 4, 6))
jnxPMonNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 4, 7))
jnxCollectorNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 4, 8))
jnxPingNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 4, 9))
jnxSpNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 4, 10))
jnxDfcNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 4, 11))
jnxSyslogNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 4, 12))
jnxEventNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 4, 13))
jnxVccpNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 4, 14))
jnxOtnNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 4, 15))
jnxSAIDPNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 4, 16))
jnxCosNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 4, 17))
jnxDomNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 4, 18))
jnxFabricChassisTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 4, 19))
jnxFabricChassisOKTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 4, 20))
jnxIfOtnNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 4, 21))
jnxOpticsNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 4, 22))
jnxFruTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 4, 23))
jnxSnmpSetTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 4, 24))
jnxExperiment = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 5))
jnxNsm = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 6))
jnxCA = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 7))
jnxAAA = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 8))
jnxAdvancedInsightMgr = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 9))
jnxBxMibRoot = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 10))
mibBuilder.exportSymbols("JUNIPER-SMI", jnxFabricChassisOKTraps=jnxFabricChassisOKTraps, jnxReservedProducts4=jnxReservedProducts4, jnxJsMibRoot=jnxJsMibRoot, jnxEventNotifications=jnxEventNotifications, jnxPingNotifications=jnxPingNotifications, jnxPppMibRoot=jnxPppMibRoot, jnxL2cpMibRoot=jnxL2cpMibRoot, jnxServices=jnxServices, jnxJVAEMibRoot=jnxJVAEMibRoot, jnxAAA=jnxAAA, jnxXstpMibs=jnxXstpMibs, jnxReservedMibs5=jnxReservedMibs5, jnxIfOtnNotifications=jnxIfOtnNotifications, jnxRmonTraps=jnxRmonTraps, jnxLdpTraps=jnxLdpTraps, jnxFruTraps=jnxFruTraps, jnxDomMibRoot=jnxDomMibRoot, jnxSonetNotifications=jnxSonetNotifications, jnxoptIfMibRoot=jnxoptIfMibRoot, jnxChassisTraps=jnxChassisTraps, jnxBfdMibRoot=jnxBfdMibRoot, jnxPwTdmMibRoot=jnxPwTdmMibRoot, jnxOpticsNotifications=jnxOpticsNotifications, jnxAdvancedInsightMgr=jnxAdvancedInsightMgr, jnxMediaFlow=jnxMediaFlow, jnxLicenseMibRoot=jnxLicenseMibRoot, jnxBxMibRoot=jnxBxMibRoot, jnxCA=jnxCA, jnxAlarmExtMibRoot=jnxAlarmExtMibRoot, jnxOtnMibRoot=jnxOtnMibRoot, jnxPsuMIBRoot=jnxPsuMIBRoot, jnxPMonNotifications=jnxPMonNotifications, jnxL2tpMibRoot=jnxL2tpMibRoot, jnxCmNotifications=jnxCmNotifications, jnxFabricChassisTraps=jnxFabricChassisTraps, jnxRpmMibRoot=jnxRpmMibRoot, jnxOpticsMibRoot=jnxOpticsMibRoot, jnxChassisOKTraps=jnxChassisOKTraps, jnxWxMibRoot=jnxWxMibRoot, jnxPwTCMibRoot=jnxPwTCMibRoot, jnxJdhcpMibRoot=jnxJdhcpMibRoot, jnxSnmpSetMibRoot=jnxSnmpSetMibRoot, jnxl2aldMibRoot=jnxl2aldMibRoot, jnxExperiment=jnxExperiment, jnxReservedProducts3=jnxReservedProducts3, jnxExMibRoot=jnxExMibRoot, jnxIfOtnMibRoot=jnxIfOtnMibRoot, jnxDomNotifications=jnxDomNotifications, jnxSDKApplicationsRoot=jnxSDKApplicationsRoot, jnxJdhcpv6MibRoot=jnxJdhcpv6MibRoot, jnxDfcNotifications=jnxDfcNotifications, jnxDcfMibRoot=jnxDcfMibRoot, jnxOtnNotifications=jnxOtnNotifications, PYSNMP_MODULE_ID=juniperMIB, jnxMagMibRoot=jnxMagMibRoot, jnxCosNotifications=jnxCosNotifications, jnxUserAAAMibRoot=jnxUserAAAMibRoot, jnxCollectorNotifications=jnxCollectorNotifications, juniperMIB=juniperMIB, jnxFruMibRoot=jnxFruMibRoot, jnxSvcsMibRoot=jnxSvcsMibRoot, jnxTimingNotfnsMIBRoot=jnxTimingNotfnsMIBRoot, jnxSpNotifications=jnxSpNotifications, jnxStrm=jnxStrm, jnxUtilMibRoot=jnxUtilMibRoot, jnxProducts=jnxProducts, jnxSubscriberMibRoot=jnxSubscriberMibRoot, jnxPfeMibRoot=jnxPfeMibRoot, jnxSAIDPNotifications=jnxSAIDPNotifications, jnxTraps=jnxTraps, jnxJunosSpace=jnxJunosSpace, jnxNsm=jnxNsm, jnxMibs=jnxMibs, jnxJAB=jnxJAB, jnxMobileGatewayMibRoot=jnxMobileGatewayMibRoot, jnxSyslogNotifications=jnxSyslogNotifications, jnxSnmpSetTraps=jnxSnmpSetTraps, jnxVccpNotifications=jnxVccpNotifications, jnxReservedProducts5=jnxReservedProducts5, jnxPppoeMibRoot=jnxPppoeMibRoot, jnxIpSecMibRoot=jnxIpSecMibRoot)
