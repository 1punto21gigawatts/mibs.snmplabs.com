#
# PySNMP MIB module LINKB-OPT-FDDI-MIB-1-1-2 (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/LINKB-OPT-FDDI-MIB-1-1-2
# Produced by pysmi-0.3.4 at Wed May  1 14:07:19 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion")
fddimibPORTPCWithhold, fddimibPORTAvailablePaths, fddimibPORTCurrentPath, fddimibPORTConnectState, fddimibMACOldUpstreamNbr, fddimibMACErrorCts, fddimibSMTPeerWrapFlag, fddimibMACAvailablePaths, fddimibMACSMTAddress, fddimibPORTLemCts, fddimibMACNotCopiedRatio, fddimibPORTLerEstimate, fddimibMACUnaDaFlag, fddimibMACFrameErrorFlag, fddimibPORTMyType, fddimibMACFrameCts, fddimibMACCopiedCts, fddimibMACCurrentPath, fddimibPORTLerCutoff, fddimibMACLostCts, fddimibMACDownstreamNbr, fddimibPORTLemRejectCts, fddimibMACDaFlag, fddimibSMTCFState, fddimibPORTNeighborType, FddiSMTStationIdType, FddiTimeNano, fddimibMACUpstreamNbr, fddimibPORTRequestedPaths, fddimibMACOldDownstreamNbr, fddimibMACFrameErrorRatio, fddimibPORTLerAlarm, fddimibMACNotCopiedCts, fddimibPORTLerFlag, fddimibMACRequestedPaths, fddimibMACNotCopiedFlag, fddimibSMTStationId = mibBuilder.importSymbols("DRAFT-FDDI-MIB-VER-3-2", "fddimibPORTPCWithhold", "fddimibPORTAvailablePaths", "fddimibPORTCurrentPath", "fddimibPORTConnectState", "fddimibMACOldUpstreamNbr", "fddimibMACErrorCts", "fddimibSMTPeerWrapFlag", "fddimibMACAvailablePaths", "fddimibMACSMTAddress", "fddimibPORTLemCts", "fddimibMACNotCopiedRatio", "fddimibPORTLerEstimate", "fddimibMACUnaDaFlag", "fddimibMACFrameErrorFlag", "fddimibPORTMyType", "fddimibMACFrameCts", "fddimibMACCopiedCts", "fddimibMACCurrentPath", "fddimibPORTLerCutoff", "fddimibMACLostCts", "fddimibMACDownstreamNbr", "fddimibPORTLemRejectCts", "fddimibMACDaFlag", "fddimibSMTCFState", "fddimibPORTNeighborType", "FddiSMTStationIdType", "FddiTimeNano", "fddimibMACUpstreamNbr", "fddimibPORTRequestedPaths", "fddimibMACOldDownstreamNbr", "fddimibMACFrameErrorRatio", "fddimibPORTLerAlarm", "fddimibMACNotCopiedCts", "fddimibPORTLerFlag", "fddimibMACRequestedPaths", "fddimibMACNotCopiedFlag", "fddimibSMTStationId")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, Bits, Gauge32, TimeTicks, NotificationType, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, ObjectIdentity, Counter32, MibIdentifier, enterprises, IpAddress, Integer32, Unsigned32, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Bits", "Gauge32", "TimeTicks", "NotificationType", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "ObjectIdentity", "Counter32", "MibIdentifier", "enterprises", "IpAddress", "Integer32", "Unsigned32", "NotificationType")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
a3Com = MibIdentifier((1, 3, 6, 1, 4, 1, 43))
lb3gh = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 7))
lb3ghOptFddi = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 7, 2))
lbOptSMT = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 7, 2, 1))
lbOptMAC = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 7, 2, 2))
lbOptPATH = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 7, 2, 3))
lbOptPORT = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 7, 2, 4))
lbOptSMTTable = MibTable((1, 3, 6, 1, 4, 1, 43, 7, 2, 1, 1), )
if mibBuilder.loadTexts: lbOptSMTTable.setStatus('mandatory')
if mibBuilder.loadTexts: lbOptSMTTable.setDescription('A list of optional SMT entries. The number of entries shall not exceed the value of snmpFddiSMTNumber.')
lbOptSMTEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 7, 2, 1, 1, 1), ).setIndexNames((0, "LINKB-OPT-FDDI-MIB-1-1-2", "lbOptSMTIndex"))
if mibBuilder.loadTexts: lbOptSMTEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lbOptSMTEntry.setDescription('An optional SMT entry containing information common to a given optional SMT.')
lbOptSMTIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 2, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbOptSMTIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lbOptSMTIndex.setDescription("A unique value for each SMT. Its value ranges between 1 and the value of snmpFddiSMTNumber. The value for each SMT must remain constant at least from one re-initialization of the entity's network management system to the next re-initialization.")
lbOptSMTManufacturerOUI = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 2, 1, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbOptSMTManufacturerOUI.setReference('ANSI { fddiSMT 16 }')
if mibBuilder.loadTexts: lbOptSMTManufacturerOUI.setStatus('mandatory')
if mibBuilder.loadTexts: lbOptSMTManufacturerOUI.setDescription('The three octets of manufacturer data which make up the manufacturerOUI component.')
lbOptSMTManufacturerData = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 2, 1, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(29, 29)).setFixedLength(29)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbOptSMTManufacturerData.setReference('ANSI { fddiSMT 16 }')
if mibBuilder.loadTexts: lbOptSMTManufacturerData.setStatus('mandatory')
if mibBuilder.loadTexts: lbOptSMTManufacturerData.setDescription('The 29 octets of manufacturer data which make up the manufacturerData component.')
lbOptSMTHoldState = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 2, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("not-implemented", 1), ("not-holding", 2), ("holding-prm", 3), ("holding-sec", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbOptSMTHoldState.setReference('ANSI { fddiSMT 43 }')
if mibBuilder.loadTexts: lbOptSMTHoldState.setStatus('mandatory')
if mibBuilder.loadTexts: lbOptSMTHoldState.setDescription("This variable indicates the current state of the Hold function. The value 'not-holding' is the default and initial value. The value must be set to 'not-holding' as part of Active_Actions and when the conditions causing 'holding-prm' or 'holding-sec' are no longer true. The value 'holding-prm' must be set when the condition (notTR_Flag & not RE_Flag & (PC_LS=QLS | LEM_Fail | TNE>NS_Max | (not LS_Flag & TPC > T_Out))) is satisfied in state PC8:ACTIVE for the A Port. The value 'holding-sec' must be set when the condition (notTR_Flag & not RE_Flag & (PC_LS=QLS | LEM_Fail | TNE>NS_Max | (not LS_Flag & TPC > T_Out))) is satisfied in state PC8:ACTIVE for the B Port.")
lbOptSMTSetCount = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 2, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbOptSMTSetCount.setReference('ANSI { fddiSMT 53 }')
if mibBuilder.loadTexts: lbOptSMTSetCount.setStatus('mandatory')
if mibBuilder.loadTexts: lbOptSMTSetCount.setDescription('This variable is composed of a count incremented in response to a Set operation on the MIB, and the time of the change, however only the count is reported here (refer to ANSI SMT 8.4.1).')
lbOptSMTLastSetStationId = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 2, 1, 1, 1, 6), FddiSMTStationIdType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbOptSMTLastSetStationId.setReference('ANSI { fddiSMT 54 }')
if mibBuilder.loadTexts: lbOptSMTLastSetStationId.setStatus('mandatory')
if mibBuilder.loadTexts: lbOptSMTLastSetStationId.setDescription('The Station ID of the station that effected the last change in the FDDI MIB.')
lbOptMACBridgeFunctionTable = MibTable((1, 3, 6, 1, 4, 1, 43, 7, 2, 2, 1), )
if mibBuilder.loadTexts: lbOptMACBridgeFunctionTable.setStatus('mandatory')
if mibBuilder.loadTexts: lbOptMACBridgeFunctionTable.setDescription('A list of MAC bridge function entries.')
lbOptMACBridgeFunctionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 7, 2, 2, 1, 1), ).setIndexNames((0, "LINKB-OPT-FDDI-MIB-1-1-2", "lbOptMACBridgeFunctionSMTIndex"), (0, "LINKB-OPT-FDDI-MIB-1-1-2", "lbOptMACBridgeFunctionMACIndex"))
if mibBuilder.loadTexts: lbOptMACBridgeFunctionEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lbOptMACBridgeFunctionEntry.setDescription('Bridge function information for a given MAC within a given SMT.')
lbOptMACBridgeFunctionSMTIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbOptMACBridgeFunctionSMTIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lbOptMACBridgeFunctionSMTIndex.setDescription("A unique value for each SMT. Its value ranges between 1 and the value of snmpFddiSMTNumber. The value for each SMT must remain constant at least from one re-initialization of the entity's network management system to the next re-initialization.")
lbOptMACBridgeFunctionMACIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 2, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbOptMACBridgeFunctionMACIndex.setReference('ANSI { fddiMAC 34 }')
if mibBuilder.loadTexts: lbOptMACBridgeFunctionMACIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lbOptMACBridgeFunctionMACIndex.setDescription('Index variable for uniquely identifying the MAC object instances.')
lbOptMACBridgeFunctions = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 2, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbOptMACBridgeFunctions.setReference('ANSI { fddiMAC 12 }')
if mibBuilder.loadTexts: lbOptMACBridgeFunctions.setStatus('mandatory')
if mibBuilder.loadTexts: lbOptMACBridgeFunctions.setDescription("Indicates the MAC's optional bridging functions. The Value -1 is used to indicate that bridging is not supported by this MAC. The value is a sum. This value initially takes the value zero, then for each function present, 2 raised to a power is added to the sum. The powers are according to the following table: Function Power tb 0 -- Transparent bridging active sr 1 -- Src routing active srt 2 -- Src routing transparent active ")
lbOptMACTPriTable = MibTable((1, 3, 6, 1, 4, 1, 43, 7, 2, 2, 2), )
if mibBuilder.loadTexts: lbOptMACTPriTable.setStatus('mandatory')
if mibBuilder.loadTexts: lbOptMACTPriTable.setDescription('A list of MAC T-Pri entries.')
lbOptMACTPriEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 7, 2, 2, 2, 1), ).setIndexNames((0, "LINKB-OPT-FDDI-MIB-1-1-2", "lbOptMACTPriSMTIndex"), (0, "LINKB-OPT-FDDI-MIB-1-1-2", "lbOptMACTPriMACIndex"))
if mibBuilder.loadTexts: lbOptMACTPriEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lbOptMACTPriEntry.setDescription('A collection of T-Pri information for a given MAC within a given SMT.')
lbOptMACTPriSMTIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 2, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbOptMACTPriSMTIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lbOptMACTPriSMTIndex.setDescription("A unique value for each SMT. Its value ranges between 1 and the value of snmpFddiSMTNumber. The value for each SMT must remain constant at least from one re-initialization of the entity's network management system to the next re-initialization.")
lbOptMACTPriMACIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 2, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbOptMACTPriMACIndex.setReference('ANSI { fddiMAC 34 }')
if mibBuilder.loadTexts: lbOptMACTPriMACIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lbOptMACTPriMACIndex.setDescription('Index variable for uniquely identifying the MAC object instances.')
lbOptMACTPri0 = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 2, 2, 2, 1, 3), FddiTimeNano()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbOptMACTPri0.setReference('ANSI { fddiMAC 56 }')
if mibBuilder.loadTexts: lbOptMACTPri0.setStatus('mandatory')
if mibBuilder.loadTexts: lbOptMACTPri0.setDescription('This attribute is an unsigned twos-complement T_pri threshold as described in the MAC standard converted to non-twos-complement form and reported in 1 ns units.')
lbOptMACTPri1 = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 2, 2, 2, 1, 4), FddiTimeNano()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbOptMACTPri1.setReference('ANSI { fddiMAC 57 }')
if mibBuilder.loadTexts: lbOptMACTPri1.setStatus('mandatory')
if mibBuilder.loadTexts: lbOptMACTPri1.setDescription('This attribute is an unsigned twos-complement T_pri threshold as described in the MAC standard converted to non-twos-complement form and reported in 1 ns units.')
lbOptMACTPri2 = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 2, 2, 2, 1, 5), FddiTimeNano()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbOptMACTPri2.setReference('ANSI { fddiMAC 58 }')
if mibBuilder.loadTexts: lbOptMACTPri2.setStatus('mandatory')
if mibBuilder.loadTexts: lbOptMACTPri2.setDescription('This attribute is an unsigned twos-complement T_pri threshold as described in the MAC standard converted to non-twos-complement form and reported in 1 ns units.')
lbOptMACTPri3 = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 2, 2, 2, 1, 6), FddiTimeNano()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbOptMACTPri3.setReference('ANSI { fddiMAC 59 }')
if mibBuilder.loadTexts: lbOptMACTPri3.setStatus('mandatory')
if mibBuilder.loadTexts: lbOptMACTPri3.setDescription('This attribute is an unsigned twos-complement T_pri threshold as described in the MAC standard converted to non-twos-complement form and reported in 1 ns units.')
lbOptMACTPri4 = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 2, 2, 2, 1, 7), FddiTimeNano()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbOptMACTPri4.setReference('ANSI { fddiMAC 60 }')
if mibBuilder.loadTexts: lbOptMACTPri4.setStatus('mandatory')
if mibBuilder.loadTexts: lbOptMACTPri4.setDescription('This attribute is an unsigned twos-complement T_pri threshold as described in the MAC standard converted to non-twos-complement form and reported in 1 ns units.')
lbOptMACTPri5 = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 2, 2, 2, 1, 8), FddiTimeNano()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbOptMACTPri5.setReference('ANSI { fddiMAC 61 }')
if mibBuilder.loadTexts: lbOptMACTPri5.setStatus('mandatory')
if mibBuilder.loadTexts: lbOptMACTPri5.setDescription('This attribute is an unsigned twos-complement T_pri threshold as described in the MAC standard converted to non-twos-complement form and reported in 1 ns units.')
lbOptMACTPri6 = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 2, 2, 2, 1, 9), FddiTimeNano()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbOptMACTPri6.setReference('ANSI { fddiMAC 62 }')
if mibBuilder.loadTexts: lbOptMACTPri6.setStatus('mandatory')
if mibBuilder.loadTexts: lbOptMACTPri6.setDescription('This attribute is an unsigned twos-complement T_pri threshold as described in the MAC standard converted to non-twos-complement form and reported in 1 ns units.')
lbOptPATHRingTable = MibTable((1, 3, 6, 1, 4, 1, 43, 7, 2, 3, 1), )
if mibBuilder.loadTexts: lbOptPATHRingTable.setStatus('mandatory')
if mibBuilder.loadTexts: lbOptPATHRingTable.setDescription('A list of PATH ring entries.')
lbOptPATHRingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 7, 2, 3, 1, 1), ).setIndexNames((0, "LINKB-OPT-FDDI-MIB-1-1-2", "lbOptPATHRingSMTIndex"), (0, "LINKB-OPT-FDDI-MIB-1-1-2", "lbOptPATHRingPATHIndex"))
if mibBuilder.loadTexts: lbOptPATHRingEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lbOptPATHRingEntry.setDescription('Ring latency, trace status, and T-Rmode information for a given PATH within a given SMT.')
lbOptPATHRingSMTIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 2, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbOptPATHRingSMTIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lbOptPATHRingSMTIndex.setDescription("A unique value for each SMT. Its value ranges between 1 and the value of snmpFddiSMTNumber. The value for each SMT must remain constant at least from one re-initialization of the entity's network management system to the next re-initialization.")
lbOptPATHRingPATHIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 2, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbOptPATHRingPATHIndex.setReference('ANSI { fddiPATH 11 }')
if mibBuilder.loadTexts: lbOptPATHRingPATHIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lbOptPATHRingPATHIndex.setDescription('Index variable for uniquely identifying the primary, secondary and local PATH object instances. Local PATH object instances are represented with integer values 3 to 255.')
lbOptPATHRingLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 2, 3, 1, 1, 3), FddiTimeNano()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lbOptPATHRingLatency.setReference('ANSI { fddiPATH 13 }')
if mibBuilder.loadTexts: lbOptPATHRingLatency.setStatus('mandatory')
if mibBuilder.loadTexts: lbOptPATHRingLatency.setDescription('Gives the total accumulated latency of the ring associated with this path. May be measured directly by the station or calculated by a management station. Values of this object are reported in 1 ns units.')
lbOptPATHTraceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 2, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbOptPATHTraceStatus.setReference('ANSI { fddiPATH 14 }')
if mibBuilder.loadTexts: lbOptPATHTraceStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lbOptPATHTraceStatus.setDescription('This attribute indicates the current trace status of the path. The value is a sum which represents all of the trace status information which applies. This value initially takes the value zero, then for each condition which applies, 2 raised to a power is added to the sum. the powers are according to the following table: TraceStatus Power traceinitiated 0 tracepropragated 1 traceterminated 2 tracetimeout 3')
lbOptPATHT_Rmode = MibScalar((1, 3, 6, 1, 4, 1, 43, 7, 2, 3, 1, 1, 5), FddiTimeNano()).setLabel("lbOptPATHT-Rmode").setMaxAccess("readwrite")
if mibBuilder.loadTexts: lbOptPATHT_Rmode.setReference('ANSI { fddiPATH 19 }')
if mibBuilder.loadTexts: lbOptPATHT_Rmode.setStatus('mandatory')
if mibBuilder.loadTexts: lbOptPATHT_Rmode.setDescription('Used by RMT to limit the duration of restricted dialogs on a path. This object is reported in 1 ns units.')
lbOptPATHSbaTable = MibTable((1, 3, 6, 1, 4, 1, 43, 7, 2, 3, 2), )
if mibBuilder.loadTexts: lbOptPATHSbaTable.setStatus('mandatory')
if mibBuilder.loadTexts: lbOptPATHSbaTable.setDescription('A list of PATH Sba entries.')
lbOptPATHSbaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 7, 2, 3, 2, 1), ).setIndexNames((0, "LINKB-OPT-FDDI-MIB-1-1-2", "lbOptPATHSbaSMTIndex"), (0, "LINKB-OPT-FDDI-MIB-1-1-2", "lbOptPATHSbaPATHIndex"))
if mibBuilder.loadTexts: lbOptPATHSbaEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lbOptPATHSbaEntry.setDescription('Sba information for a given PATH within a given SMT.')
lbOptPATHSbaSMTIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 2, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbOptPATHSbaSMTIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lbOptPATHSbaSMTIndex.setDescription("A unique value for each SMT. Its value ranges between 1 and the value of snmpFddiSMTNumber. The value for each SMT must remain constant at least from one re-initialization of the entity's network management system to the next re-initialization.")
lbOptPATHSbaPATHIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 2, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbOptPATHSbaPATHIndex.setReference('ANSI { fddiPATH 11 }')
if mibBuilder.loadTexts: lbOptPATHSbaPATHIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lbOptPATHSbaPATHIndex.setDescription('Index variable for uniquely identifying the primary, secondary and local PATH object instances. Local PATH object instances are represented with integer values 3 to 255.')
lbOptPATHSbaPayload = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 2, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1562))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lbOptPATHSbaPayload.setReference('ANSI { fddiPATH 15 }')
if mibBuilder.loadTexts: lbOptPATHSbaPayload.setStatus('mandatory')
if mibBuilder.loadTexts: lbOptPATHSbaPayload.setDescription('The payload portion of the Synchronous Bandwidth Allocation for thi path. This value represents the maximum number of bytes of data allocated for transmission per 125 microseconds.')
lbOptPATHSbaOverhead = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 2, 3, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lbOptPATHSbaOverhead.setReference('ANSI { fddiPATH 16 }')
if mibBuilder.loadTexts: lbOptPATHSbaOverhead.setStatus('mandatory')
if mibBuilder.loadTexts: lbOptPATHSbaOverhead.setDescription('The overhead portion of the Synchronous Bandwith Allocation for this path. This value repersents the maximum number of bytes overhead (token capture, frame header, etc.) used pre negotiated Target Token Rotation Time (T_neg).')
lbOptPATHSbaAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 2, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 12500000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lbOptPATHSbaAvailable.setReference('ANSI { fddiPATH 20 }')
if mibBuilder.loadTexts: lbOptPATHSbaAvailable.setStatus('mandatory')
if mibBuilder.loadTexts: lbOptPATHSbaAvailable.setDescription('This value is the maximum Synchronous Bandwith available for a path in bytes per second.')
lbOptPORTTable = MibTable((1, 3, 6, 1, 4, 1, 43, 7, 2, 4, 1), )
if mibBuilder.loadTexts: lbOptPORTTable.setStatus('mandatory')
if mibBuilder.loadTexts: lbOptPORTTable.setDescription('A list of optional PORT entries.')
lbOptPORTEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 7, 2, 4, 1, 1), ).setIndexNames((0, "LINKB-OPT-FDDI-MIB-1-1-2", "lbOptPORTSMTIndex"), (0, "LINKB-OPT-FDDI-MIB-1-1-2", "lbOptPORTIndex"))
if mibBuilder.loadTexts: lbOptPORTEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lbOptPORTEntry.setDescription('MAC loop time and EB error count information for a given PORT within a given SMT.')
lbOptPORTSMTIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 2, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbOptPORTSMTIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lbOptPORTSMTIndex.setDescription("A unique value for each SMT. Its value ranges between 1 and the value of snmpFddiSMTNumber. The value for each SMT must remain constant at least from one re-initialization of the entity's network management system to the next re-initialization.")
lbOptPORTIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 2, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbOptPORTIndex.setReference('ANSI { fddiPORT 29 }')
if mibBuilder.loadTexts: lbOptPORTIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lbOptPORTIndex.setDescription('Index variable for uniquely identifying the PORT object instances.')
lbOptPORTMACLoopTime = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 2, 4, 1, 1, 3), FddiTimeNano()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lbOptPORTMACLoopTime.setReference('ANSI { fddiPORT 21 }')
if mibBuilder.loadTexts: lbOptPORTMACLoopTime.setStatus('mandatory')
if mibBuilder.loadTexts: lbOptPORTMACLoopTime.setDescription('This attribute controls the value used for T_Next(9) (see 9.4.4.2.3). This object is reported in 1 ns units.')
lbOptPORTEBErrorCt = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 2, 4, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbOptPORTEBErrorCt.setReference('ANSI { fddiPORT 41 }')
if mibBuilder.loadTexts: lbOptPORTEBErrorCt.setStatus('mandatory')
if mibBuilder.loadTexts: lbOptPORTEBErrorCt.setDescription('A count that should as closely as possible match the times an Elasticity Buffer Error has occurred while in active line state.')
lbOptPORTLSTable = MibTable((1, 3, 6, 1, 4, 1, 43, 7, 2, 4, 2), )
if mibBuilder.loadTexts: lbOptPORTLSTable.setStatus('mandatory')
if mibBuilder.loadTexts: lbOptPORTLSTable.setDescription('A list of optional PORT line state entries.')
lbOptPORTLSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 7, 2, 4, 2, 1), ).setIndexNames((0, "LINKB-OPT-FDDI-MIB-1-1-2", "lbOptPORTLSSMTIndex"), (0, "LINKB-OPT-FDDI-MIB-1-1-2", "lbOptPORTLSPORTIndex"))
if mibBuilder.loadTexts: lbOptPORTLSEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lbOptPORTLSEntry.setDescription('Maintenance line state and PC line state information for a given PORT within a given SMT.')
lbOptPORTLSSMTIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 2, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbOptPORTLSSMTIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lbOptPORTLSSMTIndex.setDescription("A unique value for each SMT. Its value ranges between 1 and the value of snmpFddiSMTNumber. The value for each SMT must remain constant at least from one re-initialization of the entity's network management system to the next re-initialization.")
lbOptPORTLSPORTIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 2, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbOptPORTLSPORTIndex.setReference('ANSI { fddiPORT 29 }')
if mibBuilder.loadTexts: lbOptPORTLSPORTIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lbOptPORTLSPORTIndex.setDescription('Index variable for uniquely identifying the PORT object instances.')
lbOptPORTMaintLS = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 2, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("quiet", 1), ("idle", 2), ("master", 3), ("halt", 4), ("receive-active", 5), ("receive-unknown", 6), ("receive-noise", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lbOptPORTMaintLS.setReference('ANSI { fddiPORT 31 }')
if mibBuilder.loadTexts: lbOptPORTMaintLS.setStatus('mandatory')
if mibBuilder.loadTexts: lbOptPORTMaintLS.setDescription('The PORT Maintenance Line State specifies the line state (Maint_LS) to be transmitted when the PCM state machine for the port is in state PC9 Maint.')
lbOptPORTPCLS = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 2, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("quiet", 1), ("idle", 2), ("master", 3), ("halt", 4), ("receive-active", 5), ("receive-unknown", 6), ("receive-noise", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbOptPORTPCLS.setReference('ANSI { fddiPORT 34 }')
if mibBuilder.loadTexts: lbOptPORTPCLS.setStatus('mandatory')
if mibBuilder.loadTexts: lbOptPORTPCLS.setDescription('This attribute indicates the line state (PC_LS) received by the port.')
lbOptSMTHoldCondition = NotificationType((1, 3, 6, 1, 4, 1, 43, 7, 2) + (0,1)).setObjects(("DRAFT-FDDI-MIB-VER-3-2", "fddimibSMTStationId"), ("LINKB-OPT-FDDI-MIB-1-1-2", "lbOptSMTHoldState"))
if mibBuilder.loadTexts: lbOptSMTHoldCondition.setDescription('Generated when fddiSMTHoldState (fddimibSMTHoldState) assumes the state holding-prm or holding-sec. This notification is a Condition in the Status Report Protocol (see 7.2.7 and 8.3).')
if mibBuilder.loadTexts: lbOptSMTHoldCondition.setReference('ANSI { fddiSMT 71 }')
lbOptSMTPeerWrapCondition = NotificationType((1, 3, 6, 1, 4, 1, 43, 7, 2) + (0,2)).setObjects(("DRAFT-FDDI-MIB-VER-3-2", "fddimibSMTStationId"), ("DRAFT-FDDI-MIB-VER-3-2", "fddimibSMTCFState"), ("DRAFT-FDDI-MIB-VER-3-2", "fddimibSMTPeerWrapFlag"))
if mibBuilder.loadTexts: lbOptSMTPeerWrapCondition.setDescription('This condition is active when fddiSMTPeerWrapFlag (fddimibSMTPeerWrapFlag) is set. This notification is a Condition in the Status Report Protocol (see 7.2.7 and 8.3).')
if mibBuilder.loadTexts: lbOptSMTPeerWrapCondition.setReference('ANSI { fddiSMT 72 }')
lbOptMACDuplicateAddressCondition = NotificationType((1, 3, 6, 1, 4, 1, 43, 7, 2) + (0,3)).setObjects(("DRAFT-FDDI-MIB-VER-3-2", "fddimibSMTStationId"), ("DRAFT-FDDI-MIB-VER-3-2", "fddimibMACSMTAddress"), ("DRAFT-FDDI-MIB-VER-3-2", "fddimibMACUpstreamNbr"), ("DRAFT-FDDI-MIB-VER-3-2", "fddimibMACDaFlag"), ("DRAFT-FDDI-MIB-VER-3-2", "fddimibMACUnaDaFlag"))
if mibBuilder.loadTexts: lbOptMACDuplicateAddressCondition.setDescription('This condition is active when either fddiMACDA-Flag (fddimibMACDaFlag) or fddiMACUNDA-Flag (fddimibMACUnaDaFlag) is set. This event is handled as a Condition in the Status Report Protocol (see 7.2.7 and 8.3).')
if mibBuilder.loadTexts: lbOptMACDuplicateAddressCondition.setReference('ANSI { fddiMAC 140 }')
lbOptMACFrameErrorCondition = NotificationType((1, 3, 6, 1, 4, 1, 43, 7, 2) + (0,4)).setObjects(("DRAFT-FDDI-MIB-VER-3-2", "fddimibSMTStationId"), ("DRAFT-FDDI-MIB-VER-3-2", "fddimibMACFrameErrorFlag"), ("DRAFT-FDDI-MIB-VER-3-2", "fddimibMACFrameCts"), ("DRAFT-FDDI-MIB-VER-3-2", "fddimibMACErrorCts"), ("DRAFT-FDDI-MIB-VER-3-2", "fddimibMACLostCts"), ("DRAFT-FDDI-MIB-VER-3-2", "fddimibMACFrameErrorRatio"))
if mibBuilder.loadTexts: lbOptMACFrameErrorCondition.setDescription('Generated when the fddiMACFrameErrorRatio (fddimibMACFrameErrorRatio) is greater than or equal to fddiMACFrameErrorThreshold (fddimibMACFrameErrorThreshold). This event is handled as a Condition in the Status Report Protocol (see 7.2.7 and 8.3).')
if mibBuilder.loadTexts: lbOptMACFrameErrorCondition.setReference('ANSI { fddiMAC 141 }')
lbOptMACNotCopiedCondition = NotificationType((1, 3, 6, 1, 4, 1, 43, 7, 2) + (0,5)).setObjects(("DRAFT-FDDI-MIB-VER-3-2", "fddimibSMTStationId"), ("DRAFT-FDDI-MIB-VER-3-2", "fddimibMACNotCopiedCts"), ("DRAFT-FDDI-MIB-VER-3-2", "fddimibMACCopiedCts"), ("DRAFT-FDDI-MIB-VER-3-2", "fddimibMACNotCopiedRatio"), ("DRAFT-FDDI-MIB-VER-3-2", "fddimibMACNotCopiedFlag"))
if mibBuilder.loadTexts: lbOptMACNotCopiedCondition.setDescription('Generated when the fddiMACNotCopiedRatio (fddimibMACNotCopiedRatio) is greater than or equal to the fddiMACNotCopiedThreshold (lbOptMACNotCopiedThreshold). This event is handled as a Condition in the Status Report Protocol (see 7.2.7 and 8.3).')
if mibBuilder.loadTexts: lbOptMACNotCopiedCondition.setReference('ANSI { fddiMAC 142 }')
lbOptMACNeighborChangeEvent = NotificationType((1, 3, 6, 1, 4, 1, 43, 7, 2) + (0,6)).setObjects(("DRAFT-FDDI-MIB-VER-3-2", "fddimibSMTStationId"), ("DRAFT-FDDI-MIB-VER-3-2", "fddimibMACUpstreamNbr"), ("DRAFT-FDDI-MIB-VER-3-2", "fddimibMACOldUpstreamNbr"), ("DRAFT-FDDI-MIB-VER-3-2", "fddimibMACDownstreamNbr"), ("DRAFT-FDDI-MIB-VER-3-2", "fddimibMACOldDownstreamNbr"), ("DRAFT-FDDI-MIB-VER-3-2", "fddimibMACCurrentPath"), ("DRAFT-FDDI-MIB-VER-3-2", "fddimibMACSMTAddress"))
if mibBuilder.loadTexts: lbOptMACNeighborChangeEvent.setDescription("Generated when a change in a MAC's upstream neighbor address or downstream neighbor address is detected. (see 7.2.7 and 8.3).")
if mibBuilder.loadTexts: lbOptMACNeighborChangeEvent.setReference('ANSI { fddiMAC 143 }')
lbOptMACPathChangeEvent = NotificationType((1, 3, 6, 1, 4, 1, 43, 7, 2) + (0,7)).setObjects(("DRAFT-FDDI-MIB-VER-3-2", "fddimibSMTStationId"), ("DRAFT-FDDI-MIB-VER-3-2", "fddimibMACAvailablePaths"), ("DRAFT-FDDI-MIB-VER-3-2", "fddimibMACCurrentPath"), ("DRAFT-FDDI-MIB-VER-3-2", "fddimibMACRequestedPaths"))
if mibBuilder.loadTexts: lbOptMACPathChangeEvent.setDescription('This event is generated when the value of the fddiMACCurrentPath (fddimibMACCurrentPath) changes. This event shall be supressed if the value changes from isolated to local or local to isolated (see 7.2.7 and 8.3).')
if mibBuilder.loadTexts: lbOptMACPathChangeEvent.setReference('ANSI { fddiMAC 144 }')
lbOptPORTLerCondition = NotificationType((1, 3, 6, 1, 4, 1, 43, 7, 2) + (0,8)).setObjects(("DRAFT-FDDI-MIB-VER-3-2", "fddimibSMTStationId"), ("DRAFT-FDDI-MIB-VER-3-2", "fddimibPORTLerCutoff"), ("DRAFT-FDDI-MIB-VER-3-2", "fddimibPORTLerAlarm"), ("DRAFT-FDDI-MIB-VER-3-2", "fddimibPORTLerEstimate"), ("DRAFT-FDDI-MIB-VER-3-2", "fddimibPORTLemRejectCts"), ("DRAFT-FDDI-MIB-VER-3-2", "fddimibPORTLemCts"), ("DRAFT-FDDI-MIB-VER-3-2", "fddimibPORTLerFlag"))
if mibBuilder.loadTexts: lbOptPORTLerCondition.setDescription('This condition becomes active when the value of fddiPORTLer-Estimate (fddimibPORTLerEstimate) is less than or equal to fddiPORTLer-Alarm (fddimibPORTLerAlarm). This will be reported with the Status Report Frames (SRF) (see 7.2.7 and 8.3).')
if mibBuilder.loadTexts: lbOptPORTLerCondition.setReference('ANSI { fddiPORT 80 }')
lbOptPORTUndesiredConnAttemptEvent = NotificationType((1, 3, 6, 1, 4, 1, 43, 7, 2) + (0,9)).setObjects(("DRAFT-FDDI-MIB-VER-3-2", "fddimibSMTStationId"), ("DRAFT-FDDI-MIB-VER-3-2", "fddimibPORTMyType"), ("DRAFT-FDDI-MIB-VER-3-2", "fddimibPORTConnectState"), ("DRAFT-FDDI-MIB-VER-3-2", "fddimibPORTNeighborType"), ("DRAFT-FDDI-MIB-VER-3-2", "fddimibPORTPCWithhold"))
if mibBuilder.loadTexts: lbOptPORTUndesiredConnAttemptEvent.setDescription('Generated when an undesired connection attempt has been made (see 5.2.4, 7.2.7, and 8.3).')
if mibBuilder.loadTexts: lbOptPORTUndesiredConnAttemptEvent.setReference('ANSI { fddiPORT 81 }')
lbOptPORTEBErrorCondition = NotificationType((1, 3, 6, 1, 4, 1, 43, 7, 2) + (0,10)).setObjects(("DRAFT-FDDI-MIB-VER-3-2", "fddimibSMTStationId"), ("LINKB-OPT-FDDI-MIB-1-1-2", "lbOptPORTEBErrorCt"))
if mibBuilder.loadTexts: lbOptPORTEBErrorCondition.setDescription("Generated when the Elasticity Buffer Error-Ct (lbOptPORTEBErrorCt) increments. This is handled as a condition in the Status Report Protocol. It is generated when an increment occurs in the station's sampling period (see 7.2.7 and 8.3).")
if mibBuilder.loadTexts: lbOptPORTEBErrorCondition.setReference('ANSI { fddiPORT 82 }')
lbOptPORTPathChangeEvent = NotificationType((1, 3, 6, 1, 4, 1, 43, 7, 2) + (0,11)).setObjects(("DRAFT-FDDI-MIB-VER-3-2", "fddimibSMTStationId"), ("DRAFT-FDDI-MIB-VER-3-2", "fddimibPORTAvailablePaths"), ("DRAFT-FDDI-MIB-VER-3-2", "fddimibPORTCurrentPath"), ("DRAFT-FDDI-MIB-VER-3-2", "fddimibPORTRequestedPaths"), ("DRAFT-FDDI-MIB-VER-3-2", "fddimibPORTMyType"), ("DRAFT-FDDI-MIB-VER-3-2", "fddimibPORTNeighborType"))
if mibBuilder.loadTexts: lbOptPORTPathChangeEvent.setDescription('This event is generated when the value of the fddiPORTCurrentPath (lbOptPORTCurrentPath) changes. This event shall be surpressed if the value changes from isolated to local or local to isolated (see 7.2.7 and 8.3).')
if mibBuilder.loadTexts: lbOptPORTPathChangeEvent.setReference('ANSI { fddiPORT 83 }')
mibBuilder.exportSymbols("LINKB-OPT-FDDI-MIB-1-1-2", lbOptMACTPri3=lbOptMACTPri3, lbOptSMTTable=lbOptSMTTable, lbOptPATHSbaAvailable=lbOptPATHSbaAvailable, lbOptPATHRingTable=lbOptPATHRingTable, lbOptPATH=lbOptPATH, lbOptMACTPriMACIndex=lbOptMACTPriMACIndex, lbOptMACNotCopiedCondition=lbOptMACNotCopiedCondition, a3Com=a3Com, lbOptMACTPri0=lbOptMACTPri0, lbOptPATHRingPATHIndex=lbOptPATHRingPATHIndex, lbOptPATHSbaEntry=lbOptPATHSbaEntry, lbOptMACTPri1=lbOptMACTPri1, lbOptPORTLSTable=lbOptPORTLSTable, lbOptPORTMaintLS=lbOptPORTMaintLS, lbOptMACBridgeFunctionMACIndex=lbOptMACBridgeFunctionMACIndex, lbOptMACTPri2=lbOptMACTPri2, lbOptPATHSbaOverhead=lbOptPATHSbaOverhead, lbOptPORTPCLS=lbOptPORTPCLS, lbOptSMTHoldCondition=lbOptSMTHoldCondition, lbOptMACTPriEntry=lbOptMACTPriEntry, lbOptMACFrameErrorCondition=lbOptMACFrameErrorCondition, lb3ghOptFddi=lb3ghOptFddi, lbOptMACTPri6=lbOptMACTPri6, lbOptPORTIndex=lbOptPORTIndex, lbOptPORTEBErrorCondition=lbOptPORTEBErrorCondition, lbOptSMTManufacturerData=lbOptSMTManufacturerData, lbOptSMT=lbOptSMT, lbOptPORTLSEntry=lbOptPORTLSEntry, lbOptSMTPeerWrapCondition=lbOptSMTPeerWrapCondition, lbOptMACTPriSMTIndex=lbOptMACTPriSMTIndex, lbOptSMTEntry=lbOptSMTEntry, lbOptMACBridgeFunctionTable=lbOptMACBridgeFunctionTable, lbOptPORTUndesiredConnAttemptEvent=lbOptPORTUndesiredConnAttemptEvent, lbOptPATHRingEntry=lbOptPATHRingEntry, lbOptMACTPriTable=lbOptMACTPriTable, lbOptSMTLastSetStationId=lbOptSMTLastSetStationId, lbOptPORTLerCondition=lbOptPORTLerCondition, lbOptPATHRingLatency=lbOptPATHRingLatency, lbOptPORTMACLoopTime=lbOptPORTMACLoopTime, lbOptMAC=lbOptMAC, lbOptSMTIndex=lbOptSMTIndex, lbOptPATHSbaSMTIndex=lbOptPATHSbaSMTIndex, lbOptPATHSbaPayload=lbOptPATHSbaPayload, lbOptPORTTable=lbOptPORTTable, lbOptMACTPri5=lbOptMACTPri5, lbOptPORTSMTIndex=lbOptPORTSMTIndex, lbOptMACDuplicateAddressCondition=lbOptMACDuplicateAddressCondition, lbOptPORTEBErrorCt=lbOptPORTEBErrorCt, lbOptPORTEntry=lbOptPORTEntry, lbOptPORT=lbOptPORT, lbOptPORTPathChangeEvent=lbOptPORTPathChangeEvent, lbOptMACBridgeFunctionSMTIndex=lbOptMACBridgeFunctionSMTIndex, lbOptMACTPri4=lbOptMACTPri4, lbOptPATHRingSMTIndex=lbOptPATHRingSMTIndex, lbOptPATHT_Rmode=lbOptPATHT_Rmode, lbOptPATHSbaPATHIndex=lbOptPATHSbaPATHIndex, lbOptMACBridgeFunctions=lbOptMACBridgeFunctions, lbOptMACNeighborChangeEvent=lbOptMACNeighborChangeEvent, lbOptPATHSbaTable=lbOptPATHSbaTable, lb3gh=lb3gh, lbOptSMTHoldState=lbOptSMTHoldState, lbOptMACBridgeFunctionEntry=lbOptMACBridgeFunctionEntry, lbOptPATHTraceStatus=lbOptPATHTraceStatus, lbOptPORTLSPORTIndex=lbOptPORTLSPORTIndex, lbOptSMTSetCount=lbOptSMTSetCount, lbOptSMTManufacturerOUI=lbOptSMTManufacturerOUI, lbOptMACPathChangeEvent=lbOptMACPathChangeEvent, lbOptPORTLSSMTIndex=lbOptPORTLSSMTIndex)
