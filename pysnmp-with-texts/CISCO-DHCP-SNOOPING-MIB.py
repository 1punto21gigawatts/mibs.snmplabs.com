#
# PySNMP MIB module CISCO-DHCP-SNOOPING-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-DHCP-SNOOPING-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:54:16 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
InterfaceIndex, ifIndex, ifName = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "ifIndex", "ifName")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
VlanIndex, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
ObjectIdentity, Unsigned32, Bits, MibIdentifier, Integer32, Gauge32, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, IpAddress, TimeTicks, NotificationType, Counter32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Unsigned32", "Bits", "MibIdentifier", "Integer32", "Gauge32", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "IpAddress", "TimeTicks", "NotificationType", "Counter32", "iso")
MacAddress, RowStatus, TextualConvention, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "RowStatus", "TextualConvention", "TruthValue", "DisplayString")
ciscoDhcpSnoopingMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 380))
ciscoDhcpSnoopingMIB.setRevisions(('2009-08-26 00:00', '2009-08-10 00:00', '2009-04-12 00:00', '2007-11-13 00:00', '2007-07-12 00:00', '2007-05-30 00:00', '2006-03-16 16:00', '2005-10-26 00:00', '2004-03-04 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoDhcpSnoopingMIB.setRevisionsDescriptions(('Add cdsVlanOperStatusGroup.', "Add new enum 'strictIpMac' to cdsIfSrcGuardFilterType object.", 'Add cdsIfVlanRelayInfoOptCircuitIdDirect.', 'Add cdsNotifControlGroup and cdsBindingsNotificationGroup.', 'Add cdsIfVlanRelayInfoOptCircuitIdGroup, cdsStatisticsExtGroup and deprecate cdsRelayAgentRemoteIdGroup with cdsRelayAgentInfoOptRemoteIdSubGroup.', 'Add cdsBindingsHostnameGroup', 'Add cdsBindingsLimitGroup, cdsStaticBindingsGroup, cdsIfSrcGuardIpFilterGroup, cdsIfSrcGuardTrafficFilterGroup, cdsIfSrcGuardExtGroup and deprecate cdsIfSrcGuardGroup with cdsIfSrcGuardGroupRev1.', 'Add cdsIfFeatureConfigGroup.', 'Initial revision of this MIB module.',))
if mibBuilder.loadTexts: ciscoDhcpSnoopingMIB.setLastUpdated('200908260000Z')
if mibBuilder.loadTexts: ciscoDhcpSnoopingMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoDhcpSnoopingMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-lan-switch-snmp@cisco.com')
if mibBuilder.loadTexts: ciscoDhcpSnoopingMIB.setDescription('The MIB module is for configuration of DHCP Snooping feature. DHCP Snooping is a security mechanism which uses information gleaned from DHCP packets to provide per-interface security capabilities.')
ciscoDhcpSnoopingMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 380, 0))
ciscoDhcpSnoopingMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 380, 1))
ciscoDhcpSnoopingMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 380, 2))
cdsGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 380, 1, 1))
cdsVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 380, 1, 2))
cdsInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 380, 1, 3))
cdsBindings = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 380, 1, 4))
cdsStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 380, 1, 5))
cdsSrcGuard = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 380, 1, 6))
cdsFeatureEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 380, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdsFeatureEnable.setStatus('current')
if mibBuilder.loadTexts: cdsFeatureEnable.setDescription("This object indicates whether the DHCP Snooping feature is enabled at the device level. Setting this object to 'false' disables the DHCP Snooping feature globally thus disabling the feature at each VLAN. Setting this object to 'true' will start the DHCP Snooping feature running in the device. Once the DHCP Snooping is enabled, whether the feature is running at each VLAN is controlled by the cdsVlanConfigTable.")
cdsDatabaseFile = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 380, 1, 1, 2), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdsDatabaseFile.setStatus('current')
if mibBuilder.loadTexts: cdsDatabaseFile.setDescription('This object indicates the name of the database file used to store DHCP bindings information.')
cdsDatabaseUpdateInterval = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 380, 1, 1, 3), Unsigned32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdsDatabaseUpdateInterval.setStatus('current')
if mibBuilder.loadTexts: cdsDatabaseUpdateInterval.setDescription('This object indicates the time interval at which DHCP bindings information will be written to the database file denoted by cdsDatabaseFile object. Setting this object to zero will disable the storage of DHCP bindings.')
cdsRelayAgentInfoOptEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 380, 1, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdsRelayAgentInfoOptEnable.setReference('RFC 3046, DHCP Relay Agent Information Option.')
if mibBuilder.loadTexts: cdsRelayAgentInfoOptEnable.setStatus('current')
if mibBuilder.loadTexts: cdsRelayAgentInfoOptEnable.setDescription("This object indicates if the DHCP relay agent information option (option 82) will be inserted to DHCP packets by DHCP Snooping feature. If this object is set to 'true', DHCP option 82 data will be inserted to DHCP packets. If this object is set to 'false', DHCP option 82 data will not be inserted.")
cdsRelayAgentInfoOptRemoteId = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 380, 1, 1, 5), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdsRelayAgentInfoOptRemoteId.setReference('RFC 3046, DHCP Relay Agent Information Option.')
if mibBuilder.loadTexts: cdsRelayAgentInfoOptRemoteId.setStatus('deprecated')
if mibBuilder.loadTexts: cdsRelayAgentInfoOptRemoteId.setDescription("This object indicates the Remote ID used as part of the DHCP relay information option (option 82) data inserted to DHCP packets by DHCP Snooping feature. The value of this object is ignored whenever the value of cdsRelayAgentInfoOptEnable object is 'false'. This object is deprecated and superceded by cdsRelayAgentInfoOptRemoteIdSub object.")
cdsMatchMacAddressEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 380, 1, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdsMatchMacAddressEnable.setStatus('current')
if mibBuilder.loadTexts: cdsMatchMacAddressEnable.setDescription("This object indicates if DHCP Snooping Mac address matching is enabled. If this object is set to 'true', DHCP Snooping Mac address matching is enabled. If this object is set to 'false', DHCP Snooping Mac address matching is disabled.")
cdsGlobalMaxBindingsLimit = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 380, 1, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdsGlobalMaxBindingsLimit.setStatus('current')
if mibBuilder.loadTexts: cdsGlobalMaxBindingsLimit.setDescription('This object specifies the maximum number of DHCP bindings allowed in the device.')
cdsRelayAgentInfoOptRemoteIdSub = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 380, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdsRelayAgentInfoOptRemoteIdSub.setReference('RFC 3046, DHCP Relay Agent Information Option.')
if mibBuilder.loadTexts: cdsRelayAgentInfoOptRemoteIdSub.setStatus('current')
if mibBuilder.loadTexts: cdsRelayAgentInfoOptRemoteIdSub.setDescription("This object specifies the Remote ID used in Agent Remote ID sub-option of the DHCP relay information option (option 82) data inserted to DHCP packets by DHCP Snooping feature. The value of this object is in a format of a user-defined string. Its default value is the device's MAC address. The value of this object is ignored whenever the value of cdsRelayAgentInfoOptEnable object is 'false'.")
cdsBindingsNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 380, 1, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdsBindingsNotifEnabled.setStatus('current')
if mibBuilder.loadTexts: cdsBindingsNotifEnabled.setDescription("This object specifies whether cdsBindingsNotification is generated by the system. Setting this object value to 'true' will enable generation of cdsBindingsNotification. Seting this object value to 'false' will disable generation of cdsBindingsNotification.")
cdsVlanConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 380, 1, 2, 1), )
if mibBuilder.loadTexts: cdsVlanConfigTable.setStatus('current')
if mibBuilder.loadTexts: cdsVlanConfigTable.setDescription('A table provides the mechanism to control DHCP Snooping per VLAN. When a VLAN is created in a device supporting this table, a corresponding entry of this table will be added.')
cdsVlanConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 380, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-DHCP-SNOOPING-MIB", "cdsVlanIndex"))
if mibBuilder.loadTexts: cdsVlanConfigEntry.setStatus('current')
if mibBuilder.loadTexts: cdsVlanConfigEntry.setDescription('A row instance contains the configuration to enable or disable DHCP Snooping at each existing VLAN.')
cdsVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 380, 1, 2, 1, 1, 1), VlanIndex())
if mibBuilder.loadTexts: cdsVlanIndex.setStatus('current')
if mibBuilder.loadTexts: cdsVlanIndex.setDescription('This object indicates the VLAN number on which DHCP Snooping feature is configured.')
cdsVlanDhcpSnoopingEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 380, 1, 2, 1, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdsVlanDhcpSnoopingEnable.setStatus('current')
if mibBuilder.loadTexts: cdsVlanDhcpSnoopingEnable.setDescription("This object indicates whether DHCP Snooping is enabled in this VLAN. If this object is set to 'true', DHCP Snooping is enabled. If this object is set to 'false', DHCP Snooping is disabled.")
cdsVlanDhcpSnoopingOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 380, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("operational", 1), ("notOperational", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdsVlanDhcpSnoopingOperStatus.setStatus('current')
if mibBuilder.loadTexts: cdsVlanDhcpSnoopingOperStatus.setDescription("This object indicates whether DHCP Snooping is operational in this VLAN. If this object is 'operational', DHCP Snooping is running. If this object is 'notOperational', DHCP Snooping is not running.")
cdsIfConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 380, 1, 3, 1), )
if mibBuilder.loadTexts: cdsIfConfigTable.setStatus('current')
if mibBuilder.loadTexts: cdsIfConfigTable.setDescription('A table provides the mechanism to configure the trust state for DHCP Snooping purpose at each interface capable of this feature. Some of the interfaces (but not limited to) for which this feature might be applicable are: ifType = ethernetCsmacd(6).')
cdsIfConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 380, 1, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cdsIfConfigEntry.setStatus('current')
if mibBuilder.loadTexts: cdsIfConfigEntry.setDescription('A row instance contains the configuration to enable or disable trust state for DHCP Snooping at each interface capable of this feature.')
cdsIfTrustEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 380, 1, 3, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdsIfTrustEnable.setStatus('current')
if mibBuilder.loadTexts: cdsIfTrustEnable.setDescription("This object indicates whether the interface is trusted for DHCP Snooping purpose. If this object is set to 'true', the interface is trusted. DHCP packets coming to this interface will be forwarded without checking. If this object is set to 'false', the interface is not trusted. DHCP packets coming to this interface will be subjected to DHCP checks.")
cdsIfRateLimitTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 380, 1, 3, 2), )
if mibBuilder.loadTexts: cdsIfRateLimitTable.setStatus('current')
if mibBuilder.loadTexts: cdsIfRateLimitTable.setDescription('A table provides the mechanism to configure the rate limit for DHCP Snooping purpose at each interface capable of this feature. Some of the interfaces (but not limited to) for which this feature might be applicable are: ifType = ethernetCsmacd(6).')
cdsIfRateLimitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 380, 1, 3, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cdsIfRateLimitEntry.setStatus('current')
if mibBuilder.loadTexts: cdsIfRateLimitEntry.setDescription('A row instance contains the configuration of rate limit DHCP Snooping at each interface capable of this feature.')
cdsIfRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 380, 1, 3, 2, 1, 1), Unsigned32()).setUnits('packets per second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdsIfRateLimit.setStatus('current')
if mibBuilder.loadTexts: cdsIfRateLimit.setDescription('This object indicates rate limit value for DHCP Snooping purpose. If the value of this object is 0, no rate limit is applied for DHCP traffic at this interface.')
cdsIfFeatureConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 380, 1, 3, 3), )
if mibBuilder.loadTexts: cdsIfFeatureConfigTable.setStatus('current')
if mibBuilder.loadTexts: cdsIfFeatureConfigTable.setDescription('A table provides the mechanism to enable or disable DHCP Snooping feature at each interface capable of this feature. Some of the interfaces (but not limited to) for which this configuration might be applicable are: ifType = ethernetCsmacd(6).')
cdsIfFeatureConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 380, 1, 3, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cdsIfFeatureConfigEntry.setStatus('current')
if mibBuilder.loadTexts: cdsIfFeatureConfigEntry.setDescription('A row instance contains the configuration to enable or disable DHCP Snooping at each interface capable of this feature.')
cdsIfFeatureEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 380, 1, 3, 3, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdsIfFeatureEnable.setStatus('current')
if mibBuilder.loadTexts: cdsIfFeatureEnable.setDescription("This object indicates whether the DHCP Snooping feature is enabled at this interface. If this object is set to 'true', DHCP Snooping is enabled. If this object is set to 'false', DHCP Snooping is disabled.")
cdsIfBindingsLimitTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 380, 1, 3, 4), )
if mibBuilder.loadTexts: cdsIfBindingsLimitTable.setStatus('current')
if mibBuilder.loadTexts: cdsIfBindingsLimitTable.setDescription('A table provides the mechanism to configure the binding limit for DHCP Snooping purpose at each interface capable of this feature. Some of the interfaces (but not limited to) for which this feature might be applicable are: ifType = ethernetCsmacd(6).')
cdsIfBindingsLimitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 380, 1, 3, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cdsIfBindingsLimitEntry.setStatus('current')
if mibBuilder.loadTexts: cdsIfBindingsLimitEntry.setDescription('A row instance contains the configuration of binding limit at each interface capable of this feature.')
cdsIfBindingsLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 380, 1, 3, 4, 1, 1), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdsIfBindingsLimit.setStatus('current')
if mibBuilder.loadTexts: cdsIfBindingsLimit.setDescription("This object specifies the maximum number of DHCP bindings allowed on this interface. This objects value will limit the number of entries in cdsBindingsTable and cdsStaticBindingsTable. The sum of all instances' value of cdsIfBindingsLimit in this table should be less than or equal to the object value of cdsGlobalMaxBindingsLimit.")
cdsIfVlanRelayInfoOptCircuitIdTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 380, 1, 3, 5), )
if mibBuilder.loadTexts: cdsIfVlanRelayInfoOptCircuitIdTable.setStatus('current')
if mibBuilder.loadTexts: cdsIfVlanRelayInfoOptCircuitIdTable.setDescription('Each entry in this table represent circuit-id information, configured on per port per vlan.')
cdsIfVlanRelayInfoOptCircuitIdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 380, 1, 3, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-DHCP-SNOOPING-MIB", "cdsIfVlan"))
if mibBuilder.loadTexts: cdsIfVlanRelayInfoOptCircuitIdEntry.setStatus('current')
if mibBuilder.loadTexts: cdsIfVlanRelayInfoOptCircuitIdEntry.setDescription('Entry contains circuit-id information for a particular interface and VLAN.')
cdsIfVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 380, 1, 3, 5, 1, 1), VlanIndex())
if mibBuilder.loadTexts: cdsIfVlan.setStatus('current')
if mibBuilder.loadTexts: cdsIfVlan.setDescription('This object indicates the VLAN on which circuit-id is configured.')
cdsIfVlanRelayInfoOptCircuitId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 380, 1, 3, 5, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdsIfVlanRelayInfoOptCircuitId.setReference('RFC 3046, DHCP Relay Agent Information Option.')
if mibBuilder.loadTexts: cdsIfVlanRelayInfoOptCircuitId.setStatus('current')
if mibBuilder.loadTexts: cdsIfVlanRelayInfoOptCircuitId.setDescription("This object specifies circuit-id used in Agent Circuit ID sub-option of the DHCP relay information option (option 82) data inserted to DHCP packets by DHCP Snooping feature. The value of this object is in a format of a user-defined string. The value of this object is ignored whenever the value of cdsRelayAgentInfoOptEnable object is 'false'.")
cdsIfVlanRelayInfoOptCircuitIdStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 380, 1, 3, 5, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdsIfVlanRelayInfoOptCircuitIdStatus.setStatus('current')
if mibBuilder.loadTexts: cdsIfVlanRelayInfoOptCircuitIdStatus.setDescription("This object is used to manage the creation and deletion of rows in this table. It only supports 'active(1)', 'destroy(6)' and 'createAndGo(4)' value. Entry in this table gets created by setting cdsIfVlanRelayInfoOptCircuitIdStatus object to 'createAndGo'. Entry in this table gets deleted by setting cdsIfVlanRelayInfoOptCircuitIdStatus object to 'destroy' Value of cdsIfRelayInfoOptCircuitId object can be modified when the value of this RowStatus object is 'active'.")
cdsIfVlanRelayInfoOptCircuitIdDirect = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 380, 1, 3, 5, 1, 4), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdsIfVlanRelayInfoOptCircuitIdDirect.setStatus('current')
if mibBuilder.loadTexts: cdsIfVlanRelayInfoOptCircuitIdDirect.setDescription("This object specifies to ignore the length and type in Agent Circuit ID sub-option of the DHCP relay information option (option 82) data inserted to DHCP packets by DHCP Snooping feature. The value of this object is ignored whenever the value of cdsRelayAgentInfoOptEnable object is 'false'.")
cdsBindingsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 380, 1, 4, 1), )
if mibBuilder.loadTexts: cdsBindingsTable.setStatus('current')
if mibBuilder.loadTexts: cdsBindingsTable.setDescription('A table provides the DHCP bindings information learnt by the device.')
cdsBindingsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 380, 1, 4, 1, 1), ).setIndexNames((0, "CISCO-DHCP-SNOOPING-MIB", "cdsBindingsVlan"), (0, "CISCO-DHCP-SNOOPING-MIB", "cdsBindingsMacAddress"))
if mibBuilder.loadTexts: cdsBindingsEntry.setStatus('current')
if mibBuilder.loadTexts: cdsBindingsEntry.setDescription('A row instance contains the Mac address, IP address type, IP address, VLAN number, interface number, leased time, and status of this instance.')
cdsBindingsVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 380, 1, 4, 1, 1, 1), VlanIndex())
if mibBuilder.loadTexts: cdsBindingsVlan.setStatus('current')
if mibBuilder.loadTexts: cdsBindingsVlan.setDescription('This object indicates the VLAN to which a DHCP client host belongs.')
cdsBindingsMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 380, 1, 4, 1, 1, 2), MacAddress())
if mibBuilder.loadTexts: cdsBindingsMacAddress.setStatus('current')
if mibBuilder.loadTexts: cdsBindingsMacAddress.setDescription('This object indicates the MAC address of a DHCP client host.')
cdsBindingsAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 380, 1, 4, 1, 1, 3), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdsBindingsAddrType.setStatus('current')
if mibBuilder.loadTexts: cdsBindingsAddrType.setDescription('This object indicates the type of IP address denoted in cdsBindingsIpAddress object.')
cdsBindingsIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 380, 1, 4, 1, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdsBindingsIpAddress.setStatus('current')
if mibBuilder.loadTexts: cdsBindingsIpAddress.setDescription('This object indicates the allocated IP address of a DHCP client host.')
cdsBindingsInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 380, 1, 4, 1, 1, 5), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdsBindingsInterface.setStatus('current')
if mibBuilder.loadTexts: cdsBindingsInterface.setDescription('This object indicates the interface where a DHCP client host connects to.')
cdsBindingsLeasedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 380, 1, 4, 1, 1, 6), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cdsBindingsLeasedTime.setStatus('current')
if mibBuilder.loadTexts: cdsBindingsLeasedTime.setDescription('This object indicates the leased time of this DHCP bindings.')
cdsBindingsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 380, 1, 4, 1, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdsBindingsStatus.setStatus('current')
if mibBuilder.loadTexts: cdsBindingsStatus.setDescription('This object is used to manage the deletion of rows in this table. This object only supports active(1) and destroy(6) value. Whenever a DHCP binding is learnt by the device, an entry will be created by the device in this table with its RowStatus object set to active(1). Setting this object value to destroy(6) will clear the DHCP bindings information represented by this row instance.')
cdsBindingsHostname = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 380, 1, 4, 1, 1, 8), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdsBindingsHostname.setStatus('current')
if mibBuilder.loadTexts: cdsBindingsHostname.setDescription('This object indicates the host name of the DHCP client as denoted by DHCP option 12 field. An empty string indicates absence of option 12 in DHCP packet.')
cdsStaticBindingsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 380, 1, 4, 2), )
if mibBuilder.loadTexts: cdsStaticBindingsTable.setStatus('current')
if mibBuilder.loadTexts: cdsStaticBindingsTable.setDescription('A table provides the DHCP bindings information configured by (local or network) management.')
cdsStaticBindingsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 380, 1, 4, 2, 1), ).setIndexNames((0, "CISCO-DHCP-SNOOPING-MIB", "cdsStaticBindingsVlan"), (0, "CISCO-DHCP-SNOOPING-MIB", "cdsStaticBindingsMacAddress"))
if mibBuilder.loadTexts: cdsStaticBindingsEntry.setStatus('current')
if mibBuilder.loadTexts: cdsStaticBindingsEntry.setDescription('A row instance contains the Mac address, IP address type, IP address, VLAN number, interface number, and status of this instance.')
cdsStaticBindingsVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 380, 1, 4, 2, 1, 1), VlanIndex())
if mibBuilder.loadTexts: cdsStaticBindingsVlan.setStatus('current')
if mibBuilder.loadTexts: cdsStaticBindingsVlan.setDescription('This object indicates the VLAN to which a DHCP client host belongs.')
cdsStaticBindingsMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 380, 1, 4, 2, 1, 2), MacAddress())
if mibBuilder.loadTexts: cdsStaticBindingsMacAddress.setStatus('current')
if mibBuilder.loadTexts: cdsStaticBindingsMacAddress.setDescription('This object indicates the MAC address of a DHCP client host.')
cdsStaticBindingsAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 380, 1, 4, 2, 1, 3), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdsStaticBindingsAddrType.setStatus('current')
if mibBuilder.loadTexts: cdsStaticBindingsAddrType.setDescription('This object indicates the type of IP address denoted in cdsStaticBindingsIpAddress object.')
cdsStaticBindingsIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 380, 1, 4, 2, 1, 4), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdsStaticBindingsIpAddress.setStatus('current')
if mibBuilder.loadTexts: cdsStaticBindingsIpAddress.setDescription('This object indicates the allocated IP address of a DHCP client host.')
cdsStaticBindingsInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 380, 1, 4, 2, 1, 5), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdsStaticBindingsInterface.setStatus('current')
if mibBuilder.loadTexts: cdsStaticBindingsInterface.setDescription('This object indicates the ifIndex value of the interface where a DHCP client host connects to.')
cdsStaticBindingsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 380, 1, 4, 2, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdsStaticBindingsStatus.setStatus('current')
if mibBuilder.loadTexts: cdsStaticBindingsStatus.setDescription("This object is used to manage the creation and deletion of rows in this table. An entry can be created by setting the instance value of this object to 'createAndGo', and deleted by setting the instance value of this object to 'destroy'. The value of cdsStaticBindingsAddrType, cdsStaticBindingsIpAddress, cdsStaticBindingsInterface object can be modified when the value of this RowStatus object is 'active'.")
cdsTotalForwardedPkts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 380, 1, 5, 1), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cdsTotalForwardedPkts.setStatus('current')
if mibBuilder.loadTexts: cdsTotalForwardedPkts.setDescription('Indicates the total number of packets subjected to DHCP Snooping is forwarded.')
cdsTotalDroppedPkts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 380, 1, 5, 2), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cdsTotalDroppedPkts.setStatus('current')
if mibBuilder.loadTexts: cdsTotalDroppedPkts.setDescription('Indicates the total number of packets subjected to DHCP Snooping is dropped.')
cdsUntrustedPortDroppedPkts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 380, 1, 5, 3), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cdsUntrustedPortDroppedPkts.setStatus('current')
if mibBuilder.loadTexts: cdsUntrustedPortDroppedPkts.setDescription('Indicates the number of packets subjected to DHCP Snooping is dropped because they come from untrusted interface.')
cdsForwardedWithoutOption82Pkts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 380, 1, 5, 4), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cdsForwardedWithoutOption82Pkts.setStatus('current')
if mibBuilder.loadTexts: cdsForwardedWithoutOption82Pkts.setDescription('Indicates the number of packets subjected to DHCP Snooping is forwarded without insertion of DHCP relay agent information option (option 82) data.')
cdsIfSrcGuardConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 380, 1, 6, 1), )
if mibBuilder.loadTexts: cdsIfSrcGuardConfigTable.setStatus('current')
if mibBuilder.loadTexts: cdsIfSrcGuardConfigTable.setDescription('A table provides the mechanism to enable or disable IP Source Guard at each physical interface capable of this feature. Some of the interfaces (but not limited to) for which this feature might be applicable are: ifType = ethernetCsmacd(6). When DHCP Snooping is enabled at an interface, a list of IP addresses is obtained through DHCP Snooping for this particular interface. If IP Source Guard is enabled, only traffic from these IP addresses is allowed to pass through the interface.')
cdsIfSrcGuardConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 380, 1, 6, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cdsIfSrcGuardConfigEntry.setStatus('current')
if mibBuilder.loadTexts: cdsIfSrcGuardConfigEntry.setDescription('A row instance contains the configuration to enable or disable IP Source Guard as well as the configuration of the filter type at each physical interface capable of IP Source Guard feature.')
cdsIfSrcGuardEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 380, 1, 6, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdsIfSrcGuardEnable.setStatus('deprecated')
if mibBuilder.loadTexts: cdsIfSrcGuardEnable.setDescription("This object indicates whether IP Source Guard is enabled at this interface. If this object is set to 'true', IP Source Guard is enabled. Traffic coming to this interface will be forwarded if it is from the list of IP addresses obtained through DHCP Snooping. Otherwise, it is denied. If this object is set to 'false', IP Source Guard is disabled. This object is deprecated and superceded by cdsIfSrcGuardFilterType object.")
cdsIfSrcGuardFilterType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 380, 1, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("ip", 2), ("ipMac", 3), ("strictIpMac", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdsIfSrcGuardFilterType.setStatus('current')
if mibBuilder.loadTexts: cdsIfSrcGuardFilterType.setDescription("This object indicates the traffic filter type applied at this interface. 'disable' indicates that Source Guard feature is disabled. 'ip' indicates that Source Guard feature is enabled and only applied to IP traffic. 'ipMac' indicates that Source Guard feature is enabled and applied to both IP and MAC traffic. 'strictIpMac' indicates that Source Guard feature is enabled and applied to IP traffic. IP traffic originating from a DHCP client will subject to validation of client IP address, MAC address, VLAN and interface where the DHCP client is connected.")
cdsIfSrcGuardAddrTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 380, 1, 6, 2), )
if mibBuilder.loadTexts: cdsIfSrcGuardAddrTable.setStatus('current')
if mibBuilder.loadTexts: cdsIfSrcGuardAddrTable.setDescription('A table provides the information on IP addresses used for IP Source Guard purpose at each physical interface capable of this feature. Some of the interfaces (but not limited to) for which this feature might be applicable are: ifType = ethernetCsmacd(6).')
cdsIfSrcGuardAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 380, 1, 6, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-DHCP-SNOOPING-MIB", "cdsIfSrcGuardIndex"))
if mibBuilder.loadTexts: cdsIfSrcGuardAddrEntry.setStatus('current')
if mibBuilder.loadTexts: cdsIfSrcGuardAddrEntry.setDescription('A row instance contains the IP address type and IP address used for IP Source Guard purpose at each physical interface capable of this feature.')
cdsIfSrcGuardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 380, 1, 6, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cdsIfSrcGuardIndex.setStatus('current')
if mibBuilder.loadTexts: cdsIfSrcGuardIndex.setDescription('This object indicates the index of this entry.')
cdsIfSrcGuardAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 380, 1, 6, 2, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdsIfSrcGuardAddrType.setStatus('current')
if mibBuilder.loadTexts: cdsIfSrcGuardAddrType.setDescription('This object indicates the type of IP address denoted in cdsIfSrcGuardAddress object.')
cdsIfSrcGuardAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 380, 1, 6, 2, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdsIfSrcGuardAddress.setStatus('current')
if mibBuilder.loadTexts: cdsIfSrcGuardAddress.setDescription('This object indicates the IP address obtained at this interface through DHCP Snooping or statically configured.')
cdsIfSrcGuardIpFilterAction = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 380, 1, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permitIpAddress", 1), ("denyAllIpAddress", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdsIfSrcGuardIpFilterAction.setStatus('current')
if mibBuilder.loadTexts: cdsIfSrcGuardIpFilterAction.setDescription('This object indicates the IP Source Guard action applied at this interface with respect to IP traffic. permitIpAddress(1) indicates that IP traffic coming from the IP address denoted by cdsIfSrcGuardAddress object will be allowed to go through. denyAllIpAdress(2) indicates that all IP traffic coming to this interface will be dropped. The value of cdsIfSrcGuardAddress object will be ignored in this case.')
cdsIfSrcGuardFilterMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 380, 1, 6, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("active", 1), ("inactiveTrustPort", 2), ("inactiveNoSnoopingVlan", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdsIfSrcGuardFilterMode.setStatus('current')
if mibBuilder.loadTexts: cdsIfSrcGuardFilterMode.setDescription('This object indicates the Source Guard filter mode at this interface. active(1) indicates that the Source Guard feature is active at this interface. inactiveTrustPort(2) indicates that the Source Guard feature is inactive because this interface is a DHCP Snooping trust interface. inactiveNoSnoopingVlan(3) indicates that the Source Guard feature is inactive because this interface does not have a VLAN which has DHCP Snooping enabled.')
cdsIfSrcGuardMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 380, 1, 6, 2, 1, 6), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdsIfSrcGuardMacAddress.setStatus('current')
if mibBuilder.loadTexts: cdsIfSrcGuardMacAddress.setDescription('This object indicates the MAC address for Source Guard purpose.')
cdsIfSrcGuardMacFilterAction = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 380, 1, 6, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("allowMacAddress", 1), ("denyAllMacAddresses", 2), ("permitAllMacAddresses", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdsIfSrcGuardMacFilterAction.setStatus('current')
if mibBuilder.loadTexts: cdsIfSrcGuardMacFilterAction.setDescription('This object indicates the Source Guard action applied at this interface with respect to MAC traffic. allowMacAddress(1) indicates that MAC traffic coming from the MAC address denoted by cdsIfSrcGuardMacAddress object will be allowed to go through. denyAllMacAddresses(2) indicates that all MAC traffic coming to this interface will be dropped. The value of cdsIfSrcGuardMacAddress object will be ignored in this case. permitAllMacAddresses(3) indicates that all MAC traffic coming to this interface will be allowed. The value of cdsIfSrcGuardMacAddress object will be ignored in this case.')
cdsIfSrcGuardVlansLow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 380, 1, 6, 2, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdsIfSrcGuardVlansLow.setStatus('current')
if mibBuilder.loadTexts: cdsIfSrcGuardVlansLow.setDescription("A string of octets containing one bit per VLAN for VLANs with VlanIndex value of 0 to 2047. The first octet corresponds to VLANs with VlanIndex values of 0 through 7; the second octet to VLANs 8 through 15; etc. The most significant bit of each octet corresponds to the lowest value VlanIndex in that octet. For each VLAN, if Source Guard feature is enabled then the bit corresponding to that VLAN is set to '1'. Note that if the length of this string is less than 256 octets, any 'missing' octets are assumed to contain the value zero. A NMS may omit any zero-valued octets from the end of this string in order to reduce SetPDU size, and the agent may also omit zero-valued trailing octets, to reduce the size of GetResponse PDUs.")
cdsIfSrcGuardVlansHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 380, 1, 6, 2, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdsIfSrcGuardVlansHigh.setStatus('current')
if mibBuilder.loadTexts: cdsIfSrcGuardVlansHigh.setDescription("A string of octets containing one bit per VLAN for VLANs with VlanIndex value of 2048 to 4095. The first octet corresponds to VLANs with VlanIndex values of 2048 through 2055; the second octet to VLANs 2056 through 2063; etc. The most significant bit of each octet corresponds to the lowest value VlanIndex in that octet. For each VLAN, if Source Guard feature is enabled then the bit corresponding to that VLAN is set to '1'. Note that if the length of this string is less than 256 octets, any 'missing' octets are assumed to contain the value zero. A NMS may omit any zero-valued octets from the end of this string in order to reduce SetPDU size, and the agent may also omit zero-valued trailing octets, to reduce the size of GetResponse PDUs.")
cdsBindingsNotification = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 380, 0, 1)).setObjects(("CISCO-DHCP-SNOOPING-MIB", "cdsBindingsAddrType"), ("CISCO-DHCP-SNOOPING-MIB", "cdsBindingsIpAddress"), ("IF-MIB", "ifName"))
if mibBuilder.loadTexts: cdsBindingsNotification.setStatus('current')
if mibBuilder.loadTexts: cdsBindingsNotification.setDescription('This notification is generated when a DHCP binding is learnt dynamically by the device. cdsBindingsAddrType and cdsBindingsIpAddress provides the IP address allocated for the DHCP client by the DHCP server. ifName identifies the interface where the DHCP client connects to.')
cdsMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 380, 2, 1))
cdsMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 380, 2, 2))
cdsMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 380, 2, 1, 1)).setObjects(("CISCO-DHCP-SNOOPING-MIB", "cdsIfConfigGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsBindingsGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsGlobalEnableGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsDatabaseGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsVlanConfigGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsIfRateLimitGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsStatisticsGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsRelayAgentInfoOptGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsIfSrcGuardGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsMatchMacAddressGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdsMIBCompliance = cdsMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: cdsMIBCompliance.setDescription('The compliance statement for the CISCO-DHCP-SNOOPING-MIB')
cdsMIBCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 380, 2, 1, 2)).setObjects(("CISCO-DHCP-SNOOPING-MIB", "cdsIfConfigGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsBindingsGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsGlobalEnableGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsDatabaseGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsVlanConfigGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsIfRateLimitGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsStatisticsGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsRelayAgentInfoOptGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsIfSrcGuardGroupRev1"), ("CISCO-DHCP-SNOOPING-MIB", "cdsMatchMacAddressGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsRelayAgentRemoteIdGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsIfFeatureConfigGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsBindingsLimitGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsStaticBindingsGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsIfSrcGuardIpFilterGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsIfSrcGuardExtGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsIfSrcGuardTrafficFilterGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdsMIBCompliance2 = cdsMIBCompliance2.setStatus('deprecated')
if mibBuilder.loadTexts: cdsMIBCompliance2.setDescription('The compliance statement for the CISCO-DHCP-SNOOPING-MIB')
cdsMIBCompliance3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 380, 2, 1, 3)).setObjects(("CISCO-DHCP-SNOOPING-MIB", "cdsIfConfigGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsBindingsGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsGlobalEnableGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsDatabaseGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsVlanConfigGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsIfRateLimitGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsStatisticsGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsRelayAgentInfoOptGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsIfSrcGuardGroupRev1"), ("CISCO-DHCP-SNOOPING-MIB", "cdsMatchMacAddressGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsRelayAgentRemoteIdGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsIfFeatureConfigGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsBindingsLimitGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsStaticBindingsGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsIfSrcGuardIpFilterGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsIfSrcGuardExtGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsIfSrcGuardTrafficFilterGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsBindingsHostnameGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdsMIBCompliance3 = cdsMIBCompliance3.setStatus('deprecated')
if mibBuilder.loadTexts: cdsMIBCompliance3.setDescription('The compliance statement for the CISCO-DHCP-SNOOPING-MIB')
cdsMIBCompliance4 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 380, 2, 1, 4)).setObjects(("CISCO-DHCP-SNOOPING-MIB", "cdsIfConfigGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsBindingsGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsGlobalEnableGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsDatabaseGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsVlanConfigGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsIfRateLimitGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsStatisticsGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsRelayAgentInfoOptGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsIfSrcGuardGroupRev1"), ("CISCO-DHCP-SNOOPING-MIB", "cdsMatchMacAddressGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsIfFeatureConfigGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsBindingsLimitGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsStaticBindingsGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsIfSrcGuardIpFilterGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsIfSrcGuardExtGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsIfSrcGuardTrafficFilterGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsBindingsHostnameGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsRelayAgentInfoOptRemoteIdSubGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsIfVlanRelayInfoOptCircuitIdGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsStatisticsExtGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdsMIBCompliance4 = cdsMIBCompliance4.setStatus('deprecated')
if mibBuilder.loadTexts: cdsMIBCompliance4.setDescription('The compliance statement for the CISCO-DHCP-SNOOPING-MIB')
cdsMIBCompliance5 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 380, 2, 1, 5)).setObjects(("CISCO-DHCP-SNOOPING-MIB", "cdsIfConfigGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsBindingsGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsGlobalEnableGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsDatabaseGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsVlanConfigGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsIfRateLimitGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsStatisticsGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsRelayAgentInfoOptGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsIfSrcGuardGroupRev1"), ("CISCO-DHCP-SNOOPING-MIB", "cdsMatchMacAddressGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsIfFeatureConfigGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsBindingsLimitGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsStaticBindingsGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsIfSrcGuardIpFilterGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsIfSrcGuardExtGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsIfSrcGuardTrafficFilterGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsBindingsHostnameGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsRelayAgentInfoOptRemoteIdSubGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsIfVlanRelayInfoOptCircuitIdGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsStatisticsExtGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsNotifControlGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsBindingsNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdsMIBCompliance5 = cdsMIBCompliance5.setStatus('deprecated')
if mibBuilder.loadTexts: cdsMIBCompliance5.setDescription('The compliance statement for the CISCO-DHCP-SNOOPING-MIB')
cdsMIBCompliance6 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 380, 2, 1, 6)).setObjects(("CISCO-DHCP-SNOOPING-MIB", "cdsIfConfigGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsBindingsGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsGlobalEnableGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsDatabaseGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsVlanConfigGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsIfRateLimitGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsStatisticsGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsRelayAgentInfoOptGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsIfSrcGuardGroupRev1"), ("CISCO-DHCP-SNOOPING-MIB", "cdsMatchMacAddressGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsIfFeatureConfigGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsBindingsLimitGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsStaticBindingsGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsIfSrcGuardIpFilterGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsIfSrcGuardExtGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsIfSrcGuardTrafficFilterGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsBindingsHostnameGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsRelayAgentInfoOptRemoteIdSubGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsIfVlanRelayInfoOptCircuitIdGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsStatisticsExtGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsNotifControlGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsBindingsNotificationGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsIfVlanRelayInfoOptCircuitIdGroupSup1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdsMIBCompliance6 = cdsMIBCompliance6.setStatus('deprecated')
if mibBuilder.loadTexts: cdsMIBCompliance6.setDescription('The compliance statement for the CISCO-DHCP-SNOOPING-MIB. This statement is deprecated and superceded by cdsMIBCompliance7.')
cdsMIBCompliance7 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 380, 2, 1, 7)).setObjects(("CISCO-DHCP-SNOOPING-MIB", "cdsIfConfigGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsBindingsGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsGlobalEnableGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsDatabaseGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsVlanConfigGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsIfRateLimitGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsStatisticsGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsRelayAgentInfoOptGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsIfSrcGuardGroupRev1"), ("CISCO-DHCP-SNOOPING-MIB", "cdsMatchMacAddressGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsIfFeatureConfigGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsBindingsLimitGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsStaticBindingsGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsIfSrcGuardIpFilterGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsIfSrcGuardExtGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsIfSrcGuardTrafficFilterGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsBindingsHostnameGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsRelayAgentInfoOptRemoteIdSubGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsIfVlanRelayInfoOptCircuitIdGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsStatisticsExtGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsNotifControlGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsBindingsNotificationGroup"), ("CISCO-DHCP-SNOOPING-MIB", "cdsIfVlanRelayInfoOptCircuitIdGroupSup1"), ("CISCO-DHCP-SNOOPING-MIB", "cdsVlanOperStatusGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdsMIBCompliance7 = cdsMIBCompliance7.setStatus('current')
if mibBuilder.loadTexts: cdsMIBCompliance7.setDescription('The compliance statement for the CISCO-DHCP-SNOOPING-MIB')
cdsGlobalEnableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 380, 2, 2, 1)).setObjects(("CISCO-DHCP-SNOOPING-MIB", "cdsFeatureEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdsGlobalEnableGroup = cdsGlobalEnableGroup.setStatus('current')
if mibBuilder.loadTexts: cdsGlobalEnableGroup.setDescription('A collection of object which are used to configure as well as show information regarding the feature enabling.')
cdsDatabaseGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 380, 2, 2, 2)).setObjects(("CISCO-DHCP-SNOOPING-MIB", "cdsDatabaseFile"), ("CISCO-DHCP-SNOOPING-MIB", "cdsDatabaseUpdateInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdsDatabaseGroup = cdsDatabaseGroup.setStatus('current')
if mibBuilder.loadTexts: cdsDatabaseGroup.setDescription('A collection of objects which are used to configure as well as show information regarding the DHCP Snooping database filename and update interval.')
cdsVlanConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 380, 2, 2, 3)).setObjects(("CISCO-DHCP-SNOOPING-MIB", "cdsVlanDhcpSnoopingEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdsVlanConfigGroup = cdsVlanConfigGroup.setStatus('current')
if mibBuilder.loadTexts: cdsVlanConfigGroup.setDescription('A collection of object which are used to configure as well as show information regarding the DHCP Snooping feature per VLAN.')
cdsIfConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 380, 2, 2, 4)).setObjects(("CISCO-DHCP-SNOOPING-MIB", "cdsIfTrustEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdsIfConfigGroup = cdsIfConfigGroup.setStatus('current')
if mibBuilder.loadTexts: cdsIfConfigGroup.setDescription('A collection of object which are used to configure as well as show information regarding the interface trust state for DHCP Snooping purpose.')
cdsIfRateLimitGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 380, 2, 2, 5)).setObjects(("CISCO-DHCP-SNOOPING-MIB", "cdsIfRateLimit"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdsIfRateLimitGroup = cdsIfRateLimitGroup.setStatus('current')
if mibBuilder.loadTexts: cdsIfRateLimitGroup.setDescription('A collection of object which are used to configure as well as show information regarding the rate limit per interface for DHCP Snooping purpose.')
cdsBindingsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 380, 2, 2, 6)).setObjects(("CISCO-DHCP-SNOOPING-MIB", "cdsBindingsAddrType"), ("CISCO-DHCP-SNOOPING-MIB", "cdsBindingsIpAddress"), ("CISCO-DHCP-SNOOPING-MIB", "cdsBindingsInterface"), ("CISCO-DHCP-SNOOPING-MIB", "cdsBindingsLeasedTime"), ("CISCO-DHCP-SNOOPING-MIB", "cdsBindingsStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdsBindingsGroup = cdsBindingsGroup.setStatus('current')
if mibBuilder.loadTexts: cdsBindingsGroup.setDescription('A collection of object which are used to configure as well as show information regarding the DHCP bindings data.')
cdsStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 380, 2, 2, 7)).setObjects(("CISCO-DHCP-SNOOPING-MIB", "cdsTotalForwardedPkts"), ("CISCO-DHCP-SNOOPING-MIB", "cdsTotalDroppedPkts"), ("CISCO-DHCP-SNOOPING-MIB", "cdsUntrustedPortDroppedPkts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdsStatisticsGroup = cdsStatisticsGroup.setStatus('current')
if mibBuilder.loadTexts: cdsStatisticsGroup.setDescription('A collection of object which are used to show statistics information regarding DHCP Snooping feature.')
cdsRelayAgentInfoOptGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 380, 2, 2, 8)).setObjects(("CISCO-DHCP-SNOOPING-MIB", "cdsRelayAgentInfoOptEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdsRelayAgentInfoOptGroup = cdsRelayAgentInfoOptGroup.setStatus('current')
if mibBuilder.loadTexts: cdsRelayAgentInfoOptGroup.setDescription('A collection of objects which are used to configure as well as show information regarding DHCP Option 82 insertion.')
cdsIfSrcGuardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 380, 2, 2, 9)).setObjects(("CISCO-DHCP-SNOOPING-MIB", "cdsIfSrcGuardEnable"), ("CISCO-DHCP-SNOOPING-MIB", "cdsIfSrcGuardAddrType"), ("CISCO-DHCP-SNOOPING-MIB", "cdsIfSrcGuardAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdsIfSrcGuardGroup = cdsIfSrcGuardGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cdsIfSrcGuardGroup.setDescription('A collection of objects which are used to configure as well as show information regarding IP Source Guard purpose.')
cdsRelayAgentRemoteIdGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 380, 2, 2, 10)).setObjects(("CISCO-DHCP-SNOOPING-MIB", "cdsRelayAgentInfoOptRemoteId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdsRelayAgentRemoteIdGroup = cdsRelayAgentRemoteIdGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cdsRelayAgentRemoteIdGroup.setDescription('A collection of objects which are used to indicate information regarding DHCP Option 82 remote ID relay agent.')
cdsMatchMacAddressGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 380, 2, 2, 11)).setObjects(("CISCO-DHCP-SNOOPING-MIB", "cdsMatchMacAddressEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdsMatchMacAddressGroup = cdsMatchMacAddressGroup.setStatus('current')
if mibBuilder.loadTexts: cdsMatchMacAddressGroup.setDescription('A collection of objects which are used to configure as well as show information regarding DHCP Snooping Mac address matching.')
cdsIfFeatureConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 380, 2, 2, 12)).setObjects(("CISCO-DHCP-SNOOPING-MIB", "cdsIfFeatureEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdsIfFeatureConfigGroup = cdsIfFeatureConfigGroup.setStatus('current')
if mibBuilder.loadTexts: cdsIfFeatureConfigGroup.setDescription('A collection of object which are used to configure as well as show information regarding enable or disable of DHCP Snooping feature at the interface.')
cdsBindingsLimitGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 380, 2, 2, 13)).setObjects(("CISCO-DHCP-SNOOPING-MIB", "cdsGlobalMaxBindingsLimit"), ("CISCO-DHCP-SNOOPING-MIB", "cdsIfBindingsLimit"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdsBindingsLimitGroup = cdsBindingsLimitGroup.setStatus('current')
if mibBuilder.loadTexts: cdsBindingsLimitGroup.setDescription('A collection of objects which provides information regarding binding limit for DHCP Snooping purpose.')
cdsStaticBindingsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 380, 2, 2, 14)).setObjects(("CISCO-DHCP-SNOOPING-MIB", "cdsStaticBindingsAddrType"), ("CISCO-DHCP-SNOOPING-MIB", "cdsStaticBindingsIpAddress"), ("CISCO-DHCP-SNOOPING-MIB", "cdsStaticBindingsInterface"), ("CISCO-DHCP-SNOOPING-MIB", "cdsStaticBindingsStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdsStaticBindingsGroup = cdsStaticBindingsGroup.setStatus('current')
if mibBuilder.loadTexts: cdsStaticBindingsGroup.setDescription('A collection of objects which is used to configure as well as show information regarding the DHCP bindings data configured by users.')
cdsIfSrcGuardIpFilterGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 380, 2, 2, 15)).setObjects(("CISCO-DHCP-SNOOPING-MIB", "cdsIfSrcGuardIpFilterAction"), ("CISCO-DHCP-SNOOPING-MIB", "cdsIfSrcGuardFilterMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdsIfSrcGuardIpFilterGroup = cdsIfSrcGuardIpFilterGroup.setStatus('current')
if mibBuilder.loadTexts: cdsIfSrcGuardIpFilterGroup.setDescription('A collection of objects which is used to show information regarding interface IP source guard purpose.')
cdsIfSrcGuardExtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 380, 2, 2, 16)).setObjects(("CISCO-DHCP-SNOOPING-MIB", "cdsIfSrcGuardMacAddress"), ("CISCO-DHCP-SNOOPING-MIB", "cdsIfSrcGuardMacFilterAction"), ("CISCO-DHCP-SNOOPING-MIB", "cdsIfSrcGuardVlansLow"), ("CISCO-DHCP-SNOOPING-MIB", "cdsIfSrcGuardVlansHigh"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdsIfSrcGuardExtGroup = cdsIfSrcGuardExtGroup.setStatus('current')
if mibBuilder.loadTexts: cdsIfSrcGuardExtGroup.setDescription('A collection of objects which is used to show additional information regarding the IP source guard feature.')
cdsIfSrcGuardTrafficFilterGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 380, 2, 2, 17)).setObjects(("CISCO-DHCP-SNOOPING-MIB", "cdsIfSrcGuardFilterType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdsIfSrcGuardTrafficFilterGroup = cdsIfSrcGuardTrafficFilterGroup.setStatus('current')
if mibBuilder.loadTexts: cdsIfSrcGuardTrafficFilterGroup.setDescription('A collection of objects which is used to configure the type of traffic to be filtered by IP source guard feature.')
cdsIfSrcGuardGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 380, 2, 2, 18)).setObjects(("CISCO-DHCP-SNOOPING-MIB", "cdsIfSrcGuardAddrType"), ("CISCO-DHCP-SNOOPING-MIB", "cdsIfSrcGuardAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdsIfSrcGuardGroupRev1 = cdsIfSrcGuardGroupRev1.setStatus('current')
if mibBuilder.loadTexts: cdsIfSrcGuardGroupRev1.setDescription('A collection of objects which are used to configure as well as show information regarding IP Source Guard purpose.')
cdsBindingsHostnameGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 380, 2, 2, 19)).setObjects(("CISCO-DHCP-SNOOPING-MIB", "cdsBindingsHostname"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdsBindingsHostnameGroup = cdsBindingsHostnameGroup.setStatus('current')
if mibBuilder.loadTexts: cdsBindingsHostnameGroup.setDescription('A collection of objects which indicates the host name of DHCP client in DHCP bindings data.')
cdsRelayAgentInfoOptRemoteIdSubGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 380, 2, 2, 20)).setObjects(("CISCO-DHCP-SNOOPING-MIB", "cdsRelayAgentInfoOptRemoteIdSub"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdsRelayAgentInfoOptRemoteIdSubGroup = cdsRelayAgentInfoOptRemoteIdSubGroup.setStatus('current')
if mibBuilder.loadTexts: cdsRelayAgentInfoOptRemoteIdSubGroup.setDescription('A collection of objects which are used to configure as well as show remote-id of option 82 DHCP Snooping.')
cdsIfVlanRelayInfoOptCircuitIdGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 380, 2, 2, 21)).setObjects(("CISCO-DHCP-SNOOPING-MIB", "cdsIfVlanRelayInfoOptCircuitId"), ("CISCO-DHCP-SNOOPING-MIB", "cdsIfVlanRelayInfoOptCircuitIdStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdsIfVlanRelayInfoOptCircuitIdGroup = cdsIfVlanRelayInfoOptCircuitIdGroup.setStatus('current')
if mibBuilder.loadTexts: cdsIfVlanRelayInfoOptCircuitIdGroup.setDescription('A collection of objects which are used to configure as well as show circuit-id of option 82 DHCP Snooping.')
cdsStatisticsExtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 380, 2, 2, 22)).setObjects(("CISCO-DHCP-SNOOPING-MIB", "cdsForwardedWithoutOption82Pkts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdsStatisticsExtGroup = cdsStatisticsExtGroup.setStatus('current')
if mibBuilder.loadTexts: cdsStatisticsExtGroup.setDescription('A collection of objects which are used to show additional DHCP snooping statistics information.')
cdsNotifControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 380, 2, 2, 23)).setObjects(("CISCO-DHCP-SNOOPING-MIB", "cdsBindingsNotifEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdsNotifControlGroup = cdsNotifControlGroup.setStatus('current')
if mibBuilder.loadTexts: cdsNotifControlGroup.setDescription('A collection of object(s) which provides information on bindings notifications control for DHCP Snooping feature.')
cdsBindingsNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 380, 2, 2, 24)).setObjects(("CISCO-DHCP-SNOOPING-MIB", "cdsBindingsNotification"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdsBindingsNotificationGroup = cdsBindingsNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: cdsBindingsNotificationGroup.setDescription('A collection of notification(s) which provides bindings notifications support for DHCP Snooping feature.')
cdsIfVlanRelayInfoOptCircuitIdGroupSup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 380, 2, 2, 25)).setObjects(("CISCO-DHCP-SNOOPING-MIB", "cdsIfVlanRelayInfoOptCircuitIdDirect"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdsIfVlanRelayInfoOptCircuitIdGroupSup1 = cdsIfVlanRelayInfoOptCircuitIdGroupSup1.setStatus('current')
if mibBuilder.loadTexts: cdsIfVlanRelayInfoOptCircuitIdGroupSup1.setDescription('A collection of objects which indicates to ignore the length and type in Agent Circuit ID sub-option of the DHCP relay information option (option 82) data inserted to DHCP packets by DHCP Snooping feature.')
cdsVlanOperStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 380, 2, 2, 26)).setObjects(("CISCO-DHCP-SNOOPING-MIB", "cdsVlanDhcpSnoopingOperStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdsVlanOperStatusGroup = cdsVlanOperStatusGroup.setStatus('current')
if mibBuilder.loadTexts: cdsVlanOperStatusGroup.setDescription('A collection of objects which provides information on operation status of DHCP Snooping feature in VLAN.')
mibBuilder.exportSymbols("CISCO-DHCP-SNOOPING-MIB", cdsStaticBindingsInterface=cdsStaticBindingsInterface, cdsVlan=cdsVlan, cdsIfSrcGuardEnable=cdsIfSrcGuardEnable, cdsIfFeatureConfigGroup=cdsIfFeatureConfigGroup, cdsVlanDhcpSnoopingEnable=cdsVlanDhcpSnoopingEnable, cdsBindingsMacAddress=cdsBindingsMacAddress, cdsRelayAgentInfoOptRemoteIdSub=cdsRelayAgentInfoOptRemoteIdSub, cdsVlanIndex=cdsVlanIndex, cdsStaticBindingsAddrType=cdsStaticBindingsAddrType, cdsIfSrcGuardMacAddress=cdsIfSrcGuardMacAddress, cdsStatistics=cdsStatistics, ciscoDhcpSnoopingMIBConformance=ciscoDhcpSnoopingMIBConformance, cdsMIBCompliance6=cdsMIBCompliance6, cdsIfConfigEntry=cdsIfConfigEntry, PYSNMP_MODULE_ID=ciscoDhcpSnoopingMIB, cdsMIBCompliance7=cdsMIBCompliance7, cdsIfSrcGuardAddrEntry=cdsIfSrcGuardAddrEntry, cdsIfVlanRelayInfoOptCircuitId=cdsIfVlanRelayInfoOptCircuitId, cdsUntrustedPortDroppedPkts=cdsUntrustedPortDroppedPkts, cdsBindingsStatus=cdsBindingsStatus, cdsMIBCompliance5=cdsMIBCompliance5, cdsMIBCompliances=cdsMIBCompliances, cdsStaticBindingsEntry=cdsStaticBindingsEntry, cdsTotalDroppedPkts=cdsTotalDroppedPkts, cdsMIBCompliance=cdsMIBCompliance, cdsMIBCompliance4=cdsMIBCompliance4, cdsVlanConfigEntry=cdsVlanConfigEntry, cdsBindingsLimitGroup=cdsBindingsLimitGroup, cdsIfSrcGuardGroupRev1=cdsIfSrcGuardGroupRev1, cdsIfRateLimitTable=cdsIfRateLimitTable, cdsIfSrcGuardConfigEntry=cdsIfSrcGuardConfigEntry, cdsDatabaseGroup=cdsDatabaseGroup, cdsBindingsGroup=cdsBindingsGroup, cdsIfSrcGuardIpFilterGroup=cdsIfSrcGuardIpFilterGroup, cdsIfBindingsLimit=cdsIfBindingsLimit, cdsIfSrcGuardExtGroup=cdsIfSrcGuardExtGroup, cdsBindingsHostname=cdsBindingsHostname, cdsIfFeatureConfigEntry=cdsIfFeatureConfigEntry, cdsIfVlanRelayInfoOptCircuitIdEntry=cdsIfVlanRelayInfoOptCircuitIdEntry, cdsNotifControlGroup=cdsNotifControlGroup, cdsStatisticsGroup=cdsStatisticsGroup, cdsIfSrcGuardFilterType=cdsIfSrcGuardFilterType, cdsBindingsNotification=cdsBindingsNotification, cdsStaticBindingsIpAddress=cdsStaticBindingsIpAddress, cdsIfBindingsLimitEntry=cdsIfBindingsLimitEntry, cdsGlobalEnableGroup=cdsGlobalEnableGroup, cdsMIBCompliance2=cdsMIBCompliance2, cdsBindingsVlan=cdsBindingsVlan, cdsStaticBindingsMacAddress=cdsStaticBindingsMacAddress, cdsIfConfigTable=cdsIfConfigTable, cdsIfTrustEnable=cdsIfTrustEnable, cdsIfVlanRelayInfoOptCircuitIdDirect=cdsIfVlanRelayInfoOptCircuitIdDirect, cdsIfFeatureEnable=cdsIfFeatureEnable, cdsMIBGroups=cdsMIBGroups, cdsIfRateLimit=cdsIfRateLimit, cdsBindingsNotifEnabled=cdsBindingsNotifEnabled, cdsIfVlanRelayInfoOptCircuitIdStatus=cdsIfVlanRelayInfoOptCircuitIdStatus, cdsIfSrcGuardAddrType=cdsIfSrcGuardAddrType, cdsStatisticsExtGroup=cdsStatisticsExtGroup, cdsBindingsIpAddress=cdsBindingsIpAddress, cdsRelayAgentInfoOptRemoteId=cdsRelayAgentInfoOptRemoteId, cdsIfRateLimitEntry=cdsIfRateLimitEntry, cdsDatabaseUpdateInterval=cdsDatabaseUpdateInterval, cdsMIBCompliance3=cdsMIBCompliance3, cdsGlobal=cdsGlobal, cdsMatchMacAddressEnable=cdsMatchMacAddressEnable, cdsDatabaseFile=cdsDatabaseFile, cdsBindingsLeasedTime=cdsBindingsLeasedTime, cdsIfSrcGuardTrafficFilterGroup=cdsIfSrcGuardTrafficFilterGroup, cdsRelayAgentInfoOptGroup=cdsRelayAgentInfoOptGroup, cdsIfSrcGuardVlansLow=cdsIfSrcGuardVlansLow, ciscoDhcpSnoopingMIBObjects=ciscoDhcpSnoopingMIBObjects, cdsVlanOperStatusGroup=cdsVlanOperStatusGroup, cdsIfVlanRelayInfoOptCircuitIdGroup=cdsIfVlanRelayInfoOptCircuitIdGroup, cdsIfVlanRelayInfoOptCircuitIdGroupSup1=cdsIfVlanRelayInfoOptCircuitIdGroupSup1, cdsBindingsNotificationGroup=cdsBindingsNotificationGroup, cdsStaticBindingsTable=cdsStaticBindingsTable, cdsTotalForwardedPkts=cdsTotalForwardedPkts, cdsSrcGuard=cdsSrcGuard, cdsIfBindingsLimitTable=cdsIfBindingsLimitTable, ciscoDhcpSnoopingMIB=ciscoDhcpSnoopingMIB, cdsVlanConfigTable=cdsVlanConfigTable, cdsIfSrcGuardAddress=cdsIfSrcGuardAddress, cdsRelayAgentInfoOptRemoteIdSubGroup=cdsRelayAgentInfoOptRemoteIdSubGroup, cdsBindingsAddrType=cdsBindingsAddrType, cdsIfSrcGuardConfigTable=cdsIfSrcGuardConfigTable, cdsVlanDhcpSnoopingOperStatus=cdsVlanDhcpSnoopingOperStatus, ciscoDhcpSnoopingMIBNotifs=ciscoDhcpSnoopingMIBNotifs, cdsIfRateLimitGroup=cdsIfRateLimitGroup, cdsBindingsTable=cdsBindingsTable, cdsInterface=cdsInterface, cdsMatchMacAddressGroup=cdsMatchMacAddressGroup, cdsRelayAgentInfoOptEnable=cdsRelayAgentInfoOptEnable, cdsBindingsInterface=cdsBindingsInterface, cdsIfSrcGuardIndex=cdsIfSrcGuardIndex, cdsIfFeatureConfigTable=cdsIfFeatureConfigTable, cdsForwardedWithoutOption82Pkts=cdsForwardedWithoutOption82Pkts, cdsIfConfigGroup=cdsIfConfigGroup, cdsIfSrcGuardMacFilterAction=cdsIfSrcGuardMacFilterAction, cdsIfSrcGuardGroup=cdsIfSrcGuardGroup, cdsIfSrcGuardIpFilterAction=cdsIfSrcGuardIpFilterAction, cdsStaticBindingsStatus=cdsStaticBindingsStatus, cdsBindings=cdsBindings, cdsIfVlan=cdsIfVlan, cdsIfSrcGuardFilterMode=cdsIfSrcGuardFilterMode, cdsVlanConfigGroup=cdsVlanConfigGroup, cdsIfVlanRelayInfoOptCircuitIdTable=cdsIfVlanRelayInfoOptCircuitIdTable, cdsFeatureEnable=cdsFeatureEnable, cdsBindingsEntry=cdsBindingsEntry, cdsStaticBindingsVlan=cdsStaticBindingsVlan, cdsIfSrcGuardAddrTable=cdsIfSrcGuardAddrTable, cdsRelayAgentRemoteIdGroup=cdsRelayAgentRemoteIdGroup, cdsBindingsHostnameGroup=cdsBindingsHostnameGroup, cdsGlobalMaxBindingsLimit=cdsGlobalMaxBindingsLimit, cdsIfSrcGuardVlansHigh=cdsIfSrcGuardVlansHigh, cdsStaticBindingsGroup=cdsStaticBindingsGroup)
