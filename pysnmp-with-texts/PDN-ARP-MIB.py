#
# PySNMP MIB module PDN-ARP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PDN-ARP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:38:03 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ipNetToMediaIfIndex, ipNetToMediaPhysAddress, ipNetToMediaEntry = mibBuilder.importSymbols("IP-MIB", "ipNetToMediaIfIndex", "ipNetToMediaPhysAddress", "ipNetToMediaEntry")
pdn_common, = mibBuilder.importSymbols("PDN-HEADER-MIB", "pdn-common")
SwitchState, VnidRange = mibBuilder.importSymbols("PDN-TC", "SwitchState", "VnidRange")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Unsigned32, Bits, TimeTicks, iso, IpAddress, NotificationType, Counter32, Gauge32, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, ObjectIdentity, ModuleIdentity, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Bits", "TimeTicks", "iso", "IpAddress", "NotificationType", "Counter32", "Gauge32", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "ObjectIdentity", "ModuleIdentity", "Integer32")
TruthValue, TextualConvention, DisplayString, MacAddress, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "DisplayString", "MacAddress", "RowStatus")
pdn_arp = ModuleIdentity((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 27)).setLabel("pdn-arp")
pdn_arp.setRevisions(('2005-07-19 00:00', '2002-08-02 00:00', '2002-04-18 00:00', '2001-12-31 00:00', '2001-01-15 00:00', '2000-05-02 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: pdn_arp.setRevisionsDescriptions(("Clean up formatting and eliminated tabs. Added missing periods. Corrected SMIv2 issues identified by libsmi including: 1. INTEGER objects that were not enumerations, were changed to Integer32. 2. Reworked the conformance. Had to change the OID structure because the MODULE-COMPLIANCE section was missing resulting in `group-unref' issues. 3. The OID for unauthorizedUserEvent was change such that the second-to-the-last number is now `0' to satisfy SMIv2. 4. Masked the warning that pdnNetTo8023MediaConfigVnidId should be non-accessible. 5. Changed the import for ifIndex to be the IF-MIB. 6. Change the import for ipNetToMedia objects to be the IP-MIB. Added the pdnNetToMediaParamsAprTable to support periodic sending of ARP requests. Noticed several inconsistencies with respect to ranges specified in the syntax clause and where was described in the description text. These inconsistencies were not touched as in doing so could cause over-the-wire issues. Clay Sikes", "Added vlan to ipNetToMediaConfig for the BitStorm 4800 (Speedway product's R2.0 release.", 'Added utl to ipNetToMediaConfig for the BitStorm 4800 (Speedway) product.', 'Added ipNetToMediaExtTable to extend ipNetToMediaTable adding NHR filed to it. Added ipNetToMediaConfig objects (mux/basic and default nhr) Added ipNetToMediaLimit table.', 'pdnNetTo8023Media MAC Address set to read-write to add ARP entries other needed variables are index variables.', 'Updated MIB file to add history.',))
if mibBuilder.loadTexts: pdn_arp.setLastUpdated('200507190000Z')
if mibBuilder.loadTexts: pdn_arp.setOrganization('Paradyne Networks, Inc. MIB Working Group')
if mibBuilder.loadTexts: pdn_arp.setContactInfo('Paradyne Corporation 8545 126th Avenue North Largo, FL 33733 www.paradyne.com General Comments to: mibwg_team@paradyne.com Editors Wayne Jadoo Prakash Easwar Dragana Gough Clay Sikes')
if mibBuilder.loadTexts: pdn_arp.setDescription('This MIB contains objects that are used to configure ARP entries and display ARP information. ================================================================= == == == Copyright (C) 2005 Paradyne Networks, Inc. == == == =================================================================')
pdnNetToMediaGenericMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 27, 1))
pdnNetToMediaMIBTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 27, 2))
pdnNetToMediaMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 27, 2, 0))
pdnNetToMediaParams = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 27, 1, 1))
pdnNetToMediaConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 27, 1, 2))
pdnNetTo8023MediaConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 27, 1, 3))
pdnNetToMediaConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 27, 1, 4))
pdnNetToMediaParamsCompEntryTimeout = MibScalar((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 27, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99999)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdnNetToMediaParamsCompEntryTimeout.setStatus('current')
if mibBuilder.loadTexts: pdnNetToMediaParamsCompEntryTimeout.setDescription('Complete Entry Timeout is the length of time that a complete entry remains in the ARP table before removal. A complete entry is one for which there is a MAC address -- i.e. a node has responded to the ARP request. If an entry gets this old without being referenced, it will be removed from the table. The range for this parameter is 1 to 200000 minutes.')
pdnNetToMediaParamsIncompEntryTimeout = MibScalar((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 27, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99999)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdnNetToMediaParamsIncompEntryTimeout.setStatus('current')
if mibBuilder.loadTexts: pdnNetToMediaParamsIncompEntryTimeout.setDescription('Incomplete Entry Timeout is the length of time that an incomplete entry remains in the ARP table before removal. An incomplete entry is one for which there is no MAC address -- i.e. an ARP request has been made, but no response has been received. This is also the amount of time that a packet will remain in the system while waiting for address resolution. The range for this parameter is 1 to 255 minutes.')
pdnNetToMediaParamsDefRouteEntryTimeout = MibScalar((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 27, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99999)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdnNetToMediaParamsDefRouteEntryTimeout.setStatus('current')
if mibBuilder.loadTexts: pdnNetToMediaParamsDefRouteEntryTimeout.setDescription('Default Route Entry Timeout is the length of time a default route entry will remain in the ARP table. If default route gets this old without being referenced, an ARP request will be sent to the next hop router. If no response is received, it will be removed from the ARP table and the card will switch to the next reachable default route with the highest preference. The range for this parameter is 1 to 20 minutes.')
pdnNetToMediaParamsAprTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 27, 1, 1, 4), )
if mibBuilder.loadTexts: pdnNetToMediaParamsAprTable.setStatus('current')
if mibBuilder.loadTexts: pdnNetToMediaParamsAprTable.setDescription('The ARP Periodic Request Table. This table allows timers which control the rate in which ARP requests are periodically sent to IP addresses to be configured and displayed.')
pdnNetToMediaParamsAprEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 27, 1, 1, 4, 1), ).setIndexNames((0, "PDN-ARP-MIB", "pdnNetToMediaParamsAprIpAddr"))
if mibBuilder.loadTexts: pdnNetToMediaParamsAprEntry.setStatus('current')
if mibBuilder.loadTexts: pdnNetToMediaParamsAprEntry.setDescription('An entry in the ARP Periodic Request Table. Each entry represents an IP address to send an ARP request to.')
pdnNetToMediaParamsAprIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 27, 1, 1, 4, 1, 1), IpAddress())
if mibBuilder.loadTexts: pdnNetToMediaParamsAprIpAddr.setStatus('current')
if mibBuilder.loadTexts: pdnNetToMediaParamsAprIpAddr.setDescription('Identifies the IP address to periodically send an ARP request to and is used to identify corresponding rows in the table.')
pdnNetToMediaParamsAprRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 27, 1, 1, 4, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pdnNetToMediaParamsAprRowStatus.setStatus('current')
if mibBuilder.loadTexts: pdnNetToMediaParamsAprRowStatus.setDescription('This object allows create, change, and delete operations on the table.')
pdnNetToMediaParamsAprReqPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 27, 1, 1, 4, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1440))).setUnits('minutes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: pdnNetToMediaParamsAprReqPeriod.setStatus('current')
if mibBuilder.loadTexts: pdnNetToMediaParamsAprReqPeriod.setDescription('Configures the period, in minutes, that ARP requests are periodically sent. The range is from one request every minute to one request every day (1440 minutes).')
pdnNetToMediaParamsAprTimeToNext = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 27, 1, 1, 4, 1, 4), Unsigned32()).setUnits('minutes').setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnNetToMediaParamsAprTimeToNext.setStatus('current')
if mibBuilder.loadTexts: pdnNetToMediaParamsAprTimeToNext.setDescription('Indicates the time, in minutes, remaining before the next ARP request will be sent.')
pdnNetToMediaConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 27, 1, 2, 1), )
if mibBuilder.loadTexts: pdnNetToMediaConfigTable.setStatus('current')
if mibBuilder.loadTexts: pdnNetToMediaConfigTable.setDescription('A table displaying information about ARP entries.')
pdnNetToMediaConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 27, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "PDN-ARP-MIB", "pdnNetToMediaConfigIpAddr"))
if mibBuilder.loadTexts: pdnNetToMediaConfigEntry.setStatus('current')
if mibBuilder.loadTexts: pdnNetToMediaConfigEntry.setDescription('A list of information for each ARP entry in the ARP table to be displayed.')
pdnNetToMediaConfigIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 27, 1, 2, 1, 1, 1), IpAddress())
if mibBuilder.loadTexts: pdnNetToMediaConfigIpAddr.setStatus('current')
if mibBuilder.loadTexts: pdnNetToMediaConfigIpAddr.setDescription(' This objects corresponds to an IP Address of a Host or Client.')
pdnNetToMediaConfigMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 27, 1, 2, 1, 1, 2), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pdnNetToMediaConfigMacAddr.setStatus('current')
if mibBuilder.loadTexts: pdnNetToMediaConfigMacAddr.setDescription('This object corresponds to a MAC Address of a Host or Client.')
pdnNetToMediaConfigMin = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 27, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnNetToMediaConfigMin.setStatus('current')
if mibBuilder.loadTexts: pdnNetToMediaConfigMin.setDescription('This objects displays the number of minutes since an ARP entry was last used.')
pdnNetToMediaConfigFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 27, 1, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnNetToMediaConfigFlags.setStatus('current')
if mibBuilder.loadTexts: pdnNetToMediaConfigFlags.setDescription('This object contains multiple information for an entry. The information can be interpreted as follows: 0x0004 -- permanent entry 0x0008 -- publish entry (respond for other host) 0x0010 -- has requested trailers 0x0020 -- Proxy ARP entry 0x0040 -- Subnetted Proxy ARP entry 0x0100 -- ARP For Default Gateway.')
pdnNetToMediaConfigTrailer = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 27, 1, 2, 1, 1, 5), SwitchState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pdnNetToMediaConfigTrailer.setStatus('current')
if mibBuilder.loadTexts: pdnNetToMediaConfigTrailer.setDescription('This object is used to specify whether or not trailer encapsulation should be enabled or disabled.')
pdnNetToMediaConfigPerm = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 27, 1, 2, 1, 1, 6), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pdnNetToMediaConfigPerm.setStatus('current')
if mibBuilder.loadTexts: pdnNetToMediaConfigPerm.setDescription("This object is used to specify whether or not an entry should be stored permanently in Non-volatile storage. If the value is 'true' (1) a permanent entry is added to non-volatile storage.")
pdnNetToMediaConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 27, 1, 2, 1, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pdnNetToMediaConfigRowStatus.setStatus('current')
if mibBuilder.loadTexts: pdnNetToMediaConfigRowStatus.setDescription('This object is used to create or delete a row in this table.')
pdnNetTo8023MediaConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 27, 1, 3, 1), )
if mibBuilder.loadTexts: pdnNetTo8023MediaConfigTable.setStatus('current')
if mibBuilder.loadTexts: pdnNetTo8023MediaConfigTable.setDescription('A table displaying information about ARP entries.')
pdnNetTo8023MediaConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 27, 1, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "PDN-ARP-MIB", "pdnNetTo8023MediaConfigIpAddr"), (0, "PDN-ARP-MIB", "pdnNetTo8023MediaConfigVnidId"))
if mibBuilder.loadTexts: pdnNetTo8023MediaConfigEntry.setStatus('current')
if mibBuilder.loadTexts: pdnNetTo8023MediaConfigEntry.setDescription('A list of information for each ARP entry in the ARP table to be displayed.')
pdnNetTo8023MediaConfigIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 27, 1, 3, 1, 1, 1), IpAddress())
if mibBuilder.loadTexts: pdnNetTo8023MediaConfigIpAddr.setStatus('current')
if mibBuilder.loadTexts: pdnNetTo8023MediaConfigIpAddr.setDescription('This objects corresponds to an IP Address of a Host or Client.')
pdnNetTo8023MediaConfigVnidId = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 27, 1, 3, 1, 1, 2), VnidRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnNetTo8023MediaConfigVnidId.setStatus('current')
if mibBuilder.loadTexts: pdnNetTo8023MediaConfigVnidId.setDescription('The VNID Id number of the virtual network for which this entry contains management information.')
pdnNetTo8023MediaConfigMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 27, 1, 3, 1, 1, 3), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pdnNetTo8023MediaConfigMacAddr.setStatus('current')
if mibBuilder.loadTexts: pdnNetTo8023MediaConfigMacAddr.setDescription('This object corresponds to a MAC Address of a Host or Client.')
pdnNetTo8023MediaConfigMin = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 27, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnNetTo8023MediaConfigMin.setStatus('current')
if mibBuilder.loadTexts: pdnNetTo8023MediaConfigMin.setDescription('This objects displays the number of minutes since an ARP entry was last used.')
pdnNetTo8023MediaConfigFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 27, 1, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnNetTo8023MediaConfigFlags.setStatus('current')
if mibBuilder.loadTexts: pdnNetTo8023MediaConfigFlags.setDescription('This object contains multiple information for an entry. The information can be interpreted as follows: 0x0004 -- permanent entry 0x0008 -- publish entry (respond for other host) 0x0010 -- has requested trailers 0x0020 -- Proxy ARP entry 0x0040 -- Subnetted Proxy ARP entry 0x0100 -- ARP For Default Gateway.')
pdnNetTo8023MediaConfigTrailer = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 27, 1, 3, 1, 1, 6), SwitchState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pdnNetTo8023MediaConfigTrailer.setStatus('current')
if mibBuilder.loadTexts: pdnNetTo8023MediaConfigTrailer.setDescription('This object is used to specify whether or not trailer encapsulation should be enabled or disabled.')
pdnNetTo8023MediaConfigPerm = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 27, 1, 3, 1, 1, 7), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pdnNetTo8023MediaConfigPerm.setStatus('current')
if mibBuilder.loadTexts: pdnNetTo8023MediaConfigPerm.setDescription("This object is used to specify whether or not an entry should be stored permanently in Non-volatile storage. If the value is 'true' (1) a permanent entry is added to non-volatile storage.")
pdnNetTo8023MediaConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 27, 1, 3, 1, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pdnNetTo8023MediaConfigRowStatus.setStatus('current')
if mibBuilder.loadTexts: pdnNetTo8023MediaConfigRowStatus.setDescription('This object is used to create or delete a row in this table.')
pdnNetToMediaClearAllArp = MibScalar((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 27, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noop", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdnNetToMediaClearAllArp.setStatus('current')
if mibBuilder.loadTexts: pdnNetToMediaClearAllArp.setDescription("Setting this object to a value of 'clear' will remove all entries from the ARP table.")
pdnNetToMediaProxyArpTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 27, 1, 2, 3), )
if mibBuilder.loadTexts: pdnNetToMediaProxyArpTable.setStatus('current')
if mibBuilder.loadTexts: pdnNetToMediaProxyArpTable.setDescription('This table is used to enable or disable proxy ARP for the specified interface. ')
pdnNetToMediaProxyArpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 27, 1, 2, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: pdnNetToMediaProxyArpEntry.setStatus('current')
if mibBuilder.loadTexts: pdnNetToMediaProxyArpEntry.setDescription('This is an entry that allows user to enable or disable proxy ARP for the specified interface.')
pdnNetToMediaProxyArpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 27, 1, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pdnNetToMediaProxyArpStatus.setStatus('current')
if mibBuilder.loadTexts: pdnNetToMediaProxyArpStatus.setDescription("Setting this object to a value 'enable' will enable proxy ARP for the interface identified by IfIndex. The value 'disable' will disable proxy ARP for the interface. ")
ipNetToMediaConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 27, 1, 2, 4))
ipNetToMediaForwardingMode = MibScalar((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 27, 1, 2, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("basic", 1), ("mux", 2), ("sms", 3), ("ult", 4), ("vlan", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNetToMediaForwardingMode.setStatus('current')
if mibBuilder.loadTexts: ipNetToMediaForwardingMode.setDescription("Setting this object to a value 'basic' will configure bridge to run in basic (transparent) mode. Setting the value to mux(2), will set bridge to run in mux forwarding mode. For more information about transparent vs. forwarding mode refer to RFC1483 that defines bridge functionality and the mib RFC1493 that defines mib needed to support different bridge functionality. Setting the value to ult(4), will enable Uplink Tagging. The Uplink Tagging Feature was added for the BitStorm 4800 and implements a portion of the IEEE 802.3Q VLAN standard to provide tagged Ethernet frames on the uplink port with a one-to-one mapping of ingress ADSL (subscriber) link to the LAN identifier carried in the Ethernet tag header. See Speedway (4800) R1.1 Requirements for detail. vlan(5) enables general VLAN support.")
ipNetToMediaDefaultNHR = MibScalar((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 27, 1, 2, 4, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNetToMediaDefaultNHR.setStatus('current')
if mibBuilder.loadTexts: ipNetToMediaDefaultNHR.setDescription('Setting this address will configure default NHR for the system.')
ipNetToMediaExtTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 27, 1, 2, 4, 3), )
if mibBuilder.loadTexts: ipNetToMediaExtTable.setStatus('current')
if mibBuilder.loadTexts: ipNetToMediaExtTable.setDescription('The IP Address Translation table used for mapping from IP addresses to physical addresses.')
ipNetToMediaExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 27, 1, 2, 4, 3, 1), )
ipNetToMediaEntry.registerAugmentions(("PDN-ARP-MIB", "ipNetToMediaExtEntry"))
ipNetToMediaExtEntry.setIndexNames(*ipNetToMediaEntry.getIndexNames())
if mibBuilder.loadTexts: ipNetToMediaExtEntry.setStatus('current')
if mibBuilder.loadTexts: ipNetToMediaExtEntry.setDescription("Each entry contains one IpAddress to `physical' address equivalence.")
ipNetToMediaNHR = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 27, 1, 2, 4, 3, 1, 1), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNetToMediaNHR.setStatus('current')
if mibBuilder.loadTexts: ipNetToMediaNHR.setDescription('This object is used to configure nhr for the interface using proxy ARP.')
ipNetToMediaLimitTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 27, 1, 2, 4, 4), )
if mibBuilder.loadTexts: ipNetToMediaLimitTable.setStatus('current')
if mibBuilder.loadTexts: ipNetToMediaLimitTable.setDescription('This table is used for to configure max number of IP addresses allowed on that interface.')
ipNetToMediaLimitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 27, 1, 2, 4, 4, 1), ).setIndexNames((0, "IP-MIB", "ipNetToMediaIfIndex"))
if mibBuilder.loadTexts: ipNetToMediaLimitEntry.setStatus('current')
if mibBuilder.loadTexts: ipNetToMediaLimitEntry.setDescription('Each entry contains number of IP addresses allowed on that interface.')
ipNetToMediaLimitEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 27, 1, 2, 4, 4, 1, 1), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNetToMediaLimitEnabled.setStatus('current')
if mibBuilder.loadTexts: ipNetToMediaLimitEnabled.setDescription('This object is used to enable/disable limiting number of ip addresses on interfaces using proxy ARP.')
ipNetToMediaMaxIPAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 27, 1, 2, 4, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99999))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNetToMediaMaxIPAddresses.setStatus('current')
if mibBuilder.loadTexts: ipNetToMediaMaxIPAddresses.setDescription('This object is used to configure number of ip addresses allowed on interfaces using proxy ARP.')
unauthorizedUserEvent = NotificationType((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 27, 2, 0, 1)).setObjects(("IP-MIB", "ipNetToMediaIfIndex"), ("IP-MIB", "ipNetToMediaPhysAddress"))
if mibBuilder.loadTexts: unauthorizedUserEvent.setStatus('current')
if mibBuilder.loadTexts: unauthorizedUserEvent.setDescription('This trap is to communicate that on the interface where security authorization (MAC or IP to port) is enabled, frame arrived that is not authorized for that interface.')
pdnNetToMediaCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 27, 1, 4, 1))
pdnNetToMediaGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 27, 1, 4, 2))
pdnNetToMediaCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 27, 1, 4, 1, 1)).setObjects(("PDN-ARP-MIB", "pdnNetToMediaParamsGroup"), ("PDN-ARP-MIB", "pdnNetToMediaConfigGroup"), ("PDN-ARP-MIB", "pdnNetToMedia8023ConfigGroup"), ("PDN-ARP-MIB", "pdnNetToMediaClearGroup"), ("PDN-ARP-MIB", "pdnNetToMediaProxyArpGroup"), ("PDN-ARP-MIB", "pdnNetToMediaConfigProxyArpGroup"), ("PDN-ARP-MIB", "pdnNetToMediaExtGroup"), ("PDN-ARP-MIB", "pdnNetToMediaLimitGroup"), ("PDN-ARP-MIB", "pdnNetToMediaUnauthorizedUserEventGroup"), ("PDN-ARP-MIB", "pdnNetToMediaParamsAprConfigGroup"), ("PDN-ARP-MIB", "pdnNetToMediaParamsAprTimeToNextGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pdnNetToMediaCompliance = pdnNetToMediaCompliance.setStatus('current')
if mibBuilder.loadTexts: pdnNetToMediaCompliance.setDescription('The compliance statement for the entities which implement the PDN-ARP-MIB.')
pdnNetToMediaObjGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 27, 1, 4, 2, 1))
pdnNetToMediaNtfyGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 27, 1, 4, 2, 2))
pdnNetToMediaParamsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 27, 1, 4, 2, 1, 1)).setObjects(("PDN-ARP-MIB", "pdnNetToMediaParamsCompEntryTimeout"), ("PDN-ARP-MIB", "pdnNetToMediaParamsIncompEntryTimeout"), ("PDN-ARP-MIB", "pdnNetToMediaParamsDefRouteEntryTimeout"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pdnNetToMediaParamsGroup = pdnNetToMediaParamsGroup.setStatus('current')
if mibBuilder.loadTexts: pdnNetToMediaParamsGroup.setDescription('A collection of objects providing way to configure ARP table entries.')
pdnNetToMediaConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 27, 1, 4, 2, 1, 2)).setObjects(("PDN-ARP-MIB", "pdnNetToMediaConfigMacAddr"), ("PDN-ARP-MIB", "pdnNetToMediaConfigMin"), ("PDN-ARP-MIB", "pdnNetToMediaConfigFlags"), ("PDN-ARP-MIB", "pdnNetToMediaConfigTrailer"), ("PDN-ARP-MIB", "pdnNetToMediaConfigPerm"), ("PDN-ARP-MIB", "pdnNetToMediaConfigRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pdnNetToMediaConfigGroup = pdnNetToMediaConfigGroup.setStatus('current')
if mibBuilder.loadTexts: pdnNetToMediaConfigGroup.setDescription('A collection of objects providing way to add ARP table entries.')
pdnNetToMedia8023ConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 27, 1, 4, 2, 1, 3)).setObjects(("PDN-ARP-MIB", "pdnNetTo8023MediaConfigVnidId"), ("PDN-ARP-MIB", "pdnNetTo8023MediaConfigMacAddr"), ("PDN-ARP-MIB", "pdnNetTo8023MediaConfigMin"), ("PDN-ARP-MIB", "pdnNetTo8023MediaConfigFlags"), ("PDN-ARP-MIB", "pdnNetTo8023MediaConfigTrailer"), ("PDN-ARP-MIB", "pdnNetTo8023MediaConfigPerm"), ("PDN-ARP-MIB", "pdnNetTo8023MediaConfigRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pdnNetToMedia8023ConfigGroup = pdnNetToMedia8023ConfigGroup.setStatus('current')
if mibBuilder.loadTexts: pdnNetToMedia8023ConfigGroup.setDescription('A collection of objects providing way to add 802.3 ARP table entries.')
pdnNetToMediaClearGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 27, 1, 4, 2, 1, 4)).setObjects(("PDN-ARP-MIB", "pdnNetToMediaClearAllArp"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pdnNetToMediaClearGroup = pdnNetToMediaClearGroup.setStatus('current')
if mibBuilder.loadTexts: pdnNetToMediaClearGroup.setDescription('A collection of objects that allows to clear all arp entries from a table.')
pdnNetToMediaProxyArpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 27, 1, 4, 2, 1, 5)).setObjects(("PDN-ARP-MIB", "pdnNetToMediaProxyArpStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pdnNetToMediaProxyArpGroup = pdnNetToMediaProxyArpGroup.setStatus('current')
if mibBuilder.loadTexts: pdnNetToMediaProxyArpGroup.setDescription('A collection of objects that allows to set all proxy ARP entries.')
pdnNetToMediaConfigProxyArpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 27, 1, 4, 2, 1, 6)).setObjects(("PDN-ARP-MIB", "ipNetToMediaForwardingMode"), ("PDN-ARP-MIB", "ipNetToMediaDefaultNHR"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pdnNetToMediaConfigProxyArpGroup = pdnNetToMediaConfigProxyArpGroup.setStatus('current')
if mibBuilder.loadTexts: pdnNetToMediaConfigProxyArpGroup.setDescription('A collection of objects that allows to set some proxy ARP entries.')
pdnNetToMediaExtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 27, 1, 4, 2, 1, 7)).setObjects(("PDN-ARP-MIB", "ipNetToMediaNHR"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pdnNetToMediaExtGroup = pdnNetToMediaExtGroup.setStatus('current')
if mibBuilder.loadTexts: pdnNetToMediaExtGroup.setDescription('A collection of objects that allows to set some proxy ARP entries.')
pdnNetToMediaLimitGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 27, 1, 4, 2, 1, 8)).setObjects(("PDN-ARP-MIB", "ipNetToMediaLimitEnabled"), ("PDN-ARP-MIB", "ipNetToMediaMaxIPAddresses"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pdnNetToMediaLimitGroup = pdnNetToMediaLimitGroup.setStatus('current')
if mibBuilder.loadTexts: pdnNetToMediaLimitGroup.setDescription('A collection of objects that allows to set some proxy ARP entries.')
pdnNetToMediaParamsAprConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 27, 1, 4, 2, 1, 9)).setObjects(("PDN-ARP-MIB", "pdnNetToMediaParamsAprRowStatus"), ("PDN-ARP-MIB", "pdnNetToMediaParamsAprReqPeriod"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pdnNetToMediaParamsAprConfigGroup = pdnNetToMediaParamsAprConfigGroup.setStatus('current')
if mibBuilder.loadTexts: pdnNetToMediaParamsAprConfigGroup.setDescription('A collection of objects to configure a timer to send ARP request to IP addresses periodically.')
pdnNetToMediaParamsAprTimeToNextGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 27, 1, 4, 2, 1, 10)).setObjects(("PDN-ARP-MIB", "pdnNetToMediaParamsAprTimeToNext"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pdnNetToMediaParamsAprTimeToNextGroup = pdnNetToMediaParamsAprTimeToNextGroup.setStatus('current')
if mibBuilder.loadTexts: pdnNetToMediaParamsAprTimeToNextGroup.setDescription('Object to display the amount of time remaining until the next ARP request gets sent for a particular IP address.')
pdnNetToMediaUnauthorizedUserEventGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 27, 1, 4, 2, 2, 1)).setObjects(("PDN-ARP-MIB", "unauthorizedUserEvent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pdnNetToMediaUnauthorizedUserEventGroup = pdnNetToMediaUnauthorizedUserEventGroup.setStatus('current')
if mibBuilder.loadTexts: pdnNetToMediaUnauthorizedUserEventGroup.setDescription('Unauthorized user event group.')
mibBuilder.exportSymbols("PDN-ARP-MIB", unauthorizedUserEvent=unauthorizedUserEvent, pdnNetToMediaConfigProxyArpGroup=pdnNetToMediaConfigProxyArpGroup, pdn_arp=pdn_arp, pdnNetToMediaProxyArpTable=pdnNetToMediaProxyArpTable, pdnNetTo8023MediaConfigPerm=pdnNetTo8023MediaConfigPerm, pdnNetToMediaMIBTraps=pdnNetToMediaMIBTraps, ipNetToMediaLimitEntry=ipNetToMediaLimitEntry, ipNetToMediaDefaultNHR=ipNetToMediaDefaultNHR, pdnNetToMediaConfigTable=pdnNetToMediaConfigTable, PYSNMP_MODULE_ID=pdn_arp, pdnNetToMediaConfigMin=pdnNetToMediaConfigMin, ipNetToMediaMaxIPAddresses=ipNetToMediaMaxIPAddresses, pdnNetToMediaProxyArpStatus=pdnNetToMediaProxyArpStatus, pdnNetToMediaParamsAprTimeToNext=pdnNetToMediaParamsAprTimeToNext, pdnNetToMediaProxyArpEntry=pdnNetToMediaProxyArpEntry, ipNetToMediaExtTable=ipNetToMediaExtTable, pdnNetToMediaExtGroup=pdnNetToMediaExtGroup, pdnNetToMediaParams=pdnNetToMediaParams, pdnNetToMediaParamsAprRowStatus=pdnNetToMediaParamsAprRowStatus, pdnNetToMediaConfigGroup=pdnNetToMediaConfigGroup, pdnNetToMediaConfigTrailer=pdnNetToMediaConfigTrailer, pdnNetToMediaParamsDefRouteEntryTimeout=pdnNetToMediaParamsDefRouteEntryTimeout, pdnNetTo8023MediaConfigMin=pdnNetTo8023MediaConfigMin, pdnNetToMedia8023ConfigGroup=pdnNetToMedia8023ConfigGroup, ipNetToMediaForwardingMode=ipNetToMediaForwardingMode, pdnNetToMediaConfigPerm=pdnNetToMediaConfigPerm, pdnNetToMediaGenericMIBObjects=pdnNetToMediaGenericMIBObjects, pdnNetTo8023MediaConfigMacAddr=pdnNetTo8023MediaConfigMacAddr, pdnNetTo8023MediaConfigRowStatus=pdnNetTo8023MediaConfigRowStatus, pdnNetToMediaClearGroup=pdnNetToMediaClearGroup, pdnNetTo8023MediaConfigEntry=pdnNetTo8023MediaConfigEntry, ipNetToMediaNHR=ipNetToMediaNHR, ipNetToMediaLimitEnabled=ipNetToMediaLimitEnabled, pdnNetTo8023MediaConfigVnidId=pdnNetTo8023MediaConfigVnidId, ipNetToMediaExtEntry=ipNetToMediaExtEntry, pdnNetToMediaMIBNotifications=pdnNetToMediaMIBNotifications, pdnNetToMediaUnauthorizedUserEventGroup=pdnNetToMediaUnauthorizedUserEventGroup, pdnNetToMediaParamsAprIpAddr=pdnNetToMediaParamsAprIpAddr, pdnNetToMediaConfigFlags=pdnNetToMediaConfigFlags, pdnNetToMediaConformance=pdnNetToMediaConformance, pdnNetToMediaConfigEntry=pdnNetToMediaConfigEntry, pdnNetTo8023MediaConfigTable=pdnNetTo8023MediaConfigTable, pdnNetToMediaConfigRowStatus=pdnNetToMediaConfigRowStatus, pdnNetToMediaParamsAprEntry=pdnNetToMediaParamsAprEntry, pdnNetToMediaCompliance=pdnNetToMediaCompliance, pdnNetToMediaParamsAprTable=pdnNetToMediaParamsAprTable, pdnNetToMediaClearAllArp=pdnNetToMediaClearAllArp, pdnNetTo8023MediaConfig=pdnNetTo8023MediaConfig, pdnNetToMediaObjGroups=pdnNetToMediaObjGroups, pdnNetToMediaParamsAprConfigGroup=pdnNetToMediaParamsAprConfigGroup, pdnNetToMediaParamsIncompEntryTimeout=pdnNetToMediaParamsIncompEntryTimeout, pdnNetToMediaConfig=pdnNetToMediaConfig, pdnNetToMediaParamsAprReqPeriod=pdnNetToMediaParamsAprReqPeriod, pdnNetToMediaNtfyGroups=pdnNetToMediaNtfyGroups, pdnNetToMediaProxyArpGroup=pdnNetToMediaProxyArpGroup, pdnNetToMediaParamsCompEntryTimeout=pdnNetToMediaParamsCompEntryTimeout, pdnNetToMediaConfigMacAddr=pdnNetToMediaConfigMacAddr, pdnNetToMediaCompliances=pdnNetToMediaCompliances, pdnNetToMediaLimitGroup=pdnNetToMediaLimitGroup, pdnNetToMediaParamsAprTimeToNextGroup=pdnNetToMediaParamsAprTimeToNextGroup, pdnNetTo8023MediaConfigIpAddr=pdnNetTo8023MediaConfigIpAddr, ipNetToMediaLimitTable=ipNetToMediaLimitTable, pdnNetToMediaGroups=pdnNetToMediaGroups, pdnNetToMediaParamsGroup=pdnNetToMediaParamsGroup, pdnNetToMediaConfigIpAddr=pdnNetToMediaConfigIpAddr, pdnNetTo8023MediaConfigTrailer=pdnNetTo8023MediaConfigTrailer, pdnNetTo8023MediaConfigFlags=pdnNetTo8023MediaConfigFlags, ipNetToMediaConfig=ipNetToMediaConfig)
