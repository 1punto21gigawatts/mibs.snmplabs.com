#
# PySNMP MIB module RIVERSTONE-LFAP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RIVERSTONE-LFAP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:57:31 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
riverstoneMibs, = mibBuilder.importSymbols("RIVERSTONE-SMI-MIB", "riverstoneMibs")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
ModuleIdentity, iso, Unsigned32, NotificationType, TimeTicks, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Counter64, ObjectIdentity, Gauge32, MibIdentifier, Integer32, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "iso", "Unsigned32", "NotificationType", "TimeTicks", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Counter64", "ObjectIdentity", "Gauge32", "MibIdentifier", "Integer32", "Counter32")
RowStatus, TruthValue, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TruthValue", "TextualConvention", "DisplayString")
rsLfapMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 5567, 2, 19))
rsLfapMIB.setRevisions(('2001-06-15 00:00', '2001-06-08 00:00', '2001-05-07 00:00', '2001-05-01 00:00', '2001-03-03 00:00', '2001-02-12 00:00', '2001-02-11 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: rsLfapMIB.setRevisionsDescriptions(('Indicate rsLfapServerStaticLastChanged, rsLfapStatsSessionChangedAt and rsLfapStatsLostAt are not supported in LFAPv4 in rsLfapAgentCompliance.', 'Add these objects MsgsUnknownTx, DropsInTxQueueWhenUp, MsgsInRxQueue, InvalidMsgsRx, MsgsUnknownRx into the StatsTable. Rename QueueDrops to DropsInTxQueue, LostPackets to TxLostPackets, LostOctets to TxLostOctets, QueuePeak to InTxQueuePeak. Changed the descriptions of the textual conventions and many of the objects. Rename ServerStatsTable to StatsTable.', 'Receive comments from Mike MacFaden and Sethu Rao. Change the object identity of the traps to be v1 compliant. Change the previous revision comments. Make rsLfapActiveServer a scalar. Rename rsLfapStaticServerTable to rsLfapServerStaticTable. The objects in that table have also been renamed appropriately.', 'MOve the scalars under rsLfapPerMon to a new table. rsLfapStatsTable. Add comformance. Reorganize tree. Rename some object identifiers.', 'Second round of edits from Paul Calato, Chiou-Hao Hsu. add both send and receive counters, add new counter for any unknown message types, clarify what lost timestamp counters and make MIB module support both implementation at CCE and FAS', 'First round of edits from Paul Calato.', 'Initial version of of Riverstone Flow Accounting MIB module for LFAPv4.',))
if mibBuilder.loadTexts: rsLfapMIB.setLastUpdated('200106150000Z')
if mibBuilder.loadTexts: rsLfapMIB.setOrganization('Riverstone Networks, Inc')
if mibBuilder.loadTexts: rsLfapMIB.setContactInfo('Riverstone Networks, Inc 5200 Great America Parkway Santa Clara CA USA 95054 PHONE:+1 408.878.6500 EMAIL: nms-eng@riverstonenet.com WEB: http://www.riverstonenet.com')
if mibBuilder.loadTexts: rsLfapMIB.setDescription('This MIB module defines the enterprise protocol Lightweight Flow Accounting Protocol. It provides the following capabilities: 1. Report general LFAP connection state on the equipment, which would be called Connection Control Entity (CCE). 2. Report and configure LFAP agent. 3. Report and configure an external server, which would be called Flow Accounting Service (FAS). 4. Provide LFAP statistics per FAS. Copyright (C) Riverstone Networks, Inc 2001')
rsLfapMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 5567, 2, 19, 1))
rsLfapAgentState = MibIdentifier((1, 3, 6, 1, 4, 1, 5567, 2, 19, 1, 1))
rsLfapAgentCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 5567, 2, 19, 1, 2))
rsLfapServerCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 5567, 2, 19, 1, 3))
rsLfapStats = MibIdentifier((1, 3, 6, 1, 4, 1, 5567, 2, 19, 1, 4))
rsLfapDiag = MibIdentifier((1, 3, 6, 1, 4, 1, 5567, 2, 19, 1, 5))
class RSLfapErrorCode(TextualConvention, Integer32):
    description = 'This represents the error states that can be detected by the LFAP agent on the the equipment or the CCE.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("unknown", 1), ("errorInConfig", 2), ("resourceExhausted", 3), ("errorNoServer", 4))

class RsLfapServerInst(TextualConvention, Integer32):
    description = 'This number represents an external LFAP server (FAS) in the list of LFAP servers configured on the CCE. If the value is 0, then no FAS is indicated.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(1, 32), ValueRangeConstraint(0, 0), )
class RsTaskPriority(TextualConvention, Integer32):
    description = 'This represents the relative priority of the LFAP agent to other tasks which shares CPU resources with the LFAP agent on the CCE.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("high", 1), ("medium", 2), ("low", 3))

class RSOperState(TextualConvention, Integer32):
    description = 'This represents the operational state of the LFAP agent running on the CCE.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("unknown", 1), ("lfapNormal", 2), ("lfapTest", 3), ("lfapDegraded", 4), ("lfapError", 5))

rsLfapCapabilities = MibScalar((1, 3, 6, 1, 4, 1, 5567, 2, 19, 1, 1, 1), Bits().clone(namedValues=NamedValues(("rsLfapV4", 0), ("rsLfapV5", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsLfapCapabilities.setStatus('current')
if mibBuilder.loadTexts: rsLfapCapabilities.setDescription('The capabilities of the LFAP agent on the equipment (CCE). The LFAP agent is a LFAP client.')
rsLfapAdminState = MibScalar((1, 3, 6, 1, 4, 1, 5567, 2, 19, 1, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsLfapAdminState.setStatus('current')
if mibBuilder.loadTexts: rsLfapAdminState.setDescription('The administrative status of LFAP agent on the CCE. The value true would start the LFAP agent. And false would stop the LFAP agent.')
rsLfapOperState = MibScalar((1, 3, 6, 1, 4, 1, 5567, 2, 19, 1, 1, 3), RSOperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsLfapOperState.setStatus('current')
if mibBuilder.loadTexts: rsLfapOperState.setDescription('The operational state of the LFAP agent on the CCE.')
rsLfapLastError = MibScalar((1, 3, 6, 1, 4, 1, 5567, 2, 19, 1, 1, 4), RSLfapErrorCode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsLfapLastError.setStatus('current')
if mibBuilder.loadTexts: rsLfapLastError.setDescription('Current error status detected by the LFAP agent on the CCE.')
rsLfapLastErrorReason = MibScalar((1, 3, 6, 1, 4, 1, 5567, 2, 19, 1, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsLfapLastErrorReason.setStatus('current')
if mibBuilder.loadTexts: rsLfapLastErrorReason.setDescription('Current error reason detected by the LFAP agent on the CCE. This string is suitable for display to an operator.')
rsLfapActiveServer = MibScalar((1, 3, 6, 1, 4, 1, 5567, 2, 19, 1, 1, 6), RsLfapServerInst()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsLfapActiveServer.setStatus('current')
if mibBuilder.loadTexts: rsLfapActiveServer.setDescription('This indicates which FAS is connected to the LFAP agent on the CCE.')
rsLfapPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 5567, 2, 19, 1, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1440)).clone(15)).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsLfapPollInterval.setStatus('current')
if mibBuilder.loadTexts: rsLfapPollInterval.setDescription('The rate to send accounting information to the FAS by the LFAP agent.')
rsLfapBatchSize = MibScalar((1, 3, 6, 1, 4, 1, 5567, 2, 19, 1, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2000)).clone(32)).setUnits('records').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsLfapBatchSize.setStatus('current')
if mibBuilder.loadTexts: rsLfapBatchSize.setDescription('The number of records sent per batch to the FAS.')
rsLfapBatchInterval = MibScalar((1, 3, 6, 1, 4, 1, 5567, 2, 19, 1, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2000)).clone(1)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsLfapBatchInterval.setStatus('current')
if mibBuilder.loadTexts: rsLfapBatchInterval.setDescription('The time in seconds to send flow-create and flow-delete information to the FAS server.')
rsLfapLostContactInterval = MibScalar((1, 3, 6, 1, 4, 1, 5567, 2, 19, 1, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 2000)).clone(60)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsLfapLostContactInterval.setStatus('current')
if mibBuilder.loadTexts: rsLfapLostContactInterval.setDescription('Amount of time to wait before considering the TCP connection lost.')
rsLfapServerRetryInterval = MibScalar((1, 3, 6, 1, 4, 1, 5567, 2, 19, 1, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2000)).clone(60)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsLfapServerRetryInterval.setStatus('current')
if mibBuilder.loadTexts: rsLfapServerRetryInterval.setDescription('The rate at which to retry a connection to a FAS.')
rsLfapMaxTxQueueSize = MibScalar((1, 3, 6, 1, 4, 1, 5567, 2, 19, 1, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 2000000)).clone(50000)).setUnits('message count').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsLfapMaxTxQueueSize.setStatus('current')
if mibBuilder.loadTexts: rsLfapMaxTxQueueSize.setDescription('Number of messages that can be queued for transmit before messages are dropped.')
rsLfapTaskPriority = MibScalar((1, 3, 6, 1, 4, 1, 5567, 2, 19, 1, 2, 7), RsTaskPriority()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsLfapTaskPriority.setStatus('current')
if mibBuilder.loadTexts: rsLfapTaskPriority.setDescription('This helps a task scheduler on the CCE in scheduling the LFAP agent relative to other tasks on the CCE.')
rsLfapServerStaticLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 5567, 2, 19, 1, 3, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsLfapServerStaticLastChanged.setStatus('current')
if mibBuilder.loadTexts: rsLfapServerStaticLastChanged.setDescription('The value of sysUpTime at the time of the last change to any field or row in the rsLfapServerStaticTable.')
rsLfapServerStaticTable = MibTable((1, 3, 6, 1, 4, 1, 5567, 2, 19, 1, 3, 3), )
if mibBuilder.loadTexts: rsLfapServerStaticTable.setStatus('current')
if mibBuilder.loadTexts: rsLfapServerStaticTable.setDescription('This table is used to configure FAS server(s) on the CCE.')
rsLfapServerStaticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5567, 2, 19, 1, 3, 3, 1), ).setIndexNames((0, "RIVERSTONE-LFAP-MIB", "rsLfapServerStaticIndex"))
if mibBuilder.loadTexts: rsLfapServerStaticEntry.setStatus('current')
if mibBuilder.loadTexts: rsLfapServerStaticEntry.setDescription('Each entry would represent the configuration of an external FAS on the CCE. Rows added to this table persist across system restarts.')
rsLfapServerStaticIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 19, 1, 3, 3, 1, 1), RsLfapServerInst())
if mibBuilder.loadTexts: rsLfapServerStaticIndex.setStatus('current')
if mibBuilder.loadTexts: rsLfapServerStaticIndex.setDescription('A unique value to index each LFAP server instance defined in this table.')
rsLfapServerStaticAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 19, 1, 3, 3, 1, 2), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsLfapServerStaticAddressType.setStatus('current')
if mibBuilder.loadTexts: rsLfapServerStaticAddressType.setDescription('The type of address found in rsLfapServerStaticAddress')
rsLfapServerStaticAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 19, 1, 3, 3, 1, 3), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsLfapServerStaticAddress.setStatus('current')
if mibBuilder.loadTexts: rsLfapServerStaticAddress.setDescription('The IP address of a system acting as a FAS')
rsLfapServerStaticStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 19, 1, 3, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsLfapServerStaticStatus.setStatus('current')
if mibBuilder.loadTexts: rsLfapServerStaticStatus.setDescription('Install and delete rows in this table using this object.')
rsLfapStatsTable = MibTable((1, 3, 6, 1, 4, 1, 5567, 2, 19, 1, 4, 1), )
if mibBuilder.loadTexts: rsLfapStatsTable.setStatus('current')
if mibBuilder.loadTexts: rsLfapStatsTable.setDescription('This table contains one row per FAS server.')
rsLfapStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5567, 2, 19, 1, 4, 1, 1), ).setIndexNames((0, "RIVERSTONE-LFAP-MIB", "rsLfapServerStaticIndex"))
if mibBuilder.loadTexts: rsLfapStatsEntry.setStatus('current')
if mibBuilder.loadTexts: rsLfapStatsEntry.setDescription('On the CCE, each entry contains LFAP statistics collected by the LFAP agent relating to a FAS. Each entry is indexed by the FAS server index (rsLfapServerStaticIndex).')
rsLfapStatsSessionUp = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 19, 1, 4, 1, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsLfapStatsSessionUp.setStatus('current')
if mibBuilder.loadTexts: rsLfapStatsSessionUp.setDescription('The current state of the TCP connection between the LFAP agent on the CCE and an external server (FAS) identified by rsLfapServerStaticIndex. If a connection from the CCE is established with the FAS, then its value would be true. Otherwise it would be false.')
rsLfapStatsSessionChangedAt = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 19, 1, 4, 1, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsLfapStatsSessionChangedAt.setStatus('current')
if mibBuilder.loadTexts: rsLfapStatsSessionChangedAt.setDescription('The value of sysUpTime when rsLfapStatsSessionUp last changed state.')
rsLfapStatsTcpConnects = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 19, 1, 4, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsLfapStatsTcpConnects.setStatus('current')
if mibBuilder.loadTexts: rsLfapStatsTcpConnects.setDescription('This is the number of successul TCP connections the LFAP agent made to a FAS.')
rsLfapStatsTcpConnectFails = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 19, 1, 4, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsLfapStatsTcpConnectFails.setStatus('current')
if mibBuilder.loadTexts: rsLfapStatsTcpConnectFails.setDescription('This is the number of FAILED TCP connections the LFAP agent made to connect to a FAS.')
rsLfapStatsTxVRs = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 19, 1, 4, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsLfapStatsTxVRs.setStatus('current')
if mibBuilder.loadTexts: rsLfapStatsTxVRs.setDescription('This object contains the number of Version Request(VR) sent by the CCE to a FAS.')
rsLfapStatsTxVRAs = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 19, 1, 4, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsLfapStatsTxVRAs.setStatus('current')
if mibBuilder.loadTexts: rsLfapStatsTxVRAs.setDescription('This object contains the number of Version Request Acknowledge (VRA) sent.')
rsLfapStatsTxFARs = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 19, 1, 4, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsLfapStatsTxFARs.setStatus('current')
if mibBuilder.loadTexts: rsLfapStatsTxFARs.setDescription('This object contains the number of Flow Activation Records (FAR) sent. TBD: specify ref clause.')
rsLfapStatsTxFUNs = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 19, 1, 4, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsLfapStatsTxFUNs.setStatus('current')
if mibBuilder.loadTexts: rsLfapStatsTxFUNs.setDescription('This object contains the number of Flow Update Notification (FUN) sent.')
rsLfapStatsTxARs = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 19, 1, 4, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsLfapStatsTxARs.setStatus('current')
if mibBuilder.loadTexts: rsLfapStatsTxARs.setDescription('This object contains the number of Administrative Request(AR) sent.')
rsLfapStatsTxARAs = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 19, 1, 4, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsLfapStatsTxARAs.setStatus('current')
if mibBuilder.loadTexts: rsLfapStatsTxARAs.setDescription('This object contains the number of Administrative Request Acknowledge (ARA) sent.')
rsLfapStatsMsgsInTxQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 19, 1, 4, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsLfapStatsMsgsInTxQueue.setStatus('current')
if mibBuilder.loadTexts: rsLfapStatsMsgsInTxQueue.setDescription('This object contains the number of messages currently in the send queue.')
rsLfapStatsDropsInTxQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 19, 1, 4, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsLfapStatsDropsInTxQueue.setStatus('current')
if mibBuilder.loadTexts: rsLfapStatsDropsInTxQueue.setDescription('This object represents the number of messages dropped by the LFAP agent in the transmitting queue for this FAS.')
rsLfapStatsDropsInTxQueueWhenUp = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 19, 1, 4, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsLfapStatsDropsInTxQueueWhenUp.setStatus('current')
if mibBuilder.loadTexts: rsLfapStatsDropsInTxQueueWhenUp.setDescription('This object represents the number of messages dropped by the LFAP agent in the send queue for this FAS while the connection between the CCE and the FAS is up.')
rsLfapStatsRxVRs = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 19, 1, 4, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsLfapStatsRxVRs.setStatus('current')
if mibBuilder.loadTexts: rsLfapStatsRxVRs.setDescription('This object contains the number of VRs received.')
rsLfapStatsRxVRAs = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 19, 1, 4, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsLfapStatsRxVRAs.setStatus('current')
if mibBuilder.loadTexts: rsLfapStatsRxVRAs.setDescription('This object contains the number of VRAs received.')
rsLfapStatsRxFARs = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 19, 1, 4, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsLfapStatsRxFARs.setStatus('current')
if mibBuilder.loadTexts: rsLfapStatsRxFARs.setDescription('This object contains the number of FARs received.')
rsLfapStatsRxFUNs = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 19, 1, 4, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsLfapStatsRxFUNs.setStatus('current')
if mibBuilder.loadTexts: rsLfapStatsRxFUNs.setDescription('This object contains the number of FUNs received.')
rsLfapStatsRxARs = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 19, 1, 4, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsLfapStatsRxARs.setStatus('current')
if mibBuilder.loadTexts: rsLfapStatsRxARs.setDescription('This object contains the number of ARs received by the CCE from a FAS.')
rsLfapStatsRxARAs = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 19, 1, 4, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsLfapStatsRxARAs.setStatus('current')
if mibBuilder.loadTexts: rsLfapStatsRxARAs.setDescription('This object contains the number of ARAs received.')
rsLfapStatsMsgsInRxQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 19, 1, 4, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsLfapStatsMsgsInRxQueue.setStatus('current')
if mibBuilder.loadTexts: rsLfapStatsMsgsInRxQueue.setDescription('This object contains the number of messages currently in the receive queue.')
rsLfapStatsInvalidMsgsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 19, 1, 4, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsLfapStatsInvalidMsgsRx.setStatus('current')
if mibBuilder.loadTexts: rsLfapStatsInvalidMsgsRx.setDescription('This object is the sum of corrupt and erroneous messages received.')
rsLfapStatsMsgsUnknownRx = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 19, 1, 4, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsLfapStatsMsgsUnknownRx.setStatus('current')
if mibBuilder.loadTexts: rsLfapStatsMsgsUnknownRx.setDescription('This object contains the number of unknown LFAP message types received.')
rsLfapStatsTxLostPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 19, 1, 4, 1, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsLfapStatsTxLostPackets.setStatus('current')
if mibBuilder.loadTexts: rsLfapStatsTxLostPackets.setDescription('The count of packets not accounted for and thus not recorded by the LFAP server.')
rsLfapStatsTxLostOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 19, 1, 4, 1, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsLfapStatsTxLostOctets.setStatus('current')
if mibBuilder.loadTexts: rsLfapStatsTxLostOctets.setDescription('The count of octets not accounted for and thus not recorded by the LFAP server.')
rsLfapStatsLostAt = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 19, 1, 4, 1, 1, 25), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsLfapStatsLostAt.setStatus('current')
if mibBuilder.loadTexts: rsLfapStatsLostAt.setDescription('On the CCE, the sysUpTime when the LFAP agent last lost trasmitted FAR/FUN messages. On the FAS, it would be the last time when the server lost received FAR/FUN messages.')
rsLfapStatsActiveFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 19, 1, 4, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsLfapStatsActiveFlows.setStatus('current')
if mibBuilder.loadTexts: rsLfapStatsActiveFlows.setDescription('Number of active flows being tracked per FAS.')
rsLfapStatsFlowRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 19, 1, 4, 1, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsLfapStatsFlowRate.setStatus('current')
if mibBuilder.loadTexts: rsLfapStatsFlowRate.setDescription('Number of flows being setup per second. This value is calculated as an exponentially decaying average over 30 second intervals')
rsLfapStatsActiveFlowsPeak = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 19, 1, 4, 1, 1, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsLfapStatsActiveFlowsPeak.setStatus('current')
if mibBuilder.loadTexts: rsLfapStatsActiveFlowsPeak.setDescription('High water mark for number of active flows being tracked by LFAP.')
rsLfapStatsMsgsInTxQueuePeak = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 19, 1, 4, 1, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsLfapStatsMsgsInTxQueuePeak.setStatus('current')
if mibBuilder.loadTexts: rsLfapStatsMsgsInTxQueuePeak.setDescription('High water mark for queue depth.')
rsLfapStatsFlowsPeakTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 19, 1, 4, 1, 1, 30), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsLfapStatsFlowsPeakTime.setStatus('current')
if mibBuilder.loadTexts: rsLfapStatsFlowsPeakTime.setDescription('The value of sysUpTime when max number of flows being reported on was reached.')
rsRunLfapSelfTest = MibScalar((1, 3, 6, 1, 4, 1, 5567, 2, 19, 1, 5, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsRunLfapSelfTest.setStatus('current')
if mibBuilder.loadTexts: rsRunLfapSelfTest.setDescription('When set to true, CCE performs self diagsnostic of accounting subsystem. Requires rsLfapAdminState to be set to false. Upon completion, rsLfapLastError will indicate test results.')
rsLfapMIBEvents = MibIdentifier((1, 3, 6, 1, 4, 1, 5567, 2, 19, 2))
rsLfapMIBEventsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 5567, 2, 19, 2, 0))
rsLfapNoServer = NotificationType((1, 3, 6, 1, 4, 1, 5567, 2, 19, 2, 0, 1)).setObjects(("RIVERSTONE-LFAP-MIB", "rsLfapStatsSessionChangedAt"), ("RIVERSTONE-LFAP-MIB", "rsLfapStatsTcpConnectFails"))
if mibBuilder.loadTexts: rsLfapNoServer.setStatus('current')
if mibBuilder.loadTexts: rsLfapNoServer.setDescription('The LFAP agent or a LFAP client has tried to connect to all servers in rsLfapStatsServerStaticTable and has failed. ')
rsLfapLostMessage = NotificationType((1, 3, 6, 1, 4, 1, 5567, 2, 19, 2, 0, 2)).setObjects(("RIVERSTONE-LFAP-MIB", "rsLfapStatsSessionChangedAt"), ("RIVERSTONE-LFAP-MIB", "rsLfapStatsLostAt"), ("RIVERSTONE-LFAP-MIB", "rsLfapStatsSessionUp"))
if mibBuilder.loadTexts: rsLfapLostMessage.setStatus('current')
if mibBuilder.loadTexts: rsLfapLostMessage.setDescription('When a LFAP client first drops messages due to no connected server, send this event. No additional events are sent until the value of rsLfapStatsSessionChangedAt value has changed.')
rsLfapQueueFull = NotificationType((1, 3, 6, 1, 4, 1, 5567, 2, 19, 2, 0, 3)).setObjects(("RIVERSTONE-LFAP-MIB", "rsLfapStatsDropsInTxQueue"), ("RIVERSTONE-LFAP-MIB", "rsLfapMaxTxQueueSize"), ("RIVERSTONE-LFAP-MIB", "rsLfapStatsSessionUp"))
if mibBuilder.loadTexts: rsLfapQueueFull.setStatus('current')
if mibBuilder.loadTexts: rsLfapQueueFull.setDescription('Accounting data may be lost when the CCE queue reaches capacity. rsLfapStatsSessionUp indicates the typical case where there the connection to a FAS is lost. A second case is where the rate of inserts into the queue exceeds the rate at which the FAS is processing them. This can be caused by flow control of the underlying TCP session. Send only one rsLfapStatsQueueFull notification per 1000 messages.')
rsLfapConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 5567, 2, 19, 3))
rsLfapCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 5567, 2, 19, 3, 1))
rsLfapGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 5567, 2, 19, 3, 2))
rsLfapAgentCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 5567, 2, 19, 3, 1, 1)).setObjects(("RIVERSTONE-LFAP-MIB", "rsLfapAgentStateGroup"), ("RIVERSTONE-LFAP-MIB", "rsLfapAgentCfgGroup"), ("RIVERSTONE-LFAP-MIB", "rsLfapServerStaticGroup"), ("RIVERSTONE-LFAP-MIB", "rsLfapStatsGroup"), ("RIVERSTONE-LFAP-MIB", "rsLfapDiagGroup"), ("RIVERSTONE-LFAP-MIB", "rsLfapNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsLfapAgentCompliance = rsLfapAgentCompliance.setStatus('current')
if mibBuilder.loadTexts: rsLfapAgentCompliance.setDescription('This compliance statement for implementing this MIB on the CCE. Some objects also do not need to be implemeted if the LFAP agent is v4.')
rsLfapServerCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 5567, 2, 19, 3, 1, 2)).setObjects(("RIVERSTONE-LFAP-MIB", "rsLfapStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsLfapServerCompliance = rsLfapServerCompliance.setStatus('current')
if mibBuilder.loadTexts: rsLfapServerCompliance.setDescription('This compliance statement for implementing this MIB on a FAS. Some objects in rsLfapStatsGroup would not apply to the FAS. TBD.')
rsLfapAgentStateGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5567, 2, 19, 3, 2, 1)).setObjects(("RIVERSTONE-LFAP-MIB", "rsLfapCapabilities"), ("RIVERSTONE-LFAP-MIB", "rsLfapAdminState"), ("RIVERSTONE-LFAP-MIB", "rsLfapOperState"), ("RIVERSTONE-LFAP-MIB", "rsLfapLastError"), ("RIVERSTONE-LFAP-MIB", "rsLfapLastErrorReason"), ("RIVERSTONE-LFAP-MIB", "rsLfapActiveServer"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsLfapAgentStateGroup = rsLfapAgentStateGroup.setStatus('current')
if mibBuilder.loadTexts: rsLfapAgentStateGroup.setDescription('The collection of objects used to represent the desired and actual state of the LFAP agent.')
rsLfapAgentCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5567, 2, 19, 3, 2, 2)).setObjects(("RIVERSTONE-LFAP-MIB", "rsLfapPollInterval"), ("RIVERSTONE-LFAP-MIB", "rsLfapBatchSize"), ("RIVERSTONE-LFAP-MIB", "rsLfapBatchInterval"), ("RIVERSTONE-LFAP-MIB", "rsLfapLostContactInterval"), ("RIVERSTONE-LFAP-MIB", "rsLfapServerRetryInterval"), ("RIVERSTONE-LFAP-MIB", "rsLfapMaxTxQueueSize"), ("RIVERSTONE-LFAP-MIB", "rsLfapTaskPriority"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsLfapAgentCfgGroup = rsLfapAgentCfgGroup.setStatus('current')
if mibBuilder.loadTexts: rsLfapAgentCfgGroup.setDescription('The collection of objects used to represent the configuration of the LFAP agent.')
rsLfapServerStaticGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5567, 2, 19, 3, 2, 3)).setObjects(("RIVERSTONE-LFAP-MIB", "rsLfapServerStaticLastChanged"), ("RIVERSTONE-LFAP-MIB", "rsLfapServerStaticAddressType"), ("RIVERSTONE-LFAP-MIB", "rsLfapServerStaticAddress"), ("RIVERSTONE-LFAP-MIB", "rsLfapServerStaticStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsLfapServerStaticGroup = rsLfapServerStaticGroup.setStatus('current')
if mibBuilder.loadTexts: rsLfapServerStaticGroup.setDescription('The collection of objects used to represent the configuration of a LFAP server.')
rsLfapStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5567, 2, 19, 3, 2, 4)).setObjects(("RIVERSTONE-LFAP-MIB", "rsLfapStatsSessionUp"), ("RIVERSTONE-LFAP-MIB", "rsLfapStatsSessionChangedAt"), ("RIVERSTONE-LFAP-MIB", "rsLfapStatsTcpConnects"), ("RIVERSTONE-LFAP-MIB", "rsLfapStatsTcpConnectFails"), ("RIVERSTONE-LFAP-MIB", "rsLfapStatsTxVRs"), ("RIVERSTONE-LFAP-MIB", "rsLfapStatsTxVRAs"), ("RIVERSTONE-LFAP-MIB", "rsLfapStatsTxFARs"), ("RIVERSTONE-LFAP-MIB", "rsLfapStatsTxFUNs"), ("RIVERSTONE-LFAP-MIB", "rsLfapStatsTxARs"), ("RIVERSTONE-LFAP-MIB", "rsLfapStatsTxARAs"), ("RIVERSTONE-LFAP-MIB", "rsLfapStatsMsgsInTxQueue"), ("RIVERSTONE-LFAP-MIB", "rsLfapStatsDropsInTxQueue"), ("RIVERSTONE-LFAP-MIB", "rsLfapStatsDropsInTxQueueWhenUp"), ("RIVERSTONE-LFAP-MIB", "rsLfapStatsRxVRs"), ("RIVERSTONE-LFAP-MIB", "rsLfapStatsRxVRAs"), ("RIVERSTONE-LFAP-MIB", "rsLfapStatsRxFARs"), ("RIVERSTONE-LFAP-MIB", "rsLfapStatsRxFUNs"), ("RIVERSTONE-LFAP-MIB", "rsLfapStatsRxARs"), ("RIVERSTONE-LFAP-MIB", "rsLfapStatsRxARAs"), ("RIVERSTONE-LFAP-MIB", "rsLfapStatsMsgsInRxQueue"), ("RIVERSTONE-LFAP-MIB", "rsLfapStatsInvalidMsgsRx"), ("RIVERSTONE-LFAP-MIB", "rsLfapStatsMsgsUnknownRx"), ("RIVERSTONE-LFAP-MIB", "rsLfapStatsTxLostPackets"), ("RIVERSTONE-LFAP-MIB", "rsLfapStatsTxLostOctets"), ("RIVERSTONE-LFAP-MIB", "rsLfapStatsLostAt"), ("RIVERSTONE-LFAP-MIB", "rsLfapStatsActiveFlows"), ("RIVERSTONE-LFAP-MIB", "rsLfapStatsFlowRate"), ("RIVERSTONE-LFAP-MIB", "rsLfapStatsActiveFlowsPeak"), ("RIVERSTONE-LFAP-MIB", "rsLfapStatsMsgsInTxQueuePeak"), ("RIVERSTONE-LFAP-MIB", "rsLfapStatsFlowsPeakTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsLfapStatsGroup = rsLfapStatsGroup.setStatus('current')
if mibBuilder.loadTexts: rsLfapStatsGroup.setDescription('The collection of objects used to represent the statistics of a LFAP server.')
rsLfapDiagGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5567, 2, 19, 3, 2, 5)).setObjects(("RIVERSTONE-LFAP-MIB", "rsRunLfapSelfTest"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsLfapDiagGroup = rsLfapDiagGroup.setStatus('current')
if mibBuilder.loadTexts: rsLfapDiagGroup.setDescription('The collection of objects used to represent LFAP diagnostics.')
rsLfapNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 5567, 2, 19, 3, 2, 6)).setObjects(("RIVERSTONE-LFAP-MIB", "rsLfapNoServer"), ("RIVERSTONE-LFAP-MIB", "rsLfapLostMessage"), ("RIVERSTONE-LFAP-MIB", "rsLfapQueueFull"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsLfapNotificationGroup = rsLfapNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: rsLfapNotificationGroup.setDescription('The collection of notifications for RS LFAP MIB.')
mibBuilder.exportSymbols("RIVERSTONE-LFAP-MIB", rsLfapServerCompliance=rsLfapServerCompliance, rsLfapStatsRxFARs=rsLfapStatsRxFARs, rsLfapStatsRxARs=rsLfapStatsRxARs, rsLfapStatsMsgsInTxQueue=rsLfapStatsMsgsInTxQueue, rsLfapStatsActiveFlowsPeak=rsLfapStatsActiveFlowsPeak, rsLfapStatsRxARAs=rsLfapStatsRxARAs, rsLfapStatsRxVRAs=rsLfapStatsRxVRAs, rsLfapAdminState=rsLfapAdminState, rsLfapLastError=rsLfapLastError, rsLfapServerStaticAddress=rsLfapServerStaticAddress, rsLfapStatsTxARAs=rsLfapStatsTxARAs, rsLfapLostMessage=rsLfapLostMessage, rsLfapStatsTxARs=rsLfapStatsTxARs, rsLfapServerStaticAddressType=rsLfapServerStaticAddressType, rsLfapBatchSize=rsLfapBatchSize, rsLfapAgentStateGroup=rsLfapAgentStateGroup, rsLfapOperState=rsLfapOperState, rsLfapStatsTxFARs=rsLfapStatsTxFARs, RsLfapServerInst=RsLfapServerInst, rsLfapGroups=rsLfapGroups, rsLfapStatsEntry=rsLfapStatsEntry, rsLfapStatsSessionUp=rsLfapStatsSessionUp, rsLfapBatchInterval=rsLfapBatchInterval, rsLfapStatsMsgsUnknownRx=rsLfapStatsMsgsUnknownRx, rsRunLfapSelfTest=rsRunLfapSelfTest, rsLfapStatsTxVRAs=rsLfapStatsTxVRAs, rsLfapAgentCfgGroup=rsLfapAgentCfgGroup, rsLfapServerStaticEntry=rsLfapServerStaticEntry, rsLfapStatsMsgsInTxQueuePeak=rsLfapStatsMsgsInTxQueuePeak, rsLfapLastErrorReason=rsLfapLastErrorReason, rsLfapStatsInvalidMsgsRx=rsLfapStatsInvalidMsgsRx, rsLfapLostContactInterval=rsLfapLostContactInterval, rsLfapMaxTxQueueSize=rsLfapMaxTxQueueSize, rsLfapActiveServer=rsLfapActiveServer, RSOperState=RSOperState, rsLfapServerStaticIndex=rsLfapServerStaticIndex, rsLfapServerStaticStatus=rsLfapServerStaticStatus, rsLfapStatsTable=rsLfapStatsTable, rsLfapNotificationGroup=rsLfapNotificationGroup, rsLfapStatsGroup=rsLfapStatsGroup, rsLfapCapabilities=rsLfapCapabilities, rsLfapTaskPriority=rsLfapTaskPriority, rsLfapStatsActiveFlows=rsLfapStatsActiveFlows, rsLfapStatsRxVRs=rsLfapStatsRxVRs, RSLfapErrorCode=RSLfapErrorCode, rsLfapAgentState=rsLfapAgentState, rsLfapConformance=rsLfapConformance, rsLfapMIBEvents=rsLfapMIBEvents, rsLfapQueueFull=rsLfapQueueFull, rsLfapStatsTxFUNs=rsLfapStatsTxFUNs, RsTaskPriority=RsTaskPriority, rsLfapStatsMsgsInRxQueue=rsLfapStatsMsgsInRxQueue, rsLfapMIBObjects=rsLfapMIBObjects, rsLfapStatsSessionChangedAt=rsLfapStatsSessionChangedAt, rsLfapStatsTxVRs=rsLfapStatsTxVRs, rsLfapDiag=rsLfapDiag, rsLfapAgentCompliance=rsLfapAgentCompliance, rsLfapServerStaticLastChanged=rsLfapServerStaticLastChanged, rsLfapMIB=rsLfapMIB, rsLfapServerStaticTable=rsLfapServerStaticTable, rsLfapStats=rsLfapStats, rsLfapDiagGroup=rsLfapDiagGroup, rsLfapStatsLostAt=rsLfapStatsLostAt, rsLfapPollInterval=rsLfapPollInterval, rsLfapServerCfg=rsLfapServerCfg, rsLfapStatsFlowsPeakTime=rsLfapStatsFlowsPeakTime, rsLfapStatsDropsInTxQueueWhenUp=rsLfapStatsDropsInTxQueueWhenUp, rsLfapCompliances=rsLfapCompliances, rsLfapStatsDropsInTxQueue=rsLfapStatsDropsInTxQueue, PYSNMP_MODULE_ID=rsLfapMIB, rsLfapServerStaticGroup=rsLfapServerStaticGroup, rsLfapStatsRxFUNs=rsLfapStatsRxFUNs, rsLfapStatsTcpConnectFails=rsLfapStatsTcpConnectFails, rsLfapNoServer=rsLfapNoServer, rsLfapStatsTxLostOctets=rsLfapStatsTxLostOctets, rsLfapStatsFlowRate=rsLfapStatsFlowRate, rsLfapStatsTxLostPackets=rsLfapStatsTxLostPackets, rsLfapServerRetryInterval=rsLfapServerRetryInterval, rsLfapMIBEventsPrefix=rsLfapMIBEventsPrefix, rsLfapStatsTcpConnects=rsLfapStatsTcpConnects, rsLfapAgentCfg=rsLfapAgentCfg)
