#
# PySNMP MIB module BSUSTATUS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BSUSTATUS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:41:41 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
bsu, = mibBuilder.importSymbols("ANIROOT-MIB", "bsu")
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
aniBsuWirelessPort, = mibBuilder.importSymbols("BSUWIRELESSIF-MIB", "aniBsuWirelessPort")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Counter64, NotificationType, ObjectIdentity, Unsigned32, IpAddress, Integer32, Bits, MibIdentifier, TimeTicks, ModuleIdentity, iso, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Counter64", "NotificationType", "ObjectIdentity", "Unsigned32", "IpAddress", "Integer32", "Bits", "MibIdentifier", "TimeTicks", "ModuleIdentity", "iso", "Gauge32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
aniBsuStatus = ModuleIdentity((1, 3, 6, 1, 4, 1, 4325, 3, 1))
if mibBuilder.loadTexts: aniBsuStatus.setLastUpdated('0209251510Z')
if mibBuilder.loadTexts: aniBsuStatus.setOrganization('Aperto Networks')
if mibBuilder.loadTexts: aniBsuStatus.setContactInfo(' Postal: Aperto Networks Inc 1637 S Main Street Milpitas, California 95035 Tel: +1 408 719 9977 ')
if mibBuilder.loadTexts: aniBsuStatus.setDescription('This group shows the Status Information for the BSU. The aniBsuStatusRadioTable shows the information for each radio that is connected to the BSU. ')
aniBsuStatusBootState = MibScalar((1, 3, 6, 1, 4, 1, 4325, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("starting", 1), ("dhcpc-req-sent", 2), ("configf-req-sent", 3), ("wait-for-tod", 4), ("wait-for-wss", 5), ("operational", 6), ("standby", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aniBsuStatusBootState.setStatus('current')
if mibBuilder.loadTexts: aniBsuStatusBootState.setDescription('Shows the current state of the BSU. ')
aniBsuStatusSysUpTime = MibScalar((1, 3, 6, 1, 4, 1, 4325, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 22))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aniBsuStatusSysUpTime.setStatus('current')
if mibBuilder.loadTexts: aniBsuStatusSysUpTime.setDescription("Time for which the system has been up and running, displayed as a string in 'days hours mins secs' format. ")
aniBsuStatusNumPortsConf = MibScalar((1, 3, 6, 1, 4, 1, 4325, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aniBsuStatusNumPortsConf.setStatus('current')
if mibBuilder.loadTexts: aniBsuStatusNumPortsConf.setDescription('The number of wireless ports configured. ')
aniBsuStatusNumPortsPresent = MibScalar((1, 3, 6, 1, 4, 1, 4325, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aniBsuStatusNumPortsPresent.setStatus('current')
if mibBuilder.loadTexts: aniBsuStatusNumPortsPresent.setDescription('The number of wireless ports actually available. ')
aniBsuStatusSuCounts = MibScalar((1, 3, 6, 1, 4, 1, 4325, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6144))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aniBsuStatusSuCounts.setStatus('current')
if mibBuilder.loadTexts: aniBsuStatusSuCounts.setDescription('The total SUs linked to the BSU. ')
aniBsuStatusCellName = MibScalar((1, 3, 6, 1, 4, 1, 4325, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aniBsuStatusCellName.setStatus('current')
if mibBuilder.loadTexts: aniBsuStatusCellName.setDescription('The name of the Cell this BSU belongs to. When BSU is in point to point mode, this parameter is not applicable and will display an empty string. Similarly for PacketWave 750, this parameter is not applicable and will display an empty string. ')
aniBsuStatusCellRadius = MibScalar((1, 3, 6, 1, 4, 1, 4325, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(10000, 20000, 30000, 40000, 50000, 60000, 70000, 80000, 90000, 100000))).clone(namedValues=NamedValues(("radius10km", 10000), ("radius20km", 20000), ("radius30km", 30000), ("radius40km", 40000), ("radius50km", 50000), ("radius60km", 60000), ("radius70km", 70000), ("radius80km", 80000), ("radius90km", 90000), ("radius100km", 100000)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aniBsuStatusCellRadius.setStatus('current')
if mibBuilder.loadTexts: aniBsuStatusCellRadius.setDescription('The Cell Radius in km. When BSU is in point to point mode, this object can be referred to as link distance. ')
aniBsuStatusSyncTimingRef = MibScalar((1, 3, 6, 1, 4, 1, 4325, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("internal", 1), ("external", 2), ("not-applicable", 3))).clone('internal')).setMaxAccess("readonly")
if mibBuilder.loadTexts: aniBsuStatusSyncTimingRef.setStatus('current')
if mibBuilder.loadTexts: aniBsuStatusSyncTimingRef.setDescription('This flag shows whether timing reference is internal (1) or external (2) for this BSU. When BSU is running in point to point mode, this object is not-applicable. Similarly for PacketWave 750, this object is not-applicable. ')
aniBsuStatusRipFlag = MibScalar((1, 3, 6, 1, 4, 1, 4325, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: aniBsuStatusRipFlag.setStatus('current')
if mibBuilder.loadTexts: aniBsuStatusRipFlag.setDescription('This flag shows whether RIP is enabled(1) or disabled(2) for this BSU. This is always disabled when BSU is in bridge mode. ')
aniBsuStatusMode = MibScalar((1, 3, 6, 1, 4, 1, 4325, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("router", 1), ("bridge", 2), ("vlan", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aniBsuStatusMode.setStatus('current')
if mibBuilder.loadTexts: aniBsuStatusMode.setDescription('The mode of the BSU. ')
aniBsuStatusRadioTable = MibTable((1, 3, 6, 1, 4, 1, 4325, 3, 1, 11), )
if mibBuilder.loadTexts: aniBsuStatusRadioTable.setStatus('current')
if mibBuilder.loadTexts: aniBsuStatusRadioTable.setDescription('This table shows the status of each radio that is connected to the BSU. The radio has to be operational for information to be displayed. The radio status is shown on a per wireless port basis. ')
aniBsuStatusRadioEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4325, 3, 1, 11, 1), ).setIndexNames((0, "BSUWIRELESSIF-MIB", "aniBsuWirelessPort"))
if mibBuilder.loadTexts: aniBsuStatusRadioEntry.setStatus('current')
if mibBuilder.loadTexts: aniBsuStatusRadioEntry.setDescription('An entry with objects that provide information for each radio connected to the BSU. ')
aniBsuStatusRadioSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 3, 1, 11, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aniBsuStatusRadioSerialNum.setStatus('current')
if mibBuilder.loadTexts: aniBsuStatusRadioSerialNum.setDescription('The serial number of the radio board. ')
aniBsuStatusRadioFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 3, 1, 11, 1, 2), DisplayString()).setUnits('MHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: aniBsuStatusRadioFrequency.setStatus('current')
if mibBuilder.loadTexts: aniBsuStatusRadioFrequency.setDescription('The radio frequency in MHz. ')
aniBsuStatusRadioBand = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 3, 1, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 10, 4, 5, 6, 7, 8, 11, 12))).clone(namedValues=NamedValues(("unii-5-3GHz", 1), ("unii-5-8GHz", 2), ("general-5-8GHz", 3), ("ism-5-8GHz", 10), ("mmds-2-6GHz", 4), ("general-2-6GHz", 5), ("general-3-5GHz", 6), ("etsi-3-5GHz-50", 7), ("etsi-3-5GHz-100", 8), ("fdd-3-5GHz", 11), ("general-5-3GHz", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aniBsuStatusRadioBand.setStatus('current')
if mibBuilder.loadTexts: aniBsuStatusRadioBand.setDescription('The radio frequency band. ')
aniBsuStatusRadioEepromRev = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 3, 1, 11, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aniBsuStatusRadioEepromRev.setStatus('current')
if mibBuilder.loadTexts: aniBsuStatusRadioEepromRev.setDescription('The radio EEPROM content revision number. ')
aniBsuStatusRadioVRFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 3, 1, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("operational", 1), ("not-operational", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aniBsuStatusRadioVRFlag.setStatus('current')
if mibBuilder.loadTexts: aniBsuStatusRadioVRFlag.setDescription('The status of the voltage regulator. ')
aniBsuStatusRadioSynth1Lock = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 3, 1, 11, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("not-locked", 1), ("locked", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aniBsuStatusRadioSynth1Lock.setStatus('current')
if mibBuilder.loadTexts: aniBsuStatusRadioSynth1Lock.setDescription('The status of the radio synthesizer 1 lock. ')
aniBsuStatusRadioSynth2Lock = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 3, 1, 11, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("not-locked", 1), ("locked", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aniBsuStatusRadioSynth2Lock.setStatus('current')
if mibBuilder.loadTexts: aniBsuStatusRadioSynth2Lock.setDescription('The status of the radio synthesizer 1 lock. ')
aniBsuStatusRadioTxGain = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 3, 1, 11, 1, 8), DisplayString()).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: aniBsuStatusRadioTxGain.setStatus('current')
if mibBuilder.loadTexts: aniBsuStatusRadioTxGain.setDescription('The radio transmit gain in dB. ')
aniBsuStatusRadioRxGain = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 3, 1, 11, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 45))).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: aniBsuStatusRadioRxGain.setStatus('current')
if mibBuilder.loadTexts: aniBsuStatusRadioRxGain.setDescription('The radio receive gain in dB. ')
aniBsuStatusRadioCurrentTxMaxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 3, 1, 11, 1, 10), DisplayString()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: aniBsuStatusRadioCurrentTxMaxPower.setStatus('current')
if mibBuilder.loadTexts: aniBsuStatusRadioCurrentTxMaxPower.setDescription('The radio current transmit maxium power in dBm ')
aniBsuStatusRadioIfCableLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 3, 1, 11, 1, 11), DisplayString()).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: aniBsuStatusRadioIfCableLoss.setStatus('current')
if mibBuilder.loadTexts: aniBsuStatusRadioIfCableLoss.setDescription('The calculated IF cable loss in dB ')
mibBuilder.exportSymbols("BSUSTATUS-MIB", aniBsuStatusRadioTable=aniBsuStatusRadioTable, aniBsuStatusSysUpTime=aniBsuStatusSysUpTime, aniBsuStatusRadioTxGain=aniBsuStatusRadioTxGain, aniBsuStatusRadioIfCableLoss=aniBsuStatusRadioIfCableLoss, aniBsuStatusSyncTimingRef=aniBsuStatusSyncTimingRef, aniBsuStatusRipFlag=aniBsuStatusRipFlag, aniBsuStatusMode=aniBsuStatusMode, aniBsuStatus=aniBsuStatus, aniBsuStatusRadioEntry=aniBsuStatusRadioEntry, aniBsuStatusRadioRxGain=aniBsuStatusRadioRxGain, aniBsuStatusRadioCurrentTxMaxPower=aniBsuStatusRadioCurrentTxMaxPower, aniBsuStatusRadioBand=aniBsuStatusRadioBand, aniBsuStatusSuCounts=aniBsuStatusSuCounts, aniBsuStatusRadioSynth2Lock=aniBsuStatusRadioSynth2Lock, aniBsuStatusBootState=aniBsuStatusBootState, aniBsuStatusRadioFrequency=aniBsuStatusRadioFrequency, aniBsuStatusRadioEepromRev=aniBsuStatusRadioEepromRev, aniBsuStatusRadioSynth1Lock=aniBsuStatusRadioSynth1Lock, PYSNMP_MODULE_ID=aniBsuStatus, aniBsuStatusNumPortsPresent=aniBsuStatusNumPortsPresent, aniBsuStatusNumPortsConf=aniBsuStatusNumPortsConf, aniBsuStatusRadioSerialNum=aniBsuStatusRadioSerialNum, aniBsuStatusRadioVRFlag=aniBsuStatusRadioVRFlag, aniBsuStatusCellName=aniBsuStatusCellName, aniBsuStatusCellRadius=aniBsuStatusCellRadius)
