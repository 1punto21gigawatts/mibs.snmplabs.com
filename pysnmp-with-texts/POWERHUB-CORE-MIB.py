#
# PySNMP MIB module POWERHUB-CORE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/POWERHUB-CORE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:41:37 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Unsigned32, MibIdentifier, NotificationType, IpAddress, Integer32, Gauge32, TimeTicks, Bits, enterprises, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Counter64, ModuleIdentity, Counter32, ObjectIdentity, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "MibIdentifier", "NotificationType", "IpAddress", "Integer32", "Gauge32", "TimeTicks", "Bits", "enterprises", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Counter64", "ModuleIdentity", "Counter32", "ObjectIdentity", "NotificationType")
PhysAddress, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "PhysAddress", "DisplayString", "TextualConvention")
fore = MibIdentifier((1, 3, 6, 1, 4, 1, 326))
systems = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2))
lsd = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 6))
lsdproducts = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 6, 1))
lsdcommon = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 6, 2))
powerhub4k6k7k = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1))
powerbits = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 2))
asn9000 = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 3))
alchassis = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 1))
alsystem = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 1))
albridge = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2))
almgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3))
class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

alSlotTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 1, 1), )
if mibBuilder.loadTexts: alSlotTable.setStatus('mandatory')
if mibBuilder.loadTexts: alSlotTable.setDescription('A table that contains information about each slot in the PowerHub 4k6k7k chassis.')
alSlotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 1, 1, 1), ).setIndexNames((0, "POWERHUB-CORE-MIB", "alSlotNumber"))
if mibBuilder.loadTexts: alSlotEntry.setStatus('mandatory')
if mibBuilder.loadTexts: alSlotEntry.setDescription('Information about a specific slot.')
alSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSlotNumber.setStatus('mandatory')
if mibBuilder.loadTexts: alSlotNumber.setDescription('The slot number for which the following information applies.')
alSlotCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30))).clone(namedValues=NamedValues(("ph7-universalethernet", 1), ("ph7-utp4x4", 2), ("ph7-utp4x6", 3), ("ph7-fddidualdas", 4), ("ph7-fddisingledas", 5), ("ph7-utp16x1", 6), ("ph7-utp13x1", 7), ("ph7-fddidualuniversal", 8), ("ph7-fddisingleuniversal", 9), ("ph7-fddiconcentrator", 10), ("ph7-cddiconcentrator", 11), ("ph4k6k-FL6x1", 12), ("ph4k6k-utp12x1", 13), ("ph4k6k-fddisingledas", 14), ("ph4k6k-ethernet100TX", 15), ("ph4k6k-ethernet100dualTX", 16), ("ph4k6k-ethernet100FXTX", 17), ("ph4k6k-ethernet100FXFX", 18), ("ph4k6k-ethernet100FX", 19), ("ph4k6k-ethernet24x1", 20), ("ph4k6k-ethernet12x1FL", 21), ("ph4k6k-ethernet6x1FL", 22), ("ph4-tenbt-utp", 23), ("ph7-powercell700", 24), ("ph7-6x1fastethernet", 25), ("ph7-10x1FL", 26), ("ph6-powercell600", 27), ("ph7-2x8fastethernet", 28), ("ph7-packetengine1", 29), ("ph7-packetengine2", 30)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSlotCardType.setStatus('mandatory')
if mibBuilder.loadTexts: alSlotCardType.setDescription('The card type for this slot.')
alSlotStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notequipped", 1), ("notpresent", 2), ("presentequipped", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSlotStatus.setStatus('mandatory')
if mibBuilder.loadTexts: alSlotStatus.setDescription('The status of the card in this slot.')
alSlotModel = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 1, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSlotModel.setStatus('mandatory')
if mibBuilder.loadTexts: alSlotModel.setDescription('The model number for this card.')
alSlotRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 1, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSlotRevision.setStatus('mandatory')
if mibBuilder.loadTexts: alSlotRevision.setDescription('The revision number for this card.')
alSlotIssue = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 1, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSlotIssue.setStatus('mandatory')
if mibBuilder.loadTexts: alSlotIssue.setDescription('The issue number for this slot.')
alSlotDeviation = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 1, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSlotDeviation.setStatus('mandatory')
if mibBuilder.loadTexts: alSlotDeviation.setDescription('The deviation for this slot.')
alSlotSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 1, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSlotSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: alSlotSerialNumber.setDescription('The serial number of this card this slot.')
alSlotPower5 = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSlotPower5.setStatus('mandatory')
if mibBuilder.loadTexts: alSlotPower5.setDescription('The number of milliamps. of current drawn by this slot at 5 Volts.')
alSlotPower12 = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 1, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSlotPower12.setStatus('mandatory')
if mibBuilder.loadTexts: alSlotPower12.setDescription('The number of milliamps. of current drawn by this slot at 12 Volts.')
alSlotPower33 = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 1, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSlotPower33.setStatus('mandatory')
if mibBuilder.loadTexts: alSlotPower33.setDescription('The number of milliamps. of current drawn by this slot at 3.3 Volts.')
alSlotPowerOther = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 1, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSlotPowerOther.setStatus('mandatory')
if mibBuilder.loadTexts: alSlotPowerOther.setDescription('The number of milliamps. of current drawn by this slot at OTHER voltage.')
alVportTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 1, 2), )
if mibBuilder.loadTexts: alVportTable.setStatus('mandatory')
if mibBuilder.loadTexts: alVportTable.setDescription('A table that contains information about each virtual port in the PowerHub 4k6k7k chassis. This table differs from the alSlotToVportTable mainly in how this table is indexed.')
alVportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 1, 2, 1), ).setIndexNames((0, "POWERHUB-CORE-MIB", "alVportNumber"))
if mibBuilder.loadTexts: alVportEntry.setStatus('mandatory')
if mibBuilder.loadTexts: alVportEntry.setDescription('Information about a specific virtual port.')
alVportNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alVportNumber.setStatus('mandatory')
if mibBuilder.loadTexts: alVportNumber.setDescription('The virtual port number for which the following information applies.')
alVportSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alVportSlotNumber.setStatus('mandatory')
if mibBuilder.loadTexts: alVportSlotNumber.setDescription('The slot number which holds the physical port that corresponds to the virtual port of interest.')
alVportPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alVportPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: alVportPortNumber.setDescription('The physical port number on the slot that corresponds to this virtual port number, identified by alVportNumber.')
alVportPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66))).clone(namedValues=NamedValues(("bnc", 1), ("fiber", 2), ("aui", 3), ("mauHdx", 4), ("mauFdx", 5), ("fb", 6), ("notstuffed", 7), ("fddiMMMM", 8), ("fddiMMSM", 9), ("fddiMMLC", 10), ("fddiMMUTP", 11), ("fddiMMEMPTY", 12), ("fddiSMMM", 13), ("fddiSMSM", 14), ("fddiSMLC", 15), ("fddiSMUTP", 16), ("fddiSMEMPTY", 17), ("fddiLCMM", 18), ("fddiLCSM", 19), ("fddiLCLC", 20), ("fddiLCUTP", 21), ("fddiLCEMPTY", 22), ("fddiUTPMM", 23), ("fddiUTPSM", 24), ("fddiUTPLC", 25), ("fddiUTPUTP", 26), ("fddiUTPEMPTY", 27), ("fddiEMPTYEMPTY", 28), ("fddiEMPTYMM", 29), ("fddiEMPTYSM", 30), ("fddiEMPTYLC", 31), ("fddiEMPTYUTP", 32), ("fx100base", 33), ("fasteth100fx", 34), ("fasteth100tx", 35), ("atm", 36), ("utp", 37), ("ds3-utp", 38), ("ds3-stp", 39), ("ds3-vmf", 40), ("ds3-lmf", 41), ("ds3-mf", 42), ("ds3-sf", 43), ("ds3-cx", 44), ("e3-utp", 45), ("e3-stp", 46), ("e3-vmf", 47), ("e3-lmf", 48), ("e3-mf", 49), ("e3-sf", 50), ("e3-cx", 51), ("oc3-utp", 52), ("oc3-stp", 53), ("oc3-vmf", 54), ("oc3-lmf", 55), ("oc3-mf", 56), ("oc3-sf", 57), ("oc3-cx", 58), ("oc12-utp", 59), ("oc12-stp", 60), ("oc12-vmf", 61), ("oc12-lmf", 62), ("oc12-mf", 63), ("oc12-sf", 64), ("oc12-cx", 65), ("fema-10-100", 66)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alVportPortType.setStatus('mandatory')
if mibBuilder.loadTexts: alVportPortType.setDescription('The port type for this virtual port.')
alVportStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("bad", 1), ("removed", 2), ("good", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alVportStatus.setStatus('mandatory')
if mibBuilder.loadTexts: alVportStatus.setDescription('The port status for this virtual port.')
alVportControllerType = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 1, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alVportControllerType.setStatus('mandatory')
if mibBuilder.loadTexts: alVportControllerType.setDescription('The controller type for this virtual port.')
alVportDataRateConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("speed10Mbps", 2), ("speed100Mbps", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alVportDataRateConfig.setStatus('mandatory')
if mibBuilder.loadTexts: alVportDataRateConfig.setDescription('The data rate requested for this virtual port.')
alVportOperModeConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 1), ("normal", 2), ("halfDuplex", 3), ("fullDuplex", 4), ("loopback", 5), ("fullLoopback", 6), ("decLoopback", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alVportOperModeConfig.setStatus('mandatory')
if mibBuilder.loadTexts: alVportOperModeConfig.setDescription('The operating mode requested for this virtual port.')
alVportAutoNegotiateConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("on", 2), ("off", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alVportAutoNegotiateConfig.setStatus('mandatory')
if mibBuilder.loadTexts: alVportAutoNegotiateConfig.setDescription('The auto-negotiation requested for this virtual port.')
alVportDataRateStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("undetermined", 1), ("speed10Mbps", 2), ("speed100Mbps", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alVportDataRateStatus.setStatus('mandatory')
if mibBuilder.loadTexts: alVportDataRateStatus.setDescription('The actual data rate for this virtual port.')
alVportOperModeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("undetermined", 1), ("halfDuplex", 2), ("fullDuplex", 3), ("loopback", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alVportOperModeStatus.setStatus('mandatory')
if mibBuilder.loadTexts: alVportOperModeStatus.setDescription('The actual operating mode for this virtual port.')
alSlotToVportTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 1, 3), )
if mibBuilder.loadTexts: alSlotToVportTable.setStatus('mandatory')
if mibBuilder.loadTexts: alSlotToVportTable.setDescription('A table that contains information about each port of each slot in the PowerHub 4k6k7k chassis. This table is established as a way to specify the information about a physical port located on a slot in the PowerHub 4k6k7k chassis. This table a slot and port number scheme. This table differs from uses two indices (the slot number and the port number) to identify a port.')
alSlotVportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 1, 3, 1), ).setIndexNames((0, "POWERHUB-CORE-MIB", "alSlotVportSlotNumber"), (0, "POWERHUB-CORE-MIB", "alSlotVportPortNumber"))
if mibBuilder.loadTexts: alSlotVportEntry.setStatus('mandatory')
if mibBuilder.loadTexts: alSlotVportEntry.setDescription('Information about a specific port in a specific slot. The slot number and the port number in that slot (numbered left to right in ascending order) identifies a specific port.')
alSlotVportSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSlotVportSlotNumber.setStatus('mandatory')
if mibBuilder.loadTexts: alSlotVportSlotNumber.setDescription('The slot number which holds the port of interest.')
alSlotVportPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 1, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSlotVportPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: alSlotVportPortNumber.setDescription('The physical port number on a slot which represents the port of interest. The physical port is numbered from left to right in a slot.')
alSlotVportNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 1, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSlotVportNumber.setStatus('mandatory')
if mibBuilder.loadTexts: alSlotVportNumber.setDescription('The virtual port number which corresponds to the port that is identified by the slot and port number. This scheme thereby relates each virtual port to a slot and physical port tuplet.')
alSlotVportPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66))).clone(namedValues=NamedValues(("bnc", 1), ("fiber", 2), ("aui", 3), ("mauHdx", 4), ("mauFdx", 5), ("fb", 6), ("notstuffed", 7), ("fddiMMMM", 8), ("fddiMMSM", 9), ("fddiMMLC", 10), ("fddiMMUTP", 11), ("fddiMMEMPTY", 12), ("fddiSMMM", 13), ("fddiSMSM", 14), ("fddiSMLC", 15), ("fddiSMUTP", 16), ("fddiSMEMPTY", 17), ("fddiLCMM", 18), ("fddiLCSM", 19), ("fddiLCLC", 20), ("fddiLCUTP", 21), ("fddiLCEMPTY", 22), ("fddiUTPMM", 23), ("fddiUTPSM", 24), ("fddiUTPLC", 25), ("fddiUTPUTP", 26), ("fddiUTPEMPTY", 27), ("fddiEMPTYEMPTY", 28), ("fddiEMPTYMM", 29), ("fddiEMPTYSM", 30), ("fddiEMPTYLC", 31), ("fddiEMPTYUTP", 32), ("fx100base", 33), ("fasteth100fx", 34), ("fasteth100tx", 35), ("atm", 36), ("utp", 37), ("ds3-utp", 38), ("ds3-stp", 39), ("ds3-vmf", 40), ("ds3-lmf", 41), ("ds3-mf", 42), ("ds3-sf", 43), ("ds3-cx", 44), ("e3-utp", 45), ("e3-stp", 46), ("e3-vmf", 47), ("e3-lmf", 48), ("e3-mf", 49), ("e3-sf", 50), ("e3-cx", 51), ("oc3-utp", 52), ("oc3-stp", 53), ("oc3-vmf", 54), ("oc3-lmf", 55), ("oc3-mf", 56), ("oc3-sf", 57), ("oc3-cx", 58), ("oc12-utp", 59), ("oc12-stp", 60), ("oc12-vmf", 61), ("oc12-lmf", 62), ("oc12-mf", 63), ("oc12-sf", 64), ("oc12-cx", 65), ("fema-10-100", 66)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSlotVportPortType.setStatus('mandatory')
if mibBuilder.loadTexts: alSlotVportPortType.setDescription('The port type for this port.')
alSlotVportStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 1, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSlotVportStatus.setStatus('mandatory')
if mibBuilder.loadTexts: alSlotVportStatus.setDescription('The status for this port.')
alSlotVportControllerType = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 1, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSlotVportControllerType.setStatus('mandatory')
if mibBuilder.loadTexts: alSlotVportControllerType.setDescription('The controller type for this port.')
alSlotVportDataRateConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("speed10Mbps", 2), ("speed100Mbps", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alSlotVportDataRateConfig.setStatus('mandatory')
if mibBuilder.loadTexts: alSlotVportDataRateConfig.setDescription('The data rate requested for this port. The actual data rate may be different from the requested data rate.')
alSlotVportOperModeConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 1), ("normal", 2), ("halfDuplex", 3), ("fullDuplex", 4), ("loopback", 5), ("fullLoopback", 6), ("decLoopback", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alSlotVportOperModeConfig.setStatus('mandatory')
if mibBuilder.loadTexts: alSlotVportOperModeConfig.setDescription('The operating mode requested for this port.')
alSlotVportAutoNegotiateConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("on", 2), ("off", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alSlotVportAutoNegotiateConfig.setStatus('mandatory')
if mibBuilder.loadTexts: alSlotVportAutoNegotiateConfig.setDescription('The auto-negotiation requested for this port.')
alSlotVportDataRateStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 1, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("undetermined", 1), ("speed10Mbps", 2), ("speed100Mbps", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSlotVportDataRateStatus.setStatus('mandatory')
if mibBuilder.loadTexts: alSlotVportDataRateStatus.setDescription('The actual data rate for this port.')
alSlotVportOperModeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 1, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("undetermined", 1), ("halfDuplex", 2), ("fullDuplex", 3), ("loopback", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSlotVportOperModeStatus.setStatus('mandatory')
if mibBuilder.loadTexts: alSlotVportOperModeStatus.setDescription('The actual operating mode for this port.')
alPSTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 1, 4), )
if mibBuilder.loadTexts: alPSTable.setStatus('mandatory')
if mibBuilder.loadTexts: alPSTable.setDescription('A table that contains information about each power supply in the PowerHub 4k6k7k chassis.')
alPSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 1, 4, 1), ).setIndexNames((0, "POWERHUB-CORE-MIB", "alPSNumber"))
if mibBuilder.loadTexts: alPSEntry.setStatus('mandatory')
if mibBuilder.loadTexts: alPSEntry.setDescription('Information about a specific power supply.')
alPSNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alPSNumber.setStatus('mandatory')
if mibBuilder.loadTexts: alPSNumber.setDescription('The power supply number')
alPSStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("powerGood", 1), ("powerPresentButBad", 2), ("powerNotPresent", 3), ("powerIntermittant", 4), ("powerUnknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alPSStatus.setStatus('mandatory')
if mibBuilder.loadTexts: alPSStatus.setDescription('The status of the power supply identified by the instance of alPSNumber.')
alCpuSlot = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alCpuSlot.setStatus('mandatory')
if mibBuilder.loadTexts: alCpuSlot.setDescription('The slot number in which the packet engine resides')
alSlotChassis = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("slots5", 1), ("slots10", 2), ("slots15", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSlotChassis.setStatus('mandatory')
if mibBuilder.loadTexts: alSlotChassis.setDescription('The maximum number of slots available in the powerhub. Presently it could either be a 5, 10, or 15 slot chassis. This object is used only for PH7000.')
powerFailure = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 1) + (0,1)).setObjects(("POWERHUB-CORE-MIB", "alPSNumber"))
if mibBuilder.loadTexts: powerFailure.setDescription('The powerFailure trap indicates that powerFailure occured in the particular powersupply unit.')
boardFailure = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 1) + (0,2)).setObjects(("POWERHUB-CORE-MIB", "alSlotNumber"))
if mibBuilder.loadTexts: boardFailure.setDescription('The boardFailure trap indicates that intelligent card failure occured in the particular slot.')
alChassisType = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 30, 31, 32, 33, 34))).clone(namedValues=NamedValues(("model3100", 1), ("model3200", 2), ("model3300", 3), ("model3500", 4), ("model3401", 5), ("model3402", 6), ("model3403", 7), ("model3404", 8), ("model3405", 9), ("model3406", 10), ("model3407", 11), ("model3410", 12), ("model3411", 13), ("model3412", 14), ("model3420", 15), ("model3421", 16), ("model3422", 17), ("model3423", 18), ("model3424", 19), ("model3425", 20), ("model5001", 21), ("model5002", 22), ("model5003", 23), ("model5004", 24), ("model5005", 25), ("model5006", 26), ("model7000", 30), ("model6000", 31), ("model4000", 32), ("model4100", 33), ("model8000", 34)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alChassisType.setStatus('mandatory')
if mibBuilder.loadTexts: alChassisType.setDescription('The model type of the PowerHub')
alMcpuRtVer = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alMcpuRtVer.setStatus('mandatory')
if mibBuilder.loadTexts: alMcpuRtVer.setDescription('Runtime software version of the motherboard CPU; it is an ASCII string that describes the version as well as the date and time the software was released from the factory.')
alMcpuPromVer = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alMcpuPromVer.setStatus('mandatory')
if mibBuilder.loadTexts: alMcpuPromVer.setDescription('PROM software version of the motherboard CPU; it is an ASCII string that describes the version as well as the date and time the software was released from the factory.')
alFcpuOneRtVer = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alFcpuOneRtVer.setStatus('mandatory')
if mibBuilder.loadTexts: alFcpuOneRtVer.setDescription('Runtime software version of F-bus CPU for the first FDDI board.')
alFcpuTwoRtVer = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alFcpuTwoRtVer.setStatus('mandatory')
if mibBuilder.loadTexts: alFcpuTwoRtVer.setDescription('Runtime software version of F-bus CPU for the second FDDI board.')
alFcpuOnePromVer = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alFcpuOnePromVer.setStatus('mandatory')
if mibBuilder.loadTexts: alFcpuOnePromVer.setDescription('PROM software version of F-bus CPU for the first FDDI board.')
alFcpuTwoPromVer = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alFcpuTwoPromVer.setStatus('mandatory')
if mibBuilder.loadTexts: alFcpuTwoPromVer.setDescription('PROM software version of F-bus CPU for the second FDDI board.')
alRcpuOneRtVer = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alRcpuOneRtVer.setStatus('mandatory')
if mibBuilder.loadTexts: alRcpuOneRtVer.setDescription('Runtime software version of Ring CPU for the first FDDI board.')
alRcpuTwoRtVer = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alRcpuTwoRtVer.setStatus('mandatory')
if mibBuilder.loadTexts: alRcpuTwoRtVer.setDescription('Runtime software version of Ring CPU for the second FDDI board.')
alRcpuOnePromVer = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alRcpuOnePromVer.setStatus('mandatory')
if mibBuilder.loadTexts: alRcpuOnePromVer.setDescription('PROM software version of Ring CPU for the first FDDI board.')
alRcpuTwoPromVer = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alRcpuTwoPromVer.setStatus('mandatory')
if mibBuilder.loadTexts: alRcpuTwoPromVer.setDescription('PROM software version of Ring CPU for the second FDDI board.')
alLastLoginFailureTimeDate = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alLastLoginFailureTimeDate.setStatus('mandatory')
if mibBuilder.loadTexts: alLastLoginFailureTimeDate.setDescription('Time and date string of the last login session that failed.')
alLastLoginFailureUserId = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alLastLoginFailureUserId.setStatus('mandatory')
if mibBuilder.loadTexts: alLastLoginFailureUserId.setDescription('User id of the last login session that failed.')
alLastLoginFailureReason = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalidLoginId", 1), ("passwordMismatch", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alLastLoginFailureReason.setStatus('mandatory')
if mibBuilder.loadTexts: alLastLoginFailureReason.setDescription('Reason code for the last login failure.')
alLastLoginSourceAddress = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alLastLoginSourceAddress.setStatus('mandatory')
if mibBuilder.loadTexts: alLastLoginSourceAddress.setDescription("Source address of the last login session that failed. The value would be either 'console' or ipaddress string of the telnet session.")
alLoginFailure = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 1) + (0,1)).setObjects(("POWERHUB-CORE-MIB", "alLastLoginFailureTimeDate"), ("POWERHUB-CORE-MIB", "alLastLoginFailureUserId"), ("POWERHUB-CORE-MIB", "alLastLoginFailureReason"), ("POWERHUB-CORE-MIB", "alLastLoginSourceAddress"))
if mibBuilder.loadTexts: alLoginFailure.setDescription('The login failure trap indicates that the login failed due to some error condition during the login process.')
alConsoleSyslogLevel = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("off", 1), ("logEmerg", 2), ("logAlert", 3), ("logCrit", 4), ("logErr", 5), ("logWarning", 6), ("logNotice", 7), ("logInfo", 8), ("logDebug", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alConsoleSyslogLevel.setStatus('mandatory')
if mibBuilder.loadTexts: alConsoleSyslogLevel.setDescription('Level which generates a logging messsage for console port commands (telnet, tip, etc.); no messages if set to off(1).')
alSnmpSyslogLevel = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("off", 1), ("logEmerg", 2), ("logAlert", 3), ("logCrit", 4), ("logErr", 5), ("logWarning", 6), ("logNotice", 7), ("logInfo", 8), ("logDebug", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alSnmpSyslogLevel.setStatus('mandatory')
if mibBuilder.loadTexts: alSnmpSyslogLevel.setDescription('Level which generates a logging messsage for snmp induced changes; no messages if set to off(1).')
alIlmiSyslogLevel = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("off", 1), ("logEmerg", 2), ("logAlert", 3), ("logCrit", 4), ("logErr", 5), ("logWarning", 6), ("logNotice", 7), ("logInfo", 8), ("logDebug", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alIlmiSyslogLevel.setStatus('mandatory')
if mibBuilder.loadTexts: alIlmiSyslogLevel.setDescription('Level which generates a logging messsage for ilmi configuration changes; no messages if set to off(1).')
alSyslogHostType = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notSet", 1), ("local", 2), ("ip", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alSyslogHostType.setStatus('mandatory')
if mibBuilder.loadTexts: alSyslogHostType.setDescription('Host which receives syslog messages: notSet(1) if no host is set or becomes unset; local(2) if messages go to console; ip(3) if messages go to a remote host')
alSyslogHostIp = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 1, 21), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alSyslogHostIp.setStatus('mandatory')
if mibBuilder.loadTexts: alSyslogHostIp.setDescription('IP address of remote host which receives syslog messages; must be set if alSyslogHost is set to ip.')
alSyslogHostIpFacility = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("daemon", 1), ("local0", 2), ("local1", 3), ("local2", 4), ("local3", 5), ("local4", 6), ("local5", 7), ("local6", 8), ("local7", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alSyslogHostIpFacility.setStatus('mandatory')
if mibBuilder.loadTexts: alSyslogHostIpFacility.setDescription('Syslog facility to be assigned to all syslog messages. Default is daemon(1).')
alBridgeTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 1), )
if mibBuilder.loadTexts: alBridgeTable.setStatus('mandatory')
if mibBuilder.loadTexts: alBridgeTable.setDescription('A table that contains information about unicast entries for which the bridge has forwarding and/or filtering information. This information is used by the transparent bridging function in determining how to propagate a received frame.')
alBridgeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 1, 1), ).setIndexNames((0, "POWERHUB-CORE-MIB", "alBridgeEntryAddress"))
if mibBuilder.loadTexts: alBridgeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: alBridgeEntry.setDescription('Information about a specific unicast MAC address for which the bridge has some forwarding and/or filtering information.')
alBridgeEntryAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 1, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alBridgeEntryAddress.setStatus('mandatory')
if mibBuilder.loadTexts: alBridgeEntryAddress.setDescription('The MAC address for which the bridge has forwarding and/or filtering information.')
alBridgeEntryPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alBridgeEntryPort.setStatus('mandatory')
if mibBuilder.loadTexts: alBridgeEntryPort.setDescription('The port number of the port on which a frame having a source address equal to the value of the corresponding instance of alBridgeEntryAddress has been seen.')
alBridgeEntryLink = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alBridgeEntryLink.setStatus('mandatory')
if mibBuilder.loadTexts: alBridgeEntryLink.setDescription('The link number on the port on which a frame having as ource address equal to the value of the corresponding instance of alBridgeEntryAddress has been seen. Only applies to the UTP port type.')
alBridgeEntryRule = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alBridgeEntryRule.setStatus('mandatory')
if mibBuilder.loadTexts: alBridgeEntryRule.setDescription('The rule number that is applied to packets that are forwarded to or from this address.')
alBridgeEntryFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alBridgeEntryFlags.setStatus('mandatory')
if mibBuilder.loadTexts: alBridgeEntryFlags.setDescription('The status of this entry.')
alBridgeTblClear = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alBridgeTblClear.setStatus('mandatory')
if mibBuilder.loadTexts: alBridgeTblClear.setDescription('When set, clears the Bridge table.')
alBrFlushCache = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alBrFlushCache.setStatus('mandatory')
if mibBuilder.loadTexts: alBrFlushCache.setDescription('When set, flushes the cache.')
alPortStatsTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 4), )
if mibBuilder.loadTexts: alPortStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: alPortStatsTable.setDescription('Per port statistics ')
portStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 4, 1), ).setIndexNames((0, "POWERHUB-CORE-MIB", "portStatsPort"))
if mibBuilder.loadTexts: portStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: portStatsEntry.setDescription('Per port statistics entries.')
portStatsPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPort.setStatus('mandatory')
if mibBuilder.loadTexts: portStatsPort.setDescription('Segment for which the statistics collected.')
portStatsPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPktsIn.setStatus('mandatory')
if mibBuilder.loadTexts: portStatsPktsIn.setDescription('Good packets received on the segment. Packets are listed regardless of packet type, or whether the packet is forwarded to another segment. Error packets are not listed.')
portStatsPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPktsOut.setStatus('mandatory')
if mibBuilder.loadTexts: portStatsPktsOut.setDescription('Packets transmitted on the segment. This statistic is incremented when a packet is scheduled for transmission, not when it is actually transmitted.')
portStatsOctetsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsOctetsIn.setStatus('mandatory')
if mibBuilder.loadTexts: portStatsOctetsIn.setDescription('Good octets received on the segment. This statistic includes 8 octets per packet to account for the preamble.')
portStatsOctetsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsOctetsOut.setStatus('mandatory')
if mibBuilder.loadTexts: portStatsOctetsOut.setDescription('Octets transmitted from the segment. This statistic is incremented when a packet is scheduled for transmission, not when it is actually transmitted. This statistic includes 8 octets per packet to account for the preamble.')
portStatsMulticastPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsMulticastPktsIn.setStatus('mandatory')
if mibBuilder.loadTexts: portStatsMulticastPktsIn.setDescription('Broadcast multicast packets received on the segment. This statistic is incremented for each good broadcast or multicast packet received on the segment.')
portStatsMulticastPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsMulticastPktsOut.setStatus('mandatory')
if mibBuilder.loadTexts: portStatsMulticastPktsOut.setDescription('Broadcast multicast packets transmitted from the segment. This statistic is incremented once for each broadcast or multicast packet scheduled for transmission on the segment.')
portStatsTableMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsTableMisses.setStatus('mandatory')
if mibBuilder.loadTexts: portStatsTableMisses.setDescription("Packets received that have unknown destination addresses. When address learning is enabled, this statistic is usually incremented only for the first packet transmitted to a workstation or other device connected to the segment. After a reply is received, the device's source address is added to the bridging table.")
portStatsRcvBuffErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsRcvBuffErrs.setStatus('mandatory')
if mibBuilder.loadTexts: portStatsRcvBuffErrs.setDescription('Incremented each time the hub detects an incoming packet but does not have a buffer in which to store the packet.')
portStatsXmitBuffErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsXmitBuffErrs.setStatus('mandatory')
if mibBuilder.loadTexts: portStatsXmitBuffErrs.setDescription('Incremented each time the hub attempts to forward a packet to a busy destination segment whose output buffers all are full.')
portStatsTotalCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsTotalCollisions.setStatus('mandatory')
if mibBuilder.loadTexts: portStatsTotalCollisions.setDescription('The total number of collisions detected on the segment while attempting to transmit and receive packets. For FDDI segments, this statistic is always 0.')
portStatsRcvCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsRcvCollisions.setStatus('mandatory')
if mibBuilder.loadTexts: portStatsRcvCollisions.setDescription('The number of collisions detected on the segment while listening for incoming packets. This statistic is only available for UTP segments. For segments on other module types, this statistic is always 0.')
portStatsXmitCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 4, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsXmitCollisions.setStatus('mandatory')
if mibBuilder.loadTexts: portStatsXmitCollisions.setDescription('The number of collisions detected on the segment while attempting to transmit packets. For FDDI segments, this statistic is always 0.')
portStatsXmitQLen = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 4, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsXmitQLen.setStatus('mandatory')
if mibBuilder.loadTexts: portStatsXmitQLen.setDescription(' The number of outgoing packets in the transmit queue. These packets have been scheduled for transmission, but have not been transmitted yet.')
portStatsPeakUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 4, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPeakUtilization.setStatus('mandatory')
if mibBuilder.loadTexts: portStatsPeakUtilization.setDescription("The segment's maximum utilization during a one-second interval since the statistics last were cleared. For Ethernet segments, the current utilization is calculated as follows: Once per second, the current one- second utilization is computed as (total # octets) x (8 bits/octets) / 10 Mb/s. The peak utilization is then set to the maximum of the current one-second utilization and the previous peak utilization. NOTE: Total # octets is all octets transmitted and received on the segment during the previous second, including 8 octets of preamble per packet. The Ethernet rate is 10Mb.")
portStatsCurrUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 4, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsCurrUtilization.setStatus('mandatory')
if mibBuilder.loadTexts: portStatsCurrUtilization.setDescription('For Ethernet segments, the current utilization is calculated as follows: Once per second, the current one-second utilization is computed as (total # octets) x (8 bits/octets) / 10 Mb/s. NOTE: Total # octets is all octets transmitted and received on the segment during the previous second, including 8 octets of preamble per packet. The Ethernet rate is 10Mb.')
portStatsLossOfCarrier = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 4, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsLossOfCarrier.setStatus('mandatory')
if mibBuilder.loadTexts: portStatsLossOfCarrier.setDescription('Indicates that an AUI segment has no cable attached, or the cable or transceiver is faulty.')
portStatsExcessRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 4, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsExcessRetries.setStatus('mandatory')
if mibBuilder.loadTexts: portStatsExcessRetries.setDescription('Incremented whenever all of 15 attempts to transmit a single packet cause collisions. This can happen in very busy networks, or when no cable is attached to an enabled BNC port.')
alBridgeStatsClear = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alBridgeStatsClear.setStatus('mandatory')
if mibBuilder.loadTexts: alBridgeStatsClear.setDescription('When set, clears the statistics for the bridge. When not set, value 0 is returned.')
alBridgePPControl = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("clear", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alBridgePPControl.setStatus('mandatory')
if mibBuilder.loadTexts: alBridgePPControl.setDescription('When set to 3 , disables the port to port collection of the stats; when set to 1, enables the port to port stats collection; when set to 2, clears the port to port stats.')
alPortToPortTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 7), )
if mibBuilder.loadTexts: alPortToPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: alPortToPortTable.setDescription('Statistics for port to port traffic.')
portToPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 7, 1), ).setIndexNames((0, "POWERHUB-CORE-MIB", "alPPSourcePort"), (0, "POWERHUB-CORE-MIB", "alPPDestinationPort"))
if mibBuilder.loadTexts: portToPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: portToPortEntry.setDescription('Statistics for port to port traffic')
alPPSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alPPSourcePort.setStatus('mandatory')
if mibBuilder.loadTexts: alPPSourcePort.setDescription('Source port number')
alPPDestinationPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alPPDestinationPort.setStatus('mandatory')
if mibBuilder.loadTexts: alPPDestinationPort.setDescription('Destination port number')
portToPortPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portToPortPackets.setStatus('mandatory')
if mibBuilder.loadTexts: portToPortPackets.setDescription('Port to port packets.')
portToPortOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 7, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portToPortOctets.setStatus('mandatory')
if mibBuilder.loadTexts: portToPortOctets.setDescription('Port to port octets.')
alPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 8), )
if mibBuilder.loadTexts: alPortConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: alPortConfigTable.setDescription('Per port configuration for configuring Source and Destination Rules etc.')
portConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 8, 1), ).setIndexNames((0, "POWERHUB-CORE-MIB", "portConfigPort"))
if mibBuilder.loadTexts: portConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: portConfigEntry.setDescription('Per port configuration.')
portConfigPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portConfigPort.setStatus('mandatory')
if mibBuilder.loadTexts: portConfigPort.setDescription('The port number for this table entry')
portConfigSrcRule = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 8, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portConfigSrcRule.setStatus('mandatory')
if mibBuilder.loadTexts: portConfigSrcRule.setDescription('Source Rule for the port number identified by the instance of portConfigPort')
portConfigDstRule = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 8, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portConfigDstRule.setStatus('mandatory')
if mibBuilder.loadTexts: portConfigDstRule.setDescription('Destination Rule for the port number identified by the instance of portConfigPort')
portConfigBlockLearnedEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portConfigBlockLearnedEntries.setStatus('mandatory')
if mibBuilder.loadTexts: portConfigBlockLearnedEntries.setDescription('When set to True (1), the port identified by the instance of portConfigPort will block the learned entries; if set to False (2) the port will not block the learned entries')
alBridgeIpBridging = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alBridgeIpBridging.setStatus('mandatory')
if mibBuilder.loadTexts: alBridgeIpBridging.setDescription('When set to enable(1), enables the IP bridging and if set to disable(2), disables the IP bridging.')
alBrTemplateTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 10), )
if mibBuilder.loadTexts: alBrTemplateTable.setStatus('mandatory')
if mibBuilder.loadTexts: alBrTemplateTable.setDescription('Per template information')
brTemplateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 10, 1), ).setIndexNames((0, "POWERHUB-CORE-MIB", "brTemplateNumber"))
if mibBuilder.loadTexts: brTemplateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: brTemplateEntry.setDescription('Template entry.')
brTemplateNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brTemplateNumber.setStatus('mandatory')
if mibBuilder.loadTexts: brTemplateNumber.setDescription('The number of the template with which it is identified.')
brTemplateOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 10, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brTemplateOffset.setStatus('mandatory')
if mibBuilder.loadTexts: brTemplateOffset.setDescription('A displacement, in octets, from the beginning of the packet. This must be a multiple of 4 in the range from 0 to 124 decimal. A value of -1 will delete the entry')
brTemplateMask = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 10, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brTemplateMask.setStatus('mandatory')
if mibBuilder.loadTexts: brTemplateMask.setDescription("A 4-byte (32-bit) number, normally specified as eight hexadecimal digits (00000000 - ffffffff) Description: The bytes in the mask are numbered from 0 to 3, starting with the high-order byte (big-endian format). Each byte of the mask is ANDed with the octet in the packet at displacement 'offset + i' to form a 4-byte 'masked value'.")
brTemplateComparator = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 10, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brTemplateComparator.setStatus('mandatory')
if mibBuilder.loadTexts: brTemplateComparator.setDescription("A 4-byte number, usually specified as eight hexadecimal digits (00000000 - ffffffff) Description: If the masked value defined above equals the comparator, then the template returns a value of 'true'; otherwise, it returns a value of 'false'.")
brTemplateOption = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 10, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brTemplateOption.setStatus('mandatory')
if mibBuilder.loadTexts: brTemplateOption.setDescription('Setting this value to 0 assume all 32 bits mask and comparator specified; value 1 assume half-word (2 bytes) qunatity; and value 2 assume single-byte quantity.')
alBrRuleTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 11), )
if mibBuilder.loadTexts: alBrRuleTable.setStatus('mandatory')
if mibBuilder.loadTexts: alBrRuleTable.setDescription('Per rule information')
brRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 11, 1), ).setIndexNames((0, "POWERHUB-CORE-MIB", "brRuleNumber"))
if mibBuilder.loadTexts: brRuleEntry.setStatus('mandatory')
if mibBuilder.loadTexts: brRuleEntry.setDescription('Rule entry.')
brRuleNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brRuleNumber.setStatus('mandatory')
if mibBuilder.loadTexts: brRuleNumber.setDescription('A rule number in the range 101-162. You can define up to 62 rules.')
brRuleStatement = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 11, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brRuleStatement.setStatus('mandatory')
if mibBuilder.loadTexts: brRuleStatement.setDescription('Specifies the templates and the logical operators that make up the rule. Rule statements consist of rule numbers joined by the following logical operators: Operator Means... & AND | OR ~ NOT Rule statements are interpreted from left to right. Use parentheses to group expressions. You can use up to eight sets of parentheses to group template numbers and logical operators. The total maximum number of characters, including blanks, is 64.')
alBrRuleToNodeTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 12), )
if mibBuilder.loadTexts: alBrRuleToNodeTable.setStatus('mandatory')
if mibBuilder.loadTexts: alBrRuleToNodeTable.setDescription('Rules to specific node.')
alBrRuleToNodeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 12, 1), ).setIndexNames((0, "POWERHUB-CORE-MIB", "brRuleToNodePort"))
if mibBuilder.loadTexts: alBrRuleToNodeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: alBrRuleToNodeEntry.setDescription('Rule node entry.')
brRuleToNodePort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 12, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brRuleToNodePort.setStatus('mandatory')
if mibBuilder.loadTexts: brRuleToNodePort.setDescription('The number of the port for which this rule applies')
brRuleToNodeMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 12, 1, 2), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brRuleToNodeMacAddr.setStatus('mandatory')
if mibBuilder.loadTexts: brRuleToNodeMacAddr.setDescription('The source MAC address')
brRuleToNodeRule = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 12, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brRuleToNodeRule.setStatus('mandatory')
if mibBuilder.loadTexts: brRuleToNodeRule.setDescription('The rule number that applies to this entry.')
alBrGroupTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 13), )
if mibBuilder.loadTexts: alBrGroupTable.setStatus('mandatory')
if mibBuilder.loadTexts: alBrGroupTable.setDescription('Bridge group table.')
alBrGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 13, 1), ).setIndexNames((0, "POWERHUB-CORE-MIB", "brGroupNumber"))
if mibBuilder.loadTexts: alBrGroupEntry.setStatus('mandatory')
if mibBuilder.loadTexts: alBrGroupEntry.setDescription('Bridge group entry.')
brGroupNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 13, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brGroupNumber.setStatus('mandatory')
if mibBuilder.loadTexts: brGroupNumber.setDescription('The group number by which the group is identified with.')
brGroupPortsMask = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 13, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brGroupPortsMask.setStatus('mandatory')
if mibBuilder.loadTexts: brGroupPortsMask.setDescription('The ports associated with the group number identified by the instance of brGroupNumber. The mask is ascii segments separated by commas. A value of -1 would invalidate the appropriate group.')
brGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 13, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brGroupName.setStatus('mandatory')
if mibBuilder.loadTexts: brGroupName.setDescription('The name of the group for which this entry applies')
alBridgeSTPControl = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alBridgeSTPControl.setStatus('mandatory')
if mibBuilder.loadTexts: alBridgeSTPControl.setDescription('When set to 2 , disables the spanning tree. set to 1, enables the spanning tree.')
alPortStateTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 15), )
if mibBuilder.loadTexts: alPortStateTable.setStatus('mandatory')
if mibBuilder.loadTexts: alPortStateTable.setDescription('Per port state information about spanning tree, dignostics and management.')
portStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 15, 1), ).setIndexNames((0, "POWERHUB-CORE-MIB", "portStatePort"))
if mibBuilder.loadTexts: portStateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: portStateEntry.setDescription('Port state entry.')
portStatePort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 15, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatePort.setStatus('mandatory')
if mibBuilder.loadTexts: portStatePort.setDescription('The port number for this table entry')
portStateDiag = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("good", 1), ("bad", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStateDiag.setStatus('mandatory')
if mibBuilder.loadTexts: portStateDiag.setDescription('The diagnostics state of the port')
portStateMgmt = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStateMgmt.setStatus('mandatory')
if mibBuilder.loadTexts: portStateMgmt.setDescription('The management state of the port')
portStateStp = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 15, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStateStp.setStatus('mandatory')
if mibBuilder.loadTexts: portStateStp.setDescription('The spanning tree state of the port. ')
portStatePortName = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 15, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatePortName.setStatus('mandatory')
if mibBuilder.loadTexts: portStatePortName.setDescription('The name of this port')
alAutoPortStateTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 1), )
if mibBuilder.loadTexts: alAutoPortStateTable.setStatus('mandatory')
if mibBuilder.loadTexts: alAutoPortStateTable.setDescription('auto port stat table')
autoportStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 1, 1), ).setIndexNames((0, "POWERHUB-CORE-MIB", "autoPortStatePort"))
if mibBuilder.loadTexts: autoportStateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: autoportStateEntry.setDescription('auto port stat entry.')
autoPortStatePort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: autoPortStatePort.setStatus('mandatory')
if mibBuilder.loadTexts: autoPortStatePort.setDescription(' The port number for this table entry')
autoPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoPortState.setStatus('mandatory')
if mibBuilder.loadTexts: autoPortState.setDescription('Whether the auto port state detection is turned on or not.')
autoPortStateThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoPortStateThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: autoPortStateThreshold.setDescription('Corresponding to the threshold parameter of the autoportstate command.')
alLinkStatsCollect = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alLinkStatsCollect.setStatus('mandatory')
if mibBuilder.loadTexts: alLinkStatsCollect.setDescription('When set to enable(1), per link stats collection is enabled; when set to disable(0), the per link stats are not collected.')
alLinkStatsClear = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alLinkStatsClear.setStatus('mandatory')
if mibBuilder.loadTexts: alLinkStatsClear.setDescription('When set, clears the link stats; otherwise value 0 is returned.')
alLinkStatsTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 4), )
if mibBuilder.loadTexts: alLinkStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: alLinkStatsTable.setDescription('Per link stats table')
linkStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 4, 1), ).setMaxAccess("readwrite").setIndexNames((0, "POWERHUB-CORE-MIB", "linkStatsPort"), (0, "POWERHUB-CORE-MIB", "linkStatsLink"))
if mibBuilder.loadTexts: linkStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: linkStatsEntry.setDescription('link stats entry.')
linkStatsPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkStatsPort.setStatus('mandatory')
if mibBuilder.loadTexts: linkStatsPort.setDescription('Port Number')
linkStatsLink = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkStatsLink.setStatus('mandatory')
if mibBuilder.loadTexts: linkStatsLink.setDescription('Link Number')
linkStatsPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkStatsPktsIn.setStatus('mandatory')
if mibBuilder.loadTexts: linkStatsPktsIn.setDescription('Pkts In - corresponds to pi')
linkStatsOctetsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkStatsOctetsIn.setStatus('mandatory')
if mibBuilder.loadTexts: linkStatsOctetsIn.setDescription('Octets In - corresponds to oi')
linkStatsBMCastPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkStatsBMCastPktsIn.setStatus('mandatory')
if mibBuilder.loadTexts: linkStatsBMCastPktsIn.setDescription('Bmcast Pks In - corresponds to bpi')
linkStatsGiantPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkStatsGiantPkts.setStatus('mandatory')
if mibBuilder.loadTexts: linkStatsGiantPkts.setDescription('Giant Pkts - corresponds to gp')
linkStatsFrameErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkStatsFrameErrs.setStatus('mandatory')
if mibBuilder.loadTexts: linkStatsFrameErrs.setDescription('Frame Errors - corresponds to fa')
linkStatsFCSErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkStatsFCSErrs.setStatus('mandatory')
if mibBuilder.loadTexts: linkStatsFCSErrs.setDescription('FCS Errors corresponds to fcs')
linkStatsCodingErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkStatsCodingErrors.setStatus('mandatory')
if mibBuilder.loadTexts: linkStatsCodingErrors.setDescription(' This Counter is incremented when the receiver (RX) port detects an invalid symbol in the incoming code sent by the TX port using symbol mode.')
linkStatsDataRateMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkStatsDataRateMismatch.setStatus('mandatory')
if mibBuilder.loadTexts: linkStatsDataRateMismatch.setDescription(' This counter is incremented by one for each frame received on this port that meets all of the following conditions: 1) The Collision Event signal is not asserted 2) The Activity duration is greater than ValidPacketMinTime 3) The frequency (data rate) is detectably mismatched from the local transmit frequency')
linkStatsJabbers = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkStatsJabbers.setStatus('mandatory')
if mibBuilder.loadTexts: linkStatsJabbers.setDescription(' This Counter is incremented for each CarrierEvent on this port whose ActivityDuration is greater than the MAU Jabber Lockup Protection timer ')
linkStatsShortEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkStatsShortEvents.setStatus('mandatory')
if mibBuilder.loadTexts: linkStatsShortEvents.setDescription(' This counter is incremented for each CarrierEvent on this port with ActivityDuration less than ShortEventMaxTime.')
linkStatsRunts = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 4, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkStatsRunts.setStatus('mandatory')
if mibBuilder.loadTexts: linkStatsRunts.setDescription(' An event whose length is greater than 74 bit times but less than 82 bit times shall increment either the shortEvents counter or the runts counter but not both')
linkStatsPortCollision = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 4, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkStatsPortCollision.setStatus('mandatory')
if mibBuilder.loadTexts: linkStatsPortCollision.setDescription(' This counter is incremented for any CarrierEvent signal on any port for which the CollisionEvent signal on this port is also asserted.')
linkStatsLateCollision = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 4, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkStatsLateCollision.setStatus('mandatory')
if mibBuilder.loadTexts: linkStatsLateCollision.setDescription(' This counter is incremented for each CarrierEvent on this port in which the CollIn(X) variable transitions to the value SQE while the ActivityDuration is greater than the LAteEventThreshold.')
linkStatsAutoPartition = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 4, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkStatsAutoPartition.setStatus('mandatory')
if mibBuilder.loadTexts: linkStatsAutoPartition.setDescription(' This counter is incremented each time the repeater has automatically partitioned this port')
linkStatsIsolates = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 4, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkStatsIsolates.setStatus('mandatory')
if mibBuilder.loadTexts: linkStatsIsolates.setDescription('This counter is incremented whenever the port detects two consecutive carrier integrity false carriers.')
linkStatsSaFieldChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 4, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkStatsSaFieldChanges.setStatus('mandatory')
if mibBuilder.loadTexts: linkStatsSaFieldChanges.setDescription(' This counter is incremented for each time that the rptrAddrTrackLastSourceAddress attribute for this port has changed.')
linkStatsLastSa = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 4, 1, 19), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkStatsLastSa.setStatus('mandatory')
if mibBuilder.loadTexts: linkStatsLastSa.setDescription(' This object is the SourceAddress of the last readable frame received by this port.')
alLinkControlTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 5), )
if mibBuilder.loadTexts: alLinkControlTable.setStatus('mandatory')
if mibBuilder.loadTexts: alLinkControlTable.setDescription('Per link stats table')
linkControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 5, 1), ).setMaxAccess("readwrite").setIndexNames((0, "POWERHUB-CORE-MIB", "linkControlPort"), (0, "POWERHUB-CORE-MIB", "linkControlLink"))
if mibBuilder.loadTexts: linkControlEntry.setStatus('mandatory')
if mibBuilder.loadTexts: linkControlEntry.setDescription('link control entry.')
linkControlPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkControlPort.setStatus('mandatory')
if mibBuilder.loadTexts: linkControlPort.setDescription('Port number for this entry.')
linkControlLink = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkControlLink.setStatus('mandatory')
if mibBuilder.loadTexts: linkControlLink.setDescription('Link number for this entry.')
linkControlEnlState = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkControlEnlState.setStatus('mandatory')
if mibBuilder.loadTexts: linkControlEnlState.setDescription('Setting the value of this object to Enable (1) will enable the link and setting to Disable(2) will disable the link.')
linkControlLinkTest = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkControlLinkTest.setStatus('mandatory')
if mibBuilder.loadTexts: linkControlLinkTest.setDescription('Link test status for the link; corresponds to lt option of the lkd command.')
linkControlPartition = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkControlPartition.setStatus('mandatory')
if mibBuilder.loadTexts: linkControlPartition.setDescription('Partitioning state of the link')
linkControlPolarity = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkControlPolarity.setStatus('mandatory')
if mibBuilder.loadTexts: linkControlPolarity.setDescription('Polarity of the link')
alPortLinkTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 6), )
if mibBuilder.loadTexts: alPortLinkTable.setStatus('mandatory')
if mibBuilder.loadTexts: alPortLinkTable.setDescription('Per port link type ')
portLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 6, 1), ).setIndexNames((0, "POWERHUB-CORE-MIB", "portLinkPort"))
if mibBuilder.loadTexts: portLinkEntry.setStatus('mandatory')
if mibBuilder.loadTexts: portLinkEntry.setDescription('port link entry.')
portLinkPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portLinkPort.setStatus('mandatory')
if mibBuilder.loadTexts: portLinkPort.setDescription('The port number for which the port type is to be set')
portLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("aui", 1), ("bnc", 2), ("bnct", 3), ("utp", 4), ("fiber", 5), ("unknown", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portLinkType.setStatus('mandatory')
if mibBuilder.loadTexts: portLinkType.setDescription('The type of port')
alFiberStatsTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 7), )
if mibBuilder.loadTexts: alFiberStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: alFiberStatsTable.setDescription('Per port fiber stats and Fiber Security')
fiberStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 7, 1), ).setIndexNames((0, "POWERHUB-CORE-MIB", "fiberStatsPort"))
if mibBuilder.loadTexts: fiberStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: fiberStatsEntry.setDescription('fiber stat entry.')
fiberStatsPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fiberStatsPort.setStatus('mandatory')
if mibBuilder.loadTexts: fiberStatsPort.setDescription('The fiber port for which the stats are requested or the Fiber violation is set ')
fiberAuiStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fiberAuiStatus.setStatus('mandatory')
if mibBuilder.loadTexts: fiberAuiStatus.setDescription('The fiber aui status for the port that is specified by the instance of fiberStatsPort')
fiberSecurityViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("detect", 1), ("ignore", 2), ("clear", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fiberSecurityViolation.setStatus('mandatory')
if mibBuilder.loadTexts: fiberSecurityViolation.setDescription('The fiber port for which the stats are requested or the Fiber violation is set ')
alPortMonitorClose = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alPortMonitorClose.setStatus('mandatory')
if mibBuilder.loadTexts: alPortMonitorClose.setDescription('Setting the value to close(1), will turn the port monitoring off.')
alPortMonitorTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 9), )
if mibBuilder.loadTexts: alPortMonitorTable.setStatus('mandatory')
if mibBuilder.loadTexts: alPortMonitorTable.setDescription('port monitor table.')
portMonitorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 9, 1), ).setIndexNames((0, "POWERHUB-CORE-MIB", "portMonSrcPort"), (0, "POWERHUB-CORE-MIB", "portMonDstPort"))
if mibBuilder.loadTexts: portMonitorEntry.setStatus('mandatory')
if mibBuilder.loadTexts: portMonitorEntry.setDescription('port monitor entry.')
portMonSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portMonSrcPort.setStatus('mandatory')
if mibBuilder.loadTexts: portMonSrcPort.setDescription('The traffic to/from this port will be monitored on the portMonDstPort')
portMonDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 9, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portMonDstPort.setStatus('mandatory')
if mibBuilder.loadTexts: portMonDstPort.setDescription('The traffic to/from portMonSrcPort will be monitored on this port ')
portMonTrafficType = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("forwarded", 1), ("incoming", 2), ("forwardedandincoming", 3), ("generated", 4), ("forwardedandgenerated", 5), ("incomingandgenerated", 6), ("all", 7), ("stopmonitoring", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portMonTrafficType.setStatus('mandatory')
if mibBuilder.loadTexts: portMonTrafficType.setDescription('Setting this value to 1, will let the port monitor monitor forwarded traffic; setting to 8 means the forwarded traffic will not be monitored.')
alReboot = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 10), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: alReboot.setStatus('mandatory')
if mibBuilder.loadTexts: alReboot.setDescription('Setting the value to Reboot(1), will reboot the PowerHub.')
alPortMonitorViewTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 11), )
if mibBuilder.loadTexts: alPortMonitorViewTable.setStatus('mandatory')
if mibBuilder.loadTexts: alPortMonitorViewTable.setDescription('port monitor view table.')
portMonitorViewEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 11, 1), ).setIndexNames((0, "POWERHUB-CORE-MIB", "portMonViewSrcPort"), (0, "POWERHUB-CORE-MIB", "portMonViewDstPort"))
if mibBuilder.loadTexts: portMonitorViewEntry.setStatus('mandatory')
if mibBuilder.loadTexts: portMonitorViewEntry.setDescription('port monitor view entry.')
portMonViewSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portMonViewSrcPort.setStatus('mandatory')
if mibBuilder.loadTexts: portMonViewSrcPort.setDescription('The traffic from this port to the port designated by portMonViewDstPort will be monitored on portMonViewMonitorPort.')
portMonViewDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 11, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portMonViewDstPort.setStatus('mandatory')
if mibBuilder.loadTexts: portMonViewDstPort.setDescription('The traffic to this port from the port designated by portMonViewSrcPort will be monitored on portMonViewMonitorPort.')
portMonViewMonitorPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 11, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portMonViewMonitorPort.setStatus('mandatory')
if mibBuilder.loadTexts: portMonViewMonitorPort.setDescription('The traffic to portMonViewDstPort from the port designated by portMonViewSrcPort will be monitored on portMonViewMonitorPort. The mask is ascii, segments separated by commas.')
alCfgLocalMediaScope = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("floppy", 1), ("flash", 2), ("floppyAndFlash", 3), ("none", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alCfgLocalMediaScope.setStatus('mandatory')
if mibBuilder.loadTexts: alCfgLocalMediaScope.setDescription('This object display the types of local media currently available on the PH for storing files. The PH4000 and PH6000 do not support floppy whereas the PH3000 and PH5000 do not support flash. The flash is optional on PH6000 & PH7000. All models do support tftpHost save options. Depending on the value of this object, the user can specify the appropriate filename and the media type in other objects for doing the save operation.')
alCfgMediaName = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("floppy", 1), ("flash", 2), ("tftpHost", 3), ("none", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alCfgMediaName.setStatus('mandatory')
if mibBuilder.loadTexts: alCfgMediaName.setDescription("This object specify the medium name to which the the powerhub will save the configurations. The value 'none' is returned when user have not set the valid save medium. Save operation cannot be performed when value is set to 'none'.")
alCfgTftpHostAddr = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 14), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alCfgTftpHostAddr.setStatus('mandatory')
if mibBuilder.loadTexts: alCfgTftpHostAddr.setDescription('This object specify the IP address of the tftp host system to which the configs get saved when the object alCfgMediaName is set with value tftpHost(3).')
alCfgFileName = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 15), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alCfgFileName.setStatus('mandatory')
if mibBuilder.loadTexts: alCfgFileName.setDescription('This object specify the configuration filename to which the PH will save the configuration. Depending on the medium (floppy, flash, or tftpHost) in which the saving will be done, the filename have to be set correctly. For example, the filename for floppy and flash medium cannot exceed 8 characters. The filnames can be appended with the optional dot character followed by 3 character extension. The filenames for tftp host should have been pre-created on the host and it should be writable by the PH. All tftp file access restrictions apply.')
alCfgSaveOp = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alCfgSaveOp.setStatus('mandatory')
if mibBuilder.loadTexts: alCfgSaveOp.setDescription("Save config operation can be performed only when this object is set to value '1'. This field returns a dummy value 100 for get operations.")
mibBuilder.exportSymbols("POWERHUB-CORE-MIB", asn9000=asn9000, alBridgeTable=alBridgeTable, alSlotToVportTable=alSlotToVportTable, alMcpuPromVer=alMcpuPromVer, alPortConfigTable=alPortConfigTable, portStatsXmitBuffErrs=portStatsXmitBuffErrs, alSlotDeviation=alSlotDeviation, alLastLoginFailureUserId=alLastLoginFailureUserId, alBridgePPControl=alBridgePPControl, autoPortStatePort=autoPortStatePort, linkStatsGiantPkts=linkStatsGiantPkts, alSlotVportNumber=alSlotVportNumber, linkStatsIsolates=linkStatsIsolates, alSyslogHostIpFacility=alSyslogHostIpFacility, fiberStatsEntry=fiberStatsEntry, portConfigEntry=portConfigEntry, linkStatsFCSErrs=linkStatsFCSErrs, alCfgSaveOp=alCfgSaveOp, portLinkType=portLinkType, portStateStp=portStateStp, alFcpuTwoPromVer=alFcpuTwoPromVer, portMonViewDstPort=portMonViewDstPort, alSlotVportAutoNegotiateConfig=alSlotVportAutoNegotiateConfig, linkControlLink=linkControlLink, alBrTemplateTable=alBrTemplateTable, portStatsTableMisses=portStatsTableMisses, linkStatsLastSa=linkStatsLastSa, linkControlEnlState=linkControlEnlState, lsd=lsd, alSlotRevision=alSlotRevision, alVportSlotNumber=alVportSlotNumber, alVportNumber=alVportNumber, portConfigDstRule=portConfigDstRule, alBrGroupEntry=alBrGroupEntry, portLinkPort=portLinkPort, alPSNumber=alPSNumber, linkStatsPort=linkStatsPort, brGroupName=brGroupName, portMonDstPort=portMonDstPort, alBridgeEntryPort=alBridgeEntryPort, brTemplateOffset=brTemplateOffset, alSlotVportEntry=alSlotVportEntry, portStatsPktsOut=portStatsPktsOut, linkStatsFrameErrs=linkStatsFrameErrs, fiberAuiStatus=fiberAuiStatus, alPortMonitorViewTable=alPortMonitorViewTable, portStatsMulticastPktsIn=portStatsMulticastPktsIn, alSlotVportPortType=alSlotVportPortType, portToPortPackets=portToPortPackets, fiberStatsPort=fiberStatsPort, alBridgeEntryRule=alBridgeEntryRule, portStatsLossOfCarrier=portStatsLossOfCarrier, almgmt=almgmt, linkStatsCodingErrors=linkStatsCodingErrors, linkStatsOctetsIn=linkStatsOctetsIn, portStatsPeakUtilization=portStatsPeakUtilization, brRuleToNodeMacAddr=brRuleToNodeMacAddr, brRuleToNodeRule=brRuleToNodeRule, alBridgeSTPControl=alBridgeSTPControl, alLastLoginSourceAddress=alLastLoginSourceAddress, alSyslogHostType=alSyslogHostType, linkControlLinkTest=linkControlLinkTest, lsdcommon=lsdcommon, alIlmiSyslogLevel=alIlmiSyslogLevel, brTemplateEntry=brTemplateEntry, portConfigSrcRule=portConfigSrcRule, alPortMonitorTable=alPortMonitorTable, alFcpuOnePromVer=alFcpuOnePromVer, alSlotVportSlotNumber=alSlotVportSlotNumber, alVportControllerType=alVportControllerType, portStatsExcessRetries=portStatsExcessRetries, alCfgMediaName=alCfgMediaName, alBridgeEntryFlags=alBridgeEntryFlags, alBridgeStatsClear=alBridgeStatsClear, portMonitorEntry=portMonitorEntry, alReboot=alReboot, portStatePortName=portStatePortName, portMonitorViewEntry=portMonitorViewEntry, brRuleToNodePort=brRuleToNodePort, alRcpuOnePromVer=alRcpuOnePromVer, portMonSrcPort=portMonSrcPort, alVportDataRateConfig=alVportDataRateConfig, portStateDiag=portStateDiag, linkStatsDataRateMismatch=linkStatsDataRateMismatch, portToPortOctets=portToPortOctets, alPortMonitorClose=alPortMonitorClose, portMonViewMonitorPort=portMonViewMonitorPort, alSlotVportDataRateConfig=alSlotVportDataRateConfig, alCfgTftpHostAddr=alCfgTftpHostAddr, alVportAutoNegotiateConfig=alVportAutoNegotiateConfig, alLoginFailure=alLoginFailure, portMonViewSrcPort=portMonViewSrcPort, portLinkEntry=portLinkEntry, alLinkStatsCollect=alLinkStatsCollect, brGroupPortsMask=brGroupPortsMask, alPSEntry=alPSEntry, alCfgLocalMediaScope=alCfgLocalMediaScope, alSlotIssue=alSlotIssue, alSlotVportPortNumber=alSlotVportPortNumber, alchassis=alchassis, portStatsMulticastPktsOut=portStatsMulticastPktsOut, brTemplateOption=brTemplateOption, fore=fore, alSlotVportStatus=alSlotVportStatus, portStatsXmitCollisions=portStatsXmitCollisions, alVportOperModeConfig=alVportOperModeConfig, portStatsRcvBuffErrs=portStatsRcvBuffErrs, alBridgeEntry=alBridgeEntry, alBrRuleToNodeTable=alBrRuleToNodeTable, alSlotEntry=alSlotEntry, alAutoPortStateTable=alAutoPortStateTable, portStatsPktsIn=portStatsPktsIn, alLastLoginFailureTimeDate=alLastLoginFailureTimeDate, alVportDataRateStatus=alVportDataRateStatus, brRuleNumber=brRuleNumber, alBrRuleToNodeEntry=alBrRuleToNodeEntry, powerbits=powerbits, powerFailure=powerFailure, alLinkControlTable=alLinkControlTable, linkStatsRunts=linkStatsRunts, alPortLinkTable=alPortLinkTable, alSlotTable=alSlotTable, portStatsRcvCollisions=portStatsRcvCollisions, linkControlPort=linkControlPort, portStatsEntry=portStatsEntry, alVportEntry=alVportEntry, alVportPortNumber=alVportPortNumber, alPortStatsTable=alPortStatsTable, alConsoleSyslogLevel=alConsoleSyslogLevel, lsdproducts=lsdproducts, portStatsOctetsOut=portStatsOctetsOut, alChassisType=alChassisType, alVportTable=alVportTable, alRcpuTwoRtVer=alRcpuTwoRtVer, fiberSecurityViolation=fiberSecurityViolation, alSlotPower33=alSlotPower33, portConfigBlockLearnedEntries=portConfigBlockLearnedEntries, alFcpuOneRtVer=alFcpuOneRtVer, linkStatsPortCollision=linkStatsPortCollision, linkStatsShortEvents=linkStatsShortEvents, alSlotStatus=alSlotStatus, alSlotPowerOther=alSlotPowerOther, albridge=albridge, alSlotPower12=alSlotPower12, alSlotChassis=alSlotChassis, alMcpuRtVer=alMcpuRtVer, alsystem=alsystem, alBridgeEntryLink=alBridgeEntryLink, brTemplateComparator=brTemplateComparator, brRuleStatement=brRuleStatement, MacAddress=MacAddress, alFcpuTwoRtVer=alFcpuTwoRtVer, alCpuSlot=alCpuSlot, alBrFlushCache=alBrFlushCache, linkStatsLink=linkStatsLink, linkStatsPktsIn=linkStatsPktsIn, portStatePort=portStatePort, alSlotVportDataRateStatus=alSlotVportDataRateStatus, portStatsPort=portStatsPort, alRcpuOneRtVer=alRcpuOneRtVer, boardFailure=boardFailure, alPPSourcePort=alPPSourcePort, brGroupNumber=brGroupNumber, alSlotPower5=alSlotPower5, brRuleEntry=brRuleEntry, linkStatsSaFieldChanges=linkStatsSaFieldChanges, brTemplateNumber=brTemplateNumber, brTemplateMask=brTemplateMask, autoPortState=autoPortState, alSlotCardType=alSlotCardType, systems=systems, alLinkStatsClear=alLinkStatsClear, autoportStateEntry=autoportStateEntry, alSyslogHostIp=alSyslogHostIp, portStateMgmt=portStateMgmt, alSlotVportControllerType=alSlotVportControllerType, portStatsTotalCollisions=portStatsTotalCollisions, alSlotSerialNumber=alSlotSerialNumber, alBrRuleTable=alBrRuleTable, linkStatsAutoPartition=linkStatsAutoPartition, linkControlEntry=linkControlEntry, powerhub4k6k7k=powerhub4k6k7k, alVportPortType=alVportPortType, alBridgeTblClear=alBridgeTblClear, autoPortStateThreshold=autoPortStateThreshold, alSlotNumber=alSlotNumber, alPSTable=alPSTable, portToPortEntry=portToPortEntry, alLinkStatsTable=alLinkStatsTable, alSlotVportOperModeStatus=alSlotVportOperModeStatus, alBrGroupTable=alBrGroupTable, alRcpuTwoPromVer=alRcpuTwoPromVer, linkStatsLateCollision=linkStatsLateCollision, portStatsXmitQLen=portStatsXmitQLen, linkStatsBMCastPktsIn=linkStatsBMCastPktsIn, alLastLoginFailureReason=alLastLoginFailureReason, alSlotModel=alSlotModel, alVportOperModeStatus=alVportOperModeStatus, alVportStatus=alVportStatus, alBridgeEntryAddress=alBridgeEntryAddress, alBridgeIpBridging=alBridgeIpBridging, alFiberStatsTable=alFiberStatsTable, portStateEntry=portStateEntry, alPPDestinationPort=alPPDestinationPort, alSlotVportOperModeConfig=alSlotVportOperModeConfig, alPortStateTable=alPortStateTable, linkStatsEntry=linkStatsEntry, alCfgFileName=alCfgFileName, linkStatsJabbers=linkStatsJabbers, alPSStatus=alPSStatus, portConfigPort=portConfigPort, alSnmpSyslogLevel=alSnmpSyslogLevel, linkControlPartition=linkControlPartition, portStatsOctetsIn=portStatsOctetsIn, linkControlPolarity=linkControlPolarity, alPortToPortTable=alPortToPortTable, portStatsCurrUtilization=portStatsCurrUtilization, portMonTrafficType=portMonTrafficType)
