#
# PySNMP MIB module UC4Vers2-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/UC4Vers2-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:28:23 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
iso, Counter32, enterprises, IpAddress, NotificationType, MibIdentifier, Counter64, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Bits, ModuleIdentity, Unsigned32, snmpModules, TimeTicks, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Counter32", "enterprises", "IpAddress", "NotificationType", "MibIdentifier", "Counter64", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Bits", "ModuleIdentity", "Unsigned32", "snmpModules", "TimeTicks", "ObjectIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
uc4Vers2_module = ModuleIdentity((1, 3, 6, 1, 6, 3, 1)).setLabel("uc4Vers2-module")
uc4Vers2_module.setRevisions(('2009-03-09 10:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: uc4Vers2_module.setRevisionsDescriptions(('The initial SMIv2 version.',))
if mibBuilder.loadTexts: uc4Vers2_module.setLastUpdated('200903091000Z')
if mibBuilder.loadTexts: uc4Vers2_module.setOrganization('UC4')
if mibBuilder.loadTexts: uc4Vers2_module.setContactInfo('http://www.uc4.com')
if mibBuilder.loadTexts: uc4Vers2_module.setDescription('UC4Vers2-mib module identity')
sbb = MibIdentifier((1, 3, 6, 1, 4, 1, 2562))
uc4 = MibIdentifier((1, 3, 6, 1, 4, 1, 2562, 1))
vers1 = MibIdentifier((1, 3, 6, 1, 4, 1, 2562, 1, 1))
agentData = MibIdentifier((1, 3, 6, 1, 4, 1, 2562, 1, 1, 1))
agentVersion = MibScalar((1, 3, 6, 1, 4, 1, 2562, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentVersion.setStatus('current')
if mibBuilder.loadTexts: agentVersion.setDescription('Version of the UC4 SNMP-Subagent in printable format V.RRRMMM-MMM.')
agentStartTime = MibScalar((1, 3, 6, 1, 4, 1, 2562, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStartTime.setStatus('current')
if mibBuilder.loadTexts: agentStartTime.setDescription('Starttime of the UC4 SNMP-Subagent in printable format YYYY-MM-DD HH:MM:SS.MMM.')
agentNumberOfServerTasks = MibScalar((1, 3, 6, 1, 4, 1, 2562, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentNumberOfServerTasks.setStatus('current')
if mibBuilder.loadTexts: agentNumberOfServerTasks.setDescription('Number of UC4 servers currently connected to the UC4 SNMP-Subagent.')
agentConnectCounter = MibScalar((1, 3, 6, 1, 4, 1, 2562, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentConnectCounter.setStatus('current')
if mibBuilder.loadTexts: agentConnectCounter.setDescription('Number of UC4 servers that have ever been connected to the UC4 SNMP-subagent (historical value).')
agentControl = MibIdentifier((1, 3, 6, 1, 4, 1, 2562, 1, 1, 2))
agentWork = MibIdentifier((1, 3, 6, 1, 4, 1, 2562, 1, 1, 3))
agentWorkSysID = MibScalar((1, 3, 6, 1, 4, 1, 2562, 1, 1, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentWorkSysID.setStatus('current')
if mibBuilder.loadTexts: agentWorkSysID.setDescription('Work variable for generating a trap (Subagent internal).')
agentWorkObject = MibScalar((1, 3, 6, 1, 4, 1, 2562, 1, 1, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentWorkObject.setStatus('current')
if mibBuilder.loadTexts: agentWorkObject.setDescription('Work variable for generating a trap (Subagent internal).')
agentWorkString1 = MibScalar((1, 3, 6, 1, 4, 1, 2562, 1, 1, 3, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentWorkString1.setStatus('current')
if mibBuilder.loadTexts: agentWorkString1.setDescription('Work variable for generating a trap (Subagent internal).')
agentWorkString2 = MibScalar((1, 3, 6, 1, 4, 1, 2562, 1, 1, 3, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentWorkString2.setStatus('current')
if mibBuilder.loadTexts: agentWorkString2.setDescription('Work variable for generating a trap (Subagent internal).')
agentWorkString3 = MibScalar((1, 3, 6, 1, 4, 1, 2562, 1, 1, 3, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentWorkString3.setStatus('current')
if mibBuilder.loadTexts: agentWorkString3.setDescription('Work variable for generating a trap (Subagent internal).')
agentWorkString4 = MibScalar((1, 3, 6, 1, 4, 1, 2562, 1, 1, 3, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentWorkString4.setStatus('current')
if mibBuilder.loadTexts: agentWorkString4.setDescription('Work variable for generating a trap (Subagent internal).')
agentWorkString5 = MibScalar((1, 3, 6, 1, 4, 1, 2562, 1, 1, 3, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentWorkString5.setStatus('current')
if mibBuilder.loadTexts: agentWorkString5.setDescription('Work variable for generating a trap (Subagent internal).')
agentWorkInteger1 = MibScalar((1, 3, 6, 1, 4, 1, 2562, 1, 1, 3, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentWorkInteger1.setStatus('current')
if mibBuilder.loadTexts: agentWorkInteger1.setDescription('Work variable for generating a trap (Subagent internal).')
agentWorkInteger2 = MibScalar((1, 3, 6, 1, 4, 1, 2562, 1, 1, 3, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentWorkInteger2.setStatus('current')
if mibBuilder.loadTexts: agentWorkInteger2.setDescription('Work variable for generating a trap (Subagent internal).')
agentWorkInteger3 = MibScalar((1, 3, 6, 1, 4, 1, 2562, 1, 1, 3, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentWorkInteger3.setStatus('current')
if mibBuilder.loadTexts: agentWorkInteger3.setDescription('Work variable for generating a trap (Subagent internal).')
agentWorkInteger4 = MibScalar((1, 3, 6, 1, 4, 1, 2562, 1, 1, 3, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentWorkInteger4.setStatus('current')
if mibBuilder.loadTexts: agentWorkInteger4.setDescription('Work variable for generating a trap (Subagent internal).')
agentWorkInteger5 = MibScalar((1, 3, 6, 1, 4, 1, 2562, 1, 1, 3, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentWorkInteger5.setStatus('current')
if mibBuilder.loadTexts: agentWorkInteger5.setDescription('Work variable for generating a trap (Subagent internal).')
uc4system = MibIdentifier((1, 3, 6, 1, 4, 1, 2562, 1, 1, 4))
systemTable = MibTable((1, 3, 6, 1, 4, 1, 2562, 1, 1, 4, 1), )
if mibBuilder.loadTexts: systemTable.setStatus('current')
if mibBuilder.loadTexts: systemTable.setDescription('This table contains a row for each UC4 System that connected to the UC4 SNMP-subagent during the lifetime of the subagent.')
systemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2562, 1, 1, 4, 1, 1), ).setIndexNames((0, "UC4Vers2-MIB", "sysSysID"))
if mibBuilder.loadTexts: systemEntry.setStatus('current')
if mibBuilder.loadTexts: systemEntry.setDescription('systemTable entries indexed by sysSysID.')
sysSysID = MibTableColumn((1, 3, 6, 1, 4, 1, 2562, 1, 1, 4, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSysID.setStatus('current')
if mibBuilder.loadTexts: sysSysID.setDescription("The name of the UC4 system. The value of the 'system' keyword in the .INI file of the server.")
sysStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2562, 1, 1, 4, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 19))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStartTime.setStatus('current')
if mibBuilder.loadTexts: sysStartTime.setDescription('The start time of the 1st server of the UC4 system.')
sysDbmsName = MibTableColumn((1, 3, 6, 1, 4, 1, 2562, 1, 1, 4, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDbmsName.setStatus('current')
if mibBuilder.loadTexts: sysDbmsName.setDescription('The product name of the DB (Oracle 7, Microsoft SQL 7 etc.).')
sysDbVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2562, 1, 1, 4, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDbVersion.setStatus('current')
if mibBuilder.loadTexts: sysDbVersion.setDescription('The version of the database management system.')
sysDbName = MibTableColumn((1, 3, 6, 1, 4, 1, 2562, 1, 1, 4, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDbName.setStatus('current')
if mibBuilder.loadTexts: sysDbName.setDescription('The name of the database returned by the DB management system.')
sysEMS = MibTableColumn((1, 3, 6, 1, 4, 1, 2562, 1, 1, 4, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysEMS.setStatus('current')
if mibBuilder.loadTexts: sysEMS.setDescription('Licence bitarray for enterprise management software.')
client = MibIdentifier((1, 3, 6, 1, 4, 1, 2562, 1, 1, 5))
clientTable = MibTable((1, 3, 6, 1, 4, 1, 2562, 1, 1, 5, 1), )
if mibBuilder.loadTexts: clientTable.setStatus('current')
if mibBuilder.loadTexts: clientTable.setDescription('This table contains a row for each UC4 client of all UC4 systems connected to the UC4 SNMP-subagent.')
clientEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2562, 1, 1, 5, 1, 1), ).setIndexNames((0, "UC4Vers2-MIB", "cliSysID"), (0, "UC4Vers2-MIB", "cliClient"))
if mibBuilder.loadTexts: clientEntry.setStatus('current')
if mibBuilder.loadTexts: clientEntry.setDescription('clientTable entries indexed by cliSysID+cliClient.')
cliSysID = MibTableColumn((1, 3, 6, 1, 4, 1, 2562, 1, 1, 5, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cliSysID.setStatus('current')
if mibBuilder.loadTexts: cliSysID.setDescription('The symbolic name of the UC4 system the client is a member of.')
cliClient = MibTableColumn((1, 3, 6, 1, 4, 1, 2562, 1, 1, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cliClient.setStatus('current')
if mibBuilder.loadTexts: cliClient.setDescription('The numeric value representation of the client. This number unambiguously identifies the client within a UC4 system.')
cliLastModifyTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2562, 1, 1, 5, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 19))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cliLastModifyTime.setStatus('current')
if mibBuilder.loadTexts: cliLastModifyTime.setDescription('Timestamp of the last update of this record.')
cliState = MibTableColumn((1, 3, 6, 1, 4, 1, 2562, 1, 1, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("go", 1), ("stop", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cliState.setStatus('current')
if mibBuilder.loadTexts: cliState.setDescription('The state of UC4 client. Shows whether the execution for this client is permitted (run) or suspended (stop). If a client is in stop state every automatic processing is suspended, but manual intervention is permitted.')
cliMonitoring = MibTableColumn((1, 3, 6, 1, 4, 1, 2562, 1, 1, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cliMonitoring.setStatus('current')
if mibBuilder.loadTexts: cliMonitoring.setDescription('Shows whether the client is important enough his activity to be monitored (productivity client). If yes (1) then the monitoring of the actvity of this client is desired. Monitoring of activity means watching for call operators and blocked jobs.')
cliInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 2562, 1, 1, 5, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 19))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cliInfo.setStatus('current')
if mibBuilder.loadTexts: cliInfo.setDescription('Reserved for usage later.')
serverInstance = MibIdentifier((1, 3, 6, 1, 4, 1, 2562, 1, 1, 6))
serverInstanceTable = MibTable((1, 3, 6, 1, 4, 1, 2562, 1, 1, 6, 1), )
if mibBuilder.loadTexts: serverInstanceTable.setStatus('current')
if mibBuilder.loadTexts: serverInstanceTable.setDescription('This table contains a row for each UC4 Server connected to the UC4 SNMP-subagent.')
serverInstanceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2562, 1, 1, 6, 1, 1), ).setIndexNames((0, "UC4Vers2-MIB", "srvSysID"), (0, "UC4Vers2-MIB", "srvName"))
if mibBuilder.loadTexts: serverInstanceEntry.setStatus('current')
if mibBuilder.loadTexts: serverInstanceEntry.setDescription('serverInstanceTable entries indexed by srvSysID+srvName.')
srvSysID = MibTableColumn((1, 3, 6, 1, 4, 1, 2562, 1, 1, 6, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvSysID.setStatus('current')
if mibBuilder.loadTexts: srvSysID.setDescription("The name of the UC4 system the server belongs to. The value of the 'system' keyword in the .INI file of the server.")
srvName = MibTableColumn((1, 3, 6, 1, 4, 1, 2562, 1, 1, 6, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvName.setStatus('current')
if mibBuilder.loadTexts: srvName.setDescription("The name of the UC4 server. The value of the 'name' keyword in the .INI file of the server.")
srvLastModifyTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2562, 1, 1, 6, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 19))).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvLastModifyTime.setStatus('current')
if mibBuilder.loadTexts: srvLastModifyTime.setDescription('Timestamp of the last update of this record.')
srvVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2562, 1, 1, 6, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvVersion.setStatus('current')
if mibBuilder.loadTexts: srvVersion.setDescription('The version of the UC4 server.')
srvStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2562, 1, 1, 6, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 23))).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvStartTime.setStatus('current')
if mibBuilder.loadTexts: srvStartTime.setDescription('Timestamp of the start time of the server.')
srvState = MibTableColumn((1, 3, 6, 1, 4, 1, 2562, 1, 1, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("run", 1), ("ended", 2), ("abnormal", 3), ("undef", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvState.setStatus('current')
if mibBuilder.loadTexts: srvState.setDescription('The state of the UC4 server. undef(4) a should not be case. run(1) means the server is running. ended(2) means the server ended normaly. abnormal(3) means the server ended abnormaly, or the connection between the server and the UC4 SNMP-subagent has been lost.')
srvSrvConnect = MibTableColumn((1, 3, 6, 1, 4, 1, 2562, 1, 1, 6, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvSrvConnect.setStatus('current')
if mibBuilder.loadTexts: srvSrvConnect.setDescription('Number of currently connected servers.')
srvExeConnect = MibTableColumn((1, 3, 6, 1, 4, 1, 2562, 1, 1, 6, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvExeConnect.setStatus('current')
if mibBuilder.loadTexts: srvExeConnect.setDescription('Number of currently connected executors.')
srvDiaConnect = MibTableColumn((1, 3, 6, 1, 4, 1, 2562, 1, 1, 6, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvDiaConnect.setStatus('current')
if mibBuilder.loadTexts: srvDiaConnect.setDescription('Number of currently connected dialogue clients.')
srvBusyMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2562, 1, 1, 6, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvBusyMin.setStatus('current')
if mibBuilder.loadTexts: srvBusyMin.setDescription('Statistical Value. Average load of the server in % in the last minute before update.')
srvBusy10Min = MibTableColumn((1, 3, 6, 1, 4, 1, 2562, 1, 1, 6, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvBusy10Min.setStatus('current')
if mibBuilder.loadTexts: srvBusy10Min.setDescription('Statistical Value. Average load of the server in % in the last 10 minutes before update.')
srvBusyHour = MibTableColumn((1, 3, 6, 1, 4, 1, 2562, 1, 1, 6, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvBusyHour.setStatus('current')
if mibBuilder.loadTexts: srvBusyHour.setDescription('Statistical Value. Average load of the server in % in the last hour before update.')
srvRunMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2562, 1, 1, 6, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("primary", 1), ("standby", 2), ("undef", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvRunMode.setStatus('current')
if mibBuilder.loadTexts: srvRunMode.setDescription('The role of the server in the UC4 system. undef(3) yet unset primary(1) the server is a primary in the UC4 system. standby(2) the server is a standby in the UC4 system.')
srvDBState = MibTableColumn((1, 3, 6, 1, 4, 1, 2562, 1, 1, 6, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("online", 1), ("offline", 2), ("undef", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvDBState.setStatus('current')
if mibBuilder.loadTexts: srvDBState.setDescription('The status of the connection between the UC4 server and the UC4 database. undef(3) online(1) offline(2)')
srvSDBState = MibTableColumn((1, 3, 6, 1, 4, 1, 2562, 1, 1, 6, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("online", 1), ("offline", 2), ("dismounted", 3), ("noSDB", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvSDBState.setStatus('current')
if mibBuilder.loadTexts: srvSDBState.setDescription('The status of the connection between the UC4 server and the UC4 status database. 4 = noSDB no SRRC (Status Recording Recovery and Control), 1 = online SDB is online, status recording works 2 = offline because of failure(s) SDB has been switched off 3 = dismounted SDB is unaccessable')
executor = MibIdentifier((1, 3, 6, 1, 4, 1, 2562, 1, 1, 7))
executorTable = MibTable((1, 3, 6, 1, 4, 1, 2562, 1, 1, 7, 1), )
if mibBuilder.loadTexts: executorTable.setStatus('current')
if mibBuilder.loadTexts: executorTable.setDescription('This table contains a row for each UC4 executor connected to any server that is connected to the UC4 SNMP-subagent.')
executorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2562, 1, 1, 7, 1, 1), ).setIndexNames((0, "UC4Vers2-MIB", "exeSysID"), (0, "UC4Vers2-MIB", "exeSrvName"), (0, "UC4Vers2-MIB", "exeName"), (0, "UC4Vers2-MIB", "exeType"))
if mibBuilder.loadTexts: executorEntry.setStatus('current')
if mibBuilder.loadTexts: executorEntry.setDescription('executorTable entries indexed by exeSysID+exeSrvName+exeName+exeType.')
exeSysID = MibTableColumn((1, 3, 6, 1, 4, 1, 2562, 1, 1, 7, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exeSysID.setStatus('current')
if mibBuilder.loadTexts: exeSysID.setDescription("The name of the UC4 system the executor belongs to. The value of the 'system' keyword in the .INI file of the server.")
exeSrvName = MibTableColumn((1, 3, 6, 1, 4, 1, 2562, 1, 1, 7, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exeSrvName.setStatus('current')
if mibBuilder.loadTexts: exeSrvName.setDescription('The name of the server the executor is connected to.')
exeName = MibTableColumn((1, 3, 6, 1, 4, 1, 2562, 1, 1, 7, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exeName.setStatus('current')
if mibBuilder.loadTexts: exeName.setDescription("The name of the executor. The value of the 'name' keyword in the .INI file of the executor.")
exeType = MibTableColumn((1, 3, 6, 1, 4, 1, 2562, 1, 1, 7, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exeType.setStatus('current')
if mibBuilder.loadTexts: exeType.setDescription("The type of the executor. The value of the 'typ' keyword in the .INI file of the executor.")
exeLastModifyTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2562, 1, 1, 7, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 19))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exeLastModifyTime.setStatus('current')
if mibBuilder.loadTexts: exeLastModifyTime.setDescription('Timestamp of the last update of this record.')
exeHost = MibTableColumn((1, 3, 6, 1, 4, 1, 2562, 1, 1, 7, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exeHost.setStatus('current')
if mibBuilder.loadTexts: exeHost.setDescription("The name of the executor's host. The value of the 'host' keyword in the .INI file of the executor")
exeVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2562, 1, 1, 7, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exeVersion.setStatus('current')
if mibBuilder.loadTexts: exeVersion.setDescription('The version of the executor.')
exeHardware = MibTableColumn((1, 3, 6, 1, 4, 1, 2562, 1, 1, 7, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exeHardware.setStatus('current')
if mibBuilder.loadTexts: exeHardware.setDescription('CPU type obtained by the executor from the run-time environment.')
exeSoftware = MibTableColumn((1, 3, 6, 1, 4, 1, 2562, 1, 1, 7, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exeSoftware.setStatus('current')
if mibBuilder.loadTexts: exeSoftware.setDescription('The executor is running for software.')
exeSoftwareVers = MibTableColumn((1, 3, 6, 1, 4, 1, 2562, 1, 1, 7, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exeSoftwareVers.setStatus('current')
if mibBuilder.loadTexts: exeSoftwareVers.setDescription('OS type obtained by the executor from the run-time environment.')
exeJCLTyp = MibTableColumn((1, 3, 6, 1, 4, 1, 2562, 1, 1, 7, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exeJCLTyp.setStatus('current')
if mibBuilder.loadTexts: exeJCLTyp.setDescription("Job Control Language for job generation. The value of the 'UC_HOST_JCL_VAR' keyword in the .INI file of the executor")
exeConnTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2562, 1, 1, 7, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 19))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exeConnTime.setStatus('current')
if mibBuilder.loadTexts: exeConnTime.setDescription('Timestamp of the last connection setup of the executor.')
exeState = MibTableColumn((1, 3, 6, 1, 4, 1, 2562, 1, 1, 7, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("run", 1), ("ended", 2), ("lost", 3), ("timeout", 4), ("undef", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exeState.setStatus('current')
if mibBuilder.loadTexts: exeState.setDescription('The state of the executor. undef(5) not set yet run(1) the executor is working ended(2) the executor is stopped or not started yet lost(3) the connection between the executor and the server has been broken. timeout(4) the connection on the transport layer seems to be OK, but the application (executor) does not respond')
exeLastPing = MibTableColumn((1, 3, 6, 1, 4, 1, 2562, 1, 1, 7, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 19))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exeLastPing.setStatus('current')
if mibBuilder.loadTexts: exeLastPing.setDescription('The timestamp of the last attempt to get life-sign from the executor..')
exeMonitoring = MibTableColumn((1, 3, 6, 1, 4, 1, 2562, 1, 1, 7, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exeMonitoring.setStatus('current')
if mibBuilder.loadTexts: exeMonitoring.setDescription('Shows whether the executor is important enough its availability to be monitored (productivity executor). If yes (1) then the monitoring of the availability of this executor is desired.')
exeInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 2562, 1, 1, 7, 1, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 19))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exeInfo.setStatus('current')
if mibBuilder.loadTexts: exeInfo.setDescription('Reserved for usage later.')
blockingPoints = MibIdentifier((1, 3, 6, 1, 4, 1, 2562, 1, 1, 8))
blockingPointsTable = MibTable((1, 3, 6, 1, 4, 1, 2562, 1, 1, 8, 1), )
if mibBuilder.loadTexts: blockingPointsTable.setStatus('current')
if mibBuilder.loadTexts: blockingPointsTable.setDescription('This table contains a row for each blocking object in a job plan.')
blockingPointEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2562, 1, 1, 8, 1, 1), ).setIndexNames((0, "UC4Vers2-MIB", "blkSysID"), (0, "UC4Vers2-MIB", "blkClient"), (0, "UC4Vers2-MIB", "blkJPRunNr"), (0, "UC4Vers2-MIB", "blkJPLNR"))
if mibBuilder.loadTexts: blockingPointEntry.setStatus('current')
if mibBuilder.loadTexts: blockingPointEntry.setDescription('blockingPointsTable entries indexed by blkSysID+blkClient+blkJPRunNr+blkJPLNR.')
blkSysID = MibTableColumn((1, 3, 6, 1, 4, 1, 2562, 1, 1, 8, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: blkSysID.setStatus('current')
if mibBuilder.loadTexts: blkSysID.setDescription('The name of UC4 system in which the automatic job execution is blocked.')
blkClient = MibTableColumn((1, 3, 6, 1, 4, 1, 2562, 1, 1, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: blkClient.setStatus('current')
if mibBuilder.loadTexts: blkClient.setDescription('The numeric value of the client/mandant the blocking point belongs to.')
blkJPRunNr = MibTableColumn((1, 3, 6, 1, 4, 1, 2562, 1, 1, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65635))).setMaxAccess("readonly")
if mibBuilder.loadTexts: blkJPRunNr.setStatus('current')
if mibBuilder.loadTexts: blkJPRunNr.setDescription('The run number of the job plan where blocking occurred.')
blkJPLNR = MibTableColumn((1, 3, 6, 1, 4, 1, 2562, 1, 1, 8, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: blkJPLNR.setStatus('current')
if mibBuilder.loadTexts: blkJPLNR.setDescription('The line identification of the task in which the blocking occurred.')
blkLastModifyTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2562, 1, 1, 8, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 19))).setMaxAccess("readonly")
if mibBuilder.loadTexts: blkLastModifyTime.setStatus('current')
if mibBuilder.loadTexts: blkLastModifyTime.setDescription('Timestamp of the last update of this record.')
blkJPName = MibTableColumn((1, 3, 6, 1, 4, 1, 2562, 1, 1, 8, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: blkJPName.setStatus('current')
if mibBuilder.loadTexts: blkJPName.setDescription('The name of the job plan in which the blocking occurred.')
blkObjTyp = MibTableColumn((1, 3, 6, 1, 4, 1, 2562, 1, 1, 8, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: blkObjTyp.setStatus('current')
if mibBuilder.loadTexts: blkObjTyp.setDescription('The type of the object that caused the blocking.')
blkObjName = MibTableColumn((1, 3, 6, 1, 4, 1, 2562, 1, 1, 8, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: blkObjName.setStatus('current')
if mibBuilder.loadTexts: blkObjName.setDescription('The name of the object that caused the blocking.')
blkObjRunNr = MibTableColumn((1, 3, 6, 1, 4, 1, 2562, 1, 1, 8, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: blkObjRunNr.setStatus('current')
if mibBuilder.loadTexts: blkObjRunNr.setDescription('The run number of the object that caused the blocking.')
callOperator = MibIdentifier((1, 3, 6, 1, 4, 1, 2562, 1, 1, 9))
callOperatorTable = MibTable((1, 3, 6, 1, 4, 1, 2562, 1, 1, 9, 1), )
if mibBuilder.loadTexts: callOperatorTable.setStatus('current')
if mibBuilder.loadTexts: callOperatorTable.setDescription('This table contains a row for each CallOperator issued by any server that is connected to the UC4 SNMP-subagent.')
callOperatorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2562, 1, 1, 9, 1, 1), ).setIndexNames((0, "UC4Vers2-MIB", "coSysID"), (0, "UC4Vers2-MIB", "coClient"), (0, "UC4Vers2-MIB", "coRunNr"))
if mibBuilder.loadTexts: callOperatorEntry.setStatus('current')
if mibBuilder.loadTexts: callOperatorEntry.setDescription('callOperatorTable entries indexed by coSysID+coClient+coRunNr.')
coSysID = MibTableColumn((1, 3, 6, 1, 4, 1, 2562, 1, 1, 9, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coSysID.setStatus('current')
if mibBuilder.loadTexts: coSysID.setDescription('The name of the UC4 system the CallOperator is originated from.')
coClient = MibTableColumn((1, 3, 6, 1, 4, 1, 2562, 1, 1, 9, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coClient.setStatus('current')
if mibBuilder.loadTexts: coClient.setDescription('The numeric value of the client the CallOperator belongs to.')
coRunNr = MibTableColumn((1, 3, 6, 1, 4, 1, 2562, 1, 1, 9, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65635))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coRunNr.setStatus('current')
if mibBuilder.loadTexts: coRunNr.setDescription('The RunNr of the CallOperator.')
coLastModifyTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2562, 1, 1, 9, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 19))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coLastModifyTime.setStatus('current')
if mibBuilder.loadTexts: coLastModifyTime.setDescription('Timestamp of the last update of this record.')
coName = MibTableColumn((1, 3, 6, 1, 4, 1, 2562, 1, 1, 9, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coName.setStatus('current')
if mibBuilder.loadTexts: coName.setDescription('The symblic name of CallOperator.')
coTyp = MibTableColumn((1, 3, 6, 1, 4, 1, 2562, 1, 1, 9, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("question", 1), ("message", 2), ("alarm", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coTyp.setStatus('current')
if mibBuilder.loadTexts: coTyp.setDescription('Type of CallOperator. question(1) message(2) alarm(3)')
coText = MibTableColumn((1, 3, 6, 1, 4, 1, 2562, 1, 1, 9, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coText.setStatus('current')
if mibBuilder.loadTexts: coText.setDescription('The explanation text defined in CallOperator.')
coState = MibTableColumn((1, 3, 6, 1, 4, 1, 2562, 1, 1, 9, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coState.setStatus('current')
if mibBuilder.loadTexts: coState.setDescription('The current state of the CallOperator. Calling the operator (1542), Escalated (1556), Accepted (1553)')
serverStarted = NotificationType((3400,)).setObjects(("UC4Vers2-MIB", "agentWorkSysID"), ("UC4Vers2-MIB", "agentWorkObject"), ("UC4Vers2-MIB", "agentWorkInteger1"), ("UC4Vers2-MIB", "agentWorkInteger2"))
if mibBuilder.loadTexts: serverStarted.setStatus('current')
if mibBuilder.loadTexts: serverStarted.setDescription('UC4 Server started')
serverEnd = NotificationType((3401,)).setObjects(("UC4Vers2-MIB", "agentWorkSysID"), ("UC4Vers2-MIB", "agentWorkObject"), ("UC4Vers2-MIB", "agentWorkInteger1"), ("UC4Vers2-MIB", "agentWorkInteger2"))
if mibBuilder.loadTexts: serverEnd.setStatus('current')
if mibBuilder.loadTexts: serverEnd.setDescription('End of a work of dialog process (regardless of the reason) or normal end of the primary work process')
primaryWorkProcessAborted = NotificationType((3410,)).setObjects(("UC4Vers2-MIB", "agentWorkSysID"), ("UC4Vers2-MIB", "agentWorkObject"), ("UC4Vers2-MIB", "agentWorkInteger1"), ("UC4Vers2-MIB", "agentWorkInteger2"))
if mibBuilder.loadTexts: primaryWorkProcessAborted.setStatus('current')
if mibBuilder.loadTexts: primaryWorkProcessAborted.setDescription('Primary work process (PWP) ended abnormally')
databaseError = NotificationType((3536,)).setObjects(("UC4Vers2-MIB", "agentWorkSysID"), ("UC4Vers2-MIB", "agentWorkObject"), ("UC4Vers2-MIB", "agentWorkString1"))
if mibBuilder.loadTexts: databaseError.setStatus('current')
if mibBuilder.loadTexts: databaseError.setDescription('Serious error when accessing the UC4 database. Access no longer possible.')
databaseReconnect = NotificationType((3538,)).setObjects(("UC4Vers2-MIB", "agentWorkSysID"), ("UC4Vers2-MIB", "agentWorkObject"))
if mibBuilder.loadTexts: databaseReconnect.setStatus('current')
if mibBuilder.loadTexts: databaseReconnect.setDescription('Connection to UC4 database re-established.')
agentStop = NotificationType((11603,)).setObjects(("UC4Vers2-MIB", "agentWorkSysID"), ("UC4Vers2-MIB", "agentWorkObject"), ("UC4Vers2-MIB", "agentWorkString1"), ("UC4Vers2-MIB", "agentWorkInteger1"))
if mibBuilder.loadTexts: agentStop.setStatus('current')
if mibBuilder.loadTexts: agentStop.setDescription('Shutting down an Agent.')
agentStart = NotificationType((11604,)).setObjects(("UC4Vers2-MIB", "agentWorkSysID"), ("UC4Vers2-MIB", "agentWorkObject"), ("UC4Vers2-MIB", "agentWorkString1"), ("UC4Vers2-MIB", "agentWorkInteger1"))
if mibBuilder.loadTexts: agentStart.setStatus('current')
if mibBuilder.loadTexts: agentStart.setDescription('Cold start of an Agent.')
agentReset = NotificationType((11622,)).setObjects(("UC4Vers2-MIB", "agentWorkSysID"), ("UC4Vers2-MIB", "agentWorkObject"), ("UC4Vers2-MIB", "agentWorkString1"))
if mibBuilder.loadTexts: agentReset.setStatus('current')
if mibBuilder.loadTexts: agentReset.setDescription('Warm start of an Agent.')
agentDisconnected = NotificationType((11650,)).setObjects(("UC4Vers2-MIB", "agentWorkSysID"), ("UC4Vers2-MIB", "agentWorkObject"), ("UC4Vers2-MIB", "agentWorkString1"), ("UC4Vers2-MIB", "agentWorkInteger1"))
if mibBuilder.loadTexts: agentDisconnected.setStatus('current')
if mibBuilder.loadTexts: agentDisconnected.setDescription('Ends connection to an Agent.')
agentSAPDisconnected = NotificationType((11652,)).setObjects(("UC4Vers2-MIB", "agentWorkSysID"), ("UC4Vers2-MIB", "agentWorkObject"), ("UC4Vers2-MIB", "agentWorkString1"), ("UC4Vers2-MIB", "agentWorkInteger1"))
if mibBuilder.loadTexts: agentSAPDisconnected.setStatus('current')
if mibBuilder.loadTexts: agentSAPDisconnected.setDescription('SAP Agent not longer connected to SAP system.')
agentSAPReconnect = NotificationType((11662,)).setObjects(("UC4Vers2-MIB", "agentWorkSysID"), ("UC4Vers2-MIB", "agentWorkObject"), ("UC4Vers2-MIB", "agentWorkString1"), ("UC4Vers2-MIB", "agentWorkInteger1"))
if mibBuilder.loadTexts: agentSAPReconnect.setStatus('current')
if mibBuilder.loadTexts: agentSAPReconnect.setDescription('SAP Agent reconnected to SAP system.')
systemError = NotificationType((11801,)).setObjects(("UC4Vers2-MIB", "agentWorkSysID"), ("UC4Vers2-MIB", "agentWorkObject"), ("UC4Vers2-MIB", "agentWorkString1"), ("UC4Vers2-MIB", "agentWorkInteger1"))
if mibBuilder.loadTexts: systemError.setStatus('current')
if mibBuilder.loadTexts: systemError.setDescription('System error of the UC4 Server.')
serverPWPchanged = NotificationType((11818,)).setObjects(("UC4Vers2-MIB", "agentWorkSysID"), ("UC4Vers2-MIB", "agentWorkObject"), ("UC4Vers2-MIB", "agentWorkInteger1"), ("UC4Vers2-MIB", "agentWorkInteger2"))
if mibBuilder.loadTexts: serverPWPchanged.setStatus('current')
if mibBuilder.loadTexts: serverPWPchanged.setDescription('Primary Server has changed.')
notificationMessage = NotificationType((801450,)).setObjects(("UC4Vers2-MIB", "agentWorkSysID"), ("UC4Vers2-MIB", "agentWorkObject"), ("UC4Vers2-MIB", "agentWorkString1"), ("UC4Vers2-MIB", "agentWorkString2"), ("UC4Vers2-MIB", "agentWorkInteger1"))
if mibBuilder.loadTexts: notificationMessage.setStatus('current')
if mibBuilder.loadTexts: notificationMessage.setDescription('Message of a Notification.')
mibBuilder.exportSymbols("UC4Vers2-MIB", exeInfo=exeInfo, PYSNMP_MODULE_ID=uc4Vers2_module, cliSysID=cliSysID, blockingPointsTable=blockingPointsTable, srvDiaConnect=srvDiaConnect, executor=executor, blkLastModifyTime=blkLastModifyTime, agentWorkString4=agentWorkString4, srvRunMode=srvRunMode, agentWorkInteger4=agentWorkInteger4, agentStartTime=agentStartTime, agentConnectCounter=agentConnectCounter, coState=coState, client=client, agentReset=agentReset, srvLastModifyTime=srvLastModifyTime, srvBusyMin=srvBusyMin, executorEntry=executorEntry, sysDbVersion=sysDbVersion, srvBusyHour=srvBusyHour, agentWorkInteger5=agentWorkInteger5, exeSoftware=exeSoftware, systemError=systemError, exeHardware=exeHardware, exeVersion=exeVersion, srvDBState=srvDBState, exeJCLTyp=exeJCLTyp, cliInfo=cliInfo, srvState=srvState, agentWorkString1=agentWorkString1, systemEntry=systemEntry, coTyp=coTyp, notificationMessage=notificationMessage, exeMonitoring=exeMonitoring, executorTable=executorTable, agentSAPDisconnected=agentSAPDisconnected, callOperatorTable=callOperatorTable, agentStop=agentStop, uc4=uc4, serverInstanceTable=serverInstanceTable, agentWorkObject=agentWorkObject, agentWorkInteger1=agentWorkInteger1, vers1=vers1, cliClient=cliClient, sysEMS=sysEMS, blkJPRunNr=blkJPRunNr, blkObjRunNr=blkObjRunNr, serverInstance=serverInstance, sysDbmsName=sysDbmsName, exeState=exeState, coText=coText, blkObjTyp=blkObjTyp, agentStart=agentStart, exeHost=exeHost, srvStartTime=srvStartTime, blkObjName=blkObjName, serverPWPchanged=serverPWPchanged, agentWorkInteger2=agentWorkInteger2, coLastModifyTime=coLastModifyTime, agentWorkString5=agentWorkString5, cliMonitoring=cliMonitoring, blockingPoints=blockingPoints, srvSDBState=srvSDBState, systemTable=systemTable, srvExeConnect=srvExeConnect, agentWorkString3=agentWorkString3, agentSAPReconnect=agentSAPReconnect, callOperatorEntry=callOperatorEntry, blkSysID=blkSysID, srvSysID=srvSysID, coRunNr=coRunNr, sysSysID=sysSysID, srvSrvConnect=srvSrvConnect, cliState=cliState, coClient=coClient, agentDisconnected=agentDisconnected, srvName=srvName, serverInstanceEntry=serverInstanceEntry, exeLastPing=exeLastPing, serverStarted=serverStarted, agentWorkString2=agentWorkString2, coName=coName, agentNumberOfServerTasks=agentNumberOfServerTasks, exeSysID=exeSysID, agentWorkInteger3=agentWorkInteger3, exeLastModifyTime=exeLastModifyTime, sbb=sbb, serverEnd=serverEnd, srvBusy10Min=srvBusy10Min, primaryWorkProcessAborted=primaryWorkProcessAborted, clientTable=clientTable, exeType=exeType, exeSrvName=exeSrvName, exeConnTime=exeConnTime, agentWork=agentWork, coSysID=coSysID, uc4Vers2_module=uc4Vers2_module, clientEntry=clientEntry, blockingPointEntry=blockingPointEntry, uc4system=uc4system, agentWorkSysID=agentWorkSysID, sysDbName=sysDbName, blkJPName=blkJPName, cliLastModifyTime=cliLastModifyTime, agentVersion=agentVersion, blkClient=blkClient, blkJPLNR=blkJPLNR, databaseError=databaseError, exeName=exeName, exeSoftwareVers=exeSoftwareVers, agentControl=agentControl, callOperator=callOperator, agentData=agentData, srvVersion=srvVersion, databaseReconnect=databaseReconnect, sysStartTime=sysStartTime)
