#
# PySNMP MIB module RMM2-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RMM2-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:58:01 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Counter32, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, iso, MibIdentifier, Bits, enterprises, NotificationType, ModuleIdentity, TimeTicks, Counter64, Integer32, Unsigned32, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "iso", "MibIdentifier", "Bits", "enterprises", "NotificationType", "ModuleIdentity", "TimeTicks", "Counter64", "Integer32", "Unsigned32", "IpAddress")
TextualConvention, MacAddress, DateAndTime, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "MacAddress", "DateAndTime", "DisplayString")
intelRmm2 = ModuleIdentity((1, 3, 6, 1, 4, 1, 343))
if mibBuilder.loadTexts: intelRmm2.setLastUpdated('200612130000Z')
if mibBuilder.loadTexts: intelRmm2.setOrganization('Intel Corporation')
if mibBuilder.loadTexts: intelRmm2.setContactInfo(' Intel Corporation ')
if mibBuilder.loadTexts: intelRmm2.setDescription('This mib describes the SNMP functions of the KVM by Intel Corporation.')
rmm2 = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 1))
board = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 1, 1))
host = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 1, 2))
common = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 1, 3))
traps = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 1, 4))
info = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 1, 1, 1))
users = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 1, 1, 2))
actions = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 1, 1, 3))
hostInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 1, 2, 1))
hostActions = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 1, 2, 2))
firmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 343, 1, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareVersion.setStatus('current')
if mibBuilder.loadTexts: firmwareVersion.setDescription('The current firmware version')
serialNumber = MibScalar((1, 3, 6, 1, 4, 1, 343, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialNumber.setStatus('current')
if mibBuilder.loadTexts: serialNumber.setDescription('The serial number.')
ip = MibScalar((1, 3, 6, 1, 4, 1, 343, 1, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ip.setStatus('current')
if mibBuilder.loadTexts: ip.setDescription('The current IP address. A value of 0.0.0.0 indicates an error or an unset option.')
netmask = MibScalar((1, 3, 6, 1, 4, 1, 343, 1, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netmask.setStatus('current')
if mibBuilder.loadTexts: netmask.setDescription('The current Netmask. A value of 0.0.0.0 indicates an error or an unset option.')
gateway = MibScalar((1, 3, 6, 1, 4, 1, 343, 1, 1, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gateway.setStatus('current')
if mibBuilder.loadTexts: gateway.setDescription('The current Gateway. A value of 0.0.0.0 indicates an error or an unset option.')
mac = MibScalar((1, 3, 6, 1, 4, 1, 343, 1, 1, 1, 6), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mac.setStatus('current')
if mibBuilder.loadTexts: mac.setDescription('The current MAC address.')
hardwareRev = MibScalar((1, 3, 6, 1, 4, 1, 343, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hardwareRev.setStatus('current')
if mibBuilder.loadTexts: hardwareRev.setDescription('The hardware revision number.')
eventType = MibScalar((1, 3, 6, 1, 4, 1, 343, 1, 1, 1, 8), DisplayString())
if mibBuilder.loadTexts: eventType.setStatus('current')
if mibBuilder.loadTexts: eventType.setDescription('The name of a generic log event')
eventDesc = MibScalar((1, 3, 6, 1, 4, 1, 343, 1, 1, 1, 9), DisplayString())
if mibBuilder.loadTexts: eventDesc.setStatus('current')
if mibBuilder.loadTexts: eventDesc.setDescription('The description text of a generic log event')
userLoginName = MibScalar((1, 3, 6, 1, 4, 1, 343, 1, 1, 1, 10), DisplayString())
if mibBuilder.loadTexts: userLoginName.setStatus('current')
if mibBuilder.loadTexts: userLoginName.setDescription('The login of a user.')
remoteHost = MibScalar((1, 3, 6, 1, 4, 1, 343, 1, 1, 1, 11), IpAddress())
if mibBuilder.loadTexts: remoteHost.setStatus('current')
if mibBuilder.loadTexts: remoteHost.setDescription('The IP of the remote host from which a user is logged in.')
checkHostPower = MibScalar((1, 3, 6, 1, 4, 1, 343, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("hasPower", 1), ("hasnoPower", 2), ("error", 3), ("notsupported", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkHostPower.setStatus('current')
if mibBuilder.loadTexts: checkHostPower.setDescription('The Power status of the host.')
hostReset = MibScalar((1, 3, 6, 1, 4, 1, 343, 1, 2, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hostReset.setStatus('current')
if mibBuilder.loadTexts: hostReset.setDescription('This virtually presses the Reset button of the host.')
hostPower = MibScalar((1, 3, 6, 1, 4, 1, 343, 1, 2, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("longPress", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hostPower.setStatus('current')
if mibBuilder.loadTexts: hostPower.setDescription('This virtually presses the Power button of the host with a short or long press.')
resetBoard = MibScalar((1, 3, 6, 1, 4, 1, 343, 1, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: resetBoard.setStatus('current')
if mibBuilder.loadTexts: resetBoard.setDescription('Resets the board.')
dummyTrap = NotificationType((1, 3, 6, 1, 4, 1, 343, 1, 4, 1))
if mibBuilder.loadTexts: dummyTrap.setStatus('current')
if mibBuilder.loadTexts: dummyTrap.setDescription('Dummy Trap for testing')
loginfailed = NotificationType((1, 3, 6, 1, 4, 1, 343, 1, 4, 2)).setObjects(("RMM2-MIB", "userLoginName"), ("RMM2-MIB", "remoteHost"))
if mibBuilder.loadTexts: loginfailed.setStatus('current')
if mibBuilder.loadTexts: loginfailed.setDescription('Failed login try.')
loginsuccess = NotificationType((1, 3, 6, 1, 4, 1, 343, 1, 4, 3)).setObjects(("RMM2-MIB", "userLoginName"), ("RMM2-MIB", "remoteHost"))
if mibBuilder.loadTexts: loginsuccess.setStatus('current')
if mibBuilder.loadTexts: loginsuccess.setDescription('Success login.')
securityViolation = NotificationType((1, 3, 6, 1, 4, 1, 343, 1, 4, 4)).setObjects(("RMM2-MIB", "userLoginName"), ("RMM2-MIB", "remoteHost"))
if mibBuilder.loadTexts: securityViolation.setStatus('current')
if mibBuilder.loadTexts: securityViolation.setDescription('Security violation.')
generic = NotificationType((1, 3, 6, 1, 4, 1, 343, 1, 4, 5)).setObjects(("RMM2-MIB", "eventType"), ("RMM2-MIB", "eventDesc"))
if mibBuilder.loadTexts: generic.setStatus('current')
if mibBuilder.loadTexts: generic.setDescription('This trap is used for any other notification message.')
logout = NotificationType((1, 3, 6, 1, 4, 1, 343, 1, 4, 6)).setObjects(("RMM2-MIB", "userLoginName"), ("RMM2-MIB", "remoteHost"))
if mibBuilder.loadTexts: logout.setStatus('current')
if mibBuilder.loadTexts: logout.setDescription('User logout.')
mibBuilder.exportSymbols("RMM2-MIB", securityViolation=securityViolation, eventDesc=eventDesc, users=users, hostActions=hostActions, netmask=netmask, board=board, PYSNMP_MODULE_ID=intelRmm2, userLoginName=userLoginName, hostReset=hostReset, eventType=eventType, resetBoard=resetBoard, traps=traps, remoteHost=remoteHost, intelRmm2=intelRmm2, hostInfo=hostInfo, info=info, common=common, host=host, serialNumber=serialNumber, ip=ip, checkHostPower=checkHostPower, hostPower=hostPower, firmwareVersion=firmwareVersion, generic=generic, dummyTrap=dummyTrap, logout=logout, actions=actions, mac=mac, rmm2=rmm2, gateway=gateway, loginsuccess=loginsuccess, hardwareRev=hardwareRev, loginfailed=loginfailed)
