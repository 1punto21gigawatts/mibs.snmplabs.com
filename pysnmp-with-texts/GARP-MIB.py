#
# PySNMP MIB module GARP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/GARP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:18:10 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, Unsigned32, ModuleIdentity, enterprises, iso, MibIdentifier, Counter64, NotificationType, Bits, ObjectIdentity, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Gauge32, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Unsigned32", "ModuleIdentity", "enterprises", "iso", "MibIdentifier", "Counter64", "NotificationType", "Bits", "ObjectIdentity", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Gauge32", "Integer32")
DisplayString, TextualConvention, PhysAddress = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "PhysAddress")
cabletron = MibIdentifier((1, 3, 6, 1, 4, 1, 52))
mibs = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4))
ctronExp = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2))
ctVLANMib = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 12))
ctVLANMgr = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1))
ctGarp = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 3))
ctGarpTables = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 3, 2))
garpApplicationTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 3, 2, 1), )
if mibBuilder.loadTexts: garpApplicationTable.setStatus('mandatory')
if mibBuilder.loadTexts: garpApplicationTable.setDescription('A list of GarpApplicationEntries')
garpApplicationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 3, 2, 1, 1), ).setIndexNames((0, "GARP-MIB", "garpApplicationAppType"))
if mibBuilder.loadTexts: garpApplicationEntry.setStatus('mandatory')
if mibBuilder.loadTexts: garpApplicationEntry.setDescription('An interface containing the objects associated with GARP Applications.')
garpApplicationAppType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 3, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: garpApplicationAppType.setStatus('mandatory')
if mibBuilder.loadTexts: garpApplicationAppType.setDescription('Protocol that this application belongs to. A 1 represents GMRP and a 2 represents GVRP.')
garpApplicationName = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 3, 2, 1, 1, 2), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: garpApplicationName.setStatus('mandatory')
if mibBuilder.loadTexts: garpApplicationName.setDescription('The MAC Address associated with this GARP Application.')
garpApplicationFailedRegistrations = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 3, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: garpApplicationFailedRegistrations.setStatus('mandatory')
if mibBuilder.loadTexts: garpApplicationFailedRegistrations.setDescription('The current value of the Failed Registrations counter maintained for a GARP Attribute type.')
garpApplicationOperationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 3, 2, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: garpApplicationOperationStatus.setStatus('mandatory')
if mibBuilder.loadTexts: garpApplicationOperationStatus.setDescription('Operational status of this application for all participants. 1 represents enabled and a 2 represents disabled.')
garpPortOperationTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 3, 2, 2), )
if mibBuilder.loadTexts: garpPortOperationTable.setStatus('mandatory')
if mibBuilder.loadTexts: garpPortOperationTable.setDescription('A list of GarpPortOperationEntry.')
garpPortOperationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 3, 2, 2, 1), ).setIndexNames((0, "GARP-MIB", "garpPortOperationAppType"), (0, "GARP-MIB", "garpPortOperationPort"))
if mibBuilder.loadTexts: garpPortOperationEntry.setStatus('mandatory')
if mibBuilder.loadTexts: garpPortOperationEntry.setDescription('An interface containing the objects associated with Garp Applications operation status')
garpPortOperationAppType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 3, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: garpPortOperationAppType.setStatus('mandatory')
if mibBuilder.loadTexts: garpPortOperationAppType.setDescription('Protocol that this operation status belongs to. A 1 represents GMRP and 2 represents GVRP.')
garpPortOperationPort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 3, 2, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: garpPortOperationPort.setStatus('mandatory')
if mibBuilder.loadTexts: garpPortOperationPort.setDescription('Port number that this operation status belongs to.')
garpPortOperationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 3, 2, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: garpPortOperationStatus.setStatus('mandatory')
if mibBuilder.loadTexts: garpPortOperationStatus.setDescription('The port operational status for this application. A 1 represents enabled and 2 represents disabled.')
garpTimerTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 3, 2, 3), )
if mibBuilder.loadTexts: garpTimerTable.setStatus('mandatory')
if mibBuilder.loadTexts: garpTimerTable.setDescription('A list of GarpTimerEntry')
garpTimerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 3, 2, 3, 1), ).setIndexNames((0, "GARP-MIB", "garpTimerAttributeAppType"), (0, "GARP-MIB", "garpTimerAttributePort"))
if mibBuilder.loadTexts: garpTimerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: garpTimerEntry.setDescription('An interface containing the objects associated with Garp timers.')
garpTimerAttributeAppType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 3, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: garpTimerAttributeAppType.setStatus('mandatory')
if mibBuilder.loadTexts: garpTimerAttributeAppType.setDescription('Protocol that this timer belongs to. A 1 represents GMRP and a 2 represents GVRP.')
garpTimerAttributePort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 3, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: garpTimerAttributePort.setStatus('mandatory')
if mibBuilder.loadTexts: garpTimerAttributePort.setDescription('Port number that this timer belongs to.')
garpTimerAttributeJoin = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 3, 2, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: garpTimerAttributeJoin.setStatus('mandatory')
if mibBuilder.loadTexts: garpTimerAttributeJoin.setDescription('The current value of the join time in use by a GARP Particicpant. The value is in centiseconds.')
garpTimerAttributeLeave = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 3, 2, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: garpTimerAttributeLeave.setStatus('mandatory')
if mibBuilder.loadTexts: garpTimerAttributeLeave.setDescription('The current value of the leave time in use by a GARP Particicpant. The value is in centiseconds.')
garpTimerAttributeLeaveAll = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 3, 2, 3, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: garpTimerAttributeLeaveAll.setStatus('mandatory')
if mibBuilder.loadTexts: garpTimerAttributeLeaveAll.setDescription('The current value of the leaveAll time in use by a GARP Particicpant. The value is in centiseconds.')
garpAttributeTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 3, 2, 4), )
if mibBuilder.loadTexts: garpAttributeTable.setStatus('mandatory')
if mibBuilder.loadTexts: garpAttributeTable.setDescription('A list of GARP Attributes')
garpAttributeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 3, 2, 4, 1), ).setIndexNames((0, "GARP-MIB", "garpAttributeAppType"), (0, "GARP-MIB", "garpAttributePort"), (0, "GARP-MIB", "garpAttributeValue"), (0, "GARP-MIB", "garpAttributeGIPContextID"))
if mibBuilder.loadTexts: garpAttributeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: garpAttributeEntry.setDescription('An interface containing the objects associated with GARP Attributes.')
garpAttributeAppType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 3, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: garpAttributeAppType.setStatus('mandatory')
if mibBuilder.loadTexts: garpAttributeAppType.setDescription('Protocol that this attribute belongs to. A 1 represents GMRP and 2 represents GVRP.')
garpAttributePort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 3, 2, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: garpAttributePort.setStatus('mandatory')
if mibBuilder.loadTexts: garpAttributePort.setDescription('Port number that this attribute belongs to.')
garpAttributeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 3, 2, 4, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: garpAttributeValue.setStatus('mandatory')
if mibBuilder.loadTexts: garpAttributeValue.setDescription('Value associated with this GARP Attribute.')
garpAttributeGIPContextID = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 3, 2, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: garpAttributeGIPContextID.setStatus('mandatory')
if mibBuilder.loadTexts: garpAttributeGIPContextID.setDescription('GIP Context ID for this GARP Application.')
garpAttributeType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 3, 2, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: garpAttributeType.setStatus('mandatory')
if mibBuilder.loadTexts: garpAttributeType.setDescription('The GARP Attribute type for a given GARP Application.')
garpAttributeProtoAdminCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 3, 2, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal-Participan", 0), ("non-Participan", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: garpAttributeProtoAdminCtrl.setStatus('mandatory')
if mibBuilder.loadTexts: garpAttributeProtoAdminCtrl.setDescription('The Attributes protocol administrative control parameter.')
garpAttributeRegisControl = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 3, 2, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("garpRegistrarNormal", 0), ("garpRegistrarFixed", 1), ("garpRegistrarForbidden", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: garpAttributeRegisControl.setStatus('mandatory')
if mibBuilder.loadTexts: garpAttributeRegisControl.setDescription('The attributes registrar admin control parameter.')
garpAttributeStateValue = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 3, 2, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23))).clone(namedValues=NamedValues(("va-mt", 0), ("va-lv", 1), ("vp-mt", 2), ("vp-lv", 3), ("vo-mt", 4), ("vo-lv", 5), ("va-in", 6), ("vp-in", 7), ("vo-in", 8), ("aa-mt", 9), ("aa-lv", 10), ("aa-in", 11), ("ap-in", 12), ("ao-in", 13), ("qa-mt", 14), ("qa-lv", 15), ("qa-in", 16), ("qp-in", 17), ("qo-in", 18), ("la-mt", 19), ("la-lv", 20), ("lo-mt", 21), ("lo-lv", 22), ("la-in", 23)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: garpAttributeStateValue.setStatus('mandatory')
if mibBuilder.loadTexts: garpAttributeStateValue.setDescription('The value of the combined Applicant and Registrar state for a GARP ATtribute.')
garpAttributeOrigOfLastPDU = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 12, 1, 3, 2, 4, 1, 9), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: garpAttributeOrigOfLastPDU.setStatus('optional')
if mibBuilder.loadTexts: garpAttributeOrigOfLastPDU.setDescription('MAC Address of the last pdu that caused a state change for a given GARP Attribute.')
mibBuilder.exportSymbols("GARP-MIB", garpPortOperationStatus=garpPortOperationStatus, garpAttributeOrigOfLastPDU=garpAttributeOrigOfLastPDU, garpTimerAttributeLeave=garpTimerAttributeLeave, garpPortOperationAppType=garpPortOperationAppType, garpAttributeGIPContextID=garpAttributeGIPContextID, garpAttributeType=garpAttributeType, ctVLANMib=ctVLANMib, ctronExp=ctronExp, garpPortOperationTable=garpPortOperationTable, garpTimerEntry=garpTimerEntry, ctGarpTables=ctGarpTables, garpAttributeProtoAdminCtrl=garpAttributeProtoAdminCtrl, garpTimerAttributeAppType=garpTimerAttributeAppType, garpAttributeValue=garpAttributeValue, garpTimerAttributeLeaveAll=garpTimerAttributeLeaveAll, garpAttributeStateValue=garpAttributeStateValue, garpApplicationTable=garpApplicationTable, garpTimerAttributeJoin=garpTimerAttributeJoin, ctGarp=ctGarp, garpPortOperationEntry=garpPortOperationEntry, garpTimerAttributePort=garpTimerAttributePort, garpApplicationAppType=garpApplicationAppType, garpApplicationFailedRegistrations=garpApplicationFailedRegistrations, mibs=mibs, garpTimerTable=garpTimerTable, garpAttributeRegisControl=garpAttributeRegisControl, ctVLANMgr=ctVLANMgr, cabletron=cabletron, garpApplicationName=garpApplicationName, garpApplicationOperationStatus=garpApplicationOperationStatus, garpApplicationEntry=garpApplicationEntry, garpAttributeEntry=garpAttributeEntry, garpAttributeTable=garpAttributeTable, garpAttributePort=garpAttributePort, garpAttributeAppType=garpAttributeAppType, garpPortOperationPort=garpPortOperationPort)
