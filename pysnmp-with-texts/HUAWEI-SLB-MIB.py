#
# PySNMP MIB module HUAWEI-SLB-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HUAWEI-SLB-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:48:29 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint")
hwDatacomm, = mibBuilder.importSymbols("HUAWEI-MIB", "hwDatacomm")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
MibIdentifier, TimeTicks, ModuleIdentity, Integer32, Gauge32, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Bits, iso, Counter32, ObjectIdentity, Unsigned32, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "TimeTicks", "ModuleIdentity", "Integer32", "Gauge32", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Bits", "iso", "Counter32", "ObjectIdentity", "Unsigned32", "Counter64")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
hwSLBMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 5, 25, 225))
hwSLBMIB.setRevisions(('2009-11-30 12:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hwSLBMIB.setRevisionsDescriptions(('Initial revision.',))
if mibBuilder.loadTexts: hwSLBMIB.setLastUpdated('200911301200Z')
if mibBuilder.loadTexts: hwSLBMIB.setOrganization('Huawei Technologies Co., Ltd.')
if mibBuilder.loadTexts: hwSLBMIB.setContactInfo(' NanJing Institute,Huawei Technologies Co.,Ltd. HuiHong Mansion,No.91 BaiXia Rd. NanJing, P.R. of China Zipcode:210001 Http://www.huawei.com E-mail:support@huawei.com ')
if mibBuilder.loadTexts: hwSLBMIB.setDescription('The MIB describes Server Load Balance')
hwSlbMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 225, 1))
hwSlbTrapObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 225, 1, 1))
hwIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 225, 1, 1, 1), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwIpAddress.setStatus('current')
if mibBuilder.loadTexts: hwIpAddress.setDescription('The object indicates the IP address of a load balance member.')
hwMemberName = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 225, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwMemberName.setStatus('current')
if mibBuilder.loadTexts: hwMemberName.setDescription("The object indicates the member in a load balance group, each member in the load balance group will provide same services to clients, system will select one member to serve the clients' requests.")
hwGroupName = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 225, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwGroupName.setStatus('current')
if mibBuilder.loadTexts: hwGroupName.setDescription('The object indicates the group name of members, each group members may contain same services and typically reside in the same physical location in a data center. ')
hwPort = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 225, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwPort.setStatus('current')
if mibBuilder.loadTexts: hwPort.setDescription('The TCP or UDP port number, the range can from 1 to 65535.')
hwProbeName = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 225, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwProbeName.setStatus('current')
if mibBuilder.loadTexts: hwProbeName.setDescription('The object indicates a probe that is used to detect failures for members in a group. When you initially configure a health probe, you should define its type and name.')
hwProbeType = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 225, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("icmp", 1), ("tcp", 2), ("udp", 3), ("http", 4)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwProbeType.setStatus('current')
if mibBuilder.loadTexts: hwProbeType.setDescription('The object indicates probe type. S9300 support ICMP, TCP, UDP, HTTP probe types.')
hwConnectionNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 225, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4000000))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwConnectionNum.setStatus('current')
if mibBuilder.loadTexts: hwConnectionNum.setDescription('The object indicates the connection number of a group member, usually five-tuple is used to describe a connection(source IP, detination IP, source port, destination port, protocal).')
hwMasterGroup = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 225, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwMasterGroup.setStatus('current')
if mibBuilder.loadTexts: hwMasterGroup.setDescription('The object indicates the master group. In order to improve reliability, S9300 can bind master group and backup group together to provide load balance service, operators can config two load balance group: one as master, the other as backup')
hwMasterGroupActiveNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 225, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwMasterGroupActiveNum.setStatus('current')
if mibBuilder.loadTexts: hwMasterGroupActiveNum.setDescription('The object indicates the active member number in the master server group.')
hwMasterGroupTotalNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 225, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwMasterGroupTotalNum.setStatus('current')
if mibBuilder.loadTexts: hwMasterGroupTotalNum.setDescription('The object indicates the total number of in-service members in the master group.')
hwBackupGroup = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 225, 1, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwBackupGroup.setStatus('current')
if mibBuilder.loadTexts: hwBackupGroup.setDescription('The object indicates the backup group. In order to improve reliability, S9300 can bind master group and backup group together to provide load balance service, operators can config two load balance group one as master, the other as backup')
hwBackupGroupActiveNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 225, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwBackupGroupActiveNum.setStatus('current')
if mibBuilder.loadTexts: hwBackupGroupActiveNum.setDescription('The object indicates the active member number in the backup server group.')
hwBackupGroupTotalNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 225, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwBackupGroupTotalNum.setStatus('current')
if mibBuilder.loadTexts: hwBackupGroupTotalNum.setDescription('The object indicates the total number of in-service members in the backup group.')
hwActionName = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 225, 1, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwActionName.setStatus('current')
if mibBuilder.loadTexts: hwActionName.setDescription('The object indicates the policy action. Operators can define different actions for clients request: forward packets, drop packets, load balance, sticky load balance.')
hwCurWorkGroupName = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 225, 1, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwCurWorkGroupName.setStatus('current')
if mibBuilder.loadTexts: hwCurWorkGroupName.setDescription('The object indicates the current working group, the working group may be master group or backup group.')
hwSlbNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 225, 1, 2))
hwMemberInstanceStateUp = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 225, 1, 2, 1)).setObjects(("HUAWEI-SLB-MIB", "hwGroupName"), ("HUAWEI-SLB-MIB", "hwMemberName"), ("HUAWEI-SLB-MIB", "hwIpAddress"), ("HUAWEI-SLB-MIB", "hwPort"))
if mibBuilder.loadTexts: hwMemberInstanceStateUp.setStatus('current')
if mibBuilder.loadTexts: hwMemberInstanceStateUp.setDescription("Member state changes to up. S9300 will select the member to accept clients' new requests.")
hwMemberInstanceStateDown = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 225, 1, 2, 2)).setObjects(("HUAWEI-SLB-MIB", "hwGroupName"), ("HUAWEI-SLB-MIB", "hwMemberName"), ("HUAWEI-SLB-MIB", "hwIpAddress"), ("HUAWEI-SLB-MIB", "hwPort"))
if mibBuilder.loadTexts: hwMemberInstanceStateDown.setStatus('current')
if mibBuilder.loadTexts: hwMemberInstanceStateDown.setDescription("Member state changes to down. S9300 will not select the member when clients' new requests come.")
hwGroupStateSwitchover = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 225, 1, 2, 3)).setObjects(("HUAWEI-SLB-MIB", "hwActionName"), ("HUAWEI-SLB-MIB", "hwMasterGroup"), ("HUAWEI-SLB-MIB", "hwMasterGroupActiveNum"), ("HUAWEI-SLB-MIB", "hwMasterGroupTotalNum"), ("HUAWEI-SLB-MIB", "hwBackupGroup"), ("HUAWEI-SLB-MIB", "hwBackupGroupActiveNum"), ("HUAWEI-SLB-MIB", "hwBackupGroupTotalNum"), ("HUAWEI-SLB-MIB", "hwCurWorkGroupName"))
if mibBuilder.loadTexts: hwGroupStateSwitchover.setStatus('current')
if mibBuilder.loadTexts: hwGroupStateSwitchover.setDescription("When there are members' state change, current work group may change from master group to backup group or from backup group to master group.")
hwMemberConnectionFull = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 225, 1, 2, 4)).setObjects(("HUAWEI-SLB-MIB", "hwMemberName"), ("HUAWEI-SLB-MIB", "hwConnectionNum"))
if mibBuilder.loadTexts: hwMemberConnectionFull.setStatus('current')
if mibBuilder.loadTexts: hwMemberConnectionFull.setDescription('The connections for the physical member attains threshold.')
hwMemberConnectionFullRestore = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 225, 1, 2, 5)).setObjects(("HUAWEI-SLB-MIB", "hwMemberName"), ("HUAWEI-SLB-MIB", "hwConnectionNum"))
if mibBuilder.loadTexts: hwMemberConnectionFullRestore.setStatus('current')
if mibBuilder.loadTexts: hwMemberConnectionFullRestore.setDescription('The connections for the physical member restores to normal.')
hwMemberInstanceConnectionFull = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 225, 1, 2, 6)).setObjects(("HUAWEI-SLB-MIB", "hwGroupName"), ("HUAWEI-SLB-MIB", "hwMemberName"), ("HUAWEI-SLB-MIB", "hwConnectionNum"))
if mibBuilder.loadTexts: hwMemberInstanceConnectionFull.setStatus('current')
if mibBuilder.loadTexts: hwMemberInstanceConnectionFull.setDescription('The connections for the group member attains threshold.')
hwMemberInstanceConnectionFullRestore = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 225, 1, 2, 7)).setObjects(("HUAWEI-SLB-MIB", "hwGroupName"), ("HUAWEI-SLB-MIB", "hwMemberName"), ("HUAWEI-SLB-MIB", "hwConnectionNum"))
if mibBuilder.loadTexts: hwMemberInstanceConnectionFullRestore.setStatus('current')
if mibBuilder.loadTexts: hwMemberInstanceConnectionFullRestore.setDescription('The connections for the group member restores nomal.')
hwProbeInstanceStateUp = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 225, 1, 2, 8)).setObjects(("HUAWEI-SLB-MIB", "hwGroupName"), ("HUAWEI-SLB-MIB", "hwMemberName"), ("HUAWEI-SLB-MIB", "hwProbeName"), ("HUAWEI-SLB-MIB", "hwProbeType"), ("HUAWEI-SLB-MIB", "hwIpAddress"), ("HUAWEI-SLB-MIB", "hwPort"))
if mibBuilder.loadTexts: hwProbeInstanceStateUp.setStatus('current')
if mibBuilder.loadTexts: hwProbeInstanceStateUp.setDescription('Probe is used to check load balance member health, when there are expected response from load balance member, probe state will change to up.')
hwProbeInstanceStateDown = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 225, 1, 2, 9)).setObjects(("HUAWEI-SLB-MIB", "hwGroupName"), ("HUAWEI-SLB-MIB", "hwMemberName"), ("HUAWEI-SLB-MIB", "hwProbeName"), ("HUAWEI-SLB-MIB", "hwProbeType"), ("HUAWEI-SLB-MIB", "hwIpAddress"), ("HUAWEI-SLB-MIB", "hwPort"))
if mibBuilder.loadTexts: hwProbeInstanceStateDown.setStatus('current')
if mibBuilder.loadTexts: hwProbeInstanceStateDown.setDescription('Probe is used to check load balance member health, when there are no expected response from load balance member, probe state will change to down.')
hwSlbConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 225, 1, 3))
hwSlbGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 225, 1, 3, 1))
hwSlbTrapObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 225, 1, 3, 1, 1)).setObjects(("HUAWEI-SLB-MIB", "hwIpAddress"), ("HUAWEI-SLB-MIB", "hwMemberName"), ("HUAWEI-SLB-MIB", "hwGroupName"), ("HUAWEI-SLB-MIB", "hwPort"), ("HUAWEI-SLB-MIB", "hwProbeName"), ("HUAWEI-SLB-MIB", "hwProbeType"), ("HUAWEI-SLB-MIB", "hwConnectionNum"), ("HUAWEI-SLB-MIB", "hwActionName"), ("HUAWEI-SLB-MIB", "hwMasterGroup"), ("HUAWEI-SLB-MIB", "hwMasterGroupActiveNum"), ("HUAWEI-SLB-MIB", "hwMasterGroupTotalNum"), ("HUAWEI-SLB-MIB", "hwBackupGroup"), ("HUAWEI-SLB-MIB", "hwBackupGroupActiveNum"), ("HUAWEI-SLB-MIB", "hwBackupGroupTotalNum"), ("HUAWEI-SLB-MIB", "hwCurWorkGroupName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwSlbTrapObjectsGroup = hwSlbTrapObjectsGroup.setStatus('current')
if mibBuilder.loadTexts: hwSlbTrapObjectsGroup.setDescription('The group of objects that comprise SlbTrapObjects.')
hwSlbNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 225, 1, 3, 1, 2)).setObjects(("HUAWEI-SLB-MIB", "hwMemberInstanceStateUp"), ("HUAWEI-SLB-MIB", "hwMemberInstanceStateDown"), ("HUAWEI-SLB-MIB", "hwGroupStateSwitchover"), ("HUAWEI-SLB-MIB", "hwMemberInstanceConnectionFull"), ("HUAWEI-SLB-MIB", "hwMemberInstanceConnectionFullRestore"), ("HUAWEI-SLB-MIB", "hwProbeInstanceStateUp"), ("HUAWEI-SLB-MIB", "hwProbeInstanceStateDown"), ("HUAWEI-SLB-MIB", "hwMemberConnectionFull"), ("HUAWEI-SLB-MIB", "hwMemberConnectionFullRestore"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwSlbNotificationsGroup = hwSlbNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: hwSlbNotificationsGroup.setDescription('The group of objects that comprise SlbNotifications.')
hwSlbCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 225, 1, 3, 2))
hwSlbCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2011, 5, 25, 225, 1, 3, 2, 1)).setObjects(("HUAWEI-SLB-MIB", "hwSlbTrapObjectsGroup"), ("HUAWEI-SLB-MIB", "hwSlbNotificationsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwSlbCompliance = hwSlbCompliance.setStatus('current')
if mibBuilder.loadTexts: hwSlbCompliance.setDescription('The compliance statement for entities implementing Huawei server load balance MIB.')
mibBuilder.exportSymbols("HUAWEI-SLB-MIB", hwSlbCompliances=hwSlbCompliances, hwMemberInstanceConnectionFullRestore=hwMemberInstanceConnectionFullRestore, hwMemberName=hwMemberName, hwConnectionNum=hwConnectionNum, hwSlbMibObjects=hwSlbMibObjects, hwSlbNotifications=hwSlbNotifications, hwIpAddress=hwIpAddress, hwBackupGroupTotalNum=hwBackupGroupTotalNum, hwMemberInstanceConnectionFull=hwMemberInstanceConnectionFull, hwProbeInstanceStateDown=hwProbeInstanceStateDown, hwSlbNotificationsGroup=hwSlbNotificationsGroup, PYSNMP_MODULE_ID=hwSLBMIB, hwSlbGroups=hwSlbGroups, hwBackupGroup=hwBackupGroup, hwCurWorkGroupName=hwCurWorkGroupName, hwSlbCompliance=hwSlbCompliance, hwMasterGroupTotalNum=hwMasterGroupTotalNum, hwSlbTrapObjects=hwSlbTrapObjects, hwProbeType=hwProbeType, hwGroupStateSwitchover=hwGroupStateSwitchover, hwMemberConnectionFull=hwMemberConnectionFull, hwSlbConformance=hwSlbConformance, hwMemberInstanceStateUp=hwMemberInstanceStateUp, hwMemberInstanceStateDown=hwMemberInstanceStateDown, hwMemberConnectionFullRestore=hwMemberConnectionFullRestore, hwProbeInstanceStateUp=hwProbeInstanceStateUp, hwSLBMIB=hwSLBMIB, hwBackupGroupActiveNum=hwBackupGroupActiveNum, hwSlbTrapObjectsGroup=hwSlbTrapObjectsGroup, hwMasterGroupActiveNum=hwMasterGroupActiveNum, hwActionName=hwActionName, hwPort=hwPort, hwGroupName=hwGroupName, hwProbeName=hwProbeName, hwMasterGroup=hwMasterGroup)
