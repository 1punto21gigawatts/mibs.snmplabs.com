#
# PySNMP MIB module HH3C-DOT11-CFGEXT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HH3C-DOT11-CFGEXT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:26:13 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion")
hh3cDot11, = mibBuilder.importSymbols("HH3C-DOT11-REF-MIB", "hh3cDot11")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, TimeTicks, iso, Bits, ModuleIdentity, Unsigned32, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, IpAddress, Counter32, Integer32, MibIdentifier, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "TimeTicks", "iso", "Bits", "ModuleIdentity", "Unsigned32", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "IpAddress", "Counter32", "Integer32", "MibIdentifier", "NotificationType")
TextualConvention, RowStatus, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "TruthValue", "DisplayString")
hh3cDot11CFGEXT = ModuleIdentity((1, 3, 6, 1, 4, 1, 25506, 2, 75, 6))
hh3cDot11CFGEXT.setRevisions(('2010-06-02 14:00', '2007-04-25 20:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hh3cDot11CFGEXT.setRevisionsDescriptions(('Modified to add new nodes.', 'The initial revision of this MIB module.',))
if mibBuilder.loadTexts: hh3cDot11CFGEXT.setLastUpdated('201006021400Z')
if mibBuilder.loadTexts: hh3cDot11CFGEXT.setOrganization('H3C Technologies Co., Ltd.')
if mibBuilder.loadTexts: hh3cDot11CFGEXT.setContactInfo('Platform Team H3C Technologies Co., Ltd. Hai-Dian District Beijing P.R. China Http://www.h3c.com Zip:100085')
if mibBuilder.loadTexts: hh3cDot11CFGEXT.setDescription('This MIB provides information for WLAN configuration extended. The hh3c-dot11-cfg.mib define MIB objects for WLAN basic configuration, while this MIB will define MIB objects for load balance these kinds feature. GLOSSARY IEEE 802.11 Standard to encourage interoperability among wireless networking equipment. Access point (AP) Transmitter/receiver (transceiver) device that commonly connects and transports data between a wireless network and a wired network. Access control (AC) To control and manage multi-APs, it will bridge wireless and wired network. Fat AP Applied in the home, SOHO and so on, and it could work independently without help from AC. Fit AP Applied in the enterprise environment, it will work under the control and management from AC. Control And Provisioning of Wireless Access Points Protocol The short name of protocol is CAPWAP. AC will control and manage AP by CAPWAP tunnel protocol defined by IETF. Also, a data tunnel will be set up between AC and AP. BSS IEEE 802.11 Basic Service Set (Radio Cell). The BSS of an AP comprises of the stations directly associating with the AP. Radio The chip set to receive and send wireless signal. Association The service used to establish access point or station mapping and enable station invocation of the distribution system services. (Wireless clients attempt to connect to access points.) Basic Rate A data rate that is mandatory for client devices to support in order for them to achieve successful association. MSDU MAC Service Data Unit, it is frame format defined by 802.11. TU It is 1,024 microseconds (ms), which is about 1 millisecond. AKM The authentication and key management method defined by 802.11i, and which includes 802.1x and pre-shared key.')
hh3cDot11LoadBalance = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 75, 6, 1))
hh3cDot11LBGlobalGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 75, 6, 1, 1))
hh3cDot11LoadBalanceTrafficEnable = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 75, 6, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot11LoadBalanceTrafficEnable.setStatus('current')
if mibBuilder.loadTexts: hh3cDot11LoadBalanceTrafficEnable.setDescription('Represents whether enable load balancing according to station traffic.')
hh3cDot11LoadBalanceTrafficThres = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 75, 6, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot11LoadBalanceTrafficThres.setStatus('current')
if mibBuilder.loadTexts: hh3cDot11LoadBalanceTrafficThres.setDescription('Represents the threshold value for Traffic based load balancing.')
hh3cDot11LoadBalanceSessionEnable = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 75, 6, 1, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot11LoadBalanceSessionEnable.setStatus('current')
if mibBuilder.loadTexts: hh3cDot11LoadBalanceSessionEnable.setDescription('Represents whether enable load balancing according to station session number.')
hh3cDot11LoadBalanceSessionThres = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 75, 6, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot11LoadBalanceSessionThres.setStatus('current')
if mibBuilder.loadTexts: hh3cDot11LoadBalanceSessionThres.setDescription('Represents the threshold value for session number based load balancing.')
hh3cDot11LoadBalanceTrafficGap = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 75, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 40)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot11LoadBalanceTrafficGap.setStatus('current')
if mibBuilder.loadTexts: hh3cDot11LoadBalanceTrafficGap.setDescription('Traffic gap threshold. Load balancing is carried out for a radio when the traffic threshold and session gap are exceeded.')
hh3cDot11LoadBalanceSessionGap = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 75, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot11LoadBalanceSessionGap.setStatus('current')
if mibBuilder.loadTexts: hh3cDot11LoadBalanceSessionGap.setDescription('Session gap threshold. Load balancing is carried out for a radio when the session threshold and session gap are exceeded.')
hh3cDot11LBTrafficThresKbps = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 75, 6, 1, 1, 7), Integer32()).setUnits('kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot11LBTrafficThresKbps.setStatus('current')
if mibBuilder.loadTexts: hh3cDot11LBTrafficThresKbps.setDescription('Represents the threshold value for Traffic based load balancing.')
hh3cDot11LBTrafficGapKbps = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 75, 6, 1, 1, 8), Integer32()).setUnits('kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot11LBTrafficGapKbps.setStatus('current')
if mibBuilder.loadTexts: hh3cDot11LBTrafficGapKbps.setDescription('Traffic gap threshold. Load balancing is carried out for a radio when the traffic threshold gap are exceeded.')
hh3cDot11LBRadioGroupTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 75, 6, 1, 2), )
if mibBuilder.loadTexts: hh3cDot11LBRadioGroupTable.setStatus('current')
if mibBuilder.loadTexts: hh3cDot11LBRadioGroupTable.setDescription('This table defines load balance radio group.')
hh3cDot11LBRadioGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 75, 6, 1, 2, 1), ).setIndexNames((0, "HH3C-DOT11-CFGEXT-MIB", "hh3cDot11LBRadioGroupId"))
if mibBuilder.loadTexts: hh3cDot11LBRadioGroupEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cDot11LBRadioGroupEntry.setDescription('Each entry contains information of one load balance radio group.')
hh3cDot11LBRadioGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 6, 1, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hh3cDot11LBRadioGroupId.setStatus('current')
if mibBuilder.loadTexts: hh3cDot11LBRadioGroupId.setDescription('Represents load balance radio group ID.')
hh3cDot11LBRadioGroupDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 6, 1, 2, 1, 2), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDot11LBRadioGroupDesc.setStatus('current')
if mibBuilder.loadTexts: hh3cDot11LBRadioGroupDesc.setDescription('Represents the description of load balance radio group.')
hh3cDot11LBRadioGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 6, 1, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDot11LBRadioGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cDot11LBRadioGroupRowStatus.setDescription('The row status of this table entry.')
mibBuilder.exportSymbols("HH3C-DOT11-CFGEXT-MIB", hh3cDot11LBRadioGroupId=hh3cDot11LBRadioGroupId, hh3cDot11LBRadioGroupDesc=hh3cDot11LBRadioGroupDesc, hh3cDot11LoadBalanceTrafficGap=hh3cDot11LoadBalanceTrafficGap, hh3cDot11LBRadioGroupTable=hh3cDot11LBRadioGroupTable, hh3cDot11LBTrafficGapKbps=hh3cDot11LBTrafficGapKbps, hh3cDot11LoadBalance=hh3cDot11LoadBalance, hh3cDot11LBTrafficThresKbps=hh3cDot11LBTrafficThresKbps, hh3cDot11LoadBalanceSessionEnable=hh3cDot11LoadBalanceSessionEnable, hh3cDot11LoadBalanceTrafficThres=hh3cDot11LoadBalanceTrafficThres, hh3cDot11LBRadioGroupRowStatus=hh3cDot11LBRadioGroupRowStatus, hh3cDot11CFGEXT=hh3cDot11CFGEXT, hh3cDot11LoadBalanceTrafficEnable=hh3cDot11LoadBalanceTrafficEnable, hh3cDot11LoadBalanceSessionThres=hh3cDot11LoadBalanceSessionThres, PYSNMP_MODULE_ID=hh3cDot11CFGEXT, hh3cDot11LBGlobalGroup=hh3cDot11LBGlobalGroup, hh3cDot11LBRadioGroupEntry=hh3cDot11LBRadioGroupEntry, hh3cDot11LoadBalanceSessionGap=hh3cDot11LoadBalanceSessionGap)
