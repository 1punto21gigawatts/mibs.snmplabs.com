#
# PySNMP MIB module PACEMAKER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PACEMAKER-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:36:02 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
netSnmp, = mibBuilder.importSymbols("NET-SNMP-MIB", "netSnmp")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, Counter32, Bits, Unsigned32, Integer32, Gauge32, NotificationType, ObjectIdentity, enterprises, iso, IpAddress, TimeTicks, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Counter32", "Bits", "Unsigned32", "Integer32", "Gauge32", "NotificationType", "ObjectIdentity", "enterprises", "iso", "IpAddress", "TimeTicks", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity")
RowStatus, StorageType, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "StorageType", "DisplayString", "TextualConvention")
pacemaker = ModuleIdentity((1, 3, 6, 1, 4, 1, 32723))
pacemaker.setRevisions(('2009-10-05 11:15', '2009-10-06 21:15',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: pacemaker.setRevisionsDescriptions(('First draft', 'Corrections after feedback from beekhof',))
if mibBuilder.loadTexts: pacemaker.setLastUpdated('200901051115Z')
if mibBuilder.loadTexts: pacemaker.setOrganization('www.clusterlabs.org')
if mibBuilder.loadTexts: pacemaker.setContactInfo('name: Michael Schwartzkopff email: misch at schwartzkopff.org')
if mibBuilder.loadTexts: pacemaker.setDescription('MIB objects for the pacemaker cluster manager implementation')
pacemakerNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 32723, 1))
pacemakerNotificationNode = MibScalar((1, 3, 6, 1, 4, 1, 32723, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: pacemakerNotificationNode.setStatus('current')
if mibBuilder.loadTexts: pacemakerNotificationNode.setDescription('The node on which the status change happened.')
pacemakerNotificationResource = MibScalar((1, 3, 6, 1, 4, 1, 32723, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: pacemakerNotificationResource.setStatus('current')
if mibBuilder.loadTexts: pacemakerNotificationResource.setDescription('The name of the resource that changed the status.')
pacemakerNotificationOperation = MibScalar((1, 3, 6, 1, 4, 1, 32723, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: pacemakerNotificationOperation.setStatus('current')
if mibBuilder.loadTexts: pacemakerNotificationOperation.setDescription('The operation that caused the status change.')
pacemakerNotificationDescription = MibScalar((1, 3, 6, 1, 4, 1, 32723, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: pacemakerNotificationDescription.setStatus('current')
if mibBuilder.loadTexts: pacemakerNotificationDescription.setDescription('The textual output relevant error code of the operation (if any) that caused the status change.')
pacemakerNotificationStatus = MibScalar((1, 3, 6, 1, 4, 1, 32723, 1, 5), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: pacemakerNotificationStatus.setStatus('current')
if mibBuilder.loadTexts: pacemakerNotificationStatus.setDescription('The numerical representation of the status of the operation.')
pacemakerNotificationReturnCode = MibScalar((1, 3, 6, 1, 4, 1, 32723, 1, 6), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: pacemakerNotificationReturnCode.setStatus('current')
if mibBuilder.loadTexts: pacemakerNotificationReturnCode.setDescription('The return code of the operation.')
pacemakerNotificationTargetReturnCode = MibScalar((1, 3, 6, 1, 4, 1, 32723, 1, 7), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: pacemakerNotificationTargetReturnCode.setStatus('current')
if mibBuilder.loadTexts: pacemakerNotificationTargetReturnCode.setDescription('The expected return code of the operation.')
mibBuilder.exportSymbols("PACEMAKER-MIB", pacemakerNotificationReturnCode=pacemakerNotificationReturnCode, pacemakerNotificationNode=pacemakerNotificationNode, pacemakerNotificationResource=pacemakerNotificationResource, pacemakerNotificationStatus=pacemakerNotificationStatus, pacemakerNotificationTargetReturnCode=pacemakerNotificationTargetReturnCode, pacemakerNotificationOperation=pacemakerNotificationOperation, pacemakerNotification=pacemakerNotification, PYSNMP_MODULE_ID=pacemaker, pacemaker=pacemaker, pacemakerNotificationDescription=pacemakerNotificationDescription)
