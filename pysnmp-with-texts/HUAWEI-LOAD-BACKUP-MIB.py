#
# PySNMP MIB module HUAWEI-LOAD-BACKUP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HUAWEI-LOAD-BACKUP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:46:09 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
hwSlotIndex, hwFrameIndex = mibBuilder.importSymbols("HUAWEI-DEVICE-MIB", "hwSlotIndex", "hwFrameIndex")
huaweiUtility, = mibBuilder.importSymbols("HUAWEI-MIB", "huaweiUtility")
HWPCBType, = mibBuilder.importSymbols("HUAWEI-TC-MIB", "HWPCBType")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
TimeTicks, ModuleIdentity, Integer32, Bits, Counter32, NotificationType, Unsigned32, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, iso, IpAddress, Gauge32, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "ModuleIdentity", "Integer32", "Bits", "Counter32", "NotificationType", "Unsigned32", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "iso", "IpAddress", "Gauge32", "ObjectIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
hwLoadBackup = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 6, 6))
if mibBuilder.loadTexts: hwLoadBackup.setLastUpdated('200304280900Z')
if mibBuilder.loadTexts: hwLoadBackup.setOrganization('Fix-Net Dep, Huawei Technologies Co.,Ltd.')
if mibBuilder.loadTexts: hwLoadBackup.setContactInfo('Floot 5 ,Block 4, R&D Building, Huawei Longgang Production Base, Shenzhen, P.R.C. http://www.huawei.com Zip:518057 ')
if mibBuilder.loadTexts: hwLoadBackup.setDescription('Huawei load and backup mib.')
hwLoadBackupMon = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 6, 1))
hwLoadParaTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 6, 1, 1), )
if mibBuilder.loadTexts: hwLoadParaTable.setStatus('current')
if mibBuilder.loadTexts: hwLoadParaTable.setDescription(' The load parameter table. ')
hwLoadParaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 6, 1, 1, 1), ).setIndexNames((0, "HUAWEI-DEVICE-MIB", "hwFrameIndex"), (0, "HUAWEI-DEVICE-MIB", "hwSlotIndex"))
if mibBuilder.loadTexts: hwLoadParaEntry.setStatus('current')
if mibBuilder.loadTexts: hwLoadParaEntry.setDescription(' The load parameter table entry. ')
hwLoadServerIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 6, 1, 1, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwLoadServerIpAddr.setStatus('current')
if mibBuilder.loadTexts: hwLoadServerIpAddr.setDescription(' The IP address of server. ')
hwLoadMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 6, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 255))).clone(namedValues=NamedValues(("tftp", 1), ("modem", 2), ("ftp", 3), ("smbLoadAnyBoards", 4), ("other", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwLoadMode.setStatus('current')
if mibBuilder.loadTexts: hwLoadMode.setDescription(' The load protocol. ')
hwLoadFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 6, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwLoadFileName.setStatus('current')
if mibBuilder.loadTexts: hwLoadFileName.setDescription(' The file name. ')
hwLoadContent = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 6, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 40, 41, 42, 45, 46, 49, 50, 51))).clone(namedValues=NamedValues(("program", 1), ("configuration", 2), ("patch", 3), ("shellMacro", 4), ("resLocal", 5), ("resGeneral", 6), ("cpeDrive", 7), ("programDatabase", 8), ("programBios", 9), ("programApp", 10), ("logicFpga", 11), ("logicCpld", 12), ("logicPci", 13), ("logicAfc", 14), ("programMicroCode", 15), ("programFirmware", 16), ("programHelp", 17), ("programDataFlow", 18), ("programBootFile", 19), ("logciPa", 20), ("webExp", 21), ("webNev", 22), ("webHelp", 23), ("programBsp", 24), ("configurationIni", 40), ("configurationEfs", 41), ("configurationCli", 42), ("programCurrent", 45), ("programOther", 46), ("license", 49), ("programchipset", 50), ("programExtendedBios", 51)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwLoadContent.setStatus('current')
if mibBuilder.loadTexts: hwLoadContent.setDescription(' Load content: enum explanation ********************************************** program(1), -- program file configuration(2), -- configuration file patch(3), -- patch file shellMacro(4), resLocal(5), resGeneral(6), cpeDrive(7), programDatabase(8), -- database file programBios(9), -- bios file programApp(10), -- application program logicFpga(11), -- fpga logic file logicCpld(12), -- Cpld logic file logicPci(13), -- pci logic file logicAfc(14), -- afc logic file programMicroCode(15), -- micro code file programFirmware(16), -- application program of pinch board programHelp(17), programDataFlow(18), -- flow file of card management point programBootFile(19), -- Boot program file of board logciPa(20), -- Boot program file of board start webExp(21), -- web exp file web exp webNev(22), -- web nev file web nev webHelp(23), -- web help file web programBsp(24), -- bsp program file bsp configurationIni(40), -- configuration file of ini formatini configurationEfs(41), -- configuration file with the header of efs configurationCli(42), -- configuration file of command line format programCurrent(45), -- the program being run programOther(46), -- the program that has not been run presently license(49), -- license file programchipset(50), -- AC5 chipset load ')
hwLoadBoardType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 6, 1, 1, 1, 5), HWPCBType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwLoadBoardType.setStatus('current')
if mibBuilder.loadTexts: hwLoadBoardType.setDescription(' The board type the system supports. ')
hwPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 6, 1, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPortId.setStatus('current')
if mibBuilder.loadTexts: hwPortId.setDescription(' The port index. ')
hwLoadProcess = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 6, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwLoadProcess.setStatus('current')
if mibBuilder.loadTexts: hwLoadProcess.setDescription(' The Process of loading. ')
hwLoadUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 6, 1, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwLoadUserName.setStatus('current')
if mibBuilder.loadTexts: hwLoadUserName.setDescription(' The load user namewhich is necessary in FTP mode and unnecessary in TFTP mode. ')
hwLoadPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 6, 1, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwLoadPassword.setStatus('current')
if mibBuilder.loadTexts: hwLoadPassword.setDescription(' The load user name,which is necessary in FTP mode , which is necessary in FTP mode and unnecessary in TFTP mode. ')
hwBackupParaTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 6, 1, 2), )
if mibBuilder.loadTexts: hwBackupParaTable.setStatus('current')
if mibBuilder.loadTexts: hwBackupParaTable.setDescription(' The backup parameter table. ')
hwBackupParaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 6, 1, 2, 1), ).setIndexNames((0, "HUAWEI-DEVICE-MIB", "hwFrameIndex"), (0, "HUAWEI-DEVICE-MIB", "hwSlotIndex"))
if mibBuilder.loadTexts: hwBackupParaEntry.setStatus('current')
if mibBuilder.loadTexts: hwBackupParaEntry.setDescription(' The backup parameter table entry. ')
hwBackupServerIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 6, 1, 2, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBackupServerIpAddr.setStatus('current')
if mibBuilder.loadTexts: hwBackupServerIpAddr.setDescription(' The IP address of Server ')
hwBackupMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 6, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("tftp", 1), ("modem", 2), ("ftp", 3), ("other", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBackupMode.setStatus('current')
if mibBuilder.loadTexts: hwBackupMode.setDescription(' Load protocol:tftp and MODEM currently supported. ')
hwBackupFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 6, 1, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBackupFileName.setStatus('current')
if mibBuilder.loadTexts: hwBackupFileName.setDescription(' The file name. ')
hwBackupContent = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 6, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 40, 41, 42, 45, 46, 47, 49, 51, 60))).clone(namedValues=NamedValues(("configuration", 1), ("shellMacro", 2), ("log", 3), ("bill", 4), ("alarm", 5), ("program", 15), ("reslocal", 16), ("resgeneral", 17), ("patch", 18), ("programDatabase", 19), ("programBios", 20), ("programApp", 21), ("logicFpga", 22), ("logicCpld", 23), ("logicPci", 24), ("logicAfc", 25), ("programMicroCode", 26), ("programFireware", 27), ("programDataFlow", 28), ("programBootFile", 29), ("logciPa", 30), ("webExp", 31), ("webNev", 32), ("webHelp", 33), ("programBsp", 34), ("configurationIni", 40), ("configurationEfs", 41), ("configurationCli", 42), ("programCurrent", 45), ("programOther", 46), ("bcdcInfo", 47), ("license", 49), ("programExtendedBios", 51), ("boardinfo", 60)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBackupContent.setStatus('current')
if mibBuilder.loadTexts: hwBackupContent.setDescription(' The backup content. ')
hwBackupProcess = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 6, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBackupProcess.setStatus('current')
if mibBuilder.loadTexts: hwBackupProcess.setDescription(' The Process of backuping. ')
hwBackupUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 6, 1, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBackupUserName.setStatus('current')
if mibBuilder.loadTexts: hwBackupUserName.setDescription(' The backup user namewhich is necessary in FTP mode and unnecessary in TFTP mode. ')
hwBackupPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 6, 1, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBackupPassword.setStatus('current')
if mibBuilder.loadTexts: hwBackupPassword.setDescription(' The backup user name,which is necessary in FTP mode , which is necessary in FTP mode and unnecessary in TFTP mode. ')
hwBackupBoardType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 6, 1, 2, 1, 8), HWPCBType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBackupBoardType.setStatus('current')
if mibBuilder.loadTexts: hwBackupBoardType.setDescription(' The type of backup board. ')
hwPatch = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 6, 2))
hwPatchTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 6, 2, 1), )
if mibBuilder.loadTexts: hwPatchTable.setStatus('current')
if mibBuilder.loadTexts: hwPatchTable.setDescription(' The operation and enquiry table of patch. ')
hwPatchEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 6, 2, 1, 1), ).setIndexNames((0, "HUAWEI-DEVICE-MIB", "hwFrameIndex"), (0, "HUAWEI-DEVICE-MIB", "hwSlotIndex"), (0, "HUAWEI-LOAD-BACKUP-MIB", "hwPatchId"))
if mibBuilder.loadTexts: hwPatchEntry.setStatus('current')
if mibBuilder.loadTexts: hwPatchEntry.setDescription(' The operation and enquiry table entry of patch. ')
hwPatchId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 6, 2, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)))
if mibBuilder.loadTexts: hwPatchId.setStatus('current')
if mibBuilder.loadTexts: hwPatchId.setDescription(' The patch number. ')
hwPatchDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 6, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPatchDescription.setStatus('current')
if mibBuilder.loadTexts: hwPatchDescription.setDescription(' The description of patch. ')
hwPatchFuncNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 6, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPatchFuncNum.setStatus('current')
if mibBuilder.loadTexts: hwPatchFuncNum.setDescription(' The number of functions in patch. ')
hwPatchTextLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 6, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPatchTextLen.setStatus('current')
if mibBuilder.loadTexts: hwPatchTextLen.setDescription(' The length of patch code. ')
hwPatchDataLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 6, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPatchDataLen.setStatus('current')
if mibBuilder.loadTexts: hwPatchDataLen.setDescription(' The length of patch data. ')
hwPatchType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 6, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("common", 1), ("temporary", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPatchType.setStatus('current')
if mibBuilder.loadTexts: hwPatchType.setDescription(' The type of patch. ')
hwPatchAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 6, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("active", 1), ("deactive", 2), ("remove", 3), ("running", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPatchAdminStatus.setStatus('current')
if mibBuilder.loadTexts: hwPatchAdminStatus.setDescription(' The operation of patch. ')
hwPatchOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 6, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("patchActive", 1), ("patchDeActive", 2), ("patchInit", 3), ("patchRunning", 4), ("patchload", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPatchOperState.setStatus('current')
if mibBuilder.loadTexts: hwPatchOperState.setDescription(' The station of patch. ')
hwPatchStatTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 6, 2, 2), )
if mibBuilder.loadTexts: hwPatchStatTable.setStatus('current')
if mibBuilder.loadTexts: hwPatchStatTable.setDescription(' The table of statistics information of patch. ')
hwPatchStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 6, 2, 2, 1), ).setIndexNames((0, "HUAWEI-DEVICE-MIB", "hwFrameIndex"), (0, "HUAWEI-DEVICE-MIB", "hwSlotIndex"))
if mibBuilder.loadTexts: hwPatchStatEntry.setStatus('current')
if mibBuilder.loadTexts: hwPatchStatEntry.setDescription(' The table entry of statistics information of patch. ')
hwPatchStatNumMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 6, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPatchStatNumMax.setStatus('current')
if mibBuilder.loadTexts: hwPatchStatNumMax.setDescription(' The maximum patch number of system. ')
hwPatchStatTextMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 6, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPatchStatTextMax.setStatus('current')
if mibBuilder.loadTexts: hwPatchStatTextMax.setDescription(' The capacity of patch code area. ')
hwPatchStatDataMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 6, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPatchStatDataMax.setStatus('current')
if mibBuilder.loadTexts: hwPatchStatDataMax.setDescription(' The capacity of patch data area. ')
hwPatchStatTextUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 6, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPatchStatTextUsed.setStatus('current')
if mibBuilder.loadTexts: hwPatchStatTextUsed.setDescription(' The used patch code area. ')
hwPatchStatDataUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 6, 2, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPatchStatDataUsed.setStatus('current')
if mibBuilder.loadTexts: hwPatchStatDataUsed.setDescription(' The used patch data area. ')
snmpTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 6, 1, 3))
hwLoadAndBackupTrapsOID = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 6, 1, 3, 0))
hwBackupFailAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 6, 1, 3, 0, 1)).setObjects(("HUAWEI-DEVICE-MIB", "hwFrameIndex"), ("HUAWEI-DEVICE-MIB", "hwSlotIndex"), ("HUAWEI-LOAD-BACKUP-MIB", "hwTrapBackupResult"))
if mibBuilder.loadTexts: hwBackupFailAlarm.setStatus('current')
if mibBuilder.loadTexts: hwBackupFailAlarm.setDescription(' The back up failure alarm trap. ')
hwLoadFailAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 6, 1, 3, 0, 2)).setObjects(("HUAWEI-DEVICE-MIB", "hwFrameIndex"), ("HUAWEI-DEVICE-MIB", "hwSlotIndex"), ("HUAWEI-LOAD-BACKUP-MIB", "hwTrapLoadResult"))
if mibBuilder.loadTexts: hwLoadFailAlarm.setStatus('current')
if mibBuilder.loadTexts: hwLoadFailAlarm.setDescription(' The load failure alarm trap. ')
hwBackupFailAlarmSuccess = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 6, 1, 3, 0, 3)).setObjects(("HUAWEI-DEVICE-MIB", "hwFrameIndex"), ("HUAWEI-DEVICE-MIB", "hwSlotIndex"))
if mibBuilder.loadTexts: hwBackupFailAlarmSuccess.setStatus('current')
if mibBuilder.loadTexts: hwBackupFailAlarmSuccess.setDescription(' The backup success notification. ')
hwLoadFailAlarmSuccess = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 6, 1, 3, 0, 4)).setObjects(("HUAWEI-DEVICE-MIB", "hwFrameIndex"), ("HUAWEI-DEVICE-MIB", "hwSlotIndex"))
if mibBuilder.loadTexts: hwLoadFailAlarmSuccess.setStatus('current')
if mibBuilder.loadTexts: hwLoadFailAlarmSuccess.setDescription(' The load success notification. ')
hwCopyAndSaveFail = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 6, 1, 3, 0, 5)).setObjects(("HUAWEI-LOAD-BACKUP-MIB", "hwCopyAndSaveResult"))
if mibBuilder.loadTexts: hwCopyAndSaveFail.setStatus('current')
if mibBuilder.loadTexts: hwCopyAndSaveFail.setDescription(' Save configuration to flash failure trap. ')
hwCopyAndSaveSuccess = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 6, 1, 3, 0, 6))
if mibBuilder.loadTexts: hwCopyAndSaveSuccess.setStatus('current')
if mibBuilder.loadTexts: hwCopyAndSaveSuccess.setDescription(' Save configuration to flash success notification . ')
hwConfigurationChangedEvent = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 6, 1, 3, 0, 7)).setObjects(("HUAWEI-LOAD-BACKUP-MIB", "hwConfEventCause"))
if mibBuilder.loadTexts: hwConfigurationChangedEvent.setStatus('current')
if mibBuilder.loadTexts: hwConfigurationChangedEvent.setDescription(' The configuration changed event alarm. ')
hwTrapCauseOids = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 6, 1, 3, 1))
hwTrapLoadBackupResult = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 6, 1, 3, 1, 1))
hwTrapLoadResult = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 6, 1, 3, 1, 1, 1), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwTrapLoadResult.setStatus('current')
if mibBuilder.loadTexts: hwTrapLoadResult.setDescription(' The load result. ')
hwTrapBackupResult = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 6, 1, 3, 1, 1, 2), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwTrapBackupResult.setStatus('current')
if mibBuilder.loadTexts: hwTrapBackupResult.setDescription(' Definition node of the backup failure cause. ')
hwCopyAndSaveResult = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 6, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("copyInProgress", 1), ("copyOperationSuccess", 2), ("copyInvalidOperation", 3), ("copyInvalidProtocol", 4), ("copyInvalidSourceName", 5), ("copyInvalidDestName", 6), ("copyInvalidServerAddress", 7), ("copyDeviceBusy", 8), ("copyDeviceOpenError", 9), ("copyDeviceError", 10), ("copyDeviceNotProgrammable", 11), ("copyDeviceFull", 12), ("copyFileOpenError", 13), ("copyFileTransferError", 14), ("copyFileChecksumError", 15), ("copyNoMemory", 16), ("copyUnknownFailure", 17)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwCopyAndSaveResult.setStatus('current')
if mibBuilder.loadTexts: hwCopyAndSaveResult.setDescription(' The failure cause definition node of the memory running copy and resume. ')
hwTrapEventCauses = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 6, 1, 3, 1, 2))
hwConfEventCause = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 6, 1, 3, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("confChangedDirect", 1), ("confSaved", 2), ("confChangedDuration", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwConfEventCause.setStatus('current')
if mibBuilder.loadTexts: hwConfEventCause.setDescription(' The configuration changed cause. ')
hwBackupAndRestoreConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 6, 1, 4))
hwBackupAndRestore = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 6, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("copyMemToFlash", 1), ("copyFlashToMem", 2), ("copyMemToHardDisk", 3), ("copyHardDiskToMem", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBackupAndRestore.setStatus('current')
if mibBuilder.loadTexts: hwBackupAndRestore.setDescription('The running configuration in the system has been backup to flash or disk, or been restored from . ')
hwLoadBackupConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 6, 3))
hwLoadBackupCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 6, 3, 1))
hwLoadBackupCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2011, 6, 6, 3, 1, 1)).setObjects(("HUAWEI-LOAD-BACKUP-MIB", "hwLoadParaTableGroup"), ("HUAWEI-LOAD-BACKUP-MIB", "hwBackupParaTableGroup"), ("HUAWEI-LOAD-BACKUP-MIB", "hwTrapEventCausesGroup"), ("HUAWEI-LOAD-BACKUP-MIB", "hwTrapLoadBackupResultGroup"), ("HUAWEI-LOAD-BACKUP-MIB", "hwTrapLoadBackupTrapsGroup"), ("HUAWEI-LOAD-BACKUP-MIB", "hwBackupAndRestoreConfigGroup"), ("HUAWEI-LOAD-BACKUP-MIB", "hwPatchTableGroup"), ("HUAWEI-LOAD-BACKUP-MIB", "hwPatchStatTableGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwLoadBackupCompliance = hwLoadBackupCompliance.setStatus('current')
if mibBuilder.loadTexts: hwLoadBackupCompliance.setDescription('The compliance statement for systems supporting the this module.')
hwLoadBackupObjectGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 6, 3, 2))
hwLoadParaTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 6, 6, 3, 2, 1)).setObjects(("HUAWEI-LOAD-BACKUP-MIB", "hwLoadServerIpAddr"), ("HUAWEI-LOAD-BACKUP-MIB", "hwLoadMode"), ("HUAWEI-LOAD-BACKUP-MIB", "hwLoadFileName"), ("HUAWEI-LOAD-BACKUP-MIB", "hwLoadContent"), ("HUAWEI-LOAD-BACKUP-MIB", "hwLoadBoardType"), ("HUAWEI-LOAD-BACKUP-MIB", "hwPortId"), ("HUAWEI-LOAD-BACKUP-MIB", "hwLoadProcess"), ("HUAWEI-LOAD-BACKUP-MIB", "hwLoadUserName"), ("HUAWEI-LOAD-BACKUP-MIB", "hwLoadPassword"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwLoadParaTableGroup = hwLoadParaTableGroup.setStatus('current')
if mibBuilder.loadTexts: hwLoadParaTableGroup.setDescription('The load parameter group objects.')
hwBackupParaTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 6, 6, 3, 2, 2)).setObjects(("HUAWEI-LOAD-BACKUP-MIB", "hwBackupServerIpAddr"), ("HUAWEI-LOAD-BACKUP-MIB", "hwBackupMode"), ("HUAWEI-LOAD-BACKUP-MIB", "hwBackupFileName"), ("HUAWEI-LOAD-BACKUP-MIB", "hwBackupContent"), ("HUAWEI-LOAD-BACKUP-MIB", "hwBackupProcess"), ("HUAWEI-LOAD-BACKUP-MIB", "hwBackupUserName"), ("HUAWEI-LOAD-BACKUP-MIB", "hwBackupPassword"), ("HUAWEI-LOAD-BACKUP-MIB", "hwBackupBoardType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwBackupParaTableGroup = hwBackupParaTableGroup.setStatus('current')
if mibBuilder.loadTexts: hwBackupParaTableGroup.setDescription('The backup parameter group objects.')
hwTrapEventCausesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 6, 6, 3, 2, 3)).setObjects(("HUAWEI-LOAD-BACKUP-MIB", "hwConfEventCause"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwTrapEventCausesGroup = hwTrapEventCausesGroup.setStatus('current')
if mibBuilder.loadTexts: hwTrapEventCausesGroup.setDescription('The trap event causes group objects.')
hwTrapLoadBackupResultGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 6, 6, 3, 2, 4)).setObjects(("HUAWEI-LOAD-BACKUP-MIB", "hwTrapLoadResult"), ("HUAWEI-LOAD-BACKUP-MIB", "hwTrapBackupResult"), ("HUAWEI-LOAD-BACKUP-MIB", "hwCopyAndSaveResult"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwTrapLoadBackupResultGroup = hwTrapLoadBackupResultGroup.setStatus('current')
if mibBuilder.loadTexts: hwTrapLoadBackupResultGroup.setDescription('The load and backup result group objects.')
hwTrapLoadBackupTrapsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2011, 6, 6, 3, 2, 5)).setObjects(("HUAWEI-LOAD-BACKUP-MIB", "hwBackupFailAlarm"), ("HUAWEI-LOAD-BACKUP-MIB", "hwLoadFailAlarm"), ("HUAWEI-LOAD-BACKUP-MIB", "hwBackupFailAlarmSuccess"), ("HUAWEI-LOAD-BACKUP-MIB", "hwLoadFailAlarmSuccess"), ("HUAWEI-LOAD-BACKUP-MIB", "hwCopyAndSaveFail"), ("HUAWEI-LOAD-BACKUP-MIB", "hwCopyAndSaveSuccess"), ("HUAWEI-LOAD-BACKUP-MIB", "hwConfigurationChangedEvent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwTrapLoadBackupTrapsGroup = hwTrapLoadBackupTrapsGroup.setStatus('current')
if mibBuilder.loadTexts: hwTrapLoadBackupTrapsGroup.setDescription('The load and backup traps group objects.')
hwBackupAndRestoreConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 6, 6, 3, 2, 6)).setObjects(("HUAWEI-LOAD-BACKUP-MIB", "hwBackupAndRestore"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwBackupAndRestoreConfigGroup = hwBackupAndRestoreConfigGroup.setStatus('current')
if mibBuilder.loadTexts: hwBackupAndRestoreConfigGroup.setDescription('The load and backup config group objects.')
hwPatchTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 6, 6, 3, 2, 7)).setObjects(("HUAWEI-LOAD-BACKUP-MIB", "hwPatchDescription"), ("HUAWEI-LOAD-BACKUP-MIB", "hwPatchFuncNum"), ("HUAWEI-LOAD-BACKUP-MIB", "hwPatchTextLen"), ("HUAWEI-LOAD-BACKUP-MIB", "hwPatchDataLen"), ("HUAWEI-LOAD-BACKUP-MIB", "hwPatchType"), ("HUAWEI-LOAD-BACKUP-MIB", "hwPatchAdminStatus"), ("HUAWEI-LOAD-BACKUP-MIB", "hwPatchOperState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwPatchTableGroup = hwPatchTableGroup.setStatus('current')
if mibBuilder.loadTexts: hwPatchTableGroup.setDescription('The patch table group objects.')
hwPatchStatTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 6, 6, 3, 2, 8)).setObjects(("HUAWEI-LOAD-BACKUP-MIB", "hwPatchStatNumMax"), ("HUAWEI-LOAD-BACKUP-MIB", "hwPatchStatTextMax"), ("HUAWEI-LOAD-BACKUP-MIB", "hwPatchStatDataMax"), ("HUAWEI-LOAD-BACKUP-MIB", "hwPatchStatTextUsed"), ("HUAWEI-LOAD-BACKUP-MIB", "hwPatchStatDataUsed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwPatchStatTableGroup = hwPatchStatTableGroup.setStatus('current')
if mibBuilder.loadTexts: hwPatchStatTableGroup.setDescription('The patch statistics group objects.')
mibBuilder.exportSymbols("HUAWEI-LOAD-BACKUP-MIB", hwLoadBackupConformance=hwLoadBackupConformance, hwTrapLoadBackupResultGroup=hwTrapLoadBackupResultGroup, hwPatchTextLen=hwPatchTextLen, hwPatchStatNumMax=hwPatchStatNumMax, PYSNMP_MODULE_ID=hwLoadBackup, hwTrapLoadBackupTrapsGroup=hwTrapLoadBackupTrapsGroup, hwBackupContent=hwBackupContent, hwPatchStatTable=hwPatchStatTable, hwTrapBackupResult=hwTrapBackupResult, hwBackupParaTableGroup=hwBackupParaTableGroup, hwConfigurationChangedEvent=hwConfigurationChangedEvent, hwLoadServerIpAddr=hwLoadServerIpAddr, hwBackupMode=hwBackupMode, hwLoadParaEntry=hwLoadParaEntry, hwPatchStatTextMax=hwPatchStatTextMax, hwPatchFuncNum=hwPatchFuncNum, hwTrapLoadBackupResult=hwTrapLoadBackupResult, hwBackupAndRestoreConfig=hwBackupAndRestoreConfig, hwLoadUserName=hwLoadUserName, hwLoadFailAlarmSuccess=hwLoadFailAlarmSuccess, hwBackupFailAlarmSuccess=hwBackupFailAlarmSuccess, hwConfEventCause=hwConfEventCause, hwPatchTableGroup=hwPatchTableGroup, hwLoadParaTable=hwLoadParaTable, hwCopyAndSaveSuccess=hwCopyAndSaveSuccess, hwPatchStatDataUsed=hwPatchStatDataUsed, hwLoadBackup=hwLoadBackup, hwLoadFileName=hwLoadFileName, hwBackupServerIpAddr=hwBackupServerIpAddr, hwPatchOperState=hwPatchOperState, hwBackupFileName=hwBackupFileName, hwBackupParaTable=hwBackupParaTable, hwPatchAdminStatus=hwPatchAdminStatus, hwPatchStatTableGroup=hwPatchStatTableGroup, hwPatchDescription=hwPatchDescription, hwPatchStatEntry=hwPatchStatEntry, hwPatchType=hwPatchType, hwLoadBackupObjectGroups=hwLoadBackupObjectGroups, hwBackupAndRestoreConfigGroup=hwBackupAndRestoreConfigGroup, hwLoadParaTableGroup=hwLoadParaTableGroup, hwBackupParaEntry=hwBackupParaEntry, hwPatchId=hwPatchId, hwBackupBoardType=hwBackupBoardType, hwBackupFailAlarm=hwBackupFailAlarm, hwLoadAndBackupTrapsOID=hwLoadAndBackupTrapsOID, hwTrapLoadResult=hwTrapLoadResult, hwPatchStatDataMax=hwPatchStatDataMax, hwBackupAndRestore=hwBackupAndRestore, hwLoadBackupCompliance=hwLoadBackupCompliance, hwTrapEventCauses=hwTrapEventCauses, hwCopyAndSaveFail=hwCopyAndSaveFail, hwBackupPassword=hwBackupPassword, hwBackupUserName=hwBackupUserName, hwLoadMode=hwLoadMode, snmpTraps=snmpTraps, hwLoadProcess=hwLoadProcess, hwLoadContent=hwLoadContent, hwPortId=hwPortId, hwLoadBoardType=hwLoadBoardType, hwLoadBackupMon=hwLoadBackupMon, hwLoadPassword=hwLoadPassword, hwPatch=hwPatch, hwPatchTable=hwPatchTable, hwPatchEntry=hwPatchEntry, hwTrapEventCausesGroup=hwTrapEventCausesGroup, hwPatchDataLen=hwPatchDataLen, hwPatchStatTextUsed=hwPatchStatTextUsed, hwTrapCauseOids=hwTrapCauseOids, hwLoadBackupCompliances=hwLoadBackupCompliances, hwCopyAndSaveResult=hwCopyAndSaveResult, hwLoadFailAlarm=hwLoadFailAlarm, hwBackupProcess=hwBackupProcess)
