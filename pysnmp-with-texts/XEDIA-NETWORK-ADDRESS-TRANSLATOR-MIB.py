#
# PySNMP MIB module XEDIA-NETWORK-ADDRESS-TRANSLATOR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/XEDIA-NETWORK-ADDRESS-TRANSLATOR-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:42:57 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Integer32, IpAddress, Unsigned32, TimeTicks, Gauge32, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Counter64, MibIdentifier, iso, NotificationType, ObjectIdentity, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "IpAddress", "Unsigned32", "TimeTicks", "Gauge32", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Counter64", "MibIdentifier", "iso", "NotificationType", "ObjectIdentity", "Bits")
TextualConvention, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "DisplayString")
xediaMibs, = mibBuilder.importSymbols("XEDIA-REG", "xediaMibs")
xediaNetworkAddressTranslatorMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 838, 3, 23))
if mibBuilder.loadTexts: xediaNetworkAddressTranslatorMIB.setLastUpdated('9805252155Z')
if mibBuilder.loadTexts: xediaNetworkAddressTranslatorMIB.setOrganization('Xedia Corp.')
if mibBuilder.loadTexts: xediaNetworkAddressTranslatorMIB.setContactInfo('support@xedia.com')
if mibBuilder.loadTexts: xediaNetworkAddressTranslatorMIB.setDescription("This module defines objects for the management of Xedia's proprietary Network Address Translator. This translator is based on RFC1631 and its successors. The purpose of the Xedia Network Address Translator (xnat) is to allow hosts in private networks using the RFC1918 address space to communicate with the public Internet by translating private IP addresses to globally unique IP addresses registered with the IANA.")
xnatObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 838, 3, 23, 1))
xnatConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 838, 3, 23, 2))
class XnatIpAddress(TextualConvention, IpAddress):
    description = 'An IPv4 address.'
    status = 'current'

class XnatPort(TextualConvention, Integer32):
    description = 'A UDP or TCP port value or an ICMP ID. The values of this field are defined in the Assigned Numbers RFC.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 65535)

class XnatCounter(TextualConvention, Counter32):
    description = 'A 32 bit counter.'
    status = 'current'
    displayHint = 'd'

class XnatTimeout(TextualConvention, Integer32):
    description = 'The duration of time a translation entry remains in the translation table before being aged out'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 86400)

class XnatProtocol(TextualConvention, Integer32):
    description = 'The protocol type of a translation session +------------+-------+ | PROTOCOL | VALUE | +------------+-------+ ANY 0 ICMP 1 TCP 6 UDP 17 '
    status = 'current'
    displayHint = 'd'

class XnatSessionType(TextualConvention, Integer32):
    description = 'The session type indicate whether a translation session was initiated from inside the private network or outside the private network +------------+-------+ | LOCATION | VALUE | +------------+-------+ INBOUND 0 OUTBOUND 1 '
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("inbound", 0), ("outbound", 1))

class XnatBindingType(TextualConvention, Integer32):
    description = 'The binding type indicates whether a binding was created dynamically, statically, or by a load sharing pool. +----------------+-------+ | BINDING TYPE | VALUE | +----------------+-------+ DYNAMIC 0 STATIC 1 LOAD-SHARE 2 '
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("dynamic", 0), ("static", 1), ("loadshare", 2))

xnatGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 838, 3, 23, 1, 1))
xnatAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 838, 3, 23, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xnatAdminStatus.setStatus('current')
if mibBuilder.loadTexts: xnatAdminStatus.setDescription('Determines whether address translation will be performed.')
xnatMaxIboundSessions = MibScalar((1, 3, 6, 1, 4, 1, 838, 3, 23, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xnatMaxIboundSessions.setStatus('current')
if mibBuilder.loadTexts: xnatMaxIboundSessions.setDescription('Indicates the maximum number of inbound sessions that can be associated with a single binding.')
xnatMaxOboundSessions = MibScalar((1, 3, 6, 1, 4, 1, 838, 3, 23, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xnatMaxOboundSessions.setStatus('current')
if mibBuilder.loadTexts: xnatMaxOboundSessions.setDescription('Indicates the maximum number of outbound sessions that can be associated with a single binding.')
xnatCounters = MibIdentifier((1, 3, 6, 1, 4, 1, 838, 3, 23, 1, 2))
xnatOboundPackets = MibScalar((1, 3, 6, 1, 4, 1, 838, 3, 23, 1, 2, 1), XnatCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xnatOboundPackets.setStatus('current')
if mibBuilder.loadTexts: xnatOboundPackets.setDescription('Indicates the number of outbound packets seen by the network address translator.')
xnatOboundIcmp = MibScalar((1, 3, 6, 1, 4, 1, 838, 3, 23, 1, 2, 2), XnatCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xnatOboundIcmp.setStatus('current')
if mibBuilder.loadTexts: xnatOboundIcmp.setDescription('Indicates the number of outbound ICMP packets translated by the network address translator.')
xnatOboundTcp = MibScalar((1, 3, 6, 1, 4, 1, 838, 3, 23, 1, 2, 3), XnatCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xnatOboundTcp.setStatus('current')
if mibBuilder.loadTexts: xnatOboundTcp.setDescription('Indicates the number of outbound TCP packets translated by the network address translator.')
xnatOboundUdp = MibScalar((1, 3, 6, 1, 4, 1, 838, 3, 23, 1, 2, 4), XnatCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xnatOboundUdp.setStatus('current')
if mibBuilder.loadTexts: xnatOboundUdp.setDescription('Indicates the number of outbound UDP packets translated by the network address translator.')
xnatOboundUntranslated = MibScalar((1, 3, 6, 1, 4, 1, 838, 3, 23, 1, 2, 5), XnatCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xnatOboundUntranslated.setStatus('current')
if mibBuilder.loadTexts: xnatOboundUntranslated.setDescription('Indicates the number of outbound packets not translated by the network address translator.')
xnatOboundDiscards = MibScalar((1, 3, 6, 1, 4, 1, 838, 3, 23, 1, 2, 6), XnatCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xnatOboundDiscards.setStatus('current')
if mibBuilder.loadTexts: xnatOboundDiscards.setDescription('Indicates the number of outbound packets discarded by the network address translator.')
xnatIboundPackets = MibScalar((1, 3, 6, 1, 4, 1, 838, 3, 23, 1, 2, 7), XnatCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xnatIboundPackets.setStatus('current')
if mibBuilder.loadTexts: xnatIboundPackets.setDescription('Indicates the number of inbound packets seen by the network address translator.')
xnatIboundIcmp = MibScalar((1, 3, 6, 1, 4, 1, 838, 3, 23, 1, 2, 8), XnatCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xnatIboundIcmp.setStatus('current')
if mibBuilder.loadTexts: xnatIboundIcmp.setDescription('Indicates the number of inbound ICMP packets translated by the network address translator.')
xnatIboundTcp = MibScalar((1, 3, 6, 1, 4, 1, 838, 3, 23, 1, 2, 9), XnatCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xnatIboundTcp.setStatus('current')
if mibBuilder.loadTexts: xnatIboundTcp.setDescription('Indicates the number of inbound TCP packets translated by the network address translator.')
xnatIboundUdp = MibScalar((1, 3, 6, 1, 4, 1, 838, 3, 23, 1, 2, 10), XnatCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xnatIboundUdp.setStatus('current')
if mibBuilder.loadTexts: xnatIboundUdp.setDescription('Indicates the number of inbound UDP packets translated by the network address translator.')
xnatIboundUntranslated = MibScalar((1, 3, 6, 1, 4, 1, 838, 3, 23, 1, 2, 11), XnatCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xnatIboundUntranslated.setStatus('current')
if mibBuilder.loadTexts: xnatIboundUntranslated.setDescription('Indicates the number of inbound packets not translated by the network address translator.')
xnatIboundDiscards = MibScalar((1, 3, 6, 1, 4, 1, 838, 3, 23, 1, 2, 12), XnatCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xnatIboundDiscards.setStatus('current')
if mibBuilder.loadTexts: xnatIboundDiscards.setDescription('Indicates the number of inbound packets discarded by the network address translator.')
xnatTimers = MibIdentifier((1, 3, 6, 1, 4, 1, 838, 3, 23, 1, 3))
xnatUdpTimeout = MibScalar((1, 3, 6, 1, 4, 1, 838, 3, 23, 1, 3, 1), XnatTimeout().clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xnatUdpTimeout.setStatus('current')
if mibBuilder.loadTexts: xnatUdpTimeout.setDescription('A 32-bit integer that determines the duration of time an unused UDP session remains in the translation table before being aged out.')
xnatDnsTimeout = MibScalar((1, 3, 6, 1, 4, 1, 838, 3, 23, 1, 3, 2), XnatTimeout().clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xnatDnsTimeout.setStatus('current')
if mibBuilder.loadTexts: xnatDnsTimeout.setDescription('A 32-bit integer that determines the duration of time an unused UDP session remains in the translation table before being aged out.')
xnatTcpTimeout = MibScalar((1, 3, 6, 1, 4, 1, 838, 3, 23, 1, 3, 3), XnatTimeout().clone(86400)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xnatTcpTimeout.setStatus('current')
if mibBuilder.loadTexts: xnatTcpTimeout.setDescription('A 32-bit integer that determines the duration of time an unused TCP session remains in the translation table before being aged out.')
xnatFinRstTimeout = MibScalar((1, 3, 6, 1, 4, 1, 838, 3, 23, 1, 3, 4), XnatTimeout().clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xnatFinRstTimeout.setStatus('current')
if mibBuilder.loadTexts: xnatFinRstTimeout.setDescription('A 32-bit integer that determines the duration of time a TCP session in which a FIN or RST was seen remains in the translation table before being aged out.')
xnatSynTimeout = MibScalar((1, 3, 6, 1, 4, 1, 838, 3, 23, 1, 3, 5), XnatTimeout().clone(120)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xnatSynTimeout.setStatus('current')
if mibBuilder.loadTexts: xnatSynTimeout.setDescription('A 32-bit integer that determines the duration of time a TCP session in which a SYN without an ACK was seen remains in the translation table before being aged out.')
xnatIcmpTimeout = MibScalar((1, 3, 6, 1, 4, 1, 838, 3, 23, 1, 3, 6), XnatTimeout().clone(90)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xnatIcmpTimeout.setStatus('current')
if mibBuilder.loadTexts: xnatIcmpTimeout.setDescription('A 32-bit integer that determines the duration of time an ICMP session remains in the translation table before being aged out.')
xnatSessionTable = MibTable((1, 3, 6, 1, 4, 1, 838, 3, 23, 1, 4), )
if mibBuilder.loadTexts: xnatSessionTable.setStatus('current')
if mibBuilder.loadTexts: xnatSessionTable.setDescription('The set of current address translation sessions')
xnatSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 838, 3, 23, 1, 4, 1), ).setIndexNames((0, "XEDIA-NETWORK-ADDRESS-TRANSLATOR-MIB", "xnatSessionPriAddr"), (0, "XEDIA-NETWORK-ADDRESS-TRANSLATOR-MIB", "xnatSessionPriPort"), (0, "XEDIA-NETWORK-ADDRESS-TRANSLATOR-MIB", "xnatSessionOutAddr"), (0, "XEDIA-NETWORK-ADDRESS-TRANSLATOR-MIB", "xnatSessionOutPort"), (0, "XEDIA-NETWORK-ADDRESS-TRANSLATOR-MIB", "xnatSessionProtocol"))
if mibBuilder.loadTexts: xnatSessionEntry.setStatus('current')
if mibBuilder.loadTexts: xnatSessionEntry.setDescription('The information maintained of each translation session')
xnatSessionPriAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 23, 1, 4, 1, 1), XnatIpAddress())
if mibBuilder.loadTexts: xnatSessionPriAddr.setStatus('current')
if mibBuilder.loadTexts: xnatSessionPriAddr.setDescription('The private IP address of the host associated with a translation session')
xnatSessionPriPort = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 23, 1, 4, 1, 2), XnatPort())
if mibBuilder.loadTexts: xnatSessionPriPort.setStatus('current')
if mibBuilder.loadTexts: xnatSessionPriPort.setDescription('The private port number associated with a translation session')
xnatSessionRegAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 23, 1, 4, 1, 3), XnatIpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xnatSessionRegAddr.setStatus('current')
if mibBuilder.loadTexts: xnatSessionRegAddr.setDescription('The registered IP address of the host associated with a translation session')
xnatSessionRegPort = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 23, 1, 4, 1, 4), XnatPort()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xnatSessionRegPort.setStatus('current')
if mibBuilder.loadTexts: xnatSessionRegPort.setDescription('The registered port number associated with a translation session')
xnatSessionOutAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 23, 1, 4, 1, 5), XnatIpAddress())
if mibBuilder.loadTexts: xnatSessionOutAddr.setStatus('current')
if mibBuilder.loadTexts: xnatSessionOutAddr.setDescription('The oustside host IP address associated with a translation session')
xnatSessionOutPort = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 23, 1, 4, 1, 6), XnatPort())
if mibBuilder.loadTexts: xnatSessionOutPort.setStatus('current')
if mibBuilder.loadTexts: xnatSessionOutPort.setDescription('The outside port number associated with a translation session')
xnatSessionProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 23, 1, 4, 1, 7), XnatProtocol())
if mibBuilder.loadTexts: xnatSessionProtocol.setStatus('current')
if mibBuilder.loadTexts: xnatSessionProtocol.setDescription('The protocol associated with a translation session')
xnatSessionType = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 23, 1, 4, 1, 8), XnatSessionType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xnatSessionType.setStatus('current')
if mibBuilder.loadTexts: xnatSessionType.setDescription('This variable shows whether the session was initiated from inside or outside the private network')
xnatSessionRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 23, 1, 4, 1, 9), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xnatSessionRowStatus.setStatus('current')
if mibBuilder.loadTexts: xnatSessionRowStatus.setDescription("An xnatSessionEntry can only be created as a result of a translation request. An xnatSessionEntry cannot be created through a management request. Therefore, this object only supports the values of 'active' and 'destroy'. Changing the value of this object to 'destroy' has the effect of removing the entry")
xnatBindingTable = MibTable((1, 3, 6, 1, 4, 1, 838, 3, 23, 1, 5), )
if mibBuilder.loadTexts: xnatBindingTable.setStatus('current')
if mibBuilder.loadTexts: xnatBindingTable.setDescription('The set of current mappings between private and registered addresses/port pairs')
xnatBindingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 838, 3, 23, 1, 5, 1), ).setIndexNames((0, "XEDIA-NETWORK-ADDRESS-TRANSLATOR-MIB", "xnatBindingPriAddr"), (0, "XEDIA-NETWORK-ADDRESS-TRANSLATOR-MIB", "xnatBindingPriPort"), (0, "XEDIA-NETWORK-ADDRESS-TRANSLATOR-MIB", "xnatBindingRegAddr"), (0, "XEDIA-NETWORK-ADDRESS-TRANSLATOR-MIB", "xnatBindingRegPort"), (0, "XEDIA-NETWORK-ADDRESS-TRANSLATOR-MIB", "xnatBindingProtocol"))
if mibBuilder.loadTexts: xnatBindingEntry.setStatus('current')
if mibBuilder.loadTexts: xnatBindingEntry.setDescription('The information maintained for each binding')
xnatBindingPriAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 23, 1, 5, 1, 1), XnatIpAddress())
if mibBuilder.loadTexts: xnatBindingPriAddr.setStatus('current')
if mibBuilder.loadTexts: xnatBindingPriAddr.setDescription('The private IP address of the host associated with a binding')
xnatBindingPriPort = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 23, 1, 5, 1, 2), XnatPort())
if mibBuilder.loadTexts: xnatBindingPriPort.setStatus('current')
if mibBuilder.loadTexts: xnatBindingPriPort.setDescription('The private port number associated with a binding session. A port number of zero indicates any port')
xnatBindingRegAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 23, 1, 5, 1, 3), XnatIpAddress())
if mibBuilder.loadTexts: xnatBindingRegAddr.setStatus('current')
if mibBuilder.loadTexts: xnatBindingRegAddr.setDescription('The registered IP address of the host associated with a binding session')
xnatBindingRegPort = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 23, 1, 5, 1, 4), XnatPort())
if mibBuilder.loadTexts: xnatBindingRegPort.setStatus('current')
if mibBuilder.loadTexts: xnatBindingRegPort.setDescription('The registered port number associated with a binding binding. A port number of zero inidicates any port')
xnatBindingProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 23, 1, 5, 1, 5), XnatProtocol())
if mibBuilder.loadTexts: xnatBindingProtocol.setStatus('current')
if mibBuilder.loadTexts: xnatBindingProtocol.setDescription('The protocol assocaited with the binding. A protocol number of zero indicates any protocol')
xnatBindingType = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 23, 1, 5, 1, 6), XnatBindingType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xnatBindingType.setStatus('current')
if mibBuilder.loadTexts: xnatBindingType.setDescription('The type of binding associated with an entry')
xnatBindingInSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 23, 1, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xnatBindingInSessions.setStatus('current')
if mibBuilder.loadTexts: xnatBindingInSessions.setDescription('The number of inbound session instantiated using the binding')
xnatBindingOutSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 23, 1, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xnatBindingOutSessions.setStatus('current')
if mibBuilder.loadTexts: xnatBindingOutSessions.setDescription('The number of outbound session instantiated using the binding')
xnatBindingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 23, 1, 5, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xnatBindingRowStatus.setStatus('current')
if mibBuilder.loadTexts: xnatBindingRowStatus.setDescription("This object controls creation and deletion of conceptual Binding Table rows. The object only supports the values of 'active', 'createAndGo', and 'destroy'. Only static bindings can be created through SNMP requests. Both static and dynamic entries can be destroyed. An attempt to add or remove the wrong type of entry will result in the return of a 'wrongValue' error.")
xnatPools = MibIdentifier((1, 3, 6, 1, 4, 1, 838, 3, 23, 1, 6))
xnatDynamicNatPoolTable = MibTable((1, 3, 6, 1, 4, 1, 838, 3, 23, 1, 6, 1), )
if mibBuilder.loadTexts: xnatDynamicNatPoolTable.setStatus('current')
if mibBuilder.loadTexts: xnatDynamicNatPoolTable.setDescription('The set of dynamic NAT pools configured for the router.')
xnatDynamicNatPoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 838, 3, 23, 1, 6, 1, 1), ).setIndexNames((0, "XEDIA-NETWORK-ADDRESS-TRANSLATOR-MIB", "xnatDynNatPoolName"))
if mibBuilder.loadTexts: xnatDynamicNatPoolEntry.setStatus('current')
if mibBuilder.loadTexts: xnatDynamicNatPoolEntry.setDescription('The information maintained for each dynamic NAT Pool. Each pool may have a maximum of 5 ranges. Unused ranges are displayed as zeros')
xnatDynNatPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 23, 1, 6, 1, 1, 1), DisplayString())
if mibBuilder.loadTexts: xnatDynNatPoolName.setStatus('current')
if mibBuilder.loadTexts: xnatDynNatPoolName.setDescription('The name of the pool. It must be unique and is the index for the dynamic NAT pool table.')
xnatDynNatPoolRangeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 23, 1, 6, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xnatDynNatPoolRangeCount.setStatus('current')
if mibBuilder.loadTexts: xnatDynNatPoolRangeCount.setDescription('The number of ranges associated with the pool.')
xnatDynNatPoolNetAssgns = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 23, 1, 6, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xnatDynNatPoolNetAssgns.setStatus('current')
if mibBuilder.loadTexts: xnatDynNatPoolNetAssgns.setDescription('The number of private networks to which the pool is assigned.')
xnatDynNatPoolRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 23, 1, 6, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xnatDynNatPoolRowStatus.setStatus('current')
if mibBuilder.loadTexts: xnatDynNatPoolRowStatus.setDescription("The status control the creation of dynamic NAT Pool entries. The only values supported for this object are 'active', 'createAndGo', and 'destroy'.")
xnatDynamicNatPoolRangeTable = MibTable((1, 3, 6, 1, 4, 1, 838, 3, 23, 1, 6, 2), )
if mibBuilder.loadTexts: xnatDynamicNatPoolRangeTable.setStatus('current')
if mibBuilder.loadTexts: xnatDynamicNatPoolRangeTable.setDescription('The set of ranges associated with a pool.')
xnatDynamicNatPoolRangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 838, 3, 23, 1, 6, 2, 1), ).setIndexNames((0, "XEDIA-NETWORK-ADDRESS-TRANSLATOR-MIB", "xnatDynNatPoolRangeName"), (0, "XEDIA-NETWORK-ADDRESS-TRANSLATOR-MIB", "xnatDynNatPoolRangeBeg"))
if mibBuilder.loadTexts: xnatDynamicNatPoolRangeEntry.setStatus('current')
if mibBuilder.loadTexts: xnatDynamicNatPoolRangeEntry.setDescription('The information maintained for each dynamic NAT range.')
xnatDynNatPoolRangeName = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 23, 1, 6, 2, 1, 1), DisplayString())
if mibBuilder.loadTexts: xnatDynNatPoolRangeName.setStatus('current')
if mibBuilder.loadTexts: xnatDynNatPoolRangeName.setDescription('The name of the pool with which the range belongs.')
xnatDynNatPoolRangeBeg = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 23, 1, 6, 2, 1, 2), XnatIpAddress())
if mibBuilder.loadTexts: xnatDynNatPoolRangeBeg.setStatus('current')
if mibBuilder.loadTexts: xnatDynNatPoolRangeBeg.setDescription('The beginning registered IP address for the range.')
xnatDynNatPoolRangeEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 23, 1, 6, 2, 1, 3), XnatIpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xnatDynNatPoolRangeEnd.setStatus('current')
if mibBuilder.loadTexts: xnatDynNatPoolRangeEnd.setDescription('The ending registered IP address for the range.')
xnatDynNatPoolRangeMask = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 23, 1, 6, 2, 1, 4), XnatIpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xnatDynNatPoolRangeMask.setStatus('current')
if mibBuilder.loadTexts: xnatDynNatPoolRangeMask.setDescription('The network mask for the range.')
xnatDynNatPoolRangeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 23, 1, 6, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xnatDynNatPoolRangeRowStatus.setStatus('current')
if mibBuilder.loadTexts: xnatDynNatPoolRangeRowStatus.setDescription('The status object is used to add and delete conceptual rows to the table.')
xnatDynamicNaptPoolTable = MibTable((1, 3, 6, 1, 4, 1, 838, 3, 23, 1, 6, 3), )
if mibBuilder.loadTexts: xnatDynamicNaptPoolTable.setStatus('current')
if mibBuilder.loadTexts: xnatDynamicNaptPoolTable.setDescription('The set of dynamic NAPT pools configured for the router')
xnatDynamicNaptPoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 838, 3, 23, 1, 6, 3, 1), ).setIndexNames((0, "XEDIA-NETWORK-ADDRESS-TRANSLATOR-MIB", "xnatDynNaptPoolName"))
if mibBuilder.loadTexts: xnatDynamicNaptPoolEntry.setStatus('current')
if mibBuilder.loadTexts: xnatDynamicNaptPoolEntry.setDescription('The information maintained for each dynamic NAPT Pool. The pool may have only 1 associated port range. The range is used for TCP, UDP, and ICMP sequence numbers.')
xnatDynNaptPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 23, 1, 6, 3, 1, 1), DisplayString())
if mibBuilder.loadTexts: xnatDynNaptPoolName.setStatus('current')
if mibBuilder.loadTexts: xnatDynNaptPoolName.setDescription('The name of the pool. It must be unique and is the index for the dynamic NAPT pool table.')
xnatDynNaptPoolAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 23, 1, 6, 3, 1, 2), XnatIpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xnatDynNaptPoolAddr.setStatus('current')
if mibBuilder.loadTexts: xnatDynNaptPoolAddr.setDescription('The single registered IP address used for NAPT. The address is usually the interface address of the interface to the public Internet')
xnatDynNaptPoolMask = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 23, 1, 6, 3, 1, 3), XnatIpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xnatDynNaptPoolMask.setStatus('current')
if mibBuilder.loadTexts: xnatDynNaptPoolMask.setDescription('The network mask for the pool address.')
xnatDynNaptPoolRangeBeg = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 23, 1, 6, 3, 1, 4), XnatPort().clone(20000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xnatDynNaptPoolRangeBeg.setStatus('current')
if mibBuilder.loadTexts: xnatDynNaptPoolRangeBeg.setDescription('The beginning number for UDP and TCP port ranges and ICMP sequence number range')
xnatDynNaptPoolRangeEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 23, 1, 6, 3, 1, 5), XnatPort().clone(24095)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xnatDynNaptPoolRangeEnd.setStatus('current')
if mibBuilder.loadTexts: xnatDynNaptPoolRangeEnd.setDescription('The ending number for UDP and TCP port ranges and ICMP sequence number range')
xnatDynNaptPoolNetAssgns = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 23, 1, 6, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xnatDynNaptPoolNetAssgns.setStatus('current')
if mibBuilder.loadTexts: xnatDynNaptPoolNetAssgns.setDescription('The number of private networks to which the pool is assigned.')
xnatDynNaptPoolRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 23, 1, 6, 3, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xnatDynNaptPoolRowStatus.setStatus('current')
if mibBuilder.loadTexts: xnatDynNaptPoolRowStatus.setDescription('The status control the creation of dynamic NAPT Pool entries')
xnatLoadSharePoolTable = MibTable((1, 3, 6, 1, 4, 1, 838, 3, 23, 1, 6, 4), )
if mibBuilder.loadTexts: xnatLoadSharePoolTable.setStatus('current')
if mibBuilder.loadTexts: xnatLoadSharePoolTable.setDescription('The set of load sharing pools configured for the router')
xnatLoadSharePoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 838, 3, 23, 1, 6, 4, 1), ).setIndexNames((0, "XEDIA-NETWORK-ADDRESS-TRANSLATOR-MIB", "xnatLoadSharePoolName"))
if mibBuilder.loadTexts: xnatLoadSharePoolEntry.setStatus('current')
if mibBuilder.loadTexts: xnatLoadSharePoolEntry.setDescription('The information maintained for each load sharing pool. Each pool may have a maximum of 5 ranges. Unused ranges are displayed as zeros')
xnatLoadSharePoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 23, 1, 6, 4, 1, 1), DisplayString())
if mibBuilder.loadTexts: xnatLoadSharePoolName.setStatus('current')
if mibBuilder.loadTexts: xnatLoadSharePoolName.setDescription('The name of the pool. It must be unique and is the index for the load sharing pool table.')
xnatLoadSharePoolAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 23, 1, 6, 4, 1, 2), XnatIpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xnatLoadSharePoolAddr.setStatus('current')
if mibBuilder.loadTexts: xnatLoadSharePoolAddr.setDescription('The registered IP address used to represent the pool.')
xnatLoadSharePoolMask = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 23, 1, 6, 4, 1, 3), XnatIpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xnatLoadSharePoolMask.setStatus('current')
if mibBuilder.loadTexts: xnatLoadSharePoolMask.setDescription('The network mask for the pool address.')
xnatLoadSharePoolPort = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 23, 1, 6, 4, 1, 4), XnatPort()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xnatLoadSharePoolPort.setStatus('current')
if mibBuilder.loadTexts: xnatLoadSharePoolPort.setDescription('The port number associated with the address used to represent the pool. A port number of zero will match any port number')
xnatLoadSharePoolProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 23, 1, 6, 4, 1, 5), XnatProtocol()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xnatLoadSharePoolProtocol.setStatus('current')
if mibBuilder.loadTexts: xnatLoadSharePoolProtocol.setDescription('The protocol associated with the address used to represent the pool. A protocol of zero will match any protocol')
xnatLoadSharePoolRangeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 23, 1, 6, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xnatLoadSharePoolRangeCount.setStatus('current')
if mibBuilder.loadTexts: xnatLoadSharePoolRangeCount.setDescription('The number of ranges associated with the pool.')
xnatLoadSharePoolRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 23, 1, 6, 4, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xnatLoadSharePoolRowStatus.setStatus('current')
if mibBuilder.loadTexts: xnatLoadSharePoolRowStatus.setDescription('The status control the creation of load sharing pool entries')
xnatLoadSharePoolRangeTable = MibTable((1, 3, 6, 1, 4, 1, 838, 3, 23, 1, 6, 5), )
if mibBuilder.loadTexts: xnatLoadSharePoolRangeTable.setStatus('current')
if mibBuilder.loadTexts: xnatLoadSharePoolRangeTable.setDescription('The set of ranges associated with a pool')
xnatLoadSharePoolRangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 838, 3, 23, 1, 6, 5, 1), ).setIndexNames((0, "XEDIA-NETWORK-ADDRESS-TRANSLATOR-MIB", "xnatLoadSharePoolRangeName"), (0, "XEDIA-NETWORK-ADDRESS-TRANSLATOR-MIB", "xnatLoadSharePoolRangeBeg"))
if mibBuilder.loadTexts: xnatLoadSharePoolRangeEntry.setStatus('current')
if mibBuilder.loadTexts: xnatLoadSharePoolRangeEntry.setDescription('The information maintained for each load sharing range.')
xnatLoadSharePoolRangeName = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 23, 1, 6, 5, 1, 1), DisplayString())
if mibBuilder.loadTexts: xnatLoadSharePoolRangeName.setStatus('current')
if mibBuilder.loadTexts: xnatLoadSharePoolRangeName.setDescription('The name of the pool with which the range belongs.')
xnatLoadSharePoolRangeBeg = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 23, 1, 6, 5, 1, 2), XnatIpAddress())
if mibBuilder.loadTexts: xnatLoadSharePoolRangeBeg.setStatus('current')
if mibBuilder.loadTexts: xnatLoadSharePoolRangeBeg.setDescription('The beginning private IP address for the range.')
xnatLoadSharePoolRangeEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 23, 1, 6, 5, 1, 3), XnatIpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xnatLoadSharePoolRangeEnd.setStatus('current')
if mibBuilder.loadTexts: xnatLoadSharePoolRangeEnd.setDescription('The ending private IP address for the range.')
xnatLoadSharePoolRangeMask = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 23, 1, 6, 5, 1, 4), XnatIpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xnatLoadSharePoolRangeMask.setStatus('current')
if mibBuilder.loadTexts: xnatLoadSharePoolRangeMask.setDescription('The ending private IP address for the range.')
xnatLoadSharePoolRangePort = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 23, 1, 6, 5, 1, 5), XnatPort()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xnatLoadSharePoolRangePort.setStatus('current')
if mibBuilder.loadTexts: xnatLoadSharePoolRangePort.setDescription('The port number associated with the range. If a load sharing pool has an associated port number, a range must also have a port.')
xnatLoadSharePoolRangeProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 23, 1, 6, 5, 1, 6), XnatProtocol()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xnatLoadSharePoolRangeProtocol.setStatus('current')
if mibBuilder.loadTexts: xnatLoadSharePoolRangeProtocol.setDescription('The port number associated with the range. If a load sharing pool has an associated port number, a range must also have a port.')
xnatLoadSharePoolRangeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 23, 1, 6, 5, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xnatLoadSharePoolRangeRowStatus.setStatus('current')
if mibBuilder.loadTexts: xnatLoadSharePoolRangeRowStatus.setDescription('The status object is used to add and delete conceptual rows to the table.')
xnatPrivateNetTable = MibTable((1, 3, 6, 1, 4, 1, 838, 3, 23, 1, 7), )
if mibBuilder.loadTexts: xnatPrivateNetTable.setStatus('current')
if mibBuilder.loadTexts: xnatPrivateNetTable.setDescription('The table shows every private network on which address translation will be performed.')
xnatPrivateNetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 838, 3, 23, 1, 7, 1), ).setIndexNames((0, "XEDIA-NETWORK-ADDRESS-TRANSLATOR-MIB", "xnatPrivateNetAddr"))
if mibBuilder.loadTexts: xnatPrivateNetEntry.setStatus('current')
if mibBuilder.loadTexts: xnatPrivateNetEntry.setDescription('The information maintained for each private network.')
xnatPrivateNetAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 23, 1, 7, 1, 1), XnatIpAddress())
if mibBuilder.loadTexts: xnatPrivateNetAddr.setStatus('current')
if mibBuilder.loadTexts: xnatPrivateNetAddr.setDescription('The network address of the private network.')
xnatPrivateNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 23, 1, 7, 1, 2), XnatIpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xnatPrivateNetMask.setStatus('current')
if mibBuilder.loadTexts: xnatPrivateNetMask.setDescription('The network mask for the network address.')
xnatPrivateNetPoolCount = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 23, 1, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xnatPrivateNetPoolCount.setStatus('current')
if mibBuilder.loadTexts: xnatPrivateNetPoolCount.setDescription('The number of dynamic pool associated with the network.')
xnatPrivateNetRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 23, 1, 7, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xnatPrivateNetRowStatus.setStatus('current')
if mibBuilder.loadTexts: xnatPrivateNetRowStatus.setDescription('The status controls the creation and deletion of private network table conceptual rows')
xnatPriNetAssoPoolTable = MibTable((1, 3, 6, 1, 4, 1, 838, 3, 23, 1, 8), )
if mibBuilder.loadTexts: xnatPriNetAssoPoolTable.setStatus('current')
if mibBuilder.loadTexts: xnatPriNetAssoPoolTable.setDescription('The table shows the dynamic translation pools that are associated with private networks.')
xnatPriNetAssoPoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 838, 3, 23, 1, 8, 1), ).setIndexNames((0, "XEDIA-NETWORK-ADDRESS-TRANSLATOR-MIB", "xnatPriNetAssoPoolNetAddr"), (0, "XEDIA-NETWORK-ADDRESS-TRANSLATOR-MIB", "xnatPriNetAssoPoolName"))
if mibBuilder.loadTexts: xnatPriNetAssoPoolEntry.setStatus('current')
if mibBuilder.loadTexts: xnatPriNetAssoPoolEntry.setDescription('The information maintained for each associated pool.')
xnatPriNetAssoPoolNetAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 23, 1, 8, 1, 1), XnatIpAddress())
if mibBuilder.loadTexts: xnatPriNetAssoPoolNetAddr.setStatus('current')
if mibBuilder.loadTexts: xnatPriNetAssoPoolNetAddr.setDescription('The network address of the private network.')
xnatPriNetAssoPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 23, 1, 8, 1, 2), DisplayString())
if mibBuilder.loadTexts: xnatPriNetAssoPoolName.setStatus('current')
if mibBuilder.loadTexts: xnatPriNetAssoPoolName.setDescription('The name of the dynamic pool.')
xnatPriNetAssoPoolOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 23, 1, 8, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xnatPriNetAssoPoolOrder.setStatus('current')
if mibBuilder.loadTexts: xnatPriNetAssoPoolOrder.setDescription('The order in which the pool is used for allocation.')
xnatPriNetAssoPoolRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 23, 1, 8, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xnatPriNetAssoPoolRowStatus.setStatus('current')
if mibBuilder.loadTexts: xnatPriNetAssoPoolRowStatus.setDescription('The status controls the creation and deletion of associated pool table conceptual rows')
xnatCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 838, 3, 23, 2, 1))
xnatGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 838, 3, 23, 2, 2))
xnatCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 838, 3, 23, 2, 1, 1)).setObjects(("XEDIA-NETWORK-ADDRESS-TRANSLATOR-MIB", "xnatGeneralGroup"), ("XEDIA-NETWORK-ADDRESS-TRANSLATOR-MIB", "xnatTimersGroup"), ("XEDIA-NETWORK-ADDRESS-TRANSLATOR-MIB", "xnatSessionGroup"), ("XEDIA-NETWORK-ADDRESS-TRANSLATOR-MIB", "xnatBindingGroup"), ("XEDIA-NETWORK-ADDRESS-TRANSLATOR-MIB", "xnatDynamicNatPoolGroup"), ("XEDIA-NETWORK-ADDRESS-TRANSLATOR-MIB", "xnatDynamicNatRangeGroup"), ("XEDIA-NETWORK-ADDRESS-TRANSLATOR-MIB", "xnatDynamicNaptPoolGroup"), ("XEDIA-NETWORK-ADDRESS-TRANSLATOR-MIB", "xnatLoadSharePoolGroup"), ("XEDIA-NETWORK-ADDRESS-TRANSLATOR-MIB", "xnatLoadShareRangeGroup"), ("XEDIA-NETWORK-ADDRESS-TRANSLATOR-MIB", "xnatPrivateNetGroup"), ("XEDIA-NETWORK-ADDRESS-TRANSLATOR-MIB", "xnatPriNetAssoPoolGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xnatCompliance = xnatCompliance.setStatus('current')
if mibBuilder.loadTexts: xnatCompliance.setDescription('The compliance statement for all agents that support this MIB. A compliant agent implements all objects defined in this MIB.')
xnatGeneralGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 838, 3, 23, 2, 2, 1)).setObjects(("XEDIA-NETWORK-ADDRESS-TRANSLATOR-MIB", "xnatAdminStatus"), ("XEDIA-NETWORK-ADDRESS-TRANSLATOR-MIB", "xnatMaxIboundSessions"), ("XEDIA-NETWORK-ADDRESS-TRANSLATOR-MIB", "xnatMaxOboundSessions"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xnatGeneralGroup = xnatGeneralGroup.setStatus('current')
if mibBuilder.loadTexts: xnatGeneralGroup.setDescription('These objects are required for Address Translation.')
xnatCountersGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 838, 3, 23, 2, 2, 2)).setObjects(("XEDIA-NETWORK-ADDRESS-TRANSLATOR-MIB", "xnatOboundPackets"), ("XEDIA-NETWORK-ADDRESS-TRANSLATOR-MIB", "xnatOboundIcmp"), ("XEDIA-NETWORK-ADDRESS-TRANSLATOR-MIB", "xnatOboundTcp"), ("XEDIA-NETWORK-ADDRESS-TRANSLATOR-MIB", "xnatOboundUdp"), ("XEDIA-NETWORK-ADDRESS-TRANSLATOR-MIB", "xnatOboundUntranslated"), ("XEDIA-NETWORK-ADDRESS-TRANSLATOR-MIB", "xnatOboundDiscards"), ("XEDIA-NETWORK-ADDRESS-TRANSLATOR-MIB", "xnatIboundPackets"), ("XEDIA-NETWORK-ADDRESS-TRANSLATOR-MIB", "xnatIboundIcmp"), ("XEDIA-NETWORK-ADDRESS-TRANSLATOR-MIB", "xnatIboundTcp"), ("XEDIA-NETWORK-ADDRESS-TRANSLATOR-MIB", "xnatIboundUdp"), ("XEDIA-NETWORK-ADDRESS-TRANSLATOR-MIB", "xnatIboundUntranslated"), ("XEDIA-NETWORK-ADDRESS-TRANSLATOR-MIB", "xnatIboundDiscards"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xnatCountersGroup = xnatCountersGroup.setStatus('current')
if mibBuilder.loadTexts: xnatCountersGroup.setDescription('These objects are required for Address Translation.')
xnatTimersGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 838, 3, 23, 2, 2, 3)).setObjects(("XEDIA-NETWORK-ADDRESS-TRANSLATOR-MIB", "xnatUdpTimeout"), ("XEDIA-NETWORK-ADDRESS-TRANSLATOR-MIB", "xnatDnsTimeout"), ("XEDIA-NETWORK-ADDRESS-TRANSLATOR-MIB", "xnatTcpTimeout"), ("XEDIA-NETWORK-ADDRESS-TRANSLATOR-MIB", "xnatFinRstTimeout"), ("XEDIA-NETWORK-ADDRESS-TRANSLATOR-MIB", "xnatSynTimeout"), ("XEDIA-NETWORK-ADDRESS-TRANSLATOR-MIB", "xnatIcmpTimeout"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xnatTimersGroup = xnatTimersGroup.setStatus('current')
if mibBuilder.loadTexts: xnatTimersGroup.setDescription('These objects are required for Address Translation.')
xnatSessionGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 838, 3, 23, 2, 2, 4)).setObjects(("XEDIA-NETWORK-ADDRESS-TRANSLATOR-MIB", "xnatSessionRegAddr"), ("XEDIA-NETWORK-ADDRESS-TRANSLATOR-MIB", "xnatSessionRegPort"), ("XEDIA-NETWORK-ADDRESS-TRANSLATOR-MIB", "xnatSessionType"), ("XEDIA-NETWORK-ADDRESS-TRANSLATOR-MIB", "xnatSessionRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xnatSessionGroup = xnatSessionGroup.setStatus('current')
if mibBuilder.loadTexts: xnatSessionGroup.setDescription('These objects are required for Address Translation.')
xnatBindingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 838, 3, 23, 2, 2, 5)).setObjects(("XEDIA-NETWORK-ADDRESS-TRANSLATOR-MIB", "xnatBindingType"), ("XEDIA-NETWORK-ADDRESS-TRANSLATOR-MIB", "xnatBindingInSessions"), ("XEDIA-NETWORK-ADDRESS-TRANSLATOR-MIB", "xnatBindingOutSessions"), ("XEDIA-NETWORK-ADDRESS-TRANSLATOR-MIB", "xnatBindingRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xnatBindingGroup = xnatBindingGroup.setStatus('current')
if mibBuilder.loadTexts: xnatBindingGroup.setDescription('These objects are required for Address Translation.')
xnatDynamicNatPoolGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 838, 3, 23, 2, 2, 6)).setObjects(("XEDIA-NETWORK-ADDRESS-TRANSLATOR-MIB", "xnatDynNatPoolRangeCount"), ("XEDIA-NETWORK-ADDRESS-TRANSLATOR-MIB", "xnatDynNatPoolNetAssgns"), ("XEDIA-NETWORK-ADDRESS-TRANSLATOR-MIB", "xnatDynNatPoolRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xnatDynamicNatPoolGroup = xnatDynamicNatPoolGroup.setStatus('current')
if mibBuilder.loadTexts: xnatDynamicNatPoolGroup.setDescription('These objects are required for Address Translation.')
xnatDynamicNatRangeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 838, 3, 23, 2, 2, 7)).setObjects(("XEDIA-NETWORK-ADDRESS-TRANSLATOR-MIB", "xnatDynNatPoolRangeEnd"), ("XEDIA-NETWORK-ADDRESS-TRANSLATOR-MIB", "xnatDynNatPoolRangeMask"), ("XEDIA-NETWORK-ADDRESS-TRANSLATOR-MIB", "xnatDynNatPoolRangeRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xnatDynamicNatRangeGroup = xnatDynamicNatRangeGroup.setStatus('current')
if mibBuilder.loadTexts: xnatDynamicNatRangeGroup.setDescription('These objects are required for Address Translation.')
xnatDynamicNaptPoolGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 838, 3, 23, 2, 2, 8)).setObjects(("XEDIA-NETWORK-ADDRESS-TRANSLATOR-MIB", "xnatDynNaptPoolAddr"), ("XEDIA-NETWORK-ADDRESS-TRANSLATOR-MIB", "xnatDynNaptPoolMask"), ("XEDIA-NETWORK-ADDRESS-TRANSLATOR-MIB", "xnatDynNaptPoolRangeBeg"), ("XEDIA-NETWORK-ADDRESS-TRANSLATOR-MIB", "xnatDynNaptPoolRangeEnd"), ("XEDIA-NETWORK-ADDRESS-TRANSLATOR-MIB", "xnatDynNaptPoolNetAssgns"), ("XEDIA-NETWORK-ADDRESS-TRANSLATOR-MIB", "xnatDynNaptPoolRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xnatDynamicNaptPoolGroup = xnatDynamicNaptPoolGroup.setStatus('current')
if mibBuilder.loadTexts: xnatDynamicNaptPoolGroup.setDescription('These objects are required for Address Translation.')
xnatLoadSharePoolGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 838, 3, 23, 2, 2, 9)).setObjects(("XEDIA-NETWORK-ADDRESS-TRANSLATOR-MIB", "xnatLoadSharePoolAddr"), ("XEDIA-NETWORK-ADDRESS-TRANSLATOR-MIB", "xnatLoadSharePoolMask"), ("XEDIA-NETWORK-ADDRESS-TRANSLATOR-MIB", "xnatLoadSharePoolPort"), ("XEDIA-NETWORK-ADDRESS-TRANSLATOR-MIB", "xnatLoadSharePoolProtocol"), ("XEDIA-NETWORK-ADDRESS-TRANSLATOR-MIB", "xnatLoadSharePoolRangeCount"), ("XEDIA-NETWORK-ADDRESS-TRANSLATOR-MIB", "xnatLoadSharePoolRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xnatLoadSharePoolGroup = xnatLoadSharePoolGroup.setStatus('current')
if mibBuilder.loadTexts: xnatLoadSharePoolGroup.setDescription('These objects are required for Address Translation.')
xnatLoadShareRangeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 838, 3, 23, 2, 2, 10)).setObjects(("XEDIA-NETWORK-ADDRESS-TRANSLATOR-MIB", "xnatLoadSharePoolRangeEnd"), ("XEDIA-NETWORK-ADDRESS-TRANSLATOR-MIB", "xnatLoadSharePoolRangeMask"), ("XEDIA-NETWORK-ADDRESS-TRANSLATOR-MIB", "xnatLoadSharePoolRangePort"), ("XEDIA-NETWORK-ADDRESS-TRANSLATOR-MIB", "xnatLoadSharePoolRangeProtocol"), ("XEDIA-NETWORK-ADDRESS-TRANSLATOR-MIB", "xnatLoadSharePoolRangeRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xnatLoadShareRangeGroup = xnatLoadShareRangeGroup.setStatus('current')
if mibBuilder.loadTexts: xnatLoadShareRangeGroup.setDescription('These objects are required for Address Translation.')
xnatPrivateNetGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 838, 3, 23, 2, 2, 11)).setObjects(("XEDIA-NETWORK-ADDRESS-TRANSLATOR-MIB", "xnatPrivateNetMask"), ("XEDIA-NETWORK-ADDRESS-TRANSLATOR-MIB", "xnatPrivateNetRowStatus"), ("XEDIA-NETWORK-ADDRESS-TRANSLATOR-MIB", "xnatPrivateNetPoolCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xnatPrivateNetGroup = xnatPrivateNetGroup.setStatus('current')
if mibBuilder.loadTexts: xnatPrivateNetGroup.setDescription('These objects are required for Address Translation.')
xnatPriNetAssoPoolGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 838, 3, 23, 2, 2, 12)).setObjects(("XEDIA-NETWORK-ADDRESS-TRANSLATOR-MIB", "xnatPriNetAssoPoolOrder"), ("XEDIA-NETWORK-ADDRESS-TRANSLATOR-MIB", "xnatPriNetAssoPoolRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xnatPriNetAssoPoolGroup = xnatPriNetAssoPoolGroup.setStatus('current')
if mibBuilder.loadTexts: xnatPriNetAssoPoolGroup.setDescription('These objects are required for Address Translation.')
mibBuilder.exportSymbols("XEDIA-NETWORK-ADDRESS-TRANSLATOR-MIB", xnatSessionOutPort=xnatSessionOutPort, xnatMaxOboundSessions=xnatMaxOboundSessions, xnatDynNaptPoolAddr=xnatDynNaptPoolAddr, xnatPriNetAssoPoolGroup=xnatPriNetAssoPoolGroup, xnatSessionRowStatus=xnatSessionRowStatus, xnatOboundIcmp=xnatOboundIcmp, xnatBindingPriPort=xnatBindingPriPort, xnatLoadSharePoolRangeRowStatus=xnatLoadSharePoolRangeRowStatus, xnatDynamicNatPoolEntry=xnatDynamicNatPoolEntry, xnatIboundTcp=xnatIboundTcp, xnatLoadSharePoolRangeCount=xnatLoadSharePoolRangeCount, xnatDynNatPoolNetAssgns=xnatDynNatPoolNetAssgns, xnatCountersGroup=xnatCountersGroup, xnatBindingRegAddr=xnatBindingRegAddr, xnatGroups=xnatGroups, xnatLoadSharePoolRowStatus=xnatLoadSharePoolRowStatus, xnatSessionRegAddr=xnatSessionRegAddr, xnatSessionProtocol=xnatSessionProtocol, xnatDynamicNatRangeGroup=xnatDynamicNatRangeGroup, xnatTimersGroup=xnatTimersGroup, xnatPriNetAssoPoolName=xnatPriNetAssoPoolName, xnatLoadSharePoolProtocol=xnatLoadSharePoolProtocol, xnatOboundTcp=xnatOboundTcp, xnatBindingProtocol=xnatBindingProtocol, xnatLoadSharePoolMask=xnatLoadSharePoolMask, xnatSessionGroup=xnatSessionGroup, xnatMaxIboundSessions=xnatMaxIboundSessions, XnatProtocol=XnatProtocol, xnatPriNetAssoPoolNetAddr=xnatPriNetAssoPoolNetAddr, xnatDynNaptPoolRowStatus=xnatDynNaptPoolRowStatus, xnatPrivateNetEntry=xnatPrivateNetEntry, xnatBindingInSessions=xnatBindingInSessions, xnatLoadSharePoolRangeBeg=xnatLoadSharePoolRangeBeg, xnatDynNaptPoolMask=xnatDynNaptPoolMask, xnatLoadShareRangeGroup=xnatLoadShareRangeGroup, xnatDynamicNatPoolTable=xnatDynamicNatPoolTable, xnatTimers=xnatTimers, xnatDynamicNaptPoolEntry=xnatDynamicNaptPoolEntry, XnatBindingType=XnatBindingType, xnatLoadSharePoolRangeEnd=xnatLoadSharePoolRangeEnd, xnatPrivateNetAddr=xnatPrivateNetAddr, xnatDynNatPoolRangeEnd=xnatDynNatPoolRangeEnd, xnatBindingRegPort=xnatBindingRegPort, xnatIboundUntranslated=xnatIboundUntranslated, xnatBindingType=xnatBindingType, xnatLoadSharePoolPort=xnatLoadSharePoolPort, xnatDnsTimeout=xnatDnsTimeout, xnatDynNaptPoolRangeEnd=xnatDynNaptPoolRangeEnd, xnatSessionPriAddr=xnatSessionPriAddr, xnatPrivateNetPoolCount=xnatPrivateNetPoolCount, xnatIboundDiscards=xnatIboundDiscards, xnatUdpTimeout=xnatUdpTimeout, xnatDynNatPoolRowStatus=xnatDynNatPoolRowStatus, xnatBindingRowStatus=xnatBindingRowStatus, XnatIpAddress=XnatIpAddress, xnatLoadSharePoolName=xnatLoadSharePoolName, xnatGeneral=xnatGeneral, xnatDynNatPoolRangeName=xnatDynNatPoolRangeName, xnatPriNetAssoPoolOrder=xnatPriNetAssoPoolOrder, xnatDynamicNaptPoolGroup=xnatDynamicNaptPoolGroup, xnatDynamicNatPoolGroup=xnatDynamicNatPoolGroup, xnatOboundUntranslated=xnatOboundUntranslated, XnatPort=XnatPort, xnatIboundUdp=xnatIboundUdp, xnatPriNetAssoPoolTable=xnatPriNetAssoPoolTable, xnatCompliances=xnatCompliances, xnatSessionEntry=xnatSessionEntry, xnatBindingEntry=xnatBindingEntry, xnatLoadSharePoolGroup=xnatLoadSharePoolGroup, xnatPrivateNetRowStatus=xnatPrivateNetRowStatus, xnatSessionRegPort=xnatSessionRegPort, xnatCompliance=xnatCompliance, xnatCounters=xnatCounters, XnatTimeout=XnatTimeout, xnatDynNaptPoolName=xnatDynNaptPoolName, xnatSessionType=xnatSessionType, xnatPrivateNetGroup=xnatPrivateNetGroup, PYSNMP_MODULE_ID=xediaNetworkAddressTranslatorMIB, xnatLoadSharePoolRangePort=xnatLoadSharePoolRangePort, xnatSynTimeout=xnatSynTimeout, xnatLoadSharePoolTable=xnatLoadSharePoolTable, XnatSessionType=XnatSessionType, xnatBindingOutSessions=xnatBindingOutSessions, xnatDynNatPoolName=xnatDynNatPoolName, xnatDynNatPoolRangeRowStatus=xnatDynNatPoolRangeRowStatus, xnatPools=xnatPools, xnatBindingPriAddr=xnatBindingPriAddr, xnatDynNatPoolRangeBeg=xnatDynNatPoolRangeBeg, xnatLoadSharePoolRangeEntry=xnatLoadSharePoolRangeEntry, xediaNetworkAddressTranslatorMIB=xediaNetworkAddressTranslatorMIB, xnatSessionTable=xnatSessionTable, xnatSessionPriPort=xnatSessionPriPort, xnatSessionOutAddr=xnatSessionOutAddr, xnatDynamicNaptPoolTable=xnatDynamicNaptPoolTable, xnatDynNatPoolRangeCount=xnatDynNatPoolRangeCount, xnatLoadSharePoolRangeProtocol=xnatLoadSharePoolRangeProtocol, xnatPriNetAssoPoolEntry=xnatPriNetAssoPoolEntry, xnatDynamicNatPoolRangeTable=xnatDynamicNatPoolRangeTable, xnatLoadSharePoolAddr=xnatLoadSharePoolAddr, xnatAdminStatus=xnatAdminStatus, xnatGeneralGroup=xnatGeneralGroup, xnatTcpTimeout=xnatTcpTimeout, xnatObjects=xnatObjects, xnatLoadSharePoolEntry=xnatLoadSharePoolEntry, xnatFinRstTimeout=xnatFinRstTimeout, xnatConformance=xnatConformance, xnatPriNetAssoPoolRowStatus=xnatPriNetAssoPoolRowStatus, xnatPrivateNetTable=xnatPrivateNetTable, xnatDynNatPoolRangeMask=xnatDynNatPoolRangeMask, xnatIboundIcmp=xnatIboundIcmp, xnatLoadSharePoolRangeName=xnatLoadSharePoolRangeName, xnatLoadSharePoolRangeMask=xnatLoadSharePoolRangeMask, xnatBindingGroup=xnatBindingGroup, xnatIcmpTimeout=xnatIcmpTimeout, xnatOboundDiscards=xnatOboundDiscards, xnatIboundPackets=xnatIboundPackets, xnatOboundPackets=xnatOboundPackets, XnatCounter=XnatCounter, xnatDynamicNatPoolRangeEntry=xnatDynamicNatPoolRangeEntry, xnatDynNaptPoolNetAssgns=xnatDynNaptPoolNetAssgns, xnatLoadSharePoolRangeTable=xnatLoadSharePoolRangeTable, xnatDynNaptPoolRangeBeg=xnatDynNaptPoolRangeBeg, xnatPrivateNetMask=xnatPrivateNetMask, xnatBindingTable=xnatBindingTable, xnatOboundUdp=xnatOboundUdp)
