#
# PySNMP MIB module NETEXEC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NETEXEC-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:18:45 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter64, Bits, Integer32, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, IpAddress, NotificationType, TimeTicks, iso, NotificationType, ModuleIdentity, MibIdentifier, Gauge32, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Bits", "Integer32", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "IpAddress", "NotificationType", "TimeTicks", "iso", "NotificationType", "ModuleIdentity", "MibIdentifier", "Gauge32", "ObjectIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
internet = MibIdentifier((1, 3, 6, 1))
private = MibIdentifier((1, 3, 6, 1, 4))
enterprises = MibIdentifier((1, 3, 6, 1, 4, 1))
tylink = MibIdentifier((1, 3, 6, 1, 4, 1, 466))
netexec = MibIdentifier((1, 3, 6, 1, 4, 1, 466, 6))
dsucsu = MibIdentifier((1, 3, 6, 1, 4, 1, 466, 6, 1))
tyview = MibIdentifier((1, 3, 6, 1, 4, 1, 466, 6, 2))
dsucsuSysTable = MibTable((1, 3, 6, 1, 4, 1, 466, 6, 1, 1), )
if mibBuilder.loadTexts: dsucsuSysTable.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuSysTable.setDescription('A list of system level attributes describing the addressed node.')
dsucsuSysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 466, 6, 1, 1, 1), ).setIndexNames((0, "NETEXEC-MIB", "dsucsuSysSlot"), (0, "NETEXEC-MIB", "dsucsuSysNode"))
if mibBuilder.loadTexts: dsucsuSysEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuSysEntry.setDescription('System Object for a DSU/CSU')
dsucsuSysSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuSysSlot.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuSysSlot.setDescription('The PC port to which the TyView node is attached.')
dsucsuSysNode = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuSysNode.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuSysNode.setDescription('The node ID: unique per port ID.')
dsucsuSysName = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuSysName.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuSysName.setDescription('The unique name of the node accessed')
dsucsuSysType = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("unknown", 1), ("ons400", 2), ("fns400", 3), ("ons400e", 4), ("sns400", 5), ("ons1000", 6), ("ons232sp", 7), ("ons271sp", 8), ("ons200", 9), ("ons400n", 10), ("sns256", 11), ("sns4000", 12), ("sns1000", 13), ("ty3410", 14), ("ty3210", 15), ("ons1010n", 16), ("ty3250", 17), ("ty3000n", 18), ("ty3450n", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuSysType.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuSysType.setDescription('A desciption of the system model: ie. ONS400, FNS400, ONS1000X, BLACK BOX FT1-4')
dsucsuSysSoftRev = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuSysSoftRev.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuSysSoftRev.setDescription('Displays the Software Revision of the accessed node.')
dsucsuSysHardRev = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuSysHardRev.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuSysHardRev.setDescription('Displays the Hardware Revision of the accessed node.')
dsucsuSysNumChan = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuSysNumChan.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuSysNumChan.setDescription('The number of channels that are installed on the node.')
dsucsuCfgNetTable = MibTable((1, 3, 6, 1, 4, 1, 466, 6, 1, 2), )
if mibBuilder.loadTexts: dsucsuCfgNetTable.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuCfgNetTable.setDescription('Network Line Configuration')
dsucsuCfgNetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 466, 6, 1, 2, 1), ).setIndexNames((0, "NETEXEC-MIB", "dsucsuCfgNetSlot"), (0, "NETEXEC-MIB", "dsucsuCfgNetNode"), (0, "NETEXEC-MIB", "dsucsuCfgNetIndex"))
if mibBuilder.loadTexts: dsucsuCfgNetEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuCfgNetEntry.setDescription('Configuration Object for a DSU/CSU')
dsucsuCfgNetSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuCfgNetSlot.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuCfgNetSlot.setDescription('The NEST slot to which the TyLink card is attached.')
dsucsuCfgNetNode = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuCfgNetNode.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuCfgNetNode.setDescription('The node ID: unique per port ID.')
dsucsuCfgNetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuCfgNetIndex.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuCfgNetIndex.setDescription('The network index.')
dsucsuCfgNetInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("network", 1), ("dsx-1", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuCfgNetInterface.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuCfgNetInterface.setDescription('The interface type for 3000N. For a T1 line, NETWORK or DSX-1 is valid.')
dsucsuCfgNetType = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("d4", 1), ("esf-54016", 2), ("esf-ansi", 3), ("nsms", 4), ("cept-2048", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuCfgNetType.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuCfgNetType.setDescription('The aggregate line type.')
dsucsuCfgNetCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ami", 1), ("b8zs", 2), ("hdb3", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuCfgNetCoding.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuCfgNetCoding.setDescription('The encoding scheme for the line. For a T1 line, AMI and B8ZS are valid. For an E1 line, AMI and HDB3 are valid.')
dsucsuCfgNetClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("internal", 1), ("loop", 2), ("external-ch1", 3), ("external-ch3", 4), ("station-clock", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuCfgNetClockSource.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuCfgNetClockSource.setDescription('The aggregate timing for the addressed node.')
dsucsuCfgNetCsuEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dsx1", 1), ("csu", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuCfgNetCsuEnable.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuCfgNetCsuEnable.setDescription('Enable/Disable Internal CSU.')
dsucsuCfgNetCsuLBO = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("db-0", 1), ("db-7-5", 2), ("db-15", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuCfgNetCsuLBO.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuCfgNetCsuLBO.setDescription('The setting of the Line Buildout switch. Setting must be db_0 if network interface is DSX-1.')
dsucsuCfgNetCsuDensity = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("d-1-in-8", 2), ("d-1-in-16", 3), ("d-1-in-64", 4), ("d-12pt5-percent", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuCfgNetCsuDensity.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuCfgNetCsuDensity.setDescription("The setting of the one stuffing option. Inserts a 1 into the 8th, 16th, or 64th bit position (depending on the selection) if the previous 7 bits were 0's.")
dsucsuCfgNetRateMultiples = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("nx56", 1), ("nx64", 2), ("extended-mixed", 3), ("all-rates", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuCfgNetRateMultiples.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuCfgNetRateMultiples.setDescription('The channel rate multiples for each of the ports.')
dsucsuCfgNetOutputPulse = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("pulse-0-133-ft", 1), ("pulse-133-266-ft", 2), ("pulse-266-399-ft", 3), ("pulse-399-533-ft", 4), ("pulse-533-655-ft", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuCfgNetOutputPulse.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuCfgNetOutputPulse.setDescription('The distance to the CSU in feet.')
dsucsuCfgNetTs0 = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("crc4-enable", 1), ("crc4-disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuCfgNetTs0.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuCfgNetTs0.setDescription('The E1 Timeslot 0 value.')
dsucsuCfgNetTs16 = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("data", 1), ("multifr-align", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuCfgNetTs16.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuCfgNetTs16.setDescription('The E1 Timeslot 16 value. Valid values are data and multiframe alignment.')
dsucsuCfgDteChanTable = MibTable((1, 3, 6, 1, 4, 1, 466, 6, 1, 4), )
if mibBuilder.loadTexts: dsucsuCfgDteChanTable.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuCfgDteChanTable.setDescription('DTE Channel Configuration')
dsucsuCfgDteChanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 466, 6, 1, 4, 1), ).setIndexNames((0, "NETEXEC-MIB", "dsucsuCfgDteChanSlot"), (0, "NETEXEC-MIB", "dsucsuCfgDteChanNode"), (0, "NETEXEC-MIB", "dsucsuCfgDteChanIndex"))
if mibBuilder.loadTexts: dsucsuCfgDteChanEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuCfgDteChanEntry.setDescription('DTE Channel Configuration Object for a DSU/CSU')
dsucsuCfgDteChanSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuCfgDteChanSlot.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuCfgDteChanSlot.setDescription('The PC port to which the TyView node is attached.')
dsucsuCfgDteChanNode = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuCfgDteChanNode.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuCfgDteChanNode.setDescription('The node ID: unique per port ID.')
dsucsuCfgDteChanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuCfgDteChanIndex.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuCfgDteChanIndex.setDescription('The channel index.')
dsucsuCfgDteChanType = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("rs232", 1), ("v35", 2), ("rs449", 3), ("none", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuCfgDteChanType.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuCfgDteChanType.setDescription('The Dte channel type.')
dsucsuCfgDteChanRate = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 4, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuCfgDteChanRate.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuCfgDteChanRate.setDescription('The Data rate in kilobits per second. The rate is dependent on the setting of the Aggregate DTE channel multiples.')
dsucsuCfgDteChanEncoding = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("b7s", 1), ("alt", 2), ("clr", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuCfgDteChanEncoding.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuCfgDteChanEncoding.setDescription('The Channel encoding.')
dsucsuCfgDteChanStartDs0 = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 4, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuCfgDteChanStartDs0.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuCfgDteChanStartDs0.setDescription("The starting DS0 for the addressed channel's data.")
dsucsuCfgDteChanCtrlSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("rts-on", 1), ("rts-switch", 2), ("cts-on", 3), ("cts-auto", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuCfgDteChanCtrlSignal.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuCfgDteChanCtrlSignal.setDescription('The control signal state.')
dsucsuCfgDteChanTiming = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("loop1", 1), ("loop2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuCfgDteChanTiming.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuCfgDteChanTiming.setDescription('The DTE channel Timing.')
dsucsuCfgDteChanClockInvert = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuCfgDteChanClockInvert.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuCfgDteChanClockInvert.setDescription('The DTE channel Clock Invert setting.')
dsucsuCfgDteChanDataInvert = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuCfgDteChanDataInvert.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuCfgDteChanDataInvert.setDescription('The DTE channel Data Invert setting.')
dsucsuCfgFrmChanTable = MibTable((1, 3, 6, 1, 4, 1, 466, 6, 1, 5), )
if mibBuilder.loadTexts: dsucsuCfgFrmChanTable.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuCfgFrmChanTable.setDescription('Framed Channel Configuration')
dsucsuCfgFrmChanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 466, 6, 1, 5, 1), ).setIndexNames((0, "NETEXEC-MIB", "dsucsuCfgFrmChanSlot"), (0, "NETEXEC-MIB", "dsucsuCfgFrmChanNode"), (0, "NETEXEC-MIB", "dsucsuCfgFrmChanIndex"))
if mibBuilder.loadTexts: dsucsuCfgFrmChanEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuCfgFrmChanEntry.setDescription('Framed Channel Configuration Object for a DSU/CSU')
dsucsuCfgFrmChanSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuCfgFrmChanSlot.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuCfgFrmChanSlot.setDescription('The PC port to which the TyView node is attached.')
dsucsuCfgFrmChanNode = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuCfgFrmChanNode.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuCfgFrmChanNode.setDescription('The node ID: unique per port ID.')
dsucsuCfgFrmChanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuCfgFrmChanIndex.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuCfgFrmChanIndex.setDescription('The channel index.')
dsucsuCfgFrmChanType = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pbx", 1), ("none", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuCfgFrmChanType.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuCfgFrmChanType.setDescription('The framed channel type.')
dsucsuCfgFrmChanNumDs0 = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 5, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuCfgFrmChanNumDs0.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuCfgFrmChanNumDs0.setDescription("The number of DS0's on the network side.")
dsucsuCfgFrmChanEncoding = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ami", 1), ("b8zs", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuCfgFrmChanEncoding.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuCfgFrmChanEncoding.setDescription('The channel line code.')
dsucsuCfgFrmChanStartDs0 = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 5, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuCfgFrmChanStartDs0.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuCfgFrmChanStartDs0.setDescription('The starting DS0 on the network side.')
dsucsuCfgFrmChanDteStartDs0 = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 5, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuCfgFrmChanDteStartDs0.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuCfgFrmChanDteStartDs0.setDescription('The starting DS0 on the framed channel.')
dsucsuCfgFrmChanMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 5, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ctg-ds0", 1), ("alt-ds0", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuCfgFrmChanMapping.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuCfgFrmChanMapping.setDescription('The Framed channel Mapping.')
dsucsuCfgFrmChanDs0Type = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 5, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("data", 1), ("voice", 2), ("mixed", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuCfgFrmChanDs0Type.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuCfgFrmChanDs0Type.setDescription('The Framed channel DS0 Type.')
dsucsuCfgFrmChanFrameType = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 5, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("d4", 1), ("esf", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuCfgFrmChanFrameType.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuCfgFrmChanFrameType.setDescription('The Framed channel Frame Type.')
dsucsuCfgFrmChanOutputPulse = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 5, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("pulse-0-133-ft", 1), ("pulse-133-266-ft", 2), ("pulse-266-399-ft", 3), ("pulse-399-533-ft", 4), ("pulse-533-655-ft", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuCfgFrmChanOutputPulse.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuCfgFrmChanOutputPulse.setDescription('The cabling distance from the PBX to the PBX channel port in feet.')
dsucsuCfgFrmChanNetMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 5, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ctg-ds0", 1), ("alt-ds0", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuCfgFrmChanNetMapping.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuCfgFrmChanNetMapping.setDescription('The Network Ds0 Mapping.')
dsucsuConfigSupTable = MibTable((1, 3, 6, 1, 4, 1, 466, 6, 1, 7), )
if mibBuilder.loadTexts: dsucsuConfigSupTable.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuConfigSupTable.setDescription('Inband Supervisory Channel Configuration')
dsucsuConfigSupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 466, 6, 1, 7, 1), ).setIndexNames((0, "NETEXEC-MIB", "dsucsuConfigSupSlot"), (0, "NETEXEC-MIB", "dsucsuConfigSupNode"), (0, "NETEXEC-MIB", "dsucsuConfigSupIndex"))
if mibBuilder.loadTexts: dsucsuConfigSupEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuConfigSupEntry.setDescription('Inband Supervisory Configuration Object for a DSU/CSU')
dsucsuConfigSupSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuConfigSupSlot.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuConfigSupSlot.setDescription('The PC port to which the TyView node is attached.')
dsucsuConfigSupNode = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuConfigSupNode.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuConfigSupNode.setDescription('The node ID: unique per port ID.')
dsucsuConfigSupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuConfigSupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuConfigSupIndex.setDescription('The Supervisory channel index. Index 1 refers to supervisory channel A. Index 2 refers to supervisory channel B.')
dsucsuConfigSupDs0 = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 7, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuConfigSupDs0.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuConfigSupDs0.setDescription('The DS0 to place the Supervisory channel in.')
dsucsuCfgSupAuxTable = MibTable((1, 3, 6, 1, 4, 1, 466, 6, 1, 8), )
if mibBuilder.loadTexts: dsucsuCfgSupAuxTable.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuCfgSupAuxTable.setDescription('Auxillary Supervisory Channel Configuration')
dsucsuCfgSupAuxEntry = MibTableRow((1, 3, 6, 1, 4, 1, 466, 6, 1, 8, 1), ).setIndexNames((0, "NETEXEC-MIB", "dsucsuCfgSupAuxSlot"), (0, "NETEXEC-MIB", "dsucsuCfgSupAuxNode"), (0, "NETEXEC-MIB", "dsucsuCfgSupAuxIndex"))
if mibBuilder.loadTexts: dsucsuCfgSupAuxEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuCfgSupAuxEntry.setDescription('Auxilary Supervisory Configuration Object for a DSU/CSU')
dsucsuCfgSupAuxSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuCfgSupAuxSlot.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuCfgSupAuxSlot.setDescription('The PC port to which the TyView node is attached.')
dsucsuCfgSupAuxNode = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuCfgSupAuxNode.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuCfgSupAuxNode.setDescription('The node ID: unique per port ID.')
dsucsuCfgSupAuxIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuCfgSupAuxIndex.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuCfgSupAuxIndex.setDescription('Auxillary Supervisory Channel Configuration Index Index 1 refers to FDL supervisory on PORT 1. Index 2 refers to FDL supervisory on PORT 2.')
dsucsuCfgSupAuxFdl = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuCfgSupAuxFdl.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuCfgSupAuxFdl.setDescription('Places the supervisory link bits within the Facility Data Link bits of the Extended Superframe.')
dsucsuActvConfTable = MibTable((1, 3, 6, 1, 4, 1, 466, 6, 1, 9), )
if mibBuilder.loadTexts: dsucsuActvConfTable.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuActvConfTable.setDescription('Activate a stored configuration on the selected node.')
dsucsuActvConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 466, 6, 1, 9, 1), ).setIndexNames((0, "NETEXEC-MIB", "dsucsuActvConfSlot"), (0, "NETEXEC-MIB", "dsucsuActvConfNode"))
if mibBuilder.loadTexts: dsucsuActvConfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuActvConfEntry.setDescription('An activate configuration entry.')
dsucsuActvConfSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuActvConfSlot.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuActvConfSlot.setDescription('The PC port to which the TyView node is attached.')
dsucsuActvConfNode = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuActvConfNode.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuActvConfNode.setDescription('The node ID: unique per port ID.')
dsucsuActvConfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 9, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: dsucsuActvConfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuActvConfIndex.setDescription('Activate one of the four stored configurations.')
dsucsuEventDesTable = MibTable((1, 3, 6, 1, 4, 1, 466, 6, 1, 10), )
if mibBuilder.loadTexts: dsucsuEventDesTable.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuEventDesTable.setDescription('Table of event destinations. Events or alarms detected by a node can be reported to up to two destinations. The operator can set or clear either or both of these destinations via this Table.')
dsucsuEventDesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 466, 6, 1, 10, 1), ).setIndexNames((0, "NETEXEC-MIB", "dsucsuEventDesSlot"), (0, "NETEXEC-MIB", "dsucsuEventDesNode"))
if mibBuilder.loadTexts: dsucsuEventDesEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuEventDesEntry.setDescription('Entry in the table of event destinations.')
dsucsuEventDesSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuEventDesSlot.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuEventDesSlot.setDescription('The PC port to which the TyView node is attached.')
dsucsuEventDesNode = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuEventDesNode.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuEventDesNode.setDescription('The node ID: unique per port ID.')
dsucsuEventNameIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 10, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuEventNameIndx.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuEventNameIndx.setDescription('The unique name of the node accessed.')
dsucsuEventDesName1 = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 10, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuEventDesName1.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuEventDesName1.setDescription('The name of the node/PC where the alarms will be sent to.')
dsucsuEventDesName2 = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 10, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuEventDesName2.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuEventDesName2.setDescription('The name of the alternate node/PC where the alarms will be sent to.')
dsucsuEventClrDest = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("clearDest1", 1), ("clearDest2", 2), ("clearBothDest", 3)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: dsucsuEventClrDest.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuEventClrDest.setDescription('Clears the destination(s) for the reporting of alarms.')
dsucsuCfgMaintTable = MibTable((1, 3, 6, 1, 4, 1, 466, 6, 1, 11), )
if mibBuilder.loadTexts: dsucsuCfgMaintTable.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuCfgMaintTable.setDescription('Maint. Port Configuration')
dsucsuCfgMaintEntry = MibTableRow((1, 3, 6, 1, 4, 1, 466, 6, 1, 11, 1), ).setIndexNames((0, "NETEXEC-MIB", "dsucsuCfgMaintSlot"), (0, "NETEXEC-MIB", "dsucsuCfgMaintNode"))
if mibBuilder.loadTexts: dsucsuCfgMaintEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuCfgMaintEntry.setDescription('Maint. Port Configuration Object')
dsucsuCfgMaintSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuCfgMaintSlot.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuCfgMaintSlot.setDescription('The PC port to which the TyView node is attached.')
dsucsuCfgMaintNode = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 11, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuCfgMaintNode.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuCfgMaintNode.setDescription('The node ID: unique per port ID.')
dsucsuCfgMaintChanType = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 1), ("nsms", 2), ("ascii", 3), ("alarm", 4), ("ext-event", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuCfgMaintChanType.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuCfgMaintChanType.setDescription('The type of data passed over the Maint. port.')
dsucsuCfgMaintFlowCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuCfgMaintFlowCtrl.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuCfgMaintFlowCtrl.setDescription('Flow Control for the Maint. port.')
dsucsuCfgMaintStopBits = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("stopbits-1", 1), ("stopbits-1-5", 2), ("stopbits-2", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuCfgMaintStopBits.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuCfgMaintStopBits.setDescription('Number of Stopbits for the Maint. port.')
dsucsuCfgMaintParity = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 11, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("odd", 2), ("even", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuCfgMaintParity.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuCfgMaintParity.setDescription('Parity for the Maint. port.')
dsucsuCfgMaintDataBits = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 11, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("databits-7", 1), ("databits-8", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuCfgMaintDataBits.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuCfgMaintDataBits.setDescription('Databits for the Maint. port.')
dsucsuCfgMaintBaud = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 11, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("baud-1200", 1), ("baud-2400", 2), ("baud-4800", 3), ("baud-9600", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuCfgMaintBaud.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuCfgMaintBaud.setDescription('Baud rate for the Maint. port.')
dsucsuCfgCommTable = MibTable((1, 3, 6, 1, 4, 1, 466, 6, 1, 12), )
if mibBuilder.loadTexts: dsucsuCfgCommTable.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuCfgCommTable.setDescription('Communication Port Configuration')
dsucsuCfgCommEntry = MibTableRow((1, 3, 6, 1, 4, 1, 466, 6, 1, 12, 1), ).setIndexNames((0, "NETEXEC-MIB", "dsucsuCfgCommSlot"), (0, "NETEXEC-MIB", "dsucsuCfgCommNode"))
if mibBuilder.loadTexts: dsucsuCfgCommEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuCfgCommEntry.setDescription('Communication Port Configuration Object')
dsucsuCfgCommSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuCfgCommSlot.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuCfgCommSlot.setDescription('The PC port to which the TyView node is attached.')
dsucsuCfgCommNode = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 12, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuCfgCommNode.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuCfgCommNode.setDescription('The node ID: unique per port ID.')
dsucsuCfgCommChanType = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 1), ("nsms", 2), ("ascii", 3), ("alarm", 4), ("ext-event", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuCfgCommChanType.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuCfgCommChanType.setDescription('The type of data passed over the Communication port.')
dsucsuCfgCommFlowCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 12, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuCfgCommFlowCtrl.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuCfgCommFlowCtrl.setDescription('Flow Control for the Communication port.')
dsucsuCfgCommStopBits = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 12, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("stopbits-1", 1), ("stopbits-1-5", 2), ("stopbits-2", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuCfgCommStopBits.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuCfgCommStopBits.setDescription('Number of Stopbits for the Communication port.')
dsucsuCfgCommParity = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 12, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("odd", 2), ("even", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuCfgCommParity.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuCfgCommParity.setDescription('Parity for the Communication port.')
dsucsuCfgCommDataBits = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 12, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("databits-7", 1), ("databits-8", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuCfgCommDataBits.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuCfgCommDataBits.setDescription('Databits for the Communication port.')
dsucsuCfgCommBaud = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 12, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("baud-1200", 1), ("baud-2400", 2), ("baud-4800", 3), ("baud-9600", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuCfgCommBaud.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuCfgCommBaud.setDescription('Baud rate for the Communication port.')
dsucsuCfgBrdTable = MibTable((1, 3, 6, 1, 4, 1, 466, 6, 1, 13), )
if mibBuilder.loadTexts: dsucsuCfgBrdTable.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuCfgBrdTable.setDescription('Network timing for 3000N board.')
dsucsuCfgBrdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 466, 6, 1, 13, 1), ).setIndexNames((0, "NETEXEC-MIB", "dsucsuCfgBrdSlot"), (0, "NETEXEC-MIB", "dsucsuCfgBrdNode"))
if mibBuilder.loadTexts: dsucsuCfgBrdEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuCfgBrdEntry.setDescription('Board Timing Configuration Object.')
dsucsuCfgBrdSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuCfgBrdSlot.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuCfgBrdSlot.setDescription('The PC port to which the TyView node is attached.')
dsucsuCfgBrdNode = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 13, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuCfgBrdNode.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuCfgBrdNode.setDescription('The node ID: unique per port ID.')
dsucsuCfgBrdTiming = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("master", 1), ("port1", 2), ("port2", 3), ("port3", 4), ("port4", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuCfgBrdTiming.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuCfgBrdTiming.setDescription('The Board Level Timing for a 3000N.')
dsucsuCfgDacsTable = MibIdentifier((1, 3, 6, 1, 4, 1, 466, 6, 1, 14))
dsucsuCfgAutoAssignTable = MibTable((1, 3, 6, 1, 4, 1, 466, 6, 1, 14, 1), )
if mibBuilder.loadTexts: dsucsuCfgAutoAssignTable.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuCfgAutoAssignTable.setDescription('Automatically assign the proper amount of bandwidth.')
dsucsuCfgAutoAssignEntry = MibTableRow((1, 3, 6, 1, 4, 1, 466, 6, 1, 14, 1, 1), ).setIndexNames((0, "NETEXEC-MIB", "dsucsuConnAutoSlot"), (0, "NETEXEC-MIB", "dsucsuConnAutoNode"), (0, "NETEXEC-MIB", "dsucsuConnAutoSrcPort"))
if mibBuilder.loadTexts: dsucsuCfgAutoAssignEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuCfgAutoAssignEntry.setDescription('DACS auto assign Configuration Object.')
dsucsuConnAutoSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 14, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuConnAutoSlot.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuConnAutoSlot.setDescription('The PC port to which the TyView node is attached.')
dsucsuConnAutoNode = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 14, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuConnAutoNode.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuConnAutoNode.setDescription('The node ID: unique per port ID.')
dsucsuConnAutoSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 14, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuConnAutoSrcPort.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuConnAutoSrcPort.setDescription('Index to the 3000N source port of interest. 3000N supports two DTE-V35/RS-499 DATA ports (P3-P4).')
dsucsuConnAutoStartDS0 = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 14, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 40, 41))).clone(namedValues=NamedValues(("ds0-01", 1), ("ds0-02", 2), ("ds0-03", 3), ("ds0-04", 4), ("ds0-05", 5), ("ds0-06", 6), ("ds0-07", 7), ("ds0-08", 8), ("ds0-09", 9), ("ds0-10", 10), ("ds0-11", 11), ("ds0-12", 12), ("ds0-13", 13), ("ds0-14", 14), ("ds0-15", 15), ("ds0-16", 16), ("ds0-17", 17), ("ds0-18", 18), ("ds0-19", 19), ("ds0-20", 20), ("ds0-21", 21), ("ds0-22", 22), ("ds0-23", 23), ("ds0-24", 24), ("no-current-connections", 40), ("non-continuous-ds0s", 41)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuConnAutoStartDS0.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuConnAutoStartDS0.setDescription("Port1/2 includes 24 DS0's. This value is the starting DS0 used by the node to allocate DS0s to meet port(3-4)-dte requirements. Sequential, contiguous DS0s are assigned. The number of DS0s required is based upon the DTE Data Rate and DTE Channel Mapping. The node's response to an entry may be gathered by querying dsucsuConnAutoStatus. To assign DS0s in a non-contiguous format, use the CfgEditConnTable.")
dsucsuConnAutoDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 14, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 33))).clone(namedValues=NamedValues(("port1", 1), ("port2", 2), ("port3", 3), ("port4", 4), ("not-connected", 33)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuConnAutoDestPort.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuConnAutoDestPort.setDescription('Selects the port for which DS0s are automatically allocated to one of the T1 network ports. Node software may not allow connection of port1 to port1.')
dsucsuConnAutoType = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 14, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("data", 1), ("voice", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuConnAutoType.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuConnAutoType.setDescription('Defines the type of traffic being transported. The 3000N supports data (1) or voice (2). The selected type will be assigned to all DS0s.')
dsucsuConnDteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 14, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1536000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuConnDteRate.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuConnDteRate.setDescription('Data rate of the DTE port. Can be chaged from the CfgDteTable.')
dsucsuConnDteDensity = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 14, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(56, 64))).clone(namedValues=NamedValues(("bit-7-stuff", 56), ("clear-channel", 64)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuConnDteDensity.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuConnDteDensity.setDescription('Channel/DS0 format for the DTE port. Can be changed from the CfgDteTable.')
dsucsuConnDs0Required = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 14, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuConnDs0Required.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuConnDs0Required.setDescription("The number of DS0s required by the node's DTE port. This is based upon the DTE data rate and channel density selections.")
dsucsuConnAutoStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 14, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("connections-valid", 1), ("connections-not-valid", 2), ("incorrect-bandwidth", 3), ("bandwidth-conflict", 4), ("no-current-connections", 5), ("port-type-valid", 6), ("port-type-invalid", 7), ("start-ds0-valid", 8), ("start-ds0-invalid", 9), ("port-valid", 10), ("port-invalid", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuConnAutoStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuConnAutoStatus.setDescription("Queries the node's connection status. Code will be returned when a connection set or update is rejected or accepted.")
dsucsuConnAutoUpdateCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 14, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("update", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: dsucsuConnAutoUpdateCmd.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuConnAutoUpdateCmd.setDescription('Updates the connections with the edit buffer. The edit buffer is comprised of any changes sent (set) from the dsucsuCfgAutoAssignEntry.')
dsucsuCfgCurrentConnTable = MibTable((1, 3, 6, 1, 4, 1, 466, 6, 1, 14, 2), )
if mibBuilder.loadTexts: dsucsuCfgCurrentConnTable.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuCfgCurrentConnTable.setDescription("Retrieves node's active connections assignments for display only. To edit connections, use CfgConnAutoAssign or CfgEditConnTable.")
dsucsuCfgCurrentConnections = MibTableRow((1, 3, 6, 1, 4, 1, 466, 6, 1, 14, 2, 1), ).setIndexNames((0, "NETEXEC-MIB", "dsucsuSlot"), (0, "NETEXEC-MIB", "dsucsuNode"), (0, "NETEXEC-MIB", "dsucsuT1Index"), (0, "NETEXEC-MIB", "dsucsuDs0"))
if mibBuilder.loadTexts: dsucsuCfgCurrentConnections.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuCfgCurrentConnections.setDescription('An entry in the Current Connections Table.')
dsucsuSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 14, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuSlot.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuSlot.setDescription('The PC port to which the TyView node is attached.')
dsucsuNode = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 14, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuNode.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuNode.setDescription('The node ID: unique per port ID.')
dsucsuT1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 14, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuT1Index.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuT1Index.setDescription('Index to T1 network port of interest. The 3000N supports two NETWORK/DSX-1 ports.')
dsucsuDs0 = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 14, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuDs0.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuDs0.setDescription('DS0 number 1 through 24 corresponding to the T1 network port index.')
dsucsuDtePort = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 14, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 33))).clone(namedValues=NamedValues(("port1", 1), ("port2", 2), ("port3", 3), ("port4", 4), ("not-connected", 33)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuDtePort.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuDtePort.setDescription('DS0 assignment for indexed T1 network port. After making any adjustments to the connections, the dsucsuCfgConnUpdateCmd must be sent. Node software may not permit port 1 connections to itself.')
dsucsuType = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 14, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("data", 1), ("voice", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuType.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuType.setDescription('Defines the type of traffic being transported. The 3000N supports data (1) or voice (2).')
dsucsuCfgEditConnTable = MibTable((1, 3, 6, 1, 4, 1, 466, 6, 1, 14, 3), )
if mibBuilder.loadTexts: dsucsuCfgEditConnTable.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuCfgEditConnTable.setDescription('Manually assign the proper amount of bandwidth.')
dsucsuCfgEditConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 466, 6, 1, 14, 3, 1), ).setIndexNames((0, "NETEXEC-MIB", "dsucsuConnSlot"), (0, "NETEXEC-MIB", "dsucsuConnNode"), (0, "NETEXEC-MIB", "dsucsuConnSrcPort"), (0, "NETEXEC-MIB", "dsucsuConnSrcDs0"))
if mibBuilder.loadTexts: dsucsuCfgEditConnEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuCfgEditConnEntry.setDescription('Edits current DS0 assignment. After making any adjustments to the connections, the dsucsuCfgConnUpdateCmd must be sent.')
dsucsuConnSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 14, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuConnSlot.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuConnSlot.setDescription('The PC port to which the TyView node is attached.')
dsucsuConnNode = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 14, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuConnNode.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuConnNode.setDescription('The node ID: unique per port ID.')
dsucsuConnSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 14, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuConnSrcPort.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuConnSrcPort.setDescription('Index to the source port of interest. The 3000N supports two NETWORK/DSX-1 and two DTE ports.')
dsucsuConnSrcDs0 = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 14, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuConnSrcDs0.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuConnSrcDs0.setDescription('The source DS0 number 1 through 24 corresponding to the T1 network port index')
dsucsuConnDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 14, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 33))).clone(namedValues=NamedValues(("port1", 1), ("port2", 2), ("port3", 3), ("port4", 4), ("not-connected", 33)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuConnDestPort.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuConnDestPort.setDescription('Index to the destination port of interest. The 3000N supports two NETWORK/DSX-1 and two DTE ports.')
dsucsuConnDestDs0 = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 14, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 40, 41))).clone(namedValues=NamedValues(("ds0-01", 1), ("ds0-02", 2), ("ds0-03", 3), ("ds0-04", 4), ("ds0-05", 5), ("ds0-06", 6), ("ds0-07", 7), ("ds0-08", 8), ("ds0-09", 9), ("ds0-10", 10), ("ds0-11", 11), ("ds0-12", 12), ("ds0-13", 13), ("ds0-14", 14), ("ds0-15", 15), ("ds0-16", 16), ("ds0-17", 17), ("ds0-18", 18), ("ds0-19", 19), ("ds0-20", 20), ("ds0-21", 21), ("ds0-22", 22), ("ds0-23", 23), ("ds0-24", 24), ("no-current-connections", 40), ("non-continuous-ds0s", 41)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuConnDestDs0.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuConnDestDs0.setDescription('DS0 assignment for indexed T1 network port. After making any adjustments to the connections, the dsucsuConnUpdateCmd must be sent. Node software may not permit connections between the same port and itself.')
dsucsuConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 14, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("data", 1), ("voice", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuConnType.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuConnType.setDescription('Defines the type of traffic being transported. The 3000N supports data (1) or voice (2).')
dsucsuConnNumDs0s = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 14, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuConnNumDs0s.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuConnNumDs0s.setDescription('The total number of Ds0s to be connected. The number of Ds0s must be between 1 and 24.')
dsucsuConnSetStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 14, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("connections-valid", 1), ("connections-not-valid", 2), ("incorrect-bandwidth", 3), ("bandwidth-conflict", 4), ("no-current-connections", 5), ("port-type-valid", 6), ("port-type-invalid", 7), ("destination-ds0-valid", 8), ("destination-ds0-invalid", 9), ("port-valid", 10), ("port-invalid", 11), ("num-ds0s-valid", 12), ("num-ds0s-invalid", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuConnSetStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuConnSetStatus.setDescription('Displays node status from the last SNMP issed set command.')
dsucsuConnConnect = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 14, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("connect", 1), ("disconnect", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: dsucsuConnConnect.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuConnConnect.setDescription('Updates the connections with the edit buffer. The edit buffer is comprised of any changes sent (set) from the CfgEditConnTable.')
dsucsuConnUpdateRequired = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 14, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("update-not-required", 1), ("update-required", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuConnUpdateRequired.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuConnUpdateRequired.setDescription('Displays node status from the last connection update.')
dsucsuConnUpdateCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 14, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("update", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: dsucsuConnUpdateCmd.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuConnUpdateCmd.setDescription('Sends the updated connections from the edit buffer to the node. The edit buffer is comprised of any changes sent (set) from the CfgEditConnTable.')
dsucsuConnClearEditBuff = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 14, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear-edit", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: dsucsuConnClearEditBuff.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuConnClearEditBuff.setDescription('Removes all changes from edit buffer. The edit buffer is comprised of any changes sent (set) from the CfgEditConnTable.')
dsucsuDiagNetTable = MibTable((1, 3, 6, 1, 4, 1, 466, 6, 1, 15), )
if mibBuilder.loadTexts: dsucsuDiagNetTable.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuDiagNetTable.setDescription('A list of Network Diagnostic attributes. Loopbacks, tests and their respective results can be initiated, cancelled and examined.')
dsucsuDiagNetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 466, 6, 1, 15, 1), ).setIndexNames((0, "NETEXEC-MIB", "dsucsuDiagNetSlot"), (0, "NETEXEC-MIB", "dsucsuDiagNetNode"), (0, "NETEXEC-MIB", "dsucsuDiagNetIndex"))
if mibBuilder.loadTexts: dsucsuDiagNetEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuDiagNetEntry.setDescription('A Network Diagnostic entry')
dsucsuDiagNetSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuDiagNetSlot.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuDiagNetSlot.setDescription('The PC port to which the TyView node is attached.')
dsucsuDiagNetNode = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 15, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuDiagNetNode.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuDiagNetNode.setDescription('The node ID: unique per port ID.')
dsucsuDiagNetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 15, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuDiagNetIndex.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuDiagNetIndex.setDescription('The network number to be examined for a particular node (3000N only).')
dsucsuDiagNetLclNetAggLpbk = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 15, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enableLoopbackMode", 1), ("disableLoopbackMode", 2), ("notApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuDiagNetLclNetAggLpbk.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuDiagNetLclNetAggLpbk.setDescription('Enables the operator to control and examine the local aggregate loopback. This loopback occurs on the net side of the local transmit and receive logic. The unit continues to transmit data across the network and also loops the data back to its own receiver circuitry.')
dsucsuDiagNetLclNetLpbk = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 15, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enableLoopbackMode", 1), ("disableLoopbackMode", 2), ("notApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuDiagNetLclNetLpbk.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuDiagNetLclNetLpbk.setDescription('Enables the operator to control and examine the local network loopback. This loopback allows the operator to disconnect the side of the network by transmitting the data recovered from the network.')
dsucsuDiagNetLclNetPayload = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 15, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enableLoopbackMode", 1), ("disableLoopbackMode", 2), ("notApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuDiagNetLclNetPayload.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuDiagNetLclNetPayload.setDescription('Enables the operator to control and examine the network payload loopback. This loopback occurs on the net side of the local transmit and receive logic. The unit continues to transmit data across the network and also loops the data back to its own receiver circuitry.')
dsucsuDiagNetLclNetBiDir = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 15, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enableLoopbackMode", 1), ("disableLoopbackMode", 2), ("notApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuDiagNetLclNetBiDir.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuDiagNetLclNetBiDir.setDescription('Enables the operator to control and examine the local network loopback. This loopback allows the operator to disconnect the side of the network by transmitting the data recovered from the network in both directions.')
dsucsuDiagNetRemCsuLpbk = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 15, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("transmitLoopUpCode", 1), ("transmitLoopDownCode", 2), ("notApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuDiagNetRemCsuLpbk.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuDiagNetRemCsuLpbk.setDescription('Enables the operator to control and examine the remote CSU loopback. This loopback allows the operator to test the operation of the local channel, the aggregate and the remote CSU.')
dsucsuDiagNetRemDsuLpbk = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 15, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enableLoopbackMode", 1), ("disableLoopbackMode", 2), ("notApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuDiagNetRemDsuLpbk.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuDiagNetRemDsuLpbk.setDescription("Enables the operator to control and examine the remote aggregate loopback. This loopback allows the operator to test the entire system from the local unit through the network to the remote node's transmit and receive front end.")
dsucsuDiagNetEvElapTime = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 15, 1, 10), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuDiagNetEvElapTime.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuDiagNetEvElapTime.setDescription('The time elapsed since the Event Test started. The new Event Test commences as soon as the previous Event Test registers are cleared.')
dsucsuDiagNetEvCRC6Err = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 15, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuDiagNetEvCRC6Err.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuDiagNetEvCRC6Err.setDescription('The number of CRC6 errors encountered during the Event Test period.')
dsucsuDiagNetEvOofErr = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 15, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuDiagNetEvOofErr.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuDiagNetEvOofErr.setDescription('The number of Out-Of-Frame errors encountered during the Event Test period.')
dsucsuDiagNetErrEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 15, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuDiagNetErrEvents.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuDiagNetErrEvents.setDescription('The number of Errored Events encountered during the Event Test period.')
dsucsuDiagNetClearEvReg = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 15, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clearRegister", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: dsucsuDiagNetClearEvReg.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuDiagNetClearEvReg.setDescription('Clear all the Event Test registers. Automatically initiates a new Event Test.')
dsucsuDiagDteTable = MibTable((1, 3, 6, 1, 4, 1, 466, 6, 1, 16), )
if mibBuilder.loadTexts: dsucsuDiagDteTable.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuDiagDteTable.setDescription('A list of DTE channel diagnostics.')
dsucsuDiagDteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 466, 6, 1, 16, 1), ).setIndexNames((0, "NETEXEC-MIB", "dsucsuDiagDteSlot"), (0, "NETEXEC-MIB", "dsucsuDiagDteNode"), (0, "NETEXEC-MIB", "dsucsuDiagDteIndex"))
if mibBuilder.loadTexts: dsucsuDiagDteEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuDiagDteEntry.setDescription('A DTE channel diagnostic entry')
dsucsuDiagDteSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 16, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuDiagDteSlot.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuDiagDteSlot.setDescription('The PC port to which the TyView node is attached.')
dsucsuDiagDteNode = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 16, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuDiagDteNode.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuDiagDteNode.setDescription('The node ID: unique per port ID.')
dsucsuDiagDteIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 16, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuDiagDteIndex.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuDiagDteIndex.setDescription('The channel number to be examined for a particular node.')
dsucsuDiagDteLocalBiDir = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 16, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enableLoopbackMode", 1), ("disableLoopbackMode", 2), ("notApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuDiagDteLocalBiDir.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuDiagDteLocalBiDir.setDescription('This selection displays the status or controls the Local Channel Loopback for the selected channel. This is a local turnaround and is bi-directional.')
dsucsuDiagDteLocalPayload = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 16, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enableLoopbackMode", 1), ("disableLoopbackMode", 2), ("notApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuDiagDteLocalPayload.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuDiagDteLocalPayload.setDescription('This selection displays the status or controls the Local Payload Channel Loopback for the selected channel.')
dsucsuDiagDteRemLpbk = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 16, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enableLoopbackMode", 1), ("disableLoopbackMode", 2), ("notApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuDiagDteRemLpbk.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuDiagDteRemLpbk.setDescription('This selection displays the status or controls the Channel Remote Loopback for the selected channel. This loopback transmits a code to the remote node which will enable or disable a diagnostic loopback at the addressed channel.')
dsucsuDiagDteBertTestAct = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 16, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("startBertTest", 1), ("stopBertTest", 2), ("injectErrorBertTest", 3), ("clearErrorBertTest", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuDiagDteBertTestAct.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuDiagDteBertTestAct.setDescription('BERT test related actions: a: Starts a BERT test on a channel, b: Stops a BERT test on a channel, c: Inject Errors while the BERT test is running, d: Clears BERT test errors.')
dsucsuDiagDteBertHourStrt = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 16, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuDiagDteBertHourStrt.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuDiagDteBertHourStrt.setDescription('Displays the hour that the BERT test started.')
dsucsuDiagDteBertMinStrt = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 16, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuDiagDteBertMinStrt.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuDiagDteBertMinStrt.setDescription('Displays th minute that BERT test started.')
dsucsuDiagDteBertTimeElaps = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 16, 1, 10), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuDiagDteBertTimeElaps.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuDiagDteBertTimeElaps.setDescription('Elapsed time since the BERT Test started')
dsucsuDiagDteBertErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 16, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuDiagDteBertErrors.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuDiagDteBertErrors.setDescription('Number of BERT test errors encountered during the BERT Test.')
dsucsuDiagFrmTable = MibTable((1, 3, 6, 1, 4, 1, 466, 6, 1, 17), )
if mibBuilder.loadTexts: dsucsuDiagFrmTable.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuDiagFrmTable.setDescription('A list of framed channel diagnostics.')
dsucsuDiagFrmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 466, 6, 1, 17, 1), ).setIndexNames((0, "NETEXEC-MIB", "dsucsuDiagFrmSlot"), (0, "NETEXEC-MIB", "dsucsuDiagFrmNode"), (0, "NETEXEC-MIB", "dsucsuDiagFrmIndex"))
if mibBuilder.loadTexts: dsucsuDiagFrmEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuDiagFrmEntry.setDescription('A framed channel diagnostic entry')
dsucsuDiagFrmSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 17, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuDiagFrmSlot.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuDiagFrmSlot.setDescription('The PC port to which the TyView node is attached.')
dsucsuDiagFrmNode = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 17, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuDiagFrmNode.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuDiagFrmNode.setDescription('The node ID: unique per port ID.')
dsucsuDiagFrmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 17, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuDiagFrmIndex.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuDiagFrmIndex.setDescription('The channel number to be examined for a particular node.')
dsucsuDiagFrmLclLpbk = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 17, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enableLoopbackMode", 1), ("disableLoopbackMode", 2), ("notApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuDiagFrmLclLpbk.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuDiagFrmLclLpbk.setDescription('This selection displays the status or controls the Local Channel Loopback for the selected channel. This is a local turnaround and is bi-directional.')
dsucsuDiagFrmLclPayload = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 17, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enableLoopbackMode", 1), ("disableLoopbackMode", 2), ("notApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuDiagFrmLclPayload.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuDiagFrmLclPayload.setDescription('This selection displays the status or controls the Channel Remote Loopback for the selected channel. This loopback transmits a code to the remote node which will enable or disable a diagnostic loopback at the addressed channel. This selection is applicable only for DSX type channels.')
dsucsuDiagFrmLclBiDir = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 17, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enableLoopbackMode", 1), ("disableLoopbackMode", 2), ("notApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuDiagFrmLclBiDir.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuDiagFrmLclBiDir.setDescription('This selection displays the status or controls the DSX Loopback for the selected channel. This selection is applicable only for DSX channels.')
dsucsuDiagFrmRemLpbk = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 17, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("transmitLoopUpCode", 1), ("transmitLoopDownCode", 2), ("notApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuDiagFrmRemLpbk.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuDiagFrmRemLpbk.setDescription('This selection displays the status or controls the Local Channel Loopback for the selected channel. This loopback transmits a code to the remote node which will enable or disable a diagnostic loopback at the addressed channel. This selection is applicable only for DSX channels.')
dsucsuDiagFrmLclDte = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 17, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enableLoopbackMode", 1), ("disableLoopbackMode", 2), ("notApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuDiagFrmLclDte.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuDiagFrmLclDte.setDescription('This selection displays the status or controls the Local Channel Loopback for the selected channel. This is a local turnaround and is bi-directional. This selection is applicable only for CSU type channels.')
dsucsuDiagFrmLclDte2 = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 17, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enableLoopbackMode", 1), ("disableLoopbackMode", 2), ("notApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuDiagFrmLclDte2.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuDiagFrmLclDte2.setDescription('This selection displays the status or controls the Channel Remote Loopback for the selected channel. This loopback transmits a code to the remote node which will enable or disable a diagnostic loopback at the addressed channel. This selection is applicable only for CSU type channels.')
dsucsuDiagFrmBertTestAct = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 17, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("startBertTest", 1), ("stopBertTest", 2), ("injectErrorBertTest", 3), ("clearErrorBertTest", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuDiagFrmBertTestAct.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuDiagFrmBertTestAct.setDescription('BERT test related actions: a: Starts a BERT test on a channel, b: Stops a BERT test on a channel, c: Inject Errors while the BERT test is running, d: Clears BERT test errors.')
dsucsuDiagFrmEvElapTime = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 17, 1, 11), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuDiagFrmEvElapTime.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuDiagFrmEvElapTime.setDescription('The time elapsed since the PBX Event Test started. This selection is applicable only for PBX channels.')
dsucsuDiagFrmEvBpvErr = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 17, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuDiagFrmEvBpvErr.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuDiagFrmEvBpvErr.setDescription('The number of Bipolar Violations encountered during the Event Test. This selection is applicable only for PBX channels.')
dsucsuDiagFrmEvOofErr = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 17, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuDiagFrmEvOofErr.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuDiagFrmEvOofErr.setDescription('The number of Out-Of-Frame Errors encountered during the Event Test. This selection is applicable only for PBX channels.')
dsucsuDiagFrmFrameErr = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 17, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuDiagFrmFrameErr.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuDiagFrmFrameErr.setDescription('The number of Frame Errors encountered during the Event Test. This selection is applicable only for PBX channels.')
dsucsuDiagFrmClearEvReg = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 17, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clearRegister", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: dsucsuDiagFrmClearEvReg.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuDiagFrmClearEvReg.setDescription('Clears all the PBX Event Test registers. This selection is applicable only for PBX channels.')
dsucsuDiagAuxTable = MibTable((1, 3, 6, 1, 4, 1, 466, 6, 1, 18), )
if mibBuilder.loadTexts: dsucsuDiagAuxTable.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuDiagAuxTable.setDescription('Auxillary Channel Diagnostics')
dsucsuDiagAuxEntry = MibTableRow((1, 3, 6, 1, 4, 1, 466, 6, 1, 18, 1), ).setIndexNames((0, "NETEXEC-MIB", "dsucsuDiagAuxSlot"), (0, "NETEXEC-MIB", "dsucsuDiagAuxNode"))
if mibBuilder.loadTexts: dsucsuDiagAuxEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuDiagAuxEntry.setDescription('Auxilary diagnostic entry')
dsucsuDiagAuxSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 18, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuDiagAuxSlot.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuDiagAuxSlot.setDescription('The PC port to which the TyView node is attached.')
dsucsuDiagAuxNode = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 18, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuDiagAuxNode.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuDiagAuxNode.setDescription('The node ID: unique per port ID.')
dsucsuDiagAuxChAStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 18, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("down", 1), ("sync", 2), ("off", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuDiagAuxChAStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuDiagAuxChAStatus.setDescription('Status of Supervisory link channel A.')
dsucsuDiagAuxChBStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 18, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("down", 1), ("sync", 2), ("off", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuDiagAuxChBStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuDiagAuxChBStatus.setDescription('Status of Supervisory Link Channel B.')
dsucsuDiagAuxFdlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 18, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("down", 1), ("sync", 2), ("off", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuDiagAuxFdlStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuDiagAuxFdlStatus.setDescription('Status of Facility Data Link (PORT1).')
dsucsuDiagAuxFdl2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 18, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("down", 1), ("sync", 2), ("off", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuDiagAuxFdl2Status.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuDiagAuxFdl2Status.setDescription('Status of Facility Data Link (PORT2).')
dsucsuDiagAuxMaintStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 18, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("down", 1), ("sync", 2), ("off", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuDiagAuxMaintStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuDiagAuxMaintStatus.setDescription(' The Maint. Port Supervisory link status.')
dsucsuDiagAuxCommStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 18, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("down", 1), ("sync", 2), ("off", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuDiagAuxCommStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuDiagAuxCommStatus.setDescription('The Communications port Supervisory link status.')
dsucsuDiagPortTable = MibTable((1, 3, 6, 1, 4, 1, 466, 6, 1, 19), )
if mibBuilder.loadTexts: dsucsuDiagPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuDiagPortTable.setDescription('Port Specific Display only Diagnostics')
dsucsuDiagPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 466, 6, 1, 19, 1), ).setIndexNames((0, "NETEXEC-MIB", "dsucsuDiagPortSlot"), (0, "NETEXEC-MIB", "dsucsuDiagPortNode"), (0, "NETEXEC-MIB", "dsucsuDiagPortIndex"))
if mibBuilder.loadTexts: dsucsuDiagPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuDiagPortEntry.setDescription('Port Specific Display only entry')
dsucsuDiagPortSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 19, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuDiagPortSlot.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuDiagPortSlot.setDescription('The PC port to which the TyView node is attached.')
dsucsuDiagPortNode = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 19, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuDiagPortNode.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuDiagPortNode.setDescription('The node ID: unique per port ID.')
dsucsuDiagPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 19, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuDiagPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuDiagPortIndex.setDescription('The port index: unique per port.')
dsucsuDiagPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 19, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("none", 1), ("network", 2), ("dsx", 3), ("pbx", 4), ("rs449", 5), ("rs232", 6), ("mil188", 7), ("v35", 8), ("dte", 9), ("tdm", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuDiagPortType.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuDiagPortType.setDescription('The port type (NET/DSX/PBX/V.35/RS-449).')
dsucsuDiagPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 19, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("clearOK", 1), ("redAlarm", 2), ("yellowAlarm", 3), ("syncLoss", 4), ("bpvAlarm", 5), ("blueAlarm", 6), ("test", 7), ("timeout", 8), ("notApplicable", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuDiagPortStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuDiagPortStatus.setDescription('Current status condition of a particular port.')
dsucsuIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 466, 6, 1, 20), )
if mibBuilder.loadTexts: dsucsuIntervalTable.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuIntervalTable.setDescription('The table contains various ESF stats collected over the last 96 15-minute intervals (24 hours total time).')
dsucsuIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 466, 6, 1, 20, 1), ).setIndexNames((0, "NETEXEC-MIB", "dsucsuIntervalSlot"), (0, "NETEXEC-MIB", "dsucsuIntervalNode"), (0, "NETEXEC-MIB", "dsucsuIntervalPort"), (0, "NETEXEC-MIB", "dsucsuIntervalNum"))
if mibBuilder.loadTexts: dsucsuIntervalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuIntervalEntry.setDescription('Entry in the table of ESF interval stats.')
dsucsuIntervalSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 20, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuIntervalSlot.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuIntervalSlot.setDescription('The PC port to which the TyView node is attached.')
dsucsuIntervalNode = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 20, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuIntervalNode.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuIntervalNode.setDescription('The node ID: unique per port ID.')
dsucsuIntervalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 20, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuIntervalPort.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuIntervalPort.setDescription('The port index: unique per port.')
dsucsuIntervalNum = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 20, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuIntervalNum.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuIntervalNum.setDescription('The sequence number for the selected interval.')
dsucsuIntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 20, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuIntervalESs.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuIntervalESs.setDescription('The number of Errored Seconds (as defined in Bell Publication 62411) encountered in the user registers during the selected interval.')
dsucsuIntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 20, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuIntervalSESs.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuIntervalSESs.setDescription('The number of Severely Errored Seconds (as defined in Bell Publication 62411) encountered in the user registers during the selected interval.')
dsucsuIntervalBPVs = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 20, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuIntervalBPVs.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuIntervalBPVs.setDescription('The number of Bipolar Violations (as defined in Bell Publication 62411) encountered in the user registers during the selected interval.')
dsucsuIntervalFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 20, 1, 8), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuIntervalFSs.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuIntervalFSs.setDescription('The number of Failed Seconds (as defined in Bell Publication 62411) encountered in the user registers during the selected interval.')
dsucsuCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 466, 6, 1, 22), )
if mibBuilder.loadTexts: dsucsuCurrentTable.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuCurrentTable.setDescription('The table contains various ESF stats collected over the current 15-minute interval.')
dsucsuCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 466, 6, 1, 22, 1), ).setIndexNames((0, "NETEXEC-MIB", "dsucsuCurrentSlot"), (0, "NETEXEC-MIB", "dsucsuCurrentNode"), (0, "NETEXEC-MIB", "dsucsuCurrentPort"))
if mibBuilder.loadTexts: dsucsuCurrentEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuCurrentEntry.setDescription('Entry in the table of the current ESF stats.')
dsucsuCurrentSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 22, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuCurrentSlot.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuCurrentSlot.setDescription('The PC port to which the TyView node is attached.')
dsucsuCurrentNode = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 22, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuCurrentNode.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuCurrentNode.setDescription('The node ID: unique per port ID.')
dsucsuCurrentPort = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 22, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuCurrentPort.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuCurrentPort.setDescription('The port index: unique per port.')
dsucsuCurrentESs = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 22, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuCurrentESs.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuCurrentESs.setDescription('The number of Errored Seconds (as defined in Bell Publication 62411) encountered in the user registers during the current 15 minute interval.')
dsucsuCurrentSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 22, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuCurrentSESs.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuCurrentSESs.setDescription('The number of Severely Errored Seconds (as defined in Bell Publication 62411) encountered in the user registers during the current 15 minute interval.')
dsucsuCurrentBPVs = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 22, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuCurrentBPVs.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuCurrentBPVs.setDescription('The number of Bipolar Violations (as defined in Bell Publication 62411) encountered in the user registers during the current 15 minute interval.')
dsucsuCurrentSECs = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 22, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuCurrentSECs.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuCurrentSECs.setDescription('Number of seconds elapsed in the current 15 minute interval.')
dsucsuCurrentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 22, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("frozen", 1), ("unfrozen", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuCurrentStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuCurrentStatus.setDescription('Indication of whether statistics have been halted during current 15 minute interval.')
dsucsuTotalTable = MibTable((1, 3, 6, 1, 4, 1, 466, 6, 1, 24), )
if mibBuilder.loadTexts: dsucsuTotalTable.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuTotalTable.setDescription('The table contains the cummulative sum of various ESF stats collected over the last 24 hour period.')
dsucsuTotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 466, 6, 1, 24, 1), ).setIndexNames((0, "NETEXEC-MIB", "dsucsuTotalSlot"), (0, "NETEXEC-MIB", "dsucsuTotalNode"), (0, "NETEXEC-MIB", "dsucsuTotalPort"))
if mibBuilder.loadTexts: dsucsuTotalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuTotalEntry.setDescription('Entry in the table of the total ESF stats.')
dsucsuTotalSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 24, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuTotalSlot.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuTotalSlot.setDescription('The PC port to which the TyView node is attached.')
dsucsuTotalNode = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 24, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuTotalNode.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuTotalNode.setDescription('The node ID: unique per port ID.')
dsucsuTotalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 24, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuTotalPort.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuTotalPort.setDescription('The port index: unique per port.')
dsucsuTotalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 24, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuTotalESs.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuTotalESs.setDescription('The number of Errored Seconds (as defined in Bell Publication 62411) encountered in the user registers in the last 24 hour period (96 intervals).')
dsucsuTotalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 24, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuTotalSESs.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuTotalSESs.setDescription('The number of Severely Errored Seconds (as defined in Bell Publication 62411) encountered in the user registers in the last 24 hour period (96 intervals).')
dsucsuTotalBPVs = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 24, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuTotalBPVs.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuTotalBPVs.setDescription('The number of Bipolar Violations (as defined in Bell Publication 62411) encountered in the user registers in the last 24 hour period (96 intervals).')
dsucsuTotalSECs = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 24, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuTotalSECs.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuTotalSECs.setDescription('Number of seconds elapsed in the last 24 hours. This will be the maximum value of 86400 unless the addressed node was brought on-line with the this period.')
dsucsuTotalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 24, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("frozen", 1), ("unfrozen", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuTotalStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuTotalStatus.setDescription('Indication of whether statistics have been halted in the last 24 hours.')
dsucsuAlarmType = MibScalar((1, 3, 6, 1, 4, 1, 466, 6, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54))).clone(namedValues=NamedValues(("yellow-Alarm", 1), ("sync-Alarm", 2), ("red-Alarm", 3), ("bpv-Alarm", 4), ("confg-Activated", 5), ("confg-Stored", 6), ("pbx1-Yellow-Alarm", 7), ("pbx1-Red-Alarm", 8), ("pbx1-Los-Alarm", 9), ("pbx3-Yellow-Alarm", 10), ("pbx3-Red-Alarm", 11), ("pbx3-Los-Alarm", 12), ("ais-Alarm", 13), ("node-communications-lost", 14), ("sync-ais-Alarm", 15), ("ts16-ais-Alarm", 16), ("ts16-Los-Alarm", 17), ("remote-Alarm", 18), ("remote-ts16-Alarm", 19), ("frame-Error-Alarm", 20), ("crc4-Error-Alarm", 21), ("port2-Yellow-Alarm", 22), ("port2-Sync-Alarm", 23), ("port2-Red-Alarm", 24), ("port2-Bpv-Alarm", 25), ("power-Supply-Alarm", 26), ("fan-one-Failure", 27), ("fan-two-Failure", 28), ("yellow-Alarm-Clear", 29), ("sync-Alarm-Clear", 30), ("red-Alarm-Clear", 31), ("bpv-Alarm-Clear", 32), ("pbx1-Yellow-Alarm-Clear", 33), ("pbx1-Red-Alarm-Clear", 34), ("pbx1-Los-Alarm-Clear", 35), ("pbx3-Yellow-Alarm-Clear", 36), ("pbx3-Red-Alarm-Clear", 37), ("pbx3-Los-Alarm-Clear", 38), ("ais-Alarm-Clear", 39), ("node-communications-restored", 40), ("sync-ais-Alarm-Clear", 41), ("ts16-ais-Alarm-Clear", 42), ("ts16-Los-Alarm-Clear", 43), ("remote-Alarm-Clear", 44), ("remote-ts16-Alarm-Clear", 45), ("frame-Error-Alarm-Clear", 46), ("crc4-Error-Alarm-Clear", 47), ("port2-Yellow-Alarm-Clear", 48), ("port2-Sync-Alarm-Clear", 49), ("port2-Red-Alarm-Clear", 50), ("port2-Bpv-Alarm-Clear", 51), ("power-Supply-Alarm-Clear", 52), ("fan-one-Failure-Clear", 53), ("fan-two-Failure-Clear", 54)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuAlarmType.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuAlarmType.setDescription('The type of alarms that are generated on the node')
dsucsuAlarmSlot = MibScalar((1, 3, 6, 1, 4, 1, 466, 6, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuAlarmSlot.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuAlarmSlot.setDescription('The PC port to which the TyView node is attached.')
dsucsuAlarmNode = MibScalar((1, 3, 6, 1, 4, 1, 466, 6, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuAlarmNode.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuAlarmNode.setDescription('The node ID: unique per port ID.')
dsucsuAlarmName = MibScalar((1, 3, 6, 1, 4, 1, 466, 6, 1, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuAlarmName.setStatus('mandatory')
if mibBuilder.loadTexts: dsucsuAlarmName.setDescription('The name of the node which triggered the alarm.')
tyviewSysTable = MibIdentifier((1, 3, 6, 1, 4, 1, 466, 6, 2, 1))
tyviewSysRevSw = MibScalar((1, 3, 6, 1, 4, 1, 466, 6, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tyviewSysRevSw.setStatus('mandatory')
if mibBuilder.loadTexts: tyviewSysRevSw.setDescription('The TyView software revision.')
tyviewSysName = MibScalar((1, 3, 6, 1, 4, 1, 466, 6, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tyviewSysName.setStatus('mandatory')
if mibBuilder.loadTexts: tyviewSysName.setDescription('The name given to TyView system.')
tyviewSysId = MibScalar((1, 3, 6, 1, 4, 1, 466, 6, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tyviewSysId.setStatus('mandatory')
if mibBuilder.loadTexts: tyviewSysId.setDescription('The TyView system ID.')
tyviewSysTimeOutFactor = MibScalar((1, 3, 6, 1, 4, 1, 466, 6, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tyviewSysTimeOutFactor.setStatus('mandatory')
if mibBuilder.loadTexts: tyviewSysTimeOutFactor.setDescription('The TyView timeout factor.')
tyviewSysObjectId = MibScalar((1, 3, 6, 1, 4, 1, 466, 6, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tyviewSysObjectId.setStatus('mandatory')
if mibBuilder.loadTexts: tyviewSysObjectId.setDescription('The Tyview Domain Object Identifier.')
tyviewSysSlotNumber = MibScalar((1, 3, 6, 1, 4, 1, 466, 6, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tyviewSysSlotNumber.setStatus('mandatory')
if mibBuilder.loadTexts: tyviewSysSlotNumber.setDescription('The Physical Slot Number the NETEXEC is installed in.')
tyviewSysClearDatabase = MibScalar((1, 3, 6, 1, 4, 1, 466, 6, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clearDatabase", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: tyviewSysClearDatabase.setStatus('mandatory')
if mibBuilder.loadTexts: tyviewSysClearDatabase.setDescription('Clear the node database.')
tyviewSysGetCommName = MibScalar((1, 3, 6, 1, 4, 1, 466, 6, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tyviewSysGetCommName.setStatus('mandatory')
if mibBuilder.loadTexts: tyviewSysGetCommName.setDescription('The GET community name.')
tyviewSysSetCommName = MibScalar((1, 3, 6, 1, 4, 1, 466, 6, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tyviewSysSetCommName.setStatus('mandatory')
if mibBuilder.loadTexts: tyviewSysSetCommName.setDescription('The SET community name.')
tyviewSysTrapCommName = MibScalar((1, 3, 6, 1, 4, 1, 466, 6, 2, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tyviewSysTrapCommName.setStatus('mandatory')
if mibBuilder.loadTexts: tyviewSysTrapCommName.setDescription('The TRAP community name.')
tyviewSysN1TrapDest = MibScalar((1, 3, 6, 1, 4, 1, 466, 6, 2, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tyviewSysN1TrapDest.setStatus('mandatory')
if mibBuilder.loadTexts: tyviewSysN1TrapDest.setDescription('The first Trap IP Destination.')
tyviewSysN2TrapDest = MibScalar((1, 3, 6, 1, 4, 1, 466, 6, 2, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tyviewSysN2TrapDest.setStatus('mandatory')
if mibBuilder.loadTexts: tyviewSysN2TrapDest.setDescription('The second Trap IP Destination.')
tyviewSysDate = MibScalar((1, 3, 6, 1, 4, 1, 466, 6, 2, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tyviewSysDate.setStatus('mandatory')
if mibBuilder.loadTexts: tyviewSysDate.setDescription('The NETEXEC date (mm/dd/yy).')
tyviewSysTime = MibScalar((1, 3, 6, 1, 4, 1, 466, 6, 2, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tyviewSysTime.setStatus('mandatory')
if mibBuilder.loadTexts: tyviewSysTime.setDescription('The NETEXEC time (hh:mm).')
tyviewSysMjrMnrLED = MibScalar((1, 3, 6, 1, 4, 1, 466, 6, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("led-Off", 1), ("led-Red", 2), ("led-Green", 3), ("led-Yellow", 4), ("led-RedYellow", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tyviewSysMjrMnrLED.setStatus('mandatory')
if mibBuilder.loadTexts: tyviewSysMjrMnrLED.setDescription('The Major/Minor LED status.')
tyviewSysFanPSLED = MibScalar((1, 3, 6, 1, 4, 1, 466, 6, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("led-Off", 1), ("led-Red", 2), ("led-Green", 3), ("led-Yellow", 4), ("led-RedYellow", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tyviewSysFanPSLED.setStatus('mandatory')
if mibBuilder.loadTexts: tyviewSysFanPSLED.setDescription('The Fan / Power Supply LED status.')
tyviewSysCtlrLED = MibScalar((1, 3, 6, 1, 4, 1, 466, 6, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("led-Off", 1), ("led-Red", 2), ("led-Green", 3), ("led-Yellow", 4), ("led-RedYellow", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tyviewSysCtlrLED.setStatus('mandatory')
if mibBuilder.loadTexts: tyviewSysCtlrLED.setDescription('The Controller LED status.')
tyviewSysSlipLED = MibScalar((1, 3, 6, 1, 4, 1, 466, 6, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("led-Off", 1), ("led-Red", 2), ("led-Green", 3), ("led-Yellow", 4), ("led-RedYellow", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tyviewSysSlipLED.setStatus('mandatory')
if mibBuilder.loadTexts: tyviewSysSlipLED.setDescription('The SLIP LED status.')
tyviewSysCtlChLED = MibScalar((1, 3, 6, 1, 4, 1, 466, 6, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("led-Off", 1), ("led-Red", 2), ("led-Green", 3), ("led-Yellow", 4), ("led-RedYellow", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tyviewSysCtlChLED.setStatus('mandatory')
if mibBuilder.loadTexts: tyviewSysCtlChLED.setDescription('The Control Channel LED status.')
tyviewSysTDMLED = MibScalar((1, 3, 6, 1, 4, 1, 466, 6, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("led-Off", 1), ("led-Red", 2), ("led-Green", 3), ("led-Yellow", 4), ("led-RedYellow", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tyviewSysTDMLED.setStatus('mandatory')
if mibBuilder.loadTexts: tyviewSysTDMLED.setDescription('The TDM LED status.')
tyviewSysMaintUseage = MibScalar((1, 3, 6, 1, 4, 1, 466, 6, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("command", 2), ("slip", 3), ("tp-modem", 4), ("diagnostic", 5), ("ppp", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tyviewSysMaintUseage.setStatus('mandatory')
if mibBuilder.loadTexts: tyviewSysMaintUseage.setDescription('The Maintenance Port useage specification.')
tyviewSysMaintDataBits = MibScalar((1, 3, 6, 1, 4, 1, 466, 6, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("databits-7", 1), ("databits-8", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tyviewSysMaintDataBits.setStatus('mandatory')
if mibBuilder.loadTexts: tyviewSysMaintDataBits.setDescription('The Maintenance Port databits specification.')
tyviewSysMaintRate = MibScalar((1, 3, 6, 1, 4, 1, 466, 6, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("rate-1200", 1), ("rate-2400", 2), ("rate-4800", 3), ("rate-9600", 4), ("rate-19200", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tyviewSysMaintRate.setStatus('mandatory')
if mibBuilder.loadTexts: tyviewSysMaintRate.setDescription('The Maintenance Port rate specification.')
tyviewSysMaintStopBits = MibScalar((1, 3, 6, 1, 4, 1, 466, 6, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("stopbits-1", 1), ("stopbits-2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tyviewSysMaintStopBits.setStatus('mandatory')
if mibBuilder.loadTexts: tyviewSysMaintStopBits.setDescription('The Maintenance Port stopbits specification.')
tyviewSysMaintParity = MibScalar((1, 3, 6, 1, 4, 1, 466, 6, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("odd", 2), ("even", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tyviewSysMaintParity.setStatus('mandatory')
if mibBuilder.loadTexts: tyviewSysMaintParity.setDescription('The Maintenance Port parity specification.')
tyviewSysMaintMtu = MibScalar((1, 3, 6, 1, 4, 1, 466, 6, 2, 1, 26), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tyviewSysMaintMtu.setStatus('mandatory')
if mibBuilder.loadTexts: tyviewSysMaintMtu.setDescription('The Maintenance Port maximum trans unit size.')
tyviewSysMaintCompression = MibScalar((1, 3, 6, 1, 4, 1, 466, 6, 2, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tyviewSysMaintCompression.setStatus('mandatory')
if mibBuilder.loadTexts: tyviewSysMaintCompression.setDescription('The Maintenance Port compression specification.')
tyviewSysMaintSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 466, 6, 2, 1, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tyviewSysMaintSubnetMask.setStatus('mandatory')
if mibBuilder.loadTexts: tyviewSysMaintSubnetMask.setDescription('The Maintenance Port subnet mask.')
tyviewSysMaintLocalIP = MibScalar((1, 3, 6, 1, 4, 1, 466, 6, 2, 1, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tyviewSysMaintLocalIP.setStatus('mandatory')
if mibBuilder.loadTexts: tyviewSysMaintLocalIP.setDescription('The Maintenance Port local IP address.')
tyviewSysMaintPeerIP = MibScalar((1, 3, 6, 1, 4, 1, 466, 6, 2, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tyviewSysMaintPeerIP.setStatus('mandatory')
if mibBuilder.loadTexts: tyviewSysMaintPeerIP.setDescription('The Maintenance Port peer IP address.')
tyviewSysComUseage = MibScalar((1, 3, 6, 1, 4, 1, 466, 6, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("command", 2), ("slip", 3), ("tp-modem", 4), ("diagnostic", 5), ("ppp", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tyviewSysComUseage.setStatus('mandatory')
if mibBuilder.loadTexts: tyviewSysComUseage.setDescription('The Com Port useage specification.')
tyviewSysComDataBits = MibScalar((1, 3, 6, 1, 4, 1, 466, 6, 2, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("databits-7", 1), ("databits-8", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tyviewSysComDataBits.setStatus('mandatory')
if mibBuilder.loadTexts: tyviewSysComDataBits.setDescription('The Com Port databits specification.')
tyviewSysComRate = MibScalar((1, 3, 6, 1, 4, 1, 466, 6, 2, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("rate-1200", 1), ("rate-2400", 2), ("rate-4800", 3), ("rate-9600", 4), ("rate-19200", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tyviewSysComRate.setStatus('mandatory')
if mibBuilder.loadTexts: tyviewSysComRate.setDescription('The Com Port rate specification.')
tyviewSysComStopBits = MibScalar((1, 3, 6, 1, 4, 1, 466, 6, 2, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("stopbits-1", 1), ("stopbits-2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tyviewSysComStopBits.setStatus('mandatory')
if mibBuilder.loadTexts: tyviewSysComStopBits.setDescription('The Com Port stopbits specification.')
tyviewSysComParity = MibScalar((1, 3, 6, 1, 4, 1, 466, 6, 2, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("odd", 2), ("even", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tyviewSysComParity.setStatus('mandatory')
if mibBuilder.loadTexts: tyviewSysComParity.setDescription('The Com Port parity specification.')
tyviewSysComMtu = MibScalar((1, 3, 6, 1, 4, 1, 466, 6, 2, 1, 36), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tyviewSysComMtu.setStatus('mandatory')
if mibBuilder.loadTexts: tyviewSysComMtu.setDescription('The Com Port maximum trans unit size.')
tyviewSysComCompression = MibScalar((1, 3, 6, 1, 4, 1, 466, 6, 2, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tyviewSysComCompression.setStatus('mandatory')
if mibBuilder.loadTexts: tyviewSysComCompression.setDescription('The Com Port compression specification.')
tyviewSysComSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 466, 6, 2, 1, 38), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tyviewSysComSubnetMask.setStatus('mandatory')
if mibBuilder.loadTexts: tyviewSysComSubnetMask.setDescription('The Com Port subnet mask.')
tyviewSysComLocalIP = MibScalar((1, 3, 6, 1, 4, 1, 466, 6, 2, 1, 39), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tyviewSysComLocalIP.setStatus('mandatory')
if mibBuilder.loadTexts: tyviewSysComLocalIP.setDescription('The Com Port local IP address.')
tyviewSysComPeerIP = MibScalar((1, 3, 6, 1, 4, 1, 466, 6, 2, 1, 40), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tyviewSysComPeerIP.setStatus('mandatory')
if mibBuilder.loadTexts: tyviewSysComPeerIP.setDescription('The Com Port peer IP address.')
tyviewSysTelnetEna = MibScalar((1, 3, 6, 1, 4, 1, 466, 6, 2, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tyviewSysTelnetEna.setStatus('mandatory')
if mibBuilder.loadTexts: tyviewSysTelnetEna.setDescription('The Telnet log-in enable.')
tyviewSysTelnetTO = MibScalar((1, 3, 6, 1, 4, 1, 466, 6, 2, 1, 42), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tyviewSysTelnetTO.setStatus('mandatory')
if mibBuilder.loadTexts: tyviewSysTelnetTO.setDescription('The Telnet auto-logout timeout (minutes).')
tyviewSysClrMjrMin = MibScalar((1, 3, 6, 1, 4, 1, 466, 6, 2, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clearMajorMinor", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: tyviewSysClrMjrMin.setStatus('mandatory')
if mibBuilder.loadTexts: tyviewSysClrMjrMin.setDescription('Clear major/minor alarm window / LED.')
tyviewDatabaseTable = MibTable((1, 3, 6, 1, 4, 1, 466, 6, 2, 2), )
if mibBuilder.loadTexts: tyviewDatabaseTable.setStatus('mandatory')
if mibBuilder.loadTexts: tyviewDatabaseTable.setDescription('A list of tyview database entries.')
tyviewDatabaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 466, 6, 2, 2, 1), ).setIndexNames((0, "NETEXEC-MIB", "tyviewDatabaseSlot"), (0, "NETEXEC-MIB", "tyviewDatabaseNode"))
if mibBuilder.loadTexts: tyviewDatabaseEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tyviewDatabaseEntry.setDescription('System Object for TyView Database')
tyviewDatabaseSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tyviewDatabaseSlot.setStatus('mandatory')
if mibBuilder.loadTexts: tyviewDatabaseSlot.setDescription('The PC port to which the node is attached.')
tyviewDatabaseNode = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tyviewDatabaseNode.setStatus('mandatory')
if mibBuilder.loadTexts: tyviewDatabaseNode.setDescription('The node ID: unique per port ID.')
tyviewDatabaseName = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 2, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tyviewDatabaseName.setStatus('mandatory')
if mibBuilder.loadTexts: tyviewDatabaseName.setDescription('The unique name of the node.')
tyviewDatabaseStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("timeout", 2), ("error", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tyviewDatabaseStatus.setStatus('mandatory')
if mibBuilder.loadTexts: tyviewDatabaseStatus.setDescription('The last comm status.')
tyviewBroadcastTable = MibIdentifier((1, 3, 6, 1, 4, 1, 466, 6, 2, 3))
tyviewBroadcastSetTime = MibScalar((1, 3, 6, 1, 4, 1, 466, 6, 2, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("setTime", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: tyviewBroadcastSetTime.setStatus('mandatory')
if mibBuilder.loadTexts: tyviewBroadcastSetTime.setDescription('Broadcast the time to all nodes.')
tyviewBroadcastForwardAlarms = MibScalar((1, 3, 6, 1, 4, 1, 466, 6, 2, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("forwardAlarms", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: tyviewBroadcastForwardAlarms.setStatus('mandatory')
if mibBuilder.loadTexts: tyviewBroadcastForwardAlarms.setDescription('Broadcast alarm forwarding.')
tyviewBroadcastClearLoopbacks = MibScalar((1, 3, 6, 1, 4, 1, 466, 6, 2, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clearNetLoopbacks", 1), ("clearChanLoopbacks", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: tyviewBroadcastClearLoopbacks.setStatus('mandatory')
if mibBuilder.loadTexts: tyviewBroadcastClearLoopbacks.setDescription('Broadcast Clearing of loopbacks.')
tyviewTPTable = MibTable((1, 3, 6, 1, 4, 1, 466, 6, 2, 4), )
if mibBuilder.loadTexts: tyviewTPTable.setStatus('mandatory')
if mibBuilder.loadTexts: tyviewTPTable.setDescription('A list of Threshold Processing records.')
tyviewTPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 466, 6, 2, 4, 1), ).setIndexNames((0, "NETEXEC-MIB", "tyviewTPRecord"))
if mibBuilder.loadTexts: tyviewTPEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tyviewTPEntry.setDescription('System Object for Threshold Processing')
tyviewTPRecord = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 25))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tyviewTPRecord.setStatus('mandatory')
if mibBuilder.loadTexts: tyviewTPRecord.setDescription('The Threshold Processing record referenced.')
tyviewTPMonNodeMode = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("all-nodes", 2), ("node-specific", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tyviewTPMonNodeMode.setStatus('mandatory')
if mibBuilder.loadTexts: tyviewTPMonNodeMode.setDescription('The mode used for monitoring nodes.')
tyviewTPNode = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 2, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tyviewTPNode.setStatus('mandatory')
if mibBuilder.loadTexts: tyviewTPNode.setDescription('The node name for node-specific monitoring.')
tyviewTPAlarmType = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("major", 1), ("minor", 2), ("all", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tyviewTPAlarmType.setStatus('mandatory')
if mibBuilder.loadTexts: tyviewTPAlarmType.setDescription('The alarm type used to trigger.')
tyviewTPTriggerEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 2, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("alarm-on", 1), ("alarm-instance", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tyviewTPTriggerEvent.setStatus('mandatory')
if mibBuilder.loadTexts: tyviewTPTriggerEvent.setDescription('The event type used to trigger.')
tyviewTPInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 2, 4, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tyviewTPInstance.setStatus('mandatory')
if mibBuilder.loadTexts: tyviewTPInstance.setDescription('The alarm instance used to trigger.')
tyviewTPInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 2, 4, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tyviewTPInterval.setStatus('mandatory')
if mibBuilder.loadTexts: tyviewTPInterval.setDescription('The alarm interval used to trigger.')
tyviewTPEventAction = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 2, 4, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tyviewTPEventAction.setStatus('mandatory')
if mibBuilder.loadTexts: tyviewTPEventAction.setDescription('The phone number dialed when triggered.')
tyviewTPDryContact = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 2, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dry-contact-off", 1), ("dry-contact-major", 2), ("dry-contact-minor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tyviewTPDryContact.setStatus('mandatory')
if mibBuilder.loadTexts: tyviewTPDryContact.setDescription('The type of Dry Contact when triggered.')
tyviewTPClearDryContact = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 2, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear-major", 1), ("clear-minor", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: tyviewTPClearDryContact.setStatus('mandatory')
if mibBuilder.loadTexts: tyviewTPClearDryContact.setDescription('Clear major/minor Dry Contact.')
dsucsuTrap = NotificationType((1, 3, 6, 1, 4, 1, 466, 6, 1) + (0,0)).setObjects(("NETEXEC-MIB", "dsucsuAlarmType"), ("NETEXEC-MIB", "dsucsuAlarmSlot"), ("NETEXEC-MIB", "dsucsuAlarmNode"), ("NETEXEC-MIB", "dsucsuAlarmName"))
if mibBuilder.loadTexts: dsucsuTrap.setDescription('A dsucsuTrap trap signifies that the sending node had its `dsucsuAlarmType` variable modified.')
mibBuilder.exportSymbols("NETEXEC-MIB", dsucsuDiagFrmFrameErr=dsucsuDiagFrmFrameErr, dsucsuConnUpdateRequired=dsucsuConnUpdateRequired, dsucsuDiagAuxMaintStatus=dsucsuDiagAuxMaintStatus, dsucsuTotalPort=dsucsuTotalPort, tyviewTPClearDryContact=tyviewTPClearDryContact, dsucsuDiagFrmIndex=dsucsuDiagFrmIndex, dsucsuEventClrDest=dsucsuEventClrDest, dsucsuCfgFrmChanType=dsucsuCfgFrmChanType, dsucsuConnAutoNode=dsucsuConnAutoNode, tyviewSysGetCommName=tyviewSysGetCommName, dsucsuCfgDacsTable=dsucsuCfgDacsTable, dsucsuCfgCommChanType=dsucsuCfgCommChanType, dsucsuCfgDteChanEncoding=dsucsuCfgDteChanEncoding, dsucsuCfgAutoAssignTable=dsucsuCfgAutoAssignTable, dsucsuDiagAuxTable=dsucsuDiagAuxTable, dsucsuCfgBrdNode=dsucsuCfgBrdNode, dsucsuT1Index=dsucsuT1Index, dsucsuEventDesName1=dsucsuEventDesName1, dsucsuDs0=dsucsuDs0, dsucsuCfgFrmChanStartDs0=dsucsuCfgFrmChanStartDs0, tyviewSysN1TrapDest=tyviewSysN1TrapDest, dsucsuConfigSupTable=dsucsuConfigSupTable, dsucsuCfgNetIndex=dsucsuCfgNetIndex, dsucsuIntervalSESs=dsucsuIntervalSESs, dsucsuCfgCurrentConnections=dsucsuCfgCurrentConnections, tyviewSysMaintCompression=tyviewSysMaintCompression, tyviewTPTable=tyviewTPTable, dsucsuDiagDteTable=dsucsuDiagDteTable, tyviewTPDryContact=tyviewTPDryContact, dsucsuCfgFrmChanTable=dsucsuCfgFrmChanTable, dsucsuDiagNetRemCsuLpbk=dsucsuDiagNetRemCsuLpbk, dsucsuSysEntry=dsucsuSysEntry, dsucsuCfgNetRateMultiples=dsucsuCfgNetRateMultiples, dsucsuDiagFrmLclDte=dsucsuDiagFrmLclDte, dsucsuDiagDteRemLpbk=dsucsuDiagDteRemLpbk, tyviewSysTable=tyviewSysTable, dsucsuConnAutoStartDS0=dsucsuConnAutoStartDS0, dsucsuDiagDteSlot=dsucsuDiagDteSlot, dsucsuDiagPortStatus=dsucsuDiagPortStatus, dsucsuDiagDteBertTestAct=dsucsuDiagDteBertTestAct, tyviewSysMaintDataBits=tyviewSysMaintDataBits, dsucsuCfgFrmChanSlot=dsucsuCfgFrmChanSlot, dsucsuCfgMaintFlowCtrl=dsucsuCfgMaintFlowCtrl, dsucsuConnAutoType=dsucsuConnAutoType, tyviewSysN2TrapDest=tyviewSysN2TrapDest, dsucsuConnNode=dsucsuConnNode, tyviewSysMaintPeerIP=tyviewSysMaintPeerIP, dsucsuCfgDteChanType=dsucsuCfgDteChanType, tyviewSysClrMjrMin=tyviewSysClrMjrMin, tyviewSysTimeOutFactor=tyviewSysTimeOutFactor, dsucsuDiagDteBertErrors=dsucsuDiagDteBertErrors, dsucsuDiagPortEntry=dsucsuDiagPortEntry, tyviewSysCtlChLED=tyviewSysCtlChLED, dsucsuCurrentPort=dsucsuCurrentPort, dsucsuEventNameIndx=dsucsuEventNameIndx, tyviewSysTelnetTO=tyviewSysTelnetTO, tyviewSysName=tyviewSysName, tyviewSysTime=tyviewSysTime, dsucsuDiagFrmLclPayload=dsucsuDiagFrmLclPayload, dsucsuCfgMaintBaud=dsucsuCfgMaintBaud, dsucsuDiagPortTable=dsucsuDiagPortTable, dsucsuAlarmSlot=dsucsuAlarmSlot, tyviewTPNode=tyviewTPNode, dsucsuEventDesName2=dsucsuEventDesName2, dsucsuDiagFrmEvOofErr=dsucsuDiagFrmEvOofErr, dsucsuCfgNetCsuDensity=dsucsuCfgNetCsuDensity, dsucsuDiagAuxChBStatus=dsucsuDiagAuxChBStatus, dsucsuCfgDteChanClockInvert=dsucsuCfgDteChanClockInvert, dsucsuCfgFrmChanEncoding=dsucsuCfgFrmChanEncoding, dsucsuDiagNetEvOofErr=dsucsuDiagNetEvOofErr, dsucsuIntervalNum=dsucsuIntervalNum, dsucsuDiagDteBertHourStrt=dsucsuDiagDteBertHourStrt, dsucsuDiagFrmLclBiDir=dsucsuDiagFrmLclBiDir, dsucsuCfgNetNode=dsucsuCfgNetNode, dsucsuConnAutoStatus=dsucsuConnAutoStatus, dsucsuCfgMaintParity=dsucsuCfgMaintParity, dsucsuDiagFrmClearEvReg=dsucsuDiagFrmClearEvReg, tyviewSysTrapCommName=tyviewSysTrapCommName, dsucsuCfgFrmChanMapping=dsucsuCfgFrmChanMapping, dsucsuConnNumDs0s=dsucsuConnNumDs0s, dsucsuAlarmType=dsucsuAlarmType, tyviewDatabaseSlot=tyviewDatabaseSlot, dsucsuConnSrcDs0=dsucsuConnSrcDs0, dsucsuCfgFrmChanNetMapping=dsucsuCfgFrmChanNetMapping, dsucsuCfgBrdTable=dsucsuCfgBrdTable, dsucsuDiagAuxSlot=dsucsuDiagAuxSlot, tyviewSysCtlrLED=tyviewSysCtlrLED, tyviewSysComDataBits=tyviewSysComDataBits, tyviewSysMaintRate=tyviewSysMaintRate, dsucsuConfigSupIndex=dsucsuConfigSupIndex, dsucsuCfgMaintChanType=dsucsuCfgMaintChanType, dsucsuDiagDteEntry=dsucsuDiagDteEntry, dsucsuDiagFrmNode=dsucsuDiagFrmNode, dsucsuDiagAuxEntry=dsucsuDiagAuxEntry, dsucsuActvConfNode=dsucsuActvConfNode, dsucsuConnClearEditBuff=dsucsuConnClearEditBuff, dsucsuConfigSupSlot=dsucsuConfigSupSlot, dsucsuCfgEditConnEntry=dsucsuCfgEditConnEntry, tyviewSysId=tyviewSysId, dsucsuActvConfIndex=dsucsuActvConfIndex, dsucsuDiagFrmRemLpbk=dsucsuDiagFrmRemLpbk, dsucsuCfgCurrentConnTable=dsucsuCfgCurrentConnTable, dsucsuSysSoftRev=dsucsuSysSoftRev, dsucsuCfgCommBaud=dsucsuCfgCommBaud, tyviewSysMaintMtu=tyviewSysMaintMtu, dsucsuCfgCommParity=dsucsuCfgCommParity, tyviewSysMjrMnrLED=tyviewSysMjrMnrLED, dsucsuDiagPortType=dsucsuDiagPortType, dsucsuCfgNetClockSource=dsucsuCfgNetClockSource, dsucsuCurrentEntry=dsucsuCurrentEntry, tyviewDatabaseStatus=tyviewDatabaseStatus, dsucsuTotalStatus=dsucsuTotalStatus, tyviewDatabaseEntry=tyviewDatabaseEntry, dsucsuDiagNetLclNetLpbk=dsucsuDiagNetLclNetLpbk, dsucsuDiagNetErrEvents=dsucsuDiagNetErrEvents, dsucsuCfgNetCsuLBO=dsucsuCfgNetCsuLBO, dsucsuDiagFrmEvElapTime=dsucsuDiagFrmEvElapTime, dsucsuEventDesTable=dsucsuEventDesTable, tyviewSysObjectId=tyviewSysObjectId, dsucsuActvConfTable=dsucsuActvConfTable, dsucsuCurrentESs=dsucsuCurrentESs, tyviewTPAlarmType=tyviewTPAlarmType, dsucsuCfgCommStopBits=dsucsuCfgCommStopBits, netexec=netexec, dsucsuCfgNetEntry=dsucsuCfgNetEntry, dsucsuCurrentSlot=dsucsuCurrentSlot, dsucsuConnType=dsucsuConnType, dsucsuCfgAutoAssignEntry=dsucsuCfgAutoAssignEntry, tylink=tylink, dsucsuDiagFrmSlot=dsucsuDiagFrmSlot, dsucsuCfgFrmChanOutputPulse=dsucsuCfgFrmChanOutputPulse, dsucsuDiagNetIndex=dsucsuDiagNetIndex, dsucsuCfgDteChanEntry=dsucsuCfgDteChanEntry, dsucsuCfgDteChanSlot=dsucsuCfgDteChanSlot, dsucsuCfgMaintSlot=dsucsuCfgMaintSlot, tyviewSysComStopBits=tyviewSysComStopBits, dsucsuTotalBPVs=dsucsuTotalBPVs, tyviewSysComParity=tyviewSysComParity, dsucsuDiagNetEvCRC6Err=dsucsuDiagNetEvCRC6Err, dsucsuConnDs0Required=dsucsuConnDs0Required, dsucsuDiagDteNode=dsucsuDiagDteNode, dsucsuActvConfSlot=dsucsuActvConfSlot, dsucsuCfgFrmChanFrameType=dsucsuCfgFrmChanFrameType, tyviewSysComUseage=tyviewSysComUseage, dsucsuConnUpdateCmd=dsucsuConnUpdateCmd, tyviewSysMaintParity=tyviewSysMaintParity, dsucsuSlot=dsucsuSlot, dsucsuCfgFrmChanNode=dsucsuCfgFrmChanNode, tyviewSysComSubnetMask=tyviewSysComSubnetMask, dsucsuConfigSupNode=dsucsuConfigSupNode, dsucsuEventDesNode=dsucsuEventDesNode, tyviewSysMaintUseage=tyviewSysMaintUseage, dsucsuCfgCommEntry=dsucsuCfgCommEntry, tyviewTPInterval=tyviewTPInterval, dsucsuDiagFrmBertTestAct=dsucsuDiagFrmBertTestAct, dsucsuCfgNetInterface=dsucsuCfgNetInterface, dsucsuCfgCommFlowCtrl=dsucsuCfgCommFlowCtrl, dsucsuCfgMaintEntry=dsucsuCfgMaintEntry, dsucsuCfgDteChanTiming=dsucsuCfgDteChanTiming, tyviewSysSetCommName=tyviewSysSetCommName, tyviewSysTelnetEna=tyviewSysTelnetEna, tyviewSysSlotNumber=tyviewSysSlotNumber, dsucsuCfgNetSlot=dsucsuCfgNetSlot, tyviewBroadcastSetTime=tyviewBroadcastSetTime, dsucsuCfgBrdTiming=dsucsuCfgBrdTiming, dsucsuDiagDteLocalBiDir=dsucsuDiagDteLocalBiDir, dsucsuConnDteDensity=dsucsuConnDteDensity, dsucsuConfigSupEntry=dsucsuConfigSupEntry, dsucsuDiagNetEvElapTime=dsucsuDiagNetEvElapTime, dsucsuIntervalBPVs=dsucsuIntervalBPVs, dsucsuDiagAuxNode=dsucsuDiagAuxNode, dsucsuCfgEditConnTable=dsucsuCfgEditConnTable, dsucsuCfgCommDataBits=dsucsuCfgCommDataBits, dsucsuCfgDteChanTable=dsucsuCfgDteChanTable, dsucsuCfgDteChanNode=dsucsuCfgDteChanNode, dsucsuConnSrcPort=dsucsuConnSrcPort, dsucsuDiagDteBertTimeElaps=dsucsuDiagDteBertTimeElaps, tyviewBroadcastTable=tyviewBroadcastTable, dsucsuDiagFrmLclLpbk=dsucsuDiagFrmLclLpbk, dsucsuIntervalESs=dsucsuIntervalESs, dsucsuNode=dsucsuNode, dsucsuDiagAuxFdl2Status=dsucsuDiagAuxFdl2Status, dsucsuIntervalSlot=dsucsuIntervalSlot, dsucsuSysName=dsucsuSysName, tyviewSysComLocalIP=tyviewSysComLocalIP, dsucsuTotalSESs=dsucsuTotalSESs, dsucsuCfgSupAuxTable=dsucsuCfgSupAuxTable, dsucsuCfgSupAuxNode=dsucsuCfgSupAuxNode, dsucsuConnDestPort=dsucsuConnDestPort, dsucsuTotalTable=dsucsuTotalTable, tyviewTPMonNodeMode=tyviewTPMonNodeMode, dsucsuCfgMaintStopBits=dsucsuCfgMaintStopBits, dsucsuDiagNetTable=dsucsuDiagNetTable, dsucsuConnSlot=dsucsuConnSlot, dsucsuCfgSupAuxIndex=dsucsuCfgSupAuxIndex, tyviewSysComMtu=tyviewSysComMtu, dsucsuTrap=dsucsuTrap, dsucsuDiagFrmEntry=dsucsuDiagFrmEntry, tyviewDatabaseNode=tyviewDatabaseNode, dsucsuEventDesEntry=dsucsuEventDesEntry, dsucsu=dsucsu, tyviewTPEntry=tyviewTPEntry, dsucsuCfgNetTs16=dsucsuCfgNetTs16, dsucsuDiagPortSlot=dsucsuDiagPortSlot, dsucsuCurrentNode=dsucsuCurrentNode, dsucsuDiagNetSlot=dsucsuDiagNetSlot, dsucsuDiagPortIndex=dsucsuDiagPortIndex, dsucsuDiagNetEntry=dsucsuDiagNetEntry, dsucsuDiagNetLclNetPayload=dsucsuDiagNetLclNetPayload, dsucsuCurrentSECs=dsucsuCurrentSECs, dsucsuCfgNetType=dsucsuCfgNetType, dsucsuConfigSupDs0=dsucsuConfigSupDs0, dsucsuCfgDteChanStartDs0=dsucsuCfgDteChanStartDs0, dsucsuCfgBrdSlot=dsucsuCfgBrdSlot, tyviewSysSlipLED=tyviewSysSlipLED, tyview=tyview, dsucsuCfgNetCoding=dsucsuCfgNetCoding, internet=internet, dsucsuCfgMaintNode=dsucsuCfgMaintNode, dsucsuSysNumChan=dsucsuSysNumChan, tyviewSysRevSw=tyviewSysRevSw, dsucsuDiagFrmEvBpvErr=dsucsuDiagFrmEvBpvErr, dsucsuDiagAuxChAStatus=dsucsuDiagAuxChAStatus, tyviewSysMaintLocalIP=tyviewSysMaintLocalIP, dsucsuIntervalPort=dsucsuIntervalPort, dsucsuCfgDteChanDataInvert=dsucsuCfgDteChanDataInvert, dsucsuDiagNetRemDsuLpbk=dsucsuDiagNetRemDsuLpbk, tyviewSysDate=tyviewSysDate, dsucsuActvConfEntry=dsucsuActvConfEntry, dsucsuCurrentTable=dsucsuCurrentTable, dsucsuTotalNode=dsucsuTotalNode, dsucsuDiagAuxFdlStatus=dsucsuDiagAuxFdlStatus, dsucsuIntervalTable=dsucsuIntervalTable, dsucsuCfgFrmChanDs0Type=dsucsuCfgFrmChanDs0Type, dsucsuDiagNetClearEvReg=dsucsuDiagNetClearEvReg, dsucsuCfgMaintTable=dsucsuCfgMaintTable, dsucsuAlarmName=dsucsuAlarmName, dsucsuCfgSupAuxSlot=dsucsuCfgSupAuxSlot, dsucsuCfgNetCsuEnable=dsucsuCfgNetCsuEnable, dsucsuDiagDteBertMinStrt=dsucsuDiagDteBertMinStrt, dsucsuCfgDteChanIndex=dsucsuCfgDteChanIndex, tyviewDatabaseName=tyviewDatabaseName, enterprises=enterprises, dsucsuIntervalEntry=dsucsuIntervalEntry, dsucsuConnDestDs0=dsucsuConnDestDs0, dsucsuConnAutoDestPort=dsucsuConnAutoDestPort, dsucsuSysHardRev=dsucsuSysHardRev, dsucsuDiagDteLocalPayload=dsucsuDiagDteLocalPayload, tyviewTPTriggerEvent=tyviewTPTriggerEvent, dsucsuConnAutoSlot=dsucsuConnAutoSlot, dsucsuDiagNetNode=dsucsuDiagNetNode, dsucsuDiagNetLclNetBiDir=dsucsuDiagNetLclNetBiDir, tyviewSysMaintSubnetMask=tyviewSysMaintSubnetMask, dsucsuConnAutoSrcPort=dsucsuConnAutoSrcPort)
mibBuilder.exportSymbols("NETEXEC-MIB", dsucsuSysSlot=dsucsuSysSlot, tyviewSysComCompression=tyviewSysComCompression, dsucsuCfgFrmChanDteStartDs0=dsucsuCfgFrmChanDteStartDs0, dsucsuCfgSupAuxEntry=dsucsuCfgSupAuxEntry, tyviewBroadcastClearLoopbacks=tyviewBroadcastClearLoopbacks, dsucsuCfgDteChanRate=dsucsuCfgDteChanRate, tyviewSysMaintStopBits=tyviewSysMaintStopBits, dsucsuCfgCommTable=dsucsuCfgCommTable, dsucsuConnAutoUpdateCmd=dsucsuConnAutoUpdateCmd, dsucsuIntervalNode=dsucsuIntervalNode, dsucsuCfgFrmChanEntry=dsucsuCfgFrmChanEntry, dsucsuIntervalFSs=dsucsuIntervalFSs, dsucsuDiagAuxCommStatus=dsucsuDiagAuxCommStatus, dsucsuCurrentStatus=dsucsuCurrentStatus, dsucsuDiagFrmLclDte2=dsucsuDiagFrmLclDte2, dsucsuDtePort=dsucsuDtePort, dsucsuCfgNetOutputPulse=dsucsuCfgNetOutputPulse, tyviewBroadcastForwardAlarms=tyviewBroadcastForwardAlarms, dsucsuConnConnect=dsucsuConnConnect, tyviewSysClearDatabase=tyviewSysClearDatabase, dsucsuSysTable=dsucsuSysTable, private=private, dsucsuCfgCommNode=dsucsuCfgCommNode, dsucsuCfgSupAuxFdl=dsucsuCfgSupAuxFdl, dsucsuCfgBrdEntry=dsucsuCfgBrdEntry, tyviewSysFanPSLED=tyviewSysFanPSLED, dsucsuCfgFrmChanIndex=dsucsuCfgFrmChanIndex, dsucsuCfgFrmChanNumDs0=dsucsuCfgFrmChanNumDs0, dsucsuSysType=dsucsuSysType, dsucsuCfgCommSlot=dsucsuCfgCommSlot, dsucsuType=dsucsuType, dsucsuTotalSECs=dsucsuTotalSECs, dsucsuCfgNetTs0=dsucsuCfgNetTs0, dsucsuDiagDteIndex=dsucsuDiagDteIndex, dsucsuDiagPortNode=dsucsuDiagPortNode, tyviewSysTDMLED=tyviewSysTDMLED, dsucsuConnDteRate=dsucsuConnDteRate, tyviewTPInstance=tyviewTPInstance, dsucsuDiagNetLclNetAggLpbk=dsucsuDiagNetLclNetAggLpbk, dsucsuTotalSlot=dsucsuTotalSlot, dsucsuCfgDteChanCtrlSignal=dsucsuCfgDteChanCtrlSignal, dsucsuEventDesSlot=dsucsuEventDesSlot, tyviewTPEventAction=tyviewTPEventAction, dsucsuConnSetStatus=dsucsuConnSetStatus, dsucsuAlarmNode=dsucsuAlarmNode, dsucsuCurrentBPVs=dsucsuCurrentBPVs, tyviewSysComPeerIP=tyviewSysComPeerIP, dsucsuTotalESs=dsucsuTotalESs, dsucsuCfgNetTable=dsucsuCfgNetTable, tyviewDatabaseTable=tyviewDatabaseTable, dsucsuSysNode=dsucsuSysNode, dsucsuCfgMaintDataBits=dsucsuCfgMaintDataBits, tyviewSysComRate=tyviewSysComRate, dsucsuCurrentSESs=dsucsuCurrentSESs, dsucsuDiagFrmTable=dsucsuDiagFrmTable, tyviewTPRecord=tyviewTPRecord, dsucsuTotalEntry=dsucsuTotalEntry)
