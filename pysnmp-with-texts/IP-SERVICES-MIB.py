#
# PySNMP MIB module IP-SERVICES-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/IP-SERVICES-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:55:40 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint")
cjnProtocol, = mibBuilder.importSymbols("Cajun-ROOT", "cjnProtocol")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, Unsigned32, MibIdentifier, ModuleIdentity, Counter32, Bits, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, NotificationType, Integer32, TimeTicks, iso, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Unsigned32", "MibIdentifier", "ModuleIdentity", "Counter32", "Bits", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "NotificationType", "Integer32", "TimeTicks", "iso", "ObjectIdentity")
RowStatus, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "DisplayString")
cjnIpv4Serv = ModuleIdentity((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 5))
if mibBuilder.loadTexts: cjnIpv4Serv.setLastUpdated('9902110000Z')
if mibBuilder.loadTexts: cjnIpv4Serv.setOrganization("Avaya's Concord Technology Center (CTC)")
if mibBuilder.loadTexts: cjnIpv4Serv.setContactInfo('Julie Flannery -- jflannery@avaya.com Lilia Veksler -- lveksler@avaya.com')
if mibBuilder.loadTexts: cjnIpv4Serv.setDescription('Cajun Private IP version 4 services MIB')
cjnIpIRDPGblGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 5, 1))
cjnIpIRDPIfTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 5, 1, 1), )
if mibBuilder.loadTexts: cjnIpIRDPIfTable.setStatus('current')
if mibBuilder.loadTexts: cjnIpIRDPIfTable.setDescription('A list of interface specific IRDP Entries')
cjnIpIRDPIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 5, 1, 1, 1), ).setIndexNames((0, "IP-SERVICES-MIB", "cjnIpIRDPIfIndex"))
if mibBuilder.loadTexts: cjnIpIRDPIfEntry.setStatus('current')
if mibBuilder.loadTexts: cjnIpIRDPIfEntry.setDescription('An cajun IRDP Interface instance ')
cjnIpIRDPIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 5, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnIpIRDPIfIndex.setStatus('current')
if mibBuilder.loadTexts: cjnIpIRDPIfIndex.setDescription("The globally unique identifier for this interface. This number MUST correlate with the IfTable's IfIndex in MIB-II or RFC2233")
cjnIpIfIRDPEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 5, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnIpIfIRDPEnabled.setStatus('current')
if mibBuilder.loadTexts: cjnIpIfIRDPEnabled.setDescription('enables / disables the origination of IGMP Router discovery (IRDP) messages on this interface.')
cjnIpIfIRDPTxType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 5, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("multicast", 1), ("broadcast", 2))).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnIpIfIRDPTxType.setStatus('current')
if mibBuilder.loadTexts: cjnIpIfIRDPTxType.setDescription('Selects the transmission method of IRDP messages from this interface.')
cjnIpIfIRDPPref = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 5, 1, 1, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnIpIfIRDPPref.setStatus('current')
if mibBuilder.loadTexts: cjnIpIfIRDPPref.setDescription('The IRDP Preference Level used in IRDP updates for this interface.')
cjnIpIRDPTimerMax = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 5, 1, 1, 1, 5), Integer32().clone(600)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnIpIRDPTimerMax.setStatus('current')
if mibBuilder.loadTexts: cjnIpIRDPTimerMax.setDescription('Router Discovery Max. Advertisement Interval (sec) ')
cjnIpIRDPTimerMin = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 5, 1, 1, 1, 6), Integer32().clone(450)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnIpIRDPTimerMin.setStatus('current')
if mibBuilder.loadTexts: cjnIpIRDPTimerMin.setDescription('Router Discovery Min. Advertisement Interval (sec) ')
cjnIpIRDPLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 5, 1, 1, 1, 7), Integer32().clone(900)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnIpIRDPLifetime.setStatus('current')
if mibBuilder.loadTexts: cjnIpIRDPLifetime.setDescription('Router Discovery Advertisement Lifetime (sec) ')
cjnIpBootpRelayGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 5, 2))
cjnBootpRelayEnabled = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 5, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnBootpRelayEnabled.setStatus('current')
if mibBuilder.loadTexts: cjnBootpRelayEnabled.setDescription('Accept client requests for an IP address and forwards them to a server. This agent also relays responses from the server to the client.')
cjnBootpRelayTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 5, 2, 2), )
if mibBuilder.loadTexts: cjnBootpRelayTable.setStatus('current')
if mibBuilder.loadTexts: cjnBootpRelayTable.setDescription('A list of Bootp Relay Server Entries')
cjnBootpRelayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 5, 2, 2, 1), ).setIndexNames((0, "IP-SERVICES-MIB", "cjnBootpRelayServAddr"))
if mibBuilder.loadTexts: cjnBootpRelayEntry.setStatus('current')
if mibBuilder.loadTexts: cjnBootpRelayEntry.setDescription('An cajun Bootp Relay instance ')
cjnBootpRelayServAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 5, 2, 2, 1, 1), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnBootpRelayServAddr.setStatus('current')
if mibBuilder.loadTexts: cjnBootpRelayServAddr.setDescription('The identifier the IP address for a bootp server')
cjnBootpRelayRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 5, 2, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnBootpRelayRowStatus.setStatus('current')
if mibBuilder.loadTexts: cjnBootpRelayRowStatus.setDescription('The Status of this entry in the table. Note the available states: active(1), -- Obviously Active. notInService(2) -- Interface configured but disabled. notReady(3), -- Interface NOT configured. createAndGo(4), createAndWait(5) or destroy(6) ')
cjnIpBootpServStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 5, 3))
cjnBtprInReqs = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 5, 3, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnBtprInReqs.setStatus('current')
if mibBuilder.loadTexts: cjnBtprInReqs.setDescription(' ')
cjnBtprInRsps = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 5, 3, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnBtprInRsps.setStatus('current')
if mibBuilder.loadTexts: cjnBtprInRsps.setDescription(' ')
cjnBtprInDiscards = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 5, 3, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnBtprInDiscards.setStatus('current')
if mibBuilder.loadTexts: cjnBtprInDiscards.setDescription(' ')
cjnBtprInHopsExceededs = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 5, 3, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnBtprInHopsExceededs.setStatus('current')
if mibBuilder.loadTexts: cjnBtprInHopsExceededs.setDescription(' ')
cjnBtprOutReqs = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 5, 3, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnBtprOutReqs.setStatus('current')
if mibBuilder.loadTexts: cjnBtprOutReqs.setDescription(' ')
cjnBtprOutRsps = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 5, 3, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnBtprOutRsps.setStatus('current')
if mibBuilder.loadTexts: cjnBtprOutRsps.setDescription(' ')
cjnIpHelperAddressGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 5, 4))
cjnIpHelperAddressTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 5, 4, 1), )
if mibBuilder.loadTexts: cjnIpHelperAddressTable.setStatus('current')
if mibBuilder.loadTexts: cjnIpHelperAddressTable.setDescription('A list of interface specific Helper Address Entries')
cjnIpHelperAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 5, 4, 1, 1), ).setIndexNames((0, "IP-SERVICES-MIB", "cjnIpHelperAddressIfIndex"), (0, "IP-SERVICES-MIB", "cjnIpHelperAddressAddr"))
if mibBuilder.loadTexts: cjnIpHelperAddressEntry.setStatus('current')
if mibBuilder.loadTexts: cjnIpHelperAddressEntry.setDescription('A helper address instance ')
cjnIpHelperAddressIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 5, 4, 1, 1, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnIpHelperAddressIfIndex.setStatus('current')
if mibBuilder.loadTexts: cjnIpHelperAddressIfIndex.setDescription("The globally unique identifier for this interface. This number MUST correlate with the IfTable's IfIndex in MIB-II or RFC2233")
cjnIpHelperAddressAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 5, 4, 1, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnIpHelperAddressAddr.setStatus('current')
if mibBuilder.loadTexts: cjnIpHelperAddressAddr.setDescription('The identifier the IP address for a helper address.')
cjnIpHelperAddressTFTP = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 5, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnIpHelperAddressTFTP.setStatus('current')
if mibBuilder.loadTexts: cjnIpHelperAddressTFTP.setDescription('Enable or disable sending TFTP broadcast to the helper address.')
cjnIpHelperAddressDNS = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 5, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnIpHelperAddressDNS.setStatus('current')
if mibBuilder.loadTexts: cjnIpHelperAddressDNS.setDescription('Enable or disable sending DNS broadcast to the helper address.')
cjnIpHelperAddressTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 5, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnIpHelperAddressTime.setStatus('current')
if mibBuilder.loadTexts: cjnIpHelperAddressTime.setDescription('Enable or disable sending Time broadcast to the helper address.')
cjnIpHelperAddressNetBiosName = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 5, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnIpHelperAddressNetBiosName.setStatus('current')
if mibBuilder.loadTexts: cjnIpHelperAddressNetBiosName.setDescription('Enable or disable sending NetBios Name Service broadcast to the helper address.')
cjnIpHelperAddressNetBiosData = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 5, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnIpHelperAddressNetBiosData.setStatus('current')
if mibBuilder.loadTexts: cjnIpHelperAddressNetBiosData.setDescription('Enable or disable sending NetBios Data broadcast to the helper address.')
cjnIpHelperAddressBootpServ = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 5, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnIpHelperAddressBootpServ.setStatus('current')
if mibBuilder.loadTexts: cjnIpHelperAddressBootpServ.setDescription('Enable or disable sending Bootp Server broadcast to the helper address.')
cjnIpHelperAddressBootpClient = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 5, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnIpHelperAddressBootpClient.setStatus('current')
if mibBuilder.loadTexts: cjnIpHelperAddressBootpClient.setDescription('Enable or disable sending Bootp Client broadcast to the helper address.')
cjnIpHelperAddressTacacs = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 5, 4, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnIpHelperAddressTacacs.setStatus('current')
if mibBuilder.loadTexts: cjnIpHelperAddressTacacs.setDescription('Enable or disable sending Tacacs broadcast to the helper address.')
cjnIpDHCPOption82Group = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 5, 5))
cjnDHCPOpt82Sub1Enabled = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 5, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnDHCPOpt82Sub1Enabled.setStatus('current')
if mibBuilder.loadTexts: cjnDHCPOpt82Sub1Enabled.setDescription('Enable or disable inserting Option 82 Circuit Id information (slot and port numbers) into DHCP packets.')
cjnDHCPOpt82Sub2Enabled = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 5, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnDHCPOpt82Sub2Enabled.setStatus('current')
if mibBuilder.loadTexts: cjnDHCPOpt82Sub2Enabled.setDescription('Enable or disable inserting Option 82 Agent Id information (IP Address and System Name of the switch) into DHCP packets.')
mibBuilder.exportSymbols("IP-SERVICES-MIB", cjnIpIRDPTimerMin=cjnIpIRDPTimerMin, cjnIpHelperAddressTacacs=cjnIpHelperAddressTacacs, cjnIpHelperAddressIfIndex=cjnIpHelperAddressIfIndex, cjnIpIRDPGblGroup=cjnIpIRDPGblGroup, cjnBtprInReqs=cjnBtprInReqs, cjnIpIfIRDPPref=cjnIpIfIRDPPref, cjnBootpRelayTable=cjnBootpRelayTable, cjnIpHelperAddressAddr=cjnIpHelperAddressAddr, cjnIpIRDPIfTable=cjnIpIRDPIfTable, cjnIpIRDPIfEntry=cjnIpIRDPIfEntry, cjnBtprInHopsExceededs=cjnBtprInHopsExceededs, cjnBootpRelayEntry=cjnBootpRelayEntry, cjnBootpRelayServAddr=cjnBootpRelayServAddr, cjnIpBootpRelayGroup=cjnIpBootpRelayGroup, cjnIpDHCPOption82Group=cjnIpDHCPOption82Group, cjnBtprOutReqs=cjnBtprOutReqs, cjnBtprOutRsps=cjnBtprOutRsps, cjnIpIRDPLifetime=cjnIpIRDPLifetime, cjnIpIfIRDPEnabled=cjnIpIfIRDPEnabled, cjnIpHelperAddressDNS=cjnIpHelperAddressDNS, cjnIpHelperAddressBootpClient=cjnIpHelperAddressBootpClient, cjnIpBootpServStats=cjnIpBootpServStats, cjnDHCPOpt82Sub1Enabled=cjnDHCPOpt82Sub1Enabled, cjnIpHelperAddressTable=cjnIpHelperAddressTable, cjnBtprInRsps=cjnBtprInRsps, cjnIpIRDPIfIndex=cjnIpIRDPIfIndex, cjnIpHelperAddressGroup=cjnIpHelperAddressGroup, cjnIpHelperAddressNetBiosData=cjnIpHelperAddressNetBiosData, cjnBtprInDiscards=cjnBtprInDiscards, PYSNMP_MODULE_ID=cjnIpv4Serv, cjnIpHelperAddressNetBiosName=cjnIpHelperAddressNetBiosName, cjnIpv4Serv=cjnIpv4Serv, cjnBootpRelayRowStatus=cjnBootpRelayRowStatus, cjnIpHelperAddressBootpServ=cjnIpHelperAddressBootpServ, cjnDHCPOpt82Sub2Enabled=cjnDHCPOpt82Sub2Enabled, cjnIpHelperAddressTFTP=cjnIpHelperAddressTFTP, cjnIpHelperAddressTime=cjnIpHelperAddressTime, cjnIpIfIRDPTxType=cjnIpIfIRDPTxType, cjnIpIRDPTimerMax=cjnIpIRDPTimerMax, cjnIpHelperAddressEntry=cjnIpHelperAddressEntry, cjnBootpRelayEnabled=cjnBootpRelayEnabled)
