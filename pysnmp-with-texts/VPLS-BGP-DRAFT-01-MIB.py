#
# PySNMP MIB module VPLS-BGP-DRAFT-01-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/VPLS-BGP-DRAFT-01-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:35:18 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint")
jnxExperiment, = mibBuilder.importSymbols("JUNIPER-SMI", "jnxExperiment")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Bits, NotificationType, ModuleIdentity, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, transmission, TimeTicks, Counter32, Counter64, MibIdentifier, IpAddress, ObjectIdentity, iso, Unsigned32, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "NotificationType", "ModuleIdentity", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "transmission", "TimeTicks", "Counter32", "Counter64", "MibIdentifier", "IpAddress", "ObjectIdentity", "iso", "Unsigned32", "Integer32")
StorageType, DisplayString, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "StorageType", "DisplayString", "TextualConvention", "RowStatus")
jnxVplsConfigIndex, jnxVplsPwBindIndex = mibBuilder.importSymbols("VPLS-GENERIC-DRAFT-01-MIB", "jnxVplsConfigIndex", "jnxVplsPwBindIndex")
jnxVplsBgpDraft01MIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 5, 10))
jnxVplsBgpDraft01MIB.setRevisions(('2006-12-06 12:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: jnxVplsBgpDraft01MIB.setRevisionsDescriptions(('Initial version published as part of RFC YYYY.',))
if mibBuilder.loadTexts: jnxVplsBgpDraft01MIB.setLastUpdated('200612061200Z')
if mibBuilder.loadTexts: jnxVplsBgpDraft01MIB.setOrganization('Layer 2 Virtual Private Networks (L2VPN) Working Group')
if mibBuilder.loadTexts: jnxVplsBgpDraft01MIB.setContactInfo(' V. J. Shah Email: vshah@juniper.net The L2VPN Working Group (email distribution l2vpn@ietf.org, http://www.ietf.org/html.charters/l2vpn-charter.html) ')
if mibBuilder.loadTexts: jnxVplsBgpDraft01MIB.setDescription('Copyright (C) The IETF Trust (2010). The initial version of this MIB module was published in RFC XXXX. -- RFC Editor: Please replace XXXX with RFC number & remove -- this note. For full legal notices see the RFC itself or see: http://www.ietf.org/copyrights/ianamib.html This MIB module contains managed object definitions for BGP signalled Virtual Private LAN Services as in [RFC4761] This MIB module enables the use of any underlying PseudoWire network. ')
jnxVplsBgpObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 5, 10, 1))
jnxVplsBgpConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 5, 10, 2))
jnxVplsBgpConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 5, 10, 1, 1), )
if mibBuilder.loadTexts: jnxVplsBgpConfigTable.setStatus('current')
if mibBuilder.loadTexts: jnxVplsBgpConfigTable.setDescription('This table specifies information for configuring and monitoring BGP specific parameters for Virtual Private Lan Services(VPLS).')
jnxVplsBgpConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 5, 10, 1, 1, 1), ).setIndexNames((0, "VPLS-GENERIC-DRAFT-01-MIB", "jnxVplsConfigIndex"))
if mibBuilder.loadTexts: jnxVplsBgpConfigEntry.setStatus('current')
if mibBuilder.loadTexts: jnxVplsBgpConfigEntry.setDescription('A row in this table represents BGP specific information for Virtual Private Lan Service(VPLS) in a packet network. It is indexed by jnxVplsConfigIndex, which uniquely identifies a single instance of a VPLS service. A row is automatically created when a VPLS service is configured using BGP signalling. None of the read-create objects values can be changed when jnxVplsRowStatus is in the active(1) state. Changes are allowed when the jnxVplsRowStatus is in notInService(2) or notReady(3) states only. If the operator need to change one of the values for an active row the jnxVplsConfigRowStatus should be first changed to notInService(2), the objects may be changed now, and later to active(1) in order to re-initiate the signaling process with the new values in effect. ')
jnxVplsBgpConfigVERangeSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 10, 1, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVplsBgpConfigVERangeSize.setStatus('current')
if mibBuilder.loadTexts: jnxVplsBgpConfigVERangeSize.setDescription('Specifies the size of the range of VE ids in this VPLS service. This number controls the size of the label block advertised for this VE by the PE. A value of 0 indicates that the range is not configured and the PE derives the range value from received advertisements from other PEs.')
jnxVplsBgpVETable = MibTable((1, 3, 6, 1, 4, 1, 2636, 5, 10, 1, 2), )
if mibBuilder.loadTexts: jnxVplsBgpVETable.setStatus('current')
if mibBuilder.loadTexts: jnxVplsBgpVETable.setDescription('This table associates VPLS Edge devices to a VPLS service')
jnxVplsBgpVEEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 5, 10, 1, 2, 1), ).setIndexNames((0, "VPLS-GENERIC-DRAFT-01-MIB", "jnxVplsConfigIndex"), (0, "VPLS-BGP-DRAFT-01-MIB", "jnxVplsBgpVEId"))
if mibBuilder.loadTexts: jnxVplsBgpVEEntry.setStatus('current')
if mibBuilder.loadTexts: jnxVplsBgpVEEntry.setDescription('An entry in this table is created for each VE Id configured on a PE for a particular VPLS service instance.')
jnxVplsBgpVEId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 10, 1, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: jnxVplsBgpVEId.setStatus('current')
if mibBuilder.loadTexts: jnxVplsBgpVEId.setDescription('A secondary index identifying a VE within an instance of a VPLS service.')
jnxVplsBgpVEName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 10, 1, 2, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVplsBgpVEName.setStatus('current')
if mibBuilder.loadTexts: jnxVplsBgpVEName.setDescription('Descriptive name for the site or u-PE assciated with this VE Id.')
jnxVplsBgpVEPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 10, 1, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVplsBgpVEPreference.setStatus('current')
if mibBuilder.loadTexts: jnxVplsBgpVEPreference.setDescription('Specifies the preference of the VE Id on this PE if the site is multi-homed and VE Id is re-used.')
jnxVplsBgpVERowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 10, 1, 2, 1, 5), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVplsBgpVERowStatus.setStatus('current')
if mibBuilder.loadTexts: jnxVplsBgpVERowStatus.setDescription('This variable is used to create, modify, and/or delete a row in this table. When a row in this table is in active(1) state, no objects in that row can be modified except jnxVplsBgpSiteRowStatus.')
jnxVplsBgpVEStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 10, 1, 2, 1, 6), StorageType().clone('volatile')).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVplsBgpVEStorageType.setStatus('current')
if mibBuilder.loadTexts: jnxVplsBgpVEStorageType.setDescription('This variable indicates the storage type for this row.')
jnxVplsBgpPwBindTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 5, 10, 1, 3), )
if mibBuilder.loadTexts: jnxVplsBgpPwBindTable.setStatus('current')
if mibBuilder.loadTexts: jnxVplsBgpPwBindTable.setDescription('This table provides BGP specific information for an association between a VPLS service and the corresponding Pseudo Wires. A service can have more than one Pseudo Wire association. Pseudo Wires are defined in the pwTable.')
jnxVplsBgpPwBindEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 5, 10, 1, 3, 1), ).setIndexNames((0, "VPLS-GENERIC-DRAFT-01-MIB", "jnxVplsConfigIndex"), (0, "VPLS-GENERIC-DRAFT-01-MIB", "jnxVplsPwBindIndex"))
if mibBuilder.loadTexts: jnxVplsBgpPwBindEntry.setStatus('current')
if mibBuilder.loadTexts: jnxVplsBgpPwBindEntry.setDescription('Each row represents an association between a VPLS instance and one or more Pseudo Wires defined in the pwTable. Each index is unique in describing an entry in this table. However both indexes are required to define the one to many association of service to pseudowire. An entry in this table in instantiated only when BGP signalling is used to configure VPLS service. Each entry in this table provides BGP specific information for the VPlS represented by jnxVplsConfigIndex.')
jnxVplsBgpPwBindLocalVEId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 10, 1, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVplsBgpPwBindLocalVEId.setStatus('current')
if mibBuilder.loadTexts: jnxVplsBgpPwBindLocalVEId.setDescription('Identifies the local VE that this Pseudo Wire is associated with.')
jnxVplsBgpPwBindRemoteVEId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 10, 1, 3, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVplsBgpPwBindRemoteVEId.setStatus('current')
if mibBuilder.loadTexts: jnxVplsBgpPwBindRemoteVEId.setDescription('Identifies the remote VE that this Pseudo Wire is associated with.')
mibBuilder.exportSymbols("VPLS-BGP-DRAFT-01-MIB", jnxVplsBgpConfigTable=jnxVplsBgpConfigTable, PYSNMP_MODULE_ID=jnxVplsBgpDraft01MIB, jnxVplsBgpVEId=jnxVplsBgpVEId, jnxVplsBgpVEPreference=jnxVplsBgpVEPreference, jnxVplsBgpPwBindTable=jnxVplsBgpPwBindTable, jnxVplsBgpPwBindEntry=jnxVplsBgpPwBindEntry, jnxVplsBgpVEStorageType=jnxVplsBgpVEStorageType, jnxVplsBgpConfigEntry=jnxVplsBgpConfigEntry, jnxVplsBgpObjects=jnxVplsBgpObjects, jnxVplsBgpConfigVERangeSize=jnxVplsBgpConfigVERangeSize, jnxVplsBgpVEEntry=jnxVplsBgpVEEntry, jnxVplsBgpVEName=jnxVplsBgpVEName, jnxVplsBgpPwBindLocalVEId=jnxVplsBgpPwBindLocalVEId, jnxVplsBgpDraft01MIB=jnxVplsBgpDraft01MIB, jnxVplsBgpVERowStatus=jnxVplsBgpVERowStatus, jnxVplsBgpVETable=jnxVplsBgpVETable, jnxVplsBgpConformance=jnxVplsBgpConformance, jnxVplsBgpPwBindRemoteVEId=jnxVplsBgpPwBindRemoteVEId)
