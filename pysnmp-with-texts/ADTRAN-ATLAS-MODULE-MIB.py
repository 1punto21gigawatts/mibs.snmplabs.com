#
# PySNMP MIB module ADTRAN-ATLAS-MODULE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ADTRAN-ATLAS-MODULE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:14:30 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
adATLASUnitFPStatus, adATLASUnitSlotAddress, adATLASUnitPortAddress = mibBuilder.importSymbols("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitFPStatus", "adATLASUnitSlotAddress", "adATLASUnitPortAddress")
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, enterprises, Counter64, Gauge32, NotificationType, Bits, TimeTicks, ObjectIdentity, ModuleIdentity, IpAddress, Integer32, Unsigned32, MibIdentifier, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "enterprises", "Counter64", "Gauge32", "NotificationType", "Bits", "TimeTicks", "ObjectIdentity", "ModuleIdentity", "IpAddress", "Integer32", "Unsigned32", "MibIdentifier", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
adtran = MibIdentifier((1, 3, 6, 1, 4, 1, 664))
adMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 664, 2))
adATLASmg = MibIdentifier((1, 3, 6, 1, 4, 1, 664, 2, 154))
adGenATLASmg = MibIdentifier((1, 3, 6, 1, 4, 1, 664, 2, 154, 1))
adATLASModulemg = MibIdentifier((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 6))
adATLASModuleInfoNumber = MibScalar((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adATLASModuleInfoNumber.setStatus('mandatory')
if mibBuilder.loadTexts: adATLASModuleInfoNumber.setDescription('This value indicates the number of entries found in the Atlas Module Information Table and corresponds to the number of physical slots in the particular Atlas product.')
adATLASModuleInfoTable = MibTable((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 6, 2), )
if mibBuilder.loadTexts: adATLASModuleInfoTable.setStatus('mandatory')
if mibBuilder.loadTexts: adATLASModuleInfoTable.setDescription('The Atlas Module Information Table')
adATLASModuleInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 6, 2, 1), ).setIndexNames((0, "ADTRAN-ATLAS-MODULE-MIB", "adATLASModuleInfoIndex"))
if mibBuilder.loadTexts: adATLASModuleInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: adATLASModuleInfoEntry.setDescription('An entry in the Atlas Module Information Table')
adATLASModuleInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adATLASModuleInfoIndex.setStatus('mandatory')
if mibBuilder.loadTexts: adATLASModuleInfoIndex.setDescription("An index into the Atlas Module Information Table. This variable corresponds to the module's slot number.")
adATLASModuleInfoNumIfs = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 6, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adATLASModuleInfoNumIfs.setStatus('mandatory')
if mibBuilder.loadTexts: adATLASModuleInfoNumIfs.setDescription('The number of physical interfaces (i.e. ports) on the module.')
adATLASModuleInfoNumRsrcs = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 6, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adATLASModuleInfoNumRsrcs.setStatus('mandatory')
if mibBuilder.loadTexts: adATLASModuleInfoNumRsrcs.setDescription('The total number of resources (e.g. number of bonding sessions in an IMUX module) on the module.')
adATLASModuleInfoOID = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 6, 2, 1, 4), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adATLASModuleInfoOID.setStatus('mandatory')
if mibBuilder.loadTexts: adATLASModuleInfoOID.setDescription('The OID that uniquely identifies the specific module.')
adATLASModuleInfoPartNum = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 6, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adATLASModuleInfoPartNum.setStatus('mandatory')
if mibBuilder.loadTexts: adATLASModuleInfoPartNum.setDescription('The ADTRAN part number of the module.')
adATLASModuleInfoSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 6, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adATLASModuleInfoSerialNum.setStatus('mandatory')
if mibBuilder.loadTexts: adATLASModuleInfoSerialNum.setDescription('The serial number of the module.')
adATLASModuleInfoHardwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 6, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adATLASModuleInfoHardwareRev.setStatus('mandatory')
if mibBuilder.loadTexts: adATLASModuleInfoHardwareRev.setDescription('The hardware revision of the module.')
adATLASModuleInfoFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 6, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adATLASModuleInfoFirmwareRev.setStatus('mandatory')
if mibBuilder.loadTexts: adATLASModuleInfoFirmwareRev.setDescription('The firmware revision of the module.')
adATLASModuleInfoState = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 6, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adATLASModuleInfoState.setStatus('mandatory')
if mibBuilder.loadTexts: adATLASModuleInfoState.setDescription('The operational state of the module. It can be set to either Online or Offline. When a module is taken Offline, it is no longer considered to be an available resource. This setting may be useful in system troubleshooting.')
adATLASModuleInfoStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 6, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("online", 1), ("offline", 2), ("noResponse", 3), ("unResponsiveOffline", 4), ("notReady", 5), ("restarting", 6), ("notSupported", 7), ("standby", 8), ("empty", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adATLASModuleInfoStatus.setStatus('mandatory')
if mibBuilder.loadTexts: adATLASModuleInfoStatus.setDescription('The hardware status of the module.')
adATLASModuleInfoFPStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 6, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adATLASModuleInfoFPStatus.setStatus('mandatory')
if mibBuilder.loadTexts: adATLASModuleInfoFPStatus.setDescription("A bit-encoded variable that indicates the front panel status of the module. It is encoded as follows: OFF 0x00 OK 0x01 ONLINE 0x02 TESTING 0x04 FLASH DOWNLOAD 0x08 ERROR 0x10 ALARM 0x20 STANDBY 0x40 WARN 0x80 Note: Multiple bits may be set concurrently, based on the module's current state.")
adATLASModuleOffline = NotificationType((1, 3, 6, 1, 4, 1, 664, 2, 154) + (0,15400600)).setObjects(("ADTRAN-ATLAS-MODULE-MIB", "adATLASModuleInfoIndex"), ("ADTRAN-ATLAS-MODULE-MIB", "adATLASModuleInfoFPStatus"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitFPStatus"))
if mibBuilder.loadTexts: adATLASModuleOffline.setDescription('This trap indicates a module is offline.')
adATLASModuleOnline = NotificationType((1, 3, 6, 1, 4, 1, 664, 2, 154) + (0,15400601)).setObjects(("ADTRAN-ATLAS-MODULE-MIB", "adATLASModuleInfoIndex"), ("ADTRAN-ATLAS-MODULE-MIB", "adATLASModuleInfoFPStatus"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitFPStatus"))
if mibBuilder.loadTexts: adATLASModuleOnline.setDescription('This trap indicates a module is online.')
adATLASCbuBackupAttempt = NotificationType((1, 3, 6, 1, 4, 1, 664, 2, 154) + (0,15400602)).setObjects(("IF-MIB", "ifIndex"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitSlotAddress"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitPortAddress"), ("ADTRAN-ATLAS-MODULE-MIB", "adATLASModuleInfoFPStatus"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitFPStatus"))
if mibBuilder.loadTexts: adATLASCbuBackupAttempt.setDescription('This trap indicates an endpoint has detected a failure and is attempting a backup call.')
adATLASCbuBackupAttemptFailed = NotificationType((1, 3, 6, 1, 4, 1, 664, 2, 154) + (0,15400603)).setObjects(("IF-MIB", "ifIndex"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitSlotAddress"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitPortAddress"), ("ADTRAN-ATLAS-MODULE-MIB", "adATLASModuleInfoFPStatus"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitFPStatus"))
if mibBuilder.loadTexts: adATLASCbuBackupAttemptFailed.setDescription('This trap indicates a backup call has failed.')
adATLASCbuBackupActive = NotificationType((1, 3, 6, 1, 4, 1, 664, 2, 154) + (0,15400604)).setObjects(("IF-MIB", "ifIndex"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitSlotAddress"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitPortAddress"), ("ADTRAN-ATLAS-MODULE-MIB", "adATLASModuleInfoFPStatus"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitFPStatus"))
if mibBuilder.loadTexts: adATLASCbuBackupActive.setDescription('This trap indicates a backup call has connected.')
adATLASCbuPrimaryRestored = NotificationType((1, 3, 6, 1, 4, 1, 664, 2, 154) + (0,15400605)).setObjects(("IF-MIB", "ifIndex"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitSlotAddress"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitPortAddress"), ("ADTRAN-ATLAS-MODULE-MIB", "adATLASModuleInfoFPStatus"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitFPStatus"))
if mibBuilder.loadTexts: adATLASCbuPrimaryRestored.setDescription('This trap indicates an endpoint has come out of backup.')
adATLASCbuTestCallOriginated = NotificationType((1, 3, 6, 1, 4, 1, 664, 2, 154) + (0,15400606)).setObjects(("IF-MIB", "ifIndex"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitSlotAddress"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitPortAddress"), ("ADTRAN-ATLAS-MODULE-MIB", "adATLASModuleInfoFPStatus"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitFPStatus"))
if mibBuilder.loadTexts: adATLASCbuTestCallOriginated.setDescription('This trap indicates an endpoint has originated a test call.')
adATLASCbuTestCallConnected = NotificationType((1, 3, 6, 1, 4, 1, 664, 2, 154) + (0,15400607)).setObjects(("IF-MIB", "ifIndex"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitSlotAddress"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitPortAddress"), ("ADTRAN-ATLAS-MODULE-MIB", "adATLASModuleInfoFPStatus"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitFPStatus"))
if mibBuilder.loadTexts: adATLASCbuTestCallConnected.setDescription("This trap indicates an endpoint's test call has connected.")
adATLASCbuTestCallPassed = NotificationType((1, 3, 6, 1, 4, 1, 664, 2, 154) + (0,15400608)).setObjects(("IF-MIB", "ifIndex"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitSlotAddress"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitPortAddress"), ("ADTRAN-ATLAS-MODULE-MIB", "adATLASModuleInfoFPStatus"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitFPStatus"))
if mibBuilder.loadTexts: adATLASCbuTestCallPassed.setDescription("This trap indicates an endpoint's test call has passed.")
adATLASCbuTestCallFailed = NotificationType((1, 3, 6, 1, 4, 1, 664, 2, 154) + (0,15400609)).setObjects(("IF-MIB", "ifIndex"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitSlotAddress"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitPortAddress"), ("ADTRAN-ATLAS-MODULE-MIB", "adATLASModuleInfoFPStatus"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitFPStatus"))
if mibBuilder.loadTexts: adATLASCbuTestCallFailed.setDescription("This trap indicates an endpoint's test call has failed.")
mibBuilder.exportSymbols("ADTRAN-ATLAS-MODULE-MIB", adATLASModulemg=adATLASModulemg, adATLASCbuPrimaryRestored=adATLASCbuPrimaryRestored, adATLASModuleInfoNumRsrcs=adATLASModuleInfoNumRsrcs, adATLASModuleInfoState=adATLASModuleInfoState, adATLASCbuTestCallPassed=adATLASCbuTestCallPassed, adATLASModuleInfoNumber=adATLASModuleInfoNumber, adATLASModuleInfoStatus=adATLASModuleInfoStatus, adATLASCbuBackupAttemptFailed=adATLASCbuBackupAttemptFailed, adATLASModuleInfoPartNum=adATLASModuleInfoPartNum, adATLASModuleInfoSerialNum=adATLASModuleInfoSerialNum, adATLASModuleInfoOID=adATLASModuleInfoOID, adATLASCbuBackupAttempt=adATLASCbuBackupAttempt, adATLASModuleInfoTable=adATLASModuleInfoTable, adATLASModuleInfoFPStatus=adATLASModuleInfoFPStatus, adtran=adtran, adATLASModuleInfoEntry=adATLASModuleInfoEntry, adMgmt=adMgmt, adATLASCbuBackupActive=adATLASCbuBackupActive, adATLASModuleInfoHardwareRev=adATLASModuleInfoHardwareRev, adGenATLASmg=adGenATLASmg, adATLASmg=adATLASmg, adATLASCbuTestCallConnected=adATLASCbuTestCallConnected, adATLASModuleInfoIndex=adATLASModuleInfoIndex, adATLASModuleInfoNumIfs=adATLASModuleInfoNumIfs, adATLASCbuTestCallOriginated=adATLASCbuTestCallOriginated, adATLASModuleInfoFirmwareRev=adATLASModuleInfoFirmwareRev, adATLASModuleOnline=adATLASModuleOnline, adATLASCbuTestCallFailed=adATLASCbuTestCallFailed, adATLASModuleOffline=adATLASModuleOffline)
