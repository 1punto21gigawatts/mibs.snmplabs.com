#
# PySNMP MIB module SNA-LLC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SNA-LLC-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:07:57 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Integer32, Counter32, experimental, Counter64, NotificationType, Gauge32, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, iso, ModuleIdentity, ObjectIdentity, TimeTicks, MibIdentifier, NotificationType, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Counter32", "experimental", "Counter64", "NotificationType", "Gauge32", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "iso", "ModuleIdentity", "ObjectIdentity", "TimeTicks", "MibIdentifier", "NotificationType", "IpAddress")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC-v1", "DisplayString", "RowStatus")
snaDLCexp = MibIdentifier((1, 3, 6, 1, 3, 51))
llc = MibIdentifier((1, 3, 6, 1, 3, 51, 1))
llcPortGroup = MibIdentifier((1, 3, 6, 1, 3, 51, 1, 1))
llcSapGroup = MibIdentifier((1, 3, 6, 1, 3, 51, 1, 2))
llcCcGroup = MibIdentifier((1, 3, 6, 1, 3, 51, 1, 3))
llcTraps = MibIdentifier((1, 3, 6, 1, 3, 51, 1, 4))
llcConformance = MibIdentifier((1, 3, 6, 1, 3, 51, 1, 5))
llcCompliances = MibIdentifier((1, 3, 6, 1, 3, 51, 1, 5, 1))
llcGroups = MibIdentifier((1, 3, 6, 1, 3, 51, 1, 5, 2))
llcCoreGroups = MibIdentifier((1, 3, 6, 1, 3, 51, 1, 5, 2, 1))
llcPortAdminTable = MibTable((1, 3, 6, 1, 3, 51, 1, 1, 1), )
if mibBuilder.loadTexts: llcPortAdminTable.setStatus('mandatory')
if mibBuilder.loadTexts: llcPortAdminTable.setDescription('This table contains objects that can be changed to manage an LLC port. Changing one of these parameters may take effect in the operating port immediately or may wait until the interface is restarted depending on the details of the implementation. Most of the objects in this read-write table have corresponding read-only objects in the llcPortOperTable that return the current operating value. The operating values may be different from these configured values if a configured parameter was changed after the interface was started.')
llcPortAdminEntry = MibTableRow((1, 3, 6, 1, 3, 51, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: llcPortAdminEntry.setStatus('mandatory')
if mibBuilder.loadTexts: llcPortAdminEntry.setDescription('A list of configured values for an LLC port.')
llcPortAdminName = MibTableColumn((1, 3, 6, 1, 3, 51, 1, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcPortAdminName.setStatus('mandatory')
if mibBuilder.loadTexts: llcPortAdminName.setDescription('An octet string that defines the physical port to which this interface is assigned. It has implementation-specific significance. Its value shall be unique within the administered system. It must contain only ASCII printable characters. Should an implementation choose to accept a write operation for this object, it causes the logical port definition associated with the table instance to be moved to a different physical port. A write operation shall not take effect until the port is cycled inactive.')
llcPortAdminState = MibTableColumn((1, 3, 6, 1, 3, 51, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcPortAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: llcPortAdminState.setDescription('This parameter controls the desired state of the LLC protocol for this interface.')
llcPortAdminMaxIPDUOctetsSend = MibTableColumn((1, 3, 6, 1, 3, 51, 1, 1, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcPortAdminMaxIPDUOctetsSend.setStatus('mandatory')
if mibBuilder.loadTexts: llcPortAdminMaxIPDUOctetsSend.setDescription("This object denotes the default maximum I PDU size, in octets, that LLCs on this port may send to their remote LLC partners. This count is referred to as 'N1' in the IEEE 802.2 specification [??]. This port default value may be overridden by a non-zero SAP default value in the llcSapAdminMaxIPDUOctetsSend object or by a non-zero value in the llcCcAdminMaxIPDUOctetsSend object. At connection setup, the remote LLC may send, using an XID frame, the maximum I PDU size which it is prepared to receive. If so, an implementation may choose to override the administered maximum PDU size with the dynamically learned value and should reflect this in the llcCcOperMaxIPDUOctetsSend object for the connection component. The I PDU size includes all octets in a frame, excluding framing characters, the MAC header and link link header.")
llcPortAdminMaxIPDUOctetsRcv = MibTableColumn((1, 3, 6, 1, 3, 51, 1, 1, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcPortAdminMaxIPDUOctetsRcv.setStatus('mandatory')
if mibBuilder.loadTexts: llcPortAdminMaxIPDUOctetsRcv.setDescription("This object denotes the default maximum I PDU size, in octets, that LLCs on this port can expect to receive from their remote LLC partners. This count is referred to as 'N1' in the IEEE 802.2 specification [??] This port default value may be overridden by a non-zero SAP default value in the llcSapAdminMaxIPDUOctetsRcv object or by a non-zero value in the llcCcAdminMaxIPDUOctetsRcvd object. At connection setup, an implementation may choose to send this value to the remote LLC, using an XID frame. The I PDU size includes all octets in a frame with the exception of the framing characters, the MAC header and the link header.")
llcPortAdminMaxUnackedIPDUsSend = MibTableColumn((1, 3, 6, 1, 3, 51, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcPortAdminMaxUnackedIPDUsSend.setStatus('mandatory')
if mibBuilder.loadTexts: llcPortAdminMaxUnackedIPDUsSend.setDescription("This object denotes the default maximum consequetive unacknowledged I PDU frames that LLCs on this port may send to their remote LLC partners. This count is referred to as 'k' in the IEEE 802.2 specification [??]. This port default value may be overridden by a non-zero SAP default value in the llcSapAdminMaxUnackedIPDUsSend object or by a non-zero value in the llcCcAdminMaxUnackedIPDUsSend object. At connection setup, the remote LLC may send, using an XID frame, the maximum number of unacknowledged I PDUs which it is prepared to receive. If so, an implementation may choose to override the administered maximum number of unacknowledged PDUs with the dynamicly learned value and should reflect this in the llcCcOperMaxUnackedIPDUsSend object for the connection component.")
llcPortAdminMaxUnackedIPDUsRcv = MibTableColumn((1, 3, 6, 1, 3, 51, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcPortAdminMaxUnackedIPDUsRcv.setStatus('mandatory')
if mibBuilder.loadTexts: llcPortAdminMaxUnackedIPDUsRcv.setDescription("This object denotes the default maximum number of unacknowledged I PDUs that LLCs on this port can expect to receive from their remote LLC partners. This count is referred to as 'k' in the IEEE 802.2 specification [??]. This port default value may be overridden by a non-zero SAP default value in the llcSapAdminMaxUnackedIPDUsRcv object or by a non-zero value in the llcCcAdminMaxUnackedIPDUsRcvd object. At connection setup, an implementation may choose to send this value to the remote LLC, using an XID frame.")
llcPortAdminMaxRetransmits = MibTableColumn((1, 3, 6, 1, 3, 51, 1, 1, 1, 1, 7), Integer32().clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcPortAdminMaxRetransmits.setStatus('mandatory')
if mibBuilder.loadTexts: llcPortAdminMaxRetransmits.setDescription("This object denotes the default value for the maximum number of times which LLCs on this port shall retry a PDU following the expiration of the acknowledgement timer, the P-bit timer or the reject timer. When these retries are exhausted, the link shall be declared inactive. This count is referred to as 'N2' in the IEEE 802.2 specification [??]. This port default value may be overridden by a non-zero SAP default value in the llcSapAdminMaxretransmits object or by a non-zero value in the llcCcAdminMaxRetransmits object.")
llcPortAdminAckTimer = MibTableColumn((1, 3, 6, 1, 3, 51, 1, 1, 1, 1, 8), TimeTicks().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcPortAdminAckTimer.setStatus('mandatory')
if mibBuilder.loadTexts: llcPortAdminAckTimer.setDescription('This object denotes the default value for the time interval during which the LLCs on this port shall expect to receive either: 1) an acknowledgement to one or more outstanding I PDUs. or 2) a response PDU to an unnumbered command PDU. The expiration of this timer shall cause the frame unacknowledged frames to be retransmitted (up to N2 times). alue in the llcSapAdminAckTimer object or by a non-zero value in the llcCcAdminAckTimer object.')
llcPortAdminPbitTimer = MibTableColumn((1, 3, 6, 1, 3, 51, 1, 1, 1, 1, 9), TimeTicks().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcPortAdminPbitTimer.setStatus('mandatory')
if mibBuilder.loadTexts: llcPortAdminPbitTimer.setDescription("This object denotes the default value for the time interval during which the LLCs on this port shall expect to receive a PDU with the F bit set to '1' in response to a Type 2 command with the P bit set to '1'. The expiration of this timer shall cause the command with the poll bit to be retransmitted (up to N2 times). This port default value may be overridden by a non-zero SAP default value in the llcSapAdminPbitTimer object or by a non-zero value in the llcCcAdminPbitTimer object.")
llcPortAdminRejTimer = MibTableColumn((1, 3, 6, 1, 3, 51, 1, 1, 1, 1, 10), TimeTicks().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcPortAdminRejTimer.setStatus('mandatory')
if mibBuilder.loadTexts: llcPortAdminRejTimer.setDescription('This object denotes the default value for the time interval during which the LLCs on this port shall expect to receive a reply to a REJ PDU. The expiration of this timer shall cause the REJ PDU to be retransmitted (up to N2 times). This port default value may be overridden by a non-zero SAP default value in the llcSapAdminRejTimer object or by a non-zero value in the llcCcAdminRejTimer object.')
llcPortAdminBusyTimer = MibTableColumn((1, 3, 6, 1, 3, 51, 1, 1, 1, 1, 11), TimeTicks().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcPortAdminBusyTimer.setStatus('mandatory')
if mibBuilder.loadTexts: llcPortAdminBusyTimer.setDescription('This object denotes the default value for the time interval during which the LLCs on this port shall expect to receive an indication that a busy condition at the remote LLC has cleared. The expiration of this timer shall cause the link to be declared inactive. This port default value may be overridden by a non-zero SAP default value in the llcSapAdminBusyTimer object or by a non-zero value in the llcCcAdminBusyTimer object.')
llcPortAdminInactTimer = MibTableColumn((1, 3, 6, 1, 3, 51, 1, 1, 1, 1, 12), TimeTicks().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcPortAdminInactTimer.setStatus('mandatory')
if mibBuilder.loadTexts: llcPortAdminInactTimer.setDescription("This object denotes the default value for the time interval during which the LLCs on this port shall expect to receive any PDU from the remote LLC. This function is not described in the IEEE 802.2 specification [??] but is widely implemented. The expiration of this timer shall cause the local LLC to send a PDU to the remote LLC with the P bit set to '1'. This port default value may be overridden by a non-zero SAP default value in the llcSapAdminInactTimer object or by a non-zero value in the llcCcAdminInactTimer object. Any value for this object less than or equal to the acknowledgement timer shall mean that the timer is not used.")
llcPortAdminDelayAckCount = MibTableColumn((1, 3, 6, 1, 3, 51, 1, 1, 1, 1, 13), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcPortAdminDelayAckCount.setStatus('mandatory')
if mibBuilder.loadTexts: llcPortAdminDelayAckCount.setDescription('This object denotes the default value for the maximum number of consequetive I PDUs which the LLCs on this port shall receive during the interval defined by llcCcOperDelayTimertime without sending an immediate acknowledgement. This must be less than or equal to the value of llcCcOperMaxUnackIPDURcv. This function is not described in the IEEE 802.2 specification [??] but is widely implemented. This port default value may be overridden by a non-zero SAP default value in the llcSapAdminDelayAckCount object or by a non-zero value in the llcCcAdminDelayCount object. A value of one indicates that acknowledgments will be sent immediately and that the value of llcPortAdminDelayAckTimer shall be ignored.')
llcPortAdminDelayAckTimer = MibTableColumn((1, 3, 6, 1, 3, 51, 1, 1, 1, 1, 14), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcPortAdminDelayAckTimer.setStatus('mandatory')
if mibBuilder.loadTexts: llcPortAdminDelayAckTimer.setDescription('This object denotes the default value for the time interval during which the LLCs on this port shall delay acknowledgment of one or more I PDUs (up to the value of llcCcOperDelayAckCount). This function is not described in the IEEE 802.2 specification [??] but is widely implemented. The expiration of this timer shall cause the local LLC to acknowledge all unacknowledged I PDUs. This object is associated with the llcSapAdminDelayAckCount object and is only defined if that object has a value greater than one.')
llcPortAdminSimRim = MibTableColumn((1, 3, 6, 1, 3, 51, 1, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcPortAdminSimRim.setStatus('mandatory')
if mibBuilder.loadTexts: llcPortAdminSimRim.setDescription('This object controls the support for transmission and receipt of SIM and RIM control frames for this port.')
llcPortOperTable = MibTable((1, 3, 6, 1, 3, 51, 1, 1, 2), )
if mibBuilder.loadTexts: llcPortOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: llcPortOperTable.setDescription('This table contains current LLC port parameters. Many of these objects have corresponding objects inthe llcPortAdminTable.')
llcPortOperEntry = MibTableRow((1, 3, 6, 1, 3, 51, 1, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: llcPortOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: llcPortOperEntry.setDescription('Currently set parameters for a specific LLC port.')
llcPortOperName = MibTableColumn((1, 3, 6, 1, 3, 51, 1, 1, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcPortOperName.setStatus('mandatory')
if mibBuilder.loadTexts: llcPortOperName.setDescription('An octet string that describes the physical port to which this interface is currently attached. It has implementation-specific significance.')
llcPortOperISTATUS = MibTableColumn((1, 3, 6, 1, 3, 51, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcPortOperISTATUS.setStatus('mandatory')
if mibBuilder.loadTexts: llcPortOperISTATUS.setDescription('This parameter describes the initial value of the administrative status, ifAdminStatus, of this LLC port at last port start-up.')
llcPortOperLastModifyTime = MibTableColumn((1, 3, 6, 1, 3, 51, 1, 1, 2, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcPortOperLastModifyTime.setStatus('mandatory')
if mibBuilder.loadTexts: llcPortOperLastModifyTime.setDescription('This object describes the value of sysUpTime when this port definition was last modified. If the port has not been modified, then this value shall be zero.')
llcPortOperLastFailTime = MibTableColumn((1, 3, 6, 1, 3, 51, 1, 1, 2, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcPortOperLastFailTime.setStatus('mandatory')
if mibBuilder.loadTexts: llcPortOperLastFailTime.setDescription('This object describes the value of sysUpTime when this LLC port last failed. If the port has not failed, then this value shall be zero.')
llcPortOperLastFailCause = MibTableColumn((1, 3, 6, 1, 3, 51, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("undefined", 1), ("physical", 2))).clone('undefined')).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcPortOperLastFailCause.setStatus('mandatory')
if mibBuilder.loadTexts: llcPortOperLastFailCause.setDescription('This enumerated object describes the cause of the last failure of this LLC port. If the port has not failed, then this object has a value of undefined(1).')
llcPortStatsTable = MibTable((1, 3, 6, 1, 3, 51, 1, 1, 3), )
if mibBuilder.loadTexts: llcPortStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: llcPortStatsTable.setDescription('Each entry in this table contains statistics for a specific LLC port.')
llcPortStatsEntry = MibTableRow((1, 3, 6, 1, 3, 51, 1, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: llcPortStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: llcPortStatsEntry.setDescription('A list of statistics for an LLC port.')
llcPortStatsPhysicalFailures = MibTableColumn((1, 3, 6, 1, 3, 51, 1, 1, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcPortStatsPhysicalFailures.setStatus('mandatory')
if mibBuilder.loadTexts: llcPortStatsPhysicalFailures.setDescription('This object reflects the total number of times this port has failed due to its physical media since port startup. At port startup time, this object must be initialized to zero.')
llcPortStatsPollsIn = MibTableColumn((1, 3, 6, 1, 3, 51, 1, 1, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcPortStatsPollsIn.setStatus('mandatory')
if mibBuilder.loadTexts: llcPortStatsPollsIn.setDescription('This object reflects the total number of polls received by this port since the port was created.')
llcPortStatsPollsOut = MibTableColumn((1, 3, 6, 1, 3, 51, 1, 1, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcPortStatsPollsOut.setStatus('mandatory')
if mibBuilder.loadTexts: llcPortStatsPollsOut.setDescription('This object reflects the total number of polls sent by this port since the port was created.')
llcPortStatsPollRspsIn = MibTableColumn((1, 3, 6, 1, 3, 51, 1, 1, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcPortStatsPollRspsIn.setStatus('mandatory')
if mibBuilder.loadTexts: llcPortStatsPollRspsIn.setDescription('This object reflects the total number of poll responses received by this port since the port was created.')
llcPortStatsPollRspsOut = MibTableColumn((1, 3, 6, 1, 3, 51, 1, 1, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcPortStatsPollRspsOut.setStatus('mandatory')
if mibBuilder.loadTexts: llcPortStatsPollRspsOut.setDescription('This object reflects the total number of poll responses sent by this port since the port was created.')
llcPortStatsLocalBusies = MibTableColumn((1, 3, 6, 1, 3, 51, 1, 1, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcPortStatsLocalBusies.setStatus('mandatory')
if mibBuilder.loadTexts: llcPortStatsLocalBusies.setDescription('This object reflects the total number of times that the local link stations on this port have entered a busy state (RNR). This object is initialized to zero when the port is created.')
llcPortStatsRemoteBusies = MibTableColumn((1, 3, 6, 1, 3, 51, 1, 1, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcPortStatsRemoteBusies.setStatus('mandatory')
if mibBuilder.loadTexts: llcPortStatsRemoteBusies.setDescription('This object reflects the total number of times that the adjacent (i.e. remote) link stations on this port have entered a busy state (RNR). This object is initialized to zero when the port is created.')
llcPortStatsIFramesIn = MibTableColumn((1, 3, 6, 1, 3, 51, 1, 1, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcPortStatsIFramesIn.setStatus('mandatory')
if mibBuilder.loadTexts: llcPortStatsIFramesIn.setDescription('This object reflects the total number of I-Frames that have been received by link stations on this port. This object is initialized to zero when the port is created.')
llcPortStatsIFramesOut = MibTableColumn((1, 3, 6, 1, 3, 51, 1, 1, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcPortStatsIFramesOut.setStatus('mandatory')
if mibBuilder.loadTexts: llcPortStatsIFramesOut.setDescription('This object reflects the total number of I-Frames that have been transmitted by link stations on this port. This object is initialized to zero when the port is created.')
llcPortStatsOctetsIn = MibTableColumn((1, 3, 6, 1, 3, 51, 1, 1, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcPortStatsOctetsIn.setStatus('mandatory')
if mibBuilder.loadTexts: llcPortStatsOctetsIn.setDescription('This object reflects the total octets received from adjacent link stations on this port. This object covers the address, control, and information field of I-Frames only. This object is initialized to zero when the port is created.')
llcPortStatsOctetsOut = MibTableColumn((1, 3, 6, 1, 3, 51, 1, 1, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcPortStatsOctetsOut.setStatus('mandatory')
if mibBuilder.loadTexts: llcPortStatsOctetsOut.setDescription('This object reflects the total octets transmitted to adjacent link stations on this port. This object covers the address, control, and information field of I-Frames only. This object is initialized to zero when the port is created.')
llcPortStatsProtocolErrs = MibTableColumn((1, 3, 6, 1, 3, 51, 1, 1, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcPortStatsProtocolErrs.setStatus('mandatory')
if mibBuilder.loadTexts: llcPortStatsProtocolErrs.setDescription('This object reflects the total number of times that the link stations on this port have deactivated the link as a result of having received a protocol violation from the adjacent link station. This object is initialized to zero when the port is created.')
llcPortStatsActivityTOs = MibTableColumn((1, 3, 6, 1, 3, 51, 1, 1, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcPortStatsActivityTOs.setStatus('mandatory')
if mibBuilder.loadTexts: llcPortStatsActivityTOs.setDescription('This object reflects the total number of times that the link stations on this port have deactivated the link as a result of no activity on the link. This object is initialized to zero when the port is created.')
llcPortStatsRetriesExps = MibTableColumn((1, 3, 6, 1, 3, 51, 1, 1, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcPortStatsRetriesExps.setStatus('mandatory')
if mibBuilder.loadTexts: llcPortStatsRetriesExps.setDescription('This object reflects the total number of times that the link stations on this port have deactivated the link as a result of a retry sequence being exhausted. This object is initialized to zero when the port is created.')
llcPortStatsRetransmitsIn = MibTableColumn((1, 3, 6, 1, 3, 51, 1, 1, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcPortStatsRetransmitsIn.setStatus('mandatory')
if mibBuilder.loadTexts: llcPortStatsRetransmitsIn.setDescription('This object reflects the total number of I-Frames retransmitted by remote link stations for all link stations on this port. This object is initialized to zero when the port is created.')
llcPortStatsRetransmitsOut = MibTableColumn((1, 3, 6, 1, 3, 51, 1, 1, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcPortStatsRetransmitsOut.setStatus('mandatory')
if mibBuilder.loadTexts: llcPortStatsRetransmitsOut.setDescription('This object reflects the total number of I-Frames retransmitted by all local link stations on this port. This object is initialized to zero when the port is created.')
llcSapAdminTable = MibTable((1, 3, 6, 1, 3, 51, 1, 2, 1), )
if mibBuilder.loadTexts: llcSapAdminTable.setStatus('mandatory')
if mibBuilder.loadTexts: llcSapAdminTable.setDescription('This table contains objects that can be changed to manage a local SAP. Changing one of these parameters may take effect in the operating SAP immediately or may wait until the interface is restarted depending on the details of the implementation. Most of the objects in this read-write table have corresponding read-only objects in the llcSapOperTable that return the current operating value. The operating values may be different from these configured values if a configured parameter was changed after the interface was started.')
llcSapAdminEntry = MibTableRow((1, 3, 6, 1, 3, 51, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "SNA-LLC-MIB", "llcSapNumber"))
if mibBuilder.loadTexts: llcSapAdminEntry.setStatus('mandatory')
if mibBuilder.loadTexts: llcSapAdminEntry.setDescription('A list of configured values for a local SAP.')
llcSapNumber = MibTableColumn((1, 3, 6, 1, 3, 51, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcSapNumber.setStatus('mandatory')
if mibBuilder.loadTexts: llcSapNumber.setDescription('The address of this local SAP.')
llcSapAdminState = MibTableColumn((1, 3, 6, 1, 3, 51, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcSapAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: llcSapAdminState.setDescription('This parameter controls the desired state of this local SAP.')
llcSapAdminMaxIPDUOctetsSend = MibTableColumn((1, 3, 6, 1, 3, 51, 1, 2, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcSapAdminMaxIPDUOctetsSend.setStatus('mandatory')
if mibBuilder.loadTexts: llcSapAdminMaxIPDUOctetsSend.setDescription("This object denotes the default maximum I PDU size, in octets, that LLCs on this SAP may send to their remote connection component partners. This count is referred to as 'N1' in the IEEE 802.2 specification [??]. A zero value for this object indicates that the port default, llcPortAdminMaxIPDUOctetsSend, shall be used as the SAP default. This SAP default value may be overridden by a non-zero value in the llcCcAdminMaxIPDUOctetsSend object. At connection setup, the remote LLC may send, using an XID frame, the maximum I PDU size which it is prepared to receive. If so, an implementation may choose to override the administered maximum PDU size with the dynamically learned value and should reflect this in the llcCcOperMaxIPDUOctetsSend object for the connection component. The I PDU size includes all octets in a frame, excluding framing characters, the MAC header and link link header.")
llcSapAdminMaxIPDUOctetsRcv = MibTableColumn((1, 3, 6, 1, 3, 51, 1, 2, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcSapAdminMaxIPDUOctetsRcv.setStatus('mandatory')
if mibBuilder.loadTexts: llcSapAdminMaxIPDUOctetsRcv.setDescription("This object denotes the default maximum I PDU size, in octets, that LLCs on this SAP can expect to receive from their remote LLC partners. This count is referred to as 'N1' in the IEEE 802.2 specification [??] A zero value for this object indicates that the port default, llcPortAdminMaxIPDUOctetsRcv, shall be used as the SAP default. This SAP default value may be overridden by a non-zero value in the llcCcAdminMaxIPDUOctetsRcv object. At connection setup, an implementation may choose to send this value to the remote LLC, using an XID frame. The I PDU size includes all octets in a frame with the exception of the framing characters, the MAC header and the link header.")
llcSapAdminMaxUnackedIPDUsSend = MibTableColumn((1, 3, 6, 1, 3, 51, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcSapAdminMaxUnackedIPDUsSend.setStatus('mandatory')
if mibBuilder.loadTexts: llcSapAdminMaxUnackedIPDUsSend.setDescription("This object denotes the default maximum consequetive unacknowledged I PDU frames that LLCs on this SAP may send to their remote LLC partners. This count is referred to as 'k' in the IEEE 802.2 specification [??]. A zero value for this object indicates that the port default, llcPortAdminMaxUnackedIPDUsSend, shall be used as the SAP default. This SAP default value may be overridden by a non-zero value in the llcCcAdminMaxUnackedIPDUsSend object. At connection setup, the remote LLC may send, using an XID frame, the maximum number of unacknowledged I PDUs which it is prepared to receive. If so, an implementation may choose to override the administered maximum number of unacknowledged PDUs with the dynamicly learned value and should reflect this in the llcCcOperMaxUnackedIPDUsSend object for the connection component.")
llcSapAdminMaxUnackedIPDUsRcv = MibTableColumn((1, 3, 6, 1, 3, 51, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcSapAdminMaxUnackedIPDUsRcv.setStatus('mandatory')
if mibBuilder.loadTexts: llcSapAdminMaxUnackedIPDUsRcv.setDescription("This object denotes the default maximum number of unacknowledged I PDUs that LLCs on this SAP can expect to receive from their remote LLC partners. This count is referred to as 'k' in the IEEE 802.2 specification [??]. A zero value for this object indicates that the port default, llcPortAdminMaxUnackedIPDUsRcv, shall be used as the SAP default. This SAP default value may be overridden by a non-zero value in the llcCcAdminMaxUnackedIPDUsRcv object. At connection setup, an implementation may choose to send this value to the remote LLC, using an XID frame.")
llcSapAdminMaxRetransmits = MibTableColumn((1, 3, 6, 1, 3, 51, 1, 2, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcSapAdminMaxRetransmits.setStatus('mandatory')
if mibBuilder.loadTexts: llcSapAdminMaxRetransmits.setDescription("This object denotes the default value for the maximum number of times that LLCs on this SAP shall retry PDUs following the expiration of the acknowledgement timer, the P-bit timer or the reject timer. When these retries are exhausted, thelink shall be declared inactive. This count is referred to as 'N2' in the IEEE 802.2 specification [??]. A zero value for this object indicates that the port default, llcPortAdminMaxRetransmits, shall be used as the SAP default. This SAP default value may be overridden by a non-zero value in the llcCcAdminMaxRetransmits.")
llcSapAdminAckTimer = MibTableColumn((1, 3, 6, 1, 3, 51, 1, 2, 1, 1, 8), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcSapAdminAckTimer.setStatus('mandatory')
if mibBuilder.loadTexts: llcSapAdminAckTimer.setDescription('This object denotes the default value for the time interval during which the LLCs on this SAP shall expect to receive either: 1) an acknowledgement to one or more outstanding I PDUs. or 2) a response PDU to an unnumbered command PDU. The expiration of this timer shall cause the frame unacknowledged frames to be retransmitted (up to N2 times). A zero value for this object indicates that the port default, llcPortAdminAckTimer, shall be used as the SAP default. This SAP default value may be overridden by a non-zero value in the llcCcAdminAckTimer.')
llcSapAdminPbitTimer = MibTableColumn((1, 3, 6, 1, 3, 51, 1, 2, 1, 1, 9), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcSapAdminPbitTimer.setStatus('mandatory')
if mibBuilder.loadTexts: llcSapAdminPbitTimer.setDescription("This object denotes the default value for the time interval during which the LLCs on this port shall expect to receive a PDU with the F bit set to '1' in response to a Type 2 command with the P bit set to '1'. The expiration of this timer shall cause the REJ PDU to be retransmitted (up to N2 times). A zero value for this object indicates that the port default, llcPortAdminPbitTimer, shall be used as the SAP default. This SAP default value may be overridden by a non-zero value in the llcCcAdminPbitTimer.")
llcSapAdminRejTimer = MibTableColumn((1, 3, 6, 1, 3, 51, 1, 2, 1, 1, 10), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcSapAdminRejTimer.setStatus('mandatory')
if mibBuilder.loadTexts: llcSapAdminRejTimer.setDescription('This object denotes the default value for the time interval during which the LLCs on this SAP shall expect to receive a reply to a REJ PDU. The expiration of this timer shall cause the REJ PDU to be retransmitted (up to N2 times). A zero value for this object indicates that the port default, llcPortAdminRejTimer, shall be used as the SAP default. This SAP default value may be overridden by a non-zero value in the llcCcAdminRejTimer.')
llcSapAdminBusyTimer = MibTableColumn((1, 3, 6, 1, 3, 51, 1, 2, 1, 1, 11), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcSapAdminBusyTimer.setStatus('mandatory')
if mibBuilder.loadTexts: llcSapAdminBusyTimer.setDescription('This object denotes the default value for the time interval during which the LLCs on this SAP shall expect to receive an indication that a busy condition at the remote LLC has cleared. The expiration of this timer shall cause the link to be declared inactive. A zero value for this object indicates that the port default, llcPortAdminBusyTimer, shall be used as the SAP default. This SAP default value may be overridden by a non-zero value in the llcCcAdminBusyTimer.')
llcSapAdminInactTimer = MibTableColumn((1, 3, 6, 1, 3, 51, 1, 2, 1, 1, 12), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcSapAdminInactTimer.setStatus('mandatory')
if mibBuilder.loadTexts: llcSapAdminInactTimer.setDescription("This object denotes the default value for the time interval during which the LLCs on this SAP shall expect to receive any PDU from the remote LLC. This function is not described in the IEEE 802.2 specification [??] but is widely implemented. The expiration of this timer shall cause the local LLC to send a PDU to the remote LLC with the P bit set to '1'. A zero value for this object indicates that the port default, llcPortAdminInactTimer, shall be used as the SAP default. This SAP default value may be overridden by a non-zero value in the llcCcAdminInactTimer. Any value for this object less than or equal to the acknowledgement timer shall mean that the timer is not used.")
llcSapAdminDelayAckCount = MibTableColumn((1, 3, 6, 1, 3, 51, 1, 2, 1, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcSapAdminDelayAckCount.setStatus('mandatory')
if mibBuilder.loadTexts: llcSapAdminDelayAckCount.setDescription('This object denotes the default value for the maximum number of consequetive I PDUs which the LLCs on this SAP shall receive during the interval defined by llcCcOperDelayTimer without sending an immediate acknowledgement. This must be less than or equal to the value of llcCcOperMaxUnackIPDURcv. This function is not described in the IEEE 802.2 specification [??] but is widely implemented. A zero value for this object indicates that the port default, llcPortAdminDelayAck, shall be used as the SAP default. This SAP default value may be overridden by a non-zero value in the llcCcAdminDelayAckCount. A value of one indicates that acknowledgments will be sent immediately and that the value of llcSapAdminDelayAckTimer shall be ignored.')
llcSapAdminDelayAckTimer = MibTableColumn((1, 3, 6, 1, 3, 51, 1, 2, 1, 1, 14), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcSapAdminDelayAckTimer.setStatus('mandatory')
if mibBuilder.loadTexts: llcSapAdminDelayAckTimer.setDescription('This object denotes the default value for the time interval during which the LLCs on this SAP shall delay acknowledgment of one or more I PDUs (up to the value of llcCcOperDelayAckCount). This function is not described in the IEEE 802.2 specification [??] but is widely implemented. The expiration of this timer shall cause the local LLC to acknowledge all unacknowledged I PDUs. This object is associated with the llcSapAdminDelayAckCount object and is only defined if that object has a value greater than one.')
llcSapOperTable = MibTable((1, 3, 6, 1, 3, 51, 1, 2, 2), )
if mibBuilder.loadTexts: llcSapOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: llcSapOperTable.setDescription('This table contains objects that reflect the current operational parameters of a local SAP. Many of these objects in this table have corresponding objects in the llcSapAdminTable.')
llcSapOperEntry = MibTableRow((1, 3, 6, 1, 3, 51, 1, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "SNA-LLC-MIB", "llcSapNumber"))
if mibBuilder.loadTexts: llcSapOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: llcSapOperEntry.setDescription('A list of configured values for a local SAP.')
llcSapOperStatus = MibTableColumn((1, 3, 6, 1, 3, 51, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcSapOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: llcSapOperStatus.setDescription('This parameter describes the actual state of this local SAP.')
llcSapStatsTable = MibTable((1, 3, 6, 1, 3, 51, 1, 2, 3), )
if mibBuilder.loadTexts: llcSapStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: llcSapStatsTable.setDescription('This table contains objects that reflect the current operational parameters of a local SAP. Many of these objects in this table have corresponding objects in the llcSapAdminTable.')
llcSapStatsEntry = MibTableRow((1, 3, 6, 1, 3, 51, 1, 2, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "SNA-LLC-MIB", "llcSapNumber"))
if mibBuilder.loadTexts: llcSapStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: llcSapStatsEntry.setDescription('A list of configured values for a local SAP.')
llcSapStatsTESTsIn = MibTableColumn((1, 3, 6, 1, 3, 51, 1, 2, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcSapStatsTESTsIn.setStatus('mandatory')
if mibBuilder.loadTexts: llcSapStatsTESTsIn.setDescription('This object reflects the total number of TEST frames (both commands and responses) received on a local SAP.')
llcSapStatsTESTsOut = MibTableColumn((1, 3, 6, 1, 3, 51, 1, 2, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcSapStatsTESTsOut.setStatus('mandatory')
if mibBuilder.loadTexts: llcSapStatsTESTsOut.setDescription('This object reflects the total number of TEST frames (both commands and responses) sent on a local SAP.')
llcSapStatsXIDsIn = MibTableColumn((1, 3, 6, 1, 3, 51, 1, 2, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcSapStatsXIDsIn.setStatus('mandatory')
if mibBuilder.loadTexts: llcSapStatsXIDsIn.setDescription('This object reflects the total number of XID frames (both commands and responses) received on a local SAP.')
llcSapStatsXIDsOut = MibTableColumn((1, 3, 6, 1, 3, 51, 1, 2, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcSapStatsXIDsOut.setStatus('mandatory')
if mibBuilder.loadTexts: llcSapStatsXIDsOut.setDescription('This object reflects the total number of XID frames (both commands and responses) sent on a local SAP.')
llcSapStatsUIFramesIn = MibTableColumn((1, 3, 6, 1, 3, 51, 1, 2, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcSapStatsUIFramesIn.setStatus('mandatory')
if mibBuilder.loadTexts: llcSapStatsUIFramesIn.setDescription('This object reflects the total number of unnumbered information (UI) frames received on a local SAP.')
llcSapStatsUIFramesOut = MibTableColumn((1, 3, 6, 1, 3, 51, 1, 2, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcSapStatsUIFramesOut.setStatus('mandatory')
if mibBuilder.loadTexts: llcSapStatsUIFramesOut.setDescription('This object reflects the total number of unnumbered information (UI) frames sent on a local SAP.')
llcCcAdminTable = MibTable((1, 3, 6, 1, 3, 51, 1, 3, 1), )
if mibBuilder.loadTexts: llcCcAdminTable.setStatus('mandatory')
if mibBuilder.loadTexts: llcCcAdminTable.setDescription('This table contains objects that can be changed to manage an LLC link station. Changing one of these parameters may take effect in the operating link immediately or may wait until the link is restarted depending on the details of the implementation. The entries in llcCcAdminTable can be created either by an agent or a management station. The management station can create an entry in llcCcAdminTable by setting the appropriate value in llcCcAdminRowStatus. Most of the objects in this read-create table have corresponding read-only objects in the llcCcOperTable that reflect the current operating value. The operating values may be different from these configured values if changed by XID negotiation or if a configured parameter was changed after the link was started.')
llcCcAdminEntry = MibTableRow((1, 3, 6, 1, 3, 51, 1, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "SNA-LLC-MIB", "llcCcLSap"), (0, "SNA-LLC-MIB", "llcCcRSap"), (0, "SNA-LLC-MIB", "llcCcRMac"), (0, "SNA-LLC-MIB", "llcCcLMac"))
if mibBuilder.loadTexts: llcCcAdminEntry.setStatus('mandatory')
if mibBuilder.loadTexts: llcCcAdminEntry.setDescription('A list of configured values for an LLC link station.')
llcCcLSap = MibTableColumn((1, 3, 6, 1, 3, 51, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcCcLSap.setStatus('mandatory')
if mibBuilder.loadTexts: llcCcLSap.setDescription('This value is the address of the local SAP for this Connection Component.')
llcCcRSap = MibTableColumn((1, 3, 6, 1, 3, 51, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcCcRSap.setStatus('mandatory')
if mibBuilder.loadTexts: llcCcRSap.setDescription('This value is the address of the remote SAP for this Connection Component.')
llcCcLMac = MibTableColumn((1, 3, 6, 1, 3, 51, 1, 3, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcCcLMac.setStatus('mandatory')
if mibBuilder.loadTexts: llcCcLMac.setDescription('This value is the local MAC address for this Connection Component.')
llcCcRMac = MibTableColumn((1, 3, 6, 1, 3, 51, 1, 3, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcCcRMac.setStatus('mandatory')
if mibBuilder.loadTexts: llcCcRMac.setDescription('This value is the remote MAC address for this Connection Component.')
llcCcAdminState = MibTableColumn((1, 3, 6, 1, 3, 51, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcCcAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: llcCcAdminState.setDescription('This object controls the desired state of the LLC connection. The managed system shall attempt to keep the operational state, llcCcOperState, consistent with this value.')
llcCcAdminMaxIPDUOctetsSend = MibTableColumn((1, 3, 6, 1, 3, 51, 1, 3, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcCcAdminMaxIPDUOctetsSend.setStatus('mandatory')
if mibBuilder.loadTexts: llcCcAdminMaxIPDUOctetsSend.setDescription("This object denotes the maximum I PDU size, in octets, that this LLC SAP may send to its remote connection component partner. This count is referred to as 'N1' in the IEEE 802.2 specification [??]. This object contains an administrative value which will be applied the next time this connection is established. A zero value for this object indicates that the SAP default, llcSapAdminMaxIPDUOctetsSend, shall be used. At connection setup, the remote LLC may send, using an XID frame, the maximum I PDU size which it is prepared to receive. If so, an implementation may choose to override the administered maximum PDU size with the dynamically learned value and should reflect this in the llcCcOperMaxIPDUOctetsSend object for the connection component. The I PDU size includes all octets in a frame, excluding framing characters, the MAC header and link link header.")
llcCcAdminMaxIPDUOctetsRcv = MibTableColumn((1, 3, 6, 1, 3, 51, 1, 3, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcCcAdminMaxIPDUOctetsRcv.setStatus('mandatory')
if mibBuilder.loadTexts: llcCcAdminMaxIPDUOctetsRcv.setDescription("This object denotes the maximum I PDU size,in octets, that this LLC can expect to receive from its remote LLC partner. This count is referred to as 'N1' in the IEEE 802.2 specification [??] This object contains an administrative value which will be applied the next time this connection is established. A zero value for this object indicates that the SAP default, llcSapAdminMaxIPDUOctetsRcv, shall be used. At connection setup, an implementation may choose to send this value to the remote LLC, using an XID frame. The I PDU size includes all octets in a frame with the exception of the framing characters, the MAC header and the link header.")
llcCcAdminMaxUnackedIPDUsSend = MibTableColumn((1, 3, 6, 1, 3, 51, 1, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcCcAdminMaxUnackedIPDUsSend.setStatus('mandatory')
if mibBuilder.loadTexts: llcCcAdminMaxUnackedIPDUsSend.setDescription("This object denotes the maximum consequetive unacknowledged I PDU frames that this LLC may send to its remote LLC partner. This count is referred to as 'k' in the IEEE 802.2 specification [??]. This object contains an administrative value which will be applied the next time this connection is established. A zero value for this object indicates that the SAP default, llcSapAdminMaxUnackedIPDUsSend, shall be used. At connection setup, the remote LLC may send, using an XID frame, the maximum number of unacknowledged I PDUs which it is prepared to receive. If so, an implementation may choose to override the administered maximum number of unacknowledged PDUs with the dynamicly learned value and should reflect this in the llcCcOperMaxUnackedIPDUsSend object for the connection component.")
llcCcAdminMaxUnackedIPDUsRcv = MibTableColumn((1, 3, 6, 1, 3, 51, 1, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcCcAdminMaxUnackedIPDUsRcv.setStatus('mandatory')
if mibBuilder.loadTexts: llcCcAdminMaxUnackedIPDUsRcv.setDescription("This object denotes the maximum number of unacknowledged I PDUs that this LLC can expect to receive from its remote LLC partner. This count is referred to as 'k' in the IEEE 802.2 specification [??]. This object contains an administrative value which will be applied the next time this connection is established. A zero value for this object indicates that the SAP default, llcSapAdminMaxUnackedIPDUsRcv, shall be used. At connection setup, an implementation may choose to send this value to the remote LLC, using an XID frame.")
llcCcAdminMaxRetransmits = MibTableColumn((1, 3, 6, 1, 3, 51, 1, 3, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcCcAdminMaxRetransmits.setStatus('mandatory')
if mibBuilder.loadTexts: llcCcAdminMaxRetransmits.setDescription("This object denotes the value for the maximum number of times that this LLC shall retry PDUs following the expiration of the acknowledgement timer, the P-bit timer or the reject timer. When these retries are exhausted, the link shall be declared inactive. This count is referred to as 'N2' in the IEEE 802.2 specification [??]. This object contains an administrative value which will be applied the next time this connection is established. A zero value for this object indicates that the SAP default, llcSapAdminMaxRetransmits, shall be used.")
llcCcAdminAckTimer = MibTableColumn((1, 3, 6, 1, 3, 51, 1, 3, 1, 1, 11), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcCcAdminAckTimer.setStatus('mandatory')
if mibBuilder.loadTexts: llcCcAdminAckTimer.setDescription('This object denotes the value for the time interval during which this LLC shall expect to receive either: 1) an acknowledgement to one or more outstanding I PDUs. or 2) a response PDU to an unnumbered command PDU. The expiration of this timer shall cause the frame unacknowledged frames to be retransmitted (up to N2 times). This object contains an administrative value which will be applied the next time this connection is established. A zero value for this object indicates that the SAP default, llcSapAdminAckTimer, shall be used.')
llcCcAdminPbitTimer = MibTableColumn((1, 3, 6, 1, 3, 51, 1, 3, 1, 1, 12), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcCcAdminPbitTimer.setStatus('mandatory')
if mibBuilder.loadTexts: llcCcAdminPbitTimer.setDescription("This object denotes the value for the time interval during which this LLC shall expect to receive a PDU with the F bit set to '1' in response to a Type 2 command with the P bit set to '1'. The expiration of this timer shall cause the REJ PDU to be retransmitted (up to N2 times). This object contains an administrative value which will be applied the next time this connection is established. A zero value for this object indicates that the SAP default, llcSapAdminPbitTimer, shall be used.")
llcCcAdminRejTimer = MibTableColumn((1, 3, 6, 1, 3, 51, 1, 3, 1, 1, 13), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcCcAdminRejTimer.setStatus('mandatory')
if mibBuilder.loadTexts: llcCcAdminRejTimer.setDescription('This object denotes the value for the time interval during which this LLC shall expect to receive a reply to a REJ PDU. The expiration of this timer shall cause the REJ PDU to be retransmitted (up to N2 times). This object contains an administrative value which will be applied the next time this connection is established. A zero value for this object indicates that the SAP default, llcSapAdminRejTimer, shall be used.')
llcCcAdminBusyTimer = MibTableColumn((1, 3, 6, 1, 3, 51, 1, 3, 1, 1, 14), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcCcAdminBusyTimer.setStatus('mandatory')
if mibBuilder.loadTexts: llcCcAdminBusyTimer.setDescription('This object denotes the value for the time interval during which this LLC shall expect to receive an indication that a busy condition at the remote LLC has cleared. The expiration of this timer shall cause the link to be declared inactive. This object contains an administrative value which will be applied the next time this connection is established. A zero value for this object indicates that the SAP default, llcSapAdminBusyTimer, shall be used.')
llcCcAdminInactTimer = MibTableColumn((1, 3, 6, 1, 3, 51, 1, 3, 1, 1, 15), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcCcAdminInactTimer.setStatus('mandatory')
if mibBuilder.loadTexts: llcCcAdminInactTimer.setDescription("This object denotes the value for the time interval during which this LLC shall expect to receive any PDU from the remote LLC. This function is not described in the IEEE 802.2 specification [??] but is widely implemented. The expiration of this timer shall cause the local LLC to send a PDU to the remote LLC with the P bit set to '1'. This object contains an administrative value which will be applied the next time this connection is established. A zero value for this object indicates that the SAP default, llcSapAdminInactTimer, shall be used. Any value for this object less than or equal to the acknowledgement timer shall mean that the timer is not used.")
llcCcAdminDelayAckCount = MibTableColumn((1, 3, 6, 1, 3, 51, 1, 3, 1, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcCcAdminDelayAckCount.setStatus('mandatory')
if mibBuilder.loadTexts: llcCcAdminDelayAckCount.setDescription('This object denotes the value for the maximum number of consequetive I PDUs which this LLC shall receive during the interval defined by llcCcOperDelayTimer without sending an immediate acknowledgement. This must be less than or equal to the value of llcCcOperMaxUnackIPDURcv. This function is not described in the IEEE 802.2 specification [??] but is widely implemented. This object contains an administrative value which will be applied the next time this connection is established. A zero value for this object indicates that the SAP default, llcSapAdminDelayAck, shall be used. A value of one indicates that acknowledgments will be sent immediately and that the value of llcCcAdminDelayAckTimer shall be ignored.')
llcCcAdminDelayAckTimer = MibTableColumn((1, 3, 6, 1, 3, 51, 1, 3, 1, 1, 17), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcCcAdminDelayAckTimer.setStatus('mandatory')
if mibBuilder.loadTexts: llcCcAdminDelayAckTimer.setDescription('This object denotes the value for the time interval during which this LLC shall delay acknowledgment of one or more I PDUs (up to the value of llcCcOperDelayAckCount). This function is not described in the IEEE 802.2 specification [??] but is widely implemented. The expiration of this timer shall cause the local LLC to acknowledge all unacknowledged I PDUs. This object contains an administrative value which will be applied the next time this connection is established. This object is associated with the llcCcAdminDelayAckCount object and is only defined if that object has a value greater than one.')
llcCcAdminRowStatus = MibTableColumn((1, 3, 6, 1, 3, 51, 1, 3, 1, 1, 18), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcCcAdminRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: llcCcAdminRowStatus.setDescription("This object is used by a management station to create or delete the row entry in llcCcAdminTable following the RowStatus textual convention. Upon successful creation of the row, an agent automatically creates a corresponding entry in the llcCcOperTable with llcCcOperState equal to 'discontacted (1)'.")
llcCcOperTable = MibTable((1, 3, 6, 1, 3, 51, 1, 3, 2), )
if mibBuilder.loadTexts: llcCcOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: llcCcOperTable.setDescription('This table contains current LLC link parameters. Many of these objects have corresponding objects in the llcCcAdminTable.')
llcCcOperEntry = MibTableRow((1, 3, 6, 1, 3, 51, 1, 3, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "SNA-LLC-MIB", "llcCcLSap"), (0, "SNA-LLC-MIB", "llcCcRSap"), (0, "SNA-LLC-MIB", "llcCcRMac"), (0, "SNA-LLC-MIB", "llcCcLMac"))
if mibBuilder.loadTexts: llcCcOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: llcCcOperEntry.setDescription('A list of status and control values for an LLC link station.')
llcCcOperRole = MibTableColumn((1, 3, 6, 1, 3, 51, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2), ("undefined", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcOperRole.setStatus('mandatory')
if mibBuilder.loadTexts: llcCcOperRole.setDescription('This object reflects the current role that the link station is assuming.')
llcCcOperState = MibTableColumn((1, 3, 6, 1, 3, 51, 1, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("discontacted", 1), ("contactPending", 2), ("contacted", 3), ("discontactPending", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcOperState.setStatus('mandatory')
if mibBuilder.loadTexts: llcCcOperState.setDescription('This object describes the operational state of the LLC connection. The managed system shall attempt to keep this value consistent with the administered state, llcCcAdminState')
llcCcOperMaxIPDUOctetsSend = MibTableColumn((1, 3, 6, 1, 3, 51, 1, 3, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcCcOperMaxIPDUOctetsSend.setStatus('mandatory')
if mibBuilder.loadTexts: llcCcOperMaxIPDUOctetsSend.setDescription("This object denotes the maximum I PDU size, in octets, that this LLC SAP may send to its remote connection component partner. This count is referred to as 'N1' in the IEEE 802.2 specification [??]. At connection setup, the remote LLC may send, using an XID frame, the maximum I PDU size which it is prepared to receive. If so, an implementation may choose to override the administered maximum PDU size with the dynamically learned value and should reflect that in this object. The I PDU size includes all octets in a frame, excluding framing characters, the MAC header and link link header.")
llcCcOperMaxIPDUOctetsRcv = MibTableColumn((1, 3, 6, 1, 3, 51, 1, 3, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcCcOperMaxIPDUOctetsRcv.setStatus('mandatory')
if mibBuilder.loadTexts: llcCcOperMaxIPDUOctetsRcv.setDescription("This object denotes the maximum I PDU size,in octets, that this LLC can expect to receive from its remote LLC partner. This count is referred to as 'N1' in the IEEE 802.2 specification [??] The I PDU size includes all octets in a frame with the exception of the framing characters, the MAC header and the link header.")
llcCcOperMaxUnackedIPDUsSend = MibTableColumn((1, 3, 6, 1, 3, 51, 1, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcCcOperMaxUnackedIPDUsSend.setStatus('mandatory')
if mibBuilder.loadTexts: llcCcOperMaxUnackedIPDUsSend.setDescription("This object denotes the maximum consequetive unacknowledged I PDU frames that this LLC may send to its remote LLC partner. This count is referred to as 'k' in the IEEE 802.2 specification [??]. At connection setup, the remote LLC may send, using an XID frame, the maximum number of unacknowledged I PDUs which it is prepared to receive. If so, an implementation may choose to override the administered maximum number of unacknowledged PDUs with the dynamicly learned value and should reflect that in this object.")
llcCcOperMaxUnackedIPDUsRcv = MibTableColumn((1, 3, 6, 1, 3, 51, 1, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcCcOperMaxUnackedIPDUsRcv.setStatus('mandatory')
if mibBuilder.loadTexts: llcCcOperMaxUnackedIPDUsRcv.setDescription("This object denotes the maximum number of unacknowledged I PDUs that this LLC can expect to receive from its remote LLC partner. This count is referred to as 'k' in the IEEE 802.2 specification [??].")
llcCcOperMaxRetransmits = MibTableColumn((1, 3, 6, 1, 3, 51, 1, 3, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcCcOperMaxRetransmits.setStatus('mandatory')
if mibBuilder.loadTexts: llcCcOperMaxRetransmits.setDescription("This object denotes the value for the maximum number of times that this LLC shall retry PDUs following the expiration of the acknowledgement timer, the P-bit timer or the reject timer. When these retries are exhausted, the link shall be declared inactive. This count is referred to as 'N2' in the IEEE 802.2 specification [??].")
llcCcOperAckTimer = MibTableColumn((1, 3, 6, 1, 3, 51, 1, 3, 2, 1, 8), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcCcOperAckTimer.setStatus('mandatory')
if mibBuilder.loadTexts: llcCcOperAckTimer.setDescription('This object denotes the value for the time interval during which this LLC shall expect to receive either: 1) an acknowledgement to one or more outstanding I PDUs. or 2) a response PDU to an unnumbered command PDU. The expiration of this timer shall cause the frame unacknowledged frames to be retransmitted (up to N2 times).')
llcCcOperPbitTimer = MibTableColumn((1, 3, 6, 1, 3, 51, 1, 3, 2, 1, 9), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcCcOperPbitTimer.setStatus('mandatory')
if mibBuilder.loadTexts: llcCcOperPbitTimer.setDescription("This object denotes the value for the time interval during which this LLC shall expect to receive a PDU with the F bit set to '1' in response to a Type 2 command with the P bit set to '1'. The expiration of this timer shall cause the REJ PDU to be retransmitted (up to N2 times).")
llcCcOperRejTimer = MibTableColumn((1, 3, 6, 1, 3, 51, 1, 3, 2, 1, 10), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcCcOperRejTimer.setStatus('mandatory')
if mibBuilder.loadTexts: llcCcOperRejTimer.setDescription('This object denotes the value for the time interval during which this LLC shall expect to receive a reply to a REJ PDU. The expiration of this timer shall cause the REJ PDU to be retransmitted (up to N2 times).')
llcCcOperBusyTimer = MibTableColumn((1, 3, 6, 1, 3, 51, 1, 3, 2, 1, 11), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcCcOperBusyTimer.setStatus('mandatory')
if mibBuilder.loadTexts: llcCcOperBusyTimer.setDescription('This object denotes the value for the time interval during which this LLC shall expect to receive an indication that a busy condition at the remote LLC has cleared. The expiration of this timer shall cause the link to be declared inactive.')
llcCcOperInactTimer = MibTableColumn((1, 3, 6, 1, 3, 51, 1, 3, 2, 1, 12), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcCcOperInactTimer.setStatus('mandatory')
if mibBuilder.loadTexts: llcCcOperInactTimer.setDescription("This object denotes the value for the time interval during which this LLC shall expect to receive any PDU from the remote LLC. This function is not described in the IEEE 802.2 specification [??] but is widely implemented. The expiration of this timer shall cause the local LLC to send a PDU to the remote LLC with the P bit set to '1'. Any value for this object less than or equal to the acknowledgement timer shall mean that the timer is not used.")
llcCcOperDelayAckCount = MibTableColumn((1, 3, 6, 1, 3, 51, 1, 3, 2, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcCcOperDelayAckCount.setStatus('mandatory')
if mibBuilder.loadTexts: llcCcOperDelayAckCount.setDescription('This object denotes the value for the maximum number of consequetive I PDUs which this LLC shall receive during the interval defined by llcCcOperDelayTimer without sending an immediate acknowledgement. This must be less than or equal to the value of llcCcOperMaxUnackIPDURcv. This function is not described in the IEEE 802.2 specification [??] but is widely implemented. A value of one indicates that acknowledgments will be sent immediately and that the value of llcCcOperDelayAckTimer should be ignored.')
llcCcOperDelayAckTimer = MibTableColumn((1, 3, 6, 1, 3, 51, 1, 3, 2, 1, 14), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcCcOperDelayAckTimer.setStatus('mandatory')
if mibBuilder.loadTexts: llcCcOperDelayAckTimer.setDescription('This object denotes the value for the time interval during which this LLC shall delay acknowledgment of one or more I PDUs (up to the value of llcCcOperDelayAckCount). This function is not described in the IEEE 802.2 specification [??] but is widely implemented. The expiration of this timer shall cause the local LLC to acknowledge all unacknowledged I PDUs. This object is associated with the llcCcOperDelayAckCount object and only has meaning if that object has a value greater than one.')
llcCcOperCreateTime = MibTableColumn((1, 3, 6, 1, 3, 51, 1, 3, 2, 1, 15), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcOperCreateTime.setStatus('mandatory')
if mibBuilder.loadTexts: llcCcOperCreateTime.setDescription('This object describes the value of sysUpTime when this connection was created.')
llcCcOperLastModifyTime = MibTableColumn((1, 3, 6, 1, 3, 51, 1, 3, 2, 1, 16), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcOperLastModifyTime.setStatus('mandatory')
if mibBuilder.loadTexts: llcCcOperLastModifyTime.setDescription('This object describes the value of sysUpTime when this connection definition was last modified. If the connection has not been modified, then this value shall be zero.')
llcCcOperLastFailTime = MibTableColumn((1, 3, 6, 1, 3, 51, 1, 3, 2, 1, 17), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcOperLastFailTime.setStatus('mandatory')
if mibBuilder.loadTexts: llcCcOperLastFailTime.setDescription('This object describes the value of sysUpTime when this LLC link station last failed. If the link station has not failed, then this value shall be zero.')
llcCcOperLastFailCause = MibTableColumn((1, 3, 6, 1, 3, 51, 1, 3, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("undefined", 1), ("rxFRMR", 2), ("txFRMR", 3), ("noResponse", 4), ("protocolErr", 5), ("noActivity", 6), ("discReceived", 7), ("dmReceived", 8), ("retriesExpired", 9))).clone('undefined')).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcOperLastFailCause.setStatus('mandatory')
if mibBuilder.loadTexts: llcCcOperLastFailCause.setDescription('This enumerated object reflects the cause of the last failure of this LLC link station. If the link station has not failed, then this object will have a value of undefined(1).')
llcCcOperLastFailFRMRInfo = MibTableColumn((1, 3, 6, 1, 3, 51, 1, 3, 2, 1, 19), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcOperLastFailFRMRInfo.setStatus('mandatory')
if mibBuilder.loadTexts: llcCcOperLastFailFRMRInfo.setDescription('This object reflects the information field of the FRMR frame if the last failure for this LLC link station was as a result of an invalid frame. Otherwise, this field has no meaning.')
llcCcStatsTable = MibTable((1, 3, 6, 1, 3, 51, 1, 3, 3), )
if mibBuilder.loadTexts: llcCcStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: llcCcStatsTable.setDescription('Each entry in this table contains statistics for a specific LLC link station.')
llcCcStatsEntry = MibTableRow((1, 3, 6, 1, 3, 51, 1, 3, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "SNA-LLC-MIB", "llcCcLSap"), (0, "SNA-LLC-MIB", "llcCcRSap"), (0, "SNA-LLC-MIB", "llcCcRMac"), (0, "SNA-LLC-MIB", "llcCcLMac"))
if mibBuilder.loadTexts: llcCcStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: llcCcStatsEntry.setDescription('A list of statistics for an LLC link station.')
llcCcStatsLocalBusies = MibTableColumn((1, 3, 6, 1, 3, 51, 1, 3, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcStatsLocalBusies.setStatus('mandatory')
if mibBuilder.loadTexts: llcCcStatsLocalBusies.setDescription('This object reflects the total number of times that the local LLC link station has entered a busy state (RNR) since link station startup. At link station startup time, this object must be initialized to zero.')
llcCcStatsRemoteBusies = MibTableColumn((1, 3, 6, 1, 3, 51, 1, 3, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcStatsRemoteBusies.setStatus('mandatory')
if mibBuilder.loadTexts: llcCcStatsRemoteBusies.setDescription('This object reflects the total number of times that an adjacent ( remote) LLC link station has entered a busy state (RNR) since link station startup. At link station startup time, this object must be initialized to zero.')
llcCcStatsIFramesIn = MibTableColumn((1, 3, 6, 1, 3, 51, 1, 3, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcStatsIFramesIn.setStatus('mandatory')
if mibBuilder.loadTexts: llcCcStatsIFramesIn.setDescription('This object reflects the total I-frames received from an adjacent LLC link station since link station startup. At link station startup time, this object must be initialized to zero.')
llcCcStatsIFramesOut = MibTableColumn((1, 3, 6, 1, 3, 51, 1, 3, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcStatsIFramesOut.setStatus('mandatory')
if mibBuilder.loadTexts: llcCcStatsIFramesOut.setDescription('This object reflects the total I-frames transmitted to an adjacent LLC link station since link station startup. At link station startup time, this object must be initialized to zero.')
llcCcStatsIOctetsIn = MibTableColumn((1, 3, 6, 1, 3, 51, 1, 3, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcStatsIOctetsIn.setStatus('mandatory')
if mibBuilder.loadTexts: llcCcStatsIOctetsIn.setDescription('This object reflects the total octets contained in I-frames received from an adjacent LLC link station since link station startup. At link station startup time, this object must be initialized to zero.')
llcCcStatsIOctetsOut = MibTableColumn((1, 3, 6, 1, 3, 51, 1, 3, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcStatsIOctetsOut.setStatus('mandatory')
if mibBuilder.loadTexts: llcCcStatsIOctetsOut.setDescription('This object reflects the total octets contained in I-frames transmitted to an adjacent LLC link station since link station startup. At link station startup time, this object must be initialized to zero.')
llcCcStatsREJsIn = MibTableColumn((1, 3, 6, 1, 3, 51, 1, 3, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcStatsREJsIn.setStatus('mandatory')
if mibBuilder.loadTexts: llcCcStatsREJsIn.setDescription('This object reflects the total REJ frames received from an adjacent LLC link station since link station startup.')
llcCcStatsREJsOut = MibTableColumn((1, 3, 6, 1, 3, 51, 1, 3, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcStatsREJsOut.setStatus('mandatory')
if mibBuilder.loadTexts: llcCcStatsREJsOut.setDescription('This object reflects the total REJ frames transmitted to an adjacent LLC link station since link station startup.')
llcCcStatsRetransmitsIn = MibTableColumn((1, 3, 6, 1, 3, 51, 1, 3, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcStatsRetransmitsIn.setStatus('mandatory')
if mibBuilder.loadTexts: llcCcStatsRetransmitsIn.setDescription('This object reflects the total number of information frames retransmitted by the remote link station because the N(s) received from that link station indicated that one or more information frames sent by that station were lost. This event causes the first missing information frame of a window and all subsequent information frames to be retransmitted. At link station startup time, this object must be initialized to zero')
llcCcStatsRetransmitsOut = MibTableColumn((1, 3, 6, 1, 3, 51, 1, 3, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcStatsRetransmitsOut.setStatus('mandatory')
if mibBuilder.loadTexts: llcCcStatsRetransmitsOut.setDescription('This object reflects the total number of information frames retransmitted to a remote link station because the N(r) received from that link station indicated that one or more information frames sent to that station were lost. This event causes the first missing information frame of a window and all subsequent information frames to be retransmitted. At link station startup time, this object must be initialized to zero.')
llcCcStatsFRMRsIn = MibTableColumn((1, 3, 6, 1, 3, 51, 1, 3, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcStatsFRMRsIn.setStatus('mandatory')
if mibBuilder.loadTexts: llcCcStatsFRMRsIn.setDescription('This object reflects the total frame reject (FRMR) frames received from an adjacent LLC link station since link station startup.')
llcCcStatsFRMRsOut = MibTableColumn((1, 3, 6, 1, 3, 51, 1, 3, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcStatsFRMRsOut.setStatus('mandatory')
if mibBuilder.loadTexts: llcCcStatsFRMRsOut.setDescription('This object reflects the total frame reject (FRMR) frames transmitted to an adjacent LLC link station since link station startup.')
llcCcStatsDISCsIn = MibTableColumn((1, 3, 6, 1, 3, 51, 1, 3, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcStatsDISCsIn.setStatus('mandatory')
if mibBuilder.loadTexts: llcCcStatsDISCsIn.setDescription('This object reflects the total number of disconnect (DISC) requests received from an adjacent link station since link station startup. At link station startup time, this object must be initialized to zero.')
llcCcStatsDISCsOut = MibTableColumn((1, 3, 6, 1, 3, 51, 1, 3, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcStatsDISCsOut.setStatus('mandatory')
if mibBuilder.loadTexts: llcCcStatsDISCsOut.setDescription('This object reflects the total number of disconnect (DISC) requests transmited to an adjacent link station since link station startup. At link station startup time, this object must be initialized to zero.')
llcCcStatsUAsIn = MibTableColumn((1, 3, 6, 1, 3, 51, 1, 3, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcStatsUAsIn.setStatus('mandatory')
if mibBuilder.loadTexts: llcCcStatsUAsIn.setDescription('This object reflects the total number of unnumbered acknowledgements (UA) requests received from an adjacent link station since link station startup. At link station startup time, this object must be initialized to zero.')
llcCcStatsUAsOut = MibTableColumn((1, 3, 6, 1, 3, 51, 1, 3, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcStatsUAsOut.setStatus('mandatory')
if mibBuilder.loadTexts: llcCcStatsUAsOut.setDescription('This object reflects the total number of unnumbered acknowledgements (UA) requests transmited to an adjacent link station since link station startup. At link station startup time, this object must be initialized to zero.')
llcCcStatsDMsIn = MibTableColumn((1, 3, 6, 1, 3, 51, 1, 3, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcStatsDMsIn.setStatus('mandatory')
if mibBuilder.loadTexts: llcCcStatsDMsIn.setDescription('This object reflects the total number of disconnect mode (DM) requests received from an adjacent link station since link station startup. At link station startup time, this object must be initialized to zero.')
llcCcStatsDMsOut = MibTableColumn((1, 3, 6, 1, 3, 51, 1, 3, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcStatsDMsOut.setStatus('mandatory')
if mibBuilder.loadTexts: llcCcStatsDMsOut.setDescription('This object reflects the total number of disconnect mode (DM) requests transmited to an adjacent link station since link station startup. At link station startup time, this object must be initialized to zero.')
llcCcStatsSABMEsIn = MibTableColumn((1, 3, 6, 1, 3, 51, 1, 3, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcStatsSABMEsIn.setStatus('mandatory')
if mibBuilder.loadTexts: llcCcStatsSABMEsIn.setDescription('This object reflects the total number of set normal response mode (SABME) requests received from an adjacent link station since link station startup. At link station startup time, this object must be initialized to zero.')
llcCcStatsSABMEsOut = MibTableColumn((1, 3, 6, 1, 3, 51, 1, 3, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcStatsSABMEsOut.setStatus('mandatory')
if mibBuilder.loadTexts: llcCcStatsSABMEsOut.setDescription('This object reflects the total number of set normal response mode (SABME) requests transmited to an adjacent link station since link station startup. At link station startup time, this object must be initialized to zero.')
llcCcStatsProtocolErrs = MibTableColumn((1, 3, 6, 1, 3, 51, 1, 3, 3, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcStatsProtocolErrs.setStatus('mandatory')
if mibBuilder.loadTexts: llcCcStatsProtocolErrs.setDescription('This object reflects the total occurrences, since link station startup, where this LLC link station has inactivated the link as a result of receiving a frame from its adjacent link station which was in violation of the protocol. At link station startup time, this object must be initialized to zero.')
llcCcStatsActivityTOs = MibTableColumn((1, 3, 6, 1, 3, 51, 1, 3, 3, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcStatsActivityTOs.setStatus('mandatory')
if mibBuilder.loadTexts: llcCcStatsActivityTOs.setDescription('This object reflects the total occurrences, since startup, where this LLC link station has inactivated the link as a result of no activity on the link. At link station startup time, this object must be initialized to zero.')
llcCcStatsRetriesExps = MibTableColumn((1, 3, 6, 1, 3, 51, 1, 3, 3, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcStatsRetriesExps.setStatus('mandatory')
if mibBuilder.loadTexts: llcCcStatsRetriesExps.setDescription('This object reflects the total occurrences, since startup, where this LLC link station has inactivated the link as a result of a retry sequence being exhausted. At link station startup time, this object must be initialized to zero.')
llcPortStatusChange = NotificationType((1, 3, 6, 1, 3, 51, 1, 4) + (0,1)).setObjects(("SNA-LLC-MIB", "llcPortOperLastFailTime"), ("SNA-LLC-MIB", "llcPortOperLastFailCause"))
if mibBuilder.loadTexts: llcPortStatusChange.setDescription('This trap indicates that the state of an LLC port has transitioned to active or inactive.')
llcCcStatusChange = NotificationType((1, 3, 6, 1, 3, 51, 1, 4) + (0,2)).setObjects(("SNA-LLC-MIB", "llcCcOperState"), ("SNA-LLC-MIB", "llcCcAdminState"), ("SNA-LLC-MIB", "llcCcOperLastFailTime"), ("SNA-LLC-MIB", "llcCcOperLastFailCause"), ("SNA-LLC-MIB", "llcCcOperLastFailFRMRInfo"))
if mibBuilder.loadTexts: llcCcStatusChange.setDescription('This trap indicates that the state of an LLC link station has transitioned to contacted or discontacted.')
llcCorePortAdminGroup = MibIdentifier((1, 3, 6, 1, 3, 51, 1, 5, 2, 1, 1))
llcCorePortOperGroup = MibIdentifier((1, 3, 6, 1, 3, 51, 1, 5, 2, 1, 2))
llcCorePortStatsGroup = MibIdentifier((1, 3, 6, 1, 3, 51, 1, 5, 2, 1, 3))
llcCoreCcAdminGroup = MibIdentifier((1, 3, 6, 1, 3, 51, 1, 5, 2, 1, 4))
llcCoreCcOperGroup = MibIdentifier((1, 3, 6, 1, 3, 51, 1, 5, 2, 1, 5))
llcCoreCcStatsGroup = MibIdentifier((1, 3, 6, 1, 3, 51, 1, 5, 2, 1, 6))
llcCoreCompliance = MibIdentifier((1, 3, 6, 1, 3, 51, 1, 5, 1, 1))
mibBuilder.exportSymbols("SNA-LLC-MIB", llcCcOperLastFailFRMRInfo=llcCcOperLastFailFRMRInfo, llcCcAdminMaxUnackedIPDUsSend=llcCcAdminMaxUnackedIPDUsSend, llcPortStatsPollRspsIn=llcPortStatsPollRspsIn, llcSapAdminMaxIPDUOctetsSend=llcSapAdminMaxIPDUOctetsSend, llcCcAdminEntry=llcCcAdminEntry, llcSapStatsTable=llcSapStatsTable, llcCcOperMaxIPDUOctetsRcv=llcCcOperMaxIPDUOctetsRcv, llcCcOperPbitTimer=llcCcOperPbitTimer, llcCcOperDelayAckCount=llcCcOperDelayAckCount, llcPortGroup=llcPortGroup, llcCorePortStatsGroup=llcCorePortStatsGroup, llcCcLMac=llcCcLMac, llcCcGroup=llcCcGroup, llcSapStatsTESTsOut=llcSapStatsTESTsOut, llcPortAdminMaxUnackedIPDUsSend=llcPortAdminMaxUnackedIPDUsSend, llcPortAdminInactTimer=llcPortAdminInactTimer, llcCcOperState=llcCcOperState, llcCcAdminDelayAckCount=llcCcAdminDelayAckCount, llcPortOperEntry=llcPortOperEntry, llcPortAdminName=llcPortAdminName, llcSapAdminTable=llcSapAdminTable, llcPortOperName=llcPortOperName, llc=llc, llcCcStatsIFramesIn=llcCcStatsIFramesIn, llcCcAdminBusyTimer=llcCcAdminBusyTimer, llcPortAdminAckTimer=llcPortAdminAckTimer, llcSapAdminMaxUnackedIPDUsSend=llcSapAdminMaxUnackedIPDUsSend, llcCcOperMaxRetransmits=llcCcOperMaxRetransmits, llcCcStatsTable=llcCcStatsTable, llcPortStatsRetriesExps=llcPortStatsRetriesExps, llcCcStatsUAsIn=llcCcStatsUAsIn, llcCcStatsDMsOut=llcCcStatsDMsOut, llcCcStatsFRMRsIn=llcCcStatsFRMRsIn, llcSapAdminMaxUnackedIPDUsRcv=llcSapAdminMaxUnackedIPDUsRcv, llcCcAdminMaxUnackedIPDUsRcv=llcCcAdminMaxUnackedIPDUsRcv, llcPortAdminDelayAckCount=llcPortAdminDelayAckCount, llcCorePortOperGroup=llcCorePortOperGroup, llcCompliances=llcCompliances, llcCcAdminMaxIPDUOctetsRcv=llcCcAdminMaxIPDUOctetsRcv, llcCcOperLastFailCause=llcCcOperLastFailCause, llcSapAdminRejTimer=llcSapAdminRejTimer, llcSapOperEntry=llcSapOperEntry, llcSapAdminAckTimer=llcSapAdminAckTimer, llcPortAdminMaxIPDUOctetsRcv=llcPortAdminMaxIPDUOctetsRcv, llcSapGroup=llcSapGroup, llcCcOperInactTimer=llcCcOperInactTimer, llcGroups=llcGroups, llcPortStatsIFramesIn=llcPortStatsIFramesIn, llcPortAdminEntry=llcPortAdminEntry, llcSapAdminDelayAckCount=llcSapAdminDelayAckCount, llcCcOperDelayAckTimer=llcCcOperDelayAckTimer, llcCcStatsREJsOut=llcCcStatsREJsOut, llcCcAdminTable=llcCcAdminTable, llcPortStatusChange=llcPortStatusChange, llcPortAdminMaxUnackedIPDUsRcv=llcPortAdminMaxUnackedIPDUsRcv, llcPortAdminPbitTimer=llcPortAdminPbitTimer, llcCcStatsProtocolErrs=llcCcStatsProtocolErrs, llcConformance=llcConformance, llcPortOperLastFailCause=llcPortOperLastFailCause, llcCcStatsSABMEsOut=llcCcStatsSABMEsOut, llcCcStatsRetransmitsOut=llcCcStatsRetransmitsOut, llcSapAdminState=llcSapAdminState, llcCcStatsDMsIn=llcCcStatsDMsIn, llcCcOperLastModifyTime=llcCcOperLastModifyTime, llcCcStatsEntry=llcCcStatsEntry, llcPortAdminTable=llcPortAdminTable, llcPortOperLastModifyTime=llcPortOperLastModifyTime, llcCcStatusChange=llcCcStatusChange, llcCcOperAckTimer=llcCcOperAckTimer, llcCcAdminAckTimer=llcCcAdminAckTimer, llcCcAdminMaxRetransmits=llcCcAdminMaxRetransmits, llcCcLSap=llcCcLSap, llcSapAdminBusyTimer=llcSapAdminBusyTimer, llcCcAdminInactTimer=llcCcAdminInactTimer, llcPortStatsRetransmitsOut=llcPortStatsRetransmitsOut, llcPortStatsRemoteBusies=llcPortStatsRemoteBusies, llcCcOperRejTimer=llcCcOperRejTimer, llcPortStatsIFramesOut=llcPortStatsIFramesOut, llcCcOperMaxUnackedIPDUsRcv=llcCcOperMaxUnackedIPDUsRcv, llcCcStatsIFramesOut=llcCcStatsIFramesOut, llcCcStatsSABMEsIn=llcCcStatsSABMEsIn, llcCcOperTable=llcCcOperTable, llcPortStatsPhysicalFailures=llcPortStatsPhysicalFailures, llcSapAdminDelayAckTimer=llcSapAdminDelayAckTimer, llcCcStatsRetriesExps=llcCcStatsRetriesExps, llcPortOperISTATUS=llcPortOperISTATUS, llcTraps=llcTraps, llcCcOperEntry=llcCcOperEntry, llcCcOperBusyTimer=llcCcOperBusyTimer, llcCcStatsFRMRsOut=llcCcStatsFRMRsOut, llcSapStatsUIFramesIn=llcSapStatsUIFramesIn, llcCcOperMaxUnackedIPDUsSend=llcCcOperMaxUnackedIPDUsSend, llcCcStatsRemoteBusies=llcCcStatsRemoteBusies, llcPortStatsRetransmitsIn=llcPortStatsRetransmitsIn, llcSapStatsXIDsOut=llcSapStatsXIDsOut, llcCcAdminMaxIPDUOctetsSend=llcCcAdminMaxIPDUOctetsSend, llcPortStatsPollsIn=llcPortStatsPollsIn, llcCoreGroups=llcCoreGroups, llcSapAdminInactTimer=llcSapAdminInactTimer, llcCcOperLastFailTime=llcCcOperLastFailTime, llcPortStatsPollsOut=llcPortStatsPollsOut, llcPortStatsProtocolErrs=llcPortStatsProtocolErrs, llcCcOperMaxIPDUOctetsSend=llcCcOperMaxIPDUOctetsSend, llcCcStatsUAsOut=llcCcStatsUAsOut, llcSapAdminMaxRetransmits=llcSapAdminMaxRetransmits, llcCcAdminPbitTimer=llcCcAdminPbitTimer, llcPortAdminBusyTimer=llcPortAdminBusyTimer, llcSapAdminEntry=llcSapAdminEntry, llcPortStatsTable=llcPortStatsTable, llcPortOperTable=llcPortOperTable, llcPortAdminMaxIPDUOctetsSend=llcPortAdminMaxIPDUOctetsSend, llcSapOperTable=llcSapOperTable, llcCorePortAdminGroup=llcCorePortAdminGroup, llcSapOperStatus=llcSapOperStatus, llcCoreCompliance=llcCoreCompliance, llcPortStatsEntry=llcPortStatsEntry, llcCoreCcStatsGroup=llcCoreCcStatsGroup, llcSapAdminPbitTimer=llcSapAdminPbitTimer, llcCcRSap=llcCcRSap, llcPortStatsPollRspsOut=llcPortStatsPollRspsOut, llcCcOperRole=llcCcOperRole, llcSapStatsEntry=llcSapStatsEntry, llcPortAdminSimRim=llcPortAdminSimRim, llcSapStatsXIDsIn=llcSapStatsXIDsIn, llcCcStatsLocalBusies=llcCcStatsLocalBusies, llcCcOperCreateTime=llcCcOperCreateTime, llcCoreCcAdminGroup=llcCoreCcAdminGroup, llcCoreCcOperGroup=llcCoreCcOperGroup, llcCcStatsActivityTOs=llcCcStatsActivityTOs, llcPortAdminDelayAckTimer=llcPortAdminDelayAckTimer, llcCcStatsIOctetsIn=llcCcStatsIOctetsIn, llcCcStatsREJsIn=llcCcStatsREJsIn, llcPortStatsOctetsOut=llcPortStatsOctetsOut, llcCcAdminDelayAckTimer=llcCcAdminDelayAckTimer, llcSapNumber=llcSapNumber, llcCcRMac=llcCcRMac, llcCcAdminState=llcCcAdminState, llcSapAdminMaxIPDUOctetsRcv=llcSapAdminMaxIPDUOctetsRcv, llcSapStatsUIFramesOut=llcSapStatsUIFramesOut, llcCcStatsIOctetsOut=llcCcStatsIOctetsOut, snaDLCexp=snaDLCexp, llcPortAdminMaxRetransmits=llcPortAdminMaxRetransmits, llcPortAdminRejTimer=llcPortAdminRejTimer, llcCcStatsDISCsOut=llcCcStatsDISCsOut, llcPortStatsLocalBusies=llcPortStatsLocalBusies, llcCcStatsRetransmitsIn=llcCcStatsRetransmitsIn, llcPortAdminState=llcPortAdminState, llcPortOperLastFailTime=llcPortOperLastFailTime, llcPortStatsOctetsIn=llcPortStatsOctetsIn, llcPortStatsActivityTOs=llcPortStatsActivityTOs, llcCcAdminRowStatus=llcCcAdminRowStatus, llcSapStatsTESTsIn=llcSapStatsTESTsIn, llcCcAdminRejTimer=llcCcAdminRejTimer, llcCcStatsDISCsIn=llcCcStatsDISCsIn)
