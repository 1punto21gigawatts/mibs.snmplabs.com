#
# PySNMP MIB module APSECURITY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/APSECURITY-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:24:20 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
acmepacketMgmt, = mibBuilder.importSymbols("ACMEPACKET-SMI", "acmepacketMgmt")
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
InetAddress, InetPortNumber, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetPortNumber", "InetAddressType")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Bits, Counter64, MibIdentifier, Counter32, Unsigned32, Gauge32, IpAddress, Integer32, ModuleIdentity, NotificationType, iso, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter64", "MibIdentifier", "Counter32", "Unsigned32", "Gauge32", "IpAddress", "Integer32", "ModuleIdentity", "NotificationType", "iso", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks")
DisplayString, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "TruthValue")
apSecurityModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 9148, 3, 9))
apSecurityModule.setRevisions(('2012-07-16 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: apSecurityModule.setRevisionsDescriptions(('Updated contact info',))
if mibBuilder.loadTexts: apSecurityModule.setLastUpdated('201207160000Z')
if mibBuilder.loadTexts: apSecurityModule.setOrganization('Acme Packet, Inc')
if mibBuilder.loadTexts: apSecurityModule.setContactInfo(' Customer Service Postal: Acme Packet, Inc 100 Crosby Drive Bedford, MA 01730 US Tel: 1-781-328-4400 E-mail: support@acmepacket.com')
if mibBuilder.loadTexts: apSecurityModule.setDescription('The Net-Net SECURITY MIB for Acme Packet')
apSecurityMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1))
apSecurityIPsecTunCount = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 1), Unsigned32()).setUnits('tunnels').setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIPsecTunCount.setStatus('current')
if mibBuilder.loadTexts: apSecurityIPsecTunCount.setDescription('The number of IPsec tunnels currently in progress.')
apSecurityIPsecTunCapPct = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIPsecTunCapPct.setStatus('current')
if mibBuilder.loadTexts: apSecurityIPsecTunCapPct.setDescription('The percentage of licensed IPsec tunnels currently in progress.')
apSecurityIkeInterfaceStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 3), )
if mibBuilder.loadTexts: apSecurityIkeInterfaceStatsTable.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceStatsTable.setDescription('The table of Ike statistics per ike-interface for IKE negotiations.')
apSecurityIkeInterfaceStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 3, 1), ).setIndexNames((0, "APSECURITY-MIB", "apSecurityIkeInterfaceType"), (0, "APSECURITY-MIB", "apSecurityIkeInterfaceAddress"))
if mibBuilder.loadTexts: apSecurityIkeInterfaceStatsEntry.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceStatsEntry.setDescription('IKE negotiation statistics for an IKE-interface.')
apSecurityIkeInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 3, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceType.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceType.setDescription('IPAddress type of the IKE-interface')
apSecurityIkeInterfaceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 3, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceAddress.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceAddress.setDescription('IPAddress of the IKE-interface')
apSecurityIkeInterfaceCpuOverloadErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 3, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceCpuOverloadErrors.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceCpuOverloadErrors.setDescription('The count of CPU overload rejections on the IKE-interface')
apSecurityIkeInterfaceInitCookieErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceInitCookieErrors.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceInitCookieErrors.setDescription('The count of IKE COOKIE errors on the IKE-interface')
apSecurityIkeInterfaceAuthErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceAuthErrors.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceAuthErrors.setDescription('The count of IKE AUTH payload errors on the IKE-interface')
apSecurityIkeInterfaceEapAccessRequestErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 3, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceEapAccessRequestErrors.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceEapAccessRequestErrors.setDescription('The count of IKE EAP access request errors on the IKE-interface')
apSecurityIkeInterfaceEapAccessChallengeErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 3, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceEapAccessChallengeErrors.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceEapAccessChallengeErrors.setDescription('The count of IKE EAP access challenge errors on the IKE-interface')
apSecurityIkeInterfaceTsErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 3, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceTsErrors.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceTsErrors.setDescription('The count of IKE TS errors on the IKE-interface')
apSecurityIkeInterfaceCpErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 3, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceCpErrors.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceCpErrors.setDescription('The count of IKE config payload errors on the IKE-interface')
apSecurityIkeInterfaceKeErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 3, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceKeErrors.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceKeErrors.setDescription('The count of IKE KE errors on the IKE-interface')
apSecurityIkeInterfaceProposalErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 3, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceProposalErrors.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceProposalErrors.setDescription('The count of IKE proposal payload errors on the IKE-interface')
apSecurityIkeInterfaceSyntaxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 3, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceSyntaxErrors.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceSyntaxErrors.setDescription('The count of IKE Syntax errors on the IKE-interface')
apSecurityIkeInterfaceCriticalPayloadErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 3, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceCriticalPayloadErrors.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceCriticalPayloadErrors.setDescription('The count of IKE critical payload errors on the IKE-interface')
apSecurityIkeInterfaceAuthFailureTca = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 3, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceAuthFailureTca.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceAuthFailureTca.setDescription('Dummy object for the IKE authentication failure TCA')
apSecurityIkeInterfaceTunnelRemovalsTca = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 3, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceTunnelRemovalsTca.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceTunnelRemovalsTca.setDescription('Dummy object for the IPsec tunnel removals TCA')
apSecurityIkeInterfaceDpdTca = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 3, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceDpdTca.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceDpdTca.setDescription('Dummy object for the IKE dead peer detection TCA')
apSecurityTacacsTable = MibTable((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 4), )
if mibBuilder.loadTexts: apSecurityTacacsTable.setStatus('current')
if mibBuilder.loadTexts: apSecurityTacacsTable.setDescription('The table of all tacacs, including the system-wide consolidated license (always index 1)')
apSecurityTacacsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 4, 1), ).setIndexNames((0, "APSECURITY-MIB", "apSecurityTacacsIndex"))
if mibBuilder.loadTexts: apSecurityTacacsEntry.setStatus('current')
if mibBuilder.loadTexts: apSecurityTacacsEntry.setDescription('An entry in the table of all licenses')
apSecurityTacacsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: apSecurityTacacsIndex.setStatus('current')
if mibBuilder.loadTexts: apSecurityTacacsIndex.setDescription('Unique index for the tacacs table. ')
apSecurityTacacsServer = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityTacacsServer.setStatus('current')
if mibBuilder.loadTexts: apSecurityTacacsServer.setDescription('Server for last transaction')
apSecurityTacacsCliCommands = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 4, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityTacacsCliCommands.setStatus('current')
if mibBuilder.loadTexts: apSecurityTacacsCliCommands.setDescription('Number of CLI commands sent for TACACS+ accounting')
apSecurityTacacsSuccessAuthentication = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 4, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityTacacsSuccessAuthentication.setStatus('current')
if mibBuilder.loadTexts: apSecurityTacacsSuccessAuthentication.setDescription('Number of successful TACACS+ authentication requests')
apSecurityTacacsFailureAuthentication = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 4, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityTacacsFailureAuthentication.setStatus('current')
if mibBuilder.loadTexts: apSecurityTacacsFailureAuthentication.setDescription('Number of failed TACACS+ authentication requests')
apSecurityTacacsSuccessAuthorization = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 4, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityTacacsSuccessAuthorization.setStatus('current')
if mibBuilder.loadTexts: apSecurityTacacsSuccessAuthorization.setDescription('Number of successful TACACS+ authorization requests')
apSecurityTacacsFailureAuthorization = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 4, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityTacacsFailureAuthorization.setStatus('current')
if mibBuilder.loadTexts: apSecurityTacacsFailureAuthorization.setDescription('Number of failed TACACS+ authorization requests')
apSecurityOCSRIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 5), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSecurityOCSRIpAddress.setStatus('current')
if mibBuilder.loadTexts: apSecurityOCSRIpAddress.setDescription('OCSR server IP address.')
apSecurityOCSRHostname = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 6), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSecurityOCSRHostname.setStatus('current')
if mibBuilder.loadTexts: apSecurityOCSRHostname.setDescription('OCSR server hostname.')
apSecurityCrlIssuer = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 7), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSecurityCrlIssuer.setStatus('current')
if mibBuilder.loadTexts: apSecurityCrlIssuer.setDescription('CRL issuer name.')
apSecurityCspName = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 8), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSecurityCspName.setStatus('current')
if mibBuilder.loadTexts: apSecurityCspName.setDescription('Cert-status-profile object name for fetching the CRL. If the CRL is just loaded from local file, then it is specified as file')
apSecurityIkeInterfaceInfoTable = MibTable((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9), )
if mibBuilder.loadTexts: apSecurityIkeInterfaceInfoTable.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceInfoTable.setDescription('The table of Ike Info per ike-interface for IKE negotiations.')
apSecurityIkeInterfaceInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1), )
apSecurityIkeInterfaceStatsEntry.registerAugmentions(("APSECURITY-MIB", "apSecurityIkeInterfaceInfoEntry"))
apSecurityIkeInterfaceInfoEntry.setIndexNames(*apSecurityIkeInterfaceStatsEntry.getIndexNames())
if mibBuilder.loadTexts: apSecurityIkeInterfaceInfoEntry.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceInfoEntry.setDescription('IKE info for an IKE-interface.')
apSecurityIkeInterfaceChildSaRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceChildSaRequest.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceChildSaRequest.setDescription('Number of Child SA Requests on the IKE-interface.')
apSecurityIkeInterfaceChildSaSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceChildSaSuccess.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceChildSaSuccess.setDescription('Number of Child SA Success on the IKE-interface.')
apSecurityIkeInterfaceChildSaFail = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceChildSaFail.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceChildSaFail.setDescription('Number of Child SA Failures on the IKE-interface.')
apSecurityIkeInterfaceChildSaDelRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceChildSaDelRequest.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceChildSaDelRequest.setDescription('Number of Child SA Delete Requests on the IKE-interface.')
apSecurityIkeInterfaceChildSaDelSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceChildSaDelSuccess.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceChildSaDelSuccess.setDescription('Number of Child SA Delete Success on the IKE-interface.')
apSecurityIkeInterfaceChildSaDelFail = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceChildSaDelFail.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceChildSaDelFail.setDescription('Number of Child SA Delete Failures on the IKE-interface.')
apSecurityIkeInterfaceChildSaRekey = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceChildSaRekey.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceChildSaRekey.setDescription('Number of Child SA Rekeys on the IKE-interface.')
apSecurityIkeInterfaceInitialChildSa = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceInitialChildSa.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceInitialChildSa.setDescription('Number of Initial Child SA Establishments on the IKE-interface.')
apSecurityIkeInterfaceDPDRecvPortChange = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceDPDRecvPortChange.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceDPDRecvPortChange.setDescription('Number of DPD Port Change Received on the IKE-interface.')
apSecurityIkeInterfaceDPDRecvIPChange = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceDPDRecvIPChange.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceDPDRecvIPChange.setDescription('Number of DPD IP Change Received on the IKE-interface.')
apSecurityIkeInterfaceDPDRespRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceDPDRespRecv.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceDPDRespRecv.setDescription('Number of DPD Responses Received on the IKE-interface.')
apSecurityIkeInterfaceDPDRespNotRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceDPDRespNotRecv.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceDPDRespNotRecv.setDescription('Number of DPD Responses Not Received on the IKE-interface.')
apSecurityIkeInterfaceDPDRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceDPDRecv.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceDPDRecv.setDescription('Number of DPD Packets Received on the IKE-interface.')
apSecurityIkeInterfaceDPDRetran = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceDPDRetran.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceDPDRetran.setDescription('Number of DPD Packets Retransmitted on the IKE-interface.')
apSecurityIkeInterfaceDPDSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceDPDSent.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceDPDSent.setDescription('Number of DPD Packets Sent on the IKE-interface.')
apSecurityIkeInterfaceIKESAPacketSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceIKESAPacketSent.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceIKESAPacketSent.setDescription('Number of IKE SA Packets Sent on the IKE-interface.')
apSecurityIkeInterfaceIKESAPacketRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceIKESAPacketRcv.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceIKESAPacketRcv.setDescription('Number of IKE SA Packets Received on the IKE-interface.')
apSecurityIkeInterfaceIKESAPacketDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceIKESAPacketDropped.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceIKESAPacketDropped.setDescription('Number of IKE SA Packets dropped on the IKE-interface.')
apSecurityIkeInterfaceAuthFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceAuthFailure.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceAuthFailure.setDescription('Number of Authentication Failures on the IKE-interface.')
apSecurityIkeInterfaceMsgError = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceMsgError.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceMsgError.setDescription('Number of IKE Message Errors on the IKE-interface.')
apSecurityIkeInterfaceAuthIDError = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceAuthIDError.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceAuthIDError.setDescription('Number of Authentication ID Errors on the IKE-interface.')
apSecurityIkeInterfaceAuthCertCheckRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceAuthCertCheckRequest.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceAuthCertCheckRequest.setDescription('Number of Certificate Status Requests on the IKE-interface.')
apSecurityIkeInterfaceAuthCertCheckSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 23), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceAuthCertCheckSuccess.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceAuthCertCheckSuccess.setDescription('Number of Certificate Status Success on the IKE-interface.')
apSecurityIkeInterfaceAuthCertCheckFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 24), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceAuthCertCheckFailure.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceAuthCertCheckFailure.setDescription('Number of Certificate Status Failures on the IKE-interface.')
apSecurityIkeInterfaceDDosSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 25), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceDDosSent.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceDDosSent.setDescription('Number of DDoS Sent on the IKE-interface.')
apSecurityIkeInterfaceDDosRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 26), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceDDosRecv.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceDDosRecv.setDescription('Number of DDoS Received on the IKE-interface.')
apSecurityIkeInterfaceMessageRetrans = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 27), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceMessageRetrans.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceMessageRetrans.setDescription('Number of IKE Message Retransmissions on the IKE-interface.')
apSecurityIkeInterfaceSAInitMsgRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 28), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceSAInitMsgRecv.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceSAInitMsgRecv.setDescription('Number of IKE_SA_INIT messages received on the IKE-interface.')
apSecurityIkeInterfaceSAInitMsgSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 29), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceSAInitMsgSent.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceSAInitMsgSent.setDescription('Number of IKE_SA_INIT messages sent on the IKE-interface.')
apSecurityIkeInterfaceSAEstablishmentAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 30), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceSAEstablishmentAttempts.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceSAEstablishmentAttempts.setDescription('Number of IKE_SA establishment attempts on the IKE-interface.')
apSecurityIkeInterfaceSAEstablishmentSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 31), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceSAEstablishmentSuccess.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceSAEstablishmentSuccess.setDescription('Number of IKE_SA establishment success on the IKE-interface.')
apSecurityIkeInterfaceTunnelRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 32), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceTunnelRate.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceTunnelRate.setDescription('Number of Tunnels per second averaged over 100sec window on the IKE-interface.')
apSecurityIkeInterfaceCurrentChildSaPair = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 33), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceCurrentChildSaPair.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceCurrentChildSaPair.setDescription('Current number of Child Security Association Pairs (Tunnels) on the IKE-interface.')
apSecurityCertificateTable = MibTable((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 10), )
if mibBuilder.loadTexts: apSecurityCertificateTable.setStatus('current')
if mibBuilder.loadTexts: apSecurityCertificateTable.setDescription('The table of locally installed certifcate.')
apSecurityCertificateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 10, 1), ).setIndexNames((0, "APSECURITY-MIB", "apSecurityCertificateConfigId"), (0, "APSECURITY-MIB", "apSecurityCertificateIndex"))
if mibBuilder.loadTexts: apSecurityCertificateEntry.setStatus('current')
if mibBuilder.loadTexts: apSecurityCertificateEntry.setDescription('The certificate entry.')
apSecurityCertificateConfigId = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 10, 1, 1), Unsigned32())
if mibBuilder.loadTexts: apSecurityCertificateConfigId.setStatus('current')
if mibBuilder.loadTexts: apSecurityCertificateConfigId.setDescription('The internal configuration ID of the certificate. ')
apSecurityCertificateIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 10, 1, 2), Unsigned32())
if mibBuilder.loadTexts: apSecurityCertificateIndex.setStatus('current')
if mibBuilder.loadTexts: apSecurityCertificateIndex.setDescription('The internal index of the certificate. Combined with configuration ID is the unique ID of a certificate ')
apSecurityCertificateRecordName = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 10, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityCertificateRecordName.setStatus('current')
if mibBuilder.loadTexts: apSecurityCertificateRecordName.setDescription("The SBC's configuration record name for the certificate. ")
apSecurityCertificateCertSubject = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 10, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityCertificateCertSubject.setStatus('current')
if mibBuilder.loadTexts: apSecurityCertificateCertSubject.setDescription('The certificate subject. ')
apSecurityCertificateCertStart = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 10, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityCertificateCertStart.setStatus('current')
if mibBuilder.loadTexts: apSecurityCertificateCertStart.setDescription('The start time and date of the certificate. ')
apSecurityCertificateCertExpire = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 10, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityCertificateCertExpire.setStatus('current')
if mibBuilder.loadTexts: apSecurityCertificateCertExpire.setDescription('The expiration time and date of the certificate. ')
apSecurityCertificateCertIssuer = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 10, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityCertificateCertIssuer.setStatus('current')
if mibBuilder.loadTexts: apSecurityCertificateCertIssuer.setDescription('The issuer of the certificate.')
apSecurityCertificateCertIsCA = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 10, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityCertificateCertIsCA.setStatus('current')
if mibBuilder.loadTexts: apSecurityCertificateCertIsCA.setDescription('Boolean value indicating if the certificate is a CA certificate.')
apSecurityNotificationObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 9, 2))
apSecuritySpi = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 2, 1), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSecuritySpi.setStatus('current')
if mibBuilder.loadTexts: apSecuritySpi.setDescription('Tunnel security-policy-index.')
apSecuritySrcIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 2, 2), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSecuritySrcIpAddress.setStatus('current')
if mibBuilder.loadTexts: apSecuritySrcIpAddress.setDescription('Source IP address.')
apSecurityDstIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 2, 3), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSecurityDstIpAddress.setStatus('current')
if mibBuilder.loadTexts: apSecurityDstIpAddress.setDescription('Destination IP address.')
apSecurityIPSECMode = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("tunnel", 0), ("transport", 1)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSecurityIPSECMode.setStatus('current')
if mibBuilder.loadTexts: apSecurityIPSECMode.setDescription('IPSec mode.')
apSecurityEncryptionAlg = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("any", 0), ("alg-des", 1), ("alg-3des", 2), ("alg-blowfish", 3), ("alg-aes", 4), ("null", 5)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSecurityEncryptionAlg.setStatus('current')
if mibBuilder.loadTexts: apSecurityEncryptionAlg.setDescription('Type of the encryption algorithms supported in the tunnel setup.')
apSecurityAuthAlg = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("any", 0), ("md5", 1), ("sha1", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSecurityAuthAlg.setStatus('current')
if mibBuilder.loadTexts: apSecurityAuthAlg.setDescription('Type of the authentication algorithms supported in the tunnel setup.')
apSecuritySecProtocol = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("ah", 0), ("esp", 1), ("esp-auth", 2), ("esp-null", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSecuritySecProtocol.setStatus('current')
if mibBuilder.loadTexts: apSecuritySecProtocol.setDescription('Type of the security protocol supported in the tunnel setup.')
apSecurityFailureCause = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("incorrect-id", 0), ("incorrect-user-passwd", 1), ("incorrect-shared-secret", 2), ("incorrect-dh-group", 3), ("incorrect-encryption-alg", 4), ("incorrect-auth-alg", 5), ("incorrect-sec-protocol", 6), ("incorrect-hash", 7), ("incorrect-mode", 8), ("service-unavailable", 9), ("access-reject", 10), ("initiator-timeout", 11), ("invalid-certificate", 12), ("authentication-failure", 13), ("authorization-failure", 14), ("accounting-failure", 15)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSecurityFailureCause.setStatus('current')
if mibBuilder.loadTexts: apSecurityFailureCause.setDescription('Reason for failure in the IKE, IPSec or RADIUS areas.')
apSecurityFailureArea = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("ike", 0), ("ipsec", 1), ("radius", 2), ("tacacs", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSecurityFailureArea.setStatus('current')
if mibBuilder.loadTexts: apSecurityFailureArea.setDescription('Where the failure happened.')
apSecurityStatus = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("success", 1), ("failure", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSecurityStatus.setStatus('current')
if mibBuilder.loadTexts: apSecurityStatus.setDescription('Status.')
apSecurityDateTime = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 2, 11), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSecurityDateTime.setStatus('current')
if mibBuilder.loadTexts: apSecurityDateTime.setDescription('Time as configured at the Net-Net SBC when an event completes.')
apSecurityUser = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 2, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSecurityUser.setStatus('current')
if mibBuilder.loadTexts: apSecurityUser.setDescription('User name')
apSecurityPeerPort = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 2, 13), InetPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSecurityPeerPort.setStatus('current')
if mibBuilder.loadTexts: apSecurityPeerPort.setDescription('IKE peer port')
apSecurityPeerIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 2, 14), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSecurityPeerIpAddress.setStatus('current')
if mibBuilder.loadTexts: apSecurityPeerIpAddress.setDescription('IKE peer IP address.')
apSecurityCRLServer = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 2, 15), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSecurityCRLServer.setStatus('current')
if mibBuilder.loadTexts: apSecurityCRLServer.setDescription('CRL Server FQDN if configured.')
apSecurityCRLRetrievalFailureCause = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 2, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("internal", 0), ("incorrect-response", 1), ("timeout", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSecurityCRLRetrievalFailureCause.setStatus('current')
if mibBuilder.loadTexts: apSecurityCRLRetrievalFailureCause.setDescription('Reason for failure in the CRL retrieval.')
apSecurityLastSuccessfulCRLRetrieval = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 2, 17), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSecurityLastSuccessfulCRLRetrieval.setStatus('current')
if mibBuilder.loadTexts: apSecurityLastSuccessfulCRLRetrieval.setDescription('Last successful CRL retrieval.')
apSecurityCRLServerIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 2, 18), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSecurityCRLServerIPAddress.setStatus('current')
if mibBuilder.loadTexts: apSecurityCRLServerIPAddress.setDescription('CRL Server IP address.')
apSecurityGTPProfileName = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 2, 19), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSecurityGTPProfileName.setStatus('current')
if mibBuilder.loadTexts: apSecurityGTPProfileName.setDescription('GTP Profile Name configured.')
apSecurityGTPHostName = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 2, 20), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSecurityGTPHostName.setStatus('current')
if mibBuilder.loadTexts: apSecurityGTPHostName.setDescription('GGSN Host Name if configured.')
apSecurityGTPLinkFailureCause = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 2, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("internal", 0), ("timeout", 1), ("versionError", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSecurityGTPLinkFailureCause.setStatus('current')
if mibBuilder.loadTexts: apSecurityGTPLinkFailureCause.setDescription('Reason for failure in the GTPCRL retrieval.')
apSecurityGTPIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 2, 22), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSecurityGTPIPAddress.setStatus('current')
if mibBuilder.loadTexts: apSecurityGTPIPAddress.setDescription('GGSN IP address.')
apSecuritySrcAddressFamily = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 2, 23), InetAddressType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSecuritySrcAddressFamily.setStatus('current')
if mibBuilder.loadTexts: apSecuritySrcAddressFamily.setDescription('Source IP address family IPv4 or IPv6.')
apSecuritySrcAddress = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 2, 24), InetAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSecuritySrcAddress.setStatus('current')
if mibBuilder.loadTexts: apSecuritySrcAddress.setDescription('Source IP address.')
apSecurityDstAddressFamily = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 2, 25), InetAddressType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSecurityDstAddressFamily.setStatus('current')
if mibBuilder.loadTexts: apSecurityDstAddressFamily.setDescription('Destination IP address family IPv4 or IPv6.')
apSecurityDstAddress = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 2, 26), InetAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSecurityDstAddress.setStatus('current')
if mibBuilder.loadTexts: apSecurityDstAddress.setDescription('Destination IP address.')
apSecurityPeerAddressFamily = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 2, 27), InetAddressType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSecurityPeerAddressFamily.setStatus('current')
if mibBuilder.loadTexts: apSecurityPeerAddressFamily.setDescription('IKE peer IP address family IPv4 or IPv6.')
apSecurityPeerAddress = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 2, 28), InetAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSecurityPeerAddress.setStatus('current')
if mibBuilder.loadTexts: apSecurityPeerAddress.setDescription('IKE peer IP address.')
apSecurityNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 9, 3))
apSecurityAuthNotificationsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 9, 3, 1))
apSecurityAuthNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 9, 3, 1, 0))
apSecurityTunnelFailureNotification = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 9, 3, 1, 0, 1)).setObjects(("APSECURITY-MIB", "apSecuritySpi"), ("APSECURITY-MIB", "apSecuritySrcIpAddress"), ("APSECURITY-MIB", "apSecurityDstIpAddress"), ("APSECURITY-MIB", "apSecurityFailureCause"), ("APSECURITY-MIB", "apSecurityFailureArea"), ("APSECURITY-MIB", "apSecurityStatus"))
if mibBuilder.loadTexts: apSecurityTunnelFailureNotification.setStatus('current')
if mibBuilder.loadTexts: apSecurityTunnelFailureNotification.setDescription('The notification will be generated whenever IPSEC IKEV2 tunnel fails to establish. ')
apSecurityRadiusFailureNotification = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 9, 3, 1, 0, 2)).setObjects(("APSECURITY-MIB", "apSecurityUser"), ("APSECURITY-MIB", "apSecurityFailureCause"), ("APSECURITY-MIB", "apSecurityFailureArea"), ("APSECURITY-MIB", "apSecurityStatus"))
if mibBuilder.loadTexts: apSecurityRadiusFailureNotification.setStatus('current')
if mibBuilder.loadTexts: apSecurityRadiusFailureNotification.setDescription('The notification will be generated whenever Radius authentication request fails.')
apSecurityAuthFailureThresholdNotification = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 9, 3, 1, 0, 3)).setObjects(("APSECURITY-MIB", "apSecurityUser"), ("APSECURITY-MIB", "apSecurityPeerIpAddress"), ("APSECURITY-MIB", "apSecurityPeerPort"))
if mibBuilder.loadTexts: apSecurityAuthFailureThresholdNotification.setStatus('current')
if mibBuilder.loadTexts: apSecurityAuthFailureThresholdNotification.setDescription('The notification will be generated when IKE DDos auth-failure-threshold is reached and report mode includes SNMP trap')
apSecurityTacacsFailureNotification = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 9, 3, 1, 0, 4)).setObjects(("APSECURITY-MIB", "apSecurityUser"), ("APSECURITY-MIB", "apSecurityFailureCause"), ("APSECURITY-MIB", "apSecurityFailureArea"), ("APSECURITY-MIB", "apSecurityStatus"))
if mibBuilder.loadTexts: apSecurityTacacsFailureNotification.setStatus('current')
if mibBuilder.loadTexts: apSecurityTacacsFailureNotification.setDescription('The notification will be generated whenever TACACS authentication requests fail.')
apSecurityTunnelFailureInetNotification = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 9, 3, 1, 0, 5)).setObjects(("APSECURITY-MIB", "apSecuritySpi"), ("APSECURITY-MIB", "apSecuritySrcAddressFamily"), ("APSECURITY-MIB", "apSecuritySrcAddress"), ("APSECURITY-MIB", "apSecurityDstAddressFamily"), ("APSECURITY-MIB", "apSecurityDstAddress"), ("APSECURITY-MIB", "apSecurityFailureCause"), ("APSECURITY-MIB", "apSecurityFailureArea"), ("APSECURITY-MIB", "apSecurityStatus"))
if mibBuilder.loadTexts: apSecurityTunnelFailureInetNotification.setStatus('current')
if mibBuilder.loadTexts: apSecurityTunnelFailureInetNotification.setDescription('The notification will be generated whenever IPSEC IKEV2 tunnel fails to establish. ')
apSecurityAuthFailureThresholdInetNotification = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 9, 3, 1, 0, 6)).setObjects(("APSECURITY-MIB", "apSecurityUser"), ("APSECURITY-MIB", "apSecurityPeerAddressFamily"), ("APSECURITY-MIB", "apSecurityPeerAddress"), ("APSECURITY-MIB", "apSecurityPeerPort"))
if mibBuilder.loadTexts: apSecurityAuthFailureThresholdInetNotification.setStatus('current')
if mibBuilder.loadTexts: apSecurityAuthFailureThresholdInetNotification.setDescription('The notification will be generated when IKE DDos auth-failure-threshold is reached and report mode includes SNMP trap')
apSecurityGeneralNotificationsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 9, 3, 2))
apSecurityGeneralNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 9, 3, 2, 0))
apSecurityTunnelDPDNotification = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 9, 3, 2, 0, 1)).setObjects(("APSECURITY-MIB", "apSecuritySpi"), ("APSECURITY-MIB", "apSecuritySrcIpAddress"), ("APSECURITY-MIB", "apSecurityDstIpAddress"), ("APSECURITY-MIB", "apSecurityFailureArea"), ("APSECURITY-MIB", "apSecurityStatus"))
if mibBuilder.loadTexts: apSecurityTunnelDPDNotification.setStatus('current')
if mibBuilder.loadTexts: apSecurityTunnelDPDNotification.setDescription('The notification will be generated whenever IPSEC IKEV2 tunnel fails due to Dead Peer Detection(DPD). ')
apSecurityIPsecTunCapNotification = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 9, 3, 2, 0, 2)).setObjects(("APSECURITY-MIB", "apSecurityIPsecTunCapPct"))
if mibBuilder.loadTexts: apSecurityIPsecTunCapNotification.setStatus('current')
if mibBuilder.loadTexts: apSecurityIPsecTunCapNotification.setDescription('This notification is sent when the percentage of licensed IPsec tunnels exceeds an IPsec tunnel alarm threshold. The apSecurityIPsecTunCapPct object indicates the current percentage.')
apSecurityIPsecTunCapClearNotification = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 9, 3, 2, 0, 3)).setObjects(("APSECURITY-MIB", "apSecurityIPsecTunCapPct"))
if mibBuilder.loadTexts: apSecurityIPsecTunCapClearNotification.setStatus('current')
if mibBuilder.loadTexts: apSecurityIPsecTunCapClearNotification.setDescription('This trap is sent when the percentage of licensed IPsec tunnels no longer exceeds an IPsec tunnel alarm threshold. The apSecurityIPsecTunCapPct object indicates the current percentage.')
apSecurityTunnelDPDInetNotification = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 9, 3, 2, 0, 4)).setObjects(("APSECURITY-MIB", "apSecuritySpi"), ("APSECURITY-MIB", "apSecuritySrcAddressFamily"), ("APSECURITY-MIB", "apSecuritySrcAddress"), ("APSECURITY-MIB", "apSecurityDstAddressFamily"), ("APSECURITY-MIB", "apSecurityDstAddress"), ("APSECURITY-MIB", "apSecurityFailureArea"), ("APSECURITY-MIB", "apSecurityStatus"))
if mibBuilder.loadTexts: apSecurityTunnelDPDInetNotification.setStatus('current')
if mibBuilder.loadTexts: apSecurityTunnelDPDInetNotification.setDescription('The notification will be generated whenever IPSEC IKEV2 tunnel fails due to Dead Peer Detection(DPD). ')
apSecurityOCSRNotificationsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 9, 3, 3))
apSecurityOCSRNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 9, 3, 3, 0))
apSecurityOCSRDownNotification = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 9, 3, 3, 0, 1)).setObjects(("APSECURITY-MIB", "apSecurityOCSRHostname"), ("APSECURITY-MIB", "apSecurityOCSRIpAddress"))
if mibBuilder.loadTexts: apSecurityOCSRDownNotification.setStatus('current')
if mibBuilder.loadTexts: apSecurityOCSRDownNotification.setDescription('This notification is sent when a OCSR server becomes unreachable.')
apSecurityOCSRUpNotification = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 9, 3, 3, 0, 2)).setObjects(("APSECURITY-MIB", "apSecurityOCSRHostname"), ("APSECURITY-MIB", "apSecurityOCSRIpAddress"))
if mibBuilder.loadTexts: apSecurityOCSRUpNotification.setStatus('current')
if mibBuilder.loadTexts: apSecurityOCSRUpNotification.setDescription('This notification is sent when a OCSR server becomes reachable.')
apSecurityCrlNotificationsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 9, 3, 4))
apSecurityCrlNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 9, 3, 4, 0))
apSecurityCrlInvalidNotification = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 9, 3, 4, 0, 1)).setObjects(("APSECURITY-MIB", "apSecurityCrlIssuer"), ("APSECURITY-MIB", "apSecurityCspName"))
if mibBuilder.loadTexts: apSecurityCrlInvalidNotification.setStatus('current')
if mibBuilder.loadTexts: apSecurityCrlInvalidNotification.setDescription('This notification is sent when an invalid CRL is detected.')
apSecurityCRLRetrievalNotificationsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 9, 3, 5))
apSecurityCRLRetrievalNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 9, 3, 5, 0))
apSecurityCRLRetrievalFailNotification = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 9, 3, 5, 0, 1)).setObjects(("APSECURITY-MIB", "apSecurityCRLServer"), ("APSECURITY-MIB", "apSecurityCRLRetrievalFailureCause"), ("APSECURITY-MIB", "apSecurityLastSuccessfulCRLRetrieval"), ("APSECURITY-MIB", "apSecurityCRLServerIPAddress"))
if mibBuilder.loadTexts: apSecurityCRLRetrievalFailNotification.setStatus('current')
if mibBuilder.loadTexts: apSecurityCRLRetrievalFailNotification.setDescription('This notification is sent when there is a failure in CRL retrieval.')
apSecurityCRLRetrievalClearNotification = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 9, 3, 5, 0, 2)).setObjects(("APSECURITY-MIB", "apSecurityCRLServer"), ("APSECURITY-MIB", "apSecurityCRLServerIPAddress"))
if mibBuilder.loadTexts: apSecurityCRLRetrievalClearNotification.setStatus('current')
if mibBuilder.loadTexts: apSecurityCRLRetrievalClearNotification.setDescription('This notification is sent when there is a success in CRL retrieval.')
apSecurityCertNotificationsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 9, 3, 6))
apSecurityCertNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 9, 3, 6, 0))
apSecurityCertExpiredNotification = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 9, 3, 6, 0, 1)).setObjects(("APSECURITY-MIB", "apSecurityCertificateRecordName"), ("APSECURITY-MIB", "apSecurityCertificateCertSubject"), ("APSECURITY-MIB", "apSecurityCertificateCertExpire"), ("APSECURITY-MIB", "apSecurityCertificateCertIssuer"))
if mibBuilder.loadTexts: apSecurityCertExpiredNotification.setStatus('current')
if mibBuilder.loadTexts: apSecurityCertExpiredNotification.setDescription('The notification will be generated periodically if a locally installed certificate has expired. ')
apSecurityCertExpireSoonNotification = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 9, 3, 6, 0, 2)).setObjects(("APSECURITY-MIB", "apSecurityCertificateRecordName"), ("APSECURITY-MIB", "apSecurityCertificateCertSubject"), ("APSECURITY-MIB", "apSecurityCertificateCertExpire"), ("APSECURITY-MIB", "apSecurityCertificateCertIssuer"))
if mibBuilder.loadTexts: apSecurityCertExpireSoonNotification.setStatus('current')
if mibBuilder.loadTexts: apSecurityCertExpireSoonNotification.setDescription('The notification will be generated periodically if a locally installed certificate will soon expire. ')
apSecurityGTPFailureNotificationsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 9, 3, 7))
apSecurityGTPFailureNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 9, 3, 7, 0))
apSecurityGTPLinkFailureNotification = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 9, 3, 7, 0, 1)).setObjects(("APSECURITY-MIB", "apSecurityGTPProfileName"), ("APSECURITY-MIB", "apSecurityGTPHostName"), ("APSECURITY-MIB", "apSecurityGTPLinkFailureCause"), ("APSECURITY-MIB", "apSecurityGTPIPAddress"))
if mibBuilder.loadTexts: apSecurityGTPLinkFailureNotification.setStatus('current')
if mibBuilder.loadTexts: apSecurityGTPLinkFailureNotification.setDescription('This notification is sent when there is a link failure with GGSN on GTP Profile.')
apSecurityGTPLinkClearNotification = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 9, 3, 7, 0, 2)).setObjects(("APSECURITY-MIB", "apSecurityGTPProfileName"), ("APSECURITY-MIB", "apSecurityGTPHostName"), ("APSECURITY-MIB", "apSecurityGTPIPAddress"))
if mibBuilder.loadTexts: apSecurityGTPLinkClearNotification.setStatus('current')
if mibBuilder.loadTexts: apSecurityGTPLinkClearNotification.setDescription('This notification is sent when the link is restored with GGSN on GTP Profile.')
apSecurityConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 9, 4))
apSecurityCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 9, 4, 1))
apSecurityGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 9, 4, 2))
apSecurityNotificationsGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 9, 4, 3))
apSecurityIPsecTunnelsObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 9, 4, 2, 1)).setObjects(("APSECURITY-MIB", "apSecurityIPsecTunCount"), ("APSECURITY-MIB", "apSecurityIPsecTunCapPct"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSecurityIPsecTunnelsObjectsGroup = apSecurityIPsecTunnelsObjectsGroup.setStatus('current')
if mibBuilder.loadTexts: apSecurityIPsecTunnelsObjectsGroup.setDescription('Objects for monitoring IPsec tunnel capacity.')
apSecurityIkeInterfaceObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 9, 4, 2, 2)).setObjects(("APSECURITY-MIB", "apSecurityIkeInterfaceInitCookieErrors"), ("APSECURITY-MIB", "apSecurityIkeInterfaceAuthErrors"), ("APSECURITY-MIB", "apSecurityIkeInterfaceEapAccessRequestErrors"), ("APSECURITY-MIB", "apSecurityIkeInterfaceEapAccessChallengeErrors"), ("APSECURITY-MIB", "apSecurityIkeInterfaceTsErrors"), ("APSECURITY-MIB", "apSecurityIkeInterfaceCpErrors"), ("APSECURITY-MIB", "apSecurityIkeInterfaceKeErrors"), ("APSECURITY-MIB", "apSecurityIkeInterfaceProposalErrors"), ("APSECURITY-MIB", "apSecurityIkeInterfaceSyntaxErrors"), ("APSECURITY-MIB", "apSecurityIkeInterfaceCriticalPayloadErrors"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSecurityIkeInterfaceObjectsGroup = apSecurityIkeInterfaceObjectsGroup.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceObjectsGroup.setDescription('Objects for monitoring IKE negotiation errors.')
apSecurityTacacsObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 9, 4, 2, 3)).setObjects(("APSECURITY-MIB", "apSecurityTacacsServer"), ("APSECURITY-MIB", "apSecurityTacacsCliCommands"), ("APSECURITY-MIB", "apSecurityTacacsSuccessAuthentication"), ("APSECURITY-MIB", "apSecurityTacacsFailureAuthentication"), ("APSECURITY-MIB", "apSecurityTacacsSuccessAuthorization"), ("APSECURITY-MIB", "apSecurityTacacsFailureAuthorization"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSecurityTacacsObjectsGroup = apSecurityTacacsObjectsGroup.setStatus('current')
if mibBuilder.loadTexts: apSecurityTacacsObjectsGroup.setDescription('Objects for monitoring TACACS+ transactions.')
apSecurityCertObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 9, 4, 2, 4)).setObjects(("APSECURITY-MIB", "apSecurityCertificateRecordName"), ("APSECURITY-MIB", "apSecurityCertificateCertSubject"), ("APSECURITY-MIB", "apSecurityCertificateCertStart"), ("APSECURITY-MIB", "apSecurityCertificateCertExpire"), ("APSECURITY-MIB", "apSecurityCertificateCertIssuer"), ("APSECURITY-MIB", "apSecurityCertificateCertIsCA"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSecurityCertObjectsGroup = apSecurityCertObjectsGroup.setStatus('current')
if mibBuilder.loadTexts: apSecurityCertObjectsGroup.setDescription('Objects for managing locally installed certificates. ')
apSecurityIkeInterfaceInfoObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 9, 4, 2, 5)).setObjects(("APSECURITY-MIB", "apSecurityIkeInterfaceTunnelRate"), ("APSECURITY-MIB", "apSecurityIkeInterfaceCurrentChildSaPair"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSecurityIkeInterfaceInfoObjectsGroup = apSecurityIkeInterfaceInfoObjectsGroup.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceInfoObjectsGroup.setDescription('Objects for monitoring IKE interface tunnel information')
apSecurityNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9148, 3, 9, 4, 3, 1)).setObjects(("APSECURITY-MIB", "apSecurityTunnelFailureNotification"), ("APSECURITY-MIB", "apSecurityRadiusFailureNotification"), ("APSECURITY-MIB", "apSecurityTunnelDPDNotification"), ("APSECURITY-MIB", "apSecurityTacacsFailureNotification"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSecurityNotificationsGroup = apSecurityNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: apSecurityNotificationsGroup.setDescription('A collection of notifications for security ')
apSecurityIPsecTunnelsNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9148, 3, 9, 4, 3, 2)).setObjects(("APSECURITY-MIB", "apSecurityIPsecTunCapNotification"), ("APSECURITY-MIB", "apSecurityIPsecTunCapClearNotification"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSecurityIPsecTunnelsNotificationsGroup = apSecurityIPsecTunnelsNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: apSecurityIPsecTunnelsNotificationsGroup.setDescription('A collection of notifications for IPsec tunnel capacity.')
apSecurityDDosNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9148, 3, 9, 4, 3, 3)).setObjects(("APSECURITY-MIB", "apSecurityAuthFailureThresholdNotification"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSecurityDDosNotificationsGroup = apSecurityDDosNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: apSecurityDDosNotificationsGroup.setDescription('A collection of notifications for IKEv2 DDos ')
apSecurityOCSRNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9148, 3, 9, 4, 3, 4)).setObjects(("APSECURITY-MIB", "apSecurityOCSRDownNotification"), ("APSECURITY-MIB", "apSecurityOCSRUpNotification"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSecurityOCSRNotificationsGroup = apSecurityOCSRNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: apSecurityOCSRNotificationsGroup.setDescription('A collection of notifications for OCSRs ')
apSecurityCrlNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9148, 3, 9, 4, 3, 5)).setObjects(("APSECURITY-MIB", "apSecurityCrlInvalidNotification"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSecurityCrlNotificationsGroup = apSecurityCrlNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: apSecurityCrlNotificationsGroup.setDescription('A collection of notifications for CRLs ')
apSecurityCRLRetrievalNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9148, 3, 9, 4, 3, 6)).setObjects(("APSECURITY-MIB", "apSecurityCRLRetrievalFailNotification"), ("APSECURITY-MIB", "apSecurityCRLRetrievalClearNotification"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSecurityCRLRetrievalNotificationsGroup = apSecurityCRLRetrievalNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: apSecurityCRLRetrievalNotificationsGroup.setDescription('A collection of notifications for CRL Retrieval ')
apSecurityCertNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9148, 3, 9, 4, 3, 7)).setObjects(("APSECURITY-MIB", "apSecurityCertExpiredNotification"), ("APSECURITY-MIB", "apSecurityCertExpireSoonNotification"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSecurityCertNotificationsGroup = apSecurityCertNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: apSecurityCertNotificationsGroup.setDescription('A collection of notifications for CRLs ')
apSecurityGTPNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9148, 3, 9, 4, 3, 8)).setObjects(("APSECURITY-MIB", "apSecurityGTPLinkFailureNotification"), ("APSECURITY-MIB", "apSecurityGTPLinkClearNotification"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSecurityGTPNotificationsGroup = apSecurityGTPNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: apSecurityGTPNotificationsGroup.setDescription('A collection of notifications for GTP peer communication ')
apSecurityNotificationsInetGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9148, 3, 9, 4, 3, 9)).setObjects(("APSECURITY-MIB", "apSecurityTunnelFailureInetNotification"), ("APSECURITY-MIB", "apSecurityRadiusFailureNotification"), ("APSECURITY-MIB", "apSecurityTunnelDPDInetNotification"), ("APSECURITY-MIB", "apSecurityTacacsFailureNotification"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSecurityNotificationsInetGroup = apSecurityNotificationsInetGroup.setStatus('current')
if mibBuilder.loadTexts: apSecurityNotificationsInetGroup.setDescription('A collection of notifications for security ')
apSecurityDDosNotificationsInetGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9148, 3, 9, 4, 3, 10)).setObjects(("APSECURITY-MIB", "apSecurityAuthFailureThresholdInetNotification"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSecurityDDosNotificationsInetGroup = apSecurityDDosNotificationsInetGroup.setStatus('current')
if mibBuilder.loadTexts: apSecurityDDosNotificationsInetGroup.setDescription('A collection of notifications for IKEv2 DDos ')
mibBuilder.exportSymbols("APSECURITY-MIB", apSecurityCRLRetrievalClearNotification=apSecurityCRLRetrievalClearNotification, apSecurityIkeInterfaceTunnelRemovalsTca=apSecurityIkeInterfaceTunnelRemovalsTca, apSecurityTacacsIndex=apSecurityTacacsIndex, apSecurityTacacsFailureNotification=apSecurityTacacsFailureNotification, apSecurityPeerPort=apSecurityPeerPort, apSecurityCertExpireSoonNotification=apSecurityCertExpireSoonNotification, apSecurityCRLRetrievalNotificationsGroup=apSecurityCRLRetrievalNotificationsGroup, apSecurityIkeInterfaceIKESAPacketSent=apSecurityIkeInterfaceIKESAPacketSent, apSecurityPeerIpAddress=apSecurityPeerIpAddress, apSecurityCrlInvalidNotification=apSecurityCrlInvalidNotification, apSecurityIkeInterfaceDPDRecvPortChange=apSecurityIkeInterfaceDPDRecvPortChange, apSecurityDstAddress=apSecurityDstAddress, apSecurityCRLRetrievalNotifications=apSecurityCRLRetrievalNotifications, apSecurityIkeInterfaceAuthErrors=apSecurityIkeInterfaceAuthErrors, apSecurityCertNotifications=apSecurityCertNotifications, apSecurityIkeInterfaceChildSaDelFail=apSecurityIkeInterfaceChildSaDelFail, apSecurityIkeInterfaceSAEstablishmentSuccess=apSecurityIkeInterfaceSAEstablishmentSuccess, apSecurityPeerAddressFamily=apSecurityPeerAddressFamily, apSecurityCertificateCertStart=apSecurityCertificateCertStart, apSecurityFailureArea=apSecurityFailureArea, apSecurityAuthFailureThresholdInetNotification=apSecurityAuthFailureThresholdInetNotification, apSecurityTacacsFailureAuthorization=apSecurityTacacsFailureAuthorization, apSecurityCrlIssuer=apSecurityCrlIssuer, apSecurityIkeInterfaceAuthFailure=apSecurityIkeInterfaceAuthFailure, apSecurityTacacsSuccessAuthorization=apSecurityTacacsSuccessAuthorization, apSecurityGTPFailureNotifications=apSecurityGTPFailureNotifications, apSecurityCrlNotifications=apSecurityCrlNotifications, apSecurityIkeInterfaceChildSaRekey=apSecurityIkeInterfaceChildSaRekey, apSecurityCRLServer=apSecurityCRLServer, apSecurityNotificationObjects=apSecurityNotificationObjects, apSecurityGTPNotificationsGroup=apSecurityGTPNotificationsGroup, apSecurityGTPFailureNotificationsPrefix=apSecurityGTPFailureNotificationsPrefix, apSecurityIkeInterfaceAddress=apSecurityIkeInterfaceAddress, apSecurityIkeInterfaceStatsTable=apSecurityIkeInterfaceStatsTable, apSecurityCertificateRecordName=apSecurityCertificateRecordName, apSecurityIkeInterfaceAuthCertCheckFailure=apSecurityIkeInterfaceAuthCertCheckFailure, apSecurityGTPLinkClearNotification=apSecurityGTPLinkClearNotification, apSecurityTunnelFailureInetNotification=apSecurityTunnelFailureInetNotification, apSecurityIkeInterfaceSAInitMsgRecv=apSecurityIkeInterfaceSAInitMsgRecv, apSecurityGTPProfileName=apSecurityGTPProfileName, apSecurityGTPLinkFailureCause=apSecurityGTPLinkFailureCause, apSecurityTacacsTable=apSecurityTacacsTable, apSecurityModule=apSecurityModule, apSecurityOCSRNotificationsGroup=apSecurityOCSRNotificationsGroup, apSecurityIkeInterfaceTunnelRate=apSecurityIkeInterfaceTunnelRate, apSecurityIkeInterfaceProposalErrors=apSecurityIkeInterfaceProposalErrors, apSecurityIkeInterfaceChildSaFail=apSecurityIkeInterfaceChildSaFail, apSecurityIkeInterfaceObjectsGroup=apSecurityIkeInterfaceObjectsGroup, apSecurityCertificateCertIsCA=apSecurityCertificateCertIsCA, apSecurityGroups=apSecurityGroups, apSecurityTacacsSuccessAuthentication=apSecurityTacacsSuccessAuthentication, apSecurityOCSRNotifications=apSecurityOCSRNotifications, apSecuritySrcIpAddress=apSecuritySrcIpAddress, apSecurityTacacsEntry=apSecurityTacacsEntry, apSecurityIkeInterfaceMsgError=apSecurityIkeInterfaceMsgError, apSecurityCRLRetrievalFailureCause=apSecurityCRLRetrievalFailureCause, apSecurityLastSuccessfulCRLRetrieval=apSecurityLastSuccessfulCRLRetrieval, apSecurityIkeInterfaceSAInitMsgSent=apSecurityIkeInterfaceSAInitMsgSent, apSecurityNotifications=apSecurityNotifications, apSecurityTunnelFailureNotification=apSecurityTunnelFailureNotification, apSecurityIkeInterfaceDPDRespRecv=apSecurityIkeInterfaceDPDRespRecv, apSecurityCRLServerIPAddress=apSecurityCRLServerIPAddress, apSecurityIkeInterfaceDPDRecv=apSecurityIkeInterfaceDPDRecv, apSecurityCertificateCertExpire=apSecurityCertificateCertExpire, apSecurityIkeInterfaceSyntaxErrors=apSecurityIkeInterfaceSyntaxErrors, apSecurityCspName=apSecurityCspName, apSecuritySrcAddress=apSecuritySrcAddress, apSecurityAuthFailureThresholdNotification=apSecurityAuthFailureThresholdNotification, apSecurityIkeInterfaceAuthCertCheckSuccess=apSecurityIkeInterfaceAuthCertCheckSuccess, apSecurityGTPHostName=apSecurityGTPHostName, apSecurityIkeInterfaceDPDRespNotRecv=apSecurityIkeInterfaceDPDRespNotRecv, apSecurityIkeInterfaceChildSaRequest=apSecurityIkeInterfaceChildSaRequest, apSecurityNotificationsInetGroup=apSecurityNotificationsInetGroup, apSecurityIkeInterfaceCurrentChildSaPair=apSecurityIkeInterfaceCurrentChildSaPair, apSecurityFailureCause=apSecurityFailureCause, apSecuritySrcAddressFamily=apSecuritySrcAddressFamily, apSecurityIPsecTunCapNotification=apSecurityIPsecTunCapNotification, apSecurityIkeInterfaceAuthFailureTca=apSecurityIkeInterfaceAuthFailureTca, apSecurityIkeInterfaceChildSaSuccess=apSecurityIkeInterfaceChildSaSuccess, apSecurityIkeInterfaceInfoTable=apSecurityIkeInterfaceInfoTable, apSecurityCertObjectsGroup=apSecurityCertObjectsGroup, apSecurityIkeInterfaceInfoEntry=apSecurityIkeInterfaceInfoEntry, apSecurityIkeInterfaceKeErrors=apSecurityIkeInterfaceKeErrors, apSecurityIPsecTunCount=apSecurityIPsecTunCount, apSecurityIkeInterfaceCriticalPayloadErrors=apSecurityIkeInterfaceCriticalPayloadErrors, apSecurityOCSRIpAddress=apSecurityOCSRIpAddress, apSecurityTunnelDPDNotification=apSecurityTunnelDPDNotification, apSecurityIkeInterfaceDPDRetran=apSecurityIkeInterfaceDPDRetran, apSecurityIkeInterfaceAuthIDError=apSecurityIkeInterfaceAuthIDError, apSecurityTunnelDPDInetNotification=apSecurityTunnelDPDInetNotification, apSecurityIkeInterfaceInfoObjectsGroup=apSecurityIkeInterfaceInfoObjectsGroup, apSecurityDateTime=apSecurityDateTime, apSecurityIPsecTunnelsNotificationsGroup=apSecurityIPsecTunnelsNotificationsGroup, PYSNMP_MODULE_ID=apSecurityModule, apSecurityCertificateCertSubject=apSecurityCertificateCertSubject, apSecurityOCSRNotificationsPrefix=apSecurityOCSRNotificationsPrefix, apSecurityCRLRetrievalNotificationsPrefix=apSecurityCRLRetrievalNotificationsPrefix, apSecurityDDosNotificationsGroup=apSecurityDDosNotificationsGroup, apSecurityCertificateConfigId=apSecurityCertificateConfigId, apSecurityIkeInterfaceChildSaDelSuccess=apSecurityIkeInterfaceChildSaDelSuccess, apSecurityTacacsObjectsGroup=apSecurityTacacsObjectsGroup, apSecurityIkeInterfaceSAEstablishmentAttempts=apSecurityIkeInterfaceSAEstablishmentAttempts, apSecurityTacacsServer=apSecurityTacacsServer, apSecurityIkeInterfaceIKESAPacketDropped=apSecurityIkeInterfaceIKESAPacketDropped, apSecurityIkeInterfaceInitCookieErrors=apSecurityIkeInterfaceInitCookieErrors, apSecurityDDosNotificationsInetGroup=apSecurityDDosNotificationsInetGroup, apSecurityDstIpAddress=apSecurityDstIpAddress, apSecurityTacacsCliCommands=apSecurityTacacsCliCommands, apSecurityIkeInterfaceDPDRecvIPChange=apSecurityIkeInterfaceDPDRecvIPChange, apSecurityIPsecTunnelsObjectsGroup=apSecurityIPsecTunnelsObjectsGroup, apSecurityCertExpiredNotification=apSecurityCertExpiredNotification, apSecurityIkeInterfaceDDosSent=apSecurityIkeInterfaceDDosSent, apSecurityIkeInterfaceCpuOverloadErrors=apSecurityIkeInterfaceCpuOverloadErrors, apSecurityCertNotificationsPrefix=apSecurityCertNotificationsPrefix, apSecurityIkeInterfaceInitialChildSa=apSecurityIkeInterfaceInitialChildSa, apSecurityNotificationsGroups=apSecurityNotificationsGroups, apSecuritySecProtocol=apSecuritySecProtocol, apSecurityAuthNotificationsPrefix=apSecurityAuthNotificationsPrefix, apSecuritySpi=apSecuritySpi, apSecurityCertNotificationsGroup=apSecurityCertNotificationsGroup, apSecurityIkeInterfaceIKESAPacketRcv=apSecurityIkeInterfaceIKESAPacketRcv, apSecurityIkeInterfaceDPDSent=apSecurityIkeInterfaceDPDSent, apSecurityIkeInterfaceAuthCertCheckRequest=apSecurityIkeInterfaceAuthCertCheckRequest, apSecurityStatus=apSecurityStatus, apSecurityDstAddressFamily=apSecurityDstAddressFamily, apSecurityCompliances=apSecurityCompliances, apSecurityIkeInterfaceChildSaDelRequest=apSecurityIkeInterfaceChildSaDelRequest, apSecurityAuthAlg=apSecurityAuthAlg, apSecurityGeneralNotificationsPrefix=apSecurityGeneralNotificationsPrefix, apSecurityIkeInterfaceTsErrors=apSecurityIkeInterfaceTsErrors, apSecurityCertificateIndex=apSecurityCertificateIndex, apSecurityMIBObjects=apSecurityMIBObjects, apSecurityIkeInterfaceDDosRecv=apSecurityIkeInterfaceDDosRecv, apSecurityIkeInterfaceType=apSecurityIkeInterfaceType, apSecurityIkeInterfaceMessageRetrans=apSecurityIkeInterfaceMessageRetrans, apSecurityGTPLinkFailureNotification=apSecurityGTPLinkFailureNotification, apSecurityCertificateEntry=apSecurityCertificateEntry, apSecurityOCSRUpNotification=apSecurityOCSRUpNotification, apSecurityOCSRHostname=apSecurityOCSRHostname, apSecurityIkeInterfaceEapAccessRequestErrors=apSecurityIkeInterfaceEapAccessRequestErrors, apSecurityGTPIPAddress=apSecurityGTPIPAddress, apSecurityIkeInterfaceStatsEntry=apSecurityIkeInterfaceStatsEntry, apSecurityTacacsFailureAuthentication=apSecurityTacacsFailureAuthentication, apSecurityUser=apSecurityUser, apSecurityIPsecTunCapPct=apSecurityIPsecTunCapPct, apSecurityIPSECMode=apSecurityIPSECMode, apSecurityPeerAddress=apSecurityPeerAddress, apSecurityCrlNotificationsPrefix=apSecurityCrlNotificationsPrefix, apSecurityIkeInterfaceCpErrors=apSecurityIkeInterfaceCpErrors, apSecurityCertificateCertIssuer=apSecurityCertificateCertIssuer, apSecurityCrlNotificationsGroup=apSecurityCrlNotificationsGroup, apSecurityCertificateTable=apSecurityCertificateTable, apSecurityConformance=apSecurityConformance, apSecurityCRLRetrievalFailNotification=apSecurityCRLRetrievalFailNotification, apSecurityEncryptionAlg=apSecurityEncryptionAlg, apSecurityAuthNotifications=apSecurityAuthNotifications, apSecurityIkeInterfaceDpdTca=apSecurityIkeInterfaceDpdTca, apSecurityIPsecTunCapClearNotification=apSecurityIPsecTunCapClearNotification, apSecurityNotificationsGroup=apSecurityNotificationsGroup, apSecurityOCSRDownNotification=apSecurityOCSRDownNotification, apSecurityGeneralNotifications=apSecurityGeneralNotifications, apSecurityIkeInterfaceEapAccessChallengeErrors=apSecurityIkeInterfaceEapAccessChallengeErrors, apSecurityRadiusFailureNotification=apSecurityRadiusFailureNotification)
