#
# PySNMP MIB module CISCO-XGCP-EXT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-XGCP-EXT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:21:40 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint")
CCallControlProfileIndex, cmgwIndex = mibBuilder.importSymbols("CISCO-MEDIA-GATEWAY-MIB", "CCallControlProfileIndex", "cmgwIndex")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
CountryCodeITU, = mibBuilder.importSymbols("CISCO-TC", "CountryCodeITU")
CXgcpRetryMethod, = mibBuilder.importSymbols("CISCO-XGCP-MIB", "CXgcpRetryMethod")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Integer32, NotificationType, MibIdentifier, iso, ModuleIdentity, TimeTicks, IpAddress, ObjectIdentity, Unsigned32, Bits, Counter32, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "NotificationType", "MibIdentifier", "iso", "ModuleIdentity", "TimeTicks", "IpAddress", "ObjectIdentity", "Unsigned32", "Bits", "Counter32", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64")
TruthValue, TextualConvention, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "DisplayString", "RowStatus")
ciscoXgcpExtMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 325))
ciscoXgcpExtMIB.setRevisions(('2003-01-30 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoXgcpExtMIB.setRevisionsDescriptions(('Initial version of this MIB module',))
if mibBuilder.loadTexts: ciscoXgcpExtMIB.setLastUpdated('200301300000Z')
if mibBuilder.loadTexts: ciscoXgcpExtMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoXgcpExtMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-voice-gateway@cisco.com')
if mibBuilder.loadTexts: ciscoXgcpExtMIB.setDescription('This MIB module is an extension to CISCO-XGCP-MIB. It defines the parameters related to the following aspects in xGCP protocols: * Default call control parameters in the local media gateway. * Provisioning specific call control profiles which can be associated with the circuits for the call establishment in the circuits. ')
cxgcpExtObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 325, 1))
cxgcpExtConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 325, 1, 1))
class DtmfRelayMode(TextualConvention, Integer32):
    reference = 'RFC2833, Section 3: RTP Payload Format for Named Telephone Events'
    description = "This textual convention defines DTMF (Dual Tone Multi- Frequency) relay mode. There are a number of possible ways to relay DTMF digits over a VoIP/VoATM network: dtmfRelayDisabled - DTMF won't be detected and won't be specially treated. dtmfRelayCisco - DTMF will be sent as Cisco proprietary format in RTP (Real Time Protocol) packet. dtmfRelayNse - DTMF will be sent as NSE (Named Signalled Event) in-band (within RTP audio stream) dtmfRelayOutOfBand - DTMF detection is enabled, but the digits will not be sent on the bearer. dtmfRelayNteGw - DTMF will be sent as NTE (Named Telephony Event) configured in the local gateway. dtmfRelayNteCa - DTMF will be sent as NTE (Named Telephony Event) from the negotiation with call agent. dtmfRelayInband - DTMF will be detected and be transported over VoIP or VoATM network as voice packets. dtmfRelayType3 - DTMF digits will be detected and sent as Type 3 packets."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("dtmfRelayDisabled", 1), ("dtmfRelayCisco", 2), ("dtmfRelayNse", 3), ("dtmfRelayOutOfBand", 4), ("dtmfRelayNteGw", 5), ("dtmfRelayNteCa", 6), ("dtmfRelayInband", 7), ("dtmfRelayType3", 8))

class DtmfCodecType(TextualConvention, Integer32):
    description = 'DTMF (Dual Tone Multi-Frequency) will be specially handled under the specified codec rates. dtmfCodecAll - DTMF will be specially handled according to the type indicated in DtmfRelayMode under all codec rates. dtmfCodecLowRate - DTMF will be specially handled according to the type indicated in DtmfRelayMode only in lower codec rates (e.g., the rate of G.726, G.728 or G.729). '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("dtmfCodecAll", 1), ("dtmfCodecLowRate", 2))

class CxeTerminalProviderCode(TextualConvention, OctetString):
    reference = 'ITU-T T.35 - Section 3.2 Terminal Provider Code'
    description = 'This textual convention represents a Terminal Provider Code for non-standard facilities in telematic services. Unrecognized terminal providers are represented as empty string.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(2, 2), )
cxeCallCtrlConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 325, 1, 1, 1), )
if mibBuilder.loadTexts: cxeCallCtrlConfigTable.setStatus('current')
if mibBuilder.loadTexts: cxeCallCtrlConfigTable.setDescription('This table contains objects used for configuring general parameters in call control default to the local media gateway in xGCP protocols. ')
cxeCallCtrlConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 325, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-MEDIA-GATEWAY-MIB", "cmgwIndex"))
if mibBuilder.loadTexts: cxeCallCtrlConfigEntry.setStatus('current')
if mibBuilder.loadTexts: cxeCallCtrlConfigEntry.setDescription('There is one entry for each media gateway. The entry will be automatically generated when a media gateway is detected. ')
cxeCallCtrlControlServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 325, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(96)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxeCallCtrlControlServiceType.setStatus('current')
if mibBuilder.loadTexts: cxeCallCtrlControlServiceType.setDescription('This object identifies Type Of Service (TOS) field of IP header for the control packet in VoIP application.')
cxeCallCtrlBearerServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 325, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(160)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxeCallCtrlBearerServiceType.setStatus('current')
if mibBuilder.loadTexts: cxeCallCtrlBearerServiceType.setDescription('This object identifies Type Of Service (TOS) field of IP header for the voice payload packet in VoIP application.')
cxeCallCtrlVoIpDtmfRelayMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 325, 1, 1, 1, 1, 3), DtmfRelayMode().clone('dtmfRelayDisabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxeCallCtrlVoIpDtmfRelayMode.setStatus('current')
if mibBuilder.loadTexts: cxeCallCtrlVoIpDtmfRelayMode.setDescription('This object defines whether the DTMF (Dual Tone, Multi-Frequency) digits need to be transported to the other endpoint via NSE packets in Voice Over IP. The value of this object will be utilized when the call agent does not specify this parameter.')
cxeCallCtrlVoIpDtmfCodec = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 325, 1, 1, 1, 1, 4), DtmfCodecType().clone('dtmfCodecAll')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxeCallCtrlVoIpDtmfCodec.setStatus('current')
if mibBuilder.loadTexts: cxeCallCtrlVoIpDtmfCodec.setDescription('This object identifies DTMF relay codec for VoIP. This object is not applicable if cxeCallCtrlVoIpDtmfRelay is DtmfRelayDisabled. ')
cxeCallCtrlVoAal2DtmfRelayMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 325, 1, 1, 1, 1, 5), DtmfRelayMode().clone('dtmfRelayDisabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxeCallCtrlVoAal2DtmfRelayMode.setStatus('current')
if mibBuilder.loadTexts: cxeCallCtrlVoAal2DtmfRelayMode.setDescription('This object defines whether the DTMF (Dual Tone, Multi-Frequency) digits need to be transported to the other endpoint in Voice over AAL2 packets. The value of this object will be utilized when the call agent does not specify this parameter.')
cxeCallCtrlVoAal2DtmfCodec = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 325, 1, 1, 1, 1, 6), DtmfCodecType().clone('dtmfCodecAll')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxeCallCtrlVoAal2DtmfCodec.setStatus('current')
if mibBuilder.loadTexts: cxeCallCtrlVoAal2DtmfCodec.setDescription('This object identifies DTMF relay CODEC for Voice over AAL2. This object is not applicable if cxeCallCtrlVoAal2DtmfRelay is DtmfRelayDisabled. ')
cxeCallCtrlTsePayload = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 325, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxeCallCtrlTsePayload.setReference('RFC2833, 3. RTP Payload Format for Named Telephone Events')
if mibBuilder.loadTexts: cxeCallCtrlTsePayload.setStatus('current')
if mibBuilder.loadTexts: cxeCallCtrlTsePayload.setDescription('This object identifies TSE (Telephony Signaling Events) payload type.')
cxeCallCtrlNetNseTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 325, 1, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(250, 10000)).clone(1000)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxeCallCtrlNetNseTimer.setStatus('current')
if mibBuilder.loadTexts: cxeCallCtrlNetNseTimer.setDescription('This object identifies Network Signaling Event (NSE) timeout value.')
cxeCallCtrlRtcpRcvTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 325, 1, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(5)).setUnits('times').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxeCallCtrlRtcpRcvTimer.setReference('RFC1889')
if mibBuilder.loadTexts: cxeCallCtrlRtcpRcvTimer.setStatus('current')
if mibBuilder.loadTexts: cxeCallCtrlRtcpRcvTimer.setDescription('This object identifies the number of times of Real Time Control Transport (RTCP) report interval if the media gateway has not recieved any RTCP packets from another side. The media gateway will mark another side inactive, or delete it if no RTCP packet has been received for the value of this object times the RTCP report interval.')
cxeCallCtrlIgnoreAal2LcoCodec = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 325, 1, 1, 1, 1, 10), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxeCallCtrlIgnoreAal2LcoCodec.setStatus('current')
if mibBuilder.loadTexts: cxeCallCtrlIgnoreAal2LcoCodec.setDescription('This object defines whether to ignore the AAL2 Local Connection Option (LCO) message from the call agent or not. ')
cxeCallCtrlDigitMapOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 325, 1, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dmOrderShortest", 1), ("dmOrderOrdered", 2))).clone('dmOrderShortest')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxeCallCtrlDigitMapOrder.setReference('RFC2705, 2.1.5 Digit Maps')
if mibBuilder.loadTexts: cxeCallCtrlDigitMapOrder.setStatus('current')
if mibBuilder.loadTexts: cxeCallCtrlDigitMapOrder.setDescription('This object defines the type of digit map order. The MGC can advise and load the gateway with a digit map that correspond to the dial plan to collect the access codes, credit card numbers and other numbers requested by call control services.')
cxeCallCtrlT38Inhibited = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 325, 1, 1, 1, 1, 12), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxeCallCtrlT38Inhibited.setReference('ITU-T T.38 Procedures for real-time Group 3 facsimile communicating over IP networks')
if mibBuilder.loadTexts: cxeCallCtrlT38Inhibited.setStatus('current')
if mibBuilder.loadTexts: cxeCallCtrlT38Inhibited.setDescription('This object defines whether T.38 is inhibited in the media gateway or not. T.38 is a Fax Relay Protocol defined by ITU for real-time protocol for Fax over IP networks.')
cxeCallCtrlT38NseRspTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 325, 1, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(250, 10000)).clone(1000)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxeCallCtrlT38NseRspTimer.setStatus('current')
if mibBuilder.loadTexts: cxeCallCtrlT38NseRspTimer.setDescription("This object defines a timeout value for a timer. This timer is started after sending a NSE 200 while waiting for the NSE 201 acknowledgement or NSE 202 negative acknowledgement. Expiration of the timer will indicate that the request for switch to T.38 has been rejected or discarded by the far end. The initial value is 1000 ms and this value can only be set in the increments of 250 ms. This object is not applicable if cxeCallCtrlT38Inhibited is set to 'true'. ")
cxeCallCtrlT38FecEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 325, 1, 1, 1, 1, 14), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxeCallCtrlT38FecEnabled.setStatus('current')
if mibBuilder.loadTexts: cxeCallCtrlT38FecEnabled.setDescription("This object is used to enable the Forward Error Correction (FEC) for UDP-based fax transport. This object is not applicable if cxeCallCtrlT38Inhibited is set to 'true'.")
cxeCallCtrlT38LsRedundancy = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 325, 1, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxeCallCtrlT38LsRedundancy.setReference('ITU-T T.38 Procedures for real-time Group 3 facsimile communicating over IP networks')
if mibBuilder.loadTexts: cxeCallCtrlT38LsRedundancy.setStatus('current')
if mibBuilder.loadTexts: cxeCallCtrlT38LsRedundancy.setDescription("This object determines the extent of the Internet Fax Protocol (IFP) packet transmission redundancy for the low-speed control information exchanged during the first phase of a T.38 fax relay connection. Depending on whether Forward Error Correction (FEC) is enabled (cxeCallCtrlT38FecEnabled is set to 'true') or not, this object has different meanings. If FEC is disabled, then this object is the maximum number of prior IFP packets within a Unnumbered Datagram Protocol Transport Layer (UDPTL) packet carrying low speed information, not counting the primary or current IFP packet. If FEC is enabled, then this object is the maximum number of FEC messages within a UDPTL packet carrying low speed information. This object is not applicable if cxeCallCtrlT38Inhibited is set to 'true'.")
cxeCallCtrlT38HsRedundancy = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 325, 1, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxeCallCtrlT38HsRedundancy.setReference('ITU-T T.38 Procedures for real-time Group 3 facsimile communicating over IP networks')
if mibBuilder.loadTexts: cxeCallCtrlT38HsRedundancy.setStatus('current')
if mibBuilder.loadTexts: cxeCallCtrlT38HsRedundancy.setDescription("This object determines the extent of the Internet Fax Protocol (IFP) packet transmission redundancy for the high-speed control and image information exchanged following the initial low-speed phase of a T.38 fax relay connection. Depending on whether forward error correction (FEC) is enabled (cxeCallCtrlT38FecEnabled is set to 'true') or not. If FEC is disabled, then this object is the maximum number of prior IFP packets within a UDPTL packet carrying high speed information, not counting the primary or current IFP packet. If FEC is enabled, then this object is the maximum number of FEC messages within a UDPTL packet carrying high speed information. This object is not applicable if cxeCallCtrlT38Inhibited is set to 'true'.")
cxeCallCtrlT38NsfCountryCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 325, 1, 1, 1, 1, 17), CountryCodeITU().clone(173)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxeCallCtrlT38NsfCountryCode.setStatus('current')
if mibBuilder.loadTexts: cxeCallCtrlT38NsfCountryCode.setDescription("This object specifies the country code for identifying the country where the media gateway with non-standard capabilities was manufactured. This object is not applicable if cxeCallCtrlT38Inhibited is set to 'true'. ")
cxeCallCtrlT38NsfVendorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 325, 1, 1, 1, 1, 18), CxeTerminalProviderCode().clone(hexValue="0051")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxeCallCtrlT38NsfVendorCode.setStatus('current')
if mibBuilder.loadTexts: cxeCallCtrlT38NsfVendorCode.setDescription("Per its definition (ITU T.35), the Vendor Code (also called the Terminal Provider Code) in the Non-Standard Facilities (NSF) code is a two-byte field identifying the manufacturer of the media gateway with non-standard capabilities. This object is not applicable if cxeCallCtrlT38Inhibited is set to 'true'. ")
cxeCallCtrlVselDselFselSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 325, 1, 1, 1, 1, 19), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxeCallCtrlVselDselFselSupport.setStatus('current')
if mibBuilder.loadTexts: cxeCallCtrlVselDselFselSupport.setDescription('This object is used to enable or disable VSEL, DSEL and FSEL support. VSEL: Voice codec, packet length and packet times Selection DSEL: Data codec, packet length and packet times Selection FSEL: Fax codec, packet length and packet times Selection If cxeCallCtrlVselDselFselSupport is true, then the media gateway must indicate prefered codec, packet length and packet times for an ATM connection. ')
cxeCallCtrlDefaultBearTraffic = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 325, 1, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ipPvcAal5", 1), ("atmPvcAal2", 2), ("atmSvcAal2", 3), ("atmSvcAal1", 4))).clone('ipPvcAal5')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxeCallCtrlDefaultBearTraffic.setStatus('current')
if mibBuilder.loadTexts: cxeCallCtrlDefaultBearTraffic.setDescription('This object specifies the combination of the network type (IP/ATM), virtual circuit type (PVC/SVC) and ATM adaptation layer type (AAL1/AAL2/AAL5) for the connection used in transporting bearer traffic. ipPvcAal5 (1) - The bearer traffic is transported in IP network, through Permanent Virtual Circuit(PVC) over AAL5 adaptation layer. atmPvcAal2 (2) - The bearer traffic is transported in ATM network, through Permanent Virtual Circuit(PVC) over AAL2 adaptation layer. atmSvcAal2 (3) - The bearer traffic is transported in ATM network, through Switching Virtual Circuit(SVC) over AAL2 adaptation layer. atmSvcAal1 (4) - The bearer traffic is transported in ATM network, through Switching Virtual Circuit(SVC) over AAL1 adaptation layer. If the call agent specifies the bear traffic type in the MGCP (Media Gateway Control Protocol) local connection options (CRCX request), then configuration of this object will have no effect, else the value of this object will be used when sending CRCX response.')
cxeCallCtrlLastFailedMgcAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 325, 1, 1, 1, 1, 21), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxeCallCtrlLastFailedMgcAddrType.setStatus('current')
if mibBuilder.loadTexts: cxeCallCtrlLastFailedMgcAddrType.setDescription('This object indicates the address type, either IPv4 or IPv6, of cxeCallCtrlLastFailedMgcAddress. ')
cxeCallCtrlLastFailedMgcAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 325, 1, 1, 1, 1, 22), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxeCallCtrlLastFailedMgcAddress.setStatus('current')
if mibBuilder.loadTexts: cxeCallCtrlLastFailedMgcAddress.setDescription('This object indicates the address of MGC (Media Gateway Controller) with which the media gateway had tried to communicate lastly but failed.')
cxeCallCtrlProfileTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 325, 1, 1, 2), )
if mibBuilder.loadTexts: cxeCallCtrlProfileTable.setStatus('current')
if mibBuilder.loadTexts: cxeCallCtrlProfileTable.setDescription('This table defines the call control profiles. A call control profile contains the call control information that a call agent uses to establish a call. In the call control profile, it has the following configurations: (1) The information of call agent, such as its address, connecting port, service type and version. (2) The maximum retry parameters in the message exchange between the call agent and the media gateway. (3) The timeout settings in the call control. A call control profile can be associated with a voice interface (DS0 group in TDM side), so all the calls set up in the voice interface will use the call control parameters from the profile. A call control profile can be associated with a Media Gateway Controller(MGC)/call agent redundant group (cMgcGrpParamTable defined in CISCO-MGC-MIB). In this case, the call agent information for the profile will be determined by the MGC redundant group. ')
cxeCallCtrlProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 325, 1, 1, 2, 1), ).setIndexNames((0, "CISCO-MEDIA-GATEWAY-MIB", "cmgwIndex"), (0, "CISCO-XGCP-EXT-MIB", "cxeCcProfileIndex"))
if mibBuilder.loadTexts: cxeCallCtrlProfileEntry.setStatus('current')
if mibBuilder.loadTexts: cxeCallCtrlProfileEntry.setDescription('Each entry describes an instance of a call control profile in the media gateway. When an entry of call control profile is added to the table, the following object must be provided: cxeCcProfileName - an unique string of profile name to identify the profile. After the entry is added, all the accessible objects can be modified except cxeCcProfileName. If users want to modify the name of the call control profile, they have to delete the original entry and create another entry with the new name. ')
cxeCcProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 325, 1, 1, 2, 1, 1), CCallControlProfileIndex())
if mibBuilder.loadTexts: cxeCcProfileIndex.setStatus('current')
if mibBuilder.loadTexts: cxeCcProfileIndex.setDescription('This object uniquely identifies the call control profile.')
cxeCcProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 325, 1, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cxeCcProfileName.setStatus('current')
if mibBuilder.loadTexts: cxeCcProfileName.setDescription('A unique name for the profile. The name of the profile has to be unique among all entries of the table. This object is mandatory during the creation of the entry. This object can not be modified. If users want to modify the name of the call control profile, they have to delete the original entry and create another entry with the designated name. ')
cxeCcProfileNumVifs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 325, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxeCcProfileNumVifs.setStatus('current')
if mibBuilder.loadTexts: cxeCcProfileNumVifs.setDescription("This object reprsents the total number of voice interface (DS0 group) associated with this call control profile. The value of '0' means there is no voice interfaces associated with the profile. Before the call control profile can be deleted, this object should have the value of 0 (means all voice interfaces should be de-associated with the profile before the profile can be deleted). ")
cxeCcProfileMgcGrpNum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 325, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cxeCcProfileMgcGrpNum.setStatus('current')
if mibBuilder.loadTexts: cxeCcProfileMgcGrpNum.setDescription("This object indicates which MGC Redundant group number that the call control profile will be used. The value is the index to MGC Redundant Group Table (cMgcGrpParamTable). There are two conditions for associating a MGC group with a profile: 1. At least one MGC is associated with the MGC group 2. At least one protocol is associated with the MGC group After a MGC Redundant Group is associated with the profile (cxeCcProfileMgcGrpNum > 0): In the call setup, the parameters of MGCs within the MGC Redundant Group will be sequentially tried according to its preference. The value of '0' means there is no MGC Redundant Group associated with the profile. This object takes the precedence of object cxeCcProfileMgcAddress of the profile. If users try to set a value to cxeCcProfileMgcAddress while the value of this object is non-zero, the set will be rejected. Before the call control profile can be deleted, this object should have the value of 0. Which means MGC Redundant Group should be de-associated with the profile before the profile can be deleted.")
cxeCcProfileMgcAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 325, 1, 1, 2, 1, 5), InetAddressType().clone('ipv4')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cxeCcProfileMgcAddrType.setStatus('current')
if mibBuilder.loadTexts: cxeCcProfileMgcAddrType.setDescription('This object identifies the address type applicable to cxeCcProfileMgcAddress.')
cxeCcProfileMgcAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 325, 1, 1, 2, 1, 6), InetAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cxeCcProfileMgcAddress.setStatus('current')
if mibBuilder.loadTexts: cxeCcProfileMgcAddress.setDescription('This object specifies the address of Media Gateway Controller (MGC) configured in the profile. When cxeCcProfileMgcGrpNum is non-zero (which menas using MGC group), this object can not be set.')
cxeCcProfileProtocolIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 325, 1, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cxeCcProfileProtocolIdx.setStatus('current')
if mibBuilder.loadTexts: cxeCcProfileProtocolIdx.setDescription('This object specifies the protocol that the media gateway should communicate with MGC during call setup. It is the index of the protocol table(cMediaGwProtocolTable). If cxeCcProfileMgcGrpNum is non-zero, the value of this object will be ignored. The protocol will be determined by the MGC group.')
cxeCcProfileXgcpRetryMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 325, 1, 1, 2, 1, 8), CXgcpRetryMethod().clone('neverResetTimer')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cxeCcProfileXgcpRetryMethod.setStatus('current')
if mibBuilder.loadTexts: cxeCcProfileXgcpRetryMethod.setDescription('This object specifies the command/response retry method when the media gateway communicates with the MGC in xGCP protocols.')
cxeCcProfileRetryMax1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 325, 1, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)).clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cxeCcProfileRetryMax1.setReference('Refer to PKT-SP-EC-MGCP-I04-011221 specification Section 3.4.2')
if mibBuilder.loadTexts: cxeCcProfileRetryMax1.setStatus('current')
if mibBuilder.loadTexts: cxeCcProfileRetryMax1.setDescription('This object contains the suspicious error threshold for signaling messages.')
cxeCcProfileDnsLookupMax1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 325, 1, 1, 2, 1, 10), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cxeCcProfileDnsLookupMax1.setStatus('current')
if mibBuilder.loadTexts: cxeCcProfileDnsLookupMax1.setDescription("This object enables/disables the Max1 Domain Name Server (DNS) query operation when Max1 expires. This object is used when a gateway-initiated message is not acknowledged by the MGC. If the object is 'true', a DNS query is performed to re-resolve MGC's domain name after exhausting Max1 retries on any IP address associated with the MGC.")
cxeCcProfileRetryMax2 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 325, 1, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)).clone(7)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cxeCcProfileRetryMax2.setReference('Refer to PKT-SP-EC-MGCP-I04-011221 specification Section 3.4.2')
if mibBuilder.loadTexts: cxeCcProfileRetryMax2.setStatus('current')
if mibBuilder.loadTexts: cxeCcProfileRetryMax2.setDescription('This object contains the disconnect error threshold for signaling messages.')
cxeCcProfileDnsLookupMax2 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 325, 1, 1, 2, 1, 12), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cxeCcProfileDnsLookupMax2.setStatus('current')
if mibBuilder.loadTexts: cxeCcProfileDnsLookupMax2.setDescription("This object enables/disables the Max2 Domain Name Server (DNS) query operation when Max2 expires. This object is used when a gateway-initiated message is not acknowledged by the MGC. If the object is 'true', a DNS query is performed to re-resolve MGC's domain name after exhausting Max2 retries on the last IP address associated with the MGC.")
cxeCcProfileMwiTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 325, 1, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50)).clone(16)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cxeCcProfileMwiTimeout.setReference('GR-506-CORE, section 17.2.3')
if mibBuilder.loadTexts: cxeCcProfileMwiTimeout.setStatus('current')
if mibBuilder.loadTexts: cxeCcProfileMwiTimeout.setDescription('The timeout value for the message waiting indicator tone. Message Waiting Indicator (MWI) tone is used with message waiting services, it indicates that the media gateway is ready to accept address information or other information from an access line.')
cxeCcProfileTsmaxTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 325, 1, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(20)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cxeCcProfileTsmaxTimeout.setStatus('current')
if mibBuilder.loadTexts: cxeCcProfileTsmaxTimeout.setDescription('The timeout value for retransmission removal. The gateway uses the value of this object to determine how long for the MGCP messages stored in the retransmission queue before they are discarded.')
cxeCcProfileTdinitTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 325, 1, 1, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(15)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cxeCcProfileTdinitTimeout.setReference('RFC2705, Section 4.4.7 ')
if mibBuilder.loadTexts: cxeCcProfileTdinitTimeout.setStatus('current')
if mibBuilder.loadTexts: cxeCcProfileTdinitTimeout.setDescription('The voice interface (DS0 group) becomes disconnected when the media gateway tries to communicate with the call agent and the retransmission procedure times out after retrying. The voice interface (DS0 group) in disconnected state starts the disconnected timer initialised to the random value and uniformly distributed between 1 and initial waiting delay (Tdinit) in seconds. The gateway waits for either the expiration of the timer, or the reception of call agent command or the detection of local user activity for the voice interface (DS0 group). When the disconnected timer elapses, or when a command is received from the call agent or when there is a local user activity, the media gateway sends the Restart In Progress command with the restart method as RM:disconnected to the call agent.')
cxeCcProfileTdminTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 325, 1, 1, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(15)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cxeCcProfileTdminTimeout.setReference('RFC2705, Section 4.4.7 ')
if mibBuilder.loadTexts: cxeCcProfileTdminTimeout.setStatus('current')
if mibBuilder.loadTexts: cxeCcProfileTdminTimeout.setDescription('The DS0 group (voice interface) becomes disconnected when it tries to communicate with the call agent and the retransmission procedure times out after retrying. The DS0 group (voice interface ) in disconnected state starts the disconnected timer initialised to the random value and uniformly distributed between 1 and initial waiting delay (Tdinit) in seconds. The gateway waits for either the end of this timer, or the reception of call agent command or the detection of local user activity for the DS0 group(voice interface). When the disconnected timer elapses, or when a command is received from the call agent or when there is a local user activity, the Voice Gateway sends the Restart In Progress command with the restart method as RM:disconnected to the call agent. In case of local user activity, a provisionable disconnected minimum waiting delay (Tdmin) must have been elapsed since the gateway became disconnected. The minimum waiting delay (Tdmin) timeout value used by the voice Gateway to send the Restart In Progress with the restart method as RM:disconnected to the call agent if there is any local user activity is defined by this object. Media gateway initiated delete connection (DLCX) or restart in progress (RSIP) commands are not considered as local user activity. The events observed on the TDM interface or on the network constitute the local user activity.')
cxeCcProfileTdmaxTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 325, 1, 1, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(600)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cxeCcProfileTdmaxTimeout.setReference('RFC2705, Section 4.4.7 ')
if mibBuilder.loadTexts: cxeCcProfileTdmaxTimeout.setStatus('current')
if mibBuilder.loadTexts: cxeCcProfileTdmaxTimeout.setDescription('The maximum waiting delay (Tdmax) timeout value used by the media gateway to send the Restart In Progress with the restart method as RM:disconnected to the call agent when the voice interface associated ds0-group disconnection condition occurs. The DS0 group (voice interface) becomes disconnected when it tries to communicate with the call agent and the retransmission procedure times out after retrying. The DS0 group (voice interface) in disconnected state starts the disconnected timer initialised to the random value and uniformly distributed between 1 and initial waiting delay (Tdinit) in seconds. The gateway waits for either the expiration of the timer, or the reception of call agent command or the detection of local user activity for the DS0 group (voice interface). When the disconnected timer elapses, or when a command is received from the call agent or when there is a local user activity, the media gateway sends the Restart In Progress command with the restart method as RM:disconnected to the call agent. If the disconnected procedure still left the DS0 group (voice interface) disconnected, the disconnected timer is doubled subject to a provisionable disconnected maximum waiting delay (Tdmax) in seconds and the gateway starts the new disconnected procedure again. Once the maximum value is reached, the subsequent disconnected Restart In Progress commands use the maximum waiting delay (Tdmax).')
cxeCcProfileTcritTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 325, 1, 1, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(4)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cxeCcProfileTcritTimeout.setReference('RFC2705, Section 4.4.7 ')
if mibBuilder.loadTexts: cxeCcProfileTcritTimeout.setStatus('current')
if mibBuilder.loadTexts: cxeCcProfileTcritTimeout.setDescription('This object represents the timeout value for the critical timer. If used along with a digit map, the timer is started when the last digit is received. i.e and when no more digits are required for a digit map match. After this timer expires, the digit map match is assumed to be complete. If used without a digit map, the timer is started immediately and cancelled (but not restarted) as soon as a digit is entered. This object is used by call processing when it processes mid-call DTMF digit reporting.')
cxeCcProfileTparTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 325, 1, 1, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(16)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cxeCcProfileTparTimeout.setReference('RFC2705, Section 4.4.7 ')
if mibBuilder.loadTexts: cxeCcProfileTparTimeout.setStatus('current')
if mibBuilder.loadTexts: cxeCcProfileTparTimeout.setDescription(' This object represents the partial dial timeout and is used along with a digit map as the inter-digit timer. This object is used by call processing when it processes mid-call DTMF digit reporting. The timer is not started until the first digit is entered, and the timer is restarted after each new digit is entered untill either a digit map match or mismatch occurs. ')
cxeCcProfileThistTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 325, 1, 1, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(30)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cxeCcProfileThistTimeout.setReference('RFC2705, Section 4.4.7 ')
if mibBuilder.loadTexts: cxeCcProfileThistTimeout.setStatus('current')
if mibBuilder.loadTexts: cxeCcProfileThistTimeout.setDescription('The MGCP protocol is organized as set of transactions, each of which is composed of a command and a resonse. The MGCP messages, being carried over UDP, may be subject to losses. In the absence of a timely response, commands are repeated. The media gateway must keep in memory a list of the responses that it sent to recent transactions, and a list of the transactions that are currently being executed. Recent is here defined by the value of cxeCcProfileThistTimeout that specifies the number of seconds that responses to old transactions must be kept for. ')
cxeCcProfileRtTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 325, 1, 1, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600)).clone(180)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cxeCcProfileRtTimeout.setReference('RFC2705, Section 6 Event Packages')
if mibBuilder.loadTexts: cxeCcProfileRtTimeout.setStatus('current')
if mibBuilder.loadTexts: cxeCcProfileRtTimeout.setDescription("This object specifies time for which the local ring back tone (towards the TDM) will be generated unless interrupted (e.g., by the answer from the called party or a delete connection command from the Call Agent). The value of '0' indicates that the tone will be generated indefinitely unless interrupted. ")
cxeCcProfileRbkTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 325, 1, 1, 2, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600)).clone(180)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cxeCcProfileRbkTimeout.setReference('RFC2705, Section 6 Event Packages')
if mibBuilder.loadTexts: cxeCcProfileRbkTimeout.setStatus('current')
if mibBuilder.loadTexts: cxeCcProfileRbkTimeout.setDescription("This object specifies time for which the remote ring back tone (towards the packet network) will be generated unless interrupted (e.g., by the answer from the called party or a delete connection command from the Call Agent). The value of '0' indicates that the tone will be generated indefinitely unless interrupted. ")
cxeCcProfileCgTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 325, 1, 1, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600)).clone(180)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cxeCcProfileCgTimeout.setReference('RFC2705, Section 6 Event Packages')
if mibBuilder.loadTexts: cxeCcProfileCgTimeout.setStatus('current')
if mibBuilder.loadTexts: cxeCcProfileCgTimeout.setDescription("This object specifies time for network congestion tone will be generated. The network congestion tone will be generated when the network resources or bandwidth exceed their threholds. The value of '0' indicates that the tone will be generated indefinitely unless interrupted. ")
cxeCcProfileBzTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 325, 1, 1, 2, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600)).clone(30)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cxeCcProfileBzTimeout.setReference('RFC2705, Section 6 Event Packages')
if mibBuilder.loadTexts: cxeCcProfileBzTimeout.setStatus('current')
if mibBuilder.loadTexts: cxeCcProfileBzTimeout.setDescription("This object specifies time for which the busy tone will be generated unless interrupted (e.g., by the hangup from the calling party). The value of '0' indicates that the tone will be generated indefinitely unless interrupted. ")
cxeCcProfileDlTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 325, 1, 1, 2, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600)).clone(16)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cxeCcProfileDlTimeout.setReference('RFC2705, Section 6 Event Packages')
if mibBuilder.loadTexts: cxeCcProfileDlTimeout.setStatus('current')
if mibBuilder.loadTexts: cxeCcProfileDlTimeout.setDescription("This object specifies time for which the dial tone will be generated unless interrupted (e.g., by the first DTMF digit from the calling party). The value of '0' indicates that the tone will be generated indefinitely unless interrupted. ")
cxeCcProfileSlTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 325, 1, 1, 2, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600)).clone(16)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cxeCcProfileSlTimeout.setReference('RFC2705, Section 6 Event Packages')
if mibBuilder.loadTexts: cxeCcProfileSlTimeout.setStatus('current')
if mibBuilder.loadTexts: cxeCcProfileSlTimeout.setDescription("This object specifies time for which the stutter dial tone or confirmation dial tone will be generated unless interrupted (e.g., by the first DTMF digit from the calling party). The value of '0' indicates that the tone will be generated indefinitely unless interrupted. ")
cxeCcProfileRgTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 325, 1, 1, 2, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600)).clone(180)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cxeCcProfileRgTimeout.setReference('RFC2705, Section 6 Event Packages')
if mibBuilder.loadTexts: cxeCcProfileRgTimeout.setStatus('current')
if mibBuilder.loadTexts: cxeCcProfileRgTimeout.setDescription("This object specifies time for which the ringing cadence will be generated towards the basic PBX unless interrupted (e.g., by the answer from the called party or a delete connection command from the Call Agent). This is also the time for which remote inband ring back tone will be played towards the packet network. The value of '0' indicates that the cadence will be generated indefinitely unless interrupted. ")
cxeCcProfileRoTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 325, 1, 1, 2, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600)).clone(30)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cxeCcProfileRoTimeout.setReference('RFC2705, Section 6 Event Packages')
if mibBuilder.loadTexts: cxeCcProfileRoTimeout.setStatus('current')
if mibBuilder.loadTexts: cxeCcProfileRoTimeout.setDescription("This object specifies time for which the reorder tone or fast busy tone will be generated unless interrupted (e.g., by the hangup from the called party). The value of '0' indicates that the cadence will be generated indefinitely unless interrupted. ")
cxeCcProfileCot1Timeout = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 325, 1, 1, 2, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(3)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cxeCcProfileCot1Timeout.setReference('RFC2705, Section 6 Event Packages')
if mibBuilder.loadTexts: cxeCcProfileCot1Timeout.setStatus('current')
if mibBuilder.loadTexts: cxeCcProfileCot1Timeout.setDescription("This object specifies time for which the continuity test tone 1 will be generated unless interrupted. The value of '0' indicates that the cadence will be generated indefinitely unless interrupted. ")
cxeCcProfileCot2Timeout = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 325, 1, 1, 2, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(3)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cxeCcProfileCot2Timeout.setReference('RFC2705, Section 6 Event Packages')
if mibBuilder.loadTexts: cxeCcProfileCot2Timeout.setStatus('current')
if mibBuilder.loadTexts: cxeCcProfileCot2Timeout.setDescription("This object specifies time for which the continuity test tone 2 will be generated unless interrupted. The value of '0' indicates that the cadence will be generated indefinitely unless interrupted. ")
cxeCcProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 325, 1, 1, 2, 1, 32), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cxeCcProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: cxeCcProfileRowStatus.setDescription("This object is used by users for adding/deleting an entry from the table. The entry can't be deleted if the value of cxeCcProfileNumVifs is greater than zero or the value of cxeCcProfileMgcGrpNum is greater than zero.")
cxeCallCtrlMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 325, 2))
cxeCallCtrlMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 325, 2, 1))
cxeCallCtrlMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 325, 2, 2))
cxeCallCtrlMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 325, 2, 1, 1)).setObjects(("CISCO-XGCP-EXT-MIB", "cxeCallCtrlGroup"), ("CISCO-XGCP-EXT-MIB", "cxeCcProfileGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cxeCallCtrlMIBCompliance = cxeCallCtrlMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: cxeCallCtrlMIBCompliance.setDescription('The compliance statement for the SNMP entities which implement ciscoXgcpExtMIB.')
cxeCallCtrlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 325, 2, 2, 1)).setObjects(("CISCO-XGCP-EXT-MIB", "cxeCallCtrlControlServiceType"), ("CISCO-XGCP-EXT-MIB", "cxeCallCtrlBearerServiceType"), ("CISCO-XGCP-EXT-MIB", "cxeCallCtrlVoIpDtmfRelayMode"), ("CISCO-XGCP-EXT-MIB", "cxeCallCtrlVoIpDtmfCodec"), ("CISCO-XGCP-EXT-MIB", "cxeCallCtrlVoAal2DtmfRelayMode"), ("CISCO-XGCP-EXT-MIB", "cxeCallCtrlVoAal2DtmfCodec"), ("CISCO-XGCP-EXT-MIB", "cxeCallCtrlTsePayload"), ("CISCO-XGCP-EXT-MIB", "cxeCallCtrlNetNseTimer"), ("CISCO-XGCP-EXT-MIB", "cxeCallCtrlRtcpRcvTimer"), ("CISCO-XGCP-EXT-MIB", "cxeCallCtrlIgnoreAal2LcoCodec"), ("CISCO-XGCP-EXT-MIB", "cxeCallCtrlDigitMapOrder"), ("CISCO-XGCP-EXT-MIB", "cxeCallCtrlT38Inhibited"), ("CISCO-XGCP-EXT-MIB", "cxeCallCtrlT38NseRspTimer"), ("CISCO-XGCP-EXT-MIB", "cxeCallCtrlT38FecEnabled"), ("CISCO-XGCP-EXT-MIB", "cxeCallCtrlT38LsRedundancy"), ("CISCO-XGCP-EXT-MIB", "cxeCallCtrlT38HsRedundancy"), ("CISCO-XGCP-EXT-MIB", "cxeCallCtrlT38NsfCountryCode"), ("CISCO-XGCP-EXT-MIB", "cxeCallCtrlT38NsfVendorCode"), ("CISCO-XGCP-EXT-MIB", "cxeCallCtrlVselDselFselSupport"), ("CISCO-XGCP-EXT-MIB", "cxeCallCtrlDefaultBearTraffic"), ("CISCO-XGCP-EXT-MIB", "cxeCallCtrlLastFailedMgcAddrType"), ("CISCO-XGCP-EXT-MIB", "cxeCallCtrlLastFailedMgcAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cxeCallCtrlGroup = cxeCallCtrlGroup.setStatus('current')
if mibBuilder.loadTexts: cxeCallCtrlGroup.setDescription('This group contains objects that apply to the call control general configuration in a media gateway. ')
cxeCcProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 325, 2, 2, 2)).setObjects(("CISCO-XGCP-EXT-MIB", "cxeCcProfileName"), ("CISCO-XGCP-EXT-MIB", "cxeCcProfileNumVifs"), ("CISCO-XGCP-EXT-MIB", "cxeCcProfileMgcGrpNum"), ("CISCO-XGCP-EXT-MIB", "cxeCcProfileMgcAddrType"), ("CISCO-XGCP-EXT-MIB", "cxeCcProfileMgcAddress"), ("CISCO-XGCP-EXT-MIB", "cxeCcProfileProtocolIdx"), ("CISCO-XGCP-EXT-MIB", "cxeCcProfileXgcpRetryMethod"), ("CISCO-XGCP-EXT-MIB", "cxeCcProfileRetryMax1"), ("CISCO-XGCP-EXT-MIB", "cxeCcProfileDnsLookupMax1"), ("CISCO-XGCP-EXT-MIB", "cxeCcProfileRetryMax2"), ("CISCO-XGCP-EXT-MIB", "cxeCcProfileDnsLookupMax2"), ("CISCO-XGCP-EXT-MIB", "cxeCcProfileMwiTimeout"), ("CISCO-XGCP-EXT-MIB", "cxeCcProfileTsmaxTimeout"), ("CISCO-XGCP-EXT-MIB", "cxeCcProfileTdinitTimeout"), ("CISCO-XGCP-EXT-MIB", "cxeCcProfileTdminTimeout"), ("CISCO-XGCP-EXT-MIB", "cxeCcProfileTdmaxTimeout"), ("CISCO-XGCP-EXT-MIB", "cxeCcProfileTcritTimeout"), ("CISCO-XGCP-EXT-MIB", "cxeCcProfileTparTimeout"), ("CISCO-XGCP-EXT-MIB", "cxeCcProfileThistTimeout"), ("CISCO-XGCP-EXT-MIB", "cxeCcProfileRtTimeout"), ("CISCO-XGCP-EXT-MIB", "cxeCcProfileRbkTimeout"), ("CISCO-XGCP-EXT-MIB", "cxeCcProfileCgTimeout"), ("CISCO-XGCP-EXT-MIB", "cxeCcProfileBzTimeout"), ("CISCO-XGCP-EXT-MIB", "cxeCcProfileDlTimeout"), ("CISCO-XGCP-EXT-MIB", "cxeCcProfileSlTimeout"), ("CISCO-XGCP-EXT-MIB", "cxeCcProfileRgTimeout"), ("CISCO-XGCP-EXT-MIB", "cxeCcProfileRoTimeout"), ("CISCO-XGCP-EXT-MIB", "cxeCcProfileCot1Timeout"), ("CISCO-XGCP-EXT-MIB", "cxeCcProfileCot2Timeout"), ("CISCO-XGCP-EXT-MIB", "cxeCcProfileRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cxeCcProfileGroup = cxeCcProfileGroup.setStatus('current')
if mibBuilder.loadTexts: cxeCcProfileGroup.setDescription('This group contains objects that apply to the call control profile configuration in a media gateway. ')
mibBuilder.exportSymbols("CISCO-XGCP-EXT-MIB", cxeCallCtrlVoIpDtmfRelayMode=cxeCallCtrlVoIpDtmfRelayMode, cxeCallCtrlBearerServiceType=cxeCallCtrlBearerServiceType, cxeCcProfileTdminTimeout=cxeCcProfileTdminTimeout, cxeCcProfileNumVifs=cxeCcProfileNumVifs, cxeCallCtrlVselDselFselSupport=cxeCallCtrlVselDselFselSupport, DtmfRelayMode=DtmfRelayMode, cxeCallCtrlT38NsfVendorCode=cxeCallCtrlT38NsfVendorCode, cxeCcProfileTdmaxTimeout=cxeCcProfileTdmaxTimeout, cxeCcProfileProtocolIdx=cxeCcProfileProtocolIdx, cxeCcProfileDnsLookupMax2=cxeCcProfileDnsLookupMax2, cxeCcProfileRetryMax1=cxeCcProfileRetryMax1, DtmfCodecType=DtmfCodecType, cxeCcProfileThistTimeout=cxeCcProfileThistTimeout, cxeCcProfileDlTimeout=cxeCcProfileDlTimeout, cxeCcProfileRowStatus=cxeCcProfileRowStatus, cxeCcProfileTdinitTimeout=cxeCcProfileTdinitTimeout, cxeCallCtrlRtcpRcvTimer=cxeCallCtrlRtcpRcvTimer, cxeCallCtrlControlServiceType=cxeCallCtrlControlServiceType, cxeCallCtrlDigitMapOrder=cxeCallCtrlDigitMapOrder, cxeCcProfileName=cxeCcProfileName, cxeCallCtrlDefaultBearTraffic=cxeCallCtrlDefaultBearTraffic, cxeCcProfileIndex=cxeCcProfileIndex, cxeCcProfileTsmaxTimeout=cxeCcProfileTsmaxTimeout, cxeCcProfileRetryMax2=cxeCcProfileRetryMax2, cxeCcProfileCot1Timeout=cxeCcProfileCot1Timeout, cxeCallCtrlMIBCompliance=cxeCallCtrlMIBCompliance, cxeCcProfileRoTimeout=cxeCcProfileRoTimeout, cxeCallCtrlT38Inhibited=cxeCallCtrlT38Inhibited, cxeCcProfileMgcGrpNum=cxeCcProfileMgcGrpNum, cxeCallCtrlVoAal2DtmfCodec=cxeCallCtrlVoAal2DtmfCodec, cxeCcProfileRgTimeout=cxeCcProfileRgTimeout, cxeCallCtrlConfigEntry=cxeCallCtrlConfigEntry, cxeCallCtrlT38NseRspTimer=cxeCallCtrlT38NseRspTimer, cxeCallCtrlIgnoreAal2LcoCodec=cxeCallCtrlIgnoreAal2LcoCodec, cxeCcProfileXgcpRetryMethod=cxeCcProfileXgcpRetryMethod, cxeCcProfileTparTimeout=cxeCcProfileTparTimeout, cxeCcProfileRbkTimeout=cxeCcProfileRbkTimeout, cxeCcProfileSlTimeout=cxeCcProfileSlTimeout, cxeCallCtrlLastFailedMgcAddrType=cxeCallCtrlLastFailedMgcAddrType, cxeCallCtrlT38HsRedundancy=cxeCallCtrlT38HsRedundancy, cxeCallCtrlT38NsfCountryCode=cxeCallCtrlT38NsfCountryCode, cxeCcProfileDnsLookupMax1=cxeCcProfileDnsLookupMax1, cxeCcProfileBzTimeout=cxeCcProfileBzTimeout, cxeCallCtrlNetNseTimer=cxeCallCtrlNetNseTimer, cxeCallCtrlGroup=cxeCallCtrlGroup, cxeCallCtrlTsePayload=cxeCallCtrlTsePayload, cxeCallCtrlVoIpDtmfCodec=cxeCallCtrlVoIpDtmfCodec, ciscoXgcpExtMIB=ciscoXgcpExtMIB, cxeCallCtrlConfigTable=cxeCallCtrlConfigTable, cxgcpExtObjects=cxgcpExtObjects, PYSNMP_MODULE_ID=ciscoXgcpExtMIB, cxeCallCtrlT38FecEnabled=cxeCallCtrlT38FecEnabled, cxeCcProfileTcritTimeout=cxeCcProfileTcritTimeout, cxeCallCtrlLastFailedMgcAddress=cxeCallCtrlLastFailedMgcAddress, cxeCcProfileMgcAddrType=cxeCcProfileMgcAddrType, cxeCcProfileGroup=cxeCcProfileGroup, cxgcpExtConfig=cxgcpExtConfig, cxeCallCtrlVoAal2DtmfRelayMode=cxeCallCtrlVoAal2DtmfRelayMode, cxeCcProfileMwiTimeout=cxeCcProfileMwiTimeout, cxeCallCtrlMIBConformance=cxeCallCtrlMIBConformance, cxeCallCtrlMIBGroups=cxeCallCtrlMIBGroups, cxeCcProfileMgcAddress=cxeCcProfileMgcAddress, cxeCcProfileRtTimeout=cxeCcProfileRtTimeout, cxeCcProfileCot2Timeout=cxeCcProfileCot2Timeout, cxeCallCtrlProfileTable=cxeCallCtrlProfileTable, cxeCallCtrlMIBCompliances=cxeCallCtrlMIBCompliances, cxeCallCtrlProfileEntry=cxeCallCtrlProfileEntry, CxeTerminalProviderCode=CxeTerminalProviderCode, cxeCcProfileCgTimeout=cxeCcProfileCgTimeout, cxeCallCtrlT38LsRedundancy=cxeCallCtrlT38LsRedundancy)
