#
# PySNMP MIB module T11-FC-FABRIC-ADDR-MGR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/T11-FC-FABRIC-ADDR-MGR-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:27:03 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint")
fcmInstanceIndex, fcmSwitchIndex, FcNameIdOrZero, FcDomainIdOrZero = mibBuilder.importSymbols("FC-MGMT-MIB", "fcmInstanceIndex", "fcmSwitchIndex", "FcNameIdOrZero", "FcDomainIdOrZero")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Counter64, IpAddress, TimeTicks, ModuleIdentity, mib_2, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Gauge32, NotificationType, Unsigned32, Bits, Counter32, ObjectIdentity, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "IpAddress", "TimeTicks", "ModuleIdentity", "mib-2", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Gauge32", "NotificationType", "Unsigned32", "Bits", "Counter32", "ObjectIdentity", "Integer32")
TruthValue, RowStatus, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "RowStatus", "TextualConvention", "DisplayString")
T11FabricIndex, = mibBuilder.importSymbols("T11-TC-MIB", "T11FabricIndex")
t11FcFabricAddrMgrMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 137))
t11FcFabricAddrMgrMIB.setRevisions(('2006-03-02 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: t11FcFabricAddrMgrMIB.setRevisionsDescriptions(('Initial version of this MIB module, published as RFC 4439.',))
if mibBuilder.loadTexts: t11FcFabricAddrMgrMIB.setLastUpdated('200603020000Z')
if mibBuilder.loadTexts: t11FcFabricAddrMgrMIB.setOrganization('T11')
if mibBuilder.loadTexts: t11FcFabricAddrMgrMIB.setContactInfo(' Claudio DeSanti Cisco Systems, Inc. 170 West Tasman Drive San Jose, CA 95134 USA Phone: +1 408 853-9172 EMail: cds@cisco.com Keith McCloghrie Cisco Systems, Inc. 170 West Tasman Drive San Jose, CA USA 95134 Phone: +1 408-526-5260 EMail: kzm@cisco.com')
if mibBuilder.loadTexts: t11FcFabricAddrMgrMIB.setDescription("The MIB module for the Fabric Address management functionality defined by the Fibre Channel standards. For the purposes of this MIB, Fabric Address Manager refers to the functionality of acquiring DomainID(s) as specified in FC-SW-3, and managing Fibre Channel Identifiers as specified in FC-FS. An instance of 'Fabric Address Manager' software functionality executes in the Principal Switch, and in each other switch. After an agent reboot, the values of read-write objects defined in this MIB module are implementation-dependent. Copyright (C) The Internet Society (2006). This version of this MIB module is part of RFC 4439; see the RFC itself for full legal notices.")
t11FamNotifications = MibIdentifier((1, 3, 6, 1, 2, 1, 137, 0))
t11FamMIBObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 137, 1))
t11FamMIBConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 137, 2))
t11FamConfiguration = MibIdentifier((1, 3, 6, 1, 2, 1, 137, 1, 1))
t11FamInfo = MibIdentifier((1, 3, 6, 1, 2, 1, 137, 1, 2))
t11FamNotifyControl = MibIdentifier((1, 3, 6, 1, 2, 1, 137, 1, 3))
class T11FamDomainPriority(TextualConvention, Unsigned32):
    reference = 'Fibre Channel - Switch Fabric - 3 (FC-SW-3), ANSI INCITS 384-2004, section 6.1.5.'
    description = 'Priority of a switch. The Principal Switch selection is influenced by the priority of the switches. Some values of importance are: 1 : The highest priority in Principal Switch selection, which is used by the administrator to establish which switch becomes the Principal Switch. 255 : Indicates that the switch is not capable of acting as a Principal Switch.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 255)

class T11FamDomainInterfaceRole(TextualConvention, Integer32):
    reference = 'Fibre Channel - Switch Fabric - 3 (FC-SW-3), ANSI INCITS 384-2004, Sections 3.1, 5.7, and Figure 9.'
    description = "The 'designated' state/role of the Inter-Switch Link (ISL) to which an interface connects, or (if not connected) the state of the interface: nonPrincipal (1) - non-Principal ISL principalUpstream (2) - Upstream Principal ISL principalDownsteam (3) - Downstream Principal ISL isolated (4) - interface is isolated down (5) - interface is down unknown (6) - state/role is unknown "
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("nonPrincipal", 1), ("principalUpstream", 2), ("principalDownsteam", 3), ("isolated", 4), ("down", 5), ("unknown", 6))

class T11FamState(TextualConvention, Integer32):
    reference = 'Fibre Channel - Switch Fabric - 3 (FC-SW-3), ANSI INCITS 384-2004, Table 86 and Figure 15.'
    description = "The state of the Fabric Address Manager, as described in Table 86 and Figure 15 of FC-SW-3. - 'other' represents a switch that is in a state not represented by any of the below enumerations. - 'starting' represents a switch engaged in the process represented by the first row in Table 86. - 'unconfigured' represents a switch that requires operator input before it can begin the process represented by the first row in Table 86. - 'principalSwitchSelection' represents a switch engaged in the process represented by the second row in Table 86, but not in states F0 or F1 of Figure 15. - 'domainIdDistribution' represents a switch engaged in the process represented by the third row in Table 86. - 'buildFabricPhase' represents a switch that is in state F0 of Figure 15. - 'reconfigureFabricPhase' represents a switch that is in state F1 of Figure 15. - 'stable' represents a switch that has successfully completed the process represented by the third row in Table 86 and has at least one E_Port. - 'stableWithNoEports' represents a switch that has successfully completed the process represented by the third row in Table 86 but has no E_Ports. - 'noDomains' represents a switch that has completed the process represented by the third row in Table 86 but failed to obtain a Domain_ID. - 'disabled' represents any situation in which the corresponding instance of t11FamEnable has the value 'false'. - 'unknown' represents a switch that is confused about what state it is in."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))
    namedValues = NamedValues(("other", 1), ("starting", 2), ("unconfigured", 3), ("principalSwitchSelection", 4), ("domainIdDistribution", 5), ("buildFabricPhase", 6), ("reconfigureFabricPhase", 7), ("stable", 8), ("stableWithNoEports", 9), ("noDomains", 10), ("disabled", 11), ("unknown", 12))

t11FamTable = MibTable((1, 3, 6, 1, 2, 1, 137, 1, 1, 1), )
if mibBuilder.loadTexts: t11FamTable.setStatus('current')
if mibBuilder.loadTexts: t11FamTable.setDescription('This table contains Fabric Address Manager related parameters that are able to be configured and monitored in a Fibre Channel switch. For each of the switches (identified by fcmSwitchIndex) managed by a Fibre Channel management instance (identified by fcmInstanceIndex), there is any entry for each Fabric known to that switch. Entries are implicitly created/removed if and when additional Fabrics are created/deleted.')
t11FamEntry = MibTableRow((1, 3, 6, 1, 2, 1, 137, 1, 1, 1, 1), ).setIndexNames((0, "FC-MGMT-MIB", "fcmInstanceIndex"), (0, "FC-MGMT-MIB", "fcmSwitchIndex"), (0, "T11-FC-FABRIC-ADDR-MGR-MIB", "t11FamFabricIndex"))
if mibBuilder.loadTexts: t11FamEntry.setStatus('current')
if mibBuilder.loadTexts: t11FamEntry.setDescription('An entry provides information on the local Fabric Address Manager functionality for a Fabric known to a particular switch.')
t11FamFabricIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 137, 1, 1, 1, 1, 1), T11FabricIndex())
if mibBuilder.loadTexts: t11FamFabricIndex.setStatus('current')
if mibBuilder.loadTexts: t11FamFabricIndex.setDescription('A unique index value that uniquely identifies a particular Fabric known to a particular switch. In a Fabric conformant to FC-SW-3, only a single Fabric can operate within a physical infrastructure, and thus, the value of this Fabric Index will always be 1. However, the current standard, FC-SW-4, defines how multiple Fabrics, each with its own management instrumentation, could operate within one (or more) physical infrastructures. When such multiple Fabrics are in use, this index value is used to uniquely identify a particular Fabric within a physical infrastructure.')
t11FamConfigDomainId = MibTableColumn((1, 3, 6, 1, 2, 1, 137, 1, 1, 1, 1, 2), FcDomainIdOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t11FamConfigDomainId.setReference('Fibre Channel - Switch Fabric - 4 (FC-SW-4), ANSI INCITS 418-2006, section 7.')
if mibBuilder.loadTexts: t11FamConfigDomainId.setStatus('current')
if mibBuilder.loadTexts: t11FamConfigDomainId.setDescription("The configured Domain_ID of the particular switch on this Fabric, or zero if no Domain_ID has been configured. The meaning of this object depends on t11FamConfigDomainIdType object. If t11FamConfigDomainIdType is 'preferred', then the configured Domain_ID is called the 'preferred Domain_ID'. Valid values are between 0 and 239. In a situation where this Domain_ID cannot be assigned, any other Domain_ID will be acceptable. A value of zero means any Domain_ID. If t11FamConfigDomainIdType is 'insistent', then the configured Domain_ID is called the 'insistent Domain_ID' and valid values are between 1 and 239. In a situation where this Domain_ID cannot be assigned, no other Domain_ID is acceptable. In both of the above cases, the switch sends an RDI (Request Domain_ID) to request this Domain_ID to the Principal Switch. If no Domain_ID is able to be granted in the case of 'preferred', or if an 'insistent' Domain_ID is configured but not able to be granted, then it is an error condition. When this error occurs, the switch will continue as if it receives a SW_RJT with a reason/explanation of 'Unable to perform command request'/'Domain_ID not available'. That is, its E_Ports on that Fabric will be isolated and the administrator informed via a 't11FamDomainIdNotAssigned' notification. If t11FamConfigDomainIdType is 'static', then the configured Domain_ID is called the 'static Domain_ID' and valid values are between 1 and 239. In this situation, there is no Principal Switch in the Fabric and the Domain_ID is simply assigned by configuration, together with the Fabric_Name. A switch configured with a static Domain_ID, on receiving an EFP, BF, RCF, DIA, or RDI SW_ILS, shall reply with an SW_RJT having Reason Code Explanation 'E_Port is Isolated' and shall isolate the receiving E_Port. For the persistence of values across reboots, see the MODULE-IDENTITY's DESCRIPTION clause.")
t11FamConfigDomainIdType = MibTableColumn((1, 3, 6, 1, 2, 1, 137, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("preferred", 1), ("insistent", 2), ("static", 3))).clone('preferred')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t11FamConfigDomainIdType.setStatus('current')
if mibBuilder.loadTexts: t11FamConfigDomainIdType.setDescription("Type of configured Domain_ID contained in t11FamConfigDomainId. For the persistence of values across reboots, see the MODULE-IDENTITY's DESCRIPTION clause.")
t11FamAutoReconfigure = MibTableColumn((1, 3, 6, 1, 2, 1, 137, 1, 1, 1, 1, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t11FamAutoReconfigure.setReference('Fibre Channel - Switch Fabric - 3 (FC-SW-3), December 2003, sections 6.1.12 & 7.3. Fibre Channel - Methodologies for Interconnects (FC-MI), INCITS TR-30-2002, table 14, note g.')
if mibBuilder.loadTexts: t11FamAutoReconfigure.setStatus('current')
if mibBuilder.loadTexts: t11FamAutoReconfigure.setDescription("This object determines how a particular switch responds to certain error conditions. The condition that might cause these errors is the merging of two disjoint Fabrics that have overlapping Domain_ID lists. If value of this object is 'true', the switch will send an RCF (ReConfigureFabric) to rebuild the Fabric. If 'false', the switch will isolate the E_Ports on which the errors happened. For the persistence of values across reboots, see the MODULE-IDENTITY's DESCRIPTION clause.")
t11FamContiguousAllocation = MibTableColumn((1, 3, 6, 1, 2, 1, 137, 1, 1, 1, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t11FamContiguousAllocation.setStatus('current')
if mibBuilder.loadTexts: t11FamContiguousAllocation.setDescription("Determines how a particular switch behaves when elected as the Principal Switch. If true, the switch will only accept RDIs with a contiguous allocation; specifically, it will reject RDIs with non-contiguous Domain_IDs, and if an RDI for a contiguous Domain_ID is not able to be fulfilled, it will try to replace all the Domain_IDs in the list with contiguous Domain_IDs, and if that fails, the RDI will be rejected. If false, then the switch acts normally in granting the Domain_IDs even if they are not contiguous. For the persistence of values across reboots, see the MODULE-IDENTITY's DESCRIPTION clause.")
t11FamPriority = MibTableColumn((1, 3, 6, 1, 2, 1, 137, 1, 1, 1, 1, 6), T11FamDomainPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t11FamPriority.setStatus('current')
if mibBuilder.loadTexts: t11FamPriority.setDescription("The initial or configured priority of a particular switch to be used in Principal Switch selection process. For the persistence of values across reboots, see the MODULE-IDENTITY's DESCRIPTION clause.")
t11FamPrincipalSwitchWwn = MibTableColumn((1, 3, 6, 1, 2, 1, 137, 1, 1, 1, 1, 7), FcNameIdOrZero().clone(hexValue="")).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FamPrincipalSwitchWwn.setStatus('current')
if mibBuilder.loadTexts: t11FamPrincipalSwitchWwn.setDescription('The WWN of the Principal Switch on this Fabric, or zero-length string if the identity of the principal switch is unknown.')
t11FamLocalSwitchWwn = MibTableColumn((1, 3, 6, 1, 2, 1, 137, 1, 1, 1, 1, 8), FcNameIdOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FamLocalSwitchWwn.setStatus('current')
if mibBuilder.loadTexts: t11FamLocalSwitchWwn.setDescription('The WWN of the particular switch on this Fabric.')
t11FamAssignedAreaIdList = MibTableColumn((1, 3, 6, 1, 2, 1, 137, 1, 1, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FamAssignedAreaIdList.setStatus('current')
if mibBuilder.loadTexts: t11FamAssignedAreaIdList.setDescription("The list of (zero or more) Area_IDs that have been assigned by a particular switch in this Fabric, formatted as an array of octets in ascending order. Each octet represents one Area_ID. So, the list containing Area_IDs 23, 45, 235, and 56 would be formatted as the 4-octet string x'172d38eb'. A particular area's Area_ID is used as the index into the t11FamAreaTable to get the statistics on that area.")
t11FamGrantedFcIds = MibTableColumn((1, 3, 6, 1, 2, 1, 137, 1, 1, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FamGrantedFcIds.setStatus('current')
if mibBuilder.loadTexts: t11FamGrantedFcIds.setDescription("The total number of Fibre Channel Address Identifiers granted (for local use, i.e., with a particular switch's Domain_ID) by the Fabric Address Manager on that switch. This counter has no discontinuities other than those that all Counter32s have when sysUpTime=0.")
t11FamRecoveredFcIds = MibTableColumn((1, 3, 6, 1, 2, 1, 137, 1, 1, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FamRecoveredFcIds.setStatus('current')
if mibBuilder.loadTexts: t11FamRecoveredFcIds.setDescription('The total number of Fibre Channel Address Identifiers that have been recovered by the Fabric Address Manager on a particular switch since the switch has been initialized. A recovered Fibre Channel Address Identifier is one that is explicitly returned after previously being used. This counter has no discontinuities other than those that all Counter32s have when sysUpTime=0.')
t11FamFreeFcIds = MibTableColumn((1, 3, 6, 1, 2, 1, 137, 1, 1, 1, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FamFreeFcIds.setStatus('current')
if mibBuilder.loadTexts: t11FamFreeFcIds.setDescription('The number of Fibre Channel Address Identifiers that are currently unassigned on this Fabric and could be available for assignment either immediately or at some later time. The sum of the instances of FreeFcIds and AssignedFcIds corresponding to a particular Fabric is the total number of Fibre Channel Address Identifiers that the local Fabric Address Management is capable of assigning on that Fabric.')
t11FamAssignedFcIds = MibTableColumn((1, 3, 6, 1, 2, 1, 137, 1, 1, 1, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FamAssignedFcIds.setStatus('current')
if mibBuilder.loadTexts: t11FamAssignedFcIds.setDescription('The number of Fibre Channel Address Identifiers that are currently assigned on this Fabric. The sum of the instances of FreeFcIds and AssignedFcIds corresponding to a particular Fabric is the total number of Fibre Channel Address Identifiers that the local Fabric Address Management is capable of assigning on that Fabric.')
t11FamAvailableFcIds = MibTableColumn((1, 3, 6, 1, 2, 1, 137, 1, 1, 1, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FamAvailableFcIds.setReference('Fibre Channel - Framing and Signaling (FC-FS), ANSI INCITS 373-2003, section 15.6.2.4.2.')
if mibBuilder.loadTexts: t11FamAvailableFcIds.setStatus('current')
if mibBuilder.loadTexts: t11FamAvailableFcIds.setDescription("The number of Fibre Channel Address Identifiers that are unassigned and currently available for immediate assignment on the Fabric, e.g., with the 'Clean Address' bit set to 1.")
t11FamRunningPriority = MibTableColumn((1, 3, 6, 1, 2, 1, 137, 1, 1, 1, 1, 15), T11FamDomainPriority()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FamRunningPriority.setStatus('current')
if mibBuilder.loadTexts: t11FamRunningPriority.setDescription('The running priority of a particular switch on this Fabric. This value is initialized to the value of t11FamPriority, and subsequently altered as specified by the procedures defined in FC-SW-3.')
t11FamPrincSwRunningPriority = MibTableColumn((1, 3, 6, 1, 2, 1, 137, 1, 1, 1, 1, 16), T11FamDomainPriority()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FamPrincSwRunningPriority.setStatus('current')
if mibBuilder.loadTexts: t11FamPrincSwRunningPriority.setDescription('The running priority of the Principal Switch on this Fabric.')
t11FamState = MibTableColumn((1, 3, 6, 1, 2, 1, 137, 1, 1, 1, 1, 17), T11FamState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FamState.setStatus('current')
if mibBuilder.loadTexts: t11FamState.setDescription('The state of the Fabric Address Manager on a particular switch on this Fabric.')
t11FamLocalPrincipalSwitchSlctns = MibTableColumn((1, 3, 6, 1, 2, 1, 137, 1, 1, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FamLocalPrincipalSwitchSlctns.setStatus('current')
if mibBuilder.loadTexts: t11FamLocalPrincipalSwitchSlctns.setDescription('The number of times a particular switch became the Principal Switch on this Fabric. This counter has no discontinuities other than those that all Counter32s have when sysUpTime=0.')
t11FamPrincipalSwitchSelections = MibTableColumn((1, 3, 6, 1, 2, 1, 137, 1, 1, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FamPrincipalSwitchSelections.setStatus('current')
if mibBuilder.loadTexts: t11FamPrincipalSwitchSelections.setDescription('The number of Principal Switch selections on this Fabric. This counter has no discontinuities other than those that all Counter32s have when sysUpTime=0.')
t11FamBuildFabrics = MibTableColumn((1, 3, 6, 1, 2, 1, 137, 1, 1, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FamBuildFabrics.setStatus('current')
if mibBuilder.loadTexts: t11FamBuildFabrics.setDescription('The number of non-disruptive fabric reconfigurations (BFs) that have occurred on this Fabric. This counter has no discontinuities other than those that all Counter32s have when sysUpTime=0.')
t11FamFabricReconfigures = MibTableColumn((1, 3, 6, 1, 2, 1, 137, 1, 1, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FamFabricReconfigures.setStatus('current')
if mibBuilder.loadTexts: t11FamFabricReconfigures.setDescription('The number of disruptive fabric reconfigurations (RCFs) that have occurred on this Fabric. This counter has no discontinuities other than those that all Counter32s have when sysUpTime=0.')
t11FamDomainId = MibTableColumn((1, 3, 6, 1, 2, 1, 137, 1, 1, 1, 1, 22), FcDomainIdOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FamDomainId.setStatus('current')
if mibBuilder.loadTexts: t11FamDomainId.setDescription('The Domain_ID of a particular switch on this Fabric or zero if no Domain_ID has been assigned.')
t11FamSticky = MibTableColumn((1, 3, 6, 1, 2, 1, 137, 1, 1, 1, 1, 23), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FamSticky.setStatus('current')
if mibBuilder.loadTexts: t11FamSticky.setDescription("An indication of whether a particular switch is supporting the concept of Preferred Domain_IDs via a best-effort attempt to re-assign the same Fibre Channel Address Identifier value to a port on the next occasion when a port requests an assignment on this Fabric. If the value of this object is 'true', then the switch is maintaining rows in the t11FamFcIdCacheTable for this Fabric.")
t11FamRestart = MibTableColumn((1, 3, 6, 1, 2, 1, 137, 1, 1, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("nonDisruptive", 1), ("disruptive", 2), ("noOp", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t11FamRestart.setReference('Fibre Channel - Switch Fabric - 3 (FC-SW-3), ANSI INCITS 384-2004, section 7.3.')
if mibBuilder.loadTexts: t11FamRestart.setStatus('current')
if mibBuilder.loadTexts: t11FamRestart.setDescription("This object tells the Fabric Address Manager to request a Fabric reconfiguration. If this object is set to 'disruptive', then an RCF (ReConfigure Fabric) is generated in the Fabric in order for the Fabric to recover from the errors. If this object is set to 'nonDisruptive', then a BF (Build Fabric) is generated in the Fabric. No action is taken if this object is set to 'noOp'. The value of the object when read is always 'noOp'. For the persistence of values across reboots, see the MODULE-IDENTITY's DESCRIPTION clause.")
t11FamRcFabricNotifyEnable = MibTableColumn((1, 3, 6, 1, 2, 1, 137, 1, 1, 1, 1, 25), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t11FamRcFabricNotifyEnable.setStatus('current')
if mibBuilder.loadTexts: t11FamRcFabricNotifyEnable.setDescription("An indication of whether or not a particular switch should issue a t11FamFabricChangeNotify notification on sending or receiving ReConfigureFabric (RCF) on a Fabric. If the value of the object is 'true', then the notification is generated. If the value is 'false', notification is not generated. If an implementation requires all Fabrics to have the same value, then setting one instance of this object to a new object will result in all corresponding instances being set to that same new value. For the persistence of values across reboots, see the MODULE-IDENTITY's DESCRIPTION clause.")
t11FamEnable = MibTableColumn((1, 3, 6, 1, 2, 1, 137, 1, 1, 1, 1, 26), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t11FamEnable.setReference('Fibre Channel - Switch Fabric - 4 (FC-SW-4), ANSI INCITS 418-2006, sections 7.1 and 7.3.')
if mibBuilder.loadTexts: t11FamEnable.setStatus('current')
if mibBuilder.loadTexts: t11FamEnable.setDescription("Enables the Fabric Address Manager on this switch on this Fabric. If enabled on a Fabric, the switch will participate in Principal Switch selection, and Domain_IDs are assigned dynamically. If disabled, the switch will not participate in Principal Switch selection, and Domain_IDs are assigned statically. Thus, the corresponding value of t11FamConfigDomainIdType needs to be 'static'. For the persistence of values across reboots, see the MODULE-IDENTITY's DESCRIPTION clause.")
t11FamFabricName = MibTableColumn((1, 3, 6, 1, 2, 1, 137, 1, 1, 1, 1, 27), FcNameIdOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t11FamFabricName.setReference('Fibre Channel - Switch Fabric - 4 (FC-SW-4), ANSI INCITS 418-2006, section 7.1.')
if mibBuilder.loadTexts: t11FamFabricName.setStatus('current')
if mibBuilder.loadTexts: t11FamFabricName.setDescription("The WWN that is configured on this switch to be used as the name of this Fabric when the value of t11FamEnable is 'false'. If the value of t11FamEnable is 'true', this value is not used. Fibre Channel requires that: a) all switches in an operational Fabric be configured with the same Fabric name; and b) each Fabric have a unique Fabric name. If either of these is violated, either by switches within a single Fabric being configured with different Fabric names, or by multiple Fabrics that share management applications or interact in other ways having the same Fabric name, then the behavior of the switches and associated management functions is not specified by Fibre Channel or Internet standards. For the persistence of values across reboots, see the MODULE-IDENTITY's DESCRIPTION clause.")
t11FamIfTable = MibTable((1, 3, 6, 1, 2, 1, 137, 1, 1, 2), )
if mibBuilder.loadTexts: t11FamIfTable.setStatus('current')
if mibBuilder.loadTexts: t11FamIfTable.setDescription('This table contains those Fabric Address Manager parameters and status values that are per-interface (identified by an ifIndex value), per-Fabric (identified by a t11FamFabricIndex value), and per-switch (identified by values of fcmInstanceIndex and fcmSwitchIndex). An entry in this table is automatically created when an E_Port becomes non-isolated on a particular Fabric. An entry is deleted automatically from this table if: a) the corresponding interface is no longer an E_Port (e.g., a G_Port that is dynamically determined to be an F_Port), and all configuration parameter(s) have default values; or b) the interface identified by ifIndex no longer exists (e.g., because a line-card is physically removed); or c) the row in the t11FamTable corresponding the fabric identified by t11FamFabricID no longer exists. Creating an entry in this table via t11FamIfRowStatus provides the means to specify non-default parameter value(s) for an interface at a time when the relevant row in this table does not exist, i.e., because the interface is either down or it is not an E_Port.')
t11FamIfEntry = MibTableRow((1, 3, 6, 1, 2, 1, 137, 1, 1, 2, 1), ).setIndexNames((0, "FC-MGMT-MIB", "fcmInstanceIndex"), (0, "FC-MGMT-MIB", "fcmSwitchIndex"), (0, "T11-FC-FABRIC-ADDR-MGR-MIB", "t11FamFabricIndex"), (0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: t11FamIfEntry.setStatus('current')
if mibBuilder.loadTexts: t11FamIfEntry.setDescription('An entry containing information on the interface configuration on the Fabric identified by t11FamFabricIndex.')
t11FamIfRcfReject = MibTableColumn((1, 3, 6, 1, 2, 1, 137, 1, 1, 2, 1, 1), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: t11FamIfRcfReject.setStatus('current')
if mibBuilder.loadTexts: t11FamIfRcfReject.setDescription("This object determines if the incoming ReConfigure Fabric (RCF) messages on this interface on this Fabric is accepted or not. If this object is 'true', then the incoming RCF is rejected. If 'false', incoming RCF is accepted. Note that this object does not apply to the outgoing RCFs generated by this interface. Implementations that support write-access to this object can do so under whatever conditions they choose.")
t11FamIfRole = MibTableColumn((1, 3, 6, 1, 2, 1, 137, 1, 1, 2, 1, 2), T11FamDomainInterfaceRole()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FamIfRole.setStatus('current')
if mibBuilder.loadTexts: t11FamIfRole.setDescription('The role of this interface.')
t11FamIfRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 137, 1, 1, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: t11FamIfRowStatus.setStatus('current')
if mibBuilder.loadTexts: t11FamIfRowStatus.setDescription('The status of this row.')
t11FamAreaTable = MibTable((1, 3, 6, 1, 2, 1, 137, 1, 2, 1), )
if mibBuilder.loadTexts: t11FamAreaTable.setReference('Fibre Channel - Switch Fabric - 3 (FC-SW-3), ANSI INCITS 384-2004, section 4.8.')
if mibBuilder.loadTexts: t11FamAreaTable.setStatus('current')
if mibBuilder.loadTexts: t11FamAreaTable.setDescription("This table contains area assignments per-Fabric by a switch's Fabric Address Manager. Each octet in t11FamAssignedAreaList is able to be used to index into this table to find information on each area.")
t11FamAreaEntry = MibTableRow((1, 3, 6, 1, 2, 1, 137, 1, 2, 1, 1), ).setIndexNames((0, "FC-MGMT-MIB", "fcmInstanceIndex"), (0, "FC-MGMT-MIB", "fcmSwitchIndex"), (0, "T11-FC-FABRIC-ADDR-MGR-MIB", "t11FamFabricIndex"), (0, "T11-FC-FABRIC-ADDR-MGR-MIB", "t11FamAreaAreaId"))
if mibBuilder.loadTexts: t11FamAreaEntry.setStatus('current')
if mibBuilder.loadTexts: t11FamAreaEntry.setDescription('An entry gives information on the Area_ID and all Port_IDs that have been assigned within an area for the Fabric identified by t11FamFabricIndex, by the Fabric Address Manager in the switch identified by fcmInstanceIndex and fcmSwitchIndex.')
t11FamAreaAreaId = MibTableColumn((1, 3, 6, 1, 2, 1, 137, 1, 2, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: t11FamAreaAreaId.setStatus('current')
if mibBuilder.loadTexts: t11FamAreaAreaId.setDescription('The Area_ID of this area.')
t11FamAreaAssignedPortIdList = MibTableColumn((1, 3, 6, 1, 2, 1, 137, 1, 2, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FamAreaAssignedPortIdList.setStatus('current')
if mibBuilder.loadTexts: t11FamAreaAssignedPortIdList.setDescription("The list of Port_IDs which have been assigned in this area and Fabric, formatted as an array of octets in ascending order. There could be zero or more Port_IDs assigned on this area and Fabric. Each octet represents one Port_ID. So, the list containing the Port_IDs 23, 45, 235, and 56 would be formatted as the 4-octet string x'172d38eb'.")
t11FamDatabaseTable = MibTable((1, 3, 6, 1, 2, 1, 137, 1, 2, 2), )
if mibBuilder.loadTexts: t11FamDatabaseTable.setReference('Fibre Channel - Switch Fabric - 3 (FC-SW-3), ANSI INCITS 384-2004, section 4.8.')
if mibBuilder.loadTexts: t11FamDatabaseTable.setStatus('current')
if mibBuilder.loadTexts: t11FamDatabaseTable.setDescription('This table contains all information known by a switch about all the domains that have been assigned in each Fabric.')
t11FamDatabaseEntry = MibTableRow((1, 3, 6, 1, 2, 1, 137, 1, 2, 2, 1), ).setIndexNames((0, "FC-MGMT-MIB", "fcmInstanceIndex"), (0, "FC-MGMT-MIB", "fcmSwitchIndex"), (0, "T11-FC-FABRIC-ADDR-MGR-MIB", "t11FamFabricIndex"), (0, "T11-FC-FABRIC-ADDR-MGR-MIB", "t11FamDatabaseDomainId"))
if mibBuilder.loadTexts: t11FamDatabaseEntry.setStatus('current')
if mibBuilder.loadTexts: t11FamDatabaseEntry.setDescription('An entry (conceptual row) in the t11FamDatabaseTable containing information about one Domain_ID in the Fabric identified by t11FamFabricIndex, and known by the switch identified by t11FamFabricIndex and t11FamDatabaseDomainId.')
t11FamDatabaseDomainId = MibTableColumn((1, 3, 6, 1, 2, 1, 137, 1, 2, 2, 1, 1), FcDomainIdOrZero().subtype(subtypeSpec=ValueRangeConstraint(1, 239)))
if mibBuilder.loadTexts: t11FamDatabaseDomainId.setStatus('current')
if mibBuilder.loadTexts: t11FamDatabaseDomainId.setDescription('The Domain_ID for which this row contains information. The value must be non-zero.')
t11FamDatabaseSwitchWwn = MibTableColumn((1, 3, 6, 1, 2, 1, 137, 1, 2, 2, 1, 2), FcNameIdOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FamDatabaseSwitchWwn.setStatus('current')
if mibBuilder.loadTexts: t11FamDatabaseSwitchWwn.setDescription('The node name (WWN) of the switch to which the corresponding value of t11FamDatabaseDomainId is currently assigned for the particular Fabric.')
t11FamMaxFcIdCacheSize = MibScalar((1, 3, 6, 1, 2, 1, 137, 1, 2, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FamMaxFcIdCacheSize.setStatus('current')
if mibBuilder.loadTexts: t11FamMaxFcIdCacheSize.setDescription('The maximum number of Fibre Channel Address Identifiers that are able to be cached in the t11FamFcIdCacheTable. If the number is unknown, the value of this object is zero.')
t11FamFcIdCacheTable = MibTable((1, 3, 6, 1, 2, 1, 137, 1, 2, 4), )
if mibBuilder.loadTexts: t11FamFcIdCacheTable.setStatus('current')
if mibBuilder.loadTexts: t11FamFcIdCacheTable.setDescription('This table contains all the Fibre Channel Address Identifiers that have recently been released by the Fabric Address Manager in a switch. So, it lists all the Fibre Channel Address Identifiers that have valid WWN-to-Fibre Channel Address Identifier mappings and are currently not assigned to any ports. These Fibre Channel Address Identifiers were assigned to ports but have since been released. These cached Fibre Channel Address Identifiers contain only Area_ID and Port_ID information. This cache is kept to provide best-effort re-assignment of same Fibre Channel Address Identifiers; i.e., when an Nx_Port asks for a Fibre Channel Address Identifier, soon after releasing one, the same value is re-assigned, if possible.')
t11FamFcIdCacheEntry = MibTableRow((1, 3, 6, 1, 2, 1, 137, 1, 2, 4, 1), ).setIndexNames((0, "FC-MGMT-MIB", "fcmInstanceIndex"), (0, "FC-MGMT-MIB", "fcmSwitchIndex"), (0, "T11-FC-FABRIC-ADDR-MGR-MIB", "t11FamFabricIndex"), (0, "T11-FC-FABRIC-ADDR-MGR-MIB", "t11FamFcIdCacheWwn"))
if mibBuilder.loadTexts: t11FamFcIdCacheEntry.setStatus('current')
if mibBuilder.loadTexts: t11FamFcIdCacheEntry.setDescription('An entry (conceptual row) in the t11FamFcIdCacheTable containing information about one Fibre Channel Address Identifier that was released from a WWN, corresponding to a range of one or more ports connected to the switch (identified by t11FamFabricIndex and t11FamFcIdCacheWwn) in the Fabric (identified by t11FamFabricIndex). An entry is created when a Fibre Channel Address Identifier is released by the last port in the range. The oldest entry is deleted if the number of rows in this table reaches t11FamMaxFcIdCacheSize, and its space is required for a new entry. An entry is also deleted when its Fibre Channel Address Identifier is assigned to a port.')
t11FamFcIdCacheWwn = MibTableColumn((1, 3, 6, 1, 2, 1, 137, 1, 2, 4, 1, 1), FcNameIdOrZero())
if mibBuilder.loadTexts: t11FamFcIdCacheWwn.setStatus('current')
if mibBuilder.loadTexts: t11FamFcIdCacheWwn.setDescription('The N_Port_Name (WWN) of the port associated with this entry.')
t11FamFcIdCacheAreaIdPortId = MibTableColumn((1, 3, 6, 1, 2, 1, 137, 1, 2, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FamFcIdCacheAreaIdPortId.setStatus('current')
if mibBuilder.loadTexts: t11FamFcIdCacheAreaIdPortId.setDescription('The combination of this object and t11FamFcIdCachePortIds represent one range of Fibre Channel Address Identifiers, which were assigned and later released. This object contains the Area_ID and Port_ID of the first Fibre Channel Address Identifier in the range. Note that this object is only 2 bytes.')
t11FamFcIdCachePortIds = MibTableColumn((1, 3, 6, 1, 2, 1, 137, 1, 2, 4, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FamFcIdCachePortIds.setStatus('current')
if mibBuilder.loadTexts: t11FamFcIdCachePortIds.setDescription('The combination of t11FamFcIdCacheAreaIdPortId and this object represent one range of Fibre Channel Address Identifiers, which were assigned and later released. This object contains the number of (consecutive) Fibre Channel Address Identifiers in the range.')
t11FamNotifyFabricIndex = MibScalar((1, 3, 6, 1, 2, 1, 137, 1, 3, 1), T11FabricIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: t11FamNotifyFabricIndex.setStatus('current')
if mibBuilder.loadTexts: t11FamNotifyFabricIndex.setDescription('A unique index value that identifies a particular Fabric for which a particular notification is generated. In a Fabric conformant to SW-3, only a single Fabric can operate within a physical infrastructure, and thus, the value of this Fabric Index will always be 1. However, the current standard, FC-SW-4, defines how multiple Fabrics, each with its own management instrumentation, could operate within one (or more) physical infrastructures. In order to accommodate this scenario, this index value is used to uniquely identify a particular Fabric within a physical infrastructure.')
t11FamDomainIdNotAssignedNotify = NotificationType((1, 3, 6, 1, 2, 1, 137, 0, 1)).setObjects(("T11-FC-FABRIC-ADDR-MGR-MIB", "t11FamLocalSwitchWwn"), ("T11-FC-FABRIC-ADDR-MGR-MIB", "t11FamNotifyFabricIndex"))
if mibBuilder.loadTexts: t11FamDomainIdNotAssignedNotify.setStatus('current')
if mibBuilder.loadTexts: t11FamDomainIdNotAssignedNotify.setDescription("This notification indicates that a Domain_ID has not been configured or assigned for a particular Fabric, identified by t11FamNotifyFabricIndex, on a particular switch identified by t11FamLocalSwitchWwn. This could happen under the following conditions, and results in the switch isolating E_Ports on the Fabric: - if the switch's request for a configured static Domain_ID is rejected or no other Domain_ID is assigned, then the E_Ports are isolated.")
t11FamNewPrincipalSwitchNotify = NotificationType((1, 3, 6, 1, 2, 1, 137, 0, 2)).setObjects(("T11-FC-FABRIC-ADDR-MGR-MIB", "t11FamLocalSwitchWwn"), ("T11-FC-FABRIC-ADDR-MGR-MIB", "t11FamNotifyFabricIndex"))
if mibBuilder.loadTexts: t11FamNewPrincipalSwitchNotify.setStatus('current')
if mibBuilder.loadTexts: t11FamNewPrincipalSwitchNotify.setDescription('This notification indicates that a particular switch, identified by t11FamLocalSwitchWwn, has become the new Principal Switch on the Fabric identified by t11FamNotifyFabricIndex. This notification is sent soon after its election as the new Principal Switch, i.e., upon expiration of a Principal Switch selection timer that is equal to twice the Fabric Stability Timeout value (F_S_TOV).')
t11FamFabricChangeNotify = NotificationType((1, 3, 6, 1, 2, 1, 137, 0, 3)).setObjects(("T11-FC-FABRIC-ADDR-MGR-MIB", "t11FamLocalSwitchWwn"), ("T11-FC-FABRIC-ADDR-MGR-MIB", "t11FamNotifyFabricIndex"))
if mibBuilder.loadTexts: t11FamFabricChangeNotify.setStatus('current')
if mibBuilder.loadTexts: t11FamFabricChangeNotify.setDescription("This notification is sent whenever a particular switch, identified by t11FamLocalSwitchWwn, sends or receives a Build Fabric (BF) or a ReConfigure Fabric (RCF) message on the Fabric identified by t11FamNotifyFabricIndex. This notification is not sent if a 't11FamNewPrincipalSwitchNotify' notification is sent for the same event.")
t11FamMIBCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 137, 2, 1))
t11FamMIBGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 137, 2, 2))
t11FamMIBCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 137, 2, 1, 1)).setObjects(("T11-FC-FABRIC-ADDR-MGR-MIB", "t11FamGroup"), ("T11-FC-FABRIC-ADDR-MGR-MIB", "t11FamDatabaseGroup"), ("T11-FC-FABRIC-ADDR-MGR-MIB", "t11FamAreaGroup"), ("T11-FC-FABRIC-ADDR-MGR-MIB", "t11FamNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    t11FamMIBCompliance = t11FamMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: t11FamMIBCompliance.setDescription('The compliance statement for Fibre Channel switches that implement Fabric Address Manager functionality.')
t11FamGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 137, 2, 2, 1)).setObjects(("T11-FC-FABRIC-ADDR-MGR-MIB", "t11FamConfigDomainId"), ("T11-FC-FABRIC-ADDR-MGR-MIB", "t11FamConfigDomainIdType"), ("T11-FC-FABRIC-ADDR-MGR-MIB", "t11FamAutoReconfigure"), ("T11-FC-FABRIC-ADDR-MGR-MIB", "t11FamContiguousAllocation"), ("T11-FC-FABRIC-ADDR-MGR-MIB", "t11FamPriority"), ("T11-FC-FABRIC-ADDR-MGR-MIB", "t11FamPrincipalSwitchWwn"), ("T11-FC-FABRIC-ADDR-MGR-MIB", "t11FamLocalSwitchWwn"), ("T11-FC-FABRIC-ADDR-MGR-MIB", "t11FamAssignedAreaIdList"), ("T11-FC-FABRIC-ADDR-MGR-MIB", "t11FamGrantedFcIds"), ("T11-FC-FABRIC-ADDR-MGR-MIB", "t11FamRecoveredFcIds"), ("T11-FC-FABRIC-ADDR-MGR-MIB", "t11FamFreeFcIds"), ("T11-FC-FABRIC-ADDR-MGR-MIB", "t11FamAssignedFcIds"), ("T11-FC-FABRIC-ADDR-MGR-MIB", "t11FamAvailableFcIds"), ("T11-FC-FABRIC-ADDR-MGR-MIB", "t11FamRunningPriority"), ("T11-FC-FABRIC-ADDR-MGR-MIB", "t11FamPrincSwRunningPriority"), ("T11-FC-FABRIC-ADDR-MGR-MIB", "t11FamState"), ("T11-FC-FABRIC-ADDR-MGR-MIB", "t11FamLocalPrincipalSwitchSlctns"), ("T11-FC-FABRIC-ADDR-MGR-MIB", "t11FamPrincipalSwitchSelections"), ("T11-FC-FABRIC-ADDR-MGR-MIB", "t11FamBuildFabrics"), ("T11-FC-FABRIC-ADDR-MGR-MIB", "t11FamFabricReconfigures"), ("T11-FC-FABRIC-ADDR-MGR-MIB", "t11FamDomainId"), ("T11-FC-FABRIC-ADDR-MGR-MIB", "t11FamSticky"), ("T11-FC-FABRIC-ADDR-MGR-MIB", "t11FamRestart"), ("T11-FC-FABRIC-ADDR-MGR-MIB", "t11FamRcFabricNotifyEnable"), ("T11-FC-FABRIC-ADDR-MGR-MIB", "t11FamEnable"), ("T11-FC-FABRIC-ADDR-MGR-MIB", "t11FamFabricName"), ("T11-FC-FABRIC-ADDR-MGR-MIB", "t11FamIfRcfReject"), ("T11-FC-FABRIC-ADDR-MGR-MIB", "t11FamIfRole"), ("T11-FC-FABRIC-ADDR-MGR-MIB", "t11FamIfRowStatus"), ("T11-FC-FABRIC-ADDR-MGR-MIB", "t11FamNotifyFabricIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    t11FamGroup = t11FamGroup.setStatus('current')
if mibBuilder.loadTexts: t11FamGroup.setDescription('A collection of general objects for displaying and configuring Fabric Address management.')
t11FamCommandGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 137, 2, 2, 2)).setObjects(("T11-FC-FABRIC-ADDR-MGR-MIB", "t11FamRestart"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    t11FamCommandGroup = t11FamCommandGroup.setStatus('current')
if mibBuilder.loadTexts: t11FamCommandGroup.setDescription('A collection of objects used for initiating an operation on the Fabric.')
t11FamDatabaseGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 137, 2, 2, 3)).setObjects(("T11-FC-FABRIC-ADDR-MGR-MIB", "t11FamDatabaseSwitchWwn"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    t11FamDatabaseGroup = t11FamDatabaseGroup.setStatus('current')
if mibBuilder.loadTexts: t11FamDatabaseGroup.setDescription('A collection of objects containing information about Domain-IDs assignments.')
t11FamAreaGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 137, 2, 2, 4)).setObjects(("T11-FC-FABRIC-ADDR-MGR-MIB", "t11FamAreaAssignedPortIdList"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    t11FamAreaGroup = t11FamAreaGroup.setStatus('current')
if mibBuilder.loadTexts: t11FamAreaGroup.setDescription('A collection of objects containing information about currently assigned addresses within a domain.')
t11FamCacheGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 137, 2, 2, 5)).setObjects(("T11-FC-FABRIC-ADDR-MGR-MIB", "t11FamMaxFcIdCacheSize"), ("T11-FC-FABRIC-ADDR-MGR-MIB", "t11FamFcIdCacheAreaIdPortId"), ("T11-FC-FABRIC-ADDR-MGR-MIB", "t11FamFcIdCachePortIds"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    t11FamCacheGroup = t11FamCacheGroup.setStatus('current')
if mibBuilder.loadTexts: t11FamCacheGroup.setDescription('A collection of objects containing information about recently-released Fibre Channel Address Identifiers.')
t11FamNotificationGroup = NotificationGroup((1, 3, 6, 1, 2, 1, 137, 2, 2, 6)).setObjects(("T11-FC-FABRIC-ADDR-MGR-MIB", "t11FamDomainIdNotAssignedNotify"), ("T11-FC-FABRIC-ADDR-MGR-MIB", "t11FamNewPrincipalSwitchNotify"), ("T11-FC-FABRIC-ADDR-MGR-MIB", "t11FamFabricChangeNotify"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    t11FamNotificationGroup = t11FamNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: t11FamNotificationGroup.setDescription('A collection of notifications for status monitoring and notification.')
mibBuilder.exportSymbols("T11-FC-FABRIC-ADDR-MGR-MIB", t11FamPrincSwRunningPriority=t11FamPrincSwRunningPriority, t11FamLocalPrincipalSwitchSlctns=t11FamLocalPrincipalSwitchSlctns, t11FamNotifications=t11FamNotifications, t11FamRunningPriority=t11FamRunningPriority, t11FamIfTable=t11FamIfTable, t11FamAssignedAreaIdList=t11FamAssignedAreaIdList, t11FamAreaEntry=t11FamAreaEntry, t11FamConfiguration=t11FamConfiguration, t11FamFabricReconfigures=t11FamFabricReconfigures, t11FamIfRole=t11FamIfRole, t11FamDatabaseTable=t11FamDatabaseTable, T11FamDomainInterfaceRole=T11FamDomainInterfaceRole, t11FamFcIdCacheTable=t11FamFcIdCacheTable, t11FamAreaGroup=t11FamAreaGroup, t11FamIfRowStatus=t11FamIfRowStatus, t11FamMIBConformance=t11FamMIBConformance, t11FamIfEntry=t11FamIfEntry, t11FamAreaAreaId=t11FamAreaAreaId, t11FamFcIdCacheAreaIdPortId=t11FamFcIdCacheAreaIdPortId, t11FamRcFabricNotifyEnable=t11FamRcFabricNotifyEnable, PYSNMP_MODULE_ID=t11FcFabricAddrMgrMIB, t11FamDatabaseEntry=t11FamDatabaseEntry, t11FamNotifyFabricIndex=t11FamNotifyFabricIndex, t11FamMIBObjects=t11FamMIBObjects, t11FamDatabaseDomainId=t11FamDatabaseDomainId, t11FamFcIdCacheEntry=t11FamFcIdCacheEntry, t11FamInfo=t11FamInfo, t11FamFreeFcIds=t11FamFreeFcIds, t11FamDomainId=t11FamDomainId, t11FcFabricAddrMgrMIB=t11FcFabricAddrMgrMIB, t11FamState=t11FamState, T11FamState=T11FamState, t11FamPrincipalSwitchWwn=t11FamPrincipalSwitchWwn, t11FamFcIdCachePortIds=t11FamFcIdCachePortIds, t11FamDatabaseGroup=t11FamDatabaseGroup, t11FamMaxFcIdCacheSize=t11FamMaxFcIdCacheSize, t11FamLocalSwitchWwn=t11FamLocalSwitchWwn, t11FamDomainIdNotAssignedNotify=t11FamDomainIdNotAssignedNotify, t11FamCommandGroup=t11FamCommandGroup, t11FamFabricIndex=t11FamFabricIndex, t11FamGroup=t11FamGroup, t11FamGrantedFcIds=t11FamGrantedFcIds, t11FamMIBCompliances=t11FamMIBCompliances, t11FamContiguousAllocation=t11FamContiguousAllocation, t11FamPriority=t11FamPriority, t11FamNotifyControl=t11FamNotifyControl, t11FamAvailableFcIds=t11FamAvailableFcIds, t11FamAreaAssignedPortIdList=t11FamAreaAssignedPortIdList, t11FamFcIdCacheWwn=t11FamFcIdCacheWwn, t11FamSticky=t11FamSticky, T11FamDomainPriority=T11FamDomainPriority, t11FamCacheGroup=t11FamCacheGroup, t11FamIfRcfReject=t11FamIfRcfReject, t11FamConfigDomainId=t11FamConfigDomainId, t11FamAreaTable=t11FamAreaTable, t11FamBuildFabrics=t11FamBuildFabrics, t11FamMIBCompliance=t11FamMIBCompliance, t11FamEnable=t11FamEnable, t11FamTable=t11FamTable, t11FamConfigDomainIdType=t11FamConfigDomainIdType, t11FamEntry=t11FamEntry, t11FamAssignedFcIds=t11FamAssignedFcIds, t11FamPrincipalSwitchSelections=t11FamPrincipalSwitchSelections, t11FamFabricName=t11FamFabricName, t11FamFabricChangeNotify=t11FamFabricChangeNotify, t11FamNotificationGroup=t11FamNotificationGroup, t11FamRecoveredFcIds=t11FamRecoveredFcIds, t11FamAutoReconfigure=t11FamAutoReconfigure, t11FamMIBGroups=t11FamMIBGroups, t11FamRestart=t11FamRestart, t11FamDatabaseSwitchWwn=t11FamDatabaseSwitchWwn, t11FamNewPrincipalSwitchNotify=t11FamNewPrincipalSwitchNotify)
