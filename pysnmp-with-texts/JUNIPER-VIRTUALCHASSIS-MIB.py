#
# PySNMP MIB module JUNIPER-VIRTUALCHASSIS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/JUNIPER-VIRTUALCHASSIS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:01:26 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion")
jnxExVirtualChassis, = mibBuilder.importSymbols("JUNIPER-EX-SMI", "jnxExVirtualChassis")
JnxChassisId, = mibBuilder.importSymbols("JUNIPER-MIB", "JnxChassisId")
jnxVccpNotifications, = mibBuilder.importSymbols("JUNIPER-SMI", "jnxVccpNotifications")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, Unsigned32, IpAddress, NotificationType, Integer32, TimeTicks, ModuleIdentity, Gauge32, MibIdentifier, Counter32, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Unsigned32", "IpAddress", "NotificationType", "Integer32", "TimeTicks", "ModuleIdentity", "Gauge32", "MibIdentifier", "Counter32", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "ObjectIdentity")
DisplayString, MacAddress, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "MacAddress", "TextualConvention")
jnxVirtualChassisMemberMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 4, 1))
jnxVirtualChassisMemberMIB.setRevisions(('2010-07-13 00:00', '2010-10-14 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: jnxVirtualChassisMemberMIB.setRevisionsDescriptions(('Added jnxVccpMemberUp and jnxVccpMemberDown Traps.', 'Modified the range for jnxVirtualChassisMemberPriority from 0 to 255.',))
if mibBuilder.loadTexts: jnxVirtualChassisMemberMIB.setLastUpdated('201010140000Z')
if mibBuilder.loadTexts: jnxVirtualChassisMemberMIB.setOrganization('Juniper Networks, Inc.')
if mibBuilder.loadTexts: jnxVirtualChassisMemberMIB.setContactInfo('Juniper Technical Assistance Center Juniper Networks, Inc. 1194 N. Mathilda Avenue Sunnyvale, CA 94089 E-mail: support@juniper.net')
if mibBuilder.loadTexts: jnxVirtualChassisMemberMIB.setDescription("The MIB modules for Virtual Chassis Member.Virtual Chassis Member feature allows a set of EX-Series switches to be connected together to form a Virtual Chassis. A virtual chassis will give all the features of a real chassis, potentially at a much lower cost points. A virtual chassis will be managed as a single box and will appear as a single network element to other switches and routers in the network. Some EX-Series switches will have the special high speed stacking ports which are used to connect to each other to form a stack. The EX-Series switches can also be connected by the 10GE (or 1GE) network ports to form a stack. These can be used by EX-Series switches that don't have dedicated stacking ports. Up to a maximum of 10 boxes can be stacked together.")
jnxVirtualChassisMemberTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 4, 1, 1), )
if mibBuilder.loadTexts: jnxVirtualChassisMemberTable.setStatus('current')
if mibBuilder.loadTexts: jnxVirtualChassisMemberTable.setDescription('A list of virtual chassis Member information entries.')
jnxVirtualChassisMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 4, 1, 1, 1), ).setIndexNames((0, "JUNIPER-VIRTUALCHASSIS-MIB", "jnxVirtualChassisMemberId"))
if mibBuilder.loadTexts: jnxVirtualChassisMemberEntry.setStatus('current')
if mibBuilder.loadTexts: jnxVirtualChassisMemberEntry.setDescription('An entry in the virtual chassis Member information table.')
jnxVirtualChassisMemberId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 4, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9)))
if mibBuilder.loadTexts: jnxVirtualChassisMemberId.setStatus('current')
if mibBuilder.loadTexts: jnxVirtualChassisMemberId.setDescription('Identifies the virtual-chassis member.')
jnxVirtualChassisMemberSerialnumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 4, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVirtualChassisMemberSerialnumber.setStatus('current')
if mibBuilder.loadTexts: jnxVirtualChassisMemberSerialnumber.setDescription('Serial number of the virtual-chassis member.')
jnxVirtualChassisMemberRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 4, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("master", 1), ("backup", 2), ("linecard", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVirtualChassisMemberRole.setStatus('current')
if mibBuilder.loadTexts: jnxVirtualChassisMemberRole.setDescription('Specifies whether the virtual-chassis member is of the type: master(1), backup(2), linecard (3) ')
jnxVirtualChassisMemberMacAddBase = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 4, 1, 1, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVirtualChassisMemberMacAddBase.setStatus('current')
if mibBuilder.loadTexts: jnxVirtualChassisMemberMacAddBase.setDescription('Identifies Media Access Control Address base for the virtual-chassis member.')
jnxVirtualChassisMemberSWVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 4, 1, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVirtualChassisMemberSWVersion.setStatus('current')
if mibBuilder.loadTexts: jnxVirtualChassisMemberSWVersion.setDescription('Identifies the JUNOS Base OS Software suite running on the virtual-chassis member.')
jnxVirtualChassisMemberPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 4, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVirtualChassisMemberPriority.setStatus('current')
if mibBuilder.loadTexts: jnxVirtualChassisMemberPriority.setDescription('This specifies the priority of the virtual-chassis member which can vary from 0 to 255.')
jnxVirtualChassisMemberUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 4, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVirtualChassisMemberUptime.setStatus('current')
if mibBuilder.loadTexts: jnxVirtualChassisMemberUptime.setDescription('Specifies the virtual-chassis member uptime. ')
jnxVirtualChassisMemberModel = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 4, 1, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVirtualChassisMemberModel.setStatus('current')
if mibBuilder.loadTexts: jnxVirtualChassisMemberModel.setDescription('Specifies the virtual-chassis member model. ')
jnxVirtualChassisMemberLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 4, 1, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVirtualChassisMemberLocation.setStatus('current')
if mibBuilder.loadTexts: jnxVirtualChassisMemberLocation.setDescription('Specifies the virtual-chassis member location. ')
jnxVirtualChassisPortTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 4, 1, 2), )
if mibBuilder.loadTexts: jnxVirtualChassisPortTable.setStatus('current')
if mibBuilder.loadTexts: jnxVirtualChassisPortTable.setDescription('A list of virtual chassis port information entries.')
jnxVirtualChassisPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 4, 1, 2, 1), ).setIndexNames((0, "JUNIPER-VIRTUALCHASSIS-MIB", "jnxVirtualChassisFpcId"), (0, "JUNIPER-VIRTUALCHASSIS-MIB", "jnxVirtualChassisPortName"))
if mibBuilder.loadTexts: jnxVirtualChassisPortEntry.setStatus('current')
if mibBuilder.loadTexts: jnxVirtualChassisPortEntry.setDescription('An entry in the virtual chassis port information table.')
jnxVirtualChassisFpcId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 4, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9)))
if mibBuilder.loadTexts: jnxVirtualChassisFpcId.setStatus('current')
if mibBuilder.loadTexts: jnxVirtualChassisFpcId.setDescription('Identifies the virtual-chassis member.')
jnxVirtualChassisPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 4, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127)))
if mibBuilder.loadTexts: jnxVirtualChassisPortName.setStatus('current')
if mibBuilder.loadTexts: jnxVirtualChassisPortName.setDescription('Indicates the port name of this vccp port, which is typically but not limited to, a function of the state of individual segments of this port.')
jnxVirtualChassisPortAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 4, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVirtualChassisPortAdminStatus.setStatus('current')
if mibBuilder.loadTexts: jnxVirtualChassisPortAdminStatus.setDescription('Indicates the actual admin status of this vccp port, which is typically but not limited to, a function of the state of individual segments of this port.')
jnxVirtualChassisPortOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 4, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVirtualChassisPortOperStatus.setStatus('current')
if mibBuilder.loadTexts: jnxVirtualChassisPortOperStatus.setDescription('Indicates the actual operational status of this vccp port, which is typically but not limited to, a function of the state of individual segments of this port.')
jnxVirtualChassisPortInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 4, 1, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVirtualChassisPortInPkts.setStatus('current')
if mibBuilder.loadTexts: jnxVirtualChassisPortInPkts.setDescription('Indicates the total number of packets received on the virtual-chassis port. This object is a 64-bit version of jnxVirtualChassisPortInPkts')
jnxVirtualChassisPortOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 4, 1, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVirtualChassisPortOutPkts.setStatus('current')
if mibBuilder.loadTexts: jnxVirtualChassisPortOutPkts.setDescription('Indicates the total number of packets sent from the virtual-chassis port. This object is a 64-bit version of jnxVirtualChassisPortOutPkts')
jnxVirtualChassisPortInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 4, 1, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVirtualChassisPortInOctets.setStatus('current')
if mibBuilder.loadTexts: jnxVirtualChassisPortInOctets.setDescription('Indicates the total number of octets received on the virtual-chassis port. This object is a 64-bit version of jnxVirtualChassisPortInOctets')
jnxVirtualChassisPortOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 4, 1, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVirtualChassisPortOutOctets.setStatus('current')
if mibBuilder.loadTexts: jnxVirtualChassisPortOutOctets.setDescription('Indicates the total number of octets sent on the virtual-chassis port. This object is a 64-bit version of jnxVirtualChassisPortOutOctets')
jnxVirtualChassisPortInMcasts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 4, 1, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVirtualChassisPortInMcasts.setStatus('current')
if mibBuilder.loadTexts: jnxVirtualChassisPortInMcasts.setDescription('Indicates the total number of multicast packets received on the virtual-chassis port. This object is a 64-bit version of jnxVirtualChassisPortInMcasts')
jnxVirtualChassisPortOutMcasts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 4, 1, 2, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVirtualChassisPortOutMcasts.setStatus('current')
if mibBuilder.loadTexts: jnxVirtualChassisPortOutMcasts.setDescription('Indicates the total number of multicast packets sent from the virtual-chassis port. This object is a 64-bit version of jnxVirtualChassisPortOutMcasts')
jnxVirtualChassisPortInPkts1secRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 4, 1, 2, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVirtualChassisPortInPkts1secRate.setStatus('current')
if mibBuilder.loadTexts: jnxVirtualChassisPortInPkts1secRate.setDescription('Indicates the total number of packets received per second on the virtual-chassis port. This object is a 64-bit version of jnxVirtualChassisPortInPkts1secRate')
jnxVirtualChassisPortOutPkts1secRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 4, 1, 2, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVirtualChassisPortOutPkts1secRate.setStatus('current')
if mibBuilder.loadTexts: jnxVirtualChassisPortOutPkts1secRate.setDescription('Indicates the total number of packets sent per second from the virtual-chassis port. This object is a 64-bit version of jnxVirtualChassisPortOutPkts1secRate')
jnxVirtualChassisPortInOctets1secRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 4, 1, 2, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVirtualChassisPortInOctets1secRate.setStatus('current')
if mibBuilder.loadTexts: jnxVirtualChassisPortInOctets1secRate.setDescription('Indicates the total number of octets received per secondon the virtual-chassis port. This object is a 64-bit version of jnxVirtualChassisPortInOctets1secRate')
jnxVirtualChassisPortOutOctets1secRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 4, 1, 2, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVirtualChassisPortOutOctets1secRate.setStatus('current')
if mibBuilder.loadTexts: jnxVirtualChassisPortOutOctets1secRate.setDescription('Indicates the total number of octets sent per second on the virtual-chassis port. This object is a 64-bit version of jnxVirtualChassisPortOutOctets1secRate')
jnxVirtualChassisPortCarrierTrans = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 4, 1, 2, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVirtualChassisPortCarrierTrans.setStatus('current')
if mibBuilder.loadTexts: jnxVirtualChassisPortCarrierTrans.setDescription('Indicates the total number of Carrier errors on the virtual-chassis port. This object is a 64-bit version of jnxVirtualChassisPortCarrierTrans')
jnxVirtualChassisPortInCRCAlignErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 4, 1, 2, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVirtualChassisPortInCRCAlignErrors.setStatus('current')
if mibBuilder.loadTexts: jnxVirtualChassisPortInCRCAlignErrors.setDescription('Indicates the total number of Input CRC Alignment errors on the virtual-chassis port. This object is a 64-bit version of jnxVirtualChassisPortInCRCAlignErrors')
jnxVirtualChassisPortOutCRCAlignErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 4, 1, 2, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVirtualChassisPortOutCRCAlignErrors.setStatus('current')
if mibBuilder.loadTexts: jnxVirtualChassisPortOutCRCAlignErrors.setDescription('Indicates the total number of output CRC Alignment errors on the virtual-chassis port. This object is a 64-bit version of jnxVirtualChassisPortOutCRCAlignErrors')
jnxVirtualChassisPortUndersizePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 4, 1, 2, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVirtualChassisPortUndersizePkts.setStatus('current')
if mibBuilder.loadTexts: jnxVirtualChassisPortUndersizePkts.setDescription('Indicates the total number of Undersize Packets on the virtual-chassis port. This object is a 64-bit version of jnxVirtualChassisPortUndersizePkts')
jnxVirtualChassisPortCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 4, 1, 2, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVirtualChassisPortCollisions.setStatus('current')
if mibBuilder.loadTexts: jnxVirtualChassisPortCollisions.setDescription('Indicates the total number of Collisions on the virtual-chassis port. This object is a 64-bit version of jnxVirtualChassisPortCollisions')
jnxVccpNotificationsPrefix = ObjectIdentity((1, 3, 6, 1, 4, 1, 2636, 4, 14, 0))
if mibBuilder.loadTexts: jnxVccpNotificationsPrefix.setStatus('current')
if mibBuilder.loadTexts: jnxVccpNotificationsPrefix.setDescription('All Virtual Chassis notifications are registered under this branch.')
jnxVccpPortUp = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 14, 0, 1)).setObjects(("JUNIPER-VIRTUALCHASSIS-MIB", "jnxVirtualChassisPortAdminStatus"), ("JUNIPER-VIRTUALCHASSIS-MIB", "jnxVirtualChassisPortOperStatus"), ("JUNIPER-VIRTUALCHASSIS-MIB", "jnxVirtualChassisMemberModel"), ("JUNIPER-VIRTUALCHASSIS-MIB", "jnxVirtualChassisMemberLocation"))
if mibBuilder.loadTexts: jnxVccpPortUp.setStatus('current')
if mibBuilder.loadTexts: jnxVccpPortUp.setDescription('A PortUp trap signifies that the SNMP entity, acting in an agent role, has detected that the jnxVirtualChassisPortOperStatus object for one of its communication links left the down state and transitioned into some other state (but not into the notPresent state). This other state is indicated by the included value of jnxVirtualChassisPortOperStatus.')
jnxVccpPortDown = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 14, 0, 2)).setObjects(("JUNIPER-VIRTUALCHASSIS-MIB", "jnxVirtualChassisPortAdminStatus"), ("JUNIPER-VIRTUALCHASSIS-MIB", "jnxVirtualChassisPortOperStatus"), ("JUNIPER-VIRTUALCHASSIS-MIB", "jnxVirtualChassisMemberModel"), ("JUNIPER-VIRTUALCHASSIS-MIB", "jnxVirtualChassisMemberLocation"))
if mibBuilder.loadTexts: jnxVccpPortDown.setStatus('current')
if mibBuilder.loadTexts: jnxVccpPortDown.setDescription('A PortDown trap signifies that the SNMP entity, acting in an agent role, has detected that the jnxVirtualChassisPortOperStatus object for one of its communication links is about to enter the down state from some other state (but not into the notPresent state). This other state is indicated by the included value of jnxVirtualChassisPortOperStatus.')
jnxVccpMemberUp = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 14, 0, 3)).setObjects(("JUNIPER-VIRTUALCHASSIS-MIB", "jnxVirtualChassisMemberSerialnumber"), ("JUNIPER-VIRTUALCHASSIS-MIB", "jnxVirtualChassisMemberRole"), ("JUNIPER-VIRTUALCHASSIS-MIB", "jnxVirtualChassisMemberModel"), ("JUNIPER-VIRTUALCHASSIS-MIB", "jnxVirtualChassisMemberLocation"))
if mibBuilder.loadTexts: jnxVccpMemberUp.setStatus('current')
if mibBuilder.loadTexts: jnxVccpMemberUp.setDescription('A MemberUp trap signifies that the SNMP entity, acting in an agent role, has detected that the Member present at the location jnxVirtualChassisMemberLocation on one of the Virtual Chassis left the down state and transitioned into some other state (but not into the notPresent state).')
jnxVccpMemberDown = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 14, 0, 4)).setObjects(("JUNIPER-VIRTUALCHASSIS-MIB", "jnxVirtualChassisMemberSerialnumber"), ("JUNIPER-VIRTUALCHASSIS-MIB", "jnxVirtualChassisMemberRole"), ("JUNIPER-VIRTUALCHASSIS-MIB", "jnxVirtualChassisMemberModel"), ("JUNIPER-VIRTUALCHASSIS-MIB", "jnxVirtualChassisMemberLocation"))
if mibBuilder.loadTexts: jnxVccpMemberDown.setStatus('current')
if mibBuilder.loadTexts: jnxVccpMemberDown.setDescription('A MemberDown trap signifies that the SNMP entity, acting in an agent role, has detected that the Member present at the location jnxVirtualChassisMemberLocation on one of the Virtual Chassis is about to enter the down state (but not into the notPresent state).')
mibBuilder.exportSymbols("JUNIPER-VIRTUALCHASSIS-MIB", jnxVirtualChassisPortTable=jnxVirtualChassisPortTable, jnxVirtualChassisFpcId=jnxVirtualChassisFpcId, jnxVirtualChassisPortOutOctets1secRate=jnxVirtualChassisPortOutOctets1secRate, jnxVirtualChassisMemberId=jnxVirtualChassisMemberId, jnxVirtualChassisMemberRole=jnxVirtualChassisMemberRole, PYSNMP_MODULE_ID=jnxVirtualChassisMemberMIB, jnxVirtualChassisMemberLocation=jnxVirtualChassisMemberLocation, jnxVirtualChassisPortName=jnxVirtualChassisPortName, jnxVirtualChassisPortEntry=jnxVirtualChassisPortEntry, jnxVirtualChassisPortInOctets1secRate=jnxVirtualChassisPortInOctets1secRate, jnxVirtualChassisPortInMcasts=jnxVirtualChassisPortInMcasts, jnxVirtualChassisMemberModel=jnxVirtualChassisMemberModel, jnxVirtualChassisPortOutCRCAlignErrors=jnxVirtualChassisPortOutCRCAlignErrors, jnxVirtualChassisPortOutPkts=jnxVirtualChassisPortOutPkts, jnxVirtualChassisPortUndersizePkts=jnxVirtualChassisPortUndersizePkts, jnxVirtualChassisMemberSWVersion=jnxVirtualChassisMemberSWVersion, jnxVirtualChassisPortOutMcasts=jnxVirtualChassisPortOutMcasts, jnxVccpNotificationsPrefix=jnxVccpNotificationsPrefix, jnxVirtualChassisMemberSerialnumber=jnxVirtualChassisMemberSerialnumber, jnxVirtualChassisPortCollisions=jnxVirtualChassisPortCollisions, jnxVirtualChassisPortOutPkts1secRate=jnxVirtualChassisPortOutPkts1secRate, jnxVirtualChassisPortOperStatus=jnxVirtualChassisPortOperStatus, jnxVirtualChassisMemberTable=jnxVirtualChassisMemberTable, jnxVirtualChassisPortInPkts1secRate=jnxVirtualChassisPortInPkts1secRate, jnxVirtualChassisMemberMIB=jnxVirtualChassisMemberMIB, jnxVirtualChassisMemberMacAddBase=jnxVirtualChassisMemberMacAddBase, jnxVirtualChassisPortAdminStatus=jnxVirtualChassisPortAdminStatus, jnxVccpMemberUp=jnxVccpMemberUp, jnxVccpPortUp=jnxVccpPortUp, jnxVirtualChassisMemberPriority=jnxVirtualChassisMemberPriority, jnxVirtualChassisPortInPkts=jnxVirtualChassisPortInPkts, jnxVirtualChassisMemberEntry=jnxVirtualChassisMemberEntry, jnxVirtualChassisMemberUptime=jnxVirtualChassisMemberUptime, jnxVirtualChassisPortInCRCAlignErrors=jnxVirtualChassisPortInCRCAlignErrors, jnxVccpPortDown=jnxVccpPortDown, jnxVccpMemberDown=jnxVccpMemberDown, jnxVirtualChassisPortCarrierTrans=jnxVirtualChassisPortCarrierTrans, jnxVirtualChassisPortInOctets=jnxVirtualChassisPortInOctets, jnxVirtualChassisPortOutOctets=jnxVirtualChassisPortOutOctets)
