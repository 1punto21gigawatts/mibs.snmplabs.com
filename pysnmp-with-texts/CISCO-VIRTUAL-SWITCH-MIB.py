#
# PySNMP MIB module CISCO-VIRTUAL-SWITCH-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-VIRTUAL-SWITCH-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:18:21 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
entPhysicalIndex, = mibBuilder.importSymbols("ENTITY-MIB", "entPhysicalIndex")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
iso, Integer32, Counter32, Gauge32, ObjectIdentity, MibIdentifier, Bits, Unsigned32, ModuleIdentity, Counter64, TimeTicks, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Integer32", "Counter32", "Gauge32", "ObjectIdentity", "MibIdentifier", "Bits", "Unsigned32", "ModuleIdentity", "Counter64", "TimeTicks", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType")
TruthValue, TimeStamp, TextualConvention, RowStatus, DisplayString, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TimeStamp", "TextualConvention", "RowStatus", "DisplayString", "DateAndTime")
ciscoVirtualSwitchMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 388))
ciscoVirtualSwitchMIB.setRevisions(('2015-03-04 00:00', '2012-04-10 00:00', '2010-01-21 00:00', '2007-09-25 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoVirtualSwitchMIB.setRevisionsDescriptions(('Added new OBJECT-GROUP - cvsVSLLinkPortGroup Added new compliance - cvsMIBComplianceV04', 'Added cSSO(3) enum value to cvsModuleRprWarm object Added following OBJECT-GROUP - cvsCoreSwitchLocationGroup - cvsDualActiveDetectionNotifsControlGroup - cvsDualActiveDetectionNotifsInfoGroup - cvsDualActiveDetectionNotifsGroup Added new compliance - cvsMIBComplianceV03', 'New group cvsVSLStatisticsExtGroup and cvsVssModuleStandbyGroup are added.', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoVirtualSwitchMIB.setLastUpdated('201503040000Z')
if mibBuilder.loadTexts: ciscoVirtualSwitchMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoVirtualSwitchMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 Tel: +1 800 553-NETS cs-lan-switch-snmp@cisco.com')
if mibBuilder.loadTexts: ciscoVirtualSwitchMIB.setDescription("This MIB module defines the managed objects that support the virtual switch architecture. The virtual switch concept combines several individual distributed physical switches together to build a single logical management point. The core switches are the control point for a virtual switch, all the traffic is forwarded and distributed in the core switches, including control and data traffic. The core switches are connected through a dedicated ether channel called Virtual Switch Link (VSL) that is used for both control traffic as well as some data traffic to provide the traffic load sharing and switch redundancy between the physical chassis. One or multiple core switches can be supported in the virtual switch architecture, but only one core called 'active core' switch can be active to manage the traffic. The other is called 'standby core' switch as redundancy if there is. The concept of virtual switch is to collect many physical switches chassis together to form a single management unit to simplify the whole network architecture.")
ciscoVirtualSwitchMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 388, 0))
ciscoVirtualSwitchMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 388, 1))
ciscoVirtualSwitchMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 388, 2))
class VSSwitchID(TextualConvention, Unsigned32):
    description = 'An integer value that uniquely identifies a physical chassis in the virtual switch architecture. 0 means no switch ID configured for this switch. It implies the switch is in the standalone mode and not part of the virtual switch architecture.'
    status = 'current'

class VSSwitchCapability(TextualConvention, Bits):
    description = 'Indication of the switch roles that can be supported on the chassis device. standalone : it means this chassis device can be a regular switch which is not a part of virtual switch architecture. core : it means this chassis device can be a core switch, active or standby, in the virtual switch architecture.'
    status = 'current'
    namedValues = NamedValues(("standalone", 0), ("core", 1))

class VSSwitchMode(TextualConvention, Integer32):
    description = "The switch mode of the chassis device in the virtual switch environment or a chassis can also be a standalone device. standalone : it means this chassis device is not in a part of the virtual switch environment, it is a standalone switch. multiNode: it means this chassis device is in a part of the virtual switch environment. Only a switch with the capability to be a 'core' switch could be configured to multiNode(2)."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("standalone", 1), ("multiNode", 2))

class VSSwitchRole(TextualConvention, Integer32):
    description = 'The role of the chassis device. standalone : it means this chassis device is not a part of the virtual switch, it is a standalone switch. active : it means this chassis device is an active core switch in the virtual switch architecture. standby : it means this chassis device is a standby core switch in the virtual switch architecture.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("standalone", 1), ("active", 2), ("standby", 3))

class VSConnectStatus(TextualConvention, Integer32):
    description = 'A textual convention to indicate the connection status of a link.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("up", 1), ("down", 2))

cvsGlobalObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 388, 1, 1))
cvsChassisObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 388, 1, 2))
cvsVSLObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 388, 1, 3))
cvsModuleObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 388, 1, 4))
cvsDualActiveDetection = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 388, 1, 5))
cvsDomain = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 388, 1, 1, 1), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvsDomain.setStatus('current')
if mibBuilder.loadTexts: cvsDomain.setDescription('The virtual switch domain identifier to recognize a virtual switch domain. Only Switches with the same domain number can be in the same virtual switch. 0 means no switch domain configured.')
cvsSwitchID = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 388, 1, 1, 2), VSSwitchID()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvsSwitchID.setStatus('current')
if mibBuilder.loadTexts: cvsSwitchID.setDescription('The unique ID which is assigned to the current switch for identifying this physical chassis as a core switch in the virtual switch architecture. 0 means no switch ID configured.')
cvsSwitchCapability = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 388, 1, 1, 3), VSSwitchCapability()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvsSwitchCapability.setStatus('current')
if mibBuilder.loadTexts: cvsSwitchCapability.setDescription('The capability of the switch can be. A physical chassis can be a standalone switch in the normal environment or a switch which is part of the virtual switch architecture.')
cvsSwitchMode = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 388, 1, 1, 4), VSSwitchMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvsSwitchMode.setStatus('current')
if mibBuilder.loadTexts: cvsSwitchMode.setDescription('Converting a standalone switch in the regular switch architecture to a switch in the virtual switch architecture. Or converting a switch in the virtual switch architecture to a standalone switch in the regular switch architecture. And the value of this object can only be set to one of mode where the corresponding bits in cvsSwitchCapability is set. To prevent vague switch status, this action will not only change the switch mode, but also reload the device automatically to activate to the new switch mode.')
cvsSwitchConvertingStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 388, 1, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvsSwitchConvertingStatus.setStatus('current')
if mibBuilder.loadTexts: cvsSwitchConvertingStatus.setDescription('Indicating whether the switch is in the process of converting the mode of switch which is specified in the object cvsSwitchMode. true(1) : the switch is in converting the switch mode. false(2) : the switch is not in converting the switch mode.')
cvsVSLChangeNotifEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 388, 1, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvsVSLChangeNotifEnable.setStatus('current')
if mibBuilder.loadTexts: cvsVSLChangeNotifEnable.setDescription('Enable or disable the generation of cvsVSLConnectionChangeNotif notification.')
cvsCoreSwitchConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 388, 1, 2, 1), )
if mibBuilder.loadTexts: cvsCoreSwitchConfigTable.setStatus('current')
if mibBuilder.loadTexts: cvsCoreSwitchConfigTable.setDescription('This table describes the configuration information for the core switches to select the active or standby core switches in the virtual switch architecture. If cvsDomain or cvsSwitchID objects are configured to 0, this table is not instantiated.')
cvsCoreSwitchConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 388, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-VIRTUAL-SWITCH-MIB", "cvsCoreSwitchID"))
if mibBuilder.loadTexts: cvsCoreSwitchConfigEntry.setStatus('current')
if mibBuilder.loadTexts: cvsCoreSwitchConfigEntry.setDescription('An entry describes the configuration for a core switch information in the virtual switch architecture.')
cvsCoreSwitchID = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 388, 1, 2, 1, 1, 1), VSSwitchID())
if mibBuilder.loadTexts: cvsCoreSwitchID.setStatus('current')
if mibBuilder.loadTexts: cvsCoreSwitchID.setDescription('The switch number as an identifier for a core switch. If the priority value is the same, the higher switch number has the precedence to be the active core switch.')
cvsCoreSwitchPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 388, 1, 2, 1, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvsCoreSwitchPriority.setStatus('current')
if mibBuilder.loadTexts: cvsCoreSwitchPriority.setDescription('The configured priority information for this core switch. This priority value will be used to choose active or standby core switch. The core switch with the higher numerical value will be more desirable to be chosen as an active core switch.')
cvsCoreSwitchPreempt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 388, 1, 2, 1, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvsCoreSwitchPreempt.setStatus('current')
if mibBuilder.loadTexts: cvsCoreSwitchPreempt.setDescription('The configured preemption information for this core switch. This configuration will enable or disable the preemption of choosing the active core with higher priority.')
cvsCoreSwitchLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 388, 1, 2, 1, 1, 4), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvsCoreSwitchLocation.setStatus('current')
if mibBuilder.loadTexts: cvsCoreSwitchLocation.setDescription('The configured location for this core switch.')
cvsChassisTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 388, 1, 2, 2), )
if mibBuilder.loadTexts: cvsChassisTable.setStatus('current')
if mibBuilder.loadTexts: cvsChassisTable.setDescription("This table describes the information of the devices listed in the ENTITY-MIB entPhysicalTable in the virtual switch architecture, whose entPhysicalClass is chassis(3). This table will only be instantiated when the value of cvsSwitchMode is 'multiNode' in the virtual switch architecture.")
cvsChassisEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 388, 1, 2, 2, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: cvsChassisEntry.setStatus('current')
if mibBuilder.loadTexts: cvsChassisEntry.setDescription('An entry describes the present chassis information in the virtual switch architecture.')
cvsChassisSwitchID = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 388, 1, 2, 2, 1, 1), VSSwitchID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvsChassisSwitchID.setStatus('current')
if mibBuilder.loadTexts: cvsChassisSwitchID.setDescription('The unique switch ID which is assigned for identifying a chassis in the virtual switch architecture.')
cvsChassisRole = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 388, 1, 2, 2, 1, 2), VSSwitchRole()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvsChassisRole.setStatus('current')
if mibBuilder.loadTexts: cvsChassisRole.setDescription('This object indicates the role of this chassis in the virtual switch architecture.')
cvsChassisUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 388, 1, 2, 2, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvsChassisUpTime.setStatus('current')
if mibBuilder.loadTexts: cvsChassisUpTime.setDescription('The time (in hundredths of a second) since the chassis device was last re-initialized.')
cvsVSLConnectionTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 388, 1, 3, 1), )
if mibBuilder.loadTexts: cvsVSLConnectionTable.setStatus('current')
if mibBuilder.loadTexts: cvsVSLConnectionTable.setDescription('This table contains the VSLs (Virtual Switch Link) connection information of the core switches. A bundle link is a collection of two or more physical point-to-point links which are combined to form one logical link. A VSL is a bundle link which spans the core switch to connect to another core switch in the virtual switch.')
cvsVSLConnectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 388, 1, 3, 1, 1), ).setIndexNames((0, "CISCO-VIRTUAL-SWITCH-MIB", "cvsVSLChannelIfindex"))
if mibBuilder.loadTexts: cvsVSLConnectionEntry.setStatus('current')
if mibBuilder.loadTexts: cvsVSLConnectionEntry.setDescription('The entry contains connections information of the VSL channel interfaces between the core switches.')
cvsVSLChannelIfindex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 388, 1, 3, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: cvsVSLChannelIfindex.setStatus('current')
if mibBuilder.loadTexts: cvsVSLChannelIfindex.setDescription('The interface index of the VSL channel interface in the core switch to be used for the VSL.')
cvsVSLCoreSwitchID = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 388, 1, 3, 1, 1, 2), VSSwitchID()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cvsVSLCoreSwitchID.setStatus('current')
if mibBuilder.loadTexts: cvsVSLCoreSwitchID.setDescription('The switch ID will be used to form the VSL.')
cvsVSLConnectOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 388, 1, 3, 1, 1, 3), VSConnectStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvsVSLConnectOperStatus.setStatus('current')
if mibBuilder.loadTexts: cvsVSLConnectOperStatus.setDescription('This object indicates the operational status of the VSL connection.')
cvsVSLLastConnectionStateChange = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 388, 1, 3, 1, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvsVSLLastConnectionStateChange.setStatus('current')
if mibBuilder.loadTexts: cvsVSLLastConnectionStateChange.setDescription('The last time when the VSL connection was changed from up to down or down to up.')
cvsVSLConfiguredPortCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 388, 1, 3, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvsVSLConfiguredPortCount.setStatus('current')
if mibBuilder.loadTexts: cvsVSLConfiguredPortCount.setDescription('The number of configured ports for this VSL.')
cvsVSLOperationalPortCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 388, 1, 3, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvsVSLOperationalPortCount.setStatus('current')
if mibBuilder.loadTexts: cvsVSLOperationalPortCount.setDescription('The number of operational ports for this VSL.')
cvsVSLConnectionRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 388, 1, 3, 1, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cvsVSLConnectionRowStatus.setStatus('current')
if mibBuilder.loadTexts: cvsVSLConnectionRowStatus.setDescription('This object is a conceptual row entry that allows creating or removing entries in or from the cvsVSLConnectionTable. Creating an entry in this table means building the VSL connection and removing an entry means to remove the VSL connection.')
cvsVSLStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 388, 1, 3, 2), )
if mibBuilder.loadTexts: cvsVSLStatsTable.setStatus('current')
if mibBuilder.loadTexts: cvsVSLStatsTable.setDescription('This table contains the VSL (Virtual Switch Link) connection statistics information between the core switches in the virtual switch architecture. This table will only show the statistics information for the channel interface in the active core switch.')
cvsVSLStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 388, 1, 3, 2, 1), ).setIndexNames((0, "CISCO-VIRTUAL-SWITCH-MIB", "cvsVSLChannelIfindex"))
if mibBuilder.loadTexts: cvsVSLStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cvsVSLStatsEntry.setDescription('The entry contains transmitting and receiving statistics information of the VSL channel interface in the active core switch.')
cvsVSLTxTotalPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 388, 1, 3, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvsVSLTxTotalPkts.setStatus('current')
if mibBuilder.loadTexts: cvsVSLTxTotalPkts.setDescription('The total number of transmitted packets.')
cvsVSLTxErrorPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 388, 1, 3, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvsVSLTxErrorPkts.setStatus('current')
if mibBuilder.loadTexts: cvsVSLTxErrorPkts.setDescription('The number of transmitted error packets.')
cvsVSLTxChksumErrPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 388, 1, 3, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvsVSLTxChksumErrPkts.setStatus('current')
if mibBuilder.loadTexts: cvsVSLTxChksumErrPkts.setDescription('The number of transmitted packets with checksum error.')
cvsVSLRxTotalPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 388, 1, 3, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvsVSLRxTotalPkts.setStatus('current')
if mibBuilder.loadTexts: cvsVSLRxTotalPkts.setDescription('The total number of received packets.')
cvsVSLRxErrorPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 388, 1, 3, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvsVSLRxErrorPkts.setStatus('current')
if mibBuilder.loadTexts: cvsVSLRxErrorPkts.setDescription('The number of received error packets.')
cvsVSLRxChksumErrPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 388, 1, 3, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvsVSLRxChksumErrPkts.setStatus('current')
if mibBuilder.loadTexts: cvsVSLRxChksumErrPkts.setDescription('The number of received packets with checksum error.')
cvsVSLTxLmpPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 388, 1, 3, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvsVSLTxLmpPkts.setStatus('current')
if mibBuilder.loadTexts: cvsVSLTxLmpPkts.setDescription('The number of transmitted LMP (Link Maintenance Protocol) packets.')
cvsVSLTxRrpPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 388, 1, 3, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvsVSLTxRrpPkts.setStatus('current')
if mibBuilder.loadTexts: cvsVSLTxRrpPkts.setDescription('The number of transmitted RRP (Role Resolution Protocol) packets.')
cvsVSLTxPingPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 388, 1, 3, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvsVSLTxPingPkts.setStatus('current')
if mibBuilder.loadTexts: cvsVSLTxPingPkts.setDescription('The number of transmitted VSL PING packets.')
cvsVSLTxProtoPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 388, 1, 3, 2, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvsVSLTxProtoPkts.setStatus('current')
if mibBuilder.loadTexts: cvsVSLTxProtoPkts.setDescription("The number of transmitted protocol packets, such as ISSU's (In Service software Upgrade) protocol.")
cvsVSLTxDataPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 388, 1, 3, 2, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvsVSLTxDataPkts.setStatus('current')
if mibBuilder.loadTexts: cvsVSLTxDataPkts.setDescription("The number of transmitted data packets, such as ISSU's .")
cvsVSLTxAckPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 388, 1, 3, 2, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvsVSLTxAckPkts.setStatus('current')
if mibBuilder.loadTexts: cvsVSLTxAckPkts.setDescription('The number of transmitted ACK (Acknowledge) packets.')
cvsVSLRxLmpPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 388, 1, 3, 2, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvsVSLRxLmpPkts.setStatus('current')
if mibBuilder.loadTexts: cvsVSLRxLmpPkts.setDescription('The number of received LMP packets.')
cvsVSLRxRrpPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 388, 1, 3, 2, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvsVSLRxRrpPkts.setStatus('current')
if mibBuilder.loadTexts: cvsVSLRxRrpPkts.setDescription('The number of received RRP packets.')
cvsVSLRxPingPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 388, 1, 3, 2, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvsVSLRxPingPkts.setStatus('current')
if mibBuilder.loadTexts: cvsVSLRxPingPkts.setDescription('The number of received VSL PING packets.')
cvsVSLRxProtoPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 388, 1, 3, 2, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvsVSLRxProtoPkts.setStatus('current')
if mibBuilder.loadTexts: cvsVSLRxProtoPkts.setDescription("The number of received ISSU's protocol packets.")
cvsVSLRxDataPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 388, 1, 3, 2, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvsVSLRxDataPkts.setStatus('current')
if mibBuilder.loadTexts: cvsVSLRxDataPkts.setDescription("The number of received ISSU's data packets.")
cvsVSLRxAckPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 388, 1, 3, 2, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvsVSLRxAckPkts.setStatus('current')
if mibBuilder.loadTexts: cvsVSLRxAckPkts.setDescription('The number of received ACK packets.')
cvsVSLTxTotalEobcPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 388, 1, 3, 2, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvsVSLTxTotalEobcPkts.setStatus('current')
if mibBuilder.loadTexts: cvsVSLTxTotalEobcPkts.setDescription('The total number of transmitted EOBC (Ethernet Out-of-Band Channel) packets.')
cvsVSLTxLmpEobcPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 388, 1, 3, 2, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvsVSLTxLmpEobcPkts.setStatus('current')
if mibBuilder.loadTexts: cvsVSLTxLmpEobcPkts.setDescription('The number of transmitted LMP EOBC packets.')
cvsVSLTxRrpEobcPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 388, 1, 3, 2, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvsVSLTxRrpEobcPkts.setStatus('current')
if mibBuilder.loadTexts: cvsVSLTxRrpEobcPkts.setDescription('The number of transmitted RRP EOBC packets.')
cvsVSLTxPingEobcPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 388, 1, 3, 2, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvsVSLTxPingEobcPkts.setStatus('current')
if mibBuilder.loadTexts: cvsVSLTxPingEobcPkts.setDescription('The number of transmitted VSL PING EOBC packets.')
cvsVSLTxProtoEobcPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 388, 1, 3, 2, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvsVSLTxProtoEobcPkts.setStatus('current')
if mibBuilder.loadTexts: cvsVSLTxProtoEobcPkts.setDescription("The number of transmitted ISSU's protocol EOBC packets.")
cvsVSLTxDataEobcPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 388, 1, 3, 2, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvsVSLTxDataEobcPkts.setStatus('current')
if mibBuilder.loadTexts: cvsVSLTxDataEobcPkts.setDescription("The number of transmitted ISSU's data EOBC packets.")
cvsVSLTxAckEobcPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 388, 1, 3, 2, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvsVSLTxAckEobcPkts.setStatus('current')
if mibBuilder.loadTexts: cvsVSLTxAckEobcPkts.setDescription('The number of transmitted ACK EOBC packets.')
cvsVSLRxTotalEobcPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 388, 1, 3, 2, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvsVSLRxTotalEobcPkts.setStatus('current')
if mibBuilder.loadTexts: cvsVSLRxTotalEobcPkts.setDescription('The total number of received EOBC packets.')
cvsVSLRxLmpEobcPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 388, 1, 3, 2, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvsVSLRxLmpEobcPkts.setStatus('current')
if mibBuilder.loadTexts: cvsVSLRxLmpEobcPkts.setDescription('The number of received LMP EOBC packets.')
cvsVSLRxRrpEobcPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 388, 1, 3, 2, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvsVSLRxRrpEobcPkts.setStatus('current')
if mibBuilder.loadTexts: cvsVSLRxRrpEobcPkts.setDescription('The number of received RRP EOBC packets.')
cvsVSLRxPingEobcPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 388, 1, 3, 2, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvsVSLRxPingEobcPkts.setStatus('current')
if mibBuilder.loadTexts: cvsVSLRxPingEobcPkts.setDescription('The number of received VSL PING EOBC packets.')
cvsVSLRxProtoEobcPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 388, 1, 3, 2, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvsVSLRxProtoEobcPkts.setStatus('current')
if mibBuilder.loadTexts: cvsVSLRxProtoEobcPkts.setDescription("The number of received ISSU's protocol EOBC packets.")
cvsVSLRxDataEobcPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 388, 1, 3, 2, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvsVSLRxDataEobcPkts.setStatus('current')
if mibBuilder.loadTexts: cvsVSLRxDataEobcPkts.setDescription("The number of received ISSU's data EOBC packets.")
cvsVSLRxAckEobcPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 388, 1, 3, 2, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvsVSLRxAckEobcPkts.setStatus('current')
if mibBuilder.loadTexts: cvsVSLRxAckEobcPkts.setDescription('The number of received ACK EOBC packets.')
cvsVSLTxTotalHCPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 388, 1, 3, 2, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvsVSLTxTotalHCPkts.setStatus('current')
if mibBuilder.loadTexts: cvsVSLTxTotalHCPkts.setDescription('The high capacity counter for the total number of transmitted packets.')
cvsVSLTxErrorHCPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 388, 1, 3, 2, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvsVSLTxErrorHCPkts.setStatus('current')
if mibBuilder.loadTexts: cvsVSLTxErrorHCPkts.setDescription('The high capacity counter for the total number of transmitted error packets.')
cvsVSLTxChksumErrHCPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 388, 1, 3, 2, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvsVSLTxChksumErrHCPkts.setStatus('current')
if mibBuilder.loadTexts: cvsVSLTxChksumErrHCPkts.setDescription('The high capacity counter for the number of transmitted packets with checksum error.')
cvsVSLRxTotalHCPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 388, 1, 3, 2, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvsVSLRxTotalHCPkts.setStatus('current')
if mibBuilder.loadTexts: cvsVSLRxTotalHCPkts.setDescription('The high capacity counter for the total number of received packets.')
cvsVSLRxErrorHCPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 388, 1, 3, 2, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvsVSLRxErrorHCPkts.setStatus('current')
if mibBuilder.loadTexts: cvsVSLRxErrorHCPkts.setDescription('The high capacity counter for the number of received error packets.')
cvsVSLRxChksumErrHCPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 388, 1, 3, 2, 1, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvsVSLRxChksumErrHCPkts.setStatus('current')
if mibBuilder.loadTexts: cvsVSLRxChksumErrHCPkts.setDescription('The high capacity counter for the number of received received packets with checksum error.')
cvsVSLPortStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 388, 1, 3, 3), )
if mibBuilder.loadTexts: cvsVSLPortStatsTable.setStatus('current')
if mibBuilder.loadTexts: cvsVSLPortStatsTable.setDescription('This table contains the statistics information for the configured physical ports of the VSL (Virtual Switch Link) connection in the active core switch.')
cvsVSLPortStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 388, 1, 3, 3, 1), ).setIndexNames((0, "CISCO-VIRTUAL-SWITCH-MIB", "cvsVSLChannelIfindex"), (0, "CISCO-VIRTUAL-SWITCH-MIB", "cvsVSLPortStatsIfindex"))
if mibBuilder.loadTexts: cvsVSLPortStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cvsVSLPortStatsEntry.setDescription('The entry contains transmitting and receiving statistics information for a configured physical port of the VSL channel interface in the active core switch.')
cvsVSLPortStatsIfindex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 388, 1, 3, 3, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: cvsVSLPortStatsIfindex.setStatus('current')
if mibBuilder.loadTexts: cvsVSLPortStatsIfindex.setDescription('The interface index for the configured physical port in the VSL.')
cvsVSLPortTxOkPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 388, 1, 3, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvsVSLPortTxOkPkts.setStatus('current')
if mibBuilder.loadTexts: cvsVSLPortTxOkPkts.setDescription('The number of transmitted packets without errors for the port.')
cvsVSLPortTxFailPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 388, 1, 3, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvsVSLPortTxFailPkts.setStatus('current')
if mibBuilder.loadTexts: cvsVSLPortTxFailPkts.setDescription('The number of transmitted packets that had local sending failures, such as out of buffers and other internal errors for the port.')
cvsVSLPortRxBidirPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 388, 1, 3, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvsVSLPortRxBidirPkts.setStatus('current')
if mibBuilder.loadTexts: cvsVSLPortRxBidirPkts.setDescription('The number of received packets indicating a bidirectional link for the port.')
cvsVSLPortRxUnidirPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 388, 1, 3, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvsVSLPortRxUnidirPkts.setStatus('current')
if mibBuilder.loadTexts: cvsVSLPortRxUnidirPkts.setDescription('The number of received packets that do not indicate a bidirectional link for the port.')
cvsVSLPortRxFailPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 388, 1, 3, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvsVSLPortRxFailPkts.setStatus('current')
if mibBuilder.loadTexts: cvsVSLPortRxFailPkts.setDescription('The number of received packets with incorrect data for the port.')
cvsVSLPortRxBadPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 388, 1, 3, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvsVSLPortRxBadPkts.setStatus('current')
if mibBuilder.loadTexts: cvsVSLPortRxBadPkts.setDescription('The number of received packets with in invalid states for the port.')
cvsVSLPortRxMyInfoMismatchPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 388, 1, 3, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvsVSLPortRxMyInfoMismatchPkts.setStatus('current')
if mibBuilder.loadTexts: cvsVSLPortRxMyInfoMismatchPkts.setDescription('The number of received packets with mismatched local switch information for the port.')
cvsVSLPortRxMyInfoAbsentPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 388, 1, 3, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvsVSLPortRxMyInfoAbsentPkts.setStatus('current')
if mibBuilder.loadTexts: cvsVSLPortRxMyInfoAbsentPkts.setDescription('The number of received packets without local switch information for the port.')
cvsVSLPortRxBadMacAddressPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 388, 1, 3, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvsVSLPortRxBadMacAddressPkts.setStatus('current')
if mibBuilder.loadTexts: cvsVSLPortRxBadMacAddressPkts.setDescription('The number of received packets with bad MAC addresses information for the port.')
cvsVSLPortRxBadSwitchIdPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 388, 1, 3, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvsVSLPortRxBadSwitchIdPkts.setStatus('current')
if mibBuilder.loadTexts: cvsVSLPortRxBadSwitchIdPkts.setDescription('The number of received packets with bad switch IDs information for the port.')
cvsVSLPortRxDomainIdMismatchPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 388, 1, 3, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvsVSLPortRxDomainIdMismatchPkts.setStatus('current')
if mibBuilder.loadTexts: cvsVSLPortRxDomainIdMismatchPkts.setDescription('The number of received packets with mismatched domain IDs information for the port.')
cvsVSLPortRxPeerInfoMismatchPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 388, 1, 3, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvsVSLPortRxPeerInfoMismatchPkts.setStatus('current')
if mibBuilder.loadTexts: cvsVSLPortRxPeerInfoMismatchPkts.setDescription('The number of received packets with mismatched peer information for the port.')
cvsVSLLinkPortTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 388, 1, 3, 4), )
if mibBuilder.loadTexts: cvsVSLLinkPortTable.setStatus('current')
if mibBuilder.loadTexts: cvsVSLLinkPortTable.setDescription('This table contains the information for the configured physical ports of the VSL (Virtual Switch Link) connections in the active core switch and standby switch.')
cvsVSLLinkPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 388, 1, 3, 4, 1), ).setIndexNames((0, "CISCO-VIRTUAL-SWITCH-MIB", "cvsVSLChannelIfindex"), (0, "CISCO-VIRTUAL-SWITCH-MIB", "cvsVSLPortStatsIfindex"))
if mibBuilder.loadTexts: cvsVSLLinkPortEntry.setStatus('current')
if mibBuilder.loadTexts: cvsVSLLinkPortEntry.setDescription('The entry contains the information for the configured physical ports of the VSL (Virtual Switch Link) connections in the active core switch and standby switch.')
cvsVSLLinkPeerInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 388, 1, 3, 4, 1, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvsVSLLinkPeerInterface.setStatus('current')
if mibBuilder.loadTexts: cvsVSLLinkPeerInterface.setDescription('This object displays the interface name of the peer interface.')
cvsModuleTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 388, 1, 4, 1), )
if mibBuilder.loadTexts: cvsModuleTable.setStatus('current')
if mibBuilder.loadTexts: cvsModuleTable.setDescription('This table describes the information of the physical modules listed in the ENTITY-MIB entPhysicalTable, whose entPhysicalClass is module(9). This table only contains physical linecards, no sub-linecards or port level module entities.')
cvsModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 388, 1, 4, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: cvsModuleEntry.setStatus('current')
if mibBuilder.loadTexts: cvsModuleEntry.setDescription('An entry describes the present physical module information.')
cvsModuleVSSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 388, 1, 4, 1, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvsModuleVSSupported.setStatus('current')
if mibBuilder.loadTexts: cvsModuleVSSupported.setDescription('The physical module is supported in the virtual switch architecture or not.')
cvsModuleVSLCapable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 388, 1, 4, 1, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvsModuleVSLCapable.setStatus('current')
if mibBuilder.loadTexts: cvsModuleVSLCapable.setDescription('The physical module has the capability to build the VSL connection between 2 core switches in the virtual switch architecture or not. If any physical port in this physical module is with the capability to build the VSL connection, it means this module is VSL capable.')
cvsModuleSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 388, 1, 4, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvsModuleSlotNumber.setStatus('current')
if mibBuilder.loadTexts: cvsModuleSlotNumber.setDescription('The module slot number for this physical module. If it is in the virtual switch environment, this object returns virtual slot number. If it is in the standalone environment, this object returns physical slot number.')
cvsModuleRprWarm = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 388, 1, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("rprWarm", 2), ("cSSO", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvsModuleRprWarm.setStatus('current')
if mibBuilder.loadTexts: cvsModuleRprWarm.setDescription("The object indicates in-chassis standby supervisor module's redundancy state in a VS environment. 'notApplicable' : the module is not applicable for the rest of states. 'rprWarm' : the module is the in-chassis standby supervisor in rpr warm state running as a DFC (Distributed Forwarding Card). 'cSSO' : the module is the in-chassis hot standby supervisor")
cvsDualActiveDetectionNotifEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 388, 1, 5, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvsDualActiveDetectionNotifEnable.setStatus('current')
if mibBuilder.loadTexts: cvsDualActiveDetectionNotifEnable.setDescription('Enable or disable the generation of cvsDualActiveDetectionNotif notification.')
cvsDualActiveDetectionInformation = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 388, 1, 5, 2), SnmpAdminString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cvsDualActiveDetectionInformation.setStatus('current')
if mibBuilder.loadTexts: cvsDualActiveDetectionInformation.setDescription('This object provides information about the dual active notification cvsDualActiveDetectionNotif, i.e., the cause of dual-active, the detection method.')
cvsVSLConnectionChangeNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 388, 0, 1)).setObjects(("CISCO-VIRTUAL-SWITCH-MIB", "cvsVSLConnectOperStatus"))
if mibBuilder.loadTexts: cvsVSLConnectionChangeNotif.setStatus('current')
if mibBuilder.loadTexts: cvsVSLConnectionChangeNotif.setDescription('The notification will be generated when the state of the VSL connection is changed.')
cvsDualActiveDetectionNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 388, 0, 2)).setObjects(("CISCO-VIRTUAL-SWITCH-MIB", "cvsSwitchID"), ("CISCO-VIRTUAL-SWITCH-MIB", "cvsDualActiveDetectionInformation"))
if mibBuilder.loadTexts: cvsDualActiveDetectionNotif.setStatus('current')
if mibBuilder.loadTexts: cvsDualActiveDetectionNotif.setDescription('The notification will be generated when dual-active is detected.')
cvsMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 388, 2, 1))
cvsMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 388, 2, 2))
cvsMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 388, 2, 1, 1)).setObjects(("CISCO-VIRTUAL-SWITCH-MIB", "cvsGlobalGroup"), ("CISCO-VIRTUAL-SWITCH-MIB", "cvsModuleGroup"), ("CISCO-VIRTUAL-SWITCH-MIB", "cvsCoreSwitchGroup"), ("CISCO-VIRTUAL-SWITCH-MIB", "cvsChassisGroup"), ("CISCO-VIRTUAL-SWITCH-MIB", "cvsVSLConnectionGroup"), ("CISCO-VIRTUAL-SWITCH-MIB", "cvsVSLStatisticsGroup"), ("CISCO-VIRTUAL-SWITCH-MIB", "cvsConnectionNotifsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvsMIBCompliance = cvsMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: cvsMIBCompliance.setDescription('The compliance statement for entities which implement the CISCO-VIRTUAL-SWITCH-MIB.')
cvsMIBComplianceV02 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 388, 2, 1, 2)).setObjects(("CISCO-VIRTUAL-SWITCH-MIB", "cvsGlobalGroup"), ("CISCO-VIRTUAL-SWITCH-MIB", "cvsModuleGroup"), ("CISCO-VIRTUAL-SWITCH-MIB", "cvsVssModuleStandbyGroup"), ("CISCO-VIRTUAL-SWITCH-MIB", "cvsCoreSwitchGroup"), ("CISCO-VIRTUAL-SWITCH-MIB", "cvsChassisGroup"), ("CISCO-VIRTUAL-SWITCH-MIB", "cvsVSLConnectionGroup"), ("CISCO-VIRTUAL-SWITCH-MIB", "cvsVSLStatisticsGroup"), ("CISCO-VIRTUAL-SWITCH-MIB", "cvsConnectionNotifsGroup"), ("CISCO-VIRTUAL-SWITCH-MIB", "cvsVSLStatisticsExtGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvsMIBComplianceV02 = cvsMIBComplianceV02.setStatus('deprecated')
if mibBuilder.loadTexts: cvsMIBComplianceV02.setDescription('The compliance statement for entities which implement the CISCO-VIRTUAL-SWITCH-MIB.')
cvsMIBComplianceV03 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 388, 2, 1, 3)).setObjects(("CISCO-VIRTUAL-SWITCH-MIB", "cvsGlobalGroup"), ("CISCO-VIRTUAL-SWITCH-MIB", "cvsModuleGroup"), ("CISCO-VIRTUAL-SWITCH-MIB", "cvsVssModuleStandbyGroup"), ("CISCO-VIRTUAL-SWITCH-MIB", "cvsCoreSwitchGroup"), ("CISCO-VIRTUAL-SWITCH-MIB", "cvsChassisGroup"), ("CISCO-VIRTUAL-SWITCH-MIB", "cvsVSLConnectionGroup"), ("CISCO-VIRTUAL-SWITCH-MIB", "cvsVSLStatisticsGroup"), ("CISCO-VIRTUAL-SWITCH-MIB", "cvsConnectionNotifsGroup"), ("CISCO-VIRTUAL-SWITCH-MIB", "cvsVSLStatisticsExtGroup"), ("CISCO-VIRTUAL-SWITCH-MIB", "cvsCoreSwitchLocationGroup"), ("CISCO-VIRTUAL-SWITCH-MIB", "cvsDualActiveDetectionNotifsControlGroup"), ("CISCO-VIRTUAL-SWITCH-MIB", "cvsDualActiveDetectionNotifsInfoGroup"), ("CISCO-VIRTUAL-SWITCH-MIB", "cvsDualActiveDetectionNotifsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvsMIBComplianceV03 = cvsMIBComplianceV03.setStatus('deprecated')
if mibBuilder.loadTexts: cvsMIBComplianceV03.setDescription('The compliance statement for entities which implement the CISCO-VIRTUAL-SWITCH-MIB.')
cvsMIBComplianceV04 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 388, 2, 1, 4)).setObjects(("CISCO-VIRTUAL-SWITCH-MIB", "cvsGlobalGroup"), ("CISCO-VIRTUAL-SWITCH-MIB", "cvsModuleGroup"), ("CISCO-VIRTUAL-SWITCH-MIB", "cvsVssModuleStandbyGroup"), ("CISCO-VIRTUAL-SWITCH-MIB", "cvsCoreSwitchGroup"), ("CISCO-VIRTUAL-SWITCH-MIB", "cvsChassisGroup"), ("CISCO-VIRTUAL-SWITCH-MIB", "cvsVSLConnectionGroup"), ("CISCO-VIRTUAL-SWITCH-MIB", "cvsVSLStatisticsGroup"), ("CISCO-VIRTUAL-SWITCH-MIB", "cvsConnectionNotifsGroup"), ("CISCO-VIRTUAL-SWITCH-MIB", "cvsVSLStatisticsExtGroup"), ("CISCO-VIRTUAL-SWITCH-MIB", "cvsCoreSwitchLocationGroup"), ("CISCO-VIRTUAL-SWITCH-MIB", "cvsDualActiveDetectionNotifsControlGroup"), ("CISCO-VIRTUAL-SWITCH-MIB", "cvsDualActiveDetectionNotifsInfoGroup"), ("CISCO-VIRTUAL-SWITCH-MIB", "cvsDualActiveDetectionNotifsGroup"), ("CISCO-VIRTUAL-SWITCH-MIB", "cvsVSLLinkPortGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvsMIBComplianceV04 = cvsMIBComplianceV04.setStatus('current')
if mibBuilder.loadTexts: cvsMIBComplianceV04.setDescription('The compliance statement for entities which implement the CISCO-VIRTUAL-SWITCH-MIB.')
cvsGlobalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 388, 2, 2, 1)).setObjects(("CISCO-VIRTUAL-SWITCH-MIB", "cvsDomain"), ("CISCO-VIRTUAL-SWITCH-MIB", "cvsSwitchID"), ("CISCO-VIRTUAL-SWITCH-MIB", "cvsSwitchCapability"), ("CISCO-VIRTUAL-SWITCH-MIB", "cvsSwitchMode"), ("CISCO-VIRTUAL-SWITCH-MIB", "cvsSwitchConvertingStatus"), ("CISCO-VIRTUAL-SWITCH-MIB", "cvsVSLChangeNotifEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvsGlobalGroup = cvsGlobalGroup.setStatus('current')
if mibBuilder.loadTexts: cvsGlobalGroup.setDescription('The collection of objects which are used in the virtual switch or standalone environment.')
cvsCoreSwitchGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 388, 2, 2, 2)).setObjects(("CISCO-VIRTUAL-SWITCH-MIB", "cvsCoreSwitchPriority"), ("CISCO-VIRTUAL-SWITCH-MIB", "cvsCoreSwitchPreempt"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvsCoreSwitchGroup = cvsCoreSwitchGroup.setStatus('current')
if mibBuilder.loadTexts: cvsCoreSwitchGroup.setDescription('The collection of objects which are used to configure the selection information of the active or standby core switches in the virtual switch environment.')
cvsChassisGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 388, 2, 2, 3)).setObjects(("CISCO-VIRTUAL-SWITCH-MIB", "cvsChassisSwitchID"), ("CISCO-VIRTUAL-SWITCH-MIB", "cvsChassisRole"), ("CISCO-VIRTUAL-SWITCH-MIB", "cvsChassisUpTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvsChassisGroup = cvsChassisGroup.setStatus('current')
if mibBuilder.loadTexts: cvsChassisGroup.setDescription('The collection of objects which are used to monitor the chassis information in virtual switch architecture.')
cvsVSLConnectionGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 388, 2, 2, 4)).setObjects(("CISCO-VIRTUAL-SWITCH-MIB", "cvsVSLCoreSwitchID"), ("CISCO-VIRTUAL-SWITCH-MIB", "cvsVSLConnectOperStatus"), ("CISCO-VIRTUAL-SWITCH-MIB", "cvsVSLLastConnectionStateChange"), ("CISCO-VIRTUAL-SWITCH-MIB", "cvsVSLConfiguredPortCount"), ("CISCO-VIRTUAL-SWITCH-MIB", "cvsVSLOperationalPortCount"), ("CISCO-VIRTUAL-SWITCH-MIB", "cvsVSLConnectionRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvsVSLConnectionGroup = cvsVSLConnectionGroup.setStatus('current')
if mibBuilder.loadTexts: cvsVSLConnectionGroup.setDescription('The collection of objects which are used to configure the VSL connection information in standalone or virtual switch environment.')
cvsVSLStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 388, 2, 2, 5)).setObjects(("CISCO-VIRTUAL-SWITCH-MIB", "cvsVSLTxTotalPkts"), ("CISCO-VIRTUAL-SWITCH-MIB", "cvsVSLTxErrorPkts"), ("CISCO-VIRTUAL-SWITCH-MIB", "cvsVSLTxChksumErrPkts"), ("CISCO-VIRTUAL-SWITCH-MIB", "cvsVSLRxTotalPkts"), ("CISCO-VIRTUAL-SWITCH-MIB", "cvsVSLRxErrorPkts"), ("CISCO-VIRTUAL-SWITCH-MIB", "cvsVSLRxChksumErrPkts"), ("CISCO-VIRTUAL-SWITCH-MIB", "cvsVSLPortTxOkPkts"), ("CISCO-VIRTUAL-SWITCH-MIB", "cvsVSLPortTxFailPkts"), ("CISCO-VIRTUAL-SWITCH-MIB", "cvsVSLPortRxBidirPkts"), ("CISCO-VIRTUAL-SWITCH-MIB", "cvsVSLPortRxUnidirPkts"), ("CISCO-VIRTUAL-SWITCH-MIB", "cvsVSLPortRxFailPkts"), ("CISCO-VIRTUAL-SWITCH-MIB", "cvsVSLPortRxBadPkts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvsVSLStatisticsGroup = cvsVSLStatisticsGroup.setStatus('current')
if mibBuilder.loadTexts: cvsVSLStatisticsGroup.setDescription('The collection of objects which are used to monitor the VSL statistics information in virtual switch architecture.')
cvsModuleGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 388, 2, 2, 6)).setObjects(("CISCO-VIRTUAL-SWITCH-MIB", "cvsModuleVSSupported"), ("CISCO-VIRTUAL-SWITCH-MIB", "cvsModuleVSLCapable"), ("CISCO-VIRTUAL-SWITCH-MIB", "cvsModuleSlotNumber"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvsModuleGroup = cvsModuleGroup.setStatus('current')
if mibBuilder.loadTexts: cvsModuleGroup.setDescription('The collection of objects which are used to monitor the physical module information.')
cvsConnectionNotifsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 388, 2, 2, 7)).setObjects(("CISCO-VIRTUAL-SWITCH-MIB", "cvsVSLConnectionChangeNotif"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvsConnectionNotifsGroup = cvsConnectionNotifsGroup.setStatus('current')
if mibBuilder.loadTexts: cvsConnectionNotifsGroup.setDescription('The collection of notifications for the connections in virtual switch environment.')
cvsVSLStatisticsExtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 388, 2, 2, 8)).setObjects(("CISCO-VIRTUAL-SWITCH-MIB", "cvsVSLTxLmpPkts"), ("CISCO-VIRTUAL-SWITCH-MIB", "cvsVSLTxRrpPkts"), ("CISCO-VIRTUAL-SWITCH-MIB", "cvsVSLTxPingPkts"), ("CISCO-VIRTUAL-SWITCH-MIB", "cvsVSLTxProtoPkts"), ("CISCO-VIRTUAL-SWITCH-MIB", "cvsVSLTxDataPkts"), ("CISCO-VIRTUAL-SWITCH-MIB", "cvsVSLTxAckPkts"), ("CISCO-VIRTUAL-SWITCH-MIB", "cvsVSLRxLmpPkts"), ("CISCO-VIRTUAL-SWITCH-MIB", "cvsVSLRxRrpPkts"), ("CISCO-VIRTUAL-SWITCH-MIB", "cvsVSLRxPingPkts"), ("CISCO-VIRTUAL-SWITCH-MIB", "cvsVSLRxProtoPkts"), ("CISCO-VIRTUAL-SWITCH-MIB", "cvsVSLRxDataPkts"), ("CISCO-VIRTUAL-SWITCH-MIB", "cvsVSLRxAckPkts"), ("CISCO-VIRTUAL-SWITCH-MIB", "cvsVSLTxTotalEobcPkts"), ("CISCO-VIRTUAL-SWITCH-MIB", "cvsVSLTxLmpEobcPkts"), ("CISCO-VIRTUAL-SWITCH-MIB", "cvsVSLTxRrpEobcPkts"), ("CISCO-VIRTUAL-SWITCH-MIB", "cvsVSLTxPingEobcPkts"), ("CISCO-VIRTUAL-SWITCH-MIB", "cvsVSLTxProtoEobcPkts"), ("CISCO-VIRTUAL-SWITCH-MIB", "cvsVSLTxDataEobcPkts"), ("CISCO-VIRTUAL-SWITCH-MIB", "cvsVSLTxAckEobcPkts"), ("CISCO-VIRTUAL-SWITCH-MIB", "cvsVSLRxTotalEobcPkts"), ("CISCO-VIRTUAL-SWITCH-MIB", "cvsVSLRxLmpEobcPkts"), ("CISCO-VIRTUAL-SWITCH-MIB", "cvsVSLRxRrpEobcPkts"), ("CISCO-VIRTUAL-SWITCH-MIB", "cvsVSLRxPingEobcPkts"), ("CISCO-VIRTUAL-SWITCH-MIB", "cvsVSLRxProtoEobcPkts"), ("CISCO-VIRTUAL-SWITCH-MIB", "cvsVSLRxDataEobcPkts"), ("CISCO-VIRTUAL-SWITCH-MIB", "cvsVSLRxAckEobcPkts"), ("CISCO-VIRTUAL-SWITCH-MIB", "cvsVSLTxTotalHCPkts"), ("CISCO-VIRTUAL-SWITCH-MIB", "cvsVSLTxErrorHCPkts"), ("CISCO-VIRTUAL-SWITCH-MIB", "cvsVSLTxChksumErrHCPkts"), ("CISCO-VIRTUAL-SWITCH-MIB", "cvsVSLRxTotalHCPkts"), ("CISCO-VIRTUAL-SWITCH-MIB", "cvsVSLRxErrorHCPkts"), ("CISCO-VIRTUAL-SWITCH-MIB", "cvsVSLRxChksumErrHCPkts"), ("CISCO-VIRTUAL-SWITCH-MIB", "cvsVSLPortRxMyInfoMismatchPkts"), ("CISCO-VIRTUAL-SWITCH-MIB", "cvsVSLPortRxMyInfoAbsentPkts"), ("CISCO-VIRTUAL-SWITCH-MIB", "cvsVSLPortRxBadMacAddressPkts"), ("CISCO-VIRTUAL-SWITCH-MIB", "cvsVSLPortRxBadSwitchIdPkts"), ("CISCO-VIRTUAL-SWITCH-MIB", "cvsVSLPortRxDomainIdMismatchPkts"), ("CISCO-VIRTUAL-SWITCH-MIB", "cvsVSLPortRxPeerInfoMismatchPkts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvsVSLStatisticsExtGroup = cvsVSLStatisticsExtGroup.setStatus('current')
if mibBuilder.loadTexts: cvsVSLStatisticsExtGroup.setDescription('The collection of objects which are used to monitor the more detail VSL statistics information in virtual switch architecture.')
cvsVssModuleStandbyGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 388, 2, 2, 9)).setObjects(("CISCO-VIRTUAL-SWITCH-MIB", "cvsModuleRprWarm"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvsVssModuleStandbyGroup = cvsVssModuleStandbyGroup.setStatus('current')
if mibBuilder.loadTexts: cvsVssModuleStandbyGroup.setDescription('The collection of objects which are used to monitor the module in-chassis standby status information.')
cvsCoreSwitchLocationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 388, 2, 2, 10)).setObjects(("CISCO-VIRTUAL-SWITCH-MIB", "cvsCoreSwitchLocation"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvsCoreSwitchLocationGroup = cvsCoreSwitchLocationGroup.setStatus('current')
if mibBuilder.loadTexts: cvsCoreSwitchLocationGroup.setDescription('The collection of objects which are used to configure the location information of the core switches in the virtual switch environment.')
cvsDualActiveDetectionNotifsControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 388, 2, 2, 11)).setObjects(("CISCO-VIRTUAL-SWITCH-MIB", "cvsDualActiveDetectionNotifEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvsDualActiveDetectionNotifsControlGroup = cvsDualActiveDetectionNotifsControlGroup.setStatus('current')
if mibBuilder.loadTexts: cvsDualActiveDetectionNotifsControlGroup.setDescription('The collection of object(s) which are used to control the notification of dual active detection in the virtual switch environment.')
cvsDualActiveDetectionNotifsInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 388, 2, 2, 12)).setObjects(("CISCO-VIRTUAL-SWITCH-MIB", "cvsDualActiveDetectionInformation"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvsDualActiveDetectionNotifsInfoGroup = cvsDualActiveDetectionNotifsInfoGroup.setStatus('current')
if mibBuilder.loadTexts: cvsDualActiveDetectionNotifsInfoGroup.setDescription('The collection of object(s) providing variable binding for the dual active detection notification in the virtual switch environment.')
cvsDualActiveDetectionNotifsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 388, 2, 2, 13)).setObjects(("CISCO-VIRTUAL-SWITCH-MIB", "cvsDualActiveDetectionNotif"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvsDualActiveDetectionNotifsGroup = cvsDualActiveDetectionNotifsGroup.setStatus('current')
if mibBuilder.loadTexts: cvsDualActiveDetectionNotifsGroup.setDescription('The collection of notification(s) for the dual active detection in the virtual switch environment.')
cvsVSLLinkPortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 388, 2, 2, 14)).setObjects(("CISCO-VIRTUAL-SWITCH-MIB", "cvsVSLLinkPeerInterface"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvsVSLLinkPortGroup = cvsVSLLinkPortGroup.setStatus('current')
if mibBuilder.loadTexts: cvsVSLLinkPortGroup.setDescription('The collection of object(s) which are used to get the VSL Interface Name.')
mibBuilder.exportSymbols("CISCO-VIRTUAL-SWITCH-MIB", cvsChassisUpTime=cvsChassisUpTime, cvsVSLPortStatsEntry=cvsVSLPortStatsEntry, cvsSwitchMode=cvsSwitchMode, cvsVSLChannelIfindex=cvsVSLChannelIfindex, cvsVSLConnectionChangeNotif=cvsVSLConnectionChangeNotif, cvsVSLTxTotalPkts=cvsVSLTxTotalPkts, cvsModuleGroup=cvsModuleGroup, cvsVSLTxPingPkts=cvsVSLTxPingPkts, cvsMIBComplianceV03=cvsMIBComplianceV03, cvsDualActiveDetectionNotifEnable=cvsDualActiveDetectionNotifEnable, cvsVSLConnectionRowStatus=cvsVSLConnectionRowStatus, cvsVSLConnectionGroup=cvsVSLConnectionGroup, ciscoVirtualSwitchMIB=ciscoVirtualSwitchMIB, cvsModuleVSSupported=cvsModuleVSSupported, cvsCoreSwitchPreempt=cvsCoreSwitchPreempt, cvsCoreSwitchPriority=cvsCoreSwitchPriority, cvsVSLTxLmpPkts=cvsVSLTxLmpPkts, cvsVSLPortRxBadSwitchIdPkts=cvsVSLPortRxBadSwitchIdPkts, cvsVSLPortStatsIfindex=cvsVSLPortStatsIfindex, cvsVSLRxProtoPkts=cvsVSLRxProtoPkts, VSSwitchID=VSSwitchID, cvsVSLTxRrpPkts=cvsVSLTxRrpPkts, ciscoVirtualSwitchMIBNotifs=ciscoVirtualSwitchMIBNotifs, cvsVSLOperationalPortCount=cvsVSLOperationalPortCount, cvsVSLTxPingEobcPkts=cvsVSLTxPingEobcPkts, cvsVSLLinkPeerInterface=cvsVSLLinkPeerInterface, cvsVSLStatsTable=cvsVSLStatsTable, cvsVSLRxTotalEobcPkts=cvsVSLRxTotalEobcPkts, cvsVSLPortTxOkPkts=cvsVSLPortTxOkPkts, cvsVSLRxChksumErrPkts=cvsVSLRxChksumErrPkts, cvsVSLTxErrorPkts=cvsVSLTxErrorPkts, cvsVSLRxProtoEobcPkts=cvsVSLRxProtoEobcPkts, cvsVSLTxAckEobcPkts=cvsVSLTxAckEobcPkts, cvsVSLPortRxBadPkts=cvsVSLPortRxBadPkts, cvsVSLStatsEntry=cvsVSLStatsEntry, VSSwitchMode=VSSwitchMode, cvsVSLPortRxUnidirPkts=cvsVSLPortRxUnidirPkts, cvsVSLChangeNotifEnable=cvsVSLChangeNotifEnable, ciscoVirtualSwitchMIBObjects=ciscoVirtualSwitchMIBObjects, cvsChassisTable=cvsChassisTable, cvsVSLTxProtoEobcPkts=cvsVSLTxProtoEobcPkts, cvsVSLLinkPortEntry=cvsVSLLinkPortEntry, cvsChassisEntry=cvsChassisEntry, ciscoVirtualSwitchMIBConform=ciscoVirtualSwitchMIBConform, cvsVSLRxDataPkts=cvsVSLRxDataPkts, PYSNMP_MODULE_ID=ciscoVirtualSwitchMIB, cvsModuleObjects=cvsModuleObjects, cvsMIBGroups=cvsMIBGroups, cvsDualActiveDetection=cvsDualActiveDetection, cvsCoreSwitchLocationGroup=cvsCoreSwitchLocationGroup, cvsVSLStatisticsExtGroup=cvsVSLStatisticsExtGroup, cvsSwitchCapability=cvsSwitchCapability, cvsVSLTxLmpEobcPkts=cvsVSLTxLmpEobcPkts, cvsVSLPortRxMyInfoMismatchPkts=cvsVSLPortRxMyInfoMismatchPkts, cvsMIBComplianceV02=cvsMIBComplianceV02, cvsCoreSwitchGroup=cvsCoreSwitchGroup, cvsMIBCompliance=cvsMIBCompliance, cvsConnectionNotifsGroup=cvsConnectionNotifsGroup, cvsCoreSwitchLocation=cvsCoreSwitchLocation, cvsVSLRxLmpPkts=cvsVSLRxLmpPkts, cvsDualActiveDetectionInformation=cvsDualActiveDetectionInformation, cvsCoreSwitchConfigEntry=cvsCoreSwitchConfigEntry, cvsVSLPortRxMyInfoAbsentPkts=cvsVSLPortRxMyInfoAbsentPkts, cvsVSLCoreSwitchID=cvsVSLCoreSwitchID, cvsVSLRxRrpEobcPkts=cvsVSLRxRrpEobcPkts, cvsVSLRxChksumErrHCPkts=cvsVSLRxChksumErrHCPkts, cvsVSLTxTotalEobcPkts=cvsVSLTxTotalEobcPkts, cvsVSLRxTotalHCPkts=cvsVSLRxTotalHCPkts, cvsDualActiveDetectionNotif=cvsDualActiveDetectionNotif, cvsVSLRxErrorPkts=cvsVSLRxErrorPkts, cvsCoreSwitchID=cvsCoreSwitchID, cvsVssModuleStandbyGroup=cvsVssModuleStandbyGroup, VSConnectStatus=VSConnectStatus, cvsMIBComplianceV04=cvsMIBComplianceV04, cvsVSLRxErrorHCPkts=cvsVSLRxErrorHCPkts, cvsModuleSlotNumber=cvsModuleSlotNumber, cvsVSLConnectionTable=cvsVSLConnectionTable, cvsDomain=cvsDomain, cvsVSLLinkPortGroup=cvsVSLLinkPortGroup, cvsChassisRole=cvsChassisRole, cvsVSLTxErrorHCPkts=cvsVSLTxErrorHCPkts, cvsVSLStatisticsGroup=cvsVSLStatisticsGroup, cvsVSLLastConnectionStateChange=cvsVSLLastConnectionStateChange, cvsVSLRxTotalPkts=cvsVSLRxTotalPkts, cvsCoreSwitchConfigTable=cvsCoreSwitchConfigTable, cvsVSLRxRrpPkts=cvsVSLRxRrpPkts, cvsDualActiveDetectionNotifsInfoGroup=cvsDualActiveDetectionNotifsInfoGroup, cvsVSLRxAckEobcPkts=cvsVSLRxAckEobcPkts, cvsModuleTable=cvsModuleTable, cvsVSLConnectionEntry=cvsVSLConnectionEntry, cvsVSLTxProtoPkts=cvsVSLTxProtoPkts, cvsVSLRxAckPkts=cvsVSLRxAckPkts, cvsVSLPortRxBadMacAddressPkts=cvsVSLPortRxBadMacAddressPkts, cvsVSLLinkPortTable=cvsVSLLinkPortTable, cvsModuleEntry=cvsModuleEntry, cvsVSLPortRxFailPkts=cvsVSLPortRxFailPkts, VSSwitchRole=VSSwitchRole, cvsVSLConnectOperStatus=cvsVSLConnectOperStatus, cvsModuleVSLCapable=cvsModuleVSLCapable, cvsVSLTxChksumErrPkts=cvsVSLTxChksumErrPkts, cvsVSLPortRxDomainIdMismatchPkts=cvsVSLPortRxDomainIdMismatchPkts, cvsDualActiveDetectionNotifsGroup=cvsDualActiveDetectionNotifsGroup, cvsVSLTxTotalHCPkts=cvsVSLTxTotalHCPkts, cvsVSLObjects=cvsVSLObjects, cvsVSLRxPingPkts=cvsVSLRxPingPkts, cvsChassisObjects=cvsChassisObjects, cvsVSLPortRxPeerInfoMismatchPkts=cvsVSLPortRxPeerInfoMismatchPkts, cvsGlobalObjects=cvsGlobalObjects, cvsVSLTxRrpEobcPkts=cvsVSLTxRrpEobcPkts, cvsChassisGroup=cvsChassisGroup, cvsVSLRxPingEobcPkts=cvsVSLRxPingEobcPkts, cvsVSLConfiguredPortCount=cvsVSLConfiguredPortCount, cvsMIBCompliances=cvsMIBCompliances, cvsSwitchID=cvsSwitchID, cvsVSLPortRxBidirPkts=cvsVSLPortRxBidirPkts, cvsVSLRxDataEobcPkts=cvsVSLRxDataEobcPkts, cvsVSLPortStatsTable=cvsVSLPortStatsTable, cvsVSLRxLmpEobcPkts=cvsVSLRxLmpEobcPkts, cvsVSLPortTxFailPkts=cvsVSLPortTxFailPkts, cvsChassisSwitchID=cvsChassisSwitchID, cvsModuleRprWarm=cvsModuleRprWarm, cvsSwitchConvertingStatus=cvsSwitchConvertingStatus, cvsVSLTxDataEobcPkts=cvsVSLTxDataEobcPkts, VSSwitchCapability=VSSwitchCapability, cvsDualActiveDetectionNotifsControlGroup=cvsDualActiveDetectionNotifsControlGroup, cvsVSLTxDataPkts=cvsVSLTxDataPkts, cvsGlobalGroup=cvsGlobalGroup, cvsVSLTxChksumErrHCPkts=cvsVSLTxChksumErrHCPkts, cvsVSLTxAckPkts=cvsVSLTxAckPkts)
