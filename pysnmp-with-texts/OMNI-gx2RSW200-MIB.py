#
# PySNMP MIB module OMNI-gx2RSW200-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/OMNI-gx2RSW200-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:33:42 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion")
gx2Rsw200, = mibBuilder.importSymbols("GX2HFC-MIB", "gx2Rsw200")
trapChangedValueDisplayString, trapChangedObjectId, trapNetworkElemAvailStatus, trapNetworkElemOperState, trapIdentifier, trapText, trapNetworkElemSerialNum, trapNetworkElemModelNumber, trapNetworkElemAlarmStatus, trapNETrapLastTrapTimeStamp, trapPerceivedSeverity, trapChangedValueInteger, trapNetworkElemAdminState = mibBuilder.importSymbols("NLSBBN-TRAPS-MIB", "trapChangedValueDisplayString", "trapChangedObjectId", "trapNetworkElemAvailStatus", "trapNetworkElemOperState", "trapIdentifier", "trapText", "trapNetworkElemSerialNum", "trapNetworkElemModelNumber", "trapNetworkElemAlarmStatus", "trapNETrapLastTrapTimeStamp", "trapPerceivedSeverity", "trapChangedValueInteger", "trapNetworkElemAdminState")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, Unsigned32, TimeTicks, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, IpAddress, NotificationType, ModuleIdentity, MibIdentifier, Integer32, ObjectIdentity, Counter32, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Unsigned32", "TimeTicks", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "IpAddress", "NotificationType", "ModuleIdentity", "MibIdentifier", "Integer32", "ObjectIdentity", "Counter32", "Counter64")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class Float(Counter32):
    pass

gx2Rsw200Descriptor = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 8, 1))
gx2Rsw200AnalogTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 8, 2), )
if mibBuilder.loadTexts: gx2Rsw200AnalogTable.setStatus('mandatory')
if mibBuilder.loadTexts: gx2Rsw200AnalogTable.setDescription('This table contains gx2Rsw200 specific parameters with nominal and current values.')
gx2Rsw200AnalogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 8, 2, 1), ).setIndexNames((0, "OMNI-gx2RSW200-MIB", "gx2Rsw200AnalogTableIndex"))
if mibBuilder.loadTexts: gx2Rsw200AnalogEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gx2Rsw200AnalogEntry.setDescription('This list contains the analog parameters and descriptions.')
gx2Rsw200DigitalTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 8, 3), )
if mibBuilder.loadTexts: gx2Rsw200DigitalTable.setStatus('mandatory')
if mibBuilder.loadTexts: gx2Rsw200DigitalTable.setDescription('This table contains gx2Rsw200 specific parameters with nominal and current values.')
gx2Rsw200DigitalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 8, 3, 2), ).setIndexNames((0, "OMNI-gx2RSW200-MIB", "gx2Rsw200DigitalTableIndex"))
if mibBuilder.loadTexts: gx2Rsw200DigitalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gx2Rsw200DigitalEntry.setDescription('This list contains digital parameters and descriptions.')
gx2Rsw200StatusTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 8, 4), )
if mibBuilder.loadTexts: gx2Rsw200StatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: gx2Rsw200StatusTable.setDescription('This table contains gx2Rsw200 specific parameters with nominal and current values.')
gx2Rsw200StatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 8, 4, 3), ).setIndexNames((0, "OMNI-gx2RSW200-MIB", "gx2Rsw200StatusTableIndex"))
if mibBuilder.loadTexts: gx2Rsw200StatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gx2Rsw200StatusEntry.setDescription('This list contains Status parameters and descriptions.')
gx2Rsw200FactoryTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 8, 5), )
if mibBuilder.loadTexts: gx2Rsw200FactoryTable.setStatus('mandatory')
if mibBuilder.loadTexts: gx2Rsw200FactoryTable.setDescription('This table contains gx2Rsw200 specific parameters with nominal and current values.')
gx2Rsw200FactoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 8, 5, 4), ).setIndexNames((0, "OMNI-gx2RSW200-MIB", "gx2Rsw200FactoryTableIndex"))
if mibBuilder.loadTexts: gx2Rsw200FactoryEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gx2Rsw200FactoryEntry.setDescription('This list contains Factory parameters and descriptions.')
gx2Rsw200bHoldTimeTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 8, 6), )
if mibBuilder.loadTexts: gx2Rsw200bHoldTimeTable.setStatus('mandatory')
if mibBuilder.loadTexts: gx2Rsw200bHoldTimeTable.setDescription('This table contains gx2Rsw200b specific parameters with nominal and current values.')
gx2Rsw200bHoldTimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 8, 6, 5), ).setIndexNames((0, "OMNI-gx2RSW200-MIB", "rxgx2Rsw200bHoldTimeTableIndex"), (0, "OMNI-gx2RSW200-MIB", "rxgx2Rsw200bHoldTimeSpecIndex"))
if mibBuilder.loadTexts: gx2Rsw200bHoldTimeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gx2Rsw200bHoldTimeEntry.setDescription('This list contains digital product class and the associated RF channel parameters and descriptions.')
gx2Rsw200AnalogTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 8, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2Rsw200AnalogTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: gx2Rsw200AnalogTableIndex.setDescription('The value of this object identifies the network element. This index is equal to the hfcCommonTableIndex for the same element.')
rsw200labelModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 8, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw200labelModTemp.setStatus('optional')
if mibBuilder.loadTexts: rsw200labelModTemp.setDescription('The value of this object provides the label of the Module Temperature Analog parameter.')
rsw200uomModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 8, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw200uomModTemp.setStatus('optional')
if mibBuilder.loadTexts: rsw200uomModTemp.setDescription('The value of this object provides the Unit of Measure of the Module Temperature Analog parameter.')
rsw200majorHighModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 8, 2, 1, 4), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw200majorHighModTemp.setStatus('mandatory')
if mibBuilder.loadTexts: rsw200majorHighModTemp.setDescription('The value of this object provides the Major High alarm value of the Module Temperature Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
rsw200majorLowModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 8, 2, 1, 5), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw200majorLowModTemp.setStatus('mandatory')
if mibBuilder.loadTexts: rsw200majorLowModTemp.setDescription('The value of this object provides the Major Low alarm value of the Module Temperature Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
rsw200minorHighModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 8, 2, 1, 6), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw200minorHighModTemp.setStatus('mandatory')
if mibBuilder.loadTexts: rsw200minorHighModTemp.setDescription('The value of this object provides the Minor High alarm value of the Module Temperature Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
rsw200minorLowModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 8, 2, 1, 7), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw200minorLowModTemp.setStatus('mandatory')
if mibBuilder.loadTexts: rsw200minorLowModTemp.setDescription('The value of this object provides the Minor Low alarm value of the Module Temperature Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
rsw200currentValueModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 8, 2, 1, 8), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw200currentValueModTemp.setStatus('mandatory')
if mibBuilder.loadTexts: rsw200currentValueModTemp.setDescription('The value of this object provides the Current value of the Module Temperature Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
rsw200stateFlagModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 8, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw200stateFlagModTemp.setStatus('mandatory')
if mibBuilder.loadTexts: rsw200stateFlagModTemp.setDescription('The value of this object provides the state of the Module Temperature Analog parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
rsw200minValueModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 8, 2, 1, 10), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw200minValueModTemp.setStatus('mandatory')
if mibBuilder.loadTexts: rsw200minValueModTemp.setDescription('The value of this object provides the minimum value the Module Temperature Analog parameter can achive. This value is a floating point number that is represented as an IEEE 32 bit number.')
rsw200maxValueModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 8, 2, 1, 11), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw200maxValueModTemp.setStatus('mandatory')
if mibBuilder.loadTexts: rsw200maxValueModTemp.setDescription('The value of this object provides the maximum value the Module Temperature Analog parameter can achive. This value is a floating point number that is represented as an IEEE 32 bit number.')
rsw200alarmStateModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 8, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw200alarmStateModTemp.setStatus('mandatory')
if mibBuilder.loadTexts: rsw200alarmStateModTemp.setDescription('The value of this object provides the curent alarm state of the Module Temperature Analog parameter.')
rsw200labelFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 8, 2, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw200labelFanCurrent.setStatus('optional')
if mibBuilder.loadTexts: rsw200labelFanCurrent.setDescription('The value of this object provides the label of the Fan Current Analog parameter.')
rsw200uomFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 8, 2, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw200uomFanCurrent.setStatus('optional')
if mibBuilder.loadTexts: rsw200uomFanCurrent.setDescription('The value of this object provides the Unit of Measure of the Fan Current Analog parameter.')
rsw200majorHighFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 8, 2, 1, 15), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw200majorHighFanCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: rsw200majorHighFanCurrent.setDescription('The value of this object provides the Major High alarm value of the Fan Current Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
rsw200majorLowFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 8, 2, 1, 16), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw200majorLowFanCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: rsw200majorLowFanCurrent.setDescription('The value of this object provides the Major Low alarm value of the Fan Current Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
rsw200minorHighFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 8, 2, 1, 17), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw200minorHighFanCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: rsw200minorHighFanCurrent.setDescription('The value of this object provides the Minor High alarm value of the Fan Current Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
rsw200minorLowFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 8, 2, 1, 18), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw200minorLowFanCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: rsw200minorLowFanCurrent.setDescription('The value of this object provides the Minor Low alarm value of the Fan Current Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
rsw200currentValueFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 8, 2, 1, 19), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw200currentValueFanCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: rsw200currentValueFanCurrent.setDescription('The value of this object provides the Current value of the Fan Current Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
rsw200stateFlagFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 8, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw200stateFlagFanCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: rsw200stateFlagFanCurrent.setDescription('The value of this object provides the state of the Fan Current Analog parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
rsw200minValueFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 8, 2, 1, 21), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw200minValueFanCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: rsw200minValueFanCurrent.setDescription('The value of this object provides the minimum value the Fan Current Analog parameter can achive. This value is a floating point number that is represented as an IEEE 32 bit number.')
rsw200maxValueFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 8, 2, 1, 22), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw200maxValueFanCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: rsw200maxValueFanCurrent.setDescription('The value of this object provides the maximum value the Fan Current Analog parameter can achive. This value is a floating point number that is represented as an IEEE 32 bit number.')
rsw200alarmStateFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 8, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw200alarmStateFanCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: rsw200alarmStateFanCurrent.setDescription('The value of this object provides the curent alarm state of the Fan Current Analog parameter.')
gx2Rsw200DigitalTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 8, 3, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2Rsw200DigitalTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: gx2Rsw200DigitalTableIndex.setDescription('The value of this object identifies the network element. This index is equal to the hfcCommonTableIndex for the same element.')
rsw200labelSwitchControl = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 8, 3, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw200labelSwitchControl.setStatus('optional')
if mibBuilder.loadTexts: rsw200labelSwitchControl.setDescription('The value of this object provides the label of the Switch Control Digital parameter.')
rsw200enumSwitchControl = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 8, 3, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw200enumSwitchControl.setStatus('optional')
if mibBuilder.loadTexts: rsw200enumSwitchControl.setDescription('The value of this object represents the Enumeration values possible for the Digital parameter. Each Enumerated values is separated by a common. The first value has a enumerated value of 1.')
rsw200valueSwitchControl = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 8, 3, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsw200valueSwitchControl.setStatus('mandatory')
if mibBuilder.loadTexts: rsw200valueSwitchControl.setDescription('The value of this object is the current value of the parameter.')
rsw200stateflagSwitchControl = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 8, 3, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw200stateflagSwitchControl.setStatus('mandatory')
if mibBuilder.loadTexts: rsw200stateflagSwitchControl.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
rsw200labelRevertMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 8, 3, 2, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw200labelRevertMode.setStatus('optional')
if mibBuilder.loadTexts: rsw200labelRevertMode.setDescription('The value of this object provides the label of the Revert Mode Digital parameter.')
rsw200enumRevertMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 8, 3, 2, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw200enumRevertMode.setStatus('optional')
if mibBuilder.loadTexts: rsw200enumRevertMode.setDescription('The value of this object represents the Enumeration values possible for the Digital parameter. Each Enumerated values is separated by a common. The first value has a enumerated value of 1.')
rsw200valueRevertMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 8, 3, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("manual", 1), ("autorevert", 2), ("nonrevert", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsw200valueRevertMode.setStatus('mandatory')
if mibBuilder.loadTexts: rsw200valueRevertMode.setDescription('The value of this object is the current value of the parameter.')
rsw200stateflagRevertMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 8, 3, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw200stateflagRevertMode.setStatus('mandatory')
if mibBuilder.loadTexts: rsw200stateflagRevertMode.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
rsw200labelRevertTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 8, 3, 2, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw200labelRevertTime.setStatus('optional')
if mibBuilder.loadTexts: rsw200labelRevertTime.setDescription('The value of this object provides the label of the Revert Time Digital parameter.')
rsw200enumRevertTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 8, 3, 2, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw200enumRevertTime.setStatus('optional')
if mibBuilder.loadTexts: rsw200enumRevertTime.setDescription('The value of this object represents the Enumeration values possible for the Digital parameter. Each Enumerated values is separated by a common. The first value has a enumerated value of 1.')
rsw200valueRevertTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 8, 3, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("tensec", 1), ("sixtysec", 2), ("sixhundredsec", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsw200valueRevertTime.setStatus('mandatory')
if mibBuilder.loadTexts: rsw200valueRevertTime.setDescription('The value of this object is the current value of the parameter.')
rsw200stateflagRevertTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 8, 3, 2, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw200stateflagRevertTime.setStatus('mandatory')
if mibBuilder.loadTexts: rsw200stateflagRevertTime.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
rsw200labelSwitchState = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 8, 3, 2, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw200labelSwitchState.setStatus('optional')
if mibBuilder.loadTexts: rsw200labelSwitchState.setDescription('The value of this object provides the label of the Switch State Digital parameter.')
rsw200enumSwitchState = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 8, 3, 2, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw200enumSwitchState.setStatus('optional')
if mibBuilder.loadTexts: rsw200enumSwitchState.setDescription('The value of this object represents the Enumeration values possible for the Digital parameter. Each Enumerated values is separated by a common. The first value has a enumerated value of 1.')
rsw200valueSwitchState = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 8, 3, 2, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw200valueSwitchState.setStatus('mandatory')
if mibBuilder.loadTexts: rsw200valueSwitchState.setDescription('The value of this object is the current value of the parameter.')
rsw200stateflagSwitchState = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 8, 3, 2, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw200stateflagSwitchState.setStatus('mandatory')
if mibBuilder.loadTexts: rsw200stateflagSwitchState.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
rsw200labelPriStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 8, 3, 2, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw200labelPriStatus.setStatus('optional')
if mibBuilder.loadTexts: rsw200labelPriStatus.setDescription('The value of this object provides the label of the Primary Signal Status Digital parameter.')
rsw200enumPriStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 8, 3, 2, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw200enumPriStatus.setStatus('optional')
if mibBuilder.loadTexts: rsw200enumPriStatus.setDescription('The value of this object represents the Enumeration values possible for the Digital parameter. Each Enumerated values is separated by a common. The first value has a enumerated value of 1.')
rsw200valuePriStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 8, 3, 2, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("short", 1), ("valid", 2), ("invalid", 3), ("open", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw200valuePriStatus.setStatus('mandatory')
if mibBuilder.loadTexts: rsw200valuePriStatus.setDescription('The value of this object is the current value of the parameter.')
rsw200stateflagPriStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 8, 3, 2, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw200stateflagPriStatus.setStatus('mandatory')
if mibBuilder.loadTexts: rsw200stateflagPriStatus.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
rsw200labelSecStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 8, 3, 2, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw200labelSecStatus.setStatus('optional')
if mibBuilder.loadTexts: rsw200labelSecStatus.setDescription('The value of this object provides the label of the Secondary Signal Status Digital parameter.')
rsw200enumSecStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 8, 3, 2, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw200enumSecStatus.setStatus('optional')
if mibBuilder.loadTexts: rsw200enumSecStatus.setDescription('The value of this object represents the Enumeration values possible for the Digital parameter. Each Enumerated values is separated by a common. The first value has a enumerated value of 1.')
rsw200valueSecStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 8, 3, 2, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("short", 1), ("valid", 2), ("invalid", 3), ("open", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw200valueSecStatus.setStatus('mandatory')
if mibBuilder.loadTexts: rsw200valueSecStatus.setDescription('The value of this object is the current value of the parameter.')
rsw200stateflagSecStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 8, 3, 2, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw200stateflagSecStatus.setStatus('mandatory')
if mibBuilder.loadTexts: rsw200stateflagSecStatus.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
rsw200labelFactoryDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 8, 3, 2, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw200labelFactoryDefault.setStatus('optional')
if mibBuilder.loadTexts: rsw200labelFactoryDefault.setDescription('The value of this object provides the label of the Factory Default Reset Digital parameter.')
rsw200enumFactoryDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 8, 3, 2, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw200enumFactoryDefault.setStatus('optional')
if mibBuilder.loadTexts: rsw200enumFactoryDefault.setDescription('The value of this object represents the Enumeration values possible for the Digital parameter. Each Enumerated values is separated by a common. The first value has a enumerated value of 1.')
rsw200valueFactoryDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 8, 3, 2, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsw200valueFactoryDefault.setStatus('mandatory')
if mibBuilder.loadTexts: rsw200valueFactoryDefault.setDescription('The value of this object is the current value of the parameter.')
rsw200stateflagFactoryDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 8, 3, 2, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw200stateflagFactoryDefault.setStatus('mandatory')
if mibBuilder.loadTexts: rsw200stateflagFactoryDefault.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
gx2Rsw200StatusTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 8, 4, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2Rsw200StatusTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: gx2Rsw200StatusTableIndex.setDescription('The value of this object identifies the network element. This index is equal to the hfcCommonTableIndex for the same element.')
rsw200labelBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 8, 4, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw200labelBoot.setStatus('optional')
if mibBuilder.loadTexts: rsw200labelBoot.setDescription('The value of this object provides the label of the Boot Status Status parameter.')
rsw200valueBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 8, 4, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw200valueBoot.setStatus('mandatory')
if mibBuilder.loadTexts: rsw200valueBoot.setDescription('The value of this object provides the current state of the parameter (0-Ok, 1-Undetermined 2-Warning, 3-Minor, 4-Major, 5-Critical).')
rsw200stateflagBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 8, 4, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw200stateflagBoot.setStatus('mandatory')
if mibBuilder.loadTexts: rsw200stateflagBoot.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
rsw200labelFlash = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 8, 4, 3, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw200labelFlash.setStatus('optional')
if mibBuilder.loadTexts: rsw200labelFlash.setDescription('The value of this object provides the label of the Flash Status Status parameter.')
rsw200valueFlash = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 8, 4, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw200valueFlash.setStatus('mandatory')
if mibBuilder.loadTexts: rsw200valueFlash.setDescription('The value of this object provides the current state of the parameter (0-Ok, 1-Undetermined 2-Warning, 3-Minor, 4-Major, 5-Critical).')
rsw200stateflagFlash = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 8, 4, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw200stateflagFlash.setStatus('mandatory')
if mibBuilder.loadTexts: rsw200stateflagFlash.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
rsw200labelFactoryDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 8, 4, 3, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw200labelFactoryDataCRC.setStatus('optional')
if mibBuilder.loadTexts: rsw200labelFactoryDataCRC.setDescription('The value of this object provides the label of the Factory Data CRC Status parameter.')
rsw200valueFactoryDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 8, 4, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw200valueFactoryDataCRC.setStatus('mandatory')
if mibBuilder.loadTexts: rsw200valueFactoryDataCRC.setDescription('The value of this object provides the current state of the parameter (0-Ok, 1-Undetermined 2-Warning, 3-Minor, 4-Major, 5-Critical).')
rsw200stateflagFactoryDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 8, 4, 3, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw200stateflagFactoryDataCRC.setStatus('mandatory')
if mibBuilder.loadTexts: rsw200stateflagFactoryDataCRC.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
rsw200labelAlarmDataCrc = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 8, 4, 3, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw200labelAlarmDataCrc.setStatus('optional')
if mibBuilder.loadTexts: rsw200labelAlarmDataCrc.setDescription('The value of this object provides the label of the Alarm Data Crc parameter.')
rsw200valueAlarmDataCrc = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 8, 4, 3, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw200valueAlarmDataCrc.setStatus('mandatory')
if mibBuilder.loadTexts: rsw200valueAlarmDataCrc.setDescription('The value of this object provides the current state of the parameter (0-Ok, 1-Undetermined 2-Warning, 3-Minor, 4-Major, 5-Critical).')
rsw200stateflagAlarmDataCrc = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 8, 4, 3, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw200stateflagAlarmDataCrc.setStatus('mandatory')
if mibBuilder.loadTexts: rsw200stateflagAlarmDataCrc.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
rsw200labelRFSignalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 8, 4, 3, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw200labelRFSignalStatus.setStatus('optional')
if mibBuilder.loadTexts: rsw200labelRFSignalStatus.setDescription('The value of this object provides the label of the RF Signal Status parameter.')
rsw200valueRFSignalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 8, 4, 3, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw200valueRFSignalStatus.setStatus('mandatory')
if mibBuilder.loadTexts: rsw200valueRFSignalStatus.setDescription('The value of this object provides the current state of the parameter (0-Ok, 1-Undetermined 2-Warning, 3-Minor, 4-Major, 5-Critical).')
rsw200stateflagRFSignalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 8, 4, 3, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw200stateflagRFSignalStatus.setStatus('mandatory')
if mibBuilder.loadTexts: rsw200stateflagRFSignalStatus.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
rsw200labelPriActiveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 8, 4, 3, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw200labelPriActiveStatus.setStatus('optional')
if mibBuilder.loadTexts: rsw200labelPriActiveStatus.setDescription('The value of this object provides the label of the Secondary Active Status parameter.')
rsw200valuePriActiveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 8, 4, 3, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw200valuePriActiveStatus.setStatus('mandatory')
if mibBuilder.loadTexts: rsw200valuePriActiveStatus.setDescription('The value of this object provides the current state of the parameter (0-Ok, 1-Undetermined 2-Warning, 3-Minor, 4-Major, 5-Critical).')
rsw200stateflagPriActiveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 8, 4, 3, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw200stateflagPriActiveStatus.setStatus('mandatory')
if mibBuilder.loadTexts: rsw200stateflagPriActiveStatus.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
gx2Rsw200FactoryTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 8, 5, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2Rsw200FactoryTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: gx2Rsw200FactoryTableIndex.setDescription('The value of this object identifies the network element. This index is equal to the hfcCommonTableIndex for the same element.')
rsw200bootControlByte = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 8, 5, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw200bootControlByte.setStatus('mandatory')
if mibBuilder.loadTexts: rsw200bootControlByte.setDescription('The value of this object indicates which bank the firmware is currently being boot from.')
rsw200bootStatusByte = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 8, 5, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw200bootStatusByte.setStatus('mandatory')
if mibBuilder.loadTexts: rsw200bootStatusByte.setDescription('This object indicates the status of the last boot')
rsw200bank1CRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 8, 5, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw200bank1CRC.setStatus('mandatory')
if mibBuilder.loadTexts: rsw200bank1CRC.setDescription('This object provides the CRC code of bank 0.')
rsw200bank2CRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 8, 5, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw200bank2CRC.setStatus('mandatory')
if mibBuilder.loadTexts: rsw200bank2CRC.setDescription('This object provides the CRC code of bank 1.')
rsw200prgEEPROMByte = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 8, 5, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw200prgEEPROMByte.setStatus('mandatory')
if mibBuilder.loadTexts: rsw200prgEEPROMByte.setDescription('This object indicates if the EEPROM has been programmed')
rsw200factoryCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 8, 5, 4, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw200factoryCRC.setStatus('mandatory')
if mibBuilder.loadTexts: rsw200factoryCRC.setDescription('This object provides the CRC code for the Factory data.')
rsw200calculateCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 8, 5, 4, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("factory", 1), ("alarm", 2), ("na", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw200calculateCRC.setStatus('mandatory')
if mibBuilder.loadTexts: rsw200calculateCRC.setDescription('This object indicates which of the Emnums will have the CRC calculated.')
rsw200hourMeter = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 8, 5, 4, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw200hourMeter.setStatus('mandatory')
if mibBuilder.loadTexts: rsw200hourMeter.setDescription('This object provides the hour meter reading of the module.')
rsw200flashPrgCntA = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 8, 5, 4, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw200flashPrgCntA.setStatus('mandatory')
if mibBuilder.loadTexts: rsw200flashPrgCntA.setDescription('This object provides the number of times Bank 1 flash has been programmed.')
rsw200flashPrgCntB = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 8, 5, 4, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw200flashPrgCntB.setStatus('mandatory')
if mibBuilder.loadTexts: rsw200flashPrgCntB.setDescription('This object provides the number of times Bank 1 flash has been programmed.')
rsw200flashBankARev = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 8, 5, 4, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw200flashBankARev.setStatus('mandatory')
if mibBuilder.loadTexts: rsw200flashBankARev.setDescription('This object provides the revision of flash bank 0.')
rsw200flashBankBRev = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 8, 5, 4, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsw200flashBankBRev.setStatus('mandatory')
if mibBuilder.loadTexts: rsw200flashBankBRev.setDescription('This object provides the revision of flash bank 1.')
rxgx2Rsw200bHoldTimeTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 8, 6, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxgx2Rsw200bHoldTimeTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: rxgx2Rsw200bHoldTimeTableIndex.setDescription('The value of this object is the index of the data object.')
rxgx2Rsw200bHoldTimeSpecIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 8, 6, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxgx2Rsw200bHoldTimeSpecIndex.setStatus('mandatory')
if mibBuilder.loadTexts: rxgx2Rsw200bHoldTimeSpecIndex.setDescription('The value of this object identifies the index of the alarm object to be modified.')
rxgx2Rsw200bHoldTimeData = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 8, 6, 5, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rxgx2Rsw200bHoldTimeData.setStatus('mandatory')
if mibBuilder.loadTexts: rxgx2Rsw200bHoldTimeData.setDescription('The value of this object provides access to the hold timers used to suppress nose on analog objects. This object is a 32 bit object. Validation data is entered into bytes zero and one of the object. Bytes three and four are used to entering the hold time for the specified alarm object. The Hold timer data ranges from 0 to 1300 seconds. The index of this object corresponds to the alarm object to be modified. Alarm Hold timers correspond to the index of this object as follows: Index 1 = xxx, index 2 = xxxx, Index 3 = xxxx, The hold time is represented in seconds.')
trapRSW200ConfigChangeInteger = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 8) + (0,1)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapRSW200ConfigChangeInteger.setDescription("This trap is issued if configuration of a single variable with integer type was changed (via ANY interface). TrapChangedValueInteger variable may contain current reading of that variable. trapPerceivedSeverity - 'indeterminate'")
trapRSW200ConfigChangeDisplayString = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 8) + (0,2)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueDisplayString"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapRSW200ConfigChangeDisplayString.setDescription("This trap is issued if configuration of a single variable with DispalayString type was changed (via ANY interface). TrapChangedValueDisplayString variable may contain current reading of that variable. trapPerceivedSeverity - 'indeterminate'")
trapRSW200RFInputAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 8) + (0,3)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapRSW200RFInputAlarm.setDescription('This trap is issued when the Switch Control signals go out of range. trapAdditionalInfoInteger variable contains current reading of the this parameter.')
trapRSW200FanCurrentAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 8) + (0,4)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapRSW200FanCurrentAlarm.setDescription('This trap is issued when the Fan Current parameter goes out of range. trapAdditionalInfoInteger variable contains current reading of the this parameter.')
trapRSW200ModuleTempAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 8) + (0,5)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapRSW200ModuleTempAlarm.setDescription('This trap is issued when the Temperature goes out of range. trapAdditionalInfoInteger variable contains current reading of the this parameter.')
trapRSW200FlashAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 8) + (0,6)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapRSW200FlashAlarm.setDescription('This trap is issued when the detects an error during Flash memory operations.')
trapRSW200BankBootAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 8) + (0,7)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapRSW200BankBootAlarm.setDescription('This trap is issued when the detects an error while booting from bank 0 or bank 1.')
trapRSW200AlarmDataCRCAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 8) + (0,8)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapRSW200AlarmDataCRCAlarm.setDescription('This trap is issued when the Alarm Data CRC is incorrect.')
trapRSW200FactoryDataCRCAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 8) + (0,9)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapRSW200FactoryDataCRCAlarm.setDescription('This trap is issued when the Factory Data CRC is incorrect.')
trapRSW200InputSwitchedAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 8) + (0,10)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapRSW200InputSwitchedAlarm.setDescription('This trap is issued when the RF input switched.')
trapRSW200ResetFactoryDefaultAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 8) + (0,11)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapRSW200ResetFactoryDefaultAlarm.setDescription('This trap is issued when the Factory Default Reset occurs.')
trapRSW200SecondaryInputActiveAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 8) + (0,12)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapRSW200SecondaryInputActiveAlarm.setDescription('This trap is issued when the scondary input becomes active.')
mibBuilder.exportSymbols("OMNI-gx2RSW200-MIB", gx2Rsw200FactoryTable=gx2Rsw200FactoryTable, trapRSW200ModuleTempAlarm=trapRSW200ModuleTempAlarm, rsw200bank2CRC=rsw200bank2CRC, rsw200minorHighFanCurrent=rsw200minorHighFanCurrent, rsw200valuePriStatus=rsw200valuePriStatus, rsw200labelRFSignalStatus=rsw200labelRFSignalStatus, gx2Rsw200AnalogTableIndex=gx2Rsw200AnalogTableIndex, rsw200hourMeter=rsw200hourMeter, rsw200valueFlash=rsw200valueFlash, rsw200stateflagSwitchState=rsw200stateflagSwitchState, rsw200bank1CRC=rsw200bank1CRC, rsw200stateflagBoot=rsw200stateflagBoot, trapRSW200RFInputAlarm=trapRSW200RFInputAlarm, rsw200valueSwitchState=rsw200valueSwitchState, rsw200valueFactoryDataCRC=rsw200valueFactoryDataCRC, rsw200minorLowFanCurrent=rsw200minorLowFanCurrent, trapRSW200ConfigChangeInteger=trapRSW200ConfigChangeInteger, gx2Rsw200FactoryEntry=gx2Rsw200FactoryEntry, rsw200labelRevertTime=rsw200labelRevertTime, rsw200labelFanCurrent=rsw200labelFanCurrent, Float=Float, rsw200minorHighModTemp=rsw200minorHighModTemp, gx2Rsw200FactoryTableIndex=gx2Rsw200FactoryTableIndex, rsw200stateflagFactoryDefault=rsw200stateflagFactoryDefault, rsw200labelSecStatus=rsw200labelSecStatus, rsw200stateflagRevertMode=rsw200stateflagRevertMode, rsw200majorHighFanCurrent=rsw200majorHighFanCurrent, trapRSW200InputSwitchedAlarm=trapRSW200InputSwitchedAlarm, trapRSW200SecondaryInputActiveAlarm=trapRSW200SecondaryInputActiveAlarm, rsw200stateflagFlash=rsw200stateflagFlash, rsw200valueRevertTime=rsw200valueRevertTime, rsw200valueRFSignalStatus=rsw200valueRFSignalStatus, gx2Rsw200AnalogTable=gx2Rsw200AnalogTable, rsw200currentValueFanCurrent=rsw200currentValueFanCurrent, rsw200labelFactoryDefault=rsw200labelFactoryDefault, trapRSW200AlarmDataCRCAlarm=trapRSW200AlarmDataCRCAlarm, trapRSW200BankBootAlarm=trapRSW200BankBootAlarm, rsw200enumSwitchState=rsw200enumSwitchState, rsw200valueSecStatus=rsw200valueSecStatus, rsw200enumFactoryDefault=rsw200enumFactoryDefault, rsw200labelPriActiveStatus=rsw200labelPriActiveStatus, rsw200stateflagSwitchControl=rsw200stateflagSwitchControl, rsw200maxValueModTemp=rsw200maxValueModTemp, rsw200minValueFanCurrent=rsw200minValueFanCurrent, rsw200valueBoot=rsw200valueBoot, rsw200flashPrgCntA=rsw200flashPrgCntA, rsw200minValueModTemp=rsw200minValueModTemp, rsw200minorLowModTemp=rsw200minorLowModTemp, rsw200stateFlagModTemp=rsw200stateFlagModTemp, rsw200stateFlagFanCurrent=rsw200stateFlagFanCurrent, trapRSW200FlashAlarm=trapRSW200FlashAlarm, rsw200prgEEPROMByte=rsw200prgEEPROMByte, gx2Rsw200AnalogEntry=gx2Rsw200AnalogEntry, rxgx2Rsw200bHoldTimeData=rxgx2Rsw200bHoldTimeData, trapRSW200FactoryDataCRCAlarm=trapRSW200FactoryDataCRCAlarm, rsw200stateflagRevertTime=rsw200stateflagRevertTime, rsw200labelBoot=rsw200labelBoot, rsw200enumSecStatus=rsw200enumSecStatus, rsw200valueRevertMode=rsw200valueRevertMode, gx2Rsw200StatusTable=gx2Rsw200StatusTable, rsw200labelModTemp=rsw200labelModTemp, rsw200labelPriStatus=rsw200labelPriStatus, rsw200stateflagSecStatus=rsw200stateflagSecStatus, rsw200calculateCRC=rsw200calculateCRC, rsw200bootControlByte=rsw200bootControlByte, rsw200valueFactoryDefault=rsw200valueFactoryDefault, rsw200factoryCRC=rsw200factoryCRC, rsw200majorHighModTemp=rsw200majorHighModTemp, rsw200labelSwitchControl=rsw200labelSwitchControl, rsw200uomFanCurrent=rsw200uomFanCurrent, rsw200enumRevertTime=rsw200enumRevertTime, rsw200alarmStateModTemp=rsw200alarmStateModTemp, gx2Rsw200StatusTableIndex=gx2Rsw200StatusTableIndex, trapRSW200ResetFactoryDefaultAlarm=trapRSW200ResetFactoryDefaultAlarm, gx2Rsw200DigitalTable=gx2Rsw200DigitalTable, rsw200enumRevertMode=rsw200enumRevertMode, rsw200labelSwitchState=rsw200labelSwitchState, gx2Rsw200DigitalTableIndex=gx2Rsw200DigitalTableIndex, rsw200currentValueModTemp=rsw200currentValueModTemp, rsw200enumPriStatus=rsw200enumPriStatus, rsw200labelFactoryDataCRC=rsw200labelFactoryDataCRC, gx2Rsw200StatusEntry=gx2Rsw200StatusEntry, rsw200valueAlarmDataCrc=rsw200valueAlarmDataCrc, rsw200alarmStateFanCurrent=rsw200alarmStateFanCurrent, rsw200bootStatusByte=rsw200bootStatusByte, rsw200maxValueFanCurrent=rsw200maxValueFanCurrent, rsw200uomModTemp=rsw200uomModTemp, rsw200stateflagFactoryDataCRC=rsw200stateflagFactoryDataCRC, rsw200stateflagPriActiveStatus=rsw200stateflagPriActiveStatus, rxgx2Rsw200bHoldTimeSpecIndex=rxgx2Rsw200bHoldTimeSpecIndex, rsw200stateflagAlarmDataCrc=rsw200stateflagAlarmDataCrc, rsw200stateflagPriStatus=rsw200stateflagPriStatus, rsw200labelAlarmDataCrc=rsw200labelAlarmDataCrc, rsw200valueSwitchControl=rsw200valueSwitchControl, rsw200flashPrgCntB=rsw200flashPrgCntB, rxgx2Rsw200bHoldTimeTableIndex=rxgx2Rsw200bHoldTimeTableIndex, trapRSW200FanCurrentAlarm=trapRSW200FanCurrentAlarm, rsw200stateflagRFSignalStatus=rsw200stateflagRFSignalStatus, rsw200majorLowModTemp=rsw200majorLowModTemp, trapRSW200ConfigChangeDisplayString=trapRSW200ConfigChangeDisplayString, gx2Rsw200bHoldTimeTable=gx2Rsw200bHoldTimeTable, rsw200enumSwitchControl=rsw200enumSwitchControl, rsw200labelRevertMode=rsw200labelRevertMode, gx2Rsw200bHoldTimeEntry=gx2Rsw200bHoldTimeEntry, rsw200flashBankARev=rsw200flashBankARev, rsw200flashBankBRev=rsw200flashBankBRev, gx2Rsw200DigitalEntry=gx2Rsw200DigitalEntry, rsw200labelFlash=rsw200labelFlash, rsw200valuePriActiveStatus=rsw200valuePriActiveStatus, rsw200majorLowFanCurrent=rsw200majorLowFanCurrent, gx2Rsw200Descriptor=gx2Rsw200Descriptor)
