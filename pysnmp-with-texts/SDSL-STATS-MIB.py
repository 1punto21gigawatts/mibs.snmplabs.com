#
# PySNMP MIB module SDSL-STATS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SDSL-STATS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:01:35 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
nncExtensions, = mibBuilder.importSymbols("NNCGNI0001-SMI", "nncExtensions")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Unsigned32, TimeTicks, IpAddress, Gauge32, Counter64, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, iso, NotificationType, Integer32, Bits, Counter32, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "TimeTicks", "IpAddress", "Gauge32", "Counter64", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "iso", "NotificationType", "Integer32", "Bits", "Counter32", "ObjectIdentity")
DisplayString, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "TruthValue")
nncSdslStatistics = ModuleIdentity((1, 3, 6, 1, 4, 1, 123, 3, 64))
if mibBuilder.loadTexts: nncSdslStatistics.setLastUpdated('9809301200Z')
if mibBuilder.loadTexts: nncSdslStatistics.setOrganization('Newbridge Networks Corporation')
if mibBuilder.loadTexts: nncSdslStatistics.setContactInfo('Newbridge Networks Corporation Postal: 600 March Road Kanata, Ontario Canada K2K 2E6 Phone: +1 613 591 3600 Fax: +1 613 591 3680')
if mibBuilder.loadTexts: nncSdslStatistics.setDescription('This module contains definitions for SDSL Ports Stats.')
nncSdslStatisticsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 123, 3, 64, 1))
nncSdslLineStatusTable = MibTable((1, 3, 6, 1, 4, 1, 123, 3, 64, 1, 1), )
if mibBuilder.loadTexts: nncSdslLineStatusTable.setStatus('current')
if mibBuilder.loadTexts: nncSdslLineStatusTable.setDescription('Table that contains the Status of all SDSL Lines.')
nncSdslLineStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 123, 3, 64, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: nncSdslLineStatusEntry.setStatus('current')
if mibBuilder.loadTexts: nncSdslLineStatusEntry.setDescription('The Status of an SDSL Line.')
nncSdslLineStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 64, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 34))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncSdslLineStatus.setStatus('current')
if mibBuilder.loadTexts: nncSdslLineStatus.setDescription('Status indicates current state of the line. Unknown 0 Operational 1 Near End Loss Of Cell Delineation 2 Near End Loss Of Signal 3 Near End Loss Of Power 34')
nncSdslNearEndRawTable = MibTable((1, 3, 6, 1, 4, 1, 123, 3, 64, 1, 2), )
if mibBuilder.loadTexts: nncSdslNearEndRawTable.setStatus('current')
if mibBuilder.loadTexts: nncSdslNearEndRawTable.setDescription('Table that contains the Near End RAW Stats of all SDSL Ports.')
nncSdslNearEndRawEntry = MibTableRow((1, 3, 6, 1, 4, 1, 123, 3, 64, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: nncSdslNearEndRawEntry.setStatus('current')
if mibBuilder.loadTexts: nncSdslNearEndRawEntry.setDescription('The Near End Raw Stats of an SDSL Port.')
nncSdslNearEndRawLOS = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 64, 1, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncSdslNearEndRawLOS.setStatus('current')
if mibBuilder.loadTexts: nncSdslNearEndRawLOS.setDescription('Count of the number of Loss of Signal failures since system reset.')
nncSdslNearEndRawLowNM = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 64, 1, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncSdslNearEndRawLowNM.setStatus('current')
if mibBuilder.loadTexts: nncSdslNearEndRawLowNM.setDescription('Count of the number of Low Noise Margin failures since system reset.')
nncSdslNearEndRawLPR = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 64, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncSdslNearEndRawLPR.setStatus('current')
if mibBuilder.loadTexts: nncSdslNearEndRawLPR.setDescription('Count of the number of Loss of Power failures since system reset.')
nncSdslNearEndRawLOCD = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 64, 1, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncSdslNearEndRawLOCD.setStatus('current')
if mibBuilder.loadTexts: nncSdslNearEndRawLOCD.setDescription('Count of the number of Loss of Cell Delineation failures since system reset.')
nncSdslNearEndRawCRCError = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 64, 1, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncSdslNearEndRawCRCError.setStatus('current')
if mibBuilder.loadTexts: nncSdslNearEndRawCRCError.setDescription('Count of the number of CRC Errors since system reset.')
nncSdslNearEndCurr15MinTable = MibTable((1, 3, 6, 1, 4, 1, 123, 3, 64, 1, 3), )
if mibBuilder.loadTexts: nncSdslNearEndCurr15MinTable.setStatus('current')
if mibBuilder.loadTexts: nncSdslNearEndCurr15MinTable.setDescription('Table that contains the Near End 15 minutes current Stats of all SDSL Ports.')
nncSdslNearEndCurr15MinEntry = MibTableRow((1, 3, 6, 1, 4, 1, 123, 3, 64, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: nncSdslNearEndCurr15MinEntry.setStatus('current')
if mibBuilder.loadTexts: nncSdslNearEndCurr15MinEntry.setDescription('The Near End 15 minutes current Stats of an SDSL Port.')
nncSdslNearEndCurr15MinTimeElapsed = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 64, 1, 3, 1, 1), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 900))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: nncSdslNearEndCurr15MinTimeElapsed.setStatus('current')
if mibBuilder.loadTexts: nncSdslNearEndCurr15MinTimeElapsed.setDescription('Total elapsed seconds in this interval. A full interval is 900 seconds.')
nncSdslNearEndCurr15MinLOSS = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 64, 1, 3, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncSdslNearEndCurr15MinLOSS.setStatus('current')
if mibBuilder.loadTexts: nncSdslNearEndCurr15MinLOSS.setDescription('Count of the number of seconds in Loss of Signal status not due to a Loss of Power in the current 15 minutes interval.')
nncSdslNearEndCurr15MinLOSWS = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 64, 1, 3, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncSdslNearEndCurr15MinLOSWS.setStatus('current')
if mibBuilder.loadTexts: nncSdslNearEndCurr15MinLOSWS.setDescription('Count of the number of seconds in Loss of Synch Word status not followed by a Loss of Signal in the current 15 minutes interval.')
nncSdslNearEndCurr15MinLowNMS = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 64, 1, 3, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncSdslNearEndCurr15MinLowNMS.setStatus('current')
if mibBuilder.loadTexts: nncSdslNearEndCurr15MinLowNMS.setDescription('Count of the number of seconds in Low Noise Margin status in the current 15 minutes interval.')
nncSdslNearEndCurr15MinLPRS = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 64, 1, 3, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncSdslNearEndCurr15MinLPRS.setStatus('current')
if mibBuilder.loadTexts: nncSdslNearEndCurr15MinLPRS.setDescription('Count of the number of seconds in Loss of Power status in the current 15 minutes interval.')
nncSdslNearEndCurr15MinErrS = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 64, 1, 3, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncSdslNearEndCurr15MinErrS.setStatus('current')
if mibBuilder.loadTexts: nncSdslNearEndCurr15MinErrS.setDescription('Count of Errored Seconds in the current 15 minutes interval. The errored second parameter is a count of one-second intervals containing one or more of the anomolies or defects previously defined.')
nncSdslNearEndCurr1DayTable = MibTable((1, 3, 6, 1, 4, 1, 123, 3, 64, 1, 4), )
if mibBuilder.loadTexts: nncSdslNearEndCurr1DayTable.setStatus('current')
if mibBuilder.loadTexts: nncSdslNearEndCurr1DayTable.setDescription('Table that contains the Near End 1 Day current Stats of all SDSL Ports.')
nncSdslNearEndCurr1DayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 123, 3, 64, 1, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: nncSdslNearEndCurr1DayEntry.setStatus('current')
if mibBuilder.loadTexts: nncSdslNearEndCurr1DayEntry.setDescription('The Near End 1 Day current Stats of an SDSL Port.')
nncSdslNearEndCurr1DayTimeElapsed = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 64, 1, 4, 1, 1), Gauge32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: nncSdslNearEndCurr1DayTimeElapsed.setStatus('current')
if mibBuilder.loadTexts: nncSdslNearEndCurr1DayTimeElapsed.setDescription('Number of seconds that have elapses since the beginning of the current 1 Day interval.')
nncSdslNearEndCurr1DayLOSS = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 64, 1, 4, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncSdslNearEndCurr1DayLOSS.setStatus('current')
if mibBuilder.loadTexts: nncSdslNearEndCurr1DayLOSS.setDescription('Count of the number of seconds in Loss of Signal status not due to a Loss of Power during the current day.')
nncSdslNearEndCurr1DayLOSWS = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 64, 1, 4, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncSdslNearEndCurr1DayLOSWS.setStatus('current')
if mibBuilder.loadTexts: nncSdslNearEndCurr1DayLOSWS.setDescription('Count of the number of seconds in Loss of Synch Word status not followed by a Loss of Signal during the current day.')
nncSdslNearEndCurr1DayLowNMS = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 64, 1, 4, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncSdslNearEndCurr1DayLowNMS.setStatus('current')
if mibBuilder.loadTexts: nncSdslNearEndCurr1DayLowNMS.setDescription('Count of the number of seconds in Low Noise Margin status during the current day.')
nncSdslNearEndCurr1DayLPRS = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 64, 1, 4, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncSdslNearEndCurr1DayLPRS.setStatus('current')
if mibBuilder.loadTexts: nncSdslNearEndCurr1DayLPRS.setDescription('Count of the number of seconds in Loss of Power status during the current day.')
nncSdslNearEndCurr1DayErrS = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 64, 1, 4, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncSdslNearEndCurr1DayErrS.setStatus('current')
if mibBuilder.loadTexts: nncSdslNearEndCurr1DayErrS.setDescription('Count of Errored Seconds during the current day. The errored second parameter is a count of one-second intervals containing one or more of the anomolies or defects previously defined.')
nncSdslNearEndPrev1DayTable = MibTable((1, 3, 6, 1, 4, 1, 123, 3, 64, 1, 5), )
if mibBuilder.loadTexts: nncSdslNearEndPrev1DayTable.setStatus('current')
if mibBuilder.loadTexts: nncSdslNearEndPrev1DayTable.setDescription('Table that contains the Near End 1 DAY PREVIOUS Stats of all SDSL Ports.')
nncSdslNearEndPrev1DayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 123, 3, 64, 1, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: nncSdslNearEndPrev1DayEntry.setStatus('current')
if mibBuilder.loadTexts: nncSdslNearEndPrev1DayEntry.setDescription('The Near End 1 Day PREVIOUS Stats of an SDSL Port.')
nncSdslNearEndPrev1DayMoniSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 64, 1, 5, 1, 1), Gauge32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: nncSdslNearEndPrev1DayMoniSecs.setStatus('current')
if mibBuilder.loadTexts: nncSdslNearEndPrev1DayMoniSecs.setDescription('The time in the PREVIOUS 1-day interval over which the performance monitoring information is actually counted. This value will normally be the same as the total interval duration except in a situation where performance monitoring information can not be collected for any reason. Typically Elapsed 1-day Time will be copied into Monitored Seconds when the 1-day roll-over occurs.')
nncSdslNearEndPrev1DayLOSS = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 64, 1, 5, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncSdslNearEndPrev1DayLOSS.setStatus('current')
if mibBuilder.loadTexts: nncSdslNearEndPrev1DayLOSS.setDescription('Count of the number of seconds in Loss of Signal status not due to a Loss of Power within the most recent PREVIOUS 1 day period.')
nncSdslNearEndPrev1DayLOSWS = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 64, 1, 5, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncSdslNearEndPrev1DayLOSWS.setStatus('current')
if mibBuilder.loadTexts: nncSdslNearEndPrev1DayLOSWS.setDescription('Count of the number of seconds in Loss of Synch Word status not followed by a Loss of Signal within the most recent PREVIOUS 1 day period.')
nncSdslNearEndPrev1DayLowNMS = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 64, 1, 5, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncSdslNearEndPrev1DayLowNMS.setStatus('current')
if mibBuilder.loadTexts: nncSdslNearEndPrev1DayLowNMS.setDescription('Count of the number of seconds in Low Noise Margin status within the most recent PREVIOUS 1 day period.')
nncSdslNearEndPrev1DayLPRS = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 64, 1, 5, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncSdslNearEndPrev1DayLPRS.setStatus('current')
if mibBuilder.loadTexts: nncSdslNearEndPrev1DayLPRS.setDescription('Count of the number of seconds in Loss of Power status within the most recent PREVIOUS 1 day period.')
nncSdslNearEndPrev1DayErrS = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 64, 1, 5, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncSdslNearEndPrev1DayErrS.setStatus('current')
if mibBuilder.loadTexts: nncSdslNearEndPrev1DayErrS.setDescription('Count of Errored Seconds within the most recent PREVIOUS 1 day period. The errored second parameter is a count of one-second intervals containing one or more of the anomolies or defects previously defined.')
nncSdslNearEndPrev1DayValidData = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 64, 1, 5, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncSdslNearEndPrev1DayValidData.setStatus('current')
if mibBuilder.loadTexts: nncSdslNearEndPrev1DayValidData.setDescription('This variable indicates if there is valid data for this interval.')
nncSdslFarEndAllTable = MibTable((1, 3, 6, 1, 4, 1, 123, 3, 64, 1, 6), )
if mibBuilder.loadTexts: nncSdslFarEndAllTable.setStatus('current')
if mibBuilder.loadTexts: nncSdslFarEndAllTable.setDescription('Table that contains ALL the Far End Stats of all SDSL Ports.')
nncSdslFarEndAllEntry = MibTableRow((1, 3, 6, 1, 4, 1, 123, 3, 64, 1, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: nncSdslFarEndAllEntry.setStatus('current')
if mibBuilder.loadTexts: nncSdslFarEndAllEntry.setDescription('ALL the Far End Stats of an SDSL Port.')
nncSdslFarEndRawLOCD = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 64, 1, 6, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncSdslFarEndRawLOCD.setStatus('current')
if mibBuilder.loadTexts: nncSdslFarEndRawLOCD.setDescription('Count of the number of Loss of Cell Delineation failures since system reset.')
nncSdslFarEndCurr15MinTimeElapsed = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 64, 1, 6, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 900))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: nncSdslFarEndCurr15MinTimeElapsed.setStatus('current')
if mibBuilder.loadTexts: nncSdslFarEndCurr15MinTimeElapsed.setDescription('Total elapsed seconds in this interval. A full interval is 900 seconds.')
nncSdslFarEndCurr15MinErrS = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 64, 1, 6, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncSdslFarEndCurr15MinErrS.setStatus('current')
if mibBuilder.loadTexts: nncSdslFarEndCurr15MinErrS.setDescription('Count of Errored Seconds in the current 15 minutes interval. The errored second parameter is a count of one-second intervals containing one or more of the anomolies or defects previously defined.')
nncSdslFarEndCurr1DayTimeElapsed = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 64, 1, 6, 1, 4), Gauge32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: nncSdslFarEndCurr1DayTimeElapsed.setStatus('current')
if mibBuilder.loadTexts: nncSdslFarEndCurr1DayTimeElapsed.setDescription('Number of seconds that have elapses since the beginning of the current 1 Day interval.')
nncSdslFarEndCurr1DayErrS = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 64, 1, 6, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncSdslFarEndCurr1DayErrS.setStatus('current')
if mibBuilder.loadTexts: nncSdslFarEndCurr1DayErrS.setDescription('Count of Errored Seconds in the current 15 minutes interval. The errored second parameter is a count of one-second intervals containing one or more of the anomolies or defects previously defined.')
nncSdslFarEndPrev1DayMoniSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 64, 1, 6, 1, 6), Gauge32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: nncSdslFarEndPrev1DayMoniSecs.setStatus('current')
if mibBuilder.loadTexts: nncSdslFarEndPrev1DayMoniSecs.setDescription('The time in the PREVIOUS 1-day interval over which the performance monitoring information is actually counted. This value will normally be the same as the total interval duration except in a situation where performance monitoring information can not be collected for any reason. Typically Elapsed 1-day Time will be copied into Monitored Seconds when the 1-day roll-over occurs.')
nncSdslFarEndPrev1DayErrS = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 64, 1, 6, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncSdslFarEndPrev1DayErrS.setStatus('current')
if mibBuilder.loadTexts: nncSdslFarEndPrev1DayErrS.setDescription('Count of Errored Seconds within the most recent PREVIOUS 1 day period. The errored second parameter is a count of one-second intervals containing one or more of the anomolies or defects previously defined.')
nncSdslFarEndPrev1DayValidData = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 64, 1, 6, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncSdslFarEndPrev1DayValidData.setStatus('current')
if mibBuilder.loadTexts: nncSdslFarEndPrev1DayValidData.setDescription('This variable indicates if there is valid data for this interval.')
nncSdslNearEndIntTable = MibTable((1, 3, 6, 1, 4, 1, 123, 3, 64, 1, 7), )
if mibBuilder.loadTexts: nncSdslNearEndIntTable.setStatus('current')
if mibBuilder.loadTexts: nncSdslNearEndIntTable.setDescription('Table that contains the Near End 15 Minutes Intervals Stats of all SDSL Ports.')
nncSdslNearEndIntEntry = MibTableRow((1, 3, 6, 1, 4, 1, 123, 3, 64, 1, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "SDSL-STATS-MIB", "nncSdslNearEndIntNumber"))
if mibBuilder.loadTexts: nncSdslNearEndIntEntry.setStatus('current')
if mibBuilder.loadTexts: nncSdslNearEndIntEntry.setDescription('One interval of Near End Stats of an SDSL Port.')
nncSdslNearEndIntNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 64, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: nncSdslNearEndIntNumber.setStatus('current')
if mibBuilder.loadTexts: nncSdslNearEndIntNumber.setDescription('Performance Data Interval number. 1 is the the most recent interval; interval 96 is 24 hours ago. Interval 2..96 are optional.')
nncSdslNearEndIntLOSS = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 64, 1, 7, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncSdslNearEndIntLOSS.setStatus('current')
if mibBuilder.loadTexts: nncSdslNearEndIntLOSS.setDescription('Count of seconds in the interval when there was Loss of Signal not due to a Loss of Power.')
nncSdslNearEndIntLOSWS = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 64, 1, 7, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncSdslNearEndIntLOSWS.setStatus('current')
if mibBuilder.loadTexts: nncSdslNearEndIntLOSWS.setDescription('Count of seconds in the interval when there was Loss of Signal not folloew by Loss of Signal.')
nncSdslNearEndIntLowNMS = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 64, 1, 7, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncSdslNearEndIntLowNMS.setStatus('current')
if mibBuilder.loadTexts: nncSdslNearEndIntLowNMS.setDescription('Count of seconds in the interval when there was Low Noise Margin.')
nncSdslNearEndIntLPRS = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 64, 1, 7, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncSdslNearEndIntLPRS.setStatus('current')
if mibBuilder.loadTexts: nncSdslNearEndIntLPRS.setDescription('Count of seconds in the interval when there was Loss of Power.')
nncSdslNearEndIntErrS = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 64, 1, 7, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncSdslNearEndIntErrS.setStatus('current')
if mibBuilder.loadTexts: nncSdslNearEndIntErrS.setDescription('Count of Errored Seconds in the interval. The errored second parameter is a count of one-second intervals containing one or more of the anomolies or defects previously defined.')
nncSdslNearEndIntValidData = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 64, 1, 7, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncSdslNearEndIntValidData.setStatus('current')
if mibBuilder.loadTexts: nncSdslNearEndIntValidData.setDescription('This variable indicates if there is valid data for this interval.')
nncSdslFarEndIntTable = MibTable((1, 3, 6, 1, 4, 1, 123, 3, 64, 1, 8), )
if mibBuilder.loadTexts: nncSdslFarEndIntTable.setStatus('current')
if mibBuilder.loadTexts: nncSdslFarEndIntTable.setDescription('Table that contains the Far End 15 Minutes Intervals Stats of all SDSL Ports.')
nncSdslFarEndIntEntry = MibTableRow((1, 3, 6, 1, 4, 1, 123, 3, 64, 1, 8, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "SDSL-STATS-MIB", "nncSdslFarEndIntNumber"))
if mibBuilder.loadTexts: nncSdslFarEndIntEntry.setStatus('current')
if mibBuilder.loadTexts: nncSdslFarEndIntEntry.setDescription('One interval of Far End Stats of an SDSL Port.')
nncSdslFarEndIntNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 64, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: nncSdslFarEndIntNumber.setStatus('current')
if mibBuilder.loadTexts: nncSdslFarEndIntNumber.setDescription('Performance Data Interval number. 1 is the the most recent interval; interval 96 is 24 hours ago. Interval 2..96 are optional.')
nncSdslFarEndIntErrS = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 64, 1, 8, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncSdslFarEndIntErrS.setStatus('current')
if mibBuilder.loadTexts: nncSdslFarEndIntErrS.setDescription('Count of Errored Seconds in the interval. The errored second parameter is a count of one-second intervals containing one or more of the anomolies or defects previously defined.')
nncSdslFarEndIntValidData = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 64, 1, 8, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncSdslFarEndIntValidData.setStatus('current')
if mibBuilder.loadTexts: nncSdslFarEndIntValidData.setDescription('This variable indicates if there is valid data for this interval.')
mibBuilder.exportSymbols("SDSL-STATS-MIB", nncSdslNearEndCurr1DayLPRS=nncSdslNearEndCurr1DayLPRS, nncSdslFarEndIntErrS=nncSdslFarEndIntErrS, nncSdslLineStatusEntry=nncSdslLineStatusEntry, nncSdslNearEndCurr15MinErrS=nncSdslNearEndCurr15MinErrS, nncSdslLineStatusTable=nncSdslLineStatusTable, nncSdslFarEndCurr15MinErrS=nncSdslFarEndCurr15MinErrS, nncSdslNearEndRawLOS=nncSdslNearEndRawLOS, nncSdslNearEndPrev1DayLPRS=nncSdslNearEndPrev1DayLPRS, nncSdslNearEndRawCRCError=nncSdslNearEndRawCRCError, nncSdslNearEndPrev1DayErrS=nncSdslNearEndPrev1DayErrS, nncSdslLineStatus=nncSdslLineStatus, nncSdslNearEndPrev1DayLOSWS=nncSdslNearEndPrev1DayLOSWS, nncSdslFarEndRawLOCD=nncSdslFarEndRawLOCD, nncSdslNearEndCurr1DayEntry=nncSdslNearEndCurr1DayEntry, nncSdslNearEndCurr15MinLOSS=nncSdslNearEndCurr15MinLOSS, nncSdslFarEndCurr1DayTimeElapsed=nncSdslFarEndCurr1DayTimeElapsed, nncSdslNearEndPrev1DayLOSS=nncSdslNearEndPrev1DayLOSS, nncSdslFarEndCurr1DayErrS=nncSdslFarEndCurr1DayErrS, nncSdslStatisticsObjects=nncSdslStatisticsObjects, nncSdslNearEndIntEntry=nncSdslNearEndIntEntry, nncSdslNearEndPrev1DayEntry=nncSdslNearEndPrev1DayEntry, nncSdslNearEndPrev1DayLowNMS=nncSdslNearEndPrev1DayLowNMS, nncSdslNearEndCurr15MinLPRS=nncSdslNearEndCurr15MinLPRS, nncSdslFarEndPrev1DayErrS=nncSdslFarEndPrev1DayErrS, nncSdslNearEndCurr1DayLOSWS=nncSdslNearEndCurr1DayLOSWS, nncSdslStatistics=nncSdslStatistics, nncSdslNearEndCurr1DayLOSS=nncSdslNearEndCurr1DayLOSS, nncSdslNearEndPrev1DayValidData=nncSdslNearEndPrev1DayValidData, nncSdslNearEndIntNumber=nncSdslNearEndIntNumber, nncSdslNearEndIntLOSS=nncSdslNearEndIntLOSS, nncSdslNearEndPrev1DayMoniSecs=nncSdslNearEndPrev1DayMoniSecs, nncSdslNearEndIntLPRS=nncSdslNearEndIntLPRS, nncSdslNearEndCurr15MinLOSWS=nncSdslNearEndCurr15MinLOSWS, nncSdslNearEndRawLowNM=nncSdslNearEndRawLowNM, nncSdslNearEndCurr15MinEntry=nncSdslNearEndCurr15MinEntry, nncSdslNearEndIntTable=nncSdslNearEndIntTable, nncSdslFarEndPrev1DayValidData=nncSdslFarEndPrev1DayValidData, nncSdslFarEndAllTable=nncSdslFarEndAllTable, nncSdslFarEndIntTable=nncSdslFarEndIntTable, nncSdslFarEndIntEntry=nncSdslFarEndIntEntry, nncSdslNearEndRawTable=nncSdslNearEndRawTable, nncSdslNearEndIntValidData=nncSdslNearEndIntValidData, nncSdslNearEndPrev1DayTable=nncSdslNearEndPrev1DayTable, nncSdslFarEndIntValidData=nncSdslFarEndIntValidData, PYSNMP_MODULE_ID=nncSdslStatistics, nncSdslNearEndCurr1DayErrS=nncSdslNearEndCurr1DayErrS, nncSdslNearEndIntErrS=nncSdslNearEndIntErrS, nncSdslNearEndCurr15MinTable=nncSdslNearEndCurr15MinTable, nncSdslNearEndRawLOCD=nncSdslNearEndRawLOCD, nncSdslNearEndCurr15MinLowNMS=nncSdslNearEndCurr15MinLowNMS, nncSdslNearEndCurr1DayTable=nncSdslNearEndCurr1DayTable, nncSdslFarEndIntNumber=nncSdslFarEndIntNumber, nncSdslNearEndRawLPR=nncSdslNearEndRawLPR, nncSdslNearEndCurr1DayTimeElapsed=nncSdslNearEndCurr1DayTimeElapsed, nncSdslNearEndCurr1DayLowNMS=nncSdslNearEndCurr1DayLowNMS, nncSdslNearEndCurr15MinTimeElapsed=nncSdslNearEndCurr15MinTimeElapsed, nncSdslNearEndRawEntry=nncSdslNearEndRawEntry, nncSdslFarEndCurr15MinTimeElapsed=nncSdslFarEndCurr15MinTimeElapsed, nncSdslFarEndPrev1DayMoniSecs=nncSdslFarEndPrev1DayMoniSecs, nncSdslNearEndIntLOSWS=nncSdslNearEndIntLOSWS, nncSdslNearEndIntLowNMS=nncSdslNearEndIntLowNMS, nncSdslFarEndAllEntry=nncSdslFarEndAllEntry)
