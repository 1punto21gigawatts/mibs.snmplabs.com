#
# PySNMP MIB module HH3C-VSAN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HH3C-VSAN-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:26:54 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint")
Hh3cFcNameIdOrZero, Hh3cFcDmState, Hh3cFcDomainIdList, Hh3cFcNameId, Hh3cFcDomainIdOrZero, Hh3cFcDomainId, Hh3cFcDomainPriority, Hh3cFcVsanIndex = mibBuilder.importSymbols("HH3C-FC-TC-MIB", "Hh3cFcNameIdOrZero", "Hh3cFcDmState", "Hh3cFcDomainIdList", "Hh3cFcNameId", "Hh3cFcDomainIdOrZero", "Hh3cFcDomainId", "Hh3cFcDomainPriority", "Hh3cFcVsanIndex")
hh3cCommon, = mibBuilder.importSymbols("HH3C-OID-MIB", "hh3cCommon")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter32, Gauge32, Integer32, Counter64, IpAddress, TimeTicks, iso, ModuleIdentity, Unsigned32, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Bits, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Gauge32", "Integer32", "Counter64", "IpAddress", "TimeTicks", "iso", "ModuleIdentity", "Unsigned32", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Bits", "MibIdentifier")
DisplayString, TextualConvention, RowStatus, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "RowStatus", "TruthValue")
hh3cSan = ModuleIdentity((1, 3, 6, 1, 4, 1, 25506, 2, 127))
hh3cSan.setRevisions(('2014-03-04 15:50', '2013-02-28 09:40',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hh3cSan.setRevisionsDescriptions(('Added hh3cVsanDmDomainIdChangeNotify and hh3cVsanDmDomainIdChangeNotifyEnable.', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: hh3cSan.setLastUpdated('201403041550Z')
if mibBuilder.loadTexts: hh3cSan.setOrganization('Hangzhou H3C Tech. Co., Ltd.')
if mibBuilder.loadTexts: hh3cSan.setContactInfo('Platform Team Hangzhou H3C Tech. Co., Ltd. Hai-Dian District Beijing P.R. China http://www.h3c.com Zip:100085 ')
if mibBuilder.loadTexts: hh3cSan.setDescription('This MIB module is for configuring and monitoring VSAN and domain management related entities.')
hh3cVsan = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 127, 1))
hh3cVsanMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 127, 1, 1))
hh3cVsanDmConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 127, 1, 1, 1))
hh3cVsanTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 127, 1, 1, 1, 1), )
if mibBuilder.loadTexts: hh3cVsanTable.setStatus('current')
if mibBuilder.loadTexts: hh3cVsanTable.setDescription('A table contains all the VSANs configured on the device. It can be used to manage and monitor the VSANs on local device.')
hh3cVsanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 127, 1, 1, 1, 1, 1), ).setIndexNames((0, "HH3C-VSAN-MIB", "hh3cVsanIndex"))
if mibBuilder.loadTexts: hh3cVsanEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cVsanEntry.setDescription('An entry that contains information about a VSAN in the hh3cVsanTable.')
hh3cVsanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 127, 1, 1, 1, 1, 1, 1), Hh3cFcVsanIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cVsanIndex.setStatus('current')
if mibBuilder.loadTexts: hh3cVsanIndex.setDescription('The identifier of the VSAN.')
hh3cVsanCoreSwitchName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 127, 1, 1, 1, 1, 1, 2), Hh3cFcNameIdOrZero().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(8, 8), ValueSizeConstraint(16, 16), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cVsanCoreSwitchName.setStatus('current')
if mibBuilder.loadTexts: hh3cVsanCoreSwitchName.setDescription("The Core Switch_Name of the VSAN, which is indicated by the switch's WWN(World Wide Name).")
hh3cVsanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 127, 1, 1, 1, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cVsanRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cVsanRowStatus.setDescription('RowStatus. Now only three states are supported: createAndGo, active, and destroy.')
hh3cVsanDmTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 127, 1, 1, 1, 2), )
if mibBuilder.loadTexts: hh3cVsanDmTable.setStatus('current')
if mibBuilder.loadTexts: hh3cVsanDmTable.setDescription('A table contains domain management related configurations and information of VSANs. An entry in this table is created when corresponding VSAN is created, as well as deleted when the VSAN is deleted.')
hh3cVsanDmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 127, 1, 1, 1, 2, 1), ).setIndexNames((0, "HH3C-VSAN-MIB", "hh3cVsanIndex"))
if mibBuilder.loadTexts: hh3cVsanDmEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cVsanDmEntry.setDescription('An entry of domain management related configurations and information of a specified VSAN.')
hh3cVsanDmDomainConfigureEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 127, 1, 1, 1, 2, 1, 1), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cVsanDmDomainConfigureEnable.setStatus('current')
if mibBuilder.loadTexts: hh3cVsanDmDomainConfigureEnable.setDescription('To enable or disable the fabric configuration function in this VSAN. true: enabled, the fabric will be built dynamically. false: disabled, the fabric should be built statically by manual configurations.')
hh3cVsanDmFabricNameConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 127, 1, 1, 1, 2, 1, 2), Hh3cFcNameIdOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cVsanDmFabricNameConfigured.setStatus('current')
if mibBuilder.loadTexts: hh3cVsanDmFabricNameConfigured.setDescription("Specifies the fabric name in this VSAN, and will use a zero-length octet string as default value if not configured. The fabric name specified here takes effect only if the value of hh3cVsanDmDomainConfigureEnable is 'false', and the same fabric name should be configured for all switches in this VSAN. If the value of hh3cVsanDmDomainConfigureEnable is 'true', the principal switch WWN is used as fabric name. The value should be set to zero-length when canceling a configured fabric name.")
hh3cVsanDmPriorityConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 127, 1, 1, 1, 2, 1, 3), Hh3cFcDomainPriority().clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cVsanDmPriorityConfigured.setStatus('current')
if mibBuilder.loadTexts: hh3cVsanDmPriorityConfigured.setDescription('Specifies the priority of a switch in this VSAN, which is used during principal switch selection to cause one Switch to be favored over another.')
hh3cVsanDmAllowedDomainIdList = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 127, 1, 1, 1, 2, 1, 4), Hh3cFcDomainIdList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cVsanDmAllowedDomainIdList.setStatus('current')
if mibBuilder.loadTexts: hh3cVsanDmAllowedDomainIdList.setDescription('Specifies the list of domain IDs that are allowed in the VSAN, and the configuration has different meanings in different scenarios: 1. Principal switch: Can only assign domains IDs within the allowed domain ID list. If the allowed domain ID list configured does not include any of the already assigned domain IDs or manually configured domain IDs, the configuration will fail. 2. Non-principal switch: The manually configured domain ID must be within the allowed domain ID list, or the configuration will fail. Besides, the domain ID assigned by principal switch must within the allowed domain ID list, or the switch will refuse the assigned domain ID and isolate the upstream interface. If the runtime domain ID for a switch is beyond the new configured ID list, the configuration will fail. The default value is a zero-length octet string. If This value is set with zero-length, the configuration will be cancelled in this VSAN.')
hh3cVsanDmDomainIdConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 127, 1, 1, 1, 2, 1, 5), Hh3cFcDomainIdOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cVsanDmDomainIdConfigured.setStatus('current')
if mibBuilder.loadTexts: hh3cVsanDmDomainIdConfigured.setDescription('Used to configure or cancel a domain ID for a switch in this VSAN. When this value is not zero, the domain ID type should be specified together via hh3cVsanDmDomainIdTypeConfigured, or the default value of preferred type will be taken. The zero value is used to cancel the domain ID configured, and then, there is no need to specify its type. When statically build a fabric, the configured domain ID is the actual domain ID of the switch. If this object is not manually configured, the switch will isolate all of its E_ports in this VSAN no matter what domain ID type is configured. When dynamically build a fabric, the configured domain ID is desired by the switch, but the domain ID assigned to the switch may not be the desired one. If a non-principal switch fails to obtain any domain ID from the principal switch, the non-principal switch will isolate the upstream link. If a non-principal switch obtains a domain ID from the principal switch other than the desired one, different actions will be taken according to different domain ID type configured: - If configured static type, The non-principal switch will isolate the upstream link and refuse other domain IDs assigned by the principal switch. - If configured preferred type, the non-principal switch will use the domain ID assigned by the principal switch.')
hh3cVsanDmDomainIdTypeConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 127, 1, 1, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("preferred", 2))).clone('preferred')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cVsanDmDomainIdTypeConfigured.setStatus('current')
if mibBuilder.loadTexts: hh3cVsanDmDomainIdTypeConfigured.setDescription('Specifies the type of configured domain ID, which can be static type or preferred type.')
hh3cVsanDmAutoReconfigureEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 127, 1, 1, 1, 2, 1, 7), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cVsanDmAutoReconfigureEnable.setStatus('current')
if mibBuilder.loadTexts: hh3cVsanDmAutoReconfigureEnable.setDescription("Used to specify whether a disruptive reconfiguration will be automatically performed when the domain ID lists overlaps in fabric merging. The fabric reconfiguration function takes effect only when the value of hh3cVsanDmDomainConfigureEnable is 'true'.")
hh3cVsanDmDomainRestart = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 127, 1, 1, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noOperation", 1), ("nonDisruptive", 2), ("disruptive", 3))).clone('noOperation')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cVsanDmDomainRestart.setStatus('current')
if mibBuilder.loadTexts: hh3cVsanDmDomainRestart.setDescription('Used to manually trigger a disruptive or non-disruptive reconfiguration of the fabric.')
hh3cVsanDmState = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 127, 1, 1, 1, 2, 1, 9), Hh3cFcDmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cVsanDmState.setStatus('current')
if mibBuilder.loadTexts: hh3cVsanDmState.setDescription('Indicates the managing state of the domain in this VSAN.')
hh3cVsanDmDomainIdAssigned = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 127, 1, 1, 1, 2, 1, 10), Hh3cFcDomainIdOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cVsanDmDomainIdAssigned.setStatus('current')
if mibBuilder.loadTexts: hh3cVsanDmDomainIdAssigned.setDescription('Indicates the Domain ID of the local switch in this VSAN or zero if no Domain ID has been assigned.')
hh3cVsanDmPrincipalSwitchWWN = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 127, 1, 1, 1, 2, 1, 11), Hh3cFcNameId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cVsanDmPrincipalSwitchWWN.setStatus('current')
if mibBuilder.loadTexts: hh3cVsanDmPrincipalSwitchWWN.setDescription('Indicates the WWN of the principal switch in this VSAN, or zero-length string if the identity of the principal switch is unknown.')
hh3cVsanDmLocalSwitchWWN = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 127, 1, 1, 1, 2, 1, 12), Hh3cFcNameId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cVsanDmLocalSwitchWWN.setStatus('current')
if mibBuilder.loadTexts: hh3cVsanDmLocalSwitchWWN.setDescription('Indicates the WWN of the local switch in this VSAN.')
hh3cVsanDmPrincipalSwRunPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 127, 1, 1, 1, 2, 1, 13), Hh3cFcDomainPriority()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cVsanDmPrincipalSwRunPriority.setStatus('current')
if mibBuilder.loadTexts: hh3cVsanDmPrincipalSwRunPriority.setDescription('Indicates the running priority of the principal switch in this VSAN.')
hh3cVsanDmLocalSwRunPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 127, 1, 1, 1, 2, 1, 14), Hh3cFcDomainPriority()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cVsanDmLocalSwRunPriority.setStatus('current')
if mibBuilder.loadTexts: hh3cVsanDmLocalSwRunPriority.setDescription('Indicates the running priority of the local switch in this VSAN.')
hh3cVsanDmPrincipalSwSlctCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 127, 1, 1, 1, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cVsanDmPrincipalSwSlctCnt.setStatus('current')
if mibBuilder.loadTexts: hh3cVsanDmPrincipalSwSlctCnt.setDescription('The times that local switch has participated in principal switch selection in this VSAN.')
hh3cVsanDmLocalPrincipalSwSlctCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 127, 1, 1, 1, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cVsanDmLocalPrincipalSwSlctCnt.setStatus('current')
if mibBuilder.loadTexts: hh3cVsanDmLocalPrincipalSwSlctCnt.setDescription('The times that local switch was elected as principal switch in this VSAN.')
hh3cVsanDmBFCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 127, 1, 1, 1, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cVsanDmBFCnt.setStatus('current')
if mibBuilder.loadTexts: hh3cVsanDmBFCnt.setDescription('The times that local switch has participated in a BF(Build Fabric) process in this VSAN.')
hh3cVsanDmRCFCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 127, 1, 1, 1, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cVsanDmRCFCnt.setStatus('current')
if mibBuilder.loadTexts: hh3cVsanDmRCFCnt.setDescription('The times that local switch has participated in a RCF (Reconfigure Fabric) process in this VSAN.')
hh3cVsanDmIfConfigTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 127, 1, 1, 1, 3), )
if mibBuilder.loadTexts: hh3cVsanDmIfConfigTable.setStatus('current')
if mibBuilder.loadTexts: hh3cVsanDmIfConfigTable.setDescription('A table contains the FC(Fibre Channel) related interface configurations about domain management of a VSAN.')
hh3cVsanDmIfConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 127, 1, 1, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HH3C-VSAN-MIB", "hh3cVsanIndex"))
if mibBuilder.loadTexts: hh3cVsanDmIfConfigEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cVsanDmIfConfigEntry.setDescription('An entry used for managing the FC related interface configurations about domain management of a VSAN. An entry can be created when any object in this table is set to non-default value, and be deleted when the objects in this table are set to default value.')
hh3cVsanDmIfConfigRcfReject = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 127, 1, 1, 1, 3, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cVsanDmIfConfigRcfReject.setStatus('current')
if mibBuilder.loadTexts: hh3cVsanDmIfConfigRcfReject.setDescription('Used to specify whether the RCF(Reconfigure Fabric) requests received in this VSAN should be rejected. - true: the received RCF will be rejected. - false: the received RCF will be accepted.')
hh3cVsanDmInformation = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 127, 1, 1, 2))
hh3cVsanDmDatabaseTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 127, 1, 1, 2, 1), )
if mibBuilder.loadTexts: hh3cVsanDmDatabaseTable.setStatus('current')
if mibBuilder.loadTexts: hh3cVsanDmDatabaseTable.setDescription('A table specifies the information of the switch about all the Domain IDs which have been assigned in each of the VSANs.')
hh3cVsanDmDatabaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 127, 1, 1, 2, 1, 1), ).setIndexNames((0, "HH3C-VSAN-MIB", "hh3cVsanIndex"), (0, "HH3C-VSAN-MIB", "hh3cVsanDmDatabaseDomainId"))
if mibBuilder.loadTexts: hh3cVsanDmDatabaseEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cVsanDmDatabaseEntry.setDescription('An object in the hh3cVsanDmDatabaseTable contains one Domain ID and the corresponding WWN of the switch in one VSAN.')
hh3cVsanDmDatabaseDomainId = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 127, 1, 1, 2, 1, 1, 1), Hh3cFcDomainId())
if mibBuilder.loadTexts: hh3cVsanDmDatabaseDomainId.setStatus('current')
if mibBuilder.loadTexts: hh3cVsanDmDatabaseDomainId.setDescription('The Domain ID which has been assigned.')
hh3cVsanDmDatabaseSwitchWWN = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 127, 1, 1, 2, 1, 1, 2), Hh3cFcNameId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cVsanDmDatabaseSwitchWWN.setStatus('current')
if mibBuilder.loadTexts: hh3cVsanDmDatabaseSwitchWWN.setDescription('The WWN of the switch to which the corresponding Domain ID has been assigned in the particular VSAN.')
hh3cVsanDmIfInfoTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 127, 1, 1, 2, 2), )
if mibBuilder.loadTexts: hh3cVsanDmIfInfoTable.setStatus('current')
if mibBuilder.loadTexts: hh3cVsanDmIfInfoTable.setDescription('A table specifies the information of an interface in each of the VSANs.')
hh3cVsanDmIfInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 127, 1, 1, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HH3C-VSAN-MIB", "hh3cVsanIndex"))
if mibBuilder.loadTexts: hh3cVsanDmIfInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cVsanDmIfInfoEntry.setDescription('A conceptual row in the hh3cVsanDmIfInfoTable indicates the role information of the interface in the particular VSAN.')
hh3cVsanDmIfInfoRole = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 127, 1, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("nonPrincipal", 1), ("principalUpstream", 2), ("principalDownstream", 3), ("isolated", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cVsanDmIfInfoRole.setStatus('current')
if mibBuilder.loadTexts: hh3cVsanDmIfInfoRole.setDescription('The role of the interface in the VSAN. The value specifications are listed as follows: nonPrincipal - The state of the interface is not principal interface in the VSAN. principalUpstream - The state of the interface is upstream principal interface in the VSAN. principalDownstream - The state of the interface is downstream principal interface in the VSAN. isolated - The state of the interface is isolated in the VSAN. unknown - The state of the interface is unknown in the VSAN.')
hh3cVsanDmNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 127, 1, 1, 3))
hh3cVsanDmNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 127, 1, 1, 3, 0))
hh3cVsanDmDomainIdNotAssignedNotify = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 127, 1, 1, 3, 0, 1)).setObjects(("HH3C-VSAN-MIB", "hh3cVsanIndex"), ("HH3C-VSAN-MIB", "hh3cVsanDmLocalSwitchWWN"))
if mibBuilder.loadTexts: hh3cVsanDmDomainIdNotAssignedNotify.setStatus('current')
if mibBuilder.loadTexts: hh3cVsanDmDomainIdNotAssignedNotify.setDescription('This event will be triggered if a Domain ID is not assigned or configured, then the E_ports may be isolated in the VSAN. The conditions are listed as follows: 1. If the switch has enabled the fabric configuration and a request for a configured static Domain ID is rejected or no other Domain ID is assigned, the E_ports will be isolated in the particular VSAN. 2. If the switch does not enable the fabric configuration and a Domain ID is not configured, all of its E_ports will be isolated in the particular VSAN. The notification contains the WWN of the Switch and the index of the VSAN in which the event occurred.')
hh3cVsanDmNewPrincipalSwitchNotify = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 127, 1, 1, 3, 0, 2)).setObjects(("HH3C-VSAN-MIB", "hh3cVsanIndex"), ("HH3C-VSAN-MIB", "hh3cVsanDmLocalSwitchWWN"))
if mibBuilder.loadTexts: hh3cVsanDmNewPrincipalSwitchNotify.setStatus('current')
if mibBuilder.loadTexts: hh3cVsanDmNewPrincipalSwitchNotify.setDescription('If a switch becomes the new Principal Switch in a VSAN, this notification is sent immediately after the election. The notification contains the WWN of the new Principal Switch and the index of the VSAN in which the transition occurred.')
hh3cVsanDmFabricChangeNotify = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 127, 1, 1, 3, 0, 3)).setObjects(("HH3C-VSAN-MIB", "hh3cVsanIndex"))
if mibBuilder.loadTexts: hh3cVsanDmFabricChangeNotify.setStatus('current')
if mibBuilder.loadTexts: hh3cVsanDmFabricChangeNotify.setDescription('This event will be triggered if a switch sends or receives a Build Fabric (BF) or a Reconfigure Fabric (RCF) message in a VSAN. The conditions a switch can receive or send a BF or a RCF are listed as follows: 1. Two isolated fabrics in a VSAN merge into one fabric. If the Domain ID lists do not overlap, the sent or received message is BF, other cases, it is RCF. 2. If an upstream principal link which connects to principal switch and other switches become disconnected, the sent or received message is BF. 3. A BF or RCF process is triggered manually by configuration. The notification contains the index of the VSAN in which a BF or a RCF was sent or received.')
hh3cVsanDmDomainIdChangeNotify = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 127, 1, 1, 3, 0, 4)).setObjects(("HH3C-VSAN-MIB", "hh3cVsanIndex"), ("HH3C-VSAN-MIB", "hh3cVsanDmDomainIdAssigned"), ("HH3C-VSAN-MIB", "hh3cVsanDmLocalSwitchWWN"))
if mibBuilder.loadTexts: hh3cVsanDmDomainIdChangeNotify.setStatus('current')
if mibBuilder.loadTexts: hh3cVsanDmDomainIdChangeNotify.setDescription('This event will be triggered if the Domain ID of the local switch changed in a VSAN.')
hh3cVsanDmNotificationSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 127, 1, 1, 3, 1))
hh3cVsanDmFabricChangeNotifyEnable = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 127, 1, 1, 3, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cVsanDmFabricChangeNotifyEnable.setStatus('current')
if mibBuilder.loadTexts: hh3cVsanDmFabricChangeNotifyEnable.setDescription('Specifies whether the hh3cVsanDmFabricChangeNotify can be sent when a BF or RCF message was sent or received by a switch.')
hh3cVsanDmDomainIdChangeNotifyEnable = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 127, 1, 1, 3, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cVsanDmDomainIdChangeNotifyEnable.setStatus('current')
if mibBuilder.loadTexts: hh3cVsanDmDomainIdChangeNotifyEnable.setDescription('Specifies whether the hh3cVsanDmDomainIdChangeNotify can be sent when the Domain ID of the local switch changed in a VSAN.')
mibBuilder.exportSymbols("HH3C-VSAN-MIB", hh3cVsanDmEntry=hh3cVsanDmEntry, hh3cVsanEntry=hh3cVsanEntry, hh3cVsanDmDomainConfigureEnable=hh3cVsanDmDomainConfigureEnable, hh3cVsanDmDatabaseDomainId=hh3cVsanDmDatabaseDomainId, hh3cVsanDmConfiguration=hh3cVsanDmConfiguration, hh3cVsanDmNotificationSwitch=hh3cVsanDmNotificationSwitch, hh3cVsanDmPriorityConfigured=hh3cVsanDmPriorityConfigured, hh3cVsanDmLocalPrincipalSwSlctCnt=hh3cVsanDmLocalPrincipalSwSlctCnt, hh3cVsanMibObjects=hh3cVsanMibObjects, hh3cVsan=hh3cVsan, hh3cVsanDmFabricChangeNotify=hh3cVsanDmFabricChangeNotify, hh3cVsanDmIfConfigRcfReject=hh3cVsanDmIfConfigRcfReject, hh3cVsanDmDatabaseEntry=hh3cVsanDmDatabaseEntry, hh3cVsanDmDatabaseSwitchWWN=hh3cVsanDmDatabaseSwitchWWN, hh3cVsanDmAutoReconfigureEnable=hh3cVsanDmAutoReconfigureEnable, hh3cVsanDmIfInfoEntry=hh3cVsanDmIfInfoEntry, hh3cVsanDmFabricChangeNotifyEnable=hh3cVsanDmFabricChangeNotifyEnable, hh3cVsanDmDomainIdTypeConfigured=hh3cVsanDmDomainIdTypeConfigured, hh3cVsanDmState=hh3cVsanDmState, hh3cVsanDmBFCnt=hh3cVsanDmBFCnt, hh3cVsanDmLocalSwitchWWN=hh3cVsanDmLocalSwitchWWN, hh3cVsanDmIfInfoRole=hh3cVsanDmIfInfoRole, hh3cVsanRowStatus=hh3cVsanRowStatus, hh3cVsanDmAllowedDomainIdList=hh3cVsanDmAllowedDomainIdList, hh3cSan=hh3cSan, hh3cVsanTable=hh3cVsanTable, hh3cVsanDmDomainIdAssigned=hh3cVsanDmDomainIdAssigned, hh3cVsanDmInformation=hh3cVsanDmInformation, hh3cVsanDmDomainIdNotAssignedNotify=hh3cVsanDmDomainIdNotAssignedNotify, hh3cVsanIndex=hh3cVsanIndex, hh3cVsanDmIfInfoTable=hh3cVsanDmIfInfoTable, PYSNMP_MODULE_ID=hh3cSan, hh3cVsanDmIfConfigEntry=hh3cVsanDmIfConfigEntry, hh3cVsanDmPrincipalSwSlctCnt=hh3cVsanDmPrincipalSwSlctCnt, hh3cVsanDmRCFCnt=hh3cVsanDmRCFCnt, hh3cVsanDmDomainIdConfigured=hh3cVsanDmDomainIdConfigured, hh3cVsanDmFabricNameConfigured=hh3cVsanDmFabricNameConfigured, hh3cVsanDmNotificationPrefix=hh3cVsanDmNotificationPrefix, hh3cVsanDmLocalSwRunPriority=hh3cVsanDmLocalSwRunPriority, hh3cVsanDmNotifications=hh3cVsanDmNotifications, hh3cVsanDmDomainRestart=hh3cVsanDmDomainRestart, hh3cVsanDmDatabaseTable=hh3cVsanDmDatabaseTable, hh3cVsanDmNewPrincipalSwitchNotify=hh3cVsanDmNewPrincipalSwitchNotify, hh3cVsanDmTable=hh3cVsanDmTable, hh3cVsanCoreSwitchName=hh3cVsanCoreSwitchName, hh3cVsanDmIfConfigTable=hh3cVsanDmIfConfigTable, hh3cVsanDmPrincipalSwRunPriority=hh3cVsanDmPrincipalSwRunPriority, hh3cVsanDmPrincipalSwitchWWN=hh3cVsanDmPrincipalSwitchWWN, hh3cVsanDmDomainIdChangeNotifyEnable=hh3cVsanDmDomainIdChangeNotifyEnable, hh3cVsanDmDomainIdChangeNotify=hh3cVsanDmDomainIdChangeNotify)
