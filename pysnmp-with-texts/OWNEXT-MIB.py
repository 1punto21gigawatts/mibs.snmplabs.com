#
# PySNMP MIB module OWNEXT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/OWNEXT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:35:47 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ownExt, = mibBuilder.importSymbols("APENT-MIB", "ownExt")
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Unsigned32, Bits, iso, Counter32, ObjectIdentity, TimeTicks, Gauge32, MibIdentifier, NotificationType, Integer32, ModuleIdentity, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Unsigned32", "Bits", "iso", "Counter32", "ObjectIdentity", "TimeTicks", "Gauge32", "MibIdentifier", "NotificationType", "Integer32", "ModuleIdentity", "IpAddress")
TextualConvention, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "DisplayString")
apOwnExtMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 2467, 1, 25, 1))
if mibBuilder.loadTexts: apOwnExtMib.setLastUpdated('9710092000Z')
if mibBuilder.loadTexts: apOwnExtMib.setOrganization('ArrowPoint Communications Inc.')
if mibBuilder.loadTexts: apOwnExtMib.setContactInfo(' Postal: ArrowPoint Communications Inc. 50 Nagog Park Acton, Massachusetts 01720 Tel: +1 978-206-3000 option 1 E-Mail: support@arrowpoint.com')
if mibBuilder.loadTexts: apOwnExtMib.setDescription('The MIB module used to describe the ArrowPoint Communications Web Host Owner information')
apOwnTable = MibTable((1, 3, 6, 1, 4, 1, 2467, 1, 25, 2), )
if mibBuilder.loadTexts: apOwnTable.setStatus('current')
if mibBuilder.loadTexts: apOwnTable.setDescription('A list of information for the specified owner.')
apOwnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2467, 1, 25, 2, 1), ).setIndexNames((0, "OWNEXT-MIB", "apOwnName"))
if mibBuilder.loadTexts: apOwnEntry.setStatus('current')
if mibBuilder.loadTexts: apOwnEntry.setDescription('A group of information to uniquely identify an owner providing Web host service.')
apOwnName = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 25, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apOwnName.setStatus('current')
if mibBuilder.loadTexts: apOwnName.setDescription('The name of the owner providing Web hosting service.')
apOwnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 25, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apOwnIndex.setStatus('current')
if mibBuilder.loadTexts: apOwnIndex.setDescription('The unique index for each owner providing Web hosting service.')
apOwnMaxFlowPipeBwdth = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 25, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apOwnMaxFlowPipeBwdth.setStatus('current')
if mibBuilder.loadTexts: apOwnMaxFlowPipeBwdth.setDescription('The Max Flow pipe Bandwidth allowed for this owner used by all non guaranteed service flows.')
apOwnFlowPipeBurstTolerance = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 25, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apOwnFlowPipeBurstTolerance.setStatus('current')
if mibBuilder.loadTexts: apOwnFlowPipeBurstTolerance.setDescription("The Burst Tolerance percentage configured for this owner's prioritized Bandwidth.")
apOwnMaxPrioritizedFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 25, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apOwnMaxPrioritizedFlows.setStatus('current')
if mibBuilder.loadTexts: apOwnMaxPrioritizedFlows.setDescription('The Maximum number of prioritized flows allowed for this owner.')
apOwnBillingInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 25, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apOwnBillingInfo.setStatus('current')
if mibBuilder.loadTexts: apOwnBillingInfo.setDescription('The billing information of the owner providing Web hosting service.')
apOwnAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 25, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apOwnAddress.setStatus('current')
if mibBuilder.loadTexts: apOwnAddress.setDescription('The address of the owner providing Web hosting service.')
apOwnEmailAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 25, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apOwnEmailAddress.setStatus('current')
if mibBuilder.loadTexts: apOwnEmailAddress.setDescription('The email address of the owner providing Web hosting service.')
apOwnFlowPipeBwdthAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 25, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apOwnFlowPipeBwdthAlloc.setStatus('current')
if mibBuilder.loadTexts: apOwnFlowPipeBwdthAlloc.setDescription('The statistics of allocated Flow Pipe Bandwidth for this owner.')
apOwnFlowPipeActiveFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 25, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apOwnFlowPipeActiveFlows.setStatus('current')
if mibBuilder.loadTexts: apOwnFlowPipeActiveFlows.setDescription('The statistics of Number of active Flow Pipe flows for this owner.')
apOwnFlowPipeTotalFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 25, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apOwnFlowPipeTotalFlows.setStatus('current')
if mibBuilder.loadTexts: apOwnFlowPipeTotalFlows.setDescription('The statistics of total number of Flow Pipe flows for this owner.')
apOwnFlowPipeTotalMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 25, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apOwnFlowPipeTotalMisses.setStatus('current')
if mibBuilder.loadTexts: apOwnFlowPipeTotalMisses.setDescription('The statistics total number of missed flow pipe flows for this owner.')
apOwnQosBwdthAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 25, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apOwnQosBwdthAlloc.setStatus('current')
if mibBuilder.loadTexts: apOwnQosBwdthAlloc.setDescription('The statistics of allocated Guaranteed Bandwidth for this owner for all QoS classes defined by this owner.')
apOwnBEBwdthAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 25, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apOwnBEBwdthAlloc.setStatus('current')
if mibBuilder.loadTexts: apOwnBEBwdthAlloc.setDescription('The statistics of allocated Best Effort Bandwidth for this owner.')
apOwnHits = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 25, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apOwnHits.setStatus('current')
if mibBuilder.loadTexts: apOwnHits.setDescription('Total number of hits for this owner.')
apOwnRedirects = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 25, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apOwnRedirects.setStatus('current')
if mibBuilder.loadTexts: apOwnRedirects.setDescription('Total number of redirects for this owner.')
apOwnDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 25, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apOwnDrops.setStatus('current')
if mibBuilder.loadTexts: apOwnDrops.setDescription('Total number of dropped requests for this owner.')
apOwnRejNoServices = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 25, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apOwnRejNoServices.setStatus('current')
if mibBuilder.loadTexts: apOwnRejNoServices.setDescription('Total number of rejects due to no service available for this owner.')
apOwnRejServOverload = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 25, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apOwnRejServOverload.setStatus('current')
if mibBuilder.loadTexts: apOwnRejServOverload.setDescription('Total number of rejects due to no service overloaded for this owner.')
apOwnSpoofs = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 25, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apOwnSpoofs.setStatus('current')
if mibBuilder.loadTexts: apOwnSpoofs.setDescription('Total number of spoofed requests for this owner.')
apOwnNats = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 25, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apOwnNats.setStatus('current')
if mibBuilder.loadTexts: apOwnNats.setDescription('Total number of requests that required network address translation for this owner.')
apOwnByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 25, 2, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apOwnByteCount.setStatus('current')
if mibBuilder.loadTexts: apOwnByteCount.setDescription('Total number of bytes moved by this owner.')
apOwnFrameCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 25, 2, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apOwnFrameCount.setStatus('current')
if mibBuilder.loadTexts: apOwnFrameCount.setDescription('Total number of frames moved by this owner.')
apOwnDNSPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 25, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("accept", 1), ("push", 2), ("both", 3))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apOwnDNSPolicy.setStatus('current')
if mibBuilder.loadTexts: apOwnDNSPolicy.setDescription('The IP Protocol the of the content providing service.')
apOwnStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 25, 2, 1, 25), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apOwnStatus.setStatus('current')
if mibBuilder.loadTexts: apOwnStatus.setDescription('Status entry for this row.')
apOwnCaseSensitive = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 25, 2, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("insensitive", 0), ("sensitive", 1))).clone('insensitive')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apOwnCaseSensitive.setStatus('current')
if mibBuilder.loadTexts: apOwnCaseSensitive.setDescription("Controls whether this owner's rules use case sensitive or case insensitive matching.")
apOwnDNSBalance = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 25, 2, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("preferlocal", 1), ("roundrobin", 2), ("leastloaded", 3))).clone('roundrobin')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apOwnDNSBalance.setStatus('current')
if mibBuilder.loadTexts: apOwnDNSBalance.setDescription("The default DNS distribution algorithm to use for this owner's content rules.")
mibBuilder.exportSymbols("OWNEXT-MIB", apOwnBillingInfo=apOwnBillingInfo, apOwnEntry=apOwnEntry, apOwnName=apOwnName, apOwnByteCount=apOwnByteCount, apOwnStatus=apOwnStatus, apOwnFlowPipeBurstTolerance=apOwnFlowPipeBurstTolerance, apOwnNats=apOwnNats, apOwnCaseSensitive=apOwnCaseSensitive, apOwnBEBwdthAlloc=apOwnBEBwdthAlloc, apOwnRejServOverload=apOwnRejServOverload, apOwnExtMib=apOwnExtMib, apOwnRedirects=apOwnRedirects, apOwnFrameCount=apOwnFrameCount, apOwnDrops=apOwnDrops, apOwnMaxFlowPipeBwdth=apOwnMaxFlowPipeBwdth, apOwnFlowPipeTotalFlows=apOwnFlowPipeTotalFlows, apOwnDNSBalance=apOwnDNSBalance, apOwnDNSPolicy=apOwnDNSPolicy, apOwnFlowPipeTotalMisses=apOwnFlowPipeTotalMisses, apOwnHits=apOwnHits, apOwnTable=apOwnTable, apOwnFlowPipeActiveFlows=apOwnFlowPipeActiveFlows, apOwnFlowPipeBwdthAlloc=apOwnFlowPipeBwdthAlloc, apOwnSpoofs=apOwnSpoofs, apOwnQosBwdthAlloc=apOwnQosBwdthAlloc, PYSNMP_MODULE_ID=apOwnExtMib, apOwnEmailAddress=apOwnEmailAddress, apOwnMaxPrioritizedFlows=apOwnMaxPrioritizedFlows, apOwnAddress=apOwnAddress, apOwnRejNoServices=apOwnRejNoServices, apOwnIndex=apOwnIndex)
