#
# PySNMP MIB module WWP-LEOS-IP-INTERFACE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/WWP-LEOS-IP-INTERFACE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:37:59 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Gauge32, MibIdentifier, NotificationType, IpAddress, Bits, Counter32, TimeTicks, Unsigned32, ModuleIdentity, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, iso, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "MibIdentifier", "NotificationType", "IpAddress", "Bits", "Counter32", "TimeTicks", "Unsigned32", "ModuleIdentity", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "iso", "Counter64")
TruthValue, DisplayString, RowStatus, TextualConvention, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "RowStatus", "TextualConvention", "MacAddress")
wwpModulesLeos, = mibBuilder.importSymbols("WWP-SMI", "wwpModulesLeos")
wwpLeosIpInterfaceMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6141, 2, 60, 24))
wwpLeosIpInterfaceMIB.setRevisions(('2008-05-14 00:00', '2003-05-02 00:00', '2001-04-03 17:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: wwpLeosIpInterfaceMIB.setRevisionsDescriptions(('The MIB module for the WWP IpInterface IP interfaces configuration. This MIB provide additional configuration to whatever is provided by the standard ip group.', 'A new object for management packet priority is added.', 'Initial creation.',))
if mibBuilder.loadTexts: wwpLeosIpInterfaceMIB.setLastUpdated('200805140000Z')
if mibBuilder.loadTexts: wwpLeosIpInterfaceMIB.setOrganization('Ciena, Inc')
if mibBuilder.loadTexts: wwpLeosIpInterfaceMIB.setContactInfo(' Mib Meister 115 North Sullivan Road Spokane Valley, WA 99037 USA Phone: +1 509 242 9000 Email: support@ciena.com')
if mibBuilder.loadTexts: wwpLeosIpInterfaceMIB.setDescription('Added the operational gateway and a trap for gateway changes')
class VlanId(TextualConvention, Integer32):
    description = 'A 12-bit VLAN ID used in the VLAN Tag header.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 4094)

wwpLeosIpInterfaceMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 24, 1))
wwpLeosIpInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 24, 1, 1))
wwpLeosIpAclGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 24, 1, 2))
wwpLeosIpAclRules = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 24, 1, 3))
wwpLeosIpInterfaceMIBNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 24, 2))
wwpLeosIpInterfaceMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 24, 2, 0))
wwpLeosIpInterfaceMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 24, 3))
wwpLeosIpInterfaceMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 24, 3, 1))
wwpLeosIpInterfaceMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 24, 3, 2))
wwpLeosIpInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 24, 1, 1, 1), )
if mibBuilder.loadTexts: wwpLeosIpInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosIpInterfaceTable.setDescription('Table of IP addresses and associated subnet mask.')
wwpLeosIpInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 24, 1, 1, 1, 1), ).setIndexNames((0, "WWP-LEOS-IP-INTERFACE-MIB", "wwpLeosIpInterfaceIndex"))
if mibBuilder.loadTexts: wwpLeosIpInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosIpInterfaceEntry.setDescription('Interface IP and subnet mask entry. These interfaces are used to cause the switch CPU to become involved with the IP traffic. By default, a minimum of two interfaces must always exist, one for the local management interface, one for the remote management interface, and one or more for voice over IP.')
wwpLeosIpInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 24, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosIpInterfaceIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosIpInterfaceIndex.setDescription('Unique index into the table.')
wwpLeosIpInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 24, 1, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosIpInterfaceName.setStatus('current')
if mibBuilder.loadTexts: wwpLeosIpInterfaceName.setDescription('The friendly name for the IP interface.')
wwpLeosIpInterfaceIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 24, 1, 1, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosIpInterfaceIpAddr.setStatus('current')
if mibBuilder.loadTexts: wwpLeosIpInterfaceIpAddr.setDescription('IP address associated with this interface. ')
wwpLeosIpInterfaceSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 24, 1, 1, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosIpInterfaceSubnet.setStatus('current')
if mibBuilder.loadTexts: wwpLeosIpInterfaceSubnet.setDescription('The subnet mask associated with this ip address/interface.')
wwpLeosIpInterfaceIfIndexXref = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 24, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosIpInterfaceIfIndexXref.setStatus('current')
if mibBuilder.loadTexts: wwpLeosIpInterfaceIfIndexXref.setDescription('Cross reference to MIB-2 Interfaces ifIndex.')
wwpLeosIpExtInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 24, 1, 1, 2), )
if mibBuilder.loadTexts: wwpLeosIpExtInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosIpExtInterfaceTable.setDescription('A table that contains Interface Specific information maintained by each interface.')
wwpLeosIpExtInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 24, 1, 1, 2, 1), )
wwpLeosIpInterfaceEntry.registerAugmentions(("WWP-LEOS-IP-INTERFACE-MIB", "wwpLeosIpExtInterfaceEntry"))
wwpLeosIpExtInterfaceEntry.setIndexNames(*wwpLeosIpInterfaceEntry.getIndexNames())
if mibBuilder.loadTexts: wwpLeosIpExtInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosIpExtInterfaceEntry.setDescription('A list of interfaces additional configuration parameters maintained by each interface.')
wwpLeosIpInterfaceEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 24, 1, 1, 2, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosIpInterfaceEnable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosIpInterfaceEnable.setDescription("The status of each interface. A value of true(1) indicates that this interface is enabled and a value of false(2) indicates that this interface is disabled. The device shouldn't allow the Management Station to disable all the interfaces available on the box.")
wwpLeosIpInterfaceVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 24, 1, 1, 2, 1, 2), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosIpInterfaceVlanId.setStatus('current')
if mibBuilder.loadTexts: wwpLeosIpInterfaceVlanId.setDescription("The vlanId associated with this IP interface. The vlan indicated by wwpLeosIpInterfaceVlanId should exist in the Vlan Table. If an interface has no VLAN associated, then any read on this object should return 'noSuchInstance'.")
wwpLeosIpInterfaceMgmtPktPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 24, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosIpInterfaceMgmtPktPriority.setStatus('current')
if mibBuilder.loadTexts: wwpLeosIpInterfaceMgmtPktPriority.setDescription('The 802.1p Priority value for the management traffic on this interface.')
wwpLeosIpInterfaceAddrNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 24, 1, 1, 3), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosIpInterfaceAddrNotifEnabled.setStatus('current')
if mibBuilder.loadTexts: wwpLeosIpInterfaceAddrNotifEnabled.setDescription('This variable indicates whether the system generates the wwpLeosIpInterfaceAddrChgNotification. A false value prevents this notifications from being generated by this system.')
wwpLeosIpInterfaceAddrChgNotification = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 24, 2, 0, 1)).setObjects(("WWP-LEOS-IP-INTERFACE-MIB", "wwpLeosIpInterfaceName"), ("WWP-LEOS-IP-INTERFACE-MIB", "wwpLeosIpInterfaceIpAddr"), ("WWP-LEOS-IP-INTERFACE-MIB", "wwpLeosIpInterfaceSubnet"))
if mibBuilder.loadTexts: wwpLeosIpInterfaceAddrChgNotification.setStatus('current')
if mibBuilder.loadTexts: wwpLeosIpInterfaceAddrChgNotification.setDescription('A wwpLeosIpInterfaceAddrChgNotification is sent whenever the ip address of an interface changes.')
wwpLeosIpDataInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 24, 1, 1, 4), )
if mibBuilder.loadTexts: wwpLeosIpDataInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosIpDataInterfaceTable.setDescription("Data Interface IP and subnet mask entry. To create a loopback interface in this table, following attributes must be specified. wwpLeosIpDataInterfaceIndex wwpLeosIpDataInterfaceName wwpLeosIpDataInterfaceIpAddr wwpLeosIpDataInterfaceType must be set to 'loopback'. wwpLeosIpDataInterfaceVlanId defaults to 1 and cannot be set or changed. No other MIB object should be set otherwise error will be returned. To create a regular Data interface the following attributes must be specified. wwpLeosIpDataInterfaceIndex wwpLeosIpDataInterfaceName wwpLeosIpDataInterfaceIpAddr wwpLeosIpDataInterfaceMask wwpLeosIpDataInterfaceVlanId must be specified when the interface is created. It cannot be changed after creation. wwpLeosIpDataRowStatus must be set to 'createAndGo'.")
wwpLeosIpDataInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 24, 1, 1, 4, 1), ).setIndexNames((0, "WWP-LEOS-IP-INTERFACE-MIB", "wwpLeosIpDataInterfaceIndex"))
if mibBuilder.loadTexts: wwpLeosIpDataInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosIpDataInterfaceEntry.setDescription('Each entry represents a Data interface configuration parameter.')
wwpLeosIpDataInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 24, 1, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosIpDataInterfaceIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosIpDataInterfaceIndex.setDescription('Unique index into the table.')
wwpLeosIpDataInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 24, 1, 1, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosIpDataInterfaceName.setStatus('current')
if mibBuilder.loadTexts: wwpLeosIpDataInterfaceName.setDescription('The name for this Data IP interface.')
wwpLeosIpDataInterfaceIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 24, 1, 1, 4, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosIpDataInterfaceIpAddr.setStatus('current')
if mibBuilder.loadTexts: wwpLeosIpDataInterfaceIpAddr.setDescription('IP address associated with this interface. ')
wwpLeosIpDataInterfaceMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 24, 1, 1, 4, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosIpDataInterfaceMask.setStatus('current')
if mibBuilder.loadTexts: wwpLeosIpDataInterfaceMask.setDescription('The subnet mask associated with this ip address/interface.')
wwpLeosIpDataInterfaceVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 24, 1, 1, 4, 1, 5), VlanId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosIpDataInterfaceVlanId.setStatus('current')
if mibBuilder.loadTexts: wwpLeosIpDataInterfaceVlanId.setDescription('The vlanId associated with this Data IP interface. This vlan must already exist on the device. The vlanId must be specified when the interface is created. It cannot be set after creation. The vlanId cannot be specified and defaults to 1 for a loopback interface.')
wwpLeosIpDataInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 24, 1, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("broadcast", 1), ("pointToPoint", 2), ("loopBack", 3))).clone('broadcast')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosIpDataInterfaceType.setStatus('current')
if mibBuilder.loadTexts: wwpLeosIpDataInterfaceType.setDescription('The type of Data IP interface.')
wwpLeosIpDataInterfaceIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 24, 1, 1, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosIpDataInterfaceIfIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosIpDataInterfaceIfIndex.setDescription('The unique interface index assigned by INET.')
wwpLeosIpDataInterfaceMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 24, 1, 1, 4, 1, 8), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosIpDataInterfaceMac.setStatus('current')
if mibBuilder.loadTexts: wwpLeosIpDataInterfaceMac.setDescription('MAC address assigned by the device to this Data interface.')
wwpLeosIpDataInterfaceIfMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 24, 1, 1, 4, 1, 9), Integer32().clone(1500)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosIpDataInterfaceIfMtu.setStatus('current')
if mibBuilder.loadTexts: wwpLeosIpDataInterfaceIfMtu.setDescription('The size of the largest packet which can be sent/received on the interface, specified in octets. For interfaces that are used for transmitting network datagrams, this is the size of the largest network datagram that can be sent on the interface.')
wwpLeosIpDataInterfaceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 24, 1, 1, 4, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosIpDataInterfaceRowStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosIpDataInterfaceRowStatus.setDescription("Used to manage the creation and deletion of the conceptual rows in this table. To create a row in this table, a manager must set this object to 'createAndGo'. To delete a row in this table, a manager must set this object to 'destroy'. If the entry exists, it will be displayed as 'active'.")
wwpLeosIpInterfaceOperationalGateway = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 24, 1, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosIpInterfaceOperationalGateway.setStatus('current')
if mibBuilder.loadTexts: wwpLeosIpInterfaceOperationalGateway.setDescription('Operational gateway IP address.')
wwpLeosIpInterfaceOperationalGatewayChgNotification = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 24, 2, 0, 2)).setObjects(("WWP-LEOS-IP-INTERFACE-MIB", "wwpLeosIpInterfaceOperationalGateway"))
if mibBuilder.loadTexts: wwpLeosIpInterfaceOperationalGatewayChgNotification.setStatus('current')
if mibBuilder.loadTexts: wwpLeosIpInterfaceOperationalGatewayChgNotification.setDescription('A wwpLeosIpOperationalGatewayChgNotification notification will be sent out whenever the operational gateway is changed.')
wwpLeosIpAclState = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 24, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosIpAclState.setStatus('current')
if mibBuilder.loadTexts: wwpLeosIpAclState.setDescription('This object allows to globally configure IP ACL state.')
wwpLeosIpAclCacheHit = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 24, 1, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosIpAclCacheHit.setStatus('current')
if mibBuilder.loadTexts: wwpLeosIpAclCacheHit.setDescription('Count of the number of lookups satisfied by a cache hit.')
wwpLeosIpAclNoHit = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 24, 1, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosIpAclNoHit.setStatus('current')
if mibBuilder.loadTexts: wwpLeosIpAclNoHit.setDescription('Count of the number of lookups which failed because the source ip address did not match a table entry.')
wwpLeosIpAclBadPort = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 24, 1, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosIpAclBadPort.setStatus('current')
if mibBuilder.loadTexts: wwpLeosIpAclBadPort.setDescription('Count of the number of lookups which failed because the ingress port was disallowed by a table entry.')
wwpLeosIpAclClearStats = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 24, 1, 2, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosIpAclClearStats.setStatus('current')
if mibBuilder.loadTexts: wwpLeosIpAclClearStats.setDescription("Set this object to 'destroy' to clear the global and table entry statistics counters.")
wwpLeosIpAclBadDscp = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 24, 1, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosIpAclBadDscp.setStatus('current')
if mibBuilder.loadTexts: wwpLeosIpAclBadDscp.setDescription('Count of the number of lookups which failed because the ingress DSCP value was disallowed by a table entry.')
wwpLeosIpAclOperState = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 24, 1, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosIpAclOperState.setStatus('current')
if mibBuilder.loadTexts: wwpLeosIpAclOperState.setDescription('The current operational state of the IP ACL system.')
wwpLeosIpAclInUseEntries = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 24, 1, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosIpAclInUseEntries.setStatus('current')
if mibBuilder.loadTexts: wwpLeosIpAclInUseEntries.setDescription('Count of the number of IP ACL rules that are currently configured.')
wwpLeosIpAclMaxEntries = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 24, 1, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosIpAclMaxEntries.setStatus('current')
if mibBuilder.loadTexts: wwpLeosIpAclMaxEntries.setDescription('Count of the max number of IP ACL rules that can be configured.')
wwpLeosIpAclTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 24, 1, 3, 1), )
if mibBuilder.loadTexts: wwpLeosIpAclTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosIpAclTable.setDescription('The (conceptual) table listing the display parameters for the IP ACL table.')
wwpLeosIpAclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 24, 1, 3, 1, 1), ).setIndexNames((0, "WWP-LEOS-IP-INTERFACE-MIB", "wwpLeosIpAclEntryIpAddr"), (0, "WWP-LEOS-IP-INTERFACE-MIB", "wwpLeosIpAclEntryIpMask"))
if mibBuilder.loadTexts: wwpLeosIpAclEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosIpAclEntry.setDescription('An entry (conceptual row) in the wwpLeosIpAclTable.')
wwpLeosIpAclEntryIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 24, 1, 3, 1, 1, 1), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosIpAclEntryIpAddr.setStatus('current')
if mibBuilder.loadTexts: wwpLeosIpAclEntryIpAddr.setDescription('This object is the IP network which will be authorized.')
wwpLeosIpAclEntryIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 24, 1, 3, 1, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosIpAclEntryIpMask.setStatus('current')
if mibBuilder.loadTexts: wwpLeosIpAclEntryIpMask.setDescription('This object is the netmask for the IP network which will be authorized.')
wwpLeosIpAclEntryPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 24, 1, 3, 1, 1, 3), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosIpAclEntryPortMask.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosIpAclEntryPortMask.setDescription('This object is used to specify the physical ports which frames will be allowed to ingress from. The mask is big endian and each bit, numbered from 0 to 27, represents a physical port numbered from 1 to 28. A value of 0xFFFFFFFF may be used to specify all ports.')
wwpLeosIpAclEntryHits = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 24, 1, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosIpAclEntryHits.setStatus('current')
if mibBuilder.loadTexts: wwpLeosIpAclEntryHits.setDescription('Count of the number of lookups which matched the table entry.')
wwpLeosIpAclEntryBadPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 24, 1, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosIpAclEntryBadPort.setStatus('current')
if mibBuilder.loadTexts: wwpLeosIpAclEntryBadPort.setDescription('Count of the number of lookups which failed because the ingress port was disallowed by the table entry.')
wwpLeosIpAclEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 24, 1, 3, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosIpAclEntryStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosIpAclEntryStatus.setDescription("Set this object to 'CreateAndGo' to create a new table entry, set it to 'destroy' to remove an existing entry.")
wwpLeosIpAclEntryDscpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 24, 1, 3, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosIpAclEntryDscpMask.setStatus('current')
if mibBuilder.loadTexts: wwpLeosIpAclEntryDscpMask.setDescription('This object is used to specify the DSCP values for which IP packets will be allowed to ingress. The mask is big endian and each bit, numbered from 0 to 63, represents a DSCP value numbered from 0 to 63. A value of 0xFFFFFFFFFFFFFFFF may be used to specify all.')
wwpLeosIpAclEntryBadDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 24, 1, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosIpAclEntryBadDscp.setStatus('current')
if mibBuilder.loadTexts: wwpLeosIpAclEntryBadDscp.setDescription('Count of the number of lookups which failed because the ingress DSCP value was disallowed by the table entry.')
wwpLeosIpAclEntryPortBitMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 24, 1, 3, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosIpAclEntryPortBitMask.setStatus('current')
if mibBuilder.loadTexts: wwpLeosIpAclEntryPortBitMask.setDescription('This object is used to specify the physical ports which frames will be allowed to ingress from. The mask is big endian and each bit, numbered from 0 to 63, represents a physical port numbered from 1 to 64. A value of 0xFFFFFFFFFFFFFFFF may be used to specify all ports.')
mibBuilder.exportSymbols("WWP-LEOS-IP-INTERFACE-MIB", PYSNMP_MODULE_ID=wwpLeosIpInterfaceMIB, wwpLeosIpInterfaceMIBConformance=wwpLeosIpInterfaceMIBConformance, wwpLeosIpInterfaceTable=wwpLeosIpInterfaceTable, wwpLeosIpDataInterfaceIpAddr=wwpLeosIpDataInterfaceIpAddr, wwpLeosIpDataInterfaceRowStatus=wwpLeosIpDataInterfaceRowStatus, wwpLeosIpInterfaceMIB=wwpLeosIpInterfaceMIB, wwpLeosIpAclEntry=wwpLeosIpAclEntry, wwpLeosIpAclRules=wwpLeosIpAclRules, wwpLeosIpDataInterfaceType=wwpLeosIpDataInterfaceType, wwpLeosIpAclEntryBadPort=wwpLeosIpAclEntryBadPort, wwpLeosIpInterfaceOperationalGateway=wwpLeosIpInterfaceOperationalGateway, wwpLeosIpAclOperState=wwpLeosIpAclOperState, wwpLeosIpAclGlobal=wwpLeosIpAclGlobal, wwpLeosIpInterfaceMgmtPktPriority=wwpLeosIpInterfaceMgmtPktPriority, wwpLeosIpAclState=wwpLeosIpAclState, wwpLeosIpInterfaceMIBGroups=wwpLeosIpInterfaceMIBGroups, wwpLeosIpDataInterfaceName=wwpLeosIpDataInterfaceName, wwpLeosIpInterfaceMIBObjects=wwpLeosIpInterfaceMIBObjects, wwpLeosIpDataInterfaceMac=wwpLeosIpDataInterfaceMac, wwpLeosIpAclMaxEntries=wwpLeosIpAclMaxEntries, wwpLeosIpAclEntryHits=wwpLeosIpAclEntryHits, wwpLeosIpInterfaceSubnet=wwpLeosIpInterfaceSubnet, wwpLeosIpAclClearStats=wwpLeosIpAclClearStats, wwpLeosIpInterfaceMIBNotificationPrefix=wwpLeosIpInterfaceMIBNotificationPrefix, wwpLeosIpInterfaceAddrChgNotification=wwpLeosIpInterfaceAddrChgNotification, wwpLeosIpAclEntryStatus=wwpLeosIpAclEntryStatus, wwpLeosIpDataInterfaceIndex=wwpLeosIpDataInterfaceIndex, wwpLeosIpInterfaceMIBNotifications=wwpLeosIpInterfaceMIBNotifications, wwpLeosIpExtInterfaceEntry=wwpLeosIpExtInterfaceEntry, wwpLeosIpAclBadPort=wwpLeosIpAclBadPort, wwpLeosIpDataInterfaceMask=wwpLeosIpDataInterfaceMask, wwpLeosIpAclEntryPortMask=wwpLeosIpAclEntryPortMask, wwpLeosIpAclInUseEntries=wwpLeosIpAclInUseEntries, wwpLeosIpDataInterfaceIfMtu=wwpLeosIpDataInterfaceIfMtu, wwpLeosIpInterface=wwpLeosIpInterface, wwpLeosIpDataInterfaceVlanId=wwpLeosIpDataInterfaceVlanId, wwpLeosIpAclEntryIpMask=wwpLeosIpAclEntryIpMask, wwpLeosIpAclCacheHit=wwpLeosIpAclCacheHit, wwpLeosIpAclBadDscp=wwpLeosIpAclBadDscp, VlanId=VlanId, wwpLeosIpAclEntryPortBitMask=wwpLeosIpAclEntryPortBitMask, wwpLeosIpInterfaceIfIndexXref=wwpLeosIpInterfaceIfIndexXref, wwpLeosIpExtInterfaceTable=wwpLeosIpExtInterfaceTable, wwpLeosIpAclEntryIpAddr=wwpLeosIpAclEntryIpAddr, wwpLeosIpInterfaceVlanId=wwpLeosIpInterfaceVlanId, wwpLeosIpInterfaceName=wwpLeosIpInterfaceName, wwpLeosIpInterfaceIndex=wwpLeosIpInterfaceIndex, wwpLeosIpInterfaceOperationalGatewayChgNotification=wwpLeosIpInterfaceOperationalGatewayChgNotification, wwpLeosIpAclNoHit=wwpLeosIpAclNoHit, wwpLeosIpInterfaceEntry=wwpLeosIpInterfaceEntry, wwpLeosIpInterfaceIpAddr=wwpLeosIpInterfaceIpAddr, wwpLeosIpAclTable=wwpLeosIpAclTable, wwpLeosIpAclEntryBadDscp=wwpLeosIpAclEntryBadDscp, wwpLeosIpInterfaceEnable=wwpLeosIpInterfaceEnable, wwpLeosIpInterfaceAddrNotifEnabled=wwpLeosIpInterfaceAddrNotifEnabled, wwpLeosIpDataInterfaceTable=wwpLeosIpDataInterfaceTable, wwpLeosIpAclEntryDscpMask=wwpLeosIpAclEntryDscpMask, wwpLeosIpInterfaceMIBCompliances=wwpLeosIpInterfaceMIBCompliances, wwpLeosIpDataInterfaceEntry=wwpLeosIpDataInterfaceEntry, wwpLeosIpDataInterfaceIfIndex=wwpLeosIpDataInterfaceIfIndex)
