#
# PySNMP MIB module Netrake-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Netrake-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:26:07 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Integer32, Counter32, ObjectIdentity, iso, TimeTicks, IpAddress, Gauge32, NotificationType, ModuleIdentity, enterprises, Unsigned32, Bits, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Integer32", "Counter32", "ObjectIdentity", "iso", "TimeTicks", "IpAddress", "Gauge32", "NotificationType", "ModuleIdentity", "enterprises", "Unsigned32", "Bits", "MibIdentifier")
DisplayString, TextualConvention, RowStatus, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "RowStatus", "DateAndTime")
netrake = ModuleIdentity((1, 3, 6, 1, 4, 1, 10950))
netrake.setRevisions(('2001-09-20 10:05', '2006-12-13 10:05', '2007-01-05 10:05',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: netrake.setRevisionsDescriptions(('0.1', 'Add SIP Common and SIP Event Dialog statistics. Deprecate obsolete stats.', 'Deprecate diagnostics, add object identifiers.',))
if mibBuilder.loadTexts: netrake.setLastUpdated('200612131005Z')
if mibBuilder.loadTexts: netrake.setOrganization('Netrake 3000 Technology Drive Suite 100 Plano, Texas 75074 phone: 214 291 1000 fax: 214 291 1010')
if mibBuilder.loadTexts: netrake.setContactInfo('Netrake Corporation support@netrake.com, www.netrake.com')
if mibBuilder.loadTexts: netrake.setDescription('nCite MIB')
org = MibIdentifier((1, 3))
dod = MibIdentifier((1, 3, 6))
internet = MibIdentifier((1, 3, 6, 1))
private = MibIdentifier((1, 3, 6, 1, 4))
enterprises = MibIdentifier((1, 3, 6, 1, 4, 1))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 1))
nCite = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 1, 1))
chassis = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 1, 1, 1))
nCiteSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 1, 1, 2))
alarm = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 1, 1, 3))
switchNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 1, 1, 4))
nCiteRedundant = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 1, 1, 5))
nCiteStats = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6))
diagnostics = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 1, 1, 7))
policyProvisioning = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 1, 1, 8))
nCiteStaticRoutes = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 1, 1, 9))
nCiteArpConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 1, 1, 10))
ipPortConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 1, 1, 11))
nCiteOutSyncFlag = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nCiteOutSyncFlag.setStatus('deprecated')
if mibBuilder.loadTexts: nCiteOutSyncFlag.setDescription('This is currently not used.')
trapAckEnable = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapAckEnable.setStatus('current')
if mibBuilder.loadTexts: trapAckEnable.setDescription('Trap acknowledgement enable/disable flag')
linkUpTrapAck = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notAck", 0), ("ack", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkUpTrapAck.setStatus('current')
if mibBuilder.loadTexts: linkUpTrapAck.setDescription('Notification when link state changes to up.')
linkDownTrapAck = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notAck", 0), ("ack", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkDownTrapAck.setStatus('current')
if mibBuilder.loadTexts: linkDownTrapAck.setDescription('Notificatin when link state changes to down.')
nCiteNTA = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 1, 1, 16))
nCiteRogue = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 1, 1, 17))
licenseInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 1, 1, 18))
nCiteRIPConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 1, 1, 19))
nCiteAuthConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 1, 1, 20))
linkUpTrapAckSource = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 21), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkUpTrapAckSource.setStatus('current')
if mibBuilder.loadTexts: linkUpTrapAckSource.setDescription('Identifies the Snmp Manager which sets the trap ack.')
linkDownTrapAckSource = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 22), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkDownTrapAckSource.setStatus('current')
if mibBuilder.loadTexts: linkDownTrapAckSource.setDescription('Identifies the Snmp Manager which sets the trap ack.')
chasGen = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 1, 1, 1, 1))
chasPwr = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 1, 1, 1, 2))
chasFan = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 1, 1, 1, 3))
chasBrd = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 1, 1, 1, 4))
resourceUsageTable = MibTable((1, 3, 6, 1, 4, 1, 10950, 1, 1, 2, 1), )
if mibBuilder.loadTexts: resourceUsageTable.setStatus('current')
if mibBuilder.loadTexts: resourceUsageTable.setDescription('Description')
resourceUsageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10950, 1, 1, 2, 1, 1), ).setIndexNames((0, "Netrake-MIB", "processorIndex"))
if mibBuilder.loadTexts: resourceUsageEntry.setStatus('current')
if mibBuilder.loadTexts: resourceUsageEntry.setDescription('Row Description')
processorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("managementProc", 1), ("controlProcA", 2), ("controlProcB", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorIndex.setStatus('current')
if mibBuilder.loadTexts: processorIndex.setDescription('There are three processors. This table contains the resource usage for each processor')
memTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: memTotal.setStatus('current')
if mibBuilder.loadTexts: memTotal.setDescription('Total amount of memory available.')
memUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memUsed.setStatus('current')
if mibBuilder.loadTexts: memUsed.setDescription('This is the percentage of memory in use at the time that the value is requested.')
cpuUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuUsage.setStatus('current')
if mibBuilder.loadTexts: cpuUsage.setDescription('This is the amount of CPU in use at the time this value is requested.')
systemSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 2, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemSoftwareVersion.setStatus('current')
if mibBuilder.loadTexts: systemSoftwareVersion.setDescription('Software Version of the nCite')
systemRestoreFlag = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("normal", 0), ("outOfSync", 1), ("refreshStarted", 2))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemRestoreFlag.setStatus('deprecated')
if mibBuilder.loadTexts: systemRestoreFlag.setDescription('Tells the EMS whether to push or pull the configuration. If the value is default(0) then the EMS pulls. If the value is restore(1) then the EMS pushes.')
systemOperState = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 2, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemOperState.setStatus('current')
if mibBuilder.loadTexts: systemOperState.setDescription('Operational state of the nCite')
systemAdminState = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemAdminState.setStatus('current')
if mibBuilder.loadTexts: systemAdminState.setDescription('Administrative state of the nCite. Disabling the nCite stops all traffic from passing through the box.')
systemOperStateChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 10950, 1, 1, 2, 6)).setObjects(("Netrake-MIB", "systemOperState"))
if mibBuilder.loadTexts: systemOperStateChangeTrap.setStatus('current')
if mibBuilder.loadTexts: systemOperStateChangeTrap.setDescription('This trap is sent when the operational state of the nCite changes.')
systemOperStateChangeTrapAck = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notAck", 0), ("ack", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemOperStateChangeTrapAck.setStatus('current')
if mibBuilder.loadTexts: systemOperStateChangeTrapAck.setDescription('System operation state change trap flag')
systemOperStateChangeTrapAckSource = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 2, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemOperStateChangeTrapAckSource.setStatus('current')
if mibBuilder.loadTexts: systemOperStateChangeTrapAckSource.setDescription('Identifies the Snmp Manager which sets the trap ack.')
systemTrapAckTable = MibTable((1, 3, 6, 1, 4, 1, 10950, 1, 1, 2, 9), )
if mibBuilder.loadTexts: systemTrapAckTable.setStatus('current')
if mibBuilder.loadTexts: systemTrapAckTable.setDescription('Table of SNMP Mgrs that are sending acknowledgements')
systemTrapAckEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10950, 1, 1, 2, 9, 1), ).setIndexNames((0, "Netrake-MIB", "systemSnmpMgrIpAddress"))
if mibBuilder.loadTexts: systemTrapAckEntry.setStatus('current')
if mibBuilder.loadTexts: systemTrapAckEntry.setDescription('Row Description')
systemSnmpMgrIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 2, 9, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemSnmpMgrIpAddress.setStatus('current')
if mibBuilder.loadTexts: systemSnmpMgrIpAddress.setDescription('IP address of SNMP Mgr that is sending Acks for traps')
systemTrapNoAck = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 2, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("ackNotReceived", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemTrapNoAck.setStatus('current')
if mibBuilder.loadTexts: systemTrapNoAck.setDescription('When trap is not acknowledges the value get set to ackNoReceived; EMS will set to OK upon refresh.')
activeAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 10950, 1, 1, 3, 1), )
if mibBuilder.loadTexts: activeAlarmTable.setStatus('current')
if mibBuilder.loadTexts: activeAlarmTable.setDescription('Description')
activeAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10950, 1, 1, 3, 1, 1), ).setIndexNames((0, "Netrake-MIB", "activeAlarmIndex"))
if mibBuilder.loadTexts: activeAlarmEntry.setStatus('current')
if mibBuilder.loadTexts: activeAlarmEntry.setDescription('Row Description')
activeAlarmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeAlarmIndex.setStatus('current')
if mibBuilder.loadTexts: activeAlarmIndex.setDescription('Index into table for a specific alarm instance can change')
activeAlarmId = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeAlarmId.setStatus('current')
if mibBuilder.loadTexts: activeAlarmId.setDescription('Unique identifier assigned to aninstance of an alarm.')
activeAlarmType = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeAlarmType.setStatus('current')
if mibBuilder.loadTexts: activeAlarmType.setDescription('Unique identifier associated with the alarm description')
activeAlarmServiceAffecting = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notServiceAffecting", 1), ("serviceAffecting", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeAlarmServiceAffecting.setStatus('current')
if mibBuilder.loadTexts: activeAlarmServiceAffecting.setDescription('Indicates whether the alarm is service affecting')
activeAlarmCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hardware", 1), ("software", 2), ("service", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeAlarmCategory.setStatus('current')
if mibBuilder.loadTexts: activeAlarmCategory.setDescription('Categorizes the alarm into a class of alarms')
activeAlarmTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 3, 1, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeAlarmTimeStamp.setStatus('current')
if mibBuilder.loadTexts: activeAlarmTimeStamp.setDescription('Date and time that the alarm condition is detected')
activeAlarmSlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeAlarmSlotNum.setStatus('current')
if mibBuilder.loadTexts: activeAlarmSlotNum.setDescription('Slot number of the card that has the condition being alarmed')
activeAlarmPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeAlarmPortNum.setStatus('current')
if mibBuilder.loadTexts: activeAlarmPortNum.setDescription('If condition is against a port, this will hold the port number. Otherwise it will be defaulted to 0.')
activeAlarmSysUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 3, 1, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeAlarmSysUpTime.setStatus('current')
if mibBuilder.loadTexts: activeAlarmSysUpTime.setDescription('Value of system up time as reported in MIBII at the time that the condition began')
activeAlarmDevType = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 0))).clone(namedValues=NamedValues(("managementProc", 1), ("controlProc", 2), ("netrakeControlProcessor", 3), ("gigE", 4), ("fastEther", 5), ("chassisFan", 6), ("chassisPowerSupply", 7), ("oc12", 8), ("unknown", 0))).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeAlarmDevType.setStatus('current')
if mibBuilder.loadTexts: activeAlarmDevType.setDescription('Description')
activeAlarmAdditionalInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 3, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeAlarmAdditionalInfo.setStatus('current')
if mibBuilder.loadTexts: activeAlarmAdditionalInfo.setDescription('Additional information to be included in the alarm description')
activeAlarmOccurances = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeAlarmOccurances.setStatus('current')
if mibBuilder.loadTexts: activeAlarmOccurances.setDescription('Number of times the condition has re-occurred since it was originated')
acitveAlarmReportingSource = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 3, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acitveAlarmReportingSource.setStatus('deprecated')
if mibBuilder.loadTexts: acitveAlarmReportingSource.setDescription('This has been deprecated')
activeAlarmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 3, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("critical", 1), ("unknown", 0), ("major", 2), ("minor", 3), ("warning", 4), ("clear", 5), ("info", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeAlarmSeverity.setStatus('current')
if mibBuilder.loadTexts: activeAlarmSeverity.setDescription('Severity of the alarm')
activeAlarmDisplayString = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 3, 1, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeAlarmDisplayString.setStatus('current')
if mibBuilder.loadTexts: activeAlarmDisplayString.setDescription('Description of the alarm to be used to display on the GUI')
activeAlarmSubType = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 3, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeAlarmSubType.setStatus('current')
if mibBuilder.loadTexts: activeAlarmSubType.setDescription('Sub-type is used to distinguish alarms by a separate criteria such as customer ID or policy ID')
activeAlarmEventFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 3, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("alarm", 1), ("event", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeAlarmEventFlag.setStatus('current')
if mibBuilder.loadTexts: activeAlarmEventFlag.setDescription('Description')
histEvent = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 1, 1, 3, 2))
postAlarm = NotificationType((1, 3, 6, 1, 4, 1, 10950, 1, 1, 3, 3)).setObjects(("Netrake-MIB", "acitveAlarmReportingSource"), ("Netrake-MIB", "activeAlarmAdditionalInfo"), ("Netrake-MIB", "activeAlarmCategory"), ("Netrake-MIB", "activeAlarmDevType"), ("Netrake-MIB", "activeAlarmDisplayString"), ("Netrake-MIB", "activeAlarmId"), ("Netrake-MIB", "activeAlarmOccurances"), ("Netrake-MIB", "activeAlarmPortNum"), ("Netrake-MIB", "activeAlarmServiceAffecting"), ("Netrake-MIB", "activeAlarmSeverity"), ("Netrake-MIB", "activeAlarmSlotNum"), ("Netrake-MIB", "activeAlarmSysUpTime"), ("Netrake-MIB", "activeAlarmTimeStamp"), ("Netrake-MIB", "activeAlarmType"), ("Netrake-MIB", "activeAlarmSubType"), ("Netrake-MIB", "activeAlarmEventFlag"))
if mibBuilder.loadTexts: postAlarm.setStatus('current')
if mibBuilder.loadTexts: postAlarm.setDescription('This notification is sent when an alarm becomes active')
postEvent = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 1, 1, 3, 4))
activeAlarmAcknowledge = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("acknowledge", 1), ("cleared", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: activeAlarmAcknowledge.setStatus('current')
if mibBuilder.loadTexts: activeAlarmAcknowledge.setDescription('Value is set to acknowledged by the EMS when the alarm is received. It is set back to cleared by the agent')
activeAlarmID = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 3, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: activeAlarmID.setStatus('current')
if mibBuilder.loadTexts: activeAlarmID.setDescription('Alarm ID of the alarm being acknowledged')
eventAcknowledge = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 1, 1, 3, 7))
eventID = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 3, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eventID.setStatus('deprecated')
if mibBuilder.loadTexts: eventID.setDescription('Event ID for the event that is being acknowledged')
activeAlarmAcknowledgeSource = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 3, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: activeAlarmAcknowledgeSource.setStatus('current')
if mibBuilder.loadTexts: activeAlarmAcknowledgeSource.setDescription('Identifies the Snmp Manager which sets the alarm ack.')
coldStartTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coldStartTrapEnable.setStatus('current')
if mibBuilder.loadTexts: coldStartTrapEnable.setDescription('Is used to disable the cold start trap')
coldStartTrap = NotificationType((1, 3, 6, 1, 4, 1, 10950, 1, 1, 4, 2)).setObjects(("Netrake-MIB", "systemRestoreFlag"), ("Netrake-MIB", "systemSoftwareVersion"))
if mibBuilder.loadTexts: coldStartTrap.setStatus('current')
if mibBuilder.loadTexts: coldStartTrap.setDescription('This trap is sent if trap is enabled when the Management Processor comes up from a cold start')
coldStartTrapAck = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notAck", 0), ("ack", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coldStartTrapAck.setStatus('current')
if mibBuilder.loadTexts: coldStartTrapAck.setDescription('Cold start trap acknowledge flag')
coldStartTrapAckSource = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 4, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coldStartTrapAckSource.setStatus('current')
if mibBuilder.loadTexts: coldStartTrapAckSource.setDescription('Identifies the Snmp Manager which sets the trap ack.')
redundantPort1IpAddr = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 5, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: redundantPort1IpAddr.setStatus('current')
if mibBuilder.loadTexts: redundantPort1IpAddr.setDescription('IP address of the redundant port of the nCite MP')
redundantPort2IpAddr = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 5, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: redundantPort2IpAddr.setStatus('current')
if mibBuilder.loadTexts: redundantPort2IpAddr.setDescription('Redundant port 2 IP address for the nCite MP')
redundantAdminState = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("standAlone", 1), ("redundant", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: redundantAdminState.setStatus('current')
if mibBuilder.loadTexts: redundantAdminState.setDescription('Administrative state for redundancy.')
redundantMateName = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 5, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: redundantMateName.setStatus('current')
if mibBuilder.loadTexts: redundantMateName.setDescription('The name of the redundant nCite. This will be the chassis serial number when redundancy is enabled. If redundancy is not configured, then this field will be blank.')
redundantConfigChangeTrapAck = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 5, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notAck", 0), ("ack", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: redundantConfigChangeTrapAck.setStatus('current')
if mibBuilder.loadTexts: redundantConfigChangeTrapAck.setDescription('Redundant config change trap acknowledge flag')
redundantConfigChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 10950, 1, 1, 5, 7)).setObjects(("Netrake-MIB", "redundantPairName"), ("Netrake-MIB", "redundantPort1IpAddr"), ("Netrake-MIB", "redundantPort2IpAddr"), ("Netrake-MIB", "redundantAdminState"), ("Netrake-MIB", "redundantPort1NetMask"), ("Netrake-MIB", "redundantPort2NetMask"))
if mibBuilder.loadTexts: redundantConfigChangeTrap.setStatus('current')
if mibBuilder.loadTexts: redundantConfigChangeTrap.setDescription('This trap is sent whenever the redundant configuration is modified')
redundantPort1NetMask = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 5, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: redundantPort1NetMask.setStatus('current')
if mibBuilder.loadTexts: redundantPort1NetMask.setDescription('Net mask')
redundantPort2NetMask = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 5, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: redundantPort2NetMask.setStatus('current')
if mibBuilder.loadTexts: redundantPort2NetMask.setDescription('Net mask')
redundantFailbackThresh = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 5, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 50000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: redundantFailbackThresh.setStatus('current')
if mibBuilder.loadTexts: redundantFailbackThresh.setDescription('Failback threshold')
redundantRedirectorFlag = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 5, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: redundantRedirectorFlag.setStatus('current')
if mibBuilder.loadTexts: redundantRedirectorFlag.setDescription('When set to enable(1), the nCite supports load balancing on equal cost routes')
redundantFailbackThreshChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 10950, 1, 1, 5, 12)).setObjects(("Netrake-MIB", "redundantFailbackThresh"))
if mibBuilder.loadTexts: redundantFailbackThreshChangeTrap.setStatus('current')
if mibBuilder.loadTexts: redundantFailbackThreshChangeTrap.setDescription('This trap is sent whenever the failback threshold is modified')
redundantFailbackThreshChangeTrapAck = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 5, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("default", 0), ("ack", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: redundantFailbackThreshChangeTrapAck.setStatus('current')
if mibBuilder.loadTexts: redundantFailbackThreshChangeTrapAck.setDescription('This value is set to acknowledge the redundant failback threshold change trap')
redundantRedirectorFlagChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 10950, 1, 1, 5, 14)).setObjects(("Netrake-MIB", "redundantRedirectorFlag"))
if mibBuilder.loadTexts: redundantRedirectorFlagChangeTrap.setStatus('current')
if mibBuilder.loadTexts: redundantRedirectorFlagChangeTrap.setDescription('This trap is sent whenever the redirector flag is changed')
redundantRedirectorFlagChangeTrapAck = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 5, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("default", 0), ("ack", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: redundantRedirectorFlagChangeTrapAck.setStatus('current')
if mibBuilder.loadTexts: redundantRedirectorFlagChangeTrapAck.setDescription('Used to acknowledge the redirector flag change trap')
redundantAutoFailbackFlag = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 5, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: redundantAutoFailbackFlag.setStatus('current')
if mibBuilder.loadTexts: redundantAutoFailbackFlag.setDescription('When set to enable(1), the nCite supports automatic failback')
redundantAutoFailbackChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 10950, 1, 1, 5, 17)).setObjects(("Netrake-MIB", "redundantAutoFailbackFlag"))
if mibBuilder.loadTexts: redundantAutoFailbackChangeTrap.setStatus('current')
if mibBuilder.loadTexts: redundantAutoFailbackChangeTrap.setDescription('This trap is sent whenever the automatic failback flag is changed')
redundantAutoFailbackFlagChangeTrapAck = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 5, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("default", 0), ("ack", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: redundantAutoFailbackFlagChangeTrapAck.setStatus('current')
if mibBuilder.loadTexts: redundantAutoFailbackFlagChangeTrapAck.setDescription('Used to acknowledge the automatic failback flag change trap')
redundantConfigChangeTrapAckSource = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 5, 19), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: redundantConfigChangeTrapAckSource.setStatus('current')
if mibBuilder.loadTexts: redundantConfigChangeTrapAckSource.setDescription('Identifies the Snmp Manager which sets the trap ack.')
redundantFailbackThreshChangeTrapAckSource = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 5, 20), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: redundantFailbackThreshChangeTrapAckSource.setStatus('current')
if mibBuilder.loadTexts: redundantFailbackThreshChangeTrapAckSource.setDescription('Identifies the Snmp Manager which sets the trap ack flag.')
redundantRedirectorFlagChangeTrapAckSource = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 5, 21), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: redundantRedirectorFlagChangeTrapAckSource.setStatus('current')
if mibBuilder.loadTexts: redundantRedirectorFlagChangeTrapAckSource.setDescription('Identifies the Snmp Manager which sets the trap ack.')
redundantAutoFailbackFlagChangeTrapAckSource = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 5, 22), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: redundantAutoFailbackFlagChangeTrapAckSource.setStatus('current')
if mibBuilder.loadTexts: redundantAutoFailbackFlagChangeTrapAckSource.setDescription('Identifies the Snmp Manager which sets the trap ack.')
globalCounters = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 1))
gigEStats = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 2))
serviceStats = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 3))
redundancyStats = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 4))
policyStats = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 5))
sipStats = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 6))
vlanStats = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 7))
custSipStats = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 8))
nCiteStatsConfigReset = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("default", 0), ("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nCiteStatsConfigReset.setStatus('current')
if mibBuilder.loadTexts: nCiteStatsConfigReset.setDescription('This value is set whenever the equipment configuration changes(i.e. a line card is added or removed).')
nCiteSessionDetailRecord = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 10))
registrationStats = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 11))
custRegStats = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 12))
ntsStats = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 13))
rogueStats = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 14))
nCiteStatsReset = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("default", 0), ("sipStats", 1), ("registrationStats", 2), ("rogueStats", 3), ("ntsStats", 4), ("voIpStats", 5), ("sipH323Stats", 6), ("h323Stats", 7), ("h323RegStats", 8), ("mediaStats", 9), ("sipCommonStats", 10), ("sipEvtDlgStats", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nCiteStatsReset.setStatus('current')
if mibBuilder.loadTexts: nCiteStatsReset.setDescription('This value is set when a group of statistics has been requested to be reset')
custNtsStats = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 16))
sipH323Stats = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 17))
h323Stats = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 18))
voIpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 19))
custSipH323Stats = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 20))
custH323Stats = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 21))
custVoIpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 22))
mediaStats = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 23))
h323RegStats = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 24))
custH323RegStats = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 25))
sipCommonStats = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 26))
sipEvtDlgStats = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 27))
runDiagGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 1, 1, 7, 2))
diagResultsTable = MibTable((1, 3, 6, 1, 4, 1, 10950, 1, 1, 7, 3), )
if mibBuilder.loadTexts: diagResultsTable.setStatus('deprecated')
if mibBuilder.loadTexts: diagResultsTable.setDescription('Table contains historical results of diagnostics')
diagResultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10950, 1, 1, 7, 3, 1), ).setIndexNames((0, "Netrake-MIB", "diagRsltIndex"))
if mibBuilder.loadTexts: diagResultsEntry.setStatus('deprecated')
if mibBuilder.loadTexts: diagResultsEntry.setDescription('Row Description')
diagRsltIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 7, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diagRsltIndex.setStatus('deprecated')
if mibBuilder.loadTexts: diagRsltIndex.setDescription('Column Description')
diagRsltStartTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 7, 3, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diagRsltStartTimeStamp.setStatus('deprecated')
if mibBuilder.loadTexts: diagRsltStartTimeStamp.setDescription('Time that the diagnostic was started')
diagRsltCompleteTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 7, 3, 1, 3), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diagRsltCompleteTimeStamp.setStatus('deprecated')
if mibBuilder.loadTexts: diagRsltCompleteTimeStamp.setDescription('Date/time the diagnostic completed')
diagRsltDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 7, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: diagRsltDesc.setStatus('deprecated')
if mibBuilder.loadTexts: diagRsltDesc.setDescription('Description of the results')
diagRsltType = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 7, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("nCiteFullIntLoopback", 1), ("nCiteFullExtLoopback", 2), ("nCiteInterfaceIntLoopback", 3), ("nCiteInterfaceExtLoopback", 4), ("cardIntLoopback", 5), ("cardExtLoopback", 6), ("portIntLoopback", 7), ("portExtLoopback", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: diagRsltType.setStatus('deprecated')
if mibBuilder.loadTexts: diagRsltType.setDescription('Description')
diagRsltDeviceSlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 7, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: diagRsltDeviceSlotNum.setStatus('deprecated')
if mibBuilder.loadTexts: diagRsltDeviceSlotNum.setDescription('Device slot number that executed the diagnostic')
diagRsltDevicePortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 7, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: diagRsltDevicePortNum.setStatus('deprecated')
if mibBuilder.loadTexts: diagRsltDevicePortNum.setDescription('Device port number')
diagStartedTrap = NotificationType((1, 3, 6, 1, 4, 1, 10950, 1, 1, 7, 4)).setObjects(("Netrake-MIB", "diagType"))
if mibBuilder.loadTexts: diagStartedTrap.setStatus('deprecated')
if mibBuilder.loadTexts: diagStartedTrap.setDescription('This trap is sent when the diagnostic is started')
diagCompleteTrap = NotificationType((1, 3, 6, 1, 4, 1, 10950, 1, 1, 7, 5)).setObjects(("Netrake-MIB", "diagRsltIndex"), ("Netrake-MIB", "diagRsltCompleteTimeStamp"), ("Netrake-MIB", "diagRsltDesc"), ("Netrake-MIB", "diagRsltDevicePortNum"), ("Netrake-MIB", "diagRsltDeviceSlotNum"), ("Netrake-MIB", "diagRsltType"))
if mibBuilder.loadTexts: diagCompleteTrap.setStatus('deprecated')
if mibBuilder.loadTexts: diagCompleteTrap.setDescription('This trap is sent when the diagnostic has completed')
diagRsltID = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 7, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diagRsltID.setStatus('deprecated')
if mibBuilder.loadTexts: diagRsltID.setDescription('Table entry to delete')
diagRsltAcknowledge = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 7, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("default", 0), ("acknowledge", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diagRsltAcknowledge.setStatus('deprecated')
if mibBuilder.loadTexts: diagRsltAcknowledge.setDescription('Acknowledge for diagnostic')
diagStartedTrapAck = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 7, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notAck", 0), ("ack", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diagStartedTrapAck.setStatus('deprecated')
if mibBuilder.loadTexts: diagStartedTrapAck.setDescription('Diag start trap acknowledge flag')
diagCompleteTrapAck = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 7, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notAck", 0), ("ack", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diagCompleteTrapAck.setStatus('deprecated')
if mibBuilder.loadTexts: diagCompleteTrapAck.setDescription('Diag complete trap acknowledge flag')
diagStartedTrapAckSource = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 7, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diagStartedTrapAckSource.setStatus('deprecated')
if mibBuilder.loadTexts: diagStartedTrapAckSource.setDescription('Identifies the Snmp Manager which sets the trap ack.')
diagCompleteTrapAckSource = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 7, 11), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diagCompleteTrapAckSource.setStatus('deprecated')
if mibBuilder.loadTexts: diagCompleteTrapAckSource.setDescription('Identifies the Snmp Manager which sets the trap ack.')
activeImgName = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 8, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeImgName.setStatus('current')
if mibBuilder.loadTexts: activeImgName.setDescription('Name of the XML file that is currently active on the nCite')
activeImgPidSideAFilename = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 8, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeImgPidSideAFilename.setStatus('deprecated')
if mibBuilder.loadTexts: activeImgPidSideAFilename.setDescription('Filename of the PID map for side A')
activeImgPidSideBFilename = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 8, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeImgPidSideBFilename.setStatus('deprecated')
if mibBuilder.loadTexts: activeImgPidSideBFilename.setDescription('Filename of the PID map for side B')
activeImgDwnldTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 8, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeImgDwnldTimeStamp.setStatus('current')
if mibBuilder.loadTexts: activeImgDwnldTimeStamp.setDescription('Date/time that the active image file was downloaded')
activeImgBuildStartTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 8, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeImgBuildStartTimeStamp.setStatus('deprecated')
if mibBuilder.loadTexts: activeImgBuildStartTimeStamp.setDescription('Date/time that the active image started building')
activeImgBuildCompleteTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 8, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeImgBuildCompleteTimeStamp.setStatus('deprecated')
if mibBuilder.loadTexts: activeImgBuildCompleteTimeStamp.setDescription('Date/time that the active image completed building')
activeImgActivatedTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 8, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeImgActivatedTimeStamp.setStatus('current')
if mibBuilder.loadTexts: activeImgActivatedTimeStamp.setDescription('Date/time that the active image was activated')
commitImgName = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 8, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commitImgName.setStatus('current')
if mibBuilder.loadTexts: commitImgName.setDescription('Name of the XML file that was committed')
commitImgDwnldTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 8, 9), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commitImgDwnldTimeStamp.setStatus('deprecated')
if mibBuilder.loadTexts: commitImgDwnldTimeStamp.setDescription('Date/time that the committed image was downloaded')
commitImgBuildStartTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 8, 10), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commitImgBuildStartTimeStamp.setStatus('deprecated')
if mibBuilder.loadTexts: commitImgBuildStartTimeStamp.setDescription('Date/time that the committed image started building')
commitImgBuildCompleteTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 8, 11), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commitImgBuildCompleteTimeStamp.setStatus('deprecated')
if mibBuilder.loadTexts: commitImgBuildCompleteTimeStamp.setDescription('Date/time that the committed image completed building')
commitImgActivatedTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 8, 12), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commitImgActivatedTimeStamp.setStatus('current')
if mibBuilder.loadTexts: commitImgActivatedTimeStamp.setDescription('Date/time that the committed image was activated')
commitImgTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 8, 13), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commitImgTimeStamp.setStatus('current')
if mibBuilder.loadTexts: commitImgTimeStamp.setDescription('Date/time that the image was committed')
newActiveImgTrap = NotificationType((1, 3, 6, 1, 4, 1, 10950, 1, 1, 8, 14)).setObjects(("Netrake-MIB", "activeImgActivatedTimeStamp"), ("Netrake-MIB", "activeImgName"), ("Netrake-MIB", "activeImgPidSideAFilename"), ("Netrake-MIB", "activeImgPidSideBFilename"))
if mibBuilder.loadTexts: newActiveImgTrap.setStatus('current')
if mibBuilder.loadTexts: newActiveImgTrap.setDescription('This trap is sent whenever a new image activated')
newCommittedImgTrap = NotificationType((1, 3, 6, 1, 4, 1, 10950, 1, 1, 8, 15)).setObjects(("Netrake-MIB", "commitImgTimeStamp"), ("Netrake-MIB", "commitImgName"))
if mibBuilder.loadTexts: newCommittedImgTrap.setStatus('current')
if mibBuilder.loadTexts: newCommittedImgTrap.setDescription('This trap is sent whenever an active image is committed')
nextImgName = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 8, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nextImgName.setStatus('deprecated')
if mibBuilder.loadTexts: nextImgName.setDescription('Name of the xml file that has been downloaded for a build')
nextImgState = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 8, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("cleared", 0), ("buildInProgress", 1), ("buildComplete", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nextImgState.setStatus('deprecated')
if mibBuilder.loadTexts: nextImgState.setDescription('This reflects the state of the next image.')
nextImgDwnldTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 8, 18), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nextImgDwnldTimeStamp.setStatus('deprecated')
if mibBuilder.loadTexts: nextImgDwnldTimeStamp.setDescription('Date/time that the image was downloaded')
nextImgBuildStartTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 8, 19), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nextImgBuildStartTimeStamp.setStatus('deprecated')
if mibBuilder.loadTexts: nextImgBuildStartTimeStamp.setDescription('Date/time that the next image started building. This field will be defaulted if building has not started')
nextImgBuildCompleteTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 8, 20), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nextImgBuildCompleteTimeStamp.setStatus('deprecated')
if mibBuilder.loadTexts: nextImgBuildCompleteTimeStamp.setDescription('Date/time that the next image completed building. This field will be defaulted of it was not built.')
buildStartedTrap = NotificationType((1, 3, 6, 1, 4, 1, 10950, 1, 1, 8, 21)).setObjects(("Netrake-MIB", "nextImg"), ("Netrake-MIB", "nextImgState"))
if mibBuilder.loadTexts: buildStartedTrap.setStatus('deprecated')
if mibBuilder.loadTexts: buildStartedTrap.setDescription('Trap sent when a build is started on the nCite')
buildCompleteTrap = NotificationType((1, 3, 6, 1, 4, 1, 10950, 1, 1, 8, 22)).setObjects(("Netrake-MIB", "nextImgName"), ("Netrake-MIB", "nextImgState"), ("Netrake-MIB", "nextImgBuildCompleteTimeStamp"))
if mibBuilder.loadTexts: buildCompleteTrap.setStatus('deprecated')
if mibBuilder.loadTexts: buildCompleteTrap.setDescription('Description')
newNextTrap = NotificationType((1, 3, 6, 1, 4, 1, 10950, 1, 1, 8, 23)).setObjects(("Netrake-MIB", "nextImgName"), ("Netrake-MIB", "nextImgState"))
if mibBuilder.loadTexts: newNextTrap.setStatus('deprecated')
if mibBuilder.loadTexts: newNextTrap.setDescription('This trap is sent whenever an XML file is downloaded to the nCite')
newActiveImgTrapAck = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 8, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notAck", 0), ("ack", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: newActiveImgTrapAck.setStatus('current')
if mibBuilder.loadTexts: newActiveImgTrapAck.setDescription('New active image trap acknowledge flag')
newCommittedImgTrapAck = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 8, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notAck", 0), ("ack", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: newCommittedImgTrapAck.setStatus('current')
if mibBuilder.loadTexts: newCommittedImgTrapAck.setDescription('New committed image trap acknowlege flag')
buildStartedTrapAck = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 8, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notAck", 0), ("ack", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: buildStartedTrapAck.setStatus('deprecated')
if mibBuilder.loadTexts: buildStartedTrapAck.setDescription('Build started trap acknowledge flag')
buildCompleteTrapAck = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 8, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notAck", 0), ("ack", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: buildCompleteTrapAck.setStatus('deprecated')
if mibBuilder.loadTexts: buildCompleteTrapAck.setDescription('Build complete trap acknowledge flag')
newNextTrapAck = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 8, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notAck", 0), ("ack", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: newNextTrapAck.setStatus('deprecated')
if mibBuilder.loadTexts: newNextTrapAck.setDescription('New next trap acknowledge flag')
newActiveImgTrapAckSource = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 8, 29), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: newActiveImgTrapAckSource.setStatus('current')
if mibBuilder.loadTexts: newActiveImgTrapAckSource.setDescription('Identifies the Snmp Manager which sets the trap ack.')
newCommittedImgTrapAckSource = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 8, 30), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: newCommittedImgTrapAckSource.setStatus('current')
if mibBuilder.loadTexts: newCommittedImgTrapAckSource.setDescription('Identifies the Snmp Manager which sets the trap ack.')
buildStartedTrapAckSource = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 8, 31), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: buildStartedTrapAckSource.setStatus('deprecated')
if mibBuilder.loadTexts: buildStartedTrapAckSource.setDescription('Identifies the Snmp Manager that sets the trap ack.')
buildCompleteTrapAckSource = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 8, 32), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: buildCompleteTrapAckSource.setStatus('deprecated')
if mibBuilder.loadTexts: buildCompleteTrapAckSource.setDescription('Identifies the Snmp Manager which sets the trap ack.')
newNextTrapAckSource = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 8, 33), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: newNextTrapAckSource.setStatus('deprecated')
if mibBuilder.loadTexts: newNextTrapAckSource.setDescription('Identifies the Snmp Manager which sets the trap ack.')
staticRoutesTable = MibTable((1, 3, 6, 1, 4, 1, 10950, 1, 1, 9, 1), )
if mibBuilder.loadTexts: staticRoutesTable.setStatus('current')
if mibBuilder.loadTexts: staticRoutesTable.setDescription('Description')
staticRoutesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10950, 1, 1, 9, 1, 1), ).setIndexNames((0, "Netrake-MIB", "staticRouteDest"), (0, "Netrake-MIB", "staticRouteNextHop"), (0, "Netrake-MIB", "staticRouteNetMask"))
if mibBuilder.loadTexts: staticRoutesEntry.setStatus('current')
if mibBuilder.loadTexts: staticRoutesEntry.setDescription('Row Description')
staticRouteDest = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 9, 1, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticRouteDest.setStatus('current')
if mibBuilder.loadTexts: staticRouteDest.setDescription('Column Description')
staticRouteNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 9, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticRouteNextHop.setStatus('current')
if mibBuilder.loadTexts: staticRouteNextHop.setDescription('Next hop ip address')
staticRouteNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 9, 1, 1, 3), IpAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticRouteNetMask.setStatus('current')
if mibBuilder.loadTexts: staticRouteNetMask.setDescription('Network mask')
staticRouteIngressVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 9, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticRouteIngressVlanTag.setStatus('deprecated')
if mibBuilder.loadTexts: staticRouteIngressVlanTag.setDescription('Static route Ingress VLAN tag; 4096 when not applicable')
staticRouteMetric1 = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 9, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticRouteMetric1.setStatus('current')
if mibBuilder.loadTexts: staticRouteMetric1.setDescription('The primary routing metric for this static route; -1 if not applicable')
staticRouteAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 9, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticRouteAdminState.setStatus('current')
if mibBuilder.loadTexts: staticRouteAdminState.setDescription('Enables/disables the route')
staticRouteIngressProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 9, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("general", 0), ("vlan", 1))).clone('general')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticRouteIngressProtocol.setStatus('deprecated')
if mibBuilder.loadTexts: staticRouteIngressProtocol.setDescription('Description')
staticRouteOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 9, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staticRouteOperState.setStatus('current')
if mibBuilder.loadTexts: staticRouteOperState.setDescription('Operational state of static route')
staticRouteType = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 9, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("userDefined", 1), ("discovered", 2), ("defaultRoute", 3), ("mgmtRoute", 4), ("dcHostRoute", 5), ("dcNetRoute", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staticRouteType.setStatus('current')
if mibBuilder.loadTexts: staticRouteType.setDescription('userDefined = Static Route; user can not modify discovered, DC Host, or DC Net routes')
staticRouteRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 9, 1, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: staticRouteRowStatus.setStatus('current')
if mibBuilder.loadTexts: staticRouteRowStatus.setDescription('Allows adding and deleting of entries')
staticRouteVrdTag = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 9, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staticRouteVrdTag.setStatus('current')
if mibBuilder.loadTexts: staticRouteVrdTag.setDescription('Virtual Routing Domain associated with the interface for this route')
staticRouteEgressVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 9, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staticRouteEgressVlan.setStatus('current')
if mibBuilder.loadTexts: staticRouteEgressVlan.setDescription('Egress Vlan associated with interface')
staticRouteChange = NotificationType((1, 3, 6, 1, 4, 1, 10950, 1, 1, 9, 2)).setObjects(("Netrake-MIB", "staticRouteAdminState"), ("Netrake-MIB", "staticRouteDest"), ("Netrake-MIB", "staticRouteIngressVlanTag"), ("Netrake-MIB", "staticRouteIngressProtocol"), ("Netrake-MIB", "staticRouteMetric1"), ("Netrake-MIB", "staticRouteNetMask"), ("Netrake-MIB", "staticRouteNextHop"), ("Netrake-MIB", "staticRouteOperState"), ("Netrake-MIB", "staticRouteRowStatus"), ("Netrake-MIB", "staticRouteType"))
if mibBuilder.loadTexts: staticRouteChange.setStatus('current')
if mibBuilder.loadTexts: staticRouteChange.setDescription('This trap is sent whenever changes are made to a static route')
staticRoutesRefreshNeeded = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 9, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("default", 0), ("refresh", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticRoutesRefreshNeeded.setStatus('current')
if mibBuilder.loadTexts: staticRoutesRefreshNeeded.setDescription('This field indicates that changes were made to the static routes')
staticRoutesRefreshTrap = NotificationType((1, 3, 6, 1, 4, 1, 10950, 1, 1, 9, 4)).setObjects(("Netrake-MIB", "staticRoutesRefreshNeeded"))
if mibBuilder.loadTexts: staticRoutesRefreshTrap.setStatus('current')
if mibBuilder.loadTexts: staticRoutesRefreshTrap.setDescription('This trap is sent whenever static route states change')
staticRouteChangeTrapAck = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 9, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notAck", 0), ("ack", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticRouteChangeTrapAck.setStatus('current')
if mibBuilder.loadTexts: staticRouteChangeTrapAck.setDescription('Static route change trap acknowledge flag')
staticRouteRefreshTrapAck = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 9, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notAck", 0), ("ack", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticRouteRefreshTrapAck.setStatus('current')
if mibBuilder.loadTexts: staticRouteRefreshTrapAck.setDescription('Static route change trap acknowledge flag')
staticRouteChangeTrapAckSource = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 9, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticRouteChangeTrapAckSource.setStatus('current')
if mibBuilder.loadTexts: staticRouteChangeTrapAckSource.setDescription('Identifies the Snmp Manager which sets the trap ack.')
staticRouteRefreshTrapAckSource = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 9, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticRouteRefreshTrapAckSource.setStatus('current')
if mibBuilder.loadTexts: staticRouteRefreshTrapAckSource.setDescription('Identifies the Snmp Manager which sets the trap ack.')
arpVerifTimerRetryCount = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 10, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: arpVerifTimerRetryCount.setStatus('current')
if mibBuilder.loadTexts: arpVerifTimerRetryCount.setDescription('Defines how often the nCite performs ARPs')
arpNextHopIP = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 10, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpNextHopIP.setStatus('current')
if mibBuilder.loadTexts: arpNextHopIP.setDescription('Next hop ip address')
arpMacAddr = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 10, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpMacAddr.setStatus('current')
if mibBuilder.loadTexts: arpMacAddr.setDescription('mac address')
arpRefreshNeeded = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 10, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: arpRefreshNeeded.setStatus('current')
if mibBuilder.loadTexts: arpRefreshNeeded.setDescription('This value is used in a trap to notifiy the EMS when the ARP table needs to be refreshed.')
arpRefreshTrap = NotificationType((1, 3, 6, 1, 4, 1, 10950, 1, 1, 10, 5)).setObjects(("Netrake-MIB", "arpRefreshNeeded"))
if mibBuilder.loadTexts: arpRefreshTrap.setStatus('current')
if mibBuilder.loadTexts: arpRefreshTrap.setDescription('This trap is sent whenever the ARP table changes on the nCite')
arpRefreshTrapAck = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 10, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notAck", 0), ("ack", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: arpRefreshTrapAck.setStatus('current')
if mibBuilder.loadTexts: arpRefreshTrapAck.setDescription('This value is set when the EMS acknowledges receipt of the trap')
arpUpdateMacTrap = NotificationType((1, 3, 6, 1, 4, 1, 10950, 1, 1, 10, 7)).setObjects(("Netrake-MIB", "arpMacAddr"), ("Netrake-MIB", "arpNextHopIP"), ("Netrake-MIB", "arpTrapOper"))
if mibBuilder.loadTexts: arpUpdateMacTrap.setStatus('current')
if mibBuilder.loadTexts: arpUpdateMacTrap.setDescription('This trap is sent to update the mac address for a specific next hop address')
arpUpdateMacTrapAck = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 10, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noAck", 0), ("ack", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: arpUpdateMacTrapAck.setStatus('current')
if mibBuilder.loadTexts: arpUpdateMacTrapAck.setDescription('Acknowledge field for update mac trap')
arpTrapOper = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 10, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("addUpdate", 0), ("delete", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpTrapOper.setStatus('current')
if mibBuilder.loadTexts: arpTrapOper.setDescription('If value is addUpdate(0) then ARP entry should be created with next hop and mac address provided. If value is delete[1] then next hop and associated fields should be removed from the table.')
arpOperTimerFreq = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 10, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: arpOperTimerFreq.setStatus('current')
if mibBuilder.loadTexts: arpOperTimerFreq.setDescription('ARP Verification Timer Retry Count')
arpOperTimerRetryCount = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 10, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: arpOperTimerRetryCount.setStatus('current')
if mibBuilder.loadTexts: arpOperTimerRetryCount.setDescription('ARP Operational Timer Frequency')
arpVerifTimerChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 10950, 1, 1, 10, 12)).setObjects(("Netrake-MIB", "arpVerifTimerRetryCount"))
if mibBuilder.loadTexts: arpVerifTimerChangeTrap.setStatus('current')
if mibBuilder.loadTexts: arpVerifTimerChangeTrap.setDescription('This trap is sent whenever the ARP verification timers are changed')
arpVerifTimerChangeTrapAck = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 10, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("default", 0), ("ack", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: arpVerifTimerChangeTrapAck.setStatus('current')
if mibBuilder.loadTexts: arpVerifTimerChangeTrapAck.setDescription('Used to acknowledge the ARP verification timer change trap')
arpOperTimerChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 10950, 1, 1, 10, 14)).setObjects(("Netrake-MIB", "arpOperTimerFreq"), ("Netrake-MIB", "arpOperTimerRetryCount"))
if mibBuilder.loadTexts: arpOperTimerChangeTrap.setStatus('current')
if mibBuilder.loadTexts: arpOperTimerChangeTrap.setDescription('This trap is sent whenever a change is made to the ARP Operational Timer')
arpOperTimerChangeTrapAck = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 10, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("default", 0), ("ack", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: arpOperTimerChangeTrapAck.setStatus('current')
if mibBuilder.loadTexts: arpOperTimerChangeTrapAck.setDescription('This is used to acknowledge the ARP Operational Timer Change Trap')
arpRefreshTrapAckSource = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 10, 16), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: arpRefreshTrapAckSource.setStatus('current')
if mibBuilder.loadTexts: arpRefreshTrapAckSource.setDescription('Identifies the Snmp Manager which sets the trap ack.')
arpUpdateMacTrapAckSource = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 10, 17), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: arpUpdateMacTrapAckSource.setStatus('current')
if mibBuilder.loadTexts: arpUpdateMacTrapAckSource.setDescription('Identifies the Snmp Manager which sets the trap ack.')
arpVerifTimerChangeTrapAckSource = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 10, 18), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: arpVerifTimerChangeTrapAckSource.setStatus('current')
if mibBuilder.loadTexts: arpVerifTimerChangeTrapAckSource.setDescription('Identifies the Snmp Manager which sets the trap ack.')
arpOperTimerChangeTrapAckSource = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 10, 19), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: arpOperTimerChangeTrapAckSource.setStatus('current')
if mibBuilder.loadTexts: arpOperTimerChangeTrapAckSource.setDescription('Identifies the Snmp Manager which sets the trap ack.')
ipPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 10950, 1, 1, 11, 1), )
if mibBuilder.loadTexts: ipPortConfigTable.setStatus('current')
if mibBuilder.loadTexts: ipPortConfigTable.setDescription('This table contains the IP configuration for each port')
ipPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10950, 1, 1, 11, 1, 1), ).setIndexNames((0, "Netrake-MIB", "ipPortConfigSlotNum"), (0, "Netrake-MIB", "ipPortConfigPortNum"), (0, "Netrake-MIB", "ipPortConfigIpAddr"))
if mibBuilder.loadTexts: ipPortConfigEntry.setStatus('current')
if mibBuilder.loadTexts: ipPortConfigEntry.setDescription('Row Description')
ipPortConfigSlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 11, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipPortConfigSlotNum.setStatus('current')
if mibBuilder.loadTexts: ipPortConfigSlotNum.setDescription('Slot number of line card')
ipPortConfigPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 11, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 48))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipPortConfigPortNum.setStatus('current')
if mibBuilder.loadTexts: ipPortConfigPortNum.setDescription('Port Number')
ipPortConfigIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 11, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipPortConfigIpAddr.setStatus('current')
if mibBuilder.loadTexts: ipPortConfigIpAddr.setDescription('IP address of the physical port.')
ipPortVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 11, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4097))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipPortVlanTag.setStatus('current')
if mibBuilder.loadTexts: ipPortVlanTag.setDescription('VLAN associated with interface')
ipPortConfigNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 11, 1, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipPortConfigNetMask.setStatus('current')
if mibBuilder.loadTexts: ipPortConfigNetMask.setDescription('Net mask for the physical address')
ipPortConfigAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 11, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipPortConfigAdminState.setStatus('current')
if mibBuilder.loadTexts: ipPortConfigAdminState.setDescription('Administrative state of the interface')
ipPortConfigOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 11, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipPortConfigOperState.setStatus('current')
if mibBuilder.loadTexts: ipPortConfigOperState.setDescription('Operational state of the interface')
ipPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 11, 1, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipPortRowStatus.setStatus('current')
if mibBuilder.loadTexts: ipPortRowStatus.setDescription('This is used to add/remove items to the table')
ipPortVrdTag = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 11, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipPortVrdTag.setStatus('current')
if mibBuilder.loadTexts: ipPortVrdTag.setDescription('Virtual Routing Domain')
ipPortConfigChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 10950, 1, 1, 11, 2)).setObjects(("Netrake-MIB", "ipPortConfigIpAddr"), ("Netrake-MIB", "ipPortConfigNetMask"), ("Netrake-MIB", "ipPortConfigOperState"), ("Netrake-MIB", "ipPortConfigPortNum"), ("Netrake-MIB", "ipPortConfigSlotNum"), ("Netrake-MIB", "ipPortVlanTag"), ("Netrake-MIB", "ipPortVrdTag"), ("Netrake-MIB", "ipPortConfigAdminState"), ("Netrake-MIB", "ipPortRowStatus"))
if mibBuilder.loadTexts: ipPortConfigChangeTrap.setStatus('current')
if mibBuilder.loadTexts: ipPortConfigChangeTrap.setDescription('This trap is sent whenever the IP config changes')
ipPortConfigChangeTrapAck = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 11, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notAck", 0), ("ack", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipPortConfigChangeTrapAck.setStatus('current')
if mibBuilder.loadTexts: ipPortConfigChangeTrapAck.setDescription('IP port config change trap acknowledge flag')
ipPortPlaceHolder = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 11, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipPortPlaceHolder.setStatus('current')
if mibBuilder.loadTexts: ipPortPlaceHolder.setDescription('Placeholder - not used')
ipPortRefreshOpStates = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 11, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipPortRefreshOpStates.setStatus('current')
if mibBuilder.loadTexts: ipPortRefreshOpStates.setDescription('This is used in a trap to tell the EMS to refresh the operational states associated with an interface')
ipPortRefreshTrap = NotificationType((1, 3, 6, 1, 4, 1, 10950, 1, 1, 11, 6)).setObjects(("Netrake-MIB", "ipPortRefreshOpStates"))
if mibBuilder.loadTexts: ipPortRefreshTrap.setStatus('current')
if mibBuilder.loadTexts: ipPortRefreshTrap.setDescription('This trap is sent when the operational states of the interfaces has changed')
ipPortRefreshTrapAck = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 11, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noAck", 0), ("ack", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipPortRefreshTrapAck.setStatus('current')
if mibBuilder.loadTexts: ipPortRefreshTrapAck.setDescription('This value is set to acknowledge a trap from the nCite')
ipPortAutoNegTable = MibTable((1, 3, 6, 1, 4, 1, 10950, 1, 1, 11, 8), )
if mibBuilder.loadTexts: ipPortAutoNegTable.setStatus('current')
if mibBuilder.loadTexts: ipPortAutoNegTable.setDescription('This table is used to configure the auto-negotiate flag per port')
ipPortAutoNegEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10950, 1, 1, 11, 8, 1), ).setIndexNames((0, "Netrake-MIB", "ipPortAutoNegSlotNum"), (0, "Netrake-MIB", "ipPortAutoNegPortNum"))
if mibBuilder.loadTexts: ipPortAutoNegEntry.setStatus('current')
if mibBuilder.loadTexts: ipPortAutoNegEntry.setDescription('Row Description')
ipPortAutoNegSlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 11, 8, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipPortAutoNegSlotNum.setStatus('current')
if mibBuilder.loadTexts: ipPortAutoNegSlotNum.setDescription('Column Description')
ipPortAutoNegPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 11, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipPortAutoNegPortNum.setStatus('current')
if mibBuilder.loadTexts: ipPortAutoNegPortNum.setDescription('Column Description')
ipPortAutoNegFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 11, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipPortAutoNegFlag.setStatus('current')
if mibBuilder.loadTexts: ipPortAutoNegFlag.setDescription('Enables/disabled auto-negotiation on the port')
ipPortAutoNegChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 10950, 1, 1, 11, 9)).setObjects(("Netrake-MIB", "ipPortAutoNegFlag"), ("Netrake-MIB", "ipPortAutoNegPortNum"), ("Netrake-MIB", "ipPortAutoNegSlotNum"))
if mibBuilder.loadTexts: ipPortAutoNegChangeTrap.setStatus('current')
if mibBuilder.loadTexts: ipPortAutoNegChangeTrap.setDescription("This trap is sent whenever a port's auto-negotiation configuration is changed")
ipPortAutoNegChangeTrapAck = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 11, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("default", 0), ("ack", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipPortAutoNegChangeTrapAck.setStatus('current')
if mibBuilder.loadTexts: ipPortAutoNegChangeTrapAck.setDescription('This value is set to acknowlege the ipPortAutoNegChangeTrap')
ipPortConfigChangeTrapAckSource = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 11, 11), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipPortConfigChangeTrapAckSource.setStatus('current')
if mibBuilder.loadTexts: ipPortConfigChangeTrapAckSource.setDescription('Identifies the Snmp Manager which sets the trap ack.')
ipPortRefreshTrapAckSource = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 11, 12), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipPortRefreshTrapAckSource.setStatus('current')
if mibBuilder.loadTexts: ipPortRefreshTrapAckSource.setDescription('Identifies the Snmp Manager which sets the trap ack.')
ipPortAutoNegChangeTrapAckSource = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 11, 13), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipPortAutoNegChangeTrapAckSource.setStatus('current')
if mibBuilder.loadTexts: ipPortAutoNegChangeTrapAckSource.setDescription('Identifies the Snmp Manager which sets the trap ack.')
nCiteNTATable = MibTable((1, 3, 6, 1, 4, 1, 10950, 1, 1, 16, 1), )
if mibBuilder.loadTexts: nCiteNTATable.setStatus('current')
if mibBuilder.loadTexts: nCiteNTATable.setDescription("This table provides the state associated with each customer's NTA")
nCiteNTAEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10950, 1, 1, 16, 1, 1), ).setIndexNames((0, "Netrake-MIB", "nCiteNTACustomerId"))
if mibBuilder.loadTexts: nCiteNTAEntry.setStatus('current')
if mibBuilder.loadTexts: nCiteNTAEntry.setDescription('Row Description')
nCiteNTACustomerId = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 16, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nCiteNTACustomerId.setStatus('current')
if mibBuilder.loadTexts: nCiteNTACustomerId.setDescription('Unique identifier associated with the customer. This is provided to the nCite via the XML file.')
nCiteNTAStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 16, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("noNTSClient", 0), ("configured", 1), ("connected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nCiteNTAStatus.setStatus('current')
if mibBuilder.loadTexts: nCiteNTAStatus.setDescription('Status associated with the connection to the NTA for each customer.')
nCiteNTAReset = NotificationType((1, 3, 6, 1, 4, 1, 10950, 1, 1, 16, 2))
if mibBuilder.loadTexts: nCiteNTAReset.setStatus('current')
if mibBuilder.loadTexts: nCiteNTAReset.setDescription('Notifies the SNMP agent when a new XML file has been activated so the table can be reset.')
edrQuarantineListTable = MibTable((1, 3, 6, 1, 4, 1, 10950, 1, 1, 17, 1), )
if mibBuilder.loadTexts: edrQuarantineListTable.setStatus('current')
if mibBuilder.loadTexts: edrQuarantineListTable.setDescription('Table that contains the list of calls that have been detected rogue')
edrQuarantineListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10950, 1, 1, 17, 1, 1), ).setIndexNames((0, "Netrake-MIB", "erdQLUniqueId"))
if mibBuilder.loadTexts: edrQuarantineListEntry.setStatus('current')
if mibBuilder.loadTexts: edrQuarantineListEntry.setDescription('Row Description')
erdQLUniqueId = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 17, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erdQLUniqueId.setStatus('current')
if mibBuilder.loadTexts: erdQLUniqueId.setDescription('Unique identifier for the call')
edrQLCallId = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 17, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edrQLCallId.setStatus('current')
if mibBuilder.loadTexts: edrQLCallId.setDescription('Call Id')
edrQLTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 17, 1, 1, 3), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edrQLTimestamp.setStatus('current')
if mibBuilder.loadTexts: edrQLTimestamp.setDescription('Date/time that the call was detected as rogue')
edrQLFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 17, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edrQLFrom.setStatus('current')
if mibBuilder.loadTexts: edrQLFrom.setDescription('From')
edrQLTo = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 17, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edrQLTo.setStatus('current')
if mibBuilder.loadTexts: edrQLTo.setDescription('To')
edrQLRequestURI = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 17, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edrQLRequestURI.setStatus('current')
if mibBuilder.loadTexts: edrQLRequestURI.setDescription('Request URI')
edrQLSrcMediaIpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 17, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edrQLSrcMediaIpPort.setStatus('current')
if mibBuilder.loadTexts: edrQLSrcMediaIpPort.setDescription('Source Media Ip Port')
edrQLDestMediaAnchorIpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 17, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edrQLDestMediaAnchorIpPort.setStatus('current')
if mibBuilder.loadTexts: edrQLDestMediaAnchorIpPort.setDescription('Destination Media Anchor IP Port')
edrQLDestMediaIpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 17, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edrQLDestMediaIpPort.setStatus('current')
if mibBuilder.loadTexts: edrQLDestMediaIpPort.setDescription('Destination Media IP Port')
edrQLRogueStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 17, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edrQLRogueStatus.setStatus('current')
if mibBuilder.loadTexts: edrQLRogueStatus.setDescription('Status of last check of traffic on the call; ROGUE means that traffic was detected; CLEAN means that no traffic was detected')
edrQLPerformGarbageCollection = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 17, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("default", 0), ("start", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: edrQLPerformGarbageCollection.setStatus('current')
if mibBuilder.loadTexts: edrQLPerformGarbageCollection.setDescription('Description')
erdQL2SrcMediaIpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 17, 1, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erdQL2SrcMediaIpPort.setStatus('current')
if mibBuilder.loadTexts: erdQL2SrcMediaIpPort.setDescription('Source Media IP port in opposite direction')
erdQL2DestMediaAnchorIpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 17, 1, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erdQL2DestMediaAnchorIpPort.setStatus('current')
if mibBuilder.loadTexts: erdQL2DestMediaAnchorIpPort.setDescription("opposite flow's media anchor IP port")
erdQL2DestMediaIpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 17, 1, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erdQL2DestMediaIpPort.setStatus('current')
if mibBuilder.loadTexts: erdQL2DestMediaIpPort.setDescription("Opposite flow's destination media IP port")
edrGarbageCollectionState = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 17, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edrGarbageCollectionState.setStatus('current')
if mibBuilder.loadTexts: edrGarbageCollectionState.setDescription('Garbage collection state: In Progress, Success')
edrLastGarbageCollection = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 17, 3), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edrLastGarbageCollection.setStatus('current')
if mibBuilder.loadTexts: edrLastGarbageCollection.setDescription('Date/time of last garbage collection')
edrNextTrafficCheck = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 17, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edrNextTrafficCheck.setStatus('current')
if mibBuilder.loadTexts: edrNextTrafficCheck.setDescription('Date/time of next check for traffic on each call in the quarantine list')
edrPerformGarbageCollection = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 17, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("default", 0), ("start", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: edrPerformGarbageCollection.setStatus('current')
if mibBuilder.loadTexts: edrPerformGarbageCollection.setDescription('This OID is used to command the nCite to perform EDR garbage collection')
edrGarbageCollectionStatus = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 17, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("success", 0), ("entryNotFound", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edrGarbageCollectionStatus.setStatus('current')
if mibBuilder.loadTexts: edrGarbageCollectionStatus.setDescription('Return status associated with last perform garbage collection request')
edrGarbageCollectionComplete = NotificationType((1, 3, 6, 1, 4, 1, 10950, 1, 1, 17, 7)).setObjects(("Netrake-MIB", "edrGarbageCollectionStatus"), ("Netrake-MIB", "edrGarbageCollectionState"), ("Netrake-MIB", "edrLastGarbageCollection"), ("Netrake-MIB", "edrNextTrafficCheck"))
if mibBuilder.loadTexts: edrGarbageCollectionComplete.setStatus('current')
if mibBuilder.loadTexts: edrGarbageCollectionComplete.setDescription('Description')
edrGarbageCollectionCompleteTrapAck = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 17, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notAck", 0), ("ack", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: edrGarbageCollectionCompleteTrapAck.setStatus('current')
if mibBuilder.loadTexts: edrGarbageCollectionCompleteTrapAck.setDescription('Description')
lrdTable = MibTable((1, 3, 6, 1, 4, 1, 10950, 1, 1, 17, 9), )
if mibBuilder.loadTexts: lrdTable.setStatus('current')
if mibBuilder.loadTexts: lrdTable.setDescription('Description')
lrdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10950, 1, 1, 17, 9, 1), ).setIndexNames((0, "Netrake-MIB", "lrdUniqueId"))
if mibBuilder.loadTexts: lrdEntry.setStatus('current')
if mibBuilder.loadTexts: lrdEntry.setDescription('Row Description')
lrdUniqueId = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 17, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lrdUniqueId.setStatus('current')
if mibBuilder.loadTexts: lrdUniqueId.setDescription('Unique identifier for the call')
lrdCallId = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 17, 9, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lrdCallId.setStatus('current')
if mibBuilder.loadTexts: lrdCallId.setDescription('Call ID')
lrdRequestURI = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 17, 9, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lrdRequestURI.setStatus('current')
if mibBuilder.loadTexts: lrdRequestURI.setDescription('Request-URI')
lrdFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 17, 9, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lrdFrom.setStatus('current')
if mibBuilder.loadTexts: lrdFrom.setDescription('From')
lrdTo = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 17, 9, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lrdTo.setStatus('current')
if mibBuilder.loadTexts: lrdTo.setDescription('To')
lrdCallerState = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 17, 9, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lrdCallerState.setStatus('current')
if mibBuilder.loadTexts: lrdCallerState.setDescription('Rogue/Clean')
lrdCallerMediaAnchorIPPort = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 17, 9, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lrdCallerMediaAnchorIPPort.setStatus('current')
if mibBuilder.loadTexts: lrdCallerMediaAnchorIPPort.setDescription('Media Anchor IP address and port')
lrdCallerDestIPPort = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 17, 9, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lrdCallerDestIPPort.setStatus('current')
if mibBuilder.loadTexts: lrdCallerDestIPPort.setDescription('Caller Destination IP address/port')
lrdCallerSourceIPPort1 = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 17, 9, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lrdCallerSourceIPPort1.setStatus('current')
if mibBuilder.loadTexts: lrdCallerSourceIPPort1.setDescription('Caller IP address/Port')
lrdCallerSourceIPPort2 = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 17, 9, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lrdCallerSourceIPPort2.setStatus('current')
if mibBuilder.loadTexts: lrdCallerSourceIPPort2.setDescription('Caller Source IP address/Port')
lrdCallerReason = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 17, 9, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lrdCallerReason.setStatus('current')
if mibBuilder.loadTexts: lrdCallerReason.setDescription('Caller Reason')
lrdCallerTimeDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 17, 9, 1, 12), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lrdCallerTimeDetect.setStatus('current')
if mibBuilder.loadTexts: lrdCallerTimeDetect.setDescription('Caller Time of Rogue Detection')
lrdCalleeState = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 17, 9, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lrdCalleeState.setStatus('current')
if mibBuilder.loadTexts: lrdCalleeState.setDescription('Rogue/Clean')
lrdCalleeMediaAnchorIPPort = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 17, 9, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lrdCalleeMediaAnchorIPPort.setStatus('current')
if mibBuilder.loadTexts: lrdCalleeMediaAnchorIPPort.setDescription('Callee Media Achor IP adress/Port')
lrdCalleeDestIPPort = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 17, 9, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lrdCalleeDestIPPort.setStatus('current')
if mibBuilder.loadTexts: lrdCalleeDestIPPort.setDescription('Callee Destination IP address/Port')
lrdCalleeSourceIPPort1 = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 17, 9, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lrdCalleeSourceIPPort1.setStatus('current')
if mibBuilder.loadTexts: lrdCalleeSourceIPPort1.setDescription('Callee Source IP Address/Port 1')
lrdCalleeSourceIPPort2 = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 17, 9, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lrdCalleeSourceIPPort2.setStatus('current')
if mibBuilder.loadTexts: lrdCalleeSourceIPPort2.setDescription('Callee Source IP Address/Port 2')
lrdCalleeReason = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 17, 9, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lrdCalleeReason.setStatus('current')
if mibBuilder.loadTexts: lrdCalleeReason.setDescription('Callee Reason')
lrdCalleeTimeDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 17, 9, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lrdCalleeTimeDetect.setStatus('current')
if mibBuilder.loadTexts: lrdCalleeTimeDetect.setDescription('Callee Time of rogue detection')
edrGarbageCollectionCompleteTrapAckSource = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 17, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: edrGarbageCollectionCompleteTrapAckSource.setStatus('current')
if mibBuilder.loadTexts: edrGarbageCollectionCompleteTrapAckSource.setDescription('Identifies the Snmp Manager which sets the trap ack.')
licenseTable = MibTable((1, 3, 6, 1, 4, 1, 10950, 1, 1, 18, 1), )
if mibBuilder.loadTexts: licenseTable.setStatus('current')
if mibBuilder.loadTexts: licenseTable.setDescription('Description')
licenseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10950, 1, 1, 18, 1, 1), ).setIndexNames((0, "Netrake-MIB", "licenseIndex"))
if mibBuilder.loadTexts: licenseEntry.setStatus('current')
if mibBuilder.loadTexts: licenseEntry.setDescription('Name value pair that describes the feature licensed')
licenseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 18, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseIndex.setStatus('current')
if mibBuilder.loadTexts: licenseIndex.setDescription('Column Description')
licenseFeatureName = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 18, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("globalCac", 0), ("redundancy", 1), ("nts", 2), ("rogueDetect", 3), ("totalCust", 4), ("totalNtsCust", 5), ("totalVlanCust", 6), ("globalReg", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseFeatureName.setStatus('deprecated')
if mibBuilder.loadTexts: licenseFeatureName.setDescription('Encumerated value that can be used to translate into a descriptive name of feature that was licensed')
licenseValue = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 18, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseValue.setStatus('current')
if mibBuilder.loadTexts: licenseValue.setDescription('Value associated with licensed feature. If the license is just to enable/disable, the value for enable = 1, the value for disable = 2.')
licenseInstallDate = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 18, 1, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseInstallDate.setStatus('current')
if mibBuilder.loadTexts: licenseInstallDate.setDescription('Date/time that the license was installed')
licenseExpirationDate = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 18, 1, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseExpirationDate.setStatus('current')
if mibBuilder.loadTexts: licenseExpirationDate.setDescription('Date/time that the license will expire. This field is currently not used.')
licenseFeatureDisplayName = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 18, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseFeatureDisplayName.setStatus('current')
if mibBuilder.loadTexts: licenseFeatureDisplayName.setDescription('The display name for the feature')
licenseFileName = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 18, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseFileName.setStatus('current')
if mibBuilder.loadTexts: licenseFileName.setDescription('Name of the license file on the nCite')
licenseFileChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 10950, 1, 1, 18, 3)).setObjects(("Netrake-MIB", "licenseFileName"))
if mibBuilder.loadTexts: licenseFileChangeTrap.setStatus('current')
if mibBuilder.loadTexts: licenseFileChangeTrap.setDescription('This trap is sent whenever a new license file is loaded onto the nCite')
licenseFileChangeTrapAck = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 18, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notAck", 0), ("ack", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: licenseFileChangeTrapAck.setStatus('current')
if mibBuilder.loadTexts: licenseFileChangeTrapAck.setDescription('This OID is used to acknowledge the receipt of the license file change trap.')
licenseFileChangeTrapAckSource = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 18, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: licenseFileChangeTrapAckSource.setStatus('current')
if mibBuilder.loadTexts: licenseFileChangeTrapAckSource.setDescription('Identifies the Snmp Manager which sets the trap ack.')
nCiteRipState = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 19, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nCiteRipState.setStatus('current')
if mibBuilder.loadTexts: nCiteRipState.setDescription('State of RIP on the nCite; off = RIP is not running; on = RIP is running')
nCiteRipPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 10950, 1, 1, 19, 2), )
if mibBuilder.loadTexts: nCiteRipPortConfigTable.setStatus('current')
if mibBuilder.loadTexts: nCiteRipPortConfigTable.setDescription('Ports are specified as primary or secondary')
nCiteRipPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10950, 1, 1, 19, 2, 1), ).setIndexNames((0, "Netrake-MIB", "nCiteRipPortSlotNum"), (0, "Netrake-MIB", "nCiteRipPortNum"))
if mibBuilder.loadTexts: nCiteRipPortConfigEntry.setStatus('current')
if mibBuilder.loadTexts: nCiteRipPortConfigEntry.setDescription('Row Description')
nCiteRipPortSlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 19, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nCiteRipPortSlotNum.setStatus('current')
if mibBuilder.loadTexts: nCiteRipPortSlotNum.setDescription('Card slot')
nCiteRipPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 19, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nCiteRipPortNum.setStatus('current')
if mibBuilder.loadTexts: nCiteRipPortNum.setDescription('Port ID')
nCiteRipPortPrimary = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 19, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("default", 0), ("primary", 1), ("secondary", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nCiteRipPortPrimary.setStatus('current')
if mibBuilder.loadTexts: nCiteRipPortPrimary.setDescription('Port is either primary or secondary')
nCiteRipInterfacesTable = MibTable((1, 3, 6, 1, 4, 1, 10950, 1, 1, 19, 3), )
if mibBuilder.loadTexts: nCiteRipInterfacesTable.setStatus('current')
if mibBuilder.loadTexts: nCiteRipInterfacesTable.setDescription('This table is the list of interfaces on which RIP is enabled')
nCiteRipInterfacesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10950, 1, 1, 19, 3, 1), ).setIndexNames((0, "Netrake-MIB", "nCiteRipInterafacesSlotNum"), (0, "Netrake-MIB", "nCiteRipInterfacesPortNum"), (0, "Netrake-MIB", "nCiteRipInterfacesIPAddr"))
if mibBuilder.loadTexts: nCiteRipInterfacesEntry.setStatus('current')
if mibBuilder.loadTexts: nCiteRipInterfacesEntry.setDescription('Row Description')
nCiteRipInterafacesSlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 19, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nCiteRipInterafacesSlotNum.setStatus('current')
if mibBuilder.loadTexts: nCiteRipInterafacesSlotNum.setDescription('Slot Number')
nCiteRipInterfacesPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 19, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nCiteRipInterfacesPortNum.setStatus('current')
if mibBuilder.loadTexts: nCiteRipInterfacesPortNum.setDescription('Port number')
nCiteRipInterfacesIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 19, 3, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nCiteRipInterfacesIPAddr.setStatus('current')
if mibBuilder.loadTexts: nCiteRipInterfacesIPAddr.setDescription('IP address for which RIP is enabed')
authConfigLocalOverride = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 20, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: authConfigLocalOverride.setStatus('current')
if mibBuilder.loadTexts: authConfigLocalOverride.setDescription('Local override is used to have a different RADIUS server configuration than the EMS')
authConfigRadiusRetryCount = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 20, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: authConfigRadiusRetryCount.setStatus('current')
if mibBuilder.loadTexts: authConfigRadiusRetryCount.setDescription('Number of retries for RADIUS Server communications')
authConfigRadiusRetryInterval = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 20, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: authConfigRadiusRetryInterval.setStatus('current')
if mibBuilder.loadTexts: authConfigRadiusRetryInterval.setDescription('Number of seconds to wait for RADIUS Server response')
authConfigRadiusServersTable = MibTable((1, 3, 6, 1, 4, 1, 10950, 1, 1, 20, 4), )
if mibBuilder.loadTexts: authConfigRadiusServersTable.setStatus('current')
if mibBuilder.loadTexts: authConfigRadiusServersTable.setDescription('Table containing the list of RADIUS servers configured on the nCite')
authConfigRadiusServersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10950, 1, 1, 20, 4, 1), ).setIndexNames((0, "Netrake-MIB", "authConfigRadiusServerIp"))
if mibBuilder.loadTexts: authConfigRadiusServersEntry.setStatus('current')
if mibBuilder.loadTexts: authConfigRadiusServersEntry.setDescription('Row Description')
authConfigRadiusServerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 20, 4, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authConfigRadiusServerIp.setStatus('current')
if mibBuilder.loadTexts: authConfigRadiusServerIp.setDescription('IP address of RADIUS Server')
authConfigRadiusServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 20, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authConfigRadiusServerPort.setStatus('current')
if mibBuilder.loadTexts: authConfigRadiusServerPort.setDescription("RADIUS Server's Port")
authConfigRadiusServerPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 20, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: authConfigRadiusServerPriority.setStatus('current')
if mibBuilder.loadTexts: authConfigRadiusServerPriority.setDescription('Priority (order) with which the RADIUS Server is used for user authentication.')
chasSerNum = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasSerNum.setStatus('current')
if mibBuilder.loadTexts: chasSerNum.setDescription('Serial number of the chassis')
chasLedStatus = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasLedStatus.setStatus('current')
if mibBuilder.loadTexts: chasLedStatus.setDescription('Bit array that contains the chassis LED status')
chasPOSTMode = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("fastPOST", 0), ("fullPost", 1))).clone('fastPOST')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasPOSTMode.setStatus('current')
if mibBuilder.loadTexts: chasPOSTMode.setDescription('Used to set the mode of the power on self test; Currently not supported.')
chasType = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("bff", 1), ("sff", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasType.setStatus('current')
if mibBuilder.loadTexts: chasType.setDescription('Description')
chasPwrSupplyTable = MibTable((1, 3, 6, 1, 4, 1, 10950, 1, 1, 1, 2, 1), )
if mibBuilder.loadTexts: chasPwrSupplyTable.setStatus('current')
if mibBuilder.loadTexts: chasPwrSupplyTable.setDescription('Table of power supplies')
chasPwrSupplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10950, 1, 1, 1, 2, 1, 1), ).setIndexNames((0, "Netrake-MIB", "chasPwrSupplyIndex"))
if mibBuilder.loadTexts: chasPwrSupplyEntry.setStatus('current')
if mibBuilder.loadTexts: chasPwrSupplyEntry.setDescription('Row Description')
chasPwrSupplyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 1, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasPwrSupplyIndex.setStatus('current')
if mibBuilder.loadTexts: chasPwrSupplyIndex.setDescription('Index to the power supply table')
chasPwrSupplyOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("normal", 2), ("fault", 3), ("notPresent", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasPwrSupplyOperStatus.setStatus('current')
if mibBuilder.loadTexts: chasPwrSupplyOperStatus.setDescription('Column Description')
chasPwrSupplyDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 1, 2, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasPwrSupplyDesc.setStatus('current')
if mibBuilder.loadTexts: chasPwrSupplyDesc.setDescription('Description of power supply')
chasPwrTrap = NotificationType((1, 3, 6, 1, 4, 1, 10950, 1, 1, 1, 2, 2)).setObjects(("Netrake-MIB", "chasPwrSupplyIndex"), ("Netrake-MIB", "chasPwrSupplyOperStatus"))
if mibBuilder.loadTexts: chasPwrTrap.setStatus('current')
if mibBuilder.loadTexts: chasPwrTrap.setDescription('This trap is sent whenever the status of a power supply changes')
chasPwrTrapAck = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notAck", 0), ("ack", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasPwrTrapAck.setStatus('current')
if mibBuilder.loadTexts: chasPwrTrapAck.setDescription('Chase power trap acknowledge flag')
chasPwrTrapAckSource = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 1, 2, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasPwrTrapAckSource.setStatus('current')
if mibBuilder.loadTexts: chasPwrTrapAckSource.setDescription('Identifies the Snmp Manager which sets the trap ack.')
chasFanTable = MibTable((1, 3, 6, 1, 4, 1, 10950, 1, 1, 1, 3, 1), )
if mibBuilder.loadTexts: chasFanTable.setStatus('current')
if mibBuilder.loadTexts: chasFanTable.setDescription('Table contains the list of fans')
chasFanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10950, 1, 1, 1, 3, 1, 1), ).setIndexNames((0, "Netrake-MIB", "chasFanIndex"))
if mibBuilder.loadTexts: chasFanEntry.setStatus('current')
if mibBuilder.loadTexts: chasFanEntry.setDescription('Row Description')
chasFanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 1, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasFanIndex.setStatus('current')
if mibBuilder.loadTexts: chasFanIndex.setDescription('Column Description')
chasFanOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("dev_ok", 0), ("dev_fail", 1), ("dev_present", 2), ("dev_not_present", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasFanOperStatus.setStatus('current')
if mibBuilder.loadTexts: chasFanOperStatus.setDescription('Operational status of the fan')
chasFanDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 1, 3, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasFanDescription.setStatus('current')
if mibBuilder.loadTexts: chasFanDescription.setDescription('Description of fan')
chasFanTrap = NotificationType((1, 3, 6, 1, 4, 1, 10950, 1, 1, 1, 3, 2)).setObjects(("Netrake-MIB", "chasFanIndex"), ("Netrake-MIB", "chasFanOperStatus"))
if mibBuilder.loadTexts: chasFanTrap.setStatus('current')
if mibBuilder.loadTexts: chasFanTrap.setDescription('This trap is sent whenever the status of a fan changes')
chasFanTrapAck = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 1, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notAck", 0), ("ack", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasFanTrapAck.setStatus('current')
if mibBuilder.loadTexts: chasFanTrapAck.setDescription('Chase fan trap acknowledge flag')
chasFanTrapAckSource = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 1, 3, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasFanTrapAckSource.setStatus('current')
if mibBuilder.loadTexts: chasFanTrapAckSource.setDescription('Identifies the Snmp Manager which sets the trap ack.')
chasBrdTable = MibTable((1, 3, 6, 1, 4, 1, 10950, 1, 1, 1, 4, 1), )
if mibBuilder.loadTexts: chasBrdTable.setStatus('current')
if mibBuilder.loadTexts: chasBrdTable.setDescription('Table containing the description of each board present in the chassis')
chasBrdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10950, 1, 1, 1, 4, 1, 1), ).setIndexNames((0, "Netrake-MIB", "chasBrdSlotNum"))
if mibBuilder.loadTexts: chasBrdEntry.setStatus('current')
if mibBuilder.loadTexts: chasBrdEntry.setDescription('Row Description')
chasBrdSlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasBrdSlotNum.setStatus('current')
if mibBuilder.loadTexts: chasBrdSlotNum.setDescription('Starting slot number of the board')
chasBrdDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 1, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasBrdDescription.setStatus('current')
if mibBuilder.loadTexts: chasBrdDescription.setDescription('Description of the board')
chasBrdType = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 0))).clone(namedValues=NamedValues(("managementProc", 1), ("controlProc", 2), ("netrakeControlProcessor", 3), ("gigE", 4), ("fastEther", 5), ("noBoardPresent", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasBrdType.setStatus('current')
if mibBuilder.loadTexts: chasBrdType.setDescription('Board type')
chasBrdOccSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 1, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasBrdOccSlots.setStatus('current')
if mibBuilder.loadTexts: chasBrdOccSlots.setDescription('Number of slots that the board occupies')
chasBrdMaxPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 1, 4, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasBrdMaxPorts.setStatus('current')
if mibBuilder.loadTexts: chasBrdMaxPorts.setDescription('Number of ports that the card supports')
chasBrdSlotLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 1, 4, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasBrdSlotLabel.setStatus('current')
if mibBuilder.loadTexts: chasBrdSlotLabel.setDescription('Label on the chassis')
chasBrdStatusLeds = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 1, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasBrdStatusLeds.setStatus('current')
if mibBuilder.loadTexts: chasBrdStatusLeds.setDescription('Bit-map that contains the value of the front panel LEDS.')
chasBrdState = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 1, 4, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasBrdState.setStatus('current')
if mibBuilder.loadTexts: chasBrdState.setDescription('Board state')
chasBrdPwr = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 1, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("default", 0), ("powerOn", 1), ("powerOff", 2))).clone('powerOn')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasBrdPwr.setStatus('current')
if mibBuilder.loadTexts: chasBrdPwr.setDescription('Is used to power on and off line cards and indicates power state of board')
chasBrdIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 1, 4, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasBrdIfIndex.setStatus('current')
if mibBuilder.loadTexts: chasBrdIfIndex.setDescription('This is the value of the index to the IF table of the first port of the line card')
chasBrdSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 1, 4, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasBrdSerialNum.setStatus('current')
if mibBuilder.loadTexts: chasBrdSerialNum.setDescription('Serial number of the board')
chasBrdReset = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 1, 4, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("default", 0), ("resetCold", 1), ("resetWarm", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasBrdReset.setStatus('current')
if mibBuilder.loadTexts: chasBrdReset.setDescription('This OID is set when the nCite is commanded to perform a board reset')
chasBrdStateChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 10950, 1, 1, 1, 4, 2)).setObjects(("Netrake-MIB", "chasBrdSlotNum"), ("Netrake-MIB", "chasBrdType"), ("Netrake-MIB", "chasBrdState"))
if mibBuilder.loadTexts: chasBrdStateChangeTrap.setStatus('current')
if mibBuilder.loadTexts: chasBrdStateChangeTrap.setDescription('This trap is sent when the state of line card changes state')
chasBrdStateChangeTrapAck = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 1, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notAck", 0), ("ack", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasBrdStateChangeTrapAck.setStatus('current')
if mibBuilder.loadTexts: chasBrdStateChangeTrapAck.setDescription('Chase board state change trap acknowledge flag')
chasBrdStateChangeTrapAckSource = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 1, 4, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasBrdStateChangeTrapAckSource.setStatus('current')
if mibBuilder.loadTexts: chasBrdStateChangeTrapAckSource.setDescription('Identifies the Snmp Manager which sets the trap ack.')
totalPacketsXmitCPA = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalPacketsXmitCPA.setStatus('current')
if mibBuilder.loadTexts: totalPacketsXmitCPA.setDescription('Total number of packets transmitted by CP side A')
numPacketsDiscardCPA = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numPacketsDiscardCPA.setStatus('current')
if mibBuilder.loadTexts: numPacketsDiscardCPA.setDescription('Number of packets discarded by CP side A')
totalPacketsXmitCPB = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalPacketsXmitCPB.setStatus('current')
if mibBuilder.loadTexts: totalPacketsXmitCPB.setDescription('Total number of packets transmitted by CP side B')
numPacketsDiscardCPB = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numPacketsDiscardCPB.setStatus('current')
if mibBuilder.loadTexts: numPacketsDiscardCPB.setDescription('Number of packets discarded by CP side B')
totalPacketsXmit = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalPacketsXmit.setStatus('current')
if mibBuilder.loadTexts: totalPacketsXmit.setDescription("This counter applies to nCites that do not have 'sides'")
totalPacketsDiscard = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalPacketsDiscard.setStatus('current')
if mibBuilder.loadTexts: totalPacketsDiscard.setDescription("This counter applies to nCites that do have have 'sides'")
gigEStatsTable = MibTable((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 2, 1), )
if mibBuilder.loadTexts: gigEStatsTable.setStatus('current')
if mibBuilder.loadTexts: gigEStatsTable.setDescription('Table containing the counters available for every gigE card in the nCite.')
gigEStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 2, 1, 1), ).setIndexNames((0, "Netrake-MIB", "gigEStatsPortIndex"), (0, "Netrake-MIB", "gigEStatsSlotNum"))
if mibBuilder.loadTexts: gigEStatsEntry.setStatus('current')
if mibBuilder.loadTexts: gigEStatsEntry.setDescription('Row Description')
gigEStatsPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gigEStatsPortIndex.setStatus('current')
if mibBuilder.loadTexts: gigEStatsPortIndex.setDescription('Index to table')
gigEStatsSlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gigEStatsSlotNum.setStatus('current')
if mibBuilder.loadTexts: gigEStatsSlotNum.setDescription('Slot number of gigE line card that the statistics correspond')
linkStatusChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 2, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkStatusChanges.setStatus('current')
if mibBuilder.loadTexts: linkStatusChanges.setDescription('Total number of link status changes')
framesRcvdOkCount = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 2, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: framesRcvdOkCount.setStatus('current')
if mibBuilder.loadTexts: framesRcvdOkCount.setDescription('Total number of good frames received')
octetsRcvdOkCount = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 2, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: octetsRcvdOkCount.setStatus('current')
if mibBuilder.loadTexts: octetsRcvdOkCount.setDescription('Total number of good octets received')
framesRcvdCount = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 2, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: framesRcvdCount.setStatus('current')
if mibBuilder.loadTexts: framesRcvdCount.setDescription('Total number of frames received')
octetsRcvdCount = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 2, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: octetsRcvdCount.setStatus('current')
if mibBuilder.loadTexts: octetsRcvdCount.setDescription('Total number of octets received')
frameSeqErrCount = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 2, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frameSeqErrCount.setStatus('current')
if mibBuilder.loadTexts: frameSeqErrCount.setDescription('Total number of frame sequence errors')
lostFramesMacErrCount = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 2, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lostFramesMacErrCount.setStatus('current')
if mibBuilder.loadTexts: lostFramesMacErrCount.setDescription('Total number of frames lost due to internal MAX errors')
rcvdFrames64Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 2, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvdFrames64Octets.setStatus('current')
if mibBuilder.loadTexts: rcvdFrames64Octets.setDescription('Description')
octetsRcvd1519toMax = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 2, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: octetsRcvd1519toMax.setStatus('current')
if mibBuilder.loadTexts: octetsRcvd1519toMax.setDescription('Description')
xmitFrames64Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 2, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmitFrames64Octets.setStatus('current')
if mibBuilder.loadTexts: xmitFrames64Octets.setDescription('Description')
octetsXmit1024to1518 = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 2, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: octetsXmit1024to1518.setStatus('current')
if mibBuilder.loadTexts: octetsXmit1024to1518.setDescription('Description')
octetsXmitCount = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 2, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: octetsXmitCount.setStatus('current')
if mibBuilder.loadTexts: octetsXmitCount.setDescription('Number of octets transmitted on the physical port')
unicastFramesXmitOk = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 2, 1, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unicastFramesXmitOk.setStatus('current')
if mibBuilder.loadTexts: unicastFramesXmitOk.setDescription('Number of unicast frames transmitted OK on the physical port')
unicastFramesRcvdOk = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 2, 1, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unicastFramesRcvdOk.setStatus('current')
if mibBuilder.loadTexts: unicastFramesRcvdOk.setDescription('Unicast Frames Received OK')
broadcastFramesXmitOk = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 2, 1, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: broadcastFramesXmitOk.setStatus('current')
if mibBuilder.loadTexts: broadcastFramesXmitOk.setDescription('Broadcast Frames Transmitted OK')
broadcastFramesRcvdOk = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 2, 1, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: broadcastFramesRcvdOk.setStatus('current')
if mibBuilder.loadTexts: broadcastFramesRcvdOk.setDescription('Broadcast Frames Received OK')
multicastFramesXmitOk = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 2, 1, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multicastFramesXmitOk.setStatus('current')
if mibBuilder.loadTexts: multicastFramesXmitOk.setDescription('Multicast Frames tranmistted OK')
multicastFramesRcvdOk = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 2, 1, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multicastFramesRcvdOk.setStatus('current')
if mibBuilder.loadTexts: multicastFramesRcvdOk.setDescription('Multicast Frames Received OK')
octetsRcvd65to127 = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 2, 1, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: octetsRcvd65to127.setStatus('current')
if mibBuilder.loadTexts: octetsRcvd65to127.setDescription('65 To 127 Octet Frames Received')
octetsXmit65to127 = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 2, 1, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: octetsXmit65to127.setStatus('current')
if mibBuilder.loadTexts: octetsXmit65to127.setDescription('128 To 255 Octet Frames Transmitted')
octetRcvd128to255 = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 2, 1, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: octetRcvd128to255.setStatus('current')
if mibBuilder.loadTexts: octetRcvd128to255.setDescription('128 To 255 Octet Frames Received')
octetsXmit128to255 = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 2, 1, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: octetsXmit128to255.setStatus('current')
if mibBuilder.loadTexts: octetsXmit128to255.setDescription('128 To 255 Octet Frames Transmitted')
octetsRcvd256to511 = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 2, 1, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: octetsRcvd256to511.setStatus('current')
if mibBuilder.loadTexts: octetsRcvd256to511.setDescription('Description 256 To 511 Octet Frames Received')
octetsXmit256to511 = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 2, 1, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: octetsXmit256to511.setStatus('current')
if mibBuilder.loadTexts: octetsXmit256to511.setDescription('256 To 511 Octet Frames Transmitted')
octetsRcvd512to1023 = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 2, 1, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: octetsRcvd512to1023.setStatus('current')
if mibBuilder.loadTexts: octetsRcvd512to1023.setDescription('512 To 1023 Octet Frames Received')
octetsXmit512to1023 = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 2, 1, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: octetsXmit512to1023.setStatus('current')
if mibBuilder.loadTexts: octetsXmit512to1023.setDescription('512 To 1023 Octet Frames Transmitted')
octetsRcvd1024to1518 = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 2, 1, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: octetsRcvd1024to1518.setStatus('current')
if mibBuilder.loadTexts: octetsRcvd1024to1518.setDescription('1024 To 1518 Octet Frames Received')
octetsXmit1519toMax = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 2, 1, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: octetsXmit1519toMax.setStatus('current')
if mibBuilder.loadTexts: octetsXmit1519toMax.setDescription('1519 To Max Octed Frames Transmitted')
underSizeFramesRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 2, 1, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: underSizeFramesRcvd.setStatus('current')
if mibBuilder.loadTexts: underSizeFramesRcvd.setDescription('Under Sized Frames Received')
jabbersRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 2, 1, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jabbersRcvd.setStatus('current')
if mibBuilder.loadTexts: jabbersRcvd.setDescription('Jabbers Received')
serviceStatsTable = MibTable((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 3, 1), )
if mibBuilder.loadTexts: serviceStatsTable.setStatus('current')
if mibBuilder.loadTexts: serviceStatsTable.setDescription('Description')
serviceStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 3, 1, 1), ).setIndexNames((0, "Netrake-MIB", "serviceStatsPortIndex"), (0, "Netrake-MIB", "serviceStatsSlotId"))
if mibBuilder.loadTexts: serviceStatsEntry.setStatus('current')
if mibBuilder.loadTexts: serviceStatsEntry.setDescription('Row Description')
serviceStatsPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceStatsPortIndex.setStatus('current')
if mibBuilder.loadTexts: serviceStatsPortIndex.setDescription('Maps to a physical port on the nCite')
serviceStatsSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceStatsSlotId.setStatus('current')
if mibBuilder.loadTexts: serviceStatsSlotId.setDescription('Slot number of the line card')
realTimeTotalPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 3, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: realTimeTotalPackets.setStatus('current')
if mibBuilder.loadTexts: realTimeTotalPackets.setDescription('Total number of real time packets processed')
realTimeDiscardPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 3, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: realTimeDiscardPackets.setStatus('current')
if mibBuilder.loadTexts: realTimeDiscardPackets.setDescription('Number of real time packets discarded')
nrtTotalPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 3, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nrtTotalPackets.setStatus('current')
if mibBuilder.loadTexts: nrtTotalPackets.setDescription('Total number of near real time packets processed')
nrtDiscardPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 3, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nrtDiscardPackets.setStatus('current')
if mibBuilder.loadTexts: nrtDiscardPackets.setDescription('Number of near real time packets discarded')
bestEffortTotalPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 3, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bestEffortTotalPackets.setStatus('current')
if mibBuilder.loadTexts: bestEffortTotalPackets.setDescription('Total number of best effort packets processed')
bestEffortDiscardPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 3, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bestEffortDiscardPackets.setStatus('current')
if mibBuilder.loadTexts: bestEffortDiscardPackets.setDescription('Number of best effort packets discarded')
redundPairedModeTimeTicks = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 4, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: redundPairedModeTimeTicks.setStatus('current')
if mibBuilder.loadTexts: redundPairedModeTimeTicks.setDescription('Number of time ticks spent in duplex mode')
redundRecoveryModeTimeTicks = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 4, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: redundRecoveryModeTimeTicks.setStatus('current')
if mibBuilder.loadTexts: redundRecoveryModeTimeTicks.setDescription('Number of time ticks spent in recovery mode')
redundNumRedundLinkFailures = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 4, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: redundNumRedundLinkFailures.setStatus('current')
if mibBuilder.loadTexts: redundNumRedundLinkFailures.setDescription('Number of times the out of band link for redundancy has failed')
redundActiveMateCalls = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 4, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: redundActiveMateCalls.setStatus('current')
if mibBuilder.loadTexts: redundActiveMateCalls.setDescription('Number of flows established flows associated with the mate system')
redundActiveMateRegist = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 4, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: redundActiveMateRegist.setStatus('current')
if mibBuilder.loadTexts: redundActiveMateRegist.setDescription('Total number of active registrations')
policyCountersTable = MibTable((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 5, 1), )
if mibBuilder.loadTexts: policyCountersTable.setStatus('current')
if mibBuilder.loadTexts: policyCountersTable.setDescription('Policy statistics.')
policyCountersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 5, 1, 1), ).setIndexNames((0, "Netrake-MIB", "policyIndex"))
if mibBuilder.loadTexts: policyCountersEntry.setStatus('current')
if mibBuilder.loadTexts: policyCountersEntry.setDescription('Row Description')
policyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 5, 1, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: policyIndex.setStatus('current')
if mibBuilder.loadTexts: policyIndex.setDescription('This field reflects the policy name.')
policyTotalPacketsA = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 5, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: policyTotalPacketsA.setStatus('current')
if mibBuilder.loadTexts: policyTotalPacketsA.setDescription('Total number of packets processed for the policy on side A')
policyTotalPacketsB = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 5, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: policyTotalPacketsB.setStatus('current')
if mibBuilder.loadTexts: policyTotalPacketsB.setDescription('Total number of packets processed for the policy on side B')
policyTotalPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 5, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: policyTotalPackets.setStatus('current')
if mibBuilder.loadTexts: policyTotalPackets.setDescription("This field applies to nCites that do not have 'sides'")
policyStatsReset = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: policyStatsReset.setStatus('current')
if mibBuilder.loadTexts: policyStatsReset.setDescription('Set to reset when the policy configuration is changed')
sipStatCallsInitiating = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 6, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipStatCallsInitiating.setStatus('current')
if mibBuilder.loadTexts: sipStatCallsInitiating.setDescription('Real-time stat of calls that are being initiated after receiving the initial INVITE SIP request.')
sipStatNonLocalActiveCalls = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 6, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipStatNonLocalActiveCalls.setStatus('deprecated')
if mibBuilder.loadTexts: sipStatNonLocalActiveCalls.setDescription('Real-time stat of calls that are currently in the ACTIVE state that are non-local calls')
sipStatLocalActiveCalls = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 6, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipStatLocalActiveCalls.setStatus('current')
if mibBuilder.loadTexts: sipStatLocalActiveCalls.setDescription('Real-time stat that is the number of active calls that are local')
sipStatTermCalls = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 6, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipStatTermCalls.setStatus('current')
if mibBuilder.loadTexts: sipStatTermCalls.setDescription('Real-time stat that is the number of calls in the TERMINATING state after a BYE SIP request.')
sipStatPeakActiveCalls = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 6, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipStatPeakActiveCalls.setStatus('deprecated')
if mibBuilder.loadTexts: sipStatPeakActiveCalls.setDescription('Peak number of active calls since the last nCite reboot.')
sipStatTotalActiveCalls = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 6, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipStatTotalActiveCalls.setStatus('current')
if mibBuilder.loadTexts: sipStatTotalActiveCalls.setDescription('Total number of active calls. sipStatLocalActvieCalls + sipStatNonLocalActiveCalls')
sipStatCallsCompletedSuccess = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 6, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipStatCallsCompletedSuccess.setStatus('current')
if mibBuilder.loadTexts: sipStatCallsCompletedSuccess.setDescription('Total number of calls that have been completed successfully since the last time the nCIte was reboot.')
sipStatCallsFailed = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 6, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipStatCallsFailed.setStatus('current')
if mibBuilder.loadTexts: sipStatCallsFailed.setDescription('Total number of calls that completed due to some failure since the last time the nCite was reboot.')
sipStatCallsAbandoned = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 6, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipStatCallsAbandoned.setStatus('current')
if mibBuilder.loadTexts: sipStatCallsAbandoned.setDescription('Total number of calls that did not transition to active state because of normal termination since the last time the nCIte was reboot.')
sipStatCallsDropped = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 6, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipStatCallsDropped.setStatus('deprecated')
if mibBuilder.loadTexts: sipStatCallsDropped.setDescription('Total number of calls that were dropped due to exceeding adminision control since the last time the nCite was reboot.')
sipStatCallsDegraded = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 6, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipStatCallsDegraded.setStatus('current')
if mibBuilder.loadTexts: sipStatCallsDegraded.setDescription('Total number of calls that were processed in a degraded state due to exceeding admission control since the last time the nCIte was reboot.')
sipStatAuthFailures = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 6, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipStatAuthFailures.setStatus('deprecated')
if mibBuilder.loadTexts: sipStatAuthFailures.setDescription('Total number of calls that were rejected because they could not be autenticated against a valid customer definition since the last time the nCite was reboot.')
sipStatCallMediaTimeouts = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 6, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipStatCallMediaTimeouts.setStatus('current')
if mibBuilder.loadTexts: sipStatCallMediaTimeouts.setDescription('Total number of times a call was terminated because of a RTP media timeout since the last time the nCIte was reboot.')
sipStatCallInitTimeouts = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 6, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipStatCallInitTimeouts.setStatus('current')
if mibBuilder.loadTexts: sipStatCallInitTimeouts.setDescription('Total number of times a SIP timout occurred after the receipt of the initial INVITE and before the ACK is received for the INVITE since the last time the nCite was reboot.')
sipStatTermTimeouts = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 6, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipStatTermTimeouts.setStatus('current')
if mibBuilder.loadTexts: sipStatTermTimeouts.setDescription('Total number of times a SIP timout occurred after the receipt of the BYE and before the ACK is received for the BYE since the last time the nCIte was reboot.')
sipStatMsgErrs = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 6, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipStatMsgErrs.setStatus('deprecated')
if mibBuilder.loadTexts: sipStatMsgErrs.setDescription('Total number of times a SIP error message was received since the last time the nCite was reboot.')
sipStatCallsProcessed = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 6, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipStatCallsProcessed.setStatus('current')
if mibBuilder.loadTexts: sipStatCallsProcessed.setDescription('Total number of calls that have been processed since the nCIte was last reboot. This iwll be the sum of sipStatCallsCompletedSuccess, sipStatCallsFailed, sipStatCallsAbandoned, sipStatCallsDropped, sipStatAuthFailures')
sipStatPeakNonLocalCalls = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 6, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipStatPeakNonLocalCalls.setStatus('deprecated')
if mibBuilder.loadTexts: sipStatPeakNonLocalCalls.setDescription('Real-time statistics that is the peak number of non-local active calls.')
sipStatPeakLocalCalls = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 6, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipStatPeakLocalCalls.setStatus('current')
if mibBuilder.loadTexts: sipStatPeakLocalCalls.setDescription('Real-time statistic that is the peak number of active local calls.')
sipStatRedirectSuccess = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 6, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipStatRedirectSuccess.setStatus('deprecated')
if mibBuilder.loadTexts: sipStatRedirectSuccess.setDescription('Total number of successful redirects')
sipStatRedirectFailures = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 6, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipStatRedirectFailures.setStatus('deprecated')
if mibBuilder.loadTexts: sipStatRedirectFailures.setDescription('Total number of failed redirects')
sipStatMessageRoutingFailures = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 6, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipStatMessageRoutingFailures.setStatus('deprecated')
if mibBuilder.loadTexts: sipStatMessageRoutingFailures.setDescription('Failures due to route lookup - no enabled route found')
sipStatAuthenticationChallenges = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 6, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipStatAuthenticationChallenges.setStatus('current')
if mibBuilder.loadTexts: sipStatAuthenticationChallenges.setDescription('Number of Authentication Challenges')
sipStatRTPFWTraversalTimeouts = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 6, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipStatRTPFWTraversalTimeouts.setStatus('current')
if mibBuilder.loadTexts: sipStatRTPFWTraversalTimeouts.setDescription('Number of RTP forward traversal timeouts')
sipStatMessagesReroutedToMate = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 6, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipStatMessagesReroutedToMate.setStatus('deprecated')
if mibBuilder.loadTexts: sipStatMessagesReroutedToMate.setDescription('Number of messages rerouted to mate')
sipStatSameSideActiveCalls = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 6, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipStatSameSideActiveCalls.setStatus('current')
if mibBuilder.loadTexts: sipStatSameSideActiveCalls.setDescription('Same side actvie calls')
sipStatNormalActiveCalls = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 6, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipStatNormalActiveCalls.setStatus('current')
if mibBuilder.loadTexts: sipStatNormalActiveCalls.setDescription('Normal active calls')
sipStatPeakSameSideActiveCalls = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 6, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipStatPeakSameSideActiveCalls.setStatus('current')
if mibBuilder.loadTexts: sipStatPeakSameSideActiveCalls.setDescription('Peak same side active calls')
sipStatPeakNormalActiveCalls = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 6, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipStatPeakNormalActiveCalls.setStatus('current')
if mibBuilder.loadTexts: sipStatPeakNormalActiveCalls.setDescription('Peak normal active calls')
sipStatCurrentFaxSessions = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 6, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipStatCurrentFaxSessions.setStatus('deprecated')
if mibBuilder.loadTexts: sipStatCurrentFaxSessions.setDescription('Current number of FAX Sessions that are active')
sipStatPeakFaxSessions = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 6, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipStatPeakFaxSessions.setStatus('deprecated')
if mibBuilder.loadTexts: sipStatPeakFaxSessions.setDescription('Maximum number of FAX sessions active at any point in time since the statistics were last reset')
sipStatTotalFaxSessions = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 6, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipStatTotalFaxSessions.setStatus('deprecated')
if mibBuilder.loadTexts: sipStatTotalFaxSessions.setDescription('The total number of FAX sessions that have occurred since the statistics were last reset')
sipStatPeakTotalActiveCalls = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 6, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipStatPeakTotalActiveCalls.setStatus('current')
if mibBuilder.loadTexts: sipStatPeakTotalActiveCalls.setDescription('Peak number of total active calls on the nCite since the statistics were last reset')
vlanStatsTable = MibTable((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 7, 2), )
if mibBuilder.loadTexts: vlanStatsTable.setStatus('current')
if mibBuilder.loadTexts: vlanStatsTable.setDescription('Description')
vlanStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 7, 2, 1), ).setIndexNames((0, "Netrake-MIB", "vlanStatsSlotNum"), (0, "Netrake-MIB", "vlanStatsPortNum"), (0, "Netrake-MIB", "vlanStatsVlanLabel"))
if mibBuilder.loadTexts: vlanStatsEntry.setStatus('current')
if mibBuilder.loadTexts: vlanStatsEntry.setDescription('Row Description')
vlanStatsSlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanStatsSlotNum.setStatus('current')
if mibBuilder.loadTexts: vlanStatsSlotNum.setDescription('Slot number of line card')
vlanStatsPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 7, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanStatsPortNum.setStatus('current')
if mibBuilder.loadTexts: vlanStatsPortNum.setDescription('Port number for the vlan stats')
vlanStatsVlanLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 7, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanStatsVlanLabel.setStatus('current')
if mibBuilder.loadTexts: vlanStatsVlanLabel.setDescription('Unique identifier of the VLAN')
vlanTotalPacketsXmit = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 7, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanTotalPacketsXmit.setStatus('current')
if mibBuilder.loadTexts: vlanTotalPacketsXmit.setDescription('Number of packets transmitted on a VLAN')
vlanTotalPacketsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 7, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanTotalPacketsRcvd.setStatus('current')
if mibBuilder.loadTexts: vlanTotalPacketsRcvd.setDescription('Number of packets receivedon the given VLAN')
vlanStatsReset = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("default", 0), ("reset", 1))).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanStatsReset.setStatus('current')
if mibBuilder.loadTexts: vlanStatsReset.setDescription('Set to reset when the policy image changes')
custSipStatsTable = MibTable((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 8, 1), )
if mibBuilder.loadTexts: custSipStatsTable.setStatus('current')
if mibBuilder.loadTexts: custSipStatsTable.setDescription('Description')
custSipStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 8, 1, 1), ).setIndexNames((0, "Netrake-MIB", "custSipStatId"))
if mibBuilder.loadTexts: custSipStatsEntry.setStatus('current')
if mibBuilder.loadTexts: custSipStatsEntry.setDescription('Row Description')
custSipStatId = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 8, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custSipStatId.setStatus('current')
if mibBuilder.loadTexts: custSipStatId.setDescription('Customer ID as it is defined in the EMS database and the XML file provisioned to the nCIte')
custSipStatCallsInitiating = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 8, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custSipStatCallsInitiating.setStatus('current')
if mibBuilder.loadTexts: custSipStatCallsInitiating.setDescription('Real-time stat of calls that are being initiated after receiving the initial INVITE SIP request.')
custSipStatNonLocalActiveCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 8, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custSipStatNonLocalActiveCalls.setStatus('deprecated')
if mibBuilder.loadTexts: custSipStatNonLocalActiveCalls.setDescription('Real-time stat of calls that are currently in the ACTIVE state that are non-local calls')
custSipStatLocalActiveCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 8, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custSipStatLocalActiveCalls.setStatus('current')
if mibBuilder.loadTexts: custSipStatLocalActiveCalls.setDescription('Real-time stat that is the number of active calls that are local')
custSipStatTermCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 8, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custSipStatTermCalls.setStatus('current')
if mibBuilder.loadTexts: custSipStatTermCalls.setDescription('Real-time stat that is the number of calls in the TERMINATING state after a BYE SIP request.')
custSipStatPeakActiveCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 8, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custSipStatPeakActiveCalls.setStatus('deprecated')
if mibBuilder.loadTexts: custSipStatPeakActiveCalls.setDescription('Peak number of active calls since the last nCite reboot.')
custSipStatTotalActiveCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 8, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custSipStatTotalActiveCalls.setStatus('current')
if mibBuilder.loadTexts: custSipStatTotalActiveCalls.setDescription('Total number of active calls. custSipStatLocalActvieCalls + custSipStatNonLocalActiveCalls')
custSipStatCallsCompletedSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 8, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custSipStatCallsCompletedSuccess.setStatus('current')
if mibBuilder.loadTexts: custSipStatCallsCompletedSuccess.setDescription('Total number of calls that have been completed successfully since the last time the nCIte was reboot.')
custSipStatCallsFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 8, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custSipStatCallsFailed.setStatus('current')
if mibBuilder.loadTexts: custSipStatCallsFailed.setDescription('Total number of calls that completed due to some failure since the last time the nCite was reboot.')
custSipStatCallsAbandoned = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 8, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custSipStatCallsAbandoned.setStatus('current')
if mibBuilder.loadTexts: custSipStatCallsAbandoned.setDescription('Total number of calls that did not transition to active state because of normal termination since the last time the nCIte was reboot.')
custSipStatCallsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 8, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custSipStatCallsDropped.setStatus('deprecated')
if mibBuilder.loadTexts: custSipStatCallsDropped.setDescription('Total number of calls that were dropped due to exceeding adminision control since the last time the nCite was reboot.')
custSipStatCallsDegraded = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 8, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custSipStatCallsDegraded.setStatus('current')
if mibBuilder.loadTexts: custSipStatCallsDegraded.setDescription('Total number of calls that were processed in a degraded state due to exceeding admission control since the last time the nCIte was reboot.')
custSipStatCallMediaTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 8, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custSipStatCallMediaTimeouts.setStatus('current')
if mibBuilder.loadTexts: custSipStatCallMediaTimeouts.setDescription('Total number of times a call was terminated because of a RTP media timeout since the last time the nCIte was reboot.')
custSipStatCallInitTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 8, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custSipStatCallInitTimeouts.setStatus('current')
if mibBuilder.loadTexts: custSipStatCallInitTimeouts.setDescription('Total number of times a SIP timout occurred after the receipt of the initial INVITE and before the ACK is received for the INVITE since the last time the nCite was reboot.')
custSipStatTermTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 8, 1, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custSipStatTermTimeouts.setStatus('current')
if mibBuilder.loadTexts: custSipStatTermTimeouts.setDescription('Total number of times a SIP timout occurred after the receipt of the BYE and before the ACK is received for the BYE since the last time the nCIte was reboot.')
custSipStatCallsProcessed = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 8, 1, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custSipStatCallsProcessed.setStatus('current')
if mibBuilder.loadTexts: custSipStatCallsProcessed.setDescription('Total number of calls that have been processed since the nCIte was last reboot. This iwll be the sum of custSipStatCallsCompletedSuccess, custSipStatCallsFailed, custSipStatCallsAbandoned, custSipStatCallsDropped, custSipStatAuthFailures')
custSipPeakNonLocalCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 8, 1, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custSipPeakNonLocalCalls.setStatus('deprecated')
if mibBuilder.loadTexts: custSipPeakNonLocalCalls.setDescription('Peak number of non-local calls since the ncite was reboot or the statistics were cleared')
custSipPeakLocalCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 8, 1, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custSipPeakLocalCalls.setStatus('current')
if mibBuilder.loadTexts: custSipPeakLocalCalls.setDescription('Peak number of local calls')
custSipAuthenticationChallenges = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 8, 1, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custSipAuthenticationChallenges.setStatus('current')
if mibBuilder.loadTexts: custSipAuthenticationChallenges.setDescription('Number of authentication challanges')
custSipRTPFWTraversalTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 8, 1, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custSipRTPFWTraversalTimeouts.setStatus('current')
if mibBuilder.loadTexts: custSipRTPFWTraversalTimeouts.setDescription('Number of RTP forward traversal timeouts')
custSipSameSideActiveCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 8, 1, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custSipSameSideActiveCalls.setStatus('current')
if mibBuilder.loadTexts: custSipSameSideActiveCalls.setDescription('Number of same side active calls')
custSipNormalActiveCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 8, 1, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custSipNormalActiveCalls.setStatus('current')
if mibBuilder.loadTexts: custSipNormalActiveCalls.setDescription('Number of normal active calls')
custSipPeakNormalActiveCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 8, 1, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custSipPeakNormalActiveCalls.setStatus('current')
if mibBuilder.loadTexts: custSipPeakNormalActiveCalls.setDescription('Maximum number of active normal calls since the statistics were last reset.')
custSipPeakTotalActive = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 8, 1, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custSipPeakTotalActive.setStatus('current')
if mibBuilder.loadTexts: custSipPeakTotalActive.setDescription('Peak number of total active calls since the statistics were last reset')
nCiteSDRCollectionCycle = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 10, 1), Integer32().clone(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nCiteSDRCollectionCycle.setStatus('current')
if mibBuilder.loadTexts: nCiteSDRCollectionCycle.setDescription('The number of minutes that data is collected per file.')
nCIteSDRLastSent = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 10, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nCIteSDRLastSent.setStatus('current')
if mibBuilder.loadTexts: nCIteSDRLastSent.setDescription('Date and time that the last SDR file was sent to the EMS')
nCiteSDREnable = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 10, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nCiteSDREnable.setStatus('current')
if mibBuilder.loadTexts: nCiteSDREnable.setDescription('Indicates whether SDR generation is enabled')
nCiteSDRSentTrap = NotificationType((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 10, 4)).setObjects(("Netrake-MIB", "nCIteSDRLastSent"))
if mibBuilder.loadTexts: nCiteSDRSentTrap.setStatus('current')
if mibBuilder.loadTexts: nCiteSDRSentTrap.setDescription('Description')
nCiteSDRSentTrapAck = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 10, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notAck", 0), ("ack", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nCiteSDRSentTrapAck.setStatus('current')
if mibBuilder.loadTexts: nCiteSDRSentTrapAck.setDescription('nCite SDR sent trap acknowledge flag')
nCiteSDRSentTrapAckSource = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 10, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nCiteSDRSentTrapAckSource.setStatus('current')
if mibBuilder.loadTexts: nCiteSDRSentTrapAckSource.setDescription('Identifies the Snmp Manager which sets the trap ack.')
regStatNumInitiating = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 11, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: regStatNumInitiating.setStatus('current')
if mibBuilder.loadTexts: regStatNumInitiating.setDescription('Real-time statistic that is the number of Registrations that are currently in the Initiated state.')
regStatNumActive = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 11, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: regStatNumActive.setStatus('current')
if mibBuilder.loadTexts: regStatNumActive.setDescription('Real-time statistic that is the number of active registrations.')
regStatPeak = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 11, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: regStatPeak.setStatus('current')
if mibBuilder.loadTexts: regStatPeak.setDescription('Real-time statistic that is the peak number of active registrations.')
regStatUpdateSuccess = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 11, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: regStatUpdateSuccess.setStatus('current')
if mibBuilder.loadTexts: regStatUpdateSuccess.setDescription('Total number of successful registration updates since the last time the nCite was reboot')
regStatUpdateFailed = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 11, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: regStatUpdateFailed.setStatus('current')
if mibBuilder.loadTexts: regStatUpdateFailed.setDescription('Total number of registration update requests that have failed since the nCite was last reboot.')
regStatExpired = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 11, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: regStatExpired.setStatus('current')
if mibBuilder.loadTexts: regStatExpired.setDescription('Total number of registration timeouts that have occurred since the nCite was last reboot.')
regStatDropped = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 11, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: regStatDropped.setStatus('deprecated')
if mibBuilder.loadTexts: regStatDropped.setDescription('Total number of registrations that were dropped due to exceeding admission control since the nCIte was last reboot.')
regStatAuthFailures = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 11, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: regStatAuthFailures.setStatus('current')
if mibBuilder.loadTexts: regStatAuthFailures.setDescription('Total number of registrations that were rejected because they could not be authenticated against a valid customer definition.')
regStatInitSipTimeouts = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 11, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: regStatInitSipTimeouts.setStatus('current')
if mibBuilder.loadTexts: regStatInitSipTimeouts.setDescription('Total number of times a SIP timeout occurred after the receipt of the initial registration and before the ACK is received for the Registration since the last time the nCIte was reboot.')
regStatTermSipTimeouts = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 11, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: regStatTermSipTimeouts.setStatus('current')
if mibBuilder.loadTexts: regStatTermSipTimeouts.setDescription('Total number of times a DIP timeout occurred after the receipt of the terminate registration and before the ACK is received since the last time the nCIte was reboot.')
regStatTerminating = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 11, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: regStatTerminating.setStatus('current')
if mibBuilder.loadTexts: regStatTerminating.setDescription('Number of terminating registrations')
regStatFailed = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 11, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: regStatFailed.setStatus('current')
if mibBuilder.loadTexts: regStatFailed.setDescription('Number of failed registrations')
regStatAuthenticationChallenges = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 11, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: regStatAuthenticationChallenges.setStatus('current')
if mibBuilder.loadTexts: regStatAuthenticationChallenges.setDescription('Registration authentication challenges')
regStatUnauthReg = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 11, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: regStatUnauthReg.setStatus('current')
if mibBuilder.loadTexts: regStatUnauthReg.setDescription('Total number of accumulated unauthorized registrations')
custRegStatsTable = MibTable((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 12, 1), )
if mibBuilder.loadTexts: custRegStatsTable.setStatus('current')
if mibBuilder.loadTexts: custRegStatsTable.setDescription('Description')
custRegStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 12, 1, 1), ).setIndexNames((0, "Netrake-MIB", "custRegStatId"))
if mibBuilder.loadTexts: custRegStatsEntry.setStatus('current')
if mibBuilder.loadTexts: custRegStatsEntry.setDescription('Row Description')
custRegStatId = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 12, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custRegStatId.setStatus('current')
if mibBuilder.loadTexts: custRegStatId.setDescription('Customer ID as it is defined in the EMS database and the XML file provisioned to the nCIte')
custRegStatNumInitiated = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 12, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custRegStatNumInitiated.setStatus('current')
if mibBuilder.loadTexts: custRegStatNumInitiated.setDescription('Real-time statistic that is the number of Registrations that are currently in the Initiated state.')
custRegStatNumActive = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 12, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custRegStatNumActive.setStatus('current')
if mibBuilder.loadTexts: custRegStatNumActive.setDescription('Real-time statistic that is the number of active registrations.')
custRegStatPeak = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 12, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custRegStatPeak.setStatus('current')
if mibBuilder.loadTexts: custRegStatPeak.setDescription('Real-time statistic that is the peak number of active registrations.')
custRegStatUpdateSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 12, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custRegStatUpdateSuccess.setStatus('current')
if mibBuilder.loadTexts: custRegStatUpdateSuccess.setDescription('Total number of successful registration updates since the last time the nCite was reboot')
custRegStatUpdateFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 12, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custRegStatUpdateFailed.setStatus('current')
if mibBuilder.loadTexts: custRegStatUpdateFailed.setDescription('Total number of registration update requests that have failed since the nCite was last reboot.')
custRegStatExpired = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 12, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custRegStatExpired.setStatus('current')
if mibBuilder.loadTexts: custRegStatExpired.setDescription('Total number of registration timeouts that have occurred since the nCite was last reboot.')
custRegStatDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 12, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custRegStatDropped.setStatus('deprecated')
if mibBuilder.loadTexts: custRegStatDropped.setDescription('Total number of registrations that were dropped due to exceeding admission control since the nCIte was last reboot.')
custRegStatInitSipTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 12, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custRegStatInitSipTimeouts.setStatus('current')
if mibBuilder.loadTexts: custRegStatInitSipTimeouts.setDescription('Total number of times a SIP timeout occurred after the receipt of the initial registration and before the ACK is received for the Registration since the last time the nCIte was reboot.')
custRegStatTermSipTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 12, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custRegStatTermSipTimeouts.setStatus('current')
if mibBuilder.loadTexts: custRegStatTermSipTimeouts.setDescription('Total number of times a DIP timeout occurred after the receipt of the terminate registration and before the ACK is received since the last time the nCIte was reboot.')
custRegStatTerminating = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 12, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custRegStatTerminating.setStatus('current')
if mibBuilder.loadTexts: custRegStatTerminating.setDescription('Number of customer registrations terminating')
custRegStatFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 12, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custRegStatFailed.setStatus('current')
if mibBuilder.loadTexts: custRegStatFailed.setDescription('Number of customer registrations that have failed')
custRegAuthenticationChallenges = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 12, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custRegAuthenticationChallenges.setStatus('current')
if mibBuilder.loadTexts: custRegAuthenticationChallenges.setDescription('Customer Authentication challenges')
custRegStatUnauthorizedReg = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 12, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custRegStatUnauthorizedReg.setStatus('current')
if mibBuilder.loadTexts: custRegStatUnauthorizedReg.setDescription('Number of accumulated unauthorized registrations for a customer')
ntsStatNumCust = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 13, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntsStatNumCust.setStatus('current')
if mibBuilder.loadTexts: ntsStatNumCust.setDescription('Total number of customers for which NTS Clients are enabled.')
ntsStatAuthFailures = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 13, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntsStatAuthFailures.setStatus('current')
if mibBuilder.loadTexts: ntsStatAuthFailures.setDescription('Total number of times NTS Client connections were rejected because of authentication failures since the last time the nCIte was reboot.')
ntsStatCustConnected = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 13, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntsStatCustConnected.setStatus('current')
if mibBuilder.loadTexts: ntsStatCustConnected.setDescription('Number of NTS Clients that are currently connected.')
edrCurrentCallCount = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 14, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edrCurrentCallCount.setStatus('current')
if mibBuilder.loadTexts: edrCurrentCallCount.setDescription('Current number of calls that have been detected as rogue')
edrPeakCallCount = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 14, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edrPeakCallCount.setStatus('current')
if mibBuilder.loadTexts: edrPeakCallCount.setDescription('Peak number of calls that have been declared rogue')
edrTotalCallsRogue = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 14, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edrTotalCallsRogue.setStatus('current')
if mibBuilder.loadTexts: edrTotalCallsRogue.setDescription('Total number of calls that have been detected as rogue since the last time the nCite was restarted')
edrLastDetection = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 14, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edrLastDetection.setStatus('current')
if mibBuilder.loadTexts: edrLastDetection.setDescription('Date/time of the last time that a call was detected as rogue')
lrdCurrentCallCount = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 14, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lrdCurrentCallCount.setStatus('current')
if mibBuilder.loadTexts: lrdCurrentCallCount.setDescription('Current number of LRD rogue calls')
lrdPeakCallCount = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 14, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lrdPeakCallCount.setStatus('current')
if mibBuilder.loadTexts: lrdPeakCallCount.setDescription('Maximum number of active rogue calls since the last time the stats were reset')
lrdTotalCallsRogue = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 14, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lrdTotalCallsRogue.setStatus('current')
if mibBuilder.loadTexts: lrdTotalCallsRogue.setDescription('The cumulative number of rogue calls detected since the stats were reset')
lrdLastDetection = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 14, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lrdLastDetection.setStatus('current')
if mibBuilder.loadTexts: lrdLastDetection.setDescription('Date/time that the last LRD rogue call was detected')
custNtsStatsTable = MibTable((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 16, 1), )
if mibBuilder.loadTexts: custNtsStatsTable.setStatus('current')
if mibBuilder.loadTexts: custNtsStatsTable.setDescription('NTS Customer statistics table')
custNtsStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 16, 1, 1), ).setIndexNames((0, "Netrake-MIB", "custNtsStatId"))
if mibBuilder.loadTexts: custNtsStatsEntry.setStatus('current')
if mibBuilder.loadTexts: custNtsStatsEntry.setDescription('Row Description')
custNtsStatId = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 16, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custNtsStatId.setStatus('current')
if mibBuilder.loadTexts: custNtsStatId.setDescription('Customer location ID')
custNtsAuthorizationFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 16, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custNtsAuthorizationFailed.setStatus('current')
if mibBuilder.loadTexts: custNtsAuthorizationFailed.setDescription('Number of authorizatin failures for NTS customer')
sipH323CallsInitiating = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 17, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipH323CallsInitiating.setStatus('current')
if mibBuilder.loadTexts: sipH323CallsInitiating.setDescription('Real-time stat of calls that are being initiated after receiving the initial INVITE SIP request.')
sipH323LocalActiveCalls = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 17, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipH323LocalActiveCalls.setStatus('current')
if mibBuilder.loadTexts: sipH323LocalActiveCalls.setDescription('Real-time stat that is the number of active calls that are local')
sipH323TermCalls = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 17, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipH323TermCalls.setStatus('current')
if mibBuilder.loadTexts: sipH323TermCalls.setDescription('Real-time stat that is the number of calls in the TERMINATING state after a BYE SIP request.')
sipH323PeakTotalActiveCalls = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 17, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipH323PeakTotalActiveCalls.setStatus('current')
if mibBuilder.loadTexts: sipH323PeakTotalActiveCalls.setDescription('Peak number of active calls since the last nCite reboot.')
sipH323TotalActiveCalls = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 17, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipH323TotalActiveCalls.setStatus('current')
if mibBuilder.loadTexts: sipH323TotalActiveCalls.setDescription('Total number of active calls. sipH323LocalActvieCalls + sipH323NonLocalActiveCalls')
sipH323CallsCompletedSuccess = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 17, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipH323CallsCompletedSuccess.setStatus('current')
if mibBuilder.loadTexts: sipH323CallsCompletedSuccess.setDescription('Total number of calls that have been completed successfully since the last time the nCIte was reboot.')
sipH323CallsFailed = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 17, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipH323CallsFailed.setStatus('current')
if mibBuilder.loadTexts: sipH323CallsFailed.setDescription('Total number of calls that completed due to some failure since the last time the nCite was reboot.')
sipH323CallsAbandoned = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 17, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipH323CallsAbandoned.setStatus('current')
if mibBuilder.loadTexts: sipH323CallsAbandoned.setDescription('Total number of calls that did not transition to active state because of normal termination since the last time the nCIte was reboot.')
sipH323CallsDropped = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 17, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipH323CallsDropped.setStatus('deprecated')
if mibBuilder.loadTexts: sipH323CallsDropped.setDescription('Total number of calls that were dropped due to exceeding adminision control since the last time the nCite was reboot.')
sipH323CallsDegraded = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 17, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipH323CallsDegraded.setStatus('current')
if mibBuilder.loadTexts: sipH323CallsDegraded.setDescription('Total number of calls that were processed in a degraded state due to exceeding admission control since the last time the nCIte was reboot.')
sipH323AuthFailures = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 17, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipH323AuthFailures.setStatus('current')
if mibBuilder.loadTexts: sipH323AuthFailures.setDescription('Total number of calls that were rejected because they could not be autenticated against a valid customer definition since the last time the nCite was reboot.')
sipH323CallMediaTimeouts = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 17, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipH323CallMediaTimeouts.setStatus('current')
if mibBuilder.loadTexts: sipH323CallMediaTimeouts.setDescription('Total number of times a call was terminated because of a RTP media timeout since the last time the nCIte was reboot.')
sipH323CallInitTimeouts = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 17, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipH323CallInitTimeouts.setStatus('current')
if mibBuilder.loadTexts: sipH323CallInitTimeouts.setDescription('Total number of times a SIP timout occurred after the receipt of the initial INVITE and before the ACK is received for the INVITE since the last time the nCite was reboot.')
sipH323TermTimeouts = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 17, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipH323TermTimeouts.setStatus('current')
if mibBuilder.loadTexts: sipH323TermTimeouts.setDescription('Total number of times a SIP timout occurred after the receipt of the BYE and before the ACK is received for the BYE since the last time the nCIte was reboot.')
sipH323MsgErrs = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 17, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipH323MsgErrs.setStatus('current')
if mibBuilder.loadTexts: sipH323MsgErrs.setDescription('Total number of times a SIP error message was received since the last time the nCite was reboot.')
sipH323CallsProcessed = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 17, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipH323CallsProcessed.setStatus('current')
if mibBuilder.loadTexts: sipH323CallsProcessed.setDescription('Total number of calls that have been processed since the nCIte was last reboot. This iwll be the sum of sipH323CallsCompletedSuccess, sipH323CallsFailed, sipH323CallsAbandoned, sipH323CallsDropped, sipH323AuthFailures')
sipH323PeakLocalCalls = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 17, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipH323PeakLocalCalls.setStatus('current')
if mibBuilder.loadTexts: sipH323PeakLocalCalls.setDescription('Real-time statistic that is the peak number of active local calls.')
sipH323RedirectSuccess = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 17, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipH323RedirectSuccess.setStatus('deprecated')
if mibBuilder.loadTexts: sipH323RedirectSuccess.setDescription('Total number of successful redirects')
sipH323RedirectFailures = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 17, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipH323RedirectFailures.setStatus('deprecated')
if mibBuilder.loadTexts: sipH323RedirectFailures.setDescription('Total number of failed redirects')
sipH323MessageRoutingFailures = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 17, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipH323MessageRoutingFailures.setStatus('current')
if mibBuilder.loadTexts: sipH323MessageRoutingFailures.setDescription('Failures due to route lookup - no enabled route found')
sipH323AuthenticationChallenges = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 17, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipH323AuthenticationChallenges.setStatus('current')
if mibBuilder.loadTexts: sipH323AuthenticationChallenges.setDescription('Number of Authentication Challenges')
sipH323RTPFWTraversalTimeouts = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 17, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipH323RTPFWTraversalTimeouts.setStatus('current')
if mibBuilder.loadTexts: sipH323RTPFWTraversalTimeouts.setDescription('Number of RTP forward traversal timeouts')
sipH323MessagesReroutedToMate = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 17, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipH323MessagesReroutedToMate.setStatus('deprecated')
if mibBuilder.loadTexts: sipH323MessagesReroutedToMate.setDescription('Number of messages rerouted to mate')
sipH323SameSideActiveCalls = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 17, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipH323SameSideActiveCalls.setStatus('current')
if mibBuilder.loadTexts: sipH323SameSideActiveCalls.setDescription('Same side actvie calls')
sipH323NormalActiveCalls = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 17, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipH323NormalActiveCalls.setStatus('current')
if mibBuilder.loadTexts: sipH323NormalActiveCalls.setDescription('Normal active calls')
sipH323PeakSameSideActiveCalls = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 17, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipH323PeakSameSideActiveCalls.setStatus('current')
if mibBuilder.loadTexts: sipH323PeakSameSideActiveCalls.setDescription('Peak same side active calls')
sipH323PeakNormalActiveCalls = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 17, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipH323PeakNormalActiveCalls.setStatus('current')
if mibBuilder.loadTexts: sipH323PeakNormalActiveCalls.setDescription('Peak normal active calls')
sipH323CurrentFaxSessions = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 17, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipH323CurrentFaxSessions.setStatus('deprecated')
if mibBuilder.loadTexts: sipH323CurrentFaxSessions.setDescription('Current number of FAX Sessions that are active')
sipH323PeakFaxSessions = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 17, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipH323PeakFaxSessions.setStatus('deprecated')
if mibBuilder.loadTexts: sipH323PeakFaxSessions.setDescription('Maximum number of FAX sessions active at any point in time since the statistics were last reset')
sipH323TotalFaxSessions = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 17, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipH323TotalFaxSessions.setStatus('deprecated')
if mibBuilder.loadTexts: sipH323TotalFaxSessions.setDescription('The total number of FAX sessions that have occurred since the statistics were last reset')
h323CallsInitiating = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 18, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h323CallsInitiating.setStatus('current')
if mibBuilder.loadTexts: h323CallsInitiating.setDescription('Real-time stat of calls that are being initiated after receiving the initial INVITE SIP request.')
h323LocalActiveCalls = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 18, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h323LocalActiveCalls.setStatus('current')
if mibBuilder.loadTexts: h323LocalActiveCalls.setDescription('Real-time stat that is the number of active calls that are local')
h323TermCalls = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 18, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h323TermCalls.setStatus('current')
if mibBuilder.loadTexts: h323TermCalls.setDescription('Real-time stat that is the number of calls in the TERMINATING state after a BYE SIP request.')
h323PeakTotalActiveCalls = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 18, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h323PeakTotalActiveCalls.setStatus('current')
if mibBuilder.loadTexts: h323PeakTotalActiveCalls.setDescription('Peak number of active calls since the last nCite reboot.')
h323TotalActiveCalls = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 18, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h323TotalActiveCalls.setStatus('current')
if mibBuilder.loadTexts: h323TotalActiveCalls.setDescription('Total number of active calls. h323LocalActvieCalls + h323NonLocalActiveCalls')
h323CallsCompletedSuccess = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 18, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h323CallsCompletedSuccess.setStatus('current')
if mibBuilder.loadTexts: h323CallsCompletedSuccess.setDescription('Total number of calls that have been completed successfully since the last time the nCIte was reboot.')
h323CallsFailed = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 18, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h323CallsFailed.setStatus('current')
if mibBuilder.loadTexts: h323CallsFailed.setDescription('Total number of calls that completed due to some failure since the last time the nCite was reboot.')
h323CallsAbandoned = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 18, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h323CallsAbandoned.setStatus('current')
if mibBuilder.loadTexts: h323CallsAbandoned.setDescription('Total number of calls that did not transition to active state because of normal termination since the last time the nCIte was reboot.')
h323CallsDropped = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 18, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h323CallsDropped.setStatus('deprecated')
if mibBuilder.loadTexts: h323CallsDropped.setDescription('Total number of calls that were dropped due to exceeding adminision control since the last time the nCite was reboot.')
h323CallsDegraded = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 18, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h323CallsDegraded.setStatus('current')
if mibBuilder.loadTexts: h323CallsDegraded.setDescription('Total number of calls that were processed in a degraded state due to exceeding admission control since the last time the nCIte was reboot.')
h323AuthFailures = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 18, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h323AuthFailures.setStatus('current')
if mibBuilder.loadTexts: h323AuthFailures.setDescription('Total number of calls that were rejected because they could not be autenticated against a valid customer definition since the last time the nCite was reboot.')
h323CallMediaTimeouts = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 18, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h323CallMediaTimeouts.setStatus('current')
if mibBuilder.loadTexts: h323CallMediaTimeouts.setDescription('Total number of times a call was terminated because of a RTP media timeout since the last time the nCIte was reboot.')
h323CallInitTimeouts = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 18, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h323CallInitTimeouts.setStatus('current')
if mibBuilder.loadTexts: h323CallInitTimeouts.setDescription('Total number of times a SIP timout occurred after the receipt of the initial INVITE and before the ACK is received for the INVITE since the last time the nCite was reboot.')
h323TermTimeouts = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 18, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h323TermTimeouts.setStatus('current')
if mibBuilder.loadTexts: h323TermTimeouts.setDescription('Total number of times a SIP timout occurred after the receipt of the BYE and before the ACK is received for the BYE since the last time the nCIte was reboot.')
h323MsgErrs = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 18, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h323MsgErrs.setStatus('current')
if mibBuilder.loadTexts: h323MsgErrs.setDescription('Total number of times a SIP error message was received since the last time the nCite was reboot.')
h323CallsProcessed = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 18, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h323CallsProcessed.setStatus('current')
if mibBuilder.loadTexts: h323CallsProcessed.setDescription('Total number of calls that have been processed since the nCIte was last reboot. This iwll be the sum of h323CallsCompletedSuccess, h323CallsFailed, h323CallsAbandoned, h323CallsDropped, h323AuthFailures')
h323PeakLocalCalls = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 18, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h323PeakLocalCalls.setStatus('current')
if mibBuilder.loadTexts: h323PeakLocalCalls.setDescription('Real-time statistic that is the peak number of active local calls.')
h323MessageRoutingFailures = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 18, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h323MessageRoutingFailures.setStatus('current')
if mibBuilder.loadTexts: h323MessageRoutingFailures.setDescription('Failures due to route lookup - no enabled route found')
h323AuthenticationChallenges = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 18, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h323AuthenticationChallenges.setStatus('current')
if mibBuilder.loadTexts: h323AuthenticationChallenges.setDescription('Number of Authentication Challenges')
h323RTPFWTraversalTimeouts = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 18, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h323RTPFWTraversalTimeouts.setStatus('current')
if mibBuilder.loadTexts: h323RTPFWTraversalTimeouts.setDescription('Number of RTP forward traversal timeouts')
h323SameSideActiveCalls = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 18, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h323SameSideActiveCalls.setStatus('current')
if mibBuilder.loadTexts: h323SameSideActiveCalls.setDescription('Same side actvie calls')
h323NormalActiveCalls = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 18, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h323NormalActiveCalls.setStatus('current')
if mibBuilder.loadTexts: h323NormalActiveCalls.setDescription('Normal active calls')
h323PeakSameSideActiveCalls = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 18, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h323PeakSameSideActiveCalls.setStatus('current')
if mibBuilder.loadTexts: h323PeakSameSideActiveCalls.setDescription('Peak same side active calls')
h323PeakNormalActiveCalls = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 18, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h323PeakNormalActiveCalls.setStatus('current')
if mibBuilder.loadTexts: h323PeakNormalActiveCalls.setDescription('Peak normal active calls')
h323CurrentFaxSessions = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 18, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h323CurrentFaxSessions.setStatus('deprecated')
if mibBuilder.loadTexts: h323CurrentFaxSessions.setDescription('Current number of FAX Sessions that are active')
h323PeakFaxSessions = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 18, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h323PeakFaxSessions.setStatus('deprecated')
if mibBuilder.loadTexts: h323PeakFaxSessions.setDescription('Maximum number of FAX sessions active at any point in time since the statistics were last reset')
h323TotalFaxSessions = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 18, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h323TotalFaxSessions.setStatus('deprecated')
if mibBuilder.loadTexts: h323TotalFaxSessions.setDescription('The total number of FAX sessions that have occurred since the statistics were last reset')
voIpCallsInitiating = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 19, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voIpCallsInitiating.setStatus('current')
if mibBuilder.loadTexts: voIpCallsInitiating.setDescription('Real-time stat of calls that are being initiated after receiving the initial INVITE SIP request.')
voIpLocalActiveCalls = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 19, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voIpLocalActiveCalls.setStatus('current')
if mibBuilder.loadTexts: voIpLocalActiveCalls.setDescription('Real-time stat that is the number of active calls that are local')
voIpTermCalls = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 19, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voIpTermCalls.setStatus('current')
if mibBuilder.loadTexts: voIpTermCalls.setDescription('Real-time stat that is the number of calls in the TERMINATING state after a BYE SIP request.')
voIpPeakTotalActiveCalls = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 19, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voIpPeakTotalActiveCalls.setStatus('current')
if mibBuilder.loadTexts: voIpPeakTotalActiveCalls.setDescription('Peak number of active calls since the last nCite reboot.')
voIpTotalActiveCalls = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 19, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voIpTotalActiveCalls.setStatus('current')
if mibBuilder.loadTexts: voIpTotalActiveCalls.setDescription('Total number of active calls. voIpLocalActvieCalls + voIpNonLocalActiveCalls')
voIpCallsCompletedSuccess = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 19, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voIpCallsCompletedSuccess.setStatus('current')
if mibBuilder.loadTexts: voIpCallsCompletedSuccess.setDescription('Total number of calls that have been completed successfully since the last time the nCIte was reboot.')
voIpCallsFailed = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 19, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voIpCallsFailed.setStatus('current')
if mibBuilder.loadTexts: voIpCallsFailed.setDescription('Total number of calls that completed due to some failure since the last time the nCite was reboot.')
voIpCallsAbandoned = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 19, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voIpCallsAbandoned.setStatus('current')
if mibBuilder.loadTexts: voIpCallsAbandoned.setDescription('Total number of calls that did not transition to active state because of normal termination since the last time the nCIte was reboot.')
voIpCallsDropped = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 19, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voIpCallsDropped.setStatus('deprecated')
if mibBuilder.loadTexts: voIpCallsDropped.setDescription('Total number of calls that were dropped due to exceeding adminision control since the last time the nCite was reboot.')
voIpCallsDegraded = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 19, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voIpCallsDegraded.setStatus('current')
if mibBuilder.loadTexts: voIpCallsDegraded.setDescription('Total number of calls that were processed in a degraded state due to exceeding admission control since the last time the nCIte was reboot.')
voIpAuthFailures = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 19, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voIpAuthFailures.setStatus('current')
if mibBuilder.loadTexts: voIpAuthFailures.setDescription('Total number of calls that were rejected because they could not be autenticated against a valid customer definition since the last time the nCite was reboot.')
voIpCallMediaTimeouts = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 19, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voIpCallMediaTimeouts.setStatus('current')
if mibBuilder.loadTexts: voIpCallMediaTimeouts.setDescription('Total number of times a call was terminated because of a RTP media timeout since the last time the nCIte was reboot.')
voIpCallInitTimeouts = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 19, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voIpCallInitTimeouts.setStatus('current')
if mibBuilder.loadTexts: voIpCallInitTimeouts.setDescription('Total number of times a SIP timout occurred after the receipt of the initial INVITE and before the ACK is received for the INVITE since the last time the nCite was reboot.')
voIpTermTimeouts = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 19, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voIpTermTimeouts.setStatus('current')
if mibBuilder.loadTexts: voIpTermTimeouts.setDescription('Total number of times a SIP timout occurred after the receipt of the BYE and before the ACK is received for the BYE since the last time the nCIte was reboot.')
voIpMsgErrs = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 19, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voIpMsgErrs.setStatus('current')
if mibBuilder.loadTexts: voIpMsgErrs.setDescription('Total number of times a SIP error message was received since the last time the nCite was reboot.')
voIpCallsProcessed = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 19, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voIpCallsProcessed.setStatus('current')
if mibBuilder.loadTexts: voIpCallsProcessed.setDescription('Total number of calls that have been processed since the nCIte was last reboot. This iwll be the sum of voIpCallsCompletedSuccess, voIpCallsFailed, voIpCallsAbandoned, voIpCallsDropped, voIpAuthFailures')
voIpPeakLocalCalls = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 19, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voIpPeakLocalCalls.setStatus('current')
if mibBuilder.loadTexts: voIpPeakLocalCalls.setDescription('Real-time statistic that is the peak number of active local calls.')
voIpRedirectSuccess = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 19, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voIpRedirectSuccess.setStatus('deprecated')
if mibBuilder.loadTexts: voIpRedirectSuccess.setDescription('Total number of successful redirects')
voIpRedirectFailures = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 19, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voIpRedirectFailures.setStatus('deprecated')
if mibBuilder.loadTexts: voIpRedirectFailures.setDescription('Total number of failed redirects')
voIpMessageRoutingFailures = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 19, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voIpMessageRoutingFailures.setStatus('current')
if mibBuilder.loadTexts: voIpMessageRoutingFailures.setDescription('Failures due to route lookup - no enabled route found')
voIpAuthenticationChallenges = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 19, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voIpAuthenticationChallenges.setStatus('current')
if mibBuilder.loadTexts: voIpAuthenticationChallenges.setDescription('Number of Authentication Challenges')
voIpRTPFWTraversalTimeouts = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 19, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voIpRTPFWTraversalTimeouts.setStatus('current')
if mibBuilder.loadTexts: voIpRTPFWTraversalTimeouts.setDescription('Number of RTP forward traversal timeouts')
voIpMessagesReroutedToMate = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 19, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voIpMessagesReroutedToMate.setStatus('deprecated')
if mibBuilder.loadTexts: voIpMessagesReroutedToMate.setDescription('Number of messages rerouted to mate')
voIpSameSideActiveCalls = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 19, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voIpSameSideActiveCalls.setStatus('current')
if mibBuilder.loadTexts: voIpSameSideActiveCalls.setDescription('Same side actvie calls')
voIpNormalActiveCalls = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 19, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voIpNormalActiveCalls.setStatus('current')
if mibBuilder.loadTexts: voIpNormalActiveCalls.setDescription('Normal active calls')
voIpPeakSameSideActiveCalls = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 19, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voIpPeakSameSideActiveCalls.setStatus('current')
if mibBuilder.loadTexts: voIpPeakSameSideActiveCalls.setDescription('Peak same side active calls')
voIpPeakNormalActiveCalls = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 19, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voIpPeakNormalActiveCalls.setStatus('current')
if mibBuilder.loadTexts: voIpPeakNormalActiveCalls.setDescription('Peak normal active calls')
voIpCurrentFaxSessions = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 19, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voIpCurrentFaxSessions.setStatus('deprecated')
if mibBuilder.loadTexts: voIpCurrentFaxSessions.setDescription('Current number of FAX Sessions that are active')
voIpPeakFaxSessions = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 19, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voIpPeakFaxSessions.setStatus('deprecated')
if mibBuilder.loadTexts: voIpPeakFaxSessions.setDescription('Maximum number of FAX sessions active at any point in time since the statistics were last reset')
voIpTotalFaxSessions = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 19, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voIpTotalFaxSessions.setStatus('deprecated')
if mibBuilder.loadTexts: voIpTotalFaxSessions.setDescription('The total number of FAX sessions that have occurred since the statistics were last reset')
custSipH323StatsTable = MibTable((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 20, 1), )
if mibBuilder.loadTexts: custSipH323StatsTable.setStatus('current')
if mibBuilder.loadTexts: custSipH323StatsTable.setDescription('Description')
custSipH323StatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 20, 1, 1), ).setIndexNames((0, "Netrake-MIB", "custSipH323Id"))
if mibBuilder.loadTexts: custSipH323StatsEntry.setStatus('current')
if mibBuilder.loadTexts: custSipH323StatsEntry.setDescription('Row Description')
custSipH323Id = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 20, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custSipH323Id.setStatus('current')
if mibBuilder.loadTexts: custSipH323Id.setDescription('Customer ID as it is defined in the EMS database and the XML file provisioned to the nCIte')
custSipH323CallsInitiating = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 20, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custSipH323CallsInitiating.setStatus('current')
if mibBuilder.loadTexts: custSipH323CallsInitiating.setDescription('Real-time stat of calls that are being initiated after receiving the initial INVITE SIP request.')
custSipH323LocalActiveCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 20, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custSipH323LocalActiveCalls.setStatus('current')
if mibBuilder.loadTexts: custSipH323LocalActiveCalls.setDescription('Real-time stat that is the number of active calls that are local')
custSipH323TermCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 20, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custSipH323TermCalls.setStatus('current')
if mibBuilder.loadTexts: custSipH323TermCalls.setDescription('Real-time stat that is the number of calls in the TERMINATING state after a BYE SIP request.')
custSipH323PeakTotalActiveCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 20, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custSipH323PeakTotalActiveCalls.setStatus('current')
if mibBuilder.loadTexts: custSipH323PeakTotalActiveCalls.setDescription('Peak number of total active calls since the last nCite reboot.')
custSipH323TotalActiveCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 20, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custSipH323TotalActiveCalls.setStatus('current')
if mibBuilder.loadTexts: custSipH323TotalActiveCalls.setDescription('Total number of active calls. custSipH323StatLocalActvieCalls + custSipH323StatNonLocalActiveCalls')
custSipH323CallsCompletedSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 20, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custSipH323CallsCompletedSuccess.setStatus('current')
if mibBuilder.loadTexts: custSipH323CallsCompletedSuccess.setDescription('Total number of calls that have been completed successfully since the last time the nCIte was reboot.')
custSipH323CallsFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 20, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custSipH323CallsFailed.setStatus('current')
if mibBuilder.loadTexts: custSipH323CallsFailed.setDescription('Total number of calls that completed due to some failure since the last time the nCite was reboot.')
custSipH323CallsAbandoned = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 20, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custSipH323CallsAbandoned.setStatus('current')
if mibBuilder.loadTexts: custSipH323CallsAbandoned.setDescription('Total number of calls that did not transition to active state because of normal termination since the last time the nCIte was reboot.')
custSipH323CallsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 20, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custSipH323CallsDropped.setStatus('deprecated')
if mibBuilder.loadTexts: custSipH323CallsDropped.setDescription('Total number of calls that were dropped due to exceeding adminision control since the last time the nCite was reboot.')
custSipH323CallsDegraded = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 20, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custSipH323CallsDegraded.setStatus('current')
if mibBuilder.loadTexts: custSipH323CallsDegraded.setDescription('Total number of calls that were processed in a degraded state due to exceeding admission control since the last time the nCIte was reboot.')
custSipH323CallMediaTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 20, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custSipH323CallMediaTimeouts.setStatus('current')
if mibBuilder.loadTexts: custSipH323CallMediaTimeouts.setDescription('Total number of times a call was terminated because of a RTP media timeout since the last time the nCIte was reboot.')
custSipH323CallInitTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 20, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custSipH323CallInitTimeouts.setStatus('current')
if mibBuilder.loadTexts: custSipH323CallInitTimeouts.setDescription('Total number of times a SIP timout occurred after the receipt of the initial INVITE and before the ACK is received for the INVITE since the last time the nCite was reboot.')
custSipH323TermTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 20, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custSipH323TermTimeouts.setStatus('current')
if mibBuilder.loadTexts: custSipH323TermTimeouts.setDescription('Total number of times a SIP timout occurred after the receipt of the BYE and before the ACK is received for the BYE since the last time the nCIte was reboot.')
custSipH323CallsProcessed = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 20, 1, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custSipH323CallsProcessed.setStatus('current')
if mibBuilder.loadTexts: custSipH323CallsProcessed.setDescription('Total number of calls that have been processed since the nCIte was last reboot. This will be the sum of custSipH323CallsCompletedSuccess, custSipH323CallsFailed, custSipH323CallsAbandoned, custSipH323CallsDropped, custSipH323AuthFailures')
custSipH323PeakLocalCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 20, 1, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custSipH323PeakLocalCalls.setStatus('current')
if mibBuilder.loadTexts: custSipH323PeakLocalCalls.setDescription('Peak number of local calls')
custSipH323AuthenticationChallenges = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 20, 1, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custSipH323AuthenticationChallenges.setStatus('current')
if mibBuilder.loadTexts: custSipH323AuthenticationChallenges.setDescription('Number of authentication challanges')
custSipH323RTPFWTraversalTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 20, 1, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custSipH323RTPFWTraversalTimeouts.setStatus('current')
if mibBuilder.loadTexts: custSipH323RTPFWTraversalTimeouts.setDescription('Number of RTP forward traversal timeouts')
custSipH323SameSideActiveCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 20, 1, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custSipH323SameSideActiveCalls.setStatus('current')
if mibBuilder.loadTexts: custSipH323SameSideActiveCalls.setDescription('Number of same side active calls')
custSipH323NormalActiveCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 20, 1, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custSipH323NormalActiveCalls.setStatus('current')
if mibBuilder.loadTexts: custSipH323NormalActiveCalls.setDescription('Number of normal active calls')
custSipH323PeakNormalActiveCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 20, 1, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custSipH323PeakNormalActiveCalls.setStatus('current')
if mibBuilder.loadTexts: custSipH323PeakNormalActiveCalls.setDescription('Maximum number of active normal calls since the statistics were last reset.')
custH323StatsTable = MibTable((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 21, 1), )
if mibBuilder.loadTexts: custH323StatsTable.setStatus('current')
if mibBuilder.loadTexts: custH323StatsTable.setDescription('Description')
custH323StatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 21, 1, 1), ).setIndexNames((0, "Netrake-MIB", "custH323Id"))
if mibBuilder.loadTexts: custH323StatsEntry.setStatus('current')
if mibBuilder.loadTexts: custH323StatsEntry.setDescription('Row Description')
custH323Id = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 21, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custH323Id.setStatus('current')
if mibBuilder.loadTexts: custH323Id.setDescription('Customer ID as it is defined in the EMS database and the XML file provisioned to the nCIte')
custH323CallsInitiating = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 21, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custH323CallsInitiating.setStatus('current')
if mibBuilder.loadTexts: custH323CallsInitiating.setDescription('Real-time stat of calls that are being initiated after receiving the initial INVITE SIP request.')
custH323LocalActiveCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 21, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custH323LocalActiveCalls.setStatus('current')
if mibBuilder.loadTexts: custH323LocalActiveCalls.setDescription('Real-time stat that is the number of active calls that are local')
custH323TermCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 21, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custH323TermCalls.setStatus('current')
if mibBuilder.loadTexts: custH323TermCalls.setDescription('Real-time stat that is the number of calls in the TERMINATING state after a BYE SIP request.')
custH323PeakTotalActiveCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 21, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custH323PeakTotalActiveCalls.setStatus('current')
if mibBuilder.loadTexts: custH323PeakTotalActiveCalls.setDescription('Peak number of total active calls since the last nCite reboot.')
custH323TotalActiveCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 21, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custH323TotalActiveCalls.setStatus('current')
if mibBuilder.loadTexts: custH323TotalActiveCalls.setDescription('Total number of active calls. custH323StatLocalActvieCalls + custH323StatNonLocalActiveCalls')
custH323CallsCompletedSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 21, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custH323CallsCompletedSuccess.setStatus('current')
if mibBuilder.loadTexts: custH323CallsCompletedSuccess.setDescription('Total number of calls that have been completed successfully since the last time the nCIte was reboot.')
custH323CallsFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 21, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custH323CallsFailed.setStatus('current')
if mibBuilder.loadTexts: custH323CallsFailed.setDescription('Total number of calls that completed due to some failure since the last time the nCite was reboot.')
custH323CallsAbandoned = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 21, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custH323CallsAbandoned.setStatus('current')
if mibBuilder.loadTexts: custH323CallsAbandoned.setDescription('Total number of calls that did not transition to active state because of normal termination since the last time the nCIte was reboot.')
custH323CallsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 21, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custH323CallsDropped.setStatus('deprecated')
if mibBuilder.loadTexts: custH323CallsDropped.setDescription('Total number of calls that were dropped due to exceeding adminision control since the last time the nCite was reboot.')
custH323CallsDegraded = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 21, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custH323CallsDegraded.setStatus('current')
if mibBuilder.loadTexts: custH323CallsDegraded.setDescription('Total number of calls that were processed in a degraded state due to exceeding admission control since the last time the nCIte was reboot.')
custH323CallMediaTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 21, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custH323CallMediaTimeouts.setStatus('current')
if mibBuilder.loadTexts: custH323CallMediaTimeouts.setDescription('Total number of times a call was terminated because of a RTP media timeout since the last time the nCIte was reboot.')
custH323CallInitTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 21, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custH323CallInitTimeouts.setStatus('current')
if mibBuilder.loadTexts: custH323CallInitTimeouts.setDescription('Total number of times a SIP timout occurred after the receipt of the initial INVITE and before the ACK is received for the INVITE since the last time the nCite was reboot.')
custH323TermTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 21, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custH323TermTimeouts.setStatus('current')
if mibBuilder.loadTexts: custH323TermTimeouts.setDescription('Total number of times a SIP timout occurred after the receipt of the BYE and before the ACK is received for the BYE since the last time the nCIte was reboot.')
custH323CallsProcessed = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 21, 1, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custH323CallsProcessed.setStatus('current')
if mibBuilder.loadTexts: custH323CallsProcessed.setDescription('Total number of calls that have been processed since the nCIte was last reboot. This will be the sum of custH323CallsCompletedSuccess, custH323CallsFailed, custH323CallsAbandoned, custH323CallsDropped, custH323AuthFailures')
custH323PeakLocalCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 21, 1, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custH323PeakLocalCalls.setStatus('current')
if mibBuilder.loadTexts: custH323PeakLocalCalls.setDescription('Peak number of local calls')
custH323AuthenticationChallenges = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 21, 1, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custH323AuthenticationChallenges.setStatus('current')
if mibBuilder.loadTexts: custH323AuthenticationChallenges.setDescription('Number of authentication challanges')
custH323RTPFWTraversalTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 21, 1, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custH323RTPFWTraversalTimeouts.setStatus('current')
if mibBuilder.loadTexts: custH323RTPFWTraversalTimeouts.setDescription('Number of RTP forward traversal timeouts')
custH323SameSideActiveCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 21, 1, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custH323SameSideActiveCalls.setStatus('current')
if mibBuilder.loadTexts: custH323SameSideActiveCalls.setDescription('Number of same side active calls')
custH323NormalActiveCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 21, 1, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custH323NormalActiveCalls.setStatus('current')
if mibBuilder.loadTexts: custH323NormalActiveCalls.setDescription('Number of normal active calls')
custH323PeakNormalActiveCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 21, 1, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custH323PeakNormalActiveCalls.setStatus('current')
if mibBuilder.loadTexts: custH323PeakNormalActiveCalls.setDescription('Maximum number of active normal calls since the statistics were last reset.')
custVoIpStatsTable = MibTable((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 22, 1), )
if mibBuilder.loadTexts: custVoIpStatsTable.setStatus('current')
if mibBuilder.loadTexts: custVoIpStatsTable.setDescription('Description')
custVoIpStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 22, 1, 1), ).setIndexNames((0, "Netrake-MIB", "custVoIpId"))
if mibBuilder.loadTexts: custVoIpStatsEntry.setStatus('current')
if mibBuilder.loadTexts: custVoIpStatsEntry.setDescription('Row Description')
custVoIpId = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 22, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custVoIpId.setStatus('current')
if mibBuilder.loadTexts: custVoIpId.setDescription('Customer ID as it is defined in the EMS database and the XML file provisioned to the nCIte')
custVoIpCallsInitiating = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 22, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custVoIpCallsInitiating.setStatus('current')
if mibBuilder.loadTexts: custVoIpCallsInitiating.setDescription('Real-time stat of calls that are being initiated after receiving the initial INVITE SIP request.')
custVoIpLocalActiveCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 22, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custVoIpLocalActiveCalls.setStatus('current')
if mibBuilder.loadTexts: custVoIpLocalActiveCalls.setDescription('Real-time stat that is the number of active calls that are local')
custVoIpTermCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 22, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custVoIpTermCalls.setStatus('current')
if mibBuilder.loadTexts: custVoIpTermCalls.setDescription('Real-time stat that is the number of calls in the TERMINATING state after a BYE SIP request.')
custVoIpPeakTotalActiveCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 22, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custVoIpPeakTotalActiveCalls.setStatus('current')
if mibBuilder.loadTexts: custVoIpPeakTotalActiveCalls.setDescription('Peak number of total active calls since the last nCite reboot.')
custVoIpTotalActiveCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 22, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custVoIpTotalActiveCalls.setStatus('current')
if mibBuilder.loadTexts: custVoIpTotalActiveCalls.setDescription('Total number of active calls. custVoIpStatLocalActvieCalls + custVoIpStatNonLocalActiveCalls')
custVoIpCallsCompletedSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 22, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custVoIpCallsCompletedSuccess.setStatus('current')
if mibBuilder.loadTexts: custVoIpCallsCompletedSuccess.setDescription('Total number of calls that have been completed successfully since the last time the nCIte was reboot.')
custVoIpCallsFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 22, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custVoIpCallsFailed.setStatus('current')
if mibBuilder.loadTexts: custVoIpCallsFailed.setDescription('Total number of calls that completed due to some failure since the last time the nCite was reboot.')
custVoIpCallsAbandoned = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 22, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custVoIpCallsAbandoned.setStatus('current')
if mibBuilder.loadTexts: custVoIpCallsAbandoned.setDescription('Total number of calls that did not transition to active state because of normal termination since the last time the nCIte was reboot.')
custVoIpCallsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 22, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custVoIpCallsDropped.setStatus('deprecated')
if mibBuilder.loadTexts: custVoIpCallsDropped.setDescription('Total number of calls that were dropped due to exceeding adminision control since the last time the nCite was reboot.')
custVoIpCallsDegraded = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 22, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custVoIpCallsDegraded.setStatus('current')
if mibBuilder.loadTexts: custVoIpCallsDegraded.setDescription('Total number of calls that were processed in a degraded state due to exceeding admission control since the last time the nCIte was reboot.')
custVoIpCallMediaTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 22, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custVoIpCallMediaTimeouts.setStatus('current')
if mibBuilder.loadTexts: custVoIpCallMediaTimeouts.setDescription('Total number of times a call was terminated because of a RTP media timeout since the last time the nCIte was reboot.')
custVoIpCallInitTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 22, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custVoIpCallInitTimeouts.setStatus('current')
if mibBuilder.loadTexts: custVoIpCallInitTimeouts.setDescription('Total number of times a SIP timout occurred after the receipt of the initial INVITE and before the ACK is received for the INVITE since the last time the nCite was reboot.')
custVoIpTermTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 22, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custVoIpTermTimeouts.setStatus('current')
if mibBuilder.loadTexts: custVoIpTermTimeouts.setDescription('Total number of times a SIP timout occurred after the receipt of the BYE and before the ACK is received for the BYE since the last time the nCIte was reboot.')
custVoIpCallsProcessed = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 22, 1, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custVoIpCallsProcessed.setStatus('current')
if mibBuilder.loadTexts: custVoIpCallsProcessed.setDescription('Total number of calls that have been processed since the nCIte was last reboot. This will be the sum of custVoIpCallsCompletedSuccess, custVoIpCallsFailed, custVoIpCallsAbandoned, custVoIpCallsDropped, custVoIpAuthFailures')
custVoIpPeakLocalCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 22, 1, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custVoIpPeakLocalCalls.setStatus('current')
if mibBuilder.loadTexts: custVoIpPeakLocalCalls.setDescription('Peak number of local calls')
custVoIpAuthenticationChallenges = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 22, 1, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custVoIpAuthenticationChallenges.setStatus('current')
if mibBuilder.loadTexts: custVoIpAuthenticationChallenges.setDescription('Number of authentication challanges')
custVoIpRTPFWTraversalTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 22, 1, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custVoIpRTPFWTraversalTimeouts.setStatus('current')
if mibBuilder.loadTexts: custVoIpRTPFWTraversalTimeouts.setDescription('Number of RTP forward traversal timeouts')
custVoIpSameSideActiveCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 22, 1, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custVoIpSameSideActiveCalls.setStatus('current')
if mibBuilder.loadTexts: custVoIpSameSideActiveCalls.setDescription('Number of same side active calls')
custVoIpNormalActiveCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 22, 1, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custVoIpNormalActiveCalls.setStatus('current')
if mibBuilder.loadTexts: custVoIpNormalActiveCalls.setDescription('Number of normal active calls')
custVoIpPeakNormalActiveCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 22, 1, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custVoIpPeakNormalActiveCalls.setStatus('current')
if mibBuilder.loadTexts: custVoIpPeakNormalActiveCalls.setDescription('Maximum number of active normal calls since the statistics were last reset.')
mediaStatCurrentAudioSessions = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 23, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaStatCurrentAudioSessions.setStatus('current')
if mibBuilder.loadTexts: mediaStatCurrentAudioSessions.setDescription('Current number of active audio sessions')
mediaStatPeakAudioSessions = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 23, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaStatPeakAudioSessions.setStatus('current')
if mibBuilder.loadTexts: mediaStatPeakAudioSessions.setDescription('Peak number of audio sessions')
mediaStatTotalAudioSessions = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 23, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaStatTotalAudioSessions.setStatus('current')
if mibBuilder.loadTexts: mediaStatTotalAudioSessions.setDescription('Total accumulated audio sessions')
mediaStatCurrentVideoSessions = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 23, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaStatCurrentVideoSessions.setStatus('current')
if mibBuilder.loadTexts: mediaStatCurrentVideoSessions.setDescription('Current number of active video sessions')
mediaStatPeakVideoSessions = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 23, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaStatPeakVideoSessions.setStatus('current')
if mibBuilder.loadTexts: mediaStatPeakVideoSessions.setDescription('Peak number of video sessions')
mediaStatTotalVideoSessions = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 23, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaStatTotalVideoSessions.setStatus('current')
if mibBuilder.loadTexts: mediaStatTotalVideoSessions.setDescription('Total accumulated video sessions')
mediaStatCurrentFaxSessions = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 23, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaStatCurrentFaxSessions.setStatus('current')
if mibBuilder.loadTexts: mediaStatCurrentFaxSessions.setDescription('Current number of active fax sessions')
mediaStatPeakFaxSessions = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 23, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaStatPeakFaxSessions.setStatus('current')
if mibBuilder.loadTexts: mediaStatPeakFaxSessions.setDescription('Peak number of fax sessions')
mediaStatTotalFaxSessions = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 23, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaStatTotalFaxSessions.setStatus('current')
if mibBuilder.loadTexts: mediaStatTotalFaxSessions.setDescription('Total accumulated number of fax sessions')
mediaStatTotalFailures = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 23, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaStatTotalFailures.setStatus('current')
if mibBuilder.loadTexts: mediaStatTotalFailures.setDescription('Total accumulated number of media failures')
h323RegStatActiveReg = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 24, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h323RegStatActiveReg.setStatus('current')
if mibBuilder.loadTexts: h323RegStatActiveReg.setDescription('Current number of active H.323 registrations')
h323RegStatExpiredReg = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 24, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h323RegStatExpiredReg.setStatus('current')
if mibBuilder.loadTexts: h323RegStatExpiredReg.setDescription('Number of expired H.323 registrations')
h323RegStatUnauthorizedReg = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 24, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h323RegStatUnauthorizedReg.setStatus('current')
if mibBuilder.loadTexts: h323RegStatUnauthorizedReg.setDescription('Number of unauthorized H.323 regristrations')
h323RegStatPeakActiveReg = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 24, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h323RegStatPeakActiveReg.setStatus('current')
if mibBuilder.loadTexts: h323RegStatPeakActiveReg.setDescription('Peak number of active H.323 registrations')
h323RegStatUpdateComplete = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 24, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h323RegStatUpdateComplete.setStatus('current')
if mibBuilder.loadTexts: h323RegStatUpdateComplete.setDescription('Number of H.323 registration updates completed successfully')
h323RegStatUpdateFailures = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 24, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h323RegStatUpdateFailures.setStatus('current')
if mibBuilder.loadTexts: h323RegStatUpdateFailures.setDescription('Number of H.323 registration update failures')
h323RegStatAuthFailures = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 24, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h323RegStatAuthFailures.setStatus('current')
if mibBuilder.loadTexts: h323RegStatAuthFailures.setDescription('Number of H.323 registration authentication failures')
custH323RegStatsTable = MibTable((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 25, 1), )
if mibBuilder.loadTexts: custH323RegStatsTable.setStatus('current')
if mibBuilder.loadTexts: custH323RegStatsTable.setDescription('Description')
custH323RegStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 25, 1, 1), ).setIndexNames((0, "Netrake-MIB", "custH323RegStatId"))
if mibBuilder.loadTexts: custH323RegStatsEntry.setStatus('current')
if mibBuilder.loadTexts: custH323RegStatsEntry.setDescription('Row Description')
custH323RegStatId = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 25, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custH323RegStatId.setStatus('current')
if mibBuilder.loadTexts: custH323RegStatId.setDescription('Unique identifier for this customer as specified in the XML file')
custH323RegStatActiveReg = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 25, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custH323RegStatActiveReg.setStatus('current')
if mibBuilder.loadTexts: custH323RegStatActiveReg.setDescription('Current number of active H.323 registrations for a customer')
custH323RegStatExpiredReg = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 25, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custH323RegStatExpiredReg.setStatus('current')
if mibBuilder.loadTexts: custH323RegStatExpiredReg.setDescription('Current number of expired H.323 registrations for a customer')
custH323RegStatUnauthorizedReg = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 25, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custH323RegStatUnauthorizedReg.setStatus('current')
if mibBuilder.loadTexts: custH323RegStatUnauthorizedReg.setDescription('The accumulated number of unauthorized H.323 registrations for a customer')
custH323RegStatPeakActiveReg = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 25, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custH323RegStatPeakActiveReg.setStatus('current')
if mibBuilder.loadTexts: custH323RegStatPeakActiveReg.setDescription('Peak number of active H.323 registrations for a customer')
custH323RegStatUpdateComplete = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 25, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custH323RegStatUpdateComplete.setStatus('current')
if mibBuilder.loadTexts: custH323RegStatUpdateComplete.setDescription('The accumulated number of updated H.323 registrations for a customer')
custH323RegStatUpdateFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 25, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custH323RegStatUpdateFailures.setStatus('current')
if mibBuilder.loadTexts: custH323RegStatUpdateFailures.setDescription('The accumulated number of failed H.323 registration updates for a customer')
custH323RegStatAuthFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 25, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custH323RegStatAuthFailures.setStatus('current')
if mibBuilder.loadTexts: custH323RegStatAuthFailures.setDescription('The accumulated number of H.323 registration authentication faliures for a customer')
sipCommonStatsDiscontinuityTimer = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 26, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipCommonStatsDiscontinuityTimer.setStatus('current')
if mibBuilder.loadTexts: sipCommonStatsDiscontinuityTimer.setDescription("The number of centi-seconds since the sipCommonStats were last reset. When the value of this attribute is reset a discontinuity of all of the counters in the sipCommonStats has occured. This should cause the management application to not compute deltas for the current polling interval. These statistics can be reset using the 'clear stats common sip' command on the nCite CLI. These statistics can also be cleared by issuing an SNMP Set to nCiteStatsReset with the value of sipCommonStats ( 10 ).")
sipCommonStatsScalars = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 26, 2))
sipCommonStatsTotalMessageErrors = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 26, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipCommonStatsTotalMessageErrors.setStatus('current')
if mibBuilder.loadTexts: sipCommonStatsTotalMessageErrors.setDescription('Cumulative tally, since sipCommonStatsDiscontinuityTimer was reset, of SIP message errors encountered. Discontinuities in this counter can be detected by the value of sipCommonStatsDiscontinuityTimer being reset.')
sipCommonStatsTotalMessageRoutingFailures = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 26, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipCommonStatsTotalMessageRoutingFailures.setStatus('current')
if mibBuilder.loadTexts: sipCommonStatsTotalMessageRoutingFailures.setDescription('Cumulative tally, since sipCommonStatsDiscontinuityTimer was reset, of failures to determine routing for a SIP message. Discontinuities in this counter can be detected by the value of sipCommonStatsDiscontinuityTimer being reset.')
sipCommonStatsTotalMessageTransmitFailures = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 26, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipCommonStatsTotalMessageTransmitFailures.setStatus('current')
if mibBuilder.loadTexts: sipCommonStatsTotalMessageTransmitFailures.setDescription('Cumulative tally, since sipCommonStatsDiscontinuityTimer was reset, of failures to transmit a SIP message. Discontinuities in this counter can be detected by the value of sipCommonStatsDiscontinuityTimer being reset.')
sipCommonStatsTotalAuthenticationFailures = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 26, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipCommonStatsTotalAuthenticationFailures.setStatus('current')
if mibBuilder.loadTexts: sipCommonStatsTotalAuthenticationFailures.setDescription('Cumulative tally, since sipCommonStatsDiscontinuityTimer was reset, of SIP messages that failed Customer Authentication, Sender or Target. Discontinuities in this counter can be detected by the value of sipCommonStatsDiscontinuityTimer being reset.')
sipEvtDlgStatsDiscontinuityTimer = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 27, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipEvtDlgStatsDiscontinuityTimer.setStatus('current')
if mibBuilder.loadTexts: sipEvtDlgStatsDiscontinuityTimer.setDescription("The number of centi-seconds since the sipEvtDlgStats were last reset. When the value of this attribute is reset a discontinuity of all of the counters in the sipEvtDlgStats has occured. This should cause the management application to not compute deltas for the current polling interval. These statistics can be reset using the 'clear stats eventdialog' command on the nCite CLI.These statistics can also be cleared by issuing an SNMP Set to nCiteStatsReset with the value of sipEvtDlgStats ( 11 ).")
sipEvtDlgStatsScalars = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 27, 2))
sipEvtDlgStatsActiveDialogs = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 27, 2, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipEvtDlgStatsActiveDialogs.setStatus('current')
if mibBuilder.loadTexts: sipEvtDlgStatsActiveDialogs.setDescription('The current number of Event Dialogs successfully created by a SUBSCRIBE request.')
sipEvtDlgStatsPeakActiveDialogs = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 27, 2, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipEvtDlgStatsPeakActiveDialogs.setStatus('current')
if mibBuilder.loadTexts: sipEvtDlgStatsPeakActiveDialogs.setDescription('The peak number of Active Dialogs at one time since startup or the last clear.')
sipEvtDlgStatsTerminatedDialogs = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 27, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipEvtDlgStatsTerminatedDialogs.setStatus('current')
if mibBuilder.loadTexts: sipEvtDlgStatsTerminatedDialogs.setDescription('Cumulative tally, since sipEvtDlgStatsDiscontinuityTimer was reset, of Event Dialogs that were terminated via NOTIFY with Subscription-state of terminated, or du e to User Delete. Discontinuities in this counter can be detected by the value of sipEvtDlgStatsDiscontinuityTimer being reset.')
sipEvtDlgStatsExpiredDialogs = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 27, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipEvtDlgStatsExpiredDialogs.setStatus('current')
if mibBuilder.loadTexts: sipEvtDlgStatsExpiredDialogs.setDescription('Cumulative tally, since sipEvtDlgStatsDiscontinuityTimer was reset, of Event Dialogs that were terminated due to expiration for the entire system. Discontinuities in this counter can be detected by the value of sipEvtDlgStatsDiscontinuityTimer being reset.')
sipEvtDlgStatsFailedDialogs = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 27, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipEvtDlgStatsFailedDialogs.setStatus('current')
if mibBuilder.loadTexts: sipEvtDlgStatsFailedDialogs.setDescription('Cumulative tally, since sipEvtDlgStatsDiscontinuityTimer was reset, of Event Dialogs that were terminated due to error reponse to establishing SUBSCRIBE, an Abort Response to mid-dialog SUBSCRIBE or NOTIFY, a Challenge Answer Timeout, or a Transaction Timeout on any SUBSCRIBE or NOTIFY for the entire system. Discontinuities in this counter can be detected by the value of sipEvtDlgStatsDiscontinuityTimer being reset.')
sipEvtDlgStatsUnauthorizedDialogs = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 27, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipEvtDlgStatsUnauthorizedDialogs.setStatus('current')
if mibBuilder.loadTexts: sipEvtDlgStatsUnauthorizedDialogs.setDescription('Cumulative tally, since sipEvtDlgStatsDiscontinuityTimer was reset, of Event Dialogs that were not created or were terminated due to failing authorization (exceeding Global Event Dialog SAC or Customer Event Dialog SAC) for the entire system. Discontinuities in this counter can be detected by the value of sipEvtDlgStatsDiscontinuityTimer being reset.')
sipEvtDlgStatsAuthenticationChallenges = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 27, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipEvtDlgStatsAuthenticationChallenges.setStatus('current')
if mibBuilder.loadTexts: sipEvtDlgStatsAuthenticationChallenges.setDescription('Cumulative tally, since sipEvtDlgStatsDiscontinuityTimer was reset, of Event Dialogs that received an Authentication Challenge response (401/407) to the establishing SUBSCRIBE for the entire system. Discontinuities in this counter can be detected by the value of sipEvtDlgStatsDiscontinuityTimer being reset.')
sipEvtDlgCustStatsTable = MibTable((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 27, 3), )
if mibBuilder.loadTexts: sipEvtDlgCustStatsTable.setStatus('current')
if mibBuilder.loadTexts: sipEvtDlgCustStatsTable.setDescription('Description')
sipEvtDlgCustStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 27, 3, 1), ).setIndexNames((0, "Netrake-MIB", "sipEvtDlgCustStatsIndex"))
if mibBuilder.loadTexts: sipEvtDlgCustStatsEntry.setStatus('current')
if mibBuilder.loadTexts: sipEvtDlgCustStatsEntry.setDescription('Row Description')
sipEvtDlgCustStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 27, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipEvtDlgCustStatsIndex.setStatus('current')
if mibBuilder.loadTexts: sipEvtDlgCustStatsIndex.setDescription('Customer ID as it is defined in the EMS database and the XML file provisioned to the nCIte')
sipEvtDlgCustStatsActiveDialogs = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 27, 3, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipEvtDlgCustStatsActiveDialogs.setStatus('current')
if mibBuilder.loadTexts: sipEvtDlgCustStatsActiveDialogs.setDescription('The current number of Event Dialogs successfully created by a SUBSCRIBE request for this customer.')
sipEvtDlgCustStatsPeakActiveDialogs = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 27, 3, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipEvtDlgCustStatsPeakActiveDialogs.setStatus('current')
if mibBuilder.loadTexts: sipEvtDlgCustStatsPeakActiveDialogs.setDescription('The peak number of Active Dialogs at one time since startup or the last clear for this customer.')
sipEvtDlgCustStatsTerminatedDialogs = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 27, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipEvtDlgCustStatsTerminatedDialogs.setStatus('current')
if mibBuilder.loadTexts: sipEvtDlgCustStatsTerminatedDialogs.setDescription('Cumulative tally, since sipEvtDlgStatsDiscontinuityTimer was reset, of Event Dialogs that were terminated via NOTIFY with Subscription-state of terminated, or due to User Delete for this customer. Discontinuities in this counter can be detected by the value of sipEvtDlgStatsDiscontinuityTimer being reset.')
sipEvtDlgCustStatsExpiredDialogs = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 27, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipEvtDlgCustStatsExpiredDialogs.setStatus('current')
if mibBuilder.loadTexts: sipEvtDlgCustStatsExpiredDialogs.setDescription('Cumulative tally, since sipEvtDlgStatsDiscontinuityTimer was reset, of Event Dialogs that were terminated due to expiration for this customer. Discontinuities in this counter can be detected by the value of sipEvtDlgStatsDiscontinuityTimer being reset.')
sipEvtDlgCustStatsFailedDialogs = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 27, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipEvtDlgCustStatsFailedDialogs.setStatus('current')
if mibBuilder.loadTexts: sipEvtDlgCustStatsFailedDialogs.setDescription('Cumulative tally, since sipEvtDlgStatsDiscontinuityTimer was reset, of Event Dialogs that were terminated due to error reponse to establishing SUBSCRIBE, an Abort Response to mid-dialog SUBSCRIBE or NOTIFY, a Challenge Answer Timeout, or a Transaction Timeout on any SUBSCRIBE or NOTIFY for this customer. Discontinuities in this counter can be detected by the value of sipEvtDlgStatsDiscontinuityTimer being reset.')
sipEvtDlgCustStatsUnauthorizedDialogs = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 27, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipEvtDlgCustStatsUnauthorizedDialogs.setStatus('current')
if mibBuilder.loadTexts: sipEvtDlgCustStatsUnauthorizedDialogs.setDescription('Cumulative tally, since sipEvtDlgStatsDiscontinuityTimer was reset, of Event Dialogs that were not created or were terminated due to failing authorization (exceeding Global Event Dialog SAC or Customer Event Dialog SAC) for this customer. Discontinuities in this counter can be detected by the value of sipEvtDlgStatsDiscontinuityTimer being reset.')
sipEvtDlgCustStatsAuthenticationChallenges = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 27, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipEvtDlgCustStatsAuthenticationChallenges.setStatus('current')
if mibBuilder.loadTexts: sipEvtDlgCustStatsAuthenticationChallenges.setDescription('Cumulative tally, since sipEvtDlgStatsDiscontinuityTimer was reset, of Event Dialogs that received an Authentication Challenge response (401/407) to the establishing SUBSCRIBE for this customer. Discontinuities in this counter can be detected by the value of sipEvtDlgStatsDiscontinuityTimer being reset.')
diagType = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 7, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("nCiteFullIntLoopback", 1), ("nCiteFullExtLoopback", 2), ("nCiteInterfaceIntLoopback", 3), ("nCiteInterfaceExtLoopback", 4), ("cardIntLoopback", 5), ("cardExtLoopback", 6), ("portIntLoopback", 7), ("portExtLoopback", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diagType.setStatus('deprecated')
if mibBuilder.loadTexts: diagType.setDescription('Diagnostic Type')
diagDeviceSlotNum = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 7, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diagDeviceSlotNum.setStatus('deprecated')
if mibBuilder.loadTexts: diagDeviceSlotNum.setDescription('Slot that contains the device')
diagDevPortNum = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 7, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 48))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diagDevPortNum.setStatus('deprecated')
if mibBuilder.loadTexts: diagDevPortNum.setDescription('Port number used for the diagnostic. Should be defaulted if not used.')
diagStartCmd = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 7, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("default", 0), ("runDiag", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diagStartCmd.setStatus('deprecated')
if mibBuilder.loadTexts: diagStartCmd.setDescription('Setting of this value causes the nCite to perform the requested diagnostic')
nrObjectIDs = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 3))
nrSessionBorderController = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 3, 1))
nrSBCSE = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 3, 1, 1))
nrSBCwNcp = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 3, 1, 1, 1))
nrSBCwNte = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 3, 1, 1, 2))
nrSBCDE = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 3, 1, 2))
mibBuilder.exportSymbols("Netrake-MIB", systemOperStateChangeTrap=systemOperStateChangeTrap, activeAlarmAcknowledgeSource=activeAlarmAcknowledgeSource, custVoIpCallsFailed=custVoIpCallsFailed, ipPortRowStatus=ipPortRowStatus, realTimeTotalPackets=realTimeTotalPackets, sipEvtDlgStatsTerminatedDialogs=sipEvtDlgStatsTerminatedDialogs, custRegStatFailed=custRegStatFailed, sipEvtDlgStatsActiveDialogs=sipEvtDlgStatsActiveDialogs, sipH323PeakSameSideActiveCalls=sipH323PeakSameSideActiveCalls, underSizeFramesRcvd=underSizeFramesRcvd, redundantPort1NetMask=redundantPort1NetMask, chasBrdOccSlots=chasBrdOccSlots, h323PeakSameSideActiveCalls=h323PeakSameSideActiveCalls, sipH323CallsProcessed=sipH323CallsProcessed, custSipH323CallsDropped=custSipH323CallsDropped, sipH323CallsDropped=sipH323CallsDropped, h323RegStatAuthFailures=h323RegStatAuthFailures, nextImgName=nextImgName, nextImgState=nextImgState, custVoIpPeakTotalActiveCalls=custVoIpPeakTotalActiveCalls, edrGarbageCollectionState=edrGarbageCollectionState, nCiteNTACustomerId=nCiteNTACustomerId, sipH323CallsDegraded=sipH323CallsDegraded, rcvdFrames64Octets=rcvdFrames64Octets, realTimeDiscardPackets=realTimeDiscardPackets, voIpCallMediaTimeouts=voIpCallMediaTimeouts, multicastFramesRcvdOk=multicastFramesRcvdOk, edrQLTo=edrQLTo, diagRsltDesc=diagRsltDesc, custSipH323CallsFailed=custSipH323CallsFailed, arpVerifTimerChangeTrap=arpVerifTimerChangeTrap, ntsStatNumCust=ntsStatNumCust, custRegStatsEntry=custRegStatsEntry, octetsRcvdOkCount=octetsRcvdOkCount, chasPwrSupplyDesc=chasPwrSupplyDesc, vlanStats=vlanStats, activeAlarmEventFlag=activeAlarmEventFlag, redundantAdminState=redundantAdminState, systemOperStateChangeTrapAckSource=systemOperStateChangeTrapAckSource, totalPacketsDiscard=totalPacketsDiscard, sipEvtDlgStats=sipEvtDlgStats, h323CallsFailed=h323CallsFailed, nCiteOutSyncFlag=nCiteOutSyncFlag, gigEStatsEntry=gigEStatsEntry, sipStatSameSideActiveCalls=sipStatSameSideActiveCalls, activeAlarmSeverity=activeAlarmSeverity, h323LocalActiveCalls=h323LocalActiveCalls, sipH323Stats=sipH323Stats, redundantAutoFailbackFlag=redundantAutoFailbackFlag, custSipH323Stats=custSipH323Stats, totalPacketsXmitCPA=totalPacketsXmitCPA, systemTrapNoAck=systemTrapNoAck, redundantMateName=redundantMateName, sipStatAuthenticationChallenges=sipStatAuthenticationChallenges, h323RegStatUpdateFailures=h323RegStatUpdateFailures, newActiveImgTrapAck=newActiveImgTrapAck, buildCompleteTrapAck=buildCompleteTrapAck, chasFan=chasFan, erdQL2DestMediaIpPort=erdQL2DestMediaIpPort, custSipStatTermCalls=custSipStatTermCalls, h323RegStatUnauthorizedReg=h323RegStatUnauthorizedReg, arpRefreshTrap=arpRefreshTrap, systemAdminState=systemAdminState, unicastFramesRcvdOk=unicastFramesRcvdOk, lrdCallerTimeDetect=lrdCallerTimeDetect, custSipH323PeakLocalCalls=custSipH323PeakLocalCalls, h323RegStatExpiredReg=h323RegStatExpiredReg, sipStatPeakNormalActiveCalls=sipStatPeakNormalActiveCalls, private=private, custSipStatCallsProcessed=custSipStatCallsProcessed, nCIteSDRLastSent=nCIteSDRLastSent, lostFramesMacErrCount=lostFramesMacErrCount, policyStats=policyStats, sipH323PeakFaxSessions=sipH323PeakFaxSessions, resourceUsageTable=resourceUsageTable, ipPortAutoNegChangeTrap=ipPortAutoNegChangeTrap, redundActiveMateRegist=redundActiveMateRegist, custRegStatUpdateFailed=custRegStatUpdateFailed, erdQLUniqueId=erdQLUniqueId, sipEvtDlgStatsFailedDialogs=sipEvtDlgStatsFailedDialogs, custSipH323CallMediaTimeouts=custSipH323CallMediaTimeouts, nCiteNTAStatus=nCiteNTAStatus, lrdEntry=lrdEntry, h323TermCalls=h323TermCalls, edrQLSrcMediaIpPort=edrQLSrcMediaIpPort, edrNextTrafficCheck=edrNextTrafficCheck, ipPortConfigTable=ipPortConfigTable, sipEvtDlgStatsPeakActiveDialogs=sipEvtDlgStatsPeakActiveDialogs, voIpPeakTotalActiveCalls=voIpPeakTotalActiveCalls, regStatNumActive=regStatNumActive, custRegStatTermSipTimeouts=custRegStatTermSipTimeouts, nCiteRipPortConfigEntry=nCiteRipPortConfigEntry, custH323CallMediaTimeouts=custH323CallMediaTimeouts, systemRestoreFlag=systemRestoreFlag, postEvent=postEvent, custH323StatsEntry=custH323StatsEntry, ipPortConfigAdminState=ipPortConfigAdminState, sipEvtDlgCustStatsTerminatedDialogs=sipEvtDlgCustStatsTerminatedDialogs, edrQuarantineListTable=edrQuarantineListTable, chasBrd=chasBrd, h323PeakLocalCalls=h323PeakLocalCalls, regStatUnauthReg=regStatUnauthReg, activeAlarmSysUpTime=activeAlarmSysUpTime, chasBrdDescription=chasBrdDescription, coldStartTrapEnable=coldStartTrapEnable, sipStatRTPFWTraversalTimeouts=sipStatRTPFWTraversalTimeouts, vlanStatsReset=vlanStatsReset, h323AuthenticationChallenges=h323AuthenticationChallenges, ntsStatAuthFailures=ntsStatAuthFailures, arpOperTimerFreq=arpOperTimerFreq, policyTotalPacketsB=policyTotalPacketsB, systemSnmpMgrIpAddress=systemSnmpMgrIpAddress, gigEStatsTable=gigEStatsTable, h323CallsInitiating=h323CallsInitiating, h323TermTimeouts=h323TermTimeouts, custVoIpPeakNormalActiveCalls=custVoIpPeakNormalActiveCalls, framesRcvdOkCount=framesRcvdOkCount, custVoIpRTPFWTraversalTimeouts=custVoIpRTPFWTraversalTimeouts, redundantRedirectorFlagChangeTrap=redundantRedirectorFlagChangeTrap, redundantRedirectorFlagChangeTrapAck=redundantRedirectorFlagChangeTrapAck, nCiteSystem=nCiteSystem, chasFanTrapAckSource=chasFanTrapAckSource, ipPortConfigEntry=ipPortConfigEntry, lrdLastDetection=lrdLastDetection, ipPortRefreshTrapAck=ipPortRefreshTrapAck, coldStartTrapAck=coldStartTrapAck, chasBrdStateChangeTrap=chasBrdStateChangeTrap, staticRouteAdminState=staticRouteAdminState, sipH323RedirectSuccess=sipH323RedirectSuccess, custVoIpTotalActiveCalls=custVoIpTotalActiveCalls, staticRouteOperState=staticRouteOperState, ipPortAutoNegChangeTrapAck=ipPortAutoNegChangeTrapAck, custH323CallInitTimeouts=custH323CallInitTimeouts, chasSerNum=chasSerNum, diagDevPortNum=diagDevPortNum, custVoIpCallsCompletedSuccess=custVoIpCallsCompletedSuccess, edrGarbageCollectionStatus=edrGarbageCollectionStatus, sipEvtDlgCustStatsPeakActiveDialogs=sipEvtDlgCustStatsPeakActiveDialogs, sipStatCallsCompletedSuccess=sipStatCallsCompletedSuccess, voIpCallsInitiating=voIpCallsInitiating, custSipH323RTPFWTraversalTimeouts=custSipH323RTPFWTraversalTimeouts, nCiteStatsReset=nCiteStatsReset, alarm=alarm, h323RTPFWTraversalTimeouts=h323RTPFWTraversalTimeouts, h323MsgErrs=h323MsgErrs, ntsStatCustConnected=ntsStatCustConnected, sipEvtDlgCustStatsExpiredDialogs=sipEvtDlgCustStatsExpiredDialogs, sipStatTermCalls=sipStatTermCalls, edrTotalCallsRogue=edrTotalCallsRogue, custVoIpId=custVoIpId, staticRouteRefreshTrapAck=staticRouteRefreshTrapAck, sipStatNormalActiveCalls=sipStatNormalActiveCalls, custSipStatTermTimeouts=custSipStatTermTimeouts, newActiveImgTrapAckSource=newActiveImgTrapAckSource, sipStatCallsFailed=sipStatCallsFailed, nCiteArpConfig=nCiteArpConfig, octetsRcvd1024to1518=octetsRcvd1024to1518, arpOperTimerRetryCount=arpOperTimerRetryCount, activeAlarmType=activeAlarmType, staticRoutesRefreshTrap=staticRoutesRefreshTrap, h323PeakNormalActiveCalls=h323PeakNormalActiveCalls, custH323RegStatUpdateFailures=custH323RegStatUpdateFailures, acitveAlarmReportingSource=acitveAlarmReportingSource, vlanStatsEntry=vlanStatsEntry, bestEffortDiscardPackets=bestEffortDiscardPackets, h323PeakFaxSessions=h323PeakFaxSessions, custH323LocalActiveCalls=custH323LocalActiveCalls, staticRoutesRefreshNeeded=staticRoutesRefreshNeeded, sipH323AuthenticationChallenges=sipH323AuthenticationChallenges, custVoIpTermCalls=custVoIpTermCalls, custH323RegStatsEntry=custH323RegStatsEntry, newNextTrap=newNextTrap, erdQL2SrcMediaIpPort=erdQL2SrcMediaIpPort, lrdCalleeReason=lrdCalleeReason, PYSNMP_MODULE_ID=netrake, custNtsStats=custNtsStats, custH323TotalActiveCalls=custH323TotalActiveCalls, octetRcvd128to255=octetRcvd128to255, authConfigRadiusServerIp=authConfigRadiusServerIp, broadcastFramesXmitOk=broadcastFramesXmitOk, custSipH323TermCalls=custSipH323TermCalls, custVoIpCallsProcessed=custVoIpCallsProcessed, commitImgTimeStamp=commitImgTimeStamp, nCiteRedundant=nCiteRedundant, nCiteRipPortConfigTable=nCiteRipPortConfigTable, diagRsltIndex=diagRsltIndex, nCiteSDRSentTrap=nCiteSDRSentTrap, sipStatNonLocalActiveCalls=sipStatNonLocalActiveCalls, activeAlarmAdditionalInfo=activeAlarmAdditionalInfo, h323AuthFailures=h323AuthFailures, edrLastDetection=edrLastDetection, systemSoftwareVersion=systemSoftwareVersion, mediaStatTotalFaxSessions=mediaStatTotalFaxSessions, nrSBCSE=nrSBCSE, sipH323PeakLocalCalls=sipH323PeakLocalCalls, redundantConfigChangeTrapAck=redundantConfigChangeTrapAck, vlanTotalPacketsRcvd=vlanTotalPacketsRcvd, octetsXmit128to255=octetsXmit128to255, sipH323TotalActiveCalls=sipH323TotalActiveCalls, staticRouteMetric1=staticRouteMetric1, sipH323TermCalls=sipH323TermCalls, custSipStatCallMediaTimeouts=custSipStatCallMediaTimeouts, ipPortRefreshOpStates=ipPortRefreshOpStates, staticRouteDest=staticRouteDest, voIpCurrentFaxSessions=voIpCurrentFaxSessions, policyIndex=policyIndex, ipPortConfigSlotNum=ipPortConfigSlotNum, custSipStatCallsFailed=custSipStatCallsFailed, linkUpTrapAckSource=linkUpTrapAckSource, custVoIpStats=custVoIpStats, buildStartedTrapAck=buildStartedTrapAck, nextImgDwnldTimeStamp=nextImgDwnldTimeStamp, lrdCallerMediaAnchorIPPort=lrdCallerMediaAnchorIPPort, voIpMessageRoutingFailures=voIpMessageRoutingFailures, switchNotifications=switchNotifications, nCiteRipInterfacesPortNum=nCiteRipInterfacesPortNum, authConfigRadiusServersTable=authConfigRadiusServersTable, nrSBCwNcp=nrSBCwNcp, erdQL2DestMediaAnchorIpPort=erdQL2DestMediaAnchorIpPort, nCiteNTATable=nCiteNTATable, redundantRedirectorFlag=redundantRedirectorFlag, custVoIpCallsDropped=custVoIpCallsDropped, diagResultsEntry=diagResultsEntry, arpNextHopIP=arpNextHopIP, nrtTotalPackets=nrtTotalPackets, lrdTotalCallsRogue=lrdTotalCallsRogue, sipEvtDlgCustStatsFailedDialogs=sipEvtDlgCustStatsFailedDialogs, eventAcknowledge=eventAcknowledge, chasBrdSlotLabel=chasBrdSlotLabel, h323CallInitTimeouts=h323CallInitTimeouts, h323MessageRoutingFailures=h323MessageRoutingFailures, custSipAuthenticationChallenges=custSipAuthenticationChallenges, chasBrdPwr=chasBrdPwr, licenseEntry=licenseEntry, authConfigRadiusRetryInterval=authConfigRadiusRetryInterval, regStatAuthenticationChallenges=regStatAuthenticationChallenges, ipPortVrdTag=ipPortVrdTag, coldStartTrapAckSource=coldStartTrapAckSource, custRegStats=custRegStats, redundantAutoFailbackChangeTrap=redundantAutoFailbackChangeTrap, sipEvtDlgStatsAuthenticationChallenges=sipEvtDlgStatsAuthenticationChallenges, arpRefreshTrapAckSource=arpRefreshTrapAckSource, custNtsStatId=custNtsStatId, activeImgPidSideAFilename=activeImgPidSideAFilename, ipPortConfigIpAddr=ipPortConfigIpAddr, voIpRTPFWTraversalTimeouts=voIpRTPFWTraversalTimeouts, edrGarbageCollectionComplete=edrGarbageCollectionComplete, sipEvtDlgStatsScalars=sipEvtDlgStatsScalars, chasBrdReset=chasBrdReset, gigEStats=gigEStats, activeImgBuildCompleteTimeStamp=activeImgBuildCompleteTimeStamp, custVoIpCallsDegraded=custVoIpCallsDegraded, arpUpdateMacTrapAck=arpUpdateMacTrapAck, nCiteSDREnable=nCiteSDREnable)
mibBuilder.exportSymbols("Netrake-MIB", chasFanDescription=chasFanDescription, custSipH323CallInitTimeouts=custSipH323CallInitTimeouts, nCiteRipState=nCiteRipState, custSipStatTotalActiveCalls=custSipStatTotalActiveCalls, sipStatRedirectFailures=sipStatRedirectFailures, mediaStatPeakFaxSessions=mediaStatPeakFaxSessions, custH323RegStatUnauthorizedReg=custH323RegStatUnauthorizedReg, regStatTermSipTimeouts=regStatTermSipTimeouts, voIpTotalActiveCalls=voIpTotalActiveCalls, regStatNumInitiating=regStatNumInitiating, sipEvtDlgCustStatsActiveDialogs=sipEvtDlgCustStatsActiveDialogs, custVoIpStatsEntry=custVoIpStatsEntry, diagCompleteTrapAckSource=diagCompleteTrapAckSource, lrdCallId=lrdCallId, redundantConfigChangeTrapAckSource=redundantConfigChangeTrapAckSource, mediaStatTotalVideoSessions=mediaStatTotalVideoSessions, diagRsltAcknowledge=diagRsltAcknowledge, custSipNormalActiveCalls=custSipNormalActiveCalls, custRegAuthenticationChallenges=custRegAuthenticationChallenges, chasFanEntry=chasFanEntry, nrSessionBorderController=nrSessionBorderController, commitImgActivatedTimeStamp=commitImgActivatedTimeStamp, chasBrdType=chasBrdType, sipH323CallsCompletedSuccess=sipH323CallsCompletedSuccess, sipStatPeakTotalActiveCalls=sipStatPeakTotalActiveCalls, activeAlarmSubType=activeAlarmSubType, sipStatPeakSameSideActiveCalls=sipStatPeakSameSideActiveCalls, edrQLDestMediaAnchorIpPort=edrQLDestMediaAnchorIpPort, systemTrapAckEntry=systemTrapAckEntry, staticRouteEgressVlan=staticRouteEgressVlan, sipStatCallsAbandoned=sipStatCallsAbandoned, sipH323SameSideActiveCalls=sipH323SameSideActiveCalls, systemTrapAckTable=systemTrapAckTable, voIpCallInitTimeouts=voIpCallInitTimeouts, nCiteRIPConfig=nCiteRIPConfig, redundantAutoFailbackFlagChangeTrapAck=redundantAutoFailbackFlagChangeTrapAck, resourceUsageEntry=resourceUsageEntry, activeAlarmAcknowledge=activeAlarmAcknowledge, sipH323LocalActiveCalls=sipH323LocalActiveCalls, histEvent=histEvent, activeAlarmCategory=activeAlarmCategory, chasBrdState=chasBrdState, nCiteNTAReset=nCiteNTAReset, activeAlarmID=activeAlarmID, lrdUniqueId=lrdUniqueId, serviceStatsTable=serviceStatsTable, edrCurrentCallCount=edrCurrentCallCount, licenseIndex=licenseIndex, sipH323NormalActiveCalls=sipH323NormalActiveCalls, diagRsltDevicePortNum=diagRsltDevicePortNum, commitImgBuildStartTimeStamp=commitImgBuildStartTimeStamp, edrPerformGarbageCollection=edrPerformGarbageCollection, custSipH323CallsAbandoned=custSipH323CallsAbandoned, custSipH323PeakNormalActiveCalls=custSipH323PeakNormalActiveCalls, ipPortConfigNetMask=ipPortConfigNetMask, mediaStatCurrentVideoSessions=mediaStatCurrentVideoSessions, sipCommonStatsTotalMessageRoutingFailures=sipCommonStatsTotalMessageRoutingFailures, registrationStats=registrationStats, edrGarbageCollectionCompleteTrapAckSource=edrGarbageCollectionCompleteTrapAckSource, custNtsStatsTable=custNtsStatsTable, nCiteRipInterfacesTable=nCiteRipInterfacesTable, redundantPort1IpAddr=redundantPort1IpAddr, octetsRcvd256to511=octetsRcvd256to511, linkUpTrapAck=linkUpTrapAck, h323PeakTotalActiveCalls=h323PeakTotalActiveCalls, custH323PeakLocalCalls=custH323PeakLocalCalls, serviceStatsPortIndex=serviceStatsPortIndex, octetsXmit256to511=octetsXmit256to511, octetsXmit512to1023=octetsXmit512to1023, ipPortAutoNegTable=ipPortAutoNegTable, sipStatCallInitTimeouts=sipStatCallInitTimeouts, h323CallsCompletedSuccess=h323CallsCompletedSuccess, voIpPeakLocalCalls=voIpPeakLocalCalls, arpOperTimerChangeTrapAckSource=arpOperTimerChangeTrapAckSource, redundantRedirectorFlagChangeTrapAckSource=redundantRedirectorFlagChangeTrapAckSource, octetsRcvd65to127=octetsRcvd65to127, activeImgDwnldTimeStamp=activeImgDwnldTimeStamp, regStatPeak=regStatPeak, voIpCallsCompletedSuccess=voIpCallsCompletedSuccess, custSipH323Id=custSipH323Id, regStatInitSipTimeouts=regStatInitSipTimeouts, totalPacketsXmit=totalPacketsXmit, chasBrdStatusLeds=chasBrdStatusLeds, custH323CallsDropped=custH323CallsDropped, vlanStatsSlotNum=vlanStatsSlotNum, nCiteSDRSentTrapAck=nCiteSDRSentTrapAck, diagRsltDeviceSlotNum=diagRsltDeviceSlotNum, diagCompleteTrapAck=diagCompleteTrapAck, custSipH323LocalActiveCalls=custSipH323LocalActiveCalls, newNextTrapAckSource=newNextTrapAckSource, chasPwrTrap=chasPwrTrap, linkStatusChanges=linkStatusChanges, sipStatPeakLocalCalls=sipStatPeakLocalCalls, newNextTrapAck=newNextTrapAck, newActiveImgTrap=newActiveImgTrap, diagRsltID=diagRsltID, arpMacAddr=arpMacAddr, voIpMessagesReroutedToMate=voIpMessagesReroutedToMate, nextImgBuildStartTimeStamp=nextImgBuildStartTimeStamp, regStatFailed=regStatFailed, frameSeqErrCount=frameSeqErrCount, custRegStatTerminating=custRegStatTerminating, voIpCallsDegraded=voIpCallsDegraded, custSipStatCallsAbandoned=custSipStatCallsAbandoned, sipStatAuthFailures=sipStatAuthFailures, custSipH323TermTimeouts=custSipH323TermTimeouts, processorIndex=processorIndex, ipPortConfigPortNum=ipPortConfigPortNum, nCiteRipPortNum=nCiteRipPortNum, custH323RegStatExpiredReg=custH323RegStatExpiredReg, staticRouteChange=staticRouteChange, redundNumRedundLinkFailures=redundNumRedundLinkFailures, policyTotalPackets=policyTotalPackets, h323TotalFaxSessions=h323TotalFaxSessions, diagDeviceSlotNum=diagDeviceSlotNum, globalCounters=globalCounters, lrdCurrentCallCount=lrdCurrentCallCount, custSipStatCallsCompletedSuccess=custSipStatCallsCompletedSuccess, broadcastFramesRcvdOk=broadcastFramesRcvdOk, lrdCallerState=lrdCallerState, voIpMsgErrs=voIpMsgErrs, buildCompleteTrap=buildCompleteTrap, redundantFailbackThreshChangeTrap=redundantFailbackThreshChangeTrap, custH323RegStatUpdateComplete=custH323RegStatUpdateComplete, custSipH323SameSideActiveCalls=custSipH323SameSideActiveCalls, edrGarbageCollectionCompleteTrapAck=edrGarbageCollectionCompleteTrapAck, lrdCalleeSourceIPPort1=lrdCalleeSourceIPPort1, custVoIpNormalActiveCalls=custVoIpNormalActiveCalls, activeAlarmTable=activeAlarmTable, sipEvtDlgStatsUnauthorizedDialogs=sipEvtDlgStatsUnauthorizedDialogs, custVoIpSameSideActiveCalls=custVoIpSameSideActiveCalls, ipPortConfigChangeTrapAckSource=ipPortConfigChangeTrapAckSource, edrLastGarbageCollection=edrLastGarbageCollection, custVoIpAuthenticationChallenges=custVoIpAuthenticationChallenges, voIpTermTimeouts=voIpTermTimeouts, runDiagGroup=runDiagGroup, serviceStats=serviceStats, arpUpdateMacTrap=arpUpdateMacTrap, custRegStatPeak=custRegStatPeak, activeImgPidSideBFilename=activeImgPidSideBFilename, octetsRcvd512to1023=octetsRcvd512to1023, nCiteStats=nCiteStats, regStatAuthFailures=regStatAuthFailures, netrake=netrake, nCiteNTA=nCiteNTA, mediaStatCurrentFaxSessions=mediaStatCurrentFaxSessions, nrtDiscardPackets=nrtDiscardPackets, buildStartedTrapAckSource=buildStartedTrapAckSource, lrdCalleeTimeDetect=lrdCalleeTimeDetect, regStatDropped=regStatDropped, h323CallMediaTimeouts=h323CallMediaTimeouts, ipPortAutoNegFlag=ipPortAutoNegFlag, ipPortConfigOperState=ipPortConfigOperState, custSipStatsTable=custSipStatsTable, voIpNormalActiveCalls=voIpNormalActiveCalls, custVoIpTermTimeouts=custVoIpTermTimeouts, regStatUpdateSuccess=regStatUpdateSuccess, sipEvtDlgCustStatsTable=sipEvtDlgCustStatsTable, ipPortConfigChangeTrap=ipPortConfigChangeTrap, sipH323PeakNormalActiveCalls=sipH323PeakNormalActiveCalls, sipEvtDlgCustStatsUnauthorizedDialogs=sipEvtDlgCustStatsUnauthorizedDialogs, edrPeakCallCount=edrPeakCallCount, lrdPeakCallCount=lrdPeakCallCount, diagType=diagType, systemOperStateChangeTrapAck=systemOperStateChangeTrapAck, custRegStatUnauthorizedReg=custRegStatUnauthorizedReg, custRegStatNumInitiated=custRegStatNumInitiated, ipPortAutoNegEntry=ipPortAutoNegEntry, sipEvtDlgStatsDiscontinuityTimer=sipEvtDlgStatsDiscontinuityTimer, custSipStats=custSipStats, custSipPeakLocalCalls=custSipPeakLocalCalls, nCiteStaticRoutes=nCiteStaticRoutes, sipStatCallsDegraded=sipStatCallsDegraded, sipStatCallMediaTimeouts=sipStatCallMediaTimeouts, sipStatTotalFaxSessions=sipStatTotalFaxSessions, sipH323RTPFWTraversalTimeouts=sipH323RTPFWTraversalTimeouts, chasGen=chasGen, edrQLRequestURI=edrQLRequestURI, sipStatMsgErrs=sipStatMsgErrs, lrdCallerSourceIPPort1=lrdCallerSourceIPPort1, licenseInstallDate=licenseInstallDate, custNtsStatsEntry=custNtsStatsEntry, custH323RTPFWTraversalTimeouts=custH323RTPFWTraversalTimeouts, lrdCallerReason=lrdCallerReason, chasBrdStateChangeTrapAck=chasBrdStateChangeTrapAck, octetsXmit65to127=octetsXmit65to127, sipStatCurrentFaxSessions=sipStatCurrentFaxSessions, diagRsltCompleteTimeStamp=diagRsltCompleteTimeStamp, staticRouteVrdTag=staticRouteVrdTag, licenseFileChangeTrapAckSource=licenseFileChangeTrapAckSource, h323RegStatUpdateComplete=h323RegStatUpdateComplete, h323RegStatPeakActiveReg=h323RegStatPeakActiveReg, h323CurrentFaxSessions=h323CurrentFaxSessions, custSipH323CallsDegraded=custSipH323CallsDegraded, authConfigRadiusServersEntry=authConfigRadiusServersEntry, redundantPort2IpAddr=redundantPort2IpAddr, custVoIpPeakLocalCalls=custVoIpPeakLocalCalls, chasPwrSupplyIndex=chasPwrSupplyIndex, sipStatCallsProcessed=sipStatCallsProcessed, nCiteRipPortSlotNum=nCiteRipPortSlotNum, sipH323AuthFailures=sipH323AuthFailures, chasFanOperStatus=chasFanOperStatus, nCiteRipPortPrimary=nCiteRipPortPrimary, nrObjectIDs=nrObjectIDs, activeAlarmId=activeAlarmId, octetsXmit1519toMax=octetsXmit1519toMax, sipH323TermTimeouts=sipH323TermTimeouts, h323RegStats=h323RegStats, newCommittedImgTrapAckSource=newCommittedImgTrapAckSource, chasPwrTrapAck=chasPwrTrapAck, custSipH323StatsTable=custSipH323StatsTable, nCiteStatsConfigReset=nCiteStatsConfigReset, sipH323CallInitTimeouts=sipH323CallInitTimeouts, policyTotalPacketsA=policyTotalPacketsA, sipEvtDlgCustStatsAuthenticationChallenges=sipEvtDlgCustStatsAuthenticationChallenges, chasPwrSupplyTable=chasPwrSupplyTable, sipH323CallsAbandoned=sipH323CallsAbandoned, h323CallsDegraded=h323CallsDegraded, licenseInfo=licenseInfo, licenseValue=licenseValue, custSipH323NormalActiveCalls=custSipH323NormalActiveCalls, ipPortConfig=ipPortConfig, redundantPort2NetMask=redundantPort2NetMask, custH323TermCalls=custH323TermCalls, custSipStatCallsDropped=custSipStatCallsDropped, custH323CallsInitiating=custH323CallsInitiating, xmitFrames64Octets=xmitFrames64Octets, chasBrdIfIndex=chasBrdIfIndex, sipH323TotalFaxSessions=sipH323TotalFaxSessions, sipStatLocalActiveCalls=sipStatLocalActiveCalls, redundRecoveryModeTimeTicks=redundRecoveryModeTimeTicks, custSipH323TotalActiveCalls=custSipH323TotalActiveCalls, arpVerifTimerChangeTrapAck=arpVerifTimerChangeTrapAck, redundantConfigChangeTrap=redundantConfigChangeTrap, newCommittedImgTrap=newCommittedImgTrap, redundantAutoFailbackFlagChangeTrapAckSource=redundantAutoFailbackFlagChangeTrapAckSource, custH323CallsCompletedSuccess=custH323CallsCompletedSuccess, voIpTotalFaxSessions=voIpTotalFaxSessions, diagCompleteTrap=diagCompleteTrap, regStatUpdateFailed=regStatUpdateFailed, staticRouteRefreshTrapAckSource=staticRouteRefreshTrapAckSource, ipPortAutoNegSlotNum=ipPortAutoNegSlotNum, nrSBCwNte=nrSBCwNte, redundantFailbackThreshChangeTrapAck=redundantFailbackThreshChangeTrapAck, voIpPeakNormalActiveCalls=voIpPeakNormalActiveCalls, arpRefreshTrapAck=arpRefreshTrapAck, custSipStatCallInitTimeouts=custSipStatCallInitTimeouts, sipCommonStats=sipCommonStats, custSipPeakNormalActiveCalls=custSipPeakNormalActiveCalls, sipH323PeakTotalActiveCalls=sipH323PeakTotalActiveCalls, trapAckEnable=trapAckEnable, custRegStatExpired=custRegStatExpired, custSipH323PeakTotalActiveCalls=custSipH323PeakTotalActiveCalls, staticRouteIngressVlanTag=staticRouteIngressVlanTag)
mibBuilder.exportSymbols("Netrake-MIB", sipStatMessagesReroutedToMate=sipStatMessagesReroutedToMate, custRegStatNumActive=custRegStatNumActive, voIpCallsAbandoned=voIpCallsAbandoned, h323RegStatActiveReg=h323RegStatActiveReg, activeAlarmServiceAffecting=activeAlarmServiceAffecting, products=products, diagRsltType=diagRsltType, nCiteRipInterafacesSlotNum=nCiteRipInterafacesSlotNum, activeAlarmPortNum=activeAlarmPortNum, custSipStatCallsInitiating=custSipStatCallsInitiating, jabbersRcvd=jabbersRcvd, diagStartCmd=diagStartCmd, chassis=chassis, redundActiveMateCalls=redundActiveMateCalls, staticRouteIngressProtocol=staticRouteIngressProtocol, redundPairedModeTimeTicks=redundPairedModeTimeTicks, custH323CallsProcessed=custH323CallsProcessed, custVoIpCallsAbandoned=custVoIpCallsAbandoned, ipPortVlanTag=ipPortVlanTag, sipCommonStatsTotalAuthenticationFailures=sipCommonStatsTotalAuthenticationFailures, chasBrdEntry=chasBrdEntry, postAlarm=postAlarm, mediaStatPeakVideoSessions=mediaStatPeakVideoSessions, ipPortRefreshTrap=ipPortRefreshTrap, lrdCalleeDestIPPort=lrdCalleeDestIPPort, ipPortAutoNegChangeTrapAckSource=ipPortAutoNegChangeTrapAckSource, custVoIpCallMediaTimeouts=custVoIpCallMediaTimeouts, sipCommonStatsDiscontinuityTimer=sipCommonStatsDiscontinuityTimer, custSipPeakTotalActive=custSipPeakTotalActive, authConfigLocalOverride=authConfigLocalOverride, custH323RegStatId=custH323RegStatId, chasPwrSupplyEntry=chasPwrSupplyEntry, vlanStatsPortNum=vlanStatsPortNum, unicastFramesXmitOk=unicastFramesXmitOk, h323CallsDropped=h323CallsDropped, sipStatPeakActiveCalls=sipStatPeakActiveCalls, sipStatTermTimeouts=sipStatTermTimeouts, custH323CallsAbandoned=custH323CallsAbandoned, activeAlarmDisplayString=activeAlarmDisplayString, voIpPeakFaxSessions=voIpPeakFaxSessions, chasFanTrap=chasFanTrap, totalPacketsXmitCPB=totalPacketsXmitCPB, activeAlarmSlotNum=activeAlarmSlotNum, staticRouteChangeTrapAck=staticRouteChangeTrapAck, lrdCalleeSourceIPPort2=lrdCalleeSourceIPPort2, custH323CallsFailed=custH323CallsFailed, lrdTable=lrdTable, sipEvtDlgCustStatsIndex=sipEvtDlgCustStatsIndex, custVoIpCallsInitiating=custVoIpCallsInitiating, nCite=nCite, eventID=eventID, licenseTable=licenseTable, octetsRcvdCount=octetsRcvdCount, ipPortAutoNegPortNum=ipPortAutoNegPortNum, lrdFrom=lrdFrom, sipEvtDlgCustStatsEntry=sipEvtDlgCustStatsEntry, ipPortConfigChangeTrapAck=ipPortConfigChangeTrapAck, licenseFileChangeTrap=licenseFileChangeTrap, custH323SameSideActiveCalls=custH323SameSideActiveCalls, sipStatRedirectSuccess=sipStatRedirectSuccess, custSipH323StatsEntry=custSipH323StatsEntry, custH323TermTimeouts=custH323TermTimeouts, nextImgBuildCompleteTimeStamp=nextImgBuildCompleteTimeStamp, chasBrdSerialNum=chasBrdSerialNum, custH323RegStats=custH323RegStats, custSipStatCallsDegraded=custSipStatCallsDegraded, sipStatMessageRoutingFailures=sipStatMessageRoutingFailures, sipH323CallsInitiating=sipH323CallsInitiating, serviceStatsEntry=serviceStatsEntry, vlanTotalPacketsXmit=vlanTotalPacketsXmit, mediaStatCurrentAudioSessions=mediaStatCurrentAudioSessions, mediaStatTotalAudioSessions=mediaStatTotalAudioSessions, chasBrdTable=chasBrdTable, voIpStats=voIpStats, activeAlarmTimeStamp=activeAlarmTimeStamp, sipH323MessageRoutingFailures=sipH323MessageRoutingFailures, h323TotalActiveCalls=h323TotalActiveCalls, activeAlarmDevType=activeAlarmDevType, chasFanTrapAck=chasFanTrapAck, authConfigRadiusServerPriority=authConfigRadiusServerPriority, lrdCallerDestIPPort=lrdCallerDestIPPort, sipStatPeakNonLocalCalls=sipStatPeakNonLocalCalls, custSipH323CallsProcessed=custSipH323CallsProcessed, custSipH323AuthenticationChallenges=custSipH323AuthenticationChallenges, custH323RegStatsTable=custH323RegStatsTable, chasFanTable=chasFanTable, diagnostics=diagnostics, nCiteNTAEntry=nCiteNTAEntry, voIpAuthenticationChallenges=voIpAuthenticationChallenges, sipH323MessagesReroutedToMate=sipH323MessagesReroutedToMate, edrQLDestMediaIpPort=edrQLDestMediaIpPort, ntsStats=ntsStats, vlanStatsVlanLabel=vlanStatsVlanLabel, diagRsltStartTimeStamp=diagRsltStartTimeStamp, sipEvtDlgStatsExpiredDialogs=sipEvtDlgStatsExpiredDialogs, arpRefreshNeeded=arpRefreshNeeded, custRegStatId=custRegStatId, mediaStats=mediaStats, custRegStatsTable=custRegStatsTable, staticRouteType=staticRouteType, lrdTo=lrdTo, policyStatsReset=policyStatsReset, memUsed=memUsed, nCiteAuthConfig=nCiteAuthConfig, policyCountersEntry=policyCountersEntry, redundantFailbackThresh=redundantFailbackThresh, arpVerifTimerChangeTrapAckSource=arpVerifTimerChangeTrapAckSource, authConfigRadiusServerPort=authConfigRadiusServerPort, custH323RegStatPeakActiveReg=custH323RegStatPeakActiveReg, chasLedStatus=chasLedStatus, sipStatTotalActiveCalls=sipStatTotalActiveCalls, custRegStatUpdateSuccess=custRegStatUpdateSuccess, diagResultsTable=diagResultsTable, mediaStatPeakAudioSessions=mediaStatPeakAudioSessions, framesRcvdCount=framesRcvdCount, custVoIpStatsTable=custVoIpStatsTable, newCommittedImgTrapAck=newCommittedImgTrapAck, chasBrdStateChangeTrapAckSource=chasBrdStateChangeTrapAckSource, lrdCallerSourceIPPort2=lrdCallerSourceIPPort2, arpTrapOper=arpTrapOper, sipStatCallsDropped=sipStatCallsDropped, dod=dod, nCiteSDRSentTrapAckSource=nCiteSDRSentTrapAckSource, diagStartedTrapAck=diagStartedTrapAck, voIpTermCalls=voIpTermCalls, serviceStatsSlotId=serviceStatsSlotId, octetsXmitCount=octetsXmitCount, sipStatPeakFaxSessions=sipStatPeakFaxSessions, octetsXmit1024to1518=octetsXmit1024to1518, h323NormalActiveCalls=h323NormalActiveCalls, internet=internet, chasType=chasType, sipCommonStatsTotalMessageTransmitFailures=sipCommonStatsTotalMessageTransmitFailures, vlanStatsTable=vlanStatsTable, sipH323CurrentFaxSessions=sipH323CurrentFaxSessions, activeAlarmIndex=activeAlarmIndex, staticRouteNextHop=staticRouteNextHop, activeImgActivatedTimeStamp=activeImgActivatedTimeStamp, edrQLTimestamp=edrQLTimestamp, custSipRTPFWTraversalTimeouts=custSipRTPFWTraversalTimeouts, sipH323CallsFailed=sipH323CallsFailed, commitImgDwnldTimeStamp=commitImgDwnldTimeStamp, ipPortRefreshTrapAckSource=ipPortRefreshTrapAckSource, h323CallsProcessed=h323CallsProcessed, org=org, edrQuarantineListEntry=edrQuarantineListEntry, mediaStatTotalFailures=mediaStatTotalFailures, voIpRedirectSuccess=voIpRedirectSuccess, chasPwrSupplyOperStatus=chasPwrSupplyOperStatus, staticRoutesEntry=staticRoutesEntry, h323CallsAbandoned=h323CallsAbandoned, ipPortPlaceHolder=ipPortPlaceHolder, policyCountersTable=policyCountersTable, gigEStatsSlotNum=gigEStatsSlotNum, custH323RegStatAuthFailures=custH323RegStatAuthFailures, staticRoutesTable=staticRoutesTable, chasPwrTrapAckSource=chasPwrTrapAckSource, edrQLRogueStatus=edrQLRogueStatus, voIpRedirectFailures=voIpRedirectFailures, custH323CallsDegraded=custH323CallsDegraded, chasPOSTMode=chasPOSTMode, commitImgName=commitImgName, lrdCalleeState=lrdCalleeState, nrSBCDE=nrSBCDE, custSipStatLocalActiveCalls=custSipStatLocalActiveCalls, rogueStats=rogueStats, numPacketsDiscardCPB=numPacketsDiscardCPB, activeImgBuildStartTimeStamp=activeImgBuildStartTimeStamp, licenseExpirationDate=licenseExpirationDate, voIpCallsFailed=voIpCallsFailed, buildCompleteTrapAckSource=buildCompleteTrapAckSource, edrQLCallId=edrQLCallId, policyProvisioning=policyProvisioning, custRegStatInitSipTimeouts=custRegStatInitSipTimeouts, numPacketsDiscardCPA=numPacketsDiscardCPA, sipCommonStatsScalars=sipCommonStatsScalars, chasPwr=chasPwr, authConfigRadiusRetryCount=authConfigRadiusRetryCount, custSipStatNonLocalActiveCalls=custSipStatNonLocalActiveCalls, custH323Id=custH323Id, h323SameSideActiveCalls=h323SameSideActiveCalls, voIpPeakSameSideActiveCalls=voIpPeakSameSideActiveCalls, custH323RegStatActiveReg=custH323RegStatActiveReg, staticRouteRowStatus=staticRouteRowStatus, licenseFileName=licenseFileName, staticRouteChangeTrapAckSource=staticRouteChangeTrapAckSource, linkDownTrapAck=linkDownTrapAck, nCiteRipInterfacesIPAddr=nCiteRipInterfacesIPAddr, regStatExpired=regStatExpired, custH323AuthenticationChallenges=custH323AuthenticationChallenges, chasBrdSlotNum=chasBrdSlotNum, voIpCallsProcessed=voIpCallsProcessed, regStatTerminating=regStatTerminating, custH323NormalActiveCalls=custH323NormalActiveCalls, sipStatCallsInitiating=sipStatCallsInitiating, enterprises=enterprises, arpOperTimerChangeTrapAck=arpOperTimerChangeTrapAck, voIpLocalActiveCalls=voIpLocalActiveCalls, diagStartedTrapAckSource=diagStartedTrapAckSource, nCiteRipInterfacesEntry=nCiteRipInterfacesEntry, activeAlarmOccurances=activeAlarmOccurances, memTotal=memTotal, bestEffortTotalPackets=bestEffortTotalPackets, licenseFeatureName=licenseFeatureName, custVoIpLocalActiveCalls=custVoIpLocalActiveCalls, activeImgName=activeImgName, chasBrdMaxPorts=chasBrdMaxPorts, redundancyStats=redundancyStats, custH323PeakNormalActiveCalls=custH323PeakNormalActiveCalls, voIpCallsDropped=voIpCallsDropped, sipStats=sipStats, arpUpdateMacTrapAckSource=arpUpdateMacTrapAckSource, custSipSameSideActiveCalls=custSipSameSideActiveCalls, voIpSameSideActiveCalls=voIpSameSideActiveCalls, custSipPeakNonLocalCalls=custSipPeakNonLocalCalls, custH323Stats=custH323Stats, edrQLPerformGarbageCollection=edrQLPerformGarbageCollection, redundantFailbackThreshChangeTrapAckSource=redundantFailbackThreshChangeTrapAckSource, coldStartTrap=coldStartTrap, buildStartedTrap=buildStartedTrap, activeAlarmEntry=activeAlarmEntry, lrdCalleeMediaAnchorIPPort=lrdCalleeMediaAnchorIPPort, custSipH323CallsInitiating=custSipH323CallsInitiating, diagStartedTrap=diagStartedTrap, custSipStatPeakActiveCalls=custSipStatPeakActiveCalls, cpuUsage=cpuUsage, custVoIpCallInitTimeouts=custVoIpCallInitTimeouts, systemOperState=systemOperState, arpVerifTimerRetryCount=arpVerifTimerRetryCount, arpOperTimerChangeTrap=arpOperTimerChangeTrap, octetsRcvd1519toMax=octetsRcvd1519toMax, custSipStatId=custSipStatId, multicastFramesXmitOk=multicastFramesXmitOk, voIpAuthFailures=voIpAuthFailures, custH323StatsTable=custH323StatsTable, custNtsAuthorizationFailed=custNtsAuthorizationFailed, licenseFeatureDisplayName=licenseFeatureDisplayName, licenseFileChangeTrapAck=licenseFileChangeTrapAck, lrdRequestURI=lrdRequestURI, custSipH323CallsCompletedSuccess=custSipH323CallsCompletedSuccess, commitImgBuildCompleteTimeStamp=commitImgBuildCompleteTimeStamp, nCiteRogue=nCiteRogue, sipH323MsgErrs=sipH323MsgErrs, sipCommonStatsTotalMessageErrors=sipCommonStatsTotalMessageErrors, custH323PeakTotalActiveCalls=custH323PeakTotalActiveCalls, h323Stats=h323Stats, edrQLFrom=edrQLFrom, gigEStatsPortIndex=gigEStatsPortIndex, staticRouteNetMask=staticRouteNetMask, chasFanIndex=chasFanIndex, sipH323RedirectFailures=sipH323RedirectFailures, nCiteSDRCollectionCycle=nCiteSDRCollectionCycle, linkDownTrapAckSource=linkDownTrapAckSource, custSipStatsEntry=custSipStatsEntry)
mibBuilder.exportSymbols("Netrake-MIB", nCiteSessionDetailRecord=nCiteSessionDetailRecord, sipH323CallMediaTimeouts=sipH323CallMediaTimeouts, custRegStatDropped=custRegStatDropped)
