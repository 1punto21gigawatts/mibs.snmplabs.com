#
# PySNMP MIB module A3COM-SWITCHING-SYSTEMS-FILTER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/A3COM-SWITCHING-SYSTEMS-FILTER-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:08:22 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
iso, Integer32, enterprises, TimeTicks, Counter64, ObjectIdentity, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, IpAddress, NotificationType, Bits, Gauge32, ModuleIdentity, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Integer32", "enterprises", "TimeTicks", "Counter64", "ObjectIdentity", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "IpAddress", "NotificationType", "Bits", "Gauge32", "ModuleIdentity", "MibIdentifier")
PhysAddress, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "PhysAddress", "TextualConvention", "DisplayString")
class RowStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6))

a3Com = MibIdentifier((1, 3, 6, 1, 4, 1, 43))
switchingSystemsMibs = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 29))
a3ComSwitchingSystemsMib = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 29, 4))
a3ComFilterGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 29, 4, 20))
a3ComFilterAddressGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 29, 4, 20, 1))
a3ComFilterPortGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 29, 4, 20, 2))
a3ComBridgeFilterGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 29, 4, 20, 3))
class A3ComFilterPortType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 5)

a3ComFilterAddressGroupNextAvailableIndex = MibScalar((1, 3, 6, 1, 4, 1, 43, 29, 4, 20, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComFilterAddressGroupNextAvailableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComFilterAddressGroupNextAvailableIndex.setDescription('The value of next available a3ComFilterAddressGroupId. This object is used for index value to create a new address group.')
a3ComFilterAddressGroupCount = MibScalar((1, 3, 6, 1, 4, 1, 43, 29, 4, 20, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComFilterAddressGroupCount.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComFilterAddressGroupCount.setDescription('The count of defined address groups.')
a3ComFilterAddressGroupTable = MibTable((1, 3, 6, 1, 4, 1, 43, 29, 4, 20, 1, 3), )
if mibBuilder.loadTexts: a3ComFilterAddressGroupTable.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComFilterAddressGroupTable.setDescription('A list of address group entries. A single entry exists in this list for each defined address group in the system.')
a3ComFilterAddressGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 29, 4, 20, 1, 3, 1), ).setIndexNames((0, "A3COM-SWITCHING-SYSTEMS-FILTER-MIB", "a3ComFilterAddressGroupId"))
if mibBuilder.loadTexts: a3ComFilterAddressGroupEntry.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComFilterAddressGroupEntry.setDescription('An individual address group entry.')
a3ComFilterAddressGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 20, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComFilterAddressGroupId.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComFilterAddressGroupId.setDescription('This object uniquely identifies an address group in the systems. Its value, successively increases starting from 0, will change only if the system is rebooted. This object is obtained from a3ComFilterAddressGroupNextAvailableIndex when a new address group is created.')
a3ComFilterAddressGroupMaskId = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 20, 1, 3, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComFilterAddressGroupMaskId.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComFilterAddressGroupMaskId.setDescription('This object identifies an address group in a bridge. Each address group has an unique mask identifier, range from 1 to 32, associated with it in a bridge. This field has to be set in order to create a new address group in the desired bridge(s).')
a3ComFilterAddressGroupBridgeMask = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 20, 1, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComFilterAddressGroupBridgeMask.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComFilterAddressGroupBridgeMask.setDescription('A mask that uniquely identifies the bridge value(s) associated with this address group entry. For example, 0x0000 0000 0000 0003 represents the address group entry in bridge number 1 and 2.')
a3ComFilterAddressGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 20, 1, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComFilterAddressGroupName.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComFilterAddressGroupName.setDescription('The name of an address group. Each address group has an unique name in a system.')
a3ComFilterAddressGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 20, 1, 3, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComFilterAddressGroupStatus.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComFilterAddressGroupStatus.setDescription('The status column for this address group entry. This OBJECT can be set to: createAndGo(4) destroy(6) The following values may be read: active(1) Setting this object to createAndGo(4) will result in the agent attempt to create and commit the row based on the contents of the objects in the row. If all the necessary information is presented in the row and the values are acceptible to the agent, the agent will change the status to active(1). If there are any necessary objects are not set, the agent will reject the creation request. Setting this object to destroy(6) will delete the corresponding address group and all the attributes of the table.')
a3ComFilterAddressTable = MibTable((1, 3, 6, 1, 4, 1, 43, 29, 4, 20, 1, 4), )
if mibBuilder.loadTexts: a3ComFilterAddressTable.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComFilterAddressTable.setDescription('A list of address entries.')
a3ComFilterAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 29, 4, 20, 1, 4, 1), ).setIndexNames((0, "A3COM-SWITCHING-SYSTEMS-FILTER-MIB", "a3ComFilterAddressId"), (0, "A3COM-SWITCHING-SYSTEMS-FILTER-MIB", "a3ComFilterAddressAddress"))
if mibBuilder.loadTexts: a3ComFilterAddressEntry.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComFilterAddressEntry.setDescription('A set of parameters for a particular address entry.')
a3ComFilterAddressId = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 20, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComFilterAddressId.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComFilterAddressId.setDescription('This object uniquely identifies an address group as defined in a3ComFilterAddressGroupTable. It is obtained from a3ComFilterAddressGroupNextAvailableIndex.')
a3ComFilterAddressAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 20, 1, 4, 1, 2), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComFilterAddressAddress.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComFilterAddressAddress.setDescription('The physical address of this entry.')
a3ComFilterAddressStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 20, 1, 4, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComFilterAddressStatus.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComFilterAddressStatus.setDescription('The status column for this address group entry. This OBJECT can be set to: createAndGo(4) destroy(6) The following values may be read: active(1) Setting this object to createAndGo(4) will result in the agent attempt to create and commit the row based on the contents of the objects in the row. If all the necessary information is presented in the row and the values are acceptible to the agent, the agent will change the status to active(1). If there are any necessary objects are not set, the agent will reject the creation request. When the state of the row translates to active(1), the agent add the corresponding address to the specified address group. Setting this object to destroy(6) will remove the corresponding address from the indicated address group.')
a3ComFilterPortGroupNextAvailableIndex = MibScalar((1, 3, 6, 1, 4, 1, 43, 29, 4, 20, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComFilterPortGroupNextAvailableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComFilterPortGroupNextAvailableIndex.setDescription('The value of next available a3ComFilterPortGroupId. This object is used for index value to create a new port group.')
a3ComFilterPortGroupCount = MibScalar((1, 3, 6, 1, 4, 1, 43, 29, 4, 20, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComFilterPortGroupCount.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComFilterPortGroupCount.setDescription('The count of defined port groups in the system.')
a3ComFilterPortGroupTable = MibTable((1, 3, 6, 1, 4, 1, 43, 29, 4, 20, 2, 3), )
if mibBuilder.loadTexts: a3ComFilterPortGroupTable.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComFilterPortGroupTable.setDescription('A list of port group entries. A single entry exists in this list for each defined port group in the system.')
a3ComFilterPortGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 29, 4, 20, 2, 3, 1), ).setIndexNames((0, "A3COM-SWITCHING-SYSTEMS-FILTER-MIB", "a3ComFilterPortGroupId"))
if mibBuilder.loadTexts: a3ComFilterPortGroupEntry.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComFilterPortGroupEntry.setDescription('A set of parameters for an individual port group entry.')
a3ComFilterPortGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 20, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComFilterPortGroupId.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComFilterPortGroupId.setDescription('This object uniquely identifies a port group in the systems. Its value, successively increases starting from 0, will change only if the system is rebooted. This object is obtained from a3ComFilterPortGroupNextAvailableIndex when a new port group is created.')
a3ComFilterPortGroupMaskId = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 20, 2, 3, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComFilterPortGroupMaskId.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComFilterPortGroupMaskId.setDescription('This object identifies a port group in a bridge. Each port group has an unique mask identifier, range from 1 to 32, associated with it in a bridge. This field has to be set in order to create a new port group in a bridge.')
a3ComFilterPortGroupBridgeNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 20, 2, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComFilterPortGroupBridgeNumber.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComFilterPortGroupBridgeNumber.setDescription('The bridge index associated with this port group.')
a3ComFilterPortGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 20, 2, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComFilterPortGroupName.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComFilterPortGroupName.setDescription('The name of this port group. This object has be unique in a system.')
a3ComFilterPortGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 20, 2, 3, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComFilterPortGroupStatus.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComFilterPortGroupStatus.setDescription('The status column for this port group entry. This OBJECT can be set to: createAndGo(4) destroy(6) The following values may be read: active(1) Setting this object to createAndGo(4) will result in the agent attempting to create and commit the row based on the contents of the objects in the row. If all the necessary information is presented in the row and the values are acceptible to the agent, the agent will change the status to active(1). If there are any necessary objects are not set, the agent will reject the creation request. When the state of the row translates to active(1), the agent add the corresponding port to the specified port group. Setting this object to destroy(6) will remove the corresponding port group and its mask from the port group table.')
a3ComFilterPortTable = MibTable((1, 3, 6, 1, 4, 1, 43, 29, 4, 20, 2, 4), )
if mibBuilder.loadTexts: a3ComFilterPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComFilterPortTable.setDescription('A list of port entries.')
a3ComFilterPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 29, 4, 20, 2, 4, 1), ).setIndexNames((0, "A3COM-SWITCHING-SYSTEMS-FILTER-MIB", "a3ComFilterPortId"), (0, "A3COM-SWITCHING-SYSTEMS-FILTER-MIB", "a3ComFilterPortType"), (0, "A3COM-SWITCHING-SYSTEMS-FILTER-MIB", "a3ComFilterPortPort"))
if mibBuilder.loadTexts: a3ComFilterPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComFilterPortEntry.setDescription('An individual port entry.')
a3ComFilterPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 20, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComFilterPortId.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComFilterPortId.setDescription('This object uniquely identify an address group in the systems. It successively increases starting from 1. This value is obtained through a3ComFilterPortGroupNextAvailableIndex when a new port group needs to be created.')
a3ComFilterPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 20, 2, 4, 1, 2), A3ComFilterPortType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComFilterPortType.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComFilterPortType.setDescription('This indicates interface port type(s) that are currently supported by LanPlex modules.')
a3ComFilterPortPort = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 20, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComFilterPortPort.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComFilterPortPort.setDescription('The port on the bridge identified by port type.')
a3ComFilterPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 20, 2, 4, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComFilterPortStatus.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComFilterPortStatus.setDescription('The status column for this port group entry. This OBJECT can be set to: createAndGo(4) destroy(6) The following values may be read: active(1) Setting this object to createAndGo(4) will result in the agent attempting to create and commit the row based on the contents of the objects in the row. If all the necessary information is presented in the row and the values are acceptible to the agent, the agent will change the status to active(1). If there are any necessary objects are not set, the agent will reject the creation request. When the state of the row translates to active(1), the agent will add the corresponding port to the indicated port group. Setting this object to destroy(6) will remove this port from corresponding port group.')
a3ComBridgeFilterNextAvailableIndex = MibScalar((1, 3, 6, 1, 4, 1, 43, 29, 4, 20, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComBridgeFilterNextAvailableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComBridgeFilterNextAvailableIndex.setDescription('The value of next available a3ComBridgeFilterId. This object indicates filter id when a new bridge filter is created through console or ftp download.')
a3ComBridgeFilterCount = MibScalar((1, 3, 6, 1, 4, 1, 43, 29, 4, 20, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComBridgeFilterCount.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComBridgeFilterCount.setDescription('The count of stored bridge packet filter programs on the bridge.')
a3ComBridgeFilterTable = MibTable((1, 3, 6, 1, 4, 1, 43, 29, 4, 20, 3, 3), )
if mibBuilder.loadTexts: a3ComBridgeFilterTable.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComBridgeFilterTable.setDescription('The list of stored bridge packet filter programs on bridge(s), bridge port(s) and port processing path.')
a3ComBridgeFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 29, 4, 20, 3, 3, 1), ).setIndexNames((0, "A3COM-SWITCHING-SYSTEMS-FILTER-MIB", "a3ComBridgeFilterId"), (0, "A3COM-SWITCHING-SYSTEMS-FILTER-MIB", "a3ComBridgeFilterBridgeNumber"))
if mibBuilder.loadTexts: a3ComBridgeFilterEntry.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComBridgeFilterEntry.setDescription('The set of parameters for an individual bridge packet filter program.')
a3ComBridgeFilterId = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 20, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComBridgeFilterId.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComBridgeFilterId.setDescription('An index that uniquely identifies a bridge filter in a system. Its value will change only if the system is rebooted.')
a3ComBridgeFilterBridgeNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 20, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComBridgeFilterBridgeNumber.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComBridgeFilterBridgeNumber.setDescription('The bridge index associated with this bridge filter program.')
a3ComBridgeFilterName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 20, 3, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComBridgeFilterName.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComBridgeFilterName.setDescription('The filter name associated with this entry.')
a3ComBridgeFilterProgram = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 20, 3, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(255, 255)).setFixedLength(255)).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComBridgeFilterProgram.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComBridgeFilterProgram.setDescription('The bridge filter program.')
a3ComBridgeFilterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 20, 3, 3, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComBridgeFilterStatus.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComBridgeFilterStatus.setDescription('The status column for this filter definition entry. This OBJECT can be set to: createAndGo(4) destroy(6) The following values may be read: active(1) Creation of bridge filter programs can be performed by: 1. Using the build-in editor of the AdminConsole. 2. Using your own line on an external host, and transferring the filter program via the AdminConsole. 3. Using the filter program creation tool on an external host, which builds the filter and transfers it to the LANPlex using SNMP. The transfer is accomplished using the file transfer MIB in the LANPlex system MIB. Setting this object to createAndGo(4) will result in the agent attempting to create and commit the row based on the contents of the objects in the row. If all the necessary information is presented in the row and the values are acceptible to the agent, the agent will change the status to active(1). If there are any necessary objects are not set, the agent will reject the creation request. When the state of the row translates to active(1), the agent will add the corresponding filter to the specified packet processing path(s) of the bridge port(s) in a bridge. Setting this object to destroy(6) will remove all corresponding attributes of the filter table.')
a3ComPortFilterTable = MibTable((1, 3, 6, 1, 4, 1, 43, 29, 4, 20, 3, 4), )
if mibBuilder.loadTexts: a3ComPortFilterTable.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComPortFilterTable.setDescription('The list of stored bridge packet filter programs on bridge(s), bridge port(s) and port processing path.')
a3ComPortFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 29, 4, 20, 3, 4, 1), ).setIndexNames((0, "A3COM-SWITCHING-SYSTEMS-FILTER-MIB", "a3ComPortFilterId"), (0, "A3COM-SWITCHING-SYSTEMS-FILTER-MIB", "a3ComPortFilterBridgeNumber"), (0, "A3COM-SWITCHING-SYSTEMS-FILTER-MIB", "a3ComPortFilterBridgePortType"), (0, "A3COM-SWITCHING-SYSTEMS-FILTER-MIB", "a3ComPortFilterBridgePortPort"))
if mibBuilder.loadTexts: a3ComPortFilterEntry.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComPortFilterEntry.setDescription('The set of parameters for an individual bridge packet filter program.')
a3ComPortFilterId = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 20, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComPortFilterId.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComPortFilterId.setDescription('An index that uniquely identifies a bridge filter on the bridge.')
a3ComPortFilterBridgeNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 20, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComPortFilterBridgeNumber.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComPortFilterBridgeNumber.setDescription('The bridge index associated with this bridge filter program. ')
a3ComPortFilterBridgePortType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 20, 3, 4, 1, 3), A3ComFilterPortType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComPortFilterBridgePortType.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComPortFilterBridgePortType.setDescription('This indicates interface port type(s) that are currently supported by LanPlex modules.')
a3ComPortFilterBridgePortPort = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 20, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComPortFilterBridgePortPort.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComPortFilterBridgePortPort.setDescription("The port on the bridge identified by this row's a3ComPortFilterBridgeNumber.")
a3ComPortFilterPktProcessPath = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 20, 3, 4, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComPortFilterPktProcessPath.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComPortFilterPktProcessPath.setDescription('The packet processing path to apply the filter. The value is a bit mask defined as follows: Mask Value Path Description 0x1 Xmit All All frames xmitted to segment connected to the port 0x2 Xmit Multicast Multicast+broadcast frames xmitted to the segment connected to the port 0x4 Recv All All frame received by the port from the segment connected to the port 0x8 Recv Multicast Multicast+broadcast frames received by the port from the segement connected to the port. If mask value is set to 0x10, the packet filter will be loaded to both transmit multicast and receive multicast paths. Once a bridge filter program has been downloaded to a bridge port path, this object can be applied to change its value.')
a3ComPortFilterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 20, 3, 4, 1, 6), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComPortFilterStatus.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComPortFilterStatus.setDescription('The status column for this filter definition entry. This OBJECT can be set to: active(1) createAndGo(4) createAndWait(5) destroy(6) The following values may be read: active(1) notInService(2) netReady(3). Creation of bridge filter programs can be performed by: 1. Using the build-in editor of the AdminConsole. 2. Using your own line on an external host, and transferring the filter program via the AdminConsole. 3. Using the filter program creation tool on an external host, which builds the filter and transfers it to the LANPlex using SNMP. The transfer is accomplished using the file transfer MIB in the LANPlex system MIB. Setting this object to active(1) is only valid when the current status is active or notInService(2). Setting this object to createAndGo(4) will result in the agent attempt to create and commit the row based on the contents of the objects in the row. If all the necessary information is presented in the row and the values are acceptible to the agent, the agent will change the status to active(1). If there are any necessary objects are not set, the agent will reject the creation request. Setting this object to createAndWait(5) will cause the agent to create a row in this table. This object will change to notInService(2) if all the information is present in the row and the values are acceptible to the agent; otherwise, the agent will set the status to notReady(3). When the state of the row translates to active(1), the agent will add the corresponding filter to the specified packet processing path(s) of the bridge port(s) in a bridge. Setting this object to destroy(6) will remove all corresponding attributes of the filter table.')
mibBuilder.exportSymbols("A3COM-SWITCHING-SYSTEMS-FILTER-MIB", a3ComBridgeFilterEntry=a3ComBridgeFilterEntry, a3ComFilterAddressGroupStatus=a3ComFilterAddressGroupStatus, a3ComBridgeFilterTable=a3ComBridgeFilterTable, a3ComPortFilterBridgePortType=a3ComPortFilterBridgePortType, a3ComFilterPortGroupBridgeNumber=a3ComFilterPortGroupBridgeNumber, a3ComPortFilterBridgeNumber=a3ComPortFilterBridgeNumber, A3ComFilterPortType=A3ComFilterPortType, a3ComFilterPortGroupId=a3ComFilterPortGroupId, a3ComFilterPortGroupMaskId=a3ComFilterPortGroupMaskId, a3ComFilterAddressGroup=a3ComFilterAddressGroup, a3ComFilterAddressGroupTable=a3ComFilterAddressGroupTable, switchingSystemsMibs=switchingSystemsMibs, a3Com=a3Com, a3ComFilterPortGroupNextAvailableIndex=a3ComFilterPortGroupNextAvailableIndex, a3ComFilterPortGroupTable=a3ComFilterPortGroupTable, a3ComFilterAddressGroupCount=a3ComFilterAddressGroupCount, a3ComFilterAddressTable=a3ComFilterAddressTable, a3ComBridgeFilterNextAvailableIndex=a3ComBridgeFilterNextAvailableIndex, a3ComBridgeFilterCount=a3ComBridgeFilterCount, a3ComPortFilterTable=a3ComPortFilterTable, a3ComFilterPortGroupName=a3ComFilterPortGroupName, a3ComFilterPortGroupStatus=a3ComFilterPortGroupStatus, a3ComPortFilterEntry=a3ComPortFilterEntry, a3ComFilterAddressGroupId=a3ComFilterAddressGroupId, a3ComFilterPortGroupCount=a3ComFilterPortGroupCount, a3ComFilterAddressGroupNextAvailableIndex=a3ComFilterAddressGroupNextAvailableIndex, a3ComFilterPortPort=a3ComFilterPortPort, a3ComBridgeFilterProgram=a3ComBridgeFilterProgram, a3ComPortFilterPktProcessPath=a3ComPortFilterPktProcessPath, a3ComFilterPortGroupEntry=a3ComFilterPortGroupEntry, a3ComFilterAddressAddress=a3ComFilterAddressAddress, a3ComFilterAddressStatus=a3ComFilterAddressStatus, a3ComFilterPortTable=a3ComFilterPortTable, a3ComBridgeFilterBridgeNumber=a3ComBridgeFilterBridgeNumber, a3ComBridgeFilterName=a3ComBridgeFilterName, a3ComPortFilterStatus=a3ComPortFilterStatus, a3ComBridgeFilterStatus=a3ComBridgeFilterStatus, a3ComFilterGroup=a3ComFilterGroup, a3ComFilterAddressEntry=a3ComFilterAddressEntry, a3ComPortFilterId=a3ComPortFilterId, a3ComBridgeFilterGroup=a3ComBridgeFilterGroup, a3ComFilterPortType=a3ComFilterPortType, a3ComBridgeFilterId=a3ComBridgeFilterId, a3ComFilterPortEntry=a3ComFilterPortEntry, a3ComFilterAddressGroupEntry=a3ComFilterAddressGroupEntry, a3ComFilterPortStatus=a3ComFilterPortStatus, RowStatus=RowStatus, a3ComFilterAddressGroupName=a3ComFilterAddressGroupName, a3ComFilterPortId=a3ComFilterPortId, a3ComFilterPortGroup=a3ComFilterPortGroup, a3ComFilterAddressGroupMaskId=a3ComFilterAddressGroupMaskId, a3ComPortFilterBridgePortPort=a3ComPortFilterBridgePortPort, a3ComFilterAddressId=a3ComFilterAddressId, a3ComSwitchingSystemsMib=a3ComSwitchingSystemsMib, a3ComFilterAddressGroupBridgeMask=a3ComFilterAddressGroupBridgeMask)
