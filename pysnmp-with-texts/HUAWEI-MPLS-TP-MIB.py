#
# PySNMP MIB module HUAWEI-MPLS-TP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HUAWEI-MPLS-TP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:47:08 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
hwDatacomm, = mibBuilder.importSymbols("HUAWEI-MIB", "hwDatacomm")
ifIndex, ifName = mibBuilder.importSymbols("IF-MIB", "ifIndex", "ifName")
MplsExtendedTunnelId, MplsTunnelInstanceIndex, MplsTunnelIndex = mibBuilder.importSymbols("MPLS-TC-STD-MIB", "MplsExtendedTunnelId", "MplsTunnelInstanceIndex", "MplsTunnelIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Counter64, TimeTicks, Counter32, Gauge32, NotificationType, IpAddress, Bits, Unsigned32, iso, Bits, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, MibIdentifier, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "TimeTicks", "Counter32", "Gauge32", "NotificationType", "IpAddress", "Bits", "Unsigned32", "iso", "Bits", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "MibIdentifier", "ObjectIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
hwMplsTpMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 5, 25, 305))
hwMplsTpMib.setRevisions(('2012-03-20 10:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hwMplsTpMib.setRevisionsDescriptions(('V1.00,Initial LSPM IETFTP MIB',))
if mibBuilder.loadTexts: hwMplsTpMib.setLastUpdated('201007131535Z')
if mibBuilder.loadTexts: hwMplsTpMib.setOrganization('Huawei Technologies Co.,Ltd.')
if mibBuilder.loadTexts: hwMplsTpMib.setContactInfo("Huawei Industrial Base Bantian, Longgang Shenzhen 518129 People's Republic of China Website: http://www.huawei.com Email: support@huawei.com ")
if mibBuilder.loadTexts: hwMplsTpMib.setDescription('This MIB is used for defining the HUAWEI private extended Transport Profile of Multiprotocol Label Switching (MPLS-TP) MIB object. All MIB objects are used to describe private managed objects and trap definitions for MPLS-TP.')
hwMplsTpObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 305, 1))
hwMplsTpTables = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 305, 1, 1))
hwMplsTpTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 305, 1, 1, 1), )
if mibBuilder.loadTexts: hwMplsTpTunnelTable.setStatus('current')
if mibBuilder.loadTexts: hwMplsTpTunnelTable.setDescription('A tp-tunnel needs to be uniquely identified across an MPLS-TP network. Indexes hwMplsTpTunnelIngressIndex, hwMplsTpTunnelIngressLSRId, hwMplsTpIngressGlobalId, hwMplsTpTunnelEgressIndex, hwMplsTpTunnelEgressLSRId and hwMplsTpEgressGlobalId uniquely identifies a tunnel across an MPLS-TP network. The indexes of this table are hwMplsTpTunnelIngressIndex, hwMplsTpTunnelIngressLSRId, hwMplsTpIngressGlobalId, hwMplsTpTunnelEgressIndex, hwMplsTpTunnelEgressLSRId and hwMplsTpEgressGlobalId.')
hwMplsTpTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 305, 1, 1, 1, 1), ).setIndexNames((0, "HUAWEI-MPLS-TP-MIB", "hwMplsTpTunnelIngressIndex"), (0, "HUAWEI-MPLS-TP-MIB", "hwMplsTpTunnelIngressLSRId"), (0, "HUAWEI-MPLS-TP-MIB", "hwMplsTpIngressGlobalId"), (0, "HUAWEI-MPLS-TP-MIB", "hwMplsTpTunnelEgressIndex"), (0, "HUAWEI-MPLS-TP-MIB", "hwMplsTpTunnelEgressLSRId"), (0, "HUAWEI-MPLS-TP-MIB", "hwMplsTpEgressGlobalId"))
if mibBuilder.loadTexts: hwMplsTpTunnelEntry.setReference('1. RFC 2863 - The Interfaces Group MIB, McCloghrie, K., and F. Kastenholtz, June 2000 ')
if mibBuilder.loadTexts: hwMplsTpTunnelEntry.setStatus('current')
if mibBuilder.loadTexts: hwMplsTpTunnelEntry.setDescription('A tp-tunnel needs to be uniquely identified across an MPLS-TP network. Indexes hwMplsTpTunnelIngressIndex, hwMplsTpTunnelIngressLSRId, hwMplsTpIngressGlobalId, hwMplsTpTunnelEgressIndex, hwMplsTpTunnelEgressLSRId and hwMplsTpEgressGlobalId uniquely identifies a tunnel across an MPLS-TP network. The indexes of this entry are hwMplsTpTunnelIngressIndex, hwMplsTpTunnelIngressLSRId, hwMplsTpIngressGlobalId, hwMplsTpTunnelEgressIndex, hwMplsTpTunnelEgressLSRId and hwMplsTpEgressGlobalId.')
hwMplsTpTunnelIngressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 305, 1, 1, 1, 1, 1), MplsTunnelIndex())
if mibBuilder.loadTexts: hwMplsTpTunnelIngressIndex.setStatus('current')
if mibBuilder.loadTexts: hwMplsTpTunnelIngressIndex.setDescription('Identity of the ingress LSR associated with this tunnel instance. This value SHOULD be equal to the Tunnel Sender Address in the Sender Template object and MAY be equal to the Extended Tunnel Id field in the SESSION object.')
hwMplsTpTunnelIngressLSRId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 305, 1, 1, 1, 1, 2), MplsExtendedTunnelId())
if mibBuilder.loadTexts: hwMplsTpTunnelIngressLSRId.setStatus('current')
if mibBuilder.loadTexts: hwMplsTpTunnelIngressLSRId.setDescription('Identity of the ingress LSR associated with this tp-tunnel instance. ')
hwMplsTpIngressGlobalId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 305, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: hwMplsTpIngressGlobalId.setStatus('current')
if mibBuilder.loadTexts: hwMplsTpIngressGlobalId.setDescription('The GlobalId is defined to uniquely identify an Ingress LSR operator.This Value idefines a globally unique Attachment Interface Identifier (AII). That AII is composed of three parts: a Global_ID that uniquely identifies an operator, a prefix, and, finally, an attachment circuit identifier.')
hwMplsTpTunnelEgressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 305, 1, 1, 1, 1, 4), MplsTunnelIndex())
if mibBuilder.loadTexts: hwMplsTpTunnelEgressIndex.setStatus('current')
if mibBuilder.loadTexts: hwMplsTpTunnelEgressIndex.setDescription('Identity of the egress LSR associated with this tunnel instance.')
hwMplsTpTunnelEgressLSRId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 305, 1, 1, 1, 1, 5), MplsExtendedTunnelId())
if mibBuilder.loadTexts: hwMplsTpTunnelEgressLSRId.setStatus('current')
if mibBuilder.loadTexts: hwMplsTpTunnelEgressLSRId.setDescription('Identity of the egress LSR associated with this tunnel instance.')
hwMplsTpEgressGlobalId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 305, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: hwMplsTpEgressGlobalId.setStatus('current')
if mibBuilder.loadTexts: hwMplsTpEgressGlobalId.setDescription('The GlobalId is defined to uniquely identify an Ingress LSR operator.This Value idefines a globally unique Attachment Interface Identifier (AII). That AII is composed of three parts: a Global_ID that uniquely identifies an operator, a prefix, and, finally, an attachment circuit identifier.')
hwMplsTpTunnelIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 305, 1, 1, 1, 1, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsTpTunnelIfName.setStatus('current')
if mibBuilder.loadTexts: hwMplsTpTunnelIfName.setDescription('Indicates the tp-tunnel interface name. The object is only valid at the ingress.')
hwMplsTpTunnelAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 305, 1, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsTpTunnelAdminStatus.setStatus('current')
if mibBuilder.loadTexts: hwMplsTpTunnelAdminStatus.setDescription('Indicates the management status of this tunnel.Reference to MPLS-TE-STD-MIB. Options: 1. up(1) -indicates the management status of this tunnel is up. 2. down(2) -indicates the management status of this tunnel is down. 3. testing(3) -indicates the tunnel is used in some test mode. ')
hwMplsTpTunnelOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 305, 1, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3), ("unknown", 4), ("dormant", 5), ("notPresent", 6), ("lowerLayerDown", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsTpTunnelOperStatus.setStatus('current')
if mibBuilder.loadTexts: hwMplsTpTunnelOperStatus.setDescription('Indicates the actual operational status of this tunnel, which is but not limited to the status of this tunnel of a certain period.Reference to MPLS-TE-STD-MIB. Options: 1. up(1) -indicates that the operational status of this tunnel is up. 2. down(2) -indicates that the operational status of this tunnel is down. 3. testing(3) -indicates that the tunnel is used in some test mode. 4. unknown(4) -indicates the invalid value. 5. dormant(5) -indicates that the status can not be determined. 6. notPresent(6) -indicates that some component is missing 7. lowerLayerDown(7) -indicates the Down state due to the state of lower layer interfaces. ')
hwMplsTpLspTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 305, 1, 1, 2), )
if mibBuilder.loadTexts: hwMplsTpLspTable.setStatus('current')
if mibBuilder.loadTexts: hwMplsTpLspTable.setDescription('A table of all TP lsps seen by a given sys-tem.')
hwMplsTpLspEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 305, 1, 1, 2, 1), ).setIndexNames((0, "HUAWEI-MPLS-TP-MIB", "hwMplsTpTunnelIngressIndex"), (0, "HUAWEI-MPLS-TP-MIB", "hwMplsTpTunnelIngressInstance"), (0, "HUAWEI-MPLS-TP-MIB", "hwMplsTpTunnelIngressLSRId"), (0, "HUAWEI-MPLS-TP-MIB", "hwMplsTpIngressGlobalId"), (0, "HUAWEI-MPLS-TP-MIB", "hwMplsTpTunnelEgressIndex"), (0, "HUAWEI-MPLS-TP-MIB", "hwMplsTpTunnelEgressInstance"), (0, "HUAWEI-MPLS-TP-MIB", "hwMplsTpTunnelEgressLSRId"), (0, "HUAWEI-MPLS-TP-MIB", "hwMplsTpEgressGlobalId"))
if mibBuilder.loadTexts: hwMplsTpLspEntry.setReference('1. RFC 2863 - The Interfaces Group MIB, McCloghrie, K., and F. Kastenholtz, June 2000 ')
if mibBuilder.loadTexts: hwMplsTpLspEntry.setStatus('current')
if mibBuilder.loadTexts: hwMplsTpLspEntry.setDescription("An entry in this table represents information on a single TP LSP which is represented by a session's index triple (hwMplsTpTunnelIngressInstance, hwMplsTpTunnelEgressInstance, hwMplsTpLspType).")
hwMplsTpTunnelIngressInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 305, 1, 1, 2, 1, 1), MplsTunnelInstanceIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwMplsTpTunnelIngressInstance.setStatus('current')
if mibBuilder.loadTexts: hwMplsTpTunnelIngressInstance.setDescription('Uniquely identifies a particular instance of a tunnel between a pair of ingress and egress LSRs.')
hwMplsTpTunnelEgressInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 305, 1, 1, 2, 1, 2), MplsTunnelInstanceIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwMplsTpTunnelEgressInstance.setStatus('current')
if mibBuilder.loadTexts: hwMplsTpTunnelEgressInstance.setDescription('Uniquely identifies a particular instance of a tunnel between a pair of egress and ingress LSRs.')
hwMplsTpLspType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 305, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("protection", 1), ("working", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwMplsTpLspType.setStatus('current')
if mibBuilder.loadTexts: hwMplsTpLspType.setDescription('The type of LSP connection. Options: 1. protection(1) -indicates that the lsp type of this tunnel is protection lsp. 2. working(2) -indicates that the lsp type of this tunnel is working lsp. ')
hwMplsTpGlobalObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 305, 1, 2))
hwMplsTpNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 305, 2))
hwMplsTpTrapObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 305, 2, 1))
hwMplsTpTunnelTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 305, 2, 2))
hwMplsTpTunnelDownClear = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 305, 2, 2, 1)).setObjects(("HUAWEI-MPLS-TP-MIB", "hwMplsTpTunnelIfName"), ("HUAWEI-MPLS-TP-MIB", "hwMplsTpTunnelAdminStatus"), ("HUAWEI-MPLS-TP-MIB", "hwMplsTpTunnelOperStatus"), ("IF-MIB", "ifName"))
if mibBuilder.loadTexts: hwMplsTpTunnelDownClear.setStatus('current')
if mibBuilder.loadTexts: hwMplsTpTunnelDownClear.setDescription('This notification is generated when a mplsTpTunnelOperStatus object for one of the configured tunnels is about to leave the down state and transition into some other state (but not into the notPresent state). This other state is indicated by the included value of mplsTpTunnelOperStatus.')
hwMplsTpTunnelDown = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 305, 2, 2, 2)).setObjects(("HUAWEI-MPLS-TP-MIB", "hwMplsTpTunnelIfName"), ("HUAWEI-MPLS-TP-MIB", "hwMplsTpTunnelAdminStatus"), ("HUAWEI-MPLS-TP-MIB", "hwMplsTpTunnelOperStatus"), ("IF-MIB", "ifName"))
if mibBuilder.loadTexts: hwMplsTpTunnelDown.setStatus('current')
if mibBuilder.loadTexts: hwMplsTpTunnelDown.setDescription('This notification is generated when a mplsTpTunnelOperStatus object for one of the configured tunnels is about to enter the down state from some other state (but not from the notPresent state). This other state is indicated by the included value of mplsTpTunnelOperStatus.')
hwMplsTpTunnelResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 305, 2, 2, 3)).setObjects(("HUAWEI-MPLS-TP-MIB", "hwMplsTpTunnelIfName"))
if mibBuilder.loadTexts: hwMplsTpTunnelResume.setStatus('current')
if mibBuilder.loadTexts: hwMplsTpTunnelResume.setDescription('This object is used to indicate that data switching from protection Lsp to Working Lsp.')
hwMplsTpTunnelSwitch = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 305, 2, 2, 4)).setObjects(("HUAWEI-MPLS-TP-MIB", "hwMplsTpTunnelIfName"))
if mibBuilder.loadTexts: hwMplsTpTunnelSwitch.setStatus('current')
if mibBuilder.loadTexts: hwMplsTpTunnelSwitch.setDescription('This object is used to indicate that data switching from protection Lsp to Working Lsp.')
hwMplsTpLspTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 305, 2, 3))
hwMplsTpLspOamDlocClear = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 305, 2, 3, 1)).setObjects(("HUAWEI-MPLS-TP-MIB", "hwMplsTpTunnelIfName"), ("HUAWEI-MPLS-TP-MIB", "hwMplsTpLspType"), ("IF-MIB", "ifName"))
if mibBuilder.loadTexts: hwMplsTpLspOamDlocClear.setStatus('current')
if mibBuilder.loadTexts: hwMplsTpLspOamDlocClear.setDescription(' This object indicates that the link recovers from a connectivity fault.')
hwMplsTpLspOamDloc = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 305, 2, 3, 2)).setObjects(("HUAWEI-MPLS-TP-MIB", "hwMplsTpTunnelIfName"), ("HUAWEI-MPLS-TP-MIB", "hwMplsTpLspType"), ("IF-MIB", "ifName"))
if mibBuilder.loadTexts: hwMplsTpLspOamDloc.setStatus('current')
if mibBuilder.loadTexts: hwMplsTpLspOamDloc.setDescription(' This object is used to indicates the connectivity fault of the link.')
hwMplsTpLspOamRdiClear = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 305, 2, 3, 3)).setObjects(("HUAWEI-MPLS-TP-MIB", "hwMplsTpTunnelIfName"), ("HUAWEI-MPLS-TP-MIB", "hwMplsTpLspType"), ("IF-MIB", "ifName"))
if mibBuilder.loadTexts: hwMplsTpLspOamRdiClear.setStatus('current')
if mibBuilder.loadTexts: hwMplsTpLspOamRdiClear.setDescription(' This object indicates that the link recovers from a remote defect.')
hwMplsTpLspOamRdi = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 305, 2, 3, 4)).setObjects(("HUAWEI-MPLS-TP-MIB", "hwMplsTpTunnelIfName"), ("HUAWEI-MPLS-TP-MIB", "hwMplsTpLspType"), ("IF-MIB", "ifName"))
if mibBuilder.loadTexts: hwMplsTpLspOamRdi.setStatus('current')
if mibBuilder.loadTexts: hwMplsTpLspOamRdi.setDescription(' This object is used to indicates the remote defect of the link.')
hwMplsTpLspOamMisconnectionEncapClear = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 305, 2, 3, 5)).setObjects(("HUAWEI-MPLS-TP-MIB", "hwMplsTpTunnelIfName"), ("HUAWEI-MPLS-TP-MIB", "hwMplsTpLspType"))
if mibBuilder.loadTexts: hwMplsTpLspOamMisconnectionEncapClear.setStatus('current')
if mibBuilder.loadTexts: hwMplsTpLspOamMisconnectionEncapClear.setDescription('This object indicates that the link recovers from an misconnection encap defect.')
hwMplsTpLspOamMisconnectionEncap = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 305, 2, 3, 6)).setObjects(("HUAWEI-MPLS-TP-MIB", "hwMplsTpTunnelIfName"), ("HUAWEI-MPLS-TP-MIB", "hwMplsTpLspType"))
if mibBuilder.loadTexts: hwMplsTpLspOamMisconnectionEncap.setStatus('current')
if mibBuilder.loadTexts: hwMplsTpLspOamMisconnectionEncap.setDescription('This object indicates that the link receivs from an misconnection encap defect.')
hwMplsTpLspOamMisconnectionDiscrClear = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 305, 2, 3, 7)).setObjects(("HUAWEI-MPLS-TP-MIB", "hwMplsTpTunnelIfName"), ("HUAWEI-MPLS-TP-MIB", "hwMplsTpLspType"))
if mibBuilder.loadTexts: hwMplsTpLspOamMisconnectionDiscrClear.setStatus('current')
if mibBuilder.loadTexts: hwMplsTpLspOamMisconnectionDiscrClear.setDescription('This object indicates that the link recovers from an misconnection discription defect.')
hwMplsTpLspOamMisconnectionDiscr = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 305, 2, 3, 8)).setObjects(("HUAWEI-MPLS-TP-MIB", "hwMplsTpTunnelIfName"), ("HUAWEI-MPLS-TP-MIB", "hwMplsTpLspType"))
if mibBuilder.loadTexts: hwMplsTpLspOamMisconnectionDiscr.setStatus('current')
if mibBuilder.loadTexts: hwMplsTpLspOamMisconnectionDiscr.setDescription('This object indicates that the link receivs from an misconnection discription defect.')
hwMplsTpLspOamMisconnectionMEPClear = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 305, 2, 3, 9)).setObjects(("HUAWEI-MPLS-TP-MIB", "hwMplsTpTunnelIfName"), ("HUAWEI-MPLS-TP-MIB", "hwMplsTpLspType"))
if mibBuilder.loadTexts: hwMplsTpLspOamMisconnectionMEPClear.setStatus('current')
if mibBuilder.loadTexts: hwMplsTpLspOamMisconnectionMEPClear.setDescription('This object indicates that the link recovers from an unexpect MEG-ID defect.')
hwMplsTpLspOamMisconnectionMEP = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 305, 2, 3, 10)).setObjects(("HUAWEI-MPLS-TP-MIB", "hwMplsTpTunnelIfName"), ("HUAWEI-MPLS-TP-MIB", "hwMplsTpLspType"))
if mibBuilder.loadTexts: hwMplsTpLspOamMisconnectionMEP.setStatus('current')
if mibBuilder.loadTexts: hwMplsTpLspOamMisconnectionMEP.setDescription('This object indicates the link receivs an unexpect MEG-ID defect.')
hwMplsTpLspOamMisconnectionSECClear = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 305, 2, 3, 11)).setObjects(("HUAWEI-MPLS-TP-MIB", "hwMplsTpTunnelIfName"), ("HUAWEI-MPLS-TP-MIB", "hwMplsTpLspType"))
if mibBuilder.loadTexts: hwMplsTpLspOamMisconnectionSECClear.setStatus('current')
if mibBuilder.loadTexts: hwMplsTpLspOamMisconnectionSECClear.setDescription('This object indicates that the link recovers from an Misconnection SEC defect .')
hwMplsTpLspOamMisconnectionSEC = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 305, 2, 3, 12)).setObjects(("HUAWEI-MPLS-TP-MIB", "hwMplsTpTunnelIfName"), ("HUAWEI-MPLS-TP-MIB", "hwMplsTpLspType"))
if mibBuilder.loadTexts: hwMplsTpLspOamMisconnectionSEC.setStatus('current')
if mibBuilder.loadTexts: hwMplsTpLspOamMisconnectionSEC.setDescription('This object indicates that the link receivs from an Misconnection SEC defect.')
hwMplsTpConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 305, 3))
hwMplsTpCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 305, 3, 1))
hwMplsTpGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 305, 3, 2))
hwMplsTPGeneralGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 305, 3, 2, 1)).setObjects(("HUAWEI-MPLS-TP-MIB", "hwMplsTpTunnelIfName"), ("HUAWEI-MPLS-TP-MIB", "hwMplsTpTunnelAdminStatus"), ("HUAWEI-MPLS-TP-MIB", "hwMplsTpTunnelOperStatus"), ("HUAWEI-MPLS-TP-MIB", "hwMplsTpTunnelIngressInstance"), ("HUAWEI-MPLS-TP-MIB", "hwMplsTpTunnelEgressInstance"), ("HUAWEI-MPLS-TP-MIB", "hwMplsTpLspType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMplsTPGeneralGroup = hwMplsTPGeneralGroup.setStatus('current')
if mibBuilder.loadTexts: hwMplsTPGeneralGroup.setDescription('Indicate the atrributes of the TP tunnel.')
hwMplsTPNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 305, 3, 2, 2)).setObjects(("HUAWEI-MPLS-TP-MIB", "hwMplsTpTunnelDownClear"), ("HUAWEI-MPLS-TP-MIB", "hwMplsTpTunnelDown"), ("HUAWEI-MPLS-TP-MIB", "hwMplsTpTunnelResume"), ("HUAWEI-MPLS-TP-MIB", "hwMplsTpTunnelSwitch"), ("HUAWEI-MPLS-TP-MIB", "hwMplsTpLspOamDlocClear"), ("HUAWEI-MPLS-TP-MIB", "hwMplsTpLspOamDloc"), ("HUAWEI-MPLS-TP-MIB", "hwMplsTpLspOamRdiClear"), ("HUAWEI-MPLS-TP-MIB", "hwMplsTpLspOamRdi"), ("HUAWEI-MPLS-TP-MIB", "hwMplsTpLspOamMisconnectionEncapClear"), ("HUAWEI-MPLS-TP-MIB", "hwMplsTpLspOamMisconnectionEncap"), ("HUAWEI-MPLS-TP-MIB", "hwMplsTpLspOamMisconnectionDiscrClear"), ("HUAWEI-MPLS-TP-MIB", "hwMplsTpLspOamMisconnectionDiscr"), ("HUAWEI-MPLS-TP-MIB", "hwMplsTpLspOamMisconnectionMEPClear"), ("HUAWEI-MPLS-TP-MIB", "hwMplsTpLspOamMisconnectionMEP"), ("HUAWEI-MPLS-TP-MIB", "hwMplsTpLspOamMisconnectionSECClear"), ("HUAWEI-MPLS-TP-MIB", "hwMplsTpLspOamMisconnectionSEC"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMplsTPNotificationGroup = hwMplsTPNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: hwMplsTPNotificationGroup.setDescription('Indicate the notification type.')
hwMplsTpCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2011, 5, 25, 305, 3, 1, 1)).setObjects(("HUAWEI-MPLS-TP-MIB", "hwMplsTPGeneralGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMplsTpCompliance = hwMplsTpCompliance.setStatus('current')
if mibBuilder.loadTexts: hwMplsTpCompliance.setDescription('Description.')
mibBuilder.exportSymbols("HUAWEI-MPLS-TP-MIB", hwMplsTPGeneralGroup=hwMplsTPGeneralGroup, hwMplsTpLspType=hwMplsTpLspType, hwMplsTpTunnelDownClear=hwMplsTpTunnelDownClear, hwMplsTpTunnelOperStatus=hwMplsTpTunnelOperStatus, hwMplsTpTunnelDown=hwMplsTpTunnelDown, hwMplsTpTunnelEgressLSRId=hwMplsTpTunnelEgressLSRId, hwMplsTpLspEntry=hwMplsTpLspEntry, hwMplsTpTunnelEgressInstance=hwMplsTpTunnelEgressInstance, hwMplsTpTunnelTable=hwMplsTpTunnelTable, hwMplsTpTunnelIngressInstance=hwMplsTpTunnelIngressInstance, PYSNMP_MODULE_ID=hwMplsTpMib, hwMplsTpEgressGlobalId=hwMplsTpEgressGlobalId, hwMplsTpTunnelIngressLSRId=hwMplsTpTunnelIngressLSRId, hwMplsTpLspOamMisconnectionEncapClear=hwMplsTpLspOamMisconnectionEncapClear, hwMplsTpLspOamMisconnectionSEC=hwMplsTpLspOamMisconnectionSEC, hwMplsTpTunnelResume=hwMplsTpTunnelResume, hwMplsTpLspTable=hwMplsTpLspTable, hwMplsTpLspOamMisconnectionMEPClear=hwMplsTpLspOamMisconnectionMEPClear, hwMplsTpCompliance=hwMplsTpCompliance, hwMplsTpTunnelIngressIndex=hwMplsTpTunnelIngressIndex, hwMplsTpTunnelEntry=hwMplsTpTunnelEntry, hwMplsTpObjects=hwMplsTpObjects, hwMplsTpTunnelIfName=hwMplsTpTunnelIfName, hwMplsTpLspOamDloc=hwMplsTpLspOamDloc, hwMplsTpTunnelAdminStatus=hwMplsTpTunnelAdminStatus, hwMplsTpLspOamRdi=hwMplsTpLspOamRdi, hwMplsTpLspOamDlocClear=hwMplsTpLspOamDlocClear, hwMplsTpLspOamRdiClear=hwMplsTpLspOamRdiClear, hwMplsTpLspOamMisconnectionDiscr=hwMplsTpLspOamMisconnectionDiscr, hwMplsTpLspTrap=hwMplsTpLspTrap, hwMplsTpConformance=hwMplsTpConformance, hwMplsTpCompliances=hwMplsTpCompliances, hwMplsTpTunnelSwitch=hwMplsTpTunnelSwitch, hwMplsTpLspOamMisconnectionDiscrClear=hwMplsTpLspOamMisconnectionDiscrClear, hwMplsTpGroups=hwMplsTpGroups, hwMplsTpIngressGlobalId=hwMplsTpIngressGlobalId, hwMplsTpLspOamMisconnectionMEP=hwMplsTpLspOamMisconnectionMEP, hwMplsTpTunnelEgressIndex=hwMplsTpTunnelEgressIndex, hwMplsTpLspOamMisconnectionSECClear=hwMplsTpLspOamMisconnectionSECClear, hwMplsTPNotificationGroup=hwMplsTPNotificationGroup, hwMplsTpNotifications=hwMplsTpNotifications, hwMplsTpMib=hwMplsTpMib, hwMplsTpTables=hwMplsTpTables, hwMplsTpGlobalObjects=hwMplsTpGlobalObjects, hwMplsTpLspOamMisconnectionEncap=hwMplsTpLspOamMisconnectionEncap, hwMplsTpTrapObjects=hwMplsTpTrapObjects, hwMplsTpTunnelTrap=hwMplsTpTunnelTrap)
