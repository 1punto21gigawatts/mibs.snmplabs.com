#
# PySNMP MIB module CADANT-AAA-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CADANT-AAA-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:44:31 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
cadAuthentication, = mibBuilder.importSymbols("CADANT-PRODUCTS-MIB", "cadAuthentication")
SshKeyExchangeMethod, InetAddressIPv4or6, SshCipher, AccountingType, SshCipherType, SshKeyType, SshService, SshAuthMethod, LineType, SshProtocol, SshMacAlg, AAAmethod = mibBuilder.importSymbols("CADANT-TC", "SshKeyExchangeMethod", "InetAddressIPv4or6", "SshCipher", "AccountingType", "SshCipherType", "SshKeyType", "SshService", "SshAuthMethod", "LineType", "SshProtocol", "SshMacAlg", "AAAmethod")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Gauge32, iso, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Unsigned32, IpAddress, Counter32, ModuleIdentity, ObjectIdentity, MibIdentifier, NotificationType, Integer32, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "iso", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Unsigned32", "IpAddress", "Counter32", "ModuleIdentity", "ObjectIdentity", "MibIdentifier", "NotificationType", "Integer32", "Bits")
TextualConvention, TruthValue, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "RowStatus", "DisplayString")
cadAAA = ModuleIdentity((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1))
cadAAA.setRevisions(('2015-09-30 00:00', '2015-08-20 00:00', '2015-07-16 00:00', '2013-10-22 00:00', '2009-10-09 00:00', '2005-09-23 00:00', '2005-06-09 00:00', '2004-11-30 00:00', '2004-08-27 00:00', '2004-08-19 00:00', '2004-07-20 00:00', '2004-02-24 00:00', '2004-02-18 00:00', '2003-08-22 00:00', '2003-08-20 00:00', '2003-08-15 00:00', '2003-08-01 00:00', '2003-07-16 00:00', '2003-06-13 00:00', '2003-05-15 00:00', '2003-05-08 00:00', '2003-05-07 00:00', '2003-04-01 00:00', '2003-03-14 00:00', '2002-10-16 00:00', '2002-08-30 00:00', '2002-08-21 00:00', '2002-07-25 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: cadAAA.setRevisionsDescriptions(('Import SshKeyExchangeMethod and SshKeyType.', 'Fix legal range for cadSshPort and cadSshMax Clients. Change cadSshServerKeyType and cadSshKeyExhange from read-write to read-only.', 'Expand PemKey to 2800 max octets. Add cadSshServerKeyType and cadSshKeyExhange. Remove unused cadSshTelnetEnabled and cadSshFtpEnabled.', 'Add RADIUS support.', 'Remove RADIUS support.', 'Updated cadSshSessionEntry', 'Modify the range value for cadAuthGroup and cadAuthorizationGroup.', 'Added cadSshPasswordAuthRequired, cadSshPublicKeyAuthRequired, cadSshPublicKeyAuthFirst, and cadSshMaxAuthFailures.', 'Added back the cmd node for backward compatability.', 'Moved cadCLIcommandPrivilegeLevelTable from cadAAA.12 to cadAAA.14, since index has changed from type CmdNode to DisplayString.', 'Added cadSshPortForwardingEnabled.', 'Changed type for cadGroupPort from INTEGER to Integer32.', 'Added server port to the server group table.', 'Added command privilege level to the line table.', 'Added accounting type to the line table.', 'Added accounting method list table.', 'Add attribute to store original privilege level.', 'Allow zero length TACACS+ key.', 'Increased the length of user ids and passwords to 64.', 'Added table of CLI commands to privilege level mapping.', 'Added RowStatus to table of enable passwords.', 'Enable passwords are now stored in a table indexed by privilege level.', 'Add Authorization MIB.', 'Add TACACS+ MIB.', 'Add ciphers to SSH configuration.', "Reduced size of 'name' type objects to 16.", 'Change radius key length.', 'Add support for SSH sessions and status tables.',))
if mibBuilder.loadTexts: cadAAA.setLastUpdated('201509300000Z')
if mibBuilder.loadTexts: cadAAA.setOrganization('Arris International Inc.')
if mibBuilder.loadTexts: cadAAA.setContactInfo(' Customer Support Postal: Arris International Inc. 4343 Commerce Court Lisle, IL 60532 Phone: +1 630 281 3000 Email: support@cadant.com')
if mibBuilder.loadTexts: cadAAA.setDescription('The MIB module describes the proprietary AAA configuration parameters used to support authentication and authorization in the C4.')
class PemKey(TextualConvention, OctetString):
    description = ' An rsa/dsa digital key in PEM format.'
    status = 'current'
    displayHint = '2800a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 2800)

class CmdNode(TextualConvention, OctetString):
    description = ' Address of the command node associated with the CLI command'
    status = 'current'
    displayHint = '1x:'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(4, 4)
    fixedLength = 4

cadLineTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 2), )
if mibBuilder.loadTexts: cadLineTable.setStatus('current')
if mibBuilder.loadTexts: cadLineTable.setDescription('This table reflects the AAA configuration for each line (vty or console) in the system.')
cadLineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 2, 1), ).setIndexNames((0, "CADANT-AAA-MIB", "cadLineIndex"))
if mibBuilder.loadTexts: cadLineEntry.setStatus('current')
if mibBuilder.loadTexts: cadLineEntry.setDescription('')
cadLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 19)))
if mibBuilder.loadTexts: cadLineIndex.setStatus('current')
if mibBuilder.loadTexts: cadLineIndex.setDescription('The line index corresponding to a console or vty line. These are preallocated by the system at startup.')
cadLineType = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 2, 1, 2), LineType().clone('vty')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadLineType.setStatus('current')
if mibBuilder.loadTexts: cadLineType.setDescription('The type (vty or console) of the access line.')
cadLineEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 2, 1, 3), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadLineEnabled.setStatus('current')
if mibBuilder.loadTexts: cadLineEnabled.setDescription('The status of the line. When enabled, the line is available for access to the C4.')
cadLineSessionTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadLineSessionTimeout.setStatus('current')
if mibBuilder.loadTexts: cadLineSessionTimeout.setDescription('Session length in seconds. The C4 automatically terminates the the session when this interval expires. A value of zero indicates no timeout.')
cadLineIdleTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadLineIdleTimeout.setStatus('current')
if mibBuilder.loadTexts: cadLineIdleTimeout.setDescription('Maximum idle time in seconds. The C4 automatically terminates the session if no I/O activity occurs within this interval. A value of zero indicates no timeout.')
cadLinePagination = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadLinePagination.setStatus('current')
if mibBuilder.loadTexts: cadLinePagination.setDescription('Number of lines of consecutive output to display before pausing and prompting the user. A value of zero indicates no pagination.')
cadLineBaud = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 2, 1, 7), Integer32().clone(9600)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadLineBaud.setStatus('current')
if mibBuilder.loadTexts: cadLineBaud.setDescription('Baud rate in bits per second. This is applicable to console lines only and is saved in the eeprom.')
cadLinePassword = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 2, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadLinePassword.setStatus('current')
if mibBuilder.loadTexts: cadLinePassword.setDescription('The (encrypted) password associated with this line if line-based authentication is active. This is the line password.')
cadLineLoginAuthMethodList = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 2, 1, 9), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 16)).clone(hexValue="")).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadLineLoginAuthMethodList.setStatus('current')
if mibBuilder.loadTexts: cadLineLoginAuthMethodList.setDescription('The authentication methods used in allowing login access on this line. This is a partial index into the cadAuthMethodTable. An empty string indicates no authentication is possible and effectively disables the line.')
cadLineEnableAuthMethodList = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 2, 1, 10), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 16)).clone(hexValue="")).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadLineEnableAuthMethodList.setStatus('current')
if mibBuilder.loadTexts: cadLineEnableAuthMethodList.setDescription('The authentication methods used in allowing enable access on this line. This is a partial index into the cadAuthMethodTable. An empty string indicates no authentication is possible and effectively disables the line.')
cadLineAuthorMethodList = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 2, 1, 11), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 16)).clone(hexValue="")).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadLineAuthorMethodList.setStatus('current')
if mibBuilder.loadTexts: cadLineAuthorMethodList.setDescription('The authorization methods used in allowing different privledge levels on this line. This is a partial index into the cadAuthorMethodTable. An empty string indicates no authorization is possible, in that case, authorization is equivalent to authentication.')
cadLineShellAccountingMethodList = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 2, 1, 12), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 16)).clone(hexValue="")).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadLineShellAccountingMethodList.setStatus('current')
if mibBuilder.loadTexts: cadLineShellAccountingMethodList.setDescription('The method list used for shell accounting. An empty string indicates no command accounting is possible.')
cadLineCommandAccountingMethodList = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 2, 1, 13), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 16)).clone(hexValue="")).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadLineCommandAccountingMethodList.setStatus('current')
if mibBuilder.loadTexts: cadLineCommandAccountingMethodList.setDescription('The method list used for command accounting. Accounting will be done only for commands whose privilege level is greater than or equal to cadLineCommandAccountingPrivilegeLevel. An empty string indicates no command accounting is possible.')
cadLineShellAccountingType = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 2, 1, 14), AccountingType().clone('start-stop')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadLineShellAccountingType.setStatus('current')
if mibBuilder.loadTexts: cadLineShellAccountingType.setDescription('Accounting type for shell accounting. The accounting type is used to decide whether accounting records are sent at the initiation and termination of a session or only at the termination of a session.')
cadLineCommandAccountingType = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 2, 1, 15), AccountingType().clone('stop-only')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadLineCommandAccountingType.setStatus('current')
if mibBuilder.loadTexts: cadLineCommandAccountingType.setDescription('Accounting type for command accounting. The accounting type is used to decide whether accounting records are sent at the initiation and termination of a command or only at the termination of a command.')
cadLineCommandAccountingPrivilegeLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadLineCommandAccountingPrivilegeLevel.setStatus('current')
if mibBuilder.loadTexts: cadLineCommandAccountingPrivilegeLevel.setDescription('When command accounting is enabled, accounting records will be sent only for commands whose privilege level is greater than or equal to cadLineCommandAccountingPrivilegeLevel.')
cadAuthorizationMethodTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 3), )
if mibBuilder.loadTexts: cadAuthorizationMethodTable.setStatus('current')
if mibBuilder.loadTexts: cadAuthorizationMethodTable.setDescription('A list of methods which are used in determining the type and sequence of authorization.')
cadAuthorizationMethodEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 3, 1), ).setIndexNames((0, "CADANT-AAA-MIB", "cadAuthorizationListName"), (0, "CADANT-AAA-MIB", "cadAuthorizationListIndex"))
if mibBuilder.loadTexts: cadAuthorizationMethodEntry.setStatus('current')
if mibBuilder.loadTexts: cadAuthorizationMethodEntry.setDescription('Each row describes a single AAA method. Order is used in determining the sequence in which the methods are applied.')
cadAuthorizationListName = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 3, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 16)))
if mibBuilder.loadTexts: cadAuthorizationListName.setStatus('current')
if mibBuilder.loadTexts: cadAuthorizationListName.setDescription('The name of the authorization method list. Each list can have a number of different authorization methods that are tried in order to authorize the command.')
cadAuthorizationListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 32), )))
if mibBuilder.loadTexts: cadAuthorizationListIndex.setStatus('current')
if mibBuilder.loadTexts: cadAuthorizationListIndex.setDescription('The order in the authorization sequence when this method is used. A value of zero allows the snmp agent to choose the next hightest available index that preserves the list order.')
cadAuthorizationType = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 3, 1, 3), AAAmethod()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadAuthorizationType.setStatus('current')
if mibBuilder.loadTexts: cadAuthorizationType.setDescription('')
cadAuthorizationGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 3, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadAuthorizationGroup.setStatus('current')
if mibBuilder.loadTexts: cadAuthorizationGroup.setDescription("The name of the group used in TACACS+ method. The default names of 'tac_default' represent the entire set of defined TACACS+ servers.")
cadAuthorizationRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 3, 1, 5), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadAuthorizationRowStatus.setStatus('current')
if mibBuilder.loadTexts: cadAuthorizationRowStatus.setDescription('')
cadAuthMethodTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 4), )
if mibBuilder.loadTexts: cadAuthMethodTable.setStatus('current')
if mibBuilder.loadTexts: cadAuthMethodTable.setDescription('A list of methods which are used in determining the type and sequence of authentication.')
cadAuthMethodEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 4, 1), ).setIndexNames((0, "CADANT-AAA-MIB", "cadAuthListName"), (0, "CADANT-AAA-MIB", "cadAuthListIndex"))
if mibBuilder.loadTexts: cadAuthMethodEntry.setStatus('current')
if mibBuilder.loadTexts: cadAuthMethodEntry.setDescription('Each row describes a single AAA method. Order is used in determining the sequence in which the methods are applied.')
cadAuthListName = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 4, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 16)))
if mibBuilder.loadTexts: cadAuthListName.setStatus('current')
if mibBuilder.loadTexts: cadAuthListName.setDescription('The name of the authentication method list. Each list can have a number of different authentication methods that are tried in order to authenticate the user.')
cadAuthListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 32), )))
if mibBuilder.loadTexts: cadAuthListIndex.setStatus('current')
if mibBuilder.loadTexts: cadAuthListIndex.setDescription('The order in the authentication sequence when this method is used. A value of zero allows the snmp agent to choose the next hightest available index that preserves the list order.')
cadAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 4, 1, 3), AAAmethod()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadAuthType.setStatus('current')
if mibBuilder.loadTexts: cadAuthType.setDescription('')
cadAuthGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 4, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadAuthGroup.setStatus('current')
if mibBuilder.loadTexts: cadAuthGroup.setDescription("The name of the group used in RADIUS/TACACS+ methods. The default names of 'default' and 'tac_default' represent the entire set of defined RADIUS and TACACS+ servers respectively.")
cadAuthRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 4, 1, 5), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadAuthRowStatus.setStatus('current')
if mibBuilder.loadTexts: cadAuthRowStatus.setDescription('')
cadAccountingMethodTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 5), )
if mibBuilder.loadTexts: cadAccountingMethodTable.setStatus('current')
if mibBuilder.loadTexts: cadAccountingMethodTable.setDescription('A list of methods which are used in determining the type and sequence of accounting.')
cadAccountingMethodEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 5, 1), ).setIndexNames((0, "CADANT-AAA-MIB", "cadAccountingListName"), (0, "CADANT-AAA-MIB", "cadAccountingListIndex"))
if mibBuilder.loadTexts: cadAccountingMethodEntry.setStatus('current')
if mibBuilder.loadTexts: cadAccountingMethodEntry.setDescription('Each row describes a single AAA method. Order is used in determining the sequence in which the methods are applied.')
cadAccountingListName = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 5, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 16)))
if mibBuilder.loadTexts: cadAccountingListName.setStatus('current')
if mibBuilder.loadTexts: cadAccountingListName.setDescription('The name of the accounting method list. Each list can have a number of different accounting methods that are tried in order to authorize the command.')
cadAccountingListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 32), )))
if mibBuilder.loadTexts: cadAccountingListIndex.setStatus('current')
if mibBuilder.loadTexts: cadAccountingListIndex.setDescription('The order in the accounting sequence when this method is used. A value of zero allows the snmp agent to choose the next hightest available index that preserves the list order.')
cadAccountingType = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 5, 1, 3), AAAmethod()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadAccountingType.setStatus('current')
if mibBuilder.loadTexts: cadAccountingType.setDescription('')
cadAccountingGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 5, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadAccountingGroup.setStatus('current')
if mibBuilder.loadTexts: cadAccountingGroup.setDescription("The name of the group used in TACACS+ method. The default names of 'tac_default' represent the entire set of defined TACACS+ servers.")
cadAccountingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 5, 1, 5), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadAccountingRowStatus.setStatus('current')
if mibBuilder.loadTexts: cadAccountingRowStatus.setDescription('')
cadServerGroupTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 6), )
if mibBuilder.loadTexts: cadServerGroupTable.setStatus('current')
if mibBuilder.loadTexts: cadServerGroupTable.setDescription('')
cadServerGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 6, 1), ).setIndexNames((0, "CADANT-AAA-MIB", "cadGroupName"), (0, "CADANT-AAA-MIB", "cadGroupIndex"))
if mibBuilder.loadTexts: cadServerGroupEntry.setStatus('current')
if mibBuilder.loadTexts: cadServerGroupEntry.setDescription('This is the cross-reference table linking server group names used in authentication lists to the ordered set of individual servers.')
cadGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 6, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 16)))
if mibBuilder.loadTexts: cadGroupName.setStatus('current')
if mibBuilder.loadTexts: cadGroupName.setDescription("Server Group name. The group name 'radius' includes all defined radius servers on the C4.")
cadGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 32), )))
if mibBuilder.loadTexts: cadGroupIndex.setStatus('current')
if mibBuilder.loadTexts: cadGroupIndex.setDescription('Orders the group based on the order in which the servers were defined. A value of zero allows the snmp agent to choose the next largest available index that preserves the list order.')
cadGroupType = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("radius", 1), ("tacacs", 2))).clone('radius')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadGroupType.setStatus('current')
if mibBuilder.loadTexts: cadGroupType.setDescription('Orders the group based on the order in which the servers were defined.')
cadGroupIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 6, 1, 4), InetAddressIPv4or6()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadGroupIpAddress.setStatus('current')
if mibBuilder.loadTexts: cadGroupIpAddress.setDescription('Ip address of the AAA server.')
cadGroupPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadGroupPort.setStatus('current')
if mibBuilder.loadTexts: cadGroupPort.setDescription('Port number of the AAA server.')
cadGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 6, 1, 6), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: cadGroupRowStatus.setDescription('')
cadRadiusTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 7), )
if mibBuilder.loadTexts: cadRadiusTable.setStatus('current')
if mibBuilder.loadTexts: cadRadiusTable.setDescription('This table defines the configuration parameters of the RADIUS servers used for authentication by the C4.')
cadRadiusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 7, 1), ).setIndexNames((0, "CADANT-AAA-MIB", "cadRadiusIpAddress"))
if mibBuilder.loadTexts: cadRadiusEntry.setStatus('current')
if mibBuilder.loadTexts: cadRadiusEntry.setDescription('')
cadRadiusIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 7, 1, 1), InetAddressIPv4or6())
if mibBuilder.loadTexts: cadRadiusIpAddress.setStatus('current')
if mibBuilder.loadTexts: cadRadiusIpAddress.setDescription('The IP address of the radius server host.')
cadRadiusAuthPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(1812)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadRadiusAuthPort.setStatus('current')
if mibBuilder.loadTexts: cadRadiusAuthPort.setDescription('The UDP port to use for RADIUS authentication.')
cadRadiusAcctPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(1813)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadRadiusAcctPort.setStatus('current')
if mibBuilder.loadTexts: cadRadiusAcctPort.setDescription('The UDP port to use for RADIUS accounting records.')
cadRadiusTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1500)).clone(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadRadiusTimeout.setStatus('current')
if mibBuilder.loadTexts: cadRadiusTimeout.setDescription('Time in seconds to wait between retransmissions of a RADIUS request.')
cadRadiusRetrans = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadRadiusRetrans.setStatus('current')
if mibBuilder.loadTexts: cadRadiusRetrans.setDescription('The number of retransmissions before declaring a RADIUS server dead.')
cadRadiusKey = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 7, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadRadiusKey.setStatus('current')
if mibBuilder.loadTexts: cadRadiusKey.setDescription('The shared secret used between the C4 and the RADIUS server.')
cadRadiusAuthServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 7, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadRadiusAuthServerIndex.setStatus('current')
if mibBuilder.loadTexts: cadRadiusAuthServerIndex.setDescription('The index in the radiusAuthServerEntry table corresponding to this radius host.')
cadRadiusRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 7, 1, 9), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadRadiusRowStatus.setStatus('current')
if mibBuilder.loadTexts: cadRadiusRowStatus.setDescription('')
cadTacacsTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 8), )
if mibBuilder.loadTexts: cadTacacsTable.setStatus('current')
if mibBuilder.loadTexts: cadTacacsTable.setDescription('This table defines the configuration parameters of the TACACS+ servers used by the C4.')
cadTacacsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 8, 1), ).setIndexNames((0, "CADANT-AAA-MIB", "cadTacacsIpAddress"))
if mibBuilder.loadTexts: cadTacacsEntry.setStatus('current')
if mibBuilder.loadTexts: cadTacacsEntry.setDescription('')
cadTacacsIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 8, 1, 1), InetAddressIPv4or6())
if mibBuilder.loadTexts: cadTacacsIpAddress.setStatus('current')
if mibBuilder.loadTexts: cadTacacsIpAddress.setDescription('The IP address of the TACACS+ server host.')
cadTacacsPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(49)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadTacacsPort.setStatus('current')
if mibBuilder.loadTexts: cadTacacsPort.setDescription('The TCP port to use for TACACS+ authentication.')
cadTacacsTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1500)).clone(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadTacacsTimeout.setStatus('current')
if mibBuilder.loadTexts: cadTacacsTimeout.setDescription('Time in seconds before TCP times out.')
cadTacacsKey = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 8, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadTacacsKey.setStatus('current')
if mibBuilder.loadTexts: cadTacacsKey.setDescription('The shared secret used between the C4 and the TACACS+ server.')
cadTacacsSingleConnect = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 8, 1, 5), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadTacacsSingleConnect.setStatus('current')
if mibBuilder.loadTexts: cadTacacsSingleConnect.setDescription('Indicates whether this TACACS+ server will support multiplexing of multiple sessions over a single TCP connection.')
cadTacacsServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 8, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadTacacsServerIndex.setStatus('current')
if mibBuilder.loadTexts: cadTacacsServerIndex.setDescription('The index in the tacacsServerEntry table corresponding to this tacacs host.')
cadTacacsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 8, 1, 7), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadTacacsRowStatus.setStatus('current')
if mibBuilder.loadTexts: cadTacacsRowStatus.setDescription('')
cadSshConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 9))
cadSshEnabled = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 9, 1), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadSshEnabled.setStatus('current')
if mibBuilder.loadTexts: cadSshEnabled.setDescription('The current adminstative status of the SSH server. True implies the SSH server is active.')
cadSshPort = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 9, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(22)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadSshPort.setStatus('current')
if mibBuilder.loadTexts: cadSshPort.setDescription('Port on which the SSH server listens.')
cadSshSessionIdleTimeout = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 9, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 12000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadSshSessionIdleTimeout.setStatus('current')
if mibBuilder.loadTexts: cadSshSessionIdleTimeout.setDescription('Seconds the SSH server will allow an established connection to remain idle connection before terminating it. 0 implies an unlimited idle timeout.')
cadSshMaxClients = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 9, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadSshMaxClients.setStatus('current')
if mibBuilder.loadTexts: cadSshMaxClients.setDescription('Maximum number of active SSH clients allowed by the SSH server. 0 implies the upper range of 20.')
cadSshPasswordAuthEnabled = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 9, 5), TruthValue().clone('true')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadSshPasswordAuthEnabled.setStatus('current')
if mibBuilder.loadTexts: cadSshPasswordAuthEnabled.setDescription('True means that password authentication is allowed by the SSH server. False implies that public key authentication must be allowed. Setting this object fo false(2) will automatically cause cadSshPasswordAuthRequired to be set to false(2).')
cadSshPublicKeyAuthEnabled = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 9, 6), TruthValue().clone('true')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadSshPublicKeyAuthEnabled.setStatus('current')
if mibBuilder.loadTexts: cadSshPublicKeyAuthEnabled.setDescription('When true, the SSH server will allow clients to authenticate using a digital signature. If false, password authentication must be allowed. Setting this object to false(2) will automatically cause cadSshPublicKeyAuthRequired and cadSshPublicKeyAuthFirst to be set to false(2).')
cadSshCliLoginEnabled = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 9, 7), TruthValue().clone('true')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadSshCliLoginEnabled.setStatus('current')
if mibBuilder.loadTexts: cadSshCliLoginEnabled.setDescription('When true, the SSH server will allow clients to login into the CLI.')
cadSshSecureFtpEnabled = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 9, 8), TruthValue().clone('true')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadSshSecureFtpEnabled.setStatus('current')
if mibBuilder.loadTexts: cadSshSecureFtpEnabled.setDescription('When true, the SSH server will allow clients to establish secure ftp sessions.')
cadSshPublicKey = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 9, 11), PemKey()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadSshPublicKey.setStatus('current')
if mibBuilder.loadTexts: cadSshPublicKey.setDescription("The SSH server's public key.")
cadSshPrivateKey = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 9, 12), PemKey()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadSshPrivateKey.setStatus('current')
if mibBuilder.loadTexts: cadSshPrivateKey.setDescription('The SSH server private key')
cadSshCiphers = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 9, 13), SshCipher().clone(hexValue="7C")).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadSshCiphers.setStatus('current')
if mibBuilder.loadTexts: cadSshCiphers.setDescription('SSH message encryption ciphers')
cadSshPortForwardingEnabled = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 9, 14), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadSshPortForwardingEnabled.setStatus('current')
if mibBuilder.loadTexts: cadSshPortForwardingEnabled.setDescription('Set this object to true(1) if SSH port forwarding is to be enabled. Otherwise, this object should be false(2) if SSH port forwarding is disabled.')
cadSshPasswordAuthRequired = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 9, 15), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadSshPasswordAuthRequired.setStatus('current')
if mibBuilder.loadTexts: cadSshPasswordAuthRequired.setDescription('If cadSshPasswordAuthEnabled is set to true(1), then setting cadSshPasswordAuthRequired to true(1) instructs the SSH server to require password authentication from connecting clients. If cadSshPasswordAuthEnabled is set to true(1) and this object it set to false(2), then password authentication may not be necessary as long as cadSshPublicAuthEnabled is set to true(1). Otherwise, if cadSshPasswordAuthEnabled is set to false(2), any attempt to set cadSshPasswordAuthRequired to true(1) will be rejected.')
cadSshPublicKeyAuthRequired = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 9, 16), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadSshPublicKeyAuthRequired.setStatus('current')
if mibBuilder.loadTexts: cadSshPublicKeyAuthRequired.setDescription('If cadSshPublicKeyAuthEnabled is set to true(1), then setting cadSshPublicKeyAuthRequired to true(1) instructs the SSH server to require public key authentication from connecting clients. If cadSshPublicKeyAuthRequired is set to true(1) and this object it set to false(2), then public key authentication may not be necessary as long as cadSshPasswordAuthEnabled is set to true(1). Otherwise, if cadSshPublicKeyAuthEnabled is set to false(2), any attempt to set cadSshPublicKeyAuthRequired to true(1) will be rejected. Setting this object to false(2) will automatically cause cadSshPublicKeyAuthFirst to be set to false(2).')
cadSshPublicKeyAuthFirst = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 9, 17), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadSshPublicKeyAuthFirst.setStatus('current')
if mibBuilder.loadTexts: cadSshPublicKeyAuthFirst.setDescription('If both cadSshPublicKeyAuthEnabled and cadSshPublicKeyAuthRequired are set to true(1), then this object may set to true(1). Otherwise, attempts to set this object to true(1) will fail. If set to true(1) and cadSshPasswordAuthRequired is set to true, then the SSH server will required public key authentication to preceed password authentication.')
cadSshMaxAuthFailures = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 9, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 64)).clone(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadSshMaxAuthFailures.setStatus('current')
if mibBuilder.loadTexts: cadSshMaxAuthFailures.setDescription('The SSH server will reject clients who fail to authorize after this many attempts.')
cadSshServerKeyType = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 9, 19), SshKeyType().clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadSshServerKeyType.setStatus('current')
if mibBuilder.loadTexts: cadSshServerKeyType.setDescription('The SSH server key type (DSA-1024 or RSA-2048).')
cadSshKeyExchange = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 9, 20), SshKeyExchangeMethod().clone(hexValue="80")).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadSshKeyExchange.setStatus('current')
if mibBuilder.loadTexts: cadSshKeyExchange.setDescription('The SSH server key exhange method.')
cadPasswordTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 10), )
if mibBuilder.loadTexts: cadPasswordTable.setStatus('current')
if mibBuilder.loadTexts: cadPasswordTable.setDescription('This table reflects the local user passwords defined for the C4.')
cadPasswordEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 10, 1), ).setIndexNames((0, "CADANT-AAA-MIB", "cadPassUser"))
if mibBuilder.loadTexts: cadPasswordEntry.setStatus('current')
if mibBuilder.loadTexts: cadPasswordEntry.setDescription('')
cadPassUser = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 10, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: cadPassUser.setStatus('current')
if mibBuilder.loadTexts: cadPassUser.setDescription('Local user name defined on the C4.')
cadPassPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 10, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadPassPassword.setStatus('current')
if mibBuilder.loadTexts: cadPassPassword.setDescription('Encrypted password for local user defined on the C4.')
cadPassAuthLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("priviledged", 1), ("normal", 2))).clone('normal')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadPassAuthLevel.setStatus('current')
if mibBuilder.loadTexts: cadPassAuthLevel.setDescription('Authorization level for this user account.')
cadPassPublicKey = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 10, 1, 4), PemKey()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadPassPublicKey.setStatus('current')
if mibBuilder.loadTexts: cadPassPublicKey.setDescription("User's public key for use by SSH")
cadPassRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 10, 1, 5), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadPassRowStatus.setStatus('current')
if mibBuilder.loadTexts: cadPassRowStatus.setDescription('')
cadEnablePasswordTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 11), )
if mibBuilder.loadTexts: cadEnablePasswordTable.setStatus('current')
if mibBuilder.loadTexts: cadEnablePasswordTable.setDescription('This table reflects the local enable passwords defined for various privilege levels.')
cadEnablePasswordEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 11, 1), ).setIndexNames((0, "CADANT-AAA-MIB", "cadPrivilegeLevel"))
if mibBuilder.loadTexts: cadEnablePasswordEntry.setStatus('current')
if mibBuilder.loadTexts: cadEnablePasswordEntry.setDescription('')
cadPrivilegeLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)))
if mibBuilder.loadTexts: cadPrivilegeLevel.setStatus('current')
if mibBuilder.loadTexts: cadPrivilegeLevel.setDescription('Privilege level.')
cadEnablePassword = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 11, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadEnablePassword.setStatus('current')
if mibBuilder.loadTexts: cadEnablePassword.setDescription('Encrypted enable password associated with the privilege level.')
cadEnablePasswordRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 11, 1, 3), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadEnablePasswordRowStatus.setStatus('current')
if mibBuilder.loadTexts: cadEnablePasswordRowStatus.setDescription('')
cadCLIcommandPrivilegeLevelTable = MibIdentifier((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 12))
cadCLIcommandPrivilegeTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 14), )
if mibBuilder.loadTexts: cadCLIcommandPrivilegeTable.setStatus('current')
if mibBuilder.loadTexts: cadCLIcommandPrivilegeTable.setDescription('This table reflects the mapping of CLI commands to privilege levels.')
cadCLIcommandPrivilegeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 14, 1), ).setIndexNames((0, "CADANT-AAA-MIB", "cadCLIcommandPrivilegeCommand"))
if mibBuilder.loadTexts: cadCLIcommandPrivilegeEntry.setStatus('current')
if mibBuilder.loadTexts: cadCLIcommandPrivilegeEntry.setDescription('')
cadCLIcommandPrivilegeNodeAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 14, 1, 1), CmdNode())
if mibBuilder.loadTexts: cadCLIcommandPrivilegeNodeAddr.setStatus('obsolete')
if mibBuilder.loadTexts: cadCLIcommandPrivilegeNodeAddr.setDescription('Address of the command node that uniquely identifies a CLI command.')
cadCLIcommandPrivilegeCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 14, 1, 2), DisplayString())
if mibBuilder.loadTexts: cadCLIcommandPrivilegeCommand.setStatus('current')
if mibBuilder.loadTexts: cadCLIcommandPrivilegeCommand.setDescription('Fully expanded CLI command text that uniquely identifies this command node.')
cadCLIcommandPrivilegeOriginalLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 14, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadCLIcommandPrivilegeOriginalLevel.setStatus('current')
if mibBuilder.loadTexts: cadCLIcommandPrivilegeOriginalLevel.setDescription('Original privilege level defined at compile time.')
cadCLIcommandPrivilegeNewLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 14, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadCLIcommandPrivilegeNewLevel.setStatus('current')
if mibBuilder.loadTexts: cadCLIcommandPrivilegeNewLevel.setDescription('Configured privilege level that overrides cadCLIcommandPrivilegeOriginalLevel')
cadCLIcommandPrivilegeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 14, 1, 5), RowStatus().clone('createAndGo')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadCLIcommandPrivilegeRowStatus.setStatus('current')
if mibBuilder.loadTexts: cadCLIcommandPrivilegeRowStatus.setDescription('Control object for this row')
cadSshStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 13))
cadSshServerVersion = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 13, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadSshServerVersion.setStatus('current')
if mibBuilder.loadTexts: cadSshServerVersion.setDescription('The current version information for this C4 SSH server.')
cadSshOfferedProtocols = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 13, 2), SshProtocol()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadSshOfferedProtocols.setStatus('current')
if mibBuilder.loadTexts: cadSshOfferedProtocols.setDescription('SSH Protocols available on this C4 SSH server.')
cadSshServerRunning = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 13, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadSshServerRunning.setStatus('current')
if mibBuilder.loadTexts: cadSshServerRunning.setDescription('If true, the C4 SSH server is active.')
cadSshSessionTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 13, 4), )
if mibBuilder.loadTexts: cadSshSessionTable.setStatus('current')
if mibBuilder.loadTexts: cadSshSessionTable.setDescription('This table defines the configuration parameters of the RADIUS servers used for authentication by the C4.')
cadSshSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 13, 4, 1), ).setIndexNames((0, "CADANT-AAA-MIB", "cadSshSessionIndex"))
if mibBuilder.loadTexts: cadSshSessionEntry.setStatus('current')
if mibBuilder.loadTexts: cadSshSessionEntry.setDescription('')
cadSshSessionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 13, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: cadSshSessionIndex.setStatus('current')
if mibBuilder.loadTexts: cadSshSessionIndex.setDescription('The session index corresponding to a SSH session. These are preallocated by the system at startup.')
cadSshConnectionId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 13, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadSshConnectionId.setStatus('current')
if mibBuilder.loadTexts: cadSshConnectionId.setDescription('The connection identifier for this SSH session.')
cadSshUser = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 13, 4, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadSshUser.setStatus('current')
if mibBuilder.loadTexts: cadSshUser.setDescription('')
cadSshClientIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 13, 4, 1, 4), InetAddressIPv4or6()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadSshClientIpAddr.setStatus('current')
if mibBuilder.loadTexts: cadSshClientIpAddr.setDescription('The client IP address.')
cadSshServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 13, 4, 1, 5), SshService()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadSshServiceType.setStatus('current')
if mibBuilder.loadTexts: cadSshServiceType.setDescription('')
cadSshAuthMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 13, 4, 1, 6), SshAuthMethod()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadSshAuthMethod.setStatus('current')
if mibBuilder.loadTexts: cadSshAuthMethod.setDescription('The authentication method for this session.')
cadSshCipherType = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 13, 4, 1, 7), SshCipherType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadSshCipherType.setStatus('current')
if mibBuilder.loadTexts: cadSshCipherType.setDescription('')
cadSshMacAlg = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 13, 4, 1, 8), SshMacAlg()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadSshMacAlg.setStatus('current')
if mibBuilder.loadTexts: cadSshMacAlg.setDescription('')
cadSshClientSw = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 13, 4, 1, 9), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadSshClientSw.setStatus('current')
if mibBuilder.loadTexts: cadSshClientSw.setDescription('')
cadSshSessionRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 13, 4, 1, 10), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadSshSessionRowStatus.setStatus('current')
if mibBuilder.loadTexts: cadSshSessionRowStatus.setDescription('')
cadAAAConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 20))
cadAAAGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 20, 1))
cadAAACompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 20, 2))
cadAAACompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 20, 2, 1)).setObjects(("CADANT-AAA-MIB", "cadAAALineGroup"), ("CADANT-AAA-MIB", "cadAAAMethodGroup"), ("CADANT-AAA-MIB", "cadAAAServerGroup"), ("CADANT-AAA-MIB", "cadAAAProtocolGroup"), ("CADANT-AAA-MIB", "cadAAASshGroup"), ("CADANT-AAA-MIB", "cadAAAPasswordGroup"), ("CADANT-AAA-MIB", "cadAAALineGroup"), ("CADANT-AAA-MIB", "cadAAAMethodGroup"), ("CADANT-AAA-MIB", "cadAAAServerGroup"), ("CADANT-AAA-MIB", "cadAAAProtocolGroup"), ("CADANT-AAA-MIB", "cadAAASshGroup"), ("CADANT-AAA-MIB", "cadAAAPasswordGroup"), ("CADANT-AAA-MIB", "cadAAAEnableGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cadAAACompliance = cadAAACompliance.setStatus('current')
if mibBuilder.loadTexts: cadAAACompliance.setDescription('The compliance statement ')
cadAAALineGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 20, 1, 1)).setObjects(("CADANT-AAA-MIB", "cadLineType"), ("CADANT-AAA-MIB", "cadLineEnabled"), ("CADANT-AAA-MIB", "cadLineSessionTimeout"), ("CADANT-AAA-MIB", "cadLineIdleTimeout"), ("CADANT-AAA-MIB", "cadLinePagination"), ("CADANT-AAA-MIB", "cadLineBaud"), ("CADANT-AAA-MIB", "cadLinePassword"), ("CADANT-AAA-MIB", "cadLineLoginAuthMethodList"), ("CADANT-AAA-MIB", "cadLineEnableAuthMethodList"), ("CADANT-AAA-MIB", "cadLineAuthorMethodList"), ("CADANT-AAA-MIB", "cadLineShellAccountingMethodList"), ("CADANT-AAA-MIB", "cadLineCommandAccountingMethodList"), ("CADANT-AAA-MIB", "cadLineShellAccountingType"), ("CADANT-AAA-MIB", "cadLineCommandAccountingType"), ("CADANT-AAA-MIB", "cadLineCommandAccountingPrivilegeLevel"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cadAAALineGroup = cadAAALineGroup.setStatus('current')
if mibBuilder.loadTexts: cadAAALineGroup.setDescription('This group defines line configuration for the C4.')
cadAAAMethodGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 20, 1, 2)).setObjects(("CADANT-AAA-MIB", "cadAuthType"), ("CADANT-AAA-MIB", "cadAuthGroup"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cadAAAMethodGroup = cadAAAMethodGroup.setStatus('current')
if mibBuilder.loadTexts: cadAAAMethodGroup.setDescription('This group defines the AAA methods for the C4.')
cadAAAServerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 20, 1, 3)).setObjects(("CADANT-AAA-MIB", "cadGroupIpAddress"), ("CADANT-AAA-MIB", "cadGroupType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cadAAAServerGroup = cadAAAServerGroup.setStatus('current')
if mibBuilder.loadTexts: cadAAAServerGroup.setDescription('This group defines the server cross reference group for AAA.')
cadAAAProtocolGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 20, 1, 4)).setObjects(("CADANT-AAA-MIB", "cadTacacsPort"), ("CADANT-AAA-MIB", "cadTacacsTimeout"), ("CADANT-AAA-MIB", "cadTacacsKey"), ("CADANT-AAA-MIB", "cadTacacsSingleConnect"), ("CADANT-AAA-MIB", "cadTacacsServerIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cadAAAProtocolGroup = cadAAAProtocolGroup.setStatus('current')
if mibBuilder.loadTexts: cadAAAProtocolGroup.setDescription('This group defines AAA protocol information for the C4.')
cadAAASshGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 20, 1, 5)).setObjects(("CADANT-AAA-MIB", "cadSshEnabled"), ("CADANT-AAA-MIB", "cadSshPort"), ("CADANT-AAA-MIB", "cadSshSessionIdleTimeout"), ("CADANT-AAA-MIB", "cadSshMaxClients"), ("CADANT-AAA-MIB", "cadSshPasswordAuthEnabled"), ("CADANT-AAA-MIB", "cadSshPublicKeyAuthEnabled"), ("CADANT-AAA-MIB", "cadSshCliLoginEnabled"), ("CADANT-AAA-MIB", "cadSshSecureFtpEnabled"), ("CADANT-AAA-MIB", "cadSshPublicKey"), ("CADANT-AAA-MIB", "cadSshPrivateKey"), ("CADANT-AAA-MIB", "cadSshCiphers"), ("CADANT-AAA-MIB", "cadSshPortForwardingEnabled"), ("CADANT-AAA-MIB", "cadSshPasswordAuthRequired"), ("CADANT-AAA-MIB", "cadSshPublicKeyAuthRequired"), ("CADANT-AAA-MIB", "cadSshPublicKeyAuthFirst"), ("CADANT-AAA-MIB", "cadSshMaxAuthFailures"), ("CADANT-AAA-MIB", "cadSshServerKeyType"), ("CADANT-AAA-MIB", "cadSshKeyExchange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cadAAASshGroup = cadAAASshGroup.setStatus('current')
if mibBuilder.loadTexts: cadAAASshGroup.setDescription('This group defines AAA SSH information for the C4.')
cadAAAPasswordGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 20, 1, 6)).setObjects(("CADANT-AAA-MIB", "cadPassPassword"), ("CADANT-AAA-MIB", "cadPassAuthLevel"), ("CADANT-AAA-MIB", "cadPassPublicKey"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cadAAAPasswordGroup = cadAAAPasswordGroup.setStatus('current')
if mibBuilder.loadTexts: cadAAAPasswordGroup.setDescription('This group defines AAA local password information for the C4.')
cadAAAEnableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4998, 1, 1, 40, 1, 20, 1, 7)).setObjects(("CADANT-AAA-MIB", "cadEnablePassword"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cadAAAEnableGroup = cadAAAEnableGroup.setStatus('current')
if mibBuilder.loadTexts: cadAAAEnableGroup.setDescription('This group defines AAA local enable password information for the C4.')
mibBuilder.exportSymbols("CADANT-AAA-MIB", cadGroupType=cadGroupType, cadLineTable=cadLineTable, cadAccountingMethodTable=cadAccountingMethodTable, cadSshStatus=cadSshStatus, cadAAAProtocolGroup=cadAAAProtocolGroup, cadRadiusRetrans=cadRadiusRetrans, cadSshClientSw=cadSshClientSw, cadLineCommandAccountingType=cadLineCommandAccountingType, cadAAAPasswordGroup=cadAAAPasswordGroup, cadSshUser=cadSshUser, PYSNMP_MODULE_ID=cadAAA, cadAuthorizationMethodTable=cadAuthorizationMethodTable, cadTacacsServerIndex=cadTacacsServerIndex, cadTacacsSingleConnect=cadTacacsSingleConnect, cadAccountingListIndex=cadAccountingListIndex, cadEnablePasswordEntry=cadEnablePasswordEntry, cadAuthorizationGroup=cadAuthorizationGroup, cadTacacsPort=cadTacacsPort, cadPassPassword=cadPassPassword, cadAAALineGroup=cadAAALineGroup, cadLineEnableAuthMethodList=cadLineEnableAuthMethodList, cadSshServerVersion=cadSshServerVersion, cadLineIdleTimeout=cadLineIdleTimeout, cadAuthorizationMethodEntry=cadAuthorizationMethodEntry, cadRadiusRowStatus=cadRadiusRowStatus, cadSshSecureFtpEnabled=cadSshSecureFtpEnabled, cadAuthRowStatus=cadAuthRowStatus, cadAccountingGroup=cadAccountingGroup, cadRadiusAuthPort=cadRadiusAuthPort, PemKey=PemKey, cadLineSessionTimeout=cadLineSessionTimeout, cadTacacsTable=cadTacacsTable, cadLineShellAccountingType=cadLineShellAccountingType, cadRadiusAcctPort=cadRadiusAcctPort, cadLinePassword=cadLinePassword, cadServerGroupEntry=cadServerGroupEntry, cadRadiusTable=cadRadiusTable, cadSshCiphers=cadSshCiphers, cadLineCommandAccountingMethodList=cadLineCommandAccountingMethodList, cadRadiusKey=cadRadiusKey, cadSshPrivateKey=cadSshPrivateKey, cadTacacsIpAddress=cadTacacsIpAddress, cadAAAEnableGroup=cadAAAEnableGroup, cadLinePagination=cadLinePagination, cadSshConfig=cadSshConfig, cadAccountingRowStatus=cadAccountingRowStatus, cadSshServerRunning=cadSshServerRunning, cadCLIcommandPrivilegeOriginalLevel=cadCLIcommandPrivilegeOriginalLevel, cadPasswordEntry=cadPasswordEntry, cadRadiusEntry=cadRadiusEntry, cadGroupIpAddress=cadGroupIpAddress, cadAAAMethodGroup=cadAAAMethodGroup, cadAuthorizationListIndex=cadAuthorizationListIndex, cadPassPublicKey=cadPassPublicKey, cadCLIcommandPrivilegeTable=cadCLIcommandPrivilegeTable, CmdNode=CmdNode, cadAAACompliance=cadAAACompliance, cadSshClientIpAddr=cadSshClientIpAddr, cadSshCliLoginEnabled=cadSshCliLoginEnabled, cadSshServerKeyType=cadSshServerKeyType, cadAccountingType=cadAccountingType, cadSshConnectionId=cadSshConnectionId, cadAuthGroup=cadAuthGroup, cadSshOfferedProtocols=cadSshOfferedProtocols, cadGroupRowStatus=cadGroupRowStatus, cadSshPublicKey=cadSshPublicKey, cadSshSessionIndex=cadSshSessionIndex, cadSshMaxAuthFailures=cadSshMaxAuthFailures, cadCLIcommandPrivilegeLevelTable=cadCLIcommandPrivilegeLevelTable, cadAccountingMethodEntry=cadAccountingMethodEntry, cadSshServiceType=cadSshServiceType, cadAccountingListName=cadAccountingListName, cadSshPortForwardingEnabled=cadSshPortForwardingEnabled, cadSshEnabled=cadSshEnabled, cadLineLoginAuthMethodList=cadLineLoginAuthMethodList, cadPasswordTable=cadPasswordTable, cadRadiusAuthServerIndex=cadRadiusAuthServerIndex, cadAAASshGroup=cadAAASshGroup, cadSshPasswordAuthEnabled=cadSshPasswordAuthEnabled, cadLineAuthorMethodList=cadLineAuthorMethodList, cadSshMaxClients=cadSshMaxClients, cadPassAuthLevel=cadPassAuthLevel, cadTacacsTimeout=cadTacacsTimeout, cadTacacsKey=cadTacacsKey, cadLineShellAccountingMethodList=cadLineShellAccountingMethodList, cadSshPort=cadSshPort, cadServerGroupTable=cadServerGroupTable, cadAAAGroups=cadAAAGroups, cadSshKeyExchange=cadSshKeyExchange, cadEnablePasswordRowStatus=cadEnablePasswordRowStatus, cadAuthListIndex=cadAuthListIndex, cadPassRowStatus=cadPassRowStatus, cadSshMacAlg=cadSshMacAlg, cadAuthType=cadAuthType, cadRadiusTimeout=cadRadiusTimeout, cadSshAuthMethod=cadSshAuthMethod, cadAuthMethodTable=cadAuthMethodTable, cadSshCipherType=cadSshCipherType, cadAuthorizationType=cadAuthorizationType, cadPassUser=cadPassUser, cadLineType=cadLineType, cadSshSessionTable=cadSshSessionTable, cadLineIndex=cadLineIndex, cadRadiusIpAddress=cadRadiusIpAddress, cadGroupName=cadGroupName, cadSshPublicKeyAuthRequired=cadSshPublicKeyAuthRequired, cadSshSessionEntry=cadSshSessionEntry, cadLineBaud=cadLineBaud, cadGroupIndex=cadGroupIndex, cadGroupPort=cadGroupPort, cadCLIcommandPrivilegeRowStatus=cadCLIcommandPrivilegeRowStatus, cadAuthMethodEntry=cadAuthMethodEntry, cadPrivilegeLevel=cadPrivilegeLevel, cadAuthorizationListName=cadAuthorizationListName, cadSshPasswordAuthRequired=cadSshPasswordAuthRequired, cadAuthListName=cadAuthListName, cadSshSessionRowStatus=cadSshSessionRowStatus, cadAAAServerGroup=cadAAAServerGroup, cadEnablePasswordTable=cadEnablePasswordTable, cadSshSessionIdleTimeout=cadSshSessionIdleTimeout, cadAAAConformance=cadAAAConformance, cadCLIcommandPrivilegeCommand=cadCLIcommandPrivilegeCommand, cadSshPublicKeyAuthEnabled=cadSshPublicKeyAuthEnabled, cadSshPublicKeyAuthFirst=cadSshPublicKeyAuthFirst, cadTacacsEntry=cadTacacsEntry, cadCLIcommandPrivilegeNodeAddr=cadCLIcommandPrivilegeNodeAddr, cadAAA=cadAAA, cadAAACompliances=cadAAACompliances, cadTacacsRowStatus=cadTacacsRowStatus, cadLineEnabled=cadLineEnabled, cadCLIcommandPrivilegeEntry=cadCLIcommandPrivilegeEntry, cadEnablePassword=cadEnablePassword, cadAuthorizationRowStatus=cadAuthorizationRowStatus, cadLineEntry=cadLineEntry, cadCLIcommandPrivilegeNewLevel=cadCLIcommandPrivilegeNewLevel, cadLineCommandAccountingPrivilegeLevel=cadLineCommandAccountingPrivilegeLevel)
