#
# PySNMP MIB module CISCO-L4L7MODULE-REDUNDANCY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-L4L7MODULE-REDUNDANCY-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:04:12 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
entPhysicalIndex, = mibBuilder.importSymbols("ENTITY-MIB", "entPhysicalIndex")
InterfaceIndex, InterfaceIndexOrZero = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "InterfaceIndexOrZero")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, ObjectIdentity, NotificationType, Bits, Gauge32, Integer32, Counter32, Counter64, MibIdentifier, iso, TimeTicks, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "ObjectIdentity", "NotificationType", "Bits", "Gauge32", "Integer32", "Counter32", "Counter64", "MibIdentifier", "iso", "TimeTicks", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32")
TextualConvention, TruthValue, DisplayString, StorageType, TimeStamp, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "DisplayString", "StorageType", "TimeStamp", "RowStatus")
ciscoL4L7moduleRedundancyMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 650))
ciscoL4L7moduleRedundancyMIB.setRevisions(('2008-04-04 00:00', '2008-03-13 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoL4L7moduleRedundancyMIB.setRevisionsDescriptions(("Added a new state 'warmCompatible' to clrPeerSoftwareCompatibilty Added a new state 'standbyWarm' to ciscoL4L7RedState.", 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoL4L7moduleRedundancyMIB.setLastUpdated('200804040000Z')
if mibBuilder.loadTexts: ciscoL4L7moduleRedundancyMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoL4L7moduleRedundancyMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W. Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-l4l7security@cisco.com')
if mibBuilder.loadTexts: ciscoL4L7moduleRedundancyMIB.setDescription('The L4-7 SLB devices are used for scaling websites, building web enabled applications, and migrating to web services. The following services ( but not limited to ) can be provided by L4-7 slb devices: SLB ( Server Load Balancing ) FW ( Firewall ) SSL ( Secure Socket Layer ) IDS ( Intrusion Detection System ) . This MIB provides the tables/objects that support redundancy configuration and redundancy statistics. The redundancy model supported by this MIB allows two or more SLB devices to be configured with one or more redundancy group. Each redundancy group is identified by a unique group ID. Two or more devices are redundant to each other if they use the same redundancy Group ID. Acronyms and terms: HB Heart Beat FT Fault Tolerant HA High Availability VLAN Virtual Local Area Network LB Load Balance')
ciscoLmRedundancyMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 650, 0))
ciscoLmRedundancyMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 650, 1))
ciscoLmRedundancyMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 650, 2))
clrConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 650, 1, 1))
clrStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 650, 1, 2))
clrNotifObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 650, 1, 3))
class CiscoL4L7RedState(TextualConvention, Integer32):
    description = "The redundancy state of the device in redundancy configuration. 'other' : other than values defined below. 'nonRedundant' : redundancy has not been configured. 'initializing' : establish necessary system services 'negotiation' : peer unit discovery and negotiation 'active' : device is in active state. It is servicing the requests. 'standbyCold' : standby will take over if synchronization is failed using bulk synch mechanism. 'standbyConfig' : The active device receives a notification to send a snapshot of its running-config to the local standby device. 'standbyBulk' : The active device receives a notification to send a snapshot of the current state information for all applications to the standby device. 'standbyHot' : Incremental data synchronization continues. This unit is ready and is able to instantly take over activity. 'standbyWarm' : When the peer software compatibility is warmCompatible ( a state in clrPeerSoftwareCompatibility ) , the redundant groups on standby goes to standbyWarm instead of standbyHot. Whether the bulk config sync fails/passes the transition to standbyBulk is always made and eventually the standby device goes to standbyWarm. The standbyWarm state is similar to standbyHot state ( config mode will be locked, state replication/ config sync are continued ) , but when config-sync failed, there is no move to standbyCold state."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
    namedValues = NamedValues(("other", 1), ("nonRedundant", 2), ("initializing", 3), ("negotiation", 4), ("active", 5), ("standbyCold", 6), ("standbyConfig", 7), ("standbyBulk", 8), ("standbyHot", 9), ("standbyWarm", 10))

clrPeerConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 650, 1, 1, 1), )
if mibBuilder.loadTexts: clrPeerConfigTable.setStatus('current')
if mibBuilder.loadTexts: clrPeerConfigTable.setDescription('This table is for configuring peer groups that are part of redundancy configuration. The peer configuration specifies the information used for exchanging High Availability information related to redundancy groups.')
clrPeerConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 650, 1, 1, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-L4L7MODULE-REDUNDANCY-MIB", "clrPeerId"))
if mibBuilder.loadTexts: clrPeerConfigEntry.setStatus('current')
if mibBuilder.loadTexts: clrPeerConfigEntry.setDescription('An entry in clrPeerConfigTable. Each entry contains information about peer interface, query interface, heart beat count and heart beat time.')
clrPeerId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 650, 1, 1, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: clrPeerId.setStatus('current')
if mibBuilder.loadTexts: clrPeerId.setDescription('This object identifies unique id for the peer. The peer is used in redundancy configuration.')
clrPeerInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 650, 1, 1, 1, 1, 2), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clrPeerInterface.setStatus('current')
if mibBuilder.loadTexts: clrPeerInterface.setDescription('This object specifies the interface used by the peers to exchange High Availability ( HA ) protocol information.')
clrPeerBackupInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 650, 1, 1, 1, 1, 3), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clrPeerBackupInterface.setStatus('current')
if mibBuilder.loadTexts: clrPeerBackupInterface.setDescription('This object specifies the backup interface used by the peer. The backup interface is used in case the heart beat message is not received. This interface is used to send the heart beat message. If the message sent is not successful, then it is assumed peer is down and switchover will be initiated. If the message sent is successful on this interface, the peer transitions to standbyCold and continue to monitor peer.')
clrPeerHeartBeatTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 650, 1, 1, 1, 1, 4), Unsigned32().clone(1)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: clrPeerHeartBeatTime.setStatus('current')
if mibBuilder.loadTexts: clrPeerHeartBeatTime.setDescription('The time interval between heartbeat/keep-alive messages exchanged between the peers.')
clrPeerHeartBeatCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 650, 1, 1, 1, 1, 5), Unsigned32().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clrPeerHeartBeatCount.setStatus('current')
if mibBuilder.loadTexts: clrPeerHeartBeatCount.setDescription("This object is used in conjunction with 'clrPeerHeartBeatTime' to switch over the active redundancy unit or not. Switch over occurs if heartbeats are not received from the peer during a specific time period, which is equal to ( clrPeerHeartBeatTime * clrPeerHeartBeatCount ) .")
clrPeerStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 650, 1, 1, 1, 1, 6), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clrPeerStorageType.setStatus('current')
if mibBuilder.loadTexts: clrPeerStorageType.setDescription('The storage type for this conceptual row.')
clrPeerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 650, 1, 1, 1, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clrPeerRowStatus.setStatus('current')
if mibBuilder.loadTexts: clrPeerRowStatus.setDescription('This object is used for adding/deleting entries from the table. An entry MUST NOT exist in the active state unless all objects in the entry have an appropriate value, as described in the description clause for each writable object. This object may be modified if the associated instance of this object is equal to active(1), notInService(2), or notReady(3). All other writable objects may be modified if the associated instance of this object is equal to notInService(2) or notReady(3).')
clrPeerInfoTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 650, 1, 1, 2), )
if mibBuilder.loadTexts: clrPeerInfoTable.setStatus('current')
if mibBuilder.loadTexts: clrPeerInfoTable.setDescription('This table contains information of the redundancy peer.')
clrPeerInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 650, 1, 1, 2, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-L4L7MODULE-REDUNDANCY-MIB", "clrPeerId"))
if mibBuilder.loadTexts: clrPeerInfoEntry.setStatus('current')
if mibBuilder.loadTexts: clrPeerInfoEntry.setDescription("An entry in peer information table. An entry will get created whenever an entry is created in clrPeerConfigTable. Each entry contains information such as peer state, peer ip address, software and license compatibility. The entPhysicalIndex specifies an entry in entPhysicalTable with entPhysicalClass representing the value of 'module'.")
clrPeerOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 650, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("init", 1), ("localIPaddr", 2), ("peerIPAddr", 3), ("startHB", 4), ("tcpSetup", 5), ("srgCheck", 6), ("licCheck", 7), ("compatible", 8), ("peerInterfaceDown", 9), ("down", 10), ("error", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clrPeerOperStatus.setStatus('current')
if mibBuilder.loadTexts: clrPeerOperStatus.setDescription('This object identifies the current status of the peer. The possible values are init(1) : The initial state of the peer. localIPaddr(2) : The local device IP address is missing. Waiting for the local IP address to be configured. peerIPAddr(3) : The peer IP address is missing. Waiting for the peer IP address to be configured. startHB(4) : The peer configuration is complete. Starting the heartbeat to see if there is a peer device. tcpSetUp(5) : The heartbeat has detected the presence of the peer device. Redundancy is in the process of establishing a TCP connection to the peer. srgCheck(6) : Checking for software version compatibility with the peer device. licCheck(7) : Checking for license compatibility with the peer device. compatible(8) : Version and license checks indicate that the peer is compatible for redundancy. peerInterfaceDown(9): The peer interface ( used for transmitting and receiving HB messages ) is down, but, through the query interface, the local device has determined that the peer is still alive. down(10) : The peer device is down. error(11) : Indicates that an error has occurred with the peer. Possible errors are: version mismatch, license mismatch, or failure to establish a TCP connection to the peer. A syslog message appears with more detailed information.')
clrPeerIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 650, 1, 1, 2, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clrPeerIpAddressType.setStatus('current')
if mibBuilder.loadTexts: clrPeerIpAddressType.setDescription('The type of internet address by which the peer is reachable.')
clrPeerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 650, 1, 1, 2, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clrPeerIpAddress.setStatus('current')
if mibBuilder.loadTexts: clrPeerIpAddress.setDescription('This Internet address for the redundant peer. The type of this address is determined by the value of the clrPeerIpAddressType object.')
clrPeerSoftwareCompatibilty = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 650, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("init", 1), ("compatible", 2), ("inCompatible", 3), ("warmCompatible", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clrPeerSoftwareCompatibilty.setStatus('current')
if mibBuilder.loadTexts: clrPeerSoftwareCompatibilty.setDescription("Indicates whether the software version of the local device and the software version of the peer are compatible. The possible values are: init(1) : initialization state. compatible(2) : software version of the local and peer device are compatible. inCompatible(3) : software version of the local and peer device are not compatible. warmCompatible(4) : When the software version check of the local and the peer device returns 'supersedes' or 'superseded_by' then the clrPeerSoftwarecompatibility of the peer device is set to 'warmCompatible'.")
clrPeerLicenseCompatibility = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 650, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("init", 1), ("compatible", 2), ("inCompatible", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clrPeerLicenseCompatibility.setStatus('current')
if mibBuilder.loadTexts: clrPeerLicenseCompatibility.setDescription('Indicates whether the license of the local device and the license of the peer device are compatible. The possible values are: init(1) : initialization state. compatible(2) : license version of the local and peer device are compatible. inCompatible(3) : license version of the local and peer device are not compatible.')
clrPeerRedGroups = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 650, 1, 1, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clrPeerRedGroups.setStatus('current')
if mibBuilder.loadTexts: clrPeerRedGroups.setDescription('This object refers to the number of redundancy groups the peer is associated with.')
clrRedundancyConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 650, 1, 1, 3), )
if mibBuilder.loadTexts: clrRedundancyConfigTable.setStatus('current')
if mibBuilder.loadTexts: clrRedundancyConfigTable.setDescription("This table is used for configuring redundancy groups. The redundancy group is configured by specifying the same value of 'clrRedGroupId' in multiple devices.")
clrRedundancyConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 650, 1, 1, 3, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-L4L7MODULE-REDUNDANCY-MIB", "clrRedGroupId"))
if mibBuilder.loadTexts: clrRedundancyConfigEntry.setStatus('current')
if mibBuilder.loadTexts: clrRedundancyConfigEntry.setDescription("An entry in redundancy table. Each entry contains information such as priority, preempt. Preemption ensures that the group member with high priority always becomes active. The entPhysicalIndex specifies the entry in entPhysicalTable with entPhysicalClass representing the value of 'module'.")
clrRedGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 650, 1, 1, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096)))
if mibBuilder.loadTexts: clrRedGroupId.setStatus('current')
if mibBuilder.loadTexts: clrRedGroupId.setDescription('This object specifies the redundancy group identifier. This is the unique id of the redundancy group.')
clrRedPeerId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 650, 1, 1, 3, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clrRedPeerId.setStatus('current')
if mibBuilder.loadTexts: clrRedPeerId.setDescription("The peer ID to which this group belongs. There must be an entry in clrPeerConfigTable with this value. This object cannot be modified if the associated clrRedRowStatus object is equal to 'active'.")
clrRedPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 650, 1, 1, 3, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clrRedPriority.setStatus('current')
if mibBuilder.loadTexts: clrRedPriority.setDescription("The priority value of the redundancy group. This value is used in selecting the active and standby peer. The devices that belong to the same redundancy group must be configured with a different priority. The redundancy group with a highest priority will become active unit during negotiation phase of the redundancy. If two (or more) devices in a group have the same priority, the one with the highest IP address of the interface is the active device. If a redundancy group with high priority value is online after its peer has become active, then the group with high priority will become standby. This behavior can be changed by setting clrRedPreempt object to 'true'.")
clrRedPreempt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 650, 1, 1, 3, 1, 4), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clrRedPreempt.setStatus('current')
if mibBuilder.loadTexts: clrRedPreempt.setDescription("This specifies whether a high priority redundancy device can become active irrespective of the time at which it is online. The value 'true' specifies that the redundancy group with higher priority will always become active. The value 'false' specifies that the redundacy device which becomes active will remain active even if another redundancy device comes online with higher priority.")
clrRedFailOverTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 650, 1, 1, 3, 1, 5), Unsigned32().clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clrRedFailOverTime.setStatus('current')
if mibBuilder.loadTexts: clrRedFailOverTime.setDescription('The time to wait before standby redundancy group become active. This represents the amount of time a module need to wait after the last keep-alive message is received before assuming the peer is not operating.')
clrRedState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 650, 1, 1, 3, 1, 6), CiscoL4L7RedState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clrRedState.setStatus('current')
if mibBuilder.loadTexts: clrRedState.setDescription('The current redundancy state.')
clrRedStateChangeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 650, 1, 1, 3, 1, 7), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clrRedStateChangeTime.setStatus('current')
if mibBuilder.loadTexts: clrRedStateChangeTime.setDescription('The time of the last change in the current redundancy state.')
clrRedContext = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 650, 1, 1, 3, 1, 8), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clrRedContext.setStatus('current')
if mibBuilder.loadTexts: clrRedContext.setDescription('This object refers to the context name to which the redundant group is associated with. The context refers to the logical partitioning within a device. The context can be identified by a unique name in a device.')
clrRedStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 650, 1, 1, 3, 1, 9), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clrRedStorageType.setStatus('current')
if mibBuilder.loadTexts: clrRedStorageType.setDescription('The storage type for this conceptual row.')
clrRedRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 650, 1, 1, 3, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clrRedRowStatus.setStatus('current')
if mibBuilder.loadTexts: clrRedRowStatus.setDescription('This object is used for adding/deleting entries from the table. An entry MUST NOT exist in the active state unless all objects in the entry have an appropriate value, as described in the description clause for each writable object. This object may be modified if the associated instance of this object is equal to active(1), notInService(2), or notReady(3). All other writable objects may be modified if the associated instance of this object is equal to notInService(2) or notReady(3).')
clrRedundancyInfoTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 650, 1, 1, 4), )
if mibBuilder.loadTexts: clrRedundancyInfoTable.setStatus('current')
if mibBuilder.loadTexts: clrRedundancyInfoTable.setDescription('This table contains information on the devices that are part of redundancy group.')
clrRedundancyInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 650, 1, 1, 4, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-L4L7MODULE-REDUNDANCY-MIB", "clrRedGroupId"))
if mibBuilder.loadTexts: clrRedundancyInfoEntry.setStatus('current')
if mibBuilder.loadTexts: clrRedundancyInfoEntry.setDescription("An entry in redundancy information table. An entry will get created whenever an entry is created in clrRedundancyConfigTable. Each entry contains information such as priority, state and last time when the redundancy state got changed. The entPhysicalIndex specifies an entry in entPhysicalTable with entPhysicalClass representing the value of 'module'.")
clrRedundancyPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 650, 1, 1, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clrRedundancyPriority.setStatus('current')
if mibBuilder.loadTexts: clrRedundancyPriority.setDescription("The priority value of this redundancy entry. This value is same as the value configured in 'clrRedPriority' for a redundancy group.")
clrRedundancyState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 650, 1, 1, 4, 1, 2), CiscoL4L7RedState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clrRedundancyState.setStatus('current')
if mibBuilder.loadTexts: clrRedundancyState.setDescription('The current redundancy state.')
clrRedundancyStateChangeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 650, 1, 1, 4, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clrRedundancyStateChangeTime.setStatus('current')
if mibBuilder.loadTexts: clrRedundancyStateChangeTime.setDescription('The time of the last change in the current redundancy state.')
clrRedundancyIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 650, 1, 1, 4, 1, 4), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clrRedundancyIpAddressType.setStatus('current')
if mibBuilder.loadTexts: clrRedundancyIpAddressType.setDescription('The type of internet address by which this redundant device reachable.')
clrRedundancyIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 650, 1, 1, 4, 1, 5), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clrRedundancyIpAddress.setStatus('current')
if mibBuilder.loadTexts: clrRedundancyIpAddress.setDescription('This object identifies the Internet address by which this redundant device is reachable. The type of this address is determined by the value of the clrRedundancyIpAddressType object.')
clrLBStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 650, 1, 2, 1), )
if mibBuilder.loadTexts: clrLBStatsTable.setStatus('current')
if mibBuilder.loadTexts: clrLBStatsTable.setDescription('This table contains the load balance statistics related to a redundancy group.')
clrLBStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 650, 1, 2, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-L4L7MODULE-REDUNDANCY-MIB", "clrRedGroupId"))
if mibBuilder.loadTexts: clrLBStatsEntry.setStatus('current')
if mibBuilder.loadTexts: clrLBStatsEntry.setDescription('Each entry represents the load balance statistics applicable for a redundancy group. The entPhysicalIndex specifies the entry in entPhysicalTable. The entries will get created in this table by way of adding entries in clrRedundancyConfigTable. The entries will be deleted from this table by way of removing entries in clrRedundancyConfigTable.')
clrLBStatsSharedStickyEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 650, 1, 2, 1, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clrLBStatsSharedStickyEntries.setStatus('current')
if mibBuilder.loadTexts: clrLBStatsSharedStickyEntries.setDescription('This object indicates the number of sticky entries that the local device sent to the peer. Sticky entries is a LB configuration which allows multiple connections from the same client to be sent to the same server. Stickiness can be configured based on source IP address, HTTP cookies, SSL session ID ( for SSL traffic only ) , etc.')
clrLBStatsSentPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 650, 1, 2, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clrLBStatsSentPackets.setStatus('current')
if mibBuilder.loadTexts: clrLBStatsSentPackets.setDescription('This object contains the number of valid packets that the local device sent to the peer.')
clrLBStatsSendFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 650, 1, 2, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clrLBStatsSendFailures.setStatus('current')
if mibBuilder.loadTexts: clrLBStatsSendFailures.setDescription('This object contains the number of packets that the local device attempted to send to the peer, but failed.')
clrLBStatsDroppedEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 650, 1, 2, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clrLBStatsDroppedEntries.setStatus('current')
if mibBuilder.loadTexts: clrLBStatsDroppedEntries.setDescription('This object contains the number of sticky entries that the peer sent to the local device, but the local device discarded them.')
clrLBStatsReceivedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 650, 1, 2, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clrLBStatsReceivedPackets.setStatus('current')
if mibBuilder.loadTexts: clrLBStatsReceivedPackets.setDescription('This object contains the number of valid packets that the local device received from the peer.')
clrLBStatsReceiveFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 650, 1, 2, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clrLBStatsReceiveFailures.setStatus('current')
if mibBuilder.loadTexts: clrLBStatsReceiveFailures.setDescription('This object contains the number of packets that the peer sent to the local device, but the local device failed to receive them.')
clrHAStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 650, 1, 2, 2), )
if mibBuilder.loadTexts: clrHAStatsTable.setStatus('current')
if mibBuilder.loadTexts: clrHAStatsTable.setDescription('This table contains the statistics related to a redundant peer.')
clrHAStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 650, 1, 2, 2, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-L4L7MODULE-REDUNDANCY-MIB", "clrPeerId"))
if mibBuilder.loadTexts: clrHAStatsEntry.setStatus('current')
if mibBuilder.loadTexts: clrHAStatsEntry.setDescription('Each entry represents the statistics applicable for a redundant peer. The entPhysicalIndex specifies the entry in entPhysicalTable . The entries will get created in this table by way of adding entries in clrPeerConfigTable. The entries will be deleted from this table by way of removing entries in clrPeerConfigTable.')
clrHAStatsTxHeartBeatMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 650, 1, 2, 2, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clrHAStatsTxHeartBeatMsgs.setStatus('current')
if mibBuilder.loadTexts: clrHAStatsTxHeartBeatMsgs.setDescription('This object refers to the number of heart beat messages sent to the peer.')
clrHAStatsRxHeartBeatMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 650, 1, 2, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clrHAStatsRxHeartBeatMsgs.setStatus('current')
if mibBuilder.loadTexts: clrHAStatsRxHeartBeatMsgs.setDescription('This object refers to the number of heart beat messages received from the peer.')
clrHAStatsMissedHeartBeatMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 650, 1, 2, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clrHAStatsMissedHeartBeatMsgs.setStatus('current')
if mibBuilder.loadTexts: clrHAStatsMissedHeartBeatMsgs.setDescription('This object refers to the number of missed heart beat messages.')
clrHAStatsRxUniDirectionalHeartBeatMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 650, 1, 2, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clrHAStatsRxUniDirectionalHeartBeatMsgs.setStatus('current')
if mibBuilder.loadTexts: clrHAStatsRxUniDirectionalHeartBeatMsgs.setDescription('This object indicates that the heartbeat messages from a peer is unidirectional. That is, the peer cannot receive ( only send ) heartbeats.')
clrHAStatsHeartBeatTimeoutMismatches = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 650, 1, 2, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clrHAStatsHeartBeatTimeoutMismatches.setStatus('current')
if mibBuilder.loadTexts: clrHAStatsHeartBeatTimeoutMismatches.setDescription('Each HB packet contains the configured interval in the packet. When a peer receives a HB packet, it checks to see if the interval in the HB packet matches the interval configured locally. This object indicates the number of HB that the local device received from the remote peer with a mismatched HB interval.')
clrHAStatsPeerUpEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 650, 1, 2, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clrHAStatsPeerUpEvents.setStatus('current')
if mibBuilder.loadTexts: clrHAStatsPeerUpEvents.setDescription('This object contains the number of peer up messages that the local device sent to the remote peer.')
clrHAStatsPeerDownEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 650, 1, 2, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clrHAStatsPeerDownEvents.setStatus('current')
if mibBuilder.loadTexts: clrHAStatsPeerDownEvents.setDescription('This object contains the number of peer down messages that the local device sent to the remote peer.')
clrStateChangeNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 650, 1, 3, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clrStateChangeNotifEnabled.setStatus('current')
if mibBuilder.loadTexts: clrStateChangeNotifEnabled.setDescription("This object controls the generation of clrRedundancyStateChange notification. 'true' : Indicates that clrRedundancyStateChange notification is to be generated when the state changes. That is, notification generation is enabled. 'false' : Indicates that clrRedundancyStateChange notification generation is disabled.")
clrRedundancyStateChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 650, 0, 1)).setObjects(("CISCO-L4L7MODULE-REDUNDANCY-MIB", "clrRedState"), ("CISCO-L4L7MODULE-REDUNDANCY-MIB", "clrRedStateChangeTime"), ("CISCO-L4L7MODULE-REDUNDANCY-MIB", "clrRedPeerId"))
if mibBuilder.loadTexts: clrRedundancyStateChange.setStatus('current')
if mibBuilder.loadTexts: clrRedundancyStateChange.setDescription('The notification generated when the redundancy state is changed.')
ciscoLmRedundancyMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 650, 2, 1))
ciscoLmRedundancyMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 650, 2, 2))
ciscoLmRedundancyMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 650, 2, 1, 1)).setObjects(("CISCO-L4L7MODULE-REDUNDANCY-MIB", "clrPeerConfigGroup"), ("CISCO-L4L7MODULE-REDUNDANCY-MIB", "clrRedConfigGroup"), ("CISCO-L4L7MODULE-REDUNDANCY-MIB", "clrRedundancyStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLmRedundancyMIBCompliance = ciscoLmRedundancyMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: ciscoLmRedundancyMIBCompliance.setDescription('The compliance statement for entities which implement the L4L7 Switch Redundancy.')
clrPeerConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 650, 2, 2, 1)).setObjects(("CISCO-L4L7MODULE-REDUNDANCY-MIB", "clrPeerInterface"), ("CISCO-L4L7MODULE-REDUNDANCY-MIB", "clrPeerBackupInterface"), ("CISCO-L4L7MODULE-REDUNDANCY-MIB", "clrPeerHeartBeatTime"), ("CISCO-L4L7MODULE-REDUNDANCY-MIB", "clrPeerHeartBeatCount"), ("CISCO-L4L7MODULE-REDUNDANCY-MIB", "clrPeerOperStatus"), ("CISCO-L4L7MODULE-REDUNDANCY-MIB", "clrPeerIpAddressType"), ("CISCO-L4L7MODULE-REDUNDANCY-MIB", "clrPeerIpAddress"), ("CISCO-L4L7MODULE-REDUNDANCY-MIB", "clrPeerStorageType"), ("CISCO-L4L7MODULE-REDUNDANCY-MIB", "clrPeerRowStatus"), ("CISCO-L4L7MODULE-REDUNDANCY-MIB", "clrPeerSoftwareCompatibilty"), ("CISCO-L4L7MODULE-REDUNDANCY-MIB", "clrPeerLicenseCompatibility"), ("CISCO-L4L7MODULE-REDUNDANCY-MIB", "clrPeerRedGroups"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clrPeerConfigGroup = clrPeerConfigGroup.setStatus('current')
if mibBuilder.loadTexts: clrPeerConfigGroup.setDescription('This group contains the peer configuration objects.')
clrRedConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 650, 2, 2, 2)).setObjects(("CISCO-L4L7MODULE-REDUNDANCY-MIB", "clrRedPeerId"), ("CISCO-L4L7MODULE-REDUNDANCY-MIB", "clrRedPriority"), ("CISCO-L4L7MODULE-REDUNDANCY-MIB", "clrRedPreempt"), ("CISCO-L4L7MODULE-REDUNDANCY-MIB", "clrRedFailOverTime"), ("CISCO-L4L7MODULE-REDUNDANCY-MIB", "clrRedState"), ("CISCO-L4L7MODULE-REDUNDANCY-MIB", "clrRedStateChangeTime"), ("CISCO-L4L7MODULE-REDUNDANCY-MIB", "clrRedStorageType"), ("CISCO-L4L7MODULE-REDUNDANCY-MIB", "clrRedRowStatus"), ("CISCO-L4L7MODULE-REDUNDANCY-MIB", "clrRedContext"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clrRedConfigGroup = clrRedConfigGroup.setStatus('current')
if mibBuilder.loadTexts: clrRedConfigGroup.setDescription('This group contains the redundancy configuration objects.')
clrRedInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 650, 2, 2, 3)).setObjects(("CISCO-L4L7MODULE-REDUNDANCY-MIB", "clrRedundancyPriority"), ("CISCO-L4L7MODULE-REDUNDANCY-MIB", "clrRedundancyState"), ("CISCO-L4L7MODULE-REDUNDANCY-MIB", "clrRedundancyStateChangeTime"), ("CISCO-L4L7MODULE-REDUNDANCY-MIB", "clrRedundancyIpAddressType"), ("CISCO-L4L7MODULE-REDUNDANCY-MIB", "clrRedundancyIpAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clrRedInfoGroup = clrRedInfoGroup.setStatus('current')
if mibBuilder.loadTexts: clrRedInfoGroup.setDescription('This group contains the redundancy information objects.')
cslbxNotifControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 650, 2, 2, 4)).setObjects(("CISCO-L4L7MODULE-REDUNDANCY-MIB", "clrStateChangeNotifEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cslbxNotifControlGroup = cslbxNotifControlGroup.setStatus('current')
if mibBuilder.loadTexts: cslbxNotifControlGroup.setDescription('The collection of objects to control the notifications for state changed in a L4 redundancy configuration.')
cslbxNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 650, 2, 2, 5)).setObjects(("CISCO-L4L7MODULE-REDUNDANCY-MIB", "clrRedundancyStateChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cslbxNotifGroup = cslbxNotifGroup.setStatus('current')
if mibBuilder.loadTexts: cslbxNotifGroup.setDescription('This group contains the notifications related to redundancy.')
clrRedundancyStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 650, 2, 2, 6)).setObjects(("CISCO-L4L7MODULE-REDUNDANCY-MIB", "clrHAStatsTxHeartBeatMsgs"), ("CISCO-L4L7MODULE-REDUNDANCY-MIB", "clrHAStatsRxHeartBeatMsgs"), ("CISCO-L4L7MODULE-REDUNDANCY-MIB", "clrHAStatsMissedHeartBeatMsgs"), ("CISCO-L4L7MODULE-REDUNDANCY-MIB", "clrHAStatsRxUniDirectionalHeartBeatMsgs"), ("CISCO-L4L7MODULE-REDUNDANCY-MIB", "clrHAStatsHeartBeatTimeoutMismatches"), ("CISCO-L4L7MODULE-REDUNDANCY-MIB", "clrHAStatsPeerUpEvents"), ("CISCO-L4L7MODULE-REDUNDANCY-MIB", "clrHAStatsPeerDownEvents"), ("CISCO-L4L7MODULE-REDUNDANCY-MIB", "clrLBStatsSharedStickyEntries"), ("CISCO-L4L7MODULE-REDUNDANCY-MIB", "clrLBStatsSentPackets"), ("CISCO-L4L7MODULE-REDUNDANCY-MIB", "clrLBStatsSendFailures"), ("CISCO-L4L7MODULE-REDUNDANCY-MIB", "clrLBStatsDroppedEntries"), ("CISCO-L4L7MODULE-REDUNDANCY-MIB", "clrLBStatsReceivedPackets"), ("CISCO-L4L7MODULE-REDUNDANCY-MIB", "clrLBStatsReceiveFailures"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clrRedundancyStatsGroup = clrRedundancyStatsGroup.setStatus('current')
if mibBuilder.loadTexts: clrRedundancyStatsGroup.setDescription('This group contains objects related to redundant peer and load balacing statistics.')
mibBuilder.exportSymbols("CISCO-L4L7MODULE-REDUNDANCY-MIB", clrRedPreempt=clrRedPreempt, clrLBStatsReceivedPackets=clrLBStatsReceivedPackets, clrRedundancyInfoTable=clrRedundancyInfoTable, cslbxNotifGroup=cslbxNotifGroup, clrRedPriority=clrRedPriority, clrPeerStorageType=clrPeerStorageType, clrRedundancyStateChange=clrRedundancyStateChange, ciscoLmRedundancyMIBCompliances=ciscoLmRedundancyMIBCompliances, cslbxNotifControlGroup=cslbxNotifControlGroup, clrRedRowStatus=clrRedRowStatus, clrLBStatsSendFailures=clrLBStatsSendFailures, clrPeerConfigTable=clrPeerConfigTable, clrHAStatsPeerDownEvents=clrHAStatsPeerDownEvents, clrLBStatsDroppedEntries=clrLBStatsDroppedEntries, clrRedInfoGroup=clrRedInfoGroup, ciscoLmRedundancyMIBNotifs=ciscoLmRedundancyMIBNotifs, clrStats=clrStats, clrRedundancyConfigEntry=clrRedundancyConfigEntry, clrRedStateChangeTime=clrRedStateChangeTime, clrPeerSoftwareCompatibilty=clrPeerSoftwareCompatibilty, clrHAStatsRxHeartBeatMsgs=clrHAStatsRxHeartBeatMsgs, clrHAStatsHeartBeatTimeoutMismatches=clrHAStatsHeartBeatTimeoutMismatches, clrPeerOperStatus=clrPeerOperStatus, clrPeerRedGroups=clrPeerRedGroups, clrPeerBackupInterface=clrPeerBackupInterface, clrRedStorageType=clrRedStorageType, clrRedundancyState=clrRedundancyState, clrLBStatsTable=clrLBStatsTable, clrRedundancyInfoEntry=clrRedundancyInfoEntry, clrRedundancyIpAddress=clrRedundancyIpAddress, clrHAStatsRxUniDirectionalHeartBeatMsgs=clrHAStatsRxUniDirectionalHeartBeatMsgs, ciscoL4L7moduleRedundancyMIB=ciscoL4L7moduleRedundancyMIB, clrPeerConfigEntry=clrPeerConfigEntry, clrRedundancyIpAddressType=clrRedundancyIpAddressType, clrLBStatsEntry=clrLBStatsEntry, clrNotifObjects=clrNotifObjects, clrRedContext=clrRedContext, clrRedConfigGroup=clrRedConfigGroup, clrRedundancyStateChangeTime=clrRedundancyStateChangeTime, clrLBStatsReceiveFailures=clrLBStatsReceiveFailures, clrPeerHeartBeatTime=clrPeerHeartBeatTime, ciscoLmRedundancyMIBGroups=ciscoLmRedundancyMIBGroups, clrHAStatsEntry=clrHAStatsEntry, ciscoLmRedundancyMIBObjects=ciscoLmRedundancyMIBObjects, clrPeerRowStatus=clrPeerRowStatus, clrPeerIpAddress=clrPeerIpAddress, clrPeerHeartBeatCount=clrPeerHeartBeatCount, clrLBStatsSentPackets=clrLBStatsSentPackets, clrPeerLicenseCompatibility=clrPeerLicenseCompatibility, clrHAStatsPeerUpEvents=clrHAStatsPeerUpEvents, ciscoLmRedundancyMIBConformance=ciscoLmRedundancyMIBConformance, clrHAStatsTable=clrHAStatsTable, clrRedGroupId=clrRedGroupId, clrHAStatsMissedHeartBeatMsgs=clrHAStatsMissedHeartBeatMsgs, clrPeerInterface=clrPeerInterface, clrPeerConfigGroup=clrPeerConfigGroup, clrRedFailOverTime=clrRedFailOverTime, CiscoL4L7RedState=CiscoL4L7RedState, clrPeerInfoEntry=clrPeerInfoEntry, clrRedundancyConfigTable=clrRedundancyConfigTable, clrRedPeerId=clrRedPeerId, clrRedState=clrRedState, clrLBStatsSharedStickyEntries=clrLBStatsSharedStickyEntries, clrHAStatsTxHeartBeatMsgs=clrHAStatsTxHeartBeatMsgs, clrConfig=clrConfig, clrPeerIpAddressType=clrPeerIpAddressType, PYSNMP_MODULE_ID=ciscoL4L7moduleRedundancyMIB, clrRedundancyPriority=clrRedundancyPriority, clrPeerId=clrPeerId, clrPeerInfoTable=clrPeerInfoTable, clrRedundancyStatsGroup=clrRedundancyStatsGroup, ciscoLmRedundancyMIBCompliance=ciscoLmRedundancyMIBCompliance, clrStateChangeNotifEnabled=clrStateChangeNotifEnabled)
