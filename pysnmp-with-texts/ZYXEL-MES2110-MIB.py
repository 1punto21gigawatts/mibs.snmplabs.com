#
# PySNMP MIB module ZYXEL-MES2110-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ZYXEL-MES2110-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:50:49 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
enterprises, NotificationType, NotificationType, Bits, Gauge32, ObjectIdentity, ModuleIdentity, Counter64, Unsigned32, MibIdentifier, iso, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, IpAddress, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "enterprises", "NotificationType", "NotificationType", "Bits", "Gauge32", "ObjectIdentity", "ModuleIdentity", "Counter64", "Unsigned32", "MibIdentifier", "iso", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "IpAddress", "Counter32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
zyxel = MibIdentifier((1, 3, 6, 1, 4, 1, 890))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1))
accessSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5))
esSeries = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8))
mes2110_MIB = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 2110))
mes2110_SystemInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 2110, 1))
mes2110_Mgt = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 2110, 2))
mes2110_Port = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 2110, 3))
mes2110_Traps = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 2110, 4))
mes2110_SystemContact = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 2110, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mes2110_SystemContact.setStatus('mandatory')
if mibBuilder.loadTexts: mes2110_SystemContact.setDescription('The contact person of this system.')
mes2110_SystemName = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 2110, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mes2110_SystemName.setStatus('mandatory')
if mibBuilder.loadTexts: mes2110_SystemName.setDescription('The name of this system.')
mes2110_SystemLocation = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 2110, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mes2110_SystemLocation.setStatus('mandatory')
if mibBuilder.loadTexts: mes2110_SystemLocation.setDescription('The location of this system.')
mes2110_MgtSnmpVer = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 2110, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("v1", 1), ("v2c", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mes2110_MgtSnmpVer.setStatus('mandatory')
if mibBuilder.loadTexts: mes2110_MgtSnmpVer.setDescription('This object specifies the SNMP version(s) supported by the module.')
mes2110_MgtModPN = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 2110, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mes2110_MgtModPN.setStatus('mandatory')
if mibBuilder.loadTexts: mes2110_MgtModPN.setDescription('This object specifies the managemnt module part number.')
mes2110_MgtModSN = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 2110, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mes2110_MgtModSN.setStatus('mandatory')
if mibBuilder.loadTexts: mes2110_MgtModSN.setDescription('This object specifies the managemnt module serial number.')
mes2110_MgtModManuDate = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 2110, 2, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mes2110_MgtModManuDate.setStatus('mandatory')
if mibBuilder.loadTexts: mes2110_MgtModManuDate.setDescription('This object specifies the management module manufacture date.')
mes2110_MgtModRev = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 2110, 2, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mes2110_MgtModRev.setStatus('mandatory')
if mibBuilder.loadTexts: mes2110_MgtModRev.setDescription('This object specifies the managemnt module fireware revision number.')
mes2110_MgtModDesc = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 2110, 2, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mes2110_MgtModDesc.setStatus('mandatory')
if mibBuilder.loadTexts: mes2110_MgtModDesc.setDescription('This object describes the management module.')
communityStringRO = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 2110, 2, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: communityStringRO.setStatus('mandatory')
if mibBuilder.loadTexts: communityStringRO.setDescription('This is the community string required to authenticate a read access to all MIB objects except for the read-write objects.')
communityStringRW = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 2110, 2, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: communityStringRW.setStatus('mandatory')
if mibBuilder.loadTexts: communityStringRW.setDescription('This is the community string required to authenticate a read or write access to all MIB objects.')
defaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 2110, 2, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: defaultGateway.setStatus('mandatory')
if mibBuilder.loadTexts: defaultGateway.setDescription('This object specifies the default gateway address.')
interfaceIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 2110, 2, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: interfaceIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: interfaceIpAddress.setDescription('This object identifies the IP address of the MIB-II interface on the management module.')
interfaceSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 2110, 2, 11), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: interfaceSubnetMask.setStatus('mandatory')
if mibBuilder.loadTexts: interfaceSubnetMask.setDescription('This object specifies the subnet mask associated with the interface address of the module.')
mgtStp = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 2110, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgtStp.setStatus('mandatory')
if mibBuilder.loadTexts: mgtStp.setDescription('This object specifies the switch STP function.')
trapManagerTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 2110, 2, 13), )
if mibBuilder.loadTexts: trapManagerTable.setStatus('mandatory')
if mibBuilder.loadTexts: trapManagerTable.setDescription('This object contains the entries of Network Management Systems to which traps will be sent.')
trapManagerTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 2110, 2, 13, 1), ).setIndexNames((0, "ZYXEL-MES2110-MIB", "trapManagerIndex"))
if mibBuilder.loadTexts: trapManagerTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: trapManagerTableEntry.setDescription('This object specifies an entry in the trap manager table.')
trapManagerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 2110, 2, 13, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapManagerIndex.setStatus('mandatory')
trapManagerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 2110, 2, 13, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapManagerIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: trapManagerIpAddress.setDescription('This object specifies the IP address of the destination of a network management system to which traps will be sent.')
trapManagerName = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 2110, 2, 13, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapManagerName.setStatus('mandatory')
if mibBuilder.loadTexts: trapManagerName.setDescription('This object identifies the name of the destination of a network management system to which traps will be sent.')
trapManagerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 2110, 2, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapManagerStatus.setStatus('mandatory')
if mibBuilder.loadTexts: trapManagerStatus.setDescription('This object specifies a trap manager entry status in the trap manager table. (1) -- Enabled or (2) -- Disabled.')
mes2110_PortTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 2110, 3, 1), )
if mibBuilder.loadTexts: mes2110_PortTable.setStatus('mandatory')
if mibBuilder.loadTexts: mes2110_PortTable.setDescription('This object lists port entries on the mes2110 module.')
mes2110_PortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 2110, 3, 1, 1), ).setIndexNames((0, "ZYXEL-MES2110-MIB", "portIndex"))
if mibBuilder.loadTexts: mes2110_PortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mes2110_PortEntry.setDescription('This object specifies a port entry in the port table, mes2110_PortTable. The port entry contains the information about a single port.')
portIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 2110, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portIndex.setStatus('mandatory')
if mibBuilder.loadTexts: portIndex.setDescription('This object is the port index, which uniquely identifies a port. It ranges from 1 to the total port number.')
portName = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 2110, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portName.setStatus('mandatory')
if mibBuilder.loadTexts: portName.setDescription('This object specifies the user defined descriptive name for the port.')
portAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 2110, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4))).clone(namedValues=NamedValues(("disable", 1), ("enable", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: portAdminStatus.setDescription('This object specifies the port admin state. Setting this object to disable(1) disables the port. Setting this object to enable(4) enables the port.')
portLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 2110, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("down", 1), ("up", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portLinkStatus.setStatus('mandatory')
if mibBuilder.loadTexts: portLinkStatus.setDescription('This object indicates the link status attached to the port.')
portSpeedMode = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 2110, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("speed-10M", 1), ("speed-100M", 2), ("speed-1000M", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSpeedMode.setStatus('mandatory')
if mibBuilder.loadTexts: portSpeedMode.setDescription('This object specifies the speed of the port, 10M(1) or 100M(2) or 100M(3).')
portDuplexMode = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 2110, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("half", 1), ("full", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portDuplexMode.setStatus('mandatory')
if mibBuilder.loadTexts: portDuplexMode.setDescription('This object specifies the duplex mode of the port, half duplex(1) or full duplex(2).')
portAuto = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 2110, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portAuto.setStatus('mandatory')
if mibBuilder.loadTexts: portAuto.setDescription('This object specifies the auto negotiation status of the port.')
portFfc = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 2110, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portFfc.setStatus('mandatory')
if mibBuilder.loadTexts: portFfc.setDescription('This object specifies the force flow control status of a port.')
almColdStart = NotificationType((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 2110, 4) + (0,1))
if mibBuilder.loadTexts: almColdStart.setDescription('This trap is sent when the system is started from power down.')
almWarmStart = NotificationType((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 2110, 4) + (0,2))
if mibBuilder.loadTexts: almWarmStart.setDescription('This trap is sent when the system is reset.')
almLinkUp = NotificationType((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 2110, 4) + (0,3))
if mibBuilder.loadTexts: almLinkUp.setDescription("This trap is sent when the link associated with the port indexed 'portIndex' changes its 'portLinkStatus' from down(2) to up(1).")
almLinkDown = NotificationType((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 2110, 4) + (0,4))
if mibBuilder.loadTexts: almLinkDown.setDescription("This trap is sent when the link associated with the port indexed 'portIndex' changes its 'portLinkStatus' from up(1) to down(2).")
almConfChange = NotificationType((1, 3, 6, 1, 4, 1, 890, 1, 5, 8, 2110, 4) + (0,5))
if mibBuilder.loadTexts: almConfChange.setDescription('This trap is sent when the system configuration has been changed.')
mibBuilder.exportSymbols("ZYXEL-MES2110-MIB", mes2110_MgtSnmpVer=mes2110_MgtSnmpVer, portSpeedMode=portSpeedMode, communityStringRW=communityStringRW, portName=portName, trapManagerIpAddress=trapManagerIpAddress, accessSwitch=accessSwitch, mes2110_MgtModDesc=mes2110_MgtModDesc, mes2110_SystemInfo=mes2110_SystemInfo, trapManagerTable=trapManagerTable, trapManagerIndex=trapManagerIndex, mes2110_SystemContact=mes2110_SystemContact, portIndex=portIndex, communityStringRO=communityStringRO, portLinkStatus=portLinkStatus, esSeries=esSeries, mes2110_MgtModManuDate=mes2110_MgtModManuDate, mes2110_MgtModPN=mes2110_MgtModPN, mes2110_SystemName=mes2110_SystemName, trapManagerName=trapManagerName, almLinkDown=almLinkDown, mes2110_PortTable=mes2110_PortTable, almWarmStart=almWarmStart, mgtStp=mgtStp, trapManagerStatus=trapManagerStatus, zyxel=zyxel, mes2110_Port=mes2110_Port, almConfChange=almConfChange, almLinkUp=almLinkUp, portAuto=portAuto, mes2110_MgtModSN=mes2110_MgtModSN, trapManagerTableEntry=trapManagerTableEntry, mes2110_Traps=mes2110_Traps, mes2110_MIB=mes2110_MIB, defaultGateway=defaultGateway, portFfc=portFfc, products=products, almColdStart=almColdStart, mes2110_Mgt=mes2110_Mgt, portAdminStatus=portAdminStatus, mes2110_MgtModRev=mes2110_MgtModRev, interfaceIpAddress=interfaceIpAddress, mes2110_SystemLocation=mes2110_SystemLocation, mes2110_PortEntry=mes2110_PortEntry, portDuplexMode=portDuplexMode, interfaceSubnetMask=interfaceSubnetMask)
