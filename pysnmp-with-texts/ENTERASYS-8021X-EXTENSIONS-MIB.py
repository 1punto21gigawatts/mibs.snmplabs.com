#
# PySNMP MIB module ENTERASYS-8021X-EXTENSIONS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ENTERASYS-8021X-EXTENSIONS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:03:04 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint")
etsysModules, = mibBuilder.importSymbols("ENTERASYS-MIB-NAMES", "etsysModules")
PaeControlledPortStatus, PaeControlledPortControl, PaeControlledDirections = mibBuilder.importSymbols("IEEE8021-PAE-MIB", "PaeControlledPortStatus", "PaeControlledPortControl", "PaeControlledDirections")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
ObjectIdentity, Bits, ModuleIdentity, Unsigned32, Counter64, MibIdentifier, Integer32, IpAddress, NotificationType, TimeTicks, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Bits", "ModuleIdentity", "Unsigned32", "Counter64", "MibIdentifier", "Integer32", "IpAddress", "NotificationType", "TimeTicks", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Gauge32")
TruthValue, RowStatus, MacAddress, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "RowStatus", "MacAddress", "TextualConvention", "DisplayString")
etsys8021xExtensionsMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 5624, 1, 2, 18))
etsys8021xExtensionsMIB.setRevisions(('2003-11-21 16:23', '2002-03-07 20:10',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: etsys8021xExtensionsMIB.setRevisionsDescriptions(('Modifications to limit the number of stations that statistics are gathered for.', 'The initial version of this MIB module.',))
if mibBuilder.loadTexts: etsys8021xExtensionsMIB.setLastUpdated('200311211623Z')
if mibBuilder.loadTexts: etsys8021xExtensionsMIB.setOrganization('Enterasys Networks, Inc')
if mibBuilder.loadTexts: etsys8021xExtensionsMIB.setContactInfo('Postal: Enterasys Networks 50 Minuteman Rd. Andover, MA 01810-1008 USA Phone: +1 978 684 1000 E-mail: support@enterasys.com WWW: http://www.enterasys.com')
if mibBuilder.loadTexts: etsys8021xExtensionsMIB.setDescription("This MIB module defines a portion of the SNMP enterprise MIBs under Enterasys Networks' enterprise OID pertaining to IEEE 802.1X authentication. This MIB is designed to supplement and be used in connection with the standard IEEE 802.1X-2001 MIB. It provides a convenient way to retrieve authentication status for station- based access control. (Here, a MAC address is a much more natural table index than a port or interface number.)")
etsysDot1xExtensionsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 18, 1))
etsysDot1xSystemBranch = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 18, 1, 1))
etsysDot1xAuthenticatorBranch = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 18, 1, 2))
etsysDot1xSupplicantBranch = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 18, 1, 3))
etsysDot1xAuthStationBranch = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 18, 1, 2, 1))
etsysDot1xAuthStationTable = MibTable((1, 3, 6, 1, 4, 1, 5624, 1, 2, 18, 1, 2, 1, 1), )
if mibBuilder.loadTexts: etsysDot1xAuthStationTable.setStatus('current')
if mibBuilder.loadTexts: etsysDot1xAuthStationTable.setDescription('A table that contains basic status information for the Authenticator PAEs associated with station-based virtual ports.')
etsysDot1xAuthStationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5624, 1, 2, 18, 1, 2, 1, 1, 1), ).setIndexNames((0, "ENTERASYS-8021X-EXTENSIONS-MIB", "etsysDot1xAuthStationAddress"))
if mibBuilder.loadTexts: etsysDot1xAuthStationEntry.setStatus('current')
if mibBuilder.loadTexts: etsysDot1xAuthStationEntry.setDescription('Each conceptual row contains basic information about a station-based Authenticator PAE. The most natural label for such a PAE is the MAC address of the Supplicant that it manages, and that, in some sense, called the PAE into existence. So we index the table by the Supplicant MAC address.')
etsysDot1xAuthStationAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 18, 1, 2, 1, 1, 1, 1), MacAddress())
if mibBuilder.loadTexts: etsysDot1xAuthStationAddress.setStatus('current')
if mibBuilder.loadTexts: etsysDot1xAuthStationAddress.setDescription('The 48-bit IEEE media access control address of the Supplicant associated with the logical station-based access control port.')
etsysDot1xAuthStationPaePort = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 18, 1, 2, 1, 1, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysDot1xAuthStationPaePort.setStatus('current')
if mibBuilder.loadTexts: etsysDot1xAuthStationPaePort.setDescription('The dot1xPaePortNumber of the shared-media port that is associated with this Authenticator PAE.')
etsysDot1xAuthStationPaeState = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 18, 1, 2, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("initialize", 1), ("disconnected", 2), ("connecting", 3), ("authenticating", 4), ("authenticated", 5), ("aborting", 6), ("held", 7), ("forceAuth", 8), ("forceUnauth", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysDot1xAuthStationPaeState.setReference('IEEE 802.1X-2001 Section 9.4.1, Authenticator PAE state')
if mibBuilder.loadTexts: etsysDot1xAuthStationPaeState.setStatus('current')
if mibBuilder.loadTexts: etsysDot1xAuthStationPaeState.setDescription('The current value of the Authenticator PAE state machine.')
etsysDot1xAuthStationBackendAuthState = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 18, 1, 2, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("request", 1), ("response", 2), ("success", 3), ("fail", 4), ("timeout", 5), ("idle", 6), ("initialize", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysDot1xAuthStationBackendAuthState.setReference('IEEE 802.1X-2001 Section 9.4.1, Backend Authentication state')
if mibBuilder.loadTexts: etsysDot1xAuthStationBackendAuthState.setStatus('current')
if mibBuilder.loadTexts: etsysDot1xAuthStationBackendAuthState.setDescription('The current state of the Backend Authentication state machine.')
etsysDot1xAuthStationUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 18, 1, 2, 1, 1, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysDot1xAuthStationUserName.setReference('IEEE 802.1X-2001 Section 9.4.4, Session User Name')
if mibBuilder.loadTexts: etsysDot1xAuthStationUserName.setStatus('current')
if mibBuilder.loadTexts: etsysDot1xAuthStationUserName.setDescription('The User-Name representing the identity of the Supplicant PAE.')
etsysDot1xAuthConfigTable = MibTable((1, 3, 6, 1, 4, 1, 5624, 1, 2, 18, 1, 2, 1, 2), )
if mibBuilder.loadTexts: etsysDot1xAuthConfigTable.setStatus('current')
if mibBuilder.loadTexts: etsysDot1xAuthConfigTable.setDescription('A table that contains configuration objects for the Authenticator PAE associated with each station-based virtual port. Station-based configuration management poses several rather major inconveniences, including a large number of rows, rows indexed by MAC address (rather than by user), and rows that come and go. Port-level and Authentication-Server-based management are quite a bit more convenient. Thus, most of the objects in this table are read-only; a way to see how other settings have interacted if you need this information for troubleshooting purposes.')
etsysDot1xAuthConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5624, 1, 2, 18, 1, 2, 1, 2, 1), ).setIndexNames((0, "ENTERASYS-8021X-EXTENSIONS-MIB", "etsysDot1xAuthStationAddress"))
if mibBuilder.loadTexts: etsysDot1xAuthConfigEntry.setStatus('current')
if mibBuilder.loadTexts: etsysDot1xAuthConfigEntry.setDescription('Configuration information for a station-based Authenticator PAE.')
etsysDot1xAuthInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 18, 1, 2, 1, 2, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysDot1xAuthInitialize.setReference('IEEE 802.1X-2001 Section 9.6.1.2, Initialize Port')
if mibBuilder.loadTexts: etsysDot1xAuthInitialize.setStatus('current')
if mibBuilder.loadTexts: etsysDot1xAuthInitialize.setDescription('The initialization control for this Authenticator PAE. Setting this attribute to TRUE causes the PAE to be initialized. The attribute value reverts to FALSE once initialization has completed.')
etsysDot1xAuthReauthenticate = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 18, 1, 2, 1, 2, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysDot1xAuthReauthenticate.setReference('IEEE 802.1X-2001 Section 9.4.1.3 Reauthenticate')
if mibBuilder.loadTexts: etsysDot1xAuthReauthenticate.setStatus('current')
if mibBuilder.loadTexts: etsysDot1xAuthReauthenticate.setDescription('The reauthentication control for this Authenticator PAE. Setting this attribute to TRUE causes the Authenticator PAE state machine to reauthenticate the Supplicant. Setting this attribute FALSE has no effect. This attribute always returns FALSE when it is read.')
etsysDot1xAuthAdminControlledDirections = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 18, 1, 2, 1, 2, 1, 3), PaeControlledDirections()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysDot1xAuthAdminControlledDirections.setReference('IEEE 802.1X-2001 Section 9.4.1, Admin Control Mode')
if mibBuilder.loadTexts: etsysDot1xAuthAdminControlledDirections.setStatus('current')
if mibBuilder.loadTexts: etsysDot1xAuthAdminControlledDirections.setDescription('The current value of the administrative controlled directions parameter for the virtual port.')
etsysDot1xAuthOperControlledDirections = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 18, 1, 2, 1, 2, 1, 4), PaeControlledDirections()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysDot1xAuthOperControlledDirections.setReference('IEEE 802.1X-2001 Section 9.4.1, Oper Control Mode')
if mibBuilder.loadTexts: etsysDot1xAuthOperControlledDirections.setStatus('current')
if mibBuilder.loadTexts: etsysDot1xAuthOperControlledDirections.setDescription('The current value of the operational controlled directions parameter for the virtual port.')
etsysDot1xAuthAuthControlledPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 18, 1, 2, 1, 2, 1, 5), PaeControlledPortStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysDot1xAuthAuthControlledPortStatus.setReference('IEEE 802.1X-2001 Section 9.4.1, AuthControlledPortStatus')
if mibBuilder.loadTexts: etsysDot1xAuthAuthControlledPortStatus.setStatus('current')
if mibBuilder.loadTexts: etsysDot1xAuthAuthControlledPortStatus.setDescription('The current value of the controlled Port status parameter for the virtual port.')
etsysDot1xAuthAuthControlledPortControl = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 18, 1, 2, 1, 2, 1, 6), PaeControlledPortControl()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysDot1xAuthAuthControlledPortControl.setReference('IEEE 802.1X-2001 Section 9.4.1, AuthControlledPortControl')
if mibBuilder.loadTexts: etsysDot1xAuthAuthControlledPortControl.setStatus('current')
if mibBuilder.loadTexts: etsysDot1xAuthAuthControlledPortControl.setDescription('The current value of the controlled Port control parameter for the virtual port.')
etsysDot1xAuthQuietPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 18, 1, 2, 1, 2, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysDot1xAuthQuietPeriod.setReference('IEEE 802.1X-2001 Section 9.4.1, quietPeriod')
if mibBuilder.loadTexts: etsysDot1xAuthQuietPeriod.setStatus('current')
if mibBuilder.loadTexts: etsysDot1xAuthQuietPeriod.setDescription('The value, in seconds, of the quietPeriod constant currently in use by the Authenticator PAE state machine.')
etsysDot1xAuthTxPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 18, 1, 2, 1, 2, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysDot1xAuthTxPeriod.setReference('IEEE 802.1X-2001 Section 9.4.1, txPeriod')
if mibBuilder.loadTexts: etsysDot1xAuthTxPeriod.setStatus('current')
if mibBuilder.loadTexts: etsysDot1xAuthTxPeriod.setDescription('The value, in seconds, of the txPeriod constant currently in use by the Authenticator PAE state machine.')
etsysDot1xAuthSuppTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 18, 1, 2, 1, 2, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysDot1xAuthSuppTimeout.setReference('IEEE 802.1X-2001 Section 9.4.1, suppTimeout')
if mibBuilder.loadTexts: etsysDot1xAuthSuppTimeout.setStatus('current')
if mibBuilder.loadTexts: etsysDot1xAuthSuppTimeout.setDescription('The value, in seconds, of the suppTimeout constant currently in use by the Backend Authentication state machine.')
etsysDot1xAuthServerTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 18, 1, 2, 1, 2, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysDot1xAuthServerTimeout.setReference('IEEE 802.1X-2001 Section 9.4.1, serverTimeout')
if mibBuilder.loadTexts: etsysDot1xAuthServerTimeout.setStatus('current')
if mibBuilder.loadTexts: etsysDot1xAuthServerTimeout.setDescription('The value, in seconds, of the serverTimeout constant currently in use by the Backend Authentication state machine.')
etsysDot1xAuthMaxReq = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 18, 1, 2, 1, 2, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysDot1xAuthMaxReq.setReference('IEEE 802.1X-2001 Section 9.4.1, maxReq')
if mibBuilder.loadTexts: etsysDot1xAuthMaxReq.setStatus('current')
if mibBuilder.loadTexts: etsysDot1xAuthMaxReq.setDescription('The value of the maxReq constant currently in use by the Backend Authentication state machine.')
etsysDot1xAuthReAuthPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 18, 1, 2, 1, 2, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysDot1xAuthReAuthPeriod.setReference('IEEE 802.1X-2001 Section 9.4.1, reAuthPeriod')
if mibBuilder.loadTexts: etsysDot1xAuthReAuthPeriod.setStatus('current')
if mibBuilder.loadTexts: etsysDot1xAuthReAuthPeriod.setDescription('The value, in seconds, of the reAuthPeriod constant currently in use by the Reauthentication Timer state machine.')
etsysDot1xAuthReAuthEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 18, 1, 2, 1, 2, 1, 13), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysDot1xAuthReAuthEnabled.setReference('IEEE 802.1X-2001 Section 9.4.1, reAuthEnabled')
if mibBuilder.loadTexts: etsysDot1xAuthReAuthEnabled.setStatus('current')
if mibBuilder.loadTexts: etsysDot1xAuthReAuthEnabled.setDescription('The enable/disable control used by the Reauthentication Timer state machine (IEEE 802.1X-2001 Section 8.5.5.1).')
etsysDot1xAuthKeyTxEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 18, 1, 2, 1, 2, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysDot1xAuthKeyTxEnabled.setReference('IEEE 802.1X-2001 Section 9.4.1, keyTransmissionEnabled')
if mibBuilder.loadTexts: etsysDot1xAuthKeyTxEnabled.setStatus('current')
if mibBuilder.loadTexts: etsysDot1xAuthKeyTxEnabled.setDescription('The value of the keyTransmissionEnabled constant currently in use by the Authenticator PAE state machine.')
etsysDot1xAuthStatsTable = MibTable((1, 3, 6, 1, 4, 1, 5624, 1, 2, 18, 1, 2, 1, 3), )
if mibBuilder.loadTexts: etsysDot1xAuthStatsTable.setReference('IEEE 802.1X-2001 Section 9.4.2 Authenticator Statistics')
if mibBuilder.loadTexts: etsysDot1xAuthStatsTable.setStatus('current')
if mibBuilder.loadTexts: etsysDot1xAuthStatsTable.setDescription('A table that contains the statistics objects for the Authenticator PAE associated with each supplicant/station.')
etsysDot1xAuthStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5624, 1, 2, 18, 1, 2, 1, 3, 1), ).setIndexNames((0, "ENTERASYS-8021X-EXTENSIONS-MIB", "etsysDot1xAuthStationAddress"))
if mibBuilder.loadTexts: etsysDot1xAuthStatsEntry.setStatus('current')
if mibBuilder.loadTexts: etsysDot1xAuthStatsEntry.setDescription('The statistics information for an Authenticator PAE.')
etsysDot1xAuthEapolFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 18, 1, 2, 1, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysDot1xAuthEapolFramesRx.setReference('IEEE 802.1x Section 9.4.2, EAPOL frames received')
if mibBuilder.loadTexts: etsysDot1xAuthEapolFramesRx.setStatus('current')
if mibBuilder.loadTexts: etsysDot1xAuthEapolFramesRx.setDescription('The number of valid EAPOL frames of any type that have been received by this Authenticator.')
etsysDot1xAuthEapolFramesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 18, 1, 2, 1, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysDot1xAuthEapolFramesTx.setReference('IEEE 802.1X-2001 Section 9.4.2, EAPOL frames transmitted')
if mibBuilder.loadTexts: etsysDot1xAuthEapolFramesTx.setStatus('current')
if mibBuilder.loadTexts: etsysDot1xAuthEapolFramesTx.setDescription('The number of EAPOL frames of any type that have been transmitted by this Authenticator.')
etsysDot1xAuthEapolStartFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 18, 1, 2, 1, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysDot1xAuthEapolStartFramesRx.setReference('IEEE 802.1X-2001 Section 9.4.2, EAPOL Start frames received')
if mibBuilder.loadTexts: etsysDot1xAuthEapolStartFramesRx.setStatus('current')
if mibBuilder.loadTexts: etsysDot1xAuthEapolStartFramesRx.setDescription('The number of EAPOL Start frames that have been received by this Authenticator.')
etsysDot1xAuthEapolLogoffFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 18, 1, 2, 1, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysDot1xAuthEapolLogoffFramesRx.setReference('IEEE 802.1X-2001 Section 9.4.2, EAPOL Logoff frames received')
if mibBuilder.loadTexts: etsysDot1xAuthEapolLogoffFramesRx.setStatus('current')
if mibBuilder.loadTexts: etsysDot1xAuthEapolLogoffFramesRx.setDescription('The number of EAPOL Logoff frames that have been received by this Authenticator.')
etsysDot1xAuthEapolRespIdFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 18, 1, 2, 1, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysDot1xAuthEapolRespIdFramesRx.setReference('IEEE 802.1X-2001 Section 9.4.2, EAPOL Resp/Id frames received')
if mibBuilder.loadTexts: etsysDot1xAuthEapolRespIdFramesRx.setStatus('current')
if mibBuilder.loadTexts: etsysDot1xAuthEapolRespIdFramesRx.setDescription('The number of EAP Resp/Id frames that have been received by this Authenticator.')
etsysDot1xAuthEapolRespFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 18, 1, 2, 1, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysDot1xAuthEapolRespFramesRx.setReference('IEEE 802.1X-2001 Section 9.4.2, EAPOL Response frames received')
if mibBuilder.loadTexts: etsysDot1xAuthEapolRespFramesRx.setStatus('current')
if mibBuilder.loadTexts: etsysDot1xAuthEapolRespFramesRx.setDescription('The number of valid EAP Response frames (other than Resp/Id frames) that have been received by this Authenticator.')
etsysDot1xAuthEapolReqIdFramesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 18, 1, 2, 1, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysDot1xAuthEapolReqIdFramesTx.setReference('IEEE 802.1X-2001 Section 9.4.2, EAPOL Req/Id frames transmitted')
if mibBuilder.loadTexts: etsysDot1xAuthEapolReqIdFramesTx.setStatus('current')
if mibBuilder.loadTexts: etsysDot1xAuthEapolReqIdFramesTx.setDescription('The number of EAP Req/Id frames that have been transmitted by this Authenticator.')
etsysDot1xAuthEapolReqFramesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 18, 1, 2, 1, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysDot1xAuthEapolReqFramesTx.setReference('IEEE 802.1X-2001 Section 9.4.2, EAPOL Request frames transmitted')
if mibBuilder.loadTexts: etsysDot1xAuthEapolReqFramesTx.setStatus('current')
if mibBuilder.loadTexts: etsysDot1xAuthEapolReqFramesTx.setDescription('The number of EAP Request frames (other than Rq/Id frames) that have been transmitted by this Authenticator.')
etsysDot1xAuthInvalidEapolFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 18, 1, 2, 1, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysDot1xAuthInvalidEapolFramesRx.setReference('IEEE 802.1X-2001 Section 9.4.2, Invalid EAPOL frames received')
if mibBuilder.loadTexts: etsysDot1xAuthInvalidEapolFramesRx.setStatus('current')
if mibBuilder.loadTexts: etsysDot1xAuthInvalidEapolFramesRx.setDescription('The number of EAPOL frames that have been received by this Authenticator in which the frame type is not recognized.')
etsysDot1xAuthEapLengthErrorFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 18, 1, 2, 1, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysDot1xAuthEapLengthErrorFramesRx.setReference('IEEE 802.1X-2001 Section 9.4.2, EAP length error frames received')
if mibBuilder.loadTexts: etsysDot1xAuthEapLengthErrorFramesRx.setStatus('current')
if mibBuilder.loadTexts: etsysDot1xAuthEapLengthErrorFramesRx.setDescription('The number of EAPOL frames that have been received by this Authenticator in which the Packet Body Length field is invalid.')
etsysDot1xAuthLastEapolFrameVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 18, 1, 2, 1, 3, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysDot1xAuthLastEapolFrameVersion.setReference('IEEE 802.1x Section 9.4.2, Last EAPOL frame version')
if mibBuilder.loadTexts: etsysDot1xAuthLastEapolFrameVersion.setStatus('current')
if mibBuilder.loadTexts: etsysDot1xAuthLastEapolFrameVersion.setDescription('The protocol version number carried in the most recently received EAPOL frame.')
etsysDot1xAuthLastEapolFrameSource = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 18, 1, 2, 1, 3, 1, 12), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysDot1xAuthLastEapolFrameSource.setReference('IEEE 802.1x Section 9.4.2, Last EAPOL frame source')
if mibBuilder.loadTexts: etsysDot1xAuthLastEapolFrameSource.setStatus('deprecated')
if mibBuilder.loadTexts: etsysDot1xAuthLastEapolFrameSource.setDescription('The source MAC address carried in the most recently received EAPOL frame.')
etsysDot1xAuthDiagTable = MibTable((1, 3, 6, 1, 4, 1, 5624, 1, 2, 18, 1, 2, 1, 4), )
if mibBuilder.loadTexts: etsysDot1xAuthDiagTable.setReference('IEEE 802.1X-2001 Section 9.4.3 Authenticator Diagnostics')
if mibBuilder.loadTexts: etsysDot1xAuthDiagTable.setStatus('current')
if mibBuilder.loadTexts: etsysDot1xAuthDiagTable.setDescription('A table that contains the diagnostics objects for the Authenticator PAE associated with each Port. An entry appears in this table for each port that may authenticate access to itself.')
etsysDot1xAuthDiagEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5624, 1, 2, 18, 1, 2, 1, 4, 1), ).setIndexNames((0, "ENTERASYS-8021X-EXTENSIONS-MIB", "etsysDot1xAuthStationAddress"))
if mibBuilder.loadTexts: etsysDot1xAuthDiagEntry.setStatus('current')
if mibBuilder.loadTexts: etsysDot1xAuthDiagEntry.setDescription('The diagnostics information for an Authenticator PAE.')
etsysDot1xAuthEntersConnecting = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 18, 1, 2, 1, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysDot1xAuthEntersConnecting.setReference('IEEE 802.1X-2001 Sections 9.4.2, 8.5.4.2.1')
if mibBuilder.loadTexts: etsysDot1xAuthEntersConnecting.setStatus('current')
if mibBuilder.loadTexts: etsysDot1xAuthEntersConnecting.setDescription('Counts the number of times that the state machine transitions to the CONNECTING state from any other state.')
etsysDot1xAuthEapLogoffsWhileConnecting = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 18, 1, 2, 1, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysDot1xAuthEapLogoffsWhileConnecting.setReference('IEEE 802.1X-2001 Sections 9.4.2, 8.5.4.2.2')
if mibBuilder.loadTexts: etsysDot1xAuthEapLogoffsWhileConnecting.setStatus('current')
if mibBuilder.loadTexts: etsysDot1xAuthEapLogoffsWhileConnecting.setDescription('Counts the number of times that the state machine transitions from CONNECTING to DISCONNECTED as a result of receiving an EAPOL-Logoff message.')
etsysDot1xAuthEntersAuthenticating = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 18, 1, 2, 1, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysDot1xAuthEntersAuthenticating.setReference('IEEE 802.1X-2001 Sections 9.4.2, 8.5.4.2.3')
if mibBuilder.loadTexts: etsysDot1xAuthEntersAuthenticating.setStatus('current')
if mibBuilder.loadTexts: etsysDot1xAuthEntersAuthenticating.setDescription('Counts the number of times that the state machine transitions from CONNECTING to AUTHENTICATING, as a result of an EAP-Response/Identity message being received from the Supplicant.')
etsysDot1xAuthAuthSuccessWhileAuthenticating = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 18, 1, 2, 1, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysDot1xAuthAuthSuccessWhileAuthenticating.setReference('IEEE 802.1X-2001 Sections 9.4.2, 8.5.4.2.4')
if mibBuilder.loadTexts: etsysDot1xAuthAuthSuccessWhileAuthenticating.setStatus('current')
if mibBuilder.loadTexts: etsysDot1xAuthAuthSuccessWhileAuthenticating.setDescription('Counts the number of times that the state machine transitions from AUTHENTICATING to AUTHENTICATED, as a result of the Backend Authentication state machine indicating successful authentication of the Supplicant (authSuccess = TRUE).')
etsysDot1xAuthAuthTimeoutsWhileAuthenticating = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 18, 1, 2, 1, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysDot1xAuthAuthTimeoutsWhileAuthenticating.setReference('IEEE 802.1X-2001 Sections 9.4.2, 8.5.4.2.5')
if mibBuilder.loadTexts: etsysDot1xAuthAuthTimeoutsWhileAuthenticating.setStatus('current')
if mibBuilder.loadTexts: etsysDot1xAuthAuthTimeoutsWhileAuthenticating.setDescription('Counts the number of times that the state machine transitions from AUTHENTICATING to ABORTING, as a result of the Backend Authentication state machine indicating authentication timeout (authTimeout = TRUE).')
etsysDot1xAuthAuthFailWhileAuthenticating = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 18, 1, 2, 1, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysDot1xAuthAuthFailWhileAuthenticating.setReference('IEEE 802.1X-2001 Sections 9.4.2, 8.5.4.2.6')
if mibBuilder.loadTexts: etsysDot1xAuthAuthFailWhileAuthenticating.setStatus('current')
if mibBuilder.loadTexts: etsysDot1xAuthAuthFailWhileAuthenticating.setDescription('Counts the number of times that the state machine transitions from AUTHENTICATING to HELD, as a result of the Backend Authentication state machine indicating authentication failure (authFail = TRUE).')
etsysDot1xAuthAuthReauthsWhileAuthenticating = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 18, 1, 2, 1, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysDot1xAuthAuthReauthsWhileAuthenticating.setReference('IEEE 802.1X-2001 Sections 9.4.2, 8.5.4.2.7')
if mibBuilder.loadTexts: etsysDot1xAuthAuthReauthsWhileAuthenticating.setStatus('current')
if mibBuilder.loadTexts: etsysDot1xAuthAuthReauthsWhileAuthenticating.setDescription('Counts the number of times that the state machine transitions from AUTHENTICATING to ABORTING, as a result of a reauthentication request (reAuthenticate = TRUE).')
etsysDot1xAuthAuthEapStartsWhileAuthenticating = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 18, 1, 2, 1, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysDot1xAuthAuthEapStartsWhileAuthenticating.setReference('IEEE 802.1X-2001 Sections 9.4.2, 8.5.4.2.8')
if mibBuilder.loadTexts: etsysDot1xAuthAuthEapStartsWhileAuthenticating.setStatus('current')
if mibBuilder.loadTexts: etsysDot1xAuthAuthEapStartsWhileAuthenticating.setDescription('Counts the number of times that the state machine transitions from AUTHENTICATING to ABORTING, as a result of an EAPOL-Start message being received from the Supplicant.')
etsysDot1xAuthAuthEapLogoffWhileAuthenticating = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 18, 1, 2, 1, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysDot1xAuthAuthEapLogoffWhileAuthenticating.setReference('IEEE 802.1X-2001 Sections 9.4.2, 8.5.4.2.9')
if mibBuilder.loadTexts: etsysDot1xAuthAuthEapLogoffWhileAuthenticating.setStatus('current')
if mibBuilder.loadTexts: etsysDot1xAuthAuthEapLogoffWhileAuthenticating.setDescription('Counts the number of times that the state machine transitions from AUTHENTICATING to ABORTING, as a result of an EAPOL-Logoff message being received from the Supplicant.')
etsysDot1xAuthAuthReauthsWhileAuthenticated = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 18, 1, 2, 1, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysDot1xAuthAuthReauthsWhileAuthenticated.setReference('IEEE 802.1X-2001 Sections 9.4.2, 8.5.4.2.10')
if mibBuilder.loadTexts: etsysDot1xAuthAuthReauthsWhileAuthenticated.setStatus('current')
if mibBuilder.loadTexts: etsysDot1xAuthAuthReauthsWhileAuthenticated.setDescription('Counts the number of times that the state machine transitions from AUTHENTICATED to CONNECTING, as a result of a reauthentication request (reAuthenticate = TRUE).')
etsysDot1xAuthAuthEapStartsWhileAuthenticated = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 18, 1, 2, 1, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysDot1xAuthAuthEapStartsWhileAuthenticated.setReference('IEEE 802.1X-2001 Sections 9.4.2, 8.5.4.2.11')
if mibBuilder.loadTexts: etsysDot1xAuthAuthEapStartsWhileAuthenticated.setStatus('current')
if mibBuilder.loadTexts: etsysDot1xAuthAuthEapStartsWhileAuthenticated.setDescription('Counts the number of times that the state machine transitions from AUTHENTICATED to CONNECTING, as a result of an EAPOL-Start message being received from the Supplicant.')
etsysDot1xAuthAuthEapLogoffWhileAuthenticated = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 18, 1, 2, 1, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysDot1xAuthAuthEapLogoffWhileAuthenticated.setReference('IEEE 802.1X-2001 Sections 9.4.2, 8.5.4.2.12')
if mibBuilder.loadTexts: etsysDot1xAuthAuthEapLogoffWhileAuthenticated.setStatus('current')
if mibBuilder.loadTexts: etsysDot1xAuthAuthEapLogoffWhileAuthenticated.setDescription('Counts the number of times that the state machine transitions from AUTHENTICATED to DISCONNECTED, as a result of an EAPOL-Logoff message being received from the Supplicant.')
etsysDot1xAuthBackendResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 18, 1, 2, 1, 4, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysDot1xAuthBackendResponses.setReference('IEEE 802.1X-2001 Sections 9.4.2, 8.5.6.2.1')
if mibBuilder.loadTexts: etsysDot1xAuthBackendResponses.setStatus('current')
if mibBuilder.loadTexts: etsysDot1xAuthBackendResponses.setDescription('Counts the number of times that the state machine sends an initial Access-Request packet to the Authentication server (i.e., executes sendRespToServer on entry to the RESPONSE state). Indicates that the Authenticator attempted communication with the Authentication Server.')
etsysDot1xAuthBackendAccessChallenges = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 18, 1, 2, 1, 4, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysDot1xAuthBackendAccessChallenges.setReference('IEEE 802.1X-2001 Sections 9.4.2, 8.5.6.2.2')
if mibBuilder.loadTexts: etsysDot1xAuthBackendAccessChallenges.setStatus('current')
if mibBuilder.loadTexts: etsysDot1xAuthBackendAccessChallenges.setDescription('Counts the number of times that the state machine receives an initial Access-Challenge packet from the Authentication server (i.e., aReq becomes TRUE, causing exit from the RESPONSE state). Indicates that the Authentication Server has communication with the Authenticator.')
etsysDot1xAuthBackendOtherRequestsToSupplicant = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 18, 1, 2, 1, 4, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysDot1xAuthBackendOtherRequestsToSupplicant.setReference('IEEE 802.1X-2001 Sections 9.4.2, 8.5.6.2.3')
if mibBuilder.loadTexts: etsysDot1xAuthBackendOtherRequestsToSupplicant.setStatus('current')
if mibBuilder.loadTexts: etsysDot1xAuthBackendOtherRequestsToSupplicant.setDescription('Counts the number of times that the state machine sends an EAP-Request packet (other than an Identity, Notification, Failure or Success message) to the Supplicant (i.e., executes txReq on entry to the REQUEST state). Indicates that the Authenticator chose an EAP-method.')
etsysDot1xAuthBackendNonNakResponsesFromSupplicant = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 18, 1, 2, 1, 4, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysDot1xAuthBackendNonNakResponsesFromSupplicant.setReference('IEEE 802.1X-2001 Sections 9.4.2, 8.5.6.2.4')
if mibBuilder.loadTexts: etsysDot1xAuthBackendNonNakResponsesFromSupplicant.setStatus('current')
if mibBuilder.loadTexts: etsysDot1xAuthBackendNonNakResponsesFromSupplicant.setDescription("Counts the number of times that the state machine receives a response from the Supplicant to an initial EAP-Request, and the response is something other than EAP-NAK (i.e., rxResp becomes TRUE, causing the state machine to transition from REQUEST to RESPONSE, and the response is not an EAP-NAK). Indicates that the Supplicant can respond to the Authenticator's chosen EAP-method.")
etsysDot1xAuthBackendAuthSuccesses = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 18, 1, 2, 1, 4, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysDot1xAuthBackendAuthSuccesses.setReference('IEEE 802.1X-2001 Sections 9.4.2, 8.5.6.2.5')
if mibBuilder.loadTexts: etsysDot1xAuthBackendAuthSuccesses.setStatus('current')
if mibBuilder.loadTexts: etsysDot1xAuthBackendAuthSuccesses.setDescription('Counts the number of times that the state machine receives an EAP-Success message from the Authentication Server (i.e., aSuccess becomes TRUE, causing a transition from RESPONSE to SUCCESS). Indicates that the Supplicant has successfully authenticated to the Authentication Server.')
etsysDot1xAuthBackendAuthFails = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 18, 1, 2, 1, 4, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysDot1xAuthBackendAuthFails.setReference('IEEE 802.1X-2001 Sections 9.4.2, 8.5.6.2.6')
if mibBuilder.loadTexts: etsysDot1xAuthBackendAuthFails.setStatus('current')
if mibBuilder.loadTexts: etsysDot1xAuthBackendAuthFails.setDescription('Counts the number of times that the state machine receives an EAP-Failure message from the Authentication Server (i.e., aFail becomes TRUE, causing a transition from RESPONSE to FAIL). Indicates that the Supplicant has not authenticated to the Authentication Server.')
etsysDot1xAuthSessionStatsTable = MibTable((1, 3, 6, 1, 4, 1, 5624, 1, 2, 18, 1, 2, 1, 5), )
if mibBuilder.loadTexts: etsysDot1xAuthSessionStatsTable.setReference('IEEE 802.1X-2001 Section 9.4.4')
if mibBuilder.loadTexts: etsysDot1xAuthSessionStatsTable.setStatus('current')
if mibBuilder.loadTexts: etsysDot1xAuthSessionStatsTable.setDescription('A table that contains the session statistics objects for the Authenticator PAE associated with each supplicant. An entry appears in this table for each supplicant.')
etsysDot1xAuthSessionStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5624, 1, 2, 18, 1, 2, 1, 5, 1), ).setIndexNames((0, "ENTERASYS-8021X-EXTENSIONS-MIB", "etsysDot1xAuthStationAddress"))
if mibBuilder.loadTexts: etsysDot1xAuthSessionStatsEntry.setStatus('current')
if mibBuilder.loadTexts: etsysDot1xAuthSessionStatsEntry.setDescription('The session statistics information for an Authenticator PAE. This shows the current values being collected for each session that is still in progress.')
etsysDot1xAuthSessionOctetsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 18, 1, 2, 1, 5, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysDot1xAuthSessionOctetsRx.setReference('IEEE 802.1X-2001 Section 9.4.4, Session Octets Received')
if mibBuilder.loadTexts: etsysDot1xAuthSessionOctetsRx.setStatus('current')
if mibBuilder.loadTexts: etsysDot1xAuthSessionOctetsRx.setDescription('The number of octets received in user data frames from the supplicant PAE during the session.')
etsysDot1xAuthSessionOctetsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 18, 1, 2, 1, 5, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysDot1xAuthSessionOctetsTx.setReference('IEEE 802.1X-2001 Section 9.4.4, Session Octets Transmitted')
if mibBuilder.loadTexts: etsysDot1xAuthSessionOctetsTx.setStatus('current')
if mibBuilder.loadTexts: etsysDot1xAuthSessionOctetsTx.setDescription('The number of octets transmitted in user data frames to the supplicant PAE during the session.')
etsysDot1xAuthSessionFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 18, 1, 2, 1, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysDot1xAuthSessionFramesRx.setReference('IEEE 802.1X-2001 Section 9.4.4, Session Frames Received')
if mibBuilder.loadTexts: etsysDot1xAuthSessionFramesRx.setStatus('current')
if mibBuilder.loadTexts: etsysDot1xAuthSessionFramesRx.setDescription('The number of user data frames received from the supplicant PAE during the session.')
etsysDot1xAuthSessionFramesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 18, 1, 2, 1, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysDot1xAuthSessionFramesTx.setReference('IEEE 802.1X-2001 Section 9.4.4, Session Frames Transmitted')
if mibBuilder.loadTexts: etsysDot1xAuthSessionFramesTx.setStatus('current')
if mibBuilder.loadTexts: etsysDot1xAuthSessionFramesTx.setDescription('The number of user data frames transmitted to the supplicant PAE during the session.')
etsysDot1xAuthSessionId = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 18, 1, 2, 1, 5, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysDot1xAuthSessionId.setReference('IEEE 802.1X-2001 Section 9.4.4, Session Identifier')
if mibBuilder.loadTexts: etsysDot1xAuthSessionId.setStatus('current')
if mibBuilder.loadTexts: etsysDot1xAuthSessionId.setDescription('A unique identifier for the session, in the form of a printable ASCII string of at least three characters.')
etsysDot1xAuthSessionAuthenticMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 18, 1, 2, 1, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("remoteAuthServer", 1), ("localAuthServer", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysDot1xAuthSessionAuthenticMethod.setReference('IEEE 802.1X-2001 Section 9.4.4, Session Authentication Method')
if mibBuilder.loadTexts: etsysDot1xAuthSessionAuthenticMethod.setStatus('current')
if mibBuilder.loadTexts: etsysDot1xAuthSessionAuthenticMethod.setDescription('The authentication method used to establish the session.')
etsysDot1xAuthSessionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 18, 1, 2, 1, 5, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysDot1xAuthSessionTime.setReference('IEEE 802.1X-2001 Section 9.4.4, Session Time')
if mibBuilder.loadTexts: etsysDot1xAuthSessionTime.setStatus('current')
if mibBuilder.loadTexts: etsysDot1xAuthSessionTime.setDescription('The duration of the session in seconds.')
etsysDot1xAuthSessionTerminateCause = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 18, 1, 2, 1, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 999))).clone(namedValues=NamedValues(("supplicantLogoff", 1), ("portFailure", 2), ("supplicantRestart", 3), ("reauthFailed", 4), ("authControlForceUnauth", 5), ("portReInit", 6), ("portAdminDisabled", 7), ("notTerminatedYet", 999)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysDot1xAuthSessionTerminateCause.setReference('IEEE 802.1X-2001 Section 9.4.4, Session Terminate Cause')
if mibBuilder.loadTexts: etsysDot1xAuthSessionTerminateCause.setStatus('current')
if mibBuilder.loadTexts: etsysDot1xAuthSessionTerminateCause.setDescription('The reason for the session termination.')
etsysDot1xAuthStatsSupported = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 18, 1, 2, 1, 6), Bits().clone(namedValues=NamedValues(("etsysDot1xAuthEapolFramesRxSupported", 0), ("etsysDot1xAuthEapolFramesTxSupported", 1), ("etsysDot1xAuthEapolStartFramesRxSupported", 2), ("etsysDot1xAuthEapolLogoffFramesRxSupported", 3), ("etsysDot1xAuthEapolRespIdFramesRxSupported", 4), ("etsysDot1xAuthEapolRespFramesRxSupported", 5), ("etsysDot1xAuthEapolReqIdFramesTxSupported", 6), ("etsysDot1xAuthEapolReqFramesTxSupported", 7), ("etsysDot1xAuthInvalidEapolFramesRxSupported", 8), ("etsysDot1xAuthEapLengthErrorFramesRxSupported", 9), ("etsysDot1xAuthLastEapolFrameVersionSupported", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysDot1xAuthStatsSupported.setStatus('current')
if mibBuilder.loadTexts: etsysDot1xAuthStatsSupported.setDescription('Defines the objects supported in the Authenticator Statistics Table.')
etsysDot1xAuthDiagSupported = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 18, 1, 2, 1, 7), Bits().clone(namedValues=NamedValues(("etsysDot1xAuthEntersConnectingSupported", 0), ("etsysDot1xAuthEapLogoffsWhileConnectingSupported", 1), ("etsysDot1xAuthEntersAuthenticatingSupported", 2), ("etsysDot1xAuthAuthSuccessWhileAuthenticatingSupported", 3), ("etsysDot1xAuthAuthTimeoutsWhileAuthenticatingSupported", 4), ("etsysDot1xAuthAuthFailWhileAuthenticatingSupported", 5), ("etsysDot1xAuthAuthReauthsWhileAuthenticatingSupported", 6), ("etsysDot1xAuthAuthEapStartsWhileAuthenticatingSupported", 7), ("etsysDot1xAuthAuthEapLogoffWhileAuthenticatingSupported", 8), ("etsysDot1xAuthAuthReauthsWhileAuthenticatedSupported", 9), ("etsysDot1xAuthAuthEapStartsWhileAuthenticatedSupported", 10), ("etsysDot1xAuthAuthEapLogoffWhileAuthenticatedSupported", 11), ("etsysDot1xAuthBackendResponsesSupported", 12), ("etsysDot1xAuthBackendAccessChallengesSupported", 13), ("etsysDot1xAuthBackendOtherRequestsToSupplicantSupported", 14), ("etsysDot1xAuthBackendNonNakResponsesFromSupplicantSupported", 15), ("etsysDot1xAuthBackendAuthSuccessesSupported", 16), ("etsysDot1xAuthBackendAuthFailsSupported", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysDot1xAuthDiagSupported.setStatus('current')
if mibBuilder.loadTexts: etsysDot1xAuthDiagSupported.setDescription('Defines the objects supported in the Authenticator Diagnostics Table.')
etsysDot1xAuthSessionSuppportedObjs = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 18, 1, 2, 1, 8), Bits().clone(namedValues=NamedValues(("etsysDot1xAuthSessionOctetsRxSupported", 0), ("etsysDot1xAuthSessionOctetsTxSupported", 1), ("etsysDot1xAuthSessionFramesRxSupported", 2), ("etsysDot1xAuthSessionFramesTxSupported", 3), ("etsysDot1xAuthSessionIdSupported", 4), ("etsysDot1xAuthSessionAuthenticMethodSupported", 5), ("etsysDot1xAuthSessionTimeSupported", 6), ("etsysDot1xAuthSessionTerminateCauseSupported", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysDot1xAuthSessionSuppportedObjs.setStatus('current')
if mibBuilder.loadTexts: etsysDot1xAuthSessionSuppportedObjs.setDescription('Defines the objects supported in the Authenticator Session Statistics Table.')
etsysDot1xMaxCapableAuthStations = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 18, 1, 2, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysDot1xMaxCapableAuthStations.setStatus('current')
if mibBuilder.loadTexts: etsysDot1xMaxCapableAuthStations.setDescription('The maximum number of stations this device can authenticate.')
etsysDot1xMaximumStationsStatsGathered = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 18, 1, 2, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysDot1xMaximumStationsStatsGathered.setStatus('current')
if mibBuilder.loadTexts: etsysDot1xMaximumStationsStatsGathered.setDescription('The maximum number of stations that this device can gather statistics, diagnostics, and session statistics for.')
etsysDot1xCurrentStationsStatsGathered = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 18, 1, 2, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysDot1xCurrentStationsStatsGathered.setStatus('current')
if mibBuilder.loadTexts: etsysDot1xCurrentStationsStatsGathered.setDescription('The number of stations that this device is currently gathering statistics, diagnostics, and session statistics for.')
etsysDot1xAuthStationWatchTable = MibTable((1, 3, 6, 1, 4, 1, 5624, 1, 2, 18, 1, 2, 1, 12), )
if mibBuilder.loadTexts: etsysDot1xAuthStationWatchTable.setStatus('current')
if mibBuilder.loadTexts: etsysDot1xAuthStationWatchTable.setDescription("A table containing the MAC addresses of stations that statistics, diagnostics, and session statistics will be kept for. This table's existence is due to the realization that devices may not have the resources to keep all of this data for all the authenticated stations; however, there is a need when debugging a network for these statistics. This compromise solution allows the network administrator to pick which stations to collect data for. If the maximum number of stations this device can collect data for is equal to the maximum number of stations the device can authenticate than this table has no effect or meaning. If the maximum number of stations this device can collect data for is 0 then this table has no effect or meaning. Please note: even though a station may be placed into the watch table, the statistics and diagnostic information that is acquired is ultimately determined by the device's capability to acquire that data. The statistics, diagnostics, and session statistics tables all have a read only object that allow the network administrator to determine what information the device can acquire.")
etsysDot1xAuthStationWatchEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5624, 1, 2, 18, 1, 2, 1, 12, 1), ).setIndexNames((0, "ENTERASYS-8021X-EXTENSIONS-MIB", "etsysDot1xAuthInfoStationAddress"))
if mibBuilder.loadTexts: etsysDot1xAuthStationWatchEntry.setStatus('current')
if mibBuilder.loadTexts: etsysDot1xAuthStationWatchEntry.setDescription('Each row contains the MAC address of a station that statistics, diagnostics, and session statistics will be kept for.')
etsysDot1xAuthInfoStationAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 18, 1, 2, 1, 12, 1, 1), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysDot1xAuthInfoStationAddress.setStatus('current')
if mibBuilder.loadTexts: etsysDot1xAuthInfoStationAddress.setDescription('The MAC address of a station that statistics, diagnostics, and session statistics will be kept for.')
etsysDot1xAuthInfoStationRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 18, 1, 2, 1, 12, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysDot1xAuthInfoStationRowStatus.setStatus('current')
if mibBuilder.loadTexts: etsysDot1xAuthInfoStationRowStatus.setDescription("A control that allows entries to be added, activated, deactivated, and removed from this table. When the value of this object is 'active' none of the other objects in this conceptual row can be modified. Setting this object to the 'active' state from the 'notInService' state will cause the collection of the above described statistics. Setting this object to any other valid state from the 'active' state will cause the collection of the above described statistics to stop. Setting this object to the 'active' state from the 'active' state will not have any affect. Conceptual rows that have been in the 'notInService' state for more than a device specific time period MAY be destroyed by the managed entity.")
etsysDot1xConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 18, 2))
etsysDot1xGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 18, 2, 1))
etsysDot1xCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 18, 2, 2))
etsysDot1xAuthStationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5624, 1, 2, 18, 2, 1, 1)).setObjects(("ENTERASYS-8021X-EXTENSIONS-MIB", "etsysDot1xAuthStationPaePort"), ("ENTERASYS-8021X-EXTENSIONS-MIB", "etsysDot1xAuthStationPaeState"), ("ENTERASYS-8021X-EXTENSIONS-MIB", "etsysDot1xAuthStationBackendAuthState"), ("ENTERASYS-8021X-EXTENSIONS-MIB", "etsysDot1xAuthStationUserName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysDot1xAuthStationGroup = etsysDot1xAuthStationGroup.setStatus('current')
if mibBuilder.loadTexts: etsysDot1xAuthStationGroup.setDescription('A collection of objects providing basic status information about Authenticator PAEs running on ports that use station-based access control.')
etsysDot1xAuthConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5624, 1, 2, 18, 2, 1, 2)).setObjects(("ENTERASYS-8021X-EXTENSIONS-MIB", "etsysDot1xAuthInitialize"), ("ENTERASYS-8021X-EXTENSIONS-MIB", "etsysDot1xAuthReauthenticate"), ("ENTERASYS-8021X-EXTENSIONS-MIB", "etsysDot1xAuthAdminControlledDirections"), ("ENTERASYS-8021X-EXTENSIONS-MIB", "etsysDot1xAuthOperControlledDirections"), ("ENTERASYS-8021X-EXTENSIONS-MIB", "etsysDot1xAuthAuthControlledPortStatus"), ("ENTERASYS-8021X-EXTENSIONS-MIB", "etsysDot1xAuthAuthControlledPortControl"), ("ENTERASYS-8021X-EXTENSIONS-MIB", "etsysDot1xAuthQuietPeriod"), ("ENTERASYS-8021X-EXTENSIONS-MIB", "etsysDot1xAuthTxPeriod"), ("ENTERASYS-8021X-EXTENSIONS-MIB", "etsysDot1xAuthSuppTimeout"), ("ENTERASYS-8021X-EXTENSIONS-MIB", "etsysDot1xAuthServerTimeout"), ("ENTERASYS-8021X-EXTENSIONS-MIB", "etsysDot1xAuthMaxReq"), ("ENTERASYS-8021X-EXTENSIONS-MIB", "etsysDot1xAuthReAuthPeriod"), ("ENTERASYS-8021X-EXTENSIONS-MIB", "etsysDot1xAuthReAuthEnabled"), ("ENTERASYS-8021X-EXTENSIONS-MIB", "etsysDot1xAuthKeyTxEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysDot1xAuthConfigGroup = etsysDot1xAuthConfigGroup.setStatus('current')
if mibBuilder.loadTexts: etsysDot1xAuthConfigGroup.setDescription('A collection of objects providing configuration information about Authenticator PAEs running on ports that use station- based access control.')
etsysDot1xAuthStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5624, 1, 2, 18, 2, 1, 3)).setObjects(("ENTERASYS-8021X-EXTENSIONS-MIB", "etsysDot1xAuthEapolFramesRx"), ("ENTERASYS-8021X-EXTENSIONS-MIB", "etsysDot1xAuthEapolFramesTx"), ("ENTERASYS-8021X-EXTENSIONS-MIB", "etsysDot1xAuthEapolStartFramesRx"), ("ENTERASYS-8021X-EXTENSIONS-MIB", "etsysDot1xAuthEapolLogoffFramesRx"), ("ENTERASYS-8021X-EXTENSIONS-MIB", "etsysDot1xAuthEapolRespIdFramesRx"), ("ENTERASYS-8021X-EXTENSIONS-MIB", "etsysDot1xAuthEapolRespFramesRx"), ("ENTERASYS-8021X-EXTENSIONS-MIB", "etsysDot1xAuthEapolReqIdFramesTx"), ("ENTERASYS-8021X-EXTENSIONS-MIB", "etsysDot1xAuthEapolReqFramesTx"), ("ENTERASYS-8021X-EXTENSIONS-MIB", "etsysDot1xAuthInvalidEapolFramesRx"), ("ENTERASYS-8021X-EXTENSIONS-MIB", "etsysDot1xAuthEapLengthErrorFramesRx"), ("ENTERASYS-8021X-EXTENSIONS-MIB", "etsysDot1xAuthLastEapolFrameVersion"), ("ENTERASYS-8021X-EXTENSIONS-MIB", "etsysDot1xAuthLastEapolFrameSource"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysDot1xAuthStatsGroup = etsysDot1xAuthStatsGroup.setStatus('current')
if mibBuilder.loadTexts: etsysDot1xAuthStatsGroup.setDescription('A collection of objects providing statistics about Authenticator PAEs running on ports that use station- based access control.')
etsysDot1xAuthDiagGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5624, 1, 2, 18, 2, 1, 4)).setObjects(("ENTERASYS-8021X-EXTENSIONS-MIB", "etsysDot1xAuthEntersConnecting"), ("ENTERASYS-8021X-EXTENSIONS-MIB", "etsysDot1xAuthEapLogoffsWhileConnecting"), ("ENTERASYS-8021X-EXTENSIONS-MIB", "etsysDot1xAuthEntersAuthenticating"), ("ENTERASYS-8021X-EXTENSIONS-MIB", "etsysDot1xAuthAuthSuccessWhileAuthenticating"), ("ENTERASYS-8021X-EXTENSIONS-MIB", "etsysDot1xAuthAuthTimeoutsWhileAuthenticating"), ("ENTERASYS-8021X-EXTENSIONS-MIB", "etsysDot1xAuthAuthFailWhileAuthenticating"), ("ENTERASYS-8021X-EXTENSIONS-MIB", "etsysDot1xAuthAuthReauthsWhileAuthenticating"), ("ENTERASYS-8021X-EXTENSIONS-MIB", "etsysDot1xAuthAuthEapStartsWhileAuthenticating"), ("ENTERASYS-8021X-EXTENSIONS-MIB", "etsysDot1xAuthAuthEapLogoffWhileAuthenticating"), ("ENTERASYS-8021X-EXTENSIONS-MIB", "etsysDot1xAuthAuthReauthsWhileAuthenticated"), ("ENTERASYS-8021X-EXTENSIONS-MIB", "etsysDot1xAuthAuthEapStartsWhileAuthenticated"), ("ENTERASYS-8021X-EXTENSIONS-MIB", "etsysDot1xAuthAuthEapLogoffWhileAuthenticated"), ("ENTERASYS-8021X-EXTENSIONS-MIB", "etsysDot1xAuthBackendResponses"), ("ENTERASYS-8021X-EXTENSIONS-MIB", "etsysDot1xAuthBackendAccessChallenges"), ("ENTERASYS-8021X-EXTENSIONS-MIB", "etsysDot1xAuthBackendOtherRequestsToSupplicant"), ("ENTERASYS-8021X-EXTENSIONS-MIB", "etsysDot1xAuthBackendNonNakResponsesFromSupplicant"), ("ENTERASYS-8021X-EXTENSIONS-MIB", "etsysDot1xAuthBackendAuthSuccesses"), ("ENTERASYS-8021X-EXTENSIONS-MIB", "etsysDot1xAuthBackendAuthFails"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysDot1xAuthDiagGroup = etsysDot1xAuthDiagGroup.setStatus('current')
if mibBuilder.loadTexts: etsysDot1xAuthDiagGroup.setDescription('A collection of objects providing diagnostic statistics about Authenticator PAEs running on ports that use station- based access control.')
etsysDot1xAuthSessionStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5624, 1, 2, 18, 2, 1, 5)).setObjects(("ENTERASYS-8021X-EXTENSIONS-MIB", "etsysDot1xAuthSessionOctetsRx"), ("ENTERASYS-8021X-EXTENSIONS-MIB", "etsysDot1xAuthSessionOctetsTx"), ("ENTERASYS-8021X-EXTENSIONS-MIB", "etsysDot1xAuthSessionFramesRx"), ("ENTERASYS-8021X-EXTENSIONS-MIB", "etsysDot1xAuthSessionFramesTx"), ("ENTERASYS-8021X-EXTENSIONS-MIB", "etsysDot1xAuthSessionId"), ("ENTERASYS-8021X-EXTENSIONS-MIB", "etsysDot1xAuthSessionAuthenticMethod"), ("ENTERASYS-8021X-EXTENSIONS-MIB", "etsysDot1xAuthSessionTime"), ("ENTERASYS-8021X-EXTENSIONS-MIB", "etsysDot1xAuthSessionTerminateCause"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysDot1xAuthSessionStatsGroup = etsysDot1xAuthSessionStatsGroup.setStatus('current')
if mibBuilder.loadTexts: etsysDot1xAuthSessionStatsGroup.setDescription('A collection of objects providing statistics about the current or last sessions for Authenticator PAEs running on ports that use station-based access control.')
etsysDot1xAuthSessionControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5624, 1, 2, 18, 2, 1, 6)).setObjects(("ENTERASYS-8021X-EXTENSIONS-MIB", "etsysDot1xAuthSessionSuppportedObjs"), ("ENTERASYS-8021X-EXTENSIONS-MIB", "etsysDot1xMaxCapableAuthStations"), ("ENTERASYS-8021X-EXTENSIONS-MIB", "etsysDot1xCurrentStationsStatsGathered"), ("ENTERASYS-8021X-EXTENSIONS-MIB", "etsysDot1xMaximumStationsStatsGathered"), ("ENTERASYS-8021X-EXTENSIONS-MIB", "etsysDot1xAuthInfoStationAddress"), ("ENTERASYS-8021X-EXTENSIONS-MIB", "etsysDot1xAuthInfoStationRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysDot1xAuthSessionControlGroup = etsysDot1xAuthSessionControlGroup.setStatus('current')
if mibBuilder.loadTexts: etsysDot1xAuthSessionControlGroup.setDescription('A collection of objects providing statistics about the current or last sessions for Authenticator PAEs running on ports that use station-based access control.')
etsysDot1xCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 5624, 1, 2, 18, 2, 2, 1)).setObjects(("ENTERASYS-8021X-EXTENSIONS-MIB", "etsysDot1xAuthStationGroup"), ("ENTERASYS-8021X-EXTENSIONS-MIB", "etsysDot1xAuthConfigGroup"), ("ENTERASYS-8021X-EXTENSIONS-MIB", "etsysDot1xAuthStatsGroup"), ("ENTERASYS-8021X-EXTENSIONS-MIB", "etsysDot1xAuthDiagGroup"), ("ENTERASYS-8021X-EXTENSIONS-MIB", "etsysDot1xAuthSessionStatsGroup"), ("ENTERASYS-8021X-EXTENSIONS-MIB", "etsysDot1xAuthSessionControlGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysDot1xCompliance = etsysDot1xCompliance.setStatus('current')
if mibBuilder.loadTexts: etsysDot1xCompliance.setDescription('The compliance statement for devices that support the Enterasys IEEE 802.1x extensions MIB.')
mibBuilder.exportSymbols("ENTERASYS-8021X-EXTENSIONS-MIB", etsysDot1xAuthTxPeriod=etsysDot1xAuthTxPeriod, etsysDot1xAuthEapLogoffsWhileConnecting=etsysDot1xAuthEapLogoffsWhileConnecting, etsysDot1xAuthStationWatchTable=etsysDot1xAuthStationWatchTable, etsysDot1xAuthKeyTxEnabled=etsysDot1xAuthKeyTxEnabled, etsysDot1xAuthenticatorBranch=etsysDot1xAuthenticatorBranch, etsysDot1xAuthAuthControlledPortStatus=etsysDot1xAuthAuthControlledPortStatus, etsysDot1xAuthDiagEntry=etsysDot1xAuthDiagEntry, etsysDot1xAuthSessionFramesRx=etsysDot1xAuthSessionFramesRx, etsysDot1xCompliances=etsysDot1xCompliances, etsysDot1xAuthEapolRespIdFramesRx=etsysDot1xAuthEapolRespIdFramesRx, etsysDot1xExtensionsObjects=etsysDot1xExtensionsObjects, etsysDot1xAuthBackendOtherRequestsToSupplicant=etsysDot1xAuthBackendOtherRequestsToSupplicant, etsysDot1xAuthAuthReauthsWhileAuthenticated=etsysDot1xAuthAuthReauthsWhileAuthenticated, etsysDot1xAuthStatsGroup=etsysDot1xAuthStatsGroup, etsysDot1xAuthStationTable=etsysDot1xAuthStationTable, PYSNMP_MODULE_ID=etsys8021xExtensionsMIB, etsysDot1xAuthMaxReq=etsysDot1xAuthMaxReq, etsysDot1xAuthInfoStationAddress=etsysDot1xAuthInfoStationAddress, etsysDot1xAuthConfigGroup=etsysDot1xAuthConfigGroup, etsysDot1xAuthBackendAuthSuccesses=etsysDot1xAuthBackendAuthSuccesses, etsysDot1xAuthSessionControlGroup=etsysDot1xAuthSessionControlGroup, etsysDot1xAuthEntersAuthenticating=etsysDot1xAuthEntersAuthenticating, etsysDot1xAuthAuthControlledPortControl=etsysDot1xAuthAuthControlledPortControl, etsysDot1xGroups=etsysDot1xGroups, etsysDot1xAuthConfigTable=etsysDot1xAuthConfigTable, etsysDot1xAuthReAuthEnabled=etsysDot1xAuthReAuthEnabled, etsysDot1xAuthServerTimeout=etsysDot1xAuthServerTimeout, etsysDot1xAuthSessionFramesTx=etsysDot1xAuthSessionFramesTx, etsysDot1xAuthEntersConnecting=etsysDot1xAuthEntersConnecting, etsysDot1xAuthOperControlledDirections=etsysDot1xAuthOperControlledDirections, etsysDot1xAuthBackendAccessChallenges=etsysDot1xAuthBackendAccessChallenges, etsysDot1xAuthBackendResponses=etsysDot1xAuthBackendResponses, etsysDot1xAuthSessionTerminateCause=etsysDot1xAuthSessionTerminateCause, etsysDot1xAuthSessionTime=etsysDot1xAuthSessionTime, etsysDot1xAuthSessionStatsGroup=etsysDot1xAuthSessionStatsGroup, etsysDot1xAuthEapolReqFramesTx=etsysDot1xAuthEapolReqFramesTx, etsysDot1xAuthStationAddress=etsysDot1xAuthStationAddress, etsysDot1xAuthEapLengthErrorFramesRx=etsysDot1xAuthEapLengthErrorFramesRx, etsys8021xExtensionsMIB=etsys8021xExtensionsMIB, etsysDot1xAuthDiagTable=etsysDot1xAuthDiagTable, etsysDot1xAuthDiagGroup=etsysDot1xAuthDiagGroup, etsysDot1xAuthStationWatchEntry=etsysDot1xAuthStationWatchEntry, etsysDot1xAuthSessionOctetsRx=etsysDot1xAuthSessionOctetsRx, etsysDot1xAuthStationPaePort=etsysDot1xAuthStationPaePort, etsysDot1xAuthStatsSupported=etsysDot1xAuthStatsSupported, etsysDot1xAuthAuthEapStartsWhileAuthenticating=etsysDot1xAuthAuthEapStartsWhileAuthenticating, etsysDot1xAuthStationBranch=etsysDot1xAuthStationBranch, etsysDot1xAuthStationUserName=etsysDot1xAuthStationUserName, etsysDot1xAuthEapolFramesTx=etsysDot1xAuthEapolFramesTx, etsysDot1xAuthSessionSuppportedObjs=etsysDot1xAuthSessionSuppportedObjs, etsysDot1xMaxCapableAuthStations=etsysDot1xMaxCapableAuthStations, etsysDot1xAuthReAuthPeriod=etsysDot1xAuthReAuthPeriod, etsysDot1xAuthStationBackendAuthState=etsysDot1xAuthStationBackendAuthState, etsysDot1xAuthAuthEapStartsWhileAuthenticated=etsysDot1xAuthAuthEapStartsWhileAuthenticated, etsysDot1xSupplicantBranch=etsysDot1xSupplicantBranch, etsysDot1xAuthStatsEntry=etsysDot1xAuthStatsEntry, etsysDot1xAuthSessionStatsTable=etsysDot1xAuthSessionStatsTable, etsysDot1xCompliance=etsysDot1xCompliance, etsysDot1xAuthReauthenticate=etsysDot1xAuthReauthenticate, etsysDot1xSystemBranch=etsysDot1xSystemBranch, etsysDot1xAuthBackendNonNakResponsesFromSupplicant=etsysDot1xAuthBackendNonNakResponsesFromSupplicant, etsysDot1xAuthInfoStationRowStatus=etsysDot1xAuthInfoStationRowStatus, etsysDot1xAuthAuthEapLogoffWhileAuthenticating=etsysDot1xAuthAuthEapLogoffWhileAuthenticating, etsysDot1xMaximumStationsStatsGathered=etsysDot1xMaximumStationsStatsGathered, etsysDot1xAuthStationPaeState=etsysDot1xAuthStationPaeState, etsysDot1xAuthSessionOctetsTx=etsysDot1xAuthSessionOctetsTx, etsysDot1xAuthStationGroup=etsysDot1xAuthStationGroup, etsysDot1xAuthSessionId=etsysDot1xAuthSessionId, etsysDot1xAuthEapolStartFramesRx=etsysDot1xAuthEapolStartFramesRx, etsysDot1xAuthEapolFramesRx=etsysDot1xAuthEapolFramesRx, etsysDot1xAuthAuthTimeoutsWhileAuthenticating=etsysDot1xAuthAuthTimeoutsWhileAuthenticating, etsysDot1xAuthStationEntry=etsysDot1xAuthStationEntry, etsysDot1xAuthInvalidEapolFramesRx=etsysDot1xAuthInvalidEapolFramesRx, etsysDot1xAuthAuthFailWhileAuthenticating=etsysDot1xAuthAuthFailWhileAuthenticating, etsysDot1xAuthAuthEapLogoffWhileAuthenticated=etsysDot1xAuthAuthEapLogoffWhileAuthenticated, etsysDot1xAuthEapolLogoffFramesRx=etsysDot1xAuthEapolLogoffFramesRx, etsysDot1xAuthAdminControlledDirections=etsysDot1xAuthAdminControlledDirections, etsysDot1xAuthConfigEntry=etsysDot1xAuthConfigEntry, etsysDot1xAuthStatsTable=etsysDot1xAuthStatsTable, etsysDot1xCurrentStationsStatsGathered=etsysDot1xCurrentStationsStatsGathered, etsysDot1xAuthSessionStatsEntry=etsysDot1xAuthSessionStatsEntry, etsysDot1xAuthLastEapolFrameSource=etsysDot1xAuthLastEapolFrameSource, etsysDot1xAuthInitialize=etsysDot1xAuthInitialize, etsysDot1xAuthQuietPeriod=etsysDot1xAuthQuietPeriod, etsysDot1xAuthBackendAuthFails=etsysDot1xAuthBackendAuthFails, etsysDot1xAuthEapolReqIdFramesTx=etsysDot1xAuthEapolReqIdFramesTx, etsysDot1xAuthSuppTimeout=etsysDot1xAuthSuppTimeout, etsysDot1xAuthEapolRespFramesRx=etsysDot1xAuthEapolRespFramesRx, etsysDot1xAuthAuthSuccessWhileAuthenticating=etsysDot1xAuthAuthSuccessWhileAuthenticating, etsysDot1xAuthDiagSupported=etsysDot1xAuthDiagSupported, etsysDot1xConformance=etsysDot1xConformance, etsysDot1xAuthAuthReauthsWhileAuthenticating=etsysDot1xAuthAuthReauthsWhileAuthenticating, etsysDot1xAuthSessionAuthenticMethod=etsysDot1xAuthSessionAuthenticMethod, etsysDot1xAuthLastEapolFrameVersion=etsysDot1xAuthLastEapolFrameVersion)
