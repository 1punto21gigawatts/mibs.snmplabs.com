#
# PySNMP MIB module ENTERASYS-IEEE802DOT11EXT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ENTERASYS-IEEE802DOT11EXT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:03:33 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
etsysModules, = mibBuilder.importSymbols("ENTERASYS-MIB-NAMES", "etsysModules")
dot11WEPDefaultKeyIndex, = mibBuilder.importSymbols("IEEE802dot11-MIB", "dot11WEPDefaultKeyIndex")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
EnabledStatus, = mibBuilder.importSymbols("P-BRIDGE-MIB", "EnabledStatus")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
ModuleIdentity, Bits, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, iso, ObjectIdentity, TimeTicks, NotificationType, Counter32, Unsigned32, Gauge32, Counter64, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Bits", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "iso", "ObjectIdentity", "TimeTicks", "NotificationType", "Counter32", "Unsigned32", "Gauge32", "Counter64", "Integer32")
TextualConvention, TruthValue, MacAddress, DisplayString, AutonomousType = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "MacAddress", "DisplayString", "AutonomousType")
etsysDot11ExtMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 5624, 1, 2, 9))
etsysDot11ExtMIB.setRevisions(('2002-03-07 19:45', '2001-05-08 18:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: etsysDot11ExtMIB.setRevisionsDescriptions(('Removed some comments so that it would compile.', 'The initial version of this MIB module',))
if mibBuilder.loadTexts: etsysDot11ExtMIB.setLastUpdated('200203071945Z')
if mibBuilder.loadTexts: etsysDot11ExtMIB.setOrganization('Enterasys Networks, Inc')
if mibBuilder.loadTexts: etsysDot11ExtMIB.setContactInfo('Postal: Enterasys Networks 35 Industrial Way, P.O. Box 5005 Rochester, NH 03867-0505 Phone: +1 603 332 9400 E-mail: support@enterasys.com WWW: http://www.enterasys.com')
if mibBuilder.loadTexts: etsysDot11ExtMIB.setDescription('This mib module defines a portion of the SNMP enterprise MIBs under Enterasys Networks enterprise OID as an extension to the IEEE802Dot11 MIB. This Enterasys Networks Proprietary MIB was designed to be used for read-write access to configuration objects not provided by IEEE802.11 MIB, or any other standard MIB.')
etsysDot11ExtObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 9, 1))
etsysDot11ExtLinkTest = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 9, 1, 1))
etsysDot11ExtGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 9, 1, 2))
etsysDot11ExtBldg = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 9, 1, 3))
etsysDot11ExtWEP = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 9, 1, 4))
etsysDot11ExtEffect = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 9, 1, 5))
etsysDot11ExtLinkTestTable = MibTable((1, 3, 6, 1, 4, 1, 5624, 1, 2, 9, 1, 1, 1), )
if mibBuilder.loadTexts: etsysDot11ExtLinkTestTable.setStatus('current')
if mibBuilder.loadTexts: etsysDot11ExtLinkTestTable.setDescription('This table contains objects to test the link between a requester (entity which sends out the management request message) and a responder (entity which responds with the appropriate management response message). An entity could be either an Access Point(AP) or a station (STA).')
etsysDot11ExtLinkTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5624, 1, 2, 9, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: etsysDot11ExtLinkTestEntry.setStatus('current')
if mibBuilder.loadTexts: etsysDot11ExtLinkTestEntry.setDescription('An Entry (conceptual row) in the LinkTest Table. By means of message transmission between requester and responder, the communication quality between the two stations can be determined. The requester and responder can be any combination of AP and STA except STA to STA in an Infrastructure Network (network which has at least one AP present.')
etsysDot11ExtLTRemoteStationMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 9, 1, 1, 1, 1, 1), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysDot11ExtLTRemoteStationMAC.setStatus('current')
if mibBuilder.loadTexts: etsysDot11ExtLTRemoteStationMAC.setDescription('The MAC address for the remote station to participate in the Link Test. To initiate a search for a participating station, write the broadcast address (FF-FF-FF-FF-FF-FF) to this variable.')
etsysDot11ExtLTRemoteStationName = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 9, 1, 1, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysDot11ExtLTRemoteStationName.setStatus('current')
if mibBuilder.loadTexts: etsysDot11ExtLTRemoteStationName.setDescription('The wireless station name of the remote station participating in the Link Test.')
etsysDot11ExtLTTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 9, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysDot11ExtLTTrigger.setStatus('current')
if mibBuilder.loadTexts: etsysDot11ExtLTTrigger.setDescription('Writing a 1 to this variable causes a single Link Test request message to be sent to the remote station.')
etsysDot11ExtLTRemoteContents = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 9, 1, 1, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(84, 84)).setFixedLength(84)).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysDot11ExtLTRemoteContents.setStatus('current')
if mibBuilder.loadTexts: etsysDot11ExtLTRemoteContents.setDescription('The exact byte-by-byte contents of the Link Test packet returned by the remote station.')
etsysDot11ExtGeneralTable = MibTable((1, 3, 6, 1, 4, 1, 5624, 1, 2, 9, 1, 2, 1), )
if mibBuilder.loadTexts: etsysDot11ExtGeneralTable.setStatus('current')
if mibBuilder.loadTexts: etsysDot11ExtGeneralTable.setDescription('This table contains all the objects that must be configured on every radio card installed in the Access Point regardless of the operating mode in use.')
etsysDot11ExtGeneralEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5624, 1, 2, 9, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: etsysDot11ExtGeneralEntry.setStatus('current')
if mibBuilder.loadTexts: etsysDot11ExtGeneralEntry.setDescription('An Entry (conceptual row) in the Dot11General Table. This allows for multiple instances of radio cards in the Access Point.')
etsysDot11ExtPCCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 9, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 15))).clone(namedValues=NamedValues(("none", 1), ("deprecatedValue1", 2), ("deprecatedValue2", 3), ("deprecatedValue3", 4), ("ds80211b", 5), ("ds80211a", 6), ("unknown", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysDot11ExtPCCardType.setStatus('current')
if mibBuilder.loadTexts: etsysDot11ExtPCCardType.setDescription('The type of PC card inserted in the Access Point.')
etsysDot11ExtPCCardVersions = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 9, 1, 2, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysDot11ExtPCCardVersions.setStatus('current')
if mibBuilder.loadTexts: etsysDot11ExtPCCardVersions.setDescription('Specifies the version identifiers for the PC card. This will indicate both the Hardware and the Firmware versions.')
etsysDot11ExtBridgeMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 9, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("workgroup", 1), ("lanToLanEndpoint", 2), ("lanToLanMultipoint", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysDot11ExtBridgeMode.setStatus('current')
if mibBuilder.loadTexts: etsysDot11ExtBridgeMode.setDescription("CURRENT Access Point bridge mode state. In workgroup mode all communications between clients passes through the Access Point. LAN-to-LAN mode is the improved name for 802.11. LAN-to-LAN used to be called full-bridge pre-802.11. This mode is a method of connecting two wired LAN's via a wireless link, also referred to as Point-to-Point mode. LAN-to-LAN-HUB mode allows the interconnection of multiple (ie. more than two) wired LAN's via wireless links, also referred to as Point-to-MultiPoint mode. When operating in multimode the Access Point can simultaneously operate in both workgroup mode and either Point-to-Point or Point-to-MultiPoint modes. This object must be saved across a system reset and/or a power cycle.")
etsysDot11ExtResetOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 9, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("noReset", 0), ("resetRadioCardIfNecessary", 1), ("resetRadioCardRegardless", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysDot11ExtResetOptions.setStatus('current')
if mibBuilder.loadTexts: etsysDot11ExtResetOptions.setDescription("noReset (0) No reset is performed. A 'get' on this object always returns this value. resetRadioCardIfNecessary (1) Some parameters can only be given to the card at initialization time, and if any of these are changed, a card reset will be necessary for them to go into place. The card will be reset at this time if any of those parameters have indeed been changed. resetRadioCardRegardless (2) Forces the radio card to reset, even if no radio card parameters have been changed.")
etsysDot11ExtSystemScale = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 9, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("low", 1), ("medium", 2), ("high", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysDot11ExtSystemScale.setStatus('current')
if mibBuilder.loadTexts: etsysDot11ExtSystemScale.setDescription('Specifies the CURRENT Access Point density in the Extended Service Set (ESS). This object must be saved across a system reset and/or a power cycle.')
etsysDot11ExtSecureAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 9, 1, 2, 1, 1, 6), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysDot11ExtSecureAccess.setStatus('current')
if mibBuilder.loadTexts: etsysDot11ExtSecureAccess.setDescription('When this mode is set to enabled, the AP will only associate with stations that have the same network name as the AP. When this mode is set to disabled, a station with the network name of ANY is allowed to associate. This object must be saved across a system reset and/or a power cycle.')
etsysDot11ExtMulticastTxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 9, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("fixed1Mbit", 1), ("fixed2Mbit", 2), ("fixedMediumRate", 3), ("fixedHighRate", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysDot11ExtMulticastTxRate.setStatus('current')
if mibBuilder.loadTexts: etsysDot11ExtMulticastTxRate.setDescription('This value specifies the Multicast data transmission rate of the AP. It is implemented when cards that operate faster than the 2Mbit 802.11 standard are inserted. This object must be saved across a system reset and/or a power cycle.')
etsysDot11ExtIntraBSSRelay = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 9, 1, 2, 1, 1, 8), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysDot11ExtIntraBSSRelay.setStatus('current')
if mibBuilder.loadTexts: etsysDot11ExtIntraBSSRelay.setDescription('When this mode is enabled the AP entity within the PC Card will relay frames to destined for stations associated with it and will NOT forward them to the bridging entity within the AP. When this mode is set to disabled, the AP entity within the PC Card will not relay frames from wireless client(s) to station(s) associated with it, instead forwards frames to the bridging entity within the AP. This object must be saved across a system reset and/or a power cycle.')
etsysDot11ExtStationName = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 9, 1, 2, 1, 1, 9), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysDot11ExtStationName.setStatus('current')
if mibBuilder.loadTexts: etsysDot11ExtStationName.setDescription('DURABLE: The wireless station name sent out as part of the beacon messages. Valid only when a DS card is inserted in the Access Point.')
etsysDot11ExtBldgTable = MibTable((1, 3, 6, 1, 4, 1, 5624, 1, 2, 9, 1, 3, 1), )
if mibBuilder.loadTexts: etsysDot11ExtBldgTable.setStatus('current')
if mibBuilder.loadTexts: etsysDot11ExtBldgTable.setDescription('This table contains the objects required to enable the Access Point to operate in Point-to-MultiPoint mode.')
etsysDot11ExtBldgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5624, 1, 2, 9, 1, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: etsysDot11ExtBldgEntry.setStatus('current')
if mibBuilder.loadTexts: etsysDot11ExtBldgEntry.setDescription('An Entry (conceptual row) in the Dot11Bldg Table. A collection of objects containing information for activating and using the Access Point in Point-to-MultiPoint mode.')
etsysDot11ExtBldgRemoteMAC1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 9, 1, 3, 1, 1, 1), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysDot11ExtBldgRemoteMAC1.setStatus('current')
if mibBuilder.loadTexts: etsysDot11ExtBldgRemoteMAC1.setDescription('The MAC address for the remote station participating in a 802.11 Building-to-Building link. This object must be saved across a system reset and/or a power cycle.')
etsysDot11ExtBldgRemoteMAC2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 9, 1, 3, 1, 1, 2), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysDot11ExtBldgRemoteMAC2.setStatus('current')
if mibBuilder.loadTexts: etsysDot11ExtBldgRemoteMAC2.setDescription('The MAC address for the remote station participating in a 802.11 Building-to-Building link. This object must be saved across a system reset and/or a power cycle.')
etsysDot11ExtBldgRemoteMAC3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 9, 1, 3, 1, 1, 3), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysDot11ExtBldgRemoteMAC3.setStatus('current')
if mibBuilder.loadTexts: etsysDot11ExtBldgRemoteMAC3.setDescription('The MAC address for the remote station participating in a 802.11 Building-to-Building link. This object must be saved across a system reset and/or a power cycle.')
etsysDot11ExtBldgRemoteMAC4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 9, 1, 3, 1, 1, 4), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysDot11ExtBldgRemoteMAC4.setStatus('current')
if mibBuilder.loadTexts: etsysDot11ExtBldgRemoteMAC4.setDescription('The MAC address for the remote station participating in a 802.11 Building-to-Building link. This object must be saved across a system reset and/or a power cycle.')
etsysDot11ExtBldgRemoteMAC5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 9, 1, 3, 1, 1, 5), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysDot11ExtBldgRemoteMAC5.setStatus('current')
if mibBuilder.loadTexts: etsysDot11ExtBldgRemoteMAC5.setDescription('The MAC address for the remote station participating in a 802.11 Building-to-Building link. This object must be saved across a system reset and/or a power cycle.')
etsysDot11ExtBldgRemoteMAC6 = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 9, 1, 3, 1, 1, 6), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysDot11ExtBldgRemoteMAC6.setStatus('current')
if mibBuilder.loadTexts: etsysDot11ExtBldgRemoteMAC6.setDescription('The MAC address for the remote station participating in a 802.11 Building-to-Building link. This object must be saved across a system reset and/or a power cycle.')
etsysDot11ExtBldgMPActivationKey = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 9, 1, 3, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysDot11ExtBldgMPActivationKey.setStatus('current')
if mibBuilder.loadTexts: etsysDot11ExtBldgMPActivationKey.setDescription('Point-to-multipoint bridge mode requires an activation key to enable. A valid multipoint activation key must be entered as a string of ACSCII characters translating to the binary HEX value of the key before the Access Point will accept the point-to-multipoint bridge mode setting. Returns SNMP_BAD_VALUE if validation fails. This object must be saved across a system reset and/or a power cycle.')
etsysDot11ExtWEPDefaultKeysTable = MibTable((1, 3, 6, 1, 4, 1, 5624, 1, 2, 9, 1, 4, 1), )
if mibBuilder.loadTexts: etsysDot11ExtWEPDefaultKeysTable.setReference('IEEE Std 802.11-1997, 8.3.2')
if mibBuilder.loadTexts: etsysDot11ExtWEPDefaultKeysTable.setStatus('current')
if mibBuilder.loadTexts: etsysDot11ExtWEPDefaultKeysTable.setDescription('Conceptual table for WEP default keys. This table shall contain the four WEP default secret key values corresponding to the four possible KeyID values. The WEP default secret keys are logically WRITE-ONLY. Attempts to read the entries in this table shall return unsuccessful status and a value of null. The default value of each WEP default key shall be null.')
etsysDot11ExtWEPDefaultKeysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5624, 1, 2, 9, 1, 4, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "IEEE802dot11-MIB", "dot11WEPDefaultKeyIndex"))
if mibBuilder.loadTexts: etsysDot11ExtWEPDefaultKeysEntry.setStatus('current')
if mibBuilder.loadTexts: etsysDot11ExtWEPDefaultKeysEntry.setDescription('An Entry (conceptual row) in the WEP Default Keys Table. A collection of objects containing information used to determine if a WEPkey as been defined and if so, the value of the WEPkey.')
etsysDot11ExtWEPKeyDefined = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 9, 1, 4, 1, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysDot11ExtWEPKeyDefined.setStatus('current')
if mibBuilder.loadTexts: etsysDot11ExtWEPKeyDefined.setDescription('The state column used for determining if an encryption key is set (true) or not (false), false is the default value.')
etsysDot11ExtWEPKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 9, 1, 4, 1, 1, 2), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(5, 5), ValueSizeConstraint(13, 13), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysDot11ExtWEPKeyValue.setStatus('current')
if mibBuilder.loadTexts: etsysDot11ExtWEPKeyValue.setDescription('A WEP default secret key value. For 40-bit encryption use 5 printable characters or 10 HEX digits. For 128-bit encryption use 13 printable characters or 26 HEX digits. This object must be saved across a system reset and/or a power cycle.')
etsysDot11ExtWEPEnhancedTable = MibTable((1, 3, 6, 1, 4, 1, 5624, 1, 2, 9, 1, 4, 2), )
if mibBuilder.loadTexts: etsysDot11ExtWEPEnhancedTable.setReference('IEEE Std 802.11-1997, 8.3.2')
if mibBuilder.loadTexts: etsysDot11ExtWEPEnhancedTable.setStatus('current')
if mibBuilder.loadTexts: etsysDot11ExtWEPEnhancedTable.setDescription('Conceptual table for WEP default keys. This table shall contain the four WEP default secret key values corresponding to the four possible KeyID values. The WEP default secret keys are logically WRITE-ONLY. Attempts to read the entries in this table shall return unsuccessful status and a value of null. The default value of each WEP default key shall be null.')
etsysDot11ExtWEPEnhancedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5624, 1, 2, 9, 1, 4, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: etsysDot11ExtWEPEnhancedEntry.setStatus('current')
if mibBuilder.loadTexts: etsysDot11ExtWEPEnhancedEntry.setDescription('An Entry (conceptual row) in the WEP Default Keys Table. A collection of objects containing information used to determine if a WEPkey as been defined and if so, the value of the WEPkey.')
etsysDot11ExtWEPEnhancedImplemented = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 9, 1, 4, 2, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysDot11ExtWEPEnhancedImplemented.setStatus('current')
if mibBuilder.loadTexts: etsysDot11ExtWEPEnhancedImplemented.setDescription('This value indicates whether the AP is capable of Enhanced Wireless Equivalent Privacy (WEP), using 128-bit keys.')
etsysDot11ExtOIDNotInEffectTable = MibTable((1, 3, 6, 1, 4, 1, 5624, 1, 2, 9, 1, 5, 1), )
if mibBuilder.loadTexts: etsysDot11ExtOIDNotInEffectTable.setStatus('current')
if mibBuilder.loadTexts: etsysDot11ExtOIDNotInEffectTable.setDescription(' This table will be used to determine which wireless parameters have been modified but are not yet in effect. These parameters will not take effect until a reset has been performed.')
etsysDot11ExtOIDNotInEffectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5624, 1, 2, 9, 1, 5, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ENTERASYS-IEEE802DOT11EXT-MIB", "etsysDot11ExtOIDIndex"))
if mibBuilder.loadTexts: etsysDot11ExtOIDNotInEffectEntry.setStatus('current')
if mibBuilder.loadTexts: etsysDot11ExtOIDNotInEffectEntry.setDescription(' ')
etsysDot11ExtOIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 9, 1, 5, 1, 1, 1), AutonomousType())
if mibBuilder.loadTexts: etsysDot11ExtOIDIndex.setStatus('current')
if mibBuilder.loadTexts: etsysDot11ExtOIDIndex.setDescription(' This object will keep a list of OIDS')
etsysDot11ExtOIDNotInEffect = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 9, 1, 5, 1, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysDot11ExtOIDNotInEffect.setStatus('current')
if mibBuilder.loadTexts: etsysDot11ExtOIDNotInEffect.setDescription(' This object specifies if the OID being accesed currently has been changed but is not in effect.')
etsysDot11ExtConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 9, 2))
etsysDot11ExtGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 9, 2, 1))
etsysDot11ExtCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 9, 2, 2))
etsysDot11ExtBaseGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5624, 1, 2, 9, 2, 1, 1)).setObjects(("ENTERASYS-IEEE802DOT11EXT-MIB", "etsysDot11ExtLTRemoteStationMAC"), ("ENTERASYS-IEEE802DOT11EXT-MIB", "etsysDot11ExtLTRemoteStationName"), ("ENTERASYS-IEEE802DOT11EXT-MIB", "etsysDot11ExtLTTrigger"), ("ENTERASYS-IEEE802DOT11EXT-MIB", "etsysDot11ExtLTRemoteContents"), ("ENTERASYS-IEEE802DOT11EXT-MIB", "etsysDot11ExtSystemScale"), ("ENTERASYS-IEEE802DOT11EXT-MIB", "etsysDot11ExtSecureAccess"), ("ENTERASYS-IEEE802DOT11EXT-MIB", "etsysDot11ExtMulticastTxRate"), ("ENTERASYS-IEEE802DOT11EXT-MIB", "etsysDot11ExtIntraBSSRelay"), ("ENTERASYS-IEEE802DOT11EXT-MIB", "etsysDot11ExtPCCardType"), ("ENTERASYS-IEEE802DOT11EXT-MIB", "etsysDot11ExtPCCardVersions"), ("ENTERASYS-IEEE802DOT11EXT-MIB", "etsysDot11ExtBridgeMode"), ("ENTERASYS-IEEE802DOT11EXT-MIB", "etsysDot11ExtResetOptions"), ("ENTERASYS-IEEE802DOT11EXT-MIB", "etsysDot11ExtStationName"), ("ENTERASYS-IEEE802DOT11EXT-MIB", "etsysDot11ExtBldgRemoteMAC1"), ("ENTERASYS-IEEE802DOT11EXT-MIB", "etsysDot11ExtBldgRemoteMAC2"), ("ENTERASYS-IEEE802DOT11EXT-MIB", "etsysDot11ExtBldgRemoteMAC3"), ("ENTERASYS-IEEE802DOT11EXT-MIB", "etsysDot11ExtBldgRemoteMAC4"), ("ENTERASYS-IEEE802DOT11EXT-MIB", "etsysDot11ExtBldgRemoteMAC5"), ("ENTERASYS-IEEE802DOT11EXT-MIB", "etsysDot11ExtBldgRemoteMAC6"), ("ENTERASYS-IEEE802DOT11EXT-MIB", "etsysDot11ExtBldgMPActivationKey"), ("ENTERASYS-IEEE802DOT11EXT-MIB", "etsysDot11ExtWEPKeyDefined"), ("ENTERASYS-IEEE802DOT11EXT-MIB", "etsysDot11ExtWEPKeyValue"), ("ENTERASYS-IEEE802DOT11EXT-MIB", "etsysDot11ExtWEPEnhancedImplemented"), ("ENTERASYS-IEEE802DOT11EXT-MIB", "etsysDot11ExtOIDNotInEffect"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysDot11ExtBaseGroup = etsysDot11ExtBaseGroup.setStatus('current')
if mibBuilder.loadTexts: etsysDot11ExtBaseGroup.setDescription('The basic etsysDot11Ext stuff.')
etsysDot11ExtCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 5624, 1, 2, 9, 2, 2, 1)).setObjects(("ENTERASYS-IEEE802DOT11EXT-MIB", "etsysDot11ExtBaseGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysDot11ExtCompliance = etsysDot11ExtCompliance.setStatus('current')
if mibBuilder.loadTexts: etsysDot11ExtCompliance.setDescription('The compliance statement for devices that support 802Dot11 extensions.')
mibBuilder.exportSymbols("ENTERASYS-IEEE802DOT11EXT-MIB", etsysDot11ExtSecureAccess=etsysDot11ExtSecureAccess, etsysDot11ExtLTRemoteStationMAC=etsysDot11ExtLTRemoteStationMAC, etsysDot11ExtConformance=etsysDot11ExtConformance, etsysDot11ExtCompliance=etsysDot11ExtCompliance, etsysDot11ExtLinkTestEntry=etsysDot11ExtLinkTestEntry, etsysDot11ExtWEPDefaultKeysEntry=etsysDot11ExtWEPDefaultKeysEntry, etsysDot11ExtPCCardVersions=etsysDot11ExtPCCardVersions, etsysDot11ExtBldgRemoteMAC5=etsysDot11ExtBldgRemoteMAC5, PYSNMP_MODULE_ID=etsysDot11ExtMIB, etsysDot11ExtPCCardType=etsysDot11ExtPCCardType, etsysDot11ExtMulticastTxRate=etsysDot11ExtMulticastTxRate, etsysDot11ExtOIDNotInEffectTable=etsysDot11ExtOIDNotInEffectTable, etsysDot11ExtBldgRemoteMAC4=etsysDot11ExtBldgRemoteMAC4, etsysDot11ExtEffect=etsysDot11ExtEffect, etsysDot11ExtSystemScale=etsysDot11ExtSystemScale, etsysDot11ExtLTRemoteStationName=etsysDot11ExtLTRemoteStationName, etsysDot11ExtBldg=etsysDot11ExtBldg, etsysDot11ExtOIDNotInEffectEntry=etsysDot11ExtOIDNotInEffectEntry, etsysDot11ExtOIDIndex=etsysDot11ExtOIDIndex, etsysDot11ExtIntraBSSRelay=etsysDot11ExtIntraBSSRelay, etsysDot11ExtOIDNotInEffect=etsysDot11ExtOIDNotInEffect, etsysDot11ExtWEPEnhancedTable=etsysDot11ExtWEPEnhancedTable, etsysDot11ExtBldgMPActivationKey=etsysDot11ExtBldgMPActivationKey, etsysDot11ExtGeneralTable=etsysDot11ExtGeneralTable, etsysDot11ExtGroups=etsysDot11ExtGroups, etsysDot11ExtWEPEnhancedEntry=etsysDot11ExtWEPEnhancedEntry, etsysDot11ExtWEPKeyValue=etsysDot11ExtWEPKeyValue, etsysDot11ExtBaseGroup=etsysDot11ExtBaseGroup, etsysDot11ExtResetOptions=etsysDot11ExtResetOptions, etsysDot11ExtWEPKeyDefined=etsysDot11ExtWEPKeyDefined, etsysDot11ExtStationName=etsysDot11ExtStationName, etsysDot11ExtWEPEnhancedImplemented=etsysDot11ExtWEPEnhancedImplemented, etsysDot11ExtBldgTable=etsysDot11ExtBldgTable, etsysDot11ExtBldgRemoteMAC1=etsysDot11ExtBldgRemoteMAC1, etsysDot11ExtGeneral=etsysDot11ExtGeneral, etsysDot11ExtBldgRemoteMAC2=etsysDot11ExtBldgRemoteMAC2, etsysDot11ExtLTTrigger=etsysDot11ExtLTTrigger, etsysDot11ExtBldgEntry=etsysDot11ExtBldgEntry, etsysDot11ExtBldgRemoteMAC3=etsysDot11ExtBldgRemoteMAC3, etsysDot11ExtBridgeMode=etsysDot11ExtBridgeMode, etsysDot11ExtMIB=etsysDot11ExtMIB, etsysDot11ExtLinkTestTable=etsysDot11ExtLinkTestTable, etsysDot11ExtLTRemoteContents=etsysDot11ExtLTRemoteContents, etsysDot11ExtCompliances=etsysDot11ExtCompliances, etsysDot11ExtBldgRemoteMAC6=etsysDot11ExtBldgRemoteMAC6, etsysDot11ExtGeneralEntry=etsysDot11ExtGeneralEntry, etsysDot11ExtWEPDefaultKeysTable=etsysDot11ExtWEPDefaultKeysTable, etsysDot11ExtLinkTest=etsysDot11ExtLinkTest, etsysDot11ExtObjects=etsysDot11ExtObjects, etsysDot11ExtWEP=etsysDot11ExtWEP)
