#
# PySNMP MIB module SIP-UA-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SIP-UA-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:04:32 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion")
applIndex, = mibBuilder.importSymbols("NETWORK-SERVICES-MIB", "applIndex")
sipMIB, = mibBuilder.importSymbols("SIP-MIB-SMI", "sipMIB")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
ModuleIdentity, ObjectIdentity, iso, NotificationType, MibIdentifier, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Integer32, Unsigned32, IpAddress, Bits, Counter64, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "ObjectIdentity", "iso", "NotificationType", "MibIdentifier", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Integer32", "Unsigned32", "IpAddress", "Bits", "Counter64", "Counter32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
sipUAMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 9998, 3))
if mibBuilder.loadTexts: sipUAMIB.setLastUpdated('200007080000Z')
if mibBuilder.loadTexts: sipUAMIB.setOrganization('IETF SIP Working Group, SIP MIB Team')
if mibBuilder.loadTexts: sipUAMIB.setContactInfo('SIP MIB Team email: sip-mib@egroups.com Co-editor Kevin Lingle Cisco Systems, Inc. postal: 7025 Kit Creek Road P.O. Box 14987 Research Triangle Park, NC 27709 USA email: klingle@cisco.com phone: +1-919-392-2029 Co-editor Joon Maeng VTEL Corporation postal: 108 Wild Basin Rd. Austin, TX 78746 USA email: joon_maeng@vtel.com phone: +1-512-437-4567 Co-editor Dave Walker SS8 Networks, Inc. postal: 80 Hines Road Kanata, ON K2K 2T8 Canada email: drwalker@ss8networks.com phone: +1 613 592 2100')
if mibBuilder.loadTexts: sipUAMIB.setDescription('Initial version of Session Initiation Protocol (SIP) User Agent (UA) MIB module. SIP is an application-layer signalling protocol for creating, modifying and terminating multimedia sessions with one or more participants. These sessions include Internet multimedia conferences and Internet telephone calls. SIP is defined in RFC 2543 (March 1999). A User Agent is an application that contains both a User Agent Client (UAC) and a User Agent Server (UAS). A UAC is an application that initiates a SIP request. A UAS is an application that contacts the user when a SIP request is received and that returns a response on behalf of the user. The response accepts, rejects, or redirects the request.')
sipUACfg = MibIdentifier((1, 3, 6, 1, 2, 1, 9998, 3, 1))
sipUACfgTimer = MibIdentifier((1, 3, 6, 1, 2, 1, 9998, 3, 1, 1))
sipUACfgRetry = MibIdentifier((1, 3, 6, 1, 2, 1, 9998, 3, 1, 2))
sipUAStats = MibIdentifier((1, 3, 6, 1, 2, 1, 9998, 3, 2))
sipUAStatsRetry = MibIdentifier((1, 3, 6, 1, 2, 1, 9998, 3, 2, 1))
sipUACfgTimerTable = MibTable((1, 3, 6, 1, 2, 1, 9998, 3, 1, 1, 1), )
if mibBuilder.loadTexts: sipUACfgTimerTable.setStatus('current')
if mibBuilder.loadTexts: sipUACfgTimerTable.setDescription('This table contains timer configuration objects applicable to each SIP user agent in this system. The instances of SIP entities are uniquely identified by applIndex.')
sipUACfgTimerEntry = MibTableRow((1, 3, 6, 1, 2, 1, 9998, 3, 1, 1, 1, 1), ).setIndexNames((0, "NETWORK-SERVICES-MIB", "applIndex"))
if mibBuilder.loadTexts: sipUACfgTimerEntry.setStatus('current')
if mibBuilder.loadTexts: sipUACfgTimerEntry.setDescription('A row of timer configuration.')
sipUACfgTimerTrying = MibTableColumn((1, 3, 6, 1, 2, 1, 9998, 3, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 1000))).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipUACfgTimerTrying.setStatus('current')
if mibBuilder.loadTexts: sipUACfgTimerTrying.setDescription('This object specifies the time a user agent will wait to receive a provisional response to an INVITE before resending the INVITE.')
sipUACfgTimerProv = MibTableColumn((1, 3, 6, 1, 2, 1, 9998, 3, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60000, 300000))).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipUACfgTimerProv.setStatus('current')
if mibBuilder.loadTexts: sipUACfgTimerProv.setDescription('This object specifies the time a user agent will wait to receive a final response to an INVITE before canceling the transaction.')
sipUACfgTimerAck = MibTableColumn((1, 3, 6, 1, 2, 1, 9998, 3, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 1000))).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipUACfgTimerAck.setStatus('current')
if mibBuilder.loadTexts: sipUACfgTimerAck.setDescription('This object specifies the time a user agent will wait to receive an ACK confirmation indicating that a session is established.')
sipUACfgTimerDisconnect = MibTableColumn((1, 3, 6, 1, 2, 1, 9998, 3, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 1000))).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipUACfgTimerDisconnect.setStatus('current')
if mibBuilder.loadTexts: sipUACfgTimerDisconnect.setDescription('This object specifies the time a user agent will wait to receive a BYE confirmation indicating that a session is disconnected.')
sipUACfgTimerReRegister = MibTableColumn((1, 3, 6, 1, 2, 1, 9998, 3, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipUACfgTimerReRegister.setStatus('current')
if mibBuilder.loadTexts: sipUACfgTimerReRegister.setDescription('This object specifies how long the user agent wishes its registrations to be valid.')
sipUACfgRetryTable = MibTable((1, 3, 6, 1, 2, 1, 9998, 3, 1, 2, 1), )
if mibBuilder.loadTexts: sipUACfgRetryTable.setStatus('current')
if mibBuilder.loadTexts: sipUACfgRetryTable.setDescription('This table contains retry configuration objects applicable to each SIP user agent in this system. The instances of SIP entities are uniquely identified by applIndex.')
sipUACfgRetryEntry = MibTableRow((1, 3, 6, 1, 2, 1, 9998, 3, 1, 2, 1, 1), ).setIndexNames((0, "NETWORK-SERVICES-MIB", "applIndex"))
if mibBuilder.loadTexts: sipUACfgRetryEntry.setStatus('current')
if mibBuilder.loadTexts: sipUACfgRetryEntry.setDescription('A row of retry configuration.')
sipUACfgRetryInvite = MibTableColumn((1, 3, 6, 1, 2, 1, 9998, 3, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipUACfgRetryInvite.setStatus('current')
if mibBuilder.loadTexts: sipUACfgRetryInvite.setDescription('This object will specify the number of times a user agent will retry sending an INVITE request.')
sipUACfgRetryBye = MibTableColumn((1, 3, 6, 1, 2, 1, 9998, 3, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipUACfgRetryBye.setStatus('current')
if mibBuilder.loadTexts: sipUACfgRetryBye.setDescription('This object will specify the number of times a user agent will retry sending a BYE request.')
sipUACfgRetryCancel = MibTableColumn((1, 3, 6, 1, 2, 1, 9998, 3, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipUACfgRetryCancel.setStatus('current')
if mibBuilder.loadTexts: sipUACfgRetryCancel.setDescription('This object will specify the number of times a user agent will retry sending a CANCEL request.')
sipUACfgRetryRegister = MibTableColumn((1, 3, 6, 1, 2, 1, 9998, 3, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipUACfgRetryRegister.setStatus('current')
if mibBuilder.loadTexts: sipUACfgRetryRegister.setDescription('This object will specify the number of times a user agent will retry sending a REGISTER request.')
sipUACfgRetryResponse = MibTableColumn((1, 3, 6, 1, 2, 1, 9998, 3, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipUACfgRetryResponse.setStatus('current')
if mibBuilder.loadTexts: sipUACfgRetryResponse.setDescription('This object will specify the number of times a user agent will retry sending a Response and expecting an ACK.')
sipUAStatsRetryTable = MibTable((1, 3, 6, 1, 2, 1, 9998, 3, 2, 1, 1), )
if mibBuilder.loadTexts: sipUAStatsRetryTable.setStatus('current')
if mibBuilder.loadTexts: sipUAStatsRetryTable.setDescription('This table contains retry statistics objects applicable to each SIP user agent in this system. The instances of SIP entities are uniquely identified by applIndex.')
sipUAStatsRetryEntry = MibTableRow((1, 3, 6, 1, 2, 1, 9998, 3, 2, 1, 1, 1), ).setIndexNames((0, "NETWORK-SERVICES-MIB", "applIndex"))
if mibBuilder.loadTexts: sipUAStatsRetryEntry.setStatus('current')
if mibBuilder.loadTexts: sipUAStatsRetryEntry.setDescription('A row of retry statistics.')
sipStatsRetryInvites = MibTableColumn((1, 3, 6, 1, 2, 1, 9998, 3, 2, 1, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipStatsRetryInvites.setStatus('current')
if mibBuilder.loadTexts: sipStatsRetryInvites.setDescription("This object reflects the total number of INVITE retries that have been sent by the user agent. If the number of 'first attempt' INVITES is of interest, subtract the value of this object from sipStatsTrafficInviteOut.")
sipStatsRetryByes = MibTableColumn((1, 3, 6, 1, 2, 1, 9998, 3, 2, 1, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipStatsRetryByes.setStatus('current')
if mibBuilder.loadTexts: sipStatsRetryByes.setDescription('This object reflects the total number of BYE retries that have been sent by the user agent.')
sipStatsRetryCancels = MibTableColumn((1, 3, 6, 1, 2, 1, 9998, 3, 2, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipStatsRetryCancels.setStatus('current')
if mibBuilder.loadTexts: sipStatsRetryCancels.setDescription('This object reflects the total number of CANCEL retries that have been sent by the user agent.')
sipStatsRetryRegisters = MibTableColumn((1, 3, 6, 1, 2, 1, 9998, 3, 2, 1, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipStatsRetryRegisters.setStatus('current')
if mibBuilder.loadTexts: sipStatsRetryRegisters.setDescription('This object reflects the total number of REGISTER retries that have been sent by the user agent.')
sipStatsRetryResponses = MibTableColumn((1, 3, 6, 1, 2, 1, 9998, 3, 2, 1, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipStatsRetryResponses.setStatus('current')
if mibBuilder.loadTexts: sipStatsRetryResponses.setDescription('This object reflects the total number of Response (while expecting an ACK) retries that have been sent by the user agent.')
sipUAMIBNotif = MibIdentifier((1, 3, 6, 1, 2, 1, 9998, 3, 3))
sipUAMIBConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 9998, 3, 4))
sipUAMIBCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 9998, 3, 4, 1))
sipUAMIBGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 9998, 3, 4, 2))
sipUACompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 9998, 3, 4, 1, 1)).setObjects(("SIP-UA-MIB", "sipUAConfigGroup"), ("SIP-UA-MIB", "sipUAStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sipUACompliance = sipUACompliance.setStatus('current')
if mibBuilder.loadTexts: sipUACompliance.setDescription('The compliance statement for SIP entities.')
sipUAConfigGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 9998, 3, 4, 2, 1)).setObjects(("SIP-UA-MIB", "sipUACfgTimerTrying"), ("SIP-UA-MIB", "sipUACfgTimerProv"), ("SIP-UA-MIB", "sipUACfgTimerAck"), ("SIP-UA-MIB", "sipUACfgTimerDisconnect"), ("SIP-UA-MIB", "sipUACfgTimerReRegister"), ("SIP-UA-MIB", "sipUACfgRetryInvite"), ("SIP-UA-MIB", "sipUACfgRetryBye"), ("SIP-UA-MIB", "sipUACfgRetryCancel"), ("SIP-UA-MIB", "sipUACfgRetryRegister"), ("SIP-UA-MIB", "sipUACfgRetryResponse"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sipUAConfigGroup = sipUAConfigGroup.setStatus('current')
if mibBuilder.loadTexts: sipUAConfigGroup.setDescription('A collection of objects providing configuration for SIP User Agents.')
sipUAStatsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 9998, 3, 4, 2, 2)).setObjects(("SIP-UA-MIB", "sipStatsRetryInvites"), ("SIP-UA-MIB", "sipStatsRetryByes"), ("SIP-UA-MIB", "sipStatsRetryCancels"), ("SIP-UA-MIB", "sipStatsRetryRegisters"), ("SIP-UA-MIB", "sipStatsRetryResponses"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sipUAStatsGroup = sipUAStatsGroup.setStatus('current')
if mibBuilder.loadTexts: sipUAStatsGroup.setDescription('A collection of objects providing statistics for SIP User Agents.')
mibBuilder.exportSymbols("SIP-UA-MIB", sipUAMIBGroups=sipUAMIBGroups, sipUAStats=sipUAStats, sipStatsRetryInvites=sipStatsRetryInvites, sipUAStatsGroup=sipUAStatsGroup, sipUACfgRetryBye=sipUACfgRetryBye, sipUACfgRetryEntry=sipUACfgRetryEntry, sipUACfgTimerDisconnect=sipUACfgTimerDisconnect, sipUAMIBCompliances=sipUAMIBCompliances, sipUACfgRetryResponse=sipUACfgRetryResponse, sipUAMIBConformance=sipUAMIBConformance, sipUACfgTimerEntry=sipUACfgTimerEntry, PYSNMP_MODULE_ID=sipUAMIB, sipUACfgRetryTable=sipUACfgRetryTable, sipUAMIBNotif=sipUAMIBNotif, sipStatsRetryResponses=sipStatsRetryResponses, sipUAMIB=sipUAMIB, sipUACfgTimerReRegister=sipUACfgTimerReRegister, sipUACfgTimerProv=sipUACfgTimerProv, sipUACfgTimerTrying=sipUACfgTimerTrying, sipUAConfigGroup=sipUAConfigGroup, sipUACfgRetryCancel=sipUACfgRetryCancel, sipStatsRetryByes=sipStatsRetryByes, sipUACompliance=sipUACompliance, sipUACfgTimerAck=sipUACfgTimerAck, sipUACfgRetry=sipUACfgRetry, sipUACfgRetryInvite=sipUACfgRetryInvite, sipUAStatsRetry=sipUAStatsRetry, sipUACfgTimerTable=sipUACfgTimerTable, sipUAStatsRetryTable=sipUAStatsRetryTable, sipUACfg=sipUACfg, sipUACfgTimer=sipUACfgTimer, sipStatsRetryCancels=sipStatsRetryCancels, sipStatsRetryRegisters=sipStatsRetryRegisters, sipUAStatsRetryEntry=sipUAStatsRetryEntry, sipUACfgRetryRegister=sipUACfgRetryRegister)
