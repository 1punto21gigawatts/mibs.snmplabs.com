#
# PySNMP MIB module RBN-STACKEDVLAN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RBN-STACKEDVLAN-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:53:24 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
rbnMgmt, = mibBuilder.importSymbols("RBN-SMI", "rbnMgmt")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
TimeTicks, Integer32, iso, Counter64, ObjectIdentity, Counter32, NotificationType, IpAddress, MibIdentifier, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Gauge32, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Integer32", "iso", "Counter64", "ObjectIdentity", "Counter32", "NotificationType", "IpAddress", "MibIdentifier", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Gauge32", "Bits")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
rbnStackedVlanMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2352, 2, 40))
rbnStackedVlanMIB.setRevisions(('2007-02-27 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: rbnStackedVlanMIB.setRevisionsDescriptions(('Initial version',))
if mibBuilder.loadTexts: rbnStackedVlanMIB.setLastUpdated('200702270000Z')
if mibBuilder.loadTexts: rbnStackedVlanMIB.setOrganization('RedBack Networks, Inc.')
if mibBuilder.loadTexts: rbnStackedVlanMIB.setContactInfo(' RedBack Networks, Inc. Postal: 300 Holger Way San Jose, CA 95134-1362 USA Phone: +1 408 750-5000 Fax: +1 408 750-5599 E-mail: mib-info@redback.com')
if mibBuilder.loadTexts: rbnStackedVlanMIB.setDescription('This management information module defines the objects necessary to support the management of stacked VLAN interfaces')
rbnStackedVlanMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 40, 1))
rbnStackedVlanAggrStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2352, 2, 40, 1, 1), )
if mibBuilder.loadTexts: rbnStackedVlanAggrStatsTable.setStatus('current')
if mibBuilder.loadTexts: rbnStackedVlanAggrStatsTable.setDescription("A table containing aggregated statistics of inner VLAN's related to an outer VLAN.")
rbnStackedVlanAggrStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2352, 2, 40, 1, 1, 1), ).setIndexNames((0, "RBN-STACKEDVLAN-MIB", "rbnStackedVlanIndex"))
if mibBuilder.loadTexts: rbnStackedVlanAggrStatsEntry.setStatus('current')
if mibBuilder.loadTexts: rbnStackedVlanAggrStatsEntry.setDescription('An entry in the rbnStackedVlanStatisticsTable.')
rbnStackedVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 40, 1, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: rbnStackedVlanIndex.setReference('RFC 2233, ifIndex')
if mibBuilder.loadTexts: rbnStackedVlanIndex.setStatus('current')
if mibBuilder.loadTexts: rbnStackedVlanIndex.setDescription('An index value that uniquely identifies an interface to an ethernet-like medium. The interface identified by a particular value of this index is the same interface as identified by the same value of ifIndex.')
rbnStackedVlanHCInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 40, 1, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnStackedVlanHCInOctets.setStatus('current')
if mibBuilder.loadTexts: rbnStackedVlanHCInOctets.setDescription('The aggregate of the total number of octets received on each outer vlan and its inner vlans, including framing characters.')
rbnStackedVlanHCInUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 40, 1, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnStackedVlanHCInUcastPkts.setStatus('current')
if mibBuilder.loadTexts: rbnStackedVlanHCInUcastPkts.setDescription('The aggregate of the number of packets, delivered by this sub-layer to a higher (sub-)layer, which were not addressed to a multicast or broadcast address at this sub-layer for each outer vlan and its inner vlans.')
rbnStackedVlanHCInMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 40, 1, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnStackedVlanHCInMulticastPkts.setStatus('current')
if mibBuilder.loadTexts: rbnStackedVlanHCInMulticastPkts.setDescription('The aggregate number of packets, delivered by this sub-layer to a higher (sub-)layer, which were addressed to a multicast address at this sub-layer for each outer vlan and its inner vlans. For a MAC layer protocol, this includes both Group and Functional addresses.')
rbnStackedVlanHCInBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 40, 1, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnStackedVlanHCInBroadcastPkts.setStatus('current')
if mibBuilder.loadTexts: rbnStackedVlanHCInBroadcastPkts.setDescription('The aggregate number of packets, delivered by this sub-layer to a higher (sub-)layer, which were addressed to a broadcast address at this sub-layer for each outer vlan and its inner vlans.')
rbnStackedVlanHCOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 40, 1, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnStackedVlanHCOutOctets.setStatus('current')
if mibBuilder.loadTexts: rbnStackedVlanHCOutOctets.setDescription('The aggregate of the total number of octets transmitted out of the interface, including framing characters for each outer vlan and its inner vlans.')
rbnStackedVlanHCOutUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 40, 1, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnStackedVlanHCOutUcastPkts.setStatus('current')
if mibBuilder.loadTexts: rbnStackedVlanHCOutUcastPkts.setDescription('The aggregate of the total number of packets that higher-level protocols requested be transmitted, and which were not addressed to a multicast or broadcast address at this sub-layer, including those that were discarded or not sent for each outer vlan and its inner vlans.')
rbnStackedVlanHCOutMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 40, 1, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnStackedVlanHCOutMulticastPkts.setStatus('current')
if mibBuilder.loadTexts: rbnStackedVlanHCOutMulticastPkts.setDescription('The aggregate of the total number of packets that higher-level protocols requested be transmitted, and which were addressed to a multicast address at this sub-layer, including those that were discarded or not sent for each outer vlan and its inner vlans. For a MAC layer protocol, this includes both Group and Functional addresses.')
rbnStackedVlanHCOutBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 40, 1, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnStackedVlanHCOutBroadcastPkts.setStatus('current')
if mibBuilder.loadTexts: rbnStackedVlanHCOutBroadcastPkts.setDescription('The aggregate of the total number of packets that higher-level protocols requested be transmitted, and which were addressed to a broadcast address at this sub-layer, including those that were discarded or not sent for each outer vlan and its inner vlans.')
rbnStackedVlanMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 40, 2))
rbnStackedVlanMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 40, 2, 1))
rbnStackedVlanMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 40, 2, 2))
rbnStackedVlanMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2352, 2, 40, 2, 2, 1)).setObjects(("RBN-STACKEDVLAN-MIB", "rbnStackedVlanMIBGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnStackedVlanMIBCompliance = rbnStackedVlanMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: rbnStackedVlanMIBCompliance.setDescription('The compliance statement for using this MIB.')
rbnStackedVlanMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2352, 2, 40, 2, 1, 1)).setObjects(("RBN-STACKEDVLAN-MIB", "rbnStackedVlanHCInOctets"), ("RBN-STACKEDVLAN-MIB", "rbnStackedVlanHCInUcastPkts"), ("RBN-STACKEDVLAN-MIB", "rbnStackedVlanHCInMulticastPkts"), ("RBN-STACKEDVLAN-MIB", "rbnStackedVlanHCInBroadcastPkts"), ("RBN-STACKEDVLAN-MIB", "rbnStackedVlanHCOutOctets"), ("RBN-STACKEDVLAN-MIB", "rbnStackedVlanHCOutUcastPkts"), ("RBN-STACKEDVLAN-MIB", "rbnStackedVlanHCOutMulticastPkts"), ("RBN-STACKEDVLAN-MIB", "rbnStackedVlanHCOutBroadcastPkts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnStackedVlanMIBGroup = rbnStackedVlanMIBGroup.setStatus('current')
if mibBuilder.loadTexts: rbnStackedVlanMIBGroup.setDescription('A collection of objects providing statistical information.')
mibBuilder.exportSymbols("RBN-STACKEDVLAN-MIB", rbnStackedVlanMIBGroup=rbnStackedVlanMIBGroup, rbnStackedVlanHCOutMulticastPkts=rbnStackedVlanHCOutMulticastPkts, rbnStackedVlanAggrStatsEntry=rbnStackedVlanAggrStatsEntry, rbnStackedVlanHCInMulticastPkts=rbnStackedVlanHCInMulticastPkts, rbnStackedVlanMIBCompliance=rbnStackedVlanMIBCompliance, rbnStackedVlanMIBConformance=rbnStackedVlanMIBConformance, rbnStackedVlanHCInBroadcastPkts=rbnStackedVlanHCInBroadcastPkts, rbnStackedVlanHCOutOctets=rbnStackedVlanHCOutOctets, rbnStackedVlanMIB=rbnStackedVlanMIB, rbnStackedVlanHCInUcastPkts=rbnStackedVlanHCInUcastPkts, rbnStackedVlanMIBCompliances=rbnStackedVlanMIBCompliances, rbnStackedVlanAggrStatsTable=rbnStackedVlanAggrStatsTable, rbnStackedVlanMIBGroups=rbnStackedVlanMIBGroups, rbnStackedVlanHCInOctets=rbnStackedVlanHCInOctets, rbnStackedVlanHCOutUcastPkts=rbnStackedVlanHCOutUcastPkts, PYSNMP_MODULE_ID=rbnStackedVlanMIB, rbnStackedVlanMIBObjects=rbnStackedVlanMIBObjects, rbnStackedVlanHCOutBroadcastPkts=rbnStackedVlanHCOutBroadcastPkts, rbnStackedVlanIndex=rbnStackedVlanIndex)
