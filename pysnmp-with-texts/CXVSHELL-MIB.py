#
# PySNMP MIB module CXVSHELL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CXVSHELL-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:33:43 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion")
cxMc600, = mibBuilder.importSymbols("CXProduct-SMI", "cxMc600")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Unsigned32, Counter64, Integer32, iso, MibIdentifier, IpAddress, NotificationType, Counter32, ObjectIdentity, TimeTicks, Gauge32, Bits, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Counter64", "Integer32", "iso", "MibIdentifier", "IpAddress", "NotificationType", "Counter32", "ObjectIdentity", "TimeTicks", "Gauge32", "Bits", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
cxVShell = MibIdentifier((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 3))
voxCardsMapTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 3, 1), )
if mibBuilder.loadTexts: voxCardsMapTable.setStatus('mandatory')
if mibBuilder.loadTexts: voxCardsMapTable.setDescription('Voice cards associations with I/O slots numbers. The voice card number corresponds to the slot number: voice card 1 is always associated with slot number 1, voice card 2 is always associated with slot number 2 and so on.')
voxCardsMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 3, 1, 1), ).setIndexNames((0, "CXVSHELL-MIB", "voxCardNo"))
if mibBuilder.loadTexts: voxCardsMapEntry.setStatus('mandatory')
if mibBuilder.loadTexts: voxCardsMapEntry.setDescription('Each row associates a voice card number to an I/O slot number.')
voxCardNo = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voxCardNo.setStatus('mandatory')
if mibBuilder.loadTexts: voxCardNo.setDescription('Displays the voice I/O card number that is enabled. Range of Values: a single digit from 1 to 8 Default Value: none')
voxSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voxSlotNo.setStatus('mandatory')
if mibBuilder.loadTexts: voxSlotNo.setDescription('Determines the I/O slot number. Range of Values: a single digit from 1 to 8 Default Value: none Configuration Changed: administrative')
voxConnStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("recorded-in-config", 1), ("failed", 2), ("connected", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voxConnStatus.setStatus('mandatory')
if mibBuilder.loadTexts: voxConnStatus.setDescription('Displays whether a voice I/O card-to-slot number association has been successful at the VCE layer. Options: recorded-in-config (1): configuration is correct but has not yet been implemeted. System reset required. failed (2): configuration not performed correctly. The configuration may have the correct syntax but the change cannot be implemented at the VCE layer because there is no voice I/O card in the requested slot. If the requested slot is currently occupied by another kind of I/O card, for example an Ethernet card, the same result will occur. connected (3): configuration performed properly and association made. DefaultValue: none')
voxCardRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voxCardRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: voxCardRowStatus.setDescription('Determines the status of the objects in a table row. Options: invalid (1): row is flagged; after the next reset the values will be disabled and the row will be deleted from the table. valid (2): values are enabled. DefaultValue: none Configuration Changed: administrative')
cxvshellMibLevel = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxvshellMibLevel.setStatus('mandatory')
if mibBuilder.loadTexts: cxvshellMibLevel.setDescription('Used to determine current MIB module release supported by the agent. Object is in decimal.')
mibBuilder.exportSymbols("CXVSHELL-MIB", voxSlotNo=voxSlotNo, voxCardsMapEntry=voxCardsMapEntry, voxCardNo=voxCardNo, voxCardRowStatus=voxCardRowStatus, voxConnStatus=voxConnStatus, cxVShell=cxVShell, voxCardsMapTable=voxCardsMapTable, cxvshellMibLevel=cxvshellMibLevel)
