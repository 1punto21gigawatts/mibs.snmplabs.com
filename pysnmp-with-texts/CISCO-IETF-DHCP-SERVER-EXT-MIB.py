#
# PySNMP MIB module CISCO-IETF-DHCP-SERVER-EXT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-IETF-DHCP-SERVER-EXT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:00:11 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint")
cDhcpv4ServerSubnetFreeAddrHighThreshold, cDhcpv4ServerSubnetFreeAddrLowThreshold, cDhcpv4ServerSubnetFreeAddresses, cDhcpv4ServerSubnetEntry, cDhcpv4ServerClientPhysicalAddress = mibBuilder.importSymbols("CISCO-IETF-DHCP-SERVER-MIB", "cDhcpv4ServerSubnetFreeAddrHighThreshold", "cDhcpv4ServerSubnetFreeAddrLowThreshold", "cDhcpv4ServerSubnetFreeAddresses", "cDhcpv4ServerSubnetEntry", "cDhcpv4ServerClientPhysicalAddress")
ciscoExperiment, = mibBuilder.importSymbols("CISCO-SMI", "ciscoExperiment")
ifName, ifIndex = mibBuilder.importSymbols("IF-MIB", "ifName", "ifIndex")
InetAddressIPv4, = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressIPv4")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Counter32, ModuleIdentity, MibIdentifier, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, NotificationType, Bits, TimeTicks, Integer32, Unsigned32, IpAddress, Counter64, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "ModuleIdentity", "MibIdentifier", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "NotificationType", "Bits", "TimeTicks", "Integer32", "Unsigned32", "IpAddress", "Counter64", "iso")
TimeInterval, TextualConvention, TimeStamp, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TimeInterval", "TextualConvention", "TimeStamp", "TruthValue", "DisplayString")
ciscoIetfDhcpSrvExtMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 10, 122))
ciscoIetfDhcpSrvExtMIB.setRevisions(('2007-03-15 12:00', '2005-05-04 12:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoIetfDhcpSrvExtMIB.setRevisionsDescriptions(('Added cDhcpv4SrvExtSubnetTable, cDhcpv4ServerDefaultRouterAddress, cDhcpv4ServerSubnetStartAddress, cDhcpv4ServerSubnetEndAddress. Added cDhcpv4SrvIfCfgTable, cDhcpv4ServerIfLeaseLimitDefault, cDhcpv4ServerIfLeaseLimit. Added 3 new notifications: - cDhcpv4ServerIfLeaseLimitExceeded - cDhcpv4ServerSubnetFreeAddressLow - cDhcpv4ServerSubnetFreeAddressHigh Added 3 new notification control objects: - cDhcpv4ServerIfLeaseLimitEnable - cDhcpv4ServerSubnetFreeAddressLowEnable - cDhcpv4ServerSubnetFreeAddressHighEnable Added OBJECT-GROUP: - cDhcpv4SrvExtNotifyGroup Added cDhcpv4SrvExtComplianceRev1 MODULE-COMPLIANCE', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoIetfDhcpSrvExtMIB.setLastUpdated('200703151200Z')
if mibBuilder.loadTexts: ciscoIetfDhcpSrvExtMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoIetfDhcpSrvExtMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-dhcp-mib@cisco.com')
if mibBuilder.loadTexts: ciscoIetfDhcpSrvExtMIB.setDescription('The MIB module is an extension of the Cisco IETF Dynamic Host Configuration protocol (DHCP) MIB.')
ciscoIetfDhcpv4SrvExtMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 122, 0))
ciscoIetfDhcpv4SrvExtMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 122, 1))
ciscoIetfDhcpv4SrvExtMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 122, 2))
cDhcpv4SrvExtSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 1))
cDhcpv4ExtCounters = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 2))
cDhcpv4IntervalCounters = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 3))
cDhcpv4FailoverCounters = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 4))
cDhcpv4FailoverIntervalCounters = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 5))
cDhcpv4CfgObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 6))
cDhcpv4SrvStartTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 1, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDhcpv4SrvStartTime.setStatus('current')
if mibBuilder.loadTexts: cDhcpv4SrvStartTime.setDescription('The time when the process supporting this server was started.')
cDhcpv4SrvResetTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDhcpv4SrvResetTime.setStatus('current')
if mibBuilder.loadTexts: cDhcpv4SrvResetTime.setDescription('The time when the process supporting this server was last reinitialized. This indicates the time when a server reload or start was executed. At server startup this time is the same as cDhcpv4SrvStartTime.')
cDhcpv4LeaseQueries = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 2, 1), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDhcpv4LeaseQueries.setStatus('current')
if mibBuilder.loadTexts: cDhcpv4LeaseQueries.setDescription('The total number of DHCPLEASEQUERY packets received.')
cDhcpv4StatisticsResetTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 2, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDhcpv4StatisticsResetTime.setStatus('current')
if mibBuilder.loadTexts: cDhcpv4StatisticsResetTime.setDescription('The time the server statistics counters were last reinitialized; the statistics counters are reinitialized by a reset command, server reload, or server start; note also that any configuration change to reporting interval requires a server reload to take effect, which will reinitialize the statistics counters. If statistics are never reset, this time will equal cDhcpv4SrvResetTime, which may also equal cDhcpv4SrvStartTime, if the server was never reloaded.')
cDhcpv4FOPacketsRcvd = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 4, 1), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDhcpv4FOPacketsRcvd.setStatus('current')
if mibBuilder.loadTexts: cDhcpv4FOPacketsRcvd.setDescription('The total total number of failover packets received.')
cDhcpv4FOBindingUpdsRcvd = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 4, 2), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDhcpv4FOBindingUpdsRcvd.setStatus('current')
if mibBuilder.loadTexts: cDhcpv4FOBindingUpdsRcvd.setDescription('The total total number of failover DHCPBNDUPD packets received.')
cDhcpv4FOBindingAcksRcvd = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 4, 3), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDhcpv4FOBindingAcksRcvd.setStatus('current')
if mibBuilder.loadTexts: cDhcpv4FOBindingAcksRcvd.setDescription('The total number of failover DHCPBNDACK packets received.')
cDhcpv4FOBindingNaksRcvd = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 4, 4), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDhcpv4FOBindingNaksRcvd.setStatus('current')
if mibBuilder.loadTexts: cDhcpv4FOBindingNaksRcvd.setDescription('The total number of failover DHCPBNDNAK packets received.')
cDhcpv4FOPoolRequestsRcvd = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 4, 5), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDhcpv4FOPoolRequestsRcvd.setStatus('current')
if mibBuilder.loadTexts: cDhcpv4FOPoolRequestsRcvd.setDescription('The total number of failover DHCPPOOLREQ packets received.')
cDhcpv4FOPollsRcvd = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 4, 6), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDhcpv4FOPollsRcvd.setStatus('current')
if mibBuilder.loadTexts: cDhcpv4FOPollsRcvd.setDescription('The total number of failover DHCPPOLL packets received.')
cDhcpv4FOUpdateRequestsRcvd = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 4, 7), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDhcpv4FOUpdateRequestsRcvd.setStatus('current')
if mibBuilder.loadTexts: cDhcpv4FOUpdateRequestsRcvd.setDescription('The total number of failover DHCPUPDATEREQ packets received.')
cDhcpv4FOUpdateDoneRcvd = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 4, 8), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDhcpv4FOUpdateDoneRcvd.setStatus('current')
if mibBuilder.loadTexts: cDhcpv4FOUpdateDoneRcvd.setDescription('The total number of failover DHCPUPDATEDONE packets received.')
cDhcpv4FOPacketsSent = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 4, 9), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDhcpv4FOPacketsSent.setStatus('current')
if mibBuilder.loadTexts: cDhcpv4FOPacketsSent.setDescription('The total number of failover packets sent.')
cDhcpv4FOBindingUpdatesSent = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 4, 10), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDhcpv4FOBindingUpdatesSent.setStatus('current')
if mibBuilder.loadTexts: cDhcpv4FOBindingUpdatesSent.setDescription('The total number of DHCPBNDUPD packets sent.')
cDhcpv4FOBindingAcksSent = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 4, 11), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDhcpv4FOBindingAcksSent.setStatus('current')
if mibBuilder.loadTexts: cDhcpv4FOBindingAcksSent.setDescription('The total number of DHCPBNDACKS packets sent.')
cDhcpv4FOBindingNaksSent = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 4, 12), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDhcpv4FOBindingNaksSent.setStatus('current')
if mibBuilder.loadTexts: cDhcpv4FOBindingNaksSent.setDescription('The total number of DHCPBNDNAK packets sent.')
cDhcpv4FOPoolResponsesSent = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 4, 13), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDhcpv4FOPoolResponsesSent.setStatus('current')
if mibBuilder.loadTexts: cDhcpv4FOPoolResponsesSent.setDescription('The total number of DHCPPOOLRESP packets sent.')
cDhcpv4FOPollsSent = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 4, 14), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDhcpv4FOPollsSent.setStatus('current')
if mibBuilder.loadTexts: cDhcpv4FOPollsSent.setDescription('The total number of DHCPPOLL packets sent during reporting interval.')
cDhcpv4FOUpdateRequestsSent = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 4, 15), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDhcpv4FOUpdateRequestsSent.setStatus('current')
if mibBuilder.loadTexts: cDhcpv4FOUpdateRequestsSent.setDescription('The total number of DHCPUPDATEREQ packets sent during reporting interval.')
cDhcpv4FOUpdateDoneSent = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 4, 16), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDhcpv4FOUpdateDoneSent.setStatus('current')
if mibBuilder.loadTexts: cDhcpv4FOUpdateDoneSent.setDescription('The total number of DHCPUPDATEDONE packets sent during reporting interval.')
cDhcpv4FOPacketsDropped = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 4, 17), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDhcpv4FOPacketsDropped.setStatus('current')
if mibBuilder.loadTexts: cDhcpv4FOPacketsDropped.setDescription('The total number of failover packets dropped during reporting interval.')
cDhcpv4IntDiscovers = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 3, 1), Unsigned32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDhcpv4IntDiscovers.setReference('RFC2131; RFC2132, section 9.6.')
if mibBuilder.loadTexts: cDhcpv4IntDiscovers.setStatus('current')
if mibBuilder.loadTexts: cDhcpv4IntDiscovers.setDescription('The number of DHCPDISCOVER (option 53 with value 1) packets received during the reporting interval.')
cDhcpv4IntOffers = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 3, 2), Unsigned32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDhcpv4IntOffers.setReference('RFC2131; RFC2132, section 9.6.')
if mibBuilder.loadTexts: cDhcpv4IntOffers.setStatus('current')
if mibBuilder.loadTexts: cDhcpv4IntOffers.setDescription('The number of DHCPOFFER (option 53 with value 2) packets sent during the reporting interval.')
cDhcpv4IntRequests = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 3, 3), Unsigned32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDhcpv4IntRequests.setReference('RFC2131; RFC2132, section 9.6.')
if mibBuilder.loadTexts: cDhcpv4IntRequests.setStatus('current')
if mibBuilder.loadTexts: cDhcpv4IntRequests.setDescription('The number of DHCPREQUEST (option 53 with value 3) packets received during the reporting interval.')
cDhcpv4IntDeclines = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 3, 4), Unsigned32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDhcpv4IntDeclines.setReference('RFC2131; RFC2132, section 9.6.')
if mibBuilder.loadTexts: cDhcpv4IntDeclines.setStatus('current')
if mibBuilder.loadTexts: cDhcpv4IntDeclines.setDescription('The number of DHCPDECLINE (option 53 with value 4) packets received during the reporting interval.')
cDhcpv4IntAcks = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 3, 5), Unsigned32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDhcpv4IntAcks.setReference('RFC2131; RFC2132, section 9.6.')
if mibBuilder.loadTexts: cDhcpv4IntAcks.setStatus('current')
if mibBuilder.loadTexts: cDhcpv4IntAcks.setDescription('The number of DHCPACK (option 53 with value 5) packets sent during the reporting interval.')
cDhcpv4IntNaks = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 3, 6), Unsigned32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDhcpv4IntNaks.setReference('RFC2131; RFC2132, section 9.6.')
if mibBuilder.loadTexts: cDhcpv4IntNaks.setStatus('current')
if mibBuilder.loadTexts: cDhcpv4IntNaks.setDescription('The number of DHCPNACK (option 53 with value 6) packets sent during the reporting interval.')
cDhcpv4IntReleases = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 3, 7), Unsigned32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDhcpv4IntReleases.setReference('RFC2131; RFC2132, section 9.6.')
if mibBuilder.loadTexts: cDhcpv4IntReleases.setStatus('current')
if mibBuilder.loadTexts: cDhcpv4IntReleases.setDescription('The number of DHCPRELEASE (option 53 with value 7) packets received during the reporting interval.')
cDhcpv4IntInforms = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 3, 8), Unsigned32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDhcpv4IntInforms.setReference('RFC2131; RFC2132, section 9.6.')
if mibBuilder.loadTexts: cDhcpv4IntInforms.setStatus('current')
if mibBuilder.loadTexts: cDhcpv4IntInforms.setDescription('The number of DHCPINFORM (option 53 with value 8) packets received during the reporting interval.')
cDhcpv4IntLeaseQueries = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 3, 9), Unsigned32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDhcpv4IntLeaseQueries.setStatus('current')
if mibBuilder.loadTexts: cDhcpv4IntLeaseQueries.setDescription('The total number of DHCPLEASEQUERY packets received during the reporting interval.')
cDhcpv4IntReqBuffersInUse = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 3, 10), Gauge32()).setUnits('buffers').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDhcpv4IntReqBuffersInUse.setStatus('current')
if mibBuilder.loadTexts: cDhcpv4IntReqBuffersInUse.setDescription('The number of request buffers in use during the reporting interval.')
cDhcpv4IntRespBuffersInUse = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 3, 11), Gauge32()).setUnits('buffers').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDhcpv4IntRespBuffersInUse.setStatus('current')
if mibBuilder.loadTexts: cDhcpv4IntRespBuffersInUse.setDescription('The number of response buffers in use at the end of the reporting interval.')
cDhcpv4IntEndTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 3, 12), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDhcpv4IntEndTime.setStatus('current')
if mibBuilder.loadTexts: cDhcpv4IntEndTime.setDescription('The time when the server last calculated the sample statistics.')
cDhcpv4IntDeltaTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 3, 13), TimeInterval()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDhcpv4IntDeltaTime.setStatus('current')
if mibBuilder.loadTexts: cDhcpv4IntDeltaTime.setDescription('The interval in seconds over which the server last calculated the sample interval statistics. This is the configured reporting interval and the statistics are reset since the last cDhcpv4IntEndTime.')
cDhcpv4FOIntPacketsRcvd = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 5, 1), Unsigned32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDhcpv4FOIntPacketsRcvd.setStatus('current')
if mibBuilder.loadTexts: cDhcpv4FOIntPacketsRcvd.setDescription('The number of failover packets received during the reporting interval.')
cDhcpv4FOIntBindingUpdsRcvd = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 5, 2), Unsigned32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDhcpv4FOIntBindingUpdsRcvd.setStatus('current')
if mibBuilder.loadTexts: cDhcpv4FOIntBindingUpdsRcvd.setDescription('The number of failover DHCPBNDUPD packets received during the reporting interval.')
cDhcpv4FOIntBindingAcksRcvd = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 5, 3), Unsigned32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDhcpv4FOIntBindingAcksRcvd.setStatus('current')
if mibBuilder.loadTexts: cDhcpv4FOIntBindingAcksRcvd.setDescription('The number of failover DHCPBNDACK packets received during the reporting interval.')
cDhcpv4FOIntBindingNaksRcvd = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 5, 4), Unsigned32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDhcpv4FOIntBindingNaksRcvd.setStatus('current')
if mibBuilder.loadTexts: cDhcpv4FOIntBindingNaksRcvd.setDescription('The number of failover DHCPBNDNAK packets received during reporting interval.')
cDhcpv4FOIntPoolRequestsRcvd = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 5, 5), Unsigned32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDhcpv4FOIntPoolRequestsRcvd.setStatus('current')
if mibBuilder.loadTexts: cDhcpv4FOIntPoolRequestsRcvd.setDescription('The number of failover DHCPPOOLREQ packets received during the reporting interval.')
cDhcpv4FOIntPollsRcvd = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 5, 6), Unsigned32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDhcpv4FOIntPollsRcvd.setStatus('current')
if mibBuilder.loadTexts: cDhcpv4FOIntPollsRcvd.setDescription('The number of failover DHCPPOLL packets received during the reporting interval.')
cDhcpv4FOIntUpdateReqsRcvd = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 5, 7), Unsigned32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDhcpv4FOIntUpdateReqsRcvd.setStatus('current')
if mibBuilder.loadTexts: cDhcpv4FOIntUpdateReqsRcvd.setDescription('The number of failover DHCPUPDATEREQ packets received during the reporting interval.')
cDhcpv4FOIntUpdateDoneRcvd = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 5, 8), Unsigned32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDhcpv4FOIntUpdateDoneRcvd.setStatus('current')
if mibBuilder.loadTexts: cDhcpv4FOIntUpdateDoneRcvd.setDescription('The number of failover DHCPUPDATEDONE packets received during the reporting interval.')
cDhcpv4FOIntPacketsSent = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 5, 9), Unsigned32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDhcpv4FOIntPacketsSent.setStatus('current')
if mibBuilder.loadTexts: cDhcpv4FOIntPacketsSent.setDescription('The number of failover packets sent during the reporting interval.')
cDhcpv4FOIntBindingUpdsSent = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 5, 10), Unsigned32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDhcpv4FOIntBindingUpdsSent.setStatus('current')
if mibBuilder.loadTexts: cDhcpv4FOIntBindingUpdsSent.setDescription('The number of DHCPBNDUPD packets sent during the reporting interval.')
cDhcpv4FOIntBindingAcksSent = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 5, 11), Unsigned32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDhcpv4FOIntBindingAcksSent.setStatus('current')
if mibBuilder.loadTexts: cDhcpv4FOIntBindingAcksSent.setDescription('The number of DHCPBNDACKS packets sent during the reporting interval.')
cDhcpv4FOIntBindingNaksSent = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 5, 12), Unsigned32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDhcpv4FOIntBindingNaksSent.setStatus('current')
if mibBuilder.loadTexts: cDhcpv4FOIntBindingNaksSent.setDescription('The number of DHCPBNDNAK packets sent during the reporting interval.')
cDhcpv4FOIntPoolResponsesSent = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 5, 13), Unsigned32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDhcpv4FOIntPoolResponsesSent.setStatus('current')
if mibBuilder.loadTexts: cDhcpv4FOIntPoolResponsesSent.setDescription('The number of DHCPPOOLRESP packets sent during the reporting interval.')
cDhcpv4FOIntPollsSent = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 5, 14), Unsigned32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDhcpv4FOIntPollsSent.setStatus('current')
if mibBuilder.loadTexts: cDhcpv4FOIntPollsSent.setDescription('The number of DHCPPOLL packets sent during the reporting interval.')
cDhcpv4FOIntUpdateReqsSent = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 5, 15), Unsigned32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDhcpv4FOIntUpdateReqsSent.setStatus('current')
if mibBuilder.loadTexts: cDhcpv4FOIntUpdateReqsSent.setDescription('The number of DHCPUPDATEREQ packets sent during the reporting interval.')
cDhcpv4FOIntUpdateDoneSent = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 5, 16), Unsigned32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDhcpv4FOIntUpdateDoneSent.setStatus('current')
if mibBuilder.loadTexts: cDhcpv4FOIntUpdateDoneSent.setDescription('The number of DHCPUPDATEDONE packets sent during the reporting interval.')
cDhcpv4FOIntPacketsDropped = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 5, 17), Unsigned32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDhcpv4FOIntPacketsDropped.setStatus('current')
if mibBuilder.loadTexts: cDhcpv4FOIntPacketsDropped.setDescription('The number of failover packets dropped during the reporting interval.')
cDhcpv4FOIntEndTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 5, 18), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDhcpv4FOIntEndTime.setStatus('current')
if mibBuilder.loadTexts: cDhcpv4FOIntEndTime.setDescription('The time when the server last calculated the interval statistics.')
cDhcpv4FOIntDeltaTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 5, 19), TimeInterval()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDhcpv4FOIntDeltaTime.setStatus('current')
if mibBuilder.loadTexts: cDhcpv4FOIntDeltaTime.setDescription('The interval in seconds over which the server last calculated the sample interval statistics. This is the configured reporting interval and the statistics are reset since the last cDhcpv4IntEndTime.')
cDhcpv4ConfigIntervalSample = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 6, 1), TimeInterval()).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cDhcpv4ConfigIntervalSample.setStatus('current')
if mibBuilder.loadTexts: cDhcpv4ConfigIntervalSample.setDescription('Configures the sample time for the various interval counters.')
cDhcpv4SrvExtSubnetTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 6, 2), )
if mibBuilder.loadTexts: cDhcpv4SrvExtSubnetTable.setStatus('current')
if mibBuilder.loadTexts: cDhcpv4SrvExtSubnetTable.setDescription('This table augments the cDhcpv4ServerSubnetTable.')
cDhcpv4SrvExtSubnetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 6, 2, 1), )
cDhcpv4ServerSubnetEntry.registerAugmentions(("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4SrvExtSubnetEntry"))
cDhcpv4SrvExtSubnetEntry.setIndexNames(*cDhcpv4ServerSubnetEntry.getIndexNames())
if mibBuilder.loadTexts: cDhcpv4SrvExtSubnetEntry.setStatus('current')
if mibBuilder.loadTexts: cDhcpv4SrvExtSubnetEntry.setDescription('Entry contains additional subnet information not defined in cDhcpv4ServerSubnetEntry.')
cDhcpv4ServerDefaultRouterAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 6, 2, 1, 1), InetAddressIPv4()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cDhcpv4ServerDefaultRouterAddress.setStatus('current')
if mibBuilder.loadTexts: cDhcpv4ServerDefaultRouterAddress.setDescription('The default router IPv4 address in this subnet.')
cDhcpv4ServerSubnetStartAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 6, 2, 1, 2), InetAddressIPv4()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDhcpv4ServerSubnetStartAddress.setStatus('current')
if mibBuilder.loadTexts: cDhcpv4ServerSubnetStartAddress.setDescription('The IPv4 address of the first address in the subnet. The value of cDhcpv4ServerSubnetStartAddress MUST be less than or equal to the value of cDhcpv4ServerSubnetEndAddress.')
cDhcpv4ServerSubnetEndAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 6, 2, 1, 3), InetAddressIPv4()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDhcpv4ServerSubnetEndAddress.setStatus('current')
if mibBuilder.loadTexts: cDhcpv4ServerSubnetEndAddress.setDescription('The IPv4 address of the last address in the subnet. The value of cDhcpv4ServerSubnetEndAddress MUST be greater than or equal to the value of cDhcpv4ServerSubnetStartAddress.')
cDhcpv4ServerIfLeaseLimitEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 6, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cDhcpv4ServerIfLeaseLimitEnable.setStatus('current')
if mibBuilder.loadTexts: cDhcpv4ServerIfLeaseLimitEnable.setDescription("This object specifies if the DHCP module should generate 'cDhcpv4ServerIfLeaseLimitExceeded' notifications. If value of this object is 'true', then the notification is generated when the number of leases offered to DHCP clients behind an interface is reached based on per limit lease configuration command. If it is 'false', the notification is not generated.")
cDhcpv4ServerSubnetFreeAddressLowEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 6, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cDhcpv4ServerSubnetFreeAddressLowEnable.setStatus('current')
if mibBuilder.loadTexts: cDhcpv4ServerSubnetFreeAddressLowEnable.setDescription("This object specifies if the DHCP module should generate 'cDhcpv4ServerSubnetFreeAddressLow' notifications. If value of this object is 'true', then the notification is generated when the number of available IPv4 addresses for a particular subnet has fallen below the value of cDhcpv4ServerSubnetFreeAddrLowThreshold for that subnet. If it is 'false', the notification is not generated.")
cDhcpv4ServerSubnetFreeAddressHighEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 6, 5), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cDhcpv4ServerSubnetFreeAddressHighEnable.setStatus('current')
if mibBuilder.loadTexts: cDhcpv4ServerSubnetFreeAddressHighEnable.setDescription("This object specifies if the DHCP module should generate 'cDhcpv4ServerSubnetFreeAddressHigh' notifications. If value of this object is 'true', then the notification is generated when the number of available IPv4 addresses for a particular subnet has fallen below the value of cDhcpv4ServerSubnetFreeAddrHighThreshold for that subnet. If it is 'false', the notification is not generated.")
cDhcpv4ServerIfLeaseLimitDefault = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 6, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cDhcpv4ServerIfLeaseLimitDefault.setStatus('current')
if mibBuilder.loadTexts: cDhcpv4ServerIfLeaseLimitDefault.setDescription("The default number of Dynamic Host Configuration Protocol (DHCP) clients allowed for an interface. Refer to 'cDhcpv4ServerIfLeaseLimit'.")
cDhcpv4SrvIfCfgTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 6, 7), )
if mibBuilder.loadTexts: cDhcpv4SrvIfCfgTable.setStatus('current')
if mibBuilder.loadTexts: cDhcpv4SrvIfCfgTable.setDescription('A table of the DHCP interface configuration data maintained by the server.')
cDhcpv4SrvIfCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 6, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cDhcpv4SrvIfCfgEntry.setStatus('current')
if mibBuilder.loadTexts: cDhcpv4SrvIfCfgEntry.setDescription('Entry consists of the DHCP configuration data applied to the interface.')
cDhcpv4ServerIfLeaseLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 122, 1, 6, 7, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cDhcpv4ServerIfLeaseLimit.setStatus('current')
if mibBuilder.loadTexts: cDhcpv4ServerIfLeaseLimit.setDescription("The number of Dynamic Host Configuration Protocol (DHCP) clients allowed for an interface. The value of this object is equal to the value of the 'cDhcpv4ServerIfLeaseLimitDefault' for the interface that does not have the interface lease limit configuration. The value of the 'cDhcpv4ServerIfLeaseLimit' object reflects the lease limit on that interface (whether it's configured with a value specifically for that interface or if the value of 'cDhcpv4ServerIfLeaseLimitDefault' applies). When this lease limit is reached or exceeded, the cDhcpv4ServerIfLeaseLimitExceeded notification will be generated if cDhcpv4ServerIfLeaseLimitEnable is enabled.")
cDhcpv4SrvExtNotifyPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 122, 0, 2))
cDhcpv4SrvExtNotify = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 122, 0, 2, 0))
cDhcpv4ServerIfLeaseLimitExceeded = NotificationType((1, 3, 6, 1, 4, 1, 9, 10, 122, 0, 2, 0, 1)).setObjects(("IF-MIB", "ifName"), ("CISCO-IETF-DHCP-SERVER-MIB", "cDhcpv4ServerClientPhysicalAddress"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4ServerIfLeaseLimit"))
if mibBuilder.loadTexts: cDhcpv4ServerIfLeaseLimitExceeded.setStatus('current')
if mibBuilder.loadTexts: cDhcpv4ServerIfLeaseLimitExceeded.setDescription('This notification indicates when a client has attempted to obtain a lease and the lease was not granted because the number of leases granted to clients on the receiving interface is equal to cDhcpv4ServerIfLeaseLimit.')
cDhcpv4ServerSubnetFreeAddressLow = NotificationType((1, 3, 6, 1, 4, 1, 9, 10, 122, 0, 2, 0, 2)).setObjects(("CISCO-IETF-DHCP-SERVER-MIB", "cDhcpv4ServerSubnetFreeAddresses"), ("CISCO-IETF-DHCP-SERVER-MIB", "cDhcpv4ServerSubnetFreeAddrLowThreshold"))
if mibBuilder.loadTexts: cDhcpv4ServerSubnetFreeAddressLow.setStatus('current')
if mibBuilder.loadTexts: cDhcpv4ServerSubnetFreeAddressLow.setDescription('This notification indicates that the number of available IPv4 addresses for a particular subnet has fallen below the corresponding value of cDhcpv4ServerSubnetFreeAddrLowThreshold for that shared network.')
cDhcpv4ServerSubnetFreeAddressHigh = NotificationType((1, 3, 6, 1, 4, 1, 9, 10, 122, 0, 2, 0, 3)).setObjects(("CISCO-IETF-DHCP-SERVER-MIB", "cDhcpv4ServerSubnetFreeAddresses"), ("CISCO-IETF-DHCP-SERVER-MIB", "cDhcpv4ServerSubnetFreeAddrHighThreshold"))
if mibBuilder.loadTexts: cDhcpv4ServerSubnetFreeAddressHigh.setStatus('current')
if mibBuilder.loadTexts: cDhcpv4ServerSubnetFreeAddressHigh.setDescription('This notification indicates that the number of available IPv4 addresses for a particular subnet has risen above the corresponding value of cDhcpv4ServerSubnetFreeAddrHighThreshold for that shared network.')
cDhcpv4SrvExtCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 122, 2, 1))
cDhcpv4SrvExtGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 122, 2, 2))
cDhcpv4SrvExtCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 122, 2, 1, 1)).setObjects(("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4SrvExtSystemObjects"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4ExtCountersGroup"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4CountersIntervalGroup"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4FOCountersGroup"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4FOCountersIntervalGroup"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4CfgObjectsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cDhcpv4SrvExtCompliance = cDhcpv4SrvExtCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: cDhcpv4SrvExtCompliance.setDescription('This group describes the requirements for conformance to the DHCP Server extension MIB. A DHCPv4 server implementation is only required to support IPv4 addresses.')
cDhcpv4SrvExtComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 122, 2, 1, 2)).setObjects(("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4SrvExtSystemObjects"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4ExtCountersGroup"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4CountersIntervalGroup"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4FOCountersGroup"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4FOCountersIntervalGroup"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4CfgObjectsGroup"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4SrvExtNotifyGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cDhcpv4SrvExtComplianceRev1 = cDhcpv4SrvExtComplianceRev1.setStatus('current')
if mibBuilder.loadTexts: cDhcpv4SrvExtComplianceRev1.setDescription('This group describes the requirements for conformance to the DHCP Server extension MIB. A DHCPv4 server implementation is only required to support IPv4 addresses.')
cDhcpv4SrvExtSystemObjects = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 122, 2, 2, 1)).setObjects(("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4SrvStartTime"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4SrvResetTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cDhcpv4SrvExtSystemObjects = cDhcpv4SrvExtSystemObjects.setStatus('current')
if mibBuilder.loadTexts: cDhcpv4SrvExtSystemObjects.setDescription('A collection of objects providing overall system information for a DHCPv4 server.')
cDhcpv4ExtCountersGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 122, 2, 2, 2)).setObjects(("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4LeaseQueries"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4StatisticsResetTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cDhcpv4ExtCountersGroup = cDhcpv4ExtCountersGroup.setStatus('current')
if mibBuilder.loadTexts: cDhcpv4ExtCountersGroup.setDescription('A collection of extension objects providing counter values for a DHCPv4 server.')
cDhcpv4CountersIntervalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 122, 2, 2, 3)).setObjects(("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4IntDiscovers"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4IntOffers"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4IntRequests"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4IntDeclines"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4IntAcks"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4IntNaks"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4IntInforms"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4IntLeaseQueries"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4IntReleases"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4IntRespBuffersInUse"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4IntReqBuffersInUse"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4IntEndTime"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4IntDeltaTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cDhcpv4CountersIntervalGroup = cDhcpv4CountersIntervalGroup.setStatus('current')
if mibBuilder.loadTexts: cDhcpv4CountersIntervalGroup.setDescription('A collection of extension objects providing interval counter values for a DHCPv4 server.')
cDhcpv4FOCountersGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 122, 2, 2, 4)).setObjects(("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4FOPacketsRcvd"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4FOBindingUpdsRcvd"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4FOBindingAcksRcvd"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4FOBindingNaksRcvd"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4FOPoolRequestsRcvd"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4FOPollsRcvd"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4FOUpdateRequestsRcvd"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4FOUpdateDoneRcvd"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4FOPacketsSent"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4FOBindingUpdatesSent"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4FOBindingAcksSent"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4FOBindingNaksSent"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4FOPoolResponsesSent"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4FOPollsSent"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4FOUpdateRequestsSent"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4FOUpdateDoneSent"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4FOPacketsDropped"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cDhcpv4FOCountersGroup = cDhcpv4FOCountersGroup.setStatus('current')
if mibBuilder.loadTexts: cDhcpv4FOCountersGroup.setDescription('A collection of objects providing failover counter values for a DHCPv4 server.')
cDhcpv4FOCountersIntervalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 122, 2, 2, 5)).setObjects(("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4FOIntPacketsRcvd"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4FOIntBindingUpdsRcvd"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4FOIntBindingAcksRcvd"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4FOIntBindingNaksRcvd"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4FOIntPoolRequestsRcvd"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4FOIntPollsRcvd"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4FOIntUpdateReqsRcvd"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4FOIntUpdateDoneRcvd"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4FOIntPacketsSent"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4FOIntBindingUpdsSent"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4FOIntBindingAcksSent"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4FOIntBindingNaksSent"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4FOIntPoolResponsesSent"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4FOIntPollsSent"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4FOIntUpdateReqsSent"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4FOIntUpdateDoneSent"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4FOIntPacketsDropped"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4FOIntEndTime"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4FOIntDeltaTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cDhcpv4FOCountersIntervalGroup = cDhcpv4FOCountersIntervalGroup.setStatus('current')
if mibBuilder.loadTexts: cDhcpv4FOCountersIntervalGroup.setDescription('A collection of objects providing failover interval counter values for a DHCPv4 server.')
cDhcpv4CfgObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 122, 2, 2, 6)).setObjects(("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4ConfigIntervalSample"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4ServerDefaultRouterAddress"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4ServerSubnetStartAddress"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4ServerSubnetEndAddress"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4ServerIfLeaseLimitEnable"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4ServerSubnetFreeAddressLowEnable"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4ServerSubnetFreeAddressHighEnable"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4ServerIfLeaseLimitDefault"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4ServerIfLeaseLimit"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cDhcpv4CfgObjectsGroup = cDhcpv4CfgObjectsGroup.setStatus('current')
if mibBuilder.loadTexts: cDhcpv4CfgObjectsGroup.setDescription('Objects providing configuration information for a DHCPv4 server.')
cDhcpv4SrvExtNotifyGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 10, 122, 2, 2, 7)).setObjects(("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4ServerIfLeaseLimitExceeded"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4ServerSubnetFreeAddressLow"), ("CISCO-IETF-DHCP-SERVER-EXT-MIB", "cDhcpv4ServerSubnetFreeAddressHigh"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cDhcpv4SrvExtNotifyGroup = cDhcpv4SrvExtNotifyGroup.setStatus('current')
if mibBuilder.loadTexts: cDhcpv4SrvExtNotifyGroup.setDescription('Notifications belonging to the cDhcpv4SrvExtNotify group.')
mibBuilder.exportSymbols("CISCO-IETF-DHCP-SERVER-EXT-MIB", cDhcpv4FailoverIntervalCounters=cDhcpv4FailoverIntervalCounters, cDhcpv4IntReqBuffersInUse=cDhcpv4IntReqBuffersInUse, cDhcpv4FOIntUpdateReqsSent=cDhcpv4FOIntUpdateReqsSent, cDhcpv4ServerSubnetFreeAddressHighEnable=cDhcpv4ServerSubnetFreeAddressHighEnable, cDhcpv4IntLeaseQueries=cDhcpv4IntLeaseQueries, cDhcpv4SrvExtSubnetEntry=cDhcpv4SrvExtSubnetEntry, cDhcpv4FOPacketsRcvd=cDhcpv4FOPacketsRcvd, cDhcpv4ServerSubnetFreeAddressLowEnable=cDhcpv4ServerSubnetFreeAddressLowEnable, cDhcpv4FOIntBindingUpdsRcvd=cDhcpv4FOIntBindingUpdsRcvd, cDhcpv4IntDiscovers=cDhcpv4IntDiscovers, cDhcpv4ServerSubnetFreeAddressLow=cDhcpv4ServerSubnetFreeAddressLow, cDhcpv4FOUpdateDoneSent=cDhcpv4FOUpdateDoneSent, cDhcpv4SrvStartTime=cDhcpv4SrvStartTime, cDhcpv4FOBindingAcksSent=cDhcpv4FOBindingAcksSent, cDhcpv4FOUpdateDoneRcvd=cDhcpv4FOUpdateDoneRcvd, cDhcpv4FOIntUpdateDoneSent=cDhcpv4FOIntUpdateDoneSent, cDhcpv4FOIntPollsSent=cDhcpv4FOIntPollsSent, cDhcpv4ServerSubnetFreeAddressHigh=cDhcpv4ServerSubnetFreeAddressHigh, cDhcpv4IntReleases=cDhcpv4IntReleases, ciscoIetfDhcpv4SrvExtMIBNotifs=ciscoIetfDhcpv4SrvExtMIBNotifs, cDhcpv4FOIntUpdateReqsRcvd=cDhcpv4FOIntUpdateReqsRcvd, cDhcpv4SrvExtNotifyPrefix=cDhcpv4SrvExtNotifyPrefix, cDhcpv4FOIntPollsRcvd=cDhcpv4FOIntPollsRcvd, ciscoIetfDhcpSrvExtMIB=ciscoIetfDhcpSrvExtMIB, cDhcpv4SrvIfCfgTable=cDhcpv4SrvIfCfgTable, cDhcpv4ConfigIntervalSample=cDhcpv4ConfigIntervalSample, cDhcpv4FOPacketsSent=cDhcpv4FOPacketsSent, cDhcpv4SrvExtSubnetTable=cDhcpv4SrvExtSubnetTable, cDhcpv4StatisticsResetTime=cDhcpv4StatisticsResetTime, cDhcpv4FOUpdateRequestsSent=cDhcpv4FOUpdateRequestsSent, cDhcpv4ServerIfLeaseLimit=cDhcpv4ServerIfLeaseLimit, cDhcpv4SrvExtSystem=cDhcpv4SrvExtSystem, cDhcpv4SrvResetTime=cDhcpv4SrvResetTime, cDhcpv4LeaseQueries=cDhcpv4LeaseQueries, cDhcpv4IntEndTime=cDhcpv4IntEndTime, cDhcpv4FOIntBindingUpdsSent=cDhcpv4FOIntBindingUpdsSent, cDhcpv4ServerIfLeaseLimitDefault=cDhcpv4ServerIfLeaseLimitDefault, ciscoIetfDhcpv4SrvExtMIBObjects=ciscoIetfDhcpv4SrvExtMIBObjects, cDhcpv4FOIntBindingNaksRcvd=cDhcpv4FOIntBindingNaksRcvd, cDhcpv4ServerSubnetStartAddress=cDhcpv4ServerSubnetStartAddress, cDhcpv4FOBindingUpdsRcvd=cDhcpv4FOBindingUpdsRcvd, cDhcpv4FOIntBindingNaksSent=cDhcpv4FOIntBindingNaksSent, cDhcpv4SrvExtNotifyGroup=cDhcpv4SrvExtNotifyGroup, cDhcpv4FOPollsSent=cDhcpv4FOPollsSent, cDhcpv4CountersIntervalGroup=cDhcpv4CountersIntervalGroup, cDhcpv4FOBindingAcksRcvd=cDhcpv4FOBindingAcksRcvd, PYSNMP_MODULE_ID=ciscoIetfDhcpSrvExtMIB, cDhcpv4FOBindingNaksSent=cDhcpv4FOBindingNaksSent, cDhcpv4IntervalCounters=cDhcpv4IntervalCounters, cDhcpv4IntNaks=cDhcpv4IntNaks, cDhcpv4IntAcks=cDhcpv4IntAcks, cDhcpv4SrvExtCompliances=cDhcpv4SrvExtCompliances, cDhcpv4FOIntPoolResponsesSent=cDhcpv4FOIntPoolResponsesSent, cDhcpv4FOBindingUpdatesSent=cDhcpv4FOBindingUpdatesSent, cDhcpv4FOIntPacketsRcvd=cDhcpv4FOIntPacketsRcvd, cDhcpv4FOPacketsDropped=cDhcpv4FOPacketsDropped, cDhcpv4IntInforms=cDhcpv4IntInforms, cDhcpv4ExtCounters=cDhcpv4ExtCounters, cDhcpv4SrvExtNotify=cDhcpv4SrvExtNotify, cDhcpv4SrvExtSystemObjects=cDhcpv4SrvExtSystemObjects, cDhcpv4SrvIfCfgEntry=cDhcpv4SrvIfCfgEntry, cDhcpv4ServerIfLeaseLimitEnable=cDhcpv4ServerIfLeaseLimitEnable, cDhcpv4FOCountersIntervalGroup=cDhcpv4FOCountersIntervalGroup, cDhcpv4IntDeclines=cDhcpv4IntDeclines, cDhcpv4CfgObjectsGroup=cDhcpv4CfgObjectsGroup, cDhcpv4ServerSubnetEndAddress=cDhcpv4ServerSubnetEndAddress, cDhcpv4FOIntBindingAcksRcvd=cDhcpv4FOIntBindingAcksRcvd, cDhcpv4FOPollsRcvd=cDhcpv4FOPollsRcvd, cDhcpv4FOPoolResponsesSent=cDhcpv4FOPoolResponsesSent, cDhcpv4FOIntPacketsSent=cDhcpv4FOIntPacketsSent, cDhcpv4IntRequests=cDhcpv4IntRequests, cDhcpv4FOPoolRequestsRcvd=cDhcpv4FOPoolRequestsRcvd, cDhcpv4FOIntPoolRequestsRcvd=cDhcpv4FOIntPoolRequestsRcvd, cDhcpv4SrvExtGroups=cDhcpv4SrvExtGroups, cDhcpv4CfgObjects=cDhcpv4CfgObjects, cDhcpv4ServerDefaultRouterAddress=cDhcpv4ServerDefaultRouterAddress, cDhcpv4FOIntUpdateDoneRcvd=cDhcpv4FOIntUpdateDoneRcvd, cDhcpv4IntRespBuffersInUse=cDhcpv4IntRespBuffersInUse, cDhcpv4FOCountersGroup=cDhcpv4FOCountersGroup, cDhcpv4IntOffers=cDhcpv4IntOffers, cDhcpv4FOUpdateRequestsRcvd=cDhcpv4FOUpdateRequestsRcvd, cDhcpv4FOIntBindingAcksSent=cDhcpv4FOIntBindingAcksSent, cDhcpv4SrvExtCompliance=cDhcpv4SrvExtCompliance, cDhcpv4FOIntPacketsDropped=cDhcpv4FOIntPacketsDropped, cDhcpv4IntDeltaTime=cDhcpv4IntDeltaTime, cDhcpv4SrvExtComplianceRev1=cDhcpv4SrvExtComplianceRev1, cDhcpv4ExtCountersGroup=cDhcpv4ExtCountersGroup, ciscoIetfDhcpv4SrvExtMIBConform=ciscoIetfDhcpv4SrvExtMIBConform, cDhcpv4FOBindingNaksRcvd=cDhcpv4FOBindingNaksRcvd, cDhcpv4FailoverCounters=cDhcpv4FailoverCounters, cDhcpv4ServerIfLeaseLimitExceeded=cDhcpv4ServerIfLeaseLimitExceeded, cDhcpv4FOIntEndTime=cDhcpv4FOIntEndTime, cDhcpv4FOIntDeltaTime=cDhcpv4FOIntDeltaTime)
