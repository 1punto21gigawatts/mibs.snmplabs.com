#
# PySNMP MIB module CHIPAGENT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CHIPAGENT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:48:48 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion")
DisplayString, = mibBuilder.importSymbols("RFC1155-SMI", "DisplayString")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
TimeTicks, enterprises, ObjectIdentity, Unsigned32, iso, ModuleIdentity, Counter32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Counter64, Integer32, NotificationType, Gauge32, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "enterprises", "ObjectIdentity", "Unsigned32", "iso", "ModuleIdentity", "Counter32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Counter64", "Integer32", "NotificationType", "Gauge32", "Bits")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
chipcom = MibIdentifier((1, 3, 6, 1, 4, 1, 49))
chipmib02 = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2))
chipGen = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 1))
chipEcho = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 2))
chipProducts = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3))
chipExperiment = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 4))
chipTTY = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 5))
chipTFTP = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 6))
chipDownload = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 7))
online = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1))
oebm = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 2))
midnight = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 3))
workGroupHub = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 4))
emm = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 5))
chipBridge = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 6))
trmm = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 7))
fmm = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 8))
focus1 = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 9))
oeim = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 10))
chipExpTokenRing = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 4, 1))
dot1dBridge = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 4, 14))
dot5 = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 4, 1, 1))
olAgents = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 1))
olConc = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 2))
olEnv = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 3))
olModules = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4))
olNets = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5))
olGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 6))
olAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 7))
olSpecMods = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4))
ol50nnMCTL = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 3))
ol51nnMMGT = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 4))
ol51nnMFIB = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 5))
ol51nnMUTP = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 6))
ol51nnMTP = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 7))
ol51nnMBNC = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 8))
ol51nnBEE = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 9))
ol51nnRES = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 10))
ol51nnREE = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 11))
ol51nnMAUIF = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 12))
ol51nnMAUIM = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 13))
ol5208MTP = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 14))
ol51nnMFP = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 15))
ol51nnMFBP = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 16))
ol51nnMTPL = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 17))
ol51nnMTPPL = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 18))
ol52nnMTP = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 19))
ol52nnMFR = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 20))
ol51nnMTS = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 21))
ol51nnMFL = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 22))
ol50nnMRCTL = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 23))
ol51nnMFB = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 24))
ol53nnMMGT = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25))
ol53nnMFBMIC = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 26))
ol53nnMFIBST = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 27))
ol53nnMSTP = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 28))
ol51nnMTPCL = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 29))
ol52nnBTT = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 30))
ol51nnIx = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 31))
ol52nnMMGT = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 32))
ol50nnMHCTL = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 33))
olNet = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 1))
olEnet = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2))
olTRnet = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3))
olFDDInet = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 4))
hubSysGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 4, 1))
hardwareGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 4, 2))
softwareGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 4, 3))
hubGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 4, 4))
boardGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 4, 5))
portGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 4, 6))
alarmGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 4, 7))
olThresh = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 7, 1))
olThreshControl = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 7, 1, 1))
chipGenProduct = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 7))).clone(namedValues=NamedValues(("product-5100M-MGT", 1), ("product-5102B-EE", 2), ("product-8383B", 3), ("product-5112H-UTP", 4), ("product-5300M-MGT", 5), ("product-5200M-MGT", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chipGenProduct.setStatus('mandatory')
if mibBuilder.loadTexts: chipGenProduct.setDescription('The product type represented by this agent.')
chipGenServiceDate = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: chipGenServiceDate.setStatus('mandatory')
if mibBuilder.loadTexts: chipGenServiceDate.setDescription("The date that the product was last serviced in the format yymmdd. If this date is unknown, the value of this object is '000000'.")
chipGenNetman = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chipGenNetman.setStatus('mandatory')
if mibBuilder.loadTexts: chipGenNetman.setDescription('The IP (source) Address of the last authenticated SNMP PDU received by this entity before this request. An IP Address of 00.00.00.00 represents the default value.')
chipGenDiagnostics = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("passed", 1), ("failed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chipGenDiagnostics.setStatus('mandatory')
if mibBuilder.loadTexts: chipGenDiagnostics.setDescription("The result of this product's diagnostic test(s). If any test fails, this will have the failed(2) value. Note, many products do not operate after a diagnostic failure. In this case, no SNMP communication would be available.")
chipGenSerial = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chipGenSerial.setStatus('mandatory')
if mibBuilder.loadTexts: chipGenSerial.setDescription('The serial number of this product.')
chipGenID = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chipGenID.setStatus('mandatory')
if mibBuilder.loadTexts: chipGenID.setDescription('A unique ID used for grouping disparate agents together. For example, a concentrator may contain multiple agents. This ID is could be assigned by the management station to identify all of these agents as being contained in the same concentrator.')
chipGenVers = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chipGenVers.setStatus('mandatory')
if mibBuilder.loadTexts: chipGenVers.setDescription('The version identifier(s) for this agent.')
chipGenAuthFailureAddr = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chipGenAuthFailureAddr.setStatus('mandatory')
if mibBuilder.loadTexts: chipGenAuthFailureAddr.setDescription('The source IP Address of the last SNMP request that caused an authentication failure trap to be generated. This object is also included in the SNMP authenticationFailure trap.')
chipGenTimeLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chipGenTimeLastChanged.setStatus('mandatory')
if mibBuilder.loadTexts: chipGenTimeLastChanged.setDescription('A snapshot of sysUpTime when the last trap was generated. This attribute can be used to save polling by a management station. If there have been no traps generated since the last poll, there is no need for the station to poll again.')
chipEchoStart = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noEcho", 1), ("startEcho", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chipEchoStart.setStatus('mandatory')
if mibBuilder.loadTexts: chipEchoStart.setDescription('Setting chipEchoStart to startEcho(2) causes the device to begin an ICMP echo sequence using the parameters indicated by the rest of the chipEcho group.')
chipEchoAddr = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 2, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chipEchoAddr.setStatus('mandatory')
if mibBuilder.loadTexts: chipEchoAddr.setDescription('The IP Address to which the device will ping. The default value is the loopback address 127.0.0.1 .')
chipEchoPattern = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("zeroes", 1), ("ones", 2), ("mixed", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chipEchoPattern.setStatus('mandatory')
if mibBuilder.loadTexts: chipEchoPattern.setDescription('The actual pattern to be contained in the ICMP echo packet.')
chipEchoNumber = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chipEchoNumber.setStatus('mandatory')
if mibBuilder.loadTexts: chipEchoNumber.setDescription('The number of ICMP echo packets (pings) to send.')
chipEchoSize = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 1500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chipEchoSize.setStatus('mandatory')
if mibBuilder.loadTexts: chipEchoSize.setDescription('The size of the ICMP echo packet (ping) to send when chipEchoStart is set. The valid range is between 64 and 1500 octets.')
chipEchoResponseCounts = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chipEchoResponseCounts.setStatus('mandatory')
if mibBuilder.loadTexts: chipEchoResponseCounts.setDescription('The count of ICMP echo response packets received since the last PING was initiated. ')
chipTTYNumber = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chipTTYNumber.setStatus('mandatory')
if mibBuilder.loadTexts: chipTTYNumber.setDescription('The number of terminal ports on this agent product.')
chipTTYTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 5, 2), )
if mibBuilder.loadTexts: chipTTYTable.setStatus('mandatory')
if mibBuilder.loadTexts: chipTTYTable.setDescription('A table of TTY specific information associated with this agent.')
chipTTYEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 5, 2, 1), ).setIndexNames((0, "CHIPAGENT-MIB", "chipTTYIndex"))
if mibBuilder.loadTexts: chipTTYEntry.setStatus('mandatory')
if mibBuilder.loadTexts: chipTTYEntry.setDescription('A profile of a specific TTY interface associated with this agent.')
chipTTYIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chipTTYIndex.setStatus('mandatory')
if mibBuilder.loadTexts: chipTTYIndex.setDescription('The TTY to which this entry refers.')
chipTTYBaud = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(110, 300, 1200, 2400, 4800, 9600, 19200, 38400))).clone(namedValues=NamedValues(("one-hundred-ten", 110), ("three-hundred", 300), ("twelve-hundred", 1200), ("twenty-four-hundred", 2400), ("forty-eight-hundred", 4800), ("ninety-six-hundred", 9600), ("nineteen-two-hundred", 19200), ("thirty-eight-thousand-four-hundred", 38400)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chipTTYBaud.setStatus('mandatory')
if mibBuilder.loadTexts: chipTTYBaud.setDescription('The baud rate for this TTY. It should be noted that all serial ports do not support all of the above baud rates.')
chipTTYParity = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("odd", 1), ("even", 2), ("none", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chipTTYParity.setStatus('mandatory')
if mibBuilder.loadTexts: chipTTYParity.setDescription('The parity setting for this TTY.')
chipTTYStop = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("one", 1), ("two", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chipTTYStop.setStatus('mandatory')
if mibBuilder.loadTexts: chipTTYStop.setDescription('The number of stop bits for this TTY.')
chipTTYData = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(7, 8))).clone(namedValues=NamedValues(("seven", 7), ("eight", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chipTTYData.setStatus('mandatory')
if mibBuilder.loadTexts: chipTTYData.setDescription('The number of data bits for this TTY.')
chipTTYTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 5, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chipTTYTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: chipTTYTimeout.setDescription('The number of minutes to wait before this agent logs out an inactive login session on this TTY. NOTE: In some implementations, this is a single variable that is used by all of the terminal and telnet sessions.')
chipTTYPrompt = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 5, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chipTTYPrompt.setStatus('mandatory')
if mibBuilder.loadTexts: chipTTYPrompt.setDescription('The terminal prompt to display on this TTY. NOTE: In some implementations, this is a single variable that is used by all of the terminal and telnet sessions.')
chipTTYDTR = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 5, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("asserted", 1), ("deasserted", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chipTTYDTR.setStatus('mandatory')
if mibBuilder.loadTexts: chipTTYDTR.setDescription('This value dictates the behavior of the RS-232 Data Terminal Ready (DTR) signal at the time a session ends due to a logout, timeout, or shutdown. This is used by some modems as an indication that they should hangup. This variable is only support if the RS-232 port has a DTR signal.')
chipTTYTerminalType = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 5, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chipTTYTerminalType.setStatus('mandatory')
if mibBuilder.loadTexts: chipTTYTerminalType.setDescription('A string which indicates the type of terminal that is attached to the serial port. It should be noted that the string is passed to a telnet server whenever the server issues the IAC DO TERMINAL-TYPE command (see rfc884).')
chipTFTPStart = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("tftpNoTransfer", 1), ("tftpGet", 2), ("tftpPut", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chipTFTPStart.setStatus('mandatory')
if mibBuilder.loadTexts: chipTFTPStart.setDescription('Setting chipTFTPStart to tftpGet(2) initiates a file transfer to the agent (download); tftpPut(3) initiates a file transfer to the server (upload).')
chipTFTPSlot = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 255))).clone(namedValues=NamedValues(("slot-1", 1), ("slot-2", 2), ("slot-3", 3), ("slot-4", 4), ("slot-5", 5), ("slot-6", 6), ("slot-7", 7), ("slot-8", 8), ("slot-9", 9), ("slot-10", 10), ("slot-11", 11), ("slot-12", 12), ("slot-13", 13), ("slot-14", 14), ("slot-15", 15), ("slot-16", 16), ("slot-17", 17), ("agent-slot", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chipTFTPSlot.setStatus('mandatory')
if mibBuilder.loadTexts: chipTFTPSlot.setDescription('The slot number of the module that is to be involved in the TFTP transfer with the TFTP server (chipTFTPIpAddress).')
chipTFTPIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 6, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chipTFTPIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: chipTFTPIpAddress.setDescription('The IP Address of the TFTP server.')
chipTFTPFileName = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 6, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chipTFTPFileName.setStatus('mandatory')
if mibBuilder.loadTexts: chipTFTPFileName.setDescription('The file name of the file to retrieve (tftpGet), or the name of the file to create (tftpPut). ')
chipTFTPFileType = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 6, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("flashCode", 1), ("bootCode", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chipTFTPFileType.setStatus('mandatory')
if mibBuilder.loadTexts: chipTFTPFileType.setDescription('The type of file image to upload/download. The file type indicates to the agent what kind of file it is receiving. flashCode(1) indicates a code upgrade of the operational proms. bootCode(2) indicates a code upgrade of the boot proms.')
chipTFTPResult = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 6, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("clear", 1), ("xferInProgress", 2), ("okay", 3), ("otherTFTPError", 4), ("fileNotFound", 5), ("accessError", 6), ("diskFull", 7), ("illegalTFTPOperation", 8), ("invalidTFTPTransactionID", 9), ("noResponse", 10), ("invalidDownloadKey", 11), ("invalidSlot", 12), ("invalidNetwork", 13), ("fepromErase", 14), ("fepromProg", 15), ("xferError", 16), ("decodeError", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chipTFTPResult.setStatus('mandatory')
if mibBuilder.loadTexts: chipTFTPResult.setDescription('The result of the last TFTP operation.')
chipDownloadUDKSerial = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 7, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chipDownloadUDKSerial.setStatus('mandatory')
if mibBuilder.loadTexts: chipDownloadUDKSerial.setDescription('A string representing the serial number of the Upgrade Distribution Kit.')
chipDownloadKey = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 7, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chipDownloadKey.setStatus('mandatory')
if mibBuilder.loadTexts: chipDownloadKey.setDescription('The key code provided by your VAR. Available by calling technical support at +1 508 460 6195.')
chipDownloadDateTime = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 7, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chipDownloadDateTime.setStatus('mandatory')
if mibBuilder.loadTexts: chipDownloadDateTime.setDescription('The date of the last successful download in the format hh:mm day DD Mon YY')
mibBuilder.exportSymbols("CHIPAGENT-MIB", chipDownloadKey=chipDownloadKey, chipTFTPSlot=chipTFTPSlot, boardGroup=boardGroup, olNets=olNets, oebm=oebm, dot5=dot5, olTRnet=olTRnet, ol51nnMUTP=ol51nnMUTP, chipTFTPFileName=chipTFTPFileName, olAlarm=olAlarm, chipGenAuthFailureAddr=chipGenAuthFailureAddr, chipEchoAddr=chipEchoAddr, chipTTYDTR=chipTTYDTR, chipGenProduct=chipGenProduct, chipGenVers=chipGenVers, chipGenNetman=chipGenNetman, ol52nnMMGT=ol52nnMMGT, ol5208MTP=ol5208MTP, chipGenTimeLastChanged=chipGenTimeLastChanged, ol51nnRES=ol51nnRES, ol51nnREE=ol51nnREE, chipEchoResponseCounts=chipEchoResponseCounts, emm=emm, chipEchoSize=chipEchoSize, chipTTYBaud=chipTTYBaud, softwareGroup=softwareGroup, ol51nnMFL=ol51nnMFL, chipTTYIndex=chipTTYIndex, chipGen=chipGen, olGroups=olGroups, alarmGroup=alarmGroup, olThresh=olThresh, chipEchoPattern=chipEchoPattern, chipTFTPStart=chipTFTPStart, chipTTYNumber=chipTTYNumber, chipTFTPIpAddress=chipTFTPIpAddress, ol51nnMTPCL=ol51nnMTPCL, chipTTY=chipTTY, fmm=fmm, ol53nnMMGT=ol53nnMMGT, chipTTYData=chipTTYData, chipTTYParity=chipTTYParity, ol51nnMTPPL=ol51nnMTPPL, chipTFTPFileType=chipTFTPFileType, chipProducts=chipProducts, chipExpTokenRing=chipExpTokenRing, chipGenServiceDate=chipGenServiceDate, ol50nnMCTL=ol50nnMCTL, olNet=olNet, ol51nnMTPL=ol51nnMTPL, olModules=olModules, portGroup=portGroup, chipEchoStart=chipEchoStart, chipTTYTable=chipTTYTable, chipEcho=chipEcho, chipGenID=chipGenID, chipTTYTerminalType=chipTTYTerminalType, ol51nnMBNC=ol51nnMBNC, chipBridge=chipBridge, olAgents=olAgents, hardwareGroup=hardwareGroup, midnight=midnight, chipDownloadUDKSerial=chipDownloadUDKSerial, olEnet=olEnet, chipGenDiagnostics=chipGenDiagnostics, hubGroup=hubGroup, ol51nnMFB=ol51nnMFB, ol51nnBEE=ol51nnBEE, ol53nnMFBMIC=ol53nnMFBMIC, ol53nnMSTP=ol53nnMSTP, ol52nnMTP=ol52nnMTP, chipmib02=chipmib02, workGroupHub=workGroupHub, olConc=olConc, ol50nnMRCTL=ol50nnMRCTL, chipTTYStop=chipTTYStop, focus1=focus1, ol51nnMMGT=ol51nnMMGT, dot1dBridge=dot1dBridge, ol52nnMFR=ol52nnMFR, chipTTYPrompt=chipTTYPrompt, chipTFTPResult=chipTFTPResult, ol51nnMFP=ol51nnMFP, chipEchoNumber=chipEchoNumber, ol50nnMHCTL=ol50nnMHCTL, ol51nnMTS=ol51nnMTS, ol51nnMAUIF=ol51nnMAUIF, hubSysGroup=hubSysGroup, chipTTYEntry=chipTTYEntry, olEnv=olEnv, olSpecMods=olSpecMods, chipGenSerial=chipGenSerial, online=online, olFDDInet=olFDDInet, chipDownloadDateTime=chipDownloadDateTime, ol51nnMTP=ol51nnMTP, chipcom=chipcom, ol51nnIx=ol51nnIx, chipTFTP=chipTFTP, olThreshControl=olThreshControl, chipDownload=chipDownload, ol53nnMFIBST=ol53nnMFIBST, chipExperiment=chipExperiment, oeim=oeim, trmm=trmm, ol51nnMFIB=ol51nnMFIB, chipTTYTimeout=chipTTYTimeout, ol51nnMAUIM=ol51nnMAUIM, ol52nnBTT=ol52nnBTT, ol51nnMFBP=ol51nnMFBP)
