#
# PySNMP MIB module ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:13:30 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
TimeTicks, MibIdentifier, Bits, Integer32, ObjectIdentity, Unsigned32, iso, enterprises, ModuleIdentity, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Gauge32, IpAddress, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "MibIdentifier", "Bits", "Integer32", "ObjectIdentity", "Unsigned32", "iso", "enterprises", "ModuleIdentity", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Gauge32", "IpAddress", "Counter64")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class DmiCounter(Counter32):
    pass

class DmiInteger(Integer32):
    pass

class DmiInteger64X(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(-18446744073709551615, 18446744073709551615)

class DmiOctetstring(OctetString):
    pass

class DmiDisplaystring(DisplayString):
    pass

class DmiDateX(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(28, 28)
    fixedLength = 28

class DmiComponentIndex(Integer32):
    pass

adaptec = MibIdentifier((1, 3, 6, 1, 4, 1, 795))
thirdparty = MibIdentifier((1, 3, 6, 1, 4, 1, 795, 50))
isc20 = MibIdentifier((1, 3, 6, 1, 4, 1, 795, 50, 10))
dmtfGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 795, 50, 10, 1))
tComponentid = MibTable((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 1), )
if mibBuilder.loadTexts: tComponentid.setStatus('mandatory')
if mibBuilder.loadTexts: tComponentid.setDescription('This group defines the attributes common to all components. This groupis required.')
eComponentid = MibTableRow((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 1, 1), ).setIndexNames((0, "ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "DmiComponentIndex"))
if mibBuilder.loadTexts: eComponentid.setStatus('mandatory')
if mibBuilder.loadTexts: eComponentid.setDescription('')
a1Manufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 1, 1, 1), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1Manufacturer.setStatus('mandatory')
if mibBuilder.loadTexts: a1Manufacturer.setDescription('Manufacturer of this system.')
a1Product = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 1, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1Product.setStatus('mandatory')
if mibBuilder.loadTexts: a1Product.setDescription('Product name for this system.')
a1Version = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 1, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1Version.setStatus('mandatory')
if mibBuilder.loadTexts: a1Version.setDescription('Version number of this system.')
a1SerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 1, 1, 4), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1SerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: a1SerialNumber.setDescription('Serial number for this system.')
a1Installation = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 1, 1, 5), DmiDateX()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1Installation.setStatus('mandatory')
if mibBuilder.loadTexts: a1Installation.setDescription('The time and date when this component was installed.')
a1Verify = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("vAnErrorOccurredCheckStatusCode", 0), ("vThisComponentDoesNotExist", 1), ("vVerificationIsNotSupported", 2), ("vReserved", 3), ("vThisComponentExistsButTheFunctionalityI", 4), ("vThisComponentExistsButTheFunctionality1", 5), ("vThisComponentExistsAndIsNotFunctioningC", 6), ("vThisComponentExistsAndIsFunctioningCorr", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1Verify.setStatus('mandatory')
if mibBuilder.loadTexts: a1Verify.setDescription('A code that provides a level of verification that the component is stillinstalled and working.')
tMiftomib = MibTable((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 99), )
if mibBuilder.loadTexts: tMiftomib.setStatus('mandatory')
if mibBuilder.loadTexts: tMiftomib.setDescription('This group defines attributes required for DMI to SNMP translati n.')
eMiftomib = MibTableRow((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 99, 1), ).setIndexNames((0, "ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "DmiComponentIndex"))
if mibBuilder.loadTexts: eMiftomib.setStatus('mandatory')
if mibBuilder.loadTexts: eMiftomib.setDescription('')
a99MibName = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 99, 1, 1), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a99MibName.setStatus('mandatory')
if mibBuilder.loadTexts: a99MibName.setDescription('The MIB name that defines this MIF')
a99MibOid = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 99, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a99MibOid.setStatus('mandatory')
if mibBuilder.loadTexts: a99MibOid.setDescription('The MIB Object Identifier that corresponds to this MIF')
a99DisableTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 99, 1, 3), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a99DisableTrap.setStatus('mandatory')
if mibBuilder.loadTexts: a99DisableTrap.setDescription('This attribute can be changed to disable sending of traps from this component')
tStorageDevices = MibTable((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7001), )
if mibBuilder.loadTexts: tStorageDevices.setStatus('mandatory')
if mibBuilder.loadTexts: tStorageDevices.setDescription('This group defines the mass storage devices in this system.')
eStorageDevices = MibTableRow((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7001, 1), ).setIndexNames((0, "ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "DmiComponentIndex"), (0, "ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7001StorageDeviceIndex"))
if mibBuilder.loadTexts: eStorageDevices.setStatus('mandatory')
if mibBuilder.loadTexts: eStorageDevices.setDescription('')
a7001StorageDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7001, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7001StorageDeviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a7001StorageDeviceIndex.setDescription('An index into the storage device table.')
a7001Type = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7001, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vRigidDiskDrive", 3), ("vFlexibleDisketteDrive", 4), ("vOpticalWrite-onceread-manyWormDrive", 6), ("vMagneto-opticalDrive", 7), ("vCompactDiskDrive", 8), ("vFlashDisk", 9), ("vCartridgeRigidDiskDrive", 10), ("vOpticalFloppyDrive", 11), ("vTapeDrive", 12), ("vSolidState", 13), ("vMediaChanger", 14), ("vDigitalVersatileDiskDvdDrive", 15), ("vDigitalVersatileDiskDvdRamDrive", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7001Type.setStatus('mandatory')
if mibBuilder.loadTexts: a7001Type.setDescription("The type of this mass storage device. If 'Other' is used, then the Type Description attribute shall be used.")
a7001TypeDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7001, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7001TypeDescription.setStatus('mandatory')
if mibBuilder.loadTexts: a7001TypeDescription.setDescription("A longer description of the storage device. For example: 3.5 inch flexible diskette drive using diskettes with a maximum capacity of 1.44MB. If 'Other' was specified above, then this field shall be used. Otherwise, the contents of this optional field shall not contradict the Storage Device Type specified above.")
a7001Sub_identifier = MibScalar((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7001, 1, 4), DmiDisplaystring()).setLabel("a7001Sub-identifier").setMaxAccess("readonly")
if mibBuilder.loadTexts: a7001Sub_identifier.setStatus('mandatory')
if mibBuilder.loadTexts: a7001Sub_identifier.setDescription("The sub-identifier for this storage device (e.g., the device's SCSI logical unit number.")
a7001MediaDataBlockSize = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7001, 1, 5), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7001MediaDataBlockSize.setStatus('mandatory')
if mibBuilder.loadTexts: a7001MediaDataBlockSize.setDescription('The size in bytes of the data blocks used on the storage media. If the media block size is unknown or not consistent across the media, then this value shall be zero.')
a7001FormattedMediaCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7001, 1, 6), DmiInteger64X()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7001FormattedMediaCapacity.setStatus('mandatory')
if mibBuilder.loadTexts: a7001FormattedMediaCapacity.setDescription('The total size in kbytes of this storage media after it has been formatted.')
a7001RemovableDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7001, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7001RemovableDevice.setStatus('mandatory')
if mibBuilder.loadTexts: a7001RemovableDevice.setDescription('If true, then this storage device is removable (e.g.: PCMCIA device).')
a7001DeviceLoaded = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7001, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7001DeviceLoaded.setStatus('mandatory')
if mibBuilder.loadTexts: a7001DeviceLoaded.setDescription("If true, then the storage device is loaded. If the device is not removable, then this value shall be 'TRUE'.")
a7001RemovableMedia = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7001, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7001RemovableMedia.setStatus('mandatory')
if mibBuilder.loadTexts: a7001RemovableMedia.setDescription('If true, then the media in this storage device is removable.')
a7001MediaLoaded = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7001, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7001MediaLoaded.setStatus('mandatory')
if mibBuilder.loadTexts: a7001MediaLoaded.setDescription("If true, the media in this storage device is loaded. If the media is not removable, then this value shall be 'TRUE' ")
a7001Compression = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7001, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7001Compression.setStatus('mandatory')
if mibBuilder.loadTexts: a7001Compression.setDescription('If true, the storage device supports compression.')
a7001Encryption = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7001, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7001Encryption.setStatus('mandatory')
if mibBuilder.loadTexts: a7001Encryption.setDescription('If true, the storage device supports encryption.')
tStorageDevicesEvents = MibTable((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7002), )
if mibBuilder.loadTexts: tStorageDevicesEvents.setStatus('mandatory')
if mibBuilder.loadTexts: tStorageDevicesEvents.setDescription('Storage Devices events.')
eStorageDevicesEvents = MibTableRow((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7002, 1), ).setIndexNames((0, "ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "DmiComponentIndex"), (0, "ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7002AssociatedGroup"))
if mibBuilder.loadTexts: eStorageDevicesEvents.setStatus('mandatory')
if mibBuilder.loadTexts: eStorageDevicesEvents.setDescription('')
a7002StorageDevicesEventType = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7002, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("vRebuildInProgress", 1), ("vStorageDeviceReadying", 2), ("vStorageDeviceError", 3), ("vSelf-monitoringWarning", 4), ("vCioEvent", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7002StorageDevicesEventType.setStatus('mandatory')
if mibBuilder.loadTexts: a7002StorageDevicesEventType.setDescription('The type of Storage Devices event that has occurred.')
a7002EventSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7002, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32))).clone(namedValues=NamedValues(("vMonitor", 1), ("vInformation", 2), ("vOk", 4), ("vNon-critical", 8), ("vCritical", 16), ("vNon-recoverable", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7002EventSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: a7002EventSeverity.setDescription('The severity of this event.')
a7002EventIsStateBased = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7002, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7002EventIsStateBased.setStatus('mandatory')
if mibBuilder.loadTexts: a7002EventIsStateBased.setDescription('The value of this attribute determined whether the Event being reported is a state-based Event or not. If the value of this attribute is TRUE then the Event is state-based. Else the Event is not state-based')
a7002EventStateKey = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7002, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7002EventStateKey.setStatus('mandatory')
if mibBuilder.loadTexts: a7002EventStateKey.setDescription('This attribute holds the key identifying a row of the Event State group within the Component in which the event generator group is located. The Current State attribute within the row contains the current state of this state-based event. The current state can be one of the four severities: OK, Non-Critical, Critical, and Non-Recoverable.')
a7002AssociatedGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7002, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7002AssociatedGroup.setStatus('mandatory')
if mibBuilder.loadTexts: a7002AssociatedGroup.setDescription('Class string of the group which originated the event.')
a7002EventSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7002, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7002EventSystem.setStatus('mandatory')
if mibBuilder.loadTexts: a7002EventSystem.setDescription('The major functional aspect of the product causing the fault.')
a7002EventSubsystem = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7002, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7002EventSubsystem.setStatus('mandatory')
if mibBuilder.loadTexts: a7002EventSubsystem.setDescription('The minor functional aspect of the product causing the fault.')
a7002EventSolution = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7002, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("vNotProvided", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7002EventSolution.setStatus('mandatory')
if mibBuilder.loadTexts: a7002EventSolution.setDescription('A solution to the problem that caused the event.')
a7002InstanceDataPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7002, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7002InstanceDataPresent.setStatus('mandatory')
if mibBuilder.loadTexts: a7002InstanceDataPresent.setDescription('Indicates whether second event block contains instance-specific data.')
a7002EventMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7002, 1, 10), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7002EventMessage.setStatus('mandatory')
if mibBuilder.loadTexts: a7002EventMessage.setDescription('Auxiliary information related to the event.')
a7002VendorSpecificData = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7002, 1, 11), DmiOctetstring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7002VendorSpecificData.setStatus('mandatory')
if mibBuilder.loadTexts: a7002VendorSpecificData.setDescription('Auxiliary information related to the event.')
tStorageController = MibTable((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7003), )
if mibBuilder.loadTexts: tStorageController.setStatus('mandatory')
if mibBuilder.loadTexts: tStorageController.setDescription('This group defines the storage controller in this system.')
eStorageController = MibTableRow((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7003, 1), ).setIndexNames((0, "ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "DmiComponentIndex"), (0, "ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7003ControllerIndex"))
if mibBuilder.loadTexts: eStorageController.setStatus('mandatory')
if mibBuilder.loadTexts: eStorageController.setDescription('')
a7003ControllerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7003, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7003ControllerIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a7003ControllerIndex.setDescription('An index into the Storage Controller table.')
a7003Identification = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7003, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7003Identification.setStatus('mandatory')
if mibBuilder.loadTexts: a7003Identification.setDescription('e.g. Name, brand and hardware revision level of the storage controller.')
a7003ProtectionManagement = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7003, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vUnprotected", 3), ("vProtected", 4), ("vProtectedThroughScsi-3ControllerCommand", 5), ("vProtectedThroughScsi-3ControllerComman1", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7003ProtectionManagement.setStatus('mandatory')
if mibBuilder.loadTexts: a7003ProtectionManagement.setDescription('Indicates whether or not the controller provides redundancy or protection against device failures.')
a7003BusMaster = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7003, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7003BusMaster.setStatus('mandatory')
if mibBuilder.loadTexts: a7003BusMaster.setDescription('If true, then this storage controller is the bus master.')
a7003SecondsSinceLastPower_up = MibScalar((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7003, 1, 5), DmiInteger()).setLabel("a7003SecondsSinceLastPower-up").setMaxAccess("readonly")
if mibBuilder.loadTexts: a7003SecondsSinceLastPower_up.setStatus('mandatory')
if mibBuilder.loadTexts: a7003SecondsSinceLastPower_up.setDescription('The number of seconds that have passed since this controller was last powered on.')
tStorageControllerEvents = MibTable((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7004), )
if mibBuilder.loadTexts: tStorageControllerEvents.setStatus('mandatory')
if mibBuilder.loadTexts: tStorageControllerEvents.setDescription('Storage Controller events.')
eStorageControllerEvents = MibTableRow((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7004, 1), ).setIndexNames((0, "ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "DmiComponentIndex"), (0, "ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7004AssociatedGroup"))
if mibBuilder.loadTexts: eStorageControllerEvents.setStatus('mandatory')
if mibBuilder.loadTexts: eStorageControllerEvents.setDescription('')
a7004StorageControllerEventType = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7004, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("vStorageControllerError", 1), ("vSelf-monitoringWarning1", 2), ("vCioEvent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7004StorageControllerEventType.setStatus('mandatory')
if mibBuilder.loadTexts: a7004StorageControllerEventType.setDescription('The type of Storage Controller event that has occurred.')
a7004EventSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7004, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32))).clone(namedValues=NamedValues(("vMonitor", 1), ("vInformation", 2), ("vOk", 4), ("vNon-critical", 8), ("vCritical", 16), ("vNon-recoverable", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7004EventSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: a7004EventSeverity.setDescription('The severity of this event.')
a7004EventIsStateBased = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7004, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7004EventIsStateBased.setStatus('mandatory')
if mibBuilder.loadTexts: a7004EventIsStateBased.setDescription('The value of this attribute determined whether the Event being reported is a state-based Event or not. If the value of this attribute is TRUE then the Event is state-based. Else the Event is not state-based')
a7004EventStateKey = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7004, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7004EventStateKey.setStatus('mandatory')
if mibBuilder.loadTexts: a7004EventStateKey.setDescription('This attribute holds the key identifying a row of the Event State group within the Component in which the event generator group is located. The Current State attribute within the row contains the current state of this state-based event. The current state can be one of the four severities: OK, Non-Critical, Critical, and Non-Recoverable.')
a7004AssociatedGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7004, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7004AssociatedGroup.setStatus('mandatory')
if mibBuilder.loadTexts: a7004AssociatedGroup.setDescription('Class string of the group which originated the event.')
a7004EventSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7004, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7004EventSystem.setStatus('mandatory')
if mibBuilder.loadTexts: a7004EventSystem.setDescription('The major functional aspect of the product causing the fault.')
a7004EventSubsystem = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7004, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7004EventSubsystem.setStatus('mandatory')
if mibBuilder.loadTexts: a7004EventSubsystem.setDescription('The minor functional aspect of the product causing the fault.')
a7004EventSolution = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7004, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("vNotProvided", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7004EventSolution.setStatus('mandatory')
if mibBuilder.loadTexts: a7004EventSolution.setDescription('A solution to the problem that caused the event.')
a7004InstanceDataPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7004, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7004InstanceDataPresent.setStatus('mandatory')
if mibBuilder.loadTexts: a7004InstanceDataPresent.setDescription('Indicates whether second event block contains instance-specific data.')
a7004EventMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7004, 1, 10), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7004EventMessage.setStatus('mandatory')
if mibBuilder.loadTexts: a7004EventMessage.setDescription('Auxiliary information related to the event.')
a7004VendorSpecificData = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7004, 1, 11), DmiOctetstring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7004VendorSpecificData.setStatus('mandatory')
if mibBuilder.loadTexts: a7004VendorSpecificData.setDescription('Auxiliary information related to the event.')
tEnclosure = MibTable((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7005), )
if mibBuilder.loadTexts: tEnclosure.setStatus('mandatory')
if mibBuilder.loadTexts: tEnclosure.setDescription('This group defines the enclosure in this system.')
eEnclosure = MibTableRow((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7005, 1), ).setIndexNames((0, "ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "DmiComponentIndex"), (0, "ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7005EnclosureIndex"))
if mibBuilder.loadTexts: eEnclosure.setStatus('mandatory')
if mibBuilder.loadTexts: eEnclosure.setDescription('')
a7005EnclosureIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7005, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7005EnclosureIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a7005EnclosureIndex.setDescription('An index into the Enclosure table.')
a7005Type = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7005, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vDecfault", 3), ("vSaf-te", 4), ("vSes", 5), ("vAemi", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7005Type.setStatus('mandatory')
if mibBuilder.loadTexts: a7005Type.setDescription('Type of the enclosure.')
a7005Description = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7005, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7005Description.setStatus('mandatory')
if mibBuilder.loadTexts: a7005Description.setDescription('Description of the enclosure.')
tEnclosureEvents = MibTable((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7006), )
if mibBuilder.loadTexts: tEnclosureEvents.setStatus('mandatory')
if mibBuilder.loadTexts: tEnclosureEvents.setDescription('Enclosure events.')
eEnclosureEvents = MibTableRow((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7006, 1), ).setIndexNames((0, "ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "DmiComponentIndex"), (0, "ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7006AssociatedGroup"))
if mibBuilder.loadTexts: eEnclosureEvents.setStatus('mandatory')
if mibBuilder.loadTexts: eEnclosureEvents.setDescription('')
a7006EnclosureEventType = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7006, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("vCioEvent", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7006EnclosureEventType.setStatus('mandatory')
if mibBuilder.loadTexts: a7006EnclosureEventType.setDescription('The type of Enclosure event that has occurred.')
a7006EventSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7006, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32))).clone(namedValues=NamedValues(("vMonitor", 1), ("vInformation", 2), ("vOk", 4), ("vNon-critical", 8), ("vCritical", 16), ("vNon-recoverable", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7006EventSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: a7006EventSeverity.setDescription('The severity of this event.')
a7006EventIsStateBased = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7006, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7006EventIsStateBased.setStatus('mandatory')
if mibBuilder.loadTexts: a7006EventIsStateBased.setDescription('The value of this attribute determined whether the Event being reported is a state-based Event or not. If the value of this attribute is TRUE then the Event is state-based. Else the Event is not state-based')
a7006EventStateKey = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7006, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7006EventStateKey.setStatus('mandatory')
if mibBuilder.loadTexts: a7006EventStateKey.setDescription('This attribute holds the key identifying a row of the Event State group within the Component in which the event generator group is located. The Current State attribute within the row contains the current state of this state-based event. The current state can be one of the four severities: OK, Non-Critical, Critical, and Non-Recoverable.')
a7006AssociatedGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7006, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7006AssociatedGroup.setStatus('mandatory')
if mibBuilder.loadTexts: a7006AssociatedGroup.setDescription('Class string of the group which originated the event.')
a7006EventSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7006, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7006EventSystem.setStatus('mandatory')
if mibBuilder.loadTexts: a7006EventSystem.setDescription('The major functional aspect of the product causing the fault.')
a7006EventSubsystem = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7006, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7006EventSubsystem.setStatus('mandatory')
if mibBuilder.loadTexts: a7006EventSubsystem.setDescription('The minor functional aspect of the product causing the fault.')
a7006EventSolution = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7006, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("vNotProvided", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7006EventSolution.setStatus('mandatory')
if mibBuilder.loadTexts: a7006EventSolution.setDescription('A solution to the problem that caused the event.')
a7006InstanceDataPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7006, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7006InstanceDataPresent.setStatus('mandatory')
if mibBuilder.loadTexts: a7006InstanceDataPresent.setDescription('Indicates whether second event block contains instance-specific data.')
a7006EventMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7006, 1, 10), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7006EventMessage.setStatus('mandatory')
if mibBuilder.loadTexts: a7006EventMessage.setDescription('Auxiliary information related to the event.')
a7006VendorSpecificData = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7006, 1, 11), DmiOctetstring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7006VendorSpecificData.setStatus('mandatory')
if mibBuilder.loadTexts: a7006VendorSpecificData.setDescription('Auxiliary information related to the event.')
tBusPort = MibTable((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7007), )
if mibBuilder.loadTexts: tBusPort.setStatus('mandatory')
if mibBuilder.loadTexts: tBusPort.setDescription('This global table has one entry for each of the Bus Ports in this Component.')
eBusPort = MibTableRow((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7007, 1), ).setIndexNames((0, "ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "DmiComponentIndex"), (0, "ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7007BusPortIndex"))
if mibBuilder.loadTexts: eBusPort.setStatus('mandatory')
if mibBuilder.loadTexts: eBusPort.setDescription('')
a7007BusPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7007, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7007BusPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a7007BusPortIndex.setDescription('An index into the Bus Port table.')
a7007Protocol = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7007, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vEisa", 3), ("vIsa", 4), ("vPci", 5), ("vAtaatapi", 6), ("vFlexibleDiskette", 7), ("v1496", 8), ("vScsiParallelInterface", 9), ("vScsiFibreChannelProtocol", 10), ("vScsiSerialBusProtocol", 11), ("vScsiSerialBusProtocol-21394", 12), ("vScsiSerialStorageArchitecture", 13), ("vVesa", 14), ("vPcmcia", 15), ("vUniversalSerialBus", 16), ("vParallelPort", 17), ("vEscon", 18), ("vDiagnostic", 19), ("vI2c", 20), ("vPower", 21), ("vHippi", 22), ("vMultibus", 23), ("vVme", 24), ("vIpi", 25), ("vIeee-488", 26), ("vRs232", 27), ("vIeee802310base5", 28), ("vIeee802310base2", 29), ("vIeee80231base5", 30), ("vIeee802310broad36", 31), ("vIeee8023100basevg", 32), ("vIeee8025Token-ring", 33), ("vAnsiX3t95Fddi", 34), ("vMca", 35)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7007Protocol.setStatus('mandatory')
if mibBuilder.loadTexts: a7007Protocol.setDescription("The protocol describing the electrical characteristic of the Bus Port. If 'Other' is used, then the Protocol Description attribute shall be used.")
a7007ProtocolDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7007, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7007ProtocolDescription.setStatus('mandatory')
if mibBuilder.loadTexts: a7007ProtocolDescription.setDescription("Additional description of the protocol described above. If 'Other' was specified above, then this field shall be used. Otherwise, the contents of this optional field shall not contradict the Protocol specified above.")
a7007SignalCharacteristics = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7007, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vSingleEnded", 3), ("vDifferential", 4), ("vLowVoltageDifferential", 5), ("vOptical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7007SignalCharacteristics.setStatus('mandatory')
if mibBuilder.loadTexts: a7007SignalCharacteristics.setDescription('The signal characteristics of the Bus Port being described.')
a7007AddressDescriptor = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7007, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7007AddressDescriptor.setStatus('mandatory')
if mibBuilder.loadTexts: a7007AddressDescriptor.setDescription('The address descriptor of this bus port. For example, the SCSI address of this port.')
a7007Isochronous = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7007, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7007Isochronous.setStatus('mandatory')
if mibBuilder.loadTexts: a7007Isochronous.setDescription('Indicates whether or not this bus port supports isochronous transfers.')
a7007MaximumWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7007, 1, 7), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7007MaximumWidth.setStatus('mandatory')
if mibBuilder.loadTexts: a7007MaximumWidth.setDescription("The maximum width, in bits, of this Bus Port's data path. A value of 1 should be used for serial.")
a7007MaximumTransferRate = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7007, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7007MaximumTransferRate.setStatus('mandatory')
if mibBuilder.loadTexts: a7007MaximumTransferRate.setDescription('The theoretical maximum transfer rate, in millions of bytes per second, that this Bus Port is capable of achieving under ideal conditions. A value of zero should be used if the transfer rate is less than 1 million bytes per second. A value of 0x80000000 should be used if the transfer rate is unknown.')
a7007MaximumNumberOfAttachments = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7007, 1, 9), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7007MaximumNumberOfAttachments.setStatus('mandatory')
if mibBuilder.loadTexts: a7007MaximumNumberOfAttachments.setDescription("The maximum number of directly addressable entities supported by this bus port's protocol. A value of zero should be used if the number of attachments is unknown.")
a7007ConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7007, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vNone", 3), ("vScsiAHigh-densityShielded50Pins", 4), ("vScsiAHigh-densityUnshielded50Pins", 5), ("vScsiALow-densityShielded50Pins", 6), ("vScsiALow-densityUnshielded50Pins", 7), ("vScsiPHigh-densityShielded68Pins", 8), ("vScsiPHigh-densityUnshielded68Pins", 9), ("vScsiSca-i80Pins", 10), ("vScsiSca-ii80Pins", 11), ("vScsiFibreChannelDb9Copper", 12), ("vScsiFibreChannelFibre", 13), ("vScsiFibreChannelSca-ii40Pins", 14), ("vScsiFibreChannelSca-ii20Pins", 15), ("vScsiFibreChannelBnc", 16), ("vAta3-12Inch40Pins", 17), ("vAta2-12Inch44Pins", 18), ("vSerial9Pin", 19), ("vSerial25Pin", 20), ("vRs23225Pin", 21), ("vRs422", 22), ("vIeee-488", 23), ("vAui", 24), ("vUptCategory3", 25), ("vUptCategory4", 26), ("vUptCategory5", 27), ("vBnc", 28), ("vStpRj11", 29), ("vStpRj45", 30), ("vStpDb9", 31), ("vFiberMic", 32), ("vAppleAui", 33), ("vPciSlot", 34), ("vIsaSlot", 35), ("vEisaSlot", 36), ("vVesaSlot", 37), ("vPcmciaSlot", 38), ("vPcCardSlot", 39), ("vFloppyDiskette5-14Inch", 40), ("vFloppyDiskette3-12Inch", 41), ("vHssdc6Pins", 42), ("vGbicSocket", 43), ("v13946Pins", 44), ("vScsiVhdciShielded68Pins", 45)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7007ConnectorType.setStatus('mandatory')
if mibBuilder.loadTexts: a7007ConnectorType.setDescription("Describes how options (cards, devices, etc.) physically connect to this bus port. If 'Other' is used, then the Connector Type Description attribute shall be used.")
a7007ConnectorTypeDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7007, 1, 11), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7007ConnectorTypeDescription.setStatus('mandatory')
if mibBuilder.loadTexts: a7007ConnectorTypeDescription.setDescription("An additional text description of the type of connector describe above. If 'Other' was specified above, then this field shall be used. Otherwis , the contents of this optional field shall not contradict the connector specified above.")
a7007ConnectorGender = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7007, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vFemale", 3), ("vMale", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7007ConnectorGender.setStatus('mandatory')
if mibBuilder.loadTexts: a7007ConnectorGender.setDescription('Indicates the gender of the connector described above.')
tBusPortEvents = MibTable((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7008), )
if mibBuilder.loadTexts: tBusPortEvents.setStatus('mandatory')
if mibBuilder.loadTexts: tBusPortEvents.setDescription('Bus Port events.')
eBusPortEvents = MibTableRow((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7008, 1), ).setIndexNames((0, "ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "DmiComponentIndex"), (0, "ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7008AssociatedGroup"))
if mibBuilder.loadTexts: eBusPortEvents.setStatus('mandatory')
if mibBuilder.loadTexts: eBusPortEvents.setDescription('')
a7008BusPortEventType = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7008, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("vBusPortError", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7008BusPortEventType.setStatus('mandatory')
if mibBuilder.loadTexts: a7008BusPortEventType.setDescription('The type of Bus Port event that has occurred.')
a7008EventSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7008, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32))).clone(namedValues=NamedValues(("vMonitor", 1), ("vInformation", 2), ("vOk", 4), ("vNon-critical", 8), ("vCritical", 16), ("vNon-recoverable", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7008EventSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: a7008EventSeverity.setDescription('The severity of this event.')
a7008EventIsStateBased = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7008, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7008EventIsStateBased.setStatus('mandatory')
if mibBuilder.loadTexts: a7008EventIsStateBased.setDescription('The value of this attribute determined whether the Event being reported is a state-based Event or not. If the value of this attribute is TRUE then the Event is state-based. Else the Event is not state-based')
a7008EventStateKey = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7008, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7008EventStateKey.setStatus('mandatory')
if mibBuilder.loadTexts: a7008EventStateKey.setDescription('This attribute holds the key identifying a row of the Event State group within the Component in which the event generator group is located. The Current State attribute within the row contains the current state of this state-based event. The current state can be one of the four severities: OK, Non-Critical, Critical, and Non-Recoverable.')
a7008AssociatedGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7008, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7008AssociatedGroup.setStatus('mandatory')
if mibBuilder.loadTexts: a7008AssociatedGroup.setDescription('Class string of the group which originated the event.')
a7008EventSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7008, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7008EventSystem.setStatus('mandatory')
if mibBuilder.loadTexts: a7008EventSystem.setDescription('The major functional aspect of the product causing the fault.')
a7008EventSubsystem = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7008, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7008EventSubsystem.setStatus('mandatory')
if mibBuilder.loadTexts: a7008EventSubsystem.setDescription('The minor functional aspect of the product causing the fault.')
a7008EventSolution = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7008, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("vNotProvided", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7008EventSolution.setStatus('mandatory')
if mibBuilder.loadTexts: a7008EventSolution.setDescription('A solution to the problem that caused the event.')
a7008InstanceDataPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7008, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7008InstanceDataPresent.setStatus('mandatory')
if mibBuilder.loadTexts: a7008InstanceDataPresent.setDescription('Indicates whether second event block contains instance-specific data.')
a7008EventMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7008, 1, 10), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7008EventMessage.setStatus('mandatory')
if mibBuilder.loadTexts: a7008EventMessage.setDescription('Auxiliary information related to the event.')
a7008VendorSpecificData = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7008, 1, 11), DmiOctetstring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7008VendorSpecificData.setStatus('mandatory')
if mibBuilder.loadTexts: a7008VendorSpecificData.setDescription('Auxiliary information related to the event.')
tAggregatePhysicalExtent = MibTable((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7009), )
if mibBuilder.loadTexts: tAggregatePhysicalExtent.setStatus('mandatory')
if mibBuilder.loadTexts: tAggregatePhysicalExtent.setDescription('Summary information about the addressable logical blocks which are in the same redundancy group and reside on the same physical device.')
eAggregatePhysicalExtent = MibTableRow((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7009, 1), ).setIndexNames((0, "ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "DmiComponentIndex"), (0, "ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7009AggregatePhysicalExtentIndex"))
if mibBuilder.loadTexts: eAggregatePhysicalExtent.setStatus('mandatory')
if mibBuilder.loadTexts: eAggregatePhysicalExtent.setDescription('')
a7009AggregatePhysicalExtentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7009, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7009AggregatePhysicalExtentIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a7009AggregatePhysicalExtentIndex.setDescription('An index into the Aggregate Physical Extent table.')
a7009NumberOfBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7009, 1, 2), DmiInteger64X()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7009NumberOfBlocks.setStatus('mandatory')
if mibBuilder.loadTexts: a7009NumberOfBlocks.setDescription('The total number of blocks (including the check data blocks) contained in this aggregate p_extent. The block size is the same as the storage device associated with this aggregate p_extent. Note: If no redundancy group is associated with an aggregate p_extent, then this indicates the number of p_extent blocks that are available.')
a7009NumberOfBlocksOfCheckData = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7009, 1, 3), DmiInteger64X()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7009NumberOfBlocksOfCheckData.setStatus('mandatory')
if mibBuilder.loadTexts: a7009NumberOfBlocksOfCheckData.setDescription('The number of blocks contained in this aggregate p_extent to be used as check data. If the Aggregate p_extent is available, then this value shall be zero.')
tAggregateProtectedSpaceExtent = MibTable((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7010), )
if mibBuilder.loadTexts: tAggregateProtectedSpaceExtent.setStatus('mandatory')
if mibBuilder.loadTexts: tAggregateProtectedSpaceExtent.setDescription('Summary information about the addressable logical blocks which are in the same volume set and are derived from the same storage device.')
eAggregateProtectedSpaceExtent = MibTableRow((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7010, 1), ).setIndexNames((0, "ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "DmiComponentIndex"), (0, "ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7010AggregateProtectedSpaceExtentIndex"))
if mibBuilder.loadTexts: eAggregateProtectedSpaceExtent.setStatus('mandatory')
if mibBuilder.loadTexts: eAggregateProtectedSpaceExtent.setDescription('')
a7010AggregateProtectedSpaceExtentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7010, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7010AggregateProtectedSpaceExtentIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a7010AggregateProtectedSpaceExtentIndex.setDescription('An index into the Aggregate Protected Space Extent table.')
a7010NumberOfBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7010, 1, 2), DmiInteger64X()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7010NumberOfBlocks.setStatus('mandatory')
if mibBuilder.loadTexts: a7010NumberOfBlocks.setDescription('The total number of user data blocks that are both located on a single storage device and part or all of a single volume set. The block size is the same as the storage device associated with this aggregate ps_extent. Note: If no volume set is associated with an aggregate ps_extent, then this number indicates the number of blocks that are available.')
tVolumeSet = MibTable((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7011), )
if mibBuilder.loadTexts: tVolumeSet.setStatus('mandatory')
if mibBuilder.loadTexts: tVolumeSet.setDescription('The volume set is a contiguous range of logical block addresses presented to the operating environment for reading and writing user data. A volume set may be used as a physical extent')
eVolumeSet = MibTableRow((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7011, 1), ).setIndexNames((0, "ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "DmiComponentIndex"), (0, "ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7011VolumeSetIndex"))
if mibBuilder.loadTexts: eVolumeSet.setStatus('mandatory')
if mibBuilder.loadTexts: eVolumeSet.setDescription('')
a7011VolumeSetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7011, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7011VolumeSetIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a7011VolumeSetIndex.setDescription('An index into the Volume Set table.')
a7011Name = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7011, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7011Name.setStatus('mandatory')
if mibBuilder.loadTexts: a7011Name.setDescription('The name of the volume set.')
a7011TotalStorageCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7011, 1, 3), DmiInteger64X()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7011TotalStorageCapacity.setStatus('mandatory')
if mibBuilder.loadTexts: a7011TotalStorageCapacity.setDescription('The total size in bytes of the user data space of this volume set.')
a7011ProtectedSpaceStripeLength = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7011, 1, 4), DmiInteger64X()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7011ProtectedSpaceStripeLength.setStatus('mandatory')
if mibBuilder.loadTexts: a7011ProtectedSpaceStripeLength.setDescription('The number of ps_extents which form a user data stripe. This value shall be zero except when the ps_extent group is used.')
a7011ProtectedSpaceExtentInterleaveDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7011, 1, 5), DmiInteger64X()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7011ProtectedSpaceExtentInterleaveDepth.setStatus('mandatory')
if mibBuilder.loadTexts: a7011ProtectedSpaceExtentInterleaveDepth.setDescription('This is the number of ps_extents to stripe as a collective set. This value shall be zero except when the ps_extent group is used.')
tVolumeSetEvents = MibTable((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7012), )
if mibBuilder.loadTexts: tVolumeSetEvents.setStatus('mandatory')
if mibBuilder.loadTexts: tVolumeSetEvents.setDescription('Volume Set events.')
eVolumeSetEvents = MibTableRow((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7012, 1), ).setIndexNames((0, "ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "DmiComponentIndex"), (0, "ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012AssociatedGroup"))
if mibBuilder.loadTexts: eVolumeSetEvents.setStatus('mandatory')
if mibBuilder.loadTexts: eVolumeSetEvents.setDescription('')
a7012VolumeSetEventType = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7012, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("vVolumeSetExposed", 1), ("vRebuildInProgress", 2), ("vProtectionDisabled", 3), ("vVolumeSetReadying", 4), ("vRecalculateActive", 5), ("vSpareInUse", 6), ("vVerifyInProgress", 7), ("vVolumeSetBroken", 8), ("vCioEvent", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7012VolumeSetEventType.setStatus('mandatory')
if mibBuilder.loadTexts: a7012VolumeSetEventType.setDescription('The type of Volume Set event that has occurred.')
a7012EventSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7012, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32))).clone(namedValues=NamedValues(("vMonitor", 1), ("vInformation", 2), ("vOk", 4), ("vNon-critical", 8), ("vCritical", 16), ("vNon-recoverable", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7012EventSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: a7012EventSeverity.setDescription('The severity of this event.')
a7012EventIsStateBased = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7012, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7012EventIsStateBased.setStatus('mandatory')
if mibBuilder.loadTexts: a7012EventIsStateBased.setDescription('The value of this attribute determined whether the Event being reported is a state-based Event or not. If the value of this attribute is TRUE then the Event is state-based. Else the Event is not state-based')
a7012EventStateKey = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7012, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7012EventStateKey.setStatus('mandatory')
if mibBuilder.loadTexts: a7012EventStateKey.setDescription('This attribute holds the key identifying a row of the Event State group within the Component in which the event generator group is located. The Current State attribute within the row contains the current state of this state-based event. The current state can be one of the four severities: OK, Non-Critical, Critical, and Non-Recoverable.')
a7012AssociatedGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7012, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7012AssociatedGroup.setStatus('mandatory')
if mibBuilder.loadTexts: a7012AssociatedGroup.setDescription('Class string of the group which originated the event.')
a7012EventSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7012, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7012EventSystem.setStatus('mandatory')
if mibBuilder.loadTexts: a7012EventSystem.setDescription('The major functional aspect of the product causing the fault.')
a7012EventSubsystem = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7012, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7012EventSubsystem.setStatus('mandatory')
if mibBuilder.loadTexts: a7012EventSubsystem.setDescription('The minor functional aspect of the product causing the fault.')
a7012EventSolution = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7012, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("vNotProvided", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7012EventSolution.setStatus('mandatory')
if mibBuilder.loadTexts: a7012EventSolution.setDescription('A solution to the problem that caused the event.')
a7012InstanceDataPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7012, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7012InstanceDataPresent.setStatus('mandatory')
if mibBuilder.loadTexts: a7012InstanceDataPresent.setDescription('Indicates whether second event block contains instance-specific data.')
a7012EventMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7012, 1, 10), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7012EventMessage.setStatus('mandatory')
if mibBuilder.loadTexts: a7012EventMessage.setDescription('Auxiliary information related to the event.')
a7012VendorSpecificData = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7012, 1, 11), DmiOctetstring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7012VendorSpecificData.setStatus('mandatory')
if mibBuilder.loadTexts: a7012VendorSpecificData.setDescription('Auxiliary information related to the event.')
tVolumeSetActivityEvents = MibTable((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7013), )
if mibBuilder.loadTexts: tVolumeSetActivityEvents.setStatus('mandatory')
if mibBuilder.loadTexts: tVolumeSetActivityEvents.setDescription('Volume Set activity events.')
eVolumeSetActivityEvents = MibTableRow((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7013, 1), ).setIndexNames((0, "ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "DmiComponentIndex"), (0, "ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7013AssociatedGroup"))
if mibBuilder.loadTexts: eVolumeSetActivityEvents.setStatus('mandatory')
if mibBuilder.loadTexts: eVolumeSetActivityEvents.setDescription('')
a7013VolumeSetEventType = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7013, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("vCioEvent", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7013VolumeSetEventType.setStatus('mandatory')
if mibBuilder.loadTexts: a7013VolumeSetEventType.setDescription('The type of Volume Set activity event that has occurred.')
a7013EventSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7013, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32))).clone(namedValues=NamedValues(("vMonitor", 1), ("vInformation", 2), ("vOk", 4), ("vNon-critical", 8), ("vCritical", 16), ("vNon-recoverable", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7013EventSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: a7013EventSeverity.setDescription('The severity of this event.')
a7013EventIsStateBased = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7013, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7013EventIsStateBased.setStatus('mandatory')
if mibBuilder.loadTexts: a7013EventIsStateBased.setDescription('The value of this attribute determined whether the Event being reported is a state-based Event or not. If the value of this attribute is TRUE then the Event is state-based. Else the Event is not state-based')
a7013EventStateKey = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7013, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7013EventStateKey.setStatus('mandatory')
if mibBuilder.loadTexts: a7013EventStateKey.setDescription('This attribute holds the key identifying a row of the Event State group within the Component in which the event generator group is located. The Current State attribute within the row contains the current state of this state-based event. The current state can be one of the four severities: OK, Non-Critical, Critical, and Non-Recoverable.')
a7013AssociatedGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7013, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7013AssociatedGroup.setStatus('mandatory')
if mibBuilder.loadTexts: a7013AssociatedGroup.setDescription('Class string of the group which originated the event.')
a7013EventSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7013, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7013EventSystem.setStatus('mandatory')
if mibBuilder.loadTexts: a7013EventSystem.setDescription('The major functional aspect of the product causing the fault.')
a7013EventSubsystem = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7013, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7013EventSubsystem.setStatus('mandatory')
if mibBuilder.loadTexts: a7013EventSubsystem.setDescription('The minor functional aspect of the product causing the fault.')
a7013EventSolution = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7013, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("vNotProvided", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7013EventSolution.setStatus('mandatory')
if mibBuilder.loadTexts: a7013EventSolution.setDescription('A solution to the problem that caused the event.')
a7013InstanceDataPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7013, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7013InstanceDataPresent.setStatus('mandatory')
if mibBuilder.loadTexts: a7013InstanceDataPresent.setDescription('Indicates whether second event block contains instance-specific data.')
a7013EventMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7013, 1, 10), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7013EventMessage.setStatus('mandatory')
if mibBuilder.loadTexts: a7013EventMessage.setDescription('Auxiliary information related to the event.')
a7013VendorSpecificData = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7013, 1, 11), DmiOctetstring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7013VendorSpecificData.setStatus('mandatory')
if mibBuilder.loadTexts: a7013VendorSpecificData.setDescription('Auxiliary information related to the event.')
tRedundancyGroup = MibTable((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7014), )
if mibBuilder.loadTexts: tRedundancyGroup.setStatus('mandatory')
if mibBuilder.loadTexts: tRedundancyGroup.setDescription('Redundancy Group')
eRedundancyGroup = MibTableRow((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7014, 1), ).setIndexNames((0, "ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "DmiComponentIndex"), (0, "ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7014RedundancyGroupIndex"))
if mibBuilder.loadTexts: eRedundancyGroup.setStatus('mandatory')
if mibBuilder.loadTexts: eRedundancyGroup.setDescription('')
a7014RedundancyGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7014, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7014RedundancyGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a7014RedundancyGroupIndex.setDescription('An index into the Redundancy Group table.')
a7014RedundancyType = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7014, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("vNone", 0), ("vOther", 1), ("vUnknown", 2), ("vCopy", 3), ("vXor", 4), ("vPplusq", 5), ("vS", 6), ("vPpluss", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7014RedundancyType.setStatus('mandatory')
if mibBuilder.loadTexts: a7014RedundancyType.setDescription('This field specifies the type of the redundancy formed.')
tRedundancyGroupEvents = MibTable((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7015), )
if mibBuilder.loadTexts: tRedundancyGroupEvents.setStatus('mandatory')
if mibBuilder.loadTexts: tRedundancyGroupEvents.setDescription('Redundancy Group events.')
eRedundancyGroupEvents = MibTableRow((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7015, 1), ).setIndexNames((0, "ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "DmiComponentIndex"), (0, "ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7015AssociatedGroup"))
if mibBuilder.loadTexts: eRedundancyGroupEvents.setStatus('mandatory')
if mibBuilder.loadTexts: eRedundancyGroupEvents.setDescription('')
a7015RedundancyGroupEventType = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7015, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("vRedundancyGroupExposed", 1), ("vRebuildInProgress", 2), ("vProtectionDisabled", 3), ("vRecalculationActive", 4), ("vVerifyInProgress", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7015RedundancyGroupEventType.setStatus('mandatory')
if mibBuilder.loadTexts: a7015RedundancyGroupEventType.setDescription('The type of Redundancy Group event that has occurred.')
a7015EventSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7015, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32))).clone(namedValues=NamedValues(("vMonitor", 1), ("vInformation", 2), ("vOk", 4), ("vNon-critical", 8), ("vCritical", 16), ("vNon-recoverable", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7015EventSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: a7015EventSeverity.setDescription('The severity of this event.')
a7015EventIsStateBased = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7015, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7015EventIsStateBased.setStatus('mandatory')
if mibBuilder.loadTexts: a7015EventIsStateBased.setDescription('The value of this attribute determined whether the Event being reported is a state-based Event or not. If the value of this attribute is TRUE then the Event is state-based. Else the Event is not state-based')
a7015EventStateKey = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7015, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7015EventStateKey.setStatus('mandatory')
if mibBuilder.loadTexts: a7015EventStateKey.setDescription('This attribute holds the key identifying a row of the Event State group within the Component in which the event generator group is located. The Current State attribute within the row contains the current state of this state-based event. The current state can be one of the four severities: OK, Non-Critical, Critical, and Non-Recoverable.')
a7015AssociatedGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7015, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7015AssociatedGroup.setStatus('mandatory')
if mibBuilder.loadTexts: a7015AssociatedGroup.setDescription('Class string of the group which originated the event.')
a7015EventSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7015, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7015EventSystem.setStatus('mandatory')
if mibBuilder.loadTexts: a7015EventSystem.setDescription('The major functional aspect of the product causing the fault.')
a7015EventSubsystem = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7015, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7015EventSubsystem.setStatus('mandatory')
if mibBuilder.loadTexts: a7015EventSubsystem.setDescription('The minor functional aspect of the product causing the fault.')
a7015EventSolution = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7015, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("vNotProvided", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7015EventSolution.setStatus('mandatory')
if mibBuilder.loadTexts: a7015EventSolution.setDescription('A solution to the problem that caused the event.')
a7015InstanceDataPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7015, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7015InstanceDataPresent.setStatus('mandatory')
if mibBuilder.loadTexts: a7015InstanceDataPresent.setDescription('Indicates whether second event block contains instance-specific data.')
a7015EventMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7015, 1, 10), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7015EventMessage.setStatus('mandatory')
if mibBuilder.loadTexts: a7015EventMessage.setDescription('Auxiliary information related to the event.')
a7015VendorSpecificData = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7015, 1, 11), DmiOctetstring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7015VendorSpecificData.setStatus('mandatory')
if mibBuilder.loadTexts: a7015VendorSpecificData.setDescription('Auxiliary information related to the event.')
tSpareEvents = MibTable((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7016), )
if mibBuilder.loadTexts: tSpareEvents.setStatus('mandatory')
if mibBuilder.loadTexts: tSpareEvents.setDescription('Component Spare events.')
eSpareEvents = MibTableRow((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7016, 1), ).setIndexNames((0, "ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "DmiComponentIndex"), (0, "ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7016AssociatedGroup"))
if mibBuilder.loadTexts: eSpareEvents.setStatus('mandatory')
if mibBuilder.loadTexts: eSpareEvents.setDescription('')
a7016SpareEventType = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7016, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("vComponentSpareBroken", 1), ("vComponentSpareInUse", 2), ("vComponentSpareReadying", 3), ("vCioEvent", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7016SpareEventType.setStatus('mandatory')
if mibBuilder.loadTexts: a7016SpareEventType.setDescription('The type of Spare event that has occurred.')
a7016EventSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7016, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32))).clone(namedValues=NamedValues(("vMonitor", 1), ("vInformation", 2), ("vOk", 4), ("vNon-critical", 8), ("vCritical", 16), ("vNon-recoverable", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7016EventSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: a7016EventSeverity.setDescription('The severity of this event.')
a7016EventIsStateBased = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7016, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7016EventIsStateBased.setStatus('mandatory')
if mibBuilder.loadTexts: a7016EventIsStateBased.setDescription('The value of this attribute determined whether the Event being reported is a state-based Event or not. If the value of this attribute is TRUE then the Event is state-based. Else the Event is not state-based')
a7016EventStateKey = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7016, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7016EventStateKey.setStatus('mandatory')
if mibBuilder.loadTexts: a7016EventStateKey.setDescription('This attribute holds the key identifying a row of the Event State group within the Component in which the event generator group is located. The Current State attribute within the row contains the current state of this state-based event. The current state can be one of the four severities: OK, Non-Critical, Critical, and Non-Recoverable.')
a7016AssociatedGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7016, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7016AssociatedGroup.setStatus('mandatory')
if mibBuilder.loadTexts: a7016AssociatedGroup.setDescription('Class string of the group which originated the event.')
a7016EventSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7016, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vDataSpare", 3), ("vComponentSpare", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7016EventSystem.setStatus('mandatory')
if mibBuilder.loadTexts: a7016EventSystem.setDescription('The major functional aspect of the product causing the fault.')
a7016EventSubsystem = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7016, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7016EventSubsystem.setStatus('mandatory')
if mibBuilder.loadTexts: a7016EventSubsystem.setDescription('The minor functional aspect of the product causing the fault.')
a7016EventSolution = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7016, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("vNotProvided", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7016EventSolution.setStatus('mandatory')
if mibBuilder.loadTexts: a7016EventSolution.setDescription('A solution to the problem that caused the event.')
a7016InstanceDataPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7016, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7016InstanceDataPresent.setStatus('mandatory')
if mibBuilder.loadTexts: a7016InstanceDataPresent.setDescription('Indicates whether second event block contains instance-specific data.')
a7016EventMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7016, 1, 10), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7016EventMessage.setStatus('mandatory')
if mibBuilder.loadTexts: a7016EventMessage.setDescription('Auxiliary information related to the event.')
a7016VendorSpecificData = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7016, 1, 11), DmiOctetstring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7016VendorSpecificData.setStatus('mandatory')
if mibBuilder.loadTexts: a7016VendorSpecificData.setDescription('Auxiliary information related to the event.')
tMassStorageAssociation = MibTable((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7017), )
if mibBuilder.loadTexts: tMassStorageAssociation.setStatus('mandatory')
if mibBuilder.loadTexts: tMassStorageAssociation.setDescription('Associations define the relationships between the various components of the Storage Subsystem.')
eMassStorageAssociation = MibTableRow((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7017, 1), ).setIndexNames((0, "ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "DmiComponentIndex"), (0, "ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7017AssociationIndex"))
if mibBuilder.loadTexts: eMassStorageAssociation.setStatus('mandatory')
if mibBuilder.loadTexts: eMassStorageAssociation.setDescription('')
a7017AssociationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7017, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7017AssociationIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a7017AssociationIndex.setDescription('An index into the Association table.')
a7017Type = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7017, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7017Type.setStatus('mandatory')
if mibBuilder.loadTexts: a7017Type.setDescription('This field specifies the type of the association. One of the following strings shall be used to represent a known Mass Storage Associatio type: Physical Organization, Logical Organization, Logical to Physical Organiza ion,Redundancy Organization, Spare Organization, Cache, FRU, Operational State,Statistical, SubComponentSoftware, or Worldwide Identifier.')
a7017Reference1 = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7017, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7017Reference1.setStatus('mandatory')
if mibBuilder.loadTexts: a7017Reference1.setDescription("A reference to an object. The references shall use the format of 'x-dmi//<locator>/dmi/row; cid=<>; gid=<>; key=<>'.")
a7017Reference2 = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7017, 1, 4), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7017Reference2.setStatus('mandatory')
if mibBuilder.loadTexts: a7017Reference2.setDescription("A reference to an object. The references shall use the format of 'x-dmi//<locator>/dmi/row; cid=<>; gid=<>; key=<>'.")
tAssociationEvents = MibTable((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7018), )
if mibBuilder.loadTexts: tAssociationEvents.setStatus('mandatory')
if mibBuilder.loadTexts: tAssociationEvents.setDescription('Association events.')
eAssociationEvents = MibTableRow((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7018, 1), ).setIndexNames((0, "ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "DmiComponentIndex"), (0, "ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7018AssociatedGroup"))
if mibBuilder.loadTexts: eAssociationEvents.setStatus('mandatory')
if mibBuilder.loadTexts: eAssociationEvents.setDescription('')
a7018AssociationEventType = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7018, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("vNewObjectDetected", 1), ("vExistingObjectReplaced", 2), ("vExistingObjectIsGone", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7018AssociationEventType.setStatus('mandatory')
if mibBuilder.loadTexts: a7018AssociationEventType.setDescription('The type of association where a change has occurred.')
a7018EventSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7018, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32))).clone(namedValues=NamedValues(("vMonitor", 1), ("vInformation", 2), ("vOk", 4), ("vNon-critical", 8), ("vCritical", 16), ("vNon-recoverable", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7018EventSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: a7018EventSeverity.setDescription('The severity of this event.')
a7018EventIsStateBased = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7018, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7018EventIsStateBased.setStatus('mandatory')
if mibBuilder.loadTexts: a7018EventIsStateBased.setDescription('The value of this attribute determined whether the Event being reported is a state-based Event or not. If the value of this attribute is TRUE then the Event is state-based. Else the Event is not state-based')
a7018EventStateKey = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7018, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7018EventStateKey.setStatus('mandatory')
if mibBuilder.loadTexts: a7018EventStateKey.setDescription('This attribute holds the key identifying a row of the Event State group within the Component in which the event generator group is located. The Current State attribute within the row contains the current state of this state-based event. The current state can be one of the four severities: OK, Non-Critical, Critical, and Non-Recoverable.')
a7018AssociatedGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7018, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7018AssociatedGroup.setStatus('mandatory')
if mibBuilder.loadTexts: a7018AssociatedGroup.setDescription('Class string of the group which originated the event.')
a7018EventSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7018, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("vStorageController", 0), ("vStorageDevice", 1), ("vBusPort", 2), ("vVolumeSet", 3), ("vProtectedSpaceExtent", 4), ("vAggregateProtectedSpaceExtent", 5), ("vPhysicalExtent", 6), ("vAggregatePhysicalExtent", 7), ("vRedundancyGroup", 8), ("vCache", 9), ("vSoftwareComponent", 10), ("vSoftwareSignature", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7018EventSystem.setStatus('mandatory')
if mibBuilder.loadTexts: a7018EventSystem.setDescription('The association object type which is causing a change.')
a7018EventSubsystem = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7018, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7018EventSubsystem.setStatus('mandatory')
if mibBuilder.loadTexts: a7018EventSubsystem.setDescription('The minor functional aspect of the product causing the fault.')
a7018EventSolution = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7018, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("vNotProvided", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7018EventSolution.setStatus('mandatory')
if mibBuilder.loadTexts: a7018EventSolution.setDescription('A solution to the problem that caused the event.')
a7018InstanceDataPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7018, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7018InstanceDataPresent.setStatus('mandatory')
if mibBuilder.loadTexts: a7018InstanceDataPresent.setDescription('Indicates whether second event block contains instance-specific data.')
a7018EventMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7018, 1, 10), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7018EventMessage.setStatus('mandatory')
if mibBuilder.loadTexts: a7018EventMessage.setDescription('Auxiliary information related to the event.')
a7018VendorSpecificData = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7018, 1, 11), DmiOctetstring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7018VendorSpecificData.setStatus('mandatory')
if mibBuilder.loadTexts: a7018VendorSpecificData.setDescription('Auxiliary information related to the event.')
tBusPortAssociation = MibTable((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7019), )
if mibBuilder.loadTexts: tBusPortAssociation.setStatus('mandatory')
if mibBuilder.loadTexts: tBusPortAssociation.setDescription('Bus Port Association ')
eBusPortAssociation = MibTableRow((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7019, 1), ).setIndexNames((0, "ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "DmiComponentIndex"), (0, "ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7019BusPortAssociationIndex"))
if mibBuilder.loadTexts: eBusPortAssociation.setStatus('mandatory')
if mibBuilder.loadTexts: eBusPortAssociation.setDescription('')
a7019BusPortAssociationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7019, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7019BusPortAssociationIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a7019BusPortAssociationIndex.setDescription('An index into the Bus Port Association table. This index is the same as the index in the Association group that defines the bus port association.')
a7019NegotiatedSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7019, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7019NegotiatedSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: a7019NegotiatedSpeed.setDescription('The maximum burst transfer rate, in millions of bytes, which was negotiated between the two associated bus ports.')
a7019NegotiatedWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7019, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7019NegotiatedWidth.setStatus('mandatory')
if mibBuilder.loadTexts: a7019NegotiatedWidth.setDescription('The width, in bits, of the bus ports data path which was negotiated between the two associated bus ports.')
tComponentSpareAssociation = MibTable((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7020), )
if mibBuilder.loadTexts: tComponentSpareAssociation.setStatus('mandatory')
if mibBuilder.loadTexts: tComponentSpareAssociation.setDescription('Component Spare Association')
eComponentSpareAssociation = MibTableRow((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7020, 1), ).setIndexNames((0, "ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "DmiComponentIndex"), (0, "ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7020ComponentSpareIndex"))
if mibBuilder.loadTexts: eComponentSpareAssociation.setStatus('mandatory')
if mibBuilder.loadTexts: eComponentSpareAssociation.setDescription('')
a7020ComponentSpareIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7020, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7020ComponentSpareIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a7020ComponentSpareIndex.setDescription('An index into the Component Spare table. This index is the same as the index in the Association group which defines the spare association.')
a7020SpareFunctioningState = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7020, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vInactivestandby", 3), ("vActivestandby", 4), ("vActivestandbyThatInAdditionLoadBalances", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7020SpareFunctioningState.setStatus('mandatory')
if mibBuilder.loadTexts: a7020SpareFunctioningState.setDescription('This field specifies the functioning state of the spare.')
tWorldwideIdentifer = MibTable((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7021), )
if mibBuilder.loadTexts: tWorldwideIdentifer.setStatus('mandatory')
if mibBuilder.loadTexts: tWorldwideIdentifer.setDescription('The Worldwide Identifer')
eWorldwideIdentifer = MibTableRow((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7021, 1), ).setIndexNames((0, "ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "DmiComponentIndex"), (0, "ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7021WorldwideIdentifierIndex"))
if mibBuilder.loadTexts: eWorldwideIdentifer.setStatus('mandatory')
if mibBuilder.loadTexts: eWorldwideIdentifer.setDescription('')
a7021WorldwideIdentifierIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7021, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7021WorldwideIdentifierIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a7021WorldwideIdentifierIndex.setDescription('An index into the Worldwide Identifier table.')
a7021WorldwideIdentifierType = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7021, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vNone", 3), ("vVendorIdProductIdSerialNumber", 4), ("vIeeeExtendedUniqueIdentifier64-bit", 5), ("vFc-ph64-bitName_identifier", 6), ("vBinary", 7), ("vUnicode", 8), ("vLanMacAddress", 9), ("vWanAccessAddress", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7021WorldwideIdentifierType.setStatus('mandatory')
if mibBuilder.loadTexts: a7021WorldwideIdentifierType.setDescription('The type of identifier displayed by the Worldwide Identifier attribute.')
a7021WorldwideIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7021, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7021WorldwideIdentifier.setStatus('mandatory')
if mibBuilder.loadTexts: a7021WorldwideIdentifier.setDescription('The Worldwide identifier for this device.')
tMassStorageStatistics = MibTable((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7022), )
if mibBuilder.loadTexts: tMassStorageStatistics.setStatus('mandatory')
if mibBuilder.loadTexts: tMassStorageStatistics.setDescription('This group defines statistics that may be used by any other group.')
eMassStorageStatistics = MibTableRow((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7022, 1), ).setIndexNames((0, "ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "DmiComponentIndex"), (0, "ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7022StatisticsIndex"))
if mibBuilder.loadTexts: eMassStorageStatistics.setStatus('mandatory')
if mibBuilder.loadTexts: eMassStorageStatistics.setDescription('')
a7022StatisticsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7022, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7022StatisticsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a7022StatisticsIndex.setDescription('An index into the Statistics table.')
a7022BlocksRead = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7022, 1, 2), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7022BlocksRead.setStatus('mandatory')
if mibBuilder.loadTexts: a7022BlocksRead.setDescription('The accumulated count of 512 byte blocks of data read.')
a7022BlocksWritten = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7022, 1, 3), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7022BlocksWritten.setStatus('mandatory')
if mibBuilder.loadTexts: a7022BlocksWritten.setDescription('The accumulated count of 512 byte blocks of data written.')
a7022ReadCommandsIssued = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7022, 1, 4), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7022ReadCommandsIssued.setStatus('mandatory')
if mibBuilder.loadTexts: a7022ReadCommandsIssued.setDescription('The accumulated count of the number of read commands issued.')
a7022WriteCommandsIssued = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7022, 1, 5), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7022WriteCommandsIssued.setStatus('mandatory')
if mibBuilder.loadTexts: a7022WriteCommandsIssued.setDescription('The accumulated count of the number of write commands issued.')
a7022IoRange0Read = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7022, 1, 6), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7022IoRange0Read.setStatus('mandatory')
if mibBuilder.loadTexts: a7022IoRange0Read.setDescription('The number of read commands issued, size < 512 bytes.')
a7022IoRange1Read = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7022, 1, 7), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7022IoRange1Read.setStatus('mandatory')
if mibBuilder.loadTexts: a7022IoRange1Read.setDescription('The number of read commands issued, 512 bytes <= size < 1K bytes.')
a7022IoRange2Read = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7022, 1, 8), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7022IoRange2Read.setStatus('mandatory')
if mibBuilder.loadTexts: a7022IoRange2Read.setDescription('The number of read commands issued, 1K bytes <= size < 2K bytes.')
a7022IoRange3Read = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7022, 1, 9), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7022IoRange3Read.setStatus('mandatory')
if mibBuilder.loadTexts: a7022IoRange3Read.setDescription('The number of read commands issued, 2K bytes <= size < 4K bytes.')
a7022IoRange4Read = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7022, 1, 10), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7022IoRange4Read.setStatus('mandatory')
if mibBuilder.loadTexts: a7022IoRange4Read.setDescription('The number of read commands issued, 4K bytes <= size < 8K bytes.')
a7022IoRange5Read = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7022, 1, 11), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7022IoRange5Read.setStatus('mandatory')
if mibBuilder.loadTexts: a7022IoRange5Read.setDescription('The number of read commands issued, 8K bytes <= size < 16K bytes.')
a7022IoRange6Read = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7022, 1, 12), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7022IoRange6Read.setStatus('mandatory')
if mibBuilder.loadTexts: a7022IoRange6Read.setDescription('The number of read commands issued, 16K bytes <= size < 32K bytes.')
a7022IoRange7Read = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7022, 1, 13), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7022IoRange7Read.setStatus('mandatory')
if mibBuilder.loadTexts: a7022IoRange7Read.setDescription('The number of read commands issued, 32K bytes <= size < 64K bytes.')
a7022IoRange8Read = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7022, 1, 14), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7022IoRange8Read.setStatus('mandatory')
if mibBuilder.loadTexts: a7022IoRange8Read.setDescription('The number of read commands issued, 64K bytes <= size < 128K bytes.')
a7022IoRange9Read = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7022, 1, 15), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7022IoRange9Read.setStatus('mandatory')
if mibBuilder.loadTexts: a7022IoRange9Read.setDescription('The number of read commands issued, 128K bytes <= size < 256K bytes.')
a7022IoRange10Read = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7022, 1, 16), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7022IoRange10Read.setStatus('mandatory')
if mibBuilder.loadTexts: a7022IoRange10Read.setDescription('The number of read commands issued, 256K bytes <= size < 512K bytes.')
a7022IoRange11Read = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7022, 1, 17), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7022IoRange11Read.setStatus('mandatory')
if mibBuilder.loadTexts: a7022IoRange11Read.setDescription('The number of read commands issued, 512K bytes <= size < 1M bytes.')
a7022IoRange12Read = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7022, 1, 18), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7022IoRange12Read.setStatus('mandatory')
if mibBuilder.loadTexts: a7022IoRange12Read.setDescription('The number of read commands issued, size >= 1M bytes.')
a7022IoRange0Written = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7022, 1, 19), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7022IoRange0Written.setStatus('mandatory')
if mibBuilder.loadTexts: a7022IoRange0Written.setDescription('The number of write commands issued, size < 512 bytes.')
a7022IoRange1Written = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7022, 1, 20), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7022IoRange1Written.setStatus('mandatory')
if mibBuilder.loadTexts: a7022IoRange1Written.setDescription('The number of write commands issued, 512 bytes <= size < 1K bytes.')
a7022IoRange2Written = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7022, 1, 21), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7022IoRange2Written.setStatus('mandatory')
if mibBuilder.loadTexts: a7022IoRange2Written.setDescription('The number of write commands issued, 1K bytes <= size < 2K bytes.')
a7022IoRange3Written = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7022, 1, 22), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7022IoRange3Written.setStatus('mandatory')
if mibBuilder.loadTexts: a7022IoRange3Written.setDescription('The number of write commands issued, 2K bytes <= size < 4K bytes.')
a7022IoRange4Written = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7022, 1, 23), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7022IoRange4Written.setStatus('mandatory')
if mibBuilder.loadTexts: a7022IoRange4Written.setDescription('The number of write commands issued, 4K bytes <= size < 8K bytes.')
a7022IoRange5Written = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7022, 1, 24), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7022IoRange5Written.setStatus('mandatory')
if mibBuilder.loadTexts: a7022IoRange5Written.setDescription('The number of write commands issued, 8K bytes <= size < 16K bytes.')
a7022IoRange6Written = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7022, 1, 25), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7022IoRange6Written.setStatus('mandatory')
if mibBuilder.loadTexts: a7022IoRange6Written.setDescription('The number of write commands issued, 16K bytes <= size < 32K bytes.')
a7022IoRange7Written = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7022, 1, 26), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7022IoRange7Written.setStatus('mandatory')
if mibBuilder.loadTexts: a7022IoRange7Written.setDescription('The number of write commands issued, 32K bytes <= size < 64K bytes.')
a7022IoRange8Written = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7022, 1, 27), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7022IoRange8Written.setStatus('mandatory')
if mibBuilder.loadTexts: a7022IoRange8Written.setDescription('The number of write commands issued, 64K bytes <= size < 128K bytes.')
a7022IoRange9Written = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7022, 1, 28), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7022IoRange9Written.setStatus('mandatory')
if mibBuilder.loadTexts: a7022IoRange9Written.setDescription('The number of write commands issued, 128K bytes <= size < 256K bytes.')
a7022IoRange10Written = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7022, 1, 29), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7022IoRange10Written.setStatus('mandatory')
if mibBuilder.loadTexts: a7022IoRange10Written.setDescription('The number of write commands issued, 256K bytes <= size < 512K bytes.')
a7022IoRange11Written = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7022, 1, 30), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7022IoRange11Written.setStatus('mandatory')
if mibBuilder.loadTexts: a7022IoRange11Written.setDescription('The number of write commands issued, 512K bytes <= size < 1M bytes.')
a7022IoRange12Written = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7022, 1, 31), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7022IoRange12Written.setStatus('mandatory')
if mibBuilder.loadTexts: a7022IoRange12Written.setDescription('The number of write commands issued, size >= 1M bytes.')
tOverallStatus = MibTable((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7023), )
if mibBuilder.loadTexts: tOverallStatus.setStatus('mandatory')
if mibBuilder.loadTexts: tOverallStatus.setDescription('This group provides the overall status of the Adaptec CI/O MIF objects.')
eOverallStatus = MibTableRow((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7023, 1), ).setIndexNames((0, "ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "DmiComponentIndex"))
if mibBuilder.loadTexts: eOverallStatus.setStatus('mandatory')
if mibBuilder.loadTexts: eOverallStatus.setDescription('')
a7023OverallStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7023, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("vOk", 1), ("vWarning", 2), ("vFailure", 3), ("vUnknown", 4), ("vOther", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7023OverallStatus.setStatus('mandatory')
if mibBuilder.loadTexts: a7023OverallStatus.setDescription('The overall status of the Adaptec CI/O MIF objects.')
tOperationalState = MibTable((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7024), )
if mibBuilder.loadTexts: tOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: tOperationalState.setDescription('This group provides the operational state, usage, and availabili y status, and administrative state indicators for specific Device Group instance .')
eOperationalState = MibTableRow((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7024, 1), ).setIndexNames((0, "ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "DmiComponentIndex"), (0, "ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7024OperationalStateIndex"))
if mibBuilder.loadTexts: eOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: eOperationalState.setDescription('')
a7024OperationalStateIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7024, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7024OperationalStateIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a7024OperationalStateIndex.setDescription('The Index into the Operational State table.')
a7024DeviceGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7024, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7024DeviceGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a7024DeviceGroupIndex.setDescription('The group ID of the group referencing this instance.')
a7024OperationalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7024, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vEnabled", 3), ("vDisabled", 4), ("vNotApplicable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7024OperationalStatus.setStatus('mandatory')
if mibBuilder.loadTexts: a7024OperationalStatus.setDescription('The operational status of the Device Group instance.')
a7024UsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7024, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vIdle", 3), ("vActive", 4), ("vBusy", 5), ("vNotApplicable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7024UsageState.setStatus('mandatory')
if mibBuilder.loadTexts: a7024UsageState.setDescription('The usage state of the Device Group instance.')
a7024AvailabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7024, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vRunning", 3), ("vWarning", 4), ("vInTest", 5), ("vNotApplicable", 6), ("vPowerOff", 7), ("vOffLine", 8), ("vOffDuty", 9), ("vDegraded", 10), ("vNotInstalled", 11), ("vInstallError", 12), ("vPowerSave", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7024AvailabilityStatus.setStatus('mandatory')
if mibBuilder.loadTexts: a7024AvailabilityStatus.setDescription('The availability status of the Device Group instance.')
a7024AdministrativeState = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7024, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vLocked", 3), ("vUnlocked", 4), ("vNotApplicable", 5), ("vShuttingDown", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7024AdministrativeState.setStatus('mandatory')
if mibBuilder.loadTexts: a7024AdministrativeState.setDescription('The administrative state of the Device Group instance.')
a7024FatalErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7024, 1, 7), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7024FatalErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: a7024FatalErrorCount.setDescription('The accumulated Fatal or Non-recoverable error count for this Device Group instance.')
a7024MajorErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7024, 1, 8), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7024MajorErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: a7024MajorErrorCount.setDescription('The accumulated Major or Critical error count for this Device Group instance.')
a7024WarningErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7024, 1, 9), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7024WarningErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: a7024WarningErrorCount.setDescription('The accumulated Warning or Non-Critical error count for this Device Group instance.')
a7024CurrentErrorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7024, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vOk", 3), ("vNon-critical1", 4), ("vCritical", 5), ("vNon-recoverable1", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7024CurrentErrorStatus.setStatus('mandatory')
if mibBuilder.loadTexts: a7024CurrentErrorStatus.setDescription("This attribute presents the current error status for this Device Group instance. The most critical error status in effect should be presented. I.e. if a part of the Device Group instance is 'Critical', while other status is 'Non-critical' then the status 'Critical' should be reported.")
a7024DevicePredictedFailureStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7024, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vNotSupportedByThisDevice", 3), ("vNoFailurePredictedByTheDevice", 4), ("vDeviceFailurePredictedByTheDevice", 5), ("vMediaFailurePredictedByTheDevice", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7024DevicePredictedFailureStatus.setStatus('mandatory')
if mibBuilder.loadTexts: a7024DevicePredictedFailureStatus.setDescription('Enumeration describing the current Device Predicted Failure Status (e.g.: the S.M.A.R.T. status of the device).')
tEventLogCount = MibTable((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7025), )
if mibBuilder.loadTexts: tEventLogCount.setStatus('mandatory')
if mibBuilder.loadTexts: tEventLogCount.setDescription('Count of the number of entries in the event log table.')
eEventLogCount = MibTableRow((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7025, 1), ).setIndexNames((0, "ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "DmiComponentIndex"))
if mibBuilder.loadTexts: eEventLogCount.setStatus('mandatory')
if mibBuilder.loadTexts: eEventLogCount.setDescription('')
a7025EventLogCount = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7025, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7025EventLogCount.setStatus('mandatory')
if mibBuilder.loadTexts: a7025EventLogCount.setDescription('Count of the number of entries in the event log table.')
tEventLog = MibTable((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7026), )
if mibBuilder.loadTexts: tEventLog.setStatus('mandatory')
if mibBuilder.loadTexts: tEventLog.setDescription('This group provides a log of previous events.')
eEventLog = MibTableRow((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7026, 1), ).setIndexNames((0, "ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "DmiComponentIndex"), (0, "ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7026EventLogIndex"))
if mibBuilder.loadTexts: eEventLog.setStatus('mandatory')
if mibBuilder.loadTexts: eEventLog.setDescription('')
a7026EventLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7026, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7026EventLogIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a7026EventLogIndex.setDescription('The Index into the Event Log table.')
a7026EventLogEntry = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7026, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7026EventLogEntry.setStatus('mandatory')
if mibBuilder.loadTexts: a7026EventLogEntry.setDescription('An event log entry.')
a7026EventLogTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7026, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7026EventLogTimestamp.setStatus('mandatory')
if mibBuilder.loadTexts: a7026EventLogTimestamp.setDescription('The number of seconds that have elapsed between powerup and the event.')
tEventState = MibTable((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7027), )
if mibBuilder.loadTexts: tEventState.setStatus('mandatory')
if mibBuilder.loadTexts: tEventState.setDescription('This group holds the current state for state-based events.')
eEventState = MibTableRow((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7027, 1), ).setIndexNames((0, "ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "DmiComponentIndex"), (0, "ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7027EventStateIndex"))
if mibBuilder.loadTexts: eEventState.setStatus('mandatory')
if mibBuilder.loadTexts: eEventState.setDescription('')
a7027EventStateIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7027, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7027EventStateIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a7027EventStateIndex.setDescription('The Index into the Event State table.')
a7027EventGenerationGroupClass = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7027, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7027EventGenerationGroupClass.setStatus('mandatory')
if mibBuilder.loadTexts: a7027EventGenerationGroupClass.setDescription('The Class String of the event generator group.')
a7027EventType = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7027, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7027EventType.setStatus('mandatory')
if mibBuilder.loadTexts: a7027EventType.setDescription('Type of the event (same as Event Type attribute in event template).')
a7027CurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7027, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 8, 16, 32))).clone(namedValues=NamedValues(("vOk", 4), ("vNon-critical", 8), ("vCritical", 16), ("vNon-recoverable", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7027CurrentState.setStatus('mandatory')
if mibBuilder.loadTexts: a7027CurrentState.setDescription('Current state of the event type identified by the Event Type attribute.')
a7027AssociatedGroupObject = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7027, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7027AssociatedGroupObject.setStatus('mandatory')
if mibBuilder.loadTexts: a7027AssociatedGroupObject.setDescription("Object reference to spare causing event. The references shall use the format of 'x-dmi//<locator>/dmi/row; cid=<>; gid=<>; key=<>'.")
trap1ForDevices = NotificationType((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7002, 1) + (0,1)).setObjects(("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7002StorageDevicesEventType"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7002EventSeverity"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7002EventIsStateBased"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7002EventStateKey"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7002AssociatedGroup"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7002EventSystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7002EventSubsystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7002EventSolution"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7002InstanceDataPresent"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7002EventMessage"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7002VendorSpecificData"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7001StorageDeviceIndex"))
if mibBuilder.loadTexts: trap1ForDevices.setDescription('RebuildInProgress')
trap2ForDevices = NotificationType((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7002, 1) + (0,2)).setObjects(("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7002StorageDevicesEventType"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7002EventSeverity"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7002EventIsStateBased"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7002EventStateKey"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7002AssociatedGroup"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7002EventSystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7002EventSubsystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7002EventSolution"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7002InstanceDataPresent"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7002EventMessage"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7002VendorSpecificData"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7001StorageDeviceIndex"))
if mibBuilder.loadTexts: trap2ForDevices.setDescription('StorageDeviceReadying')
trap3ForDevices = NotificationType((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7002, 1) + (0,3)).setObjects(("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7002StorageDevicesEventType"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7002EventSeverity"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7002EventIsStateBased"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7002EventStateKey"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7002AssociatedGroup"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7002EventSystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7002EventSubsystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7002EventSolution"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7002InstanceDataPresent"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7002EventMessage"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7002VendorSpecificData"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7001StorageDeviceIndex"))
if mibBuilder.loadTexts: trap3ForDevices.setDescription('StorageDeviceError')
trap4ForDevices = NotificationType((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7002, 1) + (0,4)).setObjects(("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7002StorageDevicesEventType"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7002EventSeverity"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7002EventIsStateBased"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7002EventStateKey"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7002AssociatedGroup"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7002EventSystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7002EventSubsystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7002EventSolution"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7002InstanceDataPresent"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7002EventMessage"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7002VendorSpecificData"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7001StorageDeviceIndex"))
if mibBuilder.loadTexts: trap4ForDevices.setDescription('Self-monitoringWarning')
trap5ForDevices = NotificationType((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7002, 1) + (0,5)).setObjects(("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7002StorageDevicesEventType"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7002EventSeverity"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7002EventIsStateBased"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7002EventStateKey"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7002AssociatedGroup"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7002EventSystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7002EventSubsystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7002EventSolution"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7002InstanceDataPresent"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7002EventMessage"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7002VendorSpecificData"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7001StorageDeviceIndex"))
if mibBuilder.loadTexts: trap5ForDevices.setDescription('CioEvent')
trap1ForController = NotificationType((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7004, 1) + (0,1)).setObjects(("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7004StorageControllerEventType"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7004EventSeverity"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7004EventIsStateBased"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7004EventStateKey"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7004AssociatedGroup"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7004EventSystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7004EventSubsystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7004EventSolution"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7004InstanceDataPresent"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7004EventMessage"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7004VendorSpecificData"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7003ControllerIndex"))
if mibBuilder.loadTexts: trap1ForController.setDescription('StorageControllerError')
trap2ForController = NotificationType((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7004, 1) + (0,2)).setObjects(("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7004StorageControllerEventType"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7004EventSeverity"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7004EventIsStateBased"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7004EventStateKey"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7004AssociatedGroup"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7004EventSystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7004EventSubsystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7004EventSolution"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7004InstanceDataPresent"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7004EventMessage"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7004VendorSpecificData"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7003ControllerIndex"))
if mibBuilder.loadTexts: trap2ForController.setDescription('Self-monitoringWarning1')
trap3ForController = NotificationType((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7004, 1) + (0,3)).setObjects(("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7004StorageControllerEventType"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7004EventSeverity"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7004EventIsStateBased"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7004EventStateKey"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7004AssociatedGroup"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7004EventSystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7004EventSubsystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7004EventSolution"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7004InstanceDataPresent"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7004EventMessage"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7004VendorSpecificData"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7003ControllerIndex"))
if mibBuilder.loadTexts: trap3ForController.setDescription('CioEvent')
trap1ForEnclosure = NotificationType((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7006, 1) + (0,1)).setObjects(("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7006EnclosureEventType"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7006EventSeverity"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7006EventIsStateBased"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7006EventStateKey"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7006AssociatedGroup"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7006EventSystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7006EventSubsystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7006EventSolution"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7006InstanceDataPresentr"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7006EventMessage"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7006VendorSpecificData"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7005EnclosureIndex"))
if mibBuilder.loadTexts: trap1ForEnclosure.setDescription('CioEvent')
trap1ForBusPort = NotificationType((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7008, 1) + (0,1)).setObjects(("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7008BusPortEventType"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7008EventSeverity"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7008EventIsStateBased"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7008EventStateKey"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7008AssociatedGroup"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7008EventSystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7008EventSubsystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7008EventSolution"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7008InstanceDataPresent"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7008EventMessage"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7008VendorSpecificData"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7007BusPortIndex"))
if mibBuilder.loadTexts: trap1ForBusPort.setDescription('BusPortError')
trap1ForVolumeSet = NotificationType((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7012, 1) + (0,1)).setObjects(("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012VolumeSetEventType"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventSeverity"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventIsStateBased"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventStateKey"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012AssociatedGroup"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventSystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventSubsystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventSolution"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012InstanceDataPresent"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventMessage"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012VendorSpecificData"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7011VolumeSetIndex"))
if mibBuilder.loadTexts: trap1ForVolumeSet.setDescription('VolumeSetExposed')
trap2ForVolumeSet = NotificationType((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7012, 1) + (0,2)).setObjects(("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012VolumeSetEventType"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventSeverity"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventIsStateBased"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventStateKey"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012AssociatedGroup"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventSystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventSubsystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventSolution"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012InstanceDataPresent"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventMessage"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012VendorSpecificData"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7011VolumeSetIndex"))
if mibBuilder.loadTexts: trap2ForVolumeSet.setDescription('RebuildInProgress')
trap3ForVolumeSet = NotificationType((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7012, 1) + (0,3)).setObjects(("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012VolumeSetEventType"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventSeverity"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventIsStateBased"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventStateKey"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012AssociatedGroup"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventSystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventSubsystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventSolution"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012InstanceDataPresent"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventMessage"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012VendorSpecificData"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7011VolumeSetIndex"))
if mibBuilder.loadTexts: trap3ForVolumeSet.setDescription('ProtectionDisabled')
trap4ForVolumeSet = NotificationType((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7012, 1) + (0,4)).setObjects(("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012VolumeSetEventType"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventSeverity"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventIsStateBased"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventStateKey"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012AssociatedGroup"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventSystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventSubsystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventSolution"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012InstanceDataPresent"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventMessage"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012VendorSpecificData"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7011VolumeSetIndex"))
if mibBuilder.loadTexts: trap4ForVolumeSet.setDescription('VolumeSetReadying')
trap5ForVolumeSet = NotificationType((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7012, 1) + (0,5)).setObjects(("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012VolumeSetEventType"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventSeverity"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventIsStateBased"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventStateKey"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012AssociatedGroup"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventSystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventSubsystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventSolution"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012InstanceDataPresent"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventMessage"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012VendorSpecificData"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7011VolumeSetIndex"))
if mibBuilder.loadTexts: trap5ForVolumeSet.setDescription('RecalculateActive')
trap6ForVolumeSet = NotificationType((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7012, 1) + (0,6)).setObjects(("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012VolumeSetEventType"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventSeverity"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventIsStateBased"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventStateKey"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012AssociatedGroup"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventSystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventSubsystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventSolution"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012InstanceDataPresent"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventMessage"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012VendorSpecificData"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7011VolumeSetIndex"))
if mibBuilder.loadTexts: trap6ForVolumeSet.setDescription('SpareInUse')
trap7ForVolumeSet = NotificationType((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7012, 1) + (0,7)).setObjects(("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012VolumeSetEventType"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventSeverity"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventIsStateBased"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventStateKey"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012AssociatedGroup"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventSystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventSubsystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventSolution"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012InstanceDataPresent"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventMessage"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012VendorSpecificData"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7011VolumeSetIndex"))
if mibBuilder.loadTexts: trap7ForVolumeSet.setDescription('VerifyInProgress')
trap8ForVolumeSet = NotificationType((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7012, 1) + (0,8)).setObjects(("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012VolumeSetEventType"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventSeverity"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventIsStateBased"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventStateKey"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012AssociatedGroup"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventSystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventSubsystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventSolution"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012InstanceDataPresent"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventMessage"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012VendorSpecificData"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7011VolumeSetIndex"))
if mibBuilder.loadTexts: trap8ForVolumeSet.setDescription('VolumeSetBroken')
trap9ForVolumeSet = NotificationType((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7012, 1) + (0,9)).setObjects(("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012VolumeSetEventType"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventSeverity"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventIsStateBased"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventStateKey"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012AssociatedGroup"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventSystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventSubsystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventSolution"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012InstanceDataPresent"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventMessage"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012VendorSpecificData"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7011VolumeSetIndex"))
if mibBuilder.loadTexts: trap9ForVolumeSet.setDescription('CioEvent')
trap1ForSetActivity = NotificationType((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7013, 1) + (0,1)).setObjects(("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7013VolumeSetEventType"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7013EventSeverity"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7013EventIsStateBased"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7013EventStateKey"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7013AssociatedGroup"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7013EventSystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7013EventSubsystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7013EventSolution"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7013InstanceDataPresent"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7013EventMessage"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7013VendorSpecificData"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7011VolumeSetIndex"))
if mibBuilder.loadTexts: trap1ForSetActivity.setDescription('CioEvent')
trap1ForRedundancyGroup = NotificationType((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7015, 1) + (0,1)).setObjects(("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7015RedundancyGroupEventType"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7015EventSeverity"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7015EventIsStateBased"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7015EventStateKey"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7015AssociatedGroup"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7015EventSystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7015EventSubsystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7015EventSolution"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7015InstanceDataPresent"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7015EventMessage"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7015VendorSpecificData"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7014RedundancyGroupIndex"))
if mibBuilder.loadTexts: trap1ForRedundancyGroup.setDescription('RedundancyGroupExposed')
trap2ForRedundancyGroup = NotificationType((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7015, 1) + (0,2)).setObjects(("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7015RedundancyGroupEventType"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7015EventSeverity"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7015EventIsStateBased"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7015EventStateKey"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7015AssociatedGroup"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7015EventSystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7015EventSubsystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7015EventSolution"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7015InstanceDataPresent"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7015EventMessage"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7015VendorSpecificData"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7014RedundancyGroupIndex"))
if mibBuilder.loadTexts: trap2ForRedundancyGroup.setDescription('RebuildInProgress')
trap3ForRedundancyGroup = NotificationType((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7015, 1) + (0,3)).setObjects(("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7015RedundancyGroupEventType"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7015EventSeverity"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7015EventIsStateBased"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7015EventStateKey"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7015AssociatedGroup"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7015EventSystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7015EventSubsystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7015EventSolution"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7015InstanceDataPresent"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7015EventMessage"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7015VendorSpecificData"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7014RedundancyGroupIndex"))
if mibBuilder.loadTexts: trap3ForRedundancyGroup.setDescription('ProtectionDisabled')
trap4ForRedundancyGroup = NotificationType((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7015, 1) + (0,4)).setObjects(("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7015RedundancyGroupEventType"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7015EventSeverity"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7015EventIsStateBased"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7015EventStateKey"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7015AssociatedGroup"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7015EventSystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7015EventSubsystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7015EventSolution"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7015InstanceDataPresent"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7015EventMessage"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7015VendorSpecificData"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7014RedundancyGroupIndex"))
if mibBuilder.loadTexts: trap4ForRedundancyGroup.setDescription('RecalculationActive')
trap5ForRedundancyGroup = NotificationType((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7015, 1) + (0,5)).setObjects(("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7015RedundancyGroupEventType"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7015EventSeverity"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7015EventIsStateBased"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7015EventStateKey"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7015AssociatedGroup"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7015EventSystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7015EventSubsystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7015EventSolution"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7015InstanceDataPresent"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7015EventMessage"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7015VendorSpecificData"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7014RedundancyGroupIndex"))
if mibBuilder.loadTexts: trap5ForRedundancyGroup.setDescription('VerifyInProgress')
trap1ForSpareEvents = NotificationType((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7016, 1) + (0,1)).setObjects(("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7016SpareEventType"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7016EventSeverity"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7016EventIsStateBased"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7016EventStateKey"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7016AssociatedGroup"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7016EventSystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7016EventSubsystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7016EventSolution"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7016InstanceDataPresent"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7016EventMessage"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7016VendorSpecificData"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7020ComponentSpareIndex"))
if mibBuilder.loadTexts: trap1ForSpareEvents.setDescription('ComponentSpareBroken')
trap2ForSpareEvents = NotificationType((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7016, 1) + (0,2)).setObjects(("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7016SpareEventType"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7016EventSeverity"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7016EventIsStateBased"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7016EventStateKey"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7016AssociatedGroup"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7016EventSystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7016EventSubsystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7016EventSolution"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7016InstanceDataPresent"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7016EventMessage"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7016VendorSpecificData"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7020ComponentSpareIndex"))
if mibBuilder.loadTexts: trap2ForSpareEvents.setDescription('ComponentSpareInUse')
trap3ForSpareEvents = NotificationType((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7016, 1) + (0,3)).setObjects(("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7016SpareEventType"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7016EventSeverity"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7016EventIsStateBased"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7016EventStateKey"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7016AssociatedGroup"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7016EventSystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7016EventSubsystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7016EventSolution"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7016InstanceDataPresent"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7016EventMessage"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7016VendorSpecificData"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7020ComponentSpareIndex"))
if mibBuilder.loadTexts: trap3ForSpareEvents.setDescription('ComponentSpareReadying')
trap4ForSpareEvents = NotificationType((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7016, 1) + (0,4)).setObjects(("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7016SpareEventType"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7016EventSeverity"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7016EventIsStateBased"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7016EventStateKey"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7016AssociatedGroup"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7016EventSystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7016EventSubsystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7016EventSolution"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7016InstanceDataPresent"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7016EventMessage"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7016VendorSpecificData"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7020ComponentSpareIndex"))
if mibBuilder.loadTexts: trap4ForSpareEvents.setDescription('CioEvent')
trap1ForAssociation = NotificationType((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7018, 1) + (0,1)).setObjects(("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7018AssociationEventType"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7018EventSeverity"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7018EventIsStateBased"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7018EventStateKey"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7018AssociatedGroup"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7018EventSystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7018EventSubsystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7018EventSolution"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7018InstanceDataPresent"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7018EventMessage"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7018VendorSpecificData"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7017AssociationIndex"))
if mibBuilder.loadTexts: trap1ForAssociation.setDescription('NewObjectDetected')
trap2ForAssociation = NotificationType((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7018, 1) + (0,2)).setObjects(("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7018AssociationEventType"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7018EventSeverity"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7018EventIsStateBased"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7018EventStateKey"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7018AssociatedGroup"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7018EventSystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7018EventSubsystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7018EventSolution"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7018InstanceDataPresent"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7018EventMessage"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7018VendorSpecificData"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7017AssociationIndex"))
if mibBuilder.loadTexts: trap2ForAssociation.setDescription('ExistingObjectReplaced')
trap3ForAssociation = NotificationType((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7018, 1) + (0,3)).setObjects(("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7018AssociationEventType"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7018EventSeverity"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7018EventIsStateBased"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7018EventStateKey"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7018AssociatedGroup"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7018EventSystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7018EventSubsystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7018EventSolution"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7018InstanceDataPresent"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7018EventMessage"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7018VendorSpecificData"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7017AssociationIndex"))
if mibBuilder.loadTexts: trap3ForAssociation.setDescription('ExistingObjectIsGone')
mibBuilder.exportSymbols("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", a7013EventSolution=a7013EventSolution, a7024MajorErrorCount=a7024MajorErrorCount, a7009NumberOfBlocksOfCheckData=a7009NumberOfBlocksOfCheckData, a7018AssociatedGroup=a7018AssociatedGroup, trap2ForVolumeSet=trap2ForVolumeSet, DmiInteger=DmiInteger, a7022IoRange3Written=a7022IoRange3Written, a7016InstanceDataPresent=a7016InstanceDataPresent, a7024WarningErrorCount=a7024WarningErrorCount, eMiftomib=eMiftomib, trap3ForDevices=trap3ForDevices, trap3ForAssociation=trap3ForAssociation, eStorageDevicesEvents=eStorageDevicesEvents, trap4ForVolumeSet=trap4ForVolumeSet, a7012VendorSpecificData=a7012VendorSpecificData, trap4ForRedundancyGroup=trap4ForRedundancyGroup, a7001FormattedMediaCapacity=a7001FormattedMediaCapacity, a7022StatisticsIndex=a7022StatisticsIndex, a7003Identification=a7003Identification, a7006EventSystem=a7006EventSystem, DmiDateX=DmiDateX, tVolumeSetEvents=tVolumeSetEvents, tEnclosureEvents=tEnclosureEvents, dmtfGroups=dmtfGroups, a7003ProtectionManagement=a7003ProtectionManagement, a7015EventSeverity=a7015EventSeverity, a7006AssociatedGroup=a7006AssociatedGroup, tOverallStatus=tOverallStatus, a7010NumberOfBlocks=a7010NumberOfBlocks, a7008InstanceDataPresent=a7008InstanceDataPresent, eRedundancyGroup=eRedundancyGroup, a7006EventSubsystem=a7006EventSubsystem, a7022IoRange8Read=a7022IoRange8Read, trap8ForVolumeSet=trap8ForVolumeSet, trap1ForAssociation=trap1ForAssociation, a7006EventSolution=a7006EventSolution, a7007Isochronous=a7007Isochronous, a7015RedundancyGroupEventType=a7015RedundancyGroupEventType, a7015InstanceDataPresent=a7015InstanceDataPresent, a7022IoRange9Written=a7022IoRange9Written, a7006EventMessage=a7006EventMessage, a7022IoRange10Written=a7022IoRange10Written, eBusPortEvents=eBusPortEvents, a7002EventSeverity=a7002EventSeverity, a7007MaximumTransferRate=a7007MaximumTransferRate, a7008AssociatedGroup=a7008AssociatedGroup, a7001Encryption=a7001Encryption, a7013EventMessage=a7013EventMessage, a7005Description=a7005Description, eEventLog=eEventLog, a7018InstanceDataPresent=a7018InstanceDataPresent, a7004EventMessage=a7004EventMessage, a7004EventSystem=a7004EventSystem, a7018EventIsStateBased=a7018EventIsStateBased, a7004EventSeverity=a7004EventSeverity, a7012AssociatedGroup=a7012AssociatedGroup, a7007Protocol=a7007Protocol, eAssociationEvents=eAssociationEvents, DmiInteger64X=DmiInteger64X, a7016AssociatedGroup=a7016AssociatedGroup, a7012EventSolution=a7012EventSolution, a7011ProtectedSpaceExtentInterleaveDepth=a7011ProtectedSpaceExtentInterleaveDepth, a7022IoRange10Read=a7022IoRange10Read, trap3ForVolumeSet=trap3ForVolumeSet, eAggregateProtectedSpaceExtent=eAggregateProtectedSpaceExtent, a7005EnclosureIndex=a7005EnclosureIndex, trap2ForAssociation=trap2ForAssociation, a7017AssociationIndex=a7017AssociationIndex, tOperationalState=tOperationalState, a7002EventStateKey=a7002EventStateKey, trap7ForVolumeSet=trap7ForVolumeSet, a7018EventMessage=a7018EventMessage, a7011ProtectedSpaceStripeLength=a7011ProtectedSpaceStripeLength, a7008EventIsStateBased=a7008EventIsStateBased, trap3ForRedundancyGroup=trap3ForRedundancyGroup, a7022IoRange11Read=a7022IoRange11Read, tVolumeSet=tVolumeSet, a7016VendorSpecificData=a7016VendorSpecificData, eStorageControllerEvents=eStorageControllerEvents, a7022IoRange9Read=a7022IoRange9Read, a7018EventSeverity=a7018EventSeverity, a7013VendorSpecificData=a7013VendorSpecificData, eWorldwideIdentifer=eWorldwideIdentifer, a7007SignalCharacteristics=a7007SignalCharacteristics, a7007ConnectorGender=a7007ConnectorGender, eVolumeSetActivityEvents=eVolumeSetActivityEvents, tMassStorageAssociation=tMassStorageAssociation, DmiCounter=DmiCounter, a7021WorldwideIdentifier=a7021WorldwideIdentifier, a7002EventIsStateBased=a7002EventIsStateBased, a7021WorldwideIdentifierType=a7021WorldwideIdentifierType, eOperationalState=eOperationalState, a7007MaximumWidth=a7007MaximumWidth, a7007MaximumNumberOfAttachments=a7007MaximumNumberOfAttachments, a7004VendorSpecificData=a7004VendorSpecificData, eBusPort=eBusPort, trap6ForVolumeSet=trap6ForVolumeSet, eVolumeSet=eVolumeSet, a7017Reference1=a7017Reference1, tEventLogCount=tEventLogCount, a7027AssociatedGroupObject=a7027AssociatedGroupObject, a7015EventSolution=a7015EventSolution, tStorageController=tStorageController, a7002EventSubsystem=a7002EventSubsystem, a7013InstanceDataPresent=a7013InstanceDataPresent, eStorageDevices=eStorageDevices, a7022BlocksWritten=a7022BlocksWritten, a7016EventSubsystem=a7016EventSubsystem, tMassStorageStatistics=tMassStorageStatistics, a7001RemovableDevice=a7001RemovableDevice, trap1ForBusPort=trap1ForBusPort, a7022IoRange1Written=a7022IoRange1Written, tBusPortAssociation=tBusPortAssociation, tComponentid=tComponentid, a1Verify=a1Verify, tMiftomib=tMiftomib, trap9ForVolumeSet=trap9ForVolumeSet, a7008BusPortEventType=a7008BusPortEventType, tEventState=tEventState, a7001MediaLoaded=a7001MediaLoaded, trap2ForDevices=trap2ForDevices, tVolumeSetActivityEvents=tVolumeSetActivityEvents, a7003BusMaster=a7003BusMaster, trap1ForDevices=trap1ForDevices, eMassStorageStatistics=eMassStorageStatistics, a7004EventIsStateBased=a7004EventIsStateBased, trap5ForRedundancyGroup=trap5ForRedundancyGroup, a7024UsageState=a7024UsageState, tStorageDevices=tStorageDevices, a7008EventSolution=a7008EventSolution, tStorageControllerEvents=tStorageControllerEvents, trap1ForVolumeSet=trap1ForVolumeSet, trap2ForSpareEvents=trap2ForSpareEvents, a7002AssociatedGroup=a7002AssociatedGroup, a7001TypeDescription=a7001TypeDescription, eAggregatePhysicalExtent=eAggregatePhysicalExtent, trap1ForEnclosure=trap1ForEnclosure, a7017Reference2=a7017Reference2, DmiOctetstring=DmiOctetstring, a7023OverallStatus=a7023OverallStatus, tEnclosure=tEnclosure, a7018EventStateKey=a7018EventStateKey, adaptec=adaptec, eBusPortAssociation=eBusPortAssociation, a7011VolumeSetIndex=a7011VolumeSetIndex, a7013EventSystem=a7013EventSystem, a7022IoRange6Read=a7022IoRange6Read, a7001StorageDeviceIndex=a7001StorageDeviceIndex, tAggregatePhysicalExtent=tAggregatePhysicalExtent, a7017Type=a7017Type, a1Product=a1Product, eEnclosureEvents=eEnclosureEvents, a7009AggregatePhysicalExtentIndex=a7009AggregatePhysicalExtentIndex, a7027EventGenerationGroupClass=a7027EventGenerationGroupClass, tWorldwideIdentifer=tWorldwideIdentifer, eComponentid=eComponentid, eEnclosure=eEnclosure, a7014RedundancyType=a7014RedundancyType, trap5ForVolumeSet=trap5ForVolumeSet, a7024CurrentErrorStatus=a7024CurrentErrorStatus, a7002EventSolution=a7002EventSolution, a7015EventMessage=a7015EventMessage, a7012EventMessage=a7012EventMessage, a7022ReadCommandsIssued=a7022ReadCommandsIssued, a7006EventIsStateBased=a7006EventIsStateBased, a7022IoRange4Read=a7022IoRange4Read, a7007ProtocolDescription=a7007ProtocolDescription, a7007AddressDescriptor=a7007AddressDescriptor, a7010AggregateProtectedSpaceExtentIndex=a7010AggregateProtectedSpaceExtentIndex, a7015AssociatedGroup=a7015AssociatedGroup, trap2ForRedundancyGroup=trap2ForRedundancyGroup, a7005Type=a7005Type, trap1ForSetActivity=trap1ForSetActivity, a7022BlocksRead=a7022BlocksRead, a7012EventIsStateBased=a7012EventIsStateBased, a7013EventStateKey=a7013EventStateKey, trap3ForSpareEvents=trap3ForSpareEvents, a7022IoRange11Written=a7022IoRange11Written, a7006VendorSpecificData=a7006VendorSpecificData, a7012InstanceDataPresent=a7012InstanceDataPresent, a7018EventSolution=a7018EventSolution, a99MibName=a99MibName, tEventLog=tEventLog, thirdparty=thirdparty, a7022IoRange5Read=a7022IoRange5Read, a7015EventSystem=a7015EventSystem, a1Manufacturer=a1Manufacturer, a7022IoRange3Read=a7022IoRange3Read, eOverallStatus=eOverallStatus, a99DisableTrap=a99DisableTrap, a1Version=a1Version, a7012VolumeSetEventType=a7012VolumeSetEventType, a7022IoRange12Read=a7022IoRange12Read, a7022IoRange7Read=a7022IoRange7Read, a7024OperationalStateIndex=a7024OperationalStateIndex, a7020SpareFunctioningState=a7020SpareFunctioningState, trap1ForRedundancyGroup=trap1ForRedundancyGroup, a7002VendorSpecificData=a7002VendorSpecificData, a7024FatalErrorCount=a7024FatalErrorCount, tRedundancyGroup=tRedundancyGroup, a7022IoRange1Read=a7022IoRange1Read, eComponentSpareAssociation=eComponentSpareAssociation, a7019NegotiatedWidth=a7019NegotiatedWidth, eSpareEvents=eSpareEvents, a7012EventSystem=a7012EventSystem, a7012EventSubsystem=a7012EventSubsystem, a7016SpareEventType=a7016SpareEventType, a7007ConnectorTypeDescription=a7007ConnectorTypeDescription, a7022IoRange6Written=a7022IoRange6Written, a7013EventIsStateBased=a7013EventIsStateBased, a7026EventLogIndex=a7026EventLogIndex, a7006EnclosureEventType=a7006EnclosureEventType, a7026EventLogTimestamp=a7026EventLogTimestamp, a7008EventSubsystem=a7008EventSubsystem, trap2ForController=trap2ForController, eEventLogCount=eEventLogCount, a7024AvailabilityStatus=a7024AvailabilityStatus, a7022IoRange8Written=a7022IoRange8Written, a7024DeviceGroupIndex=a7024DeviceGroupIndex, a7001Sub_identifier=a7001Sub_identifier, trap1ForController=trap1ForController, tStorageDevicesEvents=tStorageDevicesEvents, a7016EventSeverity=a7016EventSeverity, a7006EventSeverity=a7006EventSeverity, a7022IoRange5Written=a7022IoRange5Written, a7007ConnectorType=a7007ConnectorType, a7001MediaDataBlockSize=a7001MediaDataBlockSize, a7008EventSeverity=a7008EventSeverity, a7013VolumeSetEventType=a7013VolumeSetEventType, a7018VendorSpecificData=a7018VendorSpecificData, a7004InstanceDataPresent=a7004InstanceDataPresent, a7014RedundancyGroupIndex=a7014RedundancyGroupIndex, a7001Compression=a7001Compression, a7002EventMessage=a7002EventMessage, a7002InstanceDataPresent=a7002InstanceDataPresent, eMassStorageAssociation=eMassStorageAssociation, a7021WorldwideIdentifierIndex=a7021WorldwideIdentifierIndex, a7019NegotiatedSpeed=a7019NegotiatedSpeed, a7022IoRange4Written=a7022IoRange4Written, a7008EventMessage=a7008EventMessage, a7001DeviceLoaded=a7001DeviceLoaded, a7013EventSubsystem=a7013EventSubsystem, a7019BusPortAssociationIndex=a7019BusPortAssociationIndex, a7011TotalStorageCapacity=a7011TotalStorageCapacity, tComponentSpareAssociation=tComponentSpareAssociation, a7012EventStateKey=a7012EventStateKey, a7003ControllerIndex=a7003ControllerIndex, DmiDisplaystring=DmiDisplaystring, a7018AssociationEventType=a7018AssociationEventType, a7004StorageControllerEventType=a7004StorageControllerEventType, eStorageController=eStorageController, a7008VendorSpecificData=a7008VendorSpecificData, a7026EventLogEntry=a7026EventLogEntry, a7022IoRange7Written=a7022IoRange7Written)
mibBuilder.exportSymbols("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", trap4ForSpareEvents=trap4ForSpareEvents, a7013EventSeverity=a7013EventSeverity, a7012EventSeverity=a7012EventSeverity, a7024AdministrativeState=a7024AdministrativeState, a7016EventSystem=a7016EventSystem, tAggregateProtectedSpaceExtent=tAggregateProtectedSpaceExtent, a1Installation=a1Installation, a7008EventStateKey=a7008EventStateKey, tRedundancyGroupEvents=tRedundancyGroupEvents, trap4ForDevices=trap4ForDevices, a7016EventIsStateBased=a7016EventIsStateBased, a7013AssociatedGroup=a7013AssociatedGroup, a7002EventSystem=a7002EventSystem, a7024OperationalStatus=a7024OperationalStatus, trap3ForController=trap3ForController, a7015VendorSpecificData=a7015VendorSpecificData, a7018EventSystem=a7018EventSystem, a7003SecondsSinceLastPower_up=a7003SecondsSinceLastPower_up, a7001Type=a7001Type, a7006InstanceDataPresent=a7006InstanceDataPresent, isc20=isc20, a7009NumberOfBlocks=a7009NumberOfBlocks, a7022IoRange0Read=a7022IoRange0Read, a1SerialNumber=a1SerialNumber, a7016EventSolution=a7016EventSolution, a7020ComponentSpareIndex=a7020ComponentSpareIndex, a7001RemovableMedia=a7001RemovableMedia, a7011Name=a7011Name, tSpareEvents=tSpareEvents, a7022IoRange12Written=a7022IoRange12Written, a7015EventSubsystem=a7015EventSubsystem, a7022IoRange0Written=a7022IoRange0Written, a99MibOid=a99MibOid, trap5ForDevices=trap5ForDevices, a7022IoRange2Read=a7022IoRange2Read, tBusPortEvents=tBusPortEvents, a7004EventSubsystem=a7004EventSubsystem, a7015EventStateKey=a7015EventStateKey, a7006EventStateKey=a7006EventStateKey, a7024DevicePredictedFailureStatus=a7024DevicePredictedFailureStatus, a7022WriteCommandsIssued=a7022WriteCommandsIssued, trap1ForSpareEvents=trap1ForSpareEvents, a7004EventStateKey=a7004EventStateKey, a7022IoRange2Written=a7022IoRange2Written, tAssociationEvents=tAssociationEvents, tBusPort=tBusPort, a7002StorageDevicesEventType=a7002StorageDevicesEventType, a7004AssociatedGroup=a7004AssociatedGroup, a7027EventType=a7027EventType, a7007BusPortIndex=a7007BusPortIndex, eRedundancyGroupEvents=eRedundancyGroupEvents, eVolumeSetEvents=eVolumeSetEvents, a7025EventLogCount=a7025EventLogCount, a7015EventIsStateBased=a7015EventIsStateBased, a7016EventMessage=a7016EventMessage, a7008EventSystem=a7008EventSystem, a7004EventSolution=a7004EventSolution, a7016EventStateKey=a7016EventStateKey, a7018EventSubsystem=a7018EventSubsystem, eEventState=eEventState, DmiComponentIndex=DmiComponentIndex, a7027EventStateIndex=a7027EventStateIndex, a7027CurrentState=a7027CurrentState)
