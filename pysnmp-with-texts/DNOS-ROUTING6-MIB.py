#
# PySNMP MIB module DNOS-ROUTING6-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DNOS-ROUTING6-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:52:04 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
dnOS, = mibBuilder.importSymbols("DELL-REF-MIB", "dnOS")
Ipv6AddressPrefix, Ipv6Address, Ipv6AddressIfIdentifier, Ipv6IfIndex, Ipv6IfIndexOrZero = mibBuilder.importSymbols("IPV6-TC", "Ipv6AddressPrefix", "Ipv6Address", "Ipv6AddressIfIdentifier", "Ipv6IfIndex", "Ipv6IfIndexOrZero")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, Counter64, TimeTicks, MibIdentifier, IpAddress, Gauge32, NotificationType, Unsigned32, Bits, Counter32, ModuleIdentity, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, iso = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Counter64", "TimeTicks", "MibIdentifier", "IpAddress", "Gauge32", "NotificationType", "Unsigned32", "Bits", "Counter32", "ModuleIdentity", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso")
PhysAddress, MacAddress, DisplayString, RowStatus, TextualConvention, TimeStamp, TruthValue, VariablePointer, RowPointer = mibBuilder.importSymbols("SNMPv2-TC", "PhysAddress", "MacAddress", "DisplayString", "RowStatus", "TextualConvention", "TimeStamp", "TruthValue", "VariablePointer", "RowPointer")
fastPathRoutingIpv6 = ModuleIdentity((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30))
fastPathRoutingIpv6.setRevisions(('2011-01-26 00:00', '2007-05-23 00:00', '2005-09-21 17:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: fastPathRoutingIpv6.setRevisionsDescriptions(('Postal address updated.', 'Dell branding related changes.', 'Updated for release',))
if mibBuilder.loadTexts: fastPathRoutingIpv6.setLastUpdated('201101260000Z')
if mibBuilder.loadTexts: fastPathRoutingIpv6.setOrganization('Dell, Inc.')
if mibBuilder.loadTexts: fastPathRoutingIpv6.setContactInfo('')
if mibBuilder.loadTexts: fastPathRoutingIpv6.setDescription('The Dell Networking Private MIB for Ipv6 Routing')
agentIpv6Group = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1))
agentIpv6RoutingMode = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpv6RoutingMode.setStatus('current')
if mibBuilder.loadTexts: agentIpv6RoutingMode.setDescription('Administratively enables/disables ipv6 unicast routing on the switch.')
agentIpv6InterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 2), )
if mibBuilder.loadTexts: agentIpv6InterfaceTable.setStatus('current')
if mibBuilder.loadTexts: agentIpv6InterfaceTable.setDescription('')
agentIpv6InterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 2, 1), ).setIndexNames((0, "DNOS-ROUTING6-MIB", "agentIpv6InterfaceIfIndex"))
if mibBuilder.loadTexts: agentIpv6InterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: agentIpv6InterfaceEntry.setDescription('')
agentIpv6InterfaceIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIpv6InterfaceIfIndex.setStatus('current')
if mibBuilder.loadTexts: agentIpv6InterfaceIfIndex.setDescription('The IfIndex associated with this instance.')
agentIpv6InterfaceMtuValue = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1280, 1500), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpv6InterfaceMtuValue.setStatus('current')
if mibBuilder.loadTexts: agentIpv6InterfaceMtuValue.setDescription('Configures the MTU value for this interface.If it is not yet configured, retrieving the value of this object results in a zero value. Setting the value zero to this object effectively un-configures the MTU.')
agentIpv6InterfaceDadTransmits = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpv6InterfaceDadTransmits.setStatus('current')
if mibBuilder.loadTexts: agentIpv6InterfaceDadTransmits.setDescription('Configures the dad transmits value for this interface.')
agentIpv6InterfaceLinkLocalOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpv6InterfaceLinkLocalOnly.setStatus('current')
if mibBuilder.loadTexts: agentIpv6InterfaceLinkLocalOnly.setDescription('When enabled, interface is capable of ipv6 operation without a global address. In this case, an eui-64 based link-local address is used. ')
agentIpv6InterfaceIcmpUnreachables = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpv6InterfaceIcmpUnreachables.setStatus('current')
if mibBuilder.loadTexts: agentIpv6InterfaceIcmpUnreachables.setDescription('If this object is enable, it indicates that ICMPv6 unreachables can be sent on this interface.')
agentIpv6InterfaceAutoconfig = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpv6InterfaceAutoconfig.setStatus('current')
if mibBuilder.loadTexts: agentIpv6InterfaceAutoconfig.setDescription('If this object is enabled, it indicates that the IPv6 address is automatically generated using IPv6 stateless address auto configuration.')
agentIpv6InterfaceDhcpClient = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpv6InterfaceDhcpClient.setStatus('current')
if mibBuilder.loadTexts: agentIpv6InterfaceDhcpClient.setDescription('If this object is enabled, the interface uses DHCPv6 Client protocol to acquire an IPv6 address.')
agentIpv6InterfaceIcmpRedirects = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpv6InterfaceIcmpRedirects.setStatus('current')
if mibBuilder.loadTexts: agentIpv6InterfaceIcmpRedirects.setDescription('Enable/Disable the sending of ICMPv6 redirect messages in the redirect scenario where the forwarded packet is sent out through the same interface on which the packet was received. ')
agentIpv6RouterAdvertisementTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 3), )
if mibBuilder.loadTexts: agentIpv6RouterAdvertisementTable.setStatus('current')
if mibBuilder.loadTexts: agentIpv6RouterAdvertisementTable.setDescription('There is no global administrative flag for router advertisement. The global routing flag (agentIpv6RoutingMode) will be used for this purpose. If routing is disabled, router advertisement is disabled as well.')
agentIpv6RouterAdvertisementEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 3, 1), ).setIndexNames((0, "DNOS-ROUTING6-MIB", "agentIpv6RouterAdvertisementIfIndex"))
if mibBuilder.loadTexts: agentIpv6RouterAdvertisementEntry.setStatus('current')
if mibBuilder.loadTexts: agentIpv6RouterAdvertisementEntry.setDescription('')
agentIpv6RouterAdvertisementIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIpv6RouterAdvertisementIfIndex.setStatus('current')
if mibBuilder.loadTexts: agentIpv6RouterAdvertisementIfIndex.setDescription('Interface Number to configure Router Advertisement on.')
agentIpv6RouterAdvertisementSuppressMode = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpv6RouterAdvertisementSuppressMode.setStatus('current')
if mibBuilder.loadTexts: agentIpv6RouterAdvertisementSuppressMode.setDescription('Enable or disable router advertisement suppression on the interface.')
agentIpv6RouterAdvertisementMaxAdvertisementInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 1800)).clone(600)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpv6RouterAdvertisementMaxAdvertisementInterval.setStatus('current')
if mibBuilder.loadTexts: agentIpv6RouterAdvertisementMaxAdvertisementInterval.setDescription('Maximum time allowed between sending router advertisements from the interface.')
agentIpv6RouterAdvertisementAdvertisementLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 65520)).clone(1800)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpv6RouterAdvertisementAdvertisementLifetime.setStatus('current')
if mibBuilder.loadTexts: agentIpv6RouterAdvertisementAdvertisementLifetime.setDescription('Value of lifetime field of router advertisement sent from the interface. This value must be greater than or equal to agentIpv6RouterAdvertisementMaxAdvertisementInterval.')
agentIpv6RouterAdvertisementNbrSolicitInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpv6RouterAdvertisementNbrSolicitInterval.setStatus('current')
if mibBuilder.loadTexts: agentIpv6RouterAdvertisementNbrSolicitInterval.setDescription('Value of retrans time field of router advertisement sent from the interface. A value of 0 means this router does not specifiy the interval.')
agentIpv6RouterAdvertisementReachableTime = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpv6RouterAdvertisementReachableTime.setStatus('current')
if mibBuilder.loadTexts: agentIpv6RouterAdvertisementReachableTime.setDescription('Value of reachable time field of router advertisement sent from the interface. A value of 0 means this router does not specifiy the interval.')
agentIpv6RouterAdvertisementManagedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpv6RouterAdvertisementManagedFlag.setStatus('current')
if mibBuilder.loadTexts: agentIpv6RouterAdvertisementManagedFlag.setDescription('Value of managed config field of router advertisement sent from the interface.')
agentIpv6RouterAdvertisementOtherFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpv6RouterAdvertisementOtherFlag.setStatus('current')
if mibBuilder.loadTexts: agentIpv6RouterAdvertisementOtherFlag.setDescription('Value of other config field of router advertisement sent from the interface.')
agentIpv6RouterAdvertisementHopLimitUnspecifiedMode = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpv6RouterAdvertisementHopLimitUnspecifiedMode.setStatus('current')
if mibBuilder.loadTexts: agentIpv6RouterAdvertisementHopLimitUnspecifiedMode.setDescription('This object configures the router to send Router Advertisements on an interface with unspecified (0) Current Hop Limit value. This will tell the hosts on that link to ignore the Hop Limit from this Router.')
agentIpv6AddrPrefixTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 4), )
if mibBuilder.loadTexts: agentIpv6AddrPrefixTable.setStatus('current')
if mibBuilder.loadTexts: agentIpv6AddrPrefixTable.setDescription('The list of IPv6 address prefixes of IPv6 interfaces.')
agentIpv6AddrPrefixEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 4, 1), ).setIndexNames((0, "DNOS-ROUTING6-MIB", "agentIpv6InterfaceIfIndex"), (0, "DNOS-ROUTING6-MIB", "agentIpv6AddrPrefix"), (0, "DNOS-ROUTING6-MIB", "agentIpv6AddrPrefixLength"))
if mibBuilder.loadTexts: agentIpv6AddrPrefixEntry.setStatus('current')
if mibBuilder.loadTexts: agentIpv6AddrPrefixEntry.setDescription('An interface entry containing objects of a particular IPv6 address prefix.')
agentIpv6AddrPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 4, 1, 1), Ipv6AddressPrefix())
if mibBuilder.loadTexts: agentIpv6AddrPrefix.setStatus('current')
if mibBuilder.loadTexts: agentIpv6AddrPrefix.setDescription('The prefix associated with the this interface.')
agentIpv6AddrPrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setUnits('bits')
if mibBuilder.loadTexts: agentIpv6AddrPrefixLength.setStatus('current')
if mibBuilder.loadTexts: agentIpv6AddrPrefixLength.setDescription('The length of the prefix (in bits).')
agentIpv6AddrPrefixOnLinkFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 4, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpv6AddrPrefixOnLinkFlag.setStatus('current')
if mibBuilder.loadTexts: agentIpv6AddrPrefixOnLinkFlag.setDescription("This object has the value 'true(1)', if this prefix can be used for on-link determination and the value 'false(2)' otherwise.")
agentIpv6AddrPrefixAutonomousFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 4, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpv6AddrPrefixAutonomousFlag.setStatus('current')
if mibBuilder.loadTexts: agentIpv6AddrPrefixAutonomousFlag.setDescription('Autonomous address configuration flag. When true(1), indicates that this prefix can be used for autonomous address configuration (i.e. can be used to form a local interface address). If false(2), it is not used to autoconfigure a local interface address.')
agentIpv6AddrPrefixAdvPreferredLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 4, 1, 5), Unsigned32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpv6AddrPrefixAdvPreferredLifetime.setStatus('current')
if mibBuilder.loadTexts: agentIpv6AddrPrefixAdvPreferredLifetime.setDescription('It is the length of time in seconds that this prefix will remain preferred, i.e. time until deprecation. A value of 4,294,967,295 represents infinity. The address generated from a deprecated prefix should no longer be used as a source address in new communications, but packets received on such an interface are processed as expected.')
agentIpv6AddrPrefixAdvValidLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 4, 1, 6), Unsigned32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpv6AddrPrefixAdvValidLifetime.setStatus('current')
if mibBuilder.loadTexts: agentIpv6AddrPrefixAdvValidLifetime.setDescription('It is the length of time in seconds that this prefix will remain valid, i.e. time until invalidation. A value of 4,294,967,295 represents infinity. The address generated from an invalidated prefix should not appear as the destination or source address of a packet.')
agentIpv6AddrTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 5), )
if mibBuilder.loadTexts: agentIpv6AddrTable.setStatus('current')
if mibBuilder.loadTexts: agentIpv6AddrTable.setDescription("The table of addressing information relevant to this node's interface addresses.")
agentIpv6AddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 5, 1), ).setIndexNames((0, "DNOS-ROUTING6-MIB", "agentIpv6InterfaceIfIndex"), (0, "DNOS-ROUTING6-MIB", "agentIpv6AddrAddress"))
if mibBuilder.loadTexts: agentIpv6AddrEntry.setStatus('current')
if mibBuilder.loadTexts: agentIpv6AddrEntry.setDescription("The addressing information for one of this node's interface addresses.")
agentIpv6AddrAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 5, 1, 1), Ipv6Address())
if mibBuilder.loadTexts: agentIpv6AddrAddress.setStatus('current')
if mibBuilder.loadTexts: agentIpv6AddrAddress.setDescription("The IPv6 address to which this entry's addressing information pertains.")
agentIpv6AddrPfxLength = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setUnits('bits').setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentIpv6AddrPfxLength.setStatus('current')
if mibBuilder.loadTexts: agentIpv6AddrPfxLength.setDescription('The length of the prefix (in bits) associated with the IPv6 address of this entry.')
agentIpv6AddrEui64Flag = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 5, 1, 3), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentIpv6AddrEui64Flag.setStatus('current')
if mibBuilder.loadTexts: agentIpv6AddrEui64Flag.setDescription("This object has the value 'true(1)', if this address uses and eui-64 generated interface identifier and the value 'false(2)' otherwise.")
agentIpv6AddrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 5, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentIpv6AddrStatus.setStatus('current')
if mibBuilder.loadTexts: agentIpv6AddrStatus.setDescription('Creates a new entry in the Address table. Allowed values are: createAndGo(4) - Creates an entry in this table, associating the address with a given interface. The agentIpv6NetMask object must be set during creation. destroy(6) - Removes the associated address from the interface.')
agentIpv6StaticRouteTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 6), )
if mibBuilder.loadTexts: agentIpv6StaticRouteTable.setStatus('current')
if mibBuilder.loadTexts: agentIpv6StaticRouteTable.setDescription('IPv6 Static Routing table. This table contains an entry for each valid IPv6 static unicast route that can be used for packet forwarding determination.')
agentIpv6StaticRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 6, 1), ).setIndexNames((0, "DNOS-ROUTING6-MIB", "agentIpv6StaticRouteDest"), (0, "DNOS-ROUTING6-MIB", "agentIpv6StaticRoutePfxLength"), (0, "DNOS-ROUTING6-MIB", "agentIpv6StaticRouteIfIndex"), (0, "DNOS-ROUTING6-MIB", "agentIpv6StaticRouteNextHop"))
if mibBuilder.loadTexts: agentIpv6StaticRouteEntry.setStatus('current')
if mibBuilder.loadTexts: agentIpv6StaticRouteEntry.setDescription('A routing entry.')
agentIpv6StaticRouteDest = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 6, 1, 1), Ipv6AddressPrefix())
if mibBuilder.loadTexts: agentIpv6StaticRouteDest.setStatus('current')
if mibBuilder.loadTexts: agentIpv6StaticRouteDest.setDescription('The destination IPv6 address of this route. This object may not take a Multicast address value.')
agentIpv6StaticRoutePfxLength = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setUnits('bits')
if mibBuilder.loadTexts: agentIpv6StaticRoutePfxLength.setStatus('current')
if mibBuilder.loadTexts: agentIpv6StaticRoutePfxLength.setDescription('Indicates the prefix length of the destination address.')
agentIpv6StaticRouteIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 6, 1, 3), Ipv6IfIndexOrZero())
if mibBuilder.loadTexts: agentIpv6StaticRouteIfIndex.setStatus('current')
if mibBuilder.loadTexts: agentIpv6StaticRouteIfIndex.setDescription('The index value which uniquely identifies the local interface through which the next hop of this route should be reached. The interface identified by a particular value of this index is the same interface as identified by the same value of ipv6IfIndex. For routes with global address next hop this value can be zero.')
agentIpv6StaticRouteNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 6, 1, 4), Ipv6Address())
if mibBuilder.loadTexts: agentIpv6StaticRouteNextHop.setStatus('current')
if mibBuilder.loadTexts: agentIpv6StaticRouteNextHop.setDescription('The address of the next system en route. ')
agentIpv6StaticRoutePreference = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentIpv6StaticRoutePreference.setStatus('current')
if mibBuilder.loadTexts: agentIpv6StaticRoutePreference.setDescription('The routing preference metric for this route. A lower value is more preferred.')
agentIpv6StaticRouteStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 6, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentIpv6StaticRouteStatus.setStatus('current')
if mibBuilder.loadTexts: agentIpv6StaticRouteStatus.setDescription('Creates a new entry in the Address table. Allowed values are: createAndGo(4) - Creates an entry in this table. destroy(6) - Removes the associated route from the interface.')
agentIpv6ServicePortGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 7))
agentIpv6ServicePortPrefixTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 7, 1), )
if mibBuilder.loadTexts: agentIpv6ServicePortPrefixTable.setStatus('current')
if mibBuilder.loadTexts: agentIpv6ServicePortPrefixTable.setDescription('IPv6 Service Port Prefix Table. This table contains an entry for each valid IPv6 prefix configured on the Service Port.')
agentIpv6ServicePortPrefixEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 7, 1, 1), ).setIndexNames((0, "DNOS-ROUTING6-MIB", "agentIpv6ServicePortPrefixIndex"))
if mibBuilder.loadTexts: agentIpv6ServicePortPrefixEntry.setStatus('current')
if mibBuilder.loadTexts: agentIpv6ServicePortPrefixEntry.setDescription('An IPv6 Service Port Prefix entry.')
agentIpv6ServicePortPrefixIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 7, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: agentIpv6ServicePortPrefixIndex.setStatus('current')
if mibBuilder.loadTexts: agentIpv6ServicePortPrefixIndex.setDescription('The index of the Ipv6 Prefix Address configured on the Service Port. Removal of a row will cause index values to be reassigned.')
agentIpv6ServicePortPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 7, 1, 1, 2), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIpv6ServicePortPrefix.setStatus('current')
if mibBuilder.loadTexts: agentIpv6ServicePortPrefix.setDescription('The Ipv6 Prefix Address configured on the Service Port.')
agentIpv6ServicePortPrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 7, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIpv6ServicePortPrefixLength.setStatus('current')
if mibBuilder.loadTexts: agentIpv6ServicePortPrefixLength.setDescription('The length of the IPv6 Prefix Address.')
agentIpv6ServicePortDefaultRouterTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 7, 2), )
if mibBuilder.loadTexts: agentIpv6ServicePortDefaultRouterTable.setStatus('current')
if mibBuilder.loadTexts: agentIpv6ServicePortDefaultRouterTable.setDescription('IPv6 Service Port Default Router Table. This table contains an entry for each valid IPv6 Default Router configured on the Service Port.')
agentIpv6ServicePortDefaultRouterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 7, 2, 1), ).setIndexNames((0, "DNOS-ROUTING6-MIB", "agentIpv6ServicePortDefaultRouterIndex"))
if mibBuilder.loadTexts: agentIpv6ServicePortDefaultRouterEntry.setStatus('current')
if mibBuilder.loadTexts: agentIpv6ServicePortDefaultRouterEntry.setDescription('An IPv6 Service Port Default Router entry.')
agentIpv6ServicePortDefaultRouterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 7, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: agentIpv6ServicePortDefaultRouterIndex.setStatus('current')
if mibBuilder.loadTexts: agentIpv6ServicePortDefaultRouterIndex.setDescription('The index of the IPv6 Default Router Address configured on the Service Port. Removal of a row will cause index values to be reassigned.')
agentIpv6ServicePortDefaultRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 7, 2, 1, 2), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIpv6ServicePortDefaultRouter.setStatus('current')
if mibBuilder.loadTexts: agentIpv6ServicePortDefaultRouter.setDescription('The Address of the IPv6 Default Router configured on the Service Port.')
agentIpv6ServicePortNbrTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 7, 3), )
if mibBuilder.loadTexts: agentIpv6ServicePortNbrTable.setStatus('current')
if mibBuilder.loadTexts: agentIpv6ServicePortNbrTable.setDescription('IPv6 Service Port Neighbor Table. This table contains an entry for each valid IPv6 Neighbor configured on the Service Port.')
agentIpv6ServicePortNbrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 7, 3, 1), ).setIndexNames((0, "DNOS-ROUTING6-MIB", "agentIpv6ServicePortNbrAddr"))
if mibBuilder.loadTexts: agentIpv6ServicePortNbrEntry.setStatus('current')
if mibBuilder.loadTexts: agentIpv6ServicePortNbrEntry.setDescription('An IPv6 Service Port Neighbor entry.')
agentIpv6ServicePortNbrAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 7, 3, 1, 1), Ipv6Address())
if mibBuilder.loadTexts: agentIpv6ServicePortNbrAddr.setStatus('current')
if mibBuilder.loadTexts: agentIpv6ServicePortNbrAddr.setDescription('The Ipv6 Address of a neighbor switch visible to the Service Port.')
agentIpv6ServicePortNbrPhysAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 7, 3, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIpv6ServicePortNbrPhysAddr.setStatus('current')
if mibBuilder.loadTexts: agentIpv6ServicePortNbrPhysAddr.setDescription('The MacAddress of the neighboring switch.')
agentIpv6ServicePortNbrState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 7, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6))).clone(namedValues=NamedValues(("reachable", 1), ("stale", 2), ("delay", 3), ("probe", 4), ("unknown", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIpv6ServicePortNbrState.setStatus('current')
if mibBuilder.loadTexts: agentIpv6ServicePortNbrState.setDescription('The state of the neighboring switch: reachable(1) - The neighbor is reachable by this switch. stale(2) - Information about the neighbor is scheduled for deletion. delay(3) - No information has been received from neighbor during delay period. probe(4) - Switch is attempting to probe for this neighbor. unknown(6) - Unknown status.')
agentIpv6ServicePortNbrUpdated = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 7, 3, 1, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIpv6ServicePortNbrUpdated.setStatus('current')
if mibBuilder.loadTexts: agentIpv6ServicePortNbrUpdated.setDescription('The last sysUpTime that this neighbor has been updated.')
agentIpv6ServicePortNbrIsRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 7, 3, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIpv6ServicePortNbrIsRouter.setStatus('current')
if mibBuilder.loadTexts: agentIpv6ServicePortNbrIsRouter.setDescription('Returns true(1) if the neighbor machine is a router, false(2) otherwise.')
agentIpv6ServicePortNbrType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 7, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("dynamic", 2), ("static", 3), ("local", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIpv6ServicePortNbrType.setStatus('current')
if mibBuilder.loadTexts: agentIpv6ServicePortNbrType.setDescription("The type of the mapping. The 'dynamic(2)' type indicates that the IPv6 address to physical addresses mapping has been dynamically resolved using the IPv6 Neighbor Discovery protocol. The static(3)' types indicates that the mapping has been statically configured. The local(4) indicates that the mapping is provided for an entity's own interface address.")
agentIpv6ServicePortNbrCfgTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 7, 4), )
if mibBuilder.loadTexts: agentIpv6ServicePortNbrCfgTable.setStatus('current')
if mibBuilder.loadTexts: agentIpv6ServicePortNbrCfgTable.setDescription('The table contains an entry for each static IPv6 Neighbor on the Service Port.')
agentIpv6ServicePortNbrCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 7, 4, 1), ).setIndexNames((0, "DNOS-ROUTING6-MIB", "agentIpv6ServicePortNbrCfgAddr"))
if mibBuilder.loadTexts: agentIpv6ServicePortNbrCfgEntry.setStatus('current')
if mibBuilder.loadTexts: agentIpv6ServicePortNbrCfgEntry.setDescription('An entry of the static IPv6 Neighbor on the Service Port.')
agentIpv6ServicePortNbrCfgAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 7, 4, 1, 1), Ipv6Address())
if mibBuilder.loadTexts: agentIpv6ServicePortNbrCfgAddr.setStatus('current')
if mibBuilder.loadTexts: agentIpv6ServicePortNbrCfgAddr.setDescription('The Ipv6 Address of a static neighbor on the Service Port.')
agentIpv6ServicePortNbrCfgPhysAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 7, 4, 1, 2), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentIpv6ServicePortNbrCfgPhysAddr.setStatus('current')
if mibBuilder.loadTexts: agentIpv6ServicePortNbrCfgPhysAddr.setDescription('The MAC Address of a static neighbor on the Service Port.')
agentIpv6ServicePortNbrCfgEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 7, 4, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentIpv6ServicePortNbrCfgEntryStatus.setStatus('current')
if mibBuilder.loadTexts: agentIpv6ServicePortNbrCfgEntryStatus.setDescription('Create or delete the static neighbor entry on the Service Port. The configured static neighbor entry is always active.')
agentIpv6IcmpControlGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 8))
agentIpv6IcmpRateLimitInterval = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 8, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpv6IcmpRateLimitInterval.setStatus('current')
if mibBuilder.loadTexts: agentIpv6IcmpRateLimitInterval.setDescription('Specifies the time interval between tokens being placed in the bucket for ICMP Ratelimit.')
agentIpv6IcmpRateLimitBurstSize = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 8, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpv6IcmpRateLimitBurstSize.setStatus('current')
if mibBuilder.loadTexts: agentIpv6IcmpRateLimitBurstSize.setDescription('Specifies the number of tokens to be placed after timeout.')
agentDhcp6ClientParametersTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 9), )
if mibBuilder.loadTexts: agentDhcp6ClientParametersTable.setStatus('current')
if mibBuilder.loadTexts: agentDhcp6ClientParametersTable.setDescription('Information about the DHCPv6 Client parameters on the interfaces.')
agentDhcp6ClientParametersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 9, 1), ).setIndexNames((0, "DNOS-ROUTING6-MIB", "agentDhcp6ClientInterfaceIndex"))
if mibBuilder.loadTexts: agentDhcp6ClientParametersEntry.setStatus('current')
if mibBuilder.loadTexts: agentDhcp6ClientParametersEntry.setDescription('DHCPv6 Client information on an interface.')
agentDhcp6ClientInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 9, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDhcp6ClientInterfaceIndex.setStatus('current')
if mibBuilder.loadTexts: agentDhcp6ClientInterfaceIndex.setDescription('The Interface index on which the IPv6 address is leased by the DHCPv6 Server.')
agentDhcp6ClientPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 9, 1, 2), Ipv6AddressPrefix()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDhcp6ClientPrefix.setStatus('current')
if mibBuilder.loadTexts: agentDhcp6ClientPrefix.setDescription('The IPv6 Prefix leased by the DHCPv6 Server.')
agentDhcp6ClientPrefixlength = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 9, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDhcp6ClientPrefixlength.setStatus('current')
if mibBuilder.loadTexts: agentDhcp6ClientPrefixlength.setDescription('The Prefix length corresponding to the IPv6 Prefix leased by the DHCPv6 Server.')
agentDhcp6ClientState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("inactive", 0), ("solicit", 1), ("request", 2), ("active", 3), ("renew", 4), ("rebind", 5), ("release", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDhcp6ClientState.setStatus('current')
if mibBuilder.loadTexts: agentDhcp6ClientState.setDescription('The State of the DHCPv6 Client on this interface.')
agentDhcp6ClientServerDUID = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 9, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDhcp6ClientServerDUID.setStatus('current')
if mibBuilder.loadTexts: agentDhcp6ClientServerDUID.setDescription('The DHCPv6 Unique Identifier of the DHCPv6 Server on this interface.')
agentDhcp6ClientT1Time = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 9, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDhcp6ClientT1Time.setStatus('current')
if mibBuilder.loadTexts: agentDhcp6ClientT1Time.setDescription('The T1 (in seconds) time as indicated by the DHCPv6 Server. T1 value indicates the time interval after which the address is requested for renewal.')
agentDhcp6ClientT2Time = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 9, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDhcp6ClientT2Time.setStatus('current')
if mibBuilder.loadTexts: agentDhcp6ClientT2Time.setDescription('The T2 (in seconds) time as indicated by the DHCPv6 Server. T2 value indicates the time interval after which the Client sends Rebind message to the Server incase there are no replies to the Renew messages.')
agentDhcp6ClientIAID = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 9, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDhcp6ClientIAID.setStatus('current')
if mibBuilder.loadTexts: agentDhcp6ClientIAID.setDescription('An identifier for an identity association chosen by this Client.')
agentDhcp6ClientPreferredLifeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 9, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDhcp6ClientPreferredLifeTime.setStatus('current')
if mibBuilder.loadTexts: agentDhcp6ClientPreferredLifeTime.setDescription('The time (in seconds) that the IPv6 address is leased by the DHCPv6 Server.')
agentDhcp6ClientValidLifeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 9, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDhcp6ClientValidLifeTime.setStatus('current')
if mibBuilder.loadTexts: agentDhcp6ClientValidLifeTime.setDescription('The time (in seconds) that the IPv6 address is leased by the DHCPv6 Server.')
agentDhcp6ClientRenewTime = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 9, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDhcp6ClientRenewTime.setStatus('current')
if mibBuilder.loadTexts: agentDhcp6ClientRenewTime.setDescription('The time (in seconds) remaining to send a DHCPv6 Renew request to DHCPv6 Server for the leased address.')
agentDhcp6ClientExpireTime = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 9, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDhcp6ClientExpireTime.setStatus('current')
if mibBuilder.loadTexts: agentDhcp6ClientExpireTime.setDescription('The time (in seconds) when the DHCPv6 leased address expires.')
agentIpv6RoutingTableSummaryGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 10))
agentIpv6ConnectedRoutes = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 10, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIpv6ConnectedRoutes.setStatus('current')
if mibBuilder.loadTexts: agentIpv6ConnectedRoutes.setDescription('The number of connected routes in the IPv6 routing table.')
agentIpv6StaticRoutes = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 10, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIpv6StaticRoutes.setStatus('current')
if mibBuilder.loadTexts: agentIpv6StaticRoutes.setDescription('The number of static routes in the IPv6 routing table.')
agentIpv66to4Routes = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 10, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIpv66to4Routes.setStatus('current')
if mibBuilder.loadTexts: agentIpv66to4Routes.setDescription('The number of 6to4 routes in the IPv6 routing table.')
agentIpv6OspfRoutes = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 10, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIpv6OspfRoutes.setStatus('current')
if mibBuilder.loadTexts: agentIpv6OspfRoutes.setDescription('The number of OSPFv2 routes in the IPv6 routing table.')
agentIpv6OspfIntraRoutes = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 10, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIpv6OspfIntraRoutes.setStatus('current')
if mibBuilder.loadTexts: agentIpv6OspfIntraRoutes.setDescription('The number of OSPFv2 intra-area routes in the IPv6 routing table.')
agentIpv6OspfInterRoutes = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 10, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIpv6OspfInterRoutes.setStatus('current')
if mibBuilder.loadTexts: agentIpv6OspfInterRoutes.setDescription('The number of OSPFv2 inter-area routes in the IPv6 routing table.')
agentIpv6OspfExt1Routes = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 10, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIpv6OspfExt1Routes.setStatus('current')
if mibBuilder.loadTexts: agentIpv6OspfExt1Routes.setDescription('The number of OSPFv2 external type 1 routes in the IPv6 routing table.')
agentIpv6OspfExt2Routes = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 10, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIpv6OspfExt2Routes.setStatus('current')
if mibBuilder.loadTexts: agentIpv6OspfExt2Routes.setDescription('The number of OSPFv2 external type 2 routes in the IPv6 routing table.')
agentIpv6BgpRoutes = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 10, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIpv6BgpRoutes.setStatus('current')
if mibBuilder.loadTexts: agentIpv6BgpRoutes.setDescription('The number of BGP routes in the IPv6 routing table.')
agentIpv6EbgpRoutes = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 10, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIpv6EbgpRoutes.setStatus('current')
if mibBuilder.loadTexts: agentIpv6EbgpRoutes.setDescription('The number of external BGP routes in the IPv6 routing table.')
agentIpv6IbgpRoutes = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 10, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIpv6IbgpRoutes.setStatus('current')
if mibBuilder.loadTexts: agentIpv6IbgpRoutes.setDescription('The number of internal BGP routes in the IPv6 routing table.')
agentIpv6LocalBgpRoutes = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 10, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIpv6LocalBgpRoutes.setStatus('current')
if mibBuilder.loadTexts: agentIpv6LocalBgpRoutes.setDescription('The number of local BGP routes in the IPv6 routing table.')
agentIpv6RejectRoutes = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 10, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIpv6RejectRoutes.setStatus('current')
if mibBuilder.loadTexts: agentIpv6RejectRoutes.setDescription('The number of reject routes in the IPv6 routing table.')
agentIpv6TotalRoutes = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 10, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIpv6TotalRoutes.setStatus('current')
if mibBuilder.loadTexts: agentIpv6TotalRoutes.setDescription('The number of routes in the IPv6 routing table.')
agentIpv6BestRoutes = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 10, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIpv6BestRoutes.setStatus('current')
if mibBuilder.loadTexts: agentIpv6BestRoutes.setDescription('The number of IPv6 routes in the forwarding table.')
agentIpv6BestRoutesHigh = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 10, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIpv6BestRoutesHigh.setStatus('current')
if mibBuilder.loadTexts: agentIpv6BestRoutesHigh.setDescription('The highest number of IPv6 routes in the forwarding table.')
agentIpv6AlternateRoutes = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 10, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIpv6AlternateRoutes.setStatus('current')
if mibBuilder.loadTexts: agentIpv6AlternateRoutes.setDescription('The number of alternate routes in the IPv6 routing table. An alternate route is less preferred than the best route and is not used for forwarding.')
agentIpv6RouteAdds = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 10, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIpv6RouteAdds.setStatus('current')
if mibBuilder.loadTexts: agentIpv6RouteAdds.setDescription('The number of routes added to the IPv6 routing table.')
agentIpv6RouteModifies = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 10, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIpv6RouteModifies.setStatus('current')
if mibBuilder.loadTexts: agentIpv6RouteModifies.setDescription('The number of routes changed in the IPv6 routing table.')
agentIpv6RouteDeletes = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 10, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIpv6RouteDeletes.setStatus('current')
if mibBuilder.loadTexts: agentIpv6RouteDeletes.setDescription('The number of routes removed from the IPv6 routing table.')
agentIpv6UnresolvedRouteAdds = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 10, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIpv6UnresolvedRouteAdds.setStatus('current')
if mibBuilder.loadTexts: agentIpv6UnresolvedRouteAdds.setDescription("The number of IPv6 route adds that failed because none of the route's next hops were on a local subnet.")
agentIpv6InvalidRouteAdds = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 10, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIpv6InvalidRouteAdds.setStatus('current')
if mibBuilder.loadTexts: agentIpv6InvalidRouteAdds.setDescription('The number of IPv6 routes adds that failed because the route was invalid.')
agentIpv6FailedRouteAdds = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 10, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIpv6FailedRouteAdds.setStatus('current')
if mibBuilder.loadTexts: agentIpv6FailedRouteAdds.setDescription('The number of IPv6 routes adds that failed because of a resource limitation in the routing table')
agentIpv6ReservedLocals = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 10, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIpv6ReservedLocals.setStatus('current')
if mibBuilder.loadTexts: agentIpv6ReservedLocals.setDescription('The number of IPv6 routing table entries reserved for a local subnet on a routing interface that is down. ')
agentIpv6UniqueNextHops = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 10, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIpv6UniqueNextHops.setStatus('current')
if mibBuilder.loadTexts: agentIpv6UniqueNextHops.setDescription('The number of distinct next hops used among all IPv6 routes currently in the routing table. These include local interfaces for local routes and neighbors for indirect routes.')
agentIpv6UniqueNextHopsHigh = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 10, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIpv6UniqueNextHopsHigh.setStatus('current')
if mibBuilder.loadTexts: agentIpv6UniqueNextHopsHigh.setDescription('The highest count of unique next hops since counters were last cleared.')
agentIpv6NextHopGroups = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 10, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIpv6NextHopGroups.setStatus('current')
if mibBuilder.loadTexts: agentIpv6NextHopGroups.setDescription('The current number of next hop groups in use by one or more routes. Each next hop group includes one or more next hops.')
agentIpv6NextHopGroupsHigh = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 10, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIpv6NextHopGroupsHigh.setStatus('current')
if mibBuilder.loadTexts: agentIpv6NextHopGroupsHigh.setDescription('The highest count of next hop groups since counters were last cleared.')
agentIpv6EcmpGroups = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 10, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIpv6EcmpGroups.setStatus('current')
if mibBuilder.loadTexts: agentIpv6EcmpGroups.setDescription('The number of next hop groups with multiple next hops.')
agentIpv6EcmpGroupsHigh = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 10, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIpv6EcmpGroupsHigh.setStatus('current')
if mibBuilder.loadTexts: agentIpv6EcmpGroupsHigh.setDescription('The high water mark of the number of ECMP groups.')
agentIpv6EcmpRoutes = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 10, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIpv6EcmpRoutes.setStatus('current')
if mibBuilder.loadTexts: agentIpv6EcmpRoutes.setDescription('The current number of IPv6 routes with multiple next hops.')
agentIpv6TruncEcmpRoutes = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 10, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIpv6TruncEcmpRoutes.setStatus('current')
if mibBuilder.loadTexts: agentIpv6TruncEcmpRoutes.setDescription('The number of ECMP routes that are currently installed in the forwarding table with just one next hop. The forwarding table may limit the number of ECMP routes or the number of ECMP groups. When an ECMP route cannot be installed because such a limit is reached, the route is installed with a single next hop.')
agentIpv6EcmpRetries = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 10, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIpv6EcmpRetries.setStatus('current')
if mibBuilder.loadTexts: agentIpv6EcmpRetries.setDescription('The number of ECMP routes that have been installed in the forwarding table after initially being installed with a single next hop.')
agentIpv6EcmpCountTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 11), )
if mibBuilder.loadTexts: agentIpv6EcmpCountTable.setStatus('current')
if mibBuilder.loadTexts: agentIpv6EcmpCountTable.setDescription('A count of the number of routes with each number of ECMP next hops. A walk of this table only returns the entries with a non-zero value for agentIpv6EcmpRouteCount.')
agentIpv6EcmpCountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 11, 1), ).setIndexNames((0, "DNOS-ROUTING6-MIB", "agentIpv6EcmpNextHopCount"))
if mibBuilder.loadTexts: agentIpv6EcmpCountEntry.setStatus('current')
if mibBuilder.loadTexts: agentIpv6EcmpCountEntry.setDescription('Number of IPv6 routes with a given number of next hops.')
agentIpv6EcmpNextHopCount = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 11, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 128)))
if mibBuilder.loadTexts: agentIpv6EcmpNextHopCount.setStatus('current')
if mibBuilder.loadTexts: agentIpv6EcmpNextHopCount.setDescription('The number of next hops in a route. From 0 to the maximum number of next hops in an ECMP route. The maximum varies by platform.')
agentIpv6EcmpRouteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 11, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIpv6EcmpRouteCount.setStatus('current')
if mibBuilder.loadTexts: agentIpv6EcmpRouteCount.setDescription('The number of IPv6 routes with agentIpv6EcmpNextHopCount next hops.')
agentIpv6NetworkPortGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 12))
agentIpv6NetworkPortNbrTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 12, 1), )
if mibBuilder.loadTexts: agentIpv6NetworkPortNbrTable.setStatus('current')
if mibBuilder.loadTexts: agentIpv6NetworkPortNbrTable.setDescription('IPv6 Network Port Neighbor Table. This table contains an entry for each valid IPv6 Neighbor configured on the Network Port.')
agentIpv6NetworkPortNbrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 12, 1, 1), ).setIndexNames((0, "DNOS-ROUTING6-MIB", "agentIpv6NetworkPortNbrAddr"))
if mibBuilder.loadTexts: agentIpv6NetworkPortNbrEntry.setStatus('current')
if mibBuilder.loadTexts: agentIpv6NetworkPortNbrEntry.setDescription('An IPv6 Network Port Neighbor entry.')
agentIpv6NetworkPortNbrAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 12, 1, 1, 1), Ipv6Address())
if mibBuilder.loadTexts: agentIpv6NetworkPortNbrAddr.setStatus('current')
if mibBuilder.loadTexts: agentIpv6NetworkPortNbrAddr.setDescription('The Ipv6 Address of a neighbor switch visible to the Network Port.')
agentIpv6NetworkPortNbrPhysAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 12, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIpv6NetworkPortNbrPhysAddr.setStatus('current')
if mibBuilder.loadTexts: agentIpv6NetworkPortNbrPhysAddr.setDescription('The MacAddress of the neighboring switch.')
agentIpv6NetworkPortNbrState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 12, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6))).clone(namedValues=NamedValues(("reachable", 1), ("stale", 2), ("delay", 3), ("probe", 4), ("unknown", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIpv6NetworkPortNbrState.setStatus('current')
if mibBuilder.loadTexts: agentIpv6NetworkPortNbrState.setDescription('The state of the neighboring switch: reachable(1) - The neighbor is reachable by this switch. stale(2) - Information about the neighbor is scheduled for deletion. delay(3) - No information has been received from neighbor during delay period. probe(4) - Switch is attempting to probe for this neighbor. unknown(6) - Unknown status.')
agentIpv6NetworkPortNbrUpdated = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 12, 1, 1, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIpv6NetworkPortNbrUpdated.setStatus('current')
if mibBuilder.loadTexts: agentIpv6NetworkPortNbrUpdated.setDescription('The last sysUpTime that this neighbor has been updated.')
agentIpv6NetworkPortNbrIsRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 12, 1, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIpv6NetworkPortNbrIsRouter.setStatus('current')
if mibBuilder.loadTexts: agentIpv6NetworkPortNbrIsRouter.setDescription('Returns true(1) if the neighbor machine is a router, false(2) otherwise.')
agentIpv6NetworkPortNbrType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 12, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("dynamic", 2), ("static", 3), ("local", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIpv6NetworkPortNbrType.setStatus('current')
if mibBuilder.loadTexts: agentIpv6NetworkPortNbrType.setDescription("The type of the mapping. The 'dynamic(2)' type indicates that the IPv6 address to physical addresses mapping has been dynamically resolved using the IPv6 Neighbor Discovery protocol. The static(3)' types indicates that the mapping has been statically configured. The local(4) indicates that the mapping is provided for an entity's own interface address.")
agentIpv6NetworkPortNbrCfgTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 12, 2), )
if mibBuilder.loadTexts: agentIpv6NetworkPortNbrCfgTable.setStatus('current')
if mibBuilder.loadTexts: agentIpv6NetworkPortNbrCfgTable.setDescription('The table contains an entry for each static IPv6 Neighbor on the Network Port.')
agentIpv6NetworkPortNbrCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 12, 2, 1), ).setIndexNames((0, "DNOS-ROUTING6-MIB", "agentIpv6NetworkPortNbrCfgAddr"))
if mibBuilder.loadTexts: agentIpv6NetworkPortNbrCfgEntry.setStatus('current')
if mibBuilder.loadTexts: agentIpv6NetworkPortNbrCfgEntry.setDescription('An entry of the static IPv6 Neighbor on the Network Port.')
agentIpv6NetworkPortNbrCfgAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 12, 2, 1, 1), Ipv6Address())
if mibBuilder.loadTexts: agentIpv6NetworkPortNbrCfgAddr.setStatus('current')
if mibBuilder.loadTexts: agentIpv6NetworkPortNbrCfgAddr.setDescription('The Ipv6 Address of a static neighbor on the Network Port.')
agentIpv6NetworkPortNbrCfgPhysAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 12, 2, 1, 2), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentIpv6NetworkPortNbrCfgPhysAddr.setStatus('current')
if mibBuilder.loadTexts: agentIpv6NetworkPortNbrCfgPhysAddr.setDescription('The MAC Address of a static neighbor on the Network Port.')
agentIpv6NetworkPortNbrCfgEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 12, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentIpv6NetworkPortNbrCfgEntryStatus.setStatus('current')
if mibBuilder.loadTexts: agentIpv6NetworkPortNbrCfgEntryStatus.setDescription('Create or delete the static neighbor entry on the Network Port. The configured static neighbor entry is always active.')
agentIpv6NbrCfgTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 13), )
if mibBuilder.loadTexts: agentIpv6NbrCfgTable.setStatus('current')
if mibBuilder.loadTexts: agentIpv6NbrCfgTable.setDescription('The table contains an entry for each static IPv6 Neighbor on the Network Port.')
agentIpv6NbrCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 13, 1), ).setIndexNames((0, "DNOS-ROUTING6-MIB", "agentIpv6IfIndex"), (0, "DNOS-ROUTING6-MIB", "agentIpv6NbrCfgAddr"))
if mibBuilder.loadTexts: agentIpv6NbrCfgEntry.setStatus('current')
if mibBuilder.loadTexts: agentIpv6NbrCfgEntry.setDescription('An entry of the static IPv6 Neighbor on the Network Port.')
agentIpv6IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 13, 1, 1), Ipv6IfIndex())
if mibBuilder.loadTexts: agentIpv6IfIndex.setStatus('current')
if mibBuilder.loadTexts: agentIpv6IfIndex.setDescription('A unique non-zero value identifying the particular IPv6 interface.')
agentIpv6NbrCfgAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 13, 1, 2), Ipv6Address())
if mibBuilder.loadTexts: agentIpv6NbrCfgAddr.setStatus('current')
if mibBuilder.loadTexts: agentIpv6NbrCfgAddr.setDescription('The Ipv6 Address of a static neighbor on the Routing or Host interface.')
agentIpv6NbrCfgPhysAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 13, 1, 3), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentIpv6NbrCfgPhysAddr.setStatus('current')
if mibBuilder.loadTexts: agentIpv6NbrCfgPhysAddr.setDescription('The MAC Address of a static neighbor on the Routing or Host interface.')
agentIpv6NbrCfgEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 13, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentIpv6NbrCfgEntryStatus.setStatus('current')
if mibBuilder.loadTexts: agentIpv6NbrCfgEntryStatus.setDescription('Create or delete the static neighbor entry on the Routing or Host interface. The configured static neighbor entry is always active.')
agentIpv6NeighborsDynamicRenew = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpv6NeighborsDynamicRenew.setStatus('current')
if mibBuilder.loadTexts: agentIpv6NeighborsDynamicRenew.setDescription('Enables/disables the periodic NUD (neighbor unreachability detection) to be run on the existing IPv6 neighbor entries based on the activity of the entries in the hardware. If the setting is disabled, only those entries that are actively used in the hardware are triggered for NUD. If the setting is enabled, all the entries are triggered for NUD irrespective of their usage in the hardware.')
agentIpv6UnresolvedDataRateLimit = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 1024)).clone(1024)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpv6UnresolvedDataRateLimit.setStatus('current')
if mibBuilder.loadTexts: agentIpv6UnresolvedDataRateLimit.setDescription('The rate in packets-per-second for the number of IPv6 data packets trapped to CPU when the packet fails to be forwarded in the hardware due to unresolved hardware address of the destined IPv6 node.')
agentIpv6NUDMaxUnicastSolicits = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 10)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpv6NUDMaxUnicastSolicits.setStatus('current')
if mibBuilder.loadTexts: agentIpv6NUDMaxUnicastSolicits.setDescription('The maximum number of unicast Neighbor Solicitations sent during neighbor resolution or during NUD (neighbor unreachabililty detection) before switching to multicast Neighbor Solicitations.')
agentIpv6NUDMaxMulticastSolicits = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 255)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpv6NUDMaxMulticastSolicits.setStatus('current')
if mibBuilder.loadTexts: agentIpv6NUDMaxMulticastSolicits.setDescription('The maximum number of multicast Neighbor Solicitations sent during neighbor resolution or during NUD (neighbor unreachabililty detection).')
agentIpv6NUDBackoffMultiple = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 30, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpv6NUDBackoffMultiple.setStatus('current')
if mibBuilder.loadTexts: agentIpv6NUDBackoffMultiple.setDescription('The exponential backoff multiple to be used in the calculation of the next timeout value for Neighbor Solicitation transmission during NUD (neighbor unreachabililty detection) following the exponential backoff algorithm. The next timeout value is limited to a maximum value of 60 seconds if the value with exponential backoff calculation is greater than 60 seconds.')
mibBuilder.exportSymbols("DNOS-ROUTING6-MIB", agentIpv6IcmpRateLimitBurstSize=agentIpv6IcmpRateLimitBurstSize, agentIpv6UniqueNextHopsHigh=agentIpv6UniqueNextHopsHigh, agentIpv6NetworkPortNbrEntry=agentIpv6NetworkPortNbrEntry, agentDhcp6ClientT2Time=agentDhcp6ClientT2Time, agentIpv6OspfExt2Routes=agentIpv6OspfExt2Routes, agentIpv6NUDBackoffMultiple=agentIpv6NUDBackoffMultiple, agentIpv6NbrCfgPhysAddr=agentIpv6NbrCfgPhysAddr, agentIpv6NetworkPortNbrIsRouter=agentIpv6NetworkPortNbrIsRouter, agentIpv6ServicePortNbrState=agentIpv6ServicePortNbrState, agentIpv6IbgpRoutes=agentIpv6IbgpRoutes, agentIpv6EcmpCountEntry=agentIpv6EcmpCountEntry, agentIpv6RouterAdvertisementEntry=agentIpv6RouterAdvertisementEntry, agentDhcp6ClientPrefix=agentDhcp6ClientPrefix, PYSNMP_MODULE_ID=fastPathRoutingIpv6, agentDhcp6ClientT1Time=agentDhcp6ClientT1Time, fastPathRoutingIpv6=fastPathRoutingIpv6, agentIpv6AlternateRoutes=agentIpv6AlternateRoutes, agentIpv6TruncEcmpRoutes=agentIpv6TruncEcmpRoutes, agentIpv6EbgpRoutes=agentIpv6EbgpRoutes, agentIpv6NetworkPortNbrCfgEntryStatus=agentIpv6NetworkPortNbrCfgEntryStatus, agentDhcp6ClientState=agentDhcp6ClientState, agentIpv6AddrAddress=agentIpv6AddrAddress, agentIpv6UnresolvedRouteAdds=agentIpv6UnresolvedRouteAdds, agentIpv6ReservedLocals=agentIpv6ReservedLocals, agentDhcp6ClientValidLifeTime=agentDhcp6ClientValidLifeTime, agentIpv6RouterAdvertisementHopLimitUnspecifiedMode=agentIpv6RouterAdvertisementHopLimitUnspecifiedMode, agentDhcp6ClientExpireTime=agentDhcp6ClientExpireTime, agentIpv6EcmpGroups=agentIpv6EcmpGroups, agentIpv6NextHopGroups=agentIpv6NextHopGroups, agentIpv6ServicePortNbrCfgEntryStatus=agentIpv6ServicePortNbrCfgEntryStatus, agentIpv6ServicePortPrefixEntry=agentIpv6ServicePortPrefixEntry, agentIpv6InterfaceIcmpRedirects=agentIpv6InterfaceIcmpRedirects, agentIpv6EcmpGroupsHigh=agentIpv6EcmpGroupsHigh, agentIpv6FailedRouteAdds=agentIpv6FailedRouteAdds, agentIpv6NetworkPortNbrCfgPhysAddr=agentIpv6NetworkPortNbrCfgPhysAddr, agentIpv6NbrCfgTable=agentIpv6NbrCfgTable, agentIpv6RejectRoutes=agentIpv6RejectRoutes, agentIpv6UnresolvedDataRateLimit=agentIpv6UnresolvedDataRateLimit, agentIpv6AddrPrefixOnLinkFlag=agentIpv6AddrPrefixOnLinkFlag, agentIpv6StaticRouteEntry=agentIpv6StaticRouteEntry, agentIpv6AddrPrefixLength=agentIpv6AddrPrefixLength, agentIpv6StaticRoutePfxLength=agentIpv6StaticRoutePfxLength, agentIpv6RouterAdvertisementSuppressMode=agentIpv6RouterAdvertisementSuppressMode, agentIpv6RouterAdvertisementMaxAdvertisementInterval=agentIpv6RouterAdvertisementMaxAdvertisementInterval, agentIpv6RouterAdvertisementIfIndex=agentIpv6RouterAdvertisementIfIndex, agentDhcp6ClientRenewTime=agentDhcp6ClientRenewTime, agentIpv6IcmpControlGroup=agentIpv6IcmpControlGroup, agentDhcp6ClientPreferredLifeTime=agentDhcp6ClientPreferredLifeTime, agentIpv6InterfaceAutoconfig=agentIpv6InterfaceAutoconfig, agentIpv6BgpRoutes=agentIpv6BgpRoutes, agentDhcp6ClientServerDUID=agentDhcp6ClientServerDUID, agentIpv6RouterAdvertisementTable=agentIpv6RouterAdvertisementTable, agentIpv6ServicePortPrefix=agentIpv6ServicePortPrefix, agentIpv6OspfExt1Routes=agentIpv6OspfExt1Routes, agentIpv6RouteAdds=agentIpv6RouteAdds, agentIpv6RouteDeletes=agentIpv6RouteDeletes, agentIpv6AddrPrefixAutonomousFlag=agentIpv6AddrPrefixAutonomousFlag, agentIpv6NbrCfgEntry=agentIpv6NbrCfgEntry, agentIpv6NeighborsDynamicRenew=agentIpv6NeighborsDynamicRenew, agentIpv6EcmpRetries=agentIpv6EcmpRetries, agentIpv6NetworkPortGroup=agentIpv6NetworkPortGroup, agentIpv6ServicePortPrefixIndex=agentIpv6ServicePortPrefixIndex, agentIpv6ServicePortNbrEntry=agentIpv6ServicePortNbrEntry, agentIpv6AddrPfxLength=agentIpv6AddrPfxLength, agentIpv6NetworkPortNbrCfgAddr=agentIpv6NetworkPortNbrCfgAddr, agentIpv6AddrPrefixAdvPreferredLifetime=agentIpv6AddrPrefixAdvPreferredLifetime, agentIpv6RouterAdvertisementReachableTime=agentIpv6RouterAdvertisementReachableTime, agentIpv6RouterAdvertisementManagedFlag=agentIpv6RouterAdvertisementManagedFlag, agentIpv6OspfIntraRoutes=agentIpv6OspfIntraRoutes, agentIpv6ConnectedRoutes=agentIpv6ConnectedRoutes, agentIpv6StaticRouteDest=agentIpv6StaticRouteDest, agentIpv6ServicePortPrefixLength=agentIpv6ServicePortPrefixLength, agentIpv6ServicePortDefaultRouterTable=agentIpv6ServicePortDefaultRouterTable, agentIpv6AddrTable=agentIpv6AddrTable, agentIpv6ServicePortPrefixTable=agentIpv6ServicePortPrefixTable, agentIpv6LocalBgpRoutes=agentIpv6LocalBgpRoutes, agentIpv6ServicePortNbrCfgEntry=agentIpv6ServicePortNbrCfgEntry, agentIpv6ServicePortNbrCfgAddr=agentIpv6ServicePortNbrCfgAddr, agentIpv6InterfaceIfIndex=agentIpv6InterfaceIfIndex, agentDhcp6ClientPrefixlength=agentDhcp6ClientPrefixlength, agentIpv6InterfaceEntry=agentIpv6InterfaceEntry, agentIpv6NUDMaxUnicastSolicits=agentIpv6NUDMaxUnicastSolicits, agentIpv6ServicePortDefaultRouterEntry=agentIpv6ServicePortDefaultRouterEntry, agentIpv6ServicePortNbrUpdated=agentIpv6ServicePortNbrUpdated, agentIpv6NetworkPortNbrTable=agentIpv6NetworkPortNbrTable, agentIpv6AddrPrefixEntry=agentIpv6AddrPrefixEntry, agentIpv6RouteModifies=agentIpv6RouteModifies, agentIpv6ServicePortNbrTable=agentIpv6ServicePortNbrTable, agentIpv6InterfaceTable=agentIpv6InterfaceTable, agentIpv6RouterAdvertisementOtherFlag=agentIpv6RouterAdvertisementOtherFlag, agentIpv6BestRoutesHigh=agentIpv6BestRoutesHigh, agentIpv6IfIndex=agentIpv6IfIndex, agentDhcp6ClientIAID=agentDhcp6ClientIAID, agentIpv6NetworkPortNbrType=agentIpv6NetworkPortNbrType, agentIpv6AddrStatus=agentIpv6AddrStatus, agentIpv6ServicePortDefaultRouterIndex=agentIpv6ServicePortDefaultRouterIndex, agentIpv6AddrPrefixTable=agentIpv6AddrPrefixTable, agentIpv6StaticRoutes=agentIpv6StaticRoutes, agentIpv6RoutingMode=agentIpv6RoutingMode, agentIpv6ServicePortNbrAddr=agentIpv6ServicePortNbrAddr, agentIpv6StaticRouteStatus=agentIpv6StaticRouteStatus, agentIpv6RouterAdvertisementNbrSolicitInterval=agentIpv6RouterAdvertisementNbrSolicitInterval, agentDhcp6ClientParametersEntry=agentDhcp6ClientParametersEntry, agentIpv6NbrCfgEntryStatus=agentIpv6NbrCfgEntryStatus, agentIpv6Group=agentIpv6Group, agentIpv6EcmpNextHopCount=agentIpv6EcmpNextHopCount, agentIpv6NetworkPortNbrState=agentIpv6NetworkPortNbrState, agentIpv6InterfaceMtuValue=agentIpv6InterfaceMtuValue, agentIpv6RoutingTableSummaryGroup=agentIpv6RoutingTableSummaryGroup, agentIpv6AddrEui64Flag=agentIpv6AddrEui64Flag, agentIpv6TotalRoutes=agentIpv6TotalRoutes, agentIpv6EcmpRouteCount=agentIpv6EcmpRouteCount, agentIpv6NetworkPortNbrAddr=agentIpv6NetworkPortNbrAddr, agentIpv6ServicePortNbrCfgPhysAddr=agentIpv6ServicePortNbrCfgPhysAddr, agentIpv6NbrCfgAddr=agentIpv6NbrCfgAddr, agentIpv6InvalidRouteAdds=agentIpv6InvalidRouteAdds, agentIpv6ServicePortNbrCfgTable=agentIpv6ServicePortNbrCfgTable, agentIpv6IcmpRateLimitInterval=agentIpv6IcmpRateLimitInterval, agentIpv6NextHopGroupsHigh=agentIpv6NextHopGroupsHigh, agentIpv6AddrPrefix=agentIpv6AddrPrefix, agentIpv6StaticRouteIfIndex=agentIpv6StaticRouteIfIndex, agentIpv6OspfRoutes=agentIpv6OspfRoutes, agentIpv6StaticRouteNextHop=agentIpv6StaticRouteNextHop, agentIpv6EcmpCountTable=agentIpv6EcmpCountTable, agentIpv6InterfaceDhcpClient=agentIpv6InterfaceDhcpClient, agentIpv6InterfaceDadTransmits=agentIpv6InterfaceDadTransmits, agentIpv6NetworkPortNbrCfgTable=agentIpv6NetworkPortNbrCfgTable, agentIpv6AddrPrefixAdvValidLifetime=agentIpv6AddrPrefixAdvValidLifetime, agentIpv6InterfaceLinkLocalOnly=agentIpv6InterfaceLinkLocalOnly, agentIpv6NetworkPortNbrPhysAddr=agentIpv6NetworkPortNbrPhysAddr, agentDhcp6ClientParametersTable=agentDhcp6ClientParametersTable, agentDhcp6ClientInterfaceIndex=agentDhcp6ClientInterfaceIndex, agentIpv6NetworkPortNbrUpdated=agentIpv6NetworkPortNbrUpdated, agentIpv6ServicePortNbrIsRouter=agentIpv6ServicePortNbrIsRouter, agentIpv6AddrEntry=agentIpv6AddrEntry, agentIpv6StaticRoutePreference=agentIpv6StaticRoutePreference, agentIpv6InterfaceIcmpUnreachables=agentIpv6InterfaceIcmpUnreachables, agentIpv6StaticRouteTable=agentIpv6StaticRouteTable, agentIpv6ServicePortNbrType=agentIpv6ServicePortNbrType, agentIpv6ServicePortNbrPhysAddr=agentIpv6ServicePortNbrPhysAddr, agentIpv6BestRoutes=agentIpv6BestRoutes, agentIpv6OspfInterRoutes=agentIpv6OspfInterRoutes, agentIpv6ServicePortDefaultRouter=agentIpv6ServicePortDefaultRouter, agentIpv6RouterAdvertisementAdvertisementLifetime=agentIpv6RouterAdvertisementAdvertisementLifetime, agentIpv6ServicePortGroup=agentIpv6ServicePortGroup, agentIpv6EcmpRoutes=agentIpv6EcmpRoutes, agentIpv6UniqueNextHops=agentIpv6UniqueNextHops, agentIpv6NetworkPortNbrCfgEntry=agentIpv6NetworkPortNbrCfgEntry, agentIpv66to4Routes=agentIpv66to4Routes, agentIpv6NUDMaxMulticastSolicits=agentIpv6NUDMaxMulticastSolicits)
