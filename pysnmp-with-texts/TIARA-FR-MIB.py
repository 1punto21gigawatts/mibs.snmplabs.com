#
# PySNMP MIB module TIARA-FR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TIARA-FR-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:16:22 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, Gauge32, Counter64, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, TimeTicks, NotificationType, ModuleIdentity, Integer32, ObjectIdentity, Unsigned32, MibIdentifier, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Gauge32", "Counter64", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "TimeTicks", "NotificationType", "ModuleIdentity", "Integer32", "ObjectIdentity", "Unsigned32", "MibIdentifier", "Counter32")
TruthValue, TextualConvention, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "RowStatus", "DisplayString")
bundleId, = mibBuilder.importSymbols("TIARA-BUNDLE-MIB", "bundleId")
tiaraMgmt, = mibBuilder.importSymbols("TIARA-NETWORKS-SMI", "tiaraMgmt")
tiaraFrMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 3174, 2, 16))
tiaraFrMib.setRevisions(('1999-04-23 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: tiaraFrMib.setRevisionsDescriptions(('Initial version of this MIB module.',))
if mibBuilder.loadTexts: tiaraFrMib.setLastUpdated('9907010000Z')
if mibBuilder.loadTexts: tiaraFrMib.setOrganization('Tiara Networks Inc.')
if mibBuilder.loadTexts: tiaraFrMib.setContactInfo('Tiara Networks Customer Support 525 Race Street, Suite 100, San Jose, CA 95126 USA Tel: +1 408-216-4700 Fax: +1 408-216-4701 E-mail: support@tiaranetworks.com')
if mibBuilder.loadTexts: tiaraFrMib.setDescription('This file contains Tiara Network Inc. specific MIB module for Frame Relay implementation.')
frTable = MibTable((1, 3, 6, 1, 4, 1, 3174, 2, 16, 1), )
if mibBuilder.loadTexts: frTable.setStatus('current')
if mibBuilder.loadTexts: frTable.setDescription('A list of a Frame Relay interface configuration parameters. The table contains parameters for both the uni and multi link frame-relay interface.')
frTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3174, 2, 16, 1, 1), ).setIndexNames((0, "TIARA-BUNDLE-MIB", "bundleId"))
if mibBuilder.loadTexts: frTableEntry.setStatus('current')
if mibBuilder.loadTexts: frTableEntry.setDescription('An entry in the frTable. The bundle Id forms the index into the table.')
frIfEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 16, 1, 1, 1), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frIfEnable.setStatus('current')
if mibBuilder.loadTexts: frIfEnable.setDescription('Enables or disables the frame-relay interface. By default frame- relay interface is enabled. Writing zero (0) disables frame-relay interface.')
frEnablePvcAll = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 16, 1, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frEnablePvcAll.setStatus('current')
if mibBuilder.loadTexts: frEnablePvcAll.setDescription('Enables all PVCs related to the interface. By default all PVCs related to an interface are disabled. Writing One (1) enables all PVCs at the same time for an interface indexed by bundleId.')
frFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 16, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(56, 4096)).clone(1600)).setUnits('bytes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: frFrameSize.setStatus('current')
if mibBuilder.loadTexts: frFrameSize.setDescription('Maximum Size of the frame that will be configured for this Frame Relay interface. The value for frame size ranges from 56 to 4096 bytes, with a default value of 1600 bytes.')
frIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 16, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dce", 1), ("dte", 2), ("nni", 3))).clone('dte')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frIfType.setStatus('current')
if mibBuilder.loadTexts: frIfType.setDescription('Indicates the interface type for the frame-relay interface.')
frLmiType = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 16, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("cisco", 2), ("ansi", 3), ("q933a", 4))).clone('ansi')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frLmiType.setStatus('current')
if mibBuilder.loadTexts: frLmiType.setDescription('Local management Interface type for the frame-relay interface. It can take any of the following three values: ansi - ANSI T1.617 (Annex D), cisco - Cisco LMI, q933a - ITU-T Q.933 (Annex A) To disable lmi operation, set the value to none(0).')
frLmiDceN392 = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 16, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(9)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frLmiDceN392.setStatus('current')
if mibBuilder.loadTexts: frLmiDceN392.setDescription('DCE/UNI error threshold value. Ranges from 1 to 10, with a default value of 9. To configure the value of this variable, LMI type should be configured.')
frLmiDceN393 = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 16, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frLmiDceN393.setStatus('current')
if mibBuilder.loadTexts: frLmiDceN393.setDescription('DCE/UNI monitored events count. Ranges from 1 to 10, with a default value of 10. To configure the value of this variable, LMI type should be configured.')
frLmiDteN392 = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 16, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(9)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frLmiDteN392.setStatus('current')
if mibBuilder.loadTexts: frLmiDteN392.setDescription('DTE/UNI error threshold. Ranges from 1 to 10, with a default value of 9. To configure the value of this variable, LMI type should be configured.')
frLmiDteN393 = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 16, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frLmiDteN393.setStatus('current')
if mibBuilder.loadTexts: frLmiDteN393.setDescription('DTE/UNI monitored events count. Ranges from 1 to 10, with a default value of 10. To configure the value of this variable, LMI type should be configured.')
frLmiDteN391 = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 16, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frLmiDteN391.setStatus('current')
if mibBuilder.loadTexts: frLmiDteN391.setDescription('DTE/UNI full status polling interval. Ranges from 1 to 255, with a default value of 6. To configure the value of this variable, LMI type should be configured.')
frLmiKeepalive = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 16, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 255)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frLmiKeepalive.setStatus('current')
if mibBuilder.loadTexts: frLmiKeepalive.setDescription('Local management interface keepalive polling interval time in seconds. The value for this ranges from 5 seconds to 255 seconds with a default value of 10 seconds. To configure the value of this variable, LMI type should be configured.')
mfrAckMsgTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 16, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrAckMsgTimer.setStatus('current')
if mibBuilder.loadTexts: mfrAckMsgTimer.setDescription('The time to wait for an ADD_LINK_ACK message before timing out.')
mfrAckMsgMaxRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 16, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrAckMsgMaxRetry.setStatus('current')
if mibBuilder.loadTexts: mfrAckMsgMaxRetry.setDescription('Maximum number of Retries for the Ack Msg. This variable can be set on a multilink bundle.')
mfrClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 16, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("classA", 1), ("classB", 2), ("classC", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrClass.setStatus('current')
if mibBuilder.loadTexts: mfrClass.setDescription('classA -- bundle is UP when 1 link is UP classB -- bundle is UP when all links are UP classC -- bundle is UP when user-specific # of links are UP. In the case of classC, mfrClassThreshold should be configured with mfrClass in an atomic set operation. This variable can be set on a multilink bundle but not on a uni link bundle.')
mfrClassThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 16, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 28))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrClassThreshold.setStatus('current')
if mibBuilder.loadTexts: mfrClassThreshold.setDescription('Threshold - minimum number of links required to activate bundle, for a mfrClass, classC. This variable can be set on a multilink bundle but not on a uni link bundle.')
mfrFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 16, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(56, 4096))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrFrameSize.setStatus('current')
if mibBuilder.loadTexts: mfrFrameSize.setDescription('The frame size for multi-link frame relay. This variable can be set on a multilink bundle but not on a uni link bundle.')
mfrHelloTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 16, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 180))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrHelloTimer.setStatus('current')
if mibBuilder.loadTexts: mfrHelloTimer.setDescription('Hello timer in seconds. This variable can be set on a multilink bundle but not on a uni link bundle.')
mfrSegThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 16, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(56, 4096))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrSegThreshold.setStatus('current')
if mibBuilder.loadTexts: mfrSegThreshold.setDescription('Segment threshold packet size in bytes. This variable can be set on a multilink bundle but not on a uni link bundle.')
mfrDiffDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 16, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrDiffDelay.setStatus('current')
if mibBuilder.loadTexts: mfrDiffDelay.setDescription('Differential delay in milli seconds. This variable can be set on a multilink bundle but not on a uni link bundle.')
frPvcTable = MibTable((1, 3, 6, 1, 4, 1, 3174, 2, 16, 2), )
if mibBuilder.loadTexts: frPvcTable.setStatus('current')
if mibBuilder.loadTexts: frPvcTable.setDescription('A list of Frame Relay PVC parameters.')
frPvcTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3174, 2, 16, 2, 1), ).setIndexNames((0, "TIARA-BUNDLE-MIB", "bundleId"), (0, "TIARA-FR-MIB", "frPvcDlci"))
if mibBuilder.loadTexts: frPvcTableEntry.setStatus('current')
if mibBuilder.loadTexts: frPvcTableEntry.setDescription('An entry in the frPvcTable')
frPvcDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 16, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 991)))
if mibBuilder.loadTexts: frPvcDlci.setStatus('current')
if mibBuilder.loadTexts: frPvcDlci.setDescription('Data Link Connection Identifier of the PVC. The value ranges from 16 to 991. The Dlci is unique for a bundle but Dlci numbers can be reused across bundles.')
frPvcEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 16, 2, 1, 2), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: frPvcEnable.setStatus('current')
if mibBuilder.loadTexts: frPvcEnable.setDescription('Enables PVC for given interface name and DLCI number. By default PVC is disabled. Writing one(1) on this enables PVC.')
frPvcDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 16, 2, 1, 3), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: frPvcDescr.setStatus('current')
if mibBuilder.loadTexts: frPvcDescr.setDescription('Description for the configured PVC.')
frPvcIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 16, 2, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: frPvcIpAddr.setStatus('current')
if mibBuilder.loadTexts: frPvcIpAddr.setDescription('IP address to be configured for the PVC. PVC IP subnet Mask variable should also be configured alongwith this variable. A set on this variable will be successful only if the subnetmask is also set in the same request. To unconfigure the Ip address, a set is issued with the value of the ip address as 0.0.0.0')
frPvcIpSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 16, 2, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: frPvcIpSubnetMask.setStatus('current')
if mibBuilder.loadTexts: frPvcIpSubnetMask.setDescription('Subnet mask to be configured alongwith PVC IP address. This variable should be configured alongwith PVC IP address.')
frPvcSrcForwardingPrimary = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 16, 2, 1, 6), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: frPvcSrcForwardingPrimary.setStatus('current')
if mibBuilder.loadTexts: frPvcSrcForwardingPrimary.setDescription('Source forwarding IP address to be configured for PVC. To unconfigure the source forwarding address, a set is issued with the value of the address as 0.0.0.0. This is the primary source forwarding address')
frPvcSrcForwardingSecondary = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 16, 2, 1, 7), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: frPvcSrcForwardingSecondary.setStatus('current')
if mibBuilder.loadTexts: frPvcSrcForwardingSecondary.setDescription('Optional secondary source forwarding address configured for PVC, using alternate ethernet as backup. This variable should be configured along with the PVC primary source forwarding address. To unconfigure the secondary forwarding address, a set is issued with the value of the primary source forwarding address as 0.0.0.0, or a primary source forwarding address is set only, or both primary and secondary are set to 0.0.0.0')
frPvcRemoteIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 16, 2, 1, 8), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: frPvcRemoteIpAddr.setStatus('current')
if mibBuilder.loadTexts: frPvcRemoteIpAddr.setDescription('Remote IP address to be mapped for PVC')
frPvcPolicingEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 16, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("none", 0), ("standard", 2))).clone('standard')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: frPvcPolicingEnable.setStatus('current')
if mibBuilder.loadTexts: frPvcPolicingEnable.setDescription('This variable is to disable/enable policing for PVC. Writing zero (0) on this disables policing for the PVC. By default policing is enabled.')
frPvcPolicingDe = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 16, 2, 1, 10), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: frPvcPolicingDe.setStatus('current')
if mibBuilder.loadTexts: frPvcPolicingDe.setDescription('If enabled, received frames that exceed policing threshold, will be tagged with DE bit. This variable can be configured only if policing is enabled.')
frPvcPolicingCir = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 16, 2, 1, 11), Integer32()).setUnits('bps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: frPvcPolicingCir.setStatus('current')
if mibBuilder.loadTexts: frPvcPolicingCir.setDescription('Committed Information Rate( bits per second ) in receive direction for PVC. This variable can be configured only if policing is enabled.')
frPvcPolicingBc = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 16, 2, 1, 12), Integer32()).setUnits('bps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: frPvcPolicingBc.setStatus('current')
if mibBuilder.loadTexts: frPvcPolicingBc.setDescription('Committed Burst ( bits ) in receive direction for PVC. This variable can be configured only if policing is enabled.')
frPvcPolicingBe = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 16, 2, 1, 13), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: frPvcPolicingBe.setStatus('current')
if mibBuilder.loadTexts: frPvcPolicingBe.setDescription('Excess burst ( bits ) in receive direction for PVC. This variable can be configured only if policing enabled.')
frPvcShapingCir = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 16, 2, 1, 14), Integer32()).setUnits('bps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: frPvcShapingCir.setStatus('current')
if mibBuilder.loadTexts: frPvcShapingCir.setDescription('The committed information rate (in bits per second) to be configured for the PVC.')
frPvcShapingBcMax = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 16, 2, 1, 15), Integer32()).setUnits('bps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: frPvcShapingBcMax.setStatus('current')
if mibBuilder.loadTexts: frPvcShapingBcMax.setDescription('The maximum committed burst (bits) to be configured for the PVC.')
frPvcShapingBcMin = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 16, 2, 1, 16), Integer32()).setUnits('bps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: frPvcShapingBcMin.setStatus('current')
if mibBuilder.loadTexts: frPvcShapingBcMin.setDescription('The minimum committed burst (bits) to be configured for the PVC.')
frPvcShapingBe = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 16, 2, 1, 17), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: frPvcShapingBe.setStatus('current')
if mibBuilder.loadTexts: frPvcShapingBe.setDescription('The excess burst (bits) to be configured for the PVC.')
frPvcDlciForSwitching = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 16, 2, 1, 18), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: frPvcDlciForSwitching.setStatus('current')
if mibBuilder.loadTexts: frPvcDlciForSwitching.setDescription('Data Link Connection Identifier of the PVC. The value for this variable ranges from 16 to 991. frPvcBundleNameForSwitching should be set with frPvcDlciForSwitching as an atomic set.')
frPvcBundleNameForSwitching = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 16, 2, 1, 19), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: frPvcBundleNameForSwitching.setStatus('current')
if mibBuilder.loadTexts: frPvcBundleNameForSwitching.setDescription('The name of the bundle configured for Switching.')
frPvcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 16, 2, 1, 20), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: frPvcRowStatus.setStatus('current')
if mibBuilder.loadTexts: frPvcRowStatus.setDescription('To create a row set row status to a value CreateAndGo(4), indexed by bundle Id and the desired dlci number.')
frStatsTable = MibTable((1, 3, 6, 1, 4, 1, 3174, 2, 16, 3), )
if mibBuilder.loadTexts: frStatsTable.setStatus('current')
if mibBuilder.loadTexts: frStatsTable.setDescription('The statistics objects for a frame-relay interface.')
frStatsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3174, 2, 16, 3, 1), ).setIndexNames((0, "TIARA-BUNDLE-MIB", "bundleId"))
if mibBuilder.loadTexts: frStatsTableEntry.setStatus('current')
if mibBuilder.loadTexts: frStatsTableEntry.setDescription('An entry in the frStatsTable.')
frStatsFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 16, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frStatsFramesRx.setStatus('current')
if mibBuilder.loadTexts: frStatsFramesRx.setDescription('Numbers of frames received.')
frStatsInvFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 16, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frStatsInvFramesRx.setStatus('current')
if mibBuilder.loadTexts: frStatsInvFramesRx.setDescription('Number of invalid frames received')
frStatsFECNsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 16, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frStatsFECNsRx.setStatus('current')
if mibBuilder.loadTexts: frStatsFECNsRx.setDescription('Number of frames received with FECN bit on')
frStatsBECNsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 16, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frStatsBECNsRx.setStatus('current')
if mibBuilder.loadTexts: frStatsBECNsRx.setDescription('Number of frames received with BECN bit on.')
frStatsShortFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 16, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frStatsShortFramesRx.setStatus('current')
if mibBuilder.loadTexts: frStatsShortFramesRx.setDescription('Number of short frames received.')
frStatsLongFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 16, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frStatsLongFramesRx.setStatus('current')
if mibBuilder.loadTexts: frStatsLongFramesRx.setDescription('Number of long frames received.')
frStatsInvDLCIsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 16, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frStatsInvDLCIsRx.setStatus('current')
if mibBuilder.loadTexts: frStatsInvDLCIsRx.setDescription('Number of frames with invalid dlci received')
frStatsUnknownDLCIsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 16, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frStatsUnknownDLCIsRx.setStatus('current')
if mibBuilder.loadTexts: frStatsUnknownDLCIsRx.setDescription('Number of frames with unknown dlci received')
frStatsFramesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 16, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frStatsFramesTx.setStatus('current')
if mibBuilder.loadTexts: frStatsFramesTx.setDescription('Number of frames transmitted.')
frPvcStatsTable = MibTable((1, 3, 6, 1, 4, 1, 3174, 2, 16, 4), )
if mibBuilder.loadTexts: frPvcStatsTable.setStatus('current')
if mibBuilder.loadTexts: frPvcStatsTable.setDescription('FR PVC Statistics Table')
frPvcStatsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3174, 2, 16, 4, 1), ).setIndexNames((0, "TIARA-BUNDLE-MIB", "bundleId"), (0, "TIARA-FR-MIB", "frPvcDlci"))
if mibBuilder.loadTexts: frPvcStatsTableEntry.setStatus('current')
if mibBuilder.loadTexts: frPvcStatsTableEntry.setDescription('An entry in the FrPvcStats Table')
frPvcStatsBytesRxLastBootOrClear = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 16, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frPvcStatsBytesRxLastBootOrClear.setStatus('current')
if mibBuilder.loadTexts: frPvcStatsBytesRxLastBootOrClear.setDescription('Number of bytes received on a pvc since boot or last statistics clear.')
frPvcStatsBytesTxLastBootOrClear = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 16, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frPvcStatsBytesTxLastBootOrClear.setStatus('current')
if mibBuilder.loadTexts: frPvcStatsBytesTxLastBootOrClear.setDescription('Number of bytes transmitted on a pvc since boot or last statistics clear.')
frPvcStatsPktsRxLastBootOrClear = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 16, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frPvcStatsPktsRxLastBootOrClear.setStatus('current')
if mibBuilder.loadTexts: frPvcStatsPktsRxLastBootOrClear.setDescription('Number of packets received since boot or last statistics clear.')
frPvcStatsPktsTxLastBootOrClear = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 16, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frPvcStatsPktsTxLastBootOrClear.setStatus('current')
if mibBuilder.loadTexts: frPvcStatsPktsTxLastBootOrClear.setDescription('Number of packets transmitted since boot or last statistics clear.')
frPvcStatsErrPktsRxLastBootOrClear = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 16, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frPvcStatsErrPktsRxLastBootOrClear.setStatus('current')
if mibBuilder.loadTexts: frPvcStatsErrPktsRxLastBootOrClear.setDescription('Number of errored packets received since boot or last statistics clear.')
frPvcStatsUpDownStatesLastBootOrClear = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 16, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frPvcStatsUpDownStatesLastBootOrClear.setStatus('current')
if mibBuilder.loadTexts: frPvcStatsUpDownStatesLastBootOrClear.setDescription('Number of times state(up or down) of the pvc changed in since boot or last statistics clear.')
frPvcStatsBytesRxLastFiveMins = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 16, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frPvcStatsBytesRxLastFiveMins.setStatus('current')
if mibBuilder.loadTexts: frPvcStatsBytesRxLastFiveMins.setDescription('Number of bytes received in the last five minutes.')
frPvcStatsBytesTxLastFiveMins = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 16, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frPvcStatsBytesTxLastFiveMins.setStatus('current')
if mibBuilder.loadTexts: frPvcStatsBytesTxLastFiveMins.setDescription('Number of bytes transmitted in the last five minutes.')
frPvcStatsPktsRxLastFiveMins = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 16, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frPvcStatsPktsRxLastFiveMins.setStatus('current')
if mibBuilder.loadTexts: frPvcStatsPktsRxLastFiveMins.setDescription('Number of packets received in the last five minutes.')
frPvcStatsPktsTxLastFiveMins = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 16, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frPvcStatsPktsTxLastFiveMins.setStatus('current')
if mibBuilder.loadTexts: frPvcStatsPktsTxLastFiveMins.setDescription('Number of packets transmitted in the last five minutes.')
frPvcStatsErrPktsRxLastFiveMins = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 16, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frPvcStatsErrPktsRxLastFiveMins.setStatus('current')
if mibBuilder.loadTexts: frPvcStatsErrPktsRxLastFiveMins.setDescription('Number of errored packets received in the last five minutes.')
frPvcStatsUpDownStatesLastFiveMins = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 16, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frPvcStatsUpDownStatesLastFiveMins.setStatus('current')
if mibBuilder.loadTexts: frPvcStatsUpDownStatesLastFiveMins.setDescription('Number of times state(up or down) of the pvc changed in the last five minutes.')
mibBuilder.exportSymbols("TIARA-FR-MIB", frIfEnable=frIfEnable, frFrameSize=frFrameSize, frPvcSrcForwardingSecondary=frPvcSrcForwardingSecondary, frLmiType=frLmiType, frPvcIpAddr=frPvcIpAddr, frPvcStatsUpDownStatesLastBootOrClear=frPvcStatsUpDownStatesLastBootOrClear, frStatsFECNsRx=frStatsFECNsRx, frTable=frTable, mfrAckMsgMaxRetry=mfrAckMsgMaxRetry, frLmiKeepalive=frLmiKeepalive, mfrSegThreshold=mfrSegThreshold, frEnablePvcAll=frEnablePvcAll, mfrHelloTimer=mfrHelloTimer, PYSNMP_MODULE_ID=tiaraFrMib, frPvcDlciForSwitching=frPvcDlciForSwitching, frStatsTable=frStatsTable, frPvcStatsPktsRxLastFiveMins=frPvcStatsPktsRxLastFiveMins, frPvcShapingBcMax=frPvcShapingBcMax, frStatsUnknownDLCIsRx=frStatsUnknownDLCIsRx, frPvcStatsBytesTxLastBootOrClear=frPvcStatsBytesTxLastBootOrClear, frPvcStatsPktsTxLastBootOrClear=frPvcStatsPktsTxLastBootOrClear, frLmiDteN391=frLmiDteN391, frLmiDceN393=frLmiDceN393, mfrClass=mfrClass, frPvcShapingBcMin=frPvcShapingBcMin, frStatsFramesTx=frStatsFramesTx, frPvcRemoteIpAddr=frPvcRemoteIpAddr, frPvcStatsUpDownStatesLastFiveMins=frPvcStatsUpDownStatesLastFiveMins, frPvcRowStatus=frPvcRowStatus, frPvcPolicingDe=frPvcPolicingDe, frPvcEnable=frPvcEnable, frPvcStatsErrPktsRxLastBootOrClear=frPvcStatsErrPktsRxLastBootOrClear, frPvcSrcForwardingPrimary=frPvcSrcForwardingPrimary, frPvcDlci=frPvcDlci, frPvcDescr=frPvcDescr, frStatsInvDLCIsRx=frStatsInvDLCIsRx, frPvcIpSubnetMask=frPvcIpSubnetMask, frPvcPolicingBc=frPvcPolicingBc, frIfType=frIfType, frPvcStatsTable=frPvcStatsTable, frPvcStatsBytesTxLastFiveMins=frPvcStatsBytesTxLastFiveMins, mfrDiffDelay=mfrDiffDelay, frStatsFramesRx=frStatsFramesRx, frPvcStatsErrPktsRxLastFiveMins=frPvcStatsErrPktsRxLastFiveMins, mfrClassThreshold=mfrClassThreshold, frPvcBundleNameForSwitching=frPvcBundleNameForSwitching, frLmiDceN392=frLmiDceN392, mfrAckMsgTimer=mfrAckMsgTimer, frStatsBECNsRx=frStatsBECNsRx, frPvcPolicingCir=frPvcPolicingCir, frTableEntry=frTableEntry, frStatsLongFramesRx=frStatsLongFramesRx, frPvcTableEntry=frPvcTableEntry, frStatsShortFramesRx=frStatsShortFramesRx, frPvcShapingBe=frPvcShapingBe, frPvcStatsBytesRxLastFiveMins=frPvcStatsBytesRxLastFiveMins, mfrFrameSize=mfrFrameSize, frPvcStatsBytesRxLastBootOrClear=frPvcStatsBytesRxLastBootOrClear, frPvcPolicingEnable=frPvcPolicingEnable, frPvcPolicingBe=frPvcPolicingBe, frPvcStatsPktsTxLastFiveMins=frPvcStatsPktsTxLastFiveMins, frPvcTable=frPvcTable, tiaraFrMib=tiaraFrMib, frPvcStatsPktsRxLastBootOrClear=frPvcStatsPktsRxLastBootOrClear, frLmiDteN392=frLmiDteN392, frStatsTableEntry=frStatsTableEntry, frPvcShapingCir=frPvcShapingCir, frPvcStatsTableEntry=frPvcStatsTableEntry, frLmiDteN393=frLmiDteN393, frStatsInvFramesRx=frStatsInvFramesRx)
