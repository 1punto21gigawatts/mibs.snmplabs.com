#
# PySNMP MIB module XEDIA-IGMP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/XEDIA-IGMP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:42:50 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint")
InterfaceIndexOrZero, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero", "InterfaceIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
iso, IpAddress, Unsigned32, Bits, NotificationType, TimeTicks, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Integer32, MibIdentifier, ObjectIdentity, Gauge32, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "IpAddress", "Unsigned32", "Bits", "NotificationType", "TimeTicks", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Integer32", "MibIdentifier", "ObjectIdentity", "Gauge32", "ModuleIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
xediaMibs, = mibBuilder.importSymbols("XEDIA-REG", "xediaMibs")
xigmpMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 838, 3, 33))
if mibBuilder.loadTexts: xigmpMIB.setLastUpdated('9904151600Z')
if mibBuilder.loadTexts: xigmpMIB.setOrganization('Xedia Corp.')
if mibBuilder.loadTexts: xigmpMIB.setContactInfo('support@xedia.com')
if mibBuilder.loadTexts: xigmpMIB.setDescription('The Xedia extention MIB module for management of IGMP routers.')
xigmpMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 838, 3, 33, 1))
xigmp = MibIdentifier((1, 3, 6, 1, 4, 1, 838, 3, 33, 1, 1))
xigmpInMsgs = MibScalar((1, 3, 6, 1, 4, 1, 838, 3, 33, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xigmpInMsgs.setStatus('current')
if mibBuilder.loadTexts: xigmpInMsgs.setDescription('Total number of IGMP messages received')
xigmpInErrors = MibScalar((1, 3, 6, 1, 4, 1, 838, 3, 33, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xigmpInErrors.setStatus('current')
if mibBuilder.loadTexts: xigmpInErrors.setDescription('Total number of malformed IGMP messages received')
xigmpInReports = MibScalar((1, 3, 6, 1, 4, 1, 838, 3, 33, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xigmpInReports.setStatus('current')
if mibBuilder.loadTexts: xigmpInReports.setDescription('Total number of IGMP Report messages received')
xigmpInV1Reports = MibScalar((1, 3, 6, 1, 4, 1, 838, 3, 33, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xigmpInV1Reports.setStatus('current')
if mibBuilder.loadTexts: xigmpInV1Reports.setDescription('Total number of IGMP V1 Report messages received')
xigmpInLeaves = MibScalar((1, 3, 6, 1, 4, 1, 838, 3, 33, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xigmpInLeaves.setStatus('current')
if mibBuilder.loadTexts: xigmpInLeaves.setDescription('Total number of IGMP Leave messages received')
xigmpInQueries = MibScalar((1, 3, 6, 1, 4, 1, 838, 3, 33, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xigmpInQueries.setStatus('current')
if mibBuilder.loadTexts: xigmpInQueries.setDescription('Total number of IGMP Query messages received')
xigmpInUnknowns = MibScalar((1, 3, 6, 1, 4, 1, 838, 3, 33, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xigmpInUnknowns.setStatus('current')
if mibBuilder.loadTexts: xigmpInUnknowns.setDescription('Total number of IGMP messages of unknown types received')
xigmpOutMsgs = MibScalar((1, 3, 6, 1, 4, 1, 838, 3, 33, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xigmpOutMsgs.setStatus('current')
if mibBuilder.loadTexts: xigmpOutMsgs.setDescription('Total number of IGMP messages transmitted by IGMP protocol')
xigmpInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 838, 3, 33, 1, 1, 9), )
if mibBuilder.loadTexts: xigmpInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: xigmpInterfaceTable.setDescription('The (conceptual) table listing the interfaces on which IGMP is enabled.')
xigmpInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 838, 3, 33, 1, 1, 9, 1), ).setIndexNames((0, "XEDIA-IGMP-MIB", "xigmpInterfaceIfIndex"))
if mibBuilder.loadTexts: xigmpInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: xigmpInterfaceEntry.setDescription('An entry (conceptual row) representing an interface on which IGMP is enabled.')
xigmpInterfaceIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 33, 1, 1, 9, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: xigmpInterfaceIfIndex.setStatus('current')
if mibBuilder.loadTexts: xigmpInterfaceIfIndex.setDescription('The ifIndex value of the interface for which IGMP is enabled.')
xigmpInterfaceState = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 33, 1, 1, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xigmpInterfaceState.setStatus('current')
if mibBuilder.loadTexts: xigmpInterfaceState.setDescription('The state of the IGMP interface')
mibBuilder.exportSymbols("XEDIA-IGMP-MIB", xigmpInterfaceState=xigmpInterfaceState, xigmpInMsgs=xigmpInMsgs, xigmpMIB=xigmpMIB, xigmpMIBObjects=xigmpMIBObjects, xigmpInQueries=xigmpInQueries, xigmpInterfaceTable=xigmpInterfaceTable, xigmpInV1Reports=xigmpInV1Reports, xigmpInUnknowns=xigmpInUnknowns, xigmpOutMsgs=xigmpOutMsgs, xigmpInterfaceIfIndex=xigmpInterfaceIfIndex, xigmpInLeaves=xigmpInLeaves, xigmpInterfaceEntry=xigmpInterfaceEntry, xigmp=xigmp, PYSNMP_MODULE_ID=xigmpMIB, xigmpInReports=xigmpInReports, xigmpInErrors=xigmpInErrors)
