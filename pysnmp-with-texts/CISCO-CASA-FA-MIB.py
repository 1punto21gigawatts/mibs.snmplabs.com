#
# PySNMP MIB module CISCO-CASA-FA-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-CASA-FA-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:52:31 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
CiscoIpProtocol, CiscoPort = mibBuilder.importSymbols("CISCO-TC", "CiscoIpProtocol", "CiscoPort")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Gauge32, Counter64, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Counter32, ModuleIdentity, Unsigned32, MibIdentifier, IpAddress, iso, Integer32, NotificationType, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Counter64", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Counter32", "ModuleIdentity", "Unsigned32", "MibIdentifier", "IpAddress", "iso", "Integer32", "NotificationType", "Bits")
DisplayString, TextualConvention, TimeStamp, TruthValue, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "TimeStamp", "TruthValue", "DateAndTime")
ciscoCasaFaMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 115))
ciscoCasaFaMIB.setRevisions(('2002-09-18 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoCasaFaMIB.setRevisionsDescriptions(('Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoCasaFaMIB.setLastUpdated('200209180000Z')
if mibBuilder.loadTexts: ciscoCasaFaMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoCasaFaMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-casa@cisco.com')
if mibBuilder.loadTexts: ciscoCasaFaMIB.setDescription('This MIB module in conjunction with the CISCO-CASA-MIB, defines the SNMP management information base for managing the Cisco Appliance Services Architecture (CASA) Forwarding Agent. The following is a set of definitions used in the rest of the MIB. CASA is a protocol allowing software entities (called Appliances, examples are web caches, firewalls, load balancers) to control the behavior of network hardware devices (called Forwarding Agents, examples are switches or routers) by providing a set of rules used to handle network traffic. A Network Appliance (referred to as an Appliance) is any subsystem whose purpose is to provide a specific additional value-added service to the network device, and could be implemented as a standalone box, a line card or processor card, or a software subsystem. Examples of Network Appliances would include Load Balancers, WebCaches, and Firewalls. An Appliance tells Fowarding Agents how to handle packets based on their source and destination IP addresses and ports, and IP protocol fields. This set of information is called an Affinity. A Service Manager is an Appliance that requests packet flows from Forwarding Agents through CASA. A Real Server is a physical computing engine or part of that physical computing engine that offers one or more application services to a set of clients in the network. A packet flow is a TCP connection or a sequence of UDP packets between a client and a specific Real Server, pertaining to a specific application. Flows are represented by entries in the affinity cache tables. The Service Manager requests packet flows from Forwarding Agents by sending Affinities which contains wildcards on some of the Affinity fields. Affinities that contain wildcards in some of the fields are called Wildcard Affinities. The Service Manager may send the Forwarding Agent an Affinity containing explicit values for each of the fields. These Affinities are called Fixed Affinities. Typically Wildcard Affinities are used to instruct the Forwarding Agent to send packets received by the Forwarding Agent, which match the Wildcard Affinity, to the Service Manager. When the Service Manager receives the matching packet, the Service Manager typically will send the Forwarding Agent a Fixed Affinity. The Forwarding Agent uses Fixed Affinities to match packets coming from the network, execute any processing required on that packet, and forward that packet to a destination IP address (designated in the Fixed Affinity) called the Dispatch Address. When an IP packet arrives at the Forwarding Agent, the Forwarding Agent attempts to match the packet with the Fixed Affinities in the Fixed Affinity cache. If there is no match, an attempt is made to match the packet with the list of Wildcard Affinities. If there is no match the packet is routed normally. If there is a match with a Wildcard Affinity, the Forwarding Agent sends the packet to the Service Manager who will send the Forwarding Manager a Fixed Affinity which provides information on how to process IP packets similar to the one received by the Forwarding Agent. Processing of such packets may include sending the packet to the Service Manager. Such packets are called Interest Packets. Alternatively a Tickle Packet may be sent to the Service Manager which is an indication that a matched packet has been received by the Forwarding Agent. Reference: [1] Cisco Appliance Services Architecture (CASA) document. [2] CISCO-CASA-MIB. Diagram showing Forwarding Agents, Service Manager, Real Server and clients. ______ ______ ______ (Real ) (Real ) (Real ) (Server) (Server) (Server) (______) (______) (______) | | | +---------------+ | | | |Service Manager|-+----------+--------------+ | +---------------+ | | | | | ++---------+ ++---------+ ++---------+ | F. Agent | | F. Agent | | F. Agent | +----------+ +----------+ +----------+ | | | ___|_________________|______________|__ ( ) ( N E T W O R K ) (_______________________________________)')
ciscoCasaFaMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 115, 1))
ccfaGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 115, 1, 1))
ccfaStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 115, 1, 2))
ccfaWildcardAff = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 115, 1, 3))
ccfaDispatchStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 115, 1, 4))
class CasaWildcardAffIndex(TextualConvention, OctetString):
    description = 'This is unique identifier for a Wildcard Affinity.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(32, 32)
    fixedLength = 32

class CasaInterestPacketSpecification(TextualConvention, OctetString):
    description = 'This enumerates the possible combinations of criteria for which a packet is considered interesting. A packet matching the specified combination of the following criteria is sent to the device specified by ccfaWildcardAffInterestAddr and ccfaWildcardAffInterestPort. The criteria enumeration follows: intFin - A packet which has the FIN bit set in the control bits of the TCP header [1]. intSyn - A packet which has the SYN bit set in the control bits of the TCP header [1]. intRst - A packet which has the RST bit set in the control bits of the TCP header [1]. intPsh - A packet which has the PSH bit set in the control bits of the TCP header [1]. intAck - A packet which has the ACK bit set in the control bits of the TCP header [1]. intUrg - A packet which has the URG bit set in the control bits of the TCP header [1]. intData - For a TCP/IP flow, this is a packet which contains payload data, i.e. a packet which is not associated with TCP connection establishment, termination or some other session control packet. For a UDP flow, this corresponds to all packets. intFirstData - For a TCP/IP flow, this corresponds to the first non control packet. For a UDP flow, this corresponds to the first packet on the flow. intFrag - Fragmented packets which match IP src and dest IP address of the Fixed Affinity. intAllPackets - All packets. These are encoded in an octet string in the order listed above, such that intFin is the least significant byte of the octet string. Reference: [1] Transmission Control Protocol. J. Postel. RFC793'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(16, 16)
    fixedLength = 16

ccfaWildcardAffTotalBytes = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 115, 1, 3, 1), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccfaWildcardAffTotalBytes.setStatus('current')
if mibBuilder.loadTexts: ccfaWildcardAffTotalBytes.setDescription('Number of bytes of data for all the packets which matched any Wildcard Affinity.')
ccfaWildcardAffHCTotalBytes = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 115, 1, 3, 2), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccfaWildcardAffHCTotalBytes.setStatus('current')
if mibBuilder.loadTexts: ccfaWildcardAffHCTotalBytes.setDescription('Number of bytes of data for all the packets which matched any Wildcard Affinity. This object is a 64-bit version of ccfaWildcardAffTotalBytes.')
ccfaWildcardAffTotalPackets = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 115, 1, 3, 3), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccfaWildcardAffTotalPackets.setStatus('current')
if mibBuilder.loadTexts: ccfaWildcardAffTotalPackets.setDescription('Number of packets that matched any Wildcard Affinity.')
ccfaWildcardAffNumOf = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 115, 1, 3, 4), Gauge32()).setUnits('affinities').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccfaWildcardAffNumOf.setStatus('current')
if mibBuilder.loadTexts: ccfaWildcardAffNumOf.setDescription('This is the number of Wildcard Affinities for which this Forwarding Agent is actively using for handling TCP and UDP packets. This is the number of entries in ccfaWildcardAffTable.')
ccfaWildcardAffNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 115, 1, 3, 5), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccfaWildcardAffNotifEnabled.setStatus('current')
if mibBuilder.loadTexts: ccfaWildcardAffNotifEnabled.setDescription('true indicates that ciscoCasaFaWildcardAffCreated and ciscoCasaFaWildcardAffDeleted notification generation is enabled. false indicates that ciscoCasaFaWildcardAffCreated and ciscoCasaFaWildcardAffDeleted notification generation is disabled.')
ccfaWildcardAffHiWtrMark = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 115, 1, 3, 7), Unsigned32()).setUnits('affinities').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccfaWildcardAffHiWtrMark.setStatus('current')
if mibBuilder.loadTexts: ccfaWildcardAffHiWtrMark.setDescription('This is the maximum number of Wildcard Affinities (high water mark) concurrently held in the Wildcard Affinity cache since last time cCasaState transitioned to cCasaEnabled or since this object was reset. Resetting this object is achieved by setting this object to 0. Attempting to set this object to any other value will result in a wrongValue error.')
ccfaWildAffCacheHiWtrMarkReset = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 115, 1, 3, 8), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccfaWildAffCacheHiWtrMarkReset.setStatus('current')
if mibBuilder.loadTexts: ccfaWildAffCacheHiWtrMarkReset.setDescription('This indicates when ccfaWildcardAffHiWtrMark was set to 0.')
ccfaWildcardAffDenies = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 115, 1, 3, 9), Counter32()).setUnits('affinities').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccfaWildcardAffDenies.setStatus('current')
if mibBuilder.loadTexts: ccfaWildcardAffDenies.setDescription('This is the number of Wildcard Affinities for which this Forwarding Agent was not able to accept (i.e. denied) because a mandatory action item included with the Wildcard Affinity was not supported by this Forwarding Agent.')
ccfaWildcardAffDrops = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 115, 1, 3, 10), Counter32()).setUnits('affinities').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccfaWildcardAffDrops.setStatus('current')
if mibBuilder.loadTexts: ccfaWildcardAffDrops.setDescription('This is the number of Wildcard Affinities for which this Forwarding Agent did not process (i.e. dropped). This can happen because of low resource conditions prevailing in the Forwarding Agent, such as low memory.')
ccfaWildcardAffTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 115, 1, 3, 6), )
if mibBuilder.loadTexts: ccfaWildcardAffTable.setStatus('current')
if mibBuilder.loadTexts: ccfaWildcardAffTable.setDescription('List of Wildcard Affinity entries, which contain stats on each Wildcard Affinity supported by the Forwarding Agent. This is a dynamic table. Entries are created when the Service Manager sends Wildcard Affinities to this Forwarding Agent, and deleted upon instruction from the Service Manager.')
ccfaWildcardAffEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 115, 1, 3, 6, 1), ).setIndexNames((0, "CISCO-CASA-FA-MIB", "ccfaWildcardAffIndex"))
if mibBuilder.loadTexts: ccfaWildcardAffEntry.setStatus('current')
if mibBuilder.loadTexts: ccfaWildcardAffEntry.setDescription('A list of Wildcard Affinity entities. Entries are added to this table dynamically by the subagent when Wildcard Affinities are received on the multicast IP address (see cCasaMulticastAddress in the CISCO-CASA-MIB) for which this Forwarding Agent is listening.')
ccfaWildcardAffIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 115, 1, 3, 6, 1, 1), CasaWildcardAffIndex())
if mibBuilder.loadTexts: ccfaWildcardAffIndex.setStatus('current')
if mibBuilder.loadTexts: ccfaWildcardAffIndex.setDescription('The value of this index uniquely identifies this Wildcard Affinity from others in the table.')
ccfaWildcardAffSourceAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 115, 1, 3, 6, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccfaWildcardAffSourceAddr.setStatus('current')
if mibBuilder.loadTexts: ccfaWildcardAffSourceAddr.setDescription('The value used to compare the source IP address of the TCP and UDP packets. When the comparison is done, ccfaWildcardAffSourceMask is used as the mask on this object.')
ccfaWildcardAffDestinationAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 115, 1, 3, 6, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccfaWildcardAffDestinationAddr.setStatus('current')
if mibBuilder.loadTexts: ccfaWildcardAffDestinationAddr.setDescription('The value used to compare the destination IP address of the TCP and UDP packets. When the comparison is done, ccfaWildcardAffDestinationMask is used as the mask on this object.')
ccfaWildcardAffSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 115, 1, 3, 6, 1, 4), CiscoPort()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccfaWildcardAffSourcePort.setStatus('current')
if mibBuilder.loadTexts: ccfaWildcardAffSourcePort.setDescription('The value used to compare the source port of the TCP and UDP packets. A value of 0 means all port numbers will match.')
ccfaWildcardAffDestinationPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 115, 1, 3, 6, 1, 5), CiscoPort()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccfaWildcardAffDestinationPort.setStatus('current')
if mibBuilder.loadTexts: ccfaWildcardAffDestinationPort.setDescription('The value used to compare the destination port of the TCP and UDP packets. A value of 0 means all port numbers will match.')
ccfaWildcardAffProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 115, 1, 3, 6, 1, 6), CiscoIpProtocol()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccfaWildcardAffProtocol.setStatus('current')
if mibBuilder.loadTexts: ccfaWildcardAffProtocol.setDescription('The value used to compare the IP Protocol field of the TCP and UDP packets. A value of 0 means all protocol numbers will match.')
ccfaWildcardAffFragment = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 115, 1, 3, 6, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccfaWildcardAffFragment.setStatus('current')
if mibBuilder.loadTexts: ccfaWildcardAffFragment.setDescription('True indicates that fragments are to be sent to the Service Manager, false indicates that fragments are compared against fields in this Wildcard Affinity for a possible match in which case the fragment is sent to the Service Manager.')
ccfaWildcardAffSourceMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 115, 1, 3, 6, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccfaWildcardAffSourceMask.setStatus('current')
if mibBuilder.loadTexts: ccfaWildcardAffSourceMask.setDescription('The IP mask indicating which bits in the ccfaWildcardAffSourceAddr are relevant. For each set bit in this mask, the corresponding bits in ccfaWildcardAffSourceAddr and the source IP address of the received packet must be equal in order to match this Wildcard Affinity.')
ccfaWildcardAffDestinationMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 115, 1, 3, 6, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccfaWildcardAffDestinationMask.setStatus('current')
if mibBuilder.loadTexts: ccfaWildcardAffDestinationMask.setDescription('The IP mask indicating which bits in the ccfaWildcardAffDestinationAddr are relevant. For each set bit in this mask, the corresponding bits in ccfaWildcardAffDestinationAddr and the destination IP address of the received packet must be equal in order to match this Wildcard Affinity.')
ccfaWildcardAffSvcManagerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 115, 1, 3, 6, 1, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccfaWildcardAffSvcManagerAddr.setStatus('current')
if mibBuilder.loadTexts: ccfaWildcardAffSvcManagerAddr.setDescription('CASA Service Manager IP address to which packets matching this Wildcard Affinity are forwarded.')
ccfaWildcardAffSvcManagerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 115, 1, 3, 6, 1, 11), CiscoPort()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccfaWildcardAffSvcManagerPort.setStatus('current')
if mibBuilder.loadTexts: ccfaWildcardAffSvcManagerPort.setDescription('The Service Manager port to which packets matching this Wildcard Affinity are fowarded.')
ccfaWildcardAffBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 115, 1, 3, 6, 1, 12), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccfaWildcardAffBytes.setStatus('current')
if mibBuilder.loadTexts: ccfaWildcardAffBytes.setDescription('Number of bytes in packets which matched this Wildcard Affinity or any Fixed Affinity associated with this Wildcard Affinity, that were forwarded to the destination IP address.')
ccfaWildcardAffHCBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 115, 1, 3, 6, 1, 13), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccfaWildcardAffHCBytes.setStatus('current')
if mibBuilder.loadTexts: ccfaWildcardAffHCBytes.setDescription('Number of bytes in packets which matched this Wildcard Affinity or any Fixed Affinity associated with this Wildcard Affinity, that were forwarded to the destination IP address. This object is a 64-bit version of ccfaWildcardAffBytes.')
ccfaWildcardAffPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 115, 1, 3, 6, 1, 14), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccfaWildcardAffPackets.setStatus('current')
if mibBuilder.loadTexts: ccfaWildcardAffPackets.setDescription('Number of packets which matched this Wildcard Affinity or any Fixed Affinity associated with this Wildcard Affinity, that were forwarded to the destination IP address.')
ccfaWildcardAffHCPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 115, 1, 3, 6, 1, 15), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccfaWildcardAffHCPackets.setStatus('current')
if mibBuilder.loadTexts: ccfaWildcardAffHCPackets.setDescription('Number of packets which matched this Wildcard Affinity or any Fixed Affinity associated with this Wildcard Affinity, that were forwarded to the destination IP address. This object is a 64-bit version of ccfaWildcardAffPackets.')
ccfaWildcardAffFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 115, 1, 3, 6, 1, 16), Gauge32()).setUnits('affinities').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccfaWildcardAffFlows.setStatus('current')
if mibBuilder.loadTexts: ccfaWildcardAffFlows.setDescription('From a logical point of view, this is the number of TCP/UDP flows resulting from packets received which matched this Wildcard Affinity. A flow is a sequence of IP packets from a specific client to a specific real server going through this Forwarding Agent. Literally this is the current number of Fixed Affinity entries in the Fixed Affinity cache, that were put there as a result of packets matching this Wildcard Affinity.')
ccfaWildcardAffInsertTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 115, 1, 3, 6, 1, 17), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccfaWildcardAffInsertTime.setStatus('current')
if mibBuilder.loadTexts: ccfaWildcardAffInsertTime.setDescription('Date and time when this Wildcard Affinity was inserted into this table.')
ccfaWildcardAffInterestTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 115, 1, 3, 6, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccfaWildcardAffInterestTimeouts.setStatus('current')
if mibBuilder.loadTexts: ccfaWildcardAffInterestTimeouts.setDescription('Number of expected Fixed Affinities that were not received from the Service Manager within a period of time from when a Fixed Affinity was requested by this Forwarding Agent.')
ccfaWildcardAffAdvertiseDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 115, 1, 3, 6, 1, 19), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccfaWildcardAffAdvertiseDestAddr.setStatus('current')
if mibBuilder.loadTexts: ccfaWildcardAffAdvertiseDestAddr.setDescription('true indicates that the IP address defined by ccfaWildcardAffDestinationAddr is to be advertised by the routing protocol in this Forwarding Agent. false indicates that the IP address is not to be advertised.')
ccfaWildcardAffInterestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 115, 1, 3, 6, 1, 20), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccfaWildcardAffInterestAddr.setStatus('current')
if mibBuilder.loadTexts: ccfaWildcardAffInterestAddr.setDescription('The IP address of the CASA entity to which Interest Packets should be forwarded by this Forwarding Agent.')
ccfaWildcardAffInterestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 115, 1, 3, 6, 1, 21), CiscoPort()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccfaWildcardAffInterestPort.setStatus('current')
if mibBuilder.loadTexts: ccfaWildcardAffInterestPort.setDescription('The UDP port of the CASA entity to which Interest Packets should be forwarded by this Forwarding Agent.')
ccfaWildAffInterestPacketSpec = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 115, 1, 3, 6, 1, 22), CasaInterestPacketSpecification()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccfaWildAffInterestPacketSpec.setStatus('current')
if mibBuilder.loadTexts: ccfaWildAffInterestPacketSpec.setDescription('The criteria used to identify an Interest Packet. When such a packet is identified, that packet is sent to the entity described by ccfaWildcardAffInterestAddr and ccfaWildcardAffInterestPort.')
ccfaWildAffInterestTickelSpec = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 115, 1, 3, 6, 1, 23), CasaInterestPacketSpecification()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccfaWildAffInterestTickelSpec.setStatus('current')
if mibBuilder.loadTexts: ccfaWildAffInterestTickelSpec.setDescription('The criteria used to identify an Interest Packet resulting in a Tickle Packet being sent to the entity described by ccfaWildcardAffInterestAddr and ccfaWildcardAffInterestPort.')
ccfaWildcardAffDispatch = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 115, 1, 3, 6, 1, 24), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccfaWildcardAffDispatch.setStatus('current')
if mibBuilder.loadTexts: ccfaWildcardAffDispatch.setDescription("true indicates that the MAC address of the IP packet should be modified to that of the dispatch entity who's IP address is given by ccfaWildcardAffDispatchAddr, prior to transmitting the packet on the interface. If ccfaWildcardAffDispatchAddr has value 0.0.0.0 then the Forwarding Agent will discard the packet. false indicates that the MAC address is not to be translated.")
ccfaWildcardAffDispatchAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 115, 1, 3, 6, 1, 25), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccfaWildcardAffDispatchAddr.setStatus('current')
if mibBuilder.loadTexts: ccfaWildcardAffDispatchAddr.setDescription('The IP address of the dispatch entity for packets matching Fixed Affinities derived from this Wildcard Affinity.')
ccfaDispatchStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 115, 1, 4, 1), )
if mibBuilder.loadTexts: ccfaDispatchStatsTable.setStatus('current')
if mibBuilder.loadTexts: ccfaDispatchStatsTable.setDescription('Table of traffic statistics between this Forwarding Agent and the dispatch IP address. The statistics are gathered by the Forwarding agent and are relative to the Forwarding Agent.')
ccfaDispatchStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 115, 1, 4, 1, 1), ).setIndexNames((0, "CISCO-CASA-FA-MIB", "ccfaDispatchAddress"))
if mibBuilder.loadTexts: ccfaDispatchStatsEntry.setStatus('current')
if mibBuilder.loadTexts: ccfaDispatchStatsEntry.setDescription('A list of traffic statistics. Entries are added to this table dynamically by the subagent when Fixed Affinities are received from the Appliance indicating a dispatch IP address which is not currently in the table. When there are no Fixed Affinities left which contain ccfaDispatchAddress in the Dispatch Address field, a timer is invoked. The entry is deleted when this timer expires if no new Fixed Affinities are received with the Dispatch Address field equal to ccfaDispatchAddress.')
ccfaDispatchAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 115, 1, 4, 1, 1, 1), IpAddress())
if mibBuilder.loadTexts: ccfaDispatchAddress.setStatus('current')
if mibBuilder.loadTexts: ccfaDispatchAddress.setDescription('Dispatch Address of the remote entity for which these statistics are related to.')
ccfaDispatchBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 115, 1, 4, 1, 1, 2), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccfaDispatchBytesIn.setStatus('current')
if mibBuilder.loadTexts: ccfaDispatchBytesIn.setDescription('Number of bytes received by this Fowarding Agent from the Dispatch Address.')
ccfaDispatchHCBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 115, 1, 4, 1, 1, 3), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccfaDispatchHCBytesIn.setStatus('current')
if mibBuilder.loadTexts: ccfaDispatchHCBytesIn.setDescription('Number of bytes received by this Fowarding Agent from the Dispatch Address. This object is a 64-bit version of ccfaDispatchBytesIn.')
ccfaDispatchBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 115, 1, 4, 1, 1, 4), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccfaDispatchBytesOut.setStatus('current')
if mibBuilder.loadTexts: ccfaDispatchBytesOut.setDescription('Number of bytes sent by this Fowarding Agent to the Dispatch Address.')
ccfaDispatchHCBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 115, 1, 4, 1, 1, 5), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccfaDispatchHCBytesOut.setStatus('current')
if mibBuilder.loadTexts: ccfaDispatchHCBytesOut.setDescription('Number of bytes sent by this Fowarding Agent to the Dispatch Address. This object is a 64-bit version of ccfaDispatchBytesOut.')
ccfaDispatchPacketsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 115, 1, 4, 1, 1, 6), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccfaDispatchPacketsIn.setStatus('current')
if mibBuilder.loadTexts: ccfaDispatchPacketsIn.setDescription('Packets received by this Fowarding Agent from the Dispatch Address.')
ccfaDispatchHCPacketsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 115, 1, 4, 1, 1, 7), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccfaDispatchHCPacketsIn.setStatus('current')
if mibBuilder.loadTexts: ccfaDispatchHCPacketsIn.setDescription('Packets received by this Fowarding Agent from the Dispatch Address. This object is a 64-bit version of ccfaDispatchPacketsIn.')
ccfaDispatchPacketsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 115, 1, 4, 1, 1, 8), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccfaDispatchPacketsOut.setStatus('current')
if mibBuilder.loadTexts: ccfaDispatchPacketsOut.setDescription('Packets sent by this Fowarding Agent to the Dispatch Address.')
ccfaDispatchHCPacketsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 115, 1, 4, 1, 1, 9), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccfaDispatchHCPacketsOut.setStatus('current')
if mibBuilder.loadTexts: ccfaDispatchHCPacketsOut.setDescription('Packets sent by this Fowarding Agent to the Dispatch Address. This object is a 64-bit version of ccfaDispatchPacketsOut.')
ccfaDispatchFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 115, 1, 4, 1, 1, 10), Gauge32()).setUnits('affinities').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccfaDispatchFlows.setStatus('current')
if mibBuilder.loadTexts: ccfaDispatchFlows.setDescription('From a logical point of view, this is the number of TCP/UDP flows resulting from packets received which matched any Wildcard Affinity active in this Forwarding Agent. This is current number of Fixed Affinity entries whose destination IP address is equal to ccfaDispatchAddress.')
ccfaAdvertisedDispatchTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 115, 1, 4, 2), )
if mibBuilder.loadTexts: ccfaAdvertisedDispatchTable.setStatus('current')
if mibBuilder.loadTexts: ccfaAdvertisedDispatchTable.setDescription('This table correlates dispatch addresses with their corresponding advertised address.')
ccfaAdvertisedDispatchEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 115, 1, 4, 2, 1), ).setIndexNames((0, "CISCO-CASA-FA-MIB", "ccfaAdvertisedAddress"))
if mibBuilder.loadTexts: ccfaAdvertisedDispatchEntry.setStatus('current')
if mibBuilder.loadTexts: ccfaAdvertisedDispatchEntry.setDescription('A list of dispatch addresses for each advertised address. An entry is added to this table by the subagent when the Wildcard Affinity associated with a received Fixed Affinity has ccfaWildcardAffDispatch set to true and the entry is not already in the table. An entry is deleted from this table when all fixed affinities containing the dispatch address for the associated advertised address, time out.')
ccfaAdvertisedAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 115, 1, 4, 2, 1, 1), IpAddress())
if mibBuilder.loadTexts: ccfaAdvertisedAddress.setStatus('current')
if mibBuilder.loadTexts: ccfaAdvertisedAddress.setDescription('The advertised IP Address. This corresponds to ccfaWildcardAffDestinationAddr with ccfaWildcardAffAdvertiseDestAddr set to true.')
ccfaAdvertisedDispatchAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 115, 1, 4, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccfaAdvertisedDispatchAddress.setStatus('current')
if mibBuilder.loadTexts: ccfaAdvertisedDispatchAddress.setDescription('Dispatch Address of the remote entity for which these statistics are related to.')
ciscoCasaFaMIBNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 115, 2))
ciscoCasaFaMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 115, 2, 0))
ciscoCasaFaWildcardAffCreated = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 115, 2, 1)).setObjects(("CISCO-CASA-FA-MIB", "ccfaWildcardAffSourceAddr"), ("CISCO-CASA-FA-MIB", "ccfaWildcardAffDestinationAddr"), ("CISCO-CASA-FA-MIB", "ccfaWildcardAffSourcePort"), ("CISCO-CASA-FA-MIB", "ccfaWildcardAffDestinationPort"), ("CISCO-CASA-FA-MIB", "ccfaWildcardAffProtocol"), ("CISCO-CASA-FA-MIB", "ccfaWildcardAffFragment"), ("CISCO-CASA-FA-MIB", "ccfaWildcardAffSourceMask"), ("CISCO-CASA-FA-MIB", "ccfaWildcardAffDestinationMask"), ("CISCO-CASA-FA-MIB", "ccfaWildcardAffSvcManagerAddr"), ("CISCO-CASA-FA-MIB", "ccfaWildcardAffSvcManagerPort"))
if mibBuilder.loadTexts: ciscoCasaFaWildcardAffCreated.setStatus('current')
if mibBuilder.loadTexts: ciscoCasaFaWildcardAffCreated.setDescription('This notification indicates that this CASA Forwarding Agent has created a Wildcard Affinity entry. This is gated on ccfaWildcardAffNotifEnabled.')
ciscoCasaFaWildcardAffDeleted = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 115, 2, 2)).setObjects(("CISCO-CASA-FA-MIB", "ccfaWildcardAffSourceAddr"), ("CISCO-CASA-FA-MIB", "ccfaWildcardAffDestinationAddr"), ("CISCO-CASA-FA-MIB", "ccfaWildcardAffSourcePort"), ("CISCO-CASA-FA-MIB", "ccfaWildcardAffDestinationPort"), ("CISCO-CASA-FA-MIB", "ccfaWildcardAffProtocol"), ("CISCO-CASA-FA-MIB", "ccfaWildcardAffFragment"), ("CISCO-CASA-FA-MIB", "ccfaWildcardAffSourceMask"), ("CISCO-CASA-FA-MIB", "ccfaWildcardAffDestinationMask"), ("CISCO-CASA-FA-MIB", "ccfaWildcardAffSvcManagerAddr"), ("CISCO-CASA-FA-MIB", "ccfaWildcardAffSvcManagerPort"), ("CISCO-CASA-FA-MIB", "ccfaWildcardAffFlows"))
if mibBuilder.loadTexts: ciscoCasaFaWildcardAffDeleted.setStatus('current')
if mibBuilder.loadTexts: ciscoCasaFaWildcardAffDeleted.setDescription('This notification indicates that this CASA Forwarding Agent has deleted this Wildcard Affinity entry. This is gated on ccfaWildcardAffNotifEnabled.')
ciscoCasaFaMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 115, 3))
ciscoCasaFaMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 115, 3, 1))
ciscoCasaFaMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 115, 3, 2))
ciscoCasaFaMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 115, 3, 1, 1)).setObjects(("CISCO-CASA-FA-MIB", "ciscoCasaFaWildcardAffGroup"), ("CISCO-CASA-FA-MIB", "ciscoCasaFaDispatchGroup"), ("CISCO-CASA-FA-MIB", "ciscoCasaFaADGroup"), ("CISCO-CASA-FA-MIB", "ciscoCasaFaNotifGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCasaFaMIBCompliance = ciscoCasaFaMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: ciscoCasaFaMIBCompliance.setDescription('The compliance statement for entities which implement the Cisco CASA FA MIB.')
ciscoCasaFaWildcardAffGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 115, 3, 2, 3)).setObjects(("CISCO-CASA-FA-MIB", "ccfaWildcardAffTotalBytes"), ("CISCO-CASA-FA-MIB", "ccfaWildcardAffHCTotalBytes"), ("CISCO-CASA-FA-MIB", "ccfaWildcardAffTotalPackets"), ("CISCO-CASA-FA-MIB", "ccfaWildcardAffNumOf"), ("CISCO-CASA-FA-MIB", "ccfaWildcardAffNotifEnabled"), ("CISCO-CASA-FA-MIB", "ccfaWildcardAffHiWtrMark"), ("CISCO-CASA-FA-MIB", "ccfaWildAffCacheHiWtrMarkReset"), ("CISCO-CASA-FA-MIB", "ccfaWildcardAffDenies"), ("CISCO-CASA-FA-MIB", "ccfaWildcardAffDrops"), ("CISCO-CASA-FA-MIB", "ccfaWildcardAffSourceAddr"), ("CISCO-CASA-FA-MIB", "ccfaWildcardAffDestinationAddr"), ("CISCO-CASA-FA-MIB", "ccfaWildcardAffSourcePort"), ("CISCO-CASA-FA-MIB", "ccfaWildcardAffDestinationPort"), ("CISCO-CASA-FA-MIB", "ccfaWildcardAffProtocol"), ("CISCO-CASA-FA-MIB", "ccfaWildcardAffFragment"), ("CISCO-CASA-FA-MIB", "ccfaWildcardAffSourceMask"), ("CISCO-CASA-FA-MIB", "ccfaWildcardAffDestinationMask"), ("CISCO-CASA-FA-MIB", "ccfaWildcardAffSvcManagerAddr"), ("CISCO-CASA-FA-MIB", "ccfaWildcardAffSvcManagerPort"), ("CISCO-CASA-FA-MIB", "ccfaWildcardAffBytes"), ("CISCO-CASA-FA-MIB", "ccfaWildcardAffHCBytes"), ("CISCO-CASA-FA-MIB", "ccfaWildcardAffPackets"), ("CISCO-CASA-FA-MIB", "ccfaWildcardAffHCPackets"), ("CISCO-CASA-FA-MIB", "ccfaWildcardAffFlows"), ("CISCO-CASA-FA-MIB", "ccfaWildcardAffInsertTime"), ("CISCO-CASA-FA-MIB", "ccfaWildcardAffInterestTimeouts"), ("CISCO-CASA-FA-MIB", "ccfaWildcardAffAdvertiseDestAddr"), ("CISCO-CASA-FA-MIB", "ccfaWildcardAffInterestAddr"), ("CISCO-CASA-FA-MIB", "ccfaWildcardAffInterestPort"), ("CISCO-CASA-FA-MIB", "ccfaWildAffInterestPacketSpec"), ("CISCO-CASA-FA-MIB", "ccfaWildAffInterestTickelSpec"), ("CISCO-CASA-FA-MIB", "ccfaWildcardAffDispatch"), ("CISCO-CASA-FA-MIB", "ccfaWildcardAffDispatchAddr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCasaFaWildcardAffGroup = ciscoCasaFaWildcardAffGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoCasaFaWildcardAffGroup.setDescription('CASA Wildcard Affinity objects.')
ciscoCasaFaDispatchGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 115, 3, 2, 5)).setObjects(("CISCO-CASA-FA-MIB", "ccfaDispatchBytesIn"), ("CISCO-CASA-FA-MIB", "ccfaDispatchHCBytesIn"), ("CISCO-CASA-FA-MIB", "ccfaDispatchBytesOut"), ("CISCO-CASA-FA-MIB", "ccfaDispatchHCBytesOut"), ("CISCO-CASA-FA-MIB", "ccfaDispatchPacketsIn"), ("CISCO-CASA-FA-MIB", "ccfaDispatchHCPacketsIn"), ("CISCO-CASA-FA-MIB", "ccfaDispatchPacketsOut"), ("CISCO-CASA-FA-MIB", "ccfaDispatchHCPacketsOut"), ("CISCO-CASA-FA-MIB", "ccfaDispatchFlows"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCasaFaDispatchGroup = ciscoCasaFaDispatchGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoCasaFaDispatchGroup.setDescription('CASA affinity dispatch statistics.')
ciscoCasaFaADGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 115, 3, 2, 6)).setObjects(("CISCO-CASA-FA-MIB", "ccfaAdvertisedDispatchAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCasaFaADGroup = ciscoCasaFaADGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoCasaFaADGroup.setDescription('CASA advertised address, dispatch address correlation group.')
ciscoCasaFaNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 115, 3, 2, 7)).setObjects(("CISCO-CASA-FA-MIB", "ciscoCasaFaWildcardAffCreated"), ("CISCO-CASA-FA-MIB", "ciscoCasaFaWildcardAffDeleted"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCasaFaNotifGroup = ciscoCasaFaNotifGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoCasaFaNotifGroup.setDescription('A collection of objects providing CASA notifications.')
mibBuilder.exportSymbols("CISCO-CASA-FA-MIB", ciscoCasaFaMIBObjects=ciscoCasaFaMIBObjects, ciscoCasaFaMIBCompliance=ciscoCasaFaMIBCompliance, ccfaWildcardAffDestinationAddr=ccfaWildcardAffDestinationAddr, ccfaWildcardAffDenies=ccfaWildcardAffDenies, ccfaWildcardAffNotifEnabled=ccfaWildcardAffNotifEnabled, ccfaWildcardAffTable=ccfaWildcardAffTable, ciscoCasaFaMIBNotificationPrefix=ciscoCasaFaMIBNotificationPrefix, ccfaWildcardAffSourceAddr=ccfaWildcardAffSourceAddr, ccfaDispatchFlows=ccfaDispatchFlows, ccfaWildcardAffDispatchAddr=ccfaWildcardAffDispatchAddr, ccfaAdvertisedAddress=ccfaAdvertisedAddress, ciscoCasaFaDispatchGroup=ciscoCasaFaDispatchGroup, ciscoCasaFaMIBConformance=ciscoCasaFaMIBConformance, ccfaDispatchPacketsOut=ccfaDispatchPacketsOut, ccfaWildAffInterestPacketSpec=ccfaWildAffInterestPacketSpec, ccfaWildcardAffProtocol=ccfaWildcardAffProtocol, ccfaDispatchBytesOut=ccfaDispatchBytesOut, CasaInterestPacketSpecification=CasaInterestPacketSpecification, ccfaDispatchHCBytesIn=ccfaDispatchHCBytesIn, PYSNMP_MODULE_ID=ciscoCasaFaMIB, ccfaAdvertisedDispatchAddress=ccfaAdvertisedDispatchAddress, ciscoCasaFaADGroup=ciscoCasaFaADGroup, ciscoCasaFaMIBCompliances=ciscoCasaFaMIBCompliances, ccfaDispatchHCPacketsIn=ccfaDispatchHCPacketsIn, ccfaWildcardAff=ccfaWildcardAff, ccfaWildcardAffFlows=ccfaWildcardAffFlows, ccfaGlobal=ccfaGlobal, ccfaWildcardAffInterestAddr=ccfaWildcardAffInterestAddr, ccfaWildcardAffTotalBytes=ccfaWildcardAffTotalBytes, ciscoCasaFaMIB=ciscoCasaFaMIB, ccfaWildcardAffSourcePort=ccfaWildcardAffSourcePort, ccfaAdvertisedDispatchEntry=ccfaAdvertisedDispatchEntry, ciscoCasaFaMIBGroups=ciscoCasaFaMIBGroups, ccfaWildcardAffEntry=ccfaWildcardAffEntry, ccfaStats=ccfaStats, ccfaWildAffInterestTickelSpec=ccfaWildAffInterestTickelSpec, ccfaDispatchAddress=ccfaDispatchAddress, ciscoCasaFaMIBNotifications=ciscoCasaFaMIBNotifications, ccfaWildcardAffDestinationPort=ccfaWildcardAffDestinationPort, ccfaWildcardAffHCBytes=ccfaWildcardAffHCBytes, ccfaWildcardAffInsertTime=ccfaWildcardAffInsertTime, ciscoCasaFaWildcardAffCreated=ciscoCasaFaWildcardAffCreated, ccfaWildcardAffSvcManagerPort=ccfaWildcardAffSvcManagerPort, ciscoCasaFaWildcardAffGroup=ciscoCasaFaWildcardAffGroup, ccfaDispatchStatsEntry=ccfaDispatchStatsEntry, ccfaWildcardAffPackets=ccfaWildcardAffPackets, ccfaWildcardAffHCTotalBytes=ccfaWildcardAffHCTotalBytes, ccfaWildcardAffBytes=ccfaWildcardAffBytes, ccfaWildAffCacheHiWtrMarkReset=ccfaWildAffCacheHiWtrMarkReset, ccfaDispatchHCPacketsOut=ccfaDispatchHCPacketsOut, ccfaWildcardAffDispatch=ccfaWildcardAffDispatch, ccfaWildcardAffDrops=ccfaWildcardAffDrops, ccfaDispatchStats=ccfaDispatchStats, ccfaWildcardAffIndex=ccfaWildcardAffIndex, ccfaAdvertisedDispatchTable=ccfaAdvertisedDispatchTable, ccfaDispatchHCBytesOut=ccfaDispatchHCBytesOut, ccfaWildcardAffTotalPackets=ccfaWildcardAffTotalPackets, ccfaWildcardAffInterestTimeouts=ccfaWildcardAffInterestTimeouts, ccfaWildcardAffFragment=ccfaWildcardAffFragment, ccfaWildcardAffNumOf=ccfaWildcardAffNumOf, CasaWildcardAffIndex=CasaWildcardAffIndex, ccfaWildcardAffDestinationMask=ccfaWildcardAffDestinationMask, ccfaWildcardAffSourceMask=ccfaWildcardAffSourceMask, ccfaWildcardAffAdvertiseDestAddr=ccfaWildcardAffAdvertiseDestAddr, ciscoCasaFaNotifGroup=ciscoCasaFaNotifGroup, ccfaDispatchBytesIn=ccfaDispatchBytesIn, ciscoCasaFaWildcardAffDeleted=ciscoCasaFaWildcardAffDeleted, ccfaWildcardAffInterestPort=ccfaWildcardAffInterestPort, ccfaDispatchPacketsIn=ccfaDispatchPacketsIn, ccfaDispatchStatsTable=ccfaDispatchStatsTable, ccfaWildcardAffHCPackets=ccfaWildcardAffHCPackets, ccfaWildcardAffSvcManagerAddr=ccfaWildcardAffSvcManagerAddr, ccfaWildcardAffHiWtrMark=ccfaWildcardAffHiWtrMark)
