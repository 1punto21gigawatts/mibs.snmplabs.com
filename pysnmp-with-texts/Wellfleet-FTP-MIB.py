#
# PySNMP MIB module Wellfleet-FTP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Wellfleet-FTP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:40:16 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, NotificationType, ModuleIdentity, MibIdentifier, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Bits, Gauge32, Unsigned32, Counter32, ObjectIdentity, iso, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "NotificationType", "ModuleIdentity", "MibIdentifier", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Bits", "Gauge32", "Unsigned32", "Counter32", "ObjectIdentity", "iso", "TimeTicks")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
wfFtpGroup, = mibBuilder.importSymbols("Wellfleet-COMMON-MIB", "wfFtpGroup")
wfFtp = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 10, 1))
wfFtpDelete = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFtpDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfFtpDelete.setDescription('Create/Delete parameter. Default is created. Users perform a set operation on this object in order to create/delete WfFTP. ')
wfFtpDisable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFtpDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfFtpDisable.setDescription('Enables or Disables FTP Subsystem')
wfFtpDefaultVolume = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 65, 100, 101, 200, 201, 300, 301, 400, 401, 500, 501, 600, 601, 700, 701, 800, 801, 900, 901, 1000, 1001, 1100, 1101, 1200, 1201, 1300, 1301, 1400, 1401))).clone(namedValues=NamedValues(("volume1", 1), ("volume2", 2), ("volume3", 3), ("volume4", 4), ("volume5", 5), ("volume6", 6), ("volume7", 7), ("volume8", 8), ("volume9", 9), ("volume10", 10), ("volume11", 11), ("volume12", 12), ("volume13", 13), ("volume14", 14), ("volumea", 65), ("volume1a", 100), ("volume1b", 101), ("volume2a", 200), ("volume2b", 201), ("volume3a", 300), ("volume3b", 301), ("volume4a", 400), ("volume4b", 401), ("volume5a", 500), ("volume5b", 501), ("volume6a", 600), ("volume6b", 601), ("volume7a", 700), ("volume7b", 701), ("volume8a", 800), ("volume8b", 801), ("volume9a", 900), ("volume9b", 901), ("volume10a", 1000), ("volume10b", 1001), ("volume11a", 1100), ("volume11b", 1101), ("volume12a", 1200), ("volume12b", 1201), ("volume13a", 1300), ("volume13b", 1301), ("volume14a", 1400), ("volume14b", 1401))).clone('volume2')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFtpDefaultVolume.setStatus('mandatory')
if mibBuilder.loadTexts: wfFtpDefaultVolume.setDescription('The file system volume number to which transferred files will be written and from which they will be retrieved. The volume number corresponds to the slot number on which the volume resides. On systems with a floppy disk, volumeA(65) should be used.')
wfFtpLoginRetries = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 10, 1, 4), Integer32().clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFtpLoginRetries.setStatus('mandatory')
if mibBuilder.loadTexts: wfFtpLoginRetries.setDescription('Number of ftp login retries allowed after a login failure. Default is 3')
wfFtpIdleTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 10, 1, 5), Integer32().clone(900)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFtpIdleTimeOut.setStatus('mandatory')
if mibBuilder.loadTexts: wfFtpIdleTimeOut.setDescription('Time out in seconds to close the FTP control connection if the connection remains idle.')
wfFtpMaxSessions = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 10, 1, 6), Integer32().clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFtpMaxSessions.setStatus('mandatory')
if mibBuilder.loadTexts: wfFtpMaxSessions.setDescription('Maximum number of FTP sessions allowed at one time')
wfFtpType = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ascii", 1), ("binary", 2))).clone('binary')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFtpType.setStatus('mandatory')
if mibBuilder.loadTexts: wfFtpType.setDescription('Current data transmission type')
wfFtpCtrlIpTos = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 10, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("lowdelay", 2))).clone('lowdelay')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFtpCtrlIpTos.setStatus('obsolete')
if mibBuilder.loadTexts: wfFtpCtrlIpTos.setDescription('The Type Of Service value set in the IP datagram specifies to the Internet transport layer how the datagram should be handled. For FTP control connection low delay is the default')
wfFtpDataIpTos = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("highthroughput", 2))).clone('highthroughput')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFtpDataIpTos.setStatus('obsolete')
if mibBuilder.loadTexts: wfFtpDataIpTos.setDescription('The Type Of Service value set in the IP datagram specifies to the Internet transport layer how the datagram should be handled. For FTP data transfers high throughput is the default')
wfFtpTcpWindowSize = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 10, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5000, 64000)).clone(60000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFtpTcpWindowSize.setStatus('mandatory')
if mibBuilder.loadTexts: wfFtpTcpWindowSize.setDescription('The size in bytes of the windows used for WfFTP TCP connections')
wfFtpLogins = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 10, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFtpLogins.setStatus('mandatory')
if mibBuilder.loadTexts: wfFtpLogins.setDescription('Number of attempted logins')
wfFtpManagerLoginFails = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 10, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFtpManagerLoginFails.setStatus('mandatory')
if mibBuilder.loadTexts: wfFtpManagerLoginFails.setDescription('Number of manager logins that failed')
wfFtpOtherLoginFails = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 10, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFtpOtherLoginFails.setStatus('mandatory')
if mibBuilder.loadTexts: wfFtpOtherLoginFails.setDescription('Number of logins other than manager logins that failed')
wfFtpXfers = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 10, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFtpXfers.setStatus('mandatory')
if mibBuilder.loadTexts: wfFtpXfers.setDescription('Number of Transfers in Progress')
wfFtpInFiles = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 10, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFtpInFiles.setStatus('mandatory')
if mibBuilder.loadTexts: wfFtpInFiles.setDescription('Number of files Successfully received')
wfFtpOutFiles = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 10, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFtpOutFiles.setStatus('mandatory')
if mibBuilder.loadTexts: wfFtpOutFiles.setDescription('Number of files Successfully sent')
wfFtpInErrs = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 10, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFtpInErrs.setStatus('mandatory')
if mibBuilder.loadTexts: wfFtpInErrs.setDescription('Number of errors logged during in bound transfer')
wfFtpOutErrs = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 10, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFtpOutErrs.setStatus('mandatory')
if mibBuilder.loadTexts: wfFtpOutErrs.setDescription('Number of errors logged during out bound transfer')
wfFtpAborts = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 10, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFtpAborts.setStatus('mandatory')
if mibBuilder.loadTexts: wfFtpAborts.setDescription('Number of transfer aborts')
wfFtpInXferRate = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 10, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFtpInXferRate.setStatus('mandatory')
if mibBuilder.loadTexts: wfFtpInXferRate.setDescription('Average transfer rate in kbytes per second for receiving data')
wfFtpOutXferRate = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 10, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFtpOutXferRate.setStatus('mandatory')
if mibBuilder.loadTexts: wfFtpOutXferRate.setDescription('Average transfer rate in kbytes per second for sending data')
mibBuilder.exportSymbols("Wellfleet-FTP-MIB", wfFtpIdleTimeOut=wfFtpIdleTimeOut, wfFtpOutFiles=wfFtpOutFiles, wfFtpInFiles=wfFtpInFiles, wfFtpTcpWindowSize=wfFtpTcpWindowSize, wfFtpDataIpTos=wfFtpDataIpTos, wfFtpLoginRetries=wfFtpLoginRetries, wfFtpXfers=wfFtpXfers, wfFtpOtherLoginFails=wfFtpOtherLoginFails, wfFtp=wfFtp, wfFtpOutXferRate=wfFtpOutXferRate, wfFtpCtrlIpTos=wfFtpCtrlIpTos, wfFtpOutErrs=wfFtpOutErrs, wfFtpLogins=wfFtpLogins, wfFtpInXferRate=wfFtpInXferRate, wfFtpDisable=wfFtpDisable, wfFtpAborts=wfFtpAborts, wfFtpMaxSessions=wfFtpMaxSessions, wfFtpInErrs=wfFtpInErrs, wfFtpManagerLoginFails=wfFtpManagerLoginFails, wfFtpDelete=wfFtpDelete, wfFtpType=wfFtpType, wfFtpDefaultVolume=wfFtpDefaultVolume)
