#
# PySNMP MIB module HUAWEI-WLAN-SECURITY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HUAWEI-WLAN-SECURITY-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:49:52 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint")
hwApRegionIndex, hwApMac, hwApIndex = mibBuilder.importSymbols("HUAWEI-WLAN-DEVICE-MIB", "hwApRegionIndex", "hwApMac", "hwApIndex")
hwWlan, = mibBuilder.importSymbols("HUAWEI-WLAN-MIB", "hwWlan")
hwRadioID, = mibBuilder.importSymbols("HUAWEI-WLAN-RADIO-MIB", "hwRadioID")
hwWlanServiceEssSsid, hwWlanServiceStaMac = mibBuilder.importSymbols("HUAWEI-WLAN-SERVICE-MIB", "hwWlanServiceEssSsid", "hwWlanServiceStaMac")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
MibIdentifier, TimeTicks, Integer32, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Counter32, ModuleIdentity, IpAddress, iso, Counter64, Unsigned32, NotificationType, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "TimeTicks", "Integer32", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Counter32", "ModuleIdentity", "IpAddress", "iso", "Counter64", "Unsigned32", "NotificationType", "Bits")
DisplayString, MacAddress, TruthValue, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "MacAddress", "TruthValue", "TextualConvention", "RowStatus")
hwWlanSecurity = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6))
hwWlanSecurity.setRevisions(('2014-02-13 10:00', '2013-08-12 10:00', '2010-06-01 10:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hwWlanSecurity.setRevisionsDescriptions(('Version: V1.02, add changes for V2R5', 'Version: V1.01, add changes for V2R3', ' V1.00, The first Draft.',))
if mibBuilder.loadTexts: hwWlanSecurity.setLastUpdated('201402131000Z')
if mibBuilder.loadTexts: hwWlanSecurity.setOrganization('Huawei Technologies Co.,Ltd.')
if mibBuilder.loadTexts: hwWlanSecurity.setContactInfo("Huawei Industrial Base Bantian, Longgang Shenzhen 518129 People's Republic of China Website: http://www.huawei.com Email: support@huawei.com ")
if mibBuilder.loadTexts: hwWlanSecurity.setDescription(' huawei HUAWEI-WLAN-SECURITY-MIB. ')
hwWsecProfileTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 1), )
if mibBuilder.loadTexts: hwWsecProfileTable.setStatus('current')
if mibBuilder.loadTexts: hwWsecProfileTable.setDescription('WLAN access security profile table.')
hwWsecProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 1, 1), ).setIndexNames((0, "HUAWEI-WLAN-SECURITY-MIB", "hwWsecProfileName"))
if mibBuilder.loadTexts: hwWsecProfileEntry.setStatus('current')
if mibBuilder.loadTexts: hwWsecProfileEntry.setDescription('WLAN access security profile entry.')
hwWsecProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWsecProfileName.setStatus('current')
if mibBuilder.loadTexts: hwWsecProfileName.setDescription(' WLAN access security profile Name. ')
hwWsecProfileWEPDataEncrypt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 1, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWsecProfileWEPDataEncrypt.setStatus('current')
if mibBuilder.loadTexts: hwWsecProfileWEPDataEncrypt.setDescription('When this attribute is TRUE, WEP data will be encrypted. When this attribute is FALSE, WEP data will not be encrypted. The default value of this attribute is FALSE.')
hwWsecProfileWEPDefaultKeyID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWsecProfileWEPDefaultKeyID.setReference('IEEE Std 802.11-2007, 8.3.2')
if mibBuilder.loadTexts: hwWsecProfileWEPDefaultKeyID.setStatus('current')
if mibBuilder.loadTexts: hwWsecProfileWEPDefaultKeyID.setDescription('This attribute shall indicate the use of the first, second, third, or fourth element of the WEPDefaultKeys array when set to values of zero, one, two, or three. The default value of this attribute shall be 0.')
hwWsecProfileWEPKeyMappingLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWsecProfileWEPKeyMappingLength.setReference('IEEE Std 802.11-2007, 8.3.2')
if mibBuilder.loadTexts: hwWsecProfileWEPKeyMappingLength.setStatus('current')
if mibBuilder.loadTexts: hwWsecProfileWEPKeyMappingLength.setDescription('The maximum number of tuples that hwWsecWEPKeyMappings can hold.')
hwWsecProfileAsuIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 1, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWsecProfileAsuIpAddr.setStatus('current')
if mibBuilder.loadTexts: hwWsecProfileAsuIpAddr.setDescription('ASU IP address for WAPI certification authentication')
hwWsecProfileCaCertFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 1, 1, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWsecProfileCaCertFileName.setStatus('current')
if mibBuilder.loadTexts: hwWsecProfileCaCertFileName.setDescription('CA certification file name')
hwWsecProfileAsuCertFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 1, 1, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWsecProfileAsuCertFileName.setStatus('current')
if mibBuilder.loadTexts: hwWsecProfileAsuCertFileName.setDescription('ASU certification file name')
hwWsecProfileAcCertFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 1, 1, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWsecProfileAcCertFileName.setStatus('current')
if mibBuilder.loadTexts: hwWsecProfileAcCertFileName.setDescription('AC certification file name')
hwWsecProfileAcPrvKeyFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 1, 1, 9), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWsecProfileAcPrvKeyFileName.setStatus('current')
if mibBuilder.loadTexts: hwWsecProfileAcPrvKeyFileName.setDescription('AC private key file name')
hwWsecProfileRsnaVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwWsecProfileRsnaVersion.setStatus('current')
if mibBuilder.loadTexts: hwWsecProfileRsnaVersion.setDescription('The highest WAPI/RSNA version this entity supports. See 7.3.2.9.')
hwWsecProfileWapiVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwWsecProfileWapiVersion.setStatus('current')
if mibBuilder.loadTexts: hwWsecProfileWapiVersion.setDescription('This object indicates the highest WAPI version that this entity supports.')
hwWsecProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 1, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwWsecProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwWsecProfileRowStatus.setDescription('Row status')
hwWsecProfileCaPfxPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 1, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWsecProfileCaPfxPassword.setStatus('current')
if mibBuilder.loadTexts: hwWsecProfileCaPfxPassword.setDescription('Description.')
hwWsecProfileCaCertState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwWsecProfileCaCertState.setStatus('current')
if mibBuilder.loadTexts: hwWsecProfileCaCertState.setDescription('Description.')
hwWsecProfileAsuPfxPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 1, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWsecProfileAsuPfxPassword.setStatus('current')
if mibBuilder.loadTexts: hwWsecProfileAsuPfxPassword.setDescription('Description.')
hwWsecProfileAsuCertState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwWsecProfileAsuCertState.setStatus('current')
if mibBuilder.loadTexts: hwWsecProfileAsuCertState.setDescription('Description.')
hwWsecProfileAcPfxPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 1, 1, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWsecProfileAcPfxPassword.setStatus('current')
if mibBuilder.loadTexts: hwWsecProfileAcPfxPassword.setDescription('Description.')
hwWsecProfileAcCertState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwWsecProfileAcCertState.setStatus('current')
if mibBuilder.loadTexts: hwWsecProfileAcCertState.setDescription('Description.')
hwWsecProfileKeyPfxPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 1, 1, 19), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWsecProfileKeyPfxPassword.setStatus('current')
if mibBuilder.loadTexts: hwWsecProfileKeyPfxPassword.setDescription('Description.')
hwWsecProfileAsuType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("remote", 1), ("local", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWsecProfileAsuType.setStatus('current')
if mibBuilder.loadTexts: hwWsecProfileAsuType.setDescription('Description.')
hwWsecProfileWpaPtkRekeySwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWsecProfileWpaPtkRekeySwitch.setStatus('current')
if mibBuilder.loadTexts: hwWsecProfileWpaPtkRekeySwitch.setDescription('Description.')
hwWsecProfileWpa2PtkRekeySwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWsecProfileWpa2PtkRekeySwitch.setStatus('current')
if mibBuilder.loadTexts: hwWsecProfileWpa2PtkRekeySwitch.setDescription('Description.')
hwWsecProfileWpaWpa2PtkRekeySwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWsecProfileWpaWpa2PtkRekeySwitch.setStatus('current')
if mibBuilder.loadTexts: hwWsecProfileWpaWpa2PtkRekeySwitch.setDescription('Description.')
hwWsecProfileWpaPtkRekeyInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 86400)).clone(43200)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWsecProfileWpaPtkRekeyInterval.setStatus('current')
if mibBuilder.loadTexts: hwWsecProfileWpaPtkRekeyInterval.setDescription('Description.')
hwWsecProfileWpa2PtkRekeyInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 86400)).clone(43200)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWsecProfileWpa2PtkRekeyInterval.setStatus('current')
if mibBuilder.loadTexts: hwWsecProfileWpa2PtkRekeyInterval.setDescription('Description.')
hwWsecProfileWpaWpa2PtkRekeyInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 1, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 86400)).clone(43200)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWsecProfileWpaWpa2PtkRekeyInterval.setStatus('current')
if mibBuilder.loadTexts: hwWsecProfileWpaWpa2PtkRekeyInterval.setDescription('Description.')
hwWsecWEPDefaultKeysTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 2), )
if mibBuilder.loadTexts: hwWsecWEPDefaultKeysTable.setReference('IEEE Std 802.11-2007, 8.3.2')
if mibBuilder.loadTexts: hwWsecWEPDefaultKeysTable.setStatus('current')
if mibBuilder.loadTexts: hwWsecWEPDefaultKeysTable.setDescription('Conceptual table for WEP default keys. This table shall contain the four WEP default secret key values corresponding to the four possible KeyID values. The WEP default secret keys are logically WRITE-ONLY. Attempts to read the entries in this table shall return unsuccessful status and values of null or zero. The default value of each WEP default key shall be null.')
hwWsecWEPDefaultKeysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 2, 1), ).setIndexNames((0, "HUAWEI-WLAN-SECURITY-MIB", "hwWsecProfileName"), (0, "HUAWEI-WLAN-SECURITY-MIB", "hwWsecWEPDefaultKeyIndex"))
if mibBuilder.loadTexts: hwWsecWEPDefaultKeysEntry.setStatus('current')
if mibBuilder.loadTexts: hwWsecWEPDefaultKeysEntry.setDescription('An Entry (conceptual row) in the WEP Default Keys Table.')
hwWsecWEPDefaultKeyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: hwWsecWEPDefaultKeyIndex.setStatus('current')
if mibBuilder.loadTexts: hwWsecWEPDefaultKeyIndex.setDescription('The auxiliary variable used to identify instances of the columnar objects in the WEP Default Keys Table. The value of this variable is equal to the WEPDefaultKeyID + 1')
hwWsecWEPDefaultKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 2, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWsecWEPDefaultKeyValue.setStatus('current')
if mibBuilder.loadTexts: hwWsecWEPDefaultKeyValue.setDescription('A WEP default secret hexadecimal key value. 10 byte for WEP-40, 26 byte for WEP-104, 32 byte for WEP-128. Reading this variable shall return unsuccessful status or null or zero.')
hwWsecWEPPassPhrase = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 2, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWsecWEPPassPhrase.setStatus('current')
if mibBuilder.loadTexts: hwWsecWEPPassPhrase.setDescription('A WEP default secret ASCII key value. 5 byte for WEP-40, 13 byte for WEP-104, 16 byte for WEP-128. Reading this variable shall return unsuccessful status or null or zero.')
hwWsecWEPKeyMappingsTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 3), )
if mibBuilder.loadTexts: hwWsecWEPKeyMappingsTable.setReference('IEEE Std 802.11-2007, 8.3.2')
if mibBuilder.loadTexts: hwWsecWEPKeyMappingsTable.setStatus('current')
if mibBuilder.loadTexts: hwWsecWEPKeyMappingsTable.setDescription('Conceptual table for WEP Key Mappings. The MIB supports the ability to share a separate WEP key for each RA/TA pair. The Key Mappings Table contains zero or one entry for each MAC address and contains two fields for each entry: WEPOn and the corresponding WEP key. The WEP key mappings are logically WRITE-ONLY. Attempts to read the entries in this table shall return unsuccessful status and values of null or zero. The default value for all WEPOn fields is FALSE.')
hwWsecWEPKeyMappingsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 3, 1), ).setIndexNames((0, "HUAWEI-WLAN-SECURITY-MIB", "hwWsecProfileName"), (0, "HUAWEI-WLAN-SECURITY-MIB", "hwWsecWEPKeyMappingIndex"))
if mibBuilder.loadTexts: hwWsecWEPKeyMappingsEntry.setStatus('current')
if mibBuilder.loadTexts: hwWsecWEPKeyMappingsEntry.setDescription('An Entry (conceptual row) in the WEP Key Mappings Table.')
hwWsecWEPKeyMappingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: hwWsecWEPKeyMappingIndex.setStatus('current')
if mibBuilder.loadTexts: hwWsecWEPKeyMappingIndex.setDescription('The auxiliary variable used to identify instances of the columnar objects in the WEP Key Mappings Table.')
hwWsecWEPKeyMappingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 3, 1, 2), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwWsecWEPKeyMappingAddress.setStatus('current')
if mibBuilder.loadTexts: hwWsecWEPKeyMappingAddress.setDescription('The MAC address of the STA for which the values from this key mapping entry are to be used.')
hwWsecWEPKeyMappingWEPOn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 3, 1, 3), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwWsecWEPKeyMappingWEPOn.setStatus('current')
if mibBuilder.loadTexts: hwWsecWEPKeyMappingWEPOn.setDescription('Boolean as to whether WEP is to be used when communicating with the hwWsecWEPKeyMappingAddress STA.')
hwWsecWEPKeyMappingValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 3, 1, 4), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwWsecWEPKeyMappingValue.setStatus('current')
if mibBuilder.loadTexts: hwWsecWEPKeyMappingValue.setDescription('A WEP secret key value.')
hwWsecWEPKeyMappingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 3, 1, 5), RowStatus().clone('active')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwWsecWEPKeyMappingStatus.setStatus('current')
if mibBuilder.loadTexts: hwWsecWEPKeyMappingStatus.setDescription('The status column used for creating, modifying, and deleting instances of the columnar objects in the WEP key mapping Table.')
hwWsecAuthSuitesTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 4), )
if mibBuilder.loadTexts: hwWsecAuthSuitesTable.setStatus('current')
if mibBuilder.loadTexts: hwWsecAuthSuitesTable.setDescription('This table lists the AKM suites supported by this entity. Each AKM suite can be individually enabled and disabled. The AKM suite list in the RSN information element is formed using the information in this table.')
hwWsecAuthSuitesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 4, 1), ).setIndexNames((0, "HUAWEI-WLAN-SECURITY-MIB", "hwWsecProfileName"), (0, "HUAWEI-WLAN-SECURITY-MIB", "hwWsecAuthSuiteIndex"))
if mibBuilder.loadTexts: hwWsecAuthSuitesEntry.setStatus('current')
if mibBuilder.loadTexts: hwWsecAuthSuitesEntry.setDescription('An entry (row) in the hwWsecAuthSuitesTable.')
hwWsecAuthSuiteIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("wapiCertification", 1), ("wapiPreShareKey", 2), ("wpa18021x", 3), ("wpa1PreShareKey", 4), ("wpa28021x", 5), ("wpa2PreShareKey", 6), ("shareKey", 7), ("openSystem", 8), ("wpa1wpa2PreShareKey", 9), ("wpa1wpa28021x", 10))))
if mibBuilder.loadTexts: hwWsecAuthSuiteIndex.setStatus('current')
if mibBuilder.loadTexts: hwWsecAuthSuiteIndex.setDescription('The auxiliary variable used as an index into the hwWsecAuthSuitesTable.')
hwWsecAuthSuite = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwWsecAuthSuite.setStatus('current')
if mibBuilder.loadTexts: hwWsecAuthSuite.setDescription('The selector of an AKM suite. It consists of an OUI (the first 3 octets) and a cipher suite identifier (the last octet). 0x00147201 : WAPI certification authentication 0x00147202 : WAPI preShare key authentication 0x000FAC01 : WPA1(WPA version 1) 802.1X authentication 0x000FAC02 : WPA1(WPA version 1) preShare key authentication 0x00E0FC01 : WPA2(WPA version 2) 802.1X authentication 0x00E0FC02 : WPA2(WPA version 2) preShare key authentication 0x00E0FC03 : share key (for WEP) 0x00E0FC04 : open system (no authentication) 0x00E0FC05 : wpa-wpa2-preShareKey 0x00E0FC06 : wpa-wpa2-8021x ')
hwWsecAuthSuiteEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 4, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWsecAuthSuiteEnabled.setStatus('current')
if mibBuilder.loadTexts: hwWsecAuthSuiteEnabled.setDescription('This variable indicates whether the corresponding AKM suite is enabled/disabled.')
hwWsecAuthPreauthenticationImplemented = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 4, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwWsecAuthPreauthenticationImplemented.setStatus('current')
if mibBuilder.loadTexts: hwWsecAuthPreauthenticationImplemented.setDescription('This variable indicates whether the entity supports WAPI pre-authentication. This cannot be TRUE unless hwWsecAuthOptionImplemented is TRUE.')
hwWsecAuthPreauthenticationEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 4, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWsecAuthPreauthenticationEnabled.setStatus('current')
if mibBuilder.loadTexts: hwWsecAuthPreauthenticationEnabled.setDescription('When this object is set to TRUE, this shall indicate that WAPI pre-authentication is enabled on this entity. This object requires that WAPI authentication of this profile Enabled.')
hwWsecAuthUnicastKeysSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwWsecAuthUnicastKeysSupported.setStatus('current')
if mibBuilder.loadTexts: hwWsecAuthUnicastKeysSupported.setDescription('This object indicates the number of the unicast keys that a WAPI/RSNA of this entity supports.')
hwWsecAuthPairwiseCipher = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("wpiSms4", 1), ("wep40", 2), ("wep104", 3), ("tkip", 4), ("ccmp", 5), ("null", 6), ("tkipCcmp", 7), ("wep128", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWsecAuthPairwiseCipher.setStatus('current')
if mibBuilder.loadTexts: hwWsecAuthPairwiseCipher.setDescription('The selector of a supported pairwise cipher. It consists of an OUI (the first 3 octets) and a cipher suite identifier (the last octet). 0x00147201 : WPI-SMS4 0x000FAC00 : Use group cipher suite 0x000FAC01 : WEP-40 0x000FAC02 : TKIP 0x000FAC04 : CCMP-default in an RSNA 0x000FAC05 : WEP-104 0x000FAC06 : wep-128 0x000FAC07 : tkip-ccmp 0x00E0FC01 : null (no encryption), only for open system authentication The cipher suite selector 00-0F-AC:4 (CCMP) shall be the default cipher suite value. The cipher suite selectors 00-0F-AC:1 (WEP-40) and 00-0F-AC:5 (WEP-104) are only valid as a group cipher suite in a transition security network (TSN) to allow pre-RSNA devices to join the BSS. Use of CCMP as the group cipher suite with TKIP as the pairwise cipher suite shall not be supported. NOTE?If the STAs can support CCMP, then there is no need for a weaker data confidentiality protocol. The cipher suite selector 00-0F-AC:0 (Use group cipher suite) is only valid as the pairwise cipher suite. An AP may specify the selector 00-0F-AC:0 (Use group cipher suite) for a pairwise cipher suite if it does not cipher selection, this shall be the only pairwise cipher selection the AP advertises. If CCMP is enabled, then the AP supports pairwise keys, and thus the suite selector 00-0F-AC:0 (Use group cipher suite) shall not be a valid option. ')
hwWsecAuthPairwiseCipherSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwWsecAuthPairwiseCipherSize.setStatus('current')
if mibBuilder.loadTexts: hwWsecAuthPairwiseCipherSize.setDescription('This object indicates the length in bits of the pairwise cipher key. This should be 256 for TKIP and 128 for CCMP.')
hwWsecAuthUnicastRekeyMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("timeBased", 2), ("packetBased", 3), ("timepacketBased", 4))).clone('timeBased')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWsecAuthUnicastRekeyMethod.setStatus('current')
if mibBuilder.loadTexts: hwWsecAuthUnicastRekeyMethod.setDescription('This object selects a mechanism for rekeying the WAPI/RSNA USK. The default is time-based, once per day. Rekeying the USK is only applicable to an entity acting in the AE or ASUE role.')
hwWsecAuthUnicastRekeyTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 4, 1, 10), Unsigned32().clone(86400)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWsecAuthUnicastRekeyTime.setStatus('current')
if mibBuilder.loadTexts: hwWsecAuthUnicastRekeyTime.setDescription('The time in seconds after which the WAPI/RSNA USK shall be refreshed. The timer shall start at the moment the USK was set using the MLME-SETWPIKEYS.request primitive.')
hwWsecAuthUnicastRekeyPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 4, 1, 11), Unsigned32()).setUnits('1000 packets').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWsecAuthUnicastRekeyPackets.setStatus('current')
if mibBuilder.loadTexts: hwWsecAuthUnicastRekeyPackets.setDescription('A packet count (in 1000s of packets) after which the WAPI/RSNA USK shall be refreshed. The packet counter shall start at the moment the USK was set using the MLME-SETWPIKEYS.request primitive and it shall count all packets encrypted using the current USK.')
hwWsecAuthMulticastCipher = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("wpiSms4", 1), ("wep40", 2), ("wep104", 3), ("tkip", 4), ("ccmp", 5), ("null", 6), ("tkipCcmp", 7), ("wep128", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWsecAuthMulticastCipher.setStatus('current')
if mibBuilder.loadTexts: hwWsecAuthMulticastCipher.setDescription('This object indicates the multicast cipher suite that this entity must adopt. The WAPI/RSNA information element shall adopt the value of this variable, which contains a 3-octet OUI and a one-octet cipher suite identifier. 0x00147201 : WPI-SMS4 0x000FAC01 : WEP-40 0x000FAC02 : TKIP 0x000FAC04 : CCMP-default in an RSNA 0x000FAC05 : WEP-104 0x000FAC06 : wep-128 0x000FAC07 : tkip-ccmp 0x00E0FC01 : null (no encryption), only for open system authentication ')
hwWsecAuthMulticastCipherSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 4, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwWsecAuthMulticastCipherSize.setStatus('current')
if mibBuilder.loadTexts: hwWsecAuthMulticastCipherSize.setDescription('This object indicates the length in bit of the multicast cipher key. This should be 256 for in SMS4. The former 128bits is the encryption key and the latter 128bits is the message integrity check key. This should be 256 for in TKIP. The former 128bits is the encryption key and the latter 128bits is the message integrity check key. This should be 128 for in CCMP. The 128bits is the encryption key and the message integrity check key. This should be 40 for in WEP-40. The 40bits is the encryption key. This should be 40 for in WEP-104. The 104bits is the encryption key. This should be 40 for in WEP-128. The 128bits is the encryption key. ')
hwWsecAuthMulticastRekeyMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 4, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("timeBased", 2), ("packetBased", 3), ("timepacketBased", 4))).clone('timeBased')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWsecAuthMulticastRekeyMethod.setStatus('current')
if mibBuilder.loadTexts: hwWsecAuthMulticastRekeyMethod.setDescription('This object selects a mechanism for rekeying the WAPI/RSNA MSK. The default is time-based, once per day. Rekeying the MSK is only applicable to an entity acting in the Authenticator role.')
hwWsecAuthMulticastRekeyTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 4, 1, 15), Unsigned32().clone(86400)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWsecAuthMulticastRekeyTime.setStatus('current')
if mibBuilder.loadTexts: hwWsecAuthMulticastRekeyTime.setDescription('The time in seconds after which the WAPI/RSNA MSK shall be refreshed. The timer shall start at the moment the MSK was set using the MLME-SETWPIKEYS.request primitive.')
hwWsecAuthMulticastRekeyPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 4, 1, 16), Unsigned32()).setUnits('1000 packets').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWsecAuthMulticastRekeyPackets.setStatus('current')
if mibBuilder.loadTexts: hwWsecAuthMulticastRekeyPackets.setDescription('A packet count (in 1000s of packets) after which the WAPI/RSNA MSK shall be refreshed. The packet counter shall start at the moment the MSK was set using the MLME-SETWPIKEYS.request primitive and it shall count all packets encrypted using the current MSK.')
hwWsecAuthMulticastRekeyStrict = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 4, 1, 17), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWsecAuthMulticastRekeyStrict.setStatus('current')
if mibBuilder.loadTexts: hwWsecAuthMulticastRekeyStrict.setDescription('This object signals that the MSK shall be refreshed whenever a STA leaves the BSS that possesses the MSK.')
hwWsecAuthPSKValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 4, 1, 18), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWsecAuthPSKValue.setStatus('current')
if mibBuilder.loadTexts: hwWsecAuthPSKValue.setDescription('The PSK for when WAPI/RSNA in PSK mode is the selected AKM suite. In that case, the BK/PMK will obtain its value from this object. This object is logically write-only. Reading this variable shall return unsuccessful status or null or zero. WAPI need 16 byte Hex, RSNA need 32 byte Hex. User should input Hex data for this node.')
hwWsecAuthPSKPassPhrase = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 4, 1, 19), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWsecAuthPSKPassPhrase.setStatus('current')
if mibBuilder.loadTexts: hwWsecAuthPSKPassPhrase.setDescription('The PSK, for when WAPI/RSNA in PSK mode is the selected AKM suite, is configured by hwWsecAuthPSKValue. An alternative manner of setting the PSK uses the password-to-key algorithm. This variable provides a means to enter a pass-phrase. When this object is written, the WAPI/RSNA entity shall use the password-to-key algorithm to derive a pre-shared and populate hwWsecAuthPSKValue with this key. This object is logically write-only. Reading this variable shall return unsuccessful status or null or zero.')
hwWsecAuthCertificateUpdateCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 4, 1, 20), Unsigned32().clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWsecAuthCertificateUpdateCount.setStatus('current')
if mibBuilder.loadTexts: hwWsecAuthCertificateUpdateCount.setDescription('The number of times messages in the WAPI Certificate Authentication Handshake protocol will be retried per Certificate Authentication Handshake attempt.')
hwWsecAuthMulticastUpdateCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 4, 1, 21), Unsigned32().clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWsecAuthMulticastUpdateCount.setStatus('current')
if mibBuilder.loadTexts: hwWsecAuthMulticastUpdateCount.setDescription('The number of times Message 1 in the WAPI Multicast Key Announcement Handshake will be retried per MSK Handshake attempt. The number of times Message 1 in the RSNA Group Key Handshake will be retried per GTK Handshake attempt. ')
hwWsecAuthUnicastUpdateCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 4, 1, 22), Unsigned32().clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWsecAuthUnicastUpdateCount.setStatus('current')
if mibBuilder.loadTexts: hwWsecAuthUnicastUpdateCount.setDescription('The number of times Message 1 and Message 3 in the WAPI Unicast Key Negotiation Handshake will be retried per USK Handshake attempt. The number of times Message 1 and Message 3 in the RSNA 4-Way Handshake will be retried per 4-Way Handshake attempt. ')
hwWsecAuthBKLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 4, 1, 23), Unsigned32().clone(43200)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWsecAuthBKLifetime.setStatus('current')
if mibBuilder.loadTexts: hwWsecAuthBKLifetime.setDescription('The maximum lifetime of a BK in the BK cache.')
hwWsecAuthBKReauthThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 4, 1, 24), Unsigned32().clone(70)).setUnits('percentage').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWsecAuthBKReauthThreshold.setStatus('current')
if mibBuilder.loadTexts: hwWsecAuthBKReauthThreshold.setDescription('The percentage of the BK lifetime that should expire before a WAI/RSNA re-authentication occurs.')
hwWsecAuthSATimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 4, 1, 25), Unsigned32().clone(60)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWsecAuthSATimeout.setStatus('current')
if mibBuilder.loadTexts: hwWsecAuthSATimeout.setDescription('The maximum time a security association shall take to set up.')
hwWsecAuthExcludeUnencrypted = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 4, 1, 26), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWsecAuthExcludeUnencrypted.setStatus('current')
if mibBuilder.loadTexts: hwWsecAuthExcludeUnencrypted.setDescription('When this attribute is TRUE, the STA shall not indicate at the MAC service interface received MSDUs that have the Protected Frame subfield of the Frame Control field equal to zero. When this attribute is FALSE, the STA may accept MSDUs that have the Protected Frame subfield of the Frame Control field equal to zero. The default value of this attribute shall be FALSE.')
hwWsecAuthDot1XMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 4, 1, 27), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWsecAuthDot1XMethod.setStatus('current')
if mibBuilder.loadTexts: hwWsecAuthDot1XMethod.setDescription(" Leaf don't sustain for V2R3 on 2012/11/26. ")
hwWsecAuthControlledAuthControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 4, 1, 28), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwWsecAuthControlledAuthControl.setStatus('current')
if mibBuilder.loadTexts: hwWsecAuthControlledAuthControl.setDescription("This attribute indicates whether the entity enable the authentication. If the value is '0' which means 'authentication disabled', the state of the controlled port shall be set to 'authenticated'; else the value is '1' which means 'authentication enabled', the state of the controlled port shall be based on the hwWsecAuthControlledPortControl.")
hwWsecAuthControlledPortControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 4, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwWsecAuthControlledPortControl.setStatus('current')
if mibBuilder.loadTexts: hwWsecAuthControlledPortControl.setDescription("This attribute, when the hwWsecAuthControlledAuthControl is set to true, shall be effective and indicate the methods by which the port is controlled. If the value is '0' which means 'auto', the state of the controlled port shall be based on the result of the authentication; else the value is '1' which means 'force unauthenticated', the state of the controlled port shall be unconditionally set to 'unauthenticated'.")
hwWsecAuthOptionalImplemented = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 4, 1, 30), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwWsecAuthOptionalImplemented.setStatus('current')
if mibBuilder.loadTexts: hwWsecAuthOptionalImplemented.setDescription('This attribute, when true, shall indicate that the WAPI, WPA, RSNA option is implemented; else, this attribute shall be false.')
hwWsecStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 5), )
if mibBuilder.loadTexts: hwWsecStatsTable.setStatus('current')
if mibBuilder.loadTexts: hwWsecStatsTable.setDescription('This table maintains per-STA statistics in an RSN. The entry with hwWsecStatsSTAAddress set to FF-FF-FF-FF-FF-FF shall contain statistics for broadcast/multicast traffic.')
hwWsecStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 5, 1), ).setIndexNames((0, "HUAWEI-WLAN-SECURITY-MIB", "hwWsecStatsSTAAddress"))
if mibBuilder.loadTexts: hwWsecStatsEntry.setStatus('current')
if mibBuilder.loadTexts: hwWsecStatsEntry.setDescription('An entry in the hwWsecStatsTable.')
hwWsecStatsSTAAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 5, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwWsecStatsSTAAddress.setStatus('current')
if mibBuilder.loadTexts: hwWsecStatsSTAAddress.setDescription('The MAC address of the STA to which the statistics in this conceptual row belong.')
hwWsecStatsVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwWsecStatsVersion.setStatus('current')
if mibBuilder.loadTexts: hwWsecStatsVersion.setDescription('The RSNA version with which the STA associated.')
hwWsecStatsBKIDUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 5, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwWsecStatsBKIDUsed.setStatus('current')
if mibBuilder.loadTexts: hwWsecStatsBKIDUsed.setDescription('The selector of the last BKID of WAPI used in the last Unicast Key Negotiation Handshake. The selector of the last PMKID of RSNA used in the last 4-Way Handshake.')
hwWsecStatsAuthenticationSuiteSelected = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("wapiCertification", 1), ("wapiPreShareKey", 2), ("wpa18021x", 3), ("wpa1PreShareKey", 4), ("wpa28021x", 5), ("wpa2PreShareKey", 6), ("shareKey", 7), ("openSystem", 8), ("wpa1wpa2PreShareKey", 9), ("wpa1wpa28021x", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwWsecStatsAuthenticationSuiteSelected.setStatus('current')
if mibBuilder.loadTexts: hwWsecStatsAuthenticationSuiteSelected.setDescription('The selector of the last AKM suite negotiated.')
hwWsecStatsUnicastCipherSelected = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("wpiSms4", 1), ("wep40", 2), ("wep104", 3), ("tkip", 4), ("ccmp", 5), ("null", 6), ("tkipCcmp", 7), ("wep128", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwWsecStatsUnicastCipherSelected.setStatus('current')
if mibBuilder.loadTexts: hwWsecStatsUnicastCipherSelected.setDescription('The selector of the last unicast cipher suite negotiated.')
hwWsecStatsMulticastCipherSelected = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("wpiSms4", 1), ("wep40", 2), ("wep104", 3), ("tkip", 4), ("ccmp", 5), ("null", 6), ("tkipCcmp", 7), ("wep128", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwWsecStatsMulticastCipherSelected.setStatus('current')
if mibBuilder.loadTexts: hwWsecStatsMulticastCipherSelected.setDescription('The selector of the last multicast cipher suite negotiated')
hwWsecStatsAuthenticationSuiteRequested = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("wapiCertification", 1), ("wapiPreShareKey", 2), ("wpa18021x", 3), ("wpa1PreShareKey", 4), ("wpa28021x", 5), ("wpa2PreShareKey", 6), ("shareKey", 7), ("openSystem", 8), ("wpa1wpa2PreShareKey", 9), ("wpa1wpa28021x", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwWsecStatsAuthenticationSuiteRequested.setStatus('current')
if mibBuilder.loadTexts: hwWsecStatsAuthenticationSuiteRequested.setDescription('The selector of the last AKM suite requested.')
hwWsecStatsUnicastCipherRequested = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("wpiSms4", 1), ("wep40", 2), ("wep104", 3), ("tkip", 4), ("ccmp", 5), ("null", 6), ("tkipCcmp", 7), ("wep128", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwWsecStatsUnicastCipherRequested.setStatus('current')
if mibBuilder.loadTexts: hwWsecStatsUnicastCipherRequested.setDescription('The selector of the last unicast cipher suite requested')
hwWsecStatsMulticastCipherRequested = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 5, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("wpiSms4", 1), ("wep40", 2), ("wep104", 3), ("tkip", 4), ("ccmp", 5), ("null", 6), ("tkipCcmp", 7), ("wep128", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwWsecStatsMulticastCipherRequested.setStatus('current')
if mibBuilder.loadTexts: hwWsecStatsMulticastCipherRequested.setDescription('The selector of the last multicast cipher suite requested.')
hwWsecStatsWEPICVErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 5, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwWsecStatsWEPICVErrorCount.setStatus('current')
if mibBuilder.loadTexts: hwWsecStatsWEPICVErrorCount.setDescription('This counter shall increment when a frame is received with the Protected Frame subfield of the Frame Control field set to one and the value of the ICV as received in the frame does not match the ICV value that is calculated for the contents of the received frame. ICV errors for TKIP are not counted in this variable but in hwWsecStatsTKIPICVErrors.')
hwWsecStatsWEPExcludedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 5, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwWsecStatsWEPExcludedCount.setStatus('current')
if mibBuilder.loadTexts: hwWsecStatsWEPExcludedCount.setDescription('This counter shall increment when a frame is received with the Protected Frame subfield of the Frame Control field set to zero and the value of hwWsecProfileExcludeUnencrypted causes that frame to be discarded.')
hwWsecStatsWEPUndecryptableCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 5, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwWsecStatsWEPUndecryptableCount.setStatus('current')
if mibBuilder.loadTexts: hwWsecStatsWEPUndecryptableCount.setDescription("This counter shall increment when a frame is received with the Protected Frame subfield of the Frame Control field set to one and the WEPOn value for the key mapped to the transmitter's MAC address indicates that the frame should not have been encrypted or that frame is discarded due to the receiving STA not implementing the privacy option.")
hwWsecStatsTKIPICVErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 5, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwWsecStatsTKIPICVErrors.setStatus('current')
if mibBuilder.loadTexts: hwWsecStatsTKIPICVErrors.setDescription('Counts the number of TKIP ICV errors encountered when decrypting packets for the STA.')
hwWsecStatsTKIPLocalMICFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 5, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwWsecStatsTKIPLocalMICFailures.setStatus('current')
if mibBuilder.loadTexts: hwWsecStatsTKIPLocalMICFailures.setDescription('Counts the number of MIC failures encountered when checking the integrity of packets received from the STA at this entity.')
hwWsecStatsTKIPRemoteMICFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 5, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwWsecStatsTKIPRemoteMICFailures.setStatus('current')
if mibBuilder.loadTexts: hwWsecStatsTKIPRemoteMICFailures.setDescription('Counts the number of MIC failures encountered by the STA identified by dot11StatsSTAAddress and reported back to this entity.')
hwWsecStatsTKIPReplays = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 5, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwWsecStatsTKIPReplays.setStatus('current')
if mibBuilder.loadTexts: hwWsecStatsTKIPReplays.setDescription('Counts the number of TKIP replay errors detected.')
hwWsecStatsCCMPReplays = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 5, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwWsecStatsCCMPReplays.setStatus('current')
if mibBuilder.loadTexts: hwWsecStatsCCMPReplays.setDescription('The number of received CCMP MPDUs discarded by the replay mechanism.')
hwWsecStatsCCMPDecryptErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 5, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwWsecStatsCCMPDecryptErrors.setStatus('current')
if mibBuilder.loadTexts: hwWsecStatsCCMPDecryptErrors.setDescription('The number of received MPDUs discarded by the CCMP decryption algorithm.')
hwWsecStatsWAISignatureErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 5, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwWsecStatsWAISignatureErrors.setStatus('current')
if mibBuilder.loadTexts: hwWsecStatsWAISignatureErrors.setDescription('This counter shall increment when the signature in the received WAI packet is wrong.')
hwWsecStatsWAIHMACErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 5, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwWsecStatsWAIHMACErrors.setStatus('current')
if mibBuilder.loadTexts: hwWsecStatsWAIHMACErrors.setDescription('This counter shall increment when the message authentication code in the received WAI packet is wrong.')
hwWsecStatsWAIAuthenticationResultFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 5, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwWsecStatsWAIAuthenticationResultFailures.setStatus('current')
if mibBuilder.loadTexts: hwWsecStatsWAIAuthenticationResultFailures.setDescription('This counter shall increment when the WAI authentication is unsuccessful.')
hwWsecStatsWAIDiscardCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 5, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwWsecStatsWAIDiscardCounters.setStatus('current')
if mibBuilder.loadTexts: hwWsecStatsWAIDiscardCounters.setDescription('This counter shall increment when the received WAI packet is discarded.')
hwWsecStatsWAITimeoutCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 5, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwWsecStatsWAITimeoutCounters.setStatus('current')
if mibBuilder.loadTexts: hwWsecStatsWAITimeoutCounters.setDescription('This counter shall increment when the WAI packet is timeout.')
hwWsecStatsWAIFormatErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 5, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwWsecStatsWAIFormatErrors.setStatus('current')
if mibBuilder.loadTexts: hwWsecStatsWAIFormatErrors.setDescription('This counter shall increment when there exists format error in the WAI packet.')
hwWsecStatsWAICertificateHandshakeFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 5, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwWsecStatsWAICertificateHandshakeFailures.setStatus('current')
if mibBuilder.loadTexts: hwWsecStatsWAICertificateHandshakeFailures.setDescription('This counter shall increment when the WAI certificate authentication is unsuccessful.')
hwWsecStatsWAIUnicastHandshakeFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 5, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwWsecStatsWAIUnicastHandshakeFailures.setStatus('current')
if mibBuilder.loadTexts: hwWsecStatsWAIUnicastHandshakeFailures.setDescription('This counter shall increment when the WAI unicast key negotiation process is unsuccessful.')
hwWsecStatsWAIMulticastHandshakeFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 5, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwWsecStatsWAIMulticastHandshakeFailures.setStatus('current')
if mibBuilder.loadTexts: hwWsecStatsWAIMulticastHandshakeFailures.setDescription('This counter shall increment when the WAI multicast key announcement process is unsuccessful.')
hwWsecStatsWPIReplayCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 5, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwWsecStatsWPIReplayCounter.setStatus('current')
if mibBuilder.loadTexts: hwWsecStatsWPIReplayCounter.setDescription('The number of received WPI MPDUs discarded by the replay mechanism.')
hwWsecStatsWPIDecryptableErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 5, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwWsecStatsWPIDecryptableErrors.setStatus('current')
if mibBuilder.loadTexts: hwWsecStatsWPIDecryptableErrors.setDescription('The number of received MPDUs discarded by the WPI decryption algorithm because of no valid key.')
hwWsecStatsWPIMICErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 5, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwWsecStatsWPIMICErrors.setStatus('current')
if mibBuilder.loadTexts: hwWsecStatsWPIMICErrors.setDescription('The number of received MPDUs discarded because of the MIC check error during the WPI decryption.')
hwWsecStatsControlledPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 5, 1, 31), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwWsecStatsControlledPortStatus.setStatus('current')
if mibBuilder.loadTexts: hwWsecStatsControlledPortStatus.setDescription("This attribute indicates the state of the controlled port in a authenticator subsystem. If value is '1', the state is set to'authenticated'; else, the state is set to 'unauthenticated'.")
hwWsecStatsNumberOfPTKSAReplayCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 5, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwWsecStatsNumberOfPTKSAReplayCounters.setStatus('current')
if mibBuilder.loadTexts: hwWsecStatsNumberOfPTKSAReplayCounters.setDescription('Specifies the number of PTKSA replay counters per association: 0 ?> 1 replay counter, 1 ?> 2 replay counters, 2 ?> 4 replay counters, 3 ?> 16 replay counters')
hwWsecStatsNumberOfGTKSAReplayCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 5, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwWsecStatsNumberOfGTKSAReplayCounters.setStatus('current')
if mibBuilder.loadTexts: hwWsecStatsNumberOfGTKSAReplayCounters.setDescription('Specifies the number of GTKSA replay counters per association: 0 ?> 1 replay counter, 1 ?> 2 replay counters, 2 ?> 4 replay counters, 3 ?> 16 replay counters')
hwWsecStatsTKIPCounterMeasuresInvoked = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 5, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwWsecStatsTKIPCounterMeasuresInvoked.setStatus('current')
if mibBuilder.loadTexts: hwWsecStatsTKIPCounterMeasuresInvoked.setDescription('Counts the number of times that a TKIP MIC failure occurred two times within 60 s and TKIP countermeasures were invoked. This attribute counts both local and remote MIC failure events reported to this STA. It increments every time TKIP countermeasures are invoked')
hwWsecStatsWpa4WayHandshakeFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 5, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwWsecStatsWpa4WayHandshakeFailures.setStatus('current')
if mibBuilder.loadTexts: hwWsecStatsWpa4WayHandshakeFailures.setDescription('Counts the number of 4-Way Handshake failures.')
hwWsecBatchProfileInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 6))
hwWsecBatchProfileStartNumber = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 6, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWsecBatchProfileStartNumber.setStatus('current')
if mibBuilder.loadTexts: hwWsecBatchProfileStartNumber.setDescription("The security profile start number in batch operation. This node is used with node hwWsecBatchProfileWantNumber, for example, hwWsecBatchProfileStartNumber is set to one, and hwWsecBatchProfileWantNumber is set to three, then get the node hwWsecBatchProfileReturnNumber,hwWsecBatchProfileName, that means start from the first security profile, get three security profile's name list. if it dose not exist three security profile, the hwWsecBatchProfileReturnNumber will be the real security profile number, otherwise, it is equal to hwWsecBatchProfileWantNumber.")
hwWsecBatchProfileWantNumber = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 6, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWsecBatchProfileWantNumber.setStatus('current')
if mibBuilder.loadTexts: hwWsecBatchProfileWantNumber.setDescription("The security profile number that want to get in batch operation.This node is used with node hwWsecBatchProfileWantNumber, for example, hwWsecBatchProfileStartNumber is set to one, and hwWsecBatchProfileWantNumber is set to three, then get the node hwWsecBatchProfileReturnNumber,hwWsecBatchProfileName, that means start from the first security profile, get three security profile's name list. if it dose not exist three security profile, the hwWsecBatchProfileReturnNumber will be the real security profile number, otherwise, it is equal to hwWsecBatchProfileWantNumber.")
hwWsecBatchProfileReturnNumber = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwWsecBatchProfileReturnNumber.setStatus('current')
if mibBuilder.loadTexts: hwWsecBatchProfileReturnNumber.setDescription('The ess number get in batch operation.')
hwWsecBatchProfileName = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 6, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwWsecBatchProfileName.setStatus('current')
if mibBuilder.loadTexts: hwWsecBatchProfileName.setDescription("The names of security profile which are determined by node hwWsecBatchProfileStratNumber and node hwWsecBatchProfileWantNumber. each hwWsecProfileName name is divided by '?'.")
hwWsecNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 9))
hwWsecNotify = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 9, 1))
hwStaAuthErrorNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 9, 1, 1)).setObjects(("HUAWEI-WLAN-DEVICE-MIB", "hwApIndex"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApMac"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioID"), ("HUAWEI-WLAN-SECURITY-MIB", "hwStaAssocBssid"), ("HUAWEI-WLAN-SERVICE-MIB", "hwWlanServiceEssSsid"), ("HUAWEI-WLAN-SERVICE-MIB", "hwWlanServiceStaMac"), ("HUAWEI-WLAN-SECURITY-MIB", "hwStaAuthenticationMode"), ("HUAWEI-WLAN-SECURITY-MIB", "hwStaFailCodeType"), ("HUAWEI-WLAN-SECURITY-MIB", "hwStaAuthenticationFailCause"), ("HUAWEI-WLAN-SECURITY-MIB", "hwStaAuthenticationFailCauseStr"))
if mibBuilder.loadTexts: hwStaAuthErrorNotify.setStatus('current')
if mibBuilder.loadTexts: hwStaAuthErrorNotify.setDescription('Description.')
hwStaAssociationFailNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 9, 1, 2)).setObjects(("HUAWEI-WLAN-DEVICE-MIB", "hwApIndex"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApMac"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioID"), ("HUAWEI-WLAN-SECURITY-MIB", "hwStaAssocBssid"), ("HUAWEI-WLAN-SERVICE-MIB", "hwWlanServiceEssSsid"), ("HUAWEI-WLAN-SERVICE-MIB", "hwWlanServiceStaMac"), ("HUAWEI-WLAN-SECURITY-MIB", "hwStaFailCodeType"), ("HUAWEI-WLAN-SECURITY-MIB", "hwStaAssociationFailCause"), ("HUAWEI-WLAN-SECURITY-MIB", "hwStaAssociationFailCauseStr"))
if mibBuilder.loadTexts: hwStaAssociationFailNotify.setStatus('current')
if mibBuilder.loadTexts: hwStaAssociationFailNotify.setDescription('Description.')
hwUserWithInvalidCerficationInbreakNetworkNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 9, 1, 3)).setObjects(("HUAWEI-WLAN-DEVICE-MIB", "hwApIndex"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioID"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApMac"), ("HUAWEI-WLAN-SECURITY-MIB", "hwStaAssocBssid"), ("HUAWEI-WLAN-SERVICE-MIB", "hwWlanServiceEssSsid"), ("HUAWEI-WLAN-SERVICE-MIB", "hwWlanServiceStaMac"))
if mibBuilder.loadTexts: hwUserWithInvalidCerficationInbreakNetworkNotify.setStatus('current')
if mibBuilder.loadTexts: hwUserWithInvalidCerficationInbreakNetworkNotify.setDescription('Description.')
hwStationRepititiveAttackNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 9, 1, 4)).setObjects(("HUAWEI-WLAN-DEVICE-MIB", "hwApIndex"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioID"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApMac"), ("HUAWEI-WLAN-SECURITY-MIB", "hwStaAssocBssid"), ("HUAWEI-WLAN-SERVICE-MIB", "hwWlanServiceEssSsid"), ("HUAWEI-WLAN-SERVICE-MIB", "hwWlanServiceStaMac"))
if mibBuilder.loadTexts: hwStationRepititiveAttackNotify.setStatus('current')
if mibBuilder.loadTexts: hwStationRepititiveAttackNotify.setDescription('Description.')
hwTamperAttackNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 9, 1, 5)).setObjects(("HUAWEI-WLAN-DEVICE-MIB", "hwApIndex"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioID"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApMac"), ("HUAWEI-WLAN-SECURITY-MIB", "hwStaAssocBssid"), ("HUAWEI-WLAN-SERVICE-MIB", "hwWlanServiceEssSsid"), ("HUAWEI-WLAN-SERVICE-MIB", "hwWlanServiceStaMac"))
if mibBuilder.loadTexts: hwTamperAttackNotify.setStatus('current')
if mibBuilder.loadTexts: hwTamperAttackNotify.setDescription('Description.')
hwLowSafeLevelAttackNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 9, 1, 6)).setObjects(("HUAWEI-WLAN-DEVICE-MIB", "hwApIndex"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioID"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApMac"), ("HUAWEI-WLAN-SECURITY-MIB", "hwStaAssocBssid"), ("HUAWEI-WLAN-SERVICE-MIB", "hwWlanServiceEssSsid"), ("HUAWEI-WLAN-SERVICE-MIB", "hwWlanServiceStaMac"))
if mibBuilder.loadTexts: hwLowSafeLevelAttackNotify.setStatus('current')
if mibBuilder.loadTexts: hwLowSafeLevelAttackNotify.setDescription('Description.')
hwAddressRedirectionAttackNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 9, 1, 7)).setObjects(("HUAWEI-WLAN-DEVICE-MIB", "hwApIndex"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioID"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApMac"), ("HUAWEI-WLAN-SECURITY-MIB", "hwStaAssocBssid"), ("HUAWEI-WLAN-SERVICE-MIB", "hwWlanServiceEssSsid"), ("HUAWEI-WLAN-SERVICE-MIB", "hwWlanServiceStaMac"))
if mibBuilder.loadTexts: hwAddressRedirectionAttackNotify.setStatus('current')
if mibBuilder.loadTexts: hwAddressRedirectionAttackNotify.setDescription('Description.')
hwWepIDConflictNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 9, 1, 8)).setObjects(("HUAWEI-WLAN-SECURITY-MIB", "hwWepIDConflictTrapAPMAC"), ("HUAWEI-WLAN-SECURITY-MIB", "hwWepIDConflictTrapAPID"), ("HUAWEI-WLAN-SECURITY-MIB", "hwWepIDConflictTrapRadioId"), ("HUAWEI-WLAN-SECURITY-MIB", "hwWepIDConflictTrapPreSSID"), ("HUAWEI-WLAN-SECURITY-MIB", "hwWepIDConflictTrapCurrSSID"), ("HUAWEI-WLAN-SECURITY-MIB", "hwWepIDConflictTrapCipherIdx"))
if mibBuilder.loadTexts: hwWepIDConflictNotify.setStatus('current')
if mibBuilder.loadTexts: hwWepIDConflictNotify.setDescription('Description.')
hwStaAuthEncryptModeNotMatchNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 9, 1, 9)).setObjects(("HUAWEI-WLAN-DEVICE-MIB", "hwApIndex"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApMac"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioID"), ("HUAWEI-WLAN-SECURITY-MIB", "hwStaAssocBssid"), ("HUAWEI-WLAN-SERVICE-MIB", "hwWlanServiceEssSsid"), ("HUAWEI-WLAN-SERVICE-MIB", "hwWlanServiceStaMac"), ("HUAWEI-WLAN-SECURITY-MIB", "hwWlanStaAuthEncryptMode"), ("HUAWEI-WLAN-SECURITY-MIB", "hwWlanVapAuthEncryptMode"))
if mibBuilder.loadTexts: hwStaAuthEncryptModeNotMatchNotify.setStatus('current')
if mibBuilder.loadTexts: hwStaAuthEncryptModeNotMatchNotify.setDescription('Description.')
hwWsecNotifyObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 9, 2))
hwStaAuthenticationMode = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 9, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwStaAuthenticationMode.setStatus('current')
if mibBuilder.loadTexts: hwStaAuthenticationMode.setDescription('Description.')
hwStaAuthenticationFailCause = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 9, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwStaAuthenticationFailCause.setStatus('current')
if mibBuilder.loadTexts: hwStaAuthenticationFailCause.setDescription('Description.')
hwStaAssociationFailCause = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 9, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwStaAssociationFailCause.setStatus('current')
if mibBuilder.loadTexts: hwStaAssociationFailCause.setDescription('Description.')
hwStaAssocBssid = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 9, 2, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwStaAssocBssid.setStatus('current')
if mibBuilder.loadTexts: hwStaAssocBssid.setDescription('Description.')
hwStaFailCodeType = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 9, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reasonCode", 1), ("statusCode", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwStaFailCodeType.setStatus('current')
if mibBuilder.loadTexts: hwStaFailCodeType.setDescription('Description.')
hwWepIDConflictTrapAPMAC = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 9, 2, 6), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwWepIDConflictTrapAPMAC.setStatus('current')
if mibBuilder.loadTexts: hwWepIDConflictTrapAPMAC.setDescription('Description.')
hwWepIDConflictTrapAPID = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 9, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwWepIDConflictTrapAPID.setStatus('current')
if mibBuilder.loadTexts: hwWepIDConflictTrapAPID.setDescription('Description.')
hwWepIDConflictTrapRadioId = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 9, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwWepIDConflictTrapRadioId.setStatus('current')
if mibBuilder.loadTexts: hwWepIDConflictTrapRadioId.setDescription('Description.')
hwWepIDConflictTrapPreSSID = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 9, 2, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwWepIDConflictTrapPreSSID.setStatus('current')
if mibBuilder.loadTexts: hwWepIDConflictTrapPreSSID.setDescription('Description.')
hwWepIDConflictTrapCurrSSID = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 9, 2, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwWepIDConflictTrapCurrSSID.setStatus('current')
if mibBuilder.loadTexts: hwWepIDConflictTrapCurrSSID.setDescription('Description.')
hwWepIDConflictTrapCipherIdx = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 9, 2, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwWepIDConflictTrapCipherIdx.setStatus('current')
if mibBuilder.loadTexts: hwWepIDConflictTrapCipherIdx.setDescription('Description.')
hwWlanStaAuthEncryptMode = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 9, 2, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwWlanStaAuthEncryptMode.setStatus('current')
if mibBuilder.loadTexts: hwWlanStaAuthEncryptMode.setDescription('Description.')
hwWlanVapAuthEncryptMode = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 9, 2, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwWlanVapAuthEncryptMode.setStatus('current')
if mibBuilder.loadTexts: hwWlanVapAuthEncryptMode.setDescription('Description.')
hwStaAuthenticationFailCauseStr = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 9, 2, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwStaAuthenticationFailCauseStr.setStatus('current')
if mibBuilder.loadTexts: hwStaAuthenticationFailCauseStr.setDescription('Description.')
hwStaAssociationFailCauseStr = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 9, 2, 15), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwStaAssociationFailCauseStr.setStatus('current')
if mibBuilder.loadTexts: hwStaAssociationFailCauseStr.setDescription('Description.')
hwWlanSecurityObject = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 10))
hwWlanSecurityConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 11))
hwWlanSecurityCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 11, 1))
hwWlanSecurityCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 11, 1, 1)).setObjects(("HUAWEI-WLAN-SECURITY-MIB", "hwWsecProfileGroup"), ("HUAWEI-WLAN-SECURITY-MIB", "hwWsecWEPDefaultKeysGroup"), ("HUAWEI-WLAN-SECURITY-MIB", "hwWsecWEPKeyMappingsGroup"), ("HUAWEI-WLAN-SECURITY-MIB", "hwWsecAuthSuitesGroup"), ("HUAWEI-WLAN-SECURITY-MIB", "hwWsecStatsGroup"), ("HUAWEI-WLAN-SECURITY-MIB", "hwWsecBatchProfileInfoGroup"), ("HUAWEI-WLAN-SECURITY-MIB", "hwWsecNotifyGroup"), ("HUAWEI-WLAN-SECURITY-MIB", "hwWsecNotifyObjectsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwWlanSecurityCompliance = hwWlanSecurityCompliance.setStatus('current')
if mibBuilder.loadTexts: hwWlanSecurityCompliance.setDescription('Description.')
hwWlanSecurityObjectGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 11, 2))
hwWsecProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 11, 2, 1)).setObjects(("HUAWEI-WLAN-SECURITY-MIB", "hwWsecProfileName"), ("HUAWEI-WLAN-SECURITY-MIB", "hwWsecProfileWEPDataEncrypt"), ("HUAWEI-WLAN-SECURITY-MIB", "hwWsecProfileWEPDefaultKeyID"), ("HUAWEI-WLAN-SECURITY-MIB", "hwWsecProfileWEPKeyMappingLength"), ("HUAWEI-WLAN-SECURITY-MIB", "hwWsecProfileAsuIpAddr"), ("HUAWEI-WLAN-SECURITY-MIB", "hwWsecProfileCaCertFileName"), ("HUAWEI-WLAN-SECURITY-MIB", "hwWsecProfileAsuCertFileName"), ("HUAWEI-WLAN-SECURITY-MIB", "hwWsecProfileAcCertFileName"), ("HUAWEI-WLAN-SECURITY-MIB", "hwWsecProfileAcPrvKeyFileName"), ("HUAWEI-WLAN-SECURITY-MIB", "hwWsecProfileRsnaVersion"), ("HUAWEI-WLAN-SECURITY-MIB", "hwWsecProfileWapiVersion"), ("HUAWEI-WLAN-SECURITY-MIB", "hwWsecProfileRowStatus"), ("HUAWEI-WLAN-SECURITY-MIB", "hwWsecProfileCaPfxPassword"), ("HUAWEI-WLAN-SECURITY-MIB", "hwWsecProfileCaCertState"), ("HUAWEI-WLAN-SECURITY-MIB", "hwWsecProfileAsuPfxPassword"), ("HUAWEI-WLAN-SECURITY-MIB", "hwWsecProfileAsuCertState"), ("HUAWEI-WLAN-SECURITY-MIB", "hwWsecProfileAcPfxPassword"), ("HUAWEI-WLAN-SECURITY-MIB", "hwWsecProfileAcCertState"), ("HUAWEI-WLAN-SECURITY-MIB", "hwWsecProfileKeyPfxPassword"), ("HUAWEI-WLAN-SECURITY-MIB", "hwWsecProfileAsuType"), ("HUAWEI-WLAN-SECURITY-MIB", "hwWsecProfileWpaPtkRekeySwitch"), ("HUAWEI-WLAN-SECURITY-MIB", "hwWsecProfileWpa2PtkRekeySwitch"), ("HUAWEI-WLAN-SECURITY-MIB", "hwWsecProfileWpaWpa2PtkRekeySwitch"), ("HUAWEI-WLAN-SECURITY-MIB", "hwWsecProfileWpaPtkRekeyInterval"), ("HUAWEI-WLAN-SECURITY-MIB", "hwWsecProfileWpa2PtkRekeyInterval"), ("HUAWEI-WLAN-SECURITY-MIB", "hwWsecProfileWpaWpa2PtkRekeyInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwWsecProfileGroup = hwWsecProfileGroup.setStatus('current')
if mibBuilder.loadTexts: hwWsecProfileGroup.setDescription('Description.')
hwWsecWEPDefaultKeysGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 11, 2, 2)).setObjects(("HUAWEI-WLAN-SECURITY-MIB", "hwWsecWEPDefaultKeyValue"), ("HUAWEI-WLAN-SECURITY-MIB", "hwWsecWEPPassPhrase"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwWsecWEPDefaultKeysGroup = hwWsecWEPDefaultKeysGroup.setStatus('current')
if mibBuilder.loadTexts: hwWsecWEPDefaultKeysGroup.setDescription('Description.')
hwWsecWEPKeyMappingsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 11, 2, 3)).setObjects(("HUAWEI-WLAN-SECURITY-MIB", "hwWsecWEPKeyMappingAddress"), ("HUAWEI-WLAN-SECURITY-MIB", "hwWsecWEPKeyMappingWEPOn"), ("HUAWEI-WLAN-SECURITY-MIB", "hwWsecWEPKeyMappingValue"), ("HUAWEI-WLAN-SECURITY-MIB", "hwWsecWEPKeyMappingStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwWsecWEPKeyMappingsGroup = hwWsecWEPKeyMappingsGroup.setStatus('current')
if mibBuilder.loadTexts: hwWsecWEPKeyMappingsGroup.setDescription('Description.')
hwWsecAuthSuitesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 11, 2, 4)).setObjects(("HUAWEI-WLAN-SECURITY-MIB", "hwWsecAuthSuite"), ("HUAWEI-WLAN-SECURITY-MIB", "hwWsecAuthSuiteEnabled"), ("HUAWEI-WLAN-SECURITY-MIB", "hwWsecAuthPreauthenticationImplemented"), ("HUAWEI-WLAN-SECURITY-MIB", "hwWsecAuthPreauthenticationEnabled"), ("HUAWEI-WLAN-SECURITY-MIB", "hwWsecAuthUnicastKeysSupported"), ("HUAWEI-WLAN-SECURITY-MIB", "hwWsecAuthPairwiseCipher"), ("HUAWEI-WLAN-SECURITY-MIB", "hwWsecAuthPairwiseCipherSize"), ("HUAWEI-WLAN-SECURITY-MIB", "hwWsecAuthUnicastRekeyMethod"), ("HUAWEI-WLAN-SECURITY-MIB", "hwWsecAuthUnicastRekeyTime"), ("HUAWEI-WLAN-SECURITY-MIB", "hwWsecAuthUnicastRekeyPackets"), ("HUAWEI-WLAN-SECURITY-MIB", "hwWsecAuthMulticastCipher"), ("HUAWEI-WLAN-SECURITY-MIB", "hwWsecAuthMulticastCipherSize"), ("HUAWEI-WLAN-SECURITY-MIB", "hwWsecAuthMulticastRekeyMethod"), ("HUAWEI-WLAN-SECURITY-MIB", "hwWsecAuthMulticastRekeyTime"), ("HUAWEI-WLAN-SECURITY-MIB", "hwWsecAuthMulticastRekeyPackets"), ("HUAWEI-WLAN-SECURITY-MIB", "hwWsecAuthMulticastRekeyStrict"), ("HUAWEI-WLAN-SECURITY-MIB", "hwWsecAuthPSKValue"), ("HUAWEI-WLAN-SECURITY-MIB", "hwWsecAuthPSKPassPhrase"), ("HUAWEI-WLAN-SECURITY-MIB", "hwWsecAuthCertificateUpdateCount"), ("HUAWEI-WLAN-SECURITY-MIB", "hwWsecAuthMulticastUpdateCount"), ("HUAWEI-WLAN-SECURITY-MIB", "hwWsecAuthUnicastUpdateCount"), ("HUAWEI-WLAN-SECURITY-MIB", "hwWsecAuthBKLifetime"), ("HUAWEI-WLAN-SECURITY-MIB", "hwWsecAuthBKReauthThreshold"), ("HUAWEI-WLAN-SECURITY-MIB", "hwWsecAuthSATimeout"), ("HUAWEI-WLAN-SECURITY-MIB", "hwWsecAuthExcludeUnencrypted"), ("HUAWEI-WLAN-SECURITY-MIB", "hwWsecAuthDot1XMethod"), ("HUAWEI-WLAN-SECURITY-MIB", "hwWsecAuthControlledAuthControl"), ("HUAWEI-WLAN-SECURITY-MIB", "hwWsecAuthControlledPortControl"), ("HUAWEI-WLAN-SECURITY-MIB", "hwWsecAuthOptionalImplemented"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwWsecAuthSuitesGroup = hwWsecAuthSuitesGroup.setStatus('current')
if mibBuilder.loadTexts: hwWsecAuthSuitesGroup.setDescription('Description.')
hwWsecStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 11, 2, 5)).setObjects(("HUAWEI-WLAN-SECURITY-MIB", "hwWsecStatsSTAAddress"), ("HUAWEI-WLAN-SECURITY-MIB", "hwWsecStatsVersion"), ("HUAWEI-WLAN-SECURITY-MIB", "hwWsecStatsBKIDUsed"), ("HUAWEI-WLAN-SECURITY-MIB", "hwWsecStatsAuthenticationSuiteSelected"), ("HUAWEI-WLAN-SECURITY-MIB", "hwWsecStatsUnicastCipherSelected"), ("HUAWEI-WLAN-SECURITY-MIB", "hwWsecStatsMulticastCipherSelected"), ("HUAWEI-WLAN-SECURITY-MIB", "hwWsecStatsAuthenticationSuiteRequested"), ("HUAWEI-WLAN-SECURITY-MIB", "hwWsecStatsUnicastCipherRequested"), ("HUAWEI-WLAN-SECURITY-MIB", "hwWsecStatsMulticastCipherRequested"), ("HUAWEI-WLAN-SECURITY-MIB", "hwWsecStatsWEPICVErrorCount"), ("HUAWEI-WLAN-SECURITY-MIB", "hwWsecStatsWEPExcludedCount"), ("HUAWEI-WLAN-SECURITY-MIB", "hwWsecStatsWEPUndecryptableCount"), ("HUAWEI-WLAN-SECURITY-MIB", "hwWsecStatsTKIPICVErrors"), ("HUAWEI-WLAN-SECURITY-MIB", "hwWsecStatsTKIPLocalMICFailures"), ("HUAWEI-WLAN-SECURITY-MIB", "hwWsecStatsTKIPRemoteMICFailures"), ("HUAWEI-WLAN-SECURITY-MIB", "hwWsecStatsTKIPReplays"), ("HUAWEI-WLAN-SECURITY-MIB", "hwWsecStatsCCMPReplays"), ("HUAWEI-WLAN-SECURITY-MIB", "hwWsecStatsCCMPDecryptErrors"), ("HUAWEI-WLAN-SECURITY-MIB", "hwWsecStatsWAISignatureErrors"), ("HUAWEI-WLAN-SECURITY-MIB", "hwWsecStatsWAIHMACErrors"), ("HUAWEI-WLAN-SECURITY-MIB", "hwWsecStatsWAIAuthenticationResultFailures"), ("HUAWEI-WLAN-SECURITY-MIB", "hwWsecStatsWAIDiscardCounters"), ("HUAWEI-WLAN-SECURITY-MIB", "hwWsecStatsWAITimeoutCounters"), ("HUAWEI-WLAN-SECURITY-MIB", "hwWsecStatsWAIFormatErrors"), ("HUAWEI-WLAN-SECURITY-MIB", "hwWsecStatsWAICertificateHandshakeFailures"), ("HUAWEI-WLAN-SECURITY-MIB", "hwWsecStatsWAIUnicastHandshakeFailures"), ("HUAWEI-WLAN-SECURITY-MIB", "hwWsecStatsWAIMulticastHandshakeFailures"), ("HUAWEI-WLAN-SECURITY-MIB", "hwWsecStatsWPIReplayCounter"), ("HUAWEI-WLAN-SECURITY-MIB", "hwWsecStatsWPIDecryptableErrors"), ("HUAWEI-WLAN-SECURITY-MIB", "hwWsecStatsWPIMICErrors"), ("HUAWEI-WLAN-SECURITY-MIB", "hwWsecStatsControlledPortStatus"), ("HUAWEI-WLAN-SECURITY-MIB", "hwWsecStatsNumberOfPTKSAReplayCounters"), ("HUAWEI-WLAN-SECURITY-MIB", "hwWsecStatsNumberOfGTKSAReplayCounters"), ("HUAWEI-WLAN-SECURITY-MIB", "hwWsecStatsTKIPCounterMeasuresInvoked"), ("HUAWEI-WLAN-SECURITY-MIB", "hwWsecStatsWpa4WayHandshakeFailures"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwWsecStatsGroup = hwWsecStatsGroup.setStatus('current')
if mibBuilder.loadTexts: hwWsecStatsGroup.setDescription('Description.')
hwWsecBatchProfileInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 11, 2, 6)).setObjects(("HUAWEI-WLAN-SECURITY-MIB", "hwWsecBatchProfileStartNumber"), ("HUAWEI-WLAN-SECURITY-MIB", "hwWsecBatchProfileWantNumber"), ("HUAWEI-WLAN-SECURITY-MIB", "hwWsecBatchProfileReturnNumber"), ("HUAWEI-WLAN-SECURITY-MIB", "hwWsecBatchProfileName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwWsecBatchProfileInfoGroup = hwWsecBatchProfileInfoGroup.setStatus('current')
if mibBuilder.loadTexts: hwWsecBatchProfileInfoGroup.setDescription('Description.')
hwWsecNotifyGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 11, 2, 7)).setObjects(("HUAWEI-WLAN-SECURITY-MIB", "hwStaAuthErrorNotify"), ("HUAWEI-WLAN-SECURITY-MIB", "hwStaAssociationFailNotify"), ("HUAWEI-WLAN-SECURITY-MIB", "hwUserWithInvalidCerficationInbreakNetworkNotify"), ("HUAWEI-WLAN-SECURITY-MIB", "hwStationRepititiveAttackNotify"), ("HUAWEI-WLAN-SECURITY-MIB", "hwTamperAttackNotify"), ("HUAWEI-WLAN-SECURITY-MIB", "hwLowSafeLevelAttackNotify"), ("HUAWEI-WLAN-SECURITY-MIB", "hwAddressRedirectionAttackNotify"), ("HUAWEI-WLAN-SECURITY-MIB", "hwWepIDConflictNotify"), ("HUAWEI-WLAN-SECURITY-MIB", "hwStaAuthEncryptModeNotMatchNotify"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwWsecNotifyGroup = hwWsecNotifyGroup.setStatus('current')
if mibBuilder.loadTexts: hwWsecNotifyGroup.setDescription('Description.')
hwWsecNotifyObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 6, 139, 6, 11, 2, 8)).setObjects(("HUAWEI-WLAN-SECURITY-MIB", "hwStaAuthenticationMode"), ("HUAWEI-WLAN-SECURITY-MIB", "hwStaAuthenticationFailCause"), ("HUAWEI-WLAN-SECURITY-MIB", "hwStaAssociationFailCause"), ("HUAWEI-WLAN-SECURITY-MIB", "hwStaAssocBssid"), ("HUAWEI-WLAN-SECURITY-MIB", "hwStaFailCodeType"), ("HUAWEI-WLAN-SECURITY-MIB", "hwWepIDConflictTrapAPMAC"), ("HUAWEI-WLAN-SECURITY-MIB", "hwWepIDConflictTrapAPID"), ("HUAWEI-WLAN-SECURITY-MIB", "hwWepIDConflictTrapRadioId"), ("HUAWEI-WLAN-SECURITY-MIB", "hwWepIDConflictTrapPreSSID"), ("HUAWEI-WLAN-SECURITY-MIB", "hwWepIDConflictTrapCurrSSID"), ("HUAWEI-WLAN-SECURITY-MIB", "hwWepIDConflictTrapCipherIdx"), ("HUAWEI-WLAN-SECURITY-MIB", "hwWlanStaAuthEncryptMode"), ("HUAWEI-WLAN-SECURITY-MIB", "hwWlanVapAuthEncryptMode"), ("HUAWEI-WLAN-SECURITY-MIB", "hwStaAuthenticationFailCauseStr"), ("HUAWEI-WLAN-SECURITY-MIB", "hwStaAssociationFailCauseStr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwWsecNotifyObjectsGroup = hwWsecNotifyObjectsGroup.setStatus('current')
if mibBuilder.loadTexts: hwWsecNotifyObjectsGroup.setDescription('Description.')
mibBuilder.exportSymbols("HUAWEI-WLAN-SECURITY-MIB", hwWsecNotifications=hwWsecNotifications, hwStaAuthenticationFailCause=hwStaAuthenticationFailCause, hwWsecProfileRsnaVersion=hwWsecProfileRsnaVersion, hwWsecStatsWEPUndecryptableCount=hwWsecStatsWEPUndecryptableCount, hwWsecStatsAuthenticationSuiteRequested=hwWsecStatsAuthenticationSuiteRequested, hwWsecAuthControlledPortControl=hwWsecAuthControlledPortControl, hwWsecStatsWAISignatureErrors=hwWsecStatsWAISignatureErrors, hwWsecStatsNumberOfPTKSAReplayCounters=hwWsecStatsNumberOfPTKSAReplayCounters, hwWsecProfileTable=hwWsecProfileTable, hwWsecProfileAcCertState=hwWsecProfileAcCertState, hwWsecNotifyObjects=hwWsecNotifyObjects, hwWsecStatsWpa4WayHandshakeFailures=hwWsecStatsWpa4WayHandshakeFailures, hwWsecAuthPairwiseCipher=hwWsecAuthPairwiseCipher, hwWsecProfileWpaPtkRekeyInterval=hwWsecProfileWpaPtkRekeyInterval, hwWsecProfileName=hwWsecProfileName, hwWsecProfileAsuType=hwWsecProfileAsuType, hwWsecAuthExcludeUnencrypted=hwWsecAuthExcludeUnencrypted, hwWsecStatsCCMPDecryptErrors=hwWsecStatsCCMPDecryptErrors, hwStaAssocBssid=hwStaAssocBssid, hwWsecStatsWAIMulticastHandshakeFailures=hwWsecStatsWAIMulticastHandshakeFailures, hwWsecBatchProfileStartNumber=hwWsecBatchProfileStartNumber, hwWsecProfileAcPrvKeyFileName=hwWsecProfileAcPrvKeyFileName, hwWsecAuthPreauthenticationImplemented=hwWsecAuthPreauthenticationImplemented, hwWsecStatsAuthenticationSuiteSelected=hwWsecStatsAuthenticationSuiteSelected, hwWsecWEPKeyMappingsGroup=hwWsecWEPKeyMappingsGroup, hwWsecProfileWpaPtkRekeySwitch=hwWsecProfileWpaPtkRekeySwitch, hwWsecAuthSuiteEnabled=hwWsecAuthSuiteEnabled, hwWsecWEPPassPhrase=hwWsecWEPPassPhrase, hwTamperAttackNotify=hwTamperAttackNotify, hwWsecAuthBKReauthThreshold=hwWsecAuthBKReauthThreshold, hwWsecStatsNumberOfGTKSAReplayCounters=hwWsecStatsNumberOfGTKSAReplayCounters, hwWsecStatsWEPICVErrorCount=hwWsecStatsWEPICVErrorCount, hwLowSafeLevelAttackNotify=hwLowSafeLevelAttackNotify, hwWsecAuthMulticastUpdateCount=hwWsecAuthMulticastUpdateCount, hwWsecProfileAsuIpAddr=hwWsecProfileAsuIpAddr, hwWsecWEPDefaultKeysEntry=hwWsecWEPDefaultKeysEntry, hwWsecAuthBKLifetime=hwWsecAuthBKLifetime, hwWepIDConflictTrapAPMAC=hwWepIDConflictTrapAPMAC, hwWsecStatsControlledPortStatus=hwWsecStatsControlledPortStatus, hwWsecStatsWAICertificateHandshakeFailures=hwWsecStatsWAICertificateHandshakeFailures, hwWsecProfileRowStatus=hwWsecProfileRowStatus, hwStaAssociationFailCauseStr=hwStaAssociationFailCauseStr, hwWsecStatsGroup=hwWsecStatsGroup, hwWsecBatchProfileInfoGroup=hwWsecBatchProfileInfoGroup, hwWsecProfileCaCertState=hwWsecProfileCaCertState, hwWsecStatsTable=hwWsecStatsTable, hwWsecWEPKeyMappingAddress=hwWsecWEPKeyMappingAddress, hwWsecAuthPreauthenticationEnabled=hwWsecAuthPreauthenticationEnabled, hwWsecAuthUnicastRekeyPackets=hwWsecAuthUnicastRekeyPackets, hwWsecStatsTKIPReplays=hwWsecStatsTKIPReplays, hwWsecBatchProfileInfo=hwWsecBatchProfileInfo, hwWsecStatsWAIUnicastHandshakeFailures=hwWsecStatsWAIUnicastHandshakeFailures, hwWsecProfileKeyPfxPassword=hwWsecProfileKeyPfxPassword, hwWsecAuthSuitesEntry=hwWsecAuthSuitesEntry, hwWsecStatsBKIDUsed=hwWsecStatsBKIDUsed, hwStationRepititiveAttackNotify=hwStationRepititiveAttackNotify, hwWsecNotifyObjectsGroup=hwWsecNotifyObjectsGroup, hwWepIDConflictTrapAPID=hwWepIDConflictTrapAPID, hwWsecBatchProfileName=hwWsecBatchProfileName, hwWsecAuthMulticastRekeyStrict=hwWsecAuthMulticastRekeyStrict, hwWsecAuthMulticastCipherSize=hwWsecAuthMulticastCipherSize, hwWsecAuthPSKValue=hwWsecAuthPSKValue, hwWsecStatsTKIPCounterMeasuresInvoked=hwWsecStatsTKIPCounterMeasuresInvoked, hwWsecWEPKeyMappingWEPOn=hwWsecWEPKeyMappingWEPOn, hwWsecStatsUnicastCipherSelected=hwWsecStatsUnicastCipherSelected, hwWsecStatsTKIPICVErrors=hwWsecStatsTKIPICVErrors, hwWsecStatsWAIFormatErrors=hwWsecStatsWAIFormatErrors, hwWsecStatsTKIPRemoteMICFailures=hwWsecStatsTKIPRemoteMICFailures, hwWsecAuthMulticastRekeyMethod=hwWsecAuthMulticastRekeyMethod, hwWsecProfileAsuCertFileName=hwWsecProfileAsuCertFileName, hwWsecStatsEntry=hwWsecStatsEntry, hwWsecStatsUnicastCipherRequested=hwWsecStatsUnicastCipherRequested, hwUserWithInvalidCerficationInbreakNetworkNotify=hwUserWithInvalidCerficationInbreakNetworkNotify, hwWsecAuthMulticastRekeyTime=hwWsecAuthMulticastRekeyTime, hwWsecWEPDefaultKeyValue=hwWsecWEPDefaultKeyValue, hwWlanSecurityCompliance=hwWlanSecurityCompliance, hwWsecProfileCaPfxPassword=hwWsecProfileCaPfxPassword, hwWsecAuthSATimeout=hwWsecAuthSATimeout, hwWlanVapAuthEncryptMode=hwWlanVapAuthEncryptMode, hwStaAuthErrorNotify=hwStaAuthErrorNotify, hwWlanSecurityObjectGroups=hwWlanSecurityObjectGroups, hwStaAuthenticationFailCauseStr=hwStaAuthenticationFailCauseStr, hwWsecStatsCCMPReplays=hwWsecStatsCCMPReplays, hwWlanStaAuthEncryptMode=hwWlanStaAuthEncryptMode, hwWsecWEPKeyMappingIndex=hwWsecWEPKeyMappingIndex, hwWsecStatsWAIDiscardCounters=hwWsecStatsWAIDiscardCounters, hwWsecProfileWpaWpa2PtkRekeyInterval=hwWsecProfileWpaWpa2PtkRekeyInterval, hwWsecProfileWpa2PtkRekeyInterval=hwWsecProfileWpa2PtkRekeyInterval, hwWsecAuthSuitesTable=hwWsecAuthSuitesTable, hwWsecProfileAcPfxPassword=hwWsecProfileAcPfxPassword, hwWlanSecurityObject=hwWlanSecurityObject, hwStaAssociationFailCause=hwStaAssociationFailCause, hwWsecStatsWPIDecryptableErrors=hwWsecStatsWPIDecryptableErrors, hwWepIDConflictTrapCurrSSID=hwWepIDConflictTrapCurrSSID, hwWsecAuthSuite=hwWsecAuthSuite, hwWsecAuthSuitesGroup=hwWsecAuthSuitesGroup, hwWsecAuthControlledAuthControl=hwWsecAuthControlledAuthControl, hwStaAssociationFailNotify=hwStaAssociationFailNotify, hwWsecAuthUnicastRekeyMethod=hwWsecAuthUnicastRekeyMethod, hwWsecStatsWEPExcludedCount=hwWsecStatsWEPExcludedCount, hwWsecWEPDefaultKeysTable=hwWsecWEPDefaultKeysTable, hwWsecProfileWEPKeyMappingLength=hwWsecProfileWEPKeyMappingLength, hwWsecStatsWPIReplayCounter=hwWsecStatsWPIReplayCounter, hwWsecProfileGroup=hwWsecProfileGroup, hwWsecStatsSTAAddress=hwWsecStatsSTAAddress, hwWsecWEPKeyMappingsEntry=hwWsecWEPKeyMappingsEntry, hwWsecWEPKeyMappingStatus=hwWsecWEPKeyMappingStatus, hwWepIDConflictTrapRadioId=hwWepIDConflictTrapRadioId, hwWlanSecurityCompliances=hwWlanSecurityCompliances, hwWsecNotify=hwWsecNotify, hwWsecProfileWEPDefaultKeyID=hwWsecProfileWEPDefaultKeyID, hwWsecStatsWAITimeoutCounters=hwWsecStatsWAITimeoutCounters, hwWepIDConflictTrapPreSSID=hwWepIDConflictTrapPreSSID, hwWsecAuthMulticastRekeyPackets=hwWsecAuthMulticastRekeyPackets, hwWsecProfileEntry=hwWsecProfileEntry, hwWsecBatchProfileWantNumber=hwWsecBatchProfileWantNumber, hwWsecStatsMulticastCipherRequested=hwWsecStatsMulticastCipherRequested, PYSNMP_MODULE_ID=hwWlanSecurity, hwWsecStatsMulticastCipherSelected=hwWsecStatsMulticastCipherSelected, hwWsecAuthUnicastUpdateCount=hwWsecAuthUnicastUpdateCount, hwWlanSecurity=hwWlanSecurity, hwWsecWEPKeyMappingValue=hwWsecWEPKeyMappingValue, hwWsecBatchProfileReturnNumber=hwWsecBatchProfileReturnNumber, hwWsecProfileWpaWpa2PtkRekeySwitch=hwWsecProfileWpaWpa2PtkRekeySwitch, hwWsecAuthPSKPassPhrase=hwWsecAuthPSKPassPhrase, hwWsecNotifyGroup=hwWsecNotifyGroup, hwWsecProfileWpa2PtkRekeySwitch=hwWsecProfileWpa2PtkRekeySwitch, hwWsecAuthPairwiseCipherSize=hwWsecAuthPairwiseCipherSize, hwWsecProfileCaCertFileName=hwWsecProfileCaCertFileName, hwWsecWEPDefaultKeysGroup=hwWsecWEPDefaultKeysGroup, hwWsecProfileWEPDataEncrypt=hwWsecProfileWEPDataEncrypt, hwWsecStatsWAIHMACErrors=hwWsecStatsWAIHMACErrors, hwWsecWEPKeyMappingsTable=hwWsecWEPKeyMappingsTable, hwWsecStatsTKIPLocalMICFailures=hwWsecStatsTKIPLocalMICFailures, hwWsecAuthUnicastKeysSupported=hwWsecAuthUnicastKeysSupported, hwStaAuthEncryptModeNotMatchNotify=hwStaAuthEncryptModeNotMatchNotify, hwWsecStatsWPIMICErrors=hwWsecStatsWPIMICErrors, hwWsecProfileAsuPfxPassword=hwWsecProfileAsuPfxPassword, hwAddressRedirectionAttackNotify=hwAddressRedirectionAttackNotify, hwStaAuthenticationMode=hwStaAuthenticationMode, hwWsecAuthCertificateUpdateCount=hwWsecAuthCertificateUpdateCount, hwWsecWEPDefaultKeyIndex=hwWsecWEPDefaultKeyIndex, hwWsecAuthMulticastCipher=hwWsecAuthMulticastCipher, hwWepIDConflictNotify=hwWepIDConflictNotify, hwWsecStatsWAIAuthenticationResultFailures=hwWsecStatsWAIAuthenticationResultFailures, hwWsecProfileAsuCertState=hwWsecProfileAsuCertState, hwWsecAuthSuiteIndex=hwWsecAuthSuiteIndex, hwWsecAuthUnicastRekeyTime=hwWsecAuthUnicastRekeyTime, hwWsecAuthOptionalImplemented=hwWsecAuthOptionalImplemented, hwWsecStatsVersion=hwWsecStatsVersion, hwStaFailCodeType=hwStaFailCodeType, hwWsecProfileWapiVersion=hwWsecProfileWapiVersion, hwWepIDConflictTrapCipherIdx=hwWepIDConflictTrapCipherIdx, hwWsecAuthDot1XMethod=hwWsecAuthDot1XMethod, hwWsecProfileAcCertFileName=hwWsecProfileAcCertFileName, hwWlanSecurityConformance=hwWlanSecurityConformance)
