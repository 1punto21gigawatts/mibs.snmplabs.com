#
# PySNMP MIB module ASCEND-TRAP (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ASCEND-TRAP
# Produced by pysmi-0.3.4 at Wed May  1 11:29:17 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
wanLineIfIndex, wanLineUsage = mibBuilder.importSymbols("ASCEND-ADVANCED-AGENT-MIB", "wanLineIfIndex", "wanLineUsage")
atmpLastErrorRecv, atmpHNProfileName, atmpAgentRecvErrorFrom, atmpLastErrorGenerated, atmpAgentSentErrorTo = mibBuilder.importSymbols("ASCEND-ATMP-MIB", "atmpLastErrorRecv", "atmpHNProfileName", "atmpAgentRecvErrorFrom", "atmpLastErrorGenerated", "atmpAgentSentErrorTo")
callLoggingServerIndex, callLoggingServerIPAddress, callLoggingDroppedPacketCount = mibBuilder.importSymbols("ASCEND-CALL-LOGGING-MIB", "callLoggingServerIndex", "callLoggingServerIPAddress", "callLoggingDroppedPacketCount")
slotIndex, cntrReduSwitchLastTime, cntrReduAvailLastTime, cntrReduAvailSlotIndex, cntrReduAvailCurrState, cntrReduSwitchIndex, slotStatus, cntrReduCurrentIndex, cntrReduAvailPrevState, cntrReduSwitchReason = mibBuilder.importSymbols("ASCEND-CHASSIS-MIB", "slotIndex", "cntrReduSwitchLastTime", "cntrReduAvailLastTime", "cntrReduAvailSlotIndex", "cntrReduAvailCurrState", "cntrReduSwitchIndex", "slotStatus", "cntrReduCurrentIndex", "cntrReduAvailPrevState", "cntrReduSwitchReason")
suspectLanModemBadCount, suspectLanModemUsedCount, suspectLanModemSlotIndex, suspectLanModemLast32, suspectLanModemPortIndex = mibBuilder.importSymbols("ASCEND-LANMODEM-MIB", "suspectLanModemBadCount", "suspectLanModemUsedCount", "suspectLanModemSlotIndex", "suspectLanModemLast32", "suspectLanModemPortIndex")
heartBeatMulticastGroupAddress, heartBeatPacketCount, heartBeatSlotCount, heartBeatSourceAddress, heartBeatSlotTimeInterval = mibBuilder.importSymbols("ASCEND-MCAST-MIB", "heartBeatMulticastGroupAddress", "heartBeatPacketCount", "heartBeatSlotCount", "heartBeatSourceAddress", "heartBeatSlotTimeInterval")
mgOperStatus, mgLinkName = mibBuilder.importSymbols("ASCEND-MGSTAT-MIB", "mgOperStatus", "mgLinkName")
sysConfigChange, ascend, consoleIndex, fatalLogReason, sysAbsoluteCurrentTime, sysLastRestartReason, fatalLogIndex = mibBuilder.importSymbols("ASCEND-MIB", "sysConfigChange", "ascend", "consoleIndex", "fatalLogReason", "sysAbsoluteCurrentTime", "sysLastRestartReason", "fatalLogIndex")
multiShelfState, = mibBuilder.importSymbols("ASCEND-MULTI-SHELF-MIB", "multiShelfState")
powerSupplyState, powerSupplyOperationalState = mibBuilder.importSymbols("ASCEND-POWER-SUPPLY-MIB", "powerSupplyState", "powerSupplyOperationalState")
radAuthServerIndex, radAuthHostIPAddress = mibBuilder.importSymbols("ASCEND-RADIUS-MIB", "radAuthServerIndex", "radAuthHostIPAddress")
resourceBadCounts, resourceUsedCounts, resourcePortIndex, resourceSlotIndex, resourceLast32 = mibBuilder.importSymbols("ASCEND-RESOURCES-MIB", "resourceBadCounts", "resourceUsedCounts", "resourcePortIndex", "resourceSlotIndex", "resourceLast32")
ssnStatusUserIPAddress, = mibBuilder.importSymbols("ASCEND-SESSION-MIB", "ssnStatusUserIPAddress")
sparingSlotLastStatusChange, sparingIfPrimaryIndex, sparingSlotSparingIndex, sparingIfLastStatusChange, sparingSlotStatus, sparingIfLastChangeReason, sparingIfStatus, sparingSlotPrimaryIndex, sparingSlotLastChangeReason, sparingIfSparingIndex = mibBuilder.importSymbols("ASCEND-SPARING-MIB", "sparingSlotLastStatusChange", "sparingIfPrimaryIndex", "sparingSlotSparingIndex", "sparingIfLastStatusChange", "sparingSlotStatus", "sparingIfLastChangeReason", "sparingIfStatus", "sparingSlotPrimaryIndex", "sparingSlotLastChangeReason", "sparingIfSparingIndex")
voipCfgGkIpAddress, voipCfgGkIndex = mibBuilder.importSymbols("ASCEND-VOIP-MIB", "voipCfgGkIpAddress", "voipCfgGkIndex")
watchdogName, watchdogState, watchdogIndex = mibBuilder.importSymbols("ASCEND-WATCHDOG-MIB", "watchdogName", "watchdogState", "watchdogIndex")
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
sysName, sysUpTime = mibBuilder.importSymbols("SNMPv2-MIB", "sysName", "sysUpTime")
NotificationType, Unsigned32, Integer32, ModuleIdentity, Counter64, iso, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, ObjectIdentity, MibIdentifier, Gauge32, Bits, TimeTicks, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Unsigned32", "Integer32", "ModuleIdentity", "Counter64", "iso", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "ObjectIdentity", "MibIdentifier", "Gauge32", "Bits", "TimeTicks", "IpAddress")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
portInactive = NotificationType((1, 3, 6, 1, 4, 1, 529) + (0,0)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: portInactive.setDescription('The host port associated with the indicated ifIndex has changed to the inactive state.')
portDualDelay = NotificationType((1, 3, 6, 1, 4, 1, 529) + (0,1)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: portDualDelay.setDescription('The host port associated with the indicated ifIndex is delaying the dialing of a second call to avoid overloading devices that can not handle two calls in close succession.')
portWaitSerial = NotificationType((1, 3, 6, 1, 4, 1, 529) + (0,2)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: portWaitSerial.setDescription('The host port associated with the indicated ifIndex has detected DTR when in V.25bis mode and is waiting for an HDLC controller to come on line. CTS is off.')
portHaveSerial = NotificationType((1, 3, 6, 1, 4, 1, 529) + (0,3)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: portHaveSerial.setDescription('The host port associated with the indicated ifIndex is ready to accept V.25bis commands. CTS is on.')
portRinging = NotificationType((1, 3, 6, 1, 4, 1, 529) + (0,4)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: portRinging.setDescription('The host port associated with the indicated ifIndex is has been notified of an incoming call.')
portCollectDigits = NotificationType((1, 3, 6, 1, 4, 1, 529) + (0,5)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: portCollectDigits.setDescription('The host port associated with the indicated ifIndex is collecting digits from the RS-366 dialing interface.')
portWaiting = NotificationType((1, 3, 6, 1, 4, 1, 529) + (0,6)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: portWaiting.setDescription('The host port associated with the indicated ifIndex is waiting for connect notification from the network after dialing or answer notification has been issued.')
portConnected = NotificationType((1, 3, 6, 1, 4, 1, 529) + (0,7)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: portConnected.setDescription('The host port associated with the indicated ifIndex has connected to the far end, but end-to-end data flow has not yet been enabled.')
portCarrier = NotificationType((1, 3, 6, 1, 4, 1, 529) + (0,8)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: portCarrier.setDescription('The host port associated with the indicated ifIndex has connected to the far end and has end-to-end data flow.')
portLoopback = NotificationType((1, 3, 6, 1, 4, 1, 529) + (0,9)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: portLoopback.setDescription('The host port associated with the indicated ifIndex has been placed in local loopback mode.')
portAcrPending = NotificationType((1, 3, 6, 1, 4, 1, 529) + (0,10)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: portAcrPending.setDescription('The host port associated with the indicated ifIndex has set ACR on the RS-366 dialing interface and is waiting for the host device to detect the transition.')
portDteNotReady = NotificationType((1, 3, 6, 1, 4, 1, 529) + (0,11)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: portDteNotReady.setDescription('The host port associated with the indicated ifIndex is waiting for the DTE to signal a ready condition when performing X.21 dialing.')
consoleStateChange = NotificationType((1, 3, 6, 1, 4, 1, 529) + (0,12)).setObjects(("ASCEND-MIB", "consoleIndex"), ("ASCEND-SESSION-MIB", "ssnStatusUserIPAddress"))
if mibBuilder.loadTexts: consoleStateChange.setDescription('The console associated with the passed console index has changed state. The console entry can be read to see what its current state is.')
portUseExceeded = NotificationType((1, 3, 6, 1, 4, 1, 529) + (0,13)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: portUseExceeded.setDescription('The port associated with the indicated ifIndex has exceeded the number of DS0 minutes allocated to it.')
systemUseExceeded = NotificationType((1, 3, 6, 1, 4, 1, 529) + (0,14))
if mibBuilder.loadTexts: systemUseExceeded.setDescription('The system DS0 usage has been exceeded.')
maxTelnetAttempts = NotificationType((1, 3, 6, 1, 4, 1, 529) + (0,15)).setObjects(("ASCEND-SESSION-MIB", "ssnStatusUserIPAddress"))
if mibBuilder.loadTexts: maxTelnetAttempts.setDescription('The maximum number of login attempts for a telnet session has been exceeded.')
eventTableOverwrite = NotificationType((1, 3, 6, 1, 4, 1, 529) + (0,16))
if mibBuilder.loadTexts: eventTableOverwrite.setDescription("A new event has overwritten an unread event. This trap is sent only for systems which support Ascend's accounting MIB. Once sent, additional overwrites will not cause another trap to be sent until at least 1 table's worth of new events have occured.")
radiusServerChange = NotificationType((1, 3, 6, 1, 4, 1, 529) + (0,18)).setObjects(("ASCEND-RADIUS-MIB", "radAuthServerIndex"), ("ASCEND-RADIUS-MIB", "radAuthHostIPAddress"))
if mibBuilder.loadTexts: radiusServerChange.setDescription('The current Radius server has been changed.')
multicastHeartBeatMonitor = NotificationType((1, 3, 6, 1, 4, 1, 529) + (0,19)).setObjects(("ASCEND-MCAST-MIB", "heartBeatMulticastGroupAddress"), ("ASCEND-MCAST-MIB", "heartBeatSourceAddress"), ("ASCEND-MCAST-MIB", "heartBeatSlotTimeInterval"), ("ASCEND-MCAST-MIB", "heartBeatSlotCount"), ("ASCEND-MCAST-MIB", "heartBeatPacketCount"))
if mibBuilder.loadTexts: multicastHeartBeatMonitor.setDescription('This trap is sent when heartBeat fails to receive configured number of heartBeat packets from heartBeat servers')
lanModemMovedToSuspectList = NotificationType((1, 3, 6, 1, 4, 1, 529) + (0,20)).setObjects(("ASCEND-LANMODEM-MIB", "suspectLanModemSlotIndex"), ("ASCEND-LANMODEM-MIB", "suspectLanModemPortIndex"), ("ASCEND-LANMODEM-MIB", "suspectLanModemUsedCount"), ("ASCEND-LANMODEM-MIB", "suspectLanModemBadCount"), ("ASCEND-LANMODEM-MIB", "suspectLanModemLast32"))
if mibBuilder.loadTexts: lanModemMovedToSuspectList.setDescription('This trap is sent to all the managers in the alarm group when a lan modem (digital modem) is moved to the suspect list. Refer to the lanModemGroup.suspectLanModemTable description.')
dirdoListFailure = NotificationType((1, 3, 6, 1, 4, 1, 529) + (0,21)).setObjects(("SNMPv2-MIB", "sysName"))
if mibBuilder.loadTexts: dirdoListFailure.setDescription('This trap is sent to all the managers in the alarm group when a T_ONLINE call comes in and no answer/subaddresses have been received.')
sysSlotStateChange = NotificationType((1, 3, 6, 1, 4, 1, 529) + (0,22)).setObjects(("ASCEND-CHASSIS-MIB", "slotIndex"), ("ASCEND-CHASSIS-MIB", "slotStatus"))
if mibBuilder.loadTexts: sysSlotStateChange.setDescription("This trap is sent to all the managers in the slot group when a slot card's SLOT-STATE profile is created due to slot insertion, or the current-state transitions into oper-state-down, oper-state-up, oper-state-dump, or oper-state-none states. Refer to the slotTable.slotIndex and slotTable.slotStatus descriptions.")
powerSupplyStateChange = NotificationType((1, 3, 6, 1, 4, 1, 529) + (0,23)).setObjects(("ASCEND-POWER-SUPPLY-MIB", "powerSupplyState"))
if mibBuilder.loadTexts: powerSupplyStateChange.setDescription('This trap is sent to all the managers in the alarm group when a power supply module is added or removed.')
powerSupplyOperationalStateChange = NotificationType((1, 3, 6, 1, 4, 1, 529) + (0,24)).setObjects(("ASCEND-POWER-SUPPLY-MIB", "powerSupplyOperationalState"))
if mibBuilder.loadTexts: powerSupplyOperationalStateChange.setDescription('This trap is sent to all the managers in the alarm group when a power supply module incurs failure(s).')
multiShelfStateChange = NotificationType((1, 3, 6, 1, 4, 1, 529) + (0,25)).setObjects(("ASCEND-MULTI-SHELF-MIB", "multiShelfState"))
if mibBuilder.loadTexts: multiShelfStateChange.setDescription('This trap is sent to all the managers in the slot group when a master shelf detects up/down state changes of the peer shelf in a multi-shelf configuration.')
sysLastRestartReasonTrap = NotificationType((1, 3, 6, 1, 4, 1, 529) + (0,26)).setObjects(("ASCEND-MIB", "sysLastRestartReason"), ("ASCEND-MIB", "fatalLogIndex"), ("ASCEND-MIB", "sysAbsoluteCurrentTime"))
if mibBuilder.loadTexts: sysLastRestartReasonTrap.setDescription('This trap is sent to all managers having the alarm condition enabled if the sysLastRestartReason is not unknown (value of 0).')
atmpMaxTunnelExceeded = NotificationType((1, 3, 6, 1, 4, 1, 529) + (0,27)).setObjects(("ASCEND-ATMP-MIB", "atmpHNProfileName"))
if mibBuilder.loadTexts: atmpMaxTunnelExceeded.setDescription('This is generated when the number of tunnels to a Home Network exceeds the maximum tunnels. atmpHAIpAddress is the Home Agent and atmpHNProfileName is the name of the connection profile.')
atmpAgentErrorSentTrap = NotificationType((1, 3, 6, 1, 4, 1, 529) + (0,28)).setObjects(("ASCEND-ATMP-MIB", "atmpLastErrorGenerated"), ("ASCEND-ATMP-MIB", "atmpAgentSentErrorTo"))
if mibBuilder.loadTexts: atmpAgentErrorSentTrap.setDescription('This trap indicates errors at the Agent level or with Tunnel creation.')
atmpAgentErrorRecvTrap = NotificationType((1, 3, 6, 1, 4, 1, 529) + (0,29)).setObjects(("ASCEND-ATMP-MIB", "atmpLastErrorRecv"), ("ASCEND-ATMP-MIB", "atmpAgentRecvErrorFrom"))
if mibBuilder.loadTexts: atmpAgentErrorRecvTrap.setDescription('This trap indicates errors received from a peer agent.')
sysConfigChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 529) + (0,30)).setObjects(("ASCEND-MIB", "sysConfigChange"))
if mibBuilder.loadTexts: sysConfigChangeTrap.setDescription('This trap indicates a configuration change has occurred.')
sdtnPrimaryListEmptyTrap = NotificationType((1, 3, 6, 1, 4, 1, 529) + (0,31))
if mibBuilder.loadTexts: sdtnPrimaryListEmptyTrap.setDescription('This trap indicates that the Transaction Server Primary list has become empty.')
sdtnSecondaryListEmptyTrap = NotificationType((1, 3, 6, 1, 4, 1, 529) + (0,32))
if mibBuilder.loadTexts: sdtnSecondaryListEmptyTrap.setDescription('This trap indicates that the Transaction Server Secondary list has become empty.')
systemClockDrifted = NotificationType((1, 3, 6, 1, 4, 1, 529) + (0,33))
if mibBuilder.loadTexts: systemClockDrifted.setDescription('This trap indicates system clock has drifted but could not be corrected. This trap sent to managers when the alarm and clock drifted params are set to YES in a trap profile. If the clock drifting problem persists, the trap will only be sent every 24 hours.')
suspectAccessResource = NotificationType((1, 3, 6, 1, 4, 1, 529) + (0,34)).setObjects(("ASCEND-RESOURCES-MIB", "resourceSlotIndex"), ("ASCEND-RESOURCES-MIB", "resourcePortIndex"), ("ASCEND-RESOURCES-MIB", "resourceUsedCounts"), ("ASCEND-RESOURCES-MIB", "resourceBadCounts"), ("ASCEND-RESOURCES-MIB", "resourceLast32"))
if mibBuilder.loadTexts: suspectAccessResource.setDescription('The access resource suspected trap is sent to all the managers in the alarm group when a terminating resource such as modem become suspect. The suspected resource(s) are not assigned to terminate calls until the resource in the available pool exhausted.')
watchdogWarningTrap = NotificationType((1, 3, 6, 1, 4, 1, 529) + (0,35)).setObjects(("ASCEND-WATCHDOG-MIB", "watchdogIndex"), ("ASCEND-WATCHDOG-MIB", "watchdogName"), ("ASCEND-WATCHDOG-MIB", "watchdogState"), ("ASCEND-MIB", "sysAbsoluteCurrentTime"))
if mibBuilder.loadTexts: watchdogWarningTrap.setDescription('This trap indicates that a watchdog warning has occurred.')
slotCardResetTrap = NotificationType((1, 3, 6, 1, 4, 1, 529) + (0,36)).setObjects(("ASCEND-MIB", "fatalLogIndex"), ("ASCEND-MIB", "fatalLogReason"), ("ASCEND-MIB", "sysAbsoluteCurrentTime"), ("ASCEND-CHASSIS-MIB", "slotIndex"))
if mibBuilder.loadTexts: slotCardResetTrap.setDescription('This trap is sent to all managers having the alarm condition enabled')
controllerSwitchoverTrap = NotificationType((1, 3, 6, 1, 4, 1, 529) + (0,37)).setObjects(("ASCEND-MIB", "sysAbsoluteCurrentTime"), ("ASCEND-CHASSIS-MIB", "cntrReduSwitchReason"), ("ASCEND-CHASSIS-MIB", "cntrReduSwitchIndex"), ("ASCEND-CHASSIS-MIB", "cntrReduCurrentIndex"))
if mibBuilder.loadTexts: controllerSwitchoverTrap.setDescription('System controller changed. The primary system controller changed from cntrReduSwitchIndex to cntrReduCurrentIndex.')
callLogServChange = NotificationType((1, 3, 6, 1, 4, 1, 529) + (0,38)).setObjects(("ASCEND-CALL-LOGGING-MIB", "callLoggingServerIndex"), ("ASCEND-CALL-LOGGING-MIB", "callLoggingServerIPAddress"), ("ASCEND-MIB", "sysAbsoluteCurrentTime"))
if mibBuilder.loadTexts: callLogServChange.setDescription('This trap is sent to indicate that the call logging server has changed.')
voipGkChange = NotificationType((1, 3, 6, 1, 4, 1, 529) + (0,39)).setObjects(("ASCEND-VOIP-MIB", "voipCfgGkIndex"), ("ASCEND-VOIP-MIB", "voipCfgGkIpAddress"), ("ASCEND-MIB", "sysAbsoluteCurrentTime"))
if mibBuilder.loadTexts: voipGkChange.setDescription('This trap is sent when there is a change in the gatekeeper which is registered with the gateway in a VOIP configuration.')
wanLineStateChange = NotificationType((1, 3, 6, 1, 4, 1, 529) + (0,40)).setObjects(("ASCEND-ADVANCED-AGENT-MIB", "wanLineIfIndex"), ("ASCEND-ADVANCED-AGENT-MIB", "wanLineUsage"), ("ASCEND-MIB", "sysAbsoluteCurrentTime"))
if mibBuilder.loadTexts: wanLineStateChange.setDescription('This trap is sent to indicate a change in the state of a T1/E1 line : trunk, quiesced or disabled')
callLogDroppedPkt = NotificationType((1, 3, 6, 1, 4, 1, 529) + (0,41)).setObjects(("ASCEND-CALL-LOGGING-MIB", "callLoggingDroppedPacketCount"))
if mibBuilder.loadTexts: callLogDroppedPkt.setDescription('This trap indicates that a call logging packet was dropped. A count value of 1 indicates the start of dropping of call logging packets. A count value of 0 indicates that all is well again.')
megacoLinkStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 529) + (0,42)).setObjects(("ASCEND-MGSTAT-MIB", "mgLinkName"), ("ASCEND-MGSTAT-MIB", "mgOperStatus"))
if mibBuilder.loadTexts: megacoLinkStatusTrap.setDescription('This trap indicates that operational status of a media gateway control link has changed.')
sparingSlotStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 529) + (0,43)).setObjects(("ASCEND-SPARING-MIB", "sparingSlotPrimaryIndex"), ("ASCEND-SPARING-MIB", "sparingSlotSparingIndex"), ("ASCEND-SPARING-MIB", "sparingSlotStatus"), ("ASCEND-SPARING-MIB", "sparingSlotLastStatusChange"), ("ASCEND-SPARING-MIB", "sparingSlotLastChangeReason"))
if mibBuilder.loadTexts: sparingSlotStatusChange.setDescription('This trap indicates that the slot sparing state has changed at sparingSlotLastStatusChange to sparingSlotStatus. The slot affected is sparingSlotPrimaryIndex.')
sparingIfStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 529) + (0,44)).setObjects(("ASCEND-SPARING-MIB", "sparingIfPrimaryIndex"), ("ASCEND-SPARING-MIB", "sparingIfSparingIndex"), ("ASCEND-SPARING-MIB", "sparingIfStatus"), ("ASCEND-SPARING-MIB", "sparingIfLastStatusChange"), ("ASCEND-SPARING-MIB", "sparingIfLastChangeReason"))
if mibBuilder.loadTexts: sparingIfStatusChange.setDescription('This trap indicates that the interface sparing state has changed at sparingIfLastStatusChange to sparingIfStatus. The slot affected is sparingIfPrimaryIndex.')
cntrReduAvailTrap = NotificationType((1, 3, 6, 1, 4, 1, 529) + (0,45)).setObjects(("ASCEND-CHASSIS-MIB", "cntrReduAvailLastTime"), ("ASCEND-CHASSIS-MIB", "cntrReduAvailSlotIndex"), ("ASCEND-CHASSIS-MIB", "cntrReduAvailPrevState"), ("ASCEND-CHASSIS-MIB", "cntrReduAvailCurrState"))
if mibBuilder.loadTexts: cntrReduAvailTrap.setDescription('The redundancy availability for the controller in slot cntrReduAvailSlotIndex changed from cntrReduAvailPrevState to cntrReduAvailCurrState at cntrReduAvailLastTime.')
mibBuilder.exportSymbols("ASCEND-TRAP", portUseExceeded=portUseExceeded, sysConfigChangeTrap=sysConfigChangeTrap, portLoopback=portLoopback, portCarrier=portCarrier, callLogServChange=callLogServChange, voipGkChange=voipGkChange, atmpAgentErrorSentTrap=atmpAgentErrorSentTrap, atmpMaxTunnelExceeded=atmpMaxTunnelExceeded, consoleStateChange=consoleStateChange, maxTelnetAttempts=maxTelnetAttempts, radiusServerChange=radiusServerChange, suspectAccessResource=suspectAccessResource, dirdoListFailure=dirdoListFailure, portCollectDigits=portCollectDigits, sdtnPrimaryListEmptyTrap=sdtnPrimaryListEmptyTrap, multicastHeartBeatMonitor=multicastHeartBeatMonitor, slotCardResetTrap=slotCardResetTrap, lanModemMovedToSuspectList=lanModemMovedToSuspectList, portHaveSerial=portHaveSerial, portInactive=portInactive, eventTableOverwrite=eventTableOverwrite, portWaitSerial=portWaitSerial, portWaiting=portWaiting, cntrReduAvailTrap=cntrReduAvailTrap, multiShelfStateChange=multiShelfStateChange, sysLastRestartReasonTrap=sysLastRestartReasonTrap, portConnected=portConnected, megacoLinkStatusTrap=megacoLinkStatusTrap, callLogDroppedPkt=callLogDroppedPkt, sysSlotStateChange=sysSlotStateChange, powerSupplyOperationalStateChange=powerSupplyOperationalStateChange, systemClockDrifted=systemClockDrifted, systemUseExceeded=systemUseExceeded, portDteNotReady=portDteNotReady, portDualDelay=portDualDelay, wanLineStateChange=wanLineStateChange, sdtnSecondaryListEmptyTrap=sdtnSecondaryListEmptyTrap, sparingSlotStatusChange=sparingSlotStatusChange, atmpAgentErrorRecvTrap=atmpAgentErrorRecvTrap, watchdogWarningTrap=watchdogWarningTrap, powerSupplyStateChange=powerSupplyStateChange, controllerSwitchoverTrap=controllerSwitchoverTrap, portRinging=portRinging, sparingIfStatusChange=sparingIfStatusChange, portAcrPending=portAcrPending)
