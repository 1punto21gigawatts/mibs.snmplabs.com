#
# PySNMP MIB module ETH-SWITCH-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ETH-SWITCH-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:06:42 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint")
scanet, = mibBuilder.importSymbols("SCANET-MIB", "scanet")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Gauge32, Integer32, NotificationType, Counter64, MibIdentifier, Unsigned32, ModuleIdentity, ObjectIdentity, Bits, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, NotificationType, TimeTicks, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Integer32", "NotificationType", "Counter64", "MibIdentifier", "Unsigned32", "ModuleIdentity", "ObjectIdentity", "Bits", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "NotificationType", "TimeTicks", "iso")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
ethSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 208, 39))
control = MibIdentifier((1, 3, 6, 1, 4, 1, 208, 39, 1))
module = MibIdentifier((1, 3, 6, 1, 4, 1, 208, 39, 2))
ports = MibIdentifier((1, 3, 6, 1, 4, 1, 208, 39, 3))
statistic = MibIdentifier((1, 3, 6, 1, 4, 1, 208, 39, 4))
adaptiveForwardMode = MibIdentifier((1, 3, 6, 1, 4, 1, 208, 39, 5))
chipSets = MibIdentifier((1, 3, 6, 1, 4, 1, 208, 39, 6))
cards = MibIdentifier((1, 3, 6, 1, 4, 1, 208, 39, 7))
class ProductIds(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 1163072800, 1163072816, 1163073552, 1163073568, 1163073584, 1163073585, 1163073586, 1163073600, 1163073616, 1163073617, 1163076624, 1163076640, 1163076656, 1163076657, 1163067410, 1163067456, 1163067648, 1163067649, 1163067650, 1163067651, 1163067664, 1163067665, 1163067732, 1163067733, 1280323585, 1280323586, 1280323587, 1280323588, 1280323589, 1280323590, 1280323604, 1280323605))
    namedValues = NamedValues(("notAvailable", 1), ("es-1520", 1163072800), ("es-1530", 1163072816), ("es-1810", 1163073552), ("es-1820", 1163073568), ("es-1830", 1163073584), ("es-1831", 1163073585), ("es-1832", 1163073586), ("es-1840", 1163073600), ("es-1850", 1163073616), ("es100fx", 1163073617), ("es10t24", 1163076624), ("es10t24plus", 1163076640), ("es10mmt12", 1163076656), ("es10mmfl", 1163076657), ("es-0012", 1163067410), ("es-0040", 1163067456), ("es-0100", 1163067648), ("es-0101", 1163067649), ("es100mmfx", 1163067650), ("es-0103", 1163067651), ("es100mmtx", 1163067664), ("es-0111", 1163067665), ("es-0154", 1163067732), ("es-0155", 1163067733), ("lp-3001", 1280323585), ("lp-3002", 1280323586), ("lp-3003", 1280323587), ("lp-3004", 1280323588), ("lp-3005", 1280323589), ("lp-3006", 1280323590), ("lp-3014", 1280323604), ("lp-3015", 1280323605))

scSegments = MibScalar((1, 3, 6, 1, 4, 1, 208, 39, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("segmentA", 1), ("segmentB", 2), ("segmentAandB", 3), ("segmentC", 4), ("segmentAandC", 5), ("segmentBandC", 6), ("segmentAandBandC", 7), ("none", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSegments.setStatus('mandatory')
if mibBuilder.loadTexts: scSegments.setDescription('Object controlling the use of the System Center Backplane. Each bus is assigned a bit value in the object')
defaultSwitchMode = MibScalar((1, 3, 6, 1, 4, 1, 208, 39, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("cutThrough", 2), ("fragmentFree", 3), ("storeAndForward", 4), ("adaptive", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: defaultSwitchMode.setStatus('mandatory')
if mibBuilder.loadTexts: defaultSwitchMode.setDescription('Default Switch mode. used by the object portSwitchMode when its value is default(1)')
defaultThrottleBackMode = MibScalar((1, 3, 6, 1, 4, 1, 208, 39, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enable", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: defaultThrottleBackMode.setStatus('mandatory')
if mibBuilder.loadTexts: defaultThrottleBackMode.setDescription('Default ThrottleBack mode. used by the object portThrottleBack when its value is default(1)')
networkPort = MibScalar((1, 3, 6, 1, 4, 1, 208, 39, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkPort.setStatus('mandatory')
if mibBuilder.loadTexts: networkPort.setDescription('For a Workgroup Switch (only one multi MAC address port), this object determines the network port. The value equals the value of portNumber in the portTable. Notice that this object is valid for Workgroup switches only (ES-2410 and ES-1810). Other types of Switches returns the value 0 and has read-only access.')
expansionModule = MibScalar((1, 3, 6, 1, 4, 1, 208, 39, 2, 1), ProductIds()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expansionModule.setStatus('mandatory')
if mibBuilder.loadTexts: expansionModule.setDescription('An ID that identifies the expansion module')
portLastChange = MibScalar((1, 3, 6, 1, 4, 1, 208, 39, 3, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portLastChange.setStatus('mandatory')
if mibBuilder.loadTexts: portLastChange.setDescription('The value of sysUpTime at the last time any interface has changed state')
portTable = MibTable((1, 3, 6, 1, 4, 1, 208, 39, 3, 2), )
if mibBuilder.loadTexts: portTable.setStatus('mandatory')
if mibBuilder.loadTexts: portTable.setDescription('Port Table.')
portEntry = MibTableRow((1, 3, 6, 1, 4, 1, 208, 39, 3, 2, 1), ).setIndexNames((0, "ETH-SWITCH-MIB", "portNumber"))
if mibBuilder.loadTexts: portEntry.setStatus('mandatory')
if mibBuilder.loadTexts: portEntry.setDescription('A Port entry containing object for a Switch port.')
portNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portNumber.setStatus('mandatory')
if mibBuilder.loadTexts: portNumber.setDescription('A number that uniquely identifies a port')
portInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInterfaceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: portInterfaceIndex.setDescription('The value of this object equals the ports interface index value, ex. portIfIndex. If the value of this object is zero, then the port is not active, i.e. does not appear in the portIfTable.')
portLED = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 3, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portLED.setStatus('mandatory')
if mibBuilder.loadTexts: portLED.setDescription('The value of this object represent the status (colour) of the LED(s) attached to this port. Lower 3 bits indicates off/colour (off(0), red(1), green(2), yellow(4)), Higher 5 bits reserved for flash frequency. For value 0-9 the resolution is 0.1 Hz and 10-31 the resolution is 1.0 Hz. Ex. 8 gives 0.8 Hz and 11 gives 2 Hz. For PIM slots with two LEDs that can contain either an expansion card, a one port PIM or a PIM with multiple ports a special case is needed. The two LEDs are mapped into a two LED octets. In case the PIM slot contain a PIM with multiple ports a third LED octet represent the first port on the PIM. In the case there is two LEDs on the front, the first LED octet is the front and the second the back.')
portState = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portState.setStatus('mandatory')
if mibBuilder.loadTexts: portState.setDescription('This is a bit array which represent the state of the port. bit 0: Disabled due to configuration bit 1: Hardware error bit 2: No linkpulse bit 3: Disabled by manager bit 4: Disabled by access control bit 5: Disabled due to shared port')
portCardNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 3, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portCardNumber.setStatus('mandatory')
if mibBuilder.loadTexts: portCardNumber.setDescription('The cardNumber in the switch system.')
portPimNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 3, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portPimNumber.setStatus('mandatory')
if mibBuilder.loadTexts: portPimNumber.setDescription('The pimNumber in the switch system.')
portPimPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 3, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portPimPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: portPimPortNumber.setDescription('The relative number of the port on the PIM.')
portIfTable = MibTable((1, 3, 6, 1, 4, 1, 208, 39, 3, 3), )
if mibBuilder.loadTexts: portIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: portIfTable.setDescription('Switch Interface Table.')
portIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 208, 39, 3, 3, 1), ).setIndexNames((0, "ETH-SWITCH-MIB", "portIfIndex"))
if mibBuilder.loadTexts: portIfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: portIfEntry.setDescription('An entry containing object for a Switch interface.')
portIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: portIfIndex.setDescription('An index value that uniquely identifies an interface. The interface identified by a particular value of this index is the same interface as identified by the same value of ifIndex.')
portIfDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 3, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portIfDescr.setStatus('mandatory')
if mibBuilder.loadTexts: portIfDescr.setDescription('User configurable description of the port.')
portIfLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 3, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portIfLocation.setStatus('mandatory')
if mibBuilder.loadTexts: portIfLocation.setDescription('User configurable location of the port.')
portIfSwitchMode = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 99))).clone(namedValues=NamedValues(("default", 1), ("cutThrough", 2), ("fragmentFree", 3), ("storeAndForward", 4), ("adaptive", 5), ("notAvailable", 99)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portIfSwitchMode.setStatus('mandatory')
if mibBuilder.loadTexts: portIfSwitchMode.setDescription('Port Switch mode. If set to default(1) value from defaultSwitchMode is used.')
portIfDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 99))).clone(namedValues=NamedValues(("autoDetect", 1), ("half", 2), ("full", 3), ("autoDetectedHalf", 4), ("autoDetectedFull", 5), ("notAvailable", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portIfDuplex.setStatus('mandatory')
if mibBuilder.loadTexts: portIfDuplex.setDescription('Port Duplex mode. For ports in auto mode the mode may change automatically between autoDetect(1), autoDetectedHalf(3) and autoDetectedFull(5).')
portIfThrottleBack = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 99))).clone(namedValues=NamedValues(("default", 1), ("enable", 2), ("disable", 3), ("notAvailable", 99)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portIfThrottleBack.setStatus('mandatory')
if mibBuilder.loadTexts: portIfThrottleBack.setDescription('Port ThrottleBack mode. If set to default(1) value from defaultThrottleBackMode is used.')
portIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 14, 15, 51, 54, 100, 101, 102, 110))).clone(namedValues=NamedValues(("absent", 1), ("tenbase2", 2), ("aui", 3), ("tenbasetutp", 4), ("tenbasetstp", 5), ("tenbasefl", 6), ("tenbaseflfullduplex", 7), ("tenbasetxutp", 14), ("tenbasetxstp", 15), ("hundredbasetx", 51), ("hundredbasefx", 54), ("backplane", 100), ("hsb", 101), ("internal", 102), ("layer3link", 110)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portIfType.setStatus('mandatory')
if mibBuilder.loadTexts: portIfType.setDescription('The type of Physical interface at the port.')
portIfDuplexSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 3, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 7, 99))).clone(namedValues=NamedValues(("half", 1), ("full", 2), ("halfAndFull", 3), ("auto", 4), ("autoAndHalfAndFull", 7), ("notAvailable", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portIfDuplexSupported.setStatus('mandatory')
if mibBuilder.loadTexts: portIfDuplexSupported.setDescription('The duplex mode supported for a port.')
portIfSpeedSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 3, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 99))).clone(namedValues=NamedValues(("speed10Mbit", 1), ("speed100Mbit", 2), ("speed10And100Mbit", 3), ("speedAutoAnd10And100Mbit", 4), ("speed155Mbit", 5), ("notAvailable", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portIfSpeedSupported.setStatus('mandatory')
if mibBuilder.loadTexts: portIfSpeedSupported.setDescription('The speed supported for a port.')
portIfSpeedAndDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 3, 3, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portIfSpeedAndDuplex.setStatus('mandatory')
if mibBuilder.loadTexts: portIfSpeedAndDuplex.setDescription('This object is used to configure the speed and duplex mode for a port. Byte 1: negotiation manual(0) autoDisable(1) autoAlternative(2) Byte 2: speed auto(1) 10(2) 100(3) 155(4) Byte 3: alternativeSpeed unused(0) (read-only) Byte 4: duplexMode auto(1) half(2) full(3) Byte 5: alternativeDuplexMode unused(0) (read-only) half(2) full(3) Explanation of the different negotiation: Manual: The port does not support auto detect of speed and duplex which means that only fixed values are legal. AutoDisable: The port supports auto negotiation and if the connected port does not except the suggested values the port will be disabled. AutoAlternative: The port supports auto negotiation and if the connected port does not except the suggested values the port will be set to some alternative values.')
txStatTable = MibTable((1, 3, 6, 1, 4, 1, 208, 39, 4, 1), )
if mibBuilder.loadTexts: txStatTable.setStatus('mandatory')
if mibBuilder.loadTexts: txStatTable.setDescription('MIA ASIC Transmit statistic Table.')
txStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 208, 39, 4, 1, 1), ).setIndexNames((0, "ETH-SWITCH-MIB", "txStatIndex"))
if mibBuilder.loadTexts: txStatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: txStatEntry.setDescription('An entry containing object for MIA ASIC Transmit statistic.')
txStatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txStatIndex.setStatus('mandatory')
if mibBuilder.loadTexts: txStatIndex.setDescription('An index value that uniquely identifies an interface. The interface identified by a particular value of this index is the same interface as identified by the same value of ifIndex.')
txUCPkts64Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txUCPkts64Octets.setStatus('mandatory')
if mibBuilder.loadTexts: txUCPkts64Octets.setDescription('64 byte unicast packets transmitted')
txUCPkts65To127Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txUCPkts65To127Octets.setStatus('mandatory')
if mibBuilder.loadTexts: txUCPkts65To127Octets.setDescription('65 to 127 byte unicast packets transmitted')
txUCPkts128To255Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txUCPkts128To255Octets.setStatus('mandatory')
if mibBuilder.loadTexts: txUCPkts128To255Octets.setDescription('128 to 255 byte unicast packets transmitted')
txUCPkts256To511Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txUCPkts256To511Octets.setStatus('mandatory')
if mibBuilder.loadTexts: txUCPkts256To511Octets.setDescription('256 to 511 byte unicast packets transmitted')
txUCPkts512To1023Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txUCPkts512To1023Octets.setStatus('mandatory')
if mibBuilder.loadTexts: txUCPkts512To1023Octets.setDescription('512 to 1023 byte unicast packets transmitted')
txUCPkts1024To1518Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txUCPkts1024To1518Octets.setStatus('mandatory')
if mibBuilder.loadTexts: txUCPkts1024To1518Octets.setDescription('1024 to 1518 byte unicast packets transmitted')
txMCPkts64Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txMCPkts64Octets.setStatus('mandatory')
if mibBuilder.loadTexts: txMCPkts64Octets.setDescription('64 byte multicast packets transmitted')
txMCPkts65To127Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txMCPkts65To127Octets.setStatus('mandatory')
if mibBuilder.loadTexts: txMCPkts65To127Octets.setDescription('65 to 127 byte multicast packets transmitted')
txMCPkts128To255Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txMCPkts128To255Octets.setStatus('mandatory')
if mibBuilder.loadTexts: txMCPkts128To255Octets.setDescription('128 to 255 byte multicast packets transmitted')
txMCPkts256To511Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txMCPkts256To511Octets.setStatus('mandatory')
if mibBuilder.loadTexts: txMCPkts256To511Octets.setDescription('256 to 511 byte multicast packets transmitted')
txMCPkts512To1023Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txMCPkts512To1023Octets.setStatus('mandatory')
if mibBuilder.loadTexts: txMCPkts512To1023Octets.setDescription('512 to 1023 byte multicast packets transmitted')
txMCPkts1024To1518Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txMCPkts1024To1518Octets.setStatus('mandatory')
if mibBuilder.loadTexts: txMCPkts1024To1518Octets.setDescription('1024 to 1518 byte multicast packets transmitted')
txBCPkts64Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txBCPkts64Octets.setStatus('mandatory')
if mibBuilder.loadTexts: txBCPkts64Octets.setDescription('64 byte broadcast packets transmitted')
txBCPkts65To127Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txBCPkts65To127Octets.setStatus('mandatory')
if mibBuilder.loadTexts: txBCPkts65To127Octets.setDescription('65 to 127 byte broadcast packets transmitted')
txBCPkts128To255Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txBCPkts128To255Octets.setStatus('mandatory')
if mibBuilder.loadTexts: txBCPkts128To255Octets.setDescription('128 to 255 byte broadcast packets transmitted')
txBCPkts256To511Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txBCPkts256To511Octets.setStatus('mandatory')
if mibBuilder.loadTexts: txBCPkts256To511Octets.setDescription('256 to 511 byte broadcast packets transmitted')
txBCPkts512To1023Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txBCPkts512To1023Octets.setStatus('mandatory')
if mibBuilder.loadTexts: txBCPkts512To1023Octets.setDescription('512 to 1023 byte broadcast packets transmitted')
txBCPkts1024To1518Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txBCPkts1024To1518Octets.setStatus('mandatory')
if mibBuilder.loadTexts: txBCPkts1024To1518Octets.setDescription('1024 to 1518 byte broadcast packets transmitted')
txDeffereds = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txDeffereds.setStatus('mandatory')
if mibBuilder.loadTexts: txDeffereds.setDescription('A transmission must await a silent net in Simplex mode. If the transmission is delayed due to a non silent net the transmission is deffered.')
txOctetsHis = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txOctetsHis.setStatus('mandatory')
if mibBuilder.loadTexts: txOctetsHis.setDescription('High part of a 64 bit octet transmitted counter')
txOctetsLos = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txOctetsLos.setStatus('mandatory')
if mibBuilder.loadTexts: txOctetsLos.setDescription('Low part of a 64 bit octet transmitted counter')
txExcessiveDefferalsErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txExcessiveDefferalsErrors.setStatus('mandatory')
if mibBuilder.loadTexts: txExcessiveDefferalsErrors.setDescription('Maximum defferal should be the duration of a maximum length packet, if no errors on the net. Excessive defferal is indicated if defferal duration is more than approximately 2 maximum packets.')
txForwardedRxError = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txForwardedRxError.setStatus('mandatory')
if mibBuilder.loadTexts: txForwardedRxError.setDescription('The transmission are aborted on the transmitting port of the switch if the receiving port of the present packet receives are packet with error or receives a collision fragment. This should never occur in Store and forward mode, while collisions never should provoke this event in fragment free mode, except for at late collisions on the receiving net.')
txNiaUnderRunDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txNiaUnderRunDrops.setStatus('mandatory')
if mibBuilder.loadTexts: txNiaUnderRunDrops.setDescription('The NIA TX buffer gets in underrun if the nimbus is overloaded. This should only happen if a configuration is made which loads the Nimbus with more than a load equal to 44 simplex 10Mbit net. NOTE: This only counts for NIA100 interfaces.')
txLinkDownEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txLinkDownEvents.setStatus('mandatory')
if mibBuilder.loadTexts: txLinkDownEvents.setDescription('No link pulses are received. Usually this means that the cable are removed.')
txAllCounterPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 1, 1, 27), OctetString().subtype(subtypeSpec=ValueSizeConstraint(127, 127)).setFixedLength(127)).setMaxAccess("readonly")
if mibBuilder.loadTexts: txAllCounterPackets.setStatus('mandatory')
if mibBuilder.loadTexts: txAllCounterPackets.setDescription('A collection of all counters for byte and packet counters. This object is needed to optimise SNMP traffic. The counters in this string are txStatIndex INTEGER txOctetsHis Counter txOctetsLos Counter txUCPkts64Octets Counter txUCPkts65To127Octets Counter txUCPkts128To255Octets Counter txUCPkts256To511Octets Counter txUCPkts512To1023Octets Counter txUCPkts1024To1518Octets Counter txMCPkts64Octets Counter txMCPkts65To127Octets Counter txMCPkts128To255Octets Counter txMCPkts256To511Octets Counter txMCPkts512To1023Octets Counter txMCPkts1024To1518Octets Counter txBCPkts64Octets Counter txBCPkts65To127Octets Counter txBCPkts128To255Octets Counter txBCPkts256To511Octets Counter txBCPkts512To1023Octets Counter txBCPkts1024To1518Octets Counter The values are represented in the OCTET STRING in the listed order, each value stored as a 32 bits big engine value.')
txAllCounterOthers = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 1, 1, 28), OctetString().subtype(subtypeSpec=ValueSizeConstraint(127, 127)).setFixedLength(127)).setMaxAccess("readonly")
if mibBuilder.loadTexts: txAllCounterOthers.setStatus('mandatory')
if mibBuilder.loadTexts: txAllCounterOthers.setDescription('A collection of all counters other than for byte and packet counters. This object is needed to optimise SNMP traffic. The counters in this string are txStatIndex INTEGER txDeffereds Counter txExcessiveDefferalsErrors Counter txForwardedRxError Counter txNiaUnderRunDrops Counter txLinkDownEvents Counter -- Counters from RFC1643 txCSenseErrors Counter txSQEErrors Counter txLateCollisions Counter txExcessiveCollisionErrors Counter txSingleCollisionFrames Counter txMultipleCollisionFrames Counter The values are represented in the OCTET STRING in the listed order, each value stored as a 32 bits big engine value.')
rxStatTable = MibTable((1, 3, 6, 1, 4, 1, 208, 39, 4, 2), )
if mibBuilder.loadTexts: rxStatTable.setStatus('mandatory')
if mibBuilder.loadTexts: rxStatTable.setDescription('MIA ASIC Receive statistic Table.')
rxStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 208, 39, 4, 2, 1), ).setIndexNames((0, "ETH-SWITCH-MIB", "rxStatIndex"))
if mibBuilder.loadTexts: rxStatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rxStatEntry.setDescription('An entry containing object for MIA ASIC Receive statistic.')
rxStatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxStatIndex.setStatus('mandatory')
if mibBuilder.loadTexts: rxStatIndex.setDescription('An index value that uniquely identifies an interface. The interface identified by a particular value of this index is the same interface as identified by the same value of ifIndex.')
rxUCPkts64OctetsLocals = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxUCPkts64OctetsLocals.setStatus('mandatory')
if mibBuilder.loadTexts: rxUCPkts64OctetsLocals.setDescription('64 byte unicast packets received which has not been forwarded')
rxUCPkts64OctetsForwardeds = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxUCPkts64OctetsForwardeds.setStatus('mandatory')
if mibBuilder.loadTexts: rxUCPkts64OctetsForwardeds.setDescription('64 byte unicast packets received which has been forwarded')
rxUCPkts65To127OctetsLocals = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxUCPkts65To127OctetsLocals.setStatus('mandatory')
if mibBuilder.loadTexts: rxUCPkts65To127OctetsLocals.setDescription('65 to 127 byte unicast packets received which has not been forwarded')
rxUCPkts65To127OctetsForwardeds = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxUCPkts65To127OctetsForwardeds.setStatus('mandatory')
if mibBuilder.loadTexts: rxUCPkts65To127OctetsForwardeds.setDescription('65 to 127 byte unicast packets received which has been forwarded')
rxUCPkts128To255OctetsLocals = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxUCPkts128To255OctetsLocals.setStatus('mandatory')
if mibBuilder.loadTexts: rxUCPkts128To255OctetsLocals.setDescription('128 to 255 byte unicast packets received which has not been forwarded')
rxUCPkts128To255OctetsForwardeds = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxUCPkts128To255OctetsForwardeds.setStatus('mandatory')
if mibBuilder.loadTexts: rxUCPkts128To255OctetsForwardeds.setDescription('128 to 255 byte unicast packets received which has been forwarded')
rxUCPkts256To511OctetsLocals = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxUCPkts256To511OctetsLocals.setStatus('mandatory')
if mibBuilder.loadTexts: rxUCPkts256To511OctetsLocals.setDescription('256 to 511 byte unicast packets received which has not been forwarded')
rxUCPkts256To511OctetsForwardeds = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxUCPkts256To511OctetsForwardeds.setStatus('mandatory')
if mibBuilder.loadTexts: rxUCPkts256To511OctetsForwardeds.setDescription('255 to 511 byte unicast packets received which has been forwarded')
rxUCPkts512To1023OctetsLocals = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxUCPkts512To1023OctetsLocals.setStatus('mandatory')
if mibBuilder.loadTexts: rxUCPkts512To1023OctetsLocals.setDescription('512 to 1023 byte unicast packets received which has not been forwarded')
rxUCPkts512To1023OctetsForwardeds = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxUCPkts512To1023OctetsForwardeds.setStatus('mandatory')
if mibBuilder.loadTexts: rxUCPkts512To1023OctetsForwardeds.setDescription('512 to 1023 byte unicast packets received which has been forwarded')
rxUCPkts1024To1518OctetsLocals = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxUCPkts1024To1518OctetsLocals.setStatus('mandatory')
if mibBuilder.loadTexts: rxUCPkts1024To1518OctetsLocals.setDescription('1024 to 1518 byte unicast packets received which has not been forwarded')
rxUCPkts1024To1518OctetsForwardeds = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxUCPkts1024To1518OctetsForwardeds.setStatus('mandatory')
if mibBuilder.loadTexts: rxUCPkts1024To1518OctetsForwardeds.setDescription('1024 to 1518 byte unicast packets received which has been forwarded')
rxShortErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxShortErrors.setStatus('mandatory')
if mibBuilder.loadTexts: rxShortErrors.setDescription('Receive fragments shorter than minimum ordinary collision fragment.')
rxRuntErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxRuntErrors.setStatus('mandatory')
if mibBuilder.loadTexts: rxRuntErrors.setDescription('Ordinary collision fragments received.')
rxDataRateMMErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxDataRateMMErrors.setStatus('mandatory')
if mibBuilder.loadTexts: rxDataRateMMErrors.setDescription('Data Rate Miss Match Error occurs if the data rate deviation is larger than allowed. This should only occur if problems with the TX oscillator in the adapter transmitting the frame.')
rxMCPkts64OctetsLocals = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxMCPkts64OctetsLocals.setStatus('mandatory')
if mibBuilder.loadTexts: rxMCPkts64OctetsLocals.setDescription('64 byte multicast packets received which has not been forwarded')
rxMCPkts64OctetsForwardeds = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxMCPkts64OctetsForwardeds.setStatus('mandatory')
if mibBuilder.loadTexts: rxMCPkts64OctetsForwardeds.setDescription('64 byte multicast packets received which has been forwarded')
rxMCPkts65To127OctetsLocals = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxMCPkts65To127OctetsLocals.setStatus('mandatory')
if mibBuilder.loadTexts: rxMCPkts65To127OctetsLocals.setDescription('65 to 127 byte multicast packets received which has not been forwarded')
rxMCPkts65To127OctetsForwardeds = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxMCPkts65To127OctetsForwardeds.setStatus('mandatory')
if mibBuilder.loadTexts: rxMCPkts65To127OctetsForwardeds.setDescription('65 to 127 byte multicast packets received which has been forwarded')
rxMCPkts128To255OctetsLocals = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxMCPkts128To255OctetsLocals.setStatus('mandatory')
if mibBuilder.loadTexts: rxMCPkts128To255OctetsLocals.setDescription('128 to 255 byte multicast packets received which has not been forwarded')
rxMCPkts128To255OctetsForwardeds = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxMCPkts128To255OctetsForwardeds.setStatus('mandatory')
if mibBuilder.loadTexts: rxMCPkts128To255OctetsForwardeds.setDescription('128 to 255 byte multicast packets received which has been forwarded')
rxMCPkts256To511OctetsLocals = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxMCPkts256To511OctetsLocals.setStatus('mandatory')
if mibBuilder.loadTexts: rxMCPkts256To511OctetsLocals.setDescription('256 to 511 byte multicast packets received which has not been forwarded')
rxMCPkts256To511OctetsForwardeds = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxMCPkts256To511OctetsForwardeds.setStatus('mandatory')
if mibBuilder.loadTexts: rxMCPkts256To511OctetsForwardeds.setDescription('256 to 511 byte multicast packets received which has been forwarded')
rxMCPkts512To1023OctetsLocals = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxMCPkts512To1023OctetsLocals.setStatus('mandatory')
if mibBuilder.loadTexts: rxMCPkts512To1023OctetsLocals.setDescription('512 to 1023 byte multicast packets received which has not been forwarded')
rxMCPkts512To1023OctetsForwardeds = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxMCPkts512To1023OctetsForwardeds.setStatus('mandatory')
if mibBuilder.loadTexts: rxMCPkts512To1023OctetsForwardeds.setDescription('512 to 1023 byte multicast packets received which has been forwarded')
rxMCPkts1024To1518OctetsLocals = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 2, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxMCPkts1024To1518OctetsLocals.setStatus('mandatory')
if mibBuilder.loadTexts: rxMCPkts1024To1518OctetsLocals.setDescription('1024 to 1518 byte multicast packets received which has not been forwarded')
rxMCPkts1024To1518OctetsForwardeds = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 2, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxMCPkts1024To1518OctetsForwardeds.setStatus('mandatory')
if mibBuilder.loadTexts: rxMCPkts1024To1518OctetsForwardeds.setDescription('1024 to 1518 byte multicast packets received which has been forwarded')
rxOctetsLocalHis = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 2, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxOctetsLocalHis.setStatus('mandatory')
if mibBuilder.loadTexts: rxOctetsLocalHis.setDescription('High part of a 64 bit octet received counter which has not been forwarded')
rxOctetsLocalLos = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 2, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxOctetsLocalLos.setStatus('mandatory')
if mibBuilder.loadTexts: rxOctetsLocalLos.setDescription('Low part of a 64 bit octet received counter which has not been forwarded')
rxOctetsForwardedHis = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 2, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxOctetsForwardedHis.setStatus('mandatory')
if mibBuilder.loadTexts: rxOctetsForwardedHis.setDescription('High part of a 64 bit octet received counter which has been forwarded')
rxOctetsForwardedLos = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 2, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxOctetsForwardedLos.setStatus('mandatory')
if mibBuilder.loadTexts: rxOctetsForwardedLos.setDescription('Low part of a 64 bit octet received counter which has been forwarded')
rxBCPkts64OctetsLocals = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 2, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxBCPkts64OctetsLocals.setStatus('mandatory')
if mibBuilder.loadTexts: rxBCPkts64OctetsLocals.setDescription('64 byte broadcast packets received which has not been forwarded')
rxBCPkts64OctetsForwardeds = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 2, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxBCPkts64OctetsForwardeds.setStatus('mandatory')
if mibBuilder.loadTexts: rxBCPkts64OctetsForwardeds.setDescription('64 byte broadcast packets received which has been forwarded')
rxBCPkts65To127OctetsLocals = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 2, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxBCPkts65To127OctetsLocals.setStatus('mandatory')
if mibBuilder.loadTexts: rxBCPkts65To127OctetsLocals.setDescription('65 to 127 byte broadcast packets received which has not been forwarded')
rxBCPkts65To127OctetsForwardeds = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 2, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxBCPkts65To127OctetsForwardeds.setStatus('mandatory')
if mibBuilder.loadTexts: rxBCPkts65To127OctetsForwardeds.setDescription('65 to 127 byte broadcast packets received which has been forwarded')
rxBCPkts128To255OctetsLocals = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 2, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxBCPkts128To255OctetsLocals.setStatus('mandatory')
if mibBuilder.loadTexts: rxBCPkts128To255OctetsLocals.setDescription('128 to 255 byte broadcast packets received which has not been forwarded')
rxBCPkts128To255OctetsForwardeds = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 2, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxBCPkts128To255OctetsForwardeds.setStatus('mandatory')
if mibBuilder.loadTexts: rxBCPkts128To255OctetsForwardeds.setDescription('128 to 255 byte broadcast packets received which has been forwarded')
rxBCPkts256To511OctetsLocals = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 2, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxBCPkts256To511OctetsLocals.setStatus('mandatory')
if mibBuilder.loadTexts: rxBCPkts256To511OctetsLocals.setDescription('256 to 511 byte broadcast packets received which has not been forwarded')
rxBCPkts256To511OctetsForwardeds = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 2, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxBCPkts256To511OctetsForwardeds.setStatus('mandatory')
if mibBuilder.loadTexts: rxBCPkts256To511OctetsForwardeds.setDescription('256 to 511 byte broadcast packets received which has been forwarded')
rxBCPkts512To1023OctetsLocals = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 2, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxBCPkts512To1023OctetsLocals.setStatus('mandatory')
if mibBuilder.loadTexts: rxBCPkts512To1023OctetsLocals.setDescription('512 to 1023 byte broadcast packets received which has not been forwarded')
rxBCPkts512To1023OctetsForwardeds = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 2, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxBCPkts512To1023OctetsForwardeds.setStatus('mandatory')
if mibBuilder.loadTexts: rxBCPkts512To1023OctetsForwardeds.setDescription('512 to 1023 byte broadcast packets received which has been forwarded')
rxBCPkts1024To1518OctetsLocals = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 2, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxBCPkts1024To1518OctetsLocals.setStatus('mandatory')
if mibBuilder.loadTexts: rxBCPkts1024To1518OctetsLocals.setDescription('1024 to 1518 byte broadcast packets received which has not been forwarded')
rxBCPkts1024To1518OctetsForwardeds = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 2, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxBCPkts1024To1518OctetsForwardeds.setStatus('mandatory')
if mibBuilder.loadTexts: rxBCPkts1024To1518OctetsForwardeds.setDescription('1024 to 1518 byte broadcast packets received which has been forwarded')
rxFilterMACUnexp2ndPortDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 2, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxFilterMACUnexp2ndPortDrops.setStatus('mandatory')
if mibBuilder.loadTexts: rxFilterMACUnexp2ndPortDrops.setDescription('MAC address has been moved from one port to another')
rxFilterIllegalMACDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 2, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxFilterIllegalMACDrops.setStatus('mandatory')
if mibBuilder.loadTexts: rxFilterIllegalMACDrops.setDescription('Indicate more than one MAC address on a port which is not a network port or in general that the filter discards a packet due to an illegal source MAC address')
rxFlowCtrlCollCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 2, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxFlowCtrlCollCounter.setStatus('mandatory')
if mibBuilder.loadTexts: rxFlowCtrlCollCounter.setDescription('This counter counts the number of Flow Control collisions, which are generated due to flow control. Flow control are used when most of the pool memory are used to limit further amount of RX data until memory available. ')
rxVeryLongErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 2, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxVeryLongErrors.setStatus('mandatory')
if mibBuilder.loadTexts: rxVeryLongErrors.setDescription('Occurs only if frame longer than 6000 bytes are received.')
rxLongErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 2, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxLongErrors.setStatus('mandatory')
if mibBuilder.loadTexts: rxLongErrors.setDescription('Occurs if a frame longer than 1518 bytes and shorter than 6000 bytes are received.')
rxPiaOutOfPoolsDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 2, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxPiaOutOfPoolsDrop.setStatus('mandatory')
if mibBuilder.loadTexts: rxPiaOutOfPoolsDrop.setDescription('Reception is aborted due to lack of Pool memory. The switch is overloaded.')
rxManchesterCodeViolationErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 2, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxManchesterCodeViolationErrors.setStatus('mandatory')
if mibBuilder.loadTexts: rxManchesterCodeViolationErrors.setDescription('An illegal symbol received on a 100Base-X port.')
rxRxJabbers = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 2, 1, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxRxJabbers.setStatus('mandatory')
if mibBuilder.loadTexts: rxRxJabbers.setDescription('Jabber is counted instead of a long error if the frame contains dribble bits or FCS error.')
rxNiaOverRunDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 2, 1, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxNiaOverRunDrops.setStatus('mandatory')
if mibBuilder.loadTexts: rxNiaOverRunDrops.setDescription('The NIA RX buffer gets in overrun if the nimbus is overloaded. This should only happen if a configuration is made which loads the Nimbus with more than a load equal to 44 simplex 10Mbit net. ')
rxAllCounterPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 2, 1, 54), OctetString().subtype(subtypeSpec=ValueSizeConstraint(164, 164)).setFixedLength(164)).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxAllCounterPackets.setStatus('mandatory')
if mibBuilder.loadTexts: rxAllCounterPackets.setDescription('A collection of all counters for byte and packet counters. This object is needed to optimise SNMP traffic. The counters in this string are rxStatIndex INTEGER rxOctetsLocalHis Counter rxOctetsLocalLos Counter rxOctetsForwardedHis Counter rxOctetsForwardedLos Counter rxUCPkts64OctetsLocals Counter rxUCPkts64OctetsForwardeds Counter rxUCPkts65To127OctetsLocals Counter rxUCPkts65To127OctetsForwardeds Counter rxUCPkts128To255OctetsLocals Counter rxUCPkts128To255OctetsForwardeds Counter rxUCPkts256To511OctetsLocals Counter rxUCPkts256To511OctetsForwardeds Counter rxUCPkts512To1023OctetsLocals Counter rxUCPkts512To1023OctetsForwardeds Counter rxUCPkts1024To1518OctetsLocals Counter rxUCPkts1024To1518OctetsForwardeds Counter rxMCPkts64OctetsLocals Counter rxMCPkts64OctetsForwardeds Counter rxMCPkts65To127OctetsLocals Counter rxMCPkts65To127OctetsForwardeds Counter rxMCPkts128To255OctetsLocals Counter rxMCPkts128To255OctetsForwardeds Counter rxMCPkts256To511OctetsLocals Counter rxMCPkts256To511OctetsForwardeds Counter rxMCPkts512To1023OctetsLocals Counter rxMCPkts512To1023OctetsForwardeds Counter rxMCPkts1024To1518OctetsLocals Counter rxMCPkts1024To1518OctetsForwardeds Counter rxBCPkts64OctetsLocals Counter rxBCPkts64OctetsForwardeds Counter rxBCPkts65To127OctetsLocals Counter rxBCPkts65To127OctetsForwardeds Counter rxBCPkts128To255OctetsLocals Counter rxBCPkts128To255OctetsForwardeds Counter rxBCPkts256To511OctetsLocals Counter rxBCPkts256To511OctetsForwardeds Counter rxBCPkts512To1023OctetsLocals Counter rxBCPkts512To1023OctetsForwardeds Counter rxBCPkts1024To1518OctetsLocals Counter rxBCPkts1024To1518OctetsForwardeds Counter The values are represented in the OCTET STRING in the listed order, each value stored as a 32 bits big engine value.')
rxAllCounterOthers = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 2, 1, 55), OctetString().subtype(subtypeSpec=ValueSizeConstraint(60, 60)).setFixedLength(60)).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxAllCounterOthers.setStatus('mandatory')
if mibBuilder.loadTexts: rxAllCounterOthers.setDescription('A collection of all counters other than for byte and packet counters. This object is needed to optimise SNMP traffic. The counters in this string are rxStatIndex INTEGER rxShortErrors Counter rxRuntErrors Counter rxDataRateMMErrors Counter rxFilterMACUnexp2ndPortDrops Counter rxFilterIllegalMACDrops Counter rxFlowCtrlCollCounter Counter rxVeryLongErrors Counter rxLongErrors Counter rxPiaOutOfPoolsDrop Counter rxManchesterCodeViolationErrors Counter rxRxJabbers Counter rxNiaOverRunDrops Counter -- Counters from RFC1643 rxAlignErrors Counter rxFCSErrors Counter The values are represented in the OCTET STRING in the listed order, each value stored as a 32 bits big engine value.')
totalRxTxPackets = MibScalar((1, 3, 6, 1, 4, 1, 208, 39, 4, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalRxTxPackets.setStatus('mandatory')
if mibBuilder.loadTexts: totalRxTxPackets.setDescription('This object is used for LED control to display traffic. Values in the string are all packets transmitted and received at each port. The number and order of values equals the ifIndex. Each entry is 4 bytes. The first 4 bytes of the string is the value of portLastChange.')
totalCollisions = MibScalar((1, 3, 6, 1, 4, 1, 208, 39, 4, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalCollisions.setStatus('mandatory')
if mibBuilder.loadTexts: totalCollisions.setDescription('This object is used for LED control to display collision. Values in the string are the total collisions at each port. The number and order of values equals the ifIndex. Each entry is 4 bytes. The first 4 bytes of the string is the value of portLastChange.')
adaptiveForwardModeSampleTime = MibScalar((1, 3, 6, 1, 4, 1, 208, 39, 5, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adaptiveForwardModeSampleTime.setStatus('mandatory')
if mibBuilder.loadTexts: adaptiveForwardModeSampleTime.setDescription('Specify how long (sec) the received packets will be monitored. The resulting forwarding mode will be based on the quality of the packets')
adaptiveForwardModeRuntsOffset = MibScalar((1, 3, 6, 1, 4, 1, 208, 39, 5, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adaptiveForwardModeRuntsOffset.setStatus('mandatory')
if mibBuilder.loadTexts: adaptiveForwardModeRuntsOffset.setDescription('Specifies the minimum amount of runts during the sample time which forces the port out of cutThrough(2). The value is specified in per mille * 1000')
adaptiveForwardModeRuntsRange = MibScalar((1, 3, 6, 1, 4, 1, 208, 39, 5, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adaptiveForwardModeRuntsRange.setStatus('mandatory')
if mibBuilder.loadTexts: adaptiveForwardModeRuntsRange.setDescription('Specifies together with adaptiveForwardModeRuntsOffset the maximum amount of runts allowed during the sample time, which forces the port back to cutThrough(2). The value is specified in per mille * 1000')
adaptiveForwardModeCrcsOffset = MibScalar((1, 3, 6, 1, 4, 1, 208, 39, 5, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adaptiveForwardModeCrcsOffset.setStatus('mandatory')
if mibBuilder.loadTexts: adaptiveForwardModeCrcsOffset.setDescription('Specifies the maximum amount of crc errors during the sample time which forces the port out of Store and Forward. The value is specified in per mille * 1000')
adaptiveForwardModeCrcsRange = MibScalar((1, 3, 6, 1, 4, 1, 208, 39, 5, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adaptiveForwardModeCrcsRange.setStatus('mandatory')
if mibBuilder.loadTexts: adaptiveForwardModeCrcsRange.setDescription('Specifies together with adaptiveForwardModeCrcsOffset the maximum amount of crc errors during the sample time which forces the port out of Store and Forward. The value is specified in per mille * 1000')
chipSetNIA10 = MibIdentifier((1, 3, 6, 1, 4, 1, 208, 39, 6, 1))
chipSetNIA100 = MibIdentifier((1, 3, 6, 1, 4, 1, 208, 39, 6, 2))
cardTable = MibTable((1, 3, 6, 1, 4, 1, 208, 39, 7, 1), )
if mibBuilder.loadTexts: cardTable.setStatus('mandatory')
if mibBuilder.loadTexts: cardTable.setDescription('This table describes which cards a switch system consist of and how they are connected.')
cardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 208, 39, 7, 1, 1), ).setIndexNames((0, "ETH-SWITCH-MIB", "cardNumber"))
if mibBuilder.loadTexts: cardEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cardEntry.setDescription('An entry contains either a card or an expansion card and how many PIMs it contains.')
cardNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cardNumber.setDescription('The card index number.')
cardId = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 7, 1, 1, 2), ProductIds()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardId.setStatus('mandatory')
if mibBuilder.loadTexts: cardId.setDescription('The produce identification the card.')
cardFirstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 7, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardFirstPort.setStatus('mandatory')
if mibBuilder.loadTexts: cardFirstPort.setDescription('The portNumber of the first port on the card.')
cardMaxPims = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 7, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardMaxPims.setStatus('mandatory')
if mibBuilder.loadTexts: cardMaxPims.setDescription('The maximum number of PIMs this card can contain.')
pimTable = MibTable((1, 3, 6, 1, 4, 1, 208, 39, 7, 2), )
if mibBuilder.loadTexts: pimTable.setStatus('mandatory')
if mibBuilder.loadTexts: pimTable.setDescription('This table describes the PIMs inserted in the switch system.')
pimEntry = MibTableRow((1, 3, 6, 1, 4, 1, 208, 39, 7, 2, 1), ).setIndexNames((0, "ETH-SWITCH-MIB", "pimCardNumber"), (0, "ETH-SWITCH-MIB", "pimNumber"))
if mibBuilder.loadTexts: pimEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pimEntry.setDescription('An entry describes the PIM.')
pimCardNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 7, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pimCardNumber.setStatus('mandatory')
if mibBuilder.loadTexts: pimCardNumber.setDescription('The card number in the cardTable that this PIM is inserted in.')
pimNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 7, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pimNumber.setStatus('mandatory')
if mibBuilder.loadTexts: pimNumber.setDescription('The number of the PIM.')
pimId = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 7, 2, 1, 3), ProductIds()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pimId.setStatus('mandatory')
if mibBuilder.loadTexts: pimId.setDescription('The product identification of the PIM.')
pimFirstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 7, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pimFirstPort.setStatus('mandatory')
if mibBuilder.loadTexts: pimFirstPort.setDescription('The portNumber of the first port on the PIM.')
pimNumberOfPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 7, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pimNumberOfPorts.setStatus('mandatory')
if mibBuilder.loadTexts: pimNumberOfPorts.setDescription('The number of ports on the PIM.')
ethSwitchPermVioEvent = NotificationType((1, 3, 6, 1, 4, 1, 208, 39) + (0,1)).setObjects(("ETH-SWITCH-MIB", "portIfIndex"))
if mibBuilder.loadTexts: ethSwitchPermVioEvent.setDescription("This trap is sent when there has been a permanent entry violation. A MAC address has been detected at an other port than the port where it has been configured as a permanent entry. The variable portIfIndex indicates the port where the MAC incorrectly has been detected. The problem can be solved by re-configuring the MAC's permanent entry, or by physical moving the MAC to the port it has been configured for.")
ethSwitchOnlyOneMACEvent = NotificationType((1, 3, 6, 1, 4, 1, 208, 39) + (0,2)).setObjects(("ETH-SWITCH-MIB", "portIfIndex"))
if mibBuilder.loadTexts: ethSwitchOnlyOneMACEvent.setDescription("This trap is sent when a port detects more that one MAC address at a port intended for only one MAC. This Trap can only be sent from a Concentrator Switch where only one MAC is allowed, except from the network port. It can NOT be sent from a Backbone Switch since it allows multiple MAC's at all ports. The variable portIfIndex indicates the port where the MAC limit of one has bee exceeded. The problem can be solved by physical moving the MAC to a spare Concentrator Switch port.")
ethSwitchMACVioEvent = NotificationType((1, 3, 6, 1, 4, 1, 208, 39) + (0,3)).setObjects(("ETH-SWITCH-MIB", "portIfIndex"))
if mibBuilder.loadTexts: ethSwitchMACVioEvent.setDescription('This trap is sent when there has been detected a MAC access control violation. A MAC address has been detected at a port with MAC access restriction, and the MAC was not allowed. The variable portIfIndex indicates the port with the MAC access violation.')
ethSwitchAdaptiveForwEvent = NotificationType((1, 3, 6, 1, 4, 1, 208, 39) + (0,4)).setObjects(("ETH-SWITCH-MIB", "portIfIndex"), ("ETH-SWITCH-MIB", "portIfSwitchMode"), ("ETH-SWITCH-MIB", "portIfSwitchMode"))
if mibBuilder.loadTexts: ethSwitchAdaptiveForwEvent.setDescription('This trap is sent when a port automatically is changing forwarding mode. This will only happen when the port has been configured to Adaptive mode. The syntax is (Portnumber, New mode, Old mode) Mode numbers is: 2 = Cut-Through 3 = Fragment Free 4 = Store and Forward')
ethSwitchMACFilterVioEvent = NotificationType((1, 3, 6, 1, 4, 1, 208, 39) + (0,5)).setObjects(("ETH-SWITCH-MIB", "portIfIndex"))
if mibBuilder.loadTexts: ethSwitchMACFilterVioEvent.setDescription('Port/MAC filter MAC violation on port: %portIfIndex% This trap is sent when there has been detected a MAC address on a port (portIfIndex), where this MAC is not allowed access through the switch. Access restriction is due to entry in the Port/MAC filters of the switch.')
mibBuilder.exportSymbols("ETH-SWITCH-MIB", rxFilterMACUnexp2ndPortDrops=rxFilterMACUnexp2ndPortDrops, ethSwitchOnlyOneMACEvent=ethSwitchOnlyOneMACEvent, txUCPkts512To1023Octets=txUCPkts512To1023Octets, pimCardNumber=pimCardNumber, rxBCPkts128To255OctetsForwardeds=rxBCPkts128To255OctetsForwardeds, rxManchesterCodeViolationErrors=rxManchesterCodeViolationErrors, rxStatIndex=rxStatIndex, portTable=portTable, rxUCPkts512To1023OctetsForwardeds=rxUCPkts512To1023OctetsForwardeds, portIfIndex=portIfIndex, rxRxJabbers=rxRxJabbers, txBCPkts128To255Octets=txBCPkts128To255Octets, totalCollisions=totalCollisions, chipSetNIA100=chipSetNIA100, txUCPkts64Octets=txUCPkts64Octets, txMCPkts256To511Octets=txMCPkts256To511Octets, txForwardedRxError=txForwardedRxError, txMCPkts64Octets=txMCPkts64Octets, defaultSwitchMode=defaultSwitchMode, networkPort=networkPort, adaptiveForwardMode=adaptiveForwardMode, rxUCPkts128To255OctetsForwardeds=rxUCPkts128To255OctetsForwardeds, rxAllCounterOthers=rxAllCounterOthers, rxMCPkts64OctetsForwardeds=rxMCPkts64OctetsForwardeds, portNumber=portNumber, adaptiveForwardModeCrcsOffset=adaptiveForwardModeCrcsOffset, adaptiveForwardModeCrcsRange=adaptiveForwardModeCrcsRange, ProductIds=ProductIds, rxStatEntry=rxStatEntry, rxUCPkts512To1023OctetsLocals=rxUCPkts512To1023OctetsLocals, portIfSpeedSupported=portIfSpeedSupported, rxOctetsLocalLos=rxOctetsLocalLos, rxFlowCtrlCollCounter=rxFlowCtrlCollCounter, txStatIndex=txStatIndex, rxBCPkts512To1023OctetsLocals=rxBCPkts512To1023OctetsLocals, rxMCPkts128To255OctetsLocals=rxMCPkts128To255OctetsLocals, rxUCPkts1024To1518OctetsForwardeds=rxUCPkts1024To1518OctetsForwardeds, rxOctetsForwardedHis=rxOctetsForwardedHis, rxMCPkts256To511OctetsForwardeds=rxMCPkts256To511OctetsForwardeds, txBCPkts512To1023Octets=txBCPkts512To1023Octets, adaptiveForwardModeRuntsRange=adaptiveForwardModeRuntsRange, ethSwitch=ethSwitch, cardEntry=cardEntry, portLED=portLED, chipSetNIA10=chipSetNIA10, portIfDescr=portIfDescr, rxMCPkts128To255OctetsForwardeds=rxMCPkts128To255OctetsForwardeds, adaptiveForwardModeSampleTime=adaptiveForwardModeSampleTime, txDeffereds=txDeffereds, rxDataRateMMErrors=rxDataRateMMErrors, rxBCPkts1024To1518OctetsLocals=rxBCPkts1024To1518OctetsLocals, txUCPkts128To255Octets=txUCPkts128To255Octets, rxBCPkts65To127OctetsForwardeds=rxBCPkts65To127OctetsForwardeds, portIfSwitchMode=portIfSwitchMode, cards=cards, rxBCPkts256To511OctetsForwardeds=rxBCPkts256To511OctetsForwardeds, rxRuntErrors=rxRuntErrors, rxUCPkts64OctetsLocals=rxUCPkts64OctetsLocals, cardId=cardId, ethSwitchMACFilterVioEvent=ethSwitchMACFilterVioEvent, txExcessiveDefferalsErrors=txExcessiveDefferalsErrors, rxBCPkts64OctetsForwardeds=rxBCPkts64OctetsForwardeds, txUCPkts1024To1518Octets=txUCPkts1024To1518Octets, pimTable=pimTable, scSegments=scSegments, portState=portState, txOctetsHis=txOctetsHis, pimNumber=pimNumber, ports=ports, rxUCPkts64OctetsForwardeds=rxUCPkts64OctetsForwardeds, rxUCPkts1024To1518OctetsLocals=rxUCPkts1024To1518OctetsLocals, portIfDuplexSupported=portIfDuplexSupported, txBCPkts65To127Octets=txBCPkts65To127Octets, rxMCPkts512To1023OctetsForwardeds=rxMCPkts512To1023OctetsForwardeds, rxMCPkts65To127OctetsForwardeds=rxMCPkts65To127OctetsForwardeds, rxLongErrors=rxLongErrors, portInterfaceIndex=portInterfaceIndex, txStatTable=txStatTable, control=control, txOctetsLos=txOctetsLos, rxFilterIllegalMACDrops=rxFilterIllegalMACDrops, portIfTable=portIfTable, module=module, txMCPkts128To255Octets=txMCPkts128To255Octets, portPimPortNumber=portPimPortNumber, rxAllCounterPackets=rxAllCounterPackets, portIfLocation=portIfLocation, txMCPkts1024To1518Octets=txMCPkts1024To1518Octets, rxPiaOutOfPoolsDrop=rxPiaOutOfPoolsDrop, cardTable=cardTable, portIfDuplex=portIfDuplex, txUCPkts256To511Octets=txUCPkts256To511Octets, rxShortErrors=rxShortErrors, txBCPkts1024To1518Octets=txBCPkts1024To1518Octets, rxUCPkts65To127OctetsForwardeds=rxUCPkts65To127OctetsForwardeds, portIfSpeedAndDuplex=portIfSpeedAndDuplex, rxMCPkts1024To1518OctetsLocals=rxMCPkts1024To1518OctetsLocals, txAllCounterOthers=txAllCounterOthers, portEntry=portEntry, rxMCPkts65To127OctetsLocals=rxMCPkts65To127OctetsLocals, txStatEntry=txStatEntry, statistic=statistic, txBCPkts256To511Octets=txBCPkts256To511Octets, rxStatTable=rxStatTable, rxUCPkts128To255OctetsLocals=rxUCPkts128To255OctetsLocals, rxUCPkts256To511OctetsLocals=rxUCPkts256To511OctetsLocals, totalRxTxPackets=totalRxTxPackets, pimNumberOfPorts=pimNumberOfPorts, portIfType=portIfType, expansionModule=expansionModule, rxBCPkts256To511OctetsLocals=rxBCPkts256To511OctetsLocals, ethSwitchAdaptiveForwEvent=ethSwitchAdaptiveForwEvent, txLinkDownEvents=txLinkDownEvents, txMCPkts65To127Octets=txMCPkts65To127Octets, portPimNumber=portPimNumber, rxMCPkts64OctetsLocals=rxMCPkts64OctetsLocals, rxMCPkts512To1023OctetsLocals=rxMCPkts512To1023OctetsLocals, portLastChange=portLastChange, rxBCPkts128To255OctetsLocals=rxBCPkts128To255OctetsLocals, txMCPkts512To1023Octets=txMCPkts512To1023Octets, rxMCPkts256To511OctetsLocals=rxMCPkts256To511OctetsLocals, rxMCPkts1024To1518OctetsForwardeds=rxMCPkts1024To1518OctetsForwardeds, portIfEntry=portIfEntry, portCardNumber=portCardNumber, rxUCPkts256To511OctetsForwardeds=rxUCPkts256To511OctetsForwardeds, rxBCPkts1024To1518OctetsForwardeds=rxBCPkts1024To1518OctetsForwardeds, rxUCPkts65To127OctetsLocals=rxUCPkts65To127OctetsLocals, ethSwitchMACVioEvent=ethSwitchMACVioEvent, cardMaxPims=cardMaxPims, rxBCPkts512To1023OctetsForwardeds=rxBCPkts512To1023OctetsForwardeds, adaptiveForwardModeRuntsOffset=adaptiveForwardModeRuntsOffset, pimEntry=pimEntry, txNiaUnderRunDrops=txNiaUnderRunDrops, txAllCounterPackets=txAllCounterPackets, pimId=pimId, cardNumber=cardNumber, ethSwitchPermVioEvent=ethSwitchPermVioEvent, rxNiaOverRunDrops=rxNiaOverRunDrops, portIfThrottleBack=portIfThrottleBack, rxBCPkts65To127OctetsLocals=rxBCPkts65To127OctetsLocals, txBCPkts64Octets=txBCPkts64Octets, rxOctetsForwardedLos=rxOctetsForwardedLos, rxVeryLongErrors=rxVeryLongErrors, chipSets=chipSets, txUCPkts65To127Octets=txUCPkts65To127Octets, rxBCPkts64OctetsLocals=rxBCPkts64OctetsLocals, pimFirstPort=pimFirstPort, defaultThrottleBackMode=defaultThrottleBackMode, cardFirstPort=cardFirstPort, rxOctetsLocalHis=rxOctetsLocalHis)
