#
# PySNMP MIB module ADTRAN-ATLAS-T1-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ADTRAN-ATLAS-T1-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:14:37 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
adATLASModuleInfoFPStatus, = mibBuilder.importSymbols("ADTRAN-ATLAS-MODULE-MIB", "adATLASModuleInfoFPStatus")
adATLASUnitFPStatus, adATLASUnitPortAddress, adATLASUnitSlotAddress = mibBuilder.importSymbols("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitFPStatus", "adATLASUnitPortAddress", "adATLASUnitSlotAddress")
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
dsx1LineStatus, = mibBuilder.importSymbols("RFC1406-MIB", "dsx1LineStatus")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, ObjectIdentity, MibIdentifier, NotificationType, Counter32, ModuleIdentity, Unsigned32, iso, Gauge32, Counter64, Integer32, TimeTicks, IpAddress, enterprises = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "ObjectIdentity", "MibIdentifier", "NotificationType", "Counter32", "ModuleIdentity", "Unsigned32", "iso", "Gauge32", "Counter64", "Integer32", "TimeTicks", "IpAddress", "enterprises")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
adtran = MibIdentifier((1, 3, 6, 1, 4, 1, 664))
adMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 664, 2))
adATLASmg = MibIdentifier((1, 3, 6, 1, 4, 1, 664, 2, 154))
adGenATLASmg = MibIdentifier((1, 3, 6, 1, 4, 1, 664, 2, 154, 1))
adATLAST1mg = MibIdentifier((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 9))
adATLAST1IfNumber = MibScalar((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adATLAST1IfNumber.setStatus('mandatory')
if mibBuilder.loadTexts: adATLAST1IfNumber.setDescription('The number of T1 ports (regardless of their current state) present on this system.')
adATLAST1IfTable = MibTable((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 9, 2), )
if mibBuilder.loadTexts: adATLAST1IfTable.setStatus('mandatory')
if mibBuilder.loadTexts: adATLAST1IfTable.setDescription('The Atlas T1 Interface Status Table')
adATLAST1IfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 9, 2, 1), ).setIndexNames((0, "ADTRAN-ATLAS-T1-MIB", "adATLAST1IfIndex"))
if mibBuilder.loadTexts: adATLAST1IfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: adATLAST1IfEntry.setDescription('An entry in the Atlas T1 Interface Status Table')
adATLAST1IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 9, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adATLAST1IfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: adATLAST1IfIndex.setDescription('This variable indicates the interface number of a particular T1 port within the ATLAS product. This number will be the same as the ifIndex located in the MIB-II interface table.')
adATLAST1IfSlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 9, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adATLAST1IfSlotNum.setStatus('mandatory')
if mibBuilder.loadTexts: adATLAST1IfSlotNum.setDescription('This variable indicates the slot number of a particular ATLAS module with a T1 interface.')
adATLAST1IfPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 9, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adATLAST1IfPortNum.setStatus('mandatory')
if mibBuilder.loadTexts: adATLAST1IfPortNum.setDescription('This variable indicates the port number of a particular T1 interface on an ATLAS module.')
adATLAST1IfAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 9, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adATLAST1IfAlarmStatus.setStatus('mandatory')
if mibBuilder.loadTexts: adATLAST1IfAlarmStatus.setDescription('This variable shows the status of each alarm by setting a bit. If the bit is set the alarm is active. Multiple bits can be set at one time. Bit # ALARM ------ ----- 0x01 LOS 0x02 Red 0x04 Yellow 0x08 Blue 0x10 DS0')
adATLAST1IfRxLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 9, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("zerodb", 1), ("neg7pt5db", 2), ("neg15db", 3), ("neg22pt5db", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adATLAST1IfRxLevel.setStatus('mandatory')
if mibBuilder.loadTexts: adATLAST1IfRxLevel.setDescription('This variable represents the recieved signal strength in dB.')
adATLAST1IfCurrentLOFC = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 9, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adATLAST1IfCurrentLOFC.setStatus('mandatory')
if mibBuilder.loadTexts: adATLAST1IfCurrentLOFC.setDescription('This variable indicates the value of the loss of frame count for the current 15 minute interval.')
adATLAST1IfTotalLOFC = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 9, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adATLAST1IfTotalLOFC.setStatus('mandatory')
if mibBuilder.loadTexts: adATLAST1IfTotalLOFC.setDescription('This variable indicates the value of the loss of frame count for the current 24 hours.')
adATLAST1IfResetPRMStats = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 9, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adATLAST1IfResetPRMStats.setStatus('mandatory')
if mibBuilder.loadTexts: adATLAST1IfResetPRMStats.setDescription('This variable resets the performance monitoring statistics for all of the intervals: current, 15 min, and total.')
adATLAST1IfIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 9, 3), )
if mibBuilder.loadTexts: adATLAST1IfIntervalTable.setStatus('mandatory')
if mibBuilder.loadTexts: adATLAST1IfIntervalTable.setDescription('The Atlas T1 Interface Interval Performance Table')
adATLAST1IfIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 9, 3, 1), ).setIndexNames((0, "ADTRAN-ATLAS-T1-MIB", "adATLAST1IfIntervalIndex"), (0, "ADTRAN-ATLAS-T1-MIB", "adATLAST1IfIntervalNumber"))
if mibBuilder.loadTexts: adATLAST1IfIntervalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: adATLAST1IfIntervalEntry.setDescription('An entry in the Atlas T1 Interface Interval Performance Table')
adATLAST1IfIntervalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 9, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adATLAST1IfIntervalIndex.setStatus('mandatory')
if mibBuilder.loadTexts: adATLAST1IfIntervalIndex.setDescription('This variable indicates the interface number of a particular T1 port within the ATLAS product. This number will be the same as the ifIndex located in the MIB-II interface table.')
adATLAST1IfIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 9, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adATLAST1IfIntervalNumber.setStatus('mandatory')
if mibBuilder.loadTexts: adATLAST1IfIntervalNumber.setDescription('A number between 1 and 96, where 1 is the most recently completed 15 minute interval and 96 is the least recently completed 15 minutes inter- val (assuming that all 96 intervals are valid).')
adATLAST1IfIntervalLOFC = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 9, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adATLAST1IfIntervalLOFC.setStatus('mandatory')
if mibBuilder.loadTexts: adATLAST1IfIntervalLOFC.setDescription('The Loss of Frame Count encountered by a DS1 interface in one of the previous 96, individual 15 minute, intervals.')
adATLAST1IfDS0Table = MibTable((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 9, 4), )
if mibBuilder.loadTexts: adATLAST1IfDS0Table.setStatus('mandatory')
if mibBuilder.loadTexts: adATLAST1IfDS0Table.setDescription('The Atlas T1 Interface DS0 Table')
adATLAST1IfDS0Entry = MibTableRow((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 9, 4, 1), ).setIndexNames((0, "ADTRAN-ATLAS-T1-MIB", "adATLAST1IfDS0Index"))
if mibBuilder.loadTexts: adATLAST1IfDS0Entry.setStatus('mandatory')
if mibBuilder.loadTexts: adATLAST1IfDS0Entry.setDescription('An entry in the Atlas T1 Interface DS0 Table')
adATLAST1IfDS0Index = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 9, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adATLAST1IfDS0Index.setStatus('mandatory')
if mibBuilder.loadTexts: adATLAST1IfDS0Index.setDescription('This variable indicates the interface number of a particular T1 port within the ATLAS product. This number will be the same as the ifIndex located in the MIB-II interface table.')
adATLAST1IfDS0Status = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 9, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(24, 24)).setFixedLength(24)).setMaxAccess("readonly")
if mibBuilder.loadTexts: adATLAST1IfDS0Status.setStatus('mandatory')
if mibBuilder.loadTexts: adATLAST1IfDS0Status.setDescription('This variable shows the overall status of each DS0. There are 24 octets, each corresponding to a single DS0. These are the values for the different status states in each octet: Value(decimal) Status -------------- ------ 0 Unallocated 1 Inactive 2 Signalling Mismatch 3 Active B Channel 4 Active D Channel 5 Maintenance 6 Dedicated(Nailed) 7 Offhook-Originate(RBS) 8 Ringing(RBS)-Restart(ISDN) 9 Waiting Dialtone')
adATLAST1IfDS0Alarm = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 9, 4, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(24, 24)).setFixedLength(24)).setMaxAccess("readonly")
if mibBuilder.loadTexts: adATLAST1IfDS0Alarm.setStatus('mandatory')
if mibBuilder.loadTexts: adATLAST1IfDS0Alarm.setDescription('This variable shows the overall alarm status of each DS0. There are 24 octets, each corresponding to a single DS0. These are the values for the different alarm states in each octet: Value(decimal) Alarm -------------- ------ 0 No Alarm 1 D Channel Alarm 2 Frame Alarm 3 TBOP Alarm 4 PPP Alarm')
adATLAST1IfDS0RxSignalStatusA = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 9, 4, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(24, 24)).setFixedLength(24)).setMaxAccess("readonly")
if mibBuilder.loadTexts: adATLAST1IfDS0RxSignalStatusA.setStatus('mandatory')
if mibBuilder.loadTexts: adATLAST1IfDS0RxSignalStatusA.setDescription("This variable shows the status of the receive signal's A bit in each DS0. There are 24 octets, each corresponding to a single DS0. These are the values for the different status states in each octet: Value(decimal) Status -------------- ------ 0 0 1 1 2 Port Not Active")
adATLAST1IfDS0RxSignalStatusB = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 9, 4, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(24, 24)).setFixedLength(24)).setMaxAccess("readonly")
if mibBuilder.loadTexts: adATLAST1IfDS0RxSignalStatusB.setStatus('mandatory')
if mibBuilder.loadTexts: adATLAST1IfDS0RxSignalStatusB.setDescription("This variable shows the status of the receive signal's B bit in each DS0. There are 24 octets, each corresponding to a single DS0. These are the values for the different status states in each octet: Value(decimal) Status -------------- ------ 0 0 1 1 2 Port Not Active")
adATLAST1IfDS0TxSignalStatusA = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 9, 4, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(24, 24)).setFixedLength(24)).setMaxAccess("readonly")
if mibBuilder.loadTexts: adATLAST1IfDS0TxSignalStatusA.setStatus('mandatory')
if mibBuilder.loadTexts: adATLAST1IfDS0TxSignalStatusA.setDescription("This variable shows the status of the transmit signal's A bit in each DS0. There are 24 octets, each corresponding to a single DS0. These are the values for the different status states in each octet: Value(decimal) Status -------------- ------ 0 0 1 1 2 Transparent 3 Port Not Active")
adATLAST1IfDS0TxSignalStatusB = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 9, 4, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(24, 24)).setFixedLength(24)).setMaxAccess("readonly")
if mibBuilder.loadTexts: adATLAST1IfDS0TxSignalStatusB.setStatus('mandatory')
if mibBuilder.loadTexts: adATLAST1IfDS0TxSignalStatusB.setDescription("This variable shows the status of the transmit signal's B bit in each DS0. There are 24 octets, each corresponding to a single DS0. These are the values for the different status states in each octet: Value(decimal) Status -------------- ------ 0 0 1 1 2 Transparent 3 Port Not Active")
adATLAST1TstTable = MibTable((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 9, 5), )
if mibBuilder.loadTexts: adATLAST1TstTable.setStatus('mandatory')
if mibBuilder.loadTexts: adATLAST1TstTable.setDescription('The Atlas T1 Test Table')
adATLAST1TstEntry = MibTableRow((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 9, 5, 1), ).setIndexNames((0, "ADTRAN-ATLAS-T1-MIB", "adATLAST1TstIndex"))
if mibBuilder.loadTexts: adATLAST1TstEntry.setStatus('mandatory')
if mibBuilder.loadTexts: adATLAST1TstEntry.setDescription('An entry in the Atlas T1 Test Table')
adATLAST1TstIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 9, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adATLAST1TstIndex.setStatus('mandatory')
if mibBuilder.loadTexts: adATLAST1TstIndex.setDescription('This variable indicates the interface number of a particular T1 port within the ATLAS product. This number will be the same as the ifIndex located in the MIB-II interface table.')
adATLAST1TstLocalLpBk = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 9, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("payload", 2), ("line", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adATLAST1TstLocalLpBk.setStatus('mandatory')
if mibBuilder.loadTexts: adATLAST1TstLocalLpBk.setDescription('This variable sets the status of the local loopback for sending test signals.')
adATLAST1TstRemoteLpBk = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 9, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("attInbandLine", 2), ("ansiFDLLine", 3), ("ansiFDLPayload", 4), ("inbandNIU", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adATLAST1TstRemoteLpBk.setStatus('mandatory')
if mibBuilder.loadTexts: adATLAST1TstRemoteLpBk.setDescription('This variable sets the status of the remote loopback for sending test signals.')
adATLAST1TstRemoteLpBkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 9, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("noRemoteLoops", 1), ("remLpUpStarted", 2), ("remLpUpInProgress", 3), ("remLpUpTimeout", 4), ("remLpUpDone", 5), ("remLpDwnStarted", 6), ("remLpDwnInProgress", 7), ("remLpDwnDone", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adATLAST1TstRemoteLpBkStatus.setStatus('mandatory')
if mibBuilder.loadTexts: adATLAST1TstRemoteLpBkStatus.setDescription('This variable indicates the current remote loopback status.')
adATLAST1TstPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 9, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("allOnes", 2), ("allZeros", 3), ("qRSS", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adATLAST1TstPattern.setStatus('mandatory')
if mibBuilder.loadTexts: adATLAST1TstPattern.setDescription('This variable sets the pattern to be sent for testing.')
adATLAST1TstPatternSync = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 9, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("synced", 1), ("noSync", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adATLAST1TstPatternSync.setStatus('mandatory')
if mibBuilder.loadTexts: adATLAST1TstPatternSync.setDescription('This variable shows whether there is sync between transmitting and recieving the test pattern.')
adATLAST1TstPatternSyncLost = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 9, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("syncLost", 1), ("syncNotLost", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adATLAST1TstPatternSyncLost.setStatus('mandatory')
if mibBuilder.loadTexts: adATLAST1TstPatternSyncLost.setDescription('This variable shows whether sync has been lost since it was last cleared.')
adATLAST1TstPatternESs = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 9, 5, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adATLAST1TstPatternESs.setStatus('mandatory')
if mibBuilder.loadTexts: adATLAST1TstPatternESs.setDescription('This variable shows the amount of errored seconds since it was last cleared.')
adATLAST1TstPatternBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 9, 5, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adATLAST1TstPatternBESs.setStatus('mandatory')
if mibBuilder.loadTexts: adATLAST1TstPatternBESs.setDescription('This variable shows the amount of bursty errored seconds since it was last cleared.')
adATLAST1TstPatternSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 9, 5, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adATLAST1TstPatternSESs.setStatus('mandatory')
if mibBuilder.loadTexts: adATLAST1TstPatternSESs.setDescription('This variable shows the amount of severely errored seconds since it was last cleared.')
adATLAST1TstClearResults = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 9, 5, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adATLAST1TstClearResults.setStatus('mandatory')
if mibBuilder.loadTexts: adATLAST1TstClearResults.setDescription('This variable is used to clear the results of the test.')
adATLAST1TstInjectError = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 9, 5, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("inject", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adATLAST1TstInjectError.setStatus('mandatory')
if mibBuilder.loadTexts: adATLAST1TstInjectError.setDescription('This variable is used to inject an error in the test pattern.')
adATLAST1RxYellowActive = NotificationType((1, 3, 6, 1, 4, 1, 664, 2, 154) + (0,15400900)).setObjects(("IF-MIB", "ifIndex"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitSlotAddress"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitPortAddress"), ("ADTRAN-ATLAS-MODULE-MIB", "adATLASModuleInfoFPStatus"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitFPStatus"), ("RFC1406-MIB", "dsx1LineStatus"))
if mibBuilder.loadTexts: adATLAST1RxYellowActive.setDescription('This trap indicates a yellow alarm is being received.')
adATLAST1RxYellowInActive = NotificationType((1, 3, 6, 1, 4, 1, 664, 2, 154) + (0,15400901)).setObjects(("IF-MIB", "ifIndex"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitSlotAddress"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitPortAddress"), ("ADTRAN-ATLAS-MODULE-MIB", "adATLASModuleInfoFPStatus"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitFPStatus"), ("RFC1406-MIB", "dsx1LineStatus"))
if mibBuilder.loadTexts: adATLAST1RxYellowInActive.setDescription('This trap indicates a yellow alarm is no longer being received.')
adATLAST1RxAISActive = NotificationType((1, 3, 6, 1, 4, 1, 664, 2, 154) + (0,15400902)).setObjects(("IF-MIB", "ifIndex"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitSlotAddress"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitPortAddress"), ("ADTRAN-ATLAS-MODULE-MIB", "adATLASModuleInfoFPStatus"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitFPStatus"), ("RFC1406-MIB", "dsx1LineStatus"))
if mibBuilder.loadTexts: adATLAST1RxAISActive.setDescription('This trap indicates an alarm indication signal (AIS) is being received.')
adATLAST1RxAISInActive = NotificationType((1, 3, 6, 1, 4, 1, 664, 2, 154) + (0,15400903)).setObjects(("IF-MIB", "ifIndex"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitSlotAddress"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitPortAddress"), ("ADTRAN-ATLAS-MODULE-MIB", "adATLASModuleInfoFPStatus"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitFPStatus"), ("RFC1406-MIB", "dsx1LineStatus"))
if mibBuilder.loadTexts: adATLAST1RxAISInActive.setDescription('This trap indicates an alarm indication signal (AIS) is no longer being received.')
adATLAST1RedAlarmActive = NotificationType((1, 3, 6, 1, 4, 1, 664, 2, 154) + (0,15400904)).setObjects(("IF-MIB", "ifIndex"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitSlotAddress"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitPortAddress"), ("ADTRAN-ATLAS-MODULE-MIB", "adATLASModuleInfoFPStatus"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitFPStatus"), ("RFC1406-MIB", "dsx1LineStatus"))
if mibBuilder.loadTexts: adATLAST1RedAlarmActive.setDescription('This trap indicates a red alarm is active.')
adATLAST1RedAlarmInActive = NotificationType((1, 3, 6, 1, 4, 1, 664, 2, 154) + (0,15400905)).setObjects(("IF-MIB", "ifIndex"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitSlotAddress"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitPortAddress"), ("ADTRAN-ATLAS-MODULE-MIB", "adATLASModuleInfoFPStatus"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitFPStatus"), ("RFC1406-MIB", "dsx1LineStatus"))
if mibBuilder.loadTexts: adATLAST1RedAlarmInActive.setDescription('This trap indicates a red alarm is inactive.')
adATLAST1LOSActive = NotificationType((1, 3, 6, 1, 4, 1, 664, 2, 154) + (0,15400906)).setObjects(("IF-MIB", "ifIndex"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitSlotAddress"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitPortAddress"), ("ADTRAN-ATLAS-MODULE-MIB", "adATLASModuleInfoFPStatus"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitFPStatus"), ("RFC1406-MIB", "dsx1LineStatus"))
if mibBuilder.loadTexts: adATLAST1LOSActive.setDescription('This trap indicates a loss of signal (LOS) is active.')
adATLAST1LOSInActive = NotificationType((1, 3, 6, 1, 4, 1, 664, 2, 154) + (0,15400907)).setObjects(("IF-MIB", "ifIndex"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitSlotAddress"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitPortAddress"), ("ADTRAN-ATLAS-MODULE-MIB", "adATLASModuleInfoFPStatus"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitFPStatus"), ("RFC1406-MIB", "dsx1LineStatus"))
if mibBuilder.loadTexts: adATLAST1LOSInActive.setDescription('This trap indicates a loss of signal (LOS) is inactive.')
adATLAST1TxAISActive = NotificationType((1, 3, 6, 1, 4, 1, 664, 2, 154) + (0,15400908)).setObjects(("IF-MIB", "ifIndex"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitSlotAddress"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitPortAddress"), ("ADTRAN-ATLAS-MODULE-MIB", "adATLASModuleInfoFPStatus"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitFPStatus"), ("RFC1406-MIB", "dsx1LineStatus"))
if mibBuilder.loadTexts: adATLAST1TxAISActive.setDescription('This trap indicates an alarm indication signal (LOS) is being sent.')
adATLAST1TxAISInActive = NotificationType((1, 3, 6, 1, 4, 1, 664, 2, 154) + (0,15400909)).setObjects(("IF-MIB", "ifIndex"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitSlotAddress"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitPortAddress"), ("ADTRAN-ATLAS-MODULE-MIB", "adATLASModuleInfoFPStatus"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitFPStatus"), ("RFC1406-MIB", "dsx1LineStatus"))
if mibBuilder.loadTexts: adATLAST1TxAISInActive.setDescription('This trap indicates an alarm indication signal (LOS) is no longer being sent.')
adATLAST1TxYellowActive = NotificationType((1, 3, 6, 1, 4, 1, 664, 2, 154) + (0,15400910)).setObjects(("IF-MIB", "ifIndex"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitSlotAddress"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitPortAddress"), ("ADTRAN-ATLAS-MODULE-MIB", "adATLASModuleInfoFPStatus"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitFPStatus"), ("RFC1406-MIB", "dsx1LineStatus"))
if mibBuilder.loadTexts: adATLAST1TxYellowActive.setDescription('This trap indicates a yellow alarm is being sent.')
adATLAST1TxYellowInActive = NotificationType((1, 3, 6, 1, 4, 1, 664, 2, 154) + (0,15400911)).setObjects(("IF-MIB", "ifIndex"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitSlotAddress"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitPortAddress"), ("ADTRAN-ATLAS-MODULE-MIB", "adATLASModuleInfoFPStatus"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitFPStatus"), ("RFC1406-MIB", "dsx1LineStatus"))
if mibBuilder.loadTexts: adATLAST1TxYellowInActive.setDescription('This trap indicates a yellow alarm is no longer being sent.')
adATLAST1CurrentES = NotificationType((1, 3, 6, 1, 4, 1, 664, 2, 154) + (0,15400912)).setObjects(("IF-MIB", "ifIndex"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitSlotAddress"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitPortAddress"), ("ADTRAN-ATLAS-MODULE-MIB", "adATLASModuleInfoFPStatus"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitFPStatus"), ("RFC1406-MIB", "dsx1LineStatus"))
if mibBuilder.loadTexts: adATLAST1CurrentES.setDescription('This trap indicates that the current interval errored second threshold has been exceeded.')
adATLAST1CurrentSES = NotificationType((1, 3, 6, 1, 4, 1, 664, 2, 154) + (0,15400913)).setObjects(("IF-MIB", "ifIndex"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitSlotAddress"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitPortAddress"), ("ADTRAN-ATLAS-MODULE-MIB", "adATLASModuleInfoFPStatus"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitFPStatus"), ("RFC1406-MIB", "dsx1LineStatus"))
if mibBuilder.loadTexts: adATLAST1CurrentSES.setDescription('This trap indicates that the current interval severely errored second threshold has been exceeded.')
adATLAST1CurrentSEFS = NotificationType((1, 3, 6, 1, 4, 1, 664, 2, 154) + (0,15400914)).setObjects(("IF-MIB", "ifIndex"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitSlotAddress"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitPortAddress"), ("ADTRAN-ATLAS-MODULE-MIB", "adATLASModuleInfoFPStatus"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitFPStatus"), ("RFC1406-MIB", "dsx1LineStatus"))
if mibBuilder.loadTexts: adATLAST1CurrentSEFS.setDescription('This trap indicates that the current interval severely errored framing second threshold has been exceeded.')
adATLAST1CurrentUAS = NotificationType((1, 3, 6, 1, 4, 1, 664, 2, 154) + (0,15400915)).setObjects(("IF-MIB", "ifIndex"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitSlotAddress"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitPortAddress"), ("ADTRAN-ATLAS-MODULE-MIB", "adATLASModuleInfoFPStatus"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitFPStatus"), ("RFC1406-MIB", "dsx1LineStatus"))
if mibBuilder.loadTexts: adATLAST1CurrentUAS.setDescription('This trap indicates that the current interval unavailable second threshold has been exceeded.')
adATLAST1CurrentCSS = NotificationType((1, 3, 6, 1, 4, 1, 664, 2, 154) + (0,15400916)).setObjects(("IF-MIB", "ifIndex"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitSlotAddress"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitPortAddress"), ("ADTRAN-ATLAS-MODULE-MIB", "adATLASModuleInfoFPStatus"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitFPStatus"), ("RFC1406-MIB", "dsx1LineStatus"))
if mibBuilder.loadTexts: adATLAST1CurrentCSS.setDescription('This trap indicates that the current interval controlled slip second threshold has been exceeded.')
adATLAST1CurrentPCV = NotificationType((1, 3, 6, 1, 4, 1, 664, 2, 154) + (0,15400917)).setObjects(("IF-MIB", "ifIndex"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitSlotAddress"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitPortAddress"), ("ADTRAN-ATLAS-MODULE-MIB", "adATLASModuleInfoFPStatus"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitFPStatus"), ("RFC1406-MIB", "dsx1LineStatus"))
if mibBuilder.loadTexts: adATLAST1CurrentPCV.setDescription('This trap indicates that the current interval path coding violations threshold has been exceeded.')
adATLAST1CurrentLES = NotificationType((1, 3, 6, 1, 4, 1, 664, 2, 154) + (0,15400918)).setObjects(("IF-MIB", "ifIndex"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitSlotAddress"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitPortAddress"), ("ADTRAN-ATLAS-MODULE-MIB", "adATLASModuleInfoFPStatus"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitFPStatus"), ("RFC1406-MIB", "dsx1LineStatus"))
if mibBuilder.loadTexts: adATLAST1CurrentLES.setDescription('This trap indicates that the current interval line errored second threshold has been exceeded.')
adATLAST1CurrentLCV = NotificationType((1, 3, 6, 1, 4, 1, 664, 2, 154) + (0,15400919)).setObjects(("IF-MIB", "ifIndex"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitSlotAddress"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitPortAddress"), ("ADTRAN-ATLAS-MODULE-MIB", "adATLASModuleInfoFPStatus"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitFPStatus"), ("RFC1406-MIB", "dsx1LineStatus"))
if mibBuilder.loadTexts: adATLAST1CurrentLCV.setDescription('This trap indicates that the current interval line code violations threshold has been exceeded.')
adATLAST1TotalES = NotificationType((1, 3, 6, 1, 4, 1, 664, 2, 154) + (0,15400920)).setObjects(("IF-MIB", "ifIndex"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitSlotAddress"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitPortAddress"), ("ADTRAN-ATLAS-MODULE-MIB", "adATLASModuleInfoFPStatus"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitFPStatus"), ("RFC1406-MIB", "dsx1LineStatus"))
if mibBuilder.loadTexts: adATLAST1TotalES.setDescription('This trap indicates that the total errored second threshold has been exceeded.')
adATLAST1TotalSES = NotificationType((1, 3, 6, 1, 4, 1, 664, 2, 154) + (0,15400921)).setObjects(("IF-MIB", "ifIndex"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitSlotAddress"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitPortAddress"), ("ADTRAN-ATLAS-MODULE-MIB", "adATLASModuleInfoFPStatus"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitFPStatus"), ("RFC1406-MIB", "dsx1LineStatus"))
if mibBuilder.loadTexts: adATLAST1TotalSES.setDescription('This trap indicates that the total severely errored second threshold has been exceeded.')
adATLAST1TotalSEFS = NotificationType((1, 3, 6, 1, 4, 1, 664, 2, 154) + (0,15400922)).setObjects(("IF-MIB", "ifIndex"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitSlotAddress"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitPortAddress"), ("ADTRAN-ATLAS-MODULE-MIB", "adATLASModuleInfoFPStatus"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitFPStatus"), ("RFC1406-MIB", "dsx1LineStatus"))
if mibBuilder.loadTexts: adATLAST1TotalSEFS.setDescription('This trap indicates that the total severely errored framing second threshold has been exceeded.')
adATLAST1TotalUAS = NotificationType((1, 3, 6, 1, 4, 1, 664, 2, 154) + (0,15400923)).setObjects(("IF-MIB", "ifIndex"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitSlotAddress"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitPortAddress"), ("ADTRAN-ATLAS-MODULE-MIB", "adATLASModuleInfoFPStatus"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitFPStatus"), ("RFC1406-MIB", "dsx1LineStatus"))
if mibBuilder.loadTexts: adATLAST1TotalUAS.setDescription('This trap indicates that the total unavailable second threshold has been exceeded.')
adATLAST1TotalCSS = NotificationType((1, 3, 6, 1, 4, 1, 664, 2, 154) + (0,15400924)).setObjects(("IF-MIB", "ifIndex"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitSlotAddress"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitPortAddress"), ("ADTRAN-ATLAS-MODULE-MIB", "adATLASModuleInfoFPStatus"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitFPStatus"), ("RFC1406-MIB", "dsx1LineStatus"))
if mibBuilder.loadTexts: adATLAST1TotalCSS.setDescription('This trap indicates that the total controlled slip second threshold has been exceeded.')
adATLAST1TotalPCV = NotificationType((1, 3, 6, 1, 4, 1, 664, 2, 154) + (0,15400925)).setObjects(("IF-MIB", "ifIndex"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitSlotAddress"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitPortAddress"), ("ADTRAN-ATLAS-MODULE-MIB", "adATLASModuleInfoFPStatus"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitFPStatus"), ("RFC1406-MIB", "dsx1LineStatus"))
if mibBuilder.loadTexts: adATLAST1TotalPCV.setDescription('This trap indicates that the total path coding violations threshold has been exceeded.')
adATLAST1TotalLES = NotificationType((1, 3, 6, 1, 4, 1, 664, 2, 154) + (0,15400926)).setObjects(("IF-MIB", "ifIndex"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitSlotAddress"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitPortAddress"), ("ADTRAN-ATLAS-MODULE-MIB", "adATLASModuleInfoFPStatus"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitFPStatus"), ("RFC1406-MIB", "dsx1LineStatus"))
if mibBuilder.loadTexts: adATLAST1TotalLES.setDescription('This trap indicates that the total line errored second threshold has been exceeded.')
adATLAST1TotalLCV = NotificationType((1, 3, 6, 1, 4, 1, 664, 2, 154) + (0,15400927)).setObjects(("IF-MIB", "ifIndex"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitSlotAddress"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitPortAddress"), ("ADTRAN-ATLAS-MODULE-MIB", "adATLASModuleInfoFPStatus"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitFPStatus"), ("RFC1406-MIB", "dsx1LineStatus"))
if mibBuilder.loadTexts: adATLAST1TotalLCV.setDescription('This trap indicates that the total line code violations threshold has been exceeded.')
mibBuilder.exportSymbols("ADTRAN-ATLAS-T1-MIB", adATLAST1IfIntervalLOFC=adATLAST1IfIntervalLOFC, adATLAST1IfDS0Entry=adATLAST1IfDS0Entry, adATLAST1TstPatternSync=adATLAST1TstPatternSync, adATLAST1mg=adATLAST1mg, adATLAST1IfTable=adATLAST1IfTable, adATLAST1CurrentSEFS=adATLAST1CurrentSEFS, adATLAST1RxAISActive=adATLAST1RxAISActive, adATLAST1IfEntry=adATLAST1IfEntry, adATLAST1IfIntervalNumber=adATLAST1IfIntervalNumber, adATLAST1IfIntervalTable=adATLAST1IfIntervalTable, adATLAST1TstIndex=adATLAST1TstIndex, adATLAST1IfIndex=adATLAST1IfIndex, adATLAST1CurrentES=adATLAST1CurrentES, adATLAST1IfDS0RxSignalStatusA=adATLAST1IfDS0RxSignalStatusA, adGenATLASmg=adGenATLASmg, adATLAST1CurrentLES=adATLAST1CurrentLES, adATLAST1TxYellowInActive=adATLAST1TxYellowInActive, adATLAST1CurrentSES=adATLAST1CurrentSES, adATLAST1TstPattern=adATLAST1TstPattern, adATLAST1TxAISActive=adATLAST1TxAISActive, adATLAST1TstPatternBESs=adATLAST1TstPatternBESs, adATLAST1RxYellowActive=adATLAST1RxYellowActive, adATLAST1IfDS0Table=adATLAST1IfDS0Table, adtran=adtran, adATLAST1TotalES=adATLAST1TotalES, adATLAST1TotalSES=adATLAST1TotalSES, adATLASmg=adATLASmg, adATLAST1IfDS0Index=adATLAST1IfDS0Index, adATLAST1TstInjectError=adATLAST1TstInjectError, adATLAST1TotalCSS=adATLAST1TotalCSS, adATLAST1IfDS0TxSignalStatusB=adATLAST1IfDS0TxSignalStatusB, adATLAST1IfPortNum=adATLAST1IfPortNum, adATLAST1IfDS0Status=adATLAST1IfDS0Status, adMgmt=adMgmt, adATLAST1TstPatternSyncLost=adATLAST1TstPatternSyncLost, adATLAST1TstRemoteLpBkStatus=adATLAST1TstRemoteLpBkStatus, adATLAST1TstLocalLpBk=adATLAST1TstLocalLpBk, adATLAST1IfRxLevel=adATLAST1IfRxLevel, adATLAST1TotalLCV=adATLAST1TotalLCV, adATLAST1RxAISInActive=adATLAST1RxAISInActive, adATLAST1IfIntervalIndex=adATLAST1IfIntervalIndex, adATLAST1TotalSEFS=adATLAST1TotalSEFS, adATLAST1CurrentUAS=adATLAST1CurrentUAS, adATLAST1IfDS0RxSignalStatusB=adATLAST1IfDS0RxSignalStatusB, adATLAST1TstClearResults=adATLAST1TstClearResults, adATLAST1TotalUAS=adATLAST1TotalUAS, adATLAST1TotalPCV=adATLAST1TotalPCV, adATLAST1TstTable=adATLAST1TstTable, adATLAST1IfCurrentLOFC=adATLAST1IfCurrentLOFC, adATLAST1LOSInActive=adATLAST1LOSInActive, adATLAST1IfTotalLOFC=adATLAST1IfTotalLOFC, adATLAST1IfIntervalEntry=adATLAST1IfIntervalEntry, adATLAST1TstRemoteLpBk=adATLAST1TstRemoteLpBk, adATLAST1RedAlarmActive=adATLAST1RedAlarmActive, adATLAST1RedAlarmInActive=adATLAST1RedAlarmInActive, adATLAST1LOSActive=adATLAST1LOSActive, adATLAST1CurrentCSS=adATLAST1CurrentCSS, adATLAST1IfResetPRMStats=adATLAST1IfResetPRMStats, adATLAST1RxYellowInActive=adATLAST1RxYellowInActive, adATLAST1CurrentPCV=adATLAST1CurrentPCV, adATLAST1IfNumber=adATLAST1IfNumber, adATLAST1TotalLES=adATLAST1TotalLES, adATLAST1TstPatternSESs=adATLAST1TstPatternSESs, adATLAST1CurrentLCV=adATLAST1CurrentLCV, adATLAST1IfDS0Alarm=adATLAST1IfDS0Alarm, adATLAST1TxYellowActive=adATLAST1TxYellowActive, adATLAST1TstEntry=adATLAST1TstEntry, adATLAST1IfAlarmStatus=adATLAST1IfAlarmStatus, adATLAST1TstPatternESs=adATLAST1TstPatternESs, adATLAST1TxAISInActive=adATLAST1TxAISInActive, adATLAST1IfDS0TxSignalStatusA=adATLAST1IfDS0TxSignalStatusA, adATLAST1IfSlotNum=adATLAST1IfSlotNum)
