#
# PySNMP MIB module DGPRPM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DGPRPM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:42:15 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
iso, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, TimeTicks, Unsigned32, ModuleIdentity, NotificationType, Bits, IpAddress, Gauge32, Counter64, Integer32, MibIdentifier, Counter32, enterprises = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "TimeTicks", "Unsigned32", "ModuleIdentity", "NotificationType", "Bits", "IpAddress", "Gauge32", "Counter64", "Integer32", "MibIdentifier", "Counter32", "enterprises")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
dgp = MibIdentifier((1, 3, 6, 1, 4, 1, 17420))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 17420, 1))
hardware = MibIdentifier((1, 3, 6, 1, 4, 1, 17420, 1, 1))
rpm = MibIdentifier((1, 3, 6, 1, 4, 1, 17420, 1, 1, 3))
cps = MibIdentifier((1, 3, 6, 1, 4, 1, 17420, 1, 1, 4))
protocol = MibScalar((1, 3, 6, 1, 4, 1, 17420, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("ups01", 0), ("ups02", 1), ("rpm", 2), ("cps", 3), ("ats", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: protocol.setStatus('mandatory')
if mibBuilder.loadTexts: protocol.setDescription('select protocol')
rpmNumber = MibScalar((1, 3, 6, 1, 4, 1, 17420, 1, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmNumber.setStatus('mandatory')
if mibBuilder.loadTexts: rpmNumber.setDescription('Indicate how many rpm attached to this system.')
rpmTable = MibTable((1, 3, 6, 1, 4, 1, 17420, 1, 1, 3, 2), )
if mibBuilder.loadTexts: rpmTable.setStatus('mandatory')
if mibBuilder.loadTexts: rpmTable.setDescription('The number of entries is contained in the rpmNumber OID.')
accessTable = MibTable((1, 3, 6, 1, 4, 1, 17420, 1, 1, 999, 1, 1), )
if mibBuilder.loadTexts: accessTable.setStatus('mandatory')
if mibBuilder.loadTexts: accessTable.setDescription('')
rpmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17420, 1, 1, 3, 2, 1), ).setIndexNames((0, "DGPRPM-MIB", "rpmID"))
if mibBuilder.loadTexts: rpmEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rpmEntry.setDescription('An entry containing information of an rpm.')
rpmID = MibTableColumn((1, 3, 6, 1, 4, 1, 17420, 1, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmID.setStatus('mandatory')
if mibBuilder.loadTexts: rpmID.setDescription('The ID number of rpm.')
rpmOutletNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 17420, 1, 1, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmOutletNumber.setStatus('mandatory')
if mibBuilder.loadTexts: rpmOutletNumber.setDescription('The number of outlets for the rpm.')
rpmOutletState = MibTableColumn((1, 3, 6, 1, 4, 1, 17420, 1, 1, 3, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmOutletState.setStatus('mandatory')
if mibBuilder.loadTexts: rpmOutletState.setDescription("Getting this OID will cause the status of all outlets to be returned. This OID is provided for informational purposes only. The format of the data returned is a character string consisting of a character from '0' to '3'. '0' if the outlet is off. '1' if the outlet is on. '2' if the outlet is in shutdown pending state. '3' if the outlet is fault. A comma character will delimit each outlet entry in the string. For exampe: If the returned string is '1,2,0,3', it means the iSwith has 4 outlets and the outlets status are the following: outlet 1 is on, outlet 2 is in shutdown pending state, outlet 3 is off, outlet 4 is fault. ")
rpmControlType = MibTableColumn((1, 3, 6, 1, 4, 1, 17420, 1, 1, 3, 2, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rpmControlType.setStatus('mandatory')
if mibBuilder.loadTexts: rpmControlType.setDescription("Getting this OID will cause the status of all outlets to be returned. The format of the data returned is a character string consisting of a character from '0' to '2'. '0' if the outlet is instant shutdown. '1' if the outlet is safe shutdown. '2' if the outlet is safe reboot. A comma character will delimit each outlet entry in the string. For exampe: If the returned string is '1,2,0,1', it means the iSwith has 4 outlets and the outlets status are the following: outlet 1 is safe shutdown, outlet 2 is safe reboot, outlet 3 is instant shutdown, outlet 4 is safe shutdown. ")
rpmInternetLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 17420, 1, 1, 3, 2, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rpmInternetLocal.setStatus('mandatory')
if mibBuilder.loadTexts: rpmInternetLocal.setDescription("Getting this OID will cause the status of all outlets to be returned. The format of the data returned is a character string consisting of a character from '0' to '1'. '0' if the outlet is Internet. '1' if the outlet is Local. A comma character will delimit each outlet entry in the string. For exampe: If the returned string is '1,1,0,1', it means the iSwith has 4 outlets and the outlets status are the following: outlet 1 is Local, outlet 2 is Local, outlet 3 is Internet, outlet 4 is Local. ")
rpmName = MibTableColumn((1, 3, 6, 1, 4, 1, 17420, 1, 1, 3, 2, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rpmName.setStatus('mandatory')
if mibBuilder.loadTexts: rpmName.setDescription('')
rpmOutletA = MibTableColumn((1, 3, 6, 1, 4, 1, 17420, 1, 1, 3, 2, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rpmOutletA.setStatus('mandatory')
if mibBuilder.loadTexts: rpmOutletA.setDescription('')
rpmOutletB = MibTableColumn((1, 3, 6, 1, 4, 1, 17420, 1, 1, 3, 2, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rpmOutletB.setStatus('mandatory')
if mibBuilder.loadTexts: rpmOutletB.setDescription('')
rpmOutletC = MibTableColumn((1, 3, 6, 1, 4, 1, 17420, 1, 1, 3, 2, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rpmOutletC.setStatus('mandatory')
if mibBuilder.loadTexts: rpmOutletC.setDescription('')
rpmOutletD = MibTableColumn((1, 3, 6, 1, 4, 1, 17420, 1, 1, 3, 2, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rpmOutletD.setStatus('mandatory')
if mibBuilder.loadTexts: rpmOutletD.setDescription('')
rpmOutletE = MibTableColumn((1, 3, 6, 1, 4, 1, 17420, 1, 1, 3, 2, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rpmOutletE.setStatus('mandatory')
if mibBuilder.loadTexts: rpmOutletE.setDescription('')
rpmOutletF = MibTableColumn((1, 3, 6, 1, 4, 1, 17420, 1, 1, 3, 2, 1, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rpmOutletF.setStatus('mandatory')
if mibBuilder.loadTexts: rpmOutletF.setDescription('')
rpmOutletG = MibTableColumn((1, 3, 6, 1, 4, 1, 17420, 1, 1, 3, 2, 1, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rpmOutletG.setStatus('mandatory')
if mibBuilder.loadTexts: rpmOutletG.setDescription('')
rpmOutletH = MibTableColumn((1, 3, 6, 1, 4, 1, 17420, 1, 1, 3, 2, 1, 14), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rpmOutletH.setStatus('mandatory')
if mibBuilder.loadTexts: rpmOutletH.setDescription('')
rpmDelayA = MibTableColumn((1, 3, 6, 1, 4, 1, 17420, 1, 1, 3, 2, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rpmDelayA.setStatus('mandatory')
if mibBuilder.loadTexts: rpmDelayA.setDescription('')
rpmDelayB = MibTableColumn((1, 3, 6, 1, 4, 1, 17420, 1, 1, 3, 2, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rpmDelayB.setStatus('mandatory')
if mibBuilder.loadTexts: rpmDelayB.setDescription('')
rpmDelayC = MibTableColumn((1, 3, 6, 1, 4, 1, 17420, 1, 1, 3, 2, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rpmDelayC.setStatus('mandatory')
if mibBuilder.loadTexts: rpmDelayC.setDescription('')
rpmDelayD = MibTableColumn((1, 3, 6, 1, 4, 1, 17420, 1, 1, 3, 2, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rpmDelayD.setStatus('mandatory')
if mibBuilder.loadTexts: rpmDelayD.setDescription('')
rpmDelayE = MibTableColumn((1, 3, 6, 1, 4, 1, 17420, 1, 1, 3, 2, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rpmDelayE.setStatus('mandatory')
if mibBuilder.loadTexts: rpmDelayE.setDescription('')
rpmDelayF = MibTableColumn((1, 3, 6, 1, 4, 1, 17420, 1, 1, 3, 2, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rpmDelayF.setStatus('mandatory')
if mibBuilder.loadTexts: rpmDelayF.setDescription('')
rpmDelayG = MibTableColumn((1, 3, 6, 1, 4, 1, 17420, 1, 1, 3, 2, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rpmDelayG.setStatus('mandatory')
if mibBuilder.loadTexts: rpmDelayG.setDescription('')
rpmDelayH = MibTableColumn((1, 3, 6, 1, 4, 1, 17420, 1, 1, 3, 2, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rpmDelayH.setStatus('mandatory')
if mibBuilder.loadTexts: rpmDelayH.setDescription('')
rpmResumeDelayA = MibTableColumn((1, 3, 6, 1, 4, 1, 17420, 1, 1, 3, 2, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rpmResumeDelayA.setStatus('mandatory')
if mibBuilder.loadTexts: rpmResumeDelayA.setDescription('')
rpmResumeDelayB = MibTableColumn((1, 3, 6, 1, 4, 1, 17420, 1, 1, 3, 2, 1, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rpmResumeDelayB.setStatus('mandatory')
if mibBuilder.loadTexts: rpmResumeDelayB.setDescription('')
rpmResumeDelayC = MibTableColumn((1, 3, 6, 1, 4, 1, 17420, 1, 1, 3, 2, 1, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rpmResumeDelayC.setStatus('mandatory')
if mibBuilder.loadTexts: rpmResumeDelayC.setDescription('')
rpmResumeDelayD = MibTableColumn((1, 3, 6, 1, 4, 1, 17420, 1, 1, 3, 2, 1, 26), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rpmResumeDelayD.setStatus('mandatory')
if mibBuilder.loadTexts: rpmResumeDelayD.setDescription('')
rpmResumeDelayE = MibTableColumn((1, 3, 6, 1, 4, 1, 17420, 1, 1, 3, 2, 1, 27), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rpmResumeDelayE.setStatus('mandatory')
if mibBuilder.loadTexts: rpmResumeDelayE.setDescription('')
rpmResumeDelayF = MibTableColumn((1, 3, 6, 1, 4, 1, 17420, 1, 1, 3, 2, 1, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rpmResumeDelayF.setStatus('mandatory')
if mibBuilder.loadTexts: rpmResumeDelayF.setDescription('')
rpmResumeDelayG = MibTableColumn((1, 3, 6, 1, 4, 1, 17420, 1, 1, 3, 2, 1, 29), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rpmResumeDelayG.setStatus('mandatory')
if mibBuilder.loadTexts: rpmResumeDelayG.setDescription('')
rpmResumeDelayH = MibTableColumn((1, 3, 6, 1, 4, 1, 17420, 1, 1, 3, 2, 1, 30), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rpmResumeDelayH.setStatus('mandatory')
if mibBuilder.loadTexts: rpmResumeDelayH.setDescription('')
ats = MibIdentifier((1, 3, 6, 1, 4, 1, 17420, 1, 1, 5))
accessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17420, 1, 1, 999, 1, 1, 1), ).setIndexNames((0, "DGPRPM-MIB", "accessNo"))
if mibBuilder.loadTexts: accessEntry.setStatus('mandatory')
if mibBuilder.loadTexts: accessEntry.setDescription('')
rpmSetEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 17420, 1, 1, 3, 3))
rpmSetID = MibScalar((1, 3, 6, 1, 4, 1, 17420, 1, 1, 3, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rpmSetID.setStatus('mandatory')
if mibBuilder.loadTexts: rpmSetID.setDescription('The ID number of rpm.')
rpmOnNumber = MibScalar((1, 3, 6, 1, 4, 1, 17420, 1, 1, 3, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("none", 0), ("outletA", 1), ("outletB", 2), ("outletC", 3), ("outletD", 4), ("outletE", 5), ("outletF", 6), ("outletG", 7), ("outletH", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rpmOnNumber.setStatus('mandatory')
if mibBuilder.loadTexts: rpmOnNumber.setDescription('The on number of outlets for the rpm.')
rpmOffNumber = MibScalar((1, 3, 6, 1, 4, 1, 17420, 1, 1, 3, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("none", 0), ("outletA", 1), ("outletB", 2), ("outletC", 3), ("outletD", 4), ("outletE", 5), ("outletF", 6), ("outletG", 7), ("outletH", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rpmOffNumber.setStatus('mandatory')
if mibBuilder.loadTexts: rpmOffNumber.setDescription('The off number of outlets for the rpm.')
rpmAllOnOff = MibScalar((1, 3, 6, 1, 4, 1, 17420, 1, 1, 3, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rpmAllOnOff.setStatus('mandatory')
if mibBuilder.loadTexts: rpmAllOnOff.setDescription('The all outlets on/off for the rpm. 0 for all outlets off, 1 for all outlets on')
rpmScheduleTable = MibTable((1, 3, 6, 1, 4, 1, 17420, 1, 1, 3, 4), )
if mibBuilder.loadTexts: rpmScheduleTable.setStatus('mandatory')
if mibBuilder.loadTexts: rpmScheduleTable.setDescription('')
rpmScheduleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17420, 1, 1, 3, 4, 1), ).setIndexNames((0, "DGPRPM-MIB", "rpmScheduleIndex"))
if mibBuilder.loadTexts: rpmScheduleEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rpmScheduleEntry.setDescription('An entry containing information of an rpm.')
rpmScheduleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17420, 1, 1, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmScheduleIndex.setStatus('mandatory')
if mibBuilder.loadTexts: rpmScheduleIndex.setDescription('')
rpmScheduleID = MibTableColumn((1, 3, 6, 1, 4, 1, 17420, 1, 1, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rpmScheduleID.setStatus('mandatory')
if mibBuilder.loadTexts: rpmScheduleID.setDescription('The Schedule shutdown ID number of rpm.')
rpmOutlet = MibTableColumn((1, 3, 6, 1, 4, 1, 17420, 1, 1, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("outletA", 1), ("outletB", 2), ("outletC", 3), ("outletD", 4), ("outletE", 5), ("outletF", 6), ("outletG", 7), ("outletH", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rpmOutlet.setStatus('mandatory')
if mibBuilder.loadTexts: rpmOutlet.setDescription('The specified outlet in rpm.')
rpmOutletAction = MibTableColumn((1, 3, 6, 1, 4, 1, 17420, 1, 1, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rpmOutletAction.setStatus('mandatory')
if mibBuilder.loadTexts: rpmOutletAction.setDescription('On/Off schedule entry.')
rpmPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 17420, 1, 1, 3, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("once", 1), ("everySunday", 2), ("everyMonday", 3), ("everyTuesday", 4), ("everyWednesday", 5), ("everyThursday", 6), ("everyFriday", 7), ("everySaturday", 8), ("everyDay", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rpmPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: rpmPeriod.setDescription('The period of shutdown.')
rpmDate = MibTableColumn((1, 3, 6, 1, 4, 1, 17420, 1, 1, 3, 4, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rpmDate.setStatus('mandatory')
if mibBuilder.loadTexts: rpmDate.setDescription('The shutdown date.')
rpmTime = MibTableColumn((1, 3, 6, 1, 4, 1, 17420, 1, 1, 3, 4, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rpmTime.setStatus('mandatory')
if mibBuilder.loadTexts: rpmTime.setDescription('The shutdown time.')
rpmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 17420, 1, 1, 3, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("clear", 0), ("accept", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rpmStatus.setStatus('mandatory')
if mibBuilder.loadTexts: rpmStatus.setDescription('Accept/Clear schedule entry.')
cpsNumber = MibScalar((1, 3, 6, 1, 4, 1, 17420, 1, 1, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cpsNumber.setDescription('Indicate how many cps attached to this system.')
cpsTable = MibTable((1, 3, 6, 1, 4, 1, 17420, 1, 1, 4, 2), )
if mibBuilder.loadTexts: cpsTable.setStatus('mandatory')
if mibBuilder.loadTexts: cpsTable.setDescription('The number of entries is contained in the cpsNumber OID.')
cpsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17420, 1, 1, 4, 2, 1), ).setIndexNames((0, "DGPRPM-MIB", "cpsID"))
if mibBuilder.loadTexts: cpsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cpsEntry.setDescription('An entry containing information of an cps.')
cpsID = MibTableColumn((1, 3, 6, 1, 4, 1, 17420, 1, 1, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsID.setStatus('mandatory')
if mibBuilder.loadTexts: cpsID.setDescription('The ID number of cps.')
cpsValue = MibTableColumn((1, 3, 6, 1, 4, 1, 17420, 1, 1, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsValue.setStatus('mandatory')
if mibBuilder.loadTexts: cpsValue.setDescription('Indicate the current of cps detect.')
cpsThreshold1 = MibTableColumn((1, 3, 6, 1, 4, 1, 17420, 1, 1, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("alarm", 0), ("normal", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsThreshold1.setStatus('mandatory')
if mibBuilder.loadTexts: cpsThreshold1.setDescription('Indicate current threshold 1.')
cpsThreshold2 = MibTableColumn((1, 3, 6, 1, 4, 1, 17420, 1, 1, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("alarm", 0), ("normal", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsThreshold2.setStatus('mandatory')
if mibBuilder.loadTexts: cpsThreshold2.setDescription('Indicate current threshold 2.')
cpsSetTable = MibTable((1, 3, 6, 1, 4, 1, 17420, 1, 1, 4, 3), )
if mibBuilder.loadTexts: cpsSetTable.setStatus('mandatory')
if mibBuilder.loadTexts: cpsSetTable.setDescription('The number of entries is contained in the cpsNumber OID.')
cpsSetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17420, 1, 1, 4, 3, 1), ).setIndexNames((0, "DGPRPM-MIB", "cpsIDIndex"))
if mibBuilder.loadTexts: cpsSetEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cpsSetEntry.setDescription('An entry containing information of an cps.')
cpsIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17420, 1, 1, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsIDIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cpsIDIndex.setDescription('The ID number of cps.')
cpsSetThreshold1 = MibTableColumn((1, 3, 6, 1, 4, 1, 17420, 1, 1, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSetThreshold1.setStatus('mandatory')
if mibBuilder.loadTexts: cpsSetThreshold1.setDescription('Set current threshold 1.')
cpsSetThreshold2 = MibTableColumn((1, 3, 6, 1, 4, 1, 17420, 1, 1, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSetThreshold2.setStatus('mandatory')
if mibBuilder.loadTexts: cpsSetThreshold2.setDescription('Set current threshold 2.')
atsIdentification = MibScalar((1, 3, 6, 1, 4, 1, 17420, 1, 1, 5, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atsIdentification.setStatus('mandatory')
if mibBuilder.loadTexts: atsIdentification.setDescription('')
atsInputPowerSourceA = MibScalar((1, 3, 6, 1, 4, 1, 17420, 1, 1, 5, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atsInputPowerSourceA.setStatus('mandatory')
if mibBuilder.loadTexts: atsInputPowerSourceA.setDescription('')
atsInputPowerSourceB = MibScalar((1, 3, 6, 1, 4, 1, 17420, 1, 1, 5, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atsInputPowerSourceB.setStatus('mandatory')
if mibBuilder.loadTexts: atsInputPowerSourceB.setDescription('')
atsAutomaticTransferSwitch = MibScalar((1, 3, 6, 1, 4, 1, 17420, 1, 1, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("transfer", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atsAutomaticTransferSwitch.setStatus('mandatory')
if mibBuilder.loadTexts: atsAutomaticTransferSwitch.setDescription('')
atsStatus = MibScalar((1, 3, 6, 1, 4, 1, 17420, 1, 1, 5, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("a", 1), ("b", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsStatus.setStatus('mandatory')
if mibBuilder.loadTexts: atsStatus.setDescription('')
mgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 17420, 1, 1, 999))
snmp = MibIdentifier((1, 3, 6, 1, 4, 1, 17420, 1, 1, 999, 1))
accessNo = MibTableColumn((1, 3, 6, 1, 4, 1, 17420, 1, 1, 999, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessNo.setStatus('mandatory')
if mibBuilder.loadTexts: accessNo.setDescription('')
community = MibTableColumn((1, 3, 6, 1, 4, 1, 17420, 1, 1, 999, 1, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: community.setStatus('mandatory')
if mibBuilder.loadTexts: community.setDescription('')
permission = MibTableColumn((1, 3, 6, 1, 4, 1, 17420, 1, 1, 999, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("noAccess", 0), ("read", 1), ("readWrite", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: permission.setStatus('mandatory')
if mibBuilder.loadTexts: permission.setDescription('')
rpmOutletOn = NotificationType((1, 3, 6, 1, 4, 1, 17420) + (0,100))
if mibBuilder.loadTexts: rpmOutletOn.setDescription('WARNING: The specified RPM outlet has turned on.')
rpmOutletOff = NotificationType((1, 3, 6, 1, 4, 1, 17420) + (0,101))
if mibBuilder.loadTexts: rpmOutletOff.setDescription('WARNING: The specified RPM outlet has turned off.')
rpmOutletReboot = NotificationType((1, 3, 6, 1, 4, 1, 17420) + (0,102))
if mibBuilder.loadTexts: rpmOutletReboot.setDescription('WARNING: The specified RPM outlet has rebooted.')
rpmOutletfault = NotificationType((1, 3, 6, 1, 4, 1, 17420) + (0,103))
if mibBuilder.loadTexts: rpmOutletfault.setDescription('SEVERE: The specified rpm outlet has fault.')
rpmCommunicationLost = NotificationType((1, 3, 6, 1, 4, 1, 17420) + (0,104))
if mibBuilder.loadTexts: rpmCommunicationLost.setDescription('SEVERE: Communication to the UPS has been lost. Steps to reestablish communication are in progress.')
cpsOutOfThreshold1 = NotificationType((1, 3, 6, 1, 4, 1, 17420) + (0,105))
if mibBuilder.loadTexts: cpsOutOfThreshold1.setDescription('WARNING: CPS current out of threshold 1.')
cpsOutOfThreshold2 = NotificationType((1, 3, 6, 1, 4, 1, 17420) + (0,106))
if mibBuilder.loadTexts: cpsOutOfThreshold2.setDescription('CRITICAL: CPS current out of threshold 2.')
cpsCommunicationLost = NotificationType((1, 3, 6, 1, 4, 1, 17420) + (0,107))
if mibBuilder.loadTexts: cpsCommunicationLost.setDescription('CRITICAL: CPS Communication lost.')
mibBuilder.exportSymbols("DGPRPM-MIB", rpmResumeDelayA=rpmResumeDelayA, rpmOffNumber=rpmOffNumber, protocol=protocol, cpsSetEntry=cpsSetEntry, rpm=rpm, cps=cps, rpmScheduleEntry=rpmScheduleEntry, rpmOutletD=rpmOutletD, rpmInternetLocal=rpmInternetLocal, rpmDelayG=rpmDelayG, cpsEntry=cpsEntry, rpmDelayF=rpmDelayF, cpsThreshold2=cpsThreshold2, cpsIDIndex=cpsIDIndex, cpsSetThreshold1=cpsSetThreshold1, rpmScheduleIndex=rpmScheduleIndex, rpmAllOnOff=rpmAllOnOff, permission=permission, atsAutomaticTransferSwitch=atsAutomaticTransferSwitch, rpmOutletG=rpmOutletG, rpmOutlet=rpmOutlet, rpmSetEntry=rpmSetEntry, rpmOutletNumber=rpmOutletNumber, rpmControlType=rpmControlType, rpmID=rpmID, rpmOutletOff=rpmOutletOff, rpmOutletE=rpmOutletE, rpmPeriod=rpmPeriod, rpmCommunicationLost=rpmCommunicationLost, atsInputPowerSourceB=atsInputPowerSourceB, rpmDelayH=rpmDelayH, cpsID=cpsID, cpsOutOfThreshold2=cpsOutOfThreshold2, rpmOutletReboot=rpmOutletReboot, mgmt=mgmt, dgp=dgp, rpmOutletA=rpmOutletA, rpmDelayA=rpmDelayA, ats=ats, cpsSetThreshold2=cpsSetThreshold2, rpmOutletC=rpmOutletC, rpmSetID=rpmSetID, accessNo=accessNo, cpsSetTable=cpsSetTable, rpmResumeDelayB=rpmResumeDelayB, cpsThreshold1=cpsThreshold1, rpmOutletOn=rpmOutletOn, rpmTime=rpmTime, community=community, cpsNumber=cpsNumber, cpsTable=cpsTable, rpmNumber=rpmNumber, cpsOutOfThreshold1=cpsOutOfThreshold1, snmp=snmp, rpmTable=rpmTable, rpmDelayD=rpmDelayD, rpmResumeDelayH=rpmResumeDelayH, rpmEntry=rpmEntry, rpmOutletfault=rpmOutletfault, rpmResumeDelayC=rpmResumeDelayC, rpmOnNumber=rpmOnNumber, atsStatus=atsStatus, rpmOutletF=rpmOutletF, rpmDate=rpmDate, cpsCommunicationLost=cpsCommunicationLost, accessTable=accessTable, atsIdentification=atsIdentification, hardware=hardware, rpmStatus=rpmStatus, rpmOutletAction=rpmOutletAction, rpmResumeDelayF=rpmResumeDelayF, rpmResumeDelayG=rpmResumeDelayG, products=products, rpmScheduleTable=rpmScheduleTable, rpmDelayB=rpmDelayB, atsInputPowerSourceA=atsInputPowerSourceA, rpmName=rpmName, rpmOutletB=rpmOutletB, rpmDelayE=rpmDelayE, rpmResumeDelayE=rpmResumeDelayE, rpmOutletState=rpmOutletState, accessEntry=accessEntry, rpmOutletH=rpmOutletH, cpsValue=cpsValue, rpmResumeDelayD=rpmResumeDelayD, rpmDelayC=rpmDelayC, rpmScheduleID=rpmScheduleID)
