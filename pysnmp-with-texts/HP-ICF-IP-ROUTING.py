#
# PySNMP MIB module HP-ICF-IP-ROUTING (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HP-ICF-IP-ROUTING
# Produced by pysmi-0.3.4 at Wed May  1 13:34:18 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
hpSwitch, = mibBuilder.importSymbols("HP-ICF-OID", "hpSwitch")
HpInetCidrRouteState, = mibBuilder.importSymbols("HP-ICF-TC", "HpInetCidrRouteState")
ifIndex, InterfaceIndexOrZero, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "ifIndex", "InterfaceIndexOrZero", "InterfaceIndex")
InetAddressPrefixLength, InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressPrefixLength", "InetAddressType", "InetAddress")
inetCidrRouteDestType, ipCidrRouteEntry, inetCidrRouteEntry = mibBuilder.importSymbols("IP-FORWARD-MIB", "inetCidrRouteDestType", "ipCidrRouteEntry", "inetCidrRouteEntry")
ipv6RouterAdvertEntry, ipDefaultRouterEntry = mibBuilder.importSymbols("IP-MIB", "ipv6RouterAdvertEntry", "ipDefaultRouterEntry")
Metric, = mibBuilder.importSymbols("OSPF-MIB", "Metric")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
TimeTicks, NotificationType, Counter64, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, IpAddress, Counter32, Unsigned32, MibIdentifier, Bits, ObjectIdentity, iso, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "NotificationType", "Counter64", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "IpAddress", "Counter32", "Unsigned32", "MibIdentifier", "Bits", "ObjectIdentity", "iso", "ModuleIdentity")
TextualConvention, RowStatus, DisplayString, PhysAddress, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "DisplayString", "PhysAddress", "TruthValue")
hpicfIpRouting = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15))
hpicfIpRouting.setRevisions(('2016-12-02 00:00', '2016-11-09 00:00', '2016-03-18 00:00', '2016-02-17 00:00', '2014-08-26 00:00', '2013-06-03 00:00', '2012-10-20 00:00', '2011-11-10 00:00', '2011-08-30 00:00', '2010-11-29 00:00', '2010-05-27 00:00', '2009-11-05 00:00', '2009-10-12 00:00', '2008-12-19 00:00', '2008-04-08 00:00', '2008-03-04 00:00', '2007-04-20 00:00', '2005-08-13 02:28', '2005-08-05 00:00', '2003-05-13 02:28', '2002-10-31 23:53', '2002-05-23 17:38', '2000-07-15 00:22',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hpicfIpRouting.setRevisionsDescriptions((' Added hpicfIpStaticRouteBfdTable to provide BFD support to Static Routes.', 'Added hpicfIpv6RouterAdvertRtrPreference, hpicfIpv6RtrAdvParamGroup and hpicfIpv6RtrAdvParamCompliance. Deprecated hpicfIpv6RtrAdvGroup and hpicfIpv6RtrAdvCompliance.', 'Changed syntax and description of hpicfIpStaticRouteLogging', 'Added hpicfIpStaticRouteLogging', 'Added hpicfDBroadcastFwdAcl', 'Added hpicfIpv6RouteSummary', 'Added hpicfIpStaticRouteName', 'Added hpicfIpv6NDRADNSAdminStatus and hpicfIpv6RouterAdvertSendDNSAdverts.', 'Added hpicfIpStaticRouteMetric.', 'Added hpicfIpRouteTable.', 'Added hpicfArpMcastReplies.', 'Added hpicfIpv6RtrAdvPrefixAdvertiseFlag to hpicfIpv6RtrAdvPrefixEntry.', 'Added hpicfIpv6RtrAdvCurHopLimitMode.', 'Added hpicfIpRouteBaseScalars.', 'Added hpicfIpv6RtrAdvPrefixTable.', 'Added hpicfIpv6ND.', 'Added hpicfArpAgingTime.', 'Added hpicfInetCidrRouteTable augmenting inetCidrRouteTable.', 'Added import objects.', 'Added static route configuration objects.', 'Added Source Route Global Enable.', 'Added ICMP Rate Limiting and Directed Broadcast forwarding objects.', 'Initial revision.',))
if mibBuilder.loadTexts: hpicfIpRouting.setLastUpdated('201612020000Z')
if mibBuilder.loadTexts: hpicfIpRouting.setOrganization('HP Networking.')
if mibBuilder.loadTexts: hpicfIpRouting.setContactInfo('Hewlett-Packard Company 8000 Foothills Blvd. Roseville, CA 95747')
if mibBuilder.loadTexts: hpicfIpRouting.setDescription('This MIB module contains HP proprietary objects for managing IP Routing.')
hpicfIpRoutingObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1))
hpicfIcmpRdisc = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 1))
hpicfRdiscAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfRdiscAdminStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfRdiscAdminStatus.setDescription('The administrative status of the ICMP Router Discovery protocol.')
hpicfRdiscIfCfgTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 1, 2), )
if mibBuilder.loadTexts: hpicfRdiscIfCfgTable.setStatus('current')
if mibBuilder.loadTexts: hpicfRdiscIfCfgTable.setDescription('Per-interface configuration for the ICMP Router Discovery protocol.')
hpicfRdiscIfCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hpicfRdiscIfCfgEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfRdiscIfCfgEntry.setDescription('Router discovery configuration information for a single interface.')
hpicfRdiscIfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfRdiscIfAdminStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfRdiscIfAdminStatus.setDescription('The administrative status of the ICMP Router Discovery protocol on this interface.')
hpicfRdiscIfAdvertAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("multicast", 1), ("broadcast", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfRdiscIfAdvertAddress.setStatus('current')
if mibBuilder.loadTexts: hpicfRdiscIfAdvertAddress.setDescription("The destination address to be used for router advertisements on this interface. If the value of this object is 'multicast' (the default), router advertisements sent on this interface will be sent to the all-hosts multicast address, 224.0.0.1. If the value of this object is 'broadcast', router advertisements sent on this interface will be sent to the limited broadcast address, 255.255.255.255.")
hpicfRdiscIfMaxAdvertInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 1800))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfRdiscIfMaxAdvertInterval.setStatus('current')
if mibBuilder.loadTexts: hpicfRdiscIfMaxAdvertInterval.setDescription('The maximum time allowed between sending unsolicited Router Advertisements on this interface.')
hpicfRdiscIfMinAdvertInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 1800))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfRdiscIfMinAdvertInterval.setStatus('current')
if mibBuilder.loadTexts: hpicfRdiscIfMinAdvertInterval.setDescription('The minimum time allowed between sending unsolicited Router Advertisements on this interface. Must be no greater than hpicfRdiscMaxAdvertInterval.')
hpicfRdiscIfAdvertLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 9000))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfRdiscIfAdvertLifetime.setStatus('current')
if mibBuilder.loadTexts: hpicfRdiscIfAdvertLifetime.setDescription('The value to be placed in the Lifetime field of Router Advertisements sent on this interface. Must be no less than hpicfRdiscMaxAdvertInterval.')
hpicfRdiscIfPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 1, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfRdiscIfPreference.setStatus('current')
if mibBuilder.loadTexts: hpicfRdiscIfPreference.setDescription('The preference of the router as a default router, relative to the other routers on the same subnet. Higher values are more preferable. The minimum value (0x80000000) is used to indicate that the router, even though it may be advertised, is not to be used by neighboring hosts as a default router.')
hpicfIcmpRateLimits = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 2))
hpicfIcmpBoxLimits = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 2, 1))
hpicfIcmpReplyLimitEnable = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfIcmpReplyLimitEnable.setStatus('current')
if mibBuilder.loadTexts: hpicfIcmpReplyLimitEnable.setDescription('Enable/Disable ICMP replies.')
hpicfIcmpReplyLimit = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfIcmpReplyLimit.setStatus('current')
if mibBuilder.loadTexts: hpicfIcmpReplyLimit.setDescription('The maximum number of icmp replies to send per second.')
hpicfIcmpRedirectEnable = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfIcmpRedirectEnable.setStatus('current')
if mibBuilder.loadTexts: hpicfIcmpRedirectEnable.setDescription('Enable/Disable redirect error messages..')
hpicfIcmpDestUnreachEnable = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfIcmpDestUnreachEnable.setStatus('current')
if mibBuilder.loadTexts: hpicfIcmpDestUnreachEnable.setDescription('Enable/Disable destination unreachable error messages.')
hpicfIcmpAddrMaskReplyEnable = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfIcmpAddrMaskReplyEnable.setStatus('current')
if mibBuilder.loadTexts: hpicfIcmpAddrMaskReplyEnable.setDescription('Enable/Disable address mask replies.')
hpicfIcmpEchoBroadcastReplyEnable = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfIcmpEchoBroadcastReplyEnable.setStatus('current')
if mibBuilder.loadTexts: hpicfIcmpEchoBroadcastReplyEnable.setDescription('Enable/Disable echo replies to directed broadcast echo requests..')
hpicfGlobalIpConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 3))
hpicfDBroadcastFwdEnable = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDBroadcastFwdEnable.setStatus('current')
if mibBuilder.loadTexts: hpicfDBroadcastFwdEnable.setDescription('Enable/disable directed broadcast forwarding.')
hpicfSourceRouteEnable = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfSourceRouteEnable.setStatus('current')
if mibBuilder.loadTexts: hpicfSourceRouteEnable.setDescription('Enable/disable source routed forwarding.')
hpicfIpMaximumPaths = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 3, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfIpMaximumPaths.setStatus('current')
if mibBuilder.loadTexts: hpicfIpMaximumPaths.setDescription('Maximum number of equal cost paths to a destination that we will add to the IP routing table.')
hpicfDBroadcastFwdAcl = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 3, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDBroadcastFwdAcl.setStatus('current')
if mibBuilder.loadTexts: hpicfDBroadcastFwdAcl.setDescription("This object contains the ACL to apply to IP Directed Broadcast packets.The value is the name of an existing IP ACL defined using the Command Line Interface (CLI) or a zero length string if there is no ACL applied. This object can only be set when hpicfDBroadcastFwdEnable is also set to 'enable' in the same request. Setting hpicfBroadcastFwdEnable to 'enable' without also setting this object will clear this object and unapply any IP Directed Broadcast ACL.")
hpicfIpStaticRouteConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 4))
hpicfIpStaticRouteTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 4, 1), )
if mibBuilder.loadTexts: hpicfIpStaticRouteTable.setStatus('current')
if mibBuilder.loadTexts: hpicfIpStaticRouteTable.setDescription('Table of configured IP static routes. This table uses a protocol-independent format, so that it can be used for both IPv4 and IPv6 static routes. Rows configured in this table should be stored in non-volatile storage.')
hpicfIpStaticRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 4, 1, 1), ).setIndexNames((0, "HP-ICF-IP-ROUTING", "hpicfIpStaticRoutePrefixType"), (0, "HP-ICF-IP-ROUTING", "hpicfIpStaticRoutePrefix"), (0, "HP-ICF-IP-ROUTING", "hpicfIpStaticRoutePrefixLength"), (0, "HP-ICF-IP-ROUTING", "hpicfIpStaticRouteFwdAddrType"), (0, "HP-ICF-IP-ROUTING", "hpicfIpStaticRouteFwdAddr"), (0, "HP-ICF-IP-ROUTING", "hpicfIpStaticRouteFwdIfIndex"))
if mibBuilder.loadTexts: hpicfIpStaticRouteEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfIpStaticRouteEntry.setDescription("A row in the static route table, containing information about a single configured static route. There are 3 legal cases for the indexing this table: 1. ((hpicfIpStaticRouteFwdAddrType == hpicfIpStaticRoutePrefixType) && (hpicfIpStaticRouteFwdAddr is IP address of appropriate type) && (hpicfIpStaticRouteFwdIfIndex == 0)) Normal, remote static route. hpicfIpStaticRouteType will be equal to 'remote'. Note that the first condition that the FwdAddrType must equal the PrefixType exactly is not strictly true. For example, in IPv6, it is quite legal and expected to configure a static route where the PrefixType is ipv6, and the Prefix is a 16 byte IPv6 destination address, but the FwdAddrType is ipv6z and the FwdAddr is a 20 byte scoped IPv6 link-local address. 2. ((hpicfIpStaticRouteFwdAddrType == 'unknown') && (hpicfIpStaticRouteFwdAddr == zero-length string) && (hpicfIpStaticRouteFwdIfIndex != 0)) Interface route. Treated like a connected route. hpicfIpStaticRouteType will be equal to 'local'. 3. ((hpicfIpStaticRouteFwdAddrType == 'unknown') && (hpicfIpStaticRouteFwdAddr == zero-length string) && (hpicfIpStaticRouteFwdIfIndex == 0)) Discard route. hpicfStaticRouteType will be equal to either 'reject' or 'discard'.")
hpicfIpStaticRoutePrefixType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 4, 1, 1, 1), InetAddressType())
if mibBuilder.loadTexts: hpicfIpStaticRoutePrefixType.setStatus('current')
if mibBuilder.loadTexts: hpicfIpStaticRoutePrefixType.setDescription("The type of destination prefix specified by this route. The value 'dns(16)' is not supported. This object specifies the type of destination address prefix in the hpicfIpStaticRoutePrefix object.")
hpicfIpStaticRoutePrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 4, 1, 1, 2), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(0, 36)))
if mibBuilder.loadTexts: hpicfIpStaticRoutePrefix.setStatus('current')
if mibBuilder.loadTexts: hpicfIpStaticRoutePrefix.setDescription("The destination address prefix of this route. The type of address specified by this route is indicated by the corresponding instance of the hpicfIpStaticRoutePrefixType object. An attempt to create a row in which the length of this object is not consistent with the type specified by hpicfIpStaticRoutePrefixType must be rejected. An attempt to create a row in which the value X of this object, logically ANDed with the value of the mask formed from the corresponding instance of the hpicfIpStaticRoutePrefixLength object, is not equal to X must be rejected, i.e., this prefix may not have any 'host' bits set.")
hpicfIpStaticRoutePrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 4, 1, 1, 3), InetAddressPrefixLength())
if mibBuilder.loadTexts: hpicfIpStaticRoutePrefixLength.setStatus('current')
if mibBuilder.loadTexts: hpicfIpStaticRoutePrefixLength.setDescription('This object indicates the number of leading one bits which form the mask to be logically ANDed with a destination address before comparison with the corresponding instance of the hpicfIpStaticRoutePrefix object for a route match operation. An attempt to create a row in which the value of this object is longer than the maximum legal length of an address of the type indicated by the corresponding instance of the hpicfIpStaticRoutePrefixType object must be rejected. An attempt to create a row in which the value of the mask formed from this object logically ANDed with the value of the corresponding instance of the hpicfIpStaticRoutePrefix object is not equal to the hpicfIpStaticRoutePrefix.')
hpicfIpStaticRouteFwdAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 4, 1, 1, 4), InetAddressType())
if mibBuilder.loadTexts: hpicfIpStaticRouteFwdAddrType.setStatus('current')
if mibBuilder.loadTexts: hpicfIpStaticRouteFwdAddrType.setDescription("The type of forwarding address for this route. The value of this object must be equal either to 'unknown' or to a value appropriate for the corresponding instance of the hpicfIpStaticRoutePrefixType object. For non-remote routes, the value of this object must be 'unknown'.")
hpicfIpStaticRouteFwdAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 4, 1, 1, 5), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(0, 36)))
if mibBuilder.loadTexts: hpicfIpStaticRouteFwdAddr.setStatus('current')
if mibBuilder.loadTexts: hpicfIpStaticRouteFwdAddr.setDescription('For remote routes, the value of the next specified router to use for forwarding packets to the destination specified by this route. Note that this router does not need to be directly connected. In the case where it is not, the actual routing table entry will use a next hop determined by looking up the best route to this forwarding address. For non-remote routes, the value of this object will be a zero-length string. An attempt to create a row in which the length of this object is not consistent with the type specified by hpicfIpStaticRouteFwdAddrType must be rejected. An attempt to create a row with a value for this object other than a zero-length string must be rejected if the corresponding instance of the hpicfIpStaticRouteFwdIfIndex object is non-zero.')
hpicfIpStaticRouteFwdIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 4, 1, 1, 6), InterfaceIndexOrZero())
if mibBuilder.loadTexts: hpicfIpStaticRouteFwdIfIndex.setStatus('current')
if mibBuilder.loadTexts: hpicfIpStaticRouteFwdIfIndex.setDescription('For remote routes, the value of this object must be zero. For reject or blackhole routes, the value of this object must be zero. For local routes, this object indicates the ifIndex of the local interface to use to reach this destination.')
hpicfIpStaticRouteType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("reject", 2), ("local", 3), ("remote", 4), ("blackhole", 5))).clone('remote')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfIpStaticRouteType.setStatus('current')
if mibBuilder.loadTexts: hpicfIpStaticRouteType.setDescription("The type of route. The value 'other' is not supported, and is included only for compatibility with the IP Forwarding Table MIB. The value 'local' indicates that the destination is treated as if it were directly connected. The value 'remote' indicates that the forwarding address will be used to reach the destination. The value 'reject' indicates that if this route is matched, a packet to the destination is discarded and a notification (e.g. ICMP error) is returned to the packet sender. The value 'blackhole' indicates that if the route is matched, a packet to the destination is silently dropped. The value of this object must be consistent with the forwarding address information used to index the route.")
hpicfIpStaticRouteDistance = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfIpStaticRouteDistance.setStatus('current')
if mibBuilder.loadTexts: hpicfIpStaticRouteDistance.setDescription('The administrative distance to associate with this static route. Routes with lower distances are preferred. By default, static routes are created with an administrative distance of 1, meaning they are preferred over all routes except directly connected routes. Setting a higher administrative distance for a route can be used for the following reasons: - by configuring multiple static routes to the same destination, one with the default distance and one with a higher distance, one can configure backup static routes - by configuring a static route with an administrative distance higher than the distance for a particular dynamic routing protocol, one can allow a static route to be overridden by dynamic routing information. Routes with an administrative distance of 255 will never be entered in the routing table.')
hpicfIpStaticRouteTag = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 4, 1, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfIpStaticRouteTag.setStatus('current')
if mibBuilder.loadTexts: hpicfIpStaticRouteTag.setDescription('Tag value that can be used to filter redistribution of this route via route maps.')
hpicfIpStaticRouteStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 4, 1, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfIpStaticRouteStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfIpStaticRouteStatus.setDescription('Status of this route entry. All writable columns in this table can be modified while the corresponding row is active.')
hpicfIpStaticRouteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 4, 1, 1, 11), Metric().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfIpStaticRouteMetric.setStatus('current')
if mibBuilder.loadTexts: hpicfIpStaticRouteMetric.setDescription('Metric value for this route. It is used to compare static route with other static routes to the same destination. The acceptable range is from 1 to 255, both inclusive.')
hpicfIpStaticRouteName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 4, 1, 1, 12), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfIpStaticRouteName.setStatus('current')
if mibBuilder.loadTexts: hpicfIpStaticRouteName.setDescription('Name of the configured static route. It is used for lucidity and troubleshooting purpose and is optional.')
hpicfIpStaticRouteLogging = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 4, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfIpStaticRouteLogging.setStatus('current')
if mibBuilder.loadTexts: hpicfIpStaticRouteLogging.setDescription("This object determines whether or not debug log messages are to be generated for packets matching statically configured blackhole routes. When enabled, the debug option 'ip/ipv6 fib blackhole' needs to be enabled in order to print the log messages to a specified destination.")
hpicfIpStaticRouteBfdEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 4, 1, 1, 14), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfIpStaticRouteBfdEnable.setStatus('current')
if mibBuilder.loadTexts: hpicfIpStaticRouteBfdEnable.setDescription('This object enables or disables BFD on Static route. When set to true(1), BFD is enabled for the session. When set to false(2), BFD is disabled for the session.')
hpicfIpStaticNeighborTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 4, 2), )
if mibBuilder.loadTexts: hpicfIpStaticNeighborTable.setStatus('current')
if mibBuilder.loadTexts: hpicfIpStaticNeighborTable.setDescription('Table of configured IP static neighbors. This table uses a protocol-independent format, so that it can be used for both IPv4 and IPv6 static neighbors. Rows configured in this table should be stored in non-volatile storage.')
hpicfIpStaticNeighborEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 4, 2, 1), ).setIndexNames((0, "HP-ICF-IP-ROUTING", "hpicfIpStaticNeighborIfIndex"), (0, "HP-ICF-IP-ROUTING", "hpicfIpStaticNeighborNetAddrType"), (0, "HP-ICF-IP-ROUTING", "hpicfIpStaticNeighborNetAddress"))
if mibBuilder.loadTexts: hpicfIpStaticNeighborEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfIpStaticNeighborEntry.setDescription('A row in the static neighbor table, containing information about a single configured static neighbor.')
hpicfIpStaticNeighborIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 4, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hpicfIpStaticNeighborIfIndex.setStatus('current')
if mibBuilder.loadTexts: hpicfIpStaticNeighborIfIndex.setDescription('The ifIndex value for the interface used to reach this neighbor.')
hpicfIpStaticNeighborNetAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 4, 2, 1, 2), InetAddressType())
if mibBuilder.loadTexts: hpicfIpStaticNeighborNetAddrType.setStatus('current')
if mibBuilder.loadTexts: hpicfIpStaticNeighborNetAddrType.setDescription("The type of network address specified by this entry. Only the values 'ipv4(1)' and 'ipv6(2)' are expected. This object specifies the type of neighbor network address prefix in the hpicfIpStaticNeighborNetAddress object.")
hpicfIpStaticNeighborNetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 4, 2, 1, 3), InetAddress())
if mibBuilder.loadTexts: hpicfIpStaticNeighborNetAddress.setStatus('current')
if mibBuilder.loadTexts: hpicfIpStaticNeighborNetAddress.setDescription('The neighbor network address of this configured static neighbor. The type of address specified by this entry is indicated by the corresponding instance of the hpicfIpStaticNeighborNetAddrType object. An attempt to create a row in which the length of this object is not consistent with the type specified by hpicfIpStaticNeighborNetAddrType must be rejected.')
hpicfIpStaticNeighborPhysAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 4, 2, 1, 4), PhysAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfIpStaticNeighborPhysAddress.setStatus('current')
if mibBuilder.loadTexts: hpicfIpStaticNeighborPhysAddress.setDescription('The media-dependent physical address used to reach this neighbor. The size of this address depends on the media type of the interface identified by hpicfIpStaticNeighborIfIndex.')
hpicfIpStaticNeighborStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 4, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfIpStaticNeighborStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfIpStaticNeighborStatus.setDescription('Status of this neighbor entry. All writable columns in this table can be modified while the corresponding row is active.')
hpicfIpStaticRouteBfdTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 4, 3), )
if mibBuilder.loadTexts: hpicfIpStaticRouteBfdTable.setStatus('current')
if mibBuilder.loadTexts: hpicfIpStaticRouteBfdTable.setDescription('Extension of Static Route table to enable BFD on Static routes.')
hpicfIpStaticRouteBfdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 4, 3, 1), ).setIndexNames((0, "HP-ICF-IP-ROUTING", "hpicfIpStaticRoutePrefixType"), (0, "HP-ICF-IP-ROUTING", "hpicfIpStaticRoutePrefix"), (0, "HP-ICF-IP-ROUTING", "hpicfIpStaticRoutePrefixLength"), (0, "HP-ICF-IP-ROUTING", "hpicfIpStaticRouteFwdAddrType"), (0, "HP-ICF-IP-ROUTING", "hpicfIpStaticRouteFwdAddr"), (0, "HP-ICF-IP-ROUTING", "hpicfIpStaticRouteFwdIfIndex"))
if mibBuilder.loadTexts: hpicfIpStaticRouteBfdEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfIpStaticRouteBfdEntry.setDescription('Static route BFD table contains BFD objects. This table is added to provide BFD support to Static Routes. This is the additional param of Static Route table. The Value of Index in BFD table should be as same in Static Route table. 1. While enabling BFD static route, verify the RowStatus of hpicfIpStaticRouteTable for the configured index. 2. If Rowstatus is not present in hpicfIpStaticRouteTable Create Rowstatus for that recIndex in hpicfIpStaticRouteTable and then create the RowStatus in hpicfIpStaticRouteBfdTable. 3. While disabling the bfd Status, Destroy the rowstatus in hpicfIpStaticRouteBfdTable.')
hpicfIpStaticRouteBfdSrcAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 4, 3, 1, 1), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfIpStaticRouteBfdSrcAddrType.setStatus('current')
if mibBuilder.loadTexts: hpicfIpStaticRouteBfdSrcAddrType.setDescription('The type of IP address used as source address for BFD ')
hpicfIpStaticRouteBfdSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 4, 3, 1, 2), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfIpStaticRouteBfdSrcAddr.setStatus('current')
if mibBuilder.loadTexts: hpicfIpStaticRouteBfdSrcAddr.setDescription('The IP address which is used as source address for BFD')
hpicfIpStaticRouteBfdDstAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 4, 3, 1, 3), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfIpStaticRouteBfdDstAddrType.setStatus('current')
if mibBuilder.loadTexts: hpicfIpStaticRouteBfdDstAddrType.setDescription('The type of IP address used as destination address for BFD ')
hpicfIpStaticRouteBfdDstAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 4, 3, 1, 4), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfIpStaticRouteBfdDstAddr.setStatus('current')
if mibBuilder.loadTexts: hpicfIpStaticRouteBfdDstAddr.setDescription('The IP address which is used as destination address for BFD')
hpicfIpStaticRouteBfdStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 4, 3, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfIpStaticRouteBfdStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfIpStaticRouteBfdStatus.setDescription('Row status for this table.')
hpicfIpRouteStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 5))
hpicfIpCidrRouteTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 5, 1), )
if mibBuilder.loadTexts: hpicfIpCidrRouteTable.setStatus('current')
if mibBuilder.loadTexts: hpicfIpCidrRouteTable.setDescription('HP extensions to the ipCidrRouteTable.')
hpicfIpCidrRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 5, 1, 1), )
ipCidrRouteEntry.registerAugmentions(("HP-ICF-IP-ROUTING", "hpicfIpCidrRouteEntry"))
hpicfIpCidrRouteEntry.setIndexNames(*ipCidrRouteEntry.getIndexNames())
if mibBuilder.loadTexts: hpicfIpCidrRouteEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfIpCidrRouteEntry.setDescription('Extended information about a single route.')
hpicfIpCidrRouteDistance = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpCidrRouteDistance.setStatus('current')
if mibBuilder.loadTexts: hpicfIpCidrRouteDistance.setDescription('The administrative distance of this route.')
hpicfInetCidrRouteTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 5, 2), )
if mibBuilder.loadTexts: hpicfInetCidrRouteTable.setStatus('current')
if mibBuilder.loadTexts: hpicfInetCidrRouteTable.setDescription('HP extensions to the inetCidrRouteTable.')
hpicfInetCidrRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 5, 2, 1), )
inetCidrRouteEntry.registerAugmentions(("HP-ICF-IP-ROUTING", "hpicfInetCidrRouteEntry"))
hpicfInetCidrRouteEntry.setIndexNames(*inetCidrRouteEntry.getIndexNames())
if mibBuilder.loadTexts: hpicfInetCidrRouteEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfInetCidrRouteEntry.setDescription('Extended information about a single route.')
hpicfInetCidrRouteDistance = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfInetCidrRouteDistance.setStatus('current')
if mibBuilder.loadTexts: hpicfInetCidrRouteDistance.setDescription('The administrative distance of this route.')
hpicfInetCidrRouteInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 5, 2, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfInetCidrRouteInfo.setStatus('current')
if mibBuilder.loadTexts: hpicfInetCidrRouteInfo.setDescription("A reference to MIB definitions specific to the particular routing protocol which is responsible for this route, as determined by the value specified in the route's inetCidrRouteProto value. If this information is not present, its value should be set to the OBJECT IDENTIFIER { 0 0 }, which is a syntactically valid object identifier, and any implementation conforming to ASN.1 and the Basic Encoding Rules must be able to generate and recognize this value.")
hpicfInetCidrRouteState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 5, 2, 1, 3), HpInetCidrRouteState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfInetCidrRouteState.setStatus('current')
if mibBuilder.loadTexts: hpicfInetCidrRouteState.setDescription('The state of the route.')
hpicfInetCidrRouteStatsTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 5, 3), )
if mibBuilder.loadTexts: hpicfInetCidrRouteStatsTable.setStatus('current')
if mibBuilder.loadTexts: hpicfInetCidrRouteStatsTable.setDescription('HP extensions to the InetCidrRouteTable for scalar stats')
hpicfInetCidrRouteStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 5, 3, 1), ).setIndexNames((0, "IP-FORWARD-MIB", "inetCidrRouteDestType"))
if mibBuilder.loadTexts: hpicfInetCidrRouteStatsEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfInetCidrRouteStatsEntry.setDescription('Extended information about a scalar stats of the route.')
hpicfInetCidrNumRouteDestinations = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 5, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfInetCidrNumRouteDestinations.setStatus('current')
if mibBuilder.loadTexts: hpicfInetCidrNumRouteDestinations.setDescription('Total number of destinations for a particular inetCidrRouteDestType.')
hpicfInetCidrNumRouteRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 5, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfInetCidrNumRouteRoutes.setStatus('current')
if mibBuilder.loadTexts: hpicfInetCidrNumRouteRoutes.setDescription('Total number of routes for a particular inetCidrRouteDestType.')
hpicfArpInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 6))
hpicfArpAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16666666)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfArpAgingTime.setStatus('current')
if mibBuilder.loadTexts: hpicfArpAgingTime.setDescription('The timeout period in minutes for aging out an arp entry in the arp cache. Default value is 20 minutes. Allowable values for the HP implementation are 1-1440 and 0. The value of 0 indicates that an infinite ageout is to be used. The value 16666666 minutes (32 years) is used internally to effectively indicate an infinite timeout.')
hpicfArpMcastReplies = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfArpMcastReplies.setStatus('current')
if mibBuilder.loadTexts: hpicfArpMcastReplies.setDescription('This object is used to enable/disable Multicast MAC support in all multicast modes. It will be disabled by default.')
hpicfIpDefaultRouterPrefixInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 7))
hpicfIpDefaultRouterPrefixTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 7, 1), )
if mibBuilder.loadTexts: hpicfIpDefaultRouterPrefixTable.setStatus('current')
if mibBuilder.loadTexts: hpicfIpDefaultRouterPrefixTable.setDescription('Table of default routers learnt through auto-config This Table will be used in conjunction of ipDefaultRouterTable defined in RFC 4293 to get the attributes of the default routers learnt through auto-config')
hpicfIpDefaultRouterPrefixEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 7, 1, 1), ).setIndexNames((0, "HP-ICF-IP-ROUTING", "hpicfIpDefaultRouterAddressType"), (0, "HP-ICF-IP-ROUTING", "hpicfIpDefaultRouterAddress"), (0, "HP-ICF-IP-ROUTING", "hpicfIpDefaultRouterIfIndex"), (0, "HP-ICF-IP-ROUTING", "hpicfIpDefaultRouterPrefixType"), (0, "HP-ICF-IP-ROUTING", "hpicfIpDefaultRouterPrefix"), (0, "HP-ICF-IP-ROUTING", "hpicfIpDefaultRouterPrefixLength"))
if mibBuilder.loadTexts: hpicfIpDefaultRouterPrefixEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfIpDefaultRouterPrefixEntry.setDescription('A row in the default router table, containing information about a single learnt default router')
hpicfIpDefaultRouterAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 7, 1, 1, 1), InetAddressType())
if mibBuilder.loadTexts: hpicfIpDefaultRouterAddressType.setStatus('current')
if mibBuilder.loadTexts: hpicfIpDefaultRouterAddressType.setDescription('The address type of the default router. The only supported type is IPV6 as of now')
hpicfIpDefaultRouterAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 7, 1, 1, 2), InetAddress())
if mibBuilder.loadTexts: hpicfIpDefaultRouterAddress.setStatus('current')
if mibBuilder.loadTexts: hpicfIpDefaultRouterAddress.setDescription('The address of the default router.')
hpicfIpDefaultRouterIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 7, 1, 1, 3), InterfaceIndex())
if mibBuilder.loadTexts: hpicfIpDefaultRouterIfIndex.setStatus('current')
if mibBuilder.loadTexts: hpicfIpDefaultRouterIfIndex.setDescription('The address of the default router.')
hpicfIpDefaultRouterPrefixType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 7, 1, 1, 4), InetAddressType())
if mibBuilder.loadTexts: hpicfIpDefaultRouterPrefixType.setStatus('current')
if mibBuilder.loadTexts: hpicfIpDefaultRouterPrefixType.setDescription('Type of the prefix.')
hpicfIpDefaultRouterPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 7, 1, 1, 5), InetAddress())
if mibBuilder.loadTexts: hpicfIpDefaultRouterPrefix.setStatus('current')
if mibBuilder.loadTexts: hpicfIpDefaultRouterPrefix.setDescription('The prefix.')
hpicfIpDefaultRouterPrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 7, 1, 1, 6), InetAddressPrefixLength())
if mibBuilder.loadTexts: hpicfIpDefaultRouterPrefixLength.setStatus('current')
if mibBuilder.loadTexts: hpicfIpDefaultRouterPrefixLength.setDescription('Length of the prefix.')
hpicfIpDefaultRouterPrefixOnLink = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 7, 1, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpDefaultRouterPrefixOnLink.setStatus('current')
if mibBuilder.loadTexts: hpicfIpDefaultRouterPrefixOnLink.setDescription('The object has the value true (1) if the prefix can be used for on-link determination, otherwise the value is false(2)')
hpicfIpDefaultRouterPrefixAutonomous = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 7, 1, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpDefaultRouterPrefixAutonomous.setStatus('current')
if mibBuilder.loadTexts: hpicfIpDefaultRouterPrefixAutonomous.setDescription('The object has the value true(1) if this prefix can be used for autonomous address configuration. If the value is false(2), the prefix is not used to autoconfigure a local interface address')
hpicfIpDefaultRouterPrefixValidLifeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 7, 1, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpDefaultRouterPrefixValidLifeTime.setStatus('current')
if mibBuilder.loadTexts: hpicfIpDefaultRouterPrefixValidLifeTime.setDescription('The valid life time for the router.')
hpicfIpDefaultRouterPrefixPrefdLifeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 7, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpDefaultRouterPrefixPrefdLifeTime.setStatus('current')
if mibBuilder.loadTexts: hpicfIpDefaultRouterPrefixPrefdLifeTime.setDescription('The preferred life time for the router.')
hpicfIpDefaultRouterProperties = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 8))
hpicfIpDefaultRouterTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 8, 1), )
if mibBuilder.loadTexts: hpicfIpDefaultRouterTable.setStatus('current')
if mibBuilder.loadTexts: hpicfIpDefaultRouterTable.setDescription('HP extensions to the ipDefaultRouterTable.')
hpicfIpDefaultRouterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 8, 1, 1), )
ipDefaultRouterEntry.registerAugmentions(("HP-ICF-IP-ROUTING", "hpicfIpDefaultRouterEntry"))
hpicfIpDefaultRouterEntry.setIndexNames(*ipDefaultRouterEntry.getIndexNames())
if mibBuilder.loadTexts: hpicfIpDefaultRouterEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfIpDefaultRouterEntry.setDescription('Extended information about a single route.')
hpicfIpDefaultRouterMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 8, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpDefaultRouterMTU.setStatus('current')
if mibBuilder.loadTexts: hpicfIpDefaultRouterMTU.setDescription('The link MTU size advertised by the router. The selected Mlink TU may be different from this one.')
hpicfIpDefaultRouterHopLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 8, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpDefaultRouterHopLimit.setStatus('current')
if mibBuilder.loadTexts: hpicfIpDefaultRouterHopLimit.setDescription('The hop limit to be used by the host on outgoing packets.')
hpicfIpv6ND = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 9))
hpicfIpv6NDRAAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 9, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfIpv6NDRAAdminStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfIpv6NDRAAdminStatus.setDescription('A flag indicating whether or not the router sends periodic router advertisements and responds to router solicitations.')
hpicfIpv6RtrAdvPrefixTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 9, 2), )
if mibBuilder.loadTexts: hpicfIpv6RtrAdvPrefixTable.setReference('For IPv6 RFC2461,especially section 6.2.1')
if mibBuilder.loadTexts: hpicfIpv6RtrAdvPrefixTable.setStatus('current')
if mibBuilder.loadTexts: hpicfIpv6RtrAdvPrefixTable.setDescription('This table describes the router advertisement configuration variables for each interface.')
hpicfIpv6RtrAdvPrefixEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 9, 2, 1), ).setIndexNames((0, "HP-ICF-IP-ROUTING", "hpicfIpv6RtrAdvPrefixIfIndex"), (0, "HP-ICF-IP-ROUTING", "hpicfIpv6RtrAdvPrefixType"), (0, "HP-ICF-IP-ROUTING", "hpicfIpv6RtrAdvPrefixPrefix"), (0, "HP-ICF-IP-ROUTING", "hpicfIpv6RtrAdvPrefixLength"))
if mibBuilder.loadTexts: hpicfIpv6RtrAdvPrefixEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfIpv6RtrAdvPrefixEntry.setDescription('An entry in the hpicfIpv6RtrAdvPrefixTable.')
hpicfIpv6RtrAdvPrefixIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 9, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hpicfIpv6RtrAdvPrefixIfIndex.setStatus('current')
if mibBuilder.loadTexts: hpicfIpv6RtrAdvPrefixIfIndex.setDescription("The index value which uniquely identifies the interface on which this prefix is configured. The interface identified by a particular value of this index is the same interface as identified by the same value of the IF-MIB's ifIndex.")
hpicfIpv6RtrAdvPrefixType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 9, 2, 1, 2), InetAddressType())
if mibBuilder.loadTexts: hpicfIpv6RtrAdvPrefixType.setStatus('current')
if mibBuilder.loadTexts: hpicfIpv6RtrAdvPrefixType.setDescription('The address type of hpicfIpv6RtrAdvPrefixPrefix.')
hpicfIpv6RtrAdvPrefixPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 9, 2, 1, 3), InetAddress())
if mibBuilder.loadTexts: hpicfIpv6RtrAdvPrefixPrefix.setStatus('current')
if mibBuilder.loadTexts: hpicfIpv6RtrAdvPrefixPrefix.setDescription('The address prefix. The address type of this object is specified in hpicfIpv6RtrAdvPrefixType. The length of this object is the standard length for objects of that type.')
hpicfIpv6RtrAdvPrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 9, 2, 1, 4), InetAddressPrefixLength())
if mibBuilder.loadTexts: hpicfIpv6RtrAdvPrefixLength.setStatus('current')
if mibBuilder.loadTexts: hpicfIpv6RtrAdvPrefixLength.setDescription("The prefix length associated with this prefix. The value 0 has no special meaning for this object. It simply refers to address '::/0'.")
hpicfIpv6RtrAdvPrefixOnLinkFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 9, 2, 1, 5), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfIpv6RtrAdvPrefixOnLinkFlag.setStatus('current')
if mibBuilder.loadTexts: hpicfIpv6RtrAdvPrefixOnLinkFlag.setDescription('Router Advertisement messages are sent out with the On-Link flag (L-bit) field set to this value.')
hpicfIpv6RtrAdvPrefixAutonomousFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 9, 2, 1, 6), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfIpv6RtrAdvPrefixAutonomousFlag.setStatus('current')
if mibBuilder.loadTexts: hpicfIpv6RtrAdvPrefixAutonomousFlag.setDescription('Autonomous address configuration flag. Router Advertisement messages are sent out with the autonomous flag field set to this value in the Prefix Information.')
hpicfIpv6RtrAdvPrefixLifetimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 9, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fixed", 1), ("realTime", 2))).clone('fixed')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfIpv6RtrAdvPrefixLifetimeType.setStatus('current')
if mibBuilder.loadTexts: hpicfIpv6RtrAdvPrefixLifetimeType.setDescription('Specifies if the hpicfIpv6RtrAdvPrefixPreferredLifetime and hpicfIpv6RtrAdvPrefixValidLifetime are of the kind where consecutive advertisements have the same time(fixed) or a time that decrements in real time. The realTime(2) can be used to specify a time in future at which the LifeTimes become zero.')
hpicfIpv6RtrAdvPrefixPreferredLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 9, 2, 1, 8), Unsigned32().clone(604800)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfIpv6RtrAdvPrefixPreferredLifetime.setStatus('current')
if mibBuilder.loadTexts: hpicfIpv6RtrAdvPrefixPreferredLifetime.setDescription('The length of time ,in seconds,that this prefix will be preferred. A value of 4,294,967,295 represents infinity. The Router Advertisement messages are sent out with the Preferred LifeTime field set to this value. To specify in a realTime way,set this object to a future time in number of seconds since January 1, 1990, Coordinated Universal Time and also set hpicfIpv6RtrAdvPrefixTimeType to realTime. The default value is 7 days(604800 seconds) fixed time')
hpicfIpv6RtrAdvPrefixValidLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 9, 2, 1, 9), Unsigned32().clone(2592000)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfIpv6RtrAdvPrefixValidLifetime.setStatus('current')
if mibBuilder.loadTexts: hpicfIpv6RtrAdvPrefixValidLifetime.setDescription('The length of time, in seconds, that this prefix will continue to be valid, i.e. time until invalidation. A value of 4,294,967,295 represents infinity. The Router advertisement messages are sent out with the Valid LifeTime field set to this value. To specify in a realTime way,set this object to a future time in number of seconds since January 1, 1990, Coordinated Universal Time and also set hpicfIpv6RtrAdvPrefixTimeType to realTime. The default value is 30 days (or 2592000 seconds) fixed time.')
hpicfIpv6RtrAdvPrefixRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 9, 2, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfIpv6RtrAdvPrefixRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfIpv6RtrAdvPrefixRowStatus.setDescription('The status of this conceptual row. As all objects in this conceptual row have default values a row can be created and made active by setting this object appropriately.')
hpicfIpv6RtrAdvPrefixAdvertiseFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 9, 2, 1, 11), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfIpv6RtrAdvPrefixAdvertiseFlag.setStatus('current')
if mibBuilder.loadTexts: hpicfIpv6RtrAdvPrefixAdvertiseFlag.setDescription('Specifies whether the prefix in this entry is advertised or not.When set to TRUE prefix is advertised.')
hpicfIpRouteSummary = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 10))
class HpicfIpRouteProtoName(TextualConvention, Integer32):
    description = 'An enumerated value which indicates the protocol name for show IP route summary.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 7, 8, 9, 10, 11, 12, 13, 15, 17, 18, 22, 23, 24, 25, 27, 32, 33, 40, 42))
    namedValues = NamedValues(("connected", 1), ("ipv6", 7), ("ospf2ase", 8), ("rip", 9), ("bgp", 10), ("rdisc6", 11), ("static", 12), ("snmp", 13), ("isis", 15), ("ripng", 17), ("ipv4", 18), ("pim", 22), ("rdisc", 23), ("ospf2", 24), ("ospf2nssa", 25), ("mroute", 27), ("igmpv3", 32), ("pim6", 33), ("mpls", 40), ("vrrp2", 42))

hpicfIpRouteSummaryTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 10, 1), )
if mibBuilder.loadTexts: hpicfIpRouteSummaryTable.setStatus('current')
if mibBuilder.loadTexts: hpicfIpRouteSummaryTable.setDescription('IP route summary table in global context.')
hpicfIpRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 10, 1, 1), ).setIndexNames((0, "HP-ICF-IP-ROUTING", "hpicfIpRouteProto"))
if mibBuilder.loadTexts: hpicfIpRouteEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfIpRouteEntry.setDescription('IP route summary table information.')
hpicfIpRouteProto = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 10, 1, 1, 1), HpicfIpRouteProtoName())
if mibBuilder.loadTexts: hpicfIpRouteProto.setStatus('current')
if mibBuilder.loadTexts: hpicfIpRouteProto.setDescription('Protocol names that are enabled and active.')
hpicfIpRouteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 10, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpRouteCnt.setStatus('current')
if mibBuilder.loadTexts: hpicfIpRouteCnt.setDescription('count of active routes per routing protocol.')
hpicfIpv6RouteSummary = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 11))
class HpicfIpv6RouteProtoName(TextualConvention, Integer32):
    description = 'An enumerated value which indicates the protocol name for show IPv6 route summary.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 17, 18, 22, 23, 24, 25, 27, 32, 33, 40, 42))
    namedValues = NamedValues(("connected", 1), ("ospf3", 4), ("ospf3ase", 5), ("ospf3nssa", 6), ("ipv6", 7), ("ospf2ase", 8), ("rip", 9), ("bgp", 10), ("rdisc6", 11), ("static", 12), ("snmp", 13), ("isis", 15), ("ripng", 17), ("ipv4", 18), ("pim", 22), ("rdisc", 23), ("ospf2", 24), ("ospf2nssa", 25), ("mroute", 27), ("igmpv3", 32), ("pim6", 33), ("mpls", 40), ("vrrp2", 42))

hpicfIpv6RouteSummaryTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 11, 1), )
if mibBuilder.loadTexts: hpicfIpv6RouteSummaryTable.setStatus('current')
if mibBuilder.loadTexts: hpicfIpv6RouteSummaryTable.setDescription('IPv6 route summary table in the global context.')
hpicfIpv6RouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 11, 1, 1), ).setIndexNames((0, "HP-ICF-IP-ROUTING", "hpicfIpv6RouteProto"))
if mibBuilder.loadTexts: hpicfIpv6RouteEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfIpv6RouteEntry.setDescription('IPv6 route summary table information.')
hpicfIpv6RouteProto = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 11, 1, 1, 1), HpicfIpv6RouteProtoName())
if mibBuilder.loadTexts: hpicfIpv6RouteProto.setStatus('current')
if mibBuilder.loadTexts: hpicfIpv6RouteProto.setDescription('IPv6 route protocol names that are enabled and active.')
hpicfIpv6RouteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 11, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpv6RouteCnt.setStatus('current')
if mibBuilder.loadTexts: hpicfIpv6RouteCnt.setDescription('A count of active IPv6 routes per routing protocol.')
hpicfIpRouteBaseScalars = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 3))
hpicfIpRouteCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 3, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpRouteCount.setStatus('current')
if mibBuilder.loadTexts: hpicfIpRouteCount.setDescription('This parameter specifies total number of routes in the Routing table.')
hpicfIpRouteNextHopCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 3, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpRouteNextHopCount.setStatus('current')
if mibBuilder.loadTexts: hpicfIpRouteNextHopCount.setDescription('This parameter specifies total number of next-hop entries in the Routing table. This parameter is useful to know how many other routers are connected and acting as a next-hop router for this router ')
hpicfIpv6RtrAdvTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 9, 3), )
if mibBuilder.loadTexts: hpicfIpv6RtrAdvTable.setStatus('current')
if mibBuilder.loadTexts: hpicfIpv6RtrAdvTable.setDescription('This table augments ipv6RouterAdvertEntry and it contains HP proprietary objects for managing router advertisements.')
hpicfIpv6NDRADNSAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 9, 4), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfIpv6NDRADNSAdminStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfIpv6NDRADNSAdminStatus.setDescription('A flag indicating whether or not the router includes DNS options with periodic router advertisements.')
hpicfIpv6RtrAdvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 9, 3, 1), )
ipv6RouterAdvertEntry.registerAugmentions(("HP-ICF-IP-ROUTING", "hpicfIpv6RtrAdvEntry"))
hpicfIpv6RtrAdvEntry.setIndexNames(*ipv6RouterAdvertEntry.getIndexNames())
if mibBuilder.loadTexts: hpicfIpv6RtrAdvEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfIpv6RtrAdvEntry.setDescription('An entry in the hpicfIpv6RtrAdvEntry contains Router Advertisement parameters.')
hpicfIpv6RtrAdvCurHopLimitMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 9, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("global", 1), ("perInterface", 2))).clone('global')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfIpv6RtrAdvCurHopLimitMode.setStatus('current')
if mibBuilder.loadTexts: hpicfIpv6RtrAdvCurHopLimitMode.setDescription(" This object indicates whether the value in ipv6RouterAdvertCurHopLimit is in use or the value in ipv6IpDefaultHopLimit is in use for an entry in this table. A set to 'global' means: - ipv6IpDefaultHopLimit value will be used for hop limit. A set to 'perInterface' means: - ipv6RouterAdvertCurHopLimit value will be used for hop limit.")
hpicfIpv6RouterAdvertSendDNSAdverts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 9, 3, 1, 2), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfIpv6RouterAdvertSendDNSAdverts.setStatus('current')
if mibBuilder.loadTexts: hpicfIpv6RouterAdvertSendDNSAdverts.setDescription('A flag indicating whether or not the router includes DNS options in periodic router advertisements on this interface.')
hpicfIpv6RouterAdvertRtrPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 9, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("low", 1), ("medium", 2), ("high", 3))).clone('medium')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfIpv6RouterAdvertRtrPreference.setStatus('current')
if mibBuilder.loadTexts: hpicfIpv6RouterAdvertRtrPreference.setDescription('Indicates whether to prefer this router over other default routers.')
hpicfIpRoutingConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2))
hpicfIpRoutingGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 1))
hpicfRdiscBaseGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 1, 1)).setObjects(("HP-ICF-IP-ROUTING", "hpicfRdiscAdminStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfRdiscBaseGroup = hpicfRdiscBaseGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfRdiscBaseGroup.setDescription('Basic ICMP Router Discovery configuration objects.')
hpicfRdiscIfCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 1, 2)).setObjects(("HP-ICF-IP-ROUTING", "hpicfRdiscIfAdminStatus"), ("HP-ICF-IP-ROUTING", "hpicfRdiscIfAdvertAddress"), ("HP-ICF-IP-ROUTING", "hpicfRdiscIfMaxAdvertInterval"), ("HP-ICF-IP-ROUTING", "hpicfRdiscIfMinAdvertInterval"), ("HP-ICF-IP-ROUTING", "hpicfRdiscIfAdvertLifetime"), ("HP-ICF-IP-ROUTING", "hpicfRdiscIfPreference"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfRdiscIfCfgGroup = hpicfRdiscIfCfgGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfRdiscIfCfgGroup.setDescription('A collection of objects allowing per-interface configuration of ICMP Router Discovery operation.')
hpicfIcmpReplyBaseGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 1, 3)).setObjects(("HP-ICF-IP-ROUTING", "hpicfIcmpRedirectEnable"), ("HP-ICF-IP-ROUTING", "hpicfIcmpDestUnreachEnable"), ("HP-ICF-IP-ROUTING", "hpicfIcmpAddrMaskReplyEnable"), ("HP-ICF-IP-ROUTING", "hpicfIcmpEchoBroadcastReplyEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIcmpReplyBaseGroup = hpicfIcmpReplyBaseGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfIcmpReplyBaseGroup.setDescription('A collection of objects allowing configuration of ICMP Redirect operation.')
hpicfIcmpReplyLimitGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 1, 4)).setObjects(("HP-ICF-IP-ROUTING", "hpicfIcmpReplyLimitEnable"), ("HP-ICF-IP-ROUTING", "hpicfIcmpReplyLimit"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIcmpReplyLimitGroup = hpicfIcmpReplyLimitGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfIcmpReplyLimitGroup.setDescription('A collection of objects allowing configuration of ICMP Reply rate limiting.')
hpicfIpRouteCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 1, 5)).setObjects(("HP-ICF-IP-ROUTING", "hpicfDBroadcastFwdEnable"), ("HP-ICF-IP-ROUTING", "hpicfSourceRouteEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIpRouteCfgGroup = hpicfIpRouteCfgGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfIpRouteCfgGroup.setDescription('A collection of objects allowing configuration of IP global enables.')
hpicfIpStaticRouteGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 1, 6)).setObjects(("HP-ICF-IP-ROUTING", "hpicfIpStaticRouteType"), ("HP-ICF-IP-ROUTING", "hpicfIpStaticRouteDistance"), ("HP-ICF-IP-ROUTING", "hpicfIpStaticRouteTag"), ("HP-ICF-IP-ROUTING", "hpicfIpStaticRouteLogging"), ("HP-ICF-IP-ROUTING", "hpicfIpStaticRouteStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIpStaticRouteGroup = hpicfIpStaticRouteGroup.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfIpStaticRouteGroup.setDescription('A collection of objects for configuring IP static routes.')
hpicfIpStaticNeighborGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 1, 7)).setObjects(("HP-ICF-IP-ROUTING", "hpicfIpStaticNeighborPhysAddress"), ("HP-ICF-IP-ROUTING", "hpicfIpStaticNeighborStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIpStaticNeighborGroup = hpicfIpStaticNeighborGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfIpStaticNeighborGroup.setDescription('A collection of objects for configuring IP static neighbors.')
hpicfIpCidrRouteGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 1, 8)).setObjects(("HP-ICF-IP-ROUTING", "hpicfIpCidrRouteDistance"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIpCidrRouteGroup = hpicfIpCidrRouteGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfIpCidrRouteGroup.setDescription('A collection of objects for retrieving extended information about routes in the routing table.')
hpicfInetCidrRouteGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 1, 9)).setObjects(("HP-ICF-IP-ROUTING", "hpicfInetCidrRouteDistance"), ("HP-ICF-IP-ROUTING", "hpicfInetCidrRouteInfo"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfInetCidrRouteGroup = hpicfInetCidrRouteGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfInetCidrRouteGroup.setDescription('A collection of objects for retrieving extended information about routes in the routing table.')
hpicfArpBaseGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 1, 10)).setObjects(("HP-ICF-IP-ROUTING", "hpicfArpAgingTime"), ("HP-ICF-IP-ROUTING", "hpicfArpMcastReplies"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfArpBaseGroup = hpicfArpBaseGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfArpBaseGroup.setDescription('Basic ARP (address resolution protocol) configuration objects.')
hpicfIpv6RtrAdvPrefixGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 1, 11)).setObjects(("HP-ICF-IP-ROUTING", "hpicfIpv6RtrAdvPrefixOnLinkFlag"), ("HP-ICF-IP-ROUTING", "hpicfIpv6RtrAdvPrefixAutonomousFlag"), ("HP-ICF-IP-ROUTING", "hpicfIpv6RtrAdvPrefixLifetimeType"), ("HP-ICF-IP-ROUTING", "hpicfIpv6RtrAdvPrefixPreferredLifetime"), ("HP-ICF-IP-ROUTING", "hpicfIpv6RtrAdvPrefixValidLifetime"), ("HP-ICF-IP-ROUTING", "hpicfIpv6RtrAdvPrefixRowStatus"), ("HP-ICF-IP-ROUTING", "hpicfIpv6RtrAdvPrefixAdvertiseFlag"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIpv6RtrAdvPrefixGroup = hpicfIpv6RtrAdvPrefixGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfIpv6RtrAdvPrefixGroup.setDescription('The group of objects in a table for configuring the Router Advertisement options. ')
hpicfIpv6RtrAdvGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 1, 12)).setObjects(("HP-ICF-IP-ROUTING", "hpicfIpv6RtrAdvCurHopLimitMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIpv6RtrAdvGroup = hpicfIpv6RtrAdvGroup.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfIpv6RtrAdvGroup.setDescription('The group of objects in a table for configuring the Router Advertisement options. ')
hpicfGlobalIpConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 1, 13)).setObjects(("HP-ICF-IP-ROUTING", "hpicfDBroadcastFwdEnable"), ("HP-ICF-IP-ROUTING", "hpicfSourceRouteEnable"), ("HP-ICF-IP-ROUTING", "hpicfIpMaximumPaths"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfGlobalIpConfigGroup = hpicfGlobalIpConfigGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfGlobalIpConfigGroup.setDescription('The group of objects in a table hp BSD broadcast forwarding enable/disable flags. ')
hpicfIpDefaultRouterGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 1, 14)).setObjects(("HP-ICF-IP-ROUTING", "hpicfIpDefaultRouterPrefixOnLink"), ("HP-ICF-IP-ROUTING", "hpicfIpDefaultRouterPrefixAutonomous"), ("HP-ICF-IP-ROUTING", "hpicfIpDefaultRouterPrefixValidLifeTime"), ("HP-ICF-IP-ROUTING", "hpicfIpDefaultRouterPrefixPrefdLifeTime"), ("HP-ICF-IP-ROUTING", "hpicfIpDefaultRouterMTU"), ("HP-ICF-IP-ROUTING", "hpicfIpDefaultRouterHopLimit"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIpDefaultRouterGroup = hpicfIpDefaultRouterGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfIpDefaultRouterGroup.setDescription('The group of objects in a table for default routing.')
hpicfIpv6NDRAAdminGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 1, 15)).setObjects(("HP-ICF-IP-ROUTING", "hpicfIpv6NDRAAdminStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIpv6NDRAAdminGroup = hpicfIpv6NDRAAdminGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfIpv6NDRAAdminGroup.setDescription('This group member is used to enable / disable IPV6 neighbor discovery router advertisement global admin status.')
hpicfIpRouteBaseScalarsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 1, 16)).setObjects(("HP-ICF-IP-ROUTING", "hpicfIpRouteCount"), ("HP-ICF-IP-ROUTING", "hpicfIpRouteNextHopCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIpRouteBaseScalarsGroup = hpicfIpRouteBaseScalarsGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfIpRouteBaseScalarsGroup.setDescription('This group contains both number of routing entries and number next hobs specified as part of routing table.')
hpicfIpStaticRouteOtherGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 1, 17)).setObjects(("HP-ICF-IP-ROUTING", "hpicfIpStaticRouteMetric"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIpStaticRouteOtherGroup = hpicfIpStaticRouteOtherGroup.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfIpStaticRouteOtherGroup.setDescription('The group of objects for configuring IP static routes.')
hpicfIpRouteSummaryTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 1, 18)).setObjects(("HP-ICF-IP-ROUTING", "hpicfIpRouteCnt"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIpRouteSummaryTableGroup = hpicfIpRouteSummaryTableGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfIpRouteSummaryTableGroup.setDescription('This group contains the count of active routes for each routing protocol.')
hpicfInetCidrRouteGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 1, 19)).setObjects(("HP-ICF-IP-ROUTING", "hpicfInetCidrRouteState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfInetCidrRouteGroup1 = hpicfInetCidrRouteGroup1.setStatus('current')
if mibBuilder.loadTexts: hpicfInetCidrRouteGroup1.setDescription('A collection of objects for retrieving extended information (state and age) about routes in the routing table.')
hpicfInetCidrRouteStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 1, 20)).setObjects(("HP-ICF-IP-ROUTING", "hpicfInetCidrNumRouteDestinations"), ("HP-ICF-IP-ROUTING", "hpicfInetCidrNumRouteRoutes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfInetCidrRouteStatsGroup = hpicfInetCidrRouteStatsGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfInetCidrRouteStatsGroup.setDescription('The group of objects for the total number of destinations and routes for a particular inet type.')
hpicfIpv6RtrAdvDNSGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 1, 21)).setObjects(("HP-ICF-IP-ROUTING", "hpicfIpv6RouterAdvertSendDNSAdverts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIpv6RtrAdvDNSGroup = hpicfIpv6RtrAdvDNSGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfIpv6RtrAdvDNSGroup.setDescription('The group of objects in a table for configuring the Router Advertisement options.')
hpicfIpv6NDRADNSAdminGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 1, 22)).setObjects(("HP-ICF-IP-ROUTING", "hpicfIpv6NDRADNSAdminStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIpv6NDRADNSAdminGroup = hpicfIpv6NDRADNSAdminGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfIpv6NDRADNSAdminGroup.setDescription('This group member is used to enable / disable IPV6 router advertisement DNS option global admin status.')
hpicfIpStaticRouteNameGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 1, 23)).setObjects(("HP-ICF-IP-ROUTING", "hpicfIpStaticRouteName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIpStaticRouteNameGroup = hpicfIpStaticRouteNameGroup.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfIpStaticRouteNameGroup.setDescription('This group member is used to configure name of the static route being configured')
hpicfIpv6RouteSummaryTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 1, 24)).setObjects(("HP-ICF-IP-ROUTING", "hpicfIpv6RouteProto"), ("HP-ICF-IP-ROUTING", "hpicfIpv6RouteCnt"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIpv6RouteSummaryTableGroup = hpicfIpv6RouteSummaryTableGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfIpv6RouteSummaryTableGroup.setDescription('This group contains the count of active IPv6 routes for each routing protocol.')
hpicfDBroadcastFwdAclGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 1, 25)).setObjects(("HP-ICF-IP-ROUTING", "hpicfDBroadcastFwdAcl"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDBroadcastFwdAclGroup = hpicfDBroadcastFwdAclGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfDBroadcastFwdAclGroup.setDescription('The group member is used to configure name of ACL when it is applied to IP Directed Broadcast.')
hpicfIpStaticRouteParamGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 1, 26)).setObjects(("HP-ICF-IP-ROUTING", "hpicfIpStaticRouteType"), ("HP-ICF-IP-ROUTING", "hpicfIpStaticRouteDistance"), ("HP-ICF-IP-ROUTING", "hpicfIpStaticRouteTag"), ("HP-ICF-IP-ROUTING", "hpicfIpStaticRouteStatus"), ("HP-ICF-IP-ROUTING", "hpicfIpStaticRouteMetric"), ("HP-ICF-IP-ROUTING", "hpicfIpStaticRouteName"), ("HP-ICF-IP-ROUTING", "hpicfIpStaticRouteLogging"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIpStaticRouteParamGroup = hpicfIpStaticRouteParamGroup.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfIpStaticRouteParamGroup.setDescription('A collection of objects for configuring IP static routes.')
hpicfIpStaticRouteParamGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 1, 28)).setObjects(("HP-ICF-IP-ROUTING", "hpicfIpStaticRouteType"), ("HP-ICF-IP-ROUTING", "hpicfIpStaticRouteDistance"), ("HP-ICF-IP-ROUTING", "hpicfIpStaticRouteTag"), ("HP-ICF-IP-ROUTING", "hpicfIpStaticRouteStatus"), ("HP-ICF-IP-ROUTING", "hpicfIpStaticRouteMetric"), ("HP-ICF-IP-ROUTING", "hpicfIpStaticRouteName"), ("HP-ICF-IP-ROUTING", "hpicfIpStaticRouteLogging"), ("HP-ICF-IP-ROUTING", "hpicfIpStaticRouteBfdEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIpStaticRouteParamGroup1 = hpicfIpStaticRouteParamGroup1.setStatus('current')
if mibBuilder.loadTexts: hpicfIpStaticRouteParamGroup1.setDescription('A collection of objects for configuring IP static routes.')
hpicfIpStaticRouteBfdGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 1, 29)).setObjects(("HP-ICF-IP-ROUTING", "hpicfIpStaticRouteBfdSrcAddrType"), ("HP-ICF-IP-ROUTING", "hpicfIpStaticRouteBfdSrcAddr"), ("HP-ICF-IP-ROUTING", "hpicfIpStaticRouteBfdDstAddrType"), ("HP-ICF-IP-ROUTING", "hpicfIpStaticRouteBfdDstAddr"), ("HP-ICF-IP-ROUTING", "hpicfIpStaticRouteBfdStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIpStaticRouteBfdGroup = hpicfIpStaticRouteBfdGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfIpStaticRouteBfdGroup.setDescription('The group of objects in a table for configuring the bfd for static routes. ')
hpicfIpv6RtrAdvParamGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 1, 27)).setObjects(("HP-ICF-IP-ROUTING", "hpicfIpv6RtrAdvCurHopLimitMode"), ("HP-ICF-IP-ROUTING", "hpicfIpv6RouterAdvertRtrPreference"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIpv6RtrAdvParamGroup = hpicfIpv6RtrAdvParamGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfIpv6RtrAdvParamGroup.setDescription('The group of objects in a table for configuring the Router Advertisement options. ')
hpicfIpRoutingCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 2))
hpicfIcmpRdiscCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 2, 1)).setObjects(("HP-ICF-IP-ROUTING", "hpicfRdiscBaseGroup"), ("HP-ICF-IP-ROUTING", "hpicfRdiscIfCfgGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIcmpRdiscCompliance = hpicfIcmpRdiscCompliance.setStatus('current')
if mibBuilder.loadTexts: hpicfIcmpRdiscCompliance.setDescription('The compliance statement for HP Routing switches that support ICMP Router Discovery.')
hpicfIcmpReplyCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 2, 2)).setObjects(("HP-ICF-IP-ROUTING", "hpicfIcmpReplyBaseGroup"), ("HP-ICF-IP-ROUTING", "hpicfIcmpReplyLimitGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIcmpReplyCompliance = hpicfIcmpReplyCompliance.setStatus('current')
if mibBuilder.loadTexts: hpicfIcmpReplyCompliance.setDescription('The compliance statement for HP Routing switches that support ICMP Reply Limiting.')
hpicfIpRouterCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 2, 3)).setObjects(("HP-ICF-IP-ROUTING", "hpicfRdiscBaseGroup"), ("HP-ICF-IP-ROUTING", "hpicfRdiscIfCfgGroup"), ("HP-ICF-IP-ROUTING", "hpicfIcmpReplyBaseGroup"), ("HP-ICF-IP-ROUTING", "hpicfIcmpReplyLimitGroup"), ("HP-ICF-IP-ROUTING", "hpicfIpRouteCfgGroup"), ("HP-ICF-IP-ROUTING", "hpicfIpStaticRouteGroup"), ("HP-ICF-IP-ROUTING", "hpicfIpStaticNeighborGroup"), ("HP-ICF-IP-ROUTING", "hpicfIpCidrRouteGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIpRouterCompliance = hpicfIpRouterCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfIpRouterCompliance.setDescription('The compliance statement for HP Routing switches.')
hpicfArpInfoCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 2, 4)).setObjects(("HP-ICF-IP-ROUTING", "hpicfArpBaseGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfArpInfoCompliance = hpicfArpInfoCompliance.setStatus('current')
if mibBuilder.loadTexts: hpicfArpInfoCompliance.setDescription('The compliance statement for HP Routing switches that support ARP.')
hpicfIpv6RtrAdvPrefixCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 2, 5)).setObjects(("HP-ICF-IP-ROUTING", "hpicfIpv6RtrAdvPrefixGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIpv6RtrAdvPrefixCompliance = hpicfIpv6RtrAdvPrefixCompliance.setStatus('current')
if mibBuilder.loadTexts: hpicfIpv6RtrAdvPrefixCompliance.setDescription('The compliance statement for HP Routing switches that support Router Advertisements')
hpicfIpv6RtrAdvCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 2, 6)).setObjects(("HP-ICF-IP-ROUTING", "hpicfIpv6RtrAdvGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIpv6RtrAdvCompliance = hpicfIpv6RtrAdvCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfIpv6RtrAdvCompliance.setDescription('The compliance statement for HP Routing switches that support Router Advertisements')
hpicfGlobalIpConfigCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 2, 7)).setObjects(("HP-ICF-IP-ROUTING", "hpicfGlobalIpConfigGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfGlobalIpConfigCompliance = hpicfGlobalIpConfigCompliance.setStatus('current')
if mibBuilder.loadTexts: hpicfGlobalIpConfigCompliance.setDescription('The compliance statement for HP Routing switches that support Router Advertisements.')
hpicfIpDefaultRouterCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 2, 8)).setObjects(("HP-ICF-IP-ROUTING", "hpicfIpDefaultRouterGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIpDefaultRouterCompliance = hpicfIpDefaultRouterCompliance.setStatus('current')
if mibBuilder.loadTexts: hpicfIpDefaultRouterCompliance.setDescription('The compliance statement for HP Routing switches that support Router Advertisements.')
hpicfIpv6NDRAAdminCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 2, 9)).setObjects(("HP-ICF-IP-ROUTING", "hpicfIpv6NDRAAdminGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIpv6NDRAAdminCompliance = hpicfIpv6NDRAAdminCompliance.setStatus('current')
if mibBuilder.loadTexts: hpicfIpv6NDRAAdminCompliance.setDescription('IPV6 neighbor discovery router advertisement global admin status.')
hpicfIpRouteBaseScalarsCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 2, 10)).setObjects(("HP-ICF-IP-ROUTING", "hpicfIpRouteBaseScalarsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIpRouteBaseScalarsCompliance = hpicfIpRouteBaseScalarsCompliance.setStatus('current')
if mibBuilder.loadTexts: hpicfIpRouteBaseScalarsCompliance.setDescription('This group contains both number of routing entries and number next hobs specified as part of routing table.')
hpicfInetCidrRouteCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 2, 11)).setObjects(("HP-ICF-IP-ROUTING", "hpicfInetCidrRouteGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfInetCidrRouteCompliance = hpicfInetCidrRouteCompliance.setStatus('current')
if mibBuilder.loadTexts: hpicfInetCidrRouteCompliance.setDescription('A collection of objects for retrieving extended information about routes in the routing table.')
hpicfIpRouterOtherCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 2, 12)).setObjects(("HP-ICF-IP-ROUTING", "hpicfIpStaticRouteOtherGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIpRouterOtherCompliance = hpicfIpRouterOtherCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfIpRouterOtherCompliance.setDescription('The compliance statement for HP Routing switches.')
hpicfIpRouteSummaryCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 2, 13)).setObjects(("HP-ICF-IP-ROUTING", "hpicfIpRouteSummaryTableGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIpRouteSummaryCompliance = hpicfIpRouteSummaryCompliance.setStatus('current')
if mibBuilder.loadTexts: hpicfIpRouteSummaryCompliance.setDescription('A collection of objects for active routes.')
hpicfInetCidrRouteCompliance1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 2, 14)).setObjects(("HP-ICF-IP-ROUTING", "hpicfInetCidrRouteGroup1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfInetCidrRouteCompliance1 = hpicfInetCidrRouteCompliance1.setStatus('current')
if mibBuilder.loadTexts: hpicfInetCidrRouteCompliance1.setDescription('A collection of objects for retrieving extended information (state and age) about routes in the routing table.')
hpicfInetCidrRouteStatsCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 2, 15)).setObjects(("HP-ICF-IP-ROUTING", "hpicfInetCidrRouteStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfInetCidrRouteStatsCompliance = hpicfInetCidrRouteStatsCompliance.setStatus('current')
if mibBuilder.loadTexts: hpicfInetCidrRouteStatsCompliance.setDescription('A collection of objects for retrieving the total number of destinations and routes for a particular inet type.')
hpicfIpv6RtrAdvDNSCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 2, 16)).setObjects(("HP-ICF-IP-ROUTING", "hpicfIpv6RtrAdvDNSGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIpv6RtrAdvDNSCompliance = hpicfIpv6RtrAdvDNSCompliance.setStatus('current')
if mibBuilder.loadTexts: hpicfIpv6RtrAdvDNSCompliance.setDescription('The compliance statement for HP Routing switches that support Router Advertisements')
hpicfIpv6NDRADNSAdminCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 2, 17)).setObjects(("HP-ICF-IP-ROUTING", "hpicfIpv6NDRADNSAdminGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIpv6NDRADNSAdminCompliance = hpicfIpv6NDRADNSAdminCompliance.setStatus('current')
if mibBuilder.loadTexts: hpicfIpv6NDRADNSAdminCompliance.setDescription('IPV6 router advertisement DNS option global admin status.')
hpicfIpStaticRouteNameCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 2, 18)).setObjects(("HP-ICF-IP-ROUTING", "hpicfIpStaticRouteNameGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIpStaticRouteNameCompliance = hpicfIpStaticRouteNameCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfIpStaticRouteNameCompliance.setDescription('The compliance statement for the static route name to add visibility to the static route being configured')
hpicfIpv6RouteSummaryCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 2, 19)).setObjects(("HP-ICF-IP-ROUTING", "hpicfIpv6RouteSummaryTableGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIpv6RouteSummaryCompliance = hpicfIpv6RouteSummaryCompliance.setStatus('current')
if mibBuilder.loadTexts: hpicfIpv6RouteSummaryCompliance.setDescription('A collection of objects providing information about an active IPv6 routes.')
hpicfIpDBroadcastFwdAclCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 2, 20)).setObjects(("HP-ICF-IP-ROUTING", "hpicfDBroadcastFwdAclGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIpDBroadcastFwdAclCompliance = hpicfIpDBroadcastFwdAclCompliance.setStatus('current')
if mibBuilder.loadTexts: hpicfIpDBroadcastFwdAclCompliance.setDescription('The compliance statement for the ACL name being applied to IP Directed Broadcast.')
hpicfIpRouteCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 2, 21)).setObjects(("HP-ICF-IP-ROUTING", "hpicfRdiscBaseGroup"), ("HP-ICF-IP-ROUTING", "hpicfRdiscIfCfgGroup"), ("HP-ICF-IP-ROUTING", "hpicfIcmpReplyBaseGroup"), ("HP-ICF-IP-ROUTING", "hpicfIcmpReplyLimitGroup"), ("HP-ICF-IP-ROUTING", "hpicfIpRouteCfgGroup"), ("HP-ICF-IP-ROUTING", "hpicfIpStaticNeighborGroup"), ("HP-ICF-IP-ROUTING", "hpicfIpCidrRouteGroup"), ("HP-ICF-IP-ROUTING", "hpicfIpStaticRouteParamGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIpRouteCompliance = hpicfIpRouteCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfIpRouteCompliance.setDescription('The compliance statement for HP Routing switches.')
hpicfIpv6RtrAdvParamCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 2, 22)).setObjects(("HP-ICF-IP-ROUTING", "hpicfIpv6RtrAdvParamGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIpv6RtrAdvParamCompliance = hpicfIpv6RtrAdvParamCompliance.setStatus('current')
if mibBuilder.loadTexts: hpicfIpv6RtrAdvParamCompliance.setDescription('The compliance statement for HP Routing switches that support Router Advertisements')
hpicfIpStaticRouteCompliance1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 2, 23)).setObjects(("HP-ICF-IP-ROUTING", "hpicfRdiscBaseGroup"), ("HP-ICF-IP-ROUTING", "hpicfRdiscIfCfgGroup"), ("HP-ICF-IP-ROUTING", "hpicfIcmpReplyBaseGroup"), ("HP-ICF-IP-ROUTING", "hpicfIcmpReplyLimitGroup"), ("HP-ICF-IP-ROUTING", "hpicfIpRouteCfgGroup"), ("HP-ICF-IP-ROUTING", "hpicfIpStaticNeighborGroup"), ("HP-ICF-IP-ROUTING", "hpicfIpCidrRouteGroup"), ("HP-ICF-IP-ROUTING", "hpicfIpStaticRouteParamGroup1"), ("HP-ICF-IP-ROUTING", "hpicfIpStaticRouteBfdGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIpStaticRouteCompliance1 = hpicfIpStaticRouteCompliance1.setStatus('current')
if mibBuilder.loadTexts: hpicfIpStaticRouteCompliance1.setDescription('The compliance statement for HP Routing switches.')
mibBuilder.exportSymbols("HP-ICF-IP-ROUTING", hpicfIpRouting=hpicfIpRouting, hpicfIpStaticRouteGroup=hpicfIpStaticRouteGroup, hpicfInetCidrRouteStatsEntry=hpicfInetCidrRouteStatsEntry, hpicfIpDBroadcastFwdAclCompliance=hpicfIpDBroadcastFwdAclCompliance, hpicfIpRouteNextHopCount=hpicfIpRouteNextHopCount, hpicfInetCidrRouteStatsTable=hpicfInetCidrRouteStatsTable, hpicfInetCidrNumRouteDestinations=hpicfInetCidrNumRouteDestinations, hpicfIpv6RtrAdvPrefixEntry=hpicfIpv6RtrAdvPrefixEntry, hpicfIpStaticRouteFwdIfIndex=hpicfIpStaticRouteFwdIfIndex, hpicfIpStaticRoutePrefixLength=hpicfIpStaticRoutePrefixLength, hpicfIpStaticRouteStatus=hpicfIpStaticRouteStatus, hpicfSourceRouteEnable=hpicfSourceRouteEnable, hpicfIpCidrRouteDistance=hpicfIpCidrRouteDistance, hpicfIpStaticRouteOtherGroup=hpicfIpStaticRouteOtherGroup, hpicfIpStaticNeighborPhysAddress=hpicfIpStaticNeighborPhysAddress, hpicfIpRouteSummaryTable=hpicfIpRouteSummaryTable, hpicfIcmpReplyBaseGroup=hpicfIcmpReplyBaseGroup, hpicfIpStaticRouteParamGroup1=hpicfIpStaticRouteParamGroup1, hpicfIpStaticNeighborStatus=hpicfIpStaticNeighborStatus, hpicfIcmpReplyLimitGroup=hpicfIcmpReplyLimitGroup, hpicfIpRoutingGroups=hpicfIpRoutingGroups, hpicfIpStaticNeighborTable=hpicfIpStaticNeighborTable, hpicfIpv6RtrAdvPrefixLifetimeType=hpicfIpv6RtrAdvPrefixLifetimeType, hpicfRdiscIfCfgTable=hpicfRdiscIfCfgTable, hpicfIpv6RouterAdvertSendDNSAdverts=hpicfIpv6RouterAdvertSendDNSAdverts, hpicfIpStaticRouteBfdDstAddrType=hpicfIpStaticRouteBfdDstAddrType, hpicfIpStaticRouteNameGroup=hpicfIpStaticRouteNameGroup, hpicfIpStaticRouteBfdSrcAddrType=hpicfIpStaticRouteBfdSrcAddrType, hpicfGlobalIpConfigCompliance=hpicfGlobalIpConfigCompliance, hpicfIpStaticRouteConfig=hpicfIpStaticRouteConfig, hpicfIpStaticRoutePrefix=hpicfIpStaticRoutePrefix, hpicfIpStaticNeighborNetAddrType=hpicfIpStaticNeighborNetAddrType, hpicfIcmpRdiscCompliance=hpicfIcmpRdiscCompliance, hpicfArpInfo=hpicfArpInfo, hpicfIpv6RtrAdvPrefixValidLifetime=hpicfIpv6RtrAdvPrefixValidLifetime, hpicfIpRouteEntry=hpicfIpRouteEntry, hpicfIpStaticRouteBfdEntry=hpicfIpStaticRouteBfdEntry, hpicfIpDefaultRouterPrefixPrefdLifeTime=hpicfIpDefaultRouterPrefixPrefdLifeTime, hpicfIpStaticRouteDistance=hpicfIpStaticRouteDistance, hpicfIpv6RtrAdvPrefixTable=hpicfIpv6RtrAdvPrefixTable, hpicfIpRouteStats=hpicfIpRouteStats, hpicfIpDefaultRouterGroup=hpicfIpDefaultRouterGroup, hpicfInetCidrRouteInfo=hpicfInetCidrRouteInfo, hpicfIpMaximumPaths=hpicfIpMaximumPaths, hpicfIpv6RtrAdvPrefixPreferredLifetime=hpicfIpv6RtrAdvPrefixPreferredLifetime, hpicfInetCidrRouteGroup=hpicfInetCidrRouteGroup, hpicfIpv6NDRADNSAdminCompliance=hpicfIpv6NDRADNSAdminCompliance, hpicfRdiscIfCfgGroup=hpicfRdiscIfCfgGroup, hpicfArpInfoCompliance=hpicfArpInfoCompliance, hpicfIpDefaultRouterCompliance=hpicfIpDefaultRouterCompliance, hpicfIcmpAddrMaskReplyEnable=hpicfIcmpAddrMaskReplyEnable, hpicfIpStaticRouteTable=hpicfIpStaticRouteTable, hpicfIpv6NDRAAdminStatus=hpicfIpv6NDRAAdminStatus, hpicfIpv6RouteSummaryTable=hpicfIpv6RouteSummaryTable, hpicfIcmpRedirectEnable=hpicfIcmpRedirectEnable, hpicfIpv6RtrAdvDNSGroup=hpicfIpv6RtrAdvDNSGroup, hpicfIpStaticNeighborGroup=hpicfIpStaticNeighborGroup, hpicfIpDefaultRouterPrefixType=hpicfIpDefaultRouterPrefixType, hpicfIpv6RtrAdvPrefixRowStatus=hpicfIpv6RtrAdvPrefixRowStatus, hpicfIpv6NDRADNSAdminStatus=hpicfIpv6NDRADNSAdminStatus, hpicfIpv6RouteSummaryTableGroup=hpicfIpv6RouteSummaryTableGroup, hpicfIpStaticRouteBfdDstAddr=hpicfIpStaticRouteBfdDstAddr, hpicfIpDefaultRouterHopLimit=hpicfIpDefaultRouterHopLimit, PYSNMP_MODULE_ID=hpicfIpRouting, hpicfIpRouteProto=hpicfIpRouteProto, hpicfIpRouteBaseScalarsCompliance=hpicfIpRouteBaseScalarsCompliance, hpicfIpv6RouteCnt=hpicfIpv6RouteCnt, hpicfIpRouteCompliance=hpicfIpRouteCompliance, hpicfIpStaticRouteLogging=hpicfIpStaticRouteLogging, hpicfInetCidrRouteStatsGroup=hpicfInetCidrRouteStatsGroup, hpicfInetCidrRouteStatsCompliance=hpicfInetCidrRouteStatsCompliance, hpicfInetCidrRouteDistance=hpicfInetCidrRouteDistance, hpicfIpv6RouteSummary=hpicfIpv6RouteSummary, hpicfIpv6RtrAdvPrefixType=hpicfIpv6RtrAdvPrefixType, hpicfIpRouteSummaryTableGroup=hpicfIpRouteSummaryTableGroup, hpicfIpStaticRouteNameCompliance=hpicfIpStaticRouteNameCompliance, hpicfIpStaticRouteBfdTable=hpicfIpStaticRouteBfdTable, hpicfIpRouterCompliance=hpicfIpRouterCompliance, hpicfIpRoutingConformance=hpicfIpRoutingConformance, hpicfIpStaticRouteBfdGroup=hpicfIpStaticRouteBfdGroup, hpicfIpv6RtrAdvPrefixOnLinkFlag=hpicfIpv6RtrAdvPrefixOnLinkFlag, hpicfIcmpEchoBroadcastReplyEnable=hpicfIcmpEchoBroadcastReplyEnable, hpicfIpRouteCfgGroup=hpicfIpRouteCfgGroup, hpicfIpDefaultRouterAddressType=hpicfIpDefaultRouterAddressType, hpicfIpv6RouteEntry=hpicfIpv6RouteEntry, hpicfIcmpDestUnreachEnable=hpicfIcmpDestUnreachEnable, hpicfIpv6RtrAdvGroup=hpicfIpv6RtrAdvGroup, hpicfIpv6RtrAdvPrefixPrefix=hpicfIpv6RtrAdvPrefixPrefix, hpicfIpRouteCount=hpicfIpRouteCount, hpicfIpStaticRouteCompliance1=hpicfIpStaticRouteCompliance1, hpicfIpStaticRouteBfdEnable=hpicfIpStaticRouteBfdEnable, hpicfInetCidrRouteCompliance=hpicfInetCidrRouteCompliance, hpicfIpv6RtrAdvParamCompliance=hpicfIpv6RtrAdvParamCompliance, hpicfIpDefaultRouterPrefixOnLink=hpicfIpDefaultRouterPrefixOnLink, hpicfIpStaticRouteType=hpicfIpStaticRouteType, hpicfIpStaticRouteMetric=hpicfIpStaticRouteMetric, hpicfIpv6RtrAdvPrefixAutonomousFlag=hpicfIpv6RtrAdvPrefixAutonomousFlag, hpicfInetCidrRouteEntry=hpicfInetCidrRouteEntry, hpicfIpv6RtrAdvPrefixCompliance=hpicfIpv6RtrAdvPrefixCompliance, HpicfIpRouteProtoName=HpicfIpRouteProtoName, hpicfIpRouteBaseScalarsGroup=hpicfIpRouteBaseScalarsGroup, hpicfDBroadcastFwdAcl=hpicfDBroadcastFwdAcl, hpicfIpv6RtrAdvPrefixAdvertiseFlag=hpicfIpv6RtrAdvPrefixAdvertiseFlag, hpicfIpDefaultRouterPrefixLength=hpicfIpDefaultRouterPrefixLength, hpicfIpv6NDRAAdminGroup=hpicfIpv6NDRAAdminGroup, hpicfIpv6RtrAdvDNSCompliance=hpicfIpv6RtrAdvDNSCompliance, hpicfIcmpBoxLimits=hpicfIcmpBoxLimits, hpicfIcmpRdisc=hpicfIcmpRdisc, hpicfRdiscIfAdminStatus=hpicfRdiscIfAdminStatus, hpicfIpRouteBaseScalars=hpicfIpRouteBaseScalars, hpicfIpCidrRouteTable=hpicfIpCidrRouteTable, hpicfIpDefaultRouterIfIndex=hpicfIpDefaultRouterIfIndex, hpicfIpStaticRouteName=hpicfIpStaticRouteName, hpicfIpv6RouterAdvertRtrPreference=hpicfIpv6RouterAdvertRtrPreference, hpicfIpDefaultRouterPrefixTable=hpicfIpDefaultRouterPrefixTable, hpicfIpDefaultRouterMTU=hpicfIpDefaultRouterMTU, hpicfIpv6RtrAdvPrefixIfIndex=hpicfIpv6RtrAdvPrefixIfIndex, HpicfIpv6RouteProtoName=HpicfIpv6RouteProtoName, hpicfRdiscAdminStatus=hpicfRdiscAdminStatus, hpicfIpRouteCnt=hpicfIpRouteCnt, hpicfRdiscIfAdvertAddress=hpicfRdiscIfAdvertAddress, hpicfIpDefaultRouterProperties=hpicfIpDefaultRouterProperties, hpicfIpRoutingCompliances=hpicfIpRoutingCompliances, hpicfIpRouterOtherCompliance=hpicfIpRouterOtherCompliance, hpicfRdiscIfMaxAdvertInterval=hpicfRdiscIfMaxAdvertInterval, hpicfIpv6NDRAAdminCompliance=hpicfIpv6NDRAAdminCompliance, hpicfIpStaticRouteBfdSrcAddr=hpicfIpStaticRouteBfdSrcAddr, hpicfIpv6RouteSummaryCompliance=hpicfIpv6RouteSummaryCompliance, hpicfIpRoutingObjects=hpicfIpRoutingObjects, hpicfIcmpRateLimits=hpicfIcmpRateLimits, hpicfIpv6RtrAdvPrefixLength=hpicfIpv6RtrAdvPrefixLength, hpicfRdiscIfMinAdvertInterval=hpicfRdiscIfMinAdvertInterval, hpicfIcmpReplyLimitEnable=hpicfIcmpReplyLimitEnable, hpicfIpv6RouteProto=hpicfIpv6RouteProto, hpicfIpRouteSummaryCompliance=hpicfIpRouteSummaryCompliance, hpicfInetCidrNumRouteRoutes=hpicfInetCidrNumRouteRoutes, hpicfRdiscIfAdvertLifetime=hpicfRdiscIfAdvertLifetime, hpicfArpAgingTime=hpicfArpAgingTime, hpicfIpDefaultRouterAddress=hpicfIpDefaultRouterAddress, hpicfIpDefaultRouterEntry=hpicfIpDefaultRouterEntry, hpicfIpStaticRouteTag=hpicfIpStaticRouteTag, hpicfIpStaticNeighborEntry=hpicfIpStaticNeighborEntry, hpicfIpStaticRouteEntry=hpicfIpStaticRouteEntry, hpicfIpStaticRoutePrefixType=hpicfIpStaticRoutePrefixType, hpicfRdiscBaseGroup=hpicfRdiscBaseGroup, hpicfIpStaticRouteFwdAddrType=hpicfIpStaticRouteFwdAddrType, hpicfIpStaticNeighborIfIndex=hpicfIpStaticNeighborIfIndex, hpicfInetCidrRouteTable=hpicfInetCidrRouteTable, hpicfRdiscIfPreference=hpicfRdiscIfPreference, hpicfIpDefaultRouterTable=hpicfIpDefaultRouterTable, hpicfIpv6RtrAdvEntry=hpicfIpv6RtrAdvEntry, hpicfIpCidrRouteGroup=hpicfIpCidrRouteGroup, hpicfIpStaticRouteParamGroup=hpicfIpStaticRouteParamGroup, hpicfIpDefaultRouterPrefixEntry=hpicfIpDefaultRouterPrefixEntry, hpicfIpv6NDRADNSAdminGroup=hpicfIpv6NDRADNSAdminGroup, hpicfGlobalIpConfig=hpicfGlobalIpConfig, hpicfIpStaticNeighborNetAddress=hpicfIpStaticNeighborNetAddress, hpicfArpMcastReplies=hpicfArpMcastReplies, hpicfInetCidrRouteCompliance1=hpicfInetCidrRouteCompliance1, hpicfIcmpReplyCompliance=hpicfIcmpReplyCompliance, hpicfIpDefaultRouterPrefixValidLifeTime=hpicfIpDefaultRouterPrefixValidLifeTime, hpicfIpv6RtrAdvCompliance=hpicfIpv6RtrAdvCompliance, hpicfIpv6RtrAdvCurHopLimitMode=hpicfIpv6RtrAdvCurHopLimitMode, hpicfIpCidrRouteEntry=hpicfIpCidrRouteEntry, hpicfDBroadcastFwdAclGroup=hpicfDBroadcastFwdAclGroup, hpicfDBroadcastFwdEnable=hpicfDBroadcastFwdEnable, hpicfInetCidrRouteState=hpicfInetCidrRouteState, hpicfRdiscIfCfgEntry=hpicfRdiscIfCfgEntry, hpicfIcmpReplyLimit=hpicfIcmpReplyLimit, hpicfIpDefaultRouterPrefix=hpicfIpDefaultRouterPrefix, hpicfIpv6RtrAdvParamGroup=hpicfIpv6RtrAdvParamGroup, hpicfIpDefaultRouterPrefixInfo=hpicfIpDefaultRouterPrefixInfo, hpicfIpv6ND=hpicfIpv6ND, hpicfIpRouteSummary=hpicfIpRouteSummary, hpicfIpStaticRouteFwdAddr=hpicfIpStaticRouteFwdAddr, hpicfIpDefaultRouterPrefixAutonomous=hpicfIpDefaultRouterPrefixAutonomous, hpicfIpv6RtrAdvPrefixGroup=hpicfIpv6RtrAdvPrefixGroup, hpicfArpBaseGroup=hpicfArpBaseGroup, hpicfIpStaticRouteBfdStatus=hpicfIpStaticRouteBfdStatus, hpicfGlobalIpConfigGroup=hpicfGlobalIpConfigGroup, hpicfInetCidrRouteGroup1=hpicfInetCidrRouteGroup1, hpicfIpv6RtrAdvTable=hpicfIpv6RtrAdvTable)
