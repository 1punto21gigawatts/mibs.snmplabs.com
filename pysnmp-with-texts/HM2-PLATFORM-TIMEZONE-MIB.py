#
# PySNMP MIB module HM2-PLATFORM-TIMEZONE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HM2-PLATFORM-TIMEZONE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:32:18 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint")
hm2PlatformMibs, = mibBuilder.importSymbols("HM2-TC-MIB", "hm2PlatformMibs")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
TimeTicks, NotificationType, MibIdentifier, ObjectIdentity, Unsigned32, Counter32, iso, Counter64, ModuleIdentity, Integer32, Bits, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "NotificationType", "MibIdentifier", "ObjectIdentity", "Unsigned32", "Counter32", "iso", "Counter64", "ModuleIdentity", "Integer32", "Bits", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
hm2PlatformTimeZone = ModuleIdentity((1, 3, 6, 1, 4, 1, 248, 12, 42))
hm2PlatformTimeZone.setRevisions(('2011-10-12 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hm2PlatformTimeZone.setRevisionsDescriptions(('Initial version.',))
if mibBuilder.loadTexts: hm2PlatformTimeZone.setLastUpdated('201110120000Z')
if mibBuilder.loadTexts: hm2PlatformTimeZone.setOrganization('Hirschmann Automation and Control GmbH')
if mibBuilder.loadTexts: hm2PlatformTimeZone.setContactInfo('Postal: Stuttgarter Str. 45-51 72654 Neckartenzlingen Germany Phone: +49 7127 140 E-mail: hac.support@belden.com')
if mibBuilder.loadTexts: hm2PlatformTimeZone.setDescription('The Hirschmann Private Platform2 MIB for system time and time zone settings. Copyright (C) 2011. All Rights Reserved.')
hm2AgentSystemTimeGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 12, 42, 1))
hm2AgentSystemTime = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 42, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentSystemTime.setStatus('current')
if mibBuilder.loadTexts: hm2AgentSystemTime.setDescription('The current system time (includes the TimeZone offset and summertime Offset)')
hm2AgentSystemDate = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 42, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentSystemDate.setStatus('current')
if mibBuilder.loadTexts: hm2AgentSystemDate.setDescription('The current system date.')
hm2AgentSystemTimeZoneAcronym = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 42, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentSystemTimeZoneAcronym.setStatus('current')
if mibBuilder.loadTexts: hm2AgentSystemTimeZoneAcronym.setDescription('The zone acronym of summertime when summertime is in effect If summer-time is not in effect or if there is no acronym for summer-time it defaults To TimeZone acronym.')
hm2AgentSystemSummerTimeState = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 42, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentSystemSummerTimeState.setStatus('current')
if mibBuilder.loadTexts: hm2AgentSystemSummerTimeState.setDescription('enabled : summer-time is in effect currently disabled : summer-time is not in effect currently')
hm2AgentTimeZoneGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 12, 42, 2))
hm2AgentTimeZoneHoursOffset = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 42, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-12, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentTimeZoneHoursOffset.setStatus('current')
if mibBuilder.loadTexts: hm2AgentTimeZoneHoursOffset.setDescription('The hours to be added to the UTC time')
hm2AgentTimeZoneMinutesOffset = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 42, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentTimeZoneMinutesOffset.setStatus('current')
if mibBuilder.loadTexts: hm2AgentTimeZoneMinutesOffset.setDescription('The minutes to be added to the UTC time.')
hm2AgentTimeZoneAcronym = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 42, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentTimeZoneAcronym.setStatus('current')
if mibBuilder.loadTexts: hm2AgentTimeZoneAcronym.setDescription('The acronym associated with the zone.')
hm2AgentSummerTimeGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 12, 42, 3))
hm2AgentSummerTimeMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 42, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("noSummertime", 0), ("recurring", 1), ("recurringEu", 2), ("recurringUsa", 3))).clone('noSummertime')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentSummerTimeMode.setStatus('current')
if mibBuilder.loadTexts: hm2AgentSummerTimeMode.setDescription('Recurring - set the parameters for recurring summer-time no-summertime- disable the summer-time ')
hm2AgentSummerTimeRecurringGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 12, 42, 3, 2))
hm2AgentStRecurringStartingWeek = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 42, 3, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 0), ("first", 1), ("second", 2), ("third", 3), ("fourth", 4), ("last", 5))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentStRecurringStartingWeek.setStatus('current')
if mibBuilder.loadTexts: hm2AgentStRecurringStartingWeek.setDescription('The week of the month from which the summer-time should be effective.')
hm2AgentStRecurringStartingDay = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 42, 3, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 0), ("sun", 1), ("mon", 2), ("tue", 3), ("wed", 4), ("thu", 5), ("fri", 6), ("sat", 7))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentStRecurringStartingDay.setStatus('current')
if mibBuilder.loadTexts: hm2AgentStRecurringStartingDay.setDescription('The day of the hm2AgentStRecurringStartingWeek from which the summer-time should be effective.')
hm2AgentStRecurringStartingMonth = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 42, 3, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("none", 0), ("jan", 1), ("feb", 2), ("mar", 3), ("apr", 4), ("may", 5), ("jun", 6), ("jul", 7), ("aug", 8), ("sep", 9), ("oct", 10), ("nov", 11), ("dec", 12))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentStRecurringStartingMonth.setStatus('current')
if mibBuilder.loadTexts: hm2AgentStRecurringStartingMonth.setDescription('The month of the year from which the summer-time should be effective.')
hm2AgentStRecurringStartingTime = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 42, 3, 2, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5).clone('00:00')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentStRecurringStartingTime.setStatus('current')
if mibBuilder.loadTexts: hm2AgentStRecurringStartingTime.setDescription('The time in the hh:mm format from which the summer-time should be effective. range for hh: 0 to 23 range for mm: 0 to 59 ')
hm2AgentStRecurringEndingWeek = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 42, 3, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 0), ("first", 1), ("second", 2), ("third", 3), ("fourth", 4), ("last", 5))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentStRecurringEndingWeek.setStatus('current')
if mibBuilder.loadTexts: hm2AgentStRecurringEndingWeek.setDescription('The week of the Month in which the summer-time should end.')
hm2AgentStRecurringEndingDay = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 42, 3, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 0), ("sun", 1), ("mon", 2), ("tue", 3), ("wed", 4), ("thu", 5), ("fri", 6), ("sat", 7))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentStRecurringEndingDay.setStatus('current')
if mibBuilder.loadTexts: hm2AgentStRecurringEndingDay.setDescription('The day of the hm2AgentStRecurringStartingWeek on which the summer-time should end.')
hm2AgentStRecurringEndingMonth = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 42, 3, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("none", 0), ("jan", 1), ("feb", 2), ("mar", 3), ("apr", 4), ("may", 5), ("jun", 6), ("jul", 7), ("aug", 8), ("sep", 9), ("oct", 10), ("nov", 11), ("dec", 12))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentStRecurringEndingMonth.setStatus('current')
if mibBuilder.loadTexts: hm2AgentStRecurringEndingMonth.setDescription('The month of the year in which the summer-time should end.')
hm2AgentStRecurringEndingTime = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 42, 3, 2, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5).clone('00:00')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentStRecurringEndingTime.setStatus('current')
if mibBuilder.loadTexts: hm2AgentStRecurringEndingTime.setDescription('The time of the hm2AgentStRecurringEndingDay in hh:mm format at which the summer-time should end. range for hh: 0 to 23 range for mm: 0 to 59')
hm2AgentStRecurringZoneAcronym = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 42, 3, 2, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentStRecurringZoneAcronym.setStatus('current')
if mibBuilder.loadTexts: hm2AgentStRecurringZoneAcronym.setDescription('The zone associated with the summer-time recurring configuration. the acronym maximum legth is 4 characters')
hm2AgentStRecurringZoneOffset = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 42, 3, 2, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentStRecurringZoneOffset.setStatus('current')
if mibBuilder.loadTexts: hm2AgentStRecurringZoneOffset.setDescription('The zone offset in minutes which will be added to the UTC time during the summer-time of every year.')
mibBuilder.exportSymbols("HM2-PLATFORM-TIMEZONE-MIB", hm2AgentTimeZoneGroup=hm2AgentTimeZoneGroup, hm2AgentSystemTimeZoneAcronym=hm2AgentSystemTimeZoneAcronym, hm2AgentStRecurringZoneAcronym=hm2AgentStRecurringZoneAcronym, hm2AgentStRecurringStartingTime=hm2AgentStRecurringStartingTime, hm2AgentStRecurringStartingDay=hm2AgentStRecurringStartingDay, hm2AgentTimeZoneMinutesOffset=hm2AgentTimeZoneMinutesOffset, PYSNMP_MODULE_ID=hm2PlatformTimeZone, hm2AgentSummerTimeGroup=hm2AgentSummerTimeGroup, hm2AgentSystemDate=hm2AgentSystemDate, hm2AgentStRecurringEndingWeek=hm2AgentStRecurringEndingWeek, hm2AgentSystemTimeGroup=hm2AgentSystemTimeGroup, hm2AgentStRecurringEndingDay=hm2AgentStRecurringEndingDay, hm2AgentStRecurringZoneOffset=hm2AgentStRecurringZoneOffset, hm2AgentStRecurringEndingTime=hm2AgentStRecurringEndingTime, hm2AgentSummerTimeRecurringGroup=hm2AgentSummerTimeRecurringGroup, hm2AgentSystemSummerTimeState=hm2AgentSystemSummerTimeState, hm2AgentTimeZoneHoursOffset=hm2AgentTimeZoneHoursOffset, hm2AgentSystemTime=hm2AgentSystemTime, hm2AgentSummerTimeMode=hm2AgentSummerTimeMode, hm2PlatformTimeZone=hm2PlatformTimeZone, hm2AgentStRecurringStartingMonth=hm2AgentStRecurringStartingMonth, hm2AgentStRecurringStartingWeek=hm2AgentStRecurringStartingWeek, hm2AgentStRecurringEndingMonth=hm2AgentStRecurringEndingMonth, hm2AgentTimeZoneAcronym=hm2AgentTimeZoneAcronym)
