#
# PySNMP MIB module CNTEXT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CNTEXT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:25:29 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
cntExt, = mibBuilder.importSymbols("APENT-MIB", "cntExt")
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, NotificationType, Gauge32, ObjectIdentity, TimeTicks, IpAddress, MibIdentifier, Bits, ModuleIdentity, Unsigned32, iso, Counter32, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "NotificationType", "Gauge32", "ObjectIdentity", "TimeTicks", "IpAddress", "MibIdentifier", "Bits", "ModuleIdentity", "Unsigned32", "iso", "Counter32", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "DisplayString")
apCntExtMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 2467, 1, 16, 1))
if mibBuilder.loadTexts: apCntExtMib.setLastUpdated('9710092000Z')
if mibBuilder.loadTexts: apCntExtMib.setOrganization('ArrowPoint Communications Inc.')
if mibBuilder.loadTexts: apCntExtMib.setContactInfo(' Postal: ArrowPoint Communications Inc. 50 Nagog Park Acton, Massachusetts 01720 Tel: +1 978-206-3000 option 1 E-Mail: support@arrowpoint.com')
if mibBuilder.loadTexts: apCntExtMib.setDescription('The MIB module used to describe the ArrowPoint Communications content rule table')
apCntRuleOrder = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 16, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("hierarchicalFirst", 0), ("cacheRuleFirst", 1))).clone('cacheRuleFirst')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apCntRuleOrder.setStatus('current')
if mibBuilder.loadTexts: apCntRuleOrder.setDescription('Affects which ruleset is consulted first when categorizing flows')
apCntTable = MibTable((1, 3, 6, 1, 4, 1, 2467, 1, 16, 4), )
if mibBuilder.loadTexts: apCntTable.setStatus('current')
if mibBuilder.loadTexts: apCntTable.setDescription('A list of content rule entries.')
apCntEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2467, 1, 16, 4, 1), ).setIndexNames((0, "CNTEXT-MIB", "apCntOwner"), (0, "CNTEXT-MIB", "apCntName"))
if mibBuilder.loadTexts: apCntEntry.setStatus('current')
if mibBuilder.loadTexts: apCntEntry.setDescription('A group of information to uniquely identify a content providing service.')
apCntOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 16, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apCntOwner.setStatus('current')
if mibBuilder.loadTexts: apCntOwner.setDescription('The name of the contents administrative owner.')
apCntName = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 16, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apCntName.setStatus('current')
if mibBuilder.loadTexts: apCntName.setDescription('The name of the content providing service.')
apCntIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 16, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCntIndex.setStatus('current')
if mibBuilder.loadTexts: apCntIndex.setDescription('The unique service index assigned to the name by the SCM.')
apCntIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 16, 4, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apCntIPAddress.setStatus('current')
if mibBuilder.loadTexts: apCntIPAddress.setDescription('The IP Address the of the content providing service.')
apCntIPProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 16, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 6, 17))).clone(namedValues=NamedValues(("any", 0), ("tcp", 6), ("udp", 17))).clone('any')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apCntIPProtocol.setStatus('current')
if mibBuilder.loadTexts: apCntIPProtocol.setDescription('The IP Protocol the of the content providing service.')
apCntPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 16, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apCntPort.setStatus('current')
if mibBuilder.loadTexts: apCntPort.setDescription('The UDP or TCP port of the content providing service.')
apCntUrl = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 16, 4, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apCntUrl.setStatus('current')
if mibBuilder.loadTexts: apCntUrl.setDescription('The name of the content providing service.')
apCntSticky = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 16, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("none", 1), ("ssl", 2), ("cookieurl", 3), ("url", 4), ("cookies", 5), ("sticky-srcip-dstport", 6), ("sticky-srcip", 7), ("arrowpoint-cookie", 8))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apCntSticky.setStatus('current')
if mibBuilder.loadTexts: apCntSticky.setDescription('The sticky attribute controls whether source addresses stick to a server once they go to it initially based on load balancing.')
apCntBalance = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 16, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("roundrobin", 1), ("aca", 2), ("destip", 3), ("srcip", 4), ("domain", 5), ("url", 6), ("leastconn", 7), ("weightedrr", 8), ("domainhash", 9), ("urlhash", 10))).clone('roundrobin')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apCntBalance.setStatus('current')
if mibBuilder.loadTexts: apCntBalance.setDescription('The load distribution algorithm to use for this content.')
apCntQOSTag = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 16, 4, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(7)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apCntQOSTag.setStatus('current')
if mibBuilder.loadTexts: apCntQOSTag.setDescription('The QOS tag to associate with this content definition.')
apCntEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 16, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apCntEnable.setStatus('current')
if mibBuilder.loadTexts: apCntEnable.setDescription('The state of the service, either enable or disabled')
apCntRedirect = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 16, 4, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apCntRedirect.setStatus('current')
if mibBuilder.loadTexts: apCntRedirect.setDescription('Where to 302 redirect any requests for this content')
apCntDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 16, 4, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apCntDrop.setStatus('current')
if mibBuilder.loadTexts: apCntDrop.setDescription('Specify that requests for this content receive a 404 message and the txt to include')
apCntSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 16, 4, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(4000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apCntSize.setStatus('obsolete')
if mibBuilder.loadTexts: apCntSize.setDescription('This object is obsolete.')
apCntPersistence = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 16, 4, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apCntPersistence.setStatus('current')
if mibBuilder.loadTexts: apCntPersistence.setDescription('Controls whether each GET is inspected individuallly or else GETs may be pipelined on a single persistent TCP connection')
apCntAuthor = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 16, 4, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apCntAuthor.setStatus('current')
if mibBuilder.loadTexts: apCntAuthor.setDescription('The name of the author of this content rule.')
apCntSpider = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 16, 4, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apCntSpider.setStatus('current')
if mibBuilder.loadTexts: apCntSpider.setDescription('Controls whether the content will be spidered at rule activation time.')
apCntHits = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 16, 4, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCntHits.setStatus('current')
if mibBuilder.loadTexts: apCntHits.setDescription('Number of times user request was detected which invoked this content rule.')
apCntRedirects = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 16, 4, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCntRedirects.setStatus('current')
if mibBuilder.loadTexts: apCntRedirects.setDescription('Number of times this content rule caused a redirect request.')
apCntDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 16, 4, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCntDrops.setStatus('current')
if mibBuilder.loadTexts: apCntDrops.setDescription('Number of times this content rule was unable to establish a connection.')
apCntRejNoServices = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 16, 4, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCntRejNoServices.setStatus('current')
if mibBuilder.loadTexts: apCntRejNoServices.setDescription('Number of times this content rule rejected a connection for want of a service.')
apCntRejServOverload = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 16, 4, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCntRejServOverload.setStatus('current')
if mibBuilder.loadTexts: apCntRejServOverload.setDescription('Number of times this content rule rejected a connection because of overload on the designated service(s).')
apCntSpoofs = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 16, 4, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCntSpoofs.setStatus('current')
if mibBuilder.loadTexts: apCntSpoofs.setDescription('Number of times a connection was created using this content rule.')
apCntNats = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 16, 4, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCntNats.setStatus('current')
if mibBuilder.loadTexts: apCntNats.setDescription('Number of times network address translation was performed using this content rule.')
apCntByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 16, 4, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCntByteCount.setStatus('current')
if mibBuilder.loadTexts: apCntByteCount.setDescription('Total number of bytes passed using this content rule.')
apCntFrameCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 16, 4, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCntFrameCount.setStatus('current')
if mibBuilder.loadTexts: apCntFrameCount.setDescription('Total number of frames passed using this content rule.')
apCntZeroButton = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 16, 4, 1, 27), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apCntZeroButton.setStatus('current')
if mibBuilder.loadTexts: apCntZeroButton.setDescription('Number of time counters for this content rule have been zeroed.')
apCntHotListEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 16, 4, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apCntHotListEnabled.setStatus('current')
if mibBuilder.loadTexts: apCntHotListEnabled.setDescription('Controls whether a hotlist will be maintained for this content rule.')
apCntHotListSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 16, 4, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apCntHotListSize.setStatus('current')
if mibBuilder.loadTexts: apCntHotListSize.setDescription('Total number of hotlist entries which will be maintainted for this rule.')
apCntHotListThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 16, 4, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apCntHotListThreshold.setStatus('current')
if mibBuilder.loadTexts: apCntHotListThreshold.setDescription('The threshold under which an item is not considered hot.')
apCntHotListType = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 16, 4, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("hitCount", 0))).clone('hitCount')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apCntHotListType.setStatus('current')
if mibBuilder.loadTexts: apCntHotListType.setDescription('Configures how a determination of hotness will be done.')
apCntHotListInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 16, 4, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apCntHotListInterval.setStatus('current')
if mibBuilder.loadTexts: apCntHotListInterval.setDescription('The interval in units of minutes used to refreshing the hot list.')
apCntFlowTrack = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 16, 4, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apCntFlowTrack.setStatus('current')
if mibBuilder.loadTexts: apCntFlowTrack.setDescription('Controls whether arrowflow reporting will be done for this content rule.')
apCntWeightMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 16, 4, 1, 34), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apCntWeightMask.setStatus('current')
if mibBuilder.loadTexts: apCntWeightMask.setDescription('This object specifies a bitmask used to determine the type of metric to be used for load balancing.')
apCntStickyMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 16, 4, 1, 35), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apCntStickyMask.setStatus('current')
if mibBuilder.loadTexts: apCntStickyMask.setDescription('This object specifies the sticky mask used to determine the portion of the IP Address which denotes stickness between the server and client.')
apCntCookieStartPos = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 16, 4, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 600)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apCntCookieStartPos.setStatus('current')
if mibBuilder.loadTexts: apCntCookieStartPos.setDescription('This object specifies the start of a cookie.')
apCntHeuristicCookieFence = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 16, 4, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(100)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apCntHeuristicCookieFence.setStatus('current')
if mibBuilder.loadTexts: apCntHeuristicCookieFence.setDescription('This object specifies the end of a Heuristic Cookie Fence.')
apCntEqlName = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 16, 4, 1, 38), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apCntEqlName.setStatus('current')
if mibBuilder.loadTexts: apCntEqlName.setDescription('The name of the EQL associated with this content rule')
apCntCacheFalloverType = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 16, 4, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("linear", 1), ("next", 2), ("bypass", 3))).clone('linear')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apCntCacheFalloverType.setStatus('current')
if mibBuilder.loadTexts: apCntCacheFalloverType.setDescription('The type of fallover to use with division balancing')
apCntLocalLoadThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 16, 4, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 254)).clone(254)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apCntLocalLoadThreshold.setStatus('current')
if mibBuilder.loadTexts: apCntLocalLoadThreshold.setDescription('Redirect services are preferred when all local services exceed this thrreshold.')
apCntStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 16, 4, 1, 41), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apCntStatus.setStatus('current')
if mibBuilder.loadTexts: apCntStatus.setDescription('Status entry for this row ')
apCntRedirectLoadThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 16, 4, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apCntRedirectLoadThreshold.setStatus('current')
if mibBuilder.loadTexts: apCntRedirectLoadThreshold.setDescription('Redirect services are eligible when their load is below this thrreshold.')
apCntContentType = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 16, 4, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("http", 1), ("ftp-control", 2), ("realaudio-control", 3), ("ssl", 4), ("bypass", 5), ("ftp-publish", 6))).clone('http')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apCntContentType.setStatus('current')
if mibBuilder.loadTexts: apCntContentType.setDescription('The type of flow associated with this rule')
apCntStickyInactivity = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 16, 4, 1, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apCntStickyInactivity.setStatus('current')
if mibBuilder.loadTexts: apCntStickyInactivity.setDescription('The maximun inactivity on a sticky connection (in minutes)')
apCntDNSBalance = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 16, 4, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("preferlocal", 1), ("roundrobin", 2), ("useownerdnsbalance", 3), ("leastloaded", 4))).clone('useownerdnsbalance')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apCntDNSBalance.setStatus('current')
if mibBuilder.loadTexts: apCntDNSBalance.setDescription('The DNS distribution algorithm to use for this content rule.')
apCntStickyGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 16, 4, 1, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apCntStickyGroup.setStatus('current')
if mibBuilder.loadTexts: apCntStickyGroup.setDescription('The sticky group number of a rule, 0 means not being used')
apCntAppTypeBypasses = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 16, 4, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCntAppTypeBypasses.setStatus('current')
if mibBuilder.loadTexts: apCntAppTypeBypasses.setDescription('Total number of frames bypassed directly by matching this content rule.')
apCntNoSvcBypasses = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 16, 4, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCntNoSvcBypasses.setStatus('current')
if mibBuilder.loadTexts: apCntNoSvcBypasses.setDescription('Total number of frames bypassed due to no services available on this content rule.')
apCntSvcLoadBypasses = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 16, 4, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCntSvcLoadBypasses.setStatus('current')
if mibBuilder.loadTexts: apCntSvcLoadBypasses.setDescription('Total number of frames bypassed due to overloaded services on this content rule.')
apCntConnCtBypasses = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 16, 4, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCntConnCtBypasses.setStatus('current')
if mibBuilder.loadTexts: apCntConnCtBypasses.setDescription('Total number of frames bypassed due to connection count on this content rule.')
apCntUrqlTblName = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 16, 4, 1, 51), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apCntUrqlTblName.setStatus('current')
if mibBuilder.loadTexts: apCntUrqlTblName.setDescription('The name of the URQL table associated with this content rule')
apCntStickyStrPre = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 16, 4, 1, 52), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apCntStickyStrPre.setStatus('current')
if mibBuilder.loadTexts: apCntStickyStrPre.setDescription('The string prefix for sticky string operation')
apCntStickyStrEos = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 16, 4, 1, 53), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apCntStickyStrEos.setStatus('current')
if mibBuilder.loadTexts: apCntStickyStrEos.setDescription('The End-Of-String characters')
apCntStickyStrSkipLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 16, 4, 1, 54), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apCntStickyStrSkipLen.setStatus('current')
if mibBuilder.loadTexts: apCntStickyStrSkipLen.setDescription('The number of bytes to be skipped before sticky operation')
apCntStickyStrProcLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 16, 4, 1, 55), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apCntStickyStrProcLen.setStatus('current')
if mibBuilder.loadTexts: apCntStickyStrProcLen.setDescription('The number of bytes to be processed by the string action')
apCntStickyStrAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 16, 4, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("hash-a", 1), ("hash-xor", 2), ("hash-crc32", 3), ("match-service-cookie", 4))).clone('match-service-cookie')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apCntStickyStrAction.setStatus('current')
if mibBuilder.loadTexts: apCntStickyStrAction.setDescription('The sticky operation to be applied on the sticky cookie/string')
apCntStickyStrAsciiConv = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 16, 4, 1, 57), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apCntStickyStrAsciiConv.setStatus('current')
if mibBuilder.loadTexts: apCntStickyStrAsciiConv.setDescription('To convert the escaped ASCII code to its char in sticky string')
apCntPrimarySorryServer = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 16, 4, 1, 58), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apCntPrimarySorryServer.setStatus('current')
if mibBuilder.loadTexts: apCntPrimarySorryServer.setDescription('The last chance server which will be chosen if all other servers fail')
apCntSecondSorryServer = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 16, 4, 1, 59), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apCntSecondSorryServer.setStatus('current')
if mibBuilder.loadTexts: apCntSecondSorryServer.setDescription('The backup for the primary sorry server')
apCntPrimarySorryHits = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 16, 4, 1, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCntPrimarySorryHits.setStatus('current')
if mibBuilder.loadTexts: apCntPrimarySorryHits.setDescription('Total number of hits to the primary sorry server')
apCntSecondSorryHits = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 16, 4, 1, 61), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCntSecondSorryHits.setStatus('current')
if mibBuilder.loadTexts: apCntSecondSorryHits.setDescription('Total number of hits to the secondary sorry server')
apCntStickySrvrDownFailover = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 16, 4, 1, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("reject", 1), ("redirect", 2), ("balance", 3), ("sticky-srcip", 4), ("sticky-srcip-dstport", 5))).clone('balance')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apCntStickySrvrDownFailover.setStatus('current')
if mibBuilder.loadTexts: apCntStickySrvrDownFailover.setDescription('The failover mechanism used when sticky server is not active')
apCntStickyStrType = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 16, 4, 1, 63), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("cookieurl", 1), ("url", 2), ("cookies", 3))).clone('cookieurl')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apCntStickyStrType.setStatus('current')
if mibBuilder.loadTexts: apCntStickyStrType.setDescription('The type of string that strig criteria applies to')
apCntParamBypass = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 16, 4, 1, 64), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apCntParamBypass.setStatus('current')
if mibBuilder.loadTexts: apCntParamBypass.setDescription("Specifies that content requests which contain the special terminators '?' or '#' indicating arguments in the request are to bypass transparent caches and are to be sent directly to the origin server.")
apCntAvgLocalLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 16, 4, 1, 65), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCntAvgLocalLoad.setStatus('current')
if mibBuilder.loadTexts: apCntAvgLocalLoad.setDescription('The currently sensed average load for all local services under this rule')
apCntAvgRemoteLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 16, 4, 1, 66), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCntAvgRemoteLoad.setStatus('current')
if mibBuilder.loadTexts: apCntAvgRemoteLoad.setDescription('The currently sensed average load for all remote services under this rule')
apCntDqlName = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 16, 4, 1, 67), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apCntDqlName.setStatus('current')
if mibBuilder.loadTexts: apCntDqlName.setDescription('The name of the DQL table associated with this content rule')
apCntIPAddressRange = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 16, 4, 1, 68), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apCntIPAddressRange.setStatus('current')
if mibBuilder.loadTexts: apCntIPAddressRange.setDescription('The range of IP Addresses of the content providing service.')
apCntTagListName = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 16, 4, 1, 69), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apCntTagListName.setStatus('current')
if mibBuilder.loadTexts: apCntTagListName.setDescription('The name of the tag list to be used with this content rule')
apCntStickyNoCookieAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 16, 4, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("loadbalance", 1), ("reject", 2), ("redirect", 3), ("service", 4))).clone('loadbalance')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apCntStickyNoCookieAction.setStatus('current')
if mibBuilder.loadTexts: apCntStickyNoCookieAction.setDescription('The action to be taken when no cookie found with sticky cookie config.')
apCntStickyNoCookieString = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 16, 4, 1, 71), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apCntStickyNoCookieString.setStatus('current')
if mibBuilder.loadTexts: apCntStickyNoCookieString.setDescription('The String used by sticky no cookie redirect action')
apCntStickyCookiePath = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 16, 4, 1, 72), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 99))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apCntStickyCookiePath.setStatus('current')
if mibBuilder.loadTexts: apCntStickyCookiePath.setDescription('The value to be used as the Cookie Path Attribute.')
apCntStickyCookieExp = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 16, 4, 1, 73), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(11, 11)).setFixedLength(11)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apCntStickyCookieExp.setStatus('current')
if mibBuilder.loadTexts: apCntStickyCookieExp.setDescription('The value to be used as the Cookie Experation Attribute. Format - dd:hh:mm:ss')
apCntStickyCacheExp = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 16, 4, 1, 74), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60)).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apCntStickyCacheExp.setStatus('current')
if mibBuilder.loadTexts: apCntStickyCacheExp.setDescription('The value used to time out entries in the Cookie Cache.')
apCntTagWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 16, 4, 1, 75), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apCntTagWeight.setStatus('current')
if mibBuilder.loadTexts: apCntTagWeight.setDescription('The weight assigned to the rule using header-field-group.')
apCntAclBypassCt = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 16, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCntAclBypassCt.setStatus('current')
if mibBuilder.loadTexts: apCntAclBypassCt.setDescription('Total number of frames bypassed due to ACL restrictions.')
apCntNoRuleBypassCt = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 16, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCntNoRuleBypassCt.setStatus('current')
if mibBuilder.loadTexts: apCntNoRuleBypassCt.setDescription('Total number of frames bypassed due to no rule matches.')
apCntCacheMissBypassCt = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 16, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCntCacheMissBypassCt.setStatus('current')
if mibBuilder.loadTexts: apCntCacheMissBypassCt.setDescription('Total number of frames bypassed due to returning from a transparent cache.')
apCntGarbageBypassCt = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 16, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCntGarbageBypassCt.setStatus('current')
if mibBuilder.loadTexts: apCntGarbageBypassCt.setDescription('Total number of frames bypassed due to unknown info found in the URL.')
apCntUrlParamsBypassCt = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 16, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCntUrlParamsBypassCt.setStatus('current')
if mibBuilder.loadTexts: apCntUrlParamsBypassCt.setDescription('Total number of frames bypassed due to paramters found in the URL.')
apCntBypassConnectionPersistence = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 16, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apCntBypassConnectionPersistence.setStatus('current')
if mibBuilder.loadTexts: apCntBypassConnectionPersistence.setDescription('Affects which ruleset is consulted first when categorizing flows')
apCntPersistenceResetMethod = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 16, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("redirect", 0), ("remap", 1))).clone('redirect')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apCntPersistenceResetMethod.setStatus('current')
if mibBuilder.loadTexts: apCntPersistenceResetMethod.setDescription('Affects which ruleset is consulted first when categorizing flows')
mibBuilder.exportSymbols("CNTEXT-MIB", apCntHits=apCntHits, apCntSecondSorryHits=apCntSecondSorryHits, apCntSpoofs=apCntSpoofs, apCntStickyNoCookieString=apCntStickyNoCookieString, apCntStickyMask=apCntStickyMask, apCntCacheFalloverType=apCntCacheFalloverType, apCntName=apCntName, apCntHotListInterval=apCntHotListInterval, apCntUrlParamsBypassCt=apCntUrlParamsBypassCt, apCntStickyStrEos=apCntStickyStrEos, PYSNMP_MODULE_ID=apCntExtMib, apCntCacheMissBypassCt=apCntCacheMissBypassCt, apCntRedirectLoadThreshold=apCntRedirectLoadThreshold, apCntSpider=apCntSpider, apCntAuthor=apCntAuthor, apCntAppTypeBypasses=apCntAppTypeBypasses, apCntExtMib=apCntExtMib, apCntStickyStrAsciiConv=apCntStickyStrAsciiConv, apCntStickyCookiePath=apCntStickyCookiePath, apCntStickyStrPre=apCntStickyStrPre, apCntIPAddressRange=apCntIPAddressRange, apCntIPProtocol=apCntIPProtocol, apCntTable=apCntTable, apCntStickyNoCookieAction=apCntStickyNoCookieAction, apCntStickyCacheExp=apCntStickyCacheExp, apCntPrimarySorryServer=apCntPrimarySorryServer, apCntCookieStartPos=apCntCookieStartPos, apCntPrimarySorryHits=apCntPrimarySorryHits, apCntAclBypassCt=apCntAclBypassCt, apCntRejServOverload=apCntRejServOverload, apCntHotListThreshold=apCntHotListThreshold, apCntUrl=apCntUrl, apCntDrops=apCntDrops, apCntSvcLoadBypasses=apCntSvcLoadBypasses, apCntEnable=apCntEnable, apCntFrameCount=apCntFrameCount, apCntSize=apCntSize, apCntEqlName=apCntEqlName, apCntWeightMask=apCntWeightMask, apCntPersistence=apCntPersistence, apCntStickyGroup=apCntStickyGroup, apCntSecondSorryServer=apCntSecondSorryServer, apCntStickyStrAction=apCntStickyStrAction, apCntHotListType=apCntHotListType, apCntParamBypass=apCntParamBypass, apCntQOSTag=apCntQOSTag, apCntGarbageBypassCt=apCntGarbageBypassCt, apCntConnCtBypasses=apCntConnCtBypasses, apCntRedirect=apCntRedirect, apCntEntry=apCntEntry, apCntNats=apCntNats, apCntStickyInactivity=apCntStickyInactivity, apCntPort=apCntPort, apCntNoRuleBypassCt=apCntNoRuleBypassCt, apCntHeuristicCookieFence=apCntHeuristicCookieFence, apCntStatus=apCntStatus, apCntZeroButton=apCntZeroButton, apCntRejNoServices=apCntRejNoServices, apCntIPAddress=apCntIPAddress, apCntFlowTrack=apCntFlowTrack, apCntContentType=apCntContentType, apCntBypassConnectionPersistence=apCntBypassConnectionPersistence, apCntRuleOrder=apCntRuleOrder, apCntAvgRemoteLoad=apCntAvgRemoteLoad, apCntDrop=apCntDrop, apCntStickyStrProcLen=apCntStickyStrProcLen, apCntSticky=apCntSticky, apCntStickyStrSkipLen=apCntStickyStrSkipLen, apCntStickyStrType=apCntStickyStrType, apCntLocalLoadThreshold=apCntLocalLoadThreshold, apCntOwner=apCntOwner, apCntTagListName=apCntTagListName, apCntNoSvcBypasses=apCntNoSvcBypasses, apCntDqlName=apCntDqlName, apCntDNSBalance=apCntDNSBalance, apCntRedirects=apCntRedirects, apCntByteCount=apCntByteCount, apCntStickySrvrDownFailover=apCntStickySrvrDownFailover, apCntTagWeight=apCntTagWeight, apCntStickyCookieExp=apCntStickyCookieExp, apCntIndex=apCntIndex, apCntHotListEnabled=apCntHotListEnabled, apCntBalance=apCntBalance, apCntAvgLocalLoad=apCntAvgLocalLoad, apCntHotListSize=apCntHotListSize, apCntPersistenceResetMethod=apCntPersistenceResetMethod, apCntUrqlTblName=apCntUrqlTblName)
