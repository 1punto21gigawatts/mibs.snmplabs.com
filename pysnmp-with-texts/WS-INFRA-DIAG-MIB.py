#
# PySNMP MIB module WS-INFRA-DIAG-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/WS-INFRA-DIAG-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:37:14 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
ObjectIdentity, MibIdentifier, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, IpAddress, iso, NotificationType, ModuleIdentity, Bits, Counter32, Integer32, TimeTicks, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "MibIdentifier", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "IpAddress", "iso", "NotificationType", "ModuleIdentity", "Bits", "Counter32", "Integer32", "TimeTicks", "Unsigned32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
wsInfraDiag, = mibBuilder.importSymbols("WS-INFRA-SMI-MIB", "wsInfraDiag")
wsInfraDiagMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 388, 14, 1, 6, 1))
wsInfraDiagMib.setRevisions(('2006-06-06 10:31', '2006-04-05 13:30', '2006-01-05 17:55', '2005-12-01 16:30', '2005-05-19 15:37', '2005-05-18 16:54',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: wsInfraDiagMib.setRevisionsDescriptions(('02a02', '02a01', '01a04', '01a03', '01a02', '01a01',))
if mibBuilder.loadTexts: wsInfraDiagMib.setLastUpdated('200601051631Z')
if mibBuilder.loadTexts: wsInfraDiagMib.setOrganization('Symbol Technologies')
if mibBuilder.loadTexts: wsInfraDiagMib.setContactInfo('Symbol Technologies, Inc. Customer Service Postal: One Symbol Plaza Holtsville, NY 11742-1300 USA Tel: +1. 631.738.6213 E-mail: support@symbol.com Web: http://www.symbol.com/support')
if mibBuilder.loadTexts: wsInfraDiagMib.setDescription('Description.')
wsInfraDiagTempControl = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 14, 1, 6, 1, 1))
wsInfraDiagTempCurrentTemp = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 1, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 450), ValueRangeConstraint(1000, 1000), ))).setUnits('0.1C').setMaxAccess("readonly")
if mibBuilder.loadTexts: wsInfraDiagTempCurrentTemp.setStatus('obsolete')
if mibBuilder.loadTexts: wsInfraDiagTempCurrentTemp.setDescription('current temperature of the temperature sensor, if there is no temp sensor, it will return 1000. ')
wsInfraDiagTempHighTemp = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 1, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 450), ValueRangeConstraint(1000, 1001), ))).setUnits('0.1C').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsInfraDiagTempHighTemp.setStatus('obsolete')
if mibBuilder.loadTexts: wsInfraDiagTempHighTemp.setDescription('high temperature of the temperature sensor, if there is no temp sensor, it will return 1000 The user could only set the temp from 0 to 450.')
wsInfraDiagTempHighTempHysteresis = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 1, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('0.1C').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsInfraDiagTempHighTempHysteresis.setStatus('obsolete')
if mibBuilder.loadTexts: wsInfraDiagTempHighTempHysteresis.setDescription('high temperature hysteresis of the temperature sensor. If there is no temp sensor, it will return 0. the user could only set the high temperature hysteresis 1-100.')
wsInfraDiagFanControl = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 14, 1, 6, 1, 2))
wsInfraDiagSysFanSpeed = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 1, 6, 1, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setUnits('1 rpm').setMaxAccess("readonly")
if mibBuilder.loadTexts: wsInfraDiagSysFanSpeed.setStatus('obsolete')
if mibBuilder.loadTexts: wsInfraDiagSysFanSpeed.setDescription('system fan speed')
wsDiagProcFanSpeed = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 1, 6, 1, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setUnits('1 rpm').setMaxAccess("readonly")
if mibBuilder.loadTexts: wsDiagProcFanSpeed.setStatus('obsolete')
if mibBuilder.loadTexts: wsDiagProcFanSpeed.setDescription('processor fan speed')
wsInfraHwBuildInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 14, 1, 6, 1, 3))
wsInfraHwTotalNum = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 1, 6, 1, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsInfraHwTotalNum.setStatus('obsolete')
if mibBuilder.loadTexts: wsInfraHwTotalNum.setDescription('total hardware number in the system')
wsInfraHwBuildInfoTable = MibTable((1, 3, 6, 1, 4, 1, 388, 14, 1, 6, 1, 3, 2), )
if mibBuilder.loadTexts: wsInfraHwBuildInfoTable.setStatus('current')
if mibBuilder.loadTexts: wsInfraHwBuildInfoTable.setDescription('Shows the system hardware configuration')
wsInfraHwBuildInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 14, 1, 6, 1, 3, 2, 1), ).setIndexNames((0, "WS-INFRA-DIAG-MIB", "wsInfraHwBuildInfoModuleIndex"))
if mibBuilder.loadTexts: wsInfraHwBuildInfoEntry.setStatus('current')
if mibBuilder.loadTexts: wsInfraHwBuildInfoEntry.setDescription('Description.')
wsInfraHwBuildInfoModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 1, 6, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: wsInfraHwBuildInfoModuleIndex.setStatus('current')
if mibBuilder.loadTexts: wsInfraHwBuildInfoModuleIndex.setDescription('hardware module index')
wsInfraHwBuildInfoModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 1, 6, 1, 3, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsInfraHwBuildInfoModuleName.setStatus('current')
if mibBuilder.loadTexts: wsInfraHwBuildInfoModuleName.setDescription('Name of the hardware module')
wsInfraHwBuildInfoVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 1, 6, 1, 3, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsInfraHwBuildInfoVersion.setStatus('current')
if mibBuilder.loadTexts: wsInfraHwBuildInfoVersion.setDescription('Version of the hardware module')
wsInfraHwBuildInfoManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 1, 6, 1, 3, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsInfraHwBuildInfoManufacturer.setStatus('current')
if mibBuilder.loadTexts: wsInfraHwBuildInfoManufacturer.setDescription('Name of the hardware component manufacturer')
wsInfraHwBuildInfoDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 1, 6, 1, 3, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsInfraHwBuildInfoDesc.setStatus('current')
if mibBuilder.loadTexts: wsInfraHwBuildInfoDesc.setDescription('Description of the device/hardware component')
wsInfraResStats = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 14, 1, 6, 1, 4))
wsInfraResCpuLoad1 = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 1, 6, 1, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: wsInfraResCpuLoad1.setStatus('current')
if mibBuilder.loadTexts: wsInfraResCpuLoad1.setDescription('% of CPU load averaged over 1 min. Precision is to the degree of 0.1 %')
wsInfraResCpuLoad5 = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 1, 6, 1, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: wsInfraResCpuLoad5.setStatus('current')
if mibBuilder.loadTexts: wsInfraResCpuLoad5.setDescription('% of CPU load averaged over 5 mins. Precision is to the degree of 0.1 %')
wsInfraResCpuLoad15 = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 1, 6, 1, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: wsInfraResCpuLoad15.setStatus('current')
if mibBuilder.loadTexts: wsInfraResCpuLoad15.setDescription('% of CPU load averaged over 15 mins. Precision is to the degree of 0.1 %')
wsInfraFreeMemory = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 1, 6, 1, 4, 4), Unsigned32()).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: wsInfraFreeMemory.setStatus('obsolete')
if mibBuilder.loadTexts: wsInfraFreeMemory.setDescription('Amount of free memory available in the system in KB')
wsInfraRootFSFree = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 1, 6, 1, 4, 5), Unsigned32()).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: wsInfraRootFSFree.setStatus('obsolete')
if mibBuilder.loadTexts: wsInfraRootFSFree.setDescription('Amount of free space available on root file system in KB')
wsInfraRootFSInodesFree = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 1, 6, 1, 4, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsInfraRootFSInodesFree.setStatus('obsolete')
if mibBuilder.loadTexts: wsInfraRootFSInodesFree.setDescription('free Inodes available on root file system')
wsInfraRamFSFree = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 1, 6, 1, 4, 7), Unsigned32()).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: wsInfraRamFSFree.setStatus('obsolete')
if mibBuilder.loadTexts: wsInfraRamFSFree.setDescription('Free space available on RAM file system')
wsInfraRamFSInodesFree = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 1, 6, 1, 4, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsInfraRamFSInodesFree.setStatus('obsolete')
if mibBuilder.loadTexts: wsInfraRamFSInodesFree.setDescription('free Inodes available on RAM file system')
wsInfraFreeFileDesc = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 1, 6, 1, 4, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsInfraFreeFileDesc.setStatus('obsolete')
if mibBuilder.loadTexts: wsInfraFreeFileDesc.setDescription('Number of free file descriptor')
wsInfraUsedKernBuff32 = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 1, 6, 1, 4, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsInfraUsedKernBuff32.setStatus('current')
if mibBuilder.loadTexts: wsInfraUsedKernBuff32.setDescription('Number of 32 byte kernel buffers used')
wsInfraUsedKernBuff64 = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 1, 6, 1, 4, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsInfraUsedKernBuff64.setStatus('current')
if mibBuilder.loadTexts: wsInfraUsedKernBuff64.setDescription('Number of 64 byte kernel buffers used')
wsInfraUsedKernBuff128 = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 1, 6, 1, 4, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsInfraUsedKernBuff128.setStatus('current')
if mibBuilder.loadTexts: wsInfraUsedKernBuff128.setDescription('Number of 128 byte kernel buffers used')
wsInfraUsedKernBuff256 = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 1, 6, 1, 4, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsInfraUsedKernBuff256.setStatus('current')
if mibBuilder.loadTexts: wsInfraUsedKernBuff256.setDescription('Number of 256 byte kernel buffers used')
wsInfraUsedKernBuff512 = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 1, 6, 1, 4, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsInfraUsedKernBuff512.setStatus('current')
if mibBuilder.loadTexts: wsInfraUsedKernBuff512.setDescription('Number of 512 byte kernel buffers used')
wsInfraUsedKernBuff1024 = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 1, 6, 1, 4, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsInfraUsedKernBuff1024.setStatus('current')
if mibBuilder.loadTexts: wsInfraUsedKernBuff1024.setDescription('Number of 1024 byte kernel buffers used')
wsInfraUsedKernBuff2048 = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 1, 6, 1, 4, 16), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsInfraUsedKernBuff2048.setStatus('current')
if mibBuilder.loadTexts: wsInfraUsedKernBuff2048.setDescription('Number of 2048 byte kernel buffers used')
wsInfraUsedKernBuff4096 = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 1, 6, 1, 4, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsInfraUsedKernBuff4096.setStatus('current')
if mibBuilder.loadTexts: wsInfraUsedKernBuff4096.setDescription('Number of 4096 byte kernel buffers used')
wsInfraUsedKernBuff8192 = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 1, 6, 1, 4, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsInfraUsedKernBuff8192.setStatus('current')
if mibBuilder.loadTexts: wsInfraUsedKernBuff8192.setDescription('Number of 8192 byte kernel buffers used')
wsInfraUsedKernBuff16384 = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 1, 6, 1, 4, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsInfraUsedKernBuff16384.setStatus('current')
if mibBuilder.loadTexts: wsInfraUsedKernBuff16384.setDescription('Number of 16384 byte kernel buffers used')
wsInfraUsedKernBuff32768 = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 1, 6, 1, 4, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsInfraUsedKernBuff32768.setStatus('current')
if mibBuilder.loadTexts: wsInfraUsedKernBuff32768.setDescription('Number of 32768 byte kernel buffers used')
wsInfraUsedKernBuff65536 = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 1, 6, 1, 4, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsInfraUsedKernBuff65536.setStatus('current')
if mibBuilder.loadTexts: wsInfraUsedKernBuff65536.setDescription('Number of 65536 byte kernel buffers used')
wsInfraUsedKernBuff131072 = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 1, 6, 1, 4, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsInfraUsedKernBuff131072.setStatus('current')
if mibBuilder.loadTexts: wsInfraUsedKernBuff131072.setDescription('Number of 131072 byte kernel buffers used')
wsInfraResCpuLoad1MinLimit = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 1, 6, 1, 4, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsInfraResCpuLoad1MinLimit.setStatus('current')
if mibBuilder.loadTexts: wsInfraResCpuLoad1MinLimit.setDescription('Limit on CPU load averaged over 1 minute')
wsInfraResCpuLoad5MinLimit = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 1, 6, 1, 4, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('0.1%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsInfraResCpuLoad5MinLimit.setStatus('current')
if mibBuilder.loadTexts: wsInfraResCpuLoad5MinLimit.setDescription('Limit on CPU load averaged over 5 minutes')
wsInfraResCpuLoad15MinLimit = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 1, 6, 1, 4, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('0.1%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsInfraResCpuLoad15MinLimit.setStatus('current')
if mibBuilder.loadTexts: wsInfraResCpuLoad15MinLimit.setDescription('Limit on CPU load averaged over 15 minutes')
wsInfraUsedKernBuff32Limit = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 1, 6, 1, 4, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsInfraUsedKernBuff32Limit.setStatus('current')
if mibBuilder.loadTexts: wsInfraUsedKernBuff32Limit.setDescription('32 byte buffer usage warning limit')
wsInfraUsedKernBuff64Limit = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 1, 6, 1, 4, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsInfraUsedKernBuff64Limit.setStatus('current')
if mibBuilder.loadTexts: wsInfraUsedKernBuff64Limit.setDescription('64 byte buffer usage warning limit')
wsInfraUsedKernBuff128Limit = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 1, 6, 1, 4, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsInfraUsedKernBuff128Limit.setStatus('current')
if mibBuilder.loadTexts: wsInfraUsedKernBuff128Limit.setDescription('128 byte buffer usage warning limit')
wsInfraUsedKernBuff256Limit = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 1, 6, 1, 4, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsInfraUsedKernBuff256Limit.setStatus('current')
if mibBuilder.loadTexts: wsInfraUsedKernBuff256Limit.setDescription('256 byte buffer usage warning limit')
wsInfraUsedKernBuff512Limit = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 1, 6, 1, 4, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsInfraUsedKernBuff512Limit.setStatus('current')
if mibBuilder.loadTexts: wsInfraUsedKernBuff512Limit.setDescription('512 byte buffer usage warning limit')
wsInfraUsedKernBuff1024Limit = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 1, 6, 1, 4, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsInfraUsedKernBuff1024Limit.setStatus('current')
if mibBuilder.loadTexts: wsInfraUsedKernBuff1024Limit.setDescription('1024 byte buffer usage warning limit')
wsInfraUsedKernBuff2048Limit = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 1, 6, 1, 4, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsInfraUsedKernBuff2048Limit.setStatus('current')
if mibBuilder.loadTexts: wsInfraUsedKernBuff2048Limit.setDescription('2048 byte buffer usage warning limit')
wsInfraUsedKernBuff4096Limit = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 1, 6, 1, 4, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsInfraUsedKernBuff4096Limit.setStatus('current')
if mibBuilder.loadTexts: wsInfraUsedKernBuff4096Limit.setDescription('4096 byte buffer usage warning limit')
wsInfraUsedKernBuff8192Limit = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 1, 6, 1, 4, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsInfraUsedKernBuff8192Limit.setStatus('current')
if mibBuilder.loadTexts: wsInfraUsedKernBuff8192Limit.setDescription('8192 byte buffer usage warning limit')
wsInfraUsedKernBuff16384Limit = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 1, 6, 1, 4, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsInfraUsedKernBuff16384Limit.setStatus('current')
if mibBuilder.loadTexts: wsInfraUsedKernBuff16384Limit.setDescription('16384 byte buffer usage warning limit')
wsInfraUsedKernBuff32768Limit = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 1, 6, 1, 4, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsInfraUsedKernBuff32768Limit.setStatus('current')
if mibBuilder.loadTexts: wsInfraUsedKernBuff32768Limit.setDescription('32768 byte buffer usage warning limit')
wsInfraUsedKernBuff65536Limit = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 1, 6, 1, 4, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsInfraUsedKernBuff65536Limit.setStatus('current')
if mibBuilder.loadTexts: wsInfraUsedKernBuff65536Limit.setDescription('65536 byte buffer usage warning limit')
wsInfraUsedKernBuff131072Limit = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 1, 6, 1, 4, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsInfraUsedKernBuff131072Limit.setStatus('current')
if mibBuilder.loadTexts: wsInfraUsedKernBuff131072Limit.setDescription('131072 byte buffer usage warning limit')
wsInfraDiagControl = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 1, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsInfraDiagControl.setStatus('current')
if mibBuilder.loadTexts: wsInfraDiagControl.setDescription('Used to enable/disable in service diagnostics')
wsInfraDiagPeriod = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 1, 6, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 30000))).setUnits('millisecond').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsInfraDiagPeriod.setStatus('current')
if mibBuilder.loadTexts: wsInfraDiagPeriod.setDescription('Period of in service diagnostics in ms')
wsInfraDiagFanNum = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 1, 6, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsInfraDiagFanNum.setStatus('current')
if mibBuilder.loadTexts: wsInfraDiagFanNum.setDescription('Total number of fans in the system')
wsInfraDiagTempSensorNum = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 1, 6, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsInfraDiagTempSensorNum.setStatus('current')
if mibBuilder.loadTexts: wsInfraDiagTempSensorNum.setDescription('Total number of temperature sensors in the system')
wsInfraDiagPlatform = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 1, 6, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsInfraDiagPlatform.setStatus('current')
if mibBuilder.loadTexts: wsInfraDiagPlatform.setDescription('Name of the hardware platform of the switch')
wsInfraDiagMonitoredFSTable = MibTable((1, 3, 6, 1, 4, 1, 388, 14, 1, 6, 1, 11), )
if mibBuilder.loadTexts: wsInfraDiagMonitoredFSTable.setStatus('current')
if mibBuilder.loadTexts: wsInfraDiagMonitoredFSTable.setDescription('Table of monitored file systems like flash, etc and var.')
wsInfraDiagMonitoredFSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 14, 1, 6, 1, 11, 1), ).setIndexNames((0, "WS-INFRA-DIAG-MIB", "wsInfraDiagMonitoredFSTableIndex"))
if mibBuilder.loadTexts: wsInfraDiagMonitoredFSEntry.setStatus('current')
if mibBuilder.loadTexts: wsInfraDiagMonitoredFSEntry.setDescription('Description.')
wsInfraDiagMonitoredFSTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 1, 6, 1, 11, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)))
if mibBuilder.loadTexts: wsInfraDiagMonitoredFSTableIndex.setStatus('current')
if mibBuilder.loadTexts: wsInfraDiagMonitoredFSTableIndex.setDescription('Simple Index.')
wsInfraDiagMonitoredFSName = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 1, 6, 1, 11, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsInfraDiagMonitoredFSName.setStatus('current')
if mibBuilder.loadTexts: wsInfraDiagMonitoredFSName.setDescription('Name of the monitored File System.')
wsInfraDiagMonitoredFSFreeSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 1, 6, 1, 11, 1, 3), Unsigned32()).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: wsInfraDiagMonitoredFSFreeSpace.setStatus('current')
if mibBuilder.loadTexts: wsInfraDiagMonitoredFSFreeSpace.setDescription('Free space currently available in monitored File System.')
wsInfraDiagMonitoredFSFreeSpacePercent = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 1, 6, 1, 11, 1, 4), Integer32()).setUnits('0.1%').setMaxAccess("readonly")
if mibBuilder.loadTexts: wsInfraDiagMonitoredFSFreeSpacePercent.setStatus('current')
if mibBuilder.loadTexts: wsInfraDiagMonitoredFSFreeSpacePercent.setDescription('Description.')
wsInfraDiagMonitoredFSFreeSpaceLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 1, 6, 1, 11, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('0.1%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsInfraDiagMonitoredFSFreeSpaceLimit.setStatus('current')
if mibBuilder.loadTexts: wsInfraDiagMonitoredFSFreeSpaceLimit.setDescription('Threshold value for free space available in the monitored File System. If the free space available falls below this value, a notification should get sent out.')
wsInfraDiagMonitoredFSSize = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 1, 6, 1, 11, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsInfraDiagMonitoredFSSize.setStatus('current')
if mibBuilder.loadTexts: wsInfraDiagMonitoredFSSize.setDescription('Size of monitored File System.')
wsInfraDiagMonitoredFSUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 1, 6, 1, 11, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsInfraDiagMonitoredFSUsed.setStatus('current')
if mibBuilder.loadTexts: wsInfraDiagMonitoredFSUsed.setDescription('Amount of monitored File System space used.')
wsInfraDiagMonitoredFSINodesFree = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 1, 6, 1, 11, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsInfraDiagMonitoredFSINodesFree.setStatus('current')
if mibBuilder.loadTexts: wsInfraDiagMonitoredFSINodesFree.setDescription('Number of free INodes in monitored File System.')
wsInfraDiagMonitoredFSINodesLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 1, 6, 1, 11, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(10)).setUnits('0.1%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsInfraDiagMonitoredFSINodesLimit.setStatus('current')
if mibBuilder.loadTexts: wsInfraDiagMonitoredFSINodesLimit.setDescription('Limit of INodes in monitored File System in %. Precision is to the degree of 0.1%.')
wsInfraDiagTempTable = MibTable((1, 3, 6, 1, 4, 1, 388, 14, 1, 6, 1, 12), )
if mibBuilder.loadTexts: wsInfraDiagTempTable.setStatus('current')
if mibBuilder.loadTexts: wsInfraDiagTempTable.setDescription('Description.')
wsInfraDiagTempEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 14, 1, 6, 1, 12, 1), ).setIndexNames((0, "WS-INFRA-DIAG-MIB", "wsInfraDiagTempIndex"))
if mibBuilder.loadTexts: wsInfraDiagTempEntry.setStatus('current')
if mibBuilder.loadTexts: wsInfraDiagTempEntry.setDescription('Description.')
wsInfraDiagTempIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 1, 6, 1, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wsInfraDiagTempIndex.setStatus('current')
if mibBuilder.loadTexts: wsInfraDiagTempIndex.setDescription('Simple Index.')
wsInfraDiagTempSensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 1, 6, 1, 12, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsInfraDiagTempSensorName.setStatus('current')
if mibBuilder.loadTexts: wsInfraDiagTempSensorName.setDescription('Name of temperature sensor. Gives an indication of the location of the sensor on the system.')
wsInfraDiagTempCurrTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 1, 6, 1, 12, 1, 3), Integer32()).setUnits('0.1C').setMaxAccess("readonly")
if mibBuilder.loadTexts: wsInfraDiagTempCurrTemp.setStatus('current')
if mibBuilder.loadTexts: wsInfraDiagTempCurrTemp.setDescription('Current temperature measured by the sensor.')
wsInfraDiagTempMaxTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 1, 6, 1, 12, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2500))).setUnits('0.1C').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsInfraDiagTempMaxTemp.setStatus('current')
if mibBuilder.loadTexts: wsInfraDiagTempMaxTemp.setDescription('Upper limit of temperature measured by the sensor. Send out a notification if this is reached.')
wsInfraDiagTempOverTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 1, 6, 1, 12, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2500))).setUnits('0.1C').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsInfraDiagTempOverTemp.setStatus('current')
if mibBuilder.loadTexts: wsInfraDiagTempOverTemp.setDescription('Over limit of temperature measured by the sensor. Send out a notification if temp gets above this value.')
wsInfraDiagFanTable = MibTable((1, 3, 6, 1, 4, 1, 388, 14, 1, 6, 1, 13), )
if mibBuilder.loadTexts: wsInfraDiagFanTable.setStatus('current')
if mibBuilder.loadTexts: wsInfraDiagFanTable.setDescription('Description.')
wsInfraDiagFanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 14, 1, 6, 1, 13, 1), ).setIndexNames((0, "WS-INFRA-DIAG-MIB", "wsInfraDiagFanIndex"))
if mibBuilder.loadTexts: wsInfraDiagFanEntry.setStatus('current')
if mibBuilder.loadTexts: wsInfraDiagFanEntry.setDescription('Description.')
wsInfraDiagFanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 1, 6, 1, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wsInfraDiagFanIndex.setStatus('current')
if mibBuilder.loadTexts: wsInfraDiagFanIndex.setDescription('Simple Index.')
wsInfraDiagFanName = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 1, 6, 1, 13, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsInfraDiagFanName.setStatus('current')
if mibBuilder.loadTexts: wsInfraDiagFanName.setDescription('Name of fan. Gives an indication of the location of the fan on the system.')
wsInfraDiagFanSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 1, 6, 1, 13, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15000))).setUnits('1 rpm').setMaxAccess("readonly")
if mibBuilder.loadTexts: wsInfraDiagFanSpeed.setStatus('current')
if mibBuilder.loadTexts: wsInfraDiagFanSpeed.setDescription('Speed of fan in rpm')
wsInfraDiagFanLowSpeedLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 1, 6, 1, 13, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1000, 15000))).setUnits('1 rpm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsInfraDiagFanLowSpeedLimit.setStatus('current')
if mibBuilder.loadTexts: wsInfraDiagFanLowSpeedLimit.setDescription('Low speed limit of fan. Send out a notification if speed gets to, or below this value.')
wsInfraDiagProcTable = MibTable((1, 3, 6, 1, 4, 1, 388, 14, 1, 6, 1, 14), )
if mibBuilder.loadTexts: wsInfraDiagProcTable.setStatus('current')
if mibBuilder.loadTexts: wsInfraDiagProcTable.setDescription('Table of top 10 processes.')
wsInfraDiagProcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 14, 1, 6, 1, 14, 1), ).setIndexNames((0, "WS-INFRA-DIAG-MIB", "wsInfraDiagProcIndex"))
if mibBuilder.loadTexts: wsInfraDiagProcEntry.setStatus('current')
if mibBuilder.loadTexts: wsInfraDiagProcEntry.setDescription('Description.')
wsInfraDiagProcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 1, 6, 1, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wsInfraDiagProcIndex.setStatus('current')
if mibBuilder.loadTexts: wsInfraDiagProcIndex.setDescription('Simple index')
wsInfraDiagProcName = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 1, 6, 1, 14, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsInfraDiagProcName.setStatus('current')
if mibBuilder.loadTexts: wsInfraDiagProcName.setDescription('Name of proc ')
wsInfraDiagProcPercentCPU = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 1, 6, 1, 14, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('0.1%').setMaxAccess("readonly")
if mibBuilder.loadTexts: wsInfraDiagProcPercentCPU.setStatus('current')
if mibBuilder.loadTexts: wsInfraDiagProcPercentCPU.setDescription('% of CPU used by proc.')
wsInfraDiagProcPercentMem = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 1, 6, 1, 14, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('0.1%').setMaxAccess("readonly")
if mibBuilder.loadTexts: wsInfraDiagProcPercentMem.setStatus('current')
if mibBuilder.loadTexts: wsInfraDiagProcPercentMem.setDescription('% of memory used by proc.')
wsInfraDiagRamStats = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 14, 1, 6, 1, 15))
wsInfraDiagRamStatsTotal = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 1, 6, 1, 15, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsInfraDiagRamStatsTotal.setStatus('current')
if mibBuilder.loadTexts: wsInfraDiagRamStatsTotal.setDescription('Total RAM available in the system')
wsInfraDiagRamStatsUsed = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 1, 6, 1, 15, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsInfraDiagRamStatsUsed.setStatus('current')
if mibBuilder.loadTexts: wsInfraDiagRamStatsUsed.setDescription('Total RAM used in the system')
wsInfraDiagRamStatsFree = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 1, 6, 1, 15, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsInfraDiagRamStatsFree.setStatus('current')
if mibBuilder.loadTexts: wsInfraDiagRamStatsFree.setDescription('Total RAM not used in the system')
wsInfraDiagRamStatsPercentFree = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 1, 6, 1, 15, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('0.1%').setMaxAccess("readonly")
if mibBuilder.loadTexts: wsInfraDiagRamStatsPercentFree.setStatus('current')
if mibBuilder.loadTexts: wsInfraDiagRamStatsPercentFree.setDescription('% of free RAM in system')
wsInfraDiagRamStatsPercentFreeLimit = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 1, 6, 1, 15, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 250))).setUnits('0.1 %').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsInfraDiagRamStatsPercentFreeLimit.setStatus('current')
if mibBuilder.loadTexts: wsInfraDiagRamStatsPercentFreeLimit.setDescription('Limit of free RAM in system in %.')
wsInfraDiagPktBuffStats = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 14, 1, 6, 1, 17))
wsInfraDiagPktBuffAlloc = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 1, 6, 1, 17, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsInfraDiagPktBuffAlloc.setStatus('current')
if mibBuilder.loadTexts: wsInfraDiagPktBuffAlloc.setDescription('Amount of allocated packet buffer in system.')
wsInfraDiagPktBuffUsed = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 1, 6, 1, 17, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsInfraDiagPktBuffUsed.setStatus('current')
if mibBuilder.loadTexts: wsInfraDiagPktBuffUsed.setDescription('Amount of used packet buffer in system.')
wsInfraDiagPktBuffMax = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 1, 6, 1, 17, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('KB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsInfraDiagPktBuffMax.setStatus('current')
if mibBuilder.loadTexts: wsInfraDiagPktBuffMax.setDescription('Limit on maximum of allocated packet buffer in system.')
wsInfraDiagIpRouteCacheStats = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 14, 1, 6, 1, 18))
wsInfraDiagIpRouteCacheAlloc = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 1, 6, 1, 18, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsInfraDiagIpRouteCacheAlloc.setStatus('current')
if mibBuilder.loadTexts: wsInfraDiagIpRouteCacheAlloc.setDescription('Amount of allocated IP route cache in system.')
wsInfraDiagIpRouteCacheUsed = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 1, 6, 1, 18, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsInfraDiagIpRouteCacheUsed.setStatus('current')
if mibBuilder.loadTexts: wsInfraDiagIpRouteCacheUsed.setDescription('Amount of used IP route cache in system.')
wsInfraDiagIpRouteCacheMax = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 1, 6, 1, 18, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsInfraDiagIpRouteCacheMax.setStatus('current')
if mibBuilder.loadTexts: wsInfraDiagIpRouteCacheMax.setDescription('Max limit of allocated IP route cache in system.')
wsInfraDiagFileDescStats = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 14, 1, 6, 1, 19))
wsInfraDiagFileDescInUse = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 1, 6, 1, 19, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsInfraDiagFileDescInUse.setStatus('current')
if mibBuilder.loadTexts: wsInfraDiagFileDescInUse.setDescription('Number of file descriptors in use.')
wsInfraDiagFileDescHWM = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 1, 6, 1, 19, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsInfraDiagFileDescHWM.setStatus('current')
if mibBuilder.loadTexts: wsInfraDiagFileDescHWM.setDescription('Description.')
wsInfraDiagFileDescLimit = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 1, 6, 1, 19, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767)).clone(0)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsInfraDiagFileDescLimit.setStatus('current')
if mibBuilder.loadTexts: wsInfraDiagFileDescLimit.setDescription('Limit of file descriptors.')
wsInfraDiagProcNum = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 1, 6, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsInfraDiagProcNum.setStatus('current')
if mibBuilder.loadTexts: wsInfraDiagProcNum.setDescription('Number of procs currently running in the system')
wsInfraDiagProcMemLimit = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 1, 6, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsInfraDiagProcMemLimit.setStatus('current')
if mibBuilder.loadTexts: wsInfraDiagProcMemLimit.setDescription('Memory limit on processes running in the system.')
wsInfraDiagMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 14, 1, 6, 1, 100))
wsInfraDiagMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 14, 1, 6, 1, 100, 1))
wsInfraDiagMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 388, 14, 1, 6, 1, 100, 1, 1)).setObjects(("WS-INFRA-DIAG-MIB", "wsInfraMIBDiagGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    wsInfraDiagMIBCompliance = wsInfraDiagMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: wsInfraDiagMIBCompliance.setDescription('diag MIB compliance')
wsInfraDiagMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 14, 1, 6, 1, 100, 2))
wsInfraMIBDiagGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 388, 14, 1, 6, 1, 100, 2, 1)).setObjects(("WS-INFRA-DIAG-MIB", "wsInfraHwBuildInfoModuleName"), ("WS-INFRA-DIAG-MIB", "wsInfraHwBuildInfoVersion"), ("WS-INFRA-DIAG-MIB", "wsInfraHwBuildInfoManufacturer"), ("WS-INFRA-DIAG-MIB", "wsInfraHwBuildInfoDesc"), ("WS-INFRA-DIAG-MIB", "wsInfraResCpuLoad1"), ("WS-INFRA-DIAG-MIB", "wsInfraResCpuLoad5"), ("WS-INFRA-DIAG-MIB", "wsInfraResCpuLoad15"), ("WS-INFRA-DIAG-MIB", "wsInfraUsedKernBuff32"), ("WS-INFRA-DIAG-MIB", "wsInfraUsedKernBuff64"), ("WS-INFRA-DIAG-MIB", "wsInfraUsedKernBuff128"), ("WS-INFRA-DIAG-MIB", "wsInfraUsedKernBuff256"), ("WS-INFRA-DIAG-MIB", "wsInfraUsedKernBuff512"), ("WS-INFRA-DIAG-MIB", "wsInfraUsedKernBuff1024"), ("WS-INFRA-DIAG-MIB", "wsInfraUsedKernBuff2048"), ("WS-INFRA-DIAG-MIB", "wsInfraUsedKernBuff4096"), ("WS-INFRA-DIAG-MIB", "wsInfraUsedKernBuff8192"), ("WS-INFRA-DIAG-MIB", "wsInfraUsedKernBuff16384"), ("WS-INFRA-DIAG-MIB", "wsInfraUsedKernBuff32768"), ("WS-INFRA-DIAG-MIB", "wsInfraUsedKernBuff65536"), ("WS-INFRA-DIAG-MIB", "wsInfraUsedKernBuff131072"), ("WS-INFRA-DIAG-MIB", "wsInfraDiagControl"), ("WS-INFRA-DIAG-MIB", "wsInfraDiagPeriod"), ("WS-INFRA-DIAG-MIB", "wsInfraDiagFanNum"), ("WS-INFRA-DIAG-MIB", "wsInfraDiagTempSensorNum"), ("WS-INFRA-DIAG-MIB", "wsInfraDiagPlatform"), ("WS-INFRA-DIAG-MIB", "wsInfraDiagMonitoredFSFreeSpaceLimit"), ("WS-INFRA-DIAG-MIB", "wsInfraResCpuLoad1MinLimit"), ("WS-INFRA-DIAG-MIB", "wsInfraUsedKernBuff32Limit"), ("WS-INFRA-DIAG-MIB", "wsInfraUsedKernBuff64Limit"), ("WS-INFRA-DIAG-MIB", "wsInfraUsedKernBuff128Limit"), ("WS-INFRA-DIAG-MIB", "wsInfraUsedKernBuff256Limit"), ("WS-INFRA-DIAG-MIB", "wsInfraUsedKernBuff512Limit"), ("WS-INFRA-DIAG-MIB", "wsInfraUsedKernBuff1024Limit"), ("WS-INFRA-DIAG-MIB", "wsInfraUsedKernBuff2048Limit"), ("WS-INFRA-DIAG-MIB", "wsInfraUsedKernBuff4096Limit"), ("WS-INFRA-DIAG-MIB", "wsInfraUsedKernBuff8192Limit"), ("WS-INFRA-DIAG-MIB", "wsInfraUsedKernBuff16384Limit"), ("WS-INFRA-DIAG-MIB", "wsInfraUsedKernBuff32768Limit"), ("WS-INFRA-DIAG-MIB", "wsInfraUsedKernBuff65536Limit"), ("WS-INFRA-DIAG-MIB", "wsInfraUsedKernBuff131072Limit"), ("WS-INFRA-DIAG-MIB", "wsInfraDiagMonitoredFSSize"), ("WS-INFRA-DIAG-MIB", "wsInfraDiagMonitoredFSUsed"), ("WS-INFRA-DIAG-MIB", "wsInfraDiagMonitoredFSINodesFree"), ("WS-INFRA-DIAG-MIB", "wsInfraDiagMonitoredFSINodesLimit"), ("WS-INFRA-DIAG-MIB", "wsInfraDiagTempIndex"), ("WS-INFRA-DIAG-MIB", "wsInfraDiagTempSensorName"), ("WS-INFRA-DIAG-MIB", "wsInfraDiagTempCurrTemp"), ("WS-INFRA-DIAG-MIB", "wsInfraDiagTempMaxTemp"), ("WS-INFRA-DIAG-MIB", "wsInfraDiagTempOverTemp"), ("WS-INFRA-DIAG-MIB", "wsInfraDiagFanIndex"), ("WS-INFRA-DIAG-MIB", "wsInfraDiagFanName"), ("WS-INFRA-DIAG-MIB", "wsInfraDiagFanSpeed"), ("WS-INFRA-DIAG-MIB", "wsInfraDiagFanLowSpeedLimit"), ("WS-INFRA-DIAG-MIB", "wsInfraDiagProcIndex"), ("WS-INFRA-DIAG-MIB", "wsInfraDiagProcName"), ("WS-INFRA-DIAG-MIB", "wsInfraDiagProcPercentCPU"), ("WS-INFRA-DIAG-MIB", "wsInfraDiagProcPercentMem"), ("WS-INFRA-DIAG-MIB", "wsInfraDiagPktBuffAlloc"), ("WS-INFRA-DIAG-MIB", "wsInfraDiagPktBuffUsed"), ("WS-INFRA-DIAG-MIB", "wsInfraDiagPktBuffMax"), ("WS-INFRA-DIAG-MIB", "wsInfraDiagIpRouteCacheAlloc"), ("WS-INFRA-DIAG-MIB", "wsInfraDiagIpRouteCacheUsed"), ("WS-INFRA-DIAG-MIB", "wsInfraDiagIpRouteCacheMax"), ("WS-INFRA-DIAG-MIB", "wsInfraDiagFileDescInUse"), ("WS-INFRA-DIAG-MIB", "wsInfraDiagFileDescHWM"), ("WS-INFRA-DIAG-MIB", "wsInfraDiagFileDescLimit"), ("WS-INFRA-DIAG-MIB", "wsInfraDiagProcNum"), ("WS-INFRA-DIAG-MIB", "wsInfraDiagProcMemLimit"), ("WS-INFRA-DIAG-MIB", "wsInfraDiagRamStatsTotal"), ("WS-INFRA-DIAG-MIB", "wsInfraDiagRamStatsUsed"), ("WS-INFRA-DIAG-MIB", "wsInfraDiagRamStatsFree"), ("WS-INFRA-DIAG-MIB", "wsInfraDiagRamStatsPercentFree"), ("WS-INFRA-DIAG-MIB", "wsInfraDiagRamStatsPercentFreeLimit"), ("WS-INFRA-DIAG-MIB", "wsInfraResCpuLoad15MinLimit"), ("WS-INFRA-DIAG-MIB", "wsInfraResCpuLoad5MinLimit"), ("WS-INFRA-DIAG-MIB", "wsInfraDiagMonitoredFSFreeSpacePercent"), ("WS-INFRA-DIAG-MIB", "wsInfraDiagMonitoredFSFreeSpace"), ("WS-INFRA-DIAG-MIB", "wsInfraDiagMonitoredFSName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    wsInfraMIBDiagGroup = wsInfraMIBDiagGroup.setStatus('current')
if mibBuilder.loadTexts: wsInfraMIBDiagGroup.setDescription('diag MIB group')
wsInfraMIBDiagObsoleteGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 388, 14, 1, 6, 1, 100, 2, 2)).setObjects(("WS-INFRA-DIAG-MIB", "wsInfraDiagTempCurrentTemp"), ("WS-INFRA-DIAG-MIB", "wsInfraDiagTempHighTemp"), ("WS-INFRA-DIAG-MIB", "wsInfraDiagTempHighTempHysteresis"), ("WS-INFRA-DIAG-MIB", "wsInfraDiagSysFanSpeed"), ("WS-INFRA-DIAG-MIB", "wsDiagProcFanSpeed"), ("WS-INFRA-DIAG-MIB", "wsInfraFreeMemory"), ("WS-INFRA-DIAG-MIB", "wsInfraRootFSFree"), ("WS-INFRA-DIAG-MIB", "wsInfraRootFSInodesFree"), ("WS-INFRA-DIAG-MIB", "wsInfraRamFSFree"), ("WS-INFRA-DIAG-MIB", "wsInfraRamFSInodesFree"), ("WS-INFRA-DIAG-MIB", "wsInfraFreeFileDesc"), ("WS-INFRA-DIAG-MIB", "wsInfraHwTotalNum"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    wsInfraMIBDiagObsoleteGroup = wsInfraMIBDiagObsoleteGroup.setStatus('obsolete')
if mibBuilder.loadTexts: wsInfraMIBDiagObsoleteGroup.setDescription('Description.')
mibBuilder.exportSymbols("WS-INFRA-DIAG-MIB", wsInfraDiagMonitoredFSName=wsInfraDiagMonitoredFSName, wsInfraDiagProcMemLimit=wsInfraDiagProcMemLimit, wsInfraUsedKernBuff16384Limit=wsInfraUsedKernBuff16384Limit, wsInfraHwBuildInfoDesc=wsInfraHwBuildInfoDesc, wsInfraUsedKernBuff8192Limit=wsInfraUsedKernBuff8192Limit, wsInfraRamFSFree=wsInfraRamFSFree, wsInfraDiagProcPercentMem=wsInfraDiagProcPercentMem, wsInfraDiagFileDescHWM=wsInfraDiagFileDescHWM, wsInfraUsedKernBuff64=wsInfraUsedKernBuff64, wsInfraUsedKernBuff32Limit=wsInfraUsedKernBuff32Limit, wsInfraUsedKernBuff2048=wsInfraUsedKernBuff2048, wsInfraDiagMIBGroups=wsInfraDiagMIBGroups, wsInfraDiagFanControl=wsInfraDiagFanControl, wsInfraDiagFanSpeed=wsInfraDiagFanSpeed, wsInfraRootFSFree=wsInfraRootFSFree, wsInfraHwBuildInfoTable=wsInfraHwBuildInfoTable, wsInfraDiagProcName=wsInfraDiagProcName, wsInfraUsedKernBuff256Limit=wsInfraUsedKernBuff256Limit, wsInfraDiagPlatform=wsInfraDiagPlatform, wsInfraResCpuLoad5MinLimit=wsInfraResCpuLoad5MinLimit, wsInfraHwBuildInfoVersion=wsInfraHwBuildInfoVersion, wsInfraUsedKernBuff131072=wsInfraUsedKernBuff131072, wsInfraDiagPktBuffUsed=wsInfraDiagPktBuffUsed, wsInfraDiagTempMaxTemp=wsInfraDiagTempMaxTemp, wsInfraUsedKernBuff131072Limit=wsInfraUsedKernBuff131072Limit, wsInfraDiagFanEntry=wsInfraDiagFanEntry, wsInfraHwBuildInfoManufacturer=wsInfraHwBuildInfoManufacturer, wsInfraDiagPktBuffAlloc=wsInfraDiagPktBuffAlloc, wsInfraDiagMonitoredFSSize=wsInfraDiagMonitoredFSSize, wsInfraDiagMIBCompliance=wsInfraDiagMIBCompliance, wsInfraDiagRamStatsPercentFreeLimit=wsInfraDiagRamStatsPercentFreeLimit, wsInfraUsedKernBuff2048Limit=wsInfraUsedKernBuff2048Limit, wsDiagProcFanSpeed=wsDiagProcFanSpeed, wsInfraDiagTempControl=wsInfraDiagTempControl, wsInfraUsedKernBuff65536=wsInfraUsedKernBuff65536, wsInfraDiagProcPercentCPU=wsInfraDiagProcPercentCPU, wsInfraUsedKernBuff32768Limit=wsInfraUsedKernBuff32768Limit, wsInfraResCpuLoad5=wsInfraResCpuLoad5, wsInfraDiagFileDescInUse=wsInfraDiagFileDescInUse, wsInfraDiagTempSensorNum=wsInfraDiagTempSensorNum, wsInfraUsedKernBuff1024=wsInfraUsedKernBuff1024, wsInfraDiagSysFanSpeed=wsInfraDiagSysFanSpeed, wsInfraDiagIpRouteCacheStats=wsInfraDiagIpRouteCacheStats, wsInfraRootFSInodesFree=wsInfraRootFSInodesFree, wsInfraUsedKernBuff256=wsInfraUsedKernBuff256, wsInfraDiagFanNum=wsInfraDiagFanNum, wsInfraDiagProcNum=wsInfraDiagProcNum, wsInfraDiagTempHighTempHysteresis=wsInfraDiagTempHighTempHysteresis, wsInfraDiagTempEntry=wsInfraDiagTempEntry, wsInfraUsedKernBuff65536Limit=wsInfraUsedKernBuff65536Limit, wsInfraUsedKernBuff128Limit=wsInfraUsedKernBuff128Limit, wsInfraUsedKernBuff32768=wsInfraUsedKernBuff32768, wsInfraDiagTempHighTemp=wsInfraDiagTempHighTemp, wsInfraDiagFileDescLimit=wsInfraDiagFileDescLimit, wsInfraDiagPktBuffStats=wsInfraDiagPktBuffStats, wsInfraDiagRamStatsFree=wsInfraDiagRamStatsFree, wsInfraRamFSInodesFree=wsInfraRamFSInodesFree, wsInfraResCpuLoad1=wsInfraResCpuLoad1, wsInfraDiagMIBConformance=wsInfraDiagMIBConformance, wsInfraDiagMib=wsInfraDiagMib, wsInfraUsedKernBuff8192=wsInfraUsedKernBuff8192, wsInfraDiagMonitoredFSFreeSpaceLimit=wsInfraDiagMonitoredFSFreeSpaceLimit, wsInfraResStats=wsInfraResStats, wsInfraDiagTempCurrentTemp=wsInfraDiagTempCurrentTemp, wsInfraHwBuildInfoModuleIndex=wsInfraHwBuildInfoModuleIndex, wsInfraDiagTempIndex=wsInfraDiagTempIndex, wsInfraDiagMonitoredFSFreeSpacePercent=wsInfraDiagMonitoredFSFreeSpacePercent, wsInfraDiagTempCurrTemp=wsInfraDiagTempCurrTemp, wsInfraDiagIpRouteCacheUsed=wsInfraDiagIpRouteCacheUsed, wsInfraDiagMonitoredFSTableIndex=wsInfraDiagMonitoredFSTableIndex, wsInfraHwTotalNum=wsInfraHwTotalNum, wsInfraDiagMonitoredFSFreeSpace=wsInfraDiagMonitoredFSFreeSpace, wsInfraDiagProcEntry=wsInfraDiagProcEntry, wsInfraResCpuLoad1MinLimit=wsInfraResCpuLoad1MinLimit, wsInfraUsedKernBuff4096=wsInfraUsedKernBuff4096, wsInfraUsedKernBuff64Limit=wsInfraUsedKernBuff64Limit, wsInfraDiagMonitoredFSEntry=wsInfraDiagMonitoredFSEntry, wsInfraDiagFanTable=wsInfraDiagFanTable, wsInfraDiagRamStatsPercentFree=wsInfraDiagRamStatsPercentFree, wsInfraUsedKernBuff32=wsInfraUsedKernBuff32, wsInfraUsedKernBuff1024Limit=wsInfraUsedKernBuff1024Limit, PYSNMP_MODULE_ID=wsInfraDiagMib, wsInfraDiagFanName=wsInfraDiagFanName, wsInfraDiagFanLowSpeedLimit=wsInfraDiagFanLowSpeedLimit, wsInfraMIBDiagObsoleteGroup=wsInfraMIBDiagObsoleteGroup, wsInfraFreeFileDesc=wsInfraFreeFileDesc, wsInfraDiagMonitoredFSTable=wsInfraDiagMonitoredFSTable, wsInfraDiagTempTable=wsInfraDiagTempTable, wsInfraDiagProcIndex=wsInfraDiagProcIndex, wsInfraDiagPktBuffMax=wsInfraDiagPktBuffMax, wsInfraDiagIpRouteCacheAlloc=wsInfraDiagIpRouteCacheAlloc, wsInfraHwBuildInfoEntry=wsInfraHwBuildInfoEntry, wsInfraDiagMonitoredFSUsed=wsInfraDiagMonitoredFSUsed, wsInfraHwBuildInfo=wsInfraHwBuildInfo, wsInfraUsedKernBuff16384=wsInfraUsedKernBuff16384, wsInfraDiagTempSensorName=wsInfraDiagTempSensorName, wsInfraDiagPeriod=wsInfraDiagPeriod, wsInfraFreeMemory=wsInfraFreeMemory, wsInfraDiagMIBCompliances=wsInfraDiagMIBCompliances, wsInfraUsedKernBuff4096Limit=wsInfraUsedKernBuff4096Limit, wsInfraResCpuLoad15=wsInfraResCpuLoad15, wsInfraDiagIpRouteCacheMax=wsInfraDiagIpRouteCacheMax, wsInfraDiagControl=wsInfraDiagControl, wsInfraDiagRamStatsTotal=wsInfraDiagRamStatsTotal, wsInfraDiagMonitoredFSINodesFree=wsInfraDiagMonitoredFSINodesFree, wsInfraDiagProcTable=wsInfraDiagProcTable, wsInfraHwBuildInfoModuleName=wsInfraHwBuildInfoModuleName, wsInfraMIBDiagGroup=wsInfraMIBDiagGroup, wsInfraDiagFanIndex=wsInfraDiagFanIndex, wsInfraUsedKernBuff512=wsInfraUsedKernBuff512, wsInfraResCpuLoad15MinLimit=wsInfraResCpuLoad15MinLimit, wsInfraDiagMonitoredFSINodesLimit=wsInfraDiagMonitoredFSINodesLimit, wsInfraDiagRamStats=wsInfraDiagRamStats, wsInfraDiagTempOverTemp=wsInfraDiagTempOverTemp, wsInfraUsedKernBuff128=wsInfraUsedKernBuff128, wsInfraDiagRamStatsUsed=wsInfraDiagRamStatsUsed, wsInfraUsedKernBuff512Limit=wsInfraUsedKernBuff512Limit, wsInfraDiagFileDescStats=wsInfraDiagFileDescStats)
