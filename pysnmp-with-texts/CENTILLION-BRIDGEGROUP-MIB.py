#
# PySNMP MIB module CENTILLION-BRIDGEGROUP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CENTILLION-BRIDGEGROUP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:31:29 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion")
EnableIndicator, StatusIndicator, sysConfig = mibBuilder.importSymbols("CENTILLION-ROOT-MIB", "EnableIndicator", "StatusIndicator", "sysConfig")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ObjectIdentity, Counter32, Gauge32, iso, TimeTicks, Unsigned32, Counter64, Integer32, NotificationType, Bits, IpAddress, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Counter32", "Gauge32", "iso", "TimeTicks", "Unsigned32", "Counter64", "Integer32", "NotificationType", "Bits", "IpAddress", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class BridgeGroupId(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 32)

bridgeGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 24))
dot1dBaseGroupIdentifier = MibScalar((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 24, 1), BridgeGroupId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1dBaseGroupIdentifier.setStatus('mandatory')
if mibBuilder.loadTexts: dot1dBaseGroupIdentifier.setDescription('The spanning tree group identifier for which the standard bridging MIBS apply. Modifications of the spanning tree group through the standard bridging MIBs effect this spanning tree group only. This object is super governed by specific SET community string. For example if a network management station uses SET community string setcommunitystring@bg3, all related SET requests will effect spanning tree group 3 only.')
bridgeGroupTable = MibTable((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 24, 2), )
if mibBuilder.loadTexts: bridgeGroupTable.setStatus('mandatory')
if mibBuilder.loadTexts: bridgeGroupTable.setDescription('A specific spanning tree group. A spanning tree group consists of a number of bridging ports running the same spanning tree protocol.')
bridgeGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 24, 2, 1), ).setIndexNames((0, "CENTILLION-BRIDGEGROUP-MIB", "bridgeGroupIdentifier"))
if mibBuilder.loadTexts: bridgeGroupEntry.setStatus('mandatory')
if mibBuilder.loadTexts: bridgeGroupEntry.setDescription('An entry in the spanning tree group table. Spanning tree groups are added by specifying a bridgeGroupIdentifier, bridgeGroupBaseType, bridgeGroupStpProtocol and a bridgeGroupPortType with a value of valid(1) in bridgeGroupStatus. Entries may be deleted by specifying an entry with an value of invalid(2) in bridgeGroupStatus.')
bridgeGroupIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 24, 2, 1, 1), BridgeGroupId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeGroupIdentifier.setStatus('mandatory')
if mibBuilder.loadTexts: bridgeGroupIdentifier.setDescription('The unique spanning tree group identifier of this spanning tree group.')
bridgeGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 24, 2, 1, 2), StatusIndicator()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeGroupStatus.setStatus('mandatory')
if mibBuilder.loadTexts: bridgeGroupStatus.setDescription('The current status of the spanning tree group. Spanning tree groups may be added by specifiying a valid status, and removed by specifying an invalid status.')
bridgeGroupBaseType = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 24, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("unknown", 2), ("transparent-only", 3), ("sourceroute-only", 4), ("srt", 5), ("translation", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeGroupBaseType.setStatus('mandatory')
if mibBuilder.loadTexts: bridgeGroupBaseType.setDescription('Indicates the type of bridging this spanning tree group is performing.A value of none(1) implies that switching is performed between ports in this spanning tree group. A value of unknown(2) implies that some unknown bridging rules are applied on the ports in this spanning tree group. Modifying the bridgeGroupBaseType requires a complete reset of the spanning tree group. This value must be specified during spanning tree group creation.')
bridgeGroupStpProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 24, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("unknown", 2), ("decLb100", 3), ("ieee8021d", 4), ("ibm", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeGroupStpProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: bridgeGroupStpProtocol.setDescription('An indication of the version of the Spanning Tree Protocol is being run, if the value of bridgeGroupBaseType is not none(1). This field may be ignored if the bridgeGroupBaseType value is none(1).')
bridgeGroupPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 24, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("token-ring", 2), ("ethernet", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeGroupPortType.setStatus('mandatory')
if mibBuilder.loadTexts: bridgeGroupPortType.setDescription('Indicates the type of the spanning tree group ports. This value may only be altered if there are no spanning tree group ports currentlyin the spanning tree group. This value must be specified during spanning tree group creation.')
bridgeGroupNextPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 24, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeGroupNextPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: bridgeGroupNextPortIndex.setDescription('The value of the next spanning tree group port number which will be assigned by the switch. When adding spanning tree group ports bridging mode, the specified bridgeGroupPortIndex must match this value.')
bridgeGroupTbRifEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 24, 2, 1, 7), EnableIndicator()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeGroupTbRifEnable.setStatus('mandatory')
if mibBuilder.loadTexts: bridgeGroupTbRifEnable.setDescription("Enables the learning of Rif's by Token Ring Transparent Bridging spanning tree groups and processing of LE_ARP's for route descrptors.")
bridgeGroupTbRifRing = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 24, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeGroupTbRifRing.setStatus('mandatory')
if mibBuilder.loadTexts: bridgeGroupTbRifRing.setDescription("The value of the ring used for learning RIF's when bridgeGroupTbRifEnable is set.")
bridgeGroupPortTable = MibTable((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 24, 3), )
if mibBuilder.loadTexts: bridgeGroupPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: bridgeGroupPortTable.setDescription('A table that contains information about each port that is associated with this spanning tree group.')
bridgeGroupPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 24, 3, 1), ).setIndexNames((0, "CENTILLION-BRIDGEGROUP-MIB", "bridgeGroupPortGroupId"), (0, "CENTILLION-BRIDGEGROUP-MIB", "bridgeGroupPortIndex"))
if mibBuilder.loadTexts: bridgeGroupPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: bridgeGroupPortEntry.setDescription('A list of information for each port of the spanning tree group. These entries are created and deleted by switch.')
bridgeGroupPortGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 24, 3, 1, 1), BridgeGroupId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeGroupPortGroupId.setStatus('mandatory')
if mibBuilder.loadTexts: bridgeGroupPortGroupId.setDescription('The spanning tree group identifier to which this port belongs.')
bridgeGroupPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 24, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeGroupPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: bridgeGroupPortIndex.setDescription('The value of the instance of the dot1dBasePort object, defined in the Bridge MIB, for the spanning tree group port corresponding to this port.')
bridgeGroupPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 24, 3, 1, 3), StatusIndicator()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeGroupPortStatus.setStatus('mandatory')
if mibBuilder.loadTexts: bridgeGroupPortStatus.setDescription('The current status of the spanning tree group port entry. Spanning tree group ports is added or deleted when a virtual segment port is added to or deleted from a virtual segment.')
bridgeGroupPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 24, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeGroupPortIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: bridgeGroupPortIfIndex.setDescription('The value of the instance of the ifIndex object, defined in MIB-II, for the interface corresponding to this port. Spanning tree group ports are added by specifying the ifIndex instance for the spanning tree group port.')
bridgeGroupPortSpanMode = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 24, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto-span", 1), ("disabled", 2), ("forced", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeGroupPortSpanMode.setStatus('mandatory')
if mibBuilder.loadTexts: bridgeGroupPortSpanMode.setDescription("In SR mode, this object determines how this port behaves when presented with a Spanning Tree Explorer frame. The value 'disabled(2)' indicates that the port will not accept or send Spanning Tree Explorer packets; any STE packets received will be silently discarded. The value 'forced(3)' indicates the port will always accept and propagate Spanning Tree Explorer frames. This allows a manually configured Spanning Tree for this class of packet to be configured. Note that unlike transparent bridging, this is not catastrophic to the network if there are loops. The value 'auto-span(1)' can only be returned by a bridge that both implements the Spanning Tree Protocol and has use of the protocol enabled on this port. The behavior of the port for Spanning Tree Explorer frames is determined by the state of dot1dStpPortState. If the port is in the 'forwarding' state, the frame will be accepted or propagated. Otherwise, it will be silently discarded. In TB mode, this object provides the means to statically configure a port to forwarding/blocking modes. 'disabled(2)' indicates that the port is statically configured to blocking mode. 'forced(3)' indicates that the port is statically configured to forwarding mode. 'auto-span(1)' indicates that STP protocol is running.")
bridgeGroupPortFastStart = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 24, 3, 1, 6), EnableIndicator()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeGroupPortFastStart.setStatus('mandatory')
if mibBuilder.loadTexts: bridgeGroupPortFastStart.setDescription('When FastStart is enabled, a port uses the minimum of hello time and forward delay time for transition from listening to learning to forwarding state. Once the port is in forwarding state, it will behave as a normal spanning tree port.')
mibBuilder.exportSymbols("CENTILLION-BRIDGEGROUP-MIB", bridgeGroupPortGroupId=bridgeGroupPortGroupId, bridgeGroupTbRifRing=bridgeGroupTbRifRing, bridgeGroup=bridgeGroup, bridgeGroupTbRifEnable=bridgeGroupTbRifEnable, bridgeGroupStatus=bridgeGroupStatus, bridgeGroupIdentifier=bridgeGroupIdentifier, bridgeGroupPortIndex=bridgeGroupPortIndex, bridgeGroupStpProtocol=bridgeGroupStpProtocol, bridgeGroupTable=bridgeGroupTable, bridgeGroupNextPortIndex=bridgeGroupNextPortIndex, bridgeGroupEntry=bridgeGroupEntry, bridgeGroupPortFastStart=bridgeGroupPortFastStart, bridgeGroupPortEntry=bridgeGroupPortEntry, bridgeGroupPortTable=bridgeGroupPortTable, bridgeGroupPortSpanMode=bridgeGroupPortSpanMode, bridgeGroupPortIfIndex=bridgeGroupPortIfIndex, BridgeGroupId=BridgeGroupId, bridgeGroupPortStatus=bridgeGroupPortStatus, dot1dBaseGroupIdentifier=dot1dBaseGroupIdentifier, bridgeGroupPortType=bridgeGroupPortType, bridgeGroupBaseType=bridgeGroupBaseType)
