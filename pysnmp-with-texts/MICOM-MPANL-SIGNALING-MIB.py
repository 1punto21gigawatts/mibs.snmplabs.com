#
# PySNMP MIB module MICOM-MPANL-SIGNALING-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MICOM-MPANL-SIGNALING-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:12:23 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection")
micom_oscar, = mibBuilder.importSymbols("MICOM-OSCAR-MIB", "micom-oscar")
mcmSysAsciiTimeOfDay, = mibBuilder.importSymbols("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, Unsigned32, ObjectIdentity, Bits, Counter32, Integer32, TimeTicks, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, NotificationType, NotificationType, iso, Counter64, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Unsigned32", "ObjectIdentity", "Bits", "Counter32", "Integer32", "TimeTicks", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "NotificationType", "NotificationType", "iso", "Counter64", "MibIdentifier")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
micom_msm = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 19)).setLabel("micom-msm")
configuration = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 19, 1))
control = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 19, 2))
statistics = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 19, 3))
status = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 19, 4))
mcmMSMProfileCfgGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 19, 1, 1))
mcmMSMProfileCfgGroupNodeID = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 19, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMSMProfileCfgGroupNodeID.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMSMProfileCfgGroupNodeID.setDescription('NAME = ; DESC = The value of this object represents a unique \\ identifier for an access device. (Operational); HELP = ; CAPABILITIES = NET_DISP, VPN_DISP;')
mcmMSMProfileCfgGroupCustomerID = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 19, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMSMProfileCfgGroupCustomerID.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMSMProfileCfgGroupCustomerID.setDescription('NAME = ; DESC = The value of this object uniquely identifies \\ a customer to which a given access device belongs. \\ (Operational); HELP = ; CAPABILITIES = NET_DISP, VPN_DISP;')
mcmMSMProfileCfgGroupDNAPrefix = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 19, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMSMProfileCfgGroupDNAPrefix.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMSMProfileCfgGroupDNAPrefix.setDescription('NAME = ; DESC = The value of this object specifies the prefix of the \\ Directory Network Address which uniquely identifies \\ the unit within the network topology. (Operational); HELP = ; CAPABILITIES = NET_DISP, VPN_DISP;')
nvmMSMProfileCfgGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 19, 1, 2))
nvmMSMProfileCfgGroupNodeID = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 19, 1, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmMSMProfileCfgGroupNodeID.setStatus('mandatory')
if mibBuilder.loadTexts: nvmMSMProfileCfgGroupNodeID.setDescription('NAME = ; DESC = The value of this object represents a unique \\ identifier for an access device. (Configuration); HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
nvmMSMProfileCfgGroupCustomerID = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 19, 1, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmMSMProfileCfgGroupCustomerID.setStatus('mandatory')
if mibBuilder.loadTexts: nvmMSMProfileCfgGroupCustomerID.setDescription('NAME = ; DESC = The value of this object uniquely identifies \\ a customer to which a given access device belongs. \\ Also, this is used by the NAC in registering the \\ Egress table. (Configuration); HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
nvmMSMProfileCfgGroupDNAPrefix = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 19, 1, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmMSMProfileCfgGroupDNAPrefix.setStatus('mandatory')
if mibBuilder.loadTexts: nvmMSMProfileCfgGroupDNAPrefix.setDescription('NAME = ; DESC = The value of this object specifies the prefix of the \\ Directory Network Address which uniquely identifies \\ the unit within the network topology. (Configuration); HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
mcmMSMDTELinkCfgTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 19, 1, 3), )
if mibBuilder.loadTexts: mcmMSMDTELinkCfgTable.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMSMDTELinkCfgTable.setDescription('NAME = ; DESC = The MPANL DTE Signaling Line Parameters \\ table. (Operational); HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
mcmMSMDTELinkCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 19, 1, 3, 1), ).setIndexNames((0, "MICOM-MPANL-SIGNALING-MIB", "mcmMSMDTELinkCfgIfIndex"))
if mibBuilder.loadTexts: mcmMSMDTELinkCfgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMSMDTELinkCfgEntry.setDescription('NAME = ; DESC = An entry in the MPANL DTE Signaling Line Parameters \\ table. (Operational); HELP = ; CAPABILITIES = ;')
mcmMSMDTELinkCfgIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 19, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMSMDTELinkCfgIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMSMDTELinkCfgIfIndex.setDescription('NAME = ; DESC = Ifindex associated with the MPANL DTE line \\ parameters.; HELP = ; CAPABILITIES = ;')
mcmMSMDTELinkCfgMaxSubChannelRange = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 19, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(17, 255)).clone(63)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMSMDTELinkCfgMaxSubChannelRange.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMSMDTELinkCfgMaxSubChannelRange.setDescription('NAME = ; DESC = The value of this object represents the highest \\ DLCI value to be used for sub-channel (CID) allocation. \\ (Note that the current default value, 63, may change \\ depending on the VoFR agreements.) Note that user \\ DLCIs on the MPANL start at DLCI-17. This \\ information is signaled from the DTE to the DCE. \\ (Operational); HELP = ; CAPABILITIES = ;')
mcmMSMDTELinkCfgDTEReceiverBW = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 19, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16000, 2048000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMSMDTELinkCfgDTEReceiverBW.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMSMDTELinkCfgDTEReceiverBW.setDescription('NAME = ; DESC = The value of this object represents the maximum \\ throughput (in bits/sec) that the MPANL DCE is \\ capable of transmitting(not less than 16Kbs \\ and not exceeding the Access Link bandwidth). \\ Several SVCs inside the netlink may use this \\ bandwidth. Each SVC will consume a part of \\ this bandwidth.\\ (Operational); HELP = ; CAPABILITIES = ;')
mcmMSMDTELinkCfgDCEReceiverBW = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 19, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16000, 2048000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMSMDTELinkCfgDCEReceiverBW.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMSMDTELinkCfgDCEReceiverBW.setDescription('NAME = ; DESC = The value of this object represents the maximum \\ throughput (in bits/sec) that the MPANL DTE is \\ capable of transmitting(not less than 16Kbs \\ and not exceeding the Access Link bandwidth). \\ Several SVCs inside the netlink may use this \\ bandwidth. Each SVC will consume a part of this \\ bandwidth.\\ (Operational); HELP = ; CAPABILITIES = ;')
mcmMSMDTELinkCfgDTEMaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 19, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 4100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMSMDTELinkCfgDTEMaxFrameSize.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMSMDTELinkCfgDTEMaxFrameSize.setDescription('NAME = ; DESC = The value of this object represents the maximum \\ frame size (in bytes) that the MPANL DCE is capable \\ of transmitting. This value is signaled from the \\ DTE to the DCE where it is used by the VoFR procedure \\ in the wan driver to manage frame delay by fragmenting \\ VoFR frames. Multiple VoFR frames can constitute a frame \\ relay frame.\\ (Operational); HELP = ; CAPABILITIES = ;')
mcmMSMDTELinkCfgDCEMaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 19, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 4100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMSMDTELinkCfgDCEMaxFrameSize.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMSMDTELinkCfgDCEMaxFrameSize.setDescription('NAME = ; DESC = The value of this object represents the maximum \\ frame size (in bytes) that the MPANL DTE is capable \\ of transmitting. This value is signaled from the \\ DTE to the DCE where it is used by the VoFR procedure \\ in the wan driver to manage frame delay by fragmenting \\ VoFR frames. Multiple VoFR frames can constitute a frame \\ relay frame.\\ (Operational); HELP = ; CAPABILITIES = ;')
nvmMSMDTELinkCfgTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 19, 1, 4), )
if mibBuilder.loadTexts: nvmMSMDTELinkCfgTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvmMSMDTELinkCfgTable.setDescription('NAME = ; DESC = The MPANL DTE Signaling Line Parameters \\ table. (Configuration); HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
nvmMSMDTELinkCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 19, 1, 4, 1), ).setIndexNames((0, "MICOM-MPANL-SIGNALING-MIB", "nvmMSMDTELinkCfgIfIndex"))
if mibBuilder.loadTexts: nvmMSMDTELinkCfgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvmMSMDTELinkCfgEntry.setDescription('NAME = ; DESC = An entry in the MPANL DTE Signaling Line Parameters \\ table. (Configuration); HELP = ; CAPABILITIES = ;')
nvmMSMDTELinkCfgIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 19, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmMSMDTELinkCfgIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvmMSMDTELinkCfgIfIndex.setDescription('NAME = ; DESC = Ifindex associated with the MPANL DTE line \\ parameters.; HELP = ; CAPABILITIES = ;')
nvmMSMDTELinkCfgMaxSubChannelRange = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 19, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(17, 255)).clone(63)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmMSMDTELinkCfgMaxSubChannelRange.setStatus('mandatory')
if mibBuilder.loadTexts: nvmMSMDTELinkCfgMaxSubChannelRange.setDescription('NAME = ; DESC = The value of this object represents the highest \\ DLCI value to be used for sub-channel allocation. \\ (Note that the current default value, 63, may change \\ depending on the VoFR agreements.) Note that user \\ DLCIs on the MPANL start at DLCI-17. This \\ information is signaled from the DTE to the DCE. \\ (Configuration); HELP = ; CAPABILITIES = ;')
nvmMSMDTELinkCfgDTEReceiverBW = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 19, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16000, 2048000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmMSMDTELinkCfgDTEReceiverBW.setStatus('mandatory')
if mibBuilder.loadTexts: nvmMSMDTELinkCfgDTEReceiverBW.setDescription('NAME = ; DESC = The value of this object represents the maximum \\ throughput (in bits/sec) that the MPANL DCE is \\ capable of transmitting(not less than 16Kbs \\ and not exceeding the Access Link bandwidth). \\ Several SVCs inside the netlink may use this \\ bandwidth. Each SVC will consume a part of \\ this bandwidth.\\ (Configuration); HELP = ; CAPABILITIES = ;')
nvmMSMDTELinkCfgDCEReceiverBW = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 19, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16000, 2048000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmMSMDTELinkCfgDCEReceiverBW.setStatus('mandatory')
if mibBuilder.loadTexts: nvmMSMDTELinkCfgDCEReceiverBW.setDescription('NAME = ; DESC = The value of this object represents the maximum \\ throughput (in bits/sec) that the MPANL DTE is \\ capable of transmitting(not less than 16Kbs \\ and not exceeding the Access Link bandwidth). \\ Several SVCs inside the netlink may use this \\ bandwidth. Each SVC will consume a part of this \\ bandwidth.\\ (Configuration); HELP = ; CAPABILITIES = ;')
nvmMSMDTELinkCfgDTEMaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 19, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 4100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmMSMDTELinkCfgDTEMaxFrameSize.setStatus('mandatory')
if mibBuilder.loadTexts: nvmMSMDTELinkCfgDTEMaxFrameSize.setDescription('NAME = ; DESC = The value of this object represents the maximum \\ frame size (in bytes) that the MPANL DCE is capable \\ of transmitting. This value is signaled from the \\ DTE to the DCE where it is used by the VoFR procedure \\ in the wan driver to manage frame delay by fragmenting \\ VoFR frames. Multiple VoFR frames can constitute a frame \\ relay frame.\\ (Configuration); HELP = ; CAPABILITIES = ;')
nvmMSMDTELinkCfgDCEMaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 19, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 4100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmMSMDTELinkCfgDCEMaxFrameSize.setStatus('mandatory')
if mibBuilder.loadTexts: nvmMSMDTELinkCfgDCEMaxFrameSize.setDescription('NAME = ; DESC = The value of this object represents the maximum \\ frame size (in bytes) that the MPANL DTE is capable \\ of transmitting. This value is signaled from the \\ DTE to the DCE where it is used by the VoFR procedure \\ in the wan driver to manage frame delay by fragmenting \\ VoFR frames. Multiple VoFR frames can constitute a frame \\ relay frame.\\ (Configuration); CAPABILITIES = ;')
nvmMSMDTELinkCfgEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 19, 1, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("modify", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: nvmMSMDTELinkCfgEntryStatus.setStatus('obsolete')
if mibBuilder.loadTexts: nvmMSMDTELinkCfgEntryStatus.setDescription('NAME = ; DESC = This object was obsoleted as of release \\ 3.0; and is included here only to support \\ backwards compatibility for software \\ versions prior to release 3.0. \\ This object is used in the MSM profile table \\ to add new rows, modify existing rows, \\ and delete existing rows. (Configuration); HELP = ; CAPABILITIES = ;')
mcmMSMStatsLAPFConnTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 19, 3, 1), )
if mibBuilder.loadTexts: mcmMSMStatsLAPFConnTable.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMSMStatsLAPFConnTable.setDescription('NAME = ; DESC = The MPANL Signaling Statistics for LAP-F connections \\ table.; \\ HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
mcmMSMStatsLAPFConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 19, 3, 1, 1), ).setIndexNames((0, "MICOM-MPANL-SIGNALING-MIB", "mcmMSMStatsLAPFConnIfIndex"))
if mibBuilder.loadTexts: mcmMSMStatsLAPFConnEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMSMStatsLAPFConnEntry.setDescription('NAME = ; DESC = An entry in the MPANL Signaling Statistics for LAP-F \\ connections table.; \\ HELP = ; CAPABILITIES = ;')
mcmMSMStatsLAPFConnIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 19, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMSMStatsLAPFConnIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMSMStatsLAPFConnIfIndex.setDescription('NAME = ; DESC = The value of this object corresponds to a value \\ of IfIndex, and is used as the index into the \\ MSM Statistics for LAP-F connections table.; HELP = ; CAPABILITIES = ;')
mcmMSMStatsLAPFConnReestablished = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 19, 3, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMSMStatsLAPFConnReestablished.setStatus('obsolete')
if mibBuilder.loadTexts: mcmMSMStatsLAPFConnReestablished.setDescription('NAME = ; DESC = This object was obsoleted as of release \\ 3.0; and is included here only to support \\ backwards compatibility for software \\ versions prior to release 3.0. \\ Counter representing the number of times the LAP-F \\ connection was attempted to be re-established. This counter \\ indicates the number of CONNECT_REQ messages \\ sent to the LAP-F module.; HELP = ; CAPABILITIES = ;')
mcmMSMStatsLAPFConnEstablished = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 19, 3, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMSMStatsLAPFConnEstablished.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMSMStatsLAPFConnEstablished.setDescription('NAME = ; DESC = Counter representing the number of times the LAP-F \\ connection was established. This counter indicates \\ the number of CONNECT_IND messages sent by \\ the LAP-F module.; HELP = ; CAPABILITIES = ;')
mcmMSMStatsLAPFConnDisconnects = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 19, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMSMStatsLAPFConnDisconnects.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMSMStatsLAPFConnDisconnects.setDescription('NAME = ; DESC = Counter representing the number of times a LAP-F \\ connection was broken. This counter indicates \\ the number of DISCONNECT_IND messages sent by \\ the LAP-F module.; HELP = ; CAPABILITIES = ;')
mcmMSMStatsProfileTxCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 19, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMSMStatsProfileTxCnt.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMSMStatsProfileTxCnt.setDescription('NAME = ; DESC = Counter represents the number of profiles \\ sent without the occurrence of a restart request.; HELP = ; CAPABILITIES = ;')
mcmMSMStatsProfileRxCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 19, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMSMStatsProfileRxCnt.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMSMStatsProfileRxCnt.setDescription('NAME = ; DESC = Counter represents the number of profiles \\ received without the occurrence of a restart request.; HELP = ; CAPABILITIES = ;')
mcmMSMStatsRestartReqTxCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 19, 3, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMSMStatsRestartReqTxCnt.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMSMStatsRestartReqTxCnt.setDescription('NAME = ; DESC = Counter representing the number \\ of restart requests sent.; HELP = ; CAPABILITIES = ;')
mcmMSMStatsRestartReqRxCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 19, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMSMStatsRestartReqRxCnt.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMSMStatsRestartReqRxCnt.setDescription('NAME = ; DESC = Counter representing the number \\ of restart requests received.; HELP = ; CAPABILITIES = ;')
mcmMSMStatsDnaAssociationCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 19, 3, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMSMStatsDnaAssociationCnt.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMSMStatsDnaAssociationCnt.setDescription('NAME = ; DESC = Counter representing the number \\ of DNA prefix associations.; HELP = ; CAPABILITIES = ;')
mcmMSMStatsDnaDeassociationCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 19, 3, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMSMStatsDnaDeassociationCnt.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMSMStatsDnaDeassociationCnt.setDescription('NAME = ; DESC = Counter representing the number \\ of DNA prefix de-associations.; HELP = ; CAPABILITIES = ;')
mcmMSMStatsPANLInfoElementsTxCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 19, 3, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMSMStatsPANLInfoElementsTxCnt.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMSMStatsPANLInfoElementsTxCnt.setDescription('NAME = ; DESC = Counter representing the number \\ of PANL information elements sent.; HELP = ; CAPABILITIES = ;')
mcmMSMStatsPANLInfoElementsRxCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 19, 3, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMSMStatsPANLInfoElementsRxCnt.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMSMStatsPANLInfoElementsRxCnt.setDescription('NAME = ; DESC = Counter representing the number \\ of PANL information elements received.; HELP = ; CAPABILITIES = ;')
mcmMSMDTELinkStatsTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 19, 3, 2), )
if mibBuilder.loadTexts: mcmMSMDTELinkStatsTable.setStatus('deprecated')
if mibBuilder.loadTexts: mcmMSMDTELinkStatsTable.setDescription('NAME = ; DESC = This table was deprecated as of release \\ 3.0; and is included here only to support \\ backwards compatibility for software \\ versions prior to release 3.0. \\ The MPANL DTE Signaling Line Parameters \\ table. (Operational); HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
mcmMSMDTELinkStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 19, 3, 2, 1), ).setIndexNames((0, "MICOM-MPANL-SIGNALING-MIB", "mcmMSMDTELinkStatsIfIndex"))
if mibBuilder.loadTexts: mcmMSMDTELinkStatsEntry.setStatus('deprecated')
if mibBuilder.loadTexts: mcmMSMDTELinkStatsEntry.setDescription('NAME = ; DESC = An entry in the MPANL DTE Signaling Line Parameters \\ table. (Operational); HELP = ; CAPABILITIES = ;')
mcmMSMDTELinkStatsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 19, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMSMDTELinkStatsIfIndex.setStatus('deprecated')
if mibBuilder.loadTexts: mcmMSMDTELinkStatsIfIndex.setDescription('NAME = ; DESC = Ifindex associated with the MPANL DTE line \\ parameter statistics and status.; HELP = ; CAPABILITIES = ;')
mcmMSMDTELinkStatsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 19, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMSMDTELinkStatsStatus.setStatus('deprecated')
if mibBuilder.loadTexts: mcmMSMDTELinkStatsStatus.setDescription('NAME = ; DESC = MPANL Signaling protocol status of the DTE Line.; HELP = ; CAPABILITIES = ;')
mcmMSMDTELinkStatsLocalCompName = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 19, 3, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 33))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMSMDTELinkStatsLocalCompName.setStatus('deprecated')
if mibBuilder.loadTexts: mcmMSMDTELinkStatsLocalCompName.setDescription('NAME = ; DESC = Local sites Component name; HELP = ; CAPABILITIES = ;')
mcmMSMDTELinkStatsRemoteCompName = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 19, 3, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 33))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMSMDTELinkStatsRemoteCompName.setStatus('deprecated')
if mibBuilder.loadTexts: mcmMSMDTELinkStatsRemoteCompName.setDescription('NAME = ; DESC = Remote sites Component name; HELP = ; CAPABILITIES = ;')
mcmMSMLinkStatusTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 19, 4, 1), )
if mibBuilder.loadTexts: mcmMSMLinkStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMSMLinkStatusTable.setDescription('NAME = ; DESC = The PANL Link Status Parameters \\ table.; HELP = ; CAPABILITIES = NET_DISP, VPN_DISP;')
mcmMSMLinkStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 19, 4, 1, 1), ).setIndexNames((0, "MICOM-MPANL-SIGNALING-MIB", "mcmMSMLinkStatusIfIndex"))
if mibBuilder.loadTexts: mcmMSMLinkStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMSMLinkStatusEntry.setDescription('NAME = ; DESC = An entry in the PANL Link Status Parameters \\ table.; HELP = ; CAPABILITIES = ;')
mcmMSMLinkStatusIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 19, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMSMLinkStatusIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMSMLinkStatusIfIndex.setDescription('NAME = ; DESC = Ifindex associated with the PANL link \\ parameter status table.; HELP = ; CAPABILITIES = ;')
mcmMSMLinkStatusInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 19, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dte", 1), ("dce", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMSMLinkStatusInterfaceType.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMSMLinkStatusInterfaceType.setDescription('NAME = ; DESC = Indicates the link status interface type.; HELP = ; CAPABILITIES = ;')
mcmMSMLinkStatusLAPFStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 19, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMSMLinkStatusLAPFStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMSMLinkStatusLAPFStatus.setDescription('NAME = ; DESC = The status of the LAPF link connection \\ for the PANL signaling protocol.; HELP = ; CAPABILITIES = ;')
mcmMSMLinkStatusLocalCompName = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 19, 4, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 33))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMSMLinkStatusLocalCompName.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMSMLinkStatusLocalCompName.setDescription("NAME = ; DESC = Local site's Component name. \\ This is a function of the MIB II \\ sysName and a unique PANL ifindex; HELP = ; CAPABILITIES = ;")
mcmMSMLinkStatusRemoteCompName = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 19, 4, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 33))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMSMLinkStatusRemoteCompName.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMSMLinkStatusRemoteCompName.setDescription("NAME = ; DESC = Remote site's Component name; HELP = ; CAPABILITIES = ;")
mcmMSMLinkStatusRemoteGenCfgType = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 19, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("micomAccessDevice", 1), ("nortelAccessDevice", 2), ("passportSwitch", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMSMLinkStatusRemoteGenCfgType.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMSMLinkStatusRemoteGenCfgType.setDescription('NAME = ; DESC = Indicates the device type of the remote unit. \\ (i.e. The type of the unit directly connected \\ to this particular netlink DTE/DCE interface.; HELP = ; CAPABILITIES = ;')
mcmMSMLinkStatusPANLStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 19, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("down", 1), ("up", 2), ("restart", 3), ("incompatible", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMSMLinkStatusPANLStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMSMLinkStatusPANLStatus.setDescription('NAME = ; DESC = Indicates the current PANL status.; HELP = ; CAPABILITIES = ;')
mcmMSMDCELinkStatusTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 19, 4, 2), )
if mibBuilder.loadTexts: mcmMSMDCELinkStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMSMDCELinkStatusTable.setDescription('NAME = ; DESC = The PANL DCE Link Status Parameters \\ table.; HELP = ; CAPABILITIES = NET_DISP, VPN_DISP;')
mcmMSMDCELinkStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 19, 4, 2, 1), ).setIndexNames((0, "MICOM-MPANL-SIGNALING-MIB", "mcmMSMDCELinkStatusIfIndex"))
if mibBuilder.loadTexts: mcmMSMDCELinkStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMSMDCELinkStatusEntry.setDescription('NAME = ; DESC = An entry in the PANL DCE Link Status Parameters \\ table.; HELP = ; CAPABILITIES = ;')
mcmMSMDCELinkStatusIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 19, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMSMDCELinkStatusIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMSMDCELinkStatusIfIndex.setDescription('NAME = ; DESC = Ifindex associated with the PANL DCE link \\ parameter status.; HELP = ; CAPABILITIES = ;')
mcmMSMDCELinkStatusRemoteNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 19, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMSMDCELinkStatusRemoteNodeId.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMSMDCELinkStatusRemoteNodeId.setDescription('NAME = ; DESC = DCE Remote Node Id.; HELP = ; CAPABILITIES = ;')
mcmMSMDCELinkStatusRemoteCustId = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 19, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMSMDCELinkStatusRemoteCustId.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMSMDCELinkStatusRemoteCustId.setDescription('NAME = ; DESC = DCE Remote Customer Id.; HELP = ; CAPABILITIES = ;')
mcmMSMDCELinkStatusRemoteRxBw = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 19, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1600, 2048000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMSMDCELinkStatusRemoteRxBw.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMSMDCELinkStatusRemoteRxBw.setDescription('NAME = ; DESC = DCE Remote Receiving Bandwidth.; HELP = ; CAPABILITIES = ;')
mcmMSMDCELinkStatusRemoteMaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 19, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 4100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMSMDCELinkStatusRemoteMaxFrameSize.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMSMDCELinkStatusRemoteMaxFrameSize.setDescription('NAME = ; DESC = DCE Remote Maximum Frame Size.; HELP = ; CAPABILITIES = ;')
mcmMSMDCELinkStatusRemoteDLCIRange = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 19, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(17, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMSMDCELinkStatusRemoteDLCIRange.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMSMDCELinkStatusRemoteDLCIRange.setDescription('NAME = ; DESC = The highest DLCI value to be used for the \\ remote side.; HELP = ; CAPABILITIES = ;')
mcmMSMDNAStatusTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 19, 4, 3), )
if mibBuilder.loadTexts: mcmMSMDNAStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMSMDNAStatusTable.setDescription('NAME = ; DESC = The Associated DNA Status Parameters \\ table.; HELP = ; CAPABILITIES = NET_DISP, VPN_DISP;')
mcmMSMDNAStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 19, 4, 3, 1), ).setIndexNames((0, "MICOM-MPANL-SIGNALING-MIB", "mcmMSMDNAStatusPrefixNumber"))
if mibBuilder.loadTexts: mcmMSMDNAStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMSMDNAStatusEntry.setDescription('NAME = ; DESC = An entry in the associated DNA status \\ table.; HELP = ; CAPABILITIES = ;')
mcmMSMDNAStatusPrefixNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 19, 4, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMSMDNAStatusPrefixNumber.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMSMDNAStatusPrefixNumber.setDescription('NAME = ; DESC = DNA Prefix number of the attached device \\ (directly or cascaded).; HELP = ; CAPABILITIES = ;')
mcmMSMDNAStatusIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 19, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMSMDNAStatusIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMSMDNAStatusIfIndex.setDescription('NAME = ; DESC = Ifindex value showing the appropriate DCE \\ PANL interface corresponding to the specified \\ DNA prefix.; HELP = ; CAPABILITIES = ;')
mcmMSMDNAStatusAssociation = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 19, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("associatedDNA", 1), ("deassociatedDNA", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMSMDNAStatusAssociation.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMSMDNAStatusAssociation.setDescription('NAME = ; DESC = DNA Association Status corresponding to \\ the specified DNA Prefix.; HELP = ; CAPABILITIES = ;')
mcmMSMLAPFConnectionsCntrTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 19, 2, 1), )
if mibBuilder.loadTexts: mcmMSMLAPFConnectionsCntrTable.setStatus('obsolete')
if mibBuilder.loadTexts: mcmMSMLAPFConnectionsCntrTable.setDescription('NAME = ; DESC = This table was obsoleted as of release \\ 3.0; and is included here only to support \\ backwards compatibility for software \\ versions prior to release 3.0. \\ The MSM LAP-F connections counter reset table.; HELP = ; CAPABILITIES = NET_OPER, VPN_OPER;')
mcmMSMLAPFConnectionsCntrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 19, 2, 1, 1), ).setIndexNames((0, "MICOM-MPANL-SIGNALING-MIB", "mcmMSMLAPFConnectionsCntrIndex"))
if mibBuilder.loadTexts: mcmMSMLAPFConnectionsCntrEntry.setStatus('obsolete')
if mibBuilder.loadTexts: mcmMSMLAPFConnectionsCntrEntry.setDescription('NAME = ; DESC = An entry in the MSM LAP-F connections counter \\ reset table.; HELP = ; CAPABILITIES = ;')
mcmMSMLAPFConnectionsCntrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 19, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMSMLAPFConnectionsCntrIndex.setStatus('obsolete')
if mibBuilder.loadTexts: mcmMSMLAPFConnectionsCntrIndex.setDescription('NAME = ; DESC = The value of this object corresponds to a value \\ of IfIndex, and is used as the index into the \\ MSM LAP-F connections counter reset table. \\ This index specifies the particular row of counter \\ objects to be reset, and has the identical value as \\ mcmMSMStatsLAPFConnIfIndex.; HELP = ; CAPABILITIES = ;')
mcmMSMLAPFConnectionsCntrAction = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 19, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mcmMSMLAPFConnectionsCntrAction.setStatus('obsolete')
if mibBuilder.loadTexts: mcmMSMLAPFConnectionsCntrAction.setDescription('NAME = ; DESC = Setting this object to reset(1) will zero \\ the values of a specific row of counters in \\ the MPANL Signaling Statistics for LAP-F \\ connections table.; HELP = When set to reset(1), a row containing \\ the following counter objects are reset: \\ mcmMSMStatsLAPFConnReestablished \\ mcmMSMStatsLAPFConnEstablished \\ mcmMSMStatsLAPFConnDisconnects; CAPABILITIES = ;')
mcmMSMProfileReceivedFromPassport = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 19) + (0,1)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"), ("MICOM-MPANL-SIGNALING-MIB", "mcmMSMLinkStatusIfIndex"), ("MICOM-MPANL-SIGNALING-MIB", "mcmMSMDTELinkStatsRemoteCompName"))
if mibBuilder.loadTexts: mcmMSMProfileReceivedFromPassport.setDescription('NAME = ; DESC = PANL Signaling Protocol established. \\ Severity Level: INFORMATIVE.; HELP = Profile is received from Passport. This is a Normal\\ condition.;')
mcmMpanlInterfaceLinkUp = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 19) + (0,2)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"), ("MICOM-MPANL-SIGNALING-MIB", "mcmMSMLinkStatusIfIndex"))
if mibBuilder.loadTexts: mcmMpanlInterfaceLinkUp.setDescription('NAME = ; DESC = This trap will be generated when the LAPF link \\ connection for the PANL signaling comes up. \\ Severity Level: INFORMATIVE.; HELP = The MSM LAPF link connection Is up. Normal MSM LAPF \\ Link establishment.;')
mcmMpanlInterfaceLinkDown = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 19) + (0,3)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"), ("MICOM-MPANL-SIGNALING-MIB", "mcmMSMLinkStatusIfIndex"))
if mibBuilder.loadTexts: mcmMpanlInterfaceLinkDown.setDescription("NAME = ; DESC = This trap will be generated when the LAPF link \\ connection for the PANL signaling goes down. \\ Severity Level: CRITICAL.; HELP = Please check device configuration, and connection.\\ If problem persist, You may need field \\ personnel's assistance.;")
mcmMpanlPrefixDNAhasNotBeenConfigured = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 19) + (0,4)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"))
if mibBuilder.loadTexts: mcmMpanlPrefixDNAhasNotBeenConfigured.setDescription('NAME = ; DESC = This trap will be generated from the MPANL \\ signaling module. It will trigger if the \\ DNA has not been configured. \\ Severity Level: CRITICAL.; HELP = Please provision(configure) the DNA address \\ of the access device. This may imply the DNA address \\ is missing.;')
mcmMpanlPrefixDNAChangedWithoutDeassociation = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 19) + (0,5)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"), ("MICOM-MPANL-SIGNALING-MIB", "mcmMSMDNAStatusPrefixNumber"), ("MICOM-MPANL-SIGNALING-MIB", "mcmMSMDNAStatusIfIndex"))
if mibBuilder.loadTexts: mcmMpanlPrefixDNAChangedWithoutDeassociation.setDescription('NAME = ; DESC = This trap will be generated from the PANL \\ signaling module. It will trigger if the \\ latest association will displace the earlier \\ assoiciation with a different netlink. \\ Severity Level: INFORMATIVE.; HELP = Please verify the DNA association number.;')
mcmMpanlIncompatibleType = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 19) + (0,6)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"), ("MICOM-MPANL-SIGNALING-MIB", "mcmMSMLinkStatusIfIndex"), ("MICOM-MPANL-SIGNALING-MIB", "mcmMSMLinkStatusRemoteGenCfgType"))
if mibBuilder.loadTexts: mcmMpanlIncompatibleType.setDescription('NAME = ; DESC = This trap will be generated from the PANL \\ signaling module. It will trigger if a micom \\ access device tries to attempt to communicate \\ with a nortel access device, which is prohibited. \\ Severity Level: CRITICAL.; HELP = It is noted that micom access device does not \\ communicate with the nortel access device.;')
mibBuilder.exportSymbols("MICOM-MPANL-SIGNALING-MIB", mcmMSMProfileCfgGroup=mcmMSMProfileCfgGroup, statistics=statistics, mcmMSMDCELinkStatusRemoteCustId=mcmMSMDCELinkStatusRemoteCustId, mcmMSMStatsDnaDeassociationCnt=mcmMSMStatsDnaDeassociationCnt, mcmMSMDTELinkCfgDTEMaxFrameSize=mcmMSMDTELinkCfgDTEMaxFrameSize, mcmMSMLinkStatusLocalCompName=mcmMSMLinkStatusLocalCompName, mcmMSMDCELinkStatusTable=mcmMSMDCELinkStatusTable, mcmMSMDTELinkCfgDCEReceiverBW=mcmMSMDTELinkCfgDCEReceiverBW, mcmMpanlIncompatibleType=mcmMpanlIncompatibleType, mcmMSMDTELinkCfgEntry=mcmMSMDTELinkCfgEntry, mcmMSMProfileCfgGroupCustomerID=mcmMSMProfileCfgGroupCustomerID, mcmMSMStatsPANLInfoElementsRxCnt=mcmMSMStatsPANLInfoElementsRxCnt, mcmMpanlInterfaceLinkUp=mcmMpanlInterfaceLinkUp, nvmMSMDTELinkCfgTable=nvmMSMDTELinkCfgTable, mcmMpanlInterfaceLinkDown=mcmMpanlInterfaceLinkDown, mcmMSMDTELinkStatsRemoteCompName=mcmMSMDTELinkStatsRemoteCompName, nvmMSMProfileCfgGroupDNAPrefix=nvmMSMProfileCfgGroupDNAPrefix, mcmMSMLAPFConnectionsCntrTable=mcmMSMLAPFConnectionsCntrTable, mcmMSMDCELinkStatusIfIndex=mcmMSMDCELinkStatusIfIndex, mcmMSMLinkStatusEntry=mcmMSMLinkStatusEntry, mcmMSMStatsLAPFConnEntry=mcmMSMStatsLAPFConnEntry, mcmMSMLinkStatusInterfaceType=mcmMSMLinkStatusInterfaceType, mcmMSMDNAStatusIfIndex=mcmMSMDNAStatusIfIndex, mcmMSMProfileCfgGroupNodeID=mcmMSMProfileCfgGroupNodeID, mcmMSMLinkStatusLAPFStatus=mcmMSMLinkStatusLAPFStatus, nvmMSMProfileCfgGroupCustomerID=nvmMSMProfileCfgGroupCustomerID, mcmMSMDTELinkCfgTable=mcmMSMDTELinkCfgTable, mcmMSMDCELinkStatusEntry=mcmMSMDCELinkStatusEntry, mcmMSMLinkStatusTable=mcmMSMLinkStatusTable, mcmMSMProfileReceivedFromPassport=mcmMSMProfileReceivedFromPassport, control=control, mcmMSMDNAStatusEntry=mcmMSMDNAStatusEntry, mcmMSMLinkStatusRemoteGenCfgType=mcmMSMLinkStatusRemoteGenCfgType, mcmMSMLinkStatusIfIndex=mcmMSMLinkStatusIfIndex, mcmMSMStatsLAPFConnReestablished=mcmMSMStatsLAPFConnReestablished, mcmMSMProfileCfgGroupDNAPrefix=mcmMSMProfileCfgGroupDNAPrefix, mcmMSMDCELinkStatusRemoteDLCIRange=mcmMSMDCELinkStatusRemoteDLCIRange, mcmMpanlPrefixDNAChangedWithoutDeassociation=mcmMpanlPrefixDNAChangedWithoutDeassociation, mcmMSMDTELinkStatsStatus=mcmMSMDTELinkStatsStatus, mcmMSMDTELinkStatsTable=mcmMSMDTELinkStatsTable, mcmMSMDNAStatusAssociation=mcmMSMDNAStatusAssociation, mcmMSMLAPFConnectionsCntrIndex=mcmMSMLAPFConnectionsCntrIndex, mcmMSMDTELinkCfgIfIndex=mcmMSMDTELinkCfgIfIndex, nvmMSMDTELinkCfgMaxSubChannelRange=nvmMSMDTELinkCfgMaxSubChannelRange, mcmMSMDNAStatusTable=mcmMSMDNAStatusTable, mcmMSMDTELinkStatsLocalCompName=mcmMSMDTELinkStatsLocalCompName, mcmMSMStatsLAPFConnDisconnects=mcmMSMStatsLAPFConnDisconnects, mcmMSMStatsProfileTxCnt=mcmMSMStatsProfileTxCnt, mcmMSMDTELinkCfgDTEReceiverBW=mcmMSMDTELinkCfgDTEReceiverBW, status=status, nvmMSMDTELinkCfgDCEReceiverBW=nvmMSMDTELinkCfgDCEReceiverBW, mcmMSMStatsLAPFConnEstablished=mcmMSMStatsLAPFConnEstablished, mcmMSMDTELinkCfgDCEMaxFrameSize=mcmMSMDTELinkCfgDCEMaxFrameSize, mcmMSMDCELinkStatusRemoteNodeId=mcmMSMDCELinkStatusRemoteNodeId, mcmMSMStatsLAPFConnTable=mcmMSMStatsLAPFConnTable, mcmMSMStatsRestartReqTxCnt=mcmMSMStatsRestartReqTxCnt, mcmMSMDNAStatusPrefixNumber=mcmMSMDNAStatusPrefixNumber, mcmMSMDCELinkStatusRemoteRxBw=mcmMSMDCELinkStatusRemoteRxBw, mcmMSMLinkStatusPANLStatus=mcmMSMLinkStatusPANLStatus, nvmMSMDTELinkCfgDCEMaxFrameSize=nvmMSMDTELinkCfgDCEMaxFrameSize, mcmMSMStatsLAPFConnIfIndex=mcmMSMStatsLAPFConnIfIndex, nvmMSMProfileCfgGroupNodeID=nvmMSMProfileCfgGroupNodeID, nvmMSMProfileCfgGroup=nvmMSMProfileCfgGroup, nvmMSMDTELinkCfgIfIndex=nvmMSMDTELinkCfgIfIndex, mcmMSMStatsDnaAssociationCnt=mcmMSMStatsDnaAssociationCnt, nvmMSMDTELinkCfgEntryStatus=nvmMSMDTELinkCfgEntryStatus, mcmMSMDCELinkStatusRemoteMaxFrameSize=mcmMSMDCELinkStatusRemoteMaxFrameSize, mcmMSMLAPFConnectionsCntrAction=mcmMSMLAPFConnectionsCntrAction, mcmMSMLinkStatusRemoteCompName=mcmMSMLinkStatusRemoteCompName, mcmMSMDTELinkStatsIfIndex=mcmMSMDTELinkStatsIfIndex, micom_msm=micom_msm, mcmMSMStatsPANLInfoElementsTxCnt=mcmMSMStatsPANLInfoElementsTxCnt, mcmMSMDTELinkStatsEntry=mcmMSMDTELinkStatsEntry, mcmMSMDTELinkCfgMaxSubChannelRange=mcmMSMDTELinkCfgMaxSubChannelRange, nvmMSMDTELinkCfgDTEReceiverBW=nvmMSMDTELinkCfgDTEReceiverBW, mcmMpanlPrefixDNAhasNotBeenConfigured=mcmMpanlPrefixDNAhasNotBeenConfigured, mcmMSMStatsRestartReqRxCnt=mcmMSMStatsRestartReqRxCnt, mcmMSMLAPFConnectionsCntrEntry=mcmMSMLAPFConnectionsCntrEntry, nvmMSMDTELinkCfgEntry=nvmMSMDTELinkCfgEntry, mcmMSMStatsProfileRxCnt=mcmMSMStatsProfileRxCnt, nvmMSMDTELinkCfgDTEMaxFrameSize=nvmMSMDTELinkCfgDTEMaxFrameSize, configuration=configuration)
