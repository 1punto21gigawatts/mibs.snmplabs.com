#
# PySNMP MIB module NMS-TS (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NMS-TS
# Produced by pysmi-0.3.4 at Wed May  1 14:22:26 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion")
nmslocal, = mibBuilder.importSymbols("NMS-SMI", "nmslocal")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, TimeTicks, Gauge32, Counter32, ObjectIdentity, Bits, iso, IpAddress, NotificationType, ModuleIdentity, Unsigned32, MibIdentifier, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "TimeTicks", "Gauge32", "Counter32", "ObjectIdentity", "Bits", "iso", "IpAddress", "NotificationType", "ModuleIdentity", "Unsigned32", "MibIdentifier", "Integer32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
nmslts = MibIdentifier((1, 3, 6, 1, 4, 1, 11606, 10, 2, 9))
nmstsLines = MibScalar((1, 3, 6, 1, 4, 1, 11606, 10, 2, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmstsLines.setStatus('mandatory')
if mibBuilder.loadTexts: nmstsLines.setDescription('Number of terminal lines on this device. Includes virtual lines.')
nmsltsLineTable = MibTable((1, 3, 6, 1, 4, 1, 11606, 10, 2, 9, 2), )
if mibBuilder.loadTexts: nmsltsLineTable.setStatus('mandatory')
if mibBuilder.loadTexts: nmsltsLineTable.setDescription('A list of terminal server line entries.')
nmsltsLineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11606, 10, 2, 9, 2, 1), ).setIndexNames((0, "NMS-TS", "tsLineNumber"))
if mibBuilder.loadTexts: nmsltsLineEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nmsltsLineEntry.setDescription('A collection of per TTY objects in the NMS Terminal Server implementation.')
nmstsLineActive = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 9, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmstsLineActive.setStatus('mandatory')
if mibBuilder.loadTexts: nmstsLineActive.setDescription('Boolean whether this line is active or not.')
nmstsLineType = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 9, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 1), ("console", 2), ("terminal", 3), ("line-printer", 4), ("virtual-terminal", 5), ("auxiliary", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmstsLineType.setStatus('mandatory')
if mibBuilder.loadTexts: nmstsLineType.setDescription('Type of line.')
nmstsLineAutobaud = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 9, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmstsLineAutobaud.setStatus('mandatory')
if mibBuilder.loadTexts: nmstsLineAutobaud.setDescription('Boolean whether line will autobaud or not.')
nmstsLineSpeedin = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 9, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmstsLineSpeedin.setStatus('mandatory')
if mibBuilder.loadTexts: nmstsLineSpeedin.setDescription('What input speed the line is running at.')
nmstsLineSpeedout = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 9, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmstsLineSpeedout.setStatus('mandatory')
if mibBuilder.loadTexts: nmstsLineSpeedout.setDescription('What output speed the line is running at.')
nmstsLineFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 9, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("unknown", 1), ("none", 2), ("software-input", 3), ("software-output", 4), ("software-both", 5), ("hardware-input", 6), ("hardware-output", 7), ("hardware-both", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmstsLineFlow.setStatus('mandatory')
if mibBuilder.loadTexts: nmstsLineFlow.setDescription('What kind of flow control the line is using.')
nmstsLineModem = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 9, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("none", 2), ("call-in", 3), ("call-out", 4), ("cts-required", 5), ("ri-is-cd", 6), ("inout", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmstsLineModem.setStatus('mandatory')
if mibBuilder.loadTexts: nmstsLineModem.setDescription('What kind of modem control the line is using.')
nmstsLineLoc = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 9, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmstsLineLoc.setStatus('mandatory')
if mibBuilder.loadTexts: nmstsLineLoc.setDescription("Describes the line's physical location.")
nmstsLineTerm = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 9, 2, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmstsLineTerm.setStatus('mandatory')
if mibBuilder.loadTexts: nmstsLineTerm.setDescription("Describes the line's terminal type.")
nmstsLineScrlen = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 9, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmstsLineScrlen.setStatus('mandatory')
if mibBuilder.loadTexts: nmstsLineScrlen.setDescription('Length in lines of the screen of terminal attached to this line.')
nmstsLineScrwid = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 9, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmstsLineScrwid.setStatus('mandatory')
if mibBuilder.loadTexts: nmstsLineScrwid.setDescription('Width in characters of the screen of terminal attached to this line.')
nmstsLineEsc = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 9, 2, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmstsLineEsc.setStatus('mandatory')
if mibBuilder.loadTexts: nmstsLineEsc.setDescription('Escape character used to break out of active sessions.')
nmstsLineTmo = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 9, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmstsLineTmo.setStatus('mandatory')
if mibBuilder.loadTexts: nmstsLineTmo.setDescription('Line idleness timeout in seconds.')
nmstsLineSestmo = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 9, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmstsLineSestmo.setStatus('mandatory')
if mibBuilder.loadTexts: nmstsLineSestmo.setDescription('Session idleness timeout in seconds.')
nmstsLineRotary = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 9, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmstsLineRotary.setStatus('mandatory')
if mibBuilder.loadTexts: nmstsLineRotary.setDescription('Rotary group number the line belongs in.')
nmstsLineUses = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 9, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmstsLineUses.setStatus('mandatory')
if mibBuilder.loadTexts: nmstsLineUses.setDescription('Number of times a connection has been made to or from this line.')
nmstsLineNses = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 9, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmstsLineNses.setStatus('mandatory')
if mibBuilder.loadTexts: nmstsLineNses.setDescription('Current number of sessions in use on this line.')
nmstsLineUser = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 9, 2, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmstsLineUser.setStatus('mandatory')
if mibBuilder.loadTexts: nmstsLineUser.setDescription('TACACS user name, if TACACS enabled, of user on this line.')
nmstsLineNoise = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 9, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmstsLineNoise.setStatus('mandatory')
if mibBuilder.loadTexts: nmstsLineNoise.setDescription('Count of garbage characters received when line inactive.')
nmstsLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 9, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmstsLineNumber.setStatus('mandatory')
if mibBuilder.loadTexts: nmstsLineNumber.setDescription("The line i've been talking about.")
nmstsLineTimeActive = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 9, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmstsLineTimeActive.setStatus('mandatory')
if mibBuilder.loadTexts: nmstsLineTimeActive.setDescription('The time in seconds since line was activated.')
nmsltsLineSessionTable = MibTable((1, 3, 6, 1, 4, 1, 11606, 10, 2, 9, 3), )
if mibBuilder.loadTexts: nmsltsLineSessionTable.setStatus('mandatory')
if mibBuilder.loadTexts: nmsltsLineSessionTable.setDescription('A list of terminal server line and session entries.')
nmsltsLineSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11606, 10, 2, 9, 3, 1), ).setIndexNames((0, "NMS-TS", "nmstslineSesLine"), (0, "NMS-TS", "nmstslineSesSession"))
if mibBuilder.loadTexts: nmsltsLineSessionEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nmsltsLineSessionEntry.setDescription('A collection of per session and per TTY objects in the NMS Terminal Server implementation.')
nmstslineSesType = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 9, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("unknown", 1), ("pad", 2), ("stream", 3), ("rlogin", 4), ("telnet", 5), ("tcp", 6), ("lat", 7), ("mop", 8), ("slip", 9), ("xremote", 10), ("rshell", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmstslineSesType.setStatus('mandatory')
if mibBuilder.loadTexts: nmstslineSesType.setDescription('Type of session.')
nmstslineSesDir = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 9, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("incoming", 2), ("outgoing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmstslineSesDir.setStatus('mandatory')
if mibBuilder.loadTexts: nmstslineSesDir.setDescription('Direction of session.')
nmstslineSesAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 9, 3, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmstslineSesAddr.setStatus('mandatory')
if mibBuilder.loadTexts: nmstslineSesAddr.setDescription('Remote host address of session. [What about PAD connections?]')
nmstslineSesName = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 9, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmstslineSesName.setStatus('mandatory')
if mibBuilder.loadTexts: nmstslineSesName.setDescription('Remote host name of session.')
nmstslineSesCur = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 9, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmstslineSesCur.setStatus('mandatory')
if mibBuilder.loadTexts: nmstslineSesCur.setDescription('Boolean whether session is the currently active one.')
nmstslineSesIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 9, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmstslineSesIdle.setStatus('mandatory')
if mibBuilder.loadTexts: nmstslineSesIdle.setDescription('Time in seconds session has been idle.')
nmstslineSesLine = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 9, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmstslineSesLine.setStatus('mandatory')
if mibBuilder.loadTexts: nmstslineSesLine.setDescription('Table index 1.')
nmstslineSesSession = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 9, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmstslineSesSession.setStatus('mandatory')
if mibBuilder.loadTexts: nmstslineSesSession.setDescription('Table index 2.')
nmstsMsgTtyLine = MibScalar((1, 3, 6, 1, 4, 1, 11606, 10, 2, 9, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmstsMsgTtyLine.setStatus('mandatory')
if mibBuilder.loadTexts: nmstsMsgTtyLine.setDescription('tty line to send the message to. -1 will send it to all tty lines')
nmstsMsgIntervaltim = MibScalar((1, 3, 6, 1, 4, 1, 11606, 10, 2, 9, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmstsMsgIntervaltim.setStatus('mandatory')
if mibBuilder.loadTexts: nmstsMsgIntervaltim.setDescription('Interval between reissuing message in milliseconds. Minimum non-zero setting is 10000. 0 will cause the routine to choose its own intervals becoming more frequent as MessageDuration gets close to expiring. 2hr, 1hr, 30min, 5min, 1min')
nmstsMsgDuration = MibScalar((1, 3, 6, 1, 4, 1, 11606, 10, 2, 9, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmstsMsgDuration.setStatus('mandatory')
if mibBuilder.loadTexts: nmstsMsgDuration.setDescription('Length of time to reissue message in milliseconds. Minimum non-zero setting is 10000. A setting of 0 will not repeat the message.')
nmstsMsgText = MibScalar((1, 3, 6, 1, 4, 1, 11606, 10, 2, 9, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmstsMsgText.setStatus('mandatory')
if mibBuilder.loadTexts: nmstsMsgText.setDescription('Up to 256 characters that will make up the message')
nmstsMsgTmpBanner = MibScalar((1, 3, 6, 1, 4, 1, 11606, 10, 2, 9, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("additive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmstsMsgTmpBanner.setStatus('mandatory')
if mibBuilder.loadTexts: nmstsMsgTmpBanner.setDescription('Should the message be used as a temporary banner. 1 - No. 2 - In addition to the normal banner')
nmstsMsgSend = MibScalar((1, 3, 6, 1, 4, 1, 11606, 10, 2, 9, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("nothing", 1), ("reload", 2), ("messagedone", 3), ("abort", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmstsMsgSend.setStatus('mandatory')
if mibBuilder.loadTexts: nmstsMsgSend.setDescription('Sends the message. The value determines what to do after the message has completed.')
nmstsClrTtyLine = MibScalar((1, 3, 6, 1, 4, 1, 11606, 10, 2, 9, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmstsClrTtyLine.setStatus('mandatory')
if mibBuilder.loadTexts: nmstsClrTtyLine.setDescription('tty line to clear. Read returns the last line cleared. A value of -1 indicates no lines have been cleared.')
mibBuilder.exportSymbols("NMS-TS", nmstsLineTerm=nmstsLineTerm, nmstsLineTmo=nmstsLineTmo, nmstsLineRotary=nmstsLineRotary, nmsltsLineSessionTable=nmsltsLineSessionTable, nmstsLines=nmstsLines, nmstsMsgTtyLine=nmstsMsgTtyLine, nmstsLineScrlen=nmstsLineScrlen, nmstsLineSestmo=nmstsLineSestmo, nmstslineSesAddr=nmstslineSesAddr, nmstsMsgSend=nmstsMsgSend, nmslts=nmslts, nmstsMsgIntervaltim=nmstsMsgIntervaltim, nmstsLineAutobaud=nmstsLineAutobaud, nmstsLineUser=nmstsLineUser, nmstslineSesCur=nmstslineSesCur, nmstslineSesDir=nmstslineSesDir, nmstslineSesIdle=nmstslineSesIdle, nmsltsLineSessionEntry=nmsltsLineSessionEntry, nmstsLineActive=nmstsLineActive, nmstsClrTtyLine=nmstsClrTtyLine, nmstsLineUses=nmstsLineUses, nmstsMsgDuration=nmstsMsgDuration, nmstsLineTimeActive=nmstsLineTimeActive, nmstsLineFlow=nmstsLineFlow, nmstsLineModem=nmstsLineModem, nmstslineSesType=nmstslineSesType, nmstsMsgText=nmstsMsgText, nmsltsLineTable=nmsltsLineTable, nmstsLineSpeedin=nmstsLineSpeedin, nmstsLineEsc=nmstsLineEsc, nmstsLineScrwid=nmstsLineScrwid, nmstslineSesName=nmstslineSesName, nmstsLineSpeedout=nmstsLineSpeedout, nmstsLineLoc=nmstsLineLoc, nmsltsLineEntry=nmsltsLineEntry, nmstsLineNoise=nmstsLineNoise, nmstsMsgTmpBanner=nmstsMsgTmpBanner, nmstsLineType=nmstsLineType, nmstslineSesSession=nmstslineSesSession, nmstsLineNses=nmstsLineNses, nmstsLineNumber=nmstsLineNumber, nmstslineSesLine=nmstslineSesLine)
