#
# PySNMP MIB module CISCO-ATM-TRUNK-STAT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-ATM-TRUNK-STAT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:51:04 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
AtmVpIdentifier, AtmVcIdentifier = mibBuilder.importSymbols("ATM-TC-MIB", "AtmVpIdentifier", "AtmVcIdentifier")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Bits, Integer32, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, NotificationType, TimeTicks, IpAddress, Counter32, Gauge32, iso, Unsigned32, ObjectIdentity, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Integer32", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "NotificationType", "TimeTicks", "IpAddress", "Counter32", "Gauge32", "iso", "Unsigned32", "ObjectIdentity", "MibIdentifier")
TruthValue, TimeStamp, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TimeStamp", "DisplayString", "TextualConvention")
ciscoAtmTrunkStatMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 407))
ciscoAtmTrunkStatMIB.setRevisions(('2005-08-10 00:00', '2004-05-12 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoAtmTrunkStatMIB.setRevisionsDescriptions(('Add new objects - catsPvcOamLpbkTimeoutCnts - catsPvcNewOamLpbkTimeoutDur - catsPvcActiveOamLpbkTimeoutDur - catsPvcOamLpbkTimeoutThreshold', 'Initial version of the MIB.',))
if mibBuilder.loadTexts: ciscoAtmTrunkStatMIB.setLastUpdated('200508100000Z')
if mibBuilder.loadTexts: ciscoAtmTrunkStatMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoAtmTrunkStatMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-wanatm@cisco.com')
if mibBuilder.loadTexts: ciscoAtmTrunkStatMIB.setDescription("The MIB module contains ATM Trunk statistics. TERMINOLOGY ----------- PVC: Permanent Virtual Circuit OAM: Operation and Management CRC: Cyclic redundancy check AIS: Alarm Indication Signal TDM: Time Division Multiplex FERF: Far End Receive Failure CPS: Common Part Sub-layer PDU: Protocol Data Unit HEC: Header Error Control DSP: Digital Signal Processing CID: Channel Identifier UUI: User-to-User Information VoIP: Voice over IP CCS: Common Channel Signaling VoAAL2: Voice over AAL2 SDU: Service Data Unit HDLC: High Level Data Link Control SAR: Segmantation and Reassembly External AIS - is an Alarm Indication Signal associated with a maintenance alarm detected on a defective maintenance span, that is transmitted in the direction of the defect as a substitute for normal signal. The purpose is to show the downstream entities that a defect has been identified and to prevent other maintenance alarms consequent to this first defect. External AIS bit stream is represented by an all 1's signal. Ref - ITU-T Rec. M.20 sec. 5.4.2 a External RAI - is a Remote Alarm Indication signal that is transmitted upstream from an entity that has detected defects persisting long enough to constitute a received signal failure. Its purpose is to report in the backward direction that there is an interruption of service in the forward direction. The forward direction is from the originating end of the alarm to the remote end. The backward direction is from the remote end to the orginating end of the alarm. Ref - ITU-T Rec. G.704 section 2.1.3.1.3 I.366.2 - ANNEX N External Connection AIS - is a Alarm Indicating Signal transmitted in the downstream direction from the AAL type 2 connecting point that first detects a defect affecting the AAL type 2 connection; this includes defects indicated by lower layers. Ref - ITU-T Rec. I.610 sec 6.2.2.1.1.1 External Connection RDI - is a signal transmitted upstream by an AAl type 2 endpoint that is in an alarm state as the result of having received an AAL type2 connection AIS or having detected a defect that affects the AAL type2 connection. All ATM alarm definitions are specified in I.610 (ITU standard). ")
ciscoAtmTrunkStatNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 407, 0))
ciscoAtmTrunkStatObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 407, 1))
catsStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 407, 1, 1))
catsPvcHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 407, 1, 1, 1), )
if mibBuilder.loadTexts: catsPvcHistoryTable.setStatus('current')
if mibBuilder.loadTexts: catsPvcHistoryTable.setDescription('This table represents a 24 hour history of statistics per PVC. The statistics are collected using 15 minute intervals. Entries in this table are populated at the end of the interval. ')
catsPvcHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 407, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-ATM-TRUNK-STAT-MIB", "catsPvcVpi"), (0, "CISCO-ATM-TRUNK-STAT-MIB", "catsPvcVci"), (0, "CISCO-ATM-TRUNK-STAT-MIB", "catsPvcIntervalIndex"))
if mibBuilder.loadTexts: catsPvcHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: catsPvcHistoryEntry.setDescription('An entry in the table. Each entry represents the PVC statistics for a given 15 minute interval. The ifIndex refers to the instance in the ifTable with ifType propAtm(197) or atm(37). ')
catsPvcVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 407, 1, 1, 1, 1, 1), AtmVpIdentifier())
if mibBuilder.loadTexts: catsPvcVpi.setStatus('current')
if mibBuilder.loadTexts: catsPvcVpi.setDescription(' The VPI value for the PVC for which the statistics are being collected. ')
catsPvcVci = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 407, 1, 1, 1, 1, 2), AtmVcIdentifier())
if mibBuilder.loadTexts: catsPvcVci.setStatus('current')
if mibBuilder.loadTexts: catsPvcVci.setDescription(' The VCI value for the PVC for which the statistics are being collected. ')
catsPvcIntervalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 407, 1, 1, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: catsPvcIntervalIndex.setStatus('current')
if mibBuilder.loadTexts: catsPvcIntervalIndex.setDescription('This is the history interval number. The intervals are 15 minutes long and thus for a 24 hour period there will be 96 intervals. The 24 hour interval is aligned to wall clock. The index of 1 will represent the interval from 00:00 to 00:15. The index of 2 will represent the interval from 00:15 to 00:30 and so on. ')
catsPvcValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 407, 1, 1, 1, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catsPvcValidFlag.setStatus('current')
if mibBuilder.loadTexts: catsPvcValidFlag.setDescription('This object is used to indicate if the entry has valid statistics data. It contains a value of true(1) if the data is valid and false(2) otherwise. A possible scenario when this flag will be set to false(2) is when there are time changes due to daylight savings time and/ or time zone changes. This flag can also be set to false(2) if the statistics in this 15 minute interval have experienced discontinuity. ')
catsPvcDiscontinuityTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 407, 1, 1, 1, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catsPvcDiscontinuityTime.setStatus('current')
if mibBuilder.loadTexts: catsPvcDiscontinuityTime.setDescription('This object will represent the timestamp when the statistics in this 15 minute interval were discontinued due to a forced clear on the module. If this has the default value then it indicates that the statistics in this interval have not experienced any discontinuity. ')
catsPvcAtmXmtCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 407, 1, 1, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catsPvcAtmXmtCells.setStatus('current')
if mibBuilder.loadTexts: catsPvcAtmXmtCells.setDescription('The total number of cells transmitted by this PVC towards the ATM network. ')
catsPvcAtmRcvCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 407, 1, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catsPvcAtmRcvCells.setStatus('current')
if mibBuilder.loadTexts: catsPvcAtmRcvCells.setDescription('The total number of cells received by this PVC from the ATM network. ')
catsPvcAvgAtmXmtCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 407, 1, 1, 1, 1, 8), Counter32()).setUnits('cells-per-sec').setMaxAccess("readonly")
if mibBuilder.loadTexts: catsPvcAvgAtmXmtCells.setStatus('current')
if mibBuilder.loadTexts: catsPvcAvgAtmXmtCells.setDescription('The average number of cells transmitted towards the network by this PVC. The average is computed by dividing the total number of cells transmitted over this 15 minute interval by the interval time (15 minutes). ')
catsPvcAvgAtmRcvCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 407, 1, 1, 1, 1, 9), Counter32()).setUnits('cells-per-sec').setMaxAccess("readonly")
if mibBuilder.loadTexts: catsPvcAvgAtmRcvCells.setStatus('current')
if mibBuilder.loadTexts: catsPvcAvgAtmRcvCells.setDescription('The average number of cells received from the network by the PVC. The average is computed by dividing the total number of cells received over this 15 minute interval by the interval time (15 minutes). ')
catsPvcPeakAtmXmtCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 407, 1, 1, 1, 1, 10), Counter32()).setUnits('cells-per-sec').setMaxAccess("readonly")
if mibBuilder.loadTexts: catsPvcPeakAtmXmtCells.setStatus('current')
if mibBuilder.loadTexts: catsPvcPeakAtmXmtCells.setDescription('The peak number of cells per second transmitted towards the network. The transmitted cells per second are monitored every second and the peak value over this 15 minute interval is returned in this object. ')
catsPvcPeakAtmRcvCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 407, 1, 1, 1, 1, 11), Counter32()).setUnits('cells-per-sec').setMaxAccess("readonly")
if mibBuilder.loadTexts: catsPvcPeakAtmRcvCells.setStatus('current')
if mibBuilder.loadTexts: catsPvcPeakAtmRcvCells.setDescription('The peak number of cells per second received from the network. The received cells per second are monitored every second and the peak value over this 15 minute interval is returned in this object. ')
catsPvcOamXmtEndLpbkCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 407, 1, 1, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catsPvcOamXmtEndLpbkCells.setStatus('current')
if mibBuilder.loadTexts: catsPvcOamXmtEndLpbkCells.setDescription('The number of OAM end-to-end loopback cells that were transmitted on this connection during this 15 minute interval. ')
catsPvcOamRcvEndLpbkCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 407, 1, 1, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catsPvcOamRcvEndLpbkCells.setStatus('current')
if mibBuilder.loadTexts: catsPvcOamRcvEndLpbkCells.setDescription('The number of OAM end-to-end loopback cells that were received on this connection during this 15 minute interval. ')
catsPvcOamXmtSegLpbkCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 407, 1, 1, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catsPvcOamXmtSegLpbkCells.setStatus('current')
if mibBuilder.loadTexts: catsPvcOamXmtSegLpbkCells.setDescription('The number of OAM Segment loop back cells that were transmitted on this connection during this 15 minute interval. ')
catsPvcOamRcvSegLpbkCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 407, 1, 1, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catsPvcOamRcvSegLpbkCells.setStatus('current')
if mibBuilder.loadTexts: catsPvcOamRcvSegLpbkCells.setDescription('The number of OAM Segment loop back cells that were received on this connection during this 15 minute interval. ')
catsPvcOamLpbkLostCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 407, 1, 1, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catsPvcOamLpbkLostCells.setStatus('current')
if mibBuilder.loadTexts: catsPvcOamLpbkLostCells.setDescription('This object keeps track of the number of OAM loopback cells lost. ')
catsPvcDiscardedRcvOamCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 407, 1, 1, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catsPvcDiscardedRcvOamCells.setStatus('current')
if mibBuilder.loadTexts: catsPvcDiscardedRcvOamCells.setDescription('The number of OAM cells that had CRC errors and are not counted in any other counters for received OAM cells. ')
catsPvcAisSuppressCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 407, 1, 1, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catsPvcAisSuppressCnts.setStatus('current')
if mibBuilder.loadTexts: catsPvcAisSuppressCnts.setDescription('The number of instances that an ATM AIS alarm was successfully suppressed which prevented the alarm from propagating to the TDM interfaces. ')
catsPvcXmtAisCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 407, 1, 1, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catsPvcXmtAisCnts.setStatus('current')
if mibBuilder.loadTexts: catsPvcXmtAisCnts.setDescription('The number of instances that an ATM AIS alarm was transmitted. ')
catsPvcRcvAisCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 407, 1, 1, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catsPvcRcvAisCnts.setStatus('current')
if mibBuilder.loadTexts: catsPvcRcvAisCnts.setDescription('The number of instances that an ATM AIS alarm was received. ')
catsPvcXmtFerfCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 407, 1, 1, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catsPvcXmtFerfCnts.setStatus('current')
if mibBuilder.loadTexts: catsPvcXmtFerfCnts.setDescription('The number of instances that an ATM FERF alarm was transmitted. ')
catsPvcRcvFerfCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 407, 1, 1, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catsPvcRcvFerfCnts.setStatus('current')
if mibBuilder.loadTexts: catsPvcRcvFerfCnts.setDescription('The number of instances that an ATM FERF alarm was received. ')
catsPvcXmtAisCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 407, 1, 1, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catsPvcXmtAisCells.setStatus('current')
if mibBuilder.loadTexts: catsPvcXmtAisCells.setDescription('The number of AIS cells that were transmitted on this connection during this 15 minute interval. ')
catsPvcRcvAisCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 407, 1, 1, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catsPvcRcvAisCells.setStatus('current')
if mibBuilder.loadTexts: catsPvcRcvAisCells.setDescription('The number of AIS cells that were received on this connection during this 15 minute interval. ')
catsPvcXmtFerfCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 407, 1, 1, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catsPvcXmtFerfCells.setStatus('current')
if mibBuilder.loadTexts: catsPvcXmtFerfCells.setDescription('The number of FERF cells that were transmitted on this connection during this 15 minute interval. ')
catsPvcRcvFerfCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 407, 1, 1, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catsPvcRcvFerfCells.setStatus('current')
if mibBuilder.loadTexts: catsPvcRcvFerfCells.setDescription('The number of FERF cells that were received on this connection during this 15 minute interval. ')
catsPvcOamLpbkTimeoutCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 407, 1, 1, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catsPvcOamLpbkTimeoutCnts.setStatus('current')
if mibBuilder.loadTexts: catsPvcOamLpbkTimeoutCnts.setDescription('The number of instances that OAM Loopback Timeout alarm had occurred within this 15 minute interval. ')
catsPvcNewOamLpbkTimeoutDur = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 407, 1, 1, 1, 1, 28), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: catsPvcNewOamLpbkTimeoutDur.setStatus('current')
if mibBuilder.loadTexts: catsPvcNewOamLpbkTimeoutDur.setDescription('The duration of new OAM Loopback Timeout alarms for this 15 minute interval expressed in seconds. ')
catsPvcActiveOamLpbkTimeoutDur = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 407, 1, 1, 1, 1, 29), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: catsPvcActiveOamLpbkTimeoutDur.setStatus('current')
if mibBuilder.loadTexts: catsPvcActiveOamLpbkTimeoutDur.setDescription('The total duration of new and past OAM loopback timeout alarms that were active during this 15 minute interval. For example, if the an alarm lasted for a total of 50 seconds and crossed interval boundaries. In the previous 15 minute interval it lasted for 30 seconds and 20 seconds in the current 15 minute interval. There is a new alarm that lasted for 15 seconds in the current 15 minute interval as well. Thus, this object will have a value of 20+15 = 35 seconds. ')
catsPvcOamLpbkTimeoutThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 407, 1, 1, 1, 1, 30), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(5)).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: catsPvcOamLpbkTimeoutThreshold.setStatus('current')
if mibBuilder.loadTexts: catsPvcOamLpbkTimeoutThreshold.setDescription('This is the threshold for OAM Loopback Timeout alarm expressed in seconds. If the OAM cell is not received back within the threshold specified in this object, an OAM loopback timeout alarm is generated. ')
catsAal2PvcHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 407, 1, 1, 2), )
if mibBuilder.loadTexts: catsAal2PvcHistoryTable.setStatus('current')
if mibBuilder.loadTexts: catsAal2PvcHistoryTable.setDescription('This table represents a 24 hour history of statistics per AAL2 PVC. The statistics are collected using 15 minute intervals. Entries in this table are populated at the end of the interval. ')
catsAal2PvcHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 407, 1, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-ATM-TRUNK-STAT-MIB", "catsAal2PvcVpi"), (0, "CISCO-ATM-TRUNK-STAT-MIB", "catsAal2PvcVci"), (0, "CISCO-ATM-TRUNK-STAT-MIB", "catsAal2PvcIntervalIndex"))
if mibBuilder.loadTexts: catsAal2PvcHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: catsAal2PvcHistoryEntry.setDescription('An entry in the table. Each entry contains the statistics for particular AAL2 PVC for the given 15 minute interval. The primary index, ifIndex, will be of ifType propAtm(197), atm(37) or aal2(187). ')
catsAal2PvcVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 407, 1, 1, 2, 1, 1), AtmVpIdentifier())
if mibBuilder.loadTexts: catsAal2PvcVpi.setStatus('current')
if mibBuilder.loadTexts: catsAal2PvcVpi.setDescription(' The VPI value for the AAL2 PVC for which the statistics are being collected. ')
catsAal2PvcVci = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 407, 1, 1, 2, 1, 2), AtmVcIdentifier())
if mibBuilder.loadTexts: catsAal2PvcVci.setStatus('current')
if mibBuilder.loadTexts: catsAal2PvcVci.setDescription(' The VCI value for the AAL2 PVC for which the statistics are being collected. ')
catsAal2PvcIntervalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 407, 1, 1, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: catsAal2PvcIntervalIndex.setStatus('current')
if mibBuilder.loadTexts: catsAal2PvcIntervalIndex.setDescription('This is the history interval number. The intervals are 15 minutes long and thus for a 24 hour period there will be 96 intervals. The 24 hour interval is aligned to wall clock. The index of 1 will represent the interval from 00:00 to 00:15. The index of 2 will represent the interval from 00:15 to 00:30 and so on. ')
catsAal2PvcValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 407, 1, 1, 2, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catsAal2PvcValidFlag.setStatus('current')
if mibBuilder.loadTexts: catsAal2PvcValidFlag.setDescription('This object is used to indicate if the entry has valid statistics data. It contains a value of true(1) if the data is valid and false(2) otherwise. A possible scenario when this flag will be set to false(2) is when there are time changes due to daylight savings time and/ or time zone changes. This flag can also be set to false(2) if statistics in this 15 minute interval have experienced discontinuity. ')
catsAal2PvcDiscontinuityTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 407, 1, 1, 2, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catsAal2PvcDiscontinuityTime.setStatus('current')
if mibBuilder.loadTexts: catsAal2PvcDiscontinuityTime.setDescription('This object will represent the timestamp when the statistics in this 15 minute interval were discontinued due to a forced clear on the module. If this has the default value then it indicates that the statistics in this interval have not experienced any discontinuity. ')
catsAal2PvcCpsSentPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 407, 1, 1, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catsAal2PvcCpsSentPkts.setStatus('current')
if mibBuilder.loadTexts: catsAal2PvcCpsSentPkts.setDescription('The number of AAL2 CPS packets sent to the network during this 15 minute interval. ')
catsAal2PvcCpsRcvdPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 407, 1, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catsAal2PvcCpsRcvdPkts.setStatus('current')
if mibBuilder.loadTexts: catsAal2PvcCpsRcvdPkts.setDescription('The number of AAL2 CPS packets received from the network during this 15 minute interval. This does not include the packets which are counted as error packets. ')
catsAal2PvcHecErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 407, 1, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catsAal2PvcHecErrors.setStatus('current')
if mibBuilder.loadTexts: catsAal2PvcHecErrors.setDescription('The number of egress AAL2(ATM Adaptation layer 2) CPS PDU dropped due to HEC error. ')
catsAal2PvcCrcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 407, 1, 1, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catsAal2PvcCrcErrors.setStatus('current')
if mibBuilder.loadTexts: catsAal2PvcCrcErrors.setDescription('The number of egress AAL2 Type3 CPS PDUs dropped due to invalid CRC-10 error. CRC validation is for Type 3 packets only. Type 1 packets are not subjected to CRC-10 error validation. This does not count the Type 3 packets generated by the DSP. ')
catsAal2PvcInvOsfCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 407, 1, 1, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catsAal2PvcInvOsfCells.setStatus('current')
if mibBuilder.loadTexts: catsAal2PvcInvOsfCells.setDescription('The number of AAL2 cells dropped due to invalid OSF (OffSet Field) in the egress direction. ')
catsAal2PvcInvParCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 407, 1, 1, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catsAal2PvcInvParCells.setStatus('current')
if mibBuilder.loadTexts: catsAal2PvcInvParCells.setDescription('The number of AAL2 cells dropped due to invalid parity bit field in the egress direction. ')
catsAal2PvcCpsInvCidPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 407, 1, 1, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catsAal2PvcCpsInvCidPkts.setStatus('current')
if mibBuilder.loadTexts: catsAal2PvcCpsInvCidPkts.setDescription('The number of AAL2 CPS packets dropped in the egress direction due to invalid CID(Channel Identifier). The CID may be considered as invalid if it is out of range or not configured. ')
catsAal2PvcCpsInvUuiPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 407, 1, 1, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catsAal2PvcCpsInvUuiPkts.setStatus('current')
if mibBuilder.loadTexts: catsAal2PvcCpsInvUuiPkts.setDescription('The number of AAL2 CPS packets dropped in the egress direction due to invalid UUI field. ')
catsAal2PvcCpsInvLenPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 407, 1, 1, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catsAal2PvcCpsInvLenPkts.setStatus('current')
if mibBuilder.loadTexts: catsAal2PvcCpsInvLenPkts.setDescription('The number of AAL2 CPS packets dropped in the egress direction due to invalid length field. ')
catsAal5PvcHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 407, 1, 1, 3), )
if mibBuilder.loadTexts: catsAal5PvcHistoryTable.setStatus('current')
if mibBuilder.loadTexts: catsAal5PvcHistoryTable.setDescription('This table represents a 24 hour history of statistics per AAL5 PVC. The statistics are collected using 15 minute intervals. Entries in this table are populated at the end of the interval. ')
catsAal5PvcHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 407, 1, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-ATM-TRUNK-STAT-MIB", "catsAal5PvcVpi"), (0, "CISCO-ATM-TRUNK-STAT-MIB", "catsAal5PvcVci"), (0, "CISCO-ATM-TRUNK-STAT-MIB", "catsAal5PvcIntervalIndex"))
if mibBuilder.loadTexts: catsAal5PvcHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: catsAal5PvcHistoryEntry.setDescription('An entry in the table. Each entry contains the statistics for a particular AAL5 PVC for the given 15 minute interval. The primary index, ifIndex, will be of ifType propAtm(197), atm(37) or aal5(49). ')
catsAal5PvcVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 407, 1, 1, 3, 1, 1), AtmVpIdentifier())
if mibBuilder.loadTexts: catsAal5PvcVpi.setStatus('current')
if mibBuilder.loadTexts: catsAal5PvcVpi.setDescription(' The VPI value for the AAL5 PVC for which the statistics are being collected. ')
catsAal5PvcVci = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 407, 1, 1, 3, 1, 2), AtmVcIdentifier())
if mibBuilder.loadTexts: catsAal5PvcVci.setStatus('current')
if mibBuilder.loadTexts: catsAal5PvcVci.setDescription(' The VCI value for the AAL5 PVC for which the statistics are being collected. ')
catsAal5PvcIntervalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 407, 1, 1, 3, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: catsAal5PvcIntervalIndex.setStatus('current')
if mibBuilder.loadTexts: catsAal5PvcIntervalIndex.setDescription('This is the history interval number. The intervals are 15 minutes long and thus for a 24 hour period there will be 96 intervals. The 24 hour interval is aligned to wall clock. The index of 1 will represent the interval from 00:00 to 00:15. The index of 2 will represent the interval from 00:15 to 00:30 and so on. ')
catsAal5PvcValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 407, 1, 1, 3, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catsAal5PvcValidFlag.setStatus('current')
if mibBuilder.loadTexts: catsAal5PvcValidFlag.setDescription('This object is used to indicate if the entry has valid statistics data. It contains a value of true(1) if the data is valid and false(2) otherwise. A possible scenario when this flag will be set to false(2) is when there are time changes due to daylight savings time and/ or time zone changes. This flag can also be set to false(2) if statistics in this 15 minute interval have experienced discontinuity. ')
catsAal5PvcDiscontinuityTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 407, 1, 1, 3, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catsAal5PvcDiscontinuityTime.setStatus('current')
if mibBuilder.loadTexts: catsAal5PvcDiscontinuityTime.setDescription('This object will represent the timestamp when the statistics in this 15 minute interval were discontinued due to a forced clear on the module. If this has the default value then it indicates that the statistics in this interval have not experienced any discontinuity. ')
catsAal5PvcPduSentPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 407, 1, 1, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catsAal5PvcPduSentPkts.setStatus('current')
if mibBuilder.loadTexts: catsAal5PvcPduSentPkts.setDescription('The number of AAL5 PDUs transmitted to the network. This is applicable only to the PVCs configured as AAL5 PVCs (VoIP(Voice Over IP) PVCs or CCS PVCs in the case of VoAAL2 application). ')
catsAal5PvcPduRcvdPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 407, 1, 1, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catsAal5PvcPduRcvdPkts.setStatus('current')
if mibBuilder.loadTexts: catsAal5PvcPduRcvdPkts.setDescription('The number of AAL5 PDUs received from the network. This is applicable only to the PVCs configured as AAL5 PVCs (VoIP(Voice Over IP) PVCs or CCS(Common Channel Signaling) PVCs in the case of VoAAL2 application). ')
catsAal5PvcInvCpiPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 407, 1, 1, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catsAal5PvcInvCpiPdus.setStatus('current')
if mibBuilder.loadTexts: catsAal5PvcInvCpiPdus.setDescription('The number of AAL5 PDUs dropped in the egress direction due to invalid CPI(Common Part Indicator) field in the AAL5 PDU trailer. This is applicable only to the PVCs configured as AAL5 PVCs (VoIP(Voice Over IP) PVCs or CCS(Common Channel Signaling) PVCs in the case of VoAAL2 application). ')
catsAal5PvcOverSizedSDUs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 407, 1, 1, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catsAal5PvcOverSizedSDUs.setStatus('current')
if mibBuilder.loadTexts: catsAal5PvcOverSizedSDUs.setDescription('The number AAL5 PDUs discarded on this AAL5 PVC at the interface associated with an AAL5 entity because the AAL5 SDUs were too large. ')
catsAal5PvcInvLenPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 407, 1, 1, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catsAal5PvcInvLenPdus.setStatus('current')
if mibBuilder.loadTexts: catsAal5PvcInvLenPdus.setDescription('The number of AAL5 PDUs dropped due to length violations. This is applicable to CCS PVCs. The HDLC frames should have a minimum frame size in order for the proper interpretation by the upper layer protocol. ')
catsAal5PvcCrc32ErrorPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 407, 1, 1, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catsAal5PvcCrc32ErrorPdus.setStatus('current')
if mibBuilder.loadTexts: catsAal5PvcCrc32ErrorPdus.setDescription('The number of AAL5 PDUs dropped in the egress direction due to CRC-32 errors detected by the SAR. ')
catsAal5PvcReassemTimerExpiryPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 407, 1, 1, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catsAal5PvcReassemTimerExpiryPdus.setStatus('current')
if mibBuilder.loadTexts: catsAal5PvcReassemTimerExpiryPdus.setDescription('The number of AAL5 PDU reassembly timer expirations. The timers are maintained in the egress direction for building an AAL5 PDU from the cells. ')
catsCidHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 407, 1, 1, 4), )
if mibBuilder.loadTexts: catsCidHistoryTable.setStatus('current')
if mibBuilder.loadTexts: catsCidHistoryTable.setDescription('This table represents a 24 hour history of statistics per CID. The statistics are collected using 15 minute intervals. The Channel IDentification (CID) is the standard term to identify an ATM AAL2 connection (ITU-T I.366.2). CID is unique within a VC (SVC or PVC). Entries in this table are populated at the end of the interval. ')
catsCidHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 407, 1, 1, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-ATM-TRUNK-STAT-MIB", "catsCidVpi"), (0, "CISCO-ATM-TRUNK-STAT-MIB", "catsCidVci"), (0, "CISCO-ATM-TRUNK-STAT-MIB", "catsCid"), (0, "CISCO-ATM-TRUNK-STAT-MIB", "catsCidIntervalIndex"))
if mibBuilder.loadTexts: catsCidHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: catsCidHistoryEntry.setDescription('An entry in the table. Each entry contains the statistics for a particular CID for the given 15 minute interval. The primary index, ifIndex, will be of ifType propAtm(197), atm(37) or aal2(37). ')
catsCidVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 407, 1, 1, 4, 1, 1), AtmVpIdentifier())
if mibBuilder.loadTexts: catsCidVpi.setStatus('current')
if mibBuilder.loadTexts: catsCidVpi.setDescription(' The VPI value of the ATM trunk connection with the CID for which the statistics are being collected. ')
catsCidVci = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 407, 1, 1, 4, 1, 2), AtmVcIdentifier())
if mibBuilder.loadTexts: catsCidVci.setStatus('current')
if mibBuilder.loadTexts: catsCidVci.setDescription(' The VCI value of the ATM trunk connection with the CID for which the statistics are being collected. ')
catsCid = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 407, 1, 1, 4, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: catsCid.setStatus('current')
if mibBuilder.loadTexts: catsCid.setDescription(' This object is the CID of an ATM AAL2 connection for which the statistics are being collected. ')
catsCidIntervalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 407, 1, 1, 4, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: catsCidIntervalIndex.setStatus('current')
if mibBuilder.loadTexts: catsCidIntervalIndex.setDescription('This is the history interval number. The intervals are 15 minutes long and thus for a 24 hour period there will be 96 intervals. The 24 hour interval is aligned to wall clock. The index of 1 will represent the interval from 00:00 to 00:15. The index of 2 will represent the interval from 00:15 to 00:30 and so on. ')
catsCidValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 407, 1, 1, 4, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catsCidValidFlag.setStatus('current')
if mibBuilder.loadTexts: catsCidValidFlag.setDescription('This object is used to indicate if the entry has valid statistics data. It will take a value of true(1) if the data is valid and false(2) otherwise. A possible scenario when this flag will be set to false(2) is when there are time changes due to daylight savings time and/ or time zone changes. This flag can also be set to false(2) if statistics in this 15 minute interval have experienced discontinuity. ')
catsCidDiscontinuityTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 407, 1, 1, 4, 1, 6), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catsCidDiscontinuityTime.setStatus('current')
if mibBuilder.loadTexts: catsCidDiscontinuityTime.setDescription('This object will represent the timestamp when the statistics in this 15 minute interval were discontinued due to a forced clear on the module. If this has the default value then it indicates that the statistics in this interval have not experienced any discontinuity. ')
catsCidAvgSentPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 407, 1, 1, 4, 1, 7), Counter32()).setUnits('packets-per-sec').setMaxAccess("readonly")
if mibBuilder.loadTexts: catsCidAvgSentPkts.setStatus('current')
if mibBuilder.loadTexts: catsCidAvgSentPkts.setDescription('This attribute defines the average packets per second sent towards the network in this 15 minute interval. The average is computed by dividing the total number of packets sent over this 15 minute interval by the interval time (15 minutes). ')
catsCidAvgRcvdPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 407, 1, 1, 4, 1, 8), Counter32()).setUnits('packets-per-sec').setMaxAccess("readonly")
if mibBuilder.loadTexts: catsCidAvgRcvdPkts.setStatus('current')
if mibBuilder.loadTexts: catsCidAvgRcvdPkts.setDescription('This attribute defines the average packets per second received from the network in this 15 minute interval. The average is computed by dividing the total number of packets received over this 15 minute interval by the interval time (15 minutes). ')
catsCidSentPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 407, 1, 1, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catsCidSentPkts.setStatus('current')
if mibBuilder.loadTexts: catsCidSentPkts.setDescription('This attribute defines the count of packets sent towards the network in this 15 minute interval. ')
catsCidRcvdPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 407, 1, 1, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catsCidRcvdPkts.setStatus('current')
if mibBuilder.loadTexts: catsCidRcvdPkts.setDescription('This attribute defines the count of packets received from the network in this 15 minute interval. ')
catsCidSentOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 407, 1, 1, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catsCidSentOctets.setStatus('current')
if mibBuilder.loadTexts: catsCidSentOctets.setDescription('This attribute defines the count of bytes sent towards the network in this 15 minute interval. ')
catsCidRcvdOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 407, 1, 1, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catsCidRcvdOctets.setStatus('current')
if mibBuilder.loadTexts: catsCidRcvdOctets.setDescription('This attribute defines the count of bytes received from the network in this 15 minute interval. ')
catsCidSentPeakPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 407, 1, 1, 4, 1, 13), Counter32()).setUnits('packets-per-sec').setMaxAccess("readonly")
if mibBuilder.loadTexts: catsCidSentPeakPkts.setStatus('current')
if mibBuilder.loadTexts: catsCidSentPeakPkts.setDescription('This attribute defines the peak packets per second sent towards the network in this 15 minute interval. The sent packets per second are monitored every second and the peak value over the 15 minute interval is returned in this object. ')
catsCidRcvdPeakPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 407, 1, 1, 4, 1, 14), Counter32()).setUnits('packets-per-sec').setMaxAccess("readonly")
if mibBuilder.loadTexts: catsCidRcvdPeakPkts.setStatus('current')
if mibBuilder.loadTexts: catsCidRcvdPeakPkts.setDescription('This attribute defines the peak packets per second received from the network in this 15 minute interval. The received packets per second are monitored every second and the peak value over the 15 minute interval is returned in this object. ')
catsCidExtAISRcvdPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 407, 1, 1, 4, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catsCidExtAISRcvdPkts.setStatus('current')
if mibBuilder.loadTexts: catsCidExtAISRcvdPkts.setDescription('This object contains the number of external AIS AAL2 Type3 packets received in this 15 minute interval. ')
catsCidExtRAIRcvdPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 407, 1, 1, 4, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catsCidExtRAIRcvdPkts.setStatus('current')
if mibBuilder.loadTexts: catsCidExtRAIRcvdPkts.setDescription('This object contains the number of external RAI AAL2 Type3 packets received in this 15 minute interval. ')
catsCidExtConnAISRcvdPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 407, 1, 1, 4, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catsCidExtConnAISRcvdPkts.setStatus('current')
if mibBuilder.loadTexts: catsCidExtConnAISRcvdPkts.setDescription('This object contains the number of external connection AIS AAL2 Type2 packets received in this 15 minute interval. ')
catsCidExtConnRDIRcvdPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 407, 1, 1, 4, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catsCidExtConnRDIRcvdPkts.setStatus('current')
if mibBuilder.loadTexts: catsCidExtConnRDIRcvdPkts.setDescription('This object contains the number of External Connection RDI (Remote Defect Ind.) AAL2 Type2 packets received in this 15 minute interval. ')
catsCidExtAISRcvCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 407, 1, 1, 4, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catsCidExtAISRcvCnts.setStatus('current')
if mibBuilder.loadTexts: catsCidExtAISRcvCnts.setDescription('This object contains the count of external AIS AAL2 Type3 packets received in this 15 minute interval. ')
catsCidExtRAIRcvCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 407, 1, 1, 4, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catsCidExtRAIRcvCnts.setStatus('current')
if mibBuilder.loadTexts: catsCidExtRAIRcvCnts.setDescription('This object contains the number of external RAI AAL2 Type3 packets received in this 15 minute interval. ')
catsCidExtConnAISCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 407, 1, 1, 4, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catsCidExtConnAISCnts.setStatus('current')
if mibBuilder.loadTexts: catsCidExtConnAISCnts.setDescription('This object contains count of external connection AIS AAL2 Type2 packets received in this 15 minute interval. ')
catsCidExtConnRDICnts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 407, 1, 1, 4, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catsCidExtConnRDICnts.setStatus('current')
if mibBuilder.loadTexts: catsCidExtConnRDICnts.setDescription('This object contains the count of external connection RDI (Remote Defect Ind.) AAL2 Type2 packets received in this 15 minute interval. ')
catsCidExtAISXmtCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 407, 1, 1, 4, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catsCidExtAISXmtCnts.setStatus('current')
if mibBuilder.loadTexts: catsCidExtAISXmtCnts.setDescription('This object contains the count of external AIS AAL2 Type3 packets transmitted in this 15 minute interval. ')
catsCidExtRAIXmtCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 407, 1, 1, 4, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catsCidExtRAIXmtCnts.setStatus('current')
if mibBuilder.loadTexts: catsCidExtRAIXmtCnts.setDescription('This object contains the count of external RAI AAL2 Type3 packets transmitted in this 15 minute interval. ')
catsMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 407, 2))
catsMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 407, 2, 1))
catsMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 407, 2, 2))
ciscoAtmPvcStatMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 407, 2, 2, 1)).setObjects(("CISCO-ATM-TRUNK-STAT-MIB", "catsPvcStatGroup"), ("CISCO-ATM-TRUNK-STAT-MIB", "catsAal2PvcStatGroup"), ("CISCO-ATM-TRUNK-STAT-MIB", "catsAal5PvcStatGroup"), ("CISCO-ATM-TRUNK-STAT-MIB", "catsCidHistoryStatGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoAtmPvcStatMIBCompliance = ciscoAtmPvcStatMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoAtmPvcStatMIBCompliance.setDescription('Compliance statement for CISCO-ATM-TRUNK-STAT-MIB.')
ciscoAtmPvcStatMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 407, 2, 2, 2)).setObjects(("CISCO-ATM-TRUNK-STAT-MIB", "catsPvcStatGroupRev1"), ("CISCO-ATM-TRUNK-STAT-MIB", "catsAal2PvcStatGroup"), ("CISCO-ATM-TRUNK-STAT-MIB", "catsAal5PvcStatGroup"), ("CISCO-ATM-TRUNK-STAT-MIB", "catsCidHistoryStatGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoAtmPvcStatMIBComplianceRev1 = ciscoAtmPvcStatMIBComplianceRev1.setStatus('current')
if mibBuilder.loadTexts: ciscoAtmPvcStatMIBComplianceRev1.setDescription('Compliance statement for CISCO-ATM-TRUNK-STAT-MIB.')
catsPvcStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 407, 2, 1, 1)).setObjects(("CISCO-ATM-TRUNK-STAT-MIB", "catsPvcValidFlag"), ("CISCO-ATM-TRUNK-STAT-MIB", "catsPvcDiscontinuityTime"), ("CISCO-ATM-TRUNK-STAT-MIB", "catsPvcAtmXmtCells"), ("CISCO-ATM-TRUNK-STAT-MIB", "catsPvcAtmRcvCells"), ("CISCO-ATM-TRUNK-STAT-MIB", "catsPvcAvgAtmXmtCells"), ("CISCO-ATM-TRUNK-STAT-MIB", "catsPvcAvgAtmRcvCells"), ("CISCO-ATM-TRUNK-STAT-MIB", "catsPvcPeakAtmXmtCells"), ("CISCO-ATM-TRUNK-STAT-MIB", "catsPvcPeakAtmRcvCells"), ("CISCO-ATM-TRUNK-STAT-MIB", "catsPvcOamXmtEndLpbkCells"), ("CISCO-ATM-TRUNK-STAT-MIB", "catsPvcOamRcvEndLpbkCells"), ("CISCO-ATM-TRUNK-STAT-MIB", "catsPvcOamXmtSegLpbkCells"), ("CISCO-ATM-TRUNK-STAT-MIB", "catsPvcOamRcvSegLpbkCells"), ("CISCO-ATM-TRUNK-STAT-MIB", "catsPvcOamLpbkLostCells"), ("CISCO-ATM-TRUNK-STAT-MIB", "catsPvcDiscardedRcvOamCells"), ("CISCO-ATM-TRUNK-STAT-MIB", "catsPvcAisSuppressCnts"), ("CISCO-ATM-TRUNK-STAT-MIB", "catsPvcXmtAisCnts"), ("CISCO-ATM-TRUNK-STAT-MIB", "catsPvcRcvAisCnts"), ("CISCO-ATM-TRUNK-STAT-MIB", "catsPvcXmtFerfCnts"), ("CISCO-ATM-TRUNK-STAT-MIB", "catsPvcRcvFerfCnts"), ("CISCO-ATM-TRUNK-STAT-MIB", "catsPvcXmtAisCells"), ("CISCO-ATM-TRUNK-STAT-MIB", "catsPvcRcvAisCells"), ("CISCO-ATM-TRUNK-STAT-MIB", "catsPvcXmtFerfCells"), ("CISCO-ATM-TRUNK-STAT-MIB", "catsPvcRcvFerfCells"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    catsPvcStatGroup = catsPvcStatGroup.setStatus('deprecated')
if mibBuilder.loadTexts: catsPvcStatGroup.setDescription('A collection of objects used for maintaining history statistics per PVC. ')
catsAal2PvcStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 407, 2, 1, 2)).setObjects(("CISCO-ATM-TRUNK-STAT-MIB", "catsAal2PvcValidFlag"), ("CISCO-ATM-TRUNK-STAT-MIB", "catsAal2PvcDiscontinuityTime"), ("CISCO-ATM-TRUNK-STAT-MIB", "catsAal2PvcCpsSentPkts"), ("CISCO-ATM-TRUNK-STAT-MIB", "catsAal2PvcCpsRcvdPkts"), ("CISCO-ATM-TRUNK-STAT-MIB", "catsAal2PvcHecErrors"), ("CISCO-ATM-TRUNK-STAT-MIB", "catsAal2PvcCrcErrors"), ("CISCO-ATM-TRUNK-STAT-MIB", "catsAal2PvcInvOsfCells"), ("CISCO-ATM-TRUNK-STAT-MIB", "catsAal2PvcInvParCells"), ("CISCO-ATM-TRUNK-STAT-MIB", "catsAal2PvcCpsInvCidPkts"), ("CISCO-ATM-TRUNK-STAT-MIB", "catsAal2PvcCpsInvUuiPkts"), ("CISCO-ATM-TRUNK-STAT-MIB", "catsAal2PvcCpsInvLenPkts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    catsAal2PvcStatGroup = catsAal2PvcStatGroup.setStatus('current')
if mibBuilder.loadTexts: catsAal2PvcStatGroup.setDescription('A collection of objects used for maintaining history statistics per AAL2 PVC. ')
catsAal5PvcStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 407, 2, 1, 3)).setObjects(("CISCO-ATM-TRUNK-STAT-MIB", "catsAal5PvcValidFlag"), ("CISCO-ATM-TRUNK-STAT-MIB", "catsAal5PvcDiscontinuityTime"), ("CISCO-ATM-TRUNK-STAT-MIB", "catsAal5PvcPduSentPkts"), ("CISCO-ATM-TRUNK-STAT-MIB", "catsAal5PvcPduRcvdPkts"), ("CISCO-ATM-TRUNK-STAT-MIB", "catsAal5PvcInvCpiPdus"), ("CISCO-ATM-TRUNK-STAT-MIB", "catsAal5PvcOverSizedSDUs"), ("CISCO-ATM-TRUNK-STAT-MIB", "catsAal5PvcInvLenPdus"), ("CISCO-ATM-TRUNK-STAT-MIB", "catsAal5PvcCrc32ErrorPdus"), ("CISCO-ATM-TRUNK-STAT-MIB", "catsAal5PvcReassemTimerExpiryPdus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    catsAal5PvcStatGroup = catsAal5PvcStatGroup.setStatus('current')
if mibBuilder.loadTexts: catsAal5PvcStatGroup.setDescription('A collection of objects used for maintaining history statistics per AAL5 PVC. ')
catsCidHistoryStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 407, 2, 1, 4)).setObjects(("CISCO-ATM-TRUNK-STAT-MIB", "catsCidValidFlag"), ("CISCO-ATM-TRUNK-STAT-MIB", "catsCidDiscontinuityTime"), ("CISCO-ATM-TRUNK-STAT-MIB", "catsCidAvgSentPkts"), ("CISCO-ATM-TRUNK-STAT-MIB", "catsCidAvgRcvdPkts"), ("CISCO-ATM-TRUNK-STAT-MIB", "catsCidSentPkts"), ("CISCO-ATM-TRUNK-STAT-MIB", "catsCidRcvdPkts"), ("CISCO-ATM-TRUNK-STAT-MIB", "catsCidSentOctets"), ("CISCO-ATM-TRUNK-STAT-MIB", "catsCidRcvdOctets"), ("CISCO-ATM-TRUNK-STAT-MIB", "catsCidSentPeakPkts"), ("CISCO-ATM-TRUNK-STAT-MIB", "catsCidRcvdPeakPkts"), ("CISCO-ATM-TRUNK-STAT-MIB", "catsCidExtAISRcvdPkts"), ("CISCO-ATM-TRUNK-STAT-MIB", "catsCidExtRAIRcvdPkts"), ("CISCO-ATM-TRUNK-STAT-MIB", "catsCidExtConnAISRcvdPkts"), ("CISCO-ATM-TRUNK-STAT-MIB", "catsCidExtConnRDIRcvdPkts"), ("CISCO-ATM-TRUNK-STAT-MIB", "catsCidExtAISRcvCnts"), ("CISCO-ATM-TRUNK-STAT-MIB", "catsCidExtRAIRcvCnts"), ("CISCO-ATM-TRUNK-STAT-MIB", "catsCidExtConnAISCnts"), ("CISCO-ATM-TRUNK-STAT-MIB", "catsCidExtConnRDICnts"), ("CISCO-ATM-TRUNK-STAT-MIB", "catsCidExtAISXmtCnts"), ("CISCO-ATM-TRUNK-STAT-MIB", "catsCidExtRAIXmtCnts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    catsCidHistoryStatGroup = catsCidHistoryStatGroup.setStatus('current')
if mibBuilder.loadTexts: catsCidHistoryStatGroup.setDescription('A collection of objects used for maintaining history statistics per CID. ')
catsPvcStatGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 407, 2, 1, 5)).setObjects(("CISCO-ATM-TRUNK-STAT-MIB", "catsPvcValidFlag"), ("CISCO-ATM-TRUNK-STAT-MIB", "catsPvcDiscontinuityTime"), ("CISCO-ATM-TRUNK-STAT-MIB", "catsPvcAtmXmtCells"), ("CISCO-ATM-TRUNK-STAT-MIB", "catsPvcAtmRcvCells"), ("CISCO-ATM-TRUNK-STAT-MIB", "catsPvcAvgAtmXmtCells"), ("CISCO-ATM-TRUNK-STAT-MIB", "catsPvcAvgAtmRcvCells"), ("CISCO-ATM-TRUNK-STAT-MIB", "catsPvcPeakAtmXmtCells"), ("CISCO-ATM-TRUNK-STAT-MIB", "catsPvcPeakAtmRcvCells"), ("CISCO-ATM-TRUNK-STAT-MIB", "catsPvcOamXmtEndLpbkCells"), ("CISCO-ATM-TRUNK-STAT-MIB", "catsPvcOamRcvEndLpbkCells"), ("CISCO-ATM-TRUNK-STAT-MIB", "catsPvcOamXmtSegLpbkCells"), ("CISCO-ATM-TRUNK-STAT-MIB", "catsPvcOamRcvSegLpbkCells"), ("CISCO-ATM-TRUNK-STAT-MIB", "catsPvcOamLpbkLostCells"), ("CISCO-ATM-TRUNK-STAT-MIB", "catsPvcDiscardedRcvOamCells"), ("CISCO-ATM-TRUNK-STAT-MIB", "catsPvcAisSuppressCnts"), ("CISCO-ATM-TRUNK-STAT-MIB", "catsPvcXmtAisCnts"), ("CISCO-ATM-TRUNK-STAT-MIB", "catsPvcRcvAisCnts"), ("CISCO-ATM-TRUNK-STAT-MIB", "catsPvcXmtFerfCnts"), ("CISCO-ATM-TRUNK-STAT-MIB", "catsPvcRcvFerfCnts"), ("CISCO-ATM-TRUNK-STAT-MIB", "catsPvcXmtAisCells"), ("CISCO-ATM-TRUNK-STAT-MIB", "catsPvcRcvAisCells"), ("CISCO-ATM-TRUNK-STAT-MIB", "catsPvcXmtFerfCells"), ("CISCO-ATM-TRUNK-STAT-MIB", "catsPvcRcvFerfCells"), ("CISCO-ATM-TRUNK-STAT-MIB", "catsPvcOamLpbkTimeoutCnts"), ("CISCO-ATM-TRUNK-STAT-MIB", "catsPvcNewOamLpbkTimeoutDur"), ("CISCO-ATM-TRUNK-STAT-MIB", "catsPvcActiveOamLpbkTimeoutDur"), ("CISCO-ATM-TRUNK-STAT-MIB", "catsPvcOamLpbkTimeoutThreshold"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    catsPvcStatGroupRev1 = catsPvcStatGroupRev1.setStatus('current')
if mibBuilder.loadTexts: catsPvcStatGroupRev1.setDescription('A collection of objects used for maintaining history statistics per PVC. ')
mibBuilder.exportSymbols("CISCO-ATM-TRUNK-STAT-MIB", catsCidHistoryEntry=catsCidHistoryEntry, ciscoAtmPvcStatMIBComplianceRev1=ciscoAtmPvcStatMIBComplianceRev1, catsAal2PvcCpsInvUuiPkts=catsAal2PvcCpsInvUuiPkts, catsPvcAtmRcvCells=catsPvcAtmRcvCells, catsAal5PvcIntervalIndex=catsAal5PvcIntervalIndex, catsPvcXmtFerfCells=catsPvcXmtFerfCells, catsCidDiscontinuityTime=catsCidDiscontinuityTime, catsAal5PvcReassemTimerExpiryPdus=catsAal5PvcReassemTimerExpiryPdus, catsPvcHistoryEntry=catsPvcHistoryEntry, ciscoAtmTrunkStatObjects=ciscoAtmTrunkStatObjects, catsMIBGroups=catsMIBGroups, catsAal2PvcVpi=catsAal2PvcVpi, catsAal2PvcCpsRcvdPkts=catsAal2PvcCpsRcvdPkts, catsMIBConformance=catsMIBConformance, catsPvcOamXmtEndLpbkCells=catsPvcOamXmtEndLpbkCells, catsAal5PvcValidFlag=catsAal5PvcValidFlag, catsPvcRcvAisCells=catsPvcRcvAisCells, catsAal2PvcValidFlag=catsAal2PvcValidFlag, catsStatistics=catsStatistics, catsAal2PvcHecErrors=catsAal2PvcHecErrors, catsAal5PvcOverSizedSDUs=catsAal5PvcOverSizedSDUs, catsPvcVci=catsPvcVci, catsCidExtRAIXmtCnts=catsCidExtRAIXmtCnts, catsPvcOamRcvSegLpbkCells=catsPvcOamRcvSegLpbkCells, catsPvcDiscontinuityTime=catsPvcDiscontinuityTime, catsCidExtConnRDICnts=catsCidExtConnRDICnts, catsPvcIntervalIndex=catsPvcIntervalIndex, catsCidVpi=catsCidVpi, catsPvcRcvFerfCnts=catsPvcRcvFerfCnts, catsPvcAtmXmtCells=catsPvcAtmXmtCells, catsCidSentPkts=catsCidSentPkts, catsAal2PvcCpsSentPkts=catsAal2PvcCpsSentPkts, catsPvcOamLpbkTimeoutCnts=catsPvcOamLpbkTimeoutCnts, catsPvcAisSuppressCnts=catsPvcAisSuppressCnts, catsAal5PvcPduRcvdPkts=catsAal5PvcPduRcvdPkts, catsAal5PvcInvLenPdus=catsAal5PvcInvLenPdus, catsAal2PvcInvParCells=catsAal2PvcInvParCells, catsPvcStatGroupRev1=catsPvcStatGroupRev1, catsAal2PvcDiscontinuityTime=catsAal2PvcDiscontinuityTime, catsAal5PvcPduSentPkts=catsAal5PvcPduSentPkts, catsPvcOamRcvEndLpbkCells=catsPvcOamRcvEndLpbkCells, ciscoAtmTrunkStatMIB=ciscoAtmTrunkStatMIB, catsCidHistoryStatGroup=catsCidHistoryStatGroup, catsPvcAvgAtmXmtCells=catsPvcAvgAtmXmtCells, catsAal2PvcIntervalIndex=catsAal2PvcIntervalIndex, catsCidExtRAIRcvdPkts=catsCidExtRAIRcvdPkts, catsCidHistoryTable=catsCidHistoryTable, catsAal2PvcStatGroup=catsAal2PvcStatGroup, catsAal2PvcCpsInvCidPkts=catsAal2PvcCpsInvCidPkts, catsCidSentPeakPkts=catsCidSentPeakPkts, catsCidAvgSentPkts=catsCidAvgSentPkts, catsPvcValidFlag=catsPvcValidFlag, catsAal5PvcDiscontinuityTime=catsAal5PvcDiscontinuityTime, catsPvcActiveOamLpbkTimeoutDur=catsPvcActiveOamLpbkTimeoutDur, catsCidExtConnAISCnts=catsCidExtConnAISCnts, catsAal5PvcHistoryEntry=catsAal5PvcHistoryEntry, catsAal2PvcCrcErrors=catsAal2PvcCrcErrors, catsCidExtRAIRcvCnts=catsCidExtRAIRcvCnts, catsCidRcvdOctets=catsCidRcvdOctets, catsPvcNewOamLpbkTimeoutDur=catsPvcNewOamLpbkTimeoutDur, catsAal2PvcHistoryEntry=catsAal2PvcHistoryEntry, catsPvcOamLpbkLostCells=catsPvcOamLpbkLostCells, catsCidVci=catsCidVci, catsCidIntervalIndex=catsCidIntervalIndex, catsCidSentOctets=catsCidSentOctets, PYSNMP_MODULE_ID=ciscoAtmTrunkStatMIB, catsPvcXmtAisCnts=catsPvcXmtAisCnts, catsAal5PvcVpi=catsAal5PvcVpi, catsCid=catsCid, catsPvcRcvAisCnts=catsPvcRcvAisCnts, catsAal2PvcHistoryTable=catsAal2PvcHistoryTable, catsPvcPeakAtmRcvCells=catsPvcPeakAtmRcvCells, catsAal2PvcCpsInvLenPkts=catsAal2PvcCpsInvLenPkts, catsAal5PvcInvCpiPdus=catsAal5PvcInvCpiPdus, catsPvcHistoryTable=catsPvcHistoryTable, catsPvcRcvFerfCells=catsPvcRcvFerfCells, catsAal5PvcCrc32ErrorPdus=catsAal5PvcCrc32ErrorPdus, catsCidAvgRcvdPkts=catsCidAvgRcvdPkts, catsAal5PvcStatGroup=catsAal5PvcStatGroup, catsPvcXmtFerfCnts=catsPvcXmtFerfCnts, catsPvcPeakAtmXmtCells=catsPvcPeakAtmXmtCells, catsAal2PvcInvOsfCells=catsAal2PvcInvOsfCells, catsPvcXmtAisCells=catsPvcXmtAisCells, catsMIBCompliances=catsMIBCompliances, catsPvcOamLpbkTimeoutThreshold=catsPvcOamLpbkTimeoutThreshold, catsPvcAvgAtmRcvCells=catsPvcAvgAtmRcvCells, catsCidExtConnRDIRcvdPkts=catsCidExtConnRDIRcvdPkts, catsPvcVpi=catsPvcVpi, catsCidValidFlag=catsCidValidFlag, catsCidExtAISRcvCnts=catsCidExtAISRcvCnts, catsCidExtAISXmtCnts=catsCidExtAISXmtCnts, catsPvcOamXmtSegLpbkCells=catsPvcOamXmtSegLpbkCells, catsCidRcvdPeakPkts=catsCidRcvdPeakPkts, catsAal5PvcVci=catsAal5PvcVci, catsCidRcvdPkts=catsCidRcvdPkts, catsAal5PvcHistoryTable=catsAal5PvcHistoryTable, catsAal2PvcVci=catsAal2PvcVci, catsCidExtConnAISRcvdPkts=catsCidExtConnAISRcvdPkts, ciscoAtmPvcStatMIBCompliance=ciscoAtmPvcStatMIBCompliance, ciscoAtmTrunkStatNotifs=ciscoAtmTrunkStatNotifs, catsPvcStatGroup=catsPvcStatGroup, catsPvcDiscardedRcvOamCells=catsPvcDiscardedRcvOamCells, catsCidExtAISRcvdPkts=catsCidExtAISRcvdPkts)
