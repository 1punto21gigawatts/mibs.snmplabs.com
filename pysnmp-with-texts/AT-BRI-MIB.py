#
# PySNMP MIB module AT-BRI-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/AT-BRI-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:29:38 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint")
modules, DisplayStringUnsized = mibBuilder.importSymbols("AT-SMI-MIB", "modules", "DisplayStringUnsized")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Unsigned32, MibIdentifier, TimeTicks, Gauge32, iso, Counter64, Bits, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Integer32, IpAddress, ObjectIdentity, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "MibIdentifier", "TimeTicks", "Gauge32", "iso", "Counter64", "Bits", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Integer32", "IpAddress", "ObjectIdentity", "Counter32")
TextualConvention, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "DisplayString")
bri = ModuleIdentity((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 41))
bri.setRevisions(('2006-06-28 12:22',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: bri.setRevisionsDescriptions(('Initial Revision',))
if mibBuilder.loadTexts: bri.setLastUpdated('200606281222Z')
if mibBuilder.loadTexts: bri.setOrganization('Allied Telesis, Inc')
if mibBuilder.loadTexts: bri.setContactInfo('http://www.alliedtelesis.com')
if mibBuilder.loadTexts: bri.setDescription('This MIB file contains definitions of managed objects for the BRI module. ')
briIntTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 41, 1), )
if mibBuilder.loadTexts: briIntTable.setStatus('current')
if mibBuilder.loadTexts: briIntTable.setDescription('The table of BRI interfaces.')
briIntEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 41, 1, 1), ).setIndexNames((0, "AT-BRI-MIB", "briIntIndex"))
if mibBuilder.loadTexts: briIntEntry.setStatus('current')
if mibBuilder.loadTexts: briIntEntry.setDescription('A single entry in the BRI interfaces table.')
briIntIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 41, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: briIntIndex.setStatus('current')
if mibBuilder.loadTexts: briIntIndex.setDescription('The ifIndex of the BRI interface.')
briIntBoardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 41, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: briIntBoardIndex.setStatus('current')
if mibBuilder.loadTexts: briIntBoardIndex.setDescription('The index in the arBoardTable of the board on which this BRI interface resides.')
briIntBoardPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 41, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: briIntBoardPosition.setStatus('current')
if mibBuilder.loadTexts: briIntBoardPosition.setDescription("The position on this BRI interface's board of this BRI interface.")
briIntMode = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 41, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("isdn", 1), ("tdm", 2), ("mixed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: briIntMode.setStatus('current')
if mibBuilder.loadTexts: briIntMode.setDescription('The mode of operation of this BRI interface. The value isdn means that the entire interface is operating as an ISDN interface, the value tdm means that the entire interface is operating as TDM groups and the value mixed means that some channels in the interface are dedicated to ISDN and some to TDM groups.')
briIntTdmChannelMap = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 41, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: briIntTdmChannelMap.setStatus('current')
if mibBuilder.loadTexts: briIntTdmChannelMap.setDescription('A bit map of the channels in the BRI interface which are dedicated to TDM. Channel B1 has channel map value of 1, channel B2 has a channel map value of 2.')
briIntIsdnChannelMap = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 41, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: briIntIsdnChannelMap.setStatus('current')
if mibBuilder.loadTexts: briIntIsdnChannelMap.setDescription('A bit map of the channels in the BRI interface which are dedicated to ISDN. Channel B1 has channel map value of 1, channel B2 has a channel map value of 2.')
briChanTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 41, 2), )
if mibBuilder.loadTexts: briChanTable.setStatus('current')
if mibBuilder.loadTexts: briChanTable.setDescription('The table of channels on BRI interfaces.')
briChanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 41, 2, 1), ).setIndexNames((0, "AT-BRI-MIB", "briChanIntIndex"), (0, "AT-BRI-MIB", "briChanChannelIndex"))
if mibBuilder.loadTexts: briChanEntry.setStatus('current')
if mibBuilder.loadTexts: briChanEntry.setDescription('A single entry in the BRI channels table.')
briChanIntIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 41, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: briChanIntIndex.setStatus('current')
if mibBuilder.loadTexts: briChanIntIndex.setDescription('The ifIndex of the BRI interface.')
briChanChannelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 41, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: briChanChannelIndex.setStatus('current')
if mibBuilder.loadTexts: briChanChannelIndex.setDescription('The channel index of the BRI channel. Channel B1 has index 1, channel B2 has index 2 and the D channel has index 3.')
briChanMode = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 41, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("isdn", 1), ("tdm", 2), ("none", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: briChanMode.setStatus('current')
if mibBuilder.loadTexts: briChanMode.setDescription('The mode of this BRI channel. The value isdn means that the channel is reserved for use in ISDN calls. The value tdm means that the channel is reserved for use by TDM. For the D channel, this object will always have the value isdn.')
briChanState = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 41, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: briChanState.setStatus('current')
if mibBuilder.loadTexts: briChanState.setDescription('The state of this BRI channel. The value inactive means that the channel does not currently have an active user, either an ISDN call or an active TDM group. The value active means that the channel is in use, either by an ISDN call or an active TDM group. For the D channel, this object will have the value active if LAPD is using the D channel (either for call control or X.25), or the value inactive otherwise.')
mibBuilder.exportSymbols("AT-BRI-MIB", briChanChannelIndex=briChanChannelIndex, briIntBoardIndex=briIntBoardIndex, bri=bri, briChanTable=briChanTable, briChanMode=briChanMode, PYSNMP_MODULE_ID=bri, briIntIndex=briIntIndex, briIntTable=briIntTable, briChanState=briChanState, briIntTdmChannelMap=briIntTdmChannelMap, briIntEntry=briIntEntry, briIntIsdnChannelMap=briIntIsdnChannelMap, briChanEntry=briChanEntry, briIntMode=briIntMode, briIntBoardPosition=briIntBoardPosition, briChanIntIndex=briChanIntIndex)
