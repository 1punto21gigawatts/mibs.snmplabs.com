#
# PySNMP MIB module CADANT-CMTS-TOPO-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CADANT-CMTS-TOPO-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:45:44 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion")
cadIfMacDomainIfIndex, = mibBuilder.importSymbols("CADANT-CMTS-LAYER2CMTS-MIB", "cadIfMacDomainIfIndex")
cadTopology, = mibBuilder.importSymbols("CADANT-PRODUCTS-MIB", "cadTopology")
PrimaryState, = mibBuilder.importSymbols("CADANT-TC", "PrimaryState")
clabTopoFiberNodeCfgNodeName, clabTopoFiberNodeCfgEntry = mibBuilder.importSymbols("CLAB-TOPO-MIB", "clabTopoFiberNodeCfgNodeName", "clabTopoFiberNodeCfgEntry")
docsIf3MdNodeStatusEntry, docsIf3UsChSetEntry, IfDirection, docsIf3DsChSetEntry, ChSetId = mibBuilder.importSymbols("DOCS-IF3-MIB", "docsIf3MdNodeStatusEntry", "docsIf3UsChSetEntry", "IfDirection", "docsIf3DsChSetEntry", "ChSetId")
InterfaceIndex, InterfaceIndexOrZero = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "InterfaceIndexOrZero")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Gauge32, ModuleIdentity, MibIdentifier, Counter32, ObjectIdentity, NotificationType, Integer32, Bits, IpAddress, iso, Counter64, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "ModuleIdentity", "MibIdentifier", "Counter32", "ObjectIdentity", "NotificationType", "Integer32", "Bits", "IpAddress", "iso", "Counter64", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32")
RowStatus, DisplayString, TimeInterval, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "TimeInterval", "TextualConvention", "TruthValue")
cadTopologyMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 4998, 1, 1, 105, 1))
cadTopologyMib.setRevisions(('2014-02-24 00:00', '2008-08-14 00:00', '2008-04-09 00:00', '2007-06-04 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: cadTopologyMib.setRevisionsDescriptions(('Additional statistics on fiber-nodes.', 'Rename cadMdNodeStatusTable to cadFiberNodeStatusTable.', 'Remove cadDsChSetRelationshipTable and cadUsChSetRelationshipTable.', ' Initial version. ',))
if mibBuilder.loadTexts: cadTopologyMib.setLastUpdated('201402240000Z')
if mibBuilder.loadTexts: cadTopologyMib.setOrganization('Arris International, Inc.')
if mibBuilder.loadTexts: cadTopologyMib.setContactInfo('Arris Technical Support Postal: ARRIS E-Mail: support@arrisi.com')
if mibBuilder.loadTexts: cadTopologyMib.setDescription(' This MIB module contains Cadant proprietary topology MIB information. ')
cadTopologyMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4998, 1, 1, 105, 1, 1))
cadFiberNodeStatusTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 105, 1, 1, 1), )
if mibBuilder.loadTexts: cadFiberNodeStatusTable.setStatus('current')
if mibBuilder.loadTexts: cadFiberNodeStatusTable.setDescription('A Table containing information about the Cadant Fiber Node status. ')
cadFiberNodeStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 105, 1, 1, 1, 1), )
clabTopoFiberNodeCfgEntry.registerAugmentions(("CADANT-CMTS-TOPO-MIB", "cadFiberNodeStatusEntry"))
cadFiberNodeStatusEntry.setIndexNames(*clabTopoFiberNodeCfgEntry.getIndexNames())
if mibBuilder.loadTexts: cadFiberNodeStatusEntry.setStatus('current')
if mibBuilder.loadTexts: cadFiberNodeStatusEntry.setDescription('A conceptual row containing information about the Cadant FiberNode status. ')
cadFiberNodeOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 105, 1, 1, 1, 1, 1), PrimaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadFiberNodeOperStatus.setStatus('current')
if mibBuilder.loadTexts: cadFiberNodeOperStatus.setDescription('Cadant Fiber Node operation status.')
cadFiberNodeNumOther = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 105, 1, 1, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadFiberNodeNumOther.setStatus('deprecated')
if mibBuilder.loadTexts: cadFiberNodeNumOther.setDescription('The number of modems on this fiber-node in state other(1)')
cadFiberNodeNumInitRanging = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 105, 1, 1, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadFiberNodeNumInitRanging.setStatus('deprecated')
if mibBuilder.loadTexts: cadFiberNodeNumInitRanging.setDescription('The number of modems on this fiber-node in state initialRanging(2)')
cadFiberNodeNumRangingComplete = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 105, 1, 1, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadFiberNodeNumRangingComplete.setStatus('deprecated')
if mibBuilder.loadTexts: cadFiberNodeNumRangingComplete.setDescription('The number of modems on this fiber-node in state rangingAutoAdjComplete(4)')
cadFiberNodeNumStartEae = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 105, 1, 1, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadFiberNodeNumStartEae.setStatus('deprecated')
if mibBuilder.loadTexts: cadFiberNodeNumStartEae.setDescription('The number of modems on this fiber-node in state startEae(10)')
cadFiberNodeNumStartDhcpv4 = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 105, 1, 1, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadFiberNodeNumStartDhcpv4.setStatus('deprecated')
if mibBuilder.loadTexts: cadFiberNodeNumStartDhcpv4.setDescription('The number of modems on this fiber-node in state startDhcpv4(11)')
cadFiberNodeNumStartDhcpv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 105, 1, 1, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadFiberNodeNumStartDhcpv6.setStatus('deprecated')
if mibBuilder.loadTexts: cadFiberNodeNumStartDhcpv6.setDescription('The number of modems on this fiber-node in state startDhcpv6(12)')
cadFiberNodeNumDhcpv4Complete = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 105, 1, 1, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadFiberNodeNumDhcpv4Complete.setStatus('deprecated')
if mibBuilder.loadTexts: cadFiberNodeNumDhcpv4Complete.setDescription('The number of modems on this fiber-node in state dhcpv4Complete(5)')
cadFiberNodeNumDhcpv6Complete = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 105, 1, 1, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadFiberNodeNumDhcpv6Complete.setStatus('deprecated')
if mibBuilder.loadTexts: cadFiberNodeNumDhcpv6Complete.setDescription('The number of modems on this fiber-node in state dhcpv6Complete(13)')
cadFiberNodeNumStartCfgFileDownload = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 105, 1, 1, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadFiberNodeNumStartCfgFileDownload.setStatus('deprecated')
if mibBuilder.loadTexts: cadFiberNodeNumStartCfgFileDownload.setDescription('The number of modems on this fiber-node in state startConfigFileDownload(14)')
cadFiberNodeNumCfgFileDownloadComplete = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 105, 1, 1, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadFiberNodeNumCfgFileDownloadComplete.setStatus('deprecated')
if mibBuilder.loadTexts: cadFiberNodeNumCfgFileDownloadComplete.setDescription('The number of modems on this fiber-node in state configFileDownloadComplete(15)')
cadFiberNodeNumStartRegistration = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 105, 1, 1, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadFiberNodeNumStartRegistration.setStatus('deprecated')
if mibBuilder.loadTexts: cadFiberNodeNumStartRegistration.setDescription('The number of modems on this fiber-node in state startRegistration(16)')
cadFiberNodeNumRegistrationComplete = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 105, 1, 1, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadFiberNodeNumRegistrationComplete.setStatus('deprecated')
if mibBuilder.loadTexts: cadFiberNodeNumRegistrationComplete.setDescription('The number of modems on this fiber-node in state registrationComplete(6)')
cadFiberNodeNumOperational = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 105, 1, 1, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadFiberNodeNumOperational.setStatus('deprecated')
if mibBuilder.loadTexts: cadFiberNodeNumOperational.setDescription('The number of modems on this fiber-node in state operational(8)')
cadFiberNodeNumBpiInit = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 105, 1, 1, 1, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadFiberNodeNumBpiInit.setStatus('deprecated')
if mibBuilder.loadTexts: cadFiberNodeNumBpiInit.setDescription('The number of modems on this fiber-node in state bpiInit(9)')
cadFiberNodeNumForwardingDisabled = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 105, 1, 1, 1, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadFiberNodeNumForwardingDisabled.setStatus('deprecated')
if mibBuilder.loadTexts: cadFiberNodeNumForwardingDisabled.setDescription('The number of modems on this fiber-node in state forwardingDisabled(17)')
cadFiberNodeNumRfMuteAll = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 105, 1, 1, 1, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadFiberNodeNumRfMuteAll.setStatus('deprecated')
if mibBuilder.loadTexts: cadFiberNodeNumRfMuteAll.setDescription('The number of modems on this fiber-node in state rfMuteAll(18)')
cadFiberNodeNumTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 105, 1, 1, 1, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadFiberNodeNumTotal.setStatus('deprecated')
if mibBuilder.loadTexts: cadFiberNodeNumTotal.setDescription('The total count of cable modems on this fiber-node')
cadFiberNodeNumRangingAborted = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 105, 1, 1, 1, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadFiberNodeNumRangingAborted.setStatus('deprecated')
if mibBuilder.loadTexts: cadFiberNodeNumRangingAborted.setDescription('The number of modems on this fiber-node in state rangingAborted(3)')
cadFiberNodeNumRangFlaps = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 105, 1, 1, 1, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadFiberNodeNumRangFlaps.setStatus('deprecated')
if mibBuilder.loadTexts: cadFiberNodeNumRangFlaps.setDescription('The number of times a CM on this fiber-node fiber-node has reset in Ranging states.')
cadFiberNodeNumProvFlaps = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 105, 1, 1, 1, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadFiberNodeNumProvFlaps.setStatus('deprecated')
if mibBuilder.loadTexts: cadFiberNodeNumProvFlaps.setDescription('The number of times a CM on this fiber-node has reset in Provisioning states.')
cadFiberNodeNumRegFlaps = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 105, 1, 1, 1, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadFiberNodeNumRegFlaps.setStatus('deprecated')
if mibBuilder.loadTexts: cadFiberNodeNumRegFlaps.setDescription('The number of times a CM on this fiber-node has reset in Registered state.')
cadChlFnTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 105, 1, 1, 2), )
if mibBuilder.loadTexts: cadChlFnTable.setStatus('current')
if mibBuilder.loadTexts: cadChlFnTable.setDescription('A Table containing information about the Cadant Topology fiber node channel. ')
cadChlFnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 105, 1, 1, 2, 1), ).setIndexNames((0, "CADANT-CMTS-LAYER2CMTS-MIB", "cadIfMacDomainIfIndex"), (0, "CLAB-TOPO-MIB", "clabTopoFiberNodeCfgNodeName"), (0, "CADANT-CMTS-TOPO-MIB", "cadChlIfIndex"))
if mibBuilder.loadTexts: cadChlFnEntry.setStatus('current')
if mibBuilder.loadTexts: cadChlFnEntry.setDescription('A conceptual row containing information about the Cadant fiber node channel. ')
cadChlIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 105, 1, 1, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: cadChlIfIndex.setStatus('current')
if mibBuilder.loadTexts: cadChlIfIndex.setDescription('Fiber node channel interface index.')
cadChlFnIfDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 105, 1, 1, 2, 1, 2), IfDirection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadChlFnIfDirection.setStatus('current')
if mibBuilder.loadTexts: cadChlFnIfDirection.setDescription('Fiber node channel direction.')
cadChlFnMdUsOrDsSgId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 105, 1, 1, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadChlFnMdUsOrDsSgId.setStatus('current')
if mibBuilder.loadTexts: cadChlFnMdUsOrDsSgId.setDescription('MD-US-SG ID or MD-DS-SG ID in this fiber node.')
cadChlFnUsOrDsPhysChlIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 105, 1, 1, 2, 1, 4), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadChlFnUsOrDsPhysChlIfIndex.setStatus('current')
if mibBuilder.loadTexts: cadChlFnUsOrDsPhysChlIfIndex.setDescription('Interface index of an physical upstream or downstream channel.')
cadChlFnChlId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 105, 1, 1, 2, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadChlFnChlId.setStatus('current')
if mibBuilder.loadTexts: cadChlFnChlId.setDescription('Fiber node channel id. This value comes from cadMacChlChannelId of cadMacChlTable.')
mibBuilder.exportSymbols("CADANT-CMTS-TOPO-MIB", cadFiberNodeNumStartDhcpv6=cadFiberNodeNumStartDhcpv6, cadFiberNodeNumInitRanging=cadFiberNodeNumInitRanging, cadTopologyMib=cadTopologyMib, cadChlFnTable=cadChlFnTable, cadFiberNodeNumOperational=cadFiberNodeNumOperational, PYSNMP_MODULE_ID=cadTopologyMib, cadFiberNodeNumStartEae=cadFiberNodeNumStartEae, cadFiberNodeNumStartDhcpv4=cadFiberNodeNumStartDhcpv4, cadFiberNodeNumRangFlaps=cadFiberNodeNumRangFlaps, cadFiberNodeNumBpiInit=cadFiberNodeNumBpiInit, cadFiberNodeNumForwardingDisabled=cadFiberNodeNumForwardingDisabled, cadFiberNodeStatusTable=cadFiberNodeStatusTable, cadTopologyMibObjects=cadTopologyMibObjects, cadFiberNodeNumStartCfgFileDownload=cadFiberNodeNumStartCfgFileDownload, cadChlFnIfDirection=cadChlFnIfDirection, cadChlFnEntry=cadChlFnEntry, cadFiberNodeNumRangingAborted=cadFiberNodeNumRangingAborted, cadFiberNodeNumStartRegistration=cadFiberNodeNumStartRegistration, cadFiberNodeNumRegistrationComplete=cadFiberNodeNumRegistrationComplete, cadChlFnChlId=cadChlFnChlId, cadFiberNodeNumTotal=cadFiberNodeNumTotal, cadFiberNodeNumDhcpv4Complete=cadFiberNodeNumDhcpv4Complete, cadFiberNodeOperStatus=cadFiberNodeOperStatus, cadFiberNodeNumDhcpv6Complete=cadFiberNodeNumDhcpv6Complete, cadFiberNodeNumRegFlaps=cadFiberNodeNumRegFlaps, cadFiberNodeStatusEntry=cadFiberNodeStatusEntry, cadFiberNodeNumRangingComplete=cadFiberNodeNumRangingComplete, cadChlIfIndex=cadChlIfIndex, cadFiberNodeNumProvFlaps=cadFiberNodeNumProvFlaps, cadChlFnMdUsOrDsSgId=cadChlFnMdUsOrDsSgId, cadFiberNodeNumCfgFileDownloadComplete=cadFiberNodeNumCfgFileDownloadComplete, cadChlFnUsOrDsPhysChlIfIndex=cadChlFnUsOrDsPhysChlIfIndex, cadFiberNodeNumOther=cadFiberNodeNumOther, cadFiberNodeNumRfMuteAll=cadFiberNodeNumRfMuteAll)
