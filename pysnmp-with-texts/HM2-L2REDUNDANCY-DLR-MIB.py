#
# PySNMP MIB module HM2-L2REDUNDANCY-DLR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HM2-L2REDUNDANCY-DLR-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:31:34 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion")
hm2L2RedundancyMibObjects, = mibBuilder.importSymbols("HM2-L2REDUNDANCY-MIB", "hm2L2RedundancyMibObjects")
HmEnabledStatus, = mibBuilder.importSymbols("HM2-TC-MIB", "HmEnabledStatus")
InterfaceIndexOrZero, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Unsigned32, NotificationType, Gauge32, Bits, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, MibIdentifier, ObjectIdentity, IpAddress, Counter32, ModuleIdentity, TimeTicks, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "NotificationType", "Gauge32", "Bits", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "MibIdentifier", "ObjectIdentity", "IpAddress", "Counter32", "ModuleIdentity", "TimeTicks", "Integer32")
MacAddress, DisplayString, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "DisplayString", "RowStatus", "TextualConvention")
hm2DlrMibGroup = ModuleIdentity((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5))
hm2DlrMibGroup.setRevisions(('2014-11-07 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hm2DlrMibGroup.setRevisionsDescriptions(('Initial version.',))
if mibBuilder.loadTexts: hm2DlrMibGroup.setLastUpdated('201411070000Z')
if mibBuilder.loadTexts: hm2DlrMibGroup.setOrganization('Hirschmann Automation and Control GmbH')
if mibBuilder.loadTexts: hm2DlrMibGroup.setContactInfo('Postal: Stuttgarter Str. 45-51 72654 Neckartenzlingen Germany Phone: +49 7127 140 E-mail: hac.support@belden.com')
if mibBuilder.loadTexts: hm2DlrMibGroup.setDescription('Hirschmann Layer 2 Redundancy DLR MIB. Copyright (C) 2014. All Rights Reserved.')
hm2DlrMibNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 0))
hm2DlrMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1))
hm2DlrConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 1))
hm2DlrStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 2))
class Hm2DlrNetworkTopologyType(TextualConvention, Integer32):
    description = 'Network topology type.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("linear", 0), ("ring", 1))

class Hm2DlrNetworkStatusType(TextualConvention, Integer32):
    description = 'Network status type.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("normal", 0), ("ringFault", 1), ("loop", 2), ("partial", 3), ("rapidFault", 4))

class Hm2DlrGatewayStatusType(TextualConvention, Integer32):
    description = 'Gateway status type.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("nonGateway", 0), ("backup", 1), ("active", 2), ("uplinkFault", 3), ("unsupported", 4), ("networkFault", 5))

class Hm2DlrRingDeviceStatusType(TextualConvention, Integer32):
    description = 'Ring device status type.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("backup", 0), ("supervisor", 1), ("node", 2), ("nonDlr", 3), ("unsupported", 4))

class Hm2DlrPortStatusType(TextualConvention, Integer32):
    description = 'Operational port status type.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("disabled", 1), ("blocked", 2), ("forwarding", 3), ("notConnected", 4))

class Hm2DlrTimeInterval(TextualConvention, Integer32):
    description = 'A period of time, measured in units of 1 second.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

hm2DlrGlobalAdminState = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 1, 1), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2DlrGlobalAdminState.setStatus('current')
if mibBuilder.loadTexts: hm2DlrGlobalAdminState.setDescription('Enable or disable DLR globally.')
hm2DlrConfigTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 1, 10), )
if mibBuilder.loadTexts: hm2DlrConfigTable.setStatus('current')
if mibBuilder.loadTexts: hm2DlrConfigTable.setDescription('DLR configuration parameters table.')
hm2DlrGatewayConfigTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 1, 11), )
if mibBuilder.loadTexts: hm2DlrGatewayConfigTable.setStatus('current')
if mibBuilder.loadTexts: hm2DlrGatewayConfigTable.setDescription('Gateway settings table.')
hm2DlrStatusTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 2, 1), )
if mibBuilder.loadTexts: hm2DlrStatusTable.setStatus('current')
if mibBuilder.loadTexts: hm2DlrStatusTable.setDescription('DLR runtime status table.')
hm2DlrRingParticipantsTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 2, 2), )
if mibBuilder.loadTexts: hm2DlrRingParticipantsTable.setStatus('current')
if mibBuilder.loadTexts: hm2DlrRingParticipantsTable.setDescription('DLR ring participants table.')
hm2DlrGatewayStatusTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 2, 3), )
if mibBuilder.loadTexts: hm2DlrGatewayStatusTable.setStatus('current')
if mibBuilder.loadTexts: hm2DlrGatewayStatusTable.setDescription('DLR gateway status table.')
hm2DlrConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 1, 10, 1), ).setIndexNames((0, "HM2-L2REDUNDANCY-DLR-MIB", "hm2DlrRingIndex"))
if mibBuilder.loadTexts: hm2DlrConfigEntry.setStatus('current')
if mibBuilder.loadTexts: hm2DlrConfigEntry.setDescription('Entry for DLR configuration parameters.')
hm2DlrRingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 1, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hm2DlrRingIndex.setStatus('current')
if mibBuilder.loadTexts: hm2DlrRingIndex.setDescription('DLR ring index.')
hm2DlrRingName = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 1, 10, 1, 2), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2DlrRingName.setStatus('current')
if mibBuilder.loadTexts: hm2DlrRingName.setDescription('A logical name for the DLR ring to ease the management of DLR rings.')
hm2DlrRingport1IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 1, 10, 1, 3), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2DlrRingport1IfIndex.setStatus('current')
if mibBuilder.loadTexts: hm2DlrRingport1IfIndex.setDescription('Interface index of the ringport 1 in the DLR ring. A non-zero value indicates the ifIndex for the corresponding entry in the ifTable. ')
hm2DlrRingport2IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 1, 10, 1, 4), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2DlrRingport2IfIndex.setStatus('current')
if mibBuilder.loadTexts: hm2DlrRingport2IfIndex.setDescription('Interface index of the ringport 2 in the DLR ring. A non-zero value indicates the ifIndex for the corresponding entry in the ifTable. ')
hm2DlrRingport1OperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 1, 10, 1, 5), Hm2DlrPortStatusType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DlrRingport1OperStatus.setStatus('current')
if mibBuilder.loadTexts: hm2DlrRingport1OperStatus.setDescription('Operational status of ringport 1.')
hm2DlrRingport2OperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 1, 10, 1, 6), Hm2DlrPortStatusType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DlrRingport2OperStatus.setStatus('current')
if mibBuilder.loadTexts: hm2DlrRingport2OperStatus.setDescription('Operational status of ringport 2.')
hm2DlrSupervisorAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 1, 10, 1, 7), HmEnabledStatus().clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2DlrSupervisorAdminState.setStatus('current')
if mibBuilder.loadTexts: hm2DlrSupervisorAdminState.setDescription('Enable or disable the supervisor function. enable(1) indicates the device is configured as a ring supervisor. disable(2) indicates the device is configured as a normal ring node.')
hm2DlrSupervisorPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 1, 10, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2DlrSupervisorPrecedence.setStatus('current')
if mibBuilder.loadTexts: hm2DlrSupervisorPrecedence.setDescription('Precedence of the ring supervisor. Numerically higher value indicates higher precedence.')
hm2DlrBeaconInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 1, 10, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(400, 100000)).clone(400)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2DlrBeaconInterval.setStatus('current')
if mibBuilder.loadTexts: hm2DlrBeaconInterval.setDescription('Beacon interval time in microseconds.')
hm2DlrBeaconTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 1, 10, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(800, 500000)).clone(1960)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2DlrBeaconTimeout.setStatus('current')
if mibBuilder.loadTexts: hm2DlrBeaconTimeout.setDescription('Beacon timeout in microseconds. The Beacon Timeout shall be at least two times the Beacon Interval value.')
hm2DlrVLANID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 1, 10, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4042)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2DlrVLANID.setStatus('current')
if mibBuilder.loadTexts: hm2DlrVLANID.setDescription('VLAN ID to use in the DLR protocol messages.')
hm2DlrService = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 1, 10, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("noService", 0), ("verifyFaultLocation", 1), ("clearRapidFaults", 2), ("restartSignOn", 3), ("clearGatewayPartialFault", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2DlrService.setStatus('current')
if mibBuilder.loadTexts: hm2DlrService.setDescription('DLR specific services. noService(0) will be returned when reading this attribute. verifyFaultLocation(1) causes the supervisor to verify fault location. clearRapidFaults(2) clears the Rapid Fault condition in the supervisor, allowing the supervisor to return to normal operation. restartSignOn(3) restarts the Sign On process and refreshes the participants list. clearGatewayPartialFault(4) clears the partial network fault condition in the gateway, allowing the gateway to return to normal operation. clearGatewayPartialFault(4) is only supported if device is capable of the gateway.')
hm2DlrConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 1, 10, 1, 15), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2DlrConfigRowStatus.setStatus('current')
if mibBuilder.loadTexts: hm2DlrConfigRowStatus.setDescription('Describes the status of a row in the table. Supports creation, deletion and activation of rows. A row must not be active(1) in order to be modified. A row can be taken out of service by setting the value notInService(2).')
hm2DlrStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 2, 1, 1), ).setIndexNames((0, "HM2-L2REDUNDANCY-DLR-MIB", "hm2DlrRingIndex"))
if mibBuilder.loadTexts: hm2DlrStatusEntry.setStatus('current')
if mibBuilder.loadTexts: hm2DlrStatusEntry.setDescription('DLR runtime status entry.')
hm2DlrCapabilityFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 2, 1, 1, 1), Bits().clone(namedValues=NamedValues(("announce", 0), ("beacon", 1), ("supervisor", 5), ("gateway", 6), ("flushTable", 7))).clone(namedValues=NamedValues(("beacon", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DlrCapabilityFlags.setStatus('current')
if mibBuilder.loadTexts: hm2DlrCapabilityFlags.setDescription('DLR device capabilities.')
hm2DlrDeviceOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 2, 1, 1, 2), Hm2DlrRingDeviceStatusType().clone('node')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DlrDeviceOperStatus.setStatus('current')
if mibBuilder.loadTexts: hm2DlrDeviceOperStatus.setDescription('Operational status of the device in the DLR ring.')
hm2DlrNetworkTopology = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 2, 1, 1, 3), Hm2DlrNetworkTopologyType().clone('ring')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DlrNetworkTopology.setStatus('current')
if mibBuilder.loadTexts: hm2DlrNetworkTopology.setDescription('Current network topology mode.')
hm2DlrNetworkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 2, 1, 1, 4), Hm2DlrNetworkStatusType().clone('normal')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DlrNetworkStatus.setStatus('current')
if mibBuilder.loadTexts: hm2DlrNetworkStatus.setDescription('Current network status.')
hm2DlrLastNetworkStatusChange = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 2, 1, 1, 5), Hm2DlrTimeInterval()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DlrLastNetworkStatusChange.setStatus('current')
if mibBuilder.loadTexts: hm2DlrLastNetworkStatusChange.setDescription('The time in seconds since the network status has changed at last.')
hm2DlrRingParticipantsCount = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 2, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DlrRingParticipantsCount.setStatus('current')
if mibBuilder.loadTexts: hm2DlrRingParticipantsCount.setDescription('Number of devices in the ring protocol participiants list.')
hm2DlrActiveSupervisorIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 2, 1, 1, 7), InetAddressType().clone('ipv4')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DlrActiveSupervisorIpAddressType.setStatus('current')
if mibBuilder.loadTexts: hm2DlrActiveSupervisorIpAddressType.setDescription('Address type of hm2DlrActiveSupervisorIpAddress.')
hm2DlrActiveSupervisorIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 2, 1, 1, 8), InetAddress().clone(hexValue="00000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DlrActiveSupervisorIpAddress.setStatus('current')
if mibBuilder.loadTexts: hm2DlrActiveSupervisorIpAddress.setDescription('IP address of the active ring supervisor.')
hm2DlrActiveSupervisorMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 2, 1, 1, 9), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DlrActiveSupervisorMacAddress.setStatus('current')
if mibBuilder.loadTexts: hm2DlrActiveSupervisorMacAddress.setDescription('MAC address of the active ring supervisor.')
hm2DlrActiveSupervisorPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 2, 1, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DlrActiveSupervisorPrecedence.setStatus('current')
if mibBuilder.loadTexts: hm2DlrActiveSupervisorPrecedence.setDescription('Precedence value of the active ring supervisor.')
hm2DlrRingFaultsCount = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 2, 1, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DlrRingFaultsCount.setStatus('current')
if mibBuilder.loadTexts: hm2DlrRingFaultsCount.setDescription('Number of times since the supervisor has started, that the device has detected a ring fault, as either active or backup supervisor.')
hm2DlrLastActiveNodePort1IpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 2, 1, 1, 12), InetAddressType().clone('ipv4')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DlrLastActiveNodePort1IpAddressType.setStatus('current')
if mibBuilder.loadTexts: hm2DlrLastActiveNodePort1IpAddressType.setDescription('Address type of hm2DlrLastActiveNodePort1IpAddress.')
hm2DlrLastActiveNodePort1IpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 2, 1, 1, 13), InetAddress().clone(hexValue="00000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DlrLastActiveNodePort1IpAddress.setStatus('current')
if mibBuilder.loadTexts: hm2DlrLastActiveNodePort1IpAddress.setDescription('IP address of last active node on port 1.')
hm2DlrLastActiveNodePort1MacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 2, 1, 1, 14), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DlrLastActiveNodePort1MacAddress.setStatus('current')
if mibBuilder.loadTexts: hm2DlrLastActiveNodePort1MacAddress.setDescription('MAC address of last active node on port 1.')
hm2DlrLastActiveNodePort2IpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 2, 1, 1, 15), InetAddressType().clone('ipv4')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DlrLastActiveNodePort2IpAddressType.setStatus('current')
if mibBuilder.loadTexts: hm2DlrLastActiveNodePort2IpAddressType.setDescription('Address type of hm2DlrLastActiveNodePort2IpAddress.')
hm2DlrLastActiveNodePort2IpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 2, 1, 1, 16), InetAddress().clone(hexValue="00000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DlrLastActiveNodePort2IpAddress.setStatus('current')
if mibBuilder.loadTexts: hm2DlrLastActiveNodePort2IpAddress.setDescription('IP address of last active node on port 2.')
hm2DlrLastActiveNodePort2MacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 2, 1, 1, 17), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DlrLastActiveNodePort2MacAddress.setStatus('current')
if mibBuilder.loadTexts: hm2DlrLastActiveNodePort2MacAddress.setDescription('MAC address of last active node on port 2.')
hm2DlrRingParticipantsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 2, 2, 1), ).setIndexNames((0, "HM2-L2REDUNDANCY-DLR-MIB", "hm2DlrRingIndex"), (0, "HM2-L2REDUNDANCY-DLR-MIB", "hm2DlrRingParticipantsIndex"))
if mibBuilder.loadTexts: hm2DlrRingParticipantsEntry.setStatus('current')
if mibBuilder.loadTexts: hm2DlrRingParticipantsEntry.setDescription('List of devices participating in the ring protocol.')
hm2DlrRingParticipantsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 2, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hm2DlrRingParticipantsIndex.setStatus('current')
if mibBuilder.loadTexts: hm2DlrRingParticipantsIndex.setDescription('Index for the ring participants table.')
hm2DlrRingParticipantsIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 2, 2, 1, 2), InetAddressType().clone('ipv4')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DlrRingParticipantsIpAddressType.setStatus('current')
if mibBuilder.loadTexts: hm2DlrRingParticipantsIpAddressType.setDescription('Address type of hm2DlrRingParticipantsIpAddress.')
hm2DlrRingParticipantsIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 2, 2, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DlrRingParticipantsIpAddress.setStatus('current')
if mibBuilder.loadTexts: hm2DlrRingParticipantsIpAddress.setDescription('IP address of the participant node.')
hm2DlrRingParticipantsMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 2, 2, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DlrRingParticipantsMacAddress.setStatus('current')
if mibBuilder.loadTexts: hm2DlrRingParticipantsMacAddress.setDescription('MAC address of the participant node.')
hm2DlrGatewayConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 1, 11, 1), ).setIndexNames((0, "HM2-L2REDUNDANCY-DLR-MIB", "hm2DlrRingIndex"), (0, "HM2-L2REDUNDANCY-DLR-MIB", "hm2DlrGatewayIndex"))
if mibBuilder.loadTexts: hm2DlrGatewayConfigEntry.setStatus('current')
if mibBuilder.loadTexts: hm2DlrGatewayConfigEntry.setDescription('Entry with DLR gateway settings for the indexed ring.')
hm2DlrGatewayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 1, 11, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hm2DlrGatewayIndex.setStatus('current')
if mibBuilder.loadTexts: hm2DlrGatewayIndex.setDescription('DLR gateway index.')
hm2DlrGatewayName = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 1, 11, 1, 2), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2DlrGatewayName.setStatus('current')
if mibBuilder.loadTexts: hm2DlrGatewayName.setDescription('A logical name for the DLR gateway to ease the management of DLR gateways.')
hm2DlrGatewayConfigLearningUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 1, 11, 1, 3), HmEnabledStatus().clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2DlrGatewayConfigLearningUpdate.setStatus('current')
if mibBuilder.loadTexts: hm2DlrGatewayConfigLearningUpdate.setDescription('Enable or disable DLR gateway learning update. enable(1) indicates all DLR nodes will send Learning_Update frame after gateway switchover. disable(2) indicates DLR nodes will not send Learning_Update frame after gateway switchover.')
hm2DlrGatewayConfigPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 1, 11, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2DlrGatewayConfigPrecedence.setStatus('current')
if mibBuilder.loadTexts: hm2DlrGatewayConfigPrecedence.setDescription('Precedence of the DLR gateway.')
hm2DlrGatewayConfigAdvertiseInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 1, 11, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1000, 100000)).clone(2000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2DlrGatewayConfigAdvertiseInterval.setStatus('current')
if mibBuilder.loadTexts: hm2DlrGatewayConfigAdvertiseInterval.setDescription('Gateway advertise interval time in microseconds.')
hm2DlrGatewayConfigAdvertiseTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 1, 11, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2500, 500000)).clone(5000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2DlrGatewayConfigAdvertiseTimeout.setStatus('current')
if mibBuilder.loadTexts: hm2DlrGatewayConfigAdvertiseTimeout.setDescription('Gateway advertise timeout in microseconds.')
hm2DlrGatewayConfigUplinkPort1IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 1, 11, 1, 7), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2DlrGatewayConfigUplinkPort1IfIndex.setStatus('current')
if mibBuilder.loadTexts: hm2DlrGatewayConfigUplinkPort1IfIndex.setDescription('Interface index of the uplink port 1 of the DLR gateway. A non-zero value indicates the ifIndex for the corresponding entry in the ifTable. ')
hm2DlrGatewayConfigUplinkPort2IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 1, 11, 1, 8), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2DlrGatewayConfigUplinkPort2IfIndex.setStatus('current')
if mibBuilder.loadTexts: hm2DlrGatewayConfigUplinkPort2IfIndex.setDescription('Interface index of the uplink port 2 of the DLR gateway. A non-zero value indicates the ifIndex for the corresponding entry in the ifTable. ')
hm2DlrGatewayUplinkPort1OperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 1, 11, 1, 9), Hm2DlrPortStatusType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DlrGatewayUplinkPort1OperStatus.setStatus('current')
if mibBuilder.loadTexts: hm2DlrGatewayUplinkPort1OperStatus.setDescription('Operational status of the gateway uplink port 1.')
hm2DlrGatewayUplinkPort2OperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 1, 11, 1, 10), Hm2DlrPortStatusType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DlrGatewayUplinkPort2OperStatus.setStatus('current')
if mibBuilder.loadTexts: hm2DlrGatewayUplinkPort2OperStatus.setDescription('Operational status of the gateway uplink port 2.')
hm2DlrGatewayConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 1, 11, 1, 15), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2DlrGatewayConfigRowStatus.setStatus('current')
if mibBuilder.loadTexts: hm2DlrGatewayConfigRowStatus.setDescription('Describes the status of a row in the table. Supports creation, deletion and activation of rows. A row must not be active(1) in order to be modified. A row can be taken out of service by setting the value notInService(2).')
hm2DlrGatewayStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 2, 3, 1), ).setIndexNames((0, "HM2-L2REDUNDANCY-DLR-MIB", "hm2DlrRingIndex"), (0, "HM2-L2REDUNDANCY-DLR-MIB", "hm2DlrGatewayIndex"))
if mibBuilder.loadTexts: hm2DlrGatewayStatusEntry.setStatus('current')
if mibBuilder.loadTexts: hm2DlrGatewayStatusEntry.setDescription('DLR gateway status information entry.')
hm2DlrGatewayStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 2, 3, 1, 1), Hm2DlrGatewayStatusType().clone('nonGateway')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DlrGatewayStatus.setStatus('current')
if mibBuilder.loadTexts: hm2DlrGatewayStatus.setDescription('Gateway status.')
hm2DlrGatewayStatusPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 2, 3, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DlrGatewayStatusPrecedence.setStatus('current')
if mibBuilder.loadTexts: hm2DlrGatewayStatusPrecedence.setDescription('Precedence value of the active gateway.')
hm2DlrGatewayStatusIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 2, 3, 1, 3), InetAddressType().clone('ipv4')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DlrGatewayStatusIpAddressType.setStatus('current')
if mibBuilder.loadTexts: hm2DlrGatewayStatusIpAddressType.setDescription('Address type of hm2DlrGatewayStatusIpAddress.')
hm2DlrGatewayStatusIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 2, 3, 1, 4), InetAddress().clone(hexValue="00000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DlrGatewayStatusIpAddress.setStatus('current')
if mibBuilder.loadTexts: hm2DlrGatewayStatusIpAddress.setDescription('IP address of the active gateway.')
hm2DlrGatewayStatusMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 2, 3, 1, 5), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DlrGatewayStatusMacAddress.setStatus('current')
if mibBuilder.loadTexts: hm2DlrGatewayStatusMacAddress.setDescription('MAC address of the active gateway.')
hm2DlrRingStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 0, 1)).setObjects(("HM2-L2REDUNDANCY-DLR-MIB", "hm2DlrRingIndex"), ("HM2-L2REDUNDANCY-DLR-MIB", "hm2DlrNetworkStatus"))
if mibBuilder.loadTexts: hm2DlrRingStatusTrap.setStatus('current')
if mibBuilder.loadTexts: hm2DlrRingStatusTrap.setDescription('This trap is sent when the network status changes.')
mibBuilder.exportSymbols("HM2-L2REDUNDANCY-DLR-MIB", hm2DlrRingport2IfIndex=hm2DlrRingport2IfIndex, hm2DlrGatewayStatusPrecedence=hm2DlrGatewayStatusPrecedence, hm2DlrGatewayStatusEntry=hm2DlrGatewayStatusEntry, hm2DlrGatewayIndex=hm2DlrGatewayIndex, hm2DlrSupervisorPrecedence=hm2DlrSupervisorPrecedence, hm2DlrGatewayConfigAdvertiseInterval=hm2DlrGatewayConfigAdvertiseInterval, hm2DlrCapabilityFlags=hm2DlrCapabilityFlags, hm2DlrGatewayStatusIpAddressType=hm2DlrGatewayStatusIpAddressType, hm2DlrLastActiveNodePort2MacAddress=hm2DlrLastActiveNodePort2MacAddress, PYSNMP_MODULE_ID=hm2DlrMibGroup, hm2DlrRingParticipantsMacAddress=hm2DlrRingParticipantsMacAddress, hm2DlrConfiguration=hm2DlrConfiguration, hm2DlrSupervisorAdminState=hm2DlrSupervisorAdminState, hm2DlrGatewayStatusIpAddress=hm2DlrGatewayStatusIpAddress, hm2DlrRingParticipantsIpAddress=hm2DlrRingParticipantsIpAddress, hm2DlrRingport1IfIndex=hm2DlrRingport1IfIndex, hm2DlrMibObjects=hm2DlrMibObjects, hm2DlrActiveSupervisorMacAddress=hm2DlrActiveSupervisorMacAddress, hm2DlrGatewayStatusMacAddress=hm2DlrGatewayStatusMacAddress, hm2DlrRingName=hm2DlrRingName, hm2DlrConfigRowStatus=hm2DlrConfigRowStatus, hm2DlrGatewayConfigAdvertiseTimeout=hm2DlrGatewayConfigAdvertiseTimeout, hm2DlrRingport2OperStatus=hm2DlrRingport2OperStatus, hm2DlrGatewayConfigRowStatus=hm2DlrGatewayConfigRowStatus, hm2DlrLastActiveNodePort1IpAddress=hm2DlrLastActiveNodePort1IpAddress, hm2DlrLastActiveNodePort2IpAddress=hm2DlrLastActiveNodePort2IpAddress, hm2DlrGatewayConfigUplinkPort1IfIndex=hm2DlrGatewayConfigUplinkPort1IfIndex, hm2DlrNetworkStatus=hm2DlrNetworkStatus, hm2DlrActiveSupervisorIpAddress=hm2DlrActiveSupervisorIpAddress, hm2DlrRingParticipantsIndex=hm2DlrRingParticipantsIndex, Hm2DlrGatewayStatusType=Hm2DlrGatewayStatusType, hm2DlrRingFaultsCount=hm2DlrRingFaultsCount, hm2DlrRingParticipantsEntry=hm2DlrRingParticipantsEntry, hm2DlrBeaconInterval=hm2DlrBeaconInterval, hm2DlrStatusEntry=hm2DlrStatusEntry, hm2DlrGatewayConfigPrecedence=hm2DlrGatewayConfigPrecedence, Hm2DlrPortStatusType=Hm2DlrPortStatusType, hm2DlrGatewayUplinkPort1OperStatus=hm2DlrGatewayUplinkPort1OperStatus, hm2DlrGatewayConfigEntry=hm2DlrGatewayConfigEntry, Hm2DlrTimeInterval=Hm2DlrTimeInterval, hm2DlrMibNotifications=hm2DlrMibNotifications, hm2DlrConfigTable=hm2DlrConfigTable, hm2DlrGatewayConfigUplinkPort2IfIndex=hm2DlrGatewayConfigUplinkPort2IfIndex, hm2DlrRingParticipantsTable=hm2DlrRingParticipantsTable, hm2DlrVLANID=hm2DlrVLANID, hm2DlrDeviceOperStatus=hm2DlrDeviceOperStatus, hm2DlrLastNetworkStatusChange=hm2DlrLastNetworkStatusChange, hm2DlrStatus=hm2DlrStatus, hm2DlrStatusTable=hm2DlrStatusTable, hm2DlrBeaconTimeout=hm2DlrBeaconTimeout, hm2DlrGatewayName=hm2DlrGatewayName, hm2DlrGlobalAdminState=hm2DlrGlobalAdminState, Hm2DlrNetworkStatusType=Hm2DlrNetworkStatusType, hm2DlrActiveSupervisorIpAddressType=hm2DlrActiveSupervisorIpAddressType, hm2DlrLastActiveNodePort1IpAddressType=hm2DlrLastActiveNodePort1IpAddressType, hm2DlrService=hm2DlrService, hm2DlrRingParticipantsCount=hm2DlrRingParticipantsCount, hm2DlrGatewayUplinkPort2OperStatus=hm2DlrGatewayUplinkPort2OperStatus, hm2DlrRingParticipantsIpAddressType=hm2DlrRingParticipantsIpAddressType, hm2DlrGatewayStatus=hm2DlrGatewayStatus, Hm2DlrNetworkTopologyType=Hm2DlrNetworkTopologyType, hm2DlrConfigEntry=hm2DlrConfigEntry, hm2DlrLastActiveNodePort2IpAddressType=hm2DlrLastActiveNodePort2IpAddressType, hm2DlrMibGroup=hm2DlrMibGroup, hm2DlrRingIndex=hm2DlrRingIndex, hm2DlrActiveSupervisorPrecedence=hm2DlrActiveSupervisorPrecedence, hm2DlrGatewayConfigLearningUpdate=hm2DlrGatewayConfigLearningUpdate, hm2DlrNetworkTopology=hm2DlrNetworkTopology, hm2DlrLastActiveNodePort1MacAddress=hm2DlrLastActiveNodePort1MacAddress, hm2DlrGatewayConfigTable=hm2DlrGatewayConfigTable, hm2DlrGatewayStatusTable=hm2DlrGatewayStatusTable, hm2DlrRingport1OperStatus=hm2DlrRingport1OperStatus, Hm2DlrRingDeviceStatusType=Hm2DlrRingDeviceStatusType, hm2DlrRingStatusTrap=hm2DlrRingStatusTrap)
