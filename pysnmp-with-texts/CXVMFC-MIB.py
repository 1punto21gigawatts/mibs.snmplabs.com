#
# PySNMP MIB module CXVMFC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CXVMFC-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:33:40 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
cxMcVox, = mibBuilder.importSymbols("CXMCVOX-MIB", "cxMcVox")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Gauge32, iso, Counter32, MibIdentifier, Counter64, ObjectIdentity, IpAddress, Unsigned32, Integer32, NotificationType, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Gauge32", "iso", "Counter32", "MibIdentifier", "Counter64", "ObjectIdentity", "IpAddress", "Unsigned32", "Integer32", "NotificationType", "TimeTicks")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
cxVMFC = MibIdentifier((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 22))
vmfcOutRegCallerCategory = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 22, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("subscriber-without-priority", 1), ("subscriber-with-priority", 2), ("maintenance-equipment", 3), ("charge-meter", 4), ("operator", 5), ("data-tx", 6))).clone('subscriber-without-priority')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmfcOutRegCallerCategory.setStatus('mandatory')
if mibBuilder.loadTexts: vmfcOutRegCallerCategory.setDescription('The Outgoing register will need to know the category of the caller since the next Incoming register may request it. Since this information may not be available from the caller, it needs to be configurable for the general case. Options: subscriber-without-priority (1) subscriber-with-priority (2) maintenance-equipment (3) charge-meter (4) operator (5) data-tx (6) Default Value: subscriber-without-priority (1) Configuration Changed: administrative ')
vmfcOutRegCallerCatGrpII3 = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 22, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("normal-subscriber", 1), ("atme-equipment", 2), ("maintenance-equipment", 3), ("operator-with-transfer-capability", 4), ("operator-with-intercept-capability", 5))).clone('normal-subscriber')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmfcOutRegCallerCatGrpII3.setStatus('mandatory')
if mibBuilder.loadTexts: vmfcOutRegCallerCatGrpII3.setDescription('The Outgoing register will need to know the category of the caller since the next Incoming register may request it. This selection of category choices are from Mexican GroupII3 list. Options: normal-subscriber (1) atme-equipment (2) maintenance-equipment (3) operator-with-transfer-capability (4) operator-with-intercept-capability (5) Default Value: normal-subscriber (1) Configuration Changed: administrative ')
vmfcOutRegCallerCatGrpII6 = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 22, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("normal-subscriber", 1), ("atme-equipment", 2), ("maintenance-equipment", 3), ("collect-call", 4), ("time-and-charges", 5), ("subscriber1-on-shared-line", 6), ("subscriber2-on-shared-line", 7), ("subscriber3-on-shared-line", 8), ("operator-without-transfer-capability", 9))).clone('normal-subscriber')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmfcOutRegCallerCatGrpII6.setStatus('mandatory')
if mibBuilder.loadTexts: vmfcOutRegCallerCatGrpII6.setDescription('The Outgoing register will need to know the category of the caller since the next Incoming register may request it. This selection of category choices are from Mexican GroupII6 list. Options: normal-subscriber (1) atme-equipment (2) maintenance-equipment (3) collect-call (4) time-and-charges (5) subscriber1-on-shared-line (6) subscriber2-on-shared-line (7) subscriber3-on-shared-line (8) operator-without-transfer-capability (9) Default Value: normal-subscriber (1) Configuration Changed: administrative ')
vmfcOutRegExchangeType = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 22, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("national-exchange", 1), ("international-exchange", 2))).clone('national-exchange')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmfcOutRegExchangeType.setStatus('mandatory')
if mibBuilder.loadTexts: vmfcOutRegExchangeType.setDescription('Type of exchange the Outgoing register is connected to. This object only supports National Exchange (1) for the time being. Default Value: national-exchange (1) Configuration Changed: administrative ')
vmfcOutRegCallingID = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 22, 5), DisplayString().clone('0')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmfcOutRegCallingID.setStatus('mandatory')
if mibBuilder.loadTexts: vmfcOutRegCallingID.setDescription("Determines the calling ID that will be transmitted when the Outgoing register has requested for it. Default Value: '0' Configuration Changed: administrative ")
vmfcInRegNationalAddressSize = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 22, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 40)).clone(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmfcInRegNationalAddressSize.setStatus('mandatory')
if mibBuilder.loadTexts: vmfcInRegNationalAddressSize.setDescription('The number of digits in a called number if the call is made to a national exchange. Default Value: 16 Configuration Changed: administrative ')
vmfcInRegInfoRequest = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 22, 7), Integer32().clone(0)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmfcInRegInfoRequest.setStatus('mandatory')
if mibBuilder.loadTexts: vmfcInRegInfoRequest.setDescription("This object represents a 3 bits bitmap. When a bit is set the respective information will be requested by the Incoming register. Options: Bit 1 refers to the category. Bit 2 refers to the calling ID. Bit 3 refers to the charging category. Default Value: '0'h equals 0 Configuration Changed: administrative ")
vmfcInRegPulsePeriod = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 22, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(150)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmfcInRegPulsePeriod.setStatus('mandatory')
if mibBuilder.loadTexts: vmfcInRegPulsePeriod.setDescription('Determines the period of a pulse that an Incoming register will send. Default Value: 150 Configuration Changed: administrative ')
vmfcCountry = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 22, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("mexico", 1), ("philippines", 2), ("nicaragua", 3), ("korea", 4), ("china", 5), ("argentina", 6))).clone('mexico')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmfcCountry.setStatus('mandatory')
if mibBuilder.loadTexts: vmfcCountry.setDescription('Determines in which country the equipment is located. It will determine which protocol flavor to use. Options: mexico (1) philippines (2) nicaragua (3) korea (4) china (5) argentina (6) Default Value: mexico (1) Configuration Changed: administrative ')
vmfcTimeOutBackwardSignal = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 22, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(15000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmfcTimeOutBackwardSignal.setStatus('mandatory')
if mibBuilder.loadTexts: vmfcTimeOutBackwardSignal.setDescription('Determines the delay in milliseconds allowed in reception of a backward signal. Default Value: 15000 Configuration Changed: administrative ')
vmfcTimeOutForwardSignal = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 2, 22, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(24000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmfcTimeOutForwardSignal.setStatus('mandatory')
if mibBuilder.loadTexts: vmfcTimeOutForwardSignal.setDescription('Determines the delay in milliseconds allowed in reception of a forward signal. Default Value: 24000 Configuration Changed: administrative ')
mibBuilder.exportSymbols("CXVMFC-MIB", vmfcTimeOutForwardSignal=vmfcTimeOutForwardSignal, vmfcOutRegCallingID=vmfcOutRegCallingID, vmfcOutRegCallerCatGrpII3=vmfcOutRegCallerCatGrpII3, vmfcCountry=vmfcCountry, vmfcInRegInfoRequest=vmfcInRegInfoRequest, vmfcTimeOutBackwardSignal=vmfcTimeOutBackwardSignal, vmfcOutRegCallerCategory=vmfcOutRegCallerCategory, vmfcOutRegCallerCatGrpII6=vmfcOutRegCallerCatGrpII6, vmfcInRegNationalAddressSize=vmfcInRegNationalAddressSize, vmfcInRegPulsePeriod=vmfcInRegPulsePeriod, cxVMFC=cxVMFC, vmfcOutRegExchangeType=vmfcOutRegExchangeType)
