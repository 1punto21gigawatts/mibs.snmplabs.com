#
# PySNMP MIB module CISCO-LWAPP-REAP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-LWAPP-REAP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:06:13 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection")
cLApSysMacAddress, = mibBuilder.importSymbols("CISCO-LWAPP-AP-MIB", "cLApSysMacAddress")
cLWlanIndex, = mibBuilder.importSymbols("CISCO-LWAPP-WLAN-MIB", "cLWlanIndex")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
TimeTicks, iso, Gauge32, Unsigned32, ObjectIdentity, Bits, Counter64, NotificationType, Integer32, ModuleIdentity, MibIdentifier, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "iso", "Gauge32", "Unsigned32", "ObjectIdentity", "Bits", "Counter64", "NotificationType", "Integer32", "ModuleIdentity", "MibIdentifier", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress")
TextualConvention, TruthValue, RowStatus, StorageType, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "RowStatus", "StorageType", "DisplayString")
ciscoLwappReapMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 517))
ciscoLwappReapMIB.setRevisions(('2010-10-06 00:00', '2010-02-06 00:00', '2007-11-01 00:00', '2007-04-19 00:00', '2006-04-19 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoLwappReapMIB.setRevisionsDescriptions(('Added cLReapWlanApAuth, ciscoLwappReapWlanConfigGroupSup1, ciscoLwappReapMIBComplianceRev5. Deprecated ciscoLwappReapMIBComplianceRev4.', "Added cLReapWlanClientIpLearnEnable, cLReapHomeApEnable,cLReapApLeastLatencyJoinEnable and cLReapHomeApLocalSsidReset. Updated the description for cLReapGroupUserConfigTable,cLReapGroupUserName, and cLReapGroupPassword. In module identity's description removed EAP and added Home AP. ciscoLwappReapMIBComplianceRev2 is deprecated. Added all the groups which are in ciscoLwappReapMIBComplianceRev2 to ciscoLwappReapMIBComplianceRev3. cLReapGroupRadiusPacTimeout is deprecated and created a new OID called cLReapGroupRadiusPacTimeoutCtrl. Created new group ciscoLwappReapApConfigGroupHomeAp.", 'Added ciscoLwappReapGroupConfigRadiusGroup and ciscoLwappReapGroupConfigUserAuthGroup.', 'Added cLReapGroupConfigTable and cLReapGroupApConfigTable.', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoLwappReapMIB.setLastUpdated('201010060000Z')
if mibBuilder.loadTexts: ciscoLwappReapMIB.setOrganization('Cisco Systems Inc.')
if mibBuilder.loadTexts: ciscoLwappReapMIB.setContactInfo('Cisco Systems, Customer Service Postal: 170 West Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS Email: cs-wnbu-snmp@cisco.com')
if mibBuilder.loadTexts: ciscoLwappReapMIB.setDescription("This MIB is intended to be implemented on all those devices operating as Central Controllers (CC) that terminate the Light Weight Access Point Protocol tunnel from Light-weight LWAPP Access Points. Information represented by this MIB is passed by the controller to those Cisco LWAPP APs, that can operate in stand-alone mode. The relationship between CC and the LWAPP APs can be depicted as followshe LWAPP tunnel exists between the controller and the APs. The MNs communicate with the APs through the protocol defined by the 802.11 standard. LWAPP APs, upon bootup, discover and join one of the controllers and the controller pushes the configuration, that includes the WLAN parameters, to the LWAPP APs. The APs then encapsulate all the 802.11 frames from wireless clients inside LWAPP frames and forward the LWAPP frames to the controller. GLOSSARY Access Point ( AP ) An entity that contains an 802.11 medium access control ( MAC ) and physical layer ( PHY ) interface and provides access to the distribution services via the wireless medium for associated clients. LWAPP APs encapsulate all the 802.11 frames in LWAPP frames and sends them to the controller to which it is logically connected. Central Controller ( CC ) The central entity that terminates the LWAPP protocol tunnel from the LWAPP APs. Throughout this MIB, this entity is also referred to as 'controller'. Light Weight Access Point Protocol ( LWAPP ) This is a generic protocol that defines the communication between the Access Points and the Central Controller. Mobile Node ( MN ) A roaming 802.11 wireless device in a wireless network associated with an access point. Native VLAN ID A switch port and/or AP can be configured with a 'native VLAN ID'. Untagged or priority-tagged frames are implicitly associated with the native VLAN ID. The default native VLAN ID is '1' if VLAN tagging is enabled. The native VLAN ID is '0' or 'no VLAN ID' if VLAN tagging is not enabled. Remote Edge Access Point ( REAP ) The LWAPP AP that can also act as a stand-alone AP when it loses communication with the controller it was associated with. When REAP can reach the controller (connected state), it gets help from controller to complete client authentication. When a controller is not reachable by REAP, it goes into standalone state and does client authentication by itself. All data packets from clients are either bridged locally (local-switch) or forwarded to the controller (central-switch) depending on the WLAN configuration. Virtual LAN VLAN defined in the IEEE 802.1Q VLAN standard supports logically segmenting of LAN infrastructure into different subnets or workgroups so that packets are switched only between ports within the same VLAN. VLAN ID Each VLAN is identified by a 12-bit 'VLAN ID'. A VLAN ID of '0' is used to indicate 'no VLAN ID'. Valid VLAN IDs range from '1' to '4095'. Home AP A REAP AP can be installed at end-user home. Home AP ethernet port will be connected to DSL or cable modem at home. Home AP will be primed with Controller IP Address so that it will join with controller. REFERENCE [1] Part 11 Wireless LAN Medium Access Control ( MAC ) and Physical Layer ( PHY ) Specifications [2] Draft-obara-capwap-lwapp-00.txt, IETF Light Weight Access Point Protocol")
ciscoLwappReapMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 517, 0))
ciscoLwappReapMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 517, 1))
ciscoLwappReapMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 517, 2))
ciscoLwappReapWlanConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 517, 1, 1))
ciscoLwappReapApConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 517, 1, 2))
ciscoLwappReapGroupConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 517, 1, 3))
cLReapWlanConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 517, 1, 1, 1), )
if mibBuilder.loadTexts: cLReapWlanConfigTable.setStatus('current')
if mibBuilder.loadTexts: cLReapWlanConfigTable.setDescription('This table represents the WLAN configuration sent by the controller to REAPs so that the APs can operate in stand-alone mode. LWAPP APs operating in REAP mode locally switch the data frames of the associated clients, rather than tunneling them through to the LWAPP controller as LWAPP data packets. The LWAPP controller passes this configuration set to the LWAPP AP during the AP initialization so that the AP can operate in stand-alone mode when it fails to reach the controller. The configuration is also passed to the REAP when they are individually modified through separate LWAPP messages. The REAP updates itself with the information received through these LWAPP messages. This table has a one-to-one relationship with cLWlanConfigTable of the CISCO-LWAPP-WLAN-MIB. There exist a row in this table corresponding to each row representing a WLAN in cLWlanConfigTable. Note that the configuration represented by this table is applicable only for REAPs. The controller will send this configuration set only to the REAP APs for their operation in standalone mode.')
cLReapWlanConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 517, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-LWAPP-WLAN-MIB", "cLWlanIndex"))
if mibBuilder.loadTexts: cLReapWlanConfigEntry.setStatus('current')
if mibBuilder.loadTexts: cLReapWlanConfigEntry.setDescription('Each entry represents a conceptual row in cLReapWlanConfigTable and corresponds to the packet switching configuration for a particular WLAN.')
cLReapWlanEnLocalSwitching = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 517, 1, 1, 1, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLReapWlanEnLocalSwitching.setStatus('current')
if mibBuilder.loadTexts: cLReapWlanEnLocalSwitching.setDescription("This object indicates the behavior of the REAP when switching the data frames of the clients associated to it through the WLAN identified by cLWlanIndex. A value of 'true' indicates that the AP, on which this WLAN is configured, may locally switch the data packets of the clients in the WLAN instead of tunneling them to the central controller for switching. A value of 'false' indicates that the AP should tunnel all the data packets of the wireless clients in the WLAN to the central controller for switching. Note that the value of 'true' will be effective only if the WLAN is configured on a REAP.")
cLReapWlanClientIpLearnEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 517, 1, 1, 1, 1, 2), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLReapWlanClientIpLearnEnable.setStatus('current')
if mibBuilder.loadTexts: cLReapWlanClientIpLearnEnable.setDescription("This object indicates whether Client IP Address learning is enabled on the controller. When layer two tunneling is employed the IP learning on controller has to be disabled. Otherwise, the controller is unable to learn the client's IP address and cannot move it to the associated state. A value of 'true' indicates the controller does checks for IP sent by the HREAP AP. A value of 'false' indicates the controller does not check for IP from the locally switch HREAP AP.")
cLReapWlanApAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 517, 1, 1, 1, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLReapWlanApAuth.setStatus('current')
if mibBuilder.loadTexts: cLReapWlanApAuth.setDescription("This object specifies the behavior of the REAP, on where to handle the authentication of the client associated to the WLAN indicated by cLWlanIndex. A value of 'true' indicates that the AP, on which this WLAN is configured, will do the authentication of the clients in the WLAN locally instead of of sending them to the central controller. A value of 'false' indicates that the AP should send the information to the central controller to do the authentication of the client. Note that the value of 'true' will be effective only if the WLAN is configured on a REAP and WLAN is configured for local switching of the data.")
cLReapApConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 517, 1, 2, 1), )
if mibBuilder.loadTexts: cLReapApConfigTable.setStatus('current')
if mibBuilder.loadTexts: cLReapApConfigTable.setDescription('This table represents the VLAN configuration of REAPs. The agent adds a row to this table corresponding to each row representing a REAP in cLApTable of the CISCO-LWAPP-AP-MIB. The agent deletes the row either when the AP dissociates from the controller or moved out of the remote mode.')
cLReapApConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 517, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-LWAPP-AP-MIB", "cLApSysMacAddress"))
if mibBuilder.loadTexts: cLReapApConfigEntry.setStatus('current')
if mibBuilder.loadTexts: cLReapApConfigEntry.setDescription('Each entry represents a conceptual row in cLReapApConfigTable and corresponds to the VLAN configuration of a REAP.')
cLReapApNativeVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 517, 1, 2, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLReapApNativeVlanId.setStatus('current')
if mibBuilder.loadTexts: cLReapApNativeVlanId.setDescription('This object defines the Native VLAN ID for the particular AP identified by cLApSysMacAddress. Note that this particular object can be modified through a Set request only if the AP is a REAP. The agent is expected to reject the attempt to set this object for APs in other modes.')
cLReapApVlanEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 517, 1, 2, 1, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLReapApVlanEnable.setStatus('current')
if mibBuilder.loadTexts: cLReapApVlanEnable.setDescription("This object indicates the availability of Native VLAN configured through cLReapApNativeVlanId on this REAP. A value of 'true' indicates that the VLAN configured as native through cLReapApNativeVlanId is enabled on the REAP and that the REAP can reach the controller through the native VLAN. A value of 'false' indicates that the VLAN configured as native through cLReapApNativeVlanId is disabled and the REAP can't reach the controller.")
cLReapHomeApEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 517, 1, 2, 1, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLReapHomeApEnable.setStatus('current')
if mibBuilder.loadTexts: cLReapHomeApEnable.setDescription("This object represents if this REAP AP is used as Home AP. A value of 'true' indicates that this REAP AP is a Home AP. A value of 'false' indicates that this REAP AP is not a Home AP.")
cLReapApLeastLatencyJoinEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 517, 1, 2, 1, 1, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLReapApLeastLatencyJoinEnable.setStatus('current')
if mibBuilder.loadTexts: cLReapApLeastLatencyJoinEnable.setDescription("This object represents if this REAP AP should join controller which has least latency. A value of 'true' indicates that this REAP AP will join controller which has least latency. A value of 'false' indicates that this REAP AP will not consider latency in selecting controller to join.")
cLReapHomeApLocalSsidReset = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 517, 1, 2, 1, 1, 5), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLReapHomeApLocalSsidReset.setStatus('current')
if mibBuilder.loadTexts: cLReapHomeApLocalSsidReset.setDescription('This object can be used to reset local SSID on a Home AP. A value of true indicates that the local SSID is to be reset. A value of false on this during set will return error. A value of false will be returned on get.')
cLReapApVlanIdTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 517, 1, 2, 2), )
if mibBuilder.loadTexts: cLReapApVlanIdTable.setStatus('current')
if mibBuilder.loadTexts: cLReapApVlanIdTable.setDescription("This table defines the WLAN / VLAN Id mappings to be configured for the REAP identified by cLApSysMacAddress. VLAN Id configured through this table is passed to the respective REAP through the 'Add WLAN' LWAPP message, sent as part of the 'Configure Response message from the controller to the REAP, during the initialization of the REAP. The REAP maps the VLAN to the particular WLAN to locally switch the data packets when those APs are in standalone mode. Thus, the information added through this table is applicable for REAPs only. VLANs are configured on WLANs for which local switching of packets is enabled through cLReapWlanEnLocalSwitching. This means that a row is added to this table only if there are WLANs available on the controller with local switching enabled and the AP is a REAP.")
cLReapApVlanIdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 517, 1, 2, 2, 1), ).setIndexNames((0, "CISCO-LWAPP-AP-MIB", "cLApSysMacAddress"), (0, "CISCO-LWAPP-WLAN-MIB", "cLWlanIndex"))
if mibBuilder.loadTexts: cLReapApVlanIdEntry.setStatus('current')
if mibBuilder.loadTexts: cLReapApVlanIdEntry.setDescription('Each entry represents a conceptual row that corresponds to one WLAN / VLAN Id mapping to be applied to the REAP identified by cLApSysMacAddress.')
cLReapApVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 517, 1, 2, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLReapApVlanId.setStatus('current')
if mibBuilder.loadTexts: cLReapApVlanId.setDescription('This object represents the VLAN ID to be mapped to the WLAN identified by cLWlanIndex.')
cLReapGroupConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 517, 1, 3, 1), )
if mibBuilder.loadTexts: cLReapGroupConfigTable.setStatus('current')
if mibBuilder.loadTexts: cLReapGroupConfigTable.setDescription('This table represents the configuration for REAPs so that the APs can be configured as a group. Entries are added or deleted by the user through the use of cLReapGroupRowStatus.')
cLReapGroupConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 517, 1, 3, 1, 1), ).setIndexNames((0, "CISCO-LWAPP-REAP-MIB", "cLReapGroupName"))
if mibBuilder.loadTexts: cLReapGroupConfigEntry.setStatus('current')
if mibBuilder.loadTexts: cLReapGroupConfigEntry.setDescription('Each entry represents a conceptual row in cLReapGroupConfigTable.')
cLReapGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 517, 1, 3, 1, 1, 1), SnmpAdminString())
if mibBuilder.loadTexts: cLReapGroupName.setStatus('current')
if mibBuilder.loadTexts: cLReapGroupName.setDescription('This object uniquely identifies an entry in cLReapGroupConfigTable.')
cLReapGroupPrimaryRadiusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 517, 1, 3, 1, 1, 2), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLReapGroupPrimaryRadiusIndex.setStatus('current')
if mibBuilder.loadTexts: cLReapGroupPrimaryRadiusIndex.setDescription('The object represents the value that maps to the primary RADIUS server for this group. A value of 0 indicates that the primary RADIUS server is not configured for this group.')
cLReapGroupSecondaryRadiusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 517, 1, 3, 1, 1, 3), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLReapGroupSecondaryRadiusIndex.setStatus('current')
if mibBuilder.loadTexts: cLReapGroupSecondaryRadiusIndex.setDescription('The object represents the value that maps to the secondary RADIUS server for this group. A value of 0 indicates that the primary RADIUS server is not configured for this group.')
cLReapGroupStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 517, 1, 3, 1, 1, 4), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLReapGroupStorageType.setStatus('current')
if mibBuilder.loadTexts: cLReapGroupStorageType.setDescription('This object represents the storage type for this conceptual row.')
cLReapGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 517, 1, 3, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLReapGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: cLReapGroupRowStatus.setDescription('This object represents the status column for a conceptual row in this table.')
cLReapGroupRadiusPacTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 517, 1, 3, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 4095)).clone(10)).setUnits('days').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLReapGroupRadiusPacTimeout.setStatus('deprecated')
if mibBuilder.loadTexts: cLReapGroupRadiusPacTimeout.setDescription('This object represents timeout value for the PAC (protected access credentials). Superceded by cLReapGroupRadiusPacTimeoutCtrl')
cLReapGroupRadiusAuthorityId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 517, 1, 3, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLReapGroupRadiusAuthorityId.setStatus('current')
if mibBuilder.loadTexts: cLReapGroupRadiusAuthorityId.setDescription('This object configures the authority ID.')
cLReapGroupRadiusAuthorityInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 517, 1, 3, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLReapGroupRadiusAuthorityInfo.setStatus('current')
if mibBuilder.loadTexts: cLReapGroupRadiusAuthorityInfo.setDescription('This object represents the authority information.')
cLReapGroupRadiusServerKey = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 517, 1, 3, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)).clone('****')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLReapGroupRadiusServerKey.setStatus('current')
if mibBuilder.loadTexts: cLReapGroupRadiusServerKey.setDescription("This object represents the RADIUS server key. For security the key always returns '****'.")
cLReapGroupRadiusIgnoreKey = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 517, 1, 3, 1, 1, 10), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLReapGroupRadiusIgnoreKey.setStatus('current')
if mibBuilder.loadTexts: cLReapGroupRadiusIgnoreKey.setDescription("This parameter represents whether anonymous provisioning is enabled. A value of 'true' indicates the controller will ignore the key configured in cLReapGroupRadiusServerKey anonymous requests. A value of 'false' indicates that the controller will use the key configured by cLReapGroupRadiusServerKey.")
cLReapGroupRadiusEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 517, 1, 3, 1, 1, 11), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLReapGroupRadiusEnable.setStatus('current')
if mibBuilder.loadTexts: cLReapGroupRadiusEnable.setDescription("This parameter represents whether RADIUS is enabled. A value of 'true' indicates that RADIUS is enabled. A value of 'false' indicates that RADIUS is disabled.")
cLReapGroupRadiusLeapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 517, 1, 3, 1, 1, 12), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLReapGroupRadiusLeapEnable.setStatus('current')
if mibBuilder.loadTexts: cLReapGroupRadiusLeapEnable.setDescription("This parameter represents whether LEAP is enabled. A value of 'true' indicates that LEAP is enabled. A value of 'false' indicates that LEAP is disabled.")
cLReapGroupRadiusEapFastEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 517, 1, 3, 1, 1, 13), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLReapGroupRadiusEapFastEnable.setStatus('current')
if mibBuilder.loadTexts: cLReapGroupRadiusEapFastEnable.setDescription("This parameter represents whether EAP-FAST is enabled. A value of 'true' indicates that EAP-FAST is enabled. A value of 'false' indicates that EAP-FAST is disabled.")
cLReapGroupRadiusPacTimeoutCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 517, 1, 3, 1, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)).clone(10)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLReapGroupRadiusPacTimeoutCtrl.setStatus('current')
if mibBuilder.loadTexts: cLReapGroupRadiusPacTimeoutCtrl.setDescription('This parameter represents timeout value for the PAC (protected access credentials). Valid range of timeout is 2 to 4095, and value 0 stands for disable.')
cLReapGroupApConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 517, 1, 3, 2), )
if mibBuilder.loadTexts: cLReapGroupApConfigTable.setStatus('current')
if mibBuilder.loadTexts: cLReapGroupApConfigTable.setDescription('This table represents the group associated with an AP. Entries are added or deleted by the user through the use of cLReapGroupApRowStatus.')
cLReapGroupApConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 517, 1, 3, 2, 1), ).setIndexNames((0, "CISCO-LWAPP-REAP-MIB", "cLReapGroupName"), (0, "CISCO-LWAPP-AP-MIB", "cLApSysMacAddress"))
if mibBuilder.loadTexts: cLReapGroupApConfigEntry.setStatus('current')
if mibBuilder.loadTexts: cLReapGroupApConfigEntry.setDescription('Each entry represents a conceptual row in cLReapGroupApConfigTable.')
cLReapGroupApStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 517, 1, 3, 2, 1, 1), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLReapGroupApStorageType.setStatus('current')
if mibBuilder.loadTexts: cLReapGroupApStorageType.setDescription('This object represents the storage type for this conceptual row.')
cLReapGroupApRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 517, 1, 3, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLReapGroupApRowStatus.setStatus('current')
if mibBuilder.loadTexts: cLReapGroupApRowStatus.setDescription('This object represents the status column for a conceptual row in this table.')
cLReapGroupUserConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 517, 1, 3, 3), )
if mibBuilder.loadTexts: cLReapGroupUserConfigTable.setStatus('current')
if mibBuilder.loadTexts: cLReapGroupUserConfigTable.setDescription('This table represents the group associated with an User. Entries are added or deleted by the application through the use of cLReapGroupUserRowStatus.')
cLReapGroupUserConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 517, 1, 3, 3, 1), ).setIndexNames((0, "CISCO-LWAPP-REAP-MIB", "cLReapGroupName"), (0, "CISCO-LWAPP-REAP-MIB", "cLReapGroupUserName"))
if mibBuilder.loadTexts: cLReapGroupUserConfigEntry.setStatus('current')
if mibBuilder.loadTexts: cLReapGroupUserConfigEntry.setDescription('Each entry represents a conceptual row in cLReapGroupUserConfigTable.')
cLReapGroupUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 517, 1, 3, 3, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 24)))
if mibBuilder.loadTexts: cLReapGroupUserName.setStatus('current')
if mibBuilder.loadTexts: cLReapGroupUserName.setDescription('This object represents the user name for this group. user name is used for authenticating a client associated to an AP within the group.')
cLReapGroupUserPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 517, 1, 3, 3, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLReapGroupUserPassword.setStatus('current')
if mibBuilder.loadTexts: cLReapGroupUserPassword.setDescription('This object represents the password for this user.')
cLReapGroupUserStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 517, 1, 3, 3, 1, 3), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLReapGroupUserStorageType.setStatus('current')
if mibBuilder.loadTexts: cLReapGroupUserStorageType.setDescription('This object represents the storage type for this conceptual row.')
cLReapGroupUserRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 517, 1, 3, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLReapGroupUserRowStatus.setStatus('current')
if mibBuilder.loadTexts: cLReapGroupUserRowStatus.setDescription('This object represents the status column for a conceptual row in this table.')
ciscoLwappReapMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 517, 2, 1))
ciscoLwappReapMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 517, 2, 2))
ciscoLwappReapMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 517, 2, 1, 1)).setObjects(("CISCO-LWAPP-REAP-MIB", "ciscoLwappReapWlanConfigGroup"), ("CISCO-LWAPP-REAP-MIB", "ciscoLwappReapApConfigGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappReapMIBCompliance = ciscoLwappReapMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoLwappReapMIBCompliance.setDescription('The compliance statement for the SNMP entities that implement the ciscoLwappReapMIB module.')
ciscoLwappReapMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 517, 2, 1, 2)).setObjects(("CISCO-LWAPP-REAP-MIB", "ciscoLwappReapWlanConfigGroup"), ("CISCO-LWAPP-REAP-MIB", "ciscoLwappReapApConfigGroup"), ("CISCO-LWAPP-REAP-MIB", "ciscoLwappReapGroupConfigGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappReapMIBComplianceRev1 = ciscoLwappReapMIBComplianceRev1.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoLwappReapMIBComplianceRev1.setDescription('The compliance statement for the SNMP entities that implement the ciscoLwappReapMIB module.')
ciscoLwappReapMIBComplianceRev2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 517, 2, 1, 3)).setObjects(("CISCO-LWAPP-REAP-MIB", "ciscoLwappReapWlanConfigGroup"), ("CISCO-LWAPP-REAP-MIB", "ciscoLwappReapApConfigGroup"), ("CISCO-LWAPP-REAP-MIB", "ciscoLwappReapGroupConfigGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappReapMIBComplianceRev2 = ciscoLwappReapMIBComplianceRev2.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoLwappReapMIBComplianceRev2.setDescription('The compliance statement for the SNMP entities that implement the ciscoLwappReapMIB module.')
ciscoLwappReapMIBComplianceRev3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 517, 2, 1, 4)).setObjects(("CISCO-LWAPP-REAP-MIB", "ciscoLwappReapWlanConfigGroup"), ("CISCO-LWAPP-REAP-MIB", "ciscoLwappReapApConfigGroup"), ("CISCO-LWAPP-REAP-MIB", "ciscoLwappReapGroupConfigGroup"), ("CISCO-LWAPP-REAP-MIB", "ciscoLwappReapGroupConfigRadiusGroup"), ("CISCO-LWAPP-REAP-MIB", "ciscoLwappReapGroupConfigUserAuthGroup"), ("CISCO-LWAPP-REAP-MIB", "ciscoLwappReapApConfigGroupHomeAp"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappReapMIBComplianceRev3 = ciscoLwappReapMIBComplianceRev3.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoLwappReapMIBComplianceRev3.setDescription('The compliance statement for the SNMP entities that implement the ciscoLwappReapMIB module.')
ciscoLwappReapMIBComplianceRev4 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 517, 2, 1, 5)).setObjects(("CISCO-LWAPP-REAP-MIB", "ciscoLwappReapWlanConfigGroup"), ("CISCO-LWAPP-REAP-MIB", "ciscoLwappReapApConfigGroup"), ("CISCO-LWAPP-REAP-MIB", "ciscoLwappReapGroupConfigGroup"), ("CISCO-LWAPP-REAP-MIB", "ciscoLwappReapGroupConfigUserAuthGroup"), ("CISCO-LWAPP-REAP-MIB", "ciscoLwappReapApConfigGroupHomeAp"), ("CISCO-LWAPP-REAP-MIB", "ciscoLwappReapGroupConfigRadiusGroup1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappReapMIBComplianceRev4 = ciscoLwappReapMIBComplianceRev4.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoLwappReapMIBComplianceRev4.setDescription('The compliance statement for the SNMP entities that implement the ciscoLwappReapMIB module.')
ciscoLwappReapMIBComplianceRev5 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 517, 2, 1, 6)).setObjects(("CISCO-LWAPP-REAP-MIB", "ciscoLwappReapWlanConfigGroup"), ("CISCO-LWAPP-REAP-MIB", "ciscoLwappReapApConfigGroup"), ("CISCO-LWAPP-REAP-MIB", "ciscoLwappReapGroupConfigGroup"), ("CISCO-LWAPP-REAP-MIB", "ciscoLwappReapGroupConfigUserAuthGroup"), ("CISCO-LWAPP-REAP-MIB", "ciscoLwappReapApConfigGroupHomeAp"), ("CISCO-LWAPP-REAP-MIB", "ciscoLwappReapGroupConfigRadiusGroup1"), ("CISCO-LWAPP-REAP-MIB", "ciscoLwappReapWlanConfigGroupSup1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappReapMIBComplianceRev5 = ciscoLwappReapMIBComplianceRev5.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappReapMIBComplianceRev5.setDescription('The compliance statement for the SNMP entities that implement the ciscoLwappReapMIB module.')
ciscoLwappReapWlanConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 517, 2, 2, 1)).setObjects(("CISCO-LWAPP-REAP-MIB", "cLReapWlanEnLocalSwitching"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappReapWlanConfigGroup = ciscoLwappReapWlanConfigGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappReapWlanConfigGroup.setDescription('This collection of objects represent the WLAN configuration to be passed to the REAP.')
ciscoLwappReapApConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 517, 2, 2, 2)).setObjects(("CISCO-LWAPP-REAP-MIB", "cLReapApNativeVlanId"), ("CISCO-LWAPP-REAP-MIB", "cLReapApVlanId"), ("CISCO-LWAPP-REAP-MIB", "cLReapApVlanEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappReapApConfigGroup = ciscoLwappReapApConfigGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappReapApConfigGroup.setDescription('This collection of objects represent the information needed by the REAP AP to locally switch the client data packets. The collection also includes the VLAN configuration on the REAP.')
ciscoLwappReapGroupConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 517, 2, 2, 3)).setObjects(("CISCO-LWAPP-REAP-MIB", "cLReapGroupPrimaryRadiusIndex"), ("CISCO-LWAPP-REAP-MIB", "cLReapGroupSecondaryRadiusIndex"), ("CISCO-LWAPP-REAP-MIB", "cLReapGroupStorageType"), ("CISCO-LWAPP-REAP-MIB", "cLReapGroupRowStatus"), ("CISCO-LWAPP-REAP-MIB", "cLReapGroupApStorageType"), ("CISCO-LWAPP-REAP-MIB", "cLReapGroupApRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappReapGroupConfigGroup = ciscoLwappReapGroupConfigGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappReapGroupConfigGroup.setDescription('This collection of objects represent the information needed by the REAP APs to configure REAP groups.')
ciscoLwappReapGroupConfigRadiusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 517, 2, 2, 4)).setObjects(("CISCO-LWAPP-REAP-MIB", "cLReapGroupRadiusPacTimeout"), ("CISCO-LWAPP-REAP-MIB", "cLReapGroupRadiusAuthorityId"), ("CISCO-LWAPP-REAP-MIB", "cLReapGroupRadiusAuthorityInfo"), ("CISCO-LWAPP-REAP-MIB", "cLReapGroupRadiusServerKey"), ("CISCO-LWAPP-REAP-MIB", "cLReapGroupRadiusIgnoreKey"), ("CISCO-LWAPP-REAP-MIB", "cLReapGroupRadiusEnable"), ("CISCO-LWAPP-REAP-MIB", "cLReapGroupRadiusLeapEnable"), ("CISCO-LWAPP-REAP-MIB", "cLReapGroupRadiusEapFastEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappReapGroupConfigRadiusGroup = ciscoLwappReapGroupConfigRadiusGroup.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoLwappReapGroupConfigRadiusGroup.setDescription('This collection of objects represent the RADIUS information needed by the REAP APs in a REAP group.')
ciscoLwappReapGroupConfigUserAuthGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 517, 2, 2, 5)).setObjects(("CISCO-LWAPP-REAP-MIB", "cLReapGroupUserPassword"), ("CISCO-LWAPP-REAP-MIB", "cLReapGroupUserStorageType"), ("CISCO-LWAPP-REAP-MIB", "cLReapGroupUserRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappReapGroupConfigUserAuthGroup = ciscoLwappReapGroupConfigUserAuthGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappReapGroupConfigUserAuthGroup.setDescription('This collection of objects represent the information needed for user authentication.')
ciscoLwappReapApConfigGroupHomeAp = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 517, 2, 2, 6)).setObjects(("CISCO-LWAPP-REAP-MIB", "cLReapHomeApEnable"), ("CISCO-LWAPP-REAP-MIB", "cLReapApLeastLatencyJoinEnable"), ("CISCO-LWAPP-REAP-MIB", "cLReapWlanClientIpLearnEnable"), ("CISCO-LWAPP-REAP-MIB", "cLReapHomeApLocalSsidReset"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappReapApConfigGroupHomeAp = ciscoLwappReapApConfigGroupHomeAp.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappReapApConfigGroupHomeAp.setDescription('This supplemental collection of objects represents objects related to Home AP configuration for REAP AP.')
ciscoLwappReapGroupConfigRadiusGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 517, 2, 2, 7)).setObjects(("CISCO-LWAPP-REAP-MIB", "cLReapGroupRadiusAuthorityId"), ("CISCO-LWAPP-REAP-MIB", "cLReapGroupRadiusAuthorityInfo"), ("CISCO-LWAPP-REAP-MIB", "cLReapGroupRadiusServerKey"), ("CISCO-LWAPP-REAP-MIB", "cLReapGroupRadiusIgnoreKey"), ("CISCO-LWAPP-REAP-MIB", "cLReapGroupRadiusEnable"), ("CISCO-LWAPP-REAP-MIB", "cLReapGroupRadiusLeapEnable"), ("CISCO-LWAPP-REAP-MIB", "cLReapGroupRadiusEapFastEnable"), ("CISCO-LWAPP-REAP-MIB", "cLReapGroupRadiusPacTimeoutCtrl"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappReapGroupConfigRadiusGroup1 = ciscoLwappReapGroupConfigRadiusGroup1.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappReapGroupConfigRadiusGroup1.setDescription('This collection of objects represent the RADIUS information needed by the REAP APs in a REAP group.')
ciscoLwappReapWlanConfigGroupSup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 517, 2, 2, 8)).setObjects(("CISCO-LWAPP-REAP-MIB", "cLReapWlanApAuth"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappReapWlanConfigGroupSup1 = ciscoLwappReapWlanConfigGroupSup1.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappReapWlanConfigGroupSup1.setDescription('This collection of objects represent additional WLAN configuration to be passed to the REAP.')
mibBuilder.exportSymbols("CISCO-LWAPP-REAP-MIB", cLReapApNativeVlanId=cLReapApNativeVlanId, cLReapApVlanId=cLReapApVlanId, cLReapWlanConfigTable=cLReapWlanConfigTable, cLReapWlanConfigEntry=cLReapWlanConfigEntry, ciscoLwappReapMIBComplianceRev2=ciscoLwappReapMIBComplianceRev2, cLReapGroupUserPassword=cLReapGroupUserPassword, ciscoLwappReapWlanConfig=ciscoLwappReapWlanConfig, cLReapGroupRadiusServerKey=cLReapGroupRadiusServerKey, cLReapGroupRadiusEnable=cLReapGroupRadiusEnable, cLReapApVlanIdEntry=cLReapApVlanIdEntry, cLReapApLeastLatencyJoinEnable=cLReapApLeastLatencyJoinEnable, cLReapGroupName=cLReapGroupName, ciscoLwappReapApConfig=ciscoLwappReapApConfig, ciscoLwappReapGroupConfigRadiusGroup=ciscoLwappReapGroupConfigRadiusGroup, cLReapWlanClientIpLearnEnable=cLReapWlanClientIpLearnEnable, cLReapGroupUserName=cLReapGroupUserName, ciscoLwappReapMIBComplianceRev5=ciscoLwappReapMIBComplianceRev5, ciscoLwappReapGroupConfigRadiusGroup1=ciscoLwappReapGroupConfigRadiusGroup1, cLReapGroupRowStatus=cLReapGroupRowStatus, ciscoLwappReapMIBComplianceRev3=ciscoLwappReapMIBComplianceRev3, cLReapGroupRadiusIgnoreKey=cLReapGroupRadiusIgnoreKey, cLReapGroupConfigEntry=cLReapGroupConfigEntry, cLReapGroupRadiusEapFastEnable=cLReapGroupRadiusEapFastEnable, cLReapApVlanIdTable=cLReapApVlanIdTable, cLReapWlanEnLocalSwitching=cLReapWlanEnLocalSwitching, ciscoLwappReapMIBComplianceRev4=ciscoLwappReapMIBComplianceRev4, ciscoLwappReapMIBCompliances=ciscoLwappReapMIBCompliances, ciscoLwappReapApConfigGroupHomeAp=ciscoLwappReapApConfigGroupHomeAp, ciscoLwappReapGroupConfig=ciscoLwappReapGroupConfig, cLReapGroupUserRowStatus=cLReapGroupUserRowStatus, cLReapWlanApAuth=cLReapWlanApAuth, cLReapGroupRadiusAuthorityId=cLReapGroupRadiusAuthorityId, cLReapGroupUserConfigEntry=cLReapGroupUserConfigEntry, cLReapApConfigEntry=cLReapApConfigEntry, cLReapHomeApEnable=cLReapHomeApEnable, cLReapGroupRadiusLeapEnable=cLReapGroupRadiusLeapEnable, cLReapGroupUserConfigTable=cLReapGroupUserConfigTable, cLReapGroupSecondaryRadiusIndex=cLReapGroupSecondaryRadiusIndex, ciscoLwappReapMIBObjects=ciscoLwappReapMIBObjects, cLReapGroupPrimaryRadiusIndex=cLReapGroupPrimaryRadiusIndex, ciscoLwappReapMIBConform=ciscoLwappReapMIBConform, cLReapApConfigTable=cLReapApConfigTable, cLReapGroupApConfigTable=cLReapGroupApConfigTable, ciscoLwappReapMIBCompliance=ciscoLwappReapMIBCompliance, cLReapGroupRadiusPacTimeoutCtrl=cLReapGroupRadiusPacTimeoutCtrl, ciscoLwappReapMIB=ciscoLwappReapMIB, ciscoLwappReapMIBGroups=ciscoLwappReapMIBGroups, cLReapGroupApConfigEntry=cLReapGroupApConfigEntry, ciscoLwappReapMIBComplianceRev1=ciscoLwappReapMIBComplianceRev1, ciscoLwappReapGroupConfigUserAuthGroup=ciscoLwappReapGroupConfigUserAuthGroup, cLReapGroupRadiusPacTimeout=cLReapGroupRadiusPacTimeout, ciscoLwappReapWlanConfigGroupSup1=ciscoLwappReapWlanConfigGroupSup1, cLReapGroupStorageType=cLReapGroupStorageType, cLReapGroupApStorageType=cLReapGroupApStorageType, cLReapGroupRadiusAuthorityInfo=cLReapGroupRadiusAuthorityInfo, PYSNMP_MODULE_ID=ciscoLwappReapMIB, ciscoLwappReapGroupConfigGroup=ciscoLwappReapGroupConfigGroup, cLReapGroupApRowStatus=cLReapGroupApRowStatus, cLReapGroupUserStorageType=cLReapGroupUserStorageType, ciscoLwappReapWlanConfigGroup=ciscoLwappReapWlanConfigGroup, cLReapHomeApLocalSsidReset=cLReapHomeApLocalSsidReset, ciscoLwappReapApConfigGroup=ciscoLwappReapApConfigGroup, cLReapApVlanEnable=cLReapApVlanEnable, ciscoLwappReapMIBNotifs=ciscoLwappReapMIBNotifs, cLReapGroupConfigTable=cLReapGroupConfigTable)
