#
# PySNMP MIB module ZHONE-COM-IP-RIPv2-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ZHONE-COM-IP-RIPv2-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:47:13 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Unsigned32, TimeTicks, iso, ModuleIdentity, Integer32, Counter64, Counter32, MibIdentifier, Bits, IpAddress, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Unsigned32", "TimeTicks", "iso", "ModuleIdentity", "Integer32", "Counter64", "Counter32", "MibIdentifier", "Bits", "IpAddress", "Gauge32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
rdIndex, = mibBuilder.importSymbols("ZHONE-COM-IP-RD-MIB", "rdIndex")
zhoneModules, zhoneIp = mibBuilder.importSymbols("Zhone", "zhoneModules", "zhoneIp")
comIpRip2 = ModuleIdentity((1, 3, 6, 1, 4, 1, 5504, 6, 52))
comIpRip2.setRevisions(('2001-09-12 13:18', '2000-10-12 17:08', '2000-10-02 08:05', '2000-09-12 10:20',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: comIpRip2.setRevisionsDescriptions(('V01.01.01 - Added zhone comments for the rip2 MIB.', 'V01.01.00 - add static route advertisement and poison fields to rip if config table', 'V01.00.01 - update existing markup', 'V01.00.00 - Initial Release',))
if mibBuilder.loadTexts: comIpRip2.setLastUpdated('200109121318Z')
if mibBuilder.loadTexts: comIpRip2.setOrganization('Zhone Technologies, Inc.')
if mibBuilder.loadTexts: comIpRip2.setContactInfo(' Postal: Zhone Technologies, Inc. @ Zhone Way 7001 Oakport Street Oakland, CA 94621 USA Toll-Free: +1 877-ZHONE20 (+1 877-946-6320) Tel: +1-510-777-7000 Fax: +1-510-777-7001 E-mail: support@zhone.com')
if mibBuilder.loadTexts: comIpRip2.setDescription('RIPv2 MIB IP Software Minneapolis, MN')
class RipAuthKey(TextualConvention, OctetString):
    description = 'The RIP authentication key specification. Only the RIP mib should use this.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 16)

rip2 = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 4, 1, 2))
if mibBuilder.loadTexts: rip2.setStatus('current')
if mibBuilder.loadTexts: rip2.setDescription('The MIB module to describe the RIP2 Version 2 Protocol as represented in Zhone products. The notion of a Routing Domain (RD) is used to group instances of RIP within a system.')
zhRip2GlobalTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 4, 1, 2, 1), )
if mibBuilder.loadTexts: zhRip2GlobalTable.setStatus('current')
if mibBuilder.loadTexts: zhRip2GlobalTable.setDescription('A list of global RIP values. Rows are created and destroyed whenever a routing domain is created and destroyed. Rows cannot be created or destroyed via SNMP.')
zhRip2GlobalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 4, 1, 2, 1, 1), ).setIndexNames((0, "ZHONE-COM-IP-RD-MIB", "rdIndex"))
if mibBuilder.loadTexts: zhRip2GlobalEntry.setStatus('current')
if mibBuilder.loadTexts: zhRip2GlobalEntry.setDescription('A single routing domain in a single subnet.')
zhRip2GlobalRouteChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 2, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhRip2GlobalRouteChanges.setStatus('current')
if mibBuilder.loadTexts: zhRip2GlobalRouteChanges.setDescription("The number of route changes made to the IP Route Database by RIP. This does not include the refresh of a route's age.")
zhRip2GlobalQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhRip2GlobalQueries.setStatus('current')
if mibBuilder.loadTexts: zhRip2GlobalQueries.setDescription('The number of responses sent to RIP queries from other systems.')
zhRip2GlobalAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhRip2GlobalAdminState.setStatus('current')
if mibBuilder.loadTexts: zhRip2GlobalAdminState.setDescription("An enumeration of the operational state of RIP for a RD. The possible values are either 'disabled' or 'enabled', where the operation of RIP is completely disabled or enabled on all interfaces within a RD. The default is 'enabled'.")
zhRip2GlobalUpdateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 2, 1, 1, 4), Unsigned32().clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhRip2GlobalUpdateTime.setStatus('current')
if mibBuilder.loadTexts: zhRip2GlobalUpdateTime.setDescription('The time in seconds between transmissions of RIP updates on all interfaces within a RD. The default is 30 seconds, which follows RFC 1058 and subsequent RIP RFCs.')
zhRip2IfStatTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 4, 1, 2, 2), )
if mibBuilder.loadTexts: zhRip2IfStatTable.setStatus('current')
if mibBuilder.loadTexts: zhRip2IfStatTable.setDescription('A list of subnets that require separate status monitoring in RIP. Rows are created and destroyed whenever an interface within the RD is created and destroyed. Rows cannot be created or destroyed via SNMP.')
zhRip2IfStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 4, 1, 2, 2, 1), ).setIndexNames((0, "ZHONE-COM-IP-RD-MIB", "rdIndex"), (0, "ZHONE-COM-IP-RIPv2-MIB", "zhRip2IfStatAddress"))
if mibBuilder.loadTexts: zhRip2IfStatEntry.setStatus('current')
if mibBuilder.loadTexts: zhRip2IfStatEntry.setDescription('A single routing domain in a single subnet.')
zhRip2IfStatAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 2, 2, 1, 1), IpAddress())
if mibBuilder.loadTexts: zhRip2IfStatAddress.setStatus('current')
if mibBuilder.loadTexts: zhRip2IfStatAddress.setDescription('The IP Address of this system on the indicated subnet. For unnumbered interfaces, a unique internal identifier is used.')
zhRip2IfStatRcvBadPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 2, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhRip2IfStatRcvBadPackets.setStatus('current')
if mibBuilder.loadTexts: zhRip2IfStatRcvBadPackets.setDescription('The number of RIP response packets received by the RIP process that were subsequently discarded for any reason (e.g. a version 0 packet, or an unknown command type).')
zhRip2IfStatRcvBadRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 2, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhRip2IfStatRcvBadRoutes.setStatus('current')
if mibBuilder.loadTexts: zhRip2IfStatRcvBadRoutes.setDescription('The number of routes, in valid RIP packets, that were ignored for any reason (e.g. unknown address family, or invalid metric).')
zhRip2IfStatSentUpdates = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhRip2IfStatSentUpdates.setStatus('current')
if mibBuilder.loadTexts: zhRip2IfStatSentUpdates.setDescription('The number of triggered RIP updates actually sent on this interface. This explicitly does NOT include full updates sent containing new information.')
zhRip2IfConfTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 4, 1, 2, 3), )
if mibBuilder.loadTexts: zhRip2IfConfTable.setStatus('current')
if mibBuilder.loadTexts: zhRip2IfConfTable.setDescription('A list of subnets that require separate configuration in RIP. Rows are created and destroyed whenever an interface within the RD is created and destroyed. Rows cannot be created or destroyed via SNMP.')
zhRip2IfConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 4, 1, 2, 3, 1), ).setIndexNames((0, "ZHONE-COM-IP-RD-MIB", "rdIndex"), (0, "ZHONE-COM-IP-RIPv2-MIB", "zhRip2IfConfAddress"))
if mibBuilder.loadTexts: zhRip2IfConfEntry.setStatus('current')
if mibBuilder.loadTexts: zhRip2IfConfEntry.setDescription('A single routing domain in a single subnet.')
zhRip2IfConfAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 2, 3, 1, 1), IpAddress())
if mibBuilder.loadTexts: zhRip2IfConfAddress.setStatus('current')
if mibBuilder.loadTexts: zhRip2IfConfAddress.setDescription('The IP Address of this system on the indicated subnet. For unnumbered interfaces, a unique internal identifier is used.')
zhRip2IfConfAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAuthentication", 1), ("simplePassword", 2), ("md5", 3))).clone('noAuthentication')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhRip2IfConfAuthType.setStatus('current')
if mibBuilder.loadTexts: zhRip2IfConfAuthType.setDescription("The type of Authentication used when receiving RIP packets on this interface. When set to 'noAuthentication', no authentication is performed. For 'simplePassword', a clear text password is used in zhRip2IfConfAuthKey. When set to 'md5', an MD5 string is used in zhRip2IfConfAuthKey (see RFC 1321).")
zhRip2IfConfAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 2, 3, 1, 3), RipAuthKey()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhRip2IfConfAuthKey.setStatus('current')
if mibBuilder.loadTexts: zhRip2IfConfAuthKey.setDescription('The value to be used as the Authentication Key whenever the corresponding instance of zhRip2IfConfAuthType has a value other than noAuthentication. A modification of the corresponding instance of zhRip2IfConfAuthType does not modify the zhRip2IfConfAuthKey value. If a string shorter than 16 octets is supplied, it will be left- justified and padded to 16 octets, on the right, with nulls (0x00). Reading this object always results in an OCTET STRING of length zero; authentication may not be bypassed by reading the MIB object.')
zhRip2IfConfSend = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("doNotSend", 1), ("ripVersion1", 2), ("rip1Compatible", 3), ("ripVersion2", 4), ("ripV1Demand", 5), ("ripV2Demand", 6))).clone('rip1Compatible')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhRip2IfConfSend.setStatus('current')
if mibBuilder.loadTexts: zhRip2IfConfSend.setDescription("What the router sends on this interface. If set to 'doNotSend', no RIP updates are sent out on this interface. If set to 'ripVersion1', RIP updates compliant with RFC 1058 are sent. 'rip1Compatible' implies broadcasting RIP-2 updates using RFC 1058 route subsumption rules. 'ripVersion2' implies multicasting RIP-2 updates. 'ripV1Demand' indicates the use of Demand RIP on a WAN interface under RIP Version 1 rules. 'ripV2Demand' indicates the use of Demand RIP on a WAN interface under Version 2 rules. The default is 'rip1Compatible'.")
zhRip2IfConfReceive = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("rip1", 1), ("rip2", 2), ("rip1OrRip2", 3), ("doNotReceive", 4))).clone('rip1OrRip2')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhRip2IfConfReceive.setStatus('current')
if mibBuilder.loadTexts: zhRip2IfConfReceive.setDescription("This indicates which version of RIP updates are to be accepted. When set to 'rip1', only RIP updates compliant with RFC 1058 are received. 'rip2' specifies to receive RIP updates compliant with RFC 1388 only. Setting 'rip1OrRip2' allows reception of RFC 1058 and RFC 1388 compliant RIP updates. If set to 'doNotReceive', the intreface accepts no RIP updates. Note that 'rip2' and 'rip1OrRip2' implies reception of multicast packets. The default is 'rip1OrRip2'.")
zhRip2IfConfDefaultMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhRip2IfConfDefaultMetric.setStatus('current')
if mibBuilder.loadTexts: zhRip2IfConfDefaultMetric.setDescription('This variable indicates the metric that is to be used for the default route entry in RIP updates originated on this interface. A value of zero indicates that no default route should be originated; in this case, a default route via another router may be propagated. The default is set using the metric in the received update.')
zhRip2IfConfSrcAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 2, 3, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhRip2IfConfSrcAddress.setStatus('current')
if mibBuilder.loadTexts: zhRip2IfConfSrcAddress.setDescription('The IP Address this system will use as a source address on this interface. If it is a numbered interface, this MUST be the same value as ipIfAddr (from ZHONE-IP-REC-MIB). On unnumbered interfaces, it must be the value of ipIfAddr for some interface on the system.')
zhRip2IfConfStaticRouteAdvertisement = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("low", 2), ("high", 3), ("both", 4))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhRip2IfConfStaticRouteAdvertisement.setStatus('current')
if mibBuilder.loadTexts: zhRip2IfConfStaticRouteAdvertisement.setDescription("This variable specifies whether to advertise static routes. When set to 'none', no static routes are advertised. For 'low', only low preference static routes are advertised, and when set to 'high' only high preference static routes are advertised. 'both' specifies to advertise both low and high preference static routes. Low preference routes are default routes. The default value is 'none'.")
zhRip2IfConfPoison = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 2, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhRip2IfConfPoison.setStatus('current')
if mibBuilder.loadTexts: zhRip2IfConfPoison.setDescription("This variable specifies whether to send poison reverse updates on this interface. Poison reverse updates are used to prevent larger loops within the network by setting the metric (cost) of neighboring routes to infinity. This will prevent two-hop loops. By default, RIP uses a technique called split horizon to avoid routing loops and allow smaller update packets. Split horizon specifies that when a RIP update is sent out a particular network interface, it should not include routing information acquired over that same interface. Poison Reverse is a variation of the split horizon technique that specifies that all routes are included in an update out a particular interface, but that the metric is set to infinity for routes acquired over that interface. One drawback is that routing update packet sizes are increased when using poison reverse. Setting the value of this object to 'disable' prevents poison reverse updates, where 'enable' allows poison updates to be sent on this interface. The default value is 'disabled'.")
zhRip2PeerTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 4, 1, 2, 4), )
if mibBuilder.loadTexts: zhRip2PeerTable.setStatus('current')
if mibBuilder.loadTexts: zhRip2PeerTable.setDescription('A list of RIP Peers. A row (new peer) is created whenever an interface running RIP receives a RIP update from a new peer. The row is destroyed when the interface has not received a RIP update for more tha 180 seconds. Rows cannot be created or destroyed via SNMP.')
zhRip2PeerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 4, 1, 2, 4, 1), ).setIndexNames((0, "ZHONE-COM-IP-RD-MIB", "rdIndex"), (0, "ZHONE-COM-IP-RIPv2-MIB", "zhRip2PeerAddress"))
if mibBuilder.loadTexts: zhRip2PeerEntry.setStatus('current')
if mibBuilder.loadTexts: zhRip2PeerEntry.setDescription('Information regarding a single routing peer.')
zhRip2PeerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 2, 4, 1, 1), IpAddress())
if mibBuilder.loadTexts: zhRip2PeerAddress.setStatus('current')
if mibBuilder.loadTexts: zhRip2PeerAddress.setDescription('The IP Address that the peer is using as its source address. Note that on an unnumbered link, this may not be a member of any subnet on the system.')
zhRip2PeerLastUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 2, 4, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhRip2PeerLastUpdate.setStatus('current')
if mibBuilder.loadTexts: zhRip2PeerLastUpdate.setDescription('The value of sysUpTime when the most recent RIP update was received from this system.')
zhRip2PeerVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhRip2PeerVersion.setStatus('current')
if mibBuilder.loadTexts: zhRip2PeerVersion.setDescription('The RIP version number in the header of the last RIP packet received.')
zhRip2PeerRcvBadPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 2, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhRip2PeerRcvBadPackets.setStatus('current')
if mibBuilder.loadTexts: zhRip2PeerRcvBadPackets.setDescription('The number of RIP response packets from this peer discarded as invalid.')
zhRip2PeerRcvBadRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 2, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhRip2PeerRcvBadRoutes.setStatus('current')
if mibBuilder.loadTexts: zhRip2PeerRcvBadRoutes.setDescription('The number of routes from this peer that were ignored because the entry format was invalid.')
mibBuilder.exportSymbols("ZHONE-COM-IP-RIPv2-MIB", zhRip2IfStatSentUpdates=zhRip2IfStatSentUpdates, zhRip2GlobalAdminState=zhRip2GlobalAdminState, zhRip2IfConfSrcAddress=zhRip2IfConfSrcAddress, zhRip2GlobalQueries=zhRip2GlobalQueries, zhRip2IfConfPoison=zhRip2IfConfPoison, zhRip2PeerEntry=zhRip2PeerEntry, zhRip2GlobalEntry=zhRip2GlobalEntry, zhRip2PeerVersion=zhRip2PeerVersion, zhRip2PeerTable=zhRip2PeerTable, zhRip2GlobalUpdateTime=zhRip2GlobalUpdateTime, zhRip2IfConfReceive=zhRip2IfConfReceive, zhRip2PeerRcvBadPackets=zhRip2PeerRcvBadPackets, zhRip2PeerRcvBadRoutes=zhRip2PeerRcvBadRoutes, zhRip2PeerLastUpdate=zhRip2PeerLastUpdate, zhRip2IfConfTable=zhRip2IfConfTable, PYSNMP_MODULE_ID=comIpRip2, zhRip2IfConfEntry=zhRip2IfConfEntry, zhRip2IfConfAddress=zhRip2IfConfAddress, zhRip2IfStatRcvBadPackets=zhRip2IfStatRcvBadPackets, zhRip2IfConfAuthKey=zhRip2IfConfAuthKey, RipAuthKey=RipAuthKey, zhRip2IfStatAddress=zhRip2IfStatAddress, zhRip2IfConfDefaultMetric=zhRip2IfConfDefaultMetric, zhRip2IfConfAuthType=zhRip2IfConfAuthType, zhRip2PeerAddress=zhRip2PeerAddress, zhRip2GlobalRouteChanges=zhRip2GlobalRouteChanges, zhRip2GlobalTable=zhRip2GlobalTable, rip2=rip2, zhRip2IfConfStaticRouteAdvertisement=zhRip2IfConfStaticRouteAdvertisement, comIpRip2=comIpRip2, zhRip2IfStatTable=zhRip2IfStatTable, zhRip2IfStatRcvBadRoutes=zhRip2IfStatRcvBadRoutes, zhRip2IfConfSend=zhRip2IfConfSend, zhRip2IfStatEntry=zhRip2IfStatEntry)
