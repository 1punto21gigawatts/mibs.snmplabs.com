#
# PySNMP MIB module CISCO-ENTITY-FRU-CONTROL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-ENTITY-FRU-CONTROL-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:54:03 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
entPhysicalContainedIn, entPhysicalIndex, entPhysicalClass, entPhysicalName, entPhysicalModelName, entPhysicalVendorType = mibBuilder.importSymbols("ENTITY-MIB", "entPhysicalContainedIn", "entPhysicalIndex", "entPhysicalClass", "entPhysicalName", "entPhysicalModelName", "entPhysicalVendorType")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
ModuleIdentity, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, IpAddress, NotificationType, MibIdentifier, TimeTicks, iso, Integer32, ObjectIdentity, Unsigned32, Bits, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "IpAddress", "NotificationType", "MibIdentifier", "TimeTicks", "iso", "Integer32", "ObjectIdentity", "Unsigned32", "Bits", "Counter32")
TextualConvention, TimeStamp, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TimeStamp", "DisplayString", "TruthValue")
ciscoEntityFRUControlMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 117))
ciscoEntityFRUControlMIB.setRevisions(('2013-08-19 00:00', '2011-12-22 00:00', '2011-03-18 00:00', '2010-12-10 00:00', '2008-10-08 00:00', '2007-06-21 00:00', '2007-03-14 00:00', '2006-06-23 00:00', '2005-09-06 00:00', '2004-12-09 00:00', '2004-10-19 00:00', '2003-11-24 00:00', '2003-10-27 00:00', '2003-10-23 00:00', '2003-07-22 00:00', '2002-10-16 00:00', '2002-10-03 00:00', '2002-09-15 00:00', '2002-07-12 00:00', '2001-05-22 00:00', '2000-01-13 00:00', '1999-04-05 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoEntityFRUControlMIB.setRevisionsDescriptions(('Added fwMismatchFound(25), fwDownloadSuccess(26) and fwDownloadFailure(27) to the Textual Convention ModuleOperType', 'Added new enumeration value mdr(24) to ModuleOperType Textual Convention.', 'Added FRUCoolingUnit Textual Convention. Added psRedundantSingleInput(7) to Textual Convention PowerRedundancyType. Added the following groups: cefcFRUPowerRealTimeStatusGroup cefcFRUPowerCapabilityGroup cefcFRUCoolingUnitGroup cefcFRUFanCoolingUnitGroup Deprecated cefcCoolingGroup and replaced with cefcCoolingGroup2 and cefcFanCoolingGroup.', 'Added cefcMIBModuleLocalSwitchingGroup.', 'Added two new enumeration values upgrading(22) and okButAuthFailed(23) to ModuleOperType Textual Convention.', '* Added two new enumeration values : psRedundant(5) and inPwrSrcRedundant(6) to PowerRedundancyType Textual Convention.', '* Added cefcTotalDrawnInlineCurrent and cefcMIBInLinePowerCurrentGroup. * Added cefcPowerNonRedundantReason and cefcMIBPowerRedundancyInfoGroup. * Added cefcFanCoolingCapTable and cefcFanCoolingCapGroup. * Added cefcMIBPowerCompliance8.', "* Added new value 'onButInlinePowerFail(12)' to PowerOperType.", "* Added cefcPowerCapacityGroup, cefcCoolingGroup and cefcConnectorRatingGroup. * Added new enumerator 'powerCycle' to the TC PowerAdminType. * Added two new enumerators 'offCooling' and 'offConnectorRating' to the TC PowerOperType. * Added cefcMIBNotificationEnablesGroup2 and cefcMgmtNotificationsGroup3.", "Removed the additional varbind 'entPhysicalDescr' added in 'cefcFRUInserted' & 'cefcFRURemoved' notifications.", "* Added the enumeration 'syncInProgress' to ModuleOperType Textual Convention. Added an additional varbind 'entPhysicalDescr' in 'cefcFRUInserted' & 'cefcFRURemoved' notifications.", '* Added the enumerations okButPowerOverWarning and okButPowerOverCritical to ModuleOperType Textual Convention.', 'Added poweredDown,poweredUp, powerDenied,powerCycled to ModuleOperType.', '* Added cefcModuleStateChangeReasonDescr and cefcModuleUpTime in the cefcModuleTable. * Added cefcIntelliModuleTable to provide the IP address information for intelligent modules.', '* Modified the description for cefcPowerRedudancyMode to indicate that this object reflects the administrative power supply redundancy mode. * Added cefcPowerRedundancyOperMode to reflect the operational status of the power supply redundancy mode. * Deprecated cefcMaxDefaultInLinePower and added cefcMaxDefaultHighInLinePower to replace it. * Modified the DESCRIPTION for cefcFanTrayStatusTable and cefcFanTrayStatusEntry to reflect the right situation.', 'Added: * Added cefcFanTrayStatusChange notification * Added cefcFanTrayStatusChange to cefcMgmtNotificationsGroup2', 'Added: * cefcFanTrayStatus table containing fan tray status information. * added cefcPhysical table containing status information of the physical entity. * added cefcUnrecognizedFRU notification. * added cefcMIBFanTrayStatusGroup. * added cefcMIBPhysicalGroup.', 'Added: * powerSupplyValue table containing information such as, total and used inline and data power, for variable power supplies. * added following object group cefcMIBPowerFRUValueGroup', 'Added: cefcModuleLastClearConfigTime cefcModuleResetReasonDescription cefcModuleGroupRev1 Modified: Added enumerations watchDogTimeoutReset, resourceOverflowReset, missingTaskReset, lowVoltageReset, controllerReset, systemReset, switchoverReset, upgradeReset, downgradeReset, cacheErrorReset, deviceDriverReset, softwareExceptionReset, restoreConfigReset, abortRevReset, burnBootReset, standbyCdHealthierReset, nonNativeConfigClearReset, and memoryProtectionErrorReset to ModuleResetReasonType TC.', "Modified the description for cefcTotalAvailableCurrent. Changed 'cefcPowerRedundancy' in the description to 'cefcPowerRedundancyMode' Also made the file conform to the 72 char line limit. Imported NOTIFICATION-GROUP Added cefcMgmtNotificationsGroup.", 'Following changes are made in this revision * added following enumerations to ModuleOperType TC: dormant, outOfServiceAdmin, outOfServiceEnvTemp * added outOfServiceAdmin to ModuleAdminType TC * added following notifications: cefcMIBNotificationEnables cefcMIBEnableStatusNotification cefcPowerStatusChange cefcFRUInserted cefcFRURemoved * added following object groups: cefcMIBInLinePowerControlGroup cefcMIBNotificationEnablesGroup', 'Added module table containing the status information.',))
if mibBuilder.loadTexts: ciscoEntityFRUControlMIB.setLastUpdated('201308190000Z')
if mibBuilder.loadTexts: ciscoEntityFRUControlMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoEntityFRUControlMIB.setContactInfo('Postal: Cisco Systems, Inc. 170 West Tasman Drive San Jose, CA 95134-1706 USA Tel: +1 408 526 4000 E-mail: cs-snmp@cisco.com')
if mibBuilder.loadTexts: ciscoEntityFRUControlMIB.setDescription('The CISCO-ENTITY-FRU-CONTROL-MIB is used to monitor and configure operational status of Field Replaceable Units (FRUs) and other managable physical entities of the system listed in the Entity-MIB (RFC 2737) entPhysicalTable. FRUs include assemblies such as power supplies, fans, processor modules, interface modules, etc.')
cefcMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 117, 1))
cefcFRUMIBNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 117, 2))
cefcMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 117, 3))
class PowerRedundancyType(TextualConvention, Integer32):
    description = 'power supply redundancy modes. valid values are: notsupported(1): Read-only operational state, indicates that the requested administrative state (redundant(2), combined(3), psRedundant(5), inPwrSrcRedundant(6) or psRedundantSingleInput(7)) is not supported by the system. redundant(2): A single power supply output can power the entire system, although there are more than one matched supply in the system. In the systems which support multiple level of redundancy, such as input power redundancy, this state indicates that redundancy is enabled on all levels. combined(3): The combined output of the power supplies are available to operate the system when there are more than one matched power supply in the system. In the platforms which support multiple level of redundancy, such as input redundancy, this state indicates that no redundancy on all levels. nonRedundant(4): Read-only operational state, indicates that there is only one power supply or there are unmatched power supplies in the system. psRedundant(5): Only the power output redundancy is enabled in the systems which support multiple levels of redundancy. All other types of redundancy, such as input power redundancy, are disabled. This value is only supported by the systems which support multiple levels of redundancy. inPwrSrcRedundant(6): Only the input power redundancy is enabled in the systems which support multiple levels of redundancy. All other types of redundancy, such as output power redundancy, are disabled. This value is only supported by the systems which support input power redundancy. psRedundantSingleInput(7): Only the power redundancy with single input is enabled in the systems which support multiple levels of redundancy. All other types of redundancy, such as output power redundancy, are disabled. This value is only supported by the systems which support power redundancy with single input.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("notsupported", 1), ("redundant", 2), ("combined", 3), ("nonRedundant", 4), ("psRedundant", 5), ("inPwrSrcRedundant", 6), ("psRedundantSingleInput", 7))

class PowerAdminType(TextualConvention, Integer32):
    description = "Administratively desired FRU power state types. valid values are: on(1): Turn FRU on. off(2): Turn FRU off. The inline power means that the FRU itself won't cost any power, but the external device connecting to the FRU will drain the power from FRU. For example, the IP phone device. The FRU is a port of a switch with voice ability and IP phone will cost power from the port once it connects to the port. inlineAuto(3): Turn FRU inline power to auto mode. It means that the FRU will try to detect whether the connecting device needs power or not. If it needs power, the FRU will supply power. If it doesn't, the FRU will treat the device as a regular network device. inlineOn(4): Turn FRU inline power to on mode. It means that once the device connects to the FRU, the FRU will always supply power to the device no matter the device needs the power or not. powerCycle(5): Power cycle the FRU. This value may be specified in a management protocol set operation, it will not be returned in response to a management protocol retrieval operation."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("on", 1), ("off", 2), ("inlineAuto", 3), ("inlineOn", 4), ("powerCycle", 5))

class PowerOperType(TextualConvention, Integer32):
    description = "Operational FRU Status types. valid values are: offEnvOther(1) FRU is powered off because of a problem not listed below. on(2): FRU is powered on. offAdmin(3): Administratively off. offDenied(4): FRU is powered off because available system power is insufficient. offEnvPower(5): FRU is powered off because of power problem in the FRU. for example, the FRU's power translation (DC-DC converter) or distribution failed. offEnvTemp(6): FRU is powered off because of temperature problem. offEnvFan(7): FRU is powered off because of fan problems. failed(8): FRU is in failed state. onButFanFail(9): FRU is on, but fan has failed. offCooling(10): FRU is powered off because of the system's insufficient cooling capacity. offConnectorRating(11): FRU is powered off because of the system's connector rating exceeded. onButInlinePowerFail(12): The FRU on, but no inline power is being delivered as the data/inline power component of the FRU has failed."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))
    namedValues = NamedValues(("offEnvOther", 1), ("on", 2), ("offAdmin", 3), ("offDenied", 4), ("offEnvPower", 5), ("offEnvTemp", 6), ("offEnvFan", 7), ("failed", 8), ("onButFanFail", 9), ("offCooling", 10), ("offConnectorRating", 11), ("onButInlinePowerFail", 12))

class FRUCurrentType(TextualConvention, Integer32):
    description = 'a current measurement, on the system power supply primary output, expressed in cefcPowerUnits. Range is from negative 1 million to positive one million amperes. A negative value expresses current used by the FRU. A positive value expresses current supplied by the FRU.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(-1000000000, 1000000000)

class ModuleAdminType(TextualConvention, Integer32):
    description = 'Administratively desired module states. Valid values are: enabled(1) module is operational. disabled(2) module is not operational. reset(3) module is reset. This value may be specified in a management protocol set operation, it will not be returned in response to a management protocol retrieval operation. outOfServiceAdmin(4) module is powered on but out of service, set by CLI.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("enabled", 1), ("disabled", 2), ("reset", 3), ("outOfServiceAdmin", 4))

class ModuleOperType(TextualConvention, Integer32):
    description = 'Operational module states. Valid values are : unknown(1) Module is not in one of other states normal operational states: ok(2) Module is operational. disabled(3) Module is administratively disabled. okButDiagFailed(4) Module is operational but there is some diagnostic information available. transitional states: boot(5) Module is currently in the process of bringing up image. After boot, it starts its operational software and transitions to the appropriate state. selfTest(6) Module is performing selfTest. failure states: failed(7) Module has failed due to some condition not stated above. missing(8) Module has been provisioned, but it is missing mismatchWithParent(9) Module is not compatible with parent entity. Module has not been provisioned and wrong type of module is plugged in. This state can be cleared by plugging in the appropriate module. mismatchConfig(10) Module is not compatible with the current configuration. Module was correctly provisioned earlier, however the module was replaced by an incompatible module. This state can be resolved by clearing the configuration, or replacing with the appropriate module. diagFailed(11) Module diagnostic test failed due to some hardware failure. dormant(12) Module is waiting for an external or internal event to become operational. outOfServiceAdmin(13) module is administratively set to be powered on but out of service. outOfServiceEnvTemp(14)Module is powered on but out of service, due to environmental temperature problem. An out-o-service module consumes less power thus will cool down the board. poweredDown(15) Module is in powered down state. poweredUp(16) Module is in powered up state. powerDenied(17) System does not have enough power in power budget to power on this module. powerCycled(18) Module is being power cycled. okButPowerOverWarning(19) Module is drawing more power than allocated to this module. The module is still operational but may go into a failure state. This state may be caused by misconfiguration of power requirements (especially for inline power). okButPowerOverCritical(20) Module is drawing more power than this module is designed to handle. The module is still operational but may go into a failure state and could potentially take the system down. This state may be caused by gross misconfi- guration of power requirements (especially for inline power). syncInProgress(21) Synchronization in progress. In a high availability system there will be 2 control modules, active and standby. This transitional state specifies the synchronization of data between the active and standby modules. upgrading(22) Module is upgrading. okButAuthFailed(23) Module is operational but did not pass hardware integrity verification. mdr(24) Module is undergoing a Minimum Disruptive Restart (MDR) upgrade. firmware download states: fwMismatchFound(25) Mistmatch found between current firmware version and the firmware version in the system image. fwDownloadSuccess(26) Module firmware download succeeded. fwDownloadFailure(27) Module firmware download failed.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27))
    namedValues = NamedValues(("unknown", 1), ("ok", 2), ("disabled", 3), ("okButDiagFailed", 4), ("boot", 5), ("selfTest", 6), ("failed", 7), ("missing", 8), ("mismatchWithParent", 9), ("mismatchConfig", 10), ("diagFailed", 11), ("dormant", 12), ("outOfServiceAdmin", 13), ("outOfServiceEnvTemp", 14), ("poweredDown", 15), ("poweredUp", 16), ("powerDenied", 17), ("powerCycled", 18), ("okButPowerOverWarning", 19), ("okButPowerOverCritical", 20), ("syncInProgress", 21), ("upgrading", 22), ("okButAuthFailed", 23), ("mdr", 24), ("fwMismatchFound", 25), ("fwDownloadSuccess", 26), ("fwDownloadFailure", 27))

class ModuleResetReasonType(TextualConvention, Integer32):
    description = 'Describes the reason for the last module reset operation. unknown(1) source of the reset is not identified powerUp(2) system power up operation parityError(3) parity error during system bring up operation clearConfigReset(4) reset due to clear configuration operation manualReset(5) reset due to administrative request watchDogTimeoutReset(6) reset due to watchdog timeout resourceOverflowReset(7) reset due to resource overflow missingTaskReset(8) reset due to missing task lowVoltageReset(9) reset due to low voltage controllerReset(10) reset by controller systemReset(11) system reset switchoverReset(12) reset due to user initiated graceful switchover upgradeReset(13) reset due to upgrade downgradeReset(14) reset due to downgrade cacheErrorReset(15) reset due to cache error deviceDriverReset(16) reset due to device driver error softwareExceptionReset(17) reset due to software exception restoreConfigReset(18) reset due to configuration restoration abortRevReset(19) reset due to revision change abort burnBootReset(20) reset due to boot image change standbyCdHealthierReset(21) reset to switch to healthier standby card nonNativeConfigClearReset(22) reset due clearing of non-native configuration memoryProtectionErrorReset(23) reset due to memory protection violation.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23))
    namedValues = NamedValues(("unknown", 1), ("powerUp", 2), ("parityError", 3), ("clearConfigReset", 4), ("manualReset", 5), ("watchDogTimeoutReset", 6), ("resourceOverflowReset", 7), ("missingTaskReset", 8), ("lowVoltageReset", 9), ("controllerReset", 10), ("systemReset", 11), ("switchoverReset", 12), ("upgradeReset", 13), ("downgradeReset", 14), ("cacheErrorReset", 15), ("deviceDriverReset", 16), ("softwareExceptionReset", 17), ("restoreConfigReset", 18), ("abortRevReset", 19), ("burnBootReset", 20), ("standbyCdHealthierReset", 21), ("nonNativeConfigClearReset", 22), ("memoryProtectionErrorReset", 23))

class FRUTimeSeconds(TextualConvention, Unsigned32):
    description = 'This is a non-negative integer which represents the time in second between two epochs. Since time is not discrete, it is rounded up to the nearest second. For example, if the elapsed time is greater than zero and less or equal to one second, then one second is returned, etc. When objects are defined which use this type, the description of the object identifies both of the reference epochs.'
    status = 'current'

class FRUCoolingUnit(TextualConvention, Integer32):
    description = 'The unit for the cooling capacity and requirement. cfm(1) Cubic feet per minute watts(2) Watts'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("cfm", 1), ("watts", 2))

cefcFRUPower = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 1))
cefcModule = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 2))
cefcMIBNotificationEnables = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 3))
cefcFRUFan = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 4))
cefcPhysical = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 5))
cefcPowerCapacity = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 6))
cefcCooling = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 7))
cefcConnector = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 8))
cefcFRUPowerSupplyGroupTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 1, 1), )
if mibBuilder.loadTexts: cefcFRUPowerSupplyGroupTable.setStatus('current')
if mibBuilder.loadTexts: cefcFRUPowerSupplyGroupTable.setDescription('This table lists the redundancy mode and the operational status of the power supply groups in the system.')
cefcFRUPowerSupplyGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 1, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: cefcFRUPowerSupplyGroupEntry.setStatus('current')
if mibBuilder.loadTexts: cefcFRUPowerSupplyGroupEntry.setDescription('An cefcFRUPowerSupplyGroupTable entry lists the desired redundancy mode, the units of the power outputs and the available and drawn current for the power supply group. Entries are created by the agent when a power supply group is added to the entPhysicalTable. Entries are deleted by the agent at power supply group removal.')
cefcPowerRedundancyMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 1, 1, 1, 1), PowerRedundancyType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cefcPowerRedundancyMode.setStatus('current')
if mibBuilder.loadTexts: cefcPowerRedundancyMode.setDescription('The administratively desired power supply redundancy mode.')
cefcPowerUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefcPowerUnits.setStatus('current')
if mibBuilder.loadTexts: cefcPowerUnits.setDescription("The units of primary supply to interpret cefcTotalAvailableCurrent and cefcTotalDrawnCurrent as power. For example, one 1000-watt power supply could deliver 100 amperes at 10 volts DC. So the value of cefcPowerUnits would be 'at 10 volts DC'. cefcPowerUnits is for display purposes only.")
cefcTotalAvailableCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 1, 1, 1, 3), FRUCurrentType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefcTotalAvailableCurrent.setStatus('current')
if mibBuilder.loadTexts: cefcTotalAvailableCurrent.setDescription('Total current available for FRU usage.')
cefcTotalDrawnCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 1, 1, 1, 4), FRUCurrentType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefcTotalDrawnCurrent.setStatus('current')
if mibBuilder.loadTexts: cefcTotalDrawnCurrent.setDescription('Total current drawn by powered-on FRUs.')
cefcPowerRedundancyOperMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 1, 1, 1, 5), PowerRedundancyType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefcPowerRedundancyOperMode.setStatus('current')
if mibBuilder.loadTexts: cefcPowerRedundancyOperMode.setDescription('The power supply redundancy operational mode.')
cefcPowerNonRedundantReason = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notApplicable", 1), ("unknown", 2), ("singleSupply", 3), ("mismatchedSupplies", 4), ("supplyError", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefcPowerNonRedundantReason.setStatus('current')
if mibBuilder.loadTexts: cefcPowerNonRedundantReason.setDescription('This object has the value of notApplicable(1) when cefcPowerRedundancyOperMode of the instance does not have the value of nonRedundant(4). The other values explain the reason why cefcPowerRedundancyOperMode is nonRedundant(4), e.g. unknown(2) the reason is not identified. singleSupply(3) There is only one power supply in the group. mismatchedSupplies(4) There are more than one power supplies in the groups. However they are mismatched and can not work redundantly. supplyError(5) Some power supply or supplies does or do not working properly.')
cefcTotalDrawnInlineCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 1, 1, 1, 7), FRUCurrentType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefcTotalDrawnInlineCurrent.setStatus('current')
if mibBuilder.loadTexts: cefcTotalDrawnInlineCurrent.setDescription('Total inline current drawn for inline operation.')
cefcFRUPowerStatusTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 1, 2), )
if mibBuilder.loadTexts: cefcFRUPowerStatusTable.setStatus('current')
if mibBuilder.loadTexts: cefcFRUPowerStatusTable.setDescription('This table lists the power-related administrative status and operational status of the manageable components in the system.')
cefcFRUPowerStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 1, 2, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: cefcFRUPowerStatusEntry.setStatus('current')
if mibBuilder.loadTexts: cefcFRUPowerStatusEntry.setDescription('An cefcFRUPowerStatusTable entry lists the desired administrative status, the operational status of the power manageable component, and the current required by the component for operation. Entries are created by the agent at system power-up or the insertion of the component. Entries are deleted by the agent at the removal of the component. Only components with power control are listed in the table.')
cefcFRUPowerAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 1, 2, 1, 1), PowerAdminType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cefcFRUPowerAdminStatus.setStatus('current')
if mibBuilder.loadTexts: cefcFRUPowerAdminStatus.setDescription('Administratively desired FRU power state.')
cefcFRUPowerOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 1, 2, 1, 2), PowerOperType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefcFRUPowerOperStatus.setStatus('current')
if mibBuilder.loadTexts: cefcFRUPowerOperStatus.setDescription('Operational FRU power state.')
cefcFRUCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 1, 2, 1, 3), FRUCurrentType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefcFRUCurrent.setStatus('current')
if mibBuilder.loadTexts: cefcFRUCurrent.setDescription('Current supplied by the FRU (positive values) or current required to operate the FRU (negative values).')
cefcFRUPowerCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 1, 2, 1, 4), Bits().clone(namedValues=NamedValues(("realTimeCurrent", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefcFRUPowerCapability.setStatus('current')
if mibBuilder.loadTexts: cefcFRUPowerCapability.setDescription('This object indicates the set of supported power capabilities of the FRU. realTimeCurrent(0) - cefcFRURealTimeCurrent is supported by the FRU.')
cefcFRURealTimeCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 1, 2, 1, 5), FRUCurrentType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefcFRURealTimeCurrent.setStatus('current')
if mibBuilder.loadTexts: cefcFRURealTimeCurrent.setDescription('This object indicates the realtime value of current supplied by the FRU (positive values) or the realtime value of current drawn by the FRU (negative values).')
cefcMaxDefaultInLinePower = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 12500)).clone(12500)).setUnits('miliwatts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cefcMaxDefaultInLinePower.setStatus('deprecated')
if mibBuilder.loadTexts: cefcMaxDefaultInLinePower.setDescription('The system will provide power to the device connecting to the FRU if the device needs power, like an IP Phone. We call the providing power inline power. This MIB object controls the maximum default inline power for the device connecting to the FRU in the system. If the maximum default inline power of the device is greater than the maximum value reportable by this object, then this object should report its maximum reportable value (12500) and cefcMaxDefaultHighInLinePower must be used to report the actual maximum default inline power.')
cefcFRUPowerSupplyValueTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 1, 4), )
if mibBuilder.loadTexts: cefcFRUPowerSupplyValueTable.setStatus('current')
if mibBuilder.loadTexts: cefcFRUPowerSupplyValueTable.setDescription('This table lists the power capacity of a power FRU in the system if it provides variable power. Power supplies usually provide either system or inline power. They cannot be controlled by software to dictate how they distribute power. We can also have what are known as variable power supplies. They can provide both system and inline power and can be varied within hardware defined ranges for system and inline limited by a total maximum combined output. They could be configured by the user via CLI or SNMP or be controlled by software internally. This table supplements the information in the cefcFRUPowerStatusTable for power supply FRUs. The cefcFRUCurrent attribute in that table provides the overall current the power supply FRU can provide while this table gives us the individual contribution towards system and inline power.')
cefcFRUPowerSupplyValueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 1, 4, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: cefcFRUPowerSupplyValueEntry.setStatus('current')
if mibBuilder.loadTexts: cefcFRUPowerSupplyValueEntry.setDescription('An cefcFRUPowerSupplyValueTable entry lists the current provided by the FRU for operation. Entries are created by the agent at system power-up or FRU insertion. Entries are deleted by the agent at FRU removal. Only power supply FRUs are listed in the table.')
cefcFRUTotalSystemCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 1, 4, 1, 1), FRUCurrentType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cefcFRUTotalSystemCurrent.setStatus('current')
if mibBuilder.loadTexts: cefcFRUTotalSystemCurrent.setDescription('Total current that could be supplied by the FRU (positive values) for system operations.')
cefcFRUDrawnSystemCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 1, 4, 1, 2), FRUCurrentType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cefcFRUDrawnSystemCurrent.setStatus('current')
if mibBuilder.loadTexts: cefcFRUDrawnSystemCurrent.setDescription("Amount of current drawn by the FRU's in the system towards system operations from this FRU")
cefcFRUTotalInlineCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 1, 4, 1, 3), FRUCurrentType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cefcFRUTotalInlineCurrent.setStatus('current')
if mibBuilder.loadTexts: cefcFRUTotalInlineCurrent.setDescription('Total current supplied by the FRU (positive values) for inline operations.')
cefcFRUDrawnInlineCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 1, 4, 1, 4), FRUCurrentType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cefcFRUDrawnInlineCurrent.setStatus('current')
if mibBuilder.loadTexts: cefcFRUDrawnInlineCurrent.setDescription('Amount of current that is being drawn from this FRU for inline operation.')
cefcMaxDefaultHighInLinePower = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 1, 5), Unsigned32()).setUnits('miliwatts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cefcMaxDefaultHighInLinePower.setStatus('current')
if mibBuilder.loadTexts: cefcMaxDefaultHighInLinePower.setDescription('The system will provide power to the device connecting to the FRU if the device needs power, like an IP Phone. We call the providing power inline power. This MIB object controls the maximum default inline power for the device connecting to the FRU in the system.')
cefcModuleTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 2, 1), )
if mibBuilder.loadTexts: cefcModuleTable.setStatus('current')
if mibBuilder.loadTexts: cefcModuleTable.setDescription('A cefcModuleTable entry lists the operational and administrative status information for ENTITY-MIB entPhysicalTable entries for manageable components of type PhysicalClass module(9).')
cefcModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 2, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: cefcModuleEntry.setStatus('current')
if mibBuilder.loadTexts: cefcModuleEntry.setDescription('A cefcModuleStatusTable entry lists the operational and administrative status information for ENTITY-MIB entPhysicalTable entries for manageable components of type PhysicalClass module(9). Entries are created by the agent at the system power-up or module insertion. Entries are deleted by the agent upon module removal.')
cefcModuleAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 2, 1, 1, 1), ModuleAdminType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cefcModuleAdminStatus.setStatus('current')
if mibBuilder.loadTexts: cefcModuleAdminStatus.setDescription('This object provides administrative control of the module.')
cefcModuleOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 2, 1, 1, 2), ModuleOperType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefcModuleOperStatus.setStatus('current')
if mibBuilder.loadTexts: cefcModuleOperStatus.setDescription("This object shows the module's operational state.")
cefcModuleResetReason = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 2, 1, 1, 3), ModuleResetReasonType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefcModuleResetReason.setStatus('current')
if mibBuilder.loadTexts: cefcModuleResetReason.setDescription('This object identifies the reason for the last reset performed on the module.')
cefcModuleStatusLastChangeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 2, 1, 1, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefcModuleStatusLastChangeTime.setStatus('current')
if mibBuilder.loadTexts: cefcModuleStatusLastChangeTime.setDescription('The value of sysUpTime at the time the cefcModuleOperStatus is changed.')
cefcModuleLastClearConfigTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 2, 1, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefcModuleLastClearConfigTime.setStatus('current')
if mibBuilder.loadTexts: cefcModuleLastClearConfigTime.setDescription('The value of sysUpTime when the configuration was most recently cleared.')
cefcModuleResetReasonDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 2, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefcModuleResetReasonDescription.setStatus('current')
if mibBuilder.loadTexts: cefcModuleResetReasonDescription.setDescription('A description qualifying the module reset reason specified in cefcModuleResetReason. Examples: command xyz missing task switch over watchdog timeout etc. cefcModuleResetReasonDescription is for display purposes only. NMS applications must not parse.')
cefcModuleStateChangeReasonDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 2, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefcModuleStateChangeReasonDescr.setStatus('current')
if mibBuilder.loadTexts: cefcModuleStateChangeReasonDescr.setDescription("This object displays human-readable textual string which describes the cause of the last state change of the module. This object contains zero length string if no meaningful reason could be provided. Examples: 'Invalid software version' 'Software download failed' 'Software version mismatch' 'Module is in standby state' etc. This object is for display purposes only. NMS applications must not parse this object and take any decision based on its value.")
cefcModuleUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 2, 1, 1, 8), FRUTimeSeconds()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefcModuleUpTime.setStatus('current')
if mibBuilder.loadTexts: cefcModuleUpTime.setDescription('This object provides the up time for the module since it was last re-initialized. This object is not persistent; if a module reset, restart, power off, the up time starts from zero.')
cefcIntelliModuleTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 2, 2), )
if mibBuilder.loadTexts: cefcIntelliModuleTable.setStatus('current')
if mibBuilder.loadTexts: cefcIntelliModuleTable.setDescription('This table sparsely augments the cefcModuleTable (i.e., every row in this table corresponds to a row in the cefcModuleTable but not necessarily vice-versa). A cefcIntelliModuleTable entry lists the information specific to intelligent modules which cannot be provided by the cefcModuleTable.')
cefcIntelliModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 2, 2, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: cefcIntelliModuleEntry.setStatus('current')
if mibBuilder.loadTexts: cefcIntelliModuleEntry.setDescription("A cefcIntelliModuleTable entry lists the information specific to an intelligent module which cannot be provided by this module's corresponding instance in the cefcModuleTable. Only an intelligent module with Internet address configured has its entry here. An entry of this table is created if an intelligent module is detected by the managed system and its management Internet address is configured on the intelligent module. An entry of this table is deleted if the removal of Internet address configuration of this module or the module itself.")
cefcIntelliModuleIPAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 2, 2, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefcIntelliModuleIPAddrType.setStatus('current')
if mibBuilder.loadTexts: cefcIntelliModuleIPAddrType.setDescription('The type of Internet address by which the intelligent module is reachable.')
cefcIntelliModuleIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 2, 2, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefcIntelliModuleIPAddr.setStatus('current')
if mibBuilder.loadTexts: cefcIntelliModuleIPAddr.setDescription('The Internet address configured for the intelligent module. The type of this address is determined by the value of the object cefcIntelliModuleIPAddrType.')
cefcModuleLocalSwitchingTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 2, 3), )
if mibBuilder.loadTexts: cefcModuleLocalSwitchingTable.setStatus('current')
if mibBuilder.loadTexts: cefcModuleLocalSwitchingTable.setDescription('This table sparsely augments the cefcModuleTable (i.e., every row in this table corresponds to a row in the cefcModuleTable but not necessarily vice-versa). A cefcModuleLocalSwitchingTable entry lists the information specific to local switching capable modules which cannot be provided by the cefcModuleTable.')
cefcModuleLocalSwitchingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 2, 3, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: cefcModuleLocalSwitchingEntry.setStatus('current')
if mibBuilder.loadTexts: cefcModuleLocalSwitchingEntry.setDescription("A cefcModuleLocalSwitchingTable entry lists the information specific to a local switching capable module which cannot be provided by this module's corresponding instance in the cefcModuleTable. Only a module which is capable of local switching has its entry here. An entry of this table is created if a module which is capable of local switching is detected by the managed system. An entry of this table is deleted if the removal of this module.")
cefcModuleLocalSwitchingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cefcModuleLocalSwitchingMode.setStatus('current')
if mibBuilder.loadTexts: cefcModuleLocalSwitchingMode.setDescription('This object specifies the mode of local switching. enabled(1) - local switching is enabled. disabled(2) - local switching is disabled.')
cefcFanTrayStatusTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 4, 1), )
if mibBuilder.loadTexts: cefcFanTrayStatusTable.setStatus('current')
if mibBuilder.loadTexts: cefcFanTrayStatusTable.setDescription("This table contains the operational status information for all ENTITY-MIB entPhysicalTable entries which have an entPhysicalClass of 'fan'; specifically, all entPhysicalTable entries which represent either: one physical fan, or a single physical 'fan tray' which is a manufactured (inseparable in the field) combination of multiple fans.")
cefcFanTrayStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 4, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: cefcFanTrayStatusEntry.setStatus('current')
if mibBuilder.loadTexts: cefcFanTrayStatusEntry.setDescription("An cefcFanTrayStatusTable entry lists the operational status information for the ENTITY-MIB entPhysicalTable entry which is identified by the value of entPhysicalIndex. The value of entPhysicalClass for the identified entry will be 'fan', and the represented physical entity will be either: one physical fan, or a single physical 'fan tray' which is a manufactured (inseparable in the field) combination of multiple fans. Entries are created by the agent at system power-up or fan or fan tray insertion. Entries are deleted by the agent at the fan or fan tray removal.")
cefcFanTrayOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("up", 2), ("down", 3), ("warning", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefcFanTrayOperStatus.setStatus('current')
if mibBuilder.loadTexts: cefcFanTrayOperStatus.setDescription('The operational state of the fan or fan tray. unknown(1) - unknown. up(2) - powered on. down(3) - powered down. warning(4) - partial failure, needs replacement as soon as possible.')
cefcPhysicalTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 5, 1), )
if mibBuilder.loadTexts: cefcPhysicalTable.setStatus('current')
if mibBuilder.loadTexts: cefcPhysicalTable.setDescription('This table contains one row per physical entity.')
cefcPhysicalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 5, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: cefcPhysicalEntry.setStatus('current')
if mibBuilder.loadTexts: cefcPhysicalEntry.setDescription('Information about a particular physical entity.')
cefcPhysicalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("supported", 2), ("unsupported", 3), ("incompatible", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefcPhysicalStatus.setStatus('current')
if mibBuilder.loadTexts: cefcPhysicalStatus.setDescription('The status of this physical entity. other(1) - the status is not any of the listed below. supported(2) - this entity is supported. unsupported(3) - this entity is unsupported. incompatible(4) - this entity is incompatible. It would be unsupported(3), if the ID read from Serial EPROM is not supported. It would be incompatible(4), if in the present configuration this FRU is not supported.')
cefcPowerSupplyInputTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 6, 1), )
if mibBuilder.loadTexts: cefcPowerSupplyInputTable.setStatus('current')
if mibBuilder.loadTexts: cefcPowerSupplyInputTable.setDescription("This table contains the power input information for all the power supplies that have entPhysicalTable entries with 'powerSupply' in the entPhysicalClass. The entries are created by the agent at the system power-up or power supply insertion. Entries are deleted by the agent upon power supply removal. The number of entries is determined by the number of power supplies and number of power inputs on the power supply.")
cefcPowerSupplyInputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 6, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-ENTITY-FRU-CONTROL-MIB", "cefcPowerSupplyInputIndex"))
if mibBuilder.loadTexts: cefcPowerSupplyInputEntry.setStatus('current')
if mibBuilder.loadTexts: cefcPowerSupplyInputEntry.setDescription('An entry containing power input management information applicable to a particular power supply and input.')
cefcPowerSupplyInputIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 6, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cefcPowerSupplyInputIndex.setStatus('current')
if mibBuilder.loadTexts: cefcPowerSupplyInputIndex.setDescription('A unique value, greater than zero, for each input on a power supply.')
cefcPowerSupplyInputType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("acLow", 2), ("acHigh", 3), ("dcLow", 4), ("dcHigh", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefcPowerSupplyInputType.setStatus('current')
if mibBuilder.loadTexts: cefcPowerSupplyInputType.setDescription('The type of an input power detected on the power supply. unknown(1): No input power is detected. acLow(2): Lower rating AC input power is detected. acHigh(3): Higher rating AC input power is detected. dcLow(4): Lower rating DC input power is detected. dcHigh(5): Higher rating DC input power is detected.')
cefcPowerSupplyOutputTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 6, 2), )
if mibBuilder.loadTexts: cefcPowerSupplyOutputTable.setStatus('current')
if mibBuilder.loadTexts: cefcPowerSupplyOutputTable.setDescription("This table contains a list of possible output mode for the power supplies, whose ENTITY-MIB entPhysicalTable entries have an entPhysicalClass of 'powerSupply'. It also indicate which mode is the operational mode within the system.")
cefcPowerSupplyOutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 6, 2, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-ENTITY-FRU-CONTROL-MIB", "cefcPSOutputModeIndex"))
if mibBuilder.loadTexts: cefcPowerSupplyOutputEntry.setStatus('current')
if mibBuilder.loadTexts: cefcPowerSupplyOutputEntry.setDescription("A cefcPowerSupplyOutputTable entry lists the power output capacity and its operational status for manageable components of type PhysicalClass 'powerSupply'. Entries are created by the agent at the system power-up or power supply insertion. Entries are deleted by the agent upon power supply removal. The number of entries of a power supply is determined by the power supply.")
cefcPSOutputModeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 6, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cefcPSOutputModeIndex.setStatus('current')
if mibBuilder.loadTexts: cefcPSOutputModeIndex.setDescription('A unique value, greater than zero, for each possible output mode on a power supply.')
cefcPSOutputModeCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 6, 2, 1, 2), FRUCurrentType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefcPSOutputModeCurrent.setStatus('current')
if mibBuilder.loadTexts: cefcPSOutputModeCurrent.setDescription('The output capacity of the power supply.')
cefcPSOutputModeInOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 6, 2, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefcPSOutputModeInOperation.setStatus('current')
if mibBuilder.loadTexts: cefcPSOutputModeInOperation.setDescription("A value of 'true' indicates that this mode is the operational mode of the power supply output capacity. A value of 'false' indicates that this mode is not the operational mode of the power supply output capacity. For a given power supply's entPhysicalIndex, at most one instance of this object can have the value of true(1).")
cefcChassisCoolingTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 7, 1), )
if mibBuilder.loadTexts: cefcChassisCoolingTable.setStatus('current')
if mibBuilder.loadTexts: cefcChassisCoolingTable.setDescription("This table contains the cooling capacity information of the chassis whose ENTITY-MIB entPhysicalTable entries have an entPhysicalClass of 'chassis'.")
cefcChassisCoolingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 7, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: cefcChassisCoolingEntry.setStatus('current')
if mibBuilder.loadTexts: cefcChassisCoolingEntry.setDescription("A cefcChassisCoolingEntry lists the maximum cooling capacity that could be provided for one slot on the manageable components of type PhysicalClass 'chassis'. Entries are created by the agent if the corresponding entry is created in ENTITY-MIB entPhysicalTable. Entries are deleted by the agent if the corresponding entry is deleted in ENTITY-MIB entPhysicalTable.")
cefcChassisPerSlotCoolingCap = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 7, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefcChassisPerSlotCoolingCap.setStatus('current')
if mibBuilder.loadTexts: cefcChassisPerSlotCoolingCap.setDescription("The maximum cooling capacity that could be provided for any slot in this chassis. The default unit of the cooling capacity is 'cfm', if cefcChassisPerSlotCoolingUnit is not supported.")
cefcChassisPerSlotCoolingUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 7, 1, 1, 2), FRUCoolingUnit()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefcChassisPerSlotCoolingUnit.setStatus('current')
if mibBuilder.loadTexts: cefcChassisPerSlotCoolingUnit.setDescription('The unit of the maximum cooling capacity for any slot in this chassis.')
cefcFanCoolingTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 7, 2), )
if mibBuilder.loadTexts: cefcFanCoolingTable.setStatus('current')
if mibBuilder.loadTexts: cefcFanCoolingTable.setDescription("This table contains the cooling capacity information of the fans whose ENTITY-MIB entPhysicalTable entries have an entPhysicalClass of 'fan'.")
cefcFanCoolingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 7, 2, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: cefcFanCoolingEntry.setStatus('current')
if mibBuilder.loadTexts: cefcFanCoolingEntry.setDescription("A cefcFanCoolingEntry lists the cooling capacity that is provided by the manageable components of type PhysicalClass 'fan'. Entries are created by the agent if the corresponding entry is created in ENTITY-MIB entPhysicalTable. Entries are deleted by the agent if the corresponding entry is deleted in ENTITY-MIB entPhysicalTable.")
cefcFanCoolingCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 7, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefcFanCoolingCapacity.setStatus('current')
if mibBuilder.loadTexts: cefcFanCoolingCapacity.setDescription("The cooling capacity that is provided by this fan. The default unit of the fan cooling capacity is 'cfm', if cefcFanCoolingCapacityUnit is not supported.")
cefcFanCoolingCapacityUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 7, 2, 1, 2), FRUCoolingUnit()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefcFanCoolingCapacityUnit.setStatus('current')
if mibBuilder.loadTexts: cefcFanCoolingCapacityUnit.setDescription('The unit of the fan cooling capacity.')
cefcModuleCoolingTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 7, 3), )
if mibBuilder.loadTexts: cefcModuleCoolingTable.setStatus('current')
if mibBuilder.loadTexts: cefcModuleCoolingTable.setDescription("This table contains the cooling requirement for all the manageable components of type entPhysicalClass 'module'.")
cefcModuleCoolingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 7, 3, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: cefcModuleCoolingEntry.setStatus('current')
if mibBuilder.loadTexts: cefcModuleCoolingEntry.setDescription("A cefcModuleCoolingEntry lists the cooling requirement for a manageable components of type entPhysicalClass 'module'. Entries are created by the agent at the system power-up or module insertion. Entries are deleted by the agent upon module removal.")
cefcModuleCooling = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 7, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefcModuleCooling.setStatus('current')
if mibBuilder.loadTexts: cefcModuleCooling.setDescription("The cooling requirement of the module and its daughter cards. The default unit of the module cooling requirement is 'cfm', if cefcModuleCoolingUnit is not supported.")
cefcModuleCoolingUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 7, 3, 1, 2), FRUCoolingUnit()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefcModuleCoolingUnit.setStatus('current')
if mibBuilder.loadTexts: cefcModuleCoolingUnit.setDescription('The unit of the cooling requirement of the module and its daughter cards.')
cefcFanCoolingCapTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 7, 4), )
if mibBuilder.loadTexts: cefcFanCoolingCapTable.setStatus('current')
if mibBuilder.loadTexts: cefcFanCoolingCapTable.setDescription("This table contains a list of the possible cooling capacity modes and properties of the fans, whose ENTITY-MIB entPhysicalTable entries have an entPhysicalClass of 'fan'.")
cefcFanCoolingCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 7, 4, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-ENTITY-FRU-CONTROL-MIB", "cefcFanCoolingCapIndex"))
if mibBuilder.loadTexts: cefcFanCoolingCapEntry.setStatus('current')
if mibBuilder.loadTexts: cefcFanCoolingCapEntry.setDescription("A cefcFanCoolingCapacityEntry lists the cooling capacity mode of a manageable components of type entPhysicalClass 'fan'. It also lists the corresponding cooling capacity provided and the power consumed by the fan on this mode. Entries are created by the agent if the corresponding entry is created in ENTITY-MIB entPhysicalTable. Entries are deleted by the agent if the corresponding entry is deleted in ENTITY-MIB entPhysicalTable.")
cefcFanCoolingCapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 7, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095)))
if mibBuilder.loadTexts: cefcFanCoolingCapIndex.setStatus('current')
if mibBuilder.loadTexts: cefcFanCoolingCapIndex.setDescription('An arbitrary value that uniquely identifies a cooling capacity mode for a fan.')
cefcFanCoolingCapModeDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 7, 4, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefcFanCoolingCapModeDescr.setStatus('current')
if mibBuilder.loadTexts: cefcFanCoolingCapModeDescr.setDescription('A textual description of the cooling capacity mode of the fan.')
cefcFanCoolingCapCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 7, 4, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefcFanCoolingCapCapacity.setStatus('current')
if mibBuilder.loadTexts: cefcFanCoolingCapCapacity.setDescription("The cooling capacity that could be provided when the fan is operating in this mode. The default unit of the cooling capacity is 'cfm', if cefcFanCoolingCapCapacityUnit is not supported.")
cefcFanCoolingCapCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 7, 4, 1, 4), FRUCurrentType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefcFanCoolingCapCurrent.setStatus('current')
if mibBuilder.loadTexts: cefcFanCoolingCapCurrent.setDescription('The power consumption of the fan when operating in in this mode.')
cefcFanCoolingCapCapacityUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 7, 4, 1, 5), FRUCoolingUnit()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefcFanCoolingCapCapacityUnit.setStatus('current')
if mibBuilder.loadTexts: cefcFanCoolingCapCapacityUnit.setDescription('The unit of the fan cooling capacity when operating in this mode.')
cefcConnectorRatingTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 8, 1), )
if mibBuilder.loadTexts: cefcConnectorRatingTable.setStatus('current')
if mibBuilder.loadTexts: cefcConnectorRatingTable.setDescription('This table contains the connector power ratings of FRUs. Only components with power connector rating management are listed in this table.')
cefcConnectorRatingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 8, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: cefcConnectorRatingEntry.setStatus('current')
if mibBuilder.loadTexts: cefcConnectorRatingEntry.setDescription('A cefcConnectorRatingEntry lists the power connector rating information of a component in the system. An entry or entries are created by the agent when an physical entity with connector rating management is added to the ENTITY-MIB entPhysicalTable. An entry is deleted by the agent at the entity removal.')
cefcConnectorRating = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 8, 1, 1, 1), FRUCurrentType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefcConnectorRating.setStatus('current')
if mibBuilder.loadTexts: cefcConnectorRating.setDescription("The maximum power that the component's connector can withdraw.")
cefcModulePowerConsumptionTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 8, 2), )
if mibBuilder.loadTexts: cefcModulePowerConsumptionTable.setStatus('current')
if mibBuilder.loadTexts: cefcModulePowerConsumptionTable.setDescription("This table contains the total power consumption information for modules whose ENTITY-MIB entPhysicalTable entries have an entPhysicalClass of 'module'.")
cefcModulePowerConsumptionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 8, 2, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: cefcModulePowerConsumptionEntry.setStatus('current')
if mibBuilder.loadTexts: cefcModulePowerConsumptionEntry.setDescription("A cefcModulePowerConsumptionEntry lists the total power consumption of a manageable components of type entPhysicalClass 'module'. Entries are created by the agent at the system power-up or module insertion. Entries are deleted by the agent upon module removal.")
cefcModulePowerConsumption = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 8, 2, 1, 1), FRUCurrentType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cefcModulePowerConsumption.setStatus('current')
if mibBuilder.loadTexts: cefcModulePowerConsumption.setDescription('The combined power consumption to operate the module and its submodule(s) and inline-power device(s).')
cefcMIBEnableStatusNotification = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 3, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cefcMIBEnableStatusNotification.setStatus('current')
if mibBuilder.loadTexts: cefcMIBEnableStatusNotification.setDescription('This variable indicates whether the system produces the following notifications: cefcModuleStatusChange, cefcPowerStatusChange, cefcFRUInserted, cefcFRURemoved, cefcUnrecognizedFRU and cefcFanTrayStatusChange. A false value will prevent these notifications from being generated.')
cefcEnablePSOutputChangeNotif = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 117, 1, 3, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cefcEnablePSOutputChangeNotif.setStatus('current')
if mibBuilder.loadTexts: cefcEnablePSOutputChangeNotif.setDescription('This variable indicates whether the system produces the cefcPowerSupplyOutputChange notifications when the output capacity of a power supply has changed. A false value will prevent this notification to generated.')
cefcMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 117, 2, 0))
cefcModuleStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 117, 2, 0, 1)).setObjects(("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcModuleOperStatus"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcModuleStatusLastChangeTime"))
if mibBuilder.loadTexts: cefcModuleStatusChange.setStatus('current')
if mibBuilder.loadTexts: cefcModuleStatusChange.setDescription('This notification is generated when the value of cefcModuleOperStatus changes. It can be utilized by an NMS to update the status of the module it is managing.')
cefcPowerStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 117, 2, 0, 2)).setObjects(("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcFRUPowerOperStatus"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcFRUPowerAdminStatus"))
if mibBuilder.loadTexts: cefcPowerStatusChange.setStatus('current')
if mibBuilder.loadTexts: cefcPowerStatusChange.setDescription('The cefcFRUPowerStatusChange notification indicates that the power status of a FRU has changed. The varbind for this notification indicates the entPhysicalIndex of the FRU, and the new operational-status of the FRU.')
cefcFRUInserted = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 117, 2, 0, 3)).setObjects(("ENTITY-MIB", "entPhysicalContainedIn"))
if mibBuilder.loadTexts: cefcFRUInserted.setStatus('current')
if mibBuilder.loadTexts: cefcFRUInserted.setDescription("The cecfFRUInserted notification indicates that a FRU was inserted. The varbind for this notification indicates the entPhysicalIndex of the inserted FRU, and the entPhysicalIndex of the FRU's container.")
cefcFRURemoved = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 117, 2, 0, 4)).setObjects(("ENTITY-MIB", "entPhysicalContainedIn"))
if mibBuilder.loadTexts: cefcFRURemoved.setStatus('current')
if mibBuilder.loadTexts: cefcFRURemoved.setDescription("The cefcFRURemoved notification indicates that a FRU was removed. The varbind for this notification indicates the entPhysicalIndex of the removed FRU, and the entPhysicalIndex of the FRU's container.")
cefcUnrecognizedFRU = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 117, 2, 0, 5)).setObjects(("ENTITY-MIB", "entPhysicalClass"), ("ENTITY-MIB", "entPhysicalVendorType"), ("ENTITY-MIB", "entPhysicalName"), ("ENTITY-MIB", "entPhysicalModelName"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcPhysicalStatus"))
if mibBuilder.loadTexts: cefcUnrecognizedFRU.setStatus('current')
if mibBuilder.loadTexts: cefcUnrecognizedFRU.setDescription('The cefcUnrecognizedFRU notification indicates that a FRU was inserted whose product ID is not supported. The varbind for this notification indicates the entPhysicalIndex of the inserted FRU, the entPhysicalClass this FRU belongs to, the entPhysicalVendorType of this FRU, the entPhysicalName of the FRU, the entPhysicalModelName of the inserted FRU, and the cefcPhysicalStatus telling the reason code for sending this notification.')
cefcFanTrayStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 117, 2, 0, 6)).setObjects(("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcFanTrayOperStatus"))
if mibBuilder.loadTexts: cefcFanTrayStatusChange.setStatus('current')
if mibBuilder.loadTexts: cefcFanTrayStatusChange.setDescription('This notification is generated when the value of cefcFanTrayOperStatus changes.')
cefcPowerSupplyOutputChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 117, 2, 0, 7)).setObjects(("ENTITY-MIB", "entPhysicalName"), ("ENTITY-MIB", "entPhysicalModelName"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcPSOutputModeCurrent"))
if mibBuilder.loadTexts: cefcPowerSupplyOutputChange.setStatus('current')
if mibBuilder.loadTexts: cefcPowerSupplyOutputChange.setDescription("The notification indicates that the power supply's output capacity has changed. This notification is triggered whenever one instance of the power supply's cefcPSOutputModeInOperation has transitioned from 'false' to 'true'.")
cefcMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 117, 3, 1))
cefcMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 117, 3, 2))
cefcMIBPowerCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 117, 3, 1, 1)).setObjects(("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBPowerModeGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBPowerFRUControlGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cefcMIBPowerCompliance = cefcMIBPowerCompliance.setStatus('obsolete')
if mibBuilder.loadTexts: cefcMIBPowerCompliance.setDescription('An Entity-MIB implementation can implement this group to provide FRU power status and control.')
cefcMIBPowerCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 117, 3, 1, 2)).setObjects(("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBPowerModeGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMgmtNotificationsGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBPowerFRUControlGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBModuleGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBInLinePowerControlGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBNotificationEnablesGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cefcMIBPowerCompliance2 = cefcMIBPowerCompliance2.setStatus('deprecated')
if mibBuilder.loadTexts: cefcMIBPowerCompliance2.setDescription('An Entity-MIB implementation can implement this group to provide FRU power status and control.')
cefcMIBPowerCompliance3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 117, 3, 1, 3)).setObjects(("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBPowerModeGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMgmtNotificationsGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBPowerFRUControlGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBModuleGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBInLinePowerControlGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBNotificationEnablesGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcModuleGroupRev1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cefcMIBPowerCompliance3 = cefcMIBPowerCompliance3.setStatus('deprecated')
if mibBuilder.loadTexts: cefcMIBPowerCompliance3.setDescription('An Entity-MIB implementation can implement this group to provide FRU power status and control.')
cefcMIBPowerCompliance4 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 117, 3, 1, 4)).setObjects(("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBPowerModeGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMgmtNotificationsGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBPowerFRUControlGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBModuleGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBInLinePowerControlGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBNotificationEnablesGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcModuleGroupRev1"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBPowerFRUValueGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cefcMIBPowerCompliance4 = cefcMIBPowerCompliance4.setStatus('deprecated')
if mibBuilder.loadTexts: cefcMIBPowerCompliance4.setDescription('An Entity-MIB implementation can implement this group to provide FRU power status and control.')
cefcMIBPowerCompliance5 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 117, 3, 1, 5)).setObjects(("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBPowerModeGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMgmtNotificationsGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMgmtNotificationsGroup2"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBPowerFRUControlGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBModuleGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBInLinePowerControlGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBNotificationEnablesGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcModuleGroupRev1"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBPowerFRUValueGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBFanTrayStatusGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBPhysicalGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cefcMIBPowerCompliance5 = cefcMIBPowerCompliance5.setStatus('deprecated')
if mibBuilder.loadTexts: cefcMIBPowerCompliance5.setDescription('An Entity-MIB implementation can implement this group to provide FRU power status and control.')
cefcMIBPowerCompliance6 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 117, 3, 1, 6)).setObjects(("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBPowerModeGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMgmtNotificationsGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBPowerFRUControlGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBModuleGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBInLinePowerControlGroupRev1"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBNotificationEnablesGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcModuleGroupRev1"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBPowerFRUValueGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBFanTrayStatusGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBPhysicalGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMgmtNotificationsGroup2"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBPowerOperModeGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcModuleExtGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcIntelliModuleGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cefcMIBPowerCompliance6 = cefcMIBPowerCompliance6.setStatus('current')
if mibBuilder.loadTexts: cefcMIBPowerCompliance6.setDescription('An Entity-MIB implementation can implement this group to provide FRU power status and control.')
cefcMIBPowerCompliance7 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 117, 3, 1, 7)).setObjects(("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBPowerModeGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMgmtNotificationsGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBPowerFRUControlGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBModuleGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBInLinePowerControlGroupRev1"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBNotificationEnablesGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcModuleGroupRev1"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBPowerFRUValueGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBFanTrayStatusGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBPhysicalGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMgmtNotificationsGroup2"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBPowerOperModeGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcModuleExtGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcIntelliModuleGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcPowerCapacityGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcCoolingGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcConnectorRatingGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBNotificationEnablesGroup2"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMgmtNotificationsGroup3"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cefcMIBPowerCompliance7 = cefcMIBPowerCompliance7.setStatus('deprecated')
if mibBuilder.loadTexts: cefcMIBPowerCompliance7.setDescription('An Entity-MIB implementation can implement this group to provide FRU power status and control.')
cefcMIBPowerCompliance8 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 117, 3, 1, 8)).setObjects(("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBPowerModeGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMgmtNotificationsGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBPowerFRUControlGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBModuleGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBInLinePowerControlGroupRev1"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBNotificationEnablesGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcModuleGroupRev1"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBPowerFRUValueGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBFanTrayStatusGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBPhysicalGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMgmtNotificationsGroup2"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBPowerOperModeGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcModuleExtGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcIntelliModuleGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcPowerCapacityGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcCoolingGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcConnectorRatingGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBNotificationEnablesGroup2"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMgmtNotificationsGroup3"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBInLinePowerCurrentGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBPowerRedundancyInfoGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcFanCoolingCapGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cefcMIBPowerCompliance8 = cefcMIBPowerCompliance8.setStatus('deprecated')
if mibBuilder.loadTexts: cefcMIBPowerCompliance8.setDescription('An Entity-MIB implementation can implement this group to provide FRU power status and control.')
cefcMIBPowerCompliance9 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 117, 3, 1, 9)).setObjects(("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBPowerModeGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMgmtNotificationsGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBPowerFRUControlGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBModuleGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBInLinePowerControlGroupRev1"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBNotificationEnablesGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcModuleGroupRev1"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBPowerFRUValueGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBFanTrayStatusGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBPhysicalGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMgmtNotificationsGroup2"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBPowerOperModeGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcModuleExtGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcIntelliModuleGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcPowerCapacityGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcConnectorRatingGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBNotificationEnablesGroup2"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMgmtNotificationsGroup3"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBInLinePowerCurrentGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBPowerRedundancyInfoGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcFanCoolingCapGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBModuleLocalSwitchingGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcFRUPowerRealTimeStatusGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcFRUPowerCapabilityGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcFRUCoolingUnitGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcFRUFanCoolingUnitGroup"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcCoolingGroup2"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcFanCoolingGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cefcMIBPowerCompliance9 = cefcMIBPowerCompliance9.setStatus('current')
if mibBuilder.loadTexts: cefcMIBPowerCompliance9.setDescription('An Entity-MIB implementation can implement this group to provide FRU power status and control.')
cefcMIBPowerModeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 117, 3, 2, 1)).setObjects(("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcPowerRedundancyMode"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcPowerUnits"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcTotalAvailableCurrent"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcTotalDrawnCurrent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cefcMIBPowerModeGroup = cefcMIBPowerModeGroup.setStatus('current')
if mibBuilder.loadTexts: cefcMIBPowerModeGroup.setDescription('The collection of objects which are used to configure and monitor power-control for FRUs.')
cefcMIBPowerFRUControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 117, 3, 2, 2)).setObjects(("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcFRUPowerAdminStatus"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcFRUPowerOperStatus"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcFRUCurrent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cefcMIBPowerFRUControlGroup = cefcMIBPowerFRUControlGroup.setStatus('current')
if mibBuilder.loadTexts: cefcMIBPowerFRUControlGroup.setDescription('The collection of objects which are used to configure and monitor power-control for FRUs.')
cefcMIBModuleGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 117, 3, 2, 3)).setObjects(("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcModuleAdminStatus"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcModuleOperStatus"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcModuleResetReason"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcModuleStatusLastChangeTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cefcMIBModuleGroup = cefcMIBModuleGroup.setStatus('current')
if mibBuilder.loadTexts: cefcMIBModuleGroup.setDescription('The collection of objects which are used to get the operational state and redundancy state of the modules')
cefcMIBInLinePowerControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 117, 3, 2, 4)).setObjects(("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMaxDefaultInLinePower"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cefcMIBInLinePowerControlGroup = cefcMIBInLinePowerControlGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cefcMIBInLinePowerControlGroup.setDescription('The collection of objects which are used to configure and monitor inline power control for FRUs.')
cefcMIBNotificationEnablesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 117, 3, 2, 5)).setObjects(("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMIBEnableStatusNotification"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cefcMIBNotificationEnablesGroup = cefcMIBNotificationEnablesGroup.setStatus('current')
if mibBuilder.loadTexts: cefcMIBNotificationEnablesGroup.setDescription('The collection of objects which are used to enable notification.')
cefcMgmtNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 117, 3, 2, 6)).setObjects(("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcModuleStatusChange"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcPowerStatusChange"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcFRUInserted"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcFRURemoved"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cefcMgmtNotificationsGroup = cefcMgmtNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: cefcMgmtNotificationsGroup.setDescription('The notifications which a FRU Management entity is required to implement.')
cefcModuleGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 117, 3, 2, 7)).setObjects(("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcModuleLastClearConfigTime"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcModuleResetReasonDescription"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cefcModuleGroupRev1 = cefcModuleGroupRev1.setStatus('current')
if mibBuilder.loadTexts: cefcModuleGroupRev1.setDescription('The collection of objects which are used to get the operational state and redundancy state of the modules')
cefcMIBPowerFRUValueGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 117, 3, 2, 8)).setObjects(("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcFRUTotalSystemCurrent"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcFRUDrawnSystemCurrent"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcFRUTotalInlineCurrent"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcFRUDrawnInlineCurrent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cefcMIBPowerFRUValueGroup = cefcMIBPowerFRUValueGroup.setStatus('current')
if mibBuilder.loadTexts: cefcMIBPowerFRUValueGroup.setDescription('The collection of objects which are used to retrieve the total and used capacity of a power supply for both system and inline power.')
cefcMIBFanTrayStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 117, 3, 2, 9)).setObjects(("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcFanTrayOperStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cefcMIBFanTrayStatusGroup = cefcMIBFanTrayStatusGroup.setStatus('current')
if mibBuilder.loadTexts: cefcMIBFanTrayStatusGroup.setDescription('The collection of objects which show information of the status of Fan Tray FRUs.')
cefcMIBPhysicalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 117, 3, 2, 10)).setObjects(("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcPhysicalStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cefcMIBPhysicalGroup = cefcMIBPhysicalGroup.setStatus('current')
if mibBuilder.loadTexts: cefcMIBPhysicalGroup.setDescription('The collection of objects which show information of the Physical Entity.')
cefcMgmtNotificationsGroup2 = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 117, 3, 2, 11)).setObjects(("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcUnrecognizedFRU"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcFanTrayStatusChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cefcMgmtNotificationsGroup2 = cefcMgmtNotificationsGroup2.setStatus('current')
if mibBuilder.loadTexts: cefcMgmtNotificationsGroup2.setDescription('The additional notifications for FRU status.')
cefcMIBPowerOperModeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 117, 3, 2, 12)).setObjects(("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcPowerRedundancyOperMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cefcMIBPowerOperModeGroup = cefcMIBPowerOperModeGroup.setStatus('current')
if mibBuilder.loadTexts: cefcMIBPowerOperModeGroup.setDescription("The collection of objects which are used to monitor the device's power supply operational redundancy mode.")
cefcMIBInLinePowerControlGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 117, 3, 2, 13)).setObjects(("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcMaxDefaultHighInLinePower"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cefcMIBInLinePowerControlGroupRev1 = cefcMIBInLinePowerControlGroupRev1.setStatus('current')
if mibBuilder.loadTexts: cefcMIBInLinePowerControlGroupRev1.setDescription('The collection of objects which are used to configure and monitor inline power control for FRUs.')
cefcModuleExtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 117, 3, 2, 14)).setObjects(("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcModuleStateChangeReasonDescr"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcModuleUpTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cefcModuleExtGroup = cefcModuleExtGroup.setStatus('current')
if mibBuilder.loadTexts: cefcModuleExtGroup.setDescription('The collection of objects which are used to get the state change reason and up time of the modules.')
cefcIntelliModuleGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 117, 3, 2, 15)).setObjects(("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcIntelliModuleIPAddrType"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcIntelliModuleIPAddr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cefcIntelliModuleGroup = cefcIntelliModuleGroup.setStatus('current')
if mibBuilder.loadTexts: cefcIntelliModuleGroup.setDescription('The collection of objects which are used to get the information specific to intelligent modules.')
cefcPowerCapacityGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 117, 3, 2, 16)).setObjects(("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcPowerSupplyInputType"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcPSOutputModeCurrent"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcPSOutputModeInOperation"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cefcPowerCapacityGroup = cefcPowerCapacityGroup.setStatus('current')
if mibBuilder.loadTexts: cefcPowerCapacityGroup.setDescription('The collection of objects which are used to get the power capacity information')
cefcCoolingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 117, 3, 2, 17)).setObjects(("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcChassisPerSlotCoolingCap"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcFanCoolingCapacity"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcModuleCooling"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cefcCoolingGroup = cefcCoolingGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cefcCoolingGroup.setDescription('The collection of objects which are used to get the cooling capacity information.')
cefcConnectorRatingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 117, 3, 2, 18)).setObjects(("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcConnectorRating"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcModulePowerConsumption"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cefcConnectorRatingGroup = cefcConnectorRatingGroup.setStatus('current')
if mibBuilder.loadTexts: cefcConnectorRatingGroup.setDescription('The collection of objects which are used to get the power connector rating and module power total consumption information.')
cefcMIBNotificationEnablesGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 117, 3, 2, 19)).setObjects(("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcEnablePSOutputChangeNotif"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cefcMIBNotificationEnablesGroup2 = cefcMIBNotificationEnablesGroup2.setStatus('current')
if mibBuilder.loadTexts: cefcMIBNotificationEnablesGroup2.setDescription('The collection of objects which are used to enable additional group of notifications.')
cefcMgmtNotificationsGroup3 = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 117, 3, 2, 20)).setObjects(("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcPowerSupplyOutputChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cefcMgmtNotificationsGroup3 = cefcMgmtNotificationsGroup3.setStatus('current')
if mibBuilder.loadTexts: cefcMgmtNotificationsGroup3.setDescription('The additional notification for notify the power capacity mode change.')
cefcMIBInLinePowerCurrentGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 117, 3, 2, 21)).setObjects(("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcTotalDrawnInlineCurrent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cefcMIBInLinePowerCurrentGroup = cefcMIBInLinePowerCurrentGroup.setStatus('current')
if mibBuilder.loadTexts: cefcMIBInLinePowerCurrentGroup.setDescription('The collection of objects which are used to monitor inline power usage for FRUs.')
cefcMIBPowerRedundancyInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 117, 3, 2, 22)).setObjects(("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcPowerNonRedundantReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cefcMIBPowerRedundancyInfoGroup = cefcMIBPowerRedundancyInfoGroup.setStatus('current')
if mibBuilder.loadTexts: cefcMIBPowerRedundancyInfoGroup.setDescription("The collection of objects provide additional information about the device's power supply redundancy.")
cefcFanCoolingCapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 117, 3, 2, 23)).setObjects(("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcFanCoolingCapModeDescr"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcFanCoolingCapCapacity"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcFanCoolingCapCurrent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cefcFanCoolingCapGroup = cefcFanCoolingCapGroup.setStatus('current')
if mibBuilder.loadTexts: cefcFanCoolingCapGroup.setDescription('The collection of objects provide the cooling capacity modes and properties of the fans.')
cefcMIBModuleLocalSwitchingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 117, 3, 2, 24)).setObjects(("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcModuleLocalSwitchingMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cefcMIBModuleLocalSwitchingGroup = cefcMIBModuleLocalSwitchingGroup.setStatus('current')
if mibBuilder.loadTexts: cefcMIBModuleLocalSwitchingGroup.setDescription('The collection of objects which show information of the local switching status of modules.')
cefcFRUPowerRealTimeStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 117, 3, 2, 25)).setObjects(("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcFRURealTimeCurrent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cefcFRUPowerRealTimeStatusGroup = cefcFRUPowerRealTimeStatusGroup.setStatus('current')
if mibBuilder.loadTexts: cefcFRUPowerRealTimeStatusGroup.setDescription('The collection of objects provide the power-related realtime information of the manageable entities.')
cefcFRUPowerCapabilityGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 117, 3, 2, 26)).setObjects(("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcFRUPowerCapability"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cefcFRUPowerCapabilityGroup = cefcFRUPowerCapabilityGroup.setStatus('current')
if mibBuilder.loadTexts: cefcFRUPowerCapabilityGroup.setDescription('The collection of objects provide the power-related capability information of the manageable entities.')
cefcFRUCoolingUnitGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 117, 3, 2, 27)).setObjects(("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcChassisPerSlotCoolingUnit"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcModuleCoolingUnit"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cefcFRUCoolingUnitGroup = cefcFRUCoolingUnitGroup.setStatus('current')
if mibBuilder.loadTexts: cefcFRUCoolingUnitGroup.setDescription('The collection of objects provide the cooling unit information of the manageable entities.')
cefcFRUFanCoolingUnitGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 117, 3, 2, 28)).setObjects(("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcFanCoolingCapacityUnit"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcFanCoolingCapCapacityUnit"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cefcFRUFanCoolingUnitGroup = cefcFRUFanCoolingUnitGroup.setStatus('current')
if mibBuilder.loadTexts: cefcFRUFanCoolingUnitGroup.setDescription('The collection of objects provide the cooling unit information of the manageable fan entities.')
cefcCoolingGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 117, 3, 2, 29)).setObjects(("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcChassisPerSlotCoolingCap"), ("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcModuleCooling"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cefcCoolingGroup2 = cefcCoolingGroup2.setStatus('current')
if mibBuilder.loadTexts: cefcCoolingGroup2.setDescription('The collection of objects which are used to get the cooling capacity or requirement information.')
cefcFanCoolingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 117, 3, 2, 30)).setObjects(("CISCO-ENTITY-FRU-CONTROL-MIB", "cefcFanCoolingCapacity"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cefcFanCoolingGroup = cefcFanCoolingGroup.setStatus('current')
if mibBuilder.loadTexts: cefcFanCoolingGroup.setDescription('The collection of objects provide the cooling capacity modes and properties of the fans.')
mibBuilder.exportSymbols("CISCO-ENTITY-FRU-CONTROL-MIB", cefcMIBPowerCompliance3=cefcMIBPowerCompliance3, PowerAdminType=PowerAdminType, cefcMIBPowerCompliance8=cefcMIBPowerCompliance8, cefcMIBNotificationEnables=cefcMIBNotificationEnables, cefcPowerRedundancyOperMode=cefcPowerRedundancyOperMode, cefcIntelliModuleIPAddrType=cefcIntelliModuleIPAddrType, cefcFRUPowerStatusEntry=cefcFRUPowerStatusEntry, cefcFRUPowerStatusTable=cefcFRUPowerStatusTable, cefcMIBPowerOperModeGroup=cefcMIBPowerOperModeGroup, cefcPhysicalTable=cefcPhysicalTable, cefcPSOutputModeInOperation=cefcPSOutputModeInOperation, cefcPowerSupplyInputIndex=cefcPowerSupplyInputIndex, cefcMgmtNotificationsGroup=cefcMgmtNotificationsGroup, cefcMaxDefaultHighInLinePower=cefcMaxDefaultHighInLinePower, cefcPhysical=cefcPhysical, cefcFRUMIBNotificationPrefix=cefcFRUMIBNotificationPrefix, cefcFRUPowerCapability=cefcFRUPowerCapability, cefcFanCoolingCapCapacityUnit=cefcFanCoolingCapCapacityUnit, cefcFanTrayStatusEntry=cefcFanTrayStatusEntry, cefcModuleEntry=cefcModuleEntry, cefcPowerSupplyInputEntry=cefcPowerSupplyInputEntry, cefcFanCoolingTable=cefcFanCoolingTable, cefcChassisPerSlotCoolingUnit=cefcChassisPerSlotCoolingUnit, cefcFanTrayStatusTable=cefcFanTrayStatusTable, cefcCooling=cefcCooling, cefcFanTrayOperStatus=cefcFanTrayOperStatus, cefcMIBPowerFRUControlGroup=cefcMIBPowerFRUControlGroup, cefcFRUPowerOperStatus=cefcFRUPowerOperStatus, cefcPowerSupplyInputTable=cefcPowerSupplyInputTable, cefcFRUPowerSupplyGroupEntry=cefcFRUPowerSupplyGroupEntry, cefcModulePowerConsumptionEntry=cefcModulePowerConsumptionEntry, cefcFanCoolingCapTable=cefcFanCoolingCapTable, cefcFanTrayStatusChange=cefcFanTrayStatusChange, cefcFRUTotalSystemCurrent=cefcFRUTotalSystemCurrent, ModuleResetReasonType=ModuleResetReasonType, cefcMIBPowerCompliance4=cefcMIBPowerCompliance4, cefcModuleResetReason=cefcModuleResetReason, cefcFanCoolingCapGroup=cefcFanCoolingCapGroup, cefcPowerSupplyOutputEntry=cefcPowerSupplyOutputEntry, cefcPSOutputModeIndex=cefcPSOutputModeIndex, cefcMIBPowerCompliance7=cefcMIBPowerCompliance7, cefcFRUDrawnSystemCurrent=cefcFRUDrawnSystemCurrent, cefcPowerStatusChange=cefcPowerStatusChange, FRUTimeSeconds=FRUTimeSeconds, cefcMIBConformance=cefcMIBConformance, cefcFanCoolingCapacity=cefcFanCoolingCapacity, cefcTotalDrawnCurrent=cefcTotalDrawnCurrent, cefcMIBPowerCompliance6=cefcMIBPowerCompliance6, cefcFRUPowerAdminStatus=cefcFRUPowerAdminStatus, cefcTotalDrawnInlineCurrent=cefcTotalDrawnInlineCurrent, cefcModuleUpTime=cefcModuleUpTime, cefcFanCoolingCapCurrent=cefcFanCoolingCapCurrent, cefcModuleExtGroup=cefcModuleExtGroup, cefcModuleStatusLastChangeTime=cefcModuleStatusLastChangeTime, cefcPowerCapacity=cefcPowerCapacity, cefcMIBPowerModeGroup=cefcMIBPowerModeGroup, cefcFanCoolingEntry=cefcFanCoolingEntry, cefcChassisCoolingTable=cefcChassisCoolingTable, cefcFRUPowerCapabilityGroup=cefcFRUPowerCapabilityGroup, cefcFRURealTimeCurrent=cefcFRURealTimeCurrent, PYSNMP_MODULE_ID=ciscoEntityFRUControlMIB, cefcIntelliModuleGroup=cefcIntelliModuleGroup, cefcFRUPower=cefcFRUPower, cefcMIBObjects=cefcMIBObjects, cefcModuleStatusChange=cefcModuleStatusChange, cefcMIBEnableStatusNotification=cefcMIBEnableStatusNotification, cefcMIBInLinePowerControlGroupRev1=cefcMIBInLinePowerControlGroupRev1, cefcMIBCompliances=cefcMIBCompliances, cefcIntelliModuleEntry=cefcIntelliModuleEntry, cefcMIBNotificationEnablesGroup2=cefcMIBNotificationEnablesGroup2, cefcFanCoolingCapEntry=cefcFanCoolingCapEntry, cefcFRURemoved=cefcFRURemoved, cefcMIBPowerCompliance2=cefcMIBPowerCompliance2, cefcFRUPowerSupplyGroupTable=cefcFRUPowerSupplyGroupTable, cefcFanCoolingCapModeDescr=cefcFanCoolingCapModeDescr, cefcModuleLocalSwitchingTable=cefcModuleLocalSwitchingTable, cefcModuleLocalSwitchingMode=cefcModuleLocalSwitchingMode, cefcPowerSupplyInputType=cefcPowerSupplyInputType, cefcConnectorRatingTable=cefcConnectorRatingTable, PowerOperType=PowerOperType, cefcModuleStateChangeReasonDescr=cefcModuleStateChangeReasonDescr, cefcMIBPhysicalGroup=cefcMIBPhysicalGroup, cefcModuleGroupRev1=cefcModuleGroupRev1, PowerRedundancyType=PowerRedundancyType, cefcFRUFan=cefcFRUFan, cefcModuleCoolingUnit=cefcModuleCoolingUnit, ModuleOperType=ModuleOperType, cefcPowerNonRedundantReason=cefcPowerNonRedundantReason, cefcMIBPowerCompliance9=cefcMIBPowerCompliance9, cefcMIBFanTrayStatusGroup=cefcMIBFanTrayStatusGroup, cefcFRUInserted=cefcFRUInserted, cefcIntelliModuleTable=cefcIntelliModuleTable, cefcConnectorRatingGroup=cefcConnectorRatingGroup, cefcMIBInLinePowerControlGroup=cefcMIBInLinePowerControlGroup, cefcFanCoolingCapacityUnit=cefcFanCoolingCapacityUnit, cefcFRUCoolingUnitGroup=cefcFRUCoolingUnitGroup, cefcMIBPowerCompliance=cefcMIBPowerCompliance, cefcModulePowerConsumptionTable=cefcModulePowerConsumptionTable, ciscoEntityFRUControlMIB=ciscoEntityFRUControlMIB, cefcPowerUnits=cefcPowerUnits, cefcModule=cefcModule, cefcMIBGroups=cefcMIBGroups, cefcFRUCurrent=cefcFRUCurrent, cefcConnector=cefcConnector, cefcMgmtNotificationsGroup3=cefcMgmtNotificationsGroup3, cefcFRUPowerRealTimeStatusGroup=cefcFRUPowerRealTimeStatusGroup, cefcPSOutputModeCurrent=cefcPSOutputModeCurrent, cefcModuleCoolingTable=cefcModuleCoolingTable, cefcFanCoolingCapCapacity=cefcFanCoolingCapCapacity, cefcMIBPowerCompliance5=cefcMIBPowerCompliance5, cefcModuleLastClearConfigTime=cefcModuleLastClearConfigTime, cefcModuleOperStatus=cefcModuleOperStatus, cefcMIBNotifications=cefcMIBNotifications, cefcModuleTable=cefcModuleTable, cefcMIBPowerRedundancyInfoGroup=cefcMIBPowerRedundancyInfoGroup, cefcCoolingGroup=cefcCoolingGroup, cefcFRUPowerSupplyValueTable=cefcFRUPowerSupplyValueTable, cefcFRUDrawnInlineCurrent=cefcFRUDrawnInlineCurrent, cefcChassisPerSlotCoolingCap=cefcChassisPerSlotCoolingCap, cefcCoolingGroup2=cefcCoolingGroup2, cefcIntelliModuleIPAddr=cefcIntelliModuleIPAddr, cefcPowerSupplyOutputChange=cefcPowerSupplyOutputChange, cefcUnrecognizedFRU=cefcUnrecognizedFRU, cefcMIBNotificationEnablesGroup=cefcMIBNotificationEnablesGroup, cefcMIBModuleGroup=cefcMIBModuleGroup, ModuleAdminType=ModuleAdminType, cefcModuleCooling=cefcModuleCooling, cefcMIBModuleLocalSwitchingGroup=cefcMIBModuleLocalSwitchingGroup, cefcFanCoolingCapIndex=cefcFanCoolingCapIndex, cefcTotalAvailableCurrent=cefcTotalAvailableCurrent, cefcMaxDefaultInLinePower=cefcMaxDefaultInLinePower, cefcPowerCapacityGroup=cefcPowerCapacityGroup, cefcPhysicalStatus=cefcPhysicalStatus, cefcPowerSupplyOutputTable=cefcPowerSupplyOutputTable, cefcFRUPowerSupplyValueEntry=cefcFRUPowerSupplyValueEntry, cefcModuleLocalSwitchingEntry=cefcModuleLocalSwitchingEntry, FRUCurrentType=FRUCurrentType, cefcChassisCoolingEntry=cefcChassisCoolingEntry, cefcModuleAdminStatus=cefcModuleAdminStatus, cefcFRUFanCoolingUnitGroup=cefcFRUFanCoolingUnitGroup, cefcFRUTotalInlineCurrent=cefcFRUTotalInlineCurrent, cefcModulePowerConsumption=cefcModulePowerConsumption, FRUCoolingUnit=FRUCoolingUnit, cefcPowerRedundancyMode=cefcPowerRedundancyMode, cefcConnectorRating=cefcConnectorRating, cefcConnectorRatingEntry=cefcConnectorRatingEntry, cefcModuleCoolingEntry=cefcModuleCoolingEntry, cefcFanCoolingGroup=cefcFanCoolingGroup, cefcModuleResetReasonDescription=cefcModuleResetReasonDescription, cefcMgmtNotificationsGroup2=cefcMgmtNotificationsGroup2, cefcMIBPowerFRUValueGroup=cefcMIBPowerFRUValueGroup, cefcEnablePSOutputChangeNotif=cefcEnablePSOutputChangeNotif, cefcPhysicalEntry=cefcPhysicalEntry, cefcMIBInLinePowerCurrentGroup=cefcMIBInLinePowerCurrentGroup)
