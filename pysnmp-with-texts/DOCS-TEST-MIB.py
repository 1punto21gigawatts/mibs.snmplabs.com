#
# PySNMP MIB module DOCS-TEST-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DOCS-TEST-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:53:54 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
IpAddress, Gauge32, iso, Counter64, NotificationType, Unsigned32, ModuleIdentity, Bits, TimeTicks, Integer32, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, MibIdentifier, enterprises = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Gauge32", "iso", "Counter64", "NotificationType", "Unsigned32", "ModuleIdentity", "Bits", "TimeTicks", "Integer32", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "MibIdentifier", "enterprises")
TruthValue, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "TextualConvention")
cableLabs = MibIdentifier((1, 3, 6, 1, 4, 1, 4491))
clabFunction = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 1))
clabFuncMib2 = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 1, 1))
clabFuncProprietary = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 1, 2))
clabProject = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2))
clabProjDocsis = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1))
clabProjPacketCable = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 2))
clabProjOpenCable = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 3))
clabProjCableHome = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 4))
docsTestMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 4491, 2, 1, 12))
if mibBuilder.loadTexts: docsTestMIB.setLastUpdated('0203150000Z')
if mibBuilder.loadTexts: docsTestMIB.setOrganization('DOCSIS 2.0 ATP Working Group')
if mibBuilder.loadTexts: docsTestMIB.setContactInfo(' David Raftus Postal: Terayon Canada Ltd 340 Terry Fox Drive, Suite 202 Ottawa Ontario Canada Phone: +1 613 592 1052 E-mail: david.raftus@terayon.com DOCSIS 2.0 ATP Working Group General Discussion: docsis-20@cablelabs.com, docsis-20-atp@cablelabs.com')
if mibBuilder.loadTexts: docsTestMIB.setDescription('This is the MIB Module supporting programmable test features for DOCSIS 2.0 compliant Cable Modems (CM) and Cable Modem Termination Systems (CMTS).')
docsTestMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 12, 1))
docsTestBaseObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 12, 1, 1))
docsTestSetupObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 12, 1, 2))
docsTestCapability = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 1, 12, 1, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsTestCapability.setStatus('current')
if mibBuilder.loadTexts: docsTestCapability.setDescription('Indicates the ability of this device to support the programmable features identified by the TYPE field from the CM/CMTS TLV table in [17]. Each octet within this octet string represents eight tests. For example, the first octet represents tests one through eight (with the msb representing test one) as identified by the TYPE field.')
docsTestStatus = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 1, 12, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsTestStatus.setStatus('current')
if mibBuilder.loadTexts: docsTestStatus.setDescription('Indicates the current operating status of tests initiated through the docsTestSetupObjects. The octet representation is identical to that used by docsTestCapability. A bit representation of one indicates that a test is currently active, while zero indicates the test is inactive or has completed.')
docsTestType = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 1, 12, 1, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsTestType.setStatus('current')
if mibBuilder.loadTexts: docsTestType.setDescription('Corresponds to the TYPE field from the CM/CMTS TLV Table in [17]. The default value of zero indicates no test has yet been initiated. A WrongValueError should be returned in response to a write request for a test not supported by the device. A read request will return the docsTestType value last successfully written, whether that test is active or inactive.')
docsTestData = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 1, 12, 1, 2, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsTestData.setStatus('current')
if mibBuilder.loadTexts: docsTestData.setDescription('The OCTET STRING length and value correspond to the LENGTH and VALUE fields from the CM/CMTS TLV Table in [17]. A read request will return the docsTestData value last successfully written, whether that test is active or inactive.')
docsTestEnable = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 1, 12, 1, 2, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsTestEnable.setStatus('current')
if mibBuilder.loadTexts: docsTestEnable.setDescription('Used to initiate or stop the tests setup through the docsTestType and docsTestData objects. A CommitFailedError should be returned in response to a TRUE Write request if the values in docsTestType and docsTestData are incompatible, or a test could not be initiated for any other reason.')
docsTestConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 12, 2))
docsTestCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 12, 2, 1))
docsTestGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 12, 2, 2))
docsTestBasicCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 4491, 2, 1, 12, 2, 1, 1)).setObjects(("DOCS-TEST-MIB", "docsTestGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsTestBasicCompliance = docsTestBasicCompliance.setStatus('current')
if mibBuilder.loadTexts: docsTestBasicCompliance.setDescription('The compliance statement for devices that implement the DOCSIS compliant programmable test features.')
docsTestGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4491, 2, 1, 12, 2, 2, 1)).setObjects(("DOCS-TEST-MIB", "docsTestCapability"), ("DOCS-TEST-MIB", "docsTestStatus"), ("DOCS-TEST-MIB", "docsTestType"), ("DOCS-TEST-MIB", "docsTestData"), ("DOCS-TEST-MIB", "docsTestEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsTestGroup = docsTestGroup.setStatus('current')
if mibBuilder.loadTexts: docsTestGroup.setDescription('Group of objects implemented in both Cable Modems and Cable Modem Termination Systems.')
mibBuilder.exportSymbols("DOCS-TEST-MIB", docsTestBaseObjects=docsTestBaseObjects, docsTestCapability=docsTestCapability, docsTestGroup=docsTestGroup, clabFuncMib2=clabFuncMib2, docsTestSetupObjects=docsTestSetupObjects, docsTestMIB=docsTestMIB, docsTestType=docsTestType, docsTestGroups=docsTestGroups, docsTestMibObjects=docsTestMibObjects, docsTestData=docsTestData, clabProjOpenCable=clabProjOpenCable, clabProjCableHome=clabProjCableHome, clabFunction=clabFunction, cableLabs=cableLabs, docsTestBasicCompliance=docsTestBasicCompliance, clabProjDocsis=clabProjDocsis, clabFuncProprietary=clabFuncProprietary, clabProjPacketCable=clabProjPacketCable, docsTestStatus=docsTestStatus, docsTestCompliances=docsTestCompliances, clabProject=clabProject, PYSNMP_MODULE_ID=docsTestMIB, docsTestEnable=docsTestEnable, docsTestConformance=docsTestConformance)
