#
# PySNMP MIB module RBN-L2TP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RBN-L2TP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:53:02 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
rbnMgmt, = mibBuilder.importSymbols("RBN-SMI", "rbnMgmt")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Counter32, NotificationType, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, iso, Integer32, Bits, Counter64, TimeTicks, ModuleIdentity, MibIdentifier, Gauge32, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "NotificationType", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "iso", "Integer32", "Bits", "Counter64", "TimeTicks", "ModuleIdentity", "MibIdentifier", "Gauge32", "ObjectIdentity")
DateAndTime, DisplayString, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "DisplayString", "TruthValue", "TextualConvention")
rbnL2tpMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 2352, 2, 28))
rbnL2tpMib.setRevisions(('2009-04-20 00:00', '2005-02-28 00:00', '2004-02-04 00:00', '2003-04-25 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: rbnL2tpMib.setRevisionsDescriptions(('Added waitRouteUp in TunStateType. ', 'Added new table rbnL2tpPeerTunCfgTable. Updated the compliance statements and groups to reflect the change.', 'Added new objects rbnL2tpTCfgRemoteTunnelID and rbnL2tpTCfgTunnelContext to rbnL2tpTunnelCfgEntry. Added new NOTIFICATION-TYPE rbnL2tpMibTunnelStateChange2. Deprecated rbnL2tpMibTunnelTrapContext, rbnL2tpMibTunnelTrapState, and rbnL2tpMibTunnelStateChange. Updated the compliance statements and groups to reflect the changes.', 'Initial version.',))
if mibBuilder.loadTexts: rbnL2tpMib.setLastUpdated('200904200000Z')
if mibBuilder.loadTexts: rbnL2tpMib.setOrganization('Redback Networks, Inc.')
if mibBuilder.loadTexts: rbnL2tpMib.setContactInfo('RedBack Networks, Inc. Postal: 300 Holger Way San Jose, CA 95134 USA Phone: +1 408 750 5000 Fax: +1 408 750 5599 E-mail: mib-info@redback.com ')
if mibBuilder.loadTexts: rbnL2tpMib.setDescription('Defines the objects necessary to monitor L2TP configuration information, counters and the state changes of an L2TP tunnel. All mib objects defined in the module are viewed within the context identified in the SNMP protocol (i.e. the community string in the v1/v2 or the contextName in v3).')
rbnL2tpMibNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 28, 0))
rbnL2tpMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1))
rbnL2tpMibConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 28, 2))
class AuthType(TextualConvention, Integer32):
    description = 'Common authentication types.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("other", 0), ("pap", 1), ("chap", 2), ("chapPap", 3))

class LacLnsType(TextualConvention, Integer32):
    description = 'Peer operational mode types.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("other", 1), ("lac", 2), ("lns", 3), ("lacLns", 4))

class TunStateType(TextualConvention, Integer32):
    description = 'Tunnel operational states.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("invalid", 0), ("deleted", 1), ("idle", 2), ("created", 3), ("waitAAA", 4), ("waitCtlReply", 5), ("waitCtlConn", 6), ("established", 7), ("waitRouteUp", 8))

class CtlErrType(TextualConvention, Integer32):
    description = 'Tunnel control errors.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 255))
    namedValues = NamedValues(("ctlrunt", 0), ("hdr2long", 1), ("dupSCCRQ", 2), ("duppkt", 3), ("droppkt", 4), ("badCmType", 5), ("avp2long", 6), ("avpUnknown", 7), ("typeNot1st", 8), ("mtype000", 9), ("cantUnhide", 10), ("avpLen", 11), ("missAvp", 12), ("invalidAvp", 13), ("avp2big", 14), ("badAvpLen", 15), ("rexmt", 16), ("scksnderr", 17), ("remWndoful", 18), ("maxRexmts", 19), ("sccrqColide", 20), ("badVers", 21), ("noChapRsp", 22), ("authFailed", 23), ("sesExists", 24), ("badcrpsesi", 25), ("cdnBadid", 26), ("iccnBadid", 27), ("dataRunt", 28), ("badSCCRQna", 29), ("badSCCRP", 30), ("dupIcrq", 31), ("badSCCCN", 32), ("badMsgType", 33), ("sccrqSteal", 34), ("remXmtState", 35), ("cdnThrottle", 36), ("none", 255))

class EthEncapType(TextualConvention, Integer32):
    description = 'Ethernet encapsulation types.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("other", 0), ("ethPpoe", 1), ("ethMulti", 2), ("ethernet", 3))

class DNISType(TextualConvention, Integer32):
    description = 'Tunnel switch DNIS type.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("other", 0), ("dnis", 1), ("dnisonly", 2))

rbnL2tpPeerCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 1), )
if mibBuilder.loadTexts: rbnL2tpPeerCfgTable.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpPeerCfgTable.setDescription('The L2TP Peer Information Table.')
rbnL2tpPeerCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 1, 1), ).setIndexNames((1, "RBN-L2TP-MIB", "rbnL2tpMibPeerName"))
if mibBuilder.loadTexts: rbnL2tpPeerCfgEntry.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpPeerCfgEntry.setDescription('An L2TP Peer Information entry. An entry in this table corresponds to the resources assigned to a single peer configuration. This configuration will be inherited by all of the tunnels that are assigned to the peer group. Entries are added to the table once communication is established with the peer. Entries are removed if communication is lost.')
rbnL2tpMibPeerName = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 255)))
if mibBuilder.loadTexts: rbnL2tpMibPeerName.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpMibPeerName.setDescription("This object identifies the name of the Peer on the local system. This peer is the name of an identifier for a tunnel configuration and each tunnel that is assigned to this peer will take on the peer's configuration parameters.")
rbnL2tpPCfgMedia = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbnL2tpPCfgMedia.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpPCfgMedia.setDescription('This object identifies the transport media utilized between communicating peers. A media length of 0 means that no transport media type was set.')
rbnL2tpPCfgVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 1, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpPCfgVendor.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpPCfgVendor.setDescription('This object identifies the vendor of L2TP stack running on the remote peer. The length of the string will be zero if no vendor name can be obtained from the peer.')
rbnL2tpPCfgRev = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpPCfgRev.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpPCfgRev.setDescription('This object identifies the firmware revision for the L2TP protocol stack running on the remote peer.')
rbnL2tpPCfgHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 1, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpPCfgHostName.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpPCfgHostName.setDescription('This object identifies the name assigned to this peer on the remote host system. A host name length of 0 means that this information could not be obtained from the remote host.')
rbnL2tpPCfgRadius = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 1, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpPCfgRadius.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpPCfgRadius.setDescription('This object indicates whether or not a RADIUS server has been configured for this peer group. A value of true (1) indicates that there is a RADIUS server and it will be used for authenticating and authorizing access to a tunnel in this group and accounting information will be sent to the radius server. A value of false (2) indicates that there is no RADIUS server and authentication and authorization will be done locally.')
rbnL2tpPCfgRemIPAddType = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 1, 1, 7), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpPCfgRemIPAddType.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpPCfgRemIPAddType.setDescription('This object identifies the address type contained in rbnL2tpPCfgRemIPAdd.')
rbnL2tpPCfgRemIPAdd = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 1, 1, 8), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbnL2tpPCfgRemIPAdd.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpPCfgRemIPAdd.setDescription('This object identifies the remote IP address for this tunnel (utilized only with User Datagram Protocol).')
rbnL2tpPCfgStatic = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 1, 1, 9), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbnL2tpPCfgStatic.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpPCfgStatic.setDescription('This objects indicates whether the tunnel is static or dynamic. A value of true (1) means that it is static. A value of (2) indicates that it is dynamic.')
rbnL2tpPCfgLocalIPAddType = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 1, 1, 10), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpPCfgLocalIPAddType.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpPCfgLocalIPAddType.setDescription('This object identifies the address type contained in rbnL2tpPCfgLocalIPAdd.')
rbnL2tpPCfgLocalIPAdd = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 1, 1, 11), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbnL2tpPCfgLocalIPAdd.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpPCfgLocalIPAdd.setDescription('This object indicates the local IP address for this tunnel (utilized only with UDP).')
rbnL2tpPCfgMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 1, 1, 12), LacLnsType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbnL2tpPCfgMode.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpPCfgMode.setDescription('This object indicates whether the peer is operating as an LNS, a LAC, or both.')
rbnL2tpPCfgMaxTunnels = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 1, 1, 14), Gauge32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbnL2tpPCfgMaxTunnels.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpPCfgMaxTunnels.setDescription('This object indicates the maximum number of tunnels that may be configured on this peer.')
rbnL2tpPCfgMaxSesPerTun = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 1, 1, 15), Gauge32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbnL2tpPCfgMaxSesPerTun.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpPCfgMaxSesPerTun.setDescription('This object indicates the maximum number of sessions that may be allocated to one tunnel.')
rbnL2tpPCfgCtlRetranCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpPCfgCtlRetranCnt.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpPCfgCtlRetranCnt.setDescription('This object indicates a count of the number of times that a control packet was retransmitted.')
rbnL2tpPCfgCtlRetranTO = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 1, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbnL2tpPCfgCtlRetranTO.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpPCfgCtlRetranTO.setDescription('This object indicates the control retransmit timeout in seconds.')
rbnL2tpPCfgSessAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 1, 1, 18), AuthType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbnL2tpPCfgSessAuth.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpPCfgSessAuth.setDescription('This object indicates the session authentication type.')
rbnL2tpPCfgCtlWin = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 1, 1, 19), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbnL2tpPCfgCtlWin.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpPCfgCtlWin.setDescription('This object indicates the control window size.')
rbnL2tpPCfgDNIS = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 1, 1, 20), DNISType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbnL2tpPCfgDNIS.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpPCfgDNIS.setDescription('This object indicates whether the critera used for a tunnel switch is Dialed Number Identification String first (a value of (1)), DNIS only (a value of (2)) or the no preference has been set (a value of (0)).')
rbnL2tpPCfgPoliceRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 1, 1, 21), Unsigned32()).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbnL2tpPCfgPoliceRate.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpPCfgPoliceRate.setDescription('This object indicates the received aggregate stream limit, in kilobits per second.')
rbnL2tpPCfgPoliceBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 1, 1, 22), Unsigned32()).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbnL2tpPCfgPoliceBurst.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpPCfgPoliceBurst.setDescription('This object indicates the packet burst tolerance for tunnels received by this peer group.')
rbnL2tpPCfgLimitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 1, 1, 23), Unsigned32()).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbnL2tpPCfgLimitRate.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpPCfgLimitRate.setDescription('This object indicates the limit of the aggregate packet stream transmitted through a tunnel in kilobits per second (kpbs).')
rbnL2tpPCfgLimitBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 1, 1, 24), Unsigned32()).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbnL2tpPCfgLimitBurst.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpPCfgLimitBurst.setDescription('This object indicates the the packet burst tolerance limit transmitted on a tunnel.')
rbnL2tpPCfgGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 1, 1, 25), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbnL2tpPCfgGroup.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpPCfgGroup.setDescription('This object indicates the l2tp group which is assigned to this peer. Each peer configuration may be assigned only one tunnel group. A length of 0 means that the group name was not assigned.')
rbnL2tpPCfgPref = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 1, 1, 26), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbnL2tpPCfgPref.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpPCfgPref.setDescription('This object indicates the RADIUS based preference number (used by tunnel groups only). A lower number indicates a more favorible preference.')
rbnL2tpPCfgPasswd = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 1, 1, 27), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbnL2tpPCfgPasswd.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpPCfgPasswd.setDescription('This object indicates the password for this account utilized when performing the connection handshake protocol with the remote host. A length of 0 indicates that no password has been assigned.')
rbnL2tpPCfgHelloTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 1, 1, 28), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbnL2tpPCfgHelloTimer.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpPCfgHelloTimer.setDescription('This object defines the interval (in seconds) in which Hello (or keep-alive) packets are to be sent by local tunnels belonging to this tunnel configuration.')
rbnL2tpPCfgRecQue = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 1, 1, 29), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpPCfgRecQue.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpPCfgRecQue.setDescription('This object indicates whether there is receive queueing of out of sequence messages. A value of true (1) indicates that the messages are queued.')
rbnL2tpPCfgSessContext = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 1, 1, 30), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbnL2tpPCfgSessContext.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpPCfgSessContext.setDescription('This object indicates the name of the session context. A size of 0 indicates that the context could not be determined. Any context name length greater than 80 will be truncated. This will have a value for PPPoE only.')
rbnL2tpPCfgSessService = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 1, 1, 31), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbnL2tpPCfgSessService.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpPCfgSessService.setDescription('The service group to which this session belongs. A length of 0 indicates that no service group was assigned.')
rbnL2tpPCfgEthEncap = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 1, 1, 32), EthEncapType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbnL2tpPCfgEthEncap.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpPCfgEthEncap.setDescription('This object indicates the ethernet encap type.')
rbnL2tpPCfgEthSession = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 1, 1, 33), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbnL2tpPCfgEthSession.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpPCfgEthSession.setDescription('This object indicates the ethernet session of which this is a part. This is only set for non PPPoE sessions otherwise it will have a zero length.')
rbnL2tpPCfgTunnelCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 1, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpPCfgTunnelCount.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpPCfgTunnelCount.setDescription('This object indicates the number of tunnels that are active for this peer configuration.')
rbnL2tpPCfgTunCtlErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 1, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpPCfgTunCtlErrs.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpPCfgTunCtlErrs.setDescription('This object is a count of the number of tunnel control errors encountered by tunnels connected to this peer.')
rbnL2tpPCfgSessionCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 1, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpPCfgSessionCount.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpPCfgSessionCount.setDescription('This object is a count of the number of sessions that are part of this peer.')
rbnL2tpTunnelCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 2), )
if mibBuilder.loadTexts: rbnL2tpTunnelCfgTable.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpTunnelCfgTable.setDescription('The L2TP Tunnel Information Table.')
rbnL2tpTunnelCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 2, 1), ).setIndexNames((0, "RBN-L2TP-MIB", "rbnL2tpMibTunnelID"))
if mibBuilder.loadTexts: rbnL2tpTunnelCfgEntry.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpTunnelCfgEntry.setDescription('An L2TP Tunnel Information entry. An entry in this table corresponds to a single tunnel. Entries are added to this table as tunnels become connected. Entries are removed from the table if the communication with one or both ends of a tunnel is lost.')
rbnL2tpMibTunnelID = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: rbnL2tpMibTunnelID.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpMibTunnelID.setDescription('This object indicates the ID number of this tunnel.')
rbnL2tpTCfgTunnelNm = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 2, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpTCfgTunnelNm.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpTCfgTunnelNm.setDescription('This object indicates the local name that was given to this tunnel.')
rbnL2tpTCfgPeerName = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 2, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpTCfgPeerName.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpTCfgPeerName.setDescription('This object indicates the remote peer to which this tunnel is connected.')
rbnL2tpTCfgTunCtlErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpTCfgTunCtlErrs.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpTCfgTunCtlErrs.setDescription('This object is a count of the number of tunnel control errors encountered by this tunnel.')
rbnL2tpTCfgLastCtlErr = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 2, 1, 5), CtlErrType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpTCfgLastCtlErr.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpTCfgLastCtlErr.setDescription('The value of the last control error.')
rbnL2tpTCfgLastCErrTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 2, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpTCfgLastCErrTime.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpTCfgLastCErrTime.setDescription('The time of the last control error.')
rbnL2tpTCfgTunDataErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpTCfgTunDataErrs.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpTCfgTunDataErrs.setDescription('The number of tunnel data errors.')
rbnL2tpTCfgLastDataErr = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 2, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpTCfgLastDataErr.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpTCfgLastDataErr.setDescription('The value of the last tunnel data error.')
rbnL2tpTCfgLastDErrTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 2, 1, 9), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpTCfgLastDErrTime.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpTCfgLastDErrTime.setDescription('The time of the last tunnel data error.')
rbnL2tpTCfgSessionCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 2, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpTCfgSessionCount.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpTCfgSessionCount.setDescription('The number of sessions belonging to this tunnel.')
rbnL2tpTCfgTotActSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpTCfgTotActSessions.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpTCfgTotActSessions.setDescription('This object indicates the total number of sessions that, at some time, reached the established state.')
rbnL2tpTCfgActSessCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 2, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpTCfgActSessCnt.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpTCfgActSessCnt.setDescription('This object indicates the total number of sessions that are presently in the established state.')
rbnL2tpTCfgTotFailSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpTCfgTotFailSessions.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpTCfgTotFailSessions.setDescription('This object indicates the number of sessions that failed to reach the established state.')
rbnL2tpMibTunnelState = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 2, 1, 14), TunStateType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpMibTunnelState.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpMibTunnelState.setDescription('This object is the current state of the tunnel.')
rbnL2tpTCfgRemoteTunnelID = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 2, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpTCfgRemoteTunnelID.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpTCfgRemoteTunnelID.setDescription('This object indicates the remote tunnel ID. A value of zero indicates that the remote tunnel ID could not be determined.')
rbnL2tpTCfgTunnelContext = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 2, 1, 16), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpTCfgTunnelContext.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpTCfgTunnelContext.setDescription('This object identifies the context of this tunnel. The empty context name (zero length) indicates that the context could not be determined. Any context name length greater than 80 will be truncated.')
rbnL2tpPeerCntTable = MibTable((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 4), )
if mibBuilder.loadTexts: rbnL2tpPeerCntTable.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpPeerCntTable.setDescription('The L2TP Peer Statistics Table.')
rbnL2tpPeerCntEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 4, 1), ).setIndexNames((1, "RBN-L2TP-MIB", "rbnL2tpMibPeerName"))
if mibBuilder.loadTexts: rbnL2tpPeerCntEntry.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpPeerCntEntry.setDescription('An L2TP Peer Statistics entry. An entry in this table corresponds to a single peer. The statistics reported are the totals for all tunnels that are a part of this peer group.')
rbnL2tpPCDataPktSent = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 4, 1, 1), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpPCDataPktSent.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpPCDataPktSent.setDescription('This object is a count of the total number of data packets sent through tunnels that are part of this group to the the L2TP peer.')
rbnL2tpPCDataPktRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 4, 1, 2), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpPCDataPktRx.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpPCDataPktRx.setDescription('This object is a count of the total number of data packets received through tunnels that are part of this group from the the L2TP peer.')
rbnL2tpPCDataByteSent = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 4, 1, 3), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpPCDataByteSent.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpPCDataByteSent.setDescription('This object is a count of the total number of data bytes sent through tunnels that are part of this group to the the L2TP peer.')
rbnL2tpPCDataByteRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 4, 1, 4), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpPCDataByteRx.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpPCDataByteRx.setDescription('This object is a count of the total number of data bytes received through tunnels that are part of this group from the the L2TP peer.')
rbnL2tpPCCtlPktSent = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 4, 1, 5), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpPCCtlPktSent.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpPCCtlPktSent.setDescription('This object is a count of the total number of control packets sent through tunnels that are part of this group to the the L2TP peer.')
rbnL2tpPCCtlPktRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 4, 1, 6), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpPCCtlPktRx.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpPCCtlPktRx.setDescription('This object is a count of the total number of control packets received through tunnels that are a part of this group from the L2TP peer.')
rbnL2tpPCCtlByteSent = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 4, 1, 7), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpPCCtlByteSent.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpPCCtlByteSent.setDescription('This object is a count of the total number of control bytes sent through tunnels that are a part of this group to the the L2TP peer.')
rbnL2tpPCCtlByteRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 4, 1, 8), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpPCCtlByteRx.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpPCCtlByteRx.setDescription('This object is a count of the total number of control bytes received through tunnels that are a part of this group from the L2TP peer.')
rbnL2tpPCPolicePktDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 4, 1, 9), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpPCPolicePktDrop.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpPCPolicePktDrop.setDescription('This object indicates the total number of packets received from L2TP peers of tunnels that are a part of this group that were dropped.')
rbnL2tpPCRatePktDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 4, 1, 10), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpPCRatePktDrop.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpPCRatePktDrop.setDescription('This object indicates the total number of packets transmitted to the L2TP peers of tunnels in this group that were dropped.')
rbnL2tpPCTxSCCRQCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpPCTxSCCRQCnt.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpPCTxSCCRQCnt.setDescription('This object indicates a count of the SCCRQ transmits for this group.')
rbnL2tpPCRxSCCRQCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpPCRxSCCRQCnt.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpPCRxSCCRQCnt.setDescription("This object is a count of the received SCCRQ's for this group.")
rbnL2tpPCActTunnels = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 4, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpPCActTunnels.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpPCActTunnels.setDescription('This object indicates the number of the active tunnels for this group.')
rbnL2tpPCTunnelCtlErr = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 4, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpPCTunnelCtlErr.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpPCTunnelCtlErr.setDescription('This object indicates the total number of tunnel control errors for all of the tunnels that are a part of this group.')
rbnL2tpPCSessionCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 4, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpPCSessionCount.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpPCSessionCount.setDescription('This object indicates the total number of sessions for this group.')
rbnL2tpPCTunnelDataErr = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 4, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpPCTunnelDataErr.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpPCTunnelDataErr.setDescription('This object indicates the total number of tunnel data errors reported by members of this group.')
rbnL2tpTunnelCntTable = MibTable((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 5), )
if mibBuilder.loadTexts: rbnL2tpTunnelCntTable.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpTunnelCntTable.setDescription('The L2TP Tunnel Statistics Table.')
rbnL2tpTunnelCntEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 5, 1), ).setIndexNames((0, "RBN-L2TP-MIB", "rbnL2tpMibTunnelID"))
if mibBuilder.loadTexts: rbnL2tpTunnelCntEntry.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpTunnelCntEntry.setDescription('An L2TP Tunnel Statistics entry. An entry in this table corresponds to a single tunnel.')
rbnL2tpTCDataPktSent = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 5, 1, 1), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpTCDataPktSent.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpTCDataPktSent.setDescription('This object indicates the number of data packets sent from this platform through this tunnel to its peer.')
rbnL2tpTCDataPktRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 5, 1, 2), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpTCDataPktRcvd.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpTCDataPktRcvd.setDescription('This object indicates the number of packets received from the L2TP peer for this tunnel.')
rbnL2tpTCDataByteSent = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 5, 1, 3), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpTCDataByteSent.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpTCDataByteSent.setDescription('This object indicates the number of data bytes sent from this platform through this tunnel to its peer.')
rbnL2tpTCDataByteRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 5, 1, 4), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpTCDataByteRcvd.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpTCDataByteRcvd.setDescription('This object indicates the number of data bytes received from the L2TP peer for this tunnel.')
rbnL2tpTCCntrlPktSent = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 5, 1, 5), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpTCCntrlPktSent.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpTCCntrlPktSent.setDescription('This object indicates the number of control packets sent from this platform through this tunnel to its L2TP peer.')
rbnL2tpTCCntrlPktRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 5, 1, 6), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpTCCntrlPktRcvd.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpTCCntrlPktRcvd.setDescription('This object indicates the number of control packets received from the L2TP peer for this tunnel.')
rbnL2tpTCCntrlByteSent = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 5, 1, 7), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpTCCntrlByteSent.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpTCCntrlByteSent.setDescription('This object indicates the number of control bytes sent from this platform through this tunnel to its L2TP peer.')
rbnL2tpTCCntrlByteRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 5, 1, 8), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpTCCntrlByteRcvd.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpTCCntrlByteRcvd.setDescription('This object indicates the number of control bytes received from the L2TP peer of this tunnel.')
rbnL2tpTCPolicePktDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 5, 1, 9), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpTCPolicePktDrop.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpTCPolicePktDrop.setDescription('This object indicates the number of packets received from the L2TP peer of this tunnel that were dropped.')
rbnL2tpTCRatePktDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 5, 1, 10), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpTCRatePktDrop.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpTCRatePktDrop.setDescription('This object indicates the number of packets transmitted from this platform through this tunnel that were dropped.')
rbnL2tpTCCntrlErr = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 5, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpTCCntrlErr.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpTCCntrlErr.setDescription('This object indicate the number of control errors that were detected.')
rbnL2tpTCLastCtlErr = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 5, 1, 12), CtlErrType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpTCLastCtlErr.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpTCLastCtlErr.setDescription('This object indicates the last control error for this tunnel that was detected.')
rbnL2tpTCLastCtlErrTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 5, 1, 13), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpTCLastCtlErrTime.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpTCLastCtlErrTime.setDescription('This object indicates the time that the last control error for this tunnel was detected.')
rbnL2tpTCMaxResendQ = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 5, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpTCMaxResendQ.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpTCMaxResendQ.setDescription('This object indicates the maximum length of the resend queue.')
rbnL2tpTCMaxUnsentQ = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 5, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpTCMaxUnsentQ.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpTCMaxUnsentQ.setDescription('This object indicates the maximum length of the unsent queue.')
rbnL2tpTCCurResendQ = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 5, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpTCCurResendQ.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpTCCurResendQ.setDescription('This object indicates the current length of the resend queue.')
rbnL2tpTCCurUnsentQ = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 5, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpTCCurUnsentQ.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpTCCurUnsentQ.setDescription('This object indicates the current length of the unsent queue.')
rbnL2tpTCCurWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 5, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpTCCurWindow.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpTCCurWindow.setDescription('This object indicates the current window size.')
rbnL2tpSessionCntTable = MibTable((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 6), )
if mibBuilder.loadTexts: rbnL2tpSessionCntTable.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpSessionCntTable.setDescription('The L2TP Session Statistics Table.')
rbnL2tpSessionCntEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 6, 1), ).setIndexNames((0, "RBN-L2TP-MIB", "rbnL2tpMibTunnelID"), (0, "RBN-L2TP-MIB", "rbnL2tpMibSessionID"))
if mibBuilder.loadTexts: rbnL2tpSessionCntEntry.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpSessionCntEntry.setDescription('An L2TP Session Statistics entry. An entry in this table corresponds to a single session.')
rbnL2tpMibSessionID = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 6, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: rbnL2tpMibSessionID.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpMibSessionID.setDescription('This object identifies the Session ID for a given L2TP session.')
rbnL2tpSCPktSent = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 6, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpSCPktSent.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpSCPktSent.setDescription('This object indicates the number of packets sent by this platform in this session.')
rbnL2tpSCPktRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpSCPktRcvd.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpSCPktRcvd.setDescription('This object indicates the number of packets received by this platform in this session.')
rbnL2tpSCByteSent = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpSCByteSent.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpSCByteSent.setDescription('This object indicates the number of bytes sent by this platform in this session.')
rbnL2tpSCByteRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpSCByteRcvd.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpSCByteRcvd.setDescription('This object indicates the number of bytes received by this platform in this session.')
rbnL2tpSCMcastPktSent = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 6, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpSCMcastPktSent.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpSCMcastPktSent.setDescription('This object indicates the number of multicast packets sent by this platform in this session.')
rbnL2tpSCMcastPktRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 6, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpSCMcastPktRcvd.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpSCMcastPktRcvd.setDescription('This object indicates the number of multicast packets received by this platform in this session.')
rbnL2tpSCMcastByteSent = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 6, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpSCMcastByteSent.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpSCMcastByteSent.setDescription('This object indicates the number of multicast bytes sent by this platform in this session.')
rbnL2tpSCMcastByteRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 6, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpSCMcastByteRcvd.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpSCMcastByteRcvd.setDescription('This object indicates the number of multicast bytes received by this platform in this session.')
rbnL2tpPeerTunCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 8), )
if mibBuilder.loadTexts: rbnL2tpPeerTunCfgTable.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpPeerTunCfgTable.setDescription('This table contains objects which identify L2TP peers and tunnels.')
rbnL2tpPeerTunCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 8, 1), ).setIndexNames((0, "RBN-L2TP-MIB", "rbnL2tpMibPeerName"), (0, "RBN-L2TP-MIB", "rbnL2tpMibTunnelID"))
if mibBuilder.loadTexts: rbnL2tpPeerTunCfgEntry.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpPeerTunCfgEntry.setDescription('A conceptual row in the rbnL2tpPeerTunCfgTable. An entry in this table corresponds to a single tunnel of a L2TP peer. Entries are added to this table as tunnels become connected. Entries are removed from the table if the communication with one or both ends of a tunnel is lost.')
rbnL2tpPTCfgTunnelRemoteID = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 8, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpPTCfgTunnelRemoteID.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpPTCfgTunnelRemoteID.setDescription('This object indicates the remote tunnel ID. A value of zero indicates that the remote tunnel ID could not be determined.')
rbnL2tpPTCfgTunnelLocalNm = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 8, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpPTCfgTunnelLocalNm.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpPTCfgTunnelLocalNm.setDescription('This object indicates the local name that was given to this tunnel. The length of the string will be zero if no local name assigned to the tunnel.')
rbnL2tpPTCfgTunnelRemoteNm = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 8, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpPTCfgTunnelRemoteNm.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpPTCfgTunnelRemoteNm.setDescription('This object indicates the name that was given to the remote end of this tunnel. The length of the string will be zero if no tunnel name can be obtained from the peer.')
rbnL2tpPTCfgPeerLocalNm = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 8, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpPTCfgPeerLocalNm.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpPTCfgPeerLocalNm.setDescription('This object identifies the local peer name. The empty peer name (zero length) indicates that the name could not be determined.')
rbnL2tpPTCfgTunnelRemoteIPAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 8, 1, 5), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpPTCfgTunnelRemoteIPAddrType.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpPTCfgTunnelRemoteIPAddrType.setDescription('This object identifies the address type contained in rbnL2tpPTCfgTunnelRemoteIPAddr.')
rbnL2tpPTCfgTunnelRemoteIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 8, 1, 6), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpPTCfgTunnelRemoteIPAddr.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpPTCfgTunnelRemoteIPAddr.setDescription('This object identifies the remote IP address for this tunnel (utilized only with User Datagram Protocol).')
rbnL2tpPTCfgTunnelState = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 8, 1, 7), TunStateType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpPTCfgTunnelState.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpPTCfgTunnelState.setDescription('This object is the current state of the tunnel.')
rbnL2tpPTCfgTunnelContext = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 8, 1, 8), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpPTCfgTunnelContext.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpPTCfgTunnelContext.setDescription('This object identifies the context of this tunnel. The empty context name (zero length) indicates that the context could not be determined. Any context name length greater than 80 will be truncated.')
rbnL2tpPTCfgSessionCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 8, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpPTCfgSessionCount.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpPTCfgSessionCount.setDescription('The number of sessions belonging to this tunnel.')
rbnL2tpPTCfgActSessCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 8, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpPTCfgActSessCnt.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpPTCfgActSessCnt.setDescription('This object indicates the total number of sessions that are presently in the established state.')
rbnL2tpPTCfgTotActSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 8, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpPTCfgTotActSessions.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpPTCfgTotActSessions.setDescription('This object indicates the total number of sessions that, at some time, reached the established state.')
rbnL2tpPTCfgTotFailSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 8, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpPTCfgTotFailSessions.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpPTCfgTotFailSessions.setDescription('This object indicates the number of sessions that failed to reach the established state.')
rbnL2tpMibTrapObj = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 7))
rbnL2tpMibTunnelTrapContext = MibScalar((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 7, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: rbnL2tpMibTunnelTrapContext.setStatus('deprecated')
if mibBuilder.loadTexts: rbnL2tpMibTunnelTrapContext.setDescription('This object contains the context name to which this tunnel belongs.')
rbnL2tpMibTunnelTrapState = MibScalar((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 7, 2), TruthValue()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: rbnL2tpMibTunnelTrapState.setStatus('deprecated')
if mibBuilder.loadTexts: rbnL2tpMibTunnelTrapState.setDescription('The tunnel state. A value of 1 (true) indicates that a the tunnel is up (in the ESTABLISHED state). A value of 2 (false) indicates that the tunnel is down (no longer in the ESTABLISHED state).')
rbnL2tpMibDisableTrap = MibScalar((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 7, 3), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbnL2tpMibDisableTrap.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpMibDisableTrap.setDescription('This object will provide a mechanism for disabling and enabling tunnel traps. A value of 1 (true) indicates that tunnel traps are disabled. A value of 2 (false) indicates that tunnel traps are enabled.')
rbnL2tpMibTunnelStateChange = NotificationType((1, 3, 6, 1, 4, 1, 2352, 2, 28, 0, 1)).setObjects(("RBN-L2TP-MIB", "rbnL2tpMibTunnelTrapContext"), ("RBN-L2TP-MIB", "rbnL2tpMibTunnelTrapState"))
if mibBuilder.loadTexts: rbnL2tpMibTunnelStateChange.setStatus('deprecated')
if mibBuilder.loadTexts: rbnL2tpMibTunnelStateChange.setDescription('A rbnL2tpMibTunnelStateChange trap signifies that this particular tunnel has changed state.')
rbnL2tpMibTunnelStateChange2 = NotificationType((1, 3, 6, 1, 4, 1, 2352, 2, 28, 0, 2)).setObjects(("RBN-L2TP-MIB", "rbnL2tpTCfgTunnelContext"), ("RBN-L2TP-MIB", "rbnL2tpMibTunnelState"), ("RBN-L2TP-MIB", "rbnL2tpTCfgRemoteTunnelID"))
if mibBuilder.loadTexts: rbnL2tpMibTunnelStateChange2.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpMibTunnelStateChange2.setDescription('This notification signifies that the SNMP entity has detected that the operational state of a tunnel has entered or moved from the established state. The current tunnel operational state is indicated by the included value of rbnL2tpMibTunnelState.')
rbnL2tpMibGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 28, 2, 1))
rbnL2tpMibCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 28, 2, 2))
rbnL2tpMibCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2352, 2, 28, 2, 2, 1)).setObjects(("RBN-L2TP-MIB", "rbnL2tpMibPeerCfgGroup"), ("RBN-L2TP-MIB", "rbnL2tpMibTunnelCfgGroup"), ("RBN-L2TP-MIB", "rbnL2tpMibPeerCntGroup"), ("RBN-L2TP-MIB", "rbnL2tpMibTunnelCntGroup"), ("RBN-L2TP-MIB", "rbnL2tpMibSessionCntGroup"), ("RBN-L2TP-MIB", "rbnL2tpMibGroup"), ("RBN-L2TP-MIB", "rbnL2tpMibNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnL2tpMibCompliance = rbnL2tpMibCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: rbnL2tpMibCompliance.setDescription('The compliance statement for SNMPv2 entities which implement the L2TP MIB.')
rbnL2tpMibCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 2352, 2, 28, 2, 2, 2)).setObjects(("RBN-L2TP-MIB", "rbnL2tpMibPeerCfgGroup"), ("RBN-L2TP-MIB", "rbnL2tpMibTunnelCfgGroup"), ("RBN-L2TP-MIB", "rbnL2tpMibPeerCntGroup"), ("RBN-L2TP-MIB", "rbnL2tpMibTunnelCntGroup"), ("RBN-L2TP-MIB", "rbnL2tpMibSessionCntGroup"), ("RBN-L2TP-MIB", "rbnL2tpMibGroup2"), ("RBN-L2TP-MIB", "rbnL2tpMibNotificationGroup2"), ("RBN-L2TP-MIB", "rbnL2tpMibPeerTunCfgGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnL2tpMibCompliance2 = rbnL2tpMibCompliance2.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpMibCompliance2.setDescription('The compliance statement for SNMP entities which implement the Redback L2TP MIB.')
rbnL2tpMibPeerCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2352, 2, 28, 2, 1, 1)).setObjects(("RBN-L2TP-MIB", "rbnL2tpPCfgMedia"), ("RBN-L2TP-MIB", "rbnL2tpPCfgVendor"), ("RBN-L2TP-MIB", "rbnL2tpPCfgRev"), ("RBN-L2TP-MIB", "rbnL2tpPCfgHostName"), ("RBN-L2TP-MIB", "rbnL2tpPCfgRadius"), ("RBN-L2TP-MIB", "rbnL2tpPCfgRemIPAddType"), ("RBN-L2TP-MIB", "rbnL2tpPCfgRemIPAdd"), ("RBN-L2TP-MIB", "rbnL2tpPCfgStatic"), ("RBN-L2TP-MIB", "rbnL2tpPCfgLocalIPAddType"), ("RBN-L2TP-MIB", "rbnL2tpPCfgLocalIPAdd"), ("RBN-L2TP-MIB", "rbnL2tpPCfgMode"), ("RBN-L2TP-MIB", "rbnL2tpPCfgMaxTunnels"), ("RBN-L2TP-MIB", "rbnL2tpPCfgMaxSesPerTun"), ("RBN-L2TP-MIB", "rbnL2tpPCfgCtlRetranCnt"), ("RBN-L2TP-MIB", "rbnL2tpPCfgCtlRetranTO"), ("RBN-L2TP-MIB", "rbnL2tpPCfgSessAuth"), ("RBN-L2TP-MIB", "rbnL2tpPCfgCtlWin"), ("RBN-L2TP-MIB", "rbnL2tpPCfgDNIS"), ("RBN-L2TP-MIB", "rbnL2tpPCfgPoliceRate"), ("RBN-L2TP-MIB", "rbnL2tpPCfgPoliceBurst"), ("RBN-L2TP-MIB", "rbnL2tpPCfgLimitRate"), ("RBN-L2TP-MIB", "rbnL2tpPCfgLimitBurst"), ("RBN-L2TP-MIB", "rbnL2tpPCfgGroup"), ("RBN-L2TP-MIB", "rbnL2tpPCfgPref"), ("RBN-L2TP-MIB", "rbnL2tpPCfgPasswd"), ("RBN-L2TP-MIB", "rbnL2tpPCfgHelloTimer"), ("RBN-L2TP-MIB", "rbnL2tpPCfgRecQue"), ("RBN-L2TP-MIB", "rbnL2tpPCfgSessContext"), ("RBN-L2TP-MIB", "rbnL2tpPCfgSessService"), ("RBN-L2TP-MIB", "rbnL2tpPCfgEthEncap"), ("RBN-L2TP-MIB", "rbnL2tpPCfgEthSession"), ("RBN-L2TP-MIB", "rbnL2tpPCfgTunnelCount"), ("RBN-L2TP-MIB", "rbnL2tpPCfgTunCtlErrs"), ("RBN-L2TP-MIB", "rbnL2tpPCfgSessionCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnL2tpMibPeerCfgGroup = rbnL2tpMibPeerCfgGroup.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpMibPeerCfgGroup.setDescription('A collection of objects providing peer information of the L2TP protocol, tunnels and sessions.')
rbnL2tpMibTunnelCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2352, 2, 28, 2, 1, 2)).setObjects(("RBN-L2TP-MIB", "rbnL2tpTCfgTunnelNm"), ("RBN-L2TP-MIB", "rbnL2tpTCfgPeerName"), ("RBN-L2TP-MIB", "rbnL2tpTCfgTunCtlErrs"), ("RBN-L2TP-MIB", "rbnL2tpTCfgLastCtlErr"), ("RBN-L2TP-MIB", "rbnL2tpTCfgLastCErrTime"), ("RBN-L2TP-MIB", "rbnL2tpTCfgTunDataErrs"), ("RBN-L2TP-MIB", "rbnL2tpTCfgLastDataErr"), ("RBN-L2TP-MIB", "rbnL2tpTCfgLastDErrTime"), ("RBN-L2TP-MIB", "rbnL2tpTCfgSessionCount"), ("RBN-L2TP-MIB", "rbnL2tpTCfgTotActSessions"), ("RBN-L2TP-MIB", "rbnL2tpTCfgActSessCnt"), ("RBN-L2TP-MIB", "rbnL2tpTCfgTotFailSessions"), ("RBN-L2TP-MIB", "rbnL2tpMibTunnelState"), ("RBN-L2TP-MIB", "rbnL2tpTCfgRemoteTunnelID"), ("RBN-L2TP-MIB", "rbnL2tpTCfgTunnelContext"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnL2tpMibTunnelCfgGroup = rbnL2tpMibTunnelCfgGroup.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpMibTunnelCfgGroup.setDescription('A collection of objects providing status and statistics of the L2TP protocol, tunnels and sessions.')
rbnL2tpMibPeerCntGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2352, 2, 28, 2, 1, 3)).setObjects(("RBN-L2TP-MIB", "rbnL2tpPCDataPktSent"), ("RBN-L2TP-MIB", "rbnL2tpPCDataPktRx"), ("RBN-L2TP-MIB", "rbnL2tpPCDataByteSent"), ("RBN-L2TP-MIB", "rbnL2tpPCDataByteRx"), ("RBN-L2TP-MIB", "rbnL2tpPCCtlPktSent"), ("RBN-L2TP-MIB", "rbnL2tpPCCtlPktRx"), ("RBN-L2TP-MIB", "rbnL2tpPCCtlByteSent"), ("RBN-L2TP-MIB", "rbnL2tpPCCtlByteRx"), ("RBN-L2TP-MIB", "rbnL2tpPCPolicePktDrop"), ("RBN-L2TP-MIB", "rbnL2tpPCRatePktDrop"), ("RBN-L2TP-MIB", "rbnL2tpPCTxSCCRQCnt"), ("RBN-L2TP-MIB", "rbnL2tpPCRxSCCRQCnt"), ("RBN-L2TP-MIB", "rbnL2tpPCActTunnels"), ("RBN-L2TP-MIB", "rbnL2tpPCTunnelCtlErr"), ("RBN-L2TP-MIB", "rbnL2tpPCSessionCount"), ("RBN-L2TP-MIB", "rbnL2tpPCTunnelDataErr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnL2tpMibPeerCntGroup = rbnL2tpMibPeerCntGroup.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpMibPeerCntGroup.setDescription('A collection of objects providing peer count statistics.')
rbnL2tpMibTunnelCntGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2352, 2, 28, 2, 1, 4)).setObjects(("RBN-L2TP-MIB", "rbnL2tpTCDataPktSent"), ("RBN-L2TP-MIB", "rbnL2tpTCDataPktRcvd"), ("RBN-L2TP-MIB", "rbnL2tpTCDataByteSent"), ("RBN-L2TP-MIB", "rbnL2tpTCDataByteRcvd"), ("RBN-L2TP-MIB", "rbnL2tpTCCntrlPktSent"), ("RBN-L2TP-MIB", "rbnL2tpTCCntrlPktRcvd"), ("RBN-L2TP-MIB", "rbnL2tpTCCntrlByteSent"), ("RBN-L2TP-MIB", "rbnL2tpTCCntrlByteRcvd"), ("RBN-L2TP-MIB", "rbnL2tpTCPolicePktDrop"), ("RBN-L2TP-MIB", "rbnL2tpTCRatePktDrop"), ("RBN-L2TP-MIB", "rbnL2tpTCCntrlErr"), ("RBN-L2TP-MIB", "rbnL2tpTCLastCtlErr"), ("RBN-L2TP-MIB", "rbnL2tpTCLastCtlErrTime"), ("RBN-L2TP-MIB", "rbnL2tpTCMaxResendQ"), ("RBN-L2TP-MIB", "rbnL2tpTCMaxUnsentQ"), ("RBN-L2TP-MIB", "rbnL2tpTCCurResendQ"), ("RBN-L2TP-MIB", "rbnL2tpTCCurUnsentQ"), ("RBN-L2TP-MIB", "rbnL2tpTCCurWindow"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnL2tpMibTunnelCntGroup = rbnL2tpMibTunnelCntGroup.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpMibTunnelCntGroup.setDescription('A collection of objects providing tunnel count statistics.')
rbnL2tpMibSessionCntGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2352, 2, 28, 2, 1, 5)).setObjects(("RBN-L2TP-MIB", "rbnL2tpSCPktSent"), ("RBN-L2TP-MIB", "rbnL2tpSCPktRcvd"), ("RBN-L2TP-MIB", "rbnL2tpSCByteSent"), ("RBN-L2TP-MIB", "rbnL2tpSCByteRcvd"), ("RBN-L2TP-MIB", "rbnL2tpSCMcastPktSent"), ("RBN-L2TP-MIB", "rbnL2tpSCMcastPktRcvd"), ("RBN-L2TP-MIB", "rbnL2tpSCMcastByteSent"), ("RBN-L2TP-MIB", "rbnL2tpSCMcastByteRcvd"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnL2tpMibSessionCntGroup = rbnL2tpMibSessionCntGroup.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpMibSessionCntGroup.setDescription('A collection of objects providing session count statistics.')
rbnL2tpMibGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2352, 2, 28, 2, 1, 7)).setObjects(("RBN-L2TP-MIB", "rbnL2tpMibTunnelTrapContext"), ("RBN-L2TP-MIB", "rbnL2tpMibTunnelTrapState"), ("RBN-L2TP-MIB", "rbnL2tpMibDisableTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnL2tpMibGroup = rbnL2tpMibGroup.setStatus('deprecated')
if mibBuilder.loadTexts: rbnL2tpMibGroup.setDescription('The collection of groups which represent a tunnel state change or can effect the notification of such change. This group is replaced by rbnL2tpMibGroup2.')
rbnL2tpMibNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2352, 2, 28, 2, 1, 8)).setObjects(("RBN-L2TP-MIB", "rbnL2tpMibTunnelStateChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnL2tpMibNotificationGroup = rbnL2tpMibNotificationGroup.setStatus('deprecated')
if mibBuilder.loadTexts: rbnL2tpMibNotificationGroup.setDescription('A collection of rbnL2tpMib notifications. This group is replaced by rbnL2tpMibNotificationGroup2.')
rbnL2tpMibGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 2352, 2, 28, 2, 1, 9)).setObjects(("RBN-L2TP-MIB", "rbnL2tpMibDisableTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnL2tpMibGroup2 = rbnL2tpMibGroup2.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpMibGroup2.setDescription('Object for managing L2TP notifications.')
rbnL2tpMibNotificationGroup2 = NotificationGroup((1, 3, 6, 1, 4, 1, 2352, 2, 28, 2, 1, 10)).setObjects(("RBN-L2TP-MIB", "rbnL2tpMibTunnelStateChange2"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnL2tpMibNotificationGroup2 = rbnL2tpMibNotificationGroup2.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpMibNotificationGroup2.setDescription('Notification for tracking the status of L2TP tunnels.')
rbnL2tpMibPeerTunCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2352, 2, 28, 2, 1, 11)).setObjects(("RBN-L2TP-MIB", "rbnL2tpPTCfgTunnelRemoteID"), ("RBN-L2TP-MIB", "rbnL2tpPTCfgTunnelLocalNm"), ("RBN-L2TP-MIB", "rbnL2tpPTCfgTunnelRemoteNm"), ("RBN-L2TP-MIB", "rbnL2tpPTCfgPeerLocalNm"), ("RBN-L2TP-MIB", "rbnL2tpPTCfgTunnelRemoteIPAddrType"), ("RBN-L2TP-MIB", "rbnL2tpPTCfgTunnelRemoteIPAddr"), ("RBN-L2TP-MIB", "rbnL2tpPTCfgTunnelState"), ("RBN-L2TP-MIB", "rbnL2tpPTCfgTunnelContext"), ("RBN-L2TP-MIB", "rbnL2tpPTCfgSessionCount"), ("RBN-L2TP-MIB", "rbnL2tpPTCfgTotActSessions"), ("RBN-L2TP-MIB", "rbnL2tpPTCfgActSessCnt"), ("RBN-L2TP-MIB", "rbnL2tpPTCfgTotFailSessions"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnL2tpMibPeerTunCfgGroup = rbnL2tpMibPeerTunCfgGroup.setStatus('current')
if mibBuilder.loadTexts: rbnL2tpMibPeerTunCfgGroup.setDescription('A collection of objects providing status and statistics of the L2TP peers and tunnels.')
mibBuilder.exportSymbols("RBN-L2TP-MIB", rbnL2tpMibTunnelStateChange=rbnL2tpMibTunnelStateChange, rbnL2tpMibCompliance=rbnL2tpMibCompliance, rbnL2tpTunnelCfgTable=rbnL2tpTunnelCfgTable, rbnL2tpPCDataByteRx=rbnL2tpPCDataByteRx, rbnL2tpPCfgSessContext=rbnL2tpPCfgSessContext, rbnL2tpMibNotificationGroup=rbnL2tpMibNotificationGroup, rbnL2tpTCCntrlByteRcvd=rbnL2tpTCCntrlByteRcvd, rbnL2tpPCfgMaxSesPerTun=rbnL2tpPCfgMaxSesPerTun, rbnL2tpPeerTunCfgTable=rbnL2tpPeerTunCfgTable, rbnL2tpMibNotificationGroup2=rbnL2tpMibNotificationGroup2, rbnL2tpPCfgEthEncap=rbnL2tpPCfgEthEncap, rbnL2tpPCTunnelCtlErr=rbnL2tpPCTunnelCtlErr, rbnL2tpPeerTunCfgEntry=rbnL2tpPeerTunCfgEntry, rbnL2tpMibPeerCntGroup=rbnL2tpMibPeerCntGroup, rbnL2tpPCfgHostName=rbnL2tpPCfgHostName, rbnL2tpPTCfgTunnelState=rbnL2tpPTCfgTunnelState, rbnL2tpPeerCntTable=rbnL2tpPeerCntTable, rbnL2tpTCDataPktRcvd=rbnL2tpTCDataPktRcvd, rbnL2tpPCfgDNIS=rbnL2tpPCfgDNIS, rbnL2tpTCCurResendQ=rbnL2tpTCCurResendQ, rbnL2tpPCfgRecQue=rbnL2tpPCfgRecQue, EthEncapType=EthEncapType, rbnL2tpTCDataByteRcvd=rbnL2tpTCDataByteRcvd, CtlErrType=CtlErrType, DNISType=DNISType, rbnL2tpSCPktSent=rbnL2tpSCPktSent, rbnL2tpTCDataPktSent=rbnL2tpTCDataPktSent, rbnL2tpTCCntrlPktSent=rbnL2tpTCCntrlPktSent, rbnL2tpTCfgTunnelNm=rbnL2tpTCfgTunnelNm, rbnL2tpSCMcastPktSent=rbnL2tpSCMcastPktSent, rbnL2tpMibSessionID=rbnL2tpMibSessionID, rbnL2tpPCfgRev=rbnL2tpPCfgRev, rbnL2tpPCfgCtlRetranTO=rbnL2tpPCfgCtlRetranTO, rbnL2tpTCfgPeerName=rbnL2tpTCfgPeerName, rbnL2tpTCfgTotFailSessions=rbnL2tpTCfgTotFailSessions, rbnL2tpTCCntrlPktRcvd=rbnL2tpTCCntrlPktRcvd, rbnL2tpSCByteSent=rbnL2tpSCByteSent, rbnL2tpPTCfgTunnelRemoteID=rbnL2tpPTCfgTunnelRemoteID, rbnL2tpPCfgLimitBurst=rbnL2tpPCfgLimitBurst, rbnL2tpPCfgPref=rbnL2tpPCfgPref, rbnL2tpPCfgLocalIPAdd=rbnL2tpPCfgLocalIPAdd, rbnL2tpPCfgVendor=rbnL2tpPCfgVendor, rbnL2tpTCfgTotActSessions=rbnL2tpTCfgTotActSessions, rbnL2tpTCfgTunCtlErrs=rbnL2tpTCfgTunCtlErrs, rbnL2tpPCDataByteSent=rbnL2tpPCDataByteSent, rbnL2tpPCCtlPktRx=rbnL2tpPCCtlPktRx, rbnL2tpTCfgTunnelContext=rbnL2tpTCfgTunnelContext, TunStateType=TunStateType, rbnL2tpTunnelCfgEntry=rbnL2tpTunnelCfgEntry, rbnL2tpTCfgLastCtlErr=rbnL2tpTCfgLastCtlErr, rbnL2tpPeerCfgTable=rbnL2tpPeerCfgTable, rbnL2tpPeerCfgEntry=rbnL2tpPeerCfgEntry, rbnL2tpMibSessionCntGroup=rbnL2tpMibSessionCntGroup, rbnL2tpPCfgSessService=rbnL2tpPCfgSessService, rbnL2tpTCfgLastCErrTime=rbnL2tpTCfgLastCErrTime, rbnL2tpMibCompliances=rbnL2tpMibCompliances, rbnL2tpMibObjects=rbnL2tpMibObjects, rbnL2tpPCRatePktDrop=rbnL2tpPCRatePktDrop, rbnL2tpTCfgLastDErrTime=rbnL2tpTCfgLastDErrTime, rbnL2tpSCByteRcvd=rbnL2tpSCByteRcvd, PYSNMP_MODULE_ID=rbnL2tpMib, rbnL2tpPCfgPoliceBurst=rbnL2tpPCfgPoliceBurst, rbnL2tpMibCompliance2=rbnL2tpMibCompliance2, rbnL2tpTCMaxResendQ=rbnL2tpTCMaxResendQ, rbnL2tpMibGroup=rbnL2tpMibGroup, rbnL2tpTCfgRemoteTunnelID=rbnL2tpTCfgRemoteTunnelID, rbnL2tpPCfgRemIPAdd=rbnL2tpPCfgRemIPAdd, rbnL2tpPCRxSCCRQCnt=rbnL2tpPCRxSCCRQCnt, rbnL2tpPCSessionCount=rbnL2tpPCSessionCount, rbnL2tpTCfgActSessCnt=rbnL2tpTCfgActSessCnt, rbnL2tpPCfgSessAuth=rbnL2tpPCfgSessAuth, rbnL2tpMibConformance=rbnL2tpMibConformance, rbnL2tpPCDataPktSent=rbnL2tpPCDataPktSent, rbnL2tpPCTxSCCRQCnt=rbnL2tpPCTxSCCRQCnt, rbnL2tpPCfgHelloTimer=rbnL2tpPCfgHelloTimer, rbnL2tpPCfgRemIPAddType=rbnL2tpPCfgRemIPAddType, rbnL2tpTCCurWindow=rbnL2tpTCCurWindow, rbnL2tpPCfgEthSession=rbnL2tpPCfgEthSession, rbnL2tpTCPolicePktDrop=rbnL2tpTCPolicePktDrop, rbnL2tpPCfgCtlRetranCnt=rbnL2tpPCfgCtlRetranCnt, rbnL2tpPeerCntEntry=rbnL2tpPeerCntEntry, rbnL2tpPTCfgTotFailSessions=rbnL2tpPTCfgTotFailSessions, rbnL2tpPCfgPasswd=rbnL2tpPCfgPasswd, rbnL2tpMibTunnelCfgGroup=rbnL2tpMibTunnelCfgGroup, rbnL2tpPCfgGroup=rbnL2tpPCfgGroup, rbnL2tpPTCfgActSessCnt=rbnL2tpPTCfgActSessCnt, rbnL2tpMibDisableTrap=rbnL2tpMibDisableTrap, rbnL2tpPTCfgSessionCount=rbnL2tpPTCfgSessionCount, rbnL2tpSCPktRcvd=rbnL2tpSCPktRcvd, rbnL2tpPCfgSessionCount=rbnL2tpPCfgSessionCount, rbnL2tpPCfgMedia=rbnL2tpPCfgMedia, rbnL2tpSCMcastByteSent=rbnL2tpSCMcastByteSent, rbnL2tpPCfgCtlWin=rbnL2tpPCfgCtlWin, rbnL2tpTCCntrlErr=rbnL2tpTCCntrlErr, rbnL2tpPTCfgTunnelRemoteIPAddrType=rbnL2tpPTCfgTunnelRemoteIPAddrType, rbnL2tpMibPeerName=rbnL2tpMibPeerName, rbnL2tpTunnelCntEntry=rbnL2tpTunnelCntEntry, AuthType=AuthType, rbnL2tpPCfgStatic=rbnL2tpPCfgStatic, rbnL2tpPCCtlPktSent=rbnL2tpPCCtlPktSent, rbnL2tpPTCfgTunnelContext=rbnL2tpPTCfgTunnelContext, rbnL2tpPCfgTunCtlErrs=rbnL2tpPCfgTunCtlErrs, rbnL2tpMibGroups=rbnL2tpMibGroups, rbnL2tpMibTunnelID=rbnL2tpMibTunnelID, rbnL2tpPCPolicePktDrop=rbnL2tpPCPolicePktDrop, rbnL2tpMibTrapObj=rbnL2tpMibTrapObj, rbnL2tpSessionCntTable=rbnL2tpSessionCntTable, rbnL2tpPCCtlByteRx=rbnL2tpPCCtlByteRx, rbnL2tpPCCtlByteSent=rbnL2tpPCCtlByteSent, rbnL2tpTCLastCtlErrTime=rbnL2tpTCLastCtlErrTime, rbnL2tpTCfgTunDataErrs=rbnL2tpTCfgTunDataErrs, rbnL2tpPTCfgTotActSessions=rbnL2tpPTCfgTotActSessions, rbnL2tpMibTunnelCntGroup=rbnL2tpMibTunnelCntGroup, rbnL2tpPCfgLimitRate=rbnL2tpPCfgLimitRate, rbnL2tpPTCfgTunnelRemoteIPAddr=rbnL2tpPTCfgTunnelRemoteIPAddr, LacLnsType=LacLnsType, rbnL2tpPCfgLocalIPAddType=rbnL2tpPCfgLocalIPAddType, rbnL2tpMibTunnelState=rbnL2tpMibTunnelState, rbnL2tpMibPeerCfgGroup=rbnL2tpMibPeerCfgGroup, rbnL2tpMibNotifications=rbnL2tpMibNotifications, rbnL2tpPCfgTunnelCount=rbnL2tpPCfgTunnelCount, rbnL2tpPCfgPoliceRate=rbnL2tpPCfgPoliceRate, rbnL2tpPCTunnelDataErr=rbnL2tpPCTunnelDataErr, rbnL2tpMib=rbnL2tpMib, rbnL2tpPCfgMode=rbnL2tpPCfgMode, rbnL2tpTCDataByteSent=rbnL2tpTCDataByteSent, rbnL2tpSCMcastPktRcvd=rbnL2tpSCMcastPktRcvd, rbnL2tpTCMaxUnsentQ=rbnL2tpTCMaxUnsentQ, rbnL2tpMibPeerTunCfgGroup=rbnL2tpMibPeerTunCfgGroup, rbnL2tpSCMcastByteRcvd=rbnL2tpSCMcastByteRcvd, rbnL2tpTCLastCtlErr=rbnL2tpTCLastCtlErr, rbnL2tpMibTunnelStateChange2=rbnL2tpMibTunnelStateChange2, rbnL2tpTCfgLastDataErr=rbnL2tpTCfgLastDataErr, rbnL2tpMibTunnelTrapState=rbnL2tpMibTunnelTrapState, rbnL2tpTCCntrlByteSent=rbnL2tpTCCntrlByteSent, rbnL2tpMibGroup2=rbnL2tpMibGroup2, rbnL2tpPTCfgTunnelLocalNm=rbnL2tpPTCfgTunnelLocalNm, rbnL2tpPCfgRadius=rbnL2tpPCfgRadius, rbnL2tpPCDataPktRx=rbnL2tpPCDataPktRx, rbnL2tpTunnelCntTable=rbnL2tpTunnelCntTable, rbnL2tpSessionCntEntry=rbnL2tpSessionCntEntry, rbnL2tpTCCurUnsentQ=rbnL2tpTCCurUnsentQ, rbnL2tpPCfgMaxTunnels=rbnL2tpPCfgMaxTunnels, rbnL2tpPTCfgPeerLocalNm=rbnL2tpPTCfgPeerLocalNm, rbnL2tpTCfgSessionCount=rbnL2tpTCfgSessionCount, rbnL2tpPCActTunnels=rbnL2tpPCActTunnels, rbnL2tpMibTunnelTrapContext=rbnL2tpMibTunnelTrapContext, rbnL2tpTCRatePktDrop=rbnL2tpTCRatePktDrop, rbnL2tpPTCfgTunnelRemoteNm=rbnL2tpPTCfgTunnelRemoteNm)
