#
# PySNMP MIB module KENYA-COMPONENT-TRAPS (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/KENYA-COMPONENT-TRAPS
# Produced by pysmi-0.3.4 at Wed May  1 14:04:52 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint")
pxSoftwares, nmSoftwares, scSoftwares = mibBuilder.importSymbols("KENYA-COMPONENT-MIB", "pxSoftwares", "nmSoftwares", "scSoftwares")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, MibIdentifier, NotificationType, ModuleIdentity, NotificationType, Gauge32, Counter32, ObjectIdentity, Unsigned32, IpAddress, iso, Counter64, Bits, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "MibIdentifier", "NotificationType", "ModuleIdentity", "NotificationType", "Gauge32", "Counter32", "ObjectIdentity", "Unsigned32", "IpAddress", "iso", "Counter64", "Bits", "TimeTicks")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
volubill, vlbComponents = mibBuilder.importSymbols("VOLUBILL-ROOT-MIB", "volubill", "vlbComponents")
nmDataCollector = MibIdentifier((1, 3, 6, 1, 4, 1, 9905, 2, 2, 1))
dcCheckedOid = MibScalar((1, 3, 6, 1, 4, 1, 9905, 2, 2, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcCheckedOid.setStatus('mandatory')
dcErrorString = MibScalar((1, 3, 6, 1, 4, 1, 9905, 2, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcErrorString.setStatus('mandatory')
dcTestDescr = MibScalar((1, 3, 6, 1, 4, 1, 9905, 2, 2, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcTestDescr.setStatus('mandatory')
dcNbRepeat = MibScalar((1, 3, 6, 1, 4, 1, 9905, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcNbRepeat.setStatus('mandatory')
dcSystemRequirement = MibScalar((1, 3, 6, 1, 4, 1, 9905, 2, 2, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcSystemRequirement.setStatus('mandatory')
dcSystemErrorDate = MibScalar((1, 3, 6, 1, 4, 1, 9905, 2, 2, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcSystemErrorDate.setStatus('mandatory')
trapSeverity = MibScalar((1, 3, 6, 1, 4, 1, 9905, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("informative", 1), ("warning", 2), ("serious", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapSeverity.setStatus('mandatory')
procRespawner = MibIdentifier((1, 3, 6, 1, 4, 1, 9905, 2, 2, 2))
prMissingProcName = MibScalar((1, 3, 6, 1, 4, 1, 9905, 2, 2, 2, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prMissingProcName.setStatus('mandatory')
prRespawnCommand = MibScalar((1, 3, 6, 1, 4, 1, 9905, 2, 2, 2, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prRespawnCommand.setStatus('mandatory')
nmsGolbalStatusProcessor = MibIdentifier((1, 3, 6, 1, 4, 1, 9905, 2, 2, 3))
snmpFailedComponent = MibScalar((1, 3, 6, 1, 4, 1, 9905, 2, 2, 3, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpFailedComponent.setStatus('mandatory')
snmpRequestedOid = MibScalar((1, 3, 6, 1, 4, 1, 9905, 2, 2, 3, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpRequestedOid.setStatus('mandatory')
componentTrapSender = MibIdentifier((1, 3, 6, 1, 4, 1, 9905, 2, 2, 4))
sourceComponent = MibScalar((1, 3, 6, 1, 4, 1, 9905, 2, 2, 4, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sourceComponent.setStatus('mandatory')
componentInfo = MibScalar((1, 3, 6, 1, 4, 1, 9905, 2, 2, 4, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentInfo.setStatus('mandatory')
alarmDescription = MibScalar((1, 3, 6, 1, 4, 1, 9905, 2, 2, 4, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmDescription.setStatus('mandatory')
processName = MibScalar((1, 3, 6, 1, 4, 1, 9905, 2, 2, 4, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processName.setStatus('mandatory')
scAgentApplication = MibIdentifier((1, 3, 6, 1, 4, 1, 9905, 2, 3, 1))
scaSourceComponent = MibScalar((1, 3, 6, 1, 4, 1, 9905, 2, 3, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scaSourceComponent.setStatus('mandatory')
scaErrorMessage = MibScalar((1, 3, 6, 1, 4, 1, 9905, 2, 3, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scaErrorMessage.setStatus('mandatory')
udrWriterApplication = MibIdentifier((1, 3, 6, 1, 4, 1, 9905, 2, 3, 2))
uwSourceComponent = MibScalar((1, 3, 6, 1, 4, 1, 9905, 2, 3, 2, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uwSourceComponent.setStatus('mandatory')
uwInfoMessage = MibScalar((1, 3, 6, 1, 4, 1, 9905, 2, 3, 2, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uwInfoMessage.setStatus('mandatory')
proxyApplication = MibIdentifier((1, 3, 6, 1, 4, 1, 9905, 2, 4, 1))
pxSourceComponent = MibScalar((1, 3, 6, 1, 4, 1, 9905, 2, 4, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pxSourceComponent.setStatus('mandatory')
pxErrorMessage = MibScalar((1, 3, 6, 1, 4, 1, 9905, 2, 4, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pxErrorMessage.setStatus('mandatory')
procMissing = NotificationType((1, 3, 6, 1, 4, 1, 9905) + (0,1)).setObjects(("KENYA-COMPONENT-TRAPS", "trapSeverity"), ("KENYA-COMPONENT-TRAPS", "sourceComponent"), ("KENYA-COMPONENT-TRAPS", "prMissingProcName"), ("KENYA-COMPONENT-TRAPS", "prRespawnCommand"))
if mibBuilder.loadTexts: procMissing.setDescription('The SNMP trap that is generated by the Process Respawner when a critical required process is missing. Severity CRITICAL')
procMissingAfterRespawn = NotificationType((1, 3, 6, 1, 4, 1, 9905) + (0,2)).setObjects(("KENYA-COMPONENT-TRAPS", "trapSeverity"), ("KENYA-COMPONENT-TRAPS", "sourceComponent"), ("KENYA-COMPONENT-TRAPS", "prMissingProcName"), ("KENYA-COMPONENT-TRAPS", "prRespawnCommand"))
if mibBuilder.loadTexts: procMissingAfterRespawn.setDescription('The SNMP trap that is generated by the process respawner to inform that the process is still missing after a restart Reason: Critical Process Missing Severity CRITICAL')
snmpUnreachableHost = NotificationType((1, 3, 6, 1, 4, 1, 9905) + (0,3)).setObjects(("KENYA-COMPONENT-TRAPS", "trapSeverity"), ("KENYA-COMPONENT-TRAPS", "sourceComponent"), ("KENYA-COMPONENT-TRAPS", "snmpFailedComponent"), ("KENYA-COMPONENT-TRAPS", "snmpRequestedOid"))
if mibBuilder.loadTexts: snmpUnreachableHost.setDescription('The SNMP trap that is generated by the LMS snmp agent when a server fails to answer SNMP requests If the reason is Cannot reach master-switch hardware, Severity SERIOUS If the reason is cannot reach component, Severity WARNING')
dataCollectorThresholdExceeded = NotificationType((1, 3, 6, 1, 4, 1, 9905) + (0,4)).setObjects(("KENYA-COMPONENT-TRAPS", "trapSeverity"), ("KENYA-COMPONENT-TRAPS", "sourceComponent"), ("KENYA-COMPONENT-TRAPS", "dcCheckedOid"), ("KENYA-COMPONENT-TRAPS", "dcErrorString"), ("KENYA-COMPONENT-TRAPS", "dcTestDescr"), ("KENYA-COMPONENT-TRAPS", "dcNbRepeat"))
if mibBuilder.loadTexts: dataCollectorThresholdExceeded.setDescription('The SNMP trap that is generated by the data collector when a collected data exceed its defined thresholds Reason: system limitation reached Severity WARNING')
dataCollectorSystemRequirement = NotificationType((1, 3, 6, 1, 4, 1, 9905) + (0,5)).setObjects(("KENYA-COMPONENT-TRAPS", "trapSeverity"), ("KENYA-COMPONENT-TRAPS", "dcSystemRequirement"), ("KENYA-COMPONENT-TRAPS", "dcSystemErrorDate"))
if mibBuilder.loadTexts: dataCollectorSystemRequirement.setDescription('Generated by the data collector when a system limitation is detected and should be corrected data collector will still work correctly Reason: system limitation reached Severity WARNING')
dataCollectorSystemError = NotificationType((1, 3, 6, 1, 4, 1, 9905) + (0,6)).setObjects(("KENYA-COMPONENT-TRAPS", "trapSeverity"), ("KENYA-COMPONENT-TRAPS", "dcSystemRequirement"))
if mibBuilder.loadTexts: dataCollectorSystemError.setDescription('Generated by the data collector when a system limitation is detected and prevents data collector from running correctly')
scAgentError = NotificationType((1, 3, 6, 1, 4, 1, 9905) + (0,7)).setObjects(("KENYA-COMPONENT-TRAPS", "trapSeverity"), ("KENYA-COMPONENT-TRAPS", "scaSourceComponent"), ("KENYA-COMPONENT-TRAPS", "scaErrorMessage"))
if mibBuilder.loadTexts: scAgentError.setDescription('Generated by scagent application suitable for several error types description included in variables Here are the different reasons: *Service catalog successfully loaded; *Rollback to previous service catalog successful; *Reaching Overload Level X: means X% of the traffic is rejected for capacity reason; *Percentage of non-replied authorize requests now below threshold; *Percentage of non-replied accounting requests now below threshold. Reason: system limitation reached Severity WARNING')
healthCheckError = NotificationType((1, 3, 6, 1, 4, 1, 9905) + (0,8)).setObjects(("KENYA-COMPONENT-TRAPS", "trapSeverity"), ("KENYA-COMPONENT-TRAPS", "sourceComponent"))
if mibBuilder.loadTexts: healthCheckError.setDescription('The SNMP trap that is generated by snmp agent when health check test fails. Reason: Check process health failed Severity WARNING')
proxyError = NotificationType((1, 3, 6, 1, 4, 1, 9905) + (0,9)).setObjects(("KENYA-COMPONENT-TRAPS", "trapSeverity"), ("KENYA-COMPONENT-TRAPS", "pxSourceComponent"), ("KENYA-COMPONENT-TRAPS", "pxErrorMessage"))
if mibBuilder.loadTexts: proxyError.setDescription("Generated by proxy application suitable for several error types description included in variables Here are the different reasons: *Overload: -Enter in the warning zone; -Stay in the warning zone; -Exit from the warning zone; -Enter in overload; -Stay in overload; -Exit from overload. *Advice of charge: URL retrieving failed '<url>' (HTTP <HTTP status code>); *Configuration problem (bad parameters in a configuration file): -Could not open document config file <filename> <error cause> -Missing information primitive in the configuration, include primitive name; *Unable to open the timing file '<filename>' (errno <error code>: <error meaning>) *Could not load event-table; *Could not bind to service table.")
switchProvisioningError = NotificationType((1, 3, 6, 1, 4, 1, 9905) + (0,10)).setObjects(("KENYA-COMPONENT-TRAPS", "trapSeverity"), ("KENYA-COMPONENT-TRAPS", "sourceComponent"))
if mibBuilder.loadTexts: switchProvisioningError.setDescription('L7 switch provisioning error Provisioning of L7 switches failed. Severity CRITICAL')
powerFailure = NotificationType((1, 3, 6, 1, 4, 1, 9905) + (0,11)).setObjects(("KENYA-COMPONENT-TRAPS", "trapSeverity"))
if mibBuilder.loadTexts: powerFailure.setDescription('Power failure on platform. SNMP command error: host <master-switch-IP-address> SNMP set failed Severity CRITICAL')
linkFailure = NotificationType((1, 3, 6, 1, 4, 1, 9905) + (0,12)).setObjects(("KENYA-COMPONENT-TRAPS", "trapSeverity"), ("KENYA-COMPONENT-TRAPS", "sourceComponent"), ("KENYA-COMPONENT-TRAPS", "componentInfo"))
if mibBuilder.loadTexts: linkFailure.setDescription('link failure on platform. Reason: <NIC-reference>: AFT link failure detected. Severity SERIOUS')
caInvalidVIPStatus = NotificationType((1, 3, 6, 1, 4, 1, 9905) + (0,13)).setObjects(("KENYA-COMPONENT-TRAPS", "trapSeverity"), ("KENYA-COMPONENT-TRAPS", "sourceComponent"), ("KENYA-COMPONENT-TRAPS", "componentInfo"))
if mibBuilder.loadTexts: caInvalidVIPStatus.setDescription('ClickArray VIP statuses are not valid.')
caValidVIPStatus = NotificationType((1, 3, 6, 1, 4, 1, 9905) + (0,14)).setObjects(("KENYA-COMPONENT-TRAPS", "trapSeverity"), ("KENYA-COMPONENT-TRAPS", "sourceComponent"), ("KENYA-COMPONENT-TRAPS", "componentInfo"))
if mibBuilder.loadTexts: caValidVIPStatus.setDescription('ClickArray VIP statuses are valid.')
successfulProvisioning = NotificationType((1, 3, 6, 1, 4, 1, 9905) + (0,15)).setObjects(("KENYA-COMPONENT-TRAPS", "trapSeverity"), ("KENYA-COMPONENT-TRAPS", "sourceComponent"), ("KENYA-COMPONENT-TRAPS", "componentInfo"))
if mibBuilder.loadTexts: successfulProvisioning.setDescription('Generated by the NMS after each successful service provisioning')
sSNModuleNotHA = NotificationType((1, 3, 6, 1, 4, 1, 9905) + (0,16)).setObjects(("KENYA-COMPONENT-TRAPS", "trapSeverity"), ("KENYA-COMPONENT-TRAPS", "sourceComponent"), ("KENYA-COMPONENT-TRAPS", "componentInfo"))
if mibBuilder.loadTexts: sSNModuleNotHA.setDescription('SSN module in HA node does not have at least 2 connections to L4 switches.')
successfulRollback = NotificationType((1, 3, 6, 1, 4, 1, 9905) + (0,17)).setObjects(("KENYA-COMPONENT-TRAPS", "trapSeverity"), ("KENYA-COMPONENT-TRAPS", "sourceComponent"), ("KENYA-COMPONENT-TRAPS", "componentInfo"))
if mibBuilder.loadTexts: successfulRollback.setDescription('Generated by the NMS after each successful service rollback provisioning')
procStarted = NotificationType((1, 3, 6, 1, 4, 1, 9905) + (0,18)).setObjects(("KENYA-COMPONENT-TRAPS", "trapSeverity"), ("KENYA-COMPONENT-TRAPS", "sourceComponent"), ("KENYA-COMPONENT-TRAPS", "processName"))
if mibBuilder.loadTexts: procStarted.setDescription('Generated by process when starting.')
rectifierAlarm = NotificationType((1, 3, 6, 1, 4, 1, 9905) + (0,19)).setObjects(("KENYA-COMPONENT-TRAPS", "trapSeverity"), ("KENYA-COMPONENT-TRAPS", "alarmDescription"))
if mibBuilder.loadTexts: rectifierAlarm.setDescription('Generated by NMS when Alarms are generated by APC rectifier.')
powerOn = NotificationType((1, 3, 6, 1, 4, 1, 9905) + (0,20)).setObjects(("KENYA-COMPONENT-TRAPS", "trapSeverity"))
if mibBuilder.loadTexts: powerOn.setDescription('Power is back on platform.')
uwMessage = NotificationType((1, 3, 6, 1, 4, 1, 9905) + (0,21)).setObjects(("KENYA-COMPONENT-TRAPS", "trapSeverity"), ("KENYA-COMPONENT-TRAPS", "uwSourceComponent"), ("KENYA-COMPONENT-TRAPS", "uwInfoMessage"))
if mibBuilder.loadTexts: uwMessage.setDescription('Generated by udr writer when starting, closing and writing file.')
vlbProcStarted = NotificationType((1, 3, 6, 1, 4, 1, 9905) + (0,22)).setObjects(("KENYA-COMPONENT-TRAPS", "trapSeverity"), ("KENYA-COMPONENT-TRAPS", "sourceComponent"), ("KENYA-COMPONENT-TRAPS", "processName"), ("KENYA-COMPONENT-TRAPS", "componentInfo"))
if mibBuilder.loadTexts: vlbProcStarted.setDescription('Generated by process when starting.')
vlbProcNotStarted = NotificationType((1, 3, 6, 1, 4, 1, 9905) + (0,23)).setObjects(("KENYA-COMPONENT-TRAPS", "trapSeverity"), ("KENYA-COMPONENT-TRAPS", "sourceComponent"), ("KENYA-COMPONENT-TRAPS", "processName"), ("KENYA-COMPONENT-TRAPS", "componentInfo"))
if mibBuilder.loadTexts: vlbProcNotStarted.setDescription('Generated by process when process cannot be started.')
vlbProcStopped = NotificationType((1, 3, 6, 1, 4, 1, 9905) + (0,24)).setObjects(("KENYA-COMPONENT-TRAPS", "trapSeverity"), ("KENYA-COMPONENT-TRAPS", "sourceComponent"), ("KENYA-COMPONENT-TRAPS", "processName"), ("KENYA-COMPONENT-TRAPS", "componentInfo"))
if mibBuilder.loadTexts: vlbProcStopped.setDescription('Generated by process when stopping.')
vlbLogTrap = NotificationType((1, 3, 6, 1, 4, 1, 9905) + (0,25)).setObjects(("KENYA-COMPONENT-TRAPS", "trapSeverity"), ("KENYA-COMPONENT-TRAPS", "sourceComponent"), ("KENYA-COMPONENT-TRAPS", "processName"), ("KENYA-COMPONENT-TRAPS", "componentInfo"))
if mibBuilder.loadTexts: vlbLogTrap.setDescription('Log generated by process')
bssgStart = NotificationType((1, 3, 6, 1, 4, 1, 9905) + (0,30)).setObjects(("KENYA-COMPONENT-TRAPS", "trapSeverity"), ("KENYA-COMPONENT-TRAPS", "sourceComponent"), ("KENYA-COMPONENT-TRAPS", "componentInfo"))
if mibBuilder.loadTexts: bssgStart.setDescription('BSSG Start')
bssgStop = NotificationType((1, 3, 6, 1, 4, 1, 9905) + (0,31)).setObjects(("KENYA-COMPONENT-TRAPS", "trapSeverity"), ("KENYA-COMPONENT-TRAPS", "sourceComponent"), ("KENYA-COMPONENT-TRAPS", "componentInfo"))
if mibBuilder.loadTexts: bssgStop.setDescription('BSSG Stop')
bssgSmiConnectFailure = NotificationType((1, 3, 6, 1, 4, 1, 9905) + (0,32)).setObjects(("KENYA-COMPONENT-TRAPS", "trapSeverity"), ("KENYA-COMPONENT-TRAPS", "sourceComponent"), ("KENYA-COMPONENT-TRAPS", "componentInfo"))
if mibBuilder.loadTexts: bssgSmiConnectFailure.setDescription('BSSG SMI Connection Failure')
bssgQuickRulesConnectFailure = NotificationType((1, 3, 6, 1, 4, 1, 9905) + (0,33)).setObjects(("KENYA-COMPONENT-TRAPS", "trapSeverity"), ("KENYA-COMPONENT-TRAPS", "sourceComponent"), ("KENYA-COMPONENT-TRAPS", "componentInfo"))
if mibBuilder.loadTexts: bssgQuickRulesConnectFailure.setDescription('BSSG QuickRules Connection Failure')
bssgSCDKDisconnect = NotificationType((1, 3, 6, 1, 4, 1, 9905) + (0,34)).setObjects(("KENYA-COMPONENT-TRAPS", "trapSeverity"), ("KENYA-COMPONENT-TRAPS", "sourceComponent"), ("KENYA-COMPONENT-TRAPS", "componentInfo"))
if mibBuilder.loadTexts: bssgSCDKDisconnect.setDescription('BSSG SCDK Disconnect')
bssgDatabaseConnectFailure = NotificationType((1, 3, 6, 1, 4, 1, 9905) + (0,35)).setObjects(("KENYA-COMPONENT-TRAPS", "trapSeverity"), ("KENYA-COMPONENT-TRAPS", "sourceComponent"), ("KENYA-COMPONENT-TRAPS", "componentInfo"))
if mibBuilder.loadTexts: bssgDatabaseConnectFailure.setDescription('BSSG Database Connection Failure')
bssgReloadConfig = NotificationType((1, 3, 6, 1, 4, 1, 9905) + (0,36)).setObjects(("KENYA-COMPONENT-TRAPS", "trapSeverity"), ("KENYA-COMPONENT-TRAPS", "sourceComponent"), ("KENYA-COMPONENT-TRAPS", "componentInfo"))
if mibBuilder.loadTexts: bssgReloadConfig.setDescription('BSSG Reloaded configuration')
start = NotificationType((1, 3, 6, 1, 4, 1, 9905) + (0,70)).setObjects(("KENYA-COMPONENT-TRAPS", "trapSeverity"), ("KENYA-COMPONENT-TRAPS", "sourceComponent"), ("KENYA-COMPONENT-TRAPS", "componentInfo"))
if mibBuilder.loadTexts: start.setDescription('The SMSModule is started on host X.X.X.X')
stop = NotificationType((1, 3, 6, 1, 4, 1, 9905) + (0,71)).setObjects(("KENYA-COMPONENT-TRAPS", "trapSeverity"), ("KENYA-COMPONENT-TRAPS", "sourceComponent"), ("KENYA-COMPONENT-TRAPS", "componentInfo"))
if mibBuilder.loadTexts: stop.setDescription('The SMSModule is stopped on host X.X.X.X')
overloadActivatedTrap = NotificationType((1, 3, 6, 1, 4, 1, 9905) + (0,72)).setObjects(("KENYA-COMPONENT-TRAPS", "trapSeverity"), ("KENYA-COMPONENT-TRAPS", "sourceComponent"), ("KENYA-COMPONENT-TRAPS", "componentInfo"))
if mibBuilder.loadTexts: overloadActivatedTrap.setDescription('The overload mode for the SMS module is activated on host X.X.X.X')
overloadDesactivated = NotificationType((1, 3, 6, 1, 4, 1, 9905) + (0,73)).setObjects(("KENYA-COMPONENT-TRAPS", "trapSeverity"), ("KENYA-COMPONENT-TRAPS", "sourceComponent"), ("KENYA-COMPONENT-TRAPS", "componentInfo"))
if mibBuilder.loadTexts: overloadDesactivated.setDescription('The overload mode for the SMSModule is desactivated on host X.X.X.X')
sCDKConnection = NotificationType((1, 3, 6, 1, 4, 1, 9905) + (0,74)).setObjects(("KENYA-COMPONENT-TRAPS", "trapSeverity"), ("KENYA-COMPONENT-TRAPS", "sourceComponent"), ("KENYA-COMPONENT-TRAPS", "componentInfo"))
if mibBuilder.loadTexts: sCDKConnection.setDescription('A SCDKBis client on host X.X.X.X is connected to SMS module')
sCDKDisconnection = NotificationType((1, 3, 6, 1, 4, 1, 9905) + (0,75)).setObjects(("KENYA-COMPONENT-TRAPS", "trapSeverity"), ("KENYA-COMPONENT-TRAPS", "sourceComponent"), ("KENYA-COMPONENT-TRAPS", "componentInfo"))
if mibBuilder.loadTexts: sCDKDisconnection.setDescription('A SCDKBis client on host X.X.X.X has been disconnected to SMS module')
uDRWritingError = NotificationType((1, 3, 6, 1, 4, 1, 9905) + (0,76)).setObjects(("KENYA-COMPONENT-TRAPS", "trapSeverity"), ("KENYA-COMPONENT-TRAPS", "sourceComponent"), ("KENYA-COMPONENT-TRAPS", "componentInfo"))
if mibBuilder.loadTexts: uDRWritingError.setDescription('A writing error occurred on the device where the SMSModule on host X.X.X.X is running. Maybe the disc is full You should activate the UDRZipper to economize disc space')
provisioningError = NotificationType((1, 3, 6, 1, 4, 1, 9905) + (0,77)).setObjects(("KENYA-COMPONENT-TRAPS", "trapSeverity"), ("KENYA-COMPONENT-TRAPS", "sourceComponent"), ("KENYA-COMPONENT-TRAPS", "componentInfo"))
if mibBuilder.loadTexts: provisioningError.setDescription('An error occurred with the provisioning file into the SMS Module on host X.X.X.X')
activatedUDRZipper = NotificationType((1, 3, 6, 1, 4, 1, 9905) + (0,78)).setObjects(("KENYA-COMPONENT-TRAPS", "trapSeverity"), ("KENYA-COMPONENT-TRAPS", "sourceComponent"), ("KENYA-COMPONENT-TRAPS", "componentInfo"))
if mibBuilder.loadTexts: activatedUDRZipper.setDescription('The UDRZipper is activated on host X.X.X.X')
desactivatedUDRZipper = NotificationType((1, 3, 6, 1, 4, 1, 9905) + (0,79)).setObjects(("KENYA-COMPONENT-TRAPS", "trapSeverity"), ("KENYA-COMPONENT-TRAPS", "sourceComponent"), ("KENYA-COMPONENT-TRAPS", "componentInfo"))
if mibBuilder.loadTexts: desactivatedUDRZipper.setDescription('The UDRZipper is desactivated on host X.X.X.X')
mibBuilder.exportSymbols("KENYA-COMPONENT-TRAPS", uwMessage=uwMessage, uDRWritingError=uDRWritingError, powerOn=powerOn, vlbProcStopped=vlbProcStopped, sCDKDisconnection=sCDKDisconnection, overloadDesactivated=overloadDesactivated, bssgSCDKDisconnect=bssgSCDKDisconnect, rectifierAlarm=rectifierAlarm, prMissingProcName=prMissingProcName, sCDKConnection=sCDKConnection, caInvalidVIPStatus=caInvalidVIPStatus, bssgDatabaseConnectFailure=bssgDatabaseConnectFailure, snmpFailedComponent=snmpFailedComponent, nmDataCollector=nmDataCollector, scaErrorMessage=scaErrorMessage, bssgStop=bssgStop, dcTestDescr=dcTestDescr, dataCollectorSystemRequirement=dataCollectorSystemRequirement, successfulRollback=successfulRollback, switchProvisioningError=switchProvisioningError, proxyApplication=proxyApplication, dataCollectorSystemError=dataCollectorSystemError, udrWriterApplication=udrWriterApplication, dcNbRepeat=dcNbRepeat, scaSourceComponent=scaSourceComponent, pxErrorMessage=pxErrorMessage, uwInfoMessage=uwInfoMessage, dataCollectorThresholdExceeded=dataCollectorThresholdExceeded, healthCheckError=healthCheckError, componentInfo=componentInfo, dcSystemRequirement=dcSystemRequirement, nmsGolbalStatusProcessor=nmsGolbalStatusProcessor, dcErrorString=dcErrorString, snmpRequestedOid=snmpRequestedOid, sSNModuleNotHA=sSNModuleNotHA, overloadActivatedTrap=overloadActivatedTrap, procMissing=procMissing, scAgentError=scAgentError, alarmDescription=alarmDescription, pxSourceComponent=pxSourceComponent, vlbProcNotStarted=vlbProcNotStarted, bssgReloadConfig=bssgReloadConfig, vlbProcStarted=vlbProcStarted, procStarted=procStarted, prRespawnCommand=prRespawnCommand, componentTrapSender=componentTrapSender, desactivatedUDRZipper=desactivatedUDRZipper, activatedUDRZipper=activatedUDRZipper, linkFailure=linkFailure, start=start, sourceComponent=sourceComponent, procRespawner=procRespawner, uwSourceComponent=uwSourceComponent, bssgSmiConnectFailure=bssgSmiConnectFailure, stop=stop, scAgentApplication=scAgentApplication, processName=processName, dcCheckedOid=dcCheckedOid, dcSystemErrorDate=dcSystemErrorDate, trapSeverity=trapSeverity, vlbLogTrap=vlbLogTrap, provisioningError=provisioningError, powerFailure=powerFailure, bssgStart=bssgStart, procMissingAfterRespawn=procMissingAfterRespawn, proxyError=proxyError, bssgQuickRulesConnectFailure=bssgQuickRulesConnectFailure, caValidVIPStatus=caValidVIPStatus, snmpUnreachableHost=snmpUnreachableHost, successfulProvisioning=successfulProvisioning)
