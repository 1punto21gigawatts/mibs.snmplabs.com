#
# PySNMP MIB module CISCO-SECURE-SHELL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-SECURE-SHELL-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:11:39 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
ModuleIdentity, ObjectIdentity, NotificationType, Integer32, Bits, Counter32, Gauge32, MibIdentifier, Counter64, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, TimeTicks, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "ObjectIdentity", "NotificationType", "Integer32", "Bits", "Counter32", "Gauge32", "MibIdentifier", "Counter64", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "TimeTicks", "IpAddress")
DisplayString, TextualConvention, TruthValue, RowStatus, TimeStamp = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "TruthValue", "RowStatus", "TimeStamp")
ciscoSecureShellMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 339))
ciscoSecureShellMIB.setRevisions(('2005-06-01 00:00', '2004-04-05 00:00', '2003-09-18 00:00', '2002-10-05 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoSecureShellMIB.setRevisionsDescriptions(('Added cssKeyGenerationStatus', 'Added cssServiceModeCfgGroup and cssSessionInfoGroup to the MIB module.', 'Added cssKeyString object to the cssKeyTable. Changed the description of cssServiceActivation', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoSecureShellMIB.setLastUpdated('200506010000Z')
if mibBuilder.loadTexts: ciscoSecureShellMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoSecureShellMIB.setContactInfo('Cisco Systems Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553 -NETS E-mail: cs-san@cisco.com, cs-lan-switch-snmp@cisco.com')
if mibBuilder.loadTexts: ciscoSecureShellMIB.setDescription('MIB module for displaying and configuring accounting and Secure Shell (SSH) related features in a device. SSH is a program to log into another computer over a network, to execute commands in a remote machine and to move files from one machine to another. It provides strong authentication and secure communications over unsecure channels. For more information on SSH, please refer to IETF draft, draft-ietf-tls-ssh-00.txt.')
ciscoSecureShellMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 339, 1))
cssConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 339, 1, 1))
cssSessionInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 339, 1, 2))
class CssVersions(TextualConvention, Bits):
    description = 'An indication of the Secure Shell protocol versions supported or enabled on the device.'
    status = 'current'
    namedValues = NamedValues(("v1", 0), ("v2", 1))

cssServiceActivation = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 339, 1, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cssServiceActivation.setStatus('current')
if mibBuilder.loadTexts: cssServiceActivation.setDescription('Enables or disables the Secure Shell (SSH) service on the device. ')
cssKeyTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 339, 1, 1, 2), )
if mibBuilder.loadTexts: cssKeyTable.setStatus('current')
if mibBuilder.loadTexts: cssKeyTable.setDescription('cssKeyTable is a table that lets the user configure the SSH keys')
cssKeyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 339, 1, 1, 2, 1), ).setIndexNames((0, "CISCO-SECURE-SHELL-MIB", "cssKeyIndex"))
if mibBuilder.loadTexts: cssKeyEntry.setStatus('current')
if mibBuilder.loadTexts: cssKeyEntry.setDescription('A SSH key table entry. The index specifies which protocol the user wants to generate the key for. To create the key for a protocol (for the first time), following steps are to be taken by the Network Management System. 1. Choose the Protocol, by specifying the cssKeyIndex 2. Choose nbits, by specifying the cssKeyNBits value 3. cssKeyRowStatus as createAndGo (4) To delete the key for a protocol, following steps are to be taken by the Network Management System 1. Choose the Protocol, by specifying the cssKeyIndex 2. cssKeyRowStatus as destroy (6) To overwrite the existing key for a protocol 1. Choose the Protocol, by specifying the cssKeyIndex 2. Choose the nbits, by specifying the cssKeyNBits value 3. cssKeyOverWrite as true(1).')
cssKeyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 339, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("rsa", 1), ("rsa1", 2), ("dsa", 3))))
if mibBuilder.loadTexts: cssKeyIndex.setStatus('current')
if mibBuilder.loadTexts: cssKeyIndex.setDescription('The SSH Protocol Identifier for which this entry pertains to. The protocol can be rsa1, dsa or rsa. rsa - A public-key cryptosystem defined by Rivest, Shamir and Adleman. This is used with version 2 of the SSH. rsa1 - Same as rsa, but this is used with version 1 of the SSH. dsa - Digital Signature Algorithm, a public key cipher used to generate digital signatures.')
cssKeyNBits = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 339, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(512, 2048))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cssKeyNBits.setStatus('current')
if mibBuilder.loadTexts: cssKeyNBits.setDescription('The number of bits provided to generate the key. This determines the length of the kestring generated by the SSH. This object cannot be modified while this row is active, unless the associated cssKeyOverWrite object is set to True in the same Set PDU.')
cssKeyOverWrite = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 339, 1, 1, 2, 1, 3), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cssKeyOverWrite.setStatus('current')
if mibBuilder.loadTexts: cssKeyOverWrite.setDescription("This object specifies whether an existing key for the protocol should be overwritten with a new key. No action is taken if this object is set to 'false'. The value of this object when read is always 'false'.")
cssKeyLastCreationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 339, 1, 1, 2, 1, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cssKeyLastCreationTime.setStatus('current')
if mibBuilder.loadTexts: cssKeyLastCreationTime.setDescription('The time of the last creation of the key.')
cssKeyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 339, 1, 1, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cssKeyRowStatus.setStatus('current')
if mibBuilder.loadTexts: cssKeyRowStatus.setDescription('Status of this row.')
cssKeyString = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 339, 1, 1, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cssKeyString.setStatus('current')
if mibBuilder.loadTexts: cssKeyString.setDescription('The SSH public key string that is generated.')
cssServiceCapability = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 339, 1, 1, 3), CssVersions()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cssServiceCapability.setStatus('current')
if mibBuilder.loadTexts: cssServiceCapability.setDescription("The object indicates which versions of Secure Shell protocol are supported by the device. If the bit 'v1' is set to 1, it indicates that the device supports SSH protocol version 1. If the bit 'v2' is set to 1, it indicates that the device supports SSH protocol version 2.")
cssServiceMode = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 339, 1, 1, 4), CssVersions()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cssServiceMode.setStatus('current')
if mibBuilder.loadTexts: cssServiceMode.setDescription("This object specifies which versions of Secure Shell protocol connections that device will accept from Secure Shell clients. If the bit 'v1' is set to 1, the device will accept SSH version 1 connections. If the bit 'v2' is set to 1, the device will accept SSH version 2 connections. At least one of the version bits must be set to 1.")
cssKeyGenerationStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 339, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("inProgress", 1), ("successful", 2), ("failed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cssKeyGenerationStatus.setStatus('current')
if mibBuilder.loadTexts: cssKeyGenerationStatus.setDescription('This object specifies the status of the last key generation request.')
cssSessionTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 339, 1, 2, 1), )
if mibBuilder.loadTexts: cssSessionTable.setStatus('current')
if mibBuilder.loadTexts: cssSessionTable.setDescription('Table to list detailed information about existing Secure Shell sessions on the device.')
cssSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 339, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-SECURE-SHELL-MIB", "cssSessionID"))
if mibBuilder.loadTexts: cssSessionEntry.setStatus('current')
if mibBuilder.loadTexts: cssSessionEntry.setDescription('An entry in the cssSessionTable, that provides detailed information about all the existing SSH sessions on the device. An entry will be created for every SSH session established on the device. The entry will be removed upon termination of the SSH session.')
cssSessionID = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 339, 1, 2, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cssSessionID.setStatus('current')
if mibBuilder.loadTexts: cssSessionID.setDescription('An arbitrary index that uniquely identifies a Secure Shell Session')
cssSessionVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 339, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("one", 1), ("two", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cssSessionVersion.setStatus('current')
if mibBuilder.loadTexts: cssSessionVersion.setDescription('The object indicates the version of Secure Shell used by this session.')
cssSessionState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 339, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("sshSessionVersionOk", 1), ("sshSessionKeysExchanged", 2), ("sshSessionAuthenticated", 3), ("sshSessionOpen", 4), ("sshSessionDisconnecting", 5), ("sshSessionDisconnected", 6), ("sshSessionClosed", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cssSessionState.setStatus('current')
if mibBuilder.loadTexts: cssSessionState.setDescription('The object indicates the current state of Secure Shell Session. The state sshSessionVersionOk(1) indicates that server and client versions of SSH are exchanged and are compatible. The state sshSessionKeysExchanged(2) indicates that key exchange has been completed. The state sshSessionAuthenticated(3) indicates that the client has been successfully authenticated. The state sshSessionOpen(4) indicates that the session has been successfully opened. The state sshSessionDisconnecting(5) indicates that the session disconnection has begun. The state sshSessionDisconnected(6) indicates that the session has been disconnected. The state sshSessionClosed(7) indicates that the session has closed.')
cssSessionPID = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 339, 1, 2, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cssSessionPID.setStatus('current')
if mibBuilder.loadTexts: cssSessionPID.setDescription('The object indicates the process ID of the process serving this SSH session on the device.')
cssSessionUserID = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 339, 1, 2, 1, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cssSessionUserID.setStatus('current')
if mibBuilder.loadTexts: cssSessionUserID.setDescription('The object indicates user name associated with this SSH session.')
cssSessionHostAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 339, 1, 2, 1, 1, 6), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cssSessionHostAddrType.setStatus('current')
if mibBuilder.loadTexts: cssSessionHostAddrType.setDescription('This object describes the type of Internet address used by host associated with this SSH session.')
cssSessionHostAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 339, 1, 2, 1, 1, 7), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cssSessionHostAddr.setStatus('current')
if mibBuilder.loadTexts: cssSessionHostAddr.setDescription('The object indicates the Internet address of the host associated with this SSH session.')
ciscoSecureShellMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 339, 2))
ciscoSecureShellMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 339, 2, 1))
ciscoSecureShellMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 339, 2, 2))
ciscoSecureShellMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 339, 2, 1, 1)).setObjects(("CISCO-SECURE-SHELL-MIB", "cssConfigurationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSecureShellMIBCompliance = ciscoSecureShellMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoSecureShellMIBCompliance.setDescription('The compliance statement for entities which implement the CISCO-SECURE-SHELL-MIB.')
ciscoSecureShellMIBComplianceRv1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 339, 2, 1, 2)).setObjects(("CISCO-SECURE-SHELL-MIB", "cssConfigurationGroupRev1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSecureShellMIBComplianceRv1 = ciscoSecureShellMIBComplianceRv1.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoSecureShellMIBComplianceRv1.setDescription('The compliance statement for entities which implement the CISCO-SECURITY-MIB.')
ciscoSecureShellMIBComplianceRv2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 339, 2, 1, 3)).setObjects(("CISCO-SECURE-SHELL-MIB", "cssConfigurationGroupRev1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSecureShellMIBComplianceRv2 = ciscoSecureShellMIBComplianceRv2.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoSecureShellMIBComplianceRv2.setDescription('The compliance statement for entities which implement the CISCO-SECURE-SHELL-MIB.')
ciscoSecureShellMIBComplianceRv3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 339, 2, 1, 4)).setObjects(("CISCO-SECURE-SHELL-MIB", "cssConfigurationGroupRev1"), ("CISCO-SECURE-SHELL-MIB", "cssConfigurationGroupSupp1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSecureShellMIBComplianceRv3 = ciscoSecureShellMIBComplianceRv3.setStatus('current')
if mibBuilder.loadTexts: ciscoSecureShellMIBComplianceRv3.setDescription('The compliance statement for entities which implement the CISCO-SECURE-SHELL-MIB.')
cssConfigurationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 339, 2, 2, 1)).setObjects(("CISCO-SECURE-SHELL-MIB", "cssServiceActivation"), ("CISCO-SECURE-SHELL-MIB", "cssKeyNBits"), ("CISCO-SECURE-SHELL-MIB", "cssKeyOverWrite"), ("CISCO-SECURE-SHELL-MIB", "cssKeyLastCreationTime"), ("CISCO-SECURE-SHELL-MIB", "cssKeyRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cssConfigurationGroup = cssConfigurationGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cssConfigurationGroup.setDescription('A collection of objects for SSH configuration.')
cssConfigurationGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 339, 2, 2, 2)).setObjects(("CISCO-SECURE-SHELL-MIB", "cssServiceActivation"), ("CISCO-SECURE-SHELL-MIB", "cssKeyNBits"), ("CISCO-SECURE-SHELL-MIB", "cssKeyOverWrite"), ("CISCO-SECURE-SHELL-MIB", "cssKeyLastCreationTime"), ("CISCO-SECURE-SHELL-MIB", "cssKeyString"), ("CISCO-SECURE-SHELL-MIB", "cssKeyRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cssConfigurationGroupRev1 = cssConfigurationGroupRev1.setStatus('current')
if mibBuilder.loadTexts: cssConfigurationGroupRev1.setDescription('A collection of objects for SSH configuration.')
cssServiceModeCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 339, 2, 2, 3)).setObjects(("CISCO-SECURE-SHELL-MIB", "cssServiceCapability"), ("CISCO-SECURE-SHELL-MIB", "cssServiceMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cssServiceModeCfgGroup = cssServiceModeCfgGroup.setStatus('current')
if mibBuilder.loadTexts: cssServiceModeCfgGroup.setDescription('A collection of objects for SSH mode configuration.')
cssSessionInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 339, 2, 2, 4)).setObjects(("CISCO-SECURE-SHELL-MIB", "cssSessionVersion"), ("CISCO-SECURE-SHELL-MIB", "cssSessionState"), ("CISCO-SECURE-SHELL-MIB", "cssSessionPID"), ("CISCO-SECURE-SHELL-MIB", "cssSessionUserID"), ("CISCO-SECURE-SHELL-MIB", "cssSessionHostAddrType"), ("CISCO-SECURE-SHELL-MIB", "cssSessionHostAddr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cssSessionInfoGroup = cssSessionInfoGroup.setStatus('current')
if mibBuilder.loadTexts: cssSessionInfoGroup.setDescription('A collection of objects to display SSH session related information.')
cssConfigurationGroupSupp1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 339, 2, 2, 5)).setObjects(("CISCO-SECURE-SHELL-MIB", "cssKeyGenerationStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cssConfigurationGroupSupp1 = cssConfigurationGroupSupp1.setStatus('current')
if mibBuilder.loadTexts: cssConfigurationGroupSupp1.setDescription('A collection of objects for SSH configuration.')
mibBuilder.exportSymbols("CISCO-SECURE-SHELL-MIB", cssSessionInfoGroup=cssSessionInfoGroup, cssConfiguration=cssConfiguration, ciscoSecureShellMIBComplianceRv2=ciscoSecureShellMIBComplianceRv2, ciscoSecureShellMIBCompliances=ciscoSecureShellMIBCompliances, cssConfigurationGroupRev1=cssConfigurationGroupRev1, cssSessionTable=cssSessionTable, ciscoSecureShellMIBComplianceRv1=ciscoSecureShellMIBComplianceRv1, PYSNMP_MODULE_ID=ciscoSecureShellMIB, ciscoSecureShellMIB=ciscoSecureShellMIB, cssKeyTable=cssKeyTable, cssSessionID=cssSessionID, cssSessionPID=cssSessionPID, cssKeyLastCreationTime=cssKeyLastCreationTime, cssServiceModeCfgGroup=cssServiceModeCfgGroup, cssSessionUserID=cssSessionUserID, cssKeyIndex=cssKeyIndex, cssServiceMode=cssServiceMode, ciscoSecureShellMIBObjects=ciscoSecureShellMIBObjects, cssSessionState=cssSessionState, ciscoSecureShellMIBConformance=ciscoSecureShellMIBConformance, cssSessionHostAddrType=cssSessionHostAddrType, ciscoSecureShellMIBGroups=ciscoSecureShellMIBGroups, cssKeyOverWrite=cssKeyOverWrite, ciscoSecureShellMIBComplianceRv3=ciscoSecureShellMIBComplianceRv3, cssConfigurationGroupSupp1=cssConfigurationGroupSupp1, cssSessionInfo=cssSessionInfo, CssVersions=CssVersions, cssKeyString=cssKeyString, cssSessionHostAddr=cssSessionHostAddr, cssKeyNBits=cssKeyNBits, cssServiceActivation=cssServiceActivation, ciscoSecureShellMIBCompliance=ciscoSecureShellMIBCompliance, cssKeyRowStatus=cssKeyRowStatus, cssConfigurationGroup=cssConfigurationGroup, cssSessionEntry=cssSessionEntry, cssSessionVersion=cssSessionVersion, cssServiceCapability=cssServiceCapability, cssKeyGenerationStatus=cssKeyGenerationStatus, cssKeyEntry=cssKeyEntry)
