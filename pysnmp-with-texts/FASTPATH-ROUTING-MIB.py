#
# PySNMP MIB module FASTPATH-ROUTING-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/FASTPATH-ROUTING-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:12:39 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection")
fastPath, = mibBuilder.importSymbols("BROADCOM-REF-MIB", "fastPath")
ifIndex, InterfaceIndex, InterfaceIndexOrZero = mibBuilder.importSymbols("IF-MIB", "ifIndex", "InterfaceIndex", "InterfaceIndexOrZero")
RouterID, ospfVirtIfEntry, ospfIfEntry, ospfAreaEntry = mibBuilder.importSymbols("OSPF-MIB", "RouterID", "ospfVirtIfEntry", "ospfIfEntry", "ospfAreaEntry")
rip2IfConfEntry, = mibBuilder.importSymbols("RIPv2-MIB", "rip2IfConfEntry")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, TimeTicks, Counter32, Gauge32, ObjectIdentity, Integer32, iso, MibIdentifier, ModuleIdentity, Unsigned32, Bits, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "TimeTicks", "Counter32", "Gauge32", "ObjectIdentity", "Integer32", "iso", "MibIdentifier", "ModuleIdentity", "Unsigned32", "Bits", "Counter64")
RowStatus, TruthValue, TextualConvention, DisplayString, PhysAddress = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TruthValue", "TextualConvention", "DisplayString", "PhysAddress")
vrrpOperVrId, = mibBuilder.importSymbols("VRRP-MIB", "vrrpOperVrId")
fastPathRouting = ModuleIdentity((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2))
fastPathRouting.setRevisions(('2007-05-23 00:00', '2003-11-21 00:00', '2003-04-02 17:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: fastPathRouting.setRevisionsDescriptions(('Broadcom branding related changes.', 'Revisions made for new release.', 'Updated for release',))
if mibBuilder.loadTexts: fastPathRouting.setLastUpdated('200705230000Z')
if mibBuilder.loadTexts: fastPathRouting.setOrganization('Broadcom Corporation')
if mibBuilder.loadTexts: fastPathRouting.setContactInfo(' Customer Support Postal: Broadcom Corporation 100, Perimeter Park Drive Morrisville, NC 27560 Tel: +1 919 865 2700')
if mibBuilder.loadTexts: fastPathRouting.setDescription('The Broadcom Private MIB for FastPath Routing')
class SpfTimerRange(TextualConvention, Integer32):
    description = 'The range of intervals on which Spf timers can be configured.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 65535)

class AutoCostRefBw(TextualConvention, Unsigned32):
    description = 'The value of reference bandwidth from which ospf calculates metric cost.'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 4294967)

agentSwitchArpGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 1))
agentSwitchArpAgeoutTime = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(15, 21600)).clone(1200)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchArpAgeoutTime.setStatus('current')
if mibBuilder.loadTexts: agentSwitchArpAgeoutTime.setDescription('Configures the ARP entry ageout time in seconds. Allowable range: 15-21600')
agentSwitchArpResponseTime = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchArpResponseTime.setStatus('current')
if mibBuilder.loadTexts: agentSwitchArpResponseTime.setDescription('Configures the ARP request response timeout in seconds. Allowable range: 1-10')
agentSwitchArpMaxRetries = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchArpMaxRetries.setStatus('current')
if mibBuilder.loadTexts: agentSwitchArpMaxRetries.setDescription('Configures the ARP count of maximum request for retries. Allowable range: 0-10')
agentSwitchArpCacheSize = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchArpCacheSize.setStatus('current')
if mibBuilder.loadTexts: agentSwitchArpCacheSize.setDescription('Configures the ARP maximum number of entries in the cache. Allowable range is platform-specific.')
agentSwitchArpDynamicRenew = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchArpDynamicRenew.setStatus('current')
if mibBuilder.loadTexts: agentSwitchArpDynamicRenew.setDescription('This indicates the current setting of ARP dynamic renew mode. ')
agentSwitchArpTotalEntryCountCurrent = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchArpTotalEntryCountCurrent.setStatus('current')
if mibBuilder.loadTexts: agentSwitchArpTotalEntryCountCurrent.setDescription('Current number of entries in the ARP cache.')
agentSwitchArpTotalEntryCountPeak = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchArpTotalEntryCountPeak.setStatus('current')
if mibBuilder.loadTexts: agentSwitchArpTotalEntryCountPeak.setDescription('Peak number of entries recorded in the ARP cache over time. This value is restarted whenever the ARP cache size is changed.')
agentSwitchArpStaticEntryCountCurrent = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchArpStaticEntryCountCurrent.setStatus('current')
if mibBuilder.loadTexts: agentSwitchArpStaticEntryCountCurrent.setDescription('Current number of configured static ARP entries.')
agentSwitchArpStaticEntryCountMax = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchArpStaticEntryCountMax.setStatus('current')
if mibBuilder.loadTexts: agentSwitchArpStaticEntryCountMax.setDescription('Maximum number of configurable static ARP entries.')
agentSwitchArpTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 1, 10), )
if mibBuilder.loadTexts: agentSwitchArpTable.setStatus('obsolete')
if mibBuilder.loadTexts: agentSwitchArpTable.setDescription('This table augments the MIB-II ipNetToMediaTable by providing per-interface ARP entry information.')
agentSwitchArpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 1, 10, 1), ).setIndexNames((0, "FASTPATH-ROUTING-MIB", "agentSwitchArpIpAddress"))
if mibBuilder.loadTexts: agentSwitchArpEntry.setStatus('obsolete')
if mibBuilder.loadTexts: agentSwitchArpEntry.setDescription('')
agentSwitchArpAge = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 1, 10, 1, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchArpAge.setStatus('obsolete')
if mibBuilder.loadTexts: agentSwitchArpAge.setDescription('This defines the time (in seconds) since the ARP entry was last refreshed. This value is 0 for ARP entries of type local(1) or static(3), since these entries are not subject to aging.')
agentSwitchArpIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 1, 10, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchArpIpAddress.setStatus('obsolete')
if mibBuilder.loadTexts: agentSwitchArpIpAddress.setDescription('The IP Address assigned to each interface.')
agentSwitchArpMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 1, 10, 1, 3), PhysAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentSwitchArpMacAddress.setStatus('obsolete')
if mibBuilder.loadTexts: agentSwitchArpMacAddress.setDescription('The hardware MAX Address that each interface maps to.')
agentSwitchArpInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 1, 10, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentSwitchArpInterface.setStatus('obsolete')
if mibBuilder.loadTexts: agentSwitchArpInterface.setDescription('The Associated IfIndex which identified the ARP Entry.')
agentSwitchArpType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 1, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("local", 1), ("gateway", 2), ("static", 3), ("dynamic", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchArpType.setStatus('obsolete')
if mibBuilder.loadTexts: agentSwitchArpType.setDescription('The type of ARP entry.')
agentSwitchArpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 1, 10, 1, 6), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchArpStatus.setStatus('obsolete')
if mibBuilder.loadTexts: agentSwitchArpStatus.setDescription('The status of this ARP entry. Setting this object destroy will remove the entry.')
agentSwitchLocalProxyArpTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 1, 11), )
if mibBuilder.loadTexts: agentSwitchLocalProxyArpTable.setStatus('current')
if mibBuilder.loadTexts: agentSwitchLocalProxyArpTable.setDescription('This table contains the per-interface configuration parameters for Local Proxy Arp.')
agentSwitchLocalProxyArpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 1, 11, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: agentSwitchLocalProxyArpEntry.setStatus('current')
if mibBuilder.loadTexts: agentSwitchLocalProxyArpEntry.setDescription('Represents a logical row in the agentSwitchLocalProxyArpTable')
agentSwitchLocalProxyArpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 1, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchLocalProxyArpMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchLocalProxyArpMode.setDescription('The Local Proxy Arp Mode for the interface.')
agentSwitchIntfArpTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 1, 12), )
if mibBuilder.loadTexts: agentSwitchIntfArpTable.setStatus('current')
if mibBuilder.loadTexts: agentSwitchIntfArpTable.setDescription('This table augments the MIB-II ipNetToMediaTable by providing per-interface ARP entry information.')
agentSwitchIntfArpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 1, 12, 1), ).setIndexNames((0, "FASTPATH-ROUTING-MIB", "agentSwitchIntfArpIpAddress"), (0, "FASTPATH-ROUTING-MIB", "agentSwitchIntfArpIfIndex"))
if mibBuilder.loadTexts: agentSwitchIntfArpEntry.setStatus('current')
if mibBuilder.loadTexts: agentSwitchIntfArpEntry.setDescription('')
agentSwitchIntfArpIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 1, 12, 1, 1), IpAddress())
if mibBuilder.loadTexts: agentSwitchIntfArpIpAddress.setStatus('current')
if mibBuilder.loadTexts: agentSwitchIntfArpIpAddress.setDescription('The Type of Address assigned to this interface.')
agentSwitchIntfArpIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 1, 12, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: agentSwitchIntfArpIfIndex.setStatus('current')
if mibBuilder.loadTexts: agentSwitchIntfArpIfIndex.setDescription('The Associated IfIndex which identified the ARP Entry. This value must be specified for static ARP entries on an unnumbered interface')
agentSwitchIntfArpAge = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 1, 12, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchIntfArpAge.setStatus('current')
if mibBuilder.loadTexts: agentSwitchIntfArpAge.setDescription('This defines the time (in seconds) since the ARP entry was last refreshed. This value is 0 for ARP entries of type local(1) or static(3), since these entries are not subject to aging.')
agentSwitchIntfArpMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 1, 12, 1, 4), PhysAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentSwitchIntfArpMacAddress.setStatus('current')
if mibBuilder.loadTexts: agentSwitchIntfArpMacAddress.setDescription('The hardware MAX Address that each interface maps to.')
agentSwitchIntfArpType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 1, 12, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("local", 1), ("gateway", 2), ("static", 3), ("dynamic", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchIntfArpType.setStatus('current')
if mibBuilder.loadTexts: agentSwitchIntfArpType.setDescription('The type of ARP entry.')
agentSwitchIntfArpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 1, 12, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentSwitchIntfArpStatus.setStatus('current')
if mibBuilder.loadTexts: agentSwitchIntfArpStatus.setDescription('The status of this ARP entry. Setting this object destroy will remove the entry.')
agentSwitchIpGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 2))
agentSwitchIpRoutingMode = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchIpRoutingMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchIpRoutingMode.setDescription('Administratively enables/disables routing on the switch.')
agentSwitchIpInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 2, 3), )
if mibBuilder.loadTexts: agentSwitchIpInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: agentSwitchIpInterfaceTable.setDescription('')
agentSwitchIpInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 2, 3, 1), ).setIndexNames((0, "FASTPATH-ROUTING-MIB", "agentSwitchIpInterfaceIfIndex"))
if mibBuilder.loadTexts: agentSwitchIpInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: agentSwitchIpInterfaceEntry.setDescription('')
agentSwitchIpInterfaceIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchIpInterfaceIfIndex.setStatus('current')
if mibBuilder.loadTexts: agentSwitchIpInterfaceIfIndex.setDescription('The IfIndex associated with this instance.')
agentSwitchIpInterfaceIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 2, 3, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchIpInterfaceIpAddress.setStatus('current')
if mibBuilder.loadTexts: agentSwitchIpInterfaceIpAddress.setDescription('The IpAddress assigned to this interface. When setting this value, the value of agentSwitchIpInterfaceNetMask must be set at the same time.')
agentSwitchIpInterfaceNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 2, 3, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchIpInterfaceNetMask.setStatus('current')
if mibBuilder.loadTexts: agentSwitchIpInterfaceNetMask.setDescription('The NetMask assigned to this interface. When setting this value, the value of agentSwitchIpInterfaceIpAddress must be set at the same time.')
agentSwitchIpInterfaceClearIp = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchIpInterfaceClearIp.setStatus('current')
if mibBuilder.loadTexts: agentSwitchIpInterfaceClearIp.setDescription('Sets the interfaces IpAddress and NetMask back to 0.0.0.0')
agentSwitchIpInterfaceRoutingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchIpInterfaceRoutingMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchIpInterfaceRoutingMode.setDescription('Enables or disables routing for this interface.')
agentSwitchIpInterfaceProxyARPMode = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchIpInterfaceProxyARPMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchIpInterfaceProxyARPMode.setDescription('Enables or disables Proxy ARP for this interface.')
agentSwitchIpInterfaceMtuValue = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 2, 3, 1, 7), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(128, 1500), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchIpInterfaceMtuValue.setStatus('current')
if mibBuilder.loadTexts: agentSwitchIpInterfaceMtuValue.setDescription('Configures the MTU value for this interface. If the value returned is 0 this interface is not enabled for routing. It is not valid to set this value to 0 if routing is enabled.')
agentSwitchIpInterfaceBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 2, 3, 1, 8), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 10000000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchIpInterfaceBandwidth.setStatus('current')
if mibBuilder.loadTexts: agentSwitchIpInterfaceBandwidth.setDescription('Configures the Bandwidth value for this interface. If the value returned is 0 bandwidth for this interface is not Configured.')
agentSwitchIpInterfaceUnnumberedIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 2, 3, 1, 9), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchIpInterfaceUnnumberedIfIndex.setStatus('current')
if mibBuilder.loadTexts: agentSwitchIpInterfaceUnnumberedIfIndex.setDescription('If this object is non-zero, it indicates that the interface is unnumbered, and specifies which interface the address is borrowed from.')
agentSwitchIpInterfaceIcmpUnreachables = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 2, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchIpInterfaceIcmpUnreachables.setStatus('current')
if mibBuilder.loadTexts: agentSwitchIpInterfaceIcmpUnreachables.setDescription('If this object is enable, it indicates that ICMP unreachables can be sent on this interface.')
agentSwitchIpInterfaceIcmpRedirects = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 2, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchIpInterfaceIcmpRedirects.setStatus('current')
if mibBuilder.loadTexts: agentSwitchIpInterfaceIcmpRedirects.setDescription('If this object is enable and agentSwitchIpIcmpRedirectsMode is also enable ICMP Redirects can be sent on this interface.')
agentSwitchIpRouterDiscoveryTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 2, 4), )
if mibBuilder.loadTexts: agentSwitchIpRouterDiscoveryTable.setStatus('current')
if mibBuilder.loadTexts: agentSwitchIpRouterDiscoveryTable.setDescription('There is no global administrative flag for router discovery. The global routing flag (agentSwitchIpRoutingMode) will be used for this purpose. If routing is disabled, router discovery is disabled as well.')
agentSwitchIpRouterDiscoveryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 2, 4, 1), ).setIndexNames((0, "FASTPATH-ROUTING-MIB", "agentSwitchIpRouterDiscoveryIfIndex"))
if mibBuilder.loadTexts: agentSwitchIpRouterDiscoveryEntry.setStatus('current')
if mibBuilder.loadTexts: agentSwitchIpRouterDiscoveryEntry.setDescription('')
agentSwitchIpRouterDiscoveryIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchIpRouterDiscoveryIfIndex.setStatus('current')
if mibBuilder.loadTexts: agentSwitchIpRouterDiscoveryIfIndex.setDescription('Interface Number to configure Router Discovery on.')
agentSwitchIpRouterDiscoveryAdvertiseMode = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchIpRouterDiscoveryAdvertiseMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchIpRouterDiscoveryAdvertiseMode.setDescription('Enable or disable router discovery on the interface.')
agentSwitchIpRouterDiscoveryMaxAdvertisementInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 1800)).clone(600)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchIpRouterDiscoveryMaxAdvertisementInterval.setStatus('current')
if mibBuilder.loadTexts: agentSwitchIpRouterDiscoveryMaxAdvertisementInterval.setDescription('Maximum time allowed between sending router advertisements from the interface.')
agentSwitchIpRouterDiscoveryMinAdvertisementInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 1800)).clone(450)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchIpRouterDiscoveryMinAdvertisementInterval.setStatus('current')
if mibBuilder.loadTexts: agentSwitchIpRouterDiscoveryMinAdvertisementInterval.setDescription('Minimum time allowed between sending router advertisements from the interface. This value must be less than or equal to agentSwitchIpRouterDiscoveryMaxAdvertisementInterval.')
agentSwitchIpRouterDiscoveryAdvertisementLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 2, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 9000)).clone(1800)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchIpRouterDiscoveryAdvertisementLifetime.setStatus('current')
if mibBuilder.loadTexts: agentSwitchIpRouterDiscoveryAdvertisementLifetime.setDescription('Value of lifetime field of router advertsisement sent from the interface. This value must be greater than or equal to agentSwitchIpRouterDiscoveryMaxAdvertisementInterval.')
agentSwitchIpRouterDiscoveryPreferenceLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 2, 4, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchIpRouterDiscoveryPreferenceLevel.setStatus('current')
if mibBuilder.loadTexts: agentSwitchIpRouterDiscoveryPreferenceLevel.setDescription('Preferability of the address as a default router address, related to other addresses on the same subnet. This is defined as the larger the number, the higher the preference.')
agentSwitchIpRouterDiscoveryAdvertisementAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 2, 4, 1, 7), IpAddress().clone(hexValue="E0000001")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchIpRouterDiscoveryAdvertisementAddress.setStatus('current')
if mibBuilder.loadTexts: agentSwitchIpRouterDiscoveryAdvertisementAddress.setDescription('Address used when sending router advertisements from the interface.')
agentSwitchIpVlanTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 2, 5), )
if mibBuilder.loadTexts: agentSwitchIpVlanTable.setStatus('current')
if mibBuilder.loadTexts: agentSwitchIpVlanTable.setDescription('')
agentSwitchIpVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 2, 5, 1), ).setIndexNames((0, "FASTPATH-ROUTING-MIB", "agentSwitchIpVlanId"))
if mibBuilder.loadTexts: agentSwitchIpVlanEntry.setStatus('current')
if mibBuilder.loadTexts: agentSwitchIpVlanEntry.setDescription('A Static VLAN for which routing can be enabled/disabled')
agentSwitchIpVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchIpVlanId.setStatus('current')
if mibBuilder.loadTexts: agentSwitchIpVlanId.setDescription("The Vlan's Id.")
agentSwitchIpVlanIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 2, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchIpVlanIfIndex.setStatus('current')
if mibBuilder.loadTexts: agentSwitchIpVlanIfIndex.setDescription('The IfIndex associated with this VLAN.')
agentSwitchIpVlanRoutingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 2, 5, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentSwitchIpVlanRoutingStatus.setStatus('current')
if mibBuilder.loadTexts: agentSwitchIpVlanRoutingStatus.setDescription('Status of Routing mode per Vlan. active(1) - Vlan is enabled for routing createAndGo(4) - Adds Vlan entry for routing destroy(6) - Removes Vlan from routing')
agentSwitchSecondaryAddressTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 2, 6), )
if mibBuilder.loadTexts: agentSwitchSecondaryAddressTable.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSecondaryAddressTable.setDescription('Contains a list of secondary IP Addresses associated with an interface.')
agentSwitchSecondaryAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 2, 6, 1), ).setIndexNames((0, "FASTPATH-ROUTING-MIB", "agentSwitchIpInterfaceIfIndex"), (0, "FASTPATH-ROUTING-MIB", "agentSwitchSecondaryIpAddress"))
if mibBuilder.loadTexts: agentSwitchSecondaryAddressEntry.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSecondaryAddressEntry.setDescription('A secondary IP Address for a given interface. This IP Address must not conflict with the IP Address configured in the agentSwitchIpInterfaceTable.')
agentSwitchSecondaryIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 2, 6, 1, 1), IpAddress())
if mibBuilder.loadTexts: agentSwitchSecondaryIpAddress.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSecondaryIpAddress.setDescription('The Secondary IP Address assigned to this interface.')
agentSwitchSecondaryNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 2, 6, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentSwitchSecondaryNetMask.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSecondaryNetMask.setDescription('The Secondary Net Mask assigned to this interface. This value must be set during creation, and can not be changed.')
agentSwitchSecondaryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 2, 6, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentSwitchSecondaryStatus.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSecondaryStatus.setDescription('Creates a new entry in the Secondary Address table. Allowed values are: createAndGo(4) - Creates an entry in this table, associating the address with a given interface. The agentSwitchSecondaryNetMask object must be set during creation. destroy(6) - Removes the associated address from the interface.')
agentSwitchHelperAddressTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 2, 7), )
if mibBuilder.loadTexts: agentSwitchHelperAddressTable.setStatus('obsolete')
if mibBuilder.loadTexts: agentSwitchHelperAddressTable.setDescription('Replaced by agentSwitchIntfIpHelperAddressTable.')
agentSwitchHelperAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 2, 7, 1), ).setIndexNames((0, "FASTPATH-ROUTING-MIB", "agentSwitchIpInterfaceIfIndex"), (0, "FASTPATH-ROUTING-MIB", "agentSwitchHelperIpAddress"))
if mibBuilder.loadTexts: agentSwitchHelperAddressEntry.setStatus('obsolete')
if mibBuilder.loadTexts: agentSwitchHelperAddressEntry.setDescription('A Helper IP Address for a given interface.')
agentSwitchHelperIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 2, 7, 1, 1), IpAddress())
if mibBuilder.loadTexts: agentSwitchHelperIpAddress.setStatus('obsolete')
if mibBuilder.loadTexts: agentSwitchHelperIpAddress.setDescription('The Helper IP Address assigned to this interface.')
agentSwitchHelperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 2, 7, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentSwitchHelperStatus.setStatus('obsolete')
if mibBuilder.loadTexts: agentSwitchHelperStatus.setDescription('Creates a new entry in the Helper Address table. Allowed values are: createAndGo(4) - Creates an entry in this table, associating the address with a given interface. The agentSwitchHelperNetMask object must be set during creation. destroy(6) - Removes the associated address from the interface.')
agentSwitchIpIcmpControlGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 2, 8))
agentSwitchIpIcmpEchoReplyMode = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 2, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchIpIcmpEchoReplyMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchIpIcmpEchoReplyMode.setDescription('Sets the administrative Echo Reply Mode.')
agentSwitchIpIcmpRedirectsMode = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 2, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchIpIcmpRedirectsMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchIpIcmpRedirectsMode.setDescription('Sets the administrative Mode for sending Redirects. ')
agentSwitchIpIcmpRateLimitInterval = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 2, 8, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchIpIcmpRateLimitInterval.setStatus('current')
if mibBuilder.loadTexts: agentSwitchIpIcmpRateLimitInterval.setDescription('Specifies the time interval between tokens being placed in the bucket for ICMP Ratelimit.')
agentSwitchIpIcmpRateLimitBurstSize = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 2, 8, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchIpIcmpRateLimitBurstSize.setStatus('current')
if mibBuilder.loadTexts: agentSwitchIpIcmpRateLimitBurstSize.setDescription('Specifies the number of tokens to be placed after timeout.')
agentSwitchIntfIpHelperAddressTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 2, 10), )
if mibBuilder.loadTexts: agentSwitchIntfIpHelperAddressTable.setStatus('current')
if mibBuilder.loadTexts: agentSwitchIntfIpHelperAddressTable.setDescription('Contains a list of IP helper addresses associated with an interface.')
agentSwitchIntfIpHelperAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 2, 10, 1), ).setIndexNames((0, "FASTPATH-ROUTING-MIB", "agentSwitchIpInterfaceIfIndex"), (0, "FASTPATH-ROUTING-MIB", "agentSwitchIntfIpHelperUdpPort"), (0, "FASTPATH-ROUTING-MIB", "agentSwitchIntfIpHelperIpAddress"))
if mibBuilder.loadTexts: agentSwitchIntfIpHelperAddressEntry.setStatus('current')
if mibBuilder.loadTexts: agentSwitchIntfIpHelperAddressEntry.setDescription('An IP helper address for a given interface.')
agentSwitchIntfIpHelperIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 2, 10, 1, 1), IpAddress())
if mibBuilder.loadTexts: agentSwitchIntfIpHelperIpAddress.setStatus('current')
if mibBuilder.loadTexts: agentSwitchIntfIpHelperIpAddress.setDescription('An IP helper address for packets received on this interface. An address of 0.0.0.0 identifies the entry as a discard entry. Packets that match a discard entry are dropped.')
agentSwitchIntfIpHelperUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 2, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: agentSwitchIntfIpHelperUdpPort.setStatus('current')
if mibBuilder.loadTexts: agentSwitchIntfIpHelperUdpPort.setDescription('UDP port number. Received packets with this destination UDP port number are forwarded to the helper address in this entry.')
agentSwitchIntfIpHelperDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 2, 10, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchIntfIpHelperDiscard.setStatus('obsolete')
if mibBuilder.loadTexts: agentSwitchIntfIpHelperDiscard.setDescription('Variable obsoleted. To create a discard entry, set the helper address to 0.0.0.0.')
agentSwitchIntfIpHelperHitCount = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 2, 10, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchIntfIpHelperHitCount.setStatus('current')
if mibBuilder.loadTexts: agentSwitchIntfIpHelperHitCount.setDescription('The number of times a packet has been forwarded or discarded according to this entry.')
agentSwitchIntfIpHelperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 2, 10, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentSwitchIntfIpHelperStatus.setStatus('current')
if mibBuilder.loadTexts: agentSwitchIntfIpHelperStatus.setDescription('Creates a new entry in the Helper Address table. Allowed values are: createAndGo(4) - Creates an IP helper entry in this table. destroy(6) - Removes the IP helper entry.')
agentRouterRipConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 3))
agentRouterRipAdminState = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentRouterRipAdminState.setStatus('current')
if mibBuilder.loadTexts: agentRouterRipAdminState.setDescription('Sets the administrative mode of RIP in the router.')
agentRouterRipSplitHorizonMode = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("simple", 2), ("poisonReverse", 3))).clone('simple')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentRouterRipSplitHorizonMode.setStatus('current')
if mibBuilder.loadTexts: agentRouterRipSplitHorizonMode.setDescription('Sets the RIP split horizon operating mode in the router. A value of none(1) means split horizon processing is disabled. When set to simple(2), the simple split horizon technique is used. When set to poisonReverse(3), the split horizon with poison reverse technique is used. The default split horizon mode is simple(2).')
agentRouterRipAutoSummaryMode = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentRouterRipAutoSummaryMode.setStatus('current')
if mibBuilder.loadTexts: agentRouterRipAutoSummaryMode.setDescription('Sets the RIP auto summarization mode in the router. A value of enable(1) means that routes advertized by this RIP router are combined, or summarized, whenever possible into aggregates. When set to disable(2), routes are not aggregated in RIP updates generated by this router. The default auto summary mode is enable(1).')
agentRouterRipHostRoutesAcceptMode = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentRouterRipHostRoutesAcceptMode.setStatus('current')
if mibBuilder.loadTexts: agentRouterRipHostRoutesAcceptMode.setDescription('Sets the RIP host route acceptance mode in the router. A value of enable(1) means that host routes advertized to this RIP router will be accepted (learned) into its routing table. When set to disable(2), host routes advertized in RIP updates from neighboring routers are ignored. The default host routes accept mode is enable(1).')
agentRouterRipDefaultMetric = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 3, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentRouterRipDefaultMetric.setStatus('current')
if mibBuilder.loadTexts: agentRouterRipDefaultMetric.setDescription('Default metric of redistributed routes, when RIP redistributes from other protocols.')
agentRouterRipDefaultMetricConfigured = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 3, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentRouterRipDefaultMetricConfigured.setStatus('current')
if mibBuilder.loadTexts: agentRouterRipDefaultMetricConfigured.setDescription('Flag to determine whether RIP default-metric is configured or not.')
agentRouterRipDefaultInfoOriginate = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 3, 7), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentRouterRipDefaultInfoOriginate.setStatus('current')
if mibBuilder.loadTexts: agentRouterRipDefaultInfoOriginate.setDescription('Flag to determine, whether RIP can advertise a default-route learned from another protocol.')
agentRipRouteRedistTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 3, 8), )
if mibBuilder.loadTexts: agentRipRouteRedistTable.setStatus('current')
if mibBuilder.loadTexts: agentRipRouteRedistTable.setDescription('This table contains the MIB objects required to configure route-redistribution for RIP. Here, RIP is the Destination protocol and the source protocols can be any of : BGP, OSPF, Static, Connected.')
agentRipRouteRedistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 3, 8, 1), ).setIndexNames((0, "FASTPATH-ROUTING-MIB", "agentRipRouteRedistSource"))
if mibBuilder.loadTexts: agentRipRouteRedistEntry.setStatus('current')
if mibBuilder.loadTexts: agentRipRouteRedistEntry.setDescription('')
agentRipRouteRedistSource = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 3, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("connected", 1), ("static", 2), ("ospf", 3), ("bgp", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentRipRouteRedistSource.setStatus('current')
if mibBuilder.loadTexts: agentRipRouteRedistSource.setDescription('Source route, from which RIP can redistribute routes. This object also acts as the identifier for the RIP redistribution Table entry.')
agentRipRouteRedistMode = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 3, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentRipRouteRedistMode.setStatus('current')
if mibBuilder.loadTexts: agentRipRouteRedistMode.setDescription('User enabels/disables route-redistribution for a particular source protocol.')
agentRipRouteRedistMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 3, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentRipRouteRedistMetric.setStatus('current')
if mibBuilder.loadTexts: agentRipRouteRedistMetric.setDescription('Metric used for redistributing a particular source protocol route into RIP.')
agentRipRouteRedistMetricConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 3, 8, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentRipRouteRedistMetricConfigured.setStatus('current')
if mibBuilder.loadTexts: agentRipRouteRedistMetricConfigured.setDescription('Flag to determine whether RIP redistribute-metric is configured or not.')
agentRipRouteRedistMatchInternal = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 3, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("true", 1), ("false", 2), ("not-applicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentRipRouteRedistMatchInternal.setStatus('current')
if mibBuilder.loadTexts: agentRipRouteRedistMatchInternal.setDescription('If this flag is true, RIP redistributes OSPF internal routes. It will be non-applicable, when source protocol is other than ospf.')
agentRipRouteRedistMatchExternal1 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 3, 8, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("true", 1), ("false", 2), ("not-applicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentRipRouteRedistMatchExternal1.setStatus('current')
if mibBuilder.loadTexts: agentRipRouteRedistMatchExternal1.setDescription('If this flag is true, RIP redistributes OSPF External1 routes. It will be non-applicable, when source protocol is other than ospf.')
agentRipRouteRedistMatchExternal2 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 3, 8, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("true", 1), ("false", 2), ("not-applicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentRipRouteRedistMatchExternal2.setStatus('current')
if mibBuilder.loadTexts: agentRipRouteRedistMatchExternal2.setDescription('If this flag is true, RIP redistributes OSPF External2 routes. It will be non-applicable, when source protocol is other than ospf.')
agentRipRouteRedistMatchNSSAExternal1 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 3, 8, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("true", 1), ("false", 2), ("not-applicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentRipRouteRedistMatchNSSAExternal1.setStatus('current')
if mibBuilder.loadTexts: agentRipRouteRedistMatchNSSAExternal1.setDescription('If this flag is true, RIP redistributes OSPF NSSA-External1 routes. It will be non-applicable, when source protocol is other than ospf.')
agentRipRouteRedistMatchNSSAExternal2 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 3, 8, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("true", 1), ("false", 2), ("not-applicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentRipRouteRedistMatchNSSAExternal2.setStatus('current')
if mibBuilder.loadTexts: agentRipRouteRedistMatchNSSAExternal2.setDescription('If this flag is true, RIP redistributes OSPF NSSA-External2 routes. It will be non-applicable, when source protocol is other than ospf.')
agentRipRouteRedistDistList = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 3, 8, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentRipRouteRedistDistList.setStatus('current')
if mibBuilder.loadTexts: agentRipRouteRedistDistList.setDescription('Access-list number of the access-list, which filters routes received from a source-protocol.')
agentRipRouteRedistDistListConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 3, 8, 1, 11), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentRipRouteRedistDistListConfigured.setStatus('current')
if mibBuilder.loadTexts: agentRipRouteRedistDistListConfigured.setDescription('Flag to determine whether Access-list is configured or not.')
agentRip2IfConfTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 3, 9), )
if mibBuilder.loadTexts: agentRip2IfConfTable.setStatus('current')
if mibBuilder.loadTexts: agentRip2IfConfTable.setDescription('A list of subnets which require separate configuration in RIP. Augments rip2IfConfTable in the RIPv2-MIB.')
agentRip2IfConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 3, 9, 1), )
rip2IfConfEntry.registerAugmentions(("FASTPATH-ROUTING-MIB", "agentRip2IfConfEntry"))
agentRip2IfConfEntry.setIndexNames(*rip2IfConfEntry.getIndexNames())
if mibBuilder.loadTexts: agentRip2IfConfEntry.setStatus('current')
if mibBuilder.loadTexts: agentRip2IfConfEntry.setDescription('A Single Routing Domain in a single Subnet. Augments rip2IfConfEntry in RIPv2-MIB.')
agentRip2IfConfAuthKeyId = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 3, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentRip2IfConfAuthKeyId.setStatus('current')
if mibBuilder.loadTexts: agentRip2IfConfAuthKeyId.setDescription('The identifier for the authentication key used on this interface. This field is only meaningful when the RIPv2-MIB rip2IfConfAuthType is md5(3); otherwise, the value is not used.')
agentRouterRipRoutePref = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 3, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(120)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentRouterRipRoutePref.setStatus('current')
if mibBuilder.loadTexts: agentRouterRipRoutePref.setDescription('The route preference, sometimes called administrative distance, for RIP routes. A route with a preference of 255 is considered unreachable.')
agentRouterOspfConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4))
agentOspfDefaultMetric = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16777214))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentOspfDefaultMetric.setStatus('current')
if mibBuilder.loadTexts: agentOspfDefaultMetric.setDescription('Default metric of redistributed routes, when OSPF redistributes from other protocols.')
agentOspfDefaultMetricConfigured = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentOspfDefaultMetricConfigured.setStatus('current')
if mibBuilder.loadTexts: agentOspfDefaultMetricConfigured.setDescription('Flag to determine whether OSPF default-metric is configured or not.')
agentOspfDefaultInfoOriginate = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentOspfDefaultInfoOriginate.setStatus('current')
if mibBuilder.loadTexts: agentOspfDefaultInfoOriginate.setDescription('Flag to determine, whether OSPF can advertise a default-route learned from another protocol.')
agentOspfDefaultInfoOriginateAlways = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentOspfDefaultInfoOriginateAlways.setStatus('current')
if mibBuilder.loadTexts: agentOspfDefaultInfoOriginateAlways.setDescription("When this flag is true, the router advertises 0.0.0.0/0.0.0.0 always. Without this option, OSPF will only advertise 0.0.0.0/0.0.0.0 if the router's forwarding table contains a default route.")
agentOspfDefaultInfoOriginateMetric = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 16777214), )).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentOspfDefaultInfoOriginateMetric.setStatus('current')
if mibBuilder.loadTexts: agentOspfDefaultInfoOriginateMetric.setDescription('Metric of the default route, which OSPF advertises when learned from other protocol. (0) indicates that the parameter is not configured, this value should not be set. Valid range for set is (1..16777214).')
agentOspfDefaultInfoOriginateMetricConfigured = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentOspfDefaultInfoOriginateMetricConfigured.setStatus('current')
if mibBuilder.loadTexts: agentOspfDefaultInfoOriginateMetricConfigured.setDescription('Flag to determine whether OSPF default-info originate metric is configured or not.')
agentOspfDefaultInfoOriginateMetricType = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("externalType1", 1), ("externalType2", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentOspfDefaultInfoOriginateMetricType.setStatus('current')
if mibBuilder.loadTexts: agentOspfDefaultInfoOriginateMetricType.setDescription('Metric Type of the default route,which OSPF advertises when learned from other protocol. It can be 1(external type 1) or 2(external type 2).')
agentOspfRouteRedistTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 8), )
if mibBuilder.loadTexts: agentOspfRouteRedistTable.setStatus('current')
if mibBuilder.loadTexts: agentOspfRouteRedistTable.setDescription('This table contains the MIB objects required to configure route-redistribution for OSPF. Here, OSPF is the Destination protocol and the source protocols can be any of : BGP, RIP, Static, Connected.')
agentOspfRouteRedistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 8, 1), ).setIndexNames((0, "FASTPATH-ROUTING-MIB", "agentOspfRouteRedistSource"))
if mibBuilder.loadTexts: agentOspfRouteRedistEntry.setStatus('current')
if mibBuilder.loadTexts: agentOspfRouteRedistEntry.setDescription('')
agentOspfRouteRedistSource = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("connected", 1), ("static", 2), ("rip", 3), ("bgp", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOspfRouteRedistSource.setStatus('current')
if mibBuilder.loadTexts: agentOspfRouteRedistSource.setDescription('Source protocol, from which OSPF can redistribute routes. This object also acts as the identifier for the OSPF redistribution Table entry.')
agentOspfRouteRedistMode = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentOspfRouteRedistMode.setStatus('current')
if mibBuilder.loadTexts: agentOspfRouteRedistMode.setDescription('User enabels/disables route-redistribution for a particular source protocol.')
agentOspfRouteRedistMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777214))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentOspfRouteRedistMetric.setStatus('current')
if mibBuilder.loadTexts: agentOspfRouteRedistMetric.setDescription('Metric used for redistributing a particular source protocol route into OSPF.')
agentOspfRouteRedistMetricConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 8, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentOspfRouteRedistMetricConfigured.setStatus('current')
if mibBuilder.loadTexts: agentOspfRouteRedistMetricConfigured.setDescription('Flag to determine whether OSPF redistribute-metric is configured or not.')
agentOspfRouteRedistMetricType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("externalType1", 1), ("externalType2", 2))).clone('externalType2')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentOspfRouteRedistMetricType.setStatus('current')
if mibBuilder.loadTexts: agentOspfRouteRedistMetricType.setDescription('Metric Type of routes,which OSPF redistributes from other source protocols. It can be 1(external type 1) or 2(external type 2).')
agentOspfRouteRedistTag = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 8, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentOspfRouteRedistTag.setStatus('current')
if mibBuilder.loadTexts: agentOspfRouteRedistTag.setDescription('It specifies the tag field in routes redistributed by OSPF.')
agentOspfRouteRedistSubnets = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 8, 1, 7), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentOspfRouteRedistSubnets.setStatus('current')
if mibBuilder.loadTexts: agentOspfRouteRedistSubnets.setDescription('If this value is false, then OSPF will not redistribute subnetted routes.')
agentOspfRouteRedistDistList = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 8, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentOspfRouteRedistDistList.setStatus('current')
if mibBuilder.loadTexts: agentOspfRouteRedistDistList.setDescription('Access-list number of the access-list, which filters routes received from a source-protocol.')
agentOspfRouteRedistDistListConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 8, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentOspfRouteRedistDistListConfigured.setStatus('current')
if mibBuilder.loadTexts: agentOspfRouteRedistDistListConfigured.setDescription('Flag to determine whether Access-list is configured or not.')
agentOspfIfTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 9), )
if mibBuilder.loadTexts: agentOspfIfTable.setStatus('current')
if mibBuilder.loadTexts: agentOspfIfTable.setDescription('The OSPF Interface Table describes the inter- faces from the viewpoint of OSPF. Augments ospfIfTable from the OSPF-MIB.')
agentOspfIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 9, 1), )
ospfIfEntry.registerAugmentions(("FASTPATH-ROUTING-MIB", "agentOspfIfEntry"))
agentOspfIfEntry.setIndexNames(*ospfIfEntry.getIndexNames())
if mibBuilder.loadTexts: agentOspfIfEntry.setStatus('current')
if mibBuilder.loadTexts: agentOspfIfEntry.setDescription('The OSPF Interface Entry describes one inter- face from the viewpoint of OSPF. Augments ospfIfEntry in OSPF-MIB.')
agentOspfIfAuthKeyId = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentOspfIfAuthKeyId.setStatus('current')
if mibBuilder.loadTexts: agentOspfIfAuthKeyId.setDescription('The identifier for the authentication key used on this interface. This field is only meaningful when the OSPF-MIB ospfIfAuthType is md5(2); otherwise, the value is not used.')
agentOspfIfIpMtuIgnoreFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentOspfIfIpMtuIgnoreFlag.setStatus('current')
if mibBuilder.loadTexts: agentOspfIfIpMtuIgnoreFlag.setDescription('Configures the IP MTU Ignore Flag value for this OSPF interface.')
agentOspfIfPassiveMode = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 9, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentOspfIfPassiveMode.setStatus('current')
if mibBuilder.loadTexts: agentOspfIfPassiveMode.setDescription('Flag to determine whether the interface is passive. A passive interface will not participate in the OSPF adjacency formation.')
agentOspfIfAdvertiseSecondaries = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentOspfIfAdvertiseSecondaries.setStatus('current')
if mibBuilder.loadTexts: agentOspfIfAdvertiseSecondaries.setDescription('Configures the advertisability of the secondary addresses configured on this interface.')
agentOspfVirtIfTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 10), )
if mibBuilder.loadTexts: agentOspfVirtIfTable.setStatus('current')
if mibBuilder.loadTexts: agentOspfVirtIfTable.setDescription("Information about this router's virtual inter- faces. Augments ospfVirtIfTable from the OSPF-MIB.")
agentOspfVirtIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 10, 1), )
ospfVirtIfEntry.registerAugmentions(("FASTPATH-ROUTING-MIB", "agentOspfVirtIfEntry"))
agentOspfVirtIfEntry.setIndexNames(*ospfVirtIfEntry.getIndexNames())
if mibBuilder.loadTexts: agentOspfVirtIfEntry.setStatus('current')
if mibBuilder.loadTexts: agentOspfVirtIfEntry.setDescription('Information about a single Virtual Interface. Augments ospfVirtIfEntry in OSPF-MIB.')
agentOspfVirtIfAuthKeyId = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentOspfVirtIfAuthKeyId.setStatus('current')
if mibBuilder.loadTexts: agentOspfVirtIfAuthKeyId.setDescription('The identifier for the authentication key used on this virtual interface. This field is only meaningful when the OSPF-MIB ospfVirtIfAuthType is md5(2); otherwise, the value is not used.')
agentRouterOspfRFC1583CompatibilityMode = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentRouterOspfRFC1583CompatibilityMode.setStatus('current')
if mibBuilder.loadTexts: agentRouterOspfRFC1583CompatibilityMode.setDescription("From RFC2328: Controls the preference rules used in Section 16.4 when choosing among multiple AS-external-LSAs advertising the same destination. When set to 'enabled', the preference rules remain those specified by RFC 1583 ([Ref9]). When set to 'disabled', the preference rules are those stated in Section 16.4.1, which prevent routing loops when AS- external-LSAs for the same destination have been originated from different areas. Set to 'enabled' by default. In order to minimize the chance of routing loops, all OSPF routers in an OSPF routing domain should have RFC1583Compatibility set identically. When there are routers present that have not been updated with the functionality specified in Section 16.4.1 of this memo, all routers should have RFC1583Compatibility set to 'enabled'. Otherwise, all routers should have RFC1583Compatibility set to 'disabled', preventing all routing loops.")
agentOspfSpfDelayTime = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 12), SpfTimerRange().clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentOspfSpfDelayTime.setStatus('current')
if mibBuilder.loadTexts: agentOspfSpfDelayTime.setDescription('Delay time (in seconds) between when OSPF receives a topology change and when it starts an SPF calculation. It can be an integer from 0 to 65535. The default time is 5 seconds. A value of 0 means that there is no delay; that is, the SPF calculation is started immediately.')
agentOspfSpfHoldTime = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 13), SpfTimerRange().clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentOspfSpfHoldTime.setStatus('current')
if mibBuilder.loadTexts: agentOspfSpfHoldTime.setDescription('Minimum time (in seconds) between two consecutive SPF calculations. It can be an integer from 0 to 65535. The default time is 10 seconds. A value of 0 means that there is no delay; that is, two SPF calculations can be done, one immediately after the other.')
agentOspfAutoCostRefBw = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 14), AutoCostRefBw().clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentOspfAutoCostRefBw.setStatus('current')
if mibBuilder.loadTexts: agentOspfAutoCostRefBw.setDescription('Auto cost refernece bandwidth of the router interafaces for ospf metric calculations. It can be an integer from 1 to 4294967. The default reference bandwidth is 100 Mbps.')
agentOspfOpaqueLsaSupport = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 15), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentOspfOpaqueLsaSupport.setReference('The OSPF Opaque LSA Option')
if mibBuilder.loadTexts: agentOspfOpaqueLsaSupport.setStatus('current')
if mibBuilder.loadTexts: agentOspfOpaqueLsaSupport.setDescription("The router's support for Opaque LSA types. This object is persistent and when written the entity SHOULD save the change to non-volatile storage.")
agentOspfAreaOpaqueLsdbTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 16), )
if mibBuilder.loadTexts: agentOspfAreaOpaqueLsdbTable.setReference('OSPF Version 2, Section 12 Link State Advertisements')
if mibBuilder.loadTexts: agentOspfAreaOpaqueLsdbTable.setStatus('current')
if mibBuilder.loadTexts: agentOspfAreaOpaqueLsdbTable.setDescription("The OSPF Process's Area Link State Database (LSDB). The LSDB contains type-10 Link State Advertisements from throughout the areas that the device is attached to.")
agentOspfAreaOpaqueLsdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 16, 1), ).setIndexNames((0, "FASTPATH-ROUTING-MIB", "agentOspfAreaOpaqueLsdbAreaId"), (0, "FASTPATH-ROUTING-MIB", "agentOspfAreaOpaqueLsdbType"), (0, "FASTPATH-ROUTING-MIB", "agentOspfAreaOpaqueLsdbLsid"), (0, "FASTPATH-ROUTING-MIB", "agentOspfAreaOpaqueLsdbRouterId"))
if mibBuilder.loadTexts: agentOspfAreaOpaqueLsdbEntry.setStatus('current')
if mibBuilder.loadTexts: agentOspfAreaOpaqueLsdbEntry.setDescription('A single AreaOpaque Link State Advertisement.')
agentOspfAreaOpaqueLsdbAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 16, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOspfAreaOpaqueLsdbAreaId.setReference('OSPF Version 2, Appendix C.2 Area parameters')
if mibBuilder.loadTexts: agentOspfAreaOpaqueLsdbAreaId.setStatus('current')
if mibBuilder.loadTexts: agentOspfAreaOpaqueLsdbAreaId.setDescription('The 32 bit identifier of the Area from which the LSA was received.')
agentOspfAreaOpaqueLsdbType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(10))).clone(namedValues=NamedValues(("areaOpaqueLink", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOspfAreaOpaqueLsdbType.setReference('OSPF Version 2, Appendix A.4.1 The Link State Advertisement header')
if mibBuilder.loadTexts: agentOspfAreaOpaqueLsdbType.setStatus('current')
if mibBuilder.loadTexts: agentOspfAreaOpaqueLsdbType.setDescription('The type of the link state advertisement. Each link state type has a separate advertisement format.')
agentOspfAreaOpaqueLsdbLsid = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 16, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOspfAreaOpaqueLsdbLsid.setReference('OSPF Version 2, Section 12.1.4 Link State ID')
if mibBuilder.loadTexts: agentOspfAreaOpaqueLsdbLsid.setStatus('current')
if mibBuilder.loadTexts: agentOspfAreaOpaqueLsdbLsid.setDescription('The Link State ID is an LS Type Specific field containing either a Router ID or an IP Address; it identifies the piece of the routing domain that is being described by the advertisement.')
agentOspfAreaOpaqueLsdbRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 16, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOspfAreaOpaqueLsdbRouterId.setReference('OSPF Version 2, Appendix C.1 Global parameters')
if mibBuilder.loadTexts: agentOspfAreaOpaqueLsdbRouterId.setStatus('current')
if mibBuilder.loadTexts: agentOspfAreaOpaqueLsdbRouterId.setDescription('The 32 bit number that uniquely identifies the originating router in the Autonomous System.')
agentOspfAreaOpaqueLsdbSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 16, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOspfAreaOpaqueLsdbSequence.setReference('OSPF Version 2, Section 12.1.6 LS sequence number')
if mibBuilder.loadTexts: agentOspfAreaOpaqueLsdbSequence.setStatus('current')
if mibBuilder.loadTexts: agentOspfAreaOpaqueLsdbSequence.setDescription("The sequence number field is a signed 32-bit integer. It starts with the value '80000001'h, or -'7FFFFFFF'h, and increments until '7FFFFFFF'h. Thus, a typical sequence number will be very negative. It is used to detect old and duplicate link state advertisements. The space of sequence numbers is linearly ordered. The larger the sequence number the more recent the advertisement.")
agentOspfAreaOpaqueLsdbAge = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 16, 1, 6), Integer32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOspfAreaOpaqueLsdbAge.setReference('OSPF Version 2, Section 12.1.1 LS age')
if mibBuilder.loadTexts: agentOspfAreaOpaqueLsdbAge.setStatus('current')
if mibBuilder.loadTexts: agentOspfAreaOpaqueLsdbAge.setDescription('This field is the age of the link state advertisement in seconds.')
agentOspfAreaOpaqueLsdbChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 16, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOspfAreaOpaqueLsdbChecksum.setReference('OSPF Version 2, Section 12.1.7 LS checksum')
if mibBuilder.loadTexts: agentOspfAreaOpaqueLsdbChecksum.setStatus('current')
if mibBuilder.loadTexts: agentOspfAreaOpaqueLsdbChecksum.setDescription("This field is the checksum of the complete contents of the advertisement, excepting the age field. The age field is excepted so that an advertisement's age can be incremented without updating the checksum. The checksum used is the same that is used for ISO connectionless datagrams; it is commonly referred to as the Fletcher checksum.")
agentOspfAreaOpaqueLsdbAdvertisement = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 16, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOspfAreaOpaqueLsdbAdvertisement.setReference('OSPF Version 2, Section 12 Link State Advertisements')
if mibBuilder.loadTexts: agentOspfAreaOpaqueLsdbAdvertisement.setStatus('current')
if mibBuilder.loadTexts: agentOspfAreaOpaqueLsdbAdvertisement.setDescription('The entire Link State Advertisement, including its header. Note that for variable length LSAs, SNMP agents may not be able to return the largest string size')
agentOspfLocalLsdbTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 17), )
if mibBuilder.loadTexts: agentOspfLocalLsdbTable.setReference('OSPF Version 2, Section 12 Link State Advertisements and The OSPF Opaque LSA Option')
if mibBuilder.loadTexts: agentOspfLocalLsdbTable.setStatus('current')
if mibBuilder.loadTexts: agentOspfLocalLsdbTable.setDescription("The OSPF Process's Link-Local Link State Database for non-virtual links. This table is identical to the OSPF LSDB Table in format, but contains only Link-Local Link State Advertisements for non-virtual links. The purpose is to allow Link-Local LSAs to be displayed for each non-virtual interface. This table is implemented to support type-9 LSAs which are defined in 'The OSPF Opaque LSA Option'.")
agentOspfLocalLsdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 17, 1), ).setIndexNames((0, "FASTPATH-ROUTING-MIB", "agentOspfLocalLsdbIpAddress"), (0, "FASTPATH-ROUTING-MIB", "agentOspfLocalLsdbAddressLessIf"), (0, "FASTPATH-ROUTING-MIB", "agentOspfLocalLsdbType"), (0, "FASTPATH-ROUTING-MIB", "agentOspfLocalLsdbLsid"), (0, "FASTPATH-ROUTING-MIB", "agentOspfLocalLsdbRouterId"))
if mibBuilder.loadTexts: agentOspfLocalLsdbEntry.setStatus('current')
if mibBuilder.loadTexts: agentOspfLocalLsdbEntry.setDescription('A single Link State Advertisement.')
agentOspfLocalLsdbIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 17, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOspfLocalLsdbIpAddress.setReference('OSPF Version 2, Appendix C.3 Interface parameters')
if mibBuilder.loadTexts: agentOspfLocalLsdbIpAddress.setStatus('current')
if mibBuilder.loadTexts: agentOspfLocalLsdbIpAddress.setDescription('The IP Address of the interface from which the LSA was received if the interface is numbered.')
agentOspfLocalLsdbAddressLessIf = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 17, 1, 2), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOspfLocalLsdbAddressLessIf.setReference('OSPF Version 2, Appendix C.3 Interface parameters')
if mibBuilder.loadTexts: agentOspfLocalLsdbAddressLessIf.setStatus('current')
if mibBuilder.loadTexts: agentOspfLocalLsdbAddressLessIf.setDescription('The Interface Index of the interface from which the LSA was received if the interface is unnumbered.')
agentOspfLocalLsdbType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 17, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(9))).clone(namedValues=NamedValues(("localOpaqueLink", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOspfLocalLsdbType.setReference('OSPF Version 2, Appendix A.4.1 The Link State Advertisement header and ')
if mibBuilder.loadTexts: agentOspfLocalLsdbType.setStatus('current')
if mibBuilder.loadTexts: agentOspfLocalLsdbType.setDescription('The type of the link state advertisement. Each link state type has a separate advertise- ment format.')
agentOspfLocalLsdbLsid = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 17, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOspfLocalLsdbLsid.setReference('OSPF Version 2, Section 12.1.4 Link State ID')
if mibBuilder.loadTexts: agentOspfLocalLsdbLsid.setStatus('current')
if mibBuilder.loadTexts: agentOspfLocalLsdbLsid.setDescription('The Link State ID is an LS Type Specific field containing a 32 bit identifier in IP address format; it identifies the piece of the routing domain that is being described by the advertisement.')
agentOspfLocalLsdbRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 17, 1, 5), RouterID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOspfLocalLsdbRouterId.setReference('OSPF Version 2, Appendix C.1 Global parameters')
if mibBuilder.loadTexts: agentOspfLocalLsdbRouterId.setStatus('current')
if mibBuilder.loadTexts: agentOspfLocalLsdbRouterId.setDescription('The 32 bit number that uniquely identifies the originating router in the Autonomous System.')
agentOspfLocalLsdbSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 17, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOspfLocalLsdbSequence.setReference('OSPF Version 2, Section 12.1.6 LS sequence number')
if mibBuilder.loadTexts: agentOspfLocalLsdbSequence.setStatus('current')
if mibBuilder.loadTexts: agentOspfLocalLsdbSequence.setDescription("The sequence number field is a signed 32-bit integer. It starts with the value '80000001'h, or -'7FFFFFFF'h, and increments until '7FFFFFFF'h. Thus, a typical sequence number will be very negative. It is used to detect old and duplicate link state advertisements. The space of sequence numbers is linearly ordered. The larger the sequence number the more recent the advertisement.")
agentOspfLocalLsdbAge = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 17, 1, 7), Integer32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOspfLocalLsdbAge.setReference('OSPF Version 2, Section 12.1.1 LS age')
if mibBuilder.loadTexts: agentOspfLocalLsdbAge.setStatus('current')
if mibBuilder.loadTexts: agentOspfLocalLsdbAge.setDescription('This field is the age of the link state adver- tisement in seconds.')
agentOspfLocalLsdbChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 17, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOspfLocalLsdbChecksum.setReference('OSPF Version 2, Section 12.1.7 LS checksum')
if mibBuilder.loadTexts: agentOspfLocalLsdbChecksum.setStatus('current')
if mibBuilder.loadTexts: agentOspfLocalLsdbChecksum.setDescription("This field is the checksum of the complete contents of the advertisement, excepting the age field. The age field is excepted so that an advertisement's age can be incremented without updating the checksum. The checksum used is the same that is used for ISO connec- tionless datagrams; it is commonly referred to as the Fletcher checksum.")
agentOspfLocalLsdbAdvertisement = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 17, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOspfLocalLsdbAdvertisement.setReference('OSPF Version 2, Section 12 Link State Adver- tisements')
if mibBuilder.loadTexts: agentOspfLocalLsdbAdvertisement.setStatus('current')
if mibBuilder.loadTexts: agentOspfLocalLsdbAdvertisement.setDescription('The entire Link State Advertisement, including its header. Note that for variable length LSAs, SNMP agents may not be able to return the largest string size.')
agentOspfAsLsdbTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 18), )
if mibBuilder.loadTexts: agentOspfAsLsdbTable.setReference('OSPF Version 2, Section 12 Link State Adver- tisements')
if mibBuilder.loadTexts: agentOspfAsLsdbTable.setStatus('current')
if mibBuilder.loadTexts: agentOspfAsLsdbTable.setDescription("The OSPF Process's AS-scope LSA Link State Database. The Database contains the AS-scope Link State Advertisements from throughout the areas that the device is attached to. This table is identical to the OSPF LSDB Table in format, but contains only AS-scope Link State Advertisements. The purpose is to allow AS-scope LSAs to be displayed once for the router rather than once in each non-stub area.")
agentOspfAsLsdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 18, 1), ).setIndexNames((0, "FASTPATH-ROUTING-MIB", "agentOspfAsLsdbType"), (0, "FASTPATH-ROUTING-MIB", "agentOspfAsLsdbLsid"), (0, "FASTPATH-ROUTING-MIB", "agentOspfAsLsdbRouterId"))
if mibBuilder.loadTexts: agentOspfAsLsdbEntry.setStatus('current')
if mibBuilder.loadTexts: agentOspfAsLsdbEntry.setDescription('A single Link State Advertisement.')
agentOspfAsLsdbType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 18, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(11))).clone(namedValues=NamedValues(("asOpaqueLink", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOspfAsLsdbType.setReference('OSPF Version 2, Appendix A.4.1 The Link State Advertisement header')
if mibBuilder.loadTexts: agentOspfAsLsdbType.setStatus('current')
if mibBuilder.loadTexts: agentOspfAsLsdbType.setDescription('The type of the link state advertisement. Each link state type has a separate advertise- ment format.')
agentOspfAsLsdbLsid = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 18, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOspfAsLsdbLsid.setReference('OSPF Version 2, Section 12.1.4 Link State ID')
if mibBuilder.loadTexts: agentOspfAsLsdbLsid.setStatus('current')
if mibBuilder.loadTexts: agentOspfAsLsdbLsid.setDescription('The Link State ID is an LS Type Specific field containing either a Router ID or an IP Address; it identifies the piece of the routing domain that is being described by the advertisement.')
agentOspfAsLsdbRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 18, 1, 3), RouterID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOspfAsLsdbRouterId.setReference('OSPF Version 2, Appendix C.1 Global parameters')
if mibBuilder.loadTexts: agentOspfAsLsdbRouterId.setStatus('current')
if mibBuilder.loadTexts: agentOspfAsLsdbRouterId.setDescription('The 32 bit number that uniquely identifies the originating router in the Autonomous System.')
agentOspfAsLsdbSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 18, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOspfAsLsdbSequence.setReference('OSPF Version 2, Section 12.1.6 LS sequence number')
if mibBuilder.loadTexts: agentOspfAsLsdbSequence.setStatus('current')
if mibBuilder.loadTexts: agentOspfAsLsdbSequence.setDescription("The sequence number field is a signed 32-bit integer. It starts with the value '80000001'h, or -'7FFFFFFF'h, and increments until '7FFFFFFF'h. Thus, a typical sequence number will be very negative. It is used to detect old and duplicate link state advertisements. The space of sequence numbers is linearly ordered. The larger the sequence number the more recent the advertisement.")
agentOspfAsLsdbAge = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 18, 1, 5), Integer32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOspfAsLsdbAge.setReference('OSPF Version 2, Section 12.1.1 LS age')
if mibBuilder.loadTexts: agentOspfAsLsdbAge.setStatus('current')
if mibBuilder.loadTexts: agentOspfAsLsdbAge.setDescription('This field is the age of the link state adver- tisement in seconds.')
agentOspfAsLsdbChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 18, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOspfAsLsdbChecksum.setReference('OSPF Version 2, Section 12.1.7 LS checksum')
if mibBuilder.loadTexts: agentOspfAsLsdbChecksum.setStatus('current')
if mibBuilder.loadTexts: agentOspfAsLsdbChecksum.setDescription("This field is the checksum of the complete contents of the advertisement, excepting the age field. The age field is excepted so that an advertisement's age can be incremented without updating the checksum. The checksum used is the same that is used for ISO connec- tionless datagrams; it is commonly referred to as the Fletcher checksum.")
agentOspfAsLsdbAdvertisement = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 18, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOspfAsLsdbAdvertisement.setReference('OSPF Version 2, Section 12 Link State Adver- tisements. Note that for variable length LSAs, SNMP agents may not be able to return the largest string size.')
if mibBuilder.loadTexts: agentOspfAsLsdbAdvertisement.setStatus('current')
if mibBuilder.loadTexts: agentOspfAsLsdbAdvertisement.setDescription('The entire Link State Advertisement, including its header.')
agentOspfDefaultPassiveMode = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 19), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentOspfDefaultPassiveMode.setStatus('current')
if mibBuilder.loadTexts: agentOspfDefaultPassiveMode.setDescription('Flag to determine, whether all the interfaces are passive interfaces by default. A passive interface will not participate in the OSPF adjacency formation.')
agentOspfRoutePrefIntraArea = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(110)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentOspfRoutePrefIntraArea.setStatus('current')
if mibBuilder.loadTexts: agentOspfRoutePrefIntraArea.setDescription('The route preference, sometimes called administrative distance, for intra-area OSPFv2 routes. A route with a preference of 255 is considered unreachable.')
agentOspfRoutePrefInterArea = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(110)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentOspfRoutePrefInterArea.setStatus('current')
if mibBuilder.loadTexts: agentOspfRoutePrefInterArea.setDescription('The route preference, sometimes called administrative distance, for inter-area OSPFv2 routes. A route with a preference of 255 is considered unreachable.')
agentOspfRoutePrefExternal = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 4, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(110)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentOspfRoutePrefExternal.setStatus('current')
if mibBuilder.loadTexts: agentOspfRoutePrefExternal.setDescription('The route preference, sometimes called administrative distance, for external OSPFv2 routes. A route with a preference of 255 is considered unreachable.')
agentSnmpTrapFlagsConfigGroupLayer3 = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 5))
agentSnmpVRRPNewMasterTrapFlag = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpVRRPNewMasterTrapFlag.setStatus('current')
if mibBuilder.loadTexts: agentSnmpVRRPNewMasterTrapFlag.setDescription('This flag enables the sending of VRRP new master notification traps.')
agentSnmpVRRPAuthFailureTrapFlag = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpVRRPAuthFailureTrapFlag.setStatus('current')
if mibBuilder.loadTexts: agentSnmpVRRPAuthFailureTrapFlag.setDescription('This flag enables the sending of VRRP authentication failure notification traps.')
agentBootpDhcpRelayGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 6))
agentBootpDhcpRelayMaxHopCount = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentBootpDhcpRelayMaxHopCount.setStatus('current')
if mibBuilder.loadTexts: agentBootpDhcpRelayMaxHopCount.setDescription('The BOOTP/DHCP Max Hop Count. The relay agent silently discards BOOTREQUEST messages whose hops field exceeds the value 16 assuming that the request is looped through the intermediate agents. The default value is 4.')
agentBootpDhcpRelayForwardingIp = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 6, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentBootpDhcpRelayForwardingIp.setStatus('obsolete')
if mibBuilder.loadTexts: agentBootpDhcpRelayForwardingIp.setDescription('DHCP server addresses are now configured through IP helper.')
agentBootpDhcpRelayForwardMode = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentBootpDhcpRelayForwardMode.setStatus('obsolete')
if mibBuilder.loadTexts: agentBootpDhcpRelayForwardMode.setDescription('The DHCP relay admin mode is replaced by the IP helper admin mode.')
agentBootpDhcpRelayMinWaitTime = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 6, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentBootpDhcpRelayMinWaitTime.setStatus('current')
if mibBuilder.loadTexts: agentBootpDhcpRelayMinWaitTime.setDescription("The BOOTP/DHCP Minimum Wait Time. When the BOOTP relay agent receives a BOOTREQUEST message, it MAY use the value of the 'secs' (seconds since client began booting) field of the request as a factor in deciding whether to relay the request or not.")
agentBootpDhcpRelayCircuitIdOptionMode = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 6, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentBootpDhcpRelayCircuitIdOptionMode.setStatus('current')
if mibBuilder.loadTexts: agentBootpDhcpRelayCircuitIdOptionMode.setDescription('The BOOTP/DHCP Circuit ID Option Mode. This flag is set to enable/disable the network element to add/remove the DHCP Relay agent Circuit ID sub-options.')
agentBootpDhcpRelayNumOfRequestsReceived = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 6, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentBootpDhcpRelayNumOfRequestsReceived.setStatus('obsolete')
if mibBuilder.loadTexts: agentBootpDhcpRelayNumOfRequestsReceived.setDescription('Replaced by IP helper statistics.')
agentBootpDhcpRelayNumOfRequestsForwarded = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 6, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentBootpDhcpRelayNumOfRequestsForwarded.setStatus('obsolete')
if mibBuilder.loadTexts: agentBootpDhcpRelayNumOfRequestsForwarded.setDescription('Replaced by IP helper statistics.')
agentBootpDhcpRelayNumOfDiscards = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 6, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentBootpDhcpRelayNumOfDiscards.setStatus('obsolete')
if mibBuilder.loadTexts: agentBootpDhcpRelayNumOfDiscards.setDescription('Replaced by IP helper statistics.')
agentECMPGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 7))
agentECMPOspfMaxPaths = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 7, 1), Integer32().clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentECMPOspfMaxPaths.setStatus('current')
if mibBuilder.loadTexts: agentECMPOspfMaxPaths.setDescription('It sets the number of paths that OSPF can report for a given destination where maxpaths is platform-dependent.')
agentRouterVrrpConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 8))
agentRouterVrrpAdminState = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentRouterVrrpAdminState.setStatus('current')
if mibBuilder.loadTexts: agentRouterVrrpAdminState.setDescription('Sets the administrative mode of VRRP in the router.')
agentRouterVrrpConfiguredTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 8, 2), )
if mibBuilder.loadTexts: agentRouterVrrpConfiguredTable.setStatus('current')
if mibBuilder.loadTexts: agentRouterVrrpConfiguredTable.setDescription("Operations table for a VRRP router which consists of a sequence (i.e., one or more conceptual rows) of `agentRouterVrrpConfiguredEntry' items.")
agentRouterVrrpConfiguredEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 8, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "VRRP-MIB", "vrrpOperVrId"))
if mibBuilder.loadTexts: agentRouterVrrpConfiguredEntry.setStatus('current')
if mibBuilder.loadTexts: agentRouterVrrpConfiguredEntry.setDescription('An entry in the table contains operational priority that is associated with a virtual router.')
agentRouterVrrpConfiguredPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 8, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentRouterVrrpConfiguredPriority.setStatus('current')
if mibBuilder.loadTexts: agentRouterVrrpConfiguredPriority.setDescription("This object specifies the value set by the vrrpOperPriority object. The GET operation on 'vrrpOperPriority' will be affected by both the tracking process and the configured priority set by the vrrpOperPriority object.")
agentVrrpOperations = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 9))
agentRouterVrrpOperTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 9, 1), )
if mibBuilder.loadTexts: agentRouterVrrpOperTable.setStatus('obsolete')
if mibBuilder.loadTexts: agentRouterVrrpOperTable.setDescription("Operations table for a VRRP router which consists of a sequence (i.e., one or more conceptual rows) of `agentRouterVrrpOperEntry' items.")
agentRouterVrrpOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 9, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "VRRP-MIB", "vrrpOperVrId"))
if mibBuilder.loadTexts: agentRouterVrrpOperEntry.setStatus('obsolete')
if mibBuilder.loadTexts: agentRouterVrrpOperEntry.setDescription('An entry in the table contains operational priority that is associated with a virtual router.')
agentRouterVrrpOperPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentRouterVrrpOperPriority.setStatus('obsolete')
if mibBuilder.loadTexts: agentRouterVrrpOperPriority.setDescription('This object specifies the operational priority of the VRRP router. This value will be afftected by both the tracking process and the configured priority set by the vrrpOperPriority object.')
agentRouterVrrpTrackGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 10))
agentRouterVrrpTrackIntfTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 10, 1), )
if mibBuilder.loadTexts: agentRouterVrrpTrackIntfTable.setStatus('current')
if mibBuilder.loadTexts: agentRouterVrrpTrackIntfTable.setDescription('Tracking table for a VRRP router which consists of agentRouterVrrpTrackIntfEntry items.')
agentRouterVrrpTrackIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 10, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "VRRP-MIB", "vrrpOperVrId"), (0, "FASTPATH-ROUTING-MIB", "agentRouterVrrpTrackIntf"))
if mibBuilder.loadTexts: agentRouterVrrpTrackIntfEntry.setStatus('current')
if mibBuilder.loadTexts: agentRouterVrrpTrackIntfEntry.setDescription('An entry in the table contains tracked IP interfaces associated with a virtual router.')
agentRouterVrrpTrackIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 10, 1, 1, 1), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentRouterVrrpTrackIntf.setStatus('current')
if mibBuilder.loadTexts: agentRouterVrrpTrackIntf.setDescription('This object specifies the interface to be tracked.')
agentRouterVrrpTrackIfPrioDec = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 10, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254)).clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentRouterVrrpTrackIfPrioDec.setStatus('current')
if mibBuilder.loadTexts: agentRouterVrrpTrackIfPrioDec.setDescription('This object specifies the decrement priority of the VRRP router.')
agentRouterVrrpTrackIfState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 10, 1, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentRouterVrrpTrackIfState.setStatus('current')
if mibBuilder.loadTexts: agentRouterVrrpTrackIfState.setDescription('This object specifies the IP state of the tracked interface for the virtual router. ')
agentRouterVrrpTrackIfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 10, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentRouterVrrpTrackIfStatus.setStatus('current')
if mibBuilder.loadTexts: agentRouterVrrpTrackIfStatus.setDescription('The row status variable, used in accordance to installation and removal conventions for conceptual rows. To create a row in this table, a manager sets this object to either createAndGo(4) or createAndWait(5). The newly created row will be in active state later. To destroy the row set this object to destroy.')
agentRouterVrrpTrackRouteTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 10, 2), )
if mibBuilder.loadTexts: agentRouterVrrpTrackRouteTable.setStatus('current')
if mibBuilder.loadTexts: agentRouterVrrpTrackRouteTable.setDescription("Tracking table for a VRRP router which consists of a 'agentRouterVrrpTrackRouteEntry' items.")
agentRouterVrrpTrackRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 10, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "VRRP-MIB", "vrrpOperVrId"), (0, "FASTPATH-ROUTING-MIB", "agentRouterVrrpTrackRtPfx"), (0, "FASTPATH-ROUTING-MIB", "agentRouterVrrpTrackRtPfxLen"))
if mibBuilder.loadTexts: agentRouterVrrpTrackRouteEntry.setStatus('current')
if mibBuilder.loadTexts: agentRouterVrrpTrackRouteEntry.setDescription('An entry in the table contains tracked Routes associated with a virtual router.')
agentRouterVrrpTrackRtPfx = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 10, 2, 1, 1), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentRouterVrrpTrackRtPfx.setStatus('current')
if mibBuilder.loadTexts: agentRouterVrrpTrackRtPfx.setDescription('This object specifies the prefix of the route to be tracked.')
agentRouterVrrpTrackRtPfxLen = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 10, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentRouterVrrpTrackRtPfxLen.setStatus('current')
if mibBuilder.loadTexts: agentRouterVrrpTrackRtPfxLen.setDescription('This object specifies prefix length of the route to be tracked.')
agentRouterVrrpTrackRtPrioDec = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 10, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254)).clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentRouterVrrpTrackRtPrioDec.setStatus('current')
if mibBuilder.loadTexts: agentRouterVrrpTrackRtPrioDec.setDescription('This object specifies the decrement priority of the VRRP router.')
agentRouterVrrpTrackRtReachable = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 10, 2, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentRouterVrrpTrackRtReachable.setStatus('current')
if mibBuilder.loadTexts: agentRouterVrrpTrackRtReachable.setDescription('This object specifies the reachability of the tracked route.')
agentRouterVrrpTrackRtStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 10, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentRouterVrrpTrackRtStatus.setStatus('current')
if mibBuilder.loadTexts: agentRouterVrrpTrackRtStatus.setDescription('The row status variable, used in accordance to installation and removal conventions for conceptual rows. To create a row in this table, a manager sets this object to either createAndGo(4) or createAndWait(5). The newly created row will be in active state later. To delete the tracked route set this object to destroy.')
agentIpHelperGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 11))
agentIpHelperAdminMode = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpHelperAdminMode.setStatus('current')
if mibBuilder.loadTexts: agentIpHelperAdminMode.setDescription('Administratively enable or disable IP helper.')
agentDhcpClientMsgsReceived = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 11, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDhcpClientMsgsReceived.setStatus('current')
if mibBuilder.loadTexts: agentDhcpClientMsgsReceived.setDescription('The Number of DHCP Requests Received. Total number of DHCP requests received from all clients.')
agentDhcpClientMsgsRelayed = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 11, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDhcpClientMsgsRelayed.setStatus('current')
if mibBuilder.loadTexts: agentDhcpClientMsgsRelayed.setDescription('The Number of DHCP Requests Forwarded. Total number of DHCP requests relayed to a server.')
agentDhcpServerMsgsReceived = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 11, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDhcpServerMsgsReceived.setStatus('current')
if mibBuilder.loadTexts: agentDhcpServerMsgsReceived.setDescription('The number of DHCP messages received from a server.')
agentDhcpServerMsgsRelayed = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 11, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDhcpServerMsgsRelayed.setStatus('current')
if mibBuilder.loadTexts: agentDhcpServerMsgsRelayed.setDescription('The number of DHCP messages relayed to a server.')
agentUdpClientMsgsReceived = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 11, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentUdpClientMsgsReceived.setStatus('current')
if mibBuilder.loadTexts: agentUdpClientMsgsReceived.setDescription('The number of UDP messages received from all clients.')
agentUdpClientMsgsRelayed = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 11, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentUdpClientMsgsRelayed.setStatus('current')
if mibBuilder.loadTexts: agentUdpClientMsgsRelayed.setDescription('The number of UDP messages relayed to a server.')
agentSwitchIpHelperAddressTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 11, 8), )
if mibBuilder.loadTexts: agentSwitchIpHelperAddressTable.setStatus('current')
if mibBuilder.loadTexts: agentSwitchIpHelperAddressTable.setDescription('Contains a list of IP helper addresses configured globally.')
agentSwitchIpHelperAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 11, 8, 1), ).setIndexNames((0, "FASTPATH-ROUTING-MIB", "agentSwitchIpHelperAddress"), (0, "FASTPATH-ROUTING-MIB", "agentSwitchIpHelperUdpPort"))
if mibBuilder.loadTexts: agentSwitchIpHelperAddressEntry.setStatus('current')
if mibBuilder.loadTexts: agentSwitchIpHelperAddressEntry.setDescription('An IP Helper address that applies to packets received on any interface.')
agentSwitchIpHelperAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 11, 8, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchIpHelperAddress.setStatus('current')
if mibBuilder.loadTexts: agentSwitchIpHelperAddress.setDescription('The IP Helper address assigned to this interface.')
agentSwitchIpHelperUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 11, 8, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchIpHelperUdpPort.setStatus('current')
if mibBuilder.loadTexts: agentSwitchIpHelperUdpPort.setDescription('UDP port number.')
agentSwitchIpHelperHitCount = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 11, 8, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchIpHelperHitCount.setStatus('current')
if mibBuilder.loadTexts: agentSwitchIpHelperHitCount.setDescription('The number of times a packet has been forwarded or discarded according to this entry.')
agentSwitchIpHelperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 11, 8, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentSwitchIpHelperStatus.setStatus('current')
if mibBuilder.loadTexts: agentSwitchIpHelperStatus.setDescription('Creates a new entry in the global IP Helper address table. Allowed values are: createAndGo(4) - Creates an IP helper entry in this table. destroy(6) - Removes the IP helper entry.')
agentUdpClientMsgsTtlExpired = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 11, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentUdpClientMsgsTtlExpired.setStatus('current')
if mibBuilder.loadTexts: agentUdpClientMsgsTtlExpired.setDescription('The number of UDP messages received with an expired TTL.')
agentUdpClientMsgsDiscarded = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 11, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentUdpClientMsgsDiscarded.setStatus('current')
if mibBuilder.loadTexts: agentUdpClientMsgsDiscarded.setDescription('The number of UDP messages that matched a discard entry.')
agentInternalVlanGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 12))
agentInternalVlanBase = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 12, 1), Integer32().clone(4093)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentInternalVlanBase.setStatus('current')
if mibBuilder.loadTexts: agentInternalVlanBase.setDescription('The VLAN ID internally assigned to the first port-based routing interface.')
agentInternalVlanPolicy = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 12, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ascending", 0), ("descending", 1))).clone('descending')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentInternalVlanPolicy.setStatus('current')
if mibBuilder.loadTexts: agentInternalVlanPolicy.setDescription('Whether to search up or down from the base VLAN ID for a free VLAN ID to assign to a port-based routing interface.')
agentSwitchInternalVlanTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 12, 3), )
if mibBuilder.loadTexts: agentSwitchInternalVlanTable.setStatus('current')
if mibBuilder.loadTexts: agentSwitchInternalVlanTable.setDescription('Contains a list of VLAN IDs used internally for port-based routing interfaces.')
agentSwitchInternalVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 12, 3, 1), ).setIndexNames((0, "FASTPATH-ROUTING-MIB", "agentSwitchInternalVlanId"))
if mibBuilder.loadTexts: agentSwitchInternalVlanEntry.setStatus('current')
if mibBuilder.loadTexts: agentSwitchInternalVlanEntry.setDescription('A VLAN ID internally assigned to a port-based routing interface.')
agentSwitchInternalVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 12, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: agentSwitchInternalVlanId.setStatus('current')
if mibBuilder.loadTexts: agentSwitchInternalVlanId.setDescription('A VLAN ID internally assigned to a port-based routing interface.')
agentSwitchInternalVlanIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 2, 12, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchInternalVlanIfIndex.setStatus('current')
if mibBuilder.loadTexts: agentSwitchInternalVlanIfIndex.setDescription('Interface index of port-based routing interface using this VLAN ID.')
mibBuilder.exportSymbols("FASTPATH-ROUTING-MIB", agentOspfRouteRedistEntry=agentOspfRouteRedistEntry, agentOspfDefaultInfoOriginateMetricType=agentOspfDefaultInfoOriginateMetricType, agentSwitchIpHelperAddressTable=agentSwitchIpHelperAddressTable, agentOspfAsLsdbTable=agentOspfAsLsdbTable, agentSwitchLocalProxyArpMode=agentSwitchLocalProxyArpMode, agentOspfVirtIfAuthKeyId=agentOspfVirtIfAuthKeyId, agentOspfRouteRedistTable=agentOspfRouteRedistTable, agentRipRouteRedistMatchExternal2=agentRipRouteRedistMatchExternal2, agentSwitchIpIcmpEchoReplyMode=agentSwitchIpIcmpEchoReplyMode, agentBootpDhcpRelayForwardingIp=agentBootpDhcpRelayForwardingIp, agentSwitchIpInterfaceProxyARPMode=agentSwitchIpInterfaceProxyARPMode, agentRipRouteRedistMetric=agentRipRouteRedistMetric, agentOspfAreaOpaqueLsdbAge=agentOspfAreaOpaqueLsdbAge, agentOspfRoutePrefIntraArea=agentOspfRoutePrefIntraArea, agentRouterVrrpTrackRtReachable=agentRouterVrrpTrackRtReachable, agentOspfLocalLsdbIpAddress=agentOspfLocalLsdbIpAddress, agentOspfAsLsdbAdvertisement=agentOspfAsLsdbAdvertisement, agentRouterRipRoutePref=agentRouterRipRoutePref, agentOspfVirtIfEntry=agentOspfVirtIfEntry, agentSwitchArpStatus=agentSwitchArpStatus, agentSwitchIpIcmpRedirectsMode=agentSwitchIpIcmpRedirectsMode, fastPathRouting=fastPathRouting, agentOspfOpaqueLsaSupport=agentOspfOpaqueLsaSupport, agentIpHelperAdminMode=agentIpHelperAdminMode, AutoCostRefBw=AutoCostRefBw, agentSwitchHelperAddressTable=agentSwitchHelperAddressTable, agentOspfLocalLsdbAge=agentOspfLocalLsdbAge, agentSwitchIpRoutingMode=agentSwitchIpRoutingMode, agentIpHelperGroup=agentIpHelperGroup, agentRouterVrrpConfigGroup=agentRouterVrrpConfigGroup, agentECMPGroup=agentECMPGroup, agentSwitchSecondaryNetMask=agentSwitchSecondaryNetMask, agentSwitchInternalVlanIfIndex=agentSwitchInternalVlanIfIndex, agentBootpDhcpRelayGroup=agentBootpDhcpRelayGroup, agentOspfAsLsdbEntry=agentOspfAsLsdbEntry, agentRouterVrrpTrackIfPrioDec=agentRouterVrrpTrackIfPrioDec, agentRouterVrrpTrackRtPrioDec=agentRouterVrrpTrackRtPrioDec, agentSwitchIpRouterDiscoveryEntry=agentSwitchIpRouterDiscoveryEntry, agentSwitchSecondaryStatus=agentSwitchSecondaryStatus, agentSwitchIpRouterDiscoveryTable=agentSwitchIpRouterDiscoveryTable, agentSwitchIntfArpEntry=agentSwitchIntfArpEntry, agentSwitchIpVlanEntry=agentSwitchIpVlanEntry, agentRouterRipAutoSummaryMode=agentRouterRipAutoSummaryMode, agentSwitchIpIcmpRateLimitInterval=agentSwitchIpIcmpRateLimitInterval, agentDhcpServerMsgsRelayed=agentDhcpServerMsgsRelayed, agentRouterVrrpConfiguredTable=agentRouterVrrpConfiguredTable, agentRouterVrrpOperTable=agentRouterVrrpOperTable, agentOspfIfIpMtuIgnoreFlag=agentOspfIfIpMtuIgnoreFlag, agentOspfRouteRedistDistListConfigured=agentOspfRouteRedistDistListConfigured, agentOspfAreaOpaqueLsdbRouterId=agentOspfAreaOpaqueLsdbRouterId, agentOspfLocalLsdbSequence=agentOspfLocalLsdbSequence, agentBootpDhcpRelayMaxHopCount=agentBootpDhcpRelayMaxHopCount, agentSwitchArpResponseTime=agentSwitchArpResponseTime, agentOspfRouteRedistMetric=agentOspfRouteRedistMetric, agentDhcpClientMsgsRelayed=agentDhcpClientMsgsRelayed, agentOspfRouteRedistMode=agentOspfRouteRedistMode, agentOspfAsLsdbAge=agentOspfAsLsdbAge, agentRouterVrrpOperEntry=agentRouterVrrpOperEntry, agentSwitchIpInterfaceEntry=agentSwitchIpInterfaceEntry, agentRouterVrrpOperPriority=agentRouterVrrpOperPriority, agentOspfSpfHoldTime=agentOspfSpfHoldTime, agentSwitchInternalVlanEntry=agentSwitchInternalVlanEntry, agentRipRouteRedistMatchNSSAExternal2=agentRipRouteRedistMatchNSSAExternal2, agentSwitchIpGroup=agentSwitchIpGroup, agentOspfAreaOpaqueLsdbAreaId=agentOspfAreaOpaqueLsdbAreaId, agentOspfAreaOpaqueLsdbAdvertisement=agentOspfAreaOpaqueLsdbAdvertisement, agentRouterVrrpTrackRtPfx=agentRouterVrrpTrackRtPfx, agentSwitchInternalVlanTable=agentSwitchInternalVlanTable, agentSwitchLocalProxyArpEntry=agentSwitchLocalProxyArpEntry, agentSwitchIpRouterDiscoveryMinAdvertisementInterval=agentSwitchIpRouterDiscoveryMinAdvertisementInterval, agentRipRouteRedistSource=agentRipRouteRedistSource, agentRouterRipDefaultMetricConfigured=agentRouterRipDefaultMetricConfigured, agentSwitchInternalVlanId=agentSwitchInternalVlanId, agentSwitchIpInterfaceBandwidth=agentSwitchIpInterfaceBandwidth, agentRip2IfConfEntry=agentRip2IfConfEntry, agentOspfAutoCostRefBw=agentOspfAutoCostRefBw, agentRouterVrrpTrackIfState=agentRouterVrrpTrackIfState, agentRip2IfConfAuthKeyId=agentRip2IfConfAuthKeyId, agentSwitchIpInterfaceTable=agentSwitchIpInterfaceTable, agentRouterRipHostRoutesAcceptMode=agentRouterRipHostRoutesAcceptMode, agentOspfDefaultInfoOriginateAlways=agentOspfDefaultInfoOriginateAlways, agentSwitchArpStaticEntryCountMax=agentSwitchArpStaticEntryCountMax, agentSwitchIntfArpAge=agentSwitchIntfArpAge, agentSwitchIpIcmpControlGroup=agentSwitchIpIcmpControlGroup, agentOspfRoutePrefExternal=agentOspfRoutePrefExternal, agentSwitchArpCacheSize=agentSwitchArpCacheSize, agentOspfAsLsdbLsid=agentOspfAsLsdbLsid, agentSwitchArpStaticEntryCountCurrent=agentSwitchArpStaticEntryCountCurrent, agentSwitchHelperIpAddress=agentSwitchHelperIpAddress, agentRipRouteRedistMatchInternal=agentRipRouteRedistMatchInternal, agentSwitchArpTotalEntryCountCurrent=agentSwitchArpTotalEntryCountCurrent, agentSwitchSecondaryAddressTable=agentSwitchSecondaryAddressTable, agentSwitchArpMacAddress=agentSwitchArpMacAddress, agentSwitchIpVlanTable=agentSwitchIpVlanTable, agentRouterOspfConfigGroup=agentRouterOspfConfigGroup, agentOspfAsLsdbRouterId=agentOspfAsLsdbRouterId, agentOspfRouteRedistSubnets=agentOspfRouteRedistSubnets, agentSwitchArpIpAddress=agentSwitchArpIpAddress, agentSwitchIpInterfaceIfIndex=agentSwitchIpInterfaceIfIndex, agentRouterVrrpTrackGroup=agentRouterVrrpTrackGroup, agentSwitchIpHelperAddressEntry=agentSwitchIpHelperAddressEntry, agentSwitchIntfIpHelperHitCount=agentSwitchIntfIpHelperHitCount, agentSwitchIpInterfaceIcmpUnreachables=agentSwitchIpInterfaceIcmpUnreachables, agentSwitchHelperAddressEntry=agentSwitchHelperAddressEntry, agentOspfIfEntry=agentOspfIfEntry, agentSwitchIpRouterDiscoveryAdvertiseMode=agentSwitchIpRouterDiscoveryAdvertiseMode, agentSwitchIpRouterDiscoveryMaxAdvertisementInterval=agentSwitchIpRouterDiscoveryMaxAdvertisementInterval, SpfTimerRange=SpfTimerRange, agentDhcpClientMsgsReceived=agentDhcpClientMsgsReceived, agentSwitchArpDynamicRenew=agentSwitchArpDynamicRenew, agentOspfDefaultMetric=agentOspfDefaultMetric, agentOspfAsLsdbSequence=agentOspfAsLsdbSequence, agentSwitchSecondaryIpAddress=agentSwitchSecondaryIpAddress, agentSwitchIntfArpIpAddress=agentSwitchIntfArpIpAddress, agentInternalVlanGroup=agentInternalVlanGroup, agentSwitchArpInterface=agentSwitchArpInterface, agentRouterRipAdminState=agentRouterRipAdminState, agentRipRouteRedistMode=agentRipRouteRedistMode, agentOspfLocalLsdbEntry=agentOspfLocalLsdbEntry, agentOspfIfAdvertiseSecondaries=agentOspfIfAdvertiseSecondaries, agentOspfVirtIfTable=agentOspfVirtIfTable, agentOspfLocalLsdbType=agentOspfLocalLsdbType, agentRipRouteRedistMatchExternal1=agentRipRouteRedistMatchExternal1, agentSwitchIpHelperUdpPort=agentSwitchIpHelperUdpPort, agentBootpDhcpRelayNumOfRequestsForwarded=agentBootpDhcpRelayNumOfRequestsForwarded, agentSwitchArpAge=agentSwitchArpAge, agentOspfDefaultInfoOriginate=agentOspfDefaultInfoOriginate, agentSwitchIpInterfaceIcmpRedirects=agentSwitchIpInterfaceIcmpRedirects, agentSwitchIpHelperStatus=agentSwitchIpHelperStatus, agentRouterVrrpConfiguredPriority=agentRouterVrrpConfiguredPriority, agentSnmpTrapFlagsConfigGroupLayer3=agentSnmpTrapFlagsConfigGroupLayer3, agentOspfRouteRedistTag=agentOspfRouteRedistTag, agentSwitchIntfArpMacAddress=agentSwitchIntfArpMacAddress, agentSwitchIntfIpHelperAddressTable=agentSwitchIntfIpHelperAddressTable, agentOspfRouteRedistSource=agentOspfRouteRedistSource, agentBootpDhcpRelayNumOfRequestsReceived=agentBootpDhcpRelayNumOfRequestsReceived, agentOspfAreaOpaqueLsdbLsid=agentOspfAreaOpaqueLsdbLsid, agentSwitchIpHelperAddress=agentSwitchIpHelperAddress, agentSwitchIpHelperHitCount=agentSwitchIpHelperHitCount, agentSwitchIpInterfaceNetMask=agentSwitchIpInterfaceNetMask, agentRouterVrrpTrackIntfTable=agentRouterVrrpTrackIntfTable, agentRouterVrrpTrackRtPfxLen=agentRouterVrrpTrackRtPfxLen, agentOspfDefaultMetricConfigured=agentOspfDefaultMetricConfigured, agentOspfLocalLsdbAddressLessIf=agentOspfLocalLsdbAddressLessIf, agentSwitchArpEntry=agentSwitchArpEntry, agentSnmpVRRPAuthFailureTrapFlag=agentSnmpVRRPAuthFailureTrapFlag, agentRipRouteRedistMatchNSSAExternal1=agentRipRouteRedistMatchNSSAExternal1, agentSwitchIpInterfaceMtuValue=agentSwitchIpInterfaceMtuValue, agentDhcpServerMsgsReceived=agentDhcpServerMsgsReceived, agentSwitchIpVlanId=agentSwitchIpVlanId, agentRouterVrrpTrackIfStatus=agentRouterVrrpTrackIfStatus, agentSwitchArpTable=agentSwitchArpTable, agentOspfLocalLsdbRouterId=agentOspfLocalLsdbRouterId, agentRouterRipDefaultMetric=agentRouterRipDefaultMetric, agentECMPOspfMaxPaths=agentECMPOspfMaxPaths, agentOspfLocalLsdbTable=agentOspfLocalLsdbTable, agentSwitchIpInterfaceRoutingMode=agentSwitchIpInterfaceRoutingMode, agentRouterRipConfigGroup=agentRouterRipConfigGroup, agentSwitchArpType=agentSwitchArpType, agentOspfIfTable=agentOspfIfTable, agentSwitchArpGroup=agentSwitchArpGroup, agentSwitchIntfArpStatus=agentSwitchIntfArpStatus, agentRouterVrrpConfiguredEntry=agentRouterVrrpConfiguredEntry, agentOspfDefaultInfoOriginateMetric=agentOspfDefaultInfoOriginateMetric, agentSwitchArpTotalEntryCountPeak=agentSwitchArpTotalEntryCountPeak, agentUdpClientMsgsReceived=agentUdpClientMsgsReceived, agentSwitchIpIcmpRateLimitBurstSize=agentSwitchIpIcmpRateLimitBurstSize, agentVrrpOperations=agentVrrpOperations, agentOspfLocalLsdbLsid=agentOspfLocalLsdbLsid, agentSwitchIpRouterDiscoveryAdvertisementLifetime=agentSwitchIpRouterDiscoveryAdvertisementLifetime, agentOspfIfAuthKeyId=agentOspfIfAuthKeyId, agentOspfDefaultInfoOriginateMetricConfigured=agentOspfDefaultInfoOriginateMetricConfigured, agentInternalVlanBase=agentInternalVlanBase, agentOspfAreaOpaqueLsdbEntry=agentOspfAreaOpaqueLsdbEntry, agentRouterVrrpTrackRouteEntry=agentRouterVrrpTrackRouteEntry, agentRouterVrrpTrackRtStatus=agentRouterVrrpTrackRtStatus, agentUdpClientMsgsTtlExpired=agentUdpClientMsgsTtlExpired, agentOspfSpfDelayTime=agentOspfSpfDelayTime, agentSwitchIpVlanRoutingStatus=agentSwitchIpVlanRoutingStatus, agentRouterOspfRFC1583CompatibilityMode=agentRouterOspfRFC1583CompatibilityMode, agentSwitchIntfArpType=agentSwitchIntfArpType, agentSwitchIntfIpHelperStatus=agentSwitchIntfIpHelperStatus, agentOspfAreaOpaqueLsdbChecksum=agentOspfAreaOpaqueLsdbChecksum, agentSwitchIntfArpTable=agentSwitchIntfArpTable, agentSwitchHelperStatus=agentSwitchHelperStatus, agentBootpDhcpRelayMinWaitTime=agentBootpDhcpRelayMinWaitTime, agentSwitchSecondaryAddressEntry=agentSwitchSecondaryAddressEntry, agentOspfAreaOpaqueLsdbType=agentOspfAreaOpaqueLsdbType, agentSwitchIpRouterDiscoveryIfIndex=agentSwitchIpRouterDiscoveryIfIndex, agentOspfRouteRedistMetricType=agentOspfRouteRedistMetricType, agentSwitchIpRouterDiscoveryAdvertisementAddress=agentSwitchIpRouterDiscoveryAdvertisementAddress, agentSwitchIpVlanIfIndex=agentSwitchIpVlanIfIndex, agentSwitchArpMaxRetries=agentSwitchArpMaxRetries, agentBootpDhcpRelayNumOfDiscards=agentBootpDhcpRelayNumOfDiscards, agentOspfAsLsdbChecksum=agentOspfAsLsdbChecksum, agentRouterRipDefaultInfoOriginate=agentRouterRipDefaultInfoOriginate, agentSwitchIntfArpIfIndex=agentSwitchIntfArpIfIndex, agentRipRouteRedistMetricConfigured=agentRipRouteRedistMetricConfigured, agentRipRouteRedistEntry=agentRipRouteRedistEntry, agentOspfAreaOpaqueLsdbTable=agentOspfAreaOpaqueLsdbTable, agentSwitchIpInterfaceClearIp=agentSwitchIpInterfaceClearIp, agentRouterVrrpTrackIntf=agentRouterVrrpTrackIntf, agentUdpClientMsgsDiscarded=agentUdpClientMsgsDiscarded, agentRouterVrrpTrackIntfEntry=agentRouterVrrpTrackIntfEntry, agentBootpDhcpRelayCircuitIdOptionMode=agentBootpDhcpRelayCircuitIdOptionMode, agentRip2IfConfTable=agentRip2IfConfTable, agentOspfAsLsdbType=agentOspfAsLsdbType, agentRipRouteRedistTable=agentRipRouteRedistTable, agentOspfRouteRedistDistList=agentOspfRouteRedistDistList, agentOspfIfPassiveMode=agentOspfIfPassiveMode, agentBootpDhcpRelayForwardMode=agentBootpDhcpRelayForwardMode, agentSwitchArpAgeoutTime=agentSwitchArpAgeoutTime, agentOspfAreaOpaqueLsdbSequence=agentOspfAreaOpaqueLsdbSequence, agentOspfLocalLsdbChecksum=agentOspfLocalLsdbChecksum, agentSwitchIpInterfaceUnnumberedIfIndex=agentSwitchIpInterfaceUnnumberedIfIndex, PYSNMP_MODULE_ID=fastPathRouting, agentRouterVrrpTrackRouteTable=agentRouterVrrpTrackRouteTable, agentSwitchIntfIpHelperIpAddress=agentSwitchIntfIpHelperIpAddress, agentOspfDefaultPassiveMode=agentOspfDefaultPassiveMode, agentSwitchIntfIpHelperDiscard=agentSwitchIntfIpHelperDiscard, agentRouterRipSplitHorizonMode=agentRouterRipSplitHorizonMode, agentOspfRoutePrefInterArea=agentOspfRoutePrefInterArea, agentSwitchIpInterfaceIpAddress=agentSwitchIpInterfaceIpAddress, agentUdpClientMsgsRelayed=agentUdpClientMsgsRelayed, agentRouterVrrpAdminState=agentRouterVrrpAdminState, agentSwitchIpRouterDiscoveryPreferenceLevel=agentSwitchIpRouterDiscoveryPreferenceLevel, agentSwitchLocalProxyArpTable=agentSwitchLocalProxyArpTable, agentSnmpVRRPNewMasterTrapFlag=agentSnmpVRRPNewMasterTrapFlag, agentSwitchIntfIpHelperAddressEntry=agentSwitchIntfIpHelperAddressEntry, agentOspfRouteRedistMetricConfigured=agentOspfRouteRedistMetricConfigured, agentInternalVlanPolicy=agentInternalVlanPolicy, agentRipRouteRedistDistList=agentRipRouteRedistDistList, agentOspfLocalLsdbAdvertisement=agentOspfLocalLsdbAdvertisement, agentSwitchIntfIpHelperUdpPort=agentSwitchIntfIpHelperUdpPort, agentRipRouteRedistDistListConfigured=agentRipRouteRedistDistListConfigured)
