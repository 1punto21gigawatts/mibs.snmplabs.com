#
# PySNMP MIB module CADANT-CMTS-PACKETCABLE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CADANT-CMTS-PACKETCABLE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:45:18 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint")
cadIfCmtsCardNumber, = mibBuilder.importSymbols("CADANT-CMTS-DOWNCHANNEL-MIB", "cadIfCmtsCardNumber")
cadOvSysCpuStatus, = mibBuilder.importSymbols("CADANT-CMTS-PROCESS-MIB", "cadOvSysCpuStatus")
cadCable, = mibBuilder.importSymbols("CADANT-PRODUCTS-MIB", "cadCable")
AdminState, CardId = mibBuilder.importSymbols("CADANT-TC", "AdminState", "CardId")
IfDirection, = mibBuilder.importSymbols("DOCS-QOS3-MIB", "IfDirection")
InterfaceIndex, ifIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "ifIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Unsigned32, Counter32, Counter64, NotificationType, MibIdentifier, TimeTicks, Gauge32, Integer32, IpAddress, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Unsigned32", "Counter32", "Counter64", "NotificationType", "MibIdentifier", "TimeTicks", "Gauge32", "Integer32", "IpAddress", "ModuleIdentity")
TextualConvention, TruthValue, DisplayString, TimeStamp, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "DisplayString", "TimeStamp", "RowStatus")
cadPCMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 4998, 1, 1, 115))
cadPCMIB.setRevisions(('2015-12-21 00:00', '2011-08-04 00:00', '2011-07-26 00:00', '2009-02-26 00:00', '2007-11-12 00:00', '2007-10-24 00:00', '2007-09-06 00:00', '2005-08-10 00:00', '2005-05-16 00:00', '2004-11-10 00:00', '2004-10-04 00:00', '2004-02-19 00:00', '2004-02-18 00:00', '2004-02-15 00:00', '2003-09-04 00:00', '2003-07-28 00:00', '2003-05-20 00:00', '2002-08-26 00:00', '2001-07-24 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: cadPCMIB.setRevisionsDescriptions(('Add cadPCPEPIDHostname', 'Replace cerCardId with cadPCCardId in cadPCCAMEntry. Replace cerCardId with cadPCConnRateOverloadRejCardId in cadPCConnRateOverloadRejEntry.', 'Replace cardId with cerCardId', 'For DQOS1.5-N-06.0339-4, added cadPCSendSubId.', 'Removed cadPCAuthModuleEnabled. No longer needed in R7.0. For I-CMTS, added cadPCCAMCblMacTable for populating 12U cards', 'Move from cadExperimental tree to cadCable in the hierarchy', 'Replace DOCS-QOS-MIB with DOCS-QOS3-MIB', 'Add admission control for PacketCable MultiMedia.', 'For bug 68227, added gateReportState to CadPCGateCtlCountEntry opcodes. Steve Nolle', 'Add MIB entries for improved deployment troubleshooting (phase 1)', 'Obsoleting cadPCMaxOverloadCalls, cadPCMaxYellowOverloadCalls, and cadPCMaxRedOverloadCalls and replacing them with cadPCMaxOverloadGateMsgs, cadPCMaxYellowOverloadGateMsgs, and cadPCMaxRedOverloadGateMsgs.', 'Change defaults to match those in down/up channel mibs.', 'Change preemption default to true.', 'Rename some variables to support setting channel default values from the global settings.', 'Add cadPCMaxRedOverloadDSaCalls, cadPCMaxYellowOverloadDSaCalls, and cadPCMaxOverloadDSaCalls -- by Brian Barker', 'Add cadPCMaxRedOverloadCalls, cadPCMaxYellowOverloadCalls, and cadPCMaxOverloadCalls -- by Steve Nolle', 'Add cadPCAdminState, obsoleted cadPCMixedDQoSFlag', 'Put cadPCAuthModuleEnabled into a table to make it per-CAM', 'Original Version',))
if mibBuilder.loadTexts: cadPCMIB.setLastUpdated('201512210000Z')
if mibBuilder.loadTexts: cadPCMIB.setOrganization('Arris Internaional')
if mibBuilder.loadTexts: cadPCMIB.setContactInfo('Kathy Ashe')
if mibBuilder.loadTexts: cadPCMIB.setDescription('PacketCable general-purpose management MIB. This MIB contains objects which are specific to PacketCable but not covered in any of the more-specialized MIBS.')
class CadPCAnomalyCode(TextualConvention, Integer32):
    description = 'Corresponds to the PacketCable Reason and PacketCable Error codes documented in PKT-SP-DQOS-I06-030415. To get index for PacketCable Error, mask off the low-order 16-bit Error Sub-code. The PacketCable Reasons match the combination Reason-Code and Reason Sub-code. Normal operation is not pegged and therefor is not included below.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 127, 65535, 65537, 65538, 65539, 65540, 65541, 65542, 65543, 65663, 131072, 196608, 262144, 327680, 393216, 458752, 8323072))
    namedValues = NamedValues(("deletedLocalGateCoordinationFailure", 1), ("deletedRemoteGateCoordinationFailure", 2), ("deletedRevokedAuthorization", 3), ("deletedUnexpectedGateOpen", 4), ("deletedLocalGateCloseFailure", 5), ("deletedUnknownReason", 127), ("failedNoGatesAvailable", 65535), ("closedPreemptionOfResources", 65537), ("closedLackOfReservationMaintenance", 65538), ("closedMTADeregistration", 65539), ("closedTimerT0Expiry", 65540), ("closedTimerT1Rxpiry", 65541), ("closedTimerT7Rxpiry", 65542), ("closedTimerT8Rxpiry", 65543), ("closedUnknownReason", 65663), ("failedUnknownGateId", 131072), ("failedIllegalSessionClassValue", 196608), ("failedMTAExceededGateLimit", 262144), ("failedGateAlreadySet", 327680), ("failedMissingRequiredObject", 393216), ("failedInvalidObject", 458752), ("failedUnknownReason", 8323072))

class CadPCAdmCtlPriority(TextualConvention, Integer32):
    description = 'Symbolic description of CAC priority levels for PacketCable sessions. Note that the MIB values are one greater than the Session Class priority values defined in the PacketCable MultiMedia Specification.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("eightPriority", 1), ("seventhPriority", 2), ("sixthPriority", 3), ("fifthPriority", 4), ("fourthPriority", 5), ("thirdPriority", 6), ("secondPriority", 7), ("firstPriority", 8))

cadPCMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4998, 1, 1, 115, 1))
cadPCMibBase = MibIdentifier((1, 3, 6, 1, 4, 1, 4998, 1, 1, 115, 1, 1))
cadPCPreemptionAllowed = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 115, 1, 1, 3), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadPCPreemptionAllowed.setStatus('current')
if mibBuilder.loadTexts: cadPCPreemptionAllowed.setDescription('Indicates whether the system will preempt another session for an emergency call.')
cadPCUpNormAllowedUsage = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 115, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(50)).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadPCUpNormAllowedUsage.setReference('Cadant CMTS Requirements for PacketCable requirement 3.3.3.0.2')
if mibBuilder.loadTexts: cadPCUpNormAllowedUsage.setStatus('current')
if mibBuilder.loadTexts: cadPCUpNormAllowedUsage.setDescription('Maximum percentage of upstream resources that may be used by non-emergency telephony services. This is also the maximum amount of resources non-exclusively allocated to sessions of this type')
cadPCUpNormResUsage = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 115, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadPCUpNormResUsage.setReference("'Cadant CMTS Requirements for PacketCable' requirement 3.3.3.0.2")
if mibBuilder.loadTexts: cadPCUpNormResUsage.setStatus('current')
if mibBuilder.loadTexts: cadPCUpNormResUsage.setDescription('Minimum percentage of upstream resources that may be used by non-emergency telephony services. This is also the maximum amount of resources exclusively allocated to sessions of this type. If the value of this object is non-zero, then a portion of the upstream bandwidth will be set aside for normal telephony use only - reducing the bandwidth that is available for normal data.')
cadPCUpEmerAllowedUsage = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 115, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(70)).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadPCUpEmerAllowedUsage.setReference('Cadant CMTS Requirements for PacketCable requirement 3.3.3.0.2')
if mibBuilder.loadTexts: cadPCUpEmerAllowedUsage.setStatus('current')
if mibBuilder.loadTexts: cadPCUpEmerAllowedUsage.setDescription('Maximum percentage of upstream resources that may be used by emergency telephony services.')
cadPCUpEmerResUsage = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 115, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadPCUpEmerResUsage.setReference("'Cadant CMTS Requirements for PacketCable' requirement 3.3.3.0.2")
if mibBuilder.loadTexts: cadPCUpEmerResUsage.setStatus('current')
if mibBuilder.loadTexts: cadPCUpEmerResUsage.setDescription('Minimum percentage of upstream resources that may be used by emergency telephony services. If the value of this object is non-zero, then a portion of the upstream bandwidth will be set aside for emercency telephony use only - reducing the bandwidth that is available for normal data.')
cadPCDownNormAllowedUsage = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 115, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(50)).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadPCDownNormAllowedUsage.setReference("'Cadant CMTS Requirements for PacketCable' requirement 3.3.3.0.2")
if mibBuilder.loadTexts: cadPCDownNormAllowedUsage.setStatus('current')
if mibBuilder.loadTexts: cadPCDownNormAllowedUsage.setDescription('Maximum percentage of downstream resources that may be used by non-emergency telephony services. This is also the maximum amount of resources non-exclusively allocated to sessions of this type')
cadPCDownNormResUsage = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 115, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadPCDownNormResUsage.setReference("'Cadant CMTS Requirements for PacketCable' requirement 3.3.3.0.2")
if mibBuilder.loadTexts: cadPCDownNormResUsage.setStatus('current')
if mibBuilder.loadTexts: cadPCDownNormResUsage.setDescription('Minimum percentage of downstream resources that may be used by non-emergency telephony services. This is also the maximum amount of resources exclusively allocated to sessions of this type. If the value of this object is non-zero, then a portion of the upstream bandwidth will be set aside for normal telephony use only - reducing the bandwidth that is available for normal data.')
cadPCDownEmerAllowedUsage = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 115, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(70)).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadPCDownEmerAllowedUsage.setReference("'Cadant CMTS Requirements for PacketCable' requirement 3.3.3.0.2")
if mibBuilder.loadTexts: cadPCDownEmerAllowedUsage.setStatus('current')
if mibBuilder.loadTexts: cadPCDownEmerAllowedUsage.setDescription('Maximum percentage of downstream resources that may be used by emergency telephony services.')
cadPCDownEmerResUsage = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 115, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadPCDownEmerResUsage.setReference("'Cadant CMTS Requirements for PacketCable' requirement 3.3.3.0.2")
if mibBuilder.loadTexts: cadPCDownEmerResUsage.setStatus('current')
if mibBuilder.loadTexts: cadPCDownEmerResUsage.setDescription('Minimum percentage of downstream resources that may be used by emergency telephony services. If the value of this object is non-zero, then a portion of the upstream bandwidth will be set aside for normal telephony use only - reducing the bandwidth that is available for normal data.')
cadPCCAMTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 115, 1, 1, 12), )
if mibBuilder.loadTexts: cadPCCAMTable.setStatus('current')
if mibBuilder.loadTexts: cadPCCAMTable.setDescription('Table of Per-CAM PacketCable Data for 2D12U only')
cadPCCAMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 115, 1, 1, 12, 1), ).setIndexNames((0, "CADANT-CMTS-PACKETCABLE-MIB", "cadPCCardId"))
if mibBuilder.loadTexts: cadPCCAMEntry.setStatus('current')
if mibBuilder.loadTexts: cadPCCAMEntry.setDescription('This entry contains all of the PacketCable data that is to be managed on a per-CAM basis.')
cadFreeDSxAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 115, 1, 1, 12, 1, 1), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadFreeDSxAllowed.setStatus('current')
if mibBuilder.loadTexts: cadFreeDSxAllowed.setDescription('Indicates whether the authorization module will allow a DOCSIS MAC Messaging Dynamic Services request (DSx) without a gate-ID in an authorization block.')
cadPCMaxOverloadDSaCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 115, 1, 1, 12, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000)).clone(10000)).setUnits('connections per 10 seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadPCMaxOverloadDSaCalls.setStatus('current')
if mibBuilder.loadTexts: cadPCMaxOverloadDSaCalls.setDescription('the max number of connections we will allow per 10 second interval when the system cpu is in a normal condition, i.e. no overload.')
cadPCMaxYellowOverloadDSaCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 115, 1, 1, 12, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000)).clone(10000)).setUnits('connections per 10 seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadPCMaxYellowOverloadDSaCalls.setStatus('current')
if mibBuilder.loadTexts: cadPCMaxYellowOverloadDSaCalls.setDescription('the max number of connections we will allow per 10 second interval when the system cpu is in a yellow overload condition.')
cadPCMaxRedOverloadDSaCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 115, 1, 1, 12, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000)).clone(3000)).setUnits('connections per 10 seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadPCMaxRedOverloadDSaCalls.setStatus('current')
if mibBuilder.loadTexts: cadPCMaxRedOverloadDSaCalls.setDescription('the max number of connections we will allow per 10 second interval when the system cpu is in a red overload condition.')
cadPCCardId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 115, 1, 1, 12, 1, 5), CardId())
if mibBuilder.loadTexts: cadPCCardId.setStatus('current')
if mibBuilder.loadTexts: cadPCCardId.setDescription('The unique id of this card within the shelf.')
cadPCAdminState = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 115, 1, 1, 13), AdminState().clone('down')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadPCAdminState.setStatus('current')
if mibBuilder.loadTexts: cadPCAdminState.setDescription('The administrative state of PacketCable services on the CMTS.')
cadPCMaxOverloadCalls = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 115, 1, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000)).clone(450)).setUnits('connections per 10 seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadPCMaxOverloadCalls.setStatus('obsolete')
if mibBuilder.loadTexts: cadPCMaxOverloadCalls.setDescription('the max number of connections we will allow per 10 second interval when the system cpu is in a normal condition, i.e. no overload.')
cadPCMaxYellowOverloadCalls = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 115, 1, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000)).clone(450)).setUnits('connections per 10 seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadPCMaxYellowOverloadCalls.setStatus('obsolete')
if mibBuilder.loadTexts: cadPCMaxYellowOverloadCalls.setDescription('the max number of connections we will allow per 10 second interval when the system cpu is in a yellow overload condition.')
cadPCMaxRedOverloadCalls = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 115, 1, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000)).clone(41)).setUnits('connections per 10 seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadPCMaxRedOverloadCalls.setStatus('obsolete')
if mibBuilder.loadTexts: cadPCMaxRedOverloadCalls.setDescription('the max number of connections we will allow per 10 second interval when the system cpu is in a red overload condition.')
cadPCDownTotalAllowedUsage = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 115, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(70)).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadPCDownTotalAllowedUsage.setReference("'Cadant CMTS Requirements for PacketCable' requirement 3.3.3.0.2")
if mibBuilder.loadTexts: cadPCDownTotalAllowedUsage.setStatus('current')
if mibBuilder.loadTexts: cadPCDownTotalAllowedUsage.setDescription('Maximum percentage of downstream resources that may be used by both normal and emergency telephony services.')
cadPCUpTotalAllowedUsage = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 115, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(70)).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadPCUpTotalAllowedUsage.setReference("'Cadant CMTS Requirements for PacketCable' requirement 3.3.3.0.2")
if mibBuilder.loadTexts: cadPCUpTotalAllowedUsage.setStatus('current')
if mibBuilder.loadTexts: cadPCUpTotalAllowedUsage.setDescription('Maximum percentage of upstream resources that may be used by both normal and emergency telephony services.')
cadPCMaxOverloadGateMsgs = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 115, 1, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000)).clone(900)).setUnits('gate messages per 10 seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadPCMaxOverloadGateMsgs.setStatus('current')
if mibBuilder.loadTexts: cadPCMaxOverloadGateMsgs.setDescription('the max number of gate messages that the system will process per 10 second interval when the system cpu is in a normal condition, i.e. no overload.')
cadPCMaxYellowOverloadGateMsgs = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 115, 1, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000)).clone(900)).setUnits('gate messages per 10 seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadPCMaxYellowOverloadGateMsgs.setStatus('current')
if mibBuilder.loadTexts: cadPCMaxYellowOverloadGateMsgs.setDescription('the max number of gate messages that the system will process per 10 second interval when the system cpu is in a yellow overload condition.')
cadPCMaxRedOverloadGateMsgs = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 115, 1, 1, 21), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000)).clone(300)).setUnits('gate messages per 10 seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadPCMaxRedOverloadGateMsgs.setStatus('current')
if mibBuilder.loadTexts: cadPCMaxRedOverloadGateMsgs.setDescription('the max number of gate messages that the system will process per 10 second interval when the system cpu is in a red overload condition.')
cadPCClearGateCounts = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 115, 1, 1, 25), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadPCClearGateCounts.setStatus('current')
if mibBuilder.loadTexts: cadPCClearGateCounts.setDescription('set to true to clear the gate counts, always false when read')
cadPCClearAnomalyCounts = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 115, 1, 1, 26), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadPCClearAnomalyCounts.setStatus('current')
if mibBuilder.loadTexts: cadPCClearAnomalyCounts.setDescription('set to true to clear the anomaly counts, always false when read')
cadPCClearConnRateOverloadCounts = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 115, 1, 1, 27), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadPCClearConnRateOverloadCounts.setStatus('current')
if mibBuilder.loadTexts: cadPCClearConnRateOverloadCounts.setDescription('set to true to clear the connection rate overload counts, always false when read')
cadPCClearEvMsgCounts = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 115, 1, 1, 28), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadPCClearEvMsgCounts.setStatus('current')
if mibBuilder.loadTexts: cadPCClearEvMsgCounts.setDescription('set to true to clear the event messaging counts, always false when read')
cadPCClearCopsCounts = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 115, 1, 1, 29), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadPCClearCopsCounts.setStatus('current')
if mibBuilder.loadTexts: cadPCClearCopsCounts.setDescription('set to true to clear the COPS counts, always false when read')
cadPCClearGateCtlCounts = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 115, 1, 1, 30), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadPCClearGateCtlCounts.setStatus('current')
if mibBuilder.loadTexts: cadPCClearGateCtlCounts.setDescription('set to true to clear the gate control counts, always false when read')
cadPCMibGateCounts = MibIdentifier((1, 3, 6, 1, 4, 1, 4998, 1, 1, 115, 1, 1, 40))
cadPCTotalGateCount = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 115, 1, 1, 40, 1), Counter32()).setUnits('gates').setMaxAccess("readonly")
if mibBuilder.loadTexts: cadPCTotalGateCount.setReference("'C4 Product Specification Agreement: PacketCable Deployment Tools on the C4 CMTS' requirement 2.3.1.2-30")
if mibBuilder.loadTexts: cadPCTotalGateCount.setStatus('current')
if mibBuilder.loadTexts: cadPCTotalGateCount.setDescription('Total number of gates that have been created since the last reboot of the system or since the last time that this counter was manually reset.')
cadPCGateAllocatedStateCount = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 115, 1, 1, 40, 2), Counter32()).setUnits('gates').setMaxAccess("readonly")
if mibBuilder.loadTexts: cadPCGateAllocatedStateCount.setReference("'C4 Product Specification Agreement: PacketCable Deployment Tools on the C4 CMTS' requirement 2.3.1.2-40")
if mibBuilder.loadTexts: cadPCGateAllocatedStateCount.setStatus('current')
if mibBuilder.loadTexts: cadPCGateAllocatedStateCount.setDescription('Total number of gates that are currently in the ALLOCATED state')
cadPCGateAuthorizedStateCount = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 115, 1, 1, 40, 3), Counter32()).setUnits('gates').setMaxAccess("readonly")
if mibBuilder.loadTexts: cadPCGateAuthorizedStateCount.setReference("'C4 Product Specification Agreement: PacketCable Deployment Tools on the C4 CMTS' requirement 2.3.1.2-40")
if mibBuilder.loadTexts: cadPCGateAuthorizedStateCount.setStatus('current')
if mibBuilder.loadTexts: cadPCGateAuthorizedStateCount.setDescription('Total number of gates that are currently in the AUTHORIZED state')
cadPCGateReservedStateCount = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 115, 1, 1, 40, 4), Counter32()).setUnits('gates').setMaxAccess("readonly")
if mibBuilder.loadTexts: cadPCGateReservedStateCount.setReference("'C4 Product Specification Agreement: PacketCable Deployment Tools on the C4 CMTS' requirement 2.3.1.2-40")
if mibBuilder.loadTexts: cadPCGateReservedStateCount.setStatus('current')
if mibBuilder.loadTexts: cadPCGateReservedStateCount.setDescription('Total number of gates that are currently in the RESERVED state')
cadPCGateCommittedStateCount = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 115, 1, 1, 40, 5), Counter32()).setUnits('gates').setMaxAccess("readonly")
if mibBuilder.loadTexts: cadPCGateCommittedStateCount.setReference("'C4 Product Specification Agreement: PacketCable Deployment Tools on the C4 CMTS' requirement 2.3.1.2-40")
if mibBuilder.loadTexts: cadPCGateCommittedStateCount.setStatus('current')
if mibBuilder.loadTexts: cadPCGateCommittedStateCount.setDescription('Total number of gates that are currently in the COMMITTED state')
cadPCGateLastCleared = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 115, 1, 1, 40, 6), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadPCGateLastCleared.setStatus('current')
if mibBuilder.loadTexts: cadPCGateLastCleared.setDescription('The value of sysUptime when the gate counts were last cleared.')
cadPCAnomalyCountTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 115, 1, 1, 45), )
if mibBuilder.loadTexts: cadPCAnomalyCountTable.setReference("'C4 Product Specification Agreement: PacketCable Deployment Tools on the C4 CMTS' requirement 2.3.1.2-50")
if mibBuilder.loadTexts: cadPCAnomalyCountTable.setStatus('current')
if mibBuilder.loadTexts: cadPCAnomalyCountTable.setDescription('Table of anomaly counts')
cadPCAnomalyCountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 115, 1, 1, 45, 1), ).setIndexNames((0, "CADANT-CMTS-PACKETCABLE-MIB", "cadPCAnomalyCode"))
if mibBuilder.loadTexts: cadPCAnomalyCountEntry.setStatus('current')
if mibBuilder.loadTexts: cadPCAnomalyCountEntry.setDescription('Entry of anomaly counts')
cadPCAnomalyCode = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 115, 1, 1, 45, 1, 1), CadPCAnomalyCode())
if mibBuilder.loadTexts: cadPCAnomalyCode.setReference("'C4 Product Specification Agreement: PacketCable Deployment Tools on the C4 CMTS' requirement 2.3.1.2-50")
if mibBuilder.loadTexts: cadPCAnomalyCode.setStatus('current')
if mibBuilder.loadTexts: cadPCAnomalyCode.setDescription('PacketCable anomaly code')
cadPCAnomalyCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 115, 1, 1, 45, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadPCAnomalyCount.setReference("'C4 Product Specification Agreement: PacketCable Deployment Tools on the C4 CMTS' requirement 2.3.1.2-50")
if mibBuilder.loadTexts: cadPCAnomalyCount.setStatus('current')
if mibBuilder.loadTexts: cadPCAnomalyCount.setDescription('Count of anomalies of the corresponding type that have occurred since boot or since the last manual reset of this count.')
cadPCAnomalyLastCleared = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 115, 1, 1, 46), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadPCAnomalyLastCleared.setStatus('current')
if mibBuilder.loadTexts: cadPCAnomalyLastCleared.setDescription('The value of sysUptime when the anomaly counts were last cleared.')
cadPCSendSubId = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 115, 1, 1, 47), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadPCSendSubId.setStatus('current')
if mibBuilder.loadTexts: cadPCSendSubId.setDescription('Indicates whether the C4 will send a subscriber ID in every DQoS gate-open and gate-close message. This is provisioned per-CMTS. ECN DQOS1.5-N-06.0339-4')
cadPCConnRateReqHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 115, 1, 1, 50), )
if mibBuilder.loadTexts: cadPCConnRateReqHistoryTable.setReference("'C4 Product Specification Agreement: PacketCable Deployment Tools on the C4 CMTS' requirement 2.3.1.2-60, 2.3.1.2-65")
if mibBuilder.loadTexts: cadPCConnRateReqHistoryTable.setStatus('current')
if mibBuilder.loadTexts: cadPCConnRateReqHistoryTable.setDescription('Table of connection request rate history')
cadPCConnRateReqHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 115, 1, 1, 50, 1), ).setIndexNames((0, "CADANT-CMTS-PACKETCABLE-MIB", "cadPCConnRateReqHistoryTimeStamp"))
if mibBuilder.loadTexts: cadPCConnRateReqHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: cadPCConnRateReqHistoryEntry.setDescription('Entry of connection request rate')
cadPCConnRateReqHistoryTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 115, 1, 1, 50, 1, 1), TimeStamp())
if mibBuilder.loadTexts: cadPCConnRateReqHistoryTimeStamp.setReference("'C4 Product Specification Agreement: PacketCable Deployment Tools on the C4 CMTS' requirement 2.3.1.2-60, 2.3.1.2-65")
if mibBuilder.loadTexts: cadPCConnRateReqHistoryTimeStamp.setStatus('current')
if mibBuilder.loadTexts: cadPCConnRateReqHistoryTimeStamp.setDescription('Value of sysUpTime (rounded down to the nearest second) when this entry was created')
cadPCConnRateReqHistoryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 115, 1, 1, 50, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadPCConnRateReqHistoryCount.setReference("'C4 Product Specification Agreement: PacketCable Deployment Tools on the C4 CMTS' requirement 2.3.1.2-60, 2.3.1.2-65")
if mibBuilder.loadTexts: cadPCConnRateReqHistoryCount.setStatus('current')
if mibBuilder.loadTexts: cadPCConnRateReqHistoryCount.setDescription('Count of connection requests (gates) made during the second')
cadPCConnReqMaxHistRate = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 115, 1, 1, 51), Counter32()).setUnits('gates').setMaxAccess("readonly")
if mibBuilder.loadTexts: cadPCConnReqMaxHistRate.setReference("'C4 Product Specification Agreement: PacketCable Deployment Tools on the C4 CMTS' requirement 2.3.1.2-60")
if mibBuilder.loadTexts: cadPCConnReqMaxHistRate.setStatus('current')
if mibBuilder.loadTexts: cadPCConnReqMaxHistRate.setDescription('Maximum value of any cadPCConnReqRateCount since system boot or reset of this value.')
cadPCConnRateOverloadRejTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 115, 1, 1, 55), )
if mibBuilder.loadTexts: cadPCConnRateOverloadRejTable.setReference("'C4 Product Specification Agreement: PacketCable Deployment Tools on the C4 CMTS' requirement 2.3.1.2-70")
if mibBuilder.loadTexts: cadPCConnRateOverloadRejTable.setStatus('current')
if mibBuilder.loadTexts: cadPCConnRateOverloadRejTable.setDescription('Table of Per-card rate overload reject connection counts')
cadPCConnRateOverloadRejEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 115, 1, 1, 55, 1), ).setIndexNames((0, "CADANT-CMTS-PACKETCABLE-MIB", "cadPCConnRateOverloadRejCardId"), (0, "CADANT-CMTS-PROCESS-MIB", "cadOvSysCpuStatus"))
if mibBuilder.loadTexts: cadPCConnRateOverloadRejEntry.setStatus('current')
if mibBuilder.loadTexts: cadPCConnRateOverloadRejEntry.setDescription('This entry contains the connection rate overload rejection counts.')
cadPCConnRateOverloadRejCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 115, 1, 1, 55, 1, 1), Counter32()).setUnits('connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: cadPCConnRateOverloadRejCount.setReference("'C4 Product Specification Agreement: PacketCable Deployment Tools on the C4 CMTS' requirement 2.3.1.2-70")
if mibBuilder.loadTexts: cadPCConnRateOverloadRejCount.setStatus('current')
if mibBuilder.loadTexts: cadPCConnRateOverloadRejCount.setDescription('Number of connections that have been rejected as a result of rate overload protection while the system is in the corresponding system-wide overload state since the last system reboot or since the last time that this counter was reset.')
cadPCConnRateOverloadRejCardId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 115, 1, 1, 55, 1, 2), CardId())
if mibBuilder.loadTexts: cadPCConnRateOverloadRejCardId.setStatus('current')
if mibBuilder.loadTexts: cadPCConnRateOverloadRejCardId.setDescription('The unique id of this card within the shelf.')
cadPCConnRateOverloadLastCleared = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 115, 1, 1, 56), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadPCConnRateOverloadLastCleared.setStatus('current')
if mibBuilder.loadTexts: cadPCConnRateOverloadLastCleared.setDescription('The value of sysUptime when the connection rate overload counts were last cleared.')
cadPCEvMsgCountTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 115, 1, 1, 60), )
if mibBuilder.loadTexts: cadPCEvMsgCountTable.setStatus('current')
if mibBuilder.loadTexts: cadPCEvMsgCountTable.setDescription('Table of counts of event messages that have been transmitted to each RKS or DF (for Electronic Surveillance Call Data) server')
cadPCEvMsgCountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 115, 1, 1, 60, 1), ).setIndexNames((0, "CADANT-CMTS-PACKETCABLE-MIB", "cadPCEvMsgCountServer"), (0, "CADANT-CMTS-PACKETCABLE-MIB", "cadPCEvMsgServerIsDF"))
if mibBuilder.loadTexts: cadPCEvMsgCountEntry.setStatus('current')
if mibBuilder.loadTexts: cadPCEvMsgCountEntry.setDescription('This entry contains counts of event messages that have been transmitted')
cadPCEvMsgCountServer = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 115, 1, 1, 60, 1, 1), IpAddress())
if mibBuilder.loadTexts: cadPCEvMsgCountServer.setStatus('current')
if mibBuilder.loadTexts: cadPCEvMsgCountServer.setDescription('IP address of RKS or DF server')
cadPCEvMsgServerIsDF = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 115, 1, 1, 60, 1, 2), TruthValue().clone('false'))
if mibBuilder.loadTexts: cadPCEvMsgServerIsDF.setReference("'C4 Product Specification Agreement: PacketCable Deployment Tools on the C4 CMTS' requirement 2.3.1.2-100")
if mibBuilder.loadTexts: cadPCEvMsgServerIsDF.setStatus('current')
if mibBuilder.loadTexts: cadPCEvMsgServerIsDF.setDescription('Indicator of type of server. Set to true(1) if server is a delivery function server.')
cadPCEvMsgType = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 115, 1, 1, 60, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(7, 8, 17, 19, 9999))).clone(namedValues=NamedValues(("qos-reserve", 7), ("qos-release", 8), ("time-change", 17), ("qos-commit", 19), ("total-packets", 9999)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadPCEvMsgType.setReference("'PacketCable Event Messages Specification: PKT-SP-EM-I07-030815'; 'C4 Product Specification Agreement: PacketCable Deployment Tools on the C4 CMTS' requirement 2.3.1.2-100")
if mibBuilder.loadTexts: cadPCEvMsgType.setStatus('current')
if mibBuilder.loadTexts: cadPCEvMsgType.setDescription('Type of message being counted. These map directly to the event message opcodes in the Event Messaging reference')
cadPCEvMsgCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 115, 1, 1, 60, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadPCEvMsgCount.setReference("'C4 Product Specification Agreement: PacketCable Deployment Tools on the C4 CMTS' requirement 2.3.1.2-100")
if mibBuilder.loadTexts: cadPCEvMsgCount.setStatus('current')
if mibBuilder.loadTexts: cadPCEvMsgCount.setDescription('Count of rejected connections due to channel bandwidth congestion since boot or since the last manual reset of this count.')
cadPCEvMsgCountLastCleared = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 115, 1, 1, 61), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadPCEvMsgCountLastCleared.setStatus('current')
if mibBuilder.loadTexts: cadPCEvMsgCountLastCleared.setDescription('The value of sysUptime when the event messaging counts were last cleared.')
cadPCCopsCountTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 115, 1, 1, 65), )
if mibBuilder.loadTexts: cadPCCopsCountTable.setStatus('current')
if mibBuilder.loadTexts: cadPCCopsCountTable.setDescription('Table of counts of event messages that have been sent to or received from each server.')
cadPCCopsCountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 115, 1, 1, 65, 1), ).setIndexNames((0, "CADANT-CMTS-PACKETCABLE-MIB", "cadPCCopsServer"), (0, "CADANT-CMTS-PACKETCABLE-MIB", "cadPCCopsDirection"), (0, "CADANT-CMTS-PACKETCABLE-MIB", "cadPCCopsOpcode"))
if mibBuilder.loadTexts: cadPCCopsCountEntry.setStatus('current')
if mibBuilder.loadTexts: cadPCCopsCountEntry.setDescription('This entry contains counts of COPS messages.')
cadPCCopsServer = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 115, 1, 1, 65, 1, 1), IpAddress())
if mibBuilder.loadTexts: cadPCCopsServer.setStatus('current')
if mibBuilder.loadTexts: cadPCCopsServer.setDescription('IP address of CMS or PS server')
cadPCCopsDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 115, 1, 1, 65, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("receive", 1), ("transmit", 2))))
if mibBuilder.loadTexts: cadPCCopsDirection.setStatus('current')
if mibBuilder.loadTexts: cadPCCopsDirection.setDescription('direction of message flow from viewpoint of the CMTS')
cadPCCopsOpcode = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 115, 1, 1, 65, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("tcpCxt", 0), ("copsReq", 1), ("copsDec", 2), ("copsRpt", 3), ("copsDrq", 4), ("copsSsq", 5), ("copsOpn", 6), ("copsCat", 7), ("copsCC", 8), ("copsKa", 9), ("copsSsc", 10))))
if mibBuilder.loadTexts: cadPCCopsOpcode.setReference("'The COPS (Common Open Policy Service) Protocol: RFC2748'; 'C4 Product Specification Agreement: PacketCable Deployment Tools on the C4 CMTS' requirement 2.3.1.2-110")
if mibBuilder.loadTexts: cadPCCopsOpcode.setStatus('current')
if mibBuilder.loadTexts: cadPCCopsOpcode.setDescription('Type of message being counted. These map directly to the COPS opcodes in RFC 2748.')
cadPCCopsCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 115, 1, 1, 65, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadPCCopsCount.setReference("'C4 Product Specification Agreement: PacketCable Deployment Tools on the C4 CMTS' requirement 2.3.1.2-110")
if mibBuilder.loadTexts: cadPCCopsCount.setStatus('current')
if mibBuilder.loadTexts: cadPCCopsCount.setDescription('Count of COPS messages')
cadPCCopsCountLastCleared = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 115, 1, 1, 66), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadPCCopsCountLastCleared.setStatus('current')
if mibBuilder.loadTexts: cadPCCopsCountLastCleared.setDescription('The value of sysUptime when the COPS counts were last cleared.')
cadPCGateCtlCountTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 115, 1, 1, 70), )
if mibBuilder.loadTexts: cadPCGateCtlCountTable.setStatus('current')
if mibBuilder.loadTexts: cadPCGateCtlCountTable.setDescription('Table of counts of event messages that have been sent to or received from each server.')
cadPCGateCtlCountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 115, 1, 1, 70, 1), ).setIndexNames((0, "CADANT-CMTS-PACKETCABLE-MIB", "cadPCCopsServer"), (0, "CADANT-CMTS-PACKETCABLE-MIB", "cadPCGateCtlOpcode"))
if mibBuilder.loadTexts: cadPCGateCtlCountEntry.setStatus('current')
if mibBuilder.loadTexts: cadPCGateCtlCountEntry.setDescription('This entry contains counts of gate control messages.')
cadPCGateCtlOpcode = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 115, 1, 1, 70, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("gateAllocReq", 1), ("gateAllocAck", 2), ("gateAllocErr", 3), ("gateSetReq", 4), ("gateSetAck", 5), ("gateSetErr", 6), ("gateInfoReq", 7), ("gateInfoAck", 8), ("gateInfoErr", 9), ("gateDeleteReq", 10), ("gateDeleteAck", 11), ("gateDeleteErr", 12), ("gateOpen", 13), ("gateClose", 14), ("gateReportState", 15))))
if mibBuilder.loadTexts: cadPCGateCtlOpcode.setReference("'PacketCable Dynamic Quality of Service Specification: PKT-SP-DQOS-I07-0300815'; 'C4 Product Specification Agreement: PacketCable Deployment Tools on the C4 CMTS' requirement 2.3.1.2-120")
if mibBuilder.loadTexts: cadPCGateCtlOpcode.setStatus('current')
if mibBuilder.loadTexts: cadPCGateCtlOpcode.setDescription('Type of message being counted. These map directly to the gate command type opcodes in the DQoS spec.')
cadPCGateCtlCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 115, 1, 1, 70, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadPCGateCtlCount.setReference("'C4 Product Specification Agreement: PacketCable Deployment Tools on the C4 CMTS' requirement 2.3.1.2-120")
if mibBuilder.loadTexts: cadPCGateCtlCount.setStatus('current')
if mibBuilder.loadTexts: cadPCGateCtlCount.setDescription('Count of messages since boot or since the last manual reset of this count.')
cadPCGateCtlCountLastCleared = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 115, 1, 1, 71), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadPCGateCtlCountLastCleared.setStatus('current')
if mibBuilder.loadTexts: cadPCGateCtlCountLastCleared.setDescription('The value of sysUptime when the gate control counts were last cleared.')
cadPCDefAdmCtlTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 115, 1, 1, 75), )
if mibBuilder.loadTexts: cadPCDefAdmCtlTable.setStatus('current')
if mibBuilder.loadTexts: cadPCDefAdmCtlTable.setDescription('Table of Per-Priority PacketCable admission control policies')
cadPCDefAdmCtlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 115, 1, 1, 75, 1), ).setIndexNames((0, "CADANT-CMTS-PACKETCABLE-MIB", "cadPCDefAdmCtlDirection"), (0, "CADANT-CMTS-PACKETCABLE-MIB", "cadPCDefAdmCtlPriority"))
if mibBuilder.loadTexts: cadPCDefAdmCtlEntry.setStatus('current')
if mibBuilder.loadTexts: cadPCDefAdmCtlEntry.setDescription('This entry contains all of the default PacketCable admission policy data.')
cadPCDefAdmCtlDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 115, 1, 1, 75, 1, 1), IfDirection())
if mibBuilder.loadTexts: cadPCDefAdmCtlDirection.setStatus('current')
if mibBuilder.loadTexts: cadPCDefAdmCtlDirection.setDescription('Direction for this default policy data.')
cadPCDefAdmCtlPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 115, 1, 1, 75, 1, 2), CadPCAdmCtlPriority())
if mibBuilder.loadTexts: cadPCDefAdmCtlPriority.setStatus('current')
if mibBuilder.loadTexts: cadPCDefAdmCtlPriority.setDescription('Priority value assigned to this row.')
cadPCDefAdmCtlAllowedUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 115, 1, 1, 75, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 90)).clone(50)).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadPCDefAdmCtlAllowedUsage.setReference("'Cadant CMTS Requirements for PacketCable' requirement 3.3.3.0.2")
if mibBuilder.loadTexts: cadPCDefAdmCtlAllowedUsage.setStatus('current')
if mibBuilder.loadTexts: cadPCDefAdmCtlAllowedUsage.setDescription('Maximum percentage of resources that may be used by requests at the corresponding priority level. This is also the maximum amount of resources non-exclusively allocated to sessions of this type')
cadPCDefAdmCtlReservedUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 115, 1, 1, 75, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 90))).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadPCDefAdmCtlReservedUsage.setReference("'Cadant CMTS Requirements for PacketCable' requirement 3.3.3.0.2")
if mibBuilder.loadTexts: cadPCDefAdmCtlReservedUsage.setStatus('current')
if mibBuilder.loadTexts: cadPCDefAdmCtlReservedUsage.setDescription('Minimum percentage of resources that may be used by requests at the corresponding priority level. This is also the maximum amount of resources exclusively allocated to sessions of this type. If the value of this object is non-zero, then a portion of the bandwidth will be set aside for this priority only - reducing the bandwidth that is available for normal data.')
cadPC1xAdmCtlMapTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 115, 1, 1, 80), )
if mibBuilder.loadTexts: cadPC1xAdmCtlMapTable.setStatus('current')
if mibBuilder.loadTexts: cadPC1xAdmCtlMapTable.setDescription('Table of mappings of PacketCable 1.x to PacketCable Multimedia admission control policies')
cadPC1xAdmCtlMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 115, 1, 1, 80, 1), ).setIndexNames((0, "CADANT-CMTS-PACKETCABLE-MIB", "cadPC1xAdmCtlMapPriority"))
if mibBuilder.loadTexts: cadPC1xAdmCtlMapEntry.setStatus('current')
if mibBuilder.loadTexts: cadPC1xAdmCtlMapEntry.setDescription('This entry contains mapping of one PacketCable 1.x admission policy to a PacketCable Multimedia policy.')
cadPC1xAdmCtlMapPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 115, 1, 1, 80, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("undefined", 1), ("normal", 2), ("emergency", 3))))
if mibBuilder.loadTexts: cadPC1xAdmCtlMapPriority.setStatus('current')
if mibBuilder.loadTexts: cadPC1xAdmCtlMapPriority.setDescription('PacketCable 1.x session class priority value')
cadPCAdmCtlMapPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 115, 1, 1, 80, 1, 2), CadPCAdmCtlPriority()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadPCAdmCtlMapPriority.setStatus('current')
if mibBuilder.loadTexts: cadPCAdmCtlMapPriority.setDescription('PacketCable Multimedia Priority value assigned to this row.')
cadPCInterfaceAdmCtlTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 115, 1, 1, 85), )
if mibBuilder.loadTexts: cadPCInterfaceAdmCtlTable.setStatus('current')
if mibBuilder.loadTexts: cadPCInterfaceAdmCtlTable.setDescription('Table of Per-Priority PacketCable admission control policies. There exists a row per cable downstream and per cable upstream for each of the CadPCAdmCtlPriorities. For 1D:8U CAMs, the ifTypes populated are 128(downstream) and 129(upstream). For DOCSIS 2.0 CAMs (2D:12U), the ifTypes covered are 128(downstream) and 205(logical upstream).')
cadPCInterfaceAdmCtlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 115, 1, 1, 85, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CADANT-CMTS-PACKETCABLE-MIB", "cadPCInterfaceAdmCtlPriority"))
if mibBuilder.loadTexts: cadPCInterfaceAdmCtlEntry.setStatus('current')
if mibBuilder.loadTexts: cadPCInterfaceAdmCtlEntry.setDescription('This entry contains all of the default PacketCable admission policy data.')
cadPCInterfaceAdmCtlPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 115, 1, 1, 85, 1, 1), CadPCAdmCtlPriority())
if mibBuilder.loadTexts: cadPCInterfaceAdmCtlPriority.setStatus('current')
if mibBuilder.loadTexts: cadPCInterfaceAdmCtlPriority.setDescription('Priority value assigned to this row.')
cadPCInterfaceAdmCtlAllowedUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 115, 1, 1, 85, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 90)).clone(50)).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadPCInterfaceAdmCtlAllowedUsage.setReference("'Cadant CMTS Requirements for PacketCable' requirement 3.3.3.0.2")
if mibBuilder.loadTexts: cadPCInterfaceAdmCtlAllowedUsage.setStatus('current')
if mibBuilder.loadTexts: cadPCInterfaceAdmCtlAllowedUsage.setDescription('Maximum percentage of resources that may be used by requests at the corresponding priority level. This is also the maximum amount of resources non-exclusively allocated to sessions of this type')
cadPCInterfaceAdmCtlReservedUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 115, 1, 1, 85, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 90))).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadPCInterfaceAdmCtlReservedUsage.setReference("'Cadant CMTS Requirements for PacketCable' requirement 3.3.3.0.2")
if mibBuilder.loadTexts: cadPCInterfaceAdmCtlReservedUsage.setStatus('current')
if mibBuilder.loadTexts: cadPCInterfaceAdmCtlReservedUsage.setDescription('Minimum percentage of resources that may be used by requests at the corresponding priority level. This is also the maximum amount of resources exclusively allocated to sessions of this type. If the value of this object is non-zero, then a portion of the bandwidth will be set aside for this priority only - reducing the bandwidth that is available for normal data.')
cadPCCAMCblMacTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 115, 1, 1, 86), )
if mibBuilder.loadTexts: cadPCCAMCblMacTable.setStatus('current')
if mibBuilder.loadTexts: cadPCCAMCblMacTable.setDescription('Table of Per-CAM PacketCable Data')
cadPCCAMCblMacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 115, 1, 1, 86, 1), ).setIndexNames((0, "CADANT-CMTS-PACKETCABLE-MIB", "cadPCCAMCblMacIfIndex"))
if mibBuilder.loadTexts: cadPCCAMCblMacEntry.setStatus('current')
if mibBuilder.loadTexts: cadPCCAMCblMacEntry.setDescription('This entry contains all of the PacketCable data that is to be managed on a per-mac domain basis.')
cadPCCAMCblMacIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 115, 1, 1, 86, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: cadPCCAMCblMacIfIndex.setStatus('current')
if mibBuilder.loadTexts: cadPCCAMCblMacIfIndex.setDescription('Indicates whether the authorization module will allow a DOCSIS MAC Messaging Dynamic Services request (DSx) without a gate-ID in an authorization block.')
cadPCCAMCblMacFreeDSxAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 115, 1, 1, 86, 1, 2), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadPCCAMCblMacFreeDSxAllowed.setStatus('current')
if mibBuilder.loadTexts: cadPCCAMCblMacFreeDSxAllowed.setDescription('Indicates whether the authorization module will allow a DOCSIS MAC Messaging Dynamic Services request (DSx) without a gate-ID in an authorization block.')
cadPCCblMacMaxOverloadDSaCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 115, 1, 1, 86, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000)).clone(10000)).setUnits('connections per 10 seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadPCCblMacMaxOverloadDSaCalls.setStatus('current')
if mibBuilder.loadTexts: cadPCCblMacMaxOverloadDSaCalls.setDescription('the max number of connections we will allow per 10 second interval when the system cpu is in a normal condition, i.e. no overload.')
cadPCCblMacMaxYellowOverloadDSaCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 115, 1, 1, 86, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000)).clone(10000)).setUnits('connections per 10 seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadPCCblMacMaxYellowOverloadDSaCalls.setStatus('current')
if mibBuilder.loadTexts: cadPCCblMacMaxYellowOverloadDSaCalls.setDescription('the max number of connections we will allow per 10 second interval when the system cpu is in a yellow overload condition.')
cadPCCblMacMaxRedOverloadDSaCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 115, 1, 1, 86, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000)).clone(3000)).setUnits('connections per 10 seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadPCCblMacMaxRedOverloadDSaCalls.setStatus('current')
if mibBuilder.loadTexts: cadPCCblMacMaxRedOverloadDSaCalls.setDescription('the max number of connections we will allow per 10 second interval when the system cpu is in a red overload condition.')
cadPCPEPIDHostname = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 115, 1, 1, 90), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadPCPEPIDHostname.setStatus('current')
if mibBuilder.loadTexts: cadPCPEPIDHostname.setDescription('If set to true, the PEP-ID on the COPS connection will set to the currently configured hostname of the CMTS. If false, the PEP-ID will will be set to the local IP address of the COPS connection.')
mibBuilder.exportSymbols("CADANT-CMTS-PACKETCABLE-MIB", cadPCAnomalyCountEntry=cadPCAnomalyCountEntry, cadPCCAMCblMacIfIndex=cadPCCAMCblMacIfIndex, cadPCDownNormResUsage=cadPCDownNormResUsage, cadPCMaxOverloadCalls=cadPCMaxOverloadCalls, cadPCGateCtlOpcode=cadPCGateCtlOpcode, cadPCConnRateReqHistoryTimeStamp=cadPCConnRateReqHistoryTimeStamp, cadPCSendSubId=cadPCSendSubId, CadPCAdmCtlPriority=CadPCAdmCtlPriority, cadPCEvMsgType=cadPCEvMsgType, cadPCCAMTable=cadPCCAMTable, cadPCCAMCblMacEntry=cadPCCAMCblMacEntry, cadPCConnRateOverloadRejTable=cadPCConnRateOverloadRejTable, cadPCDefAdmCtlTable=cadPCDefAdmCtlTable, cadPCAnomalyLastCleared=cadPCAnomalyLastCleared, cadPCDefAdmCtlPriority=cadPCDefAdmCtlPriority, cadPCMibObjects=cadPCMibObjects, cadPCInterfaceAdmCtlAllowedUsage=cadPCInterfaceAdmCtlAllowedUsage, cadPCTotalGateCount=cadPCTotalGateCount, cadPCCblMacMaxYellowOverloadDSaCalls=cadPCCblMacMaxYellowOverloadDSaCalls, cadPCConnRateReqHistoryCount=cadPCConnRateReqHistoryCount, cadPCConnRateReqHistoryTable=cadPCConnRateReqHistoryTable, cadPCConnRateOverloadRejCount=cadPCConnRateOverloadRejCount, cadPCDownNormAllowedUsage=cadPCDownNormAllowedUsage, cadPCDefAdmCtlDirection=cadPCDefAdmCtlDirection, cadPCClearConnRateOverloadCounts=cadPCClearConnRateOverloadCounts, cadPCDownTotalAllowedUsage=cadPCDownTotalAllowedUsage, cadPCMaxRedOverloadCalls=cadPCMaxRedOverloadCalls, cadPCClearGateCounts=cadPCClearGateCounts, cadFreeDSxAllowed=cadFreeDSxAllowed, cadPCAdmCtlMapPriority=cadPCAdmCtlMapPriority, cadPCDownEmerAllowedUsage=cadPCDownEmerAllowedUsage, cadPCInterfaceAdmCtlTable=cadPCInterfaceAdmCtlTable, cadPCCblMacMaxOverloadDSaCalls=cadPCCblMacMaxOverloadDSaCalls, cadPCGateCtlCountEntry=cadPCGateCtlCountEntry, cadPCMaxRedOverloadGateMsgs=cadPCMaxRedOverloadGateMsgs, cadPCGateCtlCount=cadPCGateCtlCount, cadPCConnRateOverloadRejCardId=cadPCConnRateOverloadRejCardId, cadPCGateCommittedStateCount=cadPCGateCommittedStateCount, cadPCAnomalyCountTable=cadPCAnomalyCountTable, cadPCClearCopsCounts=cadPCClearCopsCounts, cadPCConnRateReqHistoryEntry=cadPCConnRateReqHistoryEntry, cadPCCardId=cadPCCardId, cadPCPreemptionAllowed=cadPCPreemptionAllowed, cadPCCopsServer=cadPCCopsServer, cadPCMaxOverloadDSaCalls=cadPCMaxOverloadDSaCalls, cadPCEvMsgServerIsDF=cadPCEvMsgServerIsDF, CadPCAnomalyCode=CadPCAnomalyCode, cadPCConnRateOverloadLastCleared=cadPCConnRateOverloadLastCleared, cadPCGateAuthorizedStateCount=cadPCGateAuthorizedStateCount, cadPCMaxYellowOverloadDSaCalls=cadPCMaxYellowOverloadDSaCalls, cadPCCopsCountTable=cadPCCopsCountTable, cadPCCopsCount=cadPCCopsCount, cadPCCAMCblMacTable=cadPCCAMCblMacTable, cadPCUpNormAllowedUsage=cadPCUpNormAllowedUsage, cadPCConnReqMaxHistRate=cadPCConnReqMaxHistRate, cadPCCopsOpcode=cadPCCopsOpcode, cadPCCAMEntry=cadPCCAMEntry, cadPCMIB=cadPCMIB, cadPCDownEmerResUsage=cadPCDownEmerResUsage, cadPCClearEvMsgCounts=cadPCClearEvMsgCounts, cadPC1xAdmCtlMapPriority=cadPC1xAdmCtlMapPriority, cadPCDefAdmCtlEntry=cadPCDefAdmCtlEntry, PYSNMP_MODULE_ID=cadPCMIB, cadPC1xAdmCtlMapTable=cadPC1xAdmCtlMapTable, cadPCInterfaceAdmCtlReservedUsage=cadPCInterfaceAdmCtlReservedUsage, cadPCCblMacMaxRedOverloadDSaCalls=cadPCCblMacMaxRedOverloadDSaCalls, cadPCAnomalyCode=cadPCAnomalyCode, cadPCGateAllocatedStateCount=cadPCGateAllocatedStateCount, cadPCGateCtlCountLastCleared=cadPCGateCtlCountLastCleared, cadPCMaxYellowOverloadCalls=cadPCMaxYellowOverloadCalls, cadPCAnomalyCount=cadPCAnomalyCount, cadPCUpEmerResUsage=cadPCUpEmerResUsage, cadPCEvMsgCountEntry=cadPCEvMsgCountEntry, cadPCEvMsgCountServer=cadPCEvMsgCountServer, cadPCCopsCountEntry=cadPCCopsCountEntry, cadPCConnRateOverloadRejEntry=cadPCConnRateOverloadRejEntry, cadPCGateReservedStateCount=cadPCGateReservedStateCount, cadPCMibBase=cadPCMibBase, cadPCMaxOverloadGateMsgs=cadPCMaxOverloadGateMsgs, cadPCMaxRedOverloadDSaCalls=cadPCMaxRedOverloadDSaCalls, cadPCDefAdmCtlReservedUsage=cadPCDefAdmCtlReservedUsage, cadPCDefAdmCtlAllowedUsage=cadPCDefAdmCtlAllowedUsage, cadPCEvMsgCountLastCleared=cadPCEvMsgCountLastCleared, cadPCMibGateCounts=cadPCMibGateCounts, cadPCUpEmerAllowedUsage=cadPCUpEmerAllowedUsage, cadPCMaxYellowOverloadGateMsgs=cadPCMaxYellowOverloadGateMsgs, cadPCEvMsgCountTable=cadPCEvMsgCountTable, cadPCGateCtlCountTable=cadPCGateCtlCountTable, cadPCCAMCblMacFreeDSxAllowed=cadPCCAMCblMacFreeDSxAllowed, cadPCCopsCountLastCleared=cadPCCopsCountLastCleared, cadPCCopsDirection=cadPCCopsDirection, cadPCUpNormResUsage=cadPCUpNormResUsage, cadPCInterfaceAdmCtlEntry=cadPCInterfaceAdmCtlEntry, cadPCPEPIDHostname=cadPCPEPIDHostname, cadPCAdminState=cadPCAdminState, cadPC1xAdmCtlMapEntry=cadPC1xAdmCtlMapEntry, cadPCInterfaceAdmCtlPriority=cadPCInterfaceAdmCtlPriority, cadPCGateLastCleared=cadPCGateLastCleared, cadPCUpTotalAllowedUsage=cadPCUpTotalAllowedUsage, cadPCClearGateCtlCounts=cadPCClearGateCtlCounts, cadPCEvMsgCount=cadPCEvMsgCount, cadPCClearAnomalyCounts=cadPCClearAnomalyCounts)
