#
# PySNMP MIB module Wellfleet-HARDWARE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Wellfleet-HARDWARE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:40:20 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, Counter32, ModuleIdentity, Integer32, Gauge32, MibIdentifier, Counter64, Unsigned32, ObjectIdentity, NotificationType, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "ModuleIdentity", "Integer32", "Gauge32", "MibIdentifier", "Counter64", "Unsigned32", "ObjectIdentity", "NotificationType", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "IpAddress")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
wfHardwareConfig, = mibBuilder.importSymbols("Wellfleet-COMMON-MIB", "wfHardwareConfig")
wfHwBase = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 1, 1))
wfHwBpIdOpt = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 16, 32, 34, 36, 5000, 16640, 16896, 17152, 20480, 20736, 20992, 24576, 26368))).clone(namedValues=NamedValues(("acefn", 1), ("aceln", 2), ("acecn", 3), ("afn", 4), ("in", 5), ("an", 16), ("arn", 32), ("fbr4slot", 34), ("lite", 36), ("sys5000", 5000), ("freln", 16640), ("frecn", 16896), ("frerbln", 17152), ("asn", 20480), ("asnzcable", 20736), ("asnbcable", 20992), ("sn", 24576), ("v15k", 26368)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwBpIdOpt.setStatus('mandatory')
if mibBuilder.loadTexts: wfHwBpIdOpt.setDescription('The BackPlane identification number.')
wfHwBpRev = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwBpRev.setStatus('mandatory')
if mibBuilder.loadTexts: wfHwBpRev.setDescription('The revision level of the BackPlane. High byte is in upper 2 bytes.')
wfHwBpSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwBpSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfHwBpSerialNumber.setDescription('The serial number of the BackPlane.')
wfBCNPwrSupply1 = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("fail", 2), ("notpresent", 3))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBCNPwrSupply1.setStatus('mandatory')
if mibBuilder.loadTexts: wfBCNPwrSupply1.setDescription('Status of BCN Hot-Swappable Power Supply 1')
wfBCNPwrSupply2 = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("fail", 2), ("notpresent", 3))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBCNPwrSupply2.setStatus('mandatory')
if mibBuilder.loadTexts: wfBCNPwrSupply2.setDescription('Status of BCN Hot-Swappable Power Supply 2')
wfBCNPwrSupply3 = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("fail", 2), ("notpresent", 3))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBCNPwrSupply3.setStatus('mandatory')
if mibBuilder.loadTexts: wfBCNPwrSupply3.setDescription('Status of BCN Hot-Swappable Power Supply 3')
wfBCNPwrSupply4 = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("fail", 2), ("notpresent", 3))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBCNPwrSupply4.setStatus('mandatory')
if mibBuilder.loadTexts: wfBCNPwrSupply4.setDescription('Status of BCN Hot-Swappable Power Supply 4')
wfBCNFanStatus = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("fail", 2), ("notpresent", 3))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBCNFanStatus.setStatus('mandatory')
if mibBuilder.loadTexts: wfBCNFanStatus.setDescription('Status of BCN Fan Tray')
wfBCNTemperature = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ok", 1), ("caution", 2), ("notpresent", 3), ("fail", 4))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBCNTemperature.setStatus('mandatory')
if mibBuilder.loadTexts: wfBCNTemperature.setDescription('Status of BCN Temperature sensor')
wfBCNTemperature2 = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ok", 1), ("caution", 2), ("notpresent", 3), ("fail", 4))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBCNTemperature2.setStatus('mandatory')
if mibBuilder.loadTexts: wfBCNTemperature2.setDescription('Status of second BCN Temperature sensor')
wfFanSpeed = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("low", 1), ("high", 2), ("notpresent", 3))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFanSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: wfFanSpeed.setDescription('This object indicates the current speed of the fan module')
wfHwTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 1, 2), )
if mibBuilder.loadTexts: wfHwTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfHwTable.setDescription('Hardware Table - indexed by slot number')
wfHwEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 1, 2, 1), ).setIndexNames((0, "Wellfleet-HARDWARE-MIB", "wfHwSlot"))
if mibBuilder.loadTexts: wfHwEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfHwEntry.setDescription('Hardware specific information about a slot.')
wfHwSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwSlot.setStatus('mandatory')
if mibBuilder.loadTexts: wfHwSlot.setDescription('A unique value for each slot. Its value ranges between 1 and 14. There are products in this family that contain 1, 5, and 14 slots.')
wfHwModIdOpt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 8, 16, 17, 24, 32, 33, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 80, 81, 88, 89, 104, 112, 113, 114, 116, 117, 118, 119, 120, 132, 156, 160, 161, 162, 164, 165, 168, 169, 176, 184, 185, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 208, 216, 217, 224, 225, 232, 233, 234, 235, 236, 237, 238, 239, 256, 508, 509, 510, 511, 513, 512, 767, 777, 787, 778, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 4096, 4097, 4098, 4099, 4352, 4353, 4354, 4608, 4609, 4610, 4864, 5120, 5121, 5376, 5377, 5378, 6144, 6145, 6400, 6401, 8448, 8500, 24848, 24849, 24864, 24880, 24896, 24912, 524288, 524544, 1048799, 1048798, 1048831, 1048830, 1048823, 1048822, 1048815, 1048814, 1048807, 1048806, 1048827, 1048826, 1048811, 1048810, 1048763, 1048762), SingleValueConstraint(1048747, 1048746, 1048832, 1048833, 1048834, 1048835, 1048836, 1048837, 1048863, 1048864, 1048865, 1048866, 1048867, 1048868, 1048869, 1048895, 1048896, 1048897, 1048898, 1048899, 1048900, 1048901, 1048927, 1048928, 1048929, 1048930, 1048931, 1048932, 1048933, 1048959, 1048960, 1048961, 1048962, 1048963, 1048964, 1048965, 1048991, 1049089, 1049090, 1049091, 1049092, 1049093, 1049094, 1049095, 1049119, 1049217, 1049218, 1049219, 1049220, 1049221, 1049222, 1049223, 1049247, 1049344, 1049376))).clone(namedValues=NamedValues(("enet1", 1), ("enet2", 8), ("sync1", 16), ("sync1a", 17), ("t11", 24), ("dse1", 32), ("dse1a", 33), ("dst416", 40), ("sst416a", 41), ("dst4", 42), ("sst4a", 43), ("sst416", 44), ("stok416", 45), ("sst4", 46), ("stok4", 47), ("floppy", 48), ("necfloppy", 49), ("t12", 56), ("t12a", 57), ("st1", 58), ("t156k", 60), ("e1", 61), ("st156k", 62), ("se1", 63), ("t12n", 64), ("st1n", 65), ("t156kn", 66), ("st156kn", 67), ("e1n", 68), ("se1n", 69), ("sync", 80), ("sync2a", 81), ("cmcfddi", 88), ("iphfddi", 89), ("dt", 104), ("dsde1", 112), ("dsde1a", 113), ("enet", 114), ("dse2", 116), ("dse2a", 117), ("sse", 118), ("ssea", 119), ("dsde10bt", 120), ("enet3", 132), ("dsde2", 156), ("oldqenf", 160), ("denf", 161), ("qenf", 162), ("qef", 164), ("def", 165), ("mct1", 168), ("smct1", 169), ("dtok", 176), ("mce1", 184), ("smce1", 185), ("mce1ii75", 188), ("smce1ii75", 189), ("mce1ii120", 190), ("smce1ii120", 191), ("wffddi2m", 192), ("wffddi1m", 193), ("wffddi2s", 194), ("wffddi1s", 195), ("wffddi2mf", 196), ("wffddi1mf", 197), ("wffddi2sf", 198), ("wffddi1sf", 199), ("fmdset", 200), ("fmdst", 201), ("fmdse", 202), ("fmsst", 203), ("fmsse", 204), ("fnsdse", 208), ("fnsdsdt", 216), ("fnsdst", 217), ("dhssi", 224), ("shssi", 225), ("esafnf", 232), ("esafdsenf", 233), ("esafssenf", 234), ("esafdenf", 235), ("esaf", 236), ("esafdse", 237), ("esafsse", 238), ("esafde", 239), ("qtok", 256), ("m5380", 508), ("m5580", 509), ("m5780", 510), ("asn", 511), ("sn", 513), ("m5782", 512), ("arn", 767), ("fbrcpu", 777), ("lite", 787), ("fbr2pmccarrier", 778), ("anseds", 1024), ("ansedst", 1025), ("ansedsh", 1026), ("ansedsi", 1027), ("ansedsti", 1028), ("ansedshi", 1029), ("ansets", 1030), ("ansetst", 1031), ("ansetsh", 1032), ("andeds", 1033), ("andedst", 1034), ("andedsh", 1035), ("andstx", 1036), ("andst", 1037), ("andsti", 1038), ("antst", 1039), ("antstx", 1040), ("ansdsedst", 1041), ("ansdsedstx", 1042), ("ansedsi2", 1043), ("ansedsti2", 1044), ("ansedshi2", 1045), ("andsti2", 1046), ("ansedsg", 1047), ("ansedsgx", 1048), ("ansetsg", 1049), ("andedsg", 1050), ("ansedsgi", 1051), ("ansetsgx", 1052), ("andedsgx", 1053), ("ansedsgix", 1054), ("ansedsx", 1055), ("ansetsx", 1056), ("andedsx", 1057), ("ansedstx", 1058), ("ansetstx", 1059), ("andedstx", 1060), ("andsti2x", 1061), ("ansedsi2x", 1062), ("ansedsti2x", 1063), ("ansedi", 1064), ("ansedsu", 1066), ("ansedsu2", 1067), ("andstu", 1068), ("andstu2", 1069), ("ansedstu", 1070), ("ansedstu2", 1071), ("ansedshu", 1072), ("ansedshu2", 1073), ("ansedsgu", 1074), ("ansedsu2x", 1075), ("andstu2x", 1076), ("ansedstu2x", 1077), ("ansedshu2x", 1078), ("ansedsgu2x", 1079), ("ansedsv", 1080), ("andstv", 1081), ("ansedstv", 1082), ("ansedshv", 1083), ("ansedsgv", 1084), ("ansedsvx", 1085), ("andstvx", 1086), ("ansedstvx", 1087), ("ansedshvx", 1088), ("ansedsgvx", 1089), ("ansedsc", 1090), ("andstc", 1091), ("ansedstc", 1092), ("ansedshc", 1093), ("ansedsgc", 1094), ("ansedscx", 1095), ("andstcx", 1096), ("ansedstcx", 1097), ("ansedshcx", 1098), ("ansedsgcx", 1099), ("ansedsf", 1100), ("ansedsf2", 1101), ("andstf", 1102), ("andstf2", 1103), ("ansedstf", 1104), ("ansedstf2", 1105), ("ansedshf", 1106), ("ansedshf2", 1107), ("ansedsgf", 1108), ("ansedsf2x", 1109), ("andstf2x", 1110), ("ansedstf2x", 1111), ("ansedshf2x", 1112), ("ansedsgf2x", 1113), ("ansedsfx", 1114), ("andstfx", 1115), ("ansedstfx", 1116), ("ansedshfx", 1117), ("ansedsgfx", 1118), ("ansedsj", 1119), ("ansedsj2", 1120), ("andstj", 1121), ("andstj2", 1122), ("ansedstj", 1123), ("ansedstj2", 1124), ("ansedshj", 1125), ("ansedshj2", 1126), ("ansedsgj", 1127), ("ansedsj2x", 1128), ("andstj2x", 1129), ("ansedstj2x", 1130), ("ansedshj2x", 1131), ("ansedsgj2x", 1132), ("ansedsjx", 1133), ("andstjx", 1134), ("ansedstjx", 1135), ("ansedshjx", 1136), ("ansedsgjx", 1137), ("atmalc", 4096), ("atmalctaxi100", 4097), ("atmalcsonetmm", 4098), ("atmalcsonetsm", 4099), ("osync", 4352), ("comp", 4353), ("comp128", 4354), ("atmcoc3mm", 4608), ("atmcoc3sm", 4609), ("atmcoc3utp5", 4610), ("de100", 4864), ("atmcds3", 5120), ("atmce3", 5121), ("qmct1rj48", 5376), ("qmct1db15", 5377), ("qmct1ds0a", 5378), ("sqe100", 6144), ("sqe100fx", 6145), ("gigenet", 6400), ("gigenetlx", 6401), ("srml", 8448), ("fvoip", 8500), ("hds3", 24848), ("arm", 24849), ("dmcoc3", 24864), ("atmoc12", 24880), ("sspcons", 24896), ("sspenet", 24912), ("atm5000ah", 524288), ("atm5000bh", 524544), ("qe", 1048799), ("qehwf", 1048798), ("qefddi2m", 1048831), ("qefddi2mhwf", 1048830), ("qefddi2s", 1048823), ("qefddi2shwf", 1048822), ("qefddi1m", 1048815), ("qefddi1mhwf", 1048814), ("qefddi1s", 1048807), ("qefddi1shwf", 1048806), ("qecddi2stp", 1048827), ("qecddi2stphwf", 1048826), ("qecddi1stp", 1048811), ("qecddi1stphwf", 1048810), ("qecddi2utp", 1048763), ("qecddi2utphwf", 1048762)) + NamedValues(("qecddi1utp", 1048747), ("qecddi1utphwf", 1048746), ("enet3atm", 1048832), ("enet3enet", 1048833), ("enet3fddi", 1048834), ("enet3tok", 1048835), ("enet3tokf", 1048836), ("enet3sync", 1048837), ("enet3only", 1048863), ("fddiatm", 1048864), ("fddienet", 1048865), ("fddifddi", 1048866), ("fdditok", 1048867), ("fdditokf", 1048868), ("fddisync", 1048869), ("fddionly", 1048895), ("tok3atm", 1048896), ("tok3enet", 1048897), ("tok3fddi", 1048898), ("tok3tok", 1048899), ("tok3tokf", 1048900), ("tok3sync", 1048901), ("tok3only", 1048927), ("tokf3atm", 1048928), ("tokf3enet", 1048929), ("tokf3fddi", 1048930), ("tokf3tok", 1048931), ("tokf3tokf", 1048932), ("tokf3sync", 1048933), ("tokf3only", 1048959), ("enet3datm", 1048960), ("enet3denet", 1048961), ("enet3dfddi", 1048962), ("enet3dtok", 1048963), ("enet3dtokf", 1048964), ("enet3dsync", 1048965), ("enet3donly", 1048991), ("chipcomfenet", 1049089), ("chipcomffddi", 1049090), ("chipcomftok", 1049091), ("chipcomftokf", 1049092), ("chipcomfdsync", 1049093), ("chipcomfisdn", 1049094), ("chipcomffddis", 1049095), ("chipcomfonly", 1049119), ("chipcomenet", 1049217), ("chipcomfddi", 1049218), ("chipcomtok", 1049219), ("chipcomtokf", 1049220), ("chipcomdsync", 1049221), ("chipcomisdn", 1049222), ("chipcomfddis", 1049223), ("chipcomonly", 1049247), ("fntsenet", 1049344), ("fntstok", 1049376)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwModIdOpt.setStatus('mandatory')
if mibBuilder.loadTexts: wfHwModIdOpt.setDescription("The module identification number. Port Configurations HWStat Name Enet Sync Async Token Framer Fiber ------ ------------ ------ -------- ----- ----- ------ ----- 1 ENET-1 2 0 0 0 0 0 8 ENET-2 2 0 0 0 0 0 16 SYNC-1 0 4 1 0 0 0 17 SYNC-1[1] 0 4 1 0 0 0 24 T1-1 0 2 1 0 2 0 32 DSE-1 1 2 1 0 0 0 33 DSE-1[1] 1 2 1 0 0 0 40 DST-4/16 0 2 1 1 0 0 41 SST-4/16[1] 0 1 1 1 0 0 42 DST-4 0 2 1 1 0 0 43 SST-4[1] 0 1 1 1 0 0 44 SST-4/16 0 1 1 1 0 0 45 STOK-4/16[3] 0 0 0 1 0 0 46 SST-4 0 1 1 1 0 0 47 STOK-4[3] 0 0 0 1 0 0 48 FLOPPY 0 0 0 0 0 0 56 T1-2 0 2 1 0 2 0 57 T1-2 0 2 1 0 2 0 58 ST1 0 1 1 0 1 0 60 T1-56K 0 1 1 0 1 0 61 E1[3] 0 2 0 0 2 0 62 ST1-56K 0 1 1 0 1 0 63 SE1[3] 0 1 0 0 1 0 64 T1-2n 0 2 1 0 2 0 65 ST1n 0 1 1 0 1 0 66 T1-56Kn 0 1 1 0 1 0 67 ST1-56Kn 0 1 1 0 1 0 68 E1n[3] 0 2 0 0 2 0 69 SE1n[3] 0 1 0 0 1 0 80 SYNC-2 0 4 1 0 0 0 81 SYNC-2[1] 0 4 1 0 0 0 88 CMC-FDDI[6] 0 0 0 0 0 1 89 IPHASE-FDDI[6] 0 0 0 0 0 1 112 DSDE-1 2 2 1 0 0 0 113 DSDE-1[1] 2 2 1 0 0 0 114 ENET 2 0 0 0 0 0 116 DSE-2 1 2 1 0 0 0 117 DSE-2[1] 1 2 1 0 0 0 118 SSE 1 1 1 0 0 0 119 SSE[1] 1 1 1 0 0 0 132 ENET-3[2] 2 0 0 0 0 0 156 DSDE-2[2] 2 2 1 0 0 0 160 QE/NF 4 0 0 0 0 0 161 DE/NF[5] 2 0 0 0 0 0 162 QE/NF 4 0 0 0 0 0 164 QE/F[4] 4 0 0 0 0 0 165 DE/F[4,5] 2 0 0 0 0 0 168 MCT1 0 2 Munich 0 0 2 0 169 SMCT1 0 1 Munich 0 0 1 0 176 DTOK 0 0 0 2 0 0 184 MCE1 0 2 Munich 0 0 2 0 185 SMCE1 0 1 Munich 0 0 1 0 188 MCE1II75 0 2 Munich 0 0 2 0 189 SMCE1II75 0 1 Munich 0 0 1 0 190 MCE1II120 0 2 Munich 0 0 2 0 191 SMCE1II120 0 1 Munich 0 0 1 0 192 WF_FDDI_2M 0 0 0 0 0 1 193 WF_FDDI_1M 0 0 0 0 0 1 194 WF_FDDI_2S 0 0 0 0 0 1 195 WF_FDDI_1S 0 0 0 0 0 1 196 WF_FDDI_2MF 0 0 0 0 0 1 197 WF_FDDI_1MF 0 0 0 0 0 1 198 WF_FDDI_2SF 0 0 0 0 0 1 199 WF_FDDI_1SF 0 0 0 0 0 1 200 HW_MODULE_FMDSET[7] 1 2 0 1 0 0 201 HW_MODULE_FMDST[7] 0 2 0 1 0 0 202 HW_MODULE_FMDSE[7] 1 2 0 0 0 0 203 HW_MODULE_FMSST[7] 0 1 0 1 0 0 204 HW_MODULE_FMSSE[7] 1 1 0 0 0 0 208 FNSDSE[7] 1 2 0 0 0 0 216 FNSDSDT[7] 0 2 0 2 0 0 217 FNSDST[7] 0 2 0 1 0 0 224 DHSSI 0 2 hssi 0 0 0 0 225 SHSSI 0 1 hssi 0 0 0 0 232 ESAF_NF 2 2 0 0 0 0 233 ESAF_DSE_NF 1 2 0 0 0 0 234 ESAF_SSE_NF 1 1 0 0 0 0 235 ESAF_DE_NF 2 0 0 0 0 0 236 ESAF[2] 2 2 0 0 0 0 237 ESAF_DSE[2] 1 2 0 0 0 0 238 ESAF_SSE[2] 1 1 0 0 0 0 239 ESAF_DE[2] 2 0 0 0 0 0 256 QTOK 0 0 0 4 0 0 511 ASN[8] ASN (Barracuda) 513 SN[12] SN (Fiddlestix) 767 ARN[11] ARN (Neptune) 777 FBR[13] FBR (Orion) 778 FBRCARRIER[14] FBR Carrier Card (Orion) 787 LITE LITE (Valkyrie) AN Module IDs (Piranha, Guppy...) ID Mnemonic ENET SYNC ISDN TR HUB DCM -- -------- ---- ---- ---- -- --- --- 1024 ANSEDS 1 2 0 0 0 N 1025 ANSEDST 1 2 0 1 0 N 1026 ANSEDSH 1 2 0 0 12 N 1027 ANSEDSI 1 2 1 0 0 N 1028 ANSEDSTI 1 2 1 1 0 N 1029 ANSEDSHI 1 2 1 0 12 N 1030 ANSETS 1 3 0 0 0 N 1031 ANSETST 1 3 0 1 0 N 1032 ANSETSH 1 3 0 0 12 N 1033 ANDEDS 2 2 0 0 0 N 1034 ANDEDST 2 2 0 1 0 N 1035 ANDEDSH 2 2 0 0 12 N 1036 ANDSTX 0 2 0 1 0 Y (formerly ANDS) 1037 ANDST 0 2 0 1 0 N 1038 ANDSTI 0 2 1 1 0 N 1039 ANTST 0 3 0 1 0 N 1040 ANTSTX 0 3 0 1 0 Y (formerly ANSDSEDS) 1041 ANSDSEDST 1 2 0 1 0 N 1042 ANSDSEDSTX 1 2 0 1 0 Y (formerly ANSDSEDSH) 1043 ANSEDSI2 1 2 1 0 0 N 1044 ANSEDSTI2 1 2 1 1 0 N 1045 ANSEDSHI2 1 2 1 0 12 N 1046 ANDSTI2 0 2 1 1 0 N 1047 ANSEDSG 1 2 0 0 8 N 1048 ANSEDSGX 1 2 0 0 8 Y 1049 ANSETSG 1 3 0 0 8 N 1050 ANDEDSG 2 2 0 0 8 N 1051 ANSEDSGI 1 2 1 0 8 N 1052 ANSETSGX 1 3 0 0 8 Y 1053 ANDEDSGX 2 2 0 0 8 Y 1054 ANSEDSGIX 1 2 1 0 8 Y 1055 ANSEDSX 1 2 0 0 0 Y 1056 ANSETSX 1 3 0 0 0 Y 1057 ANDEDSX 2 2 0 0 0 Y 1058 ANSEDSTX 1 2 0 1 0 Y 1059 ANSETSTX 1 3 0 1 0 Y 1060 ANDEDSTX 2 2 0 1 0 Y 1061 ANDSTI2X 0 2 1 0 0 Y 1062 ANSEDSI2X 1 2 1 0 0 Y 1063 ANSEDSTI2X 1 2 1 1 0 Y 4096 ATMALC 0 0 0 0 0 0 4097 ATMALCTAXI100 0 0 0 0 0 1 4098 ATMALCSONETMM 0 0 0 0 1 1 [9] 4099 ATMALCSONETSM 0 0 0 0 1 1 [9] 4352 OSYNC 0 8 0 0 0 0 4353 OSYNC_COMP (32) 0 8 0 0 0 0 4354 OSYNC_COMP128 0 8 0 0 0 0 4608 ATMCOC3MM 0 0 0 0 1 1 [10] 4609 ATMCOC3SM 0 0 0 0 1 1 [10] 4610 ATMCOC3UTP5 0 0 0 0 1 0 [10] 4864 DE100 2 0 0 0 0 0 5120 ATMCDS3 0 0 0 0 1 0 [10] 5121 ATMCE3 0 0 0 0 1 0 [10] 8448 SRML 0 0 0 0 0 0 NOTES: [1] Indicates Module has COM Port 1 configured for ASYNC. The AM8530's port B is configured for COM1. [2] This Module contains the DEFA - Hardware Filtering. CAMS must be programmed (can contain 2 - 6 CAMS onboard). [3] The AM8530 has been removed (depopulated) from this module. Programming this device should not be performed. [4] Contains Dual Defa hardware. (Can be depopulated) [5] Depop'd two ports of hardware to make Dual Ethernet module. [6] These are FDDI modules. The ID cannot be read from the Link module I/O space. [7] These are AFN Platform Integrated 'Modules' - Cannot be detached or be used by any other platform. [8] Module IDs from 1280(0x500) to 2559(0x9ff) are used for the ASN Net Modules. Module ID 512(0x200) is used for the ASN SPEX. These IDs are documented in module.mib. A module ID of 511(0x1ff) in 'wfHwEntry.wfHwModIdOpt' indicates that it is an ASN platform and the user should refer to 'wfHwModuleEntry.wfHwModuleModIdOpt' for Module ID details. [9] ATMALC link modules. The physical option for SONET includes a framer and the medium is fiber optics. Only one port per physical daughtercard per link module. [10] ARE UTOPIA link modules. [11] Module IDs from 8704(0x2200) to 16383(0x3FFF) are used for the ARN Net Modules. These IDs are documented in module.mib. A module ID of 767(0x2ff) in 'wfHwEntry.wfHwModIdOpt' indicates that it is a Neptune platform and the user should refer to 'wfHwModuleEntry.wfHwModuleModIdOpt' for Module ID details. [12] Module IDs from 16384(0x4000) to 18944(0x4A00) are used for the SN Switched Net Modules (SNM). These IDs are documented in module.mib. A module ID of 513(0x201) in 'wfHwEntry.wfHwModIdOpt' indicates that it is an SN (Fiddlestix) platform and the user should refer to 'wfHwModuleEntry.wfHwModuleModIdOpt' for Module ID details. [13] A module ID of 777(0x309) in 'wfHwEntry.wfHwModIdOpt' indicates that it is a FBR (Fast Branch Router) platform and the user should refer to 'wfHwModuleEntry.wfHwModuleModIdOpt' for Module ID details. [14] A module ID of 778(0x30A) in 'wfHwEntry.wfHwModIdOpt' indicates the presence of a PCI PMC carrier card. The carrier card can have 2 PMC cards attached to it. For PMC card module IDs, refer to 'wfHwModuleEntry.wfHwModuleModIdOpt' for details.")
wfHwModRev = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 2, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwModRev.setStatus('mandatory')
if mibBuilder.loadTexts: wfHwModRev.setDescription('The revision level of the module. High byte is in upper 2 bytes.')
wfHwModSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 2, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwModSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfHwModSerialNumber.setDescription('The serial number of the module.')
wfHwMotherBdIdOpt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 16, 32, 36, 64, 256, 768, 769, 1024, 1025, 1280, 8704, 1536, 1792, 2561, 5632, 5633, 25088, 25344, 25600, 25856, 6656))).clone(namedValues=NamedValues(("sysctrl", 1), ("ace12", 2), ("ace25", 3), ("ace32", 4), ("afn", 5), ("in", 6), ("sysctrl2", 7), ("an", 16), ("arn", 32), ("lite", 36), ("fbr", 64), ("fre", 256), ("fre2", 768), ("o60", 769), ("asn", 1024), ("asn2", 1025), ("are", 1280), ("srmf", 8704), ("are5000", 1536), ("asn5000", 1792), ("sn060", 2561), ("fre2060epci", 5632), ("fre2060e", 5633), ("ssp", 25088), ("ifp", 25344), ("atp", 25600), ("cap", 25856), ("fre4", 6656)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwMotherBdIdOpt.setStatus('mandatory')
if mibBuilder.loadTexts: wfHwMotherBdIdOpt.setDescription('The mother board identification number.')
wfHwMotherBdRev = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 2, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwMotherBdRev.setStatus('mandatory')
if mibBuilder.loadTexts: wfHwMotherBdRev.setDescription('The revision level of the mother board. High byte is in upper 2 bytes.')
wfHwMotherBdSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 2, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwMotherBdSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfHwMotherBdSerialNumber.setDescription('The serial number of the mother board.')
wfHwDaughterBdIdOpt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 4352, 4608, 8752, 5888, 5889, 5890, 5891, 25345, 25857))).clone(namedValues=NamedValues(("sysctrl", 1), ("ace68020mhz12", 2), ("ace68020mhz25", 3), ("ace68030mhz32", 4), ("fre68040mhz25", 4352), ("fre68040mhz33", 4608), ("arnv34", 8752), ("hwcomp128pci", 5888), ("hwcomp128", 5889), ("hwcomp256pci", 5890), ("hwcomp256", 5891), ("ifprspdtr", 25345), ("cap3m13dtr", 25857)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwDaughterBdIdOpt.setStatus('mandatory')
if mibBuilder.loadTexts: wfHwDaughterBdIdOpt.setDescription('The daughter board identification number.')
wfHwDaughterBdRev = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 2, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwDaughterBdRev.setStatus('mandatory')
if mibBuilder.loadTexts: wfHwDaughterBdRev.setDescription('The revision level of the daughter board. High byte is in upper 2 bytes.')
wfHwDaughterBdSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 2, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwDaughterBdSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfHwDaughterBdSerialNumber.setDescription('The serial number of the daughter board.')
wfHwBabyBdIdOpt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwBabyBdIdOpt.setStatus('mandatory')
if mibBuilder.loadTexts: wfHwBabyBdIdOpt.setDescription('The baby board identification number.')
wfHwBabyBdRev = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 2, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwBabyBdRev.setStatus('mandatory')
if mibBuilder.loadTexts: wfHwBabyBdRev.setDescription('The revision level of the baby board. High byte is in upper 2 bytes.')
wfHwBabyBdSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 2, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwBabyBdSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfHwBabyBdSerialNumber.setDescription('The serial number of the baby board.')
wfHwDiagPromRev = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 2, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwDiagPromRev.setStatus('mandatory')
if mibBuilder.loadTexts: wfHwDiagPromRev.setDescription('The revision level of the Diagnostic PROM. Major revision level is in the upper 2 bytes, minor revision level in the lower 2 bytes.')
wfHwDiagPromDate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 2, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwDiagPromDate.setStatus('mandatory')
if mibBuilder.loadTexts: wfHwDiagPromDate.setDescription('The creation date of the Diagnostic PROM')
wfHwDiagPromSource = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 2, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwDiagPromSource.setStatus('mandatory')
if mibBuilder.loadTexts: wfHwDiagPromSource.setDescription('The origin of the Diagnostic PROM contents')
wfHwBootPromRev = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 2, 1, 17), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwBootPromRev.setStatus('mandatory')
if mibBuilder.loadTexts: wfHwBootPromRev.setDescription('The revision level of the BOOT PROM. Major revision level is in the upper 2 bytes, minor revision level in the lower 2 bytes.')
wfHwBootPromDate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 2, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwBootPromDate.setStatus('mandatory')
if mibBuilder.loadTexts: wfHwBootPromDate.setDescription('The creation date of the Boot PROM')
wfHwBootPromSource = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 2, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwBootPromSource.setStatus('mandatory')
if mibBuilder.loadTexts: wfHwBootPromSource.setDescription('The origin of the Boot PROM contents')
wfHwSparePromRev = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 2, 1, 20), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwSparePromRev.setStatus('mandatory')
if mibBuilder.loadTexts: wfHwSparePromRev.setDescription('The revision level of the BOOT PROM. Major revision level is in the upper 2 bytes, minor revision level in the lower 2 bytes.')
wfHwSparePromDate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 2, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwSparePromDate.setStatus('mandatory')
if mibBuilder.loadTexts: wfHwSparePromDate.setDescription('The creation date of the Spare PROM')
wfHwSparePromSource = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 2, 1, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwSparePromSource.setStatus('mandatory')
if mibBuilder.loadTexts: wfHwSparePromSource.setDescription('The origin of the Spare PROM contents')
wfHwFileSysPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("filesys", 1), ("nofilesys", 2))).clone('nofilesys')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwFileSysPresent.setStatus('mandatory')
if mibBuilder.loadTexts: wfHwFileSysPresent.setDescription('Flag indicating presence of File System on this slot.')
wfHwFileSysPresent2 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("filesys", 1), ("nofilesys", 2))).clone('nofilesys')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwFileSysPresent2.setStatus('mandatory')
if mibBuilder.loadTexts: wfHwFileSysPresent2.setDescription('Flag indicating presence of File System (Syscon2 volume#2) on this slot.')
wfHwConfigServer = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 2, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwConfigServer.setStatus('mandatory')
if mibBuilder.loadTexts: wfHwConfigServer.setDescription('The slot number from which this slot was served its configuration. If the value for this attribute is 0, this slot obtained its configuration from a file system resource (not necessarily local); If the value for this attribute is -1, this slot does not participate in the boot process (e.g. SRM). A positive value indicates that the configuration was obtained from memory from the slot indicated by the value of this attribute.')
wfHwConfigFile = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 2, 1, 26), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwConfigFile.setStatus('mandatory')
if mibBuilder.loadTexts: wfHwConfigFile.setDescription('The name of the config file the active configuration was derived from. This does NOT necessarily reflect the current configuration!')
wfHwConfigDateAndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 2, 1, 27), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwConfigDateAndTime.setStatus('mandatory')
if mibBuilder.loadTexts: wfHwConfigDateAndTime.setDescription("The 11 octet date and time that a configuration was loaded on/served to this slot. Octet map: 1-2 Year, 3 Month, 4 Day, 5 Hour, 6 Minutes, 7 Seconds, 8 Deci-seconds, 9 Direction from GMT ('+'|`-'), 10 GMT Hour Offset, 11 GMT Minute Offset.")
wfHwActiveImageName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 2, 1, 28), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwActiveImageName.setStatus('mandatory')
if mibBuilder.loadTexts: wfHwActiveImageName.setDescription('If slot was booted from a local source: this is the name of the active image, which is in the form of <volume>:<image name>. If slot was booted from a network source: this is the full pathname where the active image was found on the remote server.')
wfHwActiveImageSource = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 2, 1, 29), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwActiveImageSource.setStatus('mandatory')
if mibBuilder.loadTexts: wfHwActiveImageSource.setDescription('The origin of the active image')
wfHwActiveImageDate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 2, 1, 30), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwActiveImageDate.setStatus('mandatory')
if mibBuilder.loadTexts: wfHwActiveImageDate.setDescription('The date which the active image was created')
wfHwMotherBdMemorySize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 2, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwMotherBdMemorySize.setStatus('mandatory')
if mibBuilder.loadTexts: wfHwMotherBdMemorySize.setDescription('The total installed dram size in kilobytes.')
wfHwFastPacketCacheSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 2, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwFastPacketCacheSize.setStatus('mandatory')
if mibBuilder.loadTexts: wfHwFastPacketCacheSize.setDescription('The size of the installed fast packet cache in kilobytes.')
wfHwModDaughterBd1IdOpt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 2, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwModDaughterBd1IdOpt.setStatus('mandatory')
if mibBuilder.loadTexts: wfHwModDaughterBd1IdOpt.setDescription('Link module daughter board #1 identification number')
wfHwModDaughterBd1AwRev = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 2, 1, 34), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwModDaughterBd1AwRev.setStatus('mandatory')
if mibBuilder.loadTexts: wfHwModDaughterBd1AwRev.setDescription('Link module daughter board #1 artwork revision level')
wfHwModDaughterBd1Rev = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 2, 1, 35), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwModDaughterBd1Rev.setStatus('mandatory')
if mibBuilder.loadTexts: wfHwModDaughterBd1Rev.setDescription('Link module daughter board #1 board revision level')
wfHwModDaughterBd1SerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 2, 1, 36), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwModDaughterBd1SerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfHwModDaughterBd1SerialNumber.setDescription('Link module daughter board #1 serial number')
wfHwModDaughterBd2IdOpt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 2, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwModDaughterBd2IdOpt.setStatus('mandatory')
if mibBuilder.loadTexts: wfHwModDaughterBd2IdOpt.setDescription('Link module daughter board #2 identification number')
wfHwModDaughterBd2AwRev = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 2, 1, 38), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwModDaughterBd2AwRev.setStatus('mandatory')
if mibBuilder.loadTexts: wfHwModDaughterBd2AwRev.setDescription('Link module daughter board #2 artwork revision level')
wfHwModDaughterBd2Rev = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 2, 1, 39), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwModDaughterBd2Rev.setStatus('mandatory')
if mibBuilder.loadTexts: wfHwModDaughterBd2Rev.setDescription('Link module daughter board #2 board revision level')
wfHwModDaughterBd2SerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 2, 1, 40), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwModDaughterBd2SerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfHwModDaughterBd2SerialNumber.setDescription('Link module daughter board #2 serial number')
wfRASNPwrSupply1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 2, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ok", 1), ("fail", 2), ("notpresent", 3), ("notapplicable", 4))).clone('notapplicable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRASNPwrSupply1.setStatus('mandatory')
if mibBuilder.loadTexts: wfRASNPwrSupply1.setDescription('Status of RASN Internal Power Supply PS1')
wfRASNPwrSupply2 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 2, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ok", 1), ("fail", 2), ("notpresent", 3), ("notapplicable", 4))).clone('notapplicable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRASNPwrSupply2.setStatus('mandatory')
if mibBuilder.loadTexts: wfRASNPwrSupply2.setDescription('Status of RASN External Power Supply PS2')
wfPowerSupply1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 2, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ok", 1), ("fail", 2), ("notpresent", 3), ("notapplicable", 4))).clone('notapplicable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPowerSupply1.setStatus('mandatory')
if mibBuilder.loadTexts: wfPowerSupply1.setDescription('Status of Power Supply 1. The meaning of this object is platform dependent. It is normally used to report the status of the internal power supply. Not all platforms support this object.')
wfPowerSupply2 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 2, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ok", 1), ("fail", 2), ("notpresent", 3), ("notapplicable", 4))).clone('notapplicable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPowerSupply2.setStatus('mandatory')
if mibBuilder.loadTexts: wfPowerSupply2.setDescription('Status of Power Supply 1. The meaning of this object is platform dependent. It is normally used to report the status of the external power supply. Not all platforms support this object.')
wfFanStatus1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 2, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ok", 1), ("fail", 2), ("notpresent", 3), ("notapplicable", 4))).clone('notapplicable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFanStatus1.setStatus('mandatory')
if mibBuilder.loadTexts: wfFanStatus1.setDescription('Status of Fan 1. The meaning of this object is platform dependent. Not all platforms support this object.')
wfFanStatus2 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 2, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ok", 1), ("fail", 2), ("notpresent", 3), ("notapplicable", 4))).clone('notapplicable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFanStatus2.setStatus('mandatory')
if mibBuilder.loadTexts: wfFanStatus2.setDescription('Status of Fan 2. The meaning of this object is platform dependent. Not all platforms support this object.')
wfRASNRPSUPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 2, 1, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("present", 1), ("notpresent", 2), ("notapplicable", 3))).clone('notapplicable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfRASNRPSUPresent.setStatus('obsolete')
if mibBuilder.loadTexts: wfRASNRPSUPresent.setDescription('Status of RASN External Power Supply PS2 Presence')
wfModDiagStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 2, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 20))).clone(namedValues=NamedValues(("passed", 1), ("failed", 2), ("notrun", 3), ("notpresent", 4), ("notapplicable", 20))).clone('notapplicable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfModDiagStatus.setStatus('mandatory')
if mibBuilder.loadTexts: wfModDiagStatus.setDescription('For TIB, BF and BAR builds only. Module Diag. status determines if diags have been run on a netmodule, and if they passed or failed.')
wfHwCfgTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 1, 7), )
if mibBuilder.loadTexts: wfHwCfgTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfHwCfgTable.setDescription('Hardware Config Table - indexed by slot number')
wfHwCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 1, 7, 1), ).setIndexNames((0, "Wellfleet-HARDWARE-MIB", "wfHwCfgSlot"))
if mibBuilder.loadTexts: wfHwCfgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfHwCfgEntry.setDescription('Hardware specific information about a slot.')
wfHwCfgSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwCfgSlot.setStatus('mandatory')
if mibBuilder.loadTexts: wfHwCfgSlot.setDescription('A unique value for each slot.')
wfRPSUPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("present", 1), ("notpresent", 2), ("notapplicable", 3))).clone('notapplicable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfRPSUPresent.setStatus('mandatory')
if mibBuilder.loadTexts: wfRPSUPresent.setDescription('Status of External Power Supply PS2 Presence')
mibBuilder.exportSymbols("Wellfleet-HARDWARE-MIB", wfHwModDaughterBd2Rev=wfHwModDaughterBd2Rev, wfBCNPwrSupply4=wfBCNPwrSupply4, wfHwDaughterBdRev=wfHwDaughterBdRev, wfHwSparePromSource=wfHwSparePromSource, wfBCNTemperature2=wfBCNTemperature2, wfHwBootPromRev=wfHwBootPromRev, wfHwModRev=wfHwModRev, wfHwBase=wfHwBase, wfHwBpIdOpt=wfHwBpIdOpt, wfBCNTemperature=wfBCNTemperature, wfPowerSupply2=wfPowerSupply2, wfHwBpSerialNumber=wfHwBpSerialNumber, wfHwModDaughterBd1AwRev=wfHwModDaughterBd1AwRev, wfHwMotherBdMemorySize=wfHwMotherBdMemorySize, wfBCNPwrSupply1=wfBCNPwrSupply1, wfRASNPwrSupply1=wfRASNPwrSupply1, wfHwDiagPromDate=wfHwDiagPromDate, wfHwModDaughterBd2IdOpt=wfHwModDaughterBd2IdOpt, wfHwFileSysPresent2=wfHwFileSysPresent2, wfHwMotherBdSerialNumber=wfHwMotherBdSerialNumber, wfHwCfgTable=wfHwCfgTable, wfHwDaughterBdIdOpt=wfHwDaughterBdIdOpt, wfHwCfgEntry=wfHwCfgEntry, wfHwConfigDateAndTime=wfHwConfigDateAndTime, wfRPSUPresent=wfRPSUPresent, wfHwDiagPromSource=wfHwDiagPromSource, wfHwActiveImageDate=wfHwActiveImageDate, wfHwCfgSlot=wfHwCfgSlot, wfHwMotherBdIdOpt=wfHwMotherBdIdOpt, wfHwMotherBdRev=wfHwMotherBdRev, wfHwBootPromSource=wfHwBootPromSource, wfHwConfigFile=wfHwConfigFile, wfHwTable=wfHwTable, wfHwSparePromDate=wfHwSparePromDate, wfHwBabyBdRev=wfHwBabyBdRev, wfBCNFanStatus=wfBCNFanStatus, wfHwBpRev=wfHwBpRev, wfHwBootPromDate=wfHwBootPromDate, wfRASNPwrSupply2=wfRASNPwrSupply2, wfHwDaughterBdSerialNumber=wfHwDaughterBdSerialNumber, wfRASNRPSUPresent=wfRASNRPSUPresent, wfHwSparePromRev=wfHwSparePromRev, wfPowerSupply1=wfPowerSupply1, wfHwModSerialNumber=wfHwModSerialNumber, wfHwDiagPromRev=wfHwDiagPromRev, wfHwModDaughterBd2SerialNumber=wfHwModDaughterBd2SerialNumber, wfHwActiveImageName=wfHwActiveImageName, wfFanStatus2=wfFanStatus2, wfHwFastPacketCacheSize=wfHwFastPacketCacheSize, wfHwBabyBdSerialNumber=wfHwBabyBdSerialNumber, wfBCNPwrSupply3=wfBCNPwrSupply3, wfHwModIdOpt=wfHwModIdOpt, wfHwModDaughterBd1Rev=wfHwModDaughterBd1Rev, wfFanStatus1=wfFanStatus1, wfModDiagStatus=wfModDiagStatus, wfHwConfigServer=wfHwConfigServer, wfHwSlot=wfHwSlot, wfHwModDaughterBd1IdOpt=wfHwModDaughterBd1IdOpt, wfBCNPwrSupply2=wfBCNPwrSupply2, wfHwModDaughterBd1SerialNumber=wfHwModDaughterBd1SerialNumber, wfHwEntry=wfHwEntry, wfHwModDaughterBd2AwRev=wfHwModDaughterBd2AwRev, wfHwFileSysPresent=wfHwFileSysPresent, wfFanSpeed=wfFanSpeed, wfHwBabyBdIdOpt=wfHwBabyBdIdOpt, wfHwActiveImageSource=wfHwActiveImageSource)
