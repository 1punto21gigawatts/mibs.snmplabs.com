#
# PySNMP MIB module JUNIPER-POWER-SUPPLY-UNIT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/JUNIPER-POWER-SUPPLY-UNIT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:00:47 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint")
jnxContentsContainerIndex, jnxContentsL1Index, jnxContentsL2Index, jnxContentsL3Index = mibBuilder.importSymbols("JUNIPER-MIB", "jnxContentsContainerIndex", "jnxContentsL1Index", "jnxContentsL2Index", "jnxContentsL3Index")
jnxPsuMIBRoot, = mibBuilder.importSymbols("JUNIPER-SMI", "jnxPsuMIBRoot")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, ModuleIdentity, Bits, Counter32, MibIdentifier, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, IpAddress, Counter64, iso, ObjectIdentity, Gauge32, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "ModuleIdentity", "Bits", "Counter32", "MibIdentifier", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "IpAddress", "Counter64", "iso", "ObjectIdentity", "Gauge32", "Unsigned32")
TextualConvention, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "TruthValue")
jnxPsuMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 58, 1))
jnxPsuMIB.setRevisions(('2010-01-27 00:00', '2010-05-13 00:00', '2010-10-27 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: jnxPsuMIB.setRevisionsDescriptions(('Initial revision.', 'Added new OIDs for power budget statistics which gives details of Power reserved for Chassis and the Total power allocated to Chassis including for each FPC. Added new Table jnxPsuFpcPowerTable which gives the Priority assigned and Power allocated to each FPC.', 'Added new OIDs for power budget statistics which gives details of Power reserved for System dynamically.',))
if mibBuilder.loadTexts: jnxPsuMIB.setLastUpdated('201010270000Z')
if mibBuilder.loadTexts: jnxPsuMIB.setOrganization('Juniper Networks, Inc.')
if mibBuilder.loadTexts: jnxPsuMIB.setContactInfo('Juniper Technical Assistance Center Juniper Networks, Inc. 1194 N. Mathilda Avenue Sunnyvale, CA 94089 E-mail: support@juniper.net')
if mibBuilder.loadTexts: jnxPsuMIB.setDescription('The Juniper Supply Unit MIB definitions for enabling power monitoring and management of a juniper device.')
jnxPsuNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 58, 1, 1))
jnxPsuObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 58, 1, 2))
jnxPsuScalars = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 58, 1, 2, 1))
jnxPsuAvailableDeviceCount = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 58, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPsuAvailableDeviceCount.setStatus('current')
if mibBuilder.loadTexts: jnxPsuAvailableDeviceCount.setDescription('Gives the number of PSU units available online in the System.')
jnxPsuAvailableAveragePowerSupply = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 58, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPsuAvailableAveragePowerSupply.setStatus('current')
if mibBuilder.loadTexts: jnxPsuAvailableAveragePowerSupply.setDescription('Gives the total average power that the System can supply from the available online units in Watts.')
jnxPsuAvailableMaxPowerSupply = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 58, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPsuAvailableMaxPowerSupply.setStatus('current')
if mibBuilder.loadTexts: jnxPsuAvailableMaxPowerSupply.setDescription('Gives the total maximum power that the System can supply from the available online units in Watts.')
jnxPsuRedundancy = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 58, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("nPlusNRedundancy", 1), ("nPlusOneRedundancy", 2), ("none", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPsuRedundancy.setStatus('current')
if mibBuilder.loadTexts: jnxPsuRedundancy.setDescription('PSU power redundancy configuration.')
jnxPsuChassisPowerReserved = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 58, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPsuChassisPowerReserved.setStatus('current')
if mibBuilder.loadTexts: jnxPsuChassisPowerReserved.setDescription('Power reserved for Chassis in Watts.')
jnxPsuChassisPowerAllocated = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 58, 1, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPsuChassisPowerAllocated.setStatus('current')
if mibBuilder.loadTexts: jnxPsuChassisPowerAllocated.setDescription('Total power allocated for chassis and all the FPCs in Watts.')
jnxPsuRedundantPowerAvailable = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 58, 1, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPsuRedundantPowerAvailable.setStatus('current')
if mibBuilder.loadTexts: jnxPsuRedundantPowerAvailable.setDescription('Power(in Watts) that is still available for allocation even while supporting redundancy with the present usage.')
jnxPsuTotalPowerAvailable = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 58, 1, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPsuTotalPowerAvailable.setStatus('current')
if mibBuilder.loadTexts: jnxPsuTotalPowerAvailable.setDescription('Power(in Watts) which could be made available for further allocation without supporting any redundancy with the present usage.')
jnxPsuChassisPowerConsumed = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 58, 1, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPsuChassisPowerConsumed.setStatus('current')
if mibBuilder.loadTexts: jnxPsuChassisPowerConsumed.setDescription('Total power consumed by the entire system rounded to the nearest integer. This is calculated using the PowerFactor, Current and Voltage values of each PSU that is online and connected to the System.')
jnxPsuTemperatureInflow = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 58, 1, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPsuTemperatureInflow.setStatus('current')
if mibBuilder.loadTexts: jnxPsuTemperatureInflow.setDescription('Average inflow temperature calculated from all the available input sensors on the master RE.')
jnxPsuTemperatureOutflow = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 58, 1, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPsuTemperatureOutflow.setStatus('current')
if mibBuilder.loadTexts: jnxPsuTemperatureOutflow.setDescription('Average outflow temperature calculated from all the available output sensors on the master RE.')
jnxPsuTemperatureInflowSamples = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 58, 1, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPsuTemperatureInflowSamples.setStatus('current')
if mibBuilder.loadTexts: jnxPsuTemperatureInflowSamples.setDescription('The number of samples being taken while calculating jnxPsuTemperatureInflow.')
jnxPsuTemperatureOutflowSamples = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 58, 1, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPsuTemperatureOutflowSamples.setStatus('current')
if mibBuilder.loadTexts: jnxPsuTemperatureOutflowSamples.setDescription('The number of samples being taken while calculating jnxPsuTemperatureOutflow.')
jnxPsuTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 58, 1, 2, 2), )
if mibBuilder.loadTexts: jnxPsuTable.setStatus('current')
if mibBuilder.loadTexts: jnxPsuTable.setDescription('A list of power entries for each PSU component.')
jnxPsuEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 58, 1, 2, 2, 1), ).setIndexNames((0, "JUNIPER-MIB", "jnxContentsContainerIndex"), (0, "JUNIPER-MIB", "jnxContentsL1Index"), (0, "JUNIPER-MIB", "jnxContentsL2Index"), (0, "JUNIPER-MIB", "jnxContentsL3Index"))
if mibBuilder.loadTexts: jnxPsuEntry.setStatus('current')
if mibBuilder.loadTexts: jnxPsuEntry.setDescription('Defines an entry in jnxPsuTable. ')
jnxPsuAvgPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 58, 1, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPsuAvgPower.setStatus('current')
if mibBuilder.loadTexts: jnxPsuAvgPower.setDescription('Buffer that contains the average power used, in Watts for each component.')
jnxPsuMaxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 58, 1, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPsuMaxPower.setStatus('current')
if mibBuilder.loadTexts: jnxPsuMaxPower.setDescription('Buffer that contains the max power available, in Watts for each component.')
jnxPsuMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 58, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("single", 1), ("three", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPsuMode.setStatus('current')
if mibBuilder.loadTexts: jnxPsuMode.setDescription('Mode for each PSU component.')
jnxPsuOutletCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 58, 1, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPsuOutletCount.setStatus('current')
if mibBuilder.loadTexts: jnxPsuOutletCount.setDescription('The number of outlets (regardless of their current state) present on this psu component, default is 0.')
jnxPsuEnvironmentTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 58, 1, 2, 3), )
if mibBuilder.loadTexts: jnxPsuEnvironmentTable.setStatus('current')
if mibBuilder.loadTexts: jnxPsuEnvironmentTable.setDescription('A list of PSU Environment entries.')
jnxPsuEnvironmentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 58, 1, 2, 3, 1), ).setIndexNames((0, "JUNIPER-MIB", "jnxContentsContainerIndex"), (0, "JUNIPER-MIB", "jnxContentsL1Index"), (0, "JUNIPER-MIB", "jnxContentsL2Index"), (0, "JUNIPER-MIB", "jnxContentsL3Index"))
if mibBuilder.loadTexts: jnxPsuEnvironmentEntry.setStatus('current')
if mibBuilder.loadTexts: jnxPsuEnvironmentEntry.setDescription('Defines an entry in jnxPsuEnvironmentTable.')
jnxPsuThermalValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 58, 1, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPsuThermalValue.setStatus('current')
if mibBuilder.loadTexts: jnxPsuThermalValue.setDescription('Temparature at each component in degrees Celsius rounded to the nearest integer.')
jnxPsuHumidityValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 58, 1, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPsuHumidityValue.setStatus('current')
if mibBuilder.loadTexts: jnxPsuHumidityValue.setDescription('Humidity at each component in percentage.')
jnxPsuOutletTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 58, 1, 2, 4), )
if mibBuilder.loadTexts: jnxPsuOutletTable.setStatus('current')
if mibBuilder.loadTexts: jnxPsuOutletTable.setDescription('Gives details of each Power outlet`s state, capacity to supply power, and other details.')
jnxPsuOutletEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 58, 1, 2, 4, 1), ).setIndexNames((0, "JUNIPER-MIB", "jnxContentsContainerIndex"), (0, "JUNIPER-MIB", "jnxContentsL1Index"), (0, "JUNIPER-MIB", "jnxContentsL2Index"), (0, "JUNIPER-MIB", "jnxContentsL3Index"))
if mibBuilder.loadTexts: jnxPsuOutletEntry.setStatus('current')
if mibBuilder.loadTexts: jnxPsuOutletEntry.setDescription('A value contained within the OutletEntry')
jnxPsuOutletName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 58, 1, 2, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPsuOutletName.setStatus('current')
if mibBuilder.loadTexts: jnxPsuOutletName.setDescription('Outlet name associated to the power supply unit for each PSU Component.')
jnxPsuOutletDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 58, 1, 2, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPsuOutletDescription.setStatus('current')
if mibBuilder.loadTexts: jnxPsuOutletDescription.setDescription('Outlet description associated to the power supply unit for each PSU Component.')
jnxPsuOutletAvgPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 58, 1, 2, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPsuOutletAvgPower.setStatus('current')
if mibBuilder.loadTexts: jnxPsuOutletAvgPower.setDescription('Buffer that contains the average power used, in Watts for each component.')
jnxPsuOutletMaxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 58, 1, 2, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPsuOutletMaxPower.setStatus('current')
if mibBuilder.loadTexts: jnxPsuOutletMaxPower.setDescription('Buffer that contains the maximum power available, in Watts for each component.')
jnxPsuOutletCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 58, 1, 2, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPsuOutletCurrent.setStatus('current')
if mibBuilder.loadTexts: jnxPsuOutletCurrent.setDescription('PSU output current in milliamps rounded to the nearest integer.')
jnxPsuOutletStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 58, 1, 2, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPsuOutletStatus.setStatus('current')
if mibBuilder.loadTexts: jnxPsuOutletStatus.setDescription('The value of the operational status for the given outlet. This can also be used to set the outlet state')
jnxPsuOutletVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 58, 1, 2, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPsuOutletVoltage.setStatus('current')
if mibBuilder.loadTexts: jnxPsuOutletVoltage.setDescription('Output voltage in Volts rounded to the nearest integer.')
jnxPsuOutletPowerFactorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 58, 1, 2, 4, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPsuOutletPowerFactorValue.setStatus('current')
if mibBuilder.loadTexts: jnxPsuOutletPowerFactorValue.setDescription('Power factor percentage of each PSU (2k/3k). Algorithm for calculation of Power Factor is below. For PowerOut values that fall in between 618.93W and 915.24W, say 700W, the appropriate PF ranges from 0.910191 & 0.917994. Following linear equation could help deduce a fairly accurate input power value. Linear equation y = mx + b (where m is the slope and b is the Y intercept) Slope m = (y2 - y1) / (x2 - x1) Y intercept b = y - mx Plugging it all together for our example: m = (915.24 - 618.93) / (0.917994 - 0.910191) = 37973.86 b = 915.24 - (37973.86 * 0.917994) = -33944.5 for 700W (y), our efficiency (x) would then be: x = (700 - (-33944.5)) / 37973.86 = 0.912326 = 91% PowerIn = 700W /0.912326 = 767.26W ')
jnxPsuOutletPowerConsumed = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 58, 1, 2, 4, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPsuOutletPowerConsumed.setStatus('current')
if mibBuilder.loadTexts: jnxPsuOutletPowerConsumed.setDescription('Power Consumed by each outlet units in Watts.')
jnxPsuFpcPowerTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 58, 1, 2, 5), )
if mibBuilder.loadTexts: jnxPsuFpcPowerTable.setStatus('current')
if mibBuilder.loadTexts: jnxPsuFpcPowerTable.setDescription("A list of entries for each FPC(Flexible PIC Concentrator) giving it's assigned priority and power being allocated. More information on FPCs can be found in JUNIPER-MIB.")
jnxPsuFpcPowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 58, 1, 2, 5, 1), ).setIndexNames((0, "JUNIPER-MIB", "jnxContentsContainerIndex"), (0, "JUNIPER-MIB", "jnxContentsL1Index"), (0, "JUNIPER-MIB", "jnxContentsL2Index"), (0, "JUNIPER-MIB", "jnxContentsL3Index"))
if mibBuilder.loadTexts: jnxPsuFpcPowerEntry.setStatus('current')
if mibBuilder.loadTexts: jnxPsuFpcPowerEntry.setDescription('A value contained within the FpcPowerEntry')
jnxPsuFpcPowerPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 58, 1, 2, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPsuFpcPowerPriority.setStatus('current')
if mibBuilder.loadTexts: jnxPsuFpcPowerPriority.setDescription('The Power budget priority assigned to the FPC. Lower number means higher priority.')
jnxPsuFpcPowerAllocated = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 58, 1, 2, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPsuFpcPowerAllocated.setStatus('current')
if mibBuilder.loadTexts: jnxPsuFpcPowerAllocated.setDescription('The Power allocated to the FPC in Watts.')
mibBuilder.exportSymbols("JUNIPER-POWER-SUPPLY-UNIT-MIB", jnxPsuScalars=jnxPsuScalars, jnxPsuTotalPowerAvailable=jnxPsuTotalPowerAvailable, jnxPsuAvailableAveragePowerSupply=jnxPsuAvailableAveragePowerSupply, jnxPsuThermalValue=jnxPsuThermalValue, jnxPsuEntry=jnxPsuEntry, jnxPsuTemperatureInflow=jnxPsuTemperatureInflow, jnxPsuOutletName=jnxPsuOutletName, jnxPsuFpcPowerAllocated=jnxPsuFpcPowerAllocated, jnxPsuOutletMaxPower=jnxPsuOutletMaxPower, jnxPsuChassisPowerConsumed=jnxPsuChassisPowerConsumed, jnxPsuChassisPowerReserved=jnxPsuChassisPowerReserved, jnxPsuOutletStatus=jnxPsuOutletStatus, jnxPsuFpcPowerPriority=jnxPsuFpcPowerPriority, jnxPsuOutletAvgPower=jnxPsuOutletAvgPower, jnxPsuObjects=jnxPsuObjects, jnxPsuOutletTable=jnxPsuOutletTable, jnxPsuOutletPowerConsumed=jnxPsuOutletPowerConsumed, jnxPsuTemperatureOutflowSamples=jnxPsuTemperatureOutflowSamples, jnxPsuMode=jnxPsuMode, jnxPsuOutletEntry=jnxPsuOutletEntry, jnxPsuNotifications=jnxPsuNotifications, jnxPsuTable=jnxPsuTable, jnxPsuFpcPowerTable=jnxPsuFpcPowerTable, jnxPsuTemperatureInflowSamples=jnxPsuTemperatureInflowSamples, jnxPsuOutletPowerFactorValue=jnxPsuOutletPowerFactorValue, jnxPsuTemperatureOutflow=jnxPsuTemperatureOutflow, jnxPsuRedundancy=jnxPsuRedundancy, jnxPsuOutletCount=jnxPsuOutletCount, jnxPsuAvailableDeviceCount=jnxPsuAvailableDeviceCount, jnxPsuChassisPowerAllocated=jnxPsuChassisPowerAllocated, jnxPsuEnvironmentTable=jnxPsuEnvironmentTable, jnxPsuOutletDescription=jnxPsuOutletDescription, jnxPsuOutletVoltage=jnxPsuOutletVoltage, PYSNMP_MODULE_ID=jnxPsuMIB, jnxPsuMaxPower=jnxPsuMaxPower, jnxPsuEnvironmentEntry=jnxPsuEnvironmentEntry, jnxPsuRedundantPowerAvailable=jnxPsuRedundantPowerAvailable, jnxPsuHumidityValue=jnxPsuHumidityValue, jnxPsuFpcPowerEntry=jnxPsuFpcPowerEntry, jnxPsuAvailableMaxPowerSupply=jnxPsuAvailableMaxPowerSupply, jnxPsuMIB=jnxPsuMIB, jnxPsuOutletCurrent=jnxPsuOutletCurrent, jnxPsuAvgPower=jnxPsuAvgPower)
