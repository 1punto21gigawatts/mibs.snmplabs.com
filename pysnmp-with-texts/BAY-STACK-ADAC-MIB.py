#
# PySNMP MIB module BAY-STACK-ADAC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BAY-STACK-ADAC-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:34:54 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint")
InterfaceIndex, InterfaceIndexOrZero = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "InterfaceIndexOrZero")
PortList, VlanIdOrNone = mibBuilder.importSymbols("Q-BRIDGE-MIB", "PortList", "VlanIdOrNone")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, Counter64, Counter32, TimeTicks, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, MibIdentifier, IpAddress, ModuleIdentity, ObjectIdentity, NotificationType, Gauge32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter64", "Counter32", "TimeTicks", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "MibIdentifier", "IpAddress", "ModuleIdentity", "ObjectIdentity", "NotificationType", "Gauge32", "iso")
TextualConvention, TruthValue, MacAddress, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "MacAddress", "DisplayString", "RowStatus")
bayStackMibs, = mibBuilder.importSymbols("SYNOPTICS-ROOT-MIB", "bayStackMibs")
bayStackAdacMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 45, 5, 9))
bayStackAdacMib.setRevisions(('2014-04-14 00:00', '2009-05-20 00:00', '2006-10-16 00:00', '2006-05-24 00:00', '2006-03-13 00:00', '2005-04-12 00:00', '2004-12-13 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: bayStackAdacMib.setRevisionsDescriptions(('v7: Added bsAdacUplinkType.', 'v6: Added bsAdacCallServerPortList and bsAdacUplinkPortList.', 'v5: Added bsAdacPortOperEnable, bsAdacPortMacDetectionEnable, bsAdacPortLldpDetectionEnable, bsAdacPortOperDisabledNotification', 'v4: Removed untagAll enumeration.', 'v3: Added bsAdacOperEnable, bsAdacPortTaggedFramesPvid, bsAdacPortTaggedFramesTagging and bsAdacPortType', 'v2: Added support for MAC Address Ranges', 'v1: Initial version.',))
if mibBuilder.loadTexts: bayStackAdacMib.setLastUpdated('201404140000Z')
if mibBuilder.loadTexts: bayStackAdacMib.setOrganization('Avaya')
if mibBuilder.loadTexts: bayStackAdacMib.setContactInfo('avaya.com')
if mibBuilder.loadTexts: bayStackAdacMib.setDescription("Avaya Auto-Discovery/Auto-Configuration of Avaya IP Phones MIB Copyright 2014 Avaya. All rights reserved. This Avaya SNMP Management Information Base Specification embodies Avaya confidential and proprietary intellectual property. Avaya retains all title and ownership in the Specification, including any revisions. This Specification is supplied 'AS IS,' and Avaya makes no warranty, either express or implied, as to the use, operation, condition, or performance of the Specification.")
bsAdacNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 5, 9, 0))
bsAdacObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 5, 9, 1))
bsAdacScalars = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 5, 9, 1, 1))
bsAdacAdminEnable = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 9, 1, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsAdacAdminEnable.setStatus('current')
if mibBuilder.loadTexts: bsAdacAdminEnable.setDescription('This object is used to administratively enable or disable ADAC. A value of true(1) means ADAC should be enabled, while a value of false(2) means ADAC should be disabled. Note that ADAC might remain operationally disabled due to other conditions (such as missing Uplink and Call Server ports). To determine whether ADAC is operationally enabled, see bsAdacOperEnable.')
bsAdacOperatingMode = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 9, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("untaggedFramesBasic", 1), ("untaggedFramesAdvanced", 2), ("taggedFrames", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsAdacOperatingMode.setStatus('current')
if mibBuilder.loadTexts: bsAdacOperatingMode.setDescription('This operating mode must be set depending on how the IP Phones are configured to send frames (tagged/untagged) and on the desired level of complexity for auto-configuration. A value of untaggedFramesBasic(1) means that the IP Phones are configured to send untagged frames and no Voice-VLAN will be created (only apply QoS). A value of untaggedFramesAdvanced(2) means that the IP Phones are configured to send untagged frames and the Voice-VLAN will be created too, beside applying QoS. A value of taggedFrames(3) means that the IP Phones are configured to send tagged frames; the Voice-VLAN will be created and QoS will be applied accordingly. This object cannot take the value untaggedFramesAdvanced(2) or taggedFrames(3) if bsAdacVoiceVlan has the value 0, or if both bsAdacCallServerPort and bsAdacUplinkPort have the value 0.')
bsAdacCallServerPort = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 9, 1, 1, 4), InterfaceIndexOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsAdacCallServerPort.setStatus('current')
if mibBuilder.loadTexts: bsAdacCallServerPort.setDescription('The port on which the Call Server is connected. This value is used only when the current operating mode is either untaggedFramesAdvanced(2) or taggedFrames(3). It may not be changed to 0 if the current operating mode is one of these values. Note that an implementation should support either bsAdacCallServerPort and bsAdacUplinkPort, or bsAdacCallServerPortList and bsAdacUplinkPortList, but not both.')
bsAdacUplinkPort = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 9, 1, 1, 5), InterfaceIndexOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsAdacUplinkPort.setStatus('current')
if mibBuilder.loadTexts: bsAdacUplinkPort.setDescription('The uplink port is used usually when the Call Server is not connected directly to the current module/stack. This value is used only when the current operating mode is either untaggedFramesAdvanced(2) or taggedFrames(3). It may not be changed to 0 if the current operating mode is one of these values. Note that an implementation should support either bsAdacCallServerPort and bsAdacUplinkPort, or bsAdacCallServerPortList and bsAdacUplinkPortList, but not both.')
bsAdacVoiceVlan = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 9, 1, 1, 6), VlanIdOrNone()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsAdacVoiceVlan.setStatus('current')
if mibBuilder.loadTexts: bsAdacVoiceVlan.setDescription('A value that uniquely identifies the Voice Virtual LAN associated with ADAC. This value it is used only when the current operating mode is untaggedFramesAdvanced(2) or taggedFrames(3). It may not be changed to 0 if the current operating mode is one of these values.')
bsAdacNotificationControlEnable = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 9, 1, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsAdacNotificationControlEnable.setStatus('current')
if mibBuilder.loadTexts: bsAdacNotificationControlEnable.setDescription('This object controls whether port status changes will result in generation of a bsAdacPortConfigNotification. The value true(1) means that the notifications will be generated. The value false(2) means that they will not be generated.')
bsAdacMacAddrRangeControl = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 9, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("clearTable", 2), ("defaultTable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsAdacMacAddrRangeControl.setStatus('current')
if mibBuilder.loadTexts: bsAdacMacAddrRangeControl.setDescription('This object always returns none(1) when retrieved. When set to clearTable(2), it will delete all entries from the bsAdacMacAddrRangeTable. When set to defaultTable(3), it will delete all entries from the bsAdacMacAddrRangeTable and replace them with factory default entries.')
bsAdacOperEnable = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 9, 1, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsAdacOperEnable.setStatus('current')
if mibBuilder.loadTexts: bsAdacOperEnable.setDescription('This object indicates whether ADAC is operationally enabled. A value of true(1) indicates that it is enabled, while a value of false(2) indicates that it is disabled. Note a value of false(2) for this object and a value of true(1) for bsAdacAdminEnable indicates that ADAC is not operational due to some condition such as missing Uplink and Call Server ports.')
bsAdacCallServerPortList = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 9, 1, 1, 10), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsAdacCallServerPortList.setStatus('current')
if mibBuilder.loadTexts: bsAdacCallServerPortList.setDescription('The ports on which the Call Server is connected. This value is used only when the current operating mode is either untaggedFramesAdvanced(2) or taggedFrames(3). It may not be changed to an empty set of ports if the current operating mode is one of these values. Note that an implementation should support either bsAdacCallServerPort and bsAdacUplinkPort, or bsAdacCallServerPortList and bsAdacUplinkPortList, but not both.')
bsAdacUplinkPortList = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 9, 1, 1, 11), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsAdacUplinkPortList.setStatus('current')
if mibBuilder.loadTexts: bsAdacUplinkPortList.setDescription('The uplink ports are used usually when the Call Server is not connected directly to the current module/stack. This value is used only when the current operating mode is either untaggedFramesAdvanced(2) or taggedFrames(3). It may not be changed to an empty set of ports if the current operating mode is one of these values. Note that an implementation should support either bsAdacCallServerPort and bsAdacUplinkPort, or bsAdacCallServerPortList and bsAdacUplinkPortList, but not both.')
bsAdacUplinkType = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 9, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("port", 1), ("spbm", 2))).clone('port')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsAdacUplinkType.setStatus('current')
if mibBuilder.loadTexts: bsAdacUplinkType.setDescription('The ADAC uplink type. A value of port(1) means that the ADAC uplink is the clasical port type uplink. bsAdacUplinkPortList will be used to specify the actual uplink ports list. A value of spbm(2) means that the uplink is over SPBM. With this we inform ADAC that instead of a classical uplink-port it will use an I-SID that will have to be associated by the user with the ADAC Voice-VLAN. When setting the ADAC uplink over SPBM, all the currently set uplink ports will be removed.')
bsAdacPortTable = MibTable((1, 3, 6, 1, 4, 1, 45, 5, 9, 1, 2), )
if mibBuilder.loadTexts: bsAdacPortTable.setStatus('current')
if mibBuilder.loadTexts: bsAdacPortTable.setDescription('A table of objects that display and control the port attributes of ADAC.')
bsAdacPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 5, 9, 1, 2, 1), ).setIndexNames((0, "BAY-STACK-ADAC-MIB", "bsAdacPortIndex"))
if mibBuilder.loadTexts: bsAdacPortEntry.setStatus('current')
if mibBuilder.loadTexts: bsAdacPortEntry.setDescription('A set of objects that display and control the port attributes of ADAC.')
bsAdacPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 9, 1, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: bsAdacPortIndex.setStatus('current')
if mibBuilder.loadTexts: bsAdacPortIndex.setDescription('An index value that uniquely identifies a port. This value is similar to ifIndex in MIB2.')
bsAdacPortAdminEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 9, 1, 2, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsAdacPortAdminEnable.setStatus('current')
if mibBuilder.loadTexts: bsAdacPortAdminEnable.setDescription('true (1) Auto-Detection (and implicitly Auto-Configuration) of Avaya IP Phones is enabled on this interface. false (2) Auto-Detection (and implicitly Auto-Configuration) of Avaya IP Phones is disabled on this interface.')
bsAdacPortConfigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 9, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("configApplied", 1), ("configNotApplied", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsAdacPortConfigStatus.setStatus('current')
if mibBuilder.loadTexts: bsAdacPortConfigStatus.setDescription('Describes the Auto-Configuration status for the port. A value of configApplied(1) means that the ADAC configuration is applied for this port. A value of configNotApplied(2) means that the ADAC configuration is not applied for this port.')
bsAdacPortTaggedFramesPvid = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 9, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsAdacPortTaggedFramesPvid.setStatus('current')
if mibBuilder.loadTexts: bsAdacPortTaggedFramesPvid.setDescription("This is the PVID value that Auto-Configuration will try to apply for ports which have Auto-Detection enabled (bsAdacPortAdminEnable is set to true(1)), and which are running in Tagged-Frames operational mode (bsAdacOperatingMode is set to taggedFrames(3)). A value of 0 means that the Auto-Configuration will not change the PVID of the respective port. If the VLAN with the ID equal with this PVID does not exist when Auto-Configuration is applied to a port, then Auto-Configuration won't change the port's PVID (it will ignore the current value of this object, and treat it as if its value is currently 0).")
bsAdacPortTaggedFramesTagging = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 9, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("tagAll", 1), ("tagPvidOnly", 2), ("untagPvidOnly", 3), ("noChange", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsAdacPortTaggedFramesTagging.setStatus('current')
if mibBuilder.loadTexts: bsAdacPortTaggedFramesTagging.setDescription('This is the tagging value that Auto-Configuration will apply for ports which have Auto-Detection enabled (bsAdacPortAdminEnable is set to true(1)), and which are running in Tagged-Frames operational mode (bsAdacOperatingMode is set to taggedFrames(3)). A value of tagAll(1) means that the Telephony ports will have the tagging enabled on all frames. A value of tagPvidOnly(2) means that the Telephony ports will have the tagging enabled on frames matching the PVID of the port. A value of untagPvidOnly(3) means that the Telephony ports will have the tagging disabled on frames matching the PVID of the port. A value of noChange(4) means that the Auto-Configuration will not change the tagging of the respective port.')
bsAdacPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 9, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("telephony", 1), ("callServer", 2), ("uplink", 3), ("other", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsAdacPortType.setStatus('current')
if mibBuilder.loadTexts: bsAdacPortType.setDescription("Describes how ADAC classifies this port. A value of telephony(1) means that the Auto-Detection is enabled for this port (bsAdacPortAdminEnable is set to true(1)). A value of callServer(2) means that the port is configured as Call Server. A value of uplink(3) means that the port is either configured as Uplink or it's part of the same trunk as the current set Uplink port. A value of other(4) means that the port has none of the types above.")
bsAdacPortOperEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 9, 1, 2, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsAdacPortOperEnable.setStatus('current')
if mibBuilder.loadTexts: bsAdacPortOperEnable.setDescription('This object indicates whether Auto-Detection is operationally enabled on port. A value of true(1) indicates that it is enabled, while a value of false(2) indicates that it is disabled. Note a value of false(2) for this object and a value of true(1) for bsAdacPortAdminEnable indicates that Auto-Detection (and implicitly Auto-Configuration) is not operational due to some condition such as reaching the maximum number of devices supported per port.')
bsAdacPortMacDetectionEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 9, 1, 2, 1, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsAdacPortMacDetectionEnable.setStatus('current')
if mibBuilder.loadTexts: bsAdacPortMacDetectionEnable.setDescription('true (1) Auto-Detection of Avaya IP Phones based on MAC Address is enabled on this interface. false (2) Auto-Detection of Avaya IP Phones based on MAC Address is disabled on this interface. It cannot be set to false(2) if no other supported detection mechanism is enabled on port.')
bsAdacPortLldpDetectionEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 9, 1, 2, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsAdacPortLldpDetectionEnable.setStatus('current')
if mibBuilder.loadTexts: bsAdacPortLldpDetectionEnable.setDescription('true (1) Auto-Detection of Avaya IP Phones based on 802.1ab is enabled on this interface. false (2) Auto-Detection of Avaya IP Phones based on 802.1ab is disabled on this interface. It cannot be set to false(2) if no other supported detection mechanism is enabled on port.')
bsAdacMacAddrRangeTable = MibTable((1, 3, 6, 1, 4, 1, 45, 5, 9, 1, 3), )
if mibBuilder.loadTexts: bsAdacMacAddrRangeTable.setStatus('current')
if mibBuilder.loadTexts: bsAdacMacAddrRangeTable.setDescription('A table of objects that display and control the attributes of the MAC Address ranges supported by ADAC. Overlapping ranges are not allowed and the attempts to create an entry that overlaps an existing entry will fail.')
bsAdacMacAddrRangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 5, 9, 1, 3, 1), ).setIndexNames((0, "BAY-STACK-ADAC-MIB", "bsAdacMacAddrRangeLowEndIndex"), (0, "BAY-STACK-ADAC-MIB", "bsAdacMacAddrRangeHighEndIndex"))
if mibBuilder.loadTexts: bsAdacMacAddrRangeEntry.setStatus('current')
if mibBuilder.loadTexts: bsAdacMacAddrRangeEntry.setDescription('A set of objects that display and control the attributes of the MAC Address ranges supported by ADAC.')
bsAdacMacAddrRangeLowEndIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 9, 1, 3, 1, 1), MacAddress())
if mibBuilder.loadTexts: bsAdacMacAddrRangeLowEndIndex.setStatus('current')
if mibBuilder.loadTexts: bsAdacMacAddrRangeLowEndIndex.setDescription('The low end of the MAC Address range.')
bsAdacMacAddrRangeHighEndIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 9, 1, 3, 1, 2), MacAddress())
if mibBuilder.loadTexts: bsAdacMacAddrRangeHighEndIndex.setStatus('current')
if mibBuilder.loadTexts: bsAdacMacAddrRangeHighEndIndex.setDescription('The high end of the MAC Address range.')
bsAdacMacAddrRangeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 9, 1, 3, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsAdacMacAddrRangeRowStatus.setStatus('current')
if mibBuilder.loadTexts: bsAdacMacAddrRangeRowStatus.setDescription('This is used to control creation/deletion of entries in this table.')
bsAdacPortConfigNotification = NotificationType((1, 3, 6, 1, 4, 1, 45, 5, 9, 0, 1)).setObjects(("BAY-STACK-ADAC-MIB", "bsAdacPortConfigStatus"))
if mibBuilder.loadTexts: bsAdacPortConfigNotification.setStatus('current')
if mibBuilder.loadTexts: bsAdacPortConfigNotification.setDescription('This notification indicates if the Auto-Configuration is applied or not on the port. It will be sent on every status change.')
bsAdacPortOperDisabledNotification = NotificationType((1, 3, 6, 1, 4, 1, 45, 5, 9, 0, 2)).setObjects(("BAY-STACK-ADAC-MIB", "bsAdacPortOperEnable"))
if mibBuilder.loadTexts: bsAdacPortOperDisabledNotification.setStatus('current')
if mibBuilder.loadTexts: bsAdacPortOperDisabledNotification.setDescription('This notification indicates if a port having bsAdacPortAdminEnable set to true(1) changes its bsAdacPortOperEnable from true(1) to false(2) due to some condition such as reaching the maximum number of devices supported per port.')
mibBuilder.exportSymbols("BAY-STACK-ADAC-MIB", bsAdacPortTable=bsAdacPortTable, bsAdacPortTaggedFramesPvid=bsAdacPortTaggedFramesPvid, bsAdacPortConfigStatus=bsAdacPortConfigStatus, bsAdacCallServerPortList=bsAdacCallServerPortList, bsAdacMacAddrRangeRowStatus=bsAdacMacAddrRangeRowStatus, bsAdacPortConfigNotification=bsAdacPortConfigNotification, bsAdacMacAddrRangeEntry=bsAdacMacAddrRangeEntry, bsAdacOperatingMode=bsAdacOperatingMode, bsAdacObjects=bsAdacObjects, bsAdacMacAddrRangeControl=bsAdacMacAddrRangeControl, bsAdacPortOperEnable=bsAdacPortOperEnable, bsAdacMacAddrRangeLowEndIndex=bsAdacMacAddrRangeLowEndIndex, bsAdacPortMacDetectionEnable=bsAdacPortMacDetectionEnable, bayStackAdacMib=bayStackAdacMib, bsAdacPortType=bsAdacPortType, bsAdacPortTaggedFramesTagging=bsAdacPortTaggedFramesTagging, bsAdacNotificationControlEnable=bsAdacNotificationControlEnable, bsAdacMacAddrRangeTable=bsAdacMacAddrRangeTable, bsAdacPortAdminEnable=bsAdacPortAdminEnable, bsAdacUplinkPortList=bsAdacUplinkPortList, bsAdacCallServerPort=bsAdacCallServerPort, bsAdacMacAddrRangeHighEndIndex=bsAdacMacAddrRangeHighEndIndex, bsAdacScalars=bsAdacScalars, bsAdacPortIndex=bsAdacPortIndex, PYSNMP_MODULE_ID=bayStackAdacMib, bsAdacPortEntry=bsAdacPortEntry, bsAdacUplinkPort=bsAdacUplinkPort, bsAdacNotifications=bsAdacNotifications, bsAdacUplinkType=bsAdacUplinkType, bsAdacVoiceVlan=bsAdacVoiceVlan, bsAdacPortOperDisabledNotification=bsAdacPortOperDisabledNotification, bsAdacOperEnable=bsAdacOperEnable, bsAdacPortLldpDetectionEnable=bsAdacPortLldpDetectionEnable, bsAdacAdminEnable=bsAdacAdminEnable)
