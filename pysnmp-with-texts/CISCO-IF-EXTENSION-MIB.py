#
# PySNMP MIB module CISCO-IF-EXTENSION-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-IF-EXTENSION-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:54:44 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
IfOperStatusReason, = mibBuilder.importSymbols("CISCO-TC", "IfOperStatusReason")
entPhysicalIndex, = mibBuilder.importSymbols("ENTITY-MIB", "entPhysicalIndex")
ifAdminStatus, ifOperStatus, InterfaceIndexOrZero, ifIndex, ifType, ifName = mibBuilder.importSymbols("IF-MIB", "ifAdminStatus", "ifOperStatus", "InterfaceIndexOrZero", "ifIndex", "ifType", "ifName")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, MibIdentifier, Bits, ObjectIdentity, Integer32, IpAddress, Unsigned32, NotificationType, Counter64, Gauge32, iso, TimeTicks, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "MibIdentifier", "Bits", "ObjectIdentity", "Integer32", "IpAddress", "Unsigned32", "NotificationType", "Counter64", "Gauge32", "iso", "TimeTicks", "ModuleIdentity")
TruthValue, TimeStamp, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TimeStamp", "TextualConvention", "DisplayString")
ciscoIfExtensionMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 276))
ciscoIfExtensionMIB.setRevisions(('2013-03-13 00:00', '2012-09-05 00:00', '2011-06-27 00:00', '2009-02-26 00:00', '2008-12-09 00:00', '2008-10-06 00:00', '2008-07-31 00:00', '2008-07-08 00:00', '2008-06-23 00:00', '2007-07-23 00:00', '2006-11-01 00:00', '2005-04-28 00:00', '2005-01-25 00:00', '2004-09-08 00:00', '2003-11-14 00:00', '2003-08-12 00:00', '2003-07-17 00:00', '2003-06-25 00:00', '2002-10-12 00:00', '2002-07-24 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoIfExtensionMIB.setRevisionsDescriptions(('Added new object cieIfTransceiverFrequencyConfig, cieIfFillPatternConfig, cieIfIgnoreBitErrorsConfig and cieIfIgnoreInterruptThresholdConfig to cieIfInterfaceTable. - Added a new group ciscoIfExtensionTableIntfGroup3SupR02 - Deprecated ciscoIfExtensionMIBCompliance13 - Added ciscoIfExtensionMIBCompliance14.', 'Added new object cieLinkUpDownConfig. - Added a new group cieLinkUpDownNotifConfigGroup. - Deprecated cieLinkUpDownEnable. - Deprecated cieStandardLinkUpDownVarbinds. - Deprecated ciscoIfExtensionMIBCompliance13. - Added ciscoIfExtensionMIBCompliance14.', 'Added new object cieIfSharedConfig and cieIfSpeedGroupConfig to cieIfInterfaceTable. Add cieIfVlStatsTable. - Added a new group ciscoIfExtensionTableIntfGroup3SupR01 and cieIfVlStatsGroup - Deprecated ciscoIfExtensionMIBCompliance12 - Added ciscoIfExtensionMIBCompliance13.', 'Added Textual Convention InterfaceOwnershipList - Added new object cieInterfaceOwnershipBitmap - Added new group cieIfStatusListGroupSup1 - Deprecated ciscoIfExtensionMIBCompliance11 - Added ciscoIfExtensionMIBCompliance12', 'Added new object cieIfOwner to cieIfInterfaceTable. - Added a new group ciscoIfExtensionTableIntfGroup3 - Deprecated ciscoIfExtensionTableIntfGroup2 - Deprecated ciscoIfExtensionMIBCompliance10 - Added ciscoIfExtensionMIBCompliance11', 'Added a new textual Convention IfIndexPersistenceState. - Added scalar object cieIfIndexGlobalPersistence to ciscoIfExtSystemConfig. - Deprecated scalar object cieIfIndexPersistence to ciscoIfExtSystemConfig. - Added a new object cieIfIndexPersistenceControl in cieIfIndexPersistenceTable. - Deprecated an object cieIfIndexPersistenceEnabled in cieIfIndexPersistenceTable. - Added a new group cieIfIndexPersistenceControlGroup. - Deprecated the group cieIfIndexPersistenceGroup. - Added ciscoIfExtensionMIBCompliance10 - Deprecated ciscoIfExtensionMIBCompliance9', 'Added cieIfOperStatusCause to the objects in the notification cieDelayedLinkUpDownNotif.', 'Added notification cieDelayedLinkUpDownNotif - Added scalar objects cieDelayedLinkUpDownNotifEnable and cieDelayedLinkUpDownNotifDelay to ciscoIfExtSystemConfig. - Added the following groups: cieDelayedLinkUpDownNotifNotifGroup cieDelayedLinkUpDownNotifNotifEnableGroup - Deprecated ciscoIfExtensionMIBCompliance7 - Added ciscoIfExtensionMIBCompliance8.', 'Added scalar object cieIfIndexPersistence to ciscoIfExtSystemConfig. - Added a new Table cieIfIndexPersistenceTable. - Added a new object cieIfIndexPersistenceEnabled in cieIfIndexPersistenceTable. - Added a new group cieIfIndexPersistenceGroup. - Deprecated ciscoIfExtensionMIBCompliance7 - Added ciscoIfExtensionMIBCompliance8', 'Added cieIfInterval in cieIfUtilTable. Changed the description of objects in cieIfUtilTable. Added ciscoIfExtUtilIntervalGroup.', 'Add support for asymetrical interfaces speeds. - Added following objects in cieIfInterfaceTable cieIfSpeedReceive cieIfHighSpeedReceive - Added ciscoIfExtensionAsymmetricalSpeedGroup OBJECT-GROUP - Added ciscoIfExtensionMIBCompliance6 MODULE-COMPLIANCE', 'Added: - cieLinkUp & cieLinkDown notifications. - object to control sending: only standard linkUp/linkDown OR only cieLinkUp/cieLinkDown OR both. - object to control sending only standard defined varbinds in linkUp/linkDown OR additional varbinds in addition to standard defined.', 'Updated the description of cieIfDot1dBaseMappingEntry.', "Added new objects 'cieIfOperStatusCause' and 'cieIfOperStatusCauseDescr' in cieIfInterfaceTable. Added a new table 'cieIfStatusListTable'.", "Added new objects cieIfName and cieIfIndex for the 'ifName' to 'ifIndex' mapping. Deprecated the ciscoIfExtensionMIBCompliance2 compliance. Added ciscoIfExtensionMIBCompliance3 and ciscoIfExtIfNameMappingGroup.", 'Added ciscoIfExtDot1dBaseMappingGroup.', 'Added ciscoIfExtUtilizationGroup.', 'Added the object cieSystemMtu and ciscoIfExtSystemGroup. Added ciscoIfExtDot1qCustomEtherType and ciscoIfExtDot1qEtherTypeGroup.', 'Added the objects cieIfDhcpMode, cieIfMtu, cieIfContextName to cieIfInterfaceTable. Deprecated the ciscoIfExtensionMIBCompliance compliance. Added ciscoIfExtensionMIBCompliance1. Added ciscoIfExtensionTableIntfGroup1.', 'Initial version of the MIB module.',))
if mibBuilder.loadTexts: ciscoIfExtensionMIB.setLastUpdated('201303130000Z')
if mibBuilder.loadTexts: ciscoIfExtensionMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoIfExtensionMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 West Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-core-mibs@cisco.com, cs-lan-switch-snmp@cisco.com')
if mibBuilder.loadTexts: ciscoIfExtensionMIB.setDescription('A MIB module for extending the IF-MIB (RFC2863) to add objects which provide additional information about interfaces not available in other MIBS. This MIB replaces the OLD-CISCO-INTERFACES-MIB. GLOSSARY : Virtual Switch - A physical switch partitioned into multiple logical switches. Interface Sharing - An interface can be shared among multiple virtual switches. Speed Group - An interface is capable of operating in any one of the speed range depending on the capability of the hardware. Virtual Link (VL) - Virtual Link is a logical connectivity between two end points. A physical interface can have multiple Virtual Links. No Drop Virtual Link - According to 802.3 standard, No drop specifies lossless service on a virtual link. Drop Virtual Link - According to 802.3 standard, Traffic drop may occur on this virtual Link.')
ciscoIfExtensionMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 276, 0))
ciscoIfExtensionMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 276, 1))
ciscoIfExtensionMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 276, 2))
ciscoIfExtensionStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 276, 1, 1))
ciscoIfExtSystemConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 276, 1, 2))
ciscoIfExtDot1qCustomEtherType = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 276, 1, 3))
ciscoIfExtUtilization = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 276, 1, 4))
ciscoIfExtDot1dBaseMapping = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 276, 1, 5))
ciscoIfExtIfNameMapping = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 276, 1, 6))
class InterfaceIndexList(TextualConvention, OctetString):
    description = "This textual convention defines the 'ifIndex' for a set of 64 interfaces in a module. Each 4 bytes within the value of an object of this type is combined together to represent the interface index of a particular port in the module (i.e., each 4 byte group represents the 'ifIndex' of an interface). The first 4 bytes (byte 1, byte 2, byte 3 and byte 4) combined represent the 'ifIndex' of an interface. While the second 4 bytes (byte 5, byte 6, byte 7 and byte 8) represent the 'ifIndex' for the next interface in the module, and so on. If there are only 'n' interfaces in a set of 64 interfaces in the module, then bytes after the '4n' byte in this object are irrelevant."
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 256)

class InterfaceOperModeList(TextualConvention, OctetString):
    description = "This textual convention defines the operational mode for a set of 64 interfaces in a module. The operational mode of an interface is represented by the value defined in the textual convention 'InterfaceOperMode' (defined in CISCO-ST-TC). Each 'byte' within the value of an object of this type, specifies the operational mode of an interface in the module. The first byte (byte 1) represents the operational mode of an interface in the module, whose 'ifIndex' is represented by the corresponding instance of 'cieInterfacesIndex' object in its first 4 bytes. The second byte (byte 2) represents the operational mode of an interface in the module, whose 'ifIndex' is represented by the corresponding instance of 'cieInterfacesIndex' object in its second 4 bytes. If there are only 'n' interfaces in a set of 64 interfaces in the module, then bytes after the 'n' byte in this object are irrelevant."
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 64)

class InterfaceOperCauseList(TextualConvention, OctetString):
    description = "This textual convention defines the operational status cause for a set of 64 interfaces in a module. The operational status cause of an interface is represented by the value defined in the textual convention 'IfOperStatusReason' (defined in CISCO-TC). Each 2 bytes within the value of an object of this type is combined together to represent the operational status cause of a particular interface in the module (i.e., each 2 byte group represents the 'cieIfOperStatusCause' of an interface). The first 2 bytes (byte 1 and byte 2) of this object, represents the operational status cause of an interface in the module, whose 'ifIndex' is represented by the corresponding instance of 'cieInterfacesIndex' object in its first 4 bytes. The next 2 bytes (byte 3 and byte 4) of this object, represents the operational status cause of an interface in the module, whose 'ifIndex' is represented by the corresponding instance of 'cieInterfacesIndex' object in the next 4 bytes respectively. If there are only 'n' interfaces in a set of 64 interfaces in the module, then bytes after the '2n' byte in this object are irrelevant."
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 128)

class InterfaceOwnershipList(TextualConvention, OctetString):
    description = "This textual convention defines the status for a set of 64 interfaces in a module regarding whether or not each interface is administratively assigned a name of the current owner of the interface resource as per the object cieIfOwner, defined on that interface. Each 'bit' within the value of an object of this type, specifies whether the corresponding interface on the module has been administratively assigned a name of the current owner of the interface resource. In other words, each bit represents whether the corresponding interface is 'owned' or not. This bit is set to 1 if the interface is owned. It is 0 otherwise. The first bit (bit 1) in byte 1 represents whether the interface, whose 'ifIndex' is represented by the corresponding instance of 'cieInterfacesIndex' object in its first 4 bytes, is owned or not. The second byte (byte 2) in byte 2 represents whether the interface, whose 'ifIndex' is represented by the corresponding instance of 'cieInterfacesIndex' object in its second 4 bytes, is owned or not. If there are only 'n' interfaces in a set of 64 interfaces in the module, then bits after the 'n' bit in this object are irrelevant and set to 0."
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 8)

class IfIndexPersistenceState(TextualConvention, Integer32):
    description = 'This textual convention is used to define the state of ifIndex Persistence for both global as well as interface level. The global object, cieIfIndexGlobalPersistence can have two state of ifIndex Persistence i.e. either enable or disable. At interface level, the object cieIfIndexPersistenceControl can take all the three values enable/disable/global.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("disable", 1), ("enable", 2), ("global", 3))

cieIfPacketStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 276, 1, 1, 1), )
if mibBuilder.loadTexts: cieIfPacketStatsTable.setStatus('current')
if mibBuilder.loadTexts: cieIfPacketStatsTable.setDescription('This table contains interface packet statistics which are not available in IF-MIB(RFC2863). As an example, some interfaces to which objects in this table are applicable are as follows : o Ethernet o FastEthernet o ATM o BRI o Sonet o GigabitEthernet Some objects defined in this table may be applicable to physical interfaces only. As a result, this table may be sparse for some logical interfaces.')
cieIfPacketStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 276, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cieIfPacketStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cieIfPacketStatsEntry.setDescription('An entry into the cieIfPacketStatsTable.')
cieIfLastInTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 276, 1, 1, 1, 1, 1), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cieIfLastInTime.setStatus('current')
if mibBuilder.loadTexts: cieIfLastInTime.setDescription('This object represents the elapsed time in milliseconds since last protocol input packet was received. Discontinuities in the value of this variable can occur at re-initialization of the management system, and at other times as indicated by the values of cieIfPacketDiscontinuityTime.')
cieIfLastOutTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 276, 1, 1, 1, 1, 2), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cieIfLastOutTime.setStatus('current')
if mibBuilder.loadTexts: cieIfLastOutTime.setDescription('This object represents the elapsed time in milliseconds since last protocol output packet was transmitted. Discontinuities in the value of this variable can occur at re-initialization of the management system, and at other times as indicated by the values of cieIfPacketDiscontinuityTime.')
cieIfLastOutHangTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 276, 1, 1, 1, 1, 3), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cieIfLastOutHangTime.setStatus('current')
if mibBuilder.loadTexts: cieIfLastOutHangTime.setDescription('This object represents the elapsed time in milliseconds since last protocol output packet could not be successfully transmitted. Discontinuities in the value of this variable can occur at re-initialization of the management system, and at other times as indicated by the values of cieIfPacketDiscontinuityTime.')
cieIfInRuntsErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 276, 1, 1, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cieIfInRuntsErrs.setStatus('current')
if mibBuilder.loadTexts: cieIfInRuntsErrs.setDescription('The number of packets input on a particular physical interface which were dropped as they were smaller than the minimum allowable physical media limit. Discontinuities in the value of this variable can occur at re-initialization of the management system, and at other times as indicated by the values of cieIfPacketDiscontinuityTime.')
cieIfInGiantsErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 276, 1, 1, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cieIfInGiantsErrs.setStatus('current')
if mibBuilder.loadTexts: cieIfInGiantsErrs.setDescription('The number of input packets on a particular physical interface which were dropped as they were larger than the ifMtu (largest permitted size of a packet which can be sent/received on an interface). Discontinuities in the value of this variable can occur at re-initialization of the management system, and at other times as indicated by the values of cieIfPacketDiscontinuityTime.')
cieIfInFramingErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 276, 1, 1, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cieIfInFramingErrs.setStatus('current')
if mibBuilder.loadTexts: cieIfInFramingErrs.setDescription('The number of input packets on a physical interface which were misaligned or had framing errors. This happens when the format of the incoming packet on a physical interface is incorrect. Discontinuities in the value of this variable can occur at re-initialization of the management system, and at other times as indicated by the values of cieIfPacketDiscontinuityTime.')
cieIfInOverrunErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 276, 1, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cieIfInOverrunErrs.setStatus('current')
if mibBuilder.loadTexts: cieIfInOverrunErrs.setDescription('The number of input packets which arrived on a particular physical interface which were too quick for the hardware to receive and hence the receiver ran out of buffers. Discontinuities in the value of this variable can occur at re-initialization of the management system, and at other times as indicated by the values of cieIfPacketDiscontinuityTime.')
cieIfInIgnored = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 276, 1, 1, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cieIfInIgnored.setStatus('current')
if mibBuilder.loadTexts: cieIfInIgnored.setDescription('The number of input packets which were simply ignored by this physical interface due to insufficient resources to handle the incoming packets. For example, this could indicate that the input receive buffers are not available or that the receiver lost a packet. Discontinuities in the value of this variable can occur at re-initialization of the management system, and at other times as indicated by the values of cieIfPacketDiscontinuityTime.')
cieIfInAbortErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 276, 1, 1, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cieIfInAbortErrs.setStatus('current')
if mibBuilder.loadTexts: cieIfInAbortErrs.setDescription('Number of input packets which were dropped because the receiver aborted. Examples of this could be when an abort sequence aborted the input frame or when there is a collision in an ethernet segment. Discontinuities in the value of this variable can occur at re-initialization of the management system, and at other times as indicated by the values of cieIfPacketDiscontinuityTime.')
cieIfInputQueueDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 276, 1, 1, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cieIfInputQueueDrops.setStatus('current')
if mibBuilder.loadTexts: cieIfInputQueueDrops.setDescription('The number of input packets which were dropped. Some reasons why this object could be incremented are: o Input queue is full. o Errors at the receiver hardware while receiving the packet. Discontinuities in the value of this variable can occur at re-initialization of the management system, and at other times as indicated by the values of cieIfPacketDiscontinuityTime.')
cieIfOutputQueueDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 276, 1, 1, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cieIfOutputQueueDrops.setStatus('current')
if mibBuilder.loadTexts: cieIfOutputQueueDrops.setDescription('This object indicates the number of output packets dropped by the interface even though no error had been detected to prevent them being transmitted. The packet could be dropped for many reasons, which could range from the interface being down to errors in the format of the packet. Discontinuities in the value of this variable can occur at re-initialization of the management system, and at other times as indicated by the values of cieIfPacketDiscontinuityTime.')
cieIfPacketDiscontinuityTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 276, 1, 1, 1, 1, 12), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cieIfPacketDiscontinuityTime.setStatus('current')
if mibBuilder.loadTexts: cieIfPacketDiscontinuityTime.setDescription("The value of sysUpTime on the most recent occasion at which this interface's counters suffered a discontinuity. If no such discontinuities have occurred since the last re-initialization of the local management subsystem, then this object contains a value of zero.")
cieIfInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 276, 1, 1, 2), )
if mibBuilder.loadTexts: cieIfInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: cieIfInterfaceTable.setDescription('This table contains objects which provide more information about interface properties not available in IF-MIB (RFC 2863). Some objects defined in this table may be applicable to physical interfaces only. As a result, this table may be sparse for logical interfaces.')
cieIfInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 276, 1, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cieIfInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: cieIfInterfaceEntry.setDescription('An entry into the cieIfInterfaceTable.')
cieIfResetCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 276, 1, 1, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cieIfResetCount.setStatus('current')
if mibBuilder.loadTexts: cieIfResetCount.setDescription('The number of times the interface was internally reset and brought up. Some of the actions which can cause this counter to increment are : o Bringing an interface up using the interface CLI command. o Clearing the interface with the exec CLI command. o Bringing the interface up via SNMP. Discontinuities in the value of this variable can occur at re-initialization of the management system, and at other times as indicated by the values of cieIfInterfaceDiscontinuityTime.')
cieIfKeepAliveEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 276, 1, 1, 2, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cieIfKeepAliveEnabled.setStatus('current')
if mibBuilder.loadTexts: cieIfKeepAliveEnabled.setDescription("A keepalive is a small, layer-2 message that is transmitted by a network device to let directly-connected network devices know of its presence. This object returns 'true' if keepalives are enabled on this interface. If keepalives are not enabled, 'false' is returned. Setting this object to TRUE or FALSE enables or disables (respectively) keepalive on this interface.")
cieIfStateChangeReason = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 276, 1, 1, 2, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cieIfStateChangeReason.setStatus('current')
if mibBuilder.loadTexts: cieIfStateChangeReason.setDescription("This object displays a human-readable textual string which describes the cause of the last state change of the interface. Examples of the values this object can take are: o 'Lost Carrier' o 'administratively down' o 'up' o 'down'")
cieIfCarrierTransitionCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 276, 1, 1, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cieIfCarrierTransitionCount.setStatus('current')
if mibBuilder.loadTexts: cieIfCarrierTransitionCount.setDescription('Number of times interface saw the carrier signal transition. For example, if a T1 line is unplugged, then framer will detect the loss of signal (LOS) on the line and will count it as a transition. Discontinuities in the value of this variable can occur at re-initialization of the management system, and at other times as indicated by the values of cieIfInterfaceDiscontinuityTime.')
cieIfInterfaceDiscontinuityTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 276, 1, 1, 2, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cieIfInterfaceDiscontinuityTime.setStatus('current')
if mibBuilder.loadTexts: cieIfInterfaceDiscontinuityTime.setDescription("The value of sysUpTime on the most recent occasion at which this interface's counters suffered a discontinuity. If no such discontinuities have occurred since the last re-initialization of the local management subsystem, then this object contains a value of zero.")
cieIfDhcpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 276, 1, 1, 2, 1, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cieIfDhcpMode.setStatus('current')
if mibBuilder.loadTexts: cieIfDhcpMode.setDescription("The DHCP mode configured by the administrator. If 'true' the DHCP is enabled. In which case an IP address is requested in DHCP. This is in addition to any that are configured by the administrator in 'ciiIPAddressTable' or 'ciiIPIfAddressTable' in CISCO-IP-IF-MIB. If 'false' the DHCP is disabled. In which case all IP addresses are configured by the administrator in 'ciiIPAddressTable' or 'ciiIPIfAddressTable'. For interfaces, for which DHCP cannot be or is not supported, then this object has the value 'false'.")
cieIfMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 276, 1, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(40, 2147483647)).clone(1500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cieIfMtu.setStatus('current')
if mibBuilder.loadTexts: cieIfMtu.setDescription("The MTU configured by the administrator. This object is exactly same as 'ifMtu' in ifTable from IF-MIB for the same ifIndex value , except that it is configurable by the administrator. For more description of this object refer to 'ifMtu' in IF-MIB.")
cieIfContextName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 276, 1, 1, 2, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cieIfContextName.setStatus('current')
if mibBuilder.loadTexts: cieIfContextName.setDescription("The ContextName denotes the interface 'context' and is used to logically separate the MIB management. RFC 2571 and RFC 2737 describe this approach. When the agent supports a different SNMP context, as detailed in RFC 2571 and RFC 2737, for different interfaces, then the value of this object specifies the context name used for this interface.")
cieIfOperStatusCause = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 276, 1, 1, 2, 1, 9), IfOperStatusReason()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cieIfOperStatusCause.setStatus('current')
if mibBuilder.loadTexts: cieIfOperStatusCause.setDescription("This object represents the detailed operational cause reason for the current operational state of the interface. The current operational state of the interface is given by the 'ifOperStatus' defined in IF-MIB. The corresponding instance of 'cieIfOperStatusCauseDescr' must be used to get the information about the operational cause value mentioned in this object. For interfaces whose 'ifOperStatus' is 'down' the objects 'cieIfOperStatusCause' and 'cieIfOperStatusCauseDescr' together provides the information about the operational cause reason and the description of the cause. The value of this object will be 'none' for all the 'ifOperStatus' values except for 'down'. Its value will be one status cause defined in the 'IfOperStatusReason' textual convention if 'ifOperStatus' is 'down'. The value of this object will be 'other' if the operational status cause is not one defined in 'IfOperStatusReason'.")
cieIfOperStatusCauseDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 276, 1, 1, 2, 1, 10), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cieIfOperStatusCauseDescr.setStatus('current')
if mibBuilder.loadTexts: cieIfOperStatusCauseDescr.setDescription("The description for the cause of current operational state of the interface, given by the object 'cieIfOperStatusCause'. For an interface whose 'ifOperStatus' is not 'down' the value of this object will be 'none'.")
cieIfSpeedReceive = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 276, 1, 1, 2, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cieIfSpeedReceive.setStatus('current')
if mibBuilder.loadTexts: cieIfSpeedReceive.setDescription("An estimate of the interface's current receive bandwidth in bits per second. This object is provided for interface with asymmetric interface speeds like ADSL and should be used in conjunction with ifSpeed object. For interfaces which do not vary in bandwidth or for those where no accurate estimation can be made, this object should contain the nominal bandwidth. If the bandwidth of the interface is greater than the maximum value reportable by this object then this object should report its maximum value (4,294,967,295) and ifHighSpeed must be used to report the interace's speed. For a sub-layer which has no concept of bandwidth, this object should be zero.")
cieIfHighSpeedReceive = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 276, 1, 1, 2, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cieIfHighSpeedReceive.setStatus('current')
if mibBuilder.loadTexts: cieIfHighSpeedReceive.setDescription("An estimate of the interface's current receive bandwidth in units of 1,000,000 bits per second. If this object reports a value of `n' then the speed of the interface is somewhere in the range of `n-500,000' to `n+499,999'. For interfaces which do not vary in bandwidth or for those where no accurate estimation can be made, this object should contain the nominal bandwidth. For a sub-layer which has no concept of bandwidth, this object should be zero.")
cieIfOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 276, 1, 1, 2, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cieIfOwner.setStatus('current')
if mibBuilder.loadTexts: cieIfOwner.setDescription("This data type is used to model an administratively assigned name of the current owner of the interface resource. This information is taken from the NVT ASCII character set. It is suggested that this name contain one or more of the following: SnmpEngineID, IP address, management station name, network manager's name, location, or phone number. SNMP access control is articulated entirely in terms of the contents of MIB views; access to a particular SNMP object instance depends only upon its presence or absence in a particular MIB view and never upon its value or the value of related object instances. Thus, this object affords resolution of resource contention only among cooperating managers; this object realizes no access control function with respect to uncooperative parties.")
cieIfSharedConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 276, 1, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notApplicable", 1), ("ownerDedicated", 2), ("ownerShared", 3), ("sharedOnly", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cieIfSharedConfig.setStatus('current')
if mibBuilder.loadTexts: cieIfSharedConfig.setDescription("This object indicates the current configuration of interface sharing on the given interface. 'notApplicable' - the interface sharing configuration on this interface is not applicable. 'ownerDedicated' - the interface is in the dedicated mode to the binding physical interface. 'ownerShared' - the interface is shared amongst virtual switches and this interface physically belongs to a its virtual switch. 'sharedOnly' - the interface is in purely shared mode.")
cieIfSpeedGroupConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 276, 1, 1, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notApplicable", 1), ("tenG", 2), ("oneTwoFourEightG", 3), ("twoFourEightSixteenG", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cieIfSpeedGroupConfig.setStatus('current')
if mibBuilder.loadTexts: cieIfSpeedGroupConfig.setDescription("This object specifies the current speed group configuration on the given interface. 'notApplicable' - the interface speed group configuration on this interface is not applicable. It is a read-only value. '10G' - the interface speed group configuration on this interface as 10G. '1G-2G-4G-8G' - the interface speed group configuration on this interface as 1G-2G-4G-8G. '2G-4G-8G-16G' - the interface speed group configuration on this interface as 2G-4G-8G-16G.")
cieIfTransceiverFrequencyConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 276, 1, 1, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("fibreChannel", 2), ("ethernet", 3))).clone('fibreChannel')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cieIfTransceiverFrequencyConfig.setStatus('current')
if mibBuilder.loadTexts: cieIfTransceiverFrequencyConfig.setDescription("This object specifies the current transceiver frequency configuration on the given interface. 'notApplicable' - the interface transceiver frequency configuration on this interface is not applicable. It is a read-only value. 'FibreChannel' - the interface transceiver frequency configuration on this interface as Fibre Channel. 'Ethernet' - the interface transceiver frequency on this interface as Ethernet.")
cieIfFillPatternConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 276, 1, 1, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("arbff8G", 1), ("idle8G", 2))).clone('arbff8G')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cieIfFillPatternConfig.setStatus('current')
if mibBuilder.loadTexts: cieIfFillPatternConfig.setDescription("This object specifies the current switchport fill pattern configuration on the given interface. 'arbff8G' - the inter frame gap fill pattern is ARBFF for 8G speed. 'idle8G' - the inter frame gap fill pattern is IDLE for 8G speed.")
cieIfIgnoreBitErrorsConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 276, 1, 1, 2, 1, 18), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cieIfIgnoreBitErrorsConfig.setStatus('current')
if mibBuilder.loadTexts: cieIfIgnoreBitErrorsConfig.setDescription("This object specifies the current switchport biterrors configuration on the given interface. If 'true(1)' the ignore bit errors is enabled.In which case the interface ignores bit errors. If 'false(2)' the ignore bit errors is disabled. In which case the interface acts on the bit errors. For interfaces, for which bit errors is not supported, then this object has the value 'true(1)'.")
cieIfIgnoreInterruptThresholdConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 276, 1, 1, 2, 1, 19), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cieIfIgnoreInterruptThresholdConfig.setStatus('current')
if mibBuilder.loadTexts: cieIfIgnoreInterruptThresholdConfig.setDescription("This object specifies the current interrupt threshold configuration on the given interface. 'If 'true(1)' the ignore interrupt thresholds is enabled. In which case the interface ignores interrupt thresholds. If 'false(2)' the ignore interrupt thresholds is disabled. In which case the interface acts on the interrupt thresholds. For interfaces, for which interrupt thresholds is not supported, then this object has the value 'true(1)'.")
cieIfStatusListTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 276, 1, 1, 3), )
if mibBuilder.loadTexts: cieIfStatusListTable.setStatus('current')
if mibBuilder.loadTexts: cieIfStatusListTable.setDescription("This table contains objects for providing the 'ifIndex', interface operational mode and interface operational cause for all the interfaces in the modules. This table contains one entry for each 64 interfaces in an module. This table provides efficient way of encoding 'ifIndex', interface operational mode and interface operational cause, from the point of retrieval, by combining the values a set of 64 interfaces in a single MIB object.")
cieIfStatusListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 276, 1, 1, 3, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-IF-EXTENSION-MIB", "cieIfStatusListIndex"))
if mibBuilder.loadTexts: cieIfStatusListEntry.setStatus('current')
if mibBuilder.loadTexts: cieIfStatusListEntry.setDescription("Each entry represents the 'ifIndex', interface operational mode and interface operational cause for a set of 64 interfaces in a module.")
cieIfStatusListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 276, 1, 1, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 33554432)))
if mibBuilder.loadTexts: cieIfStatusListIndex.setStatus('current')
if mibBuilder.loadTexts: cieIfStatusListIndex.setDescription('An arbitrary integer value, greater than zero, which identifies a list of 64 interfaces within a module.')
cieInterfacesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 276, 1, 1, 3, 1, 2), InterfaceIndexList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cieInterfacesIndex.setStatus('current')
if mibBuilder.loadTexts: cieInterfacesIndex.setDescription("This object represents the 'ifIndex' for a set of 64 interfaces in the module.")
cieInterfacesOperMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 276, 1, 1, 3, 1, 3), InterfaceOperModeList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cieInterfacesOperMode.setStatus('current')
if mibBuilder.loadTexts: cieInterfacesOperMode.setDescription('This object represents the operational mode for a set of 64 interfaces in the module.')
cieInterfacesOperCause = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 276, 1, 1, 3, 1, 4), InterfaceOperCauseList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cieInterfacesOperCause.setStatus('current')
if mibBuilder.loadTexts: cieInterfacesOperCause.setDescription('This object represents the operational status cause for a set of 64 interfaces in the module.')
cieInterfaceOwnershipBitmap = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 276, 1, 1, 3, 1, 5), InterfaceOwnershipList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cieInterfaceOwnershipBitmap.setStatus('current')
if mibBuilder.loadTexts: cieInterfaceOwnershipBitmap.setDescription('This object indicates the status for a set of 64 interfaces in a module regarding whether or not each interface is administratively assigned a name of the current owner of the interface resource as per cieIfOwner.')
cieIfVlStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 276, 1, 1, 4), )
if mibBuilder.loadTexts: cieIfVlStatsTable.setStatus('current')
if mibBuilder.loadTexts: cieIfVlStatsTable.setDescription('This table contains VL (Virtual Link) statistics for a capable interface. Objects defined in this table may be applicable to physical interfaces only.')
cieIfVlStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 276, 1, 1, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cieIfVlStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cieIfVlStatsEntry.setDescription('Each row contains managed objects for Virtual Link statistics on interface capable of providing this information.')
cieIfNoDropVlInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 276, 1, 1, 4, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cieIfNoDropVlInPkts.setStatus('current')
if mibBuilder.loadTexts: cieIfNoDropVlInPkts.setDescription('This object indicates the number of input packets on all No-Drop Virtual Links belonged to this interface.')
cieIfNoDropVlInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 276, 1, 1, 4, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cieIfNoDropVlInOctets.setStatus('current')
if mibBuilder.loadTexts: cieIfNoDropVlInOctets.setDescription('This object indicates the number of input octets on all No-Drop Virtual Links belonged to this interface.')
cieIfNoDropVlOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 276, 1, 1, 4, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cieIfNoDropVlOutPkts.setStatus('current')
if mibBuilder.loadTexts: cieIfNoDropVlOutPkts.setDescription('This object indicates the number of output packets on all No-Drop Virtual Links belonged to this interface.')
cieIfNoDropVlOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 276, 1, 1, 4, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cieIfNoDropVlOutOctets.setStatus('current')
if mibBuilder.loadTexts: cieIfNoDropVlOutOctets.setDescription('This object indicates the number of output octets on all No-Drop Virtual Links belonged to this interface.')
cieIfDropVlInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 276, 1, 1, 4, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cieIfDropVlInPkts.setStatus('current')
if mibBuilder.loadTexts: cieIfDropVlInPkts.setDescription('This object indicates the number of input packets on all Drop Virtual Links belonged to this interface.')
cieIfDropVlInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 276, 1, 1, 4, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cieIfDropVlInOctets.setStatus('current')
if mibBuilder.loadTexts: cieIfDropVlInOctets.setDescription('This object indicates the number of input octets on all Drop Virtual Links belonged to this interface.')
cieIfDropVlOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 276, 1, 1, 4, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cieIfDropVlOutPkts.setStatus('current')
if mibBuilder.loadTexts: cieIfDropVlOutPkts.setDescription('This object indicates the number of output packets on all Drop Virtual Links belonged to this interface.')
cieIfDropVlOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 276, 1, 1, 4, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cieIfDropVlOutOctets.setStatus('current')
if mibBuilder.loadTexts: cieIfDropVlOutOctets.setDescription('This object indicates the number of output octets on all Drop Virtual Links belonged to this interface.')
cieSystemMtu = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 276, 1, 2, 1), Integer32().clone(1500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cieSystemMtu.setStatus('current')
if mibBuilder.loadTexts: cieSystemMtu.setDescription("Global system MTU in octets. This object specifies the MTU on all interfaces. However, the value specified by cieIfMtu takes precedence for an interface, which means that the interface's MTU uses the value specified by cieIfMtu, if it is configured.")
cieLinkUpDownEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 276, 1, 2, 2), Bits().clone(namedValues=NamedValues(("standard", 0), ("cisco", 1))).clone(namedValues=NamedValues(("standard", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cieLinkUpDownEnable.setStatus('deprecated')
if mibBuilder.loadTexts: cieLinkUpDownEnable.setDescription("Indicates whether cieLinkUp/cieLinkDown or standard mib-II defined linkUp/Down or both, notifications should be generated for the interfaces in the system. 'standard' - only generate standard defined mib-II linkUp/linkDown notification if 'ifLinkUpDownTrapEnable' for the interface is 'enabled'. 'cisco' - only generate cieLinkUp/cieLinkDown notifications for an interface if the 'ifLinkUpDownTrapEnable' for the interface is 'enabled'. If both bits are selected then linkUp/linkDown and cieLinkUp/cieLinkDown are both generated for an interface if the 'ifLinkUpDownTrapEnable' for the interface is 'enabled'.")
cieStandardLinkUpDownVarbinds = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 276, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("standard", 1), ("additional", 2), ("other", 3))).clone('additional')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cieStandardLinkUpDownVarbinds.setStatus('deprecated')
if mibBuilder.loadTexts: cieStandardLinkUpDownVarbinds.setDescription("Indicates whether to send the extra varbinds in addition to the varbinds defined in linkUp/linkDown notifications. 'standard' - only send the varbinds defined in the standard linkUp/linkDown notification. 'additional' - send the extra varbinds in addition to the defined ones. 'other' - any other config not covered by the above. This value is read-only.")
cieIfIndexPersistence = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 276, 1, 2, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cieIfIndexPersistence.setStatus('deprecated')
if mibBuilder.loadTexts: cieIfIndexPersistence.setDescription('This object specifies whether ifIndex values persist across reinitialization of the device. ifIndex persistence means that the mapping between the ifDescr object values and the ifIndex object values will be retained across reboots. Applications such as device inventory, billing, and fault detection depend on the maintenance of the correspondence between particular ifIndex values and their interfaces. During reboot or insertion of a new card, the data to correlate the interfaces to the ifIndex may become invalid in absence of ifIndex persistence feature. ifIndex persistence for an interface ensures ifIndex value for the interface will remain the same after a system reboot. Hence, this feature allows users to avoid the workarounds required for consistent interface identification across reinitialization. Due to change in syntax, this object is deprecated by cieIfIndexGlobalPersistence.')
cieIfIndexPersistenceTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 276, 1, 2, 5), )
if mibBuilder.loadTexts: cieIfIndexPersistenceTable.setStatus('current')
if mibBuilder.loadTexts: cieIfIndexPersistenceTable.setDescription('This table lists configuration data relating to ifIndex persistence. This table has a sparse dependent relationship on the ifTable, containing a row for each ifEntry corresponding to an interface for which ifIndex persistence is supported.')
cieIfIndexPersistenceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 276, 1, 2, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cieIfIndexPersistenceEntry.setStatus('current')
if mibBuilder.loadTexts: cieIfIndexPersistenceEntry.setDescription('Each entry represents ifindex persistence configuration for an interface specified by ifIndex. Whenever an interface which supports ifindex persistence is created/destroyed in the ifTable, the corresponding ifindex persistence entry is created/destroyed respectively. Some of the interfaces may not support ifindex persistence, for example, a dynamic interface, such as a PPP connection or a IP subscriber interface.')
cieIfIndexPersistenceEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 276, 1, 2, 5, 1, 1), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cieIfIndexPersistenceEnabled.setStatus('deprecated')
if mibBuilder.loadTexts: cieIfIndexPersistenceEnabled.setDescription("This object specifies whether the interface's ifIndex value persist across reinitialization. Due to change in syntax, this object is deprecated by cieIfIndexPersistenceControl.")
cieIfIndexPersistenceControl = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 276, 1, 2, 5, 1, 2), IfIndexPersistenceState().clone('global')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cieIfIndexPersistenceControl.setStatus('current')
if mibBuilder.loadTexts: cieIfIndexPersistenceControl.setDescription("This object specifies whether the interface's ifIndex value persist across reinitialization. In global state, the interface uses the global setting data for persistence i.e. cieIfIndexGlobalPersistence.")
cieDelayedLinkUpDownNotifEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 276, 1, 2, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cieDelayedLinkUpDownNotifEnable.setStatus('current')
if mibBuilder.loadTexts: cieDelayedLinkUpDownNotifEnable.setDescription('This object specifies whether the system generates a cieDelayedLinkUpDownNotif notification.')
cieDelayedLinkUpDownNotifDelay = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 276, 1, 2, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(4)).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cieDelayedLinkUpDownNotifDelay.setStatus('current')
if mibBuilder.loadTexts: cieDelayedLinkUpDownNotifDelay.setDescription("This object specifies the interval of time an interface's operational status must remain stable following a transition before the system will generate a cieDelayedLinkUpDownNotif.")
cieIfIndexGlobalPersistence = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 276, 1, 2, 8), IfIndexPersistenceState().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cieIfIndexGlobalPersistence.setStatus('current')
if mibBuilder.loadTexts: cieIfIndexGlobalPersistence.setDescription('This object specifies whether ifIndex values persist across reinitialization of the device. ifIndex persistence means that the mapping between the ifDescr object values and the ifIndex object values will be retained across reboots. Applications such as device inventory, billing, and fault detection depend on the maintenance of the correspondence between particular ifIndex values and their interfaces. During reboot or insertion of a new card, the data to correlate the interfaces to the ifIndex may become invalid in absence of ifIndex persistence feature. ifIndex persistence for an interface ensures ifIndex value for the interface will remain the same after a system reboot. Hence, this feature allows users to avoid the workarounds required for consistent interface identification across reinitialization. The allowed values for this object are either enable or disable. global value is not allowed.')
cieLinkUpDownConfig = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 276, 1, 2, 9), Bits().clone(namedValues=NamedValues(("standardLinkUp", 0), ("standardLinkDown", 1), ("additionalLinkUp", 2), ("additionalLinkDown", 3), ("ciscoLinkUp", 4), ("ciscoLinkDown", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cieLinkUpDownConfig.setStatus('current')
if mibBuilder.loadTexts: cieLinkUpDownConfig.setDescription("This object specifies whether standard mib-II defined linkUp/ linkDown, extended linkUp/linkDown (with extra varbinds in addition to the varbinds defined in linkUp/linkDown) or cieLinkUp/cieLinkDown notifications should be generated for the interfaces in the system. 'standardLinkUp' - generate standard defined mib-II linkUp notification if 'ifLinkUpDownTrapEnable' for the interface is 'enabled'. 'standardLinkDown' - generate standard defined mib-II linkDown notification if 'ifLinkUpDownTrapEnable' for the interface is 'enabled'. 'additionalLinkUp' - generate linkUp notification with additional varbinds if 'ifLinkUpDownTrapEnable' for the interface is 'enabled'. 'additionalLinkDown' - generate linkDown notification with additional varbinds if 'ifLinkUpDownTrapEnable' for the interface is 'enabled'. 'ciscoLinkUp' - generate cieLinkUp notification if the 'ifLinkUpDownTrapEnable' for the interface is 'enabled'. 'ciscoLinkDown' - generate cieLinkDown notification if the 'ifLinkUpDownTrapEnable' for the interface is 'enabled'. If multiple bits are set then multiple notifications will be generated for an interface if the 'ifLinkUpDownTrapEnable' for the interface is 'enabled'.")
cieIfDot1qCustomEtherTypeTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 276, 1, 3, 1), )
if mibBuilder.loadTexts: cieIfDot1qCustomEtherTypeTable.setStatus('current')
if mibBuilder.loadTexts: cieIfDot1qCustomEtherTypeTable.setDescription('A list of the interfaces that support the 802.1q custom Ethertype feature.')
cieIfDot1qCustomEtherTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 276, 1, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cieIfDot1qCustomEtherTypeEntry.setStatus('current')
if mibBuilder.loadTexts: cieIfDot1qCustomEtherTypeEntry.setDescription('An entry containing the custom EtherType information for the interface. Only interfaces with custom 802.1q ethertype control are listed in the table.')
cieIfDot1qCustomAdminEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 276, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cieIfDot1qCustomAdminEtherType.setStatus('current')
if mibBuilder.loadTexts: cieIfDot1qCustomAdminEtherType.setDescription("The Dot1qEtherType allow administrator to select a non-standard (other than 0x8100) 2-byte ethertype for the interface to interoperate with third party vendor's system that do not use the standard 0x8100 ethertype to identify 802.1q-tagged frames. The current administrative value of the 802.1q ethertype for the interface. The administrative 802.1q ethertype value may differ from the operational 802.1q ethertype value. On some platforms, 802.1q ethertype may be assigned per group rather than per port. If multiple ports belong to a port group, the 802.1q ethertype assigned to any of the ports in such group will apply to all ports in the same group. To configure non-standard dot1q ethertype is only recommended when the Cisco device is connected to any third party vendor device. Also be advised that the custom ethertype value needs to be changed in the whole cloud of Cisco device with the same custom ethertype value if the third party device are separated by number of Cisco device in the middle.")
cieIfDot1qCustomOperEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 276, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cieIfDot1qCustomOperEtherType.setStatus('current')
if mibBuilder.loadTexts: cieIfDot1qCustomOperEtherType.setDescription('The current operational value of the 802.1q ethertype for the interface.')
cieIfUtilTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 276, 1, 4, 1), )
if mibBuilder.loadTexts: cieIfUtilTable.setStatus('current')
if mibBuilder.loadTexts: cieIfUtilTable.setDescription('This table contains the interface utilization rates for inbound and outbound traffic on an interface.')
cieIfUtilEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 276, 1, 4, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cieIfUtilEntry.setStatus('current')
if mibBuilder.loadTexts: cieIfUtilEntry.setDescription('An entry containing utilization rates for the interface. Every interface for which the inbound and outbound traffic information is available has a corresponding entry in this table.')
cieIfInPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 276, 1, 4, 1, 1, 1), Counter64()).setUnits('packets per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cieIfInPktRate.setStatus('current')
if mibBuilder.loadTexts: cieIfInPktRate.setDescription('By default, this is the five minute exponentially-decayed moving average of the inbound packet rate for this interface. However, if the corresponding instance of cieIfInterval is instantiated with a value which specifies an interval different from 5-minutes, then cieIfInPktRate is the exponentially-decayed moving average of inbound packet rate over this different time interval.')
cieIfInOctetRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 276, 1, 4, 1, 1, 2), Counter64()).setUnits('octets per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cieIfInOctetRate.setStatus('current')
if mibBuilder.loadTexts: cieIfInOctetRate.setDescription('By default, this is the five minute exponentially-decayed moving average of the inbound octet rate for this interface. However, if the corresponding instance of cieIfInterval is instantiated with a value which specifies an interval different from 5-minutes, then cieIfInOctetRate is the exponentially-decayed moving average of inbound octet rate over this different time interval.')
cieIfOutPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 276, 1, 4, 1, 1, 3), Counter64()).setUnits('packets per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cieIfOutPktRate.setStatus('current')
if mibBuilder.loadTexts: cieIfOutPktRate.setDescription('By default, this is the five minute exponentially-decayed moving average of the outbound packet rate for this interface. However, if the corresponding instance of cieIfInterval is instantiated with a value which specifies an interval different from 5-minutes, then cieIfOutPktRate is the exponentially-decayed moving average of outbound packet rate over this different time interval.')
cieIfOutOctetRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 276, 1, 4, 1, 1, 4), Counter64()).setUnits('octets per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cieIfOutOctetRate.setStatus('current')
if mibBuilder.loadTexts: cieIfOutOctetRate.setDescription('By default, this is the five minute exponentially-decayed moving average of the outbound octet rate for this interface. However, if the corresponding instance of cieIfInterval is instantiated with a value which specifies an interval different from 5-minutes, then cieIfOutOctetRate is the exponentially-decayed moving average of outbound octet rate over this different time interval.')
cieIfInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 276, 1, 4, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cieIfInterval.setStatus('current')
if mibBuilder.loadTexts: cieIfInterval.setDescription('This object specifies the time interval over which the inbound and outbound traffic rates are calculated for this interface.')
cieIfDot1dBaseMappingTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 276, 1, 5, 1), )
if mibBuilder.loadTexts: cieIfDot1dBaseMappingTable.setReference('dot1dBasePort is defined in BRIDGE-MIB.')
if mibBuilder.loadTexts: cieIfDot1dBaseMappingTable.setStatus('current')
if mibBuilder.loadTexts: cieIfDot1dBaseMappingTable.setDescription('This table contains the mappings of the ifIndex of an interface to its corresponding dot1dBasePort value.')
cieIfDot1dBaseMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 276, 1, 5, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cieIfDot1dBaseMappingEntry.setReference('dot1dBasePort is defined in BRIDGE-MIB.')
if mibBuilder.loadTexts: cieIfDot1dBaseMappingEntry.setStatus('current')
if mibBuilder.loadTexts: cieIfDot1dBaseMappingEntry.setDescription('An entry containing the mapping between the ifIndex value of an interface and its corresponding dot1dBasePort value. Every interface which has been assigned a dot1dBasePort value by the system has a corresponding entry in this table.')
cieIfDot1dBaseMappingPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 276, 1, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cieIfDot1dBaseMappingPort.setReference('dot1dBasePort is defined in BRIDGE-MIB.')
if mibBuilder.loadTexts: cieIfDot1dBaseMappingPort.setStatus('current')
if mibBuilder.loadTexts: cieIfDot1dBaseMappingPort.setDescription('The dot1dBasePort value for this interface.')
cieIfNameMappingTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 276, 1, 6, 1), )
if mibBuilder.loadTexts: cieIfNameMappingTable.setStatus('current')
if mibBuilder.loadTexts: cieIfNameMappingTable.setDescription("This table contains objects for providing the 'ifName' to 'ifIndex' mapping. This table contains one entry for each valid 'ifName' available in the system. Upon the first request, the implementation of this table will get all the available ifNames, and it will populate the entries in this table, it maintains this ifNames in a cache for ~30 seconds.")
cieIfNameMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 276, 1, 6, 1, 1), ).setIndexNames((0, "CISCO-IF-EXTENSION-MIB", "cieIfName"))
if mibBuilder.loadTexts: cieIfNameMappingEntry.setStatus('current')
if mibBuilder.loadTexts: cieIfNameMappingEntry.setDescription('An entry into the cieIfNameMappingTable.')
cieIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 276, 1, 6, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 112)))
if mibBuilder.loadTexts: cieIfName.setStatus('current')
if mibBuilder.loadTexts: cieIfName.setDescription("Represents an interface name mentioned in the 'ifName' object of this system.")
cieIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 276, 1, 6, 1, 1, 2), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cieIfIndex.setStatus('current')
if mibBuilder.loadTexts: cieIfIndex.setDescription("This object represents the 'ifIndex' corresponding to the interface name mentioned in the 'cieIfName' object of this instance. If the 'ifName' mentioned in the 'cieIfName' object of this instance corresponds to multiple 'ifIndex' values, then the value of this object is the numerically smallest of those multiple 'ifIndex' values.")
cieLinkDown = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 276, 0, 1)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifAdminStatus"), ("IF-MIB", "ifOperStatus"), ("IF-MIB", "ifName"), ("IF-MIB", "ifType"))
if mibBuilder.loadTexts: cieLinkDown.setStatus('current')
if mibBuilder.loadTexts: cieLinkDown.setDescription('A cisco specific linkDown notification signifies that the SNMP entity, acting in an agent role, has detected that the ifOperStatus object for one of its communication links is about to enter the down state from some other state (but not from the notPresent state). The varbinds for this notification indicate the interface information of the communication link.')
cieLinkUp = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 276, 0, 2)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifAdminStatus"), ("IF-MIB", "ifOperStatus"), ("IF-MIB", "ifName"), ("IF-MIB", "ifType"))
if mibBuilder.loadTexts: cieLinkUp.setStatus('current')
if mibBuilder.loadTexts: cieLinkUp.setDescription('A cisco specific linkUp trap signifies that the SNMP entity, acting in an agent role, has detected that the ifOperStatus object for one of its communication links left the down state and transitioned into some other state (but not into the notPresent state). The varbinds for this notification indicate the interface information of the communication link.')
cieDelayedLinkUpDownNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 276, 0, 3)).setObjects(("IF-MIB", "ifAdminStatus"), ("IF-MIB", "ifOperStatus"), ("IF-MIB", "ifName"), ("IF-MIB", "ifType"), ("CISCO-IF-EXTENSION-MIB", "cieIfOperStatusCause"))
if mibBuilder.loadTexts: cieDelayedLinkUpDownNotif.setStatus('current')
if mibBuilder.loadTexts: cieDelayedLinkUpDownNotif.setDescription("This notification indicates when an interface's operational status has transitioned and remained in that state for a time specified by cieDelayedLinkUpDownDelay.")
ciscoIfExtensionMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 276, 2, 1))
ciscoIfExtensionMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 276, 2, 2))
ciscoIfExtensionMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 276, 2, 1, 1)).setObjects(("CISCO-IF-EXTENSION-MIB", "ciscoIfExtensionTablePacketGroup"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtensionTableIntfGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIfExtensionMIBCompliance = ciscoIfExtensionMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoIfExtensionMIBCompliance.setDescription('The compliance statement for entities which implement the CISCO-IF-EXTENSION-MIB.')
ciscoIfExtensionMIBCompliance1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 276, 2, 1, 2)).setObjects(("CISCO-IF-EXTENSION-MIB", "ciscoIfExtensionTablePacketGroup"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtensionTableIntfGroup"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtensionTableIntfGroup1"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtensionSystemGroup"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtDot1qEtherTypeGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIfExtensionMIBCompliance1 = ciscoIfExtensionMIBCompliance1.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoIfExtensionMIBCompliance1.setDescription('The compliance statement for entities which implement the CISCO-IF-EXTENSION-MIB.')
ciscoIfExtensionMIBCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 276, 2, 1, 3)).setObjects(("CISCO-IF-EXTENSION-MIB", "ciscoIfExtensionTablePacketGroup"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtensionTableIntfGroup"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtensionTableIntfGroup1"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtensionSystemGroup"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtDot1qEtherTypeGroup"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtUtilizationGroup"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtDot1dBaseMappingGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIfExtensionMIBCompliance2 = ciscoIfExtensionMIBCompliance2.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoIfExtensionMIBCompliance2.setDescription('The compliance statement for entities which implement the CISCO-IF-EXTENSION-MIB.')
ciscoIfExtensionMIBCompliance3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 276, 2, 1, 4)).setObjects(("CISCO-IF-EXTENSION-MIB", "ciscoIfExtensionTablePacketGroup"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtensionTableIntfGroup"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtensionTableIntfGroup1"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtensionSystemGroup"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtDot1qEtherTypeGroup"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtUtilizationGroup"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtDot1dBaseMappingGroup"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtIfNameMappingGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIfExtensionMIBCompliance3 = ciscoIfExtensionMIBCompliance3.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoIfExtensionMIBCompliance3.setDescription('The compliance statement for entities which implement the CISCO-IF-EXTENSION-MIB.')
ciscoIfExtensionMIBCompliance4 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 276, 2, 1, 5)).setObjects(("CISCO-IF-EXTENSION-MIB", "ciscoIfExtensionTablePacketGroup"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtensionTableIntfGroup"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtensionTableIntfGroup2"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtensionSystemGroup"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtDot1qEtherTypeGroup"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtUtilizationGroup"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtDot1dBaseMappingGroup"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtIfNameMappingGroup"), ("CISCO-IF-EXTENSION-MIB", "cieIfStatusListGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIfExtensionMIBCompliance4 = ciscoIfExtensionMIBCompliance4.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoIfExtensionMIBCompliance4.setDescription('The compliance statement for entities which implement the CISCO-IF-EXTENSION-MIB.')
ciscoIfExtensionMIBCompliance5 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 276, 2, 1, 6)).setObjects(("CISCO-IF-EXTENSION-MIB", "ciscoIfExtensionTablePacketGroup"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtensionTableIntfGroup"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtensionTableIntfGroup2"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtensionSystemGroup"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtDot1qEtherTypeGroup"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtUtilizationGroup"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtDot1dBaseMappingGroup"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtIfNameMappingGroup"), ("CISCO-IF-EXTENSION-MIB", "cieIfStatusListGroup"), ("CISCO-IF-EXTENSION-MIB", "cieLinkUpDownNotifEnableGroup"), ("CISCO-IF-EXTENSION-MIB", "cieLinkUpDownNotifGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIfExtensionMIBCompliance5 = ciscoIfExtensionMIBCompliance5.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoIfExtensionMIBCompliance5.setDescription('The compliance statement for entities which implement the CISCO-IF-EXTENSION-MIB.')
ciscoIfExtensionMIBCompliance6 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 276, 2, 1, 7)).setObjects(("CISCO-IF-EXTENSION-MIB", "ciscoIfExtensionTablePacketGroup"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtensionTableIntfGroup"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtensionTableIntfGroup2"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtensionSystemGroup"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtDot1qEtherTypeGroup"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtUtilizationGroup"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtDot1dBaseMappingGroup"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtIfNameMappingGroup"), ("CISCO-IF-EXTENSION-MIB", "cieIfStatusListGroup"), ("CISCO-IF-EXTENSION-MIB", "cieLinkUpDownNotifEnableGroup"), ("CISCO-IF-EXTENSION-MIB", "cieLinkUpDownNotifGroup"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtensionAsymmetricalSpeedGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIfExtensionMIBCompliance6 = ciscoIfExtensionMIBCompliance6.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoIfExtensionMIBCompliance6.setDescription('The compliance statement for entities which implement the CISCO-IF-EXTENSION-MIB.')
ciscoIfExtensionMIBCompliance7 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 276, 2, 1, 8)).setObjects(("CISCO-IF-EXTENSION-MIB", "ciscoIfExtensionTablePacketGroup"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtensionTableIntfGroup"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtensionTableIntfGroup2"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtensionSystemGroup"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtDot1qEtherTypeGroup"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtUtilizationGroup"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtDot1dBaseMappingGroup"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtIfNameMappingGroup"), ("CISCO-IF-EXTENSION-MIB", "cieIfStatusListGroup"), ("CISCO-IF-EXTENSION-MIB", "cieLinkUpDownNotifEnableGroup"), ("CISCO-IF-EXTENSION-MIB", "cieLinkUpDownNotifGroup"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtensionAsymmetricalSpeedGroup"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtUtilIntervalGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIfExtensionMIBCompliance7 = ciscoIfExtensionMIBCompliance7.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoIfExtensionMIBCompliance7.setDescription('The compliance statement for entities which implement the CISCO-IF-EXTENSION-MIB.')
ciscoIfExtensionMIBCompliance8 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 276, 2, 1, 9)).setObjects(("CISCO-IF-EXTENSION-MIB", "ciscoIfExtensionTablePacketGroup"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtensionTableIntfGroup"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtensionTableIntfGroup2"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtensionSystemGroup"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtDot1qEtherTypeGroup"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtUtilizationGroup"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtDot1dBaseMappingGroup"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtIfNameMappingGroup"), ("CISCO-IF-EXTENSION-MIB", "cieIfStatusListGroup"), ("CISCO-IF-EXTENSION-MIB", "cieLinkUpDownNotifEnableGroup"), ("CISCO-IF-EXTENSION-MIB", "cieLinkUpDownNotifGroup"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtensionAsymmetricalSpeedGroup"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtUtilIntervalGroup"), ("CISCO-IF-EXTENSION-MIB", "cieIfIndexPersistenceGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIfExtensionMIBCompliance8 = ciscoIfExtensionMIBCompliance8.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoIfExtensionMIBCompliance8.setDescription('The compliance statement for entities which implement the CISCO-IF-EXTENSION-MIB.')
ciscoIfExtensionMIBCompliance9 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 276, 2, 1, 10)).setObjects(("CISCO-IF-EXTENSION-MIB", "ciscoIfExtensionTablePacketGroup"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtensionTableIntfGroup"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtensionTableIntfGroup2"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtensionSystemGroup"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtDot1qEtherTypeGroup"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtUtilizationGroup"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtDot1dBaseMappingGroup"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtIfNameMappingGroup"), ("CISCO-IF-EXTENSION-MIB", "cieIfStatusListGroup"), ("CISCO-IF-EXTENSION-MIB", "cieLinkUpDownNotifEnableGroup"), ("CISCO-IF-EXTENSION-MIB", "cieLinkUpDownNotifGroup"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtensionAsymmetricalSpeedGroup"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtUtilIntervalGroup"), ("CISCO-IF-EXTENSION-MIB", "cieDelayedLinkUpDownNotifNotifGroup"), ("CISCO-IF-EXTENSION-MIB", "cieDelayedLinkUpDownNotifNotifEnableGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIfExtensionMIBCompliance9 = ciscoIfExtensionMIBCompliance9.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoIfExtensionMIBCompliance9.setDescription('The compliance statement for entities which implement the CISCO-IF-EXTENSION-MIB.')
ciscoIfExtensionMIBCompliance10 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 276, 2, 1, 11)).setObjects(("CISCO-IF-EXTENSION-MIB", "ciscoIfExtensionTablePacketGroup"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtensionTableIntfGroup"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtensionTableIntfGroup2"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtensionSystemGroup"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtDot1qEtherTypeGroup"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtUtilizationGroup"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtDot1dBaseMappingGroup"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtIfNameMappingGroup"), ("CISCO-IF-EXTENSION-MIB", "cieIfStatusListGroup"), ("CISCO-IF-EXTENSION-MIB", "cieLinkUpDownNotifEnableGroup"), ("CISCO-IF-EXTENSION-MIB", "cieLinkUpDownNotifGroup"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtensionAsymmetricalSpeedGroup"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtUtilIntervalGroup"), ("CISCO-IF-EXTENSION-MIB", "cieDelayedLinkUpDownNotifNotifGroup"), ("CISCO-IF-EXTENSION-MIB", "cieDelayedLinkUpDownNotifNotifEnableGroup"), ("CISCO-IF-EXTENSION-MIB", "cieIfIndexPersistenceControlGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIfExtensionMIBCompliance10 = ciscoIfExtensionMIBCompliance10.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoIfExtensionMIBCompliance10.setDescription('The compliance statement for entities which implement the CISCO-IF-EXTENSION-MIB.')
ciscoIfExtensionMIBCompliance11 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 276, 2, 1, 12)).setObjects(("CISCO-IF-EXTENSION-MIB", "ciscoIfExtensionTablePacketGroup"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtensionTableIntfGroup"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtensionSystemGroup"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtDot1qEtherTypeGroup"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtUtilizationGroup"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtDot1dBaseMappingGroup"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtIfNameMappingGroup"), ("CISCO-IF-EXTENSION-MIB", "cieIfStatusListGroup"), ("CISCO-IF-EXTENSION-MIB", "cieLinkUpDownNotifEnableGroup"), ("CISCO-IF-EXTENSION-MIB", "cieLinkUpDownNotifGroup"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtensionAsymmetricalSpeedGroup"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtUtilIntervalGroup"), ("CISCO-IF-EXTENSION-MIB", "cieDelayedLinkUpDownNotifNotifGroup"), ("CISCO-IF-EXTENSION-MIB", "cieDelayedLinkUpDownNotifNotifEnableGroup"), ("CISCO-IF-EXTENSION-MIB", "cieIfIndexPersistenceControlGroup"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtensionTableIntfGroup3"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIfExtensionMIBCompliance11 = ciscoIfExtensionMIBCompliance11.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoIfExtensionMIBCompliance11.setDescription('The compliance statement for entities which implement the CISCO-IF-EXTENSION-MIB.')
ciscoIfExtensionMIBCompliance12 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 276, 2, 1, 13)).setObjects(("CISCO-IF-EXTENSION-MIB", "ciscoIfExtensionTablePacketGroup"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtensionTableIntfGroup"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtensionSystemGroup"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtDot1qEtherTypeGroup"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtUtilizationGroup"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtDot1dBaseMappingGroup"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtIfNameMappingGroup"), ("CISCO-IF-EXTENSION-MIB", "cieLinkUpDownNotifEnableGroup"), ("CISCO-IF-EXTENSION-MIB", "cieLinkUpDownNotifGroup"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtensionAsymmetricalSpeedGroup"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtUtilIntervalGroup"), ("CISCO-IF-EXTENSION-MIB", "cieDelayedLinkUpDownNotifNotifGroup"), ("CISCO-IF-EXTENSION-MIB", "cieDelayedLinkUpDownNotifNotifEnableGroup"), ("CISCO-IF-EXTENSION-MIB", "cieIfIndexPersistenceControlGroup"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtensionTableIntfGroup3"), ("CISCO-IF-EXTENSION-MIB", "cieIfStatusListGroup"), ("CISCO-IF-EXTENSION-MIB", "cieIfStatusListGroupSup1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIfExtensionMIBCompliance12 = ciscoIfExtensionMIBCompliance12.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoIfExtensionMIBCompliance12.setDescription('The compliance statement for entities which implement the CISCO-IF-EXTENSION-MIB.')
ciscoIfExtensionMIBCompliance13 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 276, 2, 1, 14)).setObjects(("CISCO-IF-EXTENSION-MIB", "ciscoIfExtensionTablePacketGroup"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtensionTableIntfGroup"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtensionSystemGroup"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtDot1qEtherTypeGroup"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtUtilizationGroup"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtDot1dBaseMappingGroup"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtIfNameMappingGroup"), ("CISCO-IF-EXTENSION-MIB", "cieLinkUpDownNotifEnableGroup"), ("CISCO-IF-EXTENSION-MIB", "cieLinkUpDownNotifGroup"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtensionAsymmetricalSpeedGroup"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtUtilIntervalGroup"), ("CISCO-IF-EXTENSION-MIB", "cieDelayedLinkUpDownNotifNotifGroup"), ("CISCO-IF-EXTENSION-MIB", "cieDelayedLinkUpDownNotifNotifEnableGroup"), ("CISCO-IF-EXTENSION-MIB", "cieIfIndexPersistenceControlGroup"), ("CISCO-IF-EXTENSION-MIB", "cieIfStatusListGroup"), ("CISCO-IF-EXTENSION-MIB", "cieIfStatusListGroupSup1"), ("CISCO-IF-EXTENSION-MIB", "cieIfVlStatsGroup"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtensionTableIntfGroup3"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtensionTableIntfGroup3SupR01"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIfExtensionMIBCompliance13 = ciscoIfExtensionMIBCompliance13.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoIfExtensionMIBCompliance13.setDescription('The compliance statement for entities which implement the CISCO-IF-EXTENSION-MIB.')
ciscoIfExtensionMIBCompliance14 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 276, 2, 1, 15)).setObjects(("CISCO-IF-EXTENSION-MIB", "ciscoIfExtensionTablePacketGroup"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtensionTableIntfGroup"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtensionSystemGroup"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtDot1qEtherTypeGroup"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtUtilizationGroup"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtDot1dBaseMappingGroup"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtIfNameMappingGroup"), ("CISCO-IF-EXTENSION-MIB", "cieLinkUpDownNotifGroup"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtensionAsymmetricalSpeedGroup"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtUtilIntervalGroup"), ("CISCO-IF-EXTENSION-MIB", "cieDelayedLinkUpDownNotifNotifGroup"), ("CISCO-IF-EXTENSION-MIB", "cieDelayedLinkUpDownNotifNotifEnableGroup"), ("CISCO-IF-EXTENSION-MIB", "cieIfIndexPersistenceControlGroup"), ("CISCO-IF-EXTENSION-MIB", "cieIfStatusListGroup"), ("CISCO-IF-EXTENSION-MIB", "cieIfStatusListGroupSup1"), ("CISCO-IF-EXTENSION-MIB", "cieIfVlStatsGroup"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtensionTableIntfGroup3"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtensionTableIntfGroup3SupR01"), ("CISCO-IF-EXTENSION-MIB", "cieLinkUpDownNotifConfigGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIfExtensionMIBCompliance14 = ciscoIfExtensionMIBCompliance14.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoIfExtensionMIBCompliance14.setDescription('The compliance statement for entities which implement the CISCO-IF-EXTENSION-MIB.')
ciscoIfExtensionMIBCompliance15 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 276, 2, 1, 16)).setObjects(("CISCO-IF-EXTENSION-MIB", "ciscoIfExtensionTablePacketGroup"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtensionTableIntfGroup"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtensionSystemGroup"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtDot1qEtherTypeGroup"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtUtilizationGroup"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtDot1dBaseMappingGroup"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtIfNameMappingGroup"), ("CISCO-IF-EXTENSION-MIB", "cieLinkUpDownNotifGroup"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtensionAsymmetricalSpeedGroup"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtUtilIntervalGroup"), ("CISCO-IF-EXTENSION-MIB", "cieDelayedLinkUpDownNotifNotifGroup"), ("CISCO-IF-EXTENSION-MIB", "cieDelayedLinkUpDownNotifNotifEnableGroup"), ("CISCO-IF-EXTENSION-MIB", "cieIfIndexPersistenceControlGroup"), ("CISCO-IF-EXTENSION-MIB", "cieIfStatusListGroup"), ("CISCO-IF-EXTENSION-MIB", "cieIfStatusListGroupSup1"), ("CISCO-IF-EXTENSION-MIB", "cieIfVlStatsGroup"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtensionTableIntfGroup3"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtensionTableIntfGroup3SupR01"), ("CISCO-IF-EXTENSION-MIB", "ciscoIfExtensionTableIntfGroup3SupR02"), ("CISCO-IF-EXTENSION-MIB", "cieLinkUpDownNotifConfigGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIfExtensionMIBCompliance15 = ciscoIfExtensionMIBCompliance15.setStatus('current')
if mibBuilder.loadTexts: ciscoIfExtensionMIBCompliance15.setDescription('The compliance statement for entities which implement the CISCO-IF-EXTENSION-MIB.')
ciscoIfExtensionTablePacketGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 276, 2, 2, 1)).setObjects(("CISCO-IF-EXTENSION-MIB", "cieIfLastInTime"), ("CISCO-IF-EXTENSION-MIB", "cieIfLastOutTime"), ("CISCO-IF-EXTENSION-MIB", "cieIfLastOutHangTime"), ("CISCO-IF-EXTENSION-MIB", "cieIfInRuntsErrs"), ("CISCO-IF-EXTENSION-MIB", "cieIfInGiantsErrs"), ("CISCO-IF-EXTENSION-MIB", "cieIfInFramingErrs"), ("CISCO-IF-EXTENSION-MIB", "cieIfInOverrunErrs"), ("CISCO-IF-EXTENSION-MIB", "cieIfInIgnored"), ("CISCO-IF-EXTENSION-MIB", "cieIfInAbortErrs"), ("CISCO-IF-EXTENSION-MIB", "cieIfInputQueueDrops"), ("CISCO-IF-EXTENSION-MIB", "cieIfOutputQueueDrops"), ("CISCO-IF-EXTENSION-MIB", "cieIfPacketDiscontinuityTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIfExtensionTablePacketGroup = ciscoIfExtensionTablePacketGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoIfExtensionTablePacketGroup.setDescription('A collection of objects containing packet statistics for a given interface.')
ciscoIfExtensionTableIntfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 276, 2, 2, 2)).setObjects(("CISCO-IF-EXTENSION-MIB", "cieIfResetCount"), ("CISCO-IF-EXTENSION-MIB", "cieIfKeepAliveEnabled"), ("CISCO-IF-EXTENSION-MIB", "cieIfStateChangeReason"), ("CISCO-IF-EXTENSION-MIB", "cieIfCarrierTransitionCount"), ("CISCO-IF-EXTENSION-MIB", "cieIfInterfaceDiscontinuityTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIfExtensionTableIntfGroup = ciscoIfExtensionTableIntfGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoIfExtensionTableIntfGroup.setDescription('A collection of objects containing information about properties of interfaces.')
ciscoIfExtensionTableIntfGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 276, 2, 2, 3)).setObjects(("CISCO-IF-EXTENSION-MIB", "cieIfDhcpMode"), ("CISCO-IF-EXTENSION-MIB", "cieIfMtu"), ("CISCO-IF-EXTENSION-MIB", "cieIfContextName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIfExtensionTableIntfGroup1 = ciscoIfExtensionTableIntfGroup1.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoIfExtensionTableIntfGroup1.setDescription('A collection of objects containing information about properties of interfaces.')
ciscoIfExtensionSystemGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 276, 2, 2, 4)).setObjects(("CISCO-IF-EXTENSION-MIB", "cieSystemMtu"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIfExtensionSystemGroup = ciscoIfExtensionSystemGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoIfExtensionSystemGroup.setDescription('A collection of objects providing global system-wise information about interfaces.')
ciscoIfExtDot1qEtherTypeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 276, 2, 2, 5)).setObjects(("CISCO-IF-EXTENSION-MIB", "cieIfDot1qCustomAdminEtherType"), ("CISCO-IF-EXTENSION-MIB", "cieIfDot1qCustomOperEtherType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIfExtDot1qEtherTypeGroup = ciscoIfExtDot1qEtherTypeGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoIfExtDot1qEtherTypeGroup.setDescription('A collection of objects providing the information about 802.1q custom EtherType on the interface.')
ciscoIfExtUtilizationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 276, 2, 2, 6)).setObjects(("CISCO-IF-EXTENSION-MIB", "cieIfInPktRate"), ("CISCO-IF-EXTENSION-MIB", "cieIfInOctetRate"), ("CISCO-IF-EXTENSION-MIB", "cieIfOutPktRate"), ("CISCO-IF-EXTENSION-MIB", "cieIfOutOctetRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIfExtUtilizationGroup = ciscoIfExtUtilizationGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoIfExtUtilizationGroup.setDescription('A collection of objects containing information about utilization rates of interfaces.')
ciscoIfExtDot1dBaseMappingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 276, 2, 2, 7)).setObjects(("CISCO-IF-EXTENSION-MIB", "cieIfDot1dBaseMappingPort"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIfExtDot1dBaseMappingGroup = ciscoIfExtDot1dBaseMappingGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoIfExtDot1dBaseMappingGroup.setDescription('A collection of objects containing mapping information about the ifIndex values of interfaces and their dot1dBasePort values.')
ciscoIfExtIfNameMappingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 276, 2, 2, 8)).setObjects(("CISCO-IF-EXTENSION-MIB", "cieIfIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIfExtIfNameMappingGroup = ciscoIfExtIfNameMappingGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoIfExtIfNameMappingGroup.setDescription("A collection of objects for the 'ifName' to 'ifIndex' mapping.")
ciscoIfExtensionTableIntfGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 276, 2, 2, 9)).setObjects(("CISCO-IF-EXTENSION-MIB", "cieIfDhcpMode"), ("CISCO-IF-EXTENSION-MIB", "cieIfMtu"), ("CISCO-IF-EXTENSION-MIB", "cieIfContextName"), ("CISCO-IF-EXTENSION-MIB", "cieIfOperStatusCause"), ("CISCO-IF-EXTENSION-MIB", "cieIfOperStatusCauseDescr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIfExtensionTableIntfGroup2 = ciscoIfExtensionTableIntfGroup2.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoIfExtensionTableIntfGroup2.setDescription('A collection of objects containing information about properties of interfaces.')
cieIfStatusListGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 276, 2, 2, 10)).setObjects(("CISCO-IF-EXTENSION-MIB", "cieInterfacesIndex"), ("CISCO-IF-EXTENSION-MIB", "cieInterfacesOperMode"), ("CISCO-IF-EXTENSION-MIB", "cieInterfacesOperCause"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cieIfStatusListGroup = cieIfStatusListGroup.setStatus('current')
if mibBuilder.loadTexts: cieIfStatusListGroup.setDescription('A collection of objects containing information about set of interfaces.')
cieLinkUpDownNotifEnableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 276, 2, 2, 11)).setObjects(("CISCO-IF-EXTENSION-MIB", "cieLinkUpDownEnable"), ("CISCO-IF-EXTENSION-MIB", "cieStandardLinkUpDownVarbinds"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cieLinkUpDownNotifEnableGroup = cieLinkUpDownNotifEnableGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cieLinkUpDownNotifEnableGroup.setDescription("A collection of objects to control 'cieLinkUp/cieLinkDown' and standard mib-II defined 'linkUp/linkDown' notifications.")
cieLinkUpDownNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 276, 2, 2, 12)).setObjects(("CISCO-IF-EXTENSION-MIB", "cieLinkDown"), ("CISCO-IF-EXTENSION-MIB", "cieLinkUp"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cieLinkUpDownNotifGroup = cieLinkUpDownNotifGroup.setStatus('current')
if mibBuilder.loadTexts: cieLinkUpDownNotifGroup.setDescription('A collection of cisco specific linkUp and linkDown notifications.')
ciscoIfExtensionAsymmetricalSpeedGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 276, 2, 2, 13)).setObjects(("CISCO-IF-EXTENSION-MIB", "cieIfSpeedReceive"), ("CISCO-IF-EXTENSION-MIB", "cieIfHighSpeedReceive"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIfExtensionAsymmetricalSpeedGroup = ciscoIfExtensionAsymmetricalSpeedGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoIfExtensionAsymmetricalSpeedGroup.setDescription('An optional group used to provide information on asymmetrical interface speeds.')
ciscoIfExtUtilIntervalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 276, 2, 2, 14)).setObjects(("CISCO-IF-EXTENSION-MIB", "cieIfInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIfExtUtilIntervalGroup = ciscoIfExtUtilIntervalGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoIfExtUtilIntervalGroup.setDescription('A collection of objects containing information about calculation interval for utilization rate on interfaces.')
cieIfIndexPersistenceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 276, 2, 2, 15)).setObjects(("CISCO-IF-EXTENSION-MIB", "cieIfIndexPersistence"), ("CISCO-IF-EXTENSION-MIB", "cieIfIndexPersistenceEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cieIfIndexPersistenceGroup = cieIfIndexPersistenceGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cieIfIndexPersistenceGroup.setDescription('A collection of objects containing information about ifIndex Persistence of interfaces. Since cieIfIndexPersistence and cieIfIndexPersistenceEnabled are deprecated, so, cieIfIndexPersistenceGroup containing these two objects are deprecated by cieIfIndexPersistenceControlGroup.')
cieDelayedLinkUpDownNotifNotifEnableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 276, 2, 2, 16)).setObjects(("CISCO-IF-EXTENSION-MIB", "cieDelayedLinkUpDownNotifEnable"), ("CISCO-IF-EXTENSION-MIB", "cieDelayedLinkUpDownNotifDelay"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cieDelayedLinkUpDownNotifNotifEnableGroup = cieDelayedLinkUpDownNotifNotifEnableGroup.setStatus('current')
if mibBuilder.loadTexts: cieDelayedLinkUpDownNotifNotifEnableGroup.setDescription('The group of objects that help configure the cieDelayedLinkUpDownNotif on the system.')
cieDelayedLinkUpDownNotifNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 276, 2, 2, 17)).setObjects(("CISCO-IF-EXTENSION-MIB", "cieDelayedLinkUpDownNotif"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cieDelayedLinkUpDownNotifNotifGroup = cieDelayedLinkUpDownNotifNotifGroup.setStatus('current')
if mibBuilder.loadTexts: cieDelayedLinkUpDownNotifNotifGroup.setDescription('A collection for cisco specific delayed trap notifications.')
cieIfIndexPersistenceControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 276, 2, 2, 18)).setObjects(("CISCO-IF-EXTENSION-MIB", "cieIfIndexGlobalPersistence"), ("CISCO-IF-EXTENSION-MIB", "cieIfIndexPersistenceControl"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cieIfIndexPersistenceControlGroup = cieIfIndexPersistenceControlGroup.setStatus('current')
if mibBuilder.loadTexts: cieIfIndexPersistenceControlGroup.setDescription('A collection of objects containing information about ifIndex Persistence of interfaces.')
ciscoIfExtensionTableIntfGroup3 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 276, 2, 2, 19)).setObjects(("CISCO-IF-EXTENSION-MIB", "cieIfDhcpMode"), ("CISCO-IF-EXTENSION-MIB", "cieIfMtu"), ("CISCO-IF-EXTENSION-MIB", "cieIfContextName"), ("CISCO-IF-EXTENSION-MIB", "cieIfOperStatusCause"), ("CISCO-IF-EXTENSION-MIB", "cieIfOperStatusCauseDescr"), ("CISCO-IF-EXTENSION-MIB", "cieIfOwner"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIfExtensionTableIntfGroup3 = ciscoIfExtensionTableIntfGroup3.setStatus('current')
if mibBuilder.loadTexts: ciscoIfExtensionTableIntfGroup3.setDescription('A collection of objects containing information about properties of interfaces.')
cieIfStatusListGroupSup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 276, 2, 2, 20)).setObjects(("CISCO-IF-EXTENSION-MIB", "cieInterfaceOwnershipBitmap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cieIfStatusListGroupSup1 = cieIfStatusListGroupSup1.setStatus('current')
if mibBuilder.loadTexts: cieIfStatusListGroupSup1.setDescription('Additional objects containing information about a set of interfaces.')
cieIfVlStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 276, 2, 2, 21)).setObjects(("CISCO-IF-EXTENSION-MIB", "cieIfNoDropVlInPkts"), ("CISCO-IF-EXTENSION-MIB", "cieIfNoDropVlInOctets"), ("CISCO-IF-EXTENSION-MIB", "cieIfNoDropVlOutPkts"), ("CISCO-IF-EXTENSION-MIB", "cieIfNoDropVlOutOctets"), ("CISCO-IF-EXTENSION-MIB", "cieIfDropVlInPkts"), ("CISCO-IF-EXTENSION-MIB", "cieIfDropVlInOctets"), ("CISCO-IF-EXTENSION-MIB", "cieIfDropVlOutPkts"), ("CISCO-IF-EXTENSION-MIB", "cieIfDropVlOutOctets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cieIfVlStatsGroup = cieIfVlStatsGroup.setStatus('current')
if mibBuilder.loadTexts: cieIfVlStatsGroup.setDescription('Objects containing information about a VL (Virtual Link) statistics on an interface.')
ciscoIfExtensionTableIntfGroup3SupR01 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 276, 2, 2, 22)).setObjects(("CISCO-IF-EXTENSION-MIB", "cieIfSharedConfig"), ("CISCO-IF-EXTENSION-MIB", "cieIfSpeedGroupConfig"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIfExtensionTableIntfGroup3SupR01 = ciscoIfExtensionTableIntfGroup3SupR01.setStatus('current')
if mibBuilder.loadTexts: ciscoIfExtensionTableIntfGroup3SupR01.setDescription('This group is supplement to ciscoIfExtensionTableIntfGroup3.')
cieLinkUpDownNotifConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 276, 2, 2, 23)).setObjects(("CISCO-IF-EXTENSION-MIB", "cieLinkUpDownConfig"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cieLinkUpDownNotifConfigGroup = cieLinkUpDownNotifConfigGroup.setStatus('current')
if mibBuilder.loadTexts: cieLinkUpDownNotifConfigGroup.setDescription("A collection of objects to control 'cieLinkUp/cieLinkDown' and standard mib-II defined 'linkUp/linkDown' notifications.")
ciscoIfExtensionTableIntfGroup3SupR02 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 276, 2, 2, 24)).setObjects(("CISCO-IF-EXTENSION-MIB", "cieIfTransceiverFrequencyConfig"), ("CISCO-IF-EXTENSION-MIB", "cieIfFillPatternConfig"), ("CISCO-IF-EXTENSION-MIB", "cieIfIgnoreBitErrorsConfig"), ("CISCO-IF-EXTENSION-MIB", "cieIfIgnoreInterruptThresholdConfig"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIfExtensionTableIntfGroup3SupR02 = ciscoIfExtensionTableIntfGroup3SupR02.setStatus('current')
if mibBuilder.loadTexts: ciscoIfExtensionTableIntfGroup3SupR02.setDescription('This group is supplement to ciscoIfExtensionTableIntfGroup3SupR01.')
mibBuilder.exportSymbols("CISCO-IF-EXTENSION-MIB", ciscoIfExtUtilizationGroup=ciscoIfExtUtilizationGroup, cieIfIndexPersistenceEnabled=cieIfIndexPersistenceEnabled, ciscoIfExtensionMIBCompliance13=ciscoIfExtensionMIBCompliance13, ciscoIfExtensionMIBCompliance1=ciscoIfExtensionMIBCompliance1, IfIndexPersistenceState=IfIndexPersistenceState, cieIfDropVlInPkts=cieIfDropVlInPkts, ciscoIfExtensionMIBGroups=ciscoIfExtensionMIBGroups, cieIfCarrierTransitionCount=cieIfCarrierTransitionCount, cieIfStatusListGroupSup1=cieIfStatusListGroupSup1, ciscoIfExtDot1dBaseMappingGroup=ciscoIfExtDot1dBaseMappingGroup, cieLinkUpDownNotifConfigGroup=cieLinkUpDownNotifConfigGroup, cieIfInRuntsErrs=cieIfInRuntsErrs, cieIfIndex=cieIfIndex, ciscoIfExtSystemConfig=ciscoIfExtSystemConfig, cieIfNoDropVlInOctets=cieIfNoDropVlInOctets, cieIfNoDropVlOutPkts=cieIfNoDropVlOutPkts, cieIfInterval=cieIfInterval, cieIfDot1qCustomAdminEtherType=cieIfDot1qCustomAdminEtherType, cieIfDot1dBaseMappingPort=cieIfDot1dBaseMappingPort, ciscoIfExtIfNameMappingGroup=ciscoIfExtIfNameMappingGroup, ciscoIfExtDot1qCustomEtherType=ciscoIfExtDot1qCustomEtherType, cieIfStatusListGroup=cieIfStatusListGroup, cieIfKeepAliveEnabled=cieIfKeepAliveEnabled, cieIfOperStatusCauseDescr=cieIfOperStatusCauseDescr, cieIfSpeedReceive=cieIfSpeedReceive, cieIfNameMappingEntry=cieIfNameMappingEntry, ciscoIfExtensionMIBCompliance11=ciscoIfExtensionMIBCompliance11, cieIfPacketStatsEntry=cieIfPacketStatsEntry, cieIfInterfaceTable=cieIfInterfaceTable, cieIfDot1qCustomOperEtherType=cieIfDot1qCustomOperEtherType, ciscoIfExtensionTablePacketGroup=ciscoIfExtensionTablePacketGroup, ciscoIfExtensionTableIntfGroup2=ciscoIfExtensionTableIntfGroup2, cieIfVlStatsEntry=cieIfVlStatsEntry, ciscoIfExtensionMIBNotifications=ciscoIfExtensionMIBNotifications, ciscoIfExtensionMIBCompliance10=ciscoIfExtensionMIBCompliance10, cieIfFillPatternConfig=cieIfFillPatternConfig, cieLinkUp=cieLinkUp, cieIfInPktRate=cieIfInPktRate, ciscoIfExtensionTableIntfGroup3SupR02=ciscoIfExtensionTableIntfGroup3SupR02, cieLinkUpDownNotifEnableGroup=cieLinkUpDownNotifEnableGroup, cieIfPacketStatsTable=cieIfPacketStatsTable, cieIfOutputQueueDrops=cieIfOutputQueueDrops, cieDelayedLinkUpDownNotifDelay=cieDelayedLinkUpDownNotifDelay, cieIfInAbortErrs=cieIfInAbortErrs, cieIfDot1dBaseMappingEntry=cieIfDot1dBaseMappingEntry, cieIfVlStatsTable=cieIfVlStatsTable, cieIfMtu=cieIfMtu, cieIfInterfaceEntry=cieIfInterfaceEntry, cieIfStatusListIndex=cieIfStatusListIndex, cieIfInOverrunErrs=cieIfInOverrunErrs, cieIfNoDropVlOutOctets=cieIfNoDropVlOutOctets, cieIfIndexPersistenceGroup=cieIfIndexPersistenceGroup, ciscoIfExtDot1qEtherTypeGroup=ciscoIfExtDot1qEtherTypeGroup, cieIfDropVlOutOctets=cieIfDropVlOutOctets, ciscoIfExtensionMIBCompliance3=ciscoIfExtensionMIBCompliance3, InterfaceOperModeList=InterfaceOperModeList, ciscoIfExtensionMIBCompliances=ciscoIfExtensionMIBCompliances, cieIfIgnoreInterruptThresholdConfig=cieIfIgnoreInterruptThresholdConfig, cieSystemMtu=cieSystemMtu, cieIfSharedConfig=cieIfSharedConfig, ciscoIfExtensionMIBCompliance15=ciscoIfExtensionMIBCompliance15, ciscoIfExtUtilIntervalGroup=ciscoIfExtUtilIntervalGroup, cieIfNameMappingTable=cieIfNameMappingTable, ciscoIfExtensionMIBCompliance12=ciscoIfExtensionMIBCompliance12, cieLinkUpDownNotifGroup=cieLinkUpDownNotifGroup, cieIfInputQueueDrops=cieIfInputQueueDrops, ciscoIfExtensionMIBCompliance7=ciscoIfExtensionMIBCompliance7, ciscoIfExtensionMIBConformance=ciscoIfExtensionMIBConformance, cieIfUtilTable=cieIfUtilTable, cieDelayedLinkUpDownNotif=cieDelayedLinkUpDownNotif, InterfaceOwnershipList=InterfaceOwnershipList, cieIfIndexPersistence=cieIfIndexPersistence, cieIfIndexPersistenceEntry=cieIfIndexPersistenceEntry, cieIfPacketDiscontinuityTime=cieIfPacketDiscontinuityTime, ciscoIfExtensionMIBCompliance6=ciscoIfExtensionMIBCompliance6, cieIfInIgnored=cieIfInIgnored, cieIfOutOctetRate=cieIfOutOctetRate, cieIfVlStatsGroup=cieIfVlStatsGroup, cieIfDot1dBaseMappingTable=cieIfDot1dBaseMappingTable, cieIfIgnoreBitErrorsConfig=cieIfIgnoreBitErrorsConfig, cieInterfacesIndex=cieInterfacesIndex, cieIfOwner=cieIfOwner, ciscoIfExtUtilization=ciscoIfExtUtilization, cieIfUtilEntry=cieIfUtilEntry, cieIfTransceiverFrequencyConfig=cieIfTransceiverFrequencyConfig, cieIfDropVlOutPkts=cieIfDropVlOutPkts, cieIfLastOutTime=cieIfLastOutTime, cieDelayedLinkUpDownNotifNotifEnableGroup=cieDelayedLinkUpDownNotifNotifEnableGroup, cieIfNoDropVlInPkts=cieIfNoDropVlInPkts, InterfaceIndexList=InterfaceIndexList, cieIfName=cieIfName, ciscoIfExtDot1dBaseMapping=ciscoIfExtDot1dBaseMapping, ciscoIfExtensionMIBCompliance4=ciscoIfExtensionMIBCompliance4, cieIfDhcpMode=cieIfDhcpMode, cieInterfacesOperCause=cieInterfacesOperCause, cieLinkDown=cieLinkDown, ciscoIfExtensionTableIntfGroup=ciscoIfExtensionTableIntfGroup, ciscoIfExtensionMIB=ciscoIfExtensionMIB, cieIfIndexGlobalPersistence=cieIfIndexGlobalPersistence, ciscoIfExtensionMIBCompliance9=ciscoIfExtensionMIBCompliance9, cieIfOutPktRate=cieIfOutPktRate, ciscoIfExtensionMIBCompliance8=ciscoIfExtensionMIBCompliance8, ciscoIfExtensionSystemGroup=ciscoIfExtensionSystemGroup, ciscoIfExtensionTableIntfGroup3SupR01=ciscoIfExtensionTableIntfGroup3SupR01, InterfaceOperCauseList=InterfaceOperCauseList, cieIfStatusListTable=cieIfStatusListTable, ciscoIfExtIfNameMapping=ciscoIfExtIfNameMapping, cieInterfacesOperMode=cieInterfacesOperMode, cieIfLastOutHangTime=cieIfLastOutHangTime, ciscoIfExtensionAsymmetricalSpeedGroup=ciscoIfExtensionAsymmetricalSpeedGroup, cieLinkUpDownConfig=cieLinkUpDownConfig, cieStandardLinkUpDownVarbinds=cieStandardLinkUpDownVarbinds, cieIfInOctetRate=cieIfInOctetRate, ciscoIfExtensionTableIntfGroup3=ciscoIfExtensionTableIntfGroup3, ciscoIfExtensionMIBCompliance=ciscoIfExtensionMIBCompliance, cieIfDropVlInOctets=cieIfDropVlInOctets, cieIfHighSpeedReceive=cieIfHighSpeedReceive, cieDelayedLinkUpDownNotifEnable=cieDelayedLinkUpDownNotifEnable, cieIfInterfaceDiscontinuityTime=cieIfInterfaceDiscontinuityTime, cieInterfaceOwnershipBitmap=cieInterfaceOwnershipBitmap, cieIfDot1qCustomEtherTypeEntry=cieIfDot1qCustomEtherTypeEntry, cieIfIndexPersistenceTable=cieIfIndexPersistenceTable, cieDelayedLinkUpDownNotifNotifGroup=cieDelayedLinkUpDownNotifNotifGroup, ciscoIfExtensionMIBObjects=ciscoIfExtensionMIBObjects, cieIfContextName=cieIfContextName, cieIfLastInTime=cieIfLastInTime, cieIfStatusListEntry=cieIfStatusListEntry, cieIfResetCount=cieIfResetCount, cieIfStateChangeReason=cieIfStateChangeReason, ciscoIfExtensionMIBCompliance2=ciscoIfExtensionMIBCompliance2, cieIfIndexPersistenceControl=cieIfIndexPersistenceControl, ciscoIfExtensionMIBCompliance5=ciscoIfExtensionMIBCompliance5, cieIfInFramingErrs=cieIfInFramingErrs, cieIfInGiantsErrs=cieIfInGiantsErrs, ciscoIfExtensionTableIntfGroup1=ciscoIfExtensionTableIntfGroup1, cieIfSpeedGroupConfig=cieIfSpeedGroupConfig, cieIfIndexPersistenceControlGroup=cieIfIndexPersistenceControlGroup, ciscoIfExtensionStats=ciscoIfExtensionStats, PYSNMP_MODULE_ID=ciscoIfExtensionMIB, ciscoIfExtensionMIBCompliance14=ciscoIfExtensionMIBCompliance14, cieIfDot1qCustomEtherTypeTable=cieIfDot1qCustomEtherTypeTable, cieIfOperStatusCause=cieIfOperStatusCause, cieLinkUpDownEnable=cieLinkUpDownEnable)
