#
# PySNMP MIB module TRAPEZE-NETWORKS-TRAP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TRAPEZE-NETWORKS-TRAP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:27:27 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
InetAddressIPv6, InetAddressType, InetAddressIPv4, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressIPv6", "InetAddressType", "InetAddressIPv4", "InetAddress")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ObjectIdentity, Counter32, IpAddress, ModuleIdentity, iso, Bits, Integer32, MibIdentifier, Unsigned32, Counter64, TimeTicks, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Counter32", "IpAddress", "ModuleIdentity", "iso", "Bits", "Integer32", "MibIdentifier", "Unsigned32", "Counter64", "TimeTicks", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32")
MacAddress, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "TextualConvention", "DisplayString")
TrpzApPortOrDapNum, TrpzApTransition, TrpzCryptoType, TrpzRadioMode, TrpzRadioNum, TrpzChannelNum, TrpzApAttachType, TrpzAccessType, TrpzApServiceAvailability, TrpzApConnectSecurityType, TrpzRadioConfigState, TrpzPowerLevel, TrpzApSerialNum, TrpzRadioChannelWidth, TrpzChannelChangeType, TrpzRadioPowerChangeType, TrpzApWasOperational, TrpzRadioMimoState, TrpzApRadioIndex, TrpzApFailDetail, TrpzRssi, TrpzApNum, TrpzApFingerprint, TrpzRadioType = mibBuilder.importSymbols("TRAPEZE-NETWORKS-AP-TC", "TrpzApPortOrDapNum", "TrpzApTransition", "TrpzCryptoType", "TrpzRadioMode", "TrpzRadioNum", "TrpzChannelNum", "TrpzApAttachType", "TrpzAccessType", "TrpzApServiceAvailability", "TrpzApConnectSecurityType", "TrpzRadioConfigState", "TrpzPowerLevel", "TrpzApSerialNum", "TrpzRadioChannelWidth", "TrpzChannelChangeType", "TrpzRadioPowerChangeType", "TrpzApWasOperational", "TrpzRadioMimoState", "TrpzApRadioIndex", "TrpzApFailDetail", "TrpzRssi", "TrpzApNum", "TrpzApFingerprint", "TrpzRadioType")
TrpzPhysPortNumberOrZero, TrpzIpPort = mibBuilder.importSymbols("TRAPEZE-NETWORKS-BASIC-TC", "TrpzPhysPortNumberOrZero", "TrpzIpPort")
TrpzClientAuthenProtocolType, TrpzClientAccessMode, TrpzUserAccessType, TrpzClientDeviceProfileName, TrpzClientDot1xState, TrpzClientDeviceType, TrpzClientDeviceGroupName, TrpzClientSessionState = mibBuilder.importSymbols("TRAPEZE-NETWORKS-CLIENT-SESSION-TC", "TrpzClientAuthenProtocolType", "TrpzClientAccessMode", "TrpzUserAccessType", "TrpzClientDeviceProfileName", "TrpzClientDot1xState", "TrpzClientDeviceType", "TrpzClientDeviceGroupName", "TrpzClientSessionState")
TrpzRFDetectClassificationReason, = mibBuilder.importSymbols("TRAPEZE-NETWORKS-RF-DETECT-TC", "TrpzRFDetectClassificationReason")
TrpzRFNoiseSourceType, TrpzRFNoiseSourceID = mibBuilder.importSymbols("TRAPEZE-NETWORKS-RF-NOISE-TC-MIB", "TrpzRFNoiseSourceType", "TrpzRFNoiseSourceID")
trpzTemporary, trpzMibs, trpzTraps = mibBuilder.importSymbols("TRAPEZE-NETWORKS-ROOT-MIB", "trpzTemporary", "trpzMibs", "trpzTraps")
trpzTrapMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 14525, 4, 1))
trpzTrapMib.setRevisions(('2012-07-31 04:06', '2012-04-20 04:05', '2012-04-09 04:03', '2012-03-15 03:10', '2011-10-18 03:00', '2011-01-11 02:50', '2010-12-21 02:40', '2010-12-21 02:28', '2008-12-19 02:27', '2008-10-30 02:25', '2008-05-15 02:15', '2008-05-07 02:12', '2008-04-22 02:02', '2008-04-10 02:01', '2008-04-08 01:58', '2008-02-18 01:57', '2007-12-03 01:53', '2007-11-15 01:52', '2007-11-01 01:45', '2007-10-01 01:41', '2007-08-31 01:40', '2007-08-24 01:22', '2007-07-06 01:10', '2007-06-05 01:07', '2007-05-17 01:06', '2007-05-04 01:03', '2007-04-19 01:00', '2007-03-27 00:54', '2007-02-15 00:53', '2007-01-09 00:52', '2007-01-09 00:51', '2007-01-09 00:50', '2006-09-28 00:45', '2006-08-08 00:42', '2006-07-31 00:40', '2006-07-28 00:32', '2006-07-23 00:29', '2006-07-12 00:28', '2006-07-07 00:26', '2006-07-07 00:25', '2006-07-06 00:23', '2006-04-19 00:22', '2006-04-19 00:21', '2005-01-01 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: trpzTrapMib.setRevisionsDescriptions(('v4.4.6: Updated the descriptions of the following objects: trpzClientIPv4Addr, trpzClientIPv6LinkLocalAddr. This will be published in 8.0 release.', 'v4.4.5: Added new traps: trpzClientDeviceTypeChangeTrap, trpzClientDeviceProfileChangeTrap; related TC: TrpzClientDeviceProfileChangeReason; and related objects: trpzClientDeviceType, trpzClientDeviceTypeOld, trpzClientDeviceGroup, trpzClientDeviceProfileName, trpzClientDeviceProfileNameOld, trpzClientDeviceProfileChangeReason. (for 8.0 release)', "v4.4.3: Redesigned client-related traps to include the client's IPv6 link-local address. The revised traps are: trpzClientDeAssociationTrap2, trpzClientRoamingTrap2, trpzClientIpAddrChangeTrap2, trpzClientDeAuthenticationTrap2, trpzClientDynAuthorChangeSuccessTrap2, trpzClientDisconnectTrap2, trpzClientClearedTrap3, trpzClientAuthorizationSuccessTrap5; and related objects: trpzClientAuthServerAddrType, trpzClientAuthServerAddr, trpzClientDynAuthorClientAddrType, trpzClientDynAuthorClientAddr, trpzClientRoamedFromWsAddrType, trpzClientRoamedFromWsAddr, trpzClientIpAddrType, trpzClientIpAddr, trpzClientIPv4Addr, trpzClientIPv6LinkLocalAddr, trpzApRadioIndex, trpzClientRoamedFromAccessMode, trpzClientRoamedFromPhysPortNum, trpzClientRoamedFromApNum, trpzClientRoamedFromRadioIndex. They replace the following traps that were obsoleted: trpzClientDeAssociationTrap, trpzClientRoamingTrap, trpzClientIpAddrChangeTrap, trpzClientDeAuthenticationTrap, trpzClientDynAuthorChangeSuccessTrap, trpzClientDisconnectTrap, trpzClientClearedTrap2, trpzClientAuthorizationSuccessTrap4; and related objects: trpzClientIp, trpzClientRoamedFromWsIp, trpzClientRoamedFromAccessType, trpzClientRoamedFromPortNum, trpzClientRoamedFromDAPNum, trpzClientRoamedFromRadioNum. Added one value (10) to TrpzClientIpAddrChangeReason. Renamed enum value (1) from 'client-connected' to 'client-connected-ipv4'. (for 8.0 release)", 'v4.3.0: Added new traps: trpzAutoTuneSuccessTrap, trpzAutoTuneFailureTrap; related TCs: TrpzRadioBand, TrpzAutoTuneFailureReason; and related objects: trpzRadioBand, trpzRadiosTunedCount, trpzAutoTuneFailureReason. (for 8.0 release)', 'v4.2.0: Added new traps: trpzM2UConvNotPossibleTrap, trpzM2UConvAvailabilityRestoredTrap; related TC: TrpzM2UConvNotPossibleReason; and related objects: trpzM2UMulticastAddrType, trpzM2UMulticastAddr, trpzM2UConvNotPossibleReason. (for 7.7 release)', 'v4.1.0: Added new trap: trpzRFNoiseSourceTrap and related objects: trpzRFNoiseSourceID, trpzRFNoiseSourceType, trpzRFNoiseChannel, trpzRFNoiseRssi, trpzRFNoiseDutyCycle, trpzRFNoiseChannelInterferenceMeasure, trpzRFNoiseAge (for 7.5 release)', 'v4.0.0: Added new traps for tunnel limit: trpzApTunnelLimitExceededTrap, trpzWsTunnelLimitExceededTrap; related TC: TrpzWsTunnelLimitType; and related objects: trpzApTunnelLimit, trpzWsTunnelLimit, trpzWsTunnelLimitType. (for 7.5 release)', "v3.9.8: Corrected MAX-ACCESS for 'trpzMultimediaCallRssi': read-only access was neither intended nor implemented for this or any other object from the Trap MIB. This will be published in 7.3 release.", 'v3.9.7: Added new trap: trpzMultimediaCallFailureTrap, related TCs: TrpzMultimediaCallDirection, TrpzMultimediaSignalingProtocol, TrpzMultimediaCallFailureReason, and related objects: trpzMultimediaCommunicationServerID, trpzMultimediaCallDirection, trpzMultimediaLocalStationIp, trpzMultimediaLocalStationPort, trpzMultimediaLocalStationEndpointID, trpzMultimediaRemoteStationIp, trpzMultimediaRemoteStationPort, trpzMultimediaRemoteStationEndpointID, trpzMultimediaSignalingProtocol, trpzMultimediaCallBandwidthAndCodec, trpzMultimediaCallDataRate, trpzMultimediaCallRssi, trpzMultimediaCallFailureReason. (for 7.1 release)', "v3.9.5: Using the new TC TrpzPhysPortNumberOrZero instead of ''Unsigned32 (0..1024)''. This will be published in 7.1 release.", 'v3.8.5: Clarified description to reflect the actual use and avoid future misuse of trpzDeviceSerNum. Updated description for trpzApName. Documented the meaning of TrpzClientIpAddrChangeReason enumeration values. This will be published in 7.0 release.', 'v3.8.2: Added new trap: trpzClusterFailureTrap, related TC and objects: TrpzClusterFailureReason, trpzClusterFailureReason, trpzClusterFailureDescription (for 7.0 release)', 'v3.7.2: Added new traps: trpzRFDetectRogueDeviceTrap2, trpzRFDetectSuspectDeviceTrap2 and related objects: trpzRFDetectXmtrRadioType, trpzRFDetectXmtrCryptoType. Obsoleted trpzRFDetectRogueDeviceTrap, trpzRFDetectSuspectDeviceTrap. (for 7.0 release)', 'v3.7.1: Added new trap: trpzClientAuthorizationSuccessTrap4, and related object: trpzClientRadioType. Obsoletes trpzClientAuthorizationSuccessTrap, trpzClientAuthorizationSuccessTrap2, trpzClientAuthorizationSuccessTrap3. (for 7.0 release)', 'v3.6.8: Obsoleted two traps: trpzRFDetectSpoofedMacAPTrap, trpzRFDetectSpoofedSsidAPTrap. (for 7.0 release)', 'v3.6.7: Redesigned the AP Operational - Radio Status trap to support 11n-capable APs. Added varbindings: trpzRadioChannelWidth, trpzRadioMimoState. The new trap is trpzApOperRadioStatusTrap3. (for 7.0 release)', 'v3.6.3: Obsoleted one object: trpzApPortOrDapNum (previously deprecated). This will be published in 7.0 release.', 'v3.6.2: Added three new traps: trpzApManagerChangeTrap, trpzClientClearedTrap2, trpzMobilityDomainResiliencyStatusTrap, related TCs and objects: TrpzApMgrChangeReason, trpzApMgrChangeReason, trpzApMgrOldIp, trpzApMgrNewIp, trpzClientSessionElapsedSeconds, TrpzClientClearedReason, trpzClientClearedReason, TrpzMobilityDomainResiliencyStatus, trpzMobilityDomainResiliencyStatus. Obsoleted one trap: trpzClientClearedTrap, and related object: trpzClientSessionElapsedTime. (for 7.0 release)', 'v3.5.5: Added new trap: trpzClientAuthorizationSuccessTrap3, related TC and objects: TrpzClientAuthorizationReason trpzClientAuthorizationReason, trpzClientAccessMode, trpzPhysPortNum. Obsoletes trpzClientAuthorizationSuccessTrap, trpzClientAuthorizationSuccessTrap2. (for 6.2 release)', 'v3.5.1: Cleaned up object (trpzAPAccessType). Marked it as obsolete, because instrumentation code for traps using it was removed long time ago. (This will be published in 6.2 release.)', "v3.5.0: Corrected trpzClientMACAddress2 SYNTAX: its value was always a MacAddress, not an arbitrary 'OCTET STRING (SIZE (6))'. There is no change on the wire, just a more appropriate DISPLAY-HINT.", 'v3.3.2: Added new trap: trpzMichaelMICFailure, related TC and object: TrpzMichaelMICFailureCause, trpzMichaelMICFailureCause. Obsoletes trpzMpMichaelMICFailure, trpzMpMichaelMICFailure2. (for 6.2 release)', 'v3.2.0: Redesigned the AP Status traps. - Replaced trpzApAttachType and trpzApPortOrDapNum with a single varbinding, trpzApNum. - Added varbinding trpzRadioMode to the AP Operational - Radio Status trap. The new traps are trpzApNonOperStatusTrap2, trpzApOperRadioStatusTrap2. (for 6.2 release)', 'v3.1.2: Obsoleted one trap: trpzRFDetectUnAuthorizedAPTrap (for 6.2 release)', 'v3.1.1: Added new trap: trpzConfigurationSavedTrap and related objects: trpzConfigSaveFileName, trpzConfigSaveInitiatorType, trpzConfigSaveInitiatorIp, trpzConfigSaveInitiatorDetails, trpzConfigSaveGeneration. (for 6.2 release)', 'v3.0.1: added one value (3) to TrpzClientIpAddrChangeReason', 'v3.0.0: Added six new traps: trpzRFDetectRogueDeviceTrap, trpzRFDetectRogueDeviceDisappearTrap, trpzRFDetectSuspectDeviceTrap, trpzRFDetectSuspectDeviceDisappearTrap, trpzRFDetectClientViaRogueWiredAPTrap3, trpzRFDetectClassificationChangeTrap and related object: trpzRFDetectClassificationReason. Obsoleted seven traps: trpzRFDetectRogueAPTrap, trpzRFDetectRogueDisappearTrap, trpzRFDetectInterferingRogueAPTrap, trpzRFDetectInterferingRogueDisappearTrap, trpzRFDetectUnAuthorizedSsidTrap, trpzRFDetectUnAuthorizedOuiTrap, trpzRFDetectClientViaRogueWiredAPTrap2. (for 6.2 release)', 'v2.9.2: added three values (13, 14, 15) to TrpzAuthorizationFailureType (for 6.2 release)', 'v2.9.1: Cleaned up trap (trpzClientAuthorizationSuccessTrap) and object (trpzRadioRssi) deprecated long time ago. Marked them as obsolete, because instrumentation code was removed already. (This will be published in 6.2 release.)', 'v2.9.0: Added two textual conventions: TrpzUserAttributeList, TrpzSessionDisconnectType three new traps: trpzClientDynAuthorChangeSuccessTrap, trpzClientDynAuthorChangeFailureTrap, trpzClientDisconnectTrap and related objects: trpzClientDynAuthorClientIp, trpzChangedUserParamOldValues, trpzChangedUserParamNewValues, trpzClientDisconnectSource, trpzClientDisconnectDescription (for 6.2 release)', 'v2.8.5: added one value (24) to TrpzRFDetectDoSType (for 6.2 release)', 'v2.6.4: Added two new traps: trpzMobilityDomainFailOverTrap, trpzMobilityDomainFailBackTrap and related objects: trpzMobilityDomainSecondarySeedIp, trpzMobilityDomainPrimarySeedIp (for 6.0 release)', 'v2.6.2: Factored out four textual conventions into a new module, Client Session TC: TrpzClientSessionState, TrpzClientAuthenProtocolType, TrpzClientDot1xState, TrpzUserAccessType and imported them from there.', 'v2.5.2: Added new trap: trpzApRejectLicenseExceededTrap and related object: trpzNumLicensedActiveAPs (for 6.0 release)', 'v2.5.0: Added new trap: trpzRFDetectAdhocUserDisappearTrap (for 6.0 release)', 'v2.4.7: Removed unused imports', 'v2.4.1: Added new trap: trpzRFDetectBlacklistedTrap, related textual convention: TrpzBlacklistingCause and objects: trpzBlacklistingRemainingTime, trpzBlacklistingCause (for 6.0 release)', 'v2.4.0: Added new trap: RFDetectClientViaRogueWiredAPTrap2 and related object: trpzRFDetectRogueAPMacAddr. This trap obsoletes the RFDetectClientViaRogueWiredAPTrap (for 6.0 release)', 'v2.3.1: Added 3 new traps: trpzClientAssociationSuccessTrap, trpzClientAuthenticationSuccessTrap, trpzClientDeAuthenticationTrap (for 6.0 release)', 'v2.3.0: Added new trap: trpzClientIpAddrChangeTrap and related object: TrpzClientIpAddrChangeReason (for 6.0 release)', 'v2.2.0: added two values (13, 14) to TrpzAuthenticationFailureType (for 6.0 release)', 'v2.1.6: Updated client connection failure causes and descriptions (for 5.0 release)', 'v2.0.6: Revised for 4.1 release', 'v1: initial version, as for 4.0 and older releases',))
if mibBuilder.loadTexts: trpzTrapMib.setLastUpdated('201207310406Z')
if mibBuilder.loadTexts: trpzTrapMib.setOrganization('Trapeze Networks')
if mibBuilder.loadTexts: trpzTrapMib.setContactInfo('Trapeze Networks Technical Support www.trapezenetworks.com US: 866.TRPZ.TAC International: 925.474.2400 support@trapezenetworks.com')
if mibBuilder.loadTexts: trpzTrapMib.setDescription("Notifications emitted by Trapeze Networks wireless switches. AP = Access Point; AC = Access Controller (wireless switch), the device that runs a SNMP Agent implementing this MIB. Copyright 2004-2012 Trapeze Networks, Inc. All rights reserved. This Trapeze Networks SNMP Management Information Base Specification (Specification) embodies Trapeze Networks' confidential and proprietary intellectual property. Trapeze Networks retains all title and ownership in the Specification, including any revisions. This Specification is supplied 'AS IS' and Trapeze Networks makes no warranty, either express or implied, as to the use, operation, condition, or performance of the Specification.")
trpzTrapsV2 = MibIdentifier((1, 3, 6, 1, 4, 1, 14525, 5, 0))
class TrpzAssociationFailureType(TextualConvention, Integer32):
    description = "Enumeration of the reasons for an AP to fail a client's 802.11 association"
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))
    namedValues = NamedValues(("other", 1), ("load-balance", 2), ("quiet-period", 3), ("dot1x", 4), ("no-prev-assoc", 5), ("glare", 6), ("cipher-rejected", 7), ("cipher-mismatch", 8), ("wep-not-configured", 9), ("bad-assoc-request", 10), ("out-of-memory", 11), ("tkip-cm-active", 12), ("roam-in-progress", 13))

class TrpzAuthenticationFailureType(TextualConvention, Integer32):
    description = "Enumeration of the reasons for AAA authentication to fail user-glob-mismatch - auth rule/user not found for console login user-does-not-exist - login failed because user not found invalid-password - login failed because of invalid password server-timeout - unable to contact a AAA server signature-failed - incorrect password for mschapv2 local-certificate-error - certificate error all-servers-down - unable to contact any AAA server in the group authentication-type-mismatch - client and switch are using different authentication methods server-rejected - received reject from AAA server fallthru-auth-misconfig - problem with fallthru authentication no-lastresort-auth - problem with last-resort authentication exceeded-max-attempts - local user failed to login within allowed number of attempts resulting in account lockout password-expired - user's password expired"
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))
    namedValues = NamedValues(("other", 1), ("user-glob-mismatch", 2), ("user-does-not-exist", 3), ("invalid-password", 4), ("server-timeout", 5), ("signature-failed", 6), ("local-certificate-error", 7), ("all-servers-down", 8), ("authentication-type-mismatch", 9), ("server-rejected", 10), ("fallthru-auth-misconfig", 11), ("no-lastresort-auth", 12), ("exceeded-max-attempts", 13), ("password-expired", 14))

class TrpzAuthorizationFailureType(TextualConvention, Integer32):
    description = 'Enumeration of the reasons for AAA authorization failure'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))
    namedValues = NamedValues(("other", 1), ("user-param", 2), ("location-policy", 3), ("vlan-tunnel-failure", 4), ("ssid-mismatch", 5), ("acl-mismatch", 6), ("timeofday-mismatch", 7), ("crypto-type-mismatch", 8), ("mobility-profile-mismatch", 9), ("start-date-mismatch", 10), ("end-date-mismatch", 11), ("svr-type-mismatch", 12), ("ssid-defaults", 13), ("qos-profile-mismatch", 14), ("simultaneous-logins", 15))

class TrpzDot1xFailureType(TextualConvention, Integer32):
    description = "Enumeration of the dot1x failure reasons. quiet-period occurs when client is denied access for a period of time after a failed connection attempt administrative-kill means that the session was cleared using the 'clear dot1x client' command bad-rsnie means that client sent an invalid IE timeout is when there are excessive retransmissions max-sessions-exceeded means the maximum allowed wired clients has been exceeded on the switch fourway-hs-failure is for failures occuring the 4-way key handshake user-glob-mismatch means the name received in the dot1x identity request does not match any configured userglobs in the system reauth-disabled means that the client is trying to reauthenticate but reauthentication is disabled gkhs-failure means that either there was no response from the client during the GKHS or the response did not have an IE force-unauth-configured means that the client is trying to connect through a port which is configured as force-unauth cert-not-installed means that there is no certificate installed on the switch"
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))
    namedValues = NamedValues(("other", 1), ("quiet-period", 2), ("administrative-kill", 3), ("bad-rsnie", 4), ("timeout", 5), ("max-sessions-exceeded", 6), ("fourway-hs-failure", 7), ("user-glob-mismatch", 8), ("bonded-auth-failure", 9), ("reauth-disabled", 10), ("gkhs-failure", 11), ("force-unauth-configured", 12), ("cert-not-installed", 13))

class TrpzRFDetectDoSType(TextualConvention, Integer32):
    description = 'The types of denial of service (DoS) attacks'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24))
    namedValues = NamedValues(("probe-flood", 1), ("auth-flood", 2), ("null-data-flood", 3), ("mgmt-6-flood", 4), ("mgmt-7-flood", 5), ("mgmt-d-flood", 6), ("mgmt-e-flood", 7), ("mgmt-f-flood", 8), ("fakeap-ssid", 9), ("fakeap-bssid", 10), ("bcast-deauth", 11), ("null-probe-resp", 12), ("disassoc-spoof", 13), ("deauth-spoof", 14), ("decrypt-err", 15), ("weak-wep-iv", 16), ("wireless-bridge", 17), ("netstumbler", 18), ("wellenreiter", 19), ("adhoc-client-frame", 20), ("associate-pkt-flood", 21), ("re-associate-pkt-flood", 22), ("de-associate-pkt-flood", 23), ("bssid-spoof", 24))

class TrpzClientIpAddrChangeReason(TextualConvention, Integer32):
    description = 'Describes the reasons for client IP address changes: client-connected-ipv4: an IPv4 address was assigned on the initial connection of an IPv4 client, or when an IPv6 client activated the IPv4 stack; other: IPv4 address changed after initial connection; dhcp-to-static: erroneous condition where client IPv4 address is changed to a static address while the dhcp-restrict option is enabled; ipv6-global-addr: a new IPv6 global address was assigned to the client.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 10))
    namedValues = NamedValues(("client-connected-ipv4", 1), ("other", 2), ("dhcp-to-static", 3), ("ipv6-global-addr", 10))

class TrpzBlacklistingCause(TextualConvention, Integer32):
    description = "Enumeration of reasons for blacklisting a transmitter: bl-configured: administrative action (explicitly added to the Black List), bl-associate-pkt-flood: Association request flood detected, bl-re-associate-pkt-flood: Re-association request flood detected, bl-de-associate-pkt-flood: De-association request flood detected. (The leading 'bl-' stands for 'Black-Listed'; reading it as 'Blocked' would also make sense)."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("bl-configured", 1), ("bl-associate-pkt-flood", 2), ("bl-re-associate-pkt-flood", 3), ("bl-de-associate-pkt-flood", 4))

class TrpzUserAttributeList(DisplayString):
    description = 'Display string listing AAA attributes and their values. These strings can be used, for example, in change of authorization notifications. The syntax is: attribute_name1=value1, attribute_name2=value2, ... where attribute_name can be one of the following: vlan-name, in-acl, out-acl, mobility-prof, time-of-day, end-date, sess-timeout, acct-interval, service-type. Example: vlan-name=red, in-acl=in_acl_1'
    status = 'current'
    subtypeSpec = DisplayString.subtypeSpec + ValueSizeConstraint(0, 2048)

class TrpzSessionDisconnectType(TextualConvention, Integer32):
    description = 'Enumeration of the sources that can initiate the termination of a session: admin-disconnect: session terminated by administrative action (from console, telnet session, WebView, or RingMaster). dyn-auth-disconnect: session terminated by dynamic authorization client; description will have the IP address of the dynamic authorization client which sent the request.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("other", 1), ("admin-disconnect", 2), ("dyn-auth-disconnect", 3))

class TrpzConfigSaveInitiatorType(TextualConvention, Integer32):
    description = 'Enumeration of the sources that can initiate a configuration save: cli-console: configuration save requested from serial console administrative session. cli-remote: configuration save requested from telnet or ssh administrative session. https: configuration save requested via HTTPS API (RingMaster or WebView). snmp-set: configuration saved as a result of performing a SNMP SET operation.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("other", 1), ("cli-console", 2), ("cli-remote", 3), ("https", 4), ("snmp-set", 5))

class TrpzMichaelMICFailureCause(TextualConvention, Integer32):
    description = 'Describes the cause/source of Michael MIC Failure detection.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("detected-by-ap", 1), ("detected-by-client", 2))

class TrpzClientAuthorizationReason(TextualConvention, Integer32):
    description = 'Enumeration of the reasons for AAA authorization.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("other", 1), ("new-client", 2), ("re-auth", 3), ("roam", 4))

class TrpzApMgrChangeReason(TextualConvention, Integer32):
    description = "Enumeration of the reasons why AP is switching to its secondary link: failover: AP's primary link failed. load-balancing: AP's primary link is overloaded."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("other", 1), ("failover", 2), ("load-balancing", 3))

class TrpzClientClearedReason(TextualConvention, Integer32):
    description = 'Enumeration of the reasons for clearing a session: normal: Session was cleared from the switch as the last step in the normal session termination process. backup-failure: The backup switch could not activate a session from a failed MX.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("other", 1), ("normal", 2), ("backup-failure", 3))

class TrpzMobilityDomainResiliencyStatus(TextualConvention, Integer32):
    description = 'Enumeration of the current resilient capacity status for a mobility domain: resilient: Every AP in the mobility domain has a secondary backup link. If the primary switch of an AP failed, the AP and its sessions would fail over to its backup link. degraded: Some APs only have a primary link. If the primary switch of an AP without a backup link failed, the AP would reboot and its sessions would be lost.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("other", 1), ("resilient", 2), ("degraded", 3))

class TrpzClusterFailureReason(TextualConvention, Integer32):
    description = 'Enumeration of the reasons why the AC goes into cluster failure state: validation-error: Cluster configuration rejected due to validation error.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("other", 1), ("validation-error", 2))

class TrpzMultimediaSignalingProtocol(TextualConvention, Integer32):
    description = 'Enumeration of Multimedia Signaling Protocols: protocols for creating, modifying, terminating sessions. The first signaling protocol supported is: sip = Session Initiation Protocol.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("other", 1), ("sip", 2))

class TrpzMultimediaCallFailureReason(TextualConvention, Integer32):
    description = 'Enumeration of the reasons why a multimedia call fails.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("other", 1), ("resource-unavailable", 2))

class TrpzMultimediaCallDirection(TextualConvention, Integer32):
    description = 'Enumeration of the multimedia call direction.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("incoming", 1), ("outgoing", 2))

class TrpzWsTunnelLimitType(TextualConvention, Integer32):
    description = "Enumeration of the type of limit exceeded that caused the AC (wireless switch) to reject a tunnel creation request. The value 'platform-tunnel-limit' (2) corresponds to the maximum tunnel capacity of a switch, which depends on the platform. Some of the available tunnel capacity for each switch is reserved for switch-to-switch tunnels. The remaining tunnel capacity is used for AP-to-switch tunnels. The switch-to-switch tunnel reservations can increase or decrease depending on factors such as: - the current number of members in the mobility domain, - the current number of members in the network domain, - network resiliency status. The value 'ap-ws-tunnel-limit' (3) corresponds to the available number of AP-to-switch tunnels, which depends on the current situation of the switch."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("other", 1), ("platform-tunnel-limit", 2), ("ap-ws-tunnel-limit", 3))

class TrpzM2UConvNotPossibleReason(TextualConvention, Integer32):
    description = 'Enumeration of the reasons why multicast to unicast conversion cannot be performed. max-conv-limit: The number of required conversions is higher than the defined limit.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("other", 1), ("max-conv-limit", 2))

class TrpzRadioBand(TextualConvention, Integer32):
    description = 'Enumeration of the 802.11 radio bands. 802.11 a/n use the 5 GHz band. 802.11 b/g/n use the 2.4 GHz band.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("bandAN", 1), ("bandBGN", 2))

class TrpzAutoTuneFailureReason(TextualConvention, Integer32):
    description = 'Enumeration of the reasons why an auto-tune operation failed: ap-conn-lost: The connection with an AP involved in the auto-tune process was lost. ws-conn-lost: The connection with a wireless switch involved in the auto-tune process was lost.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("other", 1), ("ap-conn-lost", 2), ("ws-conn-lost", 3))

class TrpzClientDeviceProfileChangeReason(TextualConvention, Integer32):
    description = 'Enumeration of the reasons for device profile changes. aaa-policy: The device profile has changed due to an AAA policy, after authentication. device-type-changed: The device type has changed.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("other", 1), ("aaa-policy", 2), ("device-type-changed", 3))

trpzDeviceId = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 1), ObjectIdentifier()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzDeviceId.setStatus('current')
if mibBuilder.loadTexts: trpzDeviceId.setDescription('Enumeration of devices as indicated in registration MIB. This object is used within notifications and is not accessible.')
trpzMobilityDomainIp = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 2), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzMobilityDomainIp.setStatus('current')
if mibBuilder.loadTexts: trpzMobilityDomainIp.setDescription('IP address of the other switch which the send switch is reporting on. This object is used within notifications and is not accessible.')
trpzAPMACAddress = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 3), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzAPMACAddress.setStatus('current')
if mibBuilder.loadTexts: trpzAPMACAddress.setDescription('MAC address of the AP of interest. This object is used within notifications and is not accessible.')
trpzClientMACAddress = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 4), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzClientMACAddress.setStatus('current')
if mibBuilder.loadTexts: trpzClientMACAddress.setDescription('MAC address of the client of interest. This object is used within notifications and is not accessible.')
trpzRFDetectXmtrMacAddr = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 5), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzRFDetectXmtrMacAddr.setStatus('current')
if mibBuilder.loadTexts: trpzRFDetectXmtrMacAddr.setDescription("Describes the transmitter's MAC address. This object is used within notifications and is not accessible.")
trpzPortNum = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 22))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzPortNum.setStatus('current')
if mibBuilder.loadTexts: trpzPortNum.setDescription('Port number on the AC which reported this rogue during a detection sweep. This object is used within notifications and is not accessible.')
trpzAPRadioNum = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 7), TrpzRadioNum()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzAPRadioNum.setStatus('current')
if mibBuilder.loadTexts: trpzAPRadioNum.setDescription('Radio number of the AP which reported this rogue during a detection sweep. This object is used within notifications and is not accessible.')
trpzRadioRssi = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzRadioRssi.setStatus('obsolete')
if mibBuilder.loadTexts: trpzRadioRssi.setDescription('The received signal strength as measured by the AP radio which reported this rogue during a detection sweep. This object is used within notifications and is not accessible. Not used by any notification.')
trpzRadioBSSID = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzRadioBSSID.setStatus('current')
if mibBuilder.loadTexts: trpzRadioBSSID.setDescription('The basic service set identifier of the rogue from the beacon frame reported by the AP during a detection sweep. This object is used within notifications and is not accessible.')
trpzUserName = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzUserName.setStatus('current')
if mibBuilder.loadTexts: trpzUserName.setDescription('The client user name as learned from the AAA process. This object is used within notifications and is not accessible.')
trpzClientAuthServerIp = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 11), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzClientAuthServerIp.setStatus('current')
if mibBuilder.loadTexts: trpzClientAuthServerIp.setDescription('The client authentication server ip address. This object is used within notifications and is not accessible.')
trpzClientSessionState = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 12), TrpzClientSessionState()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzClientSessionState.setStatus('current')
if mibBuilder.loadTexts: trpzClientSessionState.setDescription('The state for a client session. This object is used within notifications and is not accessible.')
trpzDAPNum = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzDAPNum.setStatus('current')
if mibBuilder.loadTexts: trpzDAPNum.setDescription('The DAP number on the wireless switch. This object is used within notifications and is not accessible.')
trpzClientIp = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 14), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzClientIp.setStatus('obsolete')
if mibBuilder.loadTexts: trpzClientIp.setDescription('The client ip address. This object is used within notifications and is not accessible.')
trpzClientSessionId = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzClientSessionId.setStatus('current')
if mibBuilder.loadTexts: trpzClientSessionId.setDescription('The unique global id for a client session. This object is used within notifications and is not accessible.')
trpzClientAuthenProtocolType = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 16), TrpzClientAuthenProtocolType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzClientAuthenProtocolType.setStatus('current')
if mibBuilder.loadTexts: trpzClientAuthenProtocolType.setDescription('The authentication protocol for a client. This object is used within notifications and is not accessible.')
trpzClientVLANName = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzClientVLANName.setStatus('current')
if mibBuilder.loadTexts: trpzClientVLANName.setDescription('The vlan name a client is on. This object is used within notifications and is not accessible.')
trpzClientSessionStartTime = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 18), TimeTicks()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzClientSessionStartTime.setStatus('obsolete')
if mibBuilder.loadTexts: trpzClientSessionStartTime.setDescription("The start time of a client session, relative to the sysUptime. This object is used within notifications and is not accessible. Obsolete. Do not use it because it's not vital information and often *cannot* be implemented to match the declared semantics: a client session might have been created on another wireless switch, *before* the current switch booted (the local zero of sysUptime).")
trpzClientFailureCause = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzClientFailureCause.setStatus('current')
if mibBuilder.loadTexts: trpzClientFailureCause.setDescription('Display string for possible failure cause for a client session. This object is used within notifications and is not accessible.')
trpzClientRoamedFromPortNum = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzClientRoamedFromPortNum.setStatus('obsolete')
if mibBuilder.loadTexts: trpzClientRoamedFromPortNum.setDescription("The port number on the AC a client has roamed from. This object is used within notifications and is not accessible. Obsoleted by 'trpzClientRoamedFromPhysPortNum'.")
trpzClientRoamedFromRadioNum = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 21), TrpzRadioNum()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzClientRoamedFromRadioNum.setStatus('obsolete')
if mibBuilder.loadTexts: trpzClientRoamedFromRadioNum.setDescription("The radio number of the AP the client is roamed from. This object is used within notifications and is not accessible. Obsoleted by 'trpzClientRoamedFromRadioIndex'.")
trpzClientRoamedFromDAPNum = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzClientRoamedFromDAPNum.setStatus('obsolete')
if mibBuilder.loadTexts: trpzClientRoamedFromDAPNum.setDescription("The DAP number on the AC which reported this rogue during roam. This object is used within notifications and is not accessible. Obsoleted by 'trpzClientRoamedFromApNum'.")
trpzUserParams = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzUserParams.setStatus('current')
if mibBuilder.loadTexts: trpzUserParams.setDescription('A display string of User Parameters for client user authorization attributes learned through AAA and/or used by the system. Note that the syntax will be (name=value, name=value,..) for the parsing purpose. This object is used within notifications and is not accessible.')
trpzClientLocationPolicyIndex = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzClientLocationPolicyIndex.setStatus('current')
if mibBuilder.loadTexts: trpzClientLocationPolicyIndex.setDescription('Index of the Location Policy rule applied to a user. This object is used within notifications and is not accessible.')
trpzClientAssociationFailureCause = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 25), TrpzAssociationFailureType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzClientAssociationFailureCause.setStatus('current')
if mibBuilder.loadTexts: trpzClientAssociationFailureCause.setDescription('The client association failure cause. This object is used within notifications and is not accessible.')
trpzClientAuthenticationFailureCause = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 26), TrpzAuthenticationFailureType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzClientAuthenticationFailureCause.setStatus('current')
if mibBuilder.loadTexts: trpzClientAuthenticationFailureCause.setDescription('The client authentication failure cause. This object is used within notifications and is not accessible.')
trpzClientAuthorizationFailureCause = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 27), TrpzAuthorizationFailureType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzClientAuthorizationFailureCause.setStatus('current')
if mibBuilder.loadTexts: trpzClientAuthorizationFailureCause.setDescription('The client authorization failure cause. Note that if it is the user-param, we would additionally expect the failure cause description to list the user attribute value that caused the failure. This object is used within notifications and is not accessible.')
trpzClientFailureCauseDescription = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzClientFailureCauseDescription.setStatus('current')
if mibBuilder.loadTexts: trpzClientFailureCauseDescription.setDescription('Display string for describing the client failure cause. This object is used within notifications and is not accessible.')
trpzClientRoamedFromWsIp = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 29), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzClientRoamedFromWsIp.setStatus('obsolete')
if mibBuilder.loadTexts: trpzClientRoamedFromWsIp.setDescription('The system IP address of the AC (wireless switch) a client roamed from. This object is used within notifications and is not accessible.')
trpzClientRoamedFromAccessType = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 30), TrpzAccessType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzClientRoamedFromAccessType.setStatus('obsolete')
if mibBuilder.loadTexts: trpzClientRoamedFromAccessType.setDescription("The client access type (ap, dap, wired) that a client roamed from. This object is used within notifications and is not accessible. Obsoleted by 'trpzClientRoamedFromAccessMode'.")
trpzClientAccessType = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 31), TrpzAccessType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzClientAccessType.setStatus('current')
if mibBuilder.loadTexts: trpzClientAccessType.setDescription('The client access type (ap, dap, wired). This object is used within notifications and is not accessible. For new traps, use trpzClientAccessMode instead of this object.')
trpzRadioMACAddress = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 32), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzRadioMACAddress.setStatus('current')
if mibBuilder.loadTexts: trpzRadioMACAddress.setDescription('AP Radio MAC address. This object is used within notifications and is not accessible.')
trpzRadioPowerChangeReason = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 33), TrpzRadioPowerChangeType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzRadioPowerChangeReason.setStatus('current')
if mibBuilder.loadTexts: trpzRadioPowerChangeReason.setDescription('The type of event that caused an AP radio power change; occurs due to auto-tune operation. This object is used within notifications and is not accessible.')
trpzNewChannelNum = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzNewChannelNum.setStatus('current')
if mibBuilder.loadTexts: trpzNewChannelNum.setDescription('New channel number of the AP radio used after an auto tune event. This object is used within notifications and is not accessible.')
trpzOldChannelNum = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzOldChannelNum.setStatus('current')
if mibBuilder.loadTexts: trpzOldChannelNum.setDescription('Old channel number of the AP radio used before an auto tune event. This object is used within notifications and is not accessible.')
trpzChannelChangeReason = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 36), TrpzChannelChangeType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzChannelChangeReason.setStatus('current')
if mibBuilder.loadTexts: trpzChannelChangeReason.setDescription('The type of event that caused an AP radio channel change; occurs due to auto-tune operation. This object is used within notifications and is not accessible.')
trpzRFDetectListenerListInfo = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 37), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 571))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzRFDetectListenerListInfo.setStatus('current')
if mibBuilder.loadTexts: trpzRFDetectListenerListInfo.setDescription('The RF Detection Listener list info including a list of (listener mac, rssi, channel, ssid, time). There will be a maximum of 6 entries in the list. Formats: MAC: 18 bytes: %2.2X:%2.2X:%2.2X:%2.2X:%2.2X:%2.2X RSSI: 10 bytes: %10d CHANNEL: 3 bytes: %3d SSID: 32 bytes: %s TIME: 26 bytes: %s Maximum size per entry is 89+4+2 = 95 bytes. Maximum size of the string is 6*95= 571 bytes (include NULL). This object is used within notifications and is not accessible.')
trpzRadioSSID = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 38), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzRadioSSID.setStatus('current')
if mibBuilder.loadTexts: trpzRadioSSID.setDescription('The radio SSID string This object is used within notifications and is not accessible.')
trpzNewPowerLevel = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 39), TrpzPowerLevel()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzNewPowerLevel.setStatus('current')
if mibBuilder.loadTexts: trpzNewPowerLevel.setDescription('New power level of the AP radio used after an auto tune event. This object is used within notifications and is not accessible.')
trpzOldPowerLevel = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 40), TrpzPowerLevel()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzOldPowerLevel.setStatus('current')
if mibBuilder.loadTexts: trpzOldPowerLevel.setDescription('Old power level of the AP radio used before an auto tune event. This object is used within notifications and is not accessible.')
trpzRadioPowerChangeDescription = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 41), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzRadioPowerChangeDescription.setStatus('current')
if mibBuilder.loadTexts: trpzRadioPowerChangeDescription.setDescription('The radio power change description. In the case of reason being dup-pkts-threshold-exceed(1), and retransmit-threshold-exceed(2), clientMacAddress will be included in the description. This object is used within notifications and is not accessible.')
trpzCounterMeasurePerformerListInfo = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 42), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzCounterMeasurePerformerListInfo.setStatus('obsolete')
if mibBuilder.loadTexts: trpzCounterMeasurePerformerListInfo.setDescription('A list of information for APs performing Counter Measures including a list of performer mac addresses. This object is used within notifications and is not accessible. Not used by any notification.')
trpzClientDot1xState = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 43), TrpzClientDot1xState()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzClientDot1xState.setStatus('current')
if mibBuilder.loadTexts: trpzClientDot1xState.setDescription('The state for a client 802.1X. This object is used within notifications and is not accessible.')
trpzClientDot1xFailureCause = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 44), TrpzDot1xFailureType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzClientDot1xFailureCause.setStatus('current')
if mibBuilder.loadTexts: trpzClientDot1xFailureCause.setDescription('The client 802.1X failure cause. This object is used within notifications and is not accessible.')
trpzAPAccessType = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 45), TrpzAccessType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzAPAccessType.setStatus('obsolete')
if mibBuilder.loadTexts: trpzAPAccessType.setDescription('The access point access type (ap, dap,). This object is used within notifications and is not accessible. Not used by any notification.')
trpzUserAccessType = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 46), TrpzUserAccessType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzUserAccessType.setStatus('current')
if mibBuilder.loadTexts: trpzUserAccessType.setDescription('The user access type (MAC, WEB, DOT1X, LAST-RESORT). This object is used within notifications and is not accessible.')
trpzClientSessionElapsedTime = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 47), TimeTicks()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzClientSessionElapsedTime.setStatus('obsolete')
if mibBuilder.loadTexts: trpzClientSessionElapsedTime.setDescription('The elapsed time for a client session. Obsoleted because session time is usually reported in seconds. This object is used within notifications and is not accessible.')
trpzLocalId = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65000))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzLocalId.setStatus('current')
if mibBuilder.loadTexts: trpzLocalId.setDescription('Local Id for the session. This object is used within notifications and is not accessible.')
trpzRFDetectDoSType = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 49), TrpzRFDetectDoSType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzRFDetectDoSType.setStatus('current')
if mibBuilder.loadTexts: trpzRFDetectDoSType.setDescription('The type of denial of service (DoS) attack. This object is used within notifications and is not accessible.')
trpzSourceWsIp = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 50), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzSourceWsIp.setStatus('current')
if mibBuilder.loadTexts: trpzSourceWsIp.setDescription('IP address of another AC (wireless switch). This object is used within notifications and is not accessible.')
trpzClientVLANid = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzClientVLANid.setStatus('current')
if mibBuilder.loadTexts: trpzClientVLANid.setDescription('VLAN ID used by client traffic. This object is used within notifications and is not accessible.')
trpzClientVLANtag = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzClientVLANtag.setStatus('current')
if mibBuilder.loadTexts: trpzClientVLANtag.setDescription('VLAN tag used by client traffic. This object is used within notifications and is not accessible.')
trpzDeviceModel = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 53), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzDeviceModel.setStatus('current')
if mibBuilder.loadTexts: trpzDeviceModel.setDescription('The model of a device in printable US-ASCII. If unknown (or not available), then the value is a zero length string. This object is used within notifications and is not accessible.')
trpzDeviceSerNum = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 54), TrpzApSerialNum()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzDeviceSerNum.setStatus('current')
if mibBuilder.loadTexts: trpzDeviceSerNum.setDescription('The serial number of an AP in printable US-ASCII. If unknown (or not available), then the value is a zero length string. Should NOT be used to identify other devices, for example an AC (wireless switch). This object is used within notifications and is not accessible.')
trpzRsaPubKeyFingerPrint = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 55), TrpzApFingerprint()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzRsaPubKeyFingerPrint.setStatus('current')
if mibBuilder.loadTexts: trpzRsaPubKeyFingerPrint.setDescription('The hash of the RSA public key (of a key pair) in binary form that uniquely identifies the public key of an AP. This object is used within notifications and is not accessible.')
trpzDAPconnectWarningType = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("not-configured-fingerprint-connect", 1), ("secure-handshake-failure", 2), ("not-configured-fingerprint-required", 3), ("fingerprint-mismatch", 4)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzDAPconnectWarningType.setStatus('current')
if mibBuilder.loadTexts: trpzDAPconnectWarningType.setDescription("The type of DAP connect warning. The values are: not-configured-fingerprint-connect(1)...a DAP, which has an RSA keypair but did not have its fingerprint configured on the AC, has connected to the AC when 'dap security' set to 'OPTIONAL' secure-handshake-failure(2).............a DAP tried to connect to the AC with security, but the handshake failed not-configured-fingerprint-required(3)..a DAP tried to connect to the AC with security, but 'dap security' set to 'REQUIRED', and no fingerprint was configured for the DAP fingerprint-mismatch(4).................a DAP tried to connect to the AC with security and its fingerprint was configured, but the fingerprint did not match the computed one This object is used within notifications and is not accessible.")
trpzClientMACAddress2 = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 57), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzClientMACAddress2.setStatus('current')
if mibBuilder.loadTexts: trpzClientMACAddress2.setDescription('MAC address of the second client of interest. This object is used within notifications and is not accessible.')
trpzApAttachType = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 58), TrpzApAttachType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzApAttachType.setStatus('current')
if mibBuilder.loadTexts: trpzApAttachType.setDescription('How the AP is attached to the AC (directly or via L2/L3 network). This object is used within notifications and is not accessible.')
trpzApPortOrDapNum = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 59), TrpzApPortOrDapNum()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzApPortOrDapNum.setStatus('obsolete')
if mibBuilder.loadTexts: trpzApPortOrDapNum.setDescription('The Port Number if the AP is directly attached, or the CLI-assigned DAP Number if attached via L2/L3 network. This object is used within notifications and is not accessible. Obsoleted by trpzApNum. (In 6.0, direct- and network-attached APs were unified.)')
trpzApName = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 60), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzApName.setStatus('current')
if mibBuilder.loadTexts: trpzApName.setDescription("The name of the AP, as assigned in AC's CLI; defaults to AP<Number> (examples: 'AP01', 'AP22', 'AP333', 'AP4444'); could have been changed from CLI to a meaningful name, for example the location of the AP (example: 'MeetingRoom73'). This object is used within notifications and is not accessible.")
trpzApTransition = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 61), TrpzApTransition()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzApTransition.setStatus('current')
if mibBuilder.loadTexts: trpzApTransition.setDescription('AP state Transition, as seen by the AC. This object is used within notifications and is not accessible.')
trpzApFailDetail = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 62), TrpzApFailDetail()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzApFailDetail.setStatus('current')
if mibBuilder.loadTexts: trpzApFailDetail.setDescription("Detailed failure code for some of the transitions specified in 'trpzApTransition' object. This object is used within notifications and is not accessible.")
trpzRadioType = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 63), TrpzRadioType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzRadioType.setStatus('current')
if mibBuilder.loadTexts: trpzRadioType.setDescription('Indicates the AP Radio Type, as seen by AC. This object is used within notifications and is not accessible.')
trpzRadioConfigState = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 64), TrpzRadioConfigState()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzRadioConfigState.setStatus('current')
if mibBuilder.loadTexts: trpzRadioConfigState.setDescription('Indicates the Radio State, as seen by the AC. This object is used within notifications and is not accessible.')
trpzApConnectSecurityType = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 65), TrpzApConnectSecurityType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzApConnectSecurityType.setStatus('current')
if mibBuilder.loadTexts: trpzApConnectSecurityType.setDescription('Indicates the security level of the connection between AP and AC. This object is used within notifications and is not accessible.')
trpzApServiceAvailability = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 66), TrpzApServiceAvailability()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzApServiceAvailability.setStatus('current')
if mibBuilder.loadTexts: trpzApServiceAvailability.setDescription('Indicates the level of wireless service availability. This object is used within notifications and is not accessible.')
trpzApWasOperational = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 67), TrpzApWasOperational()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzApWasOperational.setStatus('current')
if mibBuilder.loadTexts: trpzApWasOperational.setDescription('Indicates whether the AP was operational before a transition occurred. This object is used within notifications and is not accessible.')
trpzClientTimeSinceLastRoam = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 68), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzClientTimeSinceLastRoam.setStatus('current')
if mibBuilder.loadTexts: trpzClientTimeSinceLastRoam.setDescription('The time in seconds since the most recent roam of a given client. This object is used within notifications and is not accessible.')
trpzClientIpAddrChangeReason = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 69), TrpzClientIpAddrChangeReason()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzClientIpAddrChangeReason.setStatus('current')
if mibBuilder.loadTexts: trpzClientIpAddrChangeReason.setDescription('Indicates the reason why client IP address changed. This object is used within notifications and is not accessible.')
trpzRFDetectRogueAPMacAddr = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 70), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzRFDetectRogueAPMacAddr.setStatus('current')
if mibBuilder.loadTexts: trpzRFDetectRogueAPMacAddr.setDescription('Describes the MAC address of the Rogue AP the transmitter is connected to. This object is used within notifications and is not accessible.')
trpzBlacklistingRemainingTime = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 71), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzBlacklistingRemainingTime.setStatus('current')
if mibBuilder.loadTexts: trpzBlacklistingRemainingTime.setDescription('The time in seconds remaining until a given transmitter could be removed from the Black List. This object is used within notifications and is not accessible.')
trpzBlacklistingCause = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 72), TrpzBlacklistingCause()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzBlacklistingCause.setStatus('current')
if mibBuilder.loadTexts: trpzBlacklistingCause.setDescription('Indicates the reason why a given transmitter is blacklisted. This object is used within notifications and is not accessible.')
trpzNumLicensedActiveAPs = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 73), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzNumLicensedActiveAPs.setStatus('current')
if mibBuilder.loadTexts: trpzNumLicensedActiveAPs.setDescription('Indicates the maximum (licensed) number of active APs for this AC. This object is used within notifications and is not accessible.')
trpzClientDynAuthorClientIp = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 74), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzClientDynAuthorClientIp.setStatus('current')
if mibBuilder.loadTexts: trpzClientDynAuthorClientIp.setDescription('The dynamic authorization client IP address which caused the change of authorization. This object is used within notifications and is not accessible.')
trpzChangedUserParamOldValues = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 75), TrpzUserAttributeList()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzChangedUserParamOldValues.setStatus('current')
if mibBuilder.loadTexts: trpzChangedUserParamOldValues.setDescription('A display string listing the changed AAA attributes and their values, before the change of authorization was executed. This object is used within notifications and is not accessible.')
trpzChangedUserParamNewValues = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 76), TrpzUserAttributeList()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzChangedUserParamNewValues.setStatus('current')
if mibBuilder.loadTexts: trpzChangedUserParamNewValues.setDescription('A display string listing the changed AAA attributes and their values, after the change of authorization was executed. This object is used within notifications and is not accessible.')
trpzClientDisconnectSource = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 77), TrpzSessionDisconnectType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzClientDisconnectSource.setStatus('current')
if mibBuilder.loadTexts: trpzClientDisconnectSource.setDescription('The external source that initiated the termination of a session. This object is used within notifications and is not accessible.')
trpzClientDisconnectDescription = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 78), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzClientDisconnectDescription.setStatus('current')
if mibBuilder.loadTexts: trpzClientDisconnectDescription.setDescription('Display string for providing available information related to the external source that initiated a session termination. This object is used within notifications and is not accessible.')
trpzMobilityDomainSecondarySeedIp = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 79), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzMobilityDomainSecondarySeedIp.setStatus('current')
if mibBuilder.loadTexts: trpzMobilityDomainSecondarySeedIp.setDescription('The secondary seed IP address to which the Mobility Domain has failed over. This object is used within notifications and is not accessible.')
trpzMobilityDomainPrimarySeedIp = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 80), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzMobilityDomainPrimarySeedIp.setStatus('current')
if mibBuilder.loadTexts: trpzMobilityDomainPrimarySeedIp.setDescription('The primary seed IP address to which the Mobility Domain has failed back. This object is used within notifications and is not accessible.')
trpzRFDetectClassificationReason = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 81), TrpzRFDetectClassificationReason()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzRFDetectClassificationReason.setStatus('current')
if mibBuilder.loadTexts: trpzRFDetectClassificationReason.setDescription('Indicates the reason why a RF device is classified the way it is. This object is used within notifications and is not accessible.')
trpzConfigSaveFileName = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 82), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzConfigSaveFileName.setStatus('current')
if mibBuilder.loadTexts: trpzConfigSaveFileName.setDescription('Display string listing the name of the file to which the running configuration was saved. This object is used within notifications and is not accessible.')
trpzConfigSaveInitiatorType = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 83), TrpzConfigSaveInitiatorType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzConfigSaveInitiatorType.setStatus('current')
if mibBuilder.loadTexts: trpzConfigSaveInitiatorType.setDescription('Indicates the source that initiated a configuration save. This object is used within notifications and is not accessible.')
trpzConfigSaveInitiatorIp = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 84), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzConfigSaveInitiatorIp.setStatus('current')
if mibBuilder.loadTexts: trpzConfigSaveInitiatorIp.setDescription('The IP address of the source that initiated a configuration save. This object is used within notifications and is not accessible.')
trpzConfigSaveInitiatorDetails = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 85), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzConfigSaveInitiatorDetails.setStatus('current')
if mibBuilder.loadTexts: trpzConfigSaveInitiatorDetails.setDescription('Display string listing additional information regarding the source that initiated a configuration save, when available. This object is used within notifications and is not accessible.')
trpzConfigSaveGeneration = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 86), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzConfigSaveGeneration.setStatus('current')
if mibBuilder.loadTexts: trpzConfigSaveGeneration.setDescription('Indicates the number of configuration changes since the last system boot. The generation count is used to track the number of times the running configuration has been changed due to administrative actions (set/clear), SNMP requests (SET), XML requests (e.g. RingMaster). This object is used within notifications and is not accessible.')
trpzApNum = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 87), TrpzApNum()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzApNum.setStatus('current')
if mibBuilder.loadTexts: trpzApNum.setDescription('The administratively assigned AP Number, unique on same AC (switch), regardless of how APs are attached to the AC. This object is used within notifications and is not accessible. Obsoletes trpzApPortOrDapNum. For clarity, use this object to identify an AP since in 6.0 directly attached APs and DAPs were unified.')
trpzRadioMode = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 88), TrpzRadioMode()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzRadioMode.setStatus('current')
if mibBuilder.loadTexts: trpzRadioMode.setDescription('Indicates the administratively controlled Radio Mode (enabled/disabled/sentry). This object is used within notifications and is not accessible.')
trpzMichaelMICFailureCause = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 89), TrpzMichaelMICFailureCause()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzMichaelMICFailureCause.setStatus('current')
if mibBuilder.loadTexts: trpzMichaelMICFailureCause.setDescription('Indicates the Michael MIC Failure cause / who detected it. This object is used within notifications and is not accessible.')
trpzClientAccessMode = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 90), TrpzClientAccessMode()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzClientAccessMode.setStatus('current')
if mibBuilder.loadTexts: trpzClientAccessMode.setDescription('The client access mode (ap, wired). This object is used within notifications and is not accessible. Intended to replace trpzClientAccessType. (In 6.0, direct- and network-attached APs were unified.)')
trpzClientAuthorizationReason = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 91), TrpzClientAuthorizationReason()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzClientAuthorizationReason.setStatus('current')
if mibBuilder.loadTexts: trpzClientAuthorizationReason.setDescription('Indicates the reason why client performed AAA authorization. This object is used within notifications and is not accessible.')
trpzPhysPortNum = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 92), TrpzPhysPortNumberOrZero()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzPhysPortNum.setStatus('current')
if mibBuilder.loadTexts: trpzPhysPortNum.setDescription("Physical Port Number on the AC. Zero means the port is unknown or not applicable (for example, when trpzClientAccessMode = 'ap'). This object is used within notifications and is not accessible.")
trpzApMgrOldIp = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 93), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzApMgrOldIp.setStatus('current')
if mibBuilder.loadTexts: trpzApMgrOldIp.setDescription("The IP address of the AP's former primary manager switch. This object is used within notifications and is not accessible.")
trpzApMgrNewIp = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 94), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzApMgrNewIp.setStatus('current')
if mibBuilder.loadTexts: trpzApMgrNewIp.setDescription("The IP address of the AP's new primary manager switch. This address was formerly the AP's secondary backup link. This object is used within notifications and is not accessible.")
trpzApMgrChangeReason = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 95), TrpzApMgrChangeReason()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzApMgrChangeReason.setStatus('current')
if mibBuilder.loadTexts: trpzApMgrChangeReason.setDescription("Indicates the reason why the AP's primary manager changed. This object is used within notifications and is not accessible.")
trpzClientClearedReason = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 96), TrpzClientClearedReason()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzClientClearedReason.setStatus('current')
if mibBuilder.loadTexts: trpzClientClearedReason.setDescription('Indicates the reason why client was cleared. This object is used within notifications and is not accessible.')
trpzMobilityDomainResiliencyStatus = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 97), TrpzMobilityDomainResiliencyStatus()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzMobilityDomainResiliencyStatus.setStatus('current')
if mibBuilder.loadTexts: trpzMobilityDomainResiliencyStatus.setDescription('Indicates the current resilient capacity status for a mobility domain. This object is used within notifications and is not accessible.')
trpzClientSessionElapsedSeconds = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 98), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzClientSessionElapsedSeconds.setStatus('current')
if mibBuilder.loadTexts: trpzClientSessionElapsedSeconds.setDescription('Indicates the time in seconds elapsed since the start of the Client Session. This object is used within notifications and is not accessible.')
trpzRadioChannelWidth = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 99), TrpzRadioChannelWidth()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzRadioChannelWidth.setStatus('current')
if mibBuilder.loadTexts: trpzRadioChannelWidth.setDescription('Indicates the administratively controlled Channel Width (20MHz/40MHz). This object is used within notifications and is not accessible.')
trpzRadioMimoState = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 100), TrpzRadioMimoState()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzRadioMimoState.setStatus('current')
if mibBuilder.loadTexts: trpzRadioMimoState.setDescription('Indicates the Radio MIMO State, as seen by the AC (1x1/2x3/3x3). This object is used within notifications and is not accessible.')
trpzClientRadioType = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 101), TrpzRadioType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzClientRadioType.setStatus('current')
if mibBuilder.loadTexts: trpzClientRadioType.setDescription('Indicates the Client Radio Type, as detected by an attached AP and reported to the AC. This object is used within notifications and is not accessible.')
trpzRFDetectXmtrRadioType = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 102), TrpzRadioType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzRFDetectXmtrRadioType.setStatus('current')
if mibBuilder.loadTexts: trpzRFDetectXmtrRadioType.setDescription('Indicates the Radio Type of the Transmitter, as detected by an attached AP and reported to the AC. The Transmitter may be a wireless client or an AP. This object is used within notifications and is not accessible.')
trpzRFDetectXmtrCryptoType = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 103), TrpzCryptoType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzRFDetectXmtrCryptoType.setStatus('current')
if mibBuilder.loadTexts: trpzRFDetectXmtrCryptoType.setDescription('Indicates the Crypto Type used by the Transmitter, as detected by an attached AP and reported to the AC. This object is used within notifications and is not accessible.')
trpzClusterFailureReason = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 104), TrpzClusterFailureReason()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzClusterFailureReason.setStatus('current')
if mibBuilder.loadTexts: trpzClusterFailureReason.setDescription('Indicates the reason why cluster configuration failed to apply. This object is used within notifications and is not accessible.')
trpzClusterFailureDescription = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 105), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzClusterFailureDescription.setStatus('current')
if mibBuilder.loadTexts: trpzClusterFailureDescription.setDescription('Display string for describing the cluster configuration failure cause. This object is used within notifications and is not accessible.')
trpzMultimediaCommunicationServerID = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 106), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzMultimediaCommunicationServerID.setStatus('current')
if mibBuilder.loadTexts: trpzMultimediaCommunicationServerID.setDescription('The multimedia communication server ID. This object is used within notifications and is not accessible.')
trpzMultimediaLocalStationIp = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 107), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzMultimediaLocalStationIp.setStatus('current')
if mibBuilder.loadTexts: trpzMultimediaLocalStationIp.setDescription('The local multimedia station IP address. This object is used within notifications and is not accessible.')
trpzMultimediaLocalStationPort = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 108), TrpzIpPort()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzMultimediaLocalStationPort.setStatus('current')
if mibBuilder.loadTexts: trpzMultimediaLocalStationPort.setDescription('The local multimedia station UDP port. This object is used within notifications and is not accessible.')
trpzMultimediaLocalStationEndpointID = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 109), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzMultimediaLocalStationEndpointID.setStatus('current')
if mibBuilder.loadTexts: trpzMultimediaLocalStationEndpointID.setDescription('The local multimedia station endpoint ID. This object is used within notifications and is not accessible.')
trpzMultimediaRemoteStationIp = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 110), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzMultimediaRemoteStationIp.setStatus('current')
if mibBuilder.loadTexts: trpzMultimediaRemoteStationIp.setDescription('The remote multimedia station IP address. This object is used within notifications and is not accessible.')
trpzMultimediaRemoteStationPort = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 111), TrpzIpPort()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzMultimediaRemoteStationPort.setStatus('current')
if mibBuilder.loadTexts: trpzMultimediaRemoteStationPort.setDescription('The remote multimedia station UDP port. This object is used within notifications and is not accessible.')
trpzMultimediaRemoteStationEndpointID = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 112), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzMultimediaRemoteStationEndpointID.setStatus('current')
if mibBuilder.loadTexts: trpzMultimediaRemoteStationEndpointID.setDescription('The remote multimedia station endpoint ID. This object is used within notifications and is not accessible.')
trpzMultimediaSignalingProtocol = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 113), TrpzMultimediaSignalingProtocol()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzMultimediaSignalingProtocol.setStatus('current')
if mibBuilder.loadTexts: trpzMultimediaSignalingProtocol.setDescription('The multimedia signaling protocol that was used for initiating this call (session). This object is used within notifications and is not accessible.')
trpzMultimediaCallBandwidthAndCodec = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 114), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzMultimediaCallBandwidthAndCodec.setStatus('current')
if mibBuilder.loadTexts: trpzMultimediaCallBandwidthAndCodec.setDescription('Display string providing information about the multimedia call codec and bandwidth. This object is used within notifications and is not accessible.')
trpzMultimediaCallDataRate = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 115), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzMultimediaCallDataRate.setStatus('current')
if mibBuilder.loadTexts: trpzMultimediaCallDataRate.setDescription('The data rate, in Kbps. This object is used within notifications and is not accessible.')
trpzMultimediaCallRssi = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 116), TrpzRssi()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzMultimediaCallRssi.setStatus('current')
if mibBuilder.loadTexts: trpzMultimediaCallRssi.setDescription('The client RSSI (Received Signal Strength Indicator), in decibels referred to 1 milliwatt (dBm). A higher value indicates a stronger signal. This object is used within notifications and is not accessible.')
trpzMultimediaCallFailureReason = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 117), TrpzMultimediaCallFailureReason()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzMultimediaCallFailureReason.setStatus('current')
if mibBuilder.loadTexts: trpzMultimediaCallFailureReason.setDescription('Indicates the reason why the multimedia call has failed. This object is used within notifications and is not accessible.')
trpzMultimediaCallDirection = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 118), TrpzMultimediaCallDirection()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzMultimediaCallDirection.setStatus('current')
if mibBuilder.loadTexts: trpzMultimediaCallDirection.setDescription('Indicates the multimedia call direction (incoming/outgoing). This object is used within notifications and is not accessible.')
trpzApTunnelLimit = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 119), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzApTunnelLimit.setStatus('current')
if mibBuilder.loadTexts: trpzApTunnelLimit.setDescription('Indicates the maximum number of tunnels supported for an AP. This object is used within notifications and is not accessible.')
trpzWsTunnelLimit = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 120), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzWsTunnelLimit.setStatus('current')
if mibBuilder.loadTexts: trpzWsTunnelLimit.setDescription('Indicates the maximum number of tunnels supported for an AC (wireless switch). This object is used within notifications and is not accessible.')
trpzWsTunnelLimitType = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 121), TrpzWsTunnelLimitType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzWsTunnelLimitType.setStatus('current')
if mibBuilder.loadTexts: trpzWsTunnelLimitType.setDescription('Indicates the type of limit exceeded that caused the AC (wireless switch) to reject a tunnel creation request. This object is used within notifications and is not accessible.')
trpzRFNoiseSourceID = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 122), TrpzRFNoiseSourceID()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzRFNoiseSourceID.setStatus('current')
if mibBuilder.loadTexts: trpzRFNoiseSourceID.setDescription('RF Noise Source ID. This object is used within notifications and is not accessible.')
trpzRFNoiseSourceType = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 123), TrpzRFNoiseSourceType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzRFNoiseSourceType.setStatus('current')
if mibBuilder.loadTexts: trpzRFNoiseSourceType.setDescription('RF Noise Source Type. This object is used within notifications and is not accessible.')
trpzRFNoiseChannel = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 124), TrpzChannelNum()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzRFNoiseChannel.setStatus('current')
if mibBuilder.loadTexts: trpzRFNoiseChannel.setDescription('Channel number. This object is used within notifications and is not accessible.')
trpzRFNoiseRssi = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 125), TrpzRssi()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzRFNoiseRssi.setStatus('current')
if mibBuilder.loadTexts: trpzRFNoiseRssi.setDescription('The noise RSSI (Received Signal Strength Indicator), in decibels referred to 1 milliwatt (dBm). A higher value indicates stronger noise. This object is used within notifications and is not accessible.')
trpzRFNoiseDutyCycle = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 126), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzRFNoiseDutyCycle.setStatus('current')
if mibBuilder.loadTexts: trpzRFNoiseDutyCycle.setDescription('Estimated Duty Cycle: fraction of time that a noise source is transmitting. This object is used within notifications and is not accessible.')
trpzRFNoiseChannelInterferenceMeasure = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 127), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzRFNoiseChannelInterferenceMeasure.setStatus('current')
if mibBuilder.loadTexts: trpzRFNoiseChannelInterferenceMeasure.setDescription('Severity of channel interference attributed to a noise source. A higher value indicates more severe interference. This object is used within notifications and is not accessible.')
trpzRFNoiseAge = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 128), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzRFNoiseAge.setStatus('current')
if mibBuilder.loadTexts: trpzRFNoiseAge.setDescription('Age of noise in seconds. This object is used within notifications and is not accessible.')
trpzM2UMulticastAddrType = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 129), InetAddressType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzM2UMulticastAddrType.setStatus('current')
if mibBuilder.loadTexts: trpzM2UMulticastAddrType.setDescription("The address type of 'trpzM2UMulticastAddr'. This object is used within notifications and is not accessible.")
trpzM2UMulticastAddr = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 130), InetAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzM2UMulticastAddr.setStatus('current')
if mibBuilder.loadTexts: trpzM2UMulticastAddr.setDescription("The multicast address for which conversion to unicast is performed. The type of this address is specified in 'trpzM2UMulticastAddrType'. This object is used within notifications and is not accessible.")
trpzM2UConvNotPossibleReason = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 131), TrpzM2UConvNotPossibleReason()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzM2UConvNotPossibleReason.setStatus('current')
if mibBuilder.loadTexts: trpzM2UConvNotPossibleReason.setDescription('Indicates the reason why multicast to unicast conversion cannot be performed on an AP with this feature enabled. This object is used within notifications and is not accessible.')
trpzRadioBand = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 132), TrpzRadioBand()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzRadioBand.setStatus('current')
if mibBuilder.loadTexts: trpzRadioBand.setDescription('Indicates the radio band used in an auto-tune operation. This object is used within notifications and is not accessible.')
trpzRadiosTunedCount = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 133), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzRadiosTunedCount.setStatus('current')
if mibBuilder.loadTexts: trpzRadiosTunedCount.setDescription('Indicates how many radios had their operational characteristics changed as a result of an auto-tune process. This object is used within notifications and is not accessible.')
trpzAutoTuneFailureReason = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 134), TrpzAutoTuneFailureReason()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzAutoTuneFailureReason.setStatus('current')
if mibBuilder.loadTexts: trpzAutoTuneFailureReason.setDescription('Indicates the reason why an auto-tune operation failed to complete. This object is used within notifications and is not accessible.')
trpzClientAuthServerAddrType = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 135), InetAddressType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzClientAuthServerAddrType.setStatus('current')
if mibBuilder.loadTexts: trpzClientAuthServerAddrType.setDescription("The address type of 'trpzClientAuthServerAddr'. Only the value 'ipv4(1)' is reported as of release 8.0. This object is used within notifications and is not accessible.")
trpzClientAuthServerAddr = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 136), InetAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzClientAuthServerAddr.setStatus('current')
if mibBuilder.loadTexts: trpzClientAuthServerAddr.setDescription("The Internet address of the client authentication server. The type of this address is specified in 'trpzClientAuthServerAddrType'. This object is used within notifications and is not accessible.")
trpzClientRoamedFromWsAddrType = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 137), InetAddressType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzClientRoamedFromWsAddrType.setStatus('current')
if mibBuilder.loadTexts: trpzClientRoamedFromWsAddrType.setDescription("The address type of 'trpzClientRoamedFromWsAddr'. Only the value 'ipv4(1)' is reported as of release 8.0. This object is used within notifications and is not accessible.")
trpzClientRoamedFromWsAddr = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 138), InetAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzClientRoamedFromWsAddr.setStatus('current')
if mibBuilder.loadTexts: trpzClientRoamedFromWsAddr.setDescription("The system IP address of the AC (wireless switch) a client roamed from. The type of this address is specified in 'trpzClientRoamedFromWsAddrType'. This object is used within notifications and is not accessible.")
trpzClientDynAuthorClientAddrType = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 139), InetAddressType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzClientDynAuthorClientAddrType.setStatus('current')
if mibBuilder.loadTexts: trpzClientDynAuthorClientAddrType.setDescription("The address type of 'trpzClientDynAuthorClientAddr'. Only the value 'ipv4(1)' is reported as of release 8.0. This object is used within notifications and is not accessible.")
trpzClientDynAuthorClientAddr = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 140), InetAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzClientDynAuthorClientAddr.setStatus('current')
if mibBuilder.loadTexts: trpzClientDynAuthorClientAddr.setDescription("The dynamic authorization client IP address which caused the change of authorization. The type of this address is specified in 'trpzClientDynAuthorClientAddrType'. This object is used within notifications and is not accessible.")
trpzClientIpAddrType = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 141), InetAddressType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzClientIpAddrType.setStatus('current')
if mibBuilder.loadTexts: trpzClientIpAddrType.setDescription("The address type of 'trpzClientIpAddr'. Only the values 'ipv4(1)' and 'ipv6(2)' are reported. This object is used within notifications and is not accessible.")
trpzClientIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 142), InetAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzClientIpAddr.setStatus('current')
if mibBuilder.loadTexts: trpzClientIpAddr.setDescription("Indicates an IP address of the client. The type of this address is specified in 'trpzClientIpAddrType'. This object is used within notifications and is not accessible.")
trpzClientIPv4Addr = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 143), InetAddressIPv4()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzClientIPv4Addr.setStatus('current')
if mibBuilder.loadTexts: trpzClientIPv4Addr.setDescription('The IPv4 address of the client. If the client does not use the IPv4 stack, or its IPv4 address has not yet been detected, then all octets will have the value 0. This object is used within notifications and is not accessible.')
trpzClientIPv6LinkLocalAddr = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 144), InetAddressIPv6()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzClientIPv6LinkLocalAddr.setStatus('current')
if mibBuilder.loadTexts: trpzClientIPv6LinkLocalAddr.setDescription('The IPv6 link-local address of the client. If the client does not use the IPv6 stack, or its IPv6 link-local address has not yet been detected, then all octets will have the value 0. This object is used within notifications and is not accessible.')
trpzApRadioIndex = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 145), TrpzApRadioIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzApRadioIndex.setStatus('current')
if mibBuilder.loadTexts: trpzApRadioIndex.setDescription("AP Radio index. Intended to replace 'trpzAPRadioNum'. This object is used within notifications and is not accessible.")
trpzClientRoamedFromAccessMode = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 146), TrpzClientAccessMode()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzClientRoamedFromAccessMode.setStatus('current')
if mibBuilder.loadTexts: trpzClientRoamedFromAccessMode.setDescription("The client access mode (ap, wired) that a client roamed from. This object is used within notifications and is not accessible. Obsoletes 'trpzClientRoamedFromAccessType'. (In 6.0, direct- and network-attached APs were unified.)")
trpzClientRoamedFromApNum = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 147), TrpzApNum()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzClientRoamedFromApNum.setStatus('current')
if mibBuilder.loadTexts: trpzClientRoamedFromApNum.setDescription("The number of the AP the client roamed from. Obsoletes 'trpzClientRoamedFromDAPNum'. This object is used within notifications and is not accessible.")
trpzClientRoamedFromRadioIndex = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 148), TrpzApRadioIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzClientRoamedFromRadioIndex.setStatus('current')
if mibBuilder.loadTexts: trpzClientRoamedFromRadioIndex.setDescription("The index of the AP Radio the client roamed from. Obsoletes 'trpzClientRoamedFromRadioNum'. This object is used within notifications and is not accessible.")
trpzClientRoamedFromPhysPortNum = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 149), TrpzPhysPortNumberOrZero()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzClientRoamedFromPhysPortNum.setStatus('current')
if mibBuilder.loadTexts: trpzClientRoamedFromPhysPortNum.setDescription("Identifies the physical port on the AC used by the wired-auth client, before roam. Zero means the port is unknown or not applicable (for example, when trpzClientRoamedFromAccessMode = 'ap'). Obsoletes 'trpzClientRoamedFromPortNum'. This object is used within notifications and is not accessible.")
trpzClientDeviceType = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 150), TrpzClientDeviceType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzClientDeviceType.setStatus('current')
if mibBuilder.loadTexts: trpzClientDeviceType.setDescription('The type of the client device. Is a zero length string if unknown. This object is used within notifications and is not accessible.')
trpzClientDeviceTypeOld = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 151), TrpzClientDeviceType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzClientDeviceTypeOld.setStatus('current')
if mibBuilder.loadTexts: trpzClientDeviceTypeOld.setDescription('The type of the client device, before change. Is a zero length string if unknown. This object is used within notifications and is not accessible.')
trpzClientDeviceGroup = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 152), TrpzClientDeviceGroupName()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzClientDeviceGroup.setStatus('current')
if mibBuilder.loadTexts: trpzClientDeviceGroup.setDescription('The group that the detected client device type belongs to. Is a zero length string if the device type is unknown. This object is used within notifications and is not accessible.')
trpzClientDeviceProfileName = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 153), TrpzClientDeviceProfileName()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzClientDeviceProfileName.setStatus('current')
if mibBuilder.loadTexts: trpzClientDeviceProfileName.setDescription("The name of the device profile associated with the detected client device. A device profile is a collection of policies that apply to one or more types of client devices. Is a zero length string in 'detect-only' mode or if not set. In 'detect-only' mode policy enforcement is disabled. This object is used within notifications and is not accessible.")
trpzClientDeviceProfileNameOld = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 154), TrpzClientDeviceProfileName()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzClientDeviceProfileNameOld.setStatus('current')
if mibBuilder.loadTexts: trpzClientDeviceProfileNameOld.setDescription("The name of the device profile associated with the detected client device, before change. A device profile is a collection of policies that apply to one or more types of client devices. Is a zero length string in 'detect-only' mode or if not set. In 'detect-only' mode policy enforcement is disabled. This object is used within notifications and is not accessible.")
trpzClientDeviceProfileChangeReason = MibScalar((1, 3, 6, 1, 4, 1, 14525, 2, 155), TrpzClientDeviceProfileChangeReason()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trpzClientDeviceProfileChangeReason.setStatus('current')
if mibBuilder.loadTexts: trpzClientDeviceProfileChangeReason.setDescription('The reason why the device profile changed. This object is used within notifications and is not accessible.')
trpzDeviceFailTrap = NotificationType((1, 3, 6, 1, 4, 1, 14525, 5, 0, 1)).setObjects(("TRAPEZE-NETWORKS-TRAP-MIB", "trpzDeviceId"))
if mibBuilder.loadTexts: trpzDeviceFailTrap.setStatus('current')
if mibBuilder.loadTexts: trpzDeviceFailTrap.setDescription('The device has a failure indication')
trpzDeviceOkayTrap = NotificationType((1, 3, 6, 1, 4, 1, 14525, 5, 0, 2)).setObjects(("TRAPEZE-NETWORKS-TRAP-MIB", "trpzDeviceId"))
if mibBuilder.loadTexts: trpzDeviceOkayTrap.setStatus('current')
if mibBuilder.loadTexts: trpzDeviceOkayTrap.setDescription('The device has recovered')
trpzPoEFailTrap = NotificationType((1, 3, 6, 1, 4, 1, 14525, 5, 0, 3)).setObjects(("TRAPEZE-NETWORKS-TRAP-MIB", "trpzPortNum"))
if mibBuilder.loadTexts: trpzPoEFailTrap.setStatus('current')
if mibBuilder.loadTexts: trpzPoEFailTrap.setDescription('PoE has failed on the indicated port')
trpzApTimeoutTrap = NotificationType((1, 3, 6, 1, 4, 1, 14525, 5, 0, 4)).setObjects(("TRAPEZE-NETWORKS-TRAP-MIB", "trpzPortNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzAPMACAddress"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzAPAccessType"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzDAPNum"))
if mibBuilder.loadTexts: trpzApTimeoutTrap.setStatus('obsolete')
if mibBuilder.loadTexts: trpzApTimeoutTrap.setDescription("The AP entering the AC at port trpzPortNum with MAC trpzRadioMacAddress and of the access type (ap or dap) has not responded. Replaced by trpzApNonOperStatusTrap2, with trpzApTransition = 'timeout'.")
trpzAPBootTrap = NotificationType((1, 3, 6, 1, 4, 1, 14525, 5, 0, 5)).setObjects(("TRAPEZE-NETWORKS-TRAP-MIB", "trpzPortNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzAPMACAddress"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzAPAccessType"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzDAPNum"))
if mibBuilder.loadTexts: trpzAPBootTrap.setStatus('obsolete')
if mibBuilder.loadTexts: trpzAPBootTrap.setDescription("The AP entering the AC at port trpzPortNum with MAC trpzRadioMacAddress and of the access type (ap or dap) has booted. Replaced by trpzApNonOperStatusTrap2, with trpzApTransition = 'bootSuccess'.")
trpzMobilityDomainJoinTrap = NotificationType((1, 3, 6, 1, 4, 1, 14525, 5, 0, 6)).setObjects(("TRAPEZE-NETWORKS-TRAP-MIB", "trpzMobilityDomainIp"))
if mibBuilder.loadTexts: trpzMobilityDomainJoinTrap.setStatus('current')
if mibBuilder.loadTexts: trpzMobilityDomainJoinTrap.setDescription('The mobility domain member has received an UP notice from the remote address.')
trpzMobilityDomainTimeoutTrap = NotificationType((1, 3, 6, 1, 4, 1, 14525, 5, 0, 7)).setObjects(("TRAPEZE-NETWORKS-TRAP-MIB", "trpzMobilityDomainIp"))
if mibBuilder.loadTexts: trpzMobilityDomainTimeoutTrap.setStatus('current')
if mibBuilder.loadTexts: trpzMobilityDomainTimeoutTrap.setDescription('The mobility domain member has declared the remote address to be DOWN.')
trpzMpMichaelMICFailure = NotificationType((1, 3, 6, 1, 4, 1, 14525, 5, 0, 8)).setObjects(("TRAPEZE-NETWORKS-TRAP-MIB", "trpzPortNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRadioMACAddress"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRadioSSID"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzAPRadioNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientMACAddress"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientMACAddress"))
if mibBuilder.loadTexts: trpzMpMichaelMICFailure.setStatus('obsolete')
if mibBuilder.loadTexts: trpzMpMichaelMICFailure.setDescription('Two Michael MIC failures were seen within 60 seconds of each other. Obsoleted by trpzMichaelMICFailure.')
trpzRFDetectRogueAPTrap = NotificationType((1, 3, 6, 1, 4, 1, 14525, 5, 0, 9)).setObjects(("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRFDetectXmtrMacAddr"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRFDetectListenerListInfo"))
if mibBuilder.loadTexts: trpzRFDetectRogueAPTrap.setStatus('obsolete')
if mibBuilder.loadTexts: trpzRFDetectRogueAPTrap.setDescription('This trap is sent when RF detection finds a rogue AP. XmtrMacAddr is the radio MAC address from the beacon. ListenerListInfo is a display string of a list of listener information. Obsoleted by trpzRFDetectRogueDeviceTrap2.')
trpzRFDetectAdhocUserTrap = NotificationType((1, 3, 6, 1, 4, 1, 14525, 5, 0, 10)).setObjects(("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRFDetectXmtrMacAddr"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRFDetectListenerListInfo"))
if mibBuilder.loadTexts: trpzRFDetectAdhocUserTrap.setStatus('current')
if mibBuilder.loadTexts: trpzRFDetectAdhocUserTrap.setDescription('This trap is sent when RF detection sweep finds a ad-hoc user. trpzRFDetectXmtrMacAddr is the MAC address of the ad-hoc user. trpzRFDetectListenerListInfo is a display string of a list of listener information.')
trpzRFDetectRogueDisappearTrap = NotificationType((1, 3, 6, 1, 4, 1, 14525, 5, 0, 11)).setObjects(("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRFDetectXmtrMacAddr"))
if mibBuilder.loadTexts: trpzRFDetectRogueDisappearTrap.setStatus('obsolete')
if mibBuilder.loadTexts: trpzRFDetectRogueDisappearTrap.setDescription('This trap is sent when a rogue has disappeared. Obsoleted by trpzRFDetectRogueDeviceDisappearTrap.')
trpzClientAuthenticationFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 14525, 5, 0, 12)).setObjects(("TRAPEZE-NETWORKS-TRAP-MIB", "trpzUserName"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientSessionId"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientMACAddress"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientAuthServerIp"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientAuthenProtocolType"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientAccessType"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzPortNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzAPRadioNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzDAPNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRadioSSID"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientAuthenticationFailureCause"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientFailureCauseDescription"))
if mibBuilder.loadTexts: trpzClientAuthenticationFailureTrap.setStatus('current')
if mibBuilder.loadTexts: trpzClientAuthenticationFailureTrap.setDescription('This trap is sent if a client authentication fails.')
trpzClientAuthorizationFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 14525, 5, 0, 13)).setObjects(("TRAPEZE-NETWORKS-TRAP-MIB", "trpzUserName"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientSessionId"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientMACAddress"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientAuthServerIp"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientAuthenProtocolType"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientAccessType"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzPortNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzAPRadioNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzDAPNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRadioSSID"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientLocationPolicyIndex"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzUserParams"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientAuthorizationFailureCause"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientFailureCauseDescription"))
if mibBuilder.loadTexts: trpzClientAuthorizationFailureTrap.setStatus('current')
if mibBuilder.loadTexts: trpzClientAuthorizationFailureTrap.setDescription('This trap is sent if a client authorization fails.')
trpzClientAssociationFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 14525, 5, 0, 14)).setObjects(("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientMACAddress"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientAccessType"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzPortNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzAPRadioNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzDAPNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRadioSSID"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientAssociationFailureCause"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientFailureCauseDescription"))
if mibBuilder.loadTexts: trpzClientAssociationFailureTrap.setStatus('current')
if mibBuilder.loadTexts: trpzClientAssociationFailureTrap.setDescription('This trap is sent if a client association fails.')
trpzClientAuthorizationSuccessTrap = NotificationType((1, 3, 6, 1, 4, 1, 14525, 5, 0, 15)).setObjects(("TRAPEZE-NETWORKS-TRAP-MIB", "trpzUserName"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientSessionId"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientMACAddress"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientIp"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientVLANName"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientSessionState"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientSessionStartTime"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientAuthServerIp"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientAuthenProtocolType"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientAccessType"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzPortNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzAPRadioNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzDAPNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRadioSSID"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRadioRssi"))
if mibBuilder.loadTexts: trpzClientAuthorizationSuccessTrap.setStatus('obsolete')
if mibBuilder.loadTexts: trpzClientAuthorizationSuccessTrap.setDescription('This trap is sent when a client authorizes. Obsoleted by trpzClientAuthorizationSuccessTrap5.')
trpzClientDeAssociationTrap = NotificationType((1, 3, 6, 1, 4, 1, 14525, 5, 0, 16)).setObjects(("TRAPEZE-NETWORKS-TRAP-MIB", "trpzUserName"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientSessionId"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientMACAddress"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientIp"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientVLANName"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientAuthServerIp"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientAuthenProtocolType"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientAccessType"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzPortNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzAPRadioNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzDAPNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRadioSSID"))
if mibBuilder.loadTexts: trpzClientDeAssociationTrap.setStatus('obsolete')
if mibBuilder.loadTexts: trpzClientDeAssociationTrap.setDescription('This trap is sent if a client de-association occurred. Obsoleted by trpzClientDeAssociationTrap2.')
trpzClientRoamingTrap = NotificationType((1, 3, 6, 1, 4, 1, 14525, 5, 0, 17)).setObjects(("TRAPEZE-NETWORKS-TRAP-MIB", "trpzUserName"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientSessionId"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientMACAddress"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientIp"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientAccessType"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzPortNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzAPRadioNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzDAPNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRadioSSID"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientRoamedFromAccessType"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientRoamedFromPortNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientRoamedFromRadioNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientRoamedFromDAPNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientRoamedFromWsIp"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientTimeSinceLastRoam"))
if mibBuilder.loadTexts: trpzClientRoamingTrap.setStatus('obsolete')
if mibBuilder.loadTexts: trpzClientRoamingTrap.setDescription('This trap is sent if a client roams from one location to another. Obsoleted by trpzClientRoamingTrap2.')
trpzAutoTuneRadioPowerChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 14525, 5, 0, 18)).setObjects(("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRadioMACAddress"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzNewPowerLevel"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzOldPowerLevel"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRadioPowerChangeReason"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRadioPowerChangeDescription"))
if mibBuilder.loadTexts: trpzAutoTuneRadioPowerChangeTrap.setStatus('current')
if mibBuilder.loadTexts: trpzAutoTuneRadioPowerChangeTrap.setDescription("This trap is sent if a radio's power level has changed based on auto-tune.")
trpzAutoTuneRadioChannelChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 14525, 5, 0, 19)).setObjects(("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRadioMACAddress"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzNewChannelNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzOldChannelNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzChannelChangeReason"))
if mibBuilder.loadTexts: trpzAutoTuneRadioChannelChangeTrap.setStatus('current')
if mibBuilder.loadTexts: trpzAutoTuneRadioChannelChangeTrap.setDescription("This trap is sent if a radio's channel has changed based on auto-tune.")
trpzCounterMeasureStartTrap = NotificationType((1, 3, 6, 1, 4, 1, 14525, 5, 0, 20)).setObjects(("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRFDetectXmtrMacAddr"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRadioMACAddress"))
if mibBuilder.loadTexts: trpzCounterMeasureStartTrap.setStatus('current')
if mibBuilder.loadTexts: trpzCounterMeasureStartTrap.setDescription('This trap is sent when counter measures are started against a rogue. trpzRFDetectXmtrMacAddr is the mac address of the rogue we are doing counter measures against. trpzRadioMACAddress identifies the radio performing the countermeasures.')
trpzCounterMeasureStopTrap = NotificationType((1, 3, 6, 1, 4, 1, 14525, 5, 0, 21)).setObjects(("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRFDetectXmtrMacAddr"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRadioMACAddress"))
if mibBuilder.loadTexts: trpzCounterMeasureStopTrap.setStatus('current')
if mibBuilder.loadTexts: trpzCounterMeasureStopTrap.setDescription('This trap is sent when counter measures are stopped against a rogue. trpzRFDetectXmtrMacAddr is the mac address of the rogue we were doing counter measures against. trpzRadioMACAddress identifies the radio performing the countermeasures.')
trpzClientDot1xFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 14525, 5, 0, 22)).setObjects(("TRAPEZE-NETWORKS-TRAP-MIB", "trpzUserName"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientMACAddress"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientAuthenProtocolType"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientAccessType"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzDAPNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzPortNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzAPRadioNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRadioSSID"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientDot1xState"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientDot1xFailureCause"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientFailureCauseDescription"))
if mibBuilder.loadTexts: trpzClientDot1xFailureTrap.setStatus('current')
if mibBuilder.loadTexts: trpzClientDot1xFailureTrap.setDescription('This trap is sent if a client failed 802.1X.')
trpzClientClearedTrap = NotificationType((1, 3, 6, 1, 4, 1, 14525, 5, 0, 23)).setObjects(("TRAPEZE-NETWORKS-TRAP-MIB", "trpzUserName"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientSessionId"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientMACAddress"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientIp"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientAccessType"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzPortNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzAPRadioNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzDAPNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRadioSSID"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientSessionElapsedTime"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzLocalId"))
if mibBuilder.loadTexts: trpzClientClearedTrap.setStatus('obsolete')
if mibBuilder.loadTexts: trpzClientClearedTrap.setDescription('This trap is sent when a client session is cleared. Obsoleted by trpzClientClearedTrap3.')
trpzClientAuthorizationSuccessTrap2 = NotificationType((1, 3, 6, 1, 4, 1, 14525, 5, 0, 24)).setObjects(("TRAPEZE-NETWORKS-TRAP-MIB", "trpzUserName"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientSessionId"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientMACAddress"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientIp"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientVLANName"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientSessionState"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientSessionStartTime"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientAuthServerIp"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientAuthenProtocolType"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientAccessType"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzPortNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzAPRadioNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzDAPNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRadioSSID"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzUserAccessType"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzLocalId"))
if mibBuilder.loadTexts: trpzClientAuthorizationSuccessTrap2.setStatus('obsolete')
if mibBuilder.loadTexts: trpzClientAuthorizationSuccessTrap2.setDescription('This trap is sent when a client authorizes. Obsoleted by trpzClientAuthorizationSuccessTrap5.')
trpzRFDetectSpoofedMacAPTrap = NotificationType((1, 3, 6, 1, 4, 1, 14525, 5, 0, 25)).setObjects(("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRFDetectXmtrMacAddr"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRFDetectListenerListInfo"))
if mibBuilder.loadTexts: trpzRFDetectSpoofedMacAPTrap.setStatus('obsolete')
if mibBuilder.loadTexts: trpzRFDetectSpoofedMacAPTrap.setDescription('This trap is sent when RF detection finds an AP using the MAC of the listener. trpzRFDetectXmtrMacAddr is the radio MAC address from the beacon. trpzRFDetectListenerListInfo is a display string of a list of listener information. Obsoleted by trpzRFDetectDoSTrap and trpzRFDetectRogueDeviceTrap2. One of the two traps will be sent depending on the type of AP MAC spoofing detected.')
trpzRFDetectSpoofedSsidAPTrap = NotificationType((1, 3, 6, 1, 4, 1, 14525, 5, 0, 26)).setObjects(("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRFDetectXmtrMacAddr"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRFDetectListenerListInfo"))
if mibBuilder.loadTexts: trpzRFDetectSpoofedSsidAPTrap.setStatus('obsolete')
if mibBuilder.loadTexts: trpzRFDetectSpoofedSsidAPTrap.setDescription('This trap is sent when RF detection finds an AP using the SSID of the listener, and the AP is not in the mobility domain. trpzRFDetectXmtrMacAddr is the radio MAC address from the beacon. trpzRFDetectListenerListInfo is a display string of a list of listener information. Obsoleted by trpzRFDetectRogueDeviceTrap2 and trpzRFDetectSuspectDeviceTrap2. One of the two traps will be sent, depending on RF detection classification rules.')
trpzRFDetectDoSTrap = NotificationType((1, 3, 6, 1, 4, 1, 14525, 5, 0, 27)).setObjects(("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRFDetectDoSType"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRFDetectXmtrMacAddr"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRFDetectListenerListInfo"))
if mibBuilder.loadTexts: trpzRFDetectDoSTrap.setStatus('current')
if mibBuilder.loadTexts: trpzRFDetectDoSTrap.setDescription('This trap is sent when RF detection finds a denial of service (DoS) occurring. trpzRFDetectDoSType specifies the type of DoS. trpzRFDetectXmtrMacAddr is the radio MAC address from the beacon. trpzRFDetectListenerListInfo is a display string of a list of listener information.')
trpzRFDetectClientViaRogueWiredAPTrap = NotificationType((1, 3, 6, 1, 4, 1, 14525, 5, 0, 28)).setObjects(("TRAPEZE-NETWORKS-TRAP-MIB", "trpzSourceWsIp"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzPortNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientVLANid"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientVLANtag"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRFDetectXmtrMacAddr"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRFDetectListenerListInfo"))
if mibBuilder.loadTexts: trpzRFDetectClientViaRogueWiredAPTrap.setStatus('obsolete')
if mibBuilder.loadTexts: trpzRFDetectClientViaRogueWiredAPTrap.setDescription("This trap is sent when a client is detected that connected via a rogue AP that is attached to a wired port. trpzSourceWsIp is the IP address of the AC (switch) with the wired port. trpzPortNum is the port on the AC. trpzClientVLANid is the VLAN ID of the client's traffic. trpzClientVLANtag is the VLAN tag of the client's traffic. trpzRFDetectXmtrMacAddr is the MAC address of the client. trpzRFDetectListenerListInfo is a display string of a list of listener information. Obsoleted by trpzRFDetectClientViaRogueWiredAPTrap3.")
trpzRFDetectInterferingRogueAPTrap = NotificationType((1, 3, 6, 1, 4, 1, 14525, 5, 0, 29)).setObjects(("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRFDetectXmtrMacAddr"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRFDetectListenerListInfo"))
if mibBuilder.loadTexts: trpzRFDetectInterferingRogueAPTrap.setStatus('obsolete')
if mibBuilder.loadTexts: trpzRFDetectInterferingRogueAPTrap.setDescription('This trap is sent when RF detection finds an interfering rogue AP. trpzRFDetectXmtrMacAddr is the radio MAC address from the beacon. trpzRFDetectListenerListInfo is a display string of a list of listener information. Obsoleted by trpzRFDetectSuspectDeviceTrap2.')
trpzRFDetectInterferingRogueDisappearTrap = NotificationType((1, 3, 6, 1, 4, 1, 14525, 5, 0, 30)).setObjects(("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRFDetectXmtrMacAddr"))
if mibBuilder.loadTexts: trpzRFDetectInterferingRogueDisappearTrap.setStatus('obsolete')
if mibBuilder.loadTexts: trpzRFDetectInterferingRogueDisappearTrap.setDescription('This trap is sent when an interfering rogue has disappeared. trpzRFDetectXmtrMacAddr is the radio MAC address from the beacon. Obsoleted by trpzRFDetectSuspectDeviceDisappearTrap.')
trpzRFDetectUnAuthorizedSsidTrap = NotificationType((1, 3, 6, 1, 4, 1, 14525, 5, 0, 31)).setObjects(("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRFDetectXmtrMacAddr"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRFDetectListenerListInfo"))
if mibBuilder.loadTexts: trpzRFDetectUnAuthorizedSsidTrap.setStatus('obsolete')
if mibBuilder.loadTexts: trpzRFDetectUnAuthorizedSsidTrap.setDescription('This trap is sent when RF detection finds use of an unauthorized SSID. trpzRFDetectXmtrMacAddr is the radio MAC address from the beacon. trpzRFDetectListenerListInfo is a display string of a list of listener information. Obsoleted by trpzRFDetectRogueDeviceTrap2 and trpzRFDetectSuspectDeviceTrap2. One of the two traps will be sent if the device having an unauthorized SSID is classified as rogue or suspect because of this.')
trpzRFDetectUnAuthorizedOuiTrap = NotificationType((1, 3, 6, 1, 4, 1, 14525, 5, 0, 32)).setObjects(("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRFDetectXmtrMacAddr"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRFDetectListenerListInfo"))
if mibBuilder.loadTexts: trpzRFDetectUnAuthorizedOuiTrap.setStatus('obsolete')
if mibBuilder.loadTexts: trpzRFDetectUnAuthorizedOuiTrap.setDescription('This trap is sent when RF detection finds use of an unauthorized OUI. trpzRFDetectXmtrMacAddr is the radio MAC address from the beacon. trpzRFDetectListenerListInfo is a display string of a list of listener information. Obsoleted by trpzRFDetectRogueDeviceTrap2 and trpzRFDetectSuspectDeviceTrap2. One of the two traps will be sent if the device having an unauthorized OUI is classified as rogue or suspect because of this.')
trpzRFDetectUnAuthorizedAPTrap = NotificationType((1, 3, 6, 1, 4, 1, 14525, 5, 0, 33)).setObjects(("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRFDetectXmtrMacAddr"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRFDetectListenerListInfo"))
if mibBuilder.loadTexts: trpzRFDetectUnAuthorizedAPTrap.setStatus('obsolete')
if mibBuilder.loadTexts: trpzRFDetectUnAuthorizedAPTrap.setDescription('This trap is sent when RF detection finds operation of an unauthorized AP. trpzRFDetectXmtrMacAddr is the radio MAC address from the beacon. trpzRFDetectListenerListInfo is a display string of a list of listener information. Obsoleted by trpzRFDetectRogueDeviceTrap2.')
trpzDAPConnectWarningTrap = NotificationType((1, 3, 6, 1, 4, 1, 14525, 5, 0, 34)).setObjects(("TRAPEZE-NETWORKS-TRAP-MIB", "trpzDeviceModel"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzDeviceSerNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRsaPubKeyFingerPrint"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzDAPconnectWarningType"))
if mibBuilder.loadTexts: trpzDAPConnectWarningTrap.setStatus('obsolete')
if mibBuilder.loadTexts: trpzDAPConnectWarningTrap.setDescription("A DAP, tried to connect to the AC. trpzDeviceModel provides the model of the DAP. trpzDeviceSerNum provides the serial number of the DAP. trpzRsaPubKeyFingerPrint provides the computed fingerprint of the DAP. trpzDAPconnectWarningType provides the type of connect warning. Replaced by trpzApNonOperStatusTrap2, with trpzApTransition = 'connectFail'.")
trpzRFDetectDoSPortTrap = NotificationType((1, 3, 6, 1, 4, 1, 14525, 5, 0, 35)).setObjects(("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRFDetectDoSType"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRFDetectXmtrMacAddr"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientAccessType"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzPortNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzDAPNum"))
if mibBuilder.loadTexts: trpzRFDetectDoSPortTrap.setStatus('current')
if mibBuilder.loadTexts: trpzRFDetectDoSPortTrap.setDescription("This trap is sent when RF detection finds a denial of service (DoS) occurring. This has port and AP info instead of 'Listener info'. trpzRFDetectDoSType specifies the type of DoS. trpzRFDetectXmtrMacAddr is the radio MAC address from the beacon. trpzClientAccessType specifies whether wired, AP, or DAP. trpzPortNum (for wired or AP), the port that is used. trpzDAPNum (for a DAP), the ID of the DAP.")
trpzMpMichaelMICFailure2 = NotificationType((1, 3, 6, 1, 4, 1, 14525, 5, 0, 36)).setObjects(("TRAPEZE-NETWORKS-TRAP-MIB", "trpzPortNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzAPRadioNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientMACAddress"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientMACAddress2"))
if mibBuilder.loadTexts: trpzMpMichaelMICFailure2.setStatus('obsolete')
if mibBuilder.loadTexts: trpzMpMichaelMICFailure2.setDescription('Two Michael MIC failures were seen within 60 seconds of each other. Object trpzClientMACAddress is the source of the first failure, and object trpzClientMACAddress2 source of the second failure. Obsoleted by trpzMichaelMICFailure.')
trpzApNonOperStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 14525, 5, 0, 37)).setObjects(("TRAPEZE-NETWORKS-TRAP-MIB", "trpzDeviceSerNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzAPMACAddress"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzApAttachType"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzApPortOrDapNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzApName"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzApTransition"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzApFailDetail"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzApWasOperational"))
if mibBuilder.loadTexts: trpzApNonOperStatusTrap.setStatus('obsolete')
if mibBuilder.loadTexts: trpzApNonOperStatusTrap.setDescription('This trap is sent when the AP changes state and the new one is a non-operational state. Obsoleted by trpzApNonOperStatusTrap2.')
trpzApOperRadioStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 14525, 5, 0, 38)).setObjects(("TRAPEZE-NETWORKS-TRAP-MIB", "trpzDeviceSerNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzApAttachType"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzApPortOrDapNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzApName"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzAPRadioNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRadioMACAddress"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRadioType"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRadioConfigState"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzApConnectSecurityType"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzApServiceAvailability"))
if mibBuilder.loadTexts: trpzApOperRadioStatusTrap.setStatus('obsolete')
if mibBuilder.loadTexts: trpzApOperRadioStatusTrap.setDescription('This trap is sent when the Radio changes state. It also contains aggregate information about the AP in operational state - security level and service availability. Obsoleted by trpzApOperRadioStatusTrap3.')
trpzClientIpAddrChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 14525, 5, 0, 39)).setObjects(("TRAPEZE-NETWORKS-TRAP-MIB", "trpzUserName"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientSessionId"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientMACAddress"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientIp"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientVLANName"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientSessionState"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientAuthServerIp"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientAuthenProtocolType"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientAccessType"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzPortNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzAPRadioNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzDAPNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRadioSSID"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzUserAccessType"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzLocalId"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientIpAddrChangeReason"))
if mibBuilder.loadTexts: trpzClientIpAddrChangeTrap.setStatus('obsolete')
if mibBuilder.loadTexts: trpzClientIpAddrChangeTrap.setDescription("This trap is sent when a client's IP address changes. The most likely case for this is when the client first connects to the network. Obsoleted by trpzClientIpAddrChangeTrap2.")
trpzClientAssociationSuccessTrap = NotificationType((1, 3, 6, 1, 4, 1, 14525, 5, 0, 40)).setObjects(("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientMACAddress"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientAccessType"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzPortNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzAPRadioNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzDAPNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRadioSSID"))
if mibBuilder.loadTexts: trpzClientAssociationSuccessTrap.setStatus('current')
if mibBuilder.loadTexts: trpzClientAssociationSuccessTrap.setDescription('This trap is sent if a client association succeeds. WARNING: DO NOT enable it in normal use. It may impair switch performance! Only recommended for debugging network issues.')
trpzClientAuthenticationSuccessTrap = NotificationType((1, 3, 6, 1, 4, 1, 14525, 5, 0, 41)).setObjects(("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientMACAddress"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientAccessType"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzPortNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzAPRadioNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzDAPNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRadioSSID"))
if mibBuilder.loadTexts: trpzClientAuthenticationSuccessTrap.setStatus('current')
if mibBuilder.loadTexts: trpzClientAuthenticationSuccessTrap.setDescription('This trap is sent if a client authentication succeeds.')
trpzClientDeAuthenticationTrap = NotificationType((1, 3, 6, 1, 4, 1, 14525, 5, 0, 42)).setObjects(("TRAPEZE-NETWORKS-TRAP-MIB", "trpzUserName"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientSessionId"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientMACAddress"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientIp"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientVLANName"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientAuthServerIp"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientAuthenProtocolType"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientAccessType"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzPortNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzAPRadioNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzDAPNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRadioSSID"))
if mibBuilder.loadTexts: trpzClientDeAuthenticationTrap.setStatus('obsolete')
if mibBuilder.loadTexts: trpzClientDeAuthenticationTrap.setDescription('This trap is sent if a client de-authentication occurred. Obsoleted by trpzClientDeAuthenticationTrap2.')
trpzRFDetectBlacklistedTrap = NotificationType((1, 3, 6, 1, 4, 1, 14525, 5, 0, 43)).setObjects(("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRFDetectXmtrMacAddr"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientAccessType"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzPortNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzDAPNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzBlacklistingRemainingTime"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzBlacklistingCause"))
if mibBuilder.loadTexts: trpzRFDetectBlacklistedTrap.setStatus('current')
if mibBuilder.loadTexts: trpzRFDetectBlacklistedTrap.setDescription("This trap is sent if an association, re-association or de-association request (packet) is detected from a blacklisted transmitter (identified by MAC: 'trpzRFDetectXmtrMacAddr'). If 'trpzBlacklistingCause' is 'configured', then 'trpzBlacklistingRemainingTime' will be zero, meaning indefinite time (depending on administrative actions on the Black List). Otherwise, 'trpzBlacklistingRemainingTime' will indicate the time in seconds until this transmitter's requests could be allowed.")
trpzRFDetectClientViaRogueWiredAPTrap2 = NotificationType((1, 3, 6, 1, 4, 1, 14525, 5, 0, 44)).setObjects(("TRAPEZE-NETWORKS-TRAP-MIB", "trpzSourceWsIp"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzPortNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientVLANid"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientVLANtag"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRFDetectXmtrMacAddr"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRFDetectListenerListInfo"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRFDetectRogueAPMacAddr"))
if mibBuilder.loadTexts: trpzRFDetectClientViaRogueWiredAPTrap2.setStatus('obsolete')
if mibBuilder.loadTexts: trpzRFDetectClientViaRogueWiredAPTrap2.setDescription("This trap is sent when a client is detected that connected via a rogue AP that is attached to a wired port. trpzSourceWsIp is the IP address of the AC (switch) with the wired port. trpzPortNum is the port on the AC. trpzClientVLANid is the VLAN ID of the client's traffic. trpzClientVLANtag is the VLAN tag of the client's traffic. trpzRFDetectXmtrMacAddr is the MAC address of the client. trpzRFDetectListenerListInfo is a display string of a list of listener information. trpzRFDetectRogueAPMacAddr is the MAC address of the Rogue AP (wired) the client is connected to. Obsoleted by trpzRFDetectClientViaRogueWiredAPTrap3.")
trpzRFDetectAdhocUserDisappearTrap = NotificationType((1, 3, 6, 1, 4, 1, 14525, 5, 0, 45)).setObjects(("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRFDetectXmtrMacAddr"))
if mibBuilder.loadTexts: trpzRFDetectAdhocUserDisappearTrap.setStatus('current')
if mibBuilder.loadTexts: trpzRFDetectAdhocUserDisappearTrap.setDescription('This trap is sent when RF detection sweep finds that an ad-hoc user disappeared. trpzRFDetectXmtrMacAddr is the MAC address of the ad-hoc user.')
trpzApRejectLicenseExceededTrap = NotificationType((1, 3, 6, 1, 4, 1, 14525, 5, 0, 46)).setObjects(("TRAPEZE-NETWORKS-TRAP-MIB", "trpzNumLicensedActiveAPs"))
if mibBuilder.loadTexts: trpzApRejectLicenseExceededTrap.setStatus('current')
if mibBuilder.loadTexts: trpzApRejectLicenseExceededTrap.setDescription('This trap is sent when an AC (wireless switch) receives a packet from an inactive AP and attaching that AP would make the AC exceed the maximum (licensed) number of active APs.')
trpzClientDynAuthorChangeSuccessTrap = NotificationType((1, 3, 6, 1, 4, 1, 14525, 5, 0, 47)).setObjects(("TRAPEZE-NETWORKS-TRAP-MIB", "trpzUserName"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientSessionId"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientMACAddress"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientIp"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientSessionState"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientDynAuthorClientIp"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientAuthenProtocolType"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientAccessType"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzPortNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzAPRadioNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzDAPNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRadioSSID"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzUserAccessType"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzLocalId"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzChangedUserParamOldValues"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzChangedUserParamNewValues"))
if mibBuilder.loadTexts: trpzClientDynAuthorChangeSuccessTrap.setStatus('obsolete')
if mibBuilder.loadTexts: trpzClientDynAuthorChangeSuccessTrap.setDescription('This trap is sent when the authorization attributes for a user are dynamically changed by an authorized dynamic authorization client. Obsoleted by trpzClientDynAuthorChangeSuccessTrap2.')
trpzClientDynAuthorChangeFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 14525, 5, 0, 48)).setObjects(("TRAPEZE-NETWORKS-TRAP-MIB", "trpzUserName"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientSessionId"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientMACAddress"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientDynAuthorClientIp"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientAuthenProtocolType"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientAccessType"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzPortNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzAPRadioNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzDAPNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRadioSSID"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzUserParams"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientAuthorizationFailureCause"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientFailureCauseDescription"))
if mibBuilder.loadTexts: trpzClientDynAuthorChangeFailureTrap.setStatus('current')
if mibBuilder.loadTexts: trpzClientDynAuthorChangeFailureTrap.setDescription('This trap is sent if a change of authorization request sent by an authorized dynamic authorization client is unsuccessful.')
trpzClientDisconnectTrap = NotificationType((1, 3, 6, 1, 4, 1, 14525, 5, 0, 49)).setObjects(("TRAPEZE-NETWORKS-TRAP-MIB", "trpzUserName"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientSessionId"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientMACAddress"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientIp"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientAccessType"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzPortNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzAPRadioNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzDAPNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRadioSSID"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzLocalId"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientDisconnectSource"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientDisconnectDescription"))
if mibBuilder.loadTexts: trpzClientDisconnectTrap.setStatus('obsolete')
if mibBuilder.loadTexts: trpzClientDisconnectTrap.setDescription('This trap is sent when a client session is terminated administratively. Obsoleted by trpzClientDisconnectTrap2.')
trpzMobilityDomainFailOverTrap = NotificationType((1, 3, 6, 1, 4, 1, 14525, 5, 0, 50)).setObjects(("TRAPEZE-NETWORKS-TRAP-MIB", "trpzMobilityDomainSecondarySeedIp"))
if mibBuilder.loadTexts: trpzMobilityDomainFailOverTrap.setStatus('current')
if mibBuilder.loadTexts: trpzMobilityDomainFailOverTrap.setDescription('This trap is sent when the Mobility Domain fails over to the secondary seed.')
trpzMobilityDomainFailBackTrap = NotificationType((1, 3, 6, 1, 4, 1, 14525, 5, 0, 51)).setObjects(("TRAPEZE-NETWORKS-TRAP-MIB", "trpzMobilityDomainPrimarySeedIp"))
if mibBuilder.loadTexts: trpzMobilityDomainFailBackTrap.setStatus('current')
if mibBuilder.loadTexts: trpzMobilityDomainFailBackTrap.setDescription('This trap is sent when the Mobility Domain fails back to the primary seed.')
trpzRFDetectRogueDeviceTrap = NotificationType((1, 3, 6, 1, 4, 1, 14525, 5, 0, 52)).setObjects(("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRFDetectXmtrMacAddr"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRFDetectListenerListInfo"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRFDetectClassificationReason"))
if mibBuilder.loadTexts: trpzRFDetectRogueDeviceTrap.setStatus('obsolete')
if mibBuilder.loadTexts: trpzRFDetectRogueDeviceTrap.setDescription('This trap is sent when RF detection finds a rogue device. XmtrMacAddr is the radio MAC address from the beacon. ListenerListInfo is a display string of a list of listener information. ClassificationReason indicates the reason why the device is classified as rogue. Obsoleted by trpzRFDetectRogueDeviceTrap2.')
trpzRFDetectRogueDeviceDisappearTrap = NotificationType((1, 3, 6, 1, 4, 1, 14525, 5, 0, 53)).setObjects(("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRFDetectXmtrMacAddr"))
if mibBuilder.loadTexts: trpzRFDetectRogueDeviceDisappearTrap.setStatus('current')
if mibBuilder.loadTexts: trpzRFDetectRogueDeviceDisappearTrap.setDescription('This trap is sent when a rogue device has disappeared. This trap obsoletes the trpzRFDetectRogueDisappearTrap.')
trpzRFDetectSuspectDeviceTrap = NotificationType((1, 3, 6, 1, 4, 1, 14525, 5, 0, 54)).setObjects(("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRFDetectXmtrMacAddr"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRFDetectListenerListInfo"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRFDetectClassificationReason"))
if mibBuilder.loadTexts: trpzRFDetectSuspectDeviceTrap.setStatus('obsolete')
if mibBuilder.loadTexts: trpzRFDetectSuspectDeviceTrap.setDescription('This trap is sent when RF detection finds a suspect device. trpzRFDetectXmtrMacAddr is the radio MAC address from the beacon. trpzRFDetectListenerListInfo is a display string of a list of listener information. ClassificationReason indicates the reason why the device is classified as suspect. Obsoleted by trpzRFDetectSuspectDeviceTrap2.')
trpzRFDetectSuspectDeviceDisappearTrap = NotificationType((1, 3, 6, 1, 4, 1, 14525, 5, 0, 55)).setObjects(("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRFDetectXmtrMacAddr"))
if mibBuilder.loadTexts: trpzRFDetectSuspectDeviceDisappearTrap.setStatus('current')
if mibBuilder.loadTexts: trpzRFDetectSuspectDeviceDisappearTrap.setDescription('This trap is sent when a suspect device has disappeared. trpzRFDetectXmtrMacAddr is the radio MAC address from the beacon. This trap obsoletes the trpzRFDetectInterferingRogueDisappearTrap.')
trpzRFDetectClientViaRogueWiredAPTrap3 = NotificationType((1, 3, 6, 1, 4, 1, 14525, 5, 0, 56)).setObjects(("TRAPEZE-NETWORKS-TRAP-MIB", "trpzSourceWsIp"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzPortNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientVLANid"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientVLANtag"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRFDetectXmtrMacAddr"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRFDetectListenerListInfo"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRFDetectRogueAPMacAddr"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRFDetectClassificationReason"))
if mibBuilder.loadTexts: trpzRFDetectClientViaRogueWiredAPTrap3.setStatus('current')
if mibBuilder.loadTexts: trpzRFDetectClientViaRogueWiredAPTrap3.setDescription("This trap is sent when a client is detected that connected via a rogue AP that is attached to a wired port. trpzSourceWsIp is the IP address of the AC (switch) with the wired port. trpzPortNum is the port on the AC. trpzClientVLANid is the VLAN ID of the client's traffic. trpzClientVLANtag is the VLAN tag of the client's traffic. trpzRFDetectXmtrMacAddr is the MAC address of the client. trpzRFDetectListenerListInfo is a display string of a list of listener information. trpzRFDetectRogueAPMacAddr is the MAC address of the Rogue AP (wired) the client is connected to. ClassificationReason indicates the reason why the AP is classified as rogue. This trap obsoletes the trpzRFDetectClientViaRogueWiredAPTrap and trpzRFDetectClientViaRogueWiredAPTrap2.")
trpzRFDetectClassificationChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 14525, 5, 0, 57))
if mibBuilder.loadTexts: trpzRFDetectClassificationChangeTrap.setStatus('current')
if mibBuilder.loadTexts: trpzRFDetectClassificationChangeTrap.setDescription('This trap is sent when RF detection classification rules change.')
trpzConfigurationSavedTrap = NotificationType((1, 3, 6, 1, 4, 1, 14525, 5, 0, 58)).setObjects(("TRAPEZE-NETWORKS-TRAP-MIB", "trpzConfigSaveFileName"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzConfigSaveInitiatorType"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzConfigSaveInitiatorIp"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzConfigSaveInitiatorDetails"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzConfigSaveGeneration"))
if mibBuilder.loadTexts: trpzConfigurationSavedTrap.setStatus('current')
if mibBuilder.loadTexts: trpzConfigurationSavedTrap.setDescription('This trap is sent when the running configuration of the switch is written to a configuration file.')
trpzApNonOperStatusTrap2 = NotificationType((1, 3, 6, 1, 4, 1, 14525, 5, 0, 59)).setObjects(("TRAPEZE-NETWORKS-TRAP-MIB", "trpzDeviceSerNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzAPMACAddress"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzApNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzApName"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzApTransition"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzApFailDetail"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzApWasOperational"))
if mibBuilder.loadTexts: trpzApNonOperStatusTrap2.setStatus('current')
if mibBuilder.loadTexts: trpzApNonOperStatusTrap2.setDescription('This trap is sent when the AP changes state and the new one is a non-operational state. Obsoletes trpzApNonOperStatusTrap.')
trpzApOperRadioStatusTrap2 = NotificationType((1, 3, 6, 1, 4, 1, 14525, 5, 0, 60)).setObjects(("TRAPEZE-NETWORKS-TRAP-MIB", "trpzDeviceSerNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzApNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzApName"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzAPRadioNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRadioMACAddress"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRadioType"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRadioMode"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRadioConfigState"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzApConnectSecurityType"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzApServiceAvailability"))
if mibBuilder.loadTexts: trpzApOperRadioStatusTrap2.setStatus('obsolete')
if mibBuilder.loadTexts: trpzApOperRadioStatusTrap2.setDescription('This trap is sent when the Radio changes state. It also contains aggregate information about the AP in operational state - security level and service availability. Obsoleted by trpzApOperRadioStatusTrap3.')
trpzMichaelMICFailure = NotificationType((1, 3, 6, 1, 4, 1, 14525, 5, 0, 61)).setObjects(("TRAPEZE-NETWORKS-TRAP-MIB", "trpzApNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzAPRadioNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRadioMACAddress"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzMichaelMICFailureCause"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientMACAddress"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientMACAddress2"))
if mibBuilder.loadTexts: trpzMichaelMICFailure.setStatus('current')
if mibBuilder.loadTexts: trpzMichaelMICFailure.setDescription('Two Michael MIC failures were seen within 60 seconds of each other. Object trpzClientMACAddress indicates the source of the first failure, and object trpzClientMACAddress2 indicates the source of the second failure. Service is interrupted for 60 seconds on the radio due to TKIP countermeasures having commenced. The radio is identified by trpzApNum and trpzAPRadioNum. An alternative way to identify the radio is trpzRadioMACAddress. Obsoletes trpzMpMichaelMICFailure and trpzMpMichaelMICFailure2.')
trpzClientAuthorizationSuccessTrap3 = NotificationType((1, 3, 6, 1, 4, 1, 14525, 5, 0, 62)).setObjects(("TRAPEZE-NETWORKS-TRAP-MIB", "trpzUserName"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientSessionId"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientMACAddress"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientIp"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientVLANName"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientSessionState"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientAuthServerIp"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientAuthenProtocolType"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientAccessMode"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzPhysPortNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzApNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzAPRadioNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRadioSSID"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzUserAccessType"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzLocalId"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientAuthorizationReason"))
if mibBuilder.loadTexts: trpzClientAuthorizationSuccessTrap3.setStatus('obsolete')
if mibBuilder.loadTexts: trpzClientAuthorizationSuccessTrap3.setDescription("This trap is sent when a client authorizes. If trpzClientAccessMode = 'ap': trpzApNum, trpzAPRadioNum, trpzRadioSSID identify the AP/radio/BSS providing wireless service to this client at the time this trap was sent. If trpzClientAccessMode = 'wired': trpzPhysPortNum identifies the physical port on the AC used by this wired-auth client. Obsoleted by trpzClientAuthorizationSuccessTrap5.")
trpzApManagerChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 14525, 5, 0, 63)).setObjects(("TRAPEZE-NETWORKS-TRAP-MIB", "trpzDeviceSerNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzAPMACAddress"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzApNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzApName"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzApMgrOldIp"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzApMgrNewIp"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzApMgrChangeReason"))
if mibBuilder.loadTexts: trpzApManagerChangeTrap.setStatus('current')
if mibBuilder.loadTexts: trpzApManagerChangeTrap.setDescription("This trap is sent when the AP's secondary link becomes its primary link.")
trpzClientClearedTrap2 = NotificationType((1, 3, 6, 1, 4, 1, 14525, 5, 0, 64)).setObjects(("TRAPEZE-NETWORKS-TRAP-MIB", "trpzUserName"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientSessionId"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientMACAddress"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientIp"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientAccessMode"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzPhysPortNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzApNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzAPRadioNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRadioSSID"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientSessionElapsedSeconds"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzLocalId"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientClearedReason"))
if mibBuilder.loadTexts: trpzClientClearedTrap2.setStatus('obsolete')
if mibBuilder.loadTexts: trpzClientClearedTrap2.setDescription('This trap is sent when a client session is cleared. Obsoleted by trpzClientClearedTrap3.')
trpzMobilityDomainResiliencyStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 14525, 5, 0, 65)).setObjects(("TRAPEZE-NETWORKS-TRAP-MIB", "trpzMobilityDomainResiliencyStatus"))
if mibBuilder.loadTexts: trpzMobilityDomainResiliencyStatusTrap.setStatus('current')
if mibBuilder.loadTexts: trpzMobilityDomainResiliencyStatusTrap.setDescription('This trap is sent by a mobility domain seed to announce changes in resilient capacity status.')
trpzApOperRadioStatusTrap3 = NotificationType((1, 3, 6, 1, 4, 1, 14525, 5, 0, 66)).setObjects(("TRAPEZE-NETWORKS-TRAP-MIB", "trpzDeviceSerNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzApNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzApName"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzAPRadioNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRadioMACAddress"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRadioType"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRadioMode"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRadioConfigState"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRadioChannelWidth"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRadioMimoState"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzApConnectSecurityType"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzApServiceAvailability"))
if mibBuilder.loadTexts: trpzApOperRadioStatusTrap3.setStatus('current')
if mibBuilder.loadTexts: trpzApOperRadioStatusTrap3.setDescription('This trap is sent when the Radio changes state. It also contains aggregate information about the AP in operational state - security level and service availability. Obsoletes trpzApOperRadioStatusTrap and trpzApOperRadioStatusTrap2.')
trpzClientAuthorizationSuccessTrap4 = NotificationType((1, 3, 6, 1, 4, 1, 14525, 5, 0, 67)).setObjects(("TRAPEZE-NETWORKS-TRAP-MIB", "trpzUserName"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientSessionId"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientMACAddress"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientIp"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientVLANName"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientSessionState"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientAuthServerIp"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientAuthenProtocolType"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientAccessMode"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzPhysPortNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzApNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzAPRadioNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRadioSSID"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientRadioType"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzUserAccessType"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzLocalId"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientAuthorizationReason"))
if mibBuilder.loadTexts: trpzClientAuthorizationSuccessTrap4.setStatus('obsolete')
if mibBuilder.loadTexts: trpzClientAuthorizationSuccessTrap4.setDescription("This trap is sent when a client authorizes. If trpzClientAccessMode = 'ap': trpzApNum, trpzAPRadioNum, trpzRadioSSID identify the AP/radio/BSS providing wireless service to this client at the time this trap was sent; trpzClientRadioType gives the type of radio used by this client. If trpzClientAccessMode = 'wired': trpzPhysPortNum identifies the physical port on the AC used by this wired-auth client. Obsoleted by trpzClientAuthorizationSuccessTrap5.")
trpzRFDetectRogueDeviceTrap2 = NotificationType((1, 3, 6, 1, 4, 1, 14525, 5, 0, 68)).setObjects(("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRFDetectXmtrMacAddr"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRFDetectXmtrRadioType"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRFDetectXmtrCryptoType"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRFDetectListenerListInfo"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRFDetectClassificationReason"))
if mibBuilder.loadTexts: trpzRFDetectRogueDeviceTrap2.setStatus('current')
if mibBuilder.loadTexts: trpzRFDetectRogueDeviceTrap2.setDescription('This trap is sent when RF detection finds a rogue device. trpzRFDetectXmtrMacAddr is the radio MAC address from the beacon. trpzRFDetectXmtrRadioType indicates the Type of Radio used by the transmitter (rogue device). trpzRFDetectXmtrCryptoType indicates the Type of Crypto used by the transmitter (rogue device). trpzRFDetectListenerListInfo is a display string of a list of listener information. trpzRFDetectClassificationReason indicates the reason why the device is classified as rogue. Obsoletes trpzRFDetectRogueAPTrap, trpzRFDetectUnAuthorizedAPTrap, trpzRFDetectRogueDeviceTrap.')
trpzRFDetectSuspectDeviceTrap2 = NotificationType((1, 3, 6, 1, 4, 1, 14525, 5, 0, 69)).setObjects(("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRFDetectXmtrMacAddr"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRFDetectXmtrRadioType"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRFDetectXmtrCryptoType"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRFDetectListenerListInfo"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRFDetectClassificationReason"))
if mibBuilder.loadTexts: trpzRFDetectSuspectDeviceTrap2.setStatus('current')
if mibBuilder.loadTexts: trpzRFDetectSuspectDeviceTrap2.setDescription('This trap is sent when RF detection finds a suspect device. trpzRFDetectXmtrMacAddr is the radio MAC address from the beacon. trpzRFDetectXmtrRadioType indicates the Type of Radio used by the transmitter (suspect device). trpzRFDetectXmtrCryptoType indicates the Type of Crypto used by the transmitter (suspect device). trpzRFDetectListenerListInfo is a display string of a list of listener information. trpzRFDetectClassificationReason indicates the reason why the device is classified as suspect. Obsoletes trpzRFDetectInterferingRogueAPTrap, trpzRFDetectSuspectDeviceTrap.')
trpzClusterFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 14525, 5, 0, 70)).setObjects(("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClusterFailureReason"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClusterFailureDescription"))
if mibBuilder.loadTexts: trpzClusterFailureTrap.setStatus('current')
if mibBuilder.loadTexts: trpzClusterFailureTrap.setDescription("This trap is sent when the cluster configuration failed to apply. If trpzClusterFailureReason = 'validation-error': The validation error is reported by the receiving end of the configuration updates. The receiving end can be any AC (switch) in the mobility domain: member, secondary seed or primary seed. - Primary seed will be the receiving end of configuration updates when Primary seed is joining the cluster and Secondary seed has preempt mode enabled. - Both Secondary seed and member will be at the receiving end when Primary seed is active.")
trpzMultimediaCallFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 14525, 5, 0, 71)).setObjects(("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientMACAddress"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientAccessMode"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzPhysPortNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzApNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzAPRadioNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRadioSSID"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzMultimediaCommunicationServerID"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzMultimediaCallDirection"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzMultimediaLocalStationIp"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzMultimediaLocalStationPort"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzMultimediaLocalStationEndpointID"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzMultimediaRemoteStationIp"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzMultimediaRemoteStationPort"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzMultimediaRemoteStationEndpointID"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzMultimediaSignalingProtocol"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzMultimediaCallBandwidthAndCodec"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzMultimediaCallDataRate"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzMultimediaCallRssi"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzMultimediaCallFailureReason"))
if mibBuilder.loadTexts: trpzMultimediaCallFailureTrap.setStatus('current')
if mibBuilder.loadTexts: trpzMultimediaCallFailureTrap.setDescription('This trap is sent when a multimedia call fails.')
trpzApTunnelLimitExceededTrap = NotificationType((1, 3, 6, 1, 4, 1, 14525, 5, 0, 72)).setObjects(("TRAPEZE-NETWORKS-TRAP-MIB", "trpzDeviceSerNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzAPMACAddress"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzApNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzApTunnelLimit"))
if mibBuilder.loadTexts: trpzApTunnelLimitExceededTrap.setStatus('current')
if mibBuilder.loadTexts: trpzApTunnelLimitExceededTrap.setDescription('This trap is sent by the AP primary controller (PAM) when an AP rejects a tunnel creation request because it has already created the maximum number of tunnels it can support.')
trpzWsTunnelLimitExceededTrap = NotificationType((1, 3, 6, 1, 4, 1, 14525, 5, 0, 73)).setObjects(("TRAPEZE-NETWORKS-TRAP-MIB", "trpzWsTunnelLimit"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzWsTunnelLimitType"))
if mibBuilder.loadTexts: trpzWsTunnelLimitExceededTrap.setStatus('current')
if mibBuilder.loadTexts: trpzWsTunnelLimitExceededTrap.setDescription("This trap is sent when the AC (wireless switch) rejects a tunnel creation request because it has reached the maximum number of tunnels supported (indicated by 'trpzWsTunnelLimit'). When trpzWsTunnelLimitType = 'platform-tunnel-limit' (2) the AC has reached the maximum tunnel capacity, which depends on the platform. When trpzWsTunnelLimitType = 'ap-ws-tunnel-limit' (3) the AC has reached the AP-to-switch tunnels limit, which depends on the current situation of the AC (mobility domain, network domain, network resiliency status).")
trpzRFNoiseSourceTrap = NotificationType((1, 3, 6, 1, 4, 1, 14525, 5, 0, 74)).setObjects(("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRFNoiseSourceID"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRFNoiseSourceType"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRadioMACAddress"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRFNoiseChannel"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRFNoiseRssi"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRFNoiseDutyCycle"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRFNoiseChannelInterferenceMeasure"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRFNoiseAge"))
if mibBuilder.loadTexts: trpzRFNoiseSourceTrap.setStatus('current')
if mibBuilder.loadTexts: trpzRFNoiseSourceTrap.setDescription("This trap is sent upon the appearance of a new noise source. 'trpzRadioMACAddress' indicates the listener (the AP radio reporting the noise). A given combination of noise source ID, listener and channel should trigger this trap at most once every 15 minutes.")
trpzM2UConvNotPossibleTrap = NotificationType((1, 3, 6, 1, 4, 1, 14525, 5, 0, 75)).setObjects(("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRadioSSID"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzApNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzApName"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzM2UMulticastAddrType"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzM2UMulticastAddr"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzM2UConvNotPossibleReason"))
if mibBuilder.loadTexts: trpzM2UConvNotPossibleTrap.setStatus('current')
if mibBuilder.loadTexts: trpzM2UConvNotPossibleTrap.setDescription('This trap is sent when multicast to unicast conversion is enabled on the AP, but cannot be performed.')
trpzM2UConvAvailabilityRestoredTrap = NotificationType((1, 3, 6, 1, 4, 1, 14525, 5, 0, 76)).setObjects(("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRadioSSID"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzApNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzApName"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzM2UMulticastAddrType"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzM2UMulticastAddr"))
if mibBuilder.loadTexts: trpzM2UConvAvailabilityRestoredTrap.setStatus('current')
if mibBuilder.loadTexts: trpzM2UConvAvailabilityRestoredTrap.setDescription('This trap is sent when the multicast to unicast conversion can be resumed on the AP, after disruption.')
trpzAutoTuneSuccessTrap = NotificationType((1, 3, 6, 1, 4, 1, 14525, 5, 0, 77)).setObjects(("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRadioBand"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRadiosTunedCount"))
if mibBuilder.loadTexts: trpzAutoTuneSuccessTrap.setStatus('current')
if mibBuilder.loadTexts: trpzAutoTuneSuccessTrap.setDescription('This trap is sent when an auto-tune operation completed successfully.')
trpzAutoTuneFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 14525, 5, 0, 78)).setObjects(("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRadioBand"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzAutoTuneFailureReason"))
if mibBuilder.loadTexts: trpzAutoTuneFailureTrap.setStatus('current')
if mibBuilder.loadTexts: trpzAutoTuneFailureTrap.setDescription('This trap is sent when an auto-tune operation failed to complete.')
trpzClientDeAssociationTrap2 = NotificationType((1, 3, 6, 1, 4, 1, 14525, 5, 0, 79)).setObjects(("TRAPEZE-NETWORKS-TRAP-MIB", "trpzUserName"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientSessionId"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientMACAddress"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientIPv4Addr"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientIPv6LinkLocalAddr"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientVLANName"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientAuthServerAddrType"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientAuthServerAddr"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientAuthenProtocolType"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientAccessMode"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzPhysPortNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzApNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzApRadioIndex"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRadioSSID"))
if mibBuilder.loadTexts: trpzClientDeAssociationTrap2.setStatus('current')
if mibBuilder.loadTexts: trpzClientDeAssociationTrap2.setDescription("This trap is sent if a client de-association occurred. If trpzClientAccessMode = 'ap': trpzApNum, trpzApRadioIndex, trpzRadioSSID identify the AP/radio/BSS providing wireless service to this client before deassociation; If trpzClientAccessMode = 'wired': trpzPhysPortNum identifies the physical port on the AC used by this wired-auth client. Obsoletes trpzClientDeAssociationTrap.")
trpzClientRoamingTrap2 = NotificationType((1, 3, 6, 1, 4, 1, 14525, 5, 0, 80)).setObjects(("TRAPEZE-NETWORKS-TRAP-MIB", "trpzUserName"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientSessionId"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientMACAddress"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientIPv4Addr"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientIPv6LinkLocalAddr"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientAccessMode"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzPhysPortNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzApNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzApRadioIndex"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRadioSSID"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientRoamedFromAccessMode"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientRoamedFromPhysPortNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientRoamedFromApNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientRoamedFromRadioIndex"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientRoamedFromWsAddrType"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientRoamedFromWsAddr"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientTimeSinceLastRoam"))
if mibBuilder.loadTexts: trpzClientRoamingTrap2.setStatus('current')
if mibBuilder.loadTexts: trpzClientRoamingTrap2.setDescription("This trap is sent if a client roams from one location to another. If trpzClientAccessMode = 'ap': trpzApNum, trpzApRadioIndex, trpzRadioSSID identify the AP/radio/BSS providing wireless service to this client, after roam; If trpzClientAccessMode = 'wired': trpzPhysPortNum identifies the physical port on the AC used by this wired-auth client, after roam. Obsoletes trpzClientRoamingTrap.")
trpzClientIpAddrChangeTrap2 = NotificationType((1, 3, 6, 1, 4, 1, 14525, 5, 0, 81)).setObjects(("TRAPEZE-NETWORKS-TRAP-MIB", "trpzUserName"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientSessionId"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientMACAddress"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientIpAddrType"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientIpAddr"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientVLANName"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientSessionState"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientAuthServerAddrType"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientAuthServerAddr"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientAuthenProtocolType"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientAccessMode"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzPhysPortNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzApNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzApRadioIndex"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRadioSSID"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzUserAccessType"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzLocalId"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientIpAddrChangeReason"))
if mibBuilder.loadTexts: trpzClientIpAddrChangeTrap2.setStatus('current')
if mibBuilder.loadTexts: trpzClientIpAddrChangeTrap2.setDescription("This trap is sent when an IP address of a client changes. The most likely cases for this are when the client first connects to the network and when a new IPv6 global address is assigned to the client. The pair of objects trpzClientIpAddrType/trpzClientIpAddr indicates the type and the value of the new IP address. If trpzClientAccessMode = 'ap': trpzApNum, trpzApRadioIndex, trpzRadioSSID identify the AP/radio/BSS providing wireless service to this client at the time this trap was sent; If trpzClientAccessMode = 'wired': trpzPhysPortNum identifies the physical port on the AC used by this wired-auth client. Obsoletes trpzClientIpAddrChangeTrap.")
trpzClientDeAuthenticationTrap2 = NotificationType((1, 3, 6, 1, 4, 1, 14525, 5, 0, 82)).setObjects(("TRAPEZE-NETWORKS-TRAP-MIB", "trpzUserName"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientSessionId"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientMACAddress"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientIPv4Addr"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientIPv6LinkLocalAddr"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientVLANName"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientAuthServerAddrType"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientAuthServerAddr"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientAuthenProtocolType"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientAccessMode"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzPhysPortNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzApNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzApRadioIndex"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRadioSSID"))
if mibBuilder.loadTexts: trpzClientDeAuthenticationTrap2.setStatus('current')
if mibBuilder.loadTexts: trpzClientDeAuthenticationTrap2.setDescription("This trap is sent if a client de-authentication occurred. If trpzClientAccessMode = 'ap': trpzApNum, trpzApRadioIndex, trpzRadioSSID identify the AP/radio/BSS providing wireless service to this client at the time this trap was sent; If trpzClientAccessMode = 'wired': trpzPhysPortNum identifies the physical port on the AC used by this wired-auth client. Obsoletes trpzClientDeAuthenticationTrap.")
trpzClientDynAuthorChangeSuccessTrap2 = NotificationType((1, 3, 6, 1, 4, 1, 14525, 5, 0, 83)).setObjects(("TRAPEZE-NETWORKS-TRAP-MIB", "trpzUserName"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientSessionId"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientMACAddress"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientIPv4Addr"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientIPv6LinkLocalAddr"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientSessionState"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientDynAuthorClientAddrType"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientDynAuthorClientAddr"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientAuthenProtocolType"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientAccessMode"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzPhysPortNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzApNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzApRadioIndex"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRadioSSID"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzUserAccessType"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzLocalId"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzChangedUserParamOldValues"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzChangedUserParamNewValues"))
if mibBuilder.loadTexts: trpzClientDynAuthorChangeSuccessTrap2.setStatus('current')
if mibBuilder.loadTexts: trpzClientDynAuthorChangeSuccessTrap2.setDescription("This trap is sent when the authorization attributes for a user are dynamically changed by an authorized dynamic authorization client. If trpzClientAccessMode = 'ap': trpzApNum, trpzApRadioIndex, trpzRadioSSID identify the AP/radio/BSS providing wireless service to this client at the time this trap was sent; If trpzClientAccessMode = 'wired': trpzPhysPortNum identifies the physical port on the AC used by this wired-auth client. Obsoletes trpzClientDynAuthorChangeSuccessTrap.")
trpzClientDisconnectTrap2 = NotificationType((1, 3, 6, 1, 4, 1, 14525, 5, 0, 84)).setObjects(("TRAPEZE-NETWORKS-TRAP-MIB", "trpzUserName"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientSessionId"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientMACAddress"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientIPv4Addr"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientIPv6LinkLocalAddr"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientAccessMode"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzPhysPortNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzApNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzApRadioIndex"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRadioSSID"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzLocalId"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientDisconnectSource"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientDisconnectDescription"))
if mibBuilder.loadTexts: trpzClientDisconnectTrap2.setStatus('current')
if mibBuilder.loadTexts: trpzClientDisconnectTrap2.setDescription("This trap is sent when a client session is terminated administratively. If trpzClientAccessMode = 'ap': trpzApNum, trpzApRadioIndex, trpzRadioSSID identify the AP/radio/BSS providing wireless service to this client at the time this trap was sent; If trpzClientAccessMode = 'wired': trpzPhysPortNum identifies the physical port on the AC used by this wired-auth client. Obsoletes trpzClientDisconnectTrap.")
trpzClientClearedTrap3 = NotificationType((1, 3, 6, 1, 4, 1, 14525, 5, 0, 85)).setObjects(("TRAPEZE-NETWORKS-TRAP-MIB", "trpzUserName"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientSessionId"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientMACAddress"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientIPv4Addr"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientIPv6LinkLocalAddr"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientAccessMode"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzPhysPortNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzApNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzApRadioIndex"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRadioSSID"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientSessionElapsedSeconds"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzLocalId"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientClearedReason"))
if mibBuilder.loadTexts: trpzClientClearedTrap3.setStatus('current')
if mibBuilder.loadTexts: trpzClientClearedTrap3.setDescription("This trap is sent when a client session is cleared. If trpzClientAccessMode = 'ap': trpzApNum, trpzApRadioIndex, trpzRadioSSID identify the AP/radio/BSS providing wireless service to this client at the time this trap was sent; If trpzClientAccessMode = 'wired': trpzPhysPortNum identifies the physical port on the AC used by this wired-auth client. Obsoletes trpzClientClearedTrap, trpzClientClearedTrap2.")
trpzClientAuthorizationSuccessTrap5 = NotificationType((1, 3, 6, 1, 4, 1, 14525, 5, 0, 86)).setObjects(("TRAPEZE-NETWORKS-TRAP-MIB", "trpzUserName"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientSessionId"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientMACAddress"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientIPv4Addr"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientIPv6LinkLocalAddr"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientVLANName"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientSessionState"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientAuthServerAddrType"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientAuthServerAddr"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientAuthenProtocolType"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientAccessMode"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzPhysPortNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzApNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzApRadioIndex"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRadioSSID"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientRadioType"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzUserAccessType"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzLocalId"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientAuthorizationReason"))
if mibBuilder.loadTexts: trpzClientAuthorizationSuccessTrap5.setStatus('current')
if mibBuilder.loadTexts: trpzClientAuthorizationSuccessTrap5.setDescription("This trap is sent when a client authorizes. If trpzClientAccessMode = 'ap': trpzApNum, trpzApRadioIndex, trpzRadioSSID identify the AP/radio/BSS providing wireless service to this client at the time this trap was sent; trpzClientRadioType gives the type of radio used by this client. If trpzClientAccessMode = 'wired': trpzPhysPortNum identifies the physical port on the AC used by this wired-auth client. Obsoletes trpzClientAuthorizationSuccessTrap, trpzClientAuthorizationSuccessTrap2, trpzClientAuthorizationSuccessTrap3, trpzClientAuthorizationSuccessTrap4.")
trpzClientDeviceTypeChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 14525, 5, 0, 87)).setObjects(("TRAPEZE-NETWORKS-TRAP-MIB", "trpzUserName"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientSessionId"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientMACAddress"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientIPv4Addr"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientIPv6LinkLocalAddr"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientDeviceType"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientDeviceTypeOld"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientDeviceGroup"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientDeviceProfileName"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientVLANName"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientSessionState"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientAuthServerAddrType"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientAuthServerAddr"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientAuthenProtocolType"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientAccessMode"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzPhysPortNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzApNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzApRadioIndex"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRadioSSID"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzUserAccessType"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzLocalId"))
if mibBuilder.loadTexts: trpzClientDeviceTypeChangeTrap.setStatus('current')
if mibBuilder.loadTexts: trpzClientDeviceTypeChangeTrap.setDescription("This trap is sent when the detected device type of a client changes. The new device type is indicated by trpzClientDeviceType. trpzClientDeviceGroup indicates the group that the new device type belongs to. As of release 8.0, device detection is done only for wireless clients (trpzClientAccessMode = 'ap').")
trpzClientDeviceProfileChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 14525, 5, 0, 88)).setObjects(("TRAPEZE-NETWORKS-TRAP-MIB", "trpzUserName"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientSessionId"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientMACAddress"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientIPv4Addr"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientIPv6LinkLocalAddr"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientDeviceType"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientDeviceGroup"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientDeviceProfileName"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientDeviceProfileNameOld"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientDeviceProfileChangeReason"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientVLANName"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientSessionState"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientAuthServerAddrType"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientAuthServerAddr"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientAuthenProtocolType"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzClientAccessMode"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzPhysPortNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzApNum"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzApRadioIndex"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzRadioSSID"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzUserAccessType"), ("TRAPEZE-NETWORKS-TRAP-MIB", "trpzLocalId"))
if mibBuilder.loadTexts: trpzClientDeviceProfileChangeTrap.setStatus('current')
if mibBuilder.loadTexts: trpzClientDeviceProfileChangeTrap.setDescription("This trap is sent when the device profile for a client device changes. The new device profile is indicated by trpzClientDeviceProfileName. trpzClientDeviceProfileChangeReason indicates the reason why the device profile changed. As of release 8.0, device detection is done only for wireless clients (trpzClientAccessMode = 'ap').")
mibBuilder.exportSymbols("TRAPEZE-NETWORKS-TRAP-MIB", TrpzAutoTuneFailureReason=TrpzAutoTuneFailureReason, trpzRFDetectAdhocUserTrap=trpzRFDetectAdhocUserTrap, trpzApNonOperStatusTrap=trpzApNonOperStatusTrap, trpzApNum=trpzApNum, trpzRFDetectRogueDeviceTrap=trpzRFDetectRogueDeviceTrap, trpzLocalId=trpzLocalId, trpzMichaelMICFailure=trpzMichaelMICFailure, TrpzRadioBand=TrpzRadioBand, trpzRFDetectClientViaRogueWiredAPTrap=trpzRFDetectClientViaRogueWiredAPTrap, trpzApRejectLicenseExceededTrap=trpzApRejectLicenseExceededTrap, trpzApTunnelLimit=trpzApTunnelLimit, trpzClientClearedReason=trpzClientClearedReason, trpzMobilityDomainSecondarySeedIp=trpzMobilityDomainSecondarySeedIp, trpzClientAuthorizationReason=trpzClientAuthorizationReason, trpzClientSessionElapsedSeconds=trpzClientSessionElapsedSeconds, TrpzClientIpAddrChangeReason=TrpzClientIpAddrChangeReason, trpzRFDetectUnAuthorizedAPTrap=trpzRFDetectUnAuthorizedAPTrap, trpzClientRoamedFromAccessMode=trpzClientRoamedFromAccessMode, trpzCounterMeasurePerformerListInfo=trpzCounterMeasurePerformerListInfo, trpzMultimediaCallRssi=trpzMultimediaCallRssi, trpzClientAuthorizationSuccessTrap=trpzClientAuthorizationSuccessTrap, trpzApOperRadioStatusTrap=trpzApOperRadioStatusTrap, trpzClientIPv4Addr=trpzClientIPv4Addr, trpzClientDeAssociationTrap2=trpzClientDeAssociationTrap2, trpzClientMACAddress2=trpzClientMACAddress2, trpzApWasOperational=trpzApWasOperational, trpzRadioRssi=trpzRadioRssi, trpzClientSessionStartTime=trpzClientSessionStartTime, trpzRadioMode=trpzRadioMode, trpzWsTunnelLimitType=trpzWsTunnelLimitType, trpzConfigSaveGeneration=trpzConfigSaveGeneration, trpzMobilityDomainJoinTrap=trpzMobilityDomainJoinTrap, trpzClientAssociationFailureTrap=trpzClientAssociationFailureTrap, trpzApRadioIndex=trpzApRadioIndex, trpzClientSessionState=trpzClientSessionState, trpzRadiosTunedCount=trpzRadiosTunedCount, TrpzUserAttributeList=TrpzUserAttributeList, trpzClientIp=trpzClientIp, trpzRFDetectRogueDisappearTrap=trpzRFDetectRogueDisappearTrap, trpzClientDeviceProfileChangeTrap=trpzClientDeviceProfileChangeTrap, trpzClientDisconnectDescription=trpzClientDisconnectDescription, trpzRFDetectSpoofedMacAPTrap=trpzRFDetectSpoofedMacAPTrap, trpzDeviceFailTrap=trpzDeviceFailTrap, trpzClientIPv6LinkLocalAddr=trpzClientIPv6LinkLocalAddr, trpzTrapsV2=trpzTrapsV2, trpzClientDynAuthorChangeSuccessTrap2=trpzClientDynAuthorChangeSuccessTrap2, trpzRFNoiseChannelInterferenceMeasure=trpzRFNoiseChannelInterferenceMeasure, trpzClientAccessType=trpzClientAccessType, trpzClientDeAssociationTrap=trpzClientDeAssociationTrap, trpzMobilityDomainFailOverTrap=trpzMobilityDomainFailOverTrap, TrpzClientAuthorizationReason=TrpzClientAuthorizationReason, trpzClientRoamedFromAccessType=trpzClientRoamedFromAccessType, trpzAPRadioNum=trpzAPRadioNum, TrpzAuthenticationFailureType=TrpzAuthenticationFailureType, trpzMobilityDomainPrimarySeedIp=trpzMobilityDomainPrimarySeedIp, trpzClientAuthServerAddrType=trpzClientAuthServerAddrType, trpzClientAuthorizationSuccessTrap2=trpzClientAuthorizationSuccessTrap2, trpzDAPNum=trpzDAPNum, TrpzConfigSaveInitiatorType=TrpzConfigSaveInitiatorType, trpzClientDisconnectTrap2=trpzClientDisconnectTrap2, trpzMultimediaCallDirection=trpzMultimediaCallDirection, trpzRFNoiseSourceType=trpzRFNoiseSourceType, trpzConfigSaveInitiatorType=trpzConfigSaveInitiatorType, TrpzClientClearedReason=TrpzClientClearedReason, trpzRadioChannelWidth=trpzRadioChannelWidth, trpzOldPowerLevel=trpzOldPowerLevel, TrpzMultimediaCallFailureReason=TrpzMultimediaCallFailureReason, trpzConfigSaveInitiatorIp=trpzConfigSaveInitiatorIp, trpzAutoTuneRadioChannelChangeTrap=trpzAutoTuneRadioChannelChangeTrap, trpzConfigSaveInitiatorDetails=trpzConfigSaveInitiatorDetails, trpzRFDetectAdhocUserDisappearTrap=trpzRFDetectAdhocUserDisappearTrap, TrpzMichaelMICFailureCause=TrpzMichaelMICFailureCause, trpzClientIpAddrChangeTrap=trpzClientIpAddrChangeTrap, trpzMultimediaRemoteStationEndpointID=trpzMultimediaRemoteStationEndpointID, trpzClientAuthorizationFailureCause=trpzClientAuthorizationFailureCause, trpzRFNoiseRssi=trpzRFNoiseRssi, trpzClientSessionElapsedTime=trpzClientSessionElapsedTime, trpzClientVLANid=trpzClientVLANid, trpzMobilityDomainTimeoutTrap=trpzMobilityDomainTimeoutTrap, trpzMultimediaLocalStationEndpointID=trpzMultimediaLocalStationEndpointID, trpzRFDetectSpoofedSsidAPTrap=trpzRFDetectSpoofedSsidAPTrap, trpzApConnectSecurityType=trpzApConnectSecurityType, trpzRFDetectRogueDeviceTrap2=trpzRFDetectRogueDeviceTrap2, TrpzMultimediaSignalingProtocol=TrpzMultimediaSignalingProtocol, trpzRFDetectBlacklistedTrap=trpzRFDetectBlacklistedTrap, trpzRFDetectUnAuthorizedOuiTrap=trpzRFDetectUnAuthorizedOuiTrap, trpzClientAuthenProtocolType=trpzClientAuthenProtocolType, trpzPhysPortNum=trpzPhysPortNum, trpzClientClearedTrap3=trpzClientClearedTrap3, TrpzSessionDisconnectType=TrpzSessionDisconnectType, trpzChangedUserParamNewValues=trpzChangedUserParamNewValues, TrpzAssociationFailureType=TrpzAssociationFailureType, trpzMpMichaelMICFailure2=trpzMpMichaelMICFailure2, trpzMultimediaCallFailureReason=trpzMultimediaCallFailureReason, trpzRFNoiseSourceID=trpzRFNoiseSourceID, trpzClientClearedTrap=trpzClientClearedTrap, TrpzDot1xFailureType=TrpzDot1xFailureType, trpzClientRoamedFromPhysPortNum=trpzClientRoamedFromPhysPortNum, trpzMultimediaSignalingProtocol=trpzMultimediaSignalingProtocol, trpzMultimediaCallBandwidthAndCodec=trpzMultimediaCallBandwidthAndCodec, trpzClientAuthenticationFailureCause=trpzClientAuthenticationFailureCause, trpzDAPconnectWarningType=trpzDAPconnectWarningType, trpzClientAuthorizationFailureTrap=trpzClientAuthorizationFailureTrap, trpzApNonOperStatusTrap2=trpzApNonOperStatusTrap2, trpzDeviceSerNum=trpzDeviceSerNum, trpzClientSessionId=trpzClientSessionId, trpzClientFailureCause=trpzClientFailureCause, trpzCounterMeasureStartTrap=trpzCounterMeasureStartTrap, trpzMobilityDomainIp=trpzMobilityDomainIp, trpzClientTimeSinceLastRoam=trpzClientTimeSinceLastRoam, trpzClusterFailureTrap=trpzClusterFailureTrap, trpzMultimediaCallFailureTrap=trpzMultimediaCallFailureTrap, trpzDeviceModel=trpzDeviceModel, trpzClientDeviceType=trpzClientDeviceType, trpzRadioPowerChangeReason=trpzRadioPowerChangeReason, trpzApOperRadioStatusTrap3=trpzApOperRadioStatusTrap3, trpzM2UConvNotPossibleReason=trpzM2UConvNotPossibleReason, trpzRFDetectSuspectDeviceTrap=trpzRFDetectSuspectDeviceTrap, trpzM2UMulticastAddr=trpzM2UMulticastAddr, trpzClientIpAddrChangeReason=trpzClientIpAddrChangeReason, trpzClusterFailureDescription=trpzClusterFailureDescription, trpzRFDetectRogueAPTrap=trpzRFDetectRogueAPTrap, trpzClientAuthenticationSuccessTrap=trpzClientAuthenticationSuccessTrap, trpzRFDetectClassificationChangeTrap=trpzRFDetectClassificationChangeTrap, TrpzBlacklistingCause=TrpzBlacklistingCause, trpzRFDetectXmtrCryptoType=trpzRFDetectXmtrCryptoType, trpzRadioType=trpzRadioType, trpzWsTunnelLimit=trpzWsTunnelLimit, trpzClientRoamedFromWsAddrType=trpzClientRoamedFromWsAddrType, trpzClientDynAuthorChangeSuccessTrap=trpzClientDynAuthorChangeSuccessTrap, trpzClientDot1xFailureTrap=trpzClientDot1xFailureTrap, trpzClientAuthorizationSuccessTrap4=trpzClientAuthorizationSuccessTrap4, trpzMpMichaelMICFailure=trpzMpMichaelMICFailure, trpzMichaelMICFailureCause=trpzMichaelMICFailureCause, trpzClientAssociationSuccessTrap=trpzClientAssociationSuccessTrap, trpzApName=trpzApName, trpzApTransition=trpzApTransition, trpzApTimeoutTrap=trpzApTimeoutTrap, trpzApMgrChangeReason=trpzApMgrChangeReason, trpzClusterFailureReason=trpzClusterFailureReason, trpzClientRoamedFromApNum=trpzClientRoamedFromApNum, trpzRFDetectRogueAPMacAddr=trpzRFDetectRogueAPMacAddr, trpzOldChannelNum=trpzOldChannelNum, trpzClientDisconnectTrap=trpzClientDisconnectTrap, trpzRFDetectRogueDeviceDisappearTrap=trpzRFDetectRogueDeviceDisappearTrap, trpzRFDetectClientViaRogueWiredAPTrap2=trpzRFDetectClientViaRogueWiredAPTrap2, trpzClientAuthenticationFailureTrap=trpzClientAuthenticationFailureTrap, trpzM2UConvAvailabilityRestoredTrap=trpzM2UConvAvailabilityRestoredTrap, trpzClientLocationPolicyIndex=trpzClientLocationPolicyIndex, trpzClientRoamedFromRadioNum=trpzClientRoamedFromRadioNum, trpzTrapMib=trpzTrapMib, trpzBlacklistingRemainingTime=trpzBlacklistingRemainingTime, trpzClientDeviceTypeOld=trpzClientDeviceTypeOld, trpzClientRoamingTrap=trpzClientRoamingTrap, trpzDeviceId=trpzDeviceId, trpzApMgrOldIp=trpzApMgrOldIp, trpzRadioBand=trpzRadioBand, trpzRFNoiseChannel=trpzRFNoiseChannel, TrpzClusterFailureReason=TrpzClusterFailureReason, trpzChannelChangeReason=trpzChannelChangeReason, trpzConfigSaveFileName=trpzConfigSaveFileName, trpzClientDynAuthorClientAddrType=trpzClientDynAuthorClientAddrType, trpzRFDetectListenerListInfo=trpzRFDetectListenerListInfo, trpzMobilityDomainResiliencyStatusTrap=trpzMobilityDomainResiliencyStatusTrap, trpzRFDetectSuspectDeviceTrap2=trpzRFDetectSuspectDeviceTrap2, trpzM2UConvNotPossibleTrap=trpzM2UConvNotPossibleTrap, trpzClientRoamedFromWsAddr=trpzClientRoamedFromWsAddr, trpzWsTunnelLimitExceededTrap=trpzWsTunnelLimitExceededTrap, trpzClientAuthorizationSuccessTrap5=trpzClientAuthorizationSuccessTrap5, trpzClientAccessMode=trpzClientAccessMode, TrpzAuthorizationFailureType=TrpzAuthorizationFailureType, trpzRFDetectXmtrMacAddr=trpzRFDetectXmtrMacAddr, trpzRFNoiseSourceTrap=trpzRFNoiseSourceTrap, trpzClientRadioType=trpzClientRadioType, trpzRFDetectXmtrRadioType=trpzRFDetectXmtrRadioType, trpzRadioSSID=trpzRadioSSID, trpzApTunnelLimitExceededTrap=trpzApTunnelLimitExceededTrap, trpzClientDeAuthenticationTrap=trpzClientDeAuthenticationTrap, trpzAutoTuneRadioPowerChangeTrap=trpzAutoTuneRadioPowerChangeTrap, trpzConfigurationSavedTrap=trpzConfigurationSavedTrap, trpzClientIpAddr=trpzClientIpAddr, trpzClientMACAddress=trpzClientMACAddress, trpzRadioBSSID=trpzRadioBSSID, trpzClientIpAddrChangeTrap2=trpzClientIpAddrChangeTrap2, trpzClientVLANName=trpzClientVLANName, TrpzClientDeviceProfileChangeReason=TrpzClientDeviceProfileChangeReason, trpzRFDetectDoSTrap=trpzRFDetectDoSTrap, trpzClientVLANtag=trpzClientVLANtag, trpzApOperRadioStatusTrap2=trpzApOperRadioStatusTrap2, trpzChangedUserParamOldValues=trpzChangedUserParamOldValues, trpzMultimediaCommunicationServerID=trpzMultimediaCommunicationServerID, trpzClientRoamingTrap2=trpzClientRoamingTrap2, trpzClientIpAddrType=trpzClientIpAddrType, trpzClientDynAuthorClientAddr=trpzClientDynAuthorClientAddr, trpzClientDot1xState=trpzClientDot1xState, trpzClientRoamedFromRadioIndex=trpzClientRoamedFromRadioIndex, trpzAPMACAddress=trpzAPMACAddress, TrpzM2UConvNotPossibleReason=TrpzM2UConvNotPossibleReason, trpzSourceWsIp=trpzSourceWsIp, trpzClientDeviceTypeChangeTrap=trpzClientDeviceTypeChangeTrap, trpzUserParams=trpzUserParams, trpzAPAccessType=trpzAPAccessType, trpzApAttachType=trpzApAttachType, trpzClientDeviceProfileName=trpzClientDeviceProfileName, trpzRsaPubKeyFingerPrint=trpzRsaPubKeyFingerPrint, trpzApMgrNewIp=trpzApMgrNewIp, trpzRFDetectSuspectDeviceDisappearTrap=trpzRFDetectSuspectDeviceDisappearTrap, trpzClientDynAuthorClientIp=trpzClientDynAuthorClientIp, trpzRFDetectInterferingRogueAPTrap=trpzRFDetectInterferingRogueAPTrap, trpzMultimediaRemoteStationPort=trpzMultimediaRemoteStationPort, trpzAutoTuneFailureReason=trpzAutoTuneFailureReason, TrpzWsTunnelLimitType=TrpzWsTunnelLimitType, trpzRFDetectUnAuthorizedSsidTrap=trpzRFDetectUnAuthorizedSsidTrap, trpzClientDynAuthorChangeFailureTrap=trpzClientDynAuthorChangeFailureTrap, trpzClientDeviceProfileNameOld=trpzClientDeviceProfileNameOld, PYSNMP_MODULE_ID=trpzTrapMib, TrpzRFDetectDoSType=TrpzRFDetectDoSType, trpzClientAssociationFailureCause=trpzClientAssociationFailureCause, trpzClientRoamedFromPortNum=trpzClientRoamedFromPortNum, trpzClientRoamedFromWsIp=trpzClientRoamedFromWsIp, trpzMobilityDomainFailBackTrap=trpzMobilityDomainFailBackTrap, trpzRFDetectClassificationReason=trpzRFDetectClassificationReason, trpzUserAccessType=trpzUserAccessType, TrpzApMgrChangeReason=TrpzApMgrChangeReason, trpzMultimediaRemoteStationIp=trpzMultimediaRemoteStationIp, trpzPoEFailTrap=trpzPoEFailTrap, trpzRFDetectDoSPortTrap=trpzRFDetectDoSPortTrap, trpzM2UMulticastAddrType=trpzM2UMulticastAddrType, TrpzMobilityDomainResiliencyStatus=TrpzMobilityDomainResiliencyStatus, trpzRadioPowerChangeDescription=trpzRadioPowerChangeDescription, trpzPortNum=trpzPortNum, trpzRFDetectDoSType=trpzRFDetectDoSType, trpzClientAuthorizationSuccessTrap3=trpzClientAuthorizationSuccessTrap3, trpzRFDetectClientViaRogueWiredAPTrap3=trpzRFDetectClientViaRogueWiredAPTrap3, trpzApServiceAvailability=trpzApServiceAvailability, trpzNewChannelNum=trpzNewChannelNum, trpzRFDetectInterferingRogueDisappearTrap=trpzRFDetectInterferingRogueDisappearTrap, trpzClientAuthServerIp=trpzClientAuthServerIp, trpzMultimediaLocalStationIp=trpzMultimediaLocalStationIp, trpzRFNoiseAge=trpzRFNoiseAge, trpzDeviceOkayTrap=trpzDeviceOkayTrap, trpzNewPowerLevel=trpzNewPowerLevel, trpzCounterMeasureStopTrap=trpzCounterMeasureStopTrap, trpzAPBootTrap=trpzAPBootTrap, trpzDAPConnectWarningTrap=trpzDAPConnectWarningTrap, trpzMultimediaCallDataRate=trpzMultimediaCallDataRate, trpzClientClearedTrap2=trpzClientClearedTrap2, trpzClientDeAuthenticationTrap2=trpzClientDeAuthenticationTrap2, trpzClientFailureCauseDescription=trpzClientFailureCauseDescription, trpzClientDot1xFailureCause=trpzClientDot1xFailureCause, trpzRadioMimoState=trpzRadioMimoState, trpzMultimediaLocalStationPort=trpzMultimediaLocalStationPort, trpzApPortOrDapNum=trpzApPortOrDapNum, trpzClientDeviceGroup=trpzClientDeviceGroup)
mibBuilder.exportSymbols("TRAPEZE-NETWORKS-TRAP-MIB", TrpzMultimediaCallDirection=TrpzMultimediaCallDirection, trpzClientRoamedFromDAPNum=trpzClientRoamedFromDAPNum, trpzClientDisconnectSource=trpzClientDisconnectSource, trpzClientAuthServerAddr=trpzClientAuthServerAddr, trpzApFailDetail=trpzApFailDetail, trpzClientDeviceProfileChangeReason=trpzClientDeviceProfileChangeReason, trpzRadioMACAddress=trpzRadioMACAddress, trpzApManagerChangeTrap=trpzApManagerChangeTrap, trpzBlacklistingCause=trpzBlacklistingCause, trpzRadioConfigState=trpzRadioConfigState, trpzNumLicensedActiveAPs=trpzNumLicensedActiveAPs, trpzUserName=trpzUserName, trpzRFNoiseDutyCycle=trpzRFNoiseDutyCycle, trpzAutoTuneSuccessTrap=trpzAutoTuneSuccessTrap, trpzAutoTuneFailureTrap=trpzAutoTuneFailureTrap, trpzMobilityDomainResiliencyStatus=trpzMobilityDomainResiliencyStatus)
