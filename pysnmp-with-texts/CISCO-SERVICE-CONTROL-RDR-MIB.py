#
# PySNMP MIB module CISCO-SERVICE-CONTROL-RDR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-SERVICE-CONTROL-RDR-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:11:48 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
entPhysicalName, entPhysicalIndex = mibBuilder.importSymbols("ENTITY-MIB", "entPhysicalName", "entPhysicalIndex")
InetAddressType, InetPortNumber, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetPortNumber", "InetAddress")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Counter64, Unsigned32, Integer32, iso, TimeTicks, Bits, ObjectIdentity, IpAddress, MibIdentifier, Counter32, NotificationType, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Unsigned32", "Integer32", "iso", "TimeTicks", "Bits", "ObjectIdentity", "IpAddress", "MibIdentifier", "Counter32", "NotificationType", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32")
TextualConvention, DisplayString, TimeStamp, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "TimeStamp", "TruthValue")
ciscoServiceControlRdrMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 637))
ciscoServiceControlRdrMIB.setRevisions(('2007-08-14 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoServiceControlRdrMIB.setRevisionsDescriptions(('Initial version of this MIB module',))
if mibBuilder.loadTexts: ciscoServiceControlRdrMIB.setLastUpdated('200708140000Z')
if mibBuilder.loadTexts: ciscoServiceControlRdrMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoServiceControlRdrMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-excelsior-dev@cisco.com')
if mibBuilder.loadTexts: ciscoServiceControlRdrMIB.setDescription("This MIB module defines objects describing statistics and configuration relating to the Raw Data Record Formatter running on a service control entity. The Raw Data Record (RDR) formatter is a component implemented by the service control entity that gathers raw data records produced by the entity and delivers them to external entities as reports. The external entities are called RDR destinations or RDR collectors. The RDR formatter can be configured to send reports to one or multiple destinations. RDR formatter can group RDRs into potentially four categories. RDR mapping to the categories is done by the client application or the user and reflects different logical destinations or purposes. For example the application may map Quota related RDRs to category 1, and Transaction related RDRs to category 2. The user can configure these categories to different destinations and assign them with different priorities. Each category has a separate queue for forwarding the RDRs and has seperate counters for gathering of statistics (sent, dropped, queued etc.). An RDR can belong to any one of the category as chosen by the user or client application. The RDR formatter supports multiple destinations identified by IP address and a port number. Each destination is assigned with a priority for each of the categories. Priority is a number in the range of 1-100, with 100 being the highest priority. The priorities are effective only when the formatter is in forwarding mode 'Redundancy' and are configured during destination configuration (while assigning the destination with categories). For example we have destination A configured with category 1 which is configured with priority 100, destination B configured with category 1 and priority 80 and destination C with category 1 and priority 90. When in redundancy mode the formatter will set the active destination for a category to be the destination with the highest priority. For category 1 the active destination will be A. If destination A goes down then the next destination selected by the formatter as active is destination C.")
ciscoSCRdrMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 637, 0))
ciscoSCRdrMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 637, 1))
ciscoSCRdrMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 637, 2))
cscRdrFormatterTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 637, 1, 1), )
if mibBuilder.loadTexts: cscRdrFormatterTable.setStatus('current')
if mibBuilder.loadTexts: cscRdrFormatterTable.setDescription('This table lists the operational information and aggregated statistics for the RDR formatter of a service control entity.')
cscRdrFormatterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 637, 1, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: cscRdrFormatterEntry.setStatus('current')
if mibBuilder.loadTexts: cscRdrFormatterEntry.setDescription('This entry contains the operational data and global counters for the RDR formatter associated with the service control entity identified by its assigned entPhysicalIndex. An entry exists for each corresponding row in the entPhysicalTable having one of the following values assigned to entPhysicalVendorType: - cevChassisSCE2000 - cevChassisSCE1000 - cevNmeApaModule.')
cscRdrFormatterEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 637, 1, 1, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cscRdrFormatterEnable.setStatus('current')
if mibBuilder.loadTexts: cscRdrFormatterEnable.setDescription('This object specifies whether the RDR formatter is enabled or disabled. When the RDR formatter is enabled, it sends the records it gets from the traffic processors to the RDR destination as defined in the cscRdrDestTable.')
cscRdrFormatterNumSentReports = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 637, 1, 1, 1, 2), Counter32()).setUnits('reports').setMaxAccess("readonly")
if mibBuilder.loadTexts: cscRdrFormatterNumSentReports.setStatus('current')
if mibBuilder.loadTexts: cscRdrFormatterNumSentReports.setDescription('This object indicates the number of reports sent by the RDR formatter. Discontinuities in the value of this counter can occur at disabling/enabling of the RDR formatter, and at other times as indicated by the value of cscRdrCounterDiscontinuityTime.')
cscRdrFormatterNumDiscardedReports = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 637, 1, 1, 1, 3), Counter32()).setUnits('reports').setMaxAccess("readonly")
if mibBuilder.loadTexts: cscRdrFormatterNumDiscardedReports.setStatus('current')
if mibBuilder.loadTexts: cscRdrFormatterNumDiscardedReports.setDescription('This object indicates the number of reports discarded by the RDR formatter due to insufficient resources or unavailibility of the destination. Discontinuities in the value of this counter can occur at disabling/enabling of the RDR formatter, and at other times as indicated by the value of cscRdrCounterDiscontinuityTime.')
cscRdrFormatterReportRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 637, 1, 1, 1, 4), Gauge32()).setUnits('reports per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cscRdrFormatterReportRate.setStatus('current')
if mibBuilder.loadTexts: cscRdrFormatterReportRate.setDescription('This object indicates the rate at which the RDR formatter is currently sending reports to all of the destinations.')
cscRdrFormatterReportRatePeak = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 637, 1, 1, 1, 5), Gauge32()).setUnits('reports per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cscRdrFormatterReportRatePeak.setStatus('current')
if mibBuilder.loadTexts: cscRdrFormatterReportRatePeak.setDescription('This object indicates the maximum rate at which the RDR formatter sent reports to all of the destinations since sysUpTime, if cscRdrCounterDiscontinuityTime is zero. If cscRdrCounterDiscontinuityTime has a non zero value, the maximum rate is determined from this value.')
cscRdrFormatterReportRatePeakTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 637, 1, 1, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cscRdrFormatterReportRatePeakTime.setStatus('current')
if mibBuilder.loadTexts: cscRdrFormatterReportRatePeakTime.setDescription('This object indicates the time elapsed since the cscRdrFormatterReportRatePeak value occured.')
cscRdrFormatterProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 637, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("rdrv1", 2), ("netflowV9", 3))).clone('rdrv1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cscRdrFormatterProtocol.setStatus('current')
if mibBuilder.loadTexts: cscRdrFormatterProtocol.setDescription("This object specifies the RDR protocol currently used by the RDR formatter. 'other' : The RDR formatter is using a protocol not recognized by this revision of the MIB. 'rdrv1' : RDR protocol version 1 'netflowV9' : NetFlow ver 9")
cscRdrFormatterForwardingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 637, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("redundancy", 2), ("simpleLoadBalancing", 3), ("multicast", 4))).clone('redundancy')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cscRdrFormatterForwardingMode.setStatus('current')
if mibBuilder.loadTexts: cscRdrFormatterForwardingMode.setDescription("This object specifies the mode by which the RDR formatter sends the reports to its destinations. 'other' : The RDR formatter is using a protocol not recognized by this revision of the MIB. 'redundancy' : The reports are sent to the primary (active destination) and all of the other destinations are in standby. 'simpleLoadBalancing' : The reports are sent to one destination at a time in a round robin manner. 'multicast' : The reports are sent to all of the destinations.")
cscRdrDestTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 637, 1, 2), )
if mibBuilder.loadTexts: cscRdrDestTable.setStatus('current')
if mibBuilder.loadTexts: cscRdrDestTable.setDescription('This table lists the addresses of the configured RDR destination servers and the corresponding connection status for each destination. The RDR formatter sends reports to one or more configured destinations that have a connection to the RDR formatter. This table also shows the current connection status of each destination.')
cscRdrDestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 637, 1, 2, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-SERVICE-CONTROL-RDR-MIB", "cscRdrDestIndex"))
if mibBuilder.loadTexts: cscRdrDestEntry.setStatus('current')
if mibBuilder.loadTexts: cscRdrDestEntry.setDescription("This entry contains the operational data and global counters for a connection between the RDR formatter destination and the RDR formatter associated with the service control entity identified by its assigned entPhysicalIndex. An entry exists for each corresponding row in the entPhysicalTable having one of the following values assigned to entPhysicalVendorType: - cevChassisSCE2000 - cevChassisSCE1000 - cevNmeApaModule. Each connection between RDR formatter and RDR destination is uniquely identified by 'cscRdrDestIndex'.")
cscRdrDestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 637, 1, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: cscRdrDestIndex.setStatus('current')
if mibBuilder.loadTexts: cscRdrDestIndex.setDescription('A monotonically increasing integer for the sole purpose of indexing RDR destinations. When it reaches the maximum value the agent flushes the table and wraps the value back to 1.')
cscRdrDestInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 637, 1, 2, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cscRdrDestInetAddressType.setStatus('current')
if mibBuilder.loadTexts: cscRdrDestInetAddressType.setDescription('This object indicates the type of Internet address by which the RDR destination server is reachable.')
cscRdrDestInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 637, 1, 2, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cscRdrDestInetAddress.setStatus('current')
if mibBuilder.loadTexts: cscRdrDestInetAddress.setDescription('This object indicates the RDR destination server IP Address.')
cscRdrDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 637, 1, 2, 1, 4), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cscRdrDestPort.setStatus('current')
if mibBuilder.loadTexts: cscRdrDestPort.setDescription('This object indicates the port on which the RDR destination server listens.')
cscRdrDestPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 637, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cscRdrDestPriority.setStatus('current')
if mibBuilder.loadTexts: cscRdrDestPriority.setDescription('This object indicates the priority given to the RDR destination server. The RDR formatter determines the priority of a destination by the value of entPhysicalIndex and the RDR category of the destination. RDR formatter assigns the highest priority to the destination which has the same value of entPhysicalIndex and RDR category as that of the RDR formatter. The RDR formatter activates the destination server which is reachable and with the highest priority.')
cscRdrDestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 637, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("active", 2), ("standby", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cscRdrDestStatus.setStatus('current')
if mibBuilder.loadTexts: cscRdrDestStatus.setDescription("This object indicates the status of this RDR destination. 'other' : None of the following. 'active' : The reports are sent to this destination. 'standby': This destination is a backup. Only one RDR destination can be 'active' if the cscRdrFormatterForwardingMode is set to either 'redundancy' or 'simpleLoadBalancing'. Multiple RDR destinations can be in 'active' state when cscRdrFormatterForwardingMode is set to 'multicast'.")
cscRdrDestConnectionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 637, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("up", 2), ("down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cscRdrDestConnectionStatus.setStatus('current')
if mibBuilder.loadTexts: cscRdrDestConnectionStatus.setDescription("This object indicates the status of the connection between the RDR formatter and this destination. 'other' : The connection is in some unknown state. 'up' : The RDR formatter can reach this destination. 'down' : The RDR formatter cannot reach this destination.")
cscRdrDestNumSentReports = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 637, 1, 2, 1, 8), Counter32()).setUnits('reports').setMaxAccess("readonly")
if mibBuilder.loadTexts: cscRdrDestNumSentReports.setStatus('current')
if mibBuilder.loadTexts: cscRdrDestNumSentReports.setDescription('This object indicates the number of reports sent by the RDR formatter to this destination. Discontinuities in the value of this counter can occur at disabling/enabling of the RDR formatter, and at other times as indicated by the value of cscRdrCounterDiscontinuityTime.')
cscRdrDestNumDiscardedReports = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 637, 1, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cscRdrDestNumDiscardedReports.setStatus('current')
if mibBuilder.loadTexts: cscRdrDestNumDiscardedReports.setDescription('This object indicates the number of reports dropped by the RDR formatter for this destination. Discontinuities in the value of this counter can occur at disabling/enabling of the RDR formatter, and at other times as indicated by the value of cscRdrCounterDiscontinuityTime.')
cscRdrDestReportRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 637, 1, 2, 1, 10), Gauge32()).setUnits('reports per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cscRdrDestReportRate.setStatus('current')
if mibBuilder.loadTexts: cscRdrDestReportRate.setDescription('This object indicates the rate at which the RDR formatter is currently sending reports to this destinations.')
cscRdrCategoryTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 637, 1, 3), )
if mibBuilder.loadTexts: cscRdrCategoryTable.setStatus('current')
if mibBuilder.loadTexts: cscRdrCategoryTable.setDescription('This table describes the operational values and aggregated statistics of the different categories of the RDR Formatter.')
cscRdrCategoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 637, 1, 3, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-SERVICE-CONTROL-RDR-MIB", "cscRdrCategoryIndex"))
if mibBuilder.loadTexts: cscRdrCategoryEntry.setStatus('current')
if mibBuilder.loadTexts: cscRdrCategoryEntry.setDescription("This entry contains the operational data and global counters for a category configured on a RDR formatter of a service control entity identified by the entPhysicalIndex in the ENTITY-MIB with the entPhysicalVendorType set to any of the following values: 'cevChassisSCE2000' 'cevChassisSCE1000' 'cevNmeApaModule'.")
cscRdrCategoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 637, 1, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: cscRdrCategoryIndex.setStatus('current')
if mibBuilder.loadTexts: cscRdrCategoryIndex.setDescription('This object indicates the category number, index to the table.')
cscRdrCategoryID = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 637, 1, 3, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cscRdrCategoryID.setStatus('current')
if mibBuilder.loadTexts: cscRdrCategoryID.setDescription('This object indicates the unique id assigned to this RDR category by the RDR formatter.')
cscRdrCategoryName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 637, 1, 3, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cscRdrCategoryName.setStatus('current')
if mibBuilder.loadTexts: cscRdrCategoryName.setDescription('This object indicates the human readable name assigned to this RDR category by the RDR formatter. The client application provides the RDR formatter with the value of this object.')
cscRdrCategoryNumSentReports = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 637, 1, 3, 1, 4), Counter32()).setUnits('reports').setMaxAccess("readonly")
if mibBuilder.loadTexts: cscRdrCategoryNumSentReports.setStatus('current')
if mibBuilder.loadTexts: cscRdrCategoryNumSentReports.setDescription('This object indicates the number of RDR reports sent over this category. Discontinuities in the value of this counter can occur at disabling/enabling of the RDR formatter, and at other times as indicated by the value of cscRdrCounterDiscontinuityTime.')
cscRdrCategoryNumDiscardedReports = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 637, 1, 3, 1, 5), Counter32()).setUnits('reports').setMaxAccess("readonly")
if mibBuilder.loadTexts: cscRdrCategoryNumDiscardedReports.setStatus('current')
if mibBuilder.loadTexts: cscRdrCategoryNumDiscardedReports.setDescription('This object indicates the number of RDR reports dropped for this category. Discontinuities in the value of this counter can occur at disabling/enabling of the RDR formatter, and at other times as indicated by the value of cscRdrCounterDiscontinuityTime.')
cscRdrCategoryReportRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 637, 1, 3, 1, 6), Gauge32()).setUnits('reports per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cscRdrCategoryReportRate.setStatus('current')
if mibBuilder.loadTexts: cscRdrCategoryReportRate.setDescription('This object indicates the rate at which the RDR formatter is currently sending reports over this category.')
cscRdrCategoryNumQueuedReports = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 637, 1, 3, 1, 7), Gauge32()).setUnits('reports').setMaxAccess("readonly")
if mibBuilder.loadTexts: cscRdrCategoryNumQueuedReports.setStatus('current')
if mibBuilder.loadTexts: cscRdrCategoryNumQueuedReports.setDescription('This object indicates the number of pending RDR reports within this category.')
cscRdrCategoryDestTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 637, 1, 4), )
if mibBuilder.loadTexts: cscRdrCategoryDestTable.setStatus('current')
if mibBuilder.loadTexts: cscRdrCategoryDestTable.setDescription('This table lists the operational data for RDR destination servers for each RDR category for a service control entity.')
cscRdrCategoryDestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 637, 1, 4, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-SERVICE-CONTROL-RDR-MIB", "cscRdrCategoryIndex"), (0, "CISCO-SERVICE-CONTROL-RDR-MIB", "cscRdrDestPort"), (0, "CISCO-SERVICE-CONTROL-RDR-MIB", "cscRdrDestInetAddress"))
if mibBuilder.loadTexts: cscRdrCategoryDestEntry.setStatus('current')
if mibBuilder.loadTexts: cscRdrCategoryDestEntry.setDescription("This entry contains the operational data for a category of RDR formatter for a destination server of the service control entity identified by the entPhysicalIndex in the ENTITY-MIB with the entPhysicalVendorType set to any of the following values: 'cevChassisSCE2000' 'cevChassisSCE1000' 'cevNmeApaModule'.")
cscRdrCategoryDestPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 637, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cscRdrCategoryDestPriority.setStatus('current')
if mibBuilder.loadTexts: cscRdrCategoryDestPriority.setDescription('This object indicates the priority configured for this category on the RDR destination server. The priority is determined by entPhysicalIndex and the category of the destination server.')
cscRdrCategoryDestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 637, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("active", 2), ("standby", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cscRdrCategoryDestStatus.setStatus('current')
if mibBuilder.loadTexts: cscRdrCategoryDestStatus.setDescription("This object indicates the status of this RDR destination for this category. 'other' : None of the following. 'active' : The reports are sent to this destination. 'standby': This destination is a backup. Only one RDR destination can be 'active' if the cscRdrFormatterForwardingMode is set to either 'redundancy' or 'simpleLoadBalancing'. Multiple RDR destinations can be in 'active' state when cscRdrFormatterForwardingMode is set to 'multicast'.")
cscRdrNotifsConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 637, 1, 5))
cscRdrCounterDiscontinuityTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 637, 1, 6), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cscRdrCounterDiscontinuityTime.setStatus('current')
if mibBuilder.loadTexts: cscRdrCounterDiscontinuityTime.setDescription('The value of service up time on the most recent occasion at which any one or more of the RDR counters suffered a discontinuity. If no such discontinuities have occurred since the last re-initialization of the local management subsystem, then this object contains a zero value.')
cscRdrReportsEnableNotifs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 637, 1, 5, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cscRdrReportsEnableNotifs.setStatus('current')
if mibBuilder.loadTexts: cscRdrReportsEnableNotifs.setDescription("This object controls whether the system produces notifications defined in thi MIB. A 'false' value will prevent the notifications from being generated by this system.")
cscRdrCategoryStoppedDiscardingReportsTrap = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 637, 0, 1)).setObjects(("ENTITY-MIB", "entPhysicalName"), ("CISCO-SERVICE-CONTROL-RDR-MIB", "cscRdrCategoryID"))
if mibBuilder.loadTexts: cscRdrCategoryStoppedDiscardingReportsTrap.setStatus('current')
if mibBuilder.loadTexts: cscRdrCategoryStoppedDiscardingReportsTrap.setDescription('The system generates this notification to indicate that the system has recovered from congestion or unavailibility of the RDR collector identified by the value of cscRdrCategoryID and has stopped discarding reports being sent to this RDR collector.')
cscRdrCategoryDiscardingReportsTrap = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 637, 0, 2)).setObjects(("ENTITY-MIB", "entPhysicalName"), ("CISCO-SERVICE-CONTROL-RDR-MIB", "cscRdrCategoryID"))
if mibBuilder.loadTexts: cscRdrCategoryDiscardingReportsTrap.setStatus('current')
if mibBuilder.loadTexts: cscRdrCategoryDiscardingReportsTrap.setDescription('The system generates this notification to indicate that the system has either encountered congestion or unavailibility of the RDR collector with the category identified by the value of cscRdrCategoryID and has started discarding reports destined to this collector. The value of cscRdrCategoryNumReportsDiscarded indicates the number of discarded reports.')
cscRdrNoActiveConnectionTrap = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 637, 0, 3)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: cscRdrNoActiveConnectionTrap.setStatus('current')
if mibBuilder.loadTexts: cscRdrNoActiveConnectionTrap.setDescription('The system generates this notification to indicate that there is no active connection between the RDR formatter and any collector.')
cscRdrConnectionStatusDownTrap = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 637, 0, 4)).setObjects(("ENTITY-MIB", "entPhysicalName"), ("CISCO-SERVICE-CONTROL-RDR-MIB", "cscRdrDestStatus"), ("CISCO-SERVICE-CONTROL-RDR-MIB", "cscRdrDestInetAddress"), ("CISCO-SERVICE-CONTROL-RDR-MIB", "cscRdrDestPort"))
if mibBuilder.loadTexts: cscRdrConnectionStatusDownTrap.setStatus('current')
if mibBuilder.loadTexts: cscRdrConnectionStatusDownTrap.setDescription("The system generates this notification to indicate that a connection to destination has transitioned to the 'down' state.")
cscRdrActiveConnectionTrap = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 637, 0, 5)).setObjects(("ENTITY-MIB", "entPhysicalName"), ("CISCO-SERVICE-CONTROL-RDR-MIB", "cscRdrDestInetAddress"), ("CISCO-SERVICE-CONTROL-RDR-MIB", "cscRdrDestPort"))
if mibBuilder.loadTexts: cscRdrActiveConnectionTrap.setStatus('current')
if mibBuilder.loadTexts: cscRdrActiveConnectionTrap.setDescription('The system generates this notification to indicate that a connection to the destination address cscRdrDestInetAddress has become active on TCP port cscRdrDestPort.')
cscRdrConnectionStatusUpTrap = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 637, 0, 6)).setObjects(("ENTITY-MIB", "entPhysicalName"), ("CISCO-SERVICE-CONTROL-RDR-MIB", "cscRdrDestStatus"), ("CISCO-SERVICE-CONTROL-RDR-MIB", "cscRdrDestInetAddress"), ("CISCO-SERVICE-CONTROL-RDR-MIB", "cscRdrDestPort"))
if mibBuilder.loadTexts: cscRdrConnectionStatusUpTrap.setStatus('current')
if mibBuilder.loadTexts: cscRdrConnectionStatusUpTrap.setDescription("The system generates this notification to indicate that a connection to the destination address cscRdrDestInetAddress has become transitioned to 'up' state on TCP port cscRdrDestPort.")
cscRdrMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 637, 2, 1))
cscRdrMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 637, 2, 2))
cscRdrCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 637, 2, 1, 1)).setObjects(("CISCO-SERVICE-CONTROL-RDR-MIB", "cscRdrObjectGroup"), ("CISCO-SERVICE-CONTROL-RDR-MIB", "cscRdrNotificationGroup"), ("CISCO-SERVICE-CONTROL-RDR-MIB", "cscRdrCounterDiscontinuityGroup"), ("CISCO-SERVICE-CONTROL-RDR-MIB", "cscRdrNotifsControlGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cscRdrCompliance = cscRdrCompliance.setStatus('current')
if mibBuilder.loadTexts: cscRdrCompliance.setDescription('The compliance statement for SNMP Agents which implement this MIB.')
cscRdrObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 637, 2, 2, 1)).setObjects(("CISCO-SERVICE-CONTROL-RDR-MIB", "cscRdrFormatterEnable"), ("CISCO-SERVICE-CONTROL-RDR-MIB", "cscRdrFormatterNumSentReports"), ("CISCO-SERVICE-CONTROL-RDR-MIB", "cscRdrFormatterNumDiscardedReports"), ("CISCO-SERVICE-CONTROL-RDR-MIB", "cscRdrFormatterReportRate"), ("CISCO-SERVICE-CONTROL-RDR-MIB", "cscRdrFormatterProtocol"), ("CISCO-SERVICE-CONTROL-RDR-MIB", "cscRdrFormatterForwardingMode"), ("CISCO-SERVICE-CONTROL-RDR-MIB", "cscRdrDestInetAddressType"), ("CISCO-SERVICE-CONTROL-RDR-MIB", "cscRdrDestInetAddress"), ("CISCO-SERVICE-CONTROL-RDR-MIB", "cscRdrDestPort"), ("CISCO-SERVICE-CONTROL-RDR-MIB", "cscRdrDestPriority"), ("CISCO-SERVICE-CONTROL-RDR-MIB", "cscRdrDestStatus"), ("CISCO-SERVICE-CONTROL-RDR-MIB", "cscRdrDestConnectionStatus"), ("CISCO-SERVICE-CONTROL-RDR-MIB", "cscRdrDestNumSentReports"), ("CISCO-SERVICE-CONTROL-RDR-MIB", "cscRdrDestNumDiscardedReports"), ("CISCO-SERVICE-CONTROL-RDR-MIB", "cscRdrDestReportRate"), ("CISCO-SERVICE-CONTROL-RDR-MIB", "cscRdrCategoryName"), ("CISCO-SERVICE-CONTROL-RDR-MIB", "cscRdrCategoryNumSentReports"), ("CISCO-SERVICE-CONTROL-RDR-MIB", "cscRdrCategoryNumDiscardedReports"), ("CISCO-SERVICE-CONTROL-RDR-MIB", "cscRdrCategoryReportRate"), ("CISCO-SERVICE-CONTROL-RDR-MIB", "cscRdrCategoryNumQueuedReports"), ("CISCO-SERVICE-CONTROL-RDR-MIB", "cscRdrCategoryDestPriority"), ("CISCO-SERVICE-CONTROL-RDR-MIB", "cscRdrCategoryDestStatus"), ("CISCO-SERVICE-CONTROL-RDR-MIB", "cscRdrFormatterReportRatePeak"), ("CISCO-SERVICE-CONTROL-RDR-MIB", "cscRdrFormatterReportRatePeakTime"), ("CISCO-SERVICE-CONTROL-RDR-MIB", "cscRdrCategoryID"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cscRdrObjectGroup = cscRdrObjectGroup.setStatus('current')
if mibBuilder.loadTexts: cscRdrObjectGroup.setDescription('This group of objects maintains informative data for RDRs.')
cscRdrNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 637, 2, 2, 2)).setObjects(("CISCO-SERVICE-CONTROL-RDR-MIB", "cscRdrActiveConnectionTrap"), ("CISCO-SERVICE-CONTROL-RDR-MIB", "cscRdrCategoryStoppedDiscardingReportsTrap"), ("CISCO-SERVICE-CONTROL-RDR-MIB", "cscRdrCategoryDiscardingReportsTrap"), ("CISCO-SERVICE-CONTROL-RDR-MIB", "cscRdrNoActiveConnectionTrap"), ("CISCO-SERVICE-CONTROL-RDR-MIB", "cscRdrConnectionStatusDownTrap"), ("CISCO-SERVICE-CONTROL-RDR-MIB", "cscRdrConnectionStatusUpTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cscRdrNotificationGroup = cscRdrNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: cscRdrNotificationGroup.setDescription('This group contains notifications for this MIB.')
cscRdrNotifsControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 637, 2, 2, 3)).setObjects(("CISCO-SERVICE-CONTROL-RDR-MIB", "cscRdrReportsEnableNotifs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cscRdrNotifsControlGroup = cscRdrNotifsControlGroup.setStatus('current')
if mibBuilder.loadTexts: cscRdrNotifsControlGroup.setDescription('This is a collection of objects to control the enable/disable state of notification generation.')
cscRdrCounterDiscontinuityGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 637, 2, 2, 4)).setObjects(("CISCO-SERVICE-CONTROL-RDR-MIB", "cscRdrCounterDiscontinuityTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cscRdrCounterDiscontinuityGroup = cscRdrCounterDiscontinuityGroup.setStatus('current')
if mibBuilder.loadTexts: cscRdrCounterDiscontinuityGroup.setDescription('A collection of objects providing information specific to RDR counter discontinuities.')
mibBuilder.exportSymbols("CISCO-SERVICE-CONTROL-RDR-MIB", cscRdrDestInetAddressType=cscRdrDestInetAddressType, cscRdrDestNumSentReports=cscRdrDestNumSentReports, cscRdrCategoryName=cscRdrCategoryName, ciscoServiceControlRdrMIB=ciscoServiceControlRdrMIB, cscRdrActiveConnectionTrap=cscRdrActiveConnectionTrap, cscRdrNotifsControlGroup=cscRdrNotifsControlGroup, cscRdrDestPriority=cscRdrDestPriority, ciscoSCRdrMIBConform=ciscoSCRdrMIBConform, cscRdrCategoryNumQueuedReports=cscRdrCategoryNumQueuedReports, cscRdrReportsEnableNotifs=cscRdrReportsEnableNotifs, PYSNMP_MODULE_ID=ciscoServiceControlRdrMIB, cscRdrCategoryNumDiscardedReports=cscRdrCategoryNumDiscardedReports, cscRdrCategoryDestEntry=cscRdrCategoryDestEntry, cscRdrCategoryStoppedDiscardingReportsTrap=cscRdrCategoryStoppedDiscardingReportsTrap, cscRdrNotificationGroup=cscRdrNotificationGroup, cscRdrCategoryDiscardingReportsTrap=cscRdrCategoryDiscardingReportsTrap, cscRdrConnectionStatusUpTrap=cscRdrConnectionStatusUpTrap, cscRdrDestReportRate=cscRdrDestReportRate, cscRdrCategoryIndex=cscRdrCategoryIndex, cscRdrFormatterNumDiscardedReports=cscRdrFormatterNumDiscardedReports, cscRdrCategoryID=cscRdrCategoryID, cscRdrMIBCompliances=cscRdrMIBCompliances, cscRdrCategoryDestTable=cscRdrCategoryDestTable, cscRdrNoActiveConnectionTrap=cscRdrNoActiveConnectionTrap, cscRdrConnectionStatusDownTrap=cscRdrConnectionStatusDownTrap, cscRdrFormatterReportRate=cscRdrFormatterReportRate, cscRdrDestNumDiscardedReports=cscRdrDestNumDiscardedReports, cscRdrCategoryTable=cscRdrCategoryTable, cscRdrDestConnectionStatus=cscRdrDestConnectionStatus, cscRdrDestTable=cscRdrDestTable, cscRdrCounterDiscontinuityTime=cscRdrCounterDiscontinuityTime, cscRdrFormatterReportRatePeak=cscRdrFormatterReportRatePeak, cscRdrFormatterEnable=cscRdrFormatterEnable, cscRdrDestPort=cscRdrDestPort, cscRdrDestInetAddress=cscRdrDestInetAddress, cscRdrCategoryEntry=cscRdrCategoryEntry, cscRdrFormatterNumSentReports=cscRdrFormatterNumSentReports, cscRdrDestStatus=cscRdrDestStatus, cscRdrCategoryDestPriority=cscRdrCategoryDestPriority, cscRdrCategoryDestStatus=cscRdrCategoryDestStatus, cscRdrMIBGroups=cscRdrMIBGroups, cscRdrNotifsConfig=cscRdrNotifsConfig, cscRdrObjectGroup=cscRdrObjectGroup, cscRdrCategoryReportRate=cscRdrCategoryReportRate, cscRdrCategoryNumSentReports=cscRdrCategoryNumSentReports, ciscoSCRdrMIBNotifs=ciscoSCRdrMIBNotifs, cscRdrFormatterForwardingMode=cscRdrFormatterForwardingMode, cscRdrFormatterTable=cscRdrFormatterTable, cscRdrFormatterReportRatePeakTime=cscRdrFormatterReportRatePeakTime, cscRdrCompliance=cscRdrCompliance, cscRdrDestEntry=cscRdrDestEntry, cscRdrFormatterProtocol=cscRdrFormatterProtocol, cscRdrCounterDiscontinuityGroup=cscRdrCounterDiscontinuityGroup, cscRdrDestIndex=cscRdrDestIndex, cscRdrFormatterEntry=cscRdrFormatterEntry, ciscoSCRdrMIBObjects=ciscoSCRdrMIBObjects)
