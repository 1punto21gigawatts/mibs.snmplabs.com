#
# PySNMP MIB module ZYXEL-AAA-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ZYXEL-AAA-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:48:53 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint")
EnabledStatus, = mibBuilder.importSymbols("P-BRIDGE-MIB", "EnabledStatus")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
iso, Gauge32, Integer32, ModuleIdentity, ObjectIdentity, IpAddress, NotificationType, Counter32, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, MibIdentifier, TimeTicks, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Gauge32", "Integer32", "ModuleIdentity", "ObjectIdentity", "IpAddress", "NotificationType", "Counter32", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "MibIdentifier", "TimeTicks", "Bits")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
esMgmt, = mibBuilder.importSymbols("ZYXEL-ES-SMI", "esMgmt")
zyxelAaa = ModuleIdentity((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 94))
if mibBuilder.loadTexts: zyxelAaa.setLastUpdated('201207010000Z')
if mibBuilder.loadTexts: zyxelAaa.setOrganization('Enterprise Solution ZyXEL')
if mibBuilder.loadTexts: zyxelAaa.setContactInfo('')
if mibBuilder.loadTexts: zyxelAaa.setDescription('The subtree for authentication, authorization and accounting (AAA)')
zyxelAaaSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 94, 1))
zyxelAaaTrapInfoObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 94, 2))
zyxelAaaNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 94, 3))
zyxelAaaAuthenticationSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 94, 1, 1))
zyxelAaaAuthenticationTypeTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 94, 1, 1, 1), )
if mibBuilder.loadTexts: zyxelAaaAuthenticationTypeTable.setStatus('current')
if mibBuilder.loadTexts: zyxelAaaAuthenticationTypeTable.setDescription('The table contains authentication type configuration.')
zyxelAaaAuthenticationTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 94, 1, 1, 1, 1), ).setIndexNames((0, "ZYXEL-AAA-MIB", "zyAaaAuthenticationTypeName"))
if mibBuilder.loadTexts: zyxelAaaAuthenticationTypeEntry.setStatus('current')
if mibBuilder.loadTexts: zyxelAaaAuthenticationTypeEntry.setDescription('An entry contains authentication type configuration.')
zyAaaAuthenticationTypeName = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 94, 1, 1, 1, 1, 1), DisplayString())
if mibBuilder.loadTexts: zyAaaAuthenticationTypeName.setStatus('current')
if mibBuilder.loadTexts: zyAaaAuthenticationTypeName.setDescription("'Privilege Enable' means to authenticate access privilege level for administrator accounts (users for switch management). 'Login' means to authenticate administrator accounts (users for switch management).")
zyAaaAuthenticationTypeMethodList = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 94, 1, 1, 1, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyAaaAuthenticationTypeMethodList.setStatus('current')
if mibBuilder.loadTexts: zyAaaAuthenticationTypeMethodList.setDescription('There are three methods for the switch to authenticate the two types. The switch checks the methods in the order you configure them (first Method 1, then Method 2 and finally Method 3). You must configure the settings in the Method 1 field. If you want the switch to check other sources for authentication, specified them in Method 2 and Method 3 fields.')
zyxelAaaAuthorizationSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 94, 1, 2))
zyAaaAuthorizationConsoleState = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 94, 1, 2, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyAaaAuthorizationConsoleState.setStatus('current')
if mibBuilder.loadTexts: zyAaaAuthorizationConsoleState.setDescription('Enable/Disable authorization on console for the switch.')
zyxelAaaAuthorizationTypeTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 94, 1, 2, 2), )
if mibBuilder.loadTexts: zyxelAaaAuthorizationTypeTable.setStatus('current')
if mibBuilder.loadTexts: zyxelAaaAuthorizationTypeTable.setDescription('The table contains authorization type configuration.')
zyxelAaaAuthorizationTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 94, 1, 2, 2, 1), ).setIndexNames((0, "ZYXEL-AAA-MIB", "zyAaaAuthorizationTypeName"))
if mibBuilder.loadTexts: zyxelAaaAuthorizationTypeEntry.setStatus('current')
if mibBuilder.loadTexts: zyxelAaaAuthorizationTypeEntry.setDescription('An entry contains authorization type configuration. ')
zyAaaAuthorizationTypeName = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 94, 1, 2, 2, 1, 1), DisplayString())
if mibBuilder.loadTexts: zyAaaAuthorizationTypeName.setStatus('current')
if mibBuilder.loadTexts: zyAaaAuthorizationTypeName.setDescription("'Exec' allows an administrator which logs in the switch through Telnet or SSH to have different access privilege level assigned via the external server. 'Dot1x' allows an IEEE 802.1x client to have different bandwidth limit or VLAN ID assigned via the external server.")
zyAaaAuthorizationTypeState = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 94, 1, 2, 2, 1, 2), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyAaaAuthorizationTypeState.setStatus('current')
if mibBuilder.loadTexts: zyAaaAuthorizationTypeState.setDescription('Enable/Disable authorization for a specified event type.')
zyAaaAuthorizationTypeMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 94, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("radius", 1), ("tacacs", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyAaaAuthorizationTypeMethod.setStatus('current')
if mibBuilder.loadTexts: zyAaaAuthorizationTypeMethod.setDescription('Enter whether you want to use RADIUS or TACACS+ for authorization of specific types of events. RADIUS is the only method for IEEE 802.1x authorization.')
zyxelAaaAccountingSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 94, 1, 3))
zyAaaAccountingUpdatePeriod = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 94, 1, 3, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyAaaAccountingUpdatePeriod.setStatus('current')
if mibBuilder.loadTexts: zyAaaAccountingUpdatePeriod.setDescription('The amount of time in minutes before the switch sends an update to the accounting server.')
zyxelAaaAccountingTypeTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 94, 1, 3, 2), )
if mibBuilder.loadTexts: zyxelAaaAccountingTypeTable.setStatus('current')
if mibBuilder.loadTexts: zyxelAaaAccountingTypeTable.setDescription('The table contains accounting type configuration.')
zyxelAaaAccountingTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 94, 1, 3, 2, 1), ).setIndexNames((0, "ZYXEL-AAA-MIB", "zyAaaAccountingTypeName"))
if mibBuilder.loadTexts: zyxelAaaAccountingTypeEntry.setStatus('current')
if mibBuilder.loadTexts: zyxelAaaAccountingTypeEntry.setDescription('An entry contains accounting type configuration.')
zyAaaAccountingTypeName = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 94, 1, 3, 2, 1, 1), DisplayString())
if mibBuilder.loadTexts: zyAaaAccountingTypeName.setStatus('current')
if mibBuilder.loadTexts: zyAaaAccountingTypeName.setDescription("'System' means the switch will send information when the following system events occur: system boots up, system shuts down, system accounting is enabled, and system accounting is disabled. 'Exec' means the switch will send information when an administrator logs in and logs out via the console port, telnet or SSH. 'Dot1x' means the switch will send information when an IEEE 802.1x client begins a session (authenticates via the switch), ends a session as well as interim updates of a session. 'Commands' means the switch to send information when commands of specified privilege level and higher are executed on the switch.")
zyAaaAccountingTypeState = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 94, 1, 3, 2, 1, 2), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyAaaAccountingTypeState.setStatus('current')
if mibBuilder.loadTexts: zyAaaAccountingTypeState.setDescription('Enable/Disable accounting for a specified event type.')
zyAaaAccountingTypeBroadcastState = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 94, 1, 3, 2, 1, 3), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyAaaAccountingTypeBroadcastState.setStatus('current')
if mibBuilder.loadTexts: zyAaaAccountingTypeBroadcastState.setDescription('Enable/Disable this to have the switch send accounting information to all configured accounting servers at the same time.')
zyAaaAccountingTypeMode = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 94, 1, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(255, 1, 2))).clone(namedValues=NamedValues(("notAvailable", 255), ("startStop", 1), ("stopOnly", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyAaaAccountingTypeMode.setStatus('current')
if mibBuilder.loadTexts: zyAaaAccountingTypeMode.setDescription("The switch supports two modes of recording login events. Select 'startStop' to have the switch send information to the accounting server when a user begins a session, during a user's session (if it lasts past the Update Period), and when a user ends a session. Select 'stopOnly' to have the switch send information to the accounting server only when a user ends a session.")
zyAaaAccountingTypeMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 94, 1, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("radius", 1), ("tacacs", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyAaaAccountingTypeMethod.setStatus('current')
if mibBuilder.loadTexts: zyAaaAccountingTypeMethod.setDescription('Enter whether you want to use RADIUS or TACACS+ for accounting of specified types of events.')
zyAaaAccountingTypePrivilege = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 94, 1, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(255, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("notAvailable", 255), ("privilege0", 0), ("privilege1", 1), ("privilege2", 2), ("privilege3", 3), ("privilege4", 4), ("privilege5", 5), ("privilege6", 6), ("privilege7", 7), ("privilege8", 8), ("privilege9", 9), ("privilege10", 10), ("privilege11", 11), ("privilege12", 12), ("privilege13", 13), ("privilege14", 14)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyAaaAccountingTypePrivilege.setStatus('current')
if mibBuilder.loadTexts: zyAaaAccountingTypePrivilege.setDescription('This is only configurable for commands type of event. Enter the threshold command privilege level for which the switch should send accounting information. The switch will send accounting information when commands at the level you specify and higher are executed on the switch.')
zyAaaTrapAuthenticationMethod = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 94, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("snmp", 0), ("ftp", 1), ("console", 2), ("ssh", 3), ("https", 4), ("http", 5), ("telnet", 6))))
if mibBuilder.loadTexts: zyAaaTrapAuthenticationMethod.setStatus('current')
if mibBuilder.loadTexts: zyAaaTrapAuthenticationMethod.setDescription('This trap displays which authentication method is failed.')
zyAaaTrapAuthorizationMethod = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 94, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("dot1x", 0), ("ssh", 1), ("http", 2), ("telnet", 3), ("ftp", 4), ("console", 5))))
if mibBuilder.loadTexts: zyAaaTrapAuthorizationMethod.setStatus('current')
if mibBuilder.loadTexts: zyAaaTrapAuthorizationMethod.setDescription('This trap displays which authorization method is failed.')
zyAaaAuthenticationFailure = NotificationType((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 94, 3, 1)).setObjects(("ZYXEL-AAA-MIB", "zyAaaTrapAuthenticationMethod"))
if mibBuilder.loadTexts: zyAaaAuthenticationFailure.setStatus('current')
if mibBuilder.loadTexts: zyAaaAuthenticationFailure.setDescription('Management connection authentication has failed.')
zyAaaAuthorizationFailure = NotificationType((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 94, 3, 2)).setObjects(("ZYXEL-AAA-MIB", "zyAaaTrapAuthorizationMethod"))
if mibBuilder.loadTexts: zyAaaAuthorizationFailure.setStatus('current')
if mibBuilder.loadTexts: zyAaaAuthorizationFailure.setDescription('Management connection authorization has failed.')
mibBuilder.exportSymbols("ZYXEL-AAA-MIB", zyAaaAccountingTypeMethod=zyAaaAccountingTypeMethod, zyAaaAuthorizationTypeName=zyAaaAuthorizationTypeName, zyxelAaaAccountingSetup=zyxelAaaAccountingSetup, zyAaaAuthenticationFailure=zyAaaAuthenticationFailure, zyAaaAccountingTypeBroadcastState=zyAaaAccountingTypeBroadcastState, zyxelAaaAuthorizationSetup=zyxelAaaAuthorizationSetup, zyxelAaa=zyxelAaa, zyAaaAuthorizationTypeMethod=zyAaaAuthorizationTypeMethod, PYSNMP_MODULE_ID=zyxelAaa, zyxelAaaTrapInfoObjects=zyxelAaaTrapInfoObjects, zyxelAaaAuthenticationTypeTable=zyxelAaaAuthenticationTypeTable, zyxelAaaNotifications=zyxelAaaNotifications, zyAaaAccountingTypePrivilege=zyAaaAccountingTypePrivilege, zyAaaAuthenticationTypeName=zyAaaAuthenticationTypeName, zyxelAaaAuthenticationTypeEntry=zyxelAaaAuthenticationTypeEntry, zyxelAaaAuthorizationTypeTable=zyxelAaaAuthorizationTypeTable, zyxelAaaAccountingTypeEntry=zyxelAaaAccountingTypeEntry, zyAaaTrapAuthenticationMethod=zyAaaTrapAuthenticationMethod, zyxelAaaSetup=zyxelAaaSetup, zyAaaAccountingUpdatePeriod=zyAaaAccountingUpdatePeriod, zyAaaAccountingTypeState=zyAaaAccountingTypeState, zyxelAaaAuthenticationSetup=zyxelAaaAuthenticationSetup, zyAaaAccountingTypeName=zyAaaAccountingTypeName, zyAaaAccountingTypeMode=zyAaaAccountingTypeMode, zyAaaAuthorizationTypeState=zyAaaAuthorizationTypeState, zyxelAaaAuthorizationTypeEntry=zyxelAaaAuthorizationTypeEntry, zyAaaTrapAuthorizationMethod=zyAaaTrapAuthorizationMethod, zyAaaAuthenticationTypeMethodList=zyAaaAuthenticationTypeMethodList, zyAaaAuthorizationFailure=zyAaaAuthorizationFailure, zyxelAaaAccountingTypeTable=zyxelAaaAccountingTypeTable, zyAaaAuthorizationConsoleState=zyAaaAuthorizationConsoleState)
