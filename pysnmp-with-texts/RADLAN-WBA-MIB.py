#
# PySNMP MIB module RADLAN-WBA-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RADLAN-WBA-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:50:33 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion")
InetAddressIPv6, InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressIPv6", "InetAddressType", "InetAddress")
rnd, = mibBuilder.importSymbols("RADLAN-MIB", "rnd")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, ModuleIdentity, ObjectIdentity, Unsigned32, NotificationType, TimeTicks, Integer32, iso, IpAddress, Gauge32, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "ModuleIdentity", "ObjectIdentity", "Unsigned32", "NotificationType", "TimeTicks", "Integer32", "iso", "IpAddress", "Gauge32", "MibIdentifier")
DisplayString, TextualConvention, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "MacAddress")
rlWBA = ModuleIdentity((1, 3, 6, 1, 4, 1, 89, 230))
rlWBA.setRevisions(('2010-07-05 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: rlWBA.setRevisionsDescriptions(('Added this MODULE-IDENTITY clause.',))
if mibBuilder.loadTexts: rlWBA.setLastUpdated('201007050000Z')
if mibBuilder.loadTexts: rlWBA.setOrganization('Radlan Computer Communications Ltd.')
if mibBuilder.loadTexts: rlWBA.setContactInfo('radlan.com')
if mibBuilder.loadTexts: rlWBA.setDescription('The private MIB module definition for Web Based Authentication.')
class RlWBAStatusType(TextualConvention, Integer32):
    description = 'The host(mac,ifindex) authentication status'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("unknown", 0), ("inProcess", 1), ("failAuthen", 2), ("pending", 3), ("authenticating", 4), ("authenticated", 5), ("waitAck", 6))

class RlWBARetryFlagOp(TextualConvention, Integer32):
    description = 'The retry flag options'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("off", 0), ("on", 1))

rlWBAAuxiliaryTable = MibTable((1, 3, 6, 1, 4, 1, 89, 230, 1), )
if mibBuilder.loadTexts: rlWBAAuxiliaryTable.setStatus('current')
if mibBuilder.loadTexts: rlWBAAuxiliaryTable.setDescription("The table is an auxiliary table with 1 entry only. Used to pass user credentials to authentication manager and provide the users' authentication status.")
rlWBAAuxiliaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 230, 1, 1), ).setIndexNames((0, "RADLAN-WBA-MIB", "rlWBAIp"))
if mibBuilder.loadTexts: rlWBAAuxiliaryEntry.setStatus('current')
if mibBuilder.loadTexts: rlWBAAuxiliaryEntry.setDescription('The row definition for this table.')
rlWBAIp = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 230, 1, 1, 1), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlWBAIp.setStatus('current')
if mibBuilder.loadTexts: rlWBAIp.setDescription('User remote IP address.')
rlWBAStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 230, 1, 1, 2), RlWBAStatusType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlWBAStatus.setStatus('current')
if mibBuilder.loadTexts: rlWBAStatus.setDescription('The host authentication status.')
rlAuxFailReason = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 230, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlAuxFailReason.setStatus('current')
if mibBuilder.loadTexts: rlAuxFailReason.setDescription('Web Based Authentication fail reason')
rlIsRetryFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 230, 1, 1, 4), RlWBARetryFlagOp().clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIsRetryFlag.setStatus('current')
if mibBuilder.loadTexts: rlIsRetryFlag.setDescription('Web Based Authentication retry flag. If flag is on it means the host that started authentication process was out due to higher priority session. The host must retry authenticating until higher session is accepted/failed. The default value is OFF')
rlWBAUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 230, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlWBAUsername.setStatus('current')
if mibBuilder.loadTexts: rlWBAUsername.setDescription('Web Based Authentication User Name')
rlWBAPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 230, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlWBAPassword.setStatus('current')
if mibBuilder.loadTexts: rlWBAPassword.setDescription('Web Based Authentication User Password.')
rlWBAImageTable = MibTable((1, 3, 6, 1, 4, 1, 89, 230, 2), )
if mibBuilder.loadTexts: rlWBAImageTable.setStatus('current')
if mibBuilder.loadTexts: rlWBAImageTable.setDescription('The table holds the images content.')
rlWBAImageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 230, 2, 1), ).setIndexNames((0, "RADLAN-WBA-MIB", "rlWBAImageNumber"), (0, "RADLAN-WBA-MIB", "rlWBAImageIndex"))
if mibBuilder.loadTexts: rlWBAImageEntry.setStatus('current')
if mibBuilder.loadTexts: rlWBAImageEntry.setDescription('An entry in the rlWBAImageTable.')
rlWBAImageNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 230, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)))
if mibBuilder.loadTexts: rlWBAImageNumber.setStatus('current')
if mibBuilder.loadTexts: rlWBAImageNumber.setDescription('This variable identifies the Image number ... ')
rlWBAImageIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 230, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)))
if mibBuilder.loadTexts: rlWBAImageIndex.setStatus('current')
if mibBuilder.loadTexts: rlWBAImageIndex.setDescription('This variable identifies the Data of index of the image cut into octetes of 160 bytes')
rlWBAImageText = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 230, 2, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlWBAImageText.setStatus('current')
if mibBuilder.loadTexts: rlWBAImageText.setDescription('This variable identifies the MIB which holds image content .')
rlWBADataTable = MibTable((1, 3, 6, 1, 4, 1, 89, 230, 3), )
if mibBuilder.loadTexts: rlWBADataTable.setStatus('current')
if mibBuilder.loadTexts: rlWBADataTable.setDescription('The table holds the Data content.')
rlWBADataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 230, 3, 1), ).setIndexNames((0, "RADLAN-WBA-MIB", "rlWBADataNumber"), (0, "RADLAN-WBA-MIB", "rlWBADataIndex"))
if mibBuilder.loadTexts: rlWBADataEntry.setStatus('current')
if mibBuilder.loadTexts: rlWBADataEntry.setDescription('An entry in the rlWBADataTable.')
rlWBADataNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 230, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)))
if mibBuilder.loadTexts: rlWBADataNumber.setStatus('current')
if mibBuilder.loadTexts: rlWBADataNumber.setDescription('This variable identifies the Data of index of the image cut into octets of 160 bytes')
rlWBADataIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 230, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)))
if mibBuilder.loadTexts: rlWBADataIndex.setStatus('current')
if mibBuilder.loadTexts: rlWBADataIndex.setDescription('TBD')
rlWBADataText = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 230, 3, 1, 3), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlWBADataText.setStatus('current')
if mibBuilder.loadTexts: rlWBADataText.setDescription('This variable identifies the MIB which holds a section of the Data content in the table.(chunk of 160 bytes)')
rlWBAImageInfoTable = MibTable((1, 3, 6, 1, 4, 1, 89, 230, 4), )
if mibBuilder.loadTexts: rlWBAImageInfoTable.setStatus('current')
if mibBuilder.loadTexts: rlWBAImageInfoTable.setDescription('The table holds the images content.')
rlWBAImageInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 230, 4, 1), ).setIndexNames((0, "RADLAN-WBA-MIB", "rlWBAImageInfoNumber"))
if mibBuilder.loadTexts: rlWBAImageInfoEntry.setStatus('current')
if mibBuilder.loadTexts: rlWBAImageInfoEntry.setDescription('An entry in the rlWBAImageInfoTable.')
rlWBAImageInfoNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 230, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)))
if mibBuilder.loadTexts: rlWBAImageInfoNumber.setStatus('current')
if mibBuilder.loadTexts: rlWBAImageInfoNumber.setDescription('This variable identifies the Image number ... ')
rlWBAImageInfoName = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 230, 4, 1, 2), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlWBAImageInfoName.setStatus('current')
if mibBuilder.loadTexts: rlWBAImageInfoName.setDescription('This variable identifies the Name of the image eg: myImage.png')
rlWBAImageInfoSize = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 230, 4, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlWBAImageInfoSize.setStatus('current')
if mibBuilder.loadTexts: rlWBAImageInfoSize.setDescription('This variable identifies the size of the image.')
rlWBAImageClear = MibScalar((1, 3, 6, 1, 4, 1, 89, 230, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlWBAImageClear.setStatus('current')
if mibBuilder.loadTexts: rlWBAImageClear.setDescription('Action to Clear a certain image ')
rlWBADataClear = MibScalar((1, 3, 6, 1, 4, 1, 89, 230, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlWBADataClear.setStatus('current')
if mibBuilder.loadTexts: rlWBADataClear.setDescription('Action to Clear a certain image ')
rlWBAImageDownloadFinishStatus = MibScalar((1, 3, 6, 1, 4, 1, 89, 230, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlWBAImageDownloadFinishStatus.setStatus('current')
if mibBuilder.loadTexts: rlWBAImageDownloadFinishStatus.setDescription('Finish status of customization image download')
mibBuilder.exportSymbols("RADLAN-WBA-MIB", rlWBADataText=rlWBADataText, rlWBAImageNumber=rlWBAImageNumber, rlWBAImageInfoNumber=rlWBAImageInfoNumber, rlWBAImageInfoName=rlWBAImageInfoName, rlWBAImageEntry=rlWBAImageEntry, rlWBADataTable=rlWBADataTable, rlWBAImageInfoSize=rlWBAImageInfoSize, rlWBAAuxiliaryTable=rlWBAAuxiliaryTable, rlWBAImageInfoEntry=rlWBAImageInfoEntry, rlWBAImageDownloadFinishStatus=rlWBAImageDownloadFinishStatus, rlWBADataIndex=rlWBADataIndex, RlWBAStatusType=RlWBAStatusType, rlWBAImageText=rlWBAImageText, rlWBAImageTable=rlWBAImageTable, rlAuxFailReason=rlAuxFailReason, rlWBAIp=rlWBAIp, rlWBAUsername=rlWBAUsername, rlWBAImageIndex=rlWBAImageIndex, rlWBADataNumber=rlWBADataNumber, rlIsRetryFlag=rlIsRetryFlag, rlWBAPassword=rlWBAPassword, rlWBA=rlWBA, RlWBARetryFlagOp=RlWBARetryFlagOp, rlWBAImageClear=rlWBAImageClear, PYSNMP_MODULE_ID=rlWBA, rlWBAAuxiliaryEntry=rlWBAAuxiliaryEntry, rlWBAImageInfoTable=rlWBAImageInfoTable, rlWBADataClear=rlWBADataClear, rlWBADataEntry=rlWBADataEntry, rlWBAStatus=rlWBAStatus)
