#
# PySNMP MIB module CPQDSCCS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CPQDSCCS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:27:23 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint")
compaq, = mibBuilder.importSymbols("CPQHOST-MIB", "compaq")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
sysName, sysContact, sysDescr, sysLocation = mibBuilder.importSymbols("SNMPv2-MIB", "sysName", "sysContact", "sysDescr", "sysLocation")
TimeTicks, NotificationType, ModuleIdentity, MibIdentifier, Counter32, Integer32, IpAddress, Unsigned32, Gauge32, NotificationType, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Bits, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "NotificationType", "ModuleIdentity", "MibIdentifier", "Counter32", "Integer32", "IpAddress", "Unsigned32", "Gauge32", "NotificationType", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Bits", "ObjectIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
cpqDsccs = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 171))
dsccsTrapInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 171, 1))
csRoomName = MibScalar((1, 3, 6, 1, 4, 1, 232, 171, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csRoomName.setStatus('mandatory')
if mibBuilder.loadTexts: csRoomName.setDescription('The location of the room.')
csContactName = MibScalar((1, 3, 6, 1, 4, 1, 232, 171, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csContactName.setStatus('mandatory')
if mibBuilder.loadTexts: csContactName.setDescription('The contact person name.')
csContactPhoneNumber = MibScalar((1, 3, 6, 1, 4, 1, 232, 171, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csContactPhoneNumber.setStatus('mandatory')
if mibBuilder.loadTexts: csContactPhoneNumber.setDescription('The contact person phone number.')
csProductName = MibScalar((1, 3, 6, 1, 4, 1, 232, 171, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csProductName.setStatus('mandatory')
if mibBuilder.loadTexts: csProductName.setDescription('The product name: Dynamic Smart Cooling.')
csProductId = MibScalar((1, 3, 6, 1, 4, 1, 232, 171, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csProductId.setStatus('mandatory')
if mibBuilder.loadTexts: csProductId.setDescription('The product ID.')
csSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 232, 171, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: csSerialNumber.setDescription('The product serial number.')
csSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 232, 171, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csSoftwareVersion.setStatus('mandatory')
if mibBuilder.loadTexts: csSoftwareVersion.setDescription('The product software version.')
trapEventId = MibScalar((1, 3, 6, 1, 4, 1, 232, 171, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1001, 1002, 1003, 1004, 1005, 1006, 1007, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 3001, 3002, 3003, 3004, 3005, 3006, 3007, 3008, 3009, 3010, 3011, 3012, 3013, 3014, 3015, 3016, 3017, 3018, 3019, 3020, 3021, 3022, 3023, 3024, 3025, 3026, 3027, 3028, 3029, 3030, 3031, 3032, 3033, 3034, 3035, 3036, 4001, 4002, 4003, 4004, 4005, 4006, 4007, 4008, 4009, 4010, 4011, 4012, 4013, 4014, 6001, 7001))).clone(namedValues=NamedValues(("webGuiDscAutoMode", 1001), ("webGuiDscMonitoringMode", 1002), ("webGuiDscEmergencyOverrideMode", 1003), ("webGuiDscOff", 1004), ("webGuiUserLoggedIn", 1005), ("webGuiUserLoggedOut", 1006), ("webGuiUserSessionExpired", 1007), ("ctrlMasterSensorTempAboveAcceptBand", 2001), ("ctrlOrphanSensorTempAboveAcceptBand", 2002), ("ctrlTempSensorAboveAcceptBand", 2003), ("ctrlRegionInfluenceAhuNoSensors", 2004), ("ctrlNoTciDataForSensorAndAhu", 2005), ("ctrlTciDataExistsForSensorsRemovedFromDsc", 2006), ("ctrlSensorTimestampOld", 2007), ("ctrlAhuOff", 2008), ("ctrlStarted", 2009), ("ctrlStopped", 2010), ("commisFullStartedByUser", 3001), ("commisPartialStartedByUserForAhu", 3002), ("commisAbortedByUseer", 3003), ("commisFinishedSuccessfully", 3004), ("commisFailedSupplyAirTempForAhuDidNotChange", 3005), ("commisFailedCouldNotChangeAhuSetPoint", 3006), ("commisFailedDataCenterTempExceedThresholdLimit", 3007), ("commisCannotPerformOperation", 3008), ("commisLoadingConfigProfile", 3009), ("commisLoadingPropertiesForConfigProfile", 3010), ("commisLoadingConfigParamForProfile", 3011), ("commisPerformCheckForAhusInConfigProfile", 3012), ("commisInitSubsystemForConfigProfile", 3013), ("commisInitSubsystemForCOnfigProfileAndInstance", 3014), ("commisStartingForConfigProfile", 3015), ("commisBeginInitCycle", 3016), ("commisProcessCompletedSuccessfullyForConfiguration", 3017), ("commisHaltActiveCommmissioningExecution", 3018), ("commisExecutionFailedForConfiguration", 3019), ("commisPerformPerturbationForInitDistributionLevel", 3020), ("commisPerformPerturbationForAhu", 3021), ("commisAttestSystemPerturbationForAhu", 3022), ("commisAssertionFailedForAhuFeedbackOnTest", 3023), ("commisWaitingForSystemSteadinessFromSensorNetwork", 3024), ("commisValidatingAhuSupplyAirTempHasChanged", 3025), ("commisStoreSensorNetworkStateAndDataForPerturbation", 3026), ("commisStoreBasecaseSensorTempAndData", 3027), ("commisStoreSystemPerturbationSensorTempAndData", 3028), ("commisMergeDataForConfig", 3029), ("commisRollbackAndCleanFromDatabaseChanges", 3030), ("commisInitDefaultConfigProfiles", 3031), ("commisAhuPerturbationWithinConfig", 3032), ("commisCannotPerformMergeOpWhenRunningCommissioning", 3033), ("commisCannotHaltCommissioningNoActiveInstanceRunning", 3034), ("commisBeginExecutionCycleSettingAhuToConfiguredLevels", 3035), ("commisSettingAhusToUniformDistributionLevel", 3036), ("commuOpcCommunicationsLost", 4001), ("commuMbcHostIsUnreachablePingFailed", 4002), ("commuOpcStatus", 4003), ("commuTempForSensorOutOfRange", 4004), ("commuFailsafeDeviceHeartbeatNotPresent", 4005), ("commuReverseAirFlowDetectedInRack", 4006), ("commuAhuSupplyAirTempReachedHighLimit", 4007), ("commuAhuSupplyAirTempReachedLowLimit", 4008), ("commuAhuReturnAirTempReachedHighLimit", 4009), ("commuAhuReturnAirTempReachedLowLimit", 4010), ("commuAhuPoweredOff", 4011), ("commuAhuFluidLeakDetected", 4012), ("commuAhuSwitchedToLocalControl", 4013), ("commuSensorTimestampOld", 4014), ("internalSoftwareUnhandledException", 6001), ("other", 7001)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapEventId.setStatus('mandatory')
if mibBuilder.loadTexts: trapEventId.setDescription('The event ID.')
trapDescription = MibScalar((1, 3, 6, 1, 4, 1, 232, 171, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapDescription.setStatus('mandatory')
if mibBuilder.loadTexts: trapDescription.setDescription('The description of the event that generates the trap.')
trapDscTest = NotificationType((1, 3, 6, 1, 4, 1, 232, 171) + (0,1)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQDSCCS-MIB", "csRoomName"), ("CPQDSCCS-MIB", "csContactName"), ("CPQDSCCS-MIB", "csContactPhoneNumber"), ("CPQDSCCS-MIB", "csProductName"), ("CPQDSCCS-MIB", "csProductId"), ("CPQDSCCS-MIB", "csSerialNumber"), ("CPQDSCCS-MIB", "csSoftwareVersion"), ("CPQDSCCS-MIB", "trapEventId"), ("CPQDSCCS-MIB", "trapDescription"))
if mibBuilder.loadTexts: trapDscTest.setDescription('Test trap sent to a trap receiver to check proper reception of traps')
trapDscCritical = NotificationType((1, 3, 6, 1, 4, 1, 232, 171) + (0,2)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQDSCCS-MIB", "csRoomName"), ("CPQDSCCS-MIB", "csContactName"), ("CPQDSCCS-MIB", "csContactPhoneNumber"), ("CPQDSCCS-MIB", "csProductName"), ("CPQDSCCS-MIB", "csProductId"), ("CPQDSCCS-MIB", "csSerialNumber"), ("CPQDSCCS-MIB", "csSoftwareVersion"), ("CPQDSCCS-MIB", "trapEventId"), ("CPQDSCCS-MIB", "trapDescription"))
if mibBuilder.loadTexts: trapDscCritical.setDescription('A critical alarm has occurred. Action: Check the Trap Description for more information.')
trapDscWarning = NotificationType((1, 3, 6, 1, 4, 1, 232, 171) + (0,3)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQDSCCS-MIB", "csRoomName"), ("CPQDSCCS-MIB", "csContactName"), ("CPQDSCCS-MIB", "csContactPhoneNumber"), ("CPQDSCCS-MIB", "csProductName"), ("CPQDSCCS-MIB", "csProductId"), ("CPQDSCCS-MIB", "csSerialNumber"), ("CPQDSCCS-MIB", "csSoftwareVersion"), ("CPQDSCCS-MIB", "trapEventId"), ("CPQDSCCS-MIB", "trapDescription"))
if mibBuilder.loadTexts: trapDscWarning.setDescription('A warning alarm has occurred. Action: Check the Trap Description for more information.')
trapDscInformation = NotificationType((1, 3, 6, 1, 4, 1, 232, 171) + (0,4)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQDSCCS-MIB", "csRoomName"), ("CPQDSCCS-MIB", "csContactName"), ("CPQDSCCS-MIB", "csContactPhoneNumber"), ("CPQDSCCS-MIB", "csProductName"), ("CPQDSCCS-MIB", "csProductId"), ("CPQDSCCS-MIB", "csSerialNumber"), ("CPQDSCCS-MIB", "csSoftwareVersion"), ("CPQDSCCS-MIB", "trapEventId"), ("CPQDSCCS-MIB", "trapDescription"))
if mibBuilder.loadTexts: trapDscInformation.setDescription('An informational alarm has occurred. Action: Check the Trap Description for more information.')
mibBuilder.exportSymbols("CPQDSCCS-MIB", trapEventId=trapEventId, csProductName=csProductName, csContactPhoneNumber=csContactPhoneNumber, csContactName=csContactName, trapDscInformation=trapDscInformation, csSoftwareVersion=csSoftwareVersion, cpqDsccs=cpqDsccs, trapDscCritical=trapDscCritical, trapDscWarning=trapDscWarning, csRoomName=csRoomName, csSerialNumber=csSerialNumber, dsccsTrapInfo=dsccsTrapInfo, csProductId=csProductId, trapDescription=trapDescription, trapDscTest=trapDscTest)
