#
# PySNMP MIB module CISCO-VRF-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-VRF-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:19:46 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
InterfaceIndex, ifIndex, ifName = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "ifIndex", "ifName")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Counter32, ModuleIdentity, Unsigned32, Integer32, ObjectIdentity, Bits, Counter64, Gauge32, NotificationType, IpAddress, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "ModuleIdentity", "Unsigned32", "Integer32", "ObjectIdentity", "Bits", "Counter64", "Gauge32", "NotificationType", "IpAddress", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "iso")
DisplayString, TruthValue, StorageType, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "StorageType", "TextualConvention", "RowStatus")
ciscoVrfMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 711))
ciscoVrfMIB.setRevisions(('2009-12-10 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoVrfMIB.setRevisionsDescriptions(('Latest version of this MIB module.',))
if mibBuilder.loadTexts: ciscoVrfMIB.setLastUpdated('200912100000Z')
if mibBuilder.loadTexts: ciscoVrfMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoVrfMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-snmp@cisco.com')
if mibBuilder.loadTexts: ciscoVrfMIB.setDescription('The MIB module for provisioning and managing network virtualization features. This module provides manageability for VRF, VRF-Lite and vNET. VRF stands for Virtual Routing and Forwarding. VRF is an extension of IP routing that provides multiple routing instances. VRF provides independent routing instances and hence the same or over-lapping addresses can be used without conflicting each other. VRFs are used in conjunction with MPLS VPN to provide traffic separation between multiple VPN customers. A VRF-Lite enabled device implements VRFs and does not require MPLS for end to end communication. Instead of using MPLS labels, VRF-Lite uses the interfaces to distinguish routes for different VPNs. VRF-Lite forms virtual packet-forwarding tables by associating one or more interfaces with each VRF, and interfaces cannot belong to more than one VRF at any time. VRF-Lite is an IP based hop-by-hop virtualization mechanism and it involves complex configuration of every hop in the network. vNET, virtual network, is also an IP based hop-by-hop mechanism that can provide end-to-end virtualization of the network. vNET greatly reduces the complexity in VRF-Lite deployment. This MIB module will allow the user to perform the following * Create and monitor VRFs * Group VRFs to create VRF List * Associate/Dis-associate interface to/from a VRF * Enable vNET trunking on an interface * Specify VRF list per trunk')
class CvVrfIfType(TextualConvention, Integer32):
    description = 'The type value denotes the manner in which the interface is used. vNETTrunkSI(1) : The sub-interface is created under a vNET trunk interface to carry vNET tagged traffic belonging to a VRF. vNETEdge(2) : The interface is assigned to a VRF which is tagged with a vNET tag. vrfEdge(3) : The interface is assigned to an untagged VRF.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("vNETTrunkSI", 1), ("vNETEdge", 2), ("vrfEdge", 3))

class CvVnetTagOrZero(TextualConvention, Unsigned32):
    description = 'The tag value assigned to a vNET. The tag value is global, meaning on each router, the same vNET must be assigned the same numerical tag value. This is assigned by the system operator or NMS or through a network tag distribution mechanism. The valid tag value is ranged from 2 to 4094. Traffic that carries a vNET tag is called tagged traffic. On the other hand, traffic that does not carry a vNET tag is called untagged traffic. A vNET is defined as a VRF with a tag assigned. A valid tag value assigned to a VRF indicates it is a vNET. Zero(0) is a special value and its meaning should be interpreted in conjunction with the object definition using this type.'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2, 4094), )
ciscoVrfMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 711, 1))
ciscoVrfMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 711, 0))
ciscoVrfMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 711, 2))
cvVrf = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 711, 1, 1))
cvInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 711, 1, 2))
cvNotifCntl = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 711, 1, 3))
cvVrfTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 711, 1, 1, 1), )
if mibBuilder.loadTexts: cvVrfTable.setStatus('current')
if mibBuilder.loadTexts: cvVrfTable.setDescription('This table contains entries representing a VRF - Virtual Routing and Forwarding instance. There will be an entry for each VRF instance created in the system.')
cvVrfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 711, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-VRF-MIB", "cvVrfIndex"))
if mibBuilder.loadTexts: cvVrfEntry.setStatus('current')
if mibBuilder.loadTexts: cvVrfEntry.setDescription('An entry representing the information pertaining to a virtual routing and forwarding instance.')
cvVrfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 711, 1, 1, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: cvVrfIndex.setStatus('current')
if mibBuilder.loadTexts: cvVrfIndex.setDescription('An identifier that is assigned to each VRF and is used to uniquely identify it. The uniqueness of this identifier is restricted only to this device.')
cvVrfName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 711, 1, 1, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cvVrfName.setStatus('current')
if mibBuilder.loadTexts: cvVrfName.setDescription('The human-readable name of the VRF instance. This name uniquely identifies the VRF instance in the system. This object is mandatory for creating an entry in this table.')
cvVrfVnetTag = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 711, 1, 1, 1, 1, 3), CvVnetTagOrZero().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2, 4094), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cvVrfVnetTag.setStatus('current')
if mibBuilder.loadTexts: cvVrfVnetTag.setDescription('The vNET tag assigned to this VRF instance. A value of zero(0) indicates the VRF instance is not a vNET and such vrf could be part of a VRF-Lite or MPLS deployment. A set with a value of zero(0) will remove the vNET tag assigned to this VRF. The value of this object can be changed even when cvVrfRowStatus is having a value of active(1).')
cvVrfOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 711, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVrfOperStatus.setStatus('current')
if mibBuilder.loadTexts: cvVrfOperStatus.setDescription('Denotes whether a VRF is operational or not. A VRF is up(1) when at least one interface associated with the VRF, which ifOperStatus is up(1). A VRF is down(2) when: a. There does not exist at least one interface whose ifOperStatus is up(1). b. There are no interfaces associated with the VRF.')
cvVrfRouteDistProt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 711, 1, 1, 1, 1, 5), Bits().clone(namedValues=NamedValues(("none", 0), ("other", 1), ("ospf", 2), ("rip", 3), ("isis", 4), ("eigrp", 5), ("bgp", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVrfRouteDistProt.setStatus('current')
if mibBuilder.loadTexts: cvVrfRouteDistProt.setDescription('Denotes the route distribution protocol enabled in this VRF. Note that more than one routing protocol may be enabled at the same time.')
cvVrfStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 711, 1, 1, 1, 1, 6), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVrfStorageType.setStatus('current')
if mibBuilder.loadTexts: cvVrfStorageType.setDescription('The storage type for this entry.')
cvVrfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 711, 1, 1, 1, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cvVrfRowStatus.setStatus('current')
if mibBuilder.loadTexts: cvVrfRowStatus.setDescription('This object is used to create, modify, and/or delete a row in this table.')
cvVrfListTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 711, 1, 1, 2), )
if mibBuilder.loadTexts: cvVrfListTable.setStatus('current')
if mibBuilder.loadTexts: cvVrfListTable.setDescription('This table contains the entries representing the VRFs in a VRF List.')
cvVrfListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 711, 1, 1, 2, 1), ).setIndexNames((0, "CISCO-VRF-MIB", "cvVrfListName"), (0, "CISCO-VRF-MIB", "cvVrfListVindex"))
if mibBuilder.loadTexts: cvVrfListEntry.setStatus('current')
if mibBuilder.loadTexts: cvVrfListEntry.setDescription('An entry in this table represents a VRF in a VRF list. A VRF list is a collection of VRFs grouped together. The list defined here can be associated to a vNET trunk interface, which would then act as a trunk carrying traffic for all VRFs in the VRF list. An example of a VRF List - list1.1 = Vrf_Finance list1.2 = Vrf_HR')
cvVrfListName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 711, 1, 1, 2, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: cvVrfListName.setStatus('current')
if mibBuilder.loadTexts: cvVrfListName.setDescription('The human-readable name of the VRF List. This name uniquely identifies the VRF List in the system.')
cvVrfListVindex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 711, 1, 1, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: cvVrfListVindex.setStatus('current')
if mibBuilder.loadTexts: cvVrfListVindex.setDescription('This index uniquely identifies a VRF within the VRF list.')
cvVrfListVrfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 711, 1, 1, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cvVrfListVrfIndex.setStatus('current')
if mibBuilder.loadTexts: cvVrfListVrfIndex.setDescription('This object indicates the associated VRF in the cvVrfTable. The value of this object is index value (cvVrfIndex) of cvVrfTable. The value of this object cannot be modified when the entry is in active(1) state.')
cvVrfListStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 711, 1, 1, 2, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVrfListStorageType.setStatus('current')
if mibBuilder.loadTexts: cvVrfListStorageType.setDescription('The storage type for this entry.')
cvVrfListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 711, 1, 1, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cvVrfListRowStatus.setStatus('current')
if mibBuilder.loadTexts: cvVrfListRowStatus.setDescription('This object is used to create, modify, and/or delete a row in this table.')
cvVrfInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 711, 1, 2, 1), )
if mibBuilder.loadTexts: cvVrfInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: cvVrfInterfaceTable.setDescription('This table contains the entries representing the interfaces associated with a VRF instance.')
cvVrfInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 711, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-VRF-MIB", "cvVrfIndex"), (0, "CISCO-VRF-MIB", "cvVrfInterfaceIndex"))
if mibBuilder.loadTexts: cvVrfInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: cvVrfInterfaceEntry.setDescription('An entry in this table represents an interface to which a VRF is associated. A VRF can be associated to multiple interfaces. There will be one entry per interface for each VRF instance in this table.')
cvVrfInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 711, 1, 2, 1, 1, 1), InterfaceIndex().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: cvVrfInterfaceIndex.setStatus('current')
if mibBuilder.loadTexts: cvVrfInterfaceIndex.setDescription('This is a unique index for an entry in this table. A non-zero index for an entry indicates the ifIndex for the corresponding interface entry in the ifTable. Note that this table does not necessarily correspond one-to-one with all entries in the Interface MIB.')
cvVrfInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 711, 1, 2, 1, 1, 2), CvVrfIfType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVrfInterfaceType.setStatus('current')
if mibBuilder.loadTexts: cvVrfInterfaceType.setDescription('The VRF type of this interface. The type of the interface is determined based on the VRF associated with this interface. If the VRF is not tagged with vnet tag then the type will be vrfEdge. If the VRF is tagged with vnet tag then it will become vnetEdge. For vNETTrunkSI, the sub-interface in question is automatically created for a VRF when trunking is enabled on the main interface.')
cvVrfInterfaceVnetTagOverride = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 711, 1, 2, 1, 1, 3), CvVnetTagOrZero().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2, 4094), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cvVrfInterfaceVnetTagOverride.setStatus('current')
if mibBuilder.loadTexts: cvVrfInterfaceVnetTagOverride.setDescription('This object can be used to over-ride the vNET tag assigned to the VRF traffic going through this interface. This object is applicable only if the cvVrfInterfaceType of this interface has a value of vNETTrunkSI(1). By default the tagged traffic will use the value denoted by cvVrfVnetTag of this VRF. In which case this object will have a value of zero(0). A set with a value of zero(0) will revert the tag assignment behaviour to default behaviour mentioned above.')
cvVrfInterfaceStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 711, 1, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVrfInterfaceStorageType.setStatus('current')
if mibBuilder.loadTexts: cvVrfInterfaceStorageType.setDescription('The storage type for this entry.')
cvVrfInterfaceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 711, 1, 2, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cvVrfInterfaceRowStatus.setStatus('current')
if mibBuilder.loadTexts: cvVrfInterfaceRowStatus.setDescription('This object is used to create, modify, and/or delete a row in this table. When a row is created in this table the VRF is associated to an interface. When a row is deleted from this table the VRF is dis-associated from the interface.')
cvInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 711, 1, 2, 2), )
if mibBuilder.loadTexts: cvInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: cvInterfaceTable.setDescription('This table contains entries representing the interfaces on which the vNET trunking can be enabled.')
cvInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 711, 1, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cvInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: cvInterfaceEntry.setDescription('An entry in this table represents an interface on which the vNET trunking can be enabled. When an interface is enabled for vNET trunking, it will carry the traffic for the VRFs which are tagged with the vNET tag.')
cvInterfaceVnetTrunkEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 711, 1, 2, 2, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvInterfaceVnetTrunkEnabled.setStatus('current')
if mibBuilder.loadTexts: cvInterfaceVnetTrunkEnabled.setDescription('This object represents the vNET trunking status for this interface. When enabled for vNET trunking the interface will carry traffic of all vNETs in the device.')
cvInterfaceVnetVrfList = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 711, 1, 2, 2, 1, 2), SnmpAdminString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(1, 32), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvInterfaceVnetVrfList.setStatus('current')
if mibBuilder.loadTexts: cvInterfaceVnetVrfList.setDescription('The name of the VRF List associated with this interface. A non-zero length string represent a list of vNET tagged VRFs, whose traffic will be forwarded through this interface. A zero length string denotes that the traffic for all the vNET tagged VRFs will be forwarded through this interface.')
cvVrfIfNotifEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 711, 1, 3, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvVrfIfNotifEnable.setStatus('current')
if mibBuilder.loadTexts: cvVrfIfNotifEnable.setDescription('This object indicates whether the device should generate notifications related to VRF Interface status change.')
cvVnetTrunkNotifEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 711, 1, 3, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvVnetTrunkNotifEnable.setStatus('current')
if mibBuilder.loadTexts: cvVnetTrunkNotifEnable.setDescription('This object indicates whether the device should generate notifications related to vNET Trunk Interface status change.')
cvVrfIfUp = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 711, 0, 1)).setObjects(("IF-MIB", "ifName"), ("CISCO-VRF-MIB", "cvVrfName"), ("CISCO-VRF-MIB", "cvVrfOperStatus"))
if mibBuilder.loadTexts: cvVrfIfUp.setStatus('current')
if mibBuilder.loadTexts: cvVrfIfUp.setDescription('This notification is generated when: a. The ifOperStatus of an interface associated with a VRF changes to the up(1) state. b. When an interface with ifOperStatus = up(1) is associated with a VRF. The interface is identified by ifName and the VRF is identified by cvVrfName varbinds respectively.')
cvVrfIfDown = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 711, 0, 2)).setObjects(("IF-MIB", "ifName"), ("CISCO-VRF-MIB", "cvVrfName"), ("CISCO-VRF-MIB", "cvVrfOperStatus"))
if mibBuilder.loadTexts: cvVrfIfDown.setStatus('current')
if mibBuilder.loadTexts: cvVrfIfDown.setDescription('This notification is generated when: a. The ifOperStatus of an interface associated with a VRF changes to the down(2) state. b. When an interface with ifOperStatus = up(1) state is disassociated with a VRF. The interface is identified by ifName and the VRF is identified by cvVrfName varbinds respectively. If all the interfaces associated with the VRF are in down(2) state or if there are no more interfaces associated with the VRF, then the cvVrfOperStatus will have a value of down(2).')
cvVnetTrunkUp = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 711, 0, 3)).setObjects(("IF-MIB", "ifName"))
if mibBuilder.loadTexts: cvVnetTrunkUp.setStatus('current')
if mibBuilder.loadTexts: cvVnetTrunkUp.setDescription('This notification is generated when the ifOperStatus of a vNET trunk interface changes to the up(1) state. The interface is identified by ifName varbind. The notification will be generated for only those interfaces for which the cvInterfaceVnetTrunkEnabled object has a value of True(1).')
cvVnetTrunkDown = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 711, 0, 4)).setObjects(("IF-MIB", "ifName"))
if mibBuilder.loadTexts: cvVnetTrunkDown.setStatus('current')
if mibBuilder.loadTexts: cvVnetTrunkDown.setDescription('This notification is generated when the ifOperStatus of a vNET trunk interface changes to the down(2) state. The interface is identified by ifName varbind. The notification will be generated for only those interfaces for which the cvInterfaceVnetTrunkEnabled object has a value of True(1).')
cvMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 711, 2, 1))
cvMIBVrfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 711, 2, 1, 1)).setObjects(("CISCO-VRF-MIB", "cvVrfOperStatus"), ("CISCO-VRF-MIB", "cvVrfStorageType"), ("CISCO-VRF-MIB", "cvVrfRowStatus"), ("CISCO-VRF-MIB", "cvVrfRouteDistProt"), ("CISCO-VRF-MIB", "cvVrfInterfaceType"), ("CISCO-VRF-MIB", "cvVrfInterfaceStorageType"), ("CISCO-VRF-MIB", "cvVrfInterfaceRowStatus"), ("CISCO-VRF-MIB", "cvVrfIfNotifEnable"), ("CISCO-VRF-MIB", "cvVrfName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvMIBVrfGroup = cvMIBVrfGroup.setStatus('current')
if mibBuilder.loadTexts: cvMIBVrfGroup.setDescription('Collection of objects needed for VRF and VRF-Lite management.')
cvMIBVrfNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 711, 2, 1, 2)).setObjects(("CISCO-VRF-MIB", "cvVrfIfUp"), ("CISCO-VRF-MIB", "cvVrfIfDown"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvMIBVrfNotifGroup = cvMIBVrfNotifGroup.setStatus('current')
if mibBuilder.loadTexts: cvMIBVrfNotifGroup.setDescription('Collection of VRF notifications.')
cvMIBVnetGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 711, 2, 1, 3)).setObjects(("CISCO-VRF-MIB", "cvVrfVnetTag"), ("CISCO-VRF-MIB", "cvVrfListVrfIndex"), ("CISCO-VRF-MIB", "cvVrfListStorageType"), ("CISCO-VRF-MIB", "cvVrfListRowStatus"), ("CISCO-VRF-MIB", "cvVrfInterfaceVnetTagOverride"), ("CISCO-VRF-MIB", "cvInterfaceVnetTrunkEnabled"), ("CISCO-VRF-MIB", "cvInterfaceVnetVrfList"), ("CISCO-VRF-MIB", "cvVnetTrunkNotifEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvMIBVnetGroup = cvMIBVnetGroup.setStatus('current')
if mibBuilder.loadTexts: cvMIBVnetGroup.setDescription('Collection of objects needed for vNET management.')
cvMIBVnetNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 711, 2, 1, 4)).setObjects(("CISCO-VRF-MIB", "cvVnetTrunkUp"), ("CISCO-VRF-MIB", "cvVnetTrunkDown"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvMIBVnetNotifGroup = cvMIBVnetNotifGroup.setStatus('current')
if mibBuilder.loadTexts: cvMIBVnetNotifGroup.setDescription('Collection of VRF and vNET notifications.')
cvMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 711, 2, 2))
cvMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 711, 2, 2, 1)).setObjects(("CISCO-VRF-MIB", "cvMIBVrfGroup"), ("CISCO-VRF-MIB", "cvMIBVrfNotifGroup"), ("CISCO-VRF-MIB", "cvMIBVnetGroup"), ("CISCO-VRF-MIB", "cvMIBVnetNotifGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvMIBCompliance = cvMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: cvMIBCompliance.setDescription('The compliance statement for SNMP Agents which implement this MIB.')
mibBuilder.exportSymbols("CISCO-VRF-MIB", PYSNMP_MODULE_ID=ciscoVrfMIB, cvVrfListVindex=cvVrfListVindex, ciscoVrfMIBNotifs=ciscoVrfMIBNotifs, cvVrfInterfaceStorageType=cvVrfInterfaceStorageType, cvVnetTrunkDown=cvVnetTrunkDown, cvVrf=cvVrf, cvMIBVrfGroup=cvMIBVrfGroup, cvVrfInterfaceType=cvVrfInterfaceType, cvVrfEntry=cvVrfEntry, cvInterfaceVnetTrunkEnabled=cvInterfaceVnetTrunkEnabled, cvVrfOperStatus=cvVrfOperStatus, cvVrfIfNotifEnable=cvVrfIfNotifEnable, cvVrfInterfaceTable=cvVrfInterfaceTable, CvVnetTagOrZero=CvVnetTagOrZero, cvVrfListTable=cvVrfListTable, cvVrfIfDown=cvVrfIfDown, ciscoVrfMIBConform=ciscoVrfMIBConform, cvVrfListStorageType=cvVrfListStorageType, cvVrfListRowStatus=cvVrfListRowStatus, cvVrfInterfaceIndex=cvVrfInterfaceIndex, cvVrfVnetTag=cvVrfVnetTag, cvMIBCompliances=cvMIBCompliances, cvVrfInterfaceEntry=cvVrfInterfaceEntry, cvVrfStorageType=cvVrfStorageType, cvVrfRouteDistProt=cvVrfRouteDistProt, cvVrfInterfaceRowStatus=cvVrfInterfaceRowStatus, cvVnetTrunkNotifEnable=cvVnetTrunkNotifEnable, cvVrfListVrfIndex=cvVrfListVrfIndex, cvVrfIfUp=cvVrfIfUp, ciscoVrfMIB=ciscoVrfMIB, cvVrfTable=cvVrfTable, cvMIBVnetNotifGroup=cvMIBVnetNotifGroup, CvVrfIfType=CvVrfIfType, cvInterfaceEntry=cvInterfaceEntry, cvMIBVnetGroup=cvMIBVnetGroup, cvVrfListEntry=cvVrfListEntry, cvVrfListName=cvVrfListName, cvInterfaceVnetVrfList=cvInterfaceVnetVrfList, cvMIBGroups=cvMIBGroups, cvVnetTrunkUp=cvVnetTrunkUp, cvVrfRowStatus=cvVrfRowStatus, cvInterfaceTable=cvInterfaceTable, cvMIBVrfNotifGroup=cvMIBVrfNotifGroup, cvVrfIndex=cvVrfIndex, cvVrfInterfaceVnetTagOverride=cvVrfInterfaceVnetTagOverride, cvMIBCompliance=cvMIBCompliance, cvInterface=cvInterface, cvNotifCntl=cvNotifCntl, ciscoVrfMIBObjects=ciscoVrfMIBObjects, cvVrfName=cvVrfName)
